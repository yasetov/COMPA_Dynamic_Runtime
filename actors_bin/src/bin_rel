
C:\Users\yolivave\work\COMPA_Dynamic_Runtime\actors_bin\Debug\actors_bin.elf:     file format elf32-microblazeel
C:\Users\yolivave\work\COMPA_Dynamic_Runtime\actors_bin\Debug\actors_bin.elf
architecture: MicroBlaze, flags 0x00000012:
EXEC_P, HAS_SYMS
start address 0x00000050

Program Header:
    LOAD off    0x000000f4 vaddr 0x00000000 paddr 0x00000000 align 2**2
         filesz 0x00000024 memsz 0x00000024 flags r-x
    LOAD off    0x00000118 vaddr 0x00000050 paddr 0x00000050 align 2**2
         filesz 0x00000748 memsz 0x00000748 flags rwx
    LOAD off    0x00000860 vaddr 0x00000698 paddr 0x00000698 align 2**0
         filesz 0x00000000 memsz 0x00000000 flags rw-
    LOAD off    0x00000860 vaddr 0x00000798 paddr 0x00000798 align 2**2
         filesz 0x00000008 memsz 0x00000830 flags rw-
    LOAD off    0x00000868 vaddr 0x20000000 paddr 0x20000000 align 2**2
         filesz 0x0000030c memsz 0x0000030c flags r-x
    LOAD off    0x00000b74 vaddr 0x20008000 paddr 0x20008000 align 2**2
         filesz 0x0005afa0 memsz 0x0005afa0 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .vectors.reset 00000004  00000000  00000000  000000f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .vectors.sw_exception 00000004  00000008  00000008  000000fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors.interrupt 00000004  00000010  00000010  00000104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .vectors.hw_exception 00000004  00000020  00000020  00000114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 sched_callers_section 0000030c  20000000  20000000  00000868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 actors_code_section 0005afa0  20008000  20008000  00000b74  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  6 .text         000005e0  00000050  00000050  00000118  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  7 .init         00000034  00000630  00000630  000006f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .fini         0000001c  00000664  00000664  0000072c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .ctors        00000008  00000680  00000680  00000748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .dtors        00000008  00000688  00000688  00000750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .rodata       00000008  00000690  00000690  00000758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .sdata2       00000000  00000698  00000698  00000860  2**0
                  ALLOC
 13 .data         00000100  00000698  00000698  00000760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .eh_frame     00000004  00000798  00000798  00000860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .jcr          00000004  0000079c  0000079c  00000864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 16 .bss          00000024  000007a0  000007a0  00000868  2**2
                  ALLOC
 17 .heap         00000404  000007c4  000007c4  00000868  2**0
                  ALLOC
 18 .stack        00000400  00000bc8  00000bc8  00000868  2**0
                  ALLOC
 19 .debug_frame  0000db84  00000000  00000000  0005bb14  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_info   00023c41  00000000  00000000  00069698  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_abbrev 00001d7f  00000000  00000000  0008d2d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000290  00000000  00000000  0008f058  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   00018e84  00000000  00000000  0008f2e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    00004ead  00000000  00000000  000a816c  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_ranges 00000080  00000000  00000000  000ad019  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .vectors.reset	00000000 .vectors.reset
00000008 l    d  .vectors.sw_exception	00000000 .vectors.sw_exception
00000010 l    d  .vectors.interrupt	00000000 .vectors.interrupt
00000020 l    d  .vectors.hw_exception	00000000 .vectors.hw_exception
20000000 l    d  sched_callers_section	00000000 sched_callers_section
20008000 l    d  actors_code_section	00000000 actors_code_section
00000050 l    d  .text	00000000 .text
00000630 l    d  .init	00000000 .init
00000664 l    d  .fini	00000000 .fini
00000680 l    d  .ctors	00000000 .ctors
00000688 l    d  .dtors	00000000 .dtors
00000690 l    d  .rodata	00000000 .rodata
00000698 l    d  .sdata2	00000000 .sdata2
00000698 l    d  .data	00000000 .data
00000798 l    d  .eh_frame	00000000 .eh_frame
0000079c l    d  .jcr	00000000 .jcr
000007a0 l    d  .bss	00000000 .bss
000007c4 l    d  .heap	00000000 .heap
00000bc8 l    d  .stack	00000000 .stack
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/xilinx/sdk/2014.2/gnu/microblaze/nt/bin/../lib/gcc/microblaze-xilinx-elf/4.8.3/../../../../microblaze-xilinx-elf/lib/bs/m/le/crt0.o
00000008 l       .vectors.sw_exception	00000000 _vector_sw_exception
00000010 l       .vectors.interrupt	00000000 _vector_interrupt
00000020 l       .vectors.hw_exception	00000000 _vector_hw_exception
00000000 l    df *ABS*	00000000 decoder_merger.o
20008000 l     F actors_code_section	0000006c fifo_i8_has_tokens
2000806c l     F actors_code_section	00000050 fifo_i8_get_num_tokens
200080bc l     F actors_code_section	000000a0 fifo_i8_has_room
2000815c l     F actors_code_section	000000a4 fifo_i8_get_room
20008200 l     F actors_code_section	00000070 fifo_i8_clear
20008270 l     F actors_code_section	0000008c fifo_i8_read_1
200082fc l     F actors_code_section	00000070 fifo_i8_write_1
2000836c l     F actors_code_section	0000006c fifo_i16_has_tokens
200083d8 l     F actors_code_section	00000050 fifo_i16_get_num_tokens
20008428 l     F actors_code_section	000000a0 fifo_i16_has_room
200084c8 l     F actors_code_section	000000a4 fifo_i16_get_room
2000856c l     F actors_code_section	00000070 fifo_i16_clear
200085dc l     F actors_code_section	00000090 fifo_i16_read_1
2000866c l     F actors_code_section	00000074 fifo_i16_write_1
200086e0 l     F actors_code_section	0000006c fifo_i32_has_tokens
2000874c l     F actors_code_section	00000050 fifo_i32_get_num_tokens
2000879c l     F actors_code_section	000000a0 fifo_i32_has_room
2000883c l     F actors_code_section	000000a4 fifo_i32_get_room
200088e0 l     F actors_code_section	00000070 fifo_i32_clear
20008950 l     F actors_code_section	0000008c fifo_i32_read_1
200089dc l     F actors_code_section	00000070 fifo_i32_write_1
20008a4c l     F actors_code_section	0000006c fifo_i64_has_tokens
20008ab8 l     F actors_code_section	00000050 fifo_i64_get_num_tokens
20008b08 l     F actors_code_section	000000a0 fifo_i64_has_room
20008ba8 l     F actors_code_section	000000a4 fifo_i64_get_room
20008c4c l     F actors_code_section	00000070 fifo_i64_clear
20008cbc l     F actors_code_section	000000a0 fifo_i64_read_1
20008d5c l     F actors_code_section	0000007c fifo_i64_write_1
20008dd8 l     F actors_code_section	0000006c fifo_u8_has_tokens
20008e44 l     F actors_code_section	00000050 fifo_u8_get_num_tokens
20008e94 l     F actors_code_section	000000a0 fifo_u8_has_room
20008f34 l     F actors_code_section	000000a4 fifo_u8_get_room
20008fd8 l     F actors_code_section	00000070 fifo_u8_clear
20009048 l     F actors_code_section	00000088 fifo_u8_read_1
200090d0 l     F actors_code_section	00000070 fifo_u8_write_1
20009140 l     F actors_code_section	0000006c fifo_u16_has_tokens
200091ac l     F actors_code_section	00000050 fifo_u16_get_num_tokens
200091fc l     F actors_code_section	000000a0 fifo_u16_has_room
2000929c l     F actors_code_section	000000a4 fifo_u16_get_room
20009340 l     F actors_code_section	00000070 fifo_u16_clear
200093b0 l     F actors_code_section	0000008c fifo_u16_read_1
2000943c l     F actors_code_section	00000074 fifo_u16_write_1
200094b0 l     F actors_code_section	0000006c fifo_u32_has_tokens
2000951c l     F actors_code_section	00000050 fifo_u32_get_num_tokens
2000956c l     F actors_code_section	000000a0 fifo_u32_has_room
2000960c l     F actors_code_section	000000a4 fifo_u32_get_room
200096b0 l     F actors_code_section	00000070 fifo_u32_clear
20009720 l     F actors_code_section	0000008c fifo_u32_read_1
200097ac l     F actors_code_section	00000070 fifo_u32_write_1
2000981c l     F actors_code_section	0000006c fifo_u64_has_tokens
20009888 l     F actors_code_section	00000050 fifo_u64_get_num_tokens
200098d8 l     F actors_code_section	000000a0 fifo_u64_has_room
20009978 l     F actors_code_section	000000a4 fifo_u64_get_room
20009a1c l     F actors_code_section	00000070 fifo_u64_clear
20009a8c l     F actors_code_section	000000a0 fifo_u64_read_1
20009b2c l     F actors_code_section	0000007c fifo_u64_write_1
20009ba8 l     F actors_code_section	0000006c fifo_float_has_tokens
20009c14 l     F actors_code_section	00000050 fifo_float_get_num_tokens
20009c64 l     F actors_code_section	000000a0 fifo_float_has_room
20009d04 l     F actors_code_section	000000a4 fifo_float_get_room
20009da8 l     F actors_code_section	00000070 fifo_float_clear
20009e18 l     F actors_code_section	0000008c fifo_float_read_1
20009ea4 l     F actors_code_section	00000070 fifo_float_write_1
2004567c l     O actors_code_section	00000014 fifo_0
20045690 l     O actors_code_section	00000014 fifo_1
200456a4 l     O actors_code_section	00000014 fifo_2
200456b8 l     O actors_code_section	00000014 fifo_3
200456cc l     O actors_code_section	00000014 fifo_4
200456e0 l     O actors_code_section	00000014 fifo_5
200456f4 l     O actors_code_section	00000014 fifo_6
20045708 l     O actors_code_section	00000014 fifo_7
2004571c l     O actors_code_section	00000014 fifo_8
20045730 l     O actors_code_section	00000014 fifo_9
20045744 l     O actors_code_section	00000014 fifo_10
20045758 l     O actors_code_section	00000014 fifo_11
2004576c l     O actors_code_section	00000014 fifo_12
20045780 l     O actors_code_section	00000014 fifo_13
20045794 l     O actors_code_section	00000014 fifo_14
200457a8 l     O actors_code_section	00000014 fifo_15
200457bc l     O actors_code_section	00000014 fifo_16
200457d0 l     O actors_code_section	00000014 fifo_17
200457e4 l     O actors_code_section	00000014 fifo_18
200457f8 l     O actors_code_section	00000014 fifo_19
2004580c l     O actors_code_section	00000014 fifo_20
20045820 l     O actors_code_section	00000014 fifo_21
20045834 l     O actors_code_section	00000014 fifo_22
20045848 l     O actors_code_section	00000014 fifo_23
2004585c l     O actors_code_section	00000014 fifo_24
20045870 l     O actors_code_section	00000014 fifo_25
20045884 l     O actors_code_section	00000014 fifo_26
20045898 l     O actors_code_section	00000014 fifo_27
200458ac l     O actors_code_section	00000014 fifo_28
200458c0 l     O actors_code_section	00000014 fifo_29
200458d4 l     O actors_code_section	00000014 fifo_30
200458e8 l     O actors_code_section	00000014 fifo_31
200458fc l     O actors_code_section	00000004 source_O
20045900 l     O actors_code_section	00000004 decoder_parser_parseheaders_BYTE
20045904 l     O actors_code_section	00000004 decoder_merger_YUV
20045908 l     O actors_code_section	00000004 display_B
2004590c l     O actors_code_section	00000004 decoder_parser_parseheaders_QP
20045910 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QP
20045914 l     O actors_code_section	00000004 decoder_parser_parseheaders_HEIGHT
20045918 l     O actors_code_section	00000004 display_HEIGHT
2004591c l     O actors_code_section	00000004 decoder_parser_parseheaders_RUN
20045920 l     O actors_code_section	00000004 decoder_parser_blkexp_RUN
20045924 l     O actors_code_section	00000004 decoder_parser_parseheaders_MV
20045928 l     O actors_code_section	00000004 decoder_parser_mvrecon_MVIN
2004592c l     O actors_code_section	00000004 decoder_parser_parseheaders_WIDTH
20045930 l     O actors_code_section	00000004 display_WIDTH
20045934 l     O actors_code_section	00000004 decoder_parser_parseheaders_LAST
20045938 l     O actors_code_section	00000004 decoder_parser_blkexp_LAST
2004593c l     O actors_code_section	00000004 decoder_parser_parseheaders_BTYPE
20045940 l     O actors_code_section	00000004 decoder_parser_mvseq_BTYPE
20045944 l     O actors_code_section	00000004 decoder_parser_mvrecon_BTYPE
20045948 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
2004594c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
20045950 l     O actors_code_section	00000004 decoder_motion_add_BTYPE
20045954 l     O actors_code_section	00000004 decoder_motion_framebuf_BTYPE
20045958 l     O actors_code_section	00000004 decoder_parser_parseheaders_VALUE
2004595c l     O actors_code_section	00000004 decoder_parser_blkexp_VALUE
20045960 l     O actors_code_section	00000004 decoder_parser_mvseq_A
20045964 l     O actors_code_section	00000004 decoder_parser_mvrecon_A
20045968 l     O actors_code_section	00000004 decoder_parser_blkexp_QFS
2004596c l     O actors_code_section	00000004 decoder_texture_DCsplit_IN
20045970 l     O actors_code_section	00000004 decoder_parser_mvrecon_MV
20045974 l     O actors_code_section	00000004 decoder_motion_framebuf_MV
20045978 l     O actors_code_section	00000004 decoder_texture_DCsplit_AC
2004597c l     O actors_code_section	00000004 decoder_texture_IS_QFS_AC
20045980 l     O actors_code_section	00000004 decoder_texture_DCsplit_DC
20045984 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
20045988 l     O actors_code_section	00000004 decoder_texture_IS_PQF_AC
2004598c l     O actors_code_section	00000004 decoder_texture_IAP_PQF_AC
20045990 l     O actors_code_section	00000004 decoder_texture_IAP_QF_AC
20045994 l     O actors_code_section	00000004 decoder_texture_IQ_AC
20045998 l     O actors_code_section	00000004 decoder_texture_IQ_OUT
2004599c l     O actors_code_section	00000004 decoder_texture_idct2d_IN
200459a0 l     O actors_code_section	00000004 decoder_texture_idct2d_OUT
200459a4 l     O actors_code_section	00000004 decoder_motion_add_TEX
200459a8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_B
200459ac l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_B
200459b0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_A
200459b4 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_A
200459b8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_C
200459bc l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_C
200459c0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_PTR
200459c4 l     O actors_code_section	00000004 decoder_texture_IAP_PTR
200459c8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
200459cc l     O actors_code_section	00000004 decoder_texture_IQ_DC
200459d0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_MODE
200459d4 l     O actors_code_section	00000004 decoder_texture_IS_AC_PRED_DIR
200459d8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
200459dc l     O actors_code_section	00000004 decoder_texture_idct2d_SIGNED
200459e0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
200459e4 l     O actors_code_section	00000004 decoder_texture_IAP_AC_PRED_DIR
200459e8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QUANT
200459ec l     O actors_code_section	00000004 decoder_texture_IQ_QP
200459f0 l     O actors_code_section	00000004 decoder_motion_interpolation_MOT
200459f4 l     O actors_code_section	00000004 decoder_motion_add_MOT
200459f8 l     O actors_code_section	00000004 decoder_motion_add_VID
200459fc l     O actors_code_section	00000004 decoder_motion_framebuf_WD
20045a00 l     O actors_code_section	00000004 decoder_merger_YUV_i
20045a04 l     O actors_code_section	00000004 decoder_motion_framebuf_RD
20045a08 l     O actors_code_section	00000004 decoder_motion_interpolation_RD
20045a0c l     O actors_code_section	00000004 decoder_motion_framebuf_halfpel
20045a10 l     O actors_code_section	00000004 decoder_motion_interpolation_halfpel
20048ef8 l     O actors_code_section	00000004 index_YUV_i
20048efc l     O actors_code_section	00000004 numTokens_YUV_i
20048f00 l     O actors_code_section	00000004 index_YUV
20048f04 l     O actors_code_section	00000004 numFree_YUV
20045a14 l     O actors_code_section	00000001 needInit
20045a18 l     O actors_code_section	0000000c stateNames
20048f08 l     O actors_code_section	00000004 _FSM_state
20009f14 l     F actors_code_section	00000070 read_YUV_i
20009f84 l     F actors_code_section	0000003c read_end_YUV_i
20009fc0 l     F actors_code_section	00000070 write_YUV
2000a030 l     F actors_code_section	00000038 write_end_YUV
2000a068 l     F actors_code_section	0000002c isSchedulable_Y
2000a094 l     F actors_code_section	000003bc Y
2000a450 l     F actors_code_section	0000002c isSchedulable_U
2000a47c l     F actors_code_section	00000104 U
2000a580 l     F actors_code_section	0000002c isSchedulable_V
2000a5ac l     F actors_code_section	00000104 V
00000000 l    df *ABS*	00000000 decoder_motion_add.o
2000a974 l     F actors_code_section	0000006c fifo_i8_has_tokens
2000a9e0 l     F actors_code_section	00000050 fifo_i8_get_num_tokens
2000aa30 l     F actors_code_section	000000a0 fifo_i8_has_room
2000aad0 l     F actors_code_section	000000a4 fifo_i8_get_room
2000ab74 l     F actors_code_section	00000070 fifo_i8_clear
2000abe4 l     F actors_code_section	0000008c fifo_i8_read_1
2000ac70 l     F actors_code_section	00000070 fifo_i8_write_1
2000ace0 l     F actors_code_section	0000006c fifo_i16_has_tokens
2000ad4c l     F actors_code_section	00000050 fifo_i16_get_num_tokens
2000ad9c l     F actors_code_section	000000a0 fifo_i16_has_room
2000ae3c l     F actors_code_section	000000a4 fifo_i16_get_room
2000aee0 l     F actors_code_section	00000070 fifo_i16_clear
2000af50 l     F actors_code_section	00000090 fifo_i16_read_1
2000afe0 l     F actors_code_section	00000074 fifo_i16_write_1
2000b054 l     F actors_code_section	0000006c fifo_i32_has_tokens
2000b0c0 l     F actors_code_section	00000050 fifo_i32_get_num_tokens
2000b110 l     F actors_code_section	000000a0 fifo_i32_has_room
2000b1b0 l     F actors_code_section	000000a4 fifo_i32_get_room
2000b254 l     F actors_code_section	00000070 fifo_i32_clear
2000b2c4 l     F actors_code_section	0000008c fifo_i32_read_1
2000b350 l     F actors_code_section	00000070 fifo_i32_write_1
2000b3c0 l     F actors_code_section	0000006c fifo_i64_has_tokens
2000b42c l     F actors_code_section	00000050 fifo_i64_get_num_tokens
2000b47c l     F actors_code_section	000000a0 fifo_i64_has_room
2000b51c l     F actors_code_section	000000a4 fifo_i64_get_room
2000b5c0 l     F actors_code_section	00000070 fifo_i64_clear
2000b630 l     F actors_code_section	000000a0 fifo_i64_read_1
2000b6d0 l     F actors_code_section	0000007c fifo_i64_write_1
2000b74c l     F actors_code_section	0000006c fifo_u8_has_tokens
2000b7b8 l     F actors_code_section	00000050 fifo_u8_get_num_tokens
2000b808 l     F actors_code_section	000000a0 fifo_u8_has_room
2000b8a8 l     F actors_code_section	000000a4 fifo_u8_get_room
2000b94c l     F actors_code_section	00000070 fifo_u8_clear
2000b9bc l     F actors_code_section	00000088 fifo_u8_read_1
2000ba44 l     F actors_code_section	00000070 fifo_u8_write_1
2000bab4 l     F actors_code_section	0000006c fifo_u16_has_tokens
2000bb20 l     F actors_code_section	00000050 fifo_u16_get_num_tokens
2000bb70 l     F actors_code_section	000000a0 fifo_u16_has_room
2000bc10 l     F actors_code_section	000000a4 fifo_u16_get_room
2000bcb4 l     F actors_code_section	00000070 fifo_u16_clear
2000bd24 l     F actors_code_section	0000008c fifo_u16_read_1
2000bdb0 l     F actors_code_section	00000074 fifo_u16_write_1
2000be24 l     F actors_code_section	0000006c fifo_u32_has_tokens
2000be90 l     F actors_code_section	00000050 fifo_u32_get_num_tokens
2000bee0 l     F actors_code_section	000000a0 fifo_u32_has_room
2000bf80 l     F actors_code_section	000000a4 fifo_u32_get_room
2000c024 l     F actors_code_section	00000070 fifo_u32_clear
2000c094 l     F actors_code_section	0000008c fifo_u32_read_1
2000c120 l     F actors_code_section	00000070 fifo_u32_write_1
2000c190 l     F actors_code_section	0000006c fifo_u64_has_tokens
2000c1fc l     F actors_code_section	00000050 fifo_u64_get_num_tokens
2000c24c l     F actors_code_section	000000a0 fifo_u64_has_room
2000c2ec l     F actors_code_section	000000a4 fifo_u64_get_room
2000c390 l     F actors_code_section	00000070 fifo_u64_clear
2000c400 l     F actors_code_section	000000a0 fifo_u64_read_1
2000c4a0 l     F actors_code_section	0000007c fifo_u64_write_1
2000c51c l     F actors_code_section	0000006c fifo_float_has_tokens
2000c588 l     F actors_code_section	00000050 fifo_float_get_num_tokens
2000c5d8 l     F actors_code_section	000000a0 fifo_float_has_room
2000c678 l     F actors_code_section	000000a4 fifo_float_get_room
2000c71c l     F actors_code_section	00000070 fifo_float_clear
2000c78c l     F actors_code_section	0000008c fifo_float_read_1
2000c818 l     F actors_code_section	00000070 fifo_float_write_1
20045a24 l     O actors_code_section	00000014 fifo_0
20045a38 l     O actors_code_section	00000014 fifo_1
20045a4c l     O actors_code_section	00000014 fifo_2
20045a60 l     O actors_code_section	00000014 fifo_3
20045a74 l     O actors_code_section	00000014 fifo_4
20045a88 l     O actors_code_section	00000014 fifo_5
20045a9c l     O actors_code_section	00000014 fifo_6
20045ab0 l     O actors_code_section	00000014 fifo_7
20045ac4 l     O actors_code_section	00000014 fifo_8
20045ad8 l     O actors_code_section	00000014 fifo_9
20045aec l     O actors_code_section	00000014 fifo_10
20045b00 l     O actors_code_section	00000014 fifo_11
20045b14 l     O actors_code_section	00000014 fifo_12
20045b28 l     O actors_code_section	00000014 fifo_13
20045b3c l     O actors_code_section	00000014 fifo_14
20045b50 l     O actors_code_section	00000014 fifo_15
20045b64 l     O actors_code_section	00000014 fifo_16
20045b78 l     O actors_code_section	00000014 fifo_17
20045b8c l     O actors_code_section	00000014 fifo_18
20045ba0 l     O actors_code_section	00000014 fifo_19
20045bb4 l     O actors_code_section	00000014 fifo_20
20045bc8 l     O actors_code_section	00000014 fifo_21
20045bdc l     O actors_code_section	00000014 fifo_22
20045bf0 l     O actors_code_section	00000014 fifo_23
20045c04 l     O actors_code_section	00000014 fifo_24
20045c18 l     O actors_code_section	00000014 fifo_25
20045c2c l     O actors_code_section	00000014 fifo_26
20045c40 l     O actors_code_section	00000014 fifo_27
20045c54 l     O actors_code_section	00000014 fifo_28
20045c68 l     O actors_code_section	00000014 fifo_29
20045c7c l     O actors_code_section	00000014 fifo_30
20045c90 l     O actors_code_section	00000014 fifo_31
20045ca4 l     O actors_code_section	00000004 source_O
20045ca8 l     O actors_code_section	00000004 decoder_parser_parseheaders_BYTE
20045cac l     O actors_code_section	00000004 decoder_merger_YUV
20045cb0 l     O actors_code_section	00000004 display_B
20045cb4 l     O actors_code_section	00000004 decoder_parser_parseheaders_QP
20045cb8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QP
20045cbc l     O actors_code_section	00000004 decoder_parser_parseheaders_HEIGHT
20045cc0 l     O actors_code_section	00000004 display_HEIGHT
20045cc4 l     O actors_code_section	00000004 decoder_parser_parseheaders_RUN
20045cc8 l     O actors_code_section	00000004 decoder_parser_blkexp_RUN
20045ccc l     O actors_code_section	00000004 decoder_parser_parseheaders_MV
20045cd0 l     O actors_code_section	00000004 decoder_parser_mvrecon_MVIN
20045cd4 l     O actors_code_section	00000004 decoder_parser_parseheaders_WIDTH
20045cd8 l     O actors_code_section	00000004 display_WIDTH
20045cdc l     O actors_code_section	00000004 decoder_parser_parseheaders_LAST
20045ce0 l     O actors_code_section	00000004 decoder_parser_blkexp_LAST
20045ce4 l     O actors_code_section	00000004 decoder_parser_parseheaders_BTYPE
20045ce8 l     O actors_code_section	00000004 decoder_parser_mvseq_BTYPE
20045cec l     O actors_code_section	00000004 decoder_parser_mvrecon_BTYPE
20045cf0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
20045cf4 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
20045cf8 l     O actors_code_section	00000004 decoder_motion_add_BTYPE
20045cfc l     O actors_code_section	00000004 decoder_motion_framebuf_BTYPE
20045d00 l     O actors_code_section	00000004 decoder_parser_parseheaders_VALUE
20045d04 l     O actors_code_section	00000004 decoder_parser_blkexp_VALUE
20045d08 l     O actors_code_section	00000004 decoder_parser_mvseq_A
20045d0c l     O actors_code_section	00000004 decoder_parser_mvrecon_A
20045d10 l     O actors_code_section	00000004 decoder_parser_blkexp_QFS
20045d14 l     O actors_code_section	00000004 decoder_texture_DCsplit_IN
20045d18 l     O actors_code_section	00000004 decoder_parser_mvrecon_MV
20045d1c l     O actors_code_section	00000004 decoder_motion_framebuf_MV
20045d20 l     O actors_code_section	00000004 decoder_texture_DCsplit_AC
20045d24 l     O actors_code_section	00000004 decoder_texture_IS_QFS_AC
20045d28 l     O actors_code_section	00000004 decoder_texture_DCsplit_DC
20045d2c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
20045d30 l     O actors_code_section	00000004 decoder_texture_IS_PQF_AC
20045d34 l     O actors_code_section	00000004 decoder_texture_IAP_PQF_AC
20045d38 l     O actors_code_section	00000004 decoder_texture_IAP_QF_AC
20045d3c l     O actors_code_section	00000004 decoder_texture_IQ_AC
20045d40 l     O actors_code_section	00000004 decoder_texture_IQ_OUT
20045d44 l     O actors_code_section	00000004 decoder_texture_idct2d_IN
20045d48 l     O actors_code_section	00000004 decoder_texture_idct2d_OUT
20045d4c l     O actors_code_section	00000004 decoder_motion_add_TEX
20045d50 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_B
20045d54 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_B
20045d58 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_A
20045d5c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_A
20045d60 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_C
20045d64 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_C
20045d68 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_PTR
20045d6c l     O actors_code_section	00000004 decoder_texture_IAP_PTR
20045d70 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
20045d74 l     O actors_code_section	00000004 decoder_texture_IQ_DC
20045d78 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_MODE
20045d7c l     O actors_code_section	00000004 decoder_texture_IS_AC_PRED_DIR
20045d80 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
20045d84 l     O actors_code_section	00000004 decoder_texture_idct2d_SIGNED
20045d88 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
20045d8c l     O actors_code_section	00000004 decoder_texture_IAP_AC_PRED_DIR
20045d90 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QUANT
20045d94 l     O actors_code_section	00000004 decoder_texture_IQ_QP
20045d98 l     O actors_code_section	00000004 decoder_motion_interpolation_MOT
20045d9c l     O actors_code_section	00000004 decoder_motion_add_MOT
20045da0 l     O actors_code_section	00000004 decoder_motion_add_VID
20045da4 l     O actors_code_section	00000004 decoder_motion_framebuf_WD
20045da8 l     O actors_code_section	00000004 decoder_merger_YUV_i
20045dac l     O actors_code_section	00000004 decoder_motion_framebuf_RD
20045db0 l     O actors_code_section	00000004 decoder_motion_interpolation_RD
20045db4 l     O actors_code_section	00000004 decoder_motion_framebuf_halfpel
20045db8 l     O actors_code_section	00000004 decoder_motion_interpolation_halfpel
20048f0c l     O actors_code_section	00000004 index_MOT
20048f10 l     O actors_code_section	00000004 numTokens_MOT
20048f14 l     O actors_code_section	00000004 index_TEX
20048f18 l     O actors_code_section	00000004 numTokens_TEX
20048f1c l     O actors_code_section	00000004 index_BTYPE
20048f20 l     O actors_code_section	00000004 numTokens_BTYPE
20048f24 l     O actors_code_section	00000004 index_VID
20048f28 l     O actors_code_section	00000004 numFree_VID
20045dbc l     O actors_code_section	00000001 needInit
20045dc0 l     O actors_code_section	00000018 stateNames
20048f2c l     O actors_code_section	00000004 _FSM_state
2000c888 l     F actors_code_section	00000070 read_MOT
2000c8f8 l     F actors_code_section	00000038 read_end_MOT
2000c930 l     F actors_code_section	00000070 read_TEX
2000c9a0 l     F actors_code_section	00000038 read_end_TEX
2000c9d8 l     F actors_code_section	00000070 read_BTYPE
2000ca48 l     F actors_code_section	0000003c read_end_BTYPE
2000ca84 l     F actors_code_section	00000070 write_VID
2000caf4 l     F actors_code_section	00000038 write_end_VID
2000cb2c l     F actors_code_section	00000074 isSchedulable_cmd_newVop
2000cba0 l     F actors_code_section	0000007c cmd_newVop
2000cc1c l     F actors_code_section	00000074 isSchedulable_cmd_textureOnly
2000cc90 l     F actors_code_section	0000007c cmd_textureOnly
2000cd0c l     F actors_code_section	00000074 isSchedulable_cmd_motionOnly
2000cd80 l     F actors_code_section	0000007c cmd_motionOnly
2000cdfc l     F actors_code_section	0000002c isSchedulable_cmd_other
2000ce28 l     F actors_code_section	0000007c cmd_other
2000cea4 l     F actors_code_section	0000002c isSchedulable_texture
2000ced0 l     F actors_code_section	00000104 texture
2000cfd4 l     F actors_code_section	0000002c isSchedulable_motion
2000d000 l     F actors_code_section	00000104 motion
2000d104 l     F actors_code_section	0000002c isSchedulable_combine
2000d130 l     F actors_code_section	000001fc combine
00000000 l    df *ABS*	00000000 decoder_motion_framebuf.o
2000d918 l     F actors_code_section	0000006c fifo_i8_has_tokens
2000d984 l     F actors_code_section	00000050 fifo_i8_get_num_tokens
2000d9d4 l     F actors_code_section	000000a0 fifo_i8_has_room
2000da74 l     F actors_code_section	000000a4 fifo_i8_get_room
2000db18 l     F actors_code_section	00000070 fifo_i8_clear
2000db88 l     F actors_code_section	0000008c fifo_i8_read_1
2000dc14 l     F actors_code_section	00000070 fifo_i8_write_1
2000dc84 l     F actors_code_section	0000006c fifo_i16_has_tokens
2000dcf0 l     F actors_code_section	00000050 fifo_i16_get_num_tokens
2000dd40 l     F actors_code_section	000000a0 fifo_i16_has_room
2000dde0 l     F actors_code_section	000000a4 fifo_i16_get_room
2000de84 l     F actors_code_section	00000070 fifo_i16_clear
2000def4 l     F actors_code_section	00000090 fifo_i16_read_1
2000df84 l     F actors_code_section	00000074 fifo_i16_write_1
2000dff8 l     F actors_code_section	0000006c fifo_i32_has_tokens
2000e064 l     F actors_code_section	00000050 fifo_i32_get_num_tokens
2000e0b4 l     F actors_code_section	000000a0 fifo_i32_has_room
2000e154 l     F actors_code_section	000000a4 fifo_i32_get_room
2000e1f8 l     F actors_code_section	00000070 fifo_i32_clear
2000e268 l     F actors_code_section	0000008c fifo_i32_read_1
2000e2f4 l     F actors_code_section	00000070 fifo_i32_write_1
2000e364 l     F actors_code_section	0000006c fifo_i64_has_tokens
2000e3d0 l     F actors_code_section	00000050 fifo_i64_get_num_tokens
2000e420 l     F actors_code_section	000000a0 fifo_i64_has_room
2000e4c0 l     F actors_code_section	000000a4 fifo_i64_get_room
2000e564 l     F actors_code_section	00000070 fifo_i64_clear
2000e5d4 l     F actors_code_section	000000a0 fifo_i64_read_1
2000e674 l     F actors_code_section	0000007c fifo_i64_write_1
2000e6f0 l     F actors_code_section	0000006c fifo_u8_has_tokens
2000e75c l     F actors_code_section	00000050 fifo_u8_get_num_tokens
2000e7ac l     F actors_code_section	000000a0 fifo_u8_has_room
2000e84c l     F actors_code_section	000000a4 fifo_u8_get_room
2000e8f0 l     F actors_code_section	00000070 fifo_u8_clear
2000e960 l     F actors_code_section	00000088 fifo_u8_read_1
2000e9e8 l     F actors_code_section	00000070 fifo_u8_write_1
2000ea58 l     F actors_code_section	0000006c fifo_u16_has_tokens
2000eac4 l     F actors_code_section	00000050 fifo_u16_get_num_tokens
2000eb14 l     F actors_code_section	000000a0 fifo_u16_has_room
2000ebb4 l     F actors_code_section	000000a4 fifo_u16_get_room
2000ec58 l     F actors_code_section	00000070 fifo_u16_clear
2000ecc8 l     F actors_code_section	0000008c fifo_u16_read_1
2000ed54 l     F actors_code_section	00000074 fifo_u16_write_1
2000edc8 l     F actors_code_section	0000006c fifo_u32_has_tokens
2000ee34 l     F actors_code_section	00000050 fifo_u32_get_num_tokens
2000ee84 l     F actors_code_section	000000a0 fifo_u32_has_room
2000ef24 l     F actors_code_section	000000a4 fifo_u32_get_room
2000efc8 l     F actors_code_section	00000070 fifo_u32_clear
2000f038 l     F actors_code_section	0000008c fifo_u32_read_1
2000f0c4 l     F actors_code_section	00000070 fifo_u32_write_1
2000f134 l     F actors_code_section	0000006c fifo_u64_has_tokens
2000f1a0 l     F actors_code_section	00000050 fifo_u64_get_num_tokens
2000f1f0 l     F actors_code_section	000000a0 fifo_u64_has_room
2000f290 l     F actors_code_section	000000a4 fifo_u64_get_room
2000f334 l     F actors_code_section	00000070 fifo_u64_clear
2000f3a4 l     F actors_code_section	000000a0 fifo_u64_read_1
2000f444 l     F actors_code_section	0000007c fifo_u64_write_1
2000f4c0 l     F actors_code_section	0000006c fifo_float_has_tokens
2000f52c l     F actors_code_section	00000050 fifo_float_get_num_tokens
2000f57c l     F actors_code_section	000000a0 fifo_float_has_room
2000f61c l     F actors_code_section	000000a4 fifo_float_get_room
2000f6c0 l     F actors_code_section	00000070 fifo_float_clear
2000f730 l     F actors_code_section	0000008c fifo_float_read_1
2000f7bc l     F actors_code_section	00000070 fifo_float_write_1
20045dd8 l     O actors_code_section	00000014 fifo_0
20045dec l     O actors_code_section	00000014 fifo_1
20045e00 l     O actors_code_section	00000014 fifo_2
20045e14 l     O actors_code_section	00000014 fifo_3
20045e28 l     O actors_code_section	00000014 fifo_4
20045e3c l     O actors_code_section	00000014 fifo_5
20045e50 l     O actors_code_section	00000014 fifo_6
20045e64 l     O actors_code_section	00000014 fifo_7
20045e78 l     O actors_code_section	00000014 fifo_8
20045e8c l     O actors_code_section	00000014 fifo_9
20045ea0 l     O actors_code_section	00000014 fifo_10
20045eb4 l     O actors_code_section	00000014 fifo_11
20045ec8 l     O actors_code_section	00000014 fifo_12
20045edc l     O actors_code_section	00000014 fifo_13
20045ef0 l     O actors_code_section	00000014 fifo_14
20045f04 l     O actors_code_section	00000014 fifo_15
20045f18 l     O actors_code_section	00000014 fifo_16
20045f2c l     O actors_code_section	00000014 fifo_17
20045f40 l     O actors_code_section	00000014 fifo_18
20045f54 l     O actors_code_section	00000014 fifo_19
20045f68 l     O actors_code_section	00000014 fifo_20
20045f7c l     O actors_code_section	00000014 fifo_21
20045f90 l     O actors_code_section	00000014 fifo_22
20045fa4 l     O actors_code_section	00000014 fifo_23
20045fb8 l     O actors_code_section	00000014 fifo_24
20045fcc l     O actors_code_section	00000014 fifo_25
20045fe0 l     O actors_code_section	00000014 fifo_26
20045ff4 l     O actors_code_section	00000014 fifo_27
20046008 l     O actors_code_section	00000014 fifo_28
2004601c l     O actors_code_section	00000014 fifo_29
20046030 l     O actors_code_section	00000014 fifo_30
20046044 l     O actors_code_section	00000014 fifo_31
20046058 l     O actors_code_section	00000004 source_O
2004605c l     O actors_code_section	00000004 decoder_parser_parseheaders_BYTE
20046060 l     O actors_code_section	00000004 decoder_merger_YUV
20046064 l     O actors_code_section	00000004 display_B
20046068 l     O actors_code_section	00000004 decoder_parser_parseheaders_QP
2004606c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QP
20046070 l     O actors_code_section	00000004 decoder_parser_parseheaders_HEIGHT
20046074 l     O actors_code_section	00000004 display_HEIGHT
20046078 l     O actors_code_section	00000004 decoder_parser_parseheaders_RUN
2004607c l     O actors_code_section	00000004 decoder_parser_blkexp_RUN
20046080 l     O actors_code_section	00000004 decoder_parser_parseheaders_MV
20046084 l     O actors_code_section	00000004 decoder_parser_mvrecon_MVIN
20046088 l     O actors_code_section	00000004 decoder_parser_parseheaders_WIDTH
2004608c l     O actors_code_section	00000004 display_WIDTH
20046090 l     O actors_code_section	00000004 decoder_parser_parseheaders_LAST
20046094 l     O actors_code_section	00000004 decoder_parser_blkexp_LAST
20046098 l     O actors_code_section	00000004 decoder_parser_parseheaders_BTYPE
2004609c l     O actors_code_section	00000004 decoder_parser_mvseq_BTYPE
200460a0 l     O actors_code_section	00000004 decoder_parser_mvrecon_BTYPE
200460a4 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
200460a8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
200460ac l     O actors_code_section	00000004 decoder_motion_add_BTYPE
200460b0 l     O actors_code_section	00000004 decoder_motion_framebuf_BTYPE
200460b4 l     O actors_code_section	00000004 decoder_parser_parseheaders_VALUE
200460b8 l     O actors_code_section	00000004 decoder_parser_blkexp_VALUE
200460bc l     O actors_code_section	00000004 decoder_parser_mvseq_A
200460c0 l     O actors_code_section	00000004 decoder_parser_mvrecon_A
200460c4 l     O actors_code_section	00000004 decoder_parser_blkexp_QFS
200460c8 l     O actors_code_section	00000004 decoder_texture_DCsplit_IN
200460cc l     O actors_code_section	00000004 decoder_parser_mvrecon_MV
200460d0 l     O actors_code_section	00000004 decoder_motion_framebuf_MV
200460d4 l     O actors_code_section	00000004 decoder_texture_DCsplit_AC
200460d8 l     O actors_code_section	00000004 decoder_texture_IS_QFS_AC
200460dc l     O actors_code_section	00000004 decoder_texture_DCsplit_DC
200460e0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
200460e4 l     O actors_code_section	00000004 decoder_texture_IS_PQF_AC
200460e8 l     O actors_code_section	00000004 decoder_texture_IAP_PQF_AC
200460ec l     O actors_code_section	00000004 decoder_texture_IAP_QF_AC
200460f0 l     O actors_code_section	00000004 decoder_texture_IQ_AC
200460f4 l     O actors_code_section	00000004 decoder_texture_IQ_OUT
200460f8 l     O actors_code_section	00000004 decoder_texture_idct2d_IN
200460fc l     O actors_code_section	00000004 decoder_texture_idct2d_OUT
20046100 l     O actors_code_section	00000004 decoder_motion_add_TEX
20046104 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_B
20046108 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_B
2004610c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_A
20046110 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_A
20046114 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_C
20046118 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_C
2004611c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_PTR
20046120 l     O actors_code_section	00000004 decoder_texture_IAP_PTR
20046124 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
20046128 l     O actors_code_section	00000004 decoder_texture_IQ_DC
2004612c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_MODE
20046130 l     O actors_code_section	00000004 decoder_texture_IS_AC_PRED_DIR
20046134 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
20046138 l     O actors_code_section	00000004 decoder_texture_idct2d_SIGNED
2004613c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
20046140 l     O actors_code_section	00000004 decoder_texture_IAP_AC_PRED_DIR
20046144 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QUANT
20046148 l     O actors_code_section	00000004 decoder_texture_IQ_QP
2004614c l     O actors_code_section	00000004 decoder_motion_interpolation_MOT
20046150 l     O actors_code_section	00000004 decoder_motion_add_MOT
20046154 l     O actors_code_section	00000004 decoder_motion_add_VID
20046158 l     O actors_code_section	00000004 decoder_motion_framebuf_WD
2004615c l     O actors_code_section	00000004 decoder_merger_YUV_i
20046160 l     O actors_code_section	00000004 decoder_motion_framebuf_RD
20046164 l     O actors_code_section	00000004 decoder_motion_interpolation_RD
20046168 l     O actors_code_section	00000004 decoder_motion_framebuf_halfpel
2004616c l     O actors_code_section	00000004 decoder_motion_interpolation_halfpel
20048f30 l     O actors_code_section	00000004 index_MV
20048f34 l     O actors_code_section	00000004 numTokens_MV
20048f38 l     O actors_code_section	00000004 index_BTYPE
20048f3c l     O actors_code_section	00000004 numTokens_BTYPE
20048f40 l     O actors_code_section	00000004 index_WD
20048f44 l     O actors_code_section	00000004 numTokens_WD
20048f48 l     O actors_code_section	00000004 index_halfpel
20048f4c l     O actors_code_section	00000004 numFree_halfpel
20048f50 l     O actors_code_section	00000004 index_RD
20048f54 l     O actors_code_section	00000004 numFree_RD
20048f58 l     O actors_code_section	00010800 frameBuffer
20059758 l     O actors_code_section	00004200 frameBuffer_U
2005d958 l     O actors_code_section	00004200 frameBuffer_V
20061b58 l     O actors_code_section	00000004 vop_width
20061b5c l     O actors_code_section	00000004 vop_height
20061b60 l     O actors_code_section	00000004 vop_width_in_samples
20061b64 l     O actors_code_section	00000004 vop_height_in_samples
20061b68 l     O actors_code_section	00000004 vop_rounding_mode
20061b6c l     O actors_code_section	00000004 max_outstanding_writes
20046170 l     O actors_code_section	00000004 start_of_frame
20061b70 l     O actors_code_section	00000004 vop_width_in_samples_U
20061b74 l     O actors_code_section	00000004 vop_height_in_samples_U
20046174 l     O actors_code_section	00000004 start_of_frame_U
20061b78 l     O actors_code_section	00000002 mvx
20061b7a l     O actors_code_section	00000002 mvy
20061b7c l     O actors_code_section	00000004 mbx_read
20061b80 l     O actors_code_section	00000004 mby_read
20061b84 l     O actors_code_section	00000004 outstanding_writes
20061b88 l     O actors_code_section	00000004 mb_write_ptr
20061b8c l     O actors_code_section	00000004 mbx_write
20061b90 l     O actors_code_section	00000004 mb_write_ptr_chroma
20061b94 l     O actors_code_section	00000004 comp_so_far
20046178 l     O actors_code_section	00000001 needInit
2004617c l     O actors_code_section	00000010 stateNames
20061b98 l     O actors_code_section	00000004 _FSM_state
2000f82c l     F actors_code_section	00000070 read_MV
2000f89c l     F actors_code_section	00000038 read_end_MV
2000f8d4 l     F actors_code_section	00000070 read_BTYPE
2000f944 l     F actors_code_section	0000003c read_end_BTYPE
2000f980 l     F actors_code_section	00000070 read_WD
2000f9f0 l     F actors_code_section	00000038 read_end_WD
2000fa28 l     F actors_code_section	00000070 write_halfpel
2000fa98 l     F actors_code_section	00000038 write_end_halfpel
2000fad0 l     F actors_code_section	00000070 write_RD
2000fb40 l     F actors_code_section	00000038 write_end_RD
2000fb78 l     F actors_code_section	000000ec advance_block
2000fc64 l     F actors_code_section	00000074 isSchedulable_cmd_newVop
2000fcd8 l     F actors_code_section	000000b8 cmd_newVop
2000fd90 l     F actors_code_section	0000002c isSchedulable_get_w_h
2000fdbc l     F actors_code_section	00000398 get_w_h
20010154 l     F actors_code_section	00000074 isSchedulable_cmd_noMotion
200101c8 l     F actors_code_section	00000084 cmd_noMotion
2001024c l     F actors_code_section	00000074 isSchedulable_cmd_motion
200102c0 l     F actors_code_section	0000007c cmd_motion
2001033c l     F actors_code_section	0000002c isSchedulable_read_mv
20010368 l     F actors_code_section	00000180 read_mv
200104e8 l     F actors_code_section	0000002c isSchedulable_cmd_neither
20010514 l     F actors_code_section	000000d8 cmd_neither
200105ec l     F actors_code_section	00000078 isSchedulable_read_fb_Y
20010664 l     F actors_code_section	000004d4 read_fb_Y
20010b38 l     F actors_code_section	00000074 isSchedulable_read_fb_U
20010bac l     F actors_code_section	0000048c read_fb_U
20011038 l     F actors_code_section	0000005c isSchedulable_read_fb_V
20011094 l     F actors_code_section	0000048c read_fb_V
20011520 l     F actors_code_section	00000050 isSchedulable_untagged_0
20011570 l     F actors_code_section	00000520 untagged_0
00000000 l    df *ABS*	00000000 decoder_motion_interpolation.o
2001207c l     F actors_code_section	0000006c fifo_i8_has_tokens
200120e8 l     F actors_code_section	00000050 fifo_i8_get_num_tokens
20012138 l     F actors_code_section	000000a0 fifo_i8_has_room
200121d8 l     F actors_code_section	000000a4 fifo_i8_get_room
2001227c l     F actors_code_section	00000070 fifo_i8_clear
200122ec l     F actors_code_section	0000008c fifo_i8_read_1
20012378 l     F actors_code_section	00000070 fifo_i8_write_1
200123e8 l     F actors_code_section	0000006c fifo_i16_has_tokens
20012454 l     F actors_code_section	00000050 fifo_i16_get_num_tokens
200124a4 l     F actors_code_section	000000a0 fifo_i16_has_room
20012544 l     F actors_code_section	000000a4 fifo_i16_get_room
200125e8 l     F actors_code_section	00000070 fifo_i16_clear
20012658 l     F actors_code_section	00000090 fifo_i16_read_1
200126e8 l     F actors_code_section	00000074 fifo_i16_write_1
2001275c l     F actors_code_section	0000006c fifo_i32_has_tokens
200127c8 l     F actors_code_section	00000050 fifo_i32_get_num_tokens
20012818 l     F actors_code_section	000000a0 fifo_i32_has_room
200128b8 l     F actors_code_section	000000a4 fifo_i32_get_room
2001295c l     F actors_code_section	00000070 fifo_i32_clear
200129cc l     F actors_code_section	0000008c fifo_i32_read_1
20012a58 l     F actors_code_section	00000070 fifo_i32_write_1
20012ac8 l     F actors_code_section	0000006c fifo_i64_has_tokens
20012b34 l     F actors_code_section	00000050 fifo_i64_get_num_tokens
20012b84 l     F actors_code_section	000000a0 fifo_i64_has_room
20012c24 l     F actors_code_section	000000a4 fifo_i64_get_room
20012cc8 l     F actors_code_section	00000070 fifo_i64_clear
20012d38 l     F actors_code_section	000000a0 fifo_i64_read_1
20012dd8 l     F actors_code_section	0000007c fifo_i64_write_1
20012e54 l     F actors_code_section	0000006c fifo_u8_has_tokens
20012ec0 l     F actors_code_section	00000050 fifo_u8_get_num_tokens
20012f10 l     F actors_code_section	000000a0 fifo_u8_has_room
20012fb0 l     F actors_code_section	000000a4 fifo_u8_get_room
20013054 l     F actors_code_section	00000070 fifo_u8_clear
200130c4 l     F actors_code_section	00000088 fifo_u8_read_1
2001314c l     F actors_code_section	00000070 fifo_u8_write_1
200131bc l     F actors_code_section	0000006c fifo_u16_has_tokens
20013228 l     F actors_code_section	00000050 fifo_u16_get_num_tokens
20013278 l     F actors_code_section	000000a0 fifo_u16_has_room
20013318 l     F actors_code_section	000000a4 fifo_u16_get_room
200133bc l     F actors_code_section	00000070 fifo_u16_clear
2001342c l     F actors_code_section	0000008c fifo_u16_read_1
200134b8 l     F actors_code_section	00000074 fifo_u16_write_1
2001352c l     F actors_code_section	0000006c fifo_u32_has_tokens
20013598 l     F actors_code_section	00000050 fifo_u32_get_num_tokens
200135e8 l     F actors_code_section	000000a0 fifo_u32_has_room
20013688 l     F actors_code_section	000000a4 fifo_u32_get_room
2001372c l     F actors_code_section	00000070 fifo_u32_clear
2001379c l     F actors_code_section	0000008c fifo_u32_read_1
20013828 l     F actors_code_section	00000070 fifo_u32_write_1
20013898 l     F actors_code_section	0000006c fifo_u64_has_tokens
20013904 l     F actors_code_section	00000050 fifo_u64_get_num_tokens
20013954 l     F actors_code_section	000000a0 fifo_u64_has_room
200139f4 l     F actors_code_section	000000a4 fifo_u64_get_room
20013a98 l     F actors_code_section	00000070 fifo_u64_clear
20013b08 l     F actors_code_section	000000a0 fifo_u64_read_1
20013ba8 l     F actors_code_section	0000007c fifo_u64_write_1
20013c24 l     F actors_code_section	0000006c fifo_float_has_tokens
20013c90 l     F actors_code_section	00000050 fifo_float_get_num_tokens
20013ce0 l     F actors_code_section	000000a0 fifo_float_has_room
20013d80 l     F actors_code_section	000000a4 fifo_float_get_room
20013e24 l     F actors_code_section	00000070 fifo_float_clear
20013e94 l     F actors_code_section	0000008c fifo_float_read_1
20013f20 l     F actors_code_section	00000070 fifo_float_write_1
2004618c l     O actors_code_section	00000014 fifo_0
200461a0 l     O actors_code_section	00000014 fifo_1
200461b4 l     O actors_code_section	00000014 fifo_2
200461c8 l     O actors_code_section	00000014 fifo_3
200461dc l     O actors_code_section	00000014 fifo_4
200461f0 l     O actors_code_section	00000014 fifo_5
20046204 l     O actors_code_section	00000014 fifo_6
20046218 l     O actors_code_section	00000014 fifo_7
2004622c l     O actors_code_section	00000014 fifo_8
20046240 l     O actors_code_section	00000014 fifo_9
20046254 l     O actors_code_section	00000014 fifo_10
20046268 l     O actors_code_section	00000014 fifo_11
2004627c l     O actors_code_section	00000014 fifo_12
20046290 l     O actors_code_section	00000014 fifo_13
200462a4 l     O actors_code_section	00000014 fifo_14
200462b8 l     O actors_code_section	00000014 fifo_15
200462cc l     O actors_code_section	00000014 fifo_16
200462e0 l     O actors_code_section	00000014 fifo_17
200462f4 l     O actors_code_section	00000014 fifo_18
20046308 l     O actors_code_section	00000014 fifo_19
2004631c l     O actors_code_section	00000014 fifo_20
20046330 l     O actors_code_section	00000014 fifo_21
20046344 l     O actors_code_section	00000014 fifo_22
20046358 l     O actors_code_section	00000014 fifo_23
2004636c l     O actors_code_section	00000014 fifo_24
20046380 l     O actors_code_section	00000014 fifo_25
20046394 l     O actors_code_section	00000014 fifo_26
200463a8 l     O actors_code_section	00000014 fifo_27
200463bc l     O actors_code_section	00000014 fifo_28
200463d0 l     O actors_code_section	00000014 fifo_29
200463e4 l     O actors_code_section	00000014 fifo_30
200463f8 l     O actors_code_section	00000014 fifo_31
2004640c l     O actors_code_section	00000004 source_O
20046410 l     O actors_code_section	00000004 decoder_parser_parseheaders_BYTE
20046414 l     O actors_code_section	00000004 decoder_merger_YUV
20046418 l     O actors_code_section	00000004 display_B
2004641c l     O actors_code_section	00000004 decoder_parser_parseheaders_QP
20046420 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QP
20046424 l     O actors_code_section	00000004 decoder_parser_parseheaders_HEIGHT
20046428 l     O actors_code_section	00000004 display_HEIGHT
2004642c l     O actors_code_section	00000004 decoder_parser_parseheaders_RUN
20046430 l     O actors_code_section	00000004 decoder_parser_blkexp_RUN
20046434 l     O actors_code_section	00000004 decoder_parser_parseheaders_MV
20046438 l     O actors_code_section	00000004 decoder_parser_mvrecon_MVIN
2004643c l     O actors_code_section	00000004 decoder_parser_parseheaders_WIDTH
20046440 l     O actors_code_section	00000004 display_WIDTH
20046444 l     O actors_code_section	00000004 decoder_parser_parseheaders_LAST
20046448 l     O actors_code_section	00000004 decoder_parser_blkexp_LAST
2004644c l     O actors_code_section	00000004 decoder_parser_parseheaders_BTYPE
20046450 l     O actors_code_section	00000004 decoder_parser_mvseq_BTYPE
20046454 l     O actors_code_section	00000004 decoder_parser_mvrecon_BTYPE
20046458 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
2004645c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
20046460 l     O actors_code_section	00000004 decoder_motion_add_BTYPE
20046464 l     O actors_code_section	00000004 decoder_motion_framebuf_BTYPE
20046468 l     O actors_code_section	00000004 decoder_parser_parseheaders_VALUE
2004646c l     O actors_code_section	00000004 decoder_parser_blkexp_VALUE
20046470 l     O actors_code_section	00000004 decoder_parser_mvseq_A
20046474 l     O actors_code_section	00000004 decoder_parser_mvrecon_A
20046478 l     O actors_code_section	00000004 decoder_parser_blkexp_QFS
2004647c l     O actors_code_section	00000004 decoder_texture_DCsplit_IN
20046480 l     O actors_code_section	00000004 decoder_parser_mvrecon_MV
20046484 l     O actors_code_section	00000004 decoder_motion_framebuf_MV
20046488 l     O actors_code_section	00000004 decoder_texture_DCsplit_AC
2004648c l     O actors_code_section	00000004 decoder_texture_IS_QFS_AC
20046490 l     O actors_code_section	00000004 decoder_texture_DCsplit_DC
20046494 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
20046498 l     O actors_code_section	00000004 decoder_texture_IS_PQF_AC
2004649c l     O actors_code_section	00000004 decoder_texture_IAP_PQF_AC
200464a0 l     O actors_code_section	00000004 decoder_texture_IAP_QF_AC
200464a4 l     O actors_code_section	00000004 decoder_texture_IQ_AC
200464a8 l     O actors_code_section	00000004 decoder_texture_IQ_OUT
200464ac l     O actors_code_section	00000004 decoder_texture_idct2d_IN
200464b0 l     O actors_code_section	00000004 decoder_texture_idct2d_OUT
200464b4 l     O actors_code_section	00000004 decoder_motion_add_TEX
200464b8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_B
200464bc l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_B
200464c0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_A
200464c4 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_A
200464c8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_C
200464cc l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_C
200464d0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_PTR
200464d4 l     O actors_code_section	00000004 decoder_texture_IAP_PTR
200464d8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
200464dc l     O actors_code_section	00000004 decoder_texture_IQ_DC
200464e0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_MODE
200464e4 l     O actors_code_section	00000004 decoder_texture_IS_AC_PRED_DIR
200464e8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
200464ec l     O actors_code_section	00000004 decoder_texture_idct2d_SIGNED
200464f0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
200464f4 l     O actors_code_section	00000004 decoder_texture_IAP_AC_PRED_DIR
200464f8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QUANT
200464fc l     O actors_code_section	00000004 decoder_texture_IQ_QP
20046500 l     O actors_code_section	00000004 decoder_motion_interpolation_MOT
20046504 l     O actors_code_section	00000004 decoder_motion_add_MOT
20046508 l     O actors_code_section	00000004 decoder_motion_add_VID
2004650c l     O actors_code_section	00000004 decoder_motion_framebuf_WD
20046510 l     O actors_code_section	00000004 decoder_merger_YUV_i
20046514 l     O actors_code_section	00000004 decoder_motion_framebuf_RD
20046518 l     O actors_code_section	00000004 decoder_motion_interpolation_RD
2004651c l     O actors_code_section	00000004 decoder_motion_framebuf_halfpel
20046520 l     O actors_code_section	00000004 decoder_motion_interpolation_halfpel
20061b9c l     O actors_code_section	00000004 index_RD
20061ba0 l     O actors_code_section	00000004 numTokens_RD
20061ba4 l     O actors_code_section	00000004 index_halfpel
20061ba8 l     O actors_code_section	00000004 numTokens_halfpel
20061bac l     O actors_code_section	00000004 index_MOT
20061bb0 l     O actors_code_section	00000004 numFree_MOT
20046524 l     O actors_code_section	00000001 needInit
20013f90 l     F actors_code_section	00000070 read_RD
20014000 l     F actors_code_section	00000038 read_end_RD
20014038 l     F actors_code_section	00000070 read_halfpel
200140a8 l     F actors_code_section	00000038 read_end_halfpel
200140e0 l     F actors_code_section	00000070 write_MOT
20014150 l     F actors_code_section	00000038 write_end_MOT
20014188 l     F actors_code_section	00000068 isSchedulable_none
200141f0 l     F actors_code_section	00000198 none
20014388 l     F actors_code_section	00000068 isSchedulable_row
200143f0 l     F actors_code_section	00000214 row
20014604 l     F actors_code_section	00000068 isSchedulable_col
2001466c l     F actors_code_section	00000214 col
20014880 l     F actors_code_section	0000002c isSchedulable_both
200148ac l     F actors_code_section	000002b4 both
00000000 l    df *ABS*	00000000 decoder_parser_blkexp.o
20014e88 l     F actors_code_section	0000006c fifo_i8_has_tokens
20014ef4 l     F actors_code_section	00000050 fifo_i8_get_num_tokens
20014f44 l     F actors_code_section	000000a0 fifo_i8_has_room
20014fe4 l     F actors_code_section	000000a4 fifo_i8_get_room
20015088 l     F actors_code_section	00000070 fifo_i8_clear
200150f8 l     F actors_code_section	0000008c fifo_i8_read_1
20015184 l     F actors_code_section	00000070 fifo_i8_write_1
200151f4 l     F actors_code_section	0000006c fifo_i16_has_tokens
20015260 l     F actors_code_section	00000050 fifo_i16_get_num_tokens
200152b0 l     F actors_code_section	000000a0 fifo_i16_has_room
20015350 l     F actors_code_section	000000a4 fifo_i16_get_room
200153f4 l     F actors_code_section	00000070 fifo_i16_clear
20015464 l     F actors_code_section	00000090 fifo_i16_read_1
200154f4 l     F actors_code_section	00000074 fifo_i16_write_1
20015568 l     F actors_code_section	0000006c fifo_i32_has_tokens
200155d4 l     F actors_code_section	00000050 fifo_i32_get_num_tokens
20015624 l     F actors_code_section	000000a0 fifo_i32_has_room
200156c4 l     F actors_code_section	000000a4 fifo_i32_get_room
20015768 l     F actors_code_section	00000070 fifo_i32_clear
200157d8 l     F actors_code_section	0000008c fifo_i32_read_1
20015864 l     F actors_code_section	00000070 fifo_i32_write_1
200158d4 l     F actors_code_section	0000006c fifo_i64_has_tokens
20015940 l     F actors_code_section	00000050 fifo_i64_get_num_tokens
20015990 l     F actors_code_section	000000a0 fifo_i64_has_room
20015a30 l     F actors_code_section	000000a4 fifo_i64_get_room
20015ad4 l     F actors_code_section	00000070 fifo_i64_clear
20015b44 l     F actors_code_section	000000a0 fifo_i64_read_1
20015be4 l     F actors_code_section	0000007c fifo_i64_write_1
20015c60 l     F actors_code_section	0000006c fifo_u8_has_tokens
20015ccc l     F actors_code_section	00000050 fifo_u8_get_num_tokens
20015d1c l     F actors_code_section	000000a0 fifo_u8_has_room
20015dbc l     F actors_code_section	000000a4 fifo_u8_get_room
20015e60 l     F actors_code_section	00000070 fifo_u8_clear
20015ed0 l     F actors_code_section	00000088 fifo_u8_read_1
20015f58 l     F actors_code_section	00000070 fifo_u8_write_1
20015fc8 l     F actors_code_section	0000006c fifo_u16_has_tokens
20016034 l     F actors_code_section	00000050 fifo_u16_get_num_tokens
20016084 l     F actors_code_section	000000a0 fifo_u16_has_room
20016124 l     F actors_code_section	000000a4 fifo_u16_get_room
200161c8 l     F actors_code_section	00000070 fifo_u16_clear
20016238 l     F actors_code_section	0000008c fifo_u16_read_1
200162c4 l     F actors_code_section	00000074 fifo_u16_write_1
20016338 l     F actors_code_section	0000006c fifo_u32_has_tokens
200163a4 l     F actors_code_section	00000050 fifo_u32_get_num_tokens
200163f4 l     F actors_code_section	000000a0 fifo_u32_has_room
20016494 l     F actors_code_section	000000a4 fifo_u32_get_room
20016538 l     F actors_code_section	00000070 fifo_u32_clear
200165a8 l     F actors_code_section	0000008c fifo_u32_read_1
20016634 l     F actors_code_section	00000070 fifo_u32_write_1
200166a4 l     F actors_code_section	0000006c fifo_u64_has_tokens
20016710 l     F actors_code_section	00000050 fifo_u64_get_num_tokens
20016760 l     F actors_code_section	000000a0 fifo_u64_has_room
20016800 l     F actors_code_section	000000a4 fifo_u64_get_room
200168a4 l     F actors_code_section	00000070 fifo_u64_clear
20016914 l     F actors_code_section	000000a0 fifo_u64_read_1
200169b4 l     F actors_code_section	0000007c fifo_u64_write_1
20016a30 l     F actors_code_section	0000006c fifo_float_has_tokens
20016a9c l     F actors_code_section	00000050 fifo_float_get_num_tokens
20016aec l     F actors_code_section	000000a0 fifo_float_has_room
20016b8c l     F actors_code_section	000000a4 fifo_float_get_room
20016c30 l     F actors_code_section	00000070 fifo_float_clear
20016ca0 l     F actors_code_section	0000008c fifo_float_read_1
20016d2c l     F actors_code_section	00000070 fifo_float_write_1
20046528 l     O actors_code_section	00000014 fifo_0
2004653c l     O actors_code_section	00000014 fifo_1
20046550 l     O actors_code_section	00000014 fifo_2
20046564 l     O actors_code_section	00000014 fifo_3
20046578 l     O actors_code_section	00000014 fifo_4
2004658c l     O actors_code_section	00000014 fifo_5
200465a0 l     O actors_code_section	00000014 fifo_6
200465b4 l     O actors_code_section	00000014 fifo_7
200465c8 l     O actors_code_section	00000014 fifo_8
200465dc l     O actors_code_section	00000014 fifo_9
200465f0 l     O actors_code_section	00000014 fifo_10
20046604 l     O actors_code_section	00000014 fifo_11
20046618 l     O actors_code_section	00000014 fifo_12
2004662c l     O actors_code_section	00000014 fifo_13
20046640 l     O actors_code_section	00000014 fifo_14
20046654 l     O actors_code_section	00000014 fifo_15
20046668 l     O actors_code_section	00000014 fifo_16
2004667c l     O actors_code_section	00000014 fifo_17
20046690 l     O actors_code_section	00000014 fifo_18
200466a4 l     O actors_code_section	00000014 fifo_19
200466b8 l     O actors_code_section	00000014 fifo_20
200466cc l     O actors_code_section	00000014 fifo_21
200466e0 l     O actors_code_section	00000014 fifo_22
200466f4 l     O actors_code_section	00000014 fifo_23
20046708 l     O actors_code_section	00000014 fifo_24
2004671c l     O actors_code_section	00000014 fifo_25
20046730 l     O actors_code_section	00000014 fifo_26
20046744 l     O actors_code_section	00000014 fifo_27
20046758 l     O actors_code_section	00000014 fifo_28
2004676c l     O actors_code_section	00000014 fifo_29
20046780 l     O actors_code_section	00000014 fifo_30
20046794 l     O actors_code_section	00000014 fifo_31
200467a8 l     O actors_code_section	00000004 source_O
200467ac l     O actors_code_section	00000004 decoder_parser_parseheaders_BYTE
200467b0 l     O actors_code_section	00000004 decoder_merger_YUV
200467b4 l     O actors_code_section	00000004 display_B
200467b8 l     O actors_code_section	00000004 decoder_parser_parseheaders_QP
200467bc l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QP
200467c0 l     O actors_code_section	00000004 decoder_parser_parseheaders_HEIGHT
200467c4 l     O actors_code_section	00000004 display_HEIGHT
200467c8 l     O actors_code_section	00000004 decoder_parser_parseheaders_RUN
200467cc l     O actors_code_section	00000004 decoder_parser_blkexp_RUN
200467d0 l     O actors_code_section	00000004 decoder_parser_parseheaders_MV
200467d4 l     O actors_code_section	00000004 decoder_parser_mvrecon_MVIN
200467d8 l     O actors_code_section	00000004 decoder_parser_parseheaders_WIDTH
200467dc l     O actors_code_section	00000004 display_WIDTH
200467e0 l     O actors_code_section	00000004 decoder_parser_parseheaders_LAST
200467e4 l     O actors_code_section	00000004 decoder_parser_blkexp_LAST
200467e8 l     O actors_code_section	00000004 decoder_parser_parseheaders_BTYPE
200467ec l     O actors_code_section	00000004 decoder_parser_mvseq_BTYPE
200467f0 l     O actors_code_section	00000004 decoder_parser_mvrecon_BTYPE
200467f4 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
200467f8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
200467fc l     O actors_code_section	00000004 decoder_motion_add_BTYPE
20046800 l     O actors_code_section	00000004 decoder_motion_framebuf_BTYPE
20046804 l     O actors_code_section	00000004 decoder_parser_parseheaders_VALUE
20046808 l     O actors_code_section	00000004 decoder_parser_blkexp_VALUE
2004680c l     O actors_code_section	00000004 decoder_parser_mvseq_A
20046810 l     O actors_code_section	00000004 decoder_parser_mvrecon_A
20046814 l     O actors_code_section	00000004 decoder_parser_blkexp_QFS
20046818 l     O actors_code_section	00000004 decoder_texture_DCsplit_IN
2004681c l     O actors_code_section	00000004 decoder_parser_mvrecon_MV
20046820 l     O actors_code_section	00000004 decoder_motion_framebuf_MV
20046824 l     O actors_code_section	00000004 decoder_texture_DCsplit_AC
20046828 l     O actors_code_section	00000004 decoder_texture_IS_QFS_AC
2004682c l     O actors_code_section	00000004 decoder_texture_DCsplit_DC
20046830 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
20046834 l     O actors_code_section	00000004 decoder_texture_IS_PQF_AC
20046838 l     O actors_code_section	00000004 decoder_texture_IAP_PQF_AC
2004683c l     O actors_code_section	00000004 decoder_texture_IAP_QF_AC
20046840 l     O actors_code_section	00000004 decoder_texture_IQ_AC
20046844 l     O actors_code_section	00000004 decoder_texture_IQ_OUT
20046848 l     O actors_code_section	00000004 decoder_texture_idct2d_IN
2004684c l     O actors_code_section	00000004 decoder_texture_idct2d_OUT
20046850 l     O actors_code_section	00000004 decoder_motion_add_TEX
20046854 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_B
20046858 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_B
2004685c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_A
20046860 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_A
20046864 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_C
20046868 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_C
2004686c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_PTR
20046870 l     O actors_code_section	00000004 decoder_texture_IAP_PTR
20046874 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
20046878 l     O actors_code_section	00000004 decoder_texture_IQ_DC
2004687c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_MODE
20046880 l     O actors_code_section	00000004 decoder_texture_IS_AC_PRED_DIR
20046884 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
20046888 l     O actors_code_section	00000004 decoder_texture_idct2d_SIGNED
2004688c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
20046890 l     O actors_code_section	00000004 decoder_texture_IAP_AC_PRED_DIR
20046894 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QUANT
20046898 l     O actors_code_section	00000004 decoder_texture_IQ_QP
2004689c l     O actors_code_section	00000004 decoder_motion_interpolation_MOT
200468a0 l     O actors_code_section	00000004 decoder_motion_add_MOT
200468a4 l     O actors_code_section	00000004 decoder_motion_add_VID
200468a8 l     O actors_code_section	00000004 decoder_motion_framebuf_WD
200468ac l     O actors_code_section	00000004 decoder_merger_YUV_i
200468b0 l     O actors_code_section	00000004 decoder_motion_framebuf_RD
200468b4 l     O actors_code_section	00000004 decoder_motion_interpolation_RD
200468b8 l     O actors_code_section	00000004 decoder_motion_framebuf_halfpel
200468bc l     O actors_code_section	00000004 decoder_motion_interpolation_halfpel
20061bb4 l     O actors_code_section	00000004 index_RUN
20061bb8 l     O actors_code_section	00000004 numTokens_RUN
20061bbc l     O actors_code_section	00000004 index_VALUE
20061bc0 l     O actors_code_section	00000004 numTokens_VALUE
20061bc4 l     O actors_code_section	00000004 index_LAST
20061bc8 l     O actors_code_section	00000004 numTokens_LAST
20061bcc l     O actors_code_section	00000004 index_QFS
20061bd0 l     O actors_code_section	00000004 numFree_QFS
20061bd4 l     O actors_code_section	00000001 count
20061bd8 l     O actors_code_section	00000080 qfs
200468c0 l     O actors_code_section	00000001 needInit
200468c4 l     O actors_code_section	00000008 stateNames
20061c58 l     O actors_code_section	00000004 _FSM_state
20016d9c l     F actors_code_section	00000070 read_RUN
20016e0c l     F actors_code_section	00000038 read_end_RUN
20016e44 l     F actors_code_section	00000070 read_VALUE
20016eb4 l     F actors_code_section	00000038 read_end_VALUE
20016eec l     F actors_code_section	00000070 read_LAST
20016f5c l     F actors_code_section	00000038 read_end_LAST
20016f94 l     F actors_code_section	00000070 write_QFS
20017004 l     F actors_code_section	00000038 write_end_QFS
2001703c l     F actors_code_section	0000002c isSchedulable_start
20017068 l     F actors_code_section	00000060 start
200170c8 l     F actors_code_section	00000054 isSchedulable_last
2001711c l     F actors_code_section	000001ec last
20017308 l     F actors_code_section	0000002c isSchedulable_run
20017334 l     F actors_code_section	00000184 run
00000000 l    df *ABS*	00000000 decoder_parser_mvrecon.o
2001773c l     F actors_code_section	0000006c fifo_i8_has_tokens
200177a8 l     F actors_code_section	00000050 fifo_i8_get_num_tokens
200177f8 l     F actors_code_section	000000a0 fifo_i8_has_room
20017898 l     F actors_code_section	000000a4 fifo_i8_get_room
2001793c l     F actors_code_section	00000070 fifo_i8_clear
200179ac l     F actors_code_section	0000008c fifo_i8_read_1
20017a38 l     F actors_code_section	00000070 fifo_i8_write_1
20017aa8 l     F actors_code_section	0000006c fifo_i16_has_tokens
20017b14 l     F actors_code_section	00000050 fifo_i16_get_num_tokens
20017b64 l     F actors_code_section	000000a0 fifo_i16_has_room
20017c04 l     F actors_code_section	000000a4 fifo_i16_get_room
20017ca8 l     F actors_code_section	00000070 fifo_i16_clear
20017d18 l     F actors_code_section	00000090 fifo_i16_read_1
20017da8 l     F actors_code_section	00000074 fifo_i16_write_1
20017e1c l     F actors_code_section	0000006c fifo_i32_has_tokens
20017e88 l     F actors_code_section	00000050 fifo_i32_get_num_tokens
20017ed8 l     F actors_code_section	000000a0 fifo_i32_has_room
20017f78 l     F actors_code_section	000000a4 fifo_i32_get_room
2001801c l     F actors_code_section	00000070 fifo_i32_clear
2001808c l     F actors_code_section	0000008c fifo_i32_read_1
20018118 l     F actors_code_section	00000070 fifo_i32_write_1
20018188 l     F actors_code_section	0000006c fifo_i64_has_tokens
200181f4 l     F actors_code_section	00000050 fifo_i64_get_num_tokens
20018244 l     F actors_code_section	000000a0 fifo_i64_has_room
200182e4 l     F actors_code_section	000000a4 fifo_i64_get_room
20018388 l     F actors_code_section	00000070 fifo_i64_clear
200183f8 l     F actors_code_section	000000a0 fifo_i64_read_1
20018498 l     F actors_code_section	0000007c fifo_i64_write_1
20018514 l     F actors_code_section	0000006c fifo_u8_has_tokens
20018580 l     F actors_code_section	00000050 fifo_u8_get_num_tokens
200185d0 l     F actors_code_section	000000a0 fifo_u8_has_room
20018670 l     F actors_code_section	000000a4 fifo_u8_get_room
20018714 l     F actors_code_section	00000070 fifo_u8_clear
20018784 l     F actors_code_section	00000088 fifo_u8_read_1
2001880c l     F actors_code_section	00000070 fifo_u8_write_1
2001887c l     F actors_code_section	0000006c fifo_u16_has_tokens
200188e8 l     F actors_code_section	00000050 fifo_u16_get_num_tokens
20018938 l     F actors_code_section	000000a0 fifo_u16_has_room
200189d8 l     F actors_code_section	000000a4 fifo_u16_get_room
20018a7c l     F actors_code_section	00000070 fifo_u16_clear
20018aec l     F actors_code_section	0000008c fifo_u16_read_1
20018b78 l     F actors_code_section	00000074 fifo_u16_write_1
20018bec l     F actors_code_section	0000006c fifo_u32_has_tokens
20018c58 l     F actors_code_section	00000050 fifo_u32_get_num_tokens
20018ca8 l     F actors_code_section	000000a0 fifo_u32_has_room
20018d48 l     F actors_code_section	000000a4 fifo_u32_get_room
20018dec l     F actors_code_section	00000070 fifo_u32_clear
20018e5c l     F actors_code_section	0000008c fifo_u32_read_1
20018ee8 l     F actors_code_section	00000070 fifo_u32_write_1
20018f58 l     F actors_code_section	0000006c fifo_u64_has_tokens
20018fc4 l     F actors_code_section	00000050 fifo_u64_get_num_tokens
20019014 l     F actors_code_section	000000a0 fifo_u64_has_room
200190b4 l     F actors_code_section	000000a4 fifo_u64_get_room
20019158 l     F actors_code_section	00000070 fifo_u64_clear
200191c8 l     F actors_code_section	000000a0 fifo_u64_read_1
20019268 l     F actors_code_section	0000007c fifo_u64_write_1
200192e4 l     F actors_code_section	0000006c fifo_float_has_tokens
20019350 l     F actors_code_section	00000050 fifo_float_get_num_tokens
200193a0 l     F actors_code_section	000000a0 fifo_float_has_room
20019440 l     F actors_code_section	000000a4 fifo_float_get_room
200194e4 l     F actors_code_section	00000070 fifo_float_clear
20019554 l     F actors_code_section	0000008c fifo_float_read_1
200195e0 l     F actors_code_section	00000070 fifo_float_write_1
200468cc l     O actors_code_section	00000014 fifo_0
200468e0 l     O actors_code_section	00000014 fifo_1
200468f4 l     O actors_code_section	00000014 fifo_2
20046908 l     O actors_code_section	00000014 fifo_3
2004691c l     O actors_code_section	00000014 fifo_4
20046930 l     O actors_code_section	00000014 fifo_5
20046944 l     O actors_code_section	00000014 fifo_6
20046958 l     O actors_code_section	00000014 fifo_7
2004696c l     O actors_code_section	00000014 fifo_8
20046980 l     O actors_code_section	00000014 fifo_9
20046994 l     O actors_code_section	00000014 fifo_10
200469a8 l     O actors_code_section	00000014 fifo_11
200469bc l     O actors_code_section	00000014 fifo_12
200469d0 l     O actors_code_section	00000014 fifo_13
200469e4 l     O actors_code_section	00000014 fifo_14
200469f8 l     O actors_code_section	00000014 fifo_15
20046a0c l     O actors_code_section	00000014 fifo_16
20046a20 l     O actors_code_section	00000014 fifo_17
20046a34 l     O actors_code_section	00000014 fifo_18
20046a48 l     O actors_code_section	00000014 fifo_19
20046a5c l     O actors_code_section	00000014 fifo_20
20046a70 l     O actors_code_section	00000014 fifo_21
20046a84 l     O actors_code_section	00000014 fifo_22
20046a98 l     O actors_code_section	00000014 fifo_23
20046aac l     O actors_code_section	00000014 fifo_24
20046ac0 l     O actors_code_section	00000014 fifo_25
20046ad4 l     O actors_code_section	00000014 fifo_26
20046ae8 l     O actors_code_section	00000014 fifo_27
20046afc l     O actors_code_section	00000014 fifo_28
20046b10 l     O actors_code_section	00000014 fifo_29
20046b24 l     O actors_code_section	00000014 fifo_30
20046b38 l     O actors_code_section	00000014 fifo_31
20046b4c l     O actors_code_section	00000004 source_O
20046b50 l     O actors_code_section	00000004 decoder_parser_parseheaders_BYTE
20046b54 l     O actors_code_section	00000004 decoder_merger_YUV
20046b58 l     O actors_code_section	00000004 display_B
20046b5c l     O actors_code_section	00000004 decoder_parser_parseheaders_QP
20046b60 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QP
20046b64 l     O actors_code_section	00000004 decoder_parser_parseheaders_HEIGHT
20046b68 l     O actors_code_section	00000004 display_HEIGHT
20046b6c l     O actors_code_section	00000004 decoder_parser_parseheaders_RUN
20046b70 l     O actors_code_section	00000004 decoder_parser_blkexp_RUN
20046b74 l     O actors_code_section	00000004 decoder_parser_parseheaders_MV
20046b78 l     O actors_code_section	00000004 decoder_parser_mvrecon_MVIN
20046b7c l     O actors_code_section	00000004 decoder_parser_parseheaders_WIDTH
20046b80 l     O actors_code_section	00000004 display_WIDTH
20046b84 l     O actors_code_section	00000004 decoder_parser_parseheaders_LAST
20046b88 l     O actors_code_section	00000004 decoder_parser_blkexp_LAST
20046b8c l     O actors_code_section	00000004 decoder_parser_parseheaders_BTYPE
20046b90 l     O actors_code_section	00000004 decoder_parser_mvseq_BTYPE
20046b94 l     O actors_code_section	00000004 decoder_parser_mvrecon_BTYPE
20046b98 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
20046b9c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
20046ba0 l     O actors_code_section	00000004 decoder_motion_add_BTYPE
20046ba4 l     O actors_code_section	00000004 decoder_motion_framebuf_BTYPE
20046ba8 l     O actors_code_section	00000004 decoder_parser_parseheaders_VALUE
20046bac l     O actors_code_section	00000004 decoder_parser_blkexp_VALUE
20046bb0 l     O actors_code_section	00000004 decoder_parser_mvseq_A
20046bb4 l     O actors_code_section	00000004 decoder_parser_mvrecon_A
20046bb8 l     O actors_code_section	00000004 decoder_parser_blkexp_QFS
20046bbc l     O actors_code_section	00000004 decoder_texture_DCsplit_IN
20046bc0 l     O actors_code_section	00000004 decoder_parser_mvrecon_MV
20046bc4 l     O actors_code_section	00000004 decoder_motion_framebuf_MV
20046bc8 l     O actors_code_section	00000004 decoder_texture_DCsplit_AC
20046bcc l     O actors_code_section	00000004 decoder_texture_IS_QFS_AC
20046bd0 l     O actors_code_section	00000004 decoder_texture_DCsplit_DC
20046bd4 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
20046bd8 l     O actors_code_section	00000004 decoder_texture_IS_PQF_AC
20046bdc l     O actors_code_section	00000004 decoder_texture_IAP_PQF_AC
20046be0 l     O actors_code_section	00000004 decoder_texture_IAP_QF_AC
20046be4 l     O actors_code_section	00000004 decoder_texture_IQ_AC
20046be8 l     O actors_code_section	00000004 decoder_texture_IQ_OUT
20046bec l     O actors_code_section	00000004 decoder_texture_idct2d_IN
20046bf0 l     O actors_code_section	00000004 decoder_texture_idct2d_OUT
20046bf4 l     O actors_code_section	00000004 decoder_motion_add_TEX
20046bf8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_B
20046bfc l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_B
20046c00 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_A
20046c04 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_A
20046c08 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_C
20046c0c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_C
20046c10 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_PTR
20046c14 l     O actors_code_section	00000004 decoder_texture_IAP_PTR
20046c18 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
20046c1c l     O actors_code_section	00000004 decoder_texture_IQ_DC
20046c20 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_MODE
20046c24 l     O actors_code_section	00000004 decoder_texture_IS_AC_PRED_DIR
20046c28 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
20046c2c l     O actors_code_section	00000004 decoder_texture_idct2d_SIGNED
20046c30 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
20046c34 l     O actors_code_section	00000004 decoder_texture_IAP_AC_PRED_DIR
20046c38 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QUANT
20046c3c l     O actors_code_section	00000004 decoder_texture_IQ_QP
20046c40 l     O actors_code_section	00000004 decoder_motion_interpolation_MOT
20046c44 l     O actors_code_section	00000004 decoder_motion_add_MOT
20046c48 l     O actors_code_section	00000004 decoder_motion_add_VID
20046c4c l     O actors_code_section	00000004 decoder_motion_framebuf_WD
20046c50 l     O actors_code_section	00000004 decoder_merger_YUV_i
20046c54 l     O actors_code_section	00000004 decoder_motion_framebuf_RD
20046c58 l     O actors_code_section	00000004 decoder_motion_interpolation_RD
20046c5c l     O actors_code_section	00000004 decoder_motion_framebuf_halfpel
20046c60 l     O actors_code_section	00000004 decoder_motion_interpolation_halfpel
20061c5c l     O actors_code_section	00000004 index_BTYPE
20061c60 l     O actors_code_section	00000004 numTokens_BTYPE
20061c64 l     O actors_code_section	00000004 index_MVIN
20061c68 l     O actors_code_section	00000004 numTokens_MVIN
20061c6c l     O actors_code_section	00000004 index_A
20061c70 l     O actors_code_section	00000004 numTokens_A
20061c74 l     O actors_code_section	00000004 index_MV
20061c78 l     O actors_code_section	00000004 numFree_MV
20061c7c l     O actors_code_section	00000001 mbx
20046c64 l     O actors_code_section	00000004 top_edge
20061c7d l     O actors_code_section	00000001 comp
20061c7e l     O actors_code_section	00000001 mbwidth
20061c80 l     O actors_code_section	00000002 ptr
20061c84 l     O actors_code_section	00000100 buf
20061d84 l     O actors_code_section	00000002 mv_rsize
20061d86 l     O actors_code_section	00000002 mv_range
20061d88 l     O actors_code_section	00000002 mv_low
20061d8a l     O actors_code_section	00000002 mv_high
20061d8c l     O actors_code_section	00000004 fourmv
20061d90 l     O actors_code_section	00000002 aptr
20061d92 l     O actors_code_section	00000002 bptr
20061d94 l     O actors_code_section	00000002 cptr
20061d96 l     O actors_code_section	00000002 apred
20061d98 l     O actors_code_section	00000002 bpred
20061d9a l     O actors_code_section	00000002 cpred
20061d9c l     O actors_code_section	00000002 mag
20061d9e l     O actors_code_section	00000002 mv_x
20061da0 l     O actors_code_section	00000002 mv_y
20061da2 l     O actors_code_section	00000002 sum_x
20061da4 l     O actors_code_section	00000002 sum_y
20061da8 l     O actors_code_section	00000004 x_flag
20061dac l     O actors_code_section	00000002 res_shift
20046c68 l     O actors_code_section	00000001 needInit
20046c6c l     O actors_code_section	0000007c stateNames
20061db0 l     O actors_code_section	00000004 _FSM_state
20019650 l     F actors_code_section	00000070 read_BTYPE
200196c0 l     F actors_code_section	0000003c read_end_BTYPE
200196fc l     F actors_code_section	00000070 read_MVIN
2001976c l     F actors_code_section	00000038 read_end_MVIN
200197a4 l     F actors_code_section	00000070 read_A
20019814 l     F actors_code_section	00000038 read_end_A
2001984c l     F actors_code_section	00000070 write_MV
200198bc l     F actors_code_section	00000038 write_end_MV
200198f4 l     F actors_code_section	000000c4 middle
200199b8 l     F actors_code_section	000000d8 mvcalc
20019a90 l     F actors_code_section	000000fc mvclip
20019b8c l     F actors_code_section	00000058 uvclip_1
20019be4 l     F actors_code_section	000000d8 uvclip_4
20019cbc l     F actors_code_section	00000074 isSchedulable_start
20019d30 l     F actors_code_section	00000198 start
20019ec8 l     F actors_code_section	0000002c isSchedulable_getw
20019ef4 l     F actors_code_section	00000098 getw_replaced
20019f8c l     F actors_code_section	0000002c isSchedulable_geth
20019fb8 l     F actors_code_section	0000007c geth
2001a034 l     F actors_code_section	000000b0 isSchedulable_read_noMotion
2001a0e4 l     F actors_code_section	00000110 read_noMotion
2001a1f4 l     F actors_code_section	000000b0 isSchedulable_read_motion
2001a2a4 l     F actors_code_section	000000d0 read_motion
2001a374 l     F actors_code_section	00000080 isSchedulable_compute_done
2001a3f4 l     F actors_code_section	00000020 compute_done
2001a414 l     F actors_code_section	0000002c isSchedulable_compute_start
2001a440 l     F actors_code_section	000000b8 compute_start
2001a4f8 l     F actors_code_section	0000002c isSchedulable_get_pred
2001a524 l     F actors_code_section	000000e4 get_pred
2001a608 l     F actors_code_section	0000002c isSchedulable_do_pred
2001a634 l     F actors_code_section	000000bc do_pred
2001a6f0 l     F actors_code_section	0000002c isSchedulable_get_mag
2001a71c l     F actors_code_section	00000088 get_mag
2001a7a4 l     F actors_code_section	0000002c isSchedulable_get_residual_init
2001a7d0 l     F actors_code_section	00000084 get_residual_init
2001a854 l     F actors_code_section	0000002c isSchedulable_get_residual_shift
2001a880 l     F actors_code_section	0000007c get_residual_shift
2001a8fc l     F actors_code_section	0000002c isSchedulable_get_residual_adjust
2001a928 l     F actors_code_section	000000b4 get_residual_adjust
2001a9dc l     F actors_code_section	0000002c isSchedulable_get_residual_calc
2001aa08 l     F actors_code_section	00000088 get_residual_calc
2001aa90 l     F actors_code_section	0000002c isSchedulable_get_residual_clip
2001aabc l     F actors_code_section	0000005c get_residual_clip
2001ab18 l     F actors_code_section	0000002c isSchedulable_get_residual_final
2001ab44 l     F actors_code_section	000000b0 get_residual_final
2001abf4 l     F actors_code_section	00000054 isSchedulable_write_luma
2001ac48 l     F actors_code_section	00000168 write_luma
2001adb0 l     F actors_code_section	0000002c isSchedulable_write_chroma
2001addc l     F actors_code_section	00000114 write_chroma
2001aef0 l     F actors_code_section	0000002c isSchedulable_advance
2001af1c l     F actors_code_section	00000138 advance
00000000 l    df *ABS*	00000000 decoder_parser_mvseq.o
2001be80 l     F actors_code_section	0000006c fifo_i8_has_tokens
2001beec l     F actors_code_section	00000050 fifo_i8_get_num_tokens
2001bf3c l     F actors_code_section	000000a0 fifo_i8_has_room
2001bfdc l     F actors_code_section	000000a4 fifo_i8_get_room
2001c080 l     F actors_code_section	00000070 fifo_i8_clear
2001c0f0 l     F actors_code_section	0000008c fifo_i8_read_1
2001c17c l     F actors_code_section	00000070 fifo_i8_write_1
2001c1ec l     F actors_code_section	0000006c fifo_i16_has_tokens
2001c258 l     F actors_code_section	00000050 fifo_i16_get_num_tokens
2001c2a8 l     F actors_code_section	000000a0 fifo_i16_has_room
2001c348 l     F actors_code_section	000000a4 fifo_i16_get_room
2001c3ec l     F actors_code_section	00000070 fifo_i16_clear
2001c45c l     F actors_code_section	00000090 fifo_i16_read_1
2001c4ec l     F actors_code_section	00000074 fifo_i16_write_1
2001c560 l     F actors_code_section	0000006c fifo_i32_has_tokens
2001c5cc l     F actors_code_section	00000050 fifo_i32_get_num_tokens
2001c61c l     F actors_code_section	000000a0 fifo_i32_has_room
2001c6bc l     F actors_code_section	000000a4 fifo_i32_get_room
2001c760 l     F actors_code_section	00000070 fifo_i32_clear
2001c7d0 l     F actors_code_section	0000008c fifo_i32_read_1
2001c85c l     F actors_code_section	00000070 fifo_i32_write_1
2001c8cc l     F actors_code_section	0000006c fifo_i64_has_tokens
2001c938 l     F actors_code_section	00000050 fifo_i64_get_num_tokens
2001c988 l     F actors_code_section	000000a0 fifo_i64_has_room
2001ca28 l     F actors_code_section	000000a4 fifo_i64_get_room
2001cacc l     F actors_code_section	00000070 fifo_i64_clear
2001cb3c l     F actors_code_section	000000a0 fifo_i64_read_1
2001cbdc l     F actors_code_section	0000007c fifo_i64_write_1
2001cc58 l     F actors_code_section	0000006c fifo_u8_has_tokens
2001ccc4 l     F actors_code_section	00000050 fifo_u8_get_num_tokens
2001cd14 l     F actors_code_section	000000a0 fifo_u8_has_room
2001cdb4 l     F actors_code_section	000000a4 fifo_u8_get_room
2001ce58 l     F actors_code_section	00000070 fifo_u8_clear
2001cec8 l     F actors_code_section	00000088 fifo_u8_read_1
2001cf50 l     F actors_code_section	00000070 fifo_u8_write_1
2001cfc0 l     F actors_code_section	0000006c fifo_u16_has_tokens
2001d02c l     F actors_code_section	00000050 fifo_u16_get_num_tokens
2001d07c l     F actors_code_section	000000a0 fifo_u16_has_room
2001d11c l     F actors_code_section	000000a4 fifo_u16_get_room
2001d1c0 l     F actors_code_section	00000070 fifo_u16_clear
2001d230 l     F actors_code_section	0000008c fifo_u16_read_1
2001d2bc l     F actors_code_section	00000074 fifo_u16_write_1
2001d330 l     F actors_code_section	0000006c fifo_u32_has_tokens
2001d39c l     F actors_code_section	00000050 fifo_u32_get_num_tokens
2001d3ec l     F actors_code_section	000000a0 fifo_u32_has_room
2001d48c l     F actors_code_section	000000a4 fifo_u32_get_room
2001d530 l     F actors_code_section	00000070 fifo_u32_clear
2001d5a0 l     F actors_code_section	0000008c fifo_u32_read_1
2001d62c l     F actors_code_section	00000070 fifo_u32_write_1
2001d69c l     F actors_code_section	0000006c fifo_u64_has_tokens
2001d708 l     F actors_code_section	00000050 fifo_u64_get_num_tokens
2001d758 l     F actors_code_section	000000a0 fifo_u64_has_room
2001d7f8 l     F actors_code_section	000000a4 fifo_u64_get_room
2001d89c l     F actors_code_section	00000070 fifo_u64_clear
2001d90c l     F actors_code_section	000000a0 fifo_u64_read_1
2001d9ac l     F actors_code_section	0000007c fifo_u64_write_1
2001da28 l     F actors_code_section	0000006c fifo_float_has_tokens
2001da94 l     F actors_code_section	00000050 fifo_float_get_num_tokens
2001dae4 l     F actors_code_section	000000a0 fifo_float_has_room
2001db84 l     F actors_code_section	000000a4 fifo_float_get_room
2001dc28 l     F actors_code_section	00000070 fifo_float_clear
2001dc98 l     F actors_code_section	0000008c fifo_float_read_1
2001dd24 l     F actors_code_section	00000070 fifo_float_write_1
20046ce8 l     O actors_code_section	00000014 fifo_0
20046cfc l     O actors_code_section	00000014 fifo_1
20046d10 l     O actors_code_section	00000014 fifo_2
20046d24 l     O actors_code_section	00000014 fifo_3
20046d38 l     O actors_code_section	00000014 fifo_4
20046d4c l     O actors_code_section	00000014 fifo_5
20046d60 l     O actors_code_section	00000014 fifo_6
20046d74 l     O actors_code_section	00000014 fifo_7
20046d88 l     O actors_code_section	00000014 fifo_8
20046d9c l     O actors_code_section	00000014 fifo_9
20046db0 l     O actors_code_section	00000014 fifo_10
20046dc4 l     O actors_code_section	00000014 fifo_11
20046dd8 l     O actors_code_section	00000014 fifo_12
20046dec l     O actors_code_section	00000014 fifo_13
20046e00 l     O actors_code_section	00000014 fifo_14
20046e14 l     O actors_code_section	00000014 fifo_15
20046e28 l     O actors_code_section	00000014 fifo_16
20046e3c l     O actors_code_section	00000014 fifo_17
20046e50 l     O actors_code_section	00000014 fifo_18
20046e64 l     O actors_code_section	00000014 fifo_19
20046e78 l     O actors_code_section	00000014 fifo_20
20046e8c l     O actors_code_section	00000014 fifo_21
20046ea0 l     O actors_code_section	00000014 fifo_22
20046eb4 l     O actors_code_section	00000014 fifo_23
20046ec8 l     O actors_code_section	00000014 fifo_24
20046edc l     O actors_code_section	00000014 fifo_25
20046ef0 l     O actors_code_section	00000014 fifo_26
20046f04 l     O actors_code_section	00000014 fifo_27
20046f18 l     O actors_code_section	00000014 fifo_28
20046f2c l     O actors_code_section	00000014 fifo_29
20046f40 l     O actors_code_section	00000014 fifo_30
20046f54 l     O actors_code_section	00000014 fifo_31
20046f68 l     O actors_code_section	00000004 source_O
20046f6c l     O actors_code_section	00000004 decoder_parser_parseheaders_BYTE
20046f70 l     O actors_code_section	00000004 decoder_merger_YUV
20046f74 l     O actors_code_section	00000004 display_B
20046f78 l     O actors_code_section	00000004 decoder_parser_parseheaders_QP
20046f7c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QP
20046f80 l     O actors_code_section	00000004 decoder_parser_parseheaders_HEIGHT
20046f84 l     O actors_code_section	00000004 display_HEIGHT
20046f88 l     O actors_code_section	00000004 decoder_parser_parseheaders_RUN
20046f8c l     O actors_code_section	00000004 decoder_parser_blkexp_RUN
20046f90 l     O actors_code_section	00000004 decoder_parser_parseheaders_MV
20046f94 l     O actors_code_section	00000004 decoder_parser_mvrecon_MVIN
20046f98 l     O actors_code_section	00000004 decoder_parser_parseheaders_WIDTH
20046f9c l     O actors_code_section	00000004 display_WIDTH
20046fa0 l     O actors_code_section	00000004 decoder_parser_parseheaders_LAST
20046fa4 l     O actors_code_section	00000004 decoder_parser_blkexp_LAST
20046fa8 l     O actors_code_section	00000004 decoder_parser_parseheaders_BTYPE
20046fac l     O actors_code_section	00000004 decoder_parser_mvseq_BTYPE
20046fb0 l     O actors_code_section	00000004 decoder_parser_mvrecon_BTYPE
20046fb4 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
20046fb8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
20046fbc l     O actors_code_section	00000004 decoder_motion_add_BTYPE
20046fc0 l     O actors_code_section	00000004 decoder_motion_framebuf_BTYPE
20046fc4 l     O actors_code_section	00000004 decoder_parser_parseheaders_VALUE
20046fc8 l     O actors_code_section	00000004 decoder_parser_blkexp_VALUE
20046fcc l     O actors_code_section	00000004 decoder_parser_mvseq_A
20046fd0 l     O actors_code_section	00000004 decoder_parser_mvrecon_A
20046fd4 l     O actors_code_section	00000004 decoder_parser_blkexp_QFS
20046fd8 l     O actors_code_section	00000004 decoder_texture_DCsplit_IN
20046fdc l     O actors_code_section	00000004 decoder_parser_mvrecon_MV
20046fe0 l     O actors_code_section	00000004 decoder_motion_framebuf_MV
20046fe4 l     O actors_code_section	00000004 decoder_texture_DCsplit_AC
20046fe8 l     O actors_code_section	00000004 decoder_texture_IS_QFS_AC
20046fec l     O actors_code_section	00000004 decoder_texture_DCsplit_DC
20046ff0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
20046ff4 l     O actors_code_section	00000004 decoder_texture_IS_PQF_AC
20046ff8 l     O actors_code_section	00000004 decoder_texture_IAP_PQF_AC
20046ffc l     O actors_code_section	00000004 decoder_texture_IAP_QF_AC
20047000 l     O actors_code_section	00000004 decoder_texture_IQ_AC
20047004 l     O actors_code_section	00000004 decoder_texture_IQ_OUT
20047008 l     O actors_code_section	00000004 decoder_texture_idct2d_IN
2004700c l     O actors_code_section	00000004 decoder_texture_idct2d_OUT
20047010 l     O actors_code_section	00000004 decoder_motion_add_TEX
20047014 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_B
20047018 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_B
2004701c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_A
20047020 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_A
20047024 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_C
20047028 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_C
2004702c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_PTR
20047030 l     O actors_code_section	00000004 decoder_texture_IAP_PTR
20047034 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
20047038 l     O actors_code_section	00000004 decoder_texture_IQ_DC
2004703c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_MODE
20047040 l     O actors_code_section	00000004 decoder_texture_IS_AC_PRED_DIR
20047044 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
20047048 l     O actors_code_section	00000004 decoder_texture_idct2d_SIGNED
2004704c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
20047050 l     O actors_code_section	00000004 decoder_texture_IAP_AC_PRED_DIR
20047054 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QUANT
20047058 l     O actors_code_section	00000004 decoder_texture_IQ_QP
2004705c l     O actors_code_section	00000004 decoder_motion_interpolation_MOT
20047060 l     O actors_code_section	00000004 decoder_motion_add_MOT
20047064 l     O actors_code_section	00000004 decoder_motion_add_VID
20047068 l     O actors_code_section	00000004 decoder_motion_framebuf_WD
2004706c l     O actors_code_section	00000004 decoder_merger_YUV_i
20047070 l     O actors_code_section	00000004 decoder_motion_framebuf_RD
20047074 l     O actors_code_section	00000004 decoder_motion_interpolation_RD
20047078 l     O actors_code_section	00000004 decoder_motion_framebuf_halfpel
2004707c l     O actors_code_section	00000004 decoder_motion_interpolation_halfpel
20061db4 l     O actors_code_section	00000004 index_BTYPE
20061db8 l     O actors_code_section	00000004 numTokens_BTYPE
20061dbc l     O actors_code_section	00000004 index_A
20061dc0 l     O actors_code_section	00000004 numFree_A
20061dc4 l     O actors_code_section	00000001 mbx
20047080 l     O actors_code_section	00000004 top_edge
20061dc8 l     O actors_code_section	00000004 right_edge
20061dcc l     O actors_code_section	00000001 comp
20061dcd l     O actors_code_section	00000001 mbwidth
20061dce l     O actors_code_section	00000001 ptr
20061dcf l     O actors_code_section	00000001 ptr_left
20061dd0 l     O actors_code_section	00000001 ptr_above
20061dd1 l     O actors_code_section	00000001 ptr_above_right
20047084 l     O actors_code_section	00000001 needInit
20047088 l     O actors_code_section	0000000c stateNames
20061dd4 l     O actors_code_section	00000004 _FSM_state
2001dd94 l     F actors_code_section	00000070 read_BTYPE
2001de04 l     F actors_code_section	00000038 read_end_BTYPE
2001de3c l     F actors_code_section	00000070 write_A
2001deac l     F actors_code_section	00000038 write_end_A
2001dee4 l     F actors_code_section	00000068 decrement
2001df4c l     F actors_code_section	00000058 access
2001dfa4 l     F actors_code_section	00000074 isSchedulable_start
2001e018 l     F actors_code_section	000000a0 start
2001e0b8 l     F actors_code_section	0000002c isSchedulable_getw
2001e0e4 l     F actors_code_section	000000d0 getw_replaced
2001e1b4 l     F actors_code_section	0000002c isSchedulable_geth
2001e1e0 l     F actors_code_section	0000007c geth
2001e25c l     F actors_code_section	00000104 isSchedulable_read_noPredict
2001e360 l     F actors_code_section	00000218 read_noPredict
2001e578 l     F actors_code_section	000000c8 isSchedulable_read_predict_y0
2001e640 l     F actors_code_section	00000248 read_predict_y0
2001e888 l     F actors_code_section	000000e8 isSchedulable_read_predict_y1
2001e970 l     F actors_code_section	00000220 read_predict_y1
2001eb90 l     F actors_code_section	000000e8 isSchedulable_read_predict_y2
2001ec78 l     F actors_code_section	000001ec read_predict_y2
2001ee64 l     F actors_code_section	000000e8 isSchedulable_read_predict_y3
2001ef4c l     F actors_code_section	000001c4 read_predict_y3
00000000 l    df *ABS*	00000000 decoder_parser_parseheaders.o
2001f5a8 l     F actors_code_section	0000006c fifo_i8_has_tokens
2001f614 l     F actors_code_section	00000050 fifo_i8_get_num_tokens
2001f664 l     F actors_code_section	000000a0 fifo_i8_has_room
2001f704 l     F actors_code_section	000000a4 fifo_i8_get_room
2001f7a8 l     F actors_code_section	00000070 fifo_i8_clear
2001f818 l     F actors_code_section	0000008c fifo_i8_read_1
2001f8a4 l     F actors_code_section	00000070 fifo_i8_write_1
2001f914 l     F actors_code_section	0000006c fifo_i16_has_tokens
2001f980 l     F actors_code_section	00000050 fifo_i16_get_num_tokens
2001f9d0 l     F actors_code_section	000000a0 fifo_i16_has_room
2001fa70 l     F actors_code_section	000000a4 fifo_i16_get_room
2001fb14 l     F actors_code_section	00000070 fifo_i16_clear
2001fb84 l     F actors_code_section	00000090 fifo_i16_read_1
2001fc14 l     F actors_code_section	00000074 fifo_i16_write_1
2001fc88 l     F actors_code_section	0000006c fifo_i32_has_tokens
2001fcf4 l     F actors_code_section	00000050 fifo_i32_get_num_tokens
2001fd44 l     F actors_code_section	000000a0 fifo_i32_has_room
2001fde4 l     F actors_code_section	000000a4 fifo_i32_get_room
2001fe88 l     F actors_code_section	00000070 fifo_i32_clear
2001fef8 l     F actors_code_section	0000008c fifo_i32_read_1
2001ff84 l     F actors_code_section	00000070 fifo_i32_write_1
2001fff4 l     F actors_code_section	0000006c fifo_i64_has_tokens
20020060 l     F actors_code_section	00000050 fifo_i64_get_num_tokens
200200b0 l     F actors_code_section	000000a0 fifo_i64_has_room
20020150 l     F actors_code_section	000000a4 fifo_i64_get_room
200201f4 l     F actors_code_section	00000070 fifo_i64_clear
20020264 l     F actors_code_section	000000a0 fifo_i64_read_1
20020304 l     F actors_code_section	0000007c fifo_i64_write_1
20020380 l     F actors_code_section	0000006c fifo_u8_has_tokens
200203ec l     F actors_code_section	00000050 fifo_u8_get_num_tokens
2002043c l     F actors_code_section	000000a0 fifo_u8_has_room
200204dc l     F actors_code_section	000000a4 fifo_u8_get_room
20020580 l     F actors_code_section	00000070 fifo_u8_clear
200205f0 l     F actors_code_section	00000088 fifo_u8_read_1
20020678 l     F actors_code_section	00000070 fifo_u8_write_1
200206e8 l     F actors_code_section	0000006c fifo_u16_has_tokens
20020754 l     F actors_code_section	00000050 fifo_u16_get_num_tokens
200207a4 l     F actors_code_section	000000a0 fifo_u16_has_room
20020844 l     F actors_code_section	000000a4 fifo_u16_get_room
200208e8 l     F actors_code_section	00000070 fifo_u16_clear
20020958 l     F actors_code_section	0000008c fifo_u16_read_1
200209e4 l     F actors_code_section	00000074 fifo_u16_write_1
20020a58 l     F actors_code_section	0000006c fifo_u32_has_tokens
20020ac4 l     F actors_code_section	00000050 fifo_u32_get_num_tokens
20020b14 l     F actors_code_section	000000a0 fifo_u32_has_room
20020bb4 l     F actors_code_section	000000a4 fifo_u32_get_room
20020c58 l     F actors_code_section	00000070 fifo_u32_clear
20020cc8 l     F actors_code_section	0000008c fifo_u32_read_1
20020d54 l     F actors_code_section	00000070 fifo_u32_write_1
20020dc4 l     F actors_code_section	0000006c fifo_u64_has_tokens
20020e30 l     F actors_code_section	00000050 fifo_u64_get_num_tokens
20020e80 l     F actors_code_section	000000a0 fifo_u64_has_room
20020f20 l     F actors_code_section	000000a4 fifo_u64_get_room
20020fc4 l     F actors_code_section	00000070 fifo_u64_clear
20021034 l     F actors_code_section	000000a0 fifo_u64_read_1
200210d4 l     F actors_code_section	0000007c fifo_u64_write_1
20021150 l     F actors_code_section	0000006c fifo_float_has_tokens
200211bc l     F actors_code_section	00000050 fifo_float_get_num_tokens
2002120c l     F actors_code_section	000000a0 fifo_float_has_room
200212ac l     F actors_code_section	000000a4 fifo_float_get_room
20021350 l     F actors_code_section	00000070 fifo_float_clear
200213c0 l     F actors_code_section	0000008c fifo_float_read_1
2002144c l     F actors_code_section	00000070 fifo_float_write_1
20047094 l     O actors_code_section	00000014 fifo_0
200470a8 l     O actors_code_section	00000014 fifo_1
200470bc l     O actors_code_section	00000014 fifo_2
200470d0 l     O actors_code_section	00000014 fifo_3
200470e4 l     O actors_code_section	00000014 fifo_4
200470f8 l     O actors_code_section	00000014 fifo_5
2004710c l     O actors_code_section	00000014 fifo_6
20047120 l     O actors_code_section	00000014 fifo_7
20047134 l     O actors_code_section	00000014 fifo_8
20047148 l     O actors_code_section	00000014 fifo_9
2004715c l     O actors_code_section	00000014 fifo_10
20047170 l     O actors_code_section	00000014 fifo_11
20047184 l     O actors_code_section	00000014 fifo_12
20047198 l     O actors_code_section	00000014 fifo_13
200471ac l     O actors_code_section	00000014 fifo_14
200471c0 l     O actors_code_section	00000014 fifo_15
200471d4 l     O actors_code_section	00000014 fifo_16
200471e8 l     O actors_code_section	00000014 fifo_17
200471fc l     O actors_code_section	00000014 fifo_18
20047210 l     O actors_code_section	00000014 fifo_19
20047224 l     O actors_code_section	00000014 fifo_20
20047238 l     O actors_code_section	00000014 fifo_21
2004724c l     O actors_code_section	00000014 fifo_22
20047260 l     O actors_code_section	00000014 fifo_23
20047274 l     O actors_code_section	00000014 fifo_24
20047288 l     O actors_code_section	00000014 fifo_25
2004729c l     O actors_code_section	00000014 fifo_26
200472b0 l     O actors_code_section	00000014 fifo_27
200472c4 l     O actors_code_section	00000014 fifo_28
200472d8 l     O actors_code_section	00000014 fifo_29
200472ec l     O actors_code_section	00000014 fifo_30
20047300 l     O actors_code_section	00000014 fifo_31
20047314 l     O actors_code_section	00000004 source_O
20047318 l     O actors_code_section	00000004 decoder_parser_parseheaders_BYTE
2004731c l     O actors_code_section	00000004 decoder_merger_YUV
20047320 l     O actors_code_section	00000004 display_B
20047324 l     O actors_code_section	00000004 decoder_parser_parseheaders_QP
20047328 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QP
2004732c l     O actors_code_section	00000004 decoder_parser_parseheaders_HEIGHT
20047330 l     O actors_code_section	00000004 display_HEIGHT
20047334 l     O actors_code_section	00000004 decoder_parser_parseheaders_RUN
20047338 l     O actors_code_section	00000004 decoder_parser_blkexp_RUN
2004733c l     O actors_code_section	00000004 decoder_parser_parseheaders_MV
20047340 l     O actors_code_section	00000004 decoder_parser_mvrecon_MVIN
20047344 l     O actors_code_section	00000004 decoder_parser_parseheaders_WIDTH
20047348 l     O actors_code_section	00000004 display_WIDTH
2004734c l     O actors_code_section	00000004 decoder_parser_parseheaders_LAST
20047350 l     O actors_code_section	00000004 decoder_parser_blkexp_LAST
20047354 l     O actors_code_section	00000004 decoder_parser_parseheaders_BTYPE
20047358 l     O actors_code_section	00000004 decoder_parser_mvseq_BTYPE
2004735c l     O actors_code_section	00000004 decoder_parser_mvrecon_BTYPE
20047360 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
20047364 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
20047368 l     O actors_code_section	00000004 decoder_motion_add_BTYPE
2004736c l     O actors_code_section	00000004 decoder_motion_framebuf_BTYPE
20047370 l     O actors_code_section	00000004 decoder_parser_parseheaders_VALUE
20047374 l     O actors_code_section	00000004 decoder_parser_blkexp_VALUE
20047378 l     O actors_code_section	00000004 decoder_parser_mvseq_A
2004737c l     O actors_code_section	00000004 decoder_parser_mvrecon_A
20047380 l     O actors_code_section	00000004 decoder_parser_blkexp_QFS
20047384 l     O actors_code_section	00000004 decoder_texture_DCsplit_IN
20047388 l     O actors_code_section	00000004 decoder_parser_mvrecon_MV
2004738c l     O actors_code_section	00000004 decoder_motion_framebuf_MV
20047390 l     O actors_code_section	00000004 decoder_texture_DCsplit_AC
20047394 l     O actors_code_section	00000004 decoder_texture_IS_QFS_AC
20047398 l     O actors_code_section	00000004 decoder_texture_DCsplit_DC
2004739c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
200473a0 l     O actors_code_section	00000004 decoder_texture_IS_PQF_AC
200473a4 l     O actors_code_section	00000004 decoder_texture_IAP_PQF_AC
200473a8 l     O actors_code_section	00000004 decoder_texture_IAP_QF_AC
200473ac l     O actors_code_section	00000004 decoder_texture_IQ_AC
200473b0 l     O actors_code_section	00000004 decoder_texture_IQ_OUT
200473b4 l     O actors_code_section	00000004 decoder_texture_idct2d_IN
200473b8 l     O actors_code_section	00000004 decoder_texture_idct2d_OUT
200473bc l     O actors_code_section	00000004 decoder_motion_add_TEX
200473c0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_B
200473c4 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_B
200473c8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_A
200473cc l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_A
200473d0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_C
200473d4 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_C
200473d8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_PTR
200473dc l     O actors_code_section	00000004 decoder_texture_IAP_PTR
200473e0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
200473e4 l     O actors_code_section	00000004 decoder_texture_IQ_DC
200473e8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_MODE
200473ec l     O actors_code_section	00000004 decoder_texture_IS_AC_PRED_DIR
200473f0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
200473f4 l     O actors_code_section	00000004 decoder_texture_idct2d_SIGNED
200473f8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
200473fc l     O actors_code_section	00000004 decoder_texture_IAP_AC_PRED_DIR
20047400 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QUANT
20047404 l     O actors_code_section	00000004 decoder_texture_IQ_QP
20047408 l     O actors_code_section	00000004 decoder_motion_interpolation_MOT
2004740c l     O actors_code_section	00000004 decoder_motion_add_MOT
20047410 l     O actors_code_section	00000004 decoder_motion_add_VID
20047414 l     O actors_code_section	00000004 decoder_motion_framebuf_WD
20047418 l     O actors_code_section	00000004 decoder_merger_YUV_i
2004741c l     O actors_code_section	00000004 decoder_motion_framebuf_RD
20047420 l     O actors_code_section	00000004 decoder_motion_interpolation_RD
20047424 l     O actors_code_section	00000004 decoder_motion_framebuf_halfpel
20047428 l     O actors_code_section	00000004 decoder_motion_interpolation_halfpel
20061dd8 l     O actors_code_section	00000004 index_BYTE
20061ddc l     O actors_code_section	00000004 numTokens_BYTE
20061de0 l     O actors_code_section	00000004 index_BTYPE
20061de4 l     O actors_code_section	00000004 numFree_BTYPE
20061de8 l     O actors_code_section	00000004 index_MV
20061dec l     O actors_code_section	00000004 numFree_MV
20061df0 l     O actors_code_section	00000004 index_RUN
20061df4 l     O actors_code_section	00000004 numFree_RUN
20061df8 l     O actors_code_section	00000004 index_VALUE
20061dfc l     O actors_code_section	00000004 numFree_VALUE
20061e00 l     O actors_code_section	00000004 index_LAST
20061e04 l     O actors_code_section	00000004 numFree_LAST
20061e08 l     O actors_code_section	00000004 index_WIDTH
20061e0c l     O actors_code_section	00000004 numFree_WIDTH
20061e10 l     O actors_code_section	00000004 index_HEIGHT
20061e14 l     O actors_code_section	00000004 numFree_HEIGHT
20061e18 l     O actors_code_section	00000004 index_QP
20061e1c l     O actors_code_section	00000004 numFree_QP
2003bf78 l     O actors_code_section	00000080 vldTables_mcbpc_intra_table
2003bff8 l     O actors_code_section	00000404 vldTables_mcbpc_inter_table
2003c3fc l     O actors_code_section	00000080 vldTables_cbpy_table
2003c47c l     O actors_code_section	00000010 vldTables_dc_lum_tab
2003c48c l     O actors_code_section	00008000 vldTables_DCT3D
2004448c l     O actors_code_section	00000100 vldTables_max_level
2004458c l     O actors_code_section	00000100 vldTables_max_run
2004468c l     O actors_code_section	0000001c vldTables_TMNMVtab0
200446a8 l     O actors_code_section	000000c0 vldTables_TMNMVtab1
20044768 l     O actors_code_section	000000f8 vldTables_TMNMVtab2
20061e20 l     O actors_code_section	00000014 fifo
20061e34 l     O actors_code_section	00000001 zeroByte
20061e35 l     O actors_code_section	00000001 start_code
20061e38 l     O actors_code_section	00000004 vol_control_parameters
20061e3c l     O actors_code_section	00000004 vbv_parameters
20061e40 l     O actors_code_section	00000001 vop_time_increment_resolution_bits
20061e42 l     O actors_code_section	00000002 video_object_layer_width
20061e44 l     O actors_code_section	00000002 video_object_layer_height
20061e46 l     O actors_code_section	00000002 mb_pic
20061e48 l     O actors_code_section	00000001 vop_coding_type
20061e4c l     O actors_code_section	00000004 vop_coded
20061e50 l     O actors_code_section	00000004 round
20061e54 l     O actors_code_section	00000001 vop_quant
20061e55 l     O actors_code_section	00000001 prev_quant
20044860 l     O actors_code_section	00000008 intra_dc_threshold_table
20061e56 l     O actors_code_section	00000001 intra_dc_vlc_thr
20061e57 l     O actors_code_section	00000001 fcode
20061e58 l     O actors_code_section	00000004 mb_cnt
20061e5c l     O actors_code_section	00000001 derived_mb_type
20061e5d l     O actors_code_section	00000001 cbpc
20061e60 l     O actors_code_section	00000004 is_intra
20061e64 l     O actors_code_section	00000004 btype_is_Q
20061e68 l     O actors_code_section	00000004 fourmvflag
20061e6c l     O actors_code_section	00000004 not_coded
20044868 l     O actors_code_section	00000004 dquant_table
20061e70 l     O actors_code_section	00000001 cbp
20061e74 l     O actors_code_section	00000004 ac_pred_flag
20061e78 l     O actors_code_section	00000001 comp
20061e7c l     O actors_code_section	00000004 last
20061e80 l     O actors_code_section	00000001 run
20061e84 l     O actors_code_section	00000001 level
20061e88 l     O actors_code_section	00000004 ac_coded
20061e8c l     O actors_code_section	00000001 mvcomp
2004742c l     O actors_code_section	00000004 actorNotFinished
20047430 l     O actors_code_section	00000001 needInit
20047434 l     O actors_code_section	00000054 stateNames
20061e90 l     O actors_code_section	00000004 _FSM_state
200214bc l     F actors_code_section	00000070 read_BYTE
2002152c l     F actors_code_section	00000038 read_end_BYTE
20021564 l     F actors_code_section	00000070 write_BTYPE
200215d4 l     F actors_code_section	00000038 write_end_BTYPE
2002160c l     F actors_code_section	00000070 write_MV
2002167c l     F actors_code_section	00000038 write_end_MV
200216b4 l     F actors_code_section	00000070 write_RUN
20021724 l     F actors_code_section	00000038 write_end_RUN
2002175c l     F actors_code_section	00000070 write_VALUE
200217cc l     F actors_code_section	00000038 write_end_VALUE
20021804 l     F actors_code_section	00000070 write_LAST
20021874 l     F actors_code_section	00000038 write_end_LAST
200218ac l     F actors_code_section	00000070 write_WIDTH
2002191c l     F actors_code_section	00000038 write_end_WIDTH
20021954 l     F actors_code_section	00000070 write_HEIGHT
200219c4 l     F actors_code_section	00000038 write_end_HEIGHT
200219fc l     F actors_code_section	00000070 write_QP
20021a6c l     F actors_code_section	00000038 write_end_QP
20021aa4 l     F actors_code_section	0000011c BitstreamReadUtils_getFifoIdx
20021bc0 l     F actors_code_section	000001f4 BitstreamReadUtils_showXBits
20021db4 l     F actors_code_section	00000084 BitstreamReadUtils_flushBits
20021e38 l     F actors_code_section	00000078 BitstreamReadUtils_getBits
20021eb0 l     F actors_code_section	00000050 BitstreamReadUtils_vld_u
20021f00 l     F actors_code_section	0000006c BitstreamReadUtils_vld_u_name
20021f6c l     F actors_code_section	0000026c BitstreamReadUtils_showBits
200221d8 l     F actors_code_section	000001a4 vldFunctions_get_mcbpc
2002237c l     F actors_code_section	000000ec vldFunctions_get_cbpy
20022468 l     F actors_code_section	0000014c vldFunctions_get_dc_size_lum
200225b4 l     F actors_code_section	00000128 vldFunctions_get_dc_size_chrom
200226dc l     F actors_code_section	000000d0 vldFunctions_get_dc_dif
200227ac l     F actors_code_section	0000003c vldFunctions_GET_BITS
200227e8 l     F actors_code_section	00000700 vldFunctions_get_coeff
20022ee8 l     F actors_code_section	000001f0 vldFunctions_get_mv
200230d8 l     F actors_code_section	000000b0 BitstreamReadUtils_IsStartCode
20023188 l     F actors_code_section	00000070 BitstreamReadUtils_byte_align
200231f8 l     F actors_code_section	0000006c log2bin
20023264 l     F actors_code_section	00000074 isSchedulable_untagged_0
200232d8 l     F actors_code_section	0000024c untagged_0
20023524 l     F actors_code_section	0000002c isSchedulable_look_for_Sequence_Header
20023550 l     F actors_code_section	00000020 look_for_Sequence_Header
20023570 l     F actors_code_section	00000074 isSchedulable_read_start_code
200235e4 l     F actors_code_section	00000064 read_start_code
20023648 l     F actors_code_section	0000002c isSchedulable_look_for_other_header
20023674 l     F actors_code_section	00000020 look_for_other_header
20023694 l     F actors_code_section	0000004c isSchedulable_look_for_vol
200236e0 l     F actors_code_section	00000020 look_for_vol
20023700 l     F actors_code_section	0000004c isSchedulable_look_for_vop
2002374c l     F actors_code_section	00000020 look_for_vop
2002376c l     F actors_code_section	00000074 isSchedulable_read_vol_start
200237e0 l     F actors_code_section	000002cc read_vol_start
20023aac l     F actors_code_section	00000074 isSchedulable_read_vol_vbv_parameters1
20023b20 l     F actors_code_section	0000014c read_vol_vbv_parameters1
20023c6c l     F actors_code_section	00000074 isSchedulable_read_vol_vbv_parameters2
20023ce0 l     F actors_code_section	00000098 read_vol_vbv_parameters2
20023d78 l     F actors_code_section	00000074 isSchedulable_read_vol_video_object_layer_shape
20023dec l     F actors_code_section	000001c0 read_vol_video_object_layer_shape
20023fac l     F actors_code_section	00000074 isSchedulable_read_vol_video_object_layer_width
20024020 l     F actors_code_section	00000254 read_vol_video_object_layer_width
20024274 l     F actors_code_section	00000074 isSchedulable_read_vop
200242e8 l     F actors_code_section	0000006c read_vop
20024354 l     F actors_code_section	000000b8 isSchedulable_read_vop_coding_type_supported
2002440c l     F actors_code_section	0000014c read_vop_coding_type_supported
20024558 l     F actors_code_section	00000078 isSchedulable_read_vop_coding_type_unsupported
200245d0 l     F actors_code_section	00000020 read_vop_coding_type_unsupported
200245f0 l     F actors_code_section	00000088 isSchedulable_read_vop_coded_coded
20024678 l     F actors_code_section	0000048c read_vop_coded_coded
20024b04 l     F actors_code_section	00000044 isSchedulable_read_vop_coded_uncoded
20024b48 l     F actors_code_section	00000020 read_vop_coded_uncoded
20024b68 l     F actors_code_section	00000074 isSchedulable_read_mb_start
20024bdc l     F actors_code_section	000003b0 read_mb_start
20024f8c l     F actors_code_section	00000050 isSchedulable_read_mb_done
20024fdc l     F actors_code_section	00000020 read_mb_done
20024ffc l     F actors_code_section	0000002c isSchedulable_read_block_start
20025028 l     F actors_code_section	00000074 read_block_start
2002509c l     F actors_code_section	00000048 isSchedulable_read_block_done
200250e4 l     F actors_code_section	0000003c read_block_done
20025120 l     F actors_code_section	00000074 isSchedulable_read_block_dc
20025194 l     F actors_code_section	000003c8 read_block_dc
2002555c l     F actors_code_section	00000044 isSchedulable_read_block_nodc_inter
200255a0 l     F actors_code_section	0000017c read_block_nodc_inter
2002571c l     F actors_code_section	0000008c isSchedulable_read_block_nodc_intra
200257a8 l     F actors_code_section	00000164 read_block_nodc_intra
2002590c l     F actors_code_section	00000038 isSchedulable_read_block_coeff_ac
20025944 l     F actors_code_section	00000020 read_block_coeff_ac
20025964 l     F actors_code_section	0000002c isSchedulable_read_block_coeff_noac
20025990 l     F actors_code_section	00000044 read_block_coeff_noac
200259d4 l     F actors_code_section	00000074 isSchedulable_read_block_coeff
20025a48 l     F actors_code_section	00000198 read_block_coeff
20025be0 l     F actors_code_section	00000038 isSchedulable_read_block_coeff_done
20025c18 l     F actors_code_section	00000044 read_block_coeff_done
20025c5c l     F actors_code_section	00000038 isSchedulable_read_uncoded
20025c94 l     F actors_code_section	00000164 read_uncoded
20025df8 l     F actors_code_section	0000006c isSchedulable_read_mv_start
20025e64 l     F actors_code_section	00000028 read_mv_start
20025e8c l     F actors_code_section	00000074 isSchedulable_read_mv_data
20025f00 l     F actors_code_section	000002c0 read_mv_data
200261c0 l     F actors_code_section	00000078 isSchedulable_read_mv_data_done
20026238 l     F actors_code_section	00000020 read_mv_data_done
20026258 l     F actors_code_section	00000098 isSchedulable_start_code_search
200262f0 l     F actors_code_section	00000040 start_code_search
20026330 l     F actors_code_section	00000098 isSchedulable_start_code_done
200263c8 l     F actors_code_section	00000040 start_code_done
20026408 l     F actors_code_section	00000074 isSchedulable_byte_align_a
2002647c l     F actors_code_section	00000038 byte_align_a
200264b4 l     F actors_code_section	00000038 isSchedulable_undefined
200264ec l     F actors_code_section	00000028 undefined
00000000 l    df *ABS*	00000000 decoder_texture_DCReconstruction_addressing.o
20027b10 l     F actors_code_section	0000006c fifo_i8_has_tokens
20027b7c l     F actors_code_section	00000050 fifo_i8_get_num_tokens
20027bcc l     F actors_code_section	000000a0 fifo_i8_has_room
20027c6c l     F actors_code_section	000000a4 fifo_i8_get_room
20027d10 l     F actors_code_section	00000070 fifo_i8_clear
20027d80 l     F actors_code_section	0000008c fifo_i8_read_1
20027e0c l     F actors_code_section	00000070 fifo_i8_write_1
20027e7c l     F actors_code_section	0000006c fifo_i16_has_tokens
20027ee8 l     F actors_code_section	00000050 fifo_i16_get_num_tokens
20027f38 l     F actors_code_section	000000a0 fifo_i16_has_room
20027fd8 l     F actors_code_section	000000a4 fifo_i16_get_room
2002807c l     F actors_code_section	00000070 fifo_i16_clear
200280ec l     F actors_code_section	00000090 fifo_i16_read_1
2002817c l     F actors_code_section	00000074 fifo_i16_write_1
200281f0 l     F actors_code_section	0000006c fifo_i32_has_tokens
2002825c l     F actors_code_section	00000050 fifo_i32_get_num_tokens
200282ac l     F actors_code_section	000000a0 fifo_i32_has_room
2002834c l     F actors_code_section	000000a4 fifo_i32_get_room
200283f0 l     F actors_code_section	00000070 fifo_i32_clear
20028460 l     F actors_code_section	0000008c fifo_i32_read_1
200284ec l     F actors_code_section	00000070 fifo_i32_write_1
2002855c l     F actors_code_section	0000006c fifo_i64_has_tokens
200285c8 l     F actors_code_section	00000050 fifo_i64_get_num_tokens
20028618 l     F actors_code_section	000000a0 fifo_i64_has_room
200286b8 l     F actors_code_section	000000a4 fifo_i64_get_room
2002875c l     F actors_code_section	00000070 fifo_i64_clear
200287cc l     F actors_code_section	000000a0 fifo_i64_read_1
2002886c l     F actors_code_section	0000007c fifo_i64_write_1
200288e8 l     F actors_code_section	0000006c fifo_u8_has_tokens
20028954 l     F actors_code_section	00000050 fifo_u8_get_num_tokens
200289a4 l     F actors_code_section	000000a0 fifo_u8_has_room
20028a44 l     F actors_code_section	000000a4 fifo_u8_get_room
20028ae8 l     F actors_code_section	00000070 fifo_u8_clear
20028b58 l     F actors_code_section	00000088 fifo_u8_read_1
20028be0 l     F actors_code_section	00000070 fifo_u8_write_1
20028c50 l     F actors_code_section	0000006c fifo_u16_has_tokens
20028cbc l     F actors_code_section	00000050 fifo_u16_get_num_tokens
20028d0c l     F actors_code_section	000000a0 fifo_u16_has_room
20028dac l     F actors_code_section	000000a4 fifo_u16_get_room
20028e50 l     F actors_code_section	00000070 fifo_u16_clear
20028ec0 l     F actors_code_section	0000008c fifo_u16_read_1
20028f4c l     F actors_code_section	00000074 fifo_u16_write_1
20028fc0 l     F actors_code_section	0000006c fifo_u32_has_tokens
2002902c l     F actors_code_section	00000050 fifo_u32_get_num_tokens
2002907c l     F actors_code_section	000000a0 fifo_u32_has_room
2002911c l     F actors_code_section	000000a4 fifo_u32_get_room
200291c0 l     F actors_code_section	00000070 fifo_u32_clear
20029230 l     F actors_code_section	0000008c fifo_u32_read_1
200292bc l     F actors_code_section	00000070 fifo_u32_write_1
2002932c l     F actors_code_section	0000006c fifo_u64_has_tokens
20029398 l     F actors_code_section	00000050 fifo_u64_get_num_tokens
200293e8 l     F actors_code_section	000000a0 fifo_u64_has_room
20029488 l     F actors_code_section	000000a4 fifo_u64_get_room
2002952c l     F actors_code_section	00000070 fifo_u64_clear
2002959c l     F actors_code_section	000000a0 fifo_u64_read_1
2002963c l     F actors_code_section	0000007c fifo_u64_write_1
200296b8 l     F actors_code_section	0000006c fifo_float_has_tokens
20029724 l     F actors_code_section	00000050 fifo_float_get_num_tokens
20029774 l     F actors_code_section	000000a0 fifo_float_has_room
20029814 l     F actors_code_section	000000a4 fifo_float_get_room
200298b8 l     F actors_code_section	00000070 fifo_float_clear
20029928 l     F actors_code_section	0000008c fifo_float_read_1
200299b4 l     F actors_code_section	00000070 fifo_float_write_1
20047488 l     O actors_code_section	00000014 fifo_0
2004749c l     O actors_code_section	00000014 fifo_1
200474b0 l     O actors_code_section	00000014 fifo_2
200474c4 l     O actors_code_section	00000014 fifo_3
200474d8 l     O actors_code_section	00000014 fifo_4
200474ec l     O actors_code_section	00000014 fifo_5
20047500 l     O actors_code_section	00000014 fifo_6
20047514 l     O actors_code_section	00000014 fifo_7
20047528 l     O actors_code_section	00000014 fifo_8
2004753c l     O actors_code_section	00000014 fifo_9
20047550 l     O actors_code_section	00000014 fifo_10
20047564 l     O actors_code_section	00000014 fifo_11
20047578 l     O actors_code_section	00000014 fifo_12
2004758c l     O actors_code_section	00000014 fifo_13
200475a0 l     O actors_code_section	00000014 fifo_14
200475b4 l     O actors_code_section	00000014 fifo_15
200475c8 l     O actors_code_section	00000014 fifo_16
200475dc l     O actors_code_section	00000014 fifo_17
200475f0 l     O actors_code_section	00000014 fifo_18
20047604 l     O actors_code_section	00000014 fifo_19
20047618 l     O actors_code_section	00000014 fifo_20
2004762c l     O actors_code_section	00000014 fifo_21
20047640 l     O actors_code_section	00000014 fifo_22
20047654 l     O actors_code_section	00000014 fifo_23
20047668 l     O actors_code_section	00000014 fifo_24
2004767c l     O actors_code_section	00000014 fifo_25
20047690 l     O actors_code_section	00000014 fifo_26
200476a4 l     O actors_code_section	00000014 fifo_27
200476b8 l     O actors_code_section	00000014 fifo_28
200476cc l     O actors_code_section	00000014 fifo_29
200476e0 l     O actors_code_section	00000014 fifo_30
200476f4 l     O actors_code_section	00000014 fifo_31
20047708 l     O actors_code_section	00000004 source_O
2004770c l     O actors_code_section	00000004 decoder_parser_parseheaders_BYTE
20047710 l     O actors_code_section	00000004 decoder_merger_YUV
20047714 l     O actors_code_section	00000004 display_B
20047718 l     O actors_code_section	00000004 decoder_parser_parseheaders_QP
2004771c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QP
20047720 l     O actors_code_section	00000004 decoder_parser_parseheaders_HEIGHT
20047724 l     O actors_code_section	00000004 display_HEIGHT
20047728 l     O actors_code_section	00000004 decoder_parser_parseheaders_RUN
2004772c l     O actors_code_section	00000004 decoder_parser_blkexp_RUN
20047730 l     O actors_code_section	00000004 decoder_parser_parseheaders_MV
20047734 l     O actors_code_section	00000004 decoder_parser_mvrecon_MVIN
20047738 l     O actors_code_section	00000004 decoder_parser_parseheaders_WIDTH
2004773c l     O actors_code_section	00000004 display_WIDTH
20047740 l     O actors_code_section	00000004 decoder_parser_parseheaders_LAST
20047744 l     O actors_code_section	00000004 decoder_parser_blkexp_LAST
20047748 l     O actors_code_section	00000004 decoder_parser_parseheaders_BTYPE
2004774c l     O actors_code_section	00000004 decoder_parser_mvseq_BTYPE
20047750 l     O actors_code_section	00000004 decoder_parser_mvrecon_BTYPE
20047754 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
20047758 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
2004775c l     O actors_code_section	00000004 decoder_motion_add_BTYPE
20047760 l     O actors_code_section	00000004 decoder_motion_framebuf_BTYPE
20047764 l     O actors_code_section	00000004 decoder_parser_parseheaders_VALUE
20047768 l     O actors_code_section	00000004 decoder_parser_blkexp_VALUE
2004776c l     O actors_code_section	00000004 decoder_parser_mvseq_A
20047770 l     O actors_code_section	00000004 decoder_parser_mvrecon_A
20047774 l     O actors_code_section	00000004 decoder_parser_blkexp_QFS
20047778 l     O actors_code_section	00000004 decoder_texture_DCsplit_IN
2004777c l     O actors_code_section	00000004 decoder_parser_mvrecon_MV
20047780 l     O actors_code_section	00000004 decoder_motion_framebuf_MV
20047784 l     O actors_code_section	00000004 decoder_texture_DCsplit_AC
20047788 l     O actors_code_section	00000004 decoder_texture_IS_QFS_AC
2004778c l     O actors_code_section	00000004 decoder_texture_DCsplit_DC
20047790 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
20047794 l     O actors_code_section	00000004 decoder_texture_IS_PQF_AC
20047798 l     O actors_code_section	00000004 decoder_texture_IAP_PQF_AC
2004779c l     O actors_code_section	00000004 decoder_texture_IAP_QF_AC
200477a0 l     O actors_code_section	00000004 decoder_texture_IQ_AC
200477a4 l     O actors_code_section	00000004 decoder_texture_IQ_OUT
200477a8 l     O actors_code_section	00000004 decoder_texture_idct2d_IN
200477ac l     O actors_code_section	00000004 decoder_texture_idct2d_OUT
200477b0 l     O actors_code_section	00000004 decoder_motion_add_TEX
200477b4 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_B
200477b8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_B
200477bc l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_A
200477c0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_A
200477c4 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_C
200477c8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_C
200477cc l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_PTR
200477d0 l     O actors_code_section	00000004 decoder_texture_IAP_PTR
200477d4 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
200477d8 l     O actors_code_section	00000004 decoder_texture_IQ_DC
200477dc l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_MODE
200477e0 l     O actors_code_section	00000004 decoder_texture_IS_AC_PRED_DIR
200477e4 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
200477e8 l     O actors_code_section	00000004 decoder_texture_idct2d_SIGNED
200477ec l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
200477f0 l     O actors_code_section	00000004 decoder_texture_IAP_AC_PRED_DIR
200477f4 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QUANT
200477f8 l     O actors_code_section	00000004 decoder_texture_IQ_QP
200477fc l     O actors_code_section	00000004 decoder_motion_interpolation_MOT
20047800 l     O actors_code_section	00000004 decoder_motion_add_MOT
20047804 l     O actors_code_section	00000004 decoder_motion_add_VID
20047808 l     O actors_code_section	00000004 decoder_motion_framebuf_WD
2004780c l     O actors_code_section	00000004 decoder_merger_YUV_i
20047810 l     O actors_code_section	00000004 decoder_motion_framebuf_RD
20047814 l     O actors_code_section	00000004 decoder_motion_interpolation_RD
20047818 l     O actors_code_section	00000004 decoder_motion_framebuf_halfpel
2004781c l     O actors_code_section	00000004 decoder_motion_interpolation_halfpel
20061e94 l     O actors_code_section	00000004 index_BTYPE
20061e98 l     O actors_code_section	00000004 numTokens_BTYPE
20061e9c l     O actors_code_section	00000004 index_A
20061ea0 l     O actors_code_section	00000004 numFree_A
20061ea4 l     O actors_code_section	00000004 index_B
20061ea8 l     O actors_code_section	00000004 numFree_B
20061eac l     O actors_code_section	00000004 index_C
20061eb0 l     O actors_code_section	00000004 numFree_C
20061eb4 l     O actors_code_section	00000001 mbx
20047820 l     O actors_code_section	00000004 top_edge
20061eb8 l     O actors_code_section	00000004 left_edge
20061ebc l     O actors_code_section	00000001 comp
20061ebd l     O actors_code_section	00000001 mbwidth
20061ec0 l     O actors_code_section	000001c0 coded
20062080 l     O actors_code_section	00000001 ptr
20062081 l     O actors_code_section	00000001 ptr_left
20062082 l     O actors_code_section	00000001 ptr_above
20062083 l     O actors_code_section	00000001 ptr_above_left
20047824 l     O actors_code_section	00000001 needInit
20047828 l     O actors_code_section	00000014 stateNames
20062084 l     O actors_code_section	00000004 _FSM_state
20029a24 l     F actors_code_section	00000070 read_BTYPE
20029a94 l     F actors_code_section	0000003c read_end_BTYPE
20029ad0 l     F actors_code_section	00000070 write_A
20029b40 l     F actors_code_section	00000038 write_end_A
20029b78 l     F actors_code_section	00000070 write_B
20029be8 l     F actors_code_section	00000038 write_end_B
20029c20 l     F actors_code_section	00000070 write_C
20029c90 l     F actors_code_section	00000038 write_end_C
20029cc8 l     F actors_code_section	00000068 decrement
20029d30 l     F actors_code_section	00000054 access
20029d84 l     F actors_code_section	00000074 isSchedulable_start
20029df8 l     F actors_code_section	000000a4 start
20029e9c l     F actors_code_section	0000002c isSchedulable_getw
20029ec8 l     F actors_code_section	000000dc getw_replaced
20029fa4 l     F actors_code_section	0000002c isSchedulable_geth
20029fd0 l     F actors_code_section	0000007c geth
2002a04c l     F actors_code_section	00000074 isSchedulable_read_intra
2002a0c0 l     F actors_code_section	000000d4 read_intra
2002a194 l     F actors_code_section	0000002c isSchedulable_read_other
2002a1c0 l     F actors_code_section	000000d0 read_other
2002a290 l     F actors_code_section	0000002c isSchedulable_advance
2002a2bc l     F actors_code_section	000001a8 advance
2002a464 l     F actors_code_section	0000002c isSchedulable_predict
2002a490 l     F actors_code_section	0000077c predict
00000000 l    df *ABS*	00000000 decoder_texture_DCReconstruction_invpred.o
2002b01c l     F actors_code_section	0000006c fifo_i8_has_tokens
2002b088 l     F actors_code_section	00000050 fifo_i8_get_num_tokens
2002b0d8 l     F actors_code_section	000000a0 fifo_i8_has_room
2002b178 l     F actors_code_section	000000a4 fifo_i8_get_room
2002b21c l     F actors_code_section	00000070 fifo_i8_clear
2002b28c l     F actors_code_section	0000008c fifo_i8_read_1
2002b318 l     F actors_code_section	00000070 fifo_i8_write_1
2002b388 l     F actors_code_section	0000006c fifo_i16_has_tokens
2002b3f4 l     F actors_code_section	00000050 fifo_i16_get_num_tokens
2002b444 l     F actors_code_section	000000a0 fifo_i16_has_room
2002b4e4 l     F actors_code_section	000000a4 fifo_i16_get_room
2002b588 l     F actors_code_section	00000070 fifo_i16_clear
2002b5f8 l     F actors_code_section	00000090 fifo_i16_read_1
2002b688 l     F actors_code_section	00000074 fifo_i16_write_1
2002b6fc l     F actors_code_section	0000006c fifo_i32_has_tokens
2002b768 l     F actors_code_section	00000050 fifo_i32_get_num_tokens
2002b7b8 l     F actors_code_section	000000a0 fifo_i32_has_room
2002b858 l     F actors_code_section	000000a4 fifo_i32_get_room
2002b8fc l     F actors_code_section	00000070 fifo_i32_clear
2002b96c l     F actors_code_section	0000008c fifo_i32_read_1
2002b9f8 l     F actors_code_section	00000070 fifo_i32_write_1
2002ba68 l     F actors_code_section	0000006c fifo_i64_has_tokens
2002bad4 l     F actors_code_section	00000050 fifo_i64_get_num_tokens
2002bb24 l     F actors_code_section	000000a0 fifo_i64_has_room
2002bbc4 l     F actors_code_section	000000a4 fifo_i64_get_room
2002bc68 l     F actors_code_section	00000070 fifo_i64_clear
2002bcd8 l     F actors_code_section	000000a0 fifo_i64_read_1
2002bd78 l     F actors_code_section	0000007c fifo_i64_write_1
2002bdf4 l     F actors_code_section	0000006c fifo_u8_has_tokens
2002be60 l     F actors_code_section	00000050 fifo_u8_get_num_tokens
2002beb0 l     F actors_code_section	000000a0 fifo_u8_has_room
2002bf50 l     F actors_code_section	000000a4 fifo_u8_get_room
2002bff4 l     F actors_code_section	00000070 fifo_u8_clear
2002c064 l     F actors_code_section	00000088 fifo_u8_read_1
2002c0ec l     F actors_code_section	00000070 fifo_u8_write_1
2002c15c l     F actors_code_section	0000006c fifo_u16_has_tokens
2002c1c8 l     F actors_code_section	00000050 fifo_u16_get_num_tokens
2002c218 l     F actors_code_section	000000a0 fifo_u16_has_room
2002c2b8 l     F actors_code_section	000000a4 fifo_u16_get_room
2002c35c l     F actors_code_section	00000070 fifo_u16_clear
2002c3cc l     F actors_code_section	0000008c fifo_u16_read_1
2002c458 l     F actors_code_section	00000074 fifo_u16_write_1
2002c4cc l     F actors_code_section	0000006c fifo_u32_has_tokens
2002c538 l     F actors_code_section	00000050 fifo_u32_get_num_tokens
2002c588 l     F actors_code_section	000000a0 fifo_u32_has_room
2002c628 l     F actors_code_section	000000a4 fifo_u32_get_room
2002c6cc l     F actors_code_section	00000070 fifo_u32_clear
2002c73c l     F actors_code_section	0000008c fifo_u32_read_1
2002c7c8 l     F actors_code_section	00000070 fifo_u32_write_1
2002c838 l     F actors_code_section	0000006c fifo_u64_has_tokens
2002c8a4 l     F actors_code_section	00000050 fifo_u64_get_num_tokens
2002c8f4 l     F actors_code_section	000000a0 fifo_u64_has_room
2002c994 l     F actors_code_section	000000a4 fifo_u64_get_room
2002ca38 l     F actors_code_section	00000070 fifo_u64_clear
2002caa8 l     F actors_code_section	000000a0 fifo_u64_read_1
2002cb48 l     F actors_code_section	0000007c fifo_u64_write_1
2002cbc4 l     F actors_code_section	0000006c fifo_float_has_tokens
2002cc30 l     F actors_code_section	00000050 fifo_float_get_num_tokens
2002cc80 l     F actors_code_section	000000a0 fifo_float_has_room
2002cd20 l     F actors_code_section	000000a4 fifo_float_get_room
2002cdc4 l     F actors_code_section	00000070 fifo_float_clear
2002ce34 l     F actors_code_section	0000008c fifo_float_read_1
2002cec0 l     F actors_code_section	00000070 fifo_float_write_1
2004783c l     O actors_code_section	00000014 fifo_0
20047850 l     O actors_code_section	00000014 fifo_1
20047864 l     O actors_code_section	00000014 fifo_2
20047878 l     O actors_code_section	00000014 fifo_3
2004788c l     O actors_code_section	00000014 fifo_4
200478a0 l     O actors_code_section	00000014 fifo_5
200478b4 l     O actors_code_section	00000014 fifo_6
200478c8 l     O actors_code_section	00000014 fifo_7
200478dc l     O actors_code_section	00000014 fifo_8
200478f0 l     O actors_code_section	00000014 fifo_9
20047904 l     O actors_code_section	00000014 fifo_10
20047918 l     O actors_code_section	00000014 fifo_11
2004792c l     O actors_code_section	00000014 fifo_12
20047940 l     O actors_code_section	00000014 fifo_13
20047954 l     O actors_code_section	00000014 fifo_14
20047968 l     O actors_code_section	00000014 fifo_15
2004797c l     O actors_code_section	00000014 fifo_16
20047990 l     O actors_code_section	00000014 fifo_17
200479a4 l     O actors_code_section	00000014 fifo_18
200479b8 l     O actors_code_section	00000014 fifo_19
200479cc l     O actors_code_section	00000014 fifo_20
200479e0 l     O actors_code_section	00000014 fifo_21
200479f4 l     O actors_code_section	00000014 fifo_22
20047a08 l     O actors_code_section	00000014 fifo_23
20047a1c l     O actors_code_section	00000014 fifo_24
20047a30 l     O actors_code_section	00000014 fifo_25
20047a44 l     O actors_code_section	00000014 fifo_26
20047a58 l     O actors_code_section	00000014 fifo_27
20047a6c l     O actors_code_section	00000014 fifo_28
20047a80 l     O actors_code_section	00000014 fifo_29
20047a94 l     O actors_code_section	00000014 fifo_30
20047aa8 l     O actors_code_section	00000014 fifo_31
20047abc l     O actors_code_section	00000004 source_O
20047ac0 l     O actors_code_section	00000004 decoder_parser_parseheaders_BYTE
20047ac4 l     O actors_code_section	00000004 decoder_merger_YUV
20047ac8 l     O actors_code_section	00000004 display_B
20047acc l     O actors_code_section	00000004 decoder_parser_parseheaders_QP
20047ad0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QP
20047ad4 l     O actors_code_section	00000004 decoder_parser_parseheaders_HEIGHT
20047ad8 l     O actors_code_section	00000004 display_HEIGHT
20047adc l     O actors_code_section	00000004 decoder_parser_parseheaders_RUN
20047ae0 l     O actors_code_section	00000004 decoder_parser_blkexp_RUN
20047ae4 l     O actors_code_section	00000004 decoder_parser_parseheaders_MV
20047ae8 l     O actors_code_section	00000004 decoder_parser_mvrecon_MVIN
20047aec l     O actors_code_section	00000004 decoder_parser_parseheaders_WIDTH
20047af0 l     O actors_code_section	00000004 display_WIDTH
20047af4 l     O actors_code_section	00000004 decoder_parser_parseheaders_LAST
20047af8 l     O actors_code_section	00000004 decoder_parser_blkexp_LAST
20047afc l     O actors_code_section	00000004 decoder_parser_parseheaders_BTYPE
20047b00 l     O actors_code_section	00000004 decoder_parser_mvseq_BTYPE
20047b04 l     O actors_code_section	00000004 decoder_parser_mvrecon_BTYPE
20047b08 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
20047b0c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
20047b10 l     O actors_code_section	00000004 decoder_motion_add_BTYPE
20047b14 l     O actors_code_section	00000004 decoder_motion_framebuf_BTYPE
20047b18 l     O actors_code_section	00000004 decoder_parser_parseheaders_VALUE
20047b1c l     O actors_code_section	00000004 decoder_parser_blkexp_VALUE
20047b20 l     O actors_code_section	00000004 decoder_parser_mvseq_A
20047b24 l     O actors_code_section	00000004 decoder_parser_mvrecon_A
20047b28 l     O actors_code_section	00000004 decoder_parser_blkexp_QFS
20047b2c l     O actors_code_section	00000004 decoder_texture_DCsplit_IN
20047b30 l     O actors_code_section	00000004 decoder_parser_mvrecon_MV
20047b34 l     O actors_code_section	00000004 decoder_motion_framebuf_MV
20047b38 l     O actors_code_section	00000004 decoder_texture_DCsplit_AC
20047b3c l     O actors_code_section	00000004 decoder_texture_IS_QFS_AC
20047b40 l     O actors_code_section	00000004 decoder_texture_DCsplit_DC
20047b44 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
20047b48 l     O actors_code_section	00000004 decoder_texture_IS_PQF_AC
20047b4c l     O actors_code_section	00000004 decoder_texture_IAP_PQF_AC
20047b50 l     O actors_code_section	00000004 decoder_texture_IAP_QF_AC
20047b54 l     O actors_code_section	00000004 decoder_texture_IQ_AC
20047b58 l     O actors_code_section	00000004 decoder_texture_IQ_OUT
20047b5c l     O actors_code_section	00000004 decoder_texture_idct2d_IN
20047b60 l     O actors_code_section	00000004 decoder_texture_idct2d_OUT
20047b64 l     O actors_code_section	00000004 decoder_motion_add_TEX
20047b68 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_B
20047b6c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_B
20047b70 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_A
20047b74 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_A
20047b78 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_C
20047b7c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_C
20047b80 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_PTR
20047b84 l     O actors_code_section	00000004 decoder_texture_IAP_PTR
20047b88 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
20047b8c l     O actors_code_section	00000004 decoder_texture_IQ_DC
20047b90 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_MODE
20047b94 l     O actors_code_section	00000004 decoder_texture_IS_AC_PRED_DIR
20047b98 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
20047b9c l     O actors_code_section	00000004 decoder_texture_idct2d_SIGNED
20047ba0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
20047ba4 l     O actors_code_section	00000004 decoder_texture_IAP_AC_PRED_DIR
20047ba8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QUANT
20047bac l     O actors_code_section	00000004 decoder_texture_IQ_QP
20047bb0 l     O actors_code_section	00000004 decoder_motion_interpolation_MOT
20047bb4 l     O actors_code_section	00000004 decoder_motion_add_MOT
20047bb8 l     O actors_code_section	00000004 decoder_motion_add_VID
20047bbc l     O actors_code_section	00000004 decoder_motion_framebuf_WD
20047bc0 l     O actors_code_section	00000004 decoder_merger_YUV_i
20047bc4 l     O actors_code_section	00000004 decoder_motion_framebuf_RD
20047bc8 l     O actors_code_section	00000004 decoder_motion_interpolation_RD
20047bcc l     O actors_code_section	00000004 decoder_motion_framebuf_halfpel
20047bd0 l     O actors_code_section	00000004 decoder_motion_interpolation_halfpel
20062088 l     O actors_code_section	00000004 index_BTYPE
2006208c l     O actors_code_section	00000004 numTokens_BTYPE
20062090 l     O actors_code_section	00000004 index_A
20062094 l     O actors_code_section	00000004 numTokens_A
20062098 l     O actors_code_section	00000004 index_B
2006209c l     O actors_code_section	00000004 numTokens_B
200620a0 l     O actors_code_section	00000004 index_C
200620a4 l     O actors_code_section	00000004 numTokens_C
200620a8 l     O actors_code_section	00000004 index_QFS_DC
200620ac l     O actors_code_section	00000004 numTokens_QFS_DC
200620b0 l     O actors_code_section	00000004 index_QP
200620b4 l     O actors_code_section	00000004 numTokens_QP
200620b8 l     O actors_code_section	00000004 index_QF_DC
200620bc l     O actors_code_section	00000004 numFree_QF_DC
200620c0 l     O actors_code_section	00000004 index_PTR
200620c4 l     O actors_code_section	00000004 numFree_PTR
200620c8 l     O actors_code_section	00000004 index_AC_PRED_DIR
200620cc l     O actors_code_section	00000004 numFree_AC_PRED_DIR
200620d0 l     O actors_code_section	00000004 index_MODE
200620d4 l     O actors_code_section	00000004 numFree_MODE
200620d8 l     O actors_code_section	00000004 index_SIGNED
200620dc l     O actors_code_section	00000004 numFree_SIGNED
200620e0 l     O actors_code_section	00000004 index_QUANT
200620e4 l     O actors_code_section	00000004 numFree_QUANT
200620e8 l     O actors_code_section	00000001 s_QP
200620e9 l     O actors_code_section	00000001 round
20047bd4 l     O actors_code_section	00000004 ptr
200620ea l     O actors_code_section	00000001 comp
20047bd8 l     O actors_code_section	000000e0 dc_buf
200620ec l     O actors_code_section	00000002 dc_pred
200620ee l     O actors_code_section	00000001 scaler
200620f0 l     O actors_code_section	00000002 dc_val
200620f4 l     O actors_code_section	00000004 is_signed
20047cb8 l     O actors_code_section	00000001 needInit
20047cbc l     O actors_code_section	0000001c stateNames
200620f8 l     O actors_code_section	00000004 _FSM_state
2002cf30 l     F actors_code_section	00000070 read_BTYPE
2002cfa0 l     F actors_code_section	0000003c read_end_BTYPE
2002cfdc l     F actors_code_section	00000070 read_A
2002d04c l     F actors_code_section	00000038 read_end_A
2002d084 l     F actors_code_section	00000070 read_B
2002d0f4 l     F actors_code_section	00000038 read_end_B
2002d12c l     F actors_code_section	00000070 read_C
2002d19c l     F actors_code_section	00000038 read_end_C
2002d1d4 l     F actors_code_section	00000070 read_QFS_DC
2002d244 l     F actors_code_section	00000038 read_end_QFS_DC
2002d27c l     F actors_code_section	00000070 read_QP
2002d2ec l     F actors_code_section	00000038 read_end_QP
2002d324 l     F actors_code_section	00000070 write_QF_DC
2002d394 l     F actors_code_section	00000038 write_end_QF_DC
2002d3cc l     F actors_code_section	00000070 write_PTR
2002d43c l     F actors_code_section	00000038 write_end_PTR
2002d474 l     F actors_code_section	00000070 write_AC_PRED_DIR
2002d4e4 l     F actors_code_section	00000038 write_end_AC_PRED_DIR
2002d51c l     F actors_code_section	00000070 write_MODE
2002d58c l     F actors_code_section	00000038 write_end_MODE
2002d5c4 l     F actors_code_section	00000070 write_SIGNED
2002d634 l     F actors_code_section	00000038 write_end_SIGNED
2002d66c l     F actors_code_section	00000070 write_QUANT
2002d6dc l     F actors_code_section	00000038 write_end_QUANT
2002d714 l     F actors_code_section	00000048 Math_abs
2002d75c l     F actors_code_section	00000098 saturate
2002d7f4 l     F actors_code_section	00000238 dc_scaler
2002da2c l     F actors_code_section	00000074 isSchedulable_start
2002daa0 l     F actors_code_section	000000e0 start
2002db80 l     F actors_code_section	0000002c isSchedulable_skip
2002dbac l     F actors_code_section	0000007c skip
2002dc28 l     F actors_code_section	00000094 isSchedulable_read_inter_ac
2002dcbc l     F actors_code_section	000002a8 read_inter_ac
2002df64 l     F actors_code_section	00000094 isSchedulable_read_other
2002dff8 l     F actors_code_section	00000128 read_other
2002e120 l     F actors_code_section	0000002c isSchedulable_read_intra
2002e14c l     F actors_code_section	00000578 read_intra
2002e6c4 l     F actors_code_section	0000002c isSchedulable_getdc_inter
2002e6f0 l     F actors_code_section	00000170 getdc_inter
2002e860 l     F actors_code_section	0000002c isSchedulable_getdc_intra
2002e88c l     F actors_code_section	000000d8 getdc_intra
2002e964 l     F actors_code_section	0000002c isSchedulable_sat
2002e990 l     F actors_code_section	000000dc sat
2002ea6c l     F actors_code_section	0000002c isSchedulable_advance
2002ea98 l     F actors_code_section	000000b8 advance
00000000 l    df *ABS*	00000000 decoder_texture_DCsplit.o
2002f358 l     F actors_code_section	0000006c fifo_i8_has_tokens
2002f3c4 l     F actors_code_section	00000050 fifo_i8_get_num_tokens
2002f414 l     F actors_code_section	000000a0 fifo_i8_has_room
2002f4b4 l     F actors_code_section	000000a4 fifo_i8_get_room
2002f558 l     F actors_code_section	00000070 fifo_i8_clear
2002f5c8 l     F actors_code_section	0000008c fifo_i8_read_1
2002f654 l     F actors_code_section	00000070 fifo_i8_write_1
2002f6c4 l     F actors_code_section	0000006c fifo_i16_has_tokens
2002f730 l     F actors_code_section	00000050 fifo_i16_get_num_tokens
2002f780 l     F actors_code_section	000000a0 fifo_i16_has_room
2002f820 l     F actors_code_section	000000a4 fifo_i16_get_room
2002f8c4 l     F actors_code_section	00000070 fifo_i16_clear
2002f934 l     F actors_code_section	00000090 fifo_i16_read_1
2002f9c4 l     F actors_code_section	00000074 fifo_i16_write_1
2002fa38 l     F actors_code_section	0000006c fifo_i32_has_tokens
2002faa4 l     F actors_code_section	00000050 fifo_i32_get_num_tokens
2002faf4 l     F actors_code_section	000000a0 fifo_i32_has_room
2002fb94 l     F actors_code_section	000000a4 fifo_i32_get_room
2002fc38 l     F actors_code_section	00000070 fifo_i32_clear
2002fca8 l     F actors_code_section	0000008c fifo_i32_read_1
2002fd34 l     F actors_code_section	00000070 fifo_i32_write_1
2002fda4 l     F actors_code_section	0000006c fifo_i64_has_tokens
2002fe10 l     F actors_code_section	00000050 fifo_i64_get_num_tokens
2002fe60 l     F actors_code_section	000000a0 fifo_i64_has_room
2002ff00 l     F actors_code_section	000000a4 fifo_i64_get_room
2002ffa4 l     F actors_code_section	00000070 fifo_i64_clear
20030014 l     F actors_code_section	000000a0 fifo_i64_read_1
200300b4 l     F actors_code_section	0000007c fifo_i64_write_1
20030130 l     F actors_code_section	0000006c fifo_u8_has_tokens
2003019c l     F actors_code_section	00000050 fifo_u8_get_num_tokens
200301ec l     F actors_code_section	000000a0 fifo_u8_has_room
2003028c l     F actors_code_section	000000a4 fifo_u8_get_room
20030330 l     F actors_code_section	00000070 fifo_u8_clear
200303a0 l     F actors_code_section	00000088 fifo_u8_read_1
20030428 l     F actors_code_section	00000070 fifo_u8_write_1
20030498 l     F actors_code_section	0000006c fifo_u16_has_tokens
20030504 l     F actors_code_section	00000050 fifo_u16_get_num_tokens
20030554 l     F actors_code_section	000000a0 fifo_u16_has_room
200305f4 l     F actors_code_section	000000a4 fifo_u16_get_room
20030698 l     F actors_code_section	00000070 fifo_u16_clear
20030708 l     F actors_code_section	0000008c fifo_u16_read_1
20030794 l     F actors_code_section	00000074 fifo_u16_write_1
20030808 l     F actors_code_section	0000006c fifo_u32_has_tokens
20030874 l     F actors_code_section	00000050 fifo_u32_get_num_tokens
200308c4 l     F actors_code_section	000000a0 fifo_u32_has_room
20030964 l     F actors_code_section	000000a4 fifo_u32_get_room
20030a08 l     F actors_code_section	00000070 fifo_u32_clear
20030a78 l     F actors_code_section	0000008c fifo_u32_read_1
20030b04 l     F actors_code_section	00000070 fifo_u32_write_1
20030b74 l     F actors_code_section	0000006c fifo_u64_has_tokens
20030be0 l     F actors_code_section	00000050 fifo_u64_get_num_tokens
20030c30 l     F actors_code_section	000000a0 fifo_u64_has_room
20030cd0 l     F actors_code_section	000000a4 fifo_u64_get_room
20030d74 l     F actors_code_section	00000070 fifo_u64_clear
20030de4 l     F actors_code_section	000000a0 fifo_u64_read_1
20030e84 l     F actors_code_section	0000007c fifo_u64_write_1
20030f00 l     F actors_code_section	0000006c fifo_float_has_tokens
20030f6c l     F actors_code_section	00000050 fifo_float_get_num_tokens
20030fbc l     F actors_code_section	000000a0 fifo_float_has_room
2003105c l     F actors_code_section	000000a4 fifo_float_get_room
20031100 l     F actors_code_section	00000070 fifo_float_clear
20031170 l     F actors_code_section	0000008c fifo_float_read_1
200311fc l     F actors_code_section	00000070 fifo_float_write_1
20047cd8 l     O actors_code_section	00000014 fifo_0
20047cec l     O actors_code_section	00000014 fifo_1
20047d00 l     O actors_code_section	00000014 fifo_2
20047d14 l     O actors_code_section	00000014 fifo_3
20047d28 l     O actors_code_section	00000014 fifo_4
20047d3c l     O actors_code_section	00000014 fifo_5
20047d50 l     O actors_code_section	00000014 fifo_6
20047d64 l     O actors_code_section	00000014 fifo_7
20047d78 l     O actors_code_section	00000014 fifo_8
20047d8c l     O actors_code_section	00000014 fifo_9
20047da0 l     O actors_code_section	00000014 fifo_10
20047db4 l     O actors_code_section	00000014 fifo_11
20047dc8 l     O actors_code_section	00000014 fifo_12
20047ddc l     O actors_code_section	00000014 fifo_13
20047df0 l     O actors_code_section	00000014 fifo_14
20047e04 l     O actors_code_section	00000014 fifo_15
20047e18 l     O actors_code_section	00000014 fifo_16
20047e2c l     O actors_code_section	00000014 fifo_17
20047e40 l     O actors_code_section	00000014 fifo_18
20047e54 l     O actors_code_section	00000014 fifo_19
20047e68 l     O actors_code_section	00000014 fifo_20
20047e7c l     O actors_code_section	00000014 fifo_21
20047e90 l     O actors_code_section	00000014 fifo_22
20047ea4 l     O actors_code_section	00000014 fifo_23
20047eb8 l     O actors_code_section	00000014 fifo_24
20047ecc l     O actors_code_section	00000014 fifo_25
20047ee0 l     O actors_code_section	00000014 fifo_26
20047ef4 l     O actors_code_section	00000014 fifo_27
20047f08 l     O actors_code_section	00000014 fifo_28
20047f1c l     O actors_code_section	00000014 fifo_29
20047f30 l     O actors_code_section	00000014 fifo_30
20047f44 l     O actors_code_section	00000014 fifo_31
20047f58 l     O actors_code_section	00000004 source_O
20047f5c l     O actors_code_section	00000004 decoder_parser_parseheaders_BYTE
20047f60 l     O actors_code_section	00000004 decoder_merger_YUV
20047f64 l     O actors_code_section	00000004 display_B
20047f68 l     O actors_code_section	00000004 decoder_parser_parseheaders_QP
20047f6c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QP
20047f70 l     O actors_code_section	00000004 decoder_parser_parseheaders_HEIGHT
20047f74 l     O actors_code_section	00000004 display_HEIGHT
20047f78 l     O actors_code_section	00000004 decoder_parser_parseheaders_RUN
20047f7c l     O actors_code_section	00000004 decoder_parser_blkexp_RUN
20047f80 l     O actors_code_section	00000004 decoder_parser_parseheaders_MV
20047f84 l     O actors_code_section	00000004 decoder_parser_mvrecon_MVIN
20047f88 l     O actors_code_section	00000004 decoder_parser_parseheaders_WIDTH
20047f8c l     O actors_code_section	00000004 display_WIDTH
20047f90 l     O actors_code_section	00000004 decoder_parser_parseheaders_LAST
20047f94 l     O actors_code_section	00000004 decoder_parser_blkexp_LAST
20047f98 l     O actors_code_section	00000004 decoder_parser_parseheaders_BTYPE
20047f9c l     O actors_code_section	00000004 decoder_parser_mvseq_BTYPE
20047fa0 l     O actors_code_section	00000004 decoder_parser_mvrecon_BTYPE
20047fa4 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
20047fa8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
20047fac l     O actors_code_section	00000004 decoder_motion_add_BTYPE
20047fb0 l     O actors_code_section	00000004 decoder_motion_framebuf_BTYPE
20047fb4 l     O actors_code_section	00000004 decoder_parser_parseheaders_VALUE
20047fb8 l     O actors_code_section	00000004 decoder_parser_blkexp_VALUE
20047fbc l     O actors_code_section	00000004 decoder_parser_mvseq_A
20047fc0 l     O actors_code_section	00000004 decoder_parser_mvrecon_A
20047fc4 l     O actors_code_section	00000004 decoder_parser_blkexp_QFS
20047fc8 l     O actors_code_section	00000004 decoder_texture_DCsplit_IN
20047fcc l     O actors_code_section	00000004 decoder_parser_mvrecon_MV
20047fd0 l     O actors_code_section	00000004 decoder_motion_framebuf_MV
20047fd4 l     O actors_code_section	00000004 decoder_texture_DCsplit_AC
20047fd8 l     O actors_code_section	00000004 decoder_texture_IS_QFS_AC
20047fdc l     O actors_code_section	00000004 decoder_texture_DCsplit_DC
20047fe0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
20047fe4 l     O actors_code_section	00000004 decoder_texture_IS_PQF_AC
20047fe8 l     O actors_code_section	00000004 decoder_texture_IAP_PQF_AC
20047fec l     O actors_code_section	00000004 decoder_texture_IAP_QF_AC
20047ff0 l     O actors_code_section	00000004 decoder_texture_IQ_AC
20047ff4 l     O actors_code_section	00000004 decoder_texture_IQ_OUT
20047ff8 l     O actors_code_section	00000004 decoder_texture_idct2d_IN
20047ffc l     O actors_code_section	00000004 decoder_texture_idct2d_OUT
20048000 l     O actors_code_section	00000004 decoder_motion_add_TEX
20048004 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_B
20048008 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_B
2004800c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_A
20048010 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_A
20048014 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_C
20048018 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_C
2004801c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_PTR
20048020 l     O actors_code_section	00000004 decoder_texture_IAP_PTR
20048024 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
20048028 l     O actors_code_section	00000004 decoder_texture_IQ_DC
2004802c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_MODE
20048030 l     O actors_code_section	00000004 decoder_texture_IS_AC_PRED_DIR
20048034 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
20048038 l     O actors_code_section	00000004 decoder_texture_idct2d_SIGNED
2004803c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
20048040 l     O actors_code_section	00000004 decoder_texture_IAP_AC_PRED_DIR
20048044 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QUANT
20048048 l     O actors_code_section	00000004 decoder_texture_IQ_QP
2004804c l     O actors_code_section	00000004 decoder_motion_interpolation_MOT
20048050 l     O actors_code_section	00000004 decoder_motion_add_MOT
20048054 l     O actors_code_section	00000004 decoder_motion_add_VID
20048058 l     O actors_code_section	00000004 decoder_motion_framebuf_WD
2004805c l     O actors_code_section	00000004 decoder_merger_YUV_i
20048060 l     O actors_code_section	00000004 decoder_motion_framebuf_RD
20048064 l     O actors_code_section	00000004 decoder_motion_interpolation_RD
20048068 l     O actors_code_section	00000004 decoder_motion_framebuf_halfpel
2004806c l     O actors_code_section	00000004 decoder_motion_interpolation_halfpel
200620fc l     O actors_code_section	00000004 index_IN
20062100 l     O actors_code_section	00000004 numTokens_IN
20062104 l     O actors_code_section	00000004 index_DC
20062108 l     O actors_code_section	00000004 numFree_DC
2006210c l     O actors_code_section	00000004 index_AC
20062110 l     O actors_code_section	00000004 numFree_AC
20048070 l     O actors_code_section	00000001 needInit
2003126c l     F actors_code_section	00000070 read_IN
200312dc l     F actors_code_section	00000038 read_end_IN
20031314 l     F actors_code_section	00000070 write_DC
20031384 l     F actors_code_section	00000038 write_end_DC
200313bc l     F actors_code_section	00000070 write_AC
2003142c l     F actors_code_section	00000038 write_end_AC
20031464 l     F actors_code_section	0000002c isSchedulable_untagged_0
20031490 l     F actors_code_section	00000188 untagged_0
00000000 l    df *ABS*	00000000 decoder_texture_IAP.o
20031770 l     F actors_code_section	0000006c fifo_i8_has_tokens
200317dc l     F actors_code_section	00000050 fifo_i8_get_num_tokens
2003182c l     F actors_code_section	000000a0 fifo_i8_has_room
200318cc l     F actors_code_section	000000a4 fifo_i8_get_room
20031970 l     F actors_code_section	00000070 fifo_i8_clear
200319e0 l     F actors_code_section	0000008c fifo_i8_read_1
20031a6c l     F actors_code_section	00000070 fifo_i8_write_1
20031adc l     F actors_code_section	0000006c fifo_i16_has_tokens
20031b48 l     F actors_code_section	00000050 fifo_i16_get_num_tokens
20031b98 l     F actors_code_section	000000a0 fifo_i16_has_room
20031c38 l     F actors_code_section	000000a4 fifo_i16_get_room
20031cdc l     F actors_code_section	00000070 fifo_i16_clear
20031d4c l     F actors_code_section	00000090 fifo_i16_read_1
20031ddc l     F actors_code_section	00000074 fifo_i16_write_1
20031e50 l     F actors_code_section	0000006c fifo_i32_has_tokens
20031ebc l     F actors_code_section	00000050 fifo_i32_get_num_tokens
20031f0c l     F actors_code_section	000000a0 fifo_i32_has_room
20031fac l     F actors_code_section	000000a4 fifo_i32_get_room
20032050 l     F actors_code_section	00000070 fifo_i32_clear
200320c0 l     F actors_code_section	0000008c fifo_i32_read_1
2003214c l     F actors_code_section	00000070 fifo_i32_write_1
200321bc l     F actors_code_section	0000006c fifo_i64_has_tokens
20032228 l     F actors_code_section	00000050 fifo_i64_get_num_tokens
20032278 l     F actors_code_section	000000a0 fifo_i64_has_room
20032318 l     F actors_code_section	000000a4 fifo_i64_get_room
200323bc l     F actors_code_section	00000070 fifo_i64_clear
2003242c l     F actors_code_section	000000a0 fifo_i64_read_1
200324cc l     F actors_code_section	0000007c fifo_i64_write_1
20032548 l     F actors_code_section	0000006c fifo_u8_has_tokens
200325b4 l     F actors_code_section	00000050 fifo_u8_get_num_tokens
20032604 l     F actors_code_section	000000a0 fifo_u8_has_room
200326a4 l     F actors_code_section	000000a4 fifo_u8_get_room
20032748 l     F actors_code_section	00000070 fifo_u8_clear
200327b8 l     F actors_code_section	00000088 fifo_u8_read_1
20032840 l     F actors_code_section	00000070 fifo_u8_write_1
200328b0 l     F actors_code_section	0000006c fifo_u16_has_tokens
2003291c l     F actors_code_section	00000050 fifo_u16_get_num_tokens
2003296c l     F actors_code_section	000000a0 fifo_u16_has_room
20032a0c l     F actors_code_section	000000a4 fifo_u16_get_room
20032ab0 l     F actors_code_section	00000070 fifo_u16_clear
20032b20 l     F actors_code_section	0000008c fifo_u16_read_1
20032bac l     F actors_code_section	00000074 fifo_u16_write_1
20032c20 l     F actors_code_section	0000006c fifo_u32_has_tokens
20032c8c l     F actors_code_section	00000050 fifo_u32_get_num_tokens
20032cdc l     F actors_code_section	000000a0 fifo_u32_has_room
20032d7c l     F actors_code_section	000000a4 fifo_u32_get_room
20032e20 l     F actors_code_section	00000070 fifo_u32_clear
20032e90 l     F actors_code_section	0000008c fifo_u32_read_1
20032f1c l     F actors_code_section	00000070 fifo_u32_write_1
20032f8c l     F actors_code_section	0000006c fifo_u64_has_tokens
20032ff8 l     F actors_code_section	00000050 fifo_u64_get_num_tokens
20033048 l     F actors_code_section	000000a0 fifo_u64_has_room
200330e8 l     F actors_code_section	000000a4 fifo_u64_get_room
2003318c l     F actors_code_section	00000070 fifo_u64_clear
200331fc l     F actors_code_section	000000a0 fifo_u64_read_1
2003329c l     F actors_code_section	0000007c fifo_u64_write_1
20033318 l     F actors_code_section	0000006c fifo_float_has_tokens
20033384 l     F actors_code_section	00000050 fifo_float_get_num_tokens
200333d4 l     F actors_code_section	000000a0 fifo_float_has_room
20033474 l     F actors_code_section	000000a4 fifo_float_get_room
20033518 l     F actors_code_section	00000070 fifo_float_clear
20033588 l     F actors_code_section	0000008c fifo_float_read_1
20033614 l     F actors_code_section	00000070 fifo_float_write_1
20048074 l     O actors_code_section	00000014 fifo_0
20048088 l     O actors_code_section	00000014 fifo_1
2004809c l     O actors_code_section	00000014 fifo_2
200480b0 l     O actors_code_section	00000014 fifo_3
200480c4 l     O actors_code_section	00000014 fifo_4
200480d8 l     O actors_code_section	00000014 fifo_5
200480ec l     O actors_code_section	00000014 fifo_6
20048100 l     O actors_code_section	00000014 fifo_7
20048114 l     O actors_code_section	00000014 fifo_8
20048128 l     O actors_code_section	00000014 fifo_9
2004813c l     O actors_code_section	00000014 fifo_10
20048150 l     O actors_code_section	00000014 fifo_11
20048164 l     O actors_code_section	00000014 fifo_12
20048178 l     O actors_code_section	00000014 fifo_13
2004818c l     O actors_code_section	00000014 fifo_14
200481a0 l     O actors_code_section	00000014 fifo_15
200481b4 l     O actors_code_section	00000014 fifo_16
200481c8 l     O actors_code_section	00000014 fifo_17
200481dc l     O actors_code_section	00000014 fifo_18
200481f0 l     O actors_code_section	00000014 fifo_19
20048204 l     O actors_code_section	00000014 fifo_20
20048218 l     O actors_code_section	00000014 fifo_21
2004822c l     O actors_code_section	00000014 fifo_22
20048240 l     O actors_code_section	00000014 fifo_23
20048254 l     O actors_code_section	00000014 fifo_24
20048268 l     O actors_code_section	00000014 fifo_25
2004827c l     O actors_code_section	00000014 fifo_26
20048290 l     O actors_code_section	00000014 fifo_27
200482a4 l     O actors_code_section	00000014 fifo_28
200482b8 l     O actors_code_section	00000014 fifo_29
200482cc l     O actors_code_section	00000014 fifo_30
200482e0 l     O actors_code_section	00000014 fifo_31
200482f4 l     O actors_code_section	00000004 source_O
200482f8 l     O actors_code_section	00000004 decoder_parser_parseheaders_BYTE
200482fc l     O actors_code_section	00000004 decoder_merger_YUV
20048300 l     O actors_code_section	00000004 display_B
20048304 l     O actors_code_section	00000004 decoder_parser_parseheaders_QP
20048308 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QP
2004830c l     O actors_code_section	00000004 decoder_parser_parseheaders_HEIGHT
20048310 l     O actors_code_section	00000004 display_HEIGHT
20048314 l     O actors_code_section	00000004 decoder_parser_parseheaders_RUN
20048318 l     O actors_code_section	00000004 decoder_parser_blkexp_RUN
2004831c l     O actors_code_section	00000004 decoder_parser_parseheaders_MV
20048320 l     O actors_code_section	00000004 decoder_parser_mvrecon_MVIN
20048324 l     O actors_code_section	00000004 decoder_parser_parseheaders_WIDTH
20048328 l     O actors_code_section	00000004 display_WIDTH
2004832c l     O actors_code_section	00000004 decoder_parser_parseheaders_LAST
20048330 l     O actors_code_section	00000004 decoder_parser_blkexp_LAST
20048334 l     O actors_code_section	00000004 decoder_parser_parseheaders_BTYPE
20048338 l     O actors_code_section	00000004 decoder_parser_mvseq_BTYPE
2004833c l     O actors_code_section	00000004 decoder_parser_mvrecon_BTYPE
20048340 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
20048344 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
20048348 l     O actors_code_section	00000004 decoder_motion_add_BTYPE
2004834c l     O actors_code_section	00000004 decoder_motion_framebuf_BTYPE
20048350 l     O actors_code_section	00000004 decoder_parser_parseheaders_VALUE
20048354 l     O actors_code_section	00000004 decoder_parser_blkexp_VALUE
20048358 l     O actors_code_section	00000004 decoder_parser_mvseq_A
2004835c l     O actors_code_section	00000004 decoder_parser_mvrecon_A
20048360 l     O actors_code_section	00000004 decoder_parser_blkexp_QFS
20048364 l     O actors_code_section	00000004 decoder_texture_DCsplit_IN
20048368 l     O actors_code_section	00000004 decoder_parser_mvrecon_MV
2004836c l     O actors_code_section	00000004 decoder_motion_framebuf_MV
20048370 l     O actors_code_section	00000004 decoder_texture_DCsplit_AC
20048374 l     O actors_code_section	00000004 decoder_texture_IS_QFS_AC
20048378 l     O actors_code_section	00000004 decoder_texture_DCsplit_DC
2004837c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
20048380 l     O actors_code_section	00000004 decoder_texture_IS_PQF_AC
20048384 l     O actors_code_section	00000004 decoder_texture_IAP_PQF_AC
20048388 l     O actors_code_section	00000004 decoder_texture_IAP_QF_AC
2004838c l     O actors_code_section	00000004 decoder_texture_IQ_AC
20048390 l     O actors_code_section	00000004 decoder_texture_IQ_OUT
20048394 l     O actors_code_section	00000004 decoder_texture_idct2d_IN
20048398 l     O actors_code_section	00000004 decoder_texture_idct2d_OUT
2004839c l     O actors_code_section	00000004 decoder_motion_add_TEX
200483a0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_B
200483a4 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_B
200483a8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_A
200483ac l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_A
200483b0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_C
200483b4 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_C
200483b8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_PTR
200483bc l     O actors_code_section	00000004 decoder_texture_IAP_PTR
200483c0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
200483c4 l     O actors_code_section	00000004 decoder_texture_IQ_DC
200483c8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_MODE
200483cc l     O actors_code_section	00000004 decoder_texture_IS_AC_PRED_DIR
200483d0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
200483d4 l     O actors_code_section	00000004 decoder_texture_idct2d_SIGNED
200483d8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
200483dc l     O actors_code_section	00000004 decoder_texture_IAP_AC_PRED_DIR
200483e0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QUANT
200483e4 l     O actors_code_section	00000004 decoder_texture_IQ_QP
200483e8 l     O actors_code_section	00000004 decoder_motion_interpolation_MOT
200483ec l     O actors_code_section	00000004 decoder_motion_add_MOT
200483f0 l     O actors_code_section	00000004 decoder_motion_add_VID
200483f4 l     O actors_code_section	00000004 decoder_motion_framebuf_WD
200483f8 l     O actors_code_section	00000004 decoder_merger_YUV_i
200483fc l     O actors_code_section	00000004 decoder_motion_framebuf_RD
20048400 l     O actors_code_section	00000004 decoder_motion_interpolation_RD
20048404 l     O actors_code_section	00000004 decoder_motion_framebuf_halfpel
20048408 l     O actors_code_section	00000004 decoder_motion_interpolation_halfpel
20062114 l     O actors_code_section	00000004 index_PQF_AC
20062118 l     O actors_code_section	00000004 numTokens_PQF_AC
2006211c l     O actors_code_section	00000004 index_PTR
20062120 l     O actors_code_section	00000004 numTokens_PTR
20062124 l     O actors_code_section	00000004 index_AC_PRED_DIR
20062128 l     O actors_code_section	00000004 numTokens_AC_PRED_DIR
2006212c l     O actors_code_section	00000004 index_QF_AC
20062130 l     O actors_code_section	00000004 numFree_QF_AC
20062134 l     O actors_code_section	00000002 ptr
20062136 l     O actors_code_section	00000002 pred_ptr
20062138 l     O actors_code_section	00000e00 buf
20062f38 l     O actors_code_section	00000001 comp
20062f3c l     O actors_code_section	00000004 top
20062f40 l     O actors_code_section	00000004 acpred_flag
2004840c l     O actors_code_section	00000001 needInit
20048410 l     O actors_code_section	0000000c stateNames
20062f44 l     O actors_code_section	00000004 _FSM_state
20033684 l     F actors_code_section	00000070 read_PQF_AC
200336f4 l     F actors_code_section	00000038 read_end_PQF_AC
2003372c l     F actors_code_section	00000070 read_PTR
2003379c l     F actors_code_section	00000038 read_end_PTR
200337d4 l     F actors_code_section	00000070 read_AC_PRED_DIR
20033844 l     F actors_code_section	00000038 read_end_AC_PRED_DIR
2003387c l     F actors_code_section	00000070 write_QF_AC
200338ec l     F actors_code_section	00000038 write_end_QF_AC
20033924 l     F actors_code_section	00000060 isSchedulable_newvop
20033984 l     F actors_code_section	0000008c newvop
20033a10 l     F actors_code_section	00000058 isSchedulable_skip
20033a68 l     F actors_code_section	00000078 skip
20033ae0 l     F actors_code_section	0000002c isSchedulable_start
20033b0c l     F actors_code_section	00000110 start
20033c1c l     F actors_code_section	0000002c isSchedulable_advance
20033c48 l     F actors_code_section	000000dc advance
20033d24 l     F actors_code_section	0000002c isSchedulable_copy
20033d50 l     F actors_code_section	00000310 copy
00000000 l    df *ABS*	00000000 decoder_texture_IQ.o
2003437c l     F actors_code_section	0000006c fifo_i8_has_tokens
200343e8 l     F actors_code_section	00000050 fifo_i8_get_num_tokens
20034438 l     F actors_code_section	000000a0 fifo_i8_has_room
200344d8 l     F actors_code_section	000000a4 fifo_i8_get_room
2003457c l     F actors_code_section	00000070 fifo_i8_clear
200345ec l     F actors_code_section	0000008c fifo_i8_read_1
20034678 l     F actors_code_section	00000070 fifo_i8_write_1
200346e8 l     F actors_code_section	0000006c fifo_i16_has_tokens
20034754 l     F actors_code_section	00000050 fifo_i16_get_num_tokens
200347a4 l     F actors_code_section	000000a0 fifo_i16_has_room
20034844 l     F actors_code_section	000000a4 fifo_i16_get_room
200348e8 l     F actors_code_section	00000070 fifo_i16_clear
20034958 l     F actors_code_section	00000090 fifo_i16_read_1
200349e8 l     F actors_code_section	00000074 fifo_i16_write_1
20034a5c l     F actors_code_section	0000006c fifo_i32_has_tokens
20034ac8 l     F actors_code_section	00000050 fifo_i32_get_num_tokens
20034b18 l     F actors_code_section	000000a0 fifo_i32_has_room
20034bb8 l     F actors_code_section	000000a4 fifo_i32_get_room
20034c5c l     F actors_code_section	00000070 fifo_i32_clear
20034ccc l     F actors_code_section	0000008c fifo_i32_read_1
20034d58 l     F actors_code_section	00000070 fifo_i32_write_1
20034dc8 l     F actors_code_section	0000006c fifo_i64_has_tokens
20034e34 l     F actors_code_section	00000050 fifo_i64_get_num_tokens
20034e84 l     F actors_code_section	000000a0 fifo_i64_has_room
20034f24 l     F actors_code_section	000000a4 fifo_i64_get_room
20034fc8 l     F actors_code_section	00000070 fifo_i64_clear
20035038 l     F actors_code_section	000000a0 fifo_i64_read_1
200350d8 l     F actors_code_section	0000007c fifo_i64_write_1
20035154 l     F actors_code_section	0000006c fifo_u8_has_tokens
200351c0 l     F actors_code_section	00000050 fifo_u8_get_num_tokens
20035210 l     F actors_code_section	000000a0 fifo_u8_has_room
200352b0 l     F actors_code_section	000000a4 fifo_u8_get_room
20035354 l     F actors_code_section	00000070 fifo_u8_clear
200353c4 l     F actors_code_section	00000088 fifo_u8_read_1
2003544c l     F actors_code_section	00000070 fifo_u8_write_1
200354bc l     F actors_code_section	0000006c fifo_u16_has_tokens
20035528 l     F actors_code_section	00000050 fifo_u16_get_num_tokens
20035578 l     F actors_code_section	000000a0 fifo_u16_has_room
20035618 l     F actors_code_section	000000a4 fifo_u16_get_room
200356bc l     F actors_code_section	00000070 fifo_u16_clear
2003572c l     F actors_code_section	0000008c fifo_u16_read_1
200357b8 l     F actors_code_section	00000074 fifo_u16_write_1
2003582c l     F actors_code_section	0000006c fifo_u32_has_tokens
20035898 l     F actors_code_section	00000050 fifo_u32_get_num_tokens
200358e8 l     F actors_code_section	000000a0 fifo_u32_has_room
20035988 l     F actors_code_section	000000a4 fifo_u32_get_room
20035a2c l     F actors_code_section	00000070 fifo_u32_clear
20035a9c l     F actors_code_section	0000008c fifo_u32_read_1
20035b28 l     F actors_code_section	00000070 fifo_u32_write_1
20035b98 l     F actors_code_section	0000006c fifo_u64_has_tokens
20035c04 l     F actors_code_section	00000050 fifo_u64_get_num_tokens
20035c54 l     F actors_code_section	000000a0 fifo_u64_has_room
20035cf4 l     F actors_code_section	000000a4 fifo_u64_get_room
20035d98 l     F actors_code_section	00000070 fifo_u64_clear
20035e08 l     F actors_code_section	000000a0 fifo_u64_read_1
20035ea8 l     F actors_code_section	0000007c fifo_u64_write_1
20035f24 l     F actors_code_section	0000006c fifo_float_has_tokens
20035f90 l     F actors_code_section	00000050 fifo_float_get_num_tokens
20035fe0 l     F actors_code_section	000000a0 fifo_float_has_room
20036080 l     F actors_code_section	000000a4 fifo_float_get_room
20036124 l     F actors_code_section	00000070 fifo_float_clear
20036194 l     F actors_code_section	0000008c fifo_float_read_1
20036220 l     F actors_code_section	00000070 fifo_float_write_1
2004841c l     O actors_code_section	00000014 fifo_0
20048430 l     O actors_code_section	00000014 fifo_1
20048444 l     O actors_code_section	00000014 fifo_2
20048458 l     O actors_code_section	00000014 fifo_3
2004846c l     O actors_code_section	00000014 fifo_4
20048480 l     O actors_code_section	00000014 fifo_5
20048494 l     O actors_code_section	00000014 fifo_6
200484a8 l     O actors_code_section	00000014 fifo_7
200484bc l     O actors_code_section	00000014 fifo_8
200484d0 l     O actors_code_section	00000014 fifo_9
200484e4 l     O actors_code_section	00000014 fifo_10
200484f8 l     O actors_code_section	00000014 fifo_11
2004850c l     O actors_code_section	00000014 fifo_12
20048520 l     O actors_code_section	00000014 fifo_13
20048534 l     O actors_code_section	00000014 fifo_14
20048548 l     O actors_code_section	00000014 fifo_15
2004855c l     O actors_code_section	00000014 fifo_16
20048570 l     O actors_code_section	00000014 fifo_17
20048584 l     O actors_code_section	00000014 fifo_18
20048598 l     O actors_code_section	00000014 fifo_19
200485ac l     O actors_code_section	00000014 fifo_20
200485c0 l     O actors_code_section	00000014 fifo_21
200485d4 l     O actors_code_section	00000014 fifo_22
200485e8 l     O actors_code_section	00000014 fifo_23
200485fc l     O actors_code_section	00000014 fifo_24
20048610 l     O actors_code_section	00000014 fifo_25
20048624 l     O actors_code_section	00000014 fifo_26
20048638 l     O actors_code_section	00000014 fifo_27
2004864c l     O actors_code_section	00000014 fifo_28
20048660 l     O actors_code_section	00000014 fifo_29
20048674 l     O actors_code_section	00000014 fifo_30
20048688 l     O actors_code_section	00000014 fifo_31
2004869c l     O actors_code_section	00000004 source_O
200486a0 l     O actors_code_section	00000004 decoder_parser_parseheaders_BYTE
200486a4 l     O actors_code_section	00000004 decoder_merger_YUV
200486a8 l     O actors_code_section	00000004 display_B
200486ac l     O actors_code_section	00000004 decoder_parser_parseheaders_QP
200486b0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QP
200486b4 l     O actors_code_section	00000004 decoder_parser_parseheaders_HEIGHT
200486b8 l     O actors_code_section	00000004 display_HEIGHT
200486bc l     O actors_code_section	00000004 decoder_parser_parseheaders_RUN
200486c0 l     O actors_code_section	00000004 decoder_parser_blkexp_RUN
200486c4 l     O actors_code_section	00000004 decoder_parser_parseheaders_MV
200486c8 l     O actors_code_section	00000004 decoder_parser_mvrecon_MVIN
200486cc l     O actors_code_section	00000004 decoder_parser_parseheaders_WIDTH
200486d0 l     O actors_code_section	00000004 display_WIDTH
200486d4 l     O actors_code_section	00000004 decoder_parser_parseheaders_LAST
200486d8 l     O actors_code_section	00000004 decoder_parser_blkexp_LAST
200486dc l     O actors_code_section	00000004 decoder_parser_parseheaders_BTYPE
200486e0 l     O actors_code_section	00000004 decoder_parser_mvseq_BTYPE
200486e4 l     O actors_code_section	00000004 decoder_parser_mvrecon_BTYPE
200486e8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
200486ec l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
200486f0 l     O actors_code_section	00000004 decoder_motion_add_BTYPE
200486f4 l     O actors_code_section	00000004 decoder_motion_framebuf_BTYPE
200486f8 l     O actors_code_section	00000004 decoder_parser_parseheaders_VALUE
200486fc l     O actors_code_section	00000004 decoder_parser_blkexp_VALUE
20048700 l     O actors_code_section	00000004 decoder_parser_mvseq_A
20048704 l     O actors_code_section	00000004 decoder_parser_mvrecon_A
20048708 l     O actors_code_section	00000004 decoder_parser_blkexp_QFS
2004870c l     O actors_code_section	00000004 decoder_texture_DCsplit_IN
20048710 l     O actors_code_section	00000004 decoder_parser_mvrecon_MV
20048714 l     O actors_code_section	00000004 decoder_motion_framebuf_MV
20048718 l     O actors_code_section	00000004 decoder_texture_DCsplit_AC
2004871c l     O actors_code_section	00000004 decoder_texture_IS_QFS_AC
20048720 l     O actors_code_section	00000004 decoder_texture_DCsplit_DC
20048724 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
20048728 l     O actors_code_section	00000004 decoder_texture_IS_PQF_AC
2004872c l     O actors_code_section	00000004 decoder_texture_IAP_PQF_AC
20048730 l     O actors_code_section	00000004 decoder_texture_IAP_QF_AC
20048734 l     O actors_code_section	00000004 decoder_texture_IQ_AC
20048738 l     O actors_code_section	00000004 decoder_texture_IQ_OUT
2004873c l     O actors_code_section	00000004 decoder_texture_idct2d_IN
20048740 l     O actors_code_section	00000004 decoder_texture_idct2d_OUT
20048744 l     O actors_code_section	00000004 decoder_motion_add_TEX
20048748 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_B
2004874c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_B
20048750 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_A
20048754 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_A
20048758 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_C
2004875c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_C
20048760 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_PTR
20048764 l     O actors_code_section	00000004 decoder_texture_IAP_PTR
20048768 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
2004876c l     O actors_code_section	00000004 decoder_texture_IQ_DC
20048770 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_MODE
20048774 l     O actors_code_section	00000004 decoder_texture_IS_AC_PRED_DIR
20048778 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
2004877c l     O actors_code_section	00000004 decoder_texture_idct2d_SIGNED
20048780 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
20048784 l     O actors_code_section	00000004 decoder_texture_IAP_AC_PRED_DIR
20048788 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QUANT
2004878c l     O actors_code_section	00000004 decoder_texture_IQ_QP
20048790 l     O actors_code_section	00000004 decoder_motion_interpolation_MOT
20048794 l     O actors_code_section	00000004 decoder_motion_add_MOT
20048798 l     O actors_code_section	00000004 decoder_motion_add_VID
2004879c l     O actors_code_section	00000004 decoder_motion_framebuf_WD
200487a0 l     O actors_code_section	00000004 decoder_merger_YUV_i
200487a4 l     O actors_code_section	00000004 decoder_motion_framebuf_RD
200487a8 l     O actors_code_section	00000004 decoder_motion_interpolation_RD
200487ac l     O actors_code_section	00000004 decoder_motion_framebuf_halfpel
200487b0 l     O actors_code_section	00000004 decoder_motion_interpolation_halfpel
20062f48 l     O actors_code_section	00000004 index_DC
20062f4c l     O actors_code_section	00000004 numTokens_DC
20062f50 l     O actors_code_section	00000004 index_AC
20062f54 l     O actors_code_section	00000004 numTokens_AC
20062f58 l     O actors_code_section	00000004 index_QP
20062f5c l     O actors_code_section	00000004 numTokens_QP
20062f60 l     O actors_code_section	00000004 index_OUT
20062f64 l     O actors_code_section	00000004 numFree_OUT
20062f68 l     O actors_code_section	00000001 quant
20062f69 l     O actors_code_section	00000001 round
200487b4 l     O actors_code_section	00000001 needInit
200487b8 l     O actors_code_section	00000008 stateNames
20062f6c l     O actors_code_section	00000004 _FSM_state
20036290 l     F actors_code_section	00000070 read_DC
20036300 l     F actors_code_section	00000038 read_end_DC
20036338 l     F actors_code_section	00000070 read_AC
200363a8 l     F actors_code_section	00000038 read_end_AC
200363e0 l     F actors_code_section	00000070 read_QP
20036450 l     F actors_code_section	00000038 read_end_QP
20036488 l     F actors_code_section	00000070 write_OUT
200364f8 l     F actors_code_section	00000038 write_end_OUT
20036530 l     F actors_code_section	00000048 Math_abs
20036578 l     F actors_code_section	00000098 saturate
20036610 l     F actors_code_section	0000002c isSchedulable_get_qp
2003663c l     F actors_code_section	0000014c get_qp
20036788 l     F actors_code_section	0000002c isSchedulable_ac
200367b4 l     F actors_code_section	0000023c ac
00000000 l    df *ABS*	00000000 decoder_texture_IS.o
20036c24 l     F actors_code_section	0000006c fifo_i8_has_tokens
20036c90 l     F actors_code_section	00000050 fifo_i8_get_num_tokens
20036ce0 l     F actors_code_section	000000a0 fifo_i8_has_room
20036d80 l     F actors_code_section	000000a4 fifo_i8_get_room
20036e24 l     F actors_code_section	00000070 fifo_i8_clear
20036e94 l     F actors_code_section	0000008c fifo_i8_read_1
20036f20 l     F actors_code_section	00000070 fifo_i8_write_1
20036f90 l     F actors_code_section	0000006c fifo_i16_has_tokens
20036ffc l     F actors_code_section	00000050 fifo_i16_get_num_tokens
2003704c l     F actors_code_section	000000a0 fifo_i16_has_room
200370ec l     F actors_code_section	000000a4 fifo_i16_get_room
20037190 l     F actors_code_section	00000070 fifo_i16_clear
20037200 l     F actors_code_section	00000090 fifo_i16_read_1
20037290 l     F actors_code_section	00000074 fifo_i16_write_1
20037304 l     F actors_code_section	0000006c fifo_i32_has_tokens
20037370 l     F actors_code_section	00000050 fifo_i32_get_num_tokens
200373c0 l     F actors_code_section	000000a0 fifo_i32_has_room
20037460 l     F actors_code_section	000000a4 fifo_i32_get_room
20037504 l     F actors_code_section	00000070 fifo_i32_clear
20037574 l     F actors_code_section	0000008c fifo_i32_read_1
20037600 l     F actors_code_section	00000070 fifo_i32_write_1
20037670 l     F actors_code_section	0000006c fifo_i64_has_tokens
200376dc l     F actors_code_section	00000050 fifo_i64_get_num_tokens
2003772c l     F actors_code_section	000000a0 fifo_i64_has_room
200377cc l     F actors_code_section	000000a4 fifo_i64_get_room
20037870 l     F actors_code_section	00000070 fifo_i64_clear
200378e0 l     F actors_code_section	000000a0 fifo_i64_read_1
20037980 l     F actors_code_section	0000007c fifo_i64_write_1
200379fc l     F actors_code_section	0000006c fifo_u8_has_tokens
20037a68 l     F actors_code_section	00000050 fifo_u8_get_num_tokens
20037ab8 l     F actors_code_section	000000a0 fifo_u8_has_room
20037b58 l     F actors_code_section	000000a4 fifo_u8_get_room
20037bfc l     F actors_code_section	00000070 fifo_u8_clear
20037c6c l     F actors_code_section	00000088 fifo_u8_read_1
20037cf4 l     F actors_code_section	00000070 fifo_u8_write_1
20037d64 l     F actors_code_section	0000006c fifo_u16_has_tokens
20037dd0 l     F actors_code_section	00000050 fifo_u16_get_num_tokens
20037e20 l     F actors_code_section	000000a0 fifo_u16_has_room
20037ec0 l     F actors_code_section	000000a4 fifo_u16_get_room
20037f64 l     F actors_code_section	00000070 fifo_u16_clear
20037fd4 l     F actors_code_section	0000008c fifo_u16_read_1
20038060 l     F actors_code_section	00000074 fifo_u16_write_1
200380d4 l     F actors_code_section	0000006c fifo_u32_has_tokens
20038140 l     F actors_code_section	00000050 fifo_u32_get_num_tokens
20038190 l     F actors_code_section	000000a0 fifo_u32_has_room
20038230 l     F actors_code_section	000000a4 fifo_u32_get_room
200382d4 l     F actors_code_section	00000070 fifo_u32_clear
20038344 l     F actors_code_section	0000008c fifo_u32_read_1
200383d0 l     F actors_code_section	00000070 fifo_u32_write_1
20038440 l     F actors_code_section	0000006c fifo_u64_has_tokens
200384ac l     F actors_code_section	00000050 fifo_u64_get_num_tokens
200384fc l     F actors_code_section	000000a0 fifo_u64_has_room
2003859c l     F actors_code_section	000000a4 fifo_u64_get_room
20038640 l     F actors_code_section	00000070 fifo_u64_clear
200386b0 l     F actors_code_section	000000a0 fifo_u64_read_1
20038750 l     F actors_code_section	0000007c fifo_u64_write_1
200387cc l     F actors_code_section	0000006c fifo_float_has_tokens
20038838 l     F actors_code_section	00000050 fifo_float_get_num_tokens
20038888 l     F actors_code_section	000000a0 fifo_float_has_room
20038928 l     F actors_code_section	000000a4 fifo_float_get_room
200389cc l     F actors_code_section	00000070 fifo_float_clear
20038a3c l     F actors_code_section	0000008c fifo_float_read_1
20038ac8 l     F actors_code_section	00000070 fifo_float_write_1
200487c0 l     O actors_code_section	00000014 fifo_0
200487d4 l     O actors_code_section	00000014 fifo_1
200487e8 l     O actors_code_section	00000014 fifo_2
200487fc l     O actors_code_section	00000014 fifo_3
20048810 l     O actors_code_section	00000014 fifo_4
20048824 l     O actors_code_section	00000014 fifo_5
20048838 l     O actors_code_section	00000014 fifo_6
2004884c l     O actors_code_section	00000014 fifo_7
20048860 l     O actors_code_section	00000014 fifo_8
20048874 l     O actors_code_section	00000014 fifo_9
20048888 l     O actors_code_section	00000014 fifo_10
2004889c l     O actors_code_section	00000014 fifo_11
200488b0 l     O actors_code_section	00000014 fifo_12
200488c4 l     O actors_code_section	00000014 fifo_13
200488d8 l     O actors_code_section	00000014 fifo_14
200488ec l     O actors_code_section	00000014 fifo_15
20048900 l     O actors_code_section	00000014 fifo_16
20048914 l     O actors_code_section	00000014 fifo_17
20048928 l     O actors_code_section	00000014 fifo_18
2004893c l     O actors_code_section	00000014 fifo_19
20048950 l     O actors_code_section	00000014 fifo_20
20048964 l     O actors_code_section	00000014 fifo_21
20048978 l     O actors_code_section	00000014 fifo_22
2004898c l     O actors_code_section	00000014 fifo_23
200489a0 l     O actors_code_section	00000014 fifo_24
200489b4 l     O actors_code_section	00000014 fifo_25
200489c8 l     O actors_code_section	00000014 fifo_26
200489dc l     O actors_code_section	00000014 fifo_27
200489f0 l     O actors_code_section	00000014 fifo_28
20048a04 l     O actors_code_section	00000014 fifo_29
20048a18 l     O actors_code_section	00000014 fifo_30
20048a2c l     O actors_code_section	00000014 fifo_31
20048a40 l     O actors_code_section	00000004 source_O
20048a44 l     O actors_code_section	00000004 decoder_parser_parseheaders_BYTE
20048a48 l     O actors_code_section	00000004 decoder_merger_YUV
20048a4c l     O actors_code_section	00000004 display_B
20048a50 l     O actors_code_section	00000004 decoder_parser_parseheaders_QP
20048a54 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QP
20048a58 l     O actors_code_section	00000004 decoder_parser_parseheaders_HEIGHT
20048a5c l     O actors_code_section	00000004 display_HEIGHT
20048a60 l     O actors_code_section	00000004 decoder_parser_parseheaders_RUN
20048a64 l     O actors_code_section	00000004 decoder_parser_blkexp_RUN
20048a68 l     O actors_code_section	00000004 decoder_parser_parseheaders_MV
20048a6c l     O actors_code_section	00000004 decoder_parser_mvrecon_MVIN
20048a70 l     O actors_code_section	00000004 decoder_parser_parseheaders_WIDTH
20048a74 l     O actors_code_section	00000004 display_WIDTH
20048a78 l     O actors_code_section	00000004 decoder_parser_parseheaders_LAST
20048a7c l     O actors_code_section	00000004 decoder_parser_blkexp_LAST
20048a80 l     O actors_code_section	00000004 decoder_parser_parseheaders_BTYPE
20048a84 l     O actors_code_section	00000004 decoder_parser_mvseq_BTYPE
20048a88 l     O actors_code_section	00000004 decoder_parser_mvrecon_BTYPE
20048a8c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
20048a90 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
20048a94 l     O actors_code_section	00000004 decoder_motion_add_BTYPE
20048a98 l     O actors_code_section	00000004 decoder_motion_framebuf_BTYPE
20048a9c l     O actors_code_section	00000004 decoder_parser_parseheaders_VALUE
20048aa0 l     O actors_code_section	00000004 decoder_parser_blkexp_VALUE
20048aa4 l     O actors_code_section	00000004 decoder_parser_mvseq_A
20048aa8 l     O actors_code_section	00000004 decoder_parser_mvrecon_A
20048aac l     O actors_code_section	00000004 decoder_parser_blkexp_QFS
20048ab0 l     O actors_code_section	00000004 decoder_texture_DCsplit_IN
20048ab4 l     O actors_code_section	00000004 decoder_parser_mvrecon_MV
20048ab8 l     O actors_code_section	00000004 decoder_motion_framebuf_MV
20048abc l     O actors_code_section	00000004 decoder_texture_DCsplit_AC
20048ac0 l     O actors_code_section	00000004 decoder_texture_IS_QFS_AC
20048ac4 l     O actors_code_section	00000004 decoder_texture_DCsplit_DC
20048ac8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
20048acc l     O actors_code_section	00000004 decoder_texture_IS_PQF_AC
20048ad0 l     O actors_code_section	00000004 decoder_texture_IAP_PQF_AC
20048ad4 l     O actors_code_section	00000004 decoder_texture_IAP_QF_AC
20048ad8 l     O actors_code_section	00000004 decoder_texture_IQ_AC
20048adc l     O actors_code_section	00000004 decoder_texture_IQ_OUT
20048ae0 l     O actors_code_section	00000004 decoder_texture_idct2d_IN
20048ae4 l     O actors_code_section	00000004 decoder_texture_idct2d_OUT
20048ae8 l     O actors_code_section	00000004 decoder_motion_add_TEX
20048aec l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_B
20048af0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_B
20048af4 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_A
20048af8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_A
20048afc l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_C
20048b00 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_C
20048b04 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_PTR
20048b08 l     O actors_code_section	00000004 decoder_texture_IAP_PTR
20048b0c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
20048b10 l     O actors_code_section	00000004 decoder_texture_IQ_DC
20048b14 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_MODE
20048b18 l     O actors_code_section	00000004 decoder_texture_IS_AC_PRED_DIR
20048b1c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
20048b20 l     O actors_code_section	00000004 decoder_texture_idct2d_SIGNED
20048b24 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
20048b28 l     O actors_code_section	00000004 decoder_texture_IAP_AC_PRED_DIR
20048b2c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QUANT
20048b30 l     O actors_code_section	00000004 decoder_texture_IQ_QP
20048b34 l     O actors_code_section	00000004 decoder_motion_interpolation_MOT
20048b38 l     O actors_code_section	00000004 decoder_motion_add_MOT
20048b3c l     O actors_code_section	00000004 decoder_motion_add_VID
20048b40 l     O actors_code_section	00000004 decoder_motion_framebuf_WD
20048b44 l     O actors_code_section	00000004 decoder_merger_YUV_i
20048b48 l     O actors_code_section	00000004 decoder_motion_framebuf_RD
20048b4c l     O actors_code_section	00000004 decoder_motion_interpolation_RD
20048b50 l     O actors_code_section	00000004 decoder_motion_framebuf_halfpel
20048b54 l     O actors_code_section	00000004 decoder_motion_interpolation_halfpel
20062f70 l     O actors_code_section	00000004 index_AC_PRED_DIR
20062f74 l     O actors_code_section	00000004 numTokens_AC_PRED_DIR
20062f78 l     O actors_code_section	00000004 index_QFS_AC
20062f7c l     O actors_code_section	00000004 numTokens_QFS_AC
20062f80 l     O actors_code_section	00000004 index_PQF_AC
20062f84 l     O actors_code_section	00000004 numFree_PQF_AC
200454bc l     O actors_code_section	000000c0 Scanmode
20048b58 l     O actors_code_section	00000001 needInit
20038b38 l     F actors_code_section	00000070 read_AC_PRED_DIR
20038ba8 l     F actors_code_section	00000038 read_end_AC_PRED_DIR
20038be0 l     F actors_code_section	00000070 read_QFS_AC
20038c50 l     F actors_code_section	00000038 read_end_QFS_AC
20038c88 l     F actors_code_section	00000070 write_PQF_AC
20038cf8 l     F actors_code_section	00000038 write_end_PQF_AC
20038d30 l     F actors_code_section	00000058 isSchedulable_skip
20038d88 l     F actors_code_section	00000078 skip
20038e00 l     F actors_code_section	0000002c isSchedulable_rw
20038e2c l     F actors_code_section	00000188 rw
00000000 l    df *ABS*	00000000 decoder_texture_idct2d.o
20039168 l     F actors_code_section	0000006c fifo_i8_has_tokens
200391d4 l     F actors_code_section	00000050 fifo_i8_get_num_tokens
20039224 l     F actors_code_section	000000a0 fifo_i8_has_room
200392c4 l     F actors_code_section	000000a4 fifo_i8_get_room
20039368 l     F actors_code_section	00000070 fifo_i8_clear
200393d8 l     F actors_code_section	0000008c fifo_i8_read_1
20039464 l     F actors_code_section	00000070 fifo_i8_write_1
200394d4 l     F actors_code_section	0000006c fifo_i16_has_tokens
20039540 l     F actors_code_section	00000050 fifo_i16_get_num_tokens
20039590 l     F actors_code_section	000000a0 fifo_i16_has_room
20039630 l     F actors_code_section	000000a4 fifo_i16_get_room
200396d4 l     F actors_code_section	00000070 fifo_i16_clear
20039744 l     F actors_code_section	00000090 fifo_i16_read_1
200397d4 l     F actors_code_section	00000074 fifo_i16_write_1
20039848 l     F actors_code_section	0000006c fifo_i32_has_tokens
200398b4 l     F actors_code_section	00000050 fifo_i32_get_num_tokens
20039904 l     F actors_code_section	000000a0 fifo_i32_has_room
200399a4 l     F actors_code_section	000000a4 fifo_i32_get_room
20039a48 l     F actors_code_section	00000070 fifo_i32_clear
20039ab8 l     F actors_code_section	0000008c fifo_i32_read_1
20039b44 l     F actors_code_section	00000070 fifo_i32_write_1
20039bb4 l     F actors_code_section	0000006c fifo_i64_has_tokens
20039c20 l     F actors_code_section	00000050 fifo_i64_get_num_tokens
20039c70 l     F actors_code_section	000000a0 fifo_i64_has_room
20039d10 l     F actors_code_section	000000a4 fifo_i64_get_room
20039db4 l     F actors_code_section	00000070 fifo_i64_clear
20039e24 l     F actors_code_section	000000a0 fifo_i64_read_1
20039ec4 l     F actors_code_section	0000007c fifo_i64_write_1
20039f40 l     F actors_code_section	0000006c fifo_u8_has_tokens
20039fac l     F actors_code_section	00000050 fifo_u8_get_num_tokens
20039ffc l     F actors_code_section	000000a0 fifo_u8_has_room
2003a09c l     F actors_code_section	000000a4 fifo_u8_get_room
2003a140 l     F actors_code_section	00000070 fifo_u8_clear
2003a1b0 l     F actors_code_section	00000088 fifo_u8_read_1
2003a238 l     F actors_code_section	00000070 fifo_u8_write_1
2003a2a8 l     F actors_code_section	0000006c fifo_u16_has_tokens
2003a314 l     F actors_code_section	00000050 fifo_u16_get_num_tokens
2003a364 l     F actors_code_section	000000a0 fifo_u16_has_room
2003a404 l     F actors_code_section	000000a4 fifo_u16_get_room
2003a4a8 l     F actors_code_section	00000070 fifo_u16_clear
2003a518 l     F actors_code_section	0000008c fifo_u16_read_1
2003a5a4 l     F actors_code_section	00000074 fifo_u16_write_1
2003a618 l     F actors_code_section	0000006c fifo_u32_has_tokens
2003a684 l     F actors_code_section	00000050 fifo_u32_get_num_tokens
2003a6d4 l     F actors_code_section	000000a0 fifo_u32_has_room
2003a774 l     F actors_code_section	000000a4 fifo_u32_get_room
2003a818 l     F actors_code_section	00000070 fifo_u32_clear
2003a888 l     F actors_code_section	0000008c fifo_u32_read_1
2003a914 l     F actors_code_section	00000070 fifo_u32_write_1
2003a984 l     F actors_code_section	0000006c fifo_u64_has_tokens
2003a9f0 l     F actors_code_section	00000050 fifo_u64_get_num_tokens
2003aa40 l     F actors_code_section	000000a0 fifo_u64_has_room
2003aae0 l     F actors_code_section	000000a4 fifo_u64_get_room
2003ab84 l     F actors_code_section	00000070 fifo_u64_clear
2003abf4 l     F actors_code_section	000000a0 fifo_u64_read_1
2003ac94 l     F actors_code_section	0000007c fifo_u64_write_1
2003ad10 l     F actors_code_section	0000006c fifo_float_has_tokens
2003ad7c l     F actors_code_section	00000050 fifo_float_get_num_tokens
2003adcc l     F actors_code_section	000000a0 fifo_float_has_room
2003ae6c l     F actors_code_section	000000a4 fifo_float_get_room
2003af10 l     F actors_code_section	00000070 fifo_float_clear
2003af80 l     F actors_code_section	0000008c fifo_float_read_1
2003b00c l     F actors_code_section	00000070 fifo_float_write_1
20048b5c l     O actors_code_section	00000014 fifo_0
20048b70 l     O actors_code_section	00000014 fifo_1
20048b84 l     O actors_code_section	00000014 fifo_2
20048b98 l     O actors_code_section	00000014 fifo_3
20048bac l     O actors_code_section	00000014 fifo_4
20048bc0 l     O actors_code_section	00000014 fifo_5
20048bd4 l     O actors_code_section	00000014 fifo_6
20048be8 l     O actors_code_section	00000014 fifo_7
20048bfc l     O actors_code_section	00000014 fifo_8
20048c10 l     O actors_code_section	00000014 fifo_9
20048c24 l     O actors_code_section	00000014 fifo_10
20048c38 l     O actors_code_section	00000014 fifo_11
20048c4c l     O actors_code_section	00000014 fifo_12
20048c60 l     O actors_code_section	00000014 fifo_13
20048c74 l     O actors_code_section	00000014 fifo_14
20048c88 l     O actors_code_section	00000014 fifo_15
20048c9c l     O actors_code_section	00000014 fifo_16
20048cb0 l     O actors_code_section	00000014 fifo_17
20048cc4 l     O actors_code_section	00000014 fifo_18
20048cd8 l     O actors_code_section	00000014 fifo_19
20048cec l     O actors_code_section	00000014 fifo_20
20048d00 l     O actors_code_section	00000014 fifo_21
20048d14 l     O actors_code_section	00000014 fifo_22
20048d28 l     O actors_code_section	00000014 fifo_23
20048d3c l     O actors_code_section	00000014 fifo_24
20048d50 l     O actors_code_section	00000014 fifo_25
20048d64 l     O actors_code_section	00000014 fifo_26
20048d78 l     O actors_code_section	00000014 fifo_27
20048d8c l     O actors_code_section	00000014 fifo_28
20048da0 l     O actors_code_section	00000014 fifo_29
20048db4 l     O actors_code_section	00000014 fifo_30
20048dc8 l     O actors_code_section	00000014 fifo_31
20048ddc l     O actors_code_section	00000004 source_O
20048de0 l     O actors_code_section	00000004 decoder_parser_parseheaders_BYTE
20048de4 l     O actors_code_section	00000004 decoder_merger_YUV
20048de8 l     O actors_code_section	00000004 display_B
20048dec l     O actors_code_section	00000004 decoder_parser_parseheaders_QP
20048df0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QP
20048df4 l     O actors_code_section	00000004 decoder_parser_parseheaders_HEIGHT
20048df8 l     O actors_code_section	00000004 display_HEIGHT
20048dfc l     O actors_code_section	00000004 decoder_parser_parseheaders_RUN
20048e00 l     O actors_code_section	00000004 decoder_parser_blkexp_RUN
20048e04 l     O actors_code_section	00000004 decoder_parser_parseheaders_MV
20048e08 l     O actors_code_section	00000004 decoder_parser_mvrecon_MVIN
20048e0c l     O actors_code_section	00000004 decoder_parser_parseheaders_WIDTH
20048e10 l     O actors_code_section	00000004 display_WIDTH
20048e14 l     O actors_code_section	00000004 decoder_parser_parseheaders_LAST
20048e18 l     O actors_code_section	00000004 decoder_parser_blkexp_LAST
20048e1c l     O actors_code_section	00000004 decoder_parser_parseheaders_BTYPE
20048e20 l     O actors_code_section	00000004 decoder_parser_mvseq_BTYPE
20048e24 l     O actors_code_section	00000004 decoder_parser_mvrecon_BTYPE
20048e28 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
20048e2c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
20048e30 l     O actors_code_section	00000004 decoder_motion_add_BTYPE
20048e34 l     O actors_code_section	00000004 decoder_motion_framebuf_BTYPE
20048e38 l     O actors_code_section	00000004 decoder_parser_parseheaders_VALUE
20048e3c l     O actors_code_section	00000004 decoder_parser_blkexp_VALUE
20048e40 l     O actors_code_section	00000004 decoder_parser_mvseq_A
20048e44 l     O actors_code_section	00000004 decoder_parser_mvrecon_A
20048e48 l     O actors_code_section	00000004 decoder_parser_blkexp_QFS
20048e4c l     O actors_code_section	00000004 decoder_texture_DCsplit_IN
20048e50 l     O actors_code_section	00000004 decoder_parser_mvrecon_MV
20048e54 l     O actors_code_section	00000004 decoder_motion_framebuf_MV
20048e58 l     O actors_code_section	00000004 decoder_texture_DCsplit_AC
20048e5c l     O actors_code_section	00000004 decoder_texture_IS_QFS_AC
20048e60 l     O actors_code_section	00000004 decoder_texture_DCsplit_DC
20048e64 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
20048e68 l     O actors_code_section	00000004 decoder_texture_IS_PQF_AC
20048e6c l     O actors_code_section	00000004 decoder_texture_IAP_PQF_AC
20048e70 l     O actors_code_section	00000004 decoder_texture_IAP_QF_AC
20048e74 l     O actors_code_section	00000004 decoder_texture_IQ_AC
20048e78 l     O actors_code_section	00000004 decoder_texture_IQ_OUT
20048e7c l     O actors_code_section	00000004 decoder_texture_idct2d_IN
20048e80 l     O actors_code_section	00000004 decoder_texture_idct2d_OUT
20048e84 l     O actors_code_section	00000004 decoder_motion_add_TEX
20048e88 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_B
20048e8c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_B
20048e90 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_A
20048e94 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_A
20048e98 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_addressing_C
20048e9c l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_C
20048ea0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_PTR
20048ea4 l     O actors_code_section	00000004 decoder_texture_IAP_PTR
20048ea8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
20048eac l     O actors_code_section	00000004 decoder_texture_IQ_DC
20048eb0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_MODE
20048eb4 l     O actors_code_section	00000004 decoder_texture_IS_AC_PRED_DIR
20048eb8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
20048ebc l     O actors_code_section	00000004 decoder_texture_idct2d_SIGNED
20048ec0 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
20048ec4 l     O actors_code_section	00000004 decoder_texture_IAP_AC_PRED_DIR
20048ec8 l     O actors_code_section	00000004 decoder_texture_DCReconstruction_invpred_QUANT
20048ecc l     O actors_code_section	00000004 decoder_texture_IQ_QP
20048ed0 l     O actors_code_section	00000004 decoder_motion_interpolation_MOT
20048ed4 l     O actors_code_section	00000004 decoder_motion_add_MOT
20048ed8 l     O actors_code_section	00000004 decoder_motion_add_VID
20048edc l     O actors_code_section	00000004 decoder_motion_framebuf_WD
20048ee0 l     O actors_code_section	00000004 decoder_merger_YUV_i
20048ee4 l     O actors_code_section	00000004 decoder_motion_framebuf_RD
20048ee8 l     O actors_code_section	00000004 decoder_motion_interpolation_RD
20048eec l     O actors_code_section	00000004 decoder_motion_framebuf_halfpel
20048ef0 l     O actors_code_section	00000004 decoder_motion_interpolation_halfpel
20062f88 l     O actors_code_section	00000004 index_IN
20062f8c l     O actors_code_section	00000004 numTokens_IN
20062f90 l     O actors_code_section	00000004 index_SIGNED
20062f94 l     O actors_code_section	00000004 numTokens_SIGNED
20062f98 l     O actors_code_section	00000004 index_OUT
20062f9c l     O actors_code_section	00000004 numFree_OUT
2004557c l     O actors_code_section	00000100 scale
20048ef4 l     O actors_code_section	00000001 needInit
2003b07c l     F actors_code_section	00000070 read_IN
2003b0ec l     F actors_code_section	00000038 read_end_IN
2003b124 l     F actors_code_section	00000070 read_SIGNED
2003b194 l     F actors_code_section	00000038 read_end_SIGNED
2003b1cc l     F actors_code_section	00000070 write_OUT
2003b23c l     F actors_code_section	00000038 write_end_OUT
2003b274 l     F actors_code_section	00000048 pmul_1_1
2003b2bc l     F actors_code_section	00000060 pmul_1_2
2003b31c l     F actors_code_section	00000048 pmul_2_1
2003b364 l     F actors_code_section	0000002c pmul_2_2
2003b390 l     F actors_code_section	00000054 pmul_3_1
2003b3e4 l     F actors_code_section	00000050 pmul_3_2
2003b434 l     F actors_code_section	0000006c clip
2003b4a0 l     F actors_code_section	0000042c idct1d
2003b8cc l     F actors_code_section	0000002c isSchedulable_untagged_0
2003b8f8 l     F actors_code_section	000002d8 untagged_0
00000000 l    df *ABS*	00000000 c:/xilinx/sdk/2014.2/gnu/microblaze/nt/bin/../lib/gcc/microblaze-xilinx-elf/4.8.3/bs/m/le/crtbegin.o
00000698 l     O .data	00000000 force_to_data
00000680 l     O .ctors	00000000 __CTOR_LIST__
00000688 l     O .dtors	00000000 __DTOR_LIST__
00000798 l     O .eh_frame	00000000 __EH_FRAME_BEGIN__
0000079c l     O .jcr	00000000 __JCR_LIST__
00000070 l       .text	00000000 deregister_tm_clones
000000b8 l       .text	00000000 register_tm_clones
00000108 l       .text	00000000 __do_global_dtors_aux
000007a0 l     O .bss	00000001 completed.2708
000007a4 l     O .bss	00000004 dtor_idx.2710
000001b0 l       .text	00000000 frame_dummy
000007a8 l     O .bss	00000018 object.2720
00000000 l    df *ABS*	00000000 lib_a-impure.o
000006a0 l     O .data	000000f0 impure_data
00000000 l    df *ABS*	00000000 lib_a-__call_atexit.o
000007c0 l     O .bss	00000004 __atexit_lock
00000000 l    df *ABS*	00000000 c:/xilinx/sdk/2014.2/gnu/microblaze/nt/bin/../lib/gcc/microblaze-xilinx-elf/4.8.3/bs/m/le/crtend.o
00000794 l     O .data	00000000 force_to_data
00000684 l     O .ctors	00000000 __CTOR_END__
00000798 l     O .eh_frame	00000000 __FRAME_END__
0000079c l     O .jcr	00000000 __JCR_END__
000005f0 l       .text	00000000 __do_global_ctors_aux
00000000 l    df *ABS*	00000000 
20011a90 g     F actors_code_section	00000030 decoder_motion_framebuf_initialize
00000680 g       .ctors	00000000 ___CTORS_LIST___
20014b60 g     F actors_code_section	00000028 decoder_motion_interpolation_initialize
20034060 g     F actors_code_section	00000034 decoder_texture_IAP_initialize
20000208 g     F sched_callers_section	00000034 call_decoder_texture_DCReconstruction_addressing_scheduler
000007a0 g       .jcr	00000000 __sbss_start
20000000 g     F sched_callers_section	00000034 call_decoder_merger_scheduler
20036a24 g     F actors_code_section	00000200 decoder_texture_IQ_scheduler
2000a6e4 g     F actors_code_section	00000290 decoder_merger_scheduler
20000034 g     F sched_callers_section	00000034 call_decoder_parser_parseheaders_scheduler
2000d35c g     F actors_code_section	000005bc decoder_motion_add_scheduler
00000798 g     O .eh_frame	00000000 .hidden __TMC_END__
000007a0 g       .jcr	00000000 __sdata_start
0000068c g     O .dtors	00000000 .hidden __DTOR_END__
00000698 g       .rodata	00000000 __rodata_end
00000698 g       .sdata2	00000000 __sbss2_end
0000069c g     O .data	00000000 .hidden __dso_handle
00000208 g     F .text	00000000 _crtinit
2002ac40 g     F actors_code_section	000003dc decoder_texture_DCReconstruction_addressing_scheduler
00000bc8 g       .heap	00000000 _heap_end
2002ac0c g     F actors_code_section	00000034 decoder_texture_DCReconstruction_addressing_initialize
00000694 g     O .rodata	00000004 _global_impure_ptr
000007c4 g       .bss	00000000 __bss_end
000007a0 g       .jcr	00000000 __tbss_start
200174b8 g     F actors_code_section	00000034 decoder_parser_blkexp_initialize
20011ac0 g     F actors_code_section	00000084 decoder_motion_framebuf_outside_FSM_scheduler
20031640 g     F actors_code_section	00000130 decoder_texture_DCsplit_scheduler
20000068 g     F sched_callers_section	00000034 call_decoder_parser_mvseq_scheduler
00000630 g       .init	00000000 __init
000007c8 g       .heap	00000000 _heap_start
20034094 g     F actors_code_section	000002e8 decoder_texture_IAP_scheduler
000007a0 g       .jcr	00000000 __sbss_end
00000000  w      *UND*	00000000 __sf_fake_stderr
00000000  w      *UND*	00000000 __deregister_frame_info
2000023c g     F sched_callers_section	00000034 call_decoder_texture_DCReconstruction_invpred_scheduler
2001b088 g     F actors_code_section	00000df8 decoder_parser_mvrecon_scheduler
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
20031618 g     F actors_code_section	00000028 decoder_texture_DCsplit_initialize
00000680 g       .ctors	00000000 __CTOR_LIST__
20011b44 g     F actors_code_section	00000538 decoder_motion_framebuf_scheduler
00000698 g       .sdata2	00000000 __sbss2_start
20000270 g     F sched_callers_section	00000034 call_decoder_motion_interpolation_scheduler
000003ec g     F .text	00000204 __call_exitprocs
00000000 g     F .vectors.reset	00000000 _start
20014b88 g     F actors_code_section	00000300 decoder_motion_interpolation_scheduler
00000690 g       .rodata	00000000 __rodata_start
2003bbf8 g     F actors_code_section	0000011c decoder_texture_idct2d_scheduler
000007a0 g       *ABS*	00000000 _SDA_BASE_
00000798 g       .data	00000000 __data_end
00000374  w    F .text	00000000 _exception_handler
2000a6b0 g     F actors_code_section	00000034 decoder_merger_initialize
2003bbd0 g     F actors_code_section	00000028 decoder_texture_idct2d_initialize
2000016c g     F sched_callers_section	00000034 call_decoder_texture_IAP_scheduler
2002eb84 g     F actors_code_section	000007d4 decoder_texture_DCReconstruction_invpred_scheduler
20038fdc g     F actors_code_section	0000018c decoder_texture_IS_scheduler
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
00000000  w      *UND*	00000000 __sf_fake_stdin
000007a0 g       .bss	00000000 __bss_start
00000400 g       *ABS*	00000000 _STACK_SIZE
000007a0 g       .jcr	00000000 __tdata_start
000007a0 g       .jcr	00000000 __tdata_end
200174ec g     F actors_code_section	00000250 decoder_parser_blkexp_scheduler
00000294 g     F .text	000000e0 main
00000400 g       *ABS*	00000000 _HEAP_SIZE
200000d0 g     F sched_callers_section	00000034 call_decoder_parser_mvrecon_scheduler
20026548 g     F actors_code_section	0000007c decoder_parser_parseheaders_outside_FSM_scheduler
00000050 g     F .text	00000000 _start1
00000bc8 g       .stack	00000000 _stack_end
2000009c g     F sched_callers_section	00000034 call_decoder_parser_blkexp_scheduler
000007a0 g       .jcr	00000000 __sdata_end
00000698 g       .sdata2	00000000 __sdata2_start
00000688 g       .ctors	00000000 __CTOR_END__
00000688 g       .dtors	00000000 ___DTORS_LIST___
00000688 g       .dtors	00000000 __DTOR_LIST__
20000138 g     F sched_callers_section	00000034 call_decoder_texture_IS_scheduler
2000d32c g     F actors_code_section	00000030 decoder_motion_add_initialize
20000104 g     F sched_callers_section	00000034 call_decoder_texture_DCsplit_scheduler
00000664 g       .fini	00000000 __fini
00000790 g     O .data	00000004 _impure_ptr
200002d8 g     F sched_callers_section	00000034 call_decoder_motion_framebuf_scheduler
00000698 g       .sdata2	00000000 __sdata2_end
00000380 g       .text	00000000 _interrupt_handler
2001b054 g     F actors_code_section	00000034 decoder_parser_mvrecon_initialize
2001f110 g     F actors_code_section	00000034 decoder_parser_mvseq_initialize
00000688 g       .ctors	00000000 ___CTORS_END___
200265c4 g     F actors_code_section	0000154c decoder_parser_parseheaders_scheduler
00000fc8 g       .stack	00000000 __stack
00000fc8 g       .stack	00000000 _end
000007c8 g       .heap	00000000 _heap
20038fb4 g     F actors_code_section	00000028 decoder_texture_IS_initialize
00000398 g     F .text	00000054 exit
200001a0 g     F sched_callers_section	00000034 call_decoder_texture_IQ_scheduler
00000378 g       .text	00000000 _hw_exception_handler
000007a0 g       .jcr	00000000 __tbss_end
00000000  w      *UND*	00000000 __sf_fake_stdout
00000390 g       .text	00000000 _program_init
0000006c g     F .text	00000000 _exit
200369f0 g     F actors_code_section	00000034 decoder_texture_IQ_initialize
00000fc8 g       .stack	00000000 _stack
20026514 g     F actors_code_section	00000034 decoder_parser_parseheaders_initialize
2002eb50 g     F actors_code_section	00000034 decoder_texture_DCReconstruction_invpred_initialize
00000698 g       .data	00000000 __data_start
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00000388 g       .text	00000000 _program_clean
2001f144 g     F actors_code_section	00000464 decoder_parser_mvseq_scheduler
00000698 g       *ABS*	00000000 _SDA2_BASE_
00000000  w      *UND*	00000000 __register_frame_info
200002a4 g     F sched_callers_section	00000034 call_decoder_motion_add_scheduler
200001d4 g     F sched_callers_section	00000034 call_decoder_texture_idct2d_scheduler
00000000  w      *UND*	00000000 free



Disassembly of section .vectors.reset:

00000000 <_start>:
   0:	b8080050 	brai	80	// 50 <_start1>

Disassembly of section .vectors.sw_exception:

00000008 <_vector_sw_exception>:
   8:	b8080374 	brai	884	// 374 <_exception_handler>

Disassembly of section .vectors.interrupt:

00000010 <_vector_interrupt>:
  10:	b8080380 	brai	896	// 380 <_interrupt_handler>

Disassembly of section .vectors.hw_exception:

00000020 <_vector_hw_exception>:
  20:	b8080378 	brai	888	// 378 <_hw_exception_handler>

Disassembly of section sched_callers_section:

20000000 <call_decoder_merger_scheduler>:
// Generated from "fr.irisa.mpeg4.part2.sp.Top_decoder_serial"
void call_decoder_merger_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_merger_scheduler(){
20000000:	3021ffe0 	addik	r1, r1, -32
20000004:	f9e10000 	swi	r15, r1, 0
20000008:	fa61001c 	swi	r19, r1, 28
2000000c:	12610000 	addk	r19, r1, r0
	decoder_merger_scheduler();
20000010:	b0000000 	imm	0
20000014:	b9f4a6d0 	brlid	r15, -22832	// 2000a6e4 <decoder_merger_scheduler>
20000018:	80000000 	or	r0, r0, r0
}
2000001c:	e9e10000 	lwi	r15, r1, 0
20000020:	10330000 	addk	r1, r19, r0
20000024:	ea61001c 	lwi	r19, r1, 28
20000028:	30210020 	addik	r1, r1, 32
2000002c:	b60f0008 	rtsd	r15, 8
20000030:	80000000 	or	r0, r0, r0

20000034 <call_decoder_parser_parseheaders_scheduler>:
void call_decoder_parser_parseheaders_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_parser_parseheaders_scheduler(){
20000034:	3021ffe0 	addik	r1, r1, -32
20000038:	f9e10000 	swi	r15, r1, 0
2000003c:	fa61001c 	swi	r19, r1, 28
20000040:	12610000 	addk	r19, r1, r0
	decoder_parser_parseheaders_scheduler();
20000044:	b0000002 	imm	2
20000048:	b9f4657c 	brlid	r15, 25980	// 200265c4 <decoder_parser_parseheaders_scheduler>
2000004c:	80000000 	or	r0, r0, r0
}
20000050:	e9e10000 	lwi	r15, r1, 0
20000054:	10330000 	addk	r1, r19, r0
20000058:	ea61001c 	lwi	r19, r1, 28
2000005c:	30210020 	addik	r1, r1, 32
20000060:	b60f0008 	rtsd	r15, 8
20000064:	80000000 	or	r0, r0, r0

20000068 <call_decoder_parser_mvseq_scheduler>:
void call_decoder_parser_mvseq_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_parser_mvseq_scheduler(){
20000068:	3021ffe0 	addik	r1, r1, -32
2000006c:	f9e10000 	swi	r15, r1, 0
20000070:	fa61001c 	swi	r19, r1, 28
20000074:	12610000 	addk	r19, r1, r0
	decoder_parser_mvseq_scheduler();
20000078:	b0000001 	imm	1
2000007c:	b9f4f0c8 	brlid	r15, -3896	// 2001f144 <decoder_parser_mvseq_scheduler>
20000080:	80000000 	or	r0, r0, r0
}
20000084:	e9e10000 	lwi	r15, r1, 0
20000088:	10330000 	addk	r1, r19, r0
2000008c:	ea61001c 	lwi	r19, r1, 28
20000090:	30210020 	addik	r1, r1, 32
20000094:	b60f0008 	rtsd	r15, 8
20000098:	80000000 	or	r0, r0, r0

2000009c <call_decoder_parser_blkexp_scheduler>:
void call_decoder_parser_blkexp_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_parser_blkexp_scheduler(){
2000009c:	3021ffe0 	addik	r1, r1, -32
200000a0:	f9e10000 	swi	r15, r1, 0
200000a4:	fa61001c 	swi	r19, r1, 28
200000a8:	12610000 	addk	r19, r1, r0
	decoder_parser_blkexp_scheduler();
200000ac:	b0000001 	imm	1
200000b0:	b9f4743c 	brlid	r15, 29756	// 200174ec <decoder_parser_blkexp_scheduler>
200000b4:	80000000 	or	r0, r0, r0
}
200000b8:	e9e10000 	lwi	r15, r1, 0
200000bc:	10330000 	addk	r1, r19, r0
200000c0:	ea61001c 	lwi	r19, r1, 28
200000c4:	30210020 	addik	r1, r1, 32
200000c8:	b60f0008 	rtsd	r15, 8
200000cc:	80000000 	or	r0, r0, r0

200000d0 <call_decoder_parser_mvrecon_scheduler>:
void call_decoder_parser_mvrecon_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_parser_mvrecon_scheduler(){
200000d0:	3021ffe0 	addik	r1, r1, -32
200000d4:	f9e10000 	swi	r15, r1, 0
200000d8:	fa61001c 	swi	r19, r1, 28
200000dc:	12610000 	addk	r19, r1, r0
	decoder_parser_mvrecon_scheduler();
200000e0:	b0000001 	imm	1
200000e4:	b9f4afa4 	brlid	r15, -20572	// 2001b088 <decoder_parser_mvrecon_scheduler>
200000e8:	80000000 	or	r0, r0, r0
}
200000ec:	e9e10000 	lwi	r15, r1, 0
200000f0:	10330000 	addk	r1, r19, r0
200000f4:	ea61001c 	lwi	r19, r1, 28
200000f8:	30210020 	addik	r1, r1, 32
200000fc:	b60f0008 	rtsd	r15, 8
20000100:	80000000 	or	r0, r0, r0

20000104 <call_decoder_texture_DCsplit_scheduler>:
void call_decoder_texture_DCsplit_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_texture_DCsplit_scheduler(){
20000104:	3021ffe0 	addik	r1, r1, -32
20000108:	f9e10000 	swi	r15, r1, 0
2000010c:	fa61001c 	swi	r19, r1, 28
20000110:	12610000 	addk	r19, r1, r0
	decoder_texture_DCsplit_scheduler();
20000114:	b0000003 	imm	3
20000118:	b9f41528 	brlid	r15, 5416	// 20031640 <decoder_texture_DCsplit_scheduler>
2000011c:	80000000 	or	r0, r0, r0
}
20000120:	e9e10000 	lwi	r15, r1, 0
20000124:	10330000 	addk	r1, r19, r0
20000128:	ea61001c 	lwi	r19, r1, 28
2000012c:	30210020 	addik	r1, r1, 32
20000130:	b60f0008 	rtsd	r15, 8
20000134:	80000000 	or	r0, r0, r0

20000138 <call_decoder_texture_IS_scheduler>:
void call_decoder_texture_IS_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_texture_IS_scheduler(){
20000138:	3021ffe0 	addik	r1, r1, -32
2000013c:	f9e10000 	swi	r15, r1, 0
20000140:	fa61001c 	swi	r19, r1, 28
20000144:	12610000 	addk	r19, r1, r0
	decoder_texture_IS_scheduler();
20000148:	b0000003 	imm	3
2000014c:	b9f48e90 	brlid	r15, -29040	// 20038fdc <decoder_texture_IS_scheduler>
20000150:	80000000 	or	r0, r0, r0
}
20000154:	e9e10000 	lwi	r15, r1, 0
20000158:	10330000 	addk	r1, r19, r0
2000015c:	ea61001c 	lwi	r19, r1, 28
20000160:	30210020 	addik	r1, r1, 32
20000164:	b60f0008 	rtsd	r15, 8
20000168:	80000000 	or	r0, r0, r0

2000016c <call_decoder_texture_IAP_scheduler>:
void call_decoder_texture_IAP_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_texture_IAP_scheduler(){
2000016c:	3021ffe0 	addik	r1, r1, -32
20000170:	f9e10000 	swi	r15, r1, 0
20000174:	fa61001c 	swi	r19, r1, 28
20000178:	12610000 	addk	r19, r1, r0
	decoder_texture_IAP_scheduler();
2000017c:	b0000003 	imm	3
20000180:	b9f43f14 	brlid	r15, 16148	// 20034094 <decoder_texture_IAP_scheduler>
20000184:	80000000 	or	r0, r0, r0
}
20000188:	e9e10000 	lwi	r15, r1, 0
2000018c:	10330000 	addk	r1, r19, r0
20000190:	ea61001c 	lwi	r19, r1, 28
20000194:	30210020 	addik	r1, r1, 32
20000198:	b60f0008 	rtsd	r15, 8
2000019c:	80000000 	or	r0, r0, r0

200001a0 <call_decoder_texture_IQ_scheduler>:
void call_decoder_texture_IQ_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_texture_IQ_scheduler(){
200001a0:	3021ffe0 	addik	r1, r1, -32
200001a4:	f9e10000 	swi	r15, r1, 0
200001a8:	fa61001c 	swi	r19, r1, 28
200001ac:	12610000 	addk	r19, r1, r0
	decoder_texture_IQ_scheduler();
200001b0:	b0000003 	imm	3
200001b4:	b9f46870 	brlid	r15, 26736	// 20036a24 <decoder_texture_IQ_scheduler>
200001b8:	80000000 	or	r0, r0, r0
}
200001bc:	e9e10000 	lwi	r15, r1, 0
200001c0:	10330000 	addk	r1, r19, r0
200001c4:	ea61001c 	lwi	r19, r1, 28
200001c8:	30210020 	addik	r1, r1, 32
200001cc:	b60f0008 	rtsd	r15, 8
200001d0:	80000000 	or	r0, r0, r0

200001d4 <call_decoder_texture_idct2d_scheduler>:
void call_decoder_texture_idct2d_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_texture_idct2d_scheduler(){
200001d4:	3021ffe0 	addik	r1, r1, -32
200001d8:	f9e10000 	swi	r15, r1, 0
200001dc:	fa61001c 	swi	r19, r1, 28
200001e0:	12610000 	addk	r19, r1, r0
	decoder_texture_idct2d_scheduler();
200001e4:	b0000003 	imm	3
200001e8:	b9f4ba10 	brlid	r15, -17904	// 2003bbf8 <decoder_texture_idct2d_scheduler>
200001ec:	80000000 	or	r0, r0, r0
}
200001f0:	e9e10000 	lwi	r15, r1, 0
200001f4:	10330000 	addk	r1, r19, r0
200001f8:	ea61001c 	lwi	r19, r1, 28
200001fc:	30210020 	addik	r1, r1, 32
20000200:	b60f0008 	rtsd	r15, 8
20000204:	80000000 	or	r0, r0, r0

20000208 <call_decoder_texture_DCReconstruction_addressing_scheduler>:
void call_decoder_texture_DCReconstruction_addressing_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_texture_DCReconstruction_addressing_scheduler(){
20000208:	3021ffe0 	addik	r1, r1, -32
2000020c:	f9e10000 	swi	r15, r1, 0
20000210:	fa61001c 	swi	r19, r1, 28
20000214:	12610000 	addk	r19, r1, r0
	decoder_texture_DCReconstruction_addressing_scheduler();
20000218:	b0000002 	imm	2
2000021c:	b9f4aa24 	brlid	r15, -21980	// 2002ac40 <decoder_texture_DCReconstruction_addressing_scheduler>
20000220:	80000000 	or	r0, r0, r0
}
20000224:	e9e10000 	lwi	r15, r1, 0
20000228:	10330000 	addk	r1, r19, r0
2000022c:	ea61001c 	lwi	r19, r1, 28
20000230:	30210020 	addik	r1, r1, 32
20000234:	b60f0008 	rtsd	r15, 8
20000238:	80000000 	or	r0, r0, r0

2000023c <call_decoder_texture_DCReconstruction_invpred_scheduler>:
void call_decoder_texture_DCReconstruction_invpred_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_texture_DCReconstruction_invpred_scheduler(){
2000023c:	3021ffe0 	addik	r1, r1, -32
20000240:	f9e10000 	swi	r15, r1, 0
20000244:	fa61001c 	swi	r19, r1, 28
20000248:	12610000 	addk	r19, r1, r0
	decoder_texture_DCReconstruction_invpred_scheduler();
2000024c:	b0000002 	imm	2
20000250:	b9f4e934 	brlid	r15, -5836	// 2002eb84 <decoder_texture_DCReconstruction_invpred_scheduler>
20000254:	80000000 	or	r0, r0, r0
}
20000258:	e9e10000 	lwi	r15, r1, 0
2000025c:	10330000 	addk	r1, r19, r0
20000260:	ea61001c 	lwi	r19, r1, 28
20000264:	30210020 	addik	r1, r1, 32
20000268:	b60f0008 	rtsd	r15, 8
2000026c:	80000000 	or	r0, r0, r0

20000270 <call_decoder_motion_interpolation_scheduler>:
void call_decoder_motion_interpolation_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_motion_interpolation_scheduler(){
20000270:	3021ffe0 	addik	r1, r1, -32
20000274:	f9e10000 	swi	r15, r1, 0
20000278:	fa61001c 	swi	r19, r1, 28
2000027c:	12610000 	addk	r19, r1, r0
	decoder_motion_interpolation_scheduler();
20000280:	b0000001 	imm	1
20000284:	b9f44904 	brlid	r15, 18692	// 20014b88 <decoder_motion_interpolation_scheduler>
20000288:	80000000 	or	r0, r0, r0
}
2000028c:	e9e10000 	lwi	r15, r1, 0
20000290:	10330000 	addk	r1, r19, r0
20000294:	ea61001c 	lwi	r19, r1, 28
20000298:	30210020 	addik	r1, r1, 32
2000029c:	b60f0008 	rtsd	r15, 8
200002a0:	80000000 	or	r0, r0, r0

200002a4 <call_decoder_motion_add_scheduler>:
void call_decoder_motion_add_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_motion_add_scheduler(){
200002a4:	3021ffe0 	addik	r1, r1, -32
200002a8:	f9e10000 	swi	r15, r1, 0
200002ac:	fa61001c 	swi	r19, r1, 28
200002b0:	12610000 	addk	r19, r1, r0
	decoder_motion_add_scheduler();
200002b4:	b0000000 	imm	0
200002b8:	b9f4d0a4 	brlid	r15, -12124	// 2000d35c <decoder_motion_add_scheduler>
200002bc:	80000000 	or	r0, r0, r0
}
200002c0:	e9e10000 	lwi	r15, r1, 0
200002c4:	10330000 	addk	r1, r19, r0
200002c8:	ea61001c 	lwi	r19, r1, 28
200002cc:	30210020 	addik	r1, r1, 32
200002d0:	b60f0008 	rtsd	r15, 8
200002d4:	80000000 	or	r0, r0, r0

200002d8 <call_decoder_motion_framebuf_scheduler>:
void call_decoder_motion_framebuf_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_motion_framebuf_scheduler(){
200002d8:	3021ffe0 	addik	r1, r1, -32
200002dc:	f9e10000 	swi	r15, r1, 0
200002e0:	fa61001c 	swi	r19, r1, 28
200002e4:	12610000 	addk	r19, r1, r0
	decoder_motion_framebuf_scheduler();
200002e8:	b0000001 	imm	1
200002ec:	b9f41858 	brlid	r15, 6232	// 20011b44 <decoder_motion_framebuf_scheduler>
200002f0:	80000000 	or	r0, r0, r0
}
200002f4:	e9e10000 	lwi	r15, r1, 0
200002f8:	10330000 	addk	r1, r19, r0
200002fc:	ea61001c 	lwi	r19, r1, 28
20000300:	30210020 	addik	r1, r1, 32
20000304:	b60f0008 	rtsd	r15, 8
20000308:	80000000 	or	r0, r0, r0

Disassembly of section actors_code_section:

20008000 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20008000:	3021fff8 	addik	r1, r1, -8
20008004:	fa610004 	swi	r19, r1, 4
20008008:	12610000 	addk	r19, r1, r0
2000800c:	f8b3000c 	swi	r5, r19, 12
20008010:	f8d30010 	swi	r6, r19, 16
20008014:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20008018:	e873000c 	lwi	r3, r19, 12
2000801c:	e8630010 	lwi	r3, r3, 16
20008020:	e8830000 	lwi	r4, r3, 0
20008024:	e873000c 	lwi	r3, r19, 12
20008028:	e8a3000c 	lwi	r5, r3, 12
2000802c:	e8730010 	lwi	r3, r19, 16
20008030:	64630402 	bslli	r3, r3, 2
20008034:	10651800 	addk	r3, r5, r3
20008038:	e8630000 	lwi	r3, r3, 0
2000803c:	14a32000 	rsubk	r5, r3, r4
20008040:	30600001 	addik	r3, r0, 1
20008044:	e8930014 	lwi	r4, r19, 20
20008048:	16442803 	cmpu	r18, r4, r5
2000804c:	bcb20008 	bgei	r18, 8		// 20008054
20008050:	10600000 	addk	r3, r0, r0
20008054:	a46300ff 	andi	r3, r3, 255
}
20008058:	10330000 	addk	r1, r19, r0
2000805c:	ea610004 	lwi	r19, r1, 4
20008060:	30210008 	addik	r1, r1, 8
20008064:	b60f0008 	rtsd	r15, 8
20008068:	80000000 	or	r0, r0, r0

2000806c <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000806c:	3021fff8 	addik	r1, r1, -8
20008070:	fa610004 	swi	r19, r1, 4
20008074:	12610000 	addk	r19, r1, r0
20008078:	f8b3000c 	swi	r5, r19, 12
2000807c:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20008080:	e873000c 	lwi	r3, r19, 12
20008084:	e8630010 	lwi	r3, r3, 16
20008088:	e8830000 	lwi	r4, r3, 0
2000808c:	e873000c 	lwi	r3, r19, 12
20008090:	e8a3000c 	lwi	r5, r3, 12
20008094:	e8730010 	lwi	r3, r19, 16
20008098:	64630402 	bslli	r3, r3, 2
2000809c:	10651800 	addk	r3, r5, r3
200080a0:	e8630000 	lwi	r3, r3, 0
200080a4:	14632000 	rsubk	r3, r3, r4
}
200080a8:	10330000 	addk	r1, r19, r0
200080ac:	ea610004 	lwi	r19, r1, 4
200080b0:	30210008 	addik	r1, r1, 8
200080b4:	b60f0008 	rtsd	r15, 8
200080b8:	80000000 	or	r0, r0, r0

200080bc <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200080bc:	3021fff4 	addik	r1, r1, -12
200080c0:	fa610008 	swi	r19, r1, 8
200080c4:	12610000 	addk	r19, r1, r0
200080c8:	f8b30010 	swi	r5, r19, 16
200080cc:	f8d30014 	swi	r6, r19, 20
200080d0:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200080d4:	f8130004 	swi	r0, r19, 4
200080d8:	b800005c 	bri	92		// 20008134
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200080dc:	e8730010 	lwi	r3, r19, 16
200080e0:	e8830000 	lwi	r4, r3, 0
200080e4:	e8730010 	lwi	r3, r19, 16
200080e8:	e8a3000c 	lwi	r5, r3, 12
200080ec:	e8730004 	lwi	r3, r19, 4
200080f0:	64630402 	bslli	r3, r3, 2
200080f4:	10651800 	addk	r3, r5, r3
200080f8:	e8a30000 	lwi	r5, r3, 0
200080fc:	e8730010 	lwi	r3, r19, 16
20008100:	e8630010 	lwi	r3, r3, 16
20008104:	e8630000 	lwi	r3, r3, 0
20008108:	14632800 	rsubk	r3, r3, r5
2000810c:	10641800 	addk	r3, r4, r3
20008110:	30830001 	addik	r4, r3, 1
20008114:	e8730018 	lwi	r3, r19, 24
20008118:	16441803 	cmpu	r18, r4, r3
2000811c:	bc52000c 	blti	r18, 12		// 20008128
            return 0;
20008120:	10600000 	addk	r3, r0, r0
20008124:	b8000024 	bri	36		// 20008148
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20008128:	e8730004 	lwi	r3, r19, 4
2000812c:	30630001 	addik	r3, r3, 1
20008130:	f8730004 	swi	r3, r19, 4
20008134:	e8930004 	lwi	r4, r19, 4
20008138:	e8730014 	lwi	r3, r19, 20
2000813c:	16432003 	cmpu	r18, r3, r4
20008140:	bc52ff9c 	blti	r18, -100		// 200080dc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20008144:	30600001 	addik	r3, r0, 1
}
20008148:	10330000 	addk	r1, r19, r0
2000814c:	ea610008 	lwi	r19, r1, 8
20008150:	3021000c 	addik	r1, r1, 12
20008154:	b60f0008 	rtsd	r15, 8
20008158:	80000000 	or	r0, r0, r0

2000815c <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000815c:	3021ffec 	addik	r1, r1, -20
20008160:	fa610010 	swi	r19, r1, 16
20008164:	12610000 	addk	r19, r1, r0
20008168:	f8b30018 	swi	r5, r19, 24
2000816c:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20008170:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20008174:	f8130004 	swi	r0, r19, 4
20008178:	b8000054 	bri	84		// 200081cc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000817c:	e8730018 	lwi	r3, r19, 24
20008180:	e8630010 	lwi	r3, r3, 16
20008184:	e8830000 	lwi	r4, r3, 0
20008188:	e8730018 	lwi	r3, r19, 24
2000818c:	e8a3000c 	lwi	r5, r3, 12
20008190:	e8730004 	lwi	r3, r19, 4
20008194:	64630402 	bslli	r3, r3, 2
20008198:	10651800 	addk	r3, r5, r3
2000819c:	e8630000 	lwi	r3, r3, 0
200081a0:	14632000 	rsubk	r3, r3, r4
200081a4:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200081a8:	e8930008 	lwi	r4, r19, 8
200081ac:	e873000c 	lwi	r3, r19, 12
200081b0:	16441803 	cmpu	r18, r4, r3
200081b4:	bcb20008 	bgei	r18, 8		// 200081bc
200081b8:	10640000 	addk	r3, r4, r0
200081bc:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200081c0:	e8730004 	lwi	r3, r19, 4
200081c4:	30630001 	addik	r3, r3, 1
200081c8:	f8730004 	swi	r3, r19, 4
200081cc:	e8930004 	lwi	r4, r19, 4
200081d0:	e873001c 	lwi	r3, r19, 28
200081d4:	16432003 	cmpu	r18, r3, r4
200081d8:	bc52ffa4 	blti	r18, -92		// 2000817c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200081dc:	e8730018 	lwi	r3, r19, 24
200081e0:	e8830000 	lwi	r4, r3, 0
200081e4:	e8730008 	lwi	r3, r19, 8
200081e8:	14632000 	rsubk	r3, r3, r4
}
200081ec:	10330000 	addk	r1, r19, r0
200081f0:	ea610010 	lwi	r19, r1, 16
200081f4:	30210014 	addik	r1, r1, 20
200081f8:	b60f0008 	rtsd	r15, 8
200081fc:	80000000 	or	r0, r0, r0

20008200 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20008200:	3021fff4 	addik	r1, r1, -12
20008204:	fa610008 	swi	r19, r1, 8
20008208:	12610000 	addk	r19, r1, r0
2000820c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20008210:	e8730010 	lwi	r3, r19, 16
20008214:	e8630010 	lwi	r3, r3, 16
20008218:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000821c:	f8130004 	swi	r0, r19, 4
20008220:	b8000028 	bri	40		// 20008248
        fifo->read_inds[i] = 0;
20008224:	e8730010 	lwi	r3, r19, 16
20008228:	e883000c 	lwi	r4, r3, 12
2000822c:	e8730004 	lwi	r3, r19, 4
20008230:	64630402 	bslli	r3, r3, 2
20008234:	10641800 	addk	r3, r4, r3
20008238:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000823c:	e8730004 	lwi	r3, r19, 4
20008240:	30630001 	addik	r3, r3, 1
20008244:	f8730004 	swi	r3, r19, 4
20008248:	e8730010 	lwi	r3, r19, 16
2000824c:	e8830008 	lwi	r4, r3, 8
20008250:	e8730004 	lwi	r3, r19, 4
20008254:	16441803 	cmpu	r18, r4, r3
20008258:	bc52ffcc 	blti	r18, -52		// 20008224
        fifo->read_inds[i] = 0;
    }
}
2000825c:	10330000 	addk	r1, r19, r0
20008260:	ea610008 	lwi	r19, r1, 8
20008264:	3021000c 	addik	r1, r1, 12
20008268:	b60f0008 	rtsd	r15, 8
2000826c:	80000000 	or	r0, r0, r0

20008270 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20008270:	3021fff4 	addik	r1, r1, -12
20008274:	fa610008 	swi	r19, r1, 8
20008278:	12610000 	addk	r19, r1, r0
2000827c:	f8b30010 	swi	r5, r19, 16
20008280:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20008284:	e8730010 	lwi	r3, r19, 16
20008288:	e8830004 	lwi	r4, r3, 4
2000828c:	e8730010 	lwi	r3, r19, 16
20008290:	e8a3000c 	lwi	r5, r3, 12
20008294:	e8730014 	lwi	r3, r19, 20
20008298:	64630402 	bslli	r3, r3, 2
2000829c:	10651800 	addk	r3, r5, r3
200082a0:	e8a30000 	lwi	r5, r3, 0
200082a4:	e8730010 	lwi	r3, r19, 16
200082a8:	e8630000 	lwi	r3, r3, 0
200082ac:	3063ffff 	addik	r3, r3, -1
200082b0:	84651800 	and	r3, r5, r3
200082b4:	10641800 	addk	r3, r4, r3
200082b8:	e0630000 	lbui	r3, r3, 0
200082bc:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200082c0:	e8730010 	lwi	r3, r19, 16
200082c4:	e883000c 	lwi	r4, r3, 12
200082c8:	e8730014 	lwi	r3, r19, 20
200082cc:	64630402 	bslli	r3, r3, 2
200082d0:	10641800 	addk	r3, r4, r3
200082d4:	e8830000 	lwi	r4, r3, 0
200082d8:	30840001 	addik	r4, r4, 1
200082dc:	f8830000 	swi	r4, r3, 0
    return value;
200082e0:	e0730004 	lbui	r3, r19, 4
200082e4:	90630060 	sext8	r3, r3
}
200082e8:	10330000 	addk	r1, r19, r0
200082ec:	ea610008 	lwi	r19, r1, 8
200082f0:	3021000c 	addik	r1, r1, 12
200082f4:	b60f0008 	rtsd	r15, 8
200082f8:	80000000 	or	r0, r0, r0

200082fc <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200082fc:	3021fff8 	addik	r1, r1, -8
20008300:	fa610004 	swi	r19, r1, 4
20008304:	12610000 	addk	r19, r1, r0
20008308:	f8b3000c 	swi	r5, r19, 12
2000830c:	10660000 	addk	r3, r6, r0
20008310:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20008314:	e873000c 	lwi	r3, r19, 12
20008318:	e8830004 	lwi	r4, r3, 4
2000831c:	e873000c 	lwi	r3, r19, 12
20008320:	e8630010 	lwi	r3, r3, 16
20008324:	e8a30000 	lwi	r5, r3, 0
20008328:	e873000c 	lwi	r3, r19, 12
2000832c:	e8630000 	lwi	r3, r3, 0
20008330:	3063ffff 	addik	r3, r3, -1
20008334:	84651800 	and	r3, r5, r3
20008338:	10641800 	addk	r3, r4, r3
2000833c:	e0930010 	lbui	r4, r19, 16
20008340:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20008344:	e873000c 	lwi	r3, r19, 12
20008348:	e8630010 	lwi	r3, r3, 16
2000834c:	e8830000 	lwi	r4, r3, 0
20008350:	30840001 	addik	r4, r4, 1
20008354:	f8830000 	swi	r4, r3, 0
}
20008358:	10330000 	addk	r1, r19, r0
2000835c:	ea610004 	lwi	r19, r1, 4
20008360:	30210008 	addik	r1, r1, 8
20008364:	b60f0008 	rtsd	r15, 8
20008368:	80000000 	or	r0, r0, r0

2000836c <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000836c:	3021fff8 	addik	r1, r1, -8
20008370:	fa610004 	swi	r19, r1, 4
20008374:	12610000 	addk	r19, r1, r0
20008378:	f8b3000c 	swi	r5, r19, 12
2000837c:	f8d30010 	swi	r6, r19, 16
20008380:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20008384:	e873000c 	lwi	r3, r19, 12
20008388:	e8630010 	lwi	r3, r3, 16
2000838c:	e8830000 	lwi	r4, r3, 0
20008390:	e873000c 	lwi	r3, r19, 12
20008394:	e8a3000c 	lwi	r5, r3, 12
20008398:	e8730010 	lwi	r3, r19, 16
2000839c:	64630402 	bslli	r3, r3, 2
200083a0:	10651800 	addk	r3, r5, r3
200083a4:	e8630000 	lwi	r3, r3, 0
200083a8:	14a32000 	rsubk	r5, r3, r4
200083ac:	30600001 	addik	r3, r0, 1
200083b0:	e8930014 	lwi	r4, r19, 20
200083b4:	16442803 	cmpu	r18, r4, r5
200083b8:	bcb20008 	bgei	r18, 8		// 200083c0
200083bc:	10600000 	addk	r3, r0, r0
200083c0:	a46300ff 	andi	r3, r3, 255
}
200083c4:	10330000 	addk	r1, r19, r0
200083c8:	ea610004 	lwi	r19, r1, 4
200083cc:	30210008 	addik	r1, r1, 8
200083d0:	b60f0008 	rtsd	r15, 8
200083d4:	80000000 	or	r0, r0, r0

200083d8 <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200083d8:	3021fff8 	addik	r1, r1, -8
200083dc:	fa610004 	swi	r19, r1, 4
200083e0:	12610000 	addk	r19, r1, r0
200083e4:	f8b3000c 	swi	r5, r19, 12
200083e8:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200083ec:	e873000c 	lwi	r3, r19, 12
200083f0:	e8630010 	lwi	r3, r3, 16
200083f4:	e8830000 	lwi	r4, r3, 0
200083f8:	e873000c 	lwi	r3, r19, 12
200083fc:	e8a3000c 	lwi	r5, r3, 12
20008400:	e8730010 	lwi	r3, r19, 16
20008404:	64630402 	bslli	r3, r3, 2
20008408:	10651800 	addk	r3, r5, r3
2000840c:	e8630000 	lwi	r3, r3, 0
20008410:	14632000 	rsubk	r3, r3, r4
}
20008414:	10330000 	addk	r1, r19, r0
20008418:	ea610004 	lwi	r19, r1, 4
2000841c:	30210008 	addik	r1, r1, 8
20008420:	b60f0008 	rtsd	r15, 8
20008424:	80000000 	or	r0, r0, r0

20008428 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20008428:	3021fff4 	addik	r1, r1, -12
2000842c:	fa610008 	swi	r19, r1, 8
20008430:	12610000 	addk	r19, r1, r0
20008434:	f8b30010 	swi	r5, r19, 16
20008438:	f8d30014 	swi	r6, r19, 20
2000843c:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20008440:	f8130004 	swi	r0, r19, 4
20008444:	b800005c 	bri	92		// 200084a0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20008448:	e8730010 	lwi	r3, r19, 16
2000844c:	e8830000 	lwi	r4, r3, 0
20008450:	e8730010 	lwi	r3, r19, 16
20008454:	e8a3000c 	lwi	r5, r3, 12
20008458:	e8730004 	lwi	r3, r19, 4
2000845c:	64630402 	bslli	r3, r3, 2
20008460:	10651800 	addk	r3, r5, r3
20008464:	e8a30000 	lwi	r5, r3, 0
20008468:	e8730010 	lwi	r3, r19, 16
2000846c:	e8630010 	lwi	r3, r3, 16
20008470:	e8630000 	lwi	r3, r3, 0
20008474:	14632800 	rsubk	r3, r3, r5
20008478:	10641800 	addk	r3, r4, r3
2000847c:	30830001 	addik	r4, r3, 1
20008480:	e8730018 	lwi	r3, r19, 24
20008484:	16441803 	cmpu	r18, r4, r3
20008488:	bc52000c 	blti	r18, 12		// 20008494
            return 0;
2000848c:	10600000 	addk	r3, r0, r0
20008490:	b8000024 	bri	36		// 200084b4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20008494:	e8730004 	lwi	r3, r19, 4
20008498:	30630001 	addik	r3, r3, 1
2000849c:	f8730004 	swi	r3, r19, 4
200084a0:	e8930004 	lwi	r4, r19, 4
200084a4:	e8730014 	lwi	r3, r19, 20
200084a8:	16432003 	cmpu	r18, r3, r4
200084ac:	bc52ff9c 	blti	r18, -100		// 20008448
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200084b0:	30600001 	addik	r3, r0, 1
}
200084b4:	10330000 	addk	r1, r19, r0
200084b8:	ea610008 	lwi	r19, r1, 8
200084bc:	3021000c 	addik	r1, r1, 12
200084c0:	b60f0008 	rtsd	r15, 8
200084c4:	80000000 	or	r0, r0, r0

200084c8 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200084c8:	3021ffec 	addik	r1, r1, -20
200084cc:	fa610010 	swi	r19, r1, 16
200084d0:	12610000 	addk	r19, r1, r0
200084d4:	f8b30018 	swi	r5, r19, 24
200084d8:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200084dc:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200084e0:	f8130004 	swi	r0, r19, 4
200084e4:	b8000054 	bri	84		// 20008538
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200084e8:	e8730018 	lwi	r3, r19, 24
200084ec:	e8630010 	lwi	r3, r3, 16
200084f0:	e8830000 	lwi	r4, r3, 0
200084f4:	e8730018 	lwi	r3, r19, 24
200084f8:	e8a3000c 	lwi	r5, r3, 12
200084fc:	e8730004 	lwi	r3, r19, 4
20008500:	64630402 	bslli	r3, r3, 2
20008504:	10651800 	addk	r3, r5, r3
20008508:	e8630000 	lwi	r3, r3, 0
2000850c:	14632000 	rsubk	r3, r3, r4
20008510:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20008514:	e8930008 	lwi	r4, r19, 8
20008518:	e873000c 	lwi	r3, r19, 12
2000851c:	16441803 	cmpu	r18, r4, r3
20008520:	bcb20008 	bgei	r18, 8		// 20008528
20008524:	10640000 	addk	r3, r4, r0
20008528:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000852c:	e8730004 	lwi	r3, r19, 4
20008530:	30630001 	addik	r3, r3, 1
20008534:	f8730004 	swi	r3, r19, 4
20008538:	e8930004 	lwi	r4, r19, 4
2000853c:	e873001c 	lwi	r3, r19, 28
20008540:	16432003 	cmpu	r18, r3, r4
20008544:	bc52ffa4 	blti	r18, -92		// 200084e8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20008548:	e8730018 	lwi	r3, r19, 24
2000854c:	e8830000 	lwi	r4, r3, 0
20008550:	e8730008 	lwi	r3, r19, 8
20008554:	14632000 	rsubk	r3, r3, r4
}
20008558:	10330000 	addk	r1, r19, r0
2000855c:	ea610010 	lwi	r19, r1, 16
20008560:	30210014 	addik	r1, r1, 20
20008564:	b60f0008 	rtsd	r15, 8
20008568:	80000000 	or	r0, r0, r0

2000856c <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000856c:	3021fff4 	addik	r1, r1, -12
20008570:	fa610008 	swi	r19, r1, 8
20008574:	12610000 	addk	r19, r1, r0
20008578:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2000857c:	e8730010 	lwi	r3, r19, 16
20008580:	e8630010 	lwi	r3, r3, 16
20008584:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20008588:	f8130004 	swi	r0, r19, 4
2000858c:	b8000028 	bri	40		// 200085b4
        fifo->read_inds[i] = 0;
20008590:	e8730010 	lwi	r3, r19, 16
20008594:	e883000c 	lwi	r4, r3, 12
20008598:	e8730004 	lwi	r3, r19, 4
2000859c:	64630402 	bslli	r3, r3, 2
200085a0:	10641800 	addk	r3, r4, r3
200085a4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200085a8:	e8730004 	lwi	r3, r19, 4
200085ac:	30630001 	addik	r3, r3, 1
200085b0:	f8730004 	swi	r3, r19, 4
200085b4:	e8730010 	lwi	r3, r19, 16
200085b8:	e8830008 	lwi	r4, r3, 8
200085bc:	e8730004 	lwi	r3, r19, 4
200085c0:	16441803 	cmpu	r18, r4, r3
200085c4:	bc52ffcc 	blti	r18, -52		// 20008590
        fifo->read_inds[i] = 0;
    }
}
200085c8:	10330000 	addk	r1, r19, r0
200085cc:	ea610008 	lwi	r19, r1, 8
200085d0:	3021000c 	addik	r1, r1, 12
200085d4:	b60f0008 	rtsd	r15, 8
200085d8:	80000000 	or	r0, r0, r0

200085dc <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200085dc:	3021fff4 	addik	r1, r1, -12
200085e0:	fa610008 	swi	r19, r1, 8
200085e4:	12610000 	addk	r19, r1, r0
200085e8:	f8b30010 	swi	r5, r19, 16
200085ec:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200085f0:	e8730010 	lwi	r3, r19, 16
200085f4:	e8830004 	lwi	r4, r3, 4
200085f8:	e8730010 	lwi	r3, r19, 16
200085fc:	e8a3000c 	lwi	r5, r3, 12
20008600:	e8730014 	lwi	r3, r19, 20
20008604:	64630402 	bslli	r3, r3, 2
20008608:	10651800 	addk	r3, r5, r3
2000860c:	e8a30000 	lwi	r5, r3, 0
20008610:	e8730010 	lwi	r3, r19, 16
20008614:	e8630000 	lwi	r3, r3, 0
20008618:	3063ffff 	addik	r3, r3, -1
2000861c:	84651800 	and	r3, r5, r3
20008620:	10631800 	addk	r3, r3, r3
20008624:	10641800 	addk	r3, r4, r3
20008628:	e4630000 	lhui	r3, r3, 0
2000862c:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20008630:	e8730010 	lwi	r3, r19, 16
20008634:	e883000c 	lwi	r4, r3, 12
20008638:	e8730014 	lwi	r3, r19, 20
2000863c:	64630402 	bslli	r3, r3, 2
20008640:	10641800 	addk	r3, r4, r3
20008644:	e8830000 	lwi	r4, r3, 0
20008648:	30840001 	addik	r4, r4, 1
2000864c:	f8830000 	swi	r4, r3, 0
    return value;
20008650:	e4730004 	lhui	r3, r19, 4
20008654:	90630061 	sext16	r3, r3
}
20008658:	10330000 	addk	r1, r19, r0
2000865c:	ea610008 	lwi	r19, r1, 8
20008660:	3021000c 	addik	r1, r1, 12
20008664:	b60f0008 	rtsd	r15, 8
20008668:	80000000 	or	r0, r0, r0

2000866c <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000866c:	3021fff8 	addik	r1, r1, -8
20008670:	fa610004 	swi	r19, r1, 4
20008674:	12610000 	addk	r19, r1, r0
20008678:	f8b3000c 	swi	r5, r19, 12
2000867c:	10660000 	addk	r3, r6, r0
20008680:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20008684:	e873000c 	lwi	r3, r19, 12
20008688:	e8830004 	lwi	r4, r3, 4
2000868c:	e873000c 	lwi	r3, r19, 12
20008690:	e8630010 	lwi	r3, r3, 16
20008694:	e8a30000 	lwi	r5, r3, 0
20008698:	e873000c 	lwi	r3, r19, 12
2000869c:	e8630000 	lwi	r3, r3, 0
200086a0:	3063ffff 	addik	r3, r3, -1
200086a4:	84651800 	and	r3, r5, r3
200086a8:	10631800 	addk	r3, r3, r3
200086ac:	10641800 	addk	r3, r4, r3
200086b0:	e4930010 	lhui	r4, r19, 16
200086b4:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
200086b8:	e873000c 	lwi	r3, r19, 12
200086bc:	e8630010 	lwi	r3, r3, 16
200086c0:	e8830000 	lwi	r4, r3, 0
200086c4:	30840001 	addik	r4, r4, 1
200086c8:	f8830000 	swi	r4, r3, 0
}
200086cc:	10330000 	addk	r1, r19, r0
200086d0:	ea610004 	lwi	r19, r1, 4
200086d4:	30210008 	addik	r1, r1, 8
200086d8:	b60f0008 	rtsd	r15, 8
200086dc:	80000000 	or	r0, r0, r0

200086e0 <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200086e0:	3021fff8 	addik	r1, r1, -8
200086e4:	fa610004 	swi	r19, r1, 4
200086e8:	12610000 	addk	r19, r1, r0
200086ec:	f8b3000c 	swi	r5, r19, 12
200086f0:	f8d30010 	swi	r6, r19, 16
200086f4:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200086f8:	e873000c 	lwi	r3, r19, 12
200086fc:	e8630010 	lwi	r3, r3, 16
20008700:	e8830000 	lwi	r4, r3, 0
20008704:	e873000c 	lwi	r3, r19, 12
20008708:	e8a3000c 	lwi	r5, r3, 12
2000870c:	e8730010 	lwi	r3, r19, 16
20008710:	64630402 	bslli	r3, r3, 2
20008714:	10651800 	addk	r3, r5, r3
20008718:	e8630000 	lwi	r3, r3, 0
2000871c:	14a32000 	rsubk	r5, r3, r4
20008720:	30600001 	addik	r3, r0, 1
20008724:	e8930014 	lwi	r4, r19, 20
20008728:	16442803 	cmpu	r18, r4, r5
2000872c:	bcb20008 	bgei	r18, 8		// 20008734
20008730:	10600000 	addk	r3, r0, r0
20008734:	a46300ff 	andi	r3, r3, 255
}
20008738:	10330000 	addk	r1, r19, r0
2000873c:	ea610004 	lwi	r19, r1, 4
20008740:	30210008 	addik	r1, r1, 8
20008744:	b60f0008 	rtsd	r15, 8
20008748:	80000000 	or	r0, r0, r0

2000874c <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000874c:	3021fff8 	addik	r1, r1, -8
20008750:	fa610004 	swi	r19, r1, 4
20008754:	12610000 	addk	r19, r1, r0
20008758:	f8b3000c 	swi	r5, r19, 12
2000875c:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20008760:	e873000c 	lwi	r3, r19, 12
20008764:	e8630010 	lwi	r3, r3, 16
20008768:	e8830000 	lwi	r4, r3, 0
2000876c:	e873000c 	lwi	r3, r19, 12
20008770:	e8a3000c 	lwi	r5, r3, 12
20008774:	e8730010 	lwi	r3, r19, 16
20008778:	64630402 	bslli	r3, r3, 2
2000877c:	10651800 	addk	r3, r5, r3
20008780:	e8630000 	lwi	r3, r3, 0
20008784:	14632000 	rsubk	r3, r3, r4
}
20008788:	10330000 	addk	r1, r19, r0
2000878c:	ea610004 	lwi	r19, r1, 4
20008790:	30210008 	addik	r1, r1, 8
20008794:	b60f0008 	rtsd	r15, 8
20008798:	80000000 	or	r0, r0, r0

2000879c <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000879c:	3021fff4 	addik	r1, r1, -12
200087a0:	fa610008 	swi	r19, r1, 8
200087a4:	12610000 	addk	r19, r1, r0
200087a8:	f8b30010 	swi	r5, r19, 16
200087ac:	f8d30014 	swi	r6, r19, 20
200087b0:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200087b4:	f8130004 	swi	r0, r19, 4
200087b8:	b800005c 	bri	92		// 20008814
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200087bc:	e8730010 	lwi	r3, r19, 16
200087c0:	e8830000 	lwi	r4, r3, 0
200087c4:	e8730010 	lwi	r3, r19, 16
200087c8:	e8a3000c 	lwi	r5, r3, 12
200087cc:	e8730004 	lwi	r3, r19, 4
200087d0:	64630402 	bslli	r3, r3, 2
200087d4:	10651800 	addk	r3, r5, r3
200087d8:	e8a30000 	lwi	r5, r3, 0
200087dc:	e8730010 	lwi	r3, r19, 16
200087e0:	e8630010 	lwi	r3, r3, 16
200087e4:	e8630000 	lwi	r3, r3, 0
200087e8:	14632800 	rsubk	r3, r3, r5
200087ec:	10641800 	addk	r3, r4, r3
200087f0:	30830001 	addik	r4, r3, 1
200087f4:	e8730018 	lwi	r3, r19, 24
200087f8:	16441803 	cmpu	r18, r4, r3
200087fc:	bc52000c 	blti	r18, 12		// 20008808
            return 0;
20008800:	10600000 	addk	r3, r0, r0
20008804:	b8000024 	bri	36		// 20008828
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20008808:	e8730004 	lwi	r3, r19, 4
2000880c:	30630001 	addik	r3, r3, 1
20008810:	f8730004 	swi	r3, r19, 4
20008814:	e8930004 	lwi	r4, r19, 4
20008818:	e8730014 	lwi	r3, r19, 20
2000881c:	16432003 	cmpu	r18, r3, r4
20008820:	bc52ff9c 	blti	r18, -100		// 200087bc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20008824:	30600001 	addik	r3, r0, 1
}
20008828:	10330000 	addk	r1, r19, r0
2000882c:	ea610008 	lwi	r19, r1, 8
20008830:	3021000c 	addik	r1, r1, 12
20008834:	b60f0008 	rtsd	r15, 8
20008838:	80000000 	or	r0, r0, r0

2000883c <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000883c:	3021ffec 	addik	r1, r1, -20
20008840:	fa610010 	swi	r19, r1, 16
20008844:	12610000 	addk	r19, r1, r0
20008848:	f8b30018 	swi	r5, r19, 24
2000884c:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20008850:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20008854:	f8130004 	swi	r0, r19, 4
20008858:	b8000054 	bri	84		// 200088ac
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000885c:	e8730018 	lwi	r3, r19, 24
20008860:	e8630010 	lwi	r3, r3, 16
20008864:	e8830000 	lwi	r4, r3, 0
20008868:	e8730018 	lwi	r3, r19, 24
2000886c:	e8a3000c 	lwi	r5, r3, 12
20008870:	e8730004 	lwi	r3, r19, 4
20008874:	64630402 	bslli	r3, r3, 2
20008878:	10651800 	addk	r3, r5, r3
2000887c:	e8630000 	lwi	r3, r3, 0
20008880:	14632000 	rsubk	r3, r3, r4
20008884:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20008888:	e8930008 	lwi	r4, r19, 8
2000888c:	e873000c 	lwi	r3, r19, 12
20008890:	16441803 	cmpu	r18, r4, r3
20008894:	bcb20008 	bgei	r18, 8		// 2000889c
20008898:	10640000 	addk	r3, r4, r0
2000889c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200088a0:	e8730004 	lwi	r3, r19, 4
200088a4:	30630001 	addik	r3, r3, 1
200088a8:	f8730004 	swi	r3, r19, 4
200088ac:	e8930004 	lwi	r4, r19, 4
200088b0:	e873001c 	lwi	r3, r19, 28
200088b4:	16432003 	cmpu	r18, r3, r4
200088b8:	bc52ffa4 	blti	r18, -92		// 2000885c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200088bc:	e8730018 	lwi	r3, r19, 24
200088c0:	e8830000 	lwi	r4, r3, 0
200088c4:	e8730008 	lwi	r3, r19, 8
200088c8:	14632000 	rsubk	r3, r3, r4
}
200088cc:	10330000 	addk	r1, r19, r0
200088d0:	ea610010 	lwi	r19, r1, 16
200088d4:	30210014 	addik	r1, r1, 20
200088d8:	b60f0008 	rtsd	r15, 8
200088dc:	80000000 	or	r0, r0, r0

200088e0 <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200088e0:	3021fff4 	addik	r1, r1, -12
200088e4:	fa610008 	swi	r19, r1, 8
200088e8:	12610000 	addk	r19, r1, r0
200088ec:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
200088f0:	e8730010 	lwi	r3, r19, 16
200088f4:	e8630010 	lwi	r3, r3, 16
200088f8:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200088fc:	f8130004 	swi	r0, r19, 4
20008900:	b8000028 	bri	40		// 20008928
        fifo->read_inds[i] = 0;
20008904:	e8730010 	lwi	r3, r19, 16
20008908:	e883000c 	lwi	r4, r3, 12
2000890c:	e8730004 	lwi	r3, r19, 4
20008910:	64630402 	bslli	r3, r3, 2
20008914:	10641800 	addk	r3, r4, r3
20008918:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000891c:	e8730004 	lwi	r3, r19, 4
20008920:	30630001 	addik	r3, r3, 1
20008924:	f8730004 	swi	r3, r19, 4
20008928:	e8730010 	lwi	r3, r19, 16
2000892c:	e8830008 	lwi	r4, r3, 8
20008930:	e8730004 	lwi	r3, r19, 4
20008934:	16441803 	cmpu	r18, r4, r3
20008938:	bc52ffcc 	blti	r18, -52		// 20008904
        fifo->read_inds[i] = 0;
    }
}
2000893c:	10330000 	addk	r1, r19, r0
20008940:	ea610008 	lwi	r19, r1, 8
20008944:	3021000c 	addik	r1, r1, 12
20008948:	b60f0008 	rtsd	r15, 8
2000894c:	80000000 	or	r0, r0, r0

20008950 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20008950:	3021fff4 	addik	r1, r1, -12
20008954:	fa610008 	swi	r19, r1, 8
20008958:	12610000 	addk	r19, r1, r0
2000895c:	f8b30010 	swi	r5, r19, 16
20008960:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20008964:	e8730010 	lwi	r3, r19, 16
20008968:	e8830004 	lwi	r4, r3, 4
2000896c:	e8730010 	lwi	r3, r19, 16
20008970:	e8a3000c 	lwi	r5, r3, 12
20008974:	e8730014 	lwi	r3, r19, 20
20008978:	64630402 	bslli	r3, r3, 2
2000897c:	10651800 	addk	r3, r5, r3
20008980:	e8a30000 	lwi	r5, r3, 0
20008984:	e8730010 	lwi	r3, r19, 16
20008988:	e8630000 	lwi	r3, r3, 0
2000898c:	3063ffff 	addik	r3, r3, -1
20008990:	84651800 	and	r3, r5, r3
20008994:	64630402 	bslli	r3, r3, 2
20008998:	10641800 	addk	r3, r4, r3
2000899c:	e8630000 	lwi	r3, r3, 0
200089a0:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200089a4:	e8730010 	lwi	r3, r19, 16
200089a8:	e883000c 	lwi	r4, r3, 12
200089ac:	e8730014 	lwi	r3, r19, 20
200089b0:	64630402 	bslli	r3, r3, 2
200089b4:	10641800 	addk	r3, r4, r3
200089b8:	e8830000 	lwi	r4, r3, 0
200089bc:	30840001 	addik	r4, r4, 1
200089c0:	f8830000 	swi	r4, r3, 0
    return value;
200089c4:	e8730004 	lwi	r3, r19, 4
}
200089c8:	10330000 	addk	r1, r19, r0
200089cc:	ea610008 	lwi	r19, r1, 8
200089d0:	3021000c 	addik	r1, r1, 12
200089d4:	b60f0008 	rtsd	r15, 8
200089d8:	80000000 	or	r0, r0, r0

200089dc <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200089dc:	3021fff8 	addik	r1, r1, -8
200089e0:	fa610004 	swi	r19, r1, 4
200089e4:	12610000 	addk	r19, r1, r0
200089e8:	f8b3000c 	swi	r5, r19, 12
200089ec:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200089f0:	e873000c 	lwi	r3, r19, 12
200089f4:	e8830004 	lwi	r4, r3, 4
200089f8:	e873000c 	lwi	r3, r19, 12
200089fc:	e8630010 	lwi	r3, r3, 16
20008a00:	e8a30000 	lwi	r5, r3, 0
20008a04:	e873000c 	lwi	r3, r19, 12
20008a08:	e8630000 	lwi	r3, r3, 0
20008a0c:	3063ffff 	addik	r3, r3, -1
20008a10:	84651800 	and	r3, r5, r3
20008a14:	64630402 	bslli	r3, r3, 2
20008a18:	10641800 	addk	r3, r4, r3
20008a1c:	e8930010 	lwi	r4, r19, 16
20008a20:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20008a24:	e873000c 	lwi	r3, r19, 12
20008a28:	e8630010 	lwi	r3, r3, 16
20008a2c:	e8830000 	lwi	r4, r3, 0
20008a30:	30840001 	addik	r4, r4, 1
20008a34:	f8830000 	swi	r4, r3, 0
}
20008a38:	10330000 	addk	r1, r19, r0
20008a3c:	ea610004 	lwi	r19, r1, 4
20008a40:	30210008 	addik	r1, r1, 8
20008a44:	b60f0008 	rtsd	r15, 8
20008a48:	80000000 	or	r0, r0, r0

20008a4c <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20008a4c:	3021fff8 	addik	r1, r1, -8
20008a50:	fa610004 	swi	r19, r1, 4
20008a54:	12610000 	addk	r19, r1, r0
20008a58:	f8b3000c 	swi	r5, r19, 12
20008a5c:	f8d30010 	swi	r6, r19, 16
20008a60:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20008a64:	e873000c 	lwi	r3, r19, 12
20008a68:	e8630010 	lwi	r3, r3, 16
20008a6c:	e8830000 	lwi	r4, r3, 0
20008a70:	e873000c 	lwi	r3, r19, 12
20008a74:	e8a3000c 	lwi	r5, r3, 12
20008a78:	e8730010 	lwi	r3, r19, 16
20008a7c:	64630402 	bslli	r3, r3, 2
20008a80:	10651800 	addk	r3, r5, r3
20008a84:	e8630000 	lwi	r3, r3, 0
20008a88:	14a32000 	rsubk	r5, r3, r4
20008a8c:	30600001 	addik	r3, r0, 1
20008a90:	e8930014 	lwi	r4, r19, 20
20008a94:	16442803 	cmpu	r18, r4, r5
20008a98:	bcb20008 	bgei	r18, 8		// 20008aa0
20008a9c:	10600000 	addk	r3, r0, r0
20008aa0:	a46300ff 	andi	r3, r3, 255
}
20008aa4:	10330000 	addk	r1, r19, r0
20008aa8:	ea610004 	lwi	r19, r1, 4
20008aac:	30210008 	addik	r1, r1, 8
20008ab0:	b60f0008 	rtsd	r15, 8
20008ab4:	80000000 	or	r0, r0, r0

20008ab8 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20008ab8:	3021fff8 	addik	r1, r1, -8
20008abc:	fa610004 	swi	r19, r1, 4
20008ac0:	12610000 	addk	r19, r1, r0
20008ac4:	f8b3000c 	swi	r5, r19, 12
20008ac8:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20008acc:	e873000c 	lwi	r3, r19, 12
20008ad0:	e8630010 	lwi	r3, r3, 16
20008ad4:	e8830000 	lwi	r4, r3, 0
20008ad8:	e873000c 	lwi	r3, r19, 12
20008adc:	e8a3000c 	lwi	r5, r3, 12
20008ae0:	e8730010 	lwi	r3, r19, 16
20008ae4:	64630402 	bslli	r3, r3, 2
20008ae8:	10651800 	addk	r3, r5, r3
20008aec:	e8630000 	lwi	r3, r3, 0
20008af0:	14632000 	rsubk	r3, r3, r4
}
20008af4:	10330000 	addk	r1, r19, r0
20008af8:	ea610004 	lwi	r19, r1, 4
20008afc:	30210008 	addik	r1, r1, 8
20008b00:	b60f0008 	rtsd	r15, 8
20008b04:	80000000 	or	r0, r0, r0

20008b08 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20008b08:	3021fff4 	addik	r1, r1, -12
20008b0c:	fa610008 	swi	r19, r1, 8
20008b10:	12610000 	addk	r19, r1, r0
20008b14:	f8b30010 	swi	r5, r19, 16
20008b18:	f8d30014 	swi	r6, r19, 20
20008b1c:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20008b20:	f8130004 	swi	r0, r19, 4
20008b24:	b800005c 	bri	92		// 20008b80
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20008b28:	e8730010 	lwi	r3, r19, 16
20008b2c:	e8830000 	lwi	r4, r3, 0
20008b30:	e8730010 	lwi	r3, r19, 16
20008b34:	e8a3000c 	lwi	r5, r3, 12
20008b38:	e8730004 	lwi	r3, r19, 4
20008b3c:	64630402 	bslli	r3, r3, 2
20008b40:	10651800 	addk	r3, r5, r3
20008b44:	e8a30000 	lwi	r5, r3, 0
20008b48:	e8730010 	lwi	r3, r19, 16
20008b4c:	e8630010 	lwi	r3, r3, 16
20008b50:	e8630000 	lwi	r3, r3, 0
20008b54:	14632800 	rsubk	r3, r3, r5
20008b58:	10641800 	addk	r3, r4, r3
20008b5c:	30830001 	addik	r4, r3, 1
20008b60:	e8730018 	lwi	r3, r19, 24
20008b64:	16441803 	cmpu	r18, r4, r3
20008b68:	bc52000c 	blti	r18, 12		// 20008b74
            return 0;
20008b6c:	10600000 	addk	r3, r0, r0
20008b70:	b8000024 	bri	36		// 20008b94
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20008b74:	e8730004 	lwi	r3, r19, 4
20008b78:	30630001 	addik	r3, r3, 1
20008b7c:	f8730004 	swi	r3, r19, 4
20008b80:	e8930004 	lwi	r4, r19, 4
20008b84:	e8730014 	lwi	r3, r19, 20
20008b88:	16432003 	cmpu	r18, r3, r4
20008b8c:	bc52ff9c 	blti	r18, -100		// 20008b28
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20008b90:	30600001 	addik	r3, r0, 1
}
20008b94:	10330000 	addk	r1, r19, r0
20008b98:	ea610008 	lwi	r19, r1, 8
20008b9c:	3021000c 	addik	r1, r1, 12
20008ba0:	b60f0008 	rtsd	r15, 8
20008ba4:	80000000 	or	r0, r0, r0

20008ba8 <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20008ba8:	3021ffec 	addik	r1, r1, -20
20008bac:	fa610010 	swi	r19, r1, 16
20008bb0:	12610000 	addk	r19, r1, r0
20008bb4:	f8b30018 	swi	r5, r19, 24
20008bb8:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20008bbc:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20008bc0:	f8130004 	swi	r0, r19, 4
20008bc4:	b8000054 	bri	84		// 20008c18
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20008bc8:	e8730018 	lwi	r3, r19, 24
20008bcc:	e8630010 	lwi	r3, r3, 16
20008bd0:	e8830000 	lwi	r4, r3, 0
20008bd4:	e8730018 	lwi	r3, r19, 24
20008bd8:	e8a3000c 	lwi	r5, r3, 12
20008bdc:	e8730004 	lwi	r3, r19, 4
20008be0:	64630402 	bslli	r3, r3, 2
20008be4:	10651800 	addk	r3, r5, r3
20008be8:	e8630000 	lwi	r3, r3, 0
20008bec:	14632000 	rsubk	r3, r3, r4
20008bf0:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20008bf4:	e8930008 	lwi	r4, r19, 8
20008bf8:	e873000c 	lwi	r3, r19, 12
20008bfc:	16441803 	cmpu	r18, r4, r3
20008c00:	bcb20008 	bgei	r18, 8		// 20008c08
20008c04:	10640000 	addk	r3, r4, r0
20008c08:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20008c0c:	e8730004 	lwi	r3, r19, 4
20008c10:	30630001 	addik	r3, r3, 1
20008c14:	f8730004 	swi	r3, r19, 4
20008c18:	e8930004 	lwi	r4, r19, 4
20008c1c:	e873001c 	lwi	r3, r19, 28
20008c20:	16432003 	cmpu	r18, r3, r4
20008c24:	bc52ffa4 	blti	r18, -92		// 20008bc8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20008c28:	e8730018 	lwi	r3, r19, 24
20008c2c:	e8830000 	lwi	r4, r3, 0
20008c30:	e8730008 	lwi	r3, r19, 8
20008c34:	14632000 	rsubk	r3, r3, r4
}
20008c38:	10330000 	addk	r1, r19, r0
20008c3c:	ea610010 	lwi	r19, r1, 16
20008c40:	30210014 	addik	r1, r1, 20
20008c44:	b60f0008 	rtsd	r15, 8
20008c48:	80000000 	or	r0, r0, r0

20008c4c <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20008c4c:	3021fff4 	addik	r1, r1, -12
20008c50:	fa610008 	swi	r19, r1, 8
20008c54:	12610000 	addk	r19, r1, r0
20008c58:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20008c5c:	e8730010 	lwi	r3, r19, 16
20008c60:	e8630010 	lwi	r3, r3, 16
20008c64:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20008c68:	f8130004 	swi	r0, r19, 4
20008c6c:	b8000028 	bri	40		// 20008c94
        fifo->read_inds[i] = 0;
20008c70:	e8730010 	lwi	r3, r19, 16
20008c74:	e883000c 	lwi	r4, r3, 12
20008c78:	e8730004 	lwi	r3, r19, 4
20008c7c:	64630402 	bslli	r3, r3, 2
20008c80:	10641800 	addk	r3, r4, r3
20008c84:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20008c88:	e8730004 	lwi	r3, r19, 4
20008c8c:	30630001 	addik	r3, r3, 1
20008c90:	f8730004 	swi	r3, r19, 4
20008c94:	e8730010 	lwi	r3, r19, 16
20008c98:	e8830008 	lwi	r4, r3, 8
20008c9c:	e8730004 	lwi	r3, r19, 4
20008ca0:	16441803 	cmpu	r18, r4, r3
20008ca4:	bc52ffcc 	blti	r18, -52		// 20008c70
        fifo->read_inds[i] = 0;
    }
}
20008ca8:	10330000 	addk	r1, r19, r0
20008cac:	ea610008 	lwi	r19, r1, 8
20008cb0:	3021000c 	addik	r1, r1, 12
20008cb4:	b60f0008 	rtsd	r15, 8
20008cb8:	80000000 	or	r0, r0, r0

20008cbc <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20008cbc:	3021fff0 	addik	r1, r1, -16
20008cc0:	fa61000c 	swi	r19, r1, 12
20008cc4:	12610000 	addk	r19, r1, r0
20008cc8:	f8b30014 	swi	r5, r19, 20
20008ccc:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20008cd0:	e8730014 	lwi	r3, r19, 20
20008cd4:	e8830004 	lwi	r4, r3, 4
20008cd8:	e8730014 	lwi	r3, r19, 20
20008cdc:	e8a3000c 	lwi	r5, r3, 12
20008ce0:	e8730018 	lwi	r3, r19, 24
20008ce4:	64630402 	bslli	r3, r3, 2
20008ce8:	10651800 	addk	r3, r5, r3
20008cec:	e8a30000 	lwi	r5, r3, 0
20008cf0:	e8730014 	lwi	r3, r19, 20
20008cf4:	e8630000 	lwi	r3, r3, 0
20008cf8:	3063ffff 	addik	r3, r3, -1
20008cfc:	84651800 	and	r3, r5, r3
20008d00:	64630403 	bslli	r3, r3, 3
20008d04:	10641800 	addk	r3, r4, r3
20008d08:	e8830000 	lwi	r4, r3, 0
20008d0c:	e8a30004 	lwi	r5, r3, 4
20008d10:	f8930004 	swi	r4, r19, 4
20008d14:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20008d18:	e8730014 	lwi	r3, r19, 20
20008d1c:	e883000c 	lwi	r4, r3, 12
20008d20:	e8730018 	lwi	r3, r19, 24
20008d24:	64630402 	bslli	r3, r3, 2
20008d28:	10641800 	addk	r3, r4, r3
20008d2c:	e8830000 	lwi	r4, r3, 0
20008d30:	30840001 	addik	r4, r4, 1
20008d34:	f8830000 	swi	r4, r3, 0
    return value;
20008d38:	e8930004 	lwi	r4, r19, 4
20008d3c:	e8b30008 	lwi	r5, r19, 8
}
20008d40:	10640000 	addk	r3, r4, r0
20008d44:	10850000 	addk	r4, r5, r0
20008d48:	10330000 	addk	r1, r19, r0
20008d4c:	ea61000c 	lwi	r19, r1, 12
20008d50:	30210010 	addik	r1, r1, 16
20008d54:	b60f0008 	rtsd	r15, 8
20008d58:	80000000 	or	r0, r0, r0

20008d5c <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20008d5c:	3021fff8 	addik	r1, r1, -8
20008d60:	fa610004 	swi	r19, r1, 4
20008d64:	12610000 	addk	r19, r1, r0
20008d68:	f8b3000c 	swi	r5, r19, 12
20008d6c:	f8d30010 	swi	r6, r19, 16
20008d70:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20008d74:	e873000c 	lwi	r3, r19, 12
20008d78:	e8830004 	lwi	r4, r3, 4
20008d7c:	e873000c 	lwi	r3, r19, 12
20008d80:	e8630010 	lwi	r3, r3, 16
20008d84:	e8a30000 	lwi	r5, r3, 0
20008d88:	e873000c 	lwi	r3, r19, 12
20008d8c:	e8630000 	lwi	r3, r3, 0
20008d90:	3063ffff 	addik	r3, r3, -1
20008d94:	84651800 	and	r3, r5, r3
20008d98:	64630403 	bslli	r3, r3, 3
20008d9c:	10641800 	addk	r3, r4, r3
20008da0:	e8930010 	lwi	r4, r19, 16
20008da4:	e8b30014 	lwi	r5, r19, 20
20008da8:	f8830000 	swi	r4, r3, 0
20008dac:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20008db0:	e873000c 	lwi	r3, r19, 12
20008db4:	e8630010 	lwi	r3, r3, 16
20008db8:	e8830000 	lwi	r4, r3, 0
20008dbc:	30840001 	addik	r4, r4, 1
20008dc0:	f8830000 	swi	r4, r3, 0
}
20008dc4:	10330000 	addk	r1, r19, r0
20008dc8:	ea610004 	lwi	r19, r1, 4
20008dcc:	30210008 	addik	r1, r1, 8
20008dd0:	b60f0008 	rtsd	r15, 8
20008dd4:	80000000 	or	r0, r0, r0

20008dd8 <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20008dd8:	3021fff8 	addik	r1, r1, -8
20008ddc:	fa610004 	swi	r19, r1, 4
20008de0:	12610000 	addk	r19, r1, r0
20008de4:	f8b3000c 	swi	r5, r19, 12
20008de8:	f8d30010 	swi	r6, r19, 16
20008dec:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20008df0:	e873000c 	lwi	r3, r19, 12
20008df4:	e8630010 	lwi	r3, r3, 16
20008df8:	e8830000 	lwi	r4, r3, 0
20008dfc:	e873000c 	lwi	r3, r19, 12
20008e00:	e8a3000c 	lwi	r5, r3, 12
20008e04:	e8730010 	lwi	r3, r19, 16
20008e08:	64630402 	bslli	r3, r3, 2
20008e0c:	10651800 	addk	r3, r5, r3
20008e10:	e8630000 	lwi	r3, r3, 0
20008e14:	14a32000 	rsubk	r5, r3, r4
20008e18:	30600001 	addik	r3, r0, 1
20008e1c:	e8930014 	lwi	r4, r19, 20
20008e20:	16442803 	cmpu	r18, r4, r5
20008e24:	bcb20008 	bgei	r18, 8		// 20008e2c
20008e28:	10600000 	addk	r3, r0, r0
20008e2c:	a46300ff 	andi	r3, r3, 255
}
20008e30:	10330000 	addk	r1, r19, r0
20008e34:	ea610004 	lwi	r19, r1, 4
20008e38:	30210008 	addik	r1, r1, 8
20008e3c:	b60f0008 	rtsd	r15, 8
20008e40:	80000000 	or	r0, r0, r0

20008e44 <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20008e44:	3021fff8 	addik	r1, r1, -8
20008e48:	fa610004 	swi	r19, r1, 4
20008e4c:	12610000 	addk	r19, r1, r0
20008e50:	f8b3000c 	swi	r5, r19, 12
20008e54:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20008e58:	e873000c 	lwi	r3, r19, 12
20008e5c:	e8630010 	lwi	r3, r3, 16
20008e60:	e8830000 	lwi	r4, r3, 0
20008e64:	e873000c 	lwi	r3, r19, 12
20008e68:	e8a3000c 	lwi	r5, r3, 12
20008e6c:	e8730010 	lwi	r3, r19, 16
20008e70:	64630402 	bslli	r3, r3, 2
20008e74:	10651800 	addk	r3, r5, r3
20008e78:	e8630000 	lwi	r3, r3, 0
20008e7c:	14632000 	rsubk	r3, r3, r4
}
20008e80:	10330000 	addk	r1, r19, r0
20008e84:	ea610004 	lwi	r19, r1, 4
20008e88:	30210008 	addik	r1, r1, 8
20008e8c:	b60f0008 	rtsd	r15, 8
20008e90:	80000000 	or	r0, r0, r0

20008e94 <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20008e94:	3021fff4 	addik	r1, r1, -12
20008e98:	fa610008 	swi	r19, r1, 8
20008e9c:	12610000 	addk	r19, r1, r0
20008ea0:	f8b30010 	swi	r5, r19, 16
20008ea4:	f8d30014 	swi	r6, r19, 20
20008ea8:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20008eac:	f8130004 	swi	r0, r19, 4
20008eb0:	b800005c 	bri	92		// 20008f0c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20008eb4:	e8730010 	lwi	r3, r19, 16
20008eb8:	e8830000 	lwi	r4, r3, 0
20008ebc:	e8730010 	lwi	r3, r19, 16
20008ec0:	e8a3000c 	lwi	r5, r3, 12
20008ec4:	e8730004 	lwi	r3, r19, 4
20008ec8:	64630402 	bslli	r3, r3, 2
20008ecc:	10651800 	addk	r3, r5, r3
20008ed0:	e8a30000 	lwi	r5, r3, 0
20008ed4:	e8730010 	lwi	r3, r19, 16
20008ed8:	e8630010 	lwi	r3, r3, 16
20008edc:	e8630000 	lwi	r3, r3, 0
20008ee0:	14632800 	rsubk	r3, r3, r5
20008ee4:	10641800 	addk	r3, r4, r3
20008ee8:	30830001 	addik	r4, r3, 1
20008eec:	e8730018 	lwi	r3, r19, 24
20008ef0:	16441803 	cmpu	r18, r4, r3
20008ef4:	bc52000c 	blti	r18, 12		// 20008f00
            return 0;
20008ef8:	10600000 	addk	r3, r0, r0
20008efc:	b8000024 	bri	36		// 20008f20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20008f00:	e8730004 	lwi	r3, r19, 4
20008f04:	30630001 	addik	r3, r3, 1
20008f08:	f8730004 	swi	r3, r19, 4
20008f0c:	e8930004 	lwi	r4, r19, 4
20008f10:	e8730014 	lwi	r3, r19, 20
20008f14:	16432003 	cmpu	r18, r3, r4
20008f18:	bc52ff9c 	blti	r18, -100		// 20008eb4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20008f1c:	30600001 	addik	r3, r0, 1
}
20008f20:	10330000 	addk	r1, r19, r0
20008f24:	ea610008 	lwi	r19, r1, 8
20008f28:	3021000c 	addik	r1, r1, 12
20008f2c:	b60f0008 	rtsd	r15, 8
20008f30:	80000000 	or	r0, r0, r0

20008f34 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20008f34:	3021ffec 	addik	r1, r1, -20
20008f38:	fa610010 	swi	r19, r1, 16
20008f3c:	12610000 	addk	r19, r1, r0
20008f40:	f8b30018 	swi	r5, r19, 24
20008f44:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20008f48:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20008f4c:	f8130004 	swi	r0, r19, 4
20008f50:	b8000054 	bri	84		// 20008fa4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20008f54:	e8730018 	lwi	r3, r19, 24
20008f58:	e8630010 	lwi	r3, r3, 16
20008f5c:	e8830000 	lwi	r4, r3, 0
20008f60:	e8730018 	lwi	r3, r19, 24
20008f64:	e8a3000c 	lwi	r5, r3, 12
20008f68:	e8730004 	lwi	r3, r19, 4
20008f6c:	64630402 	bslli	r3, r3, 2
20008f70:	10651800 	addk	r3, r5, r3
20008f74:	e8630000 	lwi	r3, r3, 0
20008f78:	14632000 	rsubk	r3, r3, r4
20008f7c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20008f80:	e8930008 	lwi	r4, r19, 8
20008f84:	e873000c 	lwi	r3, r19, 12
20008f88:	16441803 	cmpu	r18, r4, r3
20008f8c:	bcb20008 	bgei	r18, 8		// 20008f94
20008f90:	10640000 	addk	r3, r4, r0
20008f94:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20008f98:	e8730004 	lwi	r3, r19, 4
20008f9c:	30630001 	addik	r3, r3, 1
20008fa0:	f8730004 	swi	r3, r19, 4
20008fa4:	e8930004 	lwi	r4, r19, 4
20008fa8:	e873001c 	lwi	r3, r19, 28
20008fac:	16432003 	cmpu	r18, r3, r4
20008fb0:	bc52ffa4 	blti	r18, -92		// 20008f54
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20008fb4:	e8730018 	lwi	r3, r19, 24
20008fb8:	e8830000 	lwi	r4, r3, 0
20008fbc:	e8730008 	lwi	r3, r19, 8
20008fc0:	14632000 	rsubk	r3, r3, r4
}
20008fc4:	10330000 	addk	r1, r19, r0
20008fc8:	ea610010 	lwi	r19, r1, 16
20008fcc:	30210014 	addik	r1, r1, 20
20008fd0:	b60f0008 	rtsd	r15, 8
20008fd4:	80000000 	or	r0, r0, r0

20008fd8 <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20008fd8:	3021fff4 	addik	r1, r1, -12
20008fdc:	fa610008 	swi	r19, r1, 8
20008fe0:	12610000 	addk	r19, r1, r0
20008fe4:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20008fe8:	e8730010 	lwi	r3, r19, 16
20008fec:	e8630010 	lwi	r3, r3, 16
20008ff0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20008ff4:	f8130004 	swi	r0, r19, 4
20008ff8:	b8000028 	bri	40		// 20009020
        fifo->read_inds[i] = 0;
20008ffc:	e8730010 	lwi	r3, r19, 16
20009000:	e883000c 	lwi	r4, r3, 12
20009004:	e8730004 	lwi	r3, r19, 4
20009008:	64630402 	bslli	r3, r3, 2
2000900c:	10641800 	addk	r3, r4, r3
20009010:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20009014:	e8730004 	lwi	r3, r19, 4
20009018:	30630001 	addik	r3, r3, 1
2000901c:	f8730004 	swi	r3, r19, 4
20009020:	e8730010 	lwi	r3, r19, 16
20009024:	e8830008 	lwi	r4, r3, 8
20009028:	e8730004 	lwi	r3, r19, 4
2000902c:	16441803 	cmpu	r18, r4, r3
20009030:	bc52ffcc 	blti	r18, -52		// 20008ffc
        fifo->read_inds[i] = 0;
    }
}
20009034:	10330000 	addk	r1, r19, r0
20009038:	ea610008 	lwi	r19, r1, 8
2000903c:	3021000c 	addik	r1, r1, 12
20009040:	b60f0008 	rtsd	r15, 8
20009044:	80000000 	or	r0, r0, r0

20009048 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20009048:	3021fff4 	addik	r1, r1, -12
2000904c:	fa610008 	swi	r19, r1, 8
20009050:	12610000 	addk	r19, r1, r0
20009054:	f8b30010 	swi	r5, r19, 16
20009058:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000905c:	e8730010 	lwi	r3, r19, 16
20009060:	e8830004 	lwi	r4, r3, 4
20009064:	e8730010 	lwi	r3, r19, 16
20009068:	e8a3000c 	lwi	r5, r3, 12
2000906c:	e8730014 	lwi	r3, r19, 20
20009070:	64630402 	bslli	r3, r3, 2
20009074:	10651800 	addk	r3, r5, r3
20009078:	e8a30000 	lwi	r5, r3, 0
2000907c:	e8730010 	lwi	r3, r19, 16
20009080:	e8630000 	lwi	r3, r3, 0
20009084:	3063ffff 	addik	r3, r3, -1
20009088:	84651800 	and	r3, r5, r3
2000908c:	10641800 	addk	r3, r4, r3
20009090:	e0630000 	lbui	r3, r3, 0
20009094:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20009098:	e8730010 	lwi	r3, r19, 16
2000909c:	e883000c 	lwi	r4, r3, 12
200090a0:	e8730014 	lwi	r3, r19, 20
200090a4:	64630402 	bslli	r3, r3, 2
200090a8:	10641800 	addk	r3, r4, r3
200090ac:	e8830000 	lwi	r4, r3, 0
200090b0:	30840001 	addik	r4, r4, 1
200090b4:	f8830000 	swi	r4, r3, 0
    return value;
200090b8:	e0730004 	lbui	r3, r19, 4
}
200090bc:	10330000 	addk	r1, r19, r0
200090c0:	ea610008 	lwi	r19, r1, 8
200090c4:	3021000c 	addik	r1, r1, 12
200090c8:	b60f0008 	rtsd	r15, 8
200090cc:	80000000 	or	r0, r0, r0

200090d0 <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200090d0:	3021fff8 	addik	r1, r1, -8
200090d4:	fa610004 	swi	r19, r1, 4
200090d8:	12610000 	addk	r19, r1, r0
200090dc:	f8b3000c 	swi	r5, r19, 12
200090e0:	10660000 	addk	r3, r6, r0
200090e4:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200090e8:	e873000c 	lwi	r3, r19, 12
200090ec:	e8830004 	lwi	r4, r3, 4
200090f0:	e873000c 	lwi	r3, r19, 12
200090f4:	e8630010 	lwi	r3, r3, 16
200090f8:	e8a30000 	lwi	r5, r3, 0
200090fc:	e873000c 	lwi	r3, r19, 12
20009100:	e8630000 	lwi	r3, r3, 0
20009104:	3063ffff 	addik	r3, r3, -1
20009108:	84651800 	and	r3, r5, r3
2000910c:	10641800 	addk	r3, r4, r3
20009110:	e0930010 	lbui	r4, r19, 16
20009114:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20009118:	e873000c 	lwi	r3, r19, 12
2000911c:	e8630010 	lwi	r3, r3, 16
20009120:	e8830000 	lwi	r4, r3, 0
20009124:	30840001 	addik	r4, r4, 1
20009128:	f8830000 	swi	r4, r3, 0
}
2000912c:	10330000 	addk	r1, r19, r0
20009130:	ea610004 	lwi	r19, r1, 4
20009134:	30210008 	addik	r1, r1, 8
20009138:	b60f0008 	rtsd	r15, 8
2000913c:	80000000 	or	r0, r0, r0

20009140 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20009140:	3021fff8 	addik	r1, r1, -8
20009144:	fa610004 	swi	r19, r1, 4
20009148:	12610000 	addk	r19, r1, r0
2000914c:	f8b3000c 	swi	r5, r19, 12
20009150:	f8d30010 	swi	r6, r19, 16
20009154:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20009158:	e873000c 	lwi	r3, r19, 12
2000915c:	e8630010 	lwi	r3, r3, 16
20009160:	e8830000 	lwi	r4, r3, 0
20009164:	e873000c 	lwi	r3, r19, 12
20009168:	e8a3000c 	lwi	r5, r3, 12
2000916c:	e8730010 	lwi	r3, r19, 16
20009170:	64630402 	bslli	r3, r3, 2
20009174:	10651800 	addk	r3, r5, r3
20009178:	e8630000 	lwi	r3, r3, 0
2000917c:	14a32000 	rsubk	r5, r3, r4
20009180:	30600001 	addik	r3, r0, 1
20009184:	e8930014 	lwi	r4, r19, 20
20009188:	16442803 	cmpu	r18, r4, r5
2000918c:	bcb20008 	bgei	r18, 8		// 20009194
20009190:	10600000 	addk	r3, r0, r0
20009194:	a46300ff 	andi	r3, r3, 255
}
20009198:	10330000 	addk	r1, r19, r0
2000919c:	ea610004 	lwi	r19, r1, 4
200091a0:	30210008 	addik	r1, r1, 8
200091a4:	b60f0008 	rtsd	r15, 8
200091a8:	80000000 	or	r0, r0, r0

200091ac <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200091ac:	3021fff8 	addik	r1, r1, -8
200091b0:	fa610004 	swi	r19, r1, 4
200091b4:	12610000 	addk	r19, r1, r0
200091b8:	f8b3000c 	swi	r5, r19, 12
200091bc:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200091c0:	e873000c 	lwi	r3, r19, 12
200091c4:	e8630010 	lwi	r3, r3, 16
200091c8:	e8830000 	lwi	r4, r3, 0
200091cc:	e873000c 	lwi	r3, r19, 12
200091d0:	e8a3000c 	lwi	r5, r3, 12
200091d4:	e8730010 	lwi	r3, r19, 16
200091d8:	64630402 	bslli	r3, r3, 2
200091dc:	10651800 	addk	r3, r5, r3
200091e0:	e8630000 	lwi	r3, r3, 0
200091e4:	14632000 	rsubk	r3, r3, r4
}
200091e8:	10330000 	addk	r1, r19, r0
200091ec:	ea610004 	lwi	r19, r1, 4
200091f0:	30210008 	addik	r1, r1, 8
200091f4:	b60f0008 	rtsd	r15, 8
200091f8:	80000000 	or	r0, r0, r0

200091fc <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200091fc:	3021fff4 	addik	r1, r1, -12
20009200:	fa610008 	swi	r19, r1, 8
20009204:	12610000 	addk	r19, r1, r0
20009208:	f8b30010 	swi	r5, r19, 16
2000920c:	f8d30014 	swi	r6, r19, 20
20009210:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20009214:	f8130004 	swi	r0, r19, 4
20009218:	b800005c 	bri	92		// 20009274
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000921c:	e8730010 	lwi	r3, r19, 16
20009220:	e8830000 	lwi	r4, r3, 0
20009224:	e8730010 	lwi	r3, r19, 16
20009228:	e8a3000c 	lwi	r5, r3, 12
2000922c:	e8730004 	lwi	r3, r19, 4
20009230:	64630402 	bslli	r3, r3, 2
20009234:	10651800 	addk	r3, r5, r3
20009238:	e8a30000 	lwi	r5, r3, 0
2000923c:	e8730010 	lwi	r3, r19, 16
20009240:	e8630010 	lwi	r3, r3, 16
20009244:	e8630000 	lwi	r3, r3, 0
20009248:	14632800 	rsubk	r3, r3, r5
2000924c:	10641800 	addk	r3, r4, r3
20009250:	30830001 	addik	r4, r3, 1
20009254:	e8730018 	lwi	r3, r19, 24
20009258:	16441803 	cmpu	r18, r4, r3
2000925c:	bc52000c 	blti	r18, 12		// 20009268
            return 0;
20009260:	10600000 	addk	r3, r0, r0
20009264:	b8000024 	bri	36		// 20009288
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20009268:	e8730004 	lwi	r3, r19, 4
2000926c:	30630001 	addik	r3, r3, 1
20009270:	f8730004 	swi	r3, r19, 4
20009274:	e8930004 	lwi	r4, r19, 4
20009278:	e8730014 	lwi	r3, r19, 20
2000927c:	16432003 	cmpu	r18, r3, r4
20009280:	bc52ff9c 	blti	r18, -100		// 2000921c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20009284:	30600001 	addik	r3, r0, 1
}
20009288:	10330000 	addk	r1, r19, r0
2000928c:	ea610008 	lwi	r19, r1, 8
20009290:	3021000c 	addik	r1, r1, 12
20009294:	b60f0008 	rtsd	r15, 8
20009298:	80000000 	or	r0, r0, r0

2000929c <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000929c:	3021ffec 	addik	r1, r1, -20
200092a0:	fa610010 	swi	r19, r1, 16
200092a4:	12610000 	addk	r19, r1, r0
200092a8:	f8b30018 	swi	r5, r19, 24
200092ac:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200092b0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200092b4:	f8130004 	swi	r0, r19, 4
200092b8:	b8000054 	bri	84		// 2000930c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200092bc:	e8730018 	lwi	r3, r19, 24
200092c0:	e8630010 	lwi	r3, r3, 16
200092c4:	e8830000 	lwi	r4, r3, 0
200092c8:	e8730018 	lwi	r3, r19, 24
200092cc:	e8a3000c 	lwi	r5, r3, 12
200092d0:	e8730004 	lwi	r3, r19, 4
200092d4:	64630402 	bslli	r3, r3, 2
200092d8:	10651800 	addk	r3, r5, r3
200092dc:	e8630000 	lwi	r3, r3, 0
200092e0:	14632000 	rsubk	r3, r3, r4
200092e4:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200092e8:	e8930008 	lwi	r4, r19, 8
200092ec:	e873000c 	lwi	r3, r19, 12
200092f0:	16441803 	cmpu	r18, r4, r3
200092f4:	bcb20008 	bgei	r18, 8		// 200092fc
200092f8:	10640000 	addk	r3, r4, r0
200092fc:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20009300:	e8730004 	lwi	r3, r19, 4
20009304:	30630001 	addik	r3, r3, 1
20009308:	f8730004 	swi	r3, r19, 4
2000930c:	e8930004 	lwi	r4, r19, 4
20009310:	e873001c 	lwi	r3, r19, 28
20009314:	16432003 	cmpu	r18, r3, r4
20009318:	bc52ffa4 	blti	r18, -92		// 200092bc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000931c:	e8730018 	lwi	r3, r19, 24
20009320:	e8830000 	lwi	r4, r3, 0
20009324:	e8730008 	lwi	r3, r19, 8
20009328:	14632000 	rsubk	r3, r3, r4
}
2000932c:	10330000 	addk	r1, r19, r0
20009330:	ea610010 	lwi	r19, r1, 16
20009334:	30210014 	addik	r1, r1, 20
20009338:	b60f0008 	rtsd	r15, 8
2000933c:	80000000 	or	r0, r0, r0

20009340 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20009340:	3021fff4 	addik	r1, r1, -12
20009344:	fa610008 	swi	r19, r1, 8
20009348:	12610000 	addk	r19, r1, r0
2000934c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20009350:	e8730010 	lwi	r3, r19, 16
20009354:	e8630010 	lwi	r3, r3, 16
20009358:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000935c:	f8130004 	swi	r0, r19, 4
20009360:	b8000028 	bri	40		// 20009388
        fifo->read_inds[i] = 0;
20009364:	e8730010 	lwi	r3, r19, 16
20009368:	e883000c 	lwi	r4, r3, 12
2000936c:	e8730004 	lwi	r3, r19, 4
20009370:	64630402 	bslli	r3, r3, 2
20009374:	10641800 	addk	r3, r4, r3
20009378:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000937c:	e8730004 	lwi	r3, r19, 4
20009380:	30630001 	addik	r3, r3, 1
20009384:	f8730004 	swi	r3, r19, 4
20009388:	e8730010 	lwi	r3, r19, 16
2000938c:	e8830008 	lwi	r4, r3, 8
20009390:	e8730004 	lwi	r3, r19, 4
20009394:	16441803 	cmpu	r18, r4, r3
20009398:	bc52ffcc 	blti	r18, -52		// 20009364
        fifo->read_inds[i] = 0;
    }
}
2000939c:	10330000 	addk	r1, r19, r0
200093a0:	ea610008 	lwi	r19, r1, 8
200093a4:	3021000c 	addik	r1, r1, 12
200093a8:	b60f0008 	rtsd	r15, 8
200093ac:	80000000 	or	r0, r0, r0

200093b0 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200093b0:	3021fff4 	addik	r1, r1, -12
200093b4:	fa610008 	swi	r19, r1, 8
200093b8:	12610000 	addk	r19, r1, r0
200093bc:	f8b30010 	swi	r5, r19, 16
200093c0:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200093c4:	e8730010 	lwi	r3, r19, 16
200093c8:	e8830004 	lwi	r4, r3, 4
200093cc:	e8730010 	lwi	r3, r19, 16
200093d0:	e8a3000c 	lwi	r5, r3, 12
200093d4:	e8730014 	lwi	r3, r19, 20
200093d8:	64630402 	bslli	r3, r3, 2
200093dc:	10651800 	addk	r3, r5, r3
200093e0:	e8a30000 	lwi	r5, r3, 0
200093e4:	e8730010 	lwi	r3, r19, 16
200093e8:	e8630000 	lwi	r3, r3, 0
200093ec:	3063ffff 	addik	r3, r3, -1
200093f0:	84651800 	and	r3, r5, r3
200093f4:	10631800 	addk	r3, r3, r3
200093f8:	10641800 	addk	r3, r4, r3
200093fc:	e4630000 	lhui	r3, r3, 0
20009400:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20009404:	e8730010 	lwi	r3, r19, 16
20009408:	e883000c 	lwi	r4, r3, 12
2000940c:	e8730014 	lwi	r3, r19, 20
20009410:	64630402 	bslli	r3, r3, 2
20009414:	10641800 	addk	r3, r4, r3
20009418:	e8830000 	lwi	r4, r3, 0
2000941c:	30840001 	addik	r4, r4, 1
20009420:	f8830000 	swi	r4, r3, 0
    return value;
20009424:	e4730004 	lhui	r3, r19, 4
}
20009428:	10330000 	addk	r1, r19, r0
2000942c:	ea610008 	lwi	r19, r1, 8
20009430:	3021000c 	addik	r1, r1, 12
20009434:	b60f0008 	rtsd	r15, 8
20009438:	80000000 	or	r0, r0, r0

2000943c <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000943c:	3021fff8 	addik	r1, r1, -8
20009440:	fa610004 	swi	r19, r1, 4
20009444:	12610000 	addk	r19, r1, r0
20009448:	f8b3000c 	swi	r5, r19, 12
2000944c:	10660000 	addk	r3, r6, r0
20009450:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20009454:	e873000c 	lwi	r3, r19, 12
20009458:	e8830004 	lwi	r4, r3, 4
2000945c:	e873000c 	lwi	r3, r19, 12
20009460:	e8630010 	lwi	r3, r3, 16
20009464:	e8a30000 	lwi	r5, r3, 0
20009468:	e873000c 	lwi	r3, r19, 12
2000946c:	e8630000 	lwi	r3, r3, 0
20009470:	3063ffff 	addik	r3, r3, -1
20009474:	84651800 	and	r3, r5, r3
20009478:	10631800 	addk	r3, r3, r3
2000947c:	10641800 	addk	r3, r4, r3
20009480:	e4930010 	lhui	r4, r19, 16
20009484:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20009488:	e873000c 	lwi	r3, r19, 12
2000948c:	e8630010 	lwi	r3, r3, 16
20009490:	e8830000 	lwi	r4, r3, 0
20009494:	30840001 	addik	r4, r4, 1
20009498:	f8830000 	swi	r4, r3, 0
}
2000949c:	10330000 	addk	r1, r19, r0
200094a0:	ea610004 	lwi	r19, r1, 4
200094a4:	30210008 	addik	r1, r1, 8
200094a8:	b60f0008 	rtsd	r15, 8
200094ac:	80000000 	or	r0, r0, r0

200094b0 <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200094b0:	3021fff8 	addik	r1, r1, -8
200094b4:	fa610004 	swi	r19, r1, 4
200094b8:	12610000 	addk	r19, r1, r0
200094bc:	f8b3000c 	swi	r5, r19, 12
200094c0:	f8d30010 	swi	r6, r19, 16
200094c4:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200094c8:	e873000c 	lwi	r3, r19, 12
200094cc:	e8630010 	lwi	r3, r3, 16
200094d0:	e8830000 	lwi	r4, r3, 0
200094d4:	e873000c 	lwi	r3, r19, 12
200094d8:	e8a3000c 	lwi	r5, r3, 12
200094dc:	e8730010 	lwi	r3, r19, 16
200094e0:	64630402 	bslli	r3, r3, 2
200094e4:	10651800 	addk	r3, r5, r3
200094e8:	e8630000 	lwi	r3, r3, 0
200094ec:	14a32000 	rsubk	r5, r3, r4
200094f0:	30600001 	addik	r3, r0, 1
200094f4:	e8930014 	lwi	r4, r19, 20
200094f8:	16442803 	cmpu	r18, r4, r5
200094fc:	bcb20008 	bgei	r18, 8		// 20009504
20009500:	10600000 	addk	r3, r0, r0
20009504:	a46300ff 	andi	r3, r3, 255
}
20009508:	10330000 	addk	r1, r19, r0
2000950c:	ea610004 	lwi	r19, r1, 4
20009510:	30210008 	addik	r1, r1, 8
20009514:	b60f0008 	rtsd	r15, 8
20009518:	80000000 	or	r0, r0, r0

2000951c <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000951c:	3021fff8 	addik	r1, r1, -8
20009520:	fa610004 	swi	r19, r1, 4
20009524:	12610000 	addk	r19, r1, r0
20009528:	f8b3000c 	swi	r5, r19, 12
2000952c:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20009530:	e873000c 	lwi	r3, r19, 12
20009534:	e8630010 	lwi	r3, r3, 16
20009538:	e8830000 	lwi	r4, r3, 0
2000953c:	e873000c 	lwi	r3, r19, 12
20009540:	e8a3000c 	lwi	r5, r3, 12
20009544:	e8730010 	lwi	r3, r19, 16
20009548:	64630402 	bslli	r3, r3, 2
2000954c:	10651800 	addk	r3, r5, r3
20009550:	e8630000 	lwi	r3, r3, 0
20009554:	14632000 	rsubk	r3, r3, r4
}
20009558:	10330000 	addk	r1, r19, r0
2000955c:	ea610004 	lwi	r19, r1, 4
20009560:	30210008 	addik	r1, r1, 8
20009564:	b60f0008 	rtsd	r15, 8
20009568:	80000000 	or	r0, r0, r0

2000956c <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000956c:	3021fff4 	addik	r1, r1, -12
20009570:	fa610008 	swi	r19, r1, 8
20009574:	12610000 	addk	r19, r1, r0
20009578:	f8b30010 	swi	r5, r19, 16
2000957c:	f8d30014 	swi	r6, r19, 20
20009580:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20009584:	f8130004 	swi	r0, r19, 4
20009588:	b800005c 	bri	92		// 200095e4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000958c:	e8730010 	lwi	r3, r19, 16
20009590:	e8830000 	lwi	r4, r3, 0
20009594:	e8730010 	lwi	r3, r19, 16
20009598:	e8a3000c 	lwi	r5, r3, 12
2000959c:	e8730004 	lwi	r3, r19, 4
200095a0:	64630402 	bslli	r3, r3, 2
200095a4:	10651800 	addk	r3, r5, r3
200095a8:	e8a30000 	lwi	r5, r3, 0
200095ac:	e8730010 	lwi	r3, r19, 16
200095b0:	e8630010 	lwi	r3, r3, 16
200095b4:	e8630000 	lwi	r3, r3, 0
200095b8:	14632800 	rsubk	r3, r3, r5
200095bc:	10641800 	addk	r3, r4, r3
200095c0:	30830001 	addik	r4, r3, 1
200095c4:	e8730018 	lwi	r3, r19, 24
200095c8:	16441803 	cmpu	r18, r4, r3
200095cc:	bc52000c 	blti	r18, 12		// 200095d8
            return 0;
200095d0:	10600000 	addk	r3, r0, r0
200095d4:	b8000024 	bri	36		// 200095f8
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200095d8:	e8730004 	lwi	r3, r19, 4
200095dc:	30630001 	addik	r3, r3, 1
200095e0:	f8730004 	swi	r3, r19, 4
200095e4:	e8930004 	lwi	r4, r19, 4
200095e8:	e8730014 	lwi	r3, r19, 20
200095ec:	16432003 	cmpu	r18, r3, r4
200095f0:	bc52ff9c 	blti	r18, -100		// 2000958c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200095f4:	30600001 	addik	r3, r0, 1
}
200095f8:	10330000 	addk	r1, r19, r0
200095fc:	ea610008 	lwi	r19, r1, 8
20009600:	3021000c 	addik	r1, r1, 12
20009604:	b60f0008 	rtsd	r15, 8
20009608:	80000000 	or	r0, r0, r0

2000960c <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000960c:	3021ffec 	addik	r1, r1, -20
20009610:	fa610010 	swi	r19, r1, 16
20009614:	12610000 	addk	r19, r1, r0
20009618:	f8b30018 	swi	r5, r19, 24
2000961c:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20009620:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20009624:	f8130004 	swi	r0, r19, 4
20009628:	b8000054 	bri	84		// 2000967c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000962c:	e8730018 	lwi	r3, r19, 24
20009630:	e8630010 	lwi	r3, r3, 16
20009634:	e8830000 	lwi	r4, r3, 0
20009638:	e8730018 	lwi	r3, r19, 24
2000963c:	e8a3000c 	lwi	r5, r3, 12
20009640:	e8730004 	lwi	r3, r19, 4
20009644:	64630402 	bslli	r3, r3, 2
20009648:	10651800 	addk	r3, r5, r3
2000964c:	e8630000 	lwi	r3, r3, 0
20009650:	14632000 	rsubk	r3, r3, r4
20009654:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20009658:	e8930008 	lwi	r4, r19, 8
2000965c:	e873000c 	lwi	r3, r19, 12
20009660:	16441803 	cmpu	r18, r4, r3
20009664:	bcb20008 	bgei	r18, 8		// 2000966c
20009668:	10640000 	addk	r3, r4, r0
2000966c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20009670:	e8730004 	lwi	r3, r19, 4
20009674:	30630001 	addik	r3, r3, 1
20009678:	f8730004 	swi	r3, r19, 4
2000967c:	e8930004 	lwi	r4, r19, 4
20009680:	e873001c 	lwi	r3, r19, 28
20009684:	16432003 	cmpu	r18, r3, r4
20009688:	bc52ffa4 	blti	r18, -92		// 2000962c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000968c:	e8730018 	lwi	r3, r19, 24
20009690:	e8830000 	lwi	r4, r3, 0
20009694:	e8730008 	lwi	r3, r19, 8
20009698:	14632000 	rsubk	r3, r3, r4
}
2000969c:	10330000 	addk	r1, r19, r0
200096a0:	ea610010 	lwi	r19, r1, 16
200096a4:	30210014 	addik	r1, r1, 20
200096a8:	b60f0008 	rtsd	r15, 8
200096ac:	80000000 	or	r0, r0, r0

200096b0 <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200096b0:	3021fff4 	addik	r1, r1, -12
200096b4:	fa610008 	swi	r19, r1, 8
200096b8:	12610000 	addk	r19, r1, r0
200096bc:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
200096c0:	e8730010 	lwi	r3, r19, 16
200096c4:	e8630010 	lwi	r3, r3, 16
200096c8:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200096cc:	f8130004 	swi	r0, r19, 4
200096d0:	b8000028 	bri	40		// 200096f8
        fifo->read_inds[i] = 0;
200096d4:	e8730010 	lwi	r3, r19, 16
200096d8:	e883000c 	lwi	r4, r3, 12
200096dc:	e8730004 	lwi	r3, r19, 4
200096e0:	64630402 	bslli	r3, r3, 2
200096e4:	10641800 	addk	r3, r4, r3
200096e8:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200096ec:	e8730004 	lwi	r3, r19, 4
200096f0:	30630001 	addik	r3, r3, 1
200096f4:	f8730004 	swi	r3, r19, 4
200096f8:	e8730010 	lwi	r3, r19, 16
200096fc:	e8830008 	lwi	r4, r3, 8
20009700:	e8730004 	lwi	r3, r19, 4
20009704:	16441803 	cmpu	r18, r4, r3
20009708:	bc52ffcc 	blti	r18, -52		// 200096d4
        fifo->read_inds[i] = 0;
    }
}
2000970c:	10330000 	addk	r1, r19, r0
20009710:	ea610008 	lwi	r19, r1, 8
20009714:	3021000c 	addik	r1, r1, 12
20009718:	b60f0008 	rtsd	r15, 8
2000971c:	80000000 	or	r0, r0, r0

20009720 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20009720:	3021fff4 	addik	r1, r1, -12
20009724:	fa610008 	swi	r19, r1, 8
20009728:	12610000 	addk	r19, r1, r0
2000972c:	f8b30010 	swi	r5, r19, 16
20009730:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20009734:	e8730010 	lwi	r3, r19, 16
20009738:	e8830004 	lwi	r4, r3, 4
2000973c:	e8730010 	lwi	r3, r19, 16
20009740:	e8a3000c 	lwi	r5, r3, 12
20009744:	e8730014 	lwi	r3, r19, 20
20009748:	64630402 	bslli	r3, r3, 2
2000974c:	10651800 	addk	r3, r5, r3
20009750:	e8a30000 	lwi	r5, r3, 0
20009754:	e8730010 	lwi	r3, r19, 16
20009758:	e8630000 	lwi	r3, r3, 0
2000975c:	3063ffff 	addik	r3, r3, -1
20009760:	84651800 	and	r3, r5, r3
20009764:	64630402 	bslli	r3, r3, 2
20009768:	10641800 	addk	r3, r4, r3
2000976c:	e8630000 	lwi	r3, r3, 0
20009770:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20009774:	e8730010 	lwi	r3, r19, 16
20009778:	e883000c 	lwi	r4, r3, 12
2000977c:	e8730014 	lwi	r3, r19, 20
20009780:	64630402 	bslli	r3, r3, 2
20009784:	10641800 	addk	r3, r4, r3
20009788:	e8830000 	lwi	r4, r3, 0
2000978c:	30840001 	addik	r4, r4, 1
20009790:	f8830000 	swi	r4, r3, 0
    return value;
20009794:	e8730004 	lwi	r3, r19, 4
}
20009798:	10330000 	addk	r1, r19, r0
2000979c:	ea610008 	lwi	r19, r1, 8
200097a0:	3021000c 	addik	r1, r1, 12
200097a4:	b60f0008 	rtsd	r15, 8
200097a8:	80000000 	or	r0, r0, r0

200097ac <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200097ac:	3021fff8 	addik	r1, r1, -8
200097b0:	fa610004 	swi	r19, r1, 4
200097b4:	12610000 	addk	r19, r1, r0
200097b8:	f8b3000c 	swi	r5, r19, 12
200097bc:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200097c0:	e873000c 	lwi	r3, r19, 12
200097c4:	e8830004 	lwi	r4, r3, 4
200097c8:	e873000c 	lwi	r3, r19, 12
200097cc:	e8630010 	lwi	r3, r3, 16
200097d0:	e8a30000 	lwi	r5, r3, 0
200097d4:	e873000c 	lwi	r3, r19, 12
200097d8:	e8630000 	lwi	r3, r3, 0
200097dc:	3063ffff 	addik	r3, r3, -1
200097e0:	84651800 	and	r3, r5, r3
200097e4:	64630402 	bslli	r3, r3, 2
200097e8:	10641800 	addk	r3, r4, r3
200097ec:	e8930010 	lwi	r4, r19, 16
200097f0:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
200097f4:	e873000c 	lwi	r3, r19, 12
200097f8:	e8630010 	lwi	r3, r3, 16
200097fc:	e8830000 	lwi	r4, r3, 0
20009800:	30840001 	addik	r4, r4, 1
20009804:	f8830000 	swi	r4, r3, 0
}
20009808:	10330000 	addk	r1, r19, r0
2000980c:	ea610004 	lwi	r19, r1, 4
20009810:	30210008 	addik	r1, r1, 8
20009814:	b60f0008 	rtsd	r15, 8
20009818:	80000000 	or	r0, r0, r0

2000981c <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000981c:	3021fff8 	addik	r1, r1, -8
20009820:	fa610004 	swi	r19, r1, 4
20009824:	12610000 	addk	r19, r1, r0
20009828:	f8b3000c 	swi	r5, r19, 12
2000982c:	f8d30010 	swi	r6, r19, 16
20009830:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20009834:	e873000c 	lwi	r3, r19, 12
20009838:	e8630010 	lwi	r3, r3, 16
2000983c:	e8830000 	lwi	r4, r3, 0
20009840:	e873000c 	lwi	r3, r19, 12
20009844:	e8a3000c 	lwi	r5, r3, 12
20009848:	e8730010 	lwi	r3, r19, 16
2000984c:	64630402 	bslli	r3, r3, 2
20009850:	10651800 	addk	r3, r5, r3
20009854:	e8630000 	lwi	r3, r3, 0
20009858:	14a32000 	rsubk	r5, r3, r4
2000985c:	30600001 	addik	r3, r0, 1
20009860:	e8930014 	lwi	r4, r19, 20
20009864:	16442803 	cmpu	r18, r4, r5
20009868:	bcb20008 	bgei	r18, 8		// 20009870
2000986c:	10600000 	addk	r3, r0, r0
20009870:	a46300ff 	andi	r3, r3, 255
}
20009874:	10330000 	addk	r1, r19, r0
20009878:	ea610004 	lwi	r19, r1, 4
2000987c:	30210008 	addik	r1, r1, 8
20009880:	b60f0008 	rtsd	r15, 8
20009884:	80000000 	or	r0, r0, r0

20009888 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20009888:	3021fff8 	addik	r1, r1, -8
2000988c:	fa610004 	swi	r19, r1, 4
20009890:	12610000 	addk	r19, r1, r0
20009894:	f8b3000c 	swi	r5, r19, 12
20009898:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000989c:	e873000c 	lwi	r3, r19, 12
200098a0:	e8630010 	lwi	r3, r3, 16
200098a4:	e8830000 	lwi	r4, r3, 0
200098a8:	e873000c 	lwi	r3, r19, 12
200098ac:	e8a3000c 	lwi	r5, r3, 12
200098b0:	e8730010 	lwi	r3, r19, 16
200098b4:	64630402 	bslli	r3, r3, 2
200098b8:	10651800 	addk	r3, r5, r3
200098bc:	e8630000 	lwi	r3, r3, 0
200098c0:	14632000 	rsubk	r3, r3, r4
}
200098c4:	10330000 	addk	r1, r19, r0
200098c8:	ea610004 	lwi	r19, r1, 4
200098cc:	30210008 	addik	r1, r1, 8
200098d0:	b60f0008 	rtsd	r15, 8
200098d4:	80000000 	or	r0, r0, r0

200098d8 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200098d8:	3021fff4 	addik	r1, r1, -12
200098dc:	fa610008 	swi	r19, r1, 8
200098e0:	12610000 	addk	r19, r1, r0
200098e4:	f8b30010 	swi	r5, r19, 16
200098e8:	f8d30014 	swi	r6, r19, 20
200098ec:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200098f0:	f8130004 	swi	r0, r19, 4
200098f4:	b800005c 	bri	92		// 20009950
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200098f8:	e8730010 	lwi	r3, r19, 16
200098fc:	e8830000 	lwi	r4, r3, 0
20009900:	e8730010 	lwi	r3, r19, 16
20009904:	e8a3000c 	lwi	r5, r3, 12
20009908:	e8730004 	lwi	r3, r19, 4
2000990c:	64630402 	bslli	r3, r3, 2
20009910:	10651800 	addk	r3, r5, r3
20009914:	e8a30000 	lwi	r5, r3, 0
20009918:	e8730010 	lwi	r3, r19, 16
2000991c:	e8630010 	lwi	r3, r3, 16
20009920:	e8630000 	lwi	r3, r3, 0
20009924:	14632800 	rsubk	r3, r3, r5
20009928:	10641800 	addk	r3, r4, r3
2000992c:	30830001 	addik	r4, r3, 1
20009930:	e8730018 	lwi	r3, r19, 24
20009934:	16441803 	cmpu	r18, r4, r3
20009938:	bc52000c 	blti	r18, 12		// 20009944
            return 0;
2000993c:	10600000 	addk	r3, r0, r0
20009940:	b8000024 	bri	36		// 20009964
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20009944:	e8730004 	lwi	r3, r19, 4
20009948:	30630001 	addik	r3, r3, 1
2000994c:	f8730004 	swi	r3, r19, 4
20009950:	e8930004 	lwi	r4, r19, 4
20009954:	e8730014 	lwi	r3, r19, 20
20009958:	16432003 	cmpu	r18, r3, r4
2000995c:	bc52ff9c 	blti	r18, -100		// 200098f8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20009960:	30600001 	addik	r3, r0, 1
}
20009964:	10330000 	addk	r1, r19, r0
20009968:	ea610008 	lwi	r19, r1, 8
2000996c:	3021000c 	addik	r1, r1, 12
20009970:	b60f0008 	rtsd	r15, 8
20009974:	80000000 	or	r0, r0, r0

20009978 <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20009978:	3021ffec 	addik	r1, r1, -20
2000997c:	fa610010 	swi	r19, r1, 16
20009980:	12610000 	addk	r19, r1, r0
20009984:	f8b30018 	swi	r5, r19, 24
20009988:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000998c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20009990:	f8130004 	swi	r0, r19, 4
20009994:	b8000054 	bri	84		// 200099e8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20009998:	e8730018 	lwi	r3, r19, 24
2000999c:	e8630010 	lwi	r3, r3, 16
200099a0:	e8830000 	lwi	r4, r3, 0
200099a4:	e8730018 	lwi	r3, r19, 24
200099a8:	e8a3000c 	lwi	r5, r3, 12
200099ac:	e8730004 	lwi	r3, r19, 4
200099b0:	64630402 	bslli	r3, r3, 2
200099b4:	10651800 	addk	r3, r5, r3
200099b8:	e8630000 	lwi	r3, r3, 0
200099bc:	14632000 	rsubk	r3, r3, r4
200099c0:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200099c4:	e8930008 	lwi	r4, r19, 8
200099c8:	e873000c 	lwi	r3, r19, 12
200099cc:	16441803 	cmpu	r18, r4, r3
200099d0:	bcb20008 	bgei	r18, 8		// 200099d8
200099d4:	10640000 	addk	r3, r4, r0
200099d8:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200099dc:	e8730004 	lwi	r3, r19, 4
200099e0:	30630001 	addik	r3, r3, 1
200099e4:	f8730004 	swi	r3, r19, 4
200099e8:	e8930004 	lwi	r4, r19, 4
200099ec:	e873001c 	lwi	r3, r19, 28
200099f0:	16432003 	cmpu	r18, r3, r4
200099f4:	bc52ffa4 	blti	r18, -92		// 20009998
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200099f8:	e8730018 	lwi	r3, r19, 24
200099fc:	e8830000 	lwi	r4, r3, 0
20009a00:	e8730008 	lwi	r3, r19, 8
20009a04:	14632000 	rsubk	r3, r3, r4
}
20009a08:	10330000 	addk	r1, r19, r0
20009a0c:	ea610010 	lwi	r19, r1, 16
20009a10:	30210014 	addik	r1, r1, 20
20009a14:	b60f0008 	rtsd	r15, 8
20009a18:	80000000 	or	r0, r0, r0

20009a1c <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20009a1c:	3021fff4 	addik	r1, r1, -12
20009a20:	fa610008 	swi	r19, r1, 8
20009a24:	12610000 	addk	r19, r1, r0
20009a28:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20009a2c:	e8730010 	lwi	r3, r19, 16
20009a30:	e8630010 	lwi	r3, r3, 16
20009a34:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20009a38:	f8130004 	swi	r0, r19, 4
20009a3c:	b8000028 	bri	40		// 20009a64
        fifo->read_inds[i] = 0;
20009a40:	e8730010 	lwi	r3, r19, 16
20009a44:	e883000c 	lwi	r4, r3, 12
20009a48:	e8730004 	lwi	r3, r19, 4
20009a4c:	64630402 	bslli	r3, r3, 2
20009a50:	10641800 	addk	r3, r4, r3
20009a54:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20009a58:	e8730004 	lwi	r3, r19, 4
20009a5c:	30630001 	addik	r3, r3, 1
20009a60:	f8730004 	swi	r3, r19, 4
20009a64:	e8730010 	lwi	r3, r19, 16
20009a68:	e8830008 	lwi	r4, r3, 8
20009a6c:	e8730004 	lwi	r3, r19, 4
20009a70:	16441803 	cmpu	r18, r4, r3
20009a74:	bc52ffcc 	blti	r18, -52		// 20009a40
        fifo->read_inds[i] = 0;
    }
}
20009a78:	10330000 	addk	r1, r19, r0
20009a7c:	ea610008 	lwi	r19, r1, 8
20009a80:	3021000c 	addik	r1, r1, 12
20009a84:	b60f0008 	rtsd	r15, 8
20009a88:	80000000 	or	r0, r0, r0

20009a8c <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20009a8c:	3021fff0 	addik	r1, r1, -16
20009a90:	fa61000c 	swi	r19, r1, 12
20009a94:	12610000 	addk	r19, r1, r0
20009a98:	f8b30014 	swi	r5, r19, 20
20009a9c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20009aa0:	e8730014 	lwi	r3, r19, 20
20009aa4:	e8830004 	lwi	r4, r3, 4
20009aa8:	e8730014 	lwi	r3, r19, 20
20009aac:	e8a3000c 	lwi	r5, r3, 12
20009ab0:	e8730018 	lwi	r3, r19, 24
20009ab4:	64630402 	bslli	r3, r3, 2
20009ab8:	10651800 	addk	r3, r5, r3
20009abc:	e8a30000 	lwi	r5, r3, 0
20009ac0:	e8730014 	lwi	r3, r19, 20
20009ac4:	e8630000 	lwi	r3, r3, 0
20009ac8:	3063ffff 	addik	r3, r3, -1
20009acc:	84651800 	and	r3, r5, r3
20009ad0:	64630403 	bslli	r3, r3, 3
20009ad4:	10641800 	addk	r3, r4, r3
20009ad8:	e8830000 	lwi	r4, r3, 0
20009adc:	e8a30004 	lwi	r5, r3, 4
20009ae0:	f8930004 	swi	r4, r19, 4
20009ae4:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20009ae8:	e8730014 	lwi	r3, r19, 20
20009aec:	e883000c 	lwi	r4, r3, 12
20009af0:	e8730018 	lwi	r3, r19, 24
20009af4:	64630402 	bslli	r3, r3, 2
20009af8:	10641800 	addk	r3, r4, r3
20009afc:	e8830000 	lwi	r4, r3, 0
20009b00:	30840001 	addik	r4, r4, 1
20009b04:	f8830000 	swi	r4, r3, 0
    return value;
20009b08:	e8930004 	lwi	r4, r19, 4
20009b0c:	e8b30008 	lwi	r5, r19, 8
}
20009b10:	10640000 	addk	r3, r4, r0
20009b14:	10850000 	addk	r4, r5, r0
20009b18:	10330000 	addk	r1, r19, r0
20009b1c:	ea61000c 	lwi	r19, r1, 12
20009b20:	30210010 	addik	r1, r1, 16
20009b24:	b60f0008 	rtsd	r15, 8
20009b28:	80000000 	or	r0, r0, r0

20009b2c <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20009b2c:	3021fff8 	addik	r1, r1, -8
20009b30:	fa610004 	swi	r19, r1, 4
20009b34:	12610000 	addk	r19, r1, r0
20009b38:	f8b3000c 	swi	r5, r19, 12
20009b3c:	f8d30010 	swi	r6, r19, 16
20009b40:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20009b44:	e873000c 	lwi	r3, r19, 12
20009b48:	e8830004 	lwi	r4, r3, 4
20009b4c:	e873000c 	lwi	r3, r19, 12
20009b50:	e8630010 	lwi	r3, r3, 16
20009b54:	e8a30000 	lwi	r5, r3, 0
20009b58:	e873000c 	lwi	r3, r19, 12
20009b5c:	e8630000 	lwi	r3, r3, 0
20009b60:	3063ffff 	addik	r3, r3, -1
20009b64:	84651800 	and	r3, r5, r3
20009b68:	64630403 	bslli	r3, r3, 3
20009b6c:	10641800 	addk	r3, r4, r3
20009b70:	e8930010 	lwi	r4, r19, 16
20009b74:	e8b30014 	lwi	r5, r19, 20
20009b78:	f8830000 	swi	r4, r3, 0
20009b7c:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20009b80:	e873000c 	lwi	r3, r19, 12
20009b84:	e8630010 	lwi	r3, r3, 16
20009b88:	e8830000 	lwi	r4, r3, 0
20009b8c:	30840001 	addik	r4, r4, 1
20009b90:	f8830000 	swi	r4, r3, 0
}
20009b94:	10330000 	addk	r1, r19, r0
20009b98:	ea610004 	lwi	r19, r1, 4
20009b9c:	30210008 	addik	r1, r1, 8
20009ba0:	b60f0008 	rtsd	r15, 8
20009ba4:	80000000 	or	r0, r0, r0

20009ba8 <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20009ba8:	3021fff8 	addik	r1, r1, -8
20009bac:	fa610004 	swi	r19, r1, 4
20009bb0:	12610000 	addk	r19, r1, r0
20009bb4:	f8b3000c 	swi	r5, r19, 12
20009bb8:	f8d30010 	swi	r6, r19, 16
20009bbc:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20009bc0:	e873000c 	lwi	r3, r19, 12
20009bc4:	e8630010 	lwi	r3, r3, 16
20009bc8:	e8830000 	lwi	r4, r3, 0
20009bcc:	e873000c 	lwi	r3, r19, 12
20009bd0:	e8a3000c 	lwi	r5, r3, 12
20009bd4:	e8730010 	lwi	r3, r19, 16
20009bd8:	64630402 	bslli	r3, r3, 2
20009bdc:	10651800 	addk	r3, r5, r3
20009be0:	e8630000 	lwi	r3, r3, 0
20009be4:	14a32000 	rsubk	r5, r3, r4
20009be8:	30600001 	addik	r3, r0, 1
20009bec:	e8930014 	lwi	r4, r19, 20
20009bf0:	16442803 	cmpu	r18, r4, r5
20009bf4:	bcb20008 	bgei	r18, 8		// 20009bfc
20009bf8:	10600000 	addk	r3, r0, r0
20009bfc:	a46300ff 	andi	r3, r3, 255
}
20009c00:	10330000 	addk	r1, r19, r0
20009c04:	ea610004 	lwi	r19, r1, 4
20009c08:	30210008 	addik	r1, r1, 8
20009c0c:	b60f0008 	rtsd	r15, 8
20009c10:	80000000 	or	r0, r0, r0

20009c14 <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20009c14:	3021fff8 	addik	r1, r1, -8
20009c18:	fa610004 	swi	r19, r1, 4
20009c1c:	12610000 	addk	r19, r1, r0
20009c20:	f8b3000c 	swi	r5, r19, 12
20009c24:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20009c28:	e873000c 	lwi	r3, r19, 12
20009c2c:	e8630010 	lwi	r3, r3, 16
20009c30:	e8830000 	lwi	r4, r3, 0
20009c34:	e873000c 	lwi	r3, r19, 12
20009c38:	e8a3000c 	lwi	r5, r3, 12
20009c3c:	e8730010 	lwi	r3, r19, 16
20009c40:	64630402 	bslli	r3, r3, 2
20009c44:	10651800 	addk	r3, r5, r3
20009c48:	e8630000 	lwi	r3, r3, 0
20009c4c:	14632000 	rsubk	r3, r3, r4
}
20009c50:	10330000 	addk	r1, r19, r0
20009c54:	ea610004 	lwi	r19, r1, 4
20009c58:	30210008 	addik	r1, r1, 8
20009c5c:	b60f0008 	rtsd	r15, 8
20009c60:	80000000 	or	r0, r0, r0

20009c64 <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20009c64:	3021fff4 	addik	r1, r1, -12
20009c68:	fa610008 	swi	r19, r1, 8
20009c6c:	12610000 	addk	r19, r1, r0
20009c70:	f8b30010 	swi	r5, r19, 16
20009c74:	f8d30014 	swi	r6, r19, 20
20009c78:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20009c7c:	f8130004 	swi	r0, r19, 4
20009c80:	b800005c 	bri	92		// 20009cdc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20009c84:	e8730010 	lwi	r3, r19, 16
20009c88:	e8830000 	lwi	r4, r3, 0
20009c8c:	e8730010 	lwi	r3, r19, 16
20009c90:	e8a3000c 	lwi	r5, r3, 12
20009c94:	e8730004 	lwi	r3, r19, 4
20009c98:	64630402 	bslli	r3, r3, 2
20009c9c:	10651800 	addk	r3, r5, r3
20009ca0:	e8a30000 	lwi	r5, r3, 0
20009ca4:	e8730010 	lwi	r3, r19, 16
20009ca8:	e8630010 	lwi	r3, r3, 16
20009cac:	e8630000 	lwi	r3, r3, 0
20009cb0:	14632800 	rsubk	r3, r3, r5
20009cb4:	10641800 	addk	r3, r4, r3
20009cb8:	30830001 	addik	r4, r3, 1
20009cbc:	e8730018 	lwi	r3, r19, 24
20009cc0:	16441803 	cmpu	r18, r4, r3
20009cc4:	bc52000c 	blti	r18, 12		// 20009cd0
            return 0;
20009cc8:	10600000 	addk	r3, r0, r0
20009ccc:	b8000024 	bri	36		// 20009cf0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20009cd0:	e8730004 	lwi	r3, r19, 4
20009cd4:	30630001 	addik	r3, r3, 1
20009cd8:	f8730004 	swi	r3, r19, 4
20009cdc:	e8930004 	lwi	r4, r19, 4
20009ce0:	e8730014 	lwi	r3, r19, 20
20009ce4:	16432003 	cmpu	r18, r3, r4
20009ce8:	bc52ff9c 	blti	r18, -100		// 20009c84
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20009cec:	30600001 	addik	r3, r0, 1
}
20009cf0:	10330000 	addk	r1, r19, r0
20009cf4:	ea610008 	lwi	r19, r1, 8
20009cf8:	3021000c 	addik	r1, r1, 12
20009cfc:	b60f0008 	rtsd	r15, 8
20009d00:	80000000 	or	r0, r0, r0

20009d04 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20009d04:	3021ffec 	addik	r1, r1, -20
20009d08:	fa610010 	swi	r19, r1, 16
20009d0c:	12610000 	addk	r19, r1, r0
20009d10:	f8b30018 	swi	r5, r19, 24
20009d14:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20009d18:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20009d1c:	f8130004 	swi	r0, r19, 4
20009d20:	b8000054 	bri	84		// 20009d74
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20009d24:	e8730018 	lwi	r3, r19, 24
20009d28:	e8630010 	lwi	r3, r3, 16
20009d2c:	e8830000 	lwi	r4, r3, 0
20009d30:	e8730018 	lwi	r3, r19, 24
20009d34:	e8a3000c 	lwi	r5, r3, 12
20009d38:	e8730004 	lwi	r3, r19, 4
20009d3c:	64630402 	bslli	r3, r3, 2
20009d40:	10651800 	addk	r3, r5, r3
20009d44:	e8630000 	lwi	r3, r3, 0
20009d48:	14632000 	rsubk	r3, r3, r4
20009d4c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20009d50:	e8930008 	lwi	r4, r19, 8
20009d54:	e873000c 	lwi	r3, r19, 12
20009d58:	16441803 	cmpu	r18, r4, r3
20009d5c:	bcb20008 	bgei	r18, 8		// 20009d64
20009d60:	10640000 	addk	r3, r4, r0
20009d64:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20009d68:	e8730004 	lwi	r3, r19, 4
20009d6c:	30630001 	addik	r3, r3, 1
20009d70:	f8730004 	swi	r3, r19, 4
20009d74:	e8930004 	lwi	r4, r19, 4
20009d78:	e873001c 	lwi	r3, r19, 28
20009d7c:	16432003 	cmpu	r18, r3, r4
20009d80:	bc52ffa4 	blti	r18, -92		// 20009d24
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20009d84:	e8730018 	lwi	r3, r19, 24
20009d88:	e8830000 	lwi	r4, r3, 0
20009d8c:	e8730008 	lwi	r3, r19, 8
20009d90:	14632000 	rsubk	r3, r3, r4
}
20009d94:	10330000 	addk	r1, r19, r0
20009d98:	ea610010 	lwi	r19, r1, 16
20009d9c:	30210014 	addik	r1, r1, 20
20009da0:	b60f0008 	rtsd	r15, 8
20009da4:	80000000 	or	r0, r0, r0

20009da8 <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20009da8:	3021fff4 	addik	r1, r1, -12
20009dac:	fa610008 	swi	r19, r1, 8
20009db0:	12610000 	addk	r19, r1, r0
20009db4:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20009db8:	e8730010 	lwi	r3, r19, 16
20009dbc:	e8630010 	lwi	r3, r3, 16
20009dc0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20009dc4:	f8130004 	swi	r0, r19, 4
20009dc8:	b8000028 	bri	40		// 20009df0
        fifo->read_inds[i] = 0;
20009dcc:	e8730010 	lwi	r3, r19, 16
20009dd0:	e883000c 	lwi	r4, r3, 12
20009dd4:	e8730004 	lwi	r3, r19, 4
20009dd8:	64630402 	bslli	r3, r3, 2
20009ddc:	10641800 	addk	r3, r4, r3
20009de0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20009de4:	e8730004 	lwi	r3, r19, 4
20009de8:	30630001 	addik	r3, r3, 1
20009dec:	f8730004 	swi	r3, r19, 4
20009df0:	e8730010 	lwi	r3, r19, 16
20009df4:	e8830008 	lwi	r4, r3, 8
20009df8:	e8730004 	lwi	r3, r19, 4
20009dfc:	16441803 	cmpu	r18, r4, r3
20009e00:	bc52ffcc 	blti	r18, -52		// 20009dcc
        fifo->read_inds[i] = 0;
    }
}
20009e04:	10330000 	addk	r1, r19, r0
20009e08:	ea610008 	lwi	r19, r1, 8
20009e0c:	3021000c 	addik	r1, r1, 12
20009e10:	b60f0008 	rtsd	r15, 8
20009e14:	80000000 	or	r0, r0, r0

20009e18 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20009e18:	3021fff4 	addik	r1, r1, -12
20009e1c:	fa610008 	swi	r19, r1, 8
20009e20:	12610000 	addk	r19, r1, r0
20009e24:	f8b30010 	swi	r5, r19, 16
20009e28:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20009e2c:	e8730010 	lwi	r3, r19, 16
20009e30:	e8830004 	lwi	r4, r3, 4
20009e34:	e8730010 	lwi	r3, r19, 16
20009e38:	e8a3000c 	lwi	r5, r3, 12
20009e3c:	e8730014 	lwi	r3, r19, 20
20009e40:	64630402 	bslli	r3, r3, 2
20009e44:	10651800 	addk	r3, r5, r3
20009e48:	e8a30000 	lwi	r5, r3, 0
20009e4c:	e8730010 	lwi	r3, r19, 16
20009e50:	e8630000 	lwi	r3, r3, 0
20009e54:	3063ffff 	addik	r3, r3, -1
20009e58:	84651800 	and	r3, r5, r3
20009e5c:	64630402 	bslli	r3, r3, 2
20009e60:	10641800 	addk	r3, r4, r3
20009e64:	e8630000 	lwi	r3, r3, 0
20009e68:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20009e6c:	e8730010 	lwi	r3, r19, 16
20009e70:	e883000c 	lwi	r4, r3, 12
20009e74:	e8730014 	lwi	r3, r19, 20
20009e78:	64630402 	bslli	r3, r3, 2
20009e7c:	10641800 	addk	r3, r4, r3
20009e80:	e8830000 	lwi	r4, r3, 0
20009e84:	30840001 	addik	r4, r4, 1
20009e88:	f8830000 	swi	r4, r3, 0
    return value;
20009e8c:	e8730004 	lwi	r3, r19, 4
}
20009e90:	10330000 	addk	r1, r19, r0
20009e94:	ea610008 	lwi	r19, r1, 8
20009e98:	3021000c 	addik	r1, r1, 12
20009e9c:	b60f0008 	rtsd	r15, 8
20009ea0:	80000000 	or	r0, r0, r0

20009ea4 <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20009ea4:	3021fff8 	addik	r1, r1, -8
20009ea8:	fa610004 	swi	r19, r1, 4
20009eac:	12610000 	addk	r19, r1, r0
20009eb0:	f8b3000c 	swi	r5, r19, 12
20009eb4:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20009eb8:	e873000c 	lwi	r3, r19, 12
20009ebc:	e8830004 	lwi	r4, r3, 4
20009ec0:	e873000c 	lwi	r3, r19, 12
20009ec4:	e8630010 	lwi	r3, r3, 16
20009ec8:	e8a30000 	lwi	r5, r3, 0
20009ecc:	e873000c 	lwi	r3, r19, 12
20009ed0:	e8630000 	lwi	r3, r3, 0
20009ed4:	3063ffff 	addik	r3, r3, -1
20009ed8:	84651800 	and	r3, r5, r3
20009edc:	64630402 	bslli	r3, r3, 2
20009ee0:	10641800 	addk	r3, r4, r3
20009ee4:	e8930010 	lwi	r4, r19, 16
20009ee8:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20009eec:	e873000c 	lwi	r3, r19, 12
20009ef0:	e8630010 	lwi	r3, r3, 16
20009ef4:	e8830000 	lwi	r4, r3, 0
20009ef8:	30840001 	addik	r4, r4, 1
20009efc:	f8830000 	swi	r4, r3, 0
}
20009f00:	10330000 	addk	r1, r19, r0
20009f04:	ea610004 	lwi	r19, r1, 4
20009f08:	30210008 	addik	r1, r1, 8
20009f0c:	b60f0008 	rtsd	r15, 8
20009f10:	80000000 	or	r0, r0, r0

20009f14 <read_YUV_i>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_YUV_i() {
20009f14:	3021ffe0 	addik	r1, r1, -32
20009f18:	f9e10000 	swi	r15, r1, 0
20009f1c:	fa61001c 	swi	r19, r1, 28
20009f20:	12610000 	addk	r19, r1, r0
		index_YUV_i = decoder_merger_YUV_i->read_inds[1];
20009f24:	b0002004 	imm	8196
20009f28:	e8605a00 	lwi	r3, r0, 23040	// 20045a00 <decoder_merger_YUV_i>
20009f2c:	e863000c 	lwi	r3, r3, 12
20009f30:	e8630004 	lwi	r3, r3, 4
20009f34:	b0002004 	imm	8196
20009f38:	f8608ef8 	swi	r3, r0, -28936	// 20048ef8 <index_YUV_i>
		numTokens_YUV_i = index_YUV_i + fifo_i16_get_num_tokens(decoder_merger_YUV_i, 1);
20009f3c:	b0002004 	imm	8196
20009f40:	e8605a00 	lwi	r3, r0, 23040	// 20045a00 <decoder_merger_YUV_i>
20009f44:	10a30000 	addk	r5, r3, r0
20009f48:	30c00001 	addik	r6, r0, 1
20009f4c:	b9f4e48c 	brlid	r15, -7028	// 200083d8 <fifo_i16_get_num_tokens>
20009f50:	80000000 	or	r0, r0, r0
20009f54:	10830000 	addk	r4, r3, r0
20009f58:	b0002004 	imm	8196
20009f5c:	e8608ef8 	lwi	r3, r0, -28936	// 20048ef8 <index_YUV_i>
20009f60:	10641800 	addk	r3, r4, r3
20009f64:	b0002004 	imm	8196
20009f68:	f8608efc 	swi	r3, r0, -28932	// 20048efc <numTokens_YUV_i>
	}
20009f6c:	e9e10000 	lwi	r15, r1, 0
20009f70:	10330000 	addk	r1, r19, r0
20009f74:	ea61001c 	lwi	r19, r1, 28
20009f78:	30210020 	addik	r1, r1, 32
20009f7c:	b60f0008 	rtsd	r15, 8
20009f80:	80000000 	or	r0, r0, r0

20009f84 <read_end_YUV_i>:
	
	static void read_end_YUV_i() {
20009f84:	3021fff8 	addik	r1, r1, -8
20009f88:	fa610004 	swi	r19, r1, 4
20009f8c:	12610000 	addk	r19, r1, r0
		decoder_merger_YUV_i->read_inds[1] = index_YUV_i;
20009f90:	b0002004 	imm	8196
20009f94:	e8605a00 	lwi	r3, r0, 23040	// 20045a00 <decoder_merger_YUV_i>
20009f98:	e863000c 	lwi	r3, r3, 12
20009f9c:	30630004 	addik	r3, r3, 4
20009fa0:	b0002004 	imm	8196
20009fa4:	e8808ef8 	lwi	r4, r0, -28936	// 20048ef8 <index_YUV_i>
20009fa8:	f8830000 	swi	r4, r3, 0
	}
20009fac:	10330000 	addk	r1, r19, r0
20009fb0:	ea610004 	lwi	r19, r1, 4
20009fb4:	30210008 	addik	r1, r1, 8
20009fb8:	b60f0008 	rtsd	r15, 8
20009fbc:	80000000 	or	r0, r0, r0

20009fc0 <write_YUV>:

	static void write_YUV() {
20009fc0:	3021ffe0 	addik	r1, r1, -32
20009fc4:	f9e10000 	swi	r15, r1, 0
20009fc8:	fa61001c 	swi	r19, r1, 28
20009fcc:	12610000 	addk	r19, r1, r0
		index_YUV = (*decoder_merger_YUV->write_ind);
20009fd0:	b0002004 	imm	8196
20009fd4:	e8605904 	lwi	r3, r0, 22788	// 20045904 <decoder_merger_YUV>
20009fd8:	e8630010 	lwi	r3, r3, 16
20009fdc:	e8630000 	lwi	r3, r3, 0
20009fe0:	b0002004 	imm	8196
20009fe4:	f8608f00 	swi	r3, r0, -28928	// 20048f00 <index_YUV>
		numFree_YUV = index_YUV + fifo_u8_get_room(decoder_merger_YUV, NUM_READERS_YUV);
20009fe8:	b0002004 	imm	8196
20009fec:	e8605904 	lwi	r3, r0, 22788	// 20045904 <decoder_merger_YUV>
20009ff0:	10a30000 	addk	r5, r3, r0
20009ff4:	30c00001 	addik	r6, r0, 1
20009ff8:	b9f4ef3c 	brlid	r15, -4292	// 20008f34 <fifo_u8_get_room>
20009ffc:	80000000 	or	r0, r0, r0
2000a000:	10830000 	addk	r4, r3, r0
2000a004:	b0002004 	imm	8196
2000a008:	e8608f00 	lwi	r3, r0, -28928	// 20048f00 <index_YUV>
2000a00c:	10641800 	addk	r3, r4, r3
2000a010:	b0002004 	imm	8196
2000a014:	f8608f04 	swi	r3, r0, -28924	// 20048f04 <numFree_YUV>
	}
2000a018:	e9e10000 	lwi	r15, r1, 0
2000a01c:	10330000 	addk	r1, r19, r0
2000a020:	ea61001c 	lwi	r19, r1, 28
2000a024:	30210020 	addik	r1, r1, 32
2000a028:	b60f0008 	rtsd	r15, 8
2000a02c:	80000000 	or	r0, r0, r0

2000a030 <write_end_YUV>:
	
	static void write_end_YUV() {
2000a030:	3021fff8 	addik	r1, r1, -8
2000a034:	fa610004 	swi	r19, r1, 4
2000a038:	12610000 	addk	r19, r1, r0
		(*decoder_merger_YUV->write_ind) = index_YUV;
2000a03c:	b0002004 	imm	8196
2000a040:	e8605904 	lwi	r3, r0, 22788	// 20045904 <decoder_merger_YUV>
2000a044:	e8630010 	lwi	r3, r3, 16
2000a048:	b0002004 	imm	8196
2000a04c:	e8808f00 	lwi	r4, r0, -28928	// 20048f00 <index_YUV>
2000a050:	f8830000 	swi	r4, r3, 0
	}
2000a054:	10330000 	addk	r1, r19, r0
2000a058:	ea610004 	lwi	r19, r1, 4
2000a05c:	30210008 	addik	r1, r1, 8
2000a060:	b60f0008 	rtsd	r15, 8
2000a064:	80000000 	or	r0, r0, r0

2000a068 <isSchedulable_Y>:
	// Functions/procedures


	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_Y() {
2000a068:	3021fff4 	addik	r1, r1, -12
2000a06c:	fa610008 	swi	r19, r1, 8
2000a070:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2000a074:	30600001 	addik	r3, r0, 1
2000a078:	f8730004 	swi	r3, r19, 4
		return result;
2000a07c:	e8730004 	lwi	r3, r19, 4
	}
2000a080:	10330000 	addk	r1, r19, r0
2000a084:	ea610008 	lwi	r19, r1, 8
2000a088:	3021000c 	addik	r1, r1, 12
2000a08c:	b60f0008 	rtsd	r15, 8
2000a090:	80000000 	or	r0, r0, r0

2000a094 <Y>:
	
	static void Y() {
2000a094:	3021ffc8 	addik	r1, r1, -56
2000a098:	f9e10000 	swi	r15, r1, 0
2000a09c:	fa610034 	swi	r19, r1, 52
2000a0a0:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_YUV_i = index_YUV_i % SIZE_YUV_i;
2000a0a4:	b0002004 	imm	8196
2000a0a8:	e8608ef8 	lwi	r3, r0, -28936	// 20048ef8 <index_YUV_i>
2000a0ac:	a46301ff 	andi	r3, r3, 511
2000a0b0:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_YUV = index_YUV % SIZE_YUV;
2000a0b4:	b0002004 	imm	8196
2000a0b8:	e8608f00 	lwi	r3, r0, -28928	// 20048f00 <index_YUV>
2000a0bc:	a46301ff 	andi	r3, r3, 511
2000a0c0:	f8730028 	swi	r3, r19, 40
		i16 tmp_YUV_i;
		i16 tmp_YUV_i0;
		i16 tmp_YUV_i1;
		i16 tmp_YUV_i2;
	
		j = 0;
2000a0c4:	f813001c 	swi	r0, r19, 28
		while (j <= 7) {
2000a0c8:	b80000b4 	bri	180		// 2000a17c
			i = 0;
2000a0cc:	f8130020 	swi	r0, r19, 32
			while (i <= 7) {
2000a0d0:	b8000090 	bri	144		// 2000a160
				tmp_YUV_i = tokens_YUV_i[(index_YUV_i + (i + j * 8)) % SIZE_YUV_i];
2000a0d4:	b0002004 	imm	8196
2000a0d8:	e8605a00 	lwi	r3, r0, 23040	// 20045a00 <decoder_merger_YUV_i>
2000a0dc:	e8830004 	lwi	r4, r3, 4
2000a0e0:	e873001c 	lwi	r3, r19, 28
2000a0e4:	64a30403 	bslli	r5, r3, 3
2000a0e8:	e8730020 	lwi	r3, r19, 32
2000a0ec:	10651800 	addk	r3, r5, r3
2000a0f0:	10a30000 	addk	r5, r3, r0
2000a0f4:	b0002004 	imm	8196
2000a0f8:	e8608ef8 	lwi	r3, r0, -28936	// 20048ef8 <index_YUV_i>
2000a0fc:	10651800 	addk	r3, r5, r3
2000a100:	a46301ff 	andi	r3, r3, 511
2000a104:	10631800 	addk	r3, r3, r3
2000a108:	10641800 	addk	r3, r4, r3
2000a10c:	e4630000 	lhui	r3, r3, 0
2000a110:	f473002c 	shi	r3, r19, 44
				tokens_YUV[(index_YUV + (i + j * 16)) % SIZE_YUV] = tmp_YUV_i;
2000a114:	b0002004 	imm	8196
2000a118:	e8605904 	lwi	r3, r0, 22788	// 20045904 <decoder_merger_YUV>
2000a11c:	e8830004 	lwi	r4, r3, 4
2000a120:	e873001c 	lwi	r3, r19, 28
2000a124:	64a30404 	bslli	r5, r3, 4
2000a128:	e8730020 	lwi	r3, r19, 32
2000a12c:	10651800 	addk	r3, r5, r3
2000a130:	10a30000 	addk	r5, r3, r0
2000a134:	b0002004 	imm	8196
2000a138:	e8608f00 	lwi	r3, r0, -28928	// 20048f00 <index_YUV>
2000a13c:	10651800 	addk	r3, r5, r3
2000a140:	a46301ff 	andi	r3, r3, 511
2000a144:	10641800 	addk	r3, r4, r3
2000a148:	e493002c 	lhui	r4, r19, 44
2000a14c:	a48400ff 	andi	r4, r4, 255
2000a150:	f0830000 	sbi	r4, r3, 0
				i = i + 1;
2000a154:	e8730020 	lwi	r3, r19, 32
2000a158:	30630001 	addik	r3, r3, 1
2000a15c:	f8730020 	swi	r3, r19, 32
		i16 tmp_YUV_i2;
	
		j = 0;
		while (j <= 7) {
			i = 0;
			while (i <= 7) {
2000a160:	e8930020 	lwi	r4, r19, 32
2000a164:	30600007 	addik	r3, r0, 7
2000a168:	16441801 	cmp	r18, r4, r3
2000a16c:	bcb2ff68 	bgei	r18, -152		// 2000a0d4
				tmp_YUV_i = tokens_YUV_i[(index_YUV_i + (i + j * 8)) % SIZE_YUV_i];
				tokens_YUV[(index_YUV + (i + j * 16)) % SIZE_YUV] = tmp_YUV_i;
				i = i + 1;
			}
			j = j + 1;
2000a170:	e873001c 	lwi	r3, r19, 28
2000a174:	30630001 	addik	r3, r3, 1
2000a178:	f873001c 	swi	r3, r19, 28
		i16 tmp_YUV_i0;
		i16 tmp_YUV_i1;
		i16 tmp_YUV_i2;
	
		j = 0;
		while (j <= 7) {
2000a17c:	e893001c 	lwi	r4, r19, 28
2000a180:	30600007 	addik	r3, r0, 7
2000a184:	16441801 	cmp	r18, r4, r3
2000a188:	bcb2ff44 	bgei	r18, -188		// 2000a0cc
				tokens_YUV[(index_YUV + (i + j * 16)) % SIZE_YUV] = tmp_YUV_i;
				i = i + 1;
			}
			j = j + 1;
		}
		j = 0;
2000a18c:	f813001c 	swi	r0, r19, 28
		while (j <= 7) {
2000a190:	b80000bc 	bri	188		// 2000a24c
			i = 0;
2000a194:	f8130020 	swi	r0, r19, 32
			while (i <= 7) {
2000a198:	b8000098 	bri	152		// 2000a230
				tmp_YUV_i0 = tokens_YUV_i[(index_YUV_i + (i + 64 + j * 8)) % SIZE_YUV_i];
2000a19c:	b0002004 	imm	8196
2000a1a0:	e8605a00 	lwi	r3, r0, 23040	// 20045a00 <decoder_merger_YUV_i>
2000a1a4:	e8830004 	lwi	r4, r3, 4
2000a1a8:	e8730020 	lwi	r3, r19, 32
2000a1ac:	30a30040 	addik	r5, r3, 64
2000a1b0:	e873001c 	lwi	r3, r19, 28
2000a1b4:	64630403 	bslli	r3, r3, 3
2000a1b8:	10651800 	addk	r3, r5, r3
2000a1bc:	10a30000 	addk	r5, r3, r0
2000a1c0:	b0002004 	imm	8196
2000a1c4:	e8608ef8 	lwi	r3, r0, -28936	// 20048ef8 <index_YUV_i>
2000a1c8:	10651800 	addk	r3, r5, r3
2000a1cc:	a46301ff 	andi	r3, r3, 511
2000a1d0:	10631800 	addk	r3, r3, r3
2000a1d4:	10641800 	addk	r3, r4, r3
2000a1d8:	e4630000 	lhui	r3, r3, 0
2000a1dc:	f473002e 	shi	r3, r19, 46
				tokens_YUV[(index_YUV + (i + 8 + j * 16)) % SIZE_YUV] = tmp_YUV_i0;
2000a1e0:	b0002004 	imm	8196
2000a1e4:	e8605904 	lwi	r3, r0, 22788	// 20045904 <decoder_merger_YUV>
2000a1e8:	e8830004 	lwi	r4, r3, 4
2000a1ec:	e8730020 	lwi	r3, r19, 32
2000a1f0:	30a30008 	addik	r5, r3, 8
2000a1f4:	e873001c 	lwi	r3, r19, 28
2000a1f8:	64630404 	bslli	r3, r3, 4
2000a1fc:	10651800 	addk	r3, r5, r3
2000a200:	10a30000 	addk	r5, r3, r0
2000a204:	b0002004 	imm	8196
2000a208:	e8608f00 	lwi	r3, r0, -28928	// 20048f00 <index_YUV>
2000a20c:	10651800 	addk	r3, r5, r3
2000a210:	a46301ff 	andi	r3, r3, 511
2000a214:	10641800 	addk	r3, r4, r3
2000a218:	e493002e 	lhui	r4, r19, 46
2000a21c:	a48400ff 	andi	r4, r4, 255
2000a220:	f0830000 	sbi	r4, r3, 0
				i = i + 1;
2000a224:	e8730020 	lwi	r3, r19, 32
2000a228:	30630001 	addik	r3, r3, 1
2000a22c:	f8730020 	swi	r3, r19, 32
			j = j + 1;
		}
		j = 0;
		while (j <= 7) {
			i = 0;
			while (i <= 7) {
2000a230:	e8930020 	lwi	r4, r19, 32
2000a234:	30600007 	addik	r3, r0, 7
2000a238:	16441801 	cmp	r18, r4, r3
2000a23c:	bcb2ff60 	bgei	r18, -160		// 2000a19c
				tmp_YUV_i0 = tokens_YUV_i[(index_YUV_i + (i + 64 + j * 8)) % SIZE_YUV_i];
				tokens_YUV[(index_YUV + (i + 8 + j * 16)) % SIZE_YUV] = tmp_YUV_i0;
				i = i + 1;
			}
			j = j + 1;
2000a240:	e873001c 	lwi	r3, r19, 28
2000a244:	30630001 	addik	r3, r3, 1
2000a248:	f873001c 	swi	r3, r19, 28
				i = i + 1;
			}
			j = j + 1;
		}
		j = 0;
		while (j <= 7) {
2000a24c:	e893001c 	lwi	r4, r19, 28
2000a250:	30600007 	addik	r3, r0, 7
2000a254:	16441801 	cmp	r18, r4, r3
2000a258:	bcb2ff3c 	bgei	r18, -196		// 2000a194
				tokens_YUV[(index_YUV + (i + 8 + j * 16)) % SIZE_YUV] = tmp_YUV_i0;
				i = i + 1;
			}
			j = j + 1;
		}
		j = 0;
2000a25c:	f813001c 	swi	r0, r19, 28
		while (j <= 7) {
2000a260:	b80000bc 	bri	188		// 2000a31c
			i = 0;
2000a264:	f8130020 	swi	r0, r19, 32
			while (i <= 7) {
2000a268:	b8000098 	bri	152		// 2000a300
				tmp_YUV_i1 = tokens_YUV_i[(index_YUV_i + (i + 2 * 64 + j * 8)) % SIZE_YUV_i];
2000a26c:	b0002004 	imm	8196
2000a270:	e8605a00 	lwi	r3, r0, 23040	// 20045a00 <decoder_merger_YUV_i>
2000a274:	e8830004 	lwi	r4, r3, 4
2000a278:	e8730020 	lwi	r3, r19, 32
2000a27c:	30a30080 	addik	r5, r3, 128
2000a280:	e873001c 	lwi	r3, r19, 28
2000a284:	64630403 	bslli	r3, r3, 3
2000a288:	10651800 	addk	r3, r5, r3
2000a28c:	10a30000 	addk	r5, r3, r0
2000a290:	b0002004 	imm	8196
2000a294:	e8608ef8 	lwi	r3, r0, -28936	// 20048ef8 <index_YUV_i>
2000a298:	10651800 	addk	r3, r5, r3
2000a29c:	a46301ff 	andi	r3, r3, 511
2000a2a0:	10631800 	addk	r3, r3, r3
2000a2a4:	10641800 	addk	r3, r4, r3
2000a2a8:	e4630000 	lhui	r3, r3, 0
2000a2ac:	f4730030 	shi	r3, r19, 48
				tokens_YUV[(index_YUV + (i + (j + 8) * 16)) % SIZE_YUV] = tmp_YUV_i1;
2000a2b0:	b0002004 	imm	8196
2000a2b4:	e8605904 	lwi	r3, r0, 22788	// 20045904 <decoder_merger_YUV>
2000a2b8:	e8830004 	lwi	r4, r3, 4
2000a2bc:	e873001c 	lwi	r3, r19, 28
2000a2c0:	30630008 	addik	r3, r3, 8
2000a2c4:	64a30404 	bslli	r5, r3, 4
2000a2c8:	e8730020 	lwi	r3, r19, 32
2000a2cc:	10651800 	addk	r3, r5, r3
2000a2d0:	10a30000 	addk	r5, r3, r0
2000a2d4:	b0002004 	imm	8196
2000a2d8:	e8608f00 	lwi	r3, r0, -28928	// 20048f00 <index_YUV>
2000a2dc:	10651800 	addk	r3, r5, r3
2000a2e0:	a46301ff 	andi	r3, r3, 511
2000a2e4:	10641800 	addk	r3, r4, r3
2000a2e8:	e4930030 	lhui	r4, r19, 48
2000a2ec:	a48400ff 	andi	r4, r4, 255
2000a2f0:	f0830000 	sbi	r4, r3, 0
				i = i + 1;
2000a2f4:	e8730020 	lwi	r3, r19, 32
2000a2f8:	30630001 	addik	r3, r3, 1
2000a2fc:	f8730020 	swi	r3, r19, 32
			j = j + 1;
		}
		j = 0;
		while (j <= 7) {
			i = 0;
			while (i <= 7) {
2000a300:	e8930020 	lwi	r4, r19, 32
2000a304:	30600007 	addik	r3, r0, 7
2000a308:	16441801 	cmp	r18, r4, r3
2000a30c:	bcb2ff60 	bgei	r18, -160		// 2000a26c
				tmp_YUV_i1 = tokens_YUV_i[(index_YUV_i + (i + 2 * 64 + j * 8)) % SIZE_YUV_i];
				tokens_YUV[(index_YUV + (i + (j + 8) * 16)) % SIZE_YUV] = tmp_YUV_i1;
				i = i + 1;
			}
			j = j + 1;
2000a310:	e873001c 	lwi	r3, r19, 28
2000a314:	30630001 	addik	r3, r3, 1
2000a318:	f873001c 	swi	r3, r19, 28
				i = i + 1;
			}
			j = j + 1;
		}
		j = 0;
		while (j <= 7) {
2000a31c:	e893001c 	lwi	r4, r19, 28
2000a320:	30600007 	addik	r3, r0, 7
2000a324:	16441801 	cmp	r18, r4, r3
2000a328:	bcb2ff3c 	bgei	r18, -196		// 2000a264
				tokens_YUV[(index_YUV + (i + (j + 8) * 16)) % SIZE_YUV] = tmp_YUV_i1;
				i = i + 1;
			}
			j = j + 1;
		}
		j = 0;
2000a32c:	f813001c 	swi	r0, r19, 28
		while (j <= 7) {
2000a330:	b80000c0 	bri	192		// 2000a3f0
			i = 0;
2000a334:	f8130020 	swi	r0, r19, 32
			while (i <= 7) {
2000a338:	b800009c 	bri	156		// 2000a3d4
				tmp_YUV_i2 = tokens_YUV_i[(index_YUV_i + (i + 3 * 64 + j * 8)) % SIZE_YUV_i];
2000a33c:	b0002004 	imm	8196
2000a340:	e8605a00 	lwi	r3, r0, 23040	// 20045a00 <decoder_merger_YUV_i>
2000a344:	e8830004 	lwi	r4, r3, 4
2000a348:	e8730020 	lwi	r3, r19, 32
2000a34c:	30a300c0 	addik	r5, r3, 192
2000a350:	e873001c 	lwi	r3, r19, 28
2000a354:	64630403 	bslli	r3, r3, 3
2000a358:	10651800 	addk	r3, r5, r3
2000a35c:	10a30000 	addk	r5, r3, r0
2000a360:	b0002004 	imm	8196
2000a364:	e8608ef8 	lwi	r3, r0, -28936	// 20048ef8 <index_YUV_i>
2000a368:	10651800 	addk	r3, r5, r3
2000a36c:	a46301ff 	andi	r3, r3, 511
2000a370:	10631800 	addk	r3, r3, r3
2000a374:	10641800 	addk	r3, r4, r3
2000a378:	e4630000 	lhui	r3, r3, 0
2000a37c:	f4730032 	shi	r3, r19, 50
				tokens_YUV[(index_YUV + (i + 8 + (j + 8) * 16)) % SIZE_YUV] = tmp_YUV_i2;
2000a380:	b0002004 	imm	8196
2000a384:	e8605904 	lwi	r3, r0, 22788	// 20045904 <decoder_merger_YUV>
2000a388:	e8830004 	lwi	r4, r3, 4
2000a38c:	e8730020 	lwi	r3, r19, 32
2000a390:	30a30008 	addik	r5, r3, 8
2000a394:	e873001c 	lwi	r3, r19, 28
2000a398:	30630008 	addik	r3, r3, 8
2000a39c:	64630404 	bslli	r3, r3, 4
2000a3a0:	10651800 	addk	r3, r5, r3
2000a3a4:	10a30000 	addk	r5, r3, r0
2000a3a8:	b0002004 	imm	8196
2000a3ac:	e8608f00 	lwi	r3, r0, -28928	// 20048f00 <index_YUV>
2000a3b0:	10651800 	addk	r3, r5, r3
2000a3b4:	a46301ff 	andi	r3, r3, 511
2000a3b8:	10641800 	addk	r3, r4, r3
2000a3bc:	e4930032 	lhui	r4, r19, 50
2000a3c0:	a48400ff 	andi	r4, r4, 255
2000a3c4:	f0830000 	sbi	r4, r3, 0
				i = i + 1;
2000a3c8:	e8730020 	lwi	r3, r19, 32
2000a3cc:	30630001 	addik	r3, r3, 1
2000a3d0:	f8730020 	swi	r3, r19, 32
			j = j + 1;
		}
		j = 0;
		while (j <= 7) {
			i = 0;
			while (i <= 7) {
2000a3d4:	e8930020 	lwi	r4, r19, 32
2000a3d8:	30600007 	addik	r3, r0, 7
2000a3dc:	16441801 	cmp	r18, r4, r3
2000a3e0:	bcb2ff5c 	bgei	r18, -164		// 2000a33c
				tmp_YUV_i2 = tokens_YUV_i[(index_YUV_i + (i + 3 * 64 + j * 8)) % SIZE_YUV_i];
				tokens_YUV[(index_YUV + (i + 8 + (j + 8) * 16)) % SIZE_YUV] = tmp_YUV_i2;
				i = i + 1;
			}
			j = j + 1;
2000a3e4:	e873001c 	lwi	r3, r19, 28
2000a3e8:	30630001 	addik	r3, r3, 1
2000a3ec:	f873001c 	swi	r3, r19, 28
				i = i + 1;
			}
			j = j + 1;
		}
		j = 0;
		while (j <= 7) {
2000a3f0:	e893001c 	lwi	r4, r19, 28
2000a3f4:	30600007 	addik	r3, r0, 7
2000a3f8:	16441801 	cmp	r18, r4, r3
2000a3fc:	bcb2ff38 	bgei	r18, -200		// 2000a334
			}
			j = j + 1;
		}
	
		// Update ports indexes
		index_YUV_i += 256;
2000a400:	b0002004 	imm	8196
2000a404:	e8608ef8 	lwi	r3, r0, -28936	// 20048ef8 <index_YUV_i>
2000a408:	30630100 	addik	r3, r3, 256
2000a40c:	b0002004 	imm	8196
2000a410:	f8608ef8 	swi	r3, r0, -28936	// 20048ef8 <index_YUV_i>
		index_YUV += 256;
2000a414:	b0002004 	imm	8196
2000a418:	e8608f00 	lwi	r3, r0, -28928	// 20048f00 <index_YUV>
2000a41c:	30630100 	addik	r3, r3, 256
2000a420:	b0002004 	imm	8196
2000a424:	f8608f00 	swi	r3, r0, -28928	// 20048f00 <index_YUV>
		
		read_end_YUV_i();
2000a428:	b9f4fb5c 	brlid	r15, -1188	// 20009f84 <read_end_YUV_i>
2000a42c:	80000000 	or	r0, r0, r0
		write_end_YUV();
2000a430:	b9f4fc00 	brlid	r15, -1024	// 2000a030 <write_end_YUV>
2000a434:	80000000 	or	r0, r0, r0
	}
2000a438:	e9e10000 	lwi	r15, r1, 0
2000a43c:	10330000 	addk	r1, r19, r0
2000a440:	ea610034 	lwi	r19, r1, 52
2000a444:	30210038 	addik	r1, r1, 56
2000a448:	b60f0008 	rtsd	r15, 8
2000a44c:	80000000 	or	r0, r0, r0

2000a450 <isSchedulable_U>:
	static i32 isSchedulable_U() {
2000a450:	3021fff4 	addik	r1, r1, -12
2000a454:	fa610008 	swi	r19, r1, 8
2000a458:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2000a45c:	30600001 	addik	r3, r0, 1
2000a460:	f8730004 	swi	r3, r19, 4
		return result;
2000a464:	e8730004 	lwi	r3, r19, 4
	}
2000a468:	10330000 	addk	r1, r19, r0
2000a46c:	ea610008 	lwi	r19, r1, 8
2000a470:	3021000c 	addik	r1, r1, 12
2000a474:	b60f0008 	rtsd	r15, 8
2000a478:	80000000 	or	r0, r0, r0

2000a47c <U>:
	
	static void U() {
2000a47c:	3021ffd0 	addik	r1, r1, -48
2000a480:	f9e10000 	swi	r15, r1, 0
2000a484:	fa61002c 	swi	r19, r1, 44
2000a488:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_YUV_i = index_YUV_i % SIZE_YUV_i;
2000a48c:	b0002004 	imm	8196
2000a490:	e8608ef8 	lwi	r3, r0, -28936	// 20048ef8 <index_YUV_i>
2000a494:	a46301ff 	andi	r3, r3, 511
2000a498:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_YUV = index_YUV % SIZE_YUV;
2000a49c:	b0002004 	imm	8196
2000a4a0:	e8608f00 	lwi	r3, r0, -28928	// 20048f00 <index_YUV>
2000a4a4:	a46301ff 	andi	r3, r3, 511
2000a4a8:	f8730024 	swi	r3, r19, 36
	
		i32 idx_YUV_i;
		u8 local_YUV_i;
	
		idx_YUV_i = 0;
2000a4ac:	f813001c 	swi	r0, r19, 28
		while (idx_YUV_i < 64) {
2000a4b0:	b8000070 	bri	112		// 2000a520
			local_YUV_i = tokens_YUV_i[(index_YUV_i + (idx_YUV_i)) % SIZE_YUV_i];
2000a4b4:	b0002004 	imm	8196
2000a4b8:	e8605a00 	lwi	r3, r0, 23040	// 20045a00 <decoder_merger_YUV_i>
2000a4bc:	e8830004 	lwi	r4, r3, 4
2000a4c0:	b0002004 	imm	8196
2000a4c4:	e8a08ef8 	lwi	r5, r0, -28936	// 20048ef8 <index_YUV_i>
2000a4c8:	e873001c 	lwi	r3, r19, 28
2000a4cc:	10651800 	addk	r3, r5, r3
2000a4d0:	a46301ff 	andi	r3, r3, 511
2000a4d4:	10631800 	addk	r3, r3, r3
2000a4d8:	10641800 	addk	r3, r4, r3
2000a4dc:	e4630000 	lhui	r3, r3, 0
2000a4e0:	90630061 	sext16	r3, r3
2000a4e4:	f0730028 	sbi	r3, r19, 40
			tokens_YUV[(index_YUV + (idx_YUV_i)) % SIZE_YUV] = local_YUV_i;
2000a4e8:	b0002004 	imm	8196
2000a4ec:	e8605904 	lwi	r3, r0, 22788	// 20045904 <decoder_merger_YUV>
2000a4f0:	e8830004 	lwi	r4, r3, 4
2000a4f4:	b0002004 	imm	8196
2000a4f8:	e8a08f00 	lwi	r5, r0, -28928	// 20048f00 <index_YUV>
2000a4fc:	e873001c 	lwi	r3, r19, 28
2000a500:	10651800 	addk	r3, r5, r3
2000a504:	a46301ff 	andi	r3, r3, 511
2000a508:	10641800 	addk	r3, r4, r3
2000a50c:	e0930028 	lbui	r4, r19, 40
2000a510:	f0830000 	sbi	r4, r3, 0
			idx_YUV_i = idx_YUV_i + 1;
2000a514:	e873001c 	lwi	r3, r19, 28
2000a518:	30630001 	addik	r3, r3, 1
2000a51c:	f873001c 	swi	r3, r19, 28
	
		i32 idx_YUV_i;
		u8 local_YUV_i;
	
		idx_YUV_i = 0;
		while (idx_YUV_i < 64) {
2000a520:	e893001c 	lwi	r4, r19, 28
2000a524:	3060003f 	addik	r3, r0, 63
2000a528:	16441801 	cmp	r18, r4, r3
2000a52c:	bcb2ff88 	bgei	r18, -120		// 2000a4b4
			tokens_YUV[(index_YUV + (idx_YUV_i)) % SIZE_YUV] = local_YUV_i;
			idx_YUV_i = idx_YUV_i + 1;
		}
	
		// Update ports indexes
		index_YUV_i += 64;
2000a530:	b0002004 	imm	8196
2000a534:	e8608ef8 	lwi	r3, r0, -28936	// 20048ef8 <index_YUV_i>
2000a538:	30630040 	addik	r3, r3, 64
2000a53c:	b0002004 	imm	8196
2000a540:	f8608ef8 	swi	r3, r0, -28936	// 20048ef8 <index_YUV_i>
		index_YUV += 64;
2000a544:	b0002004 	imm	8196
2000a548:	e8608f00 	lwi	r3, r0, -28928	// 20048f00 <index_YUV>
2000a54c:	30630040 	addik	r3, r3, 64
2000a550:	b0002004 	imm	8196
2000a554:	f8608f00 	swi	r3, r0, -28928	// 20048f00 <index_YUV>
		
		read_end_YUV_i();
2000a558:	b9f4fa2c 	brlid	r15, -1492	// 20009f84 <read_end_YUV_i>
2000a55c:	80000000 	or	r0, r0, r0
		write_end_YUV();
2000a560:	b9f4fad0 	brlid	r15, -1328	// 2000a030 <write_end_YUV>
2000a564:	80000000 	or	r0, r0, r0
	}
2000a568:	e9e10000 	lwi	r15, r1, 0
2000a56c:	10330000 	addk	r1, r19, r0
2000a570:	ea61002c 	lwi	r19, r1, 44
2000a574:	30210030 	addik	r1, r1, 48
2000a578:	b60f0008 	rtsd	r15, 8
2000a57c:	80000000 	or	r0, r0, r0

2000a580 <isSchedulable_V>:
	static i32 isSchedulable_V() {
2000a580:	3021fff4 	addik	r1, r1, -12
2000a584:	fa610008 	swi	r19, r1, 8
2000a588:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2000a58c:	30600001 	addik	r3, r0, 1
2000a590:	f8730004 	swi	r3, r19, 4
		return result;
2000a594:	e8730004 	lwi	r3, r19, 4
	}
2000a598:	10330000 	addk	r1, r19, r0
2000a59c:	ea610008 	lwi	r19, r1, 8
2000a5a0:	3021000c 	addik	r1, r1, 12
2000a5a4:	b60f0008 	rtsd	r15, 8
2000a5a8:	80000000 	or	r0, r0, r0

2000a5ac <V>:
	
	static void V() {
2000a5ac:	3021ffd0 	addik	r1, r1, -48
2000a5b0:	f9e10000 	swi	r15, r1, 0
2000a5b4:	fa61002c 	swi	r19, r1, 44
2000a5b8:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_YUV_i = index_YUV_i % SIZE_YUV_i;
2000a5bc:	b0002004 	imm	8196
2000a5c0:	e8608ef8 	lwi	r3, r0, -28936	// 20048ef8 <index_YUV_i>
2000a5c4:	a46301ff 	andi	r3, r3, 511
2000a5c8:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_YUV = index_YUV % SIZE_YUV;
2000a5cc:	b0002004 	imm	8196
2000a5d0:	e8608f00 	lwi	r3, r0, -28928	// 20048f00 <index_YUV>
2000a5d4:	a46301ff 	andi	r3, r3, 511
2000a5d8:	f8730024 	swi	r3, r19, 36
	
		i32 idx_YUV_i;
		u8 local_YUV_i;
	
		idx_YUV_i = 0;
2000a5dc:	f813001c 	swi	r0, r19, 28
		while (idx_YUV_i < 64) {
2000a5e0:	b8000070 	bri	112		// 2000a650
			local_YUV_i = tokens_YUV_i[(index_YUV_i + (idx_YUV_i)) % SIZE_YUV_i];
2000a5e4:	b0002004 	imm	8196
2000a5e8:	e8605a00 	lwi	r3, r0, 23040	// 20045a00 <decoder_merger_YUV_i>
2000a5ec:	e8830004 	lwi	r4, r3, 4
2000a5f0:	b0002004 	imm	8196
2000a5f4:	e8a08ef8 	lwi	r5, r0, -28936	// 20048ef8 <index_YUV_i>
2000a5f8:	e873001c 	lwi	r3, r19, 28
2000a5fc:	10651800 	addk	r3, r5, r3
2000a600:	a46301ff 	andi	r3, r3, 511
2000a604:	10631800 	addk	r3, r3, r3
2000a608:	10641800 	addk	r3, r4, r3
2000a60c:	e4630000 	lhui	r3, r3, 0
2000a610:	90630061 	sext16	r3, r3
2000a614:	f0730028 	sbi	r3, r19, 40
			tokens_YUV[(index_YUV + (idx_YUV_i)) % SIZE_YUV] = local_YUV_i;
2000a618:	b0002004 	imm	8196
2000a61c:	e8605904 	lwi	r3, r0, 22788	// 20045904 <decoder_merger_YUV>
2000a620:	e8830004 	lwi	r4, r3, 4
2000a624:	b0002004 	imm	8196
2000a628:	e8a08f00 	lwi	r5, r0, -28928	// 20048f00 <index_YUV>
2000a62c:	e873001c 	lwi	r3, r19, 28
2000a630:	10651800 	addk	r3, r5, r3
2000a634:	a46301ff 	andi	r3, r3, 511
2000a638:	10641800 	addk	r3, r4, r3
2000a63c:	e0930028 	lbui	r4, r19, 40
2000a640:	f0830000 	sbi	r4, r3, 0
			idx_YUV_i = idx_YUV_i + 1;
2000a644:	e873001c 	lwi	r3, r19, 28
2000a648:	30630001 	addik	r3, r3, 1
2000a64c:	f873001c 	swi	r3, r19, 28
	
		i32 idx_YUV_i;
		u8 local_YUV_i;
	
		idx_YUV_i = 0;
		while (idx_YUV_i < 64) {
2000a650:	e893001c 	lwi	r4, r19, 28
2000a654:	3060003f 	addik	r3, r0, 63
2000a658:	16441801 	cmp	r18, r4, r3
2000a65c:	bcb2ff88 	bgei	r18, -120		// 2000a5e4
			tokens_YUV[(index_YUV + (idx_YUV_i)) % SIZE_YUV] = local_YUV_i;
			idx_YUV_i = idx_YUV_i + 1;
		}
	
		// Update ports indexes
		index_YUV_i += 64;
2000a660:	b0002004 	imm	8196
2000a664:	e8608ef8 	lwi	r3, r0, -28936	// 20048ef8 <index_YUV_i>
2000a668:	30630040 	addik	r3, r3, 64
2000a66c:	b0002004 	imm	8196
2000a670:	f8608ef8 	swi	r3, r0, -28936	// 20048ef8 <index_YUV_i>
		index_YUV += 64;
2000a674:	b0002004 	imm	8196
2000a678:	e8608f00 	lwi	r3, r0, -28928	// 20048f00 <index_YUV>
2000a67c:	30630040 	addik	r3, r3, 64
2000a680:	b0002004 	imm	8196
2000a684:	f8608f00 	swi	r3, r0, -28928	// 20048f00 <index_YUV>
		
		read_end_YUV_i();
2000a688:	b9f4f8fc 	brlid	r15, -1796	// 20009f84 <read_end_YUV_i>
2000a68c:	80000000 	or	r0, r0, r0
		write_end_YUV();
2000a690:	b9f4f9a0 	brlid	r15, -1632	// 2000a030 <write_end_YUV>
2000a694:	80000000 	or	r0, r0, r0
	}
2000a698:	e9e10000 	lwi	r15, r1, 0
2000a69c:	10330000 	addk	r1, r19, r0
2000a6a0:	ea61002c 	lwi	r19, r1, 44
2000a6a4:	30210030 	addik	r1, r1, 48
2000a6a8:	b60f0008 	rtsd	r15, 8
2000a6ac:	80000000 	or	r0, r0, r0

2000a6b0 <decoder_merger_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_merger_initialize() {
2000a6b0:	3021fff4 	addik	r1, r1, -12
2000a6b4:	fa610008 	swi	r19, r1, 8
2000a6b8:	12610000 	addk	r19, r1, r0
		int i = 0;
2000a6bc:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_Y;
2000a6c0:	30600002 	addik	r3, r0, 2
2000a6c4:	b0002004 	imm	8196
2000a6c8:	f8608f08 	swi	r3, r0, -28920	// 20048f08 <_FSM_state>
		
	finished:
		// no read_end/write_end here!
		return;
2000a6cc:	80000000 	or	r0, r0, r0
	}
2000a6d0:	10330000 	addk	r1, r19, r0
2000a6d4:	ea610008 	lwi	r19, r1, 8
2000a6d8:	3021000c 	addik	r1, r1, 12
2000a6dc:	b60f0008 	rtsd	r15, 8
2000a6e0:	80000000 	or	r0, r0, r0

2000a6e4 <decoder_merger_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	
	int decoder_merger_scheduler() {
2000a6e4:	3021ffd0 	addik	r1, r1, -48
2000a6e8:	f9e10000 	swi	r15, r1, 0
2000a6ec:	fa61002c 	swi	r19, r1, 44
2000a6f0:	12610000 	addk	r19, r1, r0
		int i = 0;
2000a6f4:	f813001c 	swi	r0, r19, 28
		if(needInit){
2000a6f8:	b0002004 	imm	8196
2000a6fc:	e0605a14 	lbui	r3, r0, 23060	// 20045a14 <needInit>
2000a700:	bc030014 	beqi	r3, 20		// 2000a714
			decoder_merger_initialize();
2000a704:	b9f4ffac 	brlid	r15, -84	// 2000a6b0 <decoder_merger_initialize>
2000a708:	80000000 	or	r0, r0, r0
			needInit = 0;
2000a70c:	b0002004 	imm	8196
2000a710:	f0005a14 	sbi	r0, r0, 23060	// 20045a14 <needInit>
		}
	
		read_YUV_i();
2000a714:	b9f4f800 	brlid	r15, -2048	// 20009f14 <read_YUV_i>
2000a718:	80000000 	or	r0, r0, r0
		write_YUV();
2000a71c:	b9f4f8a4 	brlid	r15, -1884	// 20009fc0 <write_YUV>
2000a720:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
2000a724:	b0002004 	imm	8196
2000a728:	e8608f08 	lwi	r3, r0, -28920	// 20048f08 <_FSM_state>
2000a72c:	a8830001 	xori	r4, r3, 1
2000a730:	bc0400c8 	beqi	r4, 200		// 2000a7f8
2000a734:	30800001 	addik	r4, r0, 1
2000a738:	16441803 	cmpu	r18, r4, r3
2000a73c:	bc52001c 	blti	r18, 28		// 2000a758
2000a740:	a8630002 	xori	r3, r3, 2
2000a744:	bc03015c 	beqi	r3, 348		// 2000a8a0
		case my_state_V:
			goto l_V;
		case my_state_Y:
			goto l_Y;
		default:
			exit(1);
2000a748:	30a00001 	addik	r5, r0, 1
2000a74c:	b000dfff 	imm	-8193
2000a750:	b9f45c48 	brlid	r15, 23624	// 398 <exit>
2000a754:	80000000 	or	r0, r0, r0
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_U:
			goto l_U;
2000a758:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_U:
			if (numTokens_YUV_i - index_YUV_i >= 64 && isSchedulable_U()) {
2000a75c:	b0002004 	imm	8196
2000a760:	e8808efc 	lwi	r4, r0, -28932	// 20048efc <numTokens_YUV_i>
2000a764:	b0002004 	imm	8196
2000a768:	e8608ef8 	lwi	r3, r0, -28936	// 20048ef8 <index_YUV_i>
2000a76c:	14832000 	rsubk	r4, r3, r4
2000a770:	3060003f 	addik	r3, r0, 63
2000a774:	16441803 	cmpu	r18, r4, r3
2000a778:	bcb20074 	bgei	r18, 116		// 2000a7ec
2000a77c:	b9f4fcd4 	brlid	r15, -812	// 2000a450 <isSchedulable_U>
2000a780:	80000000 	or	r0, r0, r0
2000a784:	bc030068 	beqi	r3, 104		// 2000a7ec
				int stop = 0;
2000a788:	f8130020 	swi	r0, r19, 32
				if (64 > SIZE_YUV - index_YUV + decoder_merger_YUV->read_inds[0]) {
2000a78c:	b0002004 	imm	8196
2000a790:	e8605904 	lwi	r3, r0, 22788	// 20045904 <decoder_merger_YUV>
2000a794:	e863000c 	lwi	r3, r3, 12
2000a798:	e8830000 	lwi	r4, r3, 0
2000a79c:	b0002004 	imm	8196
2000a7a0:	e8608f00 	lwi	r3, r0, -28928	// 20048f00 <index_YUV>
2000a7a4:	14632000 	rsubk	r3, r3, r4
2000a7a8:	30830200 	addik	r4, r3, 512
2000a7ac:	3060003f 	addik	r3, r0, 63
2000a7b0:	16441803 	cmpu	r18, r4, r3
2000a7b4:	bc52000c 	blti	r18, 12		// 2000a7c0
					stop = 1;
2000a7b8:	30600001 	addik	r3, r0, 1
2000a7bc:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
2000a7c0:	e8730020 	lwi	r3, r19, 32
2000a7c4:	bc030010 	beqi	r3, 16		// 2000a7d4
					_FSM_state = my_state_U;
2000a7c8:	b0002004 	imm	8196
2000a7cc:	f8008f08 	swi	r0, r0, -28920	// 20048f08 <_FSM_state>
					goto finished;
2000a7d0:	b8000178 	bri	376		// 2000a948
				}
				U();
2000a7d4:	b9f4fca8 	brlid	r15, -856	// 2000a47c <U>
2000a7d8:	80000000 	or	r0, r0, r0
				i++;
2000a7dc:	e873001c 	lwi	r3, r19, 28
2000a7e0:	30630001 	addik	r3, r3, 1
2000a7e4:	f873001c 	swi	r3, r19, 28
				goto l_V;
2000a7e8:	b8000014 	bri	20		// 2000a7fc
			} else {
				_FSM_state = my_state_U;
2000a7ec:	b0002004 	imm	8196
2000a7f0:	f8008f08 	swi	r0, r0, -28920	// 20048f08 <_FSM_state>
				goto finished;
2000a7f4:	b8000154 	bri	340		// 2000a948
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_U:
			goto l_U;
		case my_state_V:
			goto l_V;
2000a7f8:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_U;
				goto finished;
			}
		l_V:
			if (numTokens_YUV_i - index_YUV_i >= 64 && isSchedulable_V()) {
2000a7fc:	b0002004 	imm	8196
2000a800:	e8808efc 	lwi	r4, r0, -28932	// 20048efc <numTokens_YUV_i>
2000a804:	b0002004 	imm	8196
2000a808:	e8608ef8 	lwi	r3, r0, -28936	// 20048ef8 <index_YUV_i>
2000a80c:	14832000 	rsubk	r4, r3, r4
2000a810:	3060003f 	addik	r3, r0, 63
2000a814:	16441803 	cmpu	r18, r4, r3
2000a818:	bcb20078 	bgei	r18, 120		// 2000a890
2000a81c:	b9f4fd64 	brlid	r15, -668	// 2000a580 <isSchedulable_V>
2000a820:	80000000 	or	r0, r0, r0
2000a824:	bc03006c 	beqi	r3, 108		// 2000a890
				int stop = 0;
2000a828:	f8130024 	swi	r0, r19, 36
				if (64 > SIZE_YUV - index_YUV + decoder_merger_YUV->read_inds[0]) {
2000a82c:	b0002004 	imm	8196
2000a830:	e8605904 	lwi	r3, r0, 22788	// 20045904 <decoder_merger_YUV>
2000a834:	e863000c 	lwi	r3, r3, 12
2000a838:	e8830000 	lwi	r4, r3, 0
2000a83c:	b0002004 	imm	8196
2000a840:	e8608f00 	lwi	r3, r0, -28928	// 20048f00 <index_YUV>
2000a844:	14632000 	rsubk	r3, r3, r4
2000a848:	30830200 	addik	r4, r3, 512
2000a84c:	3060003f 	addik	r3, r0, 63
2000a850:	16441803 	cmpu	r18, r4, r3
2000a854:	bc52000c 	blti	r18, 12		// 2000a860
					stop = 1;
2000a858:	30600001 	addik	r3, r0, 1
2000a85c:	f8730024 	swi	r3, r19, 36
				}
				if (stop != 0) {
2000a860:	e8730024 	lwi	r3, r19, 36
2000a864:	bc030014 	beqi	r3, 20		// 2000a878
					_FSM_state = my_state_V;
2000a868:	30600001 	addik	r3, r0, 1
2000a86c:	b0002004 	imm	8196
2000a870:	f8608f08 	swi	r3, r0, -28920	// 20048f08 <_FSM_state>
					goto finished;
2000a874:	b80000d4 	bri	212		// 2000a948
				}
				V();
2000a878:	b9f4fd34 	brlid	r15, -716	// 2000a5ac <V>
2000a87c:	80000000 	or	r0, r0, r0
				i++;
2000a880:	e873001c 	lwi	r3, r19, 28
2000a884:	30630001 	addik	r3, r3, 1
2000a888:	f873001c 	swi	r3, r19, 28
				goto l_Y;
2000a88c:	b8000018 	bri	24		// 2000a8a4
			} else {
				_FSM_state = my_state_V;
2000a890:	30600001 	addik	r3, r0, 1
2000a894:	b0002004 	imm	8196
2000a898:	f8608f08 	swi	r3, r0, -28920	// 20048f08 <_FSM_state>
				goto finished;
2000a89c:	b80000ac 	bri	172		// 2000a948
		case my_state_U:
			goto l_U;
		case my_state_V:
			goto l_V;
		case my_state_Y:
			goto l_Y;
2000a8a0:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_V;
				goto finished;
			}
		l_Y:
			if (numTokens_YUV_i - index_YUV_i >= 256 && isSchedulable_Y()) {
2000a8a4:	b0002004 	imm	8196
2000a8a8:	e8808efc 	lwi	r4, r0, -28932	// 20048efc <numTokens_YUV_i>
2000a8ac:	b0002004 	imm	8196
2000a8b0:	e8608ef8 	lwi	r3, r0, -28936	// 20048ef8 <index_YUV_i>
2000a8b4:	14832000 	rsubk	r4, r3, r4
2000a8b8:	306000ff 	addik	r3, r0, 255
2000a8bc:	16441803 	cmpu	r18, r4, r3
2000a8c0:	bcb20078 	bgei	r18, 120		// 2000a938
2000a8c4:	b9f4f7a4 	brlid	r15, -2140	// 2000a068 <isSchedulable_Y>
2000a8c8:	80000000 	or	r0, r0, r0
2000a8cc:	bc03006c 	beqi	r3, 108		// 2000a938
				int stop = 0;
2000a8d0:	f8130028 	swi	r0, r19, 40
				if (256 > SIZE_YUV - index_YUV + decoder_merger_YUV->read_inds[0]) {
2000a8d4:	b0002004 	imm	8196
2000a8d8:	e8605904 	lwi	r3, r0, 22788	// 20045904 <decoder_merger_YUV>
2000a8dc:	e863000c 	lwi	r3, r3, 12
2000a8e0:	e8830000 	lwi	r4, r3, 0
2000a8e4:	b0002004 	imm	8196
2000a8e8:	e8608f00 	lwi	r3, r0, -28928	// 20048f00 <index_YUV>
2000a8ec:	14632000 	rsubk	r3, r3, r4
2000a8f0:	30830200 	addik	r4, r3, 512
2000a8f4:	306000ff 	addik	r3, r0, 255
2000a8f8:	16441803 	cmpu	r18, r4, r3
2000a8fc:	bc52000c 	blti	r18, 12		// 2000a908
					stop = 1;
2000a900:	30600001 	addik	r3, r0, 1
2000a904:	f8730028 	swi	r3, r19, 40
				}
				if (stop != 0) {
2000a908:	e8730028 	lwi	r3, r19, 40
2000a90c:	bc030014 	beqi	r3, 20		// 2000a920
					_FSM_state = my_state_Y;
2000a910:	30600002 	addik	r3, r0, 2
2000a914:	b0002004 	imm	8196
2000a918:	f8608f08 	swi	r3, r0, -28920	// 20048f08 <_FSM_state>
					goto finished;
2000a91c:	b800002c 	bri	44		// 2000a948
				}
				Y();
2000a920:	b9f4f774 	brlid	r15, -2188	// 2000a094 <Y>
2000a924:	80000000 	or	r0, r0, r0
				i++;
2000a928:	e873001c 	lwi	r3, r19, 28
2000a92c:	30630001 	addik	r3, r3, 1
2000a930:	f873001c 	swi	r3, r19, 28
				goto l_U;
2000a934:	b800fe28 	bri	-472		// 2000a75c
			} else {
				_FSM_state = my_state_Y;
2000a938:	30600002 	addik	r3, r0, 2
2000a93c:	b0002004 	imm	8196
2000a940:	f8608f08 	swi	r3, r0, -28920	// 20048f08 <_FSM_state>
				goto finished;
2000a944:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_YUV_i();
2000a948:	b9f4f63c 	brlid	r15, -2500	// 20009f84 <read_end_YUV_i>
2000a94c:	80000000 	or	r0, r0, r0
		
		write_end_YUV();
2000a950:	b9f4f6e0 	brlid	r15, -2336	// 2000a030 <write_end_YUV>
2000a954:	80000000 	or	r0, r0, r0
		
		
		return i;
2000a958:	e873001c 	lwi	r3, r19, 28
	}
2000a95c:	e9e10000 	lwi	r15, r1, 0
2000a960:	10330000 	addk	r1, r19, r0
2000a964:	ea61002c 	lwi	r19, r1, 44
2000a968:	30210030 	addik	r1, r1, 48
2000a96c:	b60f0008 	rtsd	r15, 8
2000a970:	80000000 	or	r0, r0, r0

2000a974 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000a974:	3021fff8 	addik	r1, r1, -8
2000a978:	fa610004 	swi	r19, r1, 4
2000a97c:	12610000 	addk	r19, r1, r0
2000a980:	f8b3000c 	swi	r5, r19, 12
2000a984:	f8d30010 	swi	r6, r19, 16
2000a988:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000a98c:	e873000c 	lwi	r3, r19, 12
2000a990:	e8630010 	lwi	r3, r3, 16
2000a994:	e8830000 	lwi	r4, r3, 0
2000a998:	e873000c 	lwi	r3, r19, 12
2000a99c:	e8a3000c 	lwi	r5, r3, 12
2000a9a0:	e8730010 	lwi	r3, r19, 16
2000a9a4:	64630402 	bslli	r3, r3, 2
2000a9a8:	10651800 	addk	r3, r5, r3
2000a9ac:	e8630000 	lwi	r3, r3, 0
2000a9b0:	14a32000 	rsubk	r5, r3, r4
2000a9b4:	30600001 	addik	r3, r0, 1
2000a9b8:	e8930014 	lwi	r4, r19, 20
2000a9bc:	16442803 	cmpu	r18, r4, r5
2000a9c0:	bcb20008 	bgei	r18, 8		// 2000a9c8
2000a9c4:	10600000 	addk	r3, r0, r0
2000a9c8:	a46300ff 	andi	r3, r3, 255
}
2000a9cc:	10330000 	addk	r1, r19, r0
2000a9d0:	ea610004 	lwi	r19, r1, 4
2000a9d4:	30210008 	addik	r1, r1, 8
2000a9d8:	b60f0008 	rtsd	r15, 8
2000a9dc:	80000000 	or	r0, r0, r0

2000a9e0 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000a9e0:	3021fff8 	addik	r1, r1, -8
2000a9e4:	fa610004 	swi	r19, r1, 4
2000a9e8:	12610000 	addk	r19, r1, r0
2000a9ec:	f8b3000c 	swi	r5, r19, 12
2000a9f0:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000a9f4:	e873000c 	lwi	r3, r19, 12
2000a9f8:	e8630010 	lwi	r3, r3, 16
2000a9fc:	e8830000 	lwi	r4, r3, 0
2000aa00:	e873000c 	lwi	r3, r19, 12
2000aa04:	e8a3000c 	lwi	r5, r3, 12
2000aa08:	e8730010 	lwi	r3, r19, 16
2000aa0c:	64630402 	bslli	r3, r3, 2
2000aa10:	10651800 	addk	r3, r5, r3
2000aa14:	e8630000 	lwi	r3, r3, 0
2000aa18:	14632000 	rsubk	r3, r3, r4
}
2000aa1c:	10330000 	addk	r1, r19, r0
2000aa20:	ea610004 	lwi	r19, r1, 4
2000aa24:	30210008 	addik	r1, r1, 8
2000aa28:	b60f0008 	rtsd	r15, 8
2000aa2c:	80000000 	or	r0, r0, r0

2000aa30 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000aa30:	3021fff4 	addik	r1, r1, -12
2000aa34:	fa610008 	swi	r19, r1, 8
2000aa38:	12610000 	addk	r19, r1, r0
2000aa3c:	f8b30010 	swi	r5, r19, 16
2000aa40:	f8d30014 	swi	r6, r19, 20
2000aa44:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000aa48:	f8130004 	swi	r0, r19, 4
2000aa4c:	b800005c 	bri	92		// 2000aaa8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000aa50:	e8730010 	lwi	r3, r19, 16
2000aa54:	e8830000 	lwi	r4, r3, 0
2000aa58:	e8730010 	lwi	r3, r19, 16
2000aa5c:	e8a3000c 	lwi	r5, r3, 12
2000aa60:	e8730004 	lwi	r3, r19, 4
2000aa64:	64630402 	bslli	r3, r3, 2
2000aa68:	10651800 	addk	r3, r5, r3
2000aa6c:	e8a30000 	lwi	r5, r3, 0
2000aa70:	e8730010 	lwi	r3, r19, 16
2000aa74:	e8630010 	lwi	r3, r3, 16
2000aa78:	e8630000 	lwi	r3, r3, 0
2000aa7c:	14632800 	rsubk	r3, r3, r5
2000aa80:	10641800 	addk	r3, r4, r3
2000aa84:	30830001 	addik	r4, r3, 1
2000aa88:	e8730018 	lwi	r3, r19, 24
2000aa8c:	16441803 	cmpu	r18, r4, r3
2000aa90:	bc52000c 	blti	r18, 12		// 2000aa9c
            return 0;
2000aa94:	10600000 	addk	r3, r0, r0
2000aa98:	b8000024 	bri	36		// 2000aabc
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000aa9c:	e8730004 	lwi	r3, r19, 4
2000aaa0:	30630001 	addik	r3, r3, 1
2000aaa4:	f8730004 	swi	r3, r19, 4
2000aaa8:	e8930004 	lwi	r4, r19, 4
2000aaac:	e8730014 	lwi	r3, r19, 20
2000aab0:	16432003 	cmpu	r18, r3, r4
2000aab4:	bc52ff9c 	blti	r18, -100		// 2000aa50
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000aab8:	30600001 	addik	r3, r0, 1
}
2000aabc:	10330000 	addk	r1, r19, r0
2000aac0:	ea610008 	lwi	r19, r1, 8
2000aac4:	3021000c 	addik	r1, r1, 12
2000aac8:	b60f0008 	rtsd	r15, 8
2000aacc:	80000000 	or	r0, r0, r0

2000aad0 <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000aad0:	3021ffec 	addik	r1, r1, -20
2000aad4:	fa610010 	swi	r19, r1, 16
2000aad8:	12610000 	addk	r19, r1, r0
2000aadc:	f8b30018 	swi	r5, r19, 24
2000aae0:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000aae4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000aae8:	f8130004 	swi	r0, r19, 4
2000aaec:	b8000054 	bri	84		// 2000ab40
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000aaf0:	e8730018 	lwi	r3, r19, 24
2000aaf4:	e8630010 	lwi	r3, r3, 16
2000aaf8:	e8830000 	lwi	r4, r3, 0
2000aafc:	e8730018 	lwi	r3, r19, 24
2000ab00:	e8a3000c 	lwi	r5, r3, 12
2000ab04:	e8730004 	lwi	r3, r19, 4
2000ab08:	64630402 	bslli	r3, r3, 2
2000ab0c:	10651800 	addk	r3, r5, r3
2000ab10:	e8630000 	lwi	r3, r3, 0
2000ab14:	14632000 	rsubk	r3, r3, r4
2000ab18:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000ab1c:	e8930008 	lwi	r4, r19, 8
2000ab20:	e873000c 	lwi	r3, r19, 12
2000ab24:	16441803 	cmpu	r18, r4, r3
2000ab28:	bcb20008 	bgei	r18, 8		// 2000ab30
2000ab2c:	10640000 	addk	r3, r4, r0
2000ab30:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000ab34:	e8730004 	lwi	r3, r19, 4
2000ab38:	30630001 	addik	r3, r3, 1
2000ab3c:	f8730004 	swi	r3, r19, 4
2000ab40:	e8930004 	lwi	r4, r19, 4
2000ab44:	e873001c 	lwi	r3, r19, 28
2000ab48:	16432003 	cmpu	r18, r3, r4
2000ab4c:	bc52ffa4 	blti	r18, -92		// 2000aaf0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000ab50:	e8730018 	lwi	r3, r19, 24
2000ab54:	e8830000 	lwi	r4, r3, 0
2000ab58:	e8730008 	lwi	r3, r19, 8
2000ab5c:	14632000 	rsubk	r3, r3, r4
}
2000ab60:	10330000 	addk	r1, r19, r0
2000ab64:	ea610010 	lwi	r19, r1, 16
2000ab68:	30210014 	addik	r1, r1, 20
2000ab6c:	b60f0008 	rtsd	r15, 8
2000ab70:	80000000 	or	r0, r0, r0

2000ab74 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000ab74:	3021fff4 	addik	r1, r1, -12
2000ab78:	fa610008 	swi	r19, r1, 8
2000ab7c:	12610000 	addk	r19, r1, r0
2000ab80:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2000ab84:	e8730010 	lwi	r3, r19, 16
2000ab88:	e8630010 	lwi	r3, r3, 16
2000ab8c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000ab90:	f8130004 	swi	r0, r19, 4
2000ab94:	b8000028 	bri	40		// 2000abbc
        fifo->read_inds[i] = 0;
2000ab98:	e8730010 	lwi	r3, r19, 16
2000ab9c:	e883000c 	lwi	r4, r3, 12
2000aba0:	e8730004 	lwi	r3, r19, 4
2000aba4:	64630402 	bslli	r3, r3, 2
2000aba8:	10641800 	addk	r3, r4, r3
2000abac:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000abb0:	e8730004 	lwi	r3, r19, 4
2000abb4:	30630001 	addik	r3, r3, 1
2000abb8:	f8730004 	swi	r3, r19, 4
2000abbc:	e8730010 	lwi	r3, r19, 16
2000abc0:	e8830008 	lwi	r4, r3, 8
2000abc4:	e8730004 	lwi	r3, r19, 4
2000abc8:	16441803 	cmpu	r18, r4, r3
2000abcc:	bc52ffcc 	blti	r18, -52		// 2000ab98
        fifo->read_inds[i] = 0;
    }
}
2000abd0:	10330000 	addk	r1, r19, r0
2000abd4:	ea610008 	lwi	r19, r1, 8
2000abd8:	3021000c 	addik	r1, r1, 12
2000abdc:	b60f0008 	rtsd	r15, 8
2000abe0:	80000000 	or	r0, r0, r0

2000abe4 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000abe4:	3021fff4 	addik	r1, r1, -12
2000abe8:	fa610008 	swi	r19, r1, 8
2000abec:	12610000 	addk	r19, r1, r0
2000abf0:	f8b30010 	swi	r5, r19, 16
2000abf4:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000abf8:	e8730010 	lwi	r3, r19, 16
2000abfc:	e8830004 	lwi	r4, r3, 4
2000ac00:	e8730010 	lwi	r3, r19, 16
2000ac04:	e8a3000c 	lwi	r5, r3, 12
2000ac08:	e8730014 	lwi	r3, r19, 20
2000ac0c:	64630402 	bslli	r3, r3, 2
2000ac10:	10651800 	addk	r3, r5, r3
2000ac14:	e8a30000 	lwi	r5, r3, 0
2000ac18:	e8730010 	lwi	r3, r19, 16
2000ac1c:	e8630000 	lwi	r3, r3, 0
2000ac20:	3063ffff 	addik	r3, r3, -1
2000ac24:	84651800 	and	r3, r5, r3
2000ac28:	10641800 	addk	r3, r4, r3
2000ac2c:	e0630000 	lbui	r3, r3, 0
2000ac30:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000ac34:	e8730010 	lwi	r3, r19, 16
2000ac38:	e883000c 	lwi	r4, r3, 12
2000ac3c:	e8730014 	lwi	r3, r19, 20
2000ac40:	64630402 	bslli	r3, r3, 2
2000ac44:	10641800 	addk	r3, r4, r3
2000ac48:	e8830000 	lwi	r4, r3, 0
2000ac4c:	30840001 	addik	r4, r4, 1
2000ac50:	f8830000 	swi	r4, r3, 0
    return value;
2000ac54:	e0730004 	lbui	r3, r19, 4
2000ac58:	90630060 	sext8	r3, r3
}
2000ac5c:	10330000 	addk	r1, r19, r0
2000ac60:	ea610008 	lwi	r19, r1, 8
2000ac64:	3021000c 	addik	r1, r1, 12
2000ac68:	b60f0008 	rtsd	r15, 8
2000ac6c:	80000000 	or	r0, r0, r0

2000ac70 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000ac70:	3021fff8 	addik	r1, r1, -8
2000ac74:	fa610004 	swi	r19, r1, 4
2000ac78:	12610000 	addk	r19, r1, r0
2000ac7c:	f8b3000c 	swi	r5, r19, 12
2000ac80:	10660000 	addk	r3, r6, r0
2000ac84:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000ac88:	e873000c 	lwi	r3, r19, 12
2000ac8c:	e8830004 	lwi	r4, r3, 4
2000ac90:	e873000c 	lwi	r3, r19, 12
2000ac94:	e8630010 	lwi	r3, r3, 16
2000ac98:	e8a30000 	lwi	r5, r3, 0
2000ac9c:	e873000c 	lwi	r3, r19, 12
2000aca0:	e8630000 	lwi	r3, r3, 0
2000aca4:	3063ffff 	addik	r3, r3, -1
2000aca8:	84651800 	and	r3, r5, r3
2000acac:	10641800 	addk	r3, r4, r3
2000acb0:	e0930010 	lbui	r4, r19, 16
2000acb4:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2000acb8:	e873000c 	lwi	r3, r19, 12
2000acbc:	e8630010 	lwi	r3, r3, 16
2000acc0:	e8830000 	lwi	r4, r3, 0
2000acc4:	30840001 	addik	r4, r4, 1
2000acc8:	f8830000 	swi	r4, r3, 0
}
2000accc:	10330000 	addk	r1, r19, r0
2000acd0:	ea610004 	lwi	r19, r1, 4
2000acd4:	30210008 	addik	r1, r1, 8
2000acd8:	b60f0008 	rtsd	r15, 8
2000acdc:	80000000 	or	r0, r0, r0

2000ace0 <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000ace0:	3021fff8 	addik	r1, r1, -8
2000ace4:	fa610004 	swi	r19, r1, 4
2000ace8:	12610000 	addk	r19, r1, r0
2000acec:	f8b3000c 	swi	r5, r19, 12
2000acf0:	f8d30010 	swi	r6, r19, 16
2000acf4:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000acf8:	e873000c 	lwi	r3, r19, 12
2000acfc:	e8630010 	lwi	r3, r3, 16
2000ad00:	e8830000 	lwi	r4, r3, 0
2000ad04:	e873000c 	lwi	r3, r19, 12
2000ad08:	e8a3000c 	lwi	r5, r3, 12
2000ad0c:	e8730010 	lwi	r3, r19, 16
2000ad10:	64630402 	bslli	r3, r3, 2
2000ad14:	10651800 	addk	r3, r5, r3
2000ad18:	e8630000 	lwi	r3, r3, 0
2000ad1c:	14a32000 	rsubk	r5, r3, r4
2000ad20:	30600001 	addik	r3, r0, 1
2000ad24:	e8930014 	lwi	r4, r19, 20
2000ad28:	16442803 	cmpu	r18, r4, r5
2000ad2c:	bcb20008 	bgei	r18, 8		// 2000ad34
2000ad30:	10600000 	addk	r3, r0, r0
2000ad34:	a46300ff 	andi	r3, r3, 255
}
2000ad38:	10330000 	addk	r1, r19, r0
2000ad3c:	ea610004 	lwi	r19, r1, 4
2000ad40:	30210008 	addik	r1, r1, 8
2000ad44:	b60f0008 	rtsd	r15, 8
2000ad48:	80000000 	or	r0, r0, r0

2000ad4c <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000ad4c:	3021fff8 	addik	r1, r1, -8
2000ad50:	fa610004 	swi	r19, r1, 4
2000ad54:	12610000 	addk	r19, r1, r0
2000ad58:	f8b3000c 	swi	r5, r19, 12
2000ad5c:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000ad60:	e873000c 	lwi	r3, r19, 12
2000ad64:	e8630010 	lwi	r3, r3, 16
2000ad68:	e8830000 	lwi	r4, r3, 0
2000ad6c:	e873000c 	lwi	r3, r19, 12
2000ad70:	e8a3000c 	lwi	r5, r3, 12
2000ad74:	e8730010 	lwi	r3, r19, 16
2000ad78:	64630402 	bslli	r3, r3, 2
2000ad7c:	10651800 	addk	r3, r5, r3
2000ad80:	e8630000 	lwi	r3, r3, 0
2000ad84:	14632000 	rsubk	r3, r3, r4
}
2000ad88:	10330000 	addk	r1, r19, r0
2000ad8c:	ea610004 	lwi	r19, r1, 4
2000ad90:	30210008 	addik	r1, r1, 8
2000ad94:	b60f0008 	rtsd	r15, 8
2000ad98:	80000000 	or	r0, r0, r0

2000ad9c <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000ad9c:	3021fff4 	addik	r1, r1, -12
2000ada0:	fa610008 	swi	r19, r1, 8
2000ada4:	12610000 	addk	r19, r1, r0
2000ada8:	f8b30010 	swi	r5, r19, 16
2000adac:	f8d30014 	swi	r6, r19, 20
2000adb0:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000adb4:	f8130004 	swi	r0, r19, 4
2000adb8:	b800005c 	bri	92		// 2000ae14
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000adbc:	e8730010 	lwi	r3, r19, 16
2000adc0:	e8830000 	lwi	r4, r3, 0
2000adc4:	e8730010 	lwi	r3, r19, 16
2000adc8:	e8a3000c 	lwi	r5, r3, 12
2000adcc:	e8730004 	lwi	r3, r19, 4
2000add0:	64630402 	bslli	r3, r3, 2
2000add4:	10651800 	addk	r3, r5, r3
2000add8:	e8a30000 	lwi	r5, r3, 0
2000addc:	e8730010 	lwi	r3, r19, 16
2000ade0:	e8630010 	lwi	r3, r3, 16
2000ade4:	e8630000 	lwi	r3, r3, 0
2000ade8:	14632800 	rsubk	r3, r3, r5
2000adec:	10641800 	addk	r3, r4, r3
2000adf0:	30830001 	addik	r4, r3, 1
2000adf4:	e8730018 	lwi	r3, r19, 24
2000adf8:	16441803 	cmpu	r18, r4, r3
2000adfc:	bc52000c 	blti	r18, 12		// 2000ae08
            return 0;
2000ae00:	10600000 	addk	r3, r0, r0
2000ae04:	b8000024 	bri	36		// 2000ae28
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000ae08:	e8730004 	lwi	r3, r19, 4
2000ae0c:	30630001 	addik	r3, r3, 1
2000ae10:	f8730004 	swi	r3, r19, 4
2000ae14:	e8930004 	lwi	r4, r19, 4
2000ae18:	e8730014 	lwi	r3, r19, 20
2000ae1c:	16432003 	cmpu	r18, r3, r4
2000ae20:	bc52ff9c 	blti	r18, -100		// 2000adbc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000ae24:	30600001 	addik	r3, r0, 1
}
2000ae28:	10330000 	addk	r1, r19, r0
2000ae2c:	ea610008 	lwi	r19, r1, 8
2000ae30:	3021000c 	addik	r1, r1, 12
2000ae34:	b60f0008 	rtsd	r15, 8
2000ae38:	80000000 	or	r0, r0, r0

2000ae3c <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000ae3c:	3021ffec 	addik	r1, r1, -20
2000ae40:	fa610010 	swi	r19, r1, 16
2000ae44:	12610000 	addk	r19, r1, r0
2000ae48:	f8b30018 	swi	r5, r19, 24
2000ae4c:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000ae50:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000ae54:	f8130004 	swi	r0, r19, 4
2000ae58:	b8000054 	bri	84		// 2000aeac
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000ae5c:	e8730018 	lwi	r3, r19, 24
2000ae60:	e8630010 	lwi	r3, r3, 16
2000ae64:	e8830000 	lwi	r4, r3, 0
2000ae68:	e8730018 	lwi	r3, r19, 24
2000ae6c:	e8a3000c 	lwi	r5, r3, 12
2000ae70:	e8730004 	lwi	r3, r19, 4
2000ae74:	64630402 	bslli	r3, r3, 2
2000ae78:	10651800 	addk	r3, r5, r3
2000ae7c:	e8630000 	lwi	r3, r3, 0
2000ae80:	14632000 	rsubk	r3, r3, r4
2000ae84:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000ae88:	e8930008 	lwi	r4, r19, 8
2000ae8c:	e873000c 	lwi	r3, r19, 12
2000ae90:	16441803 	cmpu	r18, r4, r3
2000ae94:	bcb20008 	bgei	r18, 8		// 2000ae9c
2000ae98:	10640000 	addk	r3, r4, r0
2000ae9c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000aea0:	e8730004 	lwi	r3, r19, 4
2000aea4:	30630001 	addik	r3, r3, 1
2000aea8:	f8730004 	swi	r3, r19, 4
2000aeac:	e8930004 	lwi	r4, r19, 4
2000aeb0:	e873001c 	lwi	r3, r19, 28
2000aeb4:	16432003 	cmpu	r18, r3, r4
2000aeb8:	bc52ffa4 	blti	r18, -92		// 2000ae5c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000aebc:	e8730018 	lwi	r3, r19, 24
2000aec0:	e8830000 	lwi	r4, r3, 0
2000aec4:	e8730008 	lwi	r3, r19, 8
2000aec8:	14632000 	rsubk	r3, r3, r4
}
2000aecc:	10330000 	addk	r1, r19, r0
2000aed0:	ea610010 	lwi	r19, r1, 16
2000aed4:	30210014 	addik	r1, r1, 20
2000aed8:	b60f0008 	rtsd	r15, 8
2000aedc:	80000000 	or	r0, r0, r0

2000aee0 <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000aee0:	3021fff4 	addik	r1, r1, -12
2000aee4:	fa610008 	swi	r19, r1, 8
2000aee8:	12610000 	addk	r19, r1, r0
2000aeec:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2000aef0:	e8730010 	lwi	r3, r19, 16
2000aef4:	e8630010 	lwi	r3, r3, 16
2000aef8:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000aefc:	f8130004 	swi	r0, r19, 4
2000af00:	b8000028 	bri	40		// 2000af28
        fifo->read_inds[i] = 0;
2000af04:	e8730010 	lwi	r3, r19, 16
2000af08:	e883000c 	lwi	r4, r3, 12
2000af0c:	e8730004 	lwi	r3, r19, 4
2000af10:	64630402 	bslli	r3, r3, 2
2000af14:	10641800 	addk	r3, r4, r3
2000af18:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000af1c:	e8730004 	lwi	r3, r19, 4
2000af20:	30630001 	addik	r3, r3, 1
2000af24:	f8730004 	swi	r3, r19, 4
2000af28:	e8730010 	lwi	r3, r19, 16
2000af2c:	e8830008 	lwi	r4, r3, 8
2000af30:	e8730004 	lwi	r3, r19, 4
2000af34:	16441803 	cmpu	r18, r4, r3
2000af38:	bc52ffcc 	blti	r18, -52		// 2000af04
        fifo->read_inds[i] = 0;
    }
}
2000af3c:	10330000 	addk	r1, r19, r0
2000af40:	ea610008 	lwi	r19, r1, 8
2000af44:	3021000c 	addik	r1, r1, 12
2000af48:	b60f0008 	rtsd	r15, 8
2000af4c:	80000000 	or	r0, r0, r0

2000af50 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000af50:	3021fff4 	addik	r1, r1, -12
2000af54:	fa610008 	swi	r19, r1, 8
2000af58:	12610000 	addk	r19, r1, r0
2000af5c:	f8b30010 	swi	r5, r19, 16
2000af60:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000af64:	e8730010 	lwi	r3, r19, 16
2000af68:	e8830004 	lwi	r4, r3, 4
2000af6c:	e8730010 	lwi	r3, r19, 16
2000af70:	e8a3000c 	lwi	r5, r3, 12
2000af74:	e8730014 	lwi	r3, r19, 20
2000af78:	64630402 	bslli	r3, r3, 2
2000af7c:	10651800 	addk	r3, r5, r3
2000af80:	e8a30000 	lwi	r5, r3, 0
2000af84:	e8730010 	lwi	r3, r19, 16
2000af88:	e8630000 	lwi	r3, r3, 0
2000af8c:	3063ffff 	addik	r3, r3, -1
2000af90:	84651800 	and	r3, r5, r3
2000af94:	10631800 	addk	r3, r3, r3
2000af98:	10641800 	addk	r3, r4, r3
2000af9c:	e4630000 	lhui	r3, r3, 0
2000afa0:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000afa4:	e8730010 	lwi	r3, r19, 16
2000afa8:	e883000c 	lwi	r4, r3, 12
2000afac:	e8730014 	lwi	r3, r19, 20
2000afb0:	64630402 	bslli	r3, r3, 2
2000afb4:	10641800 	addk	r3, r4, r3
2000afb8:	e8830000 	lwi	r4, r3, 0
2000afbc:	30840001 	addik	r4, r4, 1
2000afc0:	f8830000 	swi	r4, r3, 0
    return value;
2000afc4:	e4730004 	lhui	r3, r19, 4
2000afc8:	90630061 	sext16	r3, r3
}
2000afcc:	10330000 	addk	r1, r19, r0
2000afd0:	ea610008 	lwi	r19, r1, 8
2000afd4:	3021000c 	addik	r1, r1, 12
2000afd8:	b60f0008 	rtsd	r15, 8
2000afdc:	80000000 	or	r0, r0, r0

2000afe0 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000afe0:	3021fff8 	addik	r1, r1, -8
2000afe4:	fa610004 	swi	r19, r1, 4
2000afe8:	12610000 	addk	r19, r1, r0
2000afec:	f8b3000c 	swi	r5, r19, 12
2000aff0:	10660000 	addk	r3, r6, r0
2000aff4:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000aff8:	e873000c 	lwi	r3, r19, 12
2000affc:	e8830004 	lwi	r4, r3, 4
2000b000:	e873000c 	lwi	r3, r19, 12
2000b004:	e8630010 	lwi	r3, r3, 16
2000b008:	e8a30000 	lwi	r5, r3, 0
2000b00c:	e873000c 	lwi	r3, r19, 12
2000b010:	e8630000 	lwi	r3, r3, 0
2000b014:	3063ffff 	addik	r3, r3, -1
2000b018:	84651800 	and	r3, r5, r3
2000b01c:	10631800 	addk	r3, r3, r3
2000b020:	10641800 	addk	r3, r4, r3
2000b024:	e4930010 	lhui	r4, r19, 16
2000b028:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2000b02c:	e873000c 	lwi	r3, r19, 12
2000b030:	e8630010 	lwi	r3, r3, 16
2000b034:	e8830000 	lwi	r4, r3, 0
2000b038:	30840001 	addik	r4, r4, 1
2000b03c:	f8830000 	swi	r4, r3, 0
}
2000b040:	10330000 	addk	r1, r19, r0
2000b044:	ea610004 	lwi	r19, r1, 4
2000b048:	30210008 	addik	r1, r1, 8
2000b04c:	b60f0008 	rtsd	r15, 8
2000b050:	80000000 	or	r0, r0, r0

2000b054 <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000b054:	3021fff8 	addik	r1, r1, -8
2000b058:	fa610004 	swi	r19, r1, 4
2000b05c:	12610000 	addk	r19, r1, r0
2000b060:	f8b3000c 	swi	r5, r19, 12
2000b064:	f8d30010 	swi	r6, r19, 16
2000b068:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000b06c:	e873000c 	lwi	r3, r19, 12
2000b070:	e8630010 	lwi	r3, r3, 16
2000b074:	e8830000 	lwi	r4, r3, 0
2000b078:	e873000c 	lwi	r3, r19, 12
2000b07c:	e8a3000c 	lwi	r5, r3, 12
2000b080:	e8730010 	lwi	r3, r19, 16
2000b084:	64630402 	bslli	r3, r3, 2
2000b088:	10651800 	addk	r3, r5, r3
2000b08c:	e8630000 	lwi	r3, r3, 0
2000b090:	14a32000 	rsubk	r5, r3, r4
2000b094:	30600001 	addik	r3, r0, 1
2000b098:	e8930014 	lwi	r4, r19, 20
2000b09c:	16442803 	cmpu	r18, r4, r5
2000b0a0:	bcb20008 	bgei	r18, 8		// 2000b0a8
2000b0a4:	10600000 	addk	r3, r0, r0
2000b0a8:	a46300ff 	andi	r3, r3, 255
}
2000b0ac:	10330000 	addk	r1, r19, r0
2000b0b0:	ea610004 	lwi	r19, r1, 4
2000b0b4:	30210008 	addik	r1, r1, 8
2000b0b8:	b60f0008 	rtsd	r15, 8
2000b0bc:	80000000 	or	r0, r0, r0

2000b0c0 <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000b0c0:	3021fff8 	addik	r1, r1, -8
2000b0c4:	fa610004 	swi	r19, r1, 4
2000b0c8:	12610000 	addk	r19, r1, r0
2000b0cc:	f8b3000c 	swi	r5, r19, 12
2000b0d0:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000b0d4:	e873000c 	lwi	r3, r19, 12
2000b0d8:	e8630010 	lwi	r3, r3, 16
2000b0dc:	e8830000 	lwi	r4, r3, 0
2000b0e0:	e873000c 	lwi	r3, r19, 12
2000b0e4:	e8a3000c 	lwi	r5, r3, 12
2000b0e8:	e8730010 	lwi	r3, r19, 16
2000b0ec:	64630402 	bslli	r3, r3, 2
2000b0f0:	10651800 	addk	r3, r5, r3
2000b0f4:	e8630000 	lwi	r3, r3, 0
2000b0f8:	14632000 	rsubk	r3, r3, r4
}
2000b0fc:	10330000 	addk	r1, r19, r0
2000b100:	ea610004 	lwi	r19, r1, 4
2000b104:	30210008 	addik	r1, r1, 8
2000b108:	b60f0008 	rtsd	r15, 8
2000b10c:	80000000 	or	r0, r0, r0

2000b110 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000b110:	3021fff4 	addik	r1, r1, -12
2000b114:	fa610008 	swi	r19, r1, 8
2000b118:	12610000 	addk	r19, r1, r0
2000b11c:	f8b30010 	swi	r5, r19, 16
2000b120:	f8d30014 	swi	r6, r19, 20
2000b124:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000b128:	f8130004 	swi	r0, r19, 4
2000b12c:	b800005c 	bri	92		// 2000b188
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000b130:	e8730010 	lwi	r3, r19, 16
2000b134:	e8830000 	lwi	r4, r3, 0
2000b138:	e8730010 	lwi	r3, r19, 16
2000b13c:	e8a3000c 	lwi	r5, r3, 12
2000b140:	e8730004 	lwi	r3, r19, 4
2000b144:	64630402 	bslli	r3, r3, 2
2000b148:	10651800 	addk	r3, r5, r3
2000b14c:	e8a30000 	lwi	r5, r3, 0
2000b150:	e8730010 	lwi	r3, r19, 16
2000b154:	e8630010 	lwi	r3, r3, 16
2000b158:	e8630000 	lwi	r3, r3, 0
2000b15c:	14632800 	rsubk	r3, r3, r5
2000b160:	10641800 	addk	r3, r4, r3
2000b164:	30830001 	addik	r4, r3, 1
2000b168:	e8730018 	lwi	r3, r19, 24
2000b16c:	16441803 	cmpu	r18, r4, r3
2000b170:	bc52000c 	blti	r18, 12		// 2000b17c
            return 0;
2000b174:	10600000 	addk	r3, r0, r0
2000b178:	b8000024 	bri	36		// 2000b19c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000b17c:	e8730004 	lwi	r3, r19, 4
2000b180:	30630001 	addik	r3, r3, 1
2000b184:	f8730004 	swi	r3, r19, 4
2000b188:	e8930004 	lwi	r4, r19, 4
2000b18c:	e8730014 	lwi	r3, r19, 20
2000b190:	16432003 	cmpu	r18, r3, r4
2000b194:	bc52ff9c 	blti	r18, -100		// 2000b130
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000b198:	30600001 	addik	r3, r0, 1
}
2000b19c:	10330000 	addk	r1, r19, r0
2000b1a0:	ea610008 	lwi	r19, r1, 8
2000b1a4:	3021000c 	addik	r1, r1, 12
2000b1a8:	b60f0008 	rtsd	r15, 8
2000b1ac:	80000000 	or	r0, r0, r0

2000b1b0 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000b1b0:	3021ffec 	addik	r1, r1, -20
2000b1b4:	fa610010 	swi	r19, r1, 16
2000b1b8:	12610000 	addk	r19, r1, r0
2000b1bc:	f8b30018 	swi	r5, r19, 24
2000b1c0:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000b1c4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000b1c8:	f8130004 	swi	r0, r19, 4
2000b1cc:	b8000054 	bri	84		// 2000b220
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000b1d0:	e8730018 	lwi	r3, r19, 24
2000b1d4:	e8630010 	lwi	r3, r3, 16
2000b1d8:	e8830000 	lwi	r4, r3, 0
2000b1dc:	e8730018 	lwi	r3, r19, 24
2000b1e0:	e8a3000c 	lwi	r5, r3, 12
2000b1e4:	e8730004 	lwi	r3, r19, 4
2000b1e8:	64630402 	bslli	r3, r3, 2
2000b1ec:	10651800 	addk	r3, r5, r3
2000b1f0:	e8630000 	lwi	r3, r3, 0
2000b1f4:	14632000 	rsubk	r3, r3, r4
2000b1f8:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000b1fc:	e8930008 	lwi	r4, r19, 8
2000b200:	e873000c 	lwi	r3, r19, 12
2000b204:	16441803 	cmpu	r18, r4, r3
2000b208:	bcb20008 	bgei	r18, 8		// 2000b210
2000b20c:	10640000 	addk	r3, r4, r0
2000b210:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000b214:	e8730004 	lwi	r3, r19, 4
2000b218:	30630001 	addik	r3, r3, 1
2000b21c:	f8730004 	swi	r3, r19, 4
2000b220:	e8930004 	lwi	r4, r19, 4
2000b224:	e873001c 	lwi	r3, r19, 28
2000b228:	16432003 	cmpu	r18, r3, r4
2000b22c:	bc52ffa4 	blti	r18, -92		// 2000b1d0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000b230:	e8730018 	lwi	r3, r19, 24
2000b234:	e8830000 	lwi	r4, r3, 0
2000b238:	e8730008 	lwi	r3, r19, 8
2000b23c:	14632000 	rsubk	r3, r3, r4
}
2000b240:	10330000 	addk	r1, r19, r0
2000b244:	ea610010 	lwi	r19, r1, 16
2000b248:	30210014 	addik	r1, r1, 20
2000b24c:	b60f0008 	rtsd	r15, 8
2000b250:	80000000 	or	r0, r0, r0

2000b254 <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000b254:	3021fff4 	addik	r1, r1, -12
2000b258:	fa610008 	swi	r19, r1, 8
2000b25c:	12610000 	addk	r19, r1, r0
2000b260:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2000b264:	e8730010 	lwi	r3, r19, 16
2000b268:	e8630010 	lwi	r3, r3, 16
2000b26c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000b270:	f8130004 	swi	r0, r19, 4
2000b274:	b8000028 	bri	40		// 2000b29c
        fifo->read_inds[i] = 0;
2000b278:	e8730010 	lwi	r3, r19, 16
2000b27c:	e883000c 	lwi	r4, r3, 12
2000b280:	e8730004 	lwi	r3, r19, 4
2000b284:	64630402 	bslli	r3, r3, 2
2000b288:	10641800 	addk	r3, r4, r3
2000b28c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000b290:	e8730004 	lwi	r3, r19, 4
2000b294:	30630001 	addik	r3, r3, 1
2000b298:	f8730004 	swi	r3, r19, 4
2000b29c:	e8730010 	lwi	r3, r19, 16
2000b2a0:	e8830008 	lwi	r4, r3, 8
2000b2a4:	e8730004 	lwi	r3, r19, 4
2000b2a8:	16441803 	cmpu	r18, r4, r3
2000b2ac:	bc52ffcc 	blti	r18, -52		// 2000b278
        fifo->read_inds[i] = 0;
    }
}
2000b2b0:	10330000 	addk	r1, r19, r0
2000b2b4:	ea610008 	lwi	r19, r1, 8
2000b2b8:	3021000c 	addik	r1, r1, 12
2000b2bc:	b60f0008 	rtsd	r15, 8
2000b2c0:	80000000 	or	r0, r0, r0

2000b2c4 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000b2c4:	3021fff4 	addik	r1, r1, -12
2000b2c8:	fa610008 	swi	r19, r1, 8
2000b2cc:	12610000 	addk	r19, r1, r0
2000b2d0:	f8b30010 	swi	r5, r19, 16
2000b2d4:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000b2d8:	e8730010 	lwi	r3, r19, 16
2000b2dc:	e8830004 	lwi	r4, r3, 4
2000b2e0:	e8730010 	lwi	r3, r19, 16
2000b2e4:	e8a3000c 	lwi	r5, r3, 12
2000b2e8:	e8730014 	lwi	r3, r19, 20
2000b2ec:	64630402 	bslli	r3, r3, 2
2000b2f0:	10651800 	addk	r3, r5, r3
2000b2f4:	e8a30000 	lwi	r5, r3, 0
2000b2f8:	e8730010 	lwi	r3, r19, 16
2000b2fc:	e8630000 	lwi	r3, r3, 0
2000b300:	3063ffff 	addik	r3, r3, -1
2000b304:	84651800 	and	r3, r5, r3
2000b308:	64630402 	bslli	r3, r3, 2
2000b30c:	10641800 	addk	r3, r4, r3
2000b310:	e8630000 	lwi	r3, r3, 0
2000b314:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000b318:	e8730010 	lwi	r3, r19, 16
2000b31c:	e883000c 	lwi	r4, r3, 12
2000b320:	e8730014 	lwi	r3, r19, 20
2000b324:	64630402 	bslli	r3, r3, 2
2000b328:	10641800 	addk	r3, r4, r3
2000b32c:	e8830000 	lwi	r4, r3, 0
2000b330:	30840001 	addik	r4, r4, 1
2000b334:	f8830000 	swi	r4, r3, 0
    return value;
2000b338:	e8730004 	lwi	r3, r19, 4
}
2000b33c:	10330000 	addk	r1, r19, r0
2000b340:	ea610008 	lwi	r19, r1, 8
2000b344:	3021000c 	addik	r1, r1, 12
2000b348:	b60f0008 	rtsd	r15, 8
2000b34c:	80000000 	or	r0, r0, r0

2000b350 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000b350:	3021fff8 	addik	r1, r1, -8
2000b354:	fa610004 	swi	r19, r1, 4
2000b358:	12610000 	addk	r19, r1, r0
2000b35c:	f8b3000c 	swi	r5, r19, 12
2000b360:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000b364:	e873000c 	lwi	r3, r19, 12
2000b368:	e8830004 	lwi	r4, r3, 4
2000b36c:	e873000c 	lwi	r3, r19, 12
2000b370:	e8630010 	lwi	r3, r3, 16
2000b374:	e8a30000 	lwi	r5, r3, 0
2000b378:	e873000c 	lwi	r3, r19, 12
2000b37c:	e8630000 	lwi	r3, r3, 0
2000b380:	3063ffff 	addik	r3, r3, -1
2000b384:	84651800 	and	r3, r5, r3
2000b388:	64630402 	bslli	r3, r3, 2
2000b38c:	10641800 	addk	r3, r4, r3
2000b390:	e8930010 	lwi	r4, r19, 16
2000b394:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2000b398:	e873000c 	lwi	r3, r19, 12
2000b39c:	e8630010 	lwi	r3, r3, 16
2000b3a0:	e8830000 	lwi	r4, r3, 0
2000b3a4:	30840001 	addik	r4, r4, 1
2000b3a8:	f8830000 	swi	r4, r3, 0
}
2000b3ac:	10330000 	addk	r1, r19, r0
2000b3b0:	ea610004 	lwi	r19, r1, 4
2000b3b4:	30210008 	addik	r1, r1, 8
2000b3b8:	b60f0008 	rtsd	r15, 8
2000b3bc:	80000000 	or	r0, r0, r0

2000b3c0 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000b3c0:	3021fff8 	addik	r1, r1, -8
2000b3c4:	fa610004 	swi	r19, r1, 4
2000b3c8:	12610000 	addk	r19, r1, r0
2000b3cc:	f8b3000c 	swi	r5, r19, 12
2000b3d0:	f8d30010 	swi	r6, r19, 16
2000b3d4:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000b3d8:	e873000c 	lwi	r3, r19, 12
2000b3dc:	e8630010 	lwi	r3, r3, 16
2000b3e0:	e8830000 	lwi	r4, r3, 0
2000b3e4:	e873000c 	lwi	r3, r19, 12
2000b3e8:	e8a3000c 	lwi	r5, r3, 12
2000b3ec:	e8730010 	lwi	r3, r19, 16
2000b3f0:	64630402 	bslli	r3, r3, 2
2000b3f4:	10651800 	addk	r3, r5, r3
2000b3f8:	e8630000 	lwi	r3, r3, 0
2000b3fc:	14a32000 	rsubk	r5, r3, r4
2000b400:	30600001 	addik	r3, r0, 1
2000b404:	e8930014 	lwi	r4, r19, 20
2000b408:	16442803 	cmpu	r18, r4, r5
2000b40c:	bcb20008 	bgei	r18, 8		// 2000b414
2000b410:	10600000 	addk	r3, r0, r0
2000b414:	a46300ff 	andi	r3, r3, 255
}
2000b418:	10330000 	addk	r1, r19, r0
2000b41c:	ea610004 	lwi	r19, r1, 4
2000b420:	30210008 	addik	r1, r1, 8
2000b424:	b60f0008 	rtsd	r15, 8
2000b428:	80000000 	or	r0, r0, r0

2000b42c <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000b42c:	3021fff8 	addik	r1, r1, -8
2000b430:	fa610004 	swi	r19, r1, 4
2000b434:	12610000 	addk	r19, r1, r0
2000b438:	f8b3000c 	swi	r5, r19, 12
2000b43c:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000b440:	e873000c 	lwi	r3, r19, 12
2000b444:	e8630010 	lwi	r3, r3, 16
2000b448:	e8830000 	lwi	r4, r3, 0
2000b44c:	e873000c 	lwi	r3, r19, 12
2000b450:	e8a3000c 	lwi	r5, r3, 12
2000b454:	e8730010 	lwi	r3, r19, 16
2000b458:	64630402 	bslli	r3, r3, 2
2000b45c:	10651800 	addk	r3, r5, r3
2000b460:	e8630000 	lwi	r3, r3, 0
2000b464:	14632000 	rsubk	r3, r3, r4
}
2000b468:	10330000 	addk	r1, r19, r0
2000b46c:	ea610004 	lwi	r19, r1, 4
2000b470:	30210008 	addik	r1, r1, 8
2000b474:	b60f0008 	rtsd	r15, 8
2000b478:	80000000 	or	r0, r0, r0

2000b47c <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000b47c:	3021fff4 	addik	r1, r1, -12
2000b480:	fa610008 	swi	r19, r1, 8
2000b484:	12610000 	addk	r19, r1, r0
2000b488:	f8b30010 	swi	r5, r19, 16
2000b48c:	f8d30014 	swi	r6, r19, 20
2000b490:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000b494:	f8130004 	swi	r0, r19, 4
2000b498:	b800005c 	bri	92		// 2000b4f4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000b49c:	e8730010 	lwi	r3, r19, 16
2000b4a0:	e8830000 	lwi	r4, r3, 0
2000b4a4:	e8730010 	lwi	r3, r19, 16
2000b4a8:	e8a3000c 	lwi	r5, r3, 12
2000b4ac:	e8730004 	lwi	r3, r19, 4
2000b4b0:	64630402 	bslli	r3, r3, 2
2000b4b4:	10651800 	addk	r3, r5, r3
2000b4b8:	e8a30000 	lwi	r5, r3, 0
2000b4bc:	e8730010 	lwi	r3, r19, 16
2000b4c0:	e8630010 	lwi	r3, r3, 16
2000b4c4:	e8630000 	lwi	r3, r3, 0
2000b4c8:	14632800 	rsubk	r3, r3, r5
2000b4cc:	10641800 	addk	r3, r4, r3
2000b4d0:	30830001 	addik	r4, r3, 1
2000b4d4:	e8730018 	lwi	r3, r19, 24
2000b4d8:	16441803 	cmpu	r18, r4, r3
2000b4dc:	bc52000c 	blti	r18, 12		// 2000b4e8
            return 0;
2000b4e0:	10600000 	addk	r3, r0, r0
2000b4e4:	b8000024 	bri	36		// 2000b508
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000b4e8:	e8730004 	lwi	r3, r19, 4
2000b4ec:	30630001 	addik	r3, r3, 1
2000b4f0:	f8730004 	swi	r3, r19, 4
2000b4f4:	e8930004 	lwi	r4, r19, 4
2000b4f8:	e8730014 	lwi	r3, r19, 20
2000b4fc:	16432003 	cmpu	r18, r3, r4
2000b500:	bc52ff9c 	blti	r18, -100		// 2000b49c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000b504:	30600001 	addik	r3, r0, 1
}
2000b508:	10330000 	addk	r1, r19, r0
2000b50c:	ea610008 	lwi	r19, r1, 8
2000b510:	3021000c 	addik	r1, r1, 12
2000b514:	b60f0008 	rtsd	r15, 8
2000b518:	80000000 	or	r0, r0, r0

2000b51c <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000b51c:	3021ffec 	addik	r1, r1, -20
2000b520:	fa610010 	swi	r19, r1, 16
2000b524:	12610000 	addk	r19, r1, r0
2000b528:	f8b30018 	swi	r5, r19, 24
2000b52c:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000b530:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000b534:	f8130004 	swi	r0, r19, 4
2000b538:	b8000054 	bri	84		// 2000b58c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000b53c:	e8730018 	lwi	r3, r19, 24
2000b540:	e8630010 	lwi	r3, r3, 16
2000b544:	e8830000 	lwi	r4, r3, 0
2000b548:	e8730018 	lwi	r3, r19, 24
2000b54c:	e8a3000c 	lwi	r5, r3, 12
2000b550:	e8730004 	lwi	r3, r19, 4
2000b554:	64630402 	bslli	r3, r3, 2
2000b558:	10651800 	addk	r3, r5, r3
2000b55c:	e8630000 	lwi	r3, r3, 0
2000b560:	14632000 	rsubk	r3, r3, r4
2000b564:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000b568:	e8930008 	lwi	r4, r19, 8
2000b56c:	e873000c 	lwi	r3, r19, 12
2000b570:	16441803 	cmpu	r18, r4, r3
2000b574:	bcb20008 	bgei	r18, 8		// 2000b57c
2000b578:	10640000 	addk	r3, r4, r0
2000b57c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000b580:	e8730004 	lwi	r3, r19, 4
2000b584:	30630001 	addik	r3, r3, 1
2000b588:	f8730004 	swi	r3, r19, 4
2000b58c:	e8930004 	lwi	r4, r19, 4
2000b590:	e873001c 	lwi	r3, r19, 28
2000b594:	16432003 	cmpu	r18, r3, r4
2000b598:	bc52ffa4 	blti	r18, -92		// 2000b53c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000b59c:	e8730018 	lwi	r3, r19, 24
2000b5a0:	e8830000 	lwi	r4, r3, 0
2000b5a4:	e8730008 	lwi	r3, r19, 8
2000b5a8:	14632000 	rsubk	r3, r3, r4
}
2000b5ac:	10330000 	addk	r1, r19, r0
2000b5b0:	ea610010 	lwi	r19, r1, 16
2000b5b4:	30210014 	addik	r1, r1, 20
2000b5b8:	b60f0008 	rtsd	r15, 8
2000b5bc:	80000000 	or	r0, r0, r0

2000b5c0 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000b5c0:	3021fff4 	addik	r1, r1, -12
2000b5c4:	fa610008 	swi	r19, r1, 8
2000b5c8:	12610000 	addk	r19, r1, r0
2000b5cc:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2000b5d0:	e8730010 	lwi	r3, r19, 16
2000b5d4:	e8630010 	lwi	r3, r3, 16
2000b5d8:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000b5dc:	f8130004 	swi	r0, r19, 4
2000b5e0:	b8000028 	bri	40		// 2000b608
        fifo->read_inds[i] = 0;
2000b5e4:	e8730010 	lwi	r3, r19, 16
2000b5e8:	e883000c 	lwi	r4, r3, 12
2000b5ec:	e8730004 	lwi	r3, r19, 4
2000b5f0:	64630402 	bslli	r3, r3, 2
2000b5f4:	10641800 	addk	r3, r4, r3
2000b5f8:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000b5fc:	e8730004 	lwi	r3, r19, 4
2000b600:	30630001 	addik	r3, r3, 1
2000b604:	f8730004 	swi	r3, r19, 4
2000b608:	e8730010 	lwi	r3, r19, 16
2000b60c:	e8830008 	lwi	r4, r3, 8
2000b610:	e8730004 	lwi	r3, r19, 4
2000b614:	16441803 	cmpu	r18, r4, r3
2000b618:	bc52ffcc 	blti	r18, -52		// 2000b5e4
        fifo->read_inds[i] = 0;
    }
}
2000b61c:	10330000 	addk	r1, r19, r0
2000b620:	ea610008 	lwi	r19, r1, 8
2000b624:	3021000c 	addik	r1, r1, 12
2000b628:	b60f0008 	rtsd	r15, 8
2000b62c:	80000000 	or	r0, r0, r0

2000b630 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000b630:	3021fff0 	addik	r1, r1, -16
2000b634:	fa61000c 	swi	r19, r1, 12
2000b638:	12610000 	addk	r19, r1, r0
2000b63c:	f8b30014 	swi	r5, r19, 20
2000b640:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000b644:	e8730014 	lwi	r3, r19, 20
2000b648:	e8830004 	lwi	r4, r3, 4
2000b64c:	e8730014 	lwi	r3, r19, 20
2000b650:	e8a3000c 	lwi	r5, r3, 12
2000b654:	e8730018 	lwi	r3, r19, 24
2000b658:	64630402 	bslli	r3, r3, 2
2000b65c:	10651800 	addk	r3, r5, r3
2000b660:	e8a30000 	lwi	r5, r3, 0
2000b664:	e8730014 	lwi	r3, r19, 20
2000b668:	e8630000 	lwi	r3, r3, 0
2000b66c:	3063ffff 	addik	r3, r3, -1
2000b670:	84651800 	and	r3, r5, r3
2000b674:	64630403 	bslli	r3, r3, 3
2000b678:	10641800 	addk	r3, r4, r3
2000b67c:	e8830000 	lwi	r4, r3, 0
2000b680:	e8a30004 	lwi	r5, r3, 4
2000b684:	f8930004 	swi	r4, r19, 4
2000b688:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2000b68c:	e8730014 	lwi	r3, r19, 20
2000b690:	e883000c 	lwi	r4, r3, 12
2000b694:	e8730018 	lwi	r3, r19, 24
2000b698:	64630402 	bslli	r3, r3, 2
2000b69c:	10641800 	addk	r3, r4, r3
2000b6a0:	e8830000 	lwi	r4, r3, 0
2000b6a4:	30840001 	addik	r4, r4, 1
2000b6a8:	f8830000 	swi	r4, r3, 0
    return value;
2000b6ac:	e8930004 	lwi	r4, r19, 4
2000b6b0:	e8b30008 	lwi	r5, r19, 8
}
2000b6b4:	10640000 	addk	r3, r4, r0
2000b6b8:	10850000 	addk	r4, r5, r0
2000b6bc:	10330000 	addk	r1, r19, r0
2000b6c0:	ea61000c 	lwi	r19, r1, 12
2000b6c4:	30210010 	addik	r1, r1, 16
2000b6c8:	b60f0008 	rtsd	r15, 8
2000b6cc:	80000000 	or	r0, r0, r0

2000b6d0 <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000b6d0:	3021fff8 	addik	r1, r1, -8
2000b6d4:	fa610004 	swi	r19, r1, 4
2000b6d8:	12610000 	addk	r19, r1, r0
2000b6dc:	f8b3000c 	swi	r5, r19, 12
2000b6e0:	f8d30010 	swi	r6, r19, 16
2000b6e4:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000b6e8:	e873000c 	lwi	r3, r19, 12
2000b6ec:	e8830004 	lwi	r4, r3, 4
2000b6f0:	e873000c 	lwi	r3, r19, 12
2000b6f4:	e8630010 	lwi	r3, r3, 16
2000b6f8:	e8a30000 	lwi	r5, r3, 0
2000b6fc:	e873000c 	lwi	r3, r19, 12
2000b700:	e8630000 	lwi	r3, r3, 0
2000b704:	3063ffff 	addik	r3, r3, -1
2000b708:	84651800 	and	r3, r5, r3
2000b70c:	64630403 	bslli	r3, r3, 3
2000b710:	10641800 	addk	r3, r4, r3
2000b714:	e8930010 	lwi	r4, r19, 16
2000b718:	e8b30014 	lwi	r5, r19, 20
2000b71c:	f8830000 	swi	r4, r3, 0
2000b720:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2000b724:	e873000c 	lwi	r3, r19, 12
2000b728:	e8630010 	lwi	r3, r3, 16
2000b72c:	e8830000 	lwi	r4, r3, 0
2000b730:	30840001 	addik	r4, r4, 1
2000b734:	f8830000 	swi	r4, r3, 0
}
2000b738:	10330000 	addk	r1, r19, r0
2000b73c:	ea610004 	lwi	r19, r1, 4
2000b740:	30210008 	addik	r1, r1, 8
2000b744:	b60f0008 	rtsd	r15, 8
2000b748:	80000000 	or	r0, r0, r0

2000b74c <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000b74c:	3021fff8 	addik	r1, r1, -8
2000b750:	fa610004 	swi	r19, r1, 4
2000b754:	12610000 	addk	r19, r1, r0
2000b758:	f8b3000c 	swi	r5, r19, 12
2000b75c:	f8d30010 	swi	r6, r19, 16
2000b760:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000b764:	e873000c 	lwi	r3, r19, 12
2000b768:	e8630010 	lwi	r3, r3, 16
2000b76c:	e8830000 	lwi	r4, r3, 0
2000b770:	e873000c 	lwi	r3, r19, 12
2000b774:	e8a3000c 	lwi	r5, r3, 12
2000b778:	e8730010 	lwi	r3, r19, 16
2000b77c:	64630402 	bslli	r3, r3, 2
2000b780:	10651800 	addk	r3, r5, r3
2000b784:	e8630000 	lwi	r3, r3, 0
2000b788:	14a32000 	rsubk	r5, r3, r4
2000b78c:	30600001 	addik	r3, r0, 1
2000b790:	e8930014 	lwi	r4, r19, 20
2000b794:	16442803 	cmpu	r18, r4, r5
2000b798:	bcb20008 	bgei	r18, 8		// 2000b7a0
2000b79c:	10600000 	addk	r3, r0, r0
2000b7a0:	a46300ff 	andi	r3, r3, 255
}
2000b7a4:	10330000 	addk	r1, r19, r0
2000b7a8:	ea610004 	lwi	r19, r1, 4
2000b7ac:	30210008 	addik	r1, r1, 8
2000b7b0:	b60f0008 	rtsd	r15, 8
2000b7b4:	80000000 	or	r0, r0, r0

2000b7b8 <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000b7b8:	3021fff8 	addik	r1, r1, -8
2000b7bc:	fa610004 	swi	r19, r1, 4
2000b7c0:	12610000 	addk	r19, r1, r0
2000b7c4:	f8b3000c 	swi	r5, r19, 12
2000b7c8:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000b7cc:	e873000c 	lwi	r3, r19, 12
2000b7d0:	e8630010 	lwi	r3, r3, 16
2000b7d4:	e8830000 	lwi	r4, r3, 0
2000b7d8:	e873000c 	lwi	r3, r19, 12
2000b7dc:	e8a3000c 	lwi	r5, r3, 12
2000b7e0:	e8730010 	lwi	r3, r19, 16
2000b7e4:	64630402 	bslli	r3, r3, 2
2000b7e8:	10651800 	addk	r3, r5, r3
2000b7ec:	e8630000 	lwi	r3, r3, 0
2000b7f0:	14632000 	rsubk	r3, r3, r4
}
2000b7f4:	10330000 	addk	r1, r19, r0
2000b7f8:	ea610004 	lwi	r19, r1, 4
2000b7fc:	30210008 	addik	r1, r1, 8
2000b800:	b60f0008 	rtsd	r15, 8
2000b804:	80000000 	or	r0, r0, r0

2000b808 <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000b808:	3021fff4 	addik	r1, r1, -12
2000b80c:	fa610008 	swi	r19, r1, 8
2000b810:	12610000 	addk	r19, r1, r0
2000b814:	f8b30010 	swi	r5, r19, 16
2000b818:	f8d30014 	swi	r6, r19, 20
2000b81c:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000b820:	f8130004 	swi	r0, r19, 4
2000b824:	b800005c 	bri	92		// 2000b880
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000b828:	e8730010 	lwi	r3, r19, 16
2000b82c:	e8830000 	lwi	r4, r3, 0
2000b830:	e8730010 	lwi	r3, r19, 16
2000b834:	e8a3000c 	lwi	r5, r3, 12
2000b838:	e8730004 	lwi	r3, r19, 4
2000b83c:	64630402 	bslli	r3, r3, 2
2000b840:	10651800 	addk	r3, r5, r3
2000b844:	e8a30000 	lwi	r5, r3, 0
2000b848:	e8730010 	lwi	r3, r19, 16
2000b84c:	e8630010 	lwi	r3, r3, 16
2000b850:	e8630000 	lwi	r3, r3, 0
2000b854:	14632800 	rsubk	r3, r3, r5
2000b858:	10641800 	addk	r3, r4, r3
2000b85c:	30830001 	addik	r4, r3, 1
2000b860:	e8730018 	lwi	r3, r19, 24
2000b864:	16441803 	cmpu	r18, r4, r3
2000b868:	bc52000c 	blti	r18, 12		// 2000b874
            return 0;
2000b86c:	10600000 	addk	r3, r0, r0
2000b870:	b8000024 	bri	36		// 2000b894
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000b874:	e8730004 	lwi	r3, r19, 4
2000b878:	30630001 	addik	r3, r3, 1
2000b87c:	f8730004 	swi	r3, r19, 4
2000b880:	e8930004 	lwi	r4, r19, 4
2000b884:	e8730014 	lwi	r3, r19, 20
2000b888:	16432003 	cmpu	r18, r3, r4
2000b88c:	bc52ff9c 	blti	r18, -100		// 2000b828
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000b890:	30600001 	addik	r3, r0, 1
}
2000b894:	10330000 	addk	r1, r19, r0
2000b898:	ea610008 	lwi	r19, r1, 8
2000b89c:	3021000c 	addik	r1, r1, 12
2000b8a0:	b60f0008 	rtsd	r15, 8
2000b8a4:	80000000 	or	r0, r0, r0

2000b8a8 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000b8a8:	3021ffec 	addik	r1, r1, -20
2000b8ac:	fa610010 	swi	r19, r1, 16
2000b8b0:	12610000 	addk	r19, r1, r0
2000b8b4:	f8b30018 	swi	r5, r19, 24
2000b8b8:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000b8bc:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000b8c0:	f8130004 	swi	r0, r19, 4
2000b8c4:	b8000054 	bri	84		// 2000b918
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000b8c8:	e8730018 	lwi	r3, r19, 24
2000b8cc:	e8630010 	lwi	r3, r3, 16
2000b8d0:	e8830000 	lwi	r4, r3, 0
2000b8d4:	e8730018 	lwi	r3, r19, 24
2000b8d8:	e8a3000c 	lwi	r5, r3, 12
2000b8dc:	e8730004 	lwi	r3, r19, 4
2000b8e0:	64630402 	bslli	r3, r3, 2
2000b8e4:	10651800 	addk	r3, r5, r3
2000b8e8:	e8630000 	lwi	r3, r3, 0
2000b8ec:	14632000 	rsubk	r3, r3, r4
2000b8f0:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000b8f4:	e8930008 	lwi	r4, r19, 8
2000b8f8:	e873000c 	lwi	r3, r19, 12
2000b8fc:	16441803 	cmpu	r18, r4, r3
2000b900:	bcb20008 	bgei	r18, 8		// 2000b908
2000b904:	10640000 	addk	r3, r4, r0
2000b908:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000b90c:	e8730004 	lwi	r3, r19, 4
2000b910:	30630001 	addik	r3, r3, 1
2000b914:	f8730004 	swi	r3, r19, 4
2000b918:	e8930004 	lwi	r4, r19, 4
2000b91c:	e873001c 	lwi	r3, r19, 28
2000b920:	16432003 	cmpu	r18, r3, r4
2000b924:	bc52ffa4 	blti	r18, -92		// 2000b8c8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000b928:	e8730018 	lwi	r3, r19, 24
2000b92c:	e8830000 	lwi	r4, r3, 0
2000b930:	e8730008 	lwi	r3, r19, 8
2000b934:	14632000 	rsubk	r3, r3, r4
}
2000b938:	10330000 	addk	r1, r19, r0
2000b93c:	ea610010 	lwi	r19, r1, 16
2000b940:	30210014 	addik	r1, r1, 20
2000b944:	b60f0008 	rtsd	r15, 8
2000b948:	80000000 	or	r0, r0, r0

2000b94c <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000b94c:	3021fff4 	addik	r1, r1, -12
2000b950:	fa610008 	swi	r19, r1, 8
2000b954:	12610000 	addk	r19, r1, r0
2000b958:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2000b95c:	e8730010 	lwi	r3, r19, 16
2000b960:	e8630010 	lwi	r3, r3, 16
2000b964:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000b968:	f8130004 	swi	r0, r19, 4
2000b96c:	b8000028 	bri	40		// 2000b994
        fifo->read_inds[i] = 0;
2000b970:	e8730010 	lwi	r3, r19, 16
2000b974:	e883000c 	lwi	r4, r3, 12
2000b978:	e8730004 	lwi	r3, r19, 4
2000b97c:	64630402 	bslli	r3, r3, 2
2000b980:	10641800 	addk	r3, r4, r3
2000b984:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000b988:	e8730004 	lwi	r3, r19, 4
2000b98c:	30630001 	addik	r3, r3, 1
2000b990:	f8730004 	swi	r3, r19, 4
2000b994:	e8730010 	lwi	r3, r19, 16
2000b998:	e8830008 	lwi	r4, r3, 8
2000b99c:	e8730004 	lwi	r3, r19, 4
2000b9a0:	16441803 	cmpu	r18, r4, r3
2000b9a4:	bc52ffcc 	blti	r18, -52		// 2000b970
        fifo->read_inds[i] = 0;
    }
}
2000b9a8:	10330000 	addk	r1, r19, r0
2000b9ac:	ea610008 	lwi	r19, r1, 8
2000b9b0:	3021000c 	addik	r1, r1, 12
2000b9b4:	b60f0008 	rtsd	r15, 8
2000b9b8:	80000000 	or	r0, r0, r0

2000b9bc <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000b9bc:	3021fff4 	addik	r1, r1, -12
2000b9c0:	fa610008 	swi	r19, r1, 8
2000b9c4:	12610000 	addk	r19, r1, r0
2000b9c8:	f8b30010 	swi	r5, r19, 16
2000b9cc:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000b9d0:	e8730010 	lwi	r3, r19, 16
2000b9d4:	e8830004 	lwi	r4, r3, 4
2000b9d8:	e8730010 	lwi	r3, r19, 16
2000b9dc:	e8a3000c 	lwi	r5, r3, 12
2000b9e0:	e8730014 	lwi	r3, r19, 20
2000b9e4:	64630402 	bslli	r3, r3, 2
2000b9e8:	10651800 	addk	r3, r5, r3
2000b9ec:	e8a30000 	lwi	r5, r3, 0
2000b9f0:	e8730010 	lwi	r3, r19, 16
2000b9f4:	e8630000 	lwi	r3, r3, 0
2000b9f8:	3063ffff 	addik	r3, r3, -1
2000b9fc:	84651800 	and	r3, r5, r3
2000ba00:	10641800 	addk	r3, r4, r3
2000ba04:	e0630000 	lbui	r3, r3, 0
2000ba08:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000ba0c:	e8730010 	lwi	r3, r19, 16
2000ba10:	e883000c 	lwi	r4, r3, 12
2000ba14:	e8730014 	lwi	r3, r19, 20
2000ba18:	64630402 	bslli	r3, r3, 2
2000ba1c:	10641800 	addk	r3, r4, r3
2000ba20:	e8830000 	lwi	r4, r3, 0
2000ba24:	30840001 	addik	r4, r4, 1
2000ba28:	f8830000 	swi	r4, r3, 0
    return value;
2000ba2c:	e0730004 	lbui	r3, r19, 4
}
2000ba30:	10330000 	addk	r1, r19, r0
2000ba34:	ea610008 	lwi	r19, r1, 8
2000ba38:	3021000c 	addik	r1, r1, 12
2000ba3c:	b60f0008 	rtsd	r15, 8
2000ba40:	80000000 	or	r0, r0, r0

2000ba44 <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000ba44:	3021fff8 	addik	r1, r1, -8
2000ba48:	fa610004 	swi	r19, r1, 4
2000ba4c:	12610000 	addk	r19, r1, r0
2000ba50:	f8b3000c 	swi	r5, r19, 12
2000ba54:	10660000 	addk	r3, r6, r0
2000ba58:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000ba5c:	e873000c 	lwi	r3, r19, 12
2000ba60:	e8830004 	lwi	r4, r3, 4
2000ba64:	e873000c 	lwi	r3, r19, 12
2000ba68:	e8630010 	lwi	r3, r3, 16
2000ba6c:	e8a30000 	lwi	r5, r3, 0
2000ba70:	e873000c 	lwi	r3, r19, 12
2000ba74:	e8630000 	lwi	r3, r3, 0
2000ba78:	3063ffff 	addik	r3, r3, -1
2000ba7c:	84651800 	and	r3, r5, r3
2000ba80:	10641800 	addk	r3, r4, r3
2000ba84:	e0930010 	lbui	r4, r19, 16
2000ba88:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2000ba8c:	e873000c 	lwi	r3, r19, 12
2000ba90:	e8630010 	lwi	r3, r3, 16
2000ba94:	e8830000 	lwi	r4, r3, 0
2000ba98:	30840001 	addik	r4, r4, 1
2000ba9c:	f8830000 	swi	r4, r3, 0
}
2000baa0:	10330000 	addk	r1, r19, r0
2000baa4:	ea610004 	lwi	r19, r1, 4
2000baa8:	30210008 	addik	r1, r1, 8
2000baac:	b60f0008 	rtsd	r15, 8
2000bab0:	80000000 	or	r0, r0, r0

2000bab4 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000bab4:	3021fff8 	addik	r1, r1, -8
2000bab8:	fa610004 	swi	r19, r1, 4
2000babc:	12610000 	addk	r19, r1, r0
2000bac0:	f8b3000c 	swi	r5, r19, 12
2000bac4:	f8d30010 	swi	r6, r19, 16
2000bac8:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000bacc:	e873000c 	lwi	r3, r19, 12
2000bad0:	e8630010 	lwi	r3, r3, 16
2000bad4:	e8830000 	lwi	r4, r3, 0
2000bad8:	e873000c 	lwi	r3, r19, 12
2000badc:	e8a3000c 	lwi	r5, r3, 12
2000bae0:	e8730010 	lwi	r3, r19, 16
2000bae4:	64630402 	bslli	r3, r3, 2
2000bae8:	10651800 	addk	r3, r5, r3
2000baec:	e8630000 	lwi	r3, r3, 0
2000baf0:	14a32000 	rsubk	r5, r3, r4
2000baf4:	30600001 	addik	r3, r0, 1
2000baf8:	e8930014 	lwi	r4, r19, 20
2000bafc:	16442803 	cmpu	r18, r4, r5
2000bb00:	bcb20008 	bgei	r18, 8		// 2000bb08
2000bb04:	10600000 	addk	r3, r0, r0
2000bb08:	a46300ff 	andi	r3, r3, 255
}
2000bb0c:	10330000 	addk	r1, r19, r0
2000bb10:	ea610004 	lwi	r19, r1, 4
2000bb14:	30210008 	addik	r1, r1, 8
2000bb18:	b60f0008 	rtsd	r15, 8
2000bb1c:	80000000 	or	r0, r0, r0

2000bb20 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000bb20:	3021fff8 	addik	r1, r1, -8
2000bb24:	fa610004 	swi	r19, r1, 4
2000bb28:	12610000 	addk	r19, r1, r0
2000bb2c:	f8b3000c 	swi	r5, r19, 12
2000bb30:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000bb34:	e873000c 	lwi	r3, r19, 12
2000bb38:	e8630010 	lwi	r3, r3, 16
2000bb3c:	e8830000 	lwi	r4, r3, 0
2000bb40:	e873000c 	lwi	r3, r19, 12
2000bb44:	e8a3000c 	lwi	r5, r3, 12
2000bb48:	e8730010 	lwi	r3, r19, 16
2000bb4c:	64630402 	bslli	r3, r3, 2
2000bb50:	10651800 	addk	r3, r5, r3
2000bb54:	e8630000 	lwi	r3, r3, 0
2000bb58:	14632000 	rsubk	r3, r3, r4
}
2000bb5c:	10330000 	addk	r1, r19, r0
2000bb60:	ea610004 	lwi	r19, r1, 4
2000bb64:	30210008 	addik	r1, r1, 8
2000bb68:	b60f0008 	rtsd	r15, 8
2000bb6c:	80000000 	or	r0, r0, r0

2000bb70 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000bb70:	3021fff4 	addik	r1, r1, -12
2000bb74:	fa610008 	swi	r19, r1, 8
2000bb78:	12610000 	addk	r19, r1, r0
2000bb7c:	f8b30010 	swi	r5, r19, 16
2000bb80:	f8d30014 	swi	r6, r19, 20
2000bb84:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000bb88:	f8130004 	swi	r0, r19, 4
2000bb8c:	b800005c 	bri	92		// 2000bbe8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000bb90:	e8730010 	lwi	r3, r19, 16
2000bb94:	e8830000 	lwi	r4, r3, 0
2000bb98:	e8730010 	lwi	r3, r19, 16
2000bb9c:	e8a3000c 	lwi	r5, r3, 12
2000bba0:	e8730004 	lwi	r3, r19, 4
2000bba4:	64630402 	bslli	r3, r3, 2
2000bba8:	10651800 	addk	r3, r5, r3
2000bbac:	e8a30000 	lwi	r5, r3, 0
2000bbb0:	e8730010 	lwi	r3, r19, 16
2000bbb4:	e8630010 	lwi	r3, r3, 16
2000bbb8:	e8630000 	lwi	r3, r3, 0
2000bbbc:	14632800 	rsubk	r3, r3, r5
2000bbc0:	10641800 	addk	r3, r4, r3
2000bbc4:	30830001 	addik	r4, r3, 1
2000bbc8:	e8730018 	lwi	r3, r19, 24
2000bbcc:	16441803 	cmpu	r18, r4, r3
2000bbd0:	bc52000c 	blti	r18, 12		// 2000bbdc
            return 0;
2000bbd4:	10600000 	addk	r3, r0, r0
2000bbd8:	b8000024 	bri	36		// 2000bbfc
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000bbdc:	e8730004 	lwi	r3, r19, 4
2000bbe0:	30630001 	addik	r3, r3, 1
2000bbe4:	f8730004 	swi	r3, r19, 4
2000bbe8:	e8930004 	lwi	r4, r19, 4
2000bbec:	e8730014 	lwi	r3, r19, 20
2000bbf0:	16432003 	cmpu	r18, r3, r4
2000bbf4:	bc52ff9c 	blti	r18, -100		// 2000bb90
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000bbf8:	30600001 	addik	r3, r0, 1
}
2000bbfc:	10330000 	addk	r1, r19, r0
2000bc00:	ea610008 	lwi	r19, r1, 8
2000bc04:	3021000c 	addik	r1, r1, 12
2000bc08:	b60f0008 	rtsd	r15, 8
2000bc0c:	80000000 	or	r0, r0, r0

2000bc10 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000bc10:	3021ffec 	addik	r1, r1, -20
2000bc14:	fa610010 	swi	r19, r1, 16
2000bc18:	12610000 	addk	r19, r1, r0
2000bc1c:	f8b30018 	swi	r5, r19, 24
2000bc20:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000bc24:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000bc28:	f8130004 	swi	r0, r19, 4
2000bc2c:	b8000054 	bri	84		// 2000bc80
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000bc30:	e8730018 	lwi	r3, r19, 24
2000bc34:	e8630010 	lwi	r3, r3, 16
2000bc38:	e8830000 	lwi	r4, r3, 0
2000bc3c:	e8730018 	lwi	r3, r19, 24
2000bc40:	e8a3000c 	lwi	r5, r3, 12
2000bc44:	e8730004 	lwi	r3, r19, 4
2000bc48:	64630402 	bslli	r3, r3, 2
2000bc4c:	10651800 	addk	r3, r5, r3
2000bc50:	e8630000 	lwi	r3, r3, 0
2000bc54:	14632000 	rsubk	r3, r3, r4
2000bc58:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000bc5c:	e8930008 	lwi	r4, r19, 8
2000bc60:	e873000c 	lwi	r3, r19, 12
2000bc64:	16441803 	cmpu	r18, r4, r3
2000bc68:	bcb20008 	bgei	r18, 8		// 2000bc70
2000bc6c:	10640000 	addk	r3, r4, r0
2000bc70:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000bc74:	e8730004 	lwi	r3, r19, 4
2000bc78:	30630001 	addik	r3, r3, 1
2000bc7c:	f8730004 	swi	r3, r19, 4
2000bc80:	e8930004 	lwi	r4, r19, 4
2000bc84:	e873001c 	lwi	r3, r19, 28
2000bc88:	16432003 	cmpu	r18, r3, r4
2000bc8c:	bc52ffa4 	blti	r18, -92		// 2000bc30
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000bc90:	e8730018 	lwi	r3, r19, 24
2000bc94:	e8830000 	lwi	r4, r3, 0
2000bc98:	e8730008 	lwi	r3, r19, 8
2000bc9c:	14632000 	rsubk	r3, r3, r4
}
2000bca0:	10330000 	addk	r1, r19, r0
2000bca4:	ea610010 	lwi	r19, r1, 16
2000bca8:	30210014 	addik	r1, r1, 20
2000bcac:	b60f0008 	rtsd	r15, 8
2000bcb0:	80000000 	or	r0, r0, r0

2000bcb4 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000bcb4:	3021fff4 	addik	r1, r1, -12
2000bcb8:	fa610008 	swi	r19, r1, 8
2000bcbc:	12610000 	addk	r19, r1, r0
2000bcc0:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2000bcc4:	e8730010 	lwi	r3, r19, 16
2000bcc8:	e8630010 	lwi	r3, r3, 16
2000bccc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000bcd0:	f8130004 	swi	r0, r19, 4
2000bcd4:	b8000028 	bri	40		// 2000bcfc
        fifo->read_inds[i] = 0;
2000bcd8:	e8730010 	lwi	r3, r19, 16
2000bcdc:	e883000c 	lwi	r4, r3, 12
2000bce0:	e8730004 	lwi	r3, r19, 4
2000bce4:	64630402 	bslli	r3, r3, 2
2000bce8:	10641800 	addk	r3, r4, r3
2000bcec:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000bcf0:	e8730004 	lwi	r3, r19, 4
2000bcf4:	30630001 	addik	r3, r3, 1
2000bcf8:	f8730004 	swi	r3, r19, 4
2000bcfc:	e8730010 	lwi	r3, r19, 16
2000bd00:	e8830008 	lwi	r4, r3, 8
2000bd04:	e8730004 	lwi	r3, r19, 4
2000bd08:	16441803 	cmpu	r18, r4, r3
2000bd0c:	bc52ffcc 	blti	r18, -52		// 2000bcd8
        fifo->read_inds[i] = 0;
    }
}
2000bd10:	10330000 	addk	r1, r19, r0
2000bd14:	ea610008 	lwi	r19, r1, 8
2000bd18:	3021000c 	addik	r1, r1, 12
2000bd1c:	b60f0008 	rtsd	r15, 8
2000bd20:	80000000 	or	r0, r0, r0

2000bd24 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000bd24:	3021fff4 	addik	r1, r1, -12
2000bd28:	fa610008 	swi	r19, r1, 8
2000bd2c:	12610000 	addk	r19, r1, r0
2000bd30:	f8b30010 	swi	r5, r19, 16
2000bd34:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000bd38:	e8730010 	lwi	r3, r19, 16
2000bd3c:	e8830004 	lwi	r4, r3, 4
2000bd40:	e8730010 	lwi	r3, r19, 16
2000bd44:	e8a3000c 	lwi	r5, r3, 12
2000bd48:	e8730014 	lwi	r3, r19, 20
2000bd4c:	64630402 	bslli	r3, r3, 2
2000bd50:	10651800 	addk	r3, r5, r3
2000bd54:	e8a30000 	lwi	r5, r3, 0
2000bd58:	e8730010 	lwi	r3, r19, 16
2000bd5c:	e8630000 	lwi	r3, r3, 0
2000bd60:	3063ffff 	addik	r3, r3, -1
2000bd64:	84651800 	and	r3, r5, r3
2000bd68:	10631800 	addk	r3, r3, r3
2000bd6c:	10641800 	addk	r3, r4, r3
2000bd70:	e4630000 	lhui	r3, r3, 0
2000bd74:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000bd78:	e8730010 	lwi	r3, r19, 16
2000bd7c:	e883000c 	lwi	r4, r3, 12
2000bd80:	e8730014 	lwi	r3, r19, 20
2000bd84:	64630402 	bslli	r3, r3, 2
2000bd88:	10641800 	addk	r3, r4, r3
2000bd8c:	e8830000 	lwi	r4, r3, 0
2000bd90:	30840001 	addik	r4, r4, 1
2000bd94:	f8830000 	swi	r4, r3, 0
    return value;
2000bd98:	e4730004 	lhui	r3, r19, 4
}
2000bd9c:	10330000 	addk	r1, r19, r0
2000bda0:	ea610008 	lwi	r19, r1, 8
2000bda4:	3021000c 	addik	r1, r1, 12
2000bda8:	b60f0008 	rtsd	r15, 8
2000bdac:	80000000 	or	r0, r0, r0

2000bdb0 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000bdb0:	3021fff8 	addik	r1, r1, -8
2000bdb4:	fa610004 	swi	r19, r1, 4
2000bdb8:	12610000 	addk	r19, r1, r0
2000bdbc:	f8b3000c 	swi	r5, r19, 12
2000bdc0:	10660000 	addk	r3, r6, r0
2000bdc4:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000bdc8:	e873000c 	lwi	r3, r19, 12
2000bdcc:	e8830004 	lwi	r4, r3, 4
2000bdd0:	e873000c 	lwi	r3, r19, 12
2000bdd4:	e8630010 	lwi	r3, r3, 16
2000bdd8:	e8a30000 	lwi	r5, r3, 0
2000bddc:	e873000c 	lwi	r3, r19, 12
2000bde0:	e8630000 	lwi	r3, r3, 0
2000bde4:	3063ffff 	addik	r3, r3, -1
2000bde8:	84651800 	and	r3, r5, r3
2000bdec:	10631800 	addk	r3, r3, r3
2000bdf0:	10641800 	addk	r3, r4, r3
2000bdf4:	e4930010 	lhui	r4, r19, 16
2000bdf8:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2000bdfc:	e873000c 	lwi	r3, r19, 12
2000be00:	e8630010 	lwi	r3, r3, 16
2000be04:	e8830000 	lwi	r4, r3, 0
2000be08:	30840001 	addik	r4, r4, 1
2000be0c:	f8830000 	swi	r4, r3, 0
}
2000be10:	10330000 	addk	r1, r19, r0
2000be14:	ea610004 	lwi	r19, r1, 4
2000be18:	30210008 	addik	r1, r1, 8
2000be1c:	b60f0008 	rtsd	r15, 8
2000be20:	80000000 	or	r0, r0, r0

2000be24 <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000be24:	3021fff8 	addik	r1, r1, -8
2000be28:	fa610004 	swi	r19, r1, 4
2000be2c:	12610000 	addk	r19, r1, r0
2000be30:	f8b3000c 	swi	r5, r19, 12
2000be34:	f8d30010 	swi	r6, r19, 16
2000be38:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000be3c:	e873000c 	lwi	r3, r19, 12
2000be40:	e8630010 	lwi	r3, r3, 16
2000be44:	e8830000 	lwi	r4, r3, 0
2000be48:	e873000c 	lwi	r3, r19, 12
2000be4c:	e8a3000c 	lwi	r5, r3, 12
2000be50:	e8730010 	lwi	r3, r19, 16
2000be54:	64630402 	bslli	r3, r3, 2
2000be58:	10651800 	addk	r3, r5, r3
2000be5c:	e8630000 	lwi	r3, r3, 0
2000be60:	14a32000 	rsubk	r5, r3, r4
2000be64:	30600001 	addik	r3, r0, 1
2000be68:	e8930014 	lwi	r4, r19, 20
2000be6c:	16442803 	cmpu	r18, r4, r5
2000be70:	bcb20008 	bgei	r18, 8		// 2000be78
2000be74:	10600000 	addk	r3, r0, r0
2000be78:	a46300ff 	andi	r3, r3, 255
}
2000be7c:	10330000 	addk	r1, r19, r0
2000be80:	ea610004 	lwi	r19, r1, 4
2000be84:	30210008 	addik	r1, r1, 8
2000be88:	b60f0008 	rtsd	r15, 8
2000be8c:	80000000 	or	r0, r0, r0

2000be90 <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000be90:	3021fff8 	addik	r1, r1, -8
2000be94:	fa610004 	swi	r19, r1, 4
2000be98:	12610000 	addk	r19, r1, r0
2000be9c:	f8b3000c 	swi	r5, r19, 12
2000bea0:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000bea4:	e873000c 	lwi	r3, r19, 12
2000bea8:	e8630010 	lwi	r3, r3, 16
2000beac:	e8830000 	lwi	r4, r3, 0
2000beb0:	e873000c 	lwi	r3, r19, 12
2000beb4:	e8a3000c 	lwi	r5, r3, 12
2000beb8:	e8730010 	lwi	r3, r19, 16
2000bebc:	64630402 	bslli	r3, r3, 2
2000bec0:	10651800 	addk	r3, r5, r3
2000bec4:	e8630000 	lwi	r3, r3, 0
2000bec8:	14632000 	rsubk	r3, r3, r4
}
2000becc:	10330000 	addk	r1, r19, r0
2000bed0:	ea610004 	lwi	r19, r1, 4
2000bed4:	30210008 	addik	r1, r1, 8
2000bed8:	b60f0008 	rtsd	r15, 8
2000bedc:	80000000 	or	r0, r0, r0

2000bee0 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000bee0:	3021fff4 	addik	r1, r1, -12
2000bee4:	fa610008 	swi	r19, r1, 8
2000bee8:	12610000 	addk	r19, r1, r0
2000beec:	f8b30010 	swi	r5, r19, 16
2000bef0:	f8d30014 	swi	r6, r19, 20
2000bef4:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000bef8:	f8130004 	swi	r0, r19, 4
2000befc:	b800005c 	bri	92		// 2000bf58
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000bf00:	e8730010 	lwi	r3, r19, 16
2000bf04:	e8830000 	lwi	r4, r3, 0
2000bf08:	e8730010 	lwi	r3, r19, 16
2000bf0c:	e8a3000c 	lwi	r5, r3, 12
2000bf10:	e8730004 	lwi	r3, r19, 4
2000bf14:	64630402 	bslli	r3, r3, 2
2000bf18:	10651800 	addk	r3, r5, r3
2000bf1c:	e8a30000 	lwi	r5, r3, 0
2000bf20:	e8730010 	lwi	r3, r19, 16
2000bf24:	e8630010 	lwi	r3, r3, 16
2000bf28:	e8630000 	lwi	r3, r3, 0
2000bf2c:	14632800 	rsubk	r3, r3, r5
2000bf30:	10641800 	addk	r3, r4, r3
2000bf34:	30830001 	addik	r4, r3, 1
2000bf38:	e8730018 	lwi	r3, r19, 24
2000bf3c:	16441803 	cmpu	r18, r4, r3
2000bf40:	bc52000c 	blti	r18, 12		// 2000bf4c
            return 0;
2000bf44:	10600000 	addk	r3, r0, r0
2000bf48:	b8000024 	bri	36		// 2000bf6c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000bf4c:	e8730004 	lwi	r3, r19, 4
2000bf50:	30630001 	addik	r3, r3, 1
2000bf54:	f8730004 	swi	r3, r19, 4
2000bf58:	e8930004 	lwi	r4, r19, 4
2000bf5c:	e8730014 	lwi	r3, r19, 20
2000bf60:	16432003 	cmpu	r18, r3, r4
2000bf64:	bc52ff9c 	blti	r18, -100		// 2000bf00
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000bf68:	30600001 	addik	r3, r0, 1
}
2000bf6c:	10330000 	addk	r1, r19, r0
2000bf70:	ea610008 	lwi	r19, r1, 8
2000bf74:	3021000c 	addik	r1, r1, 12
2000bf78:	b60f0008 	rtsd	r15, 8
2000bf7c:	80000000 	or	r0, r0, r0

2000bf80 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000bf80:	3021ffec 	addik	r1, r1, -20
2000bf84:	fa610010 	swi	r19, r1, 16
2000bf88:	12610000 	addk	r19, r1, r0
2000bf8c:	f8b30018 	swi	r5, r19, 24
2000bf90:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000bf94:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000bf98:	f8130004 	swi	r0, r19, 4
2000bf9c:	b8000054 	bri	84		// 2000bff0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000bfa0:	e8730018 	lwi	r3, r19, 24
2000bfa4:	e8630010 	lwi	r3, r3, 16
2000bfa8:	e8830000 	lwi	r4, r3, 0
2000bfac:	e8730018 	lwi	r3, r19, 24
2000bfb0:	e8a3000c 	lwi	r5, r3, 12
2000bfb4:	e8730004 	lwi	r3, r19, 4
2000bfb8:	64630402 	bslli	r3, r3, 2
2000bfbc:	10651800 	addk	r3, r5, r3
2000bfc0:	e8630000 	lwi	r3, r3, 0
2000bfc4:	14632000 	rsubk	r3, r3, r4
2000bfc8:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000bfcc:	e8930008 	lwi	r4, r19, 8
2000bfd0:	e873000c 	lwi	r3, r19, 12
2000bfd4:	16441803 	cmpu	r18, r4, r3
2000bfd8:	bcb20008 	bgei	r18, 8		// 2000bfe0
2000bfdc:	10640000 	addk	r3, r4, r0
2000bfe0:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000bfe4:	e8730004 	lwi	r3, r19, 4
2000bfe8:	30630001 	addik	r3, r3, 1
2000bfec:	f8730004 	swi	r3, r19, 4
2000bff0:	e8930004 	lwi	r4, r19, 4
2000bff4:	e873001c 	lwi	r3, r19, 28
2000bff8:	16432003 	cmpu	r18, r3, r4
2000bffc:	bc52ffa4 	blti	r18, -92		// 2000bfa0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000c000:	e8730018 	lwi	r3, r19, 24
2000c004:	e8830000 	lwi	r4, r3, 0
2000c008:	e8730008 	lwi	r3, r19, 8
2000c00c:	14632000 	rsubk	r3, r3, r4
}
2000c010:	10330000 	addk	r1, r19, r0
2000c014:	ea610010 	lwi	r19, r1, 16
2000c018:	30210014 	addik	r1, r1, 20
2000c01c:	b60f0008 	rtsd	r15, 8
2000c020:	80000000 	or	r0, r0, r0

2000c024 <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000c024:	3021fff4 	addik	r1, r1, -12
2000c028:	fa610008 	swi	r19, r1, 8
2000c02c:	12610000 	addk	r19, r1, r0
2000c030:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2000c034:	e8730010 	lwi	r3, r19, 16
2000c038:	e8630010 	lwi	r3, r3, 16
2000c03c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000c040:	f8130004 	swi	r0, r19, 4
2000c044:	b8000028 	bri	40		// 2000c06c
        fifo->read_inds[i] = 0;
2000c048:	e8730010 	lwi	r3, r19, 16
2000c04c:	e883000c 	lwi	r4, r3, 12
2000c050:	e8730004 	lwi	r3, r19, 4
2000c054:	64630402 	bslli	r3, r3, 2
2000c058:	10641800 	addk	r3, r4, r3
2000c05c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000c060:	e8730004 	lwi	r3, r19, 4
2000c064:	30630001 	addik	r3, r3, 1
2000c068:	f8730004 	swi	r3, r19, 4
2000c06c:	e8730010 	lwi	r3, r19, 16
2000c070:	e8830008 	lwi	r4, r3, 8
2000c074:	e8730004 	lwi	r3, r19, 4
2000c078:	16441803 	cmpu	r18, r4, r3
2000c07c:	bc52ffcc 	blti	r18, -52		// 2000c048
        fifo->read_inds[i] = 0;
    }
}
2000c080:	10330000 	addk	r1, r19, r0
2000c084:	ea610008 	lwi	r19, r1, 8
2000c088:	3021000c 	addik	r1, r1, 12
2000c08c:	b60f0008 	rtsd	r15, 8
2000c090:	80000000 	or	r0, r0, r0

2000c094 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000c094:	3021fff4 	addik	r1, r1, -12
2000c098:	fa610008 	swi	r19, r1, 8
2000c09c:	12610000 	addk	r19, r1, r0
2000c0a0:	f8b30010 	swi	r5, r19, 16
2000c0a4:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000c0a8:	e8730010 	lwi	r3, r19, 16
2000c0ac:	e8830004 	lwi	r4, r3, 4
2000c0b0:	e8730010 	lwi	r3, r19, 16
2000c0b4:	e8a3000c 	lwi	r5, r3, 12
2000c0b8:	e8730014 	lwi	r3, r19, 20
2000c0bc:	64630402 	bslli	r3, r3, 2
2000c0c0:	10651800 	addk	r3, r5, r3
2000c0c4:	e8a30000 	lwi	r5, r3, 0
2000c0c8:	e8730010 	lwi	r3, r19, 16
2000c0cc:	e8630000 	lwi	r3, r3, 0
2000c0d0:	3063ffff 	addik	r3, r3, -1
2000c0d4:	84651800 	and	r3, r5, r3
2000c0d8:	64630402 	bslli	r3, r3, 2
2000c0dc:	10641800 	addk	r3, r4, r3
2000c0e0:	e8630000 	lwi	r3, r3, 0
2000c0e4:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000c0e8:	e8730010 	lwi	r3, r19, 16
2000c0ec:	e883000c 	lwi	r4, r3, 12
2000c0f0:	e8730014 	lwi	r3, r19, 20
2000c0f4:	64630402 	bslli	r3, r3, 2
2000c0f8:	10641800 	addk	r3, r4, r3
2000c0fc:	e8830000 	lwi	r4, r3, 0
2000c100:	30840001 	addik	r4, r4, 1
2000c104:	f8830000 	swi	r4, r3, 0
    return value;
2000c108:	e8730004 	lwi	r3, r19, 4
}
2000c10c:	10330000 	addk	r1, r19, r0
2000c110:	ea610008 	lwi	r19, r1, 8
2000c114:	3021000c 	addik	r1, r1, 12
2000c118:	b60f0008 	rtsd	r15, 8
2000c11c:	80000000 	or	r0, r0, r0

2000c120 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000c120:	3021fff8 	addik	r1, r1, -8
2000c124:	fa610004 	swi	r19, r1, 4
2000c128:	12610000 	addk	r19, r1, r0
2000c12c:	f8b3000c 	swi	r5, r19, 12
2000c130:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000c134:	e873000c 	lwi	r3, r19, 12
2000c138:	e8830004 	lwi	r4, r3, 4
2000c13c:	e873000c 	lwi	r3, r19, 12
2000c140:	e8630010 	lwi	r3, r3, 16
2000c144:	e8a30000 	lwi	r5, r3, 0
2000c148:	e873000c 	lwi	r3, r19, 12
2000c14c:	e8630000 	lwi	r3, r3, 0
2000c150:	3063ffff 	addik	r3, r3, -1
2000c154:	84651800 	and	r3, r5, r3
2000c158:	64630402 	bslli	r3, r3, 2
2000c15c:	10641800 	addk	r3, r4, r3
2000c160:	e8930010 	lwi	r4, r19, 16
2000c164:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2000c168:	e873000c 	lwi	r3, r19, 12
2000c16c:	e8630010 	lwi	r3, r3, 16
2000c170:	e8830000 	lwi	r4, r3, 0
2000c174:	30840001 	addik	r4, r4, 1
2000c178:	f8830000 	swi	r4, r3, 0
}
2000c17c:	10330000 	addk	r1, r19, r0
2000c180:	ea610004 	lwi	r19, r1, 4
2000c184:	30210008 	addik	r1, r1, 8
2000c188:	b60f0008 	rtsd	r15, 8
2000c18c:	80000000 	or	r0, r0, r0

2000c190 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000c190:	3021fff8 	addik	r1, r1, -8
2000c194:	fa610004 	swi	r19, r1, 4
2000c198:	12610000 	addk	r19, r1, r0
2000c19c:	f8b3000c 	swi	r5, r19, 12
2000c1a0:	f8d30010 	swi	r6, r19, 16
2000c1a4:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000c1a8:	e873000c 	lwi	r3, r19, 12
2000c1ac:	e8630010 	lwi	r3, r3, 16
2000c1b0:	e8830000 	lwi	r4, r3, 0
2000c1b4:	e873000c 	lwi	r3, r19, 12
2000c1b8:	e8a3000c 	lwi	r5, r3, 12
2000c1bc:	e8730010 	lwi	r3, r19, 16
2000c1c0:	64630402 	bslli	r3, r3, 2
2000c1c4:	10651800 	addk	r3, r5, r3
2000c1c8:	e8630000 	lwi	r3, r3, 0
2000c1cc:	14a32000 	rsubk	r5, r3, r4
2000c1d0:	30600001 	addik	r3, r0, 1
2000c1d4:	e8930014 	lwi	r4, r19, 20
2000c1d8:	16442803 	cmpu	r18, r4, r5
2000c1dc:	bcb20008 	bgei	r18, 8		// 2000c1e4
2000c1e0:	10600000 	addk	r3, r0, r0
2000c1e4:	a46300ff 	andi	r3, r3, 255
}
2000c1e8:	10330000 	addk	r1, r19, r0
2000c1ec:	ea610004 	lwi	r19, r1, 4
2000c1f0:	30210008 	addik	r1, r1, 8
2000c1f4:	b60f0008 	rtsd	r15, 8
2000c1f8:	80000000 	or	r0, r0, r0

2000c1fc <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000c1fc:	3021fff8 	addik	r1, r1, -8
2000c200:	fa610004 	swi	r19, r1, 4
2000c204:	12610000 	addk	r19, r1, r0
2000c208:	f8b3000c 	swi	r5, r19, 12
2000c20c:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000c210:	e873000c 	lwi	r3, r19, 12
2000c214:	e8630010 	lwi	r3, r3, 16
2000c218:	e8830000 	lwi	r4, r3, 0
2000c21c:	e873000c 	lwi	r3, r19, 12
2000c220:	e8a3000c 	lwi	r5, r3, 12
2000c224:	e8730010 	lwi	r3, r19, 16
2000c228:	64630402 	bslli	r3, r3, 2
2000c22c:	10651800 	addk	r3, r5, r3
2000c230:	e8630000 	lwi	r3, r3, 0
2000c234:	14632000 	rsubk	r3, r3, r4
}
2000c238:	10330000 	addk	r1, r19, r0
2000c23c:	ea610004 	lwi	r19, r1, 4
2000c240:	30210008 	addik	r1, r1, 8
2000c244:	b60f0008 	rtsd	r15, 8
2000c248:	80000000 	or	r0, r0, r0

2000c24c <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000c24c:	3021fff4 	addik	r1, r1, -12
2000c250:	fa610008 	swi	r19, r1, 8
2000c254:	12610000 	addk	r19, r1, r0
2000c258:	f8b30010 	swi	r5, r19, 16
2000c25c:	f8d30014 	swi	r6, r19, 20
2000c260:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000c264:	f8130004 	swi	r0, r19, 4
2000c268:	b800005c 	bri	92		// 2000c2c4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000c26c:	e8730010 	lwi	r3, r19, 16
2000c270:	e8830000 	lwi	r4, r3, 0
2000c274:	e8730010 	lwi	r3, r19, 16
2000c278:	e8a3000c 	lwi	r5, r3, 12
2000c27c:	e8730004 	lwi	r3, r19, 4
2000c280:	64630402 	bslli	r3, r3, 2
2000c284:	10651800 	addk	r3, r5, r3
2000c288:	e8a30000 	lwi	r5, r3, 0
2000c28c:	e8730010 	lwi	r3, r19, 16
2000c290:	e8630010 	lwi	r3, r3, 16
2000c294:	e8630000 	lwi	r3, r3, 0
2000c298:	14632800 	rsubk	r3, r3, r5
2000c29c:	10641800 	addk	r3, r4, r3
2000c2a0:	30830001 	addik	r4, r3, 1
2000c2a4:	e8730018 	lwi	r3, r19, 24
2000c2a8:	16441803 	cmpu	r18, r4, r3
2000c2ac:	bc52000c 	blti	r18, 12		// 2000c2b8
            return 0;
2000c2b0:	10600000 	addk	r3, r0, r0
2000c2b4:	b8000024 	bri	36		// 2000c2d8
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000c2b8:	e8730004 	lwi	r3, r19, 4
2000c2bc:	30630001 	addik	r3, r3, 1
2000c2c0:	f8730004 	swi	r3, r19, 4
2000c2c4:	e8930004 	lwi	r4, r19, 4
2000c2c8:	e8730014 	lwi	r3, r19, 20
2000c2cc:	16432003 	cmpu	r18, r3, r4
2000c2d0:	bc52ff9c 	blti	r18, -100		// 2000c26c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000c2d4:	30600001 	addik	r3, r0, 1
}
2000c2d8:	10330000 	addk	r1, r19, r0
2000c2dc:	ea610008 	lwi	r19, r1, 8
2000c2e0:	3021000c 	addik	r1, r1, 12
2000c2e4:	b60f0008 	rtsd	r15, 8
2000c2e8:	80000000 	or	r0, r0, r0

2000c2ec <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000c2ec:	3021ffec 	addik	r1, r1, -20
2000c2f0:	fa610010 	swi	r19, r1, 16
2000c2f4:	12610000 	addk	r19, r1, r0
2000c2f8:	f8b30018 	swi	r5, r19, 24
2000c2fc:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000c300:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000c304:	f8130004 	swi	r0, r19, 4
2000c308:	b8000054 	bri	84		// 2000c35c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000c30c:	e8730018 	lwi	r3, r19, 24
2000c310:	e8630010 	lwi	r3, r3, 16
2000c314:	e8830000 	lwi	r4, r3, 0
2000c318:	e8730018 	lwi	r3, r19, 24
2000c31c:	e8a3000c 	lwi	r5, r3, 12
2000c320:	e8730004 	lwi	r3, r19, 4
2000c324:	64630402 	bslli	r3, r3, 2
2000c328:	10651800 	addk	r3, r5, r3
2000c32c:	e8630000 	lwi	r3, r3, 0
2000c330:	14632000 	rsubk	r3, r3, r4
2000c334:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000c338:	e8930008 	lwi	r4, r19, 8
2000c33c:	e873000c 	lwi	r3, r19, 12
2000c340:	16441803 	cmpu	r18, r4, r3
2000c344:	bcb20008 	bgei	r18, 8		// 2000c34c
2000c348:	10640000 	addk	r3, r4, r0
2000c34c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000c350:	e8730004 	lwi	r3, r19, 4
2000c354:	30630001 	addik	r3, r3, 1
2000c358:	f8730004 	swi	r3, r19, 4
2000c35c:	e8930004 	lwi	r4, r19, 4
2000c360:	e873001c 	lwi	r3, r19, 28
2000c364:	16432003 	cmpu	r18, r3, r4
2000c368:	bc52ffa4 	blti	r18, -92		// 2000c30c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000c36c:	e8730018 	lwi	r3, r19, 24
2000c370:	e8830000 	lwi	r4, r3, 0
2000c374:	e8730008 	lwi	r3, r19, 8
2000c378:	14632000 	rsubk	r3, r3, r4
}
2000c37c:	10330000 	addk	r1, r19, r0
2000c380:	ea610010 	lwi	r19, r1, 16
2000c384:	30210014 	addik	r1, r1, 20
2000c388:	b60f0008 	rtsd	r15, 8
2000c38c:	80000000 	or	r0, r0, r0

2000c390 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000c390:	3021fff4 	addik	r1, r1, -12
2000c394:	fa610008 	swi	r19, r1, 8
2000c398:	12610000 	addk	r19, r1, r0
2000c39c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2000c3a0:	e8730010 	lwi	r3, r19, 16
2000c3a4:	e8630010 	lwi	r3, r3, 16
2000c3a8:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000c3ac:	f8130004 	swi	r0, r19, 4
2000c3b0:	b8000028 	bri	40		// 2000c3d8
        fifo->read_inds[i] = 0;
2000c3b4:	e8730010 	lwi	r3, r19, 16
2000c3b8:	e883000c 	lwi	r4, r3, 12
2000c3bc:	e8730004 	lwi	r3, r19, 4
2000c3c0:	64630402 	bslli	r3, r3, 2
2000c3c4:	10641800 	addk	r3, r4, r3
2000c3c8:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000c3cc:	e8730004 	lwi	r3, r19, 4
2000c3d0:	30630001 	addik	r3, r3, 1
2000c3d4:	f8730004 	swi	r3, r19, 4
2000c3d8:	e8730010 	lwi	r3, r19, 16
2000c3dc:	e8830008 	lwi	r4, r3, 8
2000c3e0:	e8730004 	lwi	r3, r19, 4
2000c3e4:	16441803 	cmpu	r18, r4, r3
2000c3e8:	bc52ffcc 	blti	r18, -52		// 2000c3b4
        fifo->read_inds[i] = 0;
    }
}
2000c3ec:	10330000 	addk	r1, r19, r0
2000c3f0:	ea610008 	lwi	r19, r1, 8
2000c3f4:	3021000c 	addik	r1, r1, 12
2000c3f8:	b60f0008 	rtsd	r15, 8
2000c3fc:	80000000 	or	r0, r0, r0

2000c400 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000c400:	3021fff0 	addik	r1, r1, -16
2000c404:	fa61000c 	swi	r19, r1, 12
2000c408:	12610000 	addk	r19, r1, r0
2000c40c:	f8b30014 	swi	r5, r19, 20
2000c410:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000c414:	e8730014 	lwi	r3, r19, 20
2000c418:	e8830004 	lwi	r4, r3, 4
2000c41c:	e8730014 	lwi	r3, r19, 20
2000c420:	e8a3000c 	lwi	r5, r3, 12
2000c424:	e8730018 	lwi	r3, r19, 24
2000c428:	64630402 	bslli	r3, r3, 2
2000c42c:	10651800 	addk	r3, r5, r3
2000c430:	e8a30000 	lwi	r5, r3, 0
2000c434:	e8730014 	lwi	r3, r19, 20
2000c438:	e8630000 	lwi	r3, r3, 0
2000c43c:	3063ffff 	addik	r3, r3, -1
2000c440:	84651800 	and	r3, r5, r3
2000c444:	64630403 	bslli	r3, r3, 3
2000c448:	10641800 	addk	r3, r4, r3
2000c44c:	e8830000 	lwi	r4, r3, 0
2000c450:	e8a30004 	lwi	r5, r3, 4
2000c454:	f8930004 	swi	r4, r19, 4
2000c458:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2000c45c:	e8730014 	lwi	r3, r19, 20
2000c460:	e883000c 	lwi	r4, r3, 12
2000c464:	e8730018 	lwi	r3, r19, 24
2000c468:	64630402 	bslli	r3, r3, 2
2000c46c:	10641800 	addk	r3, r4, r3
2000c470:	e8830000 	lwi	r4, r3, 0
2000c474:	30840001 	addik	r4, r4, 1
2000c478:	f8830000 	swi	r4, r3, 0
    return value;
2000c47c:	e8930004 	lwi	r4, r19, 4
2000c480:	e8b30008 	lwi	r5, r19, 8
}
2000c484:	10640000 	addk	r3, r4, r0
2000c488:	10850000 	addk	r4, r5, r0
2000c48c:	10330000 	addk	r1, r19, r0
2000c490:	ea61000c 	lwi	r19, r1, 12
2000c494:	30210010 	addik	r1, r1, 16
2000c498:	b60f0008 	rtsd	r15, 8
2000c49c:	80000000 	or	r0, r0, r0

2000c4a0 <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000c4a0:	3021fff8 	addik	r1, r1, -8
2000c4a4:	fa610004 	swi	r19, r1, 4
2000c4a8:	12610000 	addk	r19, r1, r0
2000c4ac:	f8b3000c 	swi	r5, r19, 12
2000c4b0:	f8d30010 	swi	r6, r19, 16
2000c4b4:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000c4b8:	e873000c 	lwi	r3, r19, 12
2000c4bc:	e8830004 	lwi	r4, r3, 4
2000c4c0:	e873000c 	lwi	r3, r19, 12
2000c4c4:	e8630010 	lwi	r3, r3, 16
2000c4c8:	e8a30000 	lwi	r5, r3, 0
2000c4cc:	e873000c 	lwi	r3, r19, 12
2000c4d0:	e8630000 	lwi	r3, r3, 0
2000c4d4:	3063ffff 	addik	r3, r3, -1
2000c4d8:	84651800 	and	r3, r5, r3
2000c4dc:	64630403 	bslli	r3, r3, 3
2000c4e0:	10641800 	addk	r3, r4, r3
2000c4e4:	e8930010 	lwi	r4, r19, 16
2000c4e8:	e8b30014 	lwi	r5, r19, 20
2000c4ec:	f8830000 	swi	r4, r3, 0
2000c4f0:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2000c4f4:	e873000c 	lwi	r3, r19, 12
2000c4f8:	e8630010 	lwi	r3, r3, 16
2000c4fc:	e8830000 	lwi	r4, r3, 0
2000c500:	30840001 	addik	r4, r4, 1
2000c504:	f8830000 	swi	r4, r3, 0
}
2000c508:	10330000 	addk	r1, r19, r0
2000c50c:	ea610004 	lwi	r19, r1, 4
2000c510:	30210008 	addik	r1, r1, 8
2000c514:	b60f0008 	rtsd	r15, 8
2000c518:	80000000 	or	r0, r0, r0

2000c51c <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000c51c:	3021fff8 	addik	r1, r1, -8
2000c520:	fa610004 	swi	r19, r1, 4
2000c524:	12610000 	addk	r19, r1, r0
2000c528:	f8b3000c 	swi	r5, r19, 12
2000c52c:	f8d30010 	swi	r6, r19, 16
2000c530:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000c534:	e873000c 	lwi	r3, r19, 12
2000c538:	e8630010 	lwi	r3, r3, 16
2000c53c:	e8830000 	lwi	r4, r3, 0
2000c540:	e873000c 	lwi	r3, r19, 12
2000c544:	e8a3000c 	lwi	r5, r3, 12
2000c548:	e8730010 	lwi	r3, r19, 16
2000c54c:	64630402 	bslli	r3, r3, 2
2000c550:	10651800 	addk	r3, r5, r3
2000c554:	e8630000 	lwi	r3, r3, 0
2000c558:	14a32000 	rsubk	r5, r3, r4
2000c55c:	30600001 	addik	r3, r0, 1
2000c560:	e8930014 	lwi	r4, r19, 20
2000c564:	16442803 	cmpu	r18, r4, r5
2000c568:	bcb20008 	bgei	r18, 8		// 2000c570
2000c56c:	10600000 	addk	r3, r0, r0
2000c570:	a46300ff 	andi	r3, r3, 255
}
2000c574:	10330000 	addk	r1, r19, r0
2000c578:	ea610004 	lwi	r19, r1, 4
2000c57c:	30210008 	addik	r1, r1, 8
2000c580:	b60f0008 	rtsd	r15, 8
2000c584:	80000000 	or	r0, r0, r0

2000c588 <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000c588:	3021fff8 	addik	r1, r1, -8
2000c58c:	fa610004 	swi	r19, r1, 4
2000c590:	12610000 	addk	r19, r1, r0
2000c594:	f8b3000c 	swi	r5, r19, 12
2000c598:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000c59c:	e873000c 	lwi	r3, r19, 12
2000c5a0:	e8630010 	lwi	r3, r3, 16
2000c5a4:	e8830000 	lwi	r4, r3, 0
2000c5a8:	e873000c 	lwi	r3, r19, 12
2000c5ac:	e8a3000c 	lwi	r5, r3, 12
2000c5b0:	e8730010 	lwi	r3, r19, 16
2000c5b4:	64630402 	bslli	r3, r3, 2
2000c5b8:	10651800 	addk	r3, r5, r3
2000c5bc:	e8630000 	lwi	r3, r3, 0
2000c5c0:	14632000 	rsubk	r3, r3, r4
}
2000c5c4:	10330000 	addk	r1, r19, r0
2000c5c8:	ea610004 	lwi	r19, r1, 4
2000c5cc:	30210008 	addik	r1, r1, 8
2000c5d0:	b60f0008 	rtsd	r15, 8
2000c5d4:	80000000 	or	r0, r0, r0

2000c5d8 <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000c5d8:	3021fff4 	addik	r1, r1, -12
2000c5dc:	fa610008 	swi	r19, r1, 8
2000c5e0:	12610000 	addk	r19, r1, r0
2000c5e4:	f8b30010 	swi	r5, r19, 16
2000c5e8:	f8d30014 	swi	r6, r19, 20
2000c5ec:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000c5f0:	f8130004 	swi	r0, r19, 4
2000c5f4:	b800005c 	bri	92		// 2000c650
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000c5f8:	e8730010 	lwi	r3, r19, 16
2000c5fc:	e8830000 	lwi	r4, r3, 0
2000c600:	e8730010 	lwi	r3, r19, 16
2000c604:	e8a3000c 	lwi	r5, r3, 12
2000c608:	e8730004 	lwi	r3, r19, 4
2000c60c:	64630402 	bslli	r3, r3, 2
2000c610:	10651800 	addk	r3, r5, r3
2000c614:	e8a30000 	lwi	r5, r3, 0
2000c618:	e8730010 	lwi	r3, r19, 16
2000c61c:	e8630010 	lwi	r3, r3, 16
2000c620:	e8630000 	lwi	r3, r3, 0
2000c624:	14632800 	rsubk	r3, r3, r5
2000c628:	10641800 	addk	r3, r4, r3
2000c62c:	30830001 	addik	r4, r3, 1
2000c630:	e8730018 	lwi	r3, r19, 24
2000c634:	16441803 	cmpu	r18, r4, r3
2000c638:	bc52000c 	blti	r18, 12		// 2000c644
            return 0;
2000c63c:	10600000 	addk	r3, r0, r0
2000c640:	b8000024 	bri	36		// 2000c664
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000c644:	e8730004 	lwi	r3, r19, 4
2000c648:	30630001 	addik	r3, r3, 1
2000c64c:	f8730004 	swi	r3, r19, 4
2000c650:	e8930004 	lwi	r4, r19, 4
2000c654:	e8730014 	lwi	r3, r19, 20
2000c658:	16432003 	cmpu	r18, r3, r4
2000c65c:	bc52ff9c 	blti	r18, -100		// 2000c5f8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000c660:	30600001 	addik	r3, r0, 1
}
2000c664:	10330000 	addk	r1, r19, r0
2000c668:	ea610008 	lwi	r19, r1, 8
2000c66c:	3021000c 	addik	r1, r1, 12
2000c670:	b60f0008 	rtsd	r15, 8
2000c674:	80000000 	or	r0, r0, r0

2000c678 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000c678:	3021ffec 	addik	r1, r1, -20
2000c67c:	fa610010 	swi	r19, r1, 16
2000c680:	12610000 	addk	r19, r1, r0
2000c684:	f8b30018 	swi	r5, r19, 24
2000c688:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000c68c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000c690:	f8130004 	swi	r0, r19, 4
2000c694:	b8000054 	bri	84		// 2000c6e8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000c698:	e8730018 	lwi	r3, r19, 24
2000c69c:	e8630010 	lwi	r3, r3, 16
2000c6a0:	e8830000 	lwi	r4, r3, 0
2000c6a4:	e8730018 	lwi	r3, r19, 24
2000c6a8:	e8a3000c 	lwi	r5, r3, 12
2000c6ac:	e8730004 	lwi	r3, r19, 4
2000c6b0:	64630402 	bslli	r3, r3, 2
2000c6b4:	10651800 	addk	r3, r5, r3
2000c6b8:	e8630000 	lwi	r3, r3, 0
2000c6bc:	14632000 	rsubk	r3, r3, r4
2000c6c0:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000c6c4:	e8930008 	lwi	r4, r19, 8
2000c6c8:	e873000c 	lwi	r3, r19, 12
2000c6cc:	16441803 	cmpu	r18, r4, r3
2000c6d0:	bcb20008 	bgei	r18, 8		// 2000c6d8
2000c6d4:	10640000 	addk	r3, r4, r0
2000c6d8:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000c6dc:	e8730004 	lwi	r3, r19, 4
2000c6e0:	30630001 	addik	r3, r3, 1
2000c6e4:	f8730004 	swi	r3, r19, 4
2000c6e8:	e8930004 	lwi	r4, r19, 4
2000c6ec:	e873001c 	lwi	r3, r19, 28
2000c6f0:	16432003 	cmpu	r18, r3, r4
2000c6f4:	bc52ffa4 	blti	r18, -92		// 2000c698
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000c6f8:	e8730018 	lwi	r3, r19, 24
2000c6fc:	e8830000 	lwi	r4, r3, 0
2000c700:	e8730008 	lwi	r3, r19, 8
2000c704:	14632000 	rsubk	r3, r3, r4
}
2000c708:	10330000 	addk	r1, r19, r0
2000c70c:	ea610010 	lwi	r19, r1, 16
2000c710:	30210014 	addik	r1, r1, 20
2000c714:	b60f0008 	rtsd	r15, 8
2000c718:	80000000 	or	r0, r0, r0

2000c71c <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000c71c:	3021fff4 	addik	r1, r1, -12
2000c720:	fa610008 	swi	r19, r1, 8
2000c724:	12610000 	addk	r19, r1, r0
2000c728:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2000c72c:	e8730010 	lwi	r3, r19, 16
2000c730:	e8630010 	lwi	r3, r3, 16
2000c734:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000c738:	f8130004 	swi	r0, r19, 4
2000c73c:	b8000028 	bri	40		// 2000c764
        fifo->read_inds[i] = 0;
2000c740:	e8730010 	lwi	r3, r19, 16
2000c744:	e883000c 	lwi	r4, r3, 12
2000c748:	e8730004 	lwi	r3, r19, 4
2000c74c:	64630402 	bslli	r3, r3, 2
2000c750:	10641800 	addk	r3, r4, r3
2000c754:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000c758:	e8730004 	lwi	r3, r19, 4
2000c75c:	30630001 	addik	r3, r3, 1
2000c760:	f8730004 	swi	r3, r19, 4
2000c764:	e8730010 	lwi	r3, r19, 16
2000c768:	e8830008 	lwi	r4, r3, 8
2000c76c:	e8730004 	lwi	r3, r19, 4
2000c770:	16441803 	cmpu	r18, r4, r3
2000c774:	bc52ffcc 	blti	r18, -52		// 2000c740
        fifo->read_inds[i] = 0;
    }
}
2000c778:	10330000 	addk	r1, r19, r0
2000c77c:	ea610008 	lwi	r19, r1, 8
2000c780:	3021000c 	addik	r1, r1, 12
2000c784:	b60f0008 	rtsd	r15, 8
2000c788:	80000000 	or	r0, r0, r0

2000c78c <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000c78c:	3021fff4 	addik	r1, r1, -12
2000c790:	fa610008 	swi	r19, r1, 8
2000c794:	12610000 	addk	r19, r1, r0
2000c798:	f8b30010 	swi	r5, r19, 16
2000c79c:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000c7a0:	e8730010 	lwi	r3, r19, 16
2000c7a4:	e8830004 	lwi	r4, r3, 4
2000c7a8:	e8730010 	lwi	r3, r19, 16
2000c7ac:	e8a3000c 	lwi	r5, r3, 12
2000c7b0:	e8730014 	lwi	r3, r19, 20
2000c7b4:	64630402 	bslli	r3, r3, 2
2000c7b8:	10651800 	addk	r3, r5, r3
2000c7bc:	e8a30000 	lwi	r5, r3, 0
2000c7c0:	e8730010 	lwi	r3, r19, 16
2000c7c4:	e8630000 	lwi	r3, r3, 0
2000c7c8:	3063ffff 	addik	r3, r3, -1
2000c7cc:	84651800 	and	r3, r5, r3
2000c7d0:	64630402 	bslli	r3, r3, 2
2000c7d4:	10641800 	addk	r3, r4, r3
2000c7d8:	e8630000 	lwi	r3, r3, 0
2000c7dc:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000c7e0:	e8730010 	lwi	r3, r19, 16
2000c7e4:	e883000c 	lwi	r4, r3, 12
2000c7e8:	e8730014 	lwi	r3, r19, 20
2000c7ec:	64630402 	bslli	r3, r3, 2
2000c7f0:	10641800 	addk	r3, r4, r3
2000c7f4:	e8830000 	lwi	r4, r3, 0
2000c7f8:	30840001 	addik	r4, r4, 1
2000c7fc:	f8830000 	swi	r4, r3, 0
    return value;
2000c800:	e8730004 	lwi	r3, r19, 4
}
2000c804:	10330000 	addk	r1, r19, r0
2000c808:	ea610008 	lwi	r19, r1, 8
2000c80c:	3021000c 	addik	r1, r1, 12
2000c810:	b60f0008 	rtsd	r15, 8
2000c814:	80000000 	or	r0, r0, r0

2000c818 <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000c818:	3021fff8 	addik	r1, r1, -8
2000c81c:	fa610004 	swi	r19, r1, 4
2000c820:	12610000 	addk	r19, r1, r0
2000c824:	f8b3000c 	swi	r5, r19, 12
2000c828:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000c82c:	e873000c 	lwi	r3, r19, 12
2000c830:	e8830004 	lwi	r4, r3, 4
2000c834:	e873000c 	lwi	r3, r19, 12
2000c838:	e8630010 	lwi	r3, r3, 16
2000c83c:	e8a30000 	lwi	r5, r3, 0
2000c840:	e873000c 	lwi	r3, r19, 12
2000c844:	e8630000 	lwi	r3, r3, 0
2000c848:	3063ffff 	addik	r3, r3, -1
2000c84c:	84651800 	and	r3, r5, r3
2000c850:	64630402 	bslli	r3, r3, 2
2000c854:	10641800 	addk	r3, r4, r3
2000c858:	e8930010 	lwi	r4, r19, 16
2000c85c:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2000c860:	e873000c 	lwi	r3, r19, 12
2000c864:	e8630010 	lwi	r3, r3, 16
2000c868:	e8830000 	lwi	r4, r3, 0
2000c86c:	30840001 	addik	r4, r4, 1
2000c870:	f8830000 	swi	r4, r3, 0
}
2000c874:	10330000 	addk	r1, r19, r0
2000c878:	ea610004 	lwi	r19, r1, 4
2000c87c:	30210008 	addik	r1, r1, 8
2000c880:	b60f0008 	rtsd	r15, 8
2000c884:	80000000 	or	r0, r0, r0

2000c888 <read_MOT>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_MOT() {
2000c888:	3021ffe0 	addik	r1, r1, -32
2000c88c:	f9e10000 	swi	r15, r1, 0
2000c890:	fa61001c 	swi	r19, r1, 28
2000c894:	12610000 	addk	r19, r1, r0
		index_MOT = decoder_motion_add_MOT->read_inds[0];
2000c898:	b0002004 	imm	8196
2000c89c:	e8605d9c 	lwi	r3, r0, 23964	// 20045d9c <decoder_motion_add_MOT>
2000c8a0:	e863000c 	lwi	r3, r3, 12
2000c8a4:	e8630000 	lwi	r3, r3, 0
2000c8a8:	b0002004 	imm	8196
2000c8ac:	f8608f0c 	swi	r3, r0, -28916	// 20048f0c <index_MOT>
		numTokens_MOT = index_MOT + fifo_i16_get_num_tokens(decoder_motion_add_MOT, 0);
2000c8b0:	b0002004 	imm	8196
2000c8b4:	e8605d9c 	lwi	r3, r0, 23964	// 20045d9c <decoder_motion_add_MOT>
2000c8b8:	10a30000 	addk	r5, r3, r0
2000c8bc:	10c00000 	addk	r6, r0, r0
2000c8c0:	b9f4e48c 	brlid	r15, -7028	// 2000ad4c <fifo_i16_get_num_tokens>
2000c8c4:	80000000 	or	r0, r0, r0
2000c8c8:	10830000 	addk	r4, r3, r0
2000c8cc:	b0002004 	imm	8196
2000c8d0:	e8608f0c 	lwi	r3, r0, -28916	// 20048f0c <index_MOT>
2000c8d4:	10641800 	addk	r3, r4, r3
2000c8d8:	b0002004 	imm	8196
2000c8dc:	f8608f10 	swi	r3, r0, -28912	// 20048f10 <numTokens_MOT>
	}
2000c8e0:	e9e10000 	lwi	r15, r1, 0
2000c8e4:	10330000 	addk	r1, r19, r0
2000c8e8:	ea61001c 	lwi	r19, r1, 28
2000c8ec:	30210020 	addik	r1, r1, 32
2000c8f0:	b60f0008 	rtsd	r15, 8
2000c8f4:	80000000 	or	r0, r0, r0

2000c8f8 <read_end_MOT>:
	
	static void read_end_MOT() {
2000c8f8:	3021fff8 	addik	r1, r1, -8
2000c8fc:	fa610004 	swi	r19, r1, 4
2000c900:	12610000 	addk	r19, r1, r0
		decoder_motion_add_MOT->read_inds[0] = index_MOT;
2000c904:	b0002004 	imm	8196
2000c908:	e8605d9c 	lwi	r3, r0, 23964	// 20045d9c <decoder_motion_add_MOT>
2000c90c:	e863000c 	lwi	r3, r3, 12
2000c910:	b0002004 	imm	8196
2000c914:	e8808f0c 	lwi	r4, r0, -28916	// 20048f0c <index_MOT>
2000c918:	f8830000 	swi	r4, r3, 0
	}
2000c91c:	10330000 	addk	r1, r19, r0
2000c920:	ea610004 	lwi	r19, r1, 4
2000c924:	30210008 	addik	r1, r1, 8
2000c928:	b60f0008 	rtsd	r15, 8
2000c92c:	80000000 	or	r0, r0, r0

2000c930 <read_TEX>:
	static void read_TEX() {
2000c930:	3021ffe0 	addik	r1, r1, -32
2000c934:	f9e10000 	swi	r15, r1, 0
2000c938:	fa61001c 	swi	r19, r1, 28
2000c93c:	12610000 	addk	r19, r1, r0
		index_TEX = decoder_motion_add_TEX->read_inds[0];
2000c940:	b0002004 	imm	8196
2000c944:	e8605d4c 	lwi	r3, r0, 23884	// 20045d4c <decoder_motion_add_TEX>
2000c948:	e863000c 	lwi	r3, r3, 12
2000c94c:	e8630000 	lwi	r3, r3, 0
2000c950:	b0002004 	imm	8196
2000c954:	f8608f14 	swi	r3, r0, -28908	// 20048f14 <index_TEX>
		numTokens_TEX = index_TEX + fifo_i16_get_num_tokens(decoder_motion_add_TEX, 0);
2000c958:	b0002004 	imm	8196
2000c95c:	e8605d4c 	lwi	r3, r0, 23884	// 20045d4c <decoder_motion_add_TEX>
2000c960:	10a30000 	addk	r5, r3, r0
2000c964:	10c00000 	addk	r6, r0, r0
2000c968:	b9f4e3e4 	brlid	r15, -7196	// 2000ad4c <fifo_i16_get_num_tokens>
2000c96c:	80000000 	or	r0, r0, r0
2000c970:	10830000 	addk	r4, r3, r0
2000c974:	b0002004 	imm	8196
2000c978:	e8608f14 	lwi	r3, r0, -28908	// 20048f14 <index_TEX>
2000c97c:	10641800 	addk	r3, r4, r3
2000c980:	b0002004 	imm	8196
2000c984:	f8608f18 	swi	r3, r0, -28904	// 20048f18 <numTokens_TEX>
	}
2000c988:	e9e10000 	lwi	r15, r1, 0
2000c98c:	10330000 	addk	r1, r19, r0
2000c990:	ea61001c 	lwi	r19, r1, 28
2000c994:	30210020 	addik	r1, r1, 32
2000c998:	b60f0008 	rtsd	r15, 8
2000c99c:	80000000 	or	r0, r0, r0

2000c9a0 <read_end_TEX>:
	
	static void read_end_TEX() {
2000c9a0:	3021fff8 	addik	r1, r1, -8
2000c9a4:	fa610004 	swi	r19, r1, 4
2000c9a8:	12610000 	addk	r19, r1, r0
		decoder_motion_add_TEX->read_inds[0] = index_TEX;
2000c9ac:	b0002004 	imm	8196
2000c9b0:	e8605d4c 	lwi	r3, r0, 23884	// 20045d4c <decoder_motion_add_TEX>
2000c9b4:	e863000c 	lwi	r3, r3, 12
2000c9b8:	b0002004 	imm	8196
2000c9bc:	e8808f14 	lwi	r4, r0, -28908	// 20048f14 <index_TEX>
2000c9c0:	f8830000 	swi	r4, r3, 0
	}
2000c9c4:	10330000 	addk	r1, r19, r0
2000c9c8:	ea610004 	lwi	r19, r1, 4
2000c9cc:	30210008 	addik	r1, r1, 8
2000c9d0:	b60f0008 	rtsd	r15, 8
2000c9d4:	80000000 	or	r0, r0, r0

2000c9d8 <read_BTYPE>:
	static void read_BTYPE() {
2000c9d8:	3021ffe0 	addik	r1, r1, -32
2000c9dc:	f9e10000 	swi	r15, r1, 0
2000c9e0:	fa61001c 	swi	r19, r1, 28
2000c9e4:	12610000 	addk	r19, r1, r0
		index_BTYPE = decoder_motion_add_BTYPE->read_inds[4];
2000c9e8:	b0002004 	imm	8196
2000c9ec:	e8605cf8 	lwi	r3, r0, 23800	// 20045cf8 <decoder_motion_add_BTYPE>
2000c9f0:	e863000c 	lwi	r3, r3, 12
2000c9f4:	e8630010 	lwi	r3, r3, 16
2000c9f8:	b0002004 	imm	8196
2000c9fc:	f8608f1c 	swi	r3, r0, -28900	// 20048f1c <index_BTYPE>
		numTokens_BTYPE = index_BTYPE + fifo_i16_get_num_tokens(decoder_motion_add_BTYPE, 4);
2000ca00:	b0002004 	imm	8196
2000ca04:	e8605cf8 	lwi	r3, r0, 23800	// 20045cf8 <decoder_motion_add_BTYPE>
2000ca08:	10a30000 	addk	r5, r3, r0
2000ca0c:	30c00004 	addik	r6, r0, 4
2000ca10:	b9f4e33c 	brlid	r15, -7364	// 2000ad4c <fifo_i16_get_num_tokens>
2000ca14:	80000000 	or	r0, r0, r0
2000ca18:	10830000 	addk	r4, r3, r0
2000ca1c:	b0002004 	imm	8196
2000ca20:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000ca24:	10641800 	addk	r3, r4, r3
2000ca28:	b0002004 	imm	8196
2000ca2c:	f8608f20 	swi	r3, r0, -28896	// 20048f20 <numTokens_BTYPE>
	}
2000ca30:	e9e10000 	lwi	r15, r1, 0
2000ca34:	10330000 	addk	r1, r19, r0
2000ca38:	ea61001c 	lwi	r19, r1, 28
2000ca3c:	30210020 	addik	r1, r1, 32
2000ca40:	b60f0008 	rtsd	r15, 8
2000ca44:	80000000 	or	r0, r0, r0

2000ca48 <read_end_BTYPE>:
	
	static void read_end_BTYPE() {
2000ca48:	3021fff8 	addik	r1, r1, -8
2000ca4c:	fa610004 	swi	r19, r1, 4
2000ca50:	12610000 	addk	r19, r1, r0
		decoder_motion_add_BTYPE->read_inds[4] = index_BTYPE;
2000ca54:	b0002004 	imm	8196
2000ca58:	e8605cf8 	lwi	r3, r0, 23800	// 20045cf8 <decoder_motion_add_BTYPE>
2000ca5c:	e863000c 	lwi	r3, r3, 12
2000ca60:	30630010 	addik	r3, r3, 16
2000ca64:	b0002004 	imm	8196
2000ca68:	e8808f1c 	lwi	r4, r0, -28900	// 20048f1c <index_BTYPE>
2000ca6c:	f8830000 	swi	r4, r3, 0
	}
2000ca70:	10330000 	addk	r1, r19, r0
2000ca74:	ea610004 	lwi	r19, r1, 4
2000ca78:	30210008 	addik	r1, r1, 8
2000ca7c:	b60f0008 	rtsd	r15, 8
2000ca80:	80000000 	or	r0, r0, r0

2000ca84 <write_VID>:

	static void write_VID() {
2000ca84:	3021ffe0 	addik	r1, r1, -32
2000ca88:	f9e10000 	swi	r15, r1, 0
2000ca8c:	fa61001c 	swi	r19, r1, 28
2000ca90:	12610000 	addk	r19, r1, r0
		index_VID = (*decoder_motion_add_VID->write_ind);
2000ca94:	b0002004 	imm	8196
2000ca98:	e8605da0 	lwi	r3, r0, 23968	// 20045da0 <decoder_motion_add_VID>
2000ca9c:	e8630010 	lwi	r3, r3, 16
2000caa0:	e8630000 	lwi	r3, r3, 0
2000caa4:	b0002004 	imm	8196
2000caa8:	f8608f24 	swi	r3, r0, -28892	// 20048f24 <index_VID>
		numFree_VID = index_VID + fifo_i16_get_room(decoder_motion_add_VID, NUM_READERS_VID);
2000caac:	b0002004 	imm	8196
2000cab0:	e8605da0 	lwi	r3, r0, 23968	// 20045da0 <decoder_motion_add_VID>
2000cab4:	10a30000 	addk	r5, r3, r0
2000cab8:	30c00002 	addik	r6, r0, 2
2000cabc:	b9f4e380 	brlid	r15, -7296	// 2000ae3c <fifo_i16_get_room>
2000cac0:	80000000 	or	r0, r0, r0
2000cac4:	10830000 	addk	r4, r3, r0
2000cac8:	b0002004 	imm	8196
2000cacc:	e8608f24 	lwi	r3, r0, -28892	// 20048f24 <index_VID>
2000cad0:	10641800 	addk	r3, r4, r3
2000cad4:	b0002004 	imm	8196
2000cad8:	f8608f28 	swi	r3, r0, -28888	// 20048f28 <numFree_VID>
	}
2000cadc:	e9e10000 	lwi	r15, r1, 0
2000cae0:	10330000 	addk	r1, r19, r0
2000cae4:	ea61001c 	lwi	r19, r1, 28
2000cae8:	30210020 	addik	r1, r1, 32
2000caec:	b60f0008 	rtsd	r15, 8
2000caf0:	80000000 	or	r0, r0, r0

2000caf4 <write_end_VID>:
	
	static void write_end_VID() {
2000caf4:	3021fff8 	addik	r1, r1, -8
2000caf8:	fa610004 	swi	r19, r1, 4
2000cafc:	12610000 	addk	r19, r1, r0
		(*decoder_motion_add_VID->write_ind) = index_VID;
2000cb00:	b0002004 	imm	8196
2000cb04:	e8605da0 	lwi	r3, r0, 23968	// 20045da0 <decoder_motion_add_VID>
2000cb08:	e8630010 	lwi	r3, r3, 16
2000cb0c:	b0002004 	imm	8196
2000cb10:	e8808f24 	lwi	r4, r0, -28892	// 20048f24 <index_VID>
2000cb14:	f8830000 	swi	r4, r3, 0
	}
2000cb18:	10330000 	addk	r1, r19, r0
2000cb1c:	ea610004 	lwi	r19, r1, 4
2000cb20:	30210008 	addik	r1, r1, 8
2000cb24:	b60f0008 	rtsd	r15, 8
2000cb28:	80000000 	or	r0, r0, r0

2000cb2c <isSchedulable_cmd_newVop>:
	// Functions/procedures


	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_cmd_newVop() {
2000cb2c:	3021ffec 	addik	r1, r1, -20
2000cb30:	fa610010 	swi	r19, r1, 16
2000cb34:	12610000 	addk	r19, r1, r0
		i32 result;
		i16 cmd;
		i32 local_NEWVOP;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2000cb38:	b0002004 	imm	8196
2000cb3c:	e8605cf8 	lwi	r3, r0, 23800	// 20045cf8 <decoder_motion_add_BTYPE>
2000cb40:	e8830004 	lwi	r4, r3, 4
2000cb44:	b0002004 	imm	8196
2000cb48:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000cb4c:	a46301ff 	andi	r3, r3, 511
2000cb50:	10631800 	addk	r3, r3, r3
2000cb54:	10641800 	addk	r3, r4, r3
2000cb58:	e4630000 	lhui	r3, r3, 0
2000cb5c:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
2000cb60:	30600800 	addik	r3, r0, 2048
2000cb64:	f8730008 	swi	r3, r19, 8
		result = (cmd & local_NEWVOP) != 0;
2000cb68:	e4730004 	lhui	r3, r19, 4
2000cb6c:	90830061 	sext16	r4, r3
2000cb70:	e8730008 	lwi	r3, r19, 8
2000cb74:	84841800 	and	r4, r4, r3
2000cb78:	10600000 	addk	r3, r0, r0
2000cb7c:	8c641c00 	pcmpne	r3, r4, r3
2000cb80:	a46300ff 	andi	r3, r3, 255
2000cb84:	f873000c 	swi	r3, r19, 12
		return result;
2000cb88:	e873000c 	lwi	r3, r19, 12
	}
2000cb8c:	10330000 	addk	r1, r19, r0
2000cb90:	ea610010 	lwi	r19, r1, 16
2000cb94:	30210014 	addik	r1, r1, 20
2000cb98:	b60f0008 	rtsd	r15, 8
2000cb9c:	80000000 	or	r0, r0, r0

2000cba0 <cmd_newVop>:
	
	static void cmd_newVop() {
2000cba0:	3021ffd8 	addik	r1, r1, -40
2000cba4:	f9e10000 	swi	r15, r1, 0
2000cba8:	fa610024 	swi	r19, r1, 36
2000cbac:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2000cbb0:	b0002004 	imm	8196
2000cbb4:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000cbb8:	a46301ff 	andi	r3, r3, 511
2000cbbc:	f873001c 	swi	r3, r19, 28
	
		i16 cmd;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2000cbc0:	b0002004 	imm	8196
2000cbc4:	e8605cf8 	lwi	r3, r0, 23800	// 20045cf8 <decoder_motion_add_BTYPE>
2000cbc8:	e8830004 	lwi	r4, r3, 4
2000cbcc:	b0002004 	imm	8196
2000cbd0:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000cbd4:	a46301ff 	andi	r3, r3, 511
2000cbd8:	10631800 	addk	r3, r3, r3
2000cbdc:	10641800 	addk	r3, r4, r3
2000cbe0:	e4630000 	lhui	r3, r3, 0
2000cbe4:	f4730020 	shi	r3, r19, 32
	
		// Update ports indexes
		index_BTYPE += 1;
2000cbe8:	b0002004 	imm	8196
2000cbec:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000cbf0:	30630001 	addik	r3, r3, 1
2000cbf4:	b0002004 	imm	8196
2000cbf8:	f8608f1c 	swi	r3, r0, -28900	// 20048f1c <index_BTYPE>
		
		read_end_BTYPE();
2000cbfc:	b9f4fe4c 	brlid	r15, -436	// 2000ca48 <read_end_BTYPE>
2000cc00:	80000000 	or	r0, r0, r0
	}
2000cc04:	e9e10000 	lwi	r15, r1, 0
2000cc08:	10330000 	addk	r1, r19, r0
2000cc0c:	ea610024 	lwi	r19, r1, 36
2000cc10:	30210028 	addik	r1, r1, 40
2000cc14:	b60f0008 	rtsd	r15, 8
2000cc18:	80000000 	or	r0, r0, r0

2000cc1c <isSchedulable_cmd_textureOnly>:
	static i32 isSchedulable_cmd_textureOnly() {
2000cc1c:	3021ffec 	addik	r1, r1, -20
2000cc20:	fa610010 	swi	r19, r1, 16
2000cc24:	12610000 	addk	r19, r1, r0
		i32 result;
		i16 cmd;
		i32 local_INTRA;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2000cc28:	b0002004 	imm	8196
2000cc2c:	e8605cf8 	lwi	r3, r0, 23800	// 20045cf8 <decoder_motion_add_BTYPE>
2000cc30:	e8830004 	lwi	r4, r3, 4
2000cc34:	b0002004 	imm	8196
2000cc38:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000cc3c:	a46301ff 	andi	r3, r3, 511
2000cc40:	10631800 	addk	r3, r3, r3
2000cc44:	10641800 	addk	r3, r4, r3
2000cc48:	e4630000 	lhui	r3, r3, 0
2000cc4c:	f4730004 	shi	r3, r19, 4
		local_INTRA = ConstantsBtype_INTRA;
2000cc50:	30600400 	addik	r3, r0, 1024	// 400 <_HEAP_SIZE>
2000cc54:	f8730008 	swi	r3, r19, 8
		result = (cmd & local_INTRA) != 0;
2000cc58:	e4730004 	lhui	r3, r19, 4
2000cc5c:	90830061 	sext16	r4, r3
2000cc60:	e8730008 	lwi	r3, r19, 8
2000cc64:	84841800 	and	r4, r4, r3
2000cc68:	10600000 	addk	r3, r0, r0
2000cc6c:	8c641c00 	pcmpne	r3, r4, r3
2000cc70:	a46300ff 	andi	r3, r3, 255
2000cc74:	f873000c 	swi	r3, r19, 12
		return result;
2000cc78:	e873000c 	lwi	r3, r19, 12
	}
2000cc7c:	10330000 	addk	r1, r19, r0
2000cc80:	ea610010 	lwi	r19, r1, 16
2000cc84:	30210014 	addik	r1, r1, 20
2000cc88:	b60f0008 	rtsd	r15, 8
2000cc8c:	80000000 	or	r0, r0, r0

2000cc90 <cmd_textureOnly>:
	
	static void cmd_textureOnly() {
2000cc90:	3021ffd8 	addik	r1, r1, -40
2000cc94:	f9e10000 	swi	r15, r1, 0
2000cc98:	fa610024 	swi	r19, r1, 36
2000cc9c:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2000cca0:	b0002004 	imm	8196
2000cca4:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000cca8:	a46301ff 	andi	r3, r3, 511
2000ccac:	f873001c 	swi	r3, r19, 28
	
		i16 cmd;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2000ccb0:	b0002004 	imm	8196
2000ccb4:	e8605cf8 	lwi	r3, r0, 23800	// 20045cf8 <decoder_motion_add_BTYPE>
2000ccb8:	e8830004 	lwi	r4, r3, 4
2000ccbc:	b0002004 	imm	8196
2000ccc0:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000ccc4:	a46301ff 	andi	r3, r3, 511
2000ccc8:	10631800 	addk	r3, r3, r3
2000cccc:	10641800 	addk	r3, r4, r3
2000ccd0:	e4630000 	lhui	r3, r3, 0
2000ccd4:	f4730020 	shi	r3, r19, 32
	
		// Update ports indexes
		index_BTYPE += 1;
2000ccd8:	b0002004 	imm	8196
2000ccdc:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000cce0:	30630001 	addik	r3, r3, 1
2000cce4:	b0002004 	imm	8196
2000cce8:	f8608f1c 	swi	r3, r0, -28900	// 20048f1c <index_BTYPE>
		
		read_end_BTYPE();
2000ccec:	b9f4fd5c 	brlid	r15, -676	// 2000ca48 <read_end_BTYPE>
2000ccf0:	80000000 	or	r0, r0, r0
	}
2000ccf4:	e9e10000 	lwi	r15, r1, 0
2000ccf8:	10330000 	addk	r1, r19, r0
2000ccfc:	ea610024 	lwi	r19, r1, 36
2000cd00:	30210028 	addik	r1, r1, 40
2000cd04:	b60f0008 	rtsd	r15, 8
2000cd08:	80000000 	or	r0, r0, r0

2000cd0c <isSchedulable_cmd_motionOnly>:
	static i32 isSchedulable_cmd_motionOnly() {
2000cd0c:	3021ffec 	addik	r1, r1, -20
2000cd10:	fa610010 	swi	r19, r1, 16
2000cd14:	12610000 	addk	r19, r1, r0
		i32 result;
		i16 cmd;
		i32 local_ACCODED;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2000cd18:	b0002004 	imm	8196
2000cd1c:	e8605cf8 	lwi	r3, r0, 23800	// 20045cf8 <decoder_motion_add_BTYPE>
2000cd20:	e8830004 	lwi	r4, r3, 4
2000cd24:	b0002004 	imm	8196
2000cd28:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000cd2c:	a46301ff 	andi	r3, r3, 511
2000cd30:	10631800 	addk	r3, r3, r3
2000cd34:	10641800 	addk	r3, r4, r3
2000cd38:	e4630000 	lhui	r3, r3, 0
2000cd3c:	f4730004 	shi	r3, r19, 4
		local_ACCODED = Constants_ACCODED;
2000cd40:	30600002 	addik	r3, r0, 2
2000cd44:	f8730008 	swi	r3, r19, 8
		result = (cmd & local_ACCODED) == 0;
2000cd48:	e4730004 	lhui	r3, r19, 4
2000cd4c:	90830061 	sext16	r4, r3
2000cd50:	e8730008 	lwi	r3, r19, 8
2000cd54:	84841800 	and	r4, r4, r3
2000cd58:	10600000 	addk	r3, r0, r0
2000cd5c:	88641c00 	pcmpeq	r3, r4, r3
2000cd60:	a46300ff 	andi	r3, r3, 255
2000cd64:	f873000c 	swi	r3, r19, 12
		return result;
2000cd68:	e873000c 	lwi	r3, r19, 12
	}
2000cd6c:	10330000 	addk	r1, r19, r0
2000cd70:	ea610010 	lwi	r19, r1, 16
2000cd74:	30210014 	addik	r1, r1, 20
2000cd78:	b60f0008 	rtsd	r15, 8
2000cd7c:	80000000 	or	r0, r0, r0

2000cd80 <cmd_motionOnly>:
	
	static void cmd_motionOnly() {
2000cd80:	3021ffd8 	addik	r1, r1, -40
2000cd84:	f9e10000 	swi	r15, r1, 0
2000cd88:	fa610024 	swi	r19, r1, 36
2000cd8c:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2000cd90:	b0002004 	imm	8196
2000cd94:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000cd98:	a46301ff 	andi	r3, r3, 511
2000cd9c:	f873001c 	swi	r3, r19, 28
	
		i16 cmd;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2000cda0:	b0002004 	imm	8196
2000cda4:	e8605cf8 	lwi	r3, r0, 23800	// 20045cf8 <decoder_motion_add_BTYPE>
2000cda8:	e8830004 	lwi	r4, r3, 4
2000cdac:	b0002004 	imm	8196
2000cdb0:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000cdb4:	a46301ff 	andi	r3, r3, 511
2000cdb8:	10631800 	addk	r3, r3, r3
2000cdbc:	10641800 	addk	r3, r4, r3
2000cdc0:	e4630000 	lhui	r3, r3, 0
2000cdc4:	f4730020 	shi	r3, r19, 32
	
		// Update ports indexes
		index_BTYPE += 1;
2000cdc8:	b0002004 	imm	8196
2000cdcc:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000cdd0:	30630001 	addik	r3, r3, 1
2000cdd4:	b0002004 	imm	8196
2000cdd8:	f8608f1c 	swi	r3, r0, -28900	// 20048f1c <index_BTYPE>
		
		read_end_BTYPE();
2000cddc:	b9f4fc6c 	brlid	r15, -916	// 2000ca48 <read_end_BTYPE>
2000cde0:	80000000 	or	r0, r0, r0
	}
2000cde4:	e9e10000 	lwi	r15, r1, 0
2000cde8:	10330000 	addk	r1, r19, r0
2000cdec:	ea610024 	lwi	r19, r1, 36
2000cdf0:	30210028 	addik	r1, r1, 40
2000cdf4:	b60f0008 	rtsd	r15, 8
2000cdf8:	80000000 	or	r0, r0, r0

2000cdfc <isSchedulable_cmd_other>:
	static i32 isSchedulable_cmd_other() {
2000cdfc:	3021fff4 	addik	r1, r1, -12
2000ce00:	fa610008 	swi	r19, r1, 8
2000ce04:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2000ce08:	30600001 	addik	r3, r0, 1
2000ce0c:	f8730004 	swi	r3, r19, 4
		return result;
2000ce10:	e8730004 	lwi	r3, r19, 4
	}
2000ce14:	10330000 	addk	r1, r19, r0
2000ce18:	ea610008 	lwi	r19, r1, 8
2000ce1c:	3021000c 	addik	r1, r1, 12
2000ce20:	b60f0008 	rtsd	r15, 8
2000ce24:	80000000 	or	r0, r0, r0

2000ce28 <cmd_other>:
	
	static void cmd_other() {
2000ce28:	3021ffd8 	addik	r1, r1, -40
2000ce2c:	f9e10000 	swi	r15, r1, 0
2000ce30:	fa610024 	swi	r19, r1, 36
2000ce34:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2000ce38:	b0002004 	imm	8196
2000ce3c:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000ce40:	a46301ff 	andi	r3, r3, 511
2000ce44:	f873001c 	swi	r3, r19, 28
	
		i16 cmd;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2000ce48:	b0002004 	imm	8196
2000ce4c:	e8605cf8 	lwi	r3, r0, 23800	// 20045cf8 <decoder_motion_add_BTYPE>
2000ce50:	e8830004 	lwi	r4, r3, 4
2000ce54:	b0002004 	imm	8196
2000ce58:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000ce5c:	a46301ff 	andi	r3, r3, 511
2000ce60:	10631800 	addk	r3, r3, r3
2000ce64:	10641800 	addk	r3, r4, r3
2000ce68:	e4630000 	lhui	r3, r3, 0
2000ce6c:	f4730020 	shi	r3, r19, 32
	
		// Update ports indexes
		index_BTYPE += 1;
2000ce70:	b0002004 	imm	8196
2000ce74:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000ce78:	30630001 	addik	r3, r3, 1
2000ce7c:	b0002004 	imm	8196
2000ce80:	f8608f1c 	swi	r3, r0, -28900	// 20048f1c <index_BTYPE>
		
		read_end_BTYPE();
2000ce84:	b9f4fbc4 	brlid	r15, -1084	// 2000ca48 <read_end_BTYPE>
2000ce88:	80000000 	or	r0, r0, r0
	}
2000ce8c:	e9e10000 	lwi	r15, r1, 0
2000ce90:	10330000 	addk	r1, r19, r0
2000ce94:	ea610024 	lwi	r19, r1, 36
2000ce98:	30210028 	addik	r1, r1, 40
2000ce9c:	b60f0008 	rtsd	r15, 8
2000cea0:	80000000 	or	r0, r0, r0

2000cea4 <isSchedulable_texture>:
	static i32 isSchedulable_texture() {
2000cea4:	3021fff4 	addik	r1, r1, -12
2000cea8:	fa610008 	swi	r19, r1, 8
2000ceac:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2000ceb0:	30600001 	addik	r3, r0, 1
2000ceb4:	f8730004 	swi	r3, r19, 4
		return result;
2000ceb8:	e8730004 	lwi	r3, r19, 4
	}
2000cebc:	10330000 	addk	r1, r19, r0
2000cec0:	ea610008 	lwi	r19, r1, 8
2000cec4:	3021000c 	addik	r1, r1, 12
2000cec8:	b60f0008 	rtsd	r15, 8
2000cecc:	80000000 	or	r0, r0, r0

2000ced0 <texture>:
	
	static void texture() {
2000ced0:	3021ffd0 	addik	r1, r1, -48
2000ced4:	f9e10000 	swi	r15, r1, 0
2000ced8:	fa61002c 	swi	r19, r1, 44
2000cedc:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_TEX = index_TEX % SIZE_TEX;
2000cee0:	b0002004 	imm	8196
2000cee4:	e8608f14 	lwi	r3, r0, -28908	// 20048f14 <index_TEX>
2000cee8:	a46301ff 	andi	r3, r3, 511
2000ceec:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_VID = index_VID % SIZE_VID;
2000cef0:	b0002004 	imm	8196
2000cef4:	e8608f24 	lwi	r3, r0, -28892	// 20048f24 <index_VID>
2000cef8:	a46301ff 	andi	r3, r3, 511
2000cefc:	f8730024 	swi	r3, r19, 36
	
		i32 idx_TEX;
		i16 local_TEX;
	
		idx_TEX = 0;
2000cf00:	f813001c 	swi	r0, r19, 28
		while (idx_TEX < 64) {
2000cf04:	b8000070 	bri	112		// 2000cf74
			local_TEX = tokens_TEX[(index_TEX + (idx_TEX)) % SIZE_TEX];
2000cf08:	b0002004 	imm	8196
2000cf0c:	e8605d4c 	lwi	r3, r0, 23884	// 20045d4c <decoder_motion_add_TEX>
2000cf10:	e8830004 	lwi	r4, r3, 4
2000cf14:	b0002004 	imm	8196
2000cf18:	e8a08f14 	lwi	r5, r0, -28908	// 20048f14 <index_TEX>
2000cf1c:	e873001c 	lwi	r3, r19, 28
2000cf20:	10651800 	addk	r3, r5, r3
2000cf24:	a46301ff 	andi	r3, r3, 511
2000cf28:	10631800 	addk	r3, r3, r3
2000cf2c:	10641800 	addk	r3, r4, r3
2000cf30:	e4630000 	lhui	r3, r3, 0
2000cf34:	f4730028 	shi	r3, r19, 40
			tokens_VID[(index_VID + (idx_TEX)) % SIZE_VID] = local_TEX;
2000cf38:	b0002004 	imm	8196
2000cf3c:	e8605da0 	lwi	r3, r0, 23968	// 20045da0 <decoder_motion_add_VID>
2000cf40:	e8830004 	lwi	r4, r3, 4
2000cf44:	b0002004 	imm	8196
2000cf48:	e8a08f24 	lwi	r5, r0, -28892	// 20048f24 <index_VID>
2000cf4c:	e873001c 	lwi	r3, r19, 28
2000cf50:	10651800 	addk	r3, r5, r3
2000cf54:	a46301ff 	andi	r3, r3, 511
2000cf58:	10631800 	addk	r3, r3, r3
2000cf5c:	10641800 	addk	r3, r4, r3
2000cf60:	e4930028 	lhui	r4, r19, 40
2000cf64:	f4830000 	shi	r4, r3, 0
			idx_TEX = idx_TEX + 1;
2000cf68:	e873001c 	lwi	r3, r19, 28
2000cf6c:	30630001 	addik	r3, r3, 1
2000cf70:	f873001c 	swi	r3, r19, 28
	
		i32 idx_TEX;
		i16 local_TEX;
	
		idx_TEX = 0;
		while (idx_TEX < 64) {
2000cf74:	e893001c 	lwi	r4, r19, 28
2000cf78:	3060003f 	addik	r3, r0, 63
2000cf7c:	16441801 	cmp	r18, r4, r3
2000cf80:	bcb2ff88 	bgei	r18, -120		// 2000cf08
			tokens_VID[(index_VID + (idx_TEX)) % SIZE_VID] = local_TEX;
			idx_TEX = idx_TEX + 1;
		}
	
		// Update ports indexes
		index_TEX += 64;
2000cf84:	b0002004 	imm	8196
2000cf88:	e8608f14 	lwi	r3, r0, -28908	// 20048f14 <index_TEX>
2000cf8c:	30630040 	addik	r3, r3, 64
2000cf90:	b0002004 	imm	8196
2000cf94:	f8608f14 	swi	r3, r0, -28908	// 20048f14 <index_TEX>
		index_VID += 64;
2000cf98:	b0002004 	imm	8196
2000cf9c:	e8608f24 	lwi	r3, r0, -28892	// 20048f24 <index_VID>
2000cfa0:	30630040 	addik	r3, r3, 64
2000cfa4:	b0002004 	imm	8196
2000cfa8:	f8608f24 	swi	r3, r0, -28892	// 20048f24 <index_VID>
		
		read_end_TEX();
2000cfac:	b9f4f9f4 	brlid	r15, -1548	// 2000c9a0 <read_end_TEX>
2000cfb0:	80000000 	or	r0, r0, r0
		write_end_VID();
2000cfb4:	b9f4fb40 	brlid	r15, -1216	// 2000caf4 <write_end_VID>
2000cfb8:	80000000 	or	r0, r0, r0
	}
2000cfbc:	e9e10000 	lwi	r15, r1, 0
2000cfc0:	10330000 	addk	r1, r19, r0
2000cfc4:	ea61002c 	lwi	r19, r1, 44
2000cfc8:	30210030 	addik	r1, r1, 48
2000cfcc:	b60f0008 	rtsd	r15, 8
2000cfd0:	80000000 	or	r0, r0, r0

2000cfd4 <isSchedulable_motion>:
	static i32 isSchedulable_motion() {
2000cfd4:	3021fff4 	addik	r1, r1, -12
2000cfd8:	fa610008 	swi	r19, r1, 8
2000cfdc:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2000cfe0:	30600001 	addik	r3, r0, 1
2000cfe4:	f8730004 	swi	r3, r19, 4
		return result;
2000cfe8:	e8730004 	lwi	r3, r19, 4
	}
2000cfec:	10330000 	addk	r1, r19, r0
2000cff0:	ea610008 	lwi	r19, r1, 8
2000cff4:	3021000c 	addik	r1, r1, 12
2000cff8:	b60f0008 	rtsd	r15, 8
2000cffc:	80000000 	or	r0, r0, r0

2000d000 <motion>:
	
	static void motion() {
2000d000:	3021ffd0 	addik	r1, r1, -48
2000d004:	f9e10000 	swi	r15, r1, 0
2000d008:	fa61002c 	swi	r19, r1, 44
2000d00c:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_MOT = index_MOT % SIZE_MOT;
2000d010:	b0002004 	imm	8196
2000d014:	e8608f0c 	lwi	r3, r0, -28916	// 20048f0c <index_MOT>
2000d018:	a46301ff 	andi	r3, r3, 511
2000d01c:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_VID = index_VID % SIZE_VID;
2000d020:	b0002004 	imm	8196
2000d024:	e8608f24 	lwi	r3, r0, -28892	// 20048f24 <index_VID>
2000d028:	a46301ff 	andi	r3, r3, 511
2000d02c:	f8730024 	swi	r3, r19, 36
	
		i32 idx_MOT;
		i16 local_MOT;
	
		idx_MOT = 0;
2000d030:	f813001c 	swi	r0, r19, 28
		while (idx_MOT < 64) {
2000d034:	b8000070 	bri	112		// 2000d0a4
			local_MOT = tokens_MOT[(index_MOT + (idx_MOT)) % SIZE_MOT];
2000d038:	b0002004 	imm	8196
2000d03c:	e8605d9c 	lwi	r3, r0, 23964	// 20045d9c <decoder_motion_add_MOT>
2000d040:	e8830004 	lwi	r4, r3, 4
2000d044:	b0002004 	imm	8196
2000d048:	e8a08f0c 	lwi	r5, r0, -28916	// 20048f0c <index_MOT>
2000d04c:	e873001c 	lwi	r3, r19, 28
2000d050:	10651800 	addk	r3, r5, r3
2000d054:	a46301ff 	andi	r3, r3, 511
2000d058:	10631800 	addk	r3, r3, r3
2000d05c:	10641800 	addk	r3, r4, r3
2000d060:	e4630000 	lhui	r3, r3, 0
2000d064:	f4730028 	shi	r3, r19, 40
			tokens_VID[(index_VID + (idx_MOT)) % SIZE_VID] = local_MOT;
2000d068:	b0002004 	imm	8196
2000d06c:	e8605da0 	lwi	r3, r0, 23968	// 20045da0 <decoder_motion_add_VID>
2000d070:	e8830004 	lwi	r4, r3, 4
2000d074:	b0002004 	imm	8196
2000d078:	e8a08f24 	lwi	r5, r0, -28892	// 20048f24 <index_VID>
2000d07c:	e873001c 	lwi	r3, r19, 28
2000d080:	10651800 	addk	r3, r5, r3
2000d084:	a46301ff 	andi	r3, r3, 511
2000d088:	10631800 	addk	r3, r3, r3
2000d08c:	10641800 	addk	r3, r4, r3
2000d090:	e4930028 	lhui	r4, r19, 40
2000d094:	f4830000 	shi	r4, r3, 0
			idx_MOT = idx_MOT + 1;
2000d098:	e873001c 	lwi	r3, r19, 28
2000d09c:	30630001 	addik	r3, r3, 1
2000d0a0:	f873001c 	swi	r3, r19, 28
	
		i32 idx_MOT;
		i16 local_MOT;
	
		idx_MOT = 0;
		while (idx_MOT < 64) {
2000d0a4:	e893001c 	lwi	r4, r19, 28
2000d0a8:	3060003f 	addik	r3, r0, 63
2000d0ac:	16441801 	cmp	r18, r4, r3
2000d0b0:	bcb2ff88 	bgei	r18, -120		// 2000d038
			tokens_VID[(index_VID + (idx_MOT)) % SIZE_VID] = local_MOT;
			idx_MOT = idx_MOT + 1;
		}
	
		// Update ports indexes
		index_MOT += 64;
2000d0b4:	b0002004 	imm	8196
2000d0b8:	e8608f0c 	lwi	r3, r0, -28916	// 20048f0c <index_MOT>
2000d0bc:	30630040 	addik	r3, r3, 64
2000d0c0:	b0002004 	imm	8196
2000d0c4:	f8608f0c 	swi	r3, r0, -28916	// 20048f0c <index_MOT>
		index_VID += 64;
2000d0c8:	b0002004 	imm	8196
2000d0cc:	e8608f24 	lwi	r3, r0, -28892	// 20048f24 <index_VID>
2000d0d0:	30630040 	addik	r3, r3, 64
2000d0d4:	b0002004 	imm	8196
2000d0d8:	f8608f24 	swi	r3, r0, -28892	// 20048f24 <index_VID>
		
		read_end_MOT();
2000d0dc:	b9f4f81c 	brlid	r15, -2020	// 2000c8f8 <read_end_MOT>
2000d0e0:	80000000 	or	r0, r0, r0
		write_end_VID();
2000d0e4:	b9f4fa10 	brlid	r15, -1520	// 2000caf4 <write_end_VID>
2000d0e8:	80000000 	or	r0, r0, r0
	}
2000d0ec:	e9e10000 	lwi	r15, r1, 0
2000d0f0:	10330000 	addk	r1, r19, r0
2000d0f4:	ea61002c 	lwi	r19, r1, 44
2000d0f8:	30210030 	addik	r1, r1, 48
2000d0fc:	b60f0008 	rtsd	r15, 8
2000d100:	80000000 	or	r0, r0, r0

2000d104 <isSchedulable_combine>:
	static i32 isSchedulable_combine() {
2000d104:	3021fff4 	addik	r1, r1, -12
2000d108:	fa610008 	swi	r19, r1, 8
2000d10c:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2000d110:	30600001 	addik	r3, r0, 1
2000d114:	f8730004 	swi	r3, r19, 4
		return result;
2000d118:	e8730004 	lwi	r3, r19, 4
	}
2000d11c:	10330000 	addk	r1, r19, r0
2000d120:	ea610008 	lwi	r19, r1, 8
2000d124:	3021000c 	addik	r1, r1, 12
2000d128:	b60f0008 	rtsd	r15, 8
2000d12c:	80000000 	or	r0, r0, r0

2000d130 <combine>:
	
	static void combine() {
2000d130:	3021ffc8 	addik	r1, r1, -56
2000d134:	f9e10000 	swi	r15, r1, 0
2000d138:	fa610034 	swi	r19, r1, 52
2000d13c:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_MOT = index_MOT % SIZE_MOT;
2000d140:	b0002004 	imm	8196
2000d144:	e8608f0c 	lwi	r3, r0, -28916	// 20048f0c <index_MOT>
2000d148:	a46301ff 	andi	r3, r3, 511
2000d14c:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_TEX = index_TEX % SIZE_TEX;
2000d150:	b0002004 	imm	8196
2000d154:	e8608f14 	lwi	r3, r0, -28908	// 20048f14 <index_TEX>
2000d158:	a46301ff 	andi	r3, r3, 511
2000d15c:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_VID = index_VID % SIZE_VID;
2000d160:	b0002004 	imm	8196
2000d164:	e8608f24 	lwi	r3, r0, -28892	// 20048f24 <index_VID>
2000d168:	a46301ff 	andi	r3, r3, 511
2000d16c:	f8730028 	swi	r3, r19, 40
		i16 add;
		i32 i;
		i16 tmp_TEX;
		i16 tmp_MOT;
	
		i = 0;
2000d170:	f813001c 	swi	r0, r19, 28
		while (i <= 63) {
2000d174:	b800013c 	bri	316		// 2000d2b0
			tmp_TEX = tokens_TEX[(index_TEX + (i)) % SIZE_TEX];
2000d178:	b0002004 	imm	8196
2000d17c:	e8605d4c 	lwi	r3, r0, 23884	// 20045d4c <decoder_motion_add_TEX>
2000d180:	e8830004 	lwi	r4, r3, 4
2000d184:	b0002004 	imm	8196
2000d188:	e8a08f14 	lwi	r5, r0, -28908	// 20048f14 <index_TEX>
2000d18c:	e873001c 	lwi	r3, r19, 28
2000d190:	10651800 	addk	r3, r5, r3
2000d194:	a46301ff 	andi	r3, r3, 511
2000d198:	10631800 	addk	r3, r3, r3
2000d19c:	10641800 	addk	r3, r4, r3
2000d1a0:	e4630000 	lhui	r3, r3, 0
2000d1a4:	f473002c 	shi	r3, r19, 44
			tmp_MOT = tokens_MOT[(index_MOT + (i)) % SIZE_MOT];
2000d1a8:	b0002004 	imm	8196
2000d1ac:	e8605d9c 	lwi	r3, r0, 23964	// 20045d9c <decoder_motion_add_MOT>
2000d1b0:	e8830004 	lwi	r4, r3, 4
2000d1b4:	b0002004 	imm	8196
2000d1b8:	e8a08f0c 	lwi	r5, r0, -28916	// 20048f0c <index_MOT>
2000d1bc:	e873001c 	lwi	r3, r19, 28
2000d1c0:	10651800 	addk	r3, r5, r3
2000d1c4:	a46301ff 	andi	r3, r3, 511
2000d1c8:	10631800 	addk	r3, r3, r3
2000d1cc:	10641800 	addk	r3, r4, r3
2000d1d0:	e4630000 	lhui	r3, r3, 0
2000d1d4:	f473002e 	shi	r3, r19, 46
			add = tmp_TEX + tmp_MOT;
2000d1d8:	e493002c 	lhui	r4, r19, 44
2000d1dc:	e473002e 	lhui	r3, r19, 46
2000d1e0:	10641800 	addk	r3, r4, r3
2000d1e4:	b0000000 	imm	0
2000d1e8:	a463ffff 	andi	r3, r3, -1
2000d1ec:	f4730030 	shi	r3, r19, 48
			if (add < 0) {
2000d1f0:	e4730030 	lhui	r3, r19, 48
2000d1f4:	90630061 	sext16	r3, r3
2000d1f8:	bca30034 	bgei	r3, 52		// 2000d22c
				tokens_VID[(index_VID + (i)) % SIZE_VID] = 0;
2000d1fc:	b0002004 	imm	8196
2000d200:	e8605da0 	lwi	r3, r0, 23968	// 20045da0 <decoder_motion_add_VID>
2000d204:	e8830004 	lwi	r4, r3, 4
2000d208:	b0002004 	imm	8196
2000d20c:	e8a08f24 	lwi	r5, r0, -28892	// 20048f24 <index_VID>
2000d210:	e873001c 	lwi	r3, r19, 28
2000d214:	10651800 	addk	r3, r5, r3
2000d218:	a46301ff 	andi	r3, r3, 511
2000d21c:	10631800 	addk	r3, r3, r3
2000d220:	10641800 	addk	r3, r4, r3
2000d224:	f4030000 	shi	r0, r3, 0
2000d228:	b800007c 	bri	124		// 2000d2a4
			} else {
				if (add > 255) {
2000d22c:	e4730030 	lhui	r3, r19, 48
2000d230:	90830061 	sext16	r4, r3
2000d234:	306000ff 	addik	r3, r0, 255
2000d238:	16441801 	cmp	r18, r4, r3
2000d23c:	bcb20038 	bgei	r18, 56		// 2000d274
					tokens_VID[(index_VID + (i)) % SIZE_VID] = 255;
2000d240:	b0002004 	imm	8196
2000d244:	e8605da0 	lwi	r3, r0, 23968	// 20045da0 <decoder_motion_add_VID>
2000d248:	e8830004 	lwi	r4, r3, 4
2000d24c:	b0002004 	imm	8196
2000d250:	e8a08f24 	lwi	r5, r0, -28892	// 20048f24 <index_VID>
2000d254:	e873001c 	lwi	r3, r19, 28
2000d258:	10651800 	addk	r3, r5, r3
2000d25c:	a46301ff 	andi	r3, r3, 511
2000d260:	10631800 	addk	r3, r3, r3
2000d264:	10641800 	addk	r3, r4, r3
2000d268:	308000ff 	addik	r4, r0, 255
2000d26c:	f4830000 	shi	r4, r3, 0
2000d270:	b8000034 	bri	52		// 2000d2a4
				} else {
					tokens_VID[(index_VID + (i)) % SIZE_VID] = add;
2000d274:	b0002004 	imm	8196
2000d278:	e8605da0 	lwi	r3, r0, 23968	// 20045da0 <decoder_motion_add_VID>
2000d27c:	e8830004 	lwi	r4, r3, 4
2000d280:	b0002004 	imm	8196
2000d284:	e8a08f24 	lwi	r5, r0, -28892	// 20048f24 <index_VID>
2000d288:	e873001c 	lwi	r3, r19, 28
2000d28c:	10651800 	addk	r3, r5, r3
2000d290:	a46301ff 	andi	r3, r3, 511
2000d294:	10631800 	addk	r3, r3, r3
2000d298:	10641800 	addk	r3, r4, r3
2000d29c:	e4930030 	lhui	r4, r19, 48
2000d2a0:	f4830000 	shi	r4, r3, 0
				}
			}
			i = i + 1;
2000d2a4:	e873001c 	lwi	r3, r19, 28
2000d2a8:	30630001 	addik	r3, r3, 1
2000d2ac:	f873001c 	swi	r3, r19, 28
		i32 i;
		i16 tmp_TEX;
		i16 tmp_MOT;
	
		i = 0;
		while (i <= 63) {
2000d2b0:	e893001c 	lwi	r4, r19, 28
2000d2b4:	3060003f 	addik	r3, r0, 63
2000d2b8:	16441801 	cmp	r18, r4, r3
2000d2bc:	bcb2febc 	bgei	r18, -324		// 2000d178
			}
			i = i + 1;
		}
	
		// Update ports indexes
		index_MOT += 64;
2000d2c0:	b0002004 	imm	8196
2000d2c4:	e8608f0c 	lwi	r3, r0, -28916	// 20048f0c <index_MOT>
2000d2c8:	30630040 	addik	r3, r3, 64
2000d2cc:	b0002004 	imm	8196
2000d2d0:	f8608f0c 	swi	r3, r0, -28916	// 20048f0c <index_MOT>
		index_TEX += 64;
2000d2d4:	b0002004 	imm	8196
2000d2d8:	e8608f14 	lwi	r3, r0, -28908	// 20048f14 <index_TEX>
2000d2dc:	30630040 	addik	r3, r3, 64
2000d2e0:	b0002004 	imm	8196
2000d2e4:	f8608f14 	swi	r3, r0, -28908	// 20048f14 <index_TEX>
		index_VID += 64;
2000d2e8:	b0002004 	imm	8196
2000d2ec:	e8608f24 	lwi	r3, r0, -28892	// 20048f24 <index_VID>
2000d2f0:	30630040 	addik	r3, r3, 64
2000d2f4:	b0002004 	imm	8196
2000d2f8:	f8608f24 	swi	r3, r0, -28892	// 20048f24 <index_VID>
		
		read_end_MOT();
2000d2fc:	b9f4f5fc 	brlid	r15, -2564	// 2000c8f8 <read_end_MOT>
2000d300:	80000000 	or	r0, r0, r0
		read_end_TEX();
2000d304:	b9f4f69c 	brlid	r15, -2404	// 2000c9a0 <read_end_TEX>
2000d308:	80000000 	or	r0, r0, r0
		write_end_VID();
2000d30c:	b9f4f7e8 	brlid	r15, -2072	// 2000caf4 <write_end_VID>
2000d310:	80000000 	or	r0, r0, r0
	}
2000d314:	e9e10000 	lwi	r15, r1, 0
2000d318:	10330000 	addk	r1, r19, r0
2000d31c:	ea610034 	lwi	r19, r1, 52
2000d320:	30210038 	addik	r1, r1, 56
2000d324:	b60f0008 	rtsd	r15, 8
2000d328:	80000000 	or	r0, r0, r0

2000d32c <decoder_motion_add_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_motion_add_initialize() {
2000d32c:	3021fff4 	addik	r1, r1, -12
2000d330:	fa610008 	swi	r19, r1, 8
2000d334:	12610000 	addk	r19, r1, r0
		int i = 0;
2000d338:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_cmd;
2000d33c:	b0002004 	imm	8196
2000d340:	f8008f2c 	swi	r0, r0, -28884	// 20048f2c <_FSM_state>
		
	finished:
		// no read_end/write_end here!
		return;
2000d344:	80000000 	or	r0, r0, r0
	}
2000d348:	10330000 	addk	r1, r19, r0
2000d34c:	ea610008 	lwi	r19, r1, 8
2000d350:	3021000c 	addik	r1, r1, 12
2000d354:	b60f0008 	rtsd	r15, 8
2000d358:	80000000 	or	r0, r0, r0

2000d35c <decoder_motion_add_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	
	int decoder_motion_add_scheduler() {
2000d35c:	3021ffb8 	addik	r1, r1, -72
2000d360:	f9e10000 	swi	r15, r1, 0
2000d364:	fa610044 	swi	r19, r1, 68
2000d368:	12610000 	addk	r19, r1, r0
		int i = 0;
2000d36c:	f813001c 	swi	r0, r19, 28
		if(needInit){
2000d370:	b0002004 	imm	8196
2000d374:	e0605dbc 	lbui	r3, r0, 23996	// 20045dbc <needInit>
2000d378:	bc030014 	beqi	r3, 20		// 2000d38c
			decoder_motion_add_initialize();
2000d37c:	b9f4ffb0 	brlid	r15, -80	// 2000d32c <decoder_motion_add_initialize>
2000d380:	80000000 	or	r0, r0, r0
			needInit = 0;
2000d384:	b0002004 	imm	8196
2000d388:	f0005dbc 	sbi	r0, r0, 23996	// 20045dbc <needInit>
		}
	
		read_MOT();
2000d38c:	b9f4f4fc 	brlid	r15, -2820	// 2000c888 <read_MOT>
2000d390:	80000000 	or	r0, r0, r0
		read_TEX();
2000d394:	b9f4f59c 	brlid	r15, -2660	// 2000c930 <read_TEX>
2000d398:	80000000 	or	r0, r0, r0
		read_BTYPE();
2000d39c:	b9f4f63c 	brlid	r15, -2500	// 2000c9d8 <read_BTYPE>
2000d3a0:	80000000 	or	r0, r0, r0
		write_VID();
2000d3a4:	b9f4f6e0 	brlid	r15, -2336	// 2000ca84 <write_VID>
2000d3a8:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
2000d3ac:	b0002004 	imm	8196
2000d3b0:	e8608f2c 	lwi	r3, r0, -28884	// 20048f2c <_FSM_state>
2000d3b4:	30800005 	addik	r4, r0, 5
2000d3b8:	16432003 	cmpu	r18, r3, r4
2000d3bc:	bc520018 	blti	r18, 24		// 2000d3d4
2000d3c0:	64630402 	bslli	r3, r3, 2
2000d3c4:	b0002003 	imm	8195
2000d3c8:	3063bd4c 	addik	r3, r3, -17076
2000d3cc:	e8630000 	lwi	r3, r3, 0
2000d3d0:	98081800 	bra	r3
		case my_state_skipw:
			goto l_skipw;
		case my_state_texture:
			goto l_texture;
		default:
			exit(1);
2000d3d4:	30a00001 	addik	r5, r0, 1
2000d3d8:	b000dfff 	imm	-8193
2000d3dc:	b9f42fbc 	brlid	r15, 12220	// 398 <exit>
2000d3e0:	80000000 	or	r0, r0, r0
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_cmd:
			goto l_cmd;
2000d3e4:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_cmd:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_cmd_newVop()) {
2000d3e8:	b0002004 	imm	8196
2000d3ec:	e8808f20 	lwi	r4, r0, -28896	// 20048f20 <numTokens_BTYPE>
2000d3f0:	b0002004 	imm	8196
2000d3f4:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000d3f8:	88641800 	xor	r3, r4, r3
2000d3fc:	bc030040 	beqi	r3, 64		// 2000d43c
2000d400:	b9f4f72c 	brlid	r15, -2260	// 2000cb2c <isSchedulable_cmd_newVop>
2000d404:	80000000 	or	r0, r0, r0
2000d408:	bc030034 	beqi	r3, 52		// 2000d43c
				int stop = 0;
2000d40c:	f813002c 	swi	r0, r19, 44
				if (stop != 0) {
2000d410:	e873002c 	lwi	r3, r19, 44
2000d414:	bc030010 	beqi	r3, 16		// 2000d424
					_FSM_state = my_state_cmd;
2000d418:	b0002004 	imm	8196
2000d41c:	f8008f2c 	swi	r0, r0, -28884	// 20048f2c <_FSM_state>
					goto finished;
2000d420:	b80004bc 	bri	1212		// 2000d8dc
				}
				cmd_newVop();
2000d424:	b9f4f77c 	brlid	r15, -2180	// 2000cba0 <cmd_newVop>
2000d428:	80000000 	or	r0, r0, r0
				i++;
2000d42c:	e873001c 	lwi	r3, r19, 28
2000d430:	30630001 	addik	r3, r3, 1
2000d434:	f873001c 	swi	r3, r19, 28
				goto l_skipw;
2000d438:	b800035c 	bri	860		// 2000d794
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_cmd_textureOnly()) {
2000d43c:	b0002004 	imm	8196
2000d440:	e8808f20 	lwi	r4, r0, -28896	// 20048f20 <numTokens_BTYPE>
2000d444:	b0002004 	imm	8196
2000d448:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000d44c:	88641800 	xor	r3, r4, r3
2000d450:	bc030040 	beqi	r3, 64		// 2000d490
2000d454:	b9f4f7c8 	brlid	r15, -2104	// 2000cc1c <isSchedulable_cmd_textureOnly>
2000d458:	80000000 	or	r0, r0, r0
2000d45c:	bc030034 	beqi	r3, 52		// 2000d490
				int stop = 0;
2000d460:	f8130030 	swi	r0, r19, 48
				if (stop != 0) {
2000d464:	e8730030 	lwi	r3, r19, 48
2000d468:	bc030010 	beqi	r3, 16		// 2000d478
					_FSM_state = my_state_cmd;
2000d46c:	b0002004 	imm	8196
2000d470:	f8008f2c 	swi	r0, r0, -28884	// 20048f2c <_FSM_state>
					goto finished;
2000d474:	b8000468 	bri	1128		// 2000d8dc
				}
				cmd_textureOnly();
2000d478:	b9f4f818 	brlid	r15, -2024	// 2000cc90 <cmd_textureOnly>
2000d47c:	80000000 	or	r0, r0, r0
				i++;
2000d480:	e873001c 	lwi	r3, r19, 28
2000d484:	30630001 	addik	r3, r3, 1
2000d488:	f873001c 	swi	r3, r19, 28
				goto l_texture;
2000d48c:	b8000374 	bri	884		// 2000d800
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_cmd_motionOnly()) {
2000d490:	b0002004 	imm	8196
2000d494:	e8808f20 	lwi	r4, r0, -28896	// 20048f20 <numTokens_BTYPE>
2000d498:	b0002004 	imm	8196
2000d49c:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000d4a0:	88641800 	xor	r3, r4, r3
2000d4a4:	bc030040 	beqi	r3, 64		// 2000d4e4
2000d4a8:	b9f4f864 	brlid	r15, -1948	// 2000cd0c <isSchedulable_cmd_motionOnly>
2000d4ac:	80000000 	or	r0, r0, r0
2000d4b0:	bc030034 	beqi	r3, 52		// 2000d4e4
				int stop = 0;
2000d4b4:	f8130034 	swi	r0, r19, 52
				if (stop != 0) {
2000d4b8:	e8730034 	lwi	r3, r19, 52
2000d4bc:	bc030010 	beqi	r3, 16		// 2000d4cc
					_FSM_state = my_state_cmd;
2000d4c0:	b0002004 	imm	8196
2000d4c4:	f8008f2c 	swi	r0, r0, -28884	// 20048f2c <_FSM_state>
					goto finished;
2000d4c8:	b8000414 	bri	1044		// 2000d8dc
				}
				cmd_motionOnly();
2000d4cc:	b9f4f8b4 	brlid	r15, -1868	// 2000cd80 <cmd_motionOnly>
2000d4d0:	80000000 	or	r0, r0, r0
				i++;
2000d4d4:	e873001c 	lwi	r3, r19, 28
2000d4d8:	30630001 	addik	r3, r3, 1
2000d4dc:	f873001c 	swi	r3, r19, 28
				goto l_motion;
2000d4e0:	b8000168 	bri	360		// 2000d648
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_cmd_other()) {
2000d4e4:	b0002004 	imm	8196
2000d4e8:	e8808f20 	lwi	r4, r0, -28896	// 20048f20 <numTokens_BTYPE>
2000d4ec:	b0002004 	imm	8196
2000d4f0:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000d4f4:	88641800 	xor	r3, r4, r3
2000d4f8:	bc030040 	beqi	r3, 64		// 2000d538
2000d4fc:	b9f4f900 	brlid	r15, -1792	// 2000cdfc <isSchedulable_cmd_other>
2000d500:	80000000 	or	r0, r0, r0
2000d504:	bc030034 	beqi	r3, 52		// 2000d538
				int stop = 0;
2000d508:	f8130038 	swi	r0, r19, 56
				if (stop != 0) {
2000d50c:	e8730038 	lwi	r3, r19, 56
2000d510:	bc030010 	beqi	r3, 16		// 2000d520
					_FSM_state = my_state_cmd;
2000d514:	b0002004 	imm	8196
2000d518:	f8008f2c 	swi	r0, r0, -28884	// 20048f2c <_FSM_state>
					goto finished;
2000d51c:	b80003c0 	bri	960		// 2000d8dc
				}
				cmd_other();
2000d520:	b9f4f908 	brlid	r15, -1784	// 2000ce28 <cmd_other>
2000d524:	80000000 	or	r0, r0, r0
				i++;
2000d528:	e873001c 	lwi	r3, r19, 28
2000d52c:	30630001 	addik	r3, r3, 1
2000d530:	f873001c 	swi	r3, r19, 28
				goto l_combine;
2000d534:	b8000014 	bri	20		// 2000d548
			} else {
				_FSM_state = my_state_cmd;
2000d538:	b0002004 	imm	8196
2000d53c:	f8008f2c 	swi	r0, r0, -28884	// 20048f2c <_FSM_state>
				goto finished;
2000d540:	b800039c 	bri	924		// 2000d8dc
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_cmd:
			goto l_cmd;
		case my_state_combine:
			goto l_combine;
2000d544:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_cmd;
				goto finished;
			}
		l_combine:
			if (numTokens_MOT - index_MOT >= 64 && numTokens_TEX - index_TEX >= 64 && isSchedulable_combine()) {
2000d548:	b0002004 	imm	8196
2000d54c:	e8808f10 	lwi	r4, r0, -28912	// 20048f10 <numTokens_MOT>
2000d550:	b0002004 	imm	8196
2000d554:	e8608f0c 	lwi	r3, r0, -28916	// 20048f0c <index_MOT>
2000d558:	14832000 	rsubk	r4, r3, r4
2000d55c:	3060003f 	addik	r3, r0, 63
2000d560:	16441803 	cmpu	r18, r4, r3
2000d564:	bcb200d0 	bgei	r18, 208		// 2000d634
2000d568:	b0002004 	imm	8196
2000d56c:	e8808f18 	lwi	r4, r0, -28904	// 20048f18 <numTokens_TEX>
2000d570:	b0002004 	imm	8196
2000d574:	e8608f14 	lwi	r3, r0, -28908	// 20048f14 <index_TEX>
2000d578:	14832000 	rsubk	r4, r3, r4
2000d57c:	3060003f 	addik	r3, r0, 63
2000d580:	16441803 	cmpu	r18, r4, r3
2000d584:	bcb200b0 	bgei	r18, 176		// 2000d634
2000d588:	b9f4fb7c 	brlid	r15, -1156	// 2000d104 <isSchedulable_combine>
2000d58c:	80000000 	or	r0, r0, r0
2000d590:	bc0300a4 	beqi	r3, 164		// 2000d634
				int stop = 0;
2000d594:	f8130020 	swi	r0, r19, 32
				if (64 > SIZE_VID - index_VID + decoder_motion_add_VID->read_inds[0]) {
2000d598:	b0002004 	imm	8196
2000d59c:	e8605da0 	lwi	r3, r0, 23968	// 20045da0 <decoder_motion_add_VID>
2000d5a0:	e863000c 	lwi	r3, r3, 12
2000d5a4:	e8830000 	lwi	r4, r3, 0
2000d5a8:	b0002004 	imm	8196
2000d5ac:	e8608f24 	lwi	r3, r0, -28892	// 20048f24 <index_VID>
2000d5b0:	14632000 	rsubk	r3, r3, r4
2000d5b4:	30830200 	addik	r4, r3, 512
2000d5b8:	3060003f 	addik	r3, r0, 63
2000d5bc:	16441803 	cmpu	r18, r4, r3
2000d5c0:	bc52000c 	blti	r18, 12		// 2000d5cc
					stop = 1;
2000d5c4:	30600001 	addik	r3, r0, 1
2000d5c8:	f8730020 	swi	r3, r19, 32
				}
				if (64 > SIZE_VID - index_VID + decoder_motion_add_VID->read_inds[1]) {
2000d5cc:	b0002004 	imm	8196
2000d5d0:	e8605da0 	lwi	r3, r0, 23968	// 20045da0 <decoder_motion_add_VID>
2000d5d4:	e863000c 	lwi	r3, r3, 12
2000d5d8:	30630004 	addik	r3, r3, 4
2000d5dc:	e8830000 	lwi	r4, r3, 0
2000d5e0:	b0002004 	imm	8196
2000d5e4:	e8608f24 	lwi	r3, r0, -28892	// 20048f24 <index_VID>
2000d5e8:	14632000 	rsubk	r3, r3, r4
2000d5ec:	30830200 	addik	r4, r3, 512
2000d5f0:	3060003f 	addik	r3, r0, 63
2000d5f4:	16441803 	cmpu	r18, r4, r3
2000d5f8:	bc52000c 	blti	r18, 12		// 2000d604
					stop = 1;
2000d5fc:	30600001 	addik	r3, r0, 1
2000d600:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
2000d604:	e8730020 	lwi	r3, r19, 32
2000d608:	bc030014 	beqi	r3, 20		// 2000d61c
					_FSM_state = my_state_combine;
2000d60c:	30600001 	addik	r3, r0, 1
2000d610:	b0002004 	imm	8196
2000d614:	f8608f2c 	swi	r3, r0, -28884	// 20048f2c <_FSM_state>
					goto finished;
2000d618:	b80002c4 	bri	708		// 2000d8dc
				}
				combine();
2000d61c:	b9f4fb14 	brlid	r15, -1260	// 2000d130 <combine>
2000d620:	80000000 	or	r0, r0, r0
				i++;
2000d624:	e873001c 	lwi	r3, r19, 28
2000d628:	30630001 	addik	r3, r3, 1
2000d62c:	f873001c 	swi	r3, r19, 28
				goto l_cmd;
2000d630:	b800fdb8 	bri	-584		// 2000d3e8
			} else {
				_FSM_state = my_state_combine;
2000d634:	30600001 	addik	r3, r0, 1
2000d638:	b0002004 	imm	8196
2000d63c:	f8608f2c 	swi	r3, r0, -28884	// 20048f2c <_FSM_state>
				goto finished;
2000d640:	b800029c 	bri	668		// 2000d8dc
		case my_state_cmd:
			goto l_cmd;
		case my_state_combine:
			goto l_combine;
		case my_state_motion:
			goto l_motion;
2000d644:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_combine;
				goto finished;
			}
		l_motion:
			if (numTokens_MOT - index_MOT >= 64 && isSchedulable_motion()) {
2000d648:	b0002004 	imm	8196
2000d64c:	e8808f10 	lwi	r4, r0, -28912	// 20048f10 <numTokens_MOT>
2000d650:	b0002004 	imm	8196
2000d654:	e8608f0c 	lwi	r3, r0, -28916	// 20048f0c <index_MOT>
2000d658:	14832000 	rsubk	r4, r3, r4
2000d65c:	3060003f 	addik	r3, r0, 63
2000d660:	16441803 	cmpu	r18, r4, r3
2000d664:	bcb200b0 	bgei	r18, 176		// 2000d714
2000d668:	b9f4f96c 	brlid	r15, -1684	// 2000cfd4 <isSchedulable_motion>
2000d66c:	80000000 	or	r0, r0, r0
2000d670:	bc0300a4 	beqi	r3, 164		// 2000d714
				int stop = 0;
2000d674:	f8130024 	swi	r0, r19, 36
				if (64 > SIZE_VID - index_VID + decoder_motion_add_VID->read_inds[0]) {
2000d678:	b0002004 	imm	8196
2000d67c:	e8605da0 	lwi	r3, r0, 23968	// 20045da0 <decoder_motion_add_VID>
2000d680:	e863000c 	lwi	r3, r3, 12
2000d684:	e8830000 	lwi	r4, r3, 0
2000d688:	b0002004 	imm	8196
2000d68c:	e8608f24 	lwi	r3, r0, -28892	// 20048f24 <index_VID>
2000d690:	14632000 	rsubk	r3, r3, r4
2000d694:	30830200 	addik	r4, r3, 512
2000d698:	3060003f 	addik	r3, r0, 63
2000d69c:	16441803 	cmpu	r18, r4, r3
2000d6a0:	bc52000c 	blti	r18, 12		// 2000d6ac
					stop = 1;
2000d6a4:	30600001 	addik	r3, r0, 1
2000d6a8:	f8730024 	swi	r3, r19, 36
				}
				if (64 > SIZE_VID - index_VID + decoder_motion_add_VID->read_inds[1]) {
2000d6ac:	b0002004 	imm	8196
2000d6b0:	e8605da0 	lwi	r3, r0, 23968	// 20045da0 <decoder_motion_add_VID>
2000d6b4:	e863000c 	lwi	r3, r3, 12
2000d6b8:	30630004 	addik	r3, r3, 4
2000d6bc:	e8830000 	lwi	r4, r3, 0
2000d6c0:	b0002004 	imm	8196
2000d6c4:	e8608f24 	lwi	r3, r0, -28892	// 20048f24 <index_VID>
2000d6c8:	14632000 	rsubk	r3, r3, r4
2000d6cc:	30830200 	addik	r4, r3, 512
2000d6d0:	3060003f 	addik	r3, r0, 63
2000d6d4:	16441803 	cmpu	r18, r4, r3
2000d6d8:	bc52000c 	blti	r18, 12		// 2000d6e4
					stop = 1;
2000d6dc:	30600001 	addik	r3, r0, 1
2000d6e0:	f8730024 	swi	r3, r19, 36
				}
				if (stop != 0) {
2000d6e4:	e8730024 	lwi	r3, r19, 36
2000d6e8:	bc030014 	beqi	r3, 20		// 2000d6fc
					_FSM_state = my_state_motion;
2000d6ec:	30600002 	addik	r3, r0, 2
2000d6f0:	b0002004 	imm	8196
2000d6f4:	f8608f2c 	swi	r3, r0, -28884	// 20048f2c <_FSM_state>
					goto finished;
2000d6f8:	b80001e4 	bri	484		// 2000d8dc
				}
				motion();
2000d6fc:	b9f4f904 	brlid	r15, -1788	// 2000d000 <motion>
2000d700:	80000000 	or	r0, r0, r0
				i++;
2000d704:	e873001c 	lwi	r3, r19, 28
2000d708:	30630001 	addik	r3, r3, 1
2000d70c:	f873001c 	swi	r3, r19, 28
				goto l_cmd;
2000d710:	b800fcd8 	bri	-808		// 2000d3e8
			} else {
				_FSM_state = my_state_motion;
2000d714:	30600002 	addik	r3, r0, 2
2000d718:	b0002004 	imm	8196
2000d71c:	f8608f2c 	swi	r3, r0, -28884	// 20048f2c <_FSM_state>
				goto finished;
2000d720:	b80001bc 	bri	444		// 2000d8dc
		case my_state_combine:
			goto l_combine;
		case my_state_motion:
			goto l_motion;
		case my_state_skiph:
			goto l_skiph;
2000d724:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_motion;
				goto finished;
			}
		l_skiph:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_cmd_other()) {
2000d728:	b0002004 	imm	8196
2000d72c:	e8808f20 	lwi	r4, r0, -28896	// 20048f20 <numTokens_BTYPE>
2000d730:	b0002004 	imm	8196
2000d734:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000d738:	88641800 	xor	r3, r4, r3
2000d73c:	bc030044 	beqi	r3, 68		// 2000d780
2000d740:	b9f4f6bc 	brlid	r15, -2372	// 2000cdfc <isSchedulable_cmd_other>
2000d744:	80000000 	or	r0, r0, r0
2000d748:	bc030038 	beqi	r3, 56		// 2000d780
				int stop = 0;
2000d74c:	f8130040 	swi	r0, r19, 64
				if (stop != 0) {
2000d750:	e8730040 	lwi	r3, r19, 64
2000d754:	bc030014 	beqi	r3, 20		// 2000d768
					_FSM_state = my_state_skiph;
2000d758:	30600003 	addik	r3, r0, 3
2000d75c:	b0002004 	imm	8196
2000d760:	f8608f2c 	swi	r3, r0, -28884	// 20048f2c <_FSM_state>
					goto finished;
2000d764:	b8000178 	bri	376		// 2000d8dc
				}
				cmd_other();
2000d768:	b9f4f6c0 	brlid	r15, -2368	// 2000ce28 <cmd_other>
2000d76c:	80000000 	or	r0, r0, r0
				i++;
2000d770:	e873001c 	lwi	r3, r19, 28
2000d774:	30630001 	addik	r3, r3, 1
2000d778:	f873001c 	swi	r3, r19, 28
				goto l_cmd;
2000d77c:	b800fc6c 	bri	-916		// 2000d3e8
			} else {
				_FSM_state = my_state_skiph;
2000d780:	30600003 	addik	r3, r0, 3
2000d784:	b0002004 	imm	8196
2000d788:	f8608f2c 	swi	r3, r0, -28884	// 20048f2c <_FSM_state>
				goto finished;
2000d78c:	b8000150 	bri	336		// 2000d8dc
		case my_state_motion:
			goto l_motion;
		case my_state_skiph:
			goto l_skiph;
		case my_state_skipw:
			goto l_skipw;
2000d790:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_skiph;
				goto finished;
			}
		l_skipw:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_cmd_other()) {
2000d794:	b0002004 	imm	8196
2000d798:	e8808f20 	lwi	r4, r0, -28896	// 20048f20 <numTokens_BTYPE>
2000d79c:	b0002004 	imm	8196
2000d7a0:	e8608f1c 	lwi	r3, r0, -28900	// 20048f1c <index_BTYPE>
2000d7a4:	88641800 	xor	r3, r4, r3
2000d7a8:	bc030044 	beqi	r3, 68		// 2000d7ec
2000d7ac:	b9f4f650 	brlid	r15, -2480	// 2000cdfc <isSchedulable_cmd_other>
2000d7b0:	80000000 	or	r0, r0, r0
2000d7b4:	bc030038 	beqi	r3, 56		// 2000d7ec
				int stop = 0;
2000d7b8:	f813003c 	swi	r0, r19, 60
				if (stop != 0) {
2000d7bc:	e873003c 	lwi	r3, r19, 60
2000d7c0:	bc030014 	beqi	r3, 20		// 2000d7d4
					_FSM_state = my_state_skipw;
2000d7c4:	30600004 	addik	r3, r0, 4
2000d7c8:	b0002004 	imm	8196
2000d7cc:	f8608f2c 	swi	r3, r0, -28884	// 20048f2c <_FSM_state>
					goto finished;
2000d7d0:	b800010c 	bri	268		// 2000d8dc
				}
				cmd_other();
2000d7d4:	b9f4f654 	brlid	r15, -2476	// 2000ce28 <cmd_other>
2000d7d8:	80000000 	or	r0, r0, r0
				i++;
2000d7dc:	e873001c 	lwi	r3, r19, 28
2000d7e0:	30630001 	addik	r3, r3, 1
2000d7e4:	f873001c 	swi	r3, r19, 28
				goto l_skiph;
2000d7e8:	b800ff40 	bri	-192		// 2000d728
			} else {
				_FSM_state = my_state_skipw;
2000d7ec:	30600004 	addik	r3, r0, 4
2000d7f0:	b0002004 	imm	8196
2000d7f4:	f8608f2c 	swi	r3, r0, -28884	// 20048f2c <_FSM_state>
				goto finished;
2000d7f8:	b80000e4 	bri	228		// 2000d8dc
		case my_state_skiph:
			goto l_skiph;
		case my_state_skipw:
			goto l_skipw;
		case my_state_texture:
			goto l_texture;
2000d7fc:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_skipw;
				goto finished;
			}
		l_texture:
			if (numTokens_TEX - index_TEX >= 64 && isSchedulable_texture()) {
2000d800:	b0002004 	imm	8196
2000d804:	e8808f18 	lwi	r4, r0, -28904	// 20048f18 <numTokens_TEX>
2000d808:	b0002004 	imm	8196
2000d80c:	e8608f14 	lwi	r3, r0, -28908	// 20048f14 <index_TEX>
2000d810:	14832000 	rsubk	r4, r3, r4
2000d814:	3060003f 	addik	r3, r0, 63
2000d818:	16441803 	cmpu	r18, r4, r3
2000d81c:	bcb200b0 	bgei	r18, 176		// 2000d8cc
2000d820:	b9f4f684 	brlid	r15, -2428	// 2000cea4 <isSchedulable_texture>
2000d824:	80000000 	or	r0, r0, r0
2000d828:	bc0300a4 	beqi	r3, 164		// 2000d8cc
				int stop = 0;
2000d82c:	f8130028 	swi	r0, r19, 40
				if (64 > SIZE_VID - index_VID + decoder_motion_add_VID->read_inds[0]) {
2000d830:	b0002004 	imm	8196
2000d834:	e8605da0 	lwi	r3, r0, 23968	// 20045da0 <decoder_motion_add_VID>
2000d838:	e863000c 	lwi	r3, r3, 12
2000d83c:	e8830000 	lwi	r4, r3, 0
2000d840:	b0002004 	imm	8196
2000d844:	e8608f24 	lwi	r3, r0, -28892	// 20048f24 <index_VID>
2000d848:	14632000 	rsubk	r3, r3, r4
2000d84c:	30830200 	addik	r4, r3, 512
2000d850:	3060003f 	addik	r3, r0, 63
2000d854:	16441803 	cmpu	r18, r4, r3
2000d858:	bc52000c 	blti	r18, 12		// 2000d864
					stop = 1;
2000d85c:	30600001 	addik	r3, r0, 1
2000d860:	f8730028 	swi	r3, r19, 40
				}
				if (64 > SIZE_VID - index_VID + decoder_motion_add_VID->read_inds[1]) {
2000d864:	b0002004 	imm	8196
2000d868:	e8605da0 	lwi	r3, r0, 23968	// 20045da0 <decoder_motion_add_VID>
2000d86c:	e863000c 	lwi	r3, r3, 12
2000d870:	30630004 	addik	r3, r3, 4
2000d874:	e8830000 	lwi	r4, r3, 0
2000d878:	b0002004 	imm	8196
2000d87c:	e8608f24 	lwi	r3, r0, -28892	// 20048f24 <index_VID>
2000d880:	14632000 	rsubk	r3, r3, r4
2000d884:	30830200 	addik	r4, r3, 512
2000d888:	3060003f 	addik	r3, r0, 63
2000d88c:	16441803 	cmpu	r18, r4, r3
2000d890:	bc52000c 	blti	r18, 12		// 2000d89c
					stop = 1;
2000d894:	30600001 	addik	r3, r0, 1
2000d898:	f8730028 	swi	r3, r19, 40
				}
				if (stop != 0) {
2000d89c:	e8730028 	lwi	r3, r19, 40
2000d8a0:	bc030014 	beqi	r3, 20		// 2000d8b4
					_FSM_state = my_state_texture;
2000d8a4:	30600005 	addik	r3, r0, 5
2000d8a8:	b0002004 	imm	8196
2000d8ac:	f8608f2c 	swi	r3, r0, -28884	// 20048f2c <_FSM_state>
					goto finished;
2000d8b0:	b800002c 	bri	44		// 2000d8dc
				}
				texture();
2000d8b4:	b9f4f61c 	brlid	r15, -2532	// 2000ced0 <texture>
2000d8b8:	80000000 	or	r0, r0, r0
				i++;
2000d8bc:	e873001c 	lwi	r3, r19, 28
2000d8c0:	30630001 	addik	r3, r3, 1
2000d8c4:	f873001c 	swi	r3, r19, 28
				goto l_cmd;
2000d8c8:	b800fb20 	bri	-1248		// 2000d3e8
			} else {
				_FSM_state = my_state_texture;
2000d8cc:	30600005 	addik	r3, r0, 5
2000d8d0:	b0002004 	imm	8196
2000d8d4:	f8608f2c 	swi	r3, r0, -28884	// 20048f2c <_FSM_state>
				goto finished;
2000d8d8:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_MOT();
2000d8dc:	b9f4f01c 	brlid	r15, -4068	// 2000c8f8 <read_end_MOT>
2000d8e0:	80000000 	or	r0, r0, r0
		read_end_TEX();
2000d8e4:	b9f4f0bc 	brlid	r15, -3908	// 2000c9a0 <read_end_TEX>
2000d8e8:	80000000 	or	r0, r0, r0
		read_end_BTYPE();
2000d8ec:	b9f4f15c 	brlid	r15, -3748	// 2000ca48 <read_end_BTYPE>
2000d8f0:	80000000 	or	r0, r0, r0
		
		write_end_VID();
2000d8f4:	b9f4f200 	brlid	r15, -3584	// 2000caf4 <write_end_VID>
2000d8f8:	80000000 	or	r0, r0, r0
		
		
		return i;
2000d8fc:	e873001c 	lwi	r3, r19, 28
	}
2000d900:	e9e10000 	lwi	r15, r1, 0
2000d904:	10330000 	addk	r1, r19, r0
2000d908:	ea610044 	lwi	r19, r1, 68
2000d90c:	30210048 	addik	r1, r1, 72
2000d910:	b60f0008 	rtsd	r15, 8
2000d914:	80000000 	or	r0, r0, r0

2000d918 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000d918:	3021fff8 	addik	r1, r1, -8
2000d91c:	fa610004 	swi	r19, r1, 4
2000d920:	12610000 	addk	r19, r1, r0
2000d924:	f8b3000c 	swi	r5, r19, 12
2000d928:	f8d30010 	swi	r6, r19, 16
2000d92c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000d930:	e873000c 	lwi	r3, r19, 12
2000d934:	e8630010 	lwi	r3, r3, 16
2000d938:	e8830000 	lwi	r4, r3, 0
2000d93c:	e873000c 	lwi	r3, r19, 12
2000d940:	e8a3000c 	lwi	r5, r3, 12
2000d944:	e8730010 	lwi	r3, r19, 16
2000d948:	64630402 	bslli	r3, r3, 2
2000d94c:	10651800 	addk	r3, r5, r3
2000d950:	e8630000 	lwi	r3, r3, 0
2000d954:	14a32000 	rsubk	r5, r3, r4
2000d958:	30600001 	addik	r3, r0, 1
2000d95c:	e8930014 	lwi	r4, r19, 20
2000d960:	16442803 	cmpu	r18, r4, r5
2000d964:	bcb20008 	bgei	r18, 8		// 2000d96c
2000d968:	10600000 	addk	r3, r0, r0
2000d96c:	a46300ff 	andi	r3, r3, 255
}
2000d970:	10330000 	addk	r1, r19, r0
2000d974:	ea610004 	lwi	r19, r1, 4
2000d978:	30210008 	addik	r1, r1, 8
2000d97c:	b60f0008 	rtsd	r15, 8
2000d980:	80000000 	or	r0, r0, r0

2000d984 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000d984:	3021fff8 	addik	r1, r1, -8
2000d988:	fa610004 	swi	r19, r1, 4
2000d98c:	12610000 	addk	r19, r1, r0
2000d990:	f8b3000c 	swi	r5, r19, 12
2000d994:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000d998:	e873000c 	lwi	r3, r19, 12
2000d99c:	e8630010 	lwi	r3, r3, 16
2000d9a0:	e8830000 	lwi	r4, r3, 0
2000d9a4:	e873000c 	lwi	r3, r19, 12
2000d9a8:	e8a3000c 	lwi	r5, r3, 12
2000d9ac:	e8730010 	lwi	r3, r19, 16
2000d9b0:	64630402 	bslli	r3, r3, 2
2000d9b4:	10651800 	addk	r3, r5, r3
2000d9b8:	e8630000 	lwi	r3, r3, 0
2000d9bc:	14632000 	rsubk	r3, r3, r4
}
2000d9c0:	10330000 	addk	r1, r19, r0
2000d9c4:	ea610004 	lwi	r19, r1, 4
2000d9c8:	30210008 	addik	r1, r1, 8
2000d9cc:	b60f0008 	rtsd	r15, 8
2000d9d0:	80000000 	or	r0, r0, r0

2000d9d4 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000d9d4:	3021fff4 	addik	r1, r1, -12
2000d9d8:	fa610008 	swi	r19, r1, 8
2000d9dc:	12610000 	addk	r19, r1, r0
2000d9e0:	f8b30010 	swi	r5, r19, 16
2000d9e4:	f8d30014 	swi	r6, r19, 20
2000d9e8:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000d9ec:	f8130004 	swi	r0, r19, 4
2000d9f0:	b800005c 	bri	92		// 2000da4c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000d9f4:	e8730010 	lwi	r3, r19, 16
2000d9f8:	e8830000 	lwi	r4, r3, 0
2000d9fc:	e8730010 	lwi	r3, r19, 16
2000da00:	e8a3000c 	lwi	r5, r3, 12
2000da04:	e8730004 	lwi	r3, r19, 4
2000da08:	64630402 	bslli	r3, r3, 2
2000da0c:	10651800 	addk	r3, r5, r3
2000da10:	e8a30000 	lwi	r5, r3, 0
2000da14:	e8730010 	lwi	r3, r19, 16
2000da18:	e8630010 	lwi	r3, r3, 16
2000da1c:	e8630000 	lwi	r3, r3, 0
2000da20:	14632800 	rsubk	r3, r3, r5
2000da24:	10641800 	addk	r3, r4, r3
2000da28:	30830001 	addik	r4, r3, 1
2000da2c:	e8730018 	lwi	r3, r19, 24
2000da30:	16441803 	cmpu	r18, r4, r3
2000da34:	bc52000c 	blti	r18, 12		// 2000da40
            return 0;
2000da38:	10600000 	addk	r3, r0, r0
2000da3c:	b8000024 	bri	36		// 2000da60
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000da40:	e8730004 	lwi	r3, r19, 4
2000da44:	30630001 	addik	r3, r3, 1
2000da48:	f8730004 	swi	r3, r19, 4
2000da4c:	e8930004 	lwi	r4, r19, 4
2000da50:	e8730014 	lwi	r3, r19, 20
2000da54:	16432003 	cmpu	r18, r3, r4
2000da58:	bc52ff9c 	blti	r18, -100		// 2000d9f4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000da5c:	30600001 	addik	r3, r0, 1
}
2000da60:	10330000 	addk	r1, r19, r0
2000da64:	ea610008 	lwi	r19, r1, 8
2000da68:	3021000c 	addik	r1, r1, 12
2000da6c:	b60f0008 	rtsd	r15, 8
2000da70:	80000000 	or	r0, r0, r0

2000da74 <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000da74:	3021ffec 	addik	r1, r1, -20
2000da78:	fa610010 	swi	r19, r1, 16
2000da7c:	12610000 	addk	r19, r1, r0
2000da80:	f8b30018 	swi	r5, r19, 24
2000da84:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000da88:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000da8c:	f8130004 	swi	r0, r19, 4
2000da90:	b8000054 	bri	84		// 2000dae4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000da94:	e8730018 	lwi	r3, r19, 24
2000da98:	e8630010 	lwi	r3, r3, 16
2000da9c:	e8830000 	lwi	r4, r3, 0
2000daa0:	e8730018 	lwi	r3, r19, 24
2000daa4:	e8a3000c 	lwi	r5, r3, 12
2000daa8:	e8730004 	lwi	r3, r19, 4
2000daac:	64630402 	bslli	r3, r3, 2
2000dab0:	10651800 	addk	r3, r5, r3
2000dab4:	e8630000 	lwi	r3, r3, 0
2000dab8:	14632000 	rsubk	r3, r3, r4
2000dabc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000dac0:	e8930008 	lwi	r4, r19, 8
2000dac4:	e873000c 	lwi	r3, r19, 12
2000dac8:	16441803 	cmpu	r18, r4, r3
2000dacc:	bcb20008 	bgei	r18, 8		// 2000dad4
2000dad0:	10640000 	addk	r3, r4, r0
2000dad4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000dad8:	e8730004 	lwi	r3, r19, 4
2000dadc:	30630001 	addik	r3, r3, 1
2000dae0:	f8730004 	swi	r3, r19, 4
2000dae4:	e8930004 	lwi	r4, r19, 4
2000dae8:	e873001c 	lwi	r3, r19, 28
2000daec:	16432003 	cmpu	r18, r3, r4
2000daf0:	bc52ffa4 	blti	r18, -92		// 2000da94
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000daf4:	e8730018 	lwi	r3, r19, 24
2000daf8:	e8830000 	lwi	r4, r3, 0
2000dafc:	e8730008 	lwi	r3, r19, 8
2000db00:	14632000 	rsubk	r3, r3, r4
}
2000db04:	10330000 	addk	r1, r19, r0
2000db08:	ea610010 	lwi	r19, r1, 16
2000db0c:	30210014 	addik	r1, r1, 20
2000db10:	b60f0008 	rtsd	r15, 8
2000db14:	80000000 	or	r0, r0, r0

2000db18 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000db18:	3021fff4 	addik	r1, r1, -12
2000db1c:	fa610008 	swi	r19, r1, 8
2000db20:	12610000 	addk	r19, r1, r0
2000db24:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2000db28:	e8730010 	lwi	r3, r19, 16
2000db2c:	e8630010 	lwi	r3, r3, 16
2000db30:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000db34:	f8130004 	swi	r0, r19, 4
2000db38:	b8000028 	bri	40		// 2000db60
        fifo->read_inds[i] = 0;
2000db3c:	e8730010 	lwi	r3, r19, 16
2000db40:	e883000c 	lwi	r4, r3, 12
2000db44:	e8730004 	lwi	r3, r19, 4
2000db48:	64630402 	bslli	r3, r3, 2
2000db4c:	10641800 	addk	r3, r4, r3
2000db50:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000db54:	e8730004 	lwi	r3, r19, 4
2000db58:	30630001 	addik	r3, r3, 1
2000db5c:	f8730004 	swi	r3, r19, 4
2000db60:	e8730010 	lwi	r3, r19, 16
2000db64:	e8830008 	lwi	r4, r3, 8
2000db68:	e8730004 	lwi	r3, r19, 4
2000db6c:	16441803 	cmpu	r18, r4, r3
2000db70:	bc52ffcc 	blti	r18, -52		// 2000db3c
        fifo->read_inds[i] = 0;
    }
}
2000db74:	10330000 	addk	r1, r19, r0
2000db78:	ea610008 	lwi	r19, r1, 8
2000db7c:	3021000c 	addik	r1, r1, 12
2000db80:	b60f0008 	rtsd	r15, 8
2000db84:	80000000 	or	r0, r0, r0

2000db88 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000db88:	3021fff4 	addik	r1, r1, -12
2000db8c:	fa610008 	swi	r19, r1, 8
2000db90:	12610000 	addk	r19, r1, r0
2000db94:	f8b30010 	swi	r5, r19, 16
2000db98:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000db9c:	e8730010 	lwi	r3, r19, 16
2000dba0:	e8830004 	lwi	r4, r3, 4
2000dba4:	e8730010 	lwi	r3, r19, 16
2000dba8:	e8a3000c 	lwi	r5, r3, 12
2000dbac:	e8730014 	lwi	r3, r19, 20
2000dbb0:	64630402 	bslli	r3, r3, 2
2000dbb4:	10651800 	addk	r3, r5, r3
2000dbb8:	e8a30000 	lwi	r5, r3, 0
2000dbbc:	e8730010 	lwi	r3, r19, 16
2000dbc0:	e8630000 	lwi	r3, r3, 0
2000dbc4:	3063ffff 	addik	r3, r3, -1
2000dbc8:	84651800 	and	r3, r5, r3
2000dbcc:	10641800 	addk	r3, r4, r3
2000dbd0:	e0630000 	lbui	r3, r3, 0
2000dbd4:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000dbd8:	e8730010 	lwi	r3, r19, 16
2000dbdc:	e883000c 	lwi	r4, r3, 12
2000dbe0:	e8730014 	lwi	r3, r19, 20
2000dbe4:	64630402 	bslli	r3, r3, 2
2000dbe8:	10641800 	addk	r3, r4, r3
2000dbec:	e8830000 	lwi	r4, r3, 0
2000dbf0:	30840001 	addik	r4, r4, 1
2000dbf4:	f8830000 	swi	r4, r3, 0
    return value;
2000dbf8:	e0730004 	lbui	r3, r19, 4
2000dbfc:	90630060 	sext8	r3, r3
}
2000dc00:	10330000 	addk	r1, r19, r0
2000dc04:	ea610008 	lwi	r19, r1, 8
2000dc08:	3021000c 	addik	r1, r1, 12
2000dc0c:	b60f0008 	rtsd	r15, 8
2000dc10:	80000000 	or	r0, r0, r0

2000dc14 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000dc14:	3021fff8 	addik	r1, r1, -8
2000dc18:	fa610004 	swi	r19, r1, 4
2000dc1c:	12610000 	addk	r19, r1, r0
2000dc20:	f8b3000c 	swi	r5, r19, 12
2000dc24:	10660000 	addk	r3, r6, r0
2000dc28:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000dc2c:	e873000c 	lwi	r3, r19, 12
2000dc30:	e8830004 	lwi	r4, r3, 4
2000dc34:	e873000c 	lwi	r3, r19, 12
2000dc38:	e8630010 	lwi	r3, r3, 16
2000dc3c:	e8a30000 	lwi	r5, r3, 0
2000dc40:	e873000c 	lwi	r3, r19, 12
2000dc44:	e8630000 	lwi	r3, r3, 0
2000dc48:	3063ffff 	addik	r3, r3, -1
2000dc4c:	84651800 	and	r3, r5, r3
2000dc50:	10641800 	addk	r3, r4, r3
2000dc54:	e0930010 	lbui	r4, r19, 16
2000dc58:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2000dc5c:	e873000c 	lwi	r3, r19, 12
2000dc60:	e8630010 	lwi	r3, r3, 16
2000dc64:	e8830000 	lwi	r4, r3, 0
2000dc68:	30840001 	addik	r4, r4, 1
2000dc6c:	f8830000 	swi	r4, r3, 0
}
2000dc70:	10330000 	addk	r1, r19, r0
2000dc74:	ea610004 	lwi	r19, r1, 4
2000dc78:	30210008 	addik	r1, r1, 8
2000dc7c:	b60f0008 	rtsd	r15, 8
2000dc80:	80000000 	or	r0, r0, r0

2000dc84 <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000dc84:	3021fff8 	addik	r1, r1, -8
2000dc88:	fa610004 	swi	r19, r1, 4
2000dc8c:	12610000 	addk	r19, r1, r0
2000dc90:	f8b3000c 	swi	r5, r19, 12
2000dc94:	f8d30010 	swi	r6, r19, 16
2000dc98:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000dc9c:	e873000c 	lwi	r3, r19, 12
2000dca0:	e8630010 	lwi	r3, r3, 16
2000dca4:	e8830000 	lwi	r4, r3, 0
2000dca8:	e873000c 	lwi	r3, r19, 12
2000dcac:	e8a3000c 	lwi	r5, r3, 12
2000dcb0:	e8730010 	lwi	r3, r19, 16
2000dcb4:	64630402 	bslli	r3, r3, 2
2000dcb8:	10651800 	addk	r3, r5, r3
2000dcbc:	e8630000 	lwi	r3, r3, 0
2000dcc0:	14a32000 	rsubk	r5, r3, r4
2000dcc4:	30600001 	addik	r3, r0, 1
2000dcc8:	e8930014 	lwi	r4, r19, 20
2000dccc:	16442803 	cmpu	r18, r4, r5
2000dcd0:	bcb20008 	bgei	r18, 8		// 2000dcd8
2000dcd4:	10600000 	addk	r3, r0, r0
2000dcd8:	a46300ff 	andi	r3, r3, 255
}
2000dcdc:	10330000 	addk	r1, r19, r0
2000dce0:	ea610004 	lwi	r19, r1, 4
2000dce4:	30210008 	addik	r1, r1, 8
2000dce8:	b60f0008 	rtsd	r15, 8
2000dcec:	80000000 	or	r0, r0, r0

2000dcf0 <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000dcf0:	3021fff8 	addik	r1, r1, -8
2000dcf4:	fa610004 	swi	r19, r1, 4
2000dcf8:	12610000 	addk	r19, r1, r0
2000dcfc:	f8b3000c 	swi	r5, r19, 12
2000dd00:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000dd04:	e873000c 	lwi	r3, r19, 12
2000dd08:	e8630010 	lwi	r3, r3, 16
2000dd0c:	e8830000 	lwi	r4, r3, 0
2000dd10:	e873000c 	lwi	r3, r19, 12
2000dd14:	e8a3000c 	lwi	r5, r3, 12
2000dd18:	e8730010 	lwi	r3, r19, 16
2000dd1c:	64630402 	bslli	r3, r3, 2
2000dd20:	10651800 	addk	r3, r5, r3
2000dd24:	e8630000 	lwi	r3, r3, 0
2000dd28:	14632000 	rsubk	r3, r3, r4
}
2000dd2c:	10330000 	addk	r1, r19, r0
2000dd30:	ea610004 	lwi	r19, r1, 4
2000dd34:	30210008 	addik	r1, r1, 8
2000dd38:	b60f0008 	rtsd	r15, 8
2000dd3c:	80000000 	or	r0, r0, r0

2000dd40 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000dd40:	3021fff4 	addik	r1, r1, -12
2000dd44:	fa610008 	swi	r19, r1, 8
2000dd48:	12610000 	addk	r19, r1, r0
2000dd4c:	f8b30010 	swi	r5, r19, 16
2000dd50:	f8d30014 	swi	r6, r19, 20
2000dd54:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000dd58:	f8130004 	swi	r0, r19, 4
2000dd5c:	b800005c 	bri	92		// 2000ddb8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000dd60:	e8730010 	lwi	r3, r19, 16
2000dd64:	e8830000 	lwi	r4, r3, 0
2000dd68:	e8730010 	lwi	r3, r19, 16
2000dd6c:	e8a3000c 	lwi	r5, r3, 12
2000dd70:	e8730004 	lwi	r3, r19, 4
2000dd74:	64630402 	bslli	r3, r3, 2
2000dd78:	10651800 	addk	r3, r5, r3
2000dd7c:	e8a30000 	lwi	r5, r3, 0
2000dd80:	e8730010 	lwi	r3, r19, 16
2000dd84:	e8630010 	lwi	r3, r3, 16
2000dd88:	e8630000 	lwi	r3, r3, 0
2000dd8c:	14632800 	rsubk	r3, r3, r5
2000dd90:	10641800 	addk	r3, r4, r3
2000dd94:	30830001 	addik	r4, r3, 1
2000dd98:	e8730018 	lwi	r3, r19, 24
2000dd9c:	16441803 	cmpu	r18, r4, r3
2000dda0:	bc52000c 	blti	r18, 12		// 2000ddac
            return 0;
2000dda4:	10600000 	addk	r3, r0, r0
2000dda8:	b8000024 	bri	36		// 2000ddcc
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000ddac:	e8730004 	lwi	r3, r19, 4
2000ddb0:	30630001 	addik	r3, r3, 1
2000ddb4:	f8730004 	swi	r3, r19, 4
2000ddb8:	e8930004 	lwi	r4, r19, 4
2000ddbc:	e8730014 	lwi	r3, r19, 20
2000ddc0:	16432003 	cmpu	r18, r3, r4
2000ddc4:	bc52ff9c 	blti	r18, -100		// 2000dd60
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000ddc8:	30600001 	addik	r3, r0, 1
}
2000ddcc:	10330000 	addk	r1, r19, r0
2000ddd0:	ea610008 	lwi	r19, r1, 8
2000ddd4:	3021000c 	addik	r1, r1, 12
2000ddd8:	b60f0008 	rtsd	r15, 8
2000dddc:	80000000 	or	r0, r0, r0

2000dde0 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000dde0:	3021ffec 	addik	r1, r1, -20
2000dde4:	fa610010 	swi	r19, r1, 16
2000dde8:	12610000 	addk	r19, r1, r0
2000ddec:	f8b30018 	swi	r5, r19, 24
2000ddf0:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000ddf4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000ddf8:	f8130004 	swi	r0, r19, 4
2000ddfc:	b8000054 	bri	84		// 2000de50
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000de00:	e8730018 	lwi	r3, r19, 24
2000de04:	e8630010 	lwi	r3, r3, 16
2000de08:	e8830000 	lwi	r4, r3, 0
2000de0c:	e8730018 	lwi	r3, r19, 24
2000de10:	e8a3000c 	lwi	r5, r3, 12
2000de14:	e8730004 	lwi	r3, r19, 4
2000de18:	64630402 	bslli	r3, r3, 2
2000de1c:	10651800 	addk	r3, r5, r3
2000de20:	e8630000 	lwi	r3, r3, 0
2000de24:	14632000 	rsubk	r3, r3, r4
2000de28:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000de2c:	e8930008 	lwi	r4, r19, 8
2000de30:	e873000c 	lwi	r3, r19, 12
2000de34:	16441803 	cmpu	r18, r4, r3
2000de38:	bcb20008 	bgei	r18, 8		// 2000de40
2000de3c:	10640000 	addk	r3, r4, r0
2000de40:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000de44:	e8730004 	lwi	r3, r19, 4
2000de48:	30630001 	addik	r3, r3, 1
2000de4c:	f8730004 	swi	r3, r19, 4
2000de50:	e8930004 	lwi	r4, r19, 4
2000de54:	e873001c 	lwi	r3, r19, 28
2000de58:	16432003 	cmpu	r18, r3, r4
2000de5c:	bc52ffa4 	blti	r18, -92		// 2000de00
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000de60:	e8730018 	lwi	r3, r19, 24
2000de64:	e8830000 	lwi	r4, r3, 0
2000de68:	e8730008 	lwi	r3, r19, 8
2000de6c:	14632000 	rsubk	r3, r3, r4
}
2000de70:	10330000 	addk	r1, r19, r0
2000de74:	ea610010 	lwi	r19, r1, 16
2000de78:	30210014 	addik	r1, r1, 20
2000de7c:	b60f0008 	rtsd	r15, 8
2000de80:	80000000 	or	r0, r0, r0

2000de84 <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000de84:	3021fff4 	addik	r1, r1, -12
2000de88:	fa610008 	swi	r19, r1, 8
2000de8c:	12610000 	addk	r19, r1, r0
2000de90:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2000de94:	e8730010 	lwi	r3, r19, 16
2000de98:	e8630010 	lwi	r3, r3, 16
2000de9c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000dea0:	f8130004 	swi	r0, r19, 4
2000dea4:	b8000028 	bri	40		// 2000decc
        fifo->read_inds[i] = 0;
2000dea8:	e8730010 	lwi	r3, r19, 16
2000deac:	e883000c 	lwi	r4, r3, 12
2000deb0:	e8730004 	lwi	r3, r19, 4
2000deb4:	64630402 	bslli	r3, r3, 2
2000deb8:	10641800 	addk	r3, r4, r3
2000debc:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000dec0:	e8730004 	lwi	r3, r19, 4
2000dec4:	30630001 	addik	r3, r3, 1
2000dec8:	f8730004 	swi	r3, r19, 4
2000decc:	e8730010 	lwi	r3, r19, 16
2000ded0:	e8830008 	lwi	r4, r3, 8
2000ded4:	e8730004 	lwi	r3, r19, 4
2000ded8:	16441803 	cmpu	r18, r4, r3
2000dedc:	bc52ffcc 	blti	r18, -52		// 2000dea8
        fifo->read_inds[i] = 0;
    }
}
2000dee0:	10330000 	addk	r1, r19, r0
2000dee4:	ea610008 	lwi	r19, r1, 8
2000dee8:	3021000c 	addik	r1, r1, 12
2000deec:	b60f0008 	rtsd	r15, 8
2000def0:	80000000 	or	r0, r0, r0

2000def4 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000def4:	3021fff4 	addik	r1, r1, -12
2000def8:	fa610008 	swi	r19, r1, 8
2000defc:	12610000 	addk	r19, r1, r0
2000df00:	f8b30010 	swi	r5, r19, 16
2000df04:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000df08:	e8730010 	lwi	r3, r19, 16
2000df0c:	e8830004 	lwi	r4, r3, 4
2000df10:	e8730010 	lwi	r3, r19, 16
2000df14:	e8a3000c 	lwi	r5, r3, 12
2000df18:	e8730014 	lwi	r3, r19, 20
2000df1c:	64630402 	bslli	r3, r3, 2
2000df20:	10651800 	addk	r3, r5, r3
2000df24:	e8a30000 	lwi	r5, r3, 0
2000df28:	e8730010 	lwi	r3, r19, 16
2000df2c:	e8630000 	lwi	r3, r3, 0
2000df30:	3063ffff 	addik	r3, r3, -1
2000df34:	84651800 	and	r3, r5, r3
2000df38:	10631800 	addk	r3, r3, r3
2000df3c:	10641800 	addk	r3, r4, r3
2000df40:	e4630000 	lhui	r3, r3, 0
2000df44:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000df48:	e8730010 	lwi	r3, r19, 16
2000df4c:	e883000c 	lwi	r4, r3, 12
2000df50:	e8730014 	lwi	r3, r19, 20
2000df54:	64630402 	bslli	r3, r3, 2
2000df58:	10641800 	addk	r3, r4, r3
2000df5c:	e8830000 	lwi	r4, r3, 0
2000df60:	30840001 	addik	r4, r4, 1
2000df64:	f8830000 	swi	r4, r3, 0
    return value;
2000df68:	e4730004 	lhui	r3, r19, 4
2000df6c:	90630061 	sext16	r3, r3
}
2000df70:	10330000 	addk	r1, r19, r0
2000df74:	ea610008 	lwi	r19, r1, 8
2000df78:	3021000c 	addik	r1, r1, 12
2000df7c:	b60f0008 	rtsd	r15, 8
2000df80:	80000000 	or	r0, r0, r0

2000df84 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000df84:	3021fff8 	addik	r1, r1, -8
2000df88:	fa610004 	swi	r19, r1, 4
2000df8c:	12610000 	addk	r19, r1, r0
2000df90:	f8b3000c 	swi	r5, r19, 12
2000df94:	10660000 	addk	r3, r6, r0
2000df98:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000df9c:	e873000c 	lwi	r3, r19, 12
2000dfa0:	e8830004 	lwi	r4, r3, 4
2000dfa4:	e873000c 	lwi	r3, r19, 12
2000dfa8:	e8630010 	lwi	r3, r3, 16
2000dfac:	e8a30000 	lwi	r5, r3, 0
2000dfb0:	e873000c 	lwi	r3, r19, 12
2000dfb4:	e8630000 	lwi	r3, r3, 0
2000dfb8:	3063ffff 	addik	r3, r3, -1
2000dfbc:	84651800 	and	r3, r5, r3
2000dfc0:	10631800 	addk	r3, r3, r3
2000dfc4:	10641800 	addk	r3, r4, r3
2000dfc8:	e4930010 	lhui	r4, r19, 16
2000dfcc:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2000dfd0:	e873000c 	lwi	r3, r19, 12
2000dfd4:	e8630010 	lwi	r3, r3, 16
2000dfd8:	e8830000 	lwi	r4, r3, 0
2000dfdc:	30840001 	addik	r4, r4, 1
2000dfe0:	f8830000 	swi	r4, r3, 0
}
2000dfe4:	10330000 	addk	r1, r19, r0
2000dfe8:	ea610004 	lwi	r19, r1, 4
2000dfec:	30210008 	addik	r1, r1, 8
2000dff0:	b60f0008 	rtsd	r15, 8
2000dff4:	80000000 	or	r0, r0, r0

2000dff8 <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000dff8:	3021fff8 	addik	r1, r1, -8
2000dffc:	fa610004 	swi	r19, r1, 4
2000e000:	12610000 	addk	r19, r1, r0
2000e004:	f8b3000c 	swi	r5, r19, 12
2000e008:	f8d30010 	swi	r6, r19, 16
2000e00c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000e010:	e873000c 	lwi	r3, r19, 12
2000e014:	e8630010 	lwi	r3, r3, 16
2000e018:	e8830000 	lwi	r4, r3, 0
2000e01c:	e873000c 	lwi	r3, r19, 12
2000e020:	e8a3000c 	lwi	r5, r3, 12
2000e024:	e8730010 	lwi	r3, r19, 16
2000e028:	64630402 	bslli	r3, r3, 2
2000e02c:	10651800 	addk	r3, r5, r3
2000e030:	e8630000 	lwi	r3, r3, 0
2000e034:	14a32000 	rsubk	r5, r3, r4
2000e038:	30600001 	addik	r3, r0, 1
2000e03c:	e8930014 	lwi	r4, r19, 20
2000e040:	16442803 	cmpu	r18, r4, r5
2000e044:	bcb20008 	bgei	r18, 8		// 2000e04c
2000e048:	10600000 	addk	r3, r0, r0
2000e04c:	a46300ff 	andi	r3, r3, 255
}
2000e050:	10330000 	addk	r1, r19, r0
2000e054:	ea610004 	lwi	r19, r1, 4
2000e058:	30210008 	addik	r1, r1, 8
2000e05c:	b60f0008 	rtsd	r15, 8
2000e060:	80000000 	or	r0, r0, r0

2000e064 <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000e064:	3021fff8 	addik	r1, r1, -8
2000e068:	fa610004 	swi	r19, r1, 4
2000e06c:	12610000 	addk	r19, r1, r0
2000e070:	f8b3000c 	swi	r5, r19, 12
2000e074:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000e078:	e873000c 	lwi	r3, r19, 12
2000e07c:	e8630010 	lwi	r3, r3, 16
2000e080:	e8830000 	lwi	r4, r3, 0
2000e084:	e873000c 	lwi	r3, r19, 12
2000e088:	e8a3000c 	lwi	r5, r3, 12
2000e08c:	e8730010 	lwi	r3, r19, 16
2000e090:	64630402 	bslli	r3, r3, 2
2000e094:	10651800 	addk	r3, r5, r3
2000e098:	e8630000 	lwi	r3, r3, 0
2000e09c:	14632000 	rsubk	r3, r3, r4
}
2000e0a0:	10330000 	addk	r1, r19, r0
2000e0a4:	ea610004 	lwi	r19, r1, 4
2000e0a8:	30210008 	addik	r1, r1, 8
2000e0ac:	b60f0008 	rtsd	r15, 8
2000e0b0:	80000000 	or	r0, r0, r0

2000e0b4 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000e0b4:	3021fff4 	addik	r1, r1, -12
2000e0b8:	fa610008 	swi	r19, r1, 8
2000e0bc:	12610000 	addk	r19, r1, r0
2000e0c0:	f8b30010 	swi	r5, r19, 16
2000e0c4:	f8d30014 	swi	r6, r19, 20
2000e0c8:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000e0cc:	f8130004 	swi	r0, r19, 4
2000e0d0:	b800005c 	bri	92		// 2000e12c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000e0d4:	e8730010 	lwi	r3, r19, 16
2000e0d8:	e8830000 	lwi	r4, r3, 0
2000e0dc:	e8730010 	lwi	r3, r19, 16
2000e0e0:	e8a3000c 	lwi	r5, r3, 12
2000e0e4:	e8730004 	lwi	r3, r19, 4
2000e0e8:	64630402 	bslli	r3, r3, 2
2000e0ec:	10651800 	addk	r3, r5, r3
2000e0f0:	e8a30000 	lwi	r5, r3, 0
2000e0f4:	e8730010 	lwi	r3, r19, 16
2000e0f8:	e8630010 	lwi	r3, r3, 16
2000e0fc:	e8630000 	lwi	r3, r3, 0
2000e100:	14632800 	rsubk	r3, r3, r5
2000e104:	10641800 	addk	r3, r4, r3
2000e108:	30830001 	addik	r4, r3, 1
2000e10c:	e8730018 	lwi	r3, r19, 24
2000e110:	16441803 	cmpu	r18, r4, r3
2000e114:	bc52000c 	blti	r18, 12		// 2000e120
            return 0;
2000e118:	10600000 	addk	r3, r0, r0
2000e11c:	b8000024 	bri	36		// 2000e140
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000e120:	e8730004 	lwi	r3, r19, 4
2000e124:	30630001 	addik	r3, r3, 1
2000e128:	f8730004 	swi	r3, r19, 4
2000e12c:	e8930004 	lwi	r4, r19, 4
2000e130:	e8730014 	lwi	r3, r19, 20
2000e134:	16432003 	cmpu	r18, r3, r4
2000e138:	bc52ff9c 	blti	r18, -100		// 2000e0d4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000e13c:	30600001 	addik	r3, r0, 1
}
2000e140:	10330000 	addk	r1, r19, r0
2000e144:	ea610008 	lwi	r19, r1, 8
2000e148:	3021000c 	addik	r1, r1, 12
2000e14c:	b60f0008 	rtsd	r15, 8
2000e150:	80000000 	or	r0, r0, r0

2000e154 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000e154:	3021ffec 	addik	r1, r1, -20
2000e158:	fa610010 	swi	r19, r1, 16
2000e15c:	12610000 	addk	r19, r1, r0
2000e160:	f8b30018 	swi	r5, r19, 24
2000e164:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000e168:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000e16c:	f8130004 	swi	r0, r19, 4
2000e170:	b8000054 	bri	84		// 2000e1c4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000e174:	e8730018 	lwi	r3, r19, 24
2000e178:	e8630010 	lwi	r3, r3, 16
2000e17c:	e8830000 	lwi	r4, r3, 0
2000e180:	e8730018 	lwi	r3, r19, 24
2000e184:	e8a3000c 	lwi	r5, r3, 12
2000e188:	e8730004 	lwi	r3, r19, 4
2000e18c:	64630402 	bslli	r3, r3, 2
2000e190:	10651800 	addk	r3, r5, r3
2000e194:	e8630000 	lwi	r3, r3, 0
2000e198:	14632000 	rsubk	r3, r3, r4
2000e19c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000e1a0:	e8930008 	lwi	r4, r19, 8
2000e1a4:	e873000c 	lwi	r3, r19, 12
2000e1a8:	16441803 	cmpu	r18, r4, r3
2000e1ac:	bcb20008 	bgei	r18, 8		// 2000e1b4
2000e1b0:	10640000 	addk	r3, r4, r0
2000e1b4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000e1b8:	e8730004 	lwi	r3, r19, 4
2000e1bc:	30630001 	addik	r3, r3, 1
2000e1c0:	f8730004 	swi	r3, r19, 4
2000e1c4:	e8930004 	lwi	r4, r19, 4
2000e1c8:	e873001c 	lwi	r3, r19, 28
2000e1cc:	16432003 	cmpu	r18, r3, r4
2000e1d0:	bc52ffa4 	blti	r18, -92		// 2000e174
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000e1d4:	e8730018 	lwi	r3, r19, 24
2000e1d8:	e8830000 	lwi	r4, r3, 0
2000e1dc:	e8730008 	lwi	r3, r19, 8
2000e1e0:	14632000 	rsubk	r3, r3, r4
}
2000e1e4:	10330000 	addk	r1, r19, r0
2000e1e8:	ea610010 	lwi	r19, r1, 16
2000e1ec:	30210014 	addik	r1, r1, 20
2000e1f0:	b60f0008 	rtsd	r15, 8
2000e1f4:	80000000 	or	r0, r0, r0

2000e1f8 <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000e1f8:	3021fff4 	addik	r1, r1, -12
2000e1fc:	fa610008 	swi	r19, r1, 8
2000e200:	12610000 	addk	r19, r1, r0
2000e204:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2000e208:	e8730010 	lwi	r3, r19, 16
2000e20c:	e8630010 	lwi	r3, r3, 16
2000e210:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000e214:	f8130004 	swi	r0, r19, 4
2000e218:	b8000028 	bri	40		// 2000e240
        fifo->read_inds[i] = 0;
2000e21c:	e8730010 	lwi	r3, r19, 16
2000e220:	e883000c 	lwi	r4, r3, 12
2000e224:	e8730004 	lwi	r3, r19, 4
2000e228:	64630402 	bslli	r3, r3, 2
2000e22c:	10641800 	addk	r3, r4, r3
2000e230:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000e234:	e8730004 	lwi	r3, r19, 4
2000e238:	30630001 	addik	r3, r3, 1
2000e23c:	f8730004 	swi	r3, r19, 4
2000e240:	e8730010 	lwi	r3, r19, 16
2000e244:	e8830008 	lwi	r4, r3, 8
2000e248:	e8730004 	lwi	r3, r19, 4
2000e24c:	16441803 	cmpu	r18, r4, r3
2000e250:	bc52ffcc 	blti	r18, -52		// 2000e21c
        fifo->read_inds[i] = 0;
    }
}
2000e254:	10330000 	addk	r1, r19, r0
2000e258:	ea610008 	lwi	r19, r1, 8
2000e25c:	3021000c 	addik	r1, r1, 12
2000e260:	b60f0008 	rtsd	r15, 8
2000e264:	80000000 	or	r0, r0, r0

2000e268 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000e268:	3021fff4 	addik	r1, r1, -12
2000e26c:	fa610008 	swi	r19, r1, 8
2000e270:	12610000 	addk	r19, r1, r0
2000e274:	f8b30010 	swi	r5, r19, 16
2000e278:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000e27c:	e8730010 	lwi	r3, r19, 16
2000e280:	e8830004 	lwi	r4, r3, 4
2000e284:	e8730010 	lwi	r3, r19, 16
2000e288:	e8a3000c 	lwi	r5, r3, 12
2000e28c:	e8730014 	lwi	r3, r19, 20
2000e290:	64630402 	bslli	r3, r3, 2
2000e294:	10651800 	addk	r3, r5, r3
2000e298:	e8a30000 	lwi	r5, r3, 0
2000e29c:	e8730010 	lwi	r3, r19, 16
2000e2a0:	e8630000 	lwi	r3, r3, 0
2000e2a4:	3063ffff 	addik	r3, r3, -1
2000e2a8:	84651800 	and	r3, r5, r3
2000e2ac:	64630402 	bslli	r3, r3, 2
2000e2b0:	10641800 	addk	r3, r4, r3
2000e2b4:	e8630000 	lwi	r3, r3, 0
2000e2b8:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000e2bc:	e8730010 	lwi	r3, r19, 16
2000e2c0:	e883000c 	lwi	r4, r3, 12
2000e2c4:	e8730014 	lwi	r3, r19, 20
2000e2c8:	64630402 	bslli	r3, r3, 2
2000e2cc:	10641800 	addk	r3, r4, r3
2000e2d0:	e8830000 	lwi	r4, r3, 0
2000e2d4:	30840001 	addik	r4, r4, 1
2000e2d8:	f8830000 	swi	r4, r3, 0
    return value;
2000e2dc:	e8730004 	lwi	r3, r19, 4
}
2000e2e0:	10330000 	addk	r1, r19, r0
2000e2e4:	ea610008 	lwi	r19, r1, 8
2000e2e8:	3021000c 	addik	r1, r1, 12
2000e2ec:	b60f0008 	rtsd	r15, 8
2000e2f0:	80000000 	or	r0, r0, r0

2000e2f4 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000e2f4:	3021fff8 	addik	r1, r1, -8
2000e2f8:	fa610004 	swi	r19, r1, 4
2000e2fc:	12610000 	addk	r19, r1, r0
2000e300:	f8b3000c 	swi	r5, r19, 12
2000e304:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000e308:	e873000c 	lwi	r3, r19, 12
2000e30c:	e8830004 	lwi	r4, r3, 4
2000e310:	e873000c 	lwi	r3, r19, 12
2000e314:	e8630010 	lwi	r3, r3, 16
2000e318:	e8a30000 	lwi	r5, r3, 0
2000e31c:	e873000c 	lwi	r3, r19, 12
2000e320:	e8630000 	lwi	r3, r3, 0
2000e324:	3063ffff 	addik	r3, r3, -1
2000e328:	84651800 	and	r3, r5, r3
2000e32c:	64630402 	bslli	r3, r3, 2
2000e330:	10641800 	addk	r3, r4, r3
2000e334:	e8930010 	lwi	r4, r19, 16
2000e338:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2000e33c:	e873000c 	lwi	r3, r19, 12
2000e340:	e8630010 	lwi	r3, r3, 16
2000e344:	e8830000 	lwi	r4, r3, 0
2000e348:	30840001 	addik	r4, r4, 1
2000e34c:	f8830000 	swi	r4, r3, 0
}
2000e350:	10330000 	addk	r1, r19, r0
2000e354:	ea610004 	lwi	r19, r1, 4
2000e358:	30210008 	addik	r1, r1, 8
2000e35c:	b60f0008 	rtsd	r15, 8
2000e360:	80000000 	or	r0, r0, r0

2000e364 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000e364:	3021fff8 	addik	r1, r1, -8
2000e368:	fa610004 	swi	r19, r1, 4
2000e36c:	12610000 	addk	r19, r1, r0
2000e370:	f8b3000c 	swi	r5, r19, 12
2000e374:	f8d30010 	swi	r6, r19, 16
2000e378:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000e37c:	e873000c 	lwi	r3, r19, 12
2000e380:	e8630010 	lwi	r3, r3, 16
2000e384:	e8830000 	lwi	r4, r3, 0
2000e388:	e873000c 	lwi	r3, r19, 12
2000e38c:	e8a3000c 	lwi	r5, r3, 12
2000e390:	e8730010 	lwi	r3, r19, 16
2000e394:	64630402 	bslli	r3, r3, 2
2000e398:	10651800 	addk	r3, r5, r3
2000e39c:	e8630000 	lwi	r3, r3, 0
2000e3a0:	14a32000 	rsubk	r5, r3, r4
2000e3a4:	30600001 	addik	r3, r0, 1
2000e3a8:	e8930014 	lwi	r4, r19, 20
2000e3ac:	16442803 	cmpu	r18, r4, r5
2000e3b0:	bcb20008 	bgei	r18, 8		// 2000e3b8
2000e3b4:	10600000 	addk	r3, r0, r0
2000e3b8:	a46300ff 	andi	r3, r3, 255
}
2000e3bc:	10330000 	addk	r1, r19, r0
2000e3c0:	ea610004 	lwi	r19, r1, 4
2000e3c4:	30210008 	addik	r1, r1, 8
2000e3c8:	b60f0008 	rtsd	r15, 8
2000e3cc:	80000000 	or	r0, r0, r0

2000e3d0 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000e3d0:	3021fff8 	addik	r1, r1, -8
2000e3d4:	fa610004 	swi	r19, r1, 4
2000e3d8:	12610000 	addk	r19, r1, r0
2000e3dc:	f8b3000c 	swi	r5, r19, 12
2000e3e0:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000e3e4:	e873000c 	lwi	r3, r19, 12
2000e3e8:	e8630010 	lwi	r3, r3, 16
2000e3ec:	e8830000 	lwi	r4, r3, 0
2000e3f0:	e873000c 	lwi	r3, r19, 12
2000e3f4:	e8a3000c 	lwi	r5, r3, 12
2000e3f8:	e8730010 	lwi	r3, r19, 16
2000e3fc:	64630402 	bslli	r3, r3, 2
2000e400:	10651800 	addk	r3, r5, r3
2000e404:	e8630000 	lwi	r3, r3, 0
2000e408:	14632000 	rsubk	r3, r3, r4
}
2000e40c:	10330000 	addk	r1, r19, r0
2000e410:	ea610004 	lwi	r19, r1, 4
2000e414:	30210008 	addik	r1, r1, 8
2000e418:	b60f0008 	rtsd	r15, 8
2000e41c:	80000000 	or	r0, r0, r0

2000e420 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000e420:	3021fff4 	addik	r1, r1, -12
2000e424:	fa610008 	swi	r19, r1, 8
2000e428:	12610000 	addk	r19, r1, r0
2000e42c:	f8b30010 	swi	r5, r19, 16
2000e430:	f8d30014 	swi	r6, r19, 20
2000e434:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000e438:	f8130004 	swi	r0, r19, 4
2000e43c:	b800005c 	bri	92		// 2000e498
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000e440:	e8730010 	lwi	r3, r19, 16
2000e444:	e8830000 	lwi	r4, r3, 0
2000e448:	e8730010 	lwi	r3, r19, 16
2000e44c:	e8a3000c 	lwi	r5, r3, 12
2000e450:	e8730004 	lwi	r3, r19, 4
2000e454:	64630402 	bslli	r3, r3, 2
2000e458:	10651800 	addk	r3, r5, r3
2000e45c:	e8a30000 	lwi	r5, r3, 0
2000e460:	e8730010 	lwi	r3, r19, 16
2000e464:	e8630010 	lwi	r3, r3, 16
2000e468:	e8630000 	lwi	r3, r3, 0
2000e46c:	14632800 	rsubk	r3, r3, r5
2000e470:	10641800 	addk	r3, r4, r3
2000e474:	30830001 	addik	r4, r3, 1
2000e478:	e8730018 	lwi	r3, r19, 24
2000e47c:	16441803 	cmpu	r18, r4, r3
2000e480:	bc52000c 	blti	r18, 12		// 2000e48c
            return 0;
2000e484:	10600000 	addk	r3, r0, r0
2000e488:	b8000024 	bri	36		// 2000e4ac
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000e48c:	e8730004 	lwi	r3, r19, 4
2000e490:	30630001 	addik	r3, r3, 1
2000e494:	f8730004 	swi	r3, r19, 4
2000e498:	e8930004 	lwi	r4, r19, 4
2000e49c:	e8730014 	lwi	r3, r19, 20
2000e4a0:	16432003 	cmpu	r18, r3, r4
2000e4a4:	bc52ff9c 	blti	r18, -100		// 2000e440
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000e4a8:	30600001 	addik	r3, r0, 1
}
2000e4ac:	10330000 	addk	r1, r19, r0
2000e4b0:	ea610008 	lwi	r19, r1, 8
2000e4b4:	3021000c 	addik	r1, r1, 12
2000e4b8:	b60f0008 	rtsd	r15, 8
2000e4bc:	80000000 	or	r0, r0, r0

2000e4c0 <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000e4c0:	3021ffec 	addik	r1, r1, -20
2000e4c4:	fa610010 	swi	r19, r1, 16
2000e4c8:	12610000 	addk	r19, r1, r0
2000e4cc:	f8b30018 	swi	r5, r19, 24
2000e4d0:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000e4d4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000e4d8:	f8130004 	swi	r0, r19, 4
2000e4dc:	b8000054 	bri	84		// 2000e530
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000e4e0:	e8730018 	lwi	r3, r19, 24
2000e4e4:	e8630010 	lwi	r3, r3, 16
2000e4e8:	e8830000 	lwi	r4, r3, 0
2000e4ec:	e8730018 	lwi	r3, r19, 24
2000e4f0:	e8a3000c 	lwi	r5, r3, 12
2000e4f4:	e8730004 	lwi	r3, r19, 4
2000e4f8:	64630402 	bslli	r3, r3, 2
2000e4fc:	10651800 	addk	r3, r5, r3
2000e500:	e8630000 	lwi	r3, r3, 0
2000e504:	14632000 	rsubk	r3, r3, r4
2000e508:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000e50c:	e8930008 	lwi	r4, r19, 8
2000e510:	e873000c 	lwi	r3, r19, 12
2000e514:	16441803 	cmpu	r18, r4, r3
2000e518:	bcb20008 	bgei	r18, 8		// 2000e520
2000e51c:	10640000 	addk	r3, r4, r0
2000e520:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000e524:	e8730004 	lwi	r3, r19, 4
2000e528:	30630001 	addik	r3, r3, 1
2000e52c:	f8730004 	swi	r3, r19, 4
2000e530:	e8930004 	lwi	r4, r19, 4
2000e534:	e873001c 	lwi	r3, r19, 28
2000e538:	16432003 	cmpu	r18, r3, r4
2000e53c:	bc52ffa4 	blti	r18, -92		// 2000e4e0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000e540:	e8730018 	lwi	r3, r19, 24
2000e544:	e8830000 	lwi	r4, r3, 0
2000e548:	e8730008 	lwi	r3, r19, 8
2000e54c:	14632000 	rsubk	r3, r3, r4
}
2000e550:	10330000 	addk	r1, r19, r0
2000e554:	ea610010 	lwi	r19, r1, 16
2000e558:	30210014 	addik	r1, r1, 20
2000e55c:	b60f0008 	rtsd	r15, 8
2000e560:	80000000 	or	r0, r0, r0

2000e564 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000e564:	3021fff4 	addik	r1, r1, -12
2000e568:	fa610008 	swi	r19, r1, 8
2000e56c:	12610000 	addk	r19, r1, r0
2000e570:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2000e574:	e8730010 	lwi	r3, r19, 16
2000e578:	e8630010 	lwi	r3, r3, 16
2000e57c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000e580:	f8130004 	swi	r0, r19, 4
2000e584:	b8000028 	bri	40		// 2000e5ac
        fifo->read_inds[i] = 0;
2000e588:	e8730010 	lwi	r3, r19, 16
2000e58c:	e883000c 	lwi	r4, r3, 12
2000e590:	e8730004 	lwi	r3, r19, 4
2000e594:	64630402 	bslli	r3, r3, 2
2000e598:	10641800 	addk	r3, r4, r3
2000e59c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000e5a0:	e8730004 	lwi	r3, r19, 4
2000e5a4:	30630001 	addik	r3, r3, 1
2000e5a8:	f8730004 	swi	r3, r19, 4
2000e5ac:	e8730010 	lwi	r3, r19, 16
2000e5b0:	e8830008 	lwi	r4, r3, 8
2000e5b4:	e8730004 	lwi	r3, r19, 4
2000e5b8:	16441803 	cmpu	r18, r4, r3
2000e5bc:	bc52ffcc 	blti	r18, -52		// 2000e588
        fifo->read_inds[i] = 0;
    }
}
2000e5c0:	10330000 	addk	r1, r19, r0
2000e5c4:	ea610008 	lwi	r19, r1, 8
2000e5c8:	3021000c 	addik	r1, r1, 12
2000e5cc:	b60f0008 	rtsd	r15, 8
2000e5d0:	80000000 	or	r0, r0, r0

2000e5d4 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000e5d4:	3021fff0 	addik	r1, r1, -16
2000e5d8:	fa61000c 	swi	r19, r1, 12
2000e5dc:	12610000 	addk	r19, r1, r0
2000e5e0:	f8b30014 	swi	r5, r19, 20
2000e5e4:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000e5e8:	e8730014 	lwi	r3, r19, 20
2000e5ec:	e8830004 	lwi	r4, r3, 4
2000e5f0:	e8730014 	lwi	r3, r19, 20
2000e5f4:	e8a3000c 	lwi	r5, r3, 12
2000e5f8:	e8730018 	lwi	r3, r19, 24
2000e5fc:	64630402 	bslli	r3, r3, 2
2000e600:	10651800 	addk	r3, r5, r3
2000e604:	e8a30000 	lwi	r5, r3, 0
2000e608:	e8730014 	lwi	r3, r19, 20
2000e60c:	e8630000 	lwi	r3, r3, 0
2000e610:	3063ffff 	addik	r3, r3, -1
2000e614:	84651800 	and	r3, r5, r3
2000e618:	64630403 	bslli	r3, r3, 3
2000e61c:	10641800 	addk	r3, r4, r3
2000e620:	e8830000 	lwi	r4, r3, 0
2000e624:	e8a30004 	lwi	r5, r3, 4
2000e628:	f8930004 	swi	r4, r19, 4
2000e62c:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2000e630:	e8730014 	lwi	r3, r19, 20
2000e634:	e883000c 	lwi	r4, r3, 12
2000e638:	e8730018 	lwi	r3, r19, 24
2000e63c:	64630402 	bslli	r3, r3, 2
2000e640:	10641800 	addk	r3, r4, r3
2000e644:	e8830000 	lwi	r4, r3, 0
2000e648:	30840001 	addik	r4, r4, 1
2000e64c:	f8830000 	swi	r4, r3, 0
    return value;
2000e650:	e8930004 	lwi	r4, r19, 4
2000e654:	e8b30008 	lwi	r5, r19, 8
}
2000e658:	10640000 	addk	r3, r4, r0
2000e65c:	10850000 	addk	r4, r5, r0
2000e660:	10330000 	addk	r1, r19, r0
2000e664:	ea61000c 	lwi	r19, r1, 12
2000e668:	30210010 	addik	r1, r1, 16
2000e66c:	b60f0008 	rtsd	r15, 8
2000e670:	80000000 	or	r0, r0, r0

2000e674 <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000e674:	3021fff8 	addik	r1, r1, -8
2000e678:	fa610004 	swi	r19, r1, 4
2000e67c:	12610000 	addk	r19, r1, r0
2000e680:	f8b3000c 	swi	r5, r19, 12
2000e684:	f8d30010 	swi	r6, r19, 16
2000e688:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000e68c:	e873000c 	lwi	r3, r19, 12
2000e690:	e8830004 	lwi	r4, r3, 4
2000e694:	e873000c 	lwi	r3, r19, 12
2000e698:	e8630010 	lwi	r3, r3, 16
2000e69c:	e8a30000 	lwi	r5, r3, 0
2000e6a0:	e873000c 	lwi	r3, r19, 12
2000e6a4:	e8630000 	lwi	r3, r3, 0
2000e6a8:	3063ffff 	addik	r3, r3, -1
2000e6ac:	84651800 	and	r3, r5, r3
2000e6b0:	64630403 	bslli	r3, r3, 3
2000e6b4:	10641800 	addk	r3, r4, r3
2000e6b8:	e8930010 	lwi	r4, r19, 16
2000e6bc:	e8b30014 	lwi	r5, r19, 20
2000e6c0:	f8830000 	swi	r4, r3, 0
2000e6c4:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2000e6c8:	e873000c 	lwi	r3, r19, 12
2000e6cc:	e8630010 	lwi	r3, r3, 16
2000e6d0:	e8830000 	lwi	r4, r3, 0
2000e6d4:	30840001 	addik	r4, r4, 1
2000e6d8:	f8830000 	swi	r4, r3, 0
}
2000e6dc:	10330000 	addk	r1, r19, r0
2000e6e0:	ea610004 	lwi	r19, r1, 4
2000e6e4:	30210008 	addik	r1, r1, 8
2000e6e8:	b60f0008 	rtsd	r15, 8
2000e6ec:	80000000 	or	r0, r0, r0

2000e6f0 <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000e6f0:	3021fff8 	addik	r1, r1, -8
2000e6f4:	fa610004 	swi	r19, r1, 4
2000e6f8:	12610000 	addk	r19, r1, r0
2000e6fc:	f8b3000c 	swi	r5, r19, 12
2000e700:	f8d30010 	swi	r6, r19, 16
2000e704:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000e708:	e873000c 	lwi	r3, r19, 12
2000e70c:	e8630010 	lwi	r3, r3, 16
2000e710:	e8830000 	lwi	r4, r3, 0
2000e714:	e873000c 	lwi	r3, r19, 12
2000e718:	e8a3000c 	lwi	r5, r3, 12
2000e71c:	e8730010 	lwi	r3, r19, 16
2000e720:	64630402 	bslli	r3, r3, 2
2000e724:	10651800 	addk	r3, r5, r3
2000e728:	e8630000 	lwi	r3, r3, 0
2000e72c:	14a32000 	rsubk	r5, r3, r4
2000e730:	30600001 	addik	r3, r0, 1
2000e734:	e8930014 	lwi	r4, r19, 20
2000e738:	16442803 	cmpu	r18, r4, r5
2000e73c:	bcb20008 	bgei	r18, 8		// 2000e744
2000e740:	10600000 	addk	r3, r0, r0
2000e744:	a46300ff 	andi	r3, r3, 255
}
2000e748:	10330000 	addk	r1, r19, r0
2000e74c:	ea610004 	lwi	r19, r1, 4
2000e750:	30210008 	addik	r1, r1, 8
2000e754:	b60f0008 	rtsd	r15, 8
2000e758:	80000000 	or	r0, r0, r0

2000e75c <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000e75c:	3021fff8 	addik	r1, r1, -8
2000e760:	fa610004 	swi	r19, r1, 4
2000e764:	12610000 	addk	r19, r1, r0
2000e768:	f8b3000c 	swi	r5, r19, 12
2000e76c:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000e770:	e873000c 	lwi	r3, r19, 12
2000e774:	e8630010 	lwi	r3, r3, 16
2000e778:	e8830000 	lwi	r4, r3, 0
2000e77c:	e873000c 	lwi	r3, r19, 12
2000e780:	e8a3000c 	lwi	r5, r3, 12
2000e784:	e8730010 	lwi	r3, r19, 16
2000e788:	64630402 	bslli	r3, r3, 2
2000e78c:	10651800 	addk	r3, r5, r3
2000e790:	e8630000 	lwi	r3, r3, 0
2000e794:	14632000 	rsubk	r3, r3, r4
}
2000e798:	10330000 	addk	r1, r19, r0
2000e79c:	ea610004 	lwi	r19, r1, 4
2000e7a0:	30210008 	addik	r1, r1, 8
2000e7a4:	b60f0008 	rtsd	r15, 8
2000e7a8:	80000000 	or	r0, r0, r0

2000e7ac <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000e7ac:	3021fff4 	addik	r1, r1, -12
2000e7b0:	fa610008 	swi	r19, r1, 8
2000e7b4:	12610000 	addk	r19, r1, r0
2000e7b8:	f8b30010 	swi	r5, r19, 16
2000e7bc:	f8d30014 	swi	r6, r19, 20
2000e7c0:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000e7c4:	f8130004 	swi	r0, r19, 4
2000e7c8:	b800005c 	bri	92		// 2000e824
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000e7cc:	e8730010 	lwi	r3, r19, 16
2000e7d0:	e8830000 	lwi	r4, r3, 0
2000e7d4:	e8730010 	lwi	r3, r19, 16
2000e7d8:	e8a3000c 	lwi	r5, r3, 12
2000e7dc:	e8730004 	lwi	r3, r19, 4
2000e7e0:	64630402 	bslli	r3, r3, 2
2000e7e4:	10651800 	addk	r3, r5, r3
2000e7e8:	e8a30000 	lwi	r5, r3, 0
2000e7ec:	e8730010 	lwi	r3, r19, 16
2000e7f0:	e8630010 	lwi	r3, r3, 16
2000e7f4:	e8630000 	lwi	r3, r3, 0
2000e7f8:	14632800 	rsubk	r3, r3, r5
2000e7fc:	10641800 	addk	r3, r4, r3
2000e800:	30830001 	addik	r4, r3, 1
2000e804:	e8730018 	lwi	r3, r19, 24
2000e808:	16441803 	cmpu	r18, r4, r3
2000e80c:	bc52000c 	blti	r18, 12		// 2000e818
            return 0;
2000e810:	10600000 	addk	r3, r0, r0
2000e814:	b8000024 	bri	36		// 2000e838
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000e818:	e8730004 	lwi	r3, r19, 4
2000e81c:	30630001 	addik	r3, r3, 1
2000e820:	f8730004 	swi	r3, r19, 4
2000e824:	e8930004 	lwi	r4, r19, 4
2000e828:	e8730014 	lwi	r3, r19, 20
2000e82c:	16432003 	cmpu	r18, r3, r4
2000e830:	bc52ff9c 	blti	r18, -100		// 2000e7cc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000e834:	30600001 	addik	r3, r0, 1
}
2000e838:	10330000 	addk	r1, r19, r0
2000e83c:	ea610008 	lwi	r19, r1, 8
2000e840:	3021000c 	addik	r1, r1, 12
2000e844:	b60f0008 	rtsd	r15, 8
2000e848:	80000000 	or	r0, r0, r0

2000e84c <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000e84c:	3021ffec 	addik	r1, r1, -20
2000e850:	fa610010 	swi	r19, r1, 16
2000e854:	12610000 	addk	r19, r1, r0
2000e858:	f8b30018 	swi	r5, r19, 24
2000e85c:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000e860:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000e864:	f8130004 	swi	r0, r19, 4
2000e868:	b8000054 	bri	84		// 2000e8bc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000e86c:	e8730018 	lwi	r3, r19, 24
2000e870:	e8630010 	lwi	r3, r3, 16
2000e874:	e8830000 	lwi	r4, r3, 0
2000e878:	e8730018 	lwi	r3, r19, 24
2000e87c:	e8a3000c 	lwi	r5, r3, 12
2000e880:	e8730004 	lwi	r3, r19, 4
2000e884:	64630402 	bslli	r3, r3, 2
2000e888:	10651800 	addk	r3, r5, r3
2000e88c:	e8630000 	lwi	r3, r3, 0
2000e890:	14632000 	rsubk	r3, r3, r4
2000e894:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000e898:	e8930008 	lwi	r4, r19, 8
2000e89c:	e873000c 	lwi	r3, r19, 12
2000e8a0:	16441803 	cmpu	r18, r4, r3
2000e8a4:	bcb20008 	bgei	r18, 8		// 2000e8ac
2000e8a8:	10640000 	addk	r3, r4, r0
2000e8ac:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000e8b0:	e8730004 	lwi	r3, r19, 4
2000e8b4:	30630001 	addik	r3, r3, 1
2000e8b8:	f8730004 	swi	r3, r19, 4
2000e8bc:	e8930004 	lwi	r4, r19, 4
2000e8c0:	e873001c 	lwi	r3, r19, 28
2000e8c4:	16432003 	cmpu	r18, r3, r4
2000e8c8:	bc52ffa4 	blti	r18, -92		// 2000e86c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000e8cc:	e8730018 	lwi	r3, r19, 24
2000e8d0:	e8830000 	lwi	r4, r3, 0
2000e8d4:	e8730008 	lwi	r3, r19, 8
2000e8d8:	14632000 	rsubk	r3, r3, r4
}
2000e8dc:	10330000 	addk	r1, r19, r0
2000e8e0:	ea610010 	lwi	r19, r1, 16
2000e8e4:	30210014 	addik	r1, r1, 20
2000e8e8:	b60f0008 	rtsd	r15, 8
2000e8ec:	80000000 	or	r0, r0, r0

2000e8f0 <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000e8f0:	3021fff4 	addik	r1, r1, -12
2000e8f4:	fa610008 	swi	r19, r1, 8
2000e8f8:	12610000 	addk	r19, r1, r0
2000e8fc:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2000e900:	e8730010 	lwi	r3, r19, 16
2000e904:	e8630010 	lwi	r3, r3, 16
2000e908:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000e90c:	f8130004 	swi	r0, r19, 4
2000e910:	b8000028 	bri	40		// 2000e938
        fifo->read_inds[i] = 0;
2000e914:	e8730010 	lwi	r3, r19, 16
2000e918:	e883000c 	lwi	r4, r3, 12
2000e91c:	e8730004 	lwi	r3, r19, 4
2000e920:	64630402 	bslli	r3, r3, 2
2000e924:	10641800 	addk	r3, r4, r3
2000e928:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000e92c:	e8730004 	lwi	r3, r19, 4
2000e930:	30630001 	addik	r3, r3, 1
2000e934:	f8730004 	swi	r3, r19, 4
2000e938:	e8730010 	lwi	r3, r19, 16
2000e93c:	e8830008 	lwi	r4, r3, 8
2000e940:	e8730004 	lwi	r3, r19, 4
2000e944:	16441803 	cmpu	r18, r4, r3
2000e948:	bc52ffcc 	blti	r18, -52		// 2000e914
        fifo->read_inds[i] = 0;
    }
}
2000e94c:	10330000 	addk	r1, r19, r0
2000e950:	ea610008 	lwi	r19, r1, 8
2000e954:	3021000c 	addik	r1, r1, 12
2000e958:	b60f0008 	rtsd	r15, 8
2000e95c:	80000000 	or	r0, r0, r0

2000e960 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000e960:	3021fff4 	addik	r1, r1, -12
2000e964:	fa610008 	swi	r19, r1, 8
2000e968:	12610000 	addk	r19, r1, r0
2000e96c:	f8b30010 	swi	r5, r19, 16
2000e970:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000e974:	e8730010 	lwi	r3, r19, 16
2000e978:	e8830004 	lwi	r4, r3, 4
2000e97c:	e8730010 	lwi	r3, r19, 16
2000e980:	e8a3000c 	lwi	r5, r3, 12
2000e984:	e8730014 	lwi	r3, r19, 20
2000e988:	64630402 	bslli	r3, r3, 2
2000e98c:	10651800 	addk	r3, r5, r3
2000e990:	e8a30000 	lwi	r5, r3, 0
2000e994:	e8730010 	lwi	r3, r19, 16
2000e998:	e8630000 	lwi	r3, r3, 0
2000e99c:	3063ffff 	addik	r3, r3, -1
2000e9a0:	84651800 	and	r3, r5, r3
2000e9a4:	10641800 	addk	r3, r4, r3
2000e9a8:	e0630000 	lbui	r3, r3, 0
2000e9ac:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000e9b0:	e8730010 	lwi	r3, r19, 16
2000e9b4:	e883000c 	lwi	r4, r3, 12
2000e9b8:	e8730014 	lwi	r3, r19, 20
2000e9bc:	64630402 	bslli	r3, r3, 2
2000e9c0:	10641800 	addk	r3, r4, r3
2000e9c4:	e8830000 	lwi	r4, r3, 0
2000e9c8:	30840001 	addik	r4, r4, 1
2000e9cc:	f8830000 	swi	r4, r3, 0
    return value;
2000e9d0:	e0730004 	lbui	r3, r19, 4
}
2000e9d4:	10330000 	addk	r1, r19, r0
2000e9d8:	ea610008 	lwi	r19, r1, 8
2000e9dc:	3021000c 	addik	r1, r1, 12
2000e9e0:	b60f0008 	rtsd	r15, 8
2000e9e4:	80000000 	or	r0, r0, r0

2000e9e8 <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000e9e8:	3021fff8 	addik	r1, r1, -8
2000e9ec:	fa610004 	swi	r19, r1, 4
2000e9f0:	12610000 	addk	r19, r1, r0
2000e9f4:	f8b3000c 	swi	r5, r19, 12
2000e9f8:	10660000 	addk	r3, r6, r0
2000e9fc:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000ea00:	e873000c 	lwi	r3, r19, 12
2000ea04:	e8830004 	lwi	r4, r3, 4
2000ea08:	e873000c 	lwi	r3, r19, 12
2000ea0c:	e8630010 	lwi	r3, r3, 16
2000ea10:	e8a30000 	lwi	r5, r3, 0
2000ea14:	e873000c 	lwi	r3, r19, 12
2000ea18:	e8630000 	lwi	r3, r3, 0
2000ea1c:	3063ffff 	addik	r3, r3, -1
2000ea20:	84651800 	and	r3, r5, r3
2000ea24:	10641800 	addk	r3, r4, r3
2000ea28:	e0930010 	lbui	r4, r19, 16
2000ea2c:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2000ea30:	e873000c 	lwi	r3, r19, 12
2000ea34:	e8630010 	lwi	r3, r3, 16
2000ea38:	e8830000 	lwi	r4, r3, 0
2000ea3c:	30840001 	addik	r4, r4, 1
2000ea40:	f8830000 	swi	r4, r3, 0
}
2000ea44:	10330000 	addk	r1, r19, r0
2000ea48:	ea610004 	lwi	r19, r1, 4
2000ea4c:	30210008 	addik	r1, r1, 8
2000ea50:	b60f0008 	rtsd	r15, 8
2000ea54:	80000000 	or	r0, r0, r0

2000ea58 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000ea58:	3021fff8 	addik	r1, r1, -8
2000ea5c:	fa610004 	swi	r19, r1, 4
2000ea60:	12610000 	addk	r19, r1, r0
2000ea64:	f8b3000c 	swi	r5, r19, 12
2000ea68:	f8d30010 	swi	r6, r19, 16
2000ea6c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000ea70:	e873000c 	lwi	r3, r19, 12
2000ea74:	e8630010 	lwi	r3, r3, 16
2000ea78:	e8830000 	lwi	r4, r3, 0
2000ea7c:	e873000c 	lwi	r3, r19, 12
2000ea80:	e8a3000c 	lwi	r5, r3, 12
2000ea84:	e8730010 	lwi	r3, r19, 16
2000ea88:	64630402 	bslli	r3, r3, 2
2000ea8c:	10651800 	addk	r3, r5, r3
2000ea90:	e8630000 	lwi	r3, r3, 0
2000ea94:	14a32000 	rsubk	r5, r3, r4
2000ea98:	30600001 	addik	r3, r0, 1
2000ea9c:	e8930014 	lwi	r4, r19, 20
2000eaa0:	16442803 	cmpu	r18, r4, r5
2000eaa4:	bcb20008 	bgei	r18, 8		// 2000eaac
2000eaa8:	10600000 	addk	r3, r0, r0
2000eaac:	a46300ff 	andi	r3, r3, 255
}
2000eab0:	10330000 	addk	r1, r19, r0
2000eab4:	ea610004 	lwi	r19, r1, 4
2000eab8:	30210008 	addik	r1, r1, 8
2000eabc:	b60f0008 	rtsd	r15, 8
2000eac0:	80000000 	or	r0, r0, r0

2000eac4 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000eac4:	3021fff8 	addik	r1, r1, -8
2000eac8:	fa610004 	swi	r19, r1, 4
2000eacc:	12610000 	addk	r19, r1, r0
2000ead0:	f8b3000c 	swi	r5, r19, 12
2000ead4:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000ead8:	e873000c 	lwi	r3, r19, 12
2000eadc:	e8630010 	lwi	r3, r3, 16
2000eae0:	e8830000 	lwi	r4, r3, 0
2000eae4:	e873000c 	lwi	r3, r19, 12
2000eae8:	e8a3000c 	lwi	r5, r3, 12
2000eaec:	e8730010 	lwi	r3, r19, 16
2000eaf0:	64630402 	bslli	r3, r3, 2
2000eaf4:	10651800 	addk	r3, r5, r3
2000eaf8:	e8630000 	lwi	r3, r3, 0
2000eafc:	14632000 	rsubk	r3, r3, r4
}
2000eb00:	10330000 	addk	r1, r19, r0
2000eb04:	ea610004 	lwi	r19, r1, 4
2000eb08:	30210008 	addik	r1, r1, 8
2000eb0c:	b60f0008 	rtsd	r15, 8
2000eb10:	80000000 	or	r0, r0, r0

2000eb14 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000eb14:	3021fff4 	addik	r1, r1, -12
2000eb18:	fa610008 	swi	r19, r1, 8
2000eb1c:	12610000 	addk	r19, r1, r0
2000eb20:	f8b30010 	swi	r5, r19, 16
2000eb24:	f8d30014 	swi	r6, r19, 20
2000eb28:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000eb2c:	f8130004 	swi	r0, r19, 4
2000eb30:	b800005c 	bri	92		// 2000eb8c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000eb34:	e8730010 	lwi	r3, r19, 16
2000eb38:	e8830000 	lwi	r4, r3, 0
2000eb3c:	e8730010 	lwi	r3, r19, 16
2000eb40:	e8a3000c 	lwi	r5, r3, 12
2000eb44:	e8730004 	lwi	r3, r19, 4
2000eb48:	64630402 	bslli	r3, r3, 2
2000eb4c:	10651800 	addk	r3, r5, r3
2000eb50:	e8a30000 	lwi	r5, r3, 0
2000eb54:	e8730010 	lwi	r3, r19, 16
2000eb58:	e8630010 	lwi	r3, r3, 16
2000eb5c:	e8630000 	lwi	r3, r3, 0
2000eb60:	14632800 	rsubk	r3, r3, r5
2000eb64:	10641800 	addk	r3, r4, r3
2000eb68:	30830001 	addik	r4, r3, 1
2000eb6c:	e8730018 	lwi	r3, r19, 24
2000eb70:	16441803 	cmpu	r18, r4, r3
2000eb74:	bc52000c 	blti	r18, 12		// 2000eb80
            return 0;
2000eb78:	10600000 	addk	r3, r0, r0
2000eb7c:	b8000024 	bri	36		// 2000eba0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000eb80:	e8730004 	lwi	r3, r19, 4
2000eb84:	30630001 	addik	r3, r3, 1
2000eb88:	f8730004 	swi	r3, r19, 4
2000eb8c:	e8930004 	lwi	r4, r19, 4
2000eb90:	e8730014 	lwi	r3, r19, 20
2000eb94:	16432003 	cmpu	r18, r3, r4
2000eb98:	bc52ff9c 	blti	r18, -100		// 2000eb34
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000eb9c:	30600001 	addik	r3, r0, 1
}
2000eba0:	10330000 	addk	r1, r19, r0
2000eba4:	ea610008 	lwi	r19, r1, 8
2000eba8:	3021000c 	addik	r1, r1, 12
2000ebac:	b60f0008 	rtsd	r15, 8
2000ebb0:	80000000 	or	r0, r0, r0

2000ebb4 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000ebb4:	3021ffec 	addik	r1, r1, -20
2000ebb8:	fa610010 	swi	r19, r1, 16
2000ebbc:	12610000 	addk	r19, r1, r0
2000ebc0:	f8b30018 	swi	r5, r19, 24
2000ebc4:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000ebc8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000ebcc:	f8130004 	swi	r0, r19, 4
2000ebd0:	b8000054 	bri	84		// 2000ec24
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000ebd4:	e8730018 	lwi	r3, r19, 24
2000ebd8:	e8630010 	lwi	r3, r3, 16
2000ebdc:	e8830000 	lwi	r4, r3, 0
2000ebe0:	e8730018 	lwi	r3, r19, 24
2000ebe4:	e8a3000c 	lwi	r5, r3, 12
2000ebe8:	e8730004 	lwi	r3, r19, 4
2000ebec:	64630402 	bslli	r3, r3, 2
2000ebf0:	10651800 	addk	r3, r5, r3
2000ebf4:	e8630000 	lwi	r3, r3, 0
2000ebf8:	14632000 	rsubk	r3, r3, r4
2000ebfc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000ec00:	e8930008 	lwi	r4, r19, 8
2000ec04:	e873000c 	lwi	r3, r19, 12
2000ec08:	16441803 	cmpu	r18, r4, r3
2000ec0c:	bcb20008 	bgei	r18, 8		// 2000ec14
2000ec10:	10640000 	addk	r3, r4, r0
2000ec14:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000ec18:	e8730004 	lwi	r3, r19, 4
2000ec1c:	30630001 	addik	r3, r3, 1
2000ec20:	f8730004 	swi	r3, r19, 4
2000ec24:	e8930004 	lwi	r4, r19, 4
2000ec28:	e873001c 	lwi	r3, r19, 28
2000ec2c:	16432003 	cmpu	r18, r3, r4
2000ec30:	bc52ffa4 	blti	r18, -92		// 2000ebd4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000ec34:	e8730018 	lwi	r3, r19, 24
2000ec38:	e8830000 	lwi	r4, r3, 0
2000ec3c:	e8730008 	lwi	r3, r19, 8
2000ec40:	14632000 	rsubk	r3, r3, r4
}
2000ec44:	10330000 	addk	r1, r19, r0
2000ec48:	ea610010 	lwi	r19, r1, 16
2000ec4c:	30210014 	addik	r1, r1, 20
2000ec50:	b60f0008 	rtsd	r15, 8
2000ec54:	80000000 	or	r0, r0, r0

2000ec58 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000ec58:	3021fff4 	addik	r1, r1, -12
2000ec5c:	fa610008 	swi	r19, r1, 8
2000ec60:	12610000 	addk	r19, r1, r0
2000ec64:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2000ec68:	e8730010 	lwi	r3, r19, 16
2000ec6c:	e8630010 	lwi	r3, r3, 16
2000ec70:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000ec74:	f8130004 	swi	r0, r19, 4
2000ec78:	b8000028 	bri	40		// 2000eca0
        fifo->read_inds[i] = 0;
2000ec7c:	e8730010 	lwi	r3, r19, 16
2000ec80:	e883000c 	lwi	r4, r3, 12
2000ec84:	e8730004 	lwi	r3, r19, 4
2000ec88:	64630402 	bslli	r3, r3, 2
2000ec8c:	10641800 	addk	r3, r4, r3
2000ec90:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000ec94:	e8730004 	lwi	r3, r19, 4
2000ec98:	30630001 	addik	r3, r3, 1
2000ec9c:	f8730004 	swi	r3, r19, 4
2000eca0:	e8730010 	lwi	r3, r19, 16
2000eca4:	e8830008 	lwi	r4, r3, 8
2000eca8:	e8730004 	lwi	r3, r19, 4
2000ecac:	16441803 	cmpu	r18, r4, r3
2000ecb0:	bc52ffcc 	blti	r18, -52		// 2000ec7c
        fifo->read_inds[i] = 0;
    }
}
2000ecb4:	10330000 	addk	r1, r19, r0
2000ecb8:	ea610008 	lwi	r19, r1, 8
2000ecbc:	3021000c 	addik	r1, r1, 12
2000ecc0:	b60f0008 	rtsd	r15, 8
2000ecc4:	80000000 	or	r0, r0, r0

2000ecc8 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000ecc8:	3021fff4 	addik	r1, r1, -12
2000eccc:	fa610008 	swi	r19, r1, 8
2000ecd0:	12610000 	addk	r19, r1, r0
2000ecd4:	f8b30010 	swi	r5, r19, 16
2000ecd8:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000ecdc:	e8730010 	lwi	r3, r19, 16
2000ece0:	e8830004 	lwi	r4, r3, 4
2000ece4:	e8730010 	lwi	r3, r19, 16
2000ece8:	e8a3000c 	lwi	r5, r3, 12
2000ecec:	e8730014 	lwi	r3, r19, 20
2000ecf0:	64630402 	bslli	r3, r3, 2
2000ecf4:	10651800 	addk	r3, r5, r3
2000ecf8:	e8a30000 	lwi	r5, r3, 0
2000ecfc:	e8730010 	lwi	r3, r19, 16
2000ed00:	e8630000 	lwi	r3, r3, 0
2000ed04:	3063ffff 	addik	r3, r3, -1
2000ed08:	84651800 	and	r3, r5, r3
2000ed0c:	10631800 	addk	r3, r3, r3
2000ed10:	10641800 	addk	r3, r4, r3
2000ed14:	e4630000 	lhui	r3, r3, 0
2000ed18:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000ed1c:	e8730010 	lwi	r3, r19, 16
2000ed20:	e883000c 	lwi	r4, r3, 12
2000ed24:	e8730014 	lwi	r3, r19, 20
2000ed28:	64630402 	bslli	r3, r3, 2
2000ed2c:	10641800 	addk	r3, r4, r3
2000ed30:	e8830000 	lwi	r4, r3, 0
2000ed34:	30840001 	addik	r4, r4, 1
2000ed38:	f8830000 	swi	r4, r3, 0
    return value;
2000ed3c:	e4730004 	lhui	r3, r19, 4
}
2000ed40:	10330000 	addk	r1, r19, r0
2000ed44:	ea610008 	lwi	r19, r1, 8
2000ed48:	3021000c 	addik	r1, r1, 12
2000ed4c:	b60f0008 	rtsd	r15, 8
2000ed50:	80000000 	or	r0, r0, r0

2000ed54 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000ed54:	3021fff8 	addik	r1, r1, -8
2000ed58:	fa610004 	swi	r19, r1, 4
2000ed5c:	12610000 	addk	r19, r1, r0
2000ed60:	f8b3000c 	swi	r5, r19, 12
2000ed64:	10660000 	addk	r3, r6, r0
2000ed68:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000ed6c:	e873000c 	lwi	r3, r19, 12
2000ed70:	e8830004 	lwi	r4, r3, 4
2000ed74:	e873000c 	lwi	r3, r19, 12
2000ed78:	e8630010 	lwi	r3, r3, 16
2000ed7c:	e8a30000 	lwi	r5, r3, 0
2000ed80:	e873000c 	lwi	r3, r19, 12
2000ed84:	e8630000 	lwi	r3, r3, 0
2000ed88:	3063ffff 	addik	r3, r3, -1
2000ed8c:	84651800 	and	r3, r5, r3
2000ed90:	10631800 	addk	r3, r3, r3
2000ed94:	10641800 	addk	r3, r4, r3
2000ed98:	e4930010 	lhui	r4, r19, 16
2000ed9c:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2000eda0:	e873000c 	lwi	r3, r19, 12
2000eda4:	e8630010 	lwi	r3, r3, 16
2000eda8:	e8830000 	lwi	r4, r3, 0
2000edac:	30840001 	addik	r4, r4, 1
2000edb0:	f8830000 	swi	r4, r3, 0
}
2000edb4:	10330000 	addk	r1, r19, r0
2000edb8:	ea610004 	lwi	r19, r1, 4
2000edbc:	30210008 	addik	r1, r1, 8
2000edc0:	b60f0008 	rtsd	r15, 8
2000edc4:	80000000 	or	r0, r0, r0

2000edc8 <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000edc8:	3021fff8 	addik	r1, r1, -8
2000edcc:	fa610004 	swi	r19, r1, 4
2000edd0:	12610000 	addk	r19, r1, r0
2000edd4:	f8b3000c 	swi	r5, r19, 12
2000edd8:	f8d30010 	swi	r6, r19, 16
2000eddc:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000ede0:	e873000c 	lwi	r3, r19, 12
2000ede4:	e8630010 	lwi	r3, r3, 16
2000ede8:	e8830000 	lwi	r4, r3, 0
2000edec:	e873000c 	lwi	r3, r19, 12
2000edf0:	e8a3000c 	lwi	r5, r3, 12
2000edf4:	e8730010 	lwi	r3, r19, 16
2000edf8:	64630402 	bslli	r3, r3, 2
2000edfc:	10651800 	addk	r3, r5, r3
2000ee00:	e8630000 	lwi	r3, r3, 0
2000ee04:	14a32000 	rsubk	r5, r3, r4
2000ee08:	30600001 	addik	r3, r0, 1
2000ee0c:	e8930014 	lwi	r4, r19, 20
2000ee10:	16442803 	cmpu	r18, r4, r5
2000ee14:	bcb20008 	bgei	r18, 8		// 2000ee1c
2000ee18:	10600000 	addk	r3, r0, r0
2000ee1c:	a46300ff 	andi	r3, r3, 255
}
2000ee20:	10330000 	addk	r1, r19, r0
2000ee24:	ea610004 	lwi	r19, r1, 4
2000ee28:	30210008 	addik	r1, r1, 8
2000ee2c:	b60f0008 	rtsd	r15, 8
2000ee30:	80000000 	or	r0, r0, r0

2000ee34 <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000ee34:	3021fff8 	addik	r1, r1, -8
2000ee38:	fa610004 	swi	r19, r1, 4
2000ee3c:	12610000 	addk	r19, r1, r0
2000ee40:	f8b3000c 	swi	r5, r19, 12
2000ee44:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000ee48:	e873000c 	lwi	r3, r19, 12
2000ee4c:	e8630010 	lwi	r3, r3, 16
2000ee50:	e8830000 	lwi	r4, r3, 0
2000ee54:	e873000c 	lwi	r3, r19, 12
2000ee58:	e8a3000c 	lwi	r5, r3, 12
2000ee5c:	e8730010 	lwi	r3, r19, 16
2000ee60:	64630402 	bslli	r3, r3, 2
2000ee64:	10651800 	addk	r3, r5, r3
2000ee68:	e8630000 	lwi	r3, r3, 0
2000ee6c:	14632000 	rsubk	r3, r3, r4
}
2000ee70:	10330000 	addk	r1, r19, r0
2000ee74:	ea610004 	lwi	r19, r1, 4
2000ee78:	30210008 	addik	r1, r1, 8
2000ee7c:	b60f0008 	rtsd	r15, 8
2000ee80:	80000000 	or	r0, r0, r0

2000ee84 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000ee84:	3021fff4 	addik	r1, r1, -12
2000ee88:	fa610008 	swi	r19, r1, 8
2000ee8c:	12610000 	addk	r19, r1, r0
2000ee90:	f8b30010 	swi	r5, r19, 16
2000ee94:	f8d30014 	swi	r6, r19, 20
2000ee98:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000ee9c:	f8130004 	swi	r0, r19, 4
2000eea0:	b800005c 	bri	92		// 2000eefc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000eea4:	e8730010 	lwi	r3, r19, 16
2000eea8:	e8830000 	lwi	r4, r3, 0
2000eeac:	e8730010 	lwi	r3, r19, 16
2000eeb0:	e8a3000c 	lwi	r5, r3, 12
2000eeb4:	e8730004 	lwi	r3, r19, 4
2000eeb8:	64630402 	bslli	r3, r3, 2
2000eebc:	10651800 	addk	r3, r5, r3
2000eec0:	e8a30000 	lwi	r5, r3, 0
2000eec4:	e8730010 	lwi	r3, r19, 16
2000eec8:	e8630010 	lwi	r3, r3, 16
2000eecc:	e8630000 	lwi	r3, r3, 0
2000eed0:	14632800 	rsubk	r3, r3, r5
2000eed4:	10641800 	addk	r3, r4, r3
2000eed8:	30830001 	addik	r4, r3, 1
2000eedc:	e8730018 	lwi	r3, r19, 24
2000eee0:	16441803 	cmpu	r18, r4, r3
2000eee4:	bc52000c 	blti	r18, 12		// 2000eef0
            return 0;
2000eee8:	10600000 	addk	r3, r0, r0
2000eeec:	b8000024 	bri	36		// 2000ef10
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000eef0:	e8730004 	lwi	r3, r19, 4
2000eef4:	30630001 	addik	r3, r3, 1
2000eef8:	f8730004 	swi	r3, r19, 4
2000eefc:	e8930004 	lwi	r4, r19, 4
2000ef00:	e8730014 	lwi	r3, r19, 20
2000ef04:	16432003 	cmpu	r18, r3, r4
2000ef08:	bc52ff9c 	blti	r18, -100		// 2000eea4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000ef0c:	30600001 	addik	r3, r0, 1
}
2000ef10:	10330000 	addk	r1, r19, r0
2000ef14:	ea610008 	lwi	r19, r1, 8
2000ef18:	3021000c 	addik	r1, r1, 12
2000ef1c:	b60f0008 	rtsd	r15, 8
2000ef20:	80000000 	or	r0, r0, r0

2000ef24 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000ef24:	3021ffec 	addik	r1, r1, -20
2000ef28:	fa610010 	swi	r19, r1, 16
2000ef2c:	12610000 	addk	r19, r1, r0
2000ef30:	f8b30018 	swi	r5, r19, 24
2000ef34:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000ef38:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000ef3c:	f8130004 	swi	r0, r19, 4
2000ef40:	b8000054 	bri	84		// 2000ef94
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000ef44:	e8730018 	lwi	r3, r19, 24
2000ef48:	e8630010 	lwi	r3, r3, 16
2000ef4c:	e8830000 	lwi	r4, r3, 0
2000ef50:	e8730018 	lwi	r3, r19, 24
2000ef54:	e8a3000c 	lwi	r5, r3, 12
2000ef58:	e8730004 	lwi	r3, r19, 4
2000ef5c:	64630402 	bslli	r3, r3, 2
2000ef60:	10651800 	addk	r3, r5, r3
2000ef64:	e8630000 	lwi	r3, r3, 0
2000ef68:	14632000 	rsubk	r3, r3, r4
2000ef6c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000ef70:	e8930008 	lwi	r4, r19, 8
2000ef74:	e873000c 	lwi	r3, r19, 12
2000ef78:	16441803 	cmpu	r18, r4, r3
2000ef7c:	bcb20008 	bgei	r18, 8		// 2000ef84
2000ef80:	10640000 	addk	r3, r4, r0
2000ef84:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000ef88:	e8730004 	lwi	r3, r19, 4
2000ef8c:	30630001 	addik	r3, r3, 1
2000ef90:	f8730004 	swi	r3, r19, 4
2000ef94:	e8930004 	lwi	r4, r19, 4
2000ef98:	e873001c 	lwi	r3, r19, 28
2000ef9c:	16432003 	cmpu	r18, r3, r4
2000efa0:	bc52ffa4 	blti	r18, -92		// 2000ef44
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000efa4:	e8730018 	lwi	r3, r19, 24
2000efa8:	e8830000 	lwi	r4, r3, 0
2000efac:	e8730008 	lwi	r3, r19, 8
2000efb0:	14632000 	rsubk	r3, r3, r4
}
2000efb4:	10330000 	addk	r1, r19, r0
2000efb8:	ea610010 	lwi	r19, r1, 16
2000efbc:	30210014 	addik	r1, r1, 20
2000efc0:	b60f0008 	rtsd	r15, 8
2000efc4:	80000000 	or	r0, r0, r0

2000efc8 <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000efc8:	3021fff4 	addik	r1, r1, -12
2000efcc:	fa610008 	swi	r19, r1, 8
2000efd0:	12610000 	addk	r19, r1, r0
2000efd4:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2000efd8:	e8730010 	lwi	r3, r19, 16
2000efdc:	e8630010 	lwi	r3, r3, 16
2000efe0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000efe4:	f8130004 	swi	r0, r19, 4
2000efe8:	b8000028 	bri	40		// 2000f010
        fifo->read_inds[i] = 0;
2000efec:	e8730010 	lwi	r3, r19, 16
2000eff0:	e883000c 	lwi	r4, r3, 12
2000eff4:	e8730004 	lwi	r3, r19, 4
2000eff8:	64630402 	bslli	r3, r3, 2
2000effc:	10641800 	addk	r3, r4, r3
2000f000:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000f004:	e8730004 	lwi	r3, r19, 4
2000f008:	30630001 	addik	r3, r3, 1
2000f00c:	f8730004 	swi	r3, r19, 4
2000f010:	e8730010 	lwi	r3, r19, 16
2000f014:	e8830008 	lwi	r4, r3, 8
2000f018:	e8730004 	lwi	r3, r19, 4
2000f01c:	16441803 	cmpu	r18, r4, r3
2000f020:	bc52ffcc 	blti	r18, -52		// 2000efec
        fifo->read_inds[i] = 0;
    }
}
2000f024:	10330000 	addk	r1, r19, r0
2000f028:	ea610008 	lwi	r19, r1, 8
2000f02c:	3021000c 	addik	r1, r1, 12
2000f030:	b60f0008 	rtsd	r15, 8
2000f034:	80000000 	or	r0, r0, r0

2000f038 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000f038:	3021fff4 	addik	r1, r1, -12
2000f03c:	fa610008 	swi	r19, r1, 8
2000f040:	12610000 	addk	r19, r1, r0
2000f044:	f8b30010 	swi	r5, r19, 16
2000f048:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000f04c:	e8730010 	lwi	r3, r19, 16
2000f050:	e8830004 	lwi	r4, r3, 4
2000f054:	e8730010 	lwi	r3, r19, 16
2000f058:	e8a3000c 	lwi	r5, r3, 12
2000f05c:	e8730014 	lwi	r3, r19, 20
2000f060:	64630402 	bslli	r3, r3, 2
2000f064:	10651800 	addk	r3, r5, r3
2000f068:	e8a30000 	lwi	r5, r3, 0
2000f06c:	e8730010 	lwi	r3, r19, 16
2000f070:	e8630000 	lwi	r3, r3, 0
2000f074:	3063ffff 	addik	r3, r3, -1
2000f078:	84651800 	and	r3, r5, r3
2000f07c:	64630402 	bslli	r3, r3, 2
2000f080:	10641800 	addk	r3, r4, r3
2000f084:	e8630000 	lwi	r3, r3, 0
2000f088:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000f08c:	e8730010 	lwi	r3, r19, 16
2000f090:	e883000c 	lwi	r4, r3, 12
2000f094:	e8730014 	lwi	r3, r19, 20
2000f098:	64630402 	bslli	r3, r3, 2
2000f09c:	10641800 	addk	r3, r4, r3
2000f0a0:	e8830000 	lwi	r4, r3, 0
2000f0a4:	30840001 	addik	r4, r4, 1
2000f0a8:	f8830000 	swi	r4, r3, 0
    return value;
2000f0ac:	e8730004 	lwi	r3, r19, 4
}
2000f0b0:	10330000 	addk	r1, r19, r0
2000f0b4:	ea610008 	lwi	r19, r1, 8
2000f0b8:	3021000c 	addik	r1, r1, 12
2000f0bc:	b60f0008 	rtsd	r15, 8
2000f0c0:	80000000 	or	r0, r0, r0

2000f0c4 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000f0c4:	3021fff8 	addik	r1, r1, -8
2000f0c8:	fa610004 	swi	r19, r1, 4
2000f0cc:	12610000 	addk	r19, r1, r0
2000f0d0:	f8b3000c 	swi	r5, r19, 12
2000f0d4:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000f0d8:	e873000c 	lwi	r3, r19, 12
2000f0dc:	e8830004 	lwi	r4, r3, 4
2000f0e0:	e873000c 	lwi	r3, r19, 12
2000f0e4:	e8630010 	lwi	r3, r3, 16
2000f0e8:	e8a30000 	lwi	r5, r3, 0
2000f0ec:	e873000c 	lwi	r3, r19, 12
2000f0f0:	e8630000 	lwi	r3, r3, 0
2000f0f4:	3063ffff 	addik	r3, r3, -1
2000f0f8:	84651800 	and	r3, r5, r3
2000f0fc:	64630402 	bslli	r3, r3, 2
2000f100:	10641800 	addk	r3, r4, r3
2000f104:	e8930010 	lwi	r4, r19, 16
2000f108:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2000f10c:	e873000c 	lwi	r3, r19, 12
2000f110:	e8630010 	lwi	r3, r3, 16
2000f114:	e8830000 	lwi	r4, r3, 0
2000f118:	30840001 	addik	r4, r4, 1
2000f11c:	f8830000 	swi	r4, r3, 0
}
2000f120:	10330000 	addk	r1, r19, r0
2000f124:	ea610004 	lwi	r19, r1, 4
2000f128:	30210008 	addik	r1, r1, 8
2000f12c:	b60f0008 	rtsd	r15, 8
2000f130:	80000000 	or	r0, r0, r0

2000f134 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000f134:	3021fff8 	addik	r1, r1, -8
2000f138:	fa610004 	swi	r19, r1, 4
2000f13c:	12610000 	addk	r19, r1, r0
2000f140:	f8b3000c 	swi	r5, r19, 12
2000f144:	f8d30010 	swi	r6, r19, 16
2000f148:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000f14c:	e873000c 	lwi	r3, r19, 12
2000f150:	e8630010 	lwi	r3, r3, 16
2000f154:	e8830000 	lwi	r4, r3, 0
2000f158:	e873000c 	lwi	r3, r19, 12
2000f15c:	e8a3000c 	lwi	r5, r3, 12
2000f160:	e8730010 	lwi	r3, r19, 16
2000f164:	64630402 	bslli	r3, r3, 2
2000f168:	10651800 	addk	r3, r5, r3
2000f16c:	e8630000 	lwi	r3, r3, 0
2000f170:	14a32000 	rsubk	r5, r3, r4
2000f174:	30600001 	addik	r3, r0, 1
2000f178:	e8930014 	lwi	r4, r19, 20
2000f17c:	16442803 	cmpu	r18, r4, r5
2000f180:	bcb20008 	bgei	r18, 8		// 2000f188
2000f184:	10600000 	addk	r3, r0, r0
2000f188:	a46300ff 	andi	r3, r3, 255
}
2000f18c:	10330000 	addk	r1, r19, r0
2000f190:	ea610004 	lwi	r19, r1, 4
2000f194:	30210008 	addik	r1, r1, 8
2000f198:	b60f0008 	rtsd	r15, 8
2000f19c:	80000000 	or	r0, r0, r0

2000f1a0 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000f1a0:	3021fff8 	addik	r1, r1, -8
2000f1a4:	fa610004 	swi	r19, r1, 4
2000f1a8:	12610000 	addk	r19, r1, r0
2000f1ac:	f8b3000c 	swi	r5, r19, 12
2000f1b0:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000f1b4:	e873000c 	lwi	r3, r19, 12
2000f1b8:	e8630010 	lwi	r3, r3, 16
2000f1bc:	e8830000 	lwi	r4, r3, 0
2000f1c0:	e873000c 	lwi	r3, r19, 12
2000f1c4:	e8a3000c 	lwi	r5, r3, 12
2000f1c8:	e8730010 	lwi	r3, r19, 16
2000f1cc:	64630402 	bslli	r3, r3, 2
2000f1d0:	10651800 	addk	r3, r5, r3
2000f1d4:	e8630000 	lwi	r3, r3, 0
2000f1d8:	14632000 	rsubk	r3, r3, r4
}
2000f1dc:	10330000 	addk	r1, r19, r0
2000f1e0:	ea610004 	lwi	r19, r1, 4
2000f1e4:	30210008 	addik	r1, r1, 8
2000f1e8:	b60f0008 	rtsd	r15, 8
2000f1ec:	80000000 	or	r0, r0, r0

2000f1f0 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000f1f0:	3021fff4 	addik	r1, r1, -12
2000f1f4:	fa610008 	swi	r19, r1, 8
2000f1f8:	12610000 	addk	r19, r1, r0
2000f1fc:	f8b30010 	swi	r5, r19, 16
2000f200:	f8d30014 	swi	r6, r19, 20
2000f204:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000f208:	f8130004 	swi	r0, r19, 4
2000f20c:	b800005c 	bri	92		// 2000f268
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000f210:	e8730010 	lwi	r3, r19, 16
2000f214:	e8830000 	lwi	r4, r3, 0
2000f218:	e8730010 	lwi	r3, r19, 16
2000f21c:	e8a3000c 	lwi	r5, r3, 12
2000f220:	e8730004 	lwi	r3, r19, 4
2000f224:	64630402 	bslli	r3, r3, 2
2000f228:	10651800 	addk	r3, r5, r3
2000f22c:	e8a30000 	lwi	r5, r3, 0
2000f230:	e8730010 	lwi	r3, r19, 16
2000f234:	e8630010 	lwi	r3, r3, 16
2000f238:	e8630000 	lwi	r3, r3, 0
2000f23c:	14632800 	rsubk	r3, r3, r5
2000f240:	10641800 	addk	r3, r4, r3
2000f244:	30830001 	addik	r4, r3, 1
2000f248:	e8730018 	lwi	r3, r19, 24
2000f24c:	16441803 	cmpu	r18, r4, r3
2000f250:	bc52000c 	blti	r18, 12		// 2000f25c
            return 0;
2000f254:	10600000 	addk	r3, r0, r0
2000f258:	b8000024 	bri	36		// 2000f27c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000f25c:	e8730004 	lwi	r3, r19, 4
2000f260:	30630001 	addik	r3, r3, 1
2000f264:	f8730004 	swi	r3, r19, 4
2000f268:	e8930004 	lwi	r4, r19, 4
2000f26c:	e8730014 	lwi	r3, r19, 20
2000f270:	16432003 	cmpu	r18, r3, r4
2000f274:	bc52ff9c 	blti	r18, -100		// 2000f210
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000f278:	30600001 	addik	r3, r0, 1
}
2000f27c:	10330000 	addk	r1, r19, r0
2000f280:	ea610008 	lwi	r19, r1, 8
2000f284:	3021000c 	addik	r1, r1, 12
2000f288:	b60f0008 	rtsd	r15, 8
2000f28c:	80000000 	or	r0, r0, r0

2000f290 <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000f290:	3021ffec 	addik	r1, r1, -20
2000f294:	fa610010 	swi	r19, r1, 16
2000f298:	12610000 	addk	r19, r1, r0
2000f29c:	f8b30018 	swi	r5, r19, 24
2000f2a0:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000f2a4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000f2a8:	f8130004 	swi	r0, r19, 4
2000f2ac:	b8000054 	bri	84		// 2000f300
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000f2b0:	e8730018 	lwi	r3, r19, 24
2000f2b4:	e8630010 	lwi	r3, r3, 16
2000f2b8:	e8830000 	lwi	r4, r3, 0
2000f2bc:	e8730018 	lwi	r3, r19, 24
2000f2c0:	e8a3000c 	lwi	r5, r3, 12
2000f2c4:	e8730004 	lwi	r3, r19, 4
2000f2c8:	64630402 	bslli	r3, r3, 2
2000f2cc:	10651800 	addk	r3, r5, r3
2000f2d0:	e8630000 	lwi	r3, r3, 0
2000f2d4:	14632000 	rsubk	r3, r3, r4
2000f2d8:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000f2dc:	e8930008 	lwi	r4, r19, 8
2000f2e0:	e873000c 	lwi	r3, r19, 12
2000f2e4:	16441803 	cmpu	r18, r4, r3
2000f2e8:	bcb20008 	bgei	r18, 8		// 2000f2f0
2000f2ec:	10640000 	addk	r3, r4, r0
2000f2f0:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000f2f4:	e8730004 	lwi	r3, r19, 4
2000f2f8:	30630001 	addik	r3, r3, 1
2000f2fc:	f8730004 	swi	r3, r19, 4
2000f300:	e8930004 	lwi	r4, r19, 4
2000f304:	e873001c 	lwi	r3, r19, 28
2000f308:	16432003 	cmpu	r18, r3, r4
2000f30c:	bc52ffa4 	blti	r18, -92		// 2000f2b0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000f310:	e8730018 	lwi	r3, r19, 24
2000f314:	e8830000 	lwi	r4, r3, 0
2000f318:	e8730008 	lwi	r3, r19, 8
2000f31c:	14632000 	rsubk	r3, r3, r4
}
2000f320:	10330000 	addk	r1, r19, r0
2000f324:	ea610010 	lwi	r19, r1, 16
2000f328:	30210014 	addik	r1, r1, 20
2000f32c:	b60f0008 	rtsd	r15, 8
2000f330:	80000000 	or	r0, r0, r0

2000f334 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000f334:	3021fff4 	addik	r1, r1, -12
2000f338:	fa610008 	swi	r19, r1, 8
2000f33c:	12610000 	addk	r19, r1, r0
2000f340:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2000f344:	e8730010 	lwi	r3, r19, 16
2000f348:	e8630010 	lwi	r3, r3, 16
2000f34c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000f350:	f8130004 	swi	r0, r19, 4
2000f354:	b8000028 	bri	40		// 2000f37c
        fifo->read_inds[i] = 0;
2000f358:	e8730010 	lwi	r3, r19, 16
2000f35c:	e883000c 	lwi	r4, r3, 12
2000f360:	e8730004 	lwi	r3, r19, 4
2000f364:	64630402 	bslli	r3, r3, 2
2000f368:	10641800 	addk	r3, r4, r3
2000f36c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000f370:	e8730004 	lwi	r3, r19, 4
2000f374:	30630001 	addik	r3, r3, 1
2000f378:	f8730004 	swi	r3, r19, 4
2000f37c:	e8730010 	lwi	r3, r19, 16
2000f380:	e8830008 	lwi	r4, r3, 8
2000f384:	e8730004 	lwi	r3, r19, 4
2000f388:	16441803 	cmpu	r18, r4, r3
2000f38c:	bc52ffcc 	blti	r18, -52		// 2000f358
        fifo->read_inds[i] = 0;
    }
}
2000f390:	10330000 	addk	r1, r19, r0
2000f394:	ea610008 	lwi	r19, r1, 8
2000f398:	3021000c 	addik	r1, r1, 12
2000f39c:	b60f0008 	rtsd	r15, 8
2000f3a0:	80000000 	or	r0, r0, r0

2000f3a4 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000f3a4:	3021fff0 	addik	r1, r1, -16
2000f3a8:	fa61000c 	swi	r19, r1, 12
2000f3ac:	12610000 	addk	r19, r1, r0
2000f3b0:	f8b30014 	swi	r5, r19, 20
2000f3b4:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000f3b8:	e8730014 	lwi	r3, r19, 20
2000f3bc:	e8830004 	lwi	r4, r3, 4
2000f3c0:	e8730014 	lwi	r3, r19, 20
2000f3c4:	e8a3000c 	lwi	r5, r3, 12
2000f3c8:	e8730018 	lwi	r3, r19, 24
2000f3cc:	64630402 	bslli	r3, r3, 2
2000f3d0:	10651800 	addk	r3, r5, r3
2000f3d4:	e8a30000 	lwi	r5, r3, 0
2000f3d8:	e8730014 	lwi	r3, r19, 20
2000f3dc:	e8630000 	lwi	r3, r3, 0
2000f3e0:	3063ffff 	addik	r3, r3, -1
2000f3e4:	84651800 	and	r3, r5, r3
2000f3e8:	64630403 	bslli	r3, r3, 3
2000f3ec:	10641800 	addk	r3, r4, r3
2000f3f0:	e8830000 	lwi	r4, r3, 0
2000f3f4:	e8a30004 	lwi	r5, r3, 4
2000f3f8:	f8930004 	swi	r4, r19, 4
2000f3fc:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2000f400:	e8730014 	lwi	r3, r19, 20
2000f404:	e883000c 	lwi	r4, r3, 12
2000f408:	e8730018 	lwi	r3, r19, 24
2000f40c:	64630402 	bslli	r3, r3, 2
2000f410:	10641800 	addk	r3, r4, r3
2000f414:	e8830000 	lwi	r4, r3, 0
2000f418:	30840001 	addik	r4, r4, 1
2000f41c:	f8830000 	swi	r4, r3, 0
    return value;
2000f420:	e8930004 	lwi	r4, r19, 4
2000f424:	e8b30008 	lwi	r5, r19, 8
}
2000f428:	10640000 	addk	r3, r4, r0
2000f42c:	10850000 	addk	r4, r5, r0
2000f430:	10330000 	addk	r1, r19, r0
2000f434:	ea61000c 	lwi	r19, r1, 12
2000f438:	30210010 	addik	r1, r1, 16
2000f43c:	b60f0008 	rtsd	r15, 8
2000f440:	80000000 	or	r0, r0, r0

2000f444 <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000f444:	3021fff8 	addik	r1, r1, -8
2000f448:	fa610004 	swi	r19, r1, 4
2000f44c:	12610000 	addk	r19, r1, r0
2000f450:	f8b3000c 	swi	r5, r19, 12
2000f454:	f8d30010 	swi	r6, r19, 16
2000f458:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000f45c:	e873000c 	lwi	r3, r19, 12
2000f460:	e8830004 	lwi	r4, r3, 4
2000f464:	e873000c 	lwi	r3, r19, 12
2000f468:	e8630010 	lwi	r3, r3, 16
2000f46c:	e8a30000 	lwi	r5, r3, 0
2000f470:	e873000c 	lwi	r3, r19, 12
2000f474:	e8630000 	lwi	r3, r3, 0
2000f478:	3063ffff 	addik	r3, r3, -1
2000f47c:	84651800 	and	r3, r5, r3
2000f480:	64630403 	bslli	r3, r3, 3
2000f484:	10641800 	addk	r3, r4, r3
2000f488:	e8930010 	lwi	r4, r19, 16
2000f48c:	e8b30014 	lwi	r5, r19, 20
2000f490:	f8830000 	swi	r4, r3, 0
2000f494:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2000f498:	e873000c 	lwi	r3, r19, 12
2000f49c:	e8630010 	lwi	r3, r3, 16
2000f4a0:	e8830000 	lwi	r4, r3, 0
2000f4a4:	30840001 	addik	r4, r4, 1
2000f4a8:	f8830000 	swi	r4, r3, 0
}
2000f4ac:	10330000 	addk	r1, r19, r0
2000f4b0:	ea610004 	lwi	r19, r1, 4
2000f4b4:	30210008 	addik	r1, r1, 8
2000f4b8:	b60f0008 	rtsd	r15, 8
2000f4bc:	80000000 	or	r0, r0, r0

2000f4c0 <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000f4c0:	3021fff8 	addik	r1, r1, -8
2000f4c4:	fa610004 	swi	r19, r1, 4
2000f4c8:	12610000 	addk	r19, r1, r0
2000f4cc:	f8b3000c 	swi	r5, r19, 12
2000f4d0:	f8d30010 	swi	r6, r19, 16
2000f4d4:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000f4d8:	e873000c 	lwi	r3, r19, 12
2000f4dc:	e8630010 	lwi	r3, r3, 16
2000f4e0:	e8830000 	lwi	r4, r3, 0
2000f4e4:	e873000c 	lwi	r3, r19, 12
2000f4e8:	e8a3000c 	lwi	r5, r3, 12
2000f4ec:	e8730010 	lwi	r3, r19, 16
2000f4f0:	64630402 	bslli	r3, r3, 2
2000f4f4:	10651800 	addk	r3, r5, r3
2000f4f8:	e8630000 	lwi	r3, r3, 0
2000f4fc:	14a32000 	rsubk	r5, r3, r4
2000f500:	30600001 	addik	r3, r0, 1
2000f504:	e8930014 	lwi	r4, r19, 20
2000f508:	16442803 	cmpu	r18, r4, r5
2000f50c:	bcb20008 	bgei	r18, 8		// 2000f514
2000f510:	10600000 	addk	r3, r0, r0
2000f514:	a46300ff 	andi	r3, r3, 255
}
2000f518:	10330000 	addk	r1, r19, r0
2000f51c:	ea610004 	lwi	r19, r1, 4
2000f520:	30210008 	addik	r1, r1, 8
2000f524:	b60f0008 	rtsd	r15, 8
2000f528:	80000000 	or	r0, r0, r0

2000f52c <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000f52c:	3021fff8 	addik	r1, r1, -8
2000f530:	fa610004 	swi	r19, r1, 4
2000f534:	12610000 	addk	r19, r1, r0
2000f538:	f8b3000c 	swi	r5, r19, 12
2000f53c:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000f540:	e873000c 	lwi	r3, r19, 12
2000f544:	e8630010 	lwi	r3, r3, 16
2000f548:	e8830000 	lwi	r4, r3, 0
2000f54c:	e873000c 	lwi	r3, r19, 12
2000f550:	e8a3000c 	lwi	r5, r3, 12
2000f554:	e8730010 	lwi	r3, r19, 16
2000f558:	64630402 	bslli	r3, r3, 2
2000f55c:	10651800 	addk	r3, r5, r3
2000f560:	e8630000 	lwi	r3, r3, 0
2000f564:	14632000 	rsubk	r3, r3, r4
}
2000f568:	10330000 	addk	r1, r19, r0
2000f56c:	ea610004 	lwi	r19, r1, 4
2000f570:	30210008 	addik	r1, r1, 8
2000f574:	b60f0008 	rtsd	r15, 8
2000f578:	80000000 	or	r0, r0, r0

2000f57c <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000f57c:	3021fff4 	addik	r1, r1, -12
2000f580:	fa610008 	swi	r19, r1, 8
2000f584:	12610000 	addk	r19, r1, r0
2000f588:	f8b30010 	swi	r5, r19, 16
2000f58c:	f8d30014 	swi	r6, r19, 20
2000f590:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000f594:	f8130004 	swi	r0, r19, 4
2000f598:	b800005c 	bri	92		// 2000f5f4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000f59c:	e8730010 	lwi	r3, r19, 16
2000f5a0:	e8830000 	lwi	r4, r3, 0
2000f5a4:	e8730010 	lwi	r3, r19, 16
2000f5a8:	e8a3000c 	lwi	r5, r3, 12
2000f5ac:	e8730004 	lwi	r3, r19, 4
2000f5b0:	64630402 	bslli	r3, r3, 2
2000f5b4:	10651800 	addk	r3, r5, r3
2000f5b8:	e8a30000 	lwi	r5, r3, 0
2000f5bc:	e8730010 	lwi	r3, r19, 16
2000f5c0:	e8630010 	lwi	r3, r3, 16
2000f5c4:	e8630000 	lwi	r3, r3, 0
2000f5c8:	14632800 	rsubk	r3, r3, r5
2000f5cc:	10641800 	addk	r3, r4, r3
2000f5d0:	30830001 	addik	r4, r3, 1
2000f5d4:	e8730018 	lwi	r3, r19, 24
2000f5d8:	16441803 	cmpu	r18, r4, r3
2000f5dc:	bc52000c 	blti	r18, 12		// 2000f5e8
            return 0;
2000f5e0:	10600000 	addk	r3, r0, r0
2000f5e4:	b8000024 	bri	36		// 2000f608
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000f5e8:	e8730004 	lwi	r3, r19, 4
2000f5ec:	30630001 	addik	r3, r3, 1
2000f5f0:	f8730004 	swi	r3, r19, 4
2000f5f4:	e8930004 	lwi	r4, r19, 4
2000f5f8:	e8730014 	lwi	r3, r19, 20
2000f5fc:	16432003 	cmpu	r18, r3, r4
2000f600:	bc52ff9c 	blti	r18, -100		// 2000f59c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000f604:	30600001 	addik	r3, r0, 1
}
2000f608:	10330000 	addk	r1, r19, r0
2000f60c:	ea610008 	lwi	r19, r1, 8
2000f610:	3021000c 	addik	r1, r1, 12
2000f614:	b60f0008 	rtsd	r15, 8
2000f618:	80000000 	or	r0, r0, r0

2000f61c <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000f61c:	3021ffec 	addik	r1, r1, -20
2000f620:	fa610010 	swi	r19, r1, 16
2000f624:	12610000 	addk	r19, r1, r0
2000f628:	f8b30018 	swi	r5, r19, 24
2000f62c:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000f630:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000f634:	f8130004 	swi	r0, r19, 4
2000f638:	b8000054 	bri	84		// 2000f68c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000f63c:	e8730018 	lwi	r3, r19, 24
2000f640:	e8630010 	lwi	r3, r3, 16
2000f644:	e8830000 	lwi	r4, r3, 0
2000f648:	e8730018 	lwi	r3, r19, 24
2000f64c:	e8a3000c 	lwi	r5, r3, 12
2000f650:	e8730004 	lwi	r3, r19, 4
2000f654:	64630402 	bslli	r3, r3, 2
2000f658:	10651800 	addk	r3, r5, r3
2000f65c:	e8630000 	lwi	r3, r3, 0
2000f660:	14632000 	rsubk	r3, r3, r4
2000f664:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000f668:	e8930008 	lwi	r4, r19, 8
2000f66c:	e873000c 	lwi	r3, r19, 12
2000f670:	16441803 	cmpu	r18, r4, r3
2000f674:	bcb20008 	bgei	r18, 8		// 2000f67c
2000f678:	10640000 	addk	r3, r4, r0
2000f67c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000f680:	e8730004 	lwi	r3, r19, 4
2000f684:	30630001 	addik	r3, r3, 1
2000f688:	f8730004 	swi	r3, r19, 4
2000f68c:	e8930004 	lwi	r4, r19, 4
2000f690:	e873001c 	lwi	r3, r19, 28
2000f694:	16432003 	cmpu	r18, r3, r4
2000f698:	bc52ffa4 	blti	r18, -92		// 2000f63c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000f69c:	e8730018 	lwi	r3, r19, 24
2000f6a0:	e8830000 	lwi	r4, r3, 0
2000f6a4:	e8730008 	lwi	r3, r19, 8
2000f6a8:	14632000 	rsubk	r3, r3, r4
}
2000f6ac:	10330000 	addk	r1, r19, r0
2000f6b0:	ea610010 	lwi	r19, r1, 16
2000f6b4:	30210014 	addik	r1, r1, 20
2000f6b8:	b60f0008 	rtsd	r15, 8
2000f6bc:	80000000 	or	r0, r0, r0

2000f6c0 <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000f6c0:	3021fff4 	addik	r1, r1, -12
2000f6c4:	fa610008 	swi	r19, r1, 8
2000f6c8:	12610000 	addk	r19, r1, r0
2000f6cc:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2000f6d0:	e8730010 	lwi	r3, r19, 16
2000f6d4:	e8630010 	lwi	r3, r3, 16
2000f6d8:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000f6dc:	f8130004 	swi	r0, r19, 4
2000f6e0:	b8000028 	bri	40		// 2000f708
        fifo->read_inds[i] = 0;
2000f6e4:	e8730010 	lwi	r3, r19, 16
2000f6e8:	e883000c 	lwi	r4, r3, 12
2000f6ec:	e8730004 	lwi	r3, r19, 4
2000f6f0:	64630402 	bslli	r3, r3, 2
2000f6f4:	10641800 	addk	r3, r4, r3
2000f6f8:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000f6fc:	e8730004 	lwi	r3, r19, 4
2000f700:	30630001 	addik	r3, r3, 1
2000f704:	f8730004 	swi	r3, r19, 4
2000f708:	e8730010 	lwi	r3, r19, 16
2000f70c:	e8830008 	lwi	r4, r3, 8
2000f710:	e8730004 	lwi	r3, r19, 4
2000f714:	16441803 	cmpu	r18, r4, r3
2000f718:	bc52ffcc 	blti	r18, -52		// 2000f6e4
        fifo->read_inds[i] = 0;
    }
}
2000f71c:	10330000 	addk	r1, r19, r0
2000f720:	ea610008 	lwi	r19, r1, 8
2000f724:	3021000c 	addik	r1, r1, 12
2000f728:	b60f0008 	rtsd	r15, 8
2000f72c:	80000000 	or	r0, r0, r0

2000f730 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000f730:	3021fff4 	addik	r1, r1, -12
2000f734:	fa610008 	swi	r19, r1, 8
2000f738:	12610000 	addk	r19, r1, r0
2000f73c:	f8b30010 	swi	r5, r19, 16
2000f740:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000f744:	e8730010 	lwi	r3, r19, 16
2000f748:	e8830004 	lwi	r4, r3, 4
2000f74c:	e8730010 	lwi	r3, r19, 16
2000f750:	e8a3000c 	lwi	r5, r3, 12
2000f754:	e8730014 	lwi	r3, r19, 20
2000f758:	64630402 	bslli	r3, r3, 2
2000f75c:	10651800 	addk	r3, r5, r3
2000f760:	e8a30000 	lwi	r5, r3, 0
2000f764:	e8730010 	lwi	r3, r19, 16
2000f768:	e8630000 	lwi	r3, r3, 0
2000f76c:	3063ffff 	addik	r3, r3, -1
2000f770:	84651800 	and	r3, r5, r3
2000f774:	64630402 	bslli	r3, r3, 2
2000f778:	10641800 	addk	r3, r4, r3
2000f77c:	e8630000 	lwi	r3, r3, 0
2000f780:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000f784:	e8730010 	lwi	r3, r19, 16
2000f788:	e883000c 	lwi	r4, r3, 12
2000f78c:	e8730014 	lwi	r3, r19, 20
2000f790:	64630402 	bslli	r3, r3, 2
2000f794:	10641800 	addk	r3, r4, r3
2000f798:	e8830000 	lwi	r4, r3, 0
2000f79c:	30840001 	addik	r4, r4, 1
2000f7a0:	f8830000 	swi	r4, r3, 0
    return value;
2000f7a4:	e8730004 	lwi	r3, r19, 4
}
2000f7a8:	10330000 	addk	r1, r19, r0
2000f7ac:	ea610008 	lwi	r19, r1, 8
2000f7b0:	3021000c 	addik	r1, r1, 12
2000f7b4:	b60f0008 	rtsd	r15, 8
2000f7b8:	80000000 	or	r0, r0, r0

2000f7bc <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000f7bc:	3021fff8 	addik	r1, r1, -8
2000f7c0:	fa610004 	swi	r19, r1, 4
2000f7c4:	12610000 	addk	r19, r1, r0
2000f7c8:	f8b3000c 	swi	r5, r19, 12
2000f7cc:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000f7d0:	e873000c 	lwi	r3, r19, 12
2000f7d4:	e8830004 	lwi	r4, r3, 4
2000f7d8:	e873000c 	lwi	r3, r19, 12
2000f7dc:	e8630010 	lwi	r3, r3, 16
2000f7e0:	e8a30000 	lwi	r5, r3, 0
2000f7e4:	e873000c 	lwi	r3, r19, 12
2000f7e8:	e8630000 	lwi	r3, r3, 0
2000f7ec:	3063ffff 	addik	r3, r3, -1
2000f7f0:	84651800 	and	r3, r5, r3
2000f7f4:	64630402 	bslli	r3, r3, 2
2000f7f8:	10641800 	addk	r3, r4, r3
2000f7fc:	e8930010 	lwi	r4, r19, 16
2000f800:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2000f804:	e873000c 	lwi	r3, r19, 12
2000f808:	e8630010 	lwi	r3, r3, 16
2000f80c:	e8830000 	lwi	r4, r3, 0
2000f810:	30840001 	addik	r4, r4, 1
2000f814:	f8830000 	swi	r4, r3, 0
}
2000f818:	10330000 	addk	r1, r19, r0
2000f81c:	ea610004 	lwi	r19, r1, 4
2000f820:	30210008 	addik	r1, r1, 8
2000f824:	b60f0008 	rtsd	r15, 8
2000f828:	80000000 	or	r0, r0, r0

2000f82c <read_MV>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_MV() {
2000f82c:	3021ffe0 	addik	r1, r1, -32
2000f830:	f9e10000 	swi	r15, r1, 0
2000f834:	fa61001c 	swi	r19, r1, 28
2000f838:	12610000 	addk	r19, r1, r0
		index_MV = decoder_motion_framebuf_MV->read_inds[0];
2000f83c:	b0002004 	imm	8196
2000f840:	e86060d0 	lwi	r3, r0, 24784	// 200460d0 <decoder_motion_framebuf_MV>
2000f844:	e863000c 	lwi	r3, r3, 12
2000f848:	e8630000 	lwi	r3, r3, 0
2000f84c:	b0002004 	imm	8196
2000f850:	f8608f30 	swi	r3, r0, -28880	// 20048f30 <index_MV>
		numTokens_MV = index_MV + fifo_i16_get_num_tokens(decoder_motion_framebuf_MV, 0);
2000f854:	b0002004 	imm	8196
2000f858:	e86060d0 	lwi	r3, r0, 24784	// 200460d0 <decoder_motion_framebuf_MV>
2000f85c:	10a30000 	addk	r5, r3, r0
2000f860:	10c00000 	addk	r6, r0, r0
2000f864:	b9f4e48c 	brlid	r15, -7028	// 2000dcf0 <fifo_i16_get_num_tokens>
2000f868:	80000000 	or	r0, r0, r0
2000f86c:	10830000 	addk	r4, r3, r0
2000f870:	b0002004 	imm	8196
2000f874:	e8608f30 	lwi	r3, r0, -28880	// 20048f30 <index_MV>
2000f878:	10641800 	addk	r3, r4, r3
2000f87c:	b0002004 	imm	8196
2000f880:	f8608f34 	swi	r3, r0, -28876	// 20048f34 <numTokens_MV>
	}
2000f884:	e9e10000 	lwi	r15, r1, 0
2000f888:	10330000 	addk	r1, r19, r0
2000f88c:	ea61001c 	lwi	r19, r1, 28
2000f890:	30210020 	addik	r1, r1, 32
2000f894:	b60f0008 	rtsd	r15, 8
2000f898:	80000000 	or	r0, r0, r0

2000f89c <read_end_MV>:
	
	static void read_end_MV() {
2000f89c:	3021fff8 	addik	r1, r1, -8
2000f8a0:	fa610004 	swi	r19, r1, 4
2000f8a4:	12610000 	addk	r19, r1, r0
		decoder_motion_framebuf_MV->read_inds[0] = index_MV;
2000f8a8:	b0002004 	imm	8196
2000f8ac:	e86060d0 	lwi	r3, r0, 24784	// 200460d0 <decoder_motion_framebuf_MV>
2000f8b0:	e863000c 	lwi	r3, r3, 12
2000f8b4:	b0002004 	imm	8196
2000f8b8:	e8808f30 	lwi	r4, r0, -28880	// 20048f30 <index_MV>
2000f8bc:	f8830000 	swi	r4, r3, 0
	}
2000f8c0:	10330000 	addk	r1, r19, r0
2000f8c4:	ea610004 	lwi	r19, r1, 4
2000f8c8:	30210008 	addik	r1, r1, 8
2000f8cc:	b60f0008 	rtsd	r15, 8
2000f8d0:	80000000 	or	r0, r0, r0

2000f8d4 <read_BTYPE>:
	static void read_BTYPE() {
2000f8d4:	3021ffe0 	addik	r1, r1, -32
2000f8d8:	f9e10000 	swi	r15, r1, 0
2000f8dc:	fa61001c 	swi	r19, r1, 28
2000f8e0:	12610000 	addk	r19, r1, r0
		index_BTYPE = decoder_motion_framebuf_BTYPE->read_inds[5];
2000f8e4:	b0002004 	imm	8196
2000f8e8:	e86060b0 	lwi	r3, r0, 24752	// 200460b0 <decoder_motion_framebuf_BTYPE>
2000f8ec:	e863000c 	lwi	r3, r3, 12
2000f8f0:	e8630014 	lwi	r3, r3, 20
2000f8f4:	b0002004 	imm	8196
2000f8f8:	f8608f38 	swi	r3, r0, -28872	// 20048f38 <index_BTYPE>
		numTokens_BTYPE = index_BTYPE + fifo_i16_get_num_tokens(decoder_motion_framebuf_BTYPE, 5);
2000f8fc:	b0002004 	imm	8196
2000f900:	e86060b0 	lwi	r3, r0, 24752	// 200460b0 <decoder_motion_framebuf_BTYPE>
2000f904:	10a30000 	addk	r5, r3, r0
2000f908:	30c00005 	addik	r6, r0, 5
2000f90c:	b9f4e3e4 	brlid	r15, -7196	// 2000dcf0 <fifo_i16_get_num_tokens>
2000f910:	80000000 	or	r0, r0, r0
2000f914:	10830000 	addk	r4, r3, r0
2000f918:	b0002004 	imm	8196
2000f91c:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
2000f920:	10641800 	addk	r3, r4, r3
2000f924:	b0002004 	imm	8196
2000f928:	f8608f3c 	swi	r3, r0, -28868	// 20048f3c <numTokens_BTYPE>
	}
2000f92c:	e9e10000 	lwi	r15, r1, 0
2000f930:	10330000 	addk	r1, r19, r0
2000f934:	ea61001c 	lwi	r19, r1, 28
2000f938:	30210020 	addik	r1, r1, 32
2000f93c:	b60f0008 	rtsd	r15, 8
2000f940:	80000000 	or	r0, r0, r0

2000f944 <read_end_BTYPE>:
	
	static void read_end_BTYPE() {
2000f944:	3021fff8 	addik	r1, r1, -8
2000f948:	fa610004 	swi	r19, r1, 4
2000f94c:	12610000 	addk	r19, r1, r0
		decoder_motion_framebuf_BTYPE->read_inds[5] = index_BTYPE;
2000f950:	b0002004 	imm	8196
2000f954:	e86060b0 	lwi	r3, r0, 24752	// 200460b0 <decoder_motion_framebuf_BTYPE>
2000f958:	e863000c 	lwi	r3, r3, 12
2000f95c:	30630014 	addik	r3, r3, 20
2000f960:	b0002004 	imm	8196
2000f964:	e8808f38 	lwi	r4, r0, -28872	// 20048f38 <index_BTYPE>
2000f968:	f8830000 	swi	r4, r3, 0
	}
2000f96c:	10330000 	addk	r1, r19, r0
2000f970:	ea610004 	lwi	r19, r1, 4
2000f974:	30210008 	addik	r1, r1, 8
2000f978:	b60f0008 	rtsd	r15, 8
2000f97c:	80000000 	or	r0, r0, r0

2000f980 <read_WD>:
	static void read_WD() {
2000f980:	3021ffe0 	addik	r1, r1, -32
2000f984:	f9e10000 	swi	r15, r1, 0
2000f988:	fa61001c 	swi	r19, r1, 28
2000f98c:	12610000 	addk	r19, r1, r0
		index_WD = decoder_motion_framebuf_WD->read_inds[0];
2000f990:	b0002004 	imm	8196
2000f994:	e8606158 	lwi	r3, r0, 24920	// 20046158 <decoder_motion_framebuf_WD>
2000f998:	e863000c 	lwi	r3, r3, 12
2000f99c:	e8630000 	lwi	r3, r3, 0
2000f9a0:	b0002004 	imm	8196
2000f9a4:	f8608f40 	swi	r3, r0, -28864	// 20048f40 <index_WD>
		numTokens_WD = index_WD + fifo_i16_get_num_tokens(decoder_motion_framebuf_WD, 0);
2000f9a8:	b0002004 	imm	8196
2000f9ac:	e8606158 	lwi	r3, r0, 24920	// 20046158 <decoder_motion_framebuf_WD>
2000f9b0:	10a30000 	addk	r5, r3, r0
2000f9b4:	10c00000 	addk	r6, r0, r0
2000f9b8:	b9f4e338 	brlid	r15, -7368	// 2000dcf0 <fifo_i16_get_num_tokens>
2000f9bc:	80000000 	or	r0, r0, r0
2000f9c0:	10830000 	addk	r4, r3, r0
2000f9c4:	b0002004 	imm	8196
2000f9c8:	e8608f40 	lwi	r3, r0, -28864	// 20048f40 <index_WD>
2000f9cc:	10641800 	addk	r3, r4, r3
2000f9d0:	b0002004 	imm	8196
2000f9d4:	f8608f44 	swi	r3, r0, -28860	// 20048f44 <numTokens_WD>
	}
2000f9d8:	e9e10000 	lwi	r15, r1, 0
2000f9dc:	10330000 	addk	r1, r19, r0
2000f9e0:	ea61001c 	lwi	r19, r1, 28
2000f9e4:	30210020 	addik	r1, r1, 32
2000f9e8:	b60f0008 	rtsd	r15, 8
2000f9ec:	80000000 	or	r0, r0, r0

2000f9f0 <read_end_WD>:
	
	static void read_end_WD() {
2000f9f0:	3021fff8 	addik	r1, r1, -8
2000f9f4:	fa610004 	swi	r19, r1, 4
2000f9f8:	12610000 	addk	r19, r1, r0
		decoder_motion_framebuf_WD->read_inds[0] = index_WD;
2000f9fc:	b0002004 	imm	8196
2000fa00:	e8606158 	lwi	r3, r0, 24920	// 20046158 <decoder_motion_framebuf_WD>
2000fa04:	e863000c 	lwi	r3, r3, 12
2000fa08:	b0002004 	imm	8196
2000fa0c:	e8808f40 	lwi	r4, r0, -28864	// 20048f40 <index_WD>
2000fa10:	f8830000 	swi	r4, r3, 0
	}
2000fa14:	10330000 	addk	r1, r19, r0
2000fa18:	ea610004 	lwi	r19, r1, 4
2000fa1c:	30210008 	addik	r1, r1, 8
2000fa20:	b60f0008 	rtsd	r15, 8
2000fa24:	80000000 	or	r0, r0, r0

2000fa28 <write_halfpel>:

	static void write_halfpel() {
2000fa28:	3021ffe0 	addik	r1, r1, -32
2000fa2c:	f9e10000 	swi	r15, r1, 0
2000fa30:	fa61001c 	swi	r19, r1, 28
2000fa34:	12610000 	addk	r19, r1, r0
		index_halfpel = (*decoder_motion_framebuf_halfpel->write_ind);
2000fa38:	b0002004 	imm	8196
2000fa3c:	e8606168 	lwi	r3, r0, 24936	// 20046168 <decoder_motion_framebuf_halfpel>
2000fa40:	e8630010 	lwi	r3, r3, 16
2000fa44:	e8630000 	lwi	r3, r3, 0
2000fa48:	b0002004 	imm	8196
2000fa4c:	f8608f48 	swi	r3, r0, -28856	// 20048f48 <index_halfpel>
		numFree_halfpel = index_halfpel + fifo_i8_get_room(decoder_motion_framebuf_halfpel, NUM_READERS_halfpel);
2000fa50:	b0002004 	imm	8196
2000fa54:	e8606168 	lwi	r3, r0, 24936	// 20046168 <decoder_motion_framebuf_halfpel>
2000fa58:	10a30000 	addk	r5, r3, r0
2000fa5c:	30c00001 	addik	r6, r0, 1
2000fa60:	b9f4e014 	brlid	r15, -8172	// 2000da74 <fifo_i8_get_room>
2000fa64:	80000000 	or	r0, r0, r0
2000fa68:	10830000 	addk	r4, r3, r0
2000fa6c:	b0002004 	imm	8196
2000fa70:	e8608f48 	lwi	r3, r0, -28856	// 20048f48 <index_halfpel>
2000fa74:	10641800 	addk	r3, r4, r3
2000fa78:	b0002004 	imm	8196
2000fa7c:	f8608f4c 	swi	r3, r0, -28852	// 20048f4c <numFree_halfpel>
	}
2000fa80:	e9e10000 	lwi	r15, r1, 0
2000fa84:	10330000 	addk	r1, r19, r0
2000fa88:	ea61001c 	lwi	r19, r1, 28
2000fa8c:	30210020 	addik	r1, r1, 32
2000fa90:	b60f0008 	rtsd	r15, 8
2000fa94:	80000000 	or	r0, r0, r0

2000fa98 <write_end_halfpel>:
	
	static void write_end_halfpel() {
2000fa98:	3021fff8 	addik	r1, r1, -8
2000fa9c:	fa610004 	swi	r19, r1, 4
2000faa0:	12610000 	addk	r19, r1, r0
		(*decoder_motion_framebuf_halfpel->write_ind) = index_halfpel;
2000faa4:	b0002004 	imm	8196
2000faa8:	e8606168 	lwi	r3, r0, 24936	// 20046168 <decoder_motion_framebuf_halfpel>
2000faac:	e8630010 	lwi	r3, r3, 16
2000fab0:	b0002004 	imm	8196
2000fab4:	e8808f48 	lwi	r4, r0, -28856	// 20048f48 <index_halfpel>
2000fab8:	f8830000 	swi	r4, r3, 0
	}
2000fabc:	10330000 	addk	r1, r19, r0
2000fac0:	ea610004 	lwi	r19, r1, 4
2000fac4:	30210008 	addik	r1, r1, 8
2000fac8:	b60f0008 	rtsd	r15, 8
2000facc:	80000000 	or	r0, r0, r0

2000fad0 <write_RD>:
	static void write_RD() {
2000fad0:	3021ffe0 	addik	r1, r1, -32
2000fad4:	f9e10000 	swi	r15, r1, 0
2000fad8:	fa61001c 	swi	r19, r1, 28
2000fadc:	12610000 	addk	r19, r1, r0
		index_RD = (*decoder_motion_framebuf_RD->write_ind);
2000fae0:	b0002004 	imm	8196
2000fae4:	e8606160 	lwi	r3, r0, 24928	// 20046160 <decoder_motion_framebuf_RD>
2000fae8:	e8630010 	lwi	r3, r3, 16
2000faec:	e8630000 	lwi	r3, r3, 0
2000faf0:	b0002004 	imm	8196
2000faf4:	f8608f50 	swi	r3, r0, -28848	// 20048f50 <index_RD>
		numFree_RD = index_RD + fifo_i16_get_room(decoder_motion_framebuf_RD, NUM_READERS_RD);
2000faf8:	b0002004 	imm	8196
2000fafc:	e8606160 	lwi	r3, r0, 24928	// 20046160 <decoder_motion_framebuf_RD>
2000fb00:	10a30000 	addk	r5, r3, r0
2000fb04:	30c00001 	addik	r6, r0, 1
2000fb08:	b9f4e2d8 	brlid	r15, -7464	// 2000dde0 <fifo_i16_get_room>
2000fb0c:	80000000 	or	r0, r0, r0
2000fb10:	10830000 	addk	r4, r3, r0
2000fb14:	b0002004 	imm	8196
2000fb18:	e8608f50 	lwi	r3, r0, -28848	// 20048f50 <index_RD>
2000fb1c:	10641800 	addk	r3, r4, r3
2000fb20:	b0002004 	imm	8196
2000fb24:	f8608f54 	swi	r3, r0, -28844	// 20048f54 <numFree_RD>
	}
2000fb28:	e9e10000 	lwi	r15, r1, 0
2000fb2c:	10330000 	addk	r1, r19, r0
2000fb30:	ea61001c 	lwi	r19, r1, 28
2000fb34:	30210020 	addik	r1, r1, 32
2000fb38:	b60f0008 	rtsd	r15, 8
2000fb3c:	80000000 	or	r0, r0, r0

2000fb40 <write_end_RD>:
	
	static void write_end_RD() {
2000fb40:	3021fff8 	addik	r1, r1, -8
2000fb44:	fa610004 	swi	r19, r1, 4
2000fb48:	12610000 	addk	r19, r1, r0
		(*decoder_motion_framebuf_RD->write_ind) = index_RD;
2000fb4c:	b0002004 	imm	8196
2000fb50:	e8606160 	lwi	r3, r0, 24928	// 20046160 <decoder_motion_framebuf_RD>
2000fb54:	e8630010 	lwi	r3, r3, 16
2000fb58:	b0002004 	imm	8196
2000fb5c:	e8808f50 	lwi	r4, r0, -28848	// 20048f50 <index_RD>
2000fb60:	f8830000 	swi	r4, r3, 0
	}
2000fb64:	10330000 	addk	r1, r19, r0
2000fb68:	ea610004 	lwi	r19, r1, 4
2000fb6c:	30210008 	addik	r1, r1, 8
2000fb70:	b60f0008 	rtsd	r15, 8
2000fb74:	80000000 	or	r0, r0, r0

2000fb78 <advance_block>:

	////////////////////////////////////////////////////////////////////////////////
	// Functions/procedures
	static void advance_block();

	static void advance_block() {
2000fb78:	3021ffe0 	addik	r1, r1, -32
2000fb7c:	fa61001c 	swi	r19, r1, 28
2000fb80:	12610000 	addk	r19, r1, r0
		i32 local_COMP_PER_MB;
		i32 local_mbx_read;
		i32 local_vop_width;
		i32 local_mby_read;
	
		local_outstanding_writes = outstanding_writes;
2000fb84:	b0002006 	imm	8198
2000fb88:	e8601b84 	lwi	r3, r0, 7044	// 20061b84 <outstanding_writes>
2000fb8c:	f8730004 	swi	r3, r19, 4
		outstanding_writes = local_outstanding_writes + 1;
2000fb90:	e8730004 	lwi	r3, r19, 4
2000fb94:	30630001 	addik	r3, r3, 1
2000fb98:	b0002006 	imm	8198
2000fb9c:	f8601b84 	swi	r3, r0, 7044	// 20061b84 <outstanding_writes>
		local_comp_so_far = comp_so_far;
2000fba0:	b0002006 	imm	8198
2000fba4:	e8601b94 	lwi	r3, r0, 7060	// 20061b94 <comp_so_far>
2000fba8:	f8730008 	swi	r3, r19, 8
		comp_so_far = local_comp_so_far + 1;
2000fbac:	e8730008 	lwi	r3, r19, 8
2000fbb0:	30630001 	addik	r3, r3, 1
2000fbb4:	b0002006 	imm	8198
2000fbb8:	f8601b94 	swi	r3, r0, 7060	// 20061b94 <comp_so_far>
		local_comp_so_far = comp_so_far;
2000fbbc:	b0002006 	imm	8198
2000fbc0:	e8601b94 	lwi	r3, r0, 7060	// 20061b94 <comp_so_far>
2000fbc4:	f8730008 	swi	r3, r19, 8
		local_COMP_PER_MB = COMP_PER_MB;
2000fbc8:	30600006 	addik	r3, r0, 6
2000fbcc:	f873000c 	swi	r3, r19, 12
		if (local_comp_so_far == local_COMP_PER_MB) {
2000fbd0:	e8930008 	lwi	r4, r19, 8
2000fbd4:	e873000c 	lwi	r3, r19, 12
2000fbd8:	88641800 	xor	r3, r4, r3
2000fbdc:	bc230074 	bnei	r3, 116		// 2000fc50
			local_mbx_read = mbx_read;
2000fbe0:	b0002006 	imm	8198
2000fbe4:	e8601b7c 	lwi	r3, r0, 7036	// 20061b7c <mbx_read>
2000fbe8:	f8730010 	swi	r3, r19, 16
			mbx_read = local_mbx_read + 1;
2000fbec:	e8730010 	lwi	r3, r19, 16
2000fbf0:	30630001 	addik	r3, r3, 1
2000fbf4:	b0002006 	imm	8198
2000fbf8:	f8601b7c 	swi	r3, r0, 7036	// 20061b7c <mbx_read>
			comp_so_far = 0;
2000fbfc:	b0002006 	imm	8198
2000fc00:	f8001b94 	swi	r0, r0, 7060	// 20061b94 <comp_so_far>
			local_mbx_read = mbx_read;
2000fc04:	b0002006 	imm	8198
2000fc08:	e8601b7c 	lwi	r3, r0, 7036	// 20061b7c <mbx_read>
2000fc0c:	f8730010 	swi	r3, r19, 16
			local_vop_width = vop_width;
2000fc10:	b0002006 	imm	8198
2000fc14:	e8601b58 	lwi	r3, r0, 7000	// 20061b58 <vop_width>
2000fc18:	f8730014 	swi	r3, r19, 20
			if (local_mbx_read == local_vop_width) {
2000fc1c:	e8930010 	lwi	r4, r19, 16
2000fc20:	e8730014 	lwi	r3, r19, 20
2000fc24:	88641800 	xor	r3, r4, r3
2000fc28:	bc230028 	bnei	r3, 40		// 2000fc50
				mbx_read = 0;
2000fc2c:	b0002006 	imm	8198
2000fc30:	f8001b7c 	swi	r0, r0, 7036	// 20061b7c <mbx_read>
				local_mby_read = mby_read;
2000fc34:	b0002006 	imm	8198
2000fc38:	e8601b80 	lwi	r3, r0, 7040	// 20061b80 <mby_read>
2000fc3c:	f8730018 	swi	r3, r19, 24
				mby_read = local_mby_read + 1;
2000fc40:	e8730018 	lwi	r3, r19, 24
2000fc44:	30630001 	addik	r3, r3, 1
2000fc48:	b0002006 	imm	8198
2000fc4c:	f8601b80 	swi	r3, r0, 7040	// 20061b80 <mby_read>
			}
		}
	}
2000fc50:	10330000 	addk	r1, r19, r0
2000fc54:	ea61001c 	lwi	r19, r1, 28
2000fc58:	30210020 	addik	r1, r1, 32
2000fc5c:	b60f0008 	rtsd	r15, 8
2000fc60:	80000000 	or	r0, r0, r0

2000fc64 <isSchedulable_cmd_newVop>:

	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_cmd_newVop() {
2000fc64:	3021ffec 	addik	r1, r1, -20
2000fc68:	fa610010 	swi	r19, r1, 16
2000fc6c:	12610000 	addk	r19, r1, r0
		i32 result;
		i16 cmd;
		i32 local_NEWVOP;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2000fc70:	b0002004 	imm	8196
2000fc74:	e86060b0 	lwi	r3, r0, 24752	// 200460b0 <decoder_motion_framebuf_BTYPE>
2000fc78:	e8830004 	lwi	r4, r3, 4
2000fc7c:	b0002004 	imm	8196
2000fc80:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
2000fc84:	a46301ff 	andi	r3, r3, 511
2000fc88:	10631800 	addk	r3, r3, r3
2000fc8c:	10641800 	addk	r3, r4, r3
2000fc90:	e4630000 	lhui	r3, r3, 0
2000fc94:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
2000fc98:	30600800 	addik	r3, r0, 2048
2000fc9c:	f8730008 	swi	r3, r19, 8
		result = (cmd & local_NEWVOP) != 0;
2000fca0:	e4730004 	lhui	r3, r19, 4
2000fca4:	90830061 	sext16	r4, r3
2000fca8:	e8730008 	lwi	r3, r19, 8
2000fcac:	84841800 	and	r4, r4, r3
2000fcb0:	10600000 	addk	r3, r0, r0
2000fcb4:	8c641c00 	pcmpne	r3, r4, r3
2000fcb8:	a46300ff 	andi	r3, r3, 255
2000fcbc:	f873000c 	swi	r3, r19, 12
		return result;
2000fcc0:	e873000c 	lwi	r3, r19, 12
	}
2000fcc4:	10330000 	addk	r1, r19, r0
2000fcc8:	ea610010 	lwi	r19, r1, 16
2000fccc:	30210014 	addik	r1, r1, 20
2000fcd0:	b60f0008 	rtsd	r15, 8
2000fcd4:	80000000 	or	r0, r0, r0

2000fcd8 <cmd_newVop>:
	
	static void cmd_newVop() {
2000fcd8:	3021ffd4 	addik	r1, r1, -44
2000fcdc:	f9e10000 	swi	r15, r1, 0
2000fce0:	fa610028 	swi	r19, r1, 40
2000fce4:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2000fce8:	b0002004 	imm	8196
2000fcec:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
2000fcf0:	a46301ff 	andi	r3, r3, 511
2000fcf4:	f873001c 	swi	r3, r19, 28
	
		i16 cmd;
		i32 local_ROUND_TYPE;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2000fcf8:	b0002004 	imm	8196
2000fcfc:	e86060b0 	lwi	r3, r0, 24752	// 200460b0 <decoder_motion_framebuf_BTYPE>
2000fd00:	e8830004 	lwi	r4, r3, 4
2000fd04:	b0002004 	imm	8196
2000fd08:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
2000fd0c:	a46301ff 	andi	r3, r3, 511
2000fd10:	10631800 	addk	r3, r3, r3
2000fd14:	10641800 	addk	r3, r4, r3
2000fd18:	e4630000 	lhui	r3, r3, 0
2000fd1c:	f4730020 	shi	r3, r19, 32
		local_ROUND_TYPE = Constants_ROUND_TYPE;
2000fd20:	30600020 	addik	r3, r0, 32	// 20 <_vector_hw_exception>
2000fd24:	f8730024 	swi	r3, r19, 36
		if ((cmd & local_ROUND_TYPE) != 0) {
2000fd28:	e4730020 	lhui	r3, r19, 32
2000fd2c:	90830061 	sext16	r4, r3
2000fd30:	e8730024 	lwi	r3, r19, 36
2000fd34:	84641800 	and	r3, r4, r3
2000fd38:	bc030014 	beqi	r3, 20		// 2000fd4c
			vop_rounding_mode = 1;
2000fd3c:	30600001 	addik	r3, r0, 1
2000fd40:	b0002006 	imm	8198
2000fd44:	f8601b68 	swi	r3, r0, 7016	// 20061b68 <vop_rounding_mode>
2000fd48:	b800000c 	bri	12		// 2000fd54
		} else {
			vop_rounding_mode = 0;
2000fd4c:	b0002006 	imm	8198
2000fd50:	f8001b68 	swi	r0, r0, 7016	// 20061b68 <vop_rounding_mode>
		}
		comp_so_far = 0;
2000fd54:	b0002006 	imm	8198
2000fd58:	f8001b94 	swi	r0, r0, 7060	// 20061b94 <comp_so_far>
	
		// Update ports indexes
		index_BTYPE += 1;
2000fd5c:	b0002004 	imm	8196
2000fd60:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
2000fd64:	30630001 	addik	r3, r3, 1
2000fd68:	b0002004 	imm	8196
2000fd6c:	f8608f38 	swi	r3, r0, -28872	// 20048f38 <index_BTYPE>
		
		read_end_BTYPE();
2000fd70:	b9f4fbd4 	brlid	r15, -1068	// 2000f944 <read_end_BTYPE>
2000fd74:	80000000 	or	r0, r0, r0
	}
2000fd78:	e9e10000 	lwi	r15, r1, 0
2000fd7c:	10330000 	addk	r1, r19, r0
2000fd80:	ea610028 	lwi	r19, r1, 40
2000fd84:	3021002c 	addik	r1, r1, 44
2000fd88:	b60f0008 	rtsd	r15, 8
2000fd8c:	80000000 	or	r0, r0, r0

2000fd90 <isSchedulable_get_w_h>:
	static i32 isSchedulable_get_w_h() {
2000fd90:	3021fff4 	addik	r1, r1, -12
2000fd94:	fa610008 	swi	r19, r1, 8
2000fd98:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2000fd9c:	30600001 	addik	r3, r0, 1
2000fda0:	f8730004 	swi	r3, r19, 4
		return result;
2000fda4:	e8730004 	lwi	r3, r19, 4
	}
2000fda8:	10330000 	addk	r1, r19, r0
2000fdac:	ea610008 	lwi	r19, r1, 8
2000fdb0:	3021000c 	addik	r1, r1, 12
2000fdb4:	b60f0008 	rtsd	r15, 8
2000fdb8:	80000000 	or	r0, r0, r0

2000fdbc <get_w_h>:
	
	static void get_w_h() {
2000fdbc:	3021ffa0 	addik	r1, r1, -96
2000fdc0:	f9e10000 	swi	r15, r1, 0
2000fdc4:	fa61005c 	swi	r19, r1, 92
2000fdc8:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2000fdcc:	b0002004 	imm	8196
2000fdd0:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
2000fdd4:	a46301ff 	andi	r3, r3, 511
2000fdd8:	f873001c 	swi	r3, r19, 28
		i32 local_start_of_frame;
		i32 local_BUFFER_SIZE;
		i32 local_start_of_frame_U;
		i32 local_BUFFER_SIZE_UV;
	
		w = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2000fddc:	b0002004 	imm	8196
2000fde0:	e86060b0 	lwi	r3, r0, 24752	// 200460b0 <decoder_motion_framebuf_BTYPE>
2000fde4:	e8830004 	lwi	r4, r3, 4
2000fde8:	b0002004 	imm	8196
2000fdec:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
2000fdf0:	a46301ff 	andi	r3, r3, 511
2000fdf4:	10631800 	addk	r3, r3, r3
2000fdf8:	10641800 	addk	r3, r4, r3
2000fdfc:	e4630000 	lhui	r3, r3, 0
2000fe00:	f4730020 	shi	r3, r19, 32
		h = tokens_BTYPE[(index_BTYPE + (1)) % SIZE_BTYPE];
2000fe04:	b0002004 	imm	8196
2000fe08:	e86060b0 	lwi	r3, r0, 24752	// 200460b0 <decoder_motion_framebuf_BTYPE>
2000fe0c:	e8830004 	lwi	r4, r3, 4
2000fe10:	b0002004 	imm	8196
2000fe14:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
2000fe18:	30630001 	addik	r3, r3, 1
2000fe1c:	a46301ff 	andi	r3, r3, 511
2000fe20:	10631800 	addk	r3, r3, r3
2000fe24:	10641800 	addk	r3, r4, r3
2000fe28:	e4630000 	lhui	r3, r3, 0
2000fe2c:	f4730022 	shi	r3, r19, 34
		local_vop_height = vop_height;
2000fe30:	b0002006 	imm	8198
2000fe34:	e8601b5c 	lwi	r3, r0, 7004	// 20061b5c <vop_height>
2000fe38:	f8730024 	swi	r3, r19, 36
		local_SAMPLES_PER_MB = SAMPLES_PER_MB;
2000fe3c:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
2000fe40:	f8730028 	swi	r3, r19, 40
		local_MAXW_IN_SAMPLES = MAXW_IN_SAMPLES;
2000fe44:	306000c0 	addik	r3, r0, 192
2000fe48:	f873002c 	swi	r3, r19, 44
		last_frame_size = local_vop_height * local_SAMPLES_PER_MB * local_MAXW_IN_SAMPLES;
2000fe4c:	e8930024 	lwi	r4, r19, 36
2000fe50:	e8730028 	lwi	r3, r19, 40
2000fe54:	40841800 	mul	r4, r4, r3
2000fe58:	e873002c 	lwi	r3, r19, 44
2000fe5c:	40641800 	mul	r3, r4, r3
2000fe60:	f8730030 	swi	r3, r19, 48
		local_vop_height = vop_height;
2000fe64:	b0002006 	imm	8198
2000fe68:	e8601b5c 	lwi	r3, r0, 7004	// 20061b5c <vop_height>
2000fe6c:	f8730024 	swi	r3, r19, 36
		local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
2000fe70:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2000fe74:	f8730034 	swi	r3, r19, 52
		local_MAXW_IN_SAMPLES_UV = MAXW_IN_SAMPLES_UV;
2000fe78:	30600060 	addik	r3, r0, 96
2000fe7c:	f8730038 	swi	r3, r19, 56
		last_frame_size_UV = local_vop_height * local_SAMPLES_PER_MB_UV * local_MAXW_IN_SAMPLES_UV;
2000fe80:	e8930024 	lwi	r4, r19, 36
2000fe84:	e8730034 	lwi	r3, r19, 52
2000fe88:	40841800 	mul	r4, r4, r3
2000fe8c:	e8730038 	lwi	r3, r19, 56
2000fe90:	40641800 	mul	r3, r4, r3
2000fe94:	f873003c 	swi	r3, r19, 60
		vop_width = w;
2000fe98:	e4730020 	lhui	r3, r19, 32
2000fe9c:	90630061 	sext16	r3, r3
2000fea0:	b0002006 	imm	8198
2000fea4:	f8601b58 	swi	r3, r0, 7000	// 20061b58 <vop_width>
		vop_height = h;
2000fea8:	e4730022 	lhui	r3, r19, 34
2000feac:	90630061 	sext16	r3, r3
2000feb0:	b0002006 	imm	8198
2000feb4:	f8601b5c 	swi	r3, r0, 7004	// 20061b5c <vop_height>
		local_SAMPLES_PER_MB = SAMPLES_PER_MB;
2000feb8:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
2000febc:	f8730028 	swi	r3, r19, 40
		vop_width_in_samples = w * local_SAMPLES_PER_MB;
2000fec0:	e4730020 	lhui	r3, r19, 32
2000fec4:	90830061 	sext16	r4, r3
2000fec8:	e8730028 	lwi	r3, r19, 40
2000fecc:	40641800 	mul	r3, r4, r3
2000fed0:	b0002006 	imm	8198
2000fed4:	f8601b60 	swi	r3, r0, 7008	// 20061b60 <vop_width_in_samples>
		local_SAMPLES_PER_MB = SAMPLES_PER_MB;
2000fed8:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
2000fedc:	f8730028 	swi	r3, r19, 40
		vop_height_in_samples = h * local_SAMPLES_PER_MB;
2000fee0:	e4730022 	lhui	r3, r19, 34
2000fee4:	90830061 	sext16	r4, r3
2000fee8:	e8730028 	lwi	r3, r19, 40
2000feec:	40641800 	mul	r3, r4, r3
2000fef0:	b0002006 	imm	8198
2000fef4:	f8601b64 	swi	r3, r0, 7012	// 20061b64 <vop_height_in_samples>
		local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
2000fef8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2000fefc:	f8730034 	swi	r3, r19, 52
		vop_width_in_samples_U = w * local_SAMPLES_PER_MB_UV;
2000ff00:	e4730020 	lhui	r3, r19, 32
2000ff04:	90830061 	sext16	r4, r3
2000ff08:	e8730034 	lwi	r3, r19, 52
2000ff0c:	40641800 	mul	r3, r4, r3
2000ff10:	b0002006 	imm	8198
2000ff14:	f8601b70 	swi	r3, r0, 7024	// 20061b70 <vop_width_in_samples_U>
		local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
2000ff18:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2000ff1c:	f8730034 	swi	r3, r19, 52
		vop_height_in_samples_U = h * local_SAMPLES_PER_MB_UV;
2000ff20:	e4730022 	lhui	r3, r19, 34
2000ff24:	90830061 	sext16	r4, r3
2000ff28:	e8730034 	lwi	r3, r19, 52
2000ff2c:	40641800 	mul	r3, r4, r3
2000ff30:	b0002006 	imm	8198
2000ff34:	f8601b74 	swi	r3, r0, 7028	// 20061b74 <vop_height_in_samples_U>
		local_vop_height = vop_height;
2000ff38:	b0002006 	imm	8198
2000ff3c:	e8601b5c 	lwi	r3, r0, 7004	// 20061b5c <vop_height>
2000ff40:	f8730024 	swi	r3, r19, 36
		local_HALF_SEARCH = HALF_SEARCH;
2000ff44:	30600001 	addik	r3, r0, 1
2000ff48:	f8730040 	swi	r3, r19, 64
		local_vop_width = vop_width;
2000ff4c:	b0002006 	imm	8198
2000ff50:	e8601b58 	lwi	r3, r0, 7000	// 20061b58 <vop_width>
2000ff54:	f8730044 	swi	r3, r19, 68
		local_COMP_PER_MB = COMP_PER_MB;
2000ff58:	30600006 	addik	r3, r0, 6
2000ff5c:	f8730048 	swi	r3, r19, 72
		max_outstanding_writes = (local_vop_height - local_HALF_SEARCH) * local_vop_width * local_COMP_PER_MB;
2000ff60:	e8930024 	lwi	r4, r19, 36
2000ff64:	e8730040 	lwi	r3, r19, 64
2000ff68:	14832000 	rsubk	r4, r3, r4
2000ff6c:	e8730044 	lwi	r3, r19, 68
2000ff70:	40841800 	mul	r4, r4, r3
2000ff74:	e8730048 	lwi	r3, r19, 72
2000ff78:	40641800 	mul	r3, r4, r3
2000ff7c:	b0002006 	imm	8198
2000ff80:	f8601b6c 	swi	r3, r0, 7020	// 20061b6c <max_outstanding_writes>
		mbx_read = 0;
2000ff84:	b0002006 	imm	8198
2000ff88:	f8001b7c 	swi	r0, r0, 7036	// 20061b7c <mbx_read>
		mby_read = 0;
2000ff8c:	b0002006 	imm	8198
2000ff90:	f8001b80 	swi	r0, r0, 7040	// 20061b80 <mby_read>
		if (last_frame_size != 0) {
2000ff94:	e8730030 	lwi	r3, r19, 48
2000ff98:	bc030028 	beqi	r3, 40		// 2000ffc0
			local_start_of_frame = start_of_frame;
2000ff9c:	b0002004 	imm	8196
2000ffa0:	e8606170 	lwi	r3, r0, 24944	// 20046170 <start_of_frame>
2000ffa4:	f873004c 	swi	r3, r19, 76
			start_of_frame = local_start_of_frame + last_frame_size;
2000ffa8:	e893004c 	lwi	r4, r19, 76
2000ffac:	e8730030 	lwi	r3, r19, 48
2000ffb0:	10641800 	addk	r3, r4, r3
2000ffb4:	b0002004 	imm	8196
2000ffb8:	f8606170 	swi	r3, r0, 24944	// 20046170 <start_of_frame>
2000ffbc:	b8000050 	bri	80		// 2001000c
		} else {
			local_BUFFER_SIZE = BUFFER_SIZE;
2000ffc0:	b0000000 	imm	0
2000ffc4:	30608400 	addik	r3, r0, -31744
2000ffc8:	f8730050 	swi	r3, r19, 80
			local_vop_height = vop_height;
2000ffcc:	b0002006 	imm	8198
2000ffd0:	e8601b5c 	lwi	r3, r0, 7004	// 20061b5c <vop_height>
2000ffd4:	f8730024 	swi	r3, r19, 36
			local_SAMPLES_PER_MB = SAMPLES_PER_MB;
2000ffd8:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
2000ffdc:	f8730028 	swi	r3, r19, 40
			local_MAXW_IN_SAMPLES = MAXW_IN_SAMPLES;
2000ffe0:	306000c0 	addik	r3, r0, 192
2000ffe4:	f873002c 	swi	r3, r19, 44
			start_of_frame = local_BUFFER_SIZE - local_vop_height * local_SAMPLES_PER_MB * local_MAXW_IN_SAMPLES;
2000ffe8:	e8930024 	lwi	r4, r19, 36
2000ffec:	e8730028 	lwi	r3, r19, 40
2000fff0:	40841800 	mul	r4, r4, r3
2000fff4:	e873002c 	lwi	r3, r19, 44
2000fff8:	40641800 	mul	r3, r4, r3
2000fffc:	e8930050 	lwi	r4, r19, 80
20010000:	14632000 	rsubk	r3, r3, r4
20010004:	b0002004 	imm	8196
20010008:	f8606170 	swi	r3, r0, 24944	// 20046170 <start_of_frame>
		}
		if (last_frame_size_UV != 0) {
2001000c:	e873003c 	lwi	r3, r19, 60
20010010:	bc030028 	beqi	r3, 40		// 20010038
			local_start_of_frame_U = start_of_frame_U;
20010014:	b0002004 	imm	8196
20010018:	e8606174 	lwi	r3, r0, 24948	// 20046174 <start_of_frame_U>
2001001c:	f8730054 	swi	r3, r19, 84
			start_of_frame_U = local_start_of_frame_U + last_frame_size_UV;
20010020:	e8930054 	lwi	r4, r19, 84
20010024:	e873003c 	lwi	r3, r19, 60
20010028:	10641800 	addk	r3, r4, r3
2001002c:	b0002004 	imm	8196
20010030:	f8606174 	swi	r3, r0, 24948	// 20046174 <start_of_frame_U>
20010034:	b800004c 	bri	76		// 20010080
		} else {
			local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
20010038:	30602100 	addik	r3, r0, 8448
2001003c:	f8730058 	swi	r3, r19, 88
			local_vop_height = vop_height;
20010040:	b0002006 	imm	8198
20010044:	e8601b5c 	lwi	r3, r0, 7004	// 20061b5c <vop_height>
20010048:	f8730024 	swi	r3, r19, 36
			local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
2001004c:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20010050:	f8730034 	swi	r3, r19, 52
			local_MAXW_IN_SAMPLES_UV = MAXW_IN_SAMPLES_UV;
20010054:	30600060 	addik	r3, r0, 96
20010058:	f8730038 	swi	r3, r19, 56
			start_of_frame_U = local_BUFFER_SIZE_UV - local_vop_height * local_SAMPLES_PER_MB_UV * local_MAXW_IN_SAMPLES_UV;
2001005c:	e8930024 	lwi	r4, r19, 36
20010060:	e8730034 	lwi	r3, r19, 52
20010064:	40841800 	mul	r4, r4, r3
20010068:	e8730038 	lwi	r3, r19, 56
2001006c:	40641800 	mul	r3, r4, r3
20010070:	e8930058 	lwi	r4, r19, 88
20010074:	14632000 	rsubk	r3, r3, r4
20010078:	b0002004 	imm	8196
2001007c:	f8606174 	swi	r3, r0, 24948	// 20046174 <start_of_frame_U>
		}
		local_start_of_frame = start_of_frame;
20010080:	b0002004 	imm	8196
20010084:	e8606170 	lwi	r3, r0, 24944	// 20046170 <start_of_frame>
20010088:	f873004c 	swi	r3, r19, 76
		local_BUFFER_SIZE = BUFFER_SIZE;
2001008c:	b0000000 	imm	0
20010090:	30608400 	addik	r3, r0, -31744
20010094:	f8730050 	swi	r3, r19, 80
		if (local_start_of_frame >= local_BUFFER_SIZE) {
20010098:	e893004c 	lwi	r4, r19, 76
2001009c:	e8730050 	lwi	r3, r19, 80
200100a0:	16432001 	cmp	r18, r3, r4
200100a4:	bc520030 	blti	r18, 48		// 200100d4
			local_start_of_frame = start_of_frame;
200100a8:	b0002004 	imm	8196
200100ac:	e8606170 	lwi	r3, r0, 24944	// 20046170 <start_of_frame>
200100b0:	f873004c 	swi	r3, r19, 76
			local_BUFFER_SIZE = BUFFER_SIZE;
200100b4:	b0000000 	imm	0
200100b8:	30608400 	addik	r3, r0, -31744
200100bc:	f8730050 	swi	r3, r19, 80
			start_of_frame = local_start_of_frame - local_BUFFER_SIZE;
200100c0:	e893004c 	lwi	r4, r19, 76
200100c4:	e8730050 	lwi	r3, r19, 80
200100c8:	14632000 	rsubk	r3, r3, r4
200100cc:	b0002004 	imm	8196
200100d0:	f8606170 	swi	r3, r0, 24944	// 20046170 <start_of_frame>
		}
		local_start_of_frame_U = start_of_frame_U;
200100d4:	b0002004 	imm	8196
200100d8:	e8606174 	lwi	r3, r0, 24948	// 20046174 <start_of_frame_U>
200100dc:	f8730054 	swi	r3, r19, 84
		local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
200100e0:	30602100 	addik	r3, r0, 8448
200100e4:	f8730058 	swi	r3, r19, 88
		if (local_start_of_frame_U >= local_BUFFER_SIZE_UV) {
200100e8:	e8930054 	lwi	r4, r19, 84
200100ec:	e8730058 	lwi	r3, r19, 88
200100f0:	16432001 	cmp	r18, r3, r4
200100f4:	bc52002c 	blti	r18, 44		// 20010120
			local_start_of_frame_U = start_of_frame_U;
200100f8:	b0002004 	imm	8196
200100fc:	e8606174 	lwi	r3, r0, 24948	// 20046174 <start_of_frame_U>
20010100:	f8730054 	swi	r3, r19, 84
			local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
20010104:	30602100 	addik	r3, r0, 8448
20010108:	f8730058 	swi	r3, r19, 88
			start_of_frame_U = local_start_of_frame_U - local_BUFFER_SIZE_UV;
2001010c:	e8930054 	lwi	r4, r19, 84
20010110:	e8730058 	lwi	r3, r19, 88
20010114:	14632000 	rsubk	r3, r3, r4
20010118:	b0002004 	imm	8196
2001011c:	f8606174 	swi	r3, r0, 24948	// 20046174 <start_of_frame_U>
		}
	
		// Update ports indexes
		index_BTYPE += 2;
20010120:	b0002004 	imm	8196
20010124:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
20010128:	30630002 	addik	r3, r3, 2
2001012c:	b0002004 	imm	8196
20010130:	f8608f38 	swi	r3, r0, -28872	// 20048f38 <index_BTYPE>
		
		read_end_BTYPE();
20010134:	b9f4f810 	brlid	r15, -2032	// 2000f944 <read_end_BTYPE>
20010138:	80000000 	or	r0, r0, r0
	}
2001013c:	e9e10000 	lwi	r15, r1, 0
20010140:	10330000 	addk	r1, r19, r0
20010144:	ea61005c 	lwi	r19, r1, 92
20010148:	30210060 	addik	r1, r1, 96
2001014c:	b60f0008 	rtsd	r15, 8
20010150:	80000000 	or	r0, r0, r0

20010154 <isSchedulable_cmd_noMotion>:
	static i32 isSchedulable_cmd_noMotion() {
20010154:	3021ffec 	addik	r1, r1, -20
20010158:	fa610010 	swi	r19, r1, 16
2001015c:	12610000 	addk	r19, r1, r0
		i32 result;
		i16 cmd;
		i32 local_INTRA;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20010160:	b0002004 	imm	8196
20010164:	e86060b0 	lwi	r3, r0, 24752	// 200460b0 <decoder_motion_framebuf_BTYPE>
20010168:	e8830004 	lwi	r4, r3, 4
2001016c:	b0002004 	imm	8196
20010170:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
20010174:	a46301ff 	andi	r3, r3, 511
20010178:	10631800 	addk	r3, r3, r3
2001017c:	10641800 	addk	r3, r4, r3
20010180:	e4630000 	lhui	r3, r3, 0
20010184:	f4730004 	shi	r3, r19, 4
		local_INTRA = ConstantsBtype_INTRA;
20010188:	30600400 	addik	r3, r0, 1024	// 400 <_HEAP_SIZE>
2001018c:	f8730008 	swi	r3, r19, 8
		result = (cmd & local_INTRA) != 0;
20010190:	e4730004 	lhui	r3, r19, 4
20010194:	90830061 	sext16	r4, r3
20010198:	e8730008 	lwi	r3, r19, 8
2001019c:	84841800 	and	r4, r4, r3
200101a0:	10600000 	addk	r3, r0, r0
200101a4:	8c641c00 	pcmpne	r3, r4, r3
200101a8:	a46300ff 	andi	r3, r3, 255
200101ac:	f873000c 	swi	r3, r19, 12
		return result;
200101b0:	e873000c 	lwi	r3, r19, 12
	}
200101b4:	10330000 	addk	r1, r19, r0
200101b8:	ea610010 	lwi	r19, r1, 16
200101bc:	30210014 	addik	r1, r1, 20
200101c0:	b60f0008 	rtsd	r15, 8
200101c4:	80000000 	or	r0, r0, r0

200101c8 <cmd_noMotion>:
	
	static void cmd_noMotion() {
200101c8:	3021ffd8 	addik	r1, r1, -40
200101cc:	f9e10000 	swi	r15, r1, 0
200101d0:	fa610024 	swi	r19, r1, 36
200101d4:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
200101d8:	b0002004 	imm	8196
200101dc:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
200101e0:	a46301ff 	andi	r3, r3, 511
200101e4:	f873001c 	swi	r3, r19, 28
	
		i16 cmd;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
200101e8:	b0002004 	imm	8196
200101ec:	e86060b0 	lwi	r3, r0, 24752	// 200460b0 <decoder_motion_framebuf_BTYPE>
200101f0:	e8830004 	lwi	r4, r3, 4
200101f4:	b0002004 	imm	8196
200101f8:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
200101fc:	a46301ff 	andi	r3, r3, 511
20010200:	10631800 	addk	r3, r3, r3
20010204:	10641800 	addk	r3, r4, r3
20010208:	e4630000 	lhui	r3, r3, 0
2001020c:	f4730020 	shi	r3, r19, 32
		advance_block();
20010210:	b9f4f968 	brlid	r15, -1688	// 2000fb78 <advance_block>
20010214:	80000000 	or	r0, r0, r0
	
		// Update ports indexes
		index_BTYPE += 1;
20010218:	b0002004 	imm	8196
2001021c:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
20010220:	30630001 	addik	r3, r3, 1
20010224:	b0002004 	imm	8196
20010228:	f8608f38 	swi	r3, r0, -28872	// 20048f38 <index_BTYPE>
		
		read_end_BTYPE();
2001022c:	b9f4f718 	brlid	r15, -2280	// 2000f944 <read_end_BTYPE>
20010230:	80000000 	or	r0, r0, r0
	}
20010234:	e9e10000 	lwi	r15, r1, 0
20010238:	10330000 	addk	r1, r19, r0
2001023c:	ea610024 	lwi	r19, r1, 36
20010240:	30210028 	addik	r1, r1, 40
20010244:	b60f0008 	rtsd	r15, 8
20010248:	80000000 	or	r0, r0, r0

2001024c <isSchedulable_cmd_motion>:
	static i32 isSchedulable_cmd_motion() {
2001024c:	3021ffec 	addik	r1, r1, -20
20010250:	fa610010 	swi	r19, r1, 16
20010254:	12610000 	addk	r19, r1, r0
		i32 result;
		i16 cmd;
		i32 local_MOTION;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20010258:	b0002004 	imm	8196
2001025c:	e86060b0 	lwi	r3, r0, 24752	// 200460b0 <decoder_motion_framebuf_BTYPE>
20010260:	e8830004 	lwi	r4, r3, 4
20010264:	b0002004 	imm	8196
20010268:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
2001026c:	a46301ff 	andi	r3, r3, 511
20010270:	10631800 	addk	r3, r3, r3
20010274:	10641800 	addk	r3, r4, r3
20010278:	e4630000 	lhui	r3, r3, 0
2001027c:	f4730004 	shi	r3, r19, 4
		local_MOTION = ConstantsBtype_MOTION;
20010280:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20010284:	f8730008 	swi	r3, r19, 8
		result = (cmd & local_MOTION) != 0;
20010288:	e4730004 	lhui	r3, r19, 4
2001028c:	90830061 	sext16	r4, r3
20010290:	e8730008 	lwi	r3, r19, 8
20010294:	84841800 	and	r4, r4, r3
20010298:	10600000 	addk	r3, r0, r0
2001029c:	8c641c00 	pcmpne	r3, r4, r3
200102a0:	a46300ff 	andi	r3, r3, 255
200102a4:	f873000c 	swi	r3, r19, 12
		return result;
200102a8:	e873000c 	lwi	r3, r19, 12
	}
200102ac:	10330000 	addk	r1, r19, r0
200102b0:	ea610010 	lwi	r19, r1, 16
200102b4:	30210014 	addik	r1, r1, 20
200102b8:	b60f0008 	rtsd	r15, 8
200102bc:	80000000 	or	r0, r0, r0

200102c0 <cmd_motion>:
	
	static void cmd_motion() {
200102c0:	3021ffd8 	addik	r1, r1, -40
200102c4:	f9e10000 	swi	r15, r1, 0
200102c8:	fa610024 	swi	r19, r1, 36
200102cc:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
200102d0:	b0002004 	imm	8196
200102d4:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
200102d8:	a46301ff 	andi	r3, r3, 511
200102dc:	f873001c 	swi	r3, r19, 28
	
		i16 cmd;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
200102e0:	b0002004 	imm	8196
200102e4:	e86060b0 	lwi	r3, r0, 24752	// 200460b0 <decoder_motion_framebuf_BTYPE>
200102e8:	e8830004 	lwi	r4, r3, 4
200102ec:	b0002004 	imm	8196
200102f0:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
200102f4:	a46301ff 	andi	r3, r3, 511
200102f8:	10631800 	addk	r3, r3, r3
200102fc:	10641800 	addk	r3, r4, r3
20010300:	e4630000 	lhui	r3, r3, 0
20010304:	f4730020 	shi	r3, r19, 32
	
		// Update ports indexes
		index_BTYPE += 1;
20010308:	b0002004 	imm	8196
2001030c:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
20010310:	30630001 	addik	r3, r3, 1
20010314:	b0002004 	imm	8196
20010318:	f8608f38 	swi	r3, r0, -28872	// 20048f38 <index_BTYPE>
		
		read_end_BTYPE();
2001031c:	b9f4f628 	brlid	r15, -2520	// 2000f944 <read_end_BTYPE>
20010320:	80000000 	or	r0, r0, r0
	}
20010324:	e9e10000 	lwi	r15, r1, 0
20010328:	10330000 	addk	r1, r19, r0
2001032c:	ea610024 	lwi	r19, r1, 36
20010330:	30210028 	addik	r1, r1, 40
20010334:	b60f0008 	rtsd	r15, 8
20010338:	80000000 	or	r0, r0, r0

2001033c <isSchedulable_read_mv>:
	static i32 isSchedulable_read_mv() {
2001033c:	3021fff4 	addik	r1, r1, -12
20010340:	fa610008 	swi	r19, r1, 8
20010344:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
20010348:	30600001 	addik	r3, r0, 1
2001034c:	f8730004 	swi	r3, r19, 4
		return result;
20010350:	e8730004 	lwi	r3, r19, 4
	}
20010354:	10330000 	addk	r1, r19, r0
20010358:	ea610008 	lwi	r19, r1, 8
2001035c:	3021000c 	addik	r1, r1, 12
20010360:	b60f0008 	rtsd	r15, 8
20010364:	80000000 	or	r0, r0, r0

20010368 <read_mv>:
	
	static void read_mv() {
20010368:	3021ffcc 	addik	r1, r1, -52
2001036c:	f9e10000 	swi	r15, r1, 0
20010370:	fa610030 	swi	r19, r1, 48
20010374:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_MV = index_MV % SIZE_MV;
20010378:	b0002004 	imm	8196
2001037c:	e8608f30 	lwi	r3, r0, -28880	// 20048f30 <index_MV>
20010380:	a46301ff 	andi	r3, r3, 511
20010384:	f873001c 	swi	r3, r19, 28
		i32 index_aligned_halfpel = index_halfpel % SIZE_halfpel;
20010388:	b0002004 	imm	8196
2001038c:	e8608f48 	lwi	r3, r0, -28856	// 20048f48 <index_halfpel>
20010390:	a46301ff 	andi	r3, r3, 511
20010394:	f8730020 	swi	r3, r19, 32
		i16 x;
		i16 y;
		i32 local_vop_rounding_mode;
		i8 flags;
	
		x = tokens_MV[(index_MV + (0)) % SIZE_MV];
20010398:	b0002004 	imm	8196
2001039c:	e86060d0 	lwi	r3, r0, 24784	// 200460d0 <decoder_motion_framebuf_MV>
200103a0:	e8830004 	lwi	r4, r3, 4
200103a4:	b0002004 	imm	8196
200103a8:	e8608f30 	lwi	r3, r0, -28880	// 20048f30 <index_MV>
200103ac:	a46301ff 	andi	r3, r3, 511
200103b0:	10631800 	addk	r3, r3, r3
200103b4:	10641800 	addk	r3, r4, r3
200103b8:	e4630000 	lhui	r3, r3, 0
200103bc:	f4730024 	shi	r3, r19, 36
		y = tokens_MV[(index_MV + (1)) % SIZE_MV];
200103c0:	b0002004 	imm	8196
200103c4:	e86060d0 	lwi	r3, r0, 24784	// 200460d0 <decoder_motion_framebuf_MV>
200103c8:	e8830004 	lwi	r4, r3, 4
200103cc:	b0002004 	imm	8196
200103d0:	e8608f30 	lwi	r3, r0, -28880	// 20048f30 <index_MV>
200103d4:	30630001 	addik	r3, r3, 1
200103d8:	a46301ff 	andi	r3, r3, 511
200103dc:	10631800 	addk	r3, r3, r3
200103e0:	10641800 	addk	r3, r4, r3
200103e4:	e4630000 	lhui	r3, r3, 0
200103e8:	f4730026 	shi	r3, r19, 38
		local_vop_rounding_mode = vop_rounding_mode;
200103ec:	b0002006 	imm	8198
200103f0:	e8601b68 	lwi	r3, r0, 7016	// 20061b68 <vop_rounding_mode>
200103f4:	f8730028 	swi	r3, r19, 40
		flags = ((x & 1) << 2) + ((y & 1) << 1) + local_vop_rounding_mode;
200103f8:	e4730024 	lhui	r3, r19, 36
200103fc:	a46300ff 	andi	r3, r3, 255
20010400:	a4630001 	andi	r3, r3, 1
20010404:	a46300ff 	andi	r3, r3, 255
20010408:	64630402 	bslli	r3, r3, 2
2001040c:	a48300ff 	andi	r4, r3, 255
20010410:	e4730026 	lhui	r3, r19, 38
20010414:	a46300ff 	andi	r3, r3, 255
20010418:	a4630001 	andi	r3, r3, 1
2001041c:	a46300ff 	andi	r3, r3, 255
20010420:	10631800 	addk	r3, r3, r3
20010424:	a46300ff 	andi	r3, r3, 255
20010428:	10641800 	addk	r3, r4, r3
2001042c:	a48300ff 	andi	r4, r3, 255
20010430:	e8730028 	lwi	r3, r19, 40
20010434:	a46300ff 	andi	r3, r3, 255
20010438:	10641800 	addk	r3, r4, r3
2001043c:	a46300ff 	andi	r3, r3, 255
20010440:	f073002c 	sbi	r3, r19, 44
		mvx = x >> 1;
20010444:	e4730024 	lhui	r3, r19, 36
20010448:	90630061 	sext16	r3, r3
2001044c:	90630001 	sra	r3, r3
20010450:	90630061 	sext16	r3, r3
20010454:	b0002006 	imm	8198
20010458:	f4601b78 	shi	r3, r0, 7032	// 20061b78 <mvx>
		mvy = y >> 1;
2001045c:	e4730026 	lhui	r3, r19, 38
20010460:	90630061 	sext16	r3, r3
20010464:	90630001 	sra	r3, r3
20010468:	90630061 	sext16	r3, r3
2001046c:	b0002006 	imm	8198
20010470:	f4601b7a 	shi	r3, r0, 7034	// 20061b7a <mvy>
		tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel] = flags;
20010474:	b0002004 	imm	8196
20010478:	e8606168 	lwi	r3, r0, 24936	// 20046168 <decoder_motion_framebuf_halfpel>
2001047c:	e8830004 	lwi	r4, r3, 4
20010480:	b0002004 	imm	8196
20010484:	e8608f48 	lwi	r3, r0, -28856	// 20048f48 <index_halfpel>
20010488:	a46301ff 	andi	r3, r3, 511
2001048c:	10641800 	addk	r3, r4, r3
20010490:	e093002c 	lbui	r4, r19, 44
20010494:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		index_MV += 2;
20010498:	b0002004 	imm	8196
2001049c:	e8608f30 	lwi	r3, r0, -28880	// 20048f30 <index_MV>
200104a0:	30630002 	addik	r3, r3, 2
200104a4:	b0002004 	imm	8196
200104a8:	f8608f30 	swi	r3, r0, -28880	// 20048f30 <index_MV>
		index_halfpel += 1;
200104ac:	b0002004 	imm	8196
200104b0:	e8608f48 	lwi	r3, r0, -28856	// 20048f48 <index_halfpel>
200104b4:	30630001 	addik	r3, r3, 1
200104b8:	b0002004 	imm	8196
200104bc:	f8608f48 	swi	r3, r0, -28856	// 20048f48 <index_halfpel>
		
		read_end_MV();
200104c0:	b9f4f3dc 	brlid	r15, -3108	// 2000f89c <read_end_MV>
200104c4:	80000000 	or	r0, r0, r0
		write_end_halfpel();
200104c8:	b9f4f5d0 	brlid	r15, -2608	// 2000fa98 <write_end_halfpel>
200104cc:	80000000 	or	r0, r0, r0
	}
200104d0:	e9e10000 	lwi	r15, r1, 0
200104d4:	10330000 	addk	r1, r19, r0
200104d8:	ea610030 	lwi	r19, r1, 48
200104dc:	30210034 	addik	r1, r1, 52
200104e0:	b60f0008 	rtsd	r15, 8
200104e4:	80000000 	or	r0, r0, r0

200104e8 <isSchedulable_cmd_neither>:
	static i32 isSchedulable_cmd_neither() {
200104e8:	3021fff4 	addik	r1, r1, -12
200104ec:	fa610008 	swi	r19, r1, 8
200104f0:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
200104f4:	30600001 	addik	r3, r0, 1
200104f8:	f8730004 	swi	r3, r19, 4
		return result;
200104fc:	e8730004 	lwi	r3, r19, 4
	}
20010500:	10330000 	addk	r1, r19, r0
20010504:	ea610008 	lwi	r19, r1, 8
20010508:	3021000c 	addik	r1, r1, 12
2001050c:	b60f0008 	rtsd	r15, 8
20010510:	80000000 	or	r0, r0, r0

20010514 <cmd_neither>:
	
	static void cmd_neither() {
20010514:	3021ffd4 	addik	r1, r1, -44
20010518:	f9e10000 	swi	r15, r1, 0
2001051c:	fa610028 	swi	r19, r1, 40
20010520:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20010524:	b0002004 	imm	8196
20010528:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
2001052c:	a46301ff 	andi	r3, r3, 511
20010530:	f873001c 	swi	r3, r19, 28
		i32 index_aligned_halfpel = index_halfpel % SIZE_halfpel;
20010534:	b0002004 	imm	8196
20010538:	e8608f48 	lwi	r3, r0, -28856	// 20048f48 <index_halfpel>
2001053c:	a46301ff 	andi	r3, r3, 511
20010540:	f8730020 	swi	r3, r19, 32
	
		i16 cmd;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20010544:	b0002004 	imm	8196
20010548:	e86060b0 	lwi	r3, r0, 24752	// 200460b0 <decoder_motion_framebuf_BTYPE>
2001054c:	e8830004 	lwi	r4, r3, 4
20010550:	b0002004 	imm	8196
20010554:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
20010558:	a46301ff 	andi	r3, r3, 511
2001055c:	10631800 	addk	r3, r3, r3
20010560:	10641800 	addk	r3, r4, r3
20010564:	e4630000 	lhui	r3, r3, 0
20010568:	f4730024 	shi	r3, r19, 36
		mvx = 0;
2001056c:	b0002006 	imm	8198
20010570:	f4001b78 	shi	r0, r0, 7032	// 20061b78 <mvx>
		mvy = 0;
20010574:	b0002006 	imm	8198
20010578:	f4001b7a 	shi	r0, r0, 7034	// 20061b7a <mvy>
		tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel] = 0;
2001057c:	b0002004 	imm	8196
20010580:	e8606168 	lwi	r3, r0, 24936	// 20046168 <decoder_motion_framebuf_halfpel>
20010584:	e8830004 	lwi	r4, r3, 4
20010588:	b0002004 	imm	8196
2001058c:	e8608f48 	lwi	r3, r0, -28856	// 20048f48 <index_halfpel>
20010590:	a46301ff 	andi	r3, r3, 511
20010594:	10641800 	addk	r3, r4, r3
20010598:	f0030000 	sbi	r0, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
2001059c:	b0002004 	imm	8196
200105a0:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
200105a4:	30630001 	addik	r3, r3, 1
200105a8:	b0002004 	imm	8196
200105ac:	f8608f38 	swi	r3, r0, -28872	// 20048f38 <index_BTYPE>
		index_halfpel += 1;
200105b0:	b0002004 	imm	8196
200105b4:	e8608f48 	lwi	r3, r0, -28856	// 20048f48 <index_halfpel>
200105b8:	30630001 	addik	r3, r3, 1
200105bc:	b0002004 	imm	8196
200105c0:	f8608f48 	swi	r3, r0, -28856	// 20048f48 <index_halfpel>
		
		read_end_BTYPE();
200105c4:	b9f4f380 	brlid	r15, -3200	// 2000f944 <read_end_BTYPE>
200105c8:	80000000 	or	r0, r0, r0
		write_end_halfpel();
200105cc:	b9f4f4cc 	brlid	r15, -2868	// 2000fa98 <write_end_halfpel>
200105d0:	80000000 	or	r0, r0, r0
	}
200105d4:	e9e10000 	lwi	r15, r1, 0
200105d8:	10330000 	addk	r1, r19, r0
200105dc:	ea610028 	lwi	r19, r1, 40
200105e0:	3021002c 	addik	r1, r1, 44
200105e4:	b60f0008 	rtsd	r15, 8
200105e8:	80000000 	or	r0, r0, r0

200105ec <isSchedulable_read_fb_Y>:
	static i32 isSchedulable_read_fb_Y() {
200105ec:	3021ffe8 	addik	r1, r1, -24
200105f0:	fa610014 	swi	r19, r1, 20
200105f4:	12610000 	addk	r19, r1, r0
		i32 result;
		i32 local_outstanding_writes;
		i32 local_max_outstanding_writes;
		i32 local_comp_so_far;
	
		local_outstanding_writes = outstanding_writes;
200105f8:	b0002006 	imm	8198
200105fc:	e8601b84 	lwi	r3, r0, 7044	// 20061b84 <outstanding_writes>
20010600:	f8730004 	swi	r3, r19, 4
		local_max_outstanding_writes = max_outstanding_writes;
20010604:	b0002006 	imm	8198
20010608:	e8601b6c 	lwi	r3, r0, 7020	// 20061b6c <max_outstanding_writes>
2001060c:	f8730008 	swi	r3, r19, 8
		local_comp_so_far = comp_so_far;
20010610:	b0002006 	imm	8198
20010614:	e8601b94 	lwi	r3, r0, 7060	// 20061b94 <comp_so_far>
20010618:	f873000c 	swi	r3, r19, 12
		result = local_outstanding_writes < local_max_outstanding_writes && local_comp_so_far < 4;
2001061c:	e8930004 	lwi	r4, r19, 4
20010620:	e8730008 	lwi	r3, r19, 8
20010624:	16432001 	cmp	r18, r3, r4
20010628:	bcb2001c 	bgei	r18, 28		// 20010644
2001062c:	e893000c 	lwi	r4, r19, 12
20010630:	30600003 	addik	r3, r0, 3
20010634:	16441801 	cmp	r18, r4, r3
20010638:	bc52000c 	blti	r18, 12		// 20010644
2001063c:	30600001 	addik	r3, r0, 1
20010640:	b8000008 	bri	8		// 20010648
20010644:	10600000 	addk	r3, r0, r0
20010648:	f8730010 	swi	r3, r19, 16
		return result;
2001064c:	e8730010 	lwi	r3, r19, 16
	}
20010650:	10330000 	addk	r1, r19, r0
20010654:	ea610014 	lwi	r19, r1, 20
20010658:	30210018 	addik	r1, r1, 24
2001065c:	b60f0008 	rtsd	r15, 8
20010660:	80000000 	or	r0, r0, r0

20010664 <read_fb_Y>:
	
	static void read_fb_Y() {
20010664:	3021ff80 	addik	r1, r1, -128
20010668:	f9e10000 	swi	r15, r1, 0
2001066c:	fa61007c 	swi	r19, r1, 124
20010670:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_RD = index_RD % SIZE_RD;
20010674:	b0002004 	imm	8196
20010678:	e8608f50 	lwi	r3, r0, -28848	// 20048f50 <index_RD>
2001067c:	a46301ff 	andi	r3, r3, 511
20010680:	f873003c 	swi	r3, r19, 60
		i32 local_start_of_frame;
		i32 local_MAXW_IN_SAMPLES;
		i32 local_BUFFER_SIZE;
		i16 tmp_frameBuffer;
	
		local_mbx_read = mbx_read;
20010684:	b0002006 	imm	8198
20010688:	e8601b7c 	lwi	r3, r0, 7036	// 20061b7c <mbx_read>
2001068c:	f8730040 	swi	r3, r19, 64
		local_SAMPLES_PER_MB = SAMPLES_PER_MB;
20010690:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
20010694:	f8730044 	swi	r3, r19, 68
		local_comp_so_far = comp_so_far;
20010698:	b0002006 	imm	8198
2001069c:	e8601b94 	lwi	r3, r0, 7060	// 20061b94 <comp_so_far>
200106a0:	f8730048 	swi	r3, r19, 72
		local_mvx = mvx;
200106a4:	b0002006 	imm	8198
200106a8:	e4601b78 	lhui	r3, r0, 7032	// 20061b78 <mvx>
200106ac:	f473004c 	shi	r3, r19, 76
		x = local_mbx_read * local_SAMPLES_PER_MB + 8 * (local_comp_so_far & 1) + local_mvx;
200106b0:	e8930040 	lwi	r4, r19, 64
200106b4:	e8730044 	lwi	r3, r19, 68
200106b8:	40841800 	mul	r4, r4, r3
200106bc:	e8730048 	lwi	r3, r19, 72
200106c0:	a4630001 	andi	r3, r3, 1
200106c4:	64630403 	bslli	r3, r3, 3
200106c8:	10841800 	addk	r4, r4, r3
200106cc:	e473004c 	lhui	r3, r19, 76
200106d0:	90630061 	sext16	r3, r3
200106d4:	10641800 	addk	r3, r4, r3
200106d8:	f8730050 	swi	r3, r19, 80
		local_mby_read = mby_read;
200106dc:	b0002006 	imm	8198
200106e0:	e8601b80 	lwi	r3, r0, 7040	// 20061b80 <mby_read>
200106e4:	f8730054 	swi	r3, r19, 84
		local_SAMPLES_PER_MB = SAMPLES_PER_MB;
200106e8:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
200106ec:	f8730044 	swi	r3, r19, 68
		local_comp_so_far = comp_so_far;
200106f0:	b0002006 	imm	8198
200106f4:	e8601b94 	lwi	r3, r0, 7060	// 20061b94 <comp_so_far>
200106f8:	f8730048 	swi	r3, r19, 72
		local_mvy = mvy;
200106fc:	b0002006 	imm	8198
20010700:	e4601b7a 	lhui	r3, r0, 7034	// 20061b7a <mvy>
20010704:	f4730058 	shi	r3, r19, 88
		y = local_mby_read * local_SAMPLES_PER_MB + 8 * (local_comp_so_far >> 1) + local_mvy;
20010708:	e8930054 	lwi	r4, r19, 84
2001070c:	e8730044 	lwi	r3, r19, 68
20010710:	40841800 	mul	r4, r4, r3
20010714:	e8730048 	lwi	r3, r19, 72
20010718:	90630001 	sra	r3, r3
2001071c:	64630403 	bslli	r3, r3, 3
20010720:	10841800 	addk	r4, r4, r3
20010724:	e4730058 	lhui	r3, r19, 88
20010728:	90630061 	sext16	r3, r3
2001072c:	10641800 	addk	r3, r4, r3
20010730:	f873001c 	swi	r3, r19, 28
		clip_left = 0;
20010734:	f8130020 	swi	r0, r19, 32
		clip_right = 0;
20010738:	f8130024 	swi	r0, r19, 36
		clip_x = x;
2001073c:	e8730050 	lwi	r3, r19, 80
20010740:	f8730028 	swi	r3, r19, 40
		if (y < 0) {
20010744:	e873001c 	lwi	r3, r19, 28
20010748:	bca3000c 	bgei	r3, 12		// 20010754
			clip_y = 0;
2001074c:	f813002c 	swi	r0, r19, 44
20010750:	b8000044 	bri	68		// 20010794
		} else {
			local_vop_height_in_samples = vop_height_in_samples;
20010754:	b0002006 	imm	8198
20010758:	e8601b64 	lwi	r3, r0, 7012	// 20061b64 <vop_height_in_samples>
2001075c:	f873005c 	swi	r3, r19, 92
			if (y < local_vop_height_in_samples) {
20010760:	e893001c 	lwi	r4, r19, 28
20010764:	e873005c 	lwi	r3, r19, 92
20010768:	16432001 	cmp	r18, r3, r4
2001076c:	bcb20010 	bgei	r18, 16		// 2001077c
				clip_y = y;
20010770:	e873001c 	lwi	r3, r19, 28
20010774:	f873002c 	swi	r3, r19, 44
20010778:	b800001c 	bri	28		// 20010794
			} else {
				local_vop_height_in_samples = vop_height_in_samples;
2001077c:	b0002006 	imm	8198
20010780:	e8601b64 	lwi	r3, r0, 7012	// 20061b64 <vop_height_in_samples>
20010784:	f873005c 	swi	r3, r19, 92
				clip_y = local_vop_height_in_samples - 1;
20010788:	e873005c 	lwi	r3, r19, 92
2001078c:	3063ffff 	addik	r3, r3, -1
20010790:	f873002c 	swi	r3, r19, 44
			}
		}
		if (x < 0) {
20010794:	e8730050 	lwi	r3, r19, 80
20010798:	bca30034 	bgei	r3, 52		// 200107cc
			clip_x = 0;
2001079c:	f8130028 	swi	r0, r19, 40
			if (x < -9) {
200107a0:	e8930050 	lwi	r4, r19, 80
200107a4:	3060fff7 	addik	r3, r0, -9
200107a8:	16432001 	cmp	r18, r3, r4
200107ac:	bcb20010 	bgei	r18, 16		// 200107bc
				clip_left = 9;
200107b0:	30600009 	addik	r3, r0, 9
200107b4:	f8730020 	swi	r3, r19, 32
200107b8:	b8000094 	bri	148		// 2001084c
			} else {
				clip_left = -x;
200107bc:	e8730050 	lwi	r3, r19, 80
200107c0:	14630000 	rsubk	r3, r3, r0
200107c4:	f8730020 	swi	r3, r19, 32
200107c8:	b8000084 	bri	132		// 2001084c
			}
		} else {
			local_vop_width_in_samples = vop_width_in_samples;
200107cc:	b0002006 	imm	8198
200107d0:	e8601b60 	lwi	r3, r0, 7008	// 20061b60 <vop_width_in_samples>
200107d4:	f8730060 	swi	r3, r19, 96
			if (x + 9 > local_vop_width_in_samples) {
200107d8:	e8730050 	lwi	r3, r19, 80
200107dc:	30830009 	addik	r4, r3, 9
200107e0:	e8730060 	lwi	r3, r19, 96
200107e4:	16441801 	cmp	r18, r4, r3
200107e8:	bcb20064 	bgei	r18, 100		// 2001084c
				local_vop_width_in_samples = vop_width_in_samples;
200107ec:	b0002006 	imm	8198
200107f0:	e8601b60 	lwi	r3, r0, 7008	// 20061b60 <vop_width_in_samples>
200107f4:	f8730060 	swi	r3, r19, 96
				if (x >= local_vop_width_in_samples) {
200107f8:	e8930050 	lwi	r4, r19, 80
200107fc:	e8730060 	lwi	r3, r19, 96
20010800:	16432001 	cmp	r18, r3, r4
20010804:	bc520028 	blti	r18, 40		// 2001082c
					local_vop_width_in_samples = vop_width_in_samples;
20010808:	b0002006 	imm	8198
2001080c:	e8601b60 	lwi	r3, r0, 7008	// 20061b60 <vop_width_in_samples>
20010810:	f8730060 	swi	r3, r19, 96
					clip_x = local_vop_width_in_samples - 1;
20010814:	e8730060 	lwi	r3, r19, 96
20010818:	3063ffff 	addik	r3, r3, -1
2001081c:	f8730028 	swi	r3, r19, 40
					clip_right = 8;
20010820:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20010824:	f8730024 	swi	r3, r19, 36
20010828:	b8000024 	bri	36		// 2001084c
				} else {
					local_vop_width_in_samples = vop_width_in_samples;
2001082c:	b0002006 	imm	8198
20010830:	e8601b60 	lwi	r3, r0, 7008	// 20061b60 <vop_width_in_samples>
20010834:	f8730060 	swi	r3, r19, 96
					clip_right = x + 9 - local_vop_width_in_samples;
20010838:	e8730050 	lwi	r3, r19, 80
2001083c:	30830009 	addik	r4, r3, 9
20010840:	e8730060 	lwi	r3, r19, 96
20010844:	14632000 	rsubk	r3, r3, r4
20010848:	f8730024 	swi	r3, r19, 36
				}
			}
		}
		local_start_of_frame = start_of_frame;
2001084c:	b0002004 	imm	8196
20010850:	e8606170 	lwi	r3, r0, 24944	// 20046170 <start_of_frame>
20010854:	f8730064 	swi	r3, r19, 100
		local_MAXW_IN_SAMPLES = MAXW_IN_SAMPLES;
20010858:	306000c0 	addik	r3, r0, 192
2001085c:	f8730068 	swi	r3, r19, 104
		start_of_row = local_start_of_frame + clip_y * local_MAXW_IN_SAMPLES + clip_x;
20010860:	e893002c 	lwi	r4, r19, 44
20010864:	e8730068 	lwi	r3, r19, 104
20010868:	40841800 	mul	r4, r4, r3
2001086c:	e8730064 	lwi	r3, r19, 100
20010870:	10841800 	addk	r4, r4, r3
20010874:	e8730028 	lwi	r3, r19, 40
20010878:	10641800 	addk	r3, r4, r3
2001087c:	f8730030 	swi	r3, r19, 48
		local_BUFFER_SIZE = BUFFER_SIZE;
20010880:	b0000000 	imm	0
20010884:	30608400 	addik	r3, r0, -31744
20010888:	f873006c 	swi	r3, r19, 108
		if (start_of_row >= local_BUFFER_SIZE) {
2001088c:	e8930030 	lwi	r4, r19, 48
20010890:	e873006c 	lwi	r3, r19, 108
20010894:	16432001 	cmp	r18, r3, r4
20010898:	bc520020 	blti	r18, 32		// 200108b8
			local_BUFFER_SIZE = BUFFER_SIZE;
2001089c:	b0000000 	imm	0
200108a0:	30608400 	addik	r3, r0, -31744
200108a4:	f873006c 	swi	r3, r19, 108
			start_of_row = start_of_row - local_BUFFER_SIZE;
200108a8:	e8930030 	lwi	r4, r19, 48
200108ac:	e873006c 	lwi	r3, r19, 108
200108b0:	14632000 	rsubk	r3, r3, r4
200108b4:	f8730030 	swi	r3, r19, 48
		}
		i = 0;
200108b8:	f8130038 	swi	r0, r19, 56
		while (i < 81) {
200108bc:	b8000230 	bri	560		// 20010aec
			if (clip_left != 0) {
200108c0:	e8730020 	lwi	r3, r19, 32
200108c4:	bc030084 	beqi	r3, 132		// 20010948
				end_i = i + clip_left;
200108c8:	e8930038 	lwi	r4, r19, 56
200108cc:	e8730020 	lwi	r3, r19, 32
200108d0:	10641800 	addk	r3, r4, r3
200108d4:	f8730070 	swi	r3, r19, 112
				temp = frameBuffer[start_of_row];
200108d8:	e8730030 	lwi	r3, r19, 48
200108dc:	10631800 	addk	r3, r3, r3
200108e0:	b0002004 	imm	8196
200108e4:	30638f58 	addik	r3, r3, -28840
200108e8:	e4630000 	lhui	r3, r3, 0
200108ec:	90630061 	sext16	r3, r3
200108f0:	f8730074 	swi	r3, r19, 116
				while (i < end_i) {
200108f4:	b8000044 	bri	68		// 20010938
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
200108f8:	b0002004 	imm	8196
200108fc:	e8606160 	lwi	r3, r0, 24928	// 20046160 <decoder_motion_framebuf_RD>
20010900:	e8830004 	lwi	r4, r3, 4
20010904:	b0002004 	imm	8196
20010908:	e8a08f50 	lwi	r5, r0, -28848	// 20048f50 <index_RD>
2001090c:	e8730038 	lwi	r3, r19, 56
20010910:	10651800 	addk	r3, r5, r3
20010914:	a46301ff 	andi	r3, r3, 511
20010918:	10631800 	addk	r3, r3, r3
2001091c:	10641800 	addk	r3, r4, r3
20010920:	e8930074 	lwi	r4, r19, 116
20010924:	90840061 	sext16	r4, r4
20010928:	f4830000 	shi	r4, r3, 0
					i = i + 1;
2001092c:	e8730038 	lwi	r3, r19, 56
20010930:	30630001 	addik	r3, r3, 1
20010934:	f8730038 	swi	r3, r19, 56
		i = 0;
		while (i < 81) {
			if (clip_left != 0) {
				end_i = i + clip_left;
				temp = frameBuffer[start_of_row];
				while (i < end_i) {
20010938:	e8930038 	lwi	r4, r19, 56
2001093c:	e8730070 	lwi	r3, r19, 112
20010940:	16432001 	cmp	r18, r3, r4
20010944:	bc52ffb4 	blti	r18, -76		// 200108f8
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
					i = i + 1;
				}
			}
			addr = start_of_row;
20010948:	e8730030 	lwi	r3, r19, 48
2001094c:	f8730034 	swi	r3, r19, 52
			end_i = i + 9 - clip_left - clip_right;
20010950:	e8730038 	lwi	r3, r19, 56
20010954:	30830009 	addik	r4, r3, 9
20010958:	e8730020 	lwi	r3, r19, 32
2001095c:	14832000 	rsubk	r4, r3, r4
20010960:	e8730024 	lwi	r3, r19, 36
20010964:	14632000 	rsubk	r3, r3, r4
20010968:	f8730070 	swi	r3, r19, 112
			while (i < end_i) {
2001096c:	b8000064 	bri	100		// 200109d0
				tmp_frameBuffer = frameBuffer[addr];
20010970:	e8730034 	lwi	r3, r19, 52
20010974:	10631800 	addk	r3, r3, r3
20010978:	b0002004 	imm	8196
2001097c:	30638f58 	addik	r3, r3, -28840
20010980:	e4630000 	lhui	r3, r3, 0
20010984:	f4730078 	shi	r3, r19, 120
				tokens_RD[(index_RD + (i)) % SIZE_RD] = tmp_frameBuffer;
20010988:	b0002004 	imm	8196
2001098c:	e8606160 	lwi	r3, r0, 24928	// 20046160 <decoder_motion_framebuf_RD>
20010990:	e8830004 	lwi	r4, r3, 4
20010994:	b0002004 	imm	8196
20010998:	e8a08f50 	lwi	r5, r0, -28848	// 20048f50 <index_RD>
2001099c:	e8730038 	lwi	r3, r19, 56
200109a0:	10651800 	addk	r3, r5, r3
200109a4:	a46301ff 	andi	r3, r3, 511
200109a8:	10631800 	addk	r3, r3, r3
200109ac:	10641800 	addk	r3, r4, r3
200109b0:	e4930078 	lhui	r4, r19, 120
200109b4:	f4830000 	shi	r4, r3, 0
				i = i + 1;
200109b8:	e8730038 	lwi	r3, r19, 56
200109bc:	30630001 	addik	r3, r3, 1
200109c0:	f8730038 	swi	r3, r19, 56
				addr = addr + 1;
200109c4:	e8730034 	lwi	r3, r19, 52
200109c8:	30630001 	addik	r3, r3, 1
200109cc:	f8730034 	swi	r3, r19, 52
					i = i + 1;
				}
			}
			addr = start_of_row;
			end_i = i + 9 - clip_left - clip_right;
			while (i < end_i) {
200109d0:	e8930038 	lwi	r4, r19, 56
200109d4:	e8730070 	lwi	r3, r19, 112
200109d8:	16432001 	cmp	r18, r3, r4
200109dc:	bc52ff94 	blti	r18, -108		// 20010970
				tmp_frameBuffer = frameBuffer[addr];
				tokens_RD[(index_RD + (i)) % SIZE_RD] = tmp_frameBuffer;
				i = i + 1;
				addr = addr + 1;
			}
			if (clip_right != 0) {
200109e0:	e8730024 	lwi	r3, r19, 36
200109e4:	bc030088 	beqi	r3, 136		// 20010a6c
				end_i = i + clip_right;
200109e8:	e8930038 	lwi	r4, r19, 56
200109ec:	e8730024 	lwi	r3, r19, 36
200109f0:	10641800 	addk	r3, r4, r3
200109f4:	f8730070 	swi	r3, r19, 112
				temp = frameBuffer[addr - 1];
200109f8:	e8730034 	lwi	r3, r19, 52
200109fc:	3063ffff 	addik	r3, r3, -1
20010a00:	10631800 	addk	r3, r3, r3
20010a04:	b0002004 	imm	8196
20010a08:	30638f58 	addik	r3, r3, -28840
20010a0c:	e4630000 	lhui	r3, r3, 0
20010a10:	90630061 	sext16	r3, r3
20010a14:	f8730074 	swi	r3, r19, 116
				while (i < end_i) {
20010a18:	b8000044 	bri	68		// 20010a5c
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
20010a1c:	b0002004 	imm	8196
20010a20:	e8606160 	lwi	r3, r0, 24928	// 20046160 <decoder_motion_framebuf_RD>
20010a24:	e8830004 	lwi	r4, r3, 4
20010a28:	b0002004 	imm	8196
20010a2c:	e8a08f50 	lwi	r5, r0, -28848	// 20048f50 <index_RD>
20010a30:	e8730038 	lwi	r3, r19, 56
20010a34:	10651800 	addk	r3, r5, r3
20010a38:	a46301ff 	andi	r3, r3, 511
20010a3c:	10631800 	addk	r3, r3, r3
20010a40:	10641800 	addk	r3, r4, r3
20010a44:	e8930074 	lwi	r4, r19, 116
20010a48:	90840061 	sext16	r4, r4
20010a4c:	f4830000 	shi	r4, r3, 0
					i = i + 1;
20010a50:	e8730038 	lwi	r3, r19, 56
20010a54:	30630001 	addik	r3, r3, 1
20010a58:	f8730038 	swi	r3, r19, 56
				addr = addr + 1;
			}
			if (clip_right != 0) {
				end_i = i + clip_right;
				temp = frameBuffer[addr - 1];
				while (i < end_i) {
20010a5c:	e8930038 	lwi	r4, r19, 56
20010a60:	e8730070 	lwi	r3, r19, 112
20010a64:	16432001 	cmp	r18, r3, r4
20010a68:	bc52ffb4 	blti	r18, -76		// 20010a1c
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
					i = i + 1;
				}
			}
			y = y + 1;
20010a6c:	e873001c 	lwi	r3, r19, 28
20010a70:	30630001 	addik	r3, r3, 1
20010a74:	f873001c 	swi	r3, r19, 28
			local_vop_height_in_samples = vop_height_in_samples;
20010a78:	b0002006 	imm	8198
20010a7c:	e8601b64 	lwi	r3, r0, 7012	// 20061b64 <vop_height_in_samples>
20010a80:	f873005c 	swi	r3, r19, 92
			if (y > 0 && y < local_vop_height_in_samples) {
20010a84:	e873001c 	lwi	r3, r19, 28
20010a88:	bc630064 	blei	r3, 100		// 20010aec
20010a8c:	e893001c 	lwi	r4, r19, 28
20010a90:	e873005c 	lwi	r3, r19, 92
20010a94:	16432001 	cmp	r18, r3, r4
20010a98:	bcb20054 	bgei	r18, 84		// 20010aec
				local_MAXW_IN_SAMPLES = MAXW_IN_SAMPLES;
20010a9c:	306000c0 	addik	r3, r0, 192
20010aa0:	f8730068 	swi	r3, r19, 104
				start_of_row = start_of_row + local_MAXW_IN_SAMPLES;
20010aa4:	e8930030 	lwi	r4, r19, 48
20010aa8:	e8730068 	lwi	r3, r19, 104
20010aac:	10641800 	addk	r3, r4, r3
20010ab0:	f8730030 	swi	r3, r19, 48
				local_BUFFER_SIZE = BUFFER_SIZE;
20010ab4:	b0000000 	imm	0
20010ab8:	30608400 	addik	r3, r0, -31744
20010abc:	f873006c 	swi	r3, r19, 108
				if (start_of_row >= local_BUFFER_SIZE) {
20010ac0:	e8930030 	lwi	r4, r19, 48
20010ac4:	e873006c 	lwi	r3, r19, 108
20010ac8:	16432001 	cmp	r18, r3, r4
20010acc:	bc520020 	blti	r18, 32		// 20010aec
					local_BUFFER_SIZE = BUFFER_SIZE;
20010ad0:	b0000000 	imm	0
20010ad4:	30608400 	addik	r3, r0, -31744
20010ad8:	f873006c 	swi	r3, r19, 108
					start_of_row = start_of_row - local_BUFFER_SIZE;
20010adc:	e8930030 	lwi	r4, r19, 48
20010ae0:	e873006c 	lwi	r3, r19, 108
20010ae4:	14632000 	rsubk	r3, r3, r4
20010ae8:	f8730030 	swi	r3, r19, 48
		if (start_of_row >= local_BUFFER_SIZE) {
			local_BUFFER_SIZE = BUFFER_SIZE;
			start_of_row = start_of_row - local_BUFFER_SIZE;
		}
		i = 0;
		while (i < 81) {
20010aec:	e8930038 	lwi	r4, r19, 56
20010af0:	30600050 	addik	r3, r0, 80	// 50 <_start1>
20010af4:	16441801 	cmp	r18, r4, r3
20010af8:	bcb2fdc8 	bgei	r18, -568		// 200108c0
					local_BUFFER_SIZE = BUFFER_SIZE;
					start_of_row = start_of_row - local_BUFFER_SIZE;
				}
			}
		}
		advance_block();
20010afc:	b9f4f07c 	brlid	r15, -3972	// 2000fb78 <advance_block>
20010b00:	80000000 	or	r0, r0, r0
	
		// Update ports indexes
		index_RD += 81;
20010b04:	b0002004 	imm	8196
20010b08:	e8608f50 	lwi	r3, r0, -28848	// 20048f50 <index_RD>
20010b0c:	30630051 	addik	r3, r3, 81
20010b10:	b0002004 	imm	8196
20010b14:	f8608f50 	swi	r3, r0, -28848	// 20048f50 <index_RD>
		
		write_end_RD();
20010b18:	b9f4f028 	brlid	r15, -4056	// 2000fb40 <write_end_RD>
20010b1c:	80000000 	or	r0, r0, r0
	}
20010b20:	e9e10000 	lwi	r15, r1, 0
20010b24:	10330000 	addk	r1, r19, r0
20010b28:	ea61007c 	lwi	r19, r1, 124
20010b2c:	30210080 	addik	r1, r1, 128
20010b30:	b60f0008 	rtsd	r15, 8
20010b34:	80000000 	or	r0, r0, r0

20010b38 <isSchedulable_read_fb_U>:
	static i32 isSchedulable_read_fb_U() {
20010b38:	3021ffe8 	addik	r1, r1, -24
20010b3c:	fa610014 	swi	r19, r1, 20
20010b40:	12610000 	addk	r19, r1, r0
		i32 result;
		i32 local_outstanding_writes;
		i32 local_max_outstanding_writes;
		i32 local_comp_so_far;
	
		local_outstanding_writes = outstanding_writes;
20010b44:	b0002006 	imm	8198
20010b48:	e8601b84 	lwi	r3, r0, 7044	// 20061b84 <outstanding_writes>
20010b4c:	f8730004 	swi	r3, r19, 4
		local_max_outstanding_writes = max_outstanding_writes;
20010b50:	b0002006 	imm	8198
20010b54:	e8601b6c 	lwi	r3, r0, 7020	// 20061b6c <max_outstanding_writes>
20010b58:	f8730008 	swi	r3, r19, 8
		local_comp_so_far = comp_so_far;
20010b5c:	b0002006 	imm	8198
20010b60:	e8601b94 	lwi	r3, r0, 7060	// 20061b94 <comp_so_far>
20010b64:	f873000c 	swi	r3, r19, 12
		result = local_outstanding_writes < local_max_outstanding_writes && local_comp_so_far == 4;
20010b68:	e8930004 	lwi	r4, r19, 4
20010b6c:	e8730008 	lwi	r3, r19, 8
20010b70:	16432001 	cmp	r18, r3, r4
20010b74:	bcb20018 	bgei	r18, 24		// 20010b8c
20010b78:	e873000c 	lwi	r3, r19, 12
20010b7c:	a8630004 	xori	r3, r3, 4
20010b80:	bc23000c 	bnei	r3, 12		// 20010b8c
20010b84:	30600001 	addik	r3, r0, 1
20010b88:	b8000008 	bri	8		// 20010b90
20010b8c:	10600000 	addk	r3, r0, r0
20010b90:	f8730010 	swi	r3, r19, 16
		return result;
20010b94:	e8730010 	lwi	r3, r19, 16
	}
20010b98:	10330000 	addk	r1, r19, r0
20010b9c:	ea610014 	lwi	r19, r1, 20
20010ba0:	30210018 	addik	r1, r1, 24
20010ba4:	b60f0008 	rtsd	r15, 8
20010ba8:	80000000 	or	r0, r0, r0

20010bac <read_fb_U>:
	
	static void read_fb_U() {
20010bac:	3021ff84 	addik	r1, r1, -124
20010bb0:	f9e10000 	swi	r15, r1, 0
20010bb4:	fa610078 	swi	r19, r1, 120
20010bb8:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_RD = index_RD % SIZE_RD;
20010bbc:	b0002004 	imm	8196
20010bc0:	e8608f50 	lwi	r3, r0, -28848	// 20048f50 <index_RD>
20010bc4:	a46301ff 	andi	r3, r3, 511
20010bc8:	f873003c 	swi	r3, r19, 60
		i32 local_start_of_frame_U;
		i32 local_MAXW_IN_SAMPLES_UV;
		i32 local_BUFFER_SIZE_UV;
		i16 tmp_frameBuffer_U;
	
		local_mbx_read = mbx_read;
20010bcc:	b0002006 	imm	8198
20010bd0:	e8601b7c 	lwi	r3, r0, 7036	// 20061b7c <mbx_read>
20010bd4:	f8730040 	swi	r3, r19, 64
		local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
20010bd8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20010bdc:	f8730044 	swi	r3, r19, 68
		local_mvx = mvx;
20010be0:	b0002006 	imm	8198
20010be4:	e4601b78 	lhui	r3, r0, 7032	// 20061b78 <mvx>
20010be8:	f4730048 	shi	r3, r19, 72
		x = local_mbx_read * local_SAMPLES_PER_MB_UV + local_mvx;
20010bec:	e8930040 	lwi	r4, r19, 64
20010bf0:	e8730044 	lwi	r3, r19, 68
20010bf4:	40841800 	mul	r4, r4, r3
20010bf8:	e4730048 	lhui	r3, r19, 72
20010bfc:	90630061 	sext16	r3, r3
20010c00:	10641800 	addk	r3, r4, r3
20010c04:	f873004c 	swi	r3, r19, 76
		local_mby_read = mby_read;
20010c08:	b0002006 	imm	8198
20010c0c:	e8601b80 	lwi	r3, r0, 7040	// 20061b80 <mby_read>
20010c10:	f8730050 	swi	r3, r19, 80
		local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
20010c14:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20010c18:	f8730044 	swi	r3, r19, 68
		local_mvy = mvy;
20010c1c:	b0002006 	imm	8198
20010c20:	e4601b7a 	lhui	r3, r0, 7034	// 20061b7a <mvy>
20010c24:	f4730054 	shi	r3, r19, 84
		y = local_mby_read * local_SAMPLES_PER_MB_UV + local_mvy;
20010c28:	e8930050 	lwi	r4, r19, 80
20010c2c:	e8730044 	lwi	r3, r19, 68
20010c30:	40841800 	mul	r4, r4, r3
20010c34:	e4730054 	lhui	r3, r19, 84
20010c38:	90630061 	sext16	r3, r3
20010c3c:	10641800 	addk	r3, r4, r3
20010c40:	f873001c 	swi	r3, r19, 28
		clip_left = 0;
20010c44:	f8130020 	swi	r0, r19, 32
		clip_right = 0;
20010c48:	f8130024 	swi	r0, r19, 36
		clip_x = x;
20010c4c:	e873004c 	lwi	r3, r19, 76
20010c50:	f8730028 	swi	r3, r19, 40
		if (y < 0) {
20010c54:	e873001c 	lwi	r3, r19, 28
20010c58:	bca3000c 	bgei	r3, 12		// 20010c64
			clip_y = 0;
20010c5c:	f813002c 	swi	r0, r19, 44
20010c60:	b8000044 	bri	68		// 20010ca4
		} else {
			local_vop_height_in_samples_U = vop_height_in_samples_U;
20010c64:	b0002006 	imm	8198
20010c68:	e8601b74 	lwi	r3, r0, 7028	// 20061b74 <vop_height_in_samples_U>
20010c6c:	f8730058 	swi	r3, r19, 88
			if (y < local_vop_height_in_samples_U) {
20010c70:	e893001c 	lwi	r4, r19, 28
20010c74:	e8730058 	lwi	r3, r19, 88
20010c78:	16432001 	cmp	r18, r3, r4
20010c7c:	bcb20010 	bgei	r18, 16		// 20010c8c
				clip_y = y;
20010c80:	e873001c 	lwi	r3, r19, 28
20010c84:	f873002c 	swi	r3, r19, 44
20010c88:	b800001c 	bri	28		// 20010ca4
			} else {
				local_vop_height_in_samples_U = vop_height_in_samples_U;
20010c8c:	b0002006 	imm	8198
20010c90:	e8601b74 	lwi	r3, r0, 7028	// 20061b74 <vop_height_in_samples_U>
20010c94:	f8730058 	swi	r3, r19, 88
				clip_y = local_vop_height_in_samples_U - 1;
20010c98:	e8730058 	lwi	r3, r19, 88
20010c9c:	3063ffff 	addik	r3, r3, -1
20010ca0:	f873002c 	swi	r3, r19, 44
			}
		}
		if (x < 0) {
20010ca4:	e873004c 	lwi	r3, r19, 76
20010ca8:	bca30034 	bgei	r3, 52		// 20010cdc
			clip_x = 0;
20010cac:	f8130028 	swi	r0, r19, 40
			if (x < -9) {
20010cb0:	e893004c 	lwi	r4, r19, 76
20010cb4:	3060fff7 	addik	r3, r0, -9
20010cb8:	16432001 	cmp	r18, r3, r4
20010cbc:	bcb20010 	bgei	r18, 16		// 20010ccc
				clip_left = 9;
20010cc0:	30600009 	addik	r3, r0, 9
20010cc4:	f8730020 	swi	r3, r19, 32
20010cc8:	b8000094 	bri	148		// 20010d5c
			} else {
				clip_left = -x;
20010ccc:	e873004c 	lwi	r3, r19, 76
20010cd0:	14630000 	rsubk	r3, r3, r0
20010cd4:	f8730020 	swi	r3, r19, 32
20010cd8:	b8000084 	bri	132		// 20010d5c
			}
		} else {
			local_vop_width_in_samples_U = vop_width_in_samples_U;
20010cdc:	b0002006 	imm	8198
20010ce0:	e8601b70 	lwi	r3, r0, 7024	// 20061b70 <vop_width_in_samples_U>
20010ce4:	f873005c 	swi	r3, r19, 92
			if (x + 9 > local_vop_width_in_samples_U) {
20010ce8:	e873004c 	lwi	r3, r19, 76
20010cec:	30830009 	addik	r4, r3, 9
20010cf0:	e873005c 	lwi	r3, r19, 92
20010cf4:	16441801 	cmp	r18, r4, r3
20010cf8:	bcb20064 	bgei	r18, 100		// 20010d5c
				local_vop_width_in_samples_U = vop_width_in_samples_U;
20010cfc:	b0002006 	imm	8198
20010d00:	e8601b70 	lwi	r3, r0, 7024	// 20061b70 <vop_width_in_samples_U>
20010d04:	f873005c 	swi	r3, r19, 92
				if (x >= local_vop_width_in_samples_U) {
20010d08:	e893004c 	lwi	r4, r19, 76
20010d0c:	e873005c 	lwi	r3, r19, 92
20010d10:	16432001 	cmp	r18, r3, r4
20010d14:	bc520028 	blti	r18, 40		// 20010d3c
					local_vop_width_in_samples_U = vop_width_in_samples_U;
20010d18:	b0002006 	imm	8198
20010d1c:	e8601b70 	lwi	r3, r0, 7024	// 20061b70 <vop_width_in_samples_U>
20010d20:	f873005c 	swi	r3, r19, 92
					clip_x = local_vop_width_in_samples_U - 1;
20010d24:	e873005c 	lwi	r3, r19, 92
20010d28:	3063ffff 	addik	r3, r3, -1
20010d2c:	f8730028 	swi	r3, r19, 40
					clip_right = 8;
20010d30:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20010d34:	f8730024 	swi	r3, r19, 36
20010d38:	b8000024 	bri	36		// 20010d5c
				} else {
					local_vop_width_in_samples_U = vop_width_in_samples_U;
20010d3c:	b0002006 	imm	8198
20010d40:	e8601b70 	lwi	r3, r0, 7024	// 20061b70 <vop_width_in_samples_U>
20010d44:	f873005c 	swi	r3, r19, 92
					clip_right = x + 9 - local_vop_width_in_samples_U;
20010d48:	e873004c 	lwi	r3, r19, 76
20010d4c:	30830009 	addik	r4, r3, 9
20010d50:	e873005c 	lwi	r3, r19, 92
20010d54:	14632000 	rsubk	r3, r3, r4
20010d58:	f8730024 	swi	r3, r19, 36
				}
			}
		}
		local_start_of_frame_U = start_of_frame_U;
20010d5c:	b0002004 	imm	8196
20010d60:	e8606174 	lwi	r3, r0, 24948	// 20046174 <start_of_frame_U>
20010d64:	f8730060 	swi	r3, r19, 96
		local_MAXW_IN_SAMPLES_UV = MAXW_IN_SAMPLES_UV;
20010d68:	30600060 	addik	r3, r0, 96
20010d6c:	f8730064 	swi	r3, r19, 100
		start_of_row = local_start_of_frame_U + clip_y * local_MAXW_IN_SAMPLES_UV + clip_x;
20010d70:	e893002c 	lwi	r4, r19, 44
20010d74:	e8730064 	lwi	r3, r19, 100
20010d78:	40841800 	mul	r4, r4, r3
20010d7c:	e8730060 	lwi	r3, r19, 96
20010d80:	10841800 	addk	r4, r4, r3
20010d84:	e8730028 	lwi	r3, r19, 40
20010d88:	10641800 	addk	r3, r4, r3
20010d8c:	f8730030 	swi	r3, r19, 48
		local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
20010d90:	30602100 	addik	r3, r0, 8448
20010d94:	f8730068 	swi	r3, r19, 104
		if (start_of_row >= local_BUFFER_SIZE_UV) {
20010d98:	e8930030 	lwi	r4, r19, 48
20010d9c:	e8730068 	lwi	r3, r19, 104
20010da0:	16432001 	cmp	r18, r3, r4
20010da4:	bc52001c 	blti	r18, 28		// 20010dc0
			local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
20010da8:	30602100 	addik	r3, r0, 8448
20010dac:	f8730068 	swi	r3, r19, 104
			start_of_row = start_of_row - local_BUFFER_SIZE_UV;
20010db0:	e8930030 	lwi	r4, r19, 48
20010db4:	e8730068 	lwi	r3, r19, 104
20010db8:	14632000 	rsubk	r3, r3, r4
20010dbc:	f8730030 	swi	r3, r19, 48
		}
		i = 0;
20010dc0:	f8130038 	swi	r0, r19, 56
		while (i < 81) {
20010dc4:	b8000228 	bri	552		// 20010fec
			if (clip_left != 0) {
20010dc8:	e8730020 	lwi	r3, r19, 32
20010dcc:	bc030084 	beqi	r3, 132		// 20010e50
				end_i = i + clip_left;
20010dd0:	e8930038 	lwi	r4, r19, 56
20010dd4:	e8730020 	lwi	r3, r19, 32
20010dd8:	10641800 	addk	r3, r4, r3
20010ddc:	f873006c 	swi	r3, r19, 108
				temp = frameBuffer_U[start_of_row];
20010de0:	e8730030 	lwi	r3, r19, 48
20010de4:	10631800 	addk	r3, r3, r3
20010de8:	b0002005 	imm	8197
20010dec:	30639758 	addik	r3, r3, -26792
20010df0:	e4630000 	lhui	r3, r3, 0
20010df4:	90630061 	sext16	r3, r3
20010df8:	f8730070 	swi	r3, r19, 112
				while (i < end_i) {
20010dfc:	b8000044 	bri	68		// 20010e40
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
20010e00:	b0002004 	imm	8196
20010e04:	e8606160 	lwi	r3, r0, 24928	// 20046160 <decoder_motion_framebuf_RD>
20010e08:	e8830004 	lwi	r4, r3, 4
20010e0c:	b0002004 	imm	8196
20010e10:	e8a08f50 	lwi	r5, r0, -28848	// 20048f50 <index_RD>
20010e14:	e8730038 	lwi	r3, r19, 56
20010e18:	10651800 	addk	r3, r5, r3
20010e1c:	a46301ff 	andi	r3, r3, 511
20010e20:	10631800 	addk	r3, r3, r3
20010e24:	10641800 	addk	r3, r4, r3
20010e28:	e8930070 	lwi	r4, r19, 112
20010e2c:	90840061 	sext16	r4, r4
20010e30:	f4830000 	shi	r4, r3, 0
					i = i + 1;
20010e34:	e8730038 	lwi	r3, r19, 56
20010e38:	30630001 	addik	r3, r3, 1
20010e3c:	f8730038 	swi	r3, r19, 56
		i = 0;
		while (i < 81) {
			if (clip_left != 0) {
				end_i = i + clip_left;
				temp = frameBuffer_U[start_of_row];
				while (i < end_i) {
20010e40:	e8930038 	lwi	r4, r19, 56
20010e44:	e873006c 	lwi	r3, r19, 108
20010e48:	16432001 	cmp	r18, r3, r4
20010e4c:	bc52ffb4 	blti	r18, -76		// 20010e00
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
					i = i + 1;
				}
			}
			addr = start_of_row;
20010e50:	e8730030 	lwi	r3, r19, 48
20010e54:	f8730034 	swi	r3, r19, 52
			end_i = i + 9 - clip_left - clip_right;
20010e58:	e8730038 	lwi	r3, r19, 56
20010e5c:	30830009 	addik	r4, r3, 9
20010e60:	e8730020 	lwi	r3, r19, 32
20010e64:	14832000 	rsubk	r4, r3, r4
20010e68:	e8730024 	lwi	r3, r19, 36
20010e6c:	14632000 	rsubk	r3, r3, r4
20010e70:	f873006c 	swi	r3, r19, 108
			while (i < end_i) {
20010e74:	b8000064 	bri	100		// 20010ed8
				tmp_frameBuffer_U = frameBuffer_U[addr];
20010e78:	e8730034 	lwi	r3, r19, 52
20010e7c:	10631800 	addk	r3, r3, r3
20010e80:	b0002005 	imm	8197
20010e84:	30639758 	addik	r3, r3, -26792
20010e88:	e4630000 	lhui	r3, r3, 0
20010e8c:	f4730074 	shi	r3, r19, 116
				tokens_RD[(index_RD + (i)) % SIZE_RD] = tmp_frameBuffer_U;
20010e90:	b0002004 	imm	8196
20010e94:	e8606160 	lwi	r3, r0, 24928	// 20046160 <decoder_motion_framebuf_RD>
20010e98:	e8830004 	lwi	r4, r3, 4
20010e9c:	b0002004 	imm	8196
20010ea0:	e8a08f50 	lwi	r5, r0, -28848	// 20048f50 <index_RD>
20010ea4:	e8730038 	lwi	r3, r19, 56
20010ea8:	10651800 	addk	r3, r5, r3
20010eac:	a46301ff 	andi	r3, r3, 511
20010eb0:	10631800 	addk	r3, r3, r3
20010eb4:	10641800 	addk	r3, r4, r3
20010eb8:	e4930074 	lhui	r4, r19, 116
20010ebc:	f4830000 	shi	r4, r3, 0
				i = i + 1;
20010ec0:	e8730038 	lwi	r3, r19, 56
20010ec4:	30630001 	addik	r3, r3, 1
20010ec8:	f8730038 	swi	r3, r19, 56
				addr = addr + 1;
20010ecc:	e8730034 	lwi	r3, r19, 52
20010ed0:	30630001 	addik	r3, r3, 1
20010ed4:	f8730034 	swi	r3, r19, 52
					i = i + 1;
				}
			}
			addr = start_of_row;
			end_i = i + 9 - clip_left - clip_right;
			while (i < end_i) {
20010ed8:	e8930038 	lwi	r4, r19, 56
20010edc:	e873006c 	lwi	r3, r19, 108
20010ee0:	16432001 	cmp	r18, r3, r4
20010ee4:	bc52ff94 	blti	r18, -108		// 20010e78
				tmp_frameBuffer_U = frameBuffer_U[addr];
				tokens_RD[(index_RD + (i)) % SIZE_RD] = tmp_frameBuffer_U;
				i = i + 1;
				addr = addr + 1;
			}
			if (clip_right != 0) {
20010ee8:	e8730024 	lwi	r3, r19, 36
20010eec:	bc030088 	beqi	r3, 136		// 20010f74
				end_i = i + clip_right;
20010ef0:	e8930038 	lwi	r4, r19, 56
20010ef4:	e8730024 	lwi	r3, r19, 36
20010ef8:	10641800 	addk	r3, r4, r3
20010efc:	f873006c 	swi	r3, r19, 108
				temp = frameBuffer_U[addr - 1];
20010f00:	e8730034 	lwi	r3, r19, 52
20010f04:	3063ffff 	addik	r3, r3, -1
20010f08:	10631800 	addk	r3, r3, r3
20010f0c:	b0002005 	imm	8197
20010f10:	30639758 	addik	r3, r3, -26792
20010f14:	e4630000 	lhui	r3, r3, 0
20010f18:	90630061 	sext16	r3, r3
20010f1c:	f8730070 	swi	r3, r19, 112
				while (i < end_i) {
20010f20:	b8000044 	bri	68		// 20010f64
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
20010f24:	b0002004 	imm	8196
20010f28:	e8606160 	lwi	r3, r0, 24928	// 20046160 <decoder_motion_framebuf_RD>
20010f2c:	e8830004 	lwi	r4, r3, 4
20010f30:	b0002004 	imm	8196
20010f34:	e8a08f50 	lwi	r5, r0, -28848	// 20048f50 <index_RD>
20010f38:	e8730038 	lwi	r3, r19, 56
20010f3c:	10651800 	addk	r3, r5, r3
20010f40:	a46301ff 	andi	r3, r3, 511
20010f44:	10631800 	addk	r3, r3, r3
20010f48:	10641800 	addk	r3, r4, r3
20010f4c:	e8930070 	lwi	r4, r19, 112
20010f50:	90840061 	sext16	r4, r4
20010f54:	f4830000 	shi	r4, r3, 0
					i = i + 1;
20010f58:	e8730038 	lwi	r3, r19, 56
20010f5c:	30630001 	addik	r3, r3, 1
20010f60:	f8730038 	swi	r3, r19, 56
				addr = addr + 1;
			}
			if (clip_right != 0) {
				end_i = i + clip_right;
				temp = frameBuffer_U[addr - 1];
				while (i < end_i) {
20010f64:	e8930038 	lwi	r4, r19, 56
20010f68:	e873006c 	lwi	r3, r19, 108
20010f6c:	16432001 	cmp	r18, r3, r4
20010f70:	bc52ffb4 	blti	r18, -76		// 20010f24
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
					i = i + 1;
				}
			}
			y = y + 1;
20010f74:	e873001c 	lwi	r3, r19, 28
20010f78:	30630001 	addik	r3, r3, 1
20010f7c:	f873001c 	swi	r3, r19, 28
			local_vop_height_in_samples_U = vop_height_in_samples_U;
20010f80:	b0002006 	imm	8198
20010f84:	e8601b74 	lwi	r3, r0, 7028	// 20061b74 <vop_height_in_samples_U>
20010f88:	f8730058 	swi	r3, r19, 88
			if (y > 0 && y < local_vop_height_in_samples_U) {
20010f8c:	e873001c 	lwi	r3, r19, 28
20010f90:	bc63005c 	blei	r3, 92		// 20010fec
20010f94:	e893001c 	lwi	r4, r19, 28
20010f98:	e8730058 	lwi	r3, r19, 88
20010f9c:	16432001 	cmp	r18, r3, r4
20010fa0:	bcb2004c 	bgei	r18, 76		// 20010fec
				local_MAXW_IN_SAMPLES_UV = MAXW_IN_SAMPLES_UV;
20010fa4:	30600060 	addik	r3, r0, 96
20010fa8:	f8730064 	swi	r3, r19, 100
				start_of_row = start_of_row + local_MAXW_IN_SAMPLES_UV;
20010fac:	e8930030 	lwi	r4, r19, 48
20010fb0:	e8730064 	lwi	r3, r19, 100
20010fb4:	10641800 	addk	r3, r4, r3
20010fb8:	f8730030 	swi	r3, r19, 48
				local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
20010fbc:	30602100 	addik	r3, r0, 8448
20010fc0:	f8730068 	swi	r3, r19, 104
				if (start_of_row >= local_BUFFER_SIZE_UV) {
20010fc4:	e8930030 	lwi	r4, r19, 48
20010fc8:	e8730068 	lwi	r3, r19, 104
20010fcc:	16432001 	cmp	r18, r3, r4
20010fd0:	bc52001c 	blti	r18, 28		// 20010fec
					local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
20010fd4:	30602100 	addik	r3, r0, 8448
20010fd8:	f8730068 	swi	r3, r19, 104
					start_of_row = start_of_row - local_BUFFER_SIZE_UV;
20010fdc:	e8930030 	lwi	r4, r19, 48
20010fe0:	e8730068 	lwi	r3, r19, 104
20010fe4:	14632000 	rsubk	r3, r3, r4
20010fe8:	f8730030 	swi	r3, r19, 48
		if (start_of_row >= local_BUFFER_SIZE_UV) {
			local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
			start_of_row = start_of_row - local_BUFFER_SIZE_UV;
		}
		i = 0;
		while (i < 81) {
20010fec:	e8930038 	lwi	r4, r19, 56
20010ff0:	30600050 	addik	r3, r0, 80	// 50 <_start1>
20010ff4:	16441801 	cmp	r18, r4, r3
20010ff8:	bcb2fdd0 	bgei	r18, -560		// 20010dc8
					local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
					start_of_row = start_of_row - local_BUFFER_SIZE_UV;
				}
			}
		}
		advance_block();
20010ffc:	b9f4eb7c 	brlid	r15, -5252	// 2000fb78 <advance_block>
20011000:	80000000 	or	r0, r0, r0
	
		// Update ports indexes
		index_RD += 81;
20011004:	b0002004 	imm	8196
20011008:	e8608f50 	lwi	r3, r0, -28848	// 20048f50 <index_RD>
2001100c:	30630051 	addik	r3, r3, 81
20011010:	b0002004 	imm	8196
20011014:	f8608f50 	swi	r3, r0, -28848	// 20048f50 <index_RD>
		
		write_end_RD();
20011018:	b9f4eb28 	brlid	r15, -5336	// 2000fb40 <write_end_RD>
2001101c:	80000000 	or	r0, r0, r0
	}
20011020:	e9e10000 	lwi	r15, r1, 0
20011024:	10330000 	addk	r1, r19, r0
20011028:	ea610078 	lwi	r19, r1, 120
2001102c:	3021007c 	addik	r1, r1, 124
20011030:	b60f0008 	rtsd	r15, 8
20011034:	80000000 	or	r0, r0, r0

20011038 <isSchedulable_read_fb_V>:
	static i32 isSchedulable_read_fb_V() {
20011038:	3021ffec 	addik	r1, r1, -20
2001103c:	fa610010 	swi	r19, r1, 16
20011040:	12610000 	addk	r19, r1, r0
		i32 result;
		i32 local_outstanding_writes;
		i32 local_max_outstanding_writes;
	
		local_outstanding_writes = outstanding_writes;
20011044:	b0002006 	imm	8198
20011048:	e8601b84 	lwi	r3, r0, 7044	// 20061b84 <outstanding_writes>
2001104c:	f8730004 	swi	r3, r19, 4
		local_max_outstanding_writes = max_outstanding_writes;
20011050:	b0002006 	imm	8198
20011054:	e8601b6c 	lwi	r3, r0, 7020	// 20061b6c <max_outstanding_writes>
20011058:	f8730008 	swi	r3, r19, 8
		result = local_outstanding_writes < local_max_outstanding_writes;
2001105c:	30600001 	addik	r3, r0, 1
20011060:	e8b30004 	lwi	r5, r19, 4
20011064:	e8930008 	lwi	r4, r19, 8
20011068:	16442801 	cmp	r18, r4, r5
2001106c:	bc520008 	blti	r18, 8		// 20011074
20011070:	10600000 	addk	r3, r0, r0
20011074:	a46300ff 	andi	r3, r3, 255
20011078:	f873000c 	swi	r3, r19, 12
		return result;
2001107c:	e873000c 	lwi	r3, r19, 12
	}
20011080:	10330000 	addk	r1, r19, r0
20011084:	ea610010 	lwi	r19, r1, 16
20011088:	30210014 	addik	r1, r1, 20
2001108c:	b60f0008 	rtsd	r15, 8
20011090:	80000000 	or	r0, r0, r0

20011094 <read_fb_V>:
	
	static void read_fb_V() {
20011094:	3021ff84 	addik	r1, r1, -124
20011098:	f9e10000 	swi	r15, r1, 0
2001109c:	fa610078 	swi	r19, r1, 120
200110a0:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_RD = index_RD % SIZE_RD;
200110a4:	b0002004 	imm	8196
200110a8:	e8608f50 	lwi	r3, r0, -28848	// 20048f50 <index_RD>
200110ac:	a46301ff 	andi	r3, r3, 511
200110b0:	f873003c 	swi	r3, r19, 60
		i32 local_start_of_frame_U;
		i32 local_MAXW_IN_SAMPLES_UV;
		i32 local_BUFFER_SIZE_UV;
		i16 tmp_frameBuffer_V;
	
		local_mbx_read = mbx_read;
200110b4:	b0002006 	imm	8198
200110b8:	e8601b7c 	lwi	r3, r0, 7036	// 20061b7c <mbx_read>
200110bc:	f8730040 	swi	r3, r19, 64
		local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
200110c0:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200110c4:	f8730044 	swi	r3, r19, 68
		local_mvx = mvx;
200110c8:	b0002006 	imm	8198
200110cc:	e4601b78 	lhui	r3, r0, 7032	// 20061b78 <mvx>
200110d0:	f4730048 	shi	r3, r19, 72
		x = local_mbx_read * local_SAMPLES_PER_MB_UV + local_mvx;
200110d4:	e8930040 	lwi	r4, r19, 64
200110d8:	e8730044 	lwi	r3, r19, 68
200110dc:	40841800 	mul	r4, r4, r3
200110e0:	e4730048 	lhui	r3, r19, 72
200110e4:	90630061 	sext16	r3, r3
200110e8:	10641800 	addk	r3, r4, r3
200110ec:	f873004c 	swi	r3, r19, 76
		local_mby_read = mby_read;
200110f0:	b0002006 	imm	8198
200110f4:	e8601b80 	lwi	r3, r0, 7040	// 20061b80 <mby_read>
200110f8:	f8730050 	swi	r3, r19, 80
		local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
200110fc:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20011100:	f8730044 	swi	r3, r19, 68
		local_mvy = mvy;
20011104:	b0002006 	imm	8198
20011108:	e4601b7a 	lhui	r3, r0, 7034	// 20061b7a <mvy>
2001110c:	f4730054 	shi	r3, r19, 84
		y = local_mby_read * local_SAMPLES_PER_MB_UV + local_mvy;
20011110:	e8930050 	lwi	r4, r19, 80
20011114:	e8730044 	lwi	r3, r19, 68
20011118:	40841800 	mul	r4, r4, r3
2001111c:	e4730054 	lhui	r3, r19, 84
20011120:	90630061 	sext16	r3, r3
20011124:	10641800 	addk	r3, r4, r3
20011128:	f873001c 	swi	r3, r19, 28
		clip_left = 0;
2001112c:	f8130020 	swi	r0, r19, 32
		clip_right = 0;
20011130:	f8130024 	swi	r0, r19, 36
		clip_x = x;
20011134:	e873004c 	lwi	r3, r19, 76
20011138:	f8730028 	swi	r3, r19, 40
		if (y < 0) {
2001113c:	e873001c 	lwi	r3, r19, 28
20011140:	bca3000c 	bgei	r3, 12		// 2001114c
			clip_y = 0;
20011144:	f813002c 	swi	r0, r19, 44
20011148:	b8000044 	bri	68		// 2001118c
		} else {
			local_vop_height_in_samples_U = vop_height_in_samples_U;
2001114c:	b0002006 	imm	8198
20011150:	e8601b74 	lwi	r3, r0, 7028	// 20061b74 <vop_height_in_samples_U>
20011154:	f8730058 	swi	r3, r19, 88
			if (y < local_vop_height_in_samples_U) {
20011158:	e893001c 	lwi	r4, r19, 28
2001115c:	e8730058 	lwi	r3, r19, 88
20011160:	16432001 	cmp	r18, r3, r4
20011164:	bcb20010 	bgei	r18, 16		// 20011174
				clip_y = y;
20011168:	e873001c 	lwi	r3, r19, 28
2001116c:	f873002c 	swi	r3, r19, 44
20011170:	b800001c 	bri	28		// 2001118c
			} else {
				local_vop_height_in_samples_U = vop_height_in_samples_U;
20011174:	b0002006 	imm	8198
20011178:	e8601b74 	lwi	r3, r0, 7028	// 20061b74 <vop_height_in_samples_U>
2001117c:	f8730058 	swi	r3, r19, 88
				clip_y = local_vop_height_in_samples_U - 1;
20011180:	e8730058 	lwi	r3, r19, 88
20011184:	3063ffff 	addik	r3, r3, -1
20011188:	f873002c 	swi	r3, r19, 44
			}
		}
		if (x < 0) {
2001118c:	e873004c 	lwi	r3, r19, 76
20011190:	bca30034 	bgei	r3, 52		// 200111c4
			clip_x = 0;
20011194:	f8130028 	swi	r0, r19, 40
			if (x < -9) {
20011198:	e893004c 	lwi	r4, r19, 76
2001119c:	3060fff7 	addik	r3, r0, -9
200111a0:	16432001 	cmp	r18, r3, r4
200111a4:	bcb20010 	bgei	r18, 16		// 200111b4
				clip_left = 9;
200111a8:	30600009 	addik	r3, r0, 9
200111ac:	f8730020 	swi	r3, r19, 32
200111b0:	b8000094 	bri	148		// 20011244
			} else {
				clip_left = -x;
200111b4:	e873004c 	lwi	r3, r19, 76
200111b8:	14630000 	rsubk	r3, r3, r0
200111bc:	f8730020 	swi	r3, r19, 32
200111c0:	b8000084 	bri	132		// 20011244
			}
		} else {
			local_vop_width_in_samples_U = vop_width_in_samples_U;
200111c4:	b0002006 	imm	8198
200111c8:	e8601b70 	lwi	r3, r0, 7024	// 20061b70 <vop_width_in_samples_U>
200111cc:	f873005c 	swi	r3, r19, 92
			if (x + 9 > local_vop_width_in_samples_U) {
200111d0:	e873004c 	lwi	r3, r19, 76
200111d4:	30830009 	addik	r4, r3, 9
200111d8:	e873005c 	lwi	r3, r19, 92
200111dc:	16441801 	cmp	r18, r4, r3
200111e0:	bcb20064 	bgei	r18, 100		// 20011244
				local_vop_width_in_samples_U = vop_width_in_samples_U;
200111e4:	b0002006 	imm	8198
200111e8:	e8601b70 	lwi	r3, r0, 7024	// 20061b70 <vop_width_in_samples_U>
200111ec:	f873005c 	swi	r3, r19, 92
				if (x >= local_vop_width_in_samples_U) {
200111f0:	e893004c 	lwi	r4, r19, 76
200111f4:	e873005c 	lwi	r3, r19, 92
200111f8:	16432001 	cmp	r18, r3, r4
200111fc:	bc520028 	blti	r18, 40		// 20011224
					local_vop_width_in_samples_U = vop_width_in_samples_U;
20011200:	b0002006 	imm	8198
20011204:	e8601b70 	lwi	r3, r0, 7024	// 20061b70 <vop_width_in_samples_U>
20011208:	f873005c 	swi	r3, r19, 92
					clip_x = local_vop_width_in_samples_U - 1;
2001120c:	e873005c 	lwi	r3, r19, 92
20011210:	3063ffff 	addik	r3, r3, -1
20011214:	f8730028 	swi	r3, r19, 40
					clip_right = 8;
20011218:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2001121c:	f8730024 	swi	r3, r19, 36
20011220:	b8000024 	bri	36		// 20011244
				} else {
					local_vop_width_in_samples_U = vop_width_in_samples_U;
20011224:	b0002006 	imm	8198
20011228:	e8601b70 	lwi	r3, r0, 7024	// 20061b70 <vop_width_in_samples_U>
2001122c:	f873005c 	swi	r3, r19, 92
					clip_right = x + 9 - local_vop_width_in_samples_U;
20011230:	e873004c 	lwi	r3, r19, 76
20011234:	30830009 	addik	r4, r3, 9
20011238:	e873005c 	lwi	r3, r19, 92
2001123c:	14632000 	rsubk	r3, r3, r4
20011240:	f8730024 	swi	r3, r19, 36
				}
			}
		}
		local_start_of_frame_U = start_of_frame_U;
20011244:	b0002004 	imm	8196
20011248:	e8606174 	lwi	r3, r0, 24948	// 20046174 <start_of_frame_U>
2001124c:	f8730060 	swi	r3, r19, 96
		local_MAXW_IN_SAMPLES_UV = MAXW_IN_SAMPLES_UV;
20011250:	30600060 	addik	r3, r0, 96
20011254:	f8730064 	swi	r3, r19, 100
		start_of_row = local_start_of_frame_U + clip_y * local_MAXW_IN_SAMPLES_UV + clip_x;
20011258:	e893002c 	lwi	r4, r19, 44
2001125c:	e8730064 	lwi	r3, r19, 100
20011260:	40841800 	mul	r4, r4, r3
20011264:	e8730060 	lwi	r3, r19, 96
20011268:	10841800 	addk	r4, r4, r3
2001126c:	e8730028 	lwi	r3, r19, 40
20011270:	10641800 	addk	r3, r4, r3
20011274:	f8730030 	swi	r3, r19, 48
		local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
20011278:	30602100 	addik	r3, r0, 8448
2001127c:	f8730068 	swi	r3, r19, 104
		if (start_of_row >= local_BUFFER_SIZE_UV) {
20011280:	e8930030 	lwi	r4, r19, 48
20011284:	e8730068 	lwi	r3, r19, 104
20011288:	16432001 	cmp	r18, r3, r4
2001128c:	bc52001c 	blti	r18, 28		// 200112a8
			local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
20011290:	30602100 	addik	r3, r0, 8448
20011294:	f8730068 	swi	r3, r19, 104
			start_of_row = start_of_row - local_BUFFER_SIZE_UV;
20011298:	e8930030 	lwi	r4, r19, 48
2001129c:	e8730068 	lwi	r3, r19, 104
200112a0:	14632000 	rsubk	r3, r3, r4
200112a4:	f8730030 	swi	r3, r19, 48
		}
		i = 0;
200112a8:	f8130038 	swi	r0, r19, 56
		while (i < 81) {
200112ac:	b8000228 	bri	552		// 200114d4
			if (clip_left != 0) {
200112b0:	e8730020 	lwi	r3, r19, 32
200112b4:	bc030084 	beqi	r3, 132		// 20011338
				end_i = i + clip_left;
200112b8:	e8930038 	lwi	r4, r19, 56
200112bc:	e8730020 	lwi	r3, r19, 32
200112c0:	10641800 	addk	r3, r4, r3
200112c4:	f873006c 	swi	r3, r19, 108
				temp = frameBuffer_V[start_of_row];
200112c8:	e8730030 	lwi	r3, r19, 48
200112cc:	10631800 	addk	r3, r3, r3
200112d0:	b0002005 	imm	8197
200112d4:	3063d958 	addik	r3, r3, -9896
200112d8:	e4630000 	lhui	r3, r3, 0
200112dc:	90630061 	sext16	r3, r3
200112e0:	f8730070 	swi	r3, r19, 112
				while (i < end_i) {
200112e4:	b8000044 	bri	68		// 20011328
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
200112e8:	b0002004 	imm	8196
200112ec:	e8606160 	lwi	r3, r0, 24928	// 20046160 <decoder_motion_framebuf_RD>
200112f0:	e8830004 	lwi	r4, r3, 4
200112f4:	b0002004 	imm	8196
200112f8:	e8a08f50 	lwi	r5, r0, -28848	// 20048f50 <index_RD>
200112fc:	e8730038 	lwi	r3, r19, 56
20011300:	10651800 	addk	r3, r5, r3
20011304:	a46301ff 	andi	r3, r3, 511
20011308:	10631800 	addk	r3, r3, r3
2001130c:	10641800 	addk	r3, r4, r3
20011310:	e8930070 	lwi	r4, r19, 112
20011314:	90840061 	sext16	r4, r4
20011318:	f4830000 	shi	r4, r3, 0
					i = i + 1;
2001131c:	e8730038 	lwi	r3, r19, 56
20011320:	30630001 	addik	r3, r3, 1
20011324:	f8730038 	swi	r3, r19, 56
		i = 0;
		while (i < 81) {
			if (clip_left != 0) {
				end_i = i + clip_left;
				temp = frameBuffer_V[start_of_row];
				while (i < end_i) {
20011328:	e8930038 	lwi	r4, r19, 56
2001132c:	e873006c 	lwi	r3, r19, 108
20011330:	16432001 	cmp	r18, r3, r4
20011334:	bc52ffb4 	blti	r18, -76		// 200112e8
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
					i = i + 1;
				}
			}
			addr = start_of_row;
20011338:	e8730030 	lwi	r3, r19, 48
2001133c:	f8730034 	swi	r3, r19, 52
			end_i = i + 9 - clip_left - clip_right;
20011340:	e8730038 	lwi	r3, r19, 56
20011344:	30830009 	addik	r4, r3, 9
20011348:	e8730020 	lwi	r3, r19, 32
2001134c:	14832000 	rsubk	r4, r3, r4
20011350:	e8730024 	lwi	r3, r19, 36
20011354:	14632000 	rsubk	r3, r3, r4
20011358:	f873006c 	swi	r3, r19, 108
			while (i < end_i) {
2001135c:	b8000064 	bri	100		// 200113c0
				tmp_frameBuffer_V = frameBuffer_V[addr];
20011360:	e8730034 	lwi	r3, r19, 52
20011364:	10631800 	addk	r3, r3, r3
20011368:	b0002005 	imm	8197
2001136c:	3063d958 	addik	r3, r3, -9896
20011370:	e4630000 	lhui	r3, r3, 0
20011374:	f4730074 	shi	r3, r19, 116
				tokens_RD[(index_RD + (i)) % SIZE_RD] = tmp_frameBuffer_V;
20011378:	b0002004 	imm	8196
2001137c:	e8606160 	lwi	r3, r0, 24928	// 20046160 <decoder_motion_framebuf_RD>
20011380:	e8830004 	lwi	r4, r3, 4
20011384:	b0002004 	imm	8196
20011388:	e8a08f50 	lwi	r5, r0, -28848	// 20048f50 <index_RD>
2001138c:	e8730038 	lwi	r3, r19, 56
20011390:	10651800 	addk	r3, r5, r3
20011394:	a46301ff 	andi	r3, r3, 511
20011398:	10631800 	addk	r3, r3, r3
2001139c:	10641800 	addk	r3, r4, r3
200113a0:	e4930074 	lhui	r4, r19, 116
200113a4:	f4830000 	shi	r4, r3, 0
				i = i + 1;
200113a8:	e8730038 	lwi	r3, r19, 56
200113ac:	30630001 	addik	r3, r3, 1
200113b0:	f8730038 	swi	r3, r19, 56
				addr = addr + 1;
200113b4:	e8730034 	lwi	r3, r19, 52
200113b8:	30630001 	addik	r3, r3, 1
200113bc:	f8730034 	swi	r3, r19, 52
					i = i + 1;
				}
			}
			addr = start_of_row;
			end_i = i + 9 - clip_left - clip_right;
			while (i < end_i) {
200113c0:	e8930038 	lwi	r4, r19, 56
200113c4:	e873006c 	lwi	r3, r19, 108
200113c8:	16432001 	cmp	r18, r3, r4
200113cc:	bc52ff94 	blti	r18, -108		// 20011360
				tmp_frameBuffer_V = frameBuffer_V[addr];
				tokens_RD[(index_RD + (i)) % SIZE_RD] = tmp_frameBuffer_V;
				i = i + 1;
				addr = addr + 1;
			}
			if (clip_right != 0) {
200113d0:	e8730024 	lwi	r3, r19, 36
200113d4:	bc030088 	beqi	r3, 136		// 2001145c
				end_i = i + clip_right;
200113d8:	e8930038 	lwi	r4, r19, 56
200113dc:	e8730024 	lwi	r3, r19, 36
200113e0:	10641800 	addk	r3, r4, r3
200113e4:	f873006c 	swi	r3, r19, 108
				temp = frameBuffer_V[addr - 1];
200113e8:	e8730034 	lwi	r3, r19, 52
200113ec:	3063ffff 	addik	r3, r3, -1
200113f0:	10631800 	addk	r3, r3, r3
200113f4:	b0002005 	imm	8197
200113f8:	3063d958 	addik	r3, r3, -9896
200113fc:	e4630000 	lhui	r3, r3, 0
20011400:	90630061 	sext16	r3, r3
20011404:	f8730070 	swi	r3, r19, 112
				while (i < end_i) {
20011408:	b8000044 	bri	68		// 2001144c
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
2001140c:	b0002004 	imm	8196
20011410:	e8606160 	lwi	r3, r0, 24928	// 20046160 <decoder_motion_framebuf_RD>
20011414:	e8830004 	lwi	r4, r3, 4
20011418:	b0002004 	imm	8196
2001141c:	e8a08f50 	lwi	r5, r0, -28848	// 20048f50 <index_RD>
20011420:	e8730038 	lwi	r3, r19, 56
20011424:	10651800 	addk	r3, r5, r3
20011428:	a46301ff 	andi	r3, r3, 511
2001142c:	10631800 	addk	r3, r3, r3
20011430:	10641800 	addk	r3, r4, r3
20011434:	e8930070 	lwi	r4, r19, 112
20011438:	90840061 	sext16	r4, r4
2001143c:	f4830000 	shi	r4, r3, 0
					i = i + 1;
20011440:	e8730038 	lwi	r3, r19, 56
20011444:	30630001 	addik	r3, r3, 1
20011448:	f8730038 	swi	r3, r19, 56
				addr = addr + 1;
			}
			if (clip_right != 0) {
				end_i = i + clip_right;
				temp = frameBuffer_V[addr - 1];
				while (i < end_i) {
2001144c:	e8930038 	lwi	r4, r19, 56
20011450:	e873006c 	lwi	r3, r19, 108
20011454:	16432001 	cmp	r18, r3, r4
20011458:	bc52ffb4 	blti	r18, -76		// 2001140c
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
					i = i + 1;
				}
			}
			y = y + 1;
2001145c:	e873001c 	lwi	r3, r19, 28
20011460:	30630001 	addik	r3, r3, 1
20011464:	f873001c 	swi	r3, r19, 28
			local_vop_height_in_samples_U = vop_height_in_samples_U;
20011468:	b0002006 	imm	8198
2001146c:	e8601b74 	lwi	r3, r0, 7028	// 20061b74 <vop_height_in_samples_U>
20011470:	f8730058 	swi	r3, r19, 88
			if (y > 0 && y < local_vop_height_in_samples_U) {
20011474:	e873001c 	lwi	r3, r19, 28
20011478:	bc63005c 	blei	r3, 92		// 200114d4
2001147c:	e893001c 	lwi	r4, r19, 28
20011480:	e8730058 	lwi	r3, r19, 88
20011484:	16432001 	cmp	r18, r3, r4
20011488:	bcb2004c 	bgei	r18, 76		// 200114d4
				local_MAXW_IN_SAMPLES_UV = MAXW_IN_SAMPLES_UV;
2001148c:	30600060 	addik	r3, r0, 96
20011490:	f8730064 	swi	r3, r19, 100
				start_of_row = start_of_row + local_MAXW_IN_SAMPLES_UV;
20011494:	e8930030 	lwi	r4, r19, 48
20011498:	e8730064 	lwi	r3, r19, 100
2001149c:	10641800 	addk	r3, r4, r3
200114a0:	f8730030 	swi	r3, r19, 48
				local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
200114a4:	30602100 	addik	r3, r0, 8448
200114a8:	f8730068 	swi	r3, r19, 104
				if (start_of_row >= local_BUFFER_SIZE_UV) {
200114ac:	e8930030 	lwi	r4, r19, 48
200114b0:	e8730068 	lwi	r3, r19, 104
200114b4:	16432001 	cmp	r18, r3, r4
200114b8:	bc52001c 	blti	r18, 28		// 200114d4
					local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
200114bc:	30602100 	addik	r3, r0, 8448
200114c0:	f8730068 	swi	r3, r19, 104
					start_of_row = start_of_row - local_BUFFER_SIZE_UV;
200114c4:	e8930030 	lwi	r4, r19, 48
200114c8:	e8730068 	lwi	r3, r19, 104
200114cc:	14632000 	rsubk	r3, r3, r4
200114d0:	f8730030 	swi	r3, r19, 48
		if (start_of_row >= local_BUFFER_SIZE_UV) {
			local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
			start_of_row = start_of_row - local_BUFFER_SIZE_UV;
		}
		i = 0;
		while (i < 81) {
200114d4:	e8930038 	lwi	r4, r19, 56
200114d8:	30600050 	addik	r3, r0, 80	// 50 <_start1>
200114dc:	16441801 	cmp	r18, r4, r3
200114e0:	bcb2fdd0 	bgei	r18, -560		// 200112b0
					local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
					start_of_row = start_of_row - local_BUFFER_SIZE_UV;
				}
			}
		}
		advance_block();
200114e4:	b9f4e694 	brlid	r15, -6508	// 2000fb78 <advance_block>
200114e8:	80000000 	or	r0, r0, r0
	
		// Update ports indexes
		index_RD += 81;
200114ec:	b0002004 	imm	8196
200114f0:	e8608f50 	lwi	r3, r0, -28848	// 20048f50 <index_RD>
200114f4:	30630051 	addik	r3, r3, 81
200114f8:	b0002004 	imm	8196
200114fc:	f8608f50 	swi	r3, r0, -28848	// 20048f50 <index_RD>
		
		write_end_RD();
20011500:	b9f4e640 	brlid	r15, -6592	// 2000fb40 <write_end_RD>
20011504:	80000000 	or	r0, r0, r0
	}
20011508:	e9e10000 	lwi	r15, r1, 0
2001150c:	10330000 	addk	r1, r19, r0
20011510:	ea610078 	lwi	r19, r1, 120
20011514:	3021007c 	addik	r1, r1, 124
20011518:	b60f0008 	rtsd	r15, 8
2001151c:	80000000 	or	r0, r0, r0

20011520 <isSchedulable_untagged_0>:
	static i32 isSchedulable_untagged_0() {
20011520:	3021fff0 	addik	r1, r1, -16
20011524:	fa61000c 	swi	r19, r1, 12
20011528:	12610000 	addk	r19, r1, r0
		i32 result;
		i32 local_outstanding_writes;
	
		local_outstanding_writes = outstanding_writes;
2001152c:	b0002006 	imm	8198
20011530:	e8601b84 	lwi	r3, r0, 7044	// 20061b84 <outstanding_writes>
20011534:	f8730004 	swi	r3, r19, 4
		result = local_outstanding_writes >= 6;
20011538:	30600001 	addik	r3, r0, 1
2001153c:	e8b30004 	lwi	r5, r19, 4
20011540:	30800005 	addik	r4, r0, 5
20011544:	16452001 	cmp	r18, r5, r4
20011548:	bc520008 	blti	r18, 8		// 20011550
2001154c:	10600000 	addk	r3, r0, r0
20011550:	a46300ff 	andi	r3, r3, 255
20011554:	f8730008 	swi	r3, r19, 8
		return result;
20011558:	e8730008 	lwi	r3, r19, 8
	}
2001155c:	10330000 	addk	r1, r19, r0
20011560:	ea61000c 	lwi	r19, r1, 12
20011564:	30210010 	addik	r1, r1, 16
20011568:	b60f0008 	rtsd	r15, 8
2001156c:	80000000 	or	r0, r0, r0

20011570 <untagged_0>:
	
	static void untagged_0() {
20011570:	3021ff98 	addik	r1, r1, -104
20011574:	f9e10000 	swi	r15, r1, 0
20011578:	fa610064 	swi	r19, r1, 100
2001157c:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_WD = index_WD % SIZE_WD;
20011580:	b0002004 	imm	8196
20011584:	e8608f40 	lwi	r3, r0, -28864	// 20048f40 <index_WD>
20011588:	a46301ff 	andi	r3, r3, 511
2001158c:	f873002c 	swi	r3, r19, 44
		i32 local_SAMPLES_PER_MB;
		i32 local_SAMPLES_PER_MB_UV;
		i32 local_vop_width;
		i32 local_BUFFER_SIZE;
	
		local_mb_write_ptr = mb_write_ptr;
20011590:	b0002006 	imm	8198
20011594:	e8601b88 	lwi	r3, r0, 7048	// 20061b88 <mb_write_ptr>
20011598:	f8730030 	swi	r3, r19, 48
		addr = local_mb_write_ptr;
2001159c:	e8730030 	lwi	r3, r19, 48
200115a0:	f873001c 	swi	r3, r19, 28
		local_mb_write_ptr_chroma = mb_write_ptr_chroma;
200115a4:	b0002006 	imm	8198
200115a8:	e8601b90 	lwi	r3, r0, 7056	// 20061b90 <mb_write_ptr_chroma>
200115ac:	f8730034 	swi	r3, r19, 52
		addr_chroma = local_mb_write_ptr_chroma;
200115b0:	e8730034 	lwi	r3, r19, 52
200115b4:	f8730020 	swi	r3, r19, 32
		y = 0;
200115b8:	f8130024 	swi	r0, r19, 36
		while (y <= 7) {
200115bc:	b80002e8 	bri	744		// 200118a4
			x = 0;
200115c0:	f8130028 	swi	r0, r19, 40
			while (x <= 7) {
200115c4:	b8000294 	bri	660		// 20011858
				tmp_WD = tokens_WD[(index_WD + (8 * y + x)) % SIZE_WD];
200115c8:	b0002004 	imm	8196
200115cc:	e8606158 	lwi	r3, r0, 24920	// 20046158 <decoder_motion_framebuf_WD>
200115d0:	e8830004 	lwi	r4, r3, 4
200115d4:	e8730024 	lwi	r3, r19, 36
200115d8:	64a30403 	bslli	r5, r3, 3
200115dc:	e8730028 	lwi	r3, r19, 40
200115e0:	10651800 	addk	r3, r5, r3
200115e4:	10a30000 	addk	r5, r3, r0
200115e8:	b0002004 	imm	8196
200115ec:	e8608f40 	lwi	r3, r0, -28864	// 20048f40 <index_WD>
200115f0:	10651800 	addk	r3, r5, r3
200115f4:	a46301ff 	andi	r3, r3, 511
200115f8:	10631800 	addk	r3, r3, r3
200115fc:	10641800 	addk	r3, r4, r3
20011600:	e4630000 	lhui	r3, r3, 0
20011604:	f4730038 	shi	r3, r19, 56
				frameBuffer[addr + x] = tmp_WD;
20011608:	e893001c 	lwi	r4, r19, 28
2001160c:	e8730028 	lwi	r3, r19, 40
20011610:	10641800 	addk	r3, r4, r3
20011614:	10631800 	addk	r3, r3, r3
20011618:	b0002004 	imm	8196
2001161c:	30638f58 	addik	r3, r3, -28840
20011620:	e4930038 	lhui	r4, r19, 56
20011624:	f4830000 	shi	r4, r3, 0
				tmp_WD0 = tokens_WD[(index_WD + (8 * y + x + 64)) % SIZE_WD];
20011628:	b0002004 	imm	8196
2001162c:	e8606158 	lwi	r3, r0, 24920	// 20046158 <decoder_motion_framebuf_WD>
20011630:	e8830004 	lwi	r4, r3, 4
20011634:	e8730024 	lwi	r3, r19, 36
20011638:	64a30403 	bslli	r5, r3, 3
2001163c:	e8730028 	lwi	r3, r19, 40
20011640:	10651800 	addk	r3, r5, r3
20011644:	10a30000 	addk	r5, r3, r0
20011648:	b0002004 	imm	8196
2001164c:	e8608f40 	lwi	r3, r0, -28864	// 20048f40 <index_WD>
20011650:	10651800 	addk	r3, r5, r3
20011654:	30630040 	addik	r3, r3, 64
20011658:	a46301ff 	andi	r3, r3, 511
2001165c:	10631800 	addk	r3, r3, r3
20011660:	10641800 	addk	r3, r4, r3
20011664:	e4630000 	lhui	r3, r3, 0
20011668:	f473003a 	shi	r3, r19, 58
				frameBuffer[addr + x + 8] = tmp_WD0;
2001166c:	e893001c 	lwi	r4, r19, 28
20011670:	e8730028 	lwi	r3, r19, 40
20011674:	10641800 	addk	r3, r4, r3
20011678:	30630008 	addik	r3, r3, 8
2001167c:	10631800 	addk	r3, r3, r3
20011680:	b0002004 	imm	8196
20011684:	30638f58 	addik	r3, r3, -28840
20011688:	e493003a 	lhui	r4, r19, 58
2001168c:	f4830000 	shi	r4, r3, 0
				local_MAXW_IN_SAMPLES = MAXW_IN_SAMPLES;
20011690:	306000c0 	addik	r3, r0, 192
20011694:	f873003c 	swi	r3, r19, 60
				tmp_WD1 = tokens_WD[(index_WD + (8 * y + x + 128)) % SIZE_WD];
20011698:	b0002004 	imm	8196
2001169c:	e8606158 	lwi	r3, r0, 24920	// 20046158 <decoder_motion_framebuf_WD>
200116a0:	e8830004 	lwi	r4, r3, 4
200116a4:	e8730024 	lwi	r3, r19, 36
200116a8:	64a30403 	bslli	r5, r3, 3
200116ac:	e8730028 	lwi	r3, r19, 40
200116b0:	10651800 	addk	r3, r5, r3
200116b4:	10a30000 	addk	r5, r3, r0
200116b8:	b0002004 	imm	8196
200116bc:	e8608f40 	lwi	r3, r0, -28864	// 20048f40 <index_WD>
200116c0:	10651800 	addk	r3, r5, r3
200116c4:	30630080 	addik	r3, r3, 128
200116c8:	a46301ff 	andi	r3, r3, 511
200116cc:	10631800 	addk	r3, r3, r3
200116d0:	10641800 	addk	r3, r4, r3
200116d4:	e4630000 	lhui	r3, r3, 0
200116d8:	f4730040 	shi	r3, r19, 64
				frameBuffer[addr + x + 8 * local_MAXW_IN_SAMPLES] = tmp_WD1;
200116dc:	e893001c 	lwi	r4, r19, 28
200116e0:	e8730028 	lwi	r3, r19, 40
200116e4:	10841800 	addk	r4, r4, r3
200116e8:	e873003c 	lwi	r3, r19, 60
200116ec:	64630403 	bslli	r3, r3, 3
200116f0:	10641800 	addk	r3, r4, r3
200116f4:	10631800 	addk	r3, r3, r3
200116f8:	b0002004 	imm	8196
200116fc:	30638f58 	addik	r3, r3, -28840
20011700:	e4930040 	lhui	r4, r19, 64
20011704:	f4830000 	shi	r4, r3, 0
				local_MAXW_IN_SAMPLES = MAXW_IN_SAMPLES;
20011708:	306000c0 	addik	r3, r0, 192
2001170c:	f873003c 	swi	r3, r19, 60
				tmp_WD2 = tokens_WD[(index_WD + (8 * y + x + 192)) % SIZE_WD];
20011710:	b0002004 	imm	8196
20011714:	e8606158 	lwi	r3, r0, 24920	// 20046158 <decoder_motion_framebuf_WD>
20011718:	e8830004 	lwi	r4, r3, 4
2001171c:	e8730024 	lwi	r3, r19, 36
20011720:	64a30403 	bslli	r5, r3, 3
20011724:	e8730028 	lwi	r3, r19, 40
20011728:	10651800 	addk	r3, r5, r3
2001172c:	10a30000 	addk	r5, r3, r0
20011730:	b0002004 	imm	8196
20011734:	e8608f40 	lwi	r3, r0, -28864	// 20048f40 <index_WD>
20011738:	10651800 	addk	r3, r5, r3
2001173c:	306300c0 	addik	r3, r3, 192
20011740:	a46301ff 	andi	r3, r3, 511
20011744:	10631800 	addk	r3, r3, r3
20011748:	10641800 	addk	r3, r4, r3
2001174c:	e4630000 	lhui	r3, r3, 0
20011750:	f4730042 	shi	r3, r19, 66
				frameBuffer[addr + x + 8 + 8 * local_MAXW_IN_SAMPLES] = tmp_WD2;
20011754:	e893001c 	lwi	r4, r19, 28
20011758:	e8730028 	lwi	r3, r19, 40
2001175c:	10641800 	addk	r3, r4, r3
20011760:	30830008 	addik	r4, r3, 8
20011764:	e873003c 	lwi	r3, r19, 60
20011768:	64630403 	bslli	r3, r3, 3
2001176c:	10641800 	addk	r3, r4, r3
20011770:	10631800 	addk	r3, r3, r3
20011774:	b0002004 	imm	8196
20011778:	30638f58 	addik	r3, r3, -28840
2001177c:	e4930042 	lhui	r4, r19, 66
20011780:	f4830000 	shi	r4, r3, 0
				tmp_WD3 = tokens_WD[(index_WD + (8 * y + x + 256)) % SIZE_WD];
20011784:	b0002004 	imm	8196
20011788:	e8606158 	lwi	r3, r0, 24920	// 20046158 <decoder_motion_framebuf_WD>
2001178c:	e8830004 	lwi	r4, r3, 4
20011790:	e8730024 	lwi	r3, r19, 36
20011794:	64a30403 	bslli	r5, r3, 3
20011798:	e8730028 	lwi	r3, r19, 40
2001179c:	10651800 	addk	r3, r5, r3
200117a0:	10a30000 	addk	r5, r3, r0
200117a4:	b0002004 	imm	8196
200117a8:	e8608f40 	lwi	r3, r0, -28864	// 20048f40 <index_WD>
200117ac:	10651800 	addk	r3, r5, r3
200117b0:	30630100 	addik	r3, r3, 256
200117b4:	a46301ff 	andi	r3, r3, 511
200117b8:	10631800 	addk	r3, r3, r3
200117bc:	10641800 	addk	r3, r4, r3
200117c0:	e4630000 	lhui	r3, r3, 0
200117c4:	f4730044 	shi	r3, r19, 68
				frameBuffer_U[addr_chroma + x] = tmp_WD3;
200117c8:	e8930020 	lwi	r4, r19, 32
200117cc:	e8730028 	lwi	r3, r19, 40
200117d0:	10641800 	addk	r3, r4, r3
200117d4:	10631800 	addk	r3, r3, r3
200117d8:	b0002005 	imm	8197
200117dc:	30639758 	addik	r3, r3, -26792
200117e0:	e4930044 	lhui	r4, r19, 68
200117e4:	f4830000 	shi	r4, r3, 0
				tmp_WD4 = tokens_WD[(index_WD + (8 * y + x + 320)) % SIZE_WD];
200117e8:	b0002004 	imm	8196
200117ec:	e8606158 	lwi	r3, r0, 24920	// 20046158 <decoder_motion_framebuf_WD>
200117f0:	e8830004 	lwi	r4, r3, 4
200117f4:	e8730024 	lwi	r3, r19, 36
200117f8:	64a30403 	bslli	r5, r3, 3
200117fc:	e8730028 	lwi	r3, r19, 40
20011800:	10651800 	addk	r3, r5, r3
20011804:	10a30000 	addk	r5, r3, r0
20011808:	b0002004 	imm	8196
2001180c:	e8608f40 	lwi	r3, r0, -28864	// 20048f40 <index_WD>
20011810:	10651800 	addk	r3, r5, r3
20011814:	30630140 	addik	r3, r3, 320
20011818:	a46301ff 	andi	r3, r3, 511
2001181c:	10631800 	addk	r3, r3, r3
20011820:	10641800 	addk	r3, r4, r3
20011824:	e4630000 	lhui	r3, r3, 0
20011828:	f4730046 	shi	r3, r19, 70
				frameBuffer_V[addr_chroma + x] = tmp_WD4;
2001182c:	e8930020 	lwi	r4, r19, 32
20011830:	e8730028 	lwi	r3, r19, 40
20011834:	10641800 	addk	r3, r4, r3
20011838:	10631800 	addk	r3, r3, r3
2001183c:	b0002005 	imm	8197
20011840:	3063d958 	addik	r3, r3, -9896
20011844:	e4930046 	lhui	r4, r19, 70
20011848:	f4830000 	shi	r4, r3, 0
				x = x + 1;
2001184c:	e8730028 	lwi	r3, r19, 40
20011850:	30630001 	addik	r3, r3, 1
20011854:	f8730028 	swi	r3, r19, 40
		local_mb_write_ptr_chroma = mb_write_ptr_chroma;
		addr_chroma = local_mb_write_ptr_chroma;
		y = 0;
		while (y <= 7) {
			x = 0;
			while (x <= 7) {
20011858:	e8930028 	lwi	r4, r19, 40
2001185c:	30600007 	addik	r3, r0, 7
20011860:	16441801 	cmp	r18, r4, r3
20011864:	bcb2fd64 	bgei	r18, -668		// 200115c8
				frameBuffer_U[addr_chroma + x] = tmp_WD3;
				tmp_WD4 = tokens_WD[(index_WD + (8 * y + x + 320)) % SIZE_WD];
				frameBuffer_V[addr_chroma + x] = tmp_WD4;
				x = x + 1;
			}
			local_MAXW_IN_SAMPLES = MAXW_IN_SAMPLES;
20011868:	306000c0 	addik	r3, r0, 192
2001186c:	f873003c 	swi	r3, r19, 60
			addr = addr + local_MAXW_IN_SAMPLES;
20011870:	e893001c 	lwi	r4, r19, 28
20011874:	e873003c 	lwi	r3, r19, 60
20011878:	10641800 	addk	r3, r4, r3
2001187c:	f873001c 	swi	r3, r19, 28
			local_MAXW_IN_SAMPLES_UV = MAXW_IN_SAMPLES_UV;
20011880:	30600060 	addik	r3, r0, 96
20011884:	f8730048 	swi	r3, r19, 72
			addr_chroma = addr_chroma + local_MAXW_IN_SAMPLES_UV;
20011888:	e8930020 	lwi	r4, r19, 32
2001188c:	e8730048 	lwi	r3, r19, 72
20011890:	10641800 	addk	r3, r4, r3
20011894:	f8730020 	swi	r3, r19, 32
			y = y + 1;
20011898:	e8730024 	lwi	r3, r19, 36
2001189c:	30630001 	addik	r3, r3, 1
200118a0:	f8730024 	swi	r3, r19, 36
		local_mb_write_ptr = mb_write_ptr;
		addr = local_mb_write_ptr;
		local_mb_write_ptr_chroma = mb_write_ptr_chroma;
		addr_chroma = local_mb_write_ptr_chroma;
		y = 0;
		while (y <= 7) {
200118a4:	e8930024 	lwi	r4, r19, 36
200118a8:	30600007 	addik	r3, r0, 7
200118ac:	16441801 	cmp	r18, r4, r3
200118b0:	bcb2fd10 	bgei	r18, -752		// 200115c0
			addr = addr + local_MAXW_IN_SAMPLES;
			local_MAXW_IN_SAMPLES_UV = MAXW_IN_SAMPLES_UV;
			addr_chroma = addr_chroma + local_MAXW_IN_SAMPLES_UV;
			y = y + 1;
		}
		local_outstanding_writes = outstanding_writes;
200118b4:	b0002006 	imm	8198
200118b8:	e8601b84 	lwi	r3, r0, 7044	// 20061b84 <outstanding_writes>
200118bc:	f873004c 	swi	r3, r19, 76
		outstanding_writes = local_outstanding_writes - 6;
200118c0:	e873004c 	lwi	r3, r19, 76
200118c4:	3063fffa 	addik	r3, r3, -6
200118c8:	b0002006 	imm	8198
200118cc:	f8601b84 	swi	r3, r0, 7044	// 20061b84 <outstanding_writes>
		local_mbx_write = mbx_write;
200118d0:	b0002006 	imm	8198
200118d4:	e8601b8c 	lwi	r3, r0, 7052	// 20061b8c <mbx_write>
200118d8:	f8730050 	swi	r3, r19, 80
		mbx_write = local_mbx_write + 1;
200118dc:	e8730050 	lwi	r3, r19, 80
200118e0:	30630001 	addik	r3, r3, 1
200118e4:	b0002006 	imm	8198
200118e8:	f8601b8c 	swi	r3, r0, 7052	// 20061b8c <mbx_write>
		local_mb_write_ptr = mb_write_ptr;
200118ec:	b0002006 	imm	8198
200118f0:	e8601b88 	lwi	r3, r0, 7048	// 20061b88 <mb_write_ptr>
200118f4:	f8730030 	swi	r3, r19, 48
		local_SAMPLES_PER_MB = SAMPLES_PER_MB;
200118f8:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
200118fc:	f8730054 	swi	r3, r19, 84
		mb_write_ptr = local_mb_write_ptr + local_SAMPLES_PER_MB;
20011900:	e8930030 	lwi	r4, r19, 48
20011904:	e8730054 	lwi	r3, r19, 84
20011908:	10641800 	addk	r3, r4, r3
2001190c:	b0002006 	imm	8198
20011910:	f8601b88 	swi	r3, r0, 7048	// 20061b88 <mb_write_ptr>
		local_mb_write_ptr_chroma = mb_write_ptr_chroma;
20011914:	b0002006 	imm	8198
20011918:	e8601b90 	lwi	r3, r0, 7056	// 20061b90 <mb_write_ptr_chroma>
2001191c:	f8730034 	swi	r3, r19, 52
		local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
20011920:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20011924:	f8730058 	swi	r3, r19, 88
		mb_write_ptr_chroma = local_mb_write_ptr_chroma + local_SAMPLES_PER_MB_UV;
20011928:	e8930034 	lwi	r4, r19, 52
2001192c:	e8730058 	lwi	r3, r19, 88
20011930:	10641800 	addk	r3, r4, r3
20011934:	b0002006 	imm	8198
20011938:	f8601b90 	swi	r3, r0, 7056	// 20061b90 <mb_write_ptr_chroma>
		local_mbx_write = mbx_write;
2001193c:	b0002006 	imm	8198
20011940:	e8601b8c 	lwi	r3, r0, 7052	// 20061b8c <mbx_write>
20011944:	f8730050 	swi	r3, r19, 80
		local_vop_width = vop_width;
20011948:	b0002006 	imm	8198
2001194c:	e8601b58 	lwi	r3, r0, 7000	// 20061b58 <vop_width>
20011950:	f873005c 	swi	r3, r19, 92
		if (local_mbx_write == local_vop_width) {
20011954:	e8930050 	lwi	r4, r19, 80
20011958:	e873005c 	lwi	r3, r19, 92
2001195c:	88641800 	xor	r3, r4, r3
20011960:	bc2300fc 	bnei	r3, 252		// 20011a5c
			mbx_write = 0;
20011964:	b0002006 	imm	8198
20011968:	f8001b8c 	swi	r0, r0, 7052	// 20061b8c <mbx_write>
			local_mb_write_ptr = mb_write_ptr;
2001196c:	b0002006 	imm	8198
20011970:	e8601b88 	lwi	r3, r0, 7048	// 20061b88 <mb_write_ptr>
20011974:	f8730030 	swi	r3, r19, 48
			local_SAMPLES_PER_MB = SAMPLES_PER_MB;
20011978:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
2001197c:	f8730054 	swi	r3, r19, 84
			local_vop_width = vop_width;
20011980:	b0002006 	imm	8198
20011984:	e8601b58 	lwi	r3, r0, 7000	// 20061b58 <vop_width>
20011988:	f873005c 	swi	r3, r19, 92
			local_SAMPLES_PER_MB = SAMPLES_PER_MB;
2001198c:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
20011990:	f8730054 	swi	r3, r19, 84
			local_MAXW_IN_SAMPLES = MAXW_IN_SAMPLES;
20011994:	306000c0 	addik	r3, r0, 192
20011998:	f873003c 	swi	r3, r19, 60
			mb_write_ptr = local_mb_write_ptr - local_SAMPLES_PER_MB * local_vop_width + local_SAMPLES_PER_MB * local_MAXW_IN_SAMPLES;
2001199c:	e8930054 	lwi	r4, r19, 84
200119a0:	e873005c 	lwi	r3, r19, 92
200119a4:	40641800 	mul	r3, r4, r3
200119a8:	e8930030 	lwi	r4, r19, 48
200119ac:	14832000 	rsubk	r4, r3, r4
200119b0:	e8b30054 	lwi	r5, r19, 84
200119b4:	e873003c 	lwi	r3, r19, 60
200119b8:	40651800 	mul	r3, r5, r3
200119bc:	10641800 	addk	r3, r4, r3
200119c0:	b0002006 	imm	8198
200119c4:	f8601b88 	swi	r3, r0, 7048	// 20061b88 <mb_write_ptr>
			local_mb_write_ptr_chroma = mb_write_ptr_chroma;
200119c8:	b0002006 	imm	8198
200119cc:	e8601b90 	lwi	r3, r0, 7056	// 20061b90 <mb_write_ptr_chroma>
200119d0:	f8730034 	swi	r3, r19, 52
			local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
200119d4:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200119d8:	f8730058 	swi	r3, r19, 88
			local_vop_width = vop_width;
200119dc:	b0002006 	imm	8198
200119e0:	e8601b58 	lwi	r3, r0, 7000	// 20061b58 <vop_width>
200119e4:	f873005c 	swi	r3, r19, 92
			local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
200119e8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200119ec:	f8730058 	swi	r3, r19, 88
			local_MAXW_IN_SAMPLES_UV = MAXW_IN_SAMPLES_UV;
200119f0:	30600060 	addik	r3, r0, 96
200119f4:	f8730048 	swi	r3, r19, 72
			mb_write_ptr_chroma = local_mb_write_ptr_chroma - local_SAMPLES_PER_MB_UV * local_vop_width + local_SAMPLES_PER_MB_UV * local_MAXW_IN_SAMPLES_UV;
200119f8:	e8930058 	lwi	r4, r19, 88
200119fc:	e873005c 	lwi	r3, r19, 92
20011a00:	40641800 	mul	r3, r4, r3
20011a04:	e8930034 	lwi	r4, r19, 52
20011a08:	14832000 	rsubk	r4, r3, r4
20011a0c:	e8b30058 	lwi	r5, r19, 88
20011a10:	e8730048 	lwi	r3, r19, 72
20011a14:	40651800 	mul	r3, r5, r3
20011a18:	10641800 	addk	r3, r4, r3
20011a1c:	b0002006 	imm	8198
20011a20:	f8601b90 	swi	r3, r0, 7056	// 20061b90 <mb_write_ptr_chroma>
			local_mb_write_ptr = mb_write_ptr;
20011a24:	b0002006 	imm	8198
20011a28:	e8601b88 	lwi	r3, r0, 7048	// 20061b88 <mb_write_ptr>
20011a2c:	f8730030 	swi	r3, r19, 48
			local_BUFFER_SIZE = BUFFER_SIZE;
20011a30:	b0000000 	imm	0
20011a34:	30608400 	addik	r3, r0, -31744
20011a38:	f8730060 	swi	r3, r19, 96
			if (local_mb_write_ptr == local_BUFFER_SIZE) {
20011a3c:	e8930030 	lwi	r4, r19, 48
20011a40:	e8730060 	lwi	r3, r19, 96
20011a44:	88641800 	xor	r3, r4, r3
20011a48:	bc230014 	bnei	r3, 20		// 20011a5c
				mb_write_ptr = 0;
20011a4c:	b0002006 	imm	8198
20011a50:	f8001b88 	swi	r0, r0, 7048	// 20061b88 <mb_write_ptr>
				mb_write_ptr_chroma = 0;
20011a54:	b0002006 	imm	8198
20011a58:	f8001b90 	swi	r0, r0, 7056	// 20061b90 <mb_write_ptr_chroma>
			}
		}
	
		// Update ports indexes
		index_WD += 384;
20011a5c:	b0002004 	imm	8196
20011a60:	e8608f40 	lwi	r3, r0, -28864	// 20048f40 <index_WD>
20011a64:	30630180 	addik	r3, r3, 384
20011a68:	b0002004 	imm	8196
20011a6c:	f8608f40 	swi	r3, r0, -28864	// 20048f40 <index_WD>
		
		read_end_WD();
20011a70:	b9f4df80 	brlid	r15, -8320	// 2000f9f0 <read_end_WD>
20011a74:	80000000 	or	r0, r0, r0
	}
20011a78:	e9e10000 	lwi	r15, r1, 0
20011a7c:	10330000 	addk	r1, r19, r0
20011a80:	ea610064 	lwi	r19, r1, 100
20011a84:	30210068 	addik	r1, r1, 104
20011a88:	b60f0008 	rtsd	r15, 8
20011a8c:	80000000 	or	r0, r0, r0

20011a90 <decoder_motion_framebuf_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_motion_framebuf_initialize() {
20011a90:	3021fff4 	addik	r1, r1, -12
20011a94:	fa610008 	swi	r19, r1, 8
20011a98:	12610000 	addk	r19, r1, r0
		int i = 0;
20011a9c:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_cmd;
20011aa0:	b0002006 	imm	8198
20011aa4:	f8001b98 	swi	r0, r0, 7064	// 20061b98 <_FSM_state>
		
	finished:
		// no read_end/write_end here!
		return;
20011aa8:	80000000 	or	r0, r0, r0
	}
20011aac:	10330000 	addk	r1, r19, r0
20011ab0:	ea610008 	lwi	r19, r1, 8
20011ab4:	3021000c 	addik	r1, r1, 12
20011ab8:	b60f0008 	rtsd	r15, 8
20011abc:	80000000 	or	r0, r0, r0

20011ac0 <decoder_motion_framebuf_outside_FSM_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	int decoder_motion_framebuf_outside_FSM_scheduler() {
20011ac0:	3021ffd8 	addik	r1, r1, -40
20011ac4:	f9e10000 	swi	r15, r1, 0
20011ac8:	fa610024 	swi	r19, r1, 36
20011acc:	12610000 	addk	r19, r1, r0
		int i = 0;
20011ad0:	f813001c 	swi	r0, r19, 28
		while (1) {
			// Action loop
			if (numTokens_WD - index_WD >= 384 && isSchedulable_untagged_0()) {
20011ad4:	b0002004 	imm	8196
20011ad8:	e8808f44 	lwi	r4, r0, -28860	// 20048f44 <numTokens_WD>
20011adc:	b0002004 	imm	8196
20011ae0:	e8608f40 	lwi	r3, r0, -28864	// 20048f40 <index_WD>
20011ae4:	14832000 	rsubk	r4, r3, r4
20011ae8:	3060017f 	addik	r3, r0, 383
20011aec:	16441803 	cmpu	r18, r4, r3
20011af0:	bcb20038 	bgei	r18, 56		// 20011b28
20011af4:	b9f4fa2c 	brlid	r15, -1492	// 20011520 <isSchedulable_untagged_0>
20011af8:	80000000 	or	r0, r0, r0
20011afc:	bc03002c 	beqi	r3, 44		// 20011b28
				int stop = 0;
20011b00:	f8130020 	swi	r0, r19, 32
				if (stop != 0) {
20011b04:	e8730020 	lwi	r3, r19, 32
20011b08:	bc030008 	beqi	r3, 8		// 20011b10
					goto finished;
20011b0c:	b800001c 	bri	28		// 20011b28
				}
				untagged_0();
20011b10:	b9f4fa60 	brlid	r15, -1440	// 20011570 <untagged_0>
20011b14:	80000000 	or	r0, r0, r0
				i++;
20011b18:	e873001c 	lwi	r3, r19, 28
20011b1c:	30630001 	addik	r3, r3, 1
20011b20:	f873001c 	swi	r3, r19, 28
			} else {
				goto finished;
			}
		}
20011b24:	b800ffb0 	bri	-80		// 20011ad4
	finished:
		// no read_end/write_end here!
		return i;
20011b28:	e873001c 	lwi	r3, r19, 28
	}
20011b2c:	e9e10000 	lwi	r15, r1, 0
20011b30:	10330000 	addk	r1, r19, r0
20011b34:	ea610024 	lwi	r19, r1, 36
20011b38:	30210028 	addik	r1, r1, 40
20011b3c:	b60f0008 	rtsd	r15, 8
20011b40:	80000000 	or	r0, r0, r0

20011b44 <decoder_motion_framebuf_scheduler>:
	
	int decoder_motion_framebuf_scheduler() {
20011b44:	3021ffb8 	addik	r1, r1, -72
20011b48:	f9e10000 	swi	r15, r1, 0
20011b4c:	fa610044 	swi	r19, r1, 68
20011b50:	12610000 	addk	r19, r1, r0
		int i = 0;
20011b54:	f813001c 	swi	r0, r19, 28
		if(needInit){
20011b58:	b0002004 	imm	8196
20011b5c:	e0606178 	lbui	r3, r0, 24952	// 20046178 <needInit>
20011b60:	bc030014 	beqi	r3, 20		// 20011b74
			decoder_motion_framebuf_initialize();
20011b64:	b9f4ff2c 	brlid	r15, -212	// 20011a90 <decoder_motion_framebuf_initialize>
20011b68:	80000000 	or	r0, r0, r0
			needInit = 0;
20011b6c:	b0002004 	imm	8196
20011b70:	f0006178 	sbi	r0, r0, 24952	// 20046178 <needInit>
		}
	
		read_MV();
20011b74:	b9f4dcb8 	brlid	r15, -9032	// 2000f82c <read_MV>
20011b78:	80000000 	or	r0, r0, r0
		read_BTYPE();
20011b7c:	b9f4dd58 	brlid	r15, -8872	// 2000f8d4 <read_BTYPE>
20011b80:	80000000 	or	r0, r0, r0
		read_WD();
20011b84:	b9f4ddfc 	brlid	r15, -8708	// 2000f980 <read_WD>
20011b88:	80000000 	or	r0, r0, r0
		write_halfpel();
20011b8c:	b9f4de9c 	brlid	r15, -8548	// 2000fa28 <write_halfpel>
20011b90:	80000000 	or	r0, r0, r0
		write_RD();
20011b94:	b9f4df3c 	brlid	r15, -8388	// 2000fad0 <write_RD>
20011b98:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
20011b9c:	b0002006 	imm	8198
20011ba0:	e8601b98 	lwi	r3, r0, 7064	// 20061b98 <_FSM_state>
20011ba4:	a8830001 	xori	r4, r3, 1
20011ba8:	bc0401d0 	beqi	r4, 464		// 20011d78
20011bac:	30800001 	addik	r4, r0, 1
20011bb0:	16441803 	cmpu	r18, r4, r3
20011bb4:	bc520024 	blti	r18, 36		// 20011bd8
20011bb8:	a8830002 	xori	r4, r3, 2
20011bbc:	bc040244 	beqi	r4, 580		// 20011e00
20011bc0:	a8630003 	xori	r3, r3, 3
20011bc4:	bc0303c0 	beqi	r3, 960		// 20011f84
		case my_state_read_fb:
			goto l_read_fb;
		case my_state_read_mv:
			goto l_read_mv;
		default:
			exit(1);
20011bc8:	30a00001 	addik	r5, r0, 1
20011bcc:	b000dffe 	imm	-8194
20011bd0:	b9f4e7c8 	brlid	r15, -6200	// 398 <exit>
20011bd4:	80000000 	or	r0, r0, r0
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_cmd:
			goto l_cmd;
20011bd8:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_cmd:
			i += decoder_motion_framebuf_outside_FSM_scheduler();
20011bdc:	b9f4fee4 	brlid	r15, -284	// 20011ac0 <decoder_motion_framebuf_outside_FSM_scheduler>
20011be0:	80000000 	or	r0, r0, r0
20011be4:	e893001c 	lwi	r4, r19, 28
20011be8:	10641800 	addk	r3, r4, r3
20011bec:	f873001c 	swi	r3, r19, 28
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_cmd_newVop()) {
20011bf0:	b0002004 	imm	8196
20011bf4:	e8808f3c 	lwi	r4, r0, -28868	// 20048f3c <numTokens_BTYPE>
20011bf8:	b0002004 	imm	8196
20011bfc:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
20011c00:	88641800 	xor	r3, r4, r3
20011c04:	bc030040 	beqi	r3, 64		// 20011c44
20011c08:	b9f4e05c 	brlid	r15, -8100	// 2000fc64 <isSchedulable_cmd_newVop>
20011c0c:	80000000 	or	r0, r0, r0
20011c10:	bc030034 	beqi	r3, 52		// 20011c44
				int stop = 0;
20011c14:	f8130034 	swi	r0, r19, 52
				if (stop != 0) {
20011c18:	e8730034 	lwi	r3, r19, 52
20011c1c:	bc030010 	beqi	r3, 16		// 20011c2c
					_FSM_state = my_state_cmd;
20011c20:	b0002006 	imm	8198
20011c24:	f8001b98 	swi	r0, r0, 7064	// 20061b98 <_FSM_state>
					goto finished;
20011c28:	b8000410 	bri	1040		// 20012038
				}
				cmd_newVop();
20011c2c:	b9f4e0ac 	brlid	r15, -8020	// 2000fcd8 <cmd_newVop>
20011c30:	80000000 	or	r0, r0, r0
				i++;
20011c34:	e873001c 	lwi	r3, r19, 28
20011c38:	30630001 	addik	r3, r3, 1
20011c3c:	f873001c 	swi	r3, r19, 28
				goto l_get_w_h;
20011c40:	b800013c 	bri	316		// 20011d7c
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_cmd_noMotion()) {
20011c44:	b0002004 	imm	8196
20011c48:	e8808f3c 	lwi	r4, r0, -28868	// 20048f3c <numTokens_BTYPE>
20011c4c:	b0002004 	imm	8196
20011c50:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
20011c54:	88641800 	xor	r3, r4, r3
20011c58:	bc030040 	beqi	r3, 64		// 20011c98
20011c5c:	b9f4e4f8 	brlid	r15, -6920	// 20010154 <isSchedulable_cmd_noMotion>
20011c60:	80000000 	or	r0, r0, r0
20011c64:	bc030034 	beqi	r3, 52		// 20011c98
				int stop = 0;
20011c68:	f8130038 	swi	r0, r19, 56
				if (stop != 0) {
20011c6c:	e8730038 	lwi	r3, r19, 56
20011c70:	bc030010 	beqi	r3, 16		// 20011c80
					_FSM_state = my_state_cmd;
20011c74:	b0002006 	imm	8198
20011c78:	f8001b98 	swi	r0, r0, 7064	// 20061b98 <_FSM_state>
					goto finished;
20011c7c:	b80003bc 	bri	956		// 20012038
				}
				cmd_noMotion();
20011c80:	b9f4e548 	brlid	r15, -6840	// 200101c8 <cmd_noMotion>
20011c84:	80000000 	or	r0, r0, r0
				i++;
20011c88:	e873001c 	lwi	r3, r19, 28
20011c8c:	30630001 	addik	r3, r3, 1
20011c90:	f873001c 	swi	r3, r19, 28
				goto l_cmd;
20011c94:	b800ff48 	bri	-184		// 20011bdc
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_cmd_motion()) {
20011c98:	b0002004 	imm	8196
20011c9c:	e8808f3c 	lwi	r4, r0, -28868	// 20048f3c <numTokens_BTYPE>
20011ca0:	b0002004 	imm	8196
20011ca4:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
20011ca8:	88641800 	xor	r3, r4, r3
20011cac:	bc030040 	beqi	r3, 64		// 20011cec
20011cb0:	b9f4e59c 	brlid	r15, -6756	// 2001024c <isSchedulable_cmd_motion>
20011cb4:	80000000 	or	r0, r0, r0
20011cb8:	bc030034 	beqi	r3, 52		// 20011cec
				int stop = 0;
20011cbc:	f813003c 	swi	r0, r19, 60
				if (stop != 0) {
20011cc0:	e873003c 	lwi	r3, r19, 60
20011cc4:	bc030010 	beqi	r3, 16		// 20011cd4
					_FSM_state = my_state_cmd;
20011cc8:	b0002006 	imm	8198
20011ccc:	f8001b98 	swi	r0, r0, 7064	// 20061b98 <_FSM_state>
					goto finished;
20011cd0:	b8000368 	bri	872		// 20012038
				}
				cmd_motion();
20011cd4:	b9f4e5ec 	brlid	r15, -6676	// 200102c0 <cmd_motion>
20011cd8:	80000000 	or	r0, r0, r0
				i++;
20011cdc:	e873001c 	lwi	r3, r19, 28
20011ce0:	30630001 	addik	r3, r3, 1
20011ce4:	f873001c 	swi	r3, r19, 28
				goto l_read_mv;
20011ce8:	b80002a0 	bri	672		// 20011f88
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_cmd_neither()) {
20011cec:	b0002004 	imm	8196
20011cf0:	e8808f3c 	lwi	r4, r0, -28868	// 20048f3c <numTokens_BTYPE>
20011cf4:	b0002004 	imm	8196
20011cf8:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
20011cfc:	88641800 	xor	r3, r4, r3
20011d00:	bc03006c 	beqi	r3, 108		// 20011d6c
20011d04:	b9f4e7e4 	brlid	r15, -6172	// 200104e8 <isSchedulable_cmd_neither>
20011d08:	80000000 	or	r0, r0, r0
20011d0c:	bc030060 	beqi	r3, 96		// 20011d6c
				int stop = 0;
20011d10:	f8130020 	swi	r0, r19, 32
				if (1 > SIZE_halfpel - index_halfpel + decoder_motion_framebuf_halfpel->read_inds[0]) {
20011d14:	b0002004 	imm	8196
20011d18:	e8606168 	lwi	r3, r0, 24936	// 20046168 <decoder_motion_framebuf_halfpel>
20011d1c:	e863000c 	lwi	r3, r3, 12
20011d20:	e8830000 	lwi	r4, r3, 0
20011d24:	b0002004 	imm	8196
20011d28:	e8608f48 	lwi	r3, r0, -28856	// 20048f48 <index_halfpel>
20011d2c:	14632000 	rsubk	r3, r3, r4
20011d30:	a863fe00 	xori	r3, r3, -512
20011d34:	bc23000c 	bnei	r3, 12		// 20011d40
					stop = 1;
20011d38:	30600001 	addik	r3, r0, 1
20011d3c:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
20011d40:	e8730020 	lwi	r3, r19, 32
20011d44:	bc030010 	beqi	r3, 16		// 20011d54
					_FSM_state = my_state_cmd;
20011d48:	b0002006 	imm	8198
20011d4c:	f8001b98 	swi	r0, r0, 7064	// 20061b98 <_FSM_state>
					goto finished;
20011d50:	b80002e8 	bri	744		// 20012038
				}
				cmd_neither();
20011d54:	b9f4e7c0 	brlid	r15, -6208	// 20010514 <cmd_neither>
20011d58:	80000000 	or	r0, r0, r0
				i++;
20011d5c:	e873001c 	lwi	r3, r19, 28
20011d60:	30630001 	addik	r3, r3, 1
20011d64:	f873001c 	swi	r3, r19, 28
				goto l_read_fb;
20011d68:	b800009c 	bri	156		// 20011e04
			} else {
				_FSM_state = my_state_cmd;
20011d6c:	b0002006 	imm	8198
20011d70:	f8001b98 	swi	r0, r0, 7064	// 20061b98 <_FSM_state>
				goto finished;
20011d74:	b80002c4 	bri	708		// 20012038
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_cmd:
			goto l_cmd;
		case my_state_get_w_h:
			goto l_get_w_h;
20011d78:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_cmd;
				goto finished;
			}
		l_get_w_h:
			i += decoder_motion_framebuf_outside_FSM_scheduler();
20011d7c:	b9f4fd44 	brlid	r15, -700	// 20011ac0 <decoder_motion_framebuf_outside_FSM_scheduler>
20011d80:	80000000 	or	r0, r0, r0
20011d84:	e893001c 	lwi	r4, r19, 28
20011d88:	10641800 	addk	r3, r4, r3
20011d8c:	f873001c 	swi	r3, r19, 28
			if (numTokens_BTYPE - index_BTYPE >= 2 && isSchedulable_get_w_h()) {
20011d90:	b0002004 	imm	8196
20011d94:	e8808f3c 	lwi	r4, r0, -28868	// 20048f3c <numTokens_BTYPE>
20011d98:	b0002004 	imm	8196
20011d9c:	e8608f38 	lwi	r3, r0, -28872	// 20048f38 <index_BTYPE>
20011da0:	14832000 	rsubk	r4, r3, r4
20011da4:	30600001 	addik	r3, r0, 1
20011da8:	16441803 	cmpu	r18, r4, r3
20011dac:	bcb20044 	bgei	r18, 68		// 20011df0
20011db0:	b9f4dfe0 	brlid	r15, -8224	// 2000fd90 <isSchedulable_get_w_h>
20011db4:	80000000 	or	r0, r0, r0
20011db8:	bc030038 	beqi	r3, 56		// 20011df0
				int stop = 0;
20011dbc:	f8130040 	swi	r0, r19, 64
				if (stop != 0) {
20011dc0:	e8730040 	lwi	r3, r19, 64
20011dc4:	bc030014 	beqi	r3, 20		// 20011dd8
					_FSM_state = my_state_get_w_h;
20011dc8:	30600001 	addik	r3, r0, 1
20011dcc:	b0002006 	imm	8198
20011dd0:	f8601b98 	swi	r3, r0, 7064	// 20061b98 <_FSM_state>
					goto finished;
20011dd4:	b8000264 	bri	612		// 20012038
				}
				get_w_h();
20011dd8:	b9f4dfe4 	brlid	r15, -8220	// 2000fdbc <get_w_h>
20011ddc:	80000000 	or	r0, r0, r0
				i++;
20011de0:	e873001c 	lwi	r3, r19, 28
20011de4:	30630001 	addik	r3, r3, 1
20011de8:	f873001c 	swi	r3, r19, 28
				goto l_cmd;
20011dec:	b800fdf0 	bri	-528		// 20011bdc
			} else {
				_FSM_state = my_state_get_w_h;
20011df0:	30600001 	addik	r3, r0, 1
20011df4:	b0002006 	imm	8198
20011df8:	f8601b98 	swi	r3, r0, 7064	// 20061b98 <_FSM_state>
				goto finished;
20011dfc:	b800023c 	bri	572		// 20012038
		case my_state_cmd:
			goto l_cmd;
		case my_state_get_w_h:
			goto l_get_w_h;
		case my_state_read_fb:
			goto l_read_fb;
20011e00:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_w_h;
				goto finished;
			}
		l_read_fb:
			i += decoder_motion_framebuf_outside_FSM_scheduler();
20011e04:	b9f4fcbc 	brlid	r15, -836	// 20011ac0 <decoder_motion_framebuf_outside_FSM_scheduler>
20011e08:	80000000 	or	r0, r0, r0
20011e0c:	e893001c 	lwi	r4, r19, 28
20011e10:	10641800 	addk	r3, r4, r3
20011e14:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_fb_Y()) {
20011e18:	b9f4e7d4 	brlid	r15, -6188	// 200105ec <isSchedulable_read_fb_Y>
20011e1c:	80000000 	or	r0, r0, r0
20011e20:	bc03006c 	beqi	r3, 108		// 20011e8c
				int stop = 0;
20011e24:	f8130024 	swi	r0, r19, 36
				if (81 > SIZE_RD - index_RD + decoder_motion_framebuf_RD->read_inds[0]) {
20011e28:	b0002004 	imm	8196
20011e2c:	e8606160 	lwi	r3, r0, 24928	// 20046160 <decoder_motion_framebuf_RD>
20011e30:	e863000c 	lwi	r3, r3, 12
20011e34:	e8830000 	lwi	r4, r3, 0
20011e38:	b0002004 	imm	8196
20011e3c:	e8608f50 	lwi	r3, r0, -28848	// 20048f50 <index_RD>
20011e40:	14632000 	rsubk	r3, r3, r4
20011e44:	30830200 	addik	r4, r3, 512
20011e48:	30600050 	addik	r3, r0, 80	// 50 <_start1>
20011e4c:	16441803 	cmpu	r18, r4, r3
20011e50:	bc52000c 	blti	r18, 12		// 20011e5c
					stop = 1;
20011e54:	30600001 	addik	r3, r0, 1
20011e58:	f8730024 	swi	r3, r19, 36
				}
				if (stop != 0) {
20011e5c:	e8730024 	lwi	r3, r19, 36
20011e60:	bc030014 	beqi	r3, 20		// 20011e74
					_FSM_state = my_state_read_fb;
20011e64:	30600002 	addik	r3, r0, 2
20011e68:	b0002006 	imm	8198
20011e6c:	f8601b98 	swi	r3, r0, 7064	// 20061b98 <_FSM_state>
					goto finished;
20011e70:	b80001c8 	bri	456		// 20012038
				}
				read_fb_Y();
20011e74:	b9f4e7f0 	brlid	r15, -6160	// 20010664 <read_fb_Y>
20011e78:	80000000 	or	r0, r0, r0
				i++;
20011e7c:	e873001c 	lwi	r3, r19, 28
20011e80:	30630001 	addik	r3, r3, 1
20011e84:	f873001c 	swi	r3, r19, 28
				goto l_cmd;
20011e88:	b800fd54 	bri	-684		// 20011bdc
			} else if (isSchedulable_read_fb_U()) {
20011e8c:	b9f4ecac 	brlid	r15, -4948	// 20010b38 <isSchedulable_read_fb_U>
20011e90:	80000000 	or	r0, r0, r0
20011e94:	bc03006c 	beqi	r3, 108		// 20011f00
				int stop = 0;
20011e98:	f8130028 	swi	r0, r19, 40
				if (81 > SIZE_RD - index_RD + decoder_motion_framebuf_RD->read_inds[0]) {
20011e9c:	b0002004 	imm	8196
20011ea0:	e8606160 	lwi	r3, r0, 24928	// 20046160 <decoder_motion_framebuf_RD>
20011ea4:	e863000c 	lwi	r3, r3, 12
20011ea8:	e8830000 	lwi	r4, r3, 0
20011eac:	b0002004 	imm	8196
20011eb0:	e8608f50 	lwi	r3, r0, -28848	// 20048f50 <index_RD>
20011eb4:	14632000 	rsubk	r3, r3, r4
20011eb8:	30830200 	addik	r4, r3, 512
20011ebc:	30600050 	addik	r3, r0, 80	// 50 <_start1>
20011ec0:	16441803 	cmpu	r18, r4, r3
20011ec4:	bc52000c 	blti	r18, 12		// 20011ed0
					stop = 1;
20011ec8:	30600001 	addik	r3, r0, 1
20011ecc:	f8730028 	swi	r3, r19, 40
				}
				if (stop != 0) {
20011ed0:	e8730028 	lwi	r3, r19, 40
20011ed4:	bc030014 	beqi	r3, 20		// 20011ee8
					_FSM_state = my_state_read_fb;
20011ed8:	30600002 	addik	r3, r0, 2
20011edc:	b0002006 	imm	8198
20011ee0:	f8601b98 	swi	r3, r0, 7064	// 20061b98 <_FSM_state>
					goto finished;
20011ee4:	b8000154 	bri	340		// 20012038
				}
				read_fb_U();
20011ee8:	b9f4ecc4 	brlid	r15, -4924	// 20010bac <read_fb_U>
20011eec:	80000000 	or	r0, r0, r0
				i++;
20011ef0:	e873001c 	lwi	r3, r19, 28
20011ef4:	30630001 	addik	r3, r3, 1
20011ef8:	f873001c 	swi	r3, r19, 28
				goto l_cmd;
20011efc:	b800fce0 	bri	-800		// 20011bdc
			} else if (isSchedulable_read_fb_V()) {
20011f00:	b9f4f138 	brlid	r15, -3784	// 20011038 <isSchedulable_read_fb_V>
20011f04:	80000000 	or	r0, r0, r0
20011f08:	bc03006c 	beqi	r3, 108		// 20011f74
				int stop = 0;
20011f0c:	f813002c 	swi	r0, r19, 44
				if (81 > SIZE_RD - index_RD + decoder_motion_framebuf_RD->read_inds[0]) {
20011f10:	b0002004 	imm	8196
20011f14:	e8606160 	lwi	r3, r0, 24928	// 20046160 <decoder_motion_framebuf_RD>
20011f18:	e863000c 	lwi	r3, r3, 12
20011f1c:	e8830000 	lwi	r4, r3, 0
20011f20:	b0002004 	imm	8196
20011f24:	e8608f50 	lwi	r3, r0, -28848	// 20048f50 <index_RD>
20011f28:	14632000 	rsubk	r3, r3, r4
20011f2c:	30830200 	addik	r4, r3, 512
20011f30:	30600050 	addik	r3, r0, 80	// 50 <_start1>
20011f34:	16441803 	cmpu	r18, r4, r3
20011f38:	bc52000c 	blti	r18, 12		// 20011f44
					stop = 1;
20011f3c:	30600001 	addik	r3, r0, 1
20011f40:	f873002c 	swi	r3, r19, 44
				}
				if (stop != 0) {
20011f44:	e873002c 	lwi	r3, r19, 44
20011f48:	bc030014 	beqi	r3, 20		// 20011f5c
					_FSM_state = my_state_read_fb;
20011f4c:	30600002 	addik	r3, r0, 2
20011f50:	b0002006 	imm	8198
20011f54:	f8601b98 	swi	r3, r0, 7064	// 20061b98 <_FSM_state>
					goto finished;
20011f58:	b80000e0 	bri	224		// 20012038
				}
				read_fb_V();
20011f5c:	b9f4f138 	brlid	r15, -3784	// 20011094 <read_fb_V>
20011f60:	80000000 	or	r0, r0, r0
				i++;
20011f64:	e873001c 	lwi	r3, r19, 28
20011f68:	30630001 	addik	r3, r3, 1
20011f6c:	f873001c 	swi	r3, r19, 28
				goto l_cmd;
20011f70:	b800fc6c 	bri	-916		// 20011bdc
			} else {
				_FSM_state = my_state_read_fb;
20011f74:	30600002 	addik	r3, r0, 2
20011f78:	b0002006 	imm	8198
20011f7c:	f8601b98 	swi	r3, r0, 7064	// 20061b98 <_FSM_state>
				goto finished;
20011f80:	b80000b8 	bri	184		// 20012038
		case my_state_get_w_h:
			goto l_get_w_h;
		case my_state_read_fb:
			goto l_read_fb;
		case my_state_read_mv:
			goto l_read_mv;
20011f84:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_fb;
				goto finished;
			}
		l_read_mv:
			i += decoder_motion_framebuf_outside_FSM_scheduler();
20011f88:	b9f4fb38 	brlid	r15, -1224	// 20011ac0 <decoder_motion_framebuf_outside_FSM_scheduler>
20011f8c:	80000000 	or	r0, r0, r0
20011f90:	e893001c 	lwi	r4, r19, 28
20011f94:	10641800 	addk	r3, r4, r3
20011f98:	f873001c 	swi	r3, r19, 28
			if (numTokens_MV - index_MV >= 2 && isSchedulable_read_mv()) {
20011f9c:	b0002004 	imm	8196
20011fa0:	e8808f34 	lwi	r4, r0, -28876	// 20048f34 <numTokens_MV>
20011fa4:	b0002004 	imm	8196
20011fa8:	e8608f30 	lwi	r3, r0, -28880	// 20048f30 <index_MV>
20011fac:	14832000 	rsubk	r4, r3, r4
20011fb0:	30600001 	addik	r3, r0, 1
20011fb4:	16441803 	cmpu	r18, r4, r3
20011fb8:	bcb20070 	bgei	r18, 112		// 20012028
20011fbc:	b9f4e380 	brlid	r15, -7296	// 2001033c <isSchedulable_read_mv>
20011fc0:	80000000 	or	r0, r0, r0
20011fc4:	bc030064 	beqi	r3, 100		// 20012028
				int stop = 0;
20011fc8:	f8130030 	swi	r0, r19, 48
				if (1 > SIZE_halfpel - index_halfpel + decoder_motion_framebuf_halfpel->read_inds[0]) {
20011fcc:	b0002004 	imm	8196
20011fd0:	e8606168 	lwi	r3, r0, 24936	// 20046168 <decoder_motion_framebuf_halfpel>
20011fd4:	e863000c 	lwi	r3, r3, 12
20011fd8:	e8830000 	lwi	r4, r3, 0
20011fdc:	b0002004 	imm	8196
20011fe0:	e8608f48 	lwi	r3, r0, -28856	// 20048f48 <index_halfpel>
20011fe4:	14632000 	rsubk	r3, r3, r4
20011fe8:	a863fe00 	xori	r3, r3, -512
20011fec:	bc23000c 	bnei	r3, 12		// 20011ff8
					stop = 1;
20011ff0:	30600001 	addik	r3, r0, 1
20011ff4:	f8730030 	swi	r3, r19, 48
				}
				if (stop != 0) {
20011ff8:	e8730030 	lwi	r3, r19, 48
20011ffc:	bc030014 	beqi	r3, 20		// 20012010
					_FSM_state = my_state_read_mv;
20012000:	30600003 	addik	r3, r0, 3
20012004:	b0002006 	imm	8198
20012008:	f8601b98 	swi	r3, r0, 7064	// 20061b98 <_FSM_state>
					goto finished;
2001200c:	b800002c 	bri	44		// 20012038
				}
				read_mv();
20012010:	b9f4e358 	brlid	r15, -7336	// 20010368 <read_mv>
20012014:	80000000 	or	r0, r0, r0
				i++;
20012018:	e873001c 	lwi	r3, r19, 28
2001201c:	30630001 	addik	r3, r3, 1
20012020:	f873001c 	swi	r3, r19, 28
				goto l_read_fb;
20012024:	b800fde0 	bri	-544		// 20011e04
			} else {
				_FSM_state = my_state_read_mv;
20012028:	30600003 	addik	r3, r0, 3
2001202c:	b0002006 	imm	8198
20012030:	f8601b98 	swi	r3, r0, 7064	// 20061b98 <_FSM_state>
				goto finished;
20012034:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_MV();
20012038:	b9f4d864 	brlid	r15, -10140	// 2000f89c <read_end_MV>
2001203c:	80000000 	or	r0, r0, r0
		read_end_BTYPE();
20012040:	b9f4d904 	brlid	r15, -9980	// 2000f944 <read_end_BTYPE>
20012044:	80000000 	or	r0, r0, r0
		read_end_WD();
20012048:	b9f4d9a8 	brlid	r15, -9816	// 2000f9f0 <read_end_WD>
2001204c:	80000000 	or	r0, r0, r0
		
		write_end_halfpel();
20012050:	b9f4da48 	brlid	r15, -9656	// 2000fa98 <write_end_halfpel>
20012054:	80000000 	or	r0, r0, r0
		write_end_RD();
20012058:	b9f4dae8 	brlid	r15, -9496	// 2000fb40 <write_end_RD>
2001205c:	80000000 	or	r0, r0, r0
		
		
		return i;
20012060:	e873001c 	lwi	r3, r19, 28
	}
20012064:	e9e10000 	lwi	r15, r1, 0
20012068:	10330000 	addk	r1, r19, r0
2001206c:	ea610044 	lwi	r19, r1, 68
20012070:	30210048 	addik	r1, r1, 72
20012074:	b60f0008 	rtsd	r15, 8
20012078:	80000000 	or	r0, r0, r0

2001207c <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001207c:	3021fff8 	addik	r1, r1, -8
20012080:	fa610004 	swi	r19, r1, 4
20012084:	12610000 	addk	r19, r1, r0
20012088:	f8b3000c 	swi	r5, r19, 12
2001208c:	f8d30010 	swi	r6, r19, 16
20012090:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20012094:	e873000c 	lwi	r3, r19, 12
20012098:	e8630010 	lwi	r3, r3, 16
2001209c:	e8830000 	lwi	r4, r3, 0
200120a0:	e873000c 	lwi	r3, r19, 12
200120a4:	e8a3000c 	lwi	r5, r3, 12
200120a8:	e8730010 	lwi	r3, r19, 16
200120ac:	64630402 	bslli	r3, r3, 2
200120b0:	10651800 	addk	r3, r5, r3
200120b4:	e8630000 	lwi	r3, r3, 0
200120b8:	14a32000 	rsubk	r5, r3, r4
200120bc:	30600001 	addik	r3, r0, 1
200120c0:	e8930014 	lwi	r4, r19, 20
200120c4:	16442803 	cmpu	r18, r4, r5
200120c8:	bcb20008 	bgei	r18, 8		// 200120d0
200120cc:	10600000 	addk	r3, r0, r0
200120d0:	a46300ff 	andi	r3, r3, 255
}
200120d4:	10330000 	addk	r1, r19, r0
200120d8:	ea610004 	lwi	r19, r1, 4
200120dc:	30210008 	addik	r1, r1, 8
200120e0:	b60f0008 	rtsd	r15, 8
200120e4:	80000000 	or	r0, r0, r0

200120e8 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200120e8:	3021fff8 	addik	r1, r1, -8
200120ec:	fa610004 	swi	r19, r1, 4
200120f0:	12610000 	addk	r19, r1, r0
200120f4:	f8b3000c 	swi	r5, r19, 12
200120f8:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200120fc:	e873000c 	lwi	r3, r19, 12
20012100:	e8630010 	lwi	r3, r3, 16
20012104:	e8830000 	lwi	r4, r3, 0
20012108:	e873000c 	lwi	r3, r19, 12
2001210c:	e8a3000c 	lwi	r5, r3, 12
20012110:	e8730010 	lwi	r3, r19, 16
20012114:	64630402 	bslli	r3, r3, 2
20012118:	10651800 	addk	r3, r5, r3
2001211c:	e8630000 	lwi	r3, r3, 0
20012120:	14632000 	rsubk	r3, r3, r4
}
20012124:	10330000 	addk	r1, r19, r0
20012128:	ea610004 	lwi	r19, r1, 4
2001212c:	30210008 	addik	r1, r1, 8
20012130:	b60f0008 	rtsd	r15, 8
20012134:	80000000 	or	r0, r0, r0

20012138 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20012138:	3021fff4 	addik	r1, r1, -12
2001213c:	fa610008 	swi	r19, r1, 8
20012140:	12610000 	addk	r19, r1, r0
20012144:	f8b30010 	swi	r5, r19, 16
20012148:	f8d30014 	swi	r6, r19, 20
2001214c:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20012150:	f8130004 	swi	r0, r19, 4
20012154:	b800005c 	bri	92		// 200121b0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20012158:	e8730010 	lwi	r3, r19, 16
2001215c:	e8830000 	lwi	r4, r3, 0
20012160:	e8730010 	lwi	r3, r19, 16
20012164:	e8a3000c 	lwi	r5, r3, 12
20012168:	e8730004 	lwi	r3, r19, 4
2001216c:	64630402 	bslli	r3, r3, 2
20012170:	10651800 	addk	r3, r5, r3
20012174:	e8a30000 	lwi	r5, r3, 0
20012178:	e8730010 	lwi	r3, r19, 16
2001217c:	e8630010 	lwi	r3, r3, 16
20012180:	e8630000 	lwi	r3, r3, 0
20012184:	14632800 	rsubk	r3, r3, r5
20012188:	10641800 	addk	r3, r4, r3
2001218c:	30830001 	addik	r4, r3, 1
20012190:	e8730018 	lwi	r3, r19, 24
20012194:	16441803 	cmpu	r18, r4, r3
20012198:	bc52000c 	blti	r18, 12		// 200121a4
            return 0;
2001219c:	10600000 	addk	r3, r0, r0
200121a0:	b8000024 	bri	36		// 200121c4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200121a4:	e8730004 	lwi	r3, r19, 4
200121a8:	30630001 	addik	r3, r3, 1
200121ac:	f8730004 	swi	r3, r19, 4
200121b0:	e8930004 	lwi	r4, r19, 4
200121b4:	e8730014 	lwi	r3, r19, 20
200121b8:	16432003 	cmpu	r18, r3, r4
200121bc:	bc52ff9c 	blti	r18, -100		// 20012158
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200121c0:	30600001 	addik	r3, r0, 1
}
200121c4:	10330000 	addk	r1, r19, r0
200121c8:	ea610008 	lwi	r19, r1, 8
200121cc:	3021000c 	addik	r1, r1, 12
200121d0:	b60f0008 	rtsd	r15, 8
200121d4:	80000000 	or	r0, r0, r0

200121d8 <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200121d8:	3021ffec 	addik	r1, r1, -20
200121dc:	fa610010 	swi	r19, r1, 16
200121e0:	12610000 	addk	r19, r1, r0
200121e4:	f8b30018 	swi	r5, r19, 24
200121e8:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200121ec:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200121f0:	f8130004 	swi	r0, r19, 4
200121f4:	b8000054 	bri	84		// 20012248
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200121f8:	e8730018 	lwi	r3, r19, 24
200121fc:	e8630010 	lwi	r3, r3, 16
20012200:	e8830000 	lwi	r4, r3, 0
20012204:	e8730018 	lwi	r3, r19, 24
20012208:	e8a3000c 	lwi	r5, r3, 12
2001220c:	e8730004 	lwi	r3, r19, 4
20012210:	64630402 	bslli	r3, r3, 2
20012214:	10651800 	addk	r3, r5, r3
20012218:	e8630000 	lwi	r3, r3, 0
2001221c:	14632000 	rsubk	r3, r3, r4
20012220:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20012224:	e8930008 	lwi	r4, r19, 8
20012228:	e873000c 	lwi	r3, r19, 12
2001222c:	16441803 	cmpu	r18, r4, r3
20012230:	bcb20008 	bgei	r18, 8		// 20012238
20012234:	10640000 	addk	r3, r4, r0
20012238:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001223c:	e8730004 	lwi	r3, r19, 4
20012240:	30630001 	addik	r3, r3, 1
20012244:	f8730004 	swi	r3, r19, 4
20012248:	e8930004 	lwi	r4, r19, 4
2001224c:	e873001c 	lwi	r3, r19, 28
20012250:	16432003 	cmpu	r18, r3, r4
20012254:	bc52ffa4 	blti	r18, -92		// 200121f8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20012258:	e8730018 	lwi	r3, r19, 24
2001225c:	e8830000 	lwi	r4, r3, 0
20012260:	e8730008 	lwi	r3, r19, 8
20012264:	14632000 	rsubk	r3, r3, r4
}
20012268:	10330000 	addk	r1, r19, r0
2001226c:	ea610010 	lwi	r19, r1, 16
20012270:	30210014 	addik	r1, r1, 20
20012274:	b60f0008 	rtsd	r15, 8
20012278:	80000000 	or	r0, r0, r0

2001227c <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001227c:	3021fff4 	addik	r1, r1, -12
20012280:	fa610008 	swi	r19, r1, 8
20012284:	12610000 	addk	r19, r1, r0
20012288:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2001228c:	e8730010 	lwi	r3, r19, 16
20012290:	e8630010 	lwi	r3, r3, 16
20012294:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20012298:	f8130004 	swi	r0, r19, 4
2001229c:	b8000028 	bri	40		// 200122c4
        fifo->read_inds[i] = 0;
200122a0:	e8730010 	lwi	r3, r19, 16
200122a4:	e883000c 	lwi	r4, r3, 12
200122a8:	e8730004 	lwi	r3, r19, 4
200122ac:	64630402 	bslli	r3, r3, 2
200122b0:	10641800 	addk	r3, r4, r3
200122b4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200122b8:	e8730004 	lwi	r3, r19, 4
200122bc:	30630001 	addik	r3, r3, 1
200122c0:	f8730004 	swi	r3, r19, 4
200122c4:	e8730010 	lwi	r3, r19, 16
200122c8:	e8830008 	lwi	r4, r3, 8
200122cc:	e8730004 	lwi	r3, r19, 4
200122d0:	16441803 	cmpu	r18, r4, r3
200122d4:	bc52ffcc 	blti	r18, -52		// 200122a0
        fifo->read_inds[i] = 0;
    }
}
200122d8:	10330000 	addk	r1, r19, r0
200122dc:	ea610008 	lwi	r19, r1, 8
200122e0:	3021000c 	addik	r1, r1, 12
200122e4:	b60f0008 	rtsd	r15, 8
200122e8:	80000000 	or	r0, r0, r0

200122ec <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200122ec:	3021fff4 	addik	r1, r1, -12
200122f0:	fa610008 	swi	r19, r1, 8
200122f4:	12610000 	addk	r19, r1, r0
200122f8:	f8b30010 	swi	r5, r19, 16
200122fc:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20012300:	e8730010 	lwi	r3, r19, 16
20012304:	e8830004 	lwi	r4, r3, 4
20012308:	e8730010 	lwi	r3, r19, 16
2001230c:	e8a3000c 	lwi	r5, r3, 12
20012310:	e8730014 	lwi	r3, r19, 20
20012314:	64630402 	bslli	r3, r3, 2
20012318:	10651800 	addk	r3, r5, r3
2001231c:	e8a30000 	lwi	r5, r3, 0
20012320:	e8730010 	lwi	r3, r19, 16
20012324:	e8630000 	lwi	r3, r3, 0
20012328:	3063ffff 	addik	r3, r3, -1
2001232c:	84651800 	and	r3, r5, r3
20012330:	10641800 	addk	r3, r4, r3
20012334:	e0630000 	lbui	r3, r3, 0
20012338:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2001233c:	e8730010 	lwi	r3, r19, 16
20012340:	e883000c 	lwi	r4, r3, 12
20012344:	e8730014 	lwi	r3, r19, 20
20012348:	64630402 	bslli	r3, r3, 2
2001234c:	10641800 	addk	r3, r4, r3
20012350:	e8830000 	lwi	r4, r3, 0
20012354:	30840001 	addik	r4, r4, 1
20012358:	f8830000 	swi	r4, r3, 0
    return value;
2001235c:	e0730004 	lbui	r3, r19, 4
20012360:	90630060 	sext8	r3, r3
}
20012364:	10330000 	addk	r1, r19, r0
20012368:	ea610008 	lwi	r19, r1, 8
2001236c:	3021000c 	addik	r1, r1, 12
20012370:	b60f0008 	rtsd	r15, 8
20012374:	80000000 	or	r0, r0, r0

20012378 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20012378:	3021fff8 	addik	r1, r1, -8
2001237c:	fa610004 	swi	r19, r1, 4
20012380:	12610000 	addk	r19, r1, r0
20012384:	f8b3000c 	swi	r5, r19, 12
20012388:	10660000 	addk	r3, r6, r0
2001238c:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20012390:	e873000c 	lwi	r3, r19, 12
20012394:	e8830004 	lwi	r4, r3, 4
20012398:	e873000c 	lwi	r3, r19, 12
2001239c:	e8630010 	lwi	r3, r3, 16
200123a0:	e8a30000 	lwi	r5, r3, 0
200123a4:	e873000c 	lwi	r3, r19, 12
200123a8:	e8630000 	lwi	r3, r3, 0
200123ac:	3063ffff 	addik	r3, r3, -1
200123b0:	84651800 	and	r3, r5, r3
200123b4:	10641800 	addk	r3, r4, r3
200123b8:	e0930010 	lbui	r4, r19, 16
200123bc:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
200123c0:	e873000c 	lwi	r3, r19, 12
200123c4:	e8630010 	lwi	r3, r3, 16
200123c8:	e8830000 	lwi	r4, r3, 0
200123cc:	30840001 	addik	r4, r4, 1
200123d0:	f8830000 	swi	r4, r3, 0
}
200123d4:	10330000 	addk	r1, r19, r0
200123d8:	ea610004 	lwi	r19, r1, 4
200123dc:	30210008 	addik	r1, r1, 8
200123e0:	b60f0008 	rtsd	r15, 8
200123e4:	80000000 	or	r0, r0, r0

200123e8 <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200123e8:	3021fff8 	addik	r1, r1, -8
200123ec:	fa610004 	swi	r19, r1, 4
200123f0:	12610000 	addk	r19, r1, r0
200123f4:	f8b3000c 	swi	r5, r19, 12
200123f8:	f8d30010 	swi	r6, r19, 16
200123fc:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20012400:	e873000c 	lwi	r3, r19, 12
20012404:	e8630010 	lwi	r3, r3, 16
20012408:	e8830000 	lwi	r4, r3, 0
2001240c:	e873000c 	lwi	r3, r19, 12
20012410:	e8a3000c 	lwi	r5, r3, 12
20012414:	e8730010 	lwi	r3, r19, 16
20012418:	64630402 	bslli	r3, r3, 2
2001241c:	10651800 	addk	r3, r5, r3
20012420:	e8630000 	lwi	r3, r3, 0
20012424:	14a32000 	rsubk	r5, r3, r4
20012428:	30600001 	addik	r3, r0, 1
2001242c:	e8930014 	lwi	r4, r19, 20
20012430:	16442803 	cmpu	r18, r4, r5
20012434:	bcb20008 	bgei	r18, 8		// 2001243c
20012438:	10600000 	addk	r3, r0, r0
2001243c:	a46300ff 	andi	r3, r3, 255
}
20012440:	10330000 	addk	r1, r19, r0
20012444:	ea610004 	lwi	r19, r1, 4
20012448:	30210008 	addik	r1, r1, 8
2001244c:	b60f0008 	rtsd	r15, 8
20012450:	80000000 	or	r0, r0, r0

20012454 <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20012454:	3021fff8 	addik	r1, r1, -8
20012458:	fa610004 	swi	r19, r1, 4
2001245c:	12610000 	addk	r19, r1, r0
20012460:	f8b3000c 	swi	r5, r19, 12
20012464:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20012468:	e873000c 	lwi	r3, r19, 12
2001246c:	e8630010 	lwi	r3, r3, 16
20012470:	e8830000 	lwi	r4, r3, 0
20012474:	e873000c 	lwi	r3, r19, 12
20012478:	e8a3000c 	lwi	r5, r3, 12
2001247c:	e8730010 	lwi	r3, r19, 16
20012480:	64630402 	bslli	r3, r3, 2
20012484:	10651800 	addk	r3, r5, r3
20012488:	e8630000 	lwi	r3, r3, 0
2001248c:	14632000 	rsubk	r3, r3, r4
}
20012490:	10330000 	addk	r1, r19, r0
20012494:	ea610004 	lwi	r19, r1, 4
20012498:	30210008 	addik	r1, r1, 8
2001249c:	b60f0008 	rtsd	r15, 8
200124a0:	80000000 	or	r0, r0, r0

200124a4 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200124a4:	3021fff4 	addik	r1, r1, -12
200124a8:	fa610008 	swi	r19, r1, 8
200124ac:	12610000 	addk	r19, r1, r0
200124b0:	f8b30010 	swi	r5, r19, 16
200124b4:	f8d30014 	swi	r6, r19, 20
200124b8:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200124bc:	f8130004 	swi	r0, r19, 4
200124c0:	b800005c 	bri	92		// 2001251c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200124c4:	e8730010 	lwi	r3, r19, 16
200124c8:	e8830000 	lwi	r4, r3, 0
200124cc:	e8730010 	lwi	r3, r19, 16
200124d0:	e8a3000c 	lwi	r5, r3, 12
200124d4:	e8730004 	lwi	r3, r19, 4
200124d8:	64630402 	bslli	r3, r3, 2
200124dc:	10651800 	addk	r3, r5, r3
200124e0:	e8a30000 	lwi	r5, r3, 0
200124e4:	e8730010 	lwi	r3, r19, 16
200124e8:	e8630010 	lwi	r3, r3, 16
200124ec:	e8630000 	lwi	r3, r3, 0
200124f0:	14632800 	rsubk	r3, r3, r5
200124f4:	10641800 	addk	r3, r4, r3
200124f8:	30830001 	addik	r4, r3, 1
200124fc:	e8730018 	lwi	r3, r19, 24
20012500:	16441803 	cmpu	r18, r4, r3
20012504:	bc52000c 	blti	r18, 12		// 20012510
            return 0;
20012508:	10600000 	addk	r3, r0, r0
2001250c:	b8000024 	bri	36		// 20012530
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20012510:	e8730004 	lwi	r3, r19, 4
20012514:	30630001 	addik	r3, r3, 1
20012518:	f8730004 	swi	r3, r19, 4
2001251c:	e8930004 	lwi	r4, r19, 4
20012520:	e8730014 	lwi	r3, r19, 20
20012524:	16432003 	cmpu	r18, r3, r4
20012528:	bc52ff9c 	blti	r18, -100		// 200124c4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001252c:	30600001 	addik	r3, r0, 1
}
20012530:	10330000 	addk	r1, r19, r0
20012534:	ea610008 	lwi	r19, r1, 8
20012538:	3021000c 	addik	r1, r1, 12
2001253c:	b60f0008 	rtsd	r15, 8
20012540:	80000000 	or	r0, r0, r0

20012544 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20012544:	3021ffec 	addik	r1, r1, -20
20012548:	fa610010 	swi	r19, r1, 16
2001254c:	12610000 	addk	r19, r1, r0
20012550:	f8b30018 	swi	r5, r19, 24
20012554:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20012558:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001255c:	f8130004 	swi	r0, r19, 4
20012560:	b8000054 	bri	84		// 200125b4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20012564:	e8730018 	lwi	r3, r19, 24
20012568:	e8630010 	lwi	r3, r3, 16
2001256c:	e8830000 	lwi	r4, r3, 0
20012570:	e8730018 	lwi	r3, r19, 24
20012574:	e8a3000c 	lwi	r5, r3, 12
20012578:	e8730004 	lwi	r3, r19, 4
2001257c:	64630402 	bslli	r3, r3, 2
20012580:	10651800 	addk	r3, r5, r3
20012584:	e8630000 	lwi	r3, r3, 0
20012588:	14632000 	rsubk	r3, r3, r4
2001258c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20012590:	e8930008 	lwi	r4, r19, 8
20012594:	e873000c 	lwi	r3, r19, 12
20012598:	16441803 	cmpu	r18, r4, r3
2001259c:	bcb20008 	bgei	r18, 8		// 200125a4
200125a0:	10640000 	addk	r3, r4, r0
200125a4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200125a8:	e8730004 	lwi	r3, r19, 4
200125ac:	30630001 	addik	r3, r3, 1
200125b0:	f8730004 	swi	r3, r19, 4
200125b4:	e8930004 	lwi	r4, r19, 4
200125b8:	e873001c 	lwi	r3, r19, 28
200125bc:	16432003 	cmpu	r18, r3, r4
200125c0:	bc52ffa4 	blti	r18, -92		// 20012564
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200125c4:	e8730018 	lwi	r3, r19, 24
200125c8:	e8830000 	lwi	r4, r3, 0
200125cc:	e8730008 	lwi	r3, r19, 8
200125d0:	14632000 	rsubk	r3, r3, r4
}
200125d4:	10330000 	addk	r1, r19, r0
200125d8:	ea610010 	lwi	r19, r1, 16
200125dc:	30210014 	addik	r1, r1, 20
200125e0:	b60f0008 	rtsd	r15, 8
200125e4:	80000000 	or	r0, r0, r0

200125e8 <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200125e8:	3021fff4 	addik	r1, r1, -12
200125ec:	fa610008 	swi	r19, r1, 8
200125f0:	12610000 	addk	r19, r1, r0
200125f4:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
200125f8:	e8730010 	lwi	r3, r19, 16
200125fc:	e8630010 	lwi	r3, r3, 16
20012600:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20012604:	f8130004 	swi	r0, r19, 4
20012608:	b8000028 	bri	40		// 20012630
        fifo->read_inds[i] = 0;
2001260c:	e8730010 	lwi	r3, r19, 16
20012610:	e883000c 	lwi	r4, r3, 12
20012614:	e8730004 	lwi	r3, r19, 4
20012618:	64630402 	bslli	r3, r3, 2
2001261c:	10641800 	addk	r3, r4, r3
20012620:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20012624:	e8730004 	lwi	r3, r19, 4
20012628:	30630001 	addik	r3, r3, 1
2001262c:	f8730004 	swi	r3, r19, 4
20012630:	e8730010 	lwi	r3, r19, 16
20012634:	e8830008 	lwi	r4, r3, 8
20012638:	e8730004 	lwi	r3, r19, 4
2001263c:	16441803 	cmpu	r18, r4, r3
20012640:	bc52ffcc 	blti	r18, -52		// 2001260c
        fifo->read_inds[i] = 0;
    }
}
20012644:	10330000 	addk	r1, r19, r0
20012648:	ea610008 	lwi	r19, r1, 8
2001264c:	3021000c 	addik	r1, r1, 12
20012650:	b60f0008 	rtsd	r15, 8
20012654:	80000000 	or	r0, r0, r0

20012658 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20012658:	3021fff4 	addik	r1, r1, -12
2001265c:	fa610008 	swi	r19, r1, 8
20012660:	12610000 	addk	r19, r1, r0
20012664:	f8b30010 	swi	r5, r19, 16
20012668:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001266c:	e8730010 	lwi	r3, r19, 16
20012670:	e8830004 	lwi	r4, r3, 4
20012674:	e8730010 	lwi	r3, r19, 16
20012678:	e8a3000c 	lwi	r5, r3, 12
2001267c:	e8730014 	lwi	r3, r19, 20
20012680:	64630402 	bslli	r3, r3, 2
20012684:	10651800 	addk	r3, r5, r3
20012688:	e8a30000 	lwi	r5, r3, 0
2001268c:	e8730010 	lwi	r3, r19, 16
20012690:	e8630000 	lwi	r3, r3, 0
20012694:	3063ffff 	addik	r3, r3, -1
20012698:	84651800 	and	r3, r5, r3
2001269c:	10631800 	addk	r3, r3, r3
200126a0:	10641800 	addk	r3, r4, r3
200126a4:	e4630000 	lhui	r3, r3, 0
200126a8:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200126ac:	e8730010 	lwi	r3, r19, 16
200126b0:	e883000c 	lwi	r4, r3, 12
200126b4:	e8730014 	lwi	r3, r19, 20
200126b8:	64630402 	bslli	r3, r3, 2
200126bc:	10641800 	addk	r3, r4, r3
200126c0:	e8830000 	lwi	r4, r3, 0
200126c4:	30840001 	addik	r4, r4, 1
200126c8:	f8830000 	swi	r4, r3, 0
    return value;
200126cc:	e4730004 	lhui	r3, r19, 4
200126d0:	90630061 	sext16	r3, r3
}
200126d4:	10330000 	addk	r1, r19, r0
200126d8:	ea610008 	lwi	r19, r1, 8
200126dc:	3021000c 	addik	r1, r1, 12
200126e0:	b60f0008 	rtsd	r15, 8
200126e4:	80000000 	or	r0, r0, r0

200126e8 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200126e8:	3021fff8 	addik	r1, r1, -8
200126ec:	fa610004 	swi	r19, r1, 4
200126f0:	12610000 	addk	r19, r1, r0
200126f4:	f8b3000c 	swi	r5, r19, 12
200126f8:	10660000 	addk	r3, r6, r0
200126fc:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20012700:	e873000c 	lwi	r3, r19, 12
20012704:	e8830004 	lwi	r4, r3, 4
20012708:	e873000c 	lwi	r3, r19, 12
2001270c:	e8630010 	lwi	r3, r3, 16
20012710:	e8a30000 	lwi	r5, r3, 0
20012714:	e873000c 	lwi	r3, r19, 12
20012718:	e8630000 	lwi	r3, r3, 0
2001271c:	3063ffff 	addik	r3, r3, -1
20012720:	84651800 	and	r3, r5, r3
20012724:	10631800 	addk	r3, r3, r3
20012728:	10641800 	addk	r3, r4, r3
2001272c:	e4930010 	lhui	r4, r19, 16
20012730:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20012734:	e873000c 	lwi	r3, r19, 12
20012738:	e8630010 	lwi	r3, r3, 16
2001273c:	e8830000 	lwi	r4, r3, 0
20012740:	30840001 	addik	r4, r4, 1
20012744:	f8830000 	swi	r4, r3, 0
}
20012748:	10330000 	addk	r1, r19, r0
2001274c:	ea610004 	lwi	r19, r1, 4
20012750:	30210008 	addik	r1, r1, 8
20012754:	b60f0008 	rtsd	r15, 8
20012758:	80000000 	or	r0, r0, r0

2001275c <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001275c:	3021fff8 	addik	r1, r1, -8
20012760:	fa610004 	swi	r19, r1, 4
20012764:	12610000 	addk	r19, r1, r0
20012768:	f8b3000c 	swi	r5, r19, 12
2001276c:	f8d30010 	swi	r6, r19, 16
20012770:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20012774:	e873000c 	lwi	r3, r19, 12
20012778:	e8630010 	lwi	r3, r3, 16
2001277c:	e8830000 	lwi	r4, r3, 0
20012780:	e873000c 	lwi	r3, r19, 12
20012784:	e8a3000c 	lwi	r5, r3, 12
20012788:	e8730010 	lwi	r3, r19, 16
2001278c:	64630402 	bslli	r3, r3, 2
20012790:	10651800 	addk	r3, r5, r3
20012794:	e8630000 	lwi	r3, r3, 0
20012798:	14a32000 	rsubk	r5, r3, r4
2001279c:	30600001 	addik	r3, r0, 1
200127a0:	e8930014 	lwi	r4, r19, 20
200127a4:	16442803 	cmpu	r18, r4, r5
200127a8:	bcb20008 	bgei	r18, 8		// 200127b0
200127ac:	10600000 	addk	r3, r0, r0
200127b0:	a46300ff 	andi	r3, r3, 255
}
200127b4:	10330000 	addk	r1, r19, r0
200127b8:	ea610004 	lwi	r19, r1, 4
200127bc:	30210008 	addik	r1, r1, 8
200127c0:	b60f0008 	rtsd	r15, 8
200127c4:	80000000 	or	r0, r0, r0

200127c8 <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200127c8:	3021fff8 	addik	r1, r1, -8
200127cc:	fa610004 	swi	r19, r1, 4
200127d0:	12610000 	addk	r19, r1, r0
200127d4:	f8b3000c 	swi	r5, r19, 12
200127d8:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200127dc:	e873000c 	lwi	r3, r19, 12
200127e0:	e8630010 	lwi	r3, r3, 16
200127e4:	e8830000 	lwi	r4, r3, 0
200127e8:	e873000c 	lwi	r3, r19, 12
200127ec:	e8a3000c 	lwi	r5, r3, 12
200127f0:	e8730010 	lwi	r3, r19, 16
200127f4:	64630402 	bslli	r3, r3, 2
200127f8:	10651800 	addk	r3, r5, r3
200127fc:	e8630000 	lwi	r3, r3, 0
20012800:	14632000 	rsubk	r3, r3, r4
}
20012804:	10330000 	addk	r1, r19, r0
20012808:	ea610004 	lwi	r19, r1, 4
2001280c:	30210008 	addik	r1, r1, 8
20012810:	b60f0008 	rtsd	r15, 8
20012814:	80000000 	or	r0, r0, r0

20012818 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20012818:	3021fff4 	addik	r1, r1, -12
2001281c:	fa610008 	swi	r19, r1, 8
20012820:	12610000 	addk	r19, r1, r0
20012824:	f8b30010 	swi	r5, r19, 16
20012828:	f8d30014 	swi	r6, r19, 20
2001282c:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20012830:	f8130004 	swi	r0, r19, 4
20012834:	b800005c 	bri	92		// 20012890
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20012838:	e8730010 	lwi	r3, r19, 16
2001283c:	e8830000 	lwi	r4, r3, 0
20012840:	e8730010 	lwi	r3, r19, 16
20012844:	e8a3000c 	lwi	r5, r3, 12
20012848:	e8730004 	lwi	r3, r19, 4
2001284c:	64630402 	bslli	r3, r3, 2
20012850:	10651800 	addk	r3, r5, r3
20012854:	e8a30000 	lwi	r5, r3, 0
20012858:	e8730010 	lwi	r3, r19, 16
2001285c:	e8630010 	lwi	r3, r3, 16
20012860:	e8630000 	lwi	r3, r3, 0
20012864:	14632800 	rsubk	r3, r3, r5
20012868:	10641800 	addk	r3, r4, r3
2001286c:	30830001 	addik	r4, r3, 1
20012870:	e8730018 	lwi	r3, r19, 24
20012874:	16441803 	cmpu	r18, r4, r3
20012878:	bc52000c 	blti	r18, 12		// 20012884
            return 0;
2001287c:	10600000 	addk	r3, r0, r0
20012880:	b8000024 	bri	36		// 200128a4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20012884:	e8730004 	lwi	r3, r19, 4
20012888:	30630001 	addik	r3, r3, 1
2001288c:	f8730004 	swi	r3, r19, 4
20012890:	e8930004 	lwi	r4, r19, 4
20012894:	e8730014 	lwi	r3, r19, 20
20012898:	16432003 	cmpu	r18, r3, r4
2001289c:	bc52ff9c 	blti	r18, -100		// 20012838
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200128a0:	30600001 	addik	r3, r0, 1
}
200128a4:	10330000 	addk	r1, r19, r0
200128a8:	ea610008 	lwi	r19, r1, 8
200128ac:	3021000c 	addik	r1, r1, 12
200128b0:	b60f0008 	rtsd	r15, 8
200128b4:	80000000 	or	r0, r0, r0

200128b8 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200128b8:	3021ffec 	addik	r1, r1, -20
200128bc:	fa610010 	swi	r19, r1, 16
200128c0:	12610000 	addk	r19, r1, r0
200128c4:	f8b30018 	swi	r5, r19, 24
200128c8:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200128cc:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200128d0:	f8130004 	swi	r0, r19, 4
200128d4:	b8000054 	bri	84		// 20012928
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200128d8:	e8730018 	lwi	r3, r19, 24
200128dc:	e8630010 	lwi	r3, r3, 16
200128e0:	e8830000 	lwi	r4, r3, 0
200128e4:	e8730018 	lwi	r3, r19, 24
200128e8:	e8a3000c 	lwi	r5, r3, 12
200128ec:	e8730004 	lwi	r3, r19, 4
200128f0:	64630402 	bslli	r3, r3, 2
200128f4:	10651800 	addk	r3, r5, r3
200128f8:	e8630000 	lwi	r3, r3, 0
200128fc:	14632000 	rsubk	r3, r3, r4
20012900:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20012904:	e8930008 	lwi	r4, r19, 8
20012908:	e873000c 	lwi	r3, r19, 12
2001290c:	16441803 	cmpu	r18, r4, r3
20012910:	bcb20008 	bgei	r18, 8		// 20012918
20012914:	10640000 	addk	r3, r4, r0
20012918:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001291c:	e8730004 	lwi	r3, r19, 4
20012920:	30630001 	addik	r3, r3, 1
20012924:	f8730004 	swi	r3, r19, 4
20012928:	e8930004 	lwi	r4, r19, 4
2001292c:	e873001c 	lwi	r3, r19, 28
20012930:	16432003 	cmpu	r18, r3, r4
20012934:	bc52ffa4 	blti	r18, -92		// 200128d8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20012938:	e8730018 	lwi	r3, r19, 24
2001293c:	e8830000 	lwi	r4, r3, 0
20012940:	e8730008 	lwi	r3, r19, 8
20012944:	14632000 	rsubk	r3, r3, r4
}
20012948:	10330000 	addk	r1, r19, r0
2001294c:	ea610010 	lwi	r19, r1, 16
20012950:	30210014 	addik	r1, r1, 20
20012954:	b60f0008 	rtsd	r15, 8
20012958:	80000000 	or	r0, r0, r0

2001295c <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001295c:	3021fff4 	addik	r1, r1, -12
20012960:	fa610008 	swi	r19, r1, 8
20012964:	12610000 	addk	r19, r1, r0
20012968:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2001296c:	e8730010 	lwi	r3, r19, 16
20012970:	e8630010 	lwi	r3, r3, 16
20012974:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20012978:	f8130004 	swi	r0, r19, 4
2001297c:	b8000028 	bri	40		// 200129a4
        fifo->read_inds[i] = 0;
20012980:	e8730010 	lwi	r3, r19, 16
20012984:	e883000c 	lwi	r4, r3, 12
20012988:	e8730004 	lwi	r3, r19, 4
2001298c:	64630402 	bslli	r3, r3, 2
20012990:	10641800 	addk	r3, r4, r3
20012994:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20012998:	e8730004 	lwi	r3, r19, 4
2001299c:	30630001 	addik	r3, r3, 1
200129a0:	f8730004 	swi	r3, r19, 4
200129a4:	e8730010 	lwi	r3, r19, 16
200129a8:	e8830008 	lwi	r4, r3, 8
200129ac:	e8730004 	lwi	r3, r19, 4
200129b0:	16441803 	cmpu	r18, r4, r3
200129b4:	bc52ffcc 	blti	r18, -52		// 20012980
        fifo->read_inds[i] = 0;
    }
}
200129b8:	10330000 	addk	r1, r19, r0
200129bc:	ea610008 	lwi	r19, r1, 8
200129c0:	3021000c 	addik	r1, r1, 12
200129c4:	b60f0008 	rtsd	r15, 8
200129c8:	80000000 	or	r0, r0, r0

200129cc <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200129cc:	3021fff4 	addik	r1, r1, -12
200129d0:	fa610008 	swi	r19, r1, 8
200129d4:	12610000 	addk	r19, r1, r0
200129d8:	f8b30010 	swi	r5, r19, 16
200129dc:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200129e0:	e8730010 	lwi	r3, r19, 16
200129e4:	e8830004 	lwi	r4, r3, 4
200129e8:	e8730010 	lwi	r3, r19, 16
200129ec:	e8a3000c 	lwi	r5, r3, 12
200129f0:	e8730014 	lwi	r3, r19, 20
200129f4:	64630402 	bslli	r3, r3, 2
200129f8:	10651800 	addk	r3, r5, r3
200129fc:	e8a30000 	lwi	r5, r3, 0
20012a00:	e8730010 	lwi	r3, r19, 16
20012a04:	e8630000 	lwi	r3, r3, 0
20012a08:	3063ffff 	addik	r3, r3, -1
20012a0c:	84651800 	and	r3, r5, r3
20012a10:	64630402 	bslli	r3, r3, 2
20012a14:	10641800 	addk	r3, r4, r3
20012a18:	e8630000 	lwi	r3, r3, 0
20012a1c:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20012a20:	e8730010 	lwi	r3, r19, 16
20012a24:	e883000c 	lwi	r4, r3, 12
20012a28:	e8730014 	lwi	r3, r19, 20
20012a2c:	64630402 	bslli	r3, r3, 2
20012a30:	10641800 	addk	r3, r4, r3
20012a34:	e8830000 	lwi	r4, r3, 0
20012a38:	30840001 	addik	r4, r4, 1
20012a3c:	f8830000 	swi	r4, r3, 0
    return value;
20012a40:	e8730004 	lwi	r3, r19, 4
}
20012a44:	10330000 	addk	r1, r19, r0
20012a48:	ea610008 	lwi	r19, r1, 8
20012a4c:	3021000c 	addik	r1, r1, 12
20012a50:	b60f0008 	rtsd	r15, 8
20012a54:	80000000 	or	r0, r0, r0

20012a58 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20012a58:	3021fff8 	addik	r1, r1, -8
20012a5c:	fa610004 	swi	r19, r1, 4
20012a60:	12610000 	addk	r19, r1, r0
20012a64:	f8b3000c 	swi	r5, r19, 12
20012a68:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20012a6c:	e873000c 	lwi	r3, r19, 12
20012a70:	e8830004 	lwi	r4, r3, 4
20012a74:	e873000c 	lwi	r3, r19, 12
20012a78:	e8630010 	lwi	r3, r3, 16
20012a7c:	e8a30000 	lwi	r5, r3, 0
20012a80:	e873000c 	lwi	r3, r19, 12
20012a84:	e8630000 	lwi	r3, r3, 0
20012a88:	3063ffff 	addik	r3, r3, -1
20012a8c:	84651800 	and	r3, r5, r3
20012a90:	64630402 	bslli	r3, r3, 2
20012a94:	10641800 	addk	r3, r4, r3
20012a98:	e8930010 	lwi	r4, r19, 16
20012a9c:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20012aa0:	e873000c 	lwi	r3, r19, 12
20012aa4:	e8630010 	lwi	r3, r3, 16
20012aa8:	e8830000 	lwi	r4, r3, 0
20012aac:	30840001 	addik	r4, r4, 1
20012ab0:	f8830000 	swi	r4, r3, 0
}
20012ab4:	10330000 	addk	r1, r19, r0
20012ab8:	ea610004 	lwi	r19, r1, 4
20012abc:	30210008 	addik	r1, r1, 8
20012ac0:	b60f0008 	rtsd	r15, 8
20012ac4:	80000000 	or	r0, r0, r0

20012ac8 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20012ac8:	3021fff8 	addik	r1, r1, -8
20012acc:	fa610004 	swi	r19, r1, 4
20012ad0:	12610000 	addk	r19, r1, r0
20012ad4:	f8b3000c 	swi	r5, r19, 12
20012ad8:	f8d30010 	swi	r6, r19, 16
20012adc:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20012ae0:	e873000c 	lwi	r3, r19, 12
20012ae4:	e8630010 	lwi	r3, r3, 16
20012ae8:	e8830000 	lwi	r4, r3, 0
20012aec:	e873000c 	lwi	r3, r19, 12
20012af0:	e8a3000c 	lwi	r5, r3, 12
20012af4:	e8730010 	lwi	r3, r19, 16
20012af8:	64630402 	bslli	r3, r3, 2
20012afc:	10651800 	addk	r3, r5, r3
20012b00:	e8630000 	lwi	r3, r3, 0
20012b04:	14a32000 	rsubk	r5, r3, r4
20012b08:	30600001 	addik	r3, r0, 1
20012b0c:	e8930014 	lwi	r4, r19, 20
20012b10:	16442803 	cmpu	r18, r4, r5
20012b14:	bcb20008 	bgei	r18, 8		// 20012b1c
20012b18:	10600000 	addk	r3, r0, r0
20012b1c:	a46300ff 	andi	r3, r3, 255
}
20012b20:	10330000 	addk	r1, r19, r0
20012b24:	ea610004 	lwi	r19, r1, 4
20012b28:	30210008 	addik	r1, r1, 8
20012b2c:	b60f0008 	rtsd	r15, 8
20012b30:	80000000 	or	r0, r0, r0

20012b34 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20012b34:	3021fff8 	addik	r1, r1, -8
20012b38:	fa610004 	swi	r19, r1, 4
20012b3c:	12610000 	addk	r19, r1, r0
20012b40:	f8b3000c 	swi	r5, r19, 12
20012b44:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20012b48:	e873000c 	lwi	r3, r19, 12
20012b4c:	e8630010 	lwi	r3, r3, 16
20012b50:	e8830000 	lwi	r4, r3, 0
20012b54:	e873000c 	lwi	r3, r19, 12
20012b58:	e8a3000c 	lwi	r5, r3, 12
20012b5c:	e8730010 	lwi	r3, r19, 16
20012b60:	64630402 	bslli	r3, r3, 2
20012b64:	10651800 	addk	r3, r5, r3
20012b68:	e8630000 	lwi	r3, r3, 0
20012b6c:	14632000 	rsubk	r3, r3, r4
}
20012b70:	10330000 	addk	r1, r19, r0
20012b74:	ea610004 	lwi	r19, r1, 4
20012b78:	30210008 	addik	r1, r1, 8
20012b7c:	b60f0008 	rtsd	r15, 8
20012b80:	80000000 	or	r0, r0, r0

20012b84 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20012b84:	3021fff4 	addik	r1, r1, -12
20012b88:	fa610008 	swi	r19, r1, 8
20012b8c:	12610000 	addk	r19, r1, r0
20012b90:	f8b30010 	swi	r5, r19, 16
20012b94:	f8d30014 	swi	r6, r19, 20
20012b98:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20012b9c:	f8130004 	swi	r0, r19, 4
20012ba0:	b800005c 	bri	92		// 20012bfc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20012ba4:	e8730010 	lwi	r3, r19, 16
20012ba8:	e8830000 	lwi	r4, r3, 0
20012bac:	e8730010 	lwi	r3, r19, 16
20012bb0:	e8a3000c 	lwi	r5, r3, 12
20012bb4:	e8730004 	lwi	r3, r19, 4
20012bb8:	64630402 	bslli	r3, r3, 2
20012bbc:	10651800 	addk	r3, r5, r3
20012bc0:	e8a30000 	lwi	r5, r3, 0
20012bc4:	e8730010 	lwi	r3, r19, 16
20012bc8:	e8630010 	lwi	r3, r3, 16
20012bcc:	e8630000 	lwi	r3, r3, 0
20012bd0:	14632800 	rsubk	r3, r3, r5
20012bd4:	10641800 	addk	r3, r4, r3
20012bd8:	30830001 	addik	r4, r3, 1
20012bdc:	e8730018 	lwi	r3, r19, 24
20012be0:	16441803 	cmpu	r18, r4, r3
20012be4:	bc52000c 	blti	r18, 12		// 20012bf0
            return 0;
20012be8:	10600000 	addk	r3, r0, r0
20012bec:	b8000024 	bri	36		// 20012c10
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20012bf0:	e8730004 	lwi	r3, r19, 4
20012bf4:	30630001 	addik	r3, r3, 1
20012bf8:	f8730004 	swi	r3, r19, 4
20012bfc:	e8930004 	lwi	r4, r19, 4
20012c00:	e8730014 	lwi	r3, r19, 20
20012c04:	16432003 	cmpu	r18, r3, r4
20012c08:	bc52ff9c 	blti	r18, -100		// 20012ba4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20012c0c:	30600001 	addik	r3, r0, 1
}
20012c10:	10330000 	addk	r1, r19, r0
20012c14:	ea610008 	lwi	r19, r1, 8
20012c18:	3021000c 	addik	r1, r1, 12
20012c1c:	b60f0008 	rtsd	r15, 8
20012c20:	80000000 	or	r0, r0, r0

20012c24 <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20012c24:	3021ffec 	addik	r1, r1, -20
20012c28:	fa610010 	swi	r19, r1, 16
20012c2c:	12610000 	addk	r19, r1, r0
20012c30:	f8b30018 	swi	r5, r19, 24
20012c34:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20012c38:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20012c3c:	f8130004 	swi	r0, r19, 4
20012c40:	b8000054 	bri	84		// 20012c94
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20012c44:	e8730018 	lwi	r3, r19, 24
20012c48:	e8630010 	lwi	r3, r3, 16
20012c4c:	e8830000 	lwi	r4, r3, 0
20012c50:	e8730018 	lwi	r3, r19, 24
20012c54:	e8a3000c 	lwi	r5, r3, 12
20012c58:	e8730004 	lwi	r3, r19, 4
20012c5c:	64630402 	bslli	r3, r3, 2
20012c60:	10651800 	addk	r3, r5, r3
20012c64:	e8630000 	lwi	r3, r3, 0
20012c68:	14632000 	rsubk	r3, r3, r4
20012c6c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20012c70:	e8930008 	lwi	r4, r19, 8
20012c74:	e873000c 	lwi	r3, r19, 12
20012c78:	16441803 	cmpu	r18, r4, r3
20012c7c:	bcb20008 	bgei	r18, 8		// 20012c84
20012c80:	10640000 	addk	r3, r4, r0
20012c84:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20012c88:	e8730004 	lwi	r3, r19, 4
20012c8c:	30630001 	addik	r3, r3, 1
20012c90:	f8730004 	swi	r3, r19, 4
20012c94:	e8930004 	lwi	r4, r19, 4
20012c98:	e873001c 	lwi	r3, r19, 28
20012c9c:	16432003 	cmpu	r18, r3, r4
20012ca0:	bc52ffa4 	blti	r18, -92		// 20012c44
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20012ca4:	e8730018 	lwi	r3, r19, 24
20012ca8:	e8830000 	lwi	r4, r3, 0
20012cac:	e8730008 	lwi	r3, r19, 8
20012cb0:	14632000 	rsubk	r3, r3, r4
}
20012cb4:	10330000 	addk	r1, r19, r0
20012cb8:	ea610010 	lwi	r19, r1, 16
20012cbc:	30210014 	addik	r1, r1, 20
20012cc0:	b60f0008 	rtsd	r15, 8
20012cc4:	80000000 	or	r0, r0, r0

20012cc8 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20012cc8:	3021fff4 	addik	r1, r1, -12
20012ccc:	fa610008 	swi	r19, r1, 8
20012cd0:	12610000 	addk	r19, r1, r0
20012cd4:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20012cd8:	e8730010 	lwi	r3, r19, 16
20012cdc:	e8630010 	lwi	r3, r3, 16
20012ce0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20012ce4:	f8130004 	swi	r0, r19, 4
20012ce8:	b8000028 	bri	40		// 20012d10
        fifo->read_inds[i] = 0;
20012cec:	e8730010 	lwi	r3, r19, 16
20012cf0:	e883000c 	lwi	r4, r3, 12
20012cf4:	e8730004 	lwi	r3, r19, 4
20012cf8:	64630402 	bslli	r3, r3, 2
20012cfc:	10641800 	addk	r3, r4, r3
20012d00:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20012d04:	e8730004 	lwi	r3, r19, 4
20012d08:	30630001 	addik	r3, r3, 1
20012d0c:	f8730004 	swi	r3, r19, 4
20012d10:	e8730010 	lwi	r3, r19, 16
20012d14:	e8830008 	lwi	r4, r3, 8
20012d18:	e8730004 	lwi	r3, r19, 4
20012d1c:	16441803 	cmpu	r18, r4, r3
20012d20:	bc52ffcc 	blti	r18, -52		// 20012cec
        fifo->read_inds[i] = 0;
    }
}
20012d24:	10330000 	addk	r1, r19, r0
20012d28:	ea610008 	lwi	r19, r1, 8
20012d2c:	3021000c 	addik	r1, r1, 12
20012d30:	b60f0008 	rtsd	r15, 8
20012d34:	80000000 	or	r0, r0, r0

20012d38 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20012d38:	3021fff0 	addik	r1, r1, -16
20012d3c:	fa61000c 	swi	r19, r1, 12
20012d40:	12610000 	addk	r19, r1, r0
20012d44:	f8b30014 	swi	r5, r19, 20
20012d48:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20012d4c:	e8730014 	lwi	r3, r19, 20
20012d50:	e8830004 	lwi	r4, r3, 4
20012d54:	e8730014 	lwi	r3, r19, 20
20012d58:	e8a3000c 	lwi	r5, r3, 12
20012d5c:	e8730018 	lwi	r3, r19, 24
20012d60:	64630402 	bslli	r3, r3, 2
20012d64:	10651800 	addk	r3, r5, r3
20012d68:	e8a30000 	lwi	r5, r3, 0
20012d6c:	e8730014 	lwi	r3, r19, 20
20012d70:	e8630000 	lwi	r3, r3, 0
20012d74:	3063ffff 	addik	r3, r3, -1
20012d78:	84651800 	and	r3, r5, r3
20012d7c:	64630403 	bslli	r3, r3, 3
20012d80:	10641800 	addk	r3, r4, r3
20012d84:	e8830000 	lwi	r4, r3, 0
20012d88:	e8a30004 	lwi	r5, r3, 4
20012d8c:	f8930004 	swi	r4, r19, 4
20012d90:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20012d94:	e8730014 	lwi	r3, r19, 20
20012d98:	e883000c 	lwi	r4, r3, 12
20012d9c:	e8730018 	lwi	r3, r19, 24
20012da0:	64630402 	bslli	r3, r3, 2
20012da4:	10641800 	addk	r3, r4, r3
20012da8:	e8830000 	lwi	r4, r3, 0
20012dac:	30840001 	addik	r4, r4, 1
20012db0:	f8830000 	swi	r4, r3, 0
    return value;
20012db4:	e8930004 	lwi	r4, r19, 4
20012db8:	e8b30008 	lwi	r5, r19, 8
}
20012dbc:	10640000 	addk	r3, r4, r0
20012dc0:	10850000 	addk	r4, r5, r0
20012dc4:	10330000 	addk	r1, r19, r0
20012dc8:	ea61000c 	lwi	r19, r1, 12
20012dcc:	30210010 	addik	r1, r1, 16
20012dd0:	b60f0008 	rtsd	r15, 8
20012dd4:	80000000 	or	r0, r0, r0

20012dd8 <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20012dd8:	3021fff8 	addik	r1, r1, -8
20012ddc:	fa610004 	swi	r19, r1, 4
20012de0:	12610000 	addk	r19, r1, r0
20012de4:	f8b3000c 	swi	r5, r19, 12
20012de8:	f8d30010 	swi	r6, r19, 16
20012dec:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20012df0:	e873000c 	lwi	r3, r19, 12
20012df4:	e8830004 	lwi	r4, r3, 4
20012df8:	e873000c 	lwi	r3, r19, 12
20012dfc:	e8630010 	lwi	r3, r3, 16
20012e00:	e8a30000 	lwi	r5, r3, 0
20012e04:	e873000c 	lwi	r3, r19, 12
20012e08:	e8630000 	lwi	r3, r3, 0
20012e0c:	3063ffff 	addik	r3, r3, -1
20012e10:	84651800 	and	r3, r5, r3
20012e14:	64630403 	bslli	r3, r3, 3
20012e18:	10641800 	addk	r3, r4, r3
20012e1c:	e8930010 	lwi	r4, r19, 16
20012e20:	e8b30014 	lwi	r5, r19, 20
20012e24:	f8830000 	swi	r4, r3, 0
20012e28:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20012e2c:	e873000c 	lwi	r3, r19, 12
20012e30:	e8630010 	lwi	r3, r3, 16
20012e34:	e8830000 	lwi	r4, r3, 0
20012e38:	30840001 	addik	r4, r4, 1
20012e3c:	f8830000 	swi	r4, r3, 0
}
20012e40:	10330000 	addk	r1, r19, r0
20012e44:	ea610004 	lwi	r19, r1, 4
20012e48:	30210008 	addik	r1, r1, 8
20012e4c:	b60f0008 	rtsd	r15, 8
20012e50:	80000000 	or	r0, r0, r0

20012e54 <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20012e54:	3021fff8 	addik	r1, r1, -8
20012e58:	fa610004 	swi	r19, r1, 4
20012e5c:	12610000 	addk	r19, r1, r0
20012e60:	f8b3000c 	swi	r5, r19, 12
20012e64:	f8d30010 	swi	r6, r19, 16
20012e68:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20012e6c:	e873000c 	lwi	r3, r19, 12
20012e70:	e8630010 	lwi	r3, r3, 16
20012e74:	e8830000 	lwi	r4, r3, 0
20012e78:	e873000c 	lwi	r3, r19, 12
20012e7c:	e8a3000c 	lwi	r5, r3, 12
20012e80:	e8730010 	lwi	r3, r19, 16
20012e84:	64630402 	bslli	r3, r3, 2
20012e88:	10651800 	addk	r3, r5, r3
20012e8c:	e8630000 	lwi	r3, r3, 0
20012e90:	14a32000 	rsubk	r5, r3, r4
20012e94:	30600001 	addik	r3, r0, 1
20012e98:	e8930014 	lwi	r4, r19, 20
20012e9c:	16442803 	cmpu	r18, r4, r5
20012ea0:	bcb20008 	bgei	r18, 8		// 20012ea8
20012ea4:	10600000 	addk	r3, r0, r0
20012ea8:	a46300ff 	andi	r3, r3, 255
}
20012eac:	10330000 	addk	r1, r19, r0
20012eb0:	ea610004 	lwi	r19, r1, 4
20012eb4:	30210008 	addik	r1, r1, 8
20012eb8:	b60f0008 	rtsd	r15, 8
20012ebc:	80000000 	or	r0, r0, r0

20012ec0 <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20012ec0:	3021fff8 	addik	r1, r1, -8
20012ec4:	fa610004 	swi	r19, r1, 4
20012ec8:	12610000 	addk	r19, r1, r0
20012ecc:	f8b3000c 	swi	r5, r19, 12
20012ed0:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20012ed4:	e873000c 	lwi	r3, r19, 12
20012ed8:	e8630010 	lwi	r3, r3, 16
20012edc:	e8830000 	lwi	r4, r3, 0
20012ee0:	e873000c 	lwi	r3, r19, 12
20012ee4:	e8a3000c 	lwi	r5, r3, 12
20012ee8:	e8730010 	lwi	r3, r19, 16
20012eec:	64630402 	bslli	r3, r3, 2
20012ef0:	10651800 	addk	r3, r5, r3
20012ef4:	e8630000 	lwi	r3, r3, 0
20012ef8:	14632000 	rsubk	r3, r3, r4
}
20012efc:	10330000 	addk	r1, r19, r0
20012f00:	ea610004 	lwi	r19, r1, 4
20012f04:	30210008 	addik	r1, r1, 8
20012f08:	b60f0008 	rtsd	r15, 8
20012f0c:	80000000 	or	r0, r0, r0

20012f10 <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20012f10:	3021fff4 	addik	r1, r1, -12
20012f14:	fa610008 	swi	r19, r1, 8
20012f18:	12610000 	addk	r19, r1, r0
20012f1c:	f8b30010 	swi	r5, r19, 16
20012f20:	f8d30014 	swi	r6, r19, 20
20012f24:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20012f28:	f8130004 	swi	r0, r19, 4
20012f2c:	b800005c 	bri	92		// 20012f88
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20012f30:	e8730010 	lwi	r3, r19, 16
20012f34:	e8830000 	lwi	r4, r3, 0
20012f38:	e8730010 	lwi	r3, r19, 16
20012f3c:	e8a3000c 	lwi	r5, r3, 12
20012f40:	e8730004 	lwi	r3, r19, 4
20012f44:	64630402 	bslli	r3, r3, 2
20012f48:	10651800 	addk	r3, r5, r3
20012f4c:	e8a30000 	lwi	r5, r3, 0
20012f50:	e8730010 	lwi	r3, r19, 16
20012f54:	e8630010 	lwi	r3, r3, 16
20012f58:	e8630000 	lwi	r3, r3, 0
20012f5c:	14632800 	rsubk	r3, r3, r5
20012f60:	10641800 	addk	r3, r4, r3
20012f64:	30830001 	addik	r4, r3, 1
20012f68:	e8730018 	lwi	r3, r19, 24
20012f6c:	16441803 	cmpu	r18, r4, r3
20012f70:	bc52000c 	blti	r18, 12		// 20012f7c
            return 0;
20012f74:	10600000 	addk	r3, r0, r0
20012f78:	b8000024 	bri	36		// 20012f9c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20012f7c:	e8730004 	lwi	r3, r19, 4
20012f80:	30630001 	addik	r3, r3, 1
20012f84:	f8730004 	swi	r3, r19, 4
20012f88:	e8930004 	lwi	r4, r19, 4
20012f8c:	e8730014 	lwi	r3, r19, 20
20012f90:	16432003 	cmpu	r18, r3, r4
20012f94:	bc52ff9c 	blti	r18, -100		// 20012f30
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20012f98:	30600001 	addik	r3, r0, 1
}
20012f9c:	10330000 	addk	r1, r19, r0
20012fa0:	ea610008 	lwi	r19, r1, 8
20012fa4:	3021000c 	addik	r1, r1, 12
20012fa8:	b60f0008 	rtsd	r15, 8
20012fac:	80000000 	or	r0, r0, r0

20012fb0 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20012fb0:	3021ffec 	addik	r1, r1, -20
20012fb4:	fa610010 	swi	r19, r1, 16
20012fb8:	12610000 	addk	r19, r1, r0
20012fbc:	f8b30018 	swi	r5, r19, 24
20012fc0:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20012fc4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20012fc8:	f8130004 	swi	r0, r19, 4
20012fcc:	b8000054 	bri	84		// 20013020
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20012fd0:	e8730018 	lwi	r3, r19, 24
20012fd4:	e8630010 	lwi	r3, r3, 16
20012fd8:	e8830000 	lwi	r4, r3, 0
20012fdc:	e8730018 	lwi	r3, r19, 24
20012fe0:	e8a3000c 	lwi	r5, r3, 12
20012fe4:	e8730004 	lwi	r3, r19, 4
20012fe8:	64630402 	bslli	r3, r3, 2
20012fec:	10651800 	addk	r3, r5, r3
20012ff0:	e8630000 	lwi	r3, r3, 0
20012ff4:	14632000 	rsubk	r3, r3, r4
20012ff8:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20012ffc:	e8930008 	lwi	r4, r19, 8
20013000:	e873000c 	lwi	r3, r19, 12
20013004:	16441803 	cmpu	r18, r4, r3
20013008:	bcb20008 	bgei	r18, 8		// 20013010
2001300c:	10640000 	addk	r3, r4, r0
20013010:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20013014:	e8730004 	lwi	r3, r19, 4
20013018:	30630001 	addik	r3, r3, 1
2001301c:	f8730004 	swi	r3, r19, 4
20013020:	e8930004 	lwi	r4, r19, 4
20013024:	e873001c 	lwi	r3, r19, 28
20013028:	16432003 	cmpu	r18, r3, r4
2001302c:	bc52ffa4 	blti	r18, -92		// 20012fd0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20013030:	e8730018 	lwi	r3, r19, 24
20013034:	e8830000 	lwi	r4, r3, 0
20013038:	e8730008 	lwi	r3, r19, 8
2001303c:	14632000 	rsubk	r3, r3, r4
}
20013040:	10330000 	addk	r1, r19, r0
20013044:	ea610010 	lwi	r19, r1, 16
20013048:	30210014 	addik	r1, r1, 20
2001304c:	b60f0008 	rtsd	r15, 8
20013050:	80000000 	or	r0, r0, r0

20013054 <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20013054:	3021fff4 	addik	r1, r1, -12
20013058:	fa610008 	swi	r19, r1, 8
2001305c:	12610000 	addk	r19, r1, r0
20013060:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20013064:	e8730010 	lwi	r3, r19, 16
20013068:	e8630010 	lwi	r3, r3, 16
2001306c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20013070:	f8130004 	swi	r0, r19, 4
20013074:	b8000028 	bri	40		// 2001309c
        fifo->read_inds[i] = 0;
20013078:	e8730010 	lwi	r3, r19, 16
2001307c:	e883000c 	lwi	r4, r3, 12
20013080:	e8730004 	lwi	r3, r19, 4
20013084:	64630402 	bslli	r3, r3, 2
20013088:	10641800 	addk	r3, r4, r3
2001308c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20013090:	e8730004 	lwi	r3, r19, 4
20013094:	30630001 	addik	r3, r3, 1
20013098:	f8730004 	swi	r3, r19, 4
2001309c:	e8730010 	lwi	r3, r19, 16
200130a0:	e8830008 	lwi	r4, r3, 8
200130a4:	e8730004 	lwi	r3, r19, 4
200130a8:	16441803 	cmpu	r18, r4, r3
200130ac:	bc52ffcc 	blti	r18, -52		// 20013078
        fifo->read_inds[i] = 0;
    }
}
200130b0:	10330000 	addk	r1, r19, r0
200130b4:	ea610008 	lwi	r19, r1, 8
200130b8:	3021000c 	addik	r1, r1, 12
200130bc:	b60f0008 	rtsd	r15, 8
200130c0:	80000000 	or	r0, r0, r0

200130c4 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200130c4:	3021fff4 	addik	r1, r1, -12
200130c8:	fa610008 	swi	r19, r1, 8
200130cc:	12610000 	addk	r19, r1, r0
200130d0:	f8b30010 	swi	r5, r19, 16
200130d4:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200130d8:	e8730010 	lwi	r3, r19, 16
200130dc:	e8830004 	lwi	r4, r3, 4
200130e0:	e8730010 	lwi	r3, r19, 16
200130e4:	e8a3000c 	lwi	r5, r3, 12
200130e8:	e8730014 	lwi	r3, r19, 20
200130ec:	64630402 	bslli	r3, r3, 2
200130f0:	10651800 	addk	r3, r5, r3
200130f4:	e8a30000 	lwi	r5, r3, 0
200130f8:	e8730010 	lwi	r3, r19, 16
200130fc:	e8630000 	lwi	r3, r3, 0
20013100:	3063ffff 	addik	r3, r3, -1
20013104:	84651800 	and	r3, r5, r3
20013108:	10641800 	addk	r3, r4, r3
2001310c:	e0630000 	lbui	r3, r3, 0
20013110:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20013114:	e8730010 	lwi	r3, r19, 16
20013118:	e883000c 	lwi	r4, r3, 12
2001311c:	e8730014 	lwi	r3, r19, 20
20013120:	64630402 	bslli	r3, r3, 2
20013124:	10641800 	addk	r3, r4, r3
20013128:	e8830000 	lwi	r4, r3, 0
2001312c:	30840001 	addik	r4, r4, 1
20013130:	f8830000 	swi	r4, r3, 0
    return value;
20013134:	e0730004 	lbui	r3, r19, 4
}
20013138:	10330000 	addk	r1, r19, r0
2001313c:	ea610008 	lwi	r19, r1, 8
20013140:	3021000c 	addik	r1, r1, 12
20013144:	b60f0008 	rtsd	r15, 8
20013148:	80000000 	or	r0, r0, r0

2001314c <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001314c:	3021fff8 	addik	r1, r1, -8
20013150:	fa610004 	swi	r19, r1, 4
20013154:	12610000 	addk	r19, r1, r0
20013158:	f8b3000c 	swi	r5, r19, 12
2001315c:	10660000 	addk	r3, r6, r0
20013160:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20013164:	e873000c 	lwi	r3, r19, 12
20013168:	e8830004 	lwi	r4, r3, 4
2001316c:	e873000c 	lwi	r3, r19, 12
20013170:	e8630010 	lwi	r3, r3, 16
20013174:	e8a30000 	lwi	r5, r3, 0
20013178:	e873000c 	lwi	r3, r19, 12
2001317c:	e8630000 	lwi	r3, r3, 0
20013180:	3063ffff 	addik	r3, r3, -1
20013184:	84651800 	and	r3, r5, r3
20013188:	10641800 	addk	r3, r4, r3
2001318c:	e0930010 	lbui	r4, r19, 16
20013190:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20013194:	e873000c 	lwi	r3, r19, 12
20013198:	e8630010 	lwi	r3, r3, 16
2001319c:	e8830000 	lwi	r4, r3, 0
200131a0:	30840001 	addik	r4, r4, 1
200131a4:	f8830000 	swi	r4, r3, 0
}
200131a8:	10330000 	addk	r1, r19, r0
200131ac:	ea610004 	lwi	r19, r1, 4
200131b0:	30210008 	addik	r1, r1, 8
200131b4:	b60f0008 	rtsd	r15, 8
200131b8:	80000000 	or	r0, r0, r0

200131bc <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200131bc:	3021fff8 	addik	r1, r1, -8
200131c0:	fa610004 	swi	r19, r1, 4
200131c4:	12610000 	addk	r19, r1, r0
200131c8:	f8b3000c 	swi	r5, r19, 12
200131cc:	f8d30010 	swi	r6, r19, 16
200131d0:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200131d4:	e873000c 	lwi	r3, r19, 12
200131d8:	e8630010 	lwi	r3, r3, 16
200131dc:	e8830000 	lwi	r4, r3, 0
200131e0:	e873000c 	lwi	r3, r19, 12
200131e4:	e8a3000c 	lwi	r5, r3, 12
200131e8:	e8730010 	lwi	r3, r19, 16
200131ec:	64630402 	bslli	r3, r3, 2
200131f0:	10651800 	addk	r3, r5, r3
200131f4:	e8630000 	lwi	r3, r3, 0
200131f8:	14a32000 	rsubk	r5, r3, r4
200131fc:	30600001 	addik	r3, r0, 1
20013200:	e8930014 	lwi	r4, r19, 20
20013204:	16442803 	cmpu	r18, r4, r5
20013208:	bcb20008 	bgei	r18, 8		// 20013210
2001320c:	10600000 	addk	r3, r0, r0
20013210:	a46300ff 	andi	r3, r3, 255
}
20013214:	10330000 	addk	r1, r19, r0
20013218:	ea610004 	lwi	r19, r1, 4
2001321c:	30210008 	addik	r1, r1, 8
20013220:	b60f0008 	rtsd	r15, 8
20013224:	80000000 	or	r0, r0, r0

20013228 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20013228:	3021fff8 	addik	r1, r1, -8
2001322c:	fa610004 	swi	r19, r1, 4
20013230:	12610000 	addk	r19, r1, r0
20013234:	f8b3000c 	swi	r5, r19, 12
20013238:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001323c:	e873000c 	lwi	r3, r19, 12
20013240:	e8630010 	lwi	r3, r3, 16
20013244:	e8830000 	lwi	r4, r3, 0
20013248:	e873000c 	lwi	r3, r19, 12
2001324c:	e8a3000c 	lwi	r5, r3, 12
20013250:	e8730010 	lwi	r3, r19, 16
20013254:	64630402 	bslli	r3, r3, 2
20013258:	10651800 	addk	r3, r5, r3
2001325c:	e8630000 	lwi	r3, r3, 0
20013260:	14632000 	rsubk	r3, r3, r4
}
20013264:	10330000 	addk	r1, r19, r0
20013268:	ea610004 	lwi	r19, r1, 4
2001326c:	30210008 	addik	r1, r1, 8
20013270:	b60f0008 	rtsd	r15, 8
20013274:	80000000 	or	r0, r0, r0

20013278 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20013278:	3021fff4 	addik	r1, r1, -12
2001327c:	fa610008 	swi	r19, r1, 8
20013280:	12610000 	addk	r19, r1, r0
20013284:	f8b30010 	swi	r5, r19, 16
20013288:	f8d30014 	swi	r6, r19, 20
2001328c:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20013290:	f8130004 	swi	r0, r19, 4
20013294:	b800005c 	bri	92		// 200132f0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20013298:	e8730010 	lwi	r3, r19, 16
2001329c:	e8830000 	lwi	r4, r3, 0
200132a0:	e8730010 	lwi	r3, r19, 16
200132a4:	e8a3000c 	lwi	r5, r3, 12
200132a8:	e8730004 	lwi	r3, r19, 4
200132ac:	64630402 	bslli	r3, r3, 2
200132b0:	10651800 	addk	r3, r5, r3
200132b4:	e8a30000 	lwi	r5, r3, 0
200132b8:	e8730010 	lwi	r3, r19, 16
200132bc:	e8630010 	lwi	r3, r3, 16
200132c0:	e8630000 	lwi	r3, r3, 0
200132c4:	14632800 	rsubk	r3, r3, r5
200132c8:	10641800 	addk	r3, r4, r3
200132cc:	30830001 	addik	r4, r3, 1
200132d0:	e8730018 	lwi	r3, r19, 24
200132d4:	16441803 	cmpu	r18, r4, r3
200132d8:	bc52000c 	blti	r18, 12		// 200132e4
            return 0;
200132dc:	10600000 	addk	r3, r0, r0
200132e0:	b8000024 	bri	36		// 20013304
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200132e4:	e8730004 	lwi	r3, r19, 4
200132e8:	30630001 	addik	r3, r3, 1
200132ec:	f8730004 	swi	r3, r19, 4
200132f0:	e8930004 	lwi	r4, r19, 4
200132f4:	e8730014 	lwi	r3, r19, 20
200132f8:	16432003 	cmpu	r18, r3, r4
200132fc:	bc52ff9c 	blti	r18, -100		// 20013298
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20013300:	30600001 	addik	r3, r0, 1
}
20013304:	10330000 	addk	r1, r19, r0
20013308:	ea610008 	lwi	r19, r1, 8
2001330c:	3021000c 	addik	r1, r1, 12
20013310:	b60f0008 	rtsd	r15, 8
20013314:	80000000 	or	r0, r0, r0

20013318 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20013318:	3021ffec 	addik	r1, r1, -20
2001331c:	fa610010 	swi	r19, r1, 16
20013320:	12610000 	addk	r19, r1, r0
20013324:	f8b30018 	swi	r5, r19, 24
20013328:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001332c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20013330:	f8130004 	swi	r0, r19, 4
20013334:	b8000054 	bri	84		// 20013388
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20013338:	e8730018 	lwi	r3, r19, 24
2001333c:	e8630010 	lwi	r3, r3, 16
20013340:	e8830000 	lwi	r4, r3, 0
20013344:	e8730018 	lwi	r3, r19, 24
20013348:	e8a3000c 	lwi	r5, r3, 12
2001334c:	e8730004 	lwi	r3, r19, 4
20013350:	64630402 	bslli	r3, r3, 2
20013354:	10651800 	addk	r3, r5, r3
20013358:	e8630000 	lwi	r3, r3, 0
2001335c:	14632000 	rsubk	r3, r3, r4
20013360:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20013364:	e8930008 	lwi	r4, r19, 8
20013368:	e873000c 	lwi	r3, r19, 12
2001336c:	16441803 	cmpu	r18, r4, r3
20013370:	bcb20008 	bgei	r18, 8		// 20013378
20013374:	10640000 	addk	r3, r4, r0
20013378:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001337c:	e8730004 	lwi	r3, r19, 4
20013380:	30630001 	addik	r3, r3, 1
20013384:	f8730004 	swi	r3, r19, 4
20013388:	e8930004 	lwi	r4, r19, 4
2001338c:	e873001c 	lwi	r3, r19, 28
20013390:	16432003 	cmpu	r18, r3, r4
20013394:	bc52ffa4 	blti	r18, -92		// 20013338
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20013398:	e8730018 	lwi	r3, r19, 24
2001339c:	e8830000 	lwi	r4, r3, 0
200133a0:	e8730008 	lwi	r3, r19, 8
200133a4:	14632000 	rsubk	r3, r3, r4
}
200133a8:	10330000 	addk	r1, r19, r0
200133ac:	ea610010 	lwi	r19, r1, 16
200133b0:	30210014 	addik	r1, r1, 20
200133b4:	b60f0008 	rtsd	r15, 8
200133b8:	80000000 	or	r0, r0, r0

200133bc <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200133bc:	3021fff4 	addik	r1, r1, -12
200133c0:	fa610008 	swi	r19, r1, 8
200133c4:	12610000 	addk	r19, r1, r0
200133c8:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
200133cc:	e8730010 	lwi	r3, r19, 16
200133d0:	e8630010 	lwi	r3, r3, 16
200133d4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200133d8:	f8130004 	swi	r0, r19, 4
200133dc:	b8000028 	bri	40		// 20013404
        fifo->read_inds[i] = 0;
200133e0:	e8730010 	lwi	r3, r19, 16
200133e4:	e883000c 	lwi	r4, r3, 12
200133e8:	e8730004 	lwi	r3, r19, 4
200133ec:	64630402 	bslli	r3, r3, 2
200133f0:	10641800 	addk	r3, r4, r3
200133f4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200133f8:	e8730004 	lwi	r3, r19, 4
200133fc:	30630001 	addik	r3, r3, 1
20013400:	f8730004 	swi	r3, r19, 4
20013404:	e8730010 	lwi	r3, r19, 16
20013408:	e8830008 	lwi	r4, r3, 8
2001340c:	e8730004 	lwi	r3, r19, 4
20013410:	16441803 	cmpu	r18, r4, r3
20013414:	bc52ffcc 	blti	r18, -52		// 200133e0
        fifo->read_inds[i] = 0;
    }
}
20013418:	10330000 	addk	r1, r19, r0
2001341c:	ea610008 	lwi	r19, r1, 8
20013420:	3021000c 	addik	r1, r1, 12
20013424:	b60f0008 	rtsd	r15, 8
20013428:	80000000 	or	r0, r0, r0

2001342c <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001342c:	3021fff4 	addik	r1, r1, -12
20013430:	fa610008 	swi	r19, r1, 8
20013434:	12610000 	addk	r19, r1, r0
20013438:	f8b30010 	swi	r5, r19, 16
2001343c:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20013440:	e8730010 	lwi	r3, r19, 16
20013444:	e8830004 	lwi	r4, r3, 4
20013448:	e8730010 	lwi	r3, r19, 16
2001344c:	e8a3000c 	lwi	r5, r3, 12
20013450:	e8730014 	lwi	r3, r19, 20
20013454:	64630402 	bslli	r3, r3, 2
20013458:	10651800 	addk	r3, r5, r3
2001345c:	e8a30000 	lwi	r5, r3, 0
20013460:	e8730010 	lwi	r3, r19, 16
20013464:	e8630000 	lwi	r3, r3, 0
20013468:	3063ffff 	addik	r3, r3, -1
2001346c:	84651800 	and	r3, r5, r3
20013470:	10631800 	addk	r3, r3, r3
20013474:	10641800 	addk	r3, r4, r3
20013478:	e4630000 	lhui	r3, r3, 0
2001347c:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20013480:	e8730010 	lwi	r3, r19, 16
20013484:	e883000c 	lwi	r4, r3, 12
20013488:	e8730014 	lwi	r3, r19, 20
2001348c:	64630402 	bslli	r3, r3, 2
20013490:	10641800 	addk	r3, r4, r3
20013494:	e8830000 	lwi	r4, r3, 0
20013498:	30840001 	addik	r4, r4, 1
2001349c:	f8830000 	swi	r4, r3, 0
    return value;
200134a0:	e4730004 	lhui	r3, r19, 4
}
200134a4:	10330000 	addk	r1, r19, r0
200134a8:	ea610008 	lwi	r19, r1, 8
200134ac:	3021000c 	addik	r1, r1, 12
200134b0:	b60f0008 	rtsd	r15, 8
200134b4:	80000000 	or	r0, r0, r0

200134b8 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200134b8:	3021fff8 	addik	r1, r1, -8
200134bc:	fa610004 	swi	r19, r1, 4
200134c0:	12610000 	addk	r19, r1, r0
200134c4:	f8b3000c 	swi	r5, r19, 12
200134c8:	10660000 	addk	r3, r6, r0
200134cc:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200134d0:	e873000c 	lwi	r3, r19, 12
200134d4:	e8830004 	lwi	r4, r3, 4
200134d8:	e873000c 	lwi	r3, r19, 12
200134dc:	e8630010 	lwi	r3, r3, 16
200134e0:	e8a30000 	lwi	r5, r3, 0
200134e4:	e873000c 	lwi	r3, r19, 12
200134e8:	e8630000 	lwi	r3, r3, 0
200134ec:	3063ffff 	addik	r3, r3, -1
200134f0:	84651800 	and	r3, r5, r3
200134f4:	10631800 	addk	r3, r3, r3
200134f8:	10641800 	addk	r3, r4, r3
200134fc:	e4930010 	lhui	r4, r19, 16
20013500:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20013504:	e873000c 	lwi	r3, r19, 12
20013508:	e8630010 	lwi	r3, r3, 16
2001350c:	e8830000 	lwi	r4, r3, 0
20013510:	30840001 	addik	r4, r4, 1
20013514:	f8830000 	swi	r4, r3, 0
}
20013518:	10330000 	addk	r1, r19, r0
2001351c:	ea610004 	lwi	r19, r1, 4
20013520:	30210008 	addik	r1, r1, 8
20013524:	b60f0008 	rtsd	r15, 8
20013528:	80000000 	or	r0, r0, r0

2001352c <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001352c:	3021fff8 	addik	r1, r1, -8
20013530:	fa610004 	swi	r19, r1, 4
20013534:	12610000 	addk	r19, r1, r0
20013538:	f8b3000c 	swi	r5, r19, 12
2001353c:	f8d30010 	swi	r6, r19, 16
20013540:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20013544:	e873000c 	lwi	r3, r19, 12
20013548:	e8630010 	lwi	r3, r3, 16
2001354c:	e8830000 	lwi	r4, r3, 0
20013550:	e873000c 	lwi	r3, r19, 12
20013554:	e8a3000c 	lwi	r5, r3, 12
20013558:	e8730010 	lwi	r3, r19, 16
2001355c:	64630402 	bslli	r3, r3, 2
20013560:	10651800 	addk	r3, r5, r3
20013564:	e8630000 	lwi	r3, r3, 0
20013568:	14a32000 	rsubk	r5, r3, r4
2001356c:	30600001 	addik	r3, r0, 1
20013570:	e8930014 	lwi	r4, r19, 20
20013574:	16442803 	cmpu	r18, r4, r5
20013578:	bcb20008 	bgei	r18, 8		// 20013580
2001357c:	10600000 	addk	r3, r0, r0
20013580:	a46300ff 	andi	r3, r3, 255
}
20013584:	10330000 	addk	r1, r19, r0
20013588:	ea610004 	lwi	r19, r1, 4
2001358c:	30210008 	addik	r1, r1, 8
20013590:	b60f0008 	rtsd	r15, 8
20013594:	80000000 	or	r0, r0, r0

20013598 <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20013598:	3021fff8 	addik	r1, r1, -8
2001359c:	fa610004 	swi	r19, r1, 4
200135a0:	12610000 	addk	r19, r1, r0
200135a4:	f8b3000c 	swi	r5, r19, 12
200135a8:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200135ac:	e873000c 	lwi	r3, r19, 12
200135b0:	e8630010 	lwi	r3, r3, 16
200135b4:	e8830000 	lwi	r4, r3, 0
200135b8:	e873000c 	lwi	r3, r19, 12
200135bc:	e8a3000c 	lwi	r5, r3, 12
200135c0:	e8730010 	lwi	r3, r19, 16
200135c4:	64630402 	bslli	r3, r3, 2
200135c8:	10651800 	addk	r3, r5, r3
200135cc:	e8630000 	lwi	r3, r3, 0
200135d0:	14632000 	rsubk	r3, r3, r4
}
200135d4:	10330000 	addk	r1, r19, r0
200135d8:	ea610004 	lwi	r19, r1, 4
200135dc:	30210008 	addik	r1, r1, 8
200135e0:	b60f0008 	rtsd	r15, 8
200135e4:	80000000 	or	r0, r0, r0

200135e8 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200135e8:	3021fff4 	addik	r1, r1, -12
200135ec:	fa610008 	swi	r19, r1, 8
200135f0:	12610000 	addk	r19, r1, r0
200135f4:	f8b30010 	swi	r5, r19, 16
200135f8:	f8d30014 	swi	r6, r19, 20
200135fc:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20013600:	f8130004 	swi	r0, r19, 4
20013604:	b800005c 	bri	92		// 20013660
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20013608:	e8730010 	lwi	r3, r19, 16
2001360c:	e8830000 	lwi	r4, r3, 0
20013610:	e8730010 	lwi	r3, r19, 16
20013614:	e8a3000c 	lwi	r5, r3, 12
20013618:	e8730004 	lwi	r3, r19, 4
2001361c:	64630402 	bslli	r3, r3, 2
20013620:	10651800 	addk	r3, r5, r3
20013624:	e8a30000 	lwi	r5, r3, 0
20013628:	e8730010 	lwi	r3, r19, 16
2001362c:	e8630010 	lwi	r3, r3, 16
20013630:	e8630000 	lwi	r3, r3, 0
20013634:	14632800 	rsubk	r3, r3, r5
20013638:	10641800 	addk	r3, r4, r3
2001363c:	30830001 	addik	r4, r3, 1
20013640:	e8730018 	lwi	r3, r19, 24
20013644:	16441803 	cmpu	r18, r4, r3
20013648:	bc52000c 	blti	r18, 12		// 20013654
            return 0;
2001364c:	10600000 	addk	r3, r0, r0
20013650:	b8000024 	bri	36		// 20013674
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20013654:	e8730004 	lwi	r3, r19, 4
20013658:	30630001 	addik	r3, r3, 1
2001365c:	f8730004 	swi	r3, r19, 4
20013660:	e8930004 	lwi	r4, r19, 4
20013664:	e8730014 	lwi	r3, r19, 20
20013668:	16432003 	cmpu	r18, r3, r4
2001366c:	bc52ff9c 	blti	r18, -100		// 20013608
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20013670:	30600001 	addik	r3, r0, 1
}
20013674:	10330000 	addk	r1, r19, r0
20013678:	ea610008 	lwi	r19, r1, 8
2001367c:	3021000c 	addik	r1, r1, 12
20013680:	b60f0008 	rtsd	r15, 8
20013684:	80000000 	or	r0, r0, r0

20013688 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20013688:	3021ffec 	addik	r1, r1, -20
2001368c:	fa610010 	swi	r19, r1, 16
20013690:	12610000 	addk	r19, r1, r0
20013694:	f8b30018 	swi	r5, r19, 24
20013698:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001369c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200136a0:	f8130004 	swi	r0, r19, 4
200136a4:	b8000054 	bri	84		// 200136f8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200136a8:	e8730018 	lwi	r3, r19, 24
200136ac:	e8630010 	lwi	r3, r3, 16
200136b0:	e8830000 	lwi	r4, r3, 0
200136b4:	e8730018 	lwi	r3, r19, 24
200136b8:	e8a3000c 	lwi	r5, r3, 12
200136bc:	e8730004 	lwi	r3, r19, 4
200136c0:	64630402 	bslli	r3, r3, 2
200136c4:	10651800 	addk	r3, r5, r3
200136c8:	e8630000 	lwi	r3, r3, 0
200136cc:	14632000 	rsubk	r3, r3, r4
200136d0:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200136d4:	e8930008 	lwi	r4, r19, 8
200136d8:	e873000c 	lwi	r3, r19, 12
200136dc:	16441803 	cmpu	r18, r4, r3
200136e0:	bcb20008 	bgei	r18, 8		// 200136e8
200136e4:	10640000 	addk	r3, r4, r0
200136e8:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200136ec:	e8730004 	lwi	r3, r19, 4
200136f0:	30630001 	addik	r3, r3, 1
200136f4:	f8730004 	swi	r3, r19, 4
200136f8:	e8930004 	lwi	r4, r19, 4
200136fc:	e873001c 	lwi	r3, r19, 28
20013700:	16432003 	cmpu	r18, r3, r4
20013704:	bc52ffa4 	blti	r18, -92		// 200136a8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20013708:	e8730018 	lwi	r3, r19, 24
2001370c:	e8830000 	lwi	r4, r3, 0
20013710:	e8730008 	lwi	r3, r19, 8
20013714:	14632000 	rsubk	r3, r3, r4
}
20013718:	10330000 	addk	r1, r19, r0
2001371c:	ea610010 	lwi	r19, r1, 16
20013720:	30210014 	addik	r1, r1, 20
20013724:	b60f0008 	rtsd	r15, 8
20013728:	80000000 	or	r0, r0, r0

2001372c <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001372c:	3021fff4 	addik	r1, r1, -12
20013730:	fa610008 	swi	r19, r1, 8
20013734:	12610000 	addk	r19, r1, r0
20013738:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2001373c:	e8730010 	lwi	r3, r19, 16
20013740:	e8630010 	lwi	r3, r3, 16
20013744:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20013748:	f8130004 	swi	r0, r19, 4
2001374c:	b8000028 	bri	40		// 20013774
        fifo->read_inds[i] = 0;
20013750:	e8730010 	lwi	r3, r19, 16
20013754:	e883000c 	lwi	r4, r3, 12
20013758:	e8730004 	lwi	r3, r19, 4
2001375c:	64630402 	bslli	r3, r3, 2
20013760:	10641800 	addk	r3, r4, r3
20013764:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20013768:	e8730004 	lwi	r3, r19, 4
2001376c:	30630001 	addik	r3, r3, 1
20013770:	f8730004 	swi	r3, r19, 4
20013774:	e8730010 	lwi	r3, r19, 16
20013778:	e8830008 	lwi	r4, r3, 8
2001377c:	e8730004 	lwi	r3, r19, 4
20013780:	16441803 	cmpu	r18, r4, r3
20013784:	bc52ffcc 	blti	r18, -52		// 20013750
        fifo->read_inds[i] = 0;
    }
}
20013788:	10330000 	addk	r1, r19, r0
2001378c:	ea610008 	lwi	r19, r1, 8
20013790:	3021000c 	addik	r1, r1, 12
20013794:	b60f0008 	rtsd	r15, 8
20013798:	80000000 	or	r0, r0, r0

2001379c <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001379c:	3021fff4 	addik	r1, r1, -12
200137a0:	fa610008 	swi	r19, r1, 8
200137a4:	12610000 	addk	r19, r1, r0
200137a8:	f8b30010 	swi	r5, r19, 16
200137ac:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200137b0:	e8730010 	lwi	r3, r19, 16
200137b4:	e8830004 	lwi	r4, r3, 4
200137b8:	e8730010 	lwi	r3, r19, 16
200137bc:	e8a3000c 	lwi	r5, r3, 12
200137c0:	e8730014 	lwi	r3, r19, 20
200137c4:	64630402 	bslli	r3, r3, 2
200137c8:	10651800 	addk	r3, r5, r3
200137cc:	e8a30000 	lwi	r5, r3, 0
200137d0:	e8730010 	lwi	r3, r19, 16
200137d4:	e8630000 	lwi	r3, r3, 0
200137d8:	3063ffff 	addik	r3, r3, -1
200137dc:	84651800 	and	r3, r5, r3
200137e0:	64630402 	bslli	r3, r3, 2
200137e4:	10641800 	addk	r3, r4, r3
200137e8:	e8630000 	lwi	r3, r3, 0
200137ec:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200137f0:	e8730010 	lwi	r3, r19, 16
200137f4:	e883000c 	lwi	r4, r3, 12
200137f8:	e8730014 	lwi	r3, r19, 20
200137fc:	64630402 	bslli	r3, r3, 2
20013800:	10641800 	addk	r3, r4, r3
20013804:	e8830000 	lwi	r4, r3, 0
20013808:	30840001 	addik	r4, r4, 1
2001380c:	f8830000 	swi	r4, r3, 0
    return value;
20013810:	e8730004 	lwi	r3, r19, 4
}
20013814:	10330000 	addk	r1, r19, r0
20013818:	ea610008 	lwi	r19, r1, 8
2001381c:	3021000c 	addik	r1, r1, 12
20013820:	b60f0008 	rtsd	r15, 8
20013824:	80000000 	or	r0, r0, r0

20013828 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20013828:	3021fff8 	addik	r1, r1, -8
2001382c:	fa610004 	swi	r19, r1, 4
20013830:	12610000 	addk	r19, r1, r0
20013834:	f8b3000c 	swi	r5, r19, 12
20013838:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001383c:	e873000c 	lwi	r3, r19, 12
20013840:	e8830004 	lwi	r4, r3, 4
20013844:	e873000c 	lwi	r3, r19, 12
20013848:	e8630010 	lwi	r3, r3, 16
2001384c:	e8a30000 	lwi	r5, r3, 0
20013850:	e873000c 	lwi	r3, r19, 12
20013854:	e8630000 	lwi	r3, r3, 0
20013858:	3063ffff 	addik	r3, r3, -1
2001385c:	84651800 	and	r3, r5, r3
20013860:	64630402 	bslli	r3, r3, 2
20013864:	10641800 	addk	r3, r4, r3
20013868:	e8930010 	lwi	r4, r19, 16
2001386c:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20013870:	e873000c 	lwi	r3, r19, 12
20013874:	e8630010 	lwi	r3, r3, 16
20013878:	e8830000 	lwi	r4, r3, 0
2001387c:	30840001 	addik	r4, r4, 1
20013880:	f8830000 	swi	r4, r3, 0
}
20013884:	10330000 	addk	r1, r19, r0
20013888:	ea610004 	lwi	r19, r1, 4
2001388c:	30210008 	addik	r1, r1, 8
20013890:	b60f0008 	rtsd	r15, 8
20013894:	80000000 	or	r0, r0, r0

20013898 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20013898:	3021fff8 	addik	r1, r1, -8
2001389c:	fa610004 	swi	r19, r1, 4
200138a0:	12610000 	addk	r19, r1, r0
200138a4:	f8b3000c 	swi	r5, r19, 12
200138a8:	f8d30010 	swi	r6, r19, 16
200138ac:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200138b0:	e873000c 	lwi	r3, r19, 12
200138b4:	e8630010 	lwi	r3, r3, 16
200138b8:	e8830000 	lwi	r4, r3, 0
200138bc:	e873000c 	lwi	r3, r19, 12
200138c0:	e8a3000c 	lwi	r5, r3, 12
200138c4:	e8730010 	lwi	r3, r19, 16
200138c8:	64630402 	bslli	r3, r3, 2
200138cc:	10651800 	addk	r3, r5, r3
200138d0:	e8630000 	lwi	r3, r3, 0
200138d4:	14a32000 	rsubk	r5, r3, r4
200138d8:	30600001 	addik	r3, r0, 1
200138dc:	e8930014 	lwi	r4, r19, 20
200138e0:	16442803 	cmpu	r18, r4, r5
200138e4:	bcb20008 	bgei	r18, 8		// 200138ec
200138e8:	10600000 	addk	r3, r0, r0
200138ec:	a46300ff 	andi	r3, r3, 255
}
200138f0:	10330000 	addk	r1, r19, r0
200138f4:	ea610004 	lwi	r19, r1, 4
200138f8:	30210008 	addik	r1, r1, 8
200138fc:	b60f0008 	rtsd	r15, 8
20013900:	80000000 	or	r0, r0, r0

20013904 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20013904:	3021fff8 	addik	r1, r1, -8
20013908:	fa610004 	swi	r19, r1, 4
2001390c:	12610000 	addk	r19, r1, r0
20013910:	f8b3000c 	swi	r5, r19, 12
20013914:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20013918:	e873000c 	lwi	r3, r19, 12
2001391c:	e8630010 	lwi	r3, r3, 16
20013920:	e8830000 	lwi	r4, r3, 0
20013924:	e873000c 	lwi	r3, r19, 12
20013928:	e8a3000c 	lwi	r5, r3, 12
2001392c:	e8730010 	lwi	r3, r19, 16
20013930:	64630402 	bslli	r3, r3, 2
20013934:	10651800 	addk	r3, r5, r3
20013938:	e8630000 	lwi	r3, r3, 0
2001393c:	14632000 	rsubk	r3, r3, r4
}
20013940:	10330000 	addk	r1, r19, r0
20013944:	ea610004 	lwi	r19, r1, 4
20013948:	30210008 	addik	r1, r1, 8
2001394c:	b60f0008 	rtsd	r15, 8
20013950:	80000000 	or	r0, r0, r0

20013954 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20013954:	3021fff4 	addik	r1, r1, -12
20013958:	fa610008 	swi	r19, r1, 8
2001395c:	12610000 	addk	r19, r1, r0
20013960:	f8b30010 	swi	r5, r19, 16
20013964:	f8d30014 	swi	r6, r19, 20
20013968:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001396c:	f8130004 	swi	r0, r19, 4
20013970:	b800005c 	bri	92		// 200139cc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20013974:	e8730010 	lwi	r3, r19, 16
20013978:	e8830000 	lwi	r4, r3, 0
2001397c:	e8730010 	lwi	r3, r19, 16
20013980:	e8a3000c 	lwi	r5, r3, 12
20013984:	e8730004 	lwi	r3, r19, 4
20013988:	64630402 	bslli	r3, r3, 2
2001398c:	10651800 	addk	r3, r5, r3
20013990:	e8a30000 	lwi	r5, r3, 0
20013994:	e8730010 	lwi	r3, r19, 16
20013998:	e8630010 	lwi	r3, r3, 16
2001399c:	e8630000 	lwi	r3, r3, 0
200139a0:	14632800 	rsubk	r3, r3, r5
200139a4:	10641800 	addk	r3, r4, r3
200139a8:	30830001 	addik	r4, r3, 1
200139ac:	e8730018 	lwi	r3, r19, 24
200139b0:	16441803 	cmpu	r18, r4, r3
200139b4:	bc52000c 	blti	r18, 12		// 200139c0
            return 0;
200139b8:	10600000 	addk	r3, r0, r0
200139bc:	b8000024 	bri	36		// 200139e0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200139c0:	e8730004 	lwi	r3, r19, 4
200139c4:	30630001 	addik	r3, r3, 1
200139c8:	f8730004 	swi	r3, r19, 4
200139cc:	e8930004 	lwi	r4, r19, 4
200139d0:	e8730014 	lwi	r3, r19, 20
200139d4:	16432003 	cmpu	r18, r3, r4
200139d8:	bc52ff9c 	blti	r18, -100		// 20013974
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200139dc:	30600001 	addik	r3, r0, 1
}
200139e0:	10330000 	addk	r1, r19, r0
200139e4:	ea610008 	lwi	r19, r1, 8
200139e8:	3021000c 	addik	r1, r1, 12
200139ec:	b60f0008 	rtsd	r15, 8
200139f0:	80000000 	or	r0, r0, r0

200139f4 <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200139f4:	3021ffec 	addik	r1, r1, -20
200139f8:	fa610010 	swi	r19, r1, 16
200139fc:	12610000 	addk	r19, r1, r0
20013a00:	f8b30018 	swi	r5, r19, 24
20013a04:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20013a08:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20013a0c:	f8130004 	swi	r0, r19, 4
20013a10:	b8000054 	bri	84		// 20013a64
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20013a14:	e8730018 	lwi	r3, r19, 24
20013a18:	e8630010 	lwi	r3, r3, 16
20013a1c:	e8830000 	lwi	r4, r3, 0
20013a20:	e8730018 	lwi	r3, r19, 24
20013a24:	e8a3000c 	lwi	r5, r3, 12
20013a28:	e8730004 	lwi	r3, r19, 4
20013a2c:	64630402 	bslli	r3, r3, 2
20013a30:	10651800 	addk	r3, r5, r3
20013a34:	e8630000 	lwi	r3, r3, 0
20013a38:	14632000 	rsubk	r3, r3, r4
20013a3c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20013a40:	e8930008 	lwi	r4, r19, 8
20013a44:	e873000c 	lwi	r3, r19, 12
20013a48:	16441803 	cmpu	r18, r4, r3
20013a4c:	bcb20008 	bgei	r18, 8		// 20013a54
20013a50:	10640000 	addk	r3, r4, r0
20013a54:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20013a58:	e8730004 	lwi	r3, r19, 4
20013a5c:	30630001 	addik	r3, r3, 1
20013a60:	f8730004 	swi	r3, r19, 4
20013a64:	e8930004 	lwi	r4, r19, 4
20013a68:	e873001c 	lwi	r3, r19, 28
20013a6c:	16432003 	cmpu	r18, r3, r4
20013a70:	bc52ffa4 	blti	r18, -92		// 20013a14
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20013a74:	e8730018 	lwi	r3, r19, 24
20013a78:	e8830000 	lwi	r4, r3, 0
20013a7c:	e8730008 	lwi	r3, r19, 8
20013a80:	14632000 	rsubk	r3, r3, r4
}
20013a84:	10330000 	addk	r1, r19, r0
20013a88:	ea610010 	lwi	r19, r1, 16
20013a8c:	30210014 	addik	r1, r1, 20
20013a90:	b60f0008 	rtsd	r15, 8
20013a94:	80000000 	or	r0, r0, r0

20013a98 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20013a98:	3021fff4 	addik	r1, r1, -12
20013a9c:	fa610008 	swi	r19, r1, 8
20013aa0:	12610000 	addk	r19, r1, r0
20013aa4:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20013aa8:	e8730010 	lwi	r3, r19, 16
20013aac:	e8630010 	lwi	r3, r3, 16
20013ab0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20013ab4:	f8130004 	swi	r0, r19, 4
20013ab8:	b8000028 	bri	40		// 20013ae0
        fifo->read_inds[i] = 0;
20013abc:	e8730010 	lwi	r3, r19, 16
20013ac0:	e883000c 	lwi	r4, r3, 12
20013ac4:	e8730004 	lwi	r3, r19, 4
20013ac8:	64630402 	bslli	r3, r3, 2
20013acc:	10641800 	addk	r3, r4, r3
20013ad0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20013ad4:	e8730004 	lwi	r3, r19, 4
20013ad8:	30630001 	addik	r3, r3, 1
20013adc:	f8730004 	swi	r3, r19, 4
20013ae0:	e8730010 	lwi	r3, r19, 16
20013ae4:	e8830008 	lwi	r4, r3, 8
20013ae8:	e8730004 	lwi	r3, r19, 4
20013aec:	16441803 	cmpu	r18, r4, r3
20013af0:	bc52ffcc 	blti	r18, -52		// 20013abc
        fifo->read_inds[i] = 0;
    }
}
20013af4:	10330000 	addk	r1, r19, r0
20013af8:	ea610008 	lwi	r19, r1, 8
20013afc:	3021000c 	addik	r1, r1, 12
20013b00:	b60f0008 	rtsd	r15, 8
20013b04:	80000000 	or	r0, r0, r0

20013b08 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20013b08:	3021fff0 	addik	r1, r1, -16
20013b0c:	fa61000c 	swi	r19, r1, 12
20013b10:	12610000 	addk	r19, r1, r0
20013b14:	f8b30014 	swi	r5, r19, 20
20013b18:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20013b1c:	e8730014 	lwi	r3, r19, 20
20013b20:	e8830004 	lwi	r4, r3, 4
20013b24:	e8730014 	lwi	r3, r19, 20
20013b28:	e8a3000c 	lwi	r5, r3, 12
20013b2c:	e8730018 	lwi	r3, r19, 24
20013b30:	64630402 	bslli	r3, r3, 2
20013b34:	10651800 	addk	r3, r5, r3
20013b38:	e8a30000 	lwi	r5, r3, 0
20013b3c:	e8730014 	lwi	r3, r19, 20
20013b40:	e8630000 	lwi	r3, r3, 0
20013b44:	3063ffff 	addik	r3, r3, -1
20013b48:	84651800 	and	r3, r5, r3
20013b4c:	64630403 	bslli	r3, r3, 3
20013b50:	10641800 	addk	r3, r4, r3
20013b54:	e8830000 	lwi	r4, r3, 0
20013b58:	e8a30004 	lwi	r5, r3, 4
20013b5c:	f8930004 	swi	r4, r19, 4
20013b60:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20013b64:	e8730014 	lwi	r3, r19, 20
20013b68:	e883000c 	lwi	r4, r3, 12
20013b6c:	e8730018 	lwi	r3, r19, 24
20013b70:	64630402 	bslli	r3, r3, 2
20013b74:	10641800 	addk	r3, r4, r3
20013b78:	e8830000 	lwi	r4, r3, 0
20013b7c:	30840001 	addik	r4, r4, 1
20013b80:	f8830000 	swi	r4, r3, 0
    return value;
20013b84:	e8930004 	lwi	r4, r19, 4
20013b88:	e8b30008 	lwi	r5, r19, 8
}
20013b8c:	10640000 	addk	r3, r4, r0
20013b90:	10850000 	addk	r4, r5, r0
20013b94:	10330000 	addk	r1, r19, r0
20013b98:	ea61000c 	lwi	r19, r1, 12
20013b9c:	30210010 	addik	r1, r1, 16
20013ba0:	b60f0008 	rtsd	r15, 8
20013ba4:	80000000 	or	r0, r0, r0

20013ba8 <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20013ba8:	3021fff8 	addik	r1, r1, -8
20013bac:	fa610004 	swi	r19, r1, 4
20013bb0:	12610000 	addk	r19, r1, r0
20013bb4:	f8b3000c 	swi	r5, r19, 12
20013bb8:	f8d30010 	swi	r6, r19, 16
20013bbc:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20013bc0:	e873000c 	lwi	r3, r19, 12
20013bc4:	e8830004 	lwi	r4, r3, 4
20013bc8:	e873000c 	lwi	r3, r19, 12
20013bcc:	e8630010 	lwi	r3, r3, 16
20013bd0:	e8a30000 	lwi	r5, r3, 0
20013bd4:	e873000c 	lwi	r3, r19, 12
20013bd8:	e8630000 	lwi	r3, r3, 0
20013bdc:	3063ffff 	addik	r3, r3, -1
20013be0:	84651800 	and	r3, r5, r3
20013be4:	64630403 	bslli	r3, r3, 3
20013be8:	10641800 	addk	r3, r4, r3
20013bec:	e8930010 	lwi	r4, r19, 16
20013bf0:	e8b30014 	lwi	r5, r19, 20
20013bf4:	f8830000 	swi	r4, r3, 0
20013bf8:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20013bfc:	e873000c 	lwi	r3, r19, 12
20013c00:	e8630010 	lwi	r3, r3, 16
20013c04:	e8830000 	lwi	r4, r3, 0
20013c08:	30840001 	addik	r4, r4, 1
20013c0c:	f8830000 	swi	r4, r3, 0
}
20013c10:	10330000 	addk	r1, r19, r0
20013c14:	ea610004 	lwi	r19, r1, 4
20013c18:	30210008 	addik	r1, r1, 8
20013c1c:	b60f0008 	rtsd	r15, 8
20013c20:	80000000 	or	r0, r0, r0

20013c24 <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20013c24:	3021fff8 	addik	r1, r1, -8
20013c28:	fa610004 	swi	r19, r1, 4
20013c2c:	12610000 	addk	r19, r1, r0
20013c30:	f8b3000c 	swi	r5, r19, 12
20013c34:	f8d30010 	swi	r6, r19, 16
20013c38:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20013c3c:	e873000c 	lwi	r3, r19, 12
20013c40:	e8630010 	lwi	r3, r3, 16
20013c44:	e8830000 	lwi	r4, r3, 0
20013c48:	e873000c 	lwi	r3, r19, 12
20013c4c:	e8a3000c 	lwi	r5, r3, 12
20013c50:	e8730010 	lwi	r3, r19, 16
20013c54:	64630402 	bslli	r3, r3, 2
20013c58:	10651800 	addk	r3, r5, r3
20013c5c:	e8630000 	lwi	r3, r3, 0
20013c60:	14a32000 	rsubk	r5, r3, r4
20013c64:	30600001 	addik	r3, r0, 1
20013c68:	e8930014 	lwi	r4, r19, 20
20013c6c:	16442803 	cmpu	r18, r4, r5
20013c70:	bcb20008 	bgei	r18, 8		// 20013c78
20013c74:	10600000 	addk	r3, r0, r0
20013c78:	a46300ff 	andi	r3, r3, 255
}
20013c7c:	10330000 	addk	r1, r19, r0
20013c80:	ea610004 	lwi	r19, r1, 4
20013c84:	30210008 	addik	r1, r1, 8
20013c88:	b60f0008 	rtsd	r15, 8
20013c8c:	80000000 	or	r0, r0, r0

20013c90 <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20013c90:	3021fff8 	addik	r1, r1, -8
20013c94:	fa610004 	swi	r19, r1, 4
20013c98:	12610000 	addk	r19, r1, r0
20013c9c:	f8b3000c 	swi	r5, r19, 12
20013ca0:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20013ca4:	e873000c 	lwi	r3, r19, 12
20013ca8:	e8630010 	lwi	r3, r3, 16
20013cac:	e8830000 	lwi	r4, r3, 0
20013cb0:	e873000c 	lwi	r3, r19, 12
20013cb4:	e8a3000c 	lwi	r5, r3, 12
20013cb8:	e8730010 	lwi	r3, r19, 16
20013cbc:	64630402 	bslli	r3, r3, 2
20013cc0:	10651800 	addk	r3, r5, r3
20013cc4:	e8630000 	lwi	r3, r3, 0
20013cc8:	14632000 	rsubk	r3, r3, r4
}
20013ccc:	10330000 	addk	r1, r19, r0
20013cd0:	ea610004 	lwi	r19, r1, 4
20013cd4:	30210008 	addik	r1, r1, 8
20013cd8:	b60f0008 	rtsd	r15, 8
20013cdc:	80000000 	or	r0, r0, r0

20013ce0 <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20013ce0:	3021fff4 	addik	r1, r1, -12
20013ce4:	fa610008 	swi	r19, r1, 8
20013ce8:	12610000 	addk	r19, r1, r0
20013cec:	f8b30010 	swi	r5, r19, 16
20013cf0:	f8d30014 	swi	r6, r19, 20
20013cf4:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20013cf8:	f8130004 	swi	r0, r19, 4
20013cfc:	b800005c 	bri	92		// 20013d58
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20013d00:	e8730010 	lwi	r3, r19, 16
20013d04:	e8830000 	lwi	r4, r3, 0
20013d08:	e8730010 	lwi	r3, r19, 16
20013d0c:	e8a3000c 	lwi	r5, r3, 12
20013d10:	e8730004 	lwi	r3, r19, 4
20013d14:	64630402 	bslli	r3, r3, 2
20013d18:	10651800 	addk	r3, r5, r3
20013d1c:	e8a30000 	lwi	r5, r3, 0
20013d20:	e8730010 	lwi	r3, r19, 16
20013d24:	e8630010 	lwi	r3, r3, 16
20013d28:	e8630000 	lwi	r3, r3, 0
20013d2c:	14632800 	rsubk	r3, r3, r5
20013d30:	10641800 	addk	r3, r4, r3
20013d34:	30830001 	addik	r4, r3, 1
20013d38:	e8730018 	lwi	r3, r19, 24
20013d3c:	16441803 	cmpu	r18, r4, r3
20013d40:	bc52000c 	blti	r18, 12		// 20013d4c
            return 0;
20013d44:	10600000 	addk	r3, r0, r0
20013d48:	b8000024 	bri	36		// 20013d6c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20013d4c:	e8730004 	lwi	r3, r19, 4
20013d50:	30630001 	addik	r3, r3, 1
20013d54:	f8730004 	swi	r3, r19, 4
20013d58:	e8930004 	lwi	r4, r19, 4
20013d5c:	e8730014 	lwi	r3, r19, 20
20013d60:	16432003 	cmpu	r18, r3, r4
20013d64:	bc52ff9c 	blti	r18, -100		// 20013d00
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20013d68:	30600001 	addik	r3, r0, 1
}
20013d6c:	10330000 	addk	r1, r19, r0
20013d70:	ea610008 	lwi	r19, r1, 8
20013d74:	3021000c 	addik	r1, r1, 12
20013d78:	b60f0008 	rtsd	r15, 8
20013d7c:	80000000 	or	r0, r0, r0

20013d80 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20013d80:	3021ffec 	addik	r1, r1, -20
20013d84:	fa610010 	swi	r19, r1, 16
20013d88:	12610000 	addk	r19, r1, r0
20013d8c:	f8b30018 	swi	r5, r19, 24
20013d90:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20013d94:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20013d98:	f8130004 	swi	r0, r19, 4
20013d9c:	b8000054 	bri	84		// 20013df0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20013da0:	e8730018 	lwi	r3, r19, 24
20013da4:	e8630010 	lwi	r3, r3, 16
20013da8:	e8830000 	lwi	r4, r3, 0
20013dac:	e8730018 	lwi	r3, r19, 24
20013db0:	e8a3000c 	lwi	r5, r3, 12
20013db4:	e8730004 	lwi	r3, r19, 4
20013db8:	64630402 	bslli	r3, r3, 2
20013dbc:	10651800 	addk	r3, r5, r3
20013dc0:	e8630000 	lwi	r3, r3, 0
20013dc4:	14632000 	rsubk	r3, r3, r4
20013dc8:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20013dcc:	e8930008 	lwi	r4, r19, 8
20013dd0:	e873000c 	lwi	r3, r19, 12
20013dd4:	16441803 	cmpu	r18, r4, r3
20013dd8:	bcb20008 	bgei	r18, 8		// 20013de0
20013ddc:	10640000 	addk	r3, r4, r0
20013de0:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20013de4:	e8730004 	lwi	r3, r19, 4
20013de8:	30630001 	addik	r3, r3, 1
20013dec:	f8730004 	swi	r3, r19, 4
20013df0:	e8930004 	lwi	r4, r19, 4
20013df4:	e873001c 	lwi	r3, r19, 28
20013df8:	16432003 	cmpu	r18, r3, r4
20013dfc:	bc52ffa4 	blti	r18, -92		// 20013da0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20013e00:	e8730018 	lwi	r3, r19, 24
20013e04:	e8830000 	lwi	r4, r3, 0
20013e08:	e8730008 	lwi	r3, r19, 8
20013e0c:	14632000 	rsubk	r3, r3, r4
}
20013e10:	10330000 	addk	r1, r19, r0
20013e14:	ea610010 	lwi	r19, r1, 16
20013e18:	30210014 	addik	r1, r1, 20
20013e1c:	b60f0008 	rtsd	r15, 8
20013e20:	80000000 	or	r0, r0, r0

20013e24 <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20013e24:	3021fff4 	addik	r1, r1, -12
20013e28:	fa610008 	swi	r19, r1, 8
20013e2c:	12610000 	addk	r19, r1, r0
20013e30:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20013e34:	e8730010 	lwi	r3, r19, 16
20013e38:	e8630010 	lwi	r3, r3, 16
20013e3c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20013e40:	f8130004 	swi	r0, r19, 4
20013e44:	b8000028 	bri	40		// 20013e6c
        fifo->read_inds[i] = 0;
20013e48:	e8730010 	lwi	r3, r19, 16
20013e4c:	e883000c 	lwi	r4, r3, 12
20013e50:	e8730004 	lwi	r3, r19, 4
20013e54:	64630402 	bslli	r3, r3, 2
20013e58:	10641800 	addk	r3, r4, r3
20013e5c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20013e60:	e8730004 	lwi	r3, r19, 4
20013e64:	30630001 	addik	r3, r3, 1
20013e68:	f8730004 	swi	r3, r19, 4
20013e6c:	e8730010 	lwi	r3, r19, 16
20013e70:	e8830008 	lwi	r4, r3, 8
20013e74:	e8730004 	lwi	r3, r19, 4
20013e78:	16441803 	cmpu	r18, r4, r3
20013e7c:	bc52ffcc 	blti	r18, -52		// 20013e48
        fifo->read_inds[i] = 0;
    }
}
20013e80:	10330000 	addk	r1, r19, r0
20013e84:	ea610008 	lwi	r19, r1, 8
20013e88:	3021000c 	addik	r1, r1, 12
20013e8c:	b60f0008 	rtsd	r15, 8
20013e90:	80000000 	or	r0, r0, r0

20013e94 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20013e94:	3021fff4 	addik	r1, r1, -12
20013e98:	fa610008 	swi	r19, r1, 8
20013e9c:	12610000 	addk	r19, r1, r0
20013ea0:	f8b30010 	swi	r5, r19, 16
20013ea4:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20013ea8:	e8730010 	lwi	r3, r19, 16
20013eac:	e8830004 	lwi	r4, r3, 4
20013eb0:	e8730010 	lwi	r3, r19, 16
20013eb4:	e8a3000c 	lwi	r5, r3, 12
20013eb8:	e8730014 	lwi	r3, r19, 20
20013ebc:	64630402 	bslli	r3, r3, 2
20013ec0:	10651800 	addk	r3, r5, r3
20013ec4:	e8a30000 	lwi	r5, r3, 0
20013ec8:	e8730010 	lwi	r3, r19, 16
20013ecc:	e8630000 	lwi	r3, r3, 0
20013ed0:	3063ffff 	addik	r3, r3, -1
20013ed4:	84651800 	and	r3, r5, r3
20013ed8:	64630402 	bslli	r3, r3, 2
20013edc:	10641800 	addk	r3, r4, r3
20013ee0:	e8630000 	lwi	r3, r3, 0
20013ee4:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20013ee8:	e8730010 	lwi	r3, r19, 16
20013eec:	e883000c 	lwi	r4, r3, 12
20013ef0:	e8730014 	lwi	r3, r19, 20
20013ef4:	64630402 	bslli	r3, r3, 2
20013ef8:	10641800 	addk	r3, r4, r3
20013efc:	e8830000 	lwi	r4, r3, 0
20013f00:	30840001 	addik	r4, r4, 1
20013f04:	f8830000 	swi	r4, r3, 0
    return value;
20013f08:	e8730004 	lwi	r3, r19, 4
}
20013f0c:	10330000 	addk	r1, r19, r0
20013f10:	ea610008 	lwi	r19, r1, 8
20013f14:	3021000c 	addik	r1, r1, 12
20013f18:	b60f0008 	rtsd	r15, 8
20013f1c:	80000000 	or	r0, r0, r0

20013f20 <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20013f20:	3021fff8 	addik	r1, r1, -8
20013f24:	fa610004 	swi	r19, r1, 4
20013f28:	12610000 	addk	r19, r1, r0
20013f2c:	f8b3000c 	swi	r5, r19, 12
20013f30:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20013f34:	e873000c 	lwi	r3, r19, 12
20013f38:	e8830004 	lwi	r4, r3, 4
20013f3c:	e873000c 	lwi	r3, r19, 12
20013f40:	e8630010 	lwi	r3, r3, 16
20013f44:	e8a30000 	lwi	r5, r3, 0
20013f48:	e873000c 	lwi	r3, r19, 12
20013f4c:	e8630000 	lwi	r3, r3, 0
20013f50:	3063ffff 	addik	r3, r3, -1
20013f54:	84651800 	and	r3, r5, r3
20013f58:	64630402 	bslli	r3, r3, 2
20013f5c:	10641800 	addk	r3, r4, r3
20013f60:	e8930010 	lwi	r4, r19, 16
20013f64:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20013f68:	e873000c 	lwi	r3, r19, 12
20013f6c:	e8630010 	lwi	r3, r3, 16
20013f70:	e8830000 	lwi	r4, r3, 0
20013f74:	30840001 	addik	r4, r4, 1
20013f78:	f8830000 	swi	r4, r3, 0
}
20013f7c:	10330000 	addk	r1, r19, r0
20013f80:	ea610004 	lwi	r19, r1, 4
20013f84:	30210008 	addik	r1, r1, 8
20013f88:	b60f0008 	rtsd	r15, 8
20013f8c:	80000000 	or	r0, r0, r0

20013f90 <read_RD>:
	
	static u8 needInit = 1;
	
	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_RD() {
20013f90:	3021ffe0 	addik	r1, r1, -32
20013f94:	f9e10000 	swi	r15, r1, 0
20013f98:	fa61001c 	swi	r19, r1, 28
20013f9c:	12610000 	addk	r19, r1, r0
		index_RD = decoder_motion_interpolation_RD->read_inds[0];
20013fa0:	b0002004 	imm	8196
20013fa4:	e8606518 	lwi	r3, r0, 25880	// 20046518 <decoder_motion_interpolation_RD>
20013fa8:	e863000c 	lwi	r3, r3, 12
20013fac:	e8630000 	lwi	r3, r3, 0
20013fb0:	b0002006 	imm	8198
20013fb4:	f8601b9c 	swi	r3, r0, 7068	// 20061b9c <index_RD>
		numTokens_RD = index_RD + fifo_i16_get_num_tokens(decoder_motion_interpolation_RD, 0);
20013fb8:	b0002004 	imm	8196
20013fbc:	e8606518 	lwi	r3, r0, 25880	// 20046518 <decoder_motion_interpolation_RD>
20013fc0:	10a30000 	addk	r5, r3, r0
20013fc4:	10c00000 	addk	r6, r0, r0
20013fc8:	b9f4e48c 	brlid	r15, -7028	// 20012454 <fifo_i16_get_num_tokens>
20013fcc:	80000000 	or	r0, r0, r0
20013fd0:	10830000 	addk	r4, r3, r0
20013fd4:	b0002006 	imm	8198
20013fd8:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
20013fdc:	10641800 	addk	r3, r4, r3
20013fe0:	b0002006 	imm	8198
20013fe4:	f8601ba0 	swi	r3, r0, 7072	// 20061ba0 <numTokens_RD>
	}
20013fe8:	e9e10000 	lwi	r15, r1, 0
20013fec:	10330000 	addk	r1, r19, r0
20013ff0:	ea61001c 	lwi	r19, r1, 28
20013ff4:	30210020 	addik	r1, r1, 32
20013ff8:	b60f0008 	rtsd	r15, 8
20013ffc:	80000000 	or	r0, r0, r0

20014000 <read_end_RD>:
	
	static void read_end_RD() {
20014000:	3021fff8 	addik	r1, r1, -8
20014004:	fa610004 	swi	r19, r1, 4
20014008:	12610000 	addk	r19, r1, r0
		decoder_motion_interpolation_RD->read_inds[0] = index_RD;
2001400c:	b0002004 	imm	8196
20014010:	e8606518 	lwi	r3, r0, 25880	// 20046518 <decoder_motion_interpolation_RD>
20014014:	e863000c 	lwi	r3, r3, 12
20014018:	b0002006 	imm	8198
2001401c:	e8801b9c 	lwi	r4, r0, 7068	// 20061b9c <index_RD>
20014020:	f8830000 	swi	r4, r3, 0
	}
20014024:	10330000 	addk	r1, r19, r0
20014028:	ea610004 	lwi	r19, r1, 4
2001402c:	30210008 	addik	r1, r1, 8
20014030:	b60f0008 	rtsd	r15, 8
20014034:	80000000 	or	r0, r0, r0

20014038 <read_halfpel>:
	static void read_halfpel() {
20014038:	3021ffe0 	addik	r1, r1, -32
2001403c:	f9e10000 	swi	r15, r1, 0
20014040:	fa61001c 	swi	r19, r1, 28
20014044:	12610000 	addk	r19, r1, r0
		index_halfpel = decoder_motion_interpolation_halfpel->read_inds[0];
20014048:	b0002004 	imm	8196
2001404c:	e8606520 	lwi	r3, r0, 25888	// 20046520 <decoder_motion_interpolation_halfpel>
20014050:	e863000c 	lwi	r3, r3, 12
20014054:	e8630000 	lwi	r3, r3, 0
20014058:	b0002006 	imm	8198
2001405c:	f8601ba4 	swi	r3, r0, 7076	// 20061ba4 <index_halfpel>
		numTokens_halfpel = index_halfpel + fifo_i8_get_num_tokens(decoder_motion_interpolation_halfpel, 0);
20014060:	b0002004 	imm	8196
20014064:	e8606520 	lwi	r3, r0, 25888	// 20046520 <decoder_motion_interpolation_halfpel>
20014068:	10a30000 	addk	r5, r3, r0
2001406c:	10c00000 	addk	r6, r0, r0
20014070:	b9f4e078 	brlid	r15, -8072	// 200120e8 <fifo_i8_get_num_tokens>
20014074:	80000000 	or	r0, r0, r0
20014078:	10830000 	addk	r4, r3, r0
2001407c:	b0002006 	imm	8198
20014080:	e8601ba4 	lwi	r3, r0, 7076	// 20061ba4 <index_halfpel>
20014084:	10641800 	addk	r3, r4, r3
20014088:	b0002006 	imm	8198
2001408c:	f8601ba8 	swi	r3, r0, 7080	// 20061ba8 <numTokens_halfpel>
	}
20014090:	e9e10000 	lwi	r15, r1, 0
20014094:	10330000 	addk	r1, r19, r0
20014098:	ea61001c 	lwi	r19, r1, 28
2001409c:	30210020 	addik	r1, r1, 32
200140a0:	b60f0008 	rtsd	r15, 8
200140a4:	80000000 	or	r0, r0, r0

200140a8 <read_end_halfpel>:
	
	static void read_end_halfpel() {
200140a8:	3021fff8 	addik	r1, r1, -8
200140ac:	fa610004 	swi	r19, r1, 4
200140b0:	12610000 	addk	r19, r1, r0
		decoder_motion_interpolation_halfpel->read_inds[0] = index_halfpel;
200140b4:	b0002004 	imm	8196
200140b8:	e8606520 	lwi	r3, r0, 25888	// 20046520 <decoder_motion_interpolation_halfpel>
200140bc:	e863000c 	lwi	r3, r3, 12
200140c0:	b0002006 	imm	8198
200140c4:	e8801ba4 	lwi	r4, r0, 7076	// 20061ba4 <index_halfpel>
200140c8:	f8830000 	swi	r4, r3, 0
	}
200140cc:	10330000 	addk	r1, r19, r0
200140d0:	ea610004 	lwi	r19, r1, 4
200140d4:	30210008 	addik	r1, r1, 8
200140d8:	b60f0008 	rtsd	r15, 8
200140dc:	80000000 	or	r0, r0, r0

200140e0 <write_MOT>:

	static void write_MOT() {
200140e0:	3021ffe0 	addik	r1, r1, -32
200140e4:	f9e10000 	swi	r15, r1, 0
200140e8:	fa61001c 	swi	r19, r1, 28
200140ec:	12610000 	addk	r19, r1, r0
		index_MOT = (*decoder_motion_interpolation_MOT->write_ind);
200140f0:	b0002004 	imm	8196
200140f4:	e8606500 	lwi	r3, r0, 25856	// 20046500 <decoder_motion_interpolation_MOT>
200140f8:	e8630010 	lwi	r3, r3, 16
200140fc:	e8630000 	lwi	r3, r3, 0
20014100:	b0002006 	imm	8198
20014104:	f8601bac 	swi	r3, r0, 7084	// 20061bac <index_MOT>
		numFree_MOT = index_MOT + fifo_i16_get_room(decoder_motion_interpolation_MOT, NUM_READERS_MOT);
20014108:	b0002004 	imm	8196
2001410c:	e8606500 	lwi	r3, r0, 25856	// 20046500 <decoder_motion_interpolation_MOT>
20014110:	10a30000 	addk	r5, r3, r0
20014114:	30c00001 	addik	r6, r0, 1
20014118:	b9f4e42c 	brlid	r15, -7124	// 20012544 <fifo_i16_get_room>
2001411c:	80000000 	or	r0, r0, r0
20014120:	10830000 	addk	r4, r3, r0
20014124:	b0002006 	imm	8198
20014128:	e8601bac 	lwi	r3, r0, 7084	// 20061bac <index_MOT>
2001412c:	10641800 	addk	r3, r4, r3
20014130:	b0002006 	imm	8198
20014134:	f8601bb0 	swi	r3, r0, 7088	// 20061bb0 <numFree_MOT>
	}
20014138:	e9e10000 	lwi	r15, r1, 0
2001413c:	10330000 	addk	r1, r19, r0
20014140:	ea61001c 	lwi	r19, r1, 28
20014144:	30210020 	addik	r1, r1, 32
20014148:	b60f0008 	rtsd	r15, 8
2001414c:	80000000 	or	r0, r0, r0

20014150 <write_end_MOT>:
	
	static void write_end_MOT() {
20014150:	3021fff8 	addik	r1, r1, -8
20014154:	fa610004 	swi	r19, r1, 4
20014158:	12610000 	addk	r19, r1, r0
		(*decoder_motion_interpolation_MOT->write_ind) = index_MOT;
2001415c:	b0002004 	imm	8196
20014160:	e8606500 	lwi	r3, r0, 25856	// 20046500 <decoder_motion_interpolation_MOT>
20014164:	e8630010 	lwi	r3, r3, 16
20014168:	b0002006 	imm	8198
2001416c:	e8801bac 	lwi	r4, r0, 7084	// 20061bac <index_MOT>
20014170:	f8830000 	swi	r4, r3, 0
	}
20014174:	10330000 	addk	r1, r19, r0
20014178:	ea610004 	lwi	r19, r1, 4
2001417c:	30210008 	addik	r1, r1, 8
20014180:	b60f0008 	rtsd	r15, 8
20014184:	80000000 	or	r0, r0, r0

20014188 <isSchedulable_none>:
	// Functions/procedures


	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_none() {
20014188:	3021fff0 	addik	r1, r1, -16
2001418c:	fa61000c 	swi	r19, r1, 12
20014190:	12610000 	addk	r19, r1, r0
		i32 result;
		i8 flags;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
20014194:	b0002004 	imm	8196
20014198:	e8606520 	lwi	r3, r0, 25888	// 20046520 <decoder_motion_interpolation_halfpel>
2001419c:	e8830004 	lwi	r4, r3, 4
200141a0:	b0002006 	imm	8198
200141a4:	e8601ba4 	lwi	r3, r0, 7076	// 20061ba4 <index_halfpel>
200141a8:	a46301ff 	andi	r3, r3, 511
200141ac:	10641800 	addk	r3, r4, r3
200141b0:	e0630000 	lbui	r3, r3, 0
200141b4:	f0730004 	sbi	r3, r19, 4
		result = flags >> 1 == 0;
200141b8:	e0730004 	lbui	r3, r19, 4
200141bc:	90630060 	sext8	r3, r3
200141c0:	90630001 	sra	r3, r3
200141c4:	90830060 	sext8	r4, r3
200141c8:	10600000 	addk	r3, r0, r0
200141cc:	88641c00 	pcmpeq	r3, r4, r3
200141d0:	a46300ff 	andi	r3, r3, 255
200141d4:	f8730008 	swi	r3, r19, 8
		return result;
200141d8:	e8730008 	lwi	r3, r19, 8
	}
200141dc:	10330000 	addk	r1, r19, r0
200141e0:	ea61000c 	lwi	r19, r1, 12
200141e4:	30210010 	addik	r1, r1, 16
200141e8:	b60f0008 	rtsd	r15, 8
200141ec:	80000000 	or	r0, r0, r0

200141f0 <none>:
	
	static void none() {
200141f0:	3021ffc8 	addik	r1, r1, -56
200141f4:	f9e10000 	swi	r15, r1, 0
200141f8:	fa610034 	swi	r19, r1, 52
200141fc:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_halfpel = index_halfpel % SIZE_halfpel;
20014200:	b0002006 	imm	8198
20014204:	e8601ba4 	lwi	r3, r0, 7076	// 20061ba4 <index_halfpel>
20014208:	a46301ff 	andi	r3, r3, 511
2001420c:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_RD = index_RD % SIZE_RD;
20014210:	b0002006 	imm	8198
20014214:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
20014218:	a46301ff 	andi	r3, r3, 511
2001421c:	f8730028 	swi	r3, r19, 40
		i32 index_aligned_MOT = index_MOT % SIZE_MOT;
20014220:	b0002006 	imm	8198
20014224:	e8601bac 	lwi	r3, r0, 7084	// 20061bac <index_MOT>
20014228:	a46301ff 	andi	r3, r3, 511
2001422c:	f873002c 	swi	r3, r19, 44
		i8 flags;
		i32 j;
		i32 k;
		i16 tmp_RD;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
20014230:	b0002004 	imm	8196
20014234:	e8606520 	lwi	r3, r0, 25888	// 20046520 <decoder_motion_interpolation_halfpel>
20014238:	e8830004 	lwi	r4, r3, 4
2001423c:	b0002006 	imm	8198
20014240:	e8601ba4 	lwi	r3, r0, 7076	// 20061ba4 <index_halfpel>
20014244:	a46301ff 	andi	r3, r3, 511
20014248:	10641800 	addk	r3, r4, r3
2001424c:	e0630000 	lbui	r3, r3, 0
20014250:	f0730030 	sbi	r3, r19, 48
		j = 0;
20014254:	f813001c 	swi	r0, r19, 28
		while (j <= 7) {
20014258:	b80000b4 	bri	180		// 2001430c
			k = 0;
2001425c:	f8130020 	swi	r0, r19, 32
			while (k <= 7) {
20014260:	b8000090 	bri	144		// 200142f0
				tmp_RD = tokens_RD[(index_RD + (9 * j + k)) % SIZE_RD];
20014264:	b0002004 	imm	8196
20014268:	e8606518 	lwi	r3, r0, 25880	// 20046518 <decoder_motion_interpolation_RD>
2001426c:	e8830004 	lwi	r4, r3, 4
20014270:	e873001c 	lwi	r3, r19, 28
20014274:	60a30009 	muli	r5, r3, 9
20014278:	e8730020 	lwi	r3, r19, 32
2001427c:	10651800 	addk	r3, r5, r3
20014280:	10a30000 	addk	r5, r3, r0
20014284:	b0002006 	imm	8198
20014288:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
2001428c:	10651800 	addk	r3, r5, r3
20014290:	a46301ff 	andi	r3, r3, 511
20014294:	10631800 	addk	r3, r3, r3
20014298:	10641800 	addk	r3, r4, r3
2001429c:	e4630000 	lhui	r3, r3, 0
200142a0:	f4730032 	shi	r3, r19, 50
				tokens_MOT[(index_MOT + (j * 8 + k)) % SIZE_MOT] = tmp_RD;
200142a4:	b0002004 	imm	8196
200142a8:	e8606500 	lwi	r3, r0, 25856	// 20046500 <decoder_motion_interpolation_MOT>
200142ac:	e8830004 	lwi	r4, r3, 4
200142b0:	e873001c 	lwi	r3, r19, 28
200142b4:	64a30403 	bslli	r5, r3, 3
200142b8:	e8730020 	lwi	r3, r19, 32
200142bc:	10651800 	addk	r3, r5, r3
200142c0:	10a30000 	addk	r5, r3, r0
200142c4:	b0002006 	imm	8198
200142c8:	e8601bac 	lwi	r3, r0, 7084	// 20061bac <index_MOT>
200142cc:	10651800 	addk	r3, r5, r3
200142d0:	a46301ff 	andi	r3, r3, 511
200142d4:	10631800 	addk	r3, r3, r3
200142d8:	10641800 	addk	r3, r4, r3
200142dc:	e4930032 	lhui	r4, r19, 50
200142e0:	f4830000 	shi	r4, r3, 0
				k = k + 1;
200142e4:	e8730020 	lwi	r3, r19, 32
200142e8:	30630001 	addik	r3, r3, 1
200142ec:	f8730020 	swi	r3, r19, 32
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
		j = 0;
		while (j <= 7) {
			k = 0;
			while (k <= 7) {
200142f0:	e8930020 	lwi	r4, r19, 32
200142f4:	30600007 	addik	r3, r0, 7
200142f8:	16441801 	cmp	r18, r4, r3
200142fc:	bcb2ff68 	bgei	r18, -152		// 20014264
				tmp_RD = tokens_RD[(index_RD + (9 * j + k)) % SIZE_RD];
				tokens_MOT[(index_MOT + (j * 8 + k)) % SIZE_MOT] = tmp_RD;
				k = k + 1;
			}
			j = j + 1;
20014300:	e873001c 	lwi	r3, r19, 28
20014304:	30630001 	addik	r3, r3, 1
20014308:	f873001c 	swi	r3, r19, 28
		i32 k;
		i16 tmp_RD;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
		j = 0;
		while (j <= 7) {
2001430c:	e893001c 	lwi	r4, r19, 28
20014310:	30600007 	addik	r3, r0, 7
20014314:	16441801 	cmp	r18, r4, r3
20014318:	bcb2ff44 	bgei	r18, -188		// 2001425c
			}
			j = j + 1;
		}
	
		// Update ports indexes
		index_halfpel += 1;
2001431c:	b0002006 	imm	8198
20014320:	e8601ba4 	lwi	r3, r0, 7076	// 20061ba4 <index_halfpel>
20014324:	30630001 	addik	r3, r3, 1
20014328:	b0002006 	imm	8198
2001432c:	f8601ba4 	swi	r3, r0, 7076	// 20061ba4 <index_halfpel>
		index_RD += 81;
20014330:	b0002006 	imm	8198
20014334:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
20014338:	30630051 	addik	r3, r3, 81
2001433c:	b0002006 	imm	8198
20014340:	f8601b9c 	swi	r3, r0, 7068	// 20061b9c <index_RD>
		index_MOT += 64;
20014344:	b0002006 	imm	8198
20014348:	e8601bac 	lwi	r3, r0, 7084	// 20061bac <index_MOT>
2001434c:	30630040 	addik	r3, r3, 64
20014350:	b0002006 	imm	8198
20014354:	f8601bac 	swi	r3, r0, 7084	// 20061bac <index_MOT>
		
		read_end_halfpel();
20014358:	b9f4fd50 	brlid	r15, -688	// 200140a8 <read_end_halfpel>
2001435c:	80000000 	or	r0, r0, r0
		read_end_RD();
20014360:	b9f4fca0 	brlid	r15, -864	// 20014000 <read_end_RD>
20014364:	80000000 	or	r0, r0, r0
		write_end_MOT();
20014368:	b9f4fde8 	brlid	r15, -536	// 20014150 <write_end_MOT>
2001436c:	80000000 	or	r0, r0, r0
	}
20014370:	e9e10000 	lwi	r15, r1, 0
20014374:	10330000 	addk	r1, r19, r0
20014378:	ea610034 	lwi	r19, r1, 52
2001437c:	30210038 	addik	r1, r1, 56
20014380:	b60f0008 	rtsd	r15, 8
20014384:	80000000 	or	r0, r0, r0

20014388 <isSchedulable_row>:
	static i32 isSchedulable_row() {
20014388:	3021fff0 	addik	r1, r1, -16
2001438c:	fa61000c 	swi	r19, r1, 12
20014390:	12610000 	addk	r19, r1, r0
		i32 result;
		i8 flags;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
20014394:	b0002004 	imm	8196
20014398:	e8606520 	lwi	r3, r0, 25888	// 20046520 <decoder_motion_interpolation_halfpel>
2001439c:	e8830004 	lwi	r4, r3, 4
200143a0:	b0002006 	imm	8198
200143a4:	e8601ba4 	lwi	r3, r0, 7076	// 20061ba4 <index_halfpel>
200143a8:	a46301ff 	andi	r3, r3, 511
200143ac:	10641800 	addk	r3, r4, r3
200143b0:	e0630000 	lbui	r3, r3, 0
200143b4:	f0730004 	sbi	r3, r19, 4
		result = flags >> 1 == 1;
200143b8:	e0730004 	lbui	r3, r19, 4
200143bc:	90630060 	sext8	r3, r3
200143c0:	90630001 	sra	r3, r3
200143c4:	90830060 	sext8	r4, r3
200143c8:	30600001 	addik	r3, r0, 1
200143cc:	88641c00 	pcmpeq	r3, r4, r3
200143d0:	a46300ff 	andi	r3, r3, 255
200143d4:	f8730008 	swi	r3, r19, 8
		return result;
200143d8:	e8730008 	lwi	r3, r19, 8
	}
200143dc:	10330000 	addk	r1, r19, r0
200143e0:	ea61000c 	lwi	r19, r1, 12
200143e4:	30210010 	addik	r1, r1, 16
200143e8:	b60f0008 	rtsd	r15, 8
200143ec:	80000000 	or	r0, r0, r0

200143f0 <row>:
	
	static void row() {
200143f0:	3021ffc0 	addik	r1, r1, -64
200143f4:	f9e10000 	swi	r15, r1, 0
200143f8:	fa61003c 	swi	r19, r1, 60
200143fc:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_halfpel = index_halfpel % SIZE_halfpel;
20014400:	b0002006 	imm	8198
20014404:	e8601ba4 	lwi	r3, r0, 7076	// 20061ba4 <index_halfpel>
20014408:	a46301ff 	andi	r3, r3, 511
2001440c:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_RD = index_RD % SIZE_RD;
20014410:	b0002006 	imm	8198
20014414:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
20014418:	a46301ff 	andi	r3, r3, 511
2001441c:	f8730028 	swi	r3, r19, 40
		i32 index_aligned_MOT = index_MOT % SIZE_MOT;
20014420:	b0002006 	imm	8198
20014424:	e8601bac 	lwi	r3, r0, 7084	// 20061bac <index_MOT>
20014428:	a46301ff 	andi	r3, r3, 511
2001442c:	f873002c 	swi	r3, r19, 44
		i32 j;
		i32 k;
		i16 tmp_RD;
		i16 tmp_RD0;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
20014430:	b0002004 	imm	8196
20014434:	e8606520 	lwi	r3, r0, 25888	// 20046520 <decoder_motion_interpolation_halfpel>
20014438:	e8830004 	lwi	r4, r3, 4
2001443c:	b0002006 	imm	8198
20014440:	e8601ba4 	lwi	r3, r0, 7076	// 20061ba4 <index_halfpel>
20014444:	a46301ff 	andi	r3, r3, 511
20014448:	10641800 	addk	r3, r4, r3
2001444c:	e0630000 	lbui	r3, r3, 0
20014450:	f0730030 	sbi	r3, r19, 48
		round = 1 - (flags & 1);
20014454:	e0730030 	lbui	r3, r19, 48
20014458:	a4830001 	andi	r4, r3, 1
2001445c:	10600000 	addk	r3, r0, r0
20014460:	88641c00 	pcmpeq	r3, r4, r3
20014464:	a46300ff 	andi	r3, r3, 255
20014468:	f8730034 	swi	r3, r19, 52
		j = 0;
2001446c:	f813001c 	swi	r0, r19, 28
		while (j <= 7) {
20014470:	b8000118 	bri	280		// 20014588
			k = 0;
20014474:	f8130020 	swi	r0, r19, 32
			while (k <= 7) {
20014478:	b80000f4 	bri	244		// 2001456c
				tmp_RD = tokens_RD[(index_RD + (9 * j + k)) % SIZE_RD];
2001447c:	b0002004 	imm	8196
20014480:	e8606518 	lwi	r3, r0, 25880	// 20046518 <decoder_motion_interpolation_RD>
20014484:	e8830004 	lwi	r4, r3, 4
20014488:	e873001c 	lwi	r3, r19, 28
2001448c:	60a30009 	muli	r5, r3, 9
20014490:	e8730020 	lwi	r3, r19, 32
20014494:	10651800 	addk	r3, r5, r3
20014498:	10a30000 	addk	r5, r3, r0
2001449c:	b0002006 	imm	8198
200144a0:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
200144a4:	10651800 	addk	r3, r5, r3
200144a8:	a46301ff 	andi	r3, r3, 511
200144ac:	10631800 	addk	r3, r3, r3
200144b0:	10641800 	addk	r3, r4, r3
200144b4:	e4630000 	lhui	r3, r3, 0
200144b8:	f4730038 	shi	r3, r19, 56
				tmp_RD0 = tokens_RD[(index_RD + (9 * (j + 1) + k)) % SIZE_RD];
200144bc:	b0002004 	imm	8196
200144c0:	e8606518 	lwi	r3, r0, 25880	// 20046518 <decoder_motion_interpolation_RD>
200144c4:	e8830004 	lwi	r4, r3, 4
200144c8:	e873001c 	lwi	r3, r19, 28
200144cc:	30630001 	addik	r3, r3, 1
200144d0:	60a30009 	muli	r5, r3, 9
200144d4:	e8730020 	lwi	r3, r19, 32
200144d8:	10651800 	addk	r3, r5, r3
200144dc:	10a30000 	addk	r5, r3, r0
200144e0:	b0002006 	imm	8198
200144e4:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
200144e8:	10651800 	addk	r3, r5, r3
200144ec:	a46301ff 	andi	r3, r3, 511
200144f0:	10631800 	addk	r3, r3, r3
200144f4:	10641800 	addk	r3, r4, r3
200144f8:	e4630000 	lhui	r3, r3, 0
200144fc:	f473003a 	shi	r3, r19, 58
				tokens_MOT[(index_MOT + (j * 8 + k)) % SIZE_MOT] = (tmp_RD + tmp_RD0 + round) >> 1;
20014500:	b0002004 	imm	8196
20014504:	e8606500 	lwi	r3, r0, 25856	// 20046500 <decoder_motion_interpolation_MOT>
20014508:	e8830004 	lwi	r4, r3, 4
2001450c:	e873001c 	lwi	r3, r19, 28
20014510:	64a30403 	bslli	r5, r3, 3
20014514:	e8730020 	lwi	r3, r19, 32
20014518:	10651800 	addk	r3, r5, r3
2001451c:	10a30000 	addk	r5, r3, r0
20014520:	b0002006 	imm	8198
20014524:	e8601bac 	lwi	r3, r0, 7084	// 20061bac <index_MOT>
20014528:	10651800 	addk	r3, r5, r3
2001452c:	a46301ff 	andi	r3, r3, 511
20014530:	10631800 	addk	r3, r3, r3
20014534:	10641800 	addk	r3, r4, r3
20014538:	e4930038 	lhui	r4, r19, 56
2001453c:	90a40061 	sext16	r5, r4
20014540:	e493003a 	lhui	r4, r19, 58
20014544:	90840061 	sext16	r4, r4
20014548:	10a52000 	addk	r5, r5, r4
2001454c:	e8930034 	lwi	r4, r19, 52
20014550:	10852000 	addk	r4, r5, r4
20014554:	90840001 	sra	r4, r4
20014558:	90840061 	sext16	r4, r4
2001455c:	f4830000 	shi	r4, r3, 0
				k = k + 1;
20014560:	e8730020 	lwi	r3, r19, 32
20014564:	30630001 	addik	r3, r3, 1
20014568:	f8730020 	swi	r3, r19, 32
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
		round = 1 - (flags & 1);
		j = 0;
		while (j <= 7) {
			k = 0;
			while (k <= 7) {
2001456c:	e8930020 	lwi	r4, r19, 32
20014570:	30600007 	addik	r3, r0, 7
20014574:	16441801 	cmp	r18, r4, r3
20014578:	bcb2ff04 	bgei	r18, -252		// 2001447c
				tmp_RD = tokens_RD[(index_RD + (9 * j + k)) % SIZE_RD];
				tmp_RD0 = tokens_RD[(index_RD + (9 * (j + 1) + k)) % SIZE_RD];
				tokens_MOT[(index_MOT + (j * 8 + k)) % SIZE_MOT] = (tmp_RD + tmp_RD0 + round) >> 1;
				k = k + 1;
			}
			j = j + 1;
2001457c:	e873001c 	lwi	r3, r19, 28
20014580:	30630001 	addik	r3, r3, 1
20014584:	f873001c 	swi	r3, r19, 28
		i16 tmp_RD0;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
		round = 1 - (flags & 1);
		j = 0;
		while (j <= 7) {
20014588:	e893001c 	lwi	r4, r19, 28
2001458c:	30600007 	addik	r3, r0, 7
20014590:	16441801 	cmp	r18, r4, r3
20014594:	bcb2fee0 	bgei	r18, -288		// 20014474
			}
			j = j + 1;
		}
	
		// Update ports indexes
		index_halfpel += 1;
20014598:	b0002006 	imm	8198
2001459c:	e8601ba4 	lwi	r3, r0, 7076	// 20061ba4 <index_halfpel>
200145a0:	30630001 	addik	r3, r3, 1
200145a4:	b0002006 	imm	8198
200145a8:	f8601ba4 	swi	r3, r0, 7076	// 20061ba4 <index_halfpel>
		index_RD += 81;
200145ac:	b0002006 	imm	8198
200145b0:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
200145b4:	30630051 	addik	r3, r3, 81
200145b8:	b0002006 	imm	8198
200145bc:	f8601b9c 	swi	r3, r0, 7068	// 20061b9c <index_RD>
		index_MOT += 64;
200145c0:	b0002006 	imm	8198
200145c4:	e8601bac 	lwi	r3, r0, 7084	// 20061bac <index_MOT>
200145c8:	30630040 	addik	r3, r3, 64
200145cc:	b0002006 	imm	8198
200145d0:	f8601bac 	swi	r3, r0, 7084	// 20061bac <index_MOT>
		
		read_end_halfpel();
200145d4:	b9f4fad4 	brlid	r15, -1324	// 200140a8 <read_end_halfpel>
200145d8:	80000000 	or	r0, r0, r0
		read_end_RD();
200145dc:	b9f4fa24 	brlid	r15, -1500	// 20014000 <read_end_RD>
200145e0:	80000000 	or	r0, r0, r0
		write_end_MOT();
200145e4:	b9f4fb6c 	brlid	r15, -1172	// 20014150 <write_end_MOT>
200145e8:	80000000 	or	r0, r0, r0
	}
200145ec:	e9e10000 	lwi	r15, r1, 0
200145f0:	10330000 	addk	r1, r19, r0
200145f4:	ea61003c 	lwi	r19, r1, 60
200145f8:	30210040 	addik	r1, r1, 64
200145fc:	b60f0008 	rtsd	r15, 8
20014600:	80000000 	or	r0, r0, r0

20014604 <isSchedulable_col>:
	static i32 isSchedulable_col() {
20014604:	3021fff0 	addik	r1, r1, -16
20014608:	fa61000c 	swi	r19, r1, 12
2001460c:	12610000 	addk	r19, r1, r0
		i32 result;
		i8 flags;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
20014610:	b0002004 	imm	8196
20014614:	e8606520 	lwi	r3, r0, 25888	// 20046520 <decoder_motion_interpolation_halfpel>
20014618:	e8830004 	lwi	r4, r3, 4
2001461c:	b0002006 	imm	8198
20014620:	e8601ba4 	lwi	r3, r0, 7076	// 20061ba4 <index_halfpel>
20014624:	a46301ff 	andi	r3, r3, 511
20014628:	10641800 	addk	r3, r4, r3
2001462c:	e0630000 	lbui	r3, r3, 0
20014630:	f0730004 	sbi	r3, r19, 4
		result = flags >> 1 == 2;
20014634:	e0730004 	lbui	r3, r19, 4
20014638:	90630060 	sext8	r3, r3
2001463c:	90630001 	sra	r3, r3
20014640:	90830060 	sext8	r4, r3
20014644:	30600002 	addik	r3, r0, 2
20014648:	88641c00 	pcmpeq	r3, r4, r3
2001464c:	a46300ff 	andi	r3, r3, 255
20014650:	f8730008 	swi	r3, r19, 8
		return result;
20014654:	e8730008 	lwi	r3, r19, 8
	}
20014658:	10330000 	addk	r1, r19, r0
2001465c:	ea61000c 	lwi	r19, r1, 12
20014660:	30210010 	addik	r1, r1, 16
20014664:	b60f0008 	rtsd	r15, 8
20014668:	80000000 	or	r0, r0, r0

2001466c <col>:
	
	static void col() {
2001466c:	3021ffc0 	addik	r1, r1, -64
20014670:	f9e10000 	swi	r15, r1, 0
20014674:	fa61003c 	swi	r19, r1, 60
20014678:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_halfpel = index_halfpel % SIZE_halfpel;
2001467c:	b0002006 	imm	8198
20014680:	e8601ba4 	lwi	r3, r0, 7076	// 20061ba4 <index_halfpel>
20014684:	a46301ff 	andi	r3, r3, 511
20014688:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_RD = index_RD % SIZE_RD;
2001468c:	b0002006 	imm	8198
20014690:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
20014694:	a46301ff 	andi	r3, r3, 511
20014698:	f8730028 	swi	r3, r19, 40
		i32 index_aligned_MOT = index_MOT % SIZE_MOT;
2001469c:	b0002006 	imm	8198
200146a0:	e8601bac 	lwi	r3, r0, 7084	// 20061bac <index_MOT>
200146a4:	a46301ff 	andi	r3, r3, 511
200146a8:	f873002c 	swi	r3, r19, 44
		i32 j;
		i32 k;
		i16 tmp_RD;
		i16 tmp_RD0;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
200146ac:	b0002004 	imm	8196
200146b0:	e8606520 	lwi	r3, r0, 25888	// 20046520 <decoder_motion_interpolation_halfpel>
200146b4:	e8830004 	lwi	r4, r3, 4
200146b8:	b0002006 	imm	8198
200146bc:	e8601ba4 	lwi	r3, r0, 7076	// 20061ba4 <index_halfpel>
200146c0:	a46301ff 	andi	r3, r3, 511
200146c4:	10641800 	addk	r3, r4, r3
200146c8:	e0630000 	lbui	r3, r3, 0
200146cc:	f0730030 	sbi	r3, r19, 48
		round = 1 - (flags & 1);
200146d0:	e0730030 	lbui	r3, r19, 48
200146d4:	a4830001 	andi	r4, r3, 1
200146d8:	10600000 	addk	r3, r0, r0
200146dc:	88641c00 	pcmpeq	r3, r4, r3
200146e0:	a46300ff 	andi	r3, r3, 255
200146e4:	f8730034 	swi	r3, r19, 52
		j = 0;
200146e8:	f813001c 	swi	r0, r19, 28
		while (j <= 7) {
200146ec:	b8000118 	bri	280		// 20014804
			k = 0;
200146f0:	f8130020 	swi	r0, r19, 32
			while (k <= 7) {
200146f4:	b80000f4 	bri	244		// 200147e8
				tmp_RD = tokens_RD[(index_RD + (9 * j + k)) % SIZE_RD];
200146f8:	b0002004 	imm	8196
200146fc:	e8606518 	lwi	r3, r0, 25880	// 20046518 <decoder_motion_interpolation_RD>
20014700:	e8830004 	lwi	r4, r3, 4
20014704:	e873001c 	lwi	r3, r19, 28
20014708:	60a30009 	muli	r5, r3, 9
2001470c:	e8730020 	lwi	r3, r19, 32
20014710:	10651800 	addk	r3, r5, r3
20014714:	10a30000 	addk	r5, r3, r0
20014718:	b0002006 	imm	8198
2001471c:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
20014720:	10651800 	addk	r3, r5, r3
20014724:	a46301ff 	andi	r3, r3, 511
20014728:	10631800 	addk	r3, r3, r3
2001472c:	10641800 	addk	r3, r4, r3
20014730:	e4630000 	lhui	r3, r3, 0
20014734:	f4730038 	shi	r3, r19, 56
				tmp_RD0 = tokens_RD[(index_RD + (9 * j + k + 1)) % SIZE_RD];
20014738:	b0002004 	imm	8196
2001473c:	e8606518 	lwi	r3, r0, 25880	// 20046518 <decoder_motion_interpolation_RD>
20014740:	e8830004 	lwi	r4, r3, 4
20014744:	e873001c 	lwi	r3, r19, 28
20014748:	60a30009 	muli	r5, r3, 9
2001474c:	e8730020 	lwi	r3, r19, 32
20014750:	10651800 	addk	r3, r5, r3
20014754:	10a30000 	addk	r5, r3, r0
20014758:	b0002006 	imm	8198
2001475c:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
20014760:	10651800 	addk	r3, r5, r3
20014764:	30630001 	addik	r3, r3, 1
20014768:	a46301ff 	andi	r3, r3, 511
2001476c:	10631800 	addk	r3, r3, r3
20014770:	10641800 	addk	r3, r4, r3
20014774:	e4630000 	lhui	r3, r3, 0
20014778:	f473003a 	shi	r3, r19, 58
				tokens_MOT[(index_MOT + (j * 8 + k)) % SIZE_MOT] = (tmp_RD + tmp_RD0 + round) >> 1;
2001477c:	b0002004 	imm	8196
20014780:	e8606500 	lwi	r3, r0, 25856	// 20046500 <decoder_motion_interpolation_MOT>
20014784:	e8830004 	lwi	r4, r3, 4
20014788:	e873001c 	lwi	r3, r19, 28
2001478c:	64a30403 	bslli	r5, r3, 3
20014790:	e8730020 	lwi	r3, r19, 32
20014794:	10651800 	addk	r3, r5, r3
20014798:	10a30000 	addk	r5, r3, r0
2001479c:	b0002006 	imm	8198
200147a0:	e8601bac 	lwi	r3, r0, 7084	// 20061bac <index_MOT>
200147a4:	10651800 	addk	r3, r5, r3
200147a8:	a46301ff 	andi	r3, r3, 511
200147ac:	10631800 	addk	r3, r3, r3
200147b0:	10641800 	addk	r3, r4, r3
200147b4:	e4930038 	lhui	r4, r19, 56
200147b8:	90a40061 	sext16	r5, r4
200147bc:	e493003a 	lhui	r4, r19, 58
200147c0:	90840061 	sext16	r4, r4
200147c4:	10a52000 	addk	r5, r5, r4
200147c8:	e8930034 	lwi	r4, r19, 52
200147cc:	10852000 	addk	r4, r5, r4
200147d0:	90840001 	sra	r4, r4
200147d4:	90840061 	sext16	r4, r4
200147d8:	f4830000 	shi	r4, r3, 0
				k = k + 1;
200147dc:	e8730020 	lwi	r3, r19, 32
200147e0:	30630001 	addik	r3, r3, 1
200147e4:	f8730020 	swi	r3, r19, 32
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
		round = 1 - (flags & 1);
		j = 0;
		while (j <= 7) {
			k = 0;
			while (k <= 7) {
200147e8:	e8930020 	lwi	r4, r19, 32
200147ec:	30600007 	addik	r3, r0, 7
200147f0:	16441801 	cmp	r18, r4, r3
200147f4:	bcb2ff04 	bgei	r18, -252		// 200146f8
				tmp_RD = tokens_RD[(index_RD + (9 * j + k)) % SIZE_RD];
				tmp_RD0 = tokens_RD[(index_RD + (9 * j + k + 1)) % SIZE_RD];
				tokens_MOT[(index_MOT + (j * 8 + k)) % SIZE_MOT] = (tmp_RD + tmp_RD0 + round) >> 1;
				k = k + 1;
			}
			j = j + 1;
200147f8:	e873001c 	lwi	r3, r19, 28
200147fc:	30630001 	addik	r3, r3, 1
20014800:	f873001c 	swi	r3, r19, 28
		i16 tmp_RD0;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
		round = 1 - (flags & 1);
		j = 0;
		while (j <= 7) {
20014804:	e893001c 	lwi	r4, r19, 28
20014808:	30600007 	addik	r3, r0, 7
2001480c:	16441801 	cmp	r18, r4, r3
20014810:	bcb2fee0 	bgei	r18, -288		// 200146f0
			}
			j = j + 1;
		}
	
		// Update ports indexes
		index_halfpel += 1;
20014814:	b0002006 	imm	8198
20014818:	e8601ba4 	lwi	r3, r0, 7076	// 20061ba4 <index_halfpel>
2001481c:	30630001 	addik	r3, r3, 1
20014820:	b0002006 	imm	8198
20014824:	f8601ba4 	swi	r3, r0, 7076	// 20061ba4 <index_halfpel>
		index_RD += 81;
20014828:	b0002006 	imm	8198
2001482c:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
20014830:	30630051 	addik	r3, r3, 81
20014834:	b0002006 	imm	8198
20014838:	f8601b9c 	swi	r3, r0, 7068	// 20061b9c <index_RD>
		index_MOT += 64;
2001483c:	b0002006 	imm	8198
20014840:	e8601bac 	lwi	r3, r0, 7084	// 20061bac <index_MOT>
20014844:	30630040 	addik	r3, r3, 64
20014848:	b0002006 	imm	8198
2001484c:	f8601bac 	swi	r3, r0, 7084	// 20061bac <index_MOT>
		
		read_end_halfpel();
20014850:	b9f4f858 	brlid	r15, -1960	// 200140a8 <read_end_halfpel>
20014854:	80000000 	or	r0, r0, r0
		read_end_RD();
20014858:	b9f4f7a8 	brlid	r15, -2136	// 20014000 <read_end_RD>
2001485c:	80000000 	or	r0, r0, r0
		write_end_MOT();
20014860:	b9f4f8f0 	brlid	r15, -1808	// 20014150 <write_end_MOT>
20014864:	80000000 	or	r0, r0, r0
	}
20014868:	e9e10000 	lwi	r15, r1, 0
2001486c:	10330000 	addk	r1, r19, r0
20014870:	ea61003c 	lwi	r19, r1, 60
20014874:	30210040 	addik	r1, r1, 64
20014878:	b60f0008 	rtsd	r15, 8
2001487c:	80000000 	or	r0, r0, r0

20014880 <isSchedulable_both>:
	static i32 isSchedulable_both() {
20014880:	3021fff4 	addik	r1, r1, -12
20014884:	fa610008 	swi	r19, r1, 8
20014888:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2001488c:	30600001 	addik	r3, r0, 1
20014890:	f8730004 	swi	r3, r19, 4
		return result;
20014894:	e8730004 	lwi	r3, r19, 4
	}
20014898:	10330000 	addk	r1, r19, r0
2001489c:	ea610008 	lwi	r19, r1, 8
200148a0:	3021000c 	addik	r1, r1, 12
200148a4:	b60f0008 	rtsd	r15, 8
200148a8:	80000000 	or	r0, r0, r0

200148ac <both>:
	
	static void both() {
200148ac:	3021ffbc 	addik	r1, r1, -68
200148b0:	f9e10000 	swi	r15, r1, 0
200148b4:	fa610040 	swi	r19, r1, 64
200148b8:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_halfpel = index_halfpel % SIZE_halfpel;
200148bc:	b0002006 	imm	8198
200148c0:	e8601ba4 	lwi	r3, r0, 7076	// 20061ba4 <index_halfpel>
200148c4:	a46301ff 	andi	r3, r3, 511
200148c8:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_RD = index_RD % SIZE_RD;
200148cc:	b0002006 	imm	8198
200148d0:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
200148d4:	a46301ff 	andi	r3, r3, 511
200148d8:	f8730028 	swi	r3, r19, 40
		i32 index_aligned_MOT = index_MOT % SIZE_MOT;
200148dc:	b0002006 	imm	8198
200148e0:	e8601bac 	lwi	r3, r0, 7084	// 20061bac <index_MOT>
200148e4:	a46301ff 	andi	r3, r3, 511
200148e8:	f873002c 	swi	r3, r19, 44
		i16 tmp_RD;
		i16 tmp_RD0;
		i16 tmp_RD1;
		i16 tmp_RD2;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
200148ec:	b0002004 	imm	8196
200148f0:	e8606520 	lwi	r3, r0, 25888	// 20046520 <decoder_motion_interpolation_halfpel>
200148f4:	e8830004 	lwi	r4, r3, 4
200148f8:	b0002006 	imm	8198
200148fc:	e8601ba4 	lwi	r3, r0, 7076	// 20061ba4 <index_halfpel>
20014900:	a46301ff 	andi	r3, r3, 511
20014904:	10641800 	addk	r3, r4, r3
20014908:	e0630000 	lbui	r3, r3, 0
2001490c:	f0730030 	sbi	r3, r19, 48
		round = 2 - (flags & 1);
20014910:	e0730030 	lbui	r3, r19, 48
20014914:	a4630001 	andi	r3, r3, 1
20014918:	30800002 	addik	r4, r0, 2
2001491c:	14632000 	rsubk	r3, r3, r4
20014920:	f8730034 	swi	r3, r19, 52
		j = 0;
20014924:	f813001c 	swi	r0, r19, 28
		while (j <= 7) {
20014928:	b80001bc 	bri	444		// 20014ae4
			k = 0;
2001492c:	f8130020 	swi	r0, r19, 32
			while (k <= 7) {
20014930:	b8000198 	bri	408		// 20014ac8
				tmp_RD = tokens_RD[(index_RD + (9 * j + k)) % SIZE_RD];
20014934:	b0002004 	imm	8196
20014938:	e8606518 	lwi	r3, r0, 25880	// 20046518 <decoder_motion_interpolation_RD>
2001493c:	e8830004 	lwi	r4, r3, 4
20014940:	e873001c 	lwi	r3, r19, 28
20014944:	60a30009 	muli	r5, r3, 9
20014948:	e8730020 	lwi	r3, r19, 32
2001494c:	10651800 	addk	r3, r5, r3
20014950:	10a30000 	addk	r5, r3, r0
20014954:	b0002006 	imm	8198
20014958:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
2001495c:	10651800 	addk	r3, r5, r3
20014960:	a46301ff 	andi	r3, r3, 511
20014964:	10631800 	addk	r3, r3, r3
20014968:	10641800 	addk	r3, r4, r3
2001496c:	e4630000 	lhui	r3, r3, 0
20014970:	f4730038 	shi	r3, r19, 56
				tmp_RD0 = tokens_RD[(index_RD + (9 * j + k + 1)) % SIZE_RD];
20014974:	b0002004 	imm	8196
20014978:	e8606518 	lwi	r3, r0, 25880	// 20046518 <decoder_motion_interpolation_RD>
2001497c:	e8830004 	lwi	r4, r3, 4
20014980:	e873001c 	lwi	r3, r19, 28
20014984:	60a30009 	muli	r5, r3, 9
20014988:	e8730020 	lwi	r3, r19, 32
2001498c:	10651800 	addk	r3, r5, r3
20014990:	10a30000 	addk	r5, r3, r0
20014994:	b0002006 	imm	8198
20014998:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
2001499c:	10651800 	addk	r3, r5, r3
200149a0:	30630001 	addik	r3, r3, 1
200149a4:	a46301ff 	andi	r3, r3, 511
200149a8:	10631800 	addk	r3, r3, r3
200149ac:	10641800 	addk	r3, r4, r3
200149b0:	e4630000 	lhui	r3, r3, 0
200149b4:	f473003a 	shi	r3, r19, 58
				tmp_RD1 = tokens_RD[(index_RD + (9 * (j + 1) + k)) % SIZE_RD];
200149b8:	b0002004 	imm	8196
200149bc:	e8606518 	lwi	r3, r0, 25880	// 20046518 <decoder_motion_interpolation_RD>
200149c0:	e8830004 	lwi	r4, r3, 4
200149c4:	e873001c 	lwi	r3, r19, 28
200149c8:	30630001 	addik	r3, r3, 1
200149cc:	60a30009 	muli	r5, r3, 9
200149d0:	e8730020 	lwi	r3, r19, 32
200149d4:	10651800 	addk	r3, r5, r3
200149d8:	10a30000 	addk	r5, r3, r0
200149dc:	b0002006 	imm	8198
200149e0:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
200149e4:	10651800 	addk	r3, r5, r3
200149e8:	a46301ff 	andi	r3, r3, 511
200149ec:	10631800 	addk	r3, r3, r3
200149f0:	10641800 	addk	r3, r4, r3
200149f4:	e4630000 	lhui	r3, r3, 0
200149f8:	f473003c 	shi	r3, r19, 60
				tmp_RD2 = tokens_RD[(index_RD + (9 * (j + 1) + k + 1)) % SIZE_RD];
200149fc:	b0002004 	imm	8196
20014a00:	e8606518 	lwi	r3, r0, 25880	// 20046518 <decoder_motion_interpolation_RD>
20014a04:	e8830004 	lwi	r4, r3, 4
20014a08:	e873001c 	lwi	r3, r19, 28
20014a0c:	30630001 	addik	r3, r3, 1
20014a10:	60a30009 	muli	r5, r3, 9
20014a14:	e8730020 	lwi	r3, r19, 32
20014a18:	10651800 	addk	r3, r5, r3
20014a1c:	10a30000 	addk	r5, r3, r0
20014a20:	b0002006 	imm	8198
20014a24:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
20014a28:	10651800 	addk	r3, r5, r3
20014a2c:	30630001 	addik	r3, r3, 1
20014a30:	a46301ff 	andi	r3, r3, 511
20014a34:	10631800 	addk	r3, r3, r3
20014a38:	10641800 	addk	r3, r4, r3
20014a3c:	e4630000 	lhui	r3, r3, 0
20014a40:	f473003e 	shi	r3, r19, 62
				tokens_MOT[(index_MOT + (j * 8 + k)) % SIZE_MOT] = (tmp_RD + tmp_RD0 + tmp_RD1 + tmp_RD2 + round) >> 2;
20014a44:	b0002004 	imm	8196
20014a48:	e8606500 	lwi	r3, r0, 25856	// 20046500 <decoder_motion_interpolation_MOT>
20014a4c:	e8830004 	lwi	r4, r3, 4
20014a50:	e873001c 	lwi	r3, r19, 28
20014a54:	64a30403 	bslli	r5, r3, 3
20014a58:	e8730020 	lwi	r3, r19, 32
20014a5c:	10651800 	addk	r3, r5, r3
20014a60:	10a30000 	addk	r5, r3, r0
20014a64:	b0002006 	imm	8198
20014a68:	e8601bac 	lwi	r3, r0, 7084	// 20061bac <index_MOT>
20014a6c:	10651800 	addk	r3, r5, r3
20014a70:	a46301ff 	andi	r3, r3, 511
20014a74:	10631800 	addk	r3, r3, r3
20014a78:	10641800 	addk	r3, r4, r3
20014a7c:	e4930038 	lhui	r4, r19, 56
20014a80:	90a40061 	sext16	r5, r4
20014a84:	e493003a 	lhui	r4, r19, 58
20014a88:	90840061 	sext16	r4, r4
20014a8c:	10a52000 	addk	r5, r5, r4
20014a90:	e493003c 	lhui	r4, r19, 60
20014a94:	90840061 	sext16	r4, r4
20014a98:	10a52000 	addk	r5, r5, r4
20014a9c:	e493003e 	lhui	r4, r19, 62
20014aa0:	90840061 	sext16	r4, r4
20014aa4:	10a52000 	addk	r5, r5, r4
20014aa8:	e8930034 	lwi	r4, r19, 52
20014aac:	10852000 	addk	r4, r5, r4
20014ab0:	64840202 	bsrai	r4, r4, 2
20014ab4:	90840061 	sext16	r4, r4
20014ab8:	f4830000 	shi	r4, r3, 0
				k = k + 1;
20014abc:	e8730020 	lwi	r3, r19, 32
20014ac0:	30630001 	addik	r3, r3, 1
20014ac4:	f8730020 	swi	r3, r19, 32
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
		round = 2 - (flags & 1);
		j = 0;
		while (j <= 7) {
			k = 0;
			while (k <= 7) {
20014ac8:	e8930020 	lwi	r4, r19, 32
20014acc:	30600007 	addik	r3, r0, 7
20014ad0:	16441801 	cmp	r18, r4, r3
20014ad4:	bcb2fe60 	bgei	r18, -416		// 20014934
				tmp_RD1 = tokens_RD[(index_RD + (9 * (j + 1) + k)) % SIZE_RD];
				tmp_RD2 = tokens_RD[(index_RD + (9 * (j + 1) + k + 1)) % SIZE_RD];
				tokens_MOT[(index_MOT + (j * 8 + k)) % SIZE_MOT] = (tmp_RD + tmp_RD0 + tmp_RD1 + tmp_RD2 + round) >> 2;
				k = k + 1;
			}
			j = j + 1;
20014ad8:	e873001c 	lwi	r3, r19, 28
20014adc:	30630001 	addik	r3, r3, 1
20014ae0:	f873001c 	swi	r3, r19, 28
		i16 tmp_RD2;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
		round = 2 - (flags & 1);
		j = 0;
		while (j <= 7) {
20014ae4:	e893001c 	lwi	r4, r19, 28
20014ae8:	30600007 	addik	r3, r0, 7
20014aec:	16441801 	cmp	r18, r4, r3
20014af0:	bcb2fe3c 	bgei	r18, -452		// 2001492c
			}
			j = j + 1;
		}
	
		// Update ports indexes
		index_halfpel += 1;
20014af4:	b0002006 	imm	8198
20014af8:	e8601ba4 	lwi	r3, r0, 7076	// 20061ba4 <index_halfpel>
20014afc:	30630001 	addik	r3, r3, 1
20014b00:	b0002006 	imm	8198
20014b04:	f8601ba4 	swi	r3, r0, 7076	// 20061ba4 <index_halfpel>
		index_RD += 81;
20014b08:	b0002006 	imm	8198
20014b0c:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
20014b10:	30630051 	addik	r3, r3, 81
20014b14:	b0002006 	imm	8198
20014b18:	f8601b9c 	swi	r3, r0, 7068	// 20061b9c <index_RD>
		index_MOT += 64;
20014b1c:	b0002006 	imm	8198
20014b20:	e8601bac 	lwi	r3, r0, 7084	// 20061bac <index_MOT>
20014b24:	30630040 	addik	r3, r3, 64
20014b28:	b0002006 	imm	8198
20014b2c:	f8601bac 	swi	r3, r0, 7084	// 20061bac <index_MOT>
		
		read_end_halfpel();
20014b30:	b9f4f578 	brlid	r15, -2696	// 200140a8 <read_end_halfpel>
20014b34:	80000000 	or	r0, r0, r0
		read_end_RD();
20014b38:	b9f4f4c8 	brlid	r15, -2872	// 20014000 <read_end_RD>
20014b3c:	80000000 	or	r0, r0, r0
		write_end_MOT();
20014b40:	b9f4f610 	brlid	r15, -2544	// 20014150 <write_end_MOT>
20014b44:	80000000 	or	r0, r0, r0
	}
20014b48:	e9e10000 	lwi	r15, r1, 0
20014b4c:	10330000 	addk	r1, r19, r0
20014b50:	ea610040 	lwi	r19, r1, 64
20014b54:	30210044 	addik	r1, r1, 68
20014b58:	b60f0008 	rtsd	r15, 8
20014b5c:	80000000 	or	r0, r0, r0

20014b60 <decoder_motion_interpolation_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_motion_interpolation_initialize() {
20014b60:	3021fff4 	addik	r1, r1, -12
20014b64:	fa610008 	swi	r19, r1, 8
20014b68:	12610000 	addk	r19, r1, r0
		int i = 0;
20014b6c:	f8130004 	swi	r0, r19, 4
		
	finished:
		// no read_end/write_end here!
		return;
20014b70:	80000000 	or	r0, r0, r0
	}
20014b74:	10330000 	addk	r1, r19, r0
20014b78:	ea610008 	lwi	r19, r1, 8
20014b7c:	3021000c 	addik	r1, r1, 12
20014b80:	b60f0008 	rtsd	r15, 8
20014b84:	80000000 	or	r0, r0, r0

20014b88 <decoder_motion_interpolation_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	int decoder_motion_interpolation_scheduler() {
20014b88:	3021ffcc 	addik	r1, r1, -52
20014b8c:	f9e10000 	swi	r15, r1, 0
20014b90:	fa610030 	swi	r19, r1, 48
20014b94:	12610000 	addk	r19, r1, r0
		int i = 0;
20014b98:	f813001c 	swi	r0, r19, 28
		if(needInit){
20014b9c:	b0002004 	imm	8196
20014ba0:	e0606524 	lbui	r3, r0, 25892	// 20046524 <needInit>
20014ba4:	bc030014 	beqi	r3, 20		// 20014bb8
			decoder_motion_interpolation_initialize();
20014ba8:	b9f4ffb8 	brlid	r15, -72	// 20014b60 <decoder_motion_interpolation_initialize>
20014bac:	80000000 	or	r0, r0, r0
			needInit = 0;
20014bb0:	b0002004 	imm	8196
20014bb4:	f0006524 	sbi	r0, r0, 25892	// 20046524 <needInit>
		}
		read_RD();
20014bb8:	b9f4f3d8 	brlid	r15, -3112	// 20013f90 <read_RD>
20014bbc:	80000000 	or	r0, r0, r0
		read_halfpel();
20014bc0:	b9f4f478 	brlid	r15, -2952	// 20014038 <read_halfpel>
20014bc4:	80000000 	or	r0, r0, r0
		write_MOT();
20014bc8:	b9f4f518 	brlid	r15, -2792	// 200140e0 <write_MOT>
20014bcc:	80000000 	or	r0, r0, r0
		
	
	
		while (1) {
			// Action loop
			if (numTokens_halfpel - index_halfpel >= 1 && numTokens_RD - index_RD >= 81 && isSchedulable_none()) {
20014bd0:	b0002006 	imm	8198
20014bd4:	e8801ba8 	lwi	r4, r0, 7080	// 20061ba8 <numTokens_halfpel>
20014bd8:	b0002006 	imm	8198
20014bdc:	e8601ba4 	lwi	r3, r0, 7076	// 20061ba4 <index_halfpel>
20014be0:	88641800 	xor	r3, r4, r3
20014be4:	bc03008c 	beqi	r3, 140		// 20014c70
20014be8:	b0002006 	imm	8198
20014bec:	e8801ba0 	lwi	r4, r0, 7072	// 20061ba0 <numTokens_RD>
20014bf0:	b0002006 	imm	8198
20014bf4:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
20014bf8:	14832000 	rsubk	r4, r3, r4
20014bfc:	30600050 	addik	r3, r0, 80	// 50 <_start1>
20014c00:	16441803 	cmpu	r18, r4, r3
20014c04:	bcb2006c 	bgei	r18, 108		// 20014c70
20014c08:	b9f4f580 	brlid	r15, -2688	// 20014188 <isSchedulable_none>
20014c0c:	80000000 	or	r0, r0, r0
20014c10:	bc030060 	beqi	r3, 96		// 20014c70
				int stop = 0;
20014c14:	f8130020 	swi	r0, r19, 32
				if (64 > SIZE_MOT - index_MOT + decoder_motion_interpolation_MOT->read_inds[0]) {
20014c18:	b0002004 	imm	8196
20014c1c:	e8606500 	lwi	r3, r0, 25856	// 20046500 <decoder_motion_interpolation_MOT>
20014c20:	e863000c 	lwi	r3, r3, 12
20014c24:	e8830000 	lwi	r4, r3, 0
20014c28:	b0002006 	imm	8198
20014c2c:	e8601bac 	lwi	r3, r0, 7084	// 20061bac <index_MOT>
20014c30:	14632000 	rsubk	r3, r3, r4
20014c34:	30830200 	addik	r4, r3, 512
20014c38:	3060003f 	addik	r3, r0, 63
20014c3c:	16441803 	cmpu	r18, r4, r3
20014c40:	bc52000c 	blti	r18, 12		// 20014c4c
					stop = 1;
20014c44:	30600001 	addik	r3, r0, 1
20014c48:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
20014c4c:	e8730020 	lwi	r3, r19, 32
20014c50:	bc030008 	beqi	r3, 8		// 20014c58
					goto finished;
20014c54:	b8000200 	bri	512		// 20014e54
				}
				none();
20014c58:	b9f4f598 	brlid	r15, -2664	// 200141f0 <none>
20014c5c:	80000000 	or	r0, r0, r0
				i++;
20014c60:	e873001c 	lwi	r3, r19, 28
20014c64:	30630001 	addik	r3, r3, 1
20014c68:	f873001c 	swi	r3, r19, 28
		
	
	
		while (1) {
			// Action loop
			if (numTokens_halfpel - index_halfpel >= 1 && numTokens_RD - index_RD >= 81 && isSchedulable_none()) {
20014c6c:	b80001e4 	bri	484		// 20014e50
				if (stop != 0) {
					goto finished;
				}
				none();
				i++;
			} else if (numTokens_halfpel - index_halfpel >= 1 && numTokens_RD - index_RD >= 81 && isSchedulable_col()) {
20014c70:	b0002006 	imm	8198
20014c74:	e8801ba8 	lwi	r4, r0, 7080	// 20061ba8 <numTokens_halfpel>
20014c78:	b0002006 	imm	8198
20014c7c:	e8601ba4 	lwi	r3, r0, 7076	// 20061ba4 <index_halfpel>
20014c80:	88641800 	xor	r3, r4, r3
20014c84:	bc03008c 	beqi	r3, 140		// 20014d10
20014c88:	b0002006 	imm	8198
20014c8c:	e8801ba0 	lwi	r4, r0, 7072	// 20061ba0 <numTokens_RD>
20014c90:	b0002006 	imm	8198
20014c94:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
20014c98:	14832000 	rsubk	r4, r3, r4
20014c9c:	30600050 	addik	r3, r0, 80	// 50 <_start1>
20014ca0:	16441803 	cmpu	r18, r4, r3
20014ca4:	bcb2006c 	bgei	r18, 108		// 20014d10
20014ca8:	b9f4f95c 	brlid	r15, -1700	// 20014604 <isSchedulable_col>
20014cac:	80000000 	or	r0, r0, r0
20014cb0:	bc030060 	beqi	r3, 96		// 20014d10
				int stop = 0;
20014cb4:	f8130024 	swi	r0, r19, 36
				if (64 > SIZE_MOT - index_MOT + decoder_motion_interpolation_MOT->read_inds[0]) {
20014cb8:	b0002004 	imm	8196
20014cbc:	e8606500 	lwi	r3, r0, 25856	// 20046500 <decoder_motion_interpolation_MOT>
20014cc0:	e863000c 	lwi	r3, r3, 12
20014cc4:	e8830000 	lwi	r4, r3, 0
20014cc8:	b0002006 	imm	8198
20014ccc:	e8601bac 	lwi	r3, r0, 7084	// 20061bac <index_MOT>
20014cd0:	14632000 	rsubk	r3, r3, r4
20014cd4:	30830200 	addik	r4, r3, 512
20014cd8:	3060003f 	addik	r3, r0, 63
20014cdc:	16441803 	cmpu	r18, r4, r3
20014ce0:	bc52000c 	blti	r18, 12		// 20014cec
					stop = 1;
20014ce4:	30600001 	addik	r3, r0, 1
20014ce8:	f8730024 	swi	r3, r19, 36
				}
				if (stop != 0) {
20014cec:	e8730024 	lwi	r3, r19, 36
20014cf0:	bc030008 	beqi	r3, 8		// 20014cf8
					goto finished;
20014cf4:	b8000160 	bri	352		// 20014e54
				}
				col();
20014cf8:	b9f4f974 	brlid	r15, -1676	// 2001466c <col>
20014cfc:	80000000 	or	r0, r0, r0
				i++;
20014d00:	e873001c 	lwi	r3, r19, 28
20014d04:	30630001 	addik	r3, r3, 1
20014d08:	f873001c 	swi	r3, r19, 28
				if (stop != 0) {
					goto finished;
				}
				none();
				i++;
			} else if (numTokens_halfpel - index_halfpel >= 1 && numTokens_RD - index_RD >= 81 && isSchedulable_col()) {
20014d0c:	b8000144 	bri	324		// 20014e50
				if (stop != 0) {
					goto finished;
				}
				col();
				i++;
			} else if (numTokens_halfpel - index_halfpel >= 1 && numTokens_RD - index_RD >= 81 && isSchedulable_row()) {
20014d10:	b0002006 	imm	8198
20014d14:	e8801ba8 	lwi	r4, r0, 7080	// 20061ba8 <numTokens_halfpel>
20014d18:	b0002006 	imm	8198
20014d1c:	e8601ba4 	lwi	r3, r0, 7076	// 20061ba4 <index_halfpel>
20014d20:	88641800 	xor	r3, r4, r3
20014d24:	bc03008c 	beqi	r3, 140		// 20014db0
20014d28:	b0002006 	imm	8198
20014d2c:	e8801ba0 	lwi	r4, r0, 7072	// 20061ba0 <numTokens_RD>
20014d30:	b0002006 	imm	8198
20014d34:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
20014d38:	14832000 	rsubk	r4, r3, r4
20014d3c:	30600050 	addik	r3, r0, 80	// 50 <_start1>
20014d40:	16441803 	cmpu	r18, r4, r3
20014d44:	bcb2006c 	bgei	r18, 108		// 20014db0
20014d48:	b9f4f640 	brlid	r15, -2496	// 20014388 <isSchedulable_row>
20014d4c:	80000000 	or	r0, r0, r0
20014d50:	bc030060 	beqi	r3, 96		// 20014db0
				int stop = 0;
20014d54:	f8130028 	swi	r0, r19, 40
				if (64 > SIZE_MOT - index_MOT + decoder_motion_interpolation_MOT->read_inds[0]) {
20014d58:	b0002004 	imm	8196
20014d5c:	e8606500 	lwi	r3, r0, 25856	// 20046500 <decoder_motion_interpolation_MOT>
20014d60:	e863000c 	lwi	r3, r3, 12
20014d64:	e8830000 	lwi	r4, r3, 0
20014d68:	b0002006 	imm	8198
20014d6c:	e8601bac 	lwi	r3, r0, 7084	// 20061bac <index_MOT>
20014d70:	14632000 	rsubk	r3, r3, r4
20014d74:	30830200 	addik	r4, r3, 512
20014d78:	3060003f 	addik	r3, r0, 63
20014d7c:	16441803 	cmpu	r18, r4, r3
20014d80:	bc52000c 	blti	r18, 12		// 20014d8c
					stop = 1;
20014d84:	30600001 	addik	r3, r0, 1
20014d88:	f8730028 	swi	r3, r19, 40
				}
				if (stop != 0) {
20014d8c:	e8730028 	lwi	r3, r19, 40
20014d90:	bc030008 	beqi	r3, 8		// 20014d98
					goto finished;
20014d94:	b80000c0 	bri	192		// 20014e54
				}
				row();
20014d98:	b9f4f658 	brlid	r15, -2472	// 200143f0 <row>
20014d9c:	80000000 	or	r0, r0, r0
				i++;
20014da0:	e873001c 	lwi	r3, r19, 28
20014da4:	30630001 	addik	r3, r3, 1
20014da8:	f873001c 	swi	r3, r19, 28
				if (stop != 0) {
					goto finished;
				}
				col();
				i++;
			} else if (numTokens_halfpel - index_halfpel >= 1 && numTokens_RD - index_RD >= 81 && isSchedulable_row()) {
20014dac:	b80000a4 	bri	164		// 20014e50
				if (stop != 0) {
					goto finished;
				}
				row();
				i++;
			} else if (numTokens_halfpel - index_halfpel >= 1 && numTokens_RD - index_RD >= 81 && isSchedulable_both()) {
20014db0:	b0002006 	imm	8198
20014db4:	e8801ba8 	lwi	r4, r0, 7080	// 20061ba8 <numTokens_halfpel>
20014db8:	b0002006 	imm	8198
20014dbc:	e8601ba4 	lwi	r3, r0, 7076	// 20061ba4 <index_halfpel>
20014dc0:	88641800 	xor	r3, r4, r3
20014dc4:	bc030090 	beqi	r3, 144		// 20014e54
20014dc8:	b0002006 	imm	8198
20014dcc:	e8801ba0 	lwi	r4, r0, 7072	// 20061ba0 <numTokens_RD>
20014dd0:	b0002006 	imm	8198
20014dd4:	e8601b9c 	lwi	r3, r0, 7068	// 20061b9c <index_RD>
20014dd8:	14832000 	rsubk	r4, r3, r4
20014ddc:	30600050 	addik	r3, r0, 80	// 50 <_start1>
20014de0:	16441803 	cmpu	r18, r4, r3
20014de4:	bcb20070 	bgei	r18, 112		// 20014e54
20014de8:	b9f4fa98 	brlid	r15, -1384	// 20014880 <isSchedulable_both>
20014dec:	80000000 	or	r0, r0, r0
20014df0:	bc030064 	beqi	r3, 100		// 20014e54
				int stop = 0;
20014df4:	f813002c 	swi	r0, r19, 44
				if (64 > SIZE_MOT - index_MOT + decoder_motion_interpolation_MOT->read_inds[0]) {
20014df8:	b0002004 	imm	8196
20014dfc:	e8606500 	lwi	r3, r0, 25856	// 20046500 <decoder_motion_interpolation_MOT>
20014e00:	e863000c 	lwi	r3, r3, 12
20014e04:	e8830000 	lwi	r4, r3, 0
20014e08:	b0002006 	imm	8198
20014e0c:	e8601bac 	lwi	r3, r0, 7084	// 20061bac <index_MOT>
20014e10:	14632000 	rsubk	r3, r3, r4
20014e14:	30830200 	addik	r4, r3, 512
20014e18:	3060003f 	addik	r3, r0, 63
20014e1c:	16441803 	cmpu	r18, r4, r3
20014e20:	bc52000c 	blti	r18, 12		// 20014e2c
					stop = 1;
20014e24:	30600001 	addik	r3, r0, 1
20014e28:	f873002c 	swi	r3, r19, 44
				}
				if (stop != 0) {
20014e2c:	e873002c 	lwi	r3, r19, 44
20014e30:	bc030008 	beqi	r3, 8		// 20014e38
					goto finished;
20014e34:	b8000020 	bri	32		// 20014e54
				}
				both();
20014e38:	b9f4fa74 	brlid	r15, -1420	// 200148ac <both>
20014e3c:	80000000 	or	r0, r0, r0
				i++;
20014e40:	e873001c 	lwi	r3, r19, 28
20014e44:	30630001 	addik	r3, r3, 1
20014e48:	f873001c 	swi	r3, r19, 28
			} else {
				goto finished;
			}
		}
20014e4c:	b800fd84 	bri	-636		// 20014bd0
20014e50:	b800fd80 	bri	-640		// 20014bd0
		
	finished:
	
		read_end_RD();
20014e54:	b9f4f1ac 	brlid	r15, -3668	// 20014000 <read_end_RD>
20014e58:	80000000 	or	r0, r0, r0
		read_end_halfpel();
20014e5c:	b9f4f24c 	brlid	r15, -3508	// 200140a8 <read_end_halfpel>
20014e60:	80000000 	or	r0, r0, r0
		write_end_MOT();
20014e64:	b9f4f2ec 	brlid	r15, -3348	// 20014150 <write_end_MOT>
20014e68:	80000000 	or	r0, r0, r0
		
		
		return i;
20014e6c:	e873001c 	lwi	r3, r19, 28
	}
20014e70:	e9e10000 	lwi	r15, r1, 0
20014e74:	10330000 	addk	r1, r19, r0
20014e78:	ea610030 	lwi	r19, r1, 48
20014e7c:	30210034 	addik	r1, r1, 52
20014e80:	b60f0008 	rtsd	r15, 8
20014e84:	80000000 	or	r0, r0, r0

20014e88 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20014e88:	3021fff8 	addik	r1, r1, -8
20014e8c:	fa610004 	swi	r19, r1, 4
20014e90:	12610000 	addk	r19, r1, r0
20014e94:	f8b3000c 	swi	r5, r19, 12
20014e98:	f8d30010 	swi	r6, r19, 16
20014e9c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20014ea0:	e873000c 	lwi	r3, r19, 12
20014ea4:	e8630010 	lwi	r3, r3, 16
20014ea8:	e8830000 	lwi	r4, r3, 0
20014eac:	e873000c 	lwi	r3, r19, 12
20014eb0:	e8a3000c 	lwi	r5, r3, 12
20014eb4:	e8730010 	lwi	r3, r19, 16
20014eb8:	64630402 	bslli	r3, r3, 2
20014ebc:	10651800 	addk	r3, r5, r3
20014ec0:	e8630000 	lwi	r3, r3, 0
20014ec4:	14a32000 	rsubk	r5, r3, r4
20014ec8:	30600001 	addik	r3, r0, 1
20014ecc:	e8930014 	lwi	r4, r19, 20
20014ed0:	16442803 	cmpu	r18, r4, r5
20014ed4:	bcb20008 	bgei	r18, 8		// 20014edc
20014ed8:	10600000 	addk	r3, r0, r0
20014edc:	a46300ff 	andi	r3, r3, 255
}
20014ee0:	10330000 	addk	r1, r19, r0
20014ee4:	ea610004 	lwi	r19, r1, 4
20014ee8:	30210008 	addik	r1, r1, 8
20014eec:	b60f0008 	rtsd	r15, 8
20014ef0:	80000000 	or	r0, r0, r0

20014ef4 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20014ef4:	3021fff8 	addik	r1, r1, -8
20014ef8:	fa610004 	swi	r19, r1, 4
20014efc:	12610000 	addk	r19, r1, r0
20014f00:	f8b3000c 	swi	r5, r19, 12
20014f04:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20014f08:	e873000c 	lwi	r3, r19, 12
20014f0c:	e8630010 	lwi	r3, r3, 16
20014f10:	e8830000 	lwi	r4, r3, 0
20014f14:	e873000c 	lwi	r3, r19, 12
20014f18:	e8a3000c 	lwi	r5, r3, 12
20014f1c:	e8730010 	lwi	r3, r19, 16
20014f20:	64630402 	bslli	r3, r3, 2
20014f24:	10651800 	addk	r3, r5, r3
20014f28:	e8630000 	lwi	r3, r3, 0
20014f2c:	14632000 	rsubk	r3, r3, r4
}
20014f30:	10330000 	addk	r1, r19, r0
20014f34:	ea610004 	lwi	r19, r1, 4
20014f38:	30210008 	addik	r1, r1, 8
20014f3c:	b60f0008 	rtsd	r15, 8
20014f40:	80000000 	or	r0, r0, r0

20014f44 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20014f44:	3021fff4 	addik	r1, r1, -12
20014f48:	fa610008 	swi	r19, r1, 8
20014f4c:	12610000 	addk	r19, r1, r0
20014f50:	f8b30010 	swi	r5, r19, 16
20014f54:	f8d30014 	swi	r6, r19, 20
20014f58:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20014f5c:	f8130004 	swi	r0, r19, 4
20014f60:	b800005c 	bri	92		// 20014fbc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20014f64:	e8730010 	lwi	r3, r19, 16
20014f68:	e8830000 	lwi	r4, r3, 0
20014f6c:	e8730010 	lwi	r3, r19, 16
20014f70:	e8a3000c 	lwi	r5, r3, 12
20014f74:	e8730004 	lwi	r3, r19, 4
20014f78:	64630402 	bslli	r3, r3, 2
20014f7c:	10651800 	addk	r3, r5, r3
20014f80:	e8a30000 	lwi	r5, r3, 0
20014f84:	e8730010 	lwi	r3, r19, 16
20014f88:	e8630010 	lwi	r3, r3, 16
20014f8c:	e8630000 	lwi	r3, r3, 0
20014f90:	14632800 	rsubk	r3, r3, r5
20014f94:	10641800 	addk	r3, r4, r3
20014f98:	30830001 	addik	r4, r3, 1
20014f9c:	e8730018 	lwi	r3, r19, 24
20014fa0:	16441803 	cmpu	r18, r4, r3
20014fa4:	bc52000c 	blti	r18, 12		// 20014fb0
            return 0;
20014fa8:	10600000 	addk	r3, r0, r0
20014fac:	b8000024 	bri	36		// 20014fd0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20014fb0:	e8730004 	lwi	r3, r19, 4
20014fb4:	30630001 	addik	r3, r3, 1
20014fb8:	f8730004 	swi	r3, r19, 4
20014fbc:	e8930004 	lwi	r4, r19, 4
20014fc0:	e8730014 	lwi	r3, r19, 20
20014fc4:	16432003 	cmpu	r18, r3, r4
20014fc8:	bc52ff9c 	blti	r18, -100		// 20014f64
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20014fcc:	30600001 	addik	r3, r0, 1
}
20014fd0:	10330000 	addk	r1, r19, r0
20014fd4:	ea610008 	lwi	r19, r1, 8
20014fd8:	3021000c 	addik	r1, r1, 12
20014fdc:	b60f0008 	rtsd	r15, 8
20014fe0:	80000000 	or	r0, r0, r0

20014fe4 <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20014fe4:	3021ffec 	addik	r1, r1, -20
20014fe8:	fa610010 	swi	r19, r1, 16
20014fec:	12610000 	addk	r19, r1, r0
20014ff0:	f8b30018 	swi	r5, r19, 24
20014ff4:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20014ff8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20014ffc:	f8130004 	swi	r0, r19, 4
20015000:	b8000054 	bri	84		// 20015054
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20015004:	e8730018 	lwi	r3, r19, 24
20015008:	e8630010 	lwi	r3, r3, 16
2001500c:	e8830000 	lwi	r4, r3, 0
20015010:	e8730018 	lwi	r3, r19, 24
20015014:	e8a3000c 	lwi	r5, r3, 12
20015018:	e8730004 	lwi	r3, r19, 4
2001501c:	64630402 	bslli	r3, r3, 2
20015020:	10651800 	addk	r3, r5, r3
20015024:	e8630000 	lwi	r3, r3, 0
20015028:	14632000 	rsubk	r3, r3, r4
2001502c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20015030:	e8930008 	lwi	r4, r19, 8
20015034:	e873000c 	lwi	r3, r19, 12
20015038:	16441803 	cmpu	r18, r4, r3
2001503c:	bcb20008 	bgei	r18, 8		// 20015044
20015040:	10640000 	addk	r3, r4, r0
20015044:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20015048:	e8730004 	lwi	r3, r19, 4
2001504c:	30630001 	addik	r3, r3, 1
20015050:	f8730004 	swi	r3, r19, 4
20015054:	e8930004 	lwi	r4, r19, 4
20015058:	e873001c 	lwi	r3, r19, 28
2001505c:	16432003 	cmpu	r18, r3, r4
20015060:	bc52ffa4 	blti	r18, -92		// 20015004
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20015064:	e8730018 	lwi	r3, r19, 24
20015068:	e8830000 	lwi	r4, r3, 0
2001506c:	e8730008 	lwi	r3, r19, 8
20015070:	14632000 	rsubk	r3, r3, r4
}
20015074:	10330000 	addk	r1, r19, r0
20015078:	ea610010 	lwi	r19, r1, 16
2001507c:	30210014 	addik	r1, r1, 20
20015080:	b60f0008 	rtsd	r15, 8
20015084:	80000000 	or	r0, r0, r0

20015088 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20015088:	3021fff4 	addik	r1, r1, -12
2001508c:	fa610008 	swi	r19, r1, 8
20015090:	12610000 	addk	r19, r1, r0
20015094:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20015098:	e8730010 	lwi	r3, r19, 16
2001509c:	e8630010 	lwi	r3, r3, 16
200150a0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200150a4:	f8130004 	swi	r0, r19, 4
200150a8:	b8000028 	bri	40		// 200150d0
        fifo->read_inds[i] = 0;
200150ac:	e8730010 	lwi	r3, r19, 16
200150b0:	e883000c 	lwi	r4, r3, 12
200150b4:	e8730004 	lwi	r3, r19, 4
200150b8:	64630402 	bslli	r3, r3, 2
200150bc:	10641800 	addk	r3, r4, r3
200150c0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200150c4:	e8730004 	lwi	r3, r19, 4
200150c8:	30630001 	addik	r3, r3, 1
200150cc:	f8730004 	swi	r3, r19, 4
200150d0:	e8730010 	lwi	r3, r19, 16
200150d4:	e8830008 	lwi	r4, r3, 8
200150d8:	e8730004 	lwi	r3, r19, 4
200150dc:	16441803 	cmpu	r18, r4, r3
200150e0:	bc52ffcc 	blti	r18, -52		// 200150ac
        fifo->read_inds[i] = 0;
    }
}
200150e4:	10330000 	addk	r1, r19, r0
200150e8:	ea610008 	lwi	r19, r1, 8
200150ec:	3021000c 	addik	r1, r1, 12
200150f0:	b60f0008 	rtsd	r15, 8
200150f4:	80000000 	or	r0, r0, r0

200150f8 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200150f8:	3021fff4 	addik	r1, r1, -12
200150fc:	fa610008 	swi	r19, r1, 8
20015100:	12610000 	addk	r19, r1, r0
20015104:	f8b30010 	swi	r5, r19, 16
20015108:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001510c:	e8730010 	lwi	r3, r19, 16
20015110:	e8830004 	lwi	r4, r3, 4
20015114:	e8730010 	lwi	r3, r19, 16
20015118:	e8a3000c 	lwi	r5, r3, 12
2001511c:	e8730014 	lwi	r3, r19, 20
20015120:	64630402 	bslli	r3, r3, 2
20015124:	10651800 	addk	r3, r5, r3
20015128:	e8a30000 	lwi	r5, r3, 0
2001512c:	e8730010 	lwi	r3, r19, 16
20015130:	e8630000 	lwi	r3, r3, 0
20015134:	3063ffff 	addik	r3, r3, -1
20015138:	84651800 	and	r3, r5, r3
2001513c:	10641800 	addk	r3, r4, r3
20015140:	e0630000 	lbui	r3, r3, 0
20015144:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20015148:	e8730010 	lwi	r3, r19, 16
2001514c:	e883000c 	lwi	r4, r3, 12
20015150:	e8730014 	lwi	r3, r19, 20
20015154:	64630402 	bslli	r3, r3, 2
20015158:	10641800 	addk	r3, r4, r3
2001515c:	e8830000 	lwi	r4, r3, 0
20015160:	30840001 	addik	r4, r4, 1
20015164:	f8830000 	swi	r4, r3, 0
    return value;
20015168:	e0730004 	lbui	r3, r19, 4
2001516c:	90630060 	sext8	r3, r3
}
20015170:	10330000 	addk	r1, r19, r0
20015174:	ea610008 	lwi	r19, r1, 8
20015178:	3021000c 	addik	r1, r1, 12
2001517c:	b60f0008 	rtsd	r15, 8
20015180:	80000000 	or	r0, r0, r0

20015184 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20015184:	3021fff8 	addik	r1, r1, -8
20015188:	fa610004 	swi	r19, r1, 4
2001518c:	12610000 	addk	r19, r1, r0
20015190:	f8b3000c 	swi	r5, r19, 12
20015194:	10660000 	addk	r3, r6, r0
20015198:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001519c:	e873000c 	lwi	r3, r19, 12
200151a0:	e8830004 	lwi	r4, r3, 4
200151a4:	e873000c 	lwi	r3, r19, 12
200151a8:	e8630010 	lwi	r3, r3, 16
200151ac:	e8a30000 	lwi	r5, r3, 0
200151b0:	e873000c 	lwi	r3, r19, 12
200151b4:	e8630000 	lwi	r3, r3, 0
200151b8:	3063ffff 	addik	r3, r3, -1
200151bc:	84651800 	and	r3, r5, r3
200151c0:	10641800 	addk	r3, r4, r3
200151c4:	e0930010 	lbui	r4, r19, 16
200151c8:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
200151cc:	e873000c 	lwi	r3, r19, 12
200151d0:	e8630010 	lwi	r3, r3, 16
200151d4:	e8830000 	lwi	r4, r3, 0
200151d8:	30840001 	addik	r4, r4, 1
200151dc:	f8830000 	swi	r4, r3, 0
}
200151e0:	10330000 	addk	r1, r19, r0
200151e4:	ea610004 	lwi	r19, r1, 4
200151e8:	30210008 	addik	r1, r1, 8
200151ec:	b60f0008 	rtsd	r15, 8
200151f0:	80000000 	or	r0, r0, r0

200151f4 <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200151f4:	3021fff8 	addik	r1, r1, -8
200151f8:	fa610004 	swi	r19, r1, 4
200151fc:	12610000 	addk	r19, r1, r0
20015200:	f8b3000c 	swi	r5, r19, 12
20015204:	f8d30010 	swi	r6, r19, 16
20015208:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001520c:	e873000c 	lwi	r3, r19, 12
20015210:	e8630010 	lwi	r3, r3, 16
20015214:	e8830000 	lwi	r4, r3, 0
20015218:	e873000c 	lwi	r3, r19, 12
2001521c:	e8a3000c 	lwi	r5, r3, 12
20015220:	e8730010 	lwi	r3, r19, 16
20015224:	64630402 	bslli	r3, r3, 2
20015228:	10651800 	addk	r3, r5, r3
2001522c:	e8630000 	lwi	r3, r3, 0
20015230:	14a32000 	rsubk	r5, r3, r4
20015234:	30600001 	addik	r3, r0, 1
20015238:	e8930014 	lwi	r4, r19, 20
2001523c:	16442803 	cmpu	r18, r4, r5
20015240:	bcb20008 	bgei	r18, 8		// 20015248
20015244:	10600000 	addk	r3, r0, r0
20015248:	a46300ff 	andi	r3, r3, 255
}
2001524c:	10330000 	addk	r1, r19, r0
20015250:	ea610004 	lwi	r19, r1, 4
20015254:	30210008 	addik	r1, r1, 8
20015258:	b60f0008 	rtsd	r15, 8
2001525c:	80000000 	or	r0, r0, r0

20015260 <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20015260:	3021fff8 	addik	r1, r1, -8
20015264:	fa610004 	swi	r19, r1, 4
20015268:	12610000 	addk	r19, r1, r0
2001526c:	f8b3000c 	swi	r5, r19, 12
20015270:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20015274:	e873000c 	lwi	r3, r19, 12
20015278:	e8630010 	lwi	r3, r3, 16
2001527c:	e8830000 	lwi	r4, r3, 0
20015280:	e873000c 	lwi	r3, r19, 12
20015284:	e8a3000c 	lwi	r5, r3, 12
20015288:	e8730010 	lwi	r3, r19, 16
2001528c:	64630402 	bslli	r3, r3, 2
20015290:	10651800 	addk	r3, r5, r3
20015294:	e8630000 	lwi	r3, r3, 0
20015298:	14632000 	rsubk	r3, r3, r4
}
2001529c:	10330000 	addk	r1, r19, r0
200152a0:	ea610004 	lwi	r19, r1, 4
200152a4:	30210008 	addik	r1, r1, 8
200152a8:	b60f0008 	rtsd	r15, 8
200152ac:	80000000 	or	r0, r0, r0

200152b0 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200152b0:	3021fff4 	addik	r1, r1, -12
200152b4:	fa610008 	swi	r19, r1, 8
200152b8:	12610000 	addk	r19, r1, r0
200152bc:	f8b30010 	swi	r5, r19, 16
200152c0:	f8d30014 	swi	r6, r19, 20
200152c4:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200152c8:	f8130004 	swi	r0, r19, 4
200152cc:	b800005c 	bri	92		// 20015328
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200152d0:	e8730010 	lwi	r3, r19, 16
200152d4:	e8830000 	lwi	r4, r3, 0
200152d8:	e8730010 	lwi	r3, r19, 16
200152dc:	e8a3000c 	lwi	r5, r3, 12
200152e0:	e8730004 	lwi	r3, r19, 4
200152e4:	64630402 	bslli	r3, r3, 2
200152e8:	10651800 	addk	r3, r5, r3
200152ec:	e8a30000 	lwi	r5, r3, 0
200152f0:	e8730010 	lwi	r3, r19, 16
200152f4:	e8630010 	lwi	r3, r3, 16
200152f8:	e8630000 	lwi	r3, r3, 0
200152fc:	14632800 	rsubk	r3, r3, r5
20015300:	10641800 	addk	r3, r4, r3
20015304:	30830001 	addik	r4, r3, 1
20015308:	e8730018 	lwi	r3, r19, 24
2001530c:	16441803 	cmpu	r18, r4, r3
20015310:	bc52000c 	blti	r18, 12		// 2001531c
            return 0;
20015314:	10600000 	addk	r3, r0, r0
20015318:	b8000024 	bri	36		// 2001533c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001531c:	e8730004 	lwi	r3, r19, 4
20015320:	30630001 	addik	r3, r3, 1
20015324:	f8730004 	swi	r3, r19, 4
20015328:	e8930004 	lwi	r4, r19, 4
2001532c:	e8730014 	lwi	r3, r19, 20
20015330:	16432003 	cmpu	r18, r3, r4
20015334:	bc52ff9c 	blti	r18, -100		// 200152d0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20015338:	30600001 	addik	r3, r0, 1
}
2001533c:	10330000 	addk	r1, r19, r0
20015340:	ea610008 	lwi	r19, r1, 8
20015344:	3021000c 	addik	r1, r1, 12
20015348:	b60f0008 	rtsd	r15, 8
2001534c:	80000000 	or	r0, r0, r0

20015350 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20015350:	3021ffec 	addik	r1, r1, -20
20015354:	fa610010 	swi	r19, r1, 16
20015358:	12610000 	addk	r19, r1, r0
2001535c:	f8b30018 	swi	r5, r19, 24
20015360:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20015364:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20015368:	f8130004 	swi	r0, r19, 4
2001536c:	b8000054 	bri	84		// 200153c0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20015370:	e8730018 	lwi	r3, r19, 24
20015374:	e8630010 	lwi	r3, r3, 16
20015378:	e8830000 	lwi	r4, r3, 0
2001537c:	e8730018 	lwi	r3, r19, 24
20015380:	e8a3000c 	lwi	r5, r3, 12
20015384:	e8730004 	lwi	r3, r19, 4
20015388:	64630402 	bslli	r3, r3, 2
2001538c:	10651800 	addk	r3, r5, r3
20015390:	e8630000 	lwi	r3, r3, 0
20015394:	14632000 	rsubk	r3, r3, r4
20015398:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001539c:	e8930008 	lwi	r4, r19, 8
200153a0:	e873000c 	lwi	r3, r19, 12
200153a4:	16441803 	cmpu	r18, r4, r3
200153a8:	bcb20008 	bgei	r18, 8		// 200153b0
200153ac:	10640000 	addk	r3, r4, r0
200153b0:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200153b4:	e8730004 	lwi	r3, r19, 4
200153b8:	30630001 	addik	r3, r3, 1
200153bc:	f8730004 	swi	r3, r19, 4
200153c0:	e8930004 	lwi	r4, r19, 4
200153c4:	e873001c 	lwi	r3, r19, 28
200153c8:	16432003 	cmpu	r18, r3, r4
200153cc:	bc52ffa4 	blti	r18, -92		// 20015370
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200153d0:	e8730018 	lwi	r3, r19, 24
200153d4:	e8830000 	lwi	r4, r3, 0
200153d8:	e8730008 	lwi	r3, r19, 8
200153dc:	14632000 	rsubk	r3, r3, r4
}
200153e0:	10330000 	addk	r1, r19, r0
200153e4:	ea610010 	lwi	r19, r1, 16
200153e8:	30210014 	addik	r1, r1, 20
200153ec:	b60f0008 	rtsd	r15, 8
200153f0:	80000000 	or	r0, r0, r0

200153f4 <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200153f4:	3021fff4 	addik	r1, r1, -12
200153f8:	fa610008 	swi	r19, r1, 8
200153fc:	12610000 	addk	r19, r1, r0
20015400:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20015404:	e8730010 	lwi	r3, r19, 16
20015408:	e8630010 	lwi	r3, r3, 16
2001540c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20015410:	f8130004 	swi	r0, r19, 4
20015414:	b8000028 	bri	40		// 2001543c
        fifo->read_inds[i] = 0;
20015418:	e8730010 	lwi	r3, r19, 16
2001541c:	e883000c 	lwi	r4, r3, 12
20015420:	e8730004 	lwi	r3, r19, 4
20015424:	64630402 	bslli	r3, r3, 2
20015428:	10641800 	addk	r3, r4, r3
2001542c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20015430:	e8730004 	lwi	r3, r19, 4
20015434:	30630001 	addik	r3, r3, 1
20015438:	f8730004 	swi	r3, r19, 4
2001543c:	e8730010 	lwi	r3, r19, 16
20015440:	e8830008 	lwi	r4, r3, 8
20015444:	e8730004 	lwi	r3, r19, 4
20015448:	16441803 	cmpu	r18, r4, r3
2001544c:	bc52ffcc 	blti	r18, -52		// 20015418
        fifo->read_inds[i] = 0;
    }
}
20015450:	10330000 	addk	r1, r19, r0
20015454:	ea610008 	lwi	r19, r1, 8
20015458:	3021000c 	addik	r1, r1, 12
2001545c:	b60f0008 	rtsd	r15, 8
20015460:	80000000 	or	r0, r0, r0

20015464 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20015464:	3021fff4 	addik	r1, r1, -12
20015468:	fa610008 	swi	r19, r1, 8
2001546c:	12610000 	addk	r19, r1, r0
20015470:	f8b30010 	swi	r5, r19, 16
20015474:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20015478:	e8730010 	lwi	r3, r19, 16
2001547c:	e8830004 	lwi	r4, r3, 4
20015480:	e8730010 	lwi	r3, r19, 16
20015484:	e8a3000c 	lwi	r5, r3, 12
20015488:	e8730014 	lwi	r3, r19, 20
2001548c:	64630402 	bslli	r3, r3, 2
20015490:	10651800 	addk	r3, r5, r3
20015494:	e8a30000 	lwi	r5, r3, 0
20015498:	e8730010 	lwi	r3, r19, 16
2001549c:	e8630000 	lwi	r3, r3, 0
200154a0:	3063ffff 	addik	r3, r3, -1
200154a4:	84651800 	and	r3, r5, r3
200154a8:	10631800 	addk	r3, r3, r3
200154ac:	10641800 	addk	r3, r4, r3
200154b0:	e4630000 	lhui	r3, r3, 0
200154b4:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200154b8:	e8730010 	lwi	r3, r19, 16
200154bc:	e883000c 	lwi	r4, r3, 12
200154c0:	e8730014 	lwi	r3, r19, 20
200154c4:	64630402 	bslli	r3, r3, 2
200154c8:	10641800 	addk	r3, r4, r3
200154cc:	e8830000 	lwi	r4, r3, 0
200154d0:	30840001 	addik	r4, r4, 1
200154d4:	f8830000 	swi	r4, r3, 0
    return value;
200154d8:	e4730004 	lhui	r3, r19, 4
200154dc:	90630061 	sext16	r3, r3
}
200154e0:	10330000 	addk	r1, r19, r0
200154e4:	ea610008 	lwi	r19, r1, 8
200154e8:	3021000c 	addik	r1, r1, 12
200154ec:	b60f0008 	rtsd	r15, 8
200154f0:	80000000 	or	r0, r0, r0

200154f4 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200154f4:	3021fff8 	addik	r1, r1, -8
200154f8:	fa610004 	swi	r19, r1, 4
200154fc:	12610000 	addk	r19, r1, r0
20015500:	f8b3000c 	swi	r5, r19, 12
20015504:	10660000 	addk	r3, r6, r0
20015508:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001550c:	e873000c 	lwi	r3, r19, 12
20015510:	e8830004 	lwi	r4, r3, 4
20015514:	e873000c 	lwi	r3, r19, 12
20015518:	e8630010 	lwi	r3, r3, 16
2001551c:	e8a30000 	lwi	r5, r3, 0
20015520:	e873000c 	lwi	r3, r19, 12
20015524:	e8630000 	lwi	r3, r3, 0
20015528:	3063ffff 	addik	r3, r3, -1
2001552c:	84651800 	and	r3, r5, r3
20015530:	10631800 	addk	r3, r3, r3
20015534:	10641800 	addk	r3, r4, r3
20015538:	e4930010 	lhui	r4, r19, 16
2001553c:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20015540:	e873000c 	lwi	r3, r19, 12
20015544:	e8630010 	lwi	r3, r3, 16
20015548:	e8830000 	lwi	r4, r3, 0
2001554c:	30840001 	addik	r4, r4, 1
20015550:	f8830000 	swi	r4, r3, 0
}
20015554:	10330000 	addk	r1, r19, r0
20015558:	ea610004 	lwi	r19, r1, 4
2001555c:	30210008 	addik	r1, r1, 8
20015560:	b60f0008 	rtsd	r15, 8
20015564:	80000000 	or	r0, r0, r0

20015568 <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20015568:	3021fff8 	addik	r1, r1, -8
2001556c:	fa610004 	swi	r19, r1, 4
20015570:	12610000 	addk	r19, r1, r0
20015574:	f8b3000c 	swi	r5, r19, 12
20015578:	f8d30010 	swi	r6, r19, 16
2001557c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20015580:	e873000c 	lwi	r3, r19, 12
20015584:	e8630010 	lwi	r3, r3, 16
20015588:	e8830000 	lwi	r4, r3, 0
2001558c:	e873000c 	lwi	r3, r19, 12
20015590:	e8a3000c 	lwi	r5, r3, 12
20015594:	e8730010 	lwi	r3, r19, 16
20015598:	64630402 	bslli	r3, r3, 2
2001559c:	10651800 	addk	r3, r5, r3
200155a0:	e8630000 	lwi	r3, r3, 0
200155a4:	14a32000 	rsubk	r5, r3, r4
200155a8:	30600001 	addik	r3, r0, 1
200155ac:	e8930014 	lwi	r4, r19, 20
200155b0:	16442803 	cmpu	r18, r4, r5
200155b4:	bcb20008 	bgei	r18, 8		// 200155bc
200155b8:	10600000 	addk	r3, r0, r0
200155bc:	a46300ff 	andi	r3, r3, 255
}
200155c0:	10330000 	addk	r1, r19, r0
200155c4:	ea610004 	lwi	r19, r1, 4
200155c8:	30210008 	addik	r1, r1, 8
200155cc:	b60f0008 	rtsd	r15, 8
200155d0:	80000000 	or	r0, r0, r0

200155d4 <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200155d4:	3021fff8 	addik	r1, r1, -8
200155d8:	fa610004 	swi	r19, r1, 4
200155dc:	12610000 	addk	r19, r1, r0
200155e0:	f8b3000c 	swi	r5, r19, 12
200155e4:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200155e8:	e873000c 	lwi	r3, r19, 12
200155ec:	e8630010 	lwi	r3, r3, 16
200155f0:	e8830000 	lwi	r4, r3, 0
200155f4:	e873000c 	lwi	r3, r19, 12
200155f8:	e8a3000c 	lwi	r5, r3, 12
200155fc:	e8730010 	lwi	r3, r19, 16
20015600:	64630402 	bslli	r3, r3, 2
20015604:	10651800 	addk	r3, r5, r3
20015608:	e8630000 	lwi	r3, r3, 0
2001560c:	14632000 	rsubk	r3, r3, r4
}
20015610:	10330000 	addk	r1, r19, r0
20015614:	ea610004 	lwi	r19, r1, 4
20015618:	30210008 	addik	r1, r1, 8
2001561c:	b60f0008 	rtsd	r15, 8
20015620:	80000000 	or	r0, r0, r0

20015624 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20015624:	3021fff4 	addik	r1, r1, -12
20015628:	fa610008 	swi	r19, r1, 8
2001562c:	12610000 	addk	r19, r1, r0
20015630:	f8b30010 	swi	r5, r19, 16
20015634:	f8d30014 	swi	r6, r19, 20
20015638:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001563c:	f8130004 	swi	r0, r19, 4
20015640:	b800005c 	bri	92		// 2001569c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20015644:	e8730010 	lwi	r3, r19, 16
20015648:	e8830000 	lwi	r4, r3, 0
2001564c:	e8730010 	lwi	r3, r19, 16
20015650:	e8a3000c 	lwi	r5, r3, 12
20015654:	e8730004 	lwi	r3, r19, 4
20015658:	64630402 	bslli	r3, r3, 2
2001565c:	10651800 	addk	r3, r5, r3
20015660:	e8a30000 	lwi	r5, r3, 0
20015664:	e8730010 	lwi	r3, r19, 16
20015668:	e8630010 	lwi	r3, r3, 16
2001566c:	e8630000 	lwi	r3, r3, 0
20015670:	14632800 	rsubk	r3, r3, r5
20015674:	10641800 	addk	r3, r4, r3
20015678:	30830001 	addik	r4, r3, 1
2001567c:	e8730018 	lwi	r3, r19, 24
20015680:	16441803 	cmpu	r18, r4, r3
20015684:	bc52000c 	blti	r18, 12		// 20015690
            return 0;
20015688:	10600000 	addk	r3, r0, r0
2001568c:	b8000024 	bri	36		// 200156b0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20015690:	e8730004 	lwi	r3, r19, 4
20015694:	30630001 	addik	r3, r3, 1
20015698:	f8730004 	swi	r3, r19, 4
2001569c:	e8930004 	lwi	r4, r19, 4
200156a0:	e8730014 	lwi	r3, r19, 20
200156a4:	16432003 	cmpu	r18, r3, r4
200156a8:	bc52ff9c 	blti	r18, -100		// 20015644
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200156ac:	30600001 	addik	r3, r0, 1
}
200156b0:	10330000 	addk	r1, r19, r0
200156b4:	ea610008 	lwi	r19, r1, 8
200156b8:	3021000c 	addik	r1, r1, 12
200156bc:	b60f0008 	rtsd	r15, 8
200156c0:	80000000 	or	r0, r0, r0

200156c4 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200156c4:	3021ffec 	addik	r1, r1, -20
200156c8:	fa610010 	swi	r19, r1, 16
200156cc:	12610000 	addk	r19, r1, r0
200156d0:	f8b30018 	swi	r5, r19, 24
200156d4:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200156d8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200156dc:	f8130004 	swi	r0, r19, 4
200156e0:	b8000054 	bri	84		// 20015734
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200156e4:	e8730018 	lwi	r3, r19, 24
200156e8:	e8630010 	lwi	r3, r3, 16
200156ec:	e8830000 	lwi	r4, r3, 0
200156f0:	e8730018 	lwi	r3, r19, 24
200156f4:	e8a3000c 	lwi	r5, r3, 12
200156f8:	e8730004 	lwi	r3, r19, 4
200156fc:	64630402 	bslli	r3, r3, 2
20015700:	10651800 	addk	r3, r5, r3
20015704:	e8630000 	lwi	r3, r3, 0
20015708:	14632000 	rsubk	r3, r3, r4
2001570c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20015710:	e8930008 	lwi	r4, r19, 8
20015714:	e873000c 	lwi	r3, r19, 12
20015718:	16441803 	cmpu	r18, r4, r3
2001571c:	bcb20008 	bgei	r18, 8		// 20015724
20015720:	10640000 	addk	r3, r4, r0
20015724:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20015728:	e8730004 	lwi	r3, r19, 4
2001572c:	30630001 	addik	r3, r3, 1
20015730:	f8730004 	swi	r3, r19, 4
20015734:	e8930004 	lwi	r4, r19, 4
20015738:	e873001c 	lwi	r3, r19, 28
2001573c:	16432003 	cmpu	r18, r3, r4
20015740:	bc52ffa4 	blti	r18, -92		// 200156e4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20015744:	e8730018 	lwi	r3, r19, 24
20015748:	e8830000 	lwi	r4, r3, 0
2001574c:	e8730008 	lwi	r3, r19, 8
20015750:	14632000 	rsubk	r3, r3, r4
}
20015754:	10330000 	addk	r1, r19, r0
20015758:	ea610010 	lwi	r19, r1, 16
2001575c:	30210014 	addik	r1, r1, 20
20015760:	b60f0008 	rtsd	r15, 8
20015764:	80000000 	or	r0, r0, r0

20015768 <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20015768:	3021fff4 	addik	r1, r1, -12
2001576c:	fa610008 	swi	r19, r1, 8
20015770:	12610000 	addk	r19, r1, r0
20015774:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20015778:	e8730010 	lwi	r3, r19, 16
2001577c:	e8630010 	lwi	r3, r3, 16
20015780:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20015784:	f8130004 	swi	r0, r19, 4
20015788:	b8000028 	bri	40		// 200157b0
        fifo->read_inds[i] = 0;
2001578c:	e8730010 	lwi	r3, r19, 16
20015790:	e883000c 	lwi	r4, r3, 12
20015794:	e8730004 	lwi	r3, r19, 4
20015798:	64630402 	bslli	r3, r3, 2
2001579c:	10641800 	addk	r3, r4, r3
200157a0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200157a4:	e8730004 	lwi	r3, r19, 4
200157a8:	30630001 	addik	r3, r3, 1
200157ac:	f8730004 	swi	r3, r19, 4
200157b0:	e8730010 	lwi	r3, r19, 16
200157b4:	e8830008 	lwi	r4, r3, 8
200157b8:	e8730004 	lwi	r3, r19, 4
200157bc:	16441803 	cmpu	r18, r4, r3
200157c0:	bc52ffcc 	blti	r18, -52		// 2001578c
        fifo->read_inds[i] = 0;
    }
}
200157c4:	10330000 	addk	r1, r19, r0
200157c8:	ea610008 	lwi	r19, r1, 8
200157cc:	3021000c 	addik	r1, r1, 12
200157d0:	b60f0008 	rtsd	r15, 8
200157d4:	80000000 	or	r0, r0, r0

200157d8 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200157d8:	3021fff4 	addik	r1, r1, -12
200157dc:	fa610008 	swi	r19, r1, 8
200157e0:	12610000 	addk	r19, r1, r0
200157e4:	f8b30010 	swi	r5, r19, 16
200157e8:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200157ec:	e8730010 	lwi	r3, r19, 16
200157f0:	e8830004 	lwi	r4, r3, 4
200157f4:	e8730010 	lwi	r3, r19, 16
200157f8:	e8a3000c 	lwi	r5, r3, 12
200157fc:	e8730014 	lwi	r3, r19, 20
20015800:	64630402 	bslli	r3, r3, 2
20015804:	10651800 	addk	r3, r5, r3
20015808:	e8a30000 	lwi	r5, r3, 0
2001580c:	e8730010 	lwi	r3, r19, 16
20015810:	e8630000 	lwi	r3, r3, 0
20015814:	3063ffff 	addik	r3, r3, -1
20015818:	84651800 	and	r3, r5, r3
2001581c:	64630402 	bslli	r3, r3, 2
20015820:	10641800 	addk	r3, r4, r3
20015824:	e8630000 	lwi	r3, r3, 0
20015828:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2001582c:	e8730010 	lwi	r3, r19, 16
20015830:	e883000c 	lwi	r4, r3, 12
20015834:	e8730014 	lwi	r3, r19, 20
20015838:	64630402 	bslli	r3, r3, 2
2001583c:	10641800 	addk	r3, r4, r3
20015840:	e8830000 	lwi	r4, r3, 0
20015844:	30840001 	addik	r4, r4, 1
20015848:	f8830000 	swi	r4, r3, 0
    return value;
2001584c:	e8730004 	lwi	r3, r19, 4
}
20015850:	10330000 	addk	r1, r19, r0
20015854:	ea610008 	lwi	r19, r1, 8
20015858:	3021000c 	addik	r1, r1, 12
2001585c:	b60f0008 	rtsd	r15, 8
20015860:	80000000 	or	r0, r0, r0

20015864 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20015864:	3021fff8 	addik	r1, r1, -8
20015868:	fa610004 	swi	r19, r1, 4
2001586c:	12610000 	addk	r19, r1, r0
20015870:	f8b3000c 	swi	r5, r19, 12
20015874:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20015878:	e873000c 	lwi	r3, r19, 12
2001587c:	e8830004 	lwi	r4, r3, 4
20015880:	e873000c 	lwi	r3, r19, 12
20015884:	e8630010 	lwi	r3, r3, 16
20015888:	e8a30000 	lwi	r5, r3, 0
2001588c:	e873000c 	lwi	r3, r19, 12
20015890:	e8630000 	lwi	r3, r3, 0
20015894:	3063ffff 	addik	r3, r3, -1
20015898:	84651800 	and	r3, r5, r3
2001589c:	64630402 	bslli	r3, r3, 2
200158a0:	10641800 	addk	r3, r4, r3
200158a4:	e8930010 	lwi	r4, r19, 16
200158a8:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
200158ac:	e873000c 	lwi	r3, r19, 12
200158b0:	e8630010 	lwi	r3, r3, 16
200158b4:	e8830000 	lwi	r4, r3, 0
200158b8:	30840001 	addik	r4, r4, 1
200158bc:	f8830000 	swi	r4, r3, 0
}
200158c0:	10330000 	addk	r1, r19, r0
200158c4:	ea610004 	lwi	r19, r1, 4
200158c8:	30210008 	addik	r1, r1, 8
200158cc:	b60f0008 	rtsd	r15, 8
200158d0:	80000000 	or	r0, r0, r0

200158d4 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200158d4:	3021fff8 	addik	r1, r1, -8
200158d8:	fa610004 	swi	r19, r1, 4
200158dc:	12610000 	addk	r19, r1, r0
200158e0:	f8b3000c 	swi	r5, r19, 12
200158e4:	f8d30010 	swi	r6, r19, 16
200158e8:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200158ec:	e873000c 	lwi	r3, r19, 12
200158f0:	e8630010 	lwi	r3, r3, 16
200158f4:	e8830000 	lwi	r4, r3, 0
200158f8:	e873000c 	lwi	r3, r19, 12
200158fc:	e8a3000c 	lwi	r5, r3, 12
20015900:	e8730010 	lwi	r3, r19, 16
20015904:	64630402 	bslli	r3, r3, 2
20015908:	10651800 	addk	r3, r5, r3
2001590c:	e8630000 	lwi	r3, r3, 0
20015910:	14a32000 	rsubk	r5, r3, r4
20015914:	30600001 	addik	r3, r0, 1
20015918:	e8930014 	lwi	r4, r19, 20
2001591c:	16442803 	cmpu	r18, r4, r5
20015920:	bcb20008 	bgei	r18, 8		// 20015928
20015924:	10600000 	addk	r3, r0, r0
20015928:	a46300ff 	andi	r3, r3, 255
}
2001592c:	10330000 	addk	r1, r19, r0
20015930:	ea610004 	lwi	r19, r1, 4
20015934:	30210008 	addik	r1, r1, 8
20015938:	b60f0008 	rtsd	r15, 8
2001593c:	80000000 	or	r0, r0, r0

20015940 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20015940:	3021fff8 	addik	r1, r1, -8
20015944:	fa610004 	swi	r19, r1, 4
20015948:	12610000 	addk	r19, r1, r0
2001594c:	f8b3000c 	swi	r5, r19, 12
20015950:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20015954:	e873000c 	lwi	r3, r19, 12
20015958:	e8630010 	lwi	r3, r3, 16
2001595c:	e8830000 	lwi	r4, r3, 0
20015960:	e873000c 	lwi	r3, r19, 12
20015964:	e8a3000c 	lwi	r5, r3, 12
20015968:	e8730010 	lwi	r3, r19, 16
2001596c:	64630402 	bslli	r3, r3, 2
20015970:	10651800 	addk	r3, r5, r3
20015974:	e8630000 	lwi	r3, r3, 0
20015978:	14632000 	rsubk	r3, r3, r4
}
2001597c:	10330000 	addk	r1, r19, r0
20015980:	ea610004 	lwi	r19, r1, 4
20015984:	30210008 	addik	r1, r1, 8
20015988:	b60f0008 	rtsd	r15, 8
2001598c:	80000000 	or	r0, r0, r0

20015990 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20015990:	3021fff4 	addik	r1, r1, -12
20015994:	fa610008 	swi	r19, r1, 8
20015998:	12610000 	addk	r19, r1, r0
2001599c:	f8b30010 	swi	r5, r19, 16
200159a0:	f8d30014 	swi	r6, r19, 20
200159a4:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200159a8:	f8130004 	swi	r0, r19, 4
200159ac:	b800005c 	bri	92		// 20015a08
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200159b0:	e8730010 	lwi	r3, r19, 16
200159b4:	e8830000 	lwi	r4, r3, 0
200159b8:	e8730010 	lwi	r3, r19, 16
200159bc:	e8a3000c 	lwi	r5, r3, 12
200159c0:	e8730004 	lwi	r3, r19, 4
200159c4:	64630402 	bslli	r3, r3, 2
200159c8:	10651800 	addk	r3, r5, r3
200159cc:	e8a30000 	lwi	r5, r3, 0
200159d0:	e8730010 	lwi	r3, r19, 16
200159d4:	e8630010 	lwi	r3, r3, 16
200159d8:	e8630000 	lwi	r3, r3, 0
200159dc:	14632800 	rsubk	r3, r3, r5
200159e0:	10641800 	addk	r3, r4, r3
200159e4:	30830001 	addik	r4, r3, 1
200159e8:	e8730018 	lwi	r3, r19, 24
200159ec:	16441803 	cmpu	r18, r4, r3
200159f0:	bc52000c 	blti	r18, 12		// 200159fc
            return 0;
200159f4:	10600000 	addk	r3, r0, r0
200159f8:	b8000024 	bri	36		// 20015a1c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200159fc:	e8730004 	lwi	r3, r19, 4
20015a00:	30630001 	addik	r3, r3, 1
20015a04:	f8730004 	swi	r3, r19, 4
20015a08:	e8930004 	lwi	r4, r19, 4
20015a0c:	e8730014 	lwi	r3, r19, 20
20015a10:	16432003 	cmpu	r18, r3, r4
20015a14:	bc52ff9c 	blti	r18, -100		// 200159b0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20015a18:	30600001 	addik	r3, r0, 1
}
20015a1c:	10330000 	addk	r1, r19, r0
20015a20:	ea610008 	lwi	r19, r1, 8
20015a24:	3021000c 	addik	r1, r1, 12
20015a28:	b60f0008 	rtsd	r15, 8
20015a2c:	80000000 	or	r0, r0, r0

20015a30 <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20015a30:	3021ffec 	addik	r1, r1, -20
20015a34:	fa610010 	swi	r19, r1, 16
20015a38:	12610000 	addk	r19, r1, r0
20015a3c:	f8b30018 	swi	r5, r19, 24
20015a40:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20015a44:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20015a48:	f8130004 	swi	r0, r19, 4
20015a4c:	b8000054 	bri	84		// 20015aa0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20015a50:	e8730018 	lwi	r3, r19, 24
20015a54:	e8630010 	lwi	r3, r3, 16
20015a58:	e8830000 	lwi	r4, r3, 0
20015a5c:	e8730018 	lwi	r3, r19, 24
20015a60:	e8a3000c 	lwi	r5, r3, 12
20015a64:	e8730004 	lwi	r3, r19, 4
20015a68:	64630402 	bslli	r3, r3, 2
20015a6c:	10651800 	addk	r3, r5, r3
20015a70:	e8630000 	lwi	r3, r3, 0
20015a74:	14632000 	rsubk	r3, r3, r4
20015a78:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20015a7c:	e8930008 	lwi	r4, r19, 8
20015a80:	e873000c 	lwi	r3, r19, 12
20015a84:	16441803 	cmpu	r18, r4, r3
20015a88:	bcb20008 	bgei	r18, 8		// 20015a90
20015a8c:	10640000 	addk	r3, r4, r0
20015a90:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20015a94:	e8730004 	lwi	r3, r19, 4
20015a98:	30630001 	addik	r3, r3, 1
20015a9c:	f8730004 	swi	r3, r19, 4
20015aa0:	e8930004 	lwi	r4, r19, 4
20015aa4:	e873001c 	lwi	r3, r19, 28
20015aa8:	16432003 	cmpu	r18, r3, r4
20015aac:	bc52ffa4 	blti	r18, -92		// 20015a50
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20015ab0:	e8730018 	lwi	r3, r19, 24
20015ab4:	e8830000 	lwi	r4, r3, 0
20015ab8:	e8730008 	lwi	r3, r19, 8
20015abc:	14632000 	rsubk	r3, r3, r4
}
20015ac0:	10330000 	addk	r1, r19, r0
20015ac4:	ea610010 	lwi	r19, r1, 16
20015ac8:	30210014 	addik	r1, r1, 20
20015acc:	b60f0008 	rtsd	r15, 8
20015ad0:	80000000 	or	r0, r0, r0

20015ad4 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20015ad4:	3021fff4 	addik	r1, r1, -12
20015ad8:	fa610008 	swi	r19, r1, 8
20015adc:	12610000 	addk	r19, r1, r0
20015ae0:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20015ae4:	e8730010 	lwi	r3, r19, 16
20015ae8:	e8630010 	lwi	r3, r3, 16
20015aec:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20015af0:	f8130004 	swi	r0, r19, 4
20015af4:	b8000028 	bri	40		// 20015b1c
        fifo->read_inds[i] = 0;
20015af8:	e8730010 	lwi	r3, r19, 16
20015afc:	e883000c 	lwi	r4, r3, 12
20015b00:	e8730004 	lwi	r3, r19, 4
20015b04:	64630402 	bslli	r3, r3, 2
20015b08:	10641800 	addk	r3, r4, r3
20015b0c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20015b10:	e8730004 	lwi	r3, r19, 4
20015b14:	30630001 	addik	r3, r3, 1
20015b18:	f8730004 	swi	r3, r19, 4
20015b1c:	e8730010 	lwi	r3, r19, 16
20015b20:	e8830008 	lwi	r4, r3, 8
20015b24:	e8730004 	lwi	r3, r19, 4
20015b28:	16441803 	cmpu	r18, r4, r3
20015b2c:	bc52ffcc 	blti	r18, -52		// 20015af8
        fifo->read_inds[i] = 0;
    }
}
20015b30:	10330000 	addk	r1, r19, r0
20015b34:	ea610008 	lwi	r19, r1, 8
20015b38:	3021000c 	addik	r1, r1, 12
20015b3c:	b60f0008 	rtsd	r15, 8
20015b40:	80000000 	or	r0, r0, r0

20015b44 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20015b44:	3021fff0 	addik	r1, r1, -16
20015b48:	fa61000c 	swi	r19, r1, 12
20015b4c:	12610000 	addk	r19, r1, r0
20015b50:	f8b30014 	swi	r5, r19, 20
20015b54:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20015b58:	e8730014 	lwi	r3, r19, 20
20015b5c:	e8830004 	lwi	r4, r3, 4
20015b60:	e8730014 	lwi	r3, r19, 20
20015b64:	e8a3000c 	lwi	r5, r3, 12
20015b68:	e8730018 	lwi	r3, r19, 24
20015b6c:	64630402 	bslli	r3, r3, 2
20015b70:	10651800 	addk	r3, r5, r3
20015b74:	e8a30000 	lwi	r5, r3, 0
20015b78:	e8730014 	lwi	r3, r19, 20
20015b7c:	e8630000 	lwi	r3, r3, 0
20015b80:	3063ffff 	addik	r3, r3, -1
20015b84:	84651800 	and	r3, r5, r3
20015b88:	64630403 	bslli	r3, r3, 3
20015b8c:	10641800 	addk	r3, r4, r3
20015b90:	e8830000 	lwi	r4, r3, 0
20015b94:	e8a30004 	lwi	r5, r3, 4
20015b98:	f8930004 	swi	r4, r19, 4
20015b9c:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20015ba0:	e8730014 	lwi	r3, r19, 20
20015ba4:	e883000c 	lwi	r4, r3, 12
20015ba8:	e8730018 	lwi	r3, r19, 24
20015bac:	64630402 	bslli	r3, r3, 2
20015bb0:	10641800 	addk	r3, r4, r3
20015bb4:	e8830000 	lwi	r4, r3, 0
20015bb8:	30840001 	addik	r4, r4, 1
20015bbc:	f8830000 	swi	r4, r3, 0
    return value;
20015bc0:	e8930004 	lwi	r4, r19, 4
20015bc4:	e8b30008 	lwi	r5, r19, 8
}
20015bc8:	10640000 	addk	r3, r4, r0
20015bcc:	10850000 	addk	r4, r5, r0
20015bd0:	10330000 	addk	r1, r19, r0
20015bd4:	ea61000c 	lwi	r19, r1, 12
20015bd8:	30210010 	addik	r1, r1, 16
20015bdc:	b60f0008 	rtsd	r15, 8
20015be0:	80000000 	or	r0, r0, r0

20015be4 <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20015be4:	3021fff8 	addik	r1, r1, -8
20015be8:	fa610004 	swi	r19, r1, 4
20015bec:	12610000 	addk	r19, r1, r0
20015bf0:	f8b3000c 	swi	r5, r19, 12
20015bf4:	f8d30010 	swi	r6, r19, 16
20015bf8:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20015bfc:	e873000c 	lwi	r3, r19, 12
20015c00:	e8830004 	lwi	r4, r3, 4
20015c04:	e873000c 	lwi	r3, r19, 12
20015c08:	e8630010 	lwi	r3, r3, 16
20015c0c:	e8a30000 	lwi	r5, r3, 0
20015c10:	e873000c 	lwi	r3, r19, 12
20015c14:	e8630000 	lwi	r3, r3, 0
20015c18:	3063ffff 	addik	r3, r3, -1
20015c1c:	84651800 	and	r3, r5, r3
20015c20:	64630403 	bslli	r3, r3, 3
20015c24:	10641800 	addk	r3, r4, r3
20015c28:	e8930010 	lwi	r4, r19, 16
20015c2c:	e8b30014 	lwi	r5, r19, 20
20015c30:	f8830000 	swi	r4, r3, 0
20015c34:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20015c38:	e873000c 	lwi	r3, r19, 12
20015c3c:	e8630010 	lwi	r3, r3, 16
20015c40:	e8830000 	lwi	r4, r3, 0
20015c44:	30840001 	addik	r4, r4, 1
20015c48:	f8830000 	swi	r4, r3, 0
}
20015c4c:	10330000 	addk	r1, r19, r0
20015c50:	ea610004 	lwi	r19, r1, 4
20015c54:	30210008 	addik	r1, r1, 8
20015c58:	b60f0008 	rtsd	r15, 8
20015c5c:	80000000 	or	r0, r0, r0

20015c60 <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20015c60:	3021fff8 	addik	r1, r1, -8
20015c64:	fa610004 	swi	r19, r1, 4
20015c68:	12610000 	addk	r19, r1, r0
20015c6c:	f8b3000c 	swi	r5, r19, 12
20015c70:	f8d30010 	swi	r6, r19, 16
20015c74:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20015c78:	e873000c 	lwi	r3, r19, 12
20015c7c:	e8630010 	lwi	r3, r3, 16
20015c80:	e8830000 	lwi	r4, r3, 0
20015c84:	e873000c 	lwi	r3, r19, 12
20015c88:	e8a3000c 	lwi	r5, r3, 12
20015c8c:	e8730010 	lwi	r3, r19, 16
20015c90:	64630402 	bslli	r3, r3, 2
20015c94:	10651800 	addk	r3, r5, r3
20015c98:	e8630000 	lwi	r3, r3, 0
20015c9c:	14a32000 	rsubk	r5, r3, r4
20015ca0:	30600001 	addik	r3, r0, 1
20015ca4:	e8930014 	lwi	r4, r19, 20
20015ca8:	16442803 	cmpu	r18, r4, r5
20015cac:	bcb20008 	bgei	r18, 8		// 20015cb4
20015cb0:	10600000 	addk	r3, r0, r0
20015cb4:	a46300ff 	andi	r3, r3, 255
}
20015cb8:	10330000 	addk	r1, r19, r0
20015cbc:	ea610004 	lwi	r19, r1, 4
20015cc0:	30210008 	addik	r1, r1, 8
20015cc4:	b60f0008 	rtsd	r15, 8
20015cc8:	80000000 	or	r0, r0, r0

20015ccc <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20015ccc:	3021fff8 	addik	r1, r1, -8
20015cd0:	fa610004 	swi	r19, r1, 4
20015cd4:	12610000 	addk	r19, r1, r0
20015cd8:	f8b3000c 	swi	r5, r19, 12
20015cdc:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20015ce0:	e873000c 	lwi	r3, r19, 12
20015ce4:	e8630010 	lwi	r3, r3, 16
20015ce8:	e8830000 	lwi	r4, r3, 0
20015cec:	e873000c 	lwi	r3, r19, 12
20015cf0:	e8a3000c 	lwi	r5, r3, 12
20015cf4:	e8730010 	lwi	r3, r19, 16
20015cf8:	64630402 	bslli	r3, r3, 2
20015cfc:	10651800 	addk	r3, r5, r3
20015d00:	e8630000 	lwi	r3, r3, 0
20015d04:	14632000 	rsubk	r3, r3, r4
}
20015d08:	10330000 	addk	r1, r19, r0
20015d0c:	ea610004 	lwi	r19, r1, 4
20015d10:	30210008 	addik	r1, r1, 8
20015d14:	b60f0008 	rtsd	r15, 8
20015d18:	80000000 	or	r0, r0, r0

20015d1c <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20015d1c:	3021fff4 	addik	r1, r1, -12
20015d20:	fa610008 	swi	r19, r1, 8
20015d24:	12610000 	addk	r19, r1, r0
20015d28:	f8b30010 	swi	r5, r19, 16
20015d2c:	f8d30014 	swi	r6, r19, 20
20015d30:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20015d34:	f8130004 	swi	r0, r19, 4
20015d38:	b800005c 	bri	92		// 20015d94
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20015d3c:	e8730010 	lwi	r3, r19, 16
20015d40:	e8830000 	lwi	r4, r3, 0
20015d44:	e8730010 	lwi	r3, r19, 16
20015d48:	e8a3000c 	lwi	r5, r3, 12
20015d4c:	e8730004 	lwi	r3, r19, 4
20015d50:	64630402 	bslli	r3, r3, 2
20015d54:	10651800 	addk	r3, r5, r3
20015d58:	e8a30000 	lwi	r5, r3, 0
20015d5c:	e8730010 	lwi	r3, r19, 16
20015d60:	e8630010 	lwi	r3, r3, 16
20015d64:	e8630000 	lwi	r3, r3, 0
20015d68:	14632800 	rsubk	r3, r3, r5
20015d6c:	10641800 	addk	r3, r4, r3
20015d70:	30830001 	addik	r4, r3, 1
20015d74:	e8730018 	lwi	r3, r19, 24
20015d78:	16441803 	cmpu	r18, r4, r3
20015d7c:	bc52000c 	blti	r18, 12		// 20015d88
            return 0;
20015d80:	10600000 	addk	r3, r0, r0
20015d84:	b8000024 	bri	36		// 20015da8
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20015d88:	e8730004 	lwi	r3, r19, 4
20015d8c:	30630001 	addik	r3, r3, 1
20015d90:	f8730004 	swi	r3, r19, 4
20015d94:	e8930004 	lwi	r4, r19, 4
20015d98:	e8730014 	lwi	r3, r19, 20
20015d9c:	16432003 	cmpu	r18, r3, r4
20015da0:	bc52ff9c 	blti	r18, -100		// 20015d3c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20015da4:	30600001 	addik	r3, r0, 1
}
20015da8:	10330000 	addk	r1, r19, r0
20015dac:	ea610008 	lwi	r19, r1, 8
20015db0:	3021000c 	addik	r1, r1, 12
20015db4:	b60f0008 	rtsd	r15, 8
20015db8:	80000000 	or	r0, r0, r0

20015dbc <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20015dbc:	3021ffec 	addik	r1, r1, -20
20015dc0:	fa610010 	swi	r19, r1, 16
20015dc4:	12610000 	addk	r19, r1, r0
20015dc8:	f8b30018 	swi	r5, r19, 24
20015dcc:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20015dd0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20015dd4:	f8130004 	swi	r0, r19, 4
20015dd8:	b8000054 	bri	84		// 20015e2c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20015ddc:	e8730018 	lwi	r3, r19, 24
20015de0:	e8630010 	lwi	r3, r3, 16
20015de4:	e8830000 	lwi	r4, r3, 0
20015de8:	e8730018 	lwi	r3, r19, 24
20015dec:	e8a3000c 	lwi	r5, r3, 12
20015df0:	e8730004 	lwi	r3, r19, 4
20015df4:	64630402 	bslli	r3, r3, 2
20015df8:	10651800 	addk	r3, r5, r3
20015dfc:	e8630000 	lwi	r3, r3, 0
20015e00:	14632000 	rsubk	r3, r3, r4
20015e04:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20015e08:	e8930008 	lwi	r4, r19, 8
20015e0c:	e873000c 	lwi	r3, r19, 12
20015e10:	16441803 	cmpu	r18, r4, r3
20015e14:	bcb20008 	bgei	r18, 8		// 20015e1c
20015e18:	10640000 	addk	r3, r4, r0
20015e1c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20015e20:	e8730004 	lwi	r3, r19, 4
20015e24:	30630001 	addik	r3, r3, 1
20015e28:	f8730004 	swi	r3, r19, 4
20015e2c:	e8930004 	lwi	r4, r19, 4
20015e30:	e873001c 	lwi	r3, r19, 28
20015e34:	16432003 	cmpu	r18, r3, r4
20015e38:	bc52ffa4 	blti	r18, -92		// 20015ddc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20015e3c:	e8730018 	lwi	r3, r19, 24
20015e40:	e8830000 	lwi	r4, r3, 0
20015e44:	e8730008 	lwi	r3, r19, 8
20015e48:	14632000 	rsubk	r3, r3, r4
}
20015e4c:	10330000 	addk	r1, r19, r0
20015e50:	ea610010 	lwi	r19, r1, 16
20015e54:	30210014 	addik	r1, r1, 20
20015e58:	b60f0008 	rtsd	r15, 8
20015e5c:	80000000 	or	r0, r0, r0

20015e60 <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20015e60:	3021fff4 	addik	r1, r1, -12
20015e64:	fa610008 	swi	r19, r1, 8
20015e68:	12610000 	addk	r19, r1, r0
20015e6c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20015e70:	e8730010 	lwi	r3, r19, 16
20015e74:	e8630010 	lwi	r3, r3, 16
20015e78:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20015e7c:	f8130004 	swi	r0, r19, 4
20015e80:	b8000028 	bri	40		// 20015ea8
        fifo->read_inds[i] = 0;
20015e84:	e8730010 	lwi	r3, r19, 16
20015e88:	e883000c 	lwi	r4, r3, 12
20015e8c:	e8730004 	lwi	r3, r19, 4
20015e90:	64630402 	bslli	r3, r3, 2
20015e94:	10641800 	addk	r3, r4, r3
20015e98:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20015e9c:	e8730004 	lwi	r3, r19, 4
20015ea0:	30630001 	addik	r3, r3, 1
20015ea4:	f8730004 	swi	r3, r19, 4
20015ea8:	e8730010 	lwi	r3, r19, 16
20015eac:	e8830008 	lwi	r4, r3, 8
20015eb0:	e8730004 	lwi	r3, r19, 4
20015eb4:	16441803 	cmpu	r18, r4, r3
20015eb8:	bc52ffcc 	blti	r18, -52		// 20015e84
        fifo->read_inds[i] = 0;
    }
}
20015ebc:	10330000 	addk	r1, r19, r0
20015ec0:	ea610008 	lwi	r19, r1, 8
20015ec4:	3021000c 	addik	r1, r1, 12
20015ec8:	b60f0008 	rtsd	r15, 8
20015ecc:	80000000 	or	r0, r0, r0

20015ed0 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20015ed0:	3021fff4 	addik	r1, r1, -12
20015ed4:	fa610008 	swi	r19, r1, 8
20015ed8:	12610000 	addk	r19, r1, r0
20015edc:	f8b30010 	swi	r5, r19, 16
20015ee0:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20015ee4:	e8730010 	lwi	r3, r19, 16
20015ee8:	e8830004 	lwi	r4, r3, 4
20015eec:	e8730010 	lwi	r3, r19, 16
20015ef0:	e8a3000c 	lwi	r5, r3, 12
20015ef4:	e8730014 	lwi	r3, r19, 20
20015ef8:	64630402 	bslli	r3, r3, 2
20015efc:	10651800 	addk	r3, r5, r3
20015f00:	e8a30000 	lwi	r5, r3, 0
20015f04:	e8730010 	lwi	r3, r19, 16
20015f08:	e8630000 	lwi	r3, r3, 0
20015f0c:	3063ffff 	addik	r3, r3, -1
20015f10:	84651800 	and	r3, r5, r3
20015f14:	10641800 	addk	r3, r4, r3
20015f18:	e0630000 	lbui	r3, r3, 0
20015f1c:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20015f20:	e8730010 	lwi	r3, r19, 16
20015f24:	e883000c 	lwi	r4, r3, 12
20015f28:	e8730014 	lwi	r3, r19, 20
20015f2c:	64630402 	bslli	r3, r3, 2
20015f30:	10641800 	addk	r3, r4, r3
20015f34:	e8830000 	lwi	r4, r3, 0
20015f38:	30840001 	addik	r4, r4, 1
20015f3c:	f8830000 	swi	r4, r3, 0
    return value;
20015f40:	e0730004 	lbui	r3, r19, 4
}
20015f44:	10330000 	addk	r1, r19, r0
20015f48:	ea610008 	lwi	r19, r1, 8
20015f4c:	3021000c 	addik	r1, r1, 12
20015f50:	b60f0008 	rtsd	r15, 8
20015f54:	80000000 	or	r0, r0, r0

20015f58 <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20015f58:	3021fff8 	addik	r1, r1, -8
20015f5c:	fa610004 	swi	r19, r1, 4
20015f60:	12610000 	addk	r19, r1, r0
20015f64:	f8b3000c 	swi	r5, r19, 12
20015f68:	10660000 	addk	r3, r6, r0
20015f6c:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20015f70:	e873000c 	lwi	r3, r19, 12
20015f74:	e8830004 	lwi	r4, r3, 4
20015f78:	e873000c 	lwi	r3, r19, 12
20015f7c:	e8630010 	lwi	r3, r3, 16
20015f80:	e8a30000 	lwi	r5, r3, 0
20015f84:	e873000c 	lwi	r3, r19, 12
20015f88:	e8630000 	lwi	r3, r3, 0
20015f8c:	3063ffff 	addik	r3, r3, -1
20015f90:	84651800 	and	r3, r5, r3
20015f94:	10641800 	addk	r3, r4, r3
20015f98:	e0930010 	lbui	r4, r19, 16
20015f9c:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20015fa0:	e873000c 	lwi	r3, r19, 12
20015fa4:	e8630010 	lwi	r3, r3, 16
20015fa8:	e8830000 	lwi	r4, r3, 0
20015fac:	30840001 	addik	r4, r4, 1
20015fb0:	f8830000 	swi	r4, r3, 0
}
20015fb4:	10330000 	addk	r1, r19, r0
20015fb8:	ea610004 	lwi	r19, r1, 4
20015fbc:	30210008 	addik	r1, r1, 8
20015fc0:	b60f0008 	rtsd	r15, 8
20015fc4:	80000000 	or	r0, r0, r0

20015fc8 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20015fc8:	3021fff8 	addik	r1, r1, -8
20015fcc:	fa610004 	swi	r19, r1, 4
20015fd0:	12610000 	addk	r19, r1, r0
20015fd4:	f8b3000c 	swi	r5, r19, 12
20015fd8:	f8d30010 	swi	r6, r19, 16
20015fdc:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20015fe0:	e873000c 	lwi	r3, r19, 12
20015fe4:	e8630010 	lwi	r3, r3, 16
20015fe8:	e8830000 	lwi	r4, r3, 0
20015fec:	e873000c 	lwi	r3, r19, 12
20015ff0:	e8a3000c 	lwi	r5, r3, 12
20015ff4:	e8730010 	lwi	r3, r19, 16
20015ff8:	64630402 	bslli	r3, r3, 2
20015ffc:	10651800 	addk	r3, r5, r3
20016000:	e8630000 	lwi	r3, r3, 0
20016004:	14a32000 	rsubk	r5, r3, r4
20016008:	30600001 	addik	r3, r0, 1
2001600c:	e8930014 	lwi	r4, r19, 20
20016010:	16442803 	cmpu	r18, r4, r5
20016014:	bcb20008 	bgei	r18, 8		// 2001601c
20016018:	10600000 	addk	r3, r0, r0
2001601c:	a46300ff 	andi	r3, r3, 255
}
20016020:	10330000 	addk	r1, r19, r0
20016024:	ea610004 	lwi	r19, r1, 4
20016028:	30210008 	addik	r1, r1, 8
2001602c:	b60f0008 	rtsd	r15, 8
20016030:	80000000 	or	r0, r0, r0

20016034 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20016034:	3021fff8 	addik	r1, r1, -8
20016038:	fa610004 	swi	r19, r1, 4
2001603c:	12610000 	addk	r19, r1, r0
20016040:	f8b3000c 	swi	r5, r19, 12
20016044:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20016048:	e873000c 	lwi	r3, r19, 12
2001604c:	e8630010 	lwi	r3, r3, 16
20016050:	e8830000 	lwi	r4, r3, 0
20016054:	e873000c 	lwi	r3, r19, 12
20016058:	e8a3000c 	lwi	r5, r3, 12
2001605c:	e8730010 	lwi	r3, r19, 16
20016060:	64630402 	bslli	r3, r3, 2
20016064:	10651800 	addk	r3, r5, r3
20016068:	e8630000 	lwi	r3, r3, 0
2001606c:	14632000 	rsubk	r3, r3, r4
}
20016070:	10330000 	addk	r1, r19, r0
20016074:	ea610004 	lwi	r19, r1, 4
20016078:	30210008 	addik	r1, r1, 8
2001607c:	b60f0008 	rtsd	r15, 8
20016080:	80000000 	or	r0, r0, r0

20016084 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20016084:	3021fff4 	addik	r1, r1, -12
20016088:	fa610008 	swi	r19, r1, 8
2001608c:	12610000 	addk	r19, r1, r0
20016090:	f8b30010 	swi	r5, r19, 16
20016094:	f8d30014 	swi	r6, r19, 20
20016098:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001609c:	f8130004 	swi	r0, r19, 4
200160a0:	b800005c 	bri	92		// 200160fc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200160a4:	e8730010 	lwi	r3, r19, 16
200160a8:	e8830000 	lwi	r4, r3, 0
200160ac:	e8730010 	lwi	r3, r19, 16
200160b0:	e8a3000c 	lwi	r5, r3, 12
200160b4:	e8730004 	lwi	r3, r19, 4
200160b8:	64630402 	bslli	r3, r3, 2
200160bc:	10651800 	addk	r3, r5, r3
200160c0:	e8a30000 	lwi	r5, r3, 0
200160c4:	e8730010 	lwi	r3, r19, 16
200160c8:	e8630010 	lwi	r3, r3, 16
200160cc:	e8630000 	lwi	r3, r3, 0
200160d0:	14632800 	rsubk	r3, r3, r5
200160d4:	10641800 	addk	r3, r4, r3
200160d8:	30830001 	addik	r4, r3, 1
200160dc:	e8730018 	lwi	r3, r19, 24
200160e0:	16441803 	cmpu	r18, r4, r3
200160e4:	bc52000c 	blti	r18, 12		// 200160f0
            return 0;
200160e8:	10600000 	addk	r3, r0, r0
200160ec:	b8000024 	bri	36		// 20016110
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200160f0:	e8730004 	lwi	r3, r19, 4
200160f4:	30630001 	addik	r3, r3, 1
200160f8:	f8730004 	swi	r3, r19, 4
200160fc:	e8930004 	lwi	r4, r19, 4
20016100:	e8730014 	lwi	r3, r19, 20
20016104:	16432003 	cmpu	r18, r3, r4
20016108:	bc52ff9c 	blti	r18, -100		// 200160a4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001610c:	30600001 	addik	r3, r0, 1
}
20016110:	10330000 	addk	r1, r19, r0
20016114:	ea610008 	lwi	r19, r1, 8
20016118:	3021000c 	addik	r1, r1, 12
2001611c:	b60f0008 	rtsd	r15, 8
20016120:	80000000 	or	r0, r0, r0

20016124 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20016124:	3021ffec 	addik	r1, r1, -20
20016128:	fa610010 	swi	r19, r1, 16
2001612c:	12610000 	addk	r19, r1, r0
20016130:	f8b30018 	swi	r5, r19, 24
20016134:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20016138:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001613c:	f8130004 	swi	r0, r19, 4
20016140:	b8000054 	bri	84		// 20016194
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20016144:	e8730018 	lwi	r3, r19, 24
20016148:	e8630010 	lwi	r3, r3, 16
2001614c:	e8830000 	lwi	r4, r3, 0
20016150:	e8730018 	lwi	r3, r19, 24
20016154:	e8a3000c 	lwi	r5, r3, 12
20016158:	e8730004 	lwi	r3, r19, 4
2001615c:	64630402 	bslli	r3, r3, 2
20016160:	10651800 	addk	r3, r5, r3
20016164:	e8630000 	lwi	r3, r3, 0
20016168:	14632000 	rsubk	r3, r3, r4
2001616c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20016170:	e8930008 	lwi	r4, r19, 8
20016174:	e873000c 	lwi	r3, r19, 12
20016178:	16441803 	cmpu	r18, r4, r3
2001617c:	bcb20008 	bgei	r18, 8		// 20016184
20016180:	10640000 	addk	r3, r4, r0
20016184:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20016188:	e8730004 	lwi	r3, r19, 4
2001618c:	30630001 	addik	r3, r3, 1
20016190:	f8730004 	swi	r3, r19, 4
20016194:	e8930004 	lwi	r4, r19, 4
20016198:	e873001c 	lwi	r3, r19, 28
2001619c:	16432003 	cmpu	r18, r3, r4
200161a0:	bc52ffa4 	blti	r18, -92		// 20016144
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200161a4:	e8730018 	lwi	r3, r19, 24
200161a8:	e8830000 	lwi	r4, r3, 0
200161ac:	e8730008 	lwi	r3, r19, 8
200161b0:	14632000 	rsubk	r3, r3, r4
}
200161b4:	10330000 	addk	r1, r19, r0
200161b8:	ea610010 	lwi	r19, r1, 16
200161bc:	30210014 	addik	r1, r1, 20
200161c0:	b60f0008 	rtsd	r15, 8
200161c4:	80000000 	or	r0, r0, r0

200161c8 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200161c8:	3021fff4 	addik	r1, r1, -12
200161cc:	fa610008 	swi	r19, r1, 8
200161d0:	12610000 	addk	r19, r1, r0
200161d4:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
200161d8:	e8730010 	lwi	r3, r19, 16
200161dc:	e8630010 	lwi	r3, r3, 16
200161e0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200161e4:	f8130004 	swi	r0, r19, 4
200161e8:	b8000028 	bri	40		// 20016210
        fifo->read_inds[i] = 0;
200161ec:	e8730010 	lwi	r3, r19, 16
200161f0:	e883000c 	lwi	r4, r3, 12
200161f4:	e8730004 	lwi	r3, r19, 4
200161f8:	64630402 	bslli	r3, r3, 2
200161fc:	10641800 	addk	r3, r4, r3
20016200:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20016204:	e8730004 	lwi	r3, r19, 4
20016208:	30630001 	addik	r3, r3, 1
2001620c:	f8730004 	swi	r3, r19, 4
20016210:	e8730010 	lwi	r3, r19, 16
20016214:	e8830008 	lwi	r4, r3, 8
20016218:	e8730004 	lwi	r3, r19, 4
2001621c:	16441803 	cmpu	r18, r4, r3
20016220:	bc52ffcc 	blti	r18, -52		// 200161ec
        fifo->read_inds[i] = 0;
    }
}
20016224:	10330000 	addk	r1, r19, r0
20016228:	ea610008 	lwi	r19, r1, 8
2001622c:	3021000c 	addik	r1, r1, 12
20016230:	b60f0008 	rtsd	r15, 8
20016234:	80000000 	or	r0, r0, r0

20016238 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20016238:	3021fff4 	addik	r1, r1, -12
2001623c:	fa610008 	swi	r19, r1, 8
20016240:	12610000 	addk	r19, r1, r0
20016244:	f8b30010 	swi	r5, r19, 16
20016248:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001624c:	e8730010 	lwi	r3, r19, 16
20016250:	e8830004 	lwi	r4, r3, 4
20016254:	e8730010 	lwi	r3, r19, 16
20016258:	e8a3000c 	lwi	r5, r3, 12
2001625c:	e8730014 	lwi	r3, r19, 20
20016260:	64630402 	bslli	r3, r3, 2
20016264:	10651800 	addk	r3, r5, r3
20016268:	e8a30000 	lwi	r5, r3, 0
2001626c:	e8730010 	lwi	r3, r19, 16
20016270:	e8630000 	lwi	r3, r3, 0
20016274:	3063ffff 	addik	r3, r3, -1
20016278:	84651800 	and	r3, r5, r3
2001627c:	10631800 	addk	r3, r3, r3
20016280:	10641800 	addk	r3, r4, r3
20016284:	e4630000 	lhui	r3, r3, 0
20016288:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2001628c:	e8730010 	lwi	r3, r19, 16
20016290:	e883000c 	lwi	r4, r3, 12
20016294:	e8730014 	lwi	r3, r19, 20
20016298:	64630402 	bslli	r3, r3, 2
2001629c:	10641800 	addk	r3, r4, r3
200162a0:	e8830000 	lwi	r4, r3, 0
200162a4:	30840001 	addik	r4, r4, 1
200162a8:	f8830000 	swi	r4, r3, 0
    return value;
200162ac:	e4730004 	lhui	r3, r19, 4
}
200162b0:	10330000 	addk	r1, r19, r0
200162b4:	ea610008 	lwi	r19, r1, 8
200162b8:	3021000c 	addik	r1, r1, 12
200162bc:	b60f0008 	rtsd	r15, 8
200162c0:	80000000 	or	r0, r0, r0

200162c4 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200162c4:	3021fff8 	addik	r1, r1, -8
200162c8:	fa610004 	swi	r19, r1, 4
200162cc:	12610000 	addk	r19, r1, r0
200162d0:	f8b3000c 	swi	r5, r19, 12
200162d4:	10660000 	addk	r3, r6, r0
200162d8:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200162dc:	e873000c 	lwi	r3, r19, 12
200162e0:	e8830004 	lwi	r4, r3, 4
200162e4:	e873000c 	lwi	r3, r19, 12
200162e8:	e8630010 	lwi	r3, r3, 16
200162ec:	e8a30000 	lwi	r5, r3, 0
200162f0:	e873000c 	lwi	r3, r19, 12
200162f4:	e8630000 	lwi	r3, r3, 0
200162f8:	3063ffff 	addik	r3, r3, -1
200162fc:	84651800 	and	r3, r5, r3
20016300:	10631800 	addk	r3, r3, r3
20016304:	10641800 	addk	r3, r4, r3
20016308:	e4930010 	lhui	r4, r19, 16
2001630c:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20016310:	e873000c 	lwi	r3, r19, 12
20016314:	e8630010 	lwi	r3, r3, 16
20016318:	e8830000 	lwi	r4, r3, 0
2001631c:	30840001 	addik	r4, r4, 1
20016320:	f8830000 	swi	r4, r3, 0
}
20016324:	10330000 	addk	r1, r19, r0
20016328:	ea610004 	lwi	r19, r1, 4
2001632c:	30210008 	addik	r1, r1, 8
20016330:	b60f0008 	rtsd	r15, 8
20016334:	80000000 	or	r0, r0, r0

20016338 <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20016338:	3021fff8 	addik	r1, r1, -8
2001633c:	fa610004 	swi	r19, r1, 4
20016340:	12610000 	addk	r19, r1, r0
20016344:	f8b3000c 	swi	r5, r19, 12
20016348:	f8d30010 	swi	r6, r19, 16
2001634c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20016350:	e873000c 	lwi	r3, r19, 12
20016354:	e8630010 	lwi	r3, r3, 16
20016358:	e8830000 	lwi	r4, r3, 0
2001635c:	e873000c 	lwi	r3, r19, 12
20016360:	e8a3000c 	lwi	r5, r3, 12
20016364:	e8730010 	lwi	r3, r19, 16
20016368:	64630402 	bslli	r3, r3, 2
2001636c:	10651800 	addk	r3, r5, r3
20016370:	e8630000 	lwi	r3, r3, 0
20016374:	14a32000 	rsubk	r5, r3, r4
20016378:	30600001 	addik	r3, r0, 1
2001637c:	e8930014 	lwi	r4, r19, 20
20016380:	16442803 	cmpu	r18, r4, r5
20016384:	bcb20008 	bgei	r18, 8		// 2001638c
20016388:	10600000 	addk	r3, r0, r0
2001638c:	a46300ff 	andi	r3, r3, 255
}
20016390:	10330000 	addk	r1, r19, r0
20016394:	ea610004 	lwi	r19, r1, 4
20016398:	30210008 	addik	r1, r1, 8
2001639c:	b60f0008 	rtsd	r15, 8
200163a0:	80000000 	or	r0, r0, r0

200163a4 <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200163a4:	3021fff8 	addik	r1, r1, -8
200163a8:	fa610004 	swi	r19, r1, 4
200163ac:	12610000 	addk	r19, r1, r0
200163b0:	f8b3000c 	swi	r5, r19, 12
200163b4:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200163b8:	e873000c 	lwi	r3, r19, 12
200163bc:	e8630010 	lwi	r3, r3, 16
200163c0:	e8830000 	lwi	r4, r3, 0
200163c4:	e873000c 	lwi	r3, r19, 12
200163c8:	e8a3000c 	lwi	r5, r3, 12
200163cc:	e8730010 	lwi	r3, r19, 16
200163d0:	64630402 	bslli	r3, r3, 2
200163d4:	10651800 	addk	r3, r5, r3
200163d8:	e8630000 	lwi	r3, r3, 0
200163dc:	14632000 	rsubk	r3, r3, r4
}
200163e0:	10330000 	addk	r1, r19, r0
200163e4:	ea610004 	lwi	r19, r1, 4
200163e8:	30210008 	addik	r1, r1, 8
200163ec:	b60f0008 	rtsd	r15, 8
200163f0:	80000000 	or	r0, r0, r0

200163f4 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200163f4:	3021fff4 	addik	r1, r1, -12
200163f8:	fa610008 	swi	r19, r1, 8
200163fc:	12610000 	addk	r19, r1, r0
20016400:	f8b30010 	swi	r5, r19, 16
20016404:	f8d30014 	swi	r6, r19, 20
20016408:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001640c:	f8130004 	swi	r0, r19, 4
20016410:	b800005c 	bri	92		// 2001646c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20016414:	e8730010 	lwi	r3, r19, 16
20016418:	e8830000 	lwi	r4, r3, 0
2001641c:	e8730010 	lwi	r3, r19, 16
20016420:	e8a3000c 	lwi	r5, r3, 12
20016424:	e8730004 	lwi	r3, r19, 4
20016428:	64630402 	bslli	r3, r3, 2
2001642c:	10651800 	addk	r3, r5, r3
20016430:	e8a30000 	lwi	r5, r3, 0
20016434:	e8730010 	lwi	r3, r19, 16
20016438:	e8630010 	lwi	r3, r3, 16
2001643c:	e8630000 	lwi	r3, r3, 0
20016440:	14632800 	rsubk	r3, r3, r5
20016444:	10641800 	addk	r3, r4, r3
20016448:	30830001 	addik	r4, r3, 1
2001644c:	e8730018 	lwi	r3, r19, 24
20016450:	16441803 	cmpu	r18, r4, r3
20016454:	bc52000c 	blti	r18, 12		// 20016460
            return 0;
20016458:	10600000 	addk	r3, r0, r0
2001645c:	b8000024 	bri	36		// 20016480
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20016460:	e8730004 	lwi	r3, r19, 4
20016464:	30630001 	addik	r3, r3, 1
20016468:	f8730004 	swi	r3, r19, 4
2001646c:	e8930004 	lwi	r4, r19, 4
20016470:	e8730014 	lwi	r3, r19, 20
20016474:	16432003 	cmpu	r18, r3, r4
20016478:	bc52ff9c 	blti	r18, -100		// 20016414
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001647c:	30600001 	addik	r3, r0, 1
}
20016480:	10330000 	addk	r1, r19, r0
20016484:	ea610008 	lwi	r19, r1, 8
20016488:	3021000c 	addik	r1, r1, 12
2001648c:	b60f0008 	rtsd	r15, 8
20016490:	80000000 	or	r0, r0, r0

20016494 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20016494:	3021ffec 	addik	r1, r1, -20
20016498:	fa610010 	swi	r19, r1, 16
2001649c:	12610000 	addk	r19, r1, r0
200164a0:	f8b30018 	swi	r5, r19, 24
200164a4:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200164a8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200164ac:	f8130004 	swi	r0, r19, 4
200164b0:	b8000054 	bri	84		// 20016504
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200164b4:	e8730018 	lwi	r3, r19, 24
200164b8:	e8630010 	lwi	r3, r3, 16
200164bc:	e8830000 	lwi	r4, r3, 0
200164c0:	e8730018 	lwi	r3, r19, 24
200164c4:	e8a3000c 	lwi	r5, r3, 12
200164c8:	e8730004 	lwi	r3, r19, 4
200164cc:	64630402 	bslli	r3, r3, 2
200164d0:	10651800 	addk	r3, r5, r3
200164d4:	e8630000 	lwi	r3, r3, 0
200164d8:	14632000 	rsubk	r3, r3, r4
200164dc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200164e0:	e8930008 	lwi	r4, r19, 8
200164e4:	e873000c 	lwi	r3, r19, 12
200164e8:	16441803 	cmpu	r18, r4, r3
200164ec:	bcb20008 	bgei	r18, 8		// 200164f4
200164f0:	10640000 	addk	r3, r4, r0
200164f4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200164f8:	e8730004 	lwi	r3, r19, 4
200164fc:	30630001 	addik	r3, r3, 1
20016500:	f8730004 	swi	r3, r19, 4
20016504:	e8930004 	lwi	r4, r19, 4
20016508:	e873001c 	lwi	r3, r19, 28
2001650c:	16432003 	cmpu	r18, r3, r4
20016510:	bc52ffa4 	blti	r18, -92		// 200164b4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20016514:	e8730018 	lwi	r3, r19, 24
20016518:	e8830000 	lwi	r4, r3, 0
2001651c:	e8730008 	lwi	r3, r19, 8
20016520:	14632000 	rsubk	r3, r3, r4
}
20016524:	10330000 	addk	r1, r19, r0
20016528:	ea610010 	lwi	r19, r1, 16
2001652c:	30210014 	addik	r1, r1, 20
20016530:	b60f0008 	rtsd	r15, 8
20016534:	80000000 	or	r0, r0, r0

20016538 <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20016538:	3021fff4 	addik	r1, r1, -12
2001653c:	fa610008 	swi	r19, r1, 8
20016540:	12610000 	addk	r19, r1, r0
20016544:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20016548:	e8730010 	lwi	r3, r19, 16
2001654c:	e8630010 	lwi	r3, r3, 16
20016550:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20016554:	f8130004 	swi	r0, r19, 4
20016558:	b8000028 	bri	40		// 20016580
        fifo->read_inds[i] = 0;
2001655c:	e8730010 	lwi	r3, r19, 16
20016560:	e883000c 	lwi	r4, r3, 12
20016564:	e8730004 	lwi	r3, r19, 4
20016568:	64630402 	bslli	r3, r3, 2
2001656c:	10641800 	addk	r3, r4, r3
20016570:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20016574:	e8730004 	lwi	r3, r19, 4
20016578:	30630001 	addik	r3, r3, 1
2001657c:	f8730004 	swi	r3, r19, 4
20016580:	e8730010 	lwi	r3, r19, 16
20016584:	e8830008 	lwi	r4, r3, 8
20016588:	e8730004 	lwi	r3, r19, 4
2001658c:	16441803 	cmpu	r18, r4, r3
20016590:	bc52ffcc 	blti	r18, -52		// 2001655c
        fifo->read_inds[i] = 0;
    }
}
20016594:	10330000 	addk	r1, r19, r0
20016598:	ea610008 	lwi	r19, r1, 8
2001659c:	3021000c 	addik	r1, r1, 12
200165a0:	b60f0008 	rtsd	r15, 8
200165a4:	80000000 	or	r0, r0, r0

200165a8 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200165a8:	3021fff4 	addik	r1, r1, -12
200165ac:	fa610008 	swi	r19, r1, 8
200165b0:	12610000 	addk	r19, r1, r0
200165b4:	f8b30010 	swi	r5, r19, 16
200165b8:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200165bc:	e8730010 	lwi	r3, r19, 16
200165c0:	e8830004 	lwi	r4, r3, 4
200165c4:	e8730010 	lwi	r3, r19, 16
200165c8:	e8a3000c 	lwi	r5, r3, 12
200165cc:	e8730014 	lwi	r3, r19, 20
200165d0:	64630402 	bslli	r3, r3, 2
200165d4:	10651800 	addk	r3, r5, r3
200165d8:	e8a30000 	lwi	r5, r3, 0
200165dc:	e8730010 	lwi	r3, r19, 16
200165e0:	e8630000 	lwi	r3, r3, 0
200165e4:	3063ffff 	addik	r3, r3, -1
200165e8:	84651800 	and	r3, r5, r3
200165ec:	64630402 	bslli	r3, r3, 2
200165f0:	10641800 	addk	r3, r4, r3
200165f4:	e8630000 	lwi	r3, r3, 0
200165f8:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200165fc:	e8730010 	lwi	r3, r19, 16
20016600:	e883000c 	lwi	r4, r3, 12
20016604:	e8730014 	lwi	r3, r19, 20
20016608:	64630402 	bslli	r3, r3, 2
2001660c:	10641800 	addk	r3, r4, r3
20016610:	e8830000 	lwi	r4, r3, 0
20016614:	30840001 	addik	r4, r4, 1
20016618:	f8830000 	swi	r4, r3, 0
    return value;
2001661c:	e8730004 	lwi	r3, r19, 4
}
20016620:	10330000 	addk	r1, r19, r0
20016624:	ea610008 	lwi	r19, r1, 8
20016628:	3021000c 	addik	r1, r1, 12
2001662c:	b60f0008 	rtsd	r15, 8
20016630:	80000000 	or	r0, r0, r0

20016634 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20016634:	3021fff8 	addik	r1, r1, -8
20016638:	fa610004 	swi	r19, r1, 4
2001663c:	12610000 	addk	r19, r1, r0
20016640:	f8b3000c 	swi	r5, r19, 12
20016644:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20016648:	e873000c 	lwi	r3, r19, 12
2001664c:	e8830004 	lwi	r4, r3, 4
20016650:	e873000c 	lwi	r3, r19, 12
20016654:	e8630010 	lwi	r3, r3, 16
20016658:	e8a30000 	lwi	r5, r3, 0
2001665c:	e873000c 	lwi	r3, r19, 12
20016660:	e8630000 	lwi	r3, r3, 0
20016664:	3063ffff 	addik	r3, r3, -1
20016668:	84651800 	and	r3, r5, r3
2001666c:	64630402 	bslli	r3, r3, 2
20016670:	10641800 	addk	r3, r4, r3
20016674:	e8930010 	lwi	r4, r19, 16
20016678:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2001667c:	e873000c 	lwi	r3, r19, 12
20016680:	e8630010 	lwi	r3, r3, 16
20016684:	e8830000 	lwi	r4, r3, 0
20016688:	30840001 	addik	r4, r4, 1
2001668c:	f8830000 	swi	r4, r3, 0
}
20016690:	10330000 	addk	r1, r19, r0
20016694:	ea610004 	lwi	r19, r1, 4
20016698:	30210008 	addik	r1, r1, 8
2001669c:	b60f0008 	rtsd	r15, 8
200166a0:	80000000 	or	r0, r0, r0

200166a4 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200166a4:	3021fff8 	addik	r1, r1, -8
200166a8:	fa610004 	swi	r19, r1, 4
200166ac:	12610000 	addk	r19, r1, r0
200166b0:	f8b3000c 	swi	r5, r19, 12
200166b4:	f8d30010 	swi	r6, r19, 16
200166b8:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200166bc:	e873000c 	lwi	r3, r19, 12
200166c0:	e8630010 	lwi	r3, r3, 16
200166c4:	e8830000 	lwi	r4, r3, 0
200166c8:	e873000c 	lwi	r3, r19, 12
200166cc:	e8a3000c 	lwi	r5, r3, 12
200166d0:	e8730010 	lwi	r3, r19, 16
200166d4:	64630402 	bslli	r3, r3, 2
200166d8:	10651800 	addk	r3, r5, r3
200166dc:	e8630000 	lwi	r3, r3, 0
200166e0:	14a32000 	rsubk	r5, r3, r4
200166e4:	30600001 	addik	r3, r0, 1
200166e8:	e8930014 	lwi	r4, r19, 20
200166ec:	16442803 	cmpu	r18, r4, r5
200166f0:	bcb20008 	bgei	r18, 8		// 200166f8
200166f4:	10600000 	addk	r3, r0, r0
200166f8:	a46300ff 	andi	r3, r3, 255
}
200166fc:	10330000 	addk	r1, r19, r0
20016700:	ea610004 	lwi	r19, r1, 4
20016704:	30210008 	addik	r1, r1, 8
20016708:	b60f0008 	rtsd	r15, 8
2001670c:	80000000 	or	r0, r0, r0

20016710 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20016710:	3021fff8 	addik	r1, r1, -8
20016714:	fa610004 	swi	r19, r1, 4
20016718:	12610000 	addk	r19, r1, r0
2001671c:	f8b3000c 	swi	r5, r19, 12
20016720:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20016724:	e873000c 	lwi	r3, r19, 12
20016728:	e8630010 	lwi	r3, r3, 16
2001672c:	e8830000 	lwi	r4, r3, 0
20016730:	e873000c 	lwi	r3, r19, 12
20016734:	e8a3000c 	lwi	r5, r3, 12
20016738:	e8730010 	lwi	r3, r19, 16
2001673c:	64630402 	bslli	r3, r3, 2
20016740:	10651800 	addk	r3, r5, r3
20016744:	e8630000 	lwi	r3, r3, 0
20016748:	14632000 	rsubk	r3, r3, r4
}
2001674c:	10330000 	addk	r1, r19, r0
20016750:	ea610004 	lwi	r19, r1, 4
20016754:	30210008 	addik	r1, r1, 8
20016758:	b60f0008 	rtsd	r15, 8
2001675c:	80000000 	or	r0, r0, r0

20016760 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20016760:	3021fff4 	addik	r1, r1, -12
20016764:	fa610008 	swi	r19, r1, 8
20016768:	12610000 	addk	r19, r1, r0
2001676c:	f8b30010 	swi	r5, r19, 16
20016770:	f8d30014 	swi	r6, r19, 20
20016774:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20016778:	f8130004 	swi	r0, r19, 4
2001677c:	b800005c 	bri	92		// 200167d8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20016780:	e8730010 	lwi	r3, r19, 16
20016784:	e8830000 	lwi	r4, r3, 0
20016788:	e8730010 	lwi	r3, r19, 16
2001678c:	e8a3000c 	lwi	r5, r3, 12
20016790:	e8730004 	lwi	r3, r19, 4
20016794:	64630402 	bslli	r3, r3, 2
20016798:	10651800 	addk	r3, r5, r3
2001679c:	e8a30000 	lwi	r5, r3, 0
200167a0:	e8730010 	lwi	r3, r19, 16
200167a4:	e8630010 	lwi	r3, r3, 16
200167a8:	e8630000 	lwi	r3, r3, 0
200167ac:	14632800 	rsubk	r3, r3, r5
200167b0:	10641800 	addk	r3, r4, r3
200167b4:	30830001 	addik	r4, r3, 1
200167b8:	e8730018 	lwi	r3, r19, 24
200167bc:	16441803 	cmpu	r18, r4, r3
200167c0:	bc52000c 	blti	r18, 12		// 200167cc
            return 0;
200167c4:	10600000 	addk	r3, r0, r0
200167c8:	b8000024 	bri	36		// 200167ec
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200167cc:	e8730004 	lwi	r3, r19, 4
200167d0:	30630001 	addik	r3, r3, 1
200167d4:	f8730004 	swi	r3, r19, 4
200167d8:	e8930004 	lwi	r4, r19, 4
200167dc:	e8730014 	lwi	r3, r19, 20
200167e0:	16432003 	cmpu	r18, r3, r4
200167e4:	bc52ff9c 	blti	r18, -100		// 20016780
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200167e8:	30600001 	addik	r3, r0, 1
}
200167ec:	10330000 	addk	r1, r19, r0
200167f0:	ea610008 	lwi	r19, r1, 8
200167f4:	3021000c 	addik	r1, r1, 12
200167f8:	b60f0008 	rtsd	r15, 8
200167fc:	80000000 	or	r0, r0, r0

20016800 <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20016800:	3021ffec 	addik	r1, r1, -20
20016804:	fa610010 	swi	r19, r1, 16
20016808:	12610000 	addk	r19, r1, r0
2001680c:	f8b30018 	swi	r5, r19, 24
20016810:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20016814:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20016818:	f8130004 	swi	r0, r19, 4
2001681c:	b8000054 	bri	84		// 20016870
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20016820:	e8730018 	lwi	r3, r19, 24
20016824:	e8630010 	lwi	r3, r3, 16
20016828:	e8830000 	lwi	r4, r3, 0
2001682c:	e8730018 	lwi	r3, r19, 24
20016830:	e8a3000c 	lwi	r5, r3, 12
20016834:	e8730004 	lwi	r3, r19, 4
20016838:	64630402 	bslli	r3, r3, 2
2001683c:	10651800 	addk	r3, r5, r3
20016840:	e8630000 	lwi	r3, r3, 0
20016844:	14632000 	rsubk	r3, r3, r4
20016848:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001684c:	e8930008 	lwi	r4, r19, 8
20016850:	e873000c 	lwi	r3, r19, 12
20016854:	16441803 	cmpu	r18, r4, r3
20016858:	bcb20008 	bgei	r18, 8		// 20016860
2001685c:	10640000 	addk	r3, r4, r0
20016860:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20016864:	e8730004 	lwi	r3, r19, 4
20016868:	30630001 	addik	r3, r3, 1
2001686c:	f8730004 	swi	r3, r19, 4
20016870:	e8930004 	lwi	r4, r19, 4
20016874:	e873001c 	lwi	r3, r19, 28
20016878:	16432003 	cmpu	r18, r3, r4
2001687c:	bc52ffa4 	blti	r18, -92		// 20016820
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20016880:	e8730018 	lwi	r3, r19, 24
20016884:	e8830000 	lwi	r4, r3, 0
20016888:	e8730008 	lwi	r3, r19, 8
2001688c:	14632000 	rsubk	r3, r3, r4
}
20016890:	10330000 	addk	r1, r19, r0
20016894:	ea610010 	lwi	r19, r1, 16
20016898:	30210014 	addik	r1, r1, 20
2001689c:	b60f0008 	rtsd	r15, 8
200168a0:	80000000 	or	r0, r0, r0

200168a4 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200168a4:	3021fff4 	addik	r1, r1, -12
200168a8:	fa610008 	swi	r19, r1, 8
200168ac:	12610000 	addk	r19, r1, r0
200168b0:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
200168b4:	e8730010 	lwi	r3, r19, 16
200168b8:	e8630010 	lwi	r3, r3, 16
200168bc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200168c0:	f8130004 	swi	r0, r19, 4
200168c4:	b8000028 	bri	40		// 200168ec
        fifo->read_inds[i] = 0;
200168c8:	e8730010 	lwi	r3, r19, 16
200168cc:	e883000c 	lwi	r4, r3, 12
200168d0:	e8730004 	lwi	r3, r19, 4
200168d4:	64630402 	bslli	r3, r3, 2
200168d8:	10641800 	addk	r3, r4, r3
200168dc:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200168e0:	e8730004 	lwi	r3, r19, 4
200168e4:	30630001 	addik	r3, r3, 1
200168e8:	f8730004 	swi	r3, r19, 4
200168ec:	e8730010 	lwi	r3, r19, 16
200168f0:	e8830008 	lwi	r4, r3, 8
200168f4:	e8730004 	lwi	r3, r19, 4
200168f8:	16441803 	cmpu	r18, r4, r3
200168fc:	bc52ffcc 	blti	r18, -52		// 200168c8
        fifo->read_inds[i] = 0;
    }
}
20016900:	10330000 	addk	r1, r19, r0
20016904:	ea610008 	lwi	r19, r1, 8
20016908:	3021000c 	addik	r1, r1, 12
2001690c:	b60f0008 	rtsd	r15, 8
20016910:	80000000 	or	r0, r0, r0

20016914 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20016914:	3021fff0 	addik	r1, r1, -16
20016918:	fa61000c 	swi	r19, r1, 12
2001691c:	12610000 	addk	r19, r1, r0
20016920:	f8b30014 	swi	r5, r19, 20
20016924:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20016928:	e8730014 	lwi	r3, r19, 20
2001692c:	e8830004 	lwi	r4, r3, 4
20016930:	e8730014 	lwi	r3, r19, 20
20016934:	e8a3000c 	lwi	r5, r3, 12
20016938:	e8730018 	lwi	r3, r19, 24
2001693c:	64630402 	bslli	r3, r3, 2
20016940:	10651800 	addk	r3, r5, r3
20016944:	e8a30000 	lwi	r5, r3, 0
20016948:	e8730014 	lwi	r3, r19, 20
2001694c:	e8630000 	lwi	r3, r3, 0
20016950:	3063ffff 	addik	r3, r3, -1
20016954:	84651800 	and	r3, r5, r3
20016958:	64630403 	bslli	r3, r3, 3
2001695c:	10641800 	addk	r3, r4, r3
20016960:	e8830000 	lwi	r4, r3, 0
20016964:	e8a30004 	lwi	r5, r3, 4
20016968:	f8930004 	swi	r4, r19, 4
2001696c:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20016970:	e8730014 	lwi	r3, r19, 20
20016974:	e883000c 	lwi	r4, r3, 12
20016978:	e8730018 	lwi	r3, r19, 24
2001697c:	64630402 	bslli	r3, r3, 2
20016980:	10641800 	addk	r3, r4, r3
20016984:	e8830000 	lwi	r4, r3, 0
20016988:	30840001 	addik	r4, r4, 1
2001698c:	f8830000 	swi	r4, r3, 0
    return value;
20016990:	e8930004 	lwi	r4, r19, 4
20016994:	e8b30008 	lwi	r5, r19, 8
}
20016998:	10640000 	addk	r3, r4, r0
2001699c:	10850000 	addk	r4, r5, r0
200169a0:	10330000 	addk	r1, r19, r0
200169a4:	ea61000c 	lwi	r19, r1, 12
200169a8:	30210010 	addik	r1, r1, 16
200169ac:	b60f0008 	rtsd	r15, 8
200169b0:	80000000 	or	r0, r0, r0

200169b4 <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200169b4:	3021fff8 	addik	r1, r1, -8
200169b8:	fa610004 	swi	r19, r1, 4
200169bc:	12610000 	addk	r19, r1, r0
200169c0:	f8b3000c 	swi	r5, r19, 12
200169c4:	f8d30010 	swi	r6, r19, 16
200169c8:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200169cc:	e873000c 	lwi	r3, r19, 12
200169d0:	e8830004 	lwi	r4, r3, 4
200169d4:	e873000c 	lwi	r3, r19, 12
200169d8:	e8630010 	lwi	r3, r3, 16
200169dc:	e8a30000 	lwi	r5, r3, 0
200169e0:	e873000c 	lwi	r3, r19, 12
200169e4:	e8630000 	lwi	r3, r3, 0
200169e8:	3063ffff 	addik	r3, r3, -1
200169ec:	84651800 	and	r3, r5, r3
200169f0:	64630403 	bslli	r3, r3, 3
200169f4:	10641800 	addk	r3, r4, r3
200169f8:	e8930010 	lwi	r4, r19, 16
200169fc:	e8b30014 	lwi	r5, r19, 20
20016a00:	f8830000 	swi	r4, r3, 0
20016a04:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20016a08:	e873000c 	lwi	r3, r19, 12
20016a0c:	e8630010 	lwi	r3, r3, 16
20016a10:	e8830000 	lwi	r4, r3, 0
20016a14:	30840001 	addik	r4, r4, 1
20016a18:	f8830000 	swi	r4, r3, 0
}
20016a1c:	10330000 	addk	r1, r19, r0
20016a20:	ea610004 	lwi	r19, r1, 4
20016a24:	30210008 	addik	r1, r1, 8
20016a28:	b60f0008 	rtsd	r15, 8
20016a2c:	80000000 	or	r0, r0, r0

20016a30 <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20016a30:	3021fff8 	addik	r1, r1, -8
20016a34:	fa610004 	swi	r19, r1, 4
20016a38:	12610000 	addk	r19, r1, r0
20016a3c:	f8b3000c 	swi	r5, r19, 12
20016a40:	f8d30010 	swi	r6, r19, 16
20016a44:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20016a48:	e873000c 	lwi	r3, r19, 12
20016a4c:	e8630010 	lwi	r3, r3, 16
20016a50:	e8830000 	lwi	r4, r3, 0
20016a54:	e873000c 	lwi	r3, r19, 12
20016a58:	e8a3000c 	lwi	r5, r3, 12
20016a5c:	e8730010 	lwi	r3, r19, 16
20016a60:	64630402 	bslli	r3, r3, 2
20016a64:	10651800 	addk	r3, r5, r3
20016a68:	e8630000 	lwi	r3, r3, 0
20016a6c:	14a32000 	rsubk	r5, r3, r4
20016a70:	30600001 	addik	r3, r0, 1
20016a74:	e8930014 	lwi	r4, r19, 20
20016a78:	16442803 	cmpu	r18, r4, r5
20016a7c:	bcb20008 	bgei	r18, 8		// 20016a84
20016a80:	10600000 	addk	r3, r0, r0
20016a84:	a46300ff 	andi	r3, r3, 255
}
20016a88:	10330000 	addk	r1, r19, r0
20016a8c:	ea610004 	lwi	r19, r1, 4
20016a90:	30210008 	addik	r1, r1, 8
20016a94:	b60f0008 	rtsd	r15, 8
20016a98:	80000000 	or	r0, r0, r0

20016a9c <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20016a9c:	3021fff8 	addik	r1, r1, -8
20016aa0:	fa610004 	swi	r19, r1, 4
20016aa4:	12610000 	addk	r19, r1, r0
20016aa8:	f8b3000c 	swi	r5, r19, 12
20016aac:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20016ab0:	e873000c 	lwi	r3, r19, 12
20016ab4:	e8630010 	lwi	r3, r3, 16
20016ab8:	e8830000 	lwi	r4, r3, 0
20016abc:	e873000c 	lwi	r3, r19, 12
20016ac0:	e8a3000c 	lwi	r5, r3, 12
20016ac4:	e8730010 	lwi	r3, r19, 16
20016ac8:	64630402 	bslli	r3, r3, 2
20016acc:	10651800 	addk	r3, r5, r3
20016ad0:	e8630000 	lwi	r3, r3, 0
20016ad4:	14632000 	rsubk	r3, r3, r4
}
20016ad8:	10330000 	addk	r1, r19, r0
20016adc:	ea610004 	lwi	r19, r1, 4
20016ae0:	30210008 	addik	r1, r1, 8
20016ae4:	b60f0008 	rtsd	r15, 8
20016ae8:	80000000 	or	r0, r0, r0

20016aec <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20016aec:	3021fff4 	addik	r1, r1, -12
20016af0:	fa610008 	swi	r19, r1, 8
20016af4:	12610000 	addk	r19, r1, r0
20016af8:	f8b30010 	swi	r5, r19, 16
20016afc:	f8d30014 	swi	r6, r19, 20
20016b00:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20016b04:	f8130004 	swi	r0, r19, 4
20016b08:	b800005c 	bri	92		// 20016b64
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20016b0c:	e8730010 	lwi	r3, r19, 16
20016b10:	e8830000 	lwi	r4, r3, 0
20016b14:	e8730010 	lwi	r3, r19, 16
20016b18:	e8a3000c 	lwi	r5, r3, 12
20016b1c:	e8730004 	lwi	r3, r19, 4
20016b20:	64630402 	bslli	r3, r3, 2
20016b24:	10651800 	addk	r3, r5, r3
20016b28:	e8a30000 	lwi	r5, r3, 0
20016b2c:	e8730010 	lwi	r3, r19, 16
20016b30:	e8630010 	lwi	r3, r3, 16
20016b34:	e8630000 	lwi	r3, r3, 0
20016b38:	14632800 	rsubk	r3, r3, r5
20016b3c:	10641800 	addk	r3, r4, r3
20016b40:	30830001 	addik	r4, r3, 1
20016b44:	e8730018 	lwi	r3, r19, 24
20016b48:	16441803 	cmpu	r18, r4, r3
20016b4c:	bc52000c 	blti	r18, 12		// 20016b58
            return 0;
20016b50:	10600000 	addk	r3, r0, r0
20016b54:	b8000024 	bri	36		// 20016b78
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20016b58:	e8730004 	lwi	r3, r19, 4
20016b5c:	30630001 	addik	r3, r3, 1
20016b60:	f8730004 	swi	r3, r19, 4
20016b64:	e8930004 	lwi	r4, r19, 4
20016b68:	e8730014 	lwi	r3, r19, 20
20016b6c:	16432003 	cmpu	r18, r3, r4
20016b70:	bc52ff9c 	blti	r18, -100		// 20016b0c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20016b74:	30600001 	addik	r3, r0, 1
}
20016b78:	10330000 	addk	r1, r19, r0
20016b7c:	ea610008 	lwi	r19, r1, 8
20016b80:	3021000c 	addik	r1, r1, 12
20016b84:	b60f0008 	rtsd	r15, 8
20016b88:	80000000 	or	r0, r0, r0

20016b8c <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20016b8c:	3021ffec 	addik	r1, r1, -20
20016b90:	fa610010 	swi	r19, r1, 16
20016b94:	12610000 	addk	r19, r1, r0
20016b98:	f8b30018 	swi	r5, r19, 24
20016b9c:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20016ba0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20016ba4:	f8130004 	swi	r0, r19, 4
20016ba8:	b8000054 	bri	84		// 20016bfc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20016bac:	e8730018 	lwi	r3, r19, 24
20016bb0:	e8630010 	lwi	r3, r3, 16
20016bb4:	e8830000 	lwi	r4, r3, 0
20016bb8:	e8730018 	lwi	r3, r19, 24
20016bbc:	e8a3000c 	lwi	r5, r3, 12
20016bc0:	e8730004 	lwi	r3, r19, 4
20016bc4:	64630402 	bslli	r3, r3, 2
20016bc8:	10651800 	addk	r3, r5, r3
20016bcc:	e8630000 	lwi	r3, r3, 0
20016bd0:	14632000 	rsubk	r3, r3, r4
20016bd4:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20016bd8:	e8930008 	lwi	r4, r19, 8
20016bdc:	e873000c 	lwi	r3, r19, 12
20016be0:	16441803 	cmpu	r18, r4, r3
20016be4:	bcb20008 	bgei	r18, 8		// 20016bec
20016be8:	10640000 	addk	r3, r4, r0
20016bec:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20016bf0:	e8730004 	lwi	r3, r19, 4
20016bf4:	30630001 	addik	r3, r3, 1
20016bf8:	f8730004 	swi	r3, r19, 4
20016bfc:	e8930004 	lwi	r4, r19, 4
20016c00:	e873001c 	lwi	r3, r19, 28
20016c04:	16432003 	cmpu	r18, r3, r4
20016c08:	bc52ffa4 	blti	r18, -92		// 20016bac
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20016c0c:	e8730018 	lwi	r3, r19, 24
20016c10:	e8830000 	lwi	r4, r3, 0
20016c14:	e8730008 	lwi	r3, r19, 8
20016c18:	14632000 	rsubk	r3, r3, r4
}
20016c1c:	10330000 	addk	r1, r19, r0
20016c20:	ea610010 	lwi	r19, r1, 16
20016c24:	30210014 	addik	r1, r1, 20
20016c28:	b60f0008 	rtsd	r15, 8
20016c2c:	80000000 	or	r0, r0, r0

20016c30 <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20016c30:	3021fff4 	addik	r1, r1, -12
20016c34:	fa610008 	swi	r19, r1, 8
20016c38:	12610000 	addk	r19, r1, r0
20016c3c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20016c40:	e8730010 	lwi	r3, r19, 16
20016c44:	e8630010 	lwi	r3, r3, 16
20016c48:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20016c4c:	f8130004 	swi	r0, r19, 4
20016c50:	b8000028 	bri	40		// 20016c78
        fifo->read_inds[i] = 0;
20016c54:	e8730010 	lwi	r3, r19, 16
20016c58:	e883000c 	lwi	r4, r3, 12
20016c5c:	e8730004 	lwi	r3, r19, 4
20016c60:	64630402 	bslli	r3, r3, 2
20016c64:	10641800 	addk	r3, r4, r3
20016c68:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20016c6c:	e8730004 	lwi	r3, r19, 4
20016c70:	30630001 	addik	r3, r3, 1
20016c74:	f8730004 	swi	r3, r19, 4
20016c78:	e8730010 	lwi	r3, r19, 16
20016c7c:	e8830008 	lwi	r4, r3, 8
20016c80:	e8730004 	lwi	r3, r19, 4
20016c84:	16441803 	cmpu	r18, r4, r3
20016c88:	bc52ffcc 	blti	r18, -52		// 20016c54
        fifo->read_inds[i] = 0;
    }
}
20016c8c:	10330000 	addk	r1, r19, r0
20016c90:	ea610008 	lwi	r19, r1, 8
20016c94:	3021000c 	addik	r1, r1, 12
20016c98:	b60f0008 	rtsd	r15, 8
20016c9c:	80000000 	or	r0, r0, r0

20016ca0 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20016ca0:	3021fff4 	addik	r1, r1, -12
20016ca4:	fa610008 	swi	r19, r1, 8
20016ca8:	12610000 	addk	r19, r1, r0
20016cac:	f8b30010 	swi	r5, r19, 16
20016cb0:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20016cb4:	e8730010 	lwi	r3, r19, 16
20016cb8:	e8830004 	lwi	r4, r3, 4
20016cbc:	e8730010 	lwi	r3, r19, 16
20016cc0:	e8a3000c 	lwi	r5, r3, 12
20016cc4:	e8730014 	lwi	r3, r19, 20
20016cc8:	64630402 	bslli	r3, r3, 2
20016ccc:	10651800 	addk	r3, r5, r3
20016cd0:	e8a30000 	lwi	r5, r3, 0
20016cd4:	e8730010 	lwi	r3, r19, 16
20016cd8:	e8630000 	lwi	r3, r3, 0
20016cdc:	3063ffff 	addik	r3, r3, -1
20016ce0:	84651800 	and	r3, r5, r3
20016ce4:	64630402 	bslli	r3, r3, 2
20016ce8:	10641800 	addk	r3, r4, r3
20016cec:	e8630000 	lwi	r3, r3, 0
20016cf0:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20016cf4:	e8730010 	lwi	r3, r19, 16
20016cf8:	e883000c 	lwi	r4, r3, 12
20016cfc:	e8730014 	lwi	r3, r19, 20
20016d00:	64630402 	bslli	r3, r3, 2
20016d04:	10641800 	addk	r3, r4, r3
20016d08:	e8830000 	lwi	r4, r3, 0
20016d0c:	30840001 	addik	r4, r4, 1
20016d10:	f8830000 	swi	r4, r3, 0
    return value;
20016d14:	e8730004 	lwi	r3, r19, 4
}
20016d18:	10330000 	addk	r1, r19, r0
20016d1c:	ea610008 	lwi	r19, r1, 8
20016d20:	3021000c 	addik	r1, r1, 12
20016d24:	b60f0008 	rtsd	r15, 8
20016d28:	80000000 	or	r0, r0, r0

20016d2c <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20016d2c:	3021fff8 	addik	r1, r1, -8
20016d30:	fa610004 	swi	r19, r1, 4
20016d34:	12610000 	addk	r19, r1, r0
20016d38:	f8b3000c 	swi	r5, r19, 12
20016d3c:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20016d40:	e873000c 	lwi	r3, r19, 12
20016d44:	e8830004 	lwi	r4, r3, 4
20016d48:	e873000c 	lwi	r3, r19, 12
20016d4c:	e8630010 	lwi	r3, r3, 16
20016d50:	e8a30000 	lwi	r5, r3, 0
20016d54:	e873000c 	lwi	r3, r19, 12
20016d58:	e8630000 	lwi	r3, r3, 0
20016d5c:	3063ffff 	addik	r3, r3, -1
20016d60:	84651800 	and	r3, r5, r3
20016d64:	64630402 	bslli	r3, r3, 2
20016d68:	10641800 	addk	r3, r4, r3
20016d6c:	e8930010 	lwi	r4, r19, 16
20016d70:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20016d74:	e873000c 	lwi	r3, r19, 12
20016d78:	e8630010 	lwi	r3, r3, 16
20016d7c:	e8830000 	lwi	r4, r3, 0
20016d80:	30840001 	addik	r4, r4, 1
20016d84:	f8830000 	swi	r4, r3, 0
}
20016d88:	10330000 	addk	r1, r19, r0
20016d8c:	ea610004 	lwi	r19, r1, 4
20016d90:	30210008 	addik	r1, r1, 8
20016d94:	b60f0008 	rtsd	r15, 8
20016d98:	80000000 	or	r0, r0, r0

20016d9c <read_RUN>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_RUN() {
20016d9c:	3021ffe0 	addik	r1, r1, -32
20016da0:	f9e10000 	swi	r15, r1, 0
20016da4:	fa61001c 	swi	r19, r1, 28
20016da8:	12610000 	addk	r19, r1, r0
		index_RUN = decoder_parser_blkexp_RUN->read_inds[0];
20016dac:	b0002004 	imm	8196
20016db0:	e86067cc 	lwi	r3, r0, 26572	// 200467cc <decoder_parser_blkexp_RUN>
20016db4:	e863000c 	lwi	r3, r3, 12
20016db8:	e8630000 	lwi	r3, r3, 0
20016dbc:	b0002006 	imm	8198
20016dc0:	f8601bb4 	swi	r3, r0, 7092	// 20061bb4 <index_RUN>
		numTokens_RUN = index_RUN + fifo_i8_get_num_tokens(decoder_parser_blkexp_RUN, 0);
20016dc4:	b0002004 	imm	8196
20016dc8:	e86067cc 	lwi	r3, r0, 26572	// 200467cc <decoder_parser_blkexp_RUN>
20016dcc:	10a30000 	addk	r5, r3, r0
20016dd0:	10c00000 	addk	r6, r0, r0
20016dd4:	b9f4e120 	brlid	r15, -7904	// 20014ef4 <fifo_i8_get_num_tokens>
20016dd8:	80000000 	or	r0, r0, r0
20016ddc:	10830000 	addk	r4, r3, r0
20016de0:	b0002006 	imm	8198
20016de4:	e8601bb4 	lwi	r3, r0, 7092	// 20061bb4 <index_RUN>
20016de8:	10641800 	addk	r3, r4, r3
20016dec:	b0002006 	imm	8198
20016df0:	f8601bb8 	swi	r3, r0, 7096	// 20061bb8 <numTokens_RUN>
	}
20016df4:	e9e10000 	lwi	r15, r1, 0
20016df8:	10330000 	addk	r1, r19, r0
20016dfc:	ea61001c 	lwi	r19, r1, 28
20016e00:	30210020 	addik	r1, r1, 32
20016e04:	b60f0008 	rtsd	r15, 8
20016e08:	80000000 	or	r0, r0, r0

20016e0c <read_end_RUN>:
	
	static void read_end_RUN() {
20016e0c:	3021fff8 	addik	r1, r1, -8
20016e10:	fa610004 	swi	r19, r1, 4
20016e14:	12610000 	addk	r19, r1, r0
		decoder_parser_blkexp_RUN->read_inds[0] = index_RUN;
20016e18:	b0002004 	imm	8196
20016e1c:	e86067cc 	lwi	r3, r0, 26572	// 200467cc <decoder_parser_blkexp_RUN>
20016e20:	e863000c 	lwi	r3, r3, 12
20016e24:	b0002006 	imm	8198
20016e28:	e8801bb4 	lwi	r4, r0, 7092	// 20061bb4 <index_RUN>
20016e2c:	f8830000 	swi	r4, r3, 0
	}
20016e30:	10330000 	addk	r1, r19, r0
20016e34:	ea610004 	lwi	r19, r1, 4
20016e38:	30210008 	addik	r1, r1, 8
20016e3c:	b60f0008 	rtsd	r15, 8
20016e40:	80000000 	or	r0, r0, r0

20016e44 <read_VALUE>:
	static void read_VALUE() {
20016e44:	3021ffe0 	addik	r1, r1, -32
20016e48:	f9e10000 	swi	r15, r1, 0
20016e4c:	fa61001c 	swi	r19, r1, 28
20016e50:	12610000 	addk	r19, r1, r0
		index_VALUE = decoder_parser_blkexp_VALUE->read_inds[0];
20016e54:	b0002004 	imm	8196
20016e58:	e8606808 	lwi	r3, r0, 26632	// 20046808 <decoder_parser_blkexp_VALUE>
20016e5c:	e863000c 	lwi	r3, r3, 12
20016e60:	e8630000 	lwi	r3, r3, 0
20016e64:	b0002006 	imm	8198
20016e68:	f8601bbc 	swi	r3, r0, 7100	// 20061bbc <index_VALUE>
		numTokens_VALUE = index_VALUE + fifo_i16_get_num_tokens(decoder_parser_blkexp_VALUE, 0);
20016e6c:	b0002004 	imm	8196
20016e70:	e8606808 	lwi	r3, r0, 26632	// 20046808 <decoder_parser_blkexp_VALUE>
20016e74:	10a30000 	addk	r5, r3, r0
20016e78:	10c00000 	addk	r6, r0, r0
20016e7c:	b9f4e3e4 	brlid	r15, -7196	// 20015260 <fifo_i16_get_num_tokens>
20016e80:	80000000 	or	r0, r0, r0
20016e84:	10830000 	addk	r4, r3, r0
20016e88:	b0002006 	imm	8198
20016e8c:	e8601bbc 	lwi	r3, r0, 7100	// 20061bbc <index_VALUE>
20016e90:	10641800 	addk	r3, r4, r3
20016e94:	b0002006 	imm	8198
20016e98:	f8601bc0 	swi	r3, r0, 7104	// 20061bc0 <numTokens_VALUE>
	}
20016e9c:	e9e10000 	lwi	r15, r1, 0
20016ea0:	10330000 	addk	r1, r19, r0
20016ea4:	ea61001c 	lwi	r19, r1, 28
20016ea8:	30210020 	addik	r1, r1, 32
20016eac:	b60f0008 	rtsd	r15, 8
20016eb0:	80000000 	or	r0, r0, r0

20016eb4 <read_end_VALUE>:
	
	static void read_end_VALUE() {
20016eb4:	3021fff8 	addik	r1, r1, -8
20016eb8:	fa610004 	swi	r19, r1, 4
20016ebc:	12610000 	addk	r19, r1, r0
		decoder_parser_blkexp_VALUE->read_inds[0] = index_VALUE;
20016ec0:	b0002004 	imm	8196
20016ec4:	e8606808 	lwi	r3, r0, 26632	// 20046808 <decoder_parser_blkexp_VALUE>
20016ec8:	e863000c 	lwi	r3, r3, 12
20016ecc:	b0002006 	imm	8198
20016ed0:	e8801bbc 	lwi	r4, r0, 7100	// 20061bbc <index_VALUE>
20016ed4:	f8830000 	swi	r4, r3, 0
	}
20016ed8:	10330000 	addk	r1, r19, r0
20016edc:	ea610004 	lwi	r19, r1, 4
20016ee0:	30210008 	addik	r1, r1, 8
20016ee4:	b60f0008 	rtsd	r15, 8
20016ee8:	80000000 	or	r0, r0, r0

20016eec <read_LAST>:
	static void read_LAST() {
20016eec:	3021ffe0 	addik	r1, r1, -32
20016ef0:	f9e10000 	swi	r15, r1, 0
20016ef4:	fa61001c 	swi	r19, r1, 28
20016ef8:	12610000 	addk	r19, r1, r0
		index_LAST = decoder_parser_blkexp_LAST->read_inds[0];
20016efc:	b0002004 	imm	8196
20016f00:	e86067e4 	lwi	r3, r0, 26596	// 200467e4 <decoder_parser_blkexp_LAST>
20016f04:	e863000c 	lwi	r3, r3, 12
20016f08:	e8630000 	lwi	r3, r3, 0
20016f0c:	b0002006 	imm	8198
20016f10:	f8601bc4 	swi	r3, r0, 7108	// 20061bc4 <index_LAST>
		numTokens_LAST = index_LAST + fifo_i32_get_num_tokens(decoder_parser_blkexp_LAST, 0);
20016f14:	b0002004 	imm	8196
20016f18:	e86067e4 	lwi	r3, r0, 26596	// 200467e4 <decoder_parser_blkexp_LAST>
20016f1c:	10a30000 	addk	r5, r3, r0
20016f20:	10c00000 	addk	r6, r0, r0
20016f24:	b9f4e6b0 	brlid	r15, -6480	// 200155d4 <fifo_i32_get_num_tokens>
20016f28:	80000000 	or	r0, r0, r0
20016f2c:	10830000 	addk	r4, r3, r0
20016f30:	b0002006 	imm	8198
20016f34:	e8601bc4 	lwi	r3, r0, 7108	// 20061bc4 <index_LAST>
20016f38:	10641800 	addk	r3, r4, r3
20016f3c:	b0002006 	imm	8198
20016f40:	f8601bc8 	swi	r3, r0, 7112	// 20061bc8 <numTokens_LAST>
	}
20016f44:	e9e10000 	lwi	r15, r1, 0
20016f48:	10330000 	addk	r1, r19, r0
20016f4c:	ea61001c 	lwi	r19, r1, 28
20016f50:	30210020 	addik	r1, r1, 32
20016f54:	b60f0008 	rtsd	r15, 8
20016f58:	80000000 	or	r0, r0, r0

20016f5c <read_end_LAST>:
	
	static void read_end_LAST() {
20016f5c:	3021fff8 	addik	r1, r1, -8
20016f60:	fa610004 	swi	r19, r1, 4
20016f64:	12610000 	addk	r19, r1, r0
		decoder_parser_blkexp_LAST->read_inds[0] = index_LAST;
20016f68:	b0002004 	imm	8196
20016f6c:	e86067e4 	lwi	r3, r0, 26596	// 200467e4 <decoder_parser_blkexp_LAST>
20016f70:	e863000c 	lwi	r3, r3, 12
20016f74:	b0002006 	imm	8198
20016f78:	e8801bc4 	lwi	r4, r0, 7108	// 20061bc4 <index_LAST>
20016f7c:	f8830000 	swi	r4, r3, 0
	}
20016f80:	10330000 	addk	r1, r19, r0
20016f84:	ea610004 	lwi	r19, r1, 4
20016f88:	30210008 	addik	r1, r1, 8
20016f8c:	b60f0008 	rtsd	r15, 8
20016f90:	80000000 	or	r0, r0, r0

20016f94 <write_QFS>:

	static void write_QFS() {
20016f94:	3021ffe0 	addik	r1, r1, -32
20016f98:	f9e10000 	swi	r15, r1, 0
20016f9c:	fa61001c 	swi	r19, r1, 28
20016fa0:	12610000 	addk	r19, r1, r0
		index_QFS = (*decoder_parser_blkexp_QFS->write_ind);
20016fa4:	b0002004 	imm	8196
20016fa8:	e8606814 	lwi	r3, r0, 26644	// 20046814 <decoder_parser_blkexp_QFS>
20016fac:	e8630010 	lwi	r3, r3, 16
20016fb0:	e8630000 	lwi	r3, r3, 0
20016fb4:	b0002006 	imm	8198
20016fb8:	f8601bcc 	swi	r3, r0, 7116	// 20061bcc <index_QFS>
		numFree_QFS = index_QFS + fifo_i16_get_room(decoder_parser_blkexp_QFS, NUM_READERS_QFS);
20016fbc:	b0002004 	imm	8196
20016fc0:	e8606814 	lwi	r3, r0, 26644	// 20046814 <decoder_parser_blkexp_QFS>
20016fc4:	10a30000 	addk	r5, r3, r0
20016fc8:	30c00001 	addik	r6, r0, 1
20016fcc:	b9f4e384 	brlid	r15, -7292	// 20015350 <fifo_i16_get_room>
20016fd0:	80000000 	or	r0, r0, r0
20016fd4:	10830000 	addk	r4, r3, r0
20016fd8:	b0002006 	imm	8198
20016fdc:	e8601bcc 	lwi	r3, r0, 7116	// 20061bcc <index_QFS>
20016fe0:	10641800 	addk	r3, r4, r3
20016fe4:	b0002006 	imm	8198
20016fe8:	f8601bd0 	swi	r3, r0, 7120	// 20061bd0 <numFree_QFS>
	}
20016fec:	e9e10000 	lwi	r15, r1, 0
20016ff0:	10330000 	addk	r1, r19, r0
20016ff4:	ea61001c 	lwi	r19, r1, 28
20016ff8:	30210020 	addik	r1, r1, 32
20016ffc:	b60f0008 	rtsd	r15, 8
20017000:	80000000 	or	r0, r0, r0

20017004 <write_end_QFS>:
	
	static void write_end_QFS() {
20017004:	3021fff8 	addik	r1, r1, -8
20017008:	fa610004 	swi	r19, r1, 4
2001700c:	12610000 	addk	r19, r1, r0
		(*decoder_parser_blkexp_QFS->write_ind) = index_QFS;
20017010:	b0002004 	imm	8196
20017014:	e8606814 	lwi	r3, r0, 26644	// 20046814 <decoder_parser_blkexp_QFS>
20017018:	e8630010 	lwi	r3, r3, 16
2001701c:	b0002006 	imm	8198
20017020:	e8801bcc 	lwi	r4, r0, 7116	// 20061bcc <index_QFS>
20017024:	f8830000 	swi	r4, r3, 0
	}
20017028:	10330000 	addk	r1, r19, r0
2001702c:	ea610004 	lwi	r19, r1, 4
20017030:	30210008 	addik	r1, r1, 8
20017034:	b60f0008 	rtsd	r15, 8
20017038:	80000000 	or	r0, r0, r0

2001703c <isSchedulable_start>:
	// Functions/procedures


	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_start() {
2001703c:	3021fff4 	addik	r1, r1, -12
20017040:	fa610008 	swi	r19, r1, 8
20017044:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
20017048:	30600001 	addik	r3, r0, 1
2001704c:	f8730004 	swi	r3, r19, 4
		return result;
20017050:	e8730004 	lwi	r3, r19, 4
	}
20017054:	10330000 	addk	r1, r19, r0
20017058:	ea610008 	lwi	r19, r1, 8
2001705c:	3021000c 	addik	r1, r1, 12
20017060:	b60f0008 	rtsd	r15, 8
20017064:	80000000 	or	r0, r0, r0

20017068 <start>:
	
	static void start() {
20017068:	3021fff4 	addik	r1, r1, -12
2001706c:	fa610008 	swi	r19, r1, 8
20017070:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
	
		i32 i;
	
		i = 0;
20017074:	f8130004 	swi	r0, r19, 4
		while (i <= 63) {
20017078:	b8000024 	bri	36		// 2001709c
			qfs[i] = 0;
2001707c:	e8730004 	lwi	r3, r19, 4
20017080:	10631800 	addk	r3, r3, r3
20017084:	b0002006 	imm	8198
20017088:	30631bd8 	addik	r3, r3, 7128
2001708c:	f4030000 	shi	r0, r3, 0
			i = i + 1;
20017090:	e8730004 	lwi	r3, r19, 4
20017094:	30630001 	addik	r3, r3, 1
20017098:	f8730004 	swi	r3, r19, 4
		// Compute aligned port indexes
	
		i32 i;
	
		i = 0;
		while (i <= 63) {
2001709c:	e8930004 	lwi	r4, r19, 4
200170a0:	3060003f 	addik	r3, r0, 63
200170a4:	16441801 	cmp	r18, r4, r3
200170a8:	bcb2ffd4 	bgei	r18, -44		// 2001707c
			qfs[i] = 0;
			i = i + 1;
		}
		count = 0;
200170ac:	b0002006 	imm	8198
200170b0:	f0001bd4 	sbi	r0, r0, 7124	// 20061bd4 <count>
	
		// Update ports indexes
		
	}
200170b4:	10330000 	addk	r1, r19, r0
200170b8:	ea610008 	lwi	r19, r1, 8
200170bc:	3021000c 	addik	r1, r1, 12
200170c0:	b60f0008 	rtsd	r15, 8
200170c4:	80000000 	or	r0, r0, r0

200170c8 <isSchedulable_last>:
	static i32 isSchedulable_last() {
200170c8:	3021fff0 	addik	r1, r1, -16
200170cc:	fa61000c 	swi	r19, r1, 12
200170d0:	12610000 	addk	r19, r1, r0
		i32 result;
		i32 last;
	
		last = tokens_LAST[(index_LAST + (0)) % SIZE_LAST];
200170d4:	b0002004 	imm	8196
200170d8:	e86067e4 	lwi	r3, r0, 26596	// 200467e4 <decoder_parser_blkexp_LAST>
200170dc:	e8830004 	lwi	r4, r3, 4
200170e0:	b0002006 	imm	8198
200170e4:	e8601bc4 	lwi	r3, r0, 7108	// 20061bc4 <index_LAST>
200170e8:	a46301ff 	andi	r3, r3, 511
200170ec:	64630402 	bslli	r3, r3, 2
200170f0:	10641800 	addk	r3, r4, r3
200170f4:	e8630000 	lwi	r3, r3, 0
200170f8:	f8730004 	swi	r3, r19, 4
		result = last;
200170fc:	e8730004 	lwi	r3, r19, 4
20017100:	f8730008 	swi	r3, r19, 8
		return result;
20017104:	e8730008 	lwi	r3, r19, 8
	}
20017108:	10330000 	addk	r1, r19, r0
2001710c:	ea61000c 	lwi	r19, r1, 12
20017110:	30210010 	addik	r1, r1, 16
20017114:	b60f0008 	rtsd	r15, 8
20017118:	80000000 	or	r0, r0, r0

2001711c <last>:
	
	static void last() {
2001711c:	3021ffc0 	addik	r1, r1, -64
20017120:	f9e10000 	swi	r15, r1, 0
20017124:	fa61003c 	swi	r19, r1, 60
20017128:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_RUN = index_RUN % SIZE_RUN;
2001712c:	b0002006 	imm	8198
20017130:	e8601bb4 	lwi	r3, r0, 7092	// 20061bb4 <index_RUN>
20017134:	a46301ff 	andi	r3, r3, 511
20017138:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_VALUE = index_VALUE % SIZE_VALUE;
2001713c:	b0002006 	imm	8198
20017140:	e8601bbc 	lwi	r3, r0, 7100	// 20061bbc <index_VALUE>
20017144:	a46301ff 	andi	r3, r3, 511
20017148:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_LAST = index_LAST % SIZE_LAST;
2001714c:	b0002006 	imm	8198
20017150:	e8601bc4 	lwi	r3, r0, 7108	// 20061bc4 <index_LAST>
20017154:	a46301ff 	andi	r3, r3, 511
20017158:	f8730028 	swi	r3, r19, 40
		i32 index_aligned_QFS = index_QFS % SIZE_QFS;
2001715c:	b0002006 	imm	8198
20017160:	e8601bcc 	lwi	r3, r0, 7116	// 20061bcc <index_QFS>
20017164:	a46301ff 	andi	r3, r3, 511
20017168:	f873002c 	swi	r3, r19, 44
		i32 last;
		i8 local_count;
		i32 idx_qfs;
		i16 local_qfs;
	
		run = tokens_RUN[(index_RUN + (0)) % SIZE_RUN];
2001716c:	b0002004 	imm	8196
20017170:	e86067cc 	lwi	r3, r0, 26572	// 200467cc <decoder_parser_blkexp_RUN>
20017174:	e8830004 	lwi	r4, r3, 4
20017178:	b0002006 	imm	8198
2001717c:	e8601bb4 	lwi	r3, r0, 7092	// 20061bb4 <index_RUN>
20017180:	a46301ff 	andi	r3, r3, 511
20017184:	10641800 	addk	r3, r4, r3
20017188:	e0630000 	lbui	r3, r3, 0
2001718c:	f0730030 	sbi	r3, r19, 48
		value = tokens_VALUE[(index_VALUE + (0)) % SIZE_VALUE];
20017190:	b0002004 	imm	8196
20017194:	e8606808 	lwi	r3, r0, 26632	// 20046808 <decoder_parser_blkexp_VALUE>
20017198:	e8830004 	lwi	r4, r3, 4
2001719c:	b0002006 	imm	8198
200171a0:	e8601bbc 	lwi	r3, r0, 7100	// 20061bbc <index_VALUE>
200171a4:	a46301ff 	andi	r3, r3, 511
200171a8:	10631800 	addk	r3, r3, r3
200171ac:	10641800 	addk	r3, r4, r3
200171b0:	e4630000 	lhui	r3, r3, 0
200171b4:	f4730032 	shi	r3, r19, 50
		last = tokens_LAST[(index_LAST + (0)) % SIZE_LAST];
200171b8:	b0002004 	imm	8196
200171bc:	e86067e4 	lwi	r3, r0, 26596	// 200467e4 <decoder_parser_blkexp_LAST>
200171c0:	e8830004 	lwi	r4, r3, 4
200171c4:	b0002006 	imm	8198
200171c8:	e8601bc4 	lwi	r3, r0, 7108	// 20061bc4 <index_LAST>
200171cc:	a46301ff 	andi	r3, r3, 511
200171d0:	64630402 	bslli	r3, r3, 2
200171d4:	10641800 	addk	r3, r4, r3
200171d8:	e8630000 	lwi	r3, r3, 0
200171dc:	f8730034 	swi	r3, r19, 52
		local_count = count;
200171e0:	b0002006 	imm	8198
200171e4:	e0601bd4 	lbui	r3, r0, 7124	// 20061bd4 <count>
200171e8:	f0730038 	sbi	r3, r19, 56
		qfs[local_count + run] = value;
200171ec:	e0730038 	lbui	r3, r19, 56
200171f0:	90830060 	sext8	r4, r3
200171f4:	e0730030 	lbui	r3, r19, 48
200171f8:	90630060 	sext8	r3, r3
200171fc:	10641800 	addk	r3, r4, r3
20017200:	10631800 	addk	r3, r3, r3
20017204:	b0002006 	imm	8198
20017208:	30631bd8 	addik	r3, r3, 7128
2001720c:	e4930032 	lhui	r4, r19, 50
20017210:	f4830000 	shi	r4, r3, 0
		idx_qfs = 0;
20017214:	f813001c 	swi	r0, r19, 28
		while (idx_qfs < 64) {
20017218:	b8000058 	bri	88		// 20017270
			local_qfs = qfs[idx_qfs];
2001721c:	e873001c 	lwi	r3, r19, 28
20017220:	10631800 	addk	r3, r3, r3
20017224:	b0002006 	imm	8198
20017228:	30631bd8 	addik	r3, r3, 7128
2001722c:	e4630000 	lhui	r3, r3, 0
20017230:	f473003a 	shi	r3, r19, 58
			tokens_QFS[(index_QFS + (idx_qfs)) % SIZE_QFS] = local_qfs;
20017234:	b0002004 	imm	8196
20017238:	e8606814 	lwi	r3, r0, 26644	// 20046814 <decoder_parser_blkexp_QFS>
2001723c:	e8830004 	lwi	r4, r3, 4
20017240:	b0002006 	imm	8198
20017244:	e8a01bcc 	lwi	r5, r0, 7116	// 20061bcc <index_QFS>
20017248:	e873001c 	lwi	r3, r19, 28
2001724c:	10651800 	addk	r3, r5, r3
20017250:	a46301ff 	andi	r3, r3, 511
20017254:	10631800 	addk	r3, r3, r3
20017258:	10641800 	addk	r3, r4, r3
2001725c:	e493003a 	lhui	r4, r19, 58
20017260:	f4830000 	shi	r4, r3, 0
			idx_qfs = idx_qfs + 1;
20017264:	e873001c 	lwi	r3, r19, 28
20017268:	30630001 	addik	r3, r3, 1
2001726c:	f873001c 	swi	r3, r19, 28
		value = tokens_VALUE[(index_VALUE + (0)) % SIZE_VALUE];
		last = tokens_LAST[(index_LAST + (0)) % SIZE_LAST];
		local_count = count;
		qfs[local_count + run] = value;
		idx_qfs = 0;
		while (idx_qfs < 64) {
20017270:	e893001c 	lwi	r4, r19, 28
20017274:	3060003f 	addik	r3, r0, 63
20017278:	16441801 	cmp	r18, r4, r3
2001727c:	bcb2ffa0 	bgei	r18, -96		// 2001721c
			tokens_QFS[(index_QFS + (idx_qfs)) % SIZE_QFS] = local_qfs;
			idx_qfs = idx_qfs + 1;
		}
	
		// Update ports indexes
		index_RUN += 1;
20017280:	b0002006 	imm	8198
20017284:	e8601bb4 	lwi	r3, r0, 7092	// 20061bb4 <index_RUN>
20017288:	30630001 	addik	r3, r3, 1
2001728c:	b0002006 	imm	8198
20017290:	f8601bb4 	swi	r3, r0, 7092	// 20061bb4 <index_RUN>
		index_VALUE += 1;
20017294:	b0002006 	imm	8198
20017298:	e8601bbc 	lwi	r3, r0, 7100	// 20061bbc <index_VALUE>
2001729c:	30630001 	addik	r3, r3, 1
200172a0:	b0002006 	imm	8198
200172a4:	f8601bbc 	swi	r3, r0, 7100	// 20061bbc <index_VALUE>
		index_LAST += 1;
200172a8:	b0002006 	imm	8198
200172ac:	e8601bc4 	lwi	r3, r0, 7108	// 20061bc4 <index_LAST>
200172b0:	30630001 	addik	r3, r3, 1
200172b4:	b0002006 	imm	8198
200172b8:	f8601bc4 	swi	r3, r0, 7108	// 20061bc4 <index_LAST>
		index_QFS += 64;
200172bc:	b0002006 	imm	8198
200172c0:	e8601bcc 	lwi	r3, r0, 7116	// 20061bcc <index_QFS>
200172c4:	30630040 	addik	r3, r3, 64
200172c8:	b0002006 	imm	8198
200172cc:	f8601bcc 	swi	r3, r0, 7116	// 20061bcc <index_QFS>
		
		read_end_RUN();
200172d0:	b9f4fb3c 	brlid	r15, -1220	// 20016e0c <read_end_RUN>
200172d4:	80000000 	or	r0, r0, r0
		read_end_VALUE();
200172d8:	b9f4fbdc 	brlid	r15, -1060	// 20016eb4 <read_end_VALUE>
200172dc:	80000000 	or	r0, r0, r0
		read_end_LAST();
200172e0:	b9f4fc7c 	brlid	r15, -900	// 20016f5c <read_end_LAST>
200172e4:	80000000 	or	r0, r0, r0
		write_end_QFS();
200172e8:	b9f4fd1c 	brlid	r15, -740	// 20017004 <write_end_QFS>
200172ec:	80000000 	or	r0, r0, r0
	}
200172f0:	e9e10000 	lwi	r15, r1, 0
200172f4:	10330000 	addk	r1, r19, r0
200172f8:	ea61003c 	lwi	r19, r1, 60
200172fc:	30210040 	addik	r1, r1, 64
20017300:	b60f0008 	rtsd	r15, 8
20017304:	80000000 	or	r0, r0, r0

20017308 <isSchedulable_run>:
	static i32 isSchedulable_run() {
20017308:	3021fff4 	addik	r1, r1, -12
2001730c:	fa610008 	swi	r19, r1, 8
20017310:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
20017314:	30600001 	addik	r3, r0, 1
20017318:	f8730004 	swi	r3, r19, 4
		return result;
2001731c:	e8730004 	lwi	r3, r19, 4
	}
20017320:	10330000 	addk	r1, r19, r0
20017324:	ea610008 	lwi	r19, r1, 8
20017328:	3021000c 	addik	r1, r1, 12
2001732c:	b60f0008 	rtsd	r15, 8
20017330:	80000000 	or	r0, r0, r0

20017334 <run>:
	
	static void run() {
20017334:	3021ffc8 	addik	r1, r1, -56
20017338:	f9e10000 	swi	r15, r1, 0
2001733c:	fa610034 	swi	r19, r1, 52
20017340:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_RUN = index_RUN % SIZE_RUN;
20017344:	b0002006 	imm	8198
20017348:	e8601bb4 	lwi	r3, r0, 7092	// 20061bb4 <index_RUN>
2001734c:	a46301ff 	andi	r3, r3, 511
20017350:	f873001c 	swi	r3, r19, 28
		i32 index_aligned_VALUE = index_VALUE % SIZE_VALUE;
20017354:	b0002006 	imm	8198
20017358:	e8601bbc 	lwi	r3, r0, 7100	// 20061bbc <index_VALUE>
2001735c:	a46301ff 	andi	r3, r3, 511
20017360:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_LAST = index_LAST % SIZE_LAST;
20017364:	b0002006 	imm	8198
20017368:	e8601bc4 	lwi	r3, r0, 7108	// 20061bc4 <index_LAST>
2001736c:	a46301ff 	andi	r3, r3, 511
20017370:	f8730024 	swi	r3, r19, 36
		i8 run;
		i16 value;
		i32 last;
		i8 local_count;
	
		run = tokens_RUN[(index_RUN + (0)) % SIZE_RUN];
20017374:	b0002004 	imm	8196
20017378:	e86067cc 	lwi	r3, r0, 26572	// 200467cc <decoder_parser_blkexp_RUN>
2001737c:	e8830004 	lwi	r4, r3, 4
20017380:	b0002006 	imm	8198
20017384:	e8601bb4 	lwi	r3, r0, 7092	// 20061bb4 <index_RUN>
20017388:	a46301ff 	andi	r3, r3, 511
2001738c:	10641800 	addk	r3, r4, r3
20017390:	e0630000 	lbui	r3, r3, 0
20017394:	f0730028 	sbi	r3, r19, 40
		value = tokens_VALUE[(index_VALUE + (0)) % SIZE_VALUE];
20017398:	b0002004 	imm	8196
2001739c:	e8606808 	lwi	r3, r0, 26632	// 20046808 <decoder_parser_blkexp_VALUE>
200173a0:	e8830004 	lwi	r4, r3, 4
200173a4:	b0002006 	imm	8198
200173a8:	e8601bbc 	lwi	r3, r0, 7100	// 20061bbc <index_VALUE>
200173ac:	a46301ff 	andi	r3, r3, 511
200173b0:	10631800 	addk	r3, r3, r3
200173b4:	10641800 	addk	r3, r4, r3
200173b8:	e4630000 	lhui	r3, r3, 0
200173bc:	f473002a 	shi	r3, r19, 42
		last = tokens_LAST[(index_LAST + (0)) % SIZE_LAST];
200173c0:	b0002004 	imm	8196
200173c4:	e86067e4 	lwi	r3, r0, 26596	// 200467e4 <decoder_parser_blkexp_LAST>
200173c8:	e8830004 	lwi	r4, r3, 4
200173cc:	b0002006 	imm	8198
200173d0:	e8601bc4 	lwi	r3, r0, 7108	// 20061bc4 <index_LAST>
200173d4:	a46301ff 	andi	r3, r3, 511
200173d8:	64630402 	bslli	r3, r3, 2
200173dc:	10641800 	addk	r3, r4, r3
200173e0:	e8630000 	lwi	r3, r3, 0
200173e4:	f873002c 	swi	r3, r19, 44
		local_count = count;
200173e8:	b0002006 	imm	8198
200173ec:	e0601bd4 	lbui	r3, r0, 7124	// 20061bd4 <count>
200173f0:	f0730030 	sbi	r3, r19, 48
		qfs[local_count + run] = value;
200173f4:	e0730030 	lbui	r3, r19, 48
200173f8:	90830060 	sext8	r4, r3
200173fc:	e0730028 	lbui	r3, r19, 40
20017400:	90630060 	sext8	r3, r3
20017404:	10641800 	addk	r3, r4, r3
20017408:	10631800 	addk	r3, r3, r3
2001740c:	b0002006 	imm	8198
20017410:	30631bd8 	addik	r3, r3, 7128
20017414:	e493002a 	lhui	r4, r19, 42
20017418:	f4830000 	shi	r4, r3, 0
		local_count = count;
2001741c:	b0002006 	imm	8198
20017420:	e0601bd4 	lbui	r3, r0, 7124	// 20061bd4 <count>
20017424:	f0730030 	sbi	r3, r19, 48
		count = local_count + run + 1;
20017428:	e0930030 	lbui	r4, r19, 48
2001742c:	e0730028 	lbui	r3, r19, 40
20017430:	10641800 	addk	r3, r4, r3
20017434:	a46300ff 	andi	r3, r3, 255
20017438:	30630001 	addik	r3, r3, 1
2001743c:	a46300ff 	andi	r3, r3, 255
20017440:	90630060 	sext8	r3, r3
20017444:	b0002006 	imm	8198
20017448:	f0601bd4 	sbi	r3, r0, 7124	// 20061bd4 <count>
	
		// Update ports indexes
		index_RUN += 1;
2001744c:	b0002006 	imm	8198
20017450:	e8601bb4 	lwi	r3, r0, 7092	// 20061bb4 <index_RUN>
20017454:	30630001 	addik	r3, r3, 1
20017458:	b0002006 	imm	8198
2001745c:	f8601bb4 	swi	r3, r0, 7092	// 20061bb4 <index_RUN>
		index_VALUE += 1;
20017460:	b0002006 	imm	8198
20017464:	e8601bbc 	lwi	r3, r0, 7100	// 20061bbc <index_VALUE>
20017468:	30630001 	addik	r3, r3, 1
2001746c:	b0002006 	imm	8198
20017470:	f8601bbc 	swi	r3, r0, 7100	// 20061bbc <index_VALUE>
		index_LAST += 1;
20017474:	b0002006 	imm	8198
20017478:	e8601bc4 	lwi	r3, r0, 7108	// 20061bc4 <index_LAST>
2001747c:	30630001 	addik	r3, r3, 1
20017480:	b0002006 	imm	8198
20017484:	f8601bc4 	swi	r3, r0, 7108	// 20061bc4 <index_LAST>
		
		read_end_RUN();
20017488:	b9f4f984 	brlid	r15, -1660	// 20016e0c <read_end_RUN>
2001748c:	80000000 	or	r0, r0, r0
		read_end_VALUE();
20017490:	b9f4fa24 	brlid	r15, -1500	// 20016eb4 <read_end_VALUE>
20017494:	80000000 	or	r0, r0, r0
		read_end_LAST();
20017498:	b9f4fac4 	brlid	r15, -1340	// 20016f5c <read_end_LAST>
2001749c:	80000000 	or	r0, r0, r0
	}
200174a0:	e9e10000 	lwi	r15, r1, 0
200174a4:	10330000 	addk	r1, r19, r0
200174a8:	ea610034 	lwi	r19, r1, 52
200174ac:	30210038 	addik	r1, r1, 56
200174b0:	b60f0008 	rtsd	r15, 8
200174b4:	80000000 	or	r0, r0, r0

200174b8 <decoder_parser_blkexp_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_parser_blkexp_initialize() {
200174b8:	3021fff4 	addik	r1, r1, -12
200174bc:	fa610008 	swi	r19, r1, 8
200174c0:	12610000 	addk	r19, r1, r0
		int i = 0;
200174c4:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_start;
200174c8:	30600001 	addik	r3, r0, 1
200174cc:	b0002006 	imm	8198
200174d0:	f8601c58 	swi	r3, r0, 7256	// 20061c58 <_FSM_state>
		
	finished:
		// no read_end/write_end here!
		return;
200174d4:	80000000 	or	r0, r0, r0
	}
200174d8:	10330000 	addk	r1, r19, r0
200174dc:	ea610008 	lwi	r19, r1, 8
200174e0:	3021000c 	addik	r1, r1, 12
200174e4:	b60f0008 	rtsd	r15, 8
200174e8:	80000000 	or	r0, r0, r0

200174ec <decoder_parser_blkexp_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	
	int decoder_parser_blkexp_scheduler() {
200174ec:	3021ffd0 	addik	r1, r1, -48
200174f0:	f9e10000 	swi	r15, r1, 0
200174f4:	fa61002c 	swi	r19, r1, 44
200174f8:	12610000 	addk	r19, r1, r0
		int i = 0;
200174fc:	f813001c 	swi	r0, r19, 28
		if(needInit){
20017500:	b0002004 	imm	8196
20017504:	e06068c0 	lbui	r3, r0, 26816	// 200468c0 <needInit>
20017508:	bc030014 	beqi	r3, 20		// 2001751c
			decoder_parser_blkexp_initialize();
2001750c:	b9f4ffac 	brlid	r15, -84	// 200174b8 <decoder_parser_blkexp_initialize>
20017510:	80000000 	or	r0, r0, r0
			needInit = 0;
20017514:	b0002004 	imm	8196
20017518:	f00068c0 	sbi	r0, r0, 26816	// 200468c0 <needInit>
		}
	
		read_RUN();
2001751c:	b9f4f880 	brlid	r15, -1920	// 20016d9c <read_RUN>
20017520:	80000000 	or	r0, r0, r0
		read_VALUE();
20017524:	b9f4f920 	brlid	r15, -1760	// 20016e44 <read_VALUE>
20017528:	80000000 	or	r0, r0, r0
		read_LAST();
2001752c:	b9f4f9c0 	brlid	r15, -1600	// 20016eec <read_LAST>
20017530:	80000000 	or	r0, r0, r0
		write_QFS();
20017534:	b9f4fa60 	brlid	r15, -1440	// 20016f94 <write_QFS>
20017538:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
2001753c:	b0002006 	imm	8198
20017540:	e8601c58 	lwi	r3, r0, 7256	// 20061c58 <_FSM_state>
20017544:	bc03001c 	beqi	r3, 28		// 20017560
20017548:	a8630001 	xori	r3, r3, 1
2001754c:	bc030160 	beqi	r3, 352		// 200176ac
		case my_state_run:
			goto l_run;
		case my_state_start:
			goto l_start;
		default:
			exit(1);
20017550:	30a00001 	addik	r5, r0, 1
20017554:	b000dffe 	imm	-8194
20017558:	b9f48e40 	brlid	r15, -29120	// 398 <exit>
2001755c:	80000000 	or	r0, r0, r0
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_run:
			goto l_run;
20017560:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_run:
			if (numTokens_RUN - index_RUN >= 1 && numTokens_VALUE - index_VALUE >= 1 && numTokens_LAST - index_LAST >= 1 && isSchedulable_last()) {
20017564:	b0002006 	imm	8198
20017568:	e8801bb8 	lwi	r4, r0, 7096	// 20061bb8 <numTokens_RUN>
2001756c:	b0002006 	imm	8198
20017570:	e8601bb4 	lwi	r3, r0, 7092	// 20061bb4 <index_RUN>
20017574:	88641800 	xor	r3, r4, r3
20017578:	bc0300a4 	beqi	r3, 164		// 2001761c
2001757c:	b0002006 	imm	8198
20017580:	e8801bc0 	lwi	r4, r0, 7104	// 20061bc0 <numTokens_VALUE>
20017584:	b0002006 	imm	8198
20017588:	e8601bbc 	lwi	r3, r0, 7100	// 20061bbc <index_VALUE>
2001758c:	88641800 	xor	r3, r4, r3
20017590:	bc03008c 	beqi	r3, 140		// 2001761c
20017594:	b0002006 	imm	8198
20017598:	e8801bc8 	lwi	r4, r0, 7112	// 20061bc8 <numTokens_LAST>
2001759c:	b0002006 	imm	8198
200175a0:	e8601bc4 	lwi	r3, r0, 7108	// 20061bc4 <index_LAST>
200175a4:	88641800 	xor	r3, r4, r3
200175a8:	bc030074 	beqi	r3, 116		// 2001761c
200175ac:	b9f4fb1c 	brlid	r15, -1252	// 200170c8 <isSchedulable_last>
200175b0:	80000000 	or	r0, r0, r0
200175b4:	bc030068 	beqi	r3, 104		// 2001761c
				int stop = 0;
200175b8:	f8130020 	swi	r0, r19, 32
				if (64 > SIZE_QFS - index_QFS + decoder_parser_blkexp_QFS->read_inds[0]) {
200175bc:	b0002004 	imm	8196
200175c0:	e8606814 	lwi	r3, r0, 26644	// 20046814 <decoder_parser_blkexp_QFS>
200175c4:	e863000c 	lwi	r3, r3, 12
200175c8:	e8830000 	lwi	r4, r3, 0
200175cc:	b0002006 	imm	8198
200175d0:	e8601bcc 	lwi	r3, r0, 7116	// 20061bcc <index_QFS>
200175d4:	14632000 	rsubk	r3, r3, r4
200175d8:	30830200 	addik	r4, r3, 512
200175dc:	3060003f 	addik	r3, r0, 63
200175e0:	16441803 	cmpu	r18, r4, r3
200175e4:	bc52000c 	blti	r18, 12		// 200175f0
					stop = 1;
200175e8:	30600001 	addik	r3, r0, 1
200175ec:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
200175f0:	e8730020 	lwi	r3, r19, 32
200175f4:	bc030010 	beqi	r3, 16		// 20017604
					_FSM_state = my_state_run;
200175f8:	b0002006 	imm	8198
200175fc:	f8001c58 	swi	r0, r0, 7256	// 20061c58 <_FSM_state>
					goto finished;
20017600:	b8000100 	bri	256		// 20017700
				}
				last();
20017604:	b9f4fb18 	brlid	r15, -1256	// 2001711c <last>
20017608:	80000000 	or	r0, r0, r0
				i++;
2001760c:	e873001c 	lwi	r3, r19, 28
20017610:	30630001 	addik	r3, r3, 1
20017614:	f873001c 	swi	r3, r19, 28
				goto l_start;
20017618:	b8000098 	bri	152		// 200176b0
			} else if (numTokens_RUN - index_RUN >= 1 && numTokens_VALUE - index_VALUE >= 1 && numTokens_LAST - index_LAST >= 1 && isSchedulable_run()) {
2001761c:	b0002006 	imm	8198
20017620:	e8801bb8 	lwi	r4, r0, 7096	// 20061bb8 <numTokens_RUN>
20017624:	b0002006 	imm	8198
20017628:	e8601bb4 	lwi	r3, r0, 7092	// 20061bb4 <index_RUN>
2001762c:	88641800 	xor	r3, r4, r3
20017630:	bc030070 	beqi	r3, 112		// 200176a0
20017634:	b0002006 	imm	8198
20017638:	e8801bc0 	lwi	r4, r0, 7104	// 20061bc0 <numTokens_VALUE>
2001763c:	b0002006 	imm	8198
20017640:	e8601bbc 	lwi	r3, r0, 7100	// 20061bbc <index_VALUE>
20017644:	88641800 	xor	r3, r4, r3
20017648:	bc030058 	beqi	r3, 88		// 200176a0
2001764c:	b0002006 	imm	8198
20017650:	e8801bc8 	lwi	r4, r0, 7112	// 20061bc8 <numTokens_LAST>
20017654:	b0002006 	imm	8198
20017658:	e8601bc4 	lwi	r3, r0, 7108	// 20061bc4 <index_LAST>
2001765c:	88641800 	xor	r3, r4, r3
20017660:	bc030040 	beqi	r3, 64		// 200176a0
20017664:	b9f4fca4 	brlid	r15, -860	// 20017308 <isSchedulable_run>
20017668:	80000000 	or	r0, r0, r0
2001766c:	bc030034 	beqi	r3, 52		// 200176a0
				int stop = 0;
20017670:	f8130024 	swi	r0, r19, 36
				if (stop != 0) {
20017674:	e8730024 	lwi	r3, r19, 36
20017678:	bc030010 	beqi	r3, 16		// 20017688
					_FSM_state = my_state_run;
2001767c:	b0002006 	imm	8198
20017680:	f8001c58 	swi	r0, r0, 7256	// 20061c58 <_FSM_state>
					goto finished;
20017684:	b800007c 	bri	124		// 20017700
				}
				run();
20017688:	b9f4fcac 	brlid	r15, -852	// 20017334 <run>
2001768c:	80000000 	or	r0, r0, r0
				i++;
20017690:	e873001c 	lwi	r3, r19, 28
20017694:	30630001 	addik	r3, r3, 1
20017698:	f873001c 	swi	r3, r19, 28
				goto l_run;
2001769c:	b800fec8 	bri	-312		// 20017564
			} else {
				_FSM_state = my_state_run;
200176a0:	b0002006 	imm	8198
200176a4:	f8001c58 	swi	r0, r0, 7256	// 20061c58 <_FSM_state>
				goto finished;
200176a8:	b8000058 	bri	88		// 20017700
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_run:
			goto l_run;
		case my_state_start:
			goto l_start;
200176ac:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_run;
				goto finished;
			}
		l_start:
			if (isSchedulable_start()) {
200176b0:	b9f4f98c 	brlid	r15, -1652	// 2001703c <isSchedulable_start>
200176b4:	80000000 	or	r0, r0, r0
200176b8:	bc030038 	beqi	r3, 56		// 200176f0
				int stop = 0;
200176bc:	f8130028 	swi	r0, r19, 40
				if (stop != 0) {
200176c0:	e8730028 	lwi	r3, r19, 40
200176c4:	bc030014 	beqi	r3, 20		// 200176d8
					_FSM_state = my_state_start;
200176c8:	30600001 	addik	r3, r0, 1
200176cc:	b0002006 	imm	8198
200176d0:	f8601c58 	swi	r3, r0, 7256	// 20061c58 <_FSM_state>
					goto finished;
200176d4:	b800002c 	bri	44		// 20017700
				}
				start();
200176d8:	b9f4f990 	brlid	r15, -1648	// 20017068 <start>
200176dc:	80000000 	or	r0, r0, r0
				i++;
200176e0:	e873001c 	lwi	r3, r19, 28
200176e4:	30630001 	addik	r3, r3, 1
200176e8:	f873001c 	swi	r3, r19, 28
				goto l_run;
200176ec:	b800fe78 	bri	-392		// 20017564
			} else {
				_FSM_state = my_state_start;
200176f0:	30600001 	addik	r3, r0, 1
200176f4:	b0002006 	imm	8198
200176f8:	f8601c58 	swi	r3, r0, 7256	// 20061c58 <_FSM_state>
				goto finished;
200176fc:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_RUN();
20017700:	b9f4f70c 	brlid	r15, -2292	// 20016e0c <read_end_RUN>
20017704:	80000000 	or	r0, r0, r0
		read_end_VALUE();
20017708:	b9f4f7ac 	brlid	r15, -2132	// 20016eb4 <read_end_VALUE>
2001770c:	80000000 	or	r0, r0, r0
		read_end_LAST();
20017710:	b9f4f84c 	brlid	r15, -1972	// 20016f5c <read_end_LAST>
20017714:	80000000 	or	r0, r0, r0
		
		write_end_QFS();
20017718:	b9f4f8ec 	brlid	r15, -1812	// 20017004 <write_end_QFS>
2001771c:	80000000 	or	r0, r0, r0
		
		
		return i;
20017720:	e873001c 	lwi	r3, r19, 28
	}
20017724:	e9e10000 	lwi	r15, r1, 0
20017728:	10330000 	addk	r1, r19, r0
2001772c:	ea61002c 	lwi	r19, r1, 44
20017730:	30210030 	addik	r1, r1, 48
20017734:	b60f0008 	rtsd	r15, 8
20017738:	80000000 	or	r0, r0, r0

2001773c <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001773c:	3021fff8 	addik	r1, r1, -8
20017740:	fa610004 	swi	r19, r1, 4
20017744:	12610000 	addk	r19, r1, r0
20017748:	f8b3000c 	swi	r5, r19, 12
2001774c:	f8d30010 	swi	r6, r19, 16
20017750:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20017754:	e873000c 	lwi	r3, r19, 12
20017758:	e8630010 	lwi	r3, r3, 16
2001775c:	e8830000 	lwi	r4, r3, 0
20017760:	e873000c 	lwi	r3, r19, 12
20017764:	e8a3000c 	lwi	r5, r3, 12
20017768:	e8730010 	lwi	r3, r19, 16
2001776c:	64630402 	bslli	r3, r3, 2
20017770:	10651800 	addk	r3, r5, r3
20017774:	e8630000 	lwi	r3, r3, 0
20017778:	14a32000 	rsubk	r5, r3, r4
2001777c:	30600001 	addik	r3, r0, 1
20017780:	e8930014 	lwi	r4, r19, 20
20017784:	16442803 	cmpu	r18, r4, r5
20017788:	bcb20008 	bgei	r18, 8		// 20017790
2001778c:	10600000 	addk	r3, r0, r0
20017790:	a46300ff 	andi	r3, r3, 255
}
20017794:	10330000 	addk	r1, r19, r0
20017798:	ea610004 	lwi	r19, r1, 4
2001779c:	30210008 	addik	r1, r1, 8
200177a0:	b60f0008 	rtsd	r15, 8
200177a4:	80000000 	or	r0, r0, r0

200177a8 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200177a8:	3021fff8 	addik	r1, r1, -8
200177ac:	fa610004 	swi	r19, r1, 4
200177b0:	12610000 	addk	r19, r1, r0
200177b4:	f8b3000c 	swi	r5, r19, 12
200177b8:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200177bc:	e873000c 	lwi	r3, r19, 12
200177c0:	e8630010 	lwi	r3, r3, 16
200177c4:	e8830000 	lwi	r4, r3, 0
200177c8:	e873000c 	lwi	r3, r19, 12
200177cc:	e8a3000c 	lwi	r5, r3, 12
200177d0:	e8730010 	lwi	r3, r19, 16
200177d4:	64630402 	bslli	r3, r3, 2
200177d8:	10651800 	addk	r3, r5, r3
200177dc:	e8630000 	lwi	r3, r3, 0
200177e0:	14632000 	rsubk	r3, r3, r4
}
200177e4:	10330000 	addk	r1, r19, r0
200177e8:	ea610004 	lwi	r19, r1, 4
200177ec:	30210008 	addik	r1, r1, 8
200177f0:	b60f0008 	rtsd	r15, 8
200177f4:	80000000 	or	r0, r0, r0

200177f8 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200177f8:	3021fff4 	addik	r1, r1, -12
200177fc:	fa610008 	swi	r19, r1, 8
20017800:	12610000 	addk	r19, r1, r0
20017804:	f8b30010 	swi	r5, r19, 16
20017808:	f8d30014 	swi	r6, r19, 20
2001780c:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20017810:	f8130004 	swi	r0, r19, 4
20017814:	b800005c 	bri	92		// 20017870
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20017818:	e8730010 	lwi	r3, r19, 16
2001781c:	e8830000 	lwi	r4, r3, 0
20017820:	e8730010 	lwi	r3, r19, 16
20017824:	e8a3000c 	lwi	r5, r3, 12
20017828:	e8730004 	lwi	r3, r19, 4
2001782c:	64630402 	bslli	r3, r3, 2
20017830:	10651800 	addk	r3, r5, r3
20017834:	e8a30000 	lwi	r5, r3, 0
20017838:	e8730010 	lwi	r3, r19, 16
2001783c:	e8630010 	lwi	r3, r3, 16
20017840:	e8630000 	lwi	r3, r3, 0
20017844:	14632800 	rsubk	r3, r3, r5
20017848:	10641800 	addk	r3, r4, r3
2001784c:	30830001 	addik	r4, r3, 1
20017850:	e8730018 	lwi	r3, r19, 24
20017854:	16441803 	cmpu	r18, r4, r3
20017858:	bc52000c 	blti	r18, 12		// 20017864
            return 0;
2001785c:	10600000 	addk	r3, r0, r0
20017860:	b8000024 	bri	36		// 20017884
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20017864:	e8730004 	lwi	r3, r19, 4
20017868:	30630001 	addik	r3, r3, 1
2001786c:	f8730004 	swi	r3, r19, 4
20017870:	e8930004 	lwi	r4, r19, 4
20017874:	e8730014 	lwi	r3, r19, 20
20017878:	16432003 	cmpu	r18, r3, r4
2001787c:	bc52ff9c 	blti	r18, -100		// 20017818
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20017880:	30600001 	addik	r3, r0, 1
}
20017884:	10330000 	addk	r1, r19, r0
20017888:	ea610008 	lwi	r19, r1, 8
2001788c:	3021000c 	addik	r1, r1, 12
20017890:	b60f0008 	rtsd	r15, 8
20017894:	80000000 	or	r0, r0, r0

20017898 <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20017898:	3021ffec 	addik	r1, r1, -20
2001789c:	fa610010 	swi	r19, r1, 16
200178a0:	12610000 	addk	r19, r1, r0
200178a4:	f8b30018 	swi	r5, r19, 24
200178a8:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200178ac:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200178b0:	f8130004 	swi	r0, r19, 4
200178b4:	b8000054 	bri	84		// 20017908
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200178b8:	e8730018 	lwi	r3, r19, 24
200178bc:	e8630010 	lwi	r3, r3, 16
200178c0:	e8830000 	lwi	r4, r3, 0
200178c4:	e8730018 	lwi	r3, r19, 24
200178c8:	e8a3000c 	lwi	r5, r3, 12
200178cc:	e8730004 	lwi	r3, r19, 4
200178d0:	64630402 	bslli	r3, r3, 2
200178d4:	10651800 	addk	r3, r5, r3
200178d8:	e8630000 	lwi	r3, r3, 0
200178dc:	14632000 	rsubk	r3, r3, r4
200178e0:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200178e4:	e8930008 	lwi	r4, r19, 8
200178e8:	e873000c 	lwi	r3, r19, 12
200178ec:	16441803 	cmpu	r18, r4, r3
200178f0:	bcb20008 	bgei	r18, 8		// 200178f8
200178f4:	10640000 	addk	r3, r4, r0
200178f8:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200178fc:	e8730004 	lwi	r3, r19, 4
20017900:	30630001 	addik	r3, r3, 1
20017904:	f8730004 	swi	r3, r19, 4
20017908:	e8930004 	lwi	r4, r19, 4
2001790c:	e873001c 	lwi	r3, r19, 28
20017910:	16432003 	cmpu	r18, r3, r4
20017914:	bc52ffa4 	blti	r18, -92		// 200178b8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20017918:	e8730018 	lwi	r3, r19, 24
2001791c:	e8830000 	lwi	r4, r3, 0
20017920:	e8730008 	lwi	r3, r19, 8
20017924:	14632000 	rsubk	r3, r3, r4
}
20017928:	10330000 	addk	r1, r19, r0
2001792c:	ea610010 	lwi	r19, r1, 16
20017930:	30210014 	addik	r1, r1, 20
20017934:	b60f0008 	rtsd	r15, 8
20017938:	80000000 	or	r0, r0, r0

2001793c <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001793c:	3021fff4 	addik	r1, r1, -12
20017940:	fa610008 	swi	r19, r1, 8
20017944:	12610000 	addk	r19, r1, r0
20017948:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2001794c:	e8730010 	lwi	r3, r19, 16
20017950:	e8630010 	lwi	r3, r3, 16
20017954:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20017958:	f8130004 	swi	r0, r19, 4
2001795c:	b8000028 	bri	40		// 20017984
        fifo->read_inds[i] = 0;
20017960:	e8730010 	lwi	r3, r19, 16
20017964:	e883000c 	lwi	r4, r3, 12
20017968:	e8730004 	lwi	r3, r19, 4
2001796c:	64630402 	bslli	r3, r3, 2
20017970:	10641800 	addk	r3, r4, r3
20017974:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20017978:	e8730004 	lwi	r3, r19, 4
2001797c:	30630001 	addik	r3, r3, 1
20017980:	f8730004 	swi	r3, r19, 4
20017984:	e8730010 	lwi	r3, r19, 16
20017988:	e8830008 	lwi	r4, r3, 8
2001798c:	e8730004 	lwi	r3, r19, 4
20017990:	16441803 	cmpu	r18, r4, r3
20017994:	bc52ffcc 	blti	r18, -52		// 20017960
        fifo->read_inds[i] = 0;
    }
}
20017998:	10330000 	addk	r1, r19, r0
2001799c:	ea610008 	lwi	r19, r1, 8
200179a0:	3021000c 	addik	r1, r1, 12
200179a4:	b60f0008 	rtsd	r15, 8
200179a8:	80000000 	or	r0, r0, r0

200179ac <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200179ac:	3021fff4 	addik	r1, r1, -12
200179b0:	fa610008 	swi	r19, r1, 8
200179b4:	12610000 	addk	r19, r1, r0
200179b8:	f8b30010 	swi	r5, r19, 16
200179bc:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200179c0:	e8730010 	lwi	r3, r19, 16
200179c4:	e8830004 	lwi	r4, r3, 4
200179c8:	e8730010 	lwi	r3, r19, 16
200179cc:	e8a3000c 	lwi	r5, r3, 12
200179d0:	e8730014 	lwi	r3, r19, 20
200179d4:	64630402 	bslli	r3, r3, 2
200179d8:	10651800 	addk	r3, r5, r3
200179dc:	e8a30000 	lwi	r5, r3, 0
200179e0:	e8730010 	lwi	r3, r19, 16
200179e4:	e8630000 	lwi	r3, r3, 0
200179e8:	3063ffff 	addik	r3, r3, -1
200179ec:	84651800 	and	r3, r5, r3
200179f0:	10641800 	addk	r3, r4, r3
200179f4:	e0630000 	lbui	r3, r3, 0
200179f8:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200179fc:	e8730010 	lwi	r3, r19, 16
20017a00:	e883000c 	lwi	r4, r3, 12
20017a04:	e8730014 	lwi	r3, r19, 20
20017a08:	64630402 	bslli	r3, r3, 2
20017a0c:	10641800 	addk	r3, r4, r3
20017a10:	e8830000 	lwi	r4, r3, 0
20017a14:	30840001 	addik	r4, r4, 1
20017a18:	f8830000 	swi	r4, r3, 0
    return value;
20017a1c:	e0730004 	lbui	r3, r19, 4
20017a20:	90630060 	sext8	r3, r3
}
20017a24:	10330000 	addk	r1, r19, r0
20017a28:	ea610008 	lwi	r19, r1, 8
20017a2c:	3021000c 	addik	r1, r1, 12
20017a30:	b60f0008 	rtsd	r15, 8
20017a34:	80000000 	or	r0, r0, r0

20017a38 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20017a38:	3021fff8 	addik	r1, r1, -8
20017a3c:	fa610004 	swi	r19, r1, 4
20017a40:	12610000 	addk	r19, r1, r0
20017a44:	f8b3000c 	swi	r5, r19, 12
20017a48:	10660000 	addk	r3, r6, r0
20017a4c:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20017a50:	e873000c 	lwi	r3, r19, 12
20017a54:	e8830004 	lwi	r4, r3, 4
20017a58:	e873000c 	lwi	r3, r19, 12
20017a5c:	e8630010 	lwi	r3, r3, 16
20017a60:	e8a30000 	lwi	r5, r3, 0
20017a64:	e873000c 	lwi	r3, r19, 12
20017a68:	e8630000 	lwi	r3, r3, 0
20017a6c:	3063ffff 	addik	r3, r3, -1
20017a70:	84651800 	and	r3, r5, r3
20017a74:	10641800 	addk	r3, r4, r3
20017a78:	e0930010 	lbui	r4, r19, 16
20017a7c:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20017a80:	e873000c 	lwi	r3, r19, 12
20017a84:	e8630010 	lwi	r3, r3, 16
20017a88:	e8830000 	lwi	r4, r3, 0
20017a8c:	30840001 	addik	r4, r4, 1
20017a90:	f8830000 	swi	r4, r3, 0
}
20017a94:	10330000 	addk	r1, r19, r0
20017a98:	ea610004 	lwi	r19, r1, 4
20017a9c:	30210008 	addik	r1, r1, 8
20017aa0:	b60f0008 	rtsd	r15, 8
20017aa4:	80000000 	or	r0, r0, r0

20017aa8 <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20017aa8:	3021fff8 	addik	r1, r1, -8
20017aac:	fa610004 	swi	r19, r1, 4
20017ab0:	12610000 	addk	r19, r1, r0
20017ab4:	f8b3000c 	swi	r5, r19, 12
20017ab8:	f8d30010 	swi	r6, r19, 16
20017abc:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20017ac0:	e873000c 	lwi	r3, r19, 12
20017ac4:	e8630010 	lwi	r3, r3, 16
20017ac8:	e8830000 	lwi	r4, r3, 0
20017acc:	e873000c 	lwi	r3, r19, 12
20017ad0:	e8a3000c 	lwi	r5, r3, 12
20017ad4:	e8730010 	lwi	r3, r19, 16
20017ad8:	64630402 	bslli	r3, r3, 2
20017adc:	10651800 	addk	r3, r5, r3
20017ae0:	e8630000 	lwi	r3, r3, 0
20017ae4:	14a32000 	rsubk	r5, r3, r4
20017ae8:	30600001 	addik	r3, r0, 1
20017aec:	e8930014 	lwi	r4, r19, 20
20017af0:	16442803 	cmpu	r18, r4, r5
20017af4:	bcb20008 	bgei	r18, 8		// 20017afc
20017af8:	10600000 	addk	r3, r0, r0
20017afc:	a46300ff 	andi	r3, r3, 255
}
20017b00:	10330000 	addk	r1, r19, r0
20017b04:	ea610004 	lwi	r19, r1, 4
20017b08:	30210008 	addik	r1, r1, 8
20017b0c:	b60f0008 	rtsd	r15, 8
20017b10:	80000000 	or	r0, r0, r0

20017b14 <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20017b14:	3021fff8 	addik	r1, r1, -8
20017b18:	fa610004 	swi	r19, r1, 4
20017b1c:	12610000 	addk	r19, r1, r0
20017b20:	f8b3000c 	swi	r5, r19, 12
20017b24:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20017b28:	e873000c 	lwi	r3, r19, 12
20017b2c:	e8630010 	lwi	r3, r3, 16
20017b30:	e8830000 	lwi	r4, r3, 0
20017b34:	e873000c 	lwi	r3, r19, 12
20017b38:	e8a3000c 	lwi	r5, r3, 12
20017b3c:	e8730010 	lwi	r3, r19, 16
20017b40:	64630402 	bslli	r3, r3, 2
20017b44:	10651800 	addk	r3, r5, r3
20017b48:	e8630000 	lwi	r3, r3, 0
20017b4c:	14632000 	rsubk	r3, r3, r4
}
20017b50:	10330000 	addk	r1, r19, r0
20017b54:	ea610004 	lwi	r19, r1, 4
20017b58:	30210008 	addik	r1, r1, 8
20017b5c:	b60f0008 	rtsd	r15, 8
20017b60:	80000000 	or	r0, r0, r0

20017b64 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20017b64:	3021fff4 	addik	r1, r1, -12
20017b68:	fa610008 	swi	r19, r1, 8
20017b6c:	12610000 	addk	r19, r1, r0
20017b70:	f8b30010 	swi	r5, r19, 16
20017b74:	f8d30014 	swi	r6, r19, 20
20017b78:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20017b7c:	f8130004 	swi	r0, r19, 4
20017b80:	b800005c 	bri	92		// 20017bdc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20017b84:	e8730010 	lwi	r3, r19, 16
20017b88:	e8830000 	lwi	r4, r3, 0
20017b8c:	e8730010 	lwi	r3, r19, 16
20017b90:	e8a3000c 	lwi	r5, r3, 12
20017b94:	e8730004 	lwi	r3, r19, 4
20017b98:	64630402 	bslli	r3, r3, 2
20017b9c:	10651800 	addk	r3, r5, r3
20017ba0:	e8a30000 	lwi	r5, r3, 0
20017ba4:	e8730010 	lwi	r3, r19, 16
20017ba8:	e8630010 	lwi	r3, r3, 16
20017bac:	e8630000 	lwi	r3, r3, 0
20017bb0:	14632800 	rsubk	r3, r3, r5
20017bb4:	10641800 	addk	r3, r4, r3
20017bb8:	30830001 	addik	r4, r3, 1
20017bbc:	e8730018 	lwi	r3, r19, 24
20017bc0:	16441803 	cmpu	r18, r4, r3
20017bc4:	bc52000c 	blti	r18, 12		// 20017bd0
            return 0;
20017bc8:	10600000 	addk	r3, r0, r0
20017bcc:	b8000024 	bri	36		// 20017bf0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20017bd0:	e8730004 	lwi	r3, r19, 4
20017bd4:	30630001 	addik	r3, r3, 1
20017bd8:	f8730004 	swi	r3, r19, 4
20017bdc:	e8930004 	lwi	r4, r19, 4
20017be0:	e8730014 	lwi	r3, r19, 20
20017be4:	16432003 	cmpu	r18, r3, r4
20017be8:	bc52ff9c 	blti	r18, -100		// 20017b84
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20017bec:	30600001 	addik	r3, r0, 1
}
20017bf0:	10330000 	addk	r1, r19, r0
20017bf4:	ea610008 	lwi	r19, r1, 8
20017bf8:	3021000c 	addik	r1, r1, 12
20017bfc:	b60f0008 	rtsd	r15, 8
20017c00:	80000000 	or	r0, r0, r0

20017c04 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20017c04:	3021ffec 	addik	r1, r1, -20
20017c08:	fa610010 	swi	r19, r1, 16
20017c0c:	12610000 	addk	r19, r1, r0
20017c10:	f8b30018 	swi	r5, r19, 24
20017c14:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20017c18:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20017c1c:	f8130004 	swi	r0, r19, 4
20017c20:	b8000054 	bri	84		// 20017c74
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20017c24:	e8730018 	lwi	r3, r19, 24
20017c28:	e8630010 	lwi	r3, r3, 16
20017c2c:	e8830000 	lwi	r4, r3, 0
20017c30:	e8730018 	lwi	r3, r19, 24
20017c34:	e8a3000c 	lwi	r5, r3, 12
20017c38:	e8730004 	lwi	r3, r19, 4
20017c3c:	64630402 	bslli	r3, r3, 2
20017c40:	10651800 	addk	r3, r5, r3
20017c44:	e8630000 	lwi	r3, r3, 0
20017c48:	14632000 	rsubk	r3, r3, r4
20017c4c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20017c50:	e8930008 	lwi	r4, r19, 8
20017c54:	e873000c 	lwi	r3, r19, 12
20017c58:	16441803 	cmpu	r18, r4, r3
20017c5c:	bcb20008 	bgei	r18, 8		// 20017c64
20017c60:	10640000 	addk	r3, r4, r0
20017c64:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20017c68:	e8730004 	lwi	r3, r19, 4
20017c6c:	30630001 	addik	r3, r3, 1
20017c70:	f8730004 	swi	r3, r19, 4
20017c74:	e8930004 	lwi	r4, r19, 4
20017c78:	e873001c 	lwi	r3, r19, 28
20017c7c:	16432003 	cmpu	r18, r3, r4
20017c80:	bc52ffa4 	blti	r18, -92		// 20017c24
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20017c84:	e8730018 	lwi	r3, r19, 24
20017c88:	e8830000 	lwi	r4, r3, 0
20017c8c:	e8730008 	lwi	r3, r19, 8
20017c90:	14632000 	rsubk	r3, r3, r4
}
20017c94:	10330000 	addk	r1, r19, r0
20017c98:	ea610010 	lwi	r19, r1, 16
20017c9c:	30210014 	addik	r1, r1, 20
20017ca0:	b60f0008 	rtsd	r15, 8
20017ca4:	80000000 	or	r0, r0, r0

20017ca8 <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20017ca8:	3021fff4 	addik	r1, r1, -12
20017cac:	fa610008 	swi	r19, r1, 8
20017cb0:	12610000 	addk	r19, r1, r0
20017cb4:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20017cb8:	e8730010 	lwi	r3, r19, 16
20017cbc:	e8630010 	lwi	r3, r3, 16
20017cc0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20017cc4:	f8130004 	swi	r0, r19, 4
20017cc8:	b8000028 	bri	40		// 20017cf0
        fifo->read_inds[i] = 0;
20017ccc:	e8730010 	lwi	r3, r19, 16
20017cd0:	e883000c 	lwi	r4, r3, 12
20017cd4:	e8730004 	lwi	r3, r19, 4
20017cd8:	64630402 	bslli	r3, r3, 2
20017cdc:	10641800 	addk	r3, r4, r3
20017ce0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20017ce4:	e8730004 	lwi	r3, r19, 4
20017ce8:	30630001 	addik	r3, r3, 1
20017cec:	f8730004 	swi	r3, r19, 4
20017cf0:	e8730010 	lwi	r3, r19, 16
20017cf4:	e8830008 	lwi	r4, r3, 8
20017cf8:	e8730004 	lwi	r3, r19, 4
20017cfc:	16441803 	cmpu	r18, r4, r3
20017d00:	bc52ffcc 	blti	r18, -52		// 20017ccc
        fifo->read_inds[i] = 0;
    }
}
20017d04:	10330000 	addk	r1, r19, r0
20017d08:	ea610008 	lwi	r19, r1, 8
20017d0c:	3021000c 	addik	r1, r1, 12
20017d10:	b60f0008 	rtsd	r15, 8
20017d14:	80000000 	or	r0, r0, r0

20017d18 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20017d18:	3021fff4 	addik	r1, r1, -12
20017d1c:	fa610008 	swi	r19, r1, 8
20017d20:	12610000 	addk	r19, r1, r0
20017d24:	f8b30010 	swi	r5, r19, 16
20017d28:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20017d2c:	e8730010 	lwi	r3, r19, 16
20017d30:	e8830004 	lwi	r4, r3, 4
20017d34:	e8730010 	lwi	r3, r19, 16
20017d38:	e8a3000c 	lwi	r5, r3, 12
20017d3c:	e8730014 	lwi	r3, r19, 20
20017d40:	64630402 	bslli	r3, r3, 2
20017d44:	10651800 	addk	r3, r5, r3
20017d48:	e8a30000 	lwi	r5, r3, 0
20017d4c:	e8730010 	lwi	r3, r19, 16
20017d50:	e8630000 	lwi	r3, r3, 0
20017d54:	3063ffff 	addik	r3, r3, -1
20017d58:	84651800 	and	r3, r5, r3
20017d5c:	10631800 	addk	r3, r3, r3
20017d60:	10641800 	addk	r3, r4, r3
20017d64:	e4630000 	lhui	r3, r3, 0
20017d68:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20017d6c:	e8730010 	lwi	r3, r19, 16
20017d70:	e883000c 	lwi	r4, r3, 12
20017d74:	e8730014 	lwi	r3, r19, 20
20017d78:	64630402 	bslli	r3, r3, 2
20017d7c:	10641800 	addk	r3, r4, r3
20017d80:	e8830000 	lwi	r4, r3, 0
20017d84:	30840001 	addik	r4, r4, 1
20017d88:	f8830000 	swi	r4, r3, 0
    return value;
20017d8c:	e4730004 	lhui	r3, r19, 4
20017d90:	90630061 	sext16	r3, r3
}
20017d94:	10330000 	addk	r1, r19, r0
20017d98:	ea610008 	lwi	r19, r1, 8
20017d9c:	3021000c 	addik	r1, r1, 12
20017da0:	b60f0008 	rtsd	r15, 8
20017da4:	80000000 	or	r0, r0, r0

20017da8 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20017da8:	3021fff8 	addik	r1, r1, -8
20017dac:	fa610004 	swi	r19, r1, 4
20017db0:	12610000 	addk	r19, r1, r0
20017db4:	f8b3000c 	swi	r5, r19, 12
20017db8:	10660000 	addk	r3, r6, r0
20017dbc:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20017dc0:	e873000c 	lwi	r3, r19, 12
20017dc4:	e8830004 	lwi	r4, r3, 4
20017dc8:	e873000c 	lwi	r3, r19, 12
20017dcc:	e8630010 	lwi	r3, r3, 16
20017dd0:	e8a30000 	lwi	r5, r3, 0
20017dd4:	e873000c 	lwi	r3, r19, 12
20017dd8:	e8630000 	lwi	r3, r3, 0
20017ddc:	3063ffff 	addik	r3, r3, -1
20017de0:	84651800 	and	r3, r5, r3
20017de4:	10631800 	addk	r3, r3, r3
20017de8:	10641800 	addk	r3, r4, r3
20017dec:	e4930010 	lhui	r4, r19, 16
20017df0:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20017df4:	e873000c 	lwi	r3, r19, 12
20017df8:	e8630010 	lwi	r3, r3, 16
20017dfc:	e8830000 	lwi	r4, r3, 0
20017e00:	30840001 	addik	r4, r4, 1
20017e04:	f8830000 	swi	r4, r3, 0
}
20017e08:	10330000 	addk	r1, r19, r0
20017e0c:	ea610004 	lwi	r19, r1, 4
20017e10:	30210008 	addik	r1, r1, 8
20017e14:	b60f0008 	rtsd	r15, 8
20017e18:	80000000 	or	r0, r0, r0

20017e1c <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20017e1c:	3021fff8 	addik	r1, r1, -8
20017e20:	fa610004 	swi	r19, r1, 4
20017e24:	12610000 	addk	r19, r1, r0
20017e28:	f8b3000c 	swi	r5, r19, 12
20017e2c:	f8d30010 	swi	r6, r19, 16
20017e30:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20017e34:	e873000c 	lwi	r3, r19, 12
20017e38:	e8630010 	lwi	r3, r3, 16
20017e3c:	e8830000 	lwi	r4, r3, 0
20017e40:	e873000c 	lwi	r3, r19, 12
20017e44:	e8a3000c 	lwi	r5, r3, 12
20017e48:	e8730010 	lwi	r3, r19, 16
20017e4c:	64630402 	bslli	r3, r3, 2
20017e50:	10651800 	addk	r3, r5, r3
20017e54:	e8630000 	lwi	r3, r3, 0
20017e58:	14a32000 	rsubk	r5, r3, r4
20017e5c:	30600001 	addik	r3, r0, 1
20017e60:	e8930014 	lwi	r4, r19, 20
20017e64:	16442803 	cmpu	r18, r4, r5
20017e68:	bcb20008 	bgei	r18, 8		// 20017e70
20017e6c:	10600000 	addk	r3, r0, r0
20017e70:	a46300ff 	andi	r3, r3, 255
}
20017e74:	10330000 	addk	r1, r19, r0
20017e78:	ea610004 	lwi	r19, r1, 4
20017e7c:	30210008 	addik	r1, r1, 8
20017e80:	b60f0008 	rtsd	r15, 8
20017e84:	80000000 	or	r0, r0, r0

20017e88 <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20017e88:	3021fff8 	addik	r1, r1, -8
20017e8c:	fa610004 	swi	r19, r1, 4
20017e90:	12610000 	addk	r19, r1, r0
20017e94:	f8b3000c 	swi	r5, r19, 12
20017e98:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20017e9c:	e873000c 	lwi	r3, r19, 12
20017ea0:	e8630010 	lwi	r3, r3, 16
20017ea4:	e8830000 	lwi	r4, r3, 0
20017ea8:	e873000c 	lwi	r3, r19, 12
20017eac:	e8a3000c 	lwi	r5, r3, 12
20017eb0:	e8730010 	lwi	r3, r19, 16
20017eb4:	64630402 	bslli	r3, r3, 2
20017eb8:	10651800 	addk	r3, r5, r3
20017ebc:	e8630000 	lwi	r3, r3, 0
20017ec0:	14632000 	rsubk	r3, r3, r4
}
20017ec4:	10330000 	addk	r1, r19, r0
20017ec8:	ea610004 	lwi	r19, r1, 4
20017ecc:	30210008 	addik	r1, r1, 8
20017ed0:	b60f0008 	rtsd	r15, 8
20017ed4:	80000000 	or	r0, r0, r0

20017ed8 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20017ed8:	3021fff4 	addik	r1, r1, -12
20017edc:	fa610008 	swi	r19, r1, 8
20017ee0:	12610000 	addk	r19, r1, r0
20017ee4:	f8b30010 	swi	r5, r19, 16
20017ee8:	f8d30014 	swi	r6, r19, 20
20017eec:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20017ef0:	f8130004 	swi	r0, r19, 4
20017ef4:	b800005c 	bri	92		// 20017f50
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20017ef8:	e8730010 	lwi	r3, r19, 16
20017efc:	e8830000 	lwi	r4, r3, 0
20017f00:	e8730010 	lwi	r3, r19, 16
20017f04:	e8a3000c 	lwi	r5, r3, 12
20017f08:	e8730004 	lwi	r3, r19, 4
20017f0c:	64630402 	bslli	r3, r3, 2
20017f10:	10651800 	addk	r3, r5, r3
20017f14:	e8a30000 	lwi	r5, r3, 0
20017f18:	e8730010 	lwi	r3, r19, 16
20017f1c:	e8630010 	lwi	r3, r3, 16
20017f20:	e8630000 	lwi	r3, r3, 0
20017f24:	14632800 	rsubk	r3, r3, r5
20017f28:	10641800 	addk	r3, r4, r3
20017f2c:	30830001 	addik	r4, r3, 1
20017f30:	e8730018 	lwi	r3, r19, 24
20017f34:	16441803 	cmpu	r18, r4, r3
20017f38:	bc52000c 	blti	r18, 12		// 20017f44
            return 0;
20017f3c:	10600000 	addk	r3, r0, r0
20017f40:	b8000024 	bri	36		// 20017f64
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20017f44:	e8730004 	lwi	r3, r19, 4
20017f48:	30630001 	addik	r3, r3, 1
20017f4c:	f8730004 	swi	r3, r19, 4
20017f50:	e8930004 	lwi	r4, r19, 4
20017f54:	e8730014 	lwi	r3, r19, 20
20017f58:	16432003 	cmpu	r18, r3, r4
20017f5c:	bc52ff9c 	blti	r18, -100		// 20017ef8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20017f60:	30600001 	addik	r3, r0, 1
}
20017f64:	10330000 	addk	r1, r19, r0
20017f68:	ea610008 	lwi	r19, r1, 8
20017f6c:	3021000c 	addik	r1, r1, 12
20017f70:	b60f0008 	rtsd	r15, 8
20017f74:	80000000 	or	r0, r0, r0

20017f78 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20017f78:	3021ffec 	addik	r1, r1, -20
20017f7c:	fa610010 	swi	r19, r1, 16
20017f80:	12610000 	addk	r19, r1, r0
20017f84:	f8b30018 	swi	r5, r19, 24
20017f88:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20017f8c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20017f90:	f8130004 	swi	r0, r19, 4
20017f94:	b8000054 	bri	84		// 20017fe8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20017f98:	e8730018 	lwi	r3, r19, 24
20017f9c:	e8630010 	lwi	r3, r3, 16
20017fa0:	e8830000 	lwi	r4, r3, 0
20017fa4:	e8730018 	lwi	r3, r19, 24
20017fa8:	e8a3000c 	lwi	r5, r3, 12
20017fac:	e8730004 	lwi	r3, r19, 4
20017fb0:	64630402 	bslli	r3, r3, 2
20017fb4:	10651800 	addk	r3, r5, r3
20017fb8:	e8630000 	lwi	r3, r3, 0
20017fbc:	14632000 	rsubk	r3, r3, r4
20017fc0:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20017fc4:	e8930008 	lwi	r4, r19, 8
20017fc8:	e873000c 	lwi	r3, r19, 12
20017fcc:	16441803 	cmpu	r18, r4, r3
20017fd0:	bcb20008 	bgei	r18, 8		// 20017fd8
20017fd4:	10640000 	addk	r3, r4, r0
20017fd8:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20017fdc:	e8730004 	lwi	r3, r19, 4
20017fe0:	30630001 	addik	r3, r3, 1
20017fe4:	f8730004 	swi	r3, r19, 4
20017fe8:	e8930004 	lwi	r4, r19, 4
20017fec:	e873001c 	lwi	r3, r19, 28
20017ff0:	16432003 	cmpu	r18, r3, r4
20017ff4:	bc52ffa4 	blti	r18, -92		// 20017f98
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20017ff8:	e8730018 	lwi	r3, r19, 24
20017ffc:	e8830000 	lwi	r4, r3, 0
20018000:	e8730008 	lwi	r3, r19, 8
20018004:	14632000 	rsubk	r3, r3, r4
}
20018008:	10330000 	addk	r1, r19, r0
2001800c:	ea610010 	lwi	r19, r1, 16
20018010:	30210014 	addik	r1, r1, 20
20018014:	b60f0008 	rtsd	r15, 8
20018018:	80000000 	or	r0, r0, r0

2001801c <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001801c:	3021fff4 	addik	r1, r1, -12
20018020:	fa610008 	swi	r19, r1, 8
20018024:	12610000 	addk	r19, r1, r0
20018028:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2001802c:	e8730010 	lwi	r3, r19, 16
20018030:	e8630010 	lwi	r3, r3, 16
20018034:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20018038:	f8130004 	swi	r0, r19, 4
2001803c:	b8000028 	bri	40		// 20018064
        fifo->read_inds[i] = 0;
20018040:	e8730010 	lwi	r3, r19, 16
20018044:	e883000c 	lwi	r4, r3, 12
20018048:	e8730004 	lwi	r3, r19, 4
2001804c:	64630402 	bslli	r3, r3, 2
20018050:	10641800 	addk	r3, r4, r3
20018054:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20018058:	e8730004 	lwi	r3, r19, 4
2001805c:	30630001 	addik	r3, r3, 1
20018060:	f8730004 	swi	r3, r19, 4
20018064:	e8730010 	lwi	r3, r19, 16
20018068:	e8830008 	lwi	r4, r3, 8
2001806c:	e8730004 	lwi	r3, r19, 4
20018070:	16441803 	cmpu	r18, r4, r3
20018074:	bc52ffcc 	blti	r18, -52		// 20018040
        fifo->read_inds[i] = 0;
    }
}
20018078:	10330000 	addk	r1, r19, r0
2001807c:	ea610008 	lwi	r19, r1, 8
20018080:	3021000c 	addik	r1, r1, 12
20018084:	b60f0008 	rtsd	r15, 8
20018088:	80000000 	or	r0, r0, r0

2001808c <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001808c:	3021fff4 	addik	r1, r1, -12
20018090:	fa610008 	swi	r19, r1, 8
20018094:	12610000 	addk	r19, r1, r0
20018098:	f8b30010 	swi	r5, r19, 16
2001809c:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200180a0:	e8730010 	lwi	r3, r19, 16
200180a4:	e8830004 	lwi	r4, r3, 4
200180a8:	e8730010 	lwi	r3, r19, 16
200180ac:	e8a3000c 	lwi	r5, r3, 12
200180b0:	e8730014 	lwi	r3, r19, 20
200180b4:	64630402 	bslli	r3, r3, 2
200180b8:	10651800 	addk	r3, r5, r3
200180bc:	e8a30000 	lwi	r5, r3, 0
200180c0:	e8730010 	lwi	r3, r19, 16
200180c4:	e8630000 	lwi	r3, r3, 0
200180c8:	3063ffff 	addik	r3, r3, -1
200180cc:	84651800 	and	r3, r5, r3
200180d0:	64630402 	bslli	r3, r3, 2
200180d4:	10641800 	addk	r3, r4, r3
200180d8:	e8630000 	lwi	r3, r3, 0
200180dc:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200180e0:	e8730010 	lwi	r3, r19, 16
200180e4:	e883000c 	lwi	r4, r3, 12
200180e8:	e8730014 	lwi	r3, r19, 20
200180ec:	64630402 	bslli	r3, r3, 2
200180f0:	10641800 	addk	r3, r4, r3
200180f4:	e8830000 	lwi	r4, r3, 0
200180f8:	30840001 	addik	r4, r4, 1
200180fc:	f8830000 	swi	r4, r3, 0
    return value;
20018100:	e8730004 	lwi	r3, r19, 4
}
20018104:	10330000 	addk	r1, r19, r0
20018108:	ea610008 	lwi	r19, r1, 8
2001810c:	3021000c 	addik	r1, r1, 12
20018110:	b60f0008 	rtsd	r15, 8
20018114:	80000000 	or	r0, r0, r0

20018118 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20018118:	3021fff8 	addik	r1, r1, -8
2001811c:	fa610004 	swi	r19, r1, 4
20018120:	12610000 	addk	r19, r1, r0
20018124:	f8b3000c 	swi	r5, r19, 12
20018128:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001812c:	e873000c 	lwi	r3, r19, 12
20018130:	e8830004 	lwi	r4, r3, 4
20018134:	e873000c 	lwi	r3, r19, 12
20018138:	e8630010 	lwi	r3, r3, 16
2001813c:	e8a30000 	lwi	r5, r3, 0
20018140:	e873000c 	lwi	r3, r19, 12
20018144:	e8630000 	lwi	r3, r3, 0
20018148:	3063ffff 	addik	r3, r3, -1
2001814c:	84651800 	and	r3, r5, r3
20018150:	64630402 	bslli	r3, r3, 2
20018154:	10641800 	addk	r3, r4, r3
20018158:	e8930010 	lwi	r4, r19, 16
2001815c:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20018160:	e873000c 	lwi	r3, r19, 12
20018164:	e8630010 	lwi	r3, r3, 16
20018168:	e8830000 	lwi	r4, r3, 0
2001816c:	30840001 	addik	r4, r4, 1
20018170:	f8830000 	swi	r4, r3, 0
}
20018174:	10330000 	addk	r1, r19, r0
20018178:	ea610004 	lwi	r19, r1, 4
2001817c:	30210008 	addik	r1, r1, 8
20018180:	b60f0008 	rtsd	r15, 8
20018184:	80000000 	or	r0, r0, r0

20018188 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20018188:	3021fff8 	addik	r1, r1, -8
2001818c:	fa610004 	swi	r19, r1, 4
20018190:	12610000 	addk	r19, r1, r0
20018194:	f8b3000c 	swi	r5, r19, 12
20018198:	f8d30010 	swi	r6, r19, 16
2001819c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200181a0:	e873000c 	lwi	r3, r19, 12
200181a4:	e8630010 	lwi	r3, r3, 16
200181a8:	e8830000 	lwi	r4, r3, 0
200181ac:	e873000c 	lwi	r3, r19, 12
200181b0:	e8a3000c 	lwi	r5, r3, 12
200181b4:	e8730010 	lwi	r3, r19, 16
200181b8:	64630402 	bslli	r3, r3, 2
200181bc:	10651800 	addk	r3, r5, r3
200181c0:	e8630000 	lwi	r3, r3, 0
200181c4:	14a32000 	rsubk	r5, r3, r4
200181c8:	30600001 	addik	r3, r0, 1
200181cc:	e8930014 	lwi	r4, r19, 20
200181d0:	16442803 	cmpu	r18, r4, r5
200181d4:	bcb20008 	bgei	r18, 8		// 200181dc
200181d8:	10600000 	addk	r3, r0, r0
200181dc:	a46300ff 	andi	r3, r3, 255
}
200181e0:	10330000 	addk	r1, r19, r0
200181e4:	ea610004 	lwi	r19, r1, 4
200181e8:	30210008 	addik	r1, r1, 8
200181ec:	b60f0008 	rtsd	r15, 8
200181f0:	80000000 	or	r0, r0, r0

200181f4 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200181f4:	3021fff8 	addik	r1, r1, -8
200181f8:	fa610004 	swi	r19, r1, 4
200181fc:	12610000 	addk	r19, r1, r0
20018200:	f8b3000c 	swi	r5, r19, 12
20018204:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20018208:	e873000c 	lwi	r3, r19, 12
2001820c:	e8630010 	lwi	r3, r3, 16
20018210:	e8830000 	lwi	r4, r3, 0
20018214:	e873000c 	lwi	r3, r19, 12
20018218:	e8a3000c 	lwi	r5, r3, 12
2001821c:	e8730010 	lwi	r3, r19, 16
20018220:	64630402 	bslli	r3, r3, 2
20018224:	10651800 	addk	r3, r5, r3
20018228:	e8630000 	lwi	r3, r3, 0
2001822c:	14632000 	rsubk	r3, r3, r4
}
20018230:	10330000 	addk	r1, r19, r0
20018234:	ea610004 	lwi	r19, r1, 4
20018238:	30210008 	addik	r1, r1, 8
2001823c:	b60f0008 	rtsd	r15, 8
20018240:	80000000 	or	r0, r0, r0

20018244 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20018244:	3021fff4 	addik	r1, r1, -12
20018248:	fa610008 	swi	r19, r1, 8
2001824c:	12610000 	addk	r19, r1, r0
20018250:	f8b30010 	swi	r5, r19, 16
20018254:	f8d30014 	swi	r6, r19, 20
20018258:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001825c:	f8130004 	swi	r0, r19, 4
20018260:	b800005c 	bri	92		// 200182bc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20018264:	e8730010 	lwi	r3, r19, 16
20018268:	e8830000 	lwi	r4, r3, 0
2001826c:	e8730010 	lwi	r3, r19, 16
20018270:	e8a3000c 	lwi	r5, r3, 12
20018274:	e8730004 	lwi	r3, r19, 4
20018278:	64630402 	bslli	r3, r3, 2
2001827c:	10651800 	addk	r3, r5, r3
20018280:	e8a30000 	lwi	r5, r3, 0
20018284:	e8730010 	lwi	r3, r19, 16
20018288:	e8630010 	lwi	r3, r3, 16
2001828c:	e8630000 	lwi	r3, r3, 0
20018290:	14632800 	rsubk	r3, r3, r5
20018294:	10641800 	addk	r3, r4, r3
20018298:	30830001 	addik	r4, r3, 1
2001829c:	e8730018 	lwi	r3, r19, 24
200182a0:	16441803 	cmpu	r18, r4, r3
200182a4:	bc52000c 	blti	r18, 12		// 200182b0
            return 0;
200182a8:	10600000 	addk	r3, r0, r0
200182ac:	b8000024 	bri	36		// 200182d0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200182b0:	e8730004 	lwi	r3, r19, 4
200182b4:	30630001 	addik	r3, r3, 1
200182b8:	f8730004 	swi	r3, r19, 4
200182bc:	e8930004 	lwi	r4, r19, 4
200182c0:	e8730014 	lwi	r3, r19, 20
200182c4:	16432003 	cmpu	r18, r3, r4
200182c8:	bc52ff9c 	blti	r18, -100		// 20018264
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200182cc:	30600001 	addik	r3, r0, 1
}
200182d0:	10330000 	addk	r1, r19, r0
200182d4:	ea610008 	lwi	r19, r1, 8
200182d8:	3021000c 	addik	r1, r1, 12
200182dc:	b60f0008 	rtsd	r15, 8
200182e0:	80000000 	or	r0, r0, r0

200182e4 <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200182e4:	3021ffec 	addik	r1, r1, -20
200182e8:	fa610010 	swi	r19, r1, 16
200182ec:	12610000 	addk	r19, r1, r0
200182f0:	f8b30018 	swi	r5, r19, 24
200182f4:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200182f8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200182fc:	f8130004 	swi	r0, r19, 4
20018300:	b8000054 	bri	84		// 20018354
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20018304:	e8730018 	lwi	r3, r19, 24
20018308:	e8630010 	lwi	r3, r3, 16
2001830c:	e8830000 	lwi	r4, r3, 0
20018310:	e8730018 	lwi	r3, r19, 24
20018314:	e8a3000c 	lwi	r5, r3, 12
20018318:	e8730004 	lwi	r3, r19, 4
2001831c:	64630402 	bslli	r3, r3, 2
20018320:	10651800 	addk	r3, r5, r3
20018324:	e8630000 	lwi	r3, r3, 0
20018328:	14632000 	rsubk	r3, r3, r4
2001832c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20018330:	e8930008 	lwi	r4, r19, 8
20018334:	e873000c 	lwi	r3, r19, 12
20018338:	16441803 	cmpu	r18, r4, r3
2001833c:	bcb20008 	bgei	r18, 8		// 20018344
20018340:	10640000 	addk	r3, r4, r0
20018344:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20018348:	e8730004 	lwi	r3, r19, 4
2001834c:	30630001 	addik	r3, r3, 1
20018350:	f8730004 	swi	r3, r19, 4
20018354:	e8930004 	lwi	r4, r19, 4
20018358:	e873001c 	lwi	r3, r19, 28
2001835c:	16432003 	cmpu	r18, r3, r4
20018360:	bc52ffa4 	blti	r18, -92		// 20018304
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20018364:	e8730018 	lwi	r3, r19, 24
20018368:	e8830000 	lwi	r4, r3, 0
2001836c:	e8730008 	lwi	r3, r19, 8
20018370:	14632000 	rsubk	r3, r3, r4
}
20018374:	10330000 	addk	r1, r19, r0
20018378:	ea610010 	lwi	r19, r1, 16
2001837c:	30210014 	addik	r1, r1, 20
20018380:	b60f0008 	rtsd	r15, 8
20018384:	80000000 	or	r0, r0, r0

20018388 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20018388:	3021fff4 	addik	r1, r1, -12
2001838c:	fa610008 	swi	r19, r1, 8
20018390:	12610000 	addk	r19, r1, r0
20018394:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20018398:	e8730010 	lwi	r3, r19, 16
2001839c:	e8630010 	lwi	r3, r3, 16
200183a0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200183a4:	f8130004 	swi	r0, r19, 4
200183a8:	b8000028 	bri	40		// 200183d0
        fifo->read_inds[i] = 0;
200183ac:	e8730010 	lwi	r3, r19, 16
200183b0:	e883000c 	lwi	r4, r3, 12
200183b4:	e8730004 	lwi	r3, r19, 4
200183b8:	64630402 	bslli	r3, r3, 2
200183bc:	10641800 	addk	r3, r4, r3
200183c0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200183c4:	e8730004 	lwi	r3, r19, 4
200183c8:	30630001 	addik	r3, r3, 1
200183cc:	f8730004 	swi	r3, r19, 4
200183d0:	e8730010 	lwi	r3, r19, 16
200183d4:	e8830008 	lwi	r4, r3, 8
200183d8:	e8730004 	lwi	r3, r19, 4
200183dc:	16441803 	cmpu	r18, r4, r3
200183e0:	bc52ffcc 	blti	r18, -52		// 200183ac
        fifo->read_inds[i] = 0;
    }
}
200183e4:	10330000 	addk	r1, r19, r0
200183e8:	ea610008 	lwi	r19, r1, 8
200183ec:	3021000c 	addik	r1, r1, 12
200183f0:	b60f0008 	rtsd	r15, 8
200183f4:	80000000 	or	r0, r0, r0

200183f8 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200183f8:	3021fff0 	addik	r1, r1, -16
200183fc:	fa61000c 	swi	r19, r1, 12
20018400:	12610000 	addk	r19, r1, r0
20018404:	f8b30014 	swi	r5, r19, 20
20018408:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001840c:	e8730014 	lwi	r3, r19, 20
20018410:	e8830004 	lwi	r4, r3, 4
20018414:	e8730014 	lwi	r3, r19, 20
20018418:	e8a3000c 	lwi	r5, r3, 12
2001841c:	e8730018 	lwi	r3, r19, 24
20018420:	64630402 	bslli	r3, r3, 2
20018424:	10651800 	addk	r3, r5, r3
20018428:	e8a30000 	lwi	r5, r3, 0
2001842c:	e8730014 	lwi	r3, r19, 20
20018430:	e8630000 	lwi	r3, r3, 0
20018434:	3063ffff 	addik	r3, r3, -1
20018438:	84651800 	and	r3, r5, r3
2001843c:	64630403 	bslli	r3, r3, 3
20018440:	10641800 	addk	r3, r4, r3
20018444:	e8830000 	lwi	r4, r3, 0
20018448:	e8a30004 	lwi	r5, r3, 4
2001844c:	f8930004 	swi	r4, r19, 4
20018450:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20018454:	e8730014 	lwi	r3, r19, 20
20018458:	e883000c 	lwi	r4, r3, 12
2001845c:	e8730018 	lwi	r3, r19, 24
20018460:	64630402 	bslli	r3, r3, 2
20018464:	10641800 	addk	r3, r4, r3
20018468:	e8830000 	lwi	r4, r3, 0
2001846c:	30840001 	addik	r4, r4, 1
20018470:	f8830000 	swi	r4, r3, 0
    return value;
20018474:	e8930004 	lwi	r4, r19, 4
20018478:	e8b30008 	lwi	r5, r19, 8
}
2001847c:	10640000 	addk	r3, r4, r0
20018480:	10850000 	addk	r4, r5, r0
20018484:	10330000 	addk	r1, r19, r0
20018488:	ea61000c 	lwi	r19, r1, 12
2001848c:	30210010 	addik	r1, r1, 16
20018490:	b60f0008 	rtsd	r15, 8
20018494:	80000000 	or	r0, r0, r0

20018498 <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20018498:	3021fff8 	addik	r1, r1, -8
2001849c:	fa610004 	swi	r19, r1, 4
200184a0:	12610000 	addk	r19, r1, r0
200184a4:	f8b3000c 	swi	r5, r19, 12
200184a8:	f8d30010 	swi	r6, r19, 16
200184ac:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200184b0:	e873000c 	lwi	r3, r19, 12
200184b4:	e8830004 	lwi	r4, r3, 4
200184b8:	e873000c 	lwi	r3, r19, 12
200184bc:	e8630010 	lwi	r3, r3, 16
200184c0:	e8a30000 	lwi	r5, r3, 0
200184c4:	e873000c 	lwi	r3, r19, 12
200184c8:	e8630000 	lwi	r3, r3, 0
200184cc:	3063ffff 	addik	r3, r3, -1
200184d0:	84651800 	and	r3, r5, r3
200184d4:	64630403 	bslli	r3, r3, 3
200184d8:	10641800 	addk	r3, r4, r3
200184dc:	e8930010 	lwi	r4, r19, 16
200184e0:	e8b30014 	lwi	r5, r19, 20
200184e4:	f8830000 	swi	r4, r3, 0
200184e8:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
200184ec:	e873000c 	lwi	r3, r19, 12
200184f0:	e8630010 	lwi	r3, r3, 16
200184f4:	e8830000 	lwi	r4, r3, 0
200184f8:	30840001 	addik	r4, r4, 1
200184fc:	f8830000 	swi	r4, r3, 0
}
20018500:	10330000 	addk	r1, r19, r0
20018504:	ea610004 	lwi	r19, r1, 4
20018508:	30210008 	addik	r1, r1, 8
2001850c:	b60f0008 	rtsd	r15, 8
20018510:	80000000 	or	r0, r0, r0

20018514 <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20018514:	3021fff8 	addik	r1, r1, -8
20018518:	fa610004 	swi	r19, r1, 4
2001851c:	12610000 	addk	r19, r1, r0
20018520:	f8b3000c 	swi	r5, r19, 12
20018524:	f8d30010 	swi	r6, r19, 16
20018528:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001852c:	e873000c 	lwi	r3, r19, 12
20018530:	e8630010 	lwi	r3, r3, 16
20018534:	e8830000 	lwi	r4, r3, 0
20018538:	e873000c 	lwi	r3, r19, 12
2001853c:	e8a3000c 	lwi	r5, r3, 12
20018540:	e8730010 	lwi	r3, r19, 16
20018544:	64630402 	bslli	r3, r3, 2
20018548:	10651800 	addk	r3, r5, r3
2001854c:	e8630000 	lwi	r3, r3, 0
20018550:	14a32000 	rsubk	r5, r3, r4
20018554:	30600001 	addik	r3, r0, 1
20018558:	e8930014 	lwi	r4, r19, 20
2001855c:	16442803 	cmpu	r18, r4, r5
20018560:	bcb20008 	bgei	r18, 8		// 20018568
20018564:	10600000 	addk	r3, r0, r0
20018568:	a46300ff 	andi	r3, r3, 255
}
2001856c:	10330000 	addk	r1, r19, r0
20018570:	ea610004 	lwi	r19, r1, 4
20018574:	30210008 	addik	r1, r1, 8
20018578:	b60f0008 	rtsd	r15, 8
2001857c:	80000000 	or	r0, r0, r0

20018580 <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20018580:	3021fff8 	addik	r1, r1, -8
20018584:	fa610004 	swi	r19, r1, 4
20018588:	12610000 	addk	r19, r1, r0
2001858c:	f8b3000c 	swi	r5, r19, 12
20018590:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20018594:	e873000c 	lwi	r3, r19, 12
20018598:	e8630010 	lwi	r3, r3, 16
2001859c:	e8830000 	lwi	r4, r3, 0
200185a0:	e873000c 	lwi	r3, r19, 12
200185a4:	e8a3000c 	lwi	r5, r3, 12
200185a8:	e8730010 	lwi	r3, r19, 16
200185ac:	64630402 	bslli	r3, r3, 2
200185b0:	10651800 	addk	r3, r5, r3
200185b4:	e8630000 	lwi	r3, r3, 0
200185b8:	14632000 	rsubk	r3, r3, r4
}
200185bc:	10330000 	addk	r1, r19, r0
200185c0:	ea610004 	lwi	r19, r1, 4
200185c4:	30210008 	addik	r1, r1, 8
200185c8:	b60f0008 	rtsd	r15, 8
200185cc:	80000000 	or	r0, r0, r0

200185d0 <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200185d0:	3021fff4 	addik	r1, r1, -12
200185d4:	fa610008 	swi	r19, r1, 8
200185d8:	12610000 	addk	r19, r1, r0
200185dc:	f8b30010 	swi	r5, r19, 16
200185e0:	f8d30014 	swi	r6, r19, 20
200185e4:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200185e8:	f8130004 	swi	r0, r19, 4
200185ec:	b800005c 	bri	92		// 20018648
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200185f0:	e8730010 	lwi	r3, r19, 16
200185f4:	e8830000 	lwi	r4, r3, 0
200185f8:	e8730010 	lwi	r3, r19, 16
200185fc:	e8a3000c 	lwi	r5, r3, 12
20018600:	e8730004 	lwi	r3, r19, 4
20018604:	64630402 	bslli	r3, r3, 2
20018608:	10651800 	addk	r3, r5, r3
2001860c:	e8a30000 	lwi	r5, r3, 0
20018610:	e8730010 	lwi	r3, r19, 16
20018614:	e8630010 	lwi	r3, r3, 16
20018618:	e8630000 	lwi	r3, r3, 0
2001861c:	14632800 	rsubk	r3, r3, r5
20018620:	10641800 	addk	r3, r4, r3
20018624:	30830001 	addik	r4, r3, 1
20018628:	e8730018 	lwi	r3, r19, 24
2001862c:	16441803 	cmpu	r18, r4, r3
20018630:	bc52000c 	blti	r18, 12		// 2001863c
            return 0;
20018634:	10600000 	addk	r3, r0, r0
20018638:	b8000024 	bri	36		// 2001865c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001863c:	e8730004 	lwi	r3, r19, 4
20018640:	30630001 	addik	r3, r3, 1
20018644:	f8730004 	swi	r3, r19, 4
20018648:	e8930004 	lwi	r4, r19, 4
2001864c:	e8730014 	lwi	r3, r19, 20
20018650:	16432003 	cmpu	r18, r3, r4
20018654:	bc52ff9c 	blti	r18, -100		// 200185f0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20018658:	30600001 	addik	r3, r0, 1
}
2001865c:	10330000 	addk	r1, r19, r0
20018660:	ea610008 	lwi	r19, r1, 8
20018664:	3021000c 	addik	r1, r1, 12
20018668:	b60f0008 	rtsd	r15, 8
2001866c:	80000000 	or	r0, r0, r0

20018670 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20018670:	3021ffec 	addik	r1, r1, -20
20018674:	fa610010 	swi	r19, r1, 16
20018678:	12610000 	addk	r19, r1, r0
2001867c:	f8b30018 	swi	r5, r19, 24
20018680:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20018684:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20018688:	f8130004 	swi	r0, r19, 4
2001868c:	b8000054 	bri	84		// 200186e0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20018690:	e8730018 	lwi	r3, r19, 24
20018694:	e8630010 	lwi	r3, r3, 16
20018698:	e8830000 	lwi	r4, r3, 0
2001869c:	e8730018 	lwi	r3, r19, 24
200186a0:	e8a3000c 	lwi	r5, r3, 12
200186a4:	e8730004 	lwi	r3, r19, 4
200186a8:	64630402 	bslli	r3, r3, 2
200186ac:	10651800 	addk	r3, r5, r3
200186b0:	e8630000 	lwi	r3, r3, 0
200186b4:	14632000 	rsubk	r3, r3, r4
200186b8:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200186bc:	e8930008 	lwi	r4, r19, 8
200186c0:	e873000c 	lwi	r3, r19, 12
200186c4:	16441803 	cmpu	r18, r4, r3
200186c8:	bcb20008 	bgei	r18, 8		// 200186d0
200186cc:	10640000 	addk	r3, r4, r0
200186d0:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200186d4:	e8730004 	lwi	r3, r19, 4
200186d8:	30630001 	addik	r3, r3, 1
200186dc:	f8730004 	swi	r3, r19, 4
200186e0:	e8930004 	lwi	r4, r19, 4
200186e4:	e873001c 	lwi	r3, r19, 28
200186e8:	16432003 	cmpu	r18, r3, r4
200186ec:	bc52ffa4 	blti	r18, -92		// 20018690
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200186f0:	e8730018 	lwi	r3, r19, 24
200186f4:	e8830000 	lwi	r4, r3, 0
200186f8:	e8730008 	lwi	r3, r19, 8
200186fc:	14632000 	rsubk	r3, r3, r4
}
20018700:	10330000 	addk	r1, r19, r0
20018704:	ea610010 	lwi	r19, r1, 16
20018708:	30210014 	addik	r1, r1, 20
2001870c:	b60f0008 	rtsd	r15, 8
20018710:	80000000 	or	r0, r0, r0

20018714 <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20018714:	3021fff4 	addik	r1, r1, -12
20018718:	fa610008 	swi	r19, r1, 8
2001871c:	12610000 	addk	r19, r1, r0
20018720:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20018724:	e8730010 	lwi	r3, r19, 16
20018728:	e8630010 	lwi	r3, r3, 16
2001872c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20018730:	f8130004 	swi	r0, r19, 4
20018734:	b8000028 	bri	40		// 2001875c
        fifo->read_inds[i] = 0;
20018738:	e8730010 	lwi	r3, r19, 16
2001873c:	e883000c 	lwi	r4, r3, 12
20018740:	e8730004 	lwi	r3, r19, 4
20018744:	64630402 	bslli	r3, r3, 2
20018748:	10641800 	addk	r3, r4, r3
2001874c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20018750:	e8730004 	lwi	r3, r19, 4
20018754:	30630001 	addik	r3, r3, 1
20018758:	f8730004 	swi	r3, r19, 4
2001875c:	e8730010 	lwi	r3, r19, 16
20018760:	e8830008 	lwi	r4, r3, 8
20018764:	e8730004 	lwi	r3, r19, 4
20018768:	16441803 	cmpu	r18, r4, r3
2001876c:	bc52ffcc 	blti	r18, -52		// 20018738
        fifo->read_inds[i] = 0;
    }
}
20018770:	10330000 	addk	r1, r19, r0
20018774:	ea610008 	lwi	r19, r1, 8
20018778:	3021000c 	addik	r1, r1, 12
2001877c:	b60f0008 	rtsd	r15, 8
20018780:	80000000 	or	r0, r0, r0

20018784 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20018784:	3021fff4 	addik	r1, r1, -12
20018788:	fa610008 	swi	r19, r1, 8
2001878c:	12610000 	addk	r19, r1, r0
20018790:	f8b30010 	swi	r5, r19, 16
20018794:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20018798:	e8730010 	lwi	r3, r19, 16
2001879c:	e8830004 	lwi	r4, r3, 4
200187a0:	e8730010 	lwi	r3, r19, 16
200187a4:	e8a3000c 	lwi	r5, r3, 12
200187a8:	e8730014 	lwi	r3, r19, 20
200187ac:	64630402 	bslli	r3, r3, 2
200187b0:	10651800 	addk	r3, r5, r3
200187b4:	e8a30000 	lwi	r5, r3, 0
200187b8:	e8730010 	lwi	r3, r19, 16
200187bc:	e8630000 	lwi	r3, r3, 0
200187c0:	3063ffff 	addik	r3, r3, -1
200187c4:	84651800 	and	r3, r5, r3
200187c8:	10641800 	addk	r3, r4, r3
200187cc:	e0630000 	lbui	r3, r3, 0
200187d0:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200187d4:	e8730010 	lwi	r3, r19, 16
200187d8:	e883000c 	lwi	r4, r3, 12
200187dc:	e8730014 	lwi	r3, r19, 20
200187e0:	64630402 	bslli	r3, r3, 2
200187e4:	10641800 	addk	r3, r4, r3
200187e8:	e8830000 	lwi	r4, r3, 0
200187ec:	30840001 	addik	r4, r4, 1
200187f0:	f8830000 	swi	r4, r3, 0
    return value;
200187f4:	e0730004 	lbui	r3, r19, 4
}
200187f8:	10330000 	addk	r1, r19, r0
200187fc:	ea610008 	lwi	r19, r1, 8
20018800:	3021000c 	addik	r1, r1, 12
20018804:	b60f0008 	rtsd	r15, 8
20018808:	80000000 	or	r0, r0, r0

2001880c <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001880c:	3021fff8 	addik	r1, r1, -8
20018810:	fa610004 	swi	r19, r1, 4
20018814:	12610000 	addk	r19, r1, r0
20018818:	f8b3000c 	swi	r5, r19, 12
2001881c:	10660000 	addk	r3, r6, r0
20018820:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20018824:	e873000c 	lwi	r3, r19, 12
20018828:	e8830004 	lwi	r4, r3, 4
2001882c:	e873000c 	lwi	r3, r19, 12
20018830:	e8630010 	lwi	r3, r3, 16
20018834:	e8a30000 	lwi	r5, r3, 0
20018838:	e873000c 	lwi	r3, r19, 12
2001883c:	e8630000 	lwi	r3, r3, 0
20018840:	3063ffff 	addik	r3, r3, -1
20018844:	84651800 	and	r3, r5, r3
20018848:	10641800 	addk	r3, r4, r3
2001884c:	e0930010 	lbui	r4, r19, 16
20018850:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20018854:	e873000c 	lwi	r3, r19, 12
20018858:	e8630010 	lwi	r3, r3, 16
2001885c:	e8830000 	lwi	r4, r3, 0
20018860:	30840001 	addik	r4, r4, 1
20018864:	f8830000 	swi	r4, r3, 0
}
20018868:	10330000 	addk	r1, r19, r0
2001886c:	ea610004 	lwi	r19, r1, 4
20018870:	30210008 	addik	r1, r1, 8
20018874:	b60f0008 	rtsd	r15, 8
20018878:	80000000 	or	r0, r0, r0

2001887c <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001887c:	3021fff8 	addik	r1, r1, -8
20018880:	fa610004 	swi	r19, r1, 4
20018884:	12610000 	addk	r19, r1, r0
20018888:	f8b3000c 	swi	r5, r19, 12
2001888c:	f8d30010 	swi	r6, r19, 16
20018890:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20018894:	e873000c 	lwi	r3, r19, 12
20018898:	e8630010 	lwi	r3, r3, 16
2001889c:	e8830000 	lwi	r4, r3, 0
200188a0:	e873000c 	lwi	r3, r19, 12
200188a4:	e8a3000c 	lwi	r5, r3, 12
200188a8:	e8730010 	lwi	r3, r19, 16
200188ac:	64630402 	bslli	r3, r3, 2
200188b0:	10651800 	addk	r3, r5, r3
200188b4:	e8630000 	lwi	r3, r3, 0
200188b8:	14a32000 	rsubk	r5, r3, r4
200188bc:	30600001 	addik	r3, r0, 1
200188c0:	e8930014 	lwi	r4, r19, 20
200188c4:	16442803 	cmpu	r18, r4, r5
200188c8:	bcb20008 	bgei	r18, 8		// 200188d0
200188cc:	10600000 	addk	r3, r0, r0
200188d0:	a46300ff 	andi	r3, r3, 255
}
200188d4:	10330000 	addk	r1, r19, r0
200188d8:	ea610004 	lwi	r19, r1, 4
200188dc:	30210008 	addik	r1, r1, 8
200188e0:	b60f0008 	rtsd	r15, 8
200188e4:	80000000 	or	r0, r0, r0

200188e8 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200188e8:	3021fff8 	addik	r1, r1, -8
200188ec:	fa610004 	swi	r19, r1, 4
200188f0:	12610000 	addk	r19, r1, r0
200188f4:	f8b3000c 	swi	r5, r19, 12
200188f8:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200188fc:	e873000c 	lwi	r3, r19, 12
20018900:	e8630010 	lwi	r3, r3, 16
20018904:	e8830000 	lwi	r4, r3, 0
20018908:	e873000c 	lwi	r3, r19, 12
2001890c:	e8a3000c 	lwi	r5, r3, 12
20018910:	e8730010 	lwi	r3, r19, 16
20018914:	64630402 	bslli	r3, r3, 2
20018918:	10651800 	addk	r3, r5, r3
2001891c:	e8630000 	lwi	r3, r3, 0
20018920:	14632000 	rsubk	r3, r3, r4
}
20018924:	10330000 	addk	r1, r19, r0
20018928:	ea610004 	lwi	r19, r1, 4
2001892c:	30210008 	addik	r1, r1, 8
20018930:	b60f0008 	rtsd	r15, 8
20018934:	80000000 	or	r0, r0, r0

20018938 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20018938:	3021fff4 	addik	r1, r1, -12
2001893c:	fa610008 	swi	r19, r1, 8
20018940:	12610000 	addk	r19, r1, r0
20018944:	f8b30010 	swi	r5, r19, 16
20018948:	f8d30014 	swi	r6, r19, 20
2001894c:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20018950:	f8130004 	swi	r0, r19, 4
20018954:	b800005c 	bri	92		// 200189b0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20018958:	e8730010 	lwi	r3, r19, 16
2001895c:	e8830000 	lwi	r4, r3, 0
20018960:	e8730010 	lwi	r3, r19, 16
20018964:	e8a3000c 	lwi	r5, r3, 12
20018968:	e8730004 	lwi	r3, r19, 4
2001896c:	64630402 	bslli	r3, r3, 2
20018970:	10651800 	addk	r3, r5, r3
20018974:	e8a30000 	lwi	r5, r3, 0
20018978:	e8730010 	lwi	r3, r19, 16
2001897c:	e8630010 	lwi	r3, r3, 16
20018980:	e8630000 	lwi	r3, r3, 0
20018984:	14632800 	rsubk	r3, r3, r5
20018988:	10641800 	addk	r3, r4, r3
2001898c:	30830001 	addik	r4, r3, 1
20018990:	e8730018 	lwi	r3, r19, 24
20018994:	16441803 	cmpu	r18, r4, r3
20018998:	bc52000c 	blti	r18, 12		// 200189a4
            return 0;
2001899c:	10600000 	addk	r3, r0, r0
200189a0:	b8000024 	bri	36		// 200189c4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200189a4:	e8730004 	lwi	r3, r19, 4
200189a8:	30630001 	addik	r3, r3, 1
200189ac:	f8730004 	swi	r3, r19, 4
200189b0:	e8930004 	lwi	r4, r19, 4
200189b4:	e8730014 	lwi	r3, r19, 20
200189b8:	16432003 	cmpu	r18, r3, r4
200189bc:	bc52ff9c 	blti	r18, -100		// 20018958
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200189c0:	30600001 	addik	r3, r0, 1
}
200189c4:	10330000 	addk	r1, r19, r0
200189c8:	ea610008 	lwi	r19, r1, 8
200189cc:	3021000c 	addik	r1, r1, 12
200189d0:	b60f0008 	rtsd	r15, 8
200189d4:	80000000 	or	r0, r0, r0

200189d8 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200189d8:	3021ffec 	addik	r1, r1, -20
200189dc:	fa610010 	swi	r19, r1, 16
200189e0:	12610000 	addk	r19, r1, r0
200189e4:	f8b30018 	swi	r5, r19, 24
200189e8:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200189ec:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200189f0:	f8130004 	swi	r0, r19, 4
200189f4:	b8000054 	bri	84		// 20018a48
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200189f8:	e8730018 	lwi	r3, r19, 24
200189fc:	e8630010 	lwi	r3, r3, 16
20018a00:	e8830000 	lwi	r4, r3, 0
20018a04:	e8730018 	lwi	r3, r19, 24
20018a08:	e8a3000c 	lwi	r5, r3, 12
20018a0c:	e8730004 	lwi	r3, r19, 4
20018a10:	64630402 	bslli	r3, r3, 2
20018a14:	10651800 	addk	r3, r5, r3
20018a18:	e8630000 	lwi	r3, r3, 0
20018a1c:	14632000 	rsubk	r3, r3, r4
20018a20:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20018a24:	e8930008 	lwi	r4, r19, 8
20018a28:	e873000c 	lwi	r3, r19, 12
20018a2c:	16441803 	cmpu	r18, r4, r3
20018a30:	bcb20008 	bgei	r18, 8		// 20018a38
20018a34:	10640000 	addk	r3, r4, r0
20018a38:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20018a3c:	e8730004 	lwi	r3, r19, 4
20018a40:	30630001 	addik	r3, r3, 1
20018a44:	f8730004 	swi	r3, r19, 4
20018a48:	e8930004 	lwi	r4, r19, 4
20018a4c:	e873001c 	lwi	r3, r19, 28
20018a50:	16432003 	cmpu	r18, r3, r4
20018a54:	bc52ffa4 	blti	r18, -92		// 200189f8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20018a58:	e8730018 	lwi	r3, r19, 24
20018a5c:	e8830000 	lwi	r4, r3, 0
20018a60:	e8730008 	lwi	r3, r19, 8
20018a64:	14632000 	rsubk	r3, r3, r4
}
20018a68:	10330000 	addk	r1, r19, r0
20018a6c:	ea610010 	lwi	r19, r1, 16
20018a70:	30210014 	addik	r1, r1, 20
20018a74:	b60f0008 	rtsd	r15, 8
20018a78:	80000000 	or	r0, r0, r0

20018a7c <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20018a7c:	3021fff4 	addik	r1, r1, -12
20018a80:	fa610008 	swi	r19, r1, 8
20018a84:	12610000 	addk	r19, r1, r0
20018a88:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20018a8c:	e8730010 	lwi	r3, r19, 16
20018a90:	e8630010 	lwi	r3, r3, 16
20018a94:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20018a98:	f8130004 	swi	r0, r19, 4
20018a9c:	b8000028 	bri	40		// 20018ac4
        fifo->read_inds[i] = 0;
20018aa0:	e8730010 	lwi	r3, r19, 16
20018aa4:	e883000c 	lwi	r4, r3, 12
20018aa8:	e8730004 	lwi	r3, r19, 4
20018aac:	64630402 	bslli	r3, r3, 2
20018ab0:	10641800 	addk	r3, r4, r3
20018ab4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20018ab8:	e8730004 	lwi	r3, r19, 4
20018abc:	30630001 	addik	r3, r3, 1
20018ac0:	f8730004 	swi	r3, r19, 4
20018ac4:	e8730010 	lwi	r3, r19, 16
20018ac8:	e8830008 	lwi	r4, r3, 8
20018acc:	e8730004 	lwi	r3, r19, 4
20018ad0:	16441803 	cmpu	r18, r4, r3
20018ad4:	bc52ffcc 	blti	r18, -52		// 20018aa0
        fifo->read_inds[i] = 0;
    }
}
20018ad8:	10330000 	addk	r1, r19, r0
20018adc:	ea610008 	lwi	r19, r1, 8
20018ae0:	3021000c 	addik	r1, r1, 12
20018ae4:	b60f0008 	rtsd	r15, 8
20018ae8:	80000000 	or	r0, r0, r0

20018aec <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20018aec:	3021fff4 	addik	r1, r1, -12
20018af0:	fa610008 	swi	r19, r1, 8
20018af4:	12610000 	addk	r19, r1, r0
20018af8:	f8b30010 	swi	r5, r19, 16
20018afc:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20018b00:	e8730010 	lwi	r3, r19, 16
20018b04:	e8830004 	lwi	r4, r3, 4
20018b08:	e8730010 	lwi	r3, r19, 16
20018b0c:	e8a3000c 	lwi	r5, r3, 12
20018b10:	e8730014 	lwi	r3, r19, 20
20018b14:	64630402 	bslli	r3, r3, 2
20018b18:	10651800 	addk	r3, r5, r3
20018b1c:	e8a30000 	lwi	r5, r3, 0
20018b20:	e8730010 	lwi	r3, r19, 16
20018b24:	e8630000 	lwi	r3, r3, 0
20018b28:	3063ffff 	addik	r3, r3, -1
20018b2c:	84651800 	and	r3, r5, r3
20018b30:	10631800 	addk	r3, r3, r3
20018b34:	10641800 	addk	r3, r4, r3
20018b38:	e4630000 	lhui	r3, r3, 0
20018b3c:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20018b40:	e8730010 	lwi	r3, r19, 16
20018b44:	e883000c 	lwi	r4, r3, 12
20018b48:	e8730014 	lwi	r3, r19, 20
20018b4c:	64630402 	bslli	r3, r3, 2
20018b50:	10641800 	addk	r3, r4, r3
20018b54:	e8830000 	lwi	r4, r3, 0
20018b58:	30840001 	addik	r4, r4, 1
20018b5c:	f8830000 	swi	r4, r3, 0
    return value;
20018b60:	e4730004 	lhui	r3, r19, 4
}
20018b64:	10330000 	addk	r1, r19, r0
20018b68:	ea610008 	lwi	r19, r1, 8
20018b6c:	3021000c 	addik	r1, r1, 12
20018b70:	b60f0008 	rtsd	r15, 8
20018b74:	80000000 	or	r0, r0, r0

20018b78 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20018b78:	3021fff8 	addik	r1, r1, -8
20018b7c:	fa610004 	swi	r19, r1, 4
20018b80:	12610000 	addk	r19, r1, r0
20018b84:	f8b3000c 	swi	r5, r19, 12
20018b88:	10660000 	addk	r3, r6, r0
20018b8c:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20018b90:	e873000c 	lwi	r3, r19, 12
20018b94:	e8830004 	lwi	r4, r3, 4
20018b98:	e873000c 	lwi	r3, r19, 12
20018b9c:	e8630010 	lwi	r3, r3, 16
20018ba0:	e8a30000 	lwi	r5, r3, 0
20018ba4:	e873000c 	lwi	r3, r19, 12
20018ba8:	e8630000 	lwi	r3, r3, 0
20018bac:	3063ffff 	addik	r3, r3, -1
20018bb0:	84651800 	and	r3, r5, r3
20018bb4:	10631800 	addk	r3, r3, r3
20018bb8:	10641800 	addk	r3, r4, r3
20018bbc:	e4930010 	lhui	r4, r19, 16
20018bc0:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20018bc4:	e873000c 	lwi	r3, r19, 12
20018bc8:	e8630010 	lwi	r3, r3, 16
20018bcc:	e8830000 	lwi	r4, r3, 0
20018bd0:	30840001 	addik	r4, r4, 1
20018bd4:	f8830000 	swi	r4, r3, 0
}
20018bd8:	10330000 	addk	r1, r19, r0
20018bdc:	ea610004 	lwi	r19, r1, 4
20018be0:	30210008 	addik	r1, r1, 8
20018be4:	b60f0008 	rtsd	r15, 8
20018be8:	80000000 	or	r0, r0, r0

20018bec <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20018bec:	3021fff8 	addik	r1, r1, -8
20018bf0:	fa610004 	swi	r19, r1, 4
20018bf4:	12610000 	addk	r19, r1, r0
20018bf8:	f8b3000c 	swi	r5, r19, 12
20018bfc:	f8d30010 	swi	r6, r19, 16
20018c00:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20018c04:	e873000c 	lwi	r3, r19, 12
20018c08:	e8630010 	lwi	r3, r3, 16
20018c0c:	e8830000 	lwi	r4, r3, 0
20018c10:	e873000c 	lwi	r3, r19, 12
20018c14:	e8a3000c 	lwi	r5, r3, 12
20018c18:	e8730010 	lwi	r3, r19, 16
20018c1c:	64630402 	bslli	r3, r3, 2
20018c20:	10651800 	addk	r3, r5, r3
20018c24:	e8630000 	lwi	r3, r3, 0
20018c28:	14a32000 	rsubk	r5, r3, r4
20018c2c:	30600001 	addik	r3, r0, 1
20018c30:	e8930014 	lwi	r4, r19, 20
20018c34:	16442803 	cmpu	r18, r4, r5
20018c38:	bcb20008 	bgei	r18, 8		// 20018c40
20018c3c:	10600000 	addk	r3, r0, r0
20018c40:	a46300ff 	andi	r3, r3, 255
}
20018c44:	10330000 	addk	r1, r19, r0
20018c48:	ea610004 	lwi	r19, r1, 4
20018c4c:	30210008 	addik	r1, r1, 8
20018c50:	b60f0008 	rtsd	r15, 8
20018c54:	80000000 	or	r0, r0, r0

20018c58 <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20018c58:	3021fff8 	addik	r1, r1, -8
20018c5c:	fa610004 	swi	r19, r1, 4
20018c60:	12610000 	addk	r19, r1, r0
20018c64:	f8b3000c 	swi	r5, r19, 12
20018c68:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20018c6c:	e873000c 	lwi	r3, r19, 12
20018c70:	e8630010 	lwi	r3, r3, 16
20018c74:	e8830000 	lwi	r4, r3, 0
20018c78:	e873000c 	lwi	r3, r19, 12
20018c7c:	e8a3000c 	lwi	r5, r3, 12
20018c80:	e8730010 	lwi	r3, r19, 16
20018c84:	64630402 	bslli	r3, r3, 2
20018c88:	10651800 	addk	r3, r5, r3
20018c8c:	e8630000 	lwi	r3, r3, 0
20018c90:	14632000 	rsubk	r3, r3, r4
}
20018c94:	10330000 	addk	r1, r19, r0
20018c98:	ea610004 	lwi	r19, r1, 4
20018c9c:	30210008 	addik	r1, r1, 8
20018ca0:	b60f0008 	rtsd	r15, 8
20018ca4:	80000000 	or	r0, r0, r0

20018ca8 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20018ca8:	3021fff4 	addik	r1, r1, -12
20018cac:	fa610008 	swi	r19, r1, 8
20018cb0:	12610000 	addk	r19, r1, r0
20018cb4:	f8b30010 	swi	r5, r19, 16
20018cb8:	f8d30014 	swi	r6, r19, 20
20018cbc:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20018cc0:	f8130004 	swi	r0, r19, 4
20018cc4:	b800005c 	bri	92		// 20018d20
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20018cc8:	e8730010 	lwi	r3, r19, 16
20018ccc:	e8830000 	lwi	r4, r3, 0
20018cd0:	e8730010 	lwi	r3, r19, 16
20018cd4:	e8a3000c 	lwi	r5, r3, 12
20018cd8:	e8730004 	lwi	r3, r19, 4
20018cdc:	64630402 	bslli	r3, r3, 2
20018ce0:	10651800 	addk	r3, r5, r3
20018ce4:	e8a30000 	lwi	r5, r3, 0
20018ce8:	e8730010 	lwi	r3, r19, 16
20018cec:	e8630010 	lwi	r3, r3, 16
20018cf0:	e8630000 	lwi	r3, r3, 0
20018cf4:	14632800 	rsubk	r3, r3, r5
20018cf8:	10641800 	addk	r3, r4, r3
20018cfc:	30830001 	addik	r4, r3, 1
20018d00:	e8730018 	lwi	r3, r19, 24
20018d04:	16441803 	cmpu	r18, r4, r3
20018d08:	bc52000c 	blti	r18, 12		// 20018d14
            return 0;
20018d0c:	10600000 	addk	r3, r0, r0
20018d10:	b8000024 	bri	36		// 20018d34
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20018d14:	e8730004 	lwi	r3, r19, 4
20018d18:	30630001 	addik	r3, r3, 1
20018d1c:	f8730004 	swi	r3, r19, 4
20018d20:	e8930004 	lwi	r4, r19, 4
20018d24:	e8730014 	lwi	r3, r19, 20
20018d28:	16432003 	cmpu	r18, r3, r4
20018d2c:	bc52ff9c 	blti	r18, -100		// 20018cc8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20018d30:	30600001 	addik	r3, r0, 1
}
20018d34:	10330000 	addk	r1, r19, r0
20018d38:	ea610008 	lwi	r19, r1, 8
20018d3c:	3021000c 	addik	r1, r1, 12
20018d40:	b60f0008 	rtsd	r15, 8
20018d44:	80000000 	or	r0, r0, r0

20018d48 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20018d48:	3021ffec 	addik	r1, r1, -20
20018d4c:	fa610010 	swi	r19, r1, 16
20018d50:	12610000 	addk	r19, r1, r0
20018d54:	f8b30018 	swi	r5, r19, 24
20018d58:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20018d5c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20018d60:	f8130004 	swi	r0, r19, 4
20018d64:	b8000054 	bri	84		// 20018db8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20018d68:	e8730018 	lwi	r3, r19, 24
20018d6c:	e8630010 	lwi	r3, r3, 16
20018d70:	e8830000 	lwi	r4, r3, 0
20018d74:	e8730018 	lwi	r3, r19, 24
20018d78:	e8a3000c 	lwi	r5, r3, 12
20018d7c:	e8730004 	lwi	r3, r19, 4
20018d80:	64630402 	bslli	r3, r3, 2
20018d84:	10651800 	addk	r3, r5, r3
20018d88:	e8630000 	lwi	r3, r3, 0
20018d8c:	14632000 	rsubk	r3, r3, r4
20018d90:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20018d94:	e8930008 	lwi	r4, r19, 8
20018d98:	e873000c 	lwi	r3, r19, 12
20018d9c:	16441803 	cmpu	r18, r4, r3
20018da0:	bcb20008 	bgei	r18, 8		// 20018da8
20018da4:	10640000 	addk	r3, r4, r0
20018da8:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20018dac:	e8730004 	lwi	r3, r19, 4
20018db0:	30630001 	addik	r3, r3, 1
20018db4:	f8730004 	swi	r3, r19, 4
20018db8:	e8930004 	lwi	r4, r19, 4
20018dbc:	e873001c 	lwi	r3, r19, 28
20018dc0:	16432003 	cmpu	r18, r3, r4
20018dc4:	bc52ffa4 	blti	r18, -92		// 20018d68
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20018dc8:	e8730018 	lwi	r3, r19, 24
20018dcc:	e8830000 	lwi	r4, r3, 0
20018dd0:	e8730008 	lwi	r3, r19, 8
20018dd4:	14632000 	rsubk	r3, r3, r4
}
20018dd8:	10330000 	addk	r1, r19, r0
20018ddc:	ea610010 	lwi	r19, r1, 16
20018de0:	30210014 	addik	r1, r1, 20
20018de4:	b60f0008 	rtsd	r15, 8
20018de8:	80000000 	or	r0, r0, r0

20018dec <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20018dec:	3021fff4 	addik	r1, r1, -12
20018df0:	fa610008 	swi	r19, r1, 8
20018df4:	12610000 	addk	r19, r1, r0
20018df8:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20018dfc:	e8730010 	lwi	r3, r19, 16
20018e00:	e8630010 	lwi	r3, r3, 16
20018e04:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20018e08:	f8130004 	swi	r0, r19, 4
20018e0c:	b8000028 	bri	40		// 20018e34
        fifo->read_inds[i] = 0;
20018e10:	e8730010 	lwi	r3, r19, 16
20018e14:	e883000c 	lwi	r4, r3, 12
20018e18:	e8730004 	lwi	r3, r19, 4
20018e1c:	64630402 	bslli	r3, r3, 2
20018e20:	10641800 	addk	r3, r4, r3
20018e24:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20018e28:	e8730004 	lwi	r3, r19, 4
20018e2c:	30630001 	addik	r3, r3, 1
20018e30:	f8730004 	swi	r3, r19, 4
20018e34:	e8730010 	lwi	r3, r19, 16
20018e38:	e8830008 	lwi	r4, r3, 8
20018e3c:	e8730004 	lwi	r3, r19, 4
20018e40:	16441803 	cmpu	r18, r4, r3
20018e44:	bc52ffcc 	blti	r18, -52		// 20018e10
        fifo->read_inds[i] = 0;
    }
}
20018e48:	10330000 	addk	r1, r19, r0
20018e4c:	ea610008 	lwi	r19, r1, 8
20018e50:	3021000c 	addik	r1, r1, 12
20018e54:	b60f0008 	rtsd	r15, 8
20018e58:	80000000 	or	r0, r0, r0

20018e5c <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20018e5c:	3021fff4 	addik	r1, r1, -12
20018e60:	fa610008 	swi	r19, r1, 8
20018e64:	12610000 	addk	r19, r1, r0
20018e68:	f8b30010 	swi	r5, r19, 16
20018e6c:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20018e70:	e8730010 	lwi	r3, r19, 16
20018e74:	e8830004 	lwi	r4, r3, 4
20018e78:	e8730010 	lwi	r3, r19, 16
20018e7c:	e8a3000c 	lwi	r5, r3, 12
20018e80:	e8730014 	lwi	r3, r19, 20
20018e84:	64630402 	bslli	r3, r3, 2
20018e88:	10651800 	addk	r3, r5, r3
20018e8c:	e8a30000 	lwi	r5, r3, 0
20018e90:	e8730010 	lwi	r3, r19, 16
20018e94:	e8630000 	lwi	r3, r3, 0
20018e98:	3063ffff 	addik	r3, r3, -1
20018e9c:	84651800 	and	r3, r5, r3
20018ea0:	64630402 	bslli	r3, r3, 2
20018ea4:	10641800 	addk	r3, r4, r3
20018ea8:	e8630000 	lwi	r3, r3, 0
20018eac:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20018eb0:	e8730010 	lwi	r3, r19, 16
20018eb4:	e883000c 	lwi	r4, r3, 12
20018eb8:	e8730014 	lwi	r3, r19, 20
20018ebc:	64630402 	bslli	r3, r3, 2
20018ec0:	10641800 	addk	r3, r4, r3
20018ec4:	e8830000 	lwi	r4, r3, 0
20018ec8:	30840001 	addik	r4, r4, 1
20018ecc:	f8830000 	swi	r4, r3, 0
    return value;
20018ed0:	e8730004 	lwi	r3, r19, 4
}
20018ed4:	10330000 	addk	r1, r19, r0
20018ed8:	ea610008 	lwi	r19, r1, 8
20018edc:	3021000c 	addik	r1, r1, 12
20018ee0:	b60f0008 	rtsd	r15, 8
20018ee4:	80000000 	or	r0, r0, r0

20018ee8 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20018ee8:	3021fff8 	addik	r1, r1, -8
20018eec:	fa610004 	swi	r19, r1, 4
20018ef0:	12610000 	addk	r19, r1, r0
20018ef4:	f8b3000c 	swi	r5, r19, 12
20018ef8:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20018efc:	e873000c 	lwi	r3, r19, 12
20018f00:	e8830004 	lwi	r4, r3, 4
20018f04:	e873000c 	lwi	r3, r19, 12
20018f08:	e8630010 	lwi	r3, r3, 16
20018f0c:	e8a30000 	lwi	r5, r3, 0
20018f10:	e873000c 	lwi	r3, r19, 12
20018f14:	e8630000 	lwi	r3, r3, 0
20018f18:	3063ffff 	addik	r3, r3, -1
20018f1c:	84651800 	and	r3, r5, r3
20018f20:	64630402 	bslli	r3, r3, 2
20018f24:	10641800 	addk	r3, r4, r3
20018f28:	e8930010 	lwi	r4, r19, 16
20018f2c:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20018f30:	e873000c 	lwi	r3, r19, 12
20018f34:	e8630010 	lwi	r3, r3, 16
20018f38:	e8830000 	lwi	r4, r3, 0
20018f3c:	30840001 	addik	r4, r4, 1
20018f40:	f8830000 	swi	r4, r3, 0
}
20018f44:	10330000 	addk	r1, r19, r0
20018f48:	ea610004 	lwi	r19, r1, 4
20018f4c:	30210008 	addik	r1, r1, 8
20018f50:	b60f0008 	rtsd	r15, 8
20018f54:	80000000 	or	r0, r0, r0

20018f58 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20018f58:	3021fff8 	addik	r1, r1, -8
20018f5c:	fa610004 	swi	r19, r1, 4
20018f60:	12610000 	addk	r19, r1, r0
20018f64:	f8b3000c 	swi	r5, r19, 12
20018f68:	f8d30010 	swi	r6, r19, 16
20018f6c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20018f70:	e873000c 	lwi	r3, r19, 12
20018f74:	e8630010 	lwi	r3, r3, 16
20018f78:	e8830000 	lwi	r4, r3, 0
20018f7c:	e873000c 	lwi	r3, r19, 12
20018f80:	e8a3000c 	lwi	r5, r3, 12
20018f84:	e8730010 	lwi	r3, r19, 16
20018f88:	64630402 	bslli	r3, r3, 2
20018f8c:	10651800 	addk	r3, r5, r3
20018f90:	e8630000 	lwi	r3, r3, 0
20018f94:	14a32000 	rsubk	r5, r3, r4
20018f98:	30600001 	addik	r3, r0, 1
20018f9c:	e8930014 	lwi	r4, r19, 20
20018fa0:	16442803 	cmpu	r18, r4, r5
20018fa4:	bcb20008 	bgei	r18, 8		// 20018fac
20018fa8:	10600000 	addk	r3, r0, r0
20018fac:	a46300ff 	andi	r3, r3, 255
}
20018fb0:	10330000 	addk	r1, r19, r0
20018fb4:	ea610004 	lwi	r19, r1, 4
20018fb8:	30210008 	addik	r1, r1, 8
20018fbc:	b60f0008 	rtsd	r15, 8
20018fc0:	80000000 	or	r0, r0, r0

20018fc4 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20018fc4:	3021fff8 	addik	r1, r1, -8
20018fc8:	fa610004 	swi	r19, r1, 4
20018fcc:	12610000 	addk	r19, r1, r0
20018fd0:	f8b3000c 	swi	r5, r19, 12
20018fd4:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20018fd8:	e873000c 	lwi	r3, r19, 12
20018fdc:	e8630010 	lwi	r3, r3, 16
20018fe0:	e8830000 	lwi	r4, r3, 0
20018fe4:	e873000c 	lwi	r3, r19, 12
20018fe8:	e8a3000c 	lwi	r5, r3, 12
20018fec:	e8730010 	lwi	r3, r19, 16
20018ff0:	64630402 	bslli	r3, r3, 2
20018ff4:	10651800 	addk	r3, r5, r3
20018ff8:	e8630000 	lwi	r3, r3, 0
20018ffc:	14632000 	rsubk	r3, r3, r4
}
20019000:	10330000 	addk	r1, r19, r0
20019004:	ea610004 	lwi	r19, r1, 4
20019008:	30210008 	addik	r1, r1, 8
2001900c:	b60f0008 	rtsd	r15, 8
20019010:	80000000 	or	r0, r0, r0

20019014 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20019014:	3021fff4 	addik	r1, r1, -12
20019018:	fa610008 	swi	r19, r1, 8
2001901c:	12610000 	addk	r19, r1, r0
20019020:	f8b30010 	swi	r5, r19, 16
20019024:	f8d30014 	swi	r6, r19, 20
20019028:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001902c:	f8130004 	swi	r0, r19, 4
20019030:	b800005c 	bri	92		// 2001908c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20019034:	e8730010 	lwi	r3, r19, 16
20019038:	e8830000 	lwi	r4, r3, 0
2001903c:	e8730010 	lwi	r3, r19, 16
20019040:	e8a3000c 	lwi	r5, r3, 12
20019044:	e8730004 	lwi	r3, r19, 4
20019048:	64630402 	bslli	r3, r3, 2
2001904c:	10651800 	addk	r3, r5, r3
20019050:	e8a30000 	lwi	r5, r3, 0
20019054:	e8730010 	lwi	r3, r19, 16
20019058:	e8630010 	lwi	r3, r3, 16
2001905c:	e8630000 	lwi	r3, r3, 0
20019060:	14632800 	rsubk	r3, r3, r5
20019064:	10641800 	addk	r3, r4, r3
20019068:	30830001 	addik	r4, r3, 1
2001906c:	e8730018 	lwi	r3, r19, 24
20019070:	16441803 	cmpu	r18, r4, r3
20019074:	bc52000c 	blti	r18, 12		// 20019080
            return 0;
20019078:	10600000 	addk	r3, r0, r0
2001907c:	b8000024 	bri	36		// 200190a0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20019080:	e8730004 	lwi	r3, r19, 4
20019084:	30630001 	addik	r3, r3, 1
20019088:	f8730004 	swi	r3, r19, 4
2001908c:	e8930004 	lwi	r4, r19, 4
20019090:	e8730014 	lwi	r3, r19, 20
20019094:	16432003 	cmpu	r18, r3, r4
20019098:	bc52ff9c 	blti	r18, -100		// 20019034
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001909c:	30600001 	addik	r3, r0, 1
}
200190a0:	10330000 	addk	r1, r19, r0
200190a4:	ea610008 	lwi	r19, r1, 8
200190a8:	3021000c 	addik	r1, r1, 12
200190ac:	b60f0008 	rtsd	r15, 8
200190b0:	80000000 	or	r0, r0, r0

200190b4 <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200190b4:	3021ffec 	addik	r1, r1, -20
200190b8:	fa610010 	swi	r19, r1, 16
200190bc:	12610000 	addk	r19, r1, r0
200190c0:	f8b30018 	swi	r5, r19, 24
200190c4:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200190c8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200190cc:	f8130004 	swi	r0, r19, 4
200190d0:	b8000054 	bri	84		// 20019124
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200190d4:	e8730018 	lwi	r3, r19, 24
200190d8:	e8630010 	lwi	r3, r3, 16
200190dc:	e8830000 	lwi	r4, r3, 0
200190e0:	e8730018 	lwi	r3, r19, 24
200190e4:	e8a3000c 	lwi	r5, r3, 12
200190e8:	e8730004 	lwi	r3, r19, 4
200190ec:	64630402 	bslli	r3, r3, 2
200190f0:	10651800 	addk	r3, r5, r3
200190f4:	e8630000 	lwi	r3, r3, 0
200190f8:	14632000 	rsubk	r3, r3, r4
200190fc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20019100:	e8930008 	lwi	r4, r19, 8
20019104:	e873000c 	lwi	r3, r19, 12
20019108:	16441803 	cmpu	r18, r4, r3
2001910c:	bcb20008 	bgei	r18, 8		// 20019114
20019110:	10640000 	addk	r3, r4, r0
20019114:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20019118:	e8730004 	lwi	r3, r19, 4
2001911c:	30630001 	addik	r3, r3, 1
20019120:	f8730004 	swi	r3, r19, 4
20019124:	e8930004 	lwi	r4, r19, 4
20019128:	e873001c 	lwi	r3, r19, 28
2001912c:	16432003 	cmpu	r18, r3, r4
20019130:	bc52ffa4 	blti	r18, -92		// 200190d4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20019134:	e8730018 	lwi	r3, r19, 24
20019138:	e8830000 	lwi	r4, r3, 0
2001913c:	e8730008 	lwi	r3, r19, 8
20019140:	14632000 	rsubk	r3, r3, r4
}
20019144:	10330000 	addk	r1, r19, r0
20019148:	ea610010 	lwi	r19, r1, 16
2001914c:	30210014 	addik	r1, r1, 20
20019150:	b60f0008 	rtsd	r15, 8
20019154:	80000000 	or	r0, r0, r0

20019158 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20019158:	3021fff4 	addik	r1, r1, -12
2001915c:	fa610008 	swi	r19, r1, 8
20019160:	12610000 	addk	r19, r1, r0
20019164:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20019168:	e8730010 	lwi	r3, r19, 16
2001916c:	e8630010 	lwi	r3, r3, 16
20019170:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20019174:	f8130004 	swi	r0, r19, 4
20019178:	b8000028 	bri	40		// 200191a0
        fifo->read_inds[i] = 0;
2001917c:	e8730010 	lwi	r3, r19, 16
20019180:	e883000c 	lwi	r4, r3, 12
20019184:	e8730004 	lwi	r3, r19, 4
20019188:	64630402 	bslli	r3, r3, 2
2001918c:	10641800 	addk	r3, r4, r3
20019190:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20019194:	e8730004 	lwi	r3, r19, 4
20019198:	30630001 	addik	r3, r3, 1
2001919c:	f8730004 	swi	r3, r19, 4
200191a0:	e8730010 	lwi	r3, r19, 16
200191a4:	e8830008 	lwi	r4, r3, 8
200191a8:	e8730004 	lwi	r3, r19, 4
200191ac:	16441803 	cmpu	r18, r4, r3
200191b0:	bc52ffcc 	blti	r18, -52		// 2001917c
        fifo->read_inds[i] = 0;
    }
}
200191b4:	10330000 	addk	r1, r19, r0
200191b8:	ea610008 	lwi	r19, r1, 8
200191bc:	3021000c 	addik	r1, r1, 12
200191c0:	b60f0008 	rtsd	r15, 8
200191c4:	80000000 	or	r0, r0, r0

200191c8 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200191c8:	3021fff0 	addik	r1, r1, -16
200191cc:	fa61000c 	swi	r19, r1, 12
200191d0:	12610000 	addk	r19, r1, r0
200191d4:	f8b30014 	swi	r5, r19, 20
200191d8:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200191dc:	e8730014 	lwi	r3, r19, 20
200191e0:	e8830004 	lwi	r4, r3, 4
200191e4:	e8730014 	lwi	r3, r19, 20
200191e8:	e8a3000c 	lwi	r5, r3, 12
200191ec:	e8730018 	lwi	r3, r19, 24
200191f0:	64630402 	bslli	r3, r3, 2
200191f4:	10651800 	addk	r3, r5, r3
200191f8:	e8a30000 	lwi	r5, r3, 0
200191fc:	e8730014 	lwi	r3, r19, 20
20019200:	e8630000 	lwi	r3, r3, 0
20019204:	3063ffff 	addik	r3, r3, -1
20019208:	84651800 	and	r3, r5, r3
2001920c:	64630403 	bslli	r3, r3, 3
20019210:	10641800 	addk	r3, r4, r3
20019214:	e8830000 	lwi	r4, r3, 0
20019218:	e8a30004 	lwi	r5, r3, 4
2001921c:	f8930004 	swi	r4, r19, 4
20019220:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20019224:	e8730014 	lwi	r3, r19, 20
20019228:	e883000c 	lwi	r4, r3, 12
2001922c:	e8730018 	lwi	r3, r19, 24
20019230:	64630402 	bslli	r3, r3, 2
20019234:	10641800 	addk	r3, r4, r3
20019238:	e8830000 	lwi	r4, r3, 0
2001923c:	30840001 	addik	r4, r4, 1
20019240:	f8830000 	swi	r4, r3, 0
    return value;
20019244:	e8930004 	lwi	r4, r19, 4
20019248:	e8b30008 	lwi	r5, r19, 8
}
2001924c:	10640000 	addk	r3, r4, r0
20019250:	10850000 	addk	r4, r5, r0
20019254:	10330000 	addk	r1, r19, r0
20019258:	ea61000c 	lwi	r19, r1, 12
2001925c:	30210010 	addik	r1, r1, 16
20019260:	b60f0008 	rtsd	r15, 8
20019264:	80000000 	or	r0, r0, r0

20019268 <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20019268:	3021fff8 	addik	r1, r1, -8
2001926c:	fa610004 	swi	r19, r1, 4
20019270:	12610000 	addk	r19, r1, r0
20019274:	f8b3000c 	swi	r5, r19, 12
20019278:	f8d30010 	swi	r6, r19, 16
2001927c:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20019280:	e873000c 	lwi	r3, r19, 12
20019284:	e8830004 	lwi	r4, r3, 4
20019288:	e873000c 	lwi	r3, r19, 12
2001928c:	e8630010 	lwi	r3, r3, 16
20019290:	e8a30000 	lwi	r5, r3, 0
20019294:	e873000c 	lwi	r3, r19, 12
20019298:	e8630000 	lwi	r3, r3, 0
2001929c:	3063ffff 	addik	r3, r3, -1
200192a0:	84651800 	and	r3, r5, r3
200192a4:	64630403 	bslli	r3, r3, 3
200192a8:	10641800 	addk	r3, r4, r3
200192ac:	e8930010 	lwi	r4, r19, 16
200192b0:	e8b30014 	lwi	r5, r19, 20
200192b4:	f8830000 	swi	r4, r3, 0
200192b8:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
200192bc:	e873000c 	lwi	r3, r19, 12
200192c0:	e8630010 	lwi	r3, r3, 16
200192c4:	e8830000 	lwi	r4, r3, 0
200192c8:	30840001 	addik	r4, r4, 1
200192cc:	f8830000 	swi	r4, r3, 0
}
200192d0:	10330000 	addk	r1, r19, r0
200192d4:	ea610004 	lwi	r19, r1, 4
200192d8:	30210008 	addik	r1, r1, 8
200192dc:	b60f0008 	rtsd	r15, 8
200192e0:	80000000 	or	r0, r0, r0

200192e4 <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200192e4:	3021fff8 	addik	r1, r1, -8
200192e8:	fa610004 	swi	r19, r1, 4
200192ec:	12610000 	addk	r19, r1, r0
200192f0:	f8b3000c 	swi	r5, r19, 12
200192f4:	f8d30010 	swi	r6, r19, 16
200192f8:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200192fc:	e873000c 	lwi	r3, r19, 12
20019300:	e8630010 	lwi	r3, r3, 16
20019304:	e8830000 	lwi	r4, r3, 0
20019308:	e873000c 	lwi	r3, r19, 12
2001930c:	e8a3000c 	lwi	r5, r3, 12
20019310:	e8730010 	lwi	r3, r19, 16
20019314:	64630402 	bslli	r3, r3, 2
20019318:	10651800 	addk	r3, r5, r3
2001931c:	e8630000 	lwi	r3, r3, 0
20019320:	14a32000 	rsubk	r5, r3, r4
20019324:	30600001 	addik	r3, r0, 1
20019328:	e8930014 	lwi	r4, r19, 20
2001932c:	16442803 	cmpu	r18, r4, r5
20019330:	bcb20008 	bgei	r18, 8		// 20019338
20019334:	10600000 	addk	r3, r0, r0
20019338:	a46300ff 	andi	r3, r3, 255
}
2001933c:	10330000 	addk	r1, r19, r0
20019340:	ea610004 	lwi	r19, r1, 4
20019344:	30210008 	addik	r1, r1, 8
20019348:	b60f0008 	rtsd	r15, 8
2001934c:	80000000 	or	r0, r0, r0

20019350 <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20019350:	3021fff8 	addik	r1, r1, -8
20019354:	fa610004 	swi	r19, r1, 4
20019358:	12610000 	addk	r19, r1, r0
2001935c:	f8b3000c 	swi	r5, r19, 12
20019360:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20019364:	e873000c 	lwi	r3, r19, 12
20019368:	e8630010 	lwi	r3, r3, 16
2001936c:	e8830000 	lwi	r4, r3, 0
20019370:	e873000c 	lwi	r3, r19, 12
20019374:	e8a3000c 	lwi	r5, r3, 12
20019378:	e8730010 	lwi	r3, r19, 16
2001937c:	64630402 	bslli	r3, r3, 2
20019380:	10651800 	addk	r3, r5, r3
20019384:	e8630000 	lwi	r3, r3, 0
20019388:	14632000 	rsubk	r3, r3, r4
}
2001938c:	10330000 	addk	r1, r19, r0
20019390:	ea610004 	lwi	r19, r1, 4
20019394:	30210008 	addik	r1, r1, 8
20019398:	b60f0008 	rtsd	r15, 8
2001939c:	80000000 	or	r0, r0, r0

200193a0 <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200193a0:	3021fff4 	addik	r1, r1, -12
200193a4:	fa610008 	swi	r19, r1, 8
200193a8:	12610000 	addk	r19, r1, r0
200193ac:	f8b30010 	swi	r5, r19, 16
200193b0:	f8d30014 	swi	r6, r19, 20
200193b4:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200193b8:	f8130004 	swi	r0, r19, 4
200193bc:	b800005c 	bri	92		// 20019418
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200193c0:	e8730010 	lwi	r3, r19, 16
200193c4:	e8830000 	lwi	r4, r3, 0
200193c8:	e8730010 	lwi	r3, r19, 16
200193cc:	e8a3000c 	lwi	r5, r3, 12
200193d0:	e8730004 	lwi	r3, r19, 4
200193d4:	64630402 	bslli	r3, r3, 2
200193d8:	10651800 	addk	r3, r5, r3
200193dc:	e8a30000 	lwi	r5, r3, 0
200193e0:	e8730010 	lwi	r3, r19, 16
200193e4:	e8630010 	lwi	r3, r3, 16
200193e8:	e8630000 	lwi	r3, r3, 0
200193ec:	14632800 	rsubk	r3, r3, r5
200193f0:	10641800 	addk	r3, r4, r3
200193f4:	30830001 	addik	r4, r3, 1
200193f8:	e8730018 	lwi	r3, r19, 24
200193fc:	16441803 	cmpu	r18, r4, r3
20019400:	bc52000c 	blti	r18, 12		// 2001940c
            return 0;
20019404:	10600000 	addk	r3, r0, r0
20019408:	b8000024 	bri	36		// 2001942c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001940c:	e8730004 	lwi	r3, r19, 4
20019410:	30630001 	addik	r3, r3, 1
20019414:	f8730004 	swi	r3, r19, 4
20019418:	e8930004 	lwi	r4, r19, 4
2001941c:	e8730014 	lwi	r3, r19, 20
20019420:	16432003 	cmpu	r18, r3, r4
20019424:	bc52ff9c 	blti	r18, -100		// 200193c0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20019428:	30600001 	addik	r3, r0, 1
}
2001942c:	10330000 	addk	r1, r19, r0
20019430:	ea610008 	lwi	r19, r1, 8
20019434:	3021000c 	addik	r1, r1, 12
20019438:	b60f0008 	rtsd	r15, 8
2001943c:	80000000 	or	r0, r0, r0

20019440 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20019440:	3021ffec 	addik	r1, r1, -20
20019444:	fa610010 	swi	r19, r1, 16
20019448:	12610000 	addk	r19, r1, r0
2001944c:	f8b30018 	swi	r5, r19, 24
20019450:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20019454:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20019458:	f8130004 	swi	r0, r19, 4
2001945c:	b8000054 	bri	84		// 200194b0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20019460:	e8730018 	lwi	r3, r19, 24
20019464:	e8630010 	lwi	r3, r3, 16
20019468:	e8830000 	lwi	r4, r3, 0
2001946c:	e8730018 	lwi	r3, r19, 24
20019470:	e8a3000c 	lwi	r5, r3, 12
20019474:	e8730004 	lwi	r3, r19, 4
20019478:	64630402 	bslli	r3, r3, 2
2001947c:	10651800 	addk	r3, r5, r3
20019480:	e8630000 	lwi	r3, r3, 0
20019484:	14632000 	rsubk	r3, r3, r4
20019488:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001948c:	e8930008 	lwi	r4, r19, 8
20019490:	e873000c 	lwi	r3, r19, 12
20019494:	16441803 	cmpu	r18, r4, r3
20019498:	bcb20008 	bgei	r18, 8		// 200194a0
2001949c:	10640000 	addk	r3, r4, r0
200194a0:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200194a4:	e8730004 	lwi	r3, r19, 4
200194a8:	30630001 	addik	r3, r3, 1
200194ac:	f8730004 	swi	r3, r19, 4
200194b0:	e8930004 	lwi	r4, r19, 4
200194b4:	e873001c 	lwi	r3, r19, 28
200194b8:	16432003 	cmpu	r18, r3, r4
200194bc:	bc52ffa4 	blti	r18, -92		// 20019460
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200194c0:	e8730018 	lwi	r3, r19, 24
200194c4:	e8830000 	lwi	r4, r3, 0
200194c8:	e8730008 	lwi	r3, r19, 8
200194cc:	14632000 	rsubk	r3, r3, r4
}
200194d0:	10330000 	addk	r1, r19, r0
200194d4:	ea610010 	lwi	r19, r1, 16
200194d8:	30210014 	addik	r1, r1, 20
200194dc:	b60f0008 	rtsd	r15, 8
200194e0:	80000000 	or	r0, r0, r0

200194e4 <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200194e4:	3021fff4 	addik	r1, r1, -12
200194e8:	fa610008 	swi	r19, r1, 8
200194ec:	12610000 	addk	r19, r1, r0
200194f0:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
200194f4:	e8730010 	lwi	r3, r19, 16
200194f8:	e8630010 	lwi	r3, r3, 16
200194fc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20019500:	f8130004 	swi	r0, r19, 4
20019504:	b8000028 	bri	40		// 2001952c
        fifo->read_inds[i] = 0;
20019508:	e8730010 	lwi	r3, r19, 16
2001950c:	e883000c 	lwi	r4, r3, 12
20019510:	e8730004 	lwi	r3, r19, 4
20019514:	64630402 	bslli	r3, r3, 2
20019518:	10641800 	addk	r3, r4, r3
2001951c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20019520:	e8730004 	lwi	r3, r19, 4
20019524:	30630001 	addik	r3, r3, 1
20019528:	f8730004 	swi	r3, r19, 4
2001952c:	e8730010 	lwi	r3, r19, 16
20019530:	e8830008 	lwi	r4, r3, 8
20019534:	e8730004 	lwi	r3, r19, 4
20019538:	16441803 	cmpu	r18, r4, r3
2001953c:	bc52ffcc 	blti	r18, -52		// 20019508
        fifo->read_inds[i] = 0;
    }
}
20019540:	10330000 	addk	r1, r19, r0
20019544:	ea610008 	lwi	r19, r1, 8
20019548:	3021000c 	addik	r1, r1, 12
2001954c:	b60f0008 	rtsd	r15, 8
20019550:	80000000 	or	r0, r0, r0

20019554 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20019554:	3021fff4 	addik	r1, r1, -12
20019558:	fa610008 	swi	r19, r1, 8
2001955c:	12610000 	addk	r19, r1, r0
20019560:	f8b30010 	swi	r5, r19, 16
20019564:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20019568:	e8730010 	lwi	r3, r19, 16
2001956c:	e8830004 	lwi	r4, r3, 4
20019570:	e8730010 	lwi	r3, r19, 16
20019574:	e8a3000c 	lwi	r5, r3, 12
20019578:	e8730014 	lwi	r3, r19, 20
2001957c:	64630402 	bslli	r3, r3, 2
20019580:	10651800 	addk	r3, r5, r3
20019584:	e8a30000 	lwi	r5, r3, 0
20019588:	e8730010 	lwi	r3, r19, 16
2001958c:	e8630000 	lwi	r3, r3, 0
20019590:	3063ffff 	addik	r3, r3, -1
20019594:	84651800 	and	r3, r5, r3
20019598:	64630402 	bslli	r3, r3, 2
2001959c:	10641800 	addk	r3, r4, r3
200195a0:	e8630000 	lwi	r3, r3, 0
200195a4:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200195a8:	e8730010 	lwi	r3, r19, 16
200195ac:	e883000c 	lwi	r4, r3, 12
200195b0:	e8730014 	lwi	r3, r19, 20
200195b4:	64630402 	bslli	r3, r3, 2
200195b8:	10641800 	addk	r3, r4, r3
200195bc:	e8830000 	lwi	r4, r3, 0
200195c0:	30840001 	addik	r4, r4, 1
200195c4:	f8830000 	swi	r4, r3, 0
    return value;
200195c8:	e8730004 	lwi	r3, r19, 4
}
200195cc:	10330000 	addk	r1, r19, r0
200195d0:	ea610008 	lwi	r19, r1, 8
200195d4:	3021000c 	addik	r1, r1, 12
200195d8:	b60f0008 	rtsd	r15, 8
200195dc:	80000000 	or	r0, r0, r0

200195e0 <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200195e0:	3021fff8 	addik	r1, r1, -8
200195e4:	fa610004 	swi	r19, r1, 4
200195e8:	12610000 	addk	r19, r1, r0
200195ec:	f8b3000c 	swi	r5, r19, 12
200195f0:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200195f4:	e873000c 	lwi	r3, r19, 12
200195f8:	e8830004 	lwi	r4, r3, 4
200195fc:	e873000c 	lwi	r3, r19, 12
20019600:	e8630010 	lwi	r3, r3, 16
20019604:	e8a30000 	lwi	r5, r3, 0
20019608:	e873000c 	lwi	r3, r19, 12
2001960c:	e8630000 	lwi	r3, r3, 0
20019610:	3063ffff 	addik	r3, r3, -1
20019614:	84651800 	and	r3, r5, r3
20019618:	64630402 	bslli	r3, r3, 2
2001961c:	10641800 	addk	r3, r4, r3
20019620:	e8930010 	lwi	r4, r19, 16
20019624:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20019628:	e873000c 	lwi	r3, r19, 12
2001962c:	e8630010 	lwi	r3, r3, 16
20019630:	e8830000 	lwi	r4, r3, 0
20019634:	30840001 	addik	r4, r4, 1
20019638:	f8830000 	swi	r4, r3, 0
}
2001963c:	10330000 	addk	r1, r19, r0
20019640:	ea610004 	lwi	r19, r1, 4
20019644:	30210008 	addik	r1, r1, 8
20019648:	b60f0008 	rtsd	r15, 8
2001964c:	80000000 	or	r0, r0, r0

20019650 <read_BTYPE>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_BTYPE() {
20019650:	3021ffe0 	addik	r1, r1, -32
20019654:	f9e10000 	swi	r15, r1, 0
20019658:	fa61001c 	swi	r19, r1, 28
2001965c:	12610000 	addk	r19, r1, r0
		index_BTYPE = decoder_parser_mvrecon_BTYPE->read_inds[1];
20019660:	b0002004 	imm	8196
20019664:	e8606b94 	lwi	r3, r0, 27540	// 20046b94 <decoder_parser_mvrecon_BTYPE>
20019668:	e863000c 	lwi	r3, r3, 12
2001966c:	e8630004 	lwi	r3, r3, 4
20019670:	b0002006 	imm	8198
20019674:	f8601c5c 	swi	r3, r0, 7260	// 20061c5c <index_BTYPE>
		numTokens_BTYPE = index_BTYPE + fifo_i16_get_num_tokens(decoder_parser_mvrecon_BTYPE, 1);
20019678:	b0002004 	imm	8196
2001967c:	e8606b94 	lwi	r3, r0, 27540	// 20046b94 <decoder_parser_mvrecon_BTYPE>
20019680:	10a30000 	addk	r5, r3, r0
20019684:	30c00001 	addik	r6, r0, 1
20019688:	b9f4e48c 	brlid	r15, -7028	// 20017b14 <fifo_i16_get_num_tokens>
2001968c:	80000000 	or	r0, r0, r0
20019690:	10830000 	addk	r4, r3, r0
20019694:	b0002006 	imm	8198
20019698:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
2001969c:	10641800 	addk	r3, r4, r3
200196a0:	b0002006 	imm	8198
200196a4:	f8601c60 	swi	r3, r0, 7264	// 20061c60 <numTokens_BTYPE>
	}
200196a8:	e9e10000 	lwi	r15, r1, 0
200196ac:	10330000 	addk	r1, r19, r0
200196b0:	ea61001c 	lwi	r19, r1, 28
200196b4:	30210020 	addik	r1, r1, 32
200196b8:	b60f0008 	rtsd	r15, 8
200196bc:	80000000 	or	r0, r0, r0

200196c0 <read_end_BTYPE>:
	
	static void read_end_BTYPE() {
200196c0:	3021fff8 	addik	r1, r1, -8
200196c4:	fa610004 	swi	r19, r1, 4
200196c8:	12610000 	addk	r19, r1, r0
		decoder_parser_mvrecon_BTYPE->read_inds[1] = index_BTYPE;
200196cc:	b0002004 	imm	8196
200196d0:	e8606b94 	lwi	r3, r0, 27540	// 20046b94 <decoder_parser_mvrecon_BTYPE>
200196d4:	e863000c 	lwi	r3, r3, 12
200196d8:	30630004 	addik	r3, r3, 4
200196dc:	b0002006 	imm	8198
200196e0:	e8801c5c 	lwi	r4, r0, 7260	// 20061c5c <index_BTYPE>
200196e4:	f8830000 	swi	r4, r3, 0
	}
200196e8:	10330000 	addk	r1, r19, r0
200196ec:	ea610004 	lwi	r19, r1, 4
200196f0:	30210008 	addik	r1, r1, 8
200196f4:	b60f0008 	rtsd	r15, 8
200196f8:	80000000 	or	r0, r0, r0

200196fc <read_MVIN>:
	static void read_MVIN() {
200196fc:	3021ffe0 	addik	r1, r1, -32
20019700:	f9e10000 	swi	r15, r1, 0
20019704:	fa61001c 	swi	r19, r1, 28
20019708:	12610000 	addk	r19, r1, r0
		index_MVIN = decoder_parser_mvrecon_MVIN->read_inds[0];
2001970c:	b0002004 	imm	8196
20019710:	e8606b78 	lwi	r3, r0, 27512	// 20046b78 <decoder_parser_mvrecon_MVIN>
20019714:	e863000c 	lwi	r3, r3, 12
20019718:	e8630000 	lwi	r3, r3, 0
2001971c:	b0002006 	imm	8198
20019720:	f8601c64 	swi	r3, r0, 7268	// 20061c64 <index_MVIN>
		numTokens_MVIN = index_MVIN + fifo_i16_get_num_tokens(decoder_parser_mvrecon_MVIN, 0);
20019724:	b0002004 	imm	8196
20019728:	e8606b78 	lwi	r3, r0, 27512	// 20046b78 <decoder_parser_mvrecon_MVIN>
2001972c:	10a30000 	addk	r5, r3, r0
20019730:	10c00000 	addk	r6, r0, r0
20019734:	b9f4e3e0 	brlid	r15, -7200	// 20017b14 <fifo_i16_get_num_tokens>
20019738:	80000000 	or	r0, r0, r0
2001973c:	10830000 	addk	r4, r3, r0
20019740:	b0002006 	imm	8198
20019744:	e8601c64 	lwi	r3, r0, 7268	// 20061c64 <index_MVIN>
20019748:	10641800 	addk	r3, r4, r3
2001974c:	b0002006 	imm	8198
20019750:	f8601c68 	swi	r3, r0, 7272	// 20061c68 <numTokens_MVIN>
	}
20019754:	e9e10000 	lwi	r15, r1, 0
20019758:	10330000 	addk	r1, r19, r0
2001975c:	ea61001c 	lwi	r19, r1, 28
20019760:	30210020 	addik	r1, r1, 32
20019764:	b60f0008 	rtsd	r15, 8
20019768:	80000000 	or	r0, r0, r0

2001976c <read_end_MVIN>:
	
	static void read_end_MVIN() {
2001976c:	3021fff8 	addik	r1, r1, -8
20019770:	fa610004 	swi	r19, r1, 4
20019774:	12610000 	addk	r19, r1, r0
		decoder_parser_mvrecon_MVIN->read_inds[0] = index_MVIN;
20019778:	b0002004 	imm	8196
2001977c:	e8606b78 	lwi	r3, r0, 27512	// 20046b78 <decoder_parser_mvrecon_MVIN>
20019780:	e863000c 	lwi	r3, r3, 12
20019784:	b0002006 	imm	8198
20019788:	e8801c64 	lwi	r4, r0, 7268	// 20061c64 <index_MVIN>
2001978c:	f8830000 	swi	r4, r3, 0
	}
20019790:	10330000 	addk	r1, r19, r0
20019794:	ea610004 	lwi	r19, r1, 4
20019798:	30210008 	addik	r1, r1, 8
2001979c:	b60f0008 	rtsd	r15, 8
200197a0:	80000000 	or	r0, r0, r0

200197a4 <read_A>:
	static void read_A() {
200197a4:	3021ffe0 	addik	r1, r1, -32
200197a8:	f9e10000 	swi	r15, r1, 0
200197ac:	fa61001c 	swi	r19, r1, 28
200197b0:	12610000 	addk	r19, r1, r0
		index_A = decoder_parser_mvrecon_A->read_inds[0];
200197b4:	b0002004 	imm	8196
200197b8:	e8606bb4 	lwi	r3, r0, 27572	// 20046bb4 <decoder_parser_mvrecon_A>
200197bc:	e863000c 	lwi	r3, r3, 12
200197c0:	e8630000 	lwi	r3, r3, 0
200197c4:	b0002006 	imm	8198
200197c8:	f8601c6c 	swi	r3, r0, 7276	// 20061c6c <index_A>
		numTokens_A = index_A + fifo_i16_get_num_tokens(decoder_parser_mvrecon_A, 0);
200197cc:	b0002004 	imm	8196
200197d0:	e8606bb4 	lwi	r3, r0, 27572	// 20046bb4 <decoder_parser_mvrecon_A>
200197d4:	10a30000 	addk	r5, r3, r0
200197d8:	10c00000 	addk	r6, r0, r0
200197dc:	b9f4e338 	brlid	r15, -7368	// 20017b14 <fifo_i16_get_num_tokens>
200197e0:	80000000 	or	r0, r0, r0
200197e4:	10830000 	addk	r4, r3, r0
200197e8:	b0002006 	imm	8198
200197ec:	e8601c6c 	lwi	r3, r0, 7276	// 20061c6c <index_A>
200197f0:	10641800 	addk	r3, r4, r3
200197f4:	b0002006 	imm	8198
200197f8:	f8601c70 	swi	r3, r0, 7280	// 20061c70 <numTokens_A>
	}
200197fc:	e9e10000 	lwi	r15, r1, 0
20019800:	10330000 	addk	r1, r19, r0
20019804:	ea61001c 	lwi	r19, r1, 28
20019808:	30210020 	addik	r1, r1, 32
2001980c:	b60f0008 	rtsd	r15, 8
20019810:	80000000 	or	r0, r0, r0

20019814 <read_end_A>:
	
	static void read_end_A() {
20019814:	3021fff8 	addik	r1, r1, -8
20019818:	fa610004 	swi	r19, r1, 4
2001981c:	12610000 	addk	r19, r1, r0
		decoder_parser_mvrecon_A->read_inds[0] = index_A;
20019820:	b0002004 	imm	8196
20019824:	e8606bb4 	lwi	r3, r0, 27572	// 20046bb4 <decoder_parser_mvrecon_A>
20019828:	e863000c 	lwi	r3, r3, 12
2001982c:	b0002006 	imm	8198
20019830:	e8801c6c 	lwi	r4, r0, 7276	// 20061c6c <index_A>
20019834:	f8830000 	swi	r4, r3, 0
	}
20019838:	10330000 	addk	r1, r19, r0
2001983c:	ea610004 	lwi	r19, r1, 4
20019840:	30210008 	addik	r1, r1, 8
20019844:	b60f0008 	rtsd	r15, 8
20019848:	80000000 	or	r0, r0, r0

2001984c <write_MV>:

	static void write_MV() {
2001984c:	3021ffe0 	addik	r1, r1, -32
20019850:	f9e10000 	swi	r15, r1, 0
20019854:	fa61001c 	swi	r19, r1, 28
20019858:	12610000 	addk	r19, r1, r0
		index_MV = (*decoder_parser_mvrecon_MV->write_ind);
2001985c:	b0002004 	imm	8196
20019860:	e8606bc0 	lwi	r3, r0, 27584	// 20046bc0 <decoder_parser_mvrecon_MV>
20019864:	e8630010 	lwi	r3, r3, 16
20019868:	e8630000 	lwi	r3, r3, 0
2001986c:	b0002006 	imm	8198
20019870:	f8601c74 	swi	r3, r0, 7284	// 20061c74 <index_MV>
		numFree_MV = index_MV + fifo_i16_get_room(decoder_parser_mvrecon_MV, NUM_READERS_MV);
20019874:	b0002004 	imm	8196
20019878:	e8606bc0 	lwi	r3, r0, 27584	// 20046bc0 <decoder_parser_mvrecon_MV>
2001987c:	10a30000 	addk	r5, r3, r0
20019880:	30c00001 	addik	r6, r0, 1
20019884:	b9f4e380 	brlid	r15, -7296	// 20017c04 <fifo_i16_get_room>
20019888:	80000000 	or	r0, r0, r0
2001988c:	10830000 	addk	r4, r3, r0
20019890:	b0002006 	imm	8198
20019894:	e8601c74 	lwi	r3, r0, 7284	// 20061c74 <index_MV>
20019898:	10641800 	addk	r3, r4, r3
2001989c:	b0002006 	imm	8198
200198a0:	f8601c78 	swi	r3, r0, 7288	// 20061c78 <numFree_MV>
	}
200198a4:	e9e10000 	lwi	r15, r1, 0
200198a8:	10330000 	addk	r1, r19, r0
200198ac:	ea61001c 	lwi	r19, r1, 28
200198b0:	30210020 	addik	r1, r1, 32
200198b4:	b60f0008 	rtsd	r15, 8
200198b8:	80000000 	or	r0, r0, r0

200198bc <write_end_MV>:
	
	static void write_end_MV() {
200198bc:	3021fff8 	addik	r1, r1, -8
200198c0:	fa610004 	swi	r19, r1, 4
200198c4:	12610000 	addk	r19, r1, r0
		(*decoder_parser_mvrecon_MV->write_ind) = index_MV;
200198c8:	b0002004 	imm	8196
200198cc:	e8606bc0 	lwi	r3, r0, 27584	// 20046bc0 <decoder_parser_mvrecon_MV>
200198d0:	e8630010 	lwi	r3, r3, 16
200198d4:	b0002006 	imm	8198
200198d8:	e8801c74 	lwi	r4, r0, 7284	// 20061c74 <index_MV>
200198dc:	f8830000 	swi	r4, r3, 0
	}
200198e0:	10330000 	addk	r1, r19, r0
200198e4:	ea610004 	lwi	r19, r1, 4
200198e8:	30210008 	addik	r1, r1, 8
200198ec:	b60f0008 	rtsd	r15, 8
200198f0:	80000000 	or	r0, r0, r0

200198f4 <middle>:
	static i32 mvcalc(i32 pred, i32 mv_mag, i32 mag_shift);
	static i32 mvclip(i32 v);
	static i32 uvclip_1(i32 v);
	static i32 uvclip_4(i32 v);

	static i32 middle(i32 a, i32 b, i32 c) {
200198f4:	3021fff4 	addik	r1, r1, -12
200198f8:	fa610008 	swi	r19, r1, 8
200198fc:	12610000 	addk	r19, r1, r0
20019900:	f8b30010 	swi	r5, r19, 16
20019904:	f8d30014 	swi	r6, r19, 20
20019908:	f8f30018 	swi	r7, r19, 24
		i32 tmp_if;
	
		if (a < b) {
2001990c:	e8930010 	lwi	r4, r19, 16
20019910:	e8730014 	lwi	r3, r19, 20
20019914:	16432001 	cmp	r18, r3, r4
20019918:	bcb20048 	bgei	r18, 72		// 20019960
			if (a > c) {
2001991c:	e8930010 	lwi	r4, r19, 16
20019920:	e8730018 	lwi	r3, r19, 24
20019924:	16441801 	cmp	r18, r4, r3
20019928:	bcb20010 	bgei	r18, 16		// 20019938
				tmp_if = a;
2001992c:	e8730010 	lwi	r3, r19, 16
20019930:	f8730004 	swi	r3, r19, 4
20019934:	b800006c 	bri	108		// 200199a0
			} else {
				if (b < c) {
20019938:	e8930014 	lwi	r4, r19, 20
2001993c:	e8730018 	lwi	r3, r19, 24
20019940:	16432001 	cmp	r18, r3, r4
20019944:	bcb20010 	bgei	r18, 16		// 20019954
					tmp_if = b;
20019948:	e8730014 	lwi	r3, r19, 20
2001994c:	f8730004 	swi	r3, r19, 4
20019950:	b8000050 	bri	80		// 200199a0
				} else {
					tmp_if = c;
20019954:	e8730018 	lwi	r3, r19, 24
20019958:	f8730004 	swi	r3, r19, 4
2001995c:	b8000044 	bri	68		// 200199a0
				}
			}
		} else {
			if (b > c) {
20019960:	e8930014 	lwi	r4, r19, 20
20019964:	e8730018 	lwi	r3, r19, 24
20019968:	16441801 	cmp	r18, r4, r3
2001996c:	bcb20010 	bgei	r18, 16		// 2001997c
				tmp_if = b;
20019970:	e8730014 	lwi	r3, r19, 20
20019974:	f8730004 	swi	r3, r19, 4
20019978:	b8000028 	bri	40		// 200199a0
			} else {
				if (a < c) {
2001997c:	e8930010 	lwi	r4, r19, 16
20019980:	e8730018 	lwi	r3, r19, 24
20019984:	16432001 	cmp	r18, r3, r4
20019988:	bcb20010 	bgei	r18, 16		// 20019998
					tmp_if = a;
2001998c:	e8730010 	lwi	r3, r19, 16
20019990:	f8730004 	swi	r3, r19, 4
20019994:	b800000c 	bri	12		// 200199a0
				} else {
					tmp_if = c;
20019998:	e8730018 	lwi	r3, r19, 24
2001999c:	f8730004 	swi	r3, r19, 4
				}
			}
		}
		return tmp_if;
200199a0:	e8730004 	lwi	r3, r19, 4
	}
200199a4:	10330000 	addk	r1, r19, r0
200199a8:	ea610008 	lwi	r19, r1, 8
200199ac:	3021000c 	addik	r1, r1, 12
200199b0:	b60f0008 	rtsd	r15, 8
200199b4:	80000000 	or	r0, r0, r0

200199b8 <mvcalc>:
	static i32 mvcalc(i32 pred, i32 mv_mag, i32 mag_shift) {
200199b8:	3021ffec 	addik	r1, r1, -20
200199bc:	fa610010 	swi	r19, r1, 16
200199c0:	12610000 	addk	r19, r1, r0
200199c4:	f8b30018 	swi	r5, r19, 24
200199c8:	f8d3001c 	swi	r6, r19, 28
200199cc:	f8f30020 	swi	r7, r19, 32
		i16 local_mv_rsize;
		i64 tmp_if;
	
		local_mv_rsize = mv_rsize;
200199d0:	b0002006 	imm	8198
200199d4:	e4601d84 	lhui	r3, r0, 7556	// 20061d84 <mv_rsize>
200199d8:	f473000c 	shi	r3, r19, 12
		if (local_mv_rsize == 0 || mv_mag == 0) {
200199dc:	e473000c 	lhui	r3, r19, 12
200199e0:	90630061 	sext16	r3, r3
200199e4:	bc03000c 	beqi	r3, 12		// 200199f0
200199e8:	e873001c 	lwi	r3, r19, 28
200199ec:	bc230030 	bnei	r3, 48		// 20019a1c
			tmp_if = pred + mv_mag;
200199f0:	e8930018 	lwi	r4, r19, 24
200199f4:	e873001c 	lwi	r3, r19, 28
200199f8:	10641800 	addk	r3, r4, r3
200199fc:	10801800 	addk	r4, r0, r3
20019a00:	00a42000 	add	r5, r4, r4
20019a04:	08a00000 	addc	r5, r0, r0
20019a08:	bc050008 	beqi	r5, 8		// 20019a10
20019a0c:	20a0ffff 	addi	r5, r0, -1
20019a10:	f8930004 	swi	r4, r19, 4
20019a14:	f8b30008 	swi	r5, r19, 8
20019a18:	b8000060 	bri	96		// 20019a78
		} else {
			if (mv_mag < 0) {
20019a1c:	e873001c 	lwi	r3, r19, 28
20019a20:	bca30030 	bgei	r3, 48		// 20019a50
				tmp_if = pred - mag_shift;
20019a24:	e8930018 	lwi	r4, r19, 24
20019a28:	e8730020 	lwi	r3, r19, 32
20019a2c:	14632000 	rsubk	r3, r3, r4
20019a30:	10801800 	addk	r4, r0, r3
20019a34:	00a42000 	add	r5, r4, r4
20019a38:	08a00000 	addc	r5, r0, r0
20019a3c:	bc050008 	beqi	r5, 8		// 20019a44
20019a40:	20a0ffff 	addi	r5, r0, -1
20019a44:	f8930004 	swi	r4, r19, 4
20019a48:	f8b30008 	swi	r5, r19, 8
20019a4c:	b800002c 	bri	44		// 20019a78
			} else {
				tmp_if = pred + mag_shift;
20019a50:	e8930018 	lwi	r4, r19, 24
20019a54:	e8730020 	lwi	r3, r19, 32
20019a58:	10641800 	addk	r3, r4, r3
20019a5c:	10801800 	addk	r4, r0, r3
20019a60:	00a42000 	add	r5, r4, r4
20019a64:	08a00000 	addc	r5, r0, r0
20019a68:	bc050008 	beqi	r5, 8		// 20019a70
20019a6c:	20a0ffff 	addi	r5, r0, -1
20019a70:	f8930004 	swi	r4, r19, 4
20019a74:	f8b30008 	swi	r5, r19, 8
			}
		}
		return tmp_if;
20019a78:	e8730004 	lwi	r3, r19, 4
	}
20019a7c:	10330000 	addk	r1, r19, r0
20019a80:	ea610010 	lwi	r19, r1, 16
20019a84:	30210014 	addik	r1, r1, 20
20019a88:	b60f0008 	rtsd	r15, 8
20019a8c:	80000000 	or	r0, r0, r0

20019a90 <mvclip>:
	static i32 mvclip(i32 v) {
20019a90:	3021ffe8 	addik	r1, r1, -24
20019a94:	fa610014 	swi	r19, r1, 20
20019a98:	12610000 	addk	r19, r1, r0
20019a9c:	f8b3001c 	swi	r5, r19, 28
		i16 local_mv_low;
		i64 tmp_if;
		i16 local_mv_range;
		i16 local_mv_high;
	
		local_mv_low = mv_low;
20019aa0:	b0002006 	imm	8198
20019aa4:	e4601d88 	lhui	r3, r0, 7560	// 20061d88 <mv_low>
20019aa8:	f473000c 	shi	r3, r19, 12
		if (v < local_mv_low) {
20019aac:	e473000c 	lhui	r3, r19, 12
20019ab0:	90830061 	sext16	r4, r3
20019ab4:	e873001c 	lwi	r3, r19, 28
20019ab8:	16441801 	cmp	r18, r4, r3
20019abc:	bcb20040 	bgei	r18, 64		// 20019afc
			local_mv_range = mv_range;
20019ac0:	b0002006 	imm	8198
20019ac4:	e4601d86 	lhui	r3, r0, 7558	// 20061d86 <mv_range>
20019ac8:	f473000e 	shi	r3, r19, 14
			tmp_if = v + local_mv_range;
20019acc:	e473000e 	lhui	r3, r19, 14
20019ad0:	90830061 	sext16	r4, r3
20019ad4:	e873001c 	lwi	r3, r19, 28
20019ad8:	10641800 	addk	r3, r4, r3
20019adc:	10801800 	addk	r4, r0, r3
20019ae0:	00a42000 	add	r5, r4, r4
20019ae4:	08a00000 	addc	r5, r0, r0
20019ae8:	bc050008 	beqi	r5, 8		// 20019af0
20019aec:	20a0ffff 	addi	r5, r0, -1
20019af0:	f8930004 	swi	r4, r19, 4
20019af4:	f8b30008 	swi	r5, r19, 8
20019af8:	b800007c 	bri	124		// 20019b74
		} else {
			local_mv_high = mv_high;
20019afc:	b0002006 	imm	8198
20019b00:	e4601d8a 	lhui	r3, r0, 7562	// 20061d8a <mv_high>
20019b04:	f4730010 	shi	r3, r19, 16
			if (v > local_mv_high) {
20019b08:	e4730010 	lhui	r3, r19, 16
20019b0c:	90830061 	sext16	r4, r3
20019b10:	e873001c 	lwi	r3, r19, 28
20019b14:	16432001 	cmp	r18, r3, r4
20019b18:	bcb20040 	bgei	r18, 64		// 20019b58
				local_mv_range = mv_range;
20019b1c:	b0002006 	imm	8198
20019b20:	e4601d86 	lhui	r3, r0, 7558	// 20061d86 <mv_range>
20019b24:	f473000e 	shi	r3, r19, 14
				tmp_if = v - local_mv_range;
20019b28:	e473000e 	lhui	r3, r19, 14
20019b2c:	90630061 	sext16	r3, r3
20019b30:	e893001c 	lwi	r4, r19, 28
20019b34:	14632000 	rsubk	r3, r3, r4
20019b38:	10801800 	addk	r4, r0, r3
20019b3c:	00a42000 	add	r5, r4, r4
20019b40:	08a00000 	addc	r5, r0, r0
20019b44:	bc050008 	beqi	r5, 8		// 20019b4c
20019b48:	20a0ffff 	addi	r5, r0, -1
20019b4c:	f8930004 	swi	r4, r19, 4
20019b50:	f8b30008 	swi	r5, r19, 8
20019b54:	b8000020 	bri	32		// 20019b74
			} else {
				tmp_if = v;
20019b58:	e893001c 	lwi	r4, r19, 28
20019b5c:	00a42000 	add	r5, r4, r4
20019b60:	08a00000 	addc	r5, r0, r0
20019b64:	bc050008 	beqi	r5, 8		// 20019b6c
20019b68:	20a0ffff 	addi	r5, r0, -1
20019b6c:	f8930004 	swi	r4, r19, 4
20019b70:	f8b30008 	swi	r5, r19, 8
			}
		}
		return tmp_if;
20019b74:	e8730004 	lwi	r3, r19, 4
	}
20019b78:	10330000 	addk	r1, r19, r0
20019b7c:	ea610014 	lwi	r19, r1, 20
20019b80:	30210018 	addik	r1, r1, 24
20019b84:	b60f0008 	rtsd	r15, 8
20019b88:	80000000 	or	r0, r0, r0

20019b8c <uvclip_1>:
	static i32 uvclip_1(i32 v) {
20019b8c:	3021fff0 	addik	r1, r1, -16
20019b90:	fa61000c 	swi	r19, r1, 12
20019b94:	12610000 	addk	r19, r1, r0
20019b98:	f8b30014 	swi	r5, r19, 20
		i32 vv;
		u8 tmp_if;
	
		vv = v >> 1;
20019b9c:	e8730014 	lwi	r3, r19, 20
20019ba0:	90630001 	sra	r3, r3
20019ba4:	f8730008 	swi	r3, r19, 8
		if ((v & 3) == 0) {
20019ba8:	e8730014 	lwi	r3, r19, 20
20019bac:	a4630003 	andi	r3, r3, 3
20019bb0:	bc23000c 	bnei	r3, 12		// 20019bbc
			tmp_if = 0;
20019bb4:	f0130004 	sbi	r0, r19, 4
20019bb8:	b800000c 	bri	12		// 20019bc4
		} else {
			tmp_if = 1;
20019bbc:	30600001 	addik	r3, r0, 1
20019bc0:	f0730004 	sbi	r3, r19, 4
		}
		return vv | tmp_if;
20019bc4:	e0930004 	lbui	r4, r19, 4
20019bc8:	e8730008 	lwi	r3, r19, 8
20019bcc:	80641800 	or	r3, r4, r3
	}
20019bd0:	10330000 	addk	r1, r19, r0
20019bd4:	ea61000c 	lwi	r19, r1, 12
20019bd8:	30210010 	addik	r1, r1, 16
20019bdc:	b60f0008 	rtsd	r15, 8
20019be0:	80000000 	or	r0, r0, r0

20019be4 <uvclip_4>:
	static i32 uvclip_4(i32 v) {
20019be4:	3021ffe0 	addik	r1, r1, -32
20019be8:	fa61001c 	swi	r19, r1, 28
20019bec:	12610000 	addk	r19, r1, r0
20019bf0:	f8b30024 	swi	r5, r19, 36
		i32 resv;
		i32 delta;
		i32 vv;
		i32 tmp_if;
	
		sign = v < 0;
20019bf4:	e8730024 	lwi	r3, r19, 36
20019bf8:	6463001f 	bsrli	r3, r3, 31
20019bfc:	a46300ff 	andi	r3, r3, 255
20019c00:	f8730010 	swi	r3, r19, 16
		if (sign) {
20019c04:	e8730010 	lwi	r3, r19, 16
20019c08:	bc030014 	beqi	r3, 20		// 20019c1c
			absv = -v;
20019c0c:	e8730024 	lwi	r3, r19, 36
20019c10:	14630000 	rsubk	r3, r3, r0
20019c14:	f8730004 	swi	r3, r19, 4
20019c18:	b800000c 	bri	12		// 20019c24
		} else {
			absv = v;
20019c1c:	e8730024 	lwi	r3, r19, 36
20019c20:	f8730004 	swi	r3, r19, 4
		}
		resv = absv - ((absv >> 4) << 4);
20019c24:	e8730004 	lwi	r3, r19, 4
20019c28:	a463000f 	andi	r3, r3, 15
20019c2c:	f8730014 	swi	r3, r19, 20
		if (resv < 3) {
20019c30:	e8930014 	lwi	r4, r19, 20
20019c34:	30600002 	addik	r3, r0, 2
20019c38:	16441801 	cmp	r18, r4, r3
20019c3c:	bc52000c 	blti	r18, 12		// 20019c48
			delta = 0;
20019c40:	f8130008 	swi	r0, r19, 8
20019c44:	b8000028 	bri	40		// 20019c6c
		} else {
			if (resv > 13) {
20019c48:	e8930014 	lwi	r4, r19, 20
20019c4c:	3060000d 	addik	r3, r0, 13
20019c50:	16441801 	cmp	r18, r4, r3
20019c54:	bcb20010 	bgei	r18, 16		// 20019c64
				delta = 2;
20019c58:	30600002 	addik	r3, r0, 2
20019c5c:	f8730008 	swi	r3, r19, 8
20019c60:	b800000c 	bri	12		// 20019c6c
			} else {
				delta = 1;
20019c64:	30600001 	addik	r3, r0, 1
20019c68:	f8730008 	swi	r3, r19, 8
			}
		}
		vv = ((absv >> 4) << 1) + delta;
20019c6c:	e8730004 	lwi	r3, r19, 4
20019c70:	64630204 	bsrai	r3, r3, 4
20019c74:	10831800 	addk	r4, r3, r3
20019c78:	e8730008 	lwi	r3, r19, 8
20019c7c:	10641800 	addk	r3, r4, r3
20019c80:	f8730018 	swi	r3, r19, 24
		if (sign) {
20019c84:	e8730010 	lwi	r3, r19, 16
20019c88:	bc030014 	beqi	r3, 20		// 20019c9c
			tmp_if = -vv;
20019c8c:	e8730018 	lwi	r3, r19, 24
20019c90:	14630000 	rsubk	r3, r3, r0
20019c94:	f873000c 	swi	r3, r19, 12
20019c98:	b800000c 	bri	12		// 20019ca4
		} else {
			tmp_if = vv;
20019c9c:	e8730018 	lwi	r3, r19, 24
20019ca0:	f873000c 	swi	r3, r19, 12
		}
		return tmp_if;
20019ca4:	e873000c 	lwi	r3, r19, 12
	}
20019ca8:	10330000 	addk	r1, r19, r0
20019cac:	ea61001c 	lwi	r19, r1, 28
20019cb0:	30210020 	addik	r1, r1, 32
20019cb4:	b60f0008 	rtsd	r15, 8
20019cb8:	80000000 	or	r0, r0, r0

20019cbc <isSchedulable_start>:

	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_start() {
20019cbc:	3021ffec 	addik	r1, r1, -20
20019cc0:	fa610010 	swi	r19, r1, 16
20019cc4:	12610000 	addk	r19, r1, r0
		i32 result;
		i16 cmd;
		i32 local_NEWVOP;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20019cc8:	b0002004 	imm	8196
20019ccc:	e8606b94 	lwi	r3, r0, 27540	// 20046b94 <decoder_parser_mvrecon_BTYPE>
20019cd0:	e8830004 	lwi	r4, r3, 4
20019cd4:	b0002006 	imm	8198
20019cd8:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
20019cdc:	a46301ff 	andi	r3, r3, 511
20019ce0:	10631800 	addk	r3, r3, r3
20019ce4:	10641800 	addk	r3, r4, r3
20019ce8:	e4630000 	lhui	r3, r3, 0
20019cec:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
20019cf0:	30600800 	addik	r3, r0, 2048
20019cf4:	f8730008 	swi	r3, r19, 8
		result = (cmd & local_NEWVOP) != 0;
20019cf8:	e4730004 	lhui	r3, r19, 4
20019cfc:	90830061 	sext16	r4, r3
20019d00:	e8730008 	lwi	r3, r19, 8
20019d04:	84841800 	and	r4, r4, r3
20019d08:	10600000 	addk	r3, r0, r0
20019d0c:	8c641c00 	pcmpne	r3, r4, r3
20019d10:	a46300ff 	andi	r3, r3, 255
20019d14:	f873000c 	swi	r3, r19, 12
		return result;
20019d18:	e873000c 	lwi	r3, r19, 12
	}
20019d1c:	10330000 	addk	r1, r19, r0
20019d20:	ea610010 	lwi	r19, r1, 16
20019d24:	30210014 	addik	r1, r1, 20
20019d28:	b60f0008 	rtsd	r15, 8
20019d2c:	80000000 	or	r0, r0, r0

20019d30 <start>:
	
	static void start() {
20019d30:	3021ffc8 	addik	r1, r1, -56
20019d34:	f9e10000 	swi	r15, r1, 0
20019d38:	fa610034 	swi	r19, r1, 52
20019d3c:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20019d40:	b0002006 	imm	8198
20019d44:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
20019d48:	a46301ff 	andi	r3, r3, 511
20019d4c:	f873001c 	swi	r3, r19, 28
		i32 local_FCODE_SHIFT;
		i8 fcode;
		i16 local_mv_rsize;
		i16 local_mv_range;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20019d50:	b0002004 	imm	8196
20019d54:	e8606b94 	lwi	r3, r0, 27540	// 20046b94 <decoder_parser_mvrecon_BTYPE>
20019d58:	e8830004 	lwi	r4, r3, 4
20019d5c:	b0002006 	imm	8198
20019d60:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
20019d64:	a46301ff 	andi	r3, r3, 511
20019d68:	10631800 	addk	r3, r3, r3
20019d6c:	10641800 	addk	r3, r4, r3
20019d70:	e4630000 	lhui	r3, r3, 0
20019d74:	f4730020 	shi	r3, r19, 32
		local_FCODE_MASK = ConstantsBtype_FCODE_MASK;
20019d78:	306001c0 	addik	r3, r0, 448
20019d7c:	f8730024 	swi	r3, r19, 36
		local_FCODE_SHIFT = Constants_FCODE_SHIFT;
20019d80:	30600006 	addik	r3, r0, 6
20019d84:	f8730028 	swi	r3, r19, 40
		fcode = (cmd & local_FCODE_MASK) >> local_FCODE_SHIFT;
20019d88:	e4730020 	lhui	r3, r19, 32
20019d8c:	90830061 	sext16	r4, r3
20019d90:	e8730024 	lwi	r3, r19, 36
20019d94:	84841800 	and	r4, r4, r3
20019d98:	e8730028 	lwi	r3, r19, 40
20019d9c:	44641a00 	bsra	r3, r4, r3
20019da0:	f073002c 	sbi	r3, r19, 44
		mbx = 0;
20019da4:	b0002006 	imm	8198
20019da8:	f0001c7c 	sbi	r0, r0, 7292	// 20061c7c <mbx>
		top_edge = 1;
20019dac:	30600001 	addik	r3, r0, 1
20019db0:	b0002004 	imm	8196
20019db4:	f8606c64 	swi	r3, r0, 27748	// 20046c64 <top_edge>
		comp = 0;
20019db8:	b0002006 	imm	8198
20019dbc:	f0001c7d 	sbi	r0, r0, 7293	// 20061c7d <comp>
		if (fcode > 0) {
20019dc0:	e073002c 	lbui	r3, r19, 44
20019dc4:	90630060 	sext8	r3, r3
20019dc8:	bc6300cc 	blei	r3, 204		// 20019e94
			mv_rsize = fcode - 1;
20019dcc:	e073002c 	lbui	r3, r19, 44
20019dd0:	90630060 	sext8	r3, r3
20019dd4:	b0000000 	imm	0
20019dd8:	a463ffff 	andi	r3, r3, -1
20019ddc:	3063ffff 	addik	r3, r3, -1
20019de0:	b0000000 	imm	0
20019de4:	a463ffff 	andi	r3, r3, -1
20019de8:	90630061 	sext16	r3, r3
20019dec:	b0002006 	imm	8198
20019df0:	f4601d84 	shi	r3, r0, 7556	// 20061d84 <mv_rsize>
			local_mv_rsize = mv_rsize;
20019df4:	b0002006 	imm	8198
20019df8:	e4601d84 	lhui	r3, r0, 7556	// 20061d84 <mv_rsize>
20019dfc:	f473002e 	shi	r3, r19, 46
			mv_range = 1 << (local_mv_rsize + 5);
20019e00:	e473002e 	lhui	r3, r19, 46
20019e04:	90630061 	sext16	r3, r3
20019e08:	30630005 	addik	r3, r3, 5
20019e0c:	30800001 	addik	r4, r0, 1
20019e10:	44641c00 	bsll	r3, r4, r3
20019e14:	90630061 	sext16	r3, r3
20019e18:	b0002006 	imm	8198
20019e1c:	f4601d86 	shi	r3, r0, 7558	// 20061d86 <mv_range>
			local_mv_range = mv_range;
20019e20:	b0002006 	imm	8198
20019e24:	e4601d86 	lhui	r3, r0, 7558	// 20061d86 <mv_range>
20019e28:	f4730030 	shi	r3, r19, 48
			mv_low = -local_mv_range;
20019e2c:	e4730030 	lhui	r3, r19, 48
20019e30:	14630000 	rsubk	r3, r3, r0
20019e34:	b0000000 	imm	0
20019e38:	a463ffff 	andi	r3, r3, -1
20019e3c:	90630061 	sext16	r3, r3
20019e40:	b0002006 	imm	8198
20019e44:	f4601d88 	shi	r3, r0, 7560	// 20061d88 <mv_low>
			local_mv_range = mv_range;
20019e48:	b0002006 	imm	8198
20019e4c:	e4601d86 	lhui	r3, r0, 7558	// 20061d86 <mv_range>
20019e50:	f4730030 	shi	r3, r19, 48
			mv_high = local_mv_range - 1;
20019e54:	e4730030 	lhui	r3, r19, 48
20019e58:	3063ffff 	addik	r3, r3, -1
20019e5c:	b0000000 	imm	0
20019e60:	a463ffff 	andi	r3, r3, -1
20019e64:	90630061 	sext16	r3, r3
20019e68:	b0002006 	imm	8198
20019e6c:	f4601d8a 	shi	r3, r0, 7562	// 20061d8a <mv_high>
			local_mv_range = mv_range;
20019e70:	b0002006 	imm	8198
20019e74:	e4601d86 	lhui	r3, r0, 7558	// 20061d86 <mv_range>
20019e78:	f4730030 	shi	r3, r19, 48
			mv_range = local_mv_range << 1;
20019e7c:	e4730030 	lhui	r3, r19, 48
20019e80:	90630061 	sext16	r3, r3
20019e84:	10631800 	addk	r3, r3, r3
20019e88:	90630061 	sext16	r3, r3
20019e8c:	b0002006 	imm	8198
20019e90:	f4601d86 	shi	r3, r0, 7558	// 20061d86 <mv_range>
		}
	
		// Update ports indexes
		index_BTYPE += 1;
20019e94:	b0002006 	imm	8198
20019e98:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
20019e9c:	30630001 	addik	r3, r3, 1
20019ea0:	b0002006 	imm	8198
20019ea4:	f8601c5c 	swi	r3, r0, 7260	// 20061c5c <index_BTYPE>
		
		read_end_BTYPE();
20019ea8:	b9f4f818 	brlid	r15, -2024	// 200196c0 <read_end_BTYPE>
20019eac:	80000000 	or	r0, r0, r0
	}
20019eb0:	e9e10000 	lwi	r15, r1, 0
20019eb4:	10330000 	addk	r1, r19, r0
20019eb8:	ea610034 	lwi	r19, r1, 52
20019ebc:	30210038 	addik	r1, r1, 56
20019ec0:	b60f0008 	rtsd	r15, 8
20019ec4:	80000000 	or	r0, r0, r0

20019ec8 <isSchedulable_getw>:
	static i32 isSchedulable_getw() {
20019ec8:	3021fff4 	addik	r1, r1, -12
20019ecc:	fa610008 	swi	r19, r1, 8
20019ed0:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
20019ed4:	30600001 	addik	r3, r0, 1
20019ed8:	f8730004 	swi	r3, r19, 4
		return result;
20019edc:	e8730004 	lwi	r3, r19, 4
	}
20019ee0:	10330000 	addk	r1, r19, r0
20019ee4:	ea610008 	lwi	r19, r1, 8
20019ee8:	3021000c 	addik	r1, r1, 12
20019eec:	b60f0008 	rtsd	r15, 8
20019ef0:	80000000 	or	r0, r0, r0

20019ef4 <getw_replaced>:
	
	static void getw_replaced() {
20019ef4:	3021ffd8 	addik	r1, r1, -40
20019ef8:	f9e10000 	swi	r15, r1, 0
20019efc:	fa610024 	swi	r19, r1, 36
20019f00:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20019f04:	b0002006 	imm	8198
20019f08:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
20019f0c:	a46301ff 	andi	r3, r3, 511
20019f10:	f873001c 	swi	r3, r19, 28
	
		i16 w;
	
		w = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20019f14:	b0002004 	imm	8196
20019f18:	e8606b94 	lwi	r3, r0, 27540	// 20046b94 <decoder_parser_mvrecon_BTYPE>
20019f1c:	e8830004 	lwi	r4, r3, 4
20019f20:	b0002006 	imm	8198
20019f24:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
20019f28:	a46301ff 	andi	r3, r3, 511
20019f2c:	10631800 	addk	r3, r3, r3
20019f30:	10641800 	addk	r3, r4, r3
20019f34:	e4630000 	lhui	r3, r3, 0
20019f38:	f4730020 	shi	r3, r19, 32
		mbwidth = w;
20019f3c:	e4730020 	lhui	r3, r19, 32
20019f40:	90630060 	sext8	r3, r3
20019f44:	b0002006 	imm	8198
20019f48:	f0601c7e 	sbi	r3, r0, 7294	// 20061c7e <mbwidth>
		ptr = 8;
20019f4c:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20019f50:	b0002006 	imm	8198
20019f54:	f4601c80 	shi	r3, r0, 7296	// 20061c80 <ptr>
	
		// Update ports indexes
		index_BTYPE += 1;
20019f58:	b0002006 	imm	8198
20019f5c:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
20019f60:	30630001 	addik	r3, r3, 1
20019f64:	b0002006 	imm	8198
20019f68:	f8601c5c 	swi	r3, r0, 7260	// 20061c5c <index_BTYPE>
		
		read_end_BTYPE();
20019f6c:	b9f4f754 	brlid	r15, -2220	// 200196c0 <read_end_BTYPE>
20019f70:	80000000 	or	r0, r0, r0
	}
20019f74:	e9e10000 	lwi	r15, r1, 0
20019f78:	10330000 	addk	r1, r19, r0
20019f7c:	ea610024 	lwi	r19, r1, 36
20019f80:	30210028 	addik	r1, r1, 40
20019f84:	b60f0008 	rtsd	r15, 8
20019f88:	80000000 	or	r0, r0, r0

20019f8c <isSchedulable_geth>:
	static i32 isSchedulable_geth() {
20019f8c:	3021fff4 	addik	r1, r1, -12
20019f90:	fa610008 	swi	r19, r1, 8
20019f94:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
20019f98:	30600001 	addik	r3, r0, 1
20019f9c:	f8730004 	swi	r3, r19, 4
		return result;
20019fa0:	e8730004 	lwi	r3, r19, 4
	}
20019fa4:	10330000 	addk	r1, r19, r0
20019fa8:	ea610008 	lwi	r19, r1, 8
20019fac:	3021000c 	addik	r1, r1, 12
20019fb0:	b60f0008 	rtsd	r15, 8
20019fb4:	80000000 	or	r0, r0, r0

20019fb8 <geth>:
	
	static void geth() {
20019fb8:	3021ffd8 	addik	r1, r1, -40
20019fbc:	f9e10000 	swi	r15, r1, 0
20019fc0:	fa610024 	swi	r19, r1, 36
20019fc4:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20019fc8:	b0002006 	imm	8198
20019fcc:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
20019fd0:	a46301ff 	andi	r3, r3, 511
20019fd4:	f873001c 	swi	r3, r19, 28
	
		i16 h;
	
		h = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20019fd8:	b0002004 	imm	8196
20019fdc:	e8606b94 	lwi	r3, r0, 27540	// 20046b94 <decoder_parser_mvrecon_BTYPE>
20019fe0:	e8830004 	lwi	r4, r3, 4
20019fe4:	b0002006 	imm	8198
20019fe8:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
20019fec:	a46301ff 	andi	r3, r3, 511
20019ff0:	10631800 	addk	r3, r3, r3
20019ff4:	10641800 	addk	r3, r4, r3
20019ff8:	e4630000 	lhui	r3, r3, 0
20019ffc:	f4730020 	shi	r3, r19, 32
	
		// Update ports indexes
		index_BTYPE += 1;
2001a000:	b0002006 	imm	8198
2001a004:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
2001a008:	30630001 	addik	r3, r3, 1
2001a00c:	b0002006 	imm	8198
2001a010:	f8601c5c 	swi	r3, r0, 7260	// 20061c5c <index_BTYPE>
		
		read_end_BTYPE();
2001a014:	b9f4f6ac 	brlid	r15, -2388	// 200196c0 <read_end_BTYPE>
2001a018:	80000000 	or	r0, r0, r0
	}
2001a01c:	e9e10000 	lwi	r15, r1, 0
2001a020:	10330000 	addk	r1, r19, r0
2001a024:	ea610024 	lwi	r19, r1, 36
2001a028:	30210028 	addik	r1, r1, 40
2001a02c:	b60f0008 	rtsd	r15, 8
2001a030:	80000000 	or	r0, r0, r0

2001a034 <isSchedulable_read_noMotion>:
	static i32 isSchedulable_read_noMotion() {
2001a034:	3021ffe4 	addik	r1, r1, -28
2001a038:	fa610018 	swi	r19, r1, 24
2001a03c:	12610000 	addk	r19, r1, r0
		i16 cmd;
		i32 local_INTER;
		i32 local_MOTION;
		i32 local_NEWVOP;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001a040:	b0002004 	imm	8196
2001a044:	e8606b94 	lwi	r3, r0, 27540	// 20046b94 <decoder_parser_mvrecon_BTYPE>
2001a048:	e8830004 	lwi	r4, r3, 4
2001a04c:	b0002006 	imm	8198
2001a050:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
2001a054:	a46301ff 	andi	r3, r3, 511
2001a058:	10631800 	addk	r3, r3, r3
2001a05c:	10641800 	addk	r3, r4, r3
2001a060:	e4630000 	lhui	r3, r3, 0
2001a064:	f4730004 	shi	r3, r19, 4
		local_INTER = ConstantsBtype_INTER;
2001a068:	30600200 	addik	r3, r0, 512
2001a06c:	f8730008 	swi	r3, r19, 8
		local_MOTION = ConstantsBtype_MOTION;
2001a070:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2001a074:	f873000c 	swi	r3, r19, 12
		local_NEWVOP = ConstantsBtype_NEWVOP;
2001a078:	30600800 	addik	r3, r0, 2048
2001a07c:	f8730010 	swi	r3, r19, 16
		result = ((cmd & local_INTER) == 0 || (cmd & local_MOTION) == 0) && (cmd & local_NEWVOP) == 0;
2001a080:	e4730004 	lhui	r3, r19, 4
2001a084:	90830061 	sext16	r4, r3
2001a088:	e8730008 	lwi	r3, r19, 8
2001a08c:	84641800 	and	r3, r4, r3
2001a090:	bc030018 	beqi	r3, 24		// 2001a0a8
2001a094:	e4730004 	lhui	r3, r19, 4
2001a098:	90830061 	sext16	r4, r3
2001a09c:	e873000c 	lwi	r3, r19, 12
2001a0a0:	84641800 	and	r3, r4, r3
2001a0a4:	bc230020 	bnei	r3, 32		// 2001a0c4
2001a0a8:	e4730004 	lhui	r3, r19, 4
2001a0ac:	90830061 	sext16	r4, r3
2001a0b0:	e8730010 	lwi	r3, r19, 16
2001a0b4:	84641800 	and	r3, r4, r3
2001a0b8:	bc23000c 	bnei	r3, 12		// 2001a0c4
2001a0bc:	30600001 	addik	r3, r0, 1
2001a0c0:	b8000008 	bri	8		// 2001a0c8
2001a0c4:	10600000 	addk	r3, r0, r0
2001a0c8:	f8730014 	swi	r3, r19, 20
		return result;
2001a0cc:	e8730014 	lwi	r3, r19, 20
	}
2001a0d0:	10330000 	addk	r1, r19, r0
2001a0d4:	ea610018 	lwi	r19, r1, 24
2001a0d8:	3021001c 	addik	r1, r1, 28
2001a0dc:	b60f0008 	rtsd	r15, 8
2001a0e0:	80000000 	or	r0, r0, r0

2001a0e4 <read_noMotion>:
	
	static void read_noMotion() {
2001a0e4:	3021ffd0 	addik	r1, r1, -48
2001a0e8:	f9e10000 	swi	r15, r1, 0
2001a0ec:	fa61002c 	swi	r19, r1, 44
2001a0f0:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2001a0f4:	b0002006 	imm	8198
2001a0f8:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
2001a0fc:	a46301ff 	andi	r3, r3, 511
2001a100:	f873001c 	swi	r3, r19, 28
		i16 local_ptr;
		i8 local_comp;
		i16 p;
		i8 local_Y_SELECT;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001a104:	b0002004 	imm	8196
2001a108:	e8606b94 	lwi	r3, r0, 27540	// 20046b94 <decoder_parser_mvrecon_BTYPE>
2001a10c:	e8830004 	lwi	r4, r3, 4
2001a110:	b0002006 	imm	8198
2001a114:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
2001a118:	a46301ff 	andi	r3, r3, 511
2001a11c:	10631800 	addk	r3, r3, r3
2001a120:	10641800 	addk	r3, r4, r3
2001a124:	e4630000 	lhui	r3, r3, 0
2001a128:	f4730020 	shi	r3, r19, 32
		local_ptr = ptr;
2001a12c:	b0002006 	imm	8198
2001a130:	e4601c80 	lhui	r3, r0, 7296	// 20061c80 <ptr>
2001a134:	f4730022 	shi	r3, r19, 34
		local_comp = comp;
2001a138:	b0002006 	imm	8198
2001a13c:	e0601c7d 	lbui	r3, r0, 7293	// 20061c7d <comp>
2001a140:	f0730024 	sbi	r3, r19, 36
		p = local_ptr | local_comp;
2001a144:	e0730024 	lbui	r3, r19, 36
2001a148:	90630060 	sext8	r3, r3
2001a14c:	90830061 	sext16	r4, r3
2001a150:	e4730022 	lhui	r3, r19, 34
2001a154:	80641800 	or	r3, r4, r3
2001a158:	f4730026 	shi	r3, r19, 38
		local_comp = comp;
2001a15c:	b0002006 	imm	8198
2001a160:	e0601c7d 	lbui	r3, r0, 7293	// 20061c7d <comp>
2001a164:	f0730024 	sbi	r3, r19, 36
		if (local_comp < 4) {
2001a168:	e0730024 	lbui	r3, r19, 36
2001a16c:	90830060 	sext8	r4, r3
2001a170:	30600003 	addik	r3, r0, 3
2001a174:	16441801 	cmp	r18, r4, r3
2001a178:	bc520048 	blti	r18, 72		// 2001a1c0
			buf[p] = 0;
2001a17c:	e4730026 	lhui	r3, r19, 38
2001a180:	90630061 	sext16	r3, r3
2001a184:	10631800 	addk	r3, r3, r3
2001a188:	b0002006 	imm	8198
2001a18c:	30631c84 	addik	r3, r3, 7300
2001a190:	f4030000 	shi	r0, r3, 0
			local_Y_SELECT = Y_SELECT;
2001a194:	30600004 	addik	r3, r0, 4
2001a198:	f0730028 	sbi	r3, r19, 40
			buf[p | local_Y_SELECT] = 0;
2001a19c:	e4730026 	lhui	r3, r19, 38
2001a1a0:	90830061 	sext16	r4, r3
2001a1a4:	e0730028 	lbui	r3, r19, 40
2001a1a8:	90630060 	sext8	r3, r3
2001a1ac:	80641800 	or	r3, r4, r3
2001a1b0:	10631800 	addk	r3, r3, r3
2001a1b4:	b0002006 	imm	8198
2001a1b8:	30631c84 	addik	r3, r3, 7300
2001a1bc:	f4030000 	shi	r0, r3, 0
		}
	
		// Update ports indexes
		index_BTYPE += 1;
2001a1c0:	b0002006 	imm	8198
2001a1c4:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
2001a1c8:	30630001 	addik	r3, r3, 1
2001a1cc:	b0002006 	imm	8198
2001a1d0:	f8601c5c 	swi	r3, r0, 7260	// 20061c5c <index_BTYPE>
		
		read_end_BTYPE();
2001a1d4:	b9f4f4ec 	brlid	r15, -2836	// 200196c0 <read_end_BTYPE>
2001a1d8:	80000000 	or	r0, r0, r0
	}
2001a1dc:	e9e10000 	lwi	r15, r1, 0
2001a1e0:	10330000 	addk	r1, r19, r0
2001a1e4:	ea61002c 	lwi	r19, r1, 44
2001a1e8:	30210030 	addik	r1, r1, 48
2001a1ec:	b60f0008 	rtsd	r15, 8
2001a1f0:	80000000 	or	r0, r0, r0

2001a1f4 <isSchedulable_read_motion>:
	static i32 isSchedulable_read_motion() {
2001a1f4:	3021ffe4 	addik	r1, r1, -28
2001a1f8:	fa610018 	swi	r19, r1, 24
2001a1fc:	12610000 	addk	r19, r1, r0
		i16 cmd;
		i32 local_INTER;
		i32 local_MOTION;
		i32 local_NEWVOP;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001a200:	b0002004 	imm	8196
2001a204:	e8606b94 	lwi	r3, r0, 27540	// 20046b94 <decoder_parser_mvrecon_BTYPE>
2001a208:	e8830004 	lwi	r4, r3, 4
2001a20c:	b0002006 	imm	8198
2001a210:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
2001a214:	a46301ff 	andi	r3, r3, 511
2001a218:	10631800 	addk	r3, r3, r3
2001a21c:	10641800 	addk	r3, r4, r3
2001a220:	e4630000 	lhui	r3, r3, 0
2001a224:	f4730004 	shi	r3, r19, 4
		local_INTER = ConstantsBtype_INTER;
2001a228:	30600200 	addik	r3, r0, 512
2001a22c:	f8730008 	swi	r3, r19, 8
		local_MOTION = ConstantsBtype_MOTION;
2001a230:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2001a234:	f873000c 	swi	r3, r19, 12
		local_NEWVOP = ConstantsBtype_NEWVOP;
2001a238:	30600800 	addik	r3, r0, 2048
2001a23c:	f8730010 	swi	r3, r19, 16
		result = (cmd & local_INTER) != 0 && (cmd & local_MOTION) != 0 && (cmd & local_NEWVOP) == 0;
2001a240:	e4730004 	lhui	r3, r19, 4
2001a244:	90830061 	sext16	r4, r3
2001a248:	e8730008 	lwi	r3, r19, 8
2001a24c:	84641800 	and	r3, r4, r3
2001a250:	bc030034 	beqi	r3, 52		// 2001a284
2001a254:	e4730004 	lhui	r3, r19, 4
2001a258:	90830061 	sext16	r4, r3
2001a25c:	e873000c 	lwi	r3, r19, 12
2001a260:	84641800 	and	r3, r4, r3
2001a264:	bc030020 	beqi	r3, 32		// 2001a284
2001a268:	e4730004 	lhui	r3, r19, 4
2001a26c:	90830061 	sext16	r4, r3
2001a270:	e8730010 	lwi	r3, r19, 16
2001a274:	84641800 	and	r3, r4, r3
2001a278:	bc23000c 	bnei	r3, 12		// 2001a284
2001a27c:	30600001 	addik	r3, r0, 1
2001a280:	b8000008 	bri	8		// 2001a288
2001a284:	10600000 	addk	r3, r0, r0
2001a288:	f8730014 	swi	r3, r19, 20
		return result;
2001a28c:	e8730014 	lwi	r3, r19, 20
	}
2001a290:	10330000 	addk	r1, r19, r0
2001a294:	ea610018 	lwi	r19, r1, 24
2001a298:	3021001c 	addik	r1, r1, 28
2001a29c:	b60f0008 	rtsd	r15, 8
2001a2a0:	80000000 	or	r0, r0, r0

2001a2a4 <read_motion>:
	
	static void read_motion() {
2001a2a4:	3021ffd4 	addik	r1, r1, -44
2001a2a8:	f9e10000 	swi	r15, r1, 0
2001a2ac:	fa610028 	swi	r19, r1, 40
2001a2b0:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2001a2b4:	b0002006 	imm	8198
2001a2b8:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
2001a2bc:	a46301ff 	andi	r3, r3, 511
2001a2c0:	f873001c 	swi	r3, r19, 28
	
		i16 cmd;
		i8 local_comp;
		i32 local_FOURMV;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001a2c4:	b0002004 	imm	8196
2001a2c8:	e8606b94 	lwi	r3, r0, 27540	// 20046b94 <decoder_parser_mvrecon_BTYPE>
2001a2cc:	e8830004 	lwi	r4, r3, 4
2001a2d0:	b0002006 	imm	8198
2001a2d4:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
2001a2d8:	a46301ff 	andi	r3, r3, 511
2001a2dc:	10631800 	addk	r3, r3, r3
2001a2e0:	10641800 	addk	r3, r4, r3
2001a2e4:	e4630000 	lhui	r3, r3, 0
2001a2e8:	f4730020 	shi	r3, r19, 32
		local_comp = comp;
2001a2ec:	b0002006 	imm	8198
2001a2f0:	e0601c7d 	lbui	r3, r0, 7293	// 20061c7d <comp>
2001a2f4:	f0730022 	sbi	r3, r19, 34
		if (local_comp == 0) {
2001a2f8:	e0730022 	lbui	r3, r19, 34
2001a2fc:	90630060 	sext8	r3, r3
2001a300:	bc230040 	bnei	r3, 64		// 2001a340
			local_FOURMV = Constants_FOURMV;
2001a304:	30600004 	addik	r3, r0, 4
2001a308:	f8730024 	swi	r3, r19, 36
			fourmv = (cmd & local_FOURMV) != 0;
2001a30c:	e4730020 	lhui	r3, r19, 32
2001a310:	90830061 	sext16	r4, r3
2001a314:	e8730024 	lwi	r3, r19, 36
2001a318:	84841800 	and	r4, r4, r3
2001a31c:	10600000 	addk	r3, r0, r0
2001a320:	8c641c00 	pcmpne	r3, r4, r3
2001a324:	a46300ff 	andi	r3, r3, 255
2001a328:	b0002006 	imm	8198
2001a32c:	f8601d8c 	swi	r3, r0, 7564	// 20061d8c <fourmv>
			sum_x = 0;
2001a330:	b0002006 	imm	8198
2001a334:	f4001da2 	shi	r0, r0, 7586	// 20061da2 <sum_x>
			sum_y = 0;
2001a338:	b0002006 	imm	8198
2001a33c:	f4001da4 	shi	r0, r0, 7588	// 20061da4 <sum_y>
		}
	
		// Update ports indexes
		index_BTYPE += 1;
2001a340:	b0002006 	imm	8198
2001a344:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
2001a348:	30630001 	addik	r3, r3, 1
2001a34c:	b0002006 	imm	8198
2001a350:	f8601c5c 	swi	r3, r0, 7260	// 20061c5c <index_BTYPE>
		
		read_end_BTYPE();
2001a354:	b9f4f36c 	brlid	r15, -3220	// 200196c0 <read_end_BTYPE>
2001a358:	80000000 	or	r0, r0, r0
	}
2001a35c:	e9e10000 	lwi	r15, r1, 0
2001a360:	10330000 	addk	r1, r19, r0
2001a364:	ea610028 	lwi	r19, r1, 40
2001a368:	3021002c 	addik	r1, r1, 44
2001a36c:	b60f0008 	rtsd	r15, 8
2001a370:	80000000 	or	r0, r0, r0

2001a374 <isSchedulable_compute_done>:
	static i32 isSchedulable_compute_done() {
2001a374:	3021ffec 	addik	r1, r1, -20
2001a378:	fa610010 	swi	r19, r1, 16
2001a37c:	12610000 	addk	r19, r1, r0
		i32 result;
		i8 local_comp;
		i32 local_fourmv;
	
		local_comp = comp;
2001a380:	b0002006 	imm	8198
2001a384:	e0601c7d 	lbui	r3, r0, 7293	// 20061c7d <comp>
2001a388:	f0730004 	sbi	r3, r19, 4
		local_comp = comp;
2001a38c:	b0002006 	imm	8198
2001a390:	e0601c7d 	lbui	r3, r0, 7293	// 20061c7d <comp>
2001a394:	f0730004 	sbi	r3, r19, 4
		local_fourmv = fourmv;
2001a398:	b0002006 	imm	8198
2001a39c:	e8601d8c 	lwi	r3, r0, 7564	// 20061d8c <fourmv>
2001a3a0:	f8730008 	swi	r3, r19, 8
		result = local_comp > 3 || local_comp != 0 && !local_fourmv;
2001a3a4:	e0730004 	lbui	r3, r19, 4
2001a3a8:	90830060 	sext8	r4, r3
2001a3ac:	30600003 	addik	r3, r0, 3
2001a3b0:	16441801 	cmp	r18, r4, r3
2001a3b4:	bc520018 	blti	r18, 24		// 2001a3cc
2001a3b8:	e0730004 	lbui	r3, r19, 4
2001a3bc:	90630060 	sext8	r3, r3
2001a3c0:	bc030014 	beqi	r3, 20		// 2001a3d4
2001a3c4:	e8730008 	lwi	r3, r19, 8
2001a3c8:	bc23000c 	bnei	r3, 12		// 2001a3d4
2001a3cc:	30600001 	addik	r3, r0, 1
2001a3d0:	b8000008 	bri	8		// 2001a3d8
2001a3d4:	10600000 	addk	r3, r0, r0
2001a3d8:	f873000c 	swi	r3, r19, 12
		return result;
2001a3dc:	e873000c 	lwi	r3, r19, 12
	}
2001a3e0:	10330000 	addk	r1, r19, r0
2001a3e4:	ea610010 	lwi	r19, r1, 16
2001a3e8:	30210014 	addik	r1, r1, 20
2001a3ec:	b60f0008 	rtsd	r15, 8
2001a3f0:	80000000 	or	r0, r0, r0

2001a3f4 <compute_done>:
	
	static void compute_done() {
2001a3f4:	3021fff8 	addik	r1, r1, -8
2001a3f8:	fa610004 	swi	r19, r1, 4
2001a3fc:	12610000 	addk	r19, r1, r0
	
	
	
		// Update ports indexes
		
	}
2001a400:	10330000 	addk	r1, r19, r0
2001a404:	ea610004 	lwi	r19, r1, 4
2001a408:	30210008 	addik	r1, r1, 8
2001a40c:	b60f0008 	rtsd	r15, 8
2001a410:	80000000 	or	r0, r0, r0

2001a414 <isSchedulable_compute_start>:
	static i32 isSchedulable_compute_start() {
2001a414:	3021fff4 	addik	r1, r1, -12
2001a418:	fa610008 	swi	r19, r1, 8
2001a41c:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2001a420:	30600001 	addik	r3, r0, 1
2001a424:	f8730004 	swi	r3, r19, 4
		return result;
2001a428:	e8730004 	lwi	r3, r19, 4
	}
2001a42c:	10330000 	addk	r1, r19, r0
2001a430:	ea610008 	lwi	r19, r1, 8
2001a434:	3021000c 	addik	r1, r1, 12
2001a438:	b60f0008 	rtsd	r15, 8
2001a43c:	80000000 	or	r0, r0, r0

2001a440 <compute_start>:
	
	static void compute_start() {
2001a440:	3021ffd4 	addik	r1, r1, -44
2001a444:	f9e10000 	swi	r15, r1, 0
2001a448:	fa610028 	swi	r19, r1, 40
2001a44c:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_A = index_A % SIZE_A;
2001a450:	b0002006 	imm	8198
2001a454:	e8601c6c 	lwi	r3, r0, 7276	// 20061c6c <index_A>
2001a458:	a46301ff 	andi	r3, r3, 511
2001a45c:	f873001c 	swi	r3, r19, 28
	
		i16 a;
		i16 local_bptr;
		i16 local_cptr;
	
		a = tokens_A[(index_A + (0)) % SIZE_A];
2001a460:	b0002004 	imm	8196
2001a464:	e8606bb4 	lwi	r3, r0, 27572	// 20046bb4 <decoder_parser_mvrecon_A>
2001a468:	e8830004 	lwi	r4, r3, 4
2001a46c:	b0002006 	imm	8198
2001a470:	e8601c6c 	lwi	r3, r0, 7276	// 20061c6c <index_A>
2001a474:	a46301ff 	andi	r3, r3, 511
2001a478:	10631800 	addk	r3, r3, r3
2001a47c:	10641800 	addk	r3, r4, r3
2001a480:	e4630000 	lhui	r3, r3, 0
2001a484:	f4730020 	shi	r3, r19, 32
		local_bptr = bptr;
2001a488:	b0002006 	imm	8198
2001a48c:	e4601d92 	lhui	r3, r0, 7570	// 20061d92 <bptr>
2001a490:	f4730022 	shi	r3, r19, 34
		aptr = local_bptr;
2001a494:	e4730022 	lhui	r3, r19, 34
2001a498:	b0002006 	imm	8198
2001a49c:	f4601d90 	shi	r3, r0, 7568	// 20061d90 <aptr>
		local_cptr = cptr;
2001a4a0:	b0002006 	imm	8198
2001a4a4:	e4601d94 	lhui	r3, r0, 7572	// 20061d94 <cptr>
2001a4a8:	f4730024 	shi	r3, r19, 36
		bptr = local_cptr;
2001a4ac:	e4730024 	lhui	r3, r19, 36
2001a4b0:	b0002006 	imm	8198
2001a4b4:	f4601d92 	shi	r3, r0, 7570	// 20061d92 <bptr>
		cptr = a;
2001a4b8:	e4730020 	lhui	r3, r19, 32
2001a4bc:	b0002006 	imm	8198
2001a4c0:	f4601d94 	shi	r3, r0, 7572	// 20061d94 <cptr>
	
		// Update ports indexes
		index_A += 1;
2001a4c4:	b0002006 	imm	8198
2001a4c8:	e8601c6c 	lwi	r3, r0, 7276	// 20061c6c <index_A>
2001a4cc:	30630001 	addik	r3, r3, 1
2001a4d0:	b0002006 	imm	8198
2001a4d4:	f8601c6c 	swi	r3, r0, 7276	// 20061c6c <index_A>
		
		read_end_A();
2001a4d8:	b9f4f33c 	brlid	r15, -3268	// 20019814 <read_end_A>
2001a4dc:	80000000 	or	r0, r0, r0
	}
2001a4e0:	e9e10000 	lwi	r15, r1, 0
2001a4e4:	10330000 	addk	r1, r19, r0
2001a4e8:	ea610028 	lwi	r19, r1, 40
2001a4ec:	3021002c 	addik	r1, r1, 44
2001a4f0:	b60f0008 	rtsd	r15, 8
2001a4f4:	80000000 	or	r0, r0, r0

2001a4f8 <isSchedulable_get_pred>:
	static i32 isSchedulable_get_pred() {
2001a4f8:	3021fff4 	addik	r1, r1, -12
2001a4fc:	fa610008 	swi	r19, r1, 8
2001a500:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2001a504:	30600001 	addik	r3, r0, 1
2001a508:	f8730004 	swi	r3, r19, 4
		return result;
2001a50c:	e8730004 	lwi	r3, r19, 4
	}
2001a510:	10330000 	addk	r1, r19, r0
2001a514:	ea610008 	lwi	r19, r1, 8
2001a518:	3021000c 	addik	r1, r1, 12
2001a51c:	b60f0008 	rtsd	r15, 8
2001a520:	80000000 	or	r0, r0, r0

2001a524 <get_pred>:
	
	static void get_pred() {
2001a524:	3021ffe8 	addik	r1, r1, -24
2001a528:	fa610014 	swi	r19, r1, 20
2001a52c:	12610000 	addk	r19, r1, r0
		i16 tmp_buf;
		i16 local_bptr;
		i16 local_cptr;
		i8 local_Y_SELECT;
	
		local_aptr = aptr;
2001a530:	b0002006 	imm	8198
2001a534:	e4601d90 	lhui	r3, r0, 7568	// 20061d90 <aptr>
2001a538:	f4730004 	shi	r3, r19, 4
		t = local_aptr;
2001a53c:	e4730004 	lhui	r3, r19, 4
2001a540:	f4730006 	shi	r3, r19, 6
		local_bpred = bpred;
2001a544:	b0002006 	imm	8198
2001a548:	e4601d98 	lhui	r3, r0, 7576	// 20061d98 <bpred>
2001a54c:	f4730008 	shi	r3, r19, 8
		apred = local_bpred;
2001a550:	e4730008 	lhui	r3, r19, 8
2001a554:	b0002006 	imm	8198
2001a558:	f4601d96 	shi	r3, r0, 7574	// 20061d96 <apred>
		local_cpred = cpred;
2001a55c:	b0002006 	imm	8198
2001a560:	e4601d9a 	lhui	r3, r0, 7578	// 20061d9a <cpred>
2001a564:	f473000a 	shi	r3, r19, 10
		bpred = local_cpred;
2001a568:	e473000a 	lhui	r3, r19, 10
2001a56c:	b0002006 	imm	8198
2001a570:	f4601d98 	shi	r3, r0, 7576	// 20061d98 <bpred>
		tmp_buf = buf[t];
2001a574:	e4730006 	lhui	r3, r19, 6
2001a578:	90630061 	sext16	r3, r3
2001a57c:	10631800 	addk	r3, r3, r3
2001a580:	b0002006 	imm	8198
2001a584:	30631c84 	addik	r3, r3, 7300
2001a588:	e4630000 	lhui	r3, r3, 0
2001a58c:	f473000c 	shi	r3, r19, 12
		cpred = tmp_buf;
2001a590:	e473000c 	lhui	r3, r19, 12
2001a594:	b0002006 	imm	8198
2001a598:	f4601d9a 	shi	r3, r0, 7578	// 20061d9a <cpred>
		local_bptr = bptr;
2001a59c:	b0002006 	imm	8198
2001a5a0:	e4601d92 	lhui	r3, r0, 7570	// 20061d92 <bptr>
2001a5a4:	f473000e 	shi	r3, r19, 14
		aptr = local_bptr;
2001a5a8:	e473000e 	lhui	r3, r19, 14
2001a5ac:	b0002006 	imm	8198
2001a5b0:	f4601d90 	shi	r3, r0, 7568	// 20061d90 <aptr>
		local_cptr = cptr;
2001a5b4:	b0002006 	imm	8198
2001a5b8:	e4601d94 	lhui	r3, r0, 7572	// 20061d94 <cptr>
2001a5bc:	f4730010 	shi	r3, r19, 16
		bptr = local_cptr;
2001a5c0:	e4730010 	lhui	r3, r19, 16
2001a5c4:	b0002006 	imm	8198
2001a5c8:	f4601d92 	shi	r3, r0, 7570	// 20061d92 <bptr>
		local_Y_SELECT = Y_SELECT;
2001a5cc:	30600004 	addik	r3, r0, 4
2001a5d0:	f0730012 	sbi	r3, r19, 18
		cptr = t | local_Y_SELECT;
2001a5d4:	e0730012 	lbui	r3, r19, 18
2001a5d8:	90630060 	sext8	r3, r3
2001a5dc:	90830061 	sext16	r4, r3
2001a5e0:	e4730006 	lhui	r3, r19, 6
2001a5e4:	80641800 	or	r3, r4, r3
2001a5e8:	90630061 	sext16	r3, r3
2001a5ec:	b0002006 	imm	8198
2001a5f0:	f4601d94 	shi	r3, r0, 7572	// 20061d94 <cptr>
	
		// Update ports indexes
		
	}
2001a5f4:	10330000 	addk	r1, r19, r0
2001a5f8:	ea610014 	lwi	r19, r1, 20
2001a5fc:	30210018 	addik	r1, r1, 24
2001a600:	b60f0008 	rtsd	r15, 8
2001a604:	80000000 	or	r0, r0, r0

2001a608 <isSchedulable_do_pred>:
	static i32 isSchedulable_do_pred() {
2001a608:	3021fff4 	addik	r1, r1, -12
2001a60c:	fa610008 	swi	r19, r1, 8
2001a610:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2001a614:	30600001 	addik	r3, r0, 1
2001a618:	f8730004 	swi	r3, r19, 4
		return result;
2001a61c:	e8730004 	lwi	r3, r19, 4
	}
2001a620:	10330000 	addk	r1, r19, r0
2001a624:	ea610008 	lwi	r19, r1, 8
2001a628:	3021000c 	addik	r1, r1, 12
2001a62c:	b60f0008 	rtsd	r15, 8
2001a630:	80000000 	or	r0, r0, r0

2001a634 <do_pred>:
	
	static void do_pred() {
2001a634:	3021ffcc 	addik	r1, r1, -52
2001a638:	f9e10000 	swi	r15, r1, 0
2001a63c:	fa610030 	swi	r19, r1, 48
2001a640:	12610000 	addk	r19, r1, r0
		i16 local_apred;
		i16 local_bpred;
		i16 local_cpred;
		i32 tmp_middle;
	
		local_comp = comp;
2001a644:	b0002006 	imm	8198
2001a648:	e0601c7d 	lbui	r3, r0, 7293	// 20061c7d <comp>
2001a64c:	f073001c 	sbi	r3, r19, 28
		local_top_edge = top_edge;
2001a650:	b0002004 	imm	8196
2001a654:	e8606c64 	lwi	r3, r0, 27748	// 20046c64 <top_edge>
2001a658:	f8730020 	swi	r3, r19, 32
		if (local_comp >= 2 || !local_top_edge) {
2001a65c:	e073001c 	lbui	r3, r19, 28
2001a660:	90830060 	sext8	r4, r3
2001a664:	30600001 	addik	r3, r0, 1
2001a668:	16441801 	cmp	r18, r4, r3
2001a66c:	bc52000c 	blti	r18, 12		// 2001a678
2001a670:	e8730020 	lwi	r3, r19, 32
2001a674:	bc230064 	bnei	r3, 100		// 2001a6d8
			local_apred = apred;
2001a678:	b0002006 	imm	8198
2001a67c:	e4601d96 	lhui	r3, r0, 7574	// 20061d96 <apred>
2001a680:	f4730024 	shi	r3, r19, 36
			local_bpred = bpred;
2001a684:	b0002006 	imm	8198
2001a688:	e4601d98 	lhui	r3, r0, 7576	// 20061d98 <bpred>
2001a68c:	f4730026 	shi	r3, r19, 38
			local_cpred = cpred;
2001a690:	b0002006 	imm	8198
2001a694:	e4601d9a 	lhui	r3, r0, 7578	// 20061d9a <cpred>
2001a698:	f4730028 	shi	r3, r19, 40
			tmp_middle = middle(local_apred, local_bpred, local_cpred);
2001a69c:	e4730024 	lhui	r3, r19, 36
2001a6a0:	90a30061 	sext16	r5, r3
2001a6a4:	e4730026 	lhui	r3, r19, 38
2001a6a8:	90830061 	sext16	r4, r3
2001a6ac:	e4730028 	lhui	r3, r19, 40
2001a6b0:	90630061 	sext16	r3, r3
2001a6b4:	10c40000 	addk	r6, r4, r0
2001a6b8:	10e30000 	addk	r7, r3, r0
2001a6bc:	b9f4f238 	brlid	r15, -3528	// 200198f4 <middle>
2001a6c0:	80000000 	or	r0, r0, r0
2001a6c4:	f873002c 	swi	r3, r19, 44
			apred = tmp_middle;
2001a6c8:	e873002c 	lwi	r3, r19, 44
2001a6cc:	90630061 	sext16	r3, r3
2001a6d0:	b0002006 	imm	8198
2001a6d4:	f4601d96 	shi	r3, r0, 7574	// 20061d96 <apred>
		}
	
		// Update ports indexes
		
	}
2001a6d8:	e9e10000 	lwi	r15, r1, 0
2001a6dc:	10330000 	addk	r1, r19, r0
2001a6e0:	ea610030 	lwi	r19, r1, 48
2001a6e4:	30210034 	addik	r1, r1, 52
2001a6e8:	b60f0008 	rtsd	r15, 8
2001a6ec:	80000000 	or	r0, r0, r0

2001a6f0 <isSchedulable_get_mag>:
	static i32 isSchedulable_get_mag() {
2001a6f0:	3021fff4 	addik	r1, r1, -12
2001a6f4:	fa610008 	swi	r19, r1, 8
2001a6f8:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2001a6fc:	30600001 	addik	r3, r0, 1
2001a700:	f8730004 	swi	r3, r19, 4
		return result;
2001a704:	e8730004 	lwi	r3, r19, 4
	}
2001a708:	10330000 	addk	r1, r19, r0
2001a70c:	ea610008 	lwi	r19, r1, 8
2001a710:	3021000c 	addik	r1, r1, 12
2001a714:	b60f0008 	rtsd	r15, 8
2001a718:	80000000 	or	r0, r0, r0

2001a71c <get_mag>:
	
	static void get_mag() {
2001a71c:	3021ffd8 	addik	r1, r1, -40
2001a720:	f9e10000 	swi	r15, r1, 0
2001a724:	fa610024 	swi	r19, r1, 36
2001a728:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_MVIN = index_MVIN % SIZE_MVIN;
2001a72c:	b0002006 	imm	8198
2001a730:	e8601c64 	lwi	r3, r0, 7268	// 20061c64 <index_MVIN>
2001a734:	a46301ff 	andi	r3, r3, 511
2001a738:	f873001c 	swi	r3, r19, 28
	
		i16 m;
	
		m = tokens_MVIN[(index_MVIN + (0)) % SIZE_MVIN];
2001a73c:	b0002004 	imm	8196
2001a740:	e8606b78 	lwi	r3, r0, 27512	// 20046b78 <decoder_parser_mvrecon_MVIN>
2001a744:	e8830004 	lwi	r4, r3, 4
2001a748:	b0002006 	imm	8198
2001a74c:	e8601c64 	lwi	r3, r0, 7268	// 20061c64 <index_MVIN>
2001a750:	a46301ff 	andi	r3, r3, 511
2001a754:	10631800 	addk	r3, r3, r3
2001a758:	10641800 	addk	r3, r4, r3
2001a75c:	e4630000 	lhui	r3, r3, 0
2001a760:	f4730020 	shi	r3, r19, 32
		mag = m;
2001a764:	e4730020 	lhui	r3, r19, 32
2001a768:	b0002006 	imm	8198
2001a76c:	f4601d9c 	shi	r3, r0, 7580	// 20061d9c <mag>
	
		// Update ports indexes
		index_MVIN += 1;
2001a770:	b0002006 	imm	8198
2001a774:	e8601c64 	lwi	r3, r0, 7268	// 20061c64 <index_MVIN>
2001a778:	30630001 	addik	r3, r3, 1
2001a77c:	b0002006 	imm	8198
2001a780:	f8601c64 	swi	r3, r0, 7268	// 20061c64 <index_MVIN>
		
		read_end_MVIN();
2001a784:	b9f4efe8 	brlid	r15, -4120	// 2001976c <read_end_MVIN>
2001a788:	80000000 	or	r0, r0, r0
	}
2001a78c:	e9e10000 	lwi	r15, r1, 0
2001a790:	10330000 	addk	r1, r19, r0
2001a794:	ea610024 	lwi	r19, r1, 36
2001a798:	30210028 	addik	r1, r1, 40
2001a79c:	b60f0008 	rtsd	r15, 8
2001a7a0:	80000000 	or	r0, r0, r0

2001a7a4 <isSchedulable_get_residual_init>:
	static i32 isSchedulable_get_residual_init() {
2001a7a4:	3021fff4 	addik	r1, r1, -12
2001a7a8:	fa610008 	swi	r19, r1, 8
2001a7ac:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2001a7b0:	30600001 	addik	r3, r0, 1
2001a7b4:	f8730004 	swi	r3, r19, 4
		return result;
2001a7b8:	e8730004 	lwi	r3, r19, 4
	}
2001a7bc:	10330000 	addk	r1, r19, r0
2001a7c0:	ea610008 	lwi	r19, r1, 8
2001a7c4:	3021000c 	addik	r1, r1, 12
2001a7c8:	b60f0008 	rtsd	r15, 8
2001a7cc:	80000000 	or	r0, r0, r0

2001a7d0 <get_residual_init>:
	
	static void get_residual_init() {
2001a7d0:	3021fff4 	addik	r1, r1, -12
2001a7d4:	fa610008 	swi	r19, r1, 8
2001a7d8:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
	
		i16 local_mag;
	
		local_mag = mag;
2001a7dc:	b0002006 	imm	8198
2001a7e0:	e4601d9c 	lhui	r3, r0, 7580	// 20061d9c <mag>
2001a7e4:	f4730004 	shi	r3, r19, 4
		if (local_mag < 0) {
2001a7e8:	e4730004 	lhui	r3, r19, 4
2001a7ec:	90630061 	sext16	r3, r3
2001a7f0:	bca30028 	bgei	r3, 40		// 2001a818
			local_mag = mag;
2001a7f4:	b0002006 	imm	8198
2001a7f8:	e4601d9c 	lhui	r3, r0, 7580	// 20061d9c <mag>
2001a7fc:	f4730004 	shi	r3, r19, 4
			res_shift = ~local_mag;
2001a800:	e4730004 	lhui	r3, r19, 4
2001a804:	a863ffff 	xori	r3, r3, -1
2001a808:	90630061 	sext16	r3, r3
2001a80c:	b0002006 	imm	8198
2001a810:	f4601dac 	shi	r3, r0, 7596	// 20061dac <res_shift>
2001a814:	b800002c 	bri	44		// 2001a840
		} else {
			local_mag = mag;
2001a818:	b0002006 	imm	8198
2001a81c:	e4601d9c 	lhui	r3, r0, 7580	// 20061d9c <mag>
2001a820:	f4730004 	shi	r3, r19, 4
			res_shift = local_mag - 1;
2001a824:	e4730004 	lhui	r3, r19, 4
2001a828:	3063ffff 	addik	r3, r3, -1
2001a82c:	b0000000 	imm	0
2001a830:	a463ffff 	andi	r3, r3, -1
2001a834:	90630061 	sext16	r3, r3
2001a838:	b0002006 	imm	8198
2001a83c:	f4601dac 	shi	r3, r0, 7596	// 20061dac <res_shift>
		}
	
		// Update ports indexes
		
	}
2001a840:	10330000 	addk	r1, r19, r0
2001a844:	ea610008 	lwi	r19, r1, 8
2001a848:	3021000c 	addik	r1, r1, 12
2001a84c:	b60f0008 	rtsd	r15, 8
2001a850:	80000000 	or	r0, r0, r0

2001a854 <isSchedulable_get_residual_shift>:
	static i32 isSchedulable_get_residual_shift() {
2001a854:	3021fff4 	addik	r1, r1, -12
2001a858:	fa610008 	swi	r19, r1, 8
2001a85c:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2001a860:	30600001 	addik	r3, r0, 1
2001a864:	f8730004 	swi	r3, r19, 4
		return result;
2001a868:	e8730004 	lwi	r3, r19, 4
	}
2001a86c:	10330000 	addk	r1, r19, r0
2001a870:	ea610008 	lwi	r19, r1, 8
2001a874:	3021000c 	addik	r1, r1, 12
2001a878:	b60f0008 	rtsd	r15, 8
2001a87c:	80000000 	or	r0, r0, r0

2001a880 <get_residual_shift>:
	
	static void get_residual_shift() {
2001a880:	3021fff0 	addik	r1, r1, -16
2001a884:	fa61000c 	swi	r19, r1, 12
2001a888:	12610000 	addk	r19, r1, r0
	
		i16 local_mv_rsize;
		i16 count;
		i16 local_res_shift;
	
		local_mv_rsize = mv_rsize;
2001a88c:	b0002006 	imm	8198
2001a890:	e4601d84 	lhui	r3, r0, 7556	// 20061d84 <mv_rsize>
2001a894:	f4730006 	shi	r3, r19, 6
		count = local_mv_rsize;
2001a898:	e4730006 	lhui	r3, r19, 6
2001a89c:	f4730004 	shi	r3, r19, 4
		while (count > 0) {
2001a8a0:	b800003c 	bri	60		// 2001a8dc
			local_res_shift = res_shift;
2001a8a4:	b0002006 	imm	8198
2001a8a8:	e4601dac 	lhui	r3, r0, 7596	// 20061dac <res_shift>
2001a8ac:	f4730008 	shi	r3, r19, 8
			res_shift = local_res_shift << 1;
2001a8b0:	e4730008 	lhui	r3, r19, 8
2001a8b4:	90630061 	sext16	r3, r3
2001a8b8:	10631800 	addk	r3, r3, r3
2001a8bc:	90630061 	sext16	r3, r3
2001a8c0:	b0002006 	imm	8198
2001a8c4:	f4601dac 	shi	r3, r0, 7596	// 20061dac <res_shift>
			count = count - 1;
2001a8c8:	e4730004 	lhui	r3, r19, 4
2001a8cc:	3063ffff 	addik	r3, r3, -1
2001a8d0:	b0000000 	imm	0
2001a8d4:	a463ffff 	andi	r3, r3, -1
2001a8d8:	f4730004 	shi	r3, r19, 4
		i16 count;
		i16 local_res_shift;
	
		local_mv_rsize = mv_rsize;
		count = local_mv_rsize;
		while (count > 0) {
2001a8dc:	e4730004 	lhui	r3, r19, 4
2001a8e0:	90630061 	sext16	r3, r3
2001a8e4:	bc83ffc0 	bgti	r3, -64		// 2001a8a4
			count = count - 1;
		}
	
		// Update ports indexes
		
	}
2001a8e8:	10330000 	addk	r1, r19, r0
2001a8ec:	ea61000c 	lwi	r19, r1, 12
2001a8f0:	30210010 	addik	r1, r1, 16
2001a8f4:	b60f0008 	rtsd	r15, 8
2001a8f8:	80000000 	or	r0, r0, r0

2001a8fc <isSchedulable_get_residual_adjust>:
	static i32 isSchedulable_get_residual_adjust() {
2001a8fc:	3021fff4 	addik	r1, r1, -12
2001a900:	fa610008 	swi	r19, r1, 8
2001a904:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2001a908:	30600001 	addik	r3, r0, 1
2001a90c:	f8730004 	swi	r3, r19, 4
		return result;
2001a910:	e8730004 	lwi	r3, r19, 4
	}
2001a914:	10330000 	addk	r1, r19, r0
2001a918:	ea610008 	lwi	r19, r1, 8
2001a91c:	3021000c 	addik	r1, r1, 12
2001a920:	b60f0008 	rtsd	r15, 8
2001a924:	80000000 	or	r0, r0, r0

2001a928 <get_residual_adjust>:
	
	static void get_residual_adjust() {
2001a928:	3021ffd8 	addik	r1, r1, -40
2001a92c:	f9e10000 	swi	r15, r1, 0
2001a930:	fa610024 	swi	r19, r1, 36
2001a934:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_MVIN = index_MVIN % SIZE_MVIN;
2001a938:	b0002006 	imm	8198
2001a93c:	e8601c64 	lwi	r3, r0, 7268	// 20061c64 <index_MVIN>
2001a940:	a46301ff 	andi	r3, r3, 511
2001a944:	f873001c 	swi	r3, r19, 28
	
		i16 s;
		i16 local_res_shift;
	
		s = tokens_MVIN[(index_MVIN + (0)) % SIZE_MVIN];
2001a948:	b0002004 	imm	8196
2001a94c:	e8606b78 	lwi	r3, r0, 27512	// 20046b78 <decoder_parser_mvrecon_MVIN>
2001a950:	e8830004 	lwi	r4, r3, 4
2001a954:	b0002006 	imm	8198
2001a958:	e8601c64 	lwi	r3, r0, 7268	// 20061c64 <index_MVIN>
2001a95c:	a46301ff 	andi	r3, r3, 511
2001a960:	10631800 	addk	r3, r3, r3
2001a964:	10641800 	addk	r3, r4, r3
2001a968:	e4630000 	lhui	r3, r3, 0
2001a96c:	f4730020 	shi	r3, r19, 32
		local_res_shift = res_shift;
2001a970:	b0002006 	imm	8198
2001a974:	e4601dac 	lhui	r3, r0, 7596	// 20061dac <res_shift>
2001a978:	f4730022 	shi	r3, r19, 34
		res_shift = local_res_shift + s + 1;
2001a97c:	e4930022 	lhui	r4, r19, 34
2001a980:	e4730020 	lhui	r3, r19, 32
2001a984:	10641800 	addk	r3, r4, r3
2001a988:	b0000000 	imm	0
2001a98c:	a463ffff 	andi	r3, r3, -1
2001a990:	30630001 	addik	r3, r3, 1
2001a994:	b0000000 	imm	0
2001a998:	a463ffff 	andi	r3, r3, -1
2001a99c:	90630061 	sext16	r3, r3
2001a9a0:	b0002006 	imm	8198
2001a9a4:	f4601dac 	shi	r3, r0, 7596	// 20061dac <res_shift>
	
		// Update ports indexes
		index_MVIN += 1;
2001a9a8:	b0002006 	imm	8198
2001a9ac:	e8601c64 	lwi	r3, r0, 7268	// 20061c64 <index_MVIN>
2001a9b0:	30630001 	addik	r3, r3, 1
2001a9b4:	b0002006 	imm	8198
2001a9b8:	f8601c64 	swi	r3, r0, 7268	// 20061c64 <index_MVIN>
		
		read_end_MVIN();
2001a9bc:	b9f4edb0 	brlid	r15, -4688	// 2001976c <read_end_MVIN>
2001a9c0:	80000000 	or	r0, r0, r0
	}
2001a9c4:	e9e10000 	lwi	r15, r1, 0
2001a9c8:	10330000 	addk	r1, r19, r0
2001a9cc:	ea610024 	lwi	r19, r1, 36
2001a9d0:	30210028 	addik	r1, r1, 40
2001a9d4:	b60f0008 	rtsd	r15, 8
2001a9d8:	80000000 	or	r0, r0, r0

2001a9dc <isSchedulable_get_residual_calc>:
	static i32 isSchedulable_get_residual_calc() {
2001a9dc:	3021fff4 	addik	r1, r1, -12
2001a9e0:	fa610008 	swi	r19, r1, 8
2001a9e4:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2001a9e8:	30600001 	addik	r3, r0, 1
2001a9ec:	f8730004 	swi	r3, r19, 4
		return result;
2001a9f0:	e8730004 	lwi	r3, r19, 4
	}
2001a9f4:	10330000 	addk	r1, r19, r0
2001a9f8:	ea610008 	lwi	r19, r1, 8
2001a9fc:	3021000c 	addik	r1, r1, 12
2001aa00:	b60f0008 	rtsd	r15, 8
2001aa04:	80000000 	or	r0, r0, r0

2001aa08 <get_residual_calc>:
	
	static void get_residual_calc() {
2001aa08:	3021ffd4 	addik	r1, r1, -44
2001aa0c:	f9e10000 	swi	r15, r1, 0
2001aa10:	fa610028 	swi	r19, r1, 40
2001aa14:	12610000 	addk	r19, r1, r0
		i16 local_apred;
		i16 local_mag;
		i16 local_res_shift;
		i32 tmp_mvcalc;
	
		local_apred = apred;
2001aa18:	b0002006 	imm	8198
2001aa1c:	e4601d96 	lhui	r3, r0, 7574	// 20061d96 <apred>
2001aa20:	f473001c 	shi	r3, r19, 28
		local_mag = mag;
2001aa24:	b0002006 	imm	8198
2001aa28:	e4601d9c 	lhui	r3, r0, 7580	// 20061d9c <mag>
2001aa2c:	f473001e 	shi	r3, r19, 30
		local_res_shift = res_shift;
2001aa30:	b0002006 	imm	8198
2001aa34:	e4601dac 	lhui	r3, r0, 7596	// 20061dac <res_shift>
2001aa38:	f4730020 	shi	r3, r19, 32
		tmp_mvcalc = mvcalc(local_apred, local_mag, local_res_shift);
2001aa3c:	e473001c 	lhui	r3, r19, 28
2001aa40:	90a30061 	sext16	r5, r3
2001aa44:	e473001e 	lhui	r3, r19, 30
2001aa48:	90830061 	sext16	r4, r3
2001aa4c:	e4730020 	lhui	r3, r19, 32
2001aa50:	90630061 	sext16	r3, r3
2001aa54:	10c40000 	addk	r6, r4, r0
2001aa58:	10e30000 	addk	r7, r3, r0
2001aa5c:	b9f4ef5c 	brlid	r15, -4260	// 200199b8 <mvcalc>
2001aa60:	80000000 	or	r0, r0, r0
2001aa64:	f8730024 	swi	r3, r19, 36
		res_shift = tmp_mvcalc;
2001aa68:	e8730024 	lwi	r3, r19, 36
2001aa6c:	90630061 	sext16	r3, r3
2001aa70:	b0002006 	imm	8198
2001aa74:	f4601dac 	shi	r3, r0, 7596	// 20061dac <res_shift>
	
		// Update ports indexes
		
	}
2001aa78:	e9e10000 	lwi	r15, r1, 0
2001aa7c:	10330000 	addk	r1, r19, r0
2001aa80:	ea610028 	lwi	r19, r1, 40
2001aa84:	3021002c 	addik	r1, r1, 44
2001aa88:	b60f0008 	rtsd	r15, 8
2001aa8c:	80000000 	or	r0, r0, r0

2001aa90 <isSchedulable_get_residual_clip>:
	static i32 isSchedulable_get_residual_clip() {
2001aa90:	3021fff4 	addik	r1, r1, -12
2001aa94:	fa610008 	swi	r19, r1, 8
2001aa98:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2001aa9c:	30600001 	addik	r3, r0, 1
2001aaa0:	f8730004 	swi	r3, r19, 4
		return result;
2001aaa4:	e8730004 	lwi	r3, r19, 4
	}
2001aaa8:	10330000 	addk	r1, r19, r0
2001aaac:	ea610008 	lwi	r19, r1, 8
2001aab0:	3021000c 	addik	r1, r1, 12
2001aab4:	b60f0008 	rtsd	r15, 8
2001aab8:	80000000 	or	r0, r0, r0

2001aabc <get_residual_clip>:
	
	static void get_residual_clip() {
2001aabc:	3021ffd8 	addik	r1, r1, -40
2001aac0:	f9e10000 	swi	r15, r1, 0
2001aac4:	fa610024 	swi	r19, r1, 36
2001aac8:	12610000 	addk	r19, r1, r0
		// Compute aligned port indexes
	
		i16 local_res_shift;
		i32 tmp_mvclip;
	
		local_res_shift = res_shift;
2001aacc:	b0002006 	imm	8198
2001aad0:	e4601dac 	lhui	r3, r0, 7596	// 20061dac <res_shift>
2001aad4:	f473001c 	shi	r3, r19, 28
		tmp_mvclip = mvclip(local_res_shift);
2001aad8:	e473001c 	lhui	r3, r19, 28
2001aadc:	90630061 	sext16	r3, r3
2001aae0:	10a30000 	addk	r5, r3, r0
2001aae4:	b9f4efac 	brlid	r15, -4180	// 20019a90 <mvclip>
2001aae8:	80000000 	or	r0, r0, r0
2001aaec:	f8730020 	swi	r3, r19, 32
		res_shift = tmp_mvclip;
2001aaf0:	e8730020 	lwi	r3, r19, 32
2001aaf4:	90630061 	sext16	r3, r3
2001aaf8:	b0002006 	imm	8198
2001aafc:	f4601dac 	shi	r3, r0, 7596	// 20061dac <res_shift>
	
		// Update ports indexes
		
	}
2001ab00:	e9e10000 	lwi	r15, r1, 0
2001ab04:	10330000 	addk	r1, r19, r0
2001ab08:	ea610024 	lwi	r19, r1, 36
2001ab0c:	30210028 	addik	r1, r1, 40
2001ab10:	b60f0008 	rtsd	r15, 8
2001ab14:	80000000 	or	r0, r0, r0

2001ab18 <isSchedulable_get_residual_final>:
	static i32 isSchedulable_get_residual_final() {
2001ab18:	3021fff4 	addik	r1, r1, -12
2001ab1c:	fa610008 	swi	r19, r1, 8
2001ab20:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2001ab24:	30600001 	addik	r3, r0, 1
2001ab28:	f8730004 	swi	r3, r19, 4
		return result;
2001ab2c:	e8730004 	lwi	r3, r19, 4
	}
2001ab30:	10330000 	addk	r1, r19, r0
2001ab34:	ea610008 	lwi	r19, r1, 8
2001ab38:	3021000c 	addik	r1, r1, 12
2001ab3c:	b60f0008 	rtsd	r15, 8
2001ab40:	80000000 	or	r0, r0, r0

2001ab44 <get_residual_final>:
	
	static void get_residual_final() {
2001ab44:	3021ffec 	addik	r1, r1, -20
2001ab48:	fa610010 	swi	r19, r1, 16
2001ab4c:	12610000 	addk	r19, r1, r0
		i16 local_res_shift;
		i16 sum;
		i16 local_mv_y;
		i16 local_sum_y;
	
		local_sum_x = sum_x;
2001ab50:	b0002006 	imm	8198
2001ab54:	e4601da2 	lhui	r3, r0, 7586	// 20061da2 <sum_x>
2001ab58:	f4730004 	shi	r3, r19, 4
		local_res_shift = res_shift;
2001ab5c:	b0002006 	imm	8198
2001ab60:	e4601dac 	lhui	r3, r0, 7596	// 20061dac <res_shift>
2001ab64:	f4730006 	shi	r3, r19, 6
		sum = local_sum_x + local_res_shift;
2001ab68:	e4930004 	lhui	r4, r19, 4
2001ab6c:	e4730006 	lhui	r3, r19, 6
2001ab70:	10641800 	addk	r3, r4, r3
2001ab74:	b0000000 	imm	0
2001ab78:	a463ffff 	andi	r3, r3, -1
2001ab7c:	f4730008 	shi	r3, r19, 8
		local_mv_y = mv_y;
2001ab80:	b0002006 	imm	8198
2001ab84:	e4601da0 	lhui	r3, r0, 7584	// 20061da0 <mv_y>
2001ab88:	f473000a 	shi	r3, r19, 10
		mv_x = local_mv_y;
2001ab8c:	e473000a 	lhui	r3, r19, 10
2001ab90:	b0002006 	imm	8198
2001ab94:	f4601d9e 	shi	r3, r0, 7582	// 20061d9e <mv_x>
		local_res_shift = res_shift;
2001ab98:	b0002006 	imm	8198
2001ab9c:	e4601dac 	lhui	r3, r0, 7596	// 20061dac <res_shift>
2001aba0:	f4730006 	shi	r3, r19, 6
		mv_y = local_res_shift;
2001aba4:	e4730006 	lhui	r3, r19, 6
2001aba8:	b0002006 	imm	8198
2001abac:	f4601da0 	shi	r3, r0, 7584	// 20061da0 <mv_y>
		local_sum_y = sum_y;
2001abb0:	b0002006 	imm	8198
2001abb4:	e4601da4 	lhui	r3, r0, 7588	// 20061da4 <sum_y>
2001abb8:	f473000c 	shi	r3, r19, 12
		sum_x = local_sum_y;
2001abbc:	e473000c 	lhui	r3, r19, 12
2001abc0:	b0002006 	imm	8198
2001abc4:	f4601da2 	shi	r3, r0, 7586	// 20061da2 <sum_x>
		sum_y = sum;
2001abc8:	e4730008 	lhui	r3, r19, 8
2001abcc:	b0002006 	imm	8198
2001abd0:	f4601da4 	shi	r3, r0, 7588	// 20061da4 <sum_y>
		x_flag = 1;
2001abd4:	30600001 	addik	r3, r0, 1
2001abd8:	b0002006 	imm	8198
2001abdc:	f8601da8 	swi	r3, r0, 7592	// 20061da8 <x_flag>
	
		// Update ports indexes
		
	}
2001abe0:	10330000 	addk	r1, r19, r0
2001abe4:	ea610010 	lwi	r19, r1, 16
2001abe8:	30210014 	addik	r1, r1, 20
2001abec:	b60f0008 	rtsd	r15, 8
2001abf0:	80000000 	or	r0, r0, r0

2001abf4 <isSchedulable_write_luma>:
	static i32 isSchedulable_write_luma() {
2001abf4:	3021fff0 	addik	r1, r1, -16
2001abf8:	fa61000c 	swi	r19, r1, 12
2001abfc:	12610000 	addk	r19, r1, r0
		i32 result;
		i8 local_comp;
	
		local_comp = comp;
2001ac00:	b0002006 	imm	8198
2001ac04:	e0601c7d 	lbui	r3, r0, 7293	// 20061c7d <comp>
2001ac08:	f0730004 	sbi	r3, r19, 4
		result = local_comp < 4;
2001ac0c:	30600001 	addik	r3, r0, 1
2001ac10:	e0930004 	lbui	r4, r19, 4
2001ac14:	90a40060 	sext8	r5, r4
2001ac18:	30800003 	addik	r4, r0, 3
2001ac1c:	16452001 	cmp	r18, r5, r4
2001ac20:	bcb20008 	bgei	r18, 8		// 2001ac28
2001ac24:	10600000 	addk	r3, r0, r0
2001ac28:	a46300ff 	andi	r3, r3, 255
2001ac2c:	f8730008 	swi	r3, r19, 8
		return result;
2001ac30:	e8730008 	lwi	r3, r19, 8
	}
2001ac34:	10330000 	addk	r1, r19, r0
2001ac38:	ea61000c 	lwi	r19, r1, 12
2001ac3c:	30210010 	addik	r1, r1, 16
2001ac40:	b60f0008 	rtsd	r15, 8
2001ac44:	80000000 	or	r0, r0, r0

2001ac48 <write_luma>:
	
	static void write_luma() {
2001ac48:	3021ffc4 	addik	r1, r1, -60
2001ac4c:	f9e10000 	swi	r15, r1, 0
2001ac50:	fa610038 	swi	r19, r1, 56
2001ac54:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_MV = index_MV % SIZE_MV;
2001ac58:	b0002006 	imm	8198
2001ac5c:	e8601c74 	lwi	r3, r0, 7284	// 20061c74 <index_MV>
2001ac60:	a46301ff 	andi	r3, r3, 511
2001ac64:	f8730020 	swi	r3, r19, 32
		i32 local_x_flag;
		i8 tmp_if;
		i8 local_Y_SELECT;
		i16 local_mv_y;
	
		local_ptr = ptr;
2001ac68:	b0002006 	imm	8198
2001ac6c:	e4601c80 	lhui	r3, r0, 7296	// 20061c80 <ptr>
2001ac70:	f4730024 	shi	r3, r19, 36
		local_comp = comp;
2001ac74:	b0002006 	imm	8198
2001ac78:	e0601c7d 	lbui	r3, r0, 7293	// 20061c7d <comp>
2001ac7c:	f0730026 	sbi	r3, r19, 38
		p = local_ptr | local_comp;
2001ac80:	e0730026 	lbui	r3, r19, 38
2001ac84:	90630060 	sext8	r3, r3
2001ac88:	90830061 	sext16	r4, r3
2001ac8c:	e4730024 	lhui	r3, r19, 36
2001ac90:	80641800 	or	r3, r4, r3
2001ac94:	f4730028 	shi	r3, r19, 40
		local_mv_x = mv_x;
2001ac98:	b0002006 	imm	8198
2001ac9c:	e4601d9e 	lhui	r3, r0, 7582	// 20061d9e <mv_x>
2001aca0:	f473002a 	shi	r3, r19, 42
		t = local_mv_x;
2001aca4:	e473002a 	lhui	r3, r19, 42
2001aca8:	f473002c 	shi	r3, r19, 44
		local_x_flag = x_flag;
2001acac:	b0002006 	imm	8198
2001acb0:	e8601da8 	lwi	r3, r0, 7592	// 20061da8 <x_flag>
2001acb4:	f8730030 	swi	r3, r19, 48
		if (local_x_flag) {
2001acb8:	e8730030 	lwi	r3, r19, 48
2001acbc:	bc03000c 	beqi	r3, 12		// 2001acc8
			tmp_if = 0;
2001acc0:	f013001c 	sbi	r0, r19, 28
2001acc4:	b8000014 	bri	20		// 2001acd8
		} else {
			local_Y_SELECT = Y_SELECT;
2001acc8:	30600004 	addik	r3, r0, 4
2001accc:	f0730034 	sbi	r3, r19, 52
			tmp_if = local_Y_SELECT;
2001acd0:	e0730034 	lbui	r3, r19, 52
2001acd4:	f073001c 	sbi	r3, r19, 28
		}
		local_mv_x = mv_x;
2001acd8:	b0002006 	imm	8198
2001acdc:	e4601d9e 	lhui	r3, r0, 7582	// 20061d9e <mv_x>
2001ace0:	f473002a 	shi	r3, r19, 42
		buf[p | tmp_if] = local_mv_x;
2001ace4:	e4730028 	lhui	r3, r19, 40
2001ace8:	90830061 	sext16	r4, r3
2001acec:	e073001c 	lbui	r3, r19, 28
2001acf0:	90630060 	sext8	r3, r3
2001acf4:	80641800 	or	r3, r4, r3
2001acf8:	10631800 	addk	r3, r3, r3
2001acfc:	b0002006 	imm	8198
2001ad00:	30631c84 	addik	r3, r3, 7300
2001ad04:	e493002a 	lhui	r4, r19, 42
2001ad08:	f4830000 	shi	r4, r3, 0
		local_mv_y = mv_y;
2001ad0c:	b0002006 	imm	8198
2001ad10:	e4601da0 	lhui	r3, r0, 7584	// 20061da0 <mv_y>
2001ad14:	f4730036 	shi	r3, r19, 54
		mv_x = local_mv_y;
2001ad18:	e4730036 	lhui	r3, r19, 54
2001ad1c:	b0002006 	imm	8198
2001ad20:	f4601d9e 	shi	r3, r0, 7582	// 20061d9e <mv_x>
		mv_y = t;
2001ad24:	e473002c 	lhui	r3, r19, 44
2001ad28:	b0002006 	imm	8198
2001ad2c:	f4601da0 	shi	r3, r0, 7584	// 20061da0 <mv_y>
		local_x_flag = x_flag;
2001ad30:	b0002006 	imm	8198
2001ad34:	e8601da8 	lwi	r3, r0, 7592	// 20061da8 <x_flag>
2001ad38:	f8730030 	swi	r3, r19, 48
		x_flag = !local_x_flag;
2001ad3c:	e8930030 	lwi	r4, r19, 48
2001ad40:	10600000 	addk	r3, r0, r0
2001ad44:	88641c00 	pcmpeq	r3, r4, r3
2001ad48:	a46300ff 	andi	r3, r3, 255
2001ad4c:	b0002006 	imm	8198
2001ad50:	f8601da8 	swi	r3, r0, 7592	// 20061da8 <x_flag>
		tokens_MV[(index_MV + (0)) % SIZE_MV] = t;
2001ad54:	b0002004 	imm	8196
2001ad58:	e8606bc0 	lwi	r3, r0, 27584	// 20046bc0 <decoder_parser_mvrecon_MV>
2001ad5c:	e8830004 	lwi	r4, r3, 4
2001ad60:	b0002006 	imm	8198
2001ad64:	e8601c74 	lwi	r3, r0, 7284	// 20061c74 <index_MV>
2001ad68:	a46301ff 	andi	r3, r3, 511
2001ad6c:	10631800 	addk	r3, r3, r3
2001ad70:	10641800 	addk	r3, r4, r3
2001ad74:	e493002c 	lhui	r4, r19, 44
2001ad78:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_MV += 1;
2001ad7c:	b0002006 	imm	8198
2001ad80:	e8601c74 	lwi	r3, r0, 7284	// 20061c74 <index_MV>
2001ad84:	30630001 	addik	r3, r3, 1
2001ad88:	b0002006 	imm	8198
2001ad8c:	f8601c74 	swi	r3, r0, 7284	// 20061c74 <index_MV>
		
		write_end_MV();
2001ad90:	b9f4eb2c 	brlid	r15, -5332	// 200198bc <write_end_MV>
2001ad94:	80000000 	or	r0, r0, r0
	}
2001ad98:	e9e10000 	lwi	r15, r1, 0
2001ad9c:	10330000 	addk	r1, r19, r0
2001ada0:	ea610038 	lwi	r19, r1, 56
2001ada4:	3021003c 	addik	r1, r1, 60
2001ada8:	b60f0008 	rtsd	r15, 8
2001adac:	80000000 	or	r0, r0, r0

2001adb0 <isSchedulable_write_chroma>:
	static i32 isSchedulable_write_chroma() {
2001adb0:	3021fff4 	addik	r1, r1, -12
2001adb4:	fa610008 	swi	r19, r1, 8
2001adb8:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2001adbc:	30600001 	addik	r3, r0, 1
2001adc0:	f8730004 	swi	r3, r19, 4
		return result;
2001adc4:	e8730004 	lwi	r3, r19, 4
	}
2001adc8:	10330000 	addk	r1, r19, r0
2001adcc:	ea610008 	lwi	r19, r1, 8
2001add0:	3021000c 	addik	r1, r1, 12
2001add4:	b60f0008 	rtsd	r15, 8
2001add8:	80000000 	or	r0, r0, r0

2001addc <write_chroma>:
	
	static void write_chroma() {
2001addc:	3021ffcc 	addik	r1, r1, -52
2001ade0:	f9e10000 	swi	r15, r1, 0
2001ade4:	fa610030 	swi	r19, r1, 48
2001ade8:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_MV = index_MV % SIZE_MV;
2001adec:	b0002006 	imm	8198
2001adf0:	e8601c74 	lwi	r3, r0, 7284	// 20061c74 <index_MV>
2001adf4:	a46301ff 	andi	r3, r3, 511
2001adf8:	f8730020 	swi	r3, r19, 32
		i16 local_sum_x;
		i16 mv;
		i16 t;
		i16 local_sum_y;
	
		local_fourmv = fourmv;
2001adfc:	b0002006 	imm	8198
2001ae00:	e8601d8c 	lwi	r3, r0, 7564	// 20061d8c <fourmv>
2001ae04:	f8730024 	swi	r3, r19, 36
		if (local_fourmv) {
2001ae08:	e8730024 	lwi	r3, r19, 36
2001ae0c:	bc03002c 	beqi	r3, 44		// 2001ae38
			local_sum_x = sum_x;
2001ae10:	b0002006 	imm	8198
2001ae14:	e4601da2 	lhui	r3, r0, 7586	// 20061da2 <sum_x>
2001ae18:	f4730028 	shi	r3, r19, 40
			mv = uvclip_4(local_sum_x);
2001ae1c:	e4730028 	lhui	r3, r19, 40
2001ae20:	90630061 	sext16	r3, r3
2001ae24:	10a30000 	addk	r5, r3, r0
2001ae28:	b9f4edbc 	brlid	r15, -4676	// 20019be4 <uvclip_4>
2001ae2c:	80000000 	or	r0, r0, r0
2001ae30:	f473001c 	shi	r3, r19, 28
2001ae34:	b8000028 	bri	40		// 2001ae5c
		} else {
			local_sum_x = sum_x;
2001ae38:	b0002006 	imm	8198
2001ae3c:	e4601da2 	lhui	r3, r0, 7586	// 20061da2 <sum_x>
2001ae40:	f4730028 	shi	r3, r19, 40
			mv = uvclip_1(local_sum_x);
2001ae44:	e4730028 	lhui	r3, r19, 40
2001ae48:	90630061 	sext16	r3, r3
2001ae4c:	10a30000 	addk	r5, r3, r0
2001ae50:	b9f4ed3c 	brlid	r15, -4804	// 20019b8c <uvclip_1>
2001ae54:	80000000 	or	r0, r0, r0
2001ae58:	f473001c 	shi	r3, r19, 28
		}
		local_sum_x = sum_x;
2001ae5c:	b0002006 	imm	8198
2001ae60:	e4601da2 	lhui	r3, r0, 7586	// 20061da2 <sum_x>
2001ae64:	f4730028 	shi	r3, r19, 40
		t = local_sum_x;
2001ae68:	e4730028 	lhui	r3, r19, 40
2001ae6c:	f473002a 	shi	r3, r19, 42
		local_sum_y = sum_y;
2001ae70:	b0002006 	imm	8198
2001ae74:	e4601da4 	lhui	r3, r0, 7588	// 20061da4 <sum_y>
2001ae78:	f473002c 	shi	r3, r19, 44
		sum_x = local_sum_y;
2001ae7c:	e473002c 	lhui	r3, r19, 44
2001ae80:	b0002006 	imm	8198
2001ae84:	f4601da2 	shi	r3, r0, 7586	// 20061da2 <sum_x>
		sum_y = t;
2001ae88:	e473002a 	lhui	r3, r19, 42
2001ae8c:	b0002006 	imm	8198
2001ae90:	f4601da4 	shi	r3, r0, 7588	// 20061da4 <sum_y>
		tokens_MV[(index_MV + (0)) % SIZE_MV] = mv;
2001ae94:	b0002004 	imm	8196
2001ae98:	e8606bc0 	lwi	r3, r0, 27584	// 20046bc0 <decoder_parser_mvrecon_MV>
2001ae9c:	e8830004 	lwi	r4, r3, 4
2001aea0:	b0002006 	imm	8198
2001aea4:	e8601c74 	lwi	r3, r0, 7284	// 20061c74 <index_MV>
2001aea8:	a46301ff 	andi	r3, r3, 511
2001aeac:	10631800 	addk	r3, r3, r3
2001aeb0:	10641800 	addk	r3, r4, r3
2001aeb4:	e493001c 	lhui	r4, r19, 28
2001aeb8:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_MV += 1;
2001aebc:	b0002006 	imm	8198
2001aec0:	e8601c74 	lwi	r3, r0, 7284	// 20061c74 <index_MV>
2001aec4:	30630001 	addik	r3, r3, 1
2001aec8:	b0002006 	imm	8198
2001aecc:	f8601c74 	swi	r3, r0, 7284	// 20061c74 <index_MV>
		
		write_end_MV();
2001aed0:	b9f4e9ec 	brlid	r15, -5652	// 200198bc <write_end_MV>
2001aed4:	80000000 	or	r0, r0, r0
	}
2001aed8:	e9e10000 	lwi	r15, r1, 0
2001aedc:	10330000 	addk	r1, r19, r0
2001aee0:	ea610030 	lwi	r19, r1, 48
2001aee4:	30210034 	addik	r1, r1, 52
2001aee8:	b60f0008 	rtsd	r15, 8
2001aeec:	80000000 	or	r0, r0, r0

2001aef0 <isSchedulable_advance>:
	static i32 isSchedulable_advance() {
2001aef0:	3021fff4 	addik	r1, r1, -12
2001aef4:	fa610008 	swi	r19, r1, 8
2001aef8:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2001aefc:	30600001 	addik	r3, r0, 1
2001af00:	f8730004 	swi	r3, r19, 4
		return result;
2001af04:	e8730004 	lwi	r3, r19, 4
	}
2001af08:	10330000 	addk	r1, r19, r0
2001af0c:	ea610008 	lwi	r19, r1, 8
2001af10:	3021000c 	addik	r1, r1, 12
2001af14:	b60f0008 	rtsd	r15, 8
2001af18:	80000000 	or	r0, r0, r0

2001af1c <advance>:
	
	static void advance() {
2001af1c:	3021ffec 	addik	r1, r1, -20
2001af20:	fa610010 	swi	r19, r1, 16
2001af24:	12610000 	addk	r19, r1, r0
		i8 local_mbx;
		i8 local_mbwidth;
		i16 local_ptr;
		i32 local_BUF_SIZE;
	
		local_comp = comp;
2001af28:	b0002006 	imm	8198
2001af2c:	e0601c7d 	lbui	r3, r0, 7293	// 20061c7d <comp>
2001af30:	f0730004 	sbi	r3, r19, 4
		comp = local_comp + 1;
2001af34:	e0730004 	lbui	r3, r19, 4
2001af38:	30630001 	addik	r3, r3, 1
2001af3c:	a46300ff 	andi	r3, r3, 255
2001af40:	90630060 	sext8	r3, r3
2001af44:	b0002006 	imm	8198
2001af48:	f0601c7d 	sbi	r3, r0, 7293	// 20061c7d <comp>
		local_comp = comp;
2001af4c:	b0002006 	imm	8198
2001af50:	e0601c7d 	lbui	r3, r0, 7293	// 20061c7d <comp>
2001af54:	f0730004 	sbi	r3, r19, 4
		if (local_comp == 6) {
2001af58:	e0730004 	lbui	r3, r19, 4
2001af5c:	90630060 	sext8	r3, r3
2001af60:	a8630006 	xori	r3, r3, 6
2001af64:	bc2300dc 	bnei	r3, 220		// 2001b040
			comp = 0;
2001af68:	b0002006 	imm	8198
2001af6c:	f0001c7d 	sbi	r0, r0, 7293	// 20061c7d <comp>
			local_mbx = mbx;
2001af70:	b0002006 	imm	8198
2001af74:	e0601c7c 	lbui	r3, r0, 7292	// 20061c7c <mbx>
2001af78:	f0730005 	sbi	r3, r19, 5
			mbx = local_mbx + 1;
2001af7c:	e0730005 	lbui	r3, r19, 5
2001af80:	30630001 	addik	r3, r3, 1
2001af84:	a46300ff 	andi	r3, r3, 255
2001af88:	90630060 	sext8	r3, r3
2001af8c:	b0002006 	imm	8198
2001af90:	f0601c7c 	sbi	r3, r0, 7292	// 20061c7c <mbx>
			local_mbx = mbx;
2001af94:	b0002006 	imm	8198
2001af98:	e0601c7c 	lbui	r3, r0, 7292	// 20061c7c <mbx>
2001af9c:	f0730005 	sbi	r3, r19, 5
			local_mbwidth = mbwidth;
2001afa0:	b0002006 	imm	8198
2001afa4:	e0601c7e 	lbui	r3, r0, 7294	// 20061c7e <mbwidth>
2001afa8:	f0730006 	sbi	r3, r19, 6
			if (local_mbx == local_mbwidth) {
2001afac:	e0730005 	lbui	r3, r19, 5
2001afb0:	90830060 	sext8	r4, r3
2001afb4:	e0730006 	lbui	r3, r19, 6
2001afb8:	90630060 	sext8	r3, r3
2001afbc:	88641800 	xor	r3, r4, r3
2001afc0:	bc23000c 	bnei	r3, 12		// 2001afcc
				top_edge = 0;
2001afc4:	b0002004 	imm	8196
2001afc8:	f8006c64 	swi	r0, r0, 27748	// 20046c64 <top_edge>
			}
			local_ptr = ptr;
2001afcc:	b0002006 	imm	8198
2001afd0:	e4601c80 	lhui	r3, r0, 7296	// 20061c80 <ptr>
2001afd4:	f4730008 	shi	r3, r19, 8
			if (local_ptr == 8) {
2001afd8:	e4730008 	lhui	r3, r19, 8
2001afdc:	90630061 	sext16	r3, r3
2001afe0:	a8630008 	xori	r3, r3, 8
2001afe4:	bc230034 	bnei	r3, 52		// 2001b018
				local_BUF_SIZE = BUF_SIZE;
2001afe8:	30600080 	addik	r3, r0, 128
2001afec:	f873000c 	swi	r3, r19, 12
				ptr = local_BUF_SIZE - 8;
2001aff0:	e873000c 	lwi	r3, r19, 12
2001aff4:	b0000000 	imm	0
2001aff8:	a463ffff 	andi	r3, r3, -1
2001affc:	3063fff8 	addik	r3, r3, -8
2001b000:	b0000000 	imm	0
2001b004:	a463ffff 	andi	r3, r3, -1
2001b008:	90630061 	sext16	r3, r3
2001b00c:	b0002006 	imm	8198
2001b010:	f4601c80 	shi	r3, r0, 7296	// 20061c80 <ptr>
2001b014:	b800002c 	bri	44		// 2001b040
			} else {
				local_ptr = ptr;
2001b018:	b0002006 	imm	8198
2001b01c:	e4601c80 	lhui	r3, r0, 7296	// 20061c80 <ptr>
2001b020:	f4730008 	shi	r3, r19, 8
				ptr = local_ptr - 8;
2001b024:	e4730008 	lhui	r3, r19, 8
2001b028:	3063fff8 	addik	r3, r3, -8
2001b02c:	b0000000 	imm	0
2001b030:	a463ffff 	andi	r3, r3, -1
2001b034:	90630061 	sext16	r3, r3
2001b038:	b0002006 	imm	8198
2001b03c:	f4601c80 	shi	r3, r0, 7296	// 20061c80 <ptr>
			}
		}
	
		// Update ports indexes
		
	}
2001b040:	10330000 	addk	r1, r19, r0
2001b044:	ea610010 	lwi	r19, r1, 16
2001b048:	30210014 	addik	r1, r1, 20
2001b04c:	b60f0008 	rtsd	r15, 8
2001b050:	80000000 	or	r0, r0, r0

2001b054 <decoder_parser_mvrecon_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_parser_mvrecon_initialize() {
2001b054:	3021fff4 	addik	r1, r1, -12
2001b058:	fa610008 	swi	r19, r1, 8
2001b05c:	12610000 	addk	r19, r1, r0
		int i = 0;
2001b060:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_read;
2001b064:	3060001c 	addik	r3, r0, 28
2001b068:	b0002006 	imm	8198
2001b06c:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
		
	finished:
		// no read_end/write_end here!
		return;
2001b070:	80000000 	or	r0, r0, r0
	}
2001b074:	10330000 	addk	r1, r19, r0
2001b078:	ea610008 	lwi	r19, r1, 8
2001b07c:	3021000c 	addik	r1, r1, 12
2001b080:	b60f0008 	rtsd	r15, 8
2001b084:	80000000 	or	r0, r0, r0

2001b088 <decoder_parser_mvrecon_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	
	int decoder_parser_mvrecon_scheduler() {
2001b088:	3021ff4c 	addik	r1, r1, -180
2001b08c:	f9e10000 	swi	r15, r1, 0
2001b090:	fa6100b0 	swi	r19, r1, 176
2001b094:	12610000 	addk	r19, r1, r0
		int i = 0;
2001b098:	f813001c 	swi	r0, r19, 28
		if(needInit){
2001b09c:	b0002004 	imm	8196
2001b0a0:	e0606c68 	lbui	r3, r0, 27752	// 20046c68 <needInit>
2001b0a4:	bc030014 	beqi	r3, 20		// 2001b0b8
			decoder_parser_mvrecon_initialize();
2001b0a8:	b9f4ffac 	brlid	r15, -84	// 2001b054 <decoder_parser_mvrecon_initialize>
2001b0ac:	80000000 	or	r0, r0, r0
			needInit = 0;
2001b0b0:	b0002004 	imm	8196
2001b0b4:	f0006c68 	sbi	r0, r0, 27752	// 20046c68 <needInit>
		}
	
		read_BTYPE();
2001b0b8:	b9f4e598 	brlid	r15, -6760	// 20019650 <read_BTYPE>
2001b0bc:	80000000 	or	r0, r0, r0
		read_MVIN();
2001b0c0:	b9f4e63c 	brlid	r15, -6596	// 200196fc <read_MVIN>
2001b0c4:	80000000 	or	r0, r0, r0
		read_A();
2001b0c8:	b9f4e6dc 	brlid	r15, -6436	// 200197a4 <read_A>
2001b0cc:	80000000 	or	r0, r0, r0
		write_MV();
2001b0d0:	b9f4e77c 	brlid	r15, -6276	// 2001984c <write_MV>
2001b0d4:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
2001b0d8:	b0002006 	imm	8198
2001b0dc:	e8601db0 	lwi	r3, r0, 7600	// 20061db0 <_FSM_state>
2001b0e0:	3080001e 	addik	r4, r0, 30
2001b0e4:	16432003 	cmpu	r18, r3, r4
2001b0e8:	bc520018 	blti	r18, 24		// 2001b100
2001b0ec:	64630402 	bslli	r3, r3, 2
2001b0f0:	b0002003 	imm	8195
2001b0f4:	3063bee4 	addik	r3, r3, -16668
2001b0f8:	e8630000 	lwi	r3, r3, 0
2001b0fc:	98081800 	bra	r3
		case my_state_write:
			goto l_write;
		case my_state_write_y:
			goto l_write_y;
		default:
			exit(1);
2001b100:	30a00001 	addik	r5, r0, 1
2001b104:	b000dffe 	imm	-8194
2001b108:	b9f45290 	brlid	r15, 21136	// 398 <exit>
2001b10c:	80000000 	or	r0, r0, r0
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_advance:
			goto l_advance;
2001b110:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_advance:
			if (isSchedulable_advance()) {
2001b114:	b9f4fddc 	brlid	r15, -548	// 2001aef0 <isSchedulable_advance>
2001b118:	80000000 	or	r0, r0, r0
2001b11c:	bc030034 	beqi	r3, 52		// 2001b150
				int stop = 0;
2001b120:	f8130030 	swi	r0, r19, 48
				if (stop != 0) {
2001b124:	e8730030 	lwi	r3, r19, 48
2001b128:	bc030010 	beqi	r3, 16		// 2001b138
					_FSM_state = my_state_advance;
2001b12c:	b0002006 	imm	8198
2001b130:	f8001db0 	swi	r0, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b134:	b8000d10 	bri	3344		// 2001be44
				}
				advance();
2001b138:	b9f4fde4 	brlid	r15, -540	// 2001af1c <advance>
2001b13c:	80000000 	or	r0, r0, r0
				i++;
2001b140:	e873001c 	lwi	r3, r19, 28
2001b144:	30630001 	addik	r3, r3, 1
2001b148:	f873001c 	swi	r3, r19, 28
				goto l_read;
2001b14c:	b8000a08 	bri	2568		// 2001bb54
			} else {
				_FSM_state = my_state_advance;
2001b150:	b0002006 	imm	8198
2001b154:	f8001db0 	swi	r0, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b158:	b8000cec 	bri	3308		// 2001be44
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_advance:
			goto l_advance;
		case my_state_compute:
			goto l_compute;
2001b15c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_advance;
				goto finished;
			}
		l_compute:
			if (isSchedulable_compute_done()) {
2001b160:	b9f4f214 	brlid	r15, -3564	// 2001a374 <isSchedulable_compute_done>
2001b164:	80000000 	or	r0, r0, r0
2001b168:	bc030038 	beqi	r3, 56		// 2001b1a0
				int stop = 0;
2001b16c:	f8130034 	swi	r0, r19, 52
				if (stop != 0) {
2001b170:	e8730034 	lwi	r3, r19, 52
2001b174:	bc030014 	beqi	r3, 20		// 2001b188
					_FSM_state = my_state_compute;
2001b178:	30600001 	addik	r3, r0, 1
2001b17c:	b0002006 	imm	8198
2001b180:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b184:	b8000cc0 	bri	3264		// 2001be44
				}
				compute_done();
2001b188:	b9f4f26c 	brlid	r15, -3476	// 2001a3f4 <compute_done>
2001b18c:	80000000 	or	r0, r0, r0
				i++;
2001b190:	e873001c 	lwi	r3, r19, 28
2001b194:	30630001 	addik	r3, r3, 1
2001b198:	f873001c 	swi	r3, r19, 28
				goto l_write;
2001b19c:	b8000ad4 	bri	2772		// 2001bc70
			} else if (numTokens_A - index_A >= 1 && isSchedulable_compute_start()) {
2001b1a0:	b0002006 	imm	8198
2001b1a4:	e8801c70 	lwi	r4, r0, 7280	// 20061c70 <numTokens_A>
2001b1a8:	b0002006 	imm	8198
2001b1ac:	e8601c6c 	lwi	r3, r0, 7276	// 20061c6c <index_A>
2001b1b0:	88641800 	xor	r3, r4, r3
2001b1b4:	bc030044 	beqi	r3, 68		// 2001b1f8
2001b1b8:	b9f4f25c 	brlid	r15, -3492	// 2001a414 <isSchedulable_compute_start>
2001b1bc:	80000000 	or	r0, r0, r0
2001b1c0:	bc030038 	beqi	r3, 56		// 2001b1f8
				int stop = 0;
2001b1c4:	f8130038 	swi	r0, r19, 56
				if (stop != 0) {
2001b1c8:	e8730038 	lwi	r3, r19, 56
2001b1cc:	bc030014 	beqi	r3, 20		// 2001b1e0
					_FSM_state = my_state_compute;
2001b1d0:	30600001 	addik	r3, r0, 1
2001b1d4:	b0002006 	imm	8198
2001b1d8:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b1dc:	b8000c68 	bri	3176		// 2001be44
				}
				compute_start();
2001b1e0:	b9f4f260 	brlid	r15, -3488	// 2001a440 <compute_start>
2001b1e4:	80000000 	or	r0, r0, r0
				i++;
2001b1e8:	e873001c 	lwi	r3, r19, 28
2001b1ec:	30630001 	addik	r3, r3, 1
2001b1f0:	f873001c 	swi	r3, r19, 28
				goto l_get_pred_p;
2001b1f4:	b8000198 	bri	408		// 2001b38c
			} else {
				_FSM_state = my_state_compute;
2001b1f8:	30600001 	addik	r3, r0, 1
2001b1fc:	b0002006 	imm	8198
2001b200:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b204:	b8000c40 	bri	3136		// 2001be44
		case my_state_advance:
			goto l_advance;
		case my_state_compute:
			goto l_compute;
		case my_state_do_pred_x:
			goto l_do_pred_x;
2001b208:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_compute;
				goto finished;
			}
		l_do_pred_x:
			if (isSchedulable_do_pred()) {
2001b20c:	b9f4f3fc 	brlid	r15, -3076	// 2001a608 <isSchedulable_do_pred>
2001b210:	80000000 	or	r0, r0, r0
2001b214:	bc030038 	beqi	r3, 56		// 2001b24c
				int stop = 0;
2001b218:	f8130050 	swi	r0, r19, 80
				if (stop != 0) {
2001b21c:	e8730050 	lwi	r3, r19, 80
2001b220:	bc030014 	beqi	r3, 20		// 2001b234
					_FSM_state = my_state_do_pred_x;
2001b224:	30600002 	addik	r3, r0, 2
2001b228:	b0002006 	imm	8198
2001b22c:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b230:	b8000c14 	bri	3092		// 2001be44
				}
				do_pred();
2001b234:	b9f4f400 	brlid	r15, -3072	// 2001a634 <do_pred>
2001b238:	80000000 	or	r0, r0, r0
				i++;
2001b23c:	e873001c 	lwi	r3, r19, 28
2001b240:	30630001 	addik	r3, r3, 1
2001b244:	f873001c 	swi	r3, r19, 28
				goto l_get_mag_x;
2001b248:	b800006c 	bri	108		// 2001b2b4
			} else {
				_FSM_state = my_state_do_pred_x;
2001b24c:	30600002 	addik	r3, r0, 2
2001b250:	b0002006 	imm	8198
2001b254:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b258:	b8000bec 	bri	3052		// 2001be44
		case my_state_compute:
			goto l_compute;
		case my_state_do_pred_x:
			goto l_do_pred_x;
		case my_state_do_pred_y:
			goto l_do_pred_y;
2001b25c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_do_pred_x;
				goto finished;
			}
		l_do_pred_y:
			if (isSchedulable_do_pred()) {
2001b260:	b9f4f3a8 	brlid	r15, -3160	// 2001a608 <isSchedulable_do_pred>
2001b264:	80000000 	or	r0, r0, r0
2001b268:	bc030038 	beqi	r3, 56		// 2001b2a0
				int stop = 0;
2001b26c:	f813007c 	swi	r0, r19, 124
				if (stop != 0) {
2001b270:	e873007c 	lwi	r3, r19, 124
2001b274:	bc030014 	beqi	r3, 20		// 2001b288
					_FSM_state = my_state_do_pred_y;
2001b278:	30600003 	addik	r3, r0, 3
2001b27c:	b0002006 	imm	8198
2001b280:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b284:	b8000bc0 	bri	3008		// 2001be44
				}
				do_pred();
2001b288:	b9f4f3ac 	brlid	r15, -3156	// 2001a634 <do_pred>
2001b28c:	80000000 	or	r0, r0, r0
				i++;
2001b290:	e873001c 	lwi	r3, r19, 28
2001b294:	30630001 	addik	r3, r3, 1
2001b298:	f873001c 	swi	r3, r19, 28
				goto l_get_mag_y;
2001b29c:	b8000084 	bri	132		// 2001b320
			} else {
				_FSM_state = my_state_do_pred_y;
2001b2a0:	30600003 	addik	r3, r0, 3
2001b2a4:	b0002006 	imm	8198
2001b2a8:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b2ac:	b8000b98 	bri	2968		// 2001be44
		case my_state_do_pred_x:
			goto l_do_pred_x;
		case my_state_do_pred_y:
			goto l_do_pred_y;
		case my_state_get_mag_x:
			goto l_get_mag_x;
2001b2b0:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_do_pred_y;
				goto finished;
			}
		l_get_mag_x:
			if (numTokens_MVIN - index_MVIN >= 1 && isSchedulable_get_mag()) {
2001b2b4:	b0002006 	imm	8198
2001b2b8:	e8801c68 	lwi	r4, r0, 7272	// 20061c68 <numTokens_MVIN>
2001b2bc:	b0002006 	imm	8198
2001b2c0:	e8601c64 	lwi	r3, r0, 7268	// 20061c64 <index_MVIN>
2001b2c4:	88641800 	xor	r3, r4, r3
2001b2c8:	bc030044 	beqi	r3, 68		// 2001b30c
2001b2cc:	b9f4f424 	brlid	r15, -3036	// 2001a6f0 <isSchedulable_get_mag>
2001b2d0:	80000000 	or	r0, r0, r0
2001b2d4:	bc030038 	beqi	r3, 56		// 2001b30c
				int stop = 0;
2001b2d8:	f8130054 	swi	r0, r19, 84
				if (stop != 0) {
2001b2dc:	e8730054 	lwi	r3, r19, 84
2001b2e0:	bc030014 	beqi	r3, 20		// 2001b2f4
					_FSM_state = my_state_get_mag_x;
2001b2e4:	30600004 	addik	r3, r0, 4
2001b2e8:	b0002006 	imm	8198
2001b2ec:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b2f0:	b8000b54 	bri	2900		// 2001be44
				}
				get_mag();
2001b2f4:	b9f4f428 	brlid	r15, -3032	// 2001a71c <get_mag>
2001b2f8:	80000000 	or	r0, r0, r0
				i++;
2001b2fc:	e873001c 	lwi	r3, r19, 28
2001b300:	30630001 	addik	r3, r3, 1
2001b304:	f873001c 	swi	r3, r19, 28
				goto l_get_res_x;
2001b308:	b8000354 	bri	852		// 2001b65c
			} else {
				_FSM_state = my_state_get_mag_x;
2001b30c:	30600004 	addik	r3, r0, 4
2001b310:	b0002006 	imm	8198
2001b314:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b318:	b8000b2c 	bri	2860		// 2001be44
		case my_state_do_pred_y:
			goto l_do_pred_y;
		case my_state_get_mag_x:
			goto l_get_mag_x;
		case my_state_get_mag_y:
			goto l_get_mag_y;
2001b31c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_mag_x;
				goto finished;
			}
		l_get_mag_y:
			if (numTokens_MVIN - index_MVIN >= 1 && isSchedulable_get_mag()) {
2001b320:	b0002006 	imm	8198
2001b324:	e8801c68 	lwi	r4, r0, 7272	// 20061c68 <numTokens_MVIN>
2001b328:	b0002006 	imm	8198
2001b32c:	e8601c64 	lwi	r3, r0, 7268	// 20061c64 <index_MVIN>
2001b330:	88641800 	xor	r3, r4, r3
2001b334:	bc030044 	beqi	r3, 68		// 2001b378
2001b338:	b9f4f3b8 	brlid	r15, -3144	// 2001a6f0 <isSchedulable_get_mag>
2001b33c:	80000000 	or	r0, r0, r0
2001b340:	bc030038 	beqi	r3, 56		// 2001b378
				int stop = 0;
2001b344:	f8130080 	swi	r0, r19, 128
				if (stop != 0) {
2001b348:	e8730080 	lwi	r3, r19, 128
2001b34c:	bc030014 	beqi	r3, 20		// 2001b360
					_FSM_state = my_state_get_mag_y;
2001b350:	30600005 	addik	r3, r0, 5
2001b354:	b0002006 	imm	8198
2001b358:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b35c:	b8000ae8 	bri	2792		// 2001be44
				}
				get_mag();
2001b360:	b9f4f3bc 	brlid	r15, -3140	// 2001a71c <get_mag>
2001b364:	80000000 	or	r0, r0, r0
				i++;
2001b368:	e873001c 	lwi	r3, r19, 28
2001b36c:	30630001 	addik	r3, r3, 1
2001b370:	f873001c 	swi	r3, r19, 28
				goto l_get_res_y;
2001b374:	b80004f8 	bri	1272		// 2001b86c
			} else {
				_FSM_state = my_state_get_mag_y;
2001b378:	30600005 	addik	r3, r0, 5
2001b37c:	b0002006 	imm	8198
2001b380:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b384:	b8000ac0 	bri	2752		// 2001be44
		case my_state_get_mag_x:
			goto l_get_mag_x;
		case my_state_get_mag_y:
			goto l_get_mag_y;
		case my_state_get_pred_p:
			goto l_get_pred_p;
2001b388:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_mag_y;
				goto finished;
			}
		l_get_pred_p:
			if (numTokens_A - index_A >= 1 && isSchedulable_compute_start()) {
2001b38c:	b0002006 	imm	8198
2001b390:	e8801c70 	lwi	r4, r0, 7280	// 20061c70 <numTokens_A>
2001b394:	b0002006 	imm	8198
2001b398:	e8601c6c 	lwi	r3, r0, 7276	// 20061c6c <index_A>
2001b39c:	88641800 	xor	r3, r4, r3
2001b3a0:	bc030044 	beqi	r3, 68		// 2001b3e4
2001b3a4:	b9f4f070 	brlid	r15, -3984	// 2001a414 <isSchedulable_compute_start>
2001b3a8:	80000000 	or	r0, r0, r0
2001b3ac:	bc030038 	beqi	r3, 56		// 2001b3e4
				int stop = 0;
2001b3b0:	f813003c 	swi	r0, r19, 60
				if (stop != 0) {
2001b3b4:	e873003c 	lwi	r3, r19, 60
2001b3b8:	bc030014 	beqi	r3, 20		// 2001b3cc
					_FSM_state = my_state_get_pred_p;
2001b3bc:	30600006 	addik	r3, r0, 6
2001b3c0:	b0002006 	imm	8198
2001b3c4:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b3c8:	b8000a7c 	bri	2684		// 2001be44
				}
				compute_start();
2001b3cc:	b9f4f074 	brlid	r15, -3980	// 2001a440 <compute_start>
2001b3d0:	80000000 	or	r0, r0, r0
				i++;
2001b3d4:	e873001c 	lwi	r3, r19, 28
2001b3d8:	30630001 	addik	r3, r3, 1
2001b3dc:	f873001c 	swi	r3, r19, 28
				goto l_get_pred_p1;
2001b3e0:	b8000018 	bri	24		// 2001b3f8
			} else {
				_FSM_state = my_state_get_pred_p;
2001b3e4:	30600006 	addik	r3, r0, 6
2001b3e8:	b0002006 	imm	8198
2001b3ec:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b3f0:	b8000a54 	bri	2644		// 2001be44
		case my_state_get_mag_y:
			goto l_get_mag_y;
		case my_state_get_pred_p:
			goto l_get_pred_p;
		case my_state_get_pred_p1:
			goto l_get_pred_p1;
2001b3f4:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_pred_p;
				goto finished;
			}
		l_get_pred_p1:
			if (numTokens_A - index_A >= 1 && isSchedulable_compute_start()) {
2001b3f8:	b0002006 	imm	8198
2001b3fc:	e8801c70 	lwi	r4, r0, 7280	// 20061c70 <numTokens_A>
2001b400:	b0002006 	imm	8198
2001b404:	e8601c6c 	lwi	r3, r0, 7276	// 20061c6c <index_A>
2001b408:	88641800 	xor	r3, r4, r3
2001b40c:	bc030044 	beqi	r3, 68		// 2001b450
2001b410:	b9f4f004 	brlid	r15, -4092	// 2001a414 <isSchedulable_compute_start>
2001b414:	80000000 	or	r0, r0, r0
2001b418:	bc030038 	beqi	r3, 56		// 2001b450
				int stop = 0;
2001b41c:	f8130040 	swi	r0, r19, 64
				if (stop != 0) {
2001b420:	e8730040 	lwi	r3, r19, 64
2001b424:	bc030014 	beqi	r3, 20		// 2001b438
					_FSM_state = my_state_get_pred_p1;
2001b428:	30600007 	addik	r3, r0, 7
2001b42c:	b0002006 	imm	8198
2001b430:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b434:	b8000a10 	bri	2576		// 2001be44
				}
				compute_start();
2001b438:	b9f4f008 	brlid	r15, -4088	// 2001a440 <compute_start>
2001b43c:	80000000 	or	r0, r0, r0
				i++;
2001b440:	e873001c 	lwi	r3, r19, 28
2001b444:	30630001 	addik	r3, r3, 1
2001b448:	f873001c 	swi	r3, r19, 28
				goto l_get_pred_x;
2001b44c:	b8000018 	bri	24		// 2001b464
			} else {
				_FSM_state = my_state_get_pred_p1;
2001b450:	30600007 	addik	r3, r0, 7
2001b454:	b0002006 	imm	8198
2001b458:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b45c:	b80009e8 	bri	2536		// 2001be44
		case my_state_get_pred_p:
			goto l_get_pred_p;
		case my_state_get_pred_p1:
			goto l_get_pred_p1;
		case my_state_get_pred_x:
			goto l_get_pred_x;
2001b460:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_pred_p1;
				goto finished;
			}
		l_get_pred_x:
			if (isSchedulable_get_pred()) {
2001b464:	b9f4f094 	brlid	r15, -3948	// 2001a4f8 <isSchedulable_get_pred>
2001b468:	80000000 	or	r0, r0, r0
2001b46c:	bc030038 	beqi	r3, 56		// 2001b4a4
				int stop = 0;
2001b470:	f8130044 	swi	r0, r19, 68
				if (stop != 0) {
2001b474:	e8730044 	lwi	r3, r19, 68
2001b478:	bc030014 	beqi	r3, 20		// 2001b48c
					_FSM_state = my_state_get_pred_x;
2001b47c:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2001b480:	b0002006 	imm	8198
2001b484:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b488:	b80009bc 	bri	2492		// 2001be44
				}
				get_pred();
2001b48c:	b9f4f098 	brlid	r15, -3944	// 2001a524 <get_pred>
2001b490:	80000000 	or	r0, r0, r0
				i++;
2001b494:	e873001c 	lwi	r3, r19, 28
2001b498:	30630001 	addik	r3, r3, 1
2001b49c:	f873001c 	swi	r3, r19, 28
				goto l_get_pred_x1;
2001b4a0:	b8000018 	bri	24		// 2001b4b8
			} else {
				_FSM_state = my_state_get_pred_x;
2001b4a4:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2001b4a8:	b0002006 	imm	8198
2001b4ac:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b4b0:	b8000994 	bri	2452		// 2001be44
		case my_state_get_pred_p1:
			goto l_get_pred_p1;
		case my_state_get_pred_x:
			goto l_get_pred_x;
		case my_state_get_pred_x1:
			goto l_get_pred_x1;
2001b4b4:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_pred_x;
				goto finished;
			}
		l_get_pred_x1:
			if (isSchedulable_get_pred()) {
2001b4b8:	b9f4f040 	brlid	r15, -4032	// 2001a4f8 <isSchedulable_get_pred>
2001b4bc:	80000000 	or	r0, r0, r0
2001b4c0:	bc030038 	beqi	r3, 56		// 2001b4f8
				int stop = 0;
2001b4c4:	f8130048 	swi	r0, r19, 72
				if (stop != 0) {
2001b4c8:	e8730048 	lwi	r3, r19, 72
2001b4cc:	bc030014 	beqi	r3, 20		// 2001b4e0
					_FSM_state = my_state_get_pred_x1;
2001b4d0:	30600009 	addik	r3, r0, 9
2001b4d4:	b0002006 	imm	8198
2001b4d8:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b4dc:	b8000968 	bri	2408		// 2001be44
				}
				get_pred();
2001b4e0:	b9f4f044 	brlid	r15, -4028	// 2001a524 <get_pred>
2001b4e4:	80000000 	or	r0, r0, r0
				i++;
2001b4e8:	e873001c 	lwi	r3, r19, 28
2001b4ec:	30630001 	addik	r3, r3, 1
2001b4f0:	f873001c 	swi	r3, r19, 28
				goto l_get_pred_x2;
2001b4f4:	b8000018 	bri	24		// 2001b50c
			} else {
				_FSM_state = my_state_get_pred_x1;
2001b4f8:	30600009 	addik	r3, r0, 9
2001b4fc:	b0002006 	imm	8198
2001b500:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b504:	b8000940 	bri	2368		// 2001be44
		case my_state_get_pred_x:
			goto l_get_pred_x;
		case my_state_get_pred_x1:
			goto l_get_pred_x1;
		case my_state_get_pred_x2:
			goto l_get_pred_x2;
2001b508:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_pred_x1;
				goto finished;
			}
		l_get_pred_x2:
			if (isSchedulable_get_pred()) {
2001b50c:	b9f4efec 	brlid	r15, -4116	// 2001a4f8 <isSchedulable_get_pred>
2001b510:	80000000 	or	r0, r0, r0
2001b514:	bc030038 	beqi	r3, 56		// 2001b54c
				int stop = 0;
2001b518:	f813004c 	swi	r0, r19, 76
				if (stop != 0) {
2001b51c:	e873004c 	lwi	r3, r19, 76
2001b520:	bc030014 	beqi	r3, 20		// 2001b534
					_FSM_state = my_state_get_pred_x2;
2001b524:	3060000a 	addik	r3, r0, 10
2001b528:	b0002006 	imm	8198
2001b52c:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b530:	b8000914 	bri	2324		// 2001be44
				}
				get_pred();
2001b534:	b9f4eff0 	brlid	r15, -4112	// 2001a524 <get_pred>
2001b538:	80000000 	or	r0, r0, r0
				i++;
2001b53c:	e873001c 	lwi	r3, r19, 28
2001b540:	30630001 	addik	r3, r3, 1
2001b544:	f873001c 	swi	r3, r19, 28
				goto l_do_pred_x;
2001b548:	b800fcc4 	bri	-828		// 2001b20c
			} else {
				_FSM_state = my_state_get_pred_x2;
2001b54c:	3060000a 	addik	r3, r0, 10
2001b550:	b0002006 	imm	8198
2001b554:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b558:	b80008ec 	bri	2284		// 2001be44
		case my_state_get_pred_x1:
			goto l_get_pred_x1;
		case my_state_get_pred_x2:
			goto l_get_pred_x2;
		case my_state_get_pred_y:
			goto l_get_pred_y;
2001b55c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_pred_x2;
				goto finished;
			}
		l_get_pred_y:
			if (isSchedulable_get_pred()) {
2001b560:	b9f4ef98 	brlid	r15, -4200	// 2001a4f8 <isSchedulable_get_pred>
2001b564:	80000000 	or	r0, r0, r0
2001b568:	bc030038 	beqi	r3, 56		// 2001b5a0
				int stop = 0;
2001b56c:	f8130070 	swi	r0, r19, 112
				if (stop != 0) {
2001b570:	e8730070 	lwi	r3, r19, 112
2001b574:	bc030014 	beqi	r3, 20		// 2001b588
					_FSM_state = my_state_get_pred_y;
2001b578:	3060000b 	addik	r3, r0, 11
2001b57c:	b0002006 	imm	8198
2001b580:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b584:	b80008c0 	bri	2240		// 2001be44
				}
				get_pred();
2001b588:	b9f4ef9c 	brlid	r15, -4196	// 2001a524 <get_pred>
2001b58c:	80000000 	or	r0, r0, r0
				i++;
2001b590:	e873001c 	lwi	r3, r19, 28
2001b594:	30630001 	addik	r3, r3, 1
2001b598:	f873001c 	swi	r3, r19, 28
				goto l_get_pred_y1;
2001b59c:	b8000018 	bri	24		// 2001b5b4
			} else {
				_FSM_state = my_state_get_pred_y;
2001b5a0:	3060000b 	addik	r3, r0, 11
2001b5a4:	b0002006 	imm	8198
2001b5a8:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b5ac:	b8000898 	bri	2200		// 2001be44
		case my_state_get_pred_x2:
			goto l_get_pred_x2;
		case my_state_get_pred_y:
			goto l_get_pred_y;
		case my_state_get_pred_y1:
			goto l_get_pred_y1;
2001b5b0:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_pred_y;
				goto finished;
			}
		l_get_pred_y1:
			if (isSchedulable_get_pred()) {
2001b5b4:	b9f4ef44 	brlid	r15, -4284	// 2001a4f8 <isSchedulable_get_pred>
2001b5b8:	80000000 	or	r0, r0, r0
2001b5bc:	bc030038 	beqi	r3, 56		// 2001b5f4
				int stop = 0;
2001b5c0:	f8130074 	swi	r0, r19, 116
				if (stop != 0) {
2001b5c4:	e8730074 	lwi	r3, r19, 116
2001b5c8:	bc030014 	beqi	r3, 20		// 2001b5dc
					_FSM_state = my_state_get_pred_y1;
2001b5cc:	3060000c 	addik	r3, r0, 12
2001b5d0:	b0002006 	imm	8198
2001b5d4:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b5d8:	b800086c 	bri	2156		// 2001be44
				}
				get_pred();
2001b5dc:	b9f4ef48 	brlid	r15, -4280	// 2001a524 <get_pred>
2001b5e0:	80000000 	or	r0, r0, r0
				i++;
2001b5e4:	e873001c 	lwi	r3, r19, 28
2001b5e8:	30630001 	addik	r3, r3, 1
2001b5ec:	f873001c 	swi	r3, r19, 28
				goto l_get_pred_y2;
2001b5f0:	b8000018 	bri	24		// 2001b608
			} else {
				_FSM_state = my_state_get_pred_y1;
2001b5f4:	3060000c 	addik	r3, r0, 12
2001b5f8:	b0002006 	imm	8198
2001b5fc:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b600:	b8000844 	bri	2116		// 2001be44
		case my_state_get_pred_y:
			goto l_get_pred_y;
		case my_state_get_pred_y1:
			goto l_get_pred_y1;
		case my_state_get_pred_y2:
			goto l_get_pred_y2;
2001b604:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_pred_y1;
				goto finished;
			}
		l_get_pred_y2:
			if (isSchedulable_get_pred()) {
2001b608:	b9f4eef0 	brlid	r15, -4368	// 2001a4f8 <isSchedulable_get_pred>
2001b60c:	80000000 	or	r0, r0, r0
2001b610:	bc030038 	beqi	r3, 56		// 2001b648
				int stop = 0;
2001b614:	f8130078 	swi	r0, r19, 120
				if (stop != 0) {
2001b618:	e8730078 	lwi	r3, r19, 120
2001b61c:	bc030014 	beqi	r3, 20		// 2001b630
					_FSM_state = my_state_get_pred_y2;
2001b620:	3060000d 	addik	r3, r0, 13
2001b624:	b0002006 	imm	8198
2001b628:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b62c:	b8000818 	bri	2072		// 2001be44
				}
				get_pred();
2001b630:	b9f4eef4 	brlid	r15, -4364	// 2001a524 <get_pred>
2001b634:	80000000 	or	r0, r0, r0
				i++;
2001b638:	e873001c 	lwi	r3, r19, 28
2001b63c:	30630001 	addik	r3, r3, 1
2001b640:	f873001c 	swi	r3, r19, 28
				goto l_do_pred_y;
2001b644:	b800fc1c 	bri	-996		// 2001b260
			} else {
				_FSM_state = my_state_get_pred_y2;
2001b648:	3060000d 	addik	r3, r0, 13
2001b64c:	b0002006 	imm	8198
2001b650:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b654:	b80007f0 	bri	2032		// 2001be44
		case my_state_get_pred_y1:
			goto l_get_pred_y1;
		case my_state_get_pred_y2:
			goto l_get_pred_y2;
		case my_state_get_res_x:
			goto l_get_res_x;
2001b658:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_pred_y2;
				goto finished;
			}
		l_get_res_x:
			if (isSchedulable_get_residual_init()) {
2001b65c:	b9f4f148 	brlid	r15, -3768	// 2001a7a4 <isSchedulable_get_residual_init>
2001b660:	80000000 	or	r0, r0, r0
2001b664:	bc030038 	beqi	r3, 56		// 2001b69c
				int stop = 0;
2001b668:	f8130058 	swi	r0, r19, 88
				if (stop != 0) {
2001b66c:	e8730058 	lwi	r3, r19, 88
2001b670:	bc030014 	beqi	r3, 20		// 2001b684
					_FSM_state = my_state_get_res_x;
2001b674:	3060000e 	addik	r3, r0, 14
2001b678:	b0002006 	imm	8198
2001b67c:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b680:	b80007c4 	bri	1988		// 2001be44
				}
				get_residual_init();
2001b684:	b9f4f14c 	brlid	r15, -3764	// 2001a7d0 <get_residual_init>
2001b688:	80000000 	or	r0, r0, r0
				i++;
2001b68c:	e873001c 	lwi	r3, r19, 28
2001b690:	30630001 	addik	r3, r3, 1
2001b694:	f873001c 	swi	r3, r19, 28
				goto l_get_res_x_a;
2001b698:	b8000018 	bri	24		// 2001b6b0
			} else {
				_FSM_state = my_state_get_res_x;
2001b69c:	3060000e 	addik	r3, r0, 14
2001b6a0:	b0002006 	imm	8198
2001b6a4:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b6a8:	b800079c 	bri	1948		// 2001be44
		case my_state_get_pred_y2:
			goto l_get_pred_y2;
		case my_state_get_res_x:
			goto l_get_res_x;
		case my_state_get_res_x_a:
			goto l_get_res_x_a;
2001b6ac:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_x;
				goto finished;
			}
		l_get_res_x_a:
			if (isSchedulable_get_residual_shift()) {
2001b6b0:	b9f4f1a4 	brlid	r15, -3676	// 2001a854 <isSchedulable_get_residual_shift>
2001b6b4:	80000000 	or	r0, r0, r0
2001b6b8:	bc030038 	beqi	r3, 56		// 2001b6f0
				int stop = 0;
2001b6bc:	f813005c 	swi	r0, r19, 92
				if (stop != 0) {
2001b6c0:	e873005c 	lwi	r3, r19, 92
2001b6c4:	bc030014 	beqi	r3, 20		// 2001b6d8
					_FSM_state = my_state_get_res_x_a;
2001b6c8:	3060000f 	addik	r3, r0, 15
2001b6cc:	b0002006 	imm	8198
2001b6d0:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b6d4:	b8000770 	bri	1904		// 2001be44
				}
				get_residual_shift();
2001b6d8:	b9f4f1a8 	brlid	r15, -3672	// 2001a880 <get_residual_shift>
2001b6dc:	80000000 	or	r0, r0, r0
				i++;
2001b6e0:	e873001c 	lwi	r3, r19, 28
2001b6e4:	30630001 	addik	r3, r3, 1
2001b6e8:	f873001c 	swi	r3, r19, 28
				goto l_get_res_x_b;
2001b6ec:	b8000018 	bri	24		// 2001b704
			} else {
				_FSM_state = my_state_get_res_x_a;
2001b6f0:	3060000f 	addik	r3, r0, 15
2001b6f4:	b0002006 	imm	8198
2001b6f8:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b6fc:	b8000748 	bri	1864		// 2001be44
		case my_state_get_res_x:
			goto l_get_res_x;
		case my_state_get_res_x_a:
			goto l_get_res_x_a;
		case my_state_get_res_x_b:
			goto l_get_res_x_b;
2001b700:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_x_a;
				goto finished;
			}
		l_get_res_x_b:
			if (numTokens_MVIN - index_MVIN >= 1 && isSchedulable_get_residual_adjust()) {
2001b704:	b0002006 	imm	8198
2001b708:	e8801c68 	lwi	r4, r0, 7272	// 20061c68 <numTokens_MVIN>
2001b70c:	b0002006 	imm	8198
2001b710:	e8601c64 	lwi	r3, r0, 7268	// 20061c64 <index_MVIN>
2001b714:	88641800 	xor	r3, r4, r3
2001b718:	bc030044 	beqi	r3, 68		// 2001b75c
2001b71c:	b9f4f1e0 	brlid	r15, -3616	// 2001a8fc <isSchedulable_get_residual_adjust>
2001b720:	80000000 	or	r0, r0, r0
2001b724:	bc030038 	beqi	r3, 56		// 2001b75c
				int stop = 0;
2001b728:	f8130060 	swi	r0, r19, 96
				if (stop != 0) {
2001b72c:	e8730060 	lwi	r3, r19, 96
2001b730:	bc030014 	beqi	r3, 20		// 2001b744
					_FSM_state = my_state_get_res_x_b;
2001b734:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
2001b738:	b0002006 	imm	8198
2001b73c:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b740:	b8000704 	bri	1796		// 2001be44
				}
				get_residual_adjust();
2001b744:	b9f4f1e4 	brlid	r15, -3612	// 2001a928 <get_residual_adjust>
2001b748:	80000000 	or	r0, r0, r0
				i++;
2001b74c:	e873001c 	lwi	r3, r19, 28
2001b750:	30630001 	addik	r3, r3, 1
2001b754:	f873001c 	swi	r3, r19, 28
				goto l_get_res_x_c;
2001b758:	b8000018 	bri	24		// 2001b770
			} else {
				_FSM_state = my_state_get_res_x_b;
2001b75c:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
2001b760:	b0002006 	imm	8198
2001b764:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b768:	b80006dc 	bri	1756		// 2001be44
		case my_state_get_res_x_a:
			goto l_get_res_x_a;
		case my_state_get_res_x_b:
			goto l_get_res_x_b;
		case my_state_get_res_x_c:
			goto l_get_res_x_c;
2001b76c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_x_b;
				goto finished;
			}
		l_get_res_x_c:
			if (isSchedulable_get_residual_calc()) {
2001b770:	b9f4f26c 	brlid	r15, -3476	// 2001a9dc <isSchedulable_get_residual_calc>
2001b774:	80000000 	or	r0, r0, r0
2001b778:	bc030038 	beqi	r3, 56		// 2001b7b0
				int stop = 0;
2001b77c:	f8130064 	swi	r0, r19, 100
				if (stop != 0) {
2001b780:	e8730064 	lwi	r3, r19, 100
2001b784:	bc030014 	beqi	r3, 20		// 2001b798
					_FSM_state = my_state_get_res_x_c;
2001b788:	30600011 	addik	r3, r0, 17
2001b78c:	b0002006 	imm	8198
2001b790:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b794:	b80006b0 	bri	1712		// 2001be44
				}
				get_residual_calc();
2001b798:	b9f4f270 	brlid	r15, -3472	// 2001aa08 <get_residual_calc>
2001b79c:	80000000 	or	r0, r0, r0
				i++;
2001b7a0:	e873001c 	lwi	r3, r19, 28
2001b7a4:	30630001 	addik	r3, r3, 1
2001b7a8:	f873001c 	swi	r3, r19, 28
				goto l_get_res_x_d;
2001b7ac:	b8000018 	bri	24		// 2001b7c4
			} else {
				_FSM_state = my_state_get_res_x_c;
2001b7b0:	30600011 	addik	r3, r0, 17
2001b7b4:	b0002006 	imm	8198
2001b7b8:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b7bc:	b8000688 	bri	1672		// 2001be44
		case my_state_get_res_x_b:
			goto l_get_res_x_b;
		case my_state_get_res_x_c:
			goto l_get_res_x_c;
		case my_state_get_res_x_d:
			goto l_get_res_x_d;
2001b7c0:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_x_c;
				goto finished;
			}
		l_get_res_x_d:
			if (isSchedulable_get_residual_clip()) {
2001b7c4:	b9f4f2cc 	brlid	r15, -3380	// 2001aa90 <isSchedulable_get_residual_clip>
2001b7c8:	80000000 	or	r0, r0, r0
2001b7cc:	bc030038 	beqi	r3, 56		// 2001b804
				int stop = 0;
2001b7d0:	f8130068 	swi	r0, r19, 104
				if (stop != 0) {
2001b7d4:	e8730068 	lwi	r3, r19, 104
2001b7d8:	bc030014 	beqi	r3, 20		// 2001b7ec
					_FSM_state = my_state_get_res_x_d;
2001b7dc:	30600012 	addik	r3, r0, 18
2001b7e0:	b0002006 	imm	8198
2001b7e4:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b7e8:	b800065c 	bri	1628		// 2001be44
				}
				get_residual_clip();
2001b7ec:	b9f4f2d0 	brlid	r15, -3376	// 2001aabc <get_residual_clip>
2001b7f0:	80000000 	or	r0, r0, r0
				i++;
2001b7f4:	e873001c 	lwi	r3, r19, 28
2001b7f8:	30630001 	addik	r3, r3, 1
2001b7fc:	f873001c 	swi	r3, r19, 28
				goto l_get_res_x_e;
2001b800:	b8000018 	bri	24		// 2001b818
			} else {
				_FSM_state = my_state_get_res_x_d;
2001b804:	30600012 	addik	r3, r0, 18
2001b808:	b0002006 	imm	8198
2001b80c:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b810:	b8000634 	bri	1588		// 2001be44
		case my_state_get_res_x_c:
			goto l_get_res_x_c;
		case my_state_get_res_x_d:
			goto l_get_res_x_d;
		case my_state_get_res_x_e:
			goto l_get_res_x_e;
2001b814:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_x_d;
				goto finished;
			}
		l_get_res_x_e:
			if (isSchedulable_get_residual_final()) {
2001b818:	b9f4f300 	brlid	r15, -3328	// 2001ab18 <isSchedulable_get_residual_final>
2001b81c:	80000000 	or	r0, r0, r0
2001b820:	bc030038 	beqi	r3, 56		// 2001b858
				int stop = 0;
2001b824:	f813006c 	swi	r0, r19, 108
				if (stop != 0) {
2001b828:	e873006c 	lwi	r3, r19, 108
2001b82c:	bc030014 	beqi	r3, 20		// 2001b840
					_FSM_state = my_state_get_res_x_e;
2001b830:	30600013 	addik	r3, r0, 19
2001b834:	b0002006 	imm	8198
2001b838:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b83c:	b8000608 	bri	1544		// 2001be44
				}
				get_residual_final();
2001b840:	b9f4f304 	brlid	r15, -3324	// 2001ab44 <get_residual_final>
2001b844:	80000000 	or	r0, r0, r0
				i++;
2001b848:	e873001c 	lwi	r3, r19, 28
2001b84c:	30630001 	addik	r3, r3, 1
2001b850:	f873001c 	swi	r3, r19, 28
				goto l_get_pred_y;
2001b854:	b800fd0c 	bri	-756		// 2001b560
			} else {
				_FSM_state = my_state_get_res_x_e;
2001b858:	30600013 	addik	r3, r0, 19
2001b85c:	b0002006 	imm	8198
2001b860:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b864:	b80005e0 	bri	1504		// 2001be44
		case my_state_get_res_x_d:
			goto l_get_res_x_d;
		case my_state_get_res_x_e:
			goto l_get_res_x_e;
		case my_state_get_res_y:
			goto l_get_res_y;
2001b868:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_x_e;
				goto finished;
			}
		l_get_res_y:
			if (isSchedulable_get_residual_init()) {
2001b86c:	b9f4ef38 	brlid	r15, -4296	// 2001a7a4 <isSchedulable_get_residual_init>
2001b870:	80000000 	or	r0, r0, r0
2001b874:	bc030038 	beqi	r3, 56		// 2001b8ac
				int stop = 0;
2001b878:	f8130084 	swi	r0, r19, 132
				if (stop != 0) {
2001b87c:	e8730084 	lwi	r3, r19, 132
2001b880:	bc030014 	beqi	r3, 20		// 2001b894
					_FSM_state = my_state_get_res_y;
2001b884:	30600014 	addik	r3, r0, 20
2001b888:	b0002006 	imm	8198
2001b88c:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b890:	b80005b4 	bri	1460		// 2001be44
				}
				get_residual_init();
2001b894:	b9f4ef3c 	brlid	r15, -4292	// 2001a7d0 <get_residual_init>
2001b898:	80000000 	or	r0, r0, r0
				i++;
2001b89c:	e873001c 	lwi	r3, r19, 28
2001b8a0:	30630001 	addik	r3, r3, 1
2001b8a4:	f873001c 	swi	r3, r19, 28
				goto l_get_res_y_a;
2001b8a8:	b8000018 	bri	24		// 2001b8c0
			} else {
				_FSM_state = my_state_get_res_y;
2001b8ac:	30600014 	addik	r3, r0, 20
2001b8b0:	b0002006 	imm	8198
2001b8b4:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b8b8:	b800058c 	bri	1420		// 2001be44
		case my_state_get_res_x_e:
			goto l_get_res_x_e;
		case my_state_get_res_y:
			goto l_get_res_y;
		case my_state_get_res_y_a:
			goto l_get_res_y_a;
2001b8bc:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_y;
				goto finished;
			}
		l_get_res_y_a:
			if (isSchedulable_get_residual_shift()) {
2001b8c0:	b9f4ef94 	brlid	r15, -4204	// 2001a854 <isSchedulable_get_residual_shift>
2001b8c4:	80000000 	or	r0, r0, r0
2001b8c8:	bc030038 	beqi	r3, 56		// 2001b900
				int stop = 0;
2001b8cc:	f8130088 	swi	r0, r19, 136
				if (stop != 0) {
2001b8d0:	e8730088 	lwi	r3, r19, 136
2001b8d4:	bc030014 	beqi	r3, 20		// 2001b8e8
					_FSM_state = my_state_get_res_y_a;
2001b8d8:	30600015 	addik	r3, r0, 21
2001b8dc:	b0002006 	imm	8198
2001b8e0:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b8e4:	b8000560 	bri	1376		// 2001be44
				}
				get_residual_shift();
2001b8e8:	b9f4ef98 	brlid	r15, -4200	// 2001a880 <get_residual_shift>
2001b8ec:	80000000 	or	r0, r0, r0
				i++;
2001b8f0:	e873001c 	lwi	r3, r19, 28
2001b8f4:	30630001 	addik	r3, r3, 1
2001b8f8:	f873001c 	swi	r3, r19, 28
				goto l_get_res_y_b;
2001b8fc:	b8000018 	bri	24		// 2001b914
			} else {
				_FSM_state = my_state_get_res_y_a;
2001b900:	30600015 	addik	r3, r0, 21
2001b904:	b0002006 	imm	8198
2001b908:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b90c:	b8000538 	bri	1336		// 2001be44
		case my_state_get_res_y:
			goto l_get_res_y;
		case my_state_get_res_y_a:
			goto l_get_res_y_a;
		case my_state_get_res_y_b:
			goto l_get_res_y_b;
2001b910:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_y_a;
				goto finished;
			}
		l_get_res_y_b:
			if (numTokens_MVIN - index_MVIN >= 1 && isSchedulable_get_residual_adjust()) {
2001b914:	b0002006 	imm	8198
2001b918:	e8801c68 	lwi	r4, r0, 7272	// 20061c68 <numTokens_MVIN>
2001b91c:	b0002006 	imm	8198
2001b920:	e8601c64 	lwi	r3, r0, 7268	// 20061c64 <index_MVIN>
2001b924:	88641800 	xor	r3, r4, r3
2001b928:	bc030044 	beqi	r3, 68		// 2001b96c
2001b92c:	b9f4efd0 	brlid	r15, -4144	// 2001a8fc <isSchedulable_get_residual_adjust>
2001b930:	80000000 	or	r0, r0, r0
2001b934:	bc030038 	beqi	r3, 56		// 2001b96c
				int stop = 0;
2001b938:	f813008c 	swi	r0, r19, 140
				if (stop != 0) {
2001b93c:	e873008c 	lwi	r3, r19, 140
2001b940:	bc030014 	beqi	r3, 20		// 2001b954
					_FSM_state = my_state_get_res_y_b;
2001b944:	30600016 	addik	r3, r0, 22
2001b948:	b0002006 	imm	8198
2001b94c:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b950:	b80004f4 	bri	1268		// 2001be44
				}
				get_residual_adjust();
2001b954:	b9f4efd4 	brlid	r15, -4140	// 2001a928 <get_residual_adjust>
2001b958:	80000000 	or	r0, r0, r0
				i++;
2001b95c:	e873001c 	lwi	r3, r19, 28
2001b960:	30630001 	addik	r3, r3, 1
2001b964:	f873001c 	swi	r3, r19, 28
				goto l_get_res_y_c;
2001b968:	b8000018 	bri	24		// 2001b980
			} else {
				_FSM_state = my_state_get_res_y_b;
2001b96c:	30600016 	addik	r3, r0, 22
2001b970:	b0002006 	imm	8198
2001b974:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b978:	b80004cc 	bri	1228		// 2001be44
		case my_state_get_res_y_a:
			goto l_get_res_y_a;
		case my_state_get_res_y_b:
			goto l_get_res_y_b;
		case my_state_get_res_y_c:
			goto l_get_res_y_c;
2001b97c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_y_b;
				goto finished;
			}
		l_get_res_y_c:
			if (isSchedulable_get_residual_calc()) {
2001b980:	b9f4f05c 	brlid	r15, -4004	// 2001a9dc <isSchedulable_get_residual_calc>
2001b984:	80000000 	or	r0, r0, r0
2001b988:	bc030038 	beqi	r3, 56		// 2001b9c0
				int stop = 0;
2001b98c:	f8130090 	swi	r0, r19, 144
				if (stop != 0) {
2001b990:	e8730090 	lwi	r3, r19, 144
2001b994:	bc030014 	beqi	r3, 20		// 2001b9a8
					_FSM_state = my_state_get_res_y_c;
2001b998:	30600017 	addik	r3, r0, 23
2001b99c:	b0002006 	imm	8198
2001b9a0:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b9a4:	b80004a0 	bri	1184		// 2001be44
				}
				get_residual_calc();
2001b9a8:	b9f4f060 	brlid	r15, -4000	// 2001aa08 <get_residual_calc>
2001b9ac:	80000000 	or	r0, r0, r0
				i++;
2001b9b0:	e873001c 	lwi	r3, r19, 28
2001b9b4:	30630001 	addik	r3, r3, 1
2001b9b8:	f873001c 	swi	r3, r19, 28
				goto l_get_res_y_d;
2001b9bc:	b8000018 	bri	24		// 2001b9d4
			} else {
				_FSM_state = my_state_get_res_y_c;
2001b9c0:	30600017 	addik	r3, r0, 23
2001b9c4:	b0002006 	imm	8198
2001b9c8:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001b9cc:	b8000478 	bri	1144		// 2001be44
		case my_state_get_res_y_b:
			goto l_get_res_y_b;
		case my_state_get_res_y_c:
			goto l_get_res_y_c;
		case my_state_get_res_y_d:
			goto l_get_res_y_d;
2001b9d0:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_y_c;
				goto finished;
			}
		l_get_res_y_d:
			if (isSchedulable_get_residual_clip()) {
2001b9d4:	b9f4f0bc 	brlid	r15, -3908	// 2001aa90 <isSchedulable_get_residual_clip>
2001b9d8:	80000000 	or	r0, r0, r0
2001b9dc:	bc030038 	beqi	r3, 56		// 2001ba14
				int stop = 0;
2001b9e0:	f8130094 	swi	r0, r19, 148
				if (stop != 0) {
2001b9e4:	e8730094 	lwi	r3, r19, 148
2001b9e8:	bc030014 	beqi	r3, 20		// 2001b9fc
					_FSM_state = my_state_get_res_y_d;
2001b9ec:	30600018 	addik	r3, r0, 24
2001b9f0:	b0002006 	imm	8198
2001b9f4:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001b9f8:	b800044c 	bri	1100		// 2001be44
				}
				get_residual_clip();
2001b9fc:	b9f4f0c0 	brlid	r15, -3904	// 2001aabc <get_residual_clip>
2001ba00:	80000000 	or	r0, r0, r0
				i++;
2001ba04:	e873001c 	lwi	r3, r19, 28
2001ba08:	30630001 	addik	r3, r3, 1
2001ba0c:	f873001c 	swi	r3, r19, 28
				goto l_get_res_y_e;
2001ba10:	b8000018 	bri	24		// 2001ba28
			} else {
				_FSM_state = my_state_get_res_y_d;
2001ba14:	30600018 	addik	r3, r0, 24
2001ba18:	b0002006 	imm	8198
2001ba1c:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001ba20:	b8000424 	bri	1060		// 2001be44
		case my_state_get_res_y_c:
			goto l_get_res_y_c;
		case my_state_get_res_y_d:
			goto l_get_res_y_d;
		case my_state_get_res_y_e:
			goto l_get_res_y_e;
2001ba24:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_y_d;
				goto finished;
			}
		l_get_res_y_e:
			if (isSchedulable_get_residual_final()) {
2001ba28:	b9f4f0f0 	brlid	r15, -3856	// 2001ab18 <isSchedulable_get_residual_final>
2001ba2c:	80000000 	or	r0, r0, r0
2001ba30:	bc030038 	beqi	r3, 56		// 2001ba68
				int stop = 0;
2001ba34:	f8130098 	swi	r0, r19, 152
				if (stop != 0) {
2001ba38:	e8730098 	lwi	r3, r19, 152
2001ba3c:	bc030014 	beqi	r3, 20		// 2001ba50
					_FSM_state = my_state_get_res_y_e;
2001ba40:	30600019 	addik	r3, r0, 25
2001ba44:	b0002006 	imm	8198
2001ba48:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001ba4c:	b80003f8 	bri	1016		// 2001be44
				}
				get_residual_final();
2001ba50:	b9f4f0f4 	brlid	r15, -3852	// 2001ab44 <get_residual_final>
2001ba54:	80000000 	or	r0, r0, r0
				i++;
2001ba58:	e873001c 	lwi	r3, r19, 28
2001ba5c:	30630001 	addik	r3, r3, 1
2001ba60:	f873001c 	swi	r3, r19, 28
				goto l_write;
2001ba64:	b800020c 	bri	524		// 2001bc70
			} else {
				_FSM_state = my_state_get_res_y_e;
2001ba68:	30600019 	addik	r3, r0, 25
2001ba6c:	b0002006 	imm	8198
2001ba70:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001ba74:	b80003d0 	bri	976		// 2001be44
		case my_state_get_res_y_d:
			goto l_get_res_y_d;
		case my_state_get_res_y_e:
			goto l_get_res_y_e;
		case my_state_geth:
			goto l_geth;
2001ba78:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_y_e;
				goto finished;
			}
		l_geth:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_geth()) {
2001ba7c:	b0002006 	imm	8198
2001ba80:	e8801c60 	lwi	r4, r0, 7264	// 20061c60 <numTokens_BTYPE>
2001ba84:	b0002006 	imm	8198
2001ba88:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
2001ba8c:	88641800 	xor	r3, r4, r3
2001ba90:	bc030044 	beqi	r3, 68		// 2001bad4
2001ba94:	b9f4e4f8 	brlid	r15, -6920	// 20019f8c <isSchedulable_geth>
2001ba98:	80000000 	or	r0, r0, r0
2001ba9c:	bc030038 	beqi	r3, 56		// 2001bad4
				int stop = 0;
2001baa0:	f813009c 	swi	r0, r19, 156
				if (stop != 0) {
2001baa4:	e873009c 	lwi	r3, r19, 156
2001baa8:	bc030014 	beqi	r3, 20		// 2001babc
					_FSM_state = my_state_geth;
2001baac:	3060001a 	addik	r3, r0, 26
2001bab0:	b0002006 	imm	8198
2001bab4:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001bab8:	b800038c 	bri	908		// 2001be44
				}
				geth();
2001babc:	b9f4e4fc 	brlid	r15, -6916	// 20019fb8 <geth>
2001bac0:	80000000 	or	r0, r0, r0
				i++;
2001bac4:	e873001c 	lwi	r3, r19, 28
2001bac8:	30630001 	addik	r3, r3, 1
2001bacc:	f873001c 	swi	r3, r19, 28
				goto l_read;
2001bad0:	b8000084 	bri	132		// 2001bb54
			} else {
				_FSM_state = my_state_geth;
2001bad4:	3060001a 	addik	r3, r0, 26
2001bad8:	b0002006 	imm	8198
2001badc:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001bae0:	b8000364 	bri	868		// 2001be44
		case my_state_get_res_y_e:
			goto l_get_res_y_e;
		case my_state_geth:
			goto l_geth;
		case my_state_getw:
			goto l_getw;
2001bae4:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_geth;
				goto finished;
			}
		l_getw:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_getw()) {
2001bae8:	b0002006 	imm	8198
2001baec:	e8801c60 	lwi	r4, r0, 7264	// 20061c60 <numTokens_BTYPE>
2001baf0:	b0002006 	imm	8198
2001baf4:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
2001baf8:	88641800 	xor	r3, r4, r3
2001bafc:	bc030044 	beqi	r3, 68		// 2001bb40
2001bb00:	b9f4e3c8 	brlid	r15, -7224	// 20019ec8 <isSchedulable_getw>
2001bb04:	80000000 	or	r0, r0, r0
2001bb08:	bc030038 	beqi	r3, 56		// 2001bb40
				int stop = 0;
2001bb0c:	f81300ac 	swi	r0, r19, 172
				if (stop != 0) {
2001bb10:	e87300ac 	lwi	r3, r19, 172
2001bb14:	bc030014 	beqi	r3, 20		// 2001bb28
					_FSM_state = my_state_getw;
2001bb18:	3060001b 	addik	r3, r0, 27
2001bb1c:	b0002006 	imm	8198
2001bb20:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001bb24:	b8000320 	bri	800		// 2001be44
				}
				getw_replaced();
2001bb28:	b9f4e3cc 	brlid	r15, -7220	// 20019ef4 <getw_replaced>
2001bb2c:	80000000 	or	r0, r0, r0
				i++;
2001bb30:	e873001c 	lwi	r3, r19, 28
2001bb34:	30630001 	addik	r3, r3, 1
2001bb38:	f873001c 	swi	r3, r19, 28
				goto l_geth;
2001bb3c:	b800ff40 	bri	-192		// 2001ba7c
			} else {
				_FSM_state = my_state_getw;
2001bb40:	3060001b 	addik	r3, r0, 27
2001bb44:	b0002006 	imm	8198
2001bb48:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001bb4c:	b80002f8 	bri	760		// 2001be44
		case my_state_geth:
			goto l_geth;
		case my_state_getw:
			goto l_getw;
		case my_state_read:
			goto l_read;
2001bb50:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_getw;
				goto finished;
			}
		l_read:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_start()) {
2001bb54:	b0002006 	imm	8198
2001bb58:	e8801c60 	lwi	r4, r0, 7264	// 20061c60 <numTokens_BTYPE>
2001bb5c:	b0002006 	imm	8198
2001bb60:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
2001bb64:	88641800 	xor	r3, r4, r3
2001bb68:	bc030044 	beqi	r3, 68		// 2001bbac
2001bb6c:	b9f4e150 	brlid	r15, -7856	// 20019cbc <isSchedulable_start>
2001bb70:	80000000 	or	r0, r0, r0
2001bb74:	bc030038 	beqi	r3, 56		// 2001bbac
				int stop = 0;
2001bb78:	f81300a0 	swi	r0, r19, 160
				if (stop != 0) {
2001bb7c:	e87300a0 	lwi	r3, r19, 160
2001bb80:	bc030014 	beqi	r3, 20		// 2001bb94
					_FSM_state = my_state_read;
2001bb84:	3060001c 	addik	r3, r0, 28
2001bb88:	b0002006 	imm	8198
2001bb8c:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001bb90:	b80002b4 	bri	692		// 2001be44
				}
				start();
2001bb94:	b9f4e19c 	brlid	r15, -7780	// 20019d30 <start>
2001bb98:	80000000 	or	r0, r0, r0
				i++;
2001bb9c:	e873001c 	lwi	r3, r19, 28
2001bba0:	30630001 	addik	r3, r3, 1
2001bba4:	f873001c 	swi	r3, r19, 28
				goto l_getw;
2001bba8:	b800ff40 	bri	-192		// 2001bae8
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_read_noMotion()) {
2001bbac:	b0002006 	imm	8198
2001bbb0:	e8801c60 	lwi	r4, r0, 7264	// 20061c60 <numTokens_BTYPE>
2001bbb4:	b0002006 	imm	8198
2001bbb8:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
2001bbbc:	88641800 	xor	r3, r4, r3
2001bbc0:	bc030044 	beqi	r3, 68		// 2001bc04
2001bbc4:	b9f4e470 	brlid	r15, -7056	// 2001a034 <isSchedulable_read_noMotion>
2001bbc8:	80000000 	or	r0, r0, r0
2001bbcc:	bc030038 	beqi	r3, 56		// 2001bc04
				int stop = 0;
2001bbd0:	f81300a4 	swi	r0, r19, 164
				if (stop != 0) {
2001bbd4:	e87300a4 	lwi	r3, r19, 164
2001bbd8:	bc030014 	beqi	r3, 20		// 2001bbec
					_FSM_state = my_state_read;
2001bbdc:	3060001c 	addik	r3, r0, 28
2001bbe0:	b0002006 	imm	8198
2001bbe4:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001bbe8:	b800025c 	bri	604		// 2001be44
				}
				read_noMotion();
2001bbec:	b9f4e4f8 	brlid	r15, -6920	// 2001a0e4 <read_noMotion>
2001bbf0:	80000000 	or	r0, r0, r0
				i++;
2001bbf4:	e873001c 	lwi	r3, r19, 28
2001bbf8:	30630001 	addik	r3, r3, 1
2001bbfc:	f873001c 	swi	r3, r19, 28
				goto l_advance;
2001bc00:	b800f514 	bri	-2796		// 2001b114
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_read_motion()) {
2001bc04:	b0002006 	imm	8198
2001bc08:	e8801c60 	lwi	r4, r0, 7264	// 20061c60 <numTokens_BTYPE>
2001bc0c:	b0002006 	imm	8198
2001bc10:	e8601c5c 	lwi	r3, r0, 7260	// 20061c5c <index_BTYPE>
2001bc14:	88641800 	xor	r3, r4, r3
2001bc18:	bc030044 	beqi	r3, 68		// 2001bc5c
2001bc1c:	b9f4e5d8 	brlid	r15, -6696	// 2001a1f4 <isSchedulable_read_motion>
2001bc20:	80000000 	or	r0, r0, r0
2001bc24:	bc030038 	beqi	r3, 56		// 2001bc5c
				int stop = 0;
2001bc28:	f81300a8 	swi	r0, r19, 168
				if (stop != 0) {
2001bc2c:	e87300a8 	lwi	r3, r19, 168
2001bc30:	bc030014 	beqi	r3, 20		// 2001bc44
					_FSM_state = my_state_read;
2001bc34:	3060001c 	addik	r3, r0, 28
2001bc38:	b0002006 	imm	8198
2001bc3c:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001bc40:	b8000204 	bri	516		// 2001be44
				}
				read_motion();
2001bc44:	b9f4e660 	brlid	r15, -6560	// 2001a2a4 <read_motion>
2001bc48:	80000000 	or	r0, r0, r0
				i++;
2001bc4c:	e873001c 	lwi	r3, r19, 28
2001bc50:	30630001 	addik	r3, r3, 1
2001bc54:	f873001c 	swi	r3, r19, 28
				goto l_compute;
2001bc58:	b800f508 	bri	-2808		// 2001b160
			} else {
				_FSM_state = my_state_read;
2001bc5c:	3060001c 	addik	r3, r0, 28
2001bc60:	b0002006 	imm	8198
2001bc64:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001bc68:	b80001dc 	bri	476		// 2001be44
		case my_state_getw:
			goto l_getw;
		case my_state_read:
			goto l_read;
		case my_state_write:
			goto l_write;
2001bc6c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read;
				goto finished;
			}
		l_write:
			if (isSchedulable_write_luma()) {
2001bc70:	b9f4ef84 	brlid	r15, -4220	// 2001abf4 <isSchedulable_write_luma>
2001bc74:	80000000 	or	r0, r0, r0
2001bc78:	bc030064 	beqi	r3, 100		// 2001bcdc
				int stop = 0;
2001bc7c:	f8130020 	swi	r0, r19, 32
				if (1 > SIZE_MV - index_MV + decoder_parser_mvrecon_MV->read_inds[0]) {
2001bc80:	b0002004 	imm	8196
2001bc84:	e8606bc0 	lwi	r3, r0, 27584	// 20046bc0 <decoder_parser_mvrecon_MV>
2001bc88:	e863000c 	lwi	r3, r3, 12
2001bc8c:	e8830000 	lwi	r4, r3, 0
2001bc90:	b0002006 	imm	8198
2001bc94:	e8601c74 	lwi	r3, r0, 7284	// 20061c74 <index_MV>
2001bc98:	14632000 	rsubk	r3, r3, r4
2001bc9c:	a863fe00 	xori	r3, r3, -512
2001bca0:	bc23000c 	bnei	r3, 12		// 2001bcac
					stop = 1;
2001bca4:	30600001 	addik	r3, r0, 1
2001bca8:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
2001bcac:	e8730020 	lwi	r3, r19, 32
2001bcb0:	bc030014 	beqi	r3, 20		// 2001bcc4
					_FSM_state = my_state_write;
2001bcb4:	3060001d 	addik	r3, r0, 29
2001bcb8:	b0002006 	imm	8198
2001bcbc:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001bcc0:	b8000184 	bri	388		// 2001be44
				}
				write_luma();
2001bcc4:	b9f4ef84 	brlid	r15, -4220	// 2001ac48 <write_luma>
2001bcc8:	80000000 	or	r0, r0, r0
				i++;
2001bccc:	e873001c 	lwi	r3, r19, 28
2001bcd0:	30630001 	addik	r3, r3, 1
2001bcd4:	f873001c 	swi	r3, r19, 28
				goto l_write_y;
2001bcd8:	b8000084 	bri	132		// 2001bd5c
			} else if (isSchedulable_write_chroma()) {
2001bcdc:	b9f4f0d4 	brlid	r15, -3884	// 2001adb0 <isSchedulable_write_chroma>
2001bce0:	80000000 	or	r0, r0, r0
2001bce4:	bc030064 	beqi	r3, 100		// 2001bd48
				int stop = 0;
2001bce8:	f8130024 	swi	r0, r19, 36
				if (1 > SIZE_MV - index_MV + decoder_parser_mvrecon_MV->read_inds[0]) {
2001bcec:	b0002004 	imm	8196
2001bcf0:	e8606bc0 	lwi	r3, r0, 27584	// 20046bc0 <decoder_parser_mvrecon_MV>
2001bcf4:	e863000c 	lwi	r3, r3, 12
2001bcf8:	e8830000 	lwi	r4, r3, 0
2001bcfc:	b0002006 	imm	8198
2001bd00:	e8601c74 	lwi	r3, r0, 7284	// 20061c74 <index_MV>
2001bd04:	14632000 	rsubk	r3, r3, r4
2001bd08:	a863fe00 	xori	r3, r3, -512
2001bd0c:	bc23000c 	bnei	r3, 12		// 2001bd18
					stop = 1;
2001bd10:	30600001 	addik	r3, r0, 1
2001bd14:	f8730024 	swi	r3, r19, 36
				}
				if (stop != 0) {
2001bd18:	e8730024 	lwi	r3, r19, 36
2001bd1c:	bc030014 	beqi	r3, 20		// 2001bd30
					_FSM_state = my_state_write;
2001bd20:	3060001d 	addik	r3, r0, 29
2001bd24:	b0002006 	imm	8198
2001bd28:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001bd2c:	b8000118 	bri	280		// 2001be44
				}
				write_chroma();
2001bd30:	b9f4f0ac 	brlid	r15, -3924	// 2001addc <write_chroma>
2001bd34:	80000000 	or	r0, r0, r0
				i++;
2001bd38:	e873001c 	lwi	r3, r19, 28
2001bd3c:	30630001 	addik	r3, r3, 1
2001bd40:	f873001c 	swi	r3, r19, 28
				goto l_write_y;
2001bd44:	b8000018 	bri	24		// 2001bd5c
			} else {
				_FSM_state = my_state_write;
2001bd48:	3060001d 	addik	r3, r0, 29
2001bd4c:	b0002006 	imm	8198
2001bd50:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001bd54:	b80000f0 	bri	240		// 2001be44
		case my_state_read:
			goto l_read;
		case my_state_write:
			goto l_write;
		case my_state_write_y:
			goto l_write_y;
2001bd58:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_write;
				goto finished;
			}
		l_write_y:
			if (isSchedulable_write_luma()) {
2001bd5c:	b9f4ee98 	brlid	r15, -4456	// 2001abf4 <isSchedulable_write_luma>
2001bd60:	80000000 	or	r0, r0, r0
2001bd64:	bc030064 	beqi	r3, 100		// 2001bdc8
				int stop = 0;
2001bd68:	f8130028 	swi	r0, r19, 40
				if (1 > SIZE_MV - index_MV + decoder_parser_mvrecon_MV->read_inds[0]) {
2001bd6c:	b0002004 	imm	8196
2001bd70:	e8606bc0 	lwi	r3, r0, 27584	// 20046bc0 <decoder_parser_mvrecon_MV>
2001bd74:	e863000c 	lwi	r3, r3, 12
2001bd78:	e8830000 	lwi	r4, r3, 0
2001bd7c:	b0002006 	imm	8198
2001bd80:	e8601c74 	lwi	r3, r0, 7284	// 20061c74 <index_MV>
2001bd84:	14632000 	rsubk	r3, r3, r4
2001bd88:	a863fe00 	xori	r3, r3, -512
2001bd8c:	bc23000c 	bnei	r3, 12		// 2001bd98
					stop = 1;
2001bd90:	30600001 	addik	r3, r0, 1
2001bd94:	f8730028 	swi	r3, r19, 40
				}
				if (stop != 0) {
2001bd98:	e8730028 	lwi	r3, r19, 40
2001bd9c:	bc030014 	beqi	r3, 20		// 2001bdb0
					_FSM_state = my_state_write_y;
2001bda0:	3060001e 	addik	r3, r0, 30
2001bda4:	b0002006 	imm	8198
2001bda8:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001bdac:	b8000098 	bri	152		// 2001be44
				}
				write_luma();
2001bdb0:	b9f4ee98 	brlid	r15, -4456	// 2001ac48 <write_luma>
2001bdb4:	80000000 	or	r0, r0, r0
				i++;
2001bdb8:	e873001c 	lwi	r3, r19, 28
2001bdbc:	30630001 	addik	r3, r3, 1
2001bdc0:	f873001c 	swi	r3, r19, 28
				goto l_advance;
2001bdc4:	b800f350 	bri	-3248		// 2001b114
			} else if (isSchedulable_write_chroma()) {
2001bdc8:	b9f4efe8 	brlid	r15, -4120	// 2001adb0 <isSchedulable_write_chroma>
2001bdcc:	80000000 	or	r0, r0, r0
2001bdd0:	bc030064 	beqi	r3, 100		// 2001be34
				int stop = 0;
2001bdd4:	f813002c 	swi	r0, r19, 44
				if (1 > SIZE_MV - index_MV + decoder_parser_mvrecon_MV->read_inds[0]) {
2001bdd8:	b0002004 	imm	8196
2001bddc:	e8606bc0 	lwi	r3, r0, 27584	// 20046bc0 <decoder_parser_mvrecon_MV>
2001bde0:	e863000c 	lwi	r3, r3, 12
2001bde4:	e8830000 	lwi	r4, r3, 0
2001bde8:	b0002006 	imm	8198
2001bdec:	e8601c74 	lwi	r3, r0, 7284	// 20061c74 <index_MV>
2001bdf0:	14632000 	rsubk	r3, r3, r4
2001bdf4:	a863fe00 	xori	r3, r3, -512
2001bdf8:	bc23000c 	bnei	r3, 12		// 2001be04
					stop = 1;
2001bdfc:	30600001 	addik	r3, r0, 1
2001be00:	f873002c 	swi	r3, r19, 44
				}
				if (stop != 0) {
2001be04:	e873002c 	lwi	r3, r19, 44
2001be08:	bc030014 	beqi	r3, 20		// 2001be1c
					_FSM_state = my_state_write_y;
2001be0c:	3060001e 	addik	r3, r0, 30
2001be10:	b0002006 	imm	8198
2001be14:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
					goto finished;
2001be18:	b800002c 	bri	44		// 2001be44
				}
				write_chroma();
2001be1c:	b9f4efc0 	brlid	r15, -4160	// 2001addc <write_chroma>
2001be20:	80000000 	or	r0, r0, r0
				i++;
2001be24:	e873001c 	lwi	r3, r19, 28
2001be28:	30630001 	addik	r3, r3, 1
2001be2c:	f873001c 	swi	r3, r19, 28
				goto l_advance;
2001be30:	b800f2e4 	bri	-3356		// 2001b114
			} else {
				_FSM_state = my_state_write_y;
2001be34:	3060001e 	addik	r3, r0, 30
2001be38:	b0002006 	imm	8198
2001be3c:	f8601db0 	swi	r3, r0, 7600	// 20061db0 <_FSM_state>
				goto finished;
2001be40:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_BTYPE();
2001be44:	b9f4d87c 	brlid	r15, -10116	// 200196c0 <read_end_BTYPE>
2001be48:	80000000 	or	r0, r0, r0
		read_end_MVIN();
2001be4c:	b9f4d920 	brlid	r15, -9952	// 2001976c <read_end_MVIN>
2001be50:	80000000 	or	r0, r0, r0
		read_end_A();
2001be54:	b9f4d9c0 	brlid	r15, -9792	// 20019814 <read_end_A>
2001be58:	80000000 	or	r0, r0, r0
		
		write_end_MV();
2001be5c:	b9f4da60 	brlid	r15, -9632	// 200198bc <write_end_MV>
2001be60:	80000000 	or	r0, r0, r0
		
		
		return i;
2001be64:	e873001c 	lwi	r3, r19, 28
	}
2001be68:	e9e10000 	lwi	r15, r1, 0
2001be6c:	10330000 	addk	r1, r19, r0
2001be70:	ea6100b0 	lwi	r19, r1, 176
2001be74:	302100b4 	addik	r1, r1, 180
2001be78:	b60f0008 	rtsd	r15, 8
2001be7c:	80000000 	or	r0, r0, r0

2001be80 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001be80:	3021fff8 	addik	r1, r1, -8
2001be84:	fa610004 	swi	r19, r1, 4
2001be88:	12610000 	addk	r19, r1, r0
2001be8c:	f8b3000c 	swi	r5, r19, 12
2001be90:	f8d30010 	swi	r6, r19, 16
2001be94:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001be98:	e873000c 	lwi	r3, r19, 12
2001be9c:	e8630010 	lwi	r3, r3, 16
2001bea0:	e8830000 	lwi	r4, r3, 0
2001bea4:	e873000c 	lwi	r3, r19, 12
2001bea8:	e8a3000c 	lwi	r5, r3, 12
2001beac:	e8730010 	lwi	r3, r19, 16
2001beb0:	64630402 	bslli	r3, r3, 2
2001beb4:	10651800 	addk	r3, r5, r3
2001beb8:	e8630000 	lwi	r3, r3, 0
2001bebc:	14a32000 	rsubk	r5, r3, r4
2001bec0:	30600001 	addik	r3, r0, 1
2001bec4:	e8930014 	lwi	r4, r19, 20
2001bec8:	16442803 	cmpu	r18, r4, r5
2001becc:	bcb20008 	bgei	r18, 8		// 2001bed4
2001bed0:	10600000 	addk	r3, r0, r0
2001bed4:	a46300ff 	andi	r3, r3, 255
}
2001bed8:	10330000 	addk	r1, r19, r0
2001bedc:	ea610004 	lwi	r19, r1, 4
2001bee0:	30210008 	addik	r1, r1, 8
2001bee4:	b60f0008 	rtsd	r15, 8
2001bee8:	80000000 	or	r0, r0, r0

2001beec <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001beec:	3021fff8 	addik	r1, r1, -8
2001bef0:	fa610004 	swi	r19, r1, 4
2001bef4:	12610000 	addk	r19, r1, r0
2001bef8:	f8b3000c 	swi	r5, r19, 12
2001befc:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001bf00:	e873000c 	lwi	r3, r19, 12
2001bf04:	e8630010 	lwi	r3, r3, 16
2001bf08:	e8830000 	lwi	r4, r3, 0
2001bf0c:	e873000c 	lwi	r3, r19, 12
2001bf10:	e8a3000c 	lwi	r5, r3, 12
2001bf14:	e8730010 	lwi	r3, r19, 16
2001bf18:	64630402 	bslli	r3, r3, 2
2001bf1c:	10651800 	addk	r3, r5, r3
2001bf20:	e8630000 	lwi	r3, r3, 0
2001bf24:	14632000 	rsubk	r3, r3, r4
}
2001bf28:	10330000 	addk	r1, r19, r0
2001bf2c:	ea610004 	lwi	r19, r1, 4
2001bf30:	30210008 	addik	r1, r1, 8
2001bf34:	b60f0008 	rtsd	r15, 8
2001bf38:	80000000 	or	r0, r0, r0

2001bf3c <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2001bf3c:	3021fff4 	addik	r1, r1, -12
2001bf40:	fa610008 	swi	r19, r1, 8
2001bf44:	12610000 	addk	r19, r1, r0
2001bf48:	f8b30010 	swi	r5, r19, 16
2001bf4c:	f8d30014 	swi	r6, r19, 20
2001bf50:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001bf54:	f8130004 	swi	r0, r19, 4
2001bf58:	b800005c 	bri	92		// 2001bfb4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001bf5c:	e8730010 	lwi	r3, r19, 16
2001bf60:	e8830000 	lwi	r4, r3, 0
2001bf64:	e8730010 	lwi	r3, r19, 16
2001bf68:	e8a3000c 	lwi	r5, r3, 12
2001bf6c:	e8730004 	lwi	r3, r19, 4
2001bf70:	64630402 	bslli	r3, r3, 2
2001bf74:	10651800 	addk	r3, r5, r3
2001bf78:	e8a30000 	lwi	r5, r3, 0
2001bf7c:	e8730010 	lwi	r3, r19, 16
2001bf80:	e8630010 	lwi	r3, r3, 16
2001bf84:	e8630000 	lwi	r3, r3, 0
2001bf88:	14632800 	rsubk	r3, r3, r5
2001bf8c:	10641800 	addk	r3, r4, r3
2001bf90:	30830001 	addik	r4, r3, 1
2001bf94:	e8730018 	lwi	r3, r19, 24
2001bf98:	16441803 	cmpu	r18, r4, r3
2001bf9c:	bc52000c 	blti	r18, 12		// 2001bfa8
            return 0;
2001bfa0:	10600000 	addk	r3, r0, r0
2001bfa4:	b8000024 	bri	36		// 2001bfc8
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001bfa8:	e8730004 	lwi	r3, r19, 4
2001bfac:	30630001 	addik	r3, r3, 1
2001bfb0:	f8730004 	swi	r3, r19, 4
2001bfb4:	e8930004 	lwi	r4, r19, 4
2001bfb8:	e8730014 	lwi	r3, r19, 20
2001bfbc:	16432003 	cmpu	r18, r3, r4
2001bfc0:	bc52ff9c 	blti	r18, -100		// 2001bf5c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001bfc4:	30600001 	addik	r3, r0, 1
}
2001bfc8:	10330000 	addk	r1, r19, r0
2001bfcc:	ea610008 	lwi	r19, r1, 8
2001bfd0:	3021000c 	addik	r1, r1, 12
2001bfd4:	b60f0008 	rtsd	r15, 8
2001bfd8:	80000000 	or	r0, r0, r0

2001bfdc <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001bfdc:	3021ffec 	addik	r1, r1, -20
2001bfe0:	fa610010 	swi	r19, r1, 16
2001bfe4:	12610000 	addk	r19, r1, r0
2001bfe8:	f8b30018 	swi	r5, r19, 24
2001bfec:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001bff0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001bff4:	f8130004 	swi	r0, r19, 4
2001bff8:	b8000054 	bri	84		// 2001c04c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001bffc:	e8730018 	lwi	r3, r19, 24
2001c000:	e8630010 	lwi	r3, r3, 16
2001c004:	e8830000 	lwi	r4, r3, 0
2001c008:	e8730018 	lwi	r3, r19, 24
2001c00c:	e8a3000c 	lwi	r5, r3, 12
2001c010:	e8730004 	lwi	r3, r19, 4
2001c014:	64630402 	bslli	r3, r3, 2
2001c018:	10651800 	addk	r3, r5, r3
2001c01c:	e8630000 	lwi	r3, r3, 0
2001c020:	14632000 	rsubk	r3, r3, r4
2001c024:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001c028:	e8930008 	lwi	r4, r19, 8
2001c02c:	e873000c 	lwi	r3, r19, 12
2001c030:	16441803 	cmpu	r18, r4, r3
2001c034:	bcb20008 	bgei	r18, 8		// 2001c03c
2001c038:	10640000 	addk	r3, r4, r0
2001c03c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001c040:	e8730004 	lwi	r3, r19, 4
2001c044:	30630001 	addik	r3, r3, 1
2001c048:	f8730004 	swi	r3, r19, 4
2001c04c:	e8930004 	lwi	r4, r19, 4
2001c050:	e873001c 	lwi	r3, r19, 28
2001c054:	16432003 	cmpu	r18, r3, r4
2001c058:	bc52ffa4 	blti	r18, -92		// 2001bffc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001c05c:	e8730018 	lwi	r3, r19, 24
2001c060:	e8830000 	lwi	r4, r3, 0
2001c064:	e8730008 	lwi	r3, r19, 8
2001c068:	14632000 	rsubk	r3, r3, r4
}
2001c06c:	10330000 	addk	r1, r19, r0
2001c070:	ea610010 	lwi	r19, r1, 16
2001c074:	30210014 	addik	r1, r1, 20
2001c078:	b60f0008 	rtsd	r15, 8
2001c07c:	80000000 	or	r0, r0, r0

2001c080 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001c080:	3021fff4 	addik	r1, r1, -12
2001c084:	fa610008 	swi	r19, r1, 8
2001c088:	12610000 	addk	r19, r1, r0
2001c08c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2001c090:	e8730010 	lwi	r3, r19, 16
2001c094:	e8630010 	lwi	r3, r3, 16
2001c098:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001c09c:	f8130004 	swi	r0, r19, 4
2001c0a0:	b8000028 	bri	40		// 2001c0c8
        fifo->read_inds[i] = 0;
2001c0a4:	e8730010 	lwi	r3, r19, 16
2001c0a8:	e883000c 	lwi	r4, r3, 12
2001c0ac:	e8730004 	lwi	r3, r19, 4
2001c0b0:	64630402 	bslli	r3, r3, 2
2001c0b4:	10641800 	addk	r3, r4, r3
2001c0b8:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001c0bc:	e8730004 	lwi	r3, r19, 4
2001c0c0:	30630001 	addik	r3, r3, 1
2001c0c4:	f8730004 	swi	r3, r19, 4
2001c0c8:	e8730010 	lwi	r3, r19, 16
2001c0cc:	e8830008 	lwi	r4, r3, 8
2001c0d0:	e8730004 	lwi	r3, r19, 4
2001c0d4:	16441803 	cmpu	r18, r4, r3
2001c0d8:	bc52ffcc 	blti	r18, -52		// 2001c0a4
        fifo->read_inds[i] = 0;
    }
}
2001c0dc:	10330000 	addk	r1, r19, r0
2001c0e0:	ea610008 	lwi	r19, r1, 8
2001c0e4:	3021000c 	addik	r1, r1, 12
2001c0e8:	b60f0008 	rtsd	r15, 8
2001c0ec:	80000000 	or	r0, r0, r0

2001c0f0 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001c0f0:	3021fff4 	addik	r1, r1, -12
2001c0f4:	fa610008 	swi	r19, r1, 8
2001c0f8:	12610000 	addk	r19, r1, r0
2001c0fc:	f8b30010 	swi	r5, r19, 16
2001c100:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001c104:	e8730010 	lwi	r3, r19, 16
2001c108:	e8830004 	lwi	r4, r3, 4
2001c10c:	e8730010 	lwi	r3, r19, 16
2001c110:	e8a3000c 	lwi	r5, r3, 12
2001c114:	e8730014 	lwi	r3, r19, 20
2001c118:	64630402 	bslli	r3, r3, 2
2001c11c:	10651800 	addk	r3, r5, r3
2001c120:	e8a30000 	lwi	r5, r3, 0
2001c124:	e8730010 	lwi	r3, r19, 16
2001c128:	e8630000 	lwi	r3, r3, 0
2001c12c:	3063ffff 	addik	r3, r3, -1
2001c130:	84651800 	and	r3, r5, r3
2001c134:	10641800 	addk	r3, r4, r3
2001c138:	e0630000 	lbui	r3, r3, 0
2001c13c:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2001c140:	e8730010 	lwi	r3, r19, 16
2001c144:	e883000c 	lwi	r4, r3, 12
2001c148:	e8730014 	lwi	r3, r19, 20
2001c14c:	64630402 	bslli	r3, r3, 2
2001c150:	10641800 	addk	r3, r4, r3
2001c154:	e8830000 	lwi	r4, r3, 0
2001c158:	30840001 	addik	r4, r4, 1
2001c15c:	f8830000 	swi	r4, r3, 0
    return value;
2001c160:	e0730004 	lbui	r3, r19, 4
2001c164:	90630060 	sext8	r3, r3
}
2001c168:	10330000 	addk	r1, r19, r0
2001c16c:	ea610008 	lwi	r19, r1, 8
2001c170:	3021000c 	addik	r1, r1, 12
2001c174:	b60f0008 	rtsd	r15, 8
2001c178:	80000000 	or	r0, r0, r0

2001c17c <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001c17c:	3021fff8 	addik	r1, r1, -8
2001c180:	fa610004 	swi	r19, r1, 4
2001c184:	12610000 	addk	r19, r1, r0
2001c188:	f8b3000c 	swi	r5, r19, 12
2001c18c:	10660000 	addk	r3, r6, r0
2001c190:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001c194:	e873000c 	lwi	r3, r19, 12
2001c198:	e8830004 	lwi	r4, r3, 4
2001c19c:	e873000c 	lwi	r3, r19, 12
2001c1a0:	e8630010 	lwi	r3, r3, 16
2001c1a4:	e8a30000 	lwi	r5, r3, 0
2001c1a8:	e873000c 	lwi	r3, r19, 12
2001c1ac:	e8630000 	lwi	r3, r3, 0
2001c1b0:	3063ffff 	addik	r3, r3, -1
2001c1b4:	84651800 	and	r3, r5, r3
2001c1b8:	10641800 	addk	r3, r4, r3
2001c1bc:	e0930010 	lbui	r4, r19, 16
2001c1c0:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2001c1c4:	e873000c 	lwi	r3, r19, 12
2001c1c8:	e8630010 	lwi	r3, r3, 16
2001c1cc:	e8830000 	lwi	r4, r3, 0
2001c1d0:	30840001 	addik	r4, r4, 1
2001c1d4:	f8830000 	swi	r4, r3, 0
}
2001c1d8:	10330000 	addk	r1, r19, r0
2001c1dc:	ea610004 	lwi	r19, r1, 4
2001c1e0:	30210008 	addik	r1, r1, 8
2001c1e4:	b60f0008 	rtsd	r15, 8
2001c1e8:	80000000 	or	r0, r0, r0

2001c1ec <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001c1ec:	3021fff8 	addik	r1, r1, -8
2001c1f0:	fa610004 	swi	r19, r1, 4
2001c1f4:	12610000 	addk	r19, r1, r0
2001c1f8:	f8b3000c 	swi	r5, r19, 12
2001c1fc:	f8d30010 	swi	r6, r19, 16
2001c200:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001c204:	e873000c 	lwi	r3, r19, 12
2001c208:	e8630010 	lwi	r3, r3, 16
2001c20c:	e8830000 	lwi	r4, r3, 0
2001c210:	e873000c 	lwi	r3, r19, 12
2001c214:	e8a3000c 	lwi	r5, r3, 12
2001c218:	e8730010 	lwi	r3, r19, 16
2001c21c:	64630402 	bslli	r3, r3, 2
2001c220:	10651800 	addk	r3, r5, r3
2001c224:	e8630000 	lwi	r3, r3, 0
2001c228:	14a32000 	rsubk	r5, r3, r4
2001c22c:	30600001 	addik	r3, r0, 1
2001c230:	e8930014 	lwi	r4, r19, 20
2001c234:	16442803 	cmpu	r18, r4, r5
2001c238:	bcb20008 	bgei	r18, 8		// 2001c240
2001c23c:	10600000 	addk	r3, r0, r0
2001c240:	a46300ff 	andi	r3, r3, 255
}
2001c244:	10330000 	addk	r1, r19, r0
2001c248:	ea610004 	lwi	r19, r1, 4
2001c24c:	30210008 	addik	r1, r1, 8
2001c250:	b60f0008 	rtsd	r15, 8
2001c254:	80000000 	or	r0, r0, r0

2001c258 <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001c258:	3021fff8 	addik	r1, r1, -8
2001c25c:	fa610004 	swi	r19, r1, 4
2001c260:	12610000 	addk	r19, r1, r0
2001c264:	f8b3000c 	swi	r5, r19, 12
2001c268:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001c26c:	e873000c 	lwi	r3, r19, 12
2001c270:	e8630010 	lwi	r3, r3, 16
2001c274:	e8830000 	lwi	r4, r3, 0
2001c278:	e873000c 	lwi	r3, r19, 12
2001c27c:	e8a3000c 	lwi	r5, r3, 12
2001c280:	e8730010 	lwi	r3, r19, 16
2001c284:	64630402 	bslli	r3, r3, 2
2001c288:	10651800 	addk	r3, r5, r3
2001c28c:	e8630000 	lwi	r3, r3, 0
2001c290:	14632000 	rsubk	r3, r3, r4
}
2001c294:	10330000 	addk	r1, r19, r0
2001c298:	ea610004 	lwi	r19, r1, 4
2001c29c:	30210008 	addik	r1, r1, 8
2001c2a0:	b60f0008 	rtsd	r15, 8
2001c2a4:	80000000 	or	r0, r0, r0

2001c2a8 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2001c2a8:	3021fff4 	addik	r1, r1, -12
2001c2ac:	fa610008 	swi	r19, r1, 8
2001c2b0:	12610000 	addk	r19, r1, r0
2001c2b4:	f8b30010 	swi	r5, r19, 16
2001c2b8:	f8d30014 	swi	r6, r19, 20
2001c2bc:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001c2c0:	f8130004 	swi	r0, r19, 4
2001c2c4:	b800005c 	bri	92		// 2001c320
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001c2c8:	e8730010 	lwi	r3, r19, 16
2001c2cc:	e8830000 	lwi	r4, r3, 0
2001c2d0:	e8730010 	lwi	r3, r19, 16
2001c2d4:	e8a3000c 	lwi	r5, r3, 12
2001c2d8:	e8730004 	lwi	r3, r19, 4
2001c2dc:	64630402 	bslli	r3, r3, 2
2001c2e0:	10651800 	addk	r3, r5, r3
2001c2e4:	e8a30000 	lwi	r5, r3, 0
2001c2e8:	e8730010 	lwi	r3, r19, 16
2001c2ec:	e8630010 	lwi	r3, r3, 16
2001c2f0:	e8630000 	lwi	r3, r3, 0
2001c2f4:	14632800 	rsubk	r3, r3, r5
2001c2f8:	10641800 	addk	r3, r4, r3
2001c2fc:	30830001 	addik	r4, r3, 1
2001c300:	e8730018 	lwi	r3, r19, 24
2001c304:	16441803 	cmpu	r18, r4, r3
2001c308:	bc52000c 	blti	r18, 12		// 2001c314
            return 0;
2001c30c:	10600000 	addk	r3, r0, r0
2001c310:	b8000024 	bri	36		// 2001c334
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001c314:	e8730004 	lwi	r3, r19, 4
2001c318:	30630001 	addik	r3, r3, 1
2001c31c:	f8730004 	swi	r3, r19, 4
2001c320:	e8930004 	lwi	r4, r19, 4
2001c324:	e8730014 	lwi	r3, r19, 20
2001c328:	16432003 	cmpu	r18, r3, r4
2001c32c:	bc52ff9c 	blti	r18, -100		// 2001c2c8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001c330:	30600001 	addik	r3, r0, 1
}
2001c334:	10330000 	addk	r1, r19, r0
2001c338:	ea610008 	lwi	r19, r1, 8
2001c33c:	3021000c 	addik	r1, r1, 12
2001c340:	b60f0008 	rtsd	r15, 8
2001c344:	80000000 	or	r0, r0, r0

2001c348 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001c348:	3021ffec 	addik	r1, r1, -20
2001c34c:	fa610010 	swi	r19, r1, 16
2001c350:	12610000 	addk	r19, r1, r0
2001c354:	f8b30018 	swi	r5, r19, 24
2001c358:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001c35c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001c360:	f8130004 	swi	r0, r19, 4
2001c364:	b8000054 	bri	84		// 2001c3b8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001c368:	e8730018 	lwi	r3, r19, 24
2001c36c:	e8630010 	lwi	r3, r3, 16
2001c370:	e8830000 	lwi	r4, r3, 0
2001c374:	e8730018 	lwi	r3, r19, 24
2001c378:	e8a3000c 	lwi	r5, r3, 12
2001c37c:	e8730004 	lwi	r3, r19, 4
2001c380:	64630402 	bslli	r3, r3, 2
2001c384:	10651800 	addk	r3, r5, r3
2001c388:	e8630000 	lwi	r3, r3, 0
2001c38c:	14632000 	rsubk	r3, r3, r4
2001c390:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001c394:	e8930008 	lwi	r4, r19, 8
2001c398:	e873000c 	lwi	r3, r19, 12
2001c39c:	16441803 	cmpu	r18, r4, r3
2001c3a0:	bcb20008 	bgei	r18, 8		// 2001c3a8
2001c3a4:	10640000 	addk	r3, r4, r0
2001c3a8:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001c3ac:	e8730004 	lwi	r3, r19, 4
2001c3b0:	30630001 	addik	r3, r3, 1
2001c3b4:	f8730004 	swi	r3, r19, 4
2001c3b8:	e8930004 	lwi	r4, r19, 4
2001c3bc:	e873001c 	lwi	r3, r19, 28
2001c3c0:	16432003 	cmpu	r18, r3, r4
2001c3c4:	bc52ffa4 	blti	r18, -92		// 2001c368
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001c3c8:	e8730018 	lwi	r3, r19, 24
2001c3cc:	e8830000 	lwi	r4, r3, 0
2001c3d0:	e8730008 	lwi	r3, r19, 8
2001c3d4:	14632000 	rsubk	r3, r3, r4
}
2001c3d8:	10330000 	addk	r1, r19, r0
2001c3dc:	ea610010 	lwi	r19, r1, 16
2001c3e0:	30210014 	addik	r1, r1, 20
2001c3e4:	b60f0008 	rtsd	r15, 8
2001c3e8:	80000000 	or	r0, r0, r0

2001c3ec <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001c3ec:	3021fff4 	addik	r1, r1, -12
2001c3f0:	fa610008 	swi	r19, r1, 8
2001c3f4:	12610000 	addk	r19, r1, r0
2001c3f8:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2001c3fc:	e8730010 	lwi	r3, r19, 16
2001c400:	e8630010 	lwi	r3, r3, 16
2001c404:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001c408:	f8130004 	swi	r0, r19, 4
2001c40c:	b8000028 	bri	40		// 2001c434
        fifo->read_inds[i] = 0;
2001c410:	e8730010 	lwi	r3, r19, 16
2001c414:	e883000c 	lwi	r4, r3, 12
2001c418:	e8730004 	lwi	r3, r19, 4
2001c41c:	64630402 	bslli	r3, r3, 2
2001c420:	10641800 	addk	r3, r4, r3
2001c424:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001c428:	e8730004 	lwi	r3, r19, 4
2001c42c:	30630001 	addik	r3, r3, 1
2001c430:	f8730004 	swi	r3, r19, 4
2001c434:	e8730010 	lwi	r3, r19, 16
2001c438:	e8830008 	lwi	r4, r3, 8
2001c43c:	e8730004 	lwi	r3, r19, 4
2001c440:	16441803 	cmpu	r18, r4, r3
2001c444:	bc52ffcc 	blti	r18, -52		// 2001c410
        fifo->read_inds[i] = 0;
    }
}
2001c448:	10330000 	addk	r1, r19, r0
2001c44c:	ea610008 	lwi	r19, r1, 8
2001c450:	3021000c 	addik	r1, r1, 12
2001c454:	b60f0008 	rtsd	r15, 8
2001c458:	80000000 	or	r0, r0, r0

2001c45c <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001c45c:	3021fff4 	addik	r1, r1, -12
2001c460:	fa610008 	swi	r19, r1, 8
2001c464:	12610000 	addk	r19, r1, r0
2001c468:	f8b30010 	swi	r5, r19, 16
2001c46c:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001c470:	e8730010 	lwi	r3, r19, 16
2001c474:	e8830004 	lwi	r4, r3, 4
2001c478:	e8730010 	lwi	r3, r19, 16
2001c47c:	e8a3000c 	lwi	r5, r3, 12
2001c480:	e8730014 	lwi	r3, r19, 20
2001c484:	64630402 	bslli	r3, r3, 2
2001c488:	10651800 	addk	r3, r5, r3
2001c48c:	e8a30000 	lwi	r5, r3, 0
2001c490:	e8730010 	lwi	r3, r19, 16
2001c494:	e8630000 	lwi	r3, r3, 0
2001c498:	3063ffff 	addik	r3, r3, -1
2001c49c:	84651800 	and	r3, r5, r3
2001c4a0:	10631800 	addk	r3, r3, r3
2001c4a4:	10641800 	addk	r3, r4, r3
2001c4a8:	e4630000 	lhui	r3, r3, 0
2001c4ac:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2001c4b0:	e8730010 	lwi	r3, r19, 16
2001c4b4:	e883000c 	lwi	r4, r3, 12
2001c4b8:	e8730014 	lwi	r3, r19, 20
2001c4bc:	64630402 	bslli	r3, r3, 2
2001c4c0:	10641800 	addk	r3, r4, r3
2001c4c4:	e8830000 	lwi	r4, r3, 0
2001c4c8:	30840001 	addik	r4, r4, 1
2001c4cc:	f8830000 	swi	r4, r3, 0
    return value;
2001c4d0:	e4730004 	lhui	r3, r19, 4
2001c4d4:	90630061 	sext16	r3, r3
}
2001c4d8:	10330000 	addk	r1, r19, r0
2001c4dc:	ea610008 	lwi	r19, r1, 8
2001c4e0:	3021000c 	addik	r1, r1, 12
2001c4e4:	b60f0008 	rtsd	r15, 8
2001c4e8:	80000000 	or	r0, r0, r0

2001c4ec <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001c4ec:	3021fff8 	addik	r1, r1, -8
2001c4f0:	fa610004 	swi	r19, r1, 4
2001c4f4:	12610000 	addk	r19, r1, r0
2001c4f8:	f8b3000c 	swi	r5, r19, 12
2001c4fc:	10660000 	addk	r3, r6, r0
2001c500:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001c504:	e873000c 	lwi	r3, r19, 12
2001c508:	e8830004 	lwi	r4, r3, 4
2001c50c:	e873000c 	lwi	r3, r19, 12
2001c510:	e8630010 	lwi	r3, r3, 16
2001c514:	e8a30000 	lwi	r5, r3, 0
2001c518:	e873000c 	lwi	r3, r19, 12
2001c51c:	e8630000 	lwi	r3, r3, 0
2001c520:	3063ffff 	addik	r3, r3, -1
2001c524:	84651800 	and	r3, r5, r3
2001c528:	10631800 	addk	r3, r3, r3
2001c52c:	10641800 	addk	r3, r4, r3
2001c530:	e4930010 	lhui	r4, r19, 16
2001c534:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2001c538:	e873000c 	lwi	r3, r19, 12
2001c53c:	e8630010 	lwi	r3, r3, 16
2001c540:	e8830000 	lwi	r4, r3, 0
2001c544:	30840001 	addik	r4, r4, 1
2001c548:	f8830000 	swi	r4, r3, 0
}
2001c54c:	10330000 	addk	r1, r19, r0
2001c550:	ea610004 	lwi	r19, r1, 4
2001c554:	30210008 	addik	r1, r1, 8
2001c558:	b60f0008 	rtsd	r15, 8
2001c55c:	80000000 	or	r0, r0, r0

2001c560 <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001c560:	3021fff8 	addik	r1, r1, -8
2001c564:	fa610004 	swi	r19, r1, 4
2001c568:	12610000 	addk	r19, r1, r0
2001c56c:	f8b3000c 	swi	r5, r19, 12
2001c570:	f8d30010 	swi	r6, r19, 16
2001c574:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001c578:	e873000c 	lwi	r3, r19, 12
2001c57c:	e8630010 	lwi	r3, r3, 16
2001c580:	e8830000 	lwi	r4, r3, 0
2001c584:	e873000c 	lwi	r3, r19, 12
2001c588:	e8a3000c 	lwi	r5, r3, 12
2001c58c:	e8730010 	lwi	r3, r19, 16
2001c590:	64630402 	bslli	r3, r3, 2
2001c594:	10651800 	addk	r3, r5, r3
2001c598:	e8630000 	lwi	r3, r3, 0
2001c59c:	14a32000 	rsubk	r5, r3, r4
2001c5a0:	30600001 	addik	r3, r0, 1
2001c5a4:	e8930014 	lwi	r4, r19, 20
2001c5a8:	16442803 	cmpu	r18, r4, r5
2001c5ac:	bcb20008 	bgei	r18, 8		// 2001c5b4
2001c5b0:	10600000 	addk	r3, r0, r0
2001c5b4:	a46300ff 	andi	r3, r3, 255
}
2001c5b8:	10330000 	addk	r1, r19, r0
2001c5bc:	ea610004 	lwi	r19, r1, 4
2001c5c0:	30210008 	addik	r1, r1, 8
2001c5c4:	b60f0008 	rtsd	r15, 8
2001c5c8:	80000000 	or	r0, r0, r0

2001c5cc <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001c5cc:	3021fff8 	addik	r1, r1, -8
2001c5d0:	fa610004 	swi	r19, r1, 4
2001c5d4:	12610000 	addk	r19, r1, r0
2001c5d8:	f8b3000c 	swi	r5, r19, 12
2001c5dc:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001c5e0:	e873000c 	lwi	r3, r19, 12
2001c5e4:	e8630010 	lwi	r3, r3, 16
2001c5e8:	e8830000 	lwi	r4, r3, 0
2001c5ec:	e873000c 	lwi	r3, r19, 12
2001c5f0:	e8a3000c 	lwi	r5, r3, 12
2001c5f4:	e8730010 	lwi	r3, r19, 16
2001c5f8:	64630402 	bslli	r3, r3, 2
2001c5fc:	10651800 	addk	r3, r5, r3
2001c600:	e8630000 	lwi	r3, r3, 0
2001c604:	14632000 	rsubk	r3, r3, r4
}
2001c608:	10330000 	addk	r1, r19, r0
2001c60c:	ea610004 	lwi	r19, r1, 4
2001c610:	30210008 	addik	r1, r1, 8
2001c614:	b60f0008 	rtsd	r15, 8
2001c618:	80000000 	or	r0, r0, r0

2001c61c <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2001c61c:	3021fff4 	addik	r1, r1, -12
2001c620:	fa610008 	swi	r19, r1, 8
2001c624:	12610000 	addk	r19, r1, r0
2001c628:	f8b30010 	swi	r5, r19, 16
2001c62c:	f8d30014 	swi	r6, r19, 20
2001c630:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001c634:	f8130004 	swi	r0, r19, 4
2001c638:	b800005c 	bri	92		// 2001c694
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001c63c:	e8730010 	lwi	r3, r19, 16
2001c640:	e8830000 	lwi	r4, r3, 0
2001c644:	e8730010 	lwi	r3, r19, 16
2001c648:	e8a3000c 	lwi	r5, r3, 12
2001c64c:	e8730004 	lwi	r3, r19, 4
2001c650:	64630402 	bslli	r3, r3, 2
2001c654:	10651800 	addk	r3, r5, r3
2001c658:	e8a30000 	lwi	r5, r3, 0
2001c65c:	e8730010 	lwi	r3, r19, 16
2001c660:	e8630010 	lwi	r3, r3, 16
2001c664:	e8630000 	lwi	r3, r3, 0
2001c668:	14632800 	rsubk	r3, r3, r5
2001c66c:	10641800 	addk	r3, r4, r3
2001c670:	30830001 	addik	r4, r3, 1
2001c674:	e8730018 	lwi	r3, r19, 24
2001c678:	16441803 	cmpu	r18, r4, r3
2001c67c:	bc52000c 	blti	r18, 12		// 2001c688
            return 0;
2001c680:	10600000 	addk	r3, r0, r0
2001c684:	b8000024 	bri	36		// 2001c6a8
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001c688:	e8730004 	lwi	r3, r19, 4
2001c68c:	30630001 	addik	r3, r3, 1
2001c690:	f8730004 	swi	r3, r19, 4
2001c694:	e8930004 	lwi	r4, r19, 4
2001c698:	e8730014 	lwi	r3, r19, 20
2001c69c:	16432003 	cmpu	r18, r3, r4
2001c6a0:	bc52ff9c 	blti	r18, -100		// 2001c63c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001c6a4:	30600001 	addik	r3, r0, 1
}
2001c6a8:	10330000 	addk	r1, r19, r0
2001c6ac:	ea610008 	lwi	r19, r1, 8
2001c6b0:	3021000c 	addik	r1, r1, 12
2001c6b4:	b60f0008 	rtsd	r15, 8
2001c6b8:	80000000 	or	r0, r0, r0

2001c6bc <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001c6bc:	3021ffec 	addik	r1, r1, -20
2001c6c0:	fa610010 	swi	r19, r1, 16
2001c6c4:	12610000 	addk	r19, r1, r0
2001c6c8:	f8b30018 	swi	r5, r19, 24
2001c6cc:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001c6d0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001c6d4:	f8130004 	swi	r0, r19, 4
2001c6d8:	b8000054 	bri	84		// 2001c72c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001c6dc:	e8730018 	lwi	r3, r19, 24
2001c6e0:	e8630010 	lwi	r3, r3, 16
2001c6e4:	e8830000 	lwi	r4, r3, 0
2001c6e8:	e8730018 	lwi	r3, r19, 24
2001c6ec:	e8a3000c 	lwi	r5, r3, 12
2001c6f0:	e8730004 	lwi	r3, r19, 4
2001c6f4:	64630402 	bslli	r3, r3, 2
2001c6f8:	10651800 	addk	r3, r5, r3
2001c6fc:	e8630000 	lwi	r3, r3, 0
2001c700:	14632000 	rsubk	r3, r3, r4
2001c704:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001c708:	e8930008 	lwi	r4, r19, 8
2001c70c:	e873000c 	lwi	r3, r19, 12
2001c710:	16441803 	cmpu	r18, r4, r3
2001c714:	bcb20008 	bgei	r18, 8		// 2001c71c
2001c718:	10640000 	addk	r3, r4, r0
2001c71c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001c720:	e8730004 	lwi	r3, r19, 4
2001c724:	30630001 	addik	r3, r3, 1
2001c728:	f8730004 	swi	r3, r19, 4
2001c72c:	e8930004 	lwi	r4, r19, 4
2001c730:	e873001c 	lwi	r3, r19, 28
2001c734:	16432003 	cmpu	r18, r3, r4
2001c738:	bc52ffa4 	blti	r18, -92		// 2001c6dc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001c73c:	e8730018 	lwi	r3, r19, 24
2001c740:	e8830000 	lwi	r4, r3, 0
2001c744:	e8730008 	lwi	r3, r19, 8
2001c748:	14632000 	rsubk	r3, r3, r4
}
2001c74c:	10330000 	addk	r1, r19, r0
2001c750:	ea610010 	lwi	r19, r1, 16
2001c754:	30210014 	addik	r1, r1, 20
2001c758:	b60f0008 	rtsd	r15, 8
2001c75c:	80000000 	or	r0, r0, r0

2001c760 <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001c760:	3021fff4 	addik	r1, r1, -12
2001c764:	fa610008 	swi	r19, r1, 8
2001c768:	12610000 	addk	r19, r1, r0
2001c76c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2001c770:	e8730010 	lwi	r3, r19, 16
2001c774:	e8630010 	lwi	r3, r3, 16
2001c778:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001c77c:	f8130004 	swi	r0, r19, 4
2001c780:	b8000028 	bri	40		// 2001c7a8
        fifo->read_inds[i] = 0;
2001c784:	e8730010 	lwi	r3, r19, 16
2001c788:	e883000c 	lwi	r4, r3, 12
2001c78c:	e8730004 	lwi	r3, r19, 4
2001c790:	64630402 	bslli	r3, r3, 2
2001c794:	10641800 	addk	r3, r4, r3
2001c798:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001c79c:	e8730004 	lwi	r3, r19, 4
2001c7a0:	30630001 	addik	r3, r3, 1
2001c7a4:	f8730004 	swi	r3, r19, 4
2001c7a8:	e8730010 	lwi	r3, r19, 16
2001c7ac:	e8830008 	lwi	r4, r3, 8
2001c7b0:	e8730004 	lwi	r3, r19, 4
2001c7b4:	16441803 	cmpu	r18, r4, r3
2001c7b8:	bc52ffcc 	blti	r18, -52		// 2001c784
        fifo->read_inds[i] = 0;
    }
}
2001c7bc:	10330000 	addk	r1, r19, r0
2001c7c0:	ea610008 	lwi	r19, r1, 8
2001c7c4:	3021000c 	addik	r1, r1, 12
2001c7c8:	b60f0008 	rtsd	r15, 8
2001c7cc:	80000000 	or	r0, r0, r0

2001c7d0 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001c7d0:	3021fff4 	addik	r1, r1, -12
2001c7d4:	fa610008 	swi	r19, r1, 8
2001c7d8:	12610000 	addk	r19, r1, r0
2001c7dc:	f8b30010 	swi	r5, r19, 16
2001c7e0:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001c7e4:	e8730010 	lwi	r3, r19, 16
2001c7e8:	e8830004 	lwi	r4, r3, 4
2001c7ec:	e8730010 	lwi	r3, r19, 16
2001c7f0:	e8a3000c 	lwi	r5, r3, 12
2001c7f4:	e8730014 	lwi	r3, r19, 20
2001c7f8:	64630402 	bslli	r3, r3, 2
2001c7fc:	10651800 	addk	r3, r5, r3
2001c800:	e8a30000 	lwi	r5, r3, 0
2001c804:	e8730010 	lwi	r3, r19, 16
2001c808:	e8630000 	lwi	r3, r3, 0
2001c80c:	3063ffff 	addik	r3, r3, -1
2001c810:	84651800 	and	r3, r5, r3
2001c814:	64630402 	bslli	r3, r3, 2
2001c818:	10641800 	addk	r3, r4, r3
2001c81c:	e8630000 	lwi	r3, r3, 0
2001c820:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2001c824:	e8730010 	lwi	r3, r19, 16
2001c828:	e883000c 	lwi	r4, r3, 12
2001c82c:	e8730014 	lwi	r3, r19, 20
2001c830:	64630402 	bslli	r3, r3, 2
2001c834:	10641800 	addk	r3, r4, r3
2001c838:	e8830000 	lwi	r4, r3, 0
2001c83c:	30840001 	addik	r4, r4, 1
2001c840:	f8830000 	swi	r4, r3, 0
    return value;
2001c844:	e8730004 	lwi	r3, r19, 4
}
2001c848:	10330000 	addk	r1, r19, r0
2001c84c:	ea610008 	lwi	r19, r1, 8
2001c850:	3021000c 	addik	r1, r1, 12
2001c854:	b60f0008 	rtsd	r15, 8
2001c858:	80000000 	or	r0, r0, r0

2001c85c <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001c85c:	3021fff8 	addik	r1, r1, -8
2001c860:	fa610004 	swi	r19, r1, 4
2001c864:	12610000 	addk	r19, r1, r0
2001c868:	f8b3000c 	swi	r5, r19, 12
2001c86c:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001c870:	e873000c 	lwi	r3, r19, 12
2001c874:	e8830004 	lwi	r4, r3, 4
2001c878:	e873000c 	lwi	r3, r19, 12
2001c87c:	e8630010 	lwi	r3, r3, 16
2001c880:	e8a30000 	lwi	r5, r3, 0
2001c884:	e873000c 	lwi	r3, r19, 12
2001c888:	e8630000 	lwi	r3, r3, 0
2001c88c:	3063ffff 	addik	r3, r3, -1
2001c890:	84651800 	and	r3, r5, r3
2001c894:	64630402 	bslli	r3, r3, 2
2001c898:	10641800 	addk	r3, r4, r3
2001c89c:	e8930010 	lwi	r4, r19, 16
2001c8a0:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2001c8a4:	e873000c 	lwi	r3, r19, 12
2001c8a8:	e8630010 	lwi	r3, r3, 16
2001c8ac:	e8830000 	lwi	r4, r3, 0
2001c8b0:	30840001 	addik	r4, r4, 1
2001c8b4:	f8830000 	swi	r4, r3, 0
}
2001c8b8:	10330000 	addk	r1, r19, r0
2001c8bc:	ea610004 	lwi	r19, r1, 4
2001c8c0:	30210008 	addik	r1, r1, 8
2001c8c4:	b60f0008 	rtsd	r15, 8
2001c8c8:	80000000 	or	r0, r0, r0

2001c8cc <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001c8cc:	3021fff8 	addik	r1, r1, -8
2001c8d0:	fa610004 	swi	r19, r1, 4
2001c8d4:	12610000 	addk	r19, r1, r0
2001c8d8:	f8b3000c 	swi	r5, r19, 12
2001c8dc:	f8d30010 	swi	r6, r19, 16
2001c8e0:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001c8e4:	e873000c 	lwi	r3, r19, 12
2001c8e8:	e8630010 	lwi	r3, r3, 16
2001c8ec:	e8830000 	lwi	r4, r3, 0
2001c8f0:	e873000c 	lwi	r3, r19, 12
2001c8f4:	e8a3000c 	lwi	r5, r3, 12
2001c8f8:	e8730010 	lwi	r3, r19, 16
2001c8fc:	64630402 	bslli	r3, r3, 2
2001c900:	10651800 	addk	r3, r5, r3
2001c904:	e8630000 	lwi	r3, r3, 0
2001c908:	14a32000 	rsubk	r5, r3, r4
2001c90c:	30600001 	addik	r3, r0, 1
2001c910:	e8930014 	lwi	r4, r19, 20
2001c914:	16442803 	cmpu	r18, r4, r5
2001c918:	bcb20008 	bgei	r18, 8		// 2001c920
2001c91c:	10600000 	addk	r3, r0, r0
2001c920:	a46300ff 	andi	r3, r3, 255
}
2001c924:	10330000 	addk	r1, r19, r0
2001c928:	ea610004 	lwi	r19, r1, 4
2001c92c:	30210008 	addik	r1, r1, 8
2001c930:	b60f0008 	rtsd	r15, 8
2001c934:	80000000 	or	r0, r0, r0

2001c938 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001c938:	3021fff8 	addik	r1, r1, -8
2001c93c:	fa610004 	swi	r19, r1, 4
2001c940:	12610000 	addk	r19, r1, r0
2001c944:	f8b3000c 	swi	r5, r19, 12
2001c948:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001c94c:	e873000c 	lwi	r3, r19, 12
2001c950:	e8630010 	lwi	r3, r3, 16
2001c954:	e8830000 	lwi	r4, r3, 0
2001c958:	e873000c 	lwi	r3, r19, 12
2001c95c:	e8a3000c 	lwi	r5, r3, 12
2001c960:	e8730010 	lwi	r3, r19, 16
2001c964:	64630402 	bslli	r3, r3, 2
2001c968:	10651800 	addk	r3, r5, r3
2001c96c:	e8630000 	lwi	r3, r3, 0
2001c970:	14632000 	rsubk	r3, r3, r4
}
2001c974:	10330000 	addk	r1, r19, r0
2001c978:	ea610004 	lwi	r19, r1, 4
2001c97c:	30210008 	addik	r1, r1, 8
2001c980:	b60f0008 	rtsd	r15, 8
2001c984:	80000000 	or	r0, r0, r0

2001c988 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2001c988:	3021fff4 	addik	r1, r1, -12
2001c98c:	fa610008 	swi	r19, r1, 8
2001c990:	12610000 	addk	r19, r1, r0
2001c994:	f8b30010 	swi	r5, r19, 16
2001c998:	f8d30014 	swi	r6, r19, 20
2001c99c:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001c9a0:	f8130004 	swi	r0, r19, 4
2001c9a4:	b800005c 	bri	92		// 2001ca00
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001c9a8:	e8730010 	lwi	r3, r19, 16
2001c9ac:	e8830000 	lwi	r4, r3, 0
2001c9b0:	e8730010 	lwi	r3, r19, 16
2001c9b4:	e8a3000c 	lwi	r5, r3, 12
2001c9b8:	e8730004 	lwi	r3, r19, 4
2001c9bc:	64630402 	bslli	r3, r3, 2
2001c9c0:	10651800 	addk	r3, r5, r3
2001c9c4:	e8a30000 	lwi	r5, r3, 0
2001c9c8:	e8730010 	lwi	r3, r19, 16
2001c9cc:	e8630010 	lwi	r3, r3, 16
2001c9d0:	e8630000 	lwi	r3, r3, 0
2001c9d4:	14632800 	rsubk	r3, r3, r5
2001c9d8:	10641800 	addk	r3, r4, r3
2001c9dc:	30830001 	addik	r4, r3, 1
2001c9e0:	e8730018 	lwi	r3, r19, 24
2001c9e4:	16441803 	cmpu	r18, r4, r3
2001c9e8:	bc52000c 	blti	r18, 12		// 2001c9f4
            return 0;
2001c9ec:	10600000 	addk	r3, r0, r0
2001c9f0:	b8000024 	bri	36		// 2001ca14
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001c9f4:	e8730004 	lwi	r3, r19, 4
2001c9f8:	30630001 	addik	r3, r3, 1
2001c9fc:	f8730004 	swi	r3, r19, 4
2001ca00:	e8930004 	lwi	r4, r19, 4
2001ca04:	e8730014 	lwi	r3, r19, 20
2001ca08:	16432003 	cmpu	r18, r3, r4
2001ca0c:	bc52ff9c 	blti	r18, -100		// 2001c9a8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001ca10:	30600001 	addik	r3, r0, 1
}
2001ca14:	10330000 	addk	r1, r19, r0
2001ca18:	ea610008 	lwi	r19, r1, 8
2001ca1c:	3021000c 	addik	r1, r1, 12
2001ca20:	b60f0008 	rtsd	r15, 8
2001ca24:	80000000 	or	r0, r0, r0

2001ca28 <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001ca28:	3021ffec 	addik	r1, r1, -20
2001ca2c:	fa610010 	swi	r19, r1, 16
2001ca30:	12610000 	addk	r19, r1, r0
2001ca34:	f8b30018 	swi	r5, r19, 24
2001ca38:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001ca3c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001ca40:	f8130004 	swi	r0, r19, 4
2001ca44:	b8000054 	bri	84		// 2001ca98
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001ca48:	e8730018 	lwi	r3, r19, 24
2001ca4c:	e8630010 	lwi	r3, r3, 16
2001ca50:	e8830000 	lwi	r4, r3, 0
2001ca54:	e8730018 	lwi	r3, r19, 24
2001ca58:	e8a3000c 	lwi	r5, r3, 12
2001ca5c:	e8730004 	lwi	r3, r19, 4
2001ca60:	64630402 	bslli	r3, r3, 2
2001ca64:	10651800 	addk	r3, r5, r3
2001ca68:	e8630000 	lwi	r3, r3, 0
2001ca6c:	14632000 	rsubk	r3, r3, r4
2001ca70:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001ca74:	e8930008 	lwi	r4, r19, 8
2001ca78:	e873000c 	lwi	r3, r19, 12
2001ca7c:	16441803 	cmpu	r18, r4, r3
2001ca80:	bcb20008 	bgei	r18, 8		// 2001ca88
2001ca84:	10640000 	addk	r3, r4, r0
2001ca88:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001ca8c:	e8730004 	lwi	r3, r19, 4
2001ca90:	30630001 	addik	r3, r3, 1
2001ca94:	f8730004 	swi	r3, r19, 4
2001ca98:	e8930004 	lwi	r4, r19, 4
2001ca9c:	e873001c 	lwi	r3, r19, 28
2001caa0:	16432003 	cmpu	r18, r3, r4
2001caa4:	bc52ffa4 	blti	r18, -92		// 2001ca48
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001caa8:	e8730018 	lwi	r3, r19, 24
2001caac:	e8830000 	lwi	r4, r3, 0
2001cab0:	e8730008 	lwi	r3, r19, 8
2001cab4:	14632000 	rsubk	r3, r3, r4
}
2001cab8:	10330000 	addk	r1, r19, r0
2001cabc:	ea610010 	lwi	r19, r1, 16
2001cac0:	30210014 	addik	r1, r1, 20
2001cac4:	b60f0008 	rtsd	r15, 8
2001cac8:	80000000 	or	r0, r0, r0

2001cacc <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001cacc:	3021fff4 	addik	r1, r1, -12
2001cad0:	fa610008 	swi	r19, r1, 8
2001cad4:	12610000 	addk	r19, r1, r0
2001cad8:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2001cadc:	e8730010 	lwi	r3, r19, 16
2001cae0:	e8630010 	lwi	r3, r3, 16
2001cae4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001cae8:	f8130004 	swi	r0, r19, 4
2001caec:	b8000028 	bri	40		// 2001cb14
        fifo->read_inds[i] = 0;
2001caf0:	e8730010 	lwi	r3, r19, 16
2001caf4:	e883000c 	lwi	r4, r3, 12
2001caf8:	e8730004 	lwi	r3, r19, 4
2001cafc:	64630402 	bslli	r3, r3, 2
2001cb00:	10641800 	addk	r3, r4, r3
2001cb04:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001cb08:	e8730004 	lwi	r3, r19, 4
2001cb0c:	30630001 	addik	r3, r3, 1
2001cb10:	f8730004 	swi	r3, r19, 4
2001cb14:	e8730010 	lwi	r3, r19, 16
2001cb18:	e8830008 	lwi	r4, r3, 8
2001cb1c:	e8730004 	lwi	r3, r19, 4
2001cb20:	16441803 	cmpu	r18, r4, r3
2001cb24:	bc52ffcc 	blti	r18, -52		// 2001caf0
        fifo->read_inds[i] = 0;
    }
}
2001cb28:	10330000 	addk	r1, r19, r0
2001cb2c:	ea610008 	lwi	r19, r1, 8
2001cb30:	3021000c 	addik	r1, r1, 12
2001cb34:	b60f0008 	rtsd	r15, 8
2001cb38:	80000000 	or	r0, r0, r0

2001cb3c <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001cb3c:	3021fff0 	addik	r1, r1, -16
2001cb40:	fa61000c 	swi	r19, r1, 12
2001cb44:	12610000 	addk	r19, r1, r0
2001cb48:	f8b30014 	swi	r5, r19, 20
2001cb4c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001cb50:	e8730014 	lwi	r3, r19, 20
2001cb54:	e8830004 	lwi	r4, r3, 4
2001cb58:	e8730014 	lwi	r3, r19, 20
2001cb5c:	e8a3000c 	lwi	r5, r3, 12
2001cb60:	e8730018 	lwi	r3, r19, 24
2001cb64:	64630402 	bslli	r3, r3, 2
2001cb68:	10651800 	addk	r3, r5, r3
2001cb6c:	e8a30000 	lwi	r5, r3, 0
2001cb70:	e8730014 	lwi	r3, r19, 20
2001cb74:	e8630000 	lwi	r3, r3, 0
2001cb78:	3063ffff 	addik	r3, r3, -1
2001cb7c:	84651800 	and	r3, r5, r3
2001cb80:	64630403 	bslli	r3, r3, 3
2001cb84:	10641800 	addk	r3, r4, r3
2001cb88:	e8830000 	lwi	r4, r3, 0
2001cb8c:	e8a30004 	lwi	r5, r3, 4
2001cb90:	f8930004 	swi	r4, r19, 4
2001cb94:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2001cb98:	e8730014 	lwi	r3, r19, 20
2001cb9c:	e883000c 	lwi	r4, r3, 12
2001cba0:	e8730018 	lwi	r3, r19, 24
2001cba4:	64630402 	bslli	r3, r3, 2
2001cba8:	10641800 	addk	r3, r4, r3
2001cbac:	e8830000 	lwi	r4, r3, 0
2001cbb0:	30840001 	addik	r4, r4, 1
2001cbb4:	f8830000 	swi	r4, r3, 0
    return value;
2001cbb8:	e8930004 	lwi	r4, r19, 4
2001cbbc:	e8b30008 	lwi	r5, r19, 8
}
2001cbc0:	10640000 	addk	r3, r4, r0
2001cbc4:	10850000 	addk	r4, r5, r0
2001cbc8:	10330000 	addk	r1, r19, r0
2001cbcc:	ea61000c 	lwi	r19, r1, 12
2001cbd0:	30210010 	addik	r1, r1, 16
2001cbd4:	b60f0008 	rtsd	r15, 8
2001cbd8:	80000000 	or	r0, r0, r0

2001cbdc <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001cbdc:	3021fff8 	addik	r1, r1, -8
2001cbe0:	fa610004 	swi	r19, r1, 4
2001cbe4:	12610000 	addk	r19, r1, r0
2001cbe8:	f8b3000c 	swi	r5, r19, 12
2001cbec:	f8d30010 	swi	r6, r19, 16
2001cbf0:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001cbf4:	e873000c 	lwi	r3, r19, 12
2001cbf8:	e8830004 	lwi	r4, r3, 4
2001cbfc:	e873000c 	lwi	r3, r19, 12
2001cc00:	e8630010 	lwi	r3, r3, 16
2001cc04:	e8a30000 	lwi	r5, r3, 0
2001cc08:	e873000c 	lwi	r3, r19, 12
2001cc0c:	e8630000 	lwi	r3, r3, 0
2001cc10:	3063ffff 	addik	r3, r3, -1
2001cc14:	84651800 	and	r3, r5, r3
2001cc18:	64630403 	bslli	r3, r3, 3
2001cc1c:	10641800 	addk	r3, r4, r3
2001cc20:	e8930010 	lwi	r4, r19, 16
2001cc24:	e8b30014 	lwi	r5, r19, 20
2001cc28:	f8830000 	swi	r4, r3, 0
2001cc2c:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2001cc30:	e873000c 	lwi	r3, r19, 12
2001cc34:	e8630010 	lwi	r3, r3, 16
2001cc38:	e8830000 	lwi	r4, r3, 0
2001cc3c:	30840001 	addik	r4, r4, 1
2001cc40:	f8830000 	swi	r4, r3, 0
}
2001cc44:	10330000 	addk	r1, r19, r0
2001cc48:	ea610004 	lwi	r19, r1, 4
2001cc4c:	30210008 	addik	r1, r1, 8
2001cc50:	b60f0008 	rtsd	r15, 8
2001cc54:	80000000 	or	r0, r0, r0

2001cc58 <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001cc58:	3021fff8 	addik	r1, r1, -8
2001cc5c:	fa610004 	swi	r19, r1, 4
2001cc60:	12610000 	addk	r19, r1, r0
2001cc64:	f8b3000c 	swi	r5, r19, 12
2001cc68:	f8d30010 	swi	r6, r19, 16
2001cc6c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001cc70:	e873000c 	lwi	r3, r19, 12
2001cc74:	e8630010 	lwi	r3, r3, 16
2001cc78:	e8830000 	lwi	r4, r3, 0
2001cc7c:	e873000c 	lwi	r3, r19, 12
2001cc80:	e8a3000c 	lwi	r5, r3, 12
2001cc84:	e8730010 	lwi	r3, r19, 16
2001cc88:	64630402 	bslli	r3, r3, 2
2001cc8c:	10651800 	addk	r3, r5, r3
2001cc90:	e8630000 	lwi	r3, r3, 0
2001cc94:	14a32000 	rsubk	r5, r3, r4
2001cc98:	30600001 	addik	r3, r0, 1
2001cc9c:	e8930014 	lwi	r4, r19, 20
2001cca0:	16442803 	cmpu	r18, r4, r5
2001cca4:	bcb20008 	bgei	r18, 8		// 2001ccac
2001cca8:	10600000 	addk	r3, r0, r0
2001ccac:	a46300ff 	andi	r3, r3, 255
}
2001ccb0:	10330000 	addk	r1, r19, r0
2001ccb4:	ea610004 	lwi	r19, r1, 4
2001ccb8:	30210008 	addik	r1, r1, 8
2001ccbc:	b60f0008 	rtsd	r15, 8
2001ccc0:	80000000 	or	r0, r0, r0

2001ccc4 <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001ccc4:	3021fff8 	addik	r1, r1, -8
2001ccc8:	fa610004 	swi	r19, r1, 4
2001cccc:	12610000 	addk	r19, r1, r0
2001ccd0:	f8b3000c 	swi	r5, r19, 12
2001ccd4:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001ccd8:	e873000c 	lwi	r3, r19, 12
2001ccdc:	e8630010 	lwi	r3, r3, 16
2001cce0:	e8830000 	lwi	r4, r3, 0
2001cce4:	e873000c 	lwi	r3, r19, 12
2001cce8:	e8a3000c 	lwi	r5, r3, 12
2001ccec:	e8730010 	lwi	r3, r19, 16
2001ccf0:	64630402 	bslli	r3, r3, 2
2001ccf4:	10651800 	addk	r3, r5, r3
2001ccf8:	e8630000 	lwi	r3, r3, 0
2001ccfc:	14632000 	rsubk	r3, r3, r4
}
2001cd00:	10330000 	addk	r1, r19, r0
2001cd04:	ea610004 	lwi	r19, r1, 4
2001cd08:	30210008 	addik	r1, r1, 8
2001cd0c:	b60f0008 	rtsd	r15, 8
2001cd10:	80000000 	or	r0, r0, r0

2001cd14 <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2001cd14:	3021fff4 	addik	r1, r1, -12
2001cd18:	fa610008 	swi	r19, r1, 8
2001cd1c:	12610000 	addk	r19, r1, r0
2001cd20:	f8b30010 	swi	r5, r19, 16
2001cd24:	f8d30014 	swi	r6, r19, 20
2001cd28:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001cd2c:	f8130004 	swi	r0, r19, 4
2001cd30:	b800005c 	bri	92		// 2001cd8c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001cd34:	e8730010 	lwi	r3, r19, 16
2001cd38:	e8830000 	lwi	r4, r3, 0
2001cd3c:	e8730010 	lwi	r3, r19, 16
2001cd40:	e8a3000c 	lwi	r5, r3, 12
2001cd44:	e8730004 	lwi	r3, r19, 4
2001cd48:	64630402 	bslli	r3, r3, 2
2001cd4c:	10651800 	addk	r3, r5, r3
2001cd50:	e8a30000 	lwi	r5, r3, 0
2001cd54:	e8730010 	lwi	r3, r19, 16
2001cd58:	e8630010 	lwi	r3, r3, 16
2001cd5c:	e8630000 	lwi	r3, r3, 0
2001cd60:	14632800 	rsubk	r3, r3, r5
2001cd64:	10641800 	addk	r3, r4, r3
2001cd68:	30830001 	addik	r4, r3, 1
2001cd6c:	e8730018 	lwi	r3, r19, 24
2001cd70:	16441803 	cmpu	r18, r4, r3
2001cd74:	bc52000c 	blti	r18, 12		// 2001cd80
            return 0;
2001cd78:	10600000 	addk	r3, r0, r0
2001cd7c:	b8000024 	bri	36		// 2001cda0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001cd80:	e8730004 	lwi	r3, r19, 4
2001cd84:	30630001 	addik	r3, r3, 1
2001cd88:	f8730004 	swi	r3, r19, 4
2001cd8c:	e8930004 	lwi	r4, r19, 4
2001cd90:	e8730014 	lwi	r3, r19, 20
2001cd94:	16432003 	cmpu	r18, r3, r4
2001cd98:	bc52ff9c 	blti	r18, -100		// 2001cd34
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001cd9c:	30600001 	addik	r3, r0, 1
}
2001cda0:	10330000 	addk	r1, r19, r0
2001cda4:	ea610008 	lwi	r19, r1, 8
2001cda8:	3021000c 	addik	r1, r1, 12
2001cdac:	b60f0008 	rtsd	r15, 8
2001cdb0:	80000000 	or	r0, r0, r0

2001cdb4 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001cdb4:	3021ffec 	addik	r1, r1, -20
2001cdb8:	fa610010 	swi	r19, r1, 16
2001cdbc:	12610000 	addk	r19, r1, r0
2001cdc0:	f8b30018 	swi	r5, r19, 24
2001cdc4:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001cdc8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001cdcc:	f8130004 	swi	r0, r19, 4
2001cdd0:	b8000054 	bri	84		// 2001ce24
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001cdd4:	e8730018 	lwi	r3, r19, 24
2001cdd8:	e8630010 	lwi	r3, r3, 16
2001cddc:	e8830000 	lwi	r4, r3, 0
2001cde0:	e8730018 	lwi	r3, r19, 24
2001cde4:	e8a3000c 	lwi	r5, r3, 12
2001cde8:	e8730004 	lwi	r3, r19, 4
2001cdec:	64630402 	bslli	r3, r3, 2
2001cdf0:	10651800 	addk	r3, r5, r3
2001cdf4:	e8630000 	lwi	r3, r3, 0
2001cdf8:	14632000 	rsubk	r3, r3, r4
2001cdfc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001ce00:	e8930008 	lwi	r4, r19, 8
2001ce04:	e873000c 	lwi	r3, r19, 12
2001ce08:	16441803 	cmpu	r18, r4, r3
2001ce0c:	bcb20008 	bgei	r18, 8		// 2001ce14
2001ce10:	10640000 	addk	r3, r4, r0
2001ce14:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001ce18:	e8730004 	lwi	r3, r19, 4
2001ce1c:	30630001 	addik	r3, r3, 1
2001ce20:	f8730004 	swi	r3, r19, 4
2001ce24:	e8930004 	lwi	r4, r19, 4
2001ce28:	e873001c 	lwi	r3, r19, 28
2001ce2c:	16432003 	cmpu	r18, r3, r4
2001ce30:	bc52ffa4 	blti	r18, -92		// 2001cdd4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001ce34:	e8730018 	lwi	r3, r19, 24
2001ce38:	e8830000 	lwi	r4, r3, 0
2001ce3c:	e8730008 	lwi	r3, r19, 8
2001ce40:	14632000 	rsubk	r3, r3, r4
}
2001ce44:	10330000 	addk	r1, r19, r0
2001ce48:	ea610010 	lwi	r19, r1, 16
2001ce4c:	30210014 	addik	r1, r1, 20
2001ce50:	b60f0008 	rtsd	r15, 8
2001ce54:	80000000 	or	r0, r0, r0

2001ce58 <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001ce58:	3021fff4 	addik	r1, r1, -12
2001ce5c:	fa610008 	swi	r19, r1, 8
2001ce60:	12610000 	addk	r19, r1, r0
2001ce64:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2001ce68:	e8730010 	lwi	r3, r19, 16
2001ce6c:	e8630010 	lwi	r3, r3, 16
2001ce70:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001ce74:	f8130004 	swi	r0, r19, 4
2001ce78:	b8000028 	bri	40		// 2001cea0
        fifo->read_inds[i] = 0;
2001ce7c:	e8730010 	lwi	r3, r19, 16
2001ce80:	e883000c 	lwi	r4, r3, 12
2001ce84:	e8730004 	lwi	r3, r19, 4
2001ce88:	64630402 	bslli	r3, r3, 2
2001ce8c:	10641800 	addk	r3, r4, r3
2001ce90:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001ce94:	e8730004 	lwi	r3, r19, 4
2001ce98:	30630001 	addik	r3, r3, 1
2001ce9c:	f8730004 	swi	r3, r19, 4
2001cea0:	e8730010 	lwi	r3, r19, 16
2001cea4:	e8830008 	lwi	r4, r3, 8
2001cea8:	e8730004 	lwi	r3, r19, 4
2001ceac:	16441803 	cmpu	r18, r4, r3
2001ceb0:	bc52ffcc 	blti	r18, -52		// 2001ce7c
        fifo->read_inds[i] = 0;
    }
}
2001ceb4:	10330000 	addk	r1, r19, r0
2001ceb8:	ea610008 	lwi	r19, r1, 8
2001cebc:	3021000c 	addik	r1, r1, 12
2001cec0:	b60f0008 	rtsd	r15, 8
2001cec4:	80000000 	or	r0, r0, r0

2001cec8 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001cec8:	3021fff4 	addik	r1, r1, -12
2001cecc:	fa610008 	swi	r19, r1, 8
2001ced0:	12610000 	addk	r19, r1, r0
2001ced4:	f8b30010 	swi	r5, r19, 16
2001ced8:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001cedc:	e8730010 	lwi	r3, r19, 16
2001cee0:	e8830004 	lwi	r4, r3, 4
2001cee4:	e8730010 	lwi	r3, r19, 16
2001cee8:	e8a3000c 	lwi	r5, r3, 12
2001ceec:	e8730014 	lwi	r3, r19, 20
2001cef0:	64630402 	bslli	r3, r3, 2
2001cef4:	10651800 	addk	r3, r5, r3
2001cef8:	e8a30000 	lwi	r5, r3, 0
2001cefc:	e8730010 	lwi	r3, r19, 16
2001cf00:	e8630000 	lwi	r3, r3, 0
2001cf04:	3063ffff 	addik	r3, r3, -1
2001cf08:	84651800 	and	r3, r5, r3
2001cf0c:	10641800 	addk	r3, r4, r3
2001cf10:	e0630000 	lbui	r3, r3, 0
2001cf14:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2001cf18:	e8730010 	lwi	r3, r19, 16
2001cf1c:	e883000c 	lwi	r4, r3, 12
2001cf20:	e8730014 	lwi	r3, r19, 20
2001cf24:	64630402 	bslli	r3, r3, 2
2001cf28:	10641800 	addk	r3, r4, r3
2001cf2c:	e8830000 	lwi	r4, r3, 0
2001cf30:	30840001 	addik	r4, r4, 1
2001cf34:	f8830000 	swi	r4, r3, 0
    return value;
2001cf38:	e0730004 	lbui	r3, r19, 4
}
2001cf3c:	10330000 	addk	r1, r19, r0
2001cf40:	ea610008 	lwi	r19, r1, 8
2001cf44:	3021000c 	addik	r1, r1, 12
2001cf48:	b60f0008 	rtsd	r15, 8
2001cf4c:	80000000 	or	r0, r0, r0

2001cf50 <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001cf50:	3021fff8 	addik	r1, r1, -8
2001cf54:	fa610004 	swi	r19, r1, 4
2001cf58:	12610000 	addk	r19, r1, r0
2001cf5c:	f8b3000c 	swi	r5, r19, 12
2001cf60:	10660000 	addk	r3, r6, r0
2001cf64:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001cf68:	e873000c 	lwi	r3, r19, 12
2001cf6c:	e8830004 	lwi	r4, r3, 4
2001cf70:	e873000c 	lwi	r3, r19, 12
2001cf74:	e8630010 	lwi	r3, r3, 16
2001cf78:	e8a30000 	lwi	r5, r3, 0
2001cf7c:	e873000c 	lwi	r3, r19, 12
2001cf80:	e8630000 	lwi	r3, r3, 0
2001cf84:	3063ffff 	addik	r3, r3, -1
2001cf88:	84651800 	and	r3, r5, r3
2001cf8c:	10641800 	addk	r3, r4, r3
2001cf90:	e0930010 	lbui	r4, r19, 16
2001cf94:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2001cf98:	e873000c 	lwi	r3, r19, 12
2001cf9c:	e8630010 	lwi	r3, r3, 16
2001cfa0:	e8830000 	lwi	r4, r3, 0
2001cfa4:	30840001 	addik	r4, r4, 1
2001cfa8:	f8830000 	swi	r4, r3, 0
}
2001cfac:	10330000 	addk	r1, r19, r0
2001cfb0:	ea610004 	lwi	r19, r1, 4
2001cfb4:	30210008 	addik	r1, r1, 8
2001cfb8:	b60f0008 	rtsd	r15, 8
2001cfbc:	80000000 	or	r0, r0, r0

2001cfc0 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001cfc0:	3021fff8 	addik	r1, r1, -8
2001cfc4:	fa610004 	swi	r19, r1, 4
2001cfc8:	12610000 	addk	r19, r1, r0
2001cfcc:	f8b3000c 	swi	r5, r19, 12
2001cfd0:	f8d30010 	swi	r6, r19, 16
2001cfd4:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001cfd8:	e873000c 	lwi	r3, r19, 12
2001cfdc:	e8630010 	lwi	r3, r3, 16
2001cfe0:	e8830000 	lwi	r4, r3, 0
2001cfe4:	e873000c 	lwi	r3, r19, 12
2001cfe8:	e8a3000c 	lwi	r5, r3, 12
2001cfec:	e8730010 	lwi	r3, r19, 16
2001cff0:	64630402 	bslli	r3, r3, 2
2001cff4:	10651800 	addk	r3, r5, r3
2001cff8:	e8630000 	lwi	r3, r3, 0
2001cffc:	14a32000 	rsubk	r5, r3, r4
2001d000:	30600001 	addik	r3, r0, 1
2001d004:	e8930014 	lwi	r4, r19, 20
2001d008:	16442803 	cmpu	r18, r4, r5
2001d00c:	bcb20008 	bgei	r18, 8		// 2001d014
2001d010:	10600000 	addk	r3, r0, r0
2001d014:	a46300ff 	andi	r3, r3, 255
}
2001d018:	10330000 	addk	r1, r19, r0
2001d01c:	ea610004 	lwi	r19, r1, 4
2001d020:	30210008 	addik	r1, r1, 8
2001d024:	b60f0008 	rtsd	r15, 8
2001d028:	80000000 	or	r0, r0, r0

2001d02c <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001d02c:	3021fff8 	addik	r1, r1, -8
2001d030:	fa610004 	swi	r19, r1, 4
2001d034:	12610000 	addk	r19, r1, r0
2001d038:	f8b3000c 	swi	r5, r19, 12
2001d03c:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001d040:	e873000c 	lwi	r3, r19, 12
2001d044:	e8630010 	lwi	r3, r3, 16
2001d048:	e8830000 	lwi	r4, r3, 0
2001d04c:	e873000c 	lwi	r3, r19, 12
2001d050:	e8a3000c 	lwi	r5, r3, 12
2001d054:	e8730010 	lwi	r3, r19, 16
2001d058:	64630402 	bslli	r3, r3, 2
2001d05c:	10651800 	addk	r3, r5, r3
2001d060:	e8630000 	lwi	r3, r3, 0
2001d064:	14632000 	rsubk	r3, r3, r4
}
2001d068:	10330000 	addk	r1, r19, r0
2001d06c:	ea610004 	lwi	r19, r1, 4
2001d070:	30210008 	addik	r1, r1, 8
2001d074:	b60f0008 	rtsd	r15, 8
2001d078:	80000000 	or	r0, r0, r0

2001d07c <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2001d07c:	3021fff4 	addik	r1, r1, -12
2001d080:	fa610008 	swi	r19, r1, 8
2001d084:	12610000 	addk	r19, r1, r0
2001d088:	f8b30010 	swi	r5, r19, 16
2001d08c:	f8d30014 	swi	r6, r19, 20
2001d090:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001d094:	f8130004 	swi	r0, r19, 4
2001d098:	b800005c 	bri	92		// 2001d0f4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001d09c:	e8730010 	lwi	r3, r19, 16
2001d0a0:	e8830000 	lwi	r4, r3, 0
2001d0a4:	e8730010 	lwi	r3, r19, 16
2001d0a8:	e8a3000c 	lwi	r5, r3, 12
2001d0ac:	e8730004 	lwi	r3, r19, 4
2001d0b0:	64630402 	bslli	r3, r3, 2
2001d0b4:	10651800 	addk	r3, r5, r3
2001d0b8:	e8a30000 	lwi	r5, r3, 0
2001d0bc:	e8730010 	lwi	r3, r19, 16
2001d0c0:	e8630010 	lwi	r3, r3, 16
2001d0c4:	e8630000 	lwi	r3, r3, 0
2001d0c8:	14632800 	rsubk	r3, r3, r5
2001d0cc:	10641800 	addk	r3, r4, r3
2001d0d0:	30830001 	addik	r4, r3, 1
2001d0d4:	e8730018 	lwi	r3, r19, 24
2001d0d8:	16441803 	cmpu	r18, r4, r3
2001d0dc:	bc52000c 	blti	r18, 12		// 2001d0e8
            return 0;
2001d0e0:	10600000 	addk	r3, r0, r0
2001d0e4:	b8000024 	bri	36		// 2001d108
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001d0e8:	e8730004 	lwi	r3, r19, 4
2001d0ec:	30630001 	addik	r3, r3, 1
2001d0f0:	f8730004 	swi	r3, r19, 4
2001d0f4:	e8930004 	lwi	r4, r19, 4
2001d0f8:	e8730014 	lwi	r3, r19, 20
2001d0fc:	16432003 	cmpu	r18, r3, r4
2001d100:	bc52ff9c 	blti	r18, -100		// 2001d09c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001d104:	30600001 	addik	r3, r0, 1
}
2001d108:	10330000 	addk	r1, r19, r0
2001d10c:	ea610008 	lwi	r19, r1, 8
2001d110:	3021000c 	addik	r1, r1, 12
2001d114:	b60f0008 	rtsd	r15, 8
2001d118:	80000000 	or	r0, r0, r0

2001d11c <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001d11c:	3021ffec 	addik	r1, r1, -20
2001d120:	fa610010 	swi	r19, r1, 16
2001d124:	12610000 	addk	r19, r1, r0
2001d128:	f8b30018 	swi	r5, r19, 24
2001d12c:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001d130:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001d134:	f8130004 	swi	r0, r19, 4
2001d138:	b8000054 	bri	84		// 2001d18c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001d13c:	e8730018 	lwi	r3, r19, 24
2001d140:	e8630010 	lwi	r3, r3, 16
2001d144:	e8830000 	lwi	r4, r3, 0
2001d148:	e8730018 	lwi	r3, r19, 24
2001d14c:	e8a3000c 	lwi	r5, r3, 12
2001d150:	e8730004 	lwi	r3, r19, 4
2001d154:	64630402 	bslli	r3, r3, 2
2001d158:	10651800 	addk	r3, r5, r3
2001d15c:	e8630000 	lwi	r3, r3, 0
2001d160:	14632000 	rsubk	r3, r3, r4
2001d164:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001d168:	e8930008 	lwi	r4, r19, 8
2001d16c:	e873000c 	lwi	r3, r19, 12
2001d170:	16441803 	cmpu	r18, r4, r3
2001d174:	bcb20008 	bgei	r18, 8		// 2001d17c
2001d178:	10640000 	addk	r3, r4, r0
2001d17c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001d180:	e8730004 	lwi	r3, r19, 4
2001d184:	30630001 	addik	r3, r3, 1
2001d188:	f8730004 	swi	r3, r19, 4
2001d18c:	e8930004 	lwi	r4, r19, 4
2001d190:	e873001c 	lwi	r3, r19, 28
2001d194:	16432003 	cmpu	r18, r3, r4
2001d198:	bc52ffa4 	blti	r18, -92		// 2001d13c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001d19c:	e8730018 	lwi	r3, r19, 24
2001d1a0:	e8830000 	lwi	r4, r3, 0
2001d1a4:	e8730008 	lwi	r3, r19, 8
2001d1a8:	14632000 	rsubk	r3, r3, r4
}
2001d1ac:	10330000 	addk	r1, r19, r0
2001d1b0:	ea610010 	lwi	r19, r1, 16
2001d1b4:	30210014 	addik	r1, r1, 20
2001d1b8:	b60f0008 	rtsd	r15, 8
2001d1bc:	80000000 	or	r0, r0, r0

2001d1c0 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001d1c0:	3021fff4 	addik	r1, r1, -12
2001d1c4:	fa610008 	swi	r19, r1, 8
2001d1c8:	12610000 	addk	r19, r1, r0
2001d1cc:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2001d1d0:	e8730010 	lwi	r3, r19, 16
2001d1d4:	e8630010 	lwi	r3, r3, 16
2001d1d8:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001d1dc:	f8130004 	swi	r0, r19, 4
2001d1e0:	b8000028 	bri	40		// 2001d208
        fifo->read_inds[i] = 0;
2001d1e4:	e8730010 	lwi	r3, r19, 16
2001d1e8:	e883000c 	lwi	r4, r3, 12
2001d1ec:	e8730004 	lwi	r3, r19, 4
2001d1f0:	64630402 	bslli	r3, r3, 2
2001d1f4:	10641800 	addk	r3, r4, r3
2001d1f8:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001d1fc:	e8730004 	lwi	r3, r19, 4
2001d200:	30630001 	addik	r3, r3, 1
2001d204:	f8730004 	swi	r3, r19, 4
2001d208:	e8730010 	lwi	r3, r19, 16
2001d20c:	e8830008 	lwi	r4, r3, 8
2001d210:	e8730004 	lwi	r3, r19, 4
2001d214:	16441803 	cmpu	r18, r4, r3
2001d218:	bc52ffcc 	blti	r18, -52		// 2001d1e4
        fifo->read_inds[i] = 0;
    }
}
2001d21c:	10330000 	addk	r1, r19, r0
2001d220:	ea610008 	lwi	r19, r1, 8
2001d224:	3021000c 	addik	r1, r1, 12
2001d228:	b60f0008 	rtsd	r15, 8
2001d22c:	80000000 	or	r0, r0, r0

2001d230 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001d230:	3021fff4 	addik	r1, r1, -12
2001d234:	fa610008 	swi	r19, r1, 8
2001d238:	12610000 	addk	r19, r1, r0
2001d23c:	f8b30010 	swi	r5, r19, 16
2001d240:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001d244:	e8730010 	lwi	r3, r19, 16
2001d248:	e8830004 	lwi	r4, r3, 4
2001d24c:	e8730010 	lwi	r3, r19, 16
2001d250:	e8a3000c 	lwi	r5, r3, 12
2001d254:	e8730014 	lwi	r3, r19, 20
2001d258:	64630402 	bslli	r3, r3, 2
2001d25c:	10651800 	addk	r3, r5, r3
2001d260:	e8a30000 	lwi	r5, r3, 0
2001d264:	e8730010 	lwi	r3, r19, 16
2001d268:	e8630000 	lwi	r3, r3, 0
2001d26c:	3063ffff 	addik	r3, r3, -1
2001d270:	84651800 	and	r3, r5, r3
2001d274:	10631800 	addk	r3, r3, r3
2001d278:	10641800 	addk	r3, r4, r3
2001d27c:	e4630000 	lhui	r3, r3, 0
2001d280:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2001d284:	e8730010 	lwi	r3, r19, 16
2001d288:	e883000c 	lwi	r4, r3, 12
2001d28c:	e8730014 	lwi	r3, r19, 20
2001d290:	64630402 	bslli	r3, r3, 2
2001d294:	10641800 	addk	r3, r4, r3
2001d298:	e8830000 	lwi	r4, r3, 0
2001d29c:	30840001 	addik	r4, r4, 1
2001d2a0:	f8830000 	swi	r4, r3, 0
    return value;
2001d2a4:	e4730004 	lhui	r3, r19, 4
}
2001d2a8:	10330000 	addk	r1, r19, r0
2001d2ac:	ea610008 	lwi	r19, r1, 8
2001d2b0:	3021000c 	addik	r1, r1, 12
2001d2b4:	b60f0008 	rtsd	r15, 8
2001d2b8:	80000000 	or	r0, r0, r0

2001d2bc <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001d2bc:	3021fff8 	addik	r1, r1, -8
2001d2c0:	fa610004 	swi	r19, r1, 4
2001d2c4:	12610000 	addk	r19, r1, r0
2001d2c8:	f8b3000c 	swi	r5, r19, 12
2001d2cc:	10660000 	addk	r3, r6, r0
2001d2d0:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001d2d4:	e873000c 	lwi	r3, r19, 12
2001d2d8:	e8830004 	lwi	r4, r3, 4
2001d2dc:	e873000c 	lwi	r3, r19, 12
2001d2e0:	e8630010 	lwi	r3, r3, 16
2001d2e4:	e8a30000 	lwi	r5, r3, 0
2001d2e8:	e873000c 	lwi	r3, r19, 12
2001d2ec:	e8630000 	lwi	r3, r3, 0
2001d2f0:	3063ffff 	addik	r3, r3, -1
2001d2f4:	84651800 	and	r3, r5, r3
2001d2f8:	10631800 	addk	r3, r3, r3
2001d2fc:	10641800 	addk	r3, r4, r3
2001d300:	e4930010 	lhui	r4, r19, 16
2001d304:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2001d308:	e873000c 	lwi	r3, r19, 12
2001d30c:	e8630010 	lwi	r3, r3, 16
2001d310:	e8830000 	lwi	r4, r3, 0
2001d314:	30840001 	addik	r4, r4, 1
2001d318:	f8830000 	swi	r4, r3, 0
}
2001d31c:	10330000 	addk	r1, r19, r0
2001d320:	ea610004 	lwi	r19, r1, 4
2001d324:	30210008 	addik	r1, r1, 8
2001d328:	b60f0008 	rtsd	r15, 8
2001d32c:	80000000 	or	r0, r0, r0

2001d330 <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001d330:	3021fff8 	addik	r1, r1, -8
2001d334:	fa610004 	swi	r19, r1, 4
2001d338:	12610000 	addk	r19, r1, r0
2001d33c:	f8b3000c 	swi	r5, r19, 12
2001d340:	f8d30010 	swi	r6, r19, 16
2001d344:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001d348:	e873000c 	lwi	r3, r19, 12
2001d34c:	e8630010 	lwi	r3, r3, 16
2001d350:	e8830000 	lwi	r4, r3, 0
2001d354:	e873000c 	lwi	r3, r19, 12
2001d358:	e8a3000c 	lwi	r5, r3, 12
2001d35c:	e8730010 	lwi	r3, r19, 16
2001d360:	64630402 	bslli	r3, r3, 2
2001d364:	10651800 	addk	r3, r5, r3
2001d368:	e8630000 	lwi	r3, r3, 0
2001d36c:	14a32000 	rsubk	r5, r3, r4
2001d370:	30600001 	addik	r3, r0, 1
2001d374:	e8930014 	lwi	r4, r19, 20
2001d378:	16442803 	cmpu	r18, r4, r5
2001d37c:	bcb20008 	bgei	r18, 8		// 2001d384
2001d380:	10600000 	addk	r3, r0, r0
2001d384:	a46300ff 	andi	r3, r3, 255
}
2001d388:	10330000 	addk	r1, r19, r0
2001d38c:	ea610004 	lwi	r19, r1, 4
2001d390:	30210008 	addik	r1, r1, 8
2001d394:	b60f0008 	rtsd	r15, 8
2001d398:	80000000 	or	r0, r0, r0

2001d39c <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001d39c:	3021fff8 	addik	r1, r1, -8
2001d3a0:	fa610004 	swi	r19, r1, 4
2001d3a4:	12610000 	addk	r19, r1, r0
2001d3a8:	f8b3000c 	swi	r5, r19, 12
2001d3ac:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001d3b0:	e873000c 	lwi	r3, r19, 12
2001d3b4:	e8630010 	lwi	r3, r3, 16
2001d3b8:	e8830000 	lwi	r4, r3, 0
2001d3bc:	e873000c 	lwi	r3, r19, 12
2001d3c0:	e8a3000c 	lwi	r5, r3, 12
2001d3c4:	e8730010 	lwi	r3, r19, 16
2001d3c8:	64630402 	bslli	r3, r3, 2
2001d3cc:	10651800 	addk	r3, r5, r3
2001d3d0:	e8630000 	lwi	r3, r3, 0
2001d3d4:	14632000 	rsubk	r3, r3, r4
}
2001d3d8:	10330000 	addk	r1, r19, r0
2001d3dc:	ea610004 	lwi	r19, r1, 4
2001d3e0:	30210008 	addik	r1, r1, 8
2001d3e4:	b60f0008 	rtsd	r15, 8
2001d3e8:	80000000 	or	r0, r0, r0

2001d3ec <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2001d3ec:	3021fff4 	addik	r1, r1, -12
2001d3f0:	fa610008 	swi	r19, r1, 8
2001d3f4:	12610000 	addk	r19, r1, r0
2001d3f8:	f8b30010 	swi	r5, r19, 16
2001d3fc:	f8d30014 	swi	r6, r19, 20
2001d400:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001d404:	f8130004 	swi	r0, r19, 4
2001d408:	b800005c 	bri	92		// 2001d464
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001d40c:	e8730010 	lwi	r3, r19, 16
2001d410:	e8830000 	lwi	r4, r3, 0
2001d414:	e8730010 	lwi	r3, r19, 16
2001d418:	e8a3000c 	lwi	r5, r3, 12
2001d41c:	e8730004 	lwi	r3, r19, 4
2001d420:	64630402 	bslli	r3, r3, 2
2001d424:	10651800 	addk	r3, r5, r3
2001d428:	e8a30000 	lwi	r5, r3, 0
2001d42c:	e8730010 	lwi	r3, r19, 16
2001d430:	e8630010 	lwi	r3, r3, 16
2001d434:	e8630000 	lwi	r3, r3, 0
2001d438:	14632800 	rsubk	r3, r3, r5
2001d43c:	10641800 	addk	r3, r4, r3
2001d440:	30830001 	addik	r4, r3, 1
2001d444:	e8730018 	lwi	r3, r19, 24
2001d448:	16441803 	cmpu	r18, r4, r3
2001d44c:	bc52000c 	blti	r18, 12		// 2001d458
            return 0;
2001d450:	10600000 	addk	r3, r0, r0
2001d454:	b8000024 	bri	36		// 2001d478
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001d458:	e8730004 	lwi	r3, r19, 4
2001d45c:	30630001 	addik	r3, r3, 1
2001d460:	f8730004 	swi	r3, r19, 4
2001d464:	e8930004 	lwi	r4, r19, 4
2001d468:	e8730014 	lwi	r3, r19, 20
2001d46c:	16432003 	cmpu	r18, r3, r4
2001d470:	bc52ff9c 	blti	r18, -100		// 2001d40c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001d474:	30600001 	addik	r3, r0, 1
}
2001d478:	10330000 	addk	r1, r19, r0
2001d47c:	ea610008 	lwi	r19, r1, 8
2001d480:	3021000c 	addik	r1, r1, 12
2001d484:	b60f0008 	rtsd	r15, 8
2001d488:	80000000 	or	r0, r0, r0

2001d48c <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001d48c:	3021ffec 	addik	r1, r1, -20
2001d490:	fa610010 	swi	r19, r1, 16
2001d494:	12610000 	addk	r19, r1, r0
2001d498:	f8b30018 	swi	r5, r19, 24
2001d49c:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001d4a0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001d4a4:	f8130004 	swi	r0, r19, 4
2001d4a8:	b8000054 	bri	84		// 2001d4fc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001d4ac:	e8730018 	lwi	r3, r19, 24
2001d4b0:	e8630010 	lwi	r3, r3, 16
2001d4b4:	e8830000 	lwi	r4, r3, 0
2001d4b8:	e8730018 	lwi	r3, r19, 24
2001d4bc:	e8a3000c 	lwi	r5, r3, 12
2001d4c0:	e8730004 	lwi	r3, r19, 4
2001d4c4:	64630402 	bslli	r3, r3, 2
2001d4c8:	10651800 	addk	r3, r5, r3
2001d4cc:	e8630000 	lwi	r3, r3, 0
2001d4d0:	14632000 	rsubk	r3, r3, r4
2001d4d4:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001d4d8:	e8930008 	lwi	r4, r19, 8
2001d4dc:	e873000c 	lwi	r3, r19, 12
2001d4e0:	16441803 	cmpu	r18, r4, r3
2001d4e4:	bcb20008 	bgei	r18, 8		// 2001d4ec
2001d4e8:	10640000 	addk	r3, r4, r0
2001d4ec:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001d4f0:	e8730004 	lwi	r3, r19, 4
2001d4f4:	30630001 	addik	r3, r3, 1
2001d4f8:	f8730004 	swi	r3, r19, 4
2001d4fc:	e8930004 	lwi	r4, r19, 4
2001d500:	e873001c 	lwi	r3, r19, 28
2001d504:	16432003 	cmpu	r18, r3, r4
2001d508:	bc52ffa4 	blti	r18, -92		// 2001d4ac
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001d50c:	e8730018 	lwi	r3, r19, 24
2001d510:	e8830000 	lwi	r4, r3, 0
2001d514:	e8730008 	lwi	r3, r19, 8
2001d518:	14632000 	rsubk	r3, r3, r4
}
2001d51c:	10330000 	addk	r1, r19, r0
2001d520:	ea610010 	lwi	r19, r1, 16
2001d524:	30210014 	addik	r1, r1, 20
2001d528:	b60f0008 	rtsd	r15, 8
2001d52c:	80000000 	or	r0, r0, r0

2001d530 <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001d530:	3021fff4 	addik	r1, r1, -12
2001d534:	fa610008 	swi	r19, r1, 8
2001d538:	12610000 	addk	r19, r1, r0
2001d53c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2001d540:	e8730010 	lwi	r3, r19, 16
2001d544:	e8630010 	lwi	r3, r3, 16
2001d548:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001d54c:	f8130004 	swi	r0, r19, 4
2001d550:	b8000028 	bri	40		// 2001d578
        fifo->read_inds[i] = 0;
2001d554:	e8730010 	lwi	r3, r19, 16
2001d558:	e883000c 	lwi	r4, r3, 12
2001d55c:	e8730004 	lwi	r3, r19, 4
2001d560:	64630402 	bslli	r3, r3, 2
2001d564:	10641800 	addk	r3, r4, r3
2001d568:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001d56c:	e8730004 	lwi	r3, r19, 4
2001d570:	30630001 	addik	r3, r3, 1
2001d574:	f8730004 	swi	r3, r19, 4
2001d578:	e8730010 	lwi	r3, r19, 16
2001d57c:	e8830008 	lwi	r4, r3, 8
2001d580:	e8730004 	lwi	r3, r19, 4
2001d584:	16441803 	cmpu	r18, r4, r3
2001d588:	bc52ffcc 	blti	r18, -52		// 2001d554
        fifo->read_inds[i] = 0;
    }
}
2001d58c:	10330000 	addk	r1, r19, r0
2001d590:	ea610008 	lwi	r19, r1, 8
2001d594:	3021000c 	addik	r1, r1, 12
2001d598:	b60f0008 	rtsd	r15, 8
2001d59c:	80000000 	or	r0, r0, r0

2001d5a0 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001d5a0:	3021fff4 	addik	r1, r1, -12
2001d5a4:	fa610008 	swi	r19, r1, 8
2001d5a8:	12610000 	addk	r19, r1, r0
2001d5ac:	f8b30010 	swi	r5, r19, 16
2001d5b0:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001d5b4:	e8730010 	lwi	r3, r19, 16
2001d5b8:	e8830004 	lwi	r4, r3, 4
2001d5bc:	e8730010 	lwi	r3, r19, 16
2001d5c0:	e8a3000c 	lwi	r5, r3, 12
2001d5c4:	e8730014 	lwi	r3, r19, 20
2001d5c8:	64630402 	bslli	r3, r3, 2
2001d5cc:	10651800 	addk	r3, r5, r3
2001d5d0:	e8a30000 	lwi	r5, r3, 0
2001d5d4:	e8730010 	lwi	r3, r19, 16
2001d5d8:	e8630000 	lwi	r3, r3, 0
2001d5dc:	3063ffff 	addik	r3, r3, -1
2001d5e0:	84651800 	and	r3, r5, r3
2001d5e4:	64630402 	bslli	r3, r3, 2
2001d5e8:	10641800 	addk	r3, r4, r3
2001d5ec:	e8630000 	lwi	r3, r3, 0
2001d5f0:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2001d5f4:	e8730010 	lwi	r3, r19, 16
2001d5f8:	e883000c 	lwi	r4, r3, 12
2001d5fc:	e8730014 	lwi	r3, r19, 20
2001d600:	64630402 	bslli	r3, r3, 2
2001d604:	10641800 	addk	r3, r4, r3
2001d608:	e8830000 	lwi	r4, r3, 0
2001d60c:	30840001 	addik	r4, r4, 1
2001d610:	f8830000 	swi	r4, r3, 0
    return value;
2001d614:	e8730004 	lwi	r3, r19, 4
}
2001d618:	10330000 	addk	r1, r19, r0
2001d61c:	ea610008 	lwi	r19, r1, 8
2001d620:	3021000c 	addik	r1, r1, 12
2001d624:	b60f0008 	rtsd	r15, 8
2001d628:	80000000 	or	r0, r0, r0

2001d62c <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001d62c:	3021fff8 	addik	r1, r1, -8
2001d630:	fa610004 	swi	r19, r1, 4
2001d634:	12610000 	addk	r19, r1, r0
2001d638:	f8b3000c 	swi	r5, r19, 12
2001d63c:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001d640:	e873000c 	lwi	r3, r19, 12
2001d644:	e8830004 	lwi	r4, r3, 4
2001d648:	e873000c 	lwi	r3, r19, 12
2001d64c:	e8630010 	lwi	r3, r3, 16
2001d650:	e8a30000 	lwi	r5, r3, 0
2001d654:	e873000c 	lwi	r3, r19, 12
2001d658:	e8630000 	lwi	r3, r3, 0
2001d65c:	3063ffff 	addik	r3, r3, -1
2001d660:	84651800 	and	r3, r5, r3
2001d664:	64630402 	bslli	r3, r3, 2
2001d668:	10641800 	addk	r3, r4, r3
2001d66c:	e8930010 	lwi	r4, r19, 16
2001d670:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2001d674:	e873000c 	lwi	r3, r19, 12
2001d678:	e8630010 	lwi	r3, r3, 16
2001d67c:	e8830000 	lwi	r4, r3, 0
2001d680:	30840001 	addik	r4, r4, 1
2001d684:	f8830000 	swi	r4, r3, 0
}
2001d688:	10330000 	addk	r1, r19, r0
2001d68c:	ea610004 	lwi	r19, r1, 4
2001d690:	30210008 	addik	r1, r1, 8
2001d694:	b60f0008 	rtsd	r15, 8
2001d698:	80000000 	or	r0, r0, r0

2001d69c <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001d69c:	3021fff8 	addik	r1, r1, -8
2001d6a0:	fa610004 	swi	r19, r1, 4
2001d6a4:	12610000 	addk	r19, r1, r0
2001d6a8:	f8b3000c 	swi	r5, r19, 12
2001d6ac:	f8d30010 	swi	r6, r19, 16
2001d6b0:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001d6b4:	e873000c 	lwi	r3, r19, 12
2001d6b8:	e8630010 	lwi	r3, r3, 16
2001d6bc:	e8830000 	lwi	r4, r3, 0
2001d6c0:	e873000c 	lwi	r3, r19, 12
2001d6c4:	e8a3000c 	lwi	r5, r3, 12
2001d6c8:	e8730010 	lwi	r3, r19, 16
2001d6cc:	64630402 	bslli	r3, r3, 2
2001d6d0:	10651800 	addk	r3, r5, r3
2001d6d4:	e8630000 	lwi	r3, r3, 0
2001d6d8:	14a32000 	rsubk	r5, r3, r4
2001d6dc:	30600001 	addik	r3, r0, 1
2001d6e0:	e8930014 	lwi	r4, r19, 20
2001d6e4:	16442803 	cmpu	r18, r4, r5
2001d6e8:	bcb20008 	bgei	r18, 8		// 2001d6f0
2001d6ec:	10600000 	addk	r3, r0, r0
2001d6f0:	a46300ff 	andi	r3, r3, 255
}
2001d6f4:	10330000 	addk	r1, r19, r0
2001d6f8:	ea610004 	lwi	r19, r1, 4
2001d6fc:	30210008 	addik	r1, r1, 8
2001d700:	b60f0008 	rtsd	r15, 8
2001d704:	80000000 	or	r0, r0, r0

2001d708 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001d708:	3021fff8 	addik	r1, r1, -8
2001d70c:	fa610004 	swi	r19, r1, 4
2001d710:	12610000 	addk	r19, r1, r0
2001d714:	f8b3000c 	swi	r5, r19, 12
2001d718:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001d71c:	e873000c 	lwi	r3, r19, 12
2001d720:	e8630010 	lwi	r3, r3, 16
2001d724:	e8830000 	lwi	r4, r3, 0
2001d728:	e873000c 	lwi	r3, r19, 12
2001d72c:	e8a3000c 	lwi	r5, r3, 12
2001d730:	e8730010 	lwi	r3, r19, 16
2001d734:	64630402 	bslli	r3, r3, 2
2001d738:	10651800 	addk	r3, r5, r3
2001d73c:	e8630000 	lwi	r3, r3, 0
2001d740:	14632000 	rsubk	r3, r3, r4
}
2001d744:	10330000 	addk	r1, r19, r0
2001d748:	ea610004 	lwi	r19, r1, 4
2001d74c:	30210008 	addik	r1, r1, 8
2001d750:	b60f0008 	rtsd	r15, 8
2001d754:	80000000 	or	r0, r0, r0

2001d758 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2001d758:	3021fff4 	addik	r1, r1, -12
2001d75c:	fa610008 	swi	r19, r1, 8
2001d760:	12610000 	addk	r19, r1, r0
2001d764:	f8b30010 	swi	r5, r19, 16
2001d768:	f8d30014 	swi	r6, r19, 20
2001d76c:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001d770:	f8130004 	swi	r0, r19, 4
2001d774:	b800005c 	bri	92		// 2001d7d0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001d778:	e8730010 	lwi	r3, r19, 16
2001d77c:	e8830000 	lwi	r4, r3, 0
2001d780:	e8730010 	lwi	r3, r19, 16
2001d784:	e8a3000c 	lwi	r5, r3, 12
2001d788:	e8730004 	lwi	r3, r19, 4
2001d78c:	64630402 	bslli	r3, r3, 2
2001d790:	10651800 	addk	r3, r5, r3
2001d794:	e8a30000 	lwi	r5, r3, 0
2001d798:	e8730010 	lwi	r3, r19, 16
2001d79c:	e8630010 	lwi	r3, r3, 16
2001d7a0:	e8630000 	lwi	r3, r3, 0
2001d7a4:	14632800 	rsubk	r3, r3, r5
2001d7a8:	10641800 	addk	r3, r4, r3
2001d7ac:	30830001 	addik	r4, r3, 1
2001d7b0:	e8730018 	lwi	r3, r19, 24
2001d7b4:	16441803 	cmpu	r18, r4, r3
2001d7b8:	bc52000c 	blti	r18, 12		// 2001d7c4
            return 0;
2001d7bc:	10600000 	addk	r3, r0, r0
2001d7c0:	b8000024 	bri	36		// 2001d7e4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001d7c4:	e8730004 	lwi	r3, r19, 4
2001d7c8:	30630001 	addik	r3, r3, 1
2001d7cc:	f8730004 	swi	r3, r19, 4
2001d7d0:	e8930004 	lwi	r4, r19, 4
2001d7d4:	e8730014 	lwi	r3, r19, 20
2001d7d8:	16432003 	cmpu	r18, r3, r4
2001d7dc:	bc52ff9c 	blti	r18, -100		// 2001d778
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001d7e0:	30600001 	addik	r3, r0, 1
}
2001d7e4:	10330000 	addk	r1, r19, r0
2001d7e8:	ea610008 	lwi	r19, r1, 8
2001d7ec:	3021000c 	addik	r1, r1, 12
2001d7f0:	b60f0008 	rtsd	r15, 8
2001d7f4:	80000000 	or	r0, r0, r0

2001d7f8 <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001d7f8:	3021ffec 	addik	r1, r1, -20
2001d7fc:	fa610010 	swi	r19, r1, 16
2001d800:	12610000 	addk	r19, r1, r0
2001d804:	f8b30018 	swi	r5, r19, 24
2001d808:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001d80c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001d810:	f8130004 	swi	r0, r19, 4
2001d814:	b8000054 	bri	84		// 2001d868
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001d818:	e8730018 	lwi	r3, r19, 24
2001d81c:	e8630010 	lwi	r3, r3, 16
2001d820:	e8830000 	lwi	r4, r3, 0
2001d824:	e8730018 	lwi	r3, r19, 24
2001d828:	e8a3000c 	lwi	r5, r3, 12
2001d82c:	e8730004 	lwi	r3, r19, 4
2001d830:	64630402 	bslli	r3, r3, 2
2001d834:	10651800 	addk	r3, r5, r3
2001d838:	e8630000 	lwi	r3, r3, 0
2001d83c:	14632000 	rsubk	r3, r3, r4
2001d840:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001d844:	e8930008 	lwi	r4, r19, 8
2001d848:	e873000c 	lwi	r3, r19, 12
2001d84c:	16441803 	cmpu	r18, r4, r3
2001d850:	bcb20008 	bgei	r18, 8		// 2001d858
2001d854:	10640000 	addk	r3, r4, r0
2001d858:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001d85c:	e8730004 	lwi	r3, r19, 4
2001d860:	30630001 	addik	r3, r3, 1
2001d864:	f8730004 	swi	r3, r19, 4
2001d868:	e8930004 	lwi	r4, r19, 4
2001d86c:	e873001c 	lwi	r3, r19, 28
2001d870:	16432003 	cmpu	r18, r3, r4
2001d874:	bc52ffa4 	blti	r18, -92		// 2001d818
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001d878:	e8730018 	lwi	r3, r19, 24
2001d87c:	e8830000 	lwi	r4, r3, 0
2001d880:	e8730008 	lwi	r3, r19, 8
2001d884:	14632000 	rsubk	r3, r3, r4
}
2001d888:	10330000 	addk	r1, r19, r0
2001d88c:	ea610010 	lwi	r19, r1, 16
2001d890:	30210014 	addik	r1, r1, 20
2001d894:	b60f0008 	rtsd	r15, 8
2001d898:	80000000 	or	r0, r0, r0

2001d89c <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001d89c:	3021fff4 	addik	r1, r1, -12
2001d8a0:	fa610008 	swi	r19, r1, 8
2001d8a4:	12610000 	addk	r19, r1, r0
2001d8a8:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2001d8ac:	e8730010 	lwi	r3, r19, 16
2001d8b0:	e8630010 	lwi	r3, r3, 16
2001d8b4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001d8b8:	f8130004 	swi	r0, r19, 4
2001d8bc:	b8000028 	bri	40		// 2001d8e4
        fifo->read_inds[i] = 0;
2001d8c0:	e8730010 	lwi	r3, r19, 16
2001d8c4:	e883000c 	lwi	r4, r3, 12
2001d8c8:	e8730004 	lwi	r3, r19, 4
2001d8cc:	64630402 	bslli	r3, r3, 2
2001d8d0:	10641800 	addk	r3, r4, r3
2001d8d4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001d8d8:	e8730004 	lwi	r3, r19, 4
2001d8dc:	30630001 	addik	r3, r3, 1
2001d8e0:	f8730004 	swi	r3, r19, 4
2001d8e4:	e8730010 	lwi	r3, r19, 16
2001d8e8:	e8830008 	lwi	r4, r3, 8
2001d8ec:	e8730004 	lwi	r3, r19, 4
2001d8f0:	16441803 	cmpu	r18, r4, r3
2001d8f4:	bc52ffcc 	blti	r18, -52		// 2001d8c0
        fifo->read_inds[i] = 0;
    }
}
2001d8f8:	10330000 	addk	r1, r19, r0
2001d8fc:	ea610008 	lwi	r19, r1, 8
2001d900:	3021000c 	addik	r1, r1, 12
2001d904:	b60f0008 	rtsd	r15, 8
2001d908:	80000000 	or	r0, r0, r0

2001d90c <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001d90c:	3021fff0 	addik	r1, r1, -16
2001d910:	fa61000c 	swi	r19, r1, 12
2001d914:	12610000 	addk	r19, r1, r0
2001d918:	f8b30014 	swi	r5, r19, 20
2001d91c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001d920:	e8730014 	lwi	r3, r19, 20
2001d924:	e8830004 	lwi	r4, r3, 4
2001d928:	e8730014 	lwi	r3, r19, 20
2001d92c:	e8a3000c 	lwi	r5, r3, 12
2001d930:	e8730018 	lwi	r3, r19, 24
2001d934:	64630402 	bslli	r3, r3, 2
2001d938:	10651800 	addk	r3, r5, r3
2001d93c:	e8a30000 	lwi	r5, r3, 0
2001d940:	e8730014 	lwi	r3, r19, 20
2001d944:	e8630000 	lwi	r3, r3, 0
2001d948:	3063ffff 	addik	r3, r3, -1
2001d94c:	84651800 	and	r3, r5, r3
2001d950:	64630403 	bslli	r3, r3, 3
2001d954:	10641800 	addk	r3, r4, r3
2001d958:	e8830000 	lwi	r4, r3, 0
2001d95c:	e8a30004 	lwi	r5, r3, 4
2001d960:	f8930004 	swi	r4, r19, 4
2001d964:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2001d968:	e8730014 	lwi	r3, r19, 20
2001d96c:	e883000c 	lwi	r4, r3, 12
2001d970:	e8730018 	lwi	r3, r19, 24
2001d974:	64630402 	bslli	r3, r3, 2
2001d978:	10641800 	addk	r3, r4, r3
2001d97c:	e8830000 	lwi	r4, r3, 0
2001d980:	30840001 	addik	r4, r4, 1
2001d984:	f8830000 	swi	r4, r3, 0
    return value;
2001d988:	e8930004 	lwi	r4, r19, 4
2001d98c:	e8b30008 	lwi	r5, r19, 8
}
2001d990:	10640000 	addk	r3, r4, r0
2001d994:	10850000 	addk	r4, r5, r0
2001d998:	10330000 	addk	r1, r19, r0
2001d99c:	ea61000c 	lwi	r19, r1, 12
2001d9a0:	30210010 	addik	r1, r1, 16
2001d9a4:	b60f0008 	rtsd	r15, 8
2001d9a8:	80000000 	or	r0, r0, r0

2001d9ac <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001d9ac:	3021fff8 	addik	r1, r1, -8
2001d9b0:	fa610004 	swi	r19, r1, 4
2001d9b4:	12610000 	addk	r19, r1, r0
2001d9b8:	f8b3000c 	swi	r5, r19, 12
2001d9bc:	f8d30010 	swi	r6, r19, 16
2001d9c0:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001d9c4:	e873000c 	lwi	r3, r19, 12
2001d9c8:	e8830004 	lwi	r4, r3, 4
2001d9cc:	e873000c 	lwi	r3, r19, 12
2001d9d0:	e8630010 	lwi	r3, r3, 16
2001d9d4:	e8a30000 	lwi	r5, r3, 0
2001d9d8:	e873000c 	lwi	r3, r19, 12
2001d9dc:	e8630000 	lwi	r3, r3, 0
2001d9e0:	3063ffff 	addik	r3, r3, -1
2001d9e4:	84651800 	and	r3, r5, r3
2001d9e8:	64630403 	bslli	r3, r3, 3
2001d9ec:	10641800 	addk	r3, r4, r3
2001d9f0:	e8930010 	lwi	r4, r19, 16
2001d9f4:	e8b30014 	lwi	r5, r19, 20
2001d9f8:	f8830000 	swi	r4, r3, 0
2001d9fc:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2001da00:	e873000c 	lwi	r3, r19, 12
2001da04:	e8630010 	lwi	r3, r3, 16
2001da08:	e8830000 	lwi	r4, r3, 0
2001da0c:	30840001 	addik	r4, r4, 1
2001da10:	f8830000 	swi	r4, r3, 0
}
2001da14:	10330000 	addk	r1, r19, r0
2001da18:	ea610004 	lwi	r19, r1, 4
2001da1c:	30210008 	addik	r1, r1, 8
2001da20:	b60f0008 	rtsd	r15, 8
2001da24:	80000000 	or	r0, r0, r0

2001da28 <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001da28:	3021fff8 	addik	r1, r1, -8
2001da2c:	fa610004 	swi	r19, r1, 4
2001da30:	12610000 	addk	r19, r1, r0
2001da34:	f8b3000c 	swi	r5, r19, 12
2001da38:	f8d30010 	swi	r6, r19, 16
2001da3c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001da40:	e873000c 	lwi	r3, r19, 12
2001da44:	e8630010 	lwi	r3, r3, 16
2001da48:	e8830000 	lwi	r4, r3, 0
2001da4c:	e873000c 	lwi	r3, r19, 12
2001da50:	e8a3000c 	lwi	r5, r3, 12
2001da54:	e8730010 	lwi	r3, r19, 16
2001da58:	64630402 	bslli	r3, r3, 2
2001da5c:	10651800 	addk	r3, r5, r3
2001da60:	e8630000 	lwi	r3, r3, 0
2001da64:	14a32000 	rsubk	r5, r3, r4
2001da68:	30600001 	addik	r3, r0, 1
2001da6c:	e8930014 	lwi	r4, r19, 20
2001da70:	16442803 	cmpu	r18, r4, r5
2001da74:	bcb20008 	bgei	r18, 8		// 2001da7c
2001da78:	10600000 	addk	r3, r0, r0
2001da7c:	a46300ff 	andi	r3, r3, 255
}
2001da80:	10330000 	addk	r1, r19, r0
2001da84:	ea610004 	lwi	r19, r1, 4
2001da88:	30210008 	addik	r1, r1, 8
2001da8c:	b60f0008 	rtsd	r15, 8
2001da90:	80000000 	or	r0, r0, r0

2001da94 <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001da94:	3021fff8 	addik	r1, r1, -8
2001da98:	fa610004 	swi	r19, r1, 4
2001da9c:	12610000 	addk	r19, r1, r0
2001daa0:	f8b3000c 	swi	r5, r19, 12
2001daa4:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001daa8:	e873000c 	lwi	r3, r19, 12
2001daac:	e8630010 	lwi	r3, r3, 16
2001dab0:	e8830000 	lwi	r4, r3, 0
2001dab4:	e873000c 	lwi	r3, r19, 12
2001dab8:	e8a3000c 	lwi	r5, r3, 12
2001dabc:	e8730010 	lwi	r3, r19, 16
2001dac0:	64630402 	bslli	r3, r3, 2
2001dac4:	10651800 	addk	r3, r5, r3
2001dac8:	e8630000 	lwi	r3, r3, 0
2001dacc:	14632000 	rsubk	r3, r3, r4
}
2001dad0:	10330000 	addk	r1, r19, r0
2001dad4:	ea610004 	lwi	r19, r1, 4
2001dad8:	30210008 	addik	r1, r1, 8
2001dadc:	b60f0008 	rtsd	r15, 8
2001dae0:	80000000 	or	r0, r0, r0

2001dae4 <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2001dae4:	3021fff4 	addik	r1, r1, -12
2001dae8:	fa610008 	swi	r19, r1, 8
2001daec:	12610000 	addk	r19, r1, r0
2001daf0:	f8b30010 	swi	r5, r19, 16
2001daf4:	f8d30014 	swi	r6, r19, 20
2001daf8:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001dafc:	f8130004 	swi	r0, r19, 4
2001db00:	b800005c 	bri	92		// 2001db5c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001db04:	e8730010 	lwi	r3, r19, 16
2001db08:	e8830000 	lwi	r4, r3, 0
2001db0c:	e8730010 	lwi	r3, r19, 16
2001db10:	e8a3000c 	lwi	r5, r3, 12
2001db14:	e8730004 	lwi	r3, r19, 4
2001db18:	64630402 	bslli	r3, r3, 2
2001db1c:	10651800 	addk	r3, r5, r3
2001db20:	e8a30000 	lwi	r5, r3, 0
2001db24:	e8730010 	lwi	r3, r19, 16
2001db28:	e8630010 	lwi	r3, r3, 16
2001db2c:	e8630000 	lwi	r3, r3, 0
2001db30:	14632800 	rsubk	r3, r3, r5
2001db34:	10641800 	addk	r3, r4, r3
2001db38:	30830001 	addik	r4, r3, 1
2001db3c:	e8730018 	lwi	r3, r19, 24
2001db40:	16441803 	cmpu	r18, r4, r3
2001db44:	bc52000c 	blti	r18, 12		// 2001db50
            return 0;
2001db48:	10600000 	addk	r3, r0, r0
2001db4c:	b8000024 	bri	36		// 2001db70
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001db50:	e8730004 	lwi	r3, r19, 4
2001db54:	30630001 	addik	r3, r3, 1
2001db58:	f8730004 	swi	r3, r19, 4
2001db5c:	e8930004 	lwi	r4, r19, 4
2001db60:	e8730014 	lwi	r3, r19, 20
2001db64:	16432003 	cmpu	r18, r3, r4
2001db68:	bc52ff9c 	blti	r18, -100		// 2001db04
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001db6c:	30600001 	addik	r3, r0, 1
}
2001db70:	10330000 	addk	r1, r19, r0
2001db74:	ea610008 	lwi	r19, r1, 8
2001db78:	3021000c 	addik	r1, r1, 12
2001db7c:	b60f0008 	rtsd	r15, 8
2001db80:	80000000 	or	r0, r0, r0

2001db84 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001db84:	3021ffec 	addik	r1, r1, -20
2001db88:	fa610010 	swi	r19, r1, 16
2001db8c:	12610000 	addk	r19, r1, r0
2001db90:	f8b30018 	swi	r5, r19, 24
2001db94:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001db98:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001db9c:	f8130004 	swi	r0, r19, 4
2001dba0:	b8000054 	bri	84		// 2001dbf4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001dba4:	e8730018 	lwi	r3, r19, 24
2001dba8:	e8630010 	lwi	r3, r3, 16
2001dbac:	e8830000 	lwi	r4, r3, 0
2001dbb0:	e8730018 	lwi	r3, r19, 24
2001dbb4:	e8a3000c 	lwi	r5, r3, 12
2001dbb8:	e8730004 	lwi	r3, r19, 4
2001dbbc:	64630402 	bslli	r3, r3, 2
2001dbc0:	10651800 	addk	r3, r5, r3
2001dbc4:	e8630000 	lwi	r3, r3, 0
2001dbc8:	14632000 	rsubk	r3, r3, r4
2001dbcc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001dbd0:	e8930008 	lwi	r4, r19, 8
2001dbd4:	e873000c 	lwi	r3, r19, 12
2001dbd8:	16441803 	cmpu	r18, r4, r3
2001dbdc:	bcb20008 	bgei	r18, 8		// 2001dbe4
2001dbe0:	10640000 	addk	r3, r4, r0
2001dbe4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001dbe8:	e8730004 	lwi	r3, r19, 4
2001dbec:	30630001 	addik	r3, r3, 1
2001dbf0:	f8730004 	swi	r3, r19, 4
2001dbf4:	e8930004 	lwi	r4, r19, 4
2001dbf8:	e873001c 	lwi	r3, r19, 28
2001dbfc:	16432003 	cmpu	r18, r3, r4
2001dc00:	bc52ffa4 	blti	r18, -92		// 2001dba4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001dc04:	e8730018 	lwi	r3, r19, 24
2001dc08:	e8830000 	lwi	r4, r3, 0
2001dc0c:	e8730008 	lwi	r3, r19, 8
2001dc10:	14632000 	rsubk	r3, r3, r4
}
2001dc14:	10330000 	addk	r1, r19, r0
2001dc18:	ea610010 	lwi	r19, r1, 16
2001dc1c:	30210014 	addik	r1, r1, 20
2001dc20:	b60f0008 	rtsd	r15, 8
2001dc24:	80000000 	or	r0, r0, r0

2001dc28 <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001dc28:	3021fff4 	addik	r1, r1, -12
2001dc2c:	fa610008 	swi	r19, r1, 8
2001dc30:	12610000 	addk	r19, r1, r0
2001dc34:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2001dc38:	e8730010 	lwi	r3, r19, 16
2001dc3c:	e8630010 	lwi	r3, r3, 16
2001dc40:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001dc44:	f8130004 	swi	r0, r19, 4
2001dc48:	b8000028 	bri	40		// 2001dc70
        fifo->read_inds[i] = 0;
2001dc4c:	e8730010 	lwi	r3, r19, 16
2001dc50:	e883000c 	lwi	r4, r3, 12
2001dc54:	e8730004 	lwi	r3, r19, 4
2001dc58:	64630402 	bslli	r3, r3, 2
2001dc5c:	10641800 	addk	r3, r4, r3
2001dc60:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001dc64:	e8730004 	lwi	r3, r19, 4
2001dc68:	30630001 	addik	r3, r3, 1
2001dc6c:	f8730004 	swi	r3, r19, 4
2001dc70:	e8730010 	lwi	r3, r19, 16
2001dc74:	e8830008 	lwi	r4, r3, 8
2001dc78:	e8730004 	lwi	r3, r19, 4
2001dc7c:	16441803 	cmpu	r18, r4, r3
2001dc80:	bc52ffcc 	blti	r18, -52		// 2001dc4c
        fifo->read_inds[i] = 0;
    }
}
2001dc84:	10330000 	addk	r1, r19, r0
2001dc88:	ea610008 	lwi	r19, r1, 8
2001dc8c:	3021000c 	addik	r1, r1, 12
2001dc90:	b60f0008 	rtsd	r15, 8
2001dc94:	80000000 	or	r0, r0, r0

2001dc98 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001dc98:	3021fff4 	addik	r1, r1, -12
2001dc9c:	fa610008 	swi	r19, r1, 8
2001dca0:	12610000 	addk	r19, r1, r0
2001dca4:	f8b30010 	swi	r5, r19, 16
2001dca8:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001dcac:	e8730010 	lwi	r3, r19, 16
2001dcb0:	e8830004 	lwi	r4, r3, 4
2001dcb4:	e8730010 	lwi	r3, r19, 16
2001dcb8:	e8a3000c 	lwi	r5, r3, 12
2001dcbc:	e8730014 	lwi	r3, r19, 20
2001dcc0:	64630402 	bslli	r3, r3, 2
2001dcc4:	10651800 	addk	r3, r5, r3
2001dcc8:	e8a30000 	lwi	r5, r3, 0
2001dccc:	e8730010 	lwi	r3, r19, 16
2001dcd0:	e8630000 	lwi	r3, r3, 0
2001dcd4:	3063ffff 	addik	r3, r3, -1
2001dcd8:	84651800 	and	r3, r5, r3
2001dcdc:	64630402 	bslli	r3, r3, 2
2001dce0:	10641800 	addk	r3, r4, r3
2001dce4:	e8630000 	lwi	r3, r3, 0
2001dce8:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2001dcec:	e8730010 	lwi	r3, r19, 16
2001dcf0:	e883000c 	lwi	r4, r3, 12
2001dcf4:	e8730014 	lwi	r3, r19, 20
2001dcf8:	64630402 	bslli	r3, r3, 2
2001dcfc:	10641800 	addk	r3, r4, r3
2001dd00:	e8830000 	lwi	r4, r3, 0
2001dd04:	30840001 	addik	r4, r4, 1
2001dd08:	f8830000 	swi	r4, r3, 0
    return value;
2001dd0c:	e8730004 	lwi	r3, r19, 4
}
2001dd10:	10330000 	addk	r1, r19, r0
2001dd14:	ea610008 	lwi	r19, r1, 8
2001dd18:	3021000c 	addik	r1, r1, 12
2001dd1c:	b60f0008 	rtsd	r15, 8
2001dd20:	80000000 	or	r0, r0, r0

2001dd24 <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001dd24:	3021fff8 	addik	r1, r1, -8
2001dd28:	fa610004 	swi	r19, r1, 4
2001dd2c:	12610000 	addk	r19, r1, r0
2001dd30:	f8b3000c 	swi	r5, r19, 12
2001dd34:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001dd38:	e873000c 	lwi	r3, r19, 12
2001dd3c:	e8830004 	lwi	r4, r3, 4
2001dd40:	e873000c 	lwi	r3, r19, 12
2001dd44:	e8630010 	lwi	r3, r3, 16
2001dd48:	e8a30000 	lwi	r5, r3, 0
2001dd4c:	e873000c 	lwi	r3, r19, 12
2001dd50:	e8630000 	lwi	r3, r3, 0
2001dd54:	3063ffff 	addik	r3, r3, -1
2001dd58:	84651800 	and	r3, r5, r3
2001dd5c:	64630402 	bslli	r3, r3, 2
2001dd60:	10641800 	addk	r3, r4, r3
2001dd64:	e8930010 	lwi	r4, r19, 16
2001dd68:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2001dd6c:	e873000c 	lwi	r3, r19, 12
2001dd70:	e8630010 	lwi	r3, r3, 16
2001dd74:	e8830000 	lwi	r4, r3, 0
2001dd78:	30840001 	addik	r4, r4, 1
2001dd7c:	f8830000 	swi	r4, r3, 0
}
2001dd80:	10330000 	addk	r1, r19, r0
2001dd84:	ea610004 	lwi	r19, r1, 4
2001dd88:	30210008 	addik	r1, r1, 8
2001dd8c:	b60f0008 	rtsd	r15, 8
2001dd90:	80000000 	or	r0, r0, r0

2001dd94 <read_BTYPE>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_BTYPE() {
2001dd94:	3021ffe0 	addik	r1, r1, -32
2001dd98:	f9e10000 	swi	r15, r1, 0
2001dd9c:	fa61001c 	swi	r19, r1, 28
2001dda0:	12610000 	addk	r19, r1, r0
		index_BTYPE = decoder_parser_mvseq_BTYPE->read_inds[0];
2001dda4:	b0002004 	imm	8196
2001dda8:	e8606fac 	lwi	r3, r0, 28588	// 20046fac <decoder_parser_mvseq_BTYPE>
2001ddac:	e863000c 	lwi	r3, r3, 12
2001ddb0:	e8630000 	lwi	r3, r3, 0
2001ddb4:	b0002006 	imm	8198
2001ddb8:	f8601db4 	swi	r3, r0, 7604	// 20061db4 <index_BTYPE>
		numTokens_BTYPE = index_BTYPE + fifo_i16_get_num_tokens(decoder_parser_mvseq_BTYPE, 0);
2001ddbc:	b0002004 	imm	8196
2001ddc0:	e8606fac 	lwi	r3, r0, 28588	// 20046fac <decoder_parser_mvseq_BTYPE>
2001ddc4:	10a30000 	addk	r5, r3, r0
2001ddc8:	10c00000 	addk	r6, r0, r0
2001ddcc:	b9f4e48c 	brlid	r15, -7028	// 2001c258 <fifo_i16_get_num_tokens>
2001ddd0:	80000000 	or	r0, r0, r0
2001ddd4:	10830000 	addk	r4, r3, r0
2001ddd8:	b0002006 	imm	8198
2001dddc:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001dde0:	10641800 	addk	r3, r4, r3
2001dde4:	b0002006 	imm	8198
2001dde8:	f8601db8 	swi	r3, r0, 7608	// 20061db8 <numTokens_BTYPE>
	}
2001ddec:	e9e10000 	lwi	r15, r1, 0
2001ddf0:	10330000 	addk	r1, r19, r0
2001ddf4:	ea61001c 	lwi	r19, r1, 28
2001ddf8:	30210020 	addik	r1, r1, 32
2001ddfc:	b60f0008 	rtsd	r15, 8
2001de00:	80000000 	or	r0, r0, r0

2001de04 <read_end_BTYPE>:
	
	static void read_end_BTYPE() {
2001de04:	3021fff8 	addik	r1, r1, -8
2001de08:	fa610004 	swi	r19, r1, 4
2001de0c:	12610000 	addk	r19, r1, r0
		decoder_parser_mvseq_BTYPE->read_inds[0] = index_BTYPE;
2001de10:	b0002004 	imm	8196
2001de14:	e8606fac 	lwi	r3, r0, 28588	// 20046fac <decoder_parser_mvseq_BTYPE>
2001de18:	e863000c 	lwi	r3, r3, 12
2001de1c:	b0002006 	imm	8198
2001de20:	e8801db4 	lwi	r4, r0, 7604	// 20061db4 <index_BTYPE>
2001de24:	f8830000 	swi	r4, r3, 0
	}
2001de28:	10330000 	addk	r1, r19, r0
2001de2c:	ea610004 	lwi	r19, r1, 4
2001de30:	30210008 	addik	r1, r1, 8
2001de34:	b60f0008 	rtsd	r15, 8
2001de38:	80000000 	or	r0, r0, r0

2001de3c <write_A>:

	static void write_A() {
2001de3c:	3021ffe0 	addik	r1, r1, -32
2001de40:	f9e10000 	swi	r15, r1, 0
2001de44:	fa61001c 	swi	r19, r1, 28
2001de48:	12610000 	addk	r19, r1, r0
		index_A = (*decoder_parser_mvseq_A->write_ind);
2001de4c:	b0002004 	imm	8196
2001de50:	e8606fcc 	lwi	r3, r0, 28620	// 20046fcc <decoder_parser_mvseq_A>
2001de54:	e8630010 	lwi	r3, r3, 16
2001de58:	e8630000 	lwi	r3, r3, 0
2001de5c:	b0002006 	imm	8198
2001de60:	f8601dbc 	swi	r3, r0, 7612	// 20061dbc <index_A>
		numFree_A = index_A + fifo_i16_get_room(decoder_parser_mvseq_A, NUM_READERS_A);
2001de64:	b0002004 	imm	8196
2001de68:	e8606fcc 	lwi	r3, r0, 28620	// 20046fcc <decoder_parser_mvseq_A>
2001de6c:	10a30000 	addk	r5, r3, r0
2001de70:	30c00001 	addik	r6, r0, 1
2001de74:	b9f4e4d4 	brlid	r15, -6956	// 2001c348 <fifo_i16_get_room>
2001de78:	80000000 	or	r0, r0, r0
2001de7c:	10830000 	addk	r4, r3, r0
2001de80:	b0002006 	imm	8198
2001de84:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001de88:	10641800 	addk	r3, r4, r3
2001de8c:	b0002006 	imm	8198
2001de90:	f8601dc0 	swi	r3, r0, 7616	// 20061dc0 <numFree_A>
	}
2001de94:	e9e10000 	lwi	r15, r1, 0
2001de98:	10330000 	addk	r1, r19, r0
2001de9c:	ea61001c 	lwi	r19, r1, 28
2001dea0:	30210020 	addik	r1, r1, 32
2001dea4:	b60f0008 	rtsd	r15, 8
2001dea8:	80000000 	or	r0, r0, r0

2001deac <write_end_A>:
	
	static void write_end_A() {
2001deac:	3021fff8 	addik	r1, r1, -8
2001deb0:	fa610004 	swi	r19, r1, 4
2001deb4:	12610000 	addk	r19, r1, r0
		(*decoder_parser_mvseq_A->write_ind) = index_A;
2001deb8:	b0002004 	imm	8196
2001debc:	e8606fcc 	lwi	r3, r0, 28620	// 20046fcc <decoder_parser_mvseq_A>
2001dec0:	e8630010 	lwi	r3, r3, 16
2001dec4:	b0002006 	imm	8198
2001dec8:	e8801dbc 	lwi	r4, r0, 7612	// 20061dbc <index_A>
2001decc:	f8830000 	swi	r4, r3, 0
	}
2001ded0:	10330000 	addk	r1, r19, r0
2001ded4:	ea610004 	lwi	r19, r1, 4
2001ded8:	30210008 	addik	r1, r1, 8
2001dedc:	b60f0008 	rtsd	r15, 8
2001dee0:	80000000 	or	r0, r0, r0

2001dee4 <decrement>:
	////////////////////////////////////////////////////////////////////////////////
	// Functions/procedures
	static i8 decrement(i8 p);
	static i16 access(i8 mbptr, i8 c);

	static i8 decrement(i8 p) {
2001dee4:	3021fff0 	addik	r1, r1, -16
2001dee8:	fa61000c 	swi	r19, r1, 12
2001deec:	12610000 	addk	r19, r1, r0
2001def0:	10650000 	addk	r3, r5, r0
2001def4:	f0730014 	sbi	r3, r19, 20
		i32 tmp_if;
		i32 local_BUF_SIZE;
	
		if (p == 1) {
2001def8:	e0730014 	lbui	r3, r19, 20
2001defc:	90630060 	sext8	r3, r3
2001df00:	a8630001 	xori	r3, r3, 1
2001df04:	bc23001c 	bnei	r3, 28		// 2001df20
			local_BUF_SIZE = BUF_SIZE;
2001df08:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
2001df0c:	f8730008 	swi	r3, r19, 8
			tmp_if = local_BUF_SIZE - 1;
2001df10:	e8730008 	lwi	r3, r19, 8
2001df14:	3063ffff 	addik	r3, r3, -1
2001df18:	f8730004 	swi	r3, r19, 4
2001df1c:	b8000014 	bri	20		// 2001df30
		} else {
			tmp_if = p - 1;
2001df20:	e0730014 	lbui	r3, r19, 20
2001df24:	90630060 	sext8	r3, r3
2001df28:	3063ffff 	addik	r3, r3, -1
2001df2c:	f8730004 	swi	r3, r19, 4
		}
		return tmp_if;
2001df30:	e8730004 	lwi	r3, r19, 4
2001df34:	90630060 	sext8	r3, r3
	}
2001df38:	10330000 	addk	r1, r19, r0
2001df3c:	ea61000c 	lwi	r19, r1, 12
2001df40:	30210010 	addik	r1, r1, 16
2001df44:	b60f0008 	rtsd	r15, 8
2001df48:	80000000 	or	r0, r0, r0

2001df4c <access>:
	static i16 access(i8 mbptr, i8 c) {
2001df4c:	3021fff8 	addik	r1, r1, -8
2001df50:	fa610004 	swi	r19, r1, 4
2001df54:	12610000 	addk	r19, r1, r0
2001df58:	10850000 	addk	r4, r5, r0
2001df5c:	10660000 	addk	r3, r6, r0
2001df60:	f093000c 	sbi	r4, r19, 12
2001df64:	f0730010 	sbi	r3, r19, 16
	
		return mbptr << 3 | c & 3;
2001df68:	e073000c 	lbui	r3, r19, 12
2001df6c:	90630060 	sext8	r3, r3
2001df70:	64630403 	bslli	r3, r3, 3
2001df74:	90830061 	sext16	r4, r3
2001df78:	e0730010 	lbui	r3, r19, 16
2001df7c:	90630061 	sext16	r3, r3
2001df80:	a4630003 	andi	r3, r3, 3
2001df84:	90630061 	sext16	r3, r3
2001df88:	80641800 	or	r3, r4, r3
2001df8c:	90630061 	sext16	r3, r3
	}
2001df90:	10330000 	addk	r1, r19, r0
2001df94:	ea610004 	lwi	r19, r1, 4
2001df98:	30210008 	addik	r1, r1, 8
2001df9c:	b60f0008 	rtsd	r15, 8
2001dfa0:	80000000 	or	r0, r0, r0

2001dfa4 <isSchedulable_start>:

	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_start() {
2001dfa4:	3021ffec 	addik	r1, r1, -20
2001dfa8:	fa610010 	swi	r19, r1, 16
2001dfac:	12610000 	addk	r19, r1, r0
		i32 result;
		i16 cmd;
		i32 local_NEWVOP;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001dfb0:	b0002004 	imm	8196
2001dfb4:	e8606fac 	lwi	r3, r0, 28588	// 20046fac <decoder_parser_mvseq_BTYPE>
2001dfb8:	e8830004 	lwi	r4, r3, 4
2001dfbc:	b0002006 	imm	8198
2001dfc0:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001dfc4:	a46301ff 	andi	r3, r3, 511
2001dfc8:	10631800 	addk	r3, r3, r3
2001dfcc:	10641800 	addk	r3, r4, r3
2001dfd0:	e4630000 	lhui	r3, r3, 0
2001dfd4:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
2001dfd8:	30600800 	addik	r3, r0, 2048
2001dfdc:	f8730008 	swi	r3, r19, 8
		result = (cmd & local_NEWVOP) != 0;
2001dfe0:	e4730004 	lhui	r3, r19, 4
2001dfe4:	90830061 	sext16	r4, r3
2001dfe8:	e8730008 	lwi	r3, r19, 8
2001dfec:	84841800 	and	r4, r4, r3
2001dff0:	10600000 	addk	r3, r0, r0
2001dff4:	8c641c00 	pcmpne	r3, r4, r3
2001dff8:	a46300ff 	andi	r3, r3, 255
2001dffc:	f873000c 	swi	r3, r19, 12
		return result;
2001e000:	e873000c 	lwi	r3, r19, 12
	}
2001e004:	10330000 	addk	r1, r19, r0
2001e008:	ea610010 	lwi	r19, r1, 16
2001e00c:	30210014 	addik	r1, r1, 20
2001e010:	b60f0008 	rtsd	r15, 8
2001e014:	80000000 	or	r0, r0, r0

2001e018 <start>:
	
	static void start() {
2001e018:	3021ffd8 	addik	r1, r1, -40
2001e01c:	f9e10000 	swi	r15, r1, 0
2001e020:	fa610024 	swi	r19, r1, 36
2001e024:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2001e028:	b0002006 	imm	8198
2001e02c:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001e030:	a46301ff 	andi	r3, r3, 511
2001e034:	f873001c 	swi	r3, r19, 28
	
		i16 cmd;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001e038:	b0002004 	imm	8196
2001e03c:	e8606fac 	lwi	r3, r0, 28588	// 20046fac <decoder_parser_mvseq_BTYPE>
2001e040:	e8830004 	lwi	r4, r3, 4
2001e044:	b0002006 	imm	8198
2001e048:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001e04c:	a46301ff 	andi	r3, r3, 511
2001e050:	10631800 	addk	r3, r3, r3
2001e054:	10641800 	addk	r3, r4, r3
2001e058:	e4630000 	lhui	r3, r3, 0
2001e05c:	f4730020 	shi	r3, r19, 32
		mbx = 0;
2001e060:	b0002006 	imm	8198
2001e064:	f0001dc4 	sbi	r0, r0, 7620	// 20061dc4 <mbx>
		top_edge = 1;
2001e068:	30600001 	addik	r3, r0, 1
2001e06c:	b0002004 	imm	8196
2001e070:	f8607080 	swi	r3, r0, 28800	// 20047080 <top_edge>
		right_edge = 0;
2001e074:	b0002006 	imm	8198
2001e078:	f8001dc8 	swi	r0, r0, 7624	// 20061dc8 <right_edge>
		comp = 0;
2001e07c:	b0002006 	imm	8198
2001e080:	f0001dcc 	sbi	r0, r0, 7628	// 20061dcc <comp>
	
		// Update ports indexes
		index_BTYPE += 1;
2001e084:	b0002006 	imm	8198
2001e088:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001e08c:	30630001 	addik	r3, r3, 1
2001e090:	b0002006 	imm	8198
2001e094:	f8601db4 	swi	r3, r0, 7604	// 20061db4 <index_BTYPE>
		
		read_end_BTYPE();
2001e098:	b9f4fd6c 	brlid	r15, -660	// 2001de04 <read_end_BTYPE>
2001e09c:	80000000 	or	r0, r0, r0
	}
2001e0a0:	e9e10000 	lwi	r15, r1, 0
2001e0a4:	10330000 	addk	r1, r19, r0
2001e0a8:	ea610024 	lwi	r19, r1, 36
2001e0ac:	30210028 	addik	r1, r1, 40
2001e0b0:	b60f0008 	rtsd	r15, 8
2001e0b4:	80000000 	or	r0, r0, r0

2001e0b8 <isSchedulable_getw>:
	static i32 isSchedulable_getw() {
2001e0b8:	3021fff4 	addik	r1, r1, -12
2001e0bc:	fa610008 	swi	r19, r1, 8
2001e0c0:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2001e0c4:	30600001 	addik	r3, r0, 1
2001e0c8:	f8730004 	swi	r3, r19, 4
		return result;
2001e0cc:	e8730004 	lwi	r3, r19, 4
	}
2001e0d0:	10330000 	addk	r1, r19, r0
2001e0d4:	ea610008 	lwi	r19, r1, 8
2001e0d8:	3021000c 	addik	r1, r1, 12
2001e0dc:	b60f0008 	rtsd	r15, 8
2001e0e0:	80000000 	or	r0, r0, r0

2001e0e4 <getw_replaced>:
	
	static void getw_replaced() {
2001e0e4:	3021ffd8 	addik	r1, r1, -40
2001e0e8:	f9e10000 	swi	r15, r1, 0
2001e0ec:	fa610024 	swi	r19, r1, 36
2001e0f0:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2001e0f4:	b0002006 	imm	8198
2001e0f8:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001e0fc:	a46301ff 	andi	r3, r3, 511
2001e100:	f873001c 	swi	r3, r19, 28
	
		i16 w;
	
		w = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001e104:	b0002004 	imm	8196
2001e108:	e8606fac 	lwi	r3, r0, 28588	// 20046fac <decoder_parser_mvseq_BTYPE>
2001e10c:	e8830004 	lwi	r4, r3, 4
2001e110:	b0002006 	imm	8198
2001e114:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001e118:	a46301ff 	andi	r3, r3, 511
2001e11c:	10631800 	addk	r3, r3, r3
2001e120:	10641800 	addk	r3, r4, r3
2001e124:	e4630000 	lhui	r3, r3, 0
2001e128:	f4730020 	shi	r3, r19, 32
		mbwidth = w;
2001e12c:	e4730020 	lhui	r3, r19, 32
2001e130:	90630060 	sext8	r3, r3
2001e134:	b0002006 	imm	8198
2001e138:	f0601dcd 	sbi	r3, r0, 7629	// 20061dcd <mbwidth>
		ptr = 1;
2001e13c:	30600001 	addik	r3, r0, 1
2001e140:	b0002006 	imm	8198
2001e144:	f0601dce 	sbi	r3, r0, 7630	// 20061dce <ptr>
		ptr_left = 2;
2001e148:	30600002 	addik	r3, r0, 2
2001e14c:	b0002006 	imm	8198
2001e150:	f0601dcf 	sbi	r3, r0, 7631	// 20061dcf <ptr_left>
		ptr_above = w + 1;
2001e154:	e4730020 	lhui	r3, r19, 32
2001e158:	a46300ff 	andi	r3, r3, 255
2001e15c:	30630001 	addik	r3, r3, 1
2001e160:	a46300ff 	andi	r3, r3, 255
2001e164:	90630060 	sext8	r3, r3
2001e168:	b0002006 	imm	8198
2001e16c:	f0601dd0 	sbi	r3, r0, 7632	// 20061dd0 <ptr_above>
		ptr_above_right = w;
2001e170:	e4730020 	lhui	r3, r19, 32
2001e174:	90630060 	sext8	r3, r3
2001e178:	b0002006 	imm	8198
2001e17c:	f0601dd1 	sbi	r3, r0, 7633	// 20061dd1 <ptr_above_right>
	
		// Update ports indexes
		index_BTYPE += 1;
2001e180:	b0002006 	imm	8198
2001e184:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001e188:	30630001 	addik	r3, r3, 1
2001e18c:	b0002006 	imm	8198
2001e190:	f8601db4 	swi	r3, r0, 7604	// 20061db4 <index_BTYPE>
		
		read_end_BTYPE();
2001e194:	b9f4fc70 	brlid	r15, -912	// 2001de04 <read_end_BTYPE>
2001e198:	80000000 	or	r0, r0, r0
	}
2001e19c:	e9e10000 	lwi	r15, r1, 0
2001e1a0:	10330000 	addk	r1, r19, r0
2001e1a4:	ea610024 	lwi	r19, r1, 36
2001e1a8:	30210028 	addik	r1, r1, 40
2001e1ac:	b60f0008 	rtsd	r15, 8
2001e1b0:	80000000 	or	r0, r0, r0

2001e1b4 <isSchedulable_geth>:
	static i32 isSchedulable_geth() {
2001e1b4:	3021fff4 	addik	r1, r1, -12
2001e1b8:	fa610008 	swi	r19, r1, 8
2001e1bc:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2001e1c0:	30600001 	addik	r3, r0, 1
2001e1c4:	f8730004 	swi	r3, r19, 4
		return result;
2001e1c8:	e8730004 	lwi	r3, r19, 4
	}
2001e1cc:	10330000 	addk	r1, r19, r0
2001e1d0:	ea610008 	lwi	r19, r1, 8
2001e1d4:	3021000c 	addik	r1, r1, 12
2001e1d8:	b60f0008 	rtsd	r15, 8
2001e1dc:	80000000 	or	r0, r0, r0

2001e1e0 <geth>:
	
	static void geth() {
2001e1e0:	3021ffd8 	addik	r1, r1, -40
2001e1e4:	f9e10000 	swi	r15, r1, 0
2001e1e8:	fa610024 	swi	r19, r1, 36
2001e1ec:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2001e1f0:	b0002006 	imm	8198
2001e1f4:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001e1f8:	a46301ff 	andi	r3, r3, 511
2001e1fc:	f873001c 	swi	r3, r19, 28
	
		i16 h;
	
		h = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001e200:	b0002004 	imm	8196
2001e204:	e8606fac 	lwi	r3, r0, 28588	// 20046fac <decoder_parser_mvseq_BTYPE>
2001e208:	e8830004 	lwi	r4, r3, 4
2001e20c:	b0002006 	imm	8198
2001e210:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001e214:	a46301ff 	andi	r3, r3, 511
2001e218:	10631800 	addk	r3, r3, r3
2001e21c:	10641800 	addk	r3, r4, r3
2001e220:	e4630000 	lhui	r3, r3, 0
2001e224:	f4730020 	shi	r3, r19, 32
	
		// Update ports indexes
		index_BTYPE += 1;
2001e228:	b0002006 	imm	8198
2001e22c:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001e230:	30630001 	addik	r3, r3, 1
2001e234:	b0002006 	imm	8198
2001e238:	f8601db4 	swi	r3, r0, 7604	// 20061db4 <index_BTYPE>
		
		read_end_BTYPE();
2001e23c:	b9f4fbc8 	brlid	r15, -1080	// 2001de04 <read_end_BTYPE>
2001e240:	80000000 	or	r0, r0, r0
	}
2001e244:	e9e10000 	lwi	r15, r1, 0
2001e248:	10330000 	addk	r1, r19, r0
2001e24c:	ea610024 	lwi	r19, r1, 36
2001e250:	30210028 	addik	r1, r1, 40
2001e254:	b60f0008 	rtsd	r15, 8
2001e258:	80000000 	or	r0, r0, r0

2001e25c <isSchedulable_read_noPredict>:
	static i32 isSchedulable_read_noPredict() {
2001e25c:	3021ffdc 	addik	r1, r1, -36
2001e260:	fa610020 	swi	r19, r1, 32
2001e264:	12610000 	addk	r19, r1, r0
		i8 local_comp;
		i32 local_INTER;
		i32 local_MOTION;
		i32 local_FOURMV;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001e268:	b0002004 	imm	8196
2001e26c:	e8606fac 	lwi	r3, r0, 28588	// 20046fac <decoder_parser_mvseq_BTYPE>
2001e270:	e8830004 	lwi	r4, r3, 4
2001e274:	b0002006 	imm	8198
2001e278:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001e27c:	a46301ff 	andi	r3, r3, 511
2001e280:	10631800 	addk	r3, r3, r3
2001e284:	10641800 	addk	r3, r4, r3
2001e288:	e4630000 	lhui	r3, r3, 0
2001e28c:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
2001e290:	30600800 	addik	r3, r0, 2048
2001e294:	f8730008 	swi	r3, r19, 8
		local_comp = comp;
2001e298:	b0002006 	imm	8198
2001e29c:	e0601dcc 	lbui	r3, r0, 7628	// 20061dcc <comp>
2001e2a0:	f073000c 	sbi	r3, r19, 12
		local_INTER = ConstantsBtype_INTER;
2001e2a4:	30600200 	addik	r3, r0, 512
2001e2a8:	f8730010 	swi	r3, r19, 16
		local_MOTION = ConstantsBtype_MOTION;
2001e2ac:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2001e2b0:	f8730014 	swi	r3, r19, 20
		local_comp = comp;
2001e2b4:	b0002006 	imm	8198
2001e2b8:	e0601dcc 	lbui	r3, r0, 7628	// 20061dcc <comp>
2001e2bc:	f073000c 	sbi	r3, r19, 12
		local_FOURMV = Constants_FOURMV;
2001e2c0:	30600004 	addik	r3, r0, 4
2001e2c4:	f8730018 	swi	r3, r19, 24
		result = (cmd & local_NEWVOP) == 0 && (local_comp > 3 || (cmd & local_INTER) == 0 || (cmd & local_MOTION) == 0 || local_comp != 0 && (cmd & local_FOURMV) == 0);
2001e2c8:	e4730004 	lhui	r3, r19, 4
2001e2cc:	90830061 	sext16	r4, r3
2001e2d0:	e8730008 	lwi	r3, r19, 8
2001e2d4:	84641800 	and	r3, r4, r3
2001e2d8:	bc230068 	bnei	r3, 104		// 2001e340
2001e2dc:	e073000c 	lbui	r3, r19, 12
2001e2e0:	90830060 	sext8	r4, r3
2001e2e4:	30600003 	addik	r3, r0, 3
2001e2e8:	16441801 	cmp	r18, r4, r3
2001e2ec:	bc52004c 	blti	r18, 76		// 2001e338
2001e2f0:	e4730004 	lhui	r3, r19, 4
2001e2f4:	90830061 	sext16	r4, r3
2001e2f8:	e8730010 	lwi	r3, r19, 16
2001e2fc:	84641800 	and	r3, r4, r3
2001e300:	bc030038 	beqi	r3, 56		// 2001e338
2001e304:	e4730004 	lhui	r3, r19, 4
2001e308:	90830061 	sext16	r4, r3
2001e30c:	e8730014 	lwi	r3, r19, 20
2001e310:	84641800 	and	r3, r4, r3
2001e314:	bc030024 	beqi	r3, 36		// 2001e338
2001e318:	e073000c 	lbui	r3, r19, 12
2001e31c:	90630060 	sext8	r3, r3
2001e320:	bc030020 	beqi	r3, 32		// 2001e340
2001e324:	e4730004 	lhui	r3, r19, 4
2001e328:	90830061 	sext16	r4, r3
2001e32c:	e8730018 	lwi	r3, r19, 24
2001e330:	84641800 	and	r3, r4, r3
2001e334:	bc23000c 	bnei	r3, 12		// 2001e340
2001e338:	30600001 	addik	r3, r0, 1
2001e33c:	b8000008 	bri	8		// 2001e344
2001e340:	10600000 	addk	r3, r0, r0
2001e344:	f873001c 	swi	r3, r19, 28
		return result;
2001e348:	e873001c 	lwi	r3, r19, 28
	}
2001e34c:	10330000 	addk	r1, r19, r0
2001e350:	ea610020 	lwi	r19, r1, 32
2001e354:	30210024 	addik	r1, r1, 36
2001e358:	b60f0008 	rtsd	r15, 8
2001e35c:	80000000 	or	r0, r0, r0

2001e360 <read_noPredict>:
	
	static void read_noPredict() {
2001e360:	3021ffc8 	addik	r1, r1, -56
2001e364:	f9e10000 	swi	r15, r1, 0
2001e368:	fa610034 	swi	r19, r1, 52
2001e36c:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2001e370:	b0002006 	imm	8198
2001e374:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001e378:	a46301ff 	andi	r3, r3, 511
2001e37c:	f873001c 	swi	r3, r19, 28
		i8 local_ptr_above_right;
		i8 tmp_decrement2;
		i32 local_right_edge;
		i8 local_mbwidth;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001e380:	b0002004 	imm	8196
2001e384:	e8606fac 	lwi	r3, r0, 28588	// 20046fac <decoder_parser_mvseq_BTYPE>
2001e388:	e8830004 	lwi	r4, r3, 4
2001e38c:	b0002006 	imm	8198
2001e390:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001e394:	a46301ff 	andi	r3, r3, 511
2001e398:	10631800 	addk	r3, r3, r3
2001e39c:	10641800 	addk	r3, r4, r3
2001e3a0:	e4630000 	lhui	r3, r3, 0
2001e3a4:	f4730020 	shi	r3, r19, 32
		local_comp = comp;
2001e3a8:	b0002006 	imm	8198
2001e3ac:	e0601dcc 	lbui	r3, r0, 7628	// 20061dcc <comp>
2001e3b0:	f0730022 	sbi	r3, r19, 34
		comp = local_comp + 1;
2001e3b4:	e0730022 	lbui	r3, r19, 34
2001e3b8:	30630001 	addik	r3, r3, 1
2001e3bc:	a46300ff 	andi	r3, r3, 255
2001e3c0:	90630060 	sext8	r3, r3
2001e3c4:	b0002006 	imm	8198
2001e3c8:	f0601dcc 	sbi	r3, r0, 7628	// 20061dcc <comp>
		local_comp = comp;
2001e3cc:	b0002006 	imm	8198
2001e3d0:	e0601dcc 	lbui	r3, r0, 7628	// 20061dcc <comp>
2001e3d4:	f0730022 	sbi	r3, r19, 34
		if (local_comp == 6) {
2001e3d8:	e0730022 	lbui	r3, r19, 34
2001e3dc:	90630060 	sext8	r3, r3
2001e3e0:	a8630006 	xori	r3, r3, 6
2001e3e4:	bc230160 	bnei	r3, 352		// 2001e544
			comp = 0;
2001e3e8:	b0002006 	imm	8198
2001e3ec:	f0001dcc 	sbi	r0, r0, 7628	// 20061dcc <comp>
			local_mbx = mbx;
2001e3f0:	b0002006 	imm	8198
2001e3f4:	e0601dc4 	lbui	r3, r0, 7620	// 20061dc4 <mbx>
2001e3f8:	f0730023 	sbi	r3, r19, 35
			mbx = local_mbx + 1;
2001e3fc:	e0730023 	lbui	r3, r19, 35
2001e400:	30630001 	addik	r3, r3, 1
2001e404:	a46300ff 	andi	r3, r3, 255
2001e408:	90630060 	sext8	r3, r3
2001e40c:	b0002006 	imm	8198
2001e410:	f0601dc4 	sbi	r3, r0, 7620	// 20061dc4 <mbx>
			local_ptr = ptr;
2001e414:	b0002006 	imm	8198
2001e418:	e0601dce 	lbui	r3, r0, 7630	// 20061dce <ptr>
2001e41c:	f0730024 	sbi	r3, r19, 36
			tmp_decrement = decrement(local_ptr);
2001e420:	e0730024 	lbui	r3, r19, 36
2001e424:	90630060 	sext8	r3, r3
2001e428:	10a30000 	addk	r5, r3, r0
2001e42c:	b9f4fab8 	brlid	r15, -1352	// 2001dee4 <decrement>
2001e430:	80000000 	or	r0, r0, r0
2001e434:	f0730025 	sbi	r3, r19, 37
			ptr = tmp_decrement;
2001e438:	e0730025 	lbui	r3, r19, 37
2001e43c:	b0002006 	imm	8198
2001e440:	f0601dce 	sbi	r3, r0, 7630	// 20061dce <ptr>
			local_ptr_left = ptr_left;
2001e444:	b0002006 	imm	8198
2001e448:	e0601dcf 	lbui	r3, r0, 7631	// 20061dcf <ptr_left>
2001e44c:	f0730026 	sbi	r3, r19, 38
			tmp_decrement0 = decrement(local_ptr_left);
2001e450:	e0730026 	lbui	r3, r19, 38
2001e454:	90630060 	sext8	r3, r3
2001e458:	10a30000 	addk	r5, r3, r0
2001e45c:	b9f4fa88 	brlid	r15, -1400	// 2001dee4 <decrement>
2001e460:	80000000 	or	r0, r0, r0
2001e464:	f0730027 	sbi	r3, r19, 39
			ptr_left = tmp_decrement0;
2001e468:	e0730027 	lbui	r3, r19, 39
2001e46c:	b0002006 	imm	8198
2001e470:	f0601dcf 	sbi	r3, r0, 7631	// 20061dcf <ptr_left>
			local_ptr_above = ptr_above;
2001e474:	b0002006 	imm	8198
2001e478:	e0601dd0 	lbui	r3, r0, 7632	// 20061dd0 <ptr_above>
2001e47c:	f0730028 	sbi	r3, r19, 40
			tmp_decrement1 = decrement(local_ptr_above);
2001e480:	e0730028 	lbui	r3, r19, 40
2001e484:	90630060 	sext8	r3, r3
2001e488:	10a30000 	addk	r5, r3, r0
2001e48c:	b9f4fa58 	brlid	r15, -1448	// 2001dee4 <decrement>
2001e490:	80000000 	or	r0, r0, r0
2001e494:	f0730029 	sbi	r3, r19, 41
			ptr_above = tmp_decrement1;
2001e498:	e0730029 	lbui	r3, r19, 41
2001e49c:	b0002006 	imm	8198
2001e4a0:	f0601dd0 	sbi	r3, r0, 7632	// 20061dd0 <ptr_above>
			local_ptr_above_right = ptr_above_right;
2001e4a4:	b0002006 	imm	8198
2001e4a8:	e0601dd1 	lbui	r3, r0, 7633	// 20061dd1 <ptr_above_right>
2001e4ac:	f073002a 	sbi	r3, r19, 42
			tmp_decrement2 = decrement(local_ptr_above_right);
2001e4b0:	e073002a 	lbui	r3, r19, 42
2001e4b4:	90630060 	sext8	r3, r3
2001e4b8:	10a30000 	addk	r5, r3, r0
2001e4bc:	b9f4fa28 	brlid	r15, -1496	// 2001dee4 <decrement>
2001e4c0:	80000000 	or	r0, r0, r0
2001e4c4:	f073002b 	sbi	r3, r19, 43
			ptr_above_right = tmp_decrement2;
2001e4c8:	e073002b 	lbui	r3, r19, 43
2001e4cc:	b0002006 	imm	8198
2001e4d0:	f0601dd1 	sbi	r3, r0, 7633	// 20061dd1 <ptr_above_right>
			local_right_edge = right_edge;
2001e4d4:	b0002006 	imm	8198
2001e4d8:	e8601dc8 	lwi	r3, r0, 7624	// 20061dc8 <right_edge>
2001e4dc:	f873002c 	swi	r3, r19, 44
			if (local_right_edge) {
2001e4e0:	e873002c 	lwi	r3, r19, 44
2001e4e4:	bc030020 	beqi	r3, 32		// 2001e504
				mbx = 0;
2001e4e8:	b0002006 	imm	8198
2001e4ec:	f0001dc4 	sbi	r0, r0, 7620	// 20061dc4 <mbx>
				right_edge = 0;
2001e4f0:	b0002006 	imm	8198
2001e4f4:	f8001dc8 	swi	r0, r0, 7624	// 20061dc8 <right_edge>
				top_edge = 0;
2001e4f8:	b0002004 	imm	8196
2001e4fc:	f8007080 	swi	r0, r0, 28800	// 20047080 <top_edge>
2001e500:	b8000044 	bri	68		// 2001e544
			} else {
				local_mbx = mbx;
2001e504:	b0002006 	imm	8198
2001e508:	e0601dc4 	lbui	r3, r0, 7620	// 20061dc4 <mbx>
2001e50c:	f0730023 	sbi	r3, r19, 35
				local_mbwidth = mbwidth;
2001e510:	b0002006 	imm	8198
2001e514:	e0601dcd 	lbui	r3, r0, 7629	// 20061dcd <mbwidth>
2001e518:	f0730030 	sbi	r3, r19, 48
				if (local_mbx == local_mbwidth - 1) {
2001e51c:	e0730023 	lbui	r3, r19, 35
2001e520:	90830060 	sext8	r4, r3
2001e524:	e0730030 	lbui	r3, r19, 48
2001e528:	90630060 	sext8	r3, r3
2001e52c:	3063ffff 	addik	r3, r3, -1
2001e530:	88641800 	xor	r3, r4, r3
2001e534:	bc230010 	bnei	r3, 16		// 2001e544
					right_edge = 1;
2001e538:	30600001 	addik	r3, r0, 1
2001e53c:	b0002006 	imm	8198
2001e540:	f8601dc8 	swi	r3, r0, 7624	// 20061dc8 <right_edge>
				}
			}
		}
	
		// Update ports indexes
		index_BTYPE += 1;
2001e544:	b0002006 	imm	8198
2001e548:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001e54c:	30630001 	addik	r3, r3, 1
2001e550:	b0002006 	imm	8198
2001e554:	f8601db4 	swi	r3, r0, 7604	// 20061db4 <index_BTYPE>
		
		read_end_BTYPE();
2001e558:	b9f4f8ac 	brlid	r15, -1876	// 2001de04 <read_end_BTYPE>
2001e55c:	80000000 	or	r0, r0, r0
	}
2001e560:	e9e10000 	lwi	r15, r1, 0
2001e564:	10330000 	addk	r1, r19, r0
2001e568:	ea610034 	lwi	r19, r1, 52
2001e56c:	30210038 	addik	r1, r1, 56
2001e570:	b60f0008 	rtsd	r15, 8
2001e574:	80000000 	or	r0, r0, r0

2001e578 <isSchedulable_read_predict_y0>:
	static i32 isSchedulable_read_predict_y0() {
2001e578:	3021ffe0 	addik	r1, r1, -32
2001e57c:	fa61001c 	swi	r19, r1, 28
2001e580:	12610000 	addk	r19, r1, r0
		i32 local_NEWVOP;
		i32 local_INTER;
		i32 local_MOTION;
		i8 local_comp;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001e584:	b0002004 	imm	8196
2001e588:	e8606fac 	lwi	r3, r0, 28588	// 20046fac <decoder_parser_mvseq_BTYPE>
2001e58c:	e8830004 	lwi	r4, r3, 4
2001e590:	b0002006 	imm	8198
2001e594:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001e598:	a46301ff 	andi	r3, r3, 511
2001e59c:	10631800 	addk	r3, r3, r3
2001e5a0:	10641800 	addk	r3, r4, r3
2001e5a4:	e4630000 	lhui	r3, r3, 0
2001e5a8:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
2001e5ac:	30600800 	addik	r3, r0, 2048
2001e5b0:	f8730008 	swi	r3, r19, 8
		local_INTER = ConstantsBtype_INTER;
2001e5b4:	30600200 	addik	r3, r0, 512
2001e5b8:	f873000c 	swi	r3, r19, 12
		local_MOTION = ConstantsBtype_MOTION;
2001e5bc:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2001e5c0:	f8730010 	swi	r3, r19, 16
		local_comp = comp;
2001e5c4:	b0002006 	imm	8198
2001e5c8:	e0601dcc 	lbui	r3, r0, 7628	// 20061dcc <comp>
2001e5cc:	f0730014 	sbi	r3, r19, 20
		result = (cmd & local_NEWVOP) == 0 && (cmd & local_INTER) != 0 && (cmd & local_MOTION) != 0 && local_comp == 0;
2001e5d0:	e4730004 	lhui	r3, r19, 4
2001e5d4:	90830061 	sext16	r4, r3
2001e5d8:	e8730008 	lwi	r3, r19, 8
2001e5dc:	84641800 	and	r3, r4, r3
2001e5e0:	bc230040 	bnei	r3, 64		// 2001e620
2001e5e4:	e4730004 	lhui	r3, r19, 4
2001e5e8:	90830061 	sext16	r4, r3
2001e5ec:	e873000c 	lwi	r3, r19, 12
2001e5f0:	84641800 	and	r3, r4, r3
2001e5f4:	bc03002c 	beqi	r3, 44		// 2001e620
2001e5f8:	e4730004 	lhui	r3, r19, 4
2001e5fc:	90830061 	sext16	r4, r3
2001e600:	e8730010 	lwi	r3, r19, 16
2001e604:	84641800 	and	r3, r4, r3
2001e608:	bc030018 	beqi	r3, 24		// 2001e620
2001e60c:	e0730014 	lbui	r3, r19, 20
2001e610:	90630060 	sext8	r3, r3
2001e614:	bc23000c 	bnei	r3, 12		// 2001e620
2001e618:	30600001 	addik	r3, r0, 1
2001e61c:	b8000008 	bri	8		// 2001e624
2001e620:	10600000 	addk	r3, r0, r0
2001e624:	f8730018 	swi	r3, r19, 24
		return result;
2001e628:	e8730018 	lwi	r3, r19, 24
	}
2001e62c:	10330000 	addk	r1, r19, r0
2001e630:	ea61001c 	lwi	r19, r1, 28
2001e634:	30210020 	addik	r1, r1, 32
2001e638:	b60f0008 	rtsd	r15, 8
2001e63c:	80000000 	or	r0, r0, r0

2001e640 <read_predict_y0>:
	
	static void read_predict_y0() {
2001e640:	3021ffbc 	addik	r1, r1, -68
2001e644:	f9e10000 	swi	r15, r1, 0
2001e648:	fa610040 	swi	r19, r1, 64
2001e64c:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2001e650:	b0002006 	imm	8198
2001e654:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001e658:	a46301ff 	andi	r3, r3, 511
2001e65c:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_A = index_A % SIZE_A;
2001e660:	b0002006 	imm	8198
2001e664:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001e668:	a46301ff 	andi	r3, r3, 511
2001e66c:	f8730024 	swi	r3, r19, 36
		i8 local_comp;
		i16 tmp_access;
		i16 tmp_access0;
		i16 tmp_access1;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001e670:	b0002004 	imm	8196
2001e674:	e8606fac 	lwi	r3, r0, 28588	// 20046fac <decoder_parser_mvseq_BTYPE>
2001e678:	e8830004 	lwi	r4, r3, 4
2001e67c:	b0002006 	imm	8198
2001e680:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001e684:	a46301ff 	andi	r3, r3, 511
2001e688:	10631800 	addk	r3, r3, r3
2001e68c:	10641800 	addk	r3, r4, r3
2001e690:	e4630000 	lhui	r3, r3, 0
2001e694:	f4730028 	shi	r3, r19, 40
		local_mbx = mbx;
2001e698:	b0002006 	imm	8198
2001e69c:	e0601dc4 	lbui	r3, r0, 7620	// 20061dc4 <mbx>
2001e6a0:	f073002a 	sbi	r3, r19, 42
		if (local_mbx == 0) {
2001e6a4:	e073002a 	lbui	r3, r19, 42
2001e6a8:	90630060 	sext8	r3, r3
2001e6ac:	bc23000c 	bnei	r3, 12		// 2001e6b8
			pl = 0;
2001e6b0:	f013001c 	sbi	r0, r19, 28
2001e6b4:	b8000018 	bri	24		// 2001e6cc
		} else {
			local_ptr_left = ptr_left;
2001e6b8:	b0002006 	imm	8198
2001e6bc:	e0601dcf 	lbui	r3, r0, 7631	// 20061dcf <ptr_left>
2001e6c0:	f073002b 	sbi	r3, r19, 43
			pl = local_ptr_left;
2001e6c4:	e073002b 	lbui	r3, r19, 43
2001e6c8:	f073001c 	sbi	r3, r19, 28
		}
		local_top_edge = top_edge;
2001e6cc:	b0002004 	imm	8196
2001e6d0:	e8607080 	lwi	r3, r0, 28800	// 20047080 <top_edge>
2001e6d4:	f873002c 	swi	r3, r19, 44
		if (local_top_edge) {
2001e6d8:	e873002c 	lwi	r3, r19, 44
2001e6dc:	bc03000c 	beqi	r3, 12		// 2001e6e8
			pa = 0;
2001e6e0:	f013001d 	sbi	r0, r19, 29
2001e6e4:	b8000018 	bri	24		// 2001e6fc
		} else {
			local_ptr_above = ptr_above;
2001e6e8:	b0002006 	imm	8198
2001e6ec:	e0601dd0 	lbui	r3, r0, 7632	// 20061dd0 <ptr_above>
2001e6f0:	f0730030 	sbi	r3, r19, 48
			pa = local_ptr_above;
2001e6f4:	e0730030 	lbui	r3, r19, 48
2001e6f8:	f073001d 	sbi	r3, r19, 29
		}
		local_top_edge = top_edge;
2001e6fc:	b0002004 	imm	8196
2001e700:	e8607080 	lwi	r3, r0, 28800	// 20047080 <top_edge>
2001e704:	f873002c 	swi	r3, r19, 44
		local_right_edge = right_edge;
2001e708:	b0002006 	imm	8198
2001e70c:	e8601dc8 	lwi	r3, r0, 7624	// 20061dc8 <right_edge>
2001e710:	f8730034 	swi	r3, r19, 52
		if (local_top_edge || local_right_edge) {
2001e714:	e873002c 	lwi	r3, r19, 44
2001e718:	bc23000c 	bnei	r3, 12		// 2001e724
2001e71c:	e8730034 	lwi	r3, r19, 52
2001e720:	bc03000c 	beqi	r3, 12		// 2001e72c
			par = 0;
2001e724:	f013001e 	sbi	r0, r19, 30
2001e728:	b8000018 	bri	24		// 2001e740
		} else {
			local_ptr_above_right = ptr_above_right;
2001e72c:	b0002006 	imm	8198
2001e730:	e0601dd1 	lbui	r3, r0, 7633	// 20061dd1 <ptr_above_right>
2001e734:	f0730038 	sbi	r3, r19, 56
			par = local_ptr_above_right;
2001e738:	e0730038 	lbui	r3, r19, 56
2001e73c:	f073001e 	sbi	r3, r19, 30
		}
		local_comp = comp;
2001e740:	b0002006 	imm	8198
2001e744:	e0601dcc 	lbui	r3, r0, 7628	// 20061dcc <comp>
2001e748:	f0730039 	sbi	r3, r19, 57
		comp = local_comp + 1;
2001e74c:	e0730039 	lbui	r3, r19, 57
2001e750:	30630001 	addik	r3, r3, 1
2001e754:	a46300ff 	andi	r3, r3, 255
2001e758:	90630060 	sext8	r3, r3
2001e75c:	b0002006 	imm	8198
2001e760:	f0601dcc 	sbi	r3, r0, 7628	// 20061dcc <comp>
		tmp_access = access(pl, 1);
2001e764:	e073001c 	lbui	r3, r19, 28
2001e768:	90630060 	sext8	r3, r3
2001e76c:	10a30000 	addk	r5, r3, r0
2001e770:	30c00001 	addik	r6, r0, 1
2001e774:	b9f4f7d8 	brlid	r15, -2088	// 2001df4c <access>
2001e778:	80000000 	or	r0, r0, r0
2001e77c:	f473003a 	shi	r3, r19, 58
		tokens_A[(index_A + (0)) % SIZE_A] = tmp_access;
2001e780:	b0002004 	imm	8196
2001e784:	e8606fcc 	lwi	r3, r0, 28620	// 20046fcc <decoder_parser_mvseq_A>
2001e788:	e8830004 	lwi	r4, r3, 4
2001e78c:	b0002006 	imm	8198
2001e790:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001e794:	a46301ff 	andi	r3, r3, 511
2001e798:	10631800 	addk	r3, r3, r3
2001e79c:	10641800 	addk	r3, r4, r3
2001e7a0:	e493003a 	lhui	r4, r19, 58
2001e7a4:	f4830000 	shi	r4, r3, 0
		tmp_access0 = access(pa, 2);
2001e7a8:	e073001d 	lbui	r3, r19, 29
2001e7ac:	90630060 	sext8	r3, r3
2001e7b0:	10a30000 	addk	r5, r3, r0
2001e7b4:	30c00002 	addik	r6, r0, 2
2001e7b8:	b9f4f794 	brlid	r15, -2156	// 2001df4c <access>
2001e7bc:	80000000 	or	r0, r0, r0
2001e7c0:	f473003c 	shi	r3, r19, 60
		tokens_A[(index_A + (1)) % SIZE_A] = tmp_access0;
2001e7c4:	b0002004 	imm	8196
2001e7c8:	e8606fcc 	lwi	r3, r0, 28620	// 20046fcc <decoder_parser_mvseq_A>
2001e7cc:	e8830004 	lwi	r4, r3, 4
2001e7d0:	b0002006 	imm	8198
2001e7d4:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001e7d8:	30630001 	addik	r3, r3, 1
2001e7dc:	a46301ff 	andi	r3, r3, 511
2001e7e0:	10631800 	addk	r3, r3, r3
2001e7e4:	10641800 	addk	r3, r4, r3
2001e7e8:	e493003c 	lhui	r4, r19, 60
2001e7ec:	f4830000 	shi	r4, r3, 0
		tmp_access1 = access(par, 2);
2001e7f0:	e073001e 	lbui	r3, r19, 30
2001e7f4:	90630060 	sext8	r3, r3
2001e7f8:	10a30000 	addk	r5, r3, r0
2001e7fc:	30c00002 	addik	r6, r0, 2
2001e800:	b9f4f74c 	brlid	r15, -2228	// 2001df4c <access>
2001e804:	80000000 	or	r0, r0, r0
2001e808:	f473003e 	shi	r3, r19, 62
		tokens_A[(index_A + (2)) % SIZE_A] = tmp_access1;
2001e80c:	b0002004 	imm	8196
2001e810:	e8606fcc 	lwi	r3, r0, 28620	// 20046fcc <decoder_parser_mvseq_A>
2001e814:	e8830004 	lwi	r4, r3, 4
2001e818:	b0002006 	imm	8198
2001e81c:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001e820:	30630002 	addik	r3, r3, 2
2001e824:	a46301ff 	andi	r3, r3, 511
2001e828:	10631800 	addk	r3, r3, r3
2001e82c:	10641800 	addk	r3, r4, r3
2001e830:	e493003e 	lhui	r4, r19, 62
2001e834:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
2001e838:	b0002006 	imm	8198
2001e83c:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001e840:	30630001 	addik	r3, r3, 1
2001e844:	b0002006 	imm	8198
2001e848:	f8601db4 	swi	r3, r0, 7604	// 20061db4 <index_BTYPE>
		index_A += 3;
2001e84c:	b0002006 	imm	8198
2001e850:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001e854:	30630003 	addik	r3, r3, 3
2001e858:	b0002006 	imm	8198
2001e85c:	f8601dbc 	swi	r3, r0, 7612	// 20061dbc <index_A>
		
		read_end_BTYPE();
2001e860:	b9f4f5a4 	brlid	r15, -2652	// 2001de04 <read_end_BTYPE>
2001e864:	80000000 	or	r0, r0, r0
		write_end_A();
2001e868:	b9f4f644 	brlid	r15, -2492	// 2001deac <write_end_A>
2001e86c:	80000000 	or	r0, r0, r0
	}
2001e870:	e9e10000 	lwi	r15, r1, 0
2001e874:	10330000 	addk	r1, r19, r0
2001e878:	ea610040 	lwi	r19, r1, 64
2001e87c:	30210044 	addik	r1, r1, 68
2001e880:	b60f0008 	rtsd	r15, 8
2001e884:	80000000 	or	r0, r0, r0

2001e888 <isSchedulable_read_predict_y1>:
	static i32 isSchedulable_read_predict_y1() {
2001e888:	3021ffdc 	addik	r1, r1, -36
2001e88c:	fa610020 	swi	r19, r1, 32
2001e890:	12610000 	addk	r19, r1, r0
		i32 local_INTER;
		i32 local_MOTION;
		i32 local_FOURMV;
		i8 local_comp;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001e894:	b0002004 	imm	8196
2001e898:	e8606fac 	lwi	r3, r0, 28588	// 20046fac <decoder_parser_mvseq_BTYPE>
2001e89c:	e8830004 	lwi	r4, r3, 4
2001e8a0:	b0002006 	imm	8198
2001e8a4:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001e8a8:	a46301ff 	andi	r3, r3, 511
2001e8ac:	10631800 	addk	r3, r3, r3
2001e8b0:	10641800 	addk	r3, r4, r3
2001e8b4:	e4630000 	lhui	r3, r3, 0
2001e8b8:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
2001e8bc:	30600800 	addik	r3, r0, 2048
2001e8c0:	f8730008 	swi	r3, r19, 8
		local_INTER = ConstantsBtype_INTER;
2001e8c4:	30600200 	addik	r3, r0, 512
2001e8c8:	f873000c 	swi	r3, r19, 12
		local_MOTION = ConstantsBtype_MOTION;
2001e8cc:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2001e8d0:	f8730010 	swi	r3, r19, 16
		local_FOURMV = Constants_FOURMV;
2001e8d4:	30600004 	addik	r3, r0, 4
2001e8d8:	f8730014 	swi	r3, r19, 20
		local_comp = comp;
2001e8dc:	b0002006 	imm	8198
2001e8e0:	e0601dcc 	lbui	r3, r0, 7628	// 20061dcc <comp>
2001e8e4:	f0730018 	sbi	r3, r19, 24
		result = (cmd & local_NEWVOP) == 0 && (cmd & local_INTER) != 0 && (cmd & local_MOTION) != 0 && (cmd & local_FOURMV) != 0 && local_comp == 1;
2001e8e8:	e4730004 	lhui	r3, r19, 4
2001e8ec:	90830061 	sext16	r4, r3
2001e8f0:	e8730008 	lwi	r3, r19, 8
2001e8f4:	84641800 	and	r3, r4, r3
2001e8f8:	bc230058 	bnei	r3, 88		// 2001e950
2001e8fc:	e4730004 	lhui	r3, r19, 4
2001e900:	90830061 	sext16	r4, r3
2001e904:	e873000c 	lwi	r3, r19, 12
2001e908:	84641800 	and	r3, r4, r3
2001e90c:	bc030044 	beqi	r3, 68		// 2001e950
2001e910:	e4730004 	lhui	r3, r19, 4
2001e914:	90830061 	sext16	r4, r3
2001e918:	e8730010 	lwi	r3, r19, 16
2001e91c:	84641800 	and	r3, r4, r3
2001e920:	bc030030 	beqi	r3, 48		// 2001e950
2001e924:	e4730004 	lhui	r3, r19, 4
2001e928:	90830061 	sext16	r4, r3
2001e92c:	e8730014 	lwi	r3, r19, 20
2001e930:	84641800 	and	r3, r4, r3
2001e934:	bc03001c 	beqi	r3, 28		// 2001e950
2001e938:	e0730018 	lbui	r3, r19, 24
2001e93c:	90630060 	sext8	r3, r3
2001e940:	a8630001 	xori	r3, r3, 1
2001e944:	bc23000c 	bnei	r3, 12		// 2001e950
2001e948:	30600001 	addik	r3, r0, 1
2001e94c:	b8000008 	bri	8		// 2001e954
2001e950:	10600000 	addk	r3, r0, r0
2001e954:	f873001c 	swi	r3, r19, 28
		return result;
2001e958:	e873001c 	lwi	r3, r19, 28
	}
2001e95c:	10330000 	addk	r1, r19, r0
2001e960:	ea610020 	lwi	r19, r1, 32
2001e964:	30210024 	addik	r1, r1, 36
2001e968:	b60f0008 	rtsd	r15, 8
2001e96c:	80000000 	or	r0, r0, r0

2001e970 <read_predict_y1>:
	
	static void read_predict_y1() {
2001e970:	3021ffb8 	addik	r1, r1, -72
2001e974:	f9e10000 	swi	r15, r1, 0
2001e978:	fa610044 	swi	r19, r1, 68
2001e97c:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2001e980:	b0002006 	imm	8198
2001e984:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001e988:	a46301ff 	andi	r3, r3, 511
2001e98c:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_A = index_A % SIZE_A;
2001e990:	b0002006 	imm	8198
2001e994:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001e998:	a46301ff 	andi	r3, r3, 511
2001e99c:	f8730024 	swi	r3, r19, 36
		i8 local_ptr;
		i16 tmp_access;
		i16 tmp_access0;
		i16 tmp_access1;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001e9a0:	b0002004 	imm	8196
2001e9a4:	e8606fac 	lwi	r3, r0, 28588	// 20046fac <decoder_parser_mvseq_BTYPE>
2001e9a8:	e8830004 	lwi	r4, r3, 4
2001e9ac:	b0002006 	imm	8198
2001e9b0:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001e9b4:	a46301ff 	andi	r3, r3, 511
2001e9b8:	10631800 	addk	r3, r3, r3
2001e9bc:	10641800 	addk	r3, r4, r3
2001e9c0:	e4630000 	lhui	r3, r3, 0
2001e9c4:	f4730028 	shi	r3, r19, 40
		local_top_edge = top_edge;
2001e9c8:	b0002004 	imm	8196
2001e9cc:	e8607080 	lwi	r3, r0, 28800	// 20047080 <top_edge>
2001e9d0:	f873002c 	swi	r3, r19, 44
		if (local_top_edge) {
2001e9d4:	e873002c 	lwi	r3, r19, 44
2001e9d8:	bc03000c 	beqi	r3, 12		// 2001e9e4
			pa = 0;
2001e9dc:	f013001c 	sbi	r0, r19, 28
2001e9e0:	b8000018 	bri	24		// 2001e9f8
		} else {
			local_ptr_above = ptr_above;
2001e9e4:	b0002006 	imm	8198
2001e9e8:	e0601dd0 	lbui	r3, r0, 7632	// 20061dd0 <ptr_above>
2001e9ec:	f0730030 	sbi	r3, r19, 48
			pa = local_ptr_above;
2001e9f0:	e0730030 	lbui	r3, r19, 48
2001e9f4:	f073001c 	sbi	r3, r19, 28
		}
		local_top_edge = top_edge;
2001e9f8:	b0002004 	imm	8196
2001e9fc:	e8607080 	lwi	r3, r0, 28800	// 20047080 <top_edge>
2001ea00:	f873002c 	swi	r3, r19, 44
		local_right_edge = right_edge;
2001ea04:	b0002006 	imm	8198
2001ea08:	e8601dc8 	lwi	r3, r0, 7624	// 20061dc8 <right_edge>
2001ea0c:	f8730034 	swi	r3, r19, 52
		if (local_top_edge || local_right_edge) {
2001ea10:	e873002c 	lwi	r3, r19, 44
2001ea14:	bc23000c 	bnei	r3, 12		// 2001ea20
2001ea18:	e8730034 	lwi	r3, r19, 52
2001ea1c:	bc03000c 	beqi	r3, 12		// 2001ea28
			par = 0;
2001ea20:	f013001d 	sbi	r0, r19, 29
2001ea24:	b8000018 	bri	24		// 2001ea3c
		} else {
			local_ptr_above_right = ptr_above_right;
2001ea28:	b0002006 	imm	8198
2001ea2c:	e0601dd1 	lbui	r3, r0, 7633	// 20061dd1 <ptr_above_right>
2001ea30:	f0730038 	sbi	r3, r19, 56
			par = local_ptr_above_right;
2001ea34:	e0730038 	lbui	r3, r19, 56
2001ea38:	f073001d 	sbi	r3, r19, 29
		}
		local_comp = comp;
2001ea3c:	b0002006 	imm	8198
2001ea40:	e0601dcc 	lbui	r3, r0, 7628	// 20061dcc <comp>
2001ea44:	f0730039 	sbi	r3, r19, 57
		comp = local_comp + 1;
2001ea48:	e0730039 	lbui	r3, r19, 57
2001ea4c:	30630001 	addik	r3, r3, 1
2001ea50:	a46300ff 	andi	r3, r3, 255
2001ea54:	90630060 	sext8	r3, r3
2001ea58:	b0002006 	imm	8198
2001ea5c:	f0601dcc 	sbi	r3, r0, 7628	// 20061dcc <comp>
		local_ptr = ptr;
2001ea60:	b0002006 	imm	8198
2001ea64:	e0601dce 	lbui	r3, r0, 7630	// 20061dce <ptr>
2001ea68:	f073003a 	sbi	r3, r19, 58
		tmp_access = access(local_ptr, 0);
2001ea6c:	e073003a 	lbui	r3, r19, 58
2001ea70:	90630060 	sext8	r3, r3
2001ea74:	10a30000 	addk	r5, r3, r0
2001ea78:	10c00000 	addk	r6, r0, r0
2001ea7c:	b9f4f4d0 	brlid	r15, -2864	// 2001df4c <access>
2001ea80:	80000000 	or	r0, r0, r0
2001ea84:	f473003c 	shi	r3, r19, 60
		tokens_A[(index_A + (0)) % SIZE_A] = tmp_access;
2001ea88:	b0002004 	imm	8196
2001ea8c:	e8606fcc 	lwi	r3, r0, 28620	// 20046fcc <decoder_parser_mvseq_A>
2001ea90:	e8830004 	lwi	r4, r3, 4
2001ea94:	b0002006 	imm	8198
2001ea98:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001ea9c:	a46301ff 	andi	r3, r3, 511
2001eaa0:	10631800 	addk	r3, r3, r3
2001eaa4:	10641800 	addk	r3, r4, r3
2001eaa8:	e493003c 	lhui	r4, r19, 60
2001eaac:	f4830000 	shi	r4, r3, 0
		tmp_access0 = access(pa, 3);
2001eab0:	e073001c 	lbui	r3, r19, 28
2001eab4:	90630060 	sext8	r3, r3
2001eab8:	10a30000 	addk	r5, r3, r0
2001eabc:	30c00003 	addik	r6, r0, 3
2001eac0:	b9f4f48c 	brlid	r15, -2932	// 2001df4c <access>
2001eac4:	80000000 	or	r0, r0, r0
2001eac8:	f473003e 	shi	r3, r19, 62
		tokens_A[(index_A + (1)) % SIZE_A] = tmp_access0;
2001eacc:	b0002004 	imm	8196
2001ead0:	e8606fcc 	lwi	r3, r0, 28620	// 20046fcc <decoder_parser_mvseq_A>
2001ead4:	e8830004 	lwi	r4, r3, 4
2001ead8:	b0002006 	imm	8198
2001eadc:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001eae0:	30630001 	addik	r3, r3, 1
2001eae4:	a46301ff 	andi	r3, r3, 511
2001eae8:	10631800 	addk	r3, r3, r3
2001eaec:	10641800 	addk	r3, r4, r3
2001eaf0:	e493003e 	lhui	r4, r19, 62
2001eaf4:	f4830000 	shi	r4, r3, 0
		tmp_access1 = access(par, 2);
2001eaf8:	e073001d 	lbui	r3, r19, 29
2001eafc:	90630060 	sext8	r3, r3
2001eb00:	10a30000 	addk	r5, r3, r0
2001eb04:	30c00002 	addik	r6, r0, 2
2001eb08:	b9f4f444 	brlid	r15, -3004	// 2001df4c <access>
2001eb0c:	80000000 	or	r0, r0, r0
2001eb10:	f4730040 	shi	r3, r19, 64
		tokens_A[(index_A + (2)) % SIZE_A] = tmp_access1;
2001eb14:	b0002004 	imm	8196
2001eb18:	e8606fcc 	lwi	r3, r0, 28620	// 20046fcc <decoder_parser_mvseq_A>
2001eb1c:	e8830004 	lwi	r4, r3, 4
2001eb20:	b0002006 	imm	8198
2001eb24:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001eb28:	30630002 	addik	r3, r3, 2
2001eb2c:	a46301ff 	andi	r3, r3, 511
2001eb30:	10631800 	addk	r3, r3, r3
2001eb34:	10641800 	addk	r3, r4, r3
2001eb38:	e4930040 	lhui	r4, r19, 64
2001eb3c:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
2001eb40:	b0002006 	imm	8198
2001eb44:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001eb48:	30630001 	addik	r3, r3, 1
2001eb4c:	b0002006 	imm	8198
2001eb50:	f8601db4 	swi	r3, r0, 7604	// 20061db4 <index_BTYPE>
		index_A += 3;
2001eb54:	b0002006 	imm	8198
2001eb58:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001eb5c:	30630003 	addik	r3, r3, 3
2001eb60:	b0002006 	imm	8198
2001eb64:	f8601dbc 	swi	r3, r0, 7612	// 20061dbc <index_A>
		
		read_end_BTYPE();
2001eb68:	b9f4f29c 	brlid	r15, -3428	// 2001de04 <read_end_BTYPE>
2001eb6c:	80000000 	or	r0, r0, r0
		write_end_A();
2001eb70:	b9f4f33c 	brlid	r15, -3268	// 2001deac <write_end_A>
2001eb74:	80000000 	or	r0, r0, r0
	}
2001eb78:	e9e10000 	lwi	r15, r1, 0
2001eb7c:	10330000 	addk	r1, r19, r0
2001eb80:	ea610044 	lwi	r19, r1, 68
2001eb84:	30210048 	addik	r1, r1, 72
2001eb88:	b60f0008 	rtsd	r15, 8
2001eb8c:	80000000 	or	r0, r0, r0

2001eb90 <isSchedulable_read_predict_y2>:
	static i32 isSchedulable_read_predict_y2() {
2001eb90:	3021ffdc 	addik	r1, r1, -36
2001eb94:	fa610020 	swi	r19, r1, 32
2001eb98:	12610000 	addk	r19, r1, r0
		i32 local_INTER;
		i32 local_MOTION;
		i32 local_FOURMV;
		i8 local_comp;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001eb9c:	b0002004 	imm	8196
2001eba0:	e8606fac 	lwi	r3, r0, 28588	// 20046fac <decoder_parser_mvseq_BTYPE>
2001eba4:	e8830004 	lwi	r4, r3, 4
2001eba8:	b0002006 	imm	8198
2001ebac:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001ebb0:	a46301ff 	andi	r3, r3, 511
2001ebb4:	10631800 	addk	r3, r3, r3
2001ebb8:	10641800 	addk	r3, r4, r3
2001ebbc:	e4630000 	lhui	r3, r3, 0
2001ebc0:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
2001ebc4:	30600800 	addik	r3, r0, 2048
2001ebc8:	f8730008 	swi	r3, r19, 8
		local_INTER = ConstantsBtype_INTER;
2001ebcc:	30600200 	addik	r3, r0, 512
2001ebd0:	f873000c 	swi	r3, r19, 12
		local_MOTION = ConstantsBtype_MOTION;
2001ebd4:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2001ebd8:	f8730010 	swi	r3, r19, 16
		local_FOURMV = Constants_FOURMV;
2001ebdc:	30600004 	addik	r3, r0, 4
2001ebe0:	f8730014 	swi	r3, r19, 20
		local_comp = comp;
2001ebe4:	b0002006 	imm	8198
2001ebe8:	e0601dcc 	lbui	r3, r0, 7628	// 20061dcc <comp>
2001ebec:	f0730018 	sbi	r3, r19, 24
		result = (cmd & local_NEWVOP) == 0 && (cmd & local_INTER) != 0 && (cmd & local_MOTION) != 0 && (cmd & local_FOURMV) != 0 && local_comp == 2;
2001ebf0:	e4730004 	lhui	r3, r19, 4
2001ebf4:	90830061 	sext16	r4, r3
2001ebf8:	e8730008 	lwi	r3, r19, 8
2001ebfc:	84641800 	and	r3, r4, r3
2001ec00:	bc230058 	bnei	r3, 88		// 2001ec58
2001ec04:	e4730004 	lhui	r3, r19, 4
2001ec08:	90830061 	sext16	r4, r3
2001ec0c:	e873000c 	lwi	r3, r19, 12
2001ec10:	84641800 	and	r3, r4, r3
2001ec14:	bc030044 	beqi	r3, 68		// 2001ec58
2001ec18:	e4730004 	lhui	r3, r19, 4
2001ec1c:	90830061 	sext16	r4, r3
2001ec20:	e8730010 	lwi	r3, r19, 16
2001ec24:	84641800 	and	r3, r4, r3
2001ec28:	bc030030 	beqi	r3, 48		// 2001ec58
2001ec2c:	e4730004 	lhui	r3, r19, 4
2001ec30:	90830061 	sext16	r4, r3
2001ec34:	e8730014 	lwi	r3, r19, 20
2001ec38:	84641800 	and	r3, r4, r3
2001ec3c:	bc03001c 	beqi	r3, 28		// 2001ec58
2001ec40:	e0730018 	lbui	r3, r19, 24
2001ec44:	90630060 	sext8	r3, r3
2001ec48:	a8630002 	xori	r3, r3, 2
2001ec4c:	bc23000c 	bnei	r3, 12		// 2001ec58
2001ec50:	30600001 	addik	r3, r0, 1
2001ec54:	b8000008 	bri	8		// 2001ec5c
2001ec58:	10600000 	addk	r3, r0, r0
2001ec5c:	f873001c 	swi	r3, r19, 28
		return result;
2001ec60:	e873001c 	lwi	r3, r19, 28
	}
2001ec64:	10330000 	addk	r1, r19, r0
2001ec68:	ea610020 	lwi	r19, r1, 32
2001ec6c:	30210024 	addik	r1, r1, 36
2001ec70:	b60f0008 	rtsd	r15, 8
2001ec74:	80000000 	or	r0, r0, r0

2001ec78 <read_predict_y2>:
	
	static void read_predict_y2() {
2001ec78:	3021ffc4 	addik	r1, r1, -60
2001ec7c:	f9e10000 	swi	r15, r1, 0
2001ec80:	fa610038 	swi	r19, r1, 56
2001ec84:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2001ec88:	b0002006 	imm	8198
2001ec8c:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001ec90:	a46301ff 	andi	r3, r3, 511
2001ec94:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_A = index_A % SIZE_A;
2001ec98:	b0002006 	imm	8198
2001ec9c:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001eca0:	a46301ff 	andi	r3, r3, 511
2001eca4:	f8730024 	swi	r3, r19, 36
		i16 tmp_access;
		i8 local_ptr;
		i16 tmp_access0;
		i16 tmp_access1;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001eca8:	b0002004 	imm	8196
2001ecac:	e8606fac 	lwi	r3, r0, 28588	// 20046fac <decoder_parser_mvseq_BTYPE>
2001ecb0:	e8830004 	lwi	r4, r3, 4
2001ecb4:	b0002006 	imm	8198
2001ecb8:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001ecbc:	a46301ff 	andi	r3, r3, 511
2001ecc0:	10631800 	addk	r3, r3, r3
2001ecc4:	10641800 	addk	r3, r4, r3
2001ecc8:	e4630000 	lhui	r3, r3, 0
2001eccc:	f4730028 	shi	r3, r19, 40
		local_mbx = mbx;
2001ecd0:	b0002006 	imm	8198
2001ecd4:	e0601dc4 	lbui	r3, r0, 7620	// 20061dc4 <mbx>
2001ecd8:	f073002a 	sbi	r3, r19, 42
		if (local_mbx == 0) {
2001ecdc:	e073002a 	lbui	r3, r19, 42
2001ece0:	90630060 	sext8	r3, r3
2001ece4:	bc23000c 	bnei	r3, 12		// 2001ecf0
			pl = 0;
2001ece8:	f013001c 	sbi	r0, r19, 28
2001ecec:	b8000018 	bri	24		// 2001ed04
		} else {
			local_ptr_left = ptr_left;
2001ecf0:	b0002006 	imm	8198
2001ecf4:	e0601dcf 	lbui	r3, r0, 7631	// 20061dcf <ptr_left>
2001ecf8:	f073002b 	sbi	r3, r19, 43
			pl = local_ptr_left;
2001ecfc:	e073002b 	lbui	r3, r19, 43
2001ed00:	f073001c 	sbi	r3, r19, 28
		}
		local_comp = comp;
2001ed04:	b0002006 	imm	8198
2001ed08:	e0601dcc 	lbui	r3, r0, 7628	// 20061dcc <comp>
2001ed0c:	f073002c 	sbi	r3, r19, 44
		comp = local_comp + 1;
2001ed10:	e073002c 	lbui	r3, r19, 44
2001ed14:	30630001 	addik	r3, r3, 1
2001ed18:	a46300ff 	andi	r3, r3, 255
2001ed1c:	90630060 	sext8	r3, r3
2001ed20:	b0002006 	imm	8198
2001ed24:	f0601dcc 	sbi	r3, r0, 7628	// 20061dcc <comp>
		tmp_access = access(pl, 3);
2001ed28:	e073001c 	lbui	r3, r19, 28
2001ed2c:	90630060 	sext8	r3, r3
2001ed30:	10a30000 	addk	r5, r3, r0
2001ed34:	30c00003 	addik	r6, r0, 3
2001ed38:	b9f4f214 	brlid	r15, -3564	// 2001df4c <access>
2001ed3c:	80000000 	or	r0, r0, r0
2001ed40:	f473002e 	shi	r3, r19, 46
		tokens_A[(index_A + (0)) % SIZE_A] = tmp_access;
2001ed44:	b0002004 	imm	8196
2001ed48:	e8606fcc 	lwi	r3, r0, 28620	// 20046fcc <decoder_parser_mvseq_A>
2001ed4c:	e8830004 	lwi	r4, r3, 4
2001ed50:	b0002006 	imm	8198
2001ed54:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001ed58:	a46301ff 	andi	r3, r3, 511
2001ed5c:	10631800 	addk	r3, r3, r3
2001ed60:	10641800 	addk	r3, r4, r3
2001ed64:	e493002e 	lhui	r4, r19, 46
2001ed68:	f4830000 	shi	r4, r3, 0
		local_ptr = ptr;
2001ed6c:	b0002006 	imm	8198
2001ed70:	e0601dce 	lbui	r3, r0, 7630	// 20061dce <ptr>
2001ed74:	f0730030 	sbi	r3, r19, 48
		tmp_access0 = access(local_ptr, 0);
2001ed78:	e0730030 	lbui	r3, r19, 48
2001ed7c:	90630060 	sext8	r3, r3
2001ed80:	10a30000 	addk	r5, r3, r0
2001ed84:	10c00000 	addk	r6, r0, r0
2001ed88:	b9f4f1c4 	brlid	r15, -3644	// 2001df4c <access>
2001ed8c:	80000000 	or	r0, r0, r0
2001ed90:	f4730032 	shi	r3, r19, 50
		tokens_A[(index_A + (1)) % SIZE_A] = tmp_access0;
2001ed94:	b0002004 	imm	8196
2001ed98:	e8606fcc 	lwi	r3, r0, 28620	// 20046fcc <decoder_parser_mvseq_A>
2001ed9c:	e8830004 	lwi	r4, r3, 4
2001eda0:	b0002006 	imm	8198
2001eda4:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001eda8:	30630001 	addik	r3, r3, 1
2001edac:	a46301ff 	andi	r3, r3, 511
2001edb0:	10631800 	addk	r3, r3, r3
2001edb4:	10641800 	addk	r3, r4, r3
2001edb8:	e4930032 	lhui	r4, r19, 50
2001edbc:	f4830000 	shi	r4, r3, 0
		local_ptr = ptr;
2001edc0:	b0002006 	imm	8198
2001edc4:	e0601dce 	lbui	r3, r0, 7630	// 20061dce <ptr>
2001edc8:	f0730030 	sbi	r3, r19, 48
		tmp_access1 = access(local_ptr, 1);
2001edcc:	e0730030 	lbui	r3, r19, 48
2001edd0:	90630060 	sext8	r3, r3
2001edd4:	10a30000 	addk	r5, r3, r0
2001edd8:	30c00001 	addik	r6, r0, 1
2001eddc:	b9f4f170 	brlid	r15, -3728	// 2001df4c <access>
2001ede0:	80000000 	or	r0, r0, r0
2001ede4:	f4730034 	shi	r3, r19, 52
		tokens_A[(index_A + (2)) % SIZE_A] = tmp_access1;
2001ede8:	b0002004 	imm	8196
2001edec:	e8606fcc 	lwi	r3, r0, 28620	// 20046fcc <decoder_parser_mvseq_A>
2001edf0:	e8830004 	lwi	r4, r3, 4
2001edf4:	b0002006 	imm	8198
2001edf8:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001edfc:	30630002 	addik	r3, r3, 2
2001ee00:	a46301ff 	andi	r3, r3, 511
2001ee04:	10631800 	addk	r3, r3, r3
2001ee08:	10641800 	addk	r3, r4, r3
2001ee0c:	e4930034 	lhui	r4, r19, 52
2001ee10:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
2001ee14:	b0002006 	imm	8198
2001ee18:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001ee1c:	30630001 	addik	r3, r3, 1
2001ee20:	b0002006 	imm	8198
2001ee24:	f8601db4 	swi	r3, r0, 7604	// 20061db4 <index_BTYPE>
		index_A += 3;
2001ee28:	b0002006 	imm	8198
2001ee2c:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001ee30:	30630003 	addik	r3, r3, 3
2001ee34:	b0002006 	imm	8198
2001ee38:	f8601dbc 	swi	r3, r0, 7612	// 20061dbc <index_A>
		
		read_end_BTYPE();
2001ee3c:	b9f4efc8 	brlid	r15, -4152	// 2001de04 <read_end_BTYPE>
2001ee40:	80000000 	or	r0, r0, r0
		write_end_A();
2001ee44:	b9f4f068 	brlid	r15, -3992	// 2001deac <write_end_A>
2001ee48:	80000000 	or	r0, r0, r0
	}
2001ee4c:	e9e10000 	lwi	r15, r1, 0
2001ee50:	10330000 	addk	r1, r19, r0
2001ee54:	ea610038 	lwi	r19, r1, 56
2001ee58:	3021003c 	addik	r1, r1, 60
2001ee5c:	b60f0008 	rtsd	r15, 8
2001ee60:	80000000 	or	r0, r0, r0

2001ee64 <isSchedulable_read_predict_y3>:
	static i32 isSchedulable_read_predict_y3() {
2001ee64:	3021ffdc 	addik	r1, r1, -36
2001ee68:	fa610020 	swi	r19, r1, 32
2001ee6c:	12610000 	addk	r19, r1, r0
		i32 local_INTER;
		i32 local_MOTION;
		i32 local_FOURMV;
		i8 local_comp;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001ee70:	b0002004 	imm	8196
2001ee74:	e8606fac 	lwi	r3, r0, 28588	// 20046fac <decoder_parser_mvseq_BTYPE>
2001ee78:	e8830004 	lwi	r4, r3, 4
2001ee7c:	b0002006 	imm	8198
2001ee80:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001ee84:	a46301ff 	andi	r3, r3, 511
2001ee88:	10631800 	addk	r3, r3, r3
2001ee8c:	10641800 	addk	r3, r4, r3
2001ee90:	e4630000 	lhui	r3, r3, 0
2001ee94:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
2001ee98:	30600800 	addik	r3, r0, 2048
2001ee9c:	f8730008 	swi	r3, r19, 8
		local_INTER = ConstantsBtype_INTER;
2001eea0:	30600200 	addik	r3, r0, 512
2001eea4:	f873000c 	swi	r3, r19, 12
		local_MOTION = ConstantsBtype_MOTION;
2001eea8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2001eeac:	f8730010 	swi	r3, r19, 16
		local_FOURMV = Constants_FOURMV;
2001eeb0:	30600004 	addik	r3, r0, 4
2001eeb4:	f8730014 	swi	r3, r19, 20
		local_comp = comp;
2001eeb8:	b0002006 	imm	8198
2001eebc:	e0601dcc 	lbui	r3, r0, 7628	// 20061dcc <comp>
2001eec0:	f0730018 	sbi	r3, r19, 24
		result = (cmd & local_NEWVOP) == 0 && (cmd & local_INTER) != 0 && (cmd & local_MOTION) != 0 && (cmd & local_FOURMV) != 0 && local_comp == 3;
2001eec4:	e4730004 	lhui	r3, r19, 4
2001eec8:	90830061 	sext16	r4, r3
2001eecc:	e8730008 	lwi	r3, r19, 8
2001eed0:	84641800 	and	r3, r4, r3
2001eed4:	bc230058 	bnei	r3, 88		// 2001ef2c
2001eed8:	e4730004 	lhui	r3, r19, 4
2001eedc:	90830061 	sext16	r4, r3
2001eee0:	e873000c 	lwi	r3, r19, 12
2001eee4:	84641800 	and	r3, r4, r3
2001eee8:	bc030044 	beqi	r3, 68		// 2001ef2c
2001eeec:	e4730004 	lhui	r3, r19, 4
2001eef0:	90830061 	sext16	r4, r3
2001eef4:	e8730010 	lwi	r3, r19, 16
2001eef8:	84641800 	and	r3, r4, r3
2001eefc:	bc030030 	beqi	r3, 48		// 2001ef2c
2001ef00:	e4730004 	lhui	r3, r19, 4
2001ef04:	90830061 	sext16	r4, r3
2001ef08:	e8730014 	lwi	r3, r19, 20
2001ef0c:	84641800 	and	r3, r4, r3
2001ef10:	bc03001c 	beqi	r3, 28		// 2001ef2c
2001ef14:	e0730018 	lbui	r3, r19, 24
2001ef18:	90630060 	sext8	r3, r3
2001ef1c:	a8630003 	xori	r3, r3, 3
2001ef20:	bc23000c 	bnei	r3, 12		// 2001ef2c
2001ef24:	30600001 	addik	r3, r0, 1
2001ef28:	b8000008 	bri	8		// 2001ef30
2001ef2c:	10600000 	addk	r3, r0, r0
2001ef30:	f873001c 	swi	r3, r19, 28
		return result;
2001ef34:	e873001c 	lwi	r3, r19, 28
	}
2001ef38:	10330000 	addk	r1, r19, r0
2001ef3c:	ea610020 	lwi	r19, r1, 32
2001ef40:	30210024 	addik	r1, r1, 36
2001ef44:	b60f0008 	rtsd	r15, 8
2001ef48:	80000000 	or	r0, r0, r0

2001ef4c <read_predict_y3>:
	
	static void read_predict_y3() {
2001ef4c:	3021ffcc 	addik	r1, r1, -52
2001ef50:	f9e10000 	swi	r15, r1, 0
2001ef54:	fa610030 	swi	r19, r1, 48
2001ef58:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2001ef5c:	b0002006 	imm	8198
2001ef60:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001ef64:	a46301ff 	andi	r3, r3, 511
2001ef68:	f873001c 	swi	r3, r19, 28
		i32 index_aligned_A = index_A % SIZE_A;
2001ef6c:	b0002006 	imm	8198
2001ef70:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001ef74:	a46301ff 	andi	r3, r3, 511
2001ef78:	f8730020 	swi	r3, r19, 32
		i8 local_ptr;
		i16 tmp_access;
		i16 tmp_access0;
		i16 tmp_access1;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001ef7c:	b0002004 	imm	8196
2001ef80:	e8606fac 	lwi	r3, r0, 28588	// 20046fac <decoder_parser_mvseq_BTYPE>
2001ef84:	e8830004 	lwi	r4, r3, 4
2001ef88:	b0002006 	imm	8198
2001ef8c:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001ef90:	a46301ff 	andi	r3, r3, 511
2001ef94:	10631800 	addk	r3, r3, r3
2001ef98:	10641800 	addk	r3, r4, r3
2001ef9c:	e4630000 	lhui	r3, r3, 0
2001efa0:	f4730024 	shi	r3, r19, 36
		local_comp = comp;
2001efa4:	b0002006 	imm	8198
2001efa8:	e0601dcc 	lbui	r3, r0, 7628	// 20061dcc <comp>
2001efac:	f0730026 	sbi	r3, r19, 38
		comp = local_comp + 1;
2001efb0:	e0730026 	lbui	r3, r19, 38
2001efb4:	30630001 	addik	r3, r3, 1
2001efb8:	a46300ff 	andi	r3, r3, 255
2001efbc:	90630060 	sext8	r3, r3
2001efc0:	b0002006 	imm	8198
2001efc4:	f0601dcc 	sbi	r3, r0, 7628	// 20061dcc <comp>
		local_ptr = ptr;
2001efc8:	b0002006 	imm	8198
2001efcc:	e0601dce 	lbui	r3, r0, 7630	// 20061dce <ptr>
2001efd0:	f0730027 	sbi	r3, r19, 39
		tmp_access = access(local_ptr, 2);
2001efd4:	e0730027 	lbui	r3, r19, 39
2001efd8:	90630060 	sext8	r3, r3
2001efdc:	10a30000 	addk	r5, r3, r0
2001efe0:	30c00002 	addik	r6, r0, 2
2001efe4:	b9f4ef68 	brlid	r15, -4248	// 2001df4c <access>
2001efe8:	80000000 	or	r0, r0, r0
2001efec:	f4730028 	shi	r3, r19, 40
		tokens_A[(index_A + (0)) % SIZE_A] = tmp_access;
2001eff0:	b0002004 	imm	8196
2001eff4:	e8606fcc 	lwi	r3, r0, 28620	// 20046fcc <decoder_parser_mvseq_A>
2001eff8:	e8830004 	lwi	r4, r3, 4
2001effc:	b0002006 	imm	8198
2001f000:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001f004:	a46301ff 	andi	r3, r3, 511
2001f008:	10631800 	addk	r3, r3, r3
2001f00c:	10641800 	addk	r3, r4, r3
2001f010:	e4930028 	lhui	r4, r19, 40
2001f014:	f4830000 	shi	r4, r3, 0
		local_ptr = ptr;
2001f018:	b0002006 	imm	8198
2001f01c:	e0601dce 	lbui	r3, r0, 7630	// 20061dce <ptr>
2001f020:	f0730027 	sbi	r3, r19, 39
		tmp_access0 = access(local_ptr, 0);
2001f024:	e0730027 	lbui	r3, r19, 39
2001f028:	90630060 	sext8	r3, r3
2001f02c:	10a30000 	addk	r5, r3, r0
2001f030:	10c00000 	addk	r6, r0, r0
2001f034:	b9f4ef18 	brlid	r15, -4328	// 2001df4c <access>
2001f038:	80000000 	or	r0, r0, r0
2001f03c:	f473002a 	shi	r3, r19, 42
		tokens_A[(index_A + (1)) % SIZE_A] = tmp_access0;
2001f040:	b0002004 	imm	8196
2001f044:	e8606fcc 	lwi	r3, r0, 28620	// 20046fcc <decoder_parser_mvseq_A>
2001f048:	e8830004 	lwi	r4, r3, 4
2001f04c:	b0002006 	imm	8198
2001f050:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001f054:	30630001 	addik	r3, r3, 1
2001f058:	a46301ff 	andi	r3, r3, 511
2001f05c:	10631800 	addk	r3, r3, r3
2001f060:	10641800 	addk	r3, r4, r3
2001f064:	e493002a 	lhui	r4, r19, 42
2001f068:	f4830000 	shi	r4, r3, 0
		local_ptr = ptr;
2001f06c:	b0002006 	imm	8198
2001f070:	e0601dce 	lbui	r3, r0, 7630	// 20061dce <ptr>
2001f074:	f0730027 	sbi	r3, r19, 39
		tmp_access1 = access(local_ptr, 1);
2001f078:	e0730027 	lbui	r3, r19, 39
2001f07c:	90630060 	sext8	r3, r3
2001f080:	10a30000 	addk	r5, r3, r0
2001f084:	30c00001 	addik	r6, r0, 1
2001f088:	b9f4eec4 	brlid	r15, -4412	// 2001df4c <access>
2001f08c:	80000000 	or	r0, r0, r0
2001f090:	f473002c 	shi	r3, r19, 44
		tokens_A[(index_A + (2)) % SIZE_A] = tmp_access1;
2001f094:	b0002004 	imm	8196
2001f098:	e8606fcc 	lwi	r3, r0, 28620	// 20046fcc <decoder_parser_mvseq_A>
2001f09c:	e8830004 	lwi	r4, r3, 4
2001f0a0:	b0002006 	imm	8198
2001f0a4:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001f0a8:	30630002 	addik	r3, r3, 2
2001f0ac:	a46301ff 	andi	r3, r3, 511
2001f0b0:	10631800 	addk	r3, r3, r3
2001f0b4:	10641800 	addk	r3, r4, r3
2001f0b8:	e493002c 	lhui	r4, r19, 44
2001f0bc:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
2001f0c0:	b0002006 	imm	8198
2001f0c4:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001f0c8:	30630001 	addik	r3, r3, 1
2001f0cc:	b0002006 	imm	8198
2001f0d0:	f8601db4 	swi	r3, r0, 7604	// 20061db4 <index_BTYPE>
		index_A += 3;
2001f0d4:	b0002006 	imm	8198
2001f0d8:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001f0dc:	30630003 	addik	r3, r3, 3
2001f0e0:	b0002006 	imm	8198
2001f0e4:	f8601dbc 	swi	r3, r0, 7612	// 20061dbc <index_A>
		
		read_end_BTYPE();
2001f0e8:	b9f4ed1c 	brlid	r15, -4836	// 2001de04 <read_end_BTYPE>
2001f0ec:	80000000 	or	r0, r0, r0
		write_end_A();
2001f0f0:	b9f4edbc 	brlid	r15, -4676	// 2001deac <write_end_A>
2001f0f4:	80000000 	or	r0, r0, r0
	}
2001f0f8:	e9e10000 	lwi	r15, r1, 0
2001f0fc:	10330000 	addk	r1, r19, r0
2001f100:	ea610030 	lwi	r19, r1, 48
2001f104:	30210034 	addik	r1, r1, 52
2001f108:	b60f0008 	rtsd	r15, 8
2001f10c:	80000000 	or	r0, r0, r0

2001f110 <decoder_parser_mvseq_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_parser_mvseq_initialize() {
2001f110:	3021fff4 	addik	r1, r1, -12
2001f114:	fa610008 	swi	r19, r1, 8
2001f118:	12610000 	addk	r19, r1, r0
		int i = 0;
2001f11c:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_read;
2001f120:	30600002 	addik	r3, r0, 2
2001f124:	b0002006 	imm	8198
2001f128:	f8601dd4 	swi	r3, r0, 7636	// 20061dd4 <_FSM_state>
		
	finished:
		// no read_end/write_end here!
		return;
2001f12c:	80000000 	or	r0, r0, r0
	}
2001f130:	10330000 	addk	r1, r19, r0
2001f134:	ea610008 	lwi	r19, r1, 8
2001f138:	3021000c 	addik	r1, r1, 12
2001f13c:	b60f0008 	rtsd	r15, 8
2001f140:	80000000 	or	r0, r0, r0

2001f144 <decoder_parser_mvseq_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	
	int decoder_parser_mvseq_scheduler() {
2001f144:	3021ffbc 	addik	r1, r1, -68
2001f148:	f9e10000 	swi	r15, r1, 0
2001f14c:	fa610040 	swi	r19, r1, 64
2001f150:	12610000 	addk	r19, r1, r0
		int i = 0;
2001f154:	f813001c 	swi	r0, r19, 28
		if(needInit){
2001f158:	b0002004 	imm	8196
2001f15c:	e0607084 	lbui	r3, r0, 28804	// 20047084 <needInit>
2001f160:	bc030014 	beqi	r3, 20		// 2001f174
			decoder_parser_mvseq_initialize();
2001f164:	b9f4ffac 	brlid	r15, -84	// 2001f110 <decoder_parser_mvseq_initialize>
2001f168:	80000000 	or	r0, r0, r0
			needInit = 0;
2001f16c:	b0002004 	imm	8196
2001f170:	f0007084 	sbi	r0, r0, 28804	// 20047084 <needInit>
		}
	
		read_BTYPE();
2001f174:	b9f4ec20 	brlid	r15, -5088	// 2001dd94 <read_BTYPE>
2001f178:	80000000 	or	r0, r0, r0
		write_A();
2001f17c:	b9f4ecc0 	brlid	r15, -4928	// 2001de3c <write_A>
2001f180:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
2001f184:	b0002006 	imm	8198
2001f188:	e8601dd4 	lwi	r3, r0, 7636	// 20061dd4 <_FSM_state>
2001f18c:	a8830001 	xori	r4, r3, 1
2001f190:	bc04008c 	beqi	r4, 140		// 2001f21c
2001f194:	30800001 	addik	r4, r0, 1
2001f198:	16441803 	cmpu	r18, r4, r3
2001f19c:	bc52001c 	blti	r18, 28		// 2001f1b8
2001f1a0:	a8630002 	xori	r3, r3, 2
2001f1a4:	bc0300e4 	beqi	r3, 228		// 2001f288
		case my_state_getw:
			goto l_getw;
		case my_state_read:
			goto l_read;
		default:
			exit(1);
2001f1a8:	30a00001 	addik	r5, r0, 1
2001f1ac:	b000dffe 	imm	-8194
2001f1b0:	b9f411e8 	brlid	r15, 4584	// 398 <exit>
2001f1b4:	80000000 	or	r0, r0, r0
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_geth:
			goto l_geth;
2001f1b8:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_geth:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_geth()) {
2001f1bc:	b0002006 	imm	8198
2001f1c0:	e8801db8 	lwi	r4, r0, 7608	// 20061db8 <numTokens_BTYPE>
2001f1c4:	b0002006 	imm	8198
2001f1c8:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001f1cc:	88641800 	xor	r3, r4, r3
2001f1d0:	bc030040 	beqi	r3, 64		// 2001f210
2001f1d4:	b9f4efe0 	brlid	r15, -4128	// 2001e1b4 <isSchedulable_geth>
2001f1d8:	80000000 	or	r0, r0, r0
2001f1dc:	bc030034 	beqi	r3, 52		// 2001f210
				int stop = 0;
2001f1e0:	f8130030 	swi	r0, r19, 48
				if (stop != 0) {
2001f1e4:	e8730030 	lwi	r3, r19, 48
2001f1e8:	bc030010 	beqi	r3, 16		// 2001f1f8
					_FSM_state = my_state_geth;
2001f1ec:	b0002006 	imm	8198
2001f1f0:	f8001dd4 	swi	r0, r0, 7636	// 20061dd4 <_FSM_state>
					goto finished;
2001f1f4:	b8000388 	bri	904		// 2001f57c
				}
				geth();
2001f1f8:	b9f4efe8 	brlid	r15, -4120	// 2001e1e0 <geth>
2001f1fc:	80000000 	or	r0, r0, r0
				i++;
2001f200:	e873001c 	lwi	r3, r19, 28
2001f204:	30630001 	addik	r3, r3, 1
2001f208:	f873001c 	swi	r3, r19, 28
				goto l_read;
2001f20c:	b8000080 	bri	128		// 2001f28c
			} else {
				_FSM_state = my_state_geth;
2001f210:	b0002006 	imm	8198
2001f214:	f8001dd4 	swi	r0, r0, 7636	// 20061dd4 <_FSM_state>
				goto finished;
2001f218:	b8000364 	bri	868		// 2001f57c
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_geth:
			goto l_geth;
		case my_state_getw:
			goto l_getw;
2001f21c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_geth;
				goto finished;
			}
		l_getw:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_getw()) {
2001f220:	b0002006 	imm	8198
2001f224:	e8801db8 	lwi	r4, r0, 7608	// 20061db8 <numTokens_BTYPE>
2001f228:	b0002006 	imm	8198
2001f22c:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001f230:	88641800 	xor	r3, r4, r3
2001f234:	bc030044 	beqi	r3, 68		// 2001f278
2001f238:	b9f4ee80 	brlid	r15, -4480	// 2001e0b8 <isSchedulable_getw>
2001f23c:	80000000 	or	r0, r0, r0
2001f240:	bc030038 	beqi	r3, 56		// 2001f278
				int stop = 0;
2001f244:	f813003c 	swi	r0, r19, 60
				if (stop != 0) {
2001f248:	e873003c 	lwi	r3, r19, 60
2001f24c:	bc030014 	beqi	r3, 20		// 2001f260
					_FSM_state = my_state_getw;
2001f250:	30600001 	addik	r3, r0, 1
2001f254:	b0002006 	imm	8198
2001f258:	f8601dd4 	swi	r3, r0, 7636	// 20061dd4 <_FSM_state>
					goto finished;
2001f25c:	b8000320 	bri	800		// 2001f57c
				}
				getw_replaced();
2001f260:	b9f4ee84 	brlid	r15, -4476	// 2001e0e4 <getw_replaced>
2001f264:	80000000 	or	r0, r0, r0
				i++;
2001f268:	e873001c 	lwi	r3, r19, 28
2001f26c:	30630001 	addik	r3, r3, 1
2001f270:	f873001c 	swi	r3, r19, 28
				goto l_geth;
2001f274:	b800ff48 	bri	-184		// 2001f1bc
			} else {
				_FSM_state = my_state_getw;
2001f278:	30600001 	addik	r3, r0, 1
2001f27c:	b0002006 	imm	8198
2001f280:	f8601dd4 	swi	r3, r0, 7636	// 20061dd4 <_FSM_state>
				goto finished;
2001f284:	b80002f8 	bri	760		// 2001f57c
		case my_state_geth:
			goto l_geth;
		case my_state_getw:
			goto l_getw;
		case my_state_read:
			goto l_read;
2001f288:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_getw;
				goto finished;
			}
		l_read:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_start()) {
2001f28c:	b0002006 	imm	8198
2001f290:	e8801db8 	lwi	r4, r0, 7608	// 20061db8 <numTokens_BTYPE>
2001f294:	b0002006 	imm	8198
2001f298:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001f29c:	88641800 	xor	r3, r4, r3
2001f2a0:	bc030044 	beqi	r3, 68		// 2001f2e4
2001f2a4:	b9f4ed00 	brlid	r15, -4864	// 2001dfa4 <isSchedulable_start>
2001f2a8:	80000000 	or	r0, r0, r0
2001f2ac:	bc030038 	beqi	r3, 56		// 2001f2e4
				int stop = 0;
2001f2b0:	f8130034 	swi	r0, r19, 52
				if (stop != 0) {
2001f2b4:	e8730034 	lwi	r3, r19, 52
2001f2b8:	bc030014 	beqi	r3, 20		// 2001f2cc
					_FSM_state = my_state_read;
2001f2bc:	30600002 	addik	r3, r0, 2
2001f2c0:	b0002006 	imm	8198
2001f2c4:	f8601dd4 	swi	r3, r0, 7636	// 20061dd4 <_FSM_state>
					goto finished;
2001f2c8:	b80002b4 	bri	692		// 2001f57c
				}
				start();
2001f2cc:	b9f4ed4c 	brlid	r15, -4788	// 2001e018 <start>
2001f2d0:	80000000 	or	r0, r0, r0
				i++;
2001f2d4:	e873001c 	lwi	r3, r19, 28
2001f2d8:	30630001 	addik	r3, r3, 1
2001f2dc:	f873001c 	swi	r3, r19, 28
				goto l_getw;
2001f2e0:	b800ff40 	bri	-192		// 2001f220
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_read_noPredict()) {
2001f2e4:	b0002006 	imm	8198
2001f2e8:	e8801db8 	lwi	r4, r0, 7608	// 20061db8 <numTokens_BTYPE>
2001f2ec:	b0002006 	imm	8198
2001f2f0:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001f2f4:	88641800 	xor	r3, r4, r3
2001f2f8:	bc030044 	beqi	r3, 68		// 2001f33c
2001f2fc:	b9f4ef60 	brlid	r15, -4256	// 2001e25c <isSchedulable_read_noPredict>
2001f300:	80000000 	or	r0, r0, r0
2001f304:	bc030038 	beqi	r3, 56		// 2001f33c
				int stop = 0;
2001f308:	f8130038 	swi	r0, r19, 56
				if (stop != 0) {
2001f30c:	e8730038 	lwi	r3, r19, 56
2001f310:	bc030014 	beqi	r3, 20		// 2001f324
					_FSM_state = my_state_read;
2001f314:	30600002 	addik	r3, r0, 2
2001f318:	b0002006 	imm	8198
2001f31c:	f8601dd4 	swi	r3, r0, 7636	// 20061dd4 <_FSM_state>
					goto finished;
2001f320:	b800025c 	bri	604		// 2001f57c
				}
				read_noPredict();
2001f324:	b9f4f03c 	brlid	r15, -4036	// 2001e360 <read_noPredict>
2001f328:	80000000 	or	r0, r0, r0
				i++;
2001f32c:	e873001c 	lwi	r3, r19, 28
2001f330:	30630001 	addik	r3, r3, 1
2001f334:	f873001c 	swi	r3, r19, 28
				goto l_read;
2001f338:	b800ff54 	bri	-172		// 2001f28c
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_read_predict_y0()) {
2001f33c:	b0002006 	imm	8198
2001f340:	e8801db8 	lwi	r4, r0, 7608	// 20061db8 <numTokens_BTYPE>
2001f344:	b0002006 	imm	8198
2001f348:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001f34c:	88641800 	xor	r3, r4, r3
2001f350:	bc030078 	beqi	r3, 120		// 2001f3c8
2001f354:	b9f4f224 	brlid	r15, -3548	// 2001e578 <isSchedulable_read_predict_y0>
2001f358:	80000000 	or	r0, r0, r0
2001f35c:	bc03006c 	beqi	r3, 108		// 2001f3c8
				int stop = 0;
2001f360:	f8130020 	swi	r0, r19, 32
				if (3 > SIZE_A - index_A + decoder_parser_mvseq_A->read_inds[0]) {
2001f364:	b0002004 	imm	8196
2001f368:	e8606fcc 	lwi	r3, r0, 28620	// 20046fcc <decoder_parser_mvseq_A>
2001f36c:	e863000c 	lwi	r3, r3, 12
2001f370:	e8830000 	lwi	r4, r3, 0
2001f374:	b0002006 	imm	8198
2001f378:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001f37c:	14632000 	rsubk	r3, r3, r4
2001f380:	30830200 	addik	r4, r3, 512
2001f384:	30600002 	addik	r3, r0, 2
2001f388:	16441803 	cmpu	r18, r4, r3
2001f38c:	bc52000c 	blti	r18, 12		// 2001f398
					stop = 1;
2001f390:	30600001 	addik	r3, r0, 1
2001f394:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
2001f398:	e8730020 	lwi	r3, r19, 32
2001f39c:	bc030014 	beqi	r3, 20		// 2001f3b0
					_FSM_state = my_state_read;
2001f3a0:	30600002 	addik	r3, r0, 2
2001f3a4:	b0002006 	imm	8198
2001f3a8:	f8601dd4 	swi	r3, r0, 7636	// 20061dd4 <_FSM_state>
					goto finished;
2001f3ac:	b80001d0 	bri	464		// 2001f57c
				}
				read_predict_y0();
2001f3b0:	b9f4f290 	brlid	r15, -3440	// 2001e640 <read_predict_y0>
2001f3b4:	80000000 	or	r0, r0, r0
				i++;
2001f3b8:	e873001c 	lwi	r3, r19, 28
2001f3bc:	30630001 	addik	r3, r3, 1
2001f3c0:	f873001c 	swi	r3, r19, 28
				goto l_read;
2001f3c4:	b800fec8 	bri	-312		// 2001f28c
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_read_predict_y1()) {
2001f3c8:	b0002006 	imm	8198
2001f3cc:	e8801db8 	lwi	r4, r0, 7608	// 20061db8 <numTokens_BTYPE>
2001f3d0:	b0002006 	imm	8198
2001f3d4:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001f3d8:	88641800 	xor	r3, r4, r3
2001f3dc:	bc030078 	beqi	r3, 120		// 2001f454
2001f3e0:	b9f4f4a8 	brlid	r15, -2904	// 2001e888 <isSchedulable_read_predict_y1>
2001f3e4:	80000000 	or	r0, r0, r0
2001f3e8:	bc03006c 	beqi	r3, 108		// 2001f454
				int stop = 0;
2001f3ec:	f8130024 	swi	r0, r19, 36
				if (3 > SIZE_A - index_A + decoder_parser_mvseq_A->read_inds[0]) {
2001f3f0:	b0002004 	imm	8196
2001f3f4:	e8606fcc 	lwi	r3, r0, 28620	// 20046fcc <decoder_parser_mvseq_A>
2001f3f8:	e863000c 	lwi	r3, r3, 12
2001f3fc:	e8830000 	lwi	r4, r3, 0
2001f400:	b0002006 	imm	8198
2001f404:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001f408:	14632000 	rsubk	r3, r3, r4
2001f40c:	30830200 	addik	r4, r3, 512
2001f410:	30600002 	addik	r3, r0, 2
2001f414:	16441803 	cmpu	r18, r4, r3
2001f418:	bc52000c 	blti	r18, 12		// 2001f424
					stop = 1;
2001f41c:	30600001 	addik	r3, r0, 1
2001f420:	f8730024 	swi	r3, r19, 36
				}
				if (stop != 0) {
2001f424:	e8730024 	lwi	r3, r19, 36
2001f428:	bc030014 	beqi	r3, 20		// 2001f43c
					_FSM_state = my_state_read;
2001f42c:	30600002 	addik	r3, r0, 2
2001f430:	b0002006 	imm	8198
2001f434:	f8601dd4 	swi	r3, r0, 7636	// 20061dd4 <_FSM_state>
					goto finished;
2001f438:	b8000144 	bri	324		// 2001f57c
				}
				read_predict_y1();
2001f43c:	b9f4f534 	brlid	r15, -2764	// 2001e970 <read_predict_y1>
2001f440:	80000000 	or	r0, r0, r0
				i++;
2001f444:	e873001c 	lwi	r3, r19, 28
2001f448:	30630001 	addik	r3, r3, 1
2001f44c:	f873001c 	swi	r3, r19, 28
				goto l_read;
2001f450:	b800fe3c 	bri	-452		// 2001f28c
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_read_predict_y2()) {
2001f454:	b0002006 	imm	8198
2001f458:	e8801db8 	lwi	r4, r0, 7608	// 20061db8 <numTokens_BTYPE>
2001f45c:	b0002006 	imm	8198
2001f460:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001f464:	88641800 	xor	r3, r4, r3
2001f468:	bc030078 	beqi	r3, 120		// 2001f4e0
2001f46c:	b9f4f724 	brlid	r15, -2268	// 2001eb90 <isSchedulable_read_predict_y2>
2001f470:	80000000 	or	r0, r0, r0
2001f474:	bc03006c 	beqi	r3, 108		// 2001f4e0
				int stop = 0;
2001f478:	f8130028 	swi	r0, r19, 40
				if (3 > SIZE_A - index_A + decoder_parser_mvseq_A->read_inds[0]) {
2001f47c:	b0002004 	imm	8196
2001f480:	e8606fcc 	lwi	r3, r0, 28620	// 20046fcc <decoder_parser_mvseq_A>
2001f484:	e863000c 	lwi	r3, r3, 12
2001f488:	e8830000 	lwi	r4, r3, 0
2001f48c:	b0002006 	imm	8198
2001f490:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001f494:	14632000 	rsubk	r3, r3, r4
2001f498:	30830200 	addik	r4, r3, 512
2001f49c:	30600002 	addik	r3, r0, 2
2001f4a0:	16441803 	cmpu	r18, r4, r3
2001f4a4:	bc52000c 	blti	r18, 12		// 2001f4b0
					stop = 1;
2001f4a8:	30600001 	addik	r3, r0, 1
2001f4ac:	f8730028 	swi	r3, r19, 40
				}
				if (stop != 0) {
2001f4b0:	e8730028 	lwi	r3, r19, 40
2001f4b4:	bc030014 	beqi	r3, 20		// 2001f4c8
					_FSM_state = my_state_read;
2001f4b8:	30600002 	addik	r3, r0, 2
2001f4bc:	b0002006 	imm	8198
2001f4c0:	f8601dd4 	swi	r3, r0, 7636	// 20061dd4 <_FSM_state>
					goto finished;
2001f4c4:	b80000b8 	bri	184		// 2001f57c
				}
				read_predict_y2();
2001f4c8:	b9f4f7b0 	brlid	r15, -2128	// 2001ec78 <read_predict_y2>
2001f4cc:	80000000 	or	r0, r0, r0
				i++;
2001f4d0:	e873001c 	lwi	r3, r19, 28
2001f4d4:	30630001 	addik	r3, r3, 1
2001f4d8:	f873001c 	swi	r3, r19, 28
				goto l_read;
2001f4dc:	b800fdb0 	bri	-592		// 2001f28c
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_read_predict_y3()) {
2001f4e0:	b0002006 	imm	8198
2001f4e4:	e8801db8 	lwi	r4, r0, 7608	// 20061db8 <numTokens_BTYPE>
2001f4e8:	b0002006 	imm	8198
2001f4ec:	e8601db4 	lwi	r3, r0, 7604	// 20061db4 <index_BTYPE>
2001f4f0:	88641800 	xor	r3, r4, r3
2001f4f4:	bc030078 	beqi	r3, 120		// 2001f56c
2001f4f8:	b9f4f96c 	brlid	r15, -1684	// 2001ee64 <isSchedulable_read_predict_y3>
2001f4fc:	80000000 	or	r0, r0, r0
2001f500:	bc03006c 	beqi	r3, 108		// 2001f56c
				int stop = 0;
2001f504:	f813002c 	swi	r0, r19, 44
				if (3 > SIZE_A - index_A + decoder_parser_mvseq_A->read_inds[0]) {
2001f508:	b0002004 	imm	8196
2001f50c:	e8606fcc 	lwi	r3, r0, 28620	// 20046fcc <decoder_parser_mvseq_A>
2001f510:	e863000c 	lwi	r3, r3, 12
2001f514:	e8830000 	lwi	r4, r3, 0
2001f518:	b0002006 	imm	8198
2001f51c:	e8601dbc 	lwi	r3, r0, 7612	// 20061dbc <index_A>
2001f520:	14632000 	rsubk	r3, r3, r4
2001f524:	30830200 	addik	r4, r3, 512
2001f528:	30600002 	addik	r3, r0, 2
2001f52c:	16441803 	cmpu	r18, r4, r3
2001f530:	bc52000c 	blti	r18, 12		// 2001f53c
					stop = 1;
2001f534:	30600001 	addik	r3, r0, 1
2001f538:	f873002c 	swi	r3, r19, 44
				}
				if (stop != 0) {
2001f53c:	e873002c 	lwi	r3, r19, 44
2001f540:	bc030014 	beqi	r3, 20		// 2001f554
					_FSM_state = my_state_read;
2001f544:	30600002 	addik	r3, r0, 2
2001f548:	b0002006 	imm	8198
2001f54c:	f8601dd4 	swi	r3, r0, 7636	// 20061dd4 <_FSM_state>
					goto finished;
2001f550:	b800002c 	bri	44		// 2001f57c
				}
				read_predict_y3();
2001f554:	b9f4f9f8 	brlid	r15, -1544	// 2001ef4c <read_predict_y3>
2001f558:	80000000 	or	r0, r0, r0
				i++;
2001f55c:	e873001c 	lwi	r3, r19, 28
2001f560:	30630001 	addik	r3, r3, 1
2001f564:	f873001c 	swi	r3, r19, 28
				goto l_read;
2001f568:	b800fd24 	bri	-732		// 2001f28c
			} else {
				_FSM_state = my_state_read;
2001f56c:	30600002 	addik	r3, r0, 2
2001f570:	b0002006 	imm	8198
2001f574:	f8601dd4 	swi	r3, r0, 7636	// 20061dd4 <_FSM_state>
				goto finished;
2001f578:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_BTYPE();
2001f57c:	b9f4e888 	brlid	r15, -6008	// 2001de04 <read_end_BTYPE>
2001f580:	80000000 	or	r0, r0, r0
		
		write_end_A();
2001f584:	b9f4e928 	brlid	r15, -5848	// 2001deac <write_end_A>
2001f588:	80000000 	or	r0, r0, r0
		
		
		return i;
2001f58c:	e873001c 	lwi	r3, r19, 28
	}
2001f590:	e9e10000 	lwi	r15, r1, 0
2001f594:	10330000 	addk	r1, r19, r0
2001f598:	ea610040 	lwi	r19, r1, 64
2001f59c:	30210044 	addik	r1, r1, 68
2001f5a0:	b60f0008 	rtsd	r15, 8
2001f5a4:	80000000 	or	r0, r0, r0

2001f5a8 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001f5a8:	3021fff8 	addik	r1, r1, -8
2001f5ac:	fa610004 	swi	r19, r1, 4
2001f5b0:	12610000 	addk	r19, r1, r0
2001f5b4:	f8b3000c 	swi	r5, r19, 12
2001f5b8:	f8d30010 	swi	r6, r19, 16
2001f5bc:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001f5c0:	e873000c 	lwi	r3, r19, 12
2001f5c4:	e8630010 	lwi	r3, r3, 16
2001f5c8:	e8830000 	lwi	r4, r3, 0
2001f5cc:	e873000c 	lwi	r3, r19, 12
2001f5d0:	e8a3000c 	lwi	r5, r3, 12
2001f5d4:	e8730010 	lwi	r3, r19, 16
2001f5d8:	64630402 	bslli	r3, r3, 2
2001f5dc:	10651800 	addk	r3, r5, r3
2001f5e0:	e8630000 	lwi	r3, r3, 0
2001f5e4:	14a32000 	rsubk	r5, r3, r4
2001f5e8:	30600001 	addik	r3, r0, 1
2001f5ec:	e8930014 	lwi	r4, r19, 20
2001f5f0:	16442803 	cmpu	r18, r4, r5
2001f5f4:	bcb20008 	bgei	r18, 8		// 2001f5fc
2001f5f8:	10600000 	addk	r3, r0, r0
2001f5fc:	a46300ff 	andi	r3, r3, 255
}
2001f600:	10330000 	addk	r1, r19, r0
2001f604:	ea610004 	lwi	r19, r1, 4
2001f608:	30210008 	addik	r1, r1, 8
2001f60c:	b60f0008 	rtsd	r15, 8
2001f610:	80000000 	or	r0, r0, r0

2001f614 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001f614:	3021fff8 	addik	r1, r1, -8
2001f618:	fa610004 	swi	r19, r1, 4
2001f61c:	12610000 	addk	r19, r1, r0
2001f620:	f8b3000c 	swi	r5, r19, 12
2001f624:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001f628:	e873000c 	lwi	r3, r19, 12
2001f62c:	e8630010 	lwi	r3, r3, 16
2001f630:	e8830000 	lwi	r4, r3, 0
2001f634:	e873000c 	lwi	r3, r19, 12
2001f638:	e8a3000c 	lwi	r5, r3, 12
2001f63c:	e8730010 	lwi	r3, r19, 16
2001f640:	64630402 	bslli	r3, r3, 2
2001f644:	10651800 	addk	r3, r5, r3
2001f648:	e8630000 	lwi	r3, r3, 0
2001f64c:	14632000 	rsubk	r3, r3, r4
}
2001f650:	10330000 	addk	r1, r19, r0
2001f654:	ea610004 	lwi	r19, r1, 4
2001f658:	30210008 	addik	r1, r1, 8
2001f65c:	b60f0008 	rtsd	r15, 8
2001f660:	80000000 	or	r0, r0, r0

2001f664 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2001f664:	3021fff4 	addik	r1, r1, -12
2001f668:	fa610008 	swi	r19, r1, 8
2001f66c:	12610000 	addk	r19, r1, r0
2001f670:	f8b30010 	swi	r5, r19, 16
2001f674:	f8d30014 	swi	r6, r19, 20
2001f678:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001f67c:	f8130004 	swi	r0, r19, 4
2001f680:	b800005c 	bri	92		// 2001f6dc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001f684:	e8730010 	lwi	r3, r19, 16
2001f688:	e8830000 	lwi	r4, r3, 0
2001f68c:	e8730010 	lwi	r3, r19, 16
2001f690:	e8a3000c 	lwi	r5, r3, 12
2001f694:	e8730004 	lwi	r3, r19, 4
2001f698:	64630402 	bslli	r3, r3, 2
2001f69c:	10651800 	addk	r3, r5, r3
2001f6a0:	e8a30000 	lwi	r5, r3, 0
2001f6a4:	e8730010 	lwi	r3, r19, 16
2001f6a8:	e8630010 	lwi	r3, r3, 16
2001f6ac:	e8630000 	lwi	r3, r3, 0
2001f6b0:	14632800 	rsubk	r3, r3, r5
2001f6b4:	10641800 	addk	r3, r4, r3
2001f6b8:	30830001 	addik	r4, r3, 1
2001f6bc:	e8730018 	lwi	r3, r19, 24
2001f6c0:	16441803 	cmpu	r18, r4, r3
2001f6c4:	bc52000c 	blti	r18, 12		// 2001f6d0
            return 0;
2001f6c8:	10600000 	addk	r3, r0, r0
2001f6cc:	b8000024 	bri	36		// 2001f6f0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001f6d0:	e8730004 	lwi	r3, r19, 4
2001f6d4:	30630001 	addik	r3, r3, 1
2001f6d8:	f8730004 	swi	r3, r19, 4
2001f6dc:	e8930004 	lwi	r4, r19, 4
2001f6e0:	e8730014 	lwi	r3, r19, 20
2001f6e4:	16432003 	cmpu	r18, r3, r4
2001f6e8:	bc52ff9c 	blti	r18, -100		// 2001f684
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001f6ec:	30600001 	addik	r3, r0, 1
}
2001f6f0:	10330000 	addk	r1, r19, r0
2001f6f4:	ea610008 	lwi	r19, r1, 8
2001f6f8:	3021000c 	addik	r1, r1, 12
2001f6fc:	b60f0008 	rtsd	r15, 8
2001f700:	80000000 	or	r0, r0, r0

2001f704 <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001f704:	3021ffec 	addik	r1, r1, -20
2001f708:	fa610010 	swi	r19, r1, 16
2001f70c:	12610000 	addk	r19, r1, r0
2001f710:	f8b30018 	swi	r5, r19, 24
2001f714:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001f718:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001f71c:	f8130004 	swi	r0, r19, 4
2001f720:	b8000054 	bri	84		// 2001f774
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001f724:	e8730018 	lwi	r3, r19, 24
2001f728:	e8630010 	lwi	r3, r3, 16
2001f72c:	e8830000 	lwi	r4, r3, 0
2001f730:	e8730018 	lwi	r3, r19, 24
2001f734:	e8a3000c 	lwi	r5, r3, 12
2001f738:	e8730004 	lwi	r3, r19, 4
2001f73c:	64630402 	bslli	r3, r3, 2
2001f740:	10651800 	addk	r3, r5, r3
2001f744:	e8630000 	lwi	r3, r3, 0
2001f748:	14632000 	rsubk	r3, r3, r4
2001f74c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001f750:	e8930008 	lwi	r4, r19, 8
2001f754:	e873000c 	lwi	r3, r19, 12
2001f758:	16441803 	cmpu	r18, r4, r3
2001f75c:	bcb20008 	bgei	r18, 8		// 2001f764
2001f760:	10640000 	addk	r3, r4, r0
2001f764:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001f768:	e8730004 	lwi	r3, r19, 4
2001f76c:	30630001 	addik	r3, r3, 1
2001f770:	f8730004 	swi	r3, r19, 4
2001f774:	e8930004 	lwi	r4, r19, 4
2001f778:	e873001c 	lwi	r3, r19, 28
2001f77c:	16432003 	cmpu	r18, r3, r4
2001f780:	bc52ffa4 	blti	r18, -92		// 2001f724
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001f784:	e8730018 	lwi	r3, r19, 24
2001f788:	e8830000 	lwi	r4, r3, 0
2001f78c:	e8730008 	lwi	r3, r19, 8
2001f790:	14632000 	rsubk	r3, r3, r4
}
2001f794:	10330000 	addk	r1, r19, r0
2001f798:	ea610010 	lwi	r19, r1, 16
2001f79c:	30210014 	addik	r1, r1, 20
2001f7a0:	b60f0008 	rtsd	r15, 8
2001f7a4:	80000000 	or	r0, r0, r0

2001f7a8 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001f7a8:	3021fff4 	addik	r1, r1, -12
2001f7ac:	fa610008 	swi	r19, r1, 8
2001f7b0:	12610000 	addk	r19, r1, r0
2001f7b4:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2001f7b8:	e8730010 	lwi	r3, r19, 16
2001f7bc:	e8630010 	lwi	r3, r3, 16
2001f7c0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001f7c4:	f8130004 	swi	r0, r19, 4
2001f7c8:	b8000028 	bri	40		// 2001f7f0
        fifo->read_inds[i] = 0;
2001f7cc:	e8730010 	lwi	r3, r19, 16
2001f7d0:	e883000c 	lwi	r4, r3, 12
2001f7d4:	e8730004 	lwi	r3, r19, 4
2001f7d8:	64630402 	bslli	r3, r3, 2
2001f7dc:	10641800 	addk	r3, r4, r3
2001f7e0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001f7e4:	e8730004 	lwi	r3, r19, 4
2001f7e8:	30630001 	addik	r3, r3, 1
2001f7ec:	f8730004 	swi	r3, r19, 4
2001f7f0:	e8730010 	lwi	r3, r19, 16
2001f7f4:	e8830008 	lwi	r4, r3, 8
2001f7f8:	e8730004 	lwi	r3, r19, 4
2001f7fc:	16441803 	cmpu	r18, r4, r3
2001f800:	bc52ffcc 	blti	r18, -52		// 2001f7cc
        fifo->read_inds[i] = 0;
    }
}
2001f804:	10330000 	addk	r1, r19, r0
2001f808:	ea610008 	lwi	r19, r1, 8
2001f80c:	3021000c 	addik	r1, r1, 12
2001f810:	b60f0008 	rtsd	r15, 8
2001f814:	80000000 	or	r0, r0, r0

2001f818 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001f818:	3021fff4 	addik	r1, r1, -12
2001f81c:	fa610008 	swi	r19, r1, 8
2001f820:	12610000 	addk	r19, r1, r0
2001f824:	f8b30010 	swi	r5, r19, 16
2001f828:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001f82c:	e8730010 	lwi	r3, r19, 16
2001f830:	e8830004 	lwi	r4, r3, 4
2001f834:	e8730010 	lwi	r3, r19, 16
2001f838:	e8a3000c 	lwi	r5, r3, 12
2001f83c:	e8730014 	lwi	r3, r19, 20
2001f840:	64630402 	bslli	r3, r3, 2
2001f844:	10651800 	addk	r3, r5, r3
2001f848:	e8a30000 	lwi	r5, r3, 0
2001f84c:	e8730010 	lwi	r3, r19, 16
2001f850:	e8630000 	lwi	r3, r3, 0
2001f854:	3063ffff 	addik	r3, r3, -1
2001f858:	84651800 	and	r3, r5, r3
2001f85c:	10641800 	addk	r3, r4, r3
2001f860:	e0630000 	lbui	r3, r3, 0
2001f864:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2001f868:	e8730010 	lwi	r3, r19, 16
2001f86c:	e883000c 	lwi	r4, r3, 12
2001f870:	e8730014 	lwi	r3, r19, 20
2001f874:	64630402 	bslli	r3, r3, 2
2001f878:	10641800 	addk	r3, r4, r3
2001f87c:	e8830000 	lwi	r4, r3, 0
2001f880:	30840001 	addik	r4, r4, 1
2001f884:	f8830000 	swi	r4, r3, 0
    return value;
2001f888:	e0730004 	lbui	r3, r19, 4
2001f88c:	90630060 	sext8	r3, r3
}
2001f890:	10330000 	addk	r1, r19, r0
2001f894:	ea610008 	lwi	r19, r1, 8
2001f898:	3021000c 	addik	r1, r1, 12
2001f89c:	b60f0008 	rtsd	r15, 8
2001f8a0:	80000000 	or	r0, r0, r0

2001f8a4 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001f8a4:	3021fff8 	addik	r1, r1, -8
2001f8a8:	fa610004 	swi	r19, r1, 4
2001f8ac:	12610000 	addk	r19, r1, r0
2001f8b0:	f8b3000c 	swi	r5, r19, 12
2001f8b4:	10660000 	addk	r3, r6, r0
2001f8b8:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001f8bc:	e873000c 	lwi	r3, r19, 12
2001f8c0:	e8830004 	lwi	r4, r3, 4
2001f8c4:	e873000c 	lwi	r3, r19, 12
2001f8c8:	e8630010 	lwi	r3, r3, 16
2001f8cc:	e8a30000 	lwi	r5, r3, 0
2001f8d0:	e873000c 	lwi	r3, r19, 12
2001f8d4:	e8630000 	lwi	r3, r3, 0
2001f8d8:	3063ffff 	addik	r3, r3, -1
2001f8dc:	84651800 	and	r3, r5, r3
2001f8e0:	10641800 	addk	r3, r4, r3
2001f8e4:	e0930010 	lbui	r4, r19, 16
2001f8e8:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2001f8ec:	e873000c 	lwi	r3, r19, 12
2001f8f0:	e8630010 	lwi	r3, r3, 16
2001f8f4:	e8830000 	lwi	r4, r3, 0
2001f8f8:	30840001 	addik	r4, r4, 1
2001f8fc:	f8830000 	swi	r4, r3, 0
}
2001f900:	10330000 	addk	r1, r19, r0
2001f904:	ea610004 	lwi	r19, r1, 4
2001f908:	30210008 	addik	r1, r1, 8
2001f90c:	b60f0008 	rtsd	r15, 8
2001f910:	80000000 	or	r0, r0, r0

2001f914 <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001f914:	3021fff8 	addik	r1, r1, -8
2001f918:	fa610004 	swi	r19, r1, 4
2001f91c:	12610000 	addk	r19, r1, r0
2001f920:	f8b3000c 	swi	r5, r19, 12
2001f924:	f8d30010 	swi	r6, r19, 16
2001f928:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001f92c:	e873000c 	lwi	r3, r19, 12
2001f930:	e8630010 	lwi	r3, r3, 16
2001f934:	e8830000 	lwi	r4, r3, 0
2001f938:	e873000c 	lwi	r3, r19, 12
2001f93c:	e8a3000c 	lwi	r5, r3, 12
2001f940:	e8730010 	lwi	r3, r19, 16
2001f944:	64630402 	bslli	r3, r3, 2
2001f948:	10651800 	addk	r3, r5, r3
2001f94c:	e8630000 	lwi	r3, r3, 0
2001f950:	14a32000 	rsubk	r5, r3, r4
2001f954:	30600001 	addik	r3, r0, 1
2001f958:	e8930014 	lwi	r4, r19, 20
2001f95c:	16442803 	cmpu	r18, r4, r5
2001f960:	bcb20008 	bgei	r18, 8		// 2001f968
2001f964:	10600000 	addk	r3, r0, r0
2001f968:	a46300ff 	andi	r3, r3, 255
}
2001f96c:	10330000 	addk	r1, r19, r0
2001f970:	ea610004 	lwi	r19, r1, 4
2001f974:	30210008 	addik	r1, r1, 8
2001f978:	b60f0008 	rtsd	r15, 8
2001f97c:	80000000 	or	r0, r0, r0

2001f980 <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001f980:	3021fff8 	addik	r1, r1, -8
2001f984:	fa610004 	swi	r19, r1, 4
2001f988:	12610000 	addk	r19, r1, r0
2001f98c:	f8b3000c 	swi	r5, r19, 12
2001f990:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001f994:	e873000c 	lwi	r3, r19, 12
2001f998:	e8630010 	lwi	r3, r3, 16
2001f99c:	e8830000 	lwi	r4, r3, 0
2001f9a0:	e873000c 	lwi	r3, r19, 12
2001f9a4:	e8a3000c 	lwi	r5, r3, 12
2001f9a8:	e8730010 	lwi	r3, r19, 16
2001f9ac:	64630402 	bslli	r3, r3, 2
2001f9b0:	10651800 	addk	r3, r5, r3
2001f9b4:	e8630000 	lwi	r3, r3, 0
2001f9b8:	14632000 	rsubk	r3, r3, r4
}
2001f9bc:	10330000 	addk	r1, r19, r0
2001f9c0:	ea610004 	lwi	r19, r1, 4
2001f9c4:	30210008 	addik	r1, r1, 8
2001f9c8:	b60f0008 	rtsd	r15, 8
2001f9cc:	80000000 	or	r0, r0, r0

2001f9d0 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2001f9d0:	3021fff4 	addik	r1, r1, -12
2001f9d4:	fa610008 	swi	r19, r1, 8
2001f9d8:	12610000 	addk	r19, r1, r0
2001f9dc:	f8b30010 	swi	r5, r19, 16
2001f9e0:	f8d30014 	swi	r6, r19, 20
2001f9e4:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001f9e8:	f8130004 	swi	r0, r19, 4
2001f9ec:	b800005c 	bri	92		// 2001fa48
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001f9f0:	e8730010 	lwi	r3, r19, 16
2001f9f4:	e8830000 	lwi	r4, r3, 0
2001f9f8:	e8730010 	lwi	r3, r19, 16
2001f9fc:	e8a3000c 	lwi	r5, r3, 12
2001fa00:	e8730004 	lwi	r3, r19, 4
2001fa04:	64630402 	bslli	r3, r3, 2
2001fa08:	10651800 	addk	r3, r5, r3
2001fa0c:	e8a30000 	lwi	r5, r3, 0
2001fa10:	e8730010 	lwi	r3, r19, 16
2001fa14:	e8630010 	lwi	r3, r3, 16
2001fa18:	e8630000 	lwi	r3, r3, 0
2001fa1c:	14632800 	rsubk	r3, r3, r5
2001fa20:	10641800 	addk	r3, r4, r3
2001fa24:	30830001 	addik	r4, r3, 1
2001fa28:	e8730018 	lwi	r3, r19, 24
2001fa2c:	16441803 	cmpu	r18, r4, r3
2001fa30:	bc52000c 	blti	r18, 12		// 2001fa3c
            return 0;
2001fa34:	10600000 	addk	r3, r0, r0
2001fa38:	b8000024 	bri	36		// 2001fa5c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001fa3c:	e8730004 	lwi	r3, r19, 4
2001fa40:	30630001 	addik	r3, r3, 1
2001fa44:	f8730004 	swi	r3, r19, 4
2001fa48:	e8930004 	lwi	r4, r19, 4
2001fa4c:	e8730014 	lwi	r3, r19, 20
2001fa50:	16432003 	cmpu	r18, r3, r4
2001fa54:	bc52ff9c 	blti	r18, -100		// 2001f9f0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001fa58:	30600001 	addik	r3, r0, 1
}
2001fa5c:	10330000 	addk	r1, r19, r0
2001fa60:	ea610008 	lwi	r19, r1, 8
2001fa64:	3021000c 	addik	r1, r1, 12
2001fa68:	b60f0008 	rtsd	r15, 8
2001fa6c:	80000000 	or	r0, r0, r0

2001fa70 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001fa70:	3021ffec 	addik	r1, r1, -20
2001fa74:	fa610010 	swi	r19, r1, 16
2001fa78:	12610000 	addk	r19, r1, r0
2001fa7c:	f8b30018 	swi	r5, r19, 24
2001fa80:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001fa84:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001fa88:	f8130004 	swi	r0, r19, 4
2001fa8c:	b8000054 	bri	84		// 2001fae0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001fa90:	e8730018 	lwi	r3, r19, 24
2001fa94:	e8630010 	lwi	r3, r3, 16
2001fa98:	e8830000 	lwi	r4, r3, 0
2001fa9c:	e8730018 	lwi	r3, r19, 24
2001faa0:	e8a3000c 	lwi	r5, r3, 12
2001faa4:	e8730004 	lwi	r3, r19, 4
2001faa8:	64630402 	bslli	r3, r3, 2
2001faac:	10651800 	addk	r3, r5, r3
2001fab0:	e8630000 	lwi	r3, r3, 0
2001fab4:	14632000 	rsubk	r3, r3, r4
2001fab8:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001fabc:	e8930008 	lwi	r4, r19, 8
2001fac0:	e873000c 	lwi	r3, r19, 12
2001fac4:	16441803 	cmpu	r18, r4, r3
2001fac8:	bcb20008 	bgei	r18, 8		// 2001fad0
2001facc:	10640000 	addk	r3, r4, r0
2001fad0:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001fad4:	e8730004 	lwi	r3, r19, 4
2001fad8:	30630001 	addik	r3, r3, 1
2001fadc:	f8730004 	swi	r3, r19, 4
2001fae0:	e8930004 	lwi	r4, r19, 4
2001fae4:	e873001c 	lwi	r3, r19, 28
2001fae8:	16432003 	cmpu	r18, r3, r4
2001faec:	bc52ffa4 	blti	r18, -92		// 2001fa90
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001faf0:	e8730018 	lwi	r3, r19, 24
2001faf4:	e8830000 	lwi	r4, r3, 0
2001faf8:	e8730008 	lwi	r3, r19, 8
2001fafc:	14632000 	rsubk	r3, r3, r4
}
2001fb00:	10330000 	addk	r1, r19, r0
2001fb04:	ea610010 	lwi	r19, r1, 16
2001fb08:	30210014 	addik	r1, r1, 20
2001fb0c:	b60f0008 	rtsd	r15, 8
2001fb10:	80000000 	or	r0, r0, r0

2001fb14 <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001fb14:	3021fff4 	addik	r1, r1, -12
2001fb18:	fa610008 	swi	r19, r1, 8
2001fb1c:	12610000 	addk	r19, r1, r0
2001fb20:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2001fb24:	e8730010 	lwi	r3, r19, 16
2001fb28:	e8630010 	lwi	r3, r3, 16
2001fb2c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001fb30:	f8130004 	swi	r0, r19, 4
2001fb34:	b8000028 	bri	40		// 2001fb5c
        fifo->read_inds[i] = 0;
2001fb38:	e8730010 	lwi	r3, r19, 16
2001fb3c:	e883000c 	lwi	r4, r3, 12
2001fb40:	e8730004 	lwi	r3, r19, 4
2001fb44:	64630402 	bslli	r3, r3, 2
2001fb48:	10641800 	addk	r3, r4, r3
2001fb4c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001fb50:	e8730004 	lwi	r3, r19, 4
2001fb54:	30630001 	addik	r3, r3, 1
2001fb58:	f8730004 	swi	r3, r19, 4
2001fb5c:	e8730010 	lwi	r3, r19, 16
2001fb60:	e8830008 	lwi	r4, r3, 8
2001fb64:	e8730004 	lwi	r3, r19, 4
2001fb68:	16441803 	cmpu	r18, r4, r3
2001fb6c:	bc52ffcc 	blti	r18, -52		// 2001fb38
        fifo->read_inds[i] = 0;
    }
}
2001fb70:	10330000 	addk	r1, r19, r0
2001fb74:	ea610008 	lwi	r19, r1, 8
2001fb78:	3021000c 	addik	r1, r1, 12
2001fb7c:	b60f0008 	rtsd	r15, 8
2001fb80:	80000000 	or	r0, r0, r0

2001fb84 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001fb84:	3021fff4 	addik	r1, r1, -12
2001fb88:	fa610008 	swi	r19, r1, 8
2001fb8c:	12610000 	addk	r19, r1, r0
2001fb90:	f8b30010 	swi	r5, r19, 16
2001fb94:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001fb98:	e8730010 	lwi	r3, r19, 16
2001fb9c:	e8830004 	lwi	r4, r3, 4
2001fba0:	e8730010 	lwi	r3, r19, 16
2001fba4:	e8a3000c 	lwi	r5, r3, 12
2001fba8:	e8730014 	lwi	r3, r19, 20
2001fbac:	64630402 	bslli	r3, r3, 2
2001fbb0:	10651800 	addk	r3, r5, r3
2001fbb4:	e8a30000 	lwi	r5, r3, 0
2001fbb8:	e8730010 	lwi	r3, r19, 16
2001fbbc:	e8630000 	lwi	r3, r3, 0
2001fbc0:	3063ffff 	addik	r3, r3, -1
2001fbc4:	84651800 	and	r3, r5, r3
2001fbc8:	10631800 	addk	r3, r3, r3
2001fbcc:	10641800 	addk	r3, r4, r3
2001fbd0:	e4630000 	lhui	r3, r3, 0
2001fbd4:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2001fbd8:	e8730010 	lwi	r3, r19, 16
2001fbdc:	e883000c 	lwi	r4, r3, 12
2001fbe0:	e8730014 	lwi	r3, r19, 20
2001fbe4:	64630402 	bslli	r3, r3, 2
2001fbe8:	10641800 	addk	r3, r4, r3
2001fbec:	e8830000 	lwi	r4, r3, 0
2001fbf0:	30840001 	addik	r4, r4, 1
2001fbf4:	f8830000 	swi	r4, r3, 0
    return value;
2001fbf8:	e4730004 	lhui	r3, r19, 4
2001fbfc:	90630061 	sext16	r3, r3
}
2001fc00:	10330000 	addk	r1, r19, r0
2001fc04:	ea610008 	lwi	r19, r1, 8
2001fc08:	3021000c 	addik	r1, r1, 12
2001fc0c:	b60f0008 	rtsd	r15, 8
2001fc10:	80000000 	or	r0, r0, r0

2001fc14 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001fc14:	3021fff8 	addik	r1, r1, -8
2001fc18:	fa610004 	swi	r19, r1, 4
2001fc1c:	12610000 	addk	r19, r1, r0
2001fc20:	f8b3000c 	swi	r5, r19, 12
2001fc24:	10660000 	addk	r3, r6, r0
2001fc28:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001fc2c:	e873000c 	lwi	r3, r19, 12
2001fc30:	e8830004 	lwi	r4, r3, 4
2001fc34:	e873000c 	lwi	r3, r19, 12
2001fc38:	e8630010 	lwi	r3, r3, 16
2001fc3c:	e8a30000 	lwi	r5, r3, 0
2001fc40:	e873000c 	lwi	r3, r19, 12
2001fc44:	e8630000 	lwi	r3, r3, 0
2001fc48:	3063ffff 	addik	r3, r3, -1
2001fc4c:	84651800 	and	r3, r5, r3
2001fc50:	10631800 	addk	r3, r3, r3
2001fc54:	10641800 	addk	r3, r4, r3
2001fc58:	e4930010 	lhui	r4, r19, 16
2001fc5c:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2001fc60:	e873000c 	lwi	r3, r19, 12
2001fc64:	e8630010 	lwi	r3, r3, 16
2001fc68:	e8830000 	lwi	r4, r3, 0
2001fc6c:	30840001 	addik	r4, r4, 1
2001fc70:	f8830000 	swi	r4, r3, 0
}
2001fc74:	10330000 	addk	r1, r19, r0
2001fc78:	ea610004 	lwi	r19, r1, 4
2001fc7c:	30210008 	addik	r1, r1, 8
2001fc80:	b60f0008 	rtsd	r15, 8
2001fc84:	80000000 	or	r0, r0, r0

2001fc88 <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001fc88:	3021fff8 	addik	r1, r1, -8
2001fc8c:	fa610004 	swi	r19, r1, 4
2001fc90:	12610000 	addk	r19, r1, r0
2001fc94:	f8b3000c 	swi	r5, r19, 12
2001fc98:	f8d30010 	swi	r6, r19, 16
2001fc9c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001fca0:	e873000c 	lwi	r3, r19, 12
2001fca4:	e8630010 	lwi	r3, r3, 16
2001fca8:	e8830000 	lwi	r4, r3, 0
2001fcac:	e873000c 	lwi	r3, r19, 12
2001fcb0:	e8a3000c 	lwi	r5, r3, 12
2001fcb4:	e8730010 	lwi	r3, r19, 16
2001fcb8:	64630402 	bslli	r3, r3, 2
2001fcbc:	10651800 	addk	r3, r5, r3
2001fcc0:	e8630000 	lwi	r3, r3, 0
2001fcc4:	14a32000 	rsubk	r5, r3, r4
2001fcc8:	30600001 	addik	r3, r0, 1
2001fccc:	e8930014 	lwi	r4, r19, 20
2001fcd0:	16442803 	cmpu	r18, r4, r5
2001fcd4:	bcb20008 	bgei	r18, 8		// 2001fcdc
2001fcd8:	10600000 	addk	r3, r0, r0
2001fcdc:	a46300ff 	andi	r3, r3, 255
}
2001fce0:	10330000 	addk	r1, r19, r0
2001fce4:	ea610004 	lwi	r19, r1, 4
2001fce8:	30210008 	addik	r1, r1, 8
2001fcec:	b60f0008 	rtsd	r15, 8
2001fcf0:	80000000 	or	r0, r0, r0

2001fcf4 <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001fcf4:	3021fff8 	addik	r1, r1, -8
2001fcf8:	fa610004 	swi	r19, r1, 4
2001fcfc:	12610000 	addk	r19, r1, r0
2001fd00:	f8b3000c 	swi	r5, r19, 12
2001fd04:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001fd08:	e873000c 	lwi	r3, r19, 12
2001fd0c:	e8630010 	lwi	r3, r3, 16
2001fd10:	e8830000 	lwi	r4, r3, 0
2001fd14:	e873000c 	lwi	r3, r19, 12
2001fd18:	e8a3000c 	lwi	r5, r3, 12
2001fd1c:	e8730010 	lwi	r3, r19, 16
2001fd20:	64630402 	bslli	r3, r3, 2
2001fd24:	10651800 	addk	r3, r5, r3
2001fd28:	e8630000 	lwi	r3, r3, 0
2001fd2c:	14632000 	rsubk	r3, r3, r4
}
2001fd30:	10330000 	addk	r1, r19, r0
2001fd34:	ea610004 	lwi	r19, r1, 4
2001fd38:	30210008 	addik	r1, r1, 8
2001fd3c:	b60f0008 	rtsd	r15, 8
2001fd40:	80000000 	or	r0, r0, r0

2001fd44 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2001fd44:	3021fff4 	addik	r1, r1, -12
2001fd48:	fa610008 	swi	r19, r1, 8
2001fd4c:	12610000 	addk	r19, r1, r0
2001fd50:	f8b30010 	swi	r5, r19, 16
2001fd54:	f8d30014 	swi	r6, r19, 20
2001fd58:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001fd5c:	f8130004 	swi	r0, r19, 4
2001fd60:	b800005c 	bri	92		// 2001fdbc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001fd64:	e8730010 	lwi	r3, r19, 16
2001fd68:	e8830000 	lwi	r4, r3, 0
2001fd6c:	e8730010 	lwi	r3, r19, 16
2001fd70:	e8a3000c 	lwi	r5, r3, 12
2001fd74:	e8730004 	lwi	r3, r19, 4
2001fd78:	64630402 	bslli	r3, r3, 2
2001fd7c:	10651800 	addk	r3, r5, r3
2001fd80:	e8a30000 	lwi	r5, r3, 0
2001fd84:	e8730010 	lwi	r3, r19, 16
2001fd88:	e8630010 	lwi	r3, r3, 16
2001fd8c:	e8630000 	lwi	r3, r3, 0
2001fd90:	14632800 	rsubk	r3, r3, r5
2001fd94:	10641800 	addk	r3, r4, r3
2001fd98:	30830001 	addik	r4, r3, 1
2001fd9c:	e8730018 	lwi	r3, r19, 24
2001fda0:	16441803 	cmpu	r18, r4, r3
2001fda4:	bc52000c 	blti	r18, 12		// 2001fdb0
            return 0;
2001fda8:	10600000 	addk	r3, r0, r0
2001fdac:	b8000024 	bri	36		// 2001fdd0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001fdb0:	e8730004 	lwi	r3, r19, 4
2001fdb4:	30630001 	addik	r3, r3, 1
2001fdb8:	f8730004 	swi	r3, r19, 4
2001fdbc:	e8930004 	lwi	r4, r19, 4
2001fdc0:	e8730014 	lwi	r3, r19, 20
2001fdc4:	16432003 	cmpu	r18, r3, r4
2001fdc8:	bc52ff9c 	blti	r18, -100		// 2001fd64
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001fdcc:	30600001 	addik	r3, r0, 1
}
2001fdd0:	10330000 	addk	r1, r19, r0
2001fdd4:	ea610008 	lwi	r19, r1, 8
2001fdd8:	3021000c 	addik	r1, r1, 12
2001fddc:	b60f0008 	rtsd	r15, 8
2001fde0:	80000000 	or	r0, r0, r0

2001fde4 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001fde4:	3021ffec 	addik	r1, r1, -20
2001fde8:	fa610010 	swi	r19, r1, 16
2001fdec:	12610000 	addk	r19, r1, r0
2001fdf0:	f8b30018 	swi	r5, r19, 24
2001fdf4:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001fdf8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001fdfc:	f8130004 	swi	r0, r19, 4
2001fe00:	b8000054 	bri	84		// 2001fe54
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001fe04:	e8730018 	lwi	r3, r19, 24
2001fe08:	e8630010 	lwi	r3, r3, 16
2001fe0c:	e8830000 	lwi	r4, r3, 0
2001fe10:	e8730018 	lwi	r3, r19, 24
2001fe14:	e8a3000c 	lwi	r5, r3, 12
2001fe18:	e8730004 	lwi	r3, r19, 4
2001fe1c:	64630402 	bslli	r3, r3, 2
2001fe20:	10651800 	addk	r3, r5, r3
2001fe24:	e8630000 	lwi	r3, r3, 0
2001fe28:	14632000 	rsubk	r3, r3, r4
2001fe2c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001fe30:	e8930008 	lwi	r4, r19, 8
2001fe34:	e873000c 	lwi	r3, r19, 12
2001fe38:	16441803 	cmpu	r18, r4, r3
2001fe3c:	bcb20008 	bgei	r18, 8		// 2001fe44
2001fe40:	10640000 	addk	r3, r4, r0
2001fe44:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001fe48:	e8730004 	lwi	r3, r19, 4
2001fe4c:	30630001 	addik	r3, r3, 1
2001fe50:	f8730004 	swi	r3, r19, 4
2001fe54:	e8930004 	lwi	r4, r19, 4
2001fe58:	e873001c 	lwi	r3, r19, 28
2001fe5c:	16432003 	cmpu	r18, r3, r4
2001fe60:	bc52ffa4 	blti	r18, -92		// 2001fe04
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001fe64:	e8730018 	lwi	r3, r19, 24
2001fe68:	e8830000 	lwi	r4, r3, 0
2001fe6c:	e8730008 	lwi	r3, r19, 8
2001fe70:	14632000 	rsubk	r3, r3, r4
}
2001fe74:	10330000 	addk	r1, r19, r0
2001fe78:	ea610010 	lwi	r19, r1, 16
2001fe7c:	30210014 	addik	r1, r1, 20
2001fe80:	b60f0008 	rtsd	r15, 8
2001fe84:	80000000 	or	r0, r0, r0

2001fe88 <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001fe88:	3021fff4 	addik	r1, r1, -12
2001fe8c:	fa610008 	swi	r19, r1, 8
2001fe90:	12610000 	addk	r19, r1, r0
2001fe94:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2001fe98:	e8730010 	lwi	r3, r19, 16
2001fe9c:	e8630010 	lwi	r3, r3, 16
2001fea0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001fea4:	f8130004 	swi	r0, r19, 4
2001fea8:	b8000028 	bri	40		// 2001fed0
        fifo->read_inds[i] = 0;
2001feac:	e8730010 	lwi	r3, r19, 16
2001feb0:	e883000c 	lwi	r4, r3, 12
2001feb4:	e8730004 	lwi	r3, r19, 4
2001feb8:	64630402 	bslli	r3, r3, 2
2001febc:	10641800 	addk	r3, r4, r3
2001fec0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001fec4:	e8730004 	lwi	r3, r19, 4
2001fec8:	30630001 	addik	r3, r3, 1
2001fecc:	f8730004 	swi	r3, r19, 4
2001fed0:	e8730010 	lwi	r3, r19, 16
2001fed4:	e8830008 	lwi	r4, r3, 8
2001fed8:	e8730004 	lwi	r3, r19, 4
2001fedc:	16441803 	cmpu	r18, r4, r3
2001fee0:	bc52ffcc 	blti	r18, -52		// 2001feac
        fifo->read_inds[i] = 0;
    }
}
2001fee4:	10330000 	addk	r1, r19, r0
2001fee8:	ea610008 	lwi	r19, r1, 8
2001feec:	3021000c 	addik	r1, r1, 12
2001fef0:	b60f0008 	rtsd	r15, 8
2001fef4:	80000000 	or	r0, r0, r0

2001fef8 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001fef8:	3021fff4 	addik	r1, r1, -12
2001fefc:	fa610008 	swi	r19, r1, 8
2001ff00:	12610000 	addk	r19, r1, r0
2001ff04:	f8b30010 	swi	r5, r19, 16
2001ff08:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001ff0c:	e8730010 	lwi	r3, r19, 16
2001ff10:	e8830004 	lwi	r4, r3, 4
2001ff14:	e8730010 	lwi	r3, r19, 16
2001ff18:	e8a3000c 	lwi	r5, r3, 12
2001ff1c:	e8730014 	lwi	r3, r19, 20
2001ff20:	64630402 	bslli	r3, r3, 2
2001ff24:	10651800 	addk	r3, r5, r3
2001ff28:	e8a30000 	lwi	r5, r3, 0
2001ff2c:	e8730010 	lwi	r3, r19, 16
2001ff30:	e8630000 	lwi	r3, r3, 0
2001ff34:	3063ffff 	addik	r3, r3, -1
2001ff38:	84651800 	and	r3, r5, r3
2001ff3c:	64630402 	bslli	r3, r3, 2
2001ff40:	10641800 	addk	r3, r4, r3
2001ff44:	e8630000 	lwi	r3, r3, 0
2001ff48:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2001ff4c:	e8730010 	lwi	r3, r19, 16
2001ff50:	e883000c 	lwi	r4, r3, 12
2001ff54:	e8730014 	lwi	r3, r19, 20
2001ff58:	64630402 	bslli	r3, r3, 2
2001ff5c:	10641800 	addk	r3, r4, r3
2001ff60:	e8830000 	lwi	r4, r3, 0
2001ff64:	30840001 	addik	r4, r4, 1
2001ff68:	f8830000 	swi	r4, r3, 0
    return value;
2001ff6c:	e8730004 	lwi	r3, r19, 4
}
2001ff70:	10330000 	addk	r1, r19, r0
2001ff74:	ea610008 	lwi	r19, r1, 8
2001ff78:	3021000c 	addik	r1, r1, 12
2001ff7c:	b60f0008 	rtsd	r15, 8
2001ff80:	80000000 	or	r0, r0, r0

2001ff84 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001ff84:	3021fff8 	addik	r1, r1, -8
2001ff88:	fa610004 	swi	r19, r1, 4
2001ff8c:	12610000 	addk	r19, r1, r0
2001ff90:	f8b3000c 	swi	r5, r19, 12
2001ff94:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001ff98:	e873000c 	lwi	r3, r19, 12
2001ff9c:	e8830004 	lwi	r4, r3, 4
2001ffa0:	e873000c 	lwi	r3, r19, 12
2001ffa4:	e8630010 	lwi	r3, r3, 16
2001ffa8:	e8a30000 	lwi	r5, r3, 0
2001ffac:	e873000c 	lwi	r3, r19, 12
2001ffb0:	e8630000 	lwi	r3, r3, 0
2001ffb4:	3063ffff 	addik	r3, r3, -1
2001ffb8:	84651800 	and	r3, r5, r3
2001ffbc:	64630402 	bslli	r3, r3, 2
2001ffc0:	10641800 	addk	r3, r4, r3
2001ffc4:	e8930010 	lwi	r4, r19, 16
2001ffc8:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2001ffcc:	e873000c 	lwi	r3, r19, 12
2001ffd0:	e8630010 	lwi	r3, r3, 16
2001ffd4:	e8830000 	lwi	r4, r3, 0
2001ffd8:	30840001 	addik	r4, r4, 1
2001ffdc:	f8830000 	swi	r4, r3, 0
}
2001ffe0:	10330000 	addk	r1, r19, r0
2001ffe4:	ea610004 	lwi	r19, r1, 4
2001ffe8:	30210008 	addik	r1, r1, 8
2001ffec:	b60f0008 	rtsd	r15, 8
2001fff0:	80000000 	or	r0, r0, r0

2001fff4 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001fff4:	3021fff8 	addik	r1, r1, -8
2001fff8:	fa610004 	swi	r19, r1, 4
2001fffc:	12610000 	addk	r19, r1, r0
20020000:	f8b3000c 	swi	r5, r19, 12
20020004:	f8d30010 	swi	r6, r19, 16
20020008:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002000c:	e873000c 	lwi	r3, r19, 12
20020010:	e8630010 	lwi	r3, r3, 16
20020014:	e8830000 	lwi	r4, r3, 0
20020018:	e873000c 	lwi	r3, r19, 12
2002001c:	e8a3000c 	lwi	r5, r3, 12
20020020:	e8730010 	lwi	r3, r19, 16
20020024:	64630402 	bslli	r3, r3, 2
20020028:	10651800 	addk	r3, r5, r3
2002002c:	e8630000 	lwi	r3, r3, 0
20020030:	14a32000 	rsubk	r5, r3, r4
20020034:	30600001 	addik	r3, r0, 1
20020038:	e8930014 	lwi	r4, r19, 20
2002003c:	16442803 	cmpu	r18, r4, r5
20020040:	bcb20008 	bgei	r18, 8		// 20020048
20020044:	10600000 	addk	r3, r0, r0
20020048:	a46300ff 	andi	r3, r3, 255
}
2002004c:	10330000 	addk	r1, r19, r0
20020050:	ea610004 	lwi	r19, r1, 4
20020054:	30210008 	addik	r1, r1, 8
20020058:	b60f0008 	rtsd	r15, 8
2002005c:	80000000 	or	r0, r0, r0

20020060 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20020060:	3021fff8 	addik	r1, r1, -8
20020064:	fa610004 	swi	r19, r1, 4
20020068:	12610000 	addk	r19, r1, r0
2002006c:	f8b3000c 	swi	r5, r19, 12
20020070:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20020074:	e873000c 	lwi	r3, r19, 12
20020078:	e8630010 	lwi	r3, r3, 16
2002007c:	e8830000 	lwi	r4, r3, 0
20020080:	e873000c 	lwi	r3, r19, 12
20020084:	e8a3000c 	lwi	r5, r3, 12
20020088:	e8730010 	lwi	r3, r19, 16
2002008c:	64630402 	bslli	r3, r3, 2
20020090:	10651800 	addk	r3, r5, r3
20020094:	e8630000 	lwi	r3, r3, 0
20020098:	14632000 	rsubk	r3, r3, r4
}
2002009c:	10330000 	addk	r1, r19, r0
200200a0:	ea610004 	lwi	r19, r1, 4
200200a4:	30210008 	addik	r1, r1, 8
200200a8:	b60f0008 	rtsd	r15, 8
200200ac:	80000000 	or	r0, r0, r0

200200b0 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200200b0:	3021fff4 	addik	r1, r1, -12
200200b4:	fa610008 	swi	r19, r1, 8
200200b8:	12610000 	addk	r19, r1, r0
200200bc:	f8b30010 	swi	r5, r19, 16
200200c0:	f8d30014 	swi	r6, r19, 20
200200c4:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200200c8:	f8130004 	swi	r0, r19, 4
200200cc:	b800005c 	bri	92		// 20020128
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200200d0:	e8730010 	lwi	r3, r19, 16
200200d4:	e8830000 	lwi	r4, r3, 0
200200d8:	e8730010 	lwi	r3, r19, 16
200200dc:	e8a3000c 	lwi	r5, r3, 12
200200e0:	e8730004 	lwi	r3, r19, 4
200200e4:	64630402 	bslli	r3, r3, 2
200200e8:	10651800 	addk	r3, r5, r3
200200ec:	e8a30000 	lwi	r5, r3, 0
200200f0:	e8730010 	lwi	r3, r19, 16
200200f4:	e8630010 	lwi	r3, r3, 16
200200f8:	e8630000 	lwi	r3, r3, 0
200200fc:	14632800 	rsubk	r3, r3, r5
20020100:	10641800 	addk	r3, r4, r3
20020104:	30830001 	addik	r4, r3, 1
20020108:	e8730018 	lwi	r3, r19, 24
2002010c:	16441803 	cmpu	r18, r4, r3
20020110:	bc52000c 	blti	r18, 12		// 2002011c
            return 0;
20020114:	10600000 	addk	r3, r0, r0
20020118:	b8000024 	bri	36		// 2002013c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002011c:	e8730004 	lwi	r3, r19, 4
20020120:	30630001 	addik	r3, r3, 1
20020124:	f8730004 	swi	r3, r19, 4
20020128:	e8930004 	lwi	r4, r19, 4
2002012c:	e8730014 	lwi	r3, r19, 20
20020130:	16432003 	cmpu	r18, r3, r4
20020134:	bc52ff9c 	blti	r18, -100		// 200200d0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20020138:	30600001 	addik	r3, r0, 1
}
2002013c:	10330000 	addk	r1, r19, r0
20020140:	ea610008 	lwi	r19, r1, 8
20020144:	3021000c 	addik	r1, r1, 12
20020148:	b60f0008 	rtsd	r15, 8
2002014c:	80000000 	or	r0, r0, r0

20020150 <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20020150:	3021ffec 	addik	r1, r1, -20
20020154:	fa610010 	swi	r19, r1, 16
20020158:	12610000 	addk	r19, r1, r0
2002015c:	f8b30018 	swi	r5, r19, 24
20020160:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20020164:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20020168:	f8130004 	swi	r0, r19, 4
2002016c:	b8000054 	bri	84		// 200201c0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20020170:	e8730018 	lwi	r3, r19, 24
20020174:	e8630010 	lwi	r3, r3, 16
20020178:	e8830000 	lwi	r4, r3, 0
2002017c:	e8730018 	lwi	r3, r19, 24
20020180:	e8a3000c 	lwi	r5, r3, 12
20020184:	e8730004 	lwi	r3, r19, 4
20020188:	64630402 	bslli	r3, r3, 2
2002018c:	10651800 	addk	r3, r5, r3
20020190:	e8630000 	lwi	r3, r3, 0
20020194:	14632000 	rsubk	r3, r3, r4
20020198:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002019c:	e8930008 	lwi	r4, r19, 8
200201a0:	e873000c 	lwi	r3, r19, 12
200201a4:	16441803 	cmpu	r18, r4, r3
200201a8:	bcb20008 	bgei	r18, 8		// 200201b0
200201ac:	10640000 	addk	r3, r4, r0
200201b0:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200201b4:	e8730004 	lwi	r3, r19, 4
200201b8:	30630001 	addik	r3, r3, 1
200201bc:	f8730004 	swi	r3, r19, 4
200201c0:	e8930004 	lwi	r4, r19, 4
200201c4:	e873001c 	lwi	r3, r19, 28
200201c8:	16432003 	cmpu	r18, r3, r4
200201cc:	bc52ffa4 	blti	r18, -92		// 20020170
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200201d0:	e8730018 	lwi	r3, r19, 24
200201d4:	e8830000 	lwi	r4, r3, 0
200201d8:	e8730008 	lwi	r3, r19, 8
200201dc:	14632000 	rsubk	r3, r3, r4
}
200201e0:	10330000 	addk	r1, r19, r0
200201e4:	ea610010 	lwi	r19, r1, 16
200201e8:	30210014 	addik	r1, r1, 20
200201ec:	b60f0008 	rtsd	r15, 8
200201f0:	80000000 	or	r0, r0, r0

200201f4 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200201f4:	3021fff4 	addik	r1, r1, -12
200201f8:	fa610008 	swi	r19, r1, 8
200201fc:	12610000 	addk	r19, r1, r0
20020200:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20020204:	e8730010 	lwi	r3, r19, 16
20020208:	e8630010 	lwi	r3, r3, 16
2002020c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20020210:	f8130004 	swi	r0, r19, 4
20020214:	b8000028 	bri	40		// 2002023c
        fifo->read_inds[i] = 0;
20020218:	e8730010 	lwi	r3, r19, 16
2002021c:	e883000c 	lwi	r4, r3, 12
20020220:	e8730004 	lwi	r3, r19, 4
20020224:	64630402 	bslli	r3, r3, 2
20020228:	10641800 	addk	r3, r4, r3
2002022c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20020230:	e8730004 	lwi	r3, r19, 4
20020234:	30630001 	addik	r3, r3, 1
20020238:	f8730004 	swi	r3, r19, 4
2002023c:	e8730010 	lwi	r3, r19, 16
20020240:	e8830008 	lwi	r4, r3, 8
20020244:	e8730004 	lwi	r3, r19, 4
20020248:	16441803 	cmpu	r18, r4, r3
2002024c:	bc52ffcc 	blti	r18, -52		// 20020218
        fifo->read_inds[i] = 0;
    }
}
20020250:	10330000 	addk	r1, r19, r0
20020254:	ea610008 	lwi	r19, r1, 8
20020258:	3021000c 	addik	r1, r1, 12
2002025c:	b60f0008 	rtsd	r15, 8
20020260:	80000000 	or	r0, r0, r0

20020264 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20020264:	3021fff0 	addik	r1, r1, -16
20020268:	fa61000c 	swi	r19, r1, 12
2002026c:	12610000 	addk	r19, r1, r0
20020270:	f8b30014 	swi	r5, r19, 20
20020274:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20020278:	e8730014 	lwi	r3, r19, 20
2002027c:	e8830004 	lwi	r4, r3, 4
20020280:	e8730014 	lwi	r3, r19, 20
20020284:	e8a3000c 	lwi	r5, r3, 12
20020288:	e8730018 	lwi	r3, r19, 24
2002028c:	64630402 	bslli	r3, r3, 2
20020290:	10651800 	addk	r3, r5, r3
20020294:	e8a30000 	lwi	r5, r3, 0
20020298:	e8730014 	lwi	r3, r19, 20
2002029c:	e8630000 	lwi	r3, r3, 0
200202a0:	3063ffff 	addik	r3, r3, -1
200202a4:	84651800 	and	r3, r5, r3
200202a8:	64630403 	bslli	r3, r3, 3
200202ac:	10641800 	addk	r3, r4, r3
200202b0:	e8830000 	lwi	r4, r3, 0
200202b4:	e8a30004 	lwi	r5, r3, 4
200202b8:	f8930004 	swi	r4, r19, 4
200202bc:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
200202c0:	e8730014 	lwi	r3, r19, 20
200202c4:	e883000c 	lwi	r4, r3, 12
200202c8:	e8730018 	lwi	r3, r19, 24
200202cc:	64630402 	bslli	r3, r3, 2
200202d0:	10641800 	addk	r3, r4, r3
200202d4:	e8830000 	lwi	r4, r3, 0
200202d8:	30840001 	addik	r4, r4, 1
200202dc:	f8830000 	swi	r4, r3, 0
    return value;
200202e0:	e8930004 	lwi	r4, r19, 4
200202e4:	e8b30008 	lwi	r5, r19, 8
}
200202e8:	10640000 	addk	r3, r4, r0
200202ec:	10850000 	addk	r4, r5, r0
200202f0:	10330000 	addk	r1, r19, r0
200202f4:	ea61000c 	lwi	r19, r1, 12
200202f8:	30210010 	addik	r1, r1, 16
200202fc:	b60f0008 	rtsd	r15, 8
20020300:	80000000 	or	r0, r0, r0

20020304 <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20020304:	3021fff8 	addik	r1, r1, -8
20020308:	fa610004 	swi	r19, r1, 4
2002030c:	12610000 	addk	r19, r1, r0
20020310:	f8b3000c 	swi	r5, r19, 12
20020314:	f8d30010 	swi	r6, r19, 16
20020318:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002031c:	e873000c 	lwi	r3, r19, 12
20020320:	e8830004 	lwi	r4, r3, 4
20020324:	e873000c 	lwi	r3, r19, 12
20020328:	e8630010 	lwi	r3, r3, 16
2002032c:	e8a30000 	lwi	r5, r3, 0
20020330:	e873000c 	lwi	r3, r19, 12
20020334:	e8630000 	lwi	r3, r3, 0
20020338:	3063ffff 	addik	r3, r3, -1
2002033c:	84651800 	and	r3, r5, r3
20020340:	64630403 	bslli	r3, r3, 3
20020344:	10641800 	addk	r3, r4, r3
20020348:	e8930010 	lwi	r4, r19, 16
2002034c:	e8b30014 	lwi	r5, r19, 20
20020350:	f8830000 	swi	r4, r3, 0
20020354:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20020358:	e873000c 	lwi	r3, r19, 12
2002035c:	e8630010 	lwi	r3, r3, 16
20020360:	e8830000 	lwi	r4, r3, 0
20020364:	30840001 	addik	r4, r4, 1
20020368:	f8830000 	swi	r4, r3, 0
}
2002036c:	10330000 	addk	r1, r19, r0
20020370:	ea610004 	lwi	r19, r1, 4
20020374:	30210008 	addik	r1, r1, 8
20020378:	b60f0008 	rtsd	r15, 8
2002037c:	80000000 	or	r0, r0, r0

20020380 <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20020380:	3021fff8 	addik	r1, r1, -8
20020384:	fa610004 	swi	r19, r1, 4
20020388:	12610000 	addk	r19, r1, r0
2002038c:	f8b3000c 	swi	r5, r19, 12
20020390:	f8d30010 	swi	r6, r19, 16
20020394:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20020398:	e873000c 	lwi	r3, r19, 12
2002039c:	e8630010 	lwi	r3, r3, 16
200203a0:	e8830000 	lwi	r4, r3, 0
200203a4:	e873000c 	lwi	r3, r19, 12
200203a8:	e8a3000c 	lwi	r5, r3, 12
200203ac:	e8730010 	lwi	r3, r19, 16
200203b0:	64630402 	bslli	r3, r3, 2
200203b4:	10651800 	addk	r3, r5, r3
200203b8:	e8630000 	lwi	r3, r3, 0
200203bc:	14a32000 	rsubk	r5, r3, r4
200203c0:	30600001 	addik	r3, r0, 1
200203c4:	e8930014 	lwi	r4, r19, 20
200203c8:	16442803 	cmpu	r18, r4, r5
200203cc:	bcb20008 	bgei	r18, 8		// 200203d4
200203d0:	10600000 	addk	r3, r0, r0
200203d4:	a46300ff 	andi	r3, r3, 255
}
200203d8:	10330000 	addk	r1, r19, r0
200203dc:	ea610004 	lwi	r19, r1, 4
200203e0:	30210008 	addik	r1, r1, 8
200203e4:	b60f0008 	rtsd	r15, 8
200203e8:	80000000 	or	r0, r0, r0

200203ec <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200203ec:	3021fff8 	addik	r1, r1, -8
200203f0:	fa610004 	swi	r19, r1, 4
200203f4:	12610000 	addk	r19, r1, r0
200203f8:	f8b3000c 	swi	r5, r19, 12
200203fc:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20020400:	e873000c 	lwi	r3, r19, 12
20020404:	e8630010 	lwi	r3, r3, 16
20020408:	e8830000 	lwi	r4, r3, 0
2002040c:	e873000c 	lwi	r3, r19, 12
20020410:	e8a3000c 	lwi	r5, r3, 12
20020414:	e8730010 	lwi	r3, r19, 16
20020418:	64630402 	bslli	r3, r3, 2
2002041c:	10651800 	addk	r3, r5, r3
20020420:	e8630000 	lwi	r3, r3, 0
20020424:	14632000 	rsubk	r3, r3, r4
}
20020428:	10330000 	addk	r1, r19, r0
2002042c:	ea610004 	lwi	r19, r1, 4
20020430:	30210008 	addik	r1, r1, 8
20020434:	b60f0008 	rtsd	r15, 8
20020438:	80000000 	or	r0, r0, r0

2002043c <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002043c:	3021fff4 	addik	r1, r1, -12
20020440:	fa610008 	swi	r19, r1, 8
20020444:	12610000 	addk	r19, r1, r0
20020448:	f8b30010 	swi	r5, r19, 16
2002044c:	f8d30014 	swi	r6, r19, 20
20020450:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20020454:	f8130004 	swi	r0, r19, 4
20020458:	b800005c 	bri	92		// 200204b4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002045c:	e8730010 	lwi	r3, r19, 16
20020460:	e8830000 	lwi	r4, r3, 0
20020464:	e8730010 	lwi	r3, r19, 16
20020468:	e8a3000c 	lwi	r5, r3, 12
2002046c:	e8730004 	lwi	r3, r19, 4
20020470:	64630402 	bslli	r3, r3, 2
20020474:	10651800 	addk	r3, r5, r3
20020478:	e8a30000 	lwi	r5, r3, 0
2002047c:	e8730010 	lwi	r3, r19, 16
20020480:	e8630010 	lwi	r3, r3, 16
20020484:	e8630000 	lwi	r3, r3, 0
20020488:	14632800 	rsubk	r3, r3, r5
2002048c:	10641800 	addk	r3, r4, r3
20020490:	30830001 	addik	r4, r3, 1
20020494:	e8730018 	lwi	r3, r19, 24
20020498:	16441803 	cmpu	r18, r4, r3
2002049c:	bc52000c 	blti	r18, 12		// 200204a8
            return 0;
200204a0:	10600000 	addk	r3, r0, r0
200204a4:	b8000024 	bri	36		// 200204c8
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200204a8:	e8730004 	lwi	r3, r19, 4
200204ac:	30630001 	addik	r3, r3, 1
200204b0:	f8730004 	swi	r3, r19, 4
200204b4:	e8930004 	lwi	r4, r19, 4
200204b8:	e8730014 	lwi	r3, r19, 20
200204bc:	16432003 	cmpu	r18, r3, r4
200204c0:	bc52ff9c 	blti	r18, -100		// 2002045c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200204c4:	30600001 	addik	r3, r0, 1
}
200204c8:	10330000 	addk	r1, r19, r0
200204cc:	ea610008 	lwi	r19, r1, 8
200204d0:	3021000c 	addik	r1, r1, 12
200204d4:	b60f0008 	rtsd	r15, 8
200204d8:	80000000 	or	r0, r0, r0

200204dc <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200204dc:	3021ffec 	addik	r1, r1, -20
200204e0:	fa610010 	swi	r19, r1, 16
200204e4:	12610000 	addk	r19, r1, r0
200204e8:	f8b30018 	swi	r5, r19, 24
200204ec:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200204f0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200204f4:	f8130004 	swi	r0, r19, 4
200204f8:	b8000054 	bri	84		// 2002054c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200204fc:	e8730018 	lwi	r3, r19, 24
20020500:	e8630010 	lwi	r3, r3, 16
20020504:	e8830000 	lwi	r4, r3, 0
20020508:	e8730018 	lwi	r3, r19, 24
2002050c:	e8a3000c 	lwi	r5, r3, 12
20020510:	e8730004 	lwi	r3, r19, 4
20020514:	64630402 	bslli	r3, r3, 2
20020518:	10651800 	addk	r3, r5, r3
2002051c:	e8630000 	lwi	r3, r3, 0
20020520:	14632000 	rsubk	r3, r3, r4
20020524:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20020528:	e8930008 	lwi	r4, r19, 8
2002052c:	e873000c 	lwi	r3, r19, 12
20020530:	16441803 	cmpu	r18, r4, r3
20020534:	bcb20008 	bgei	r18, 8		// 2002053c
20020538:	10640000 	addk	r3, r4, r0
2002053c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20020540:	e8730004 	lwi	r3, r19, 4
20020544:	30630001 	addik	r3, r3, 1
20020548:	f8730004 	swi	r3, r19, 4
2002054c:	e8930004 	lwi	r4, r19, 4
20020550:	e873001c 	lwi	r3, r19, 28
20020554:	16432003 	cmpu	r18, r3, r4
20020558:	bc52ffa4 	blti	r18, -92		// 200204fc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002055c:	e8730018 	lwi	r3, r19, 24
20020560:	e8830000 	lwi	r4, r3, 0
20020564:	e8730008 	lwi	r3, r19, 8
20020568:	14632000 	rsubk	r3, r3, r4
}
2002056c:	10330000 	addk	r1, r19, r0
20020570:	ea610010 	lwi	r19, r1, 16
20020574:	30210014 	addik	r1, r1, 20
20020578:	b60f0008 	rtsd	r15, 8
2002057c:	80000000 	or	r0, r0, r0

20020580 <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20020580:	3021fff4 	addik	r1, r1, -12
20020584:	fa610008 	swi	r19, r1, 8
20020588:	12610000 	addk	r19, r1, r0
2002058c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20020590:	e8730010 	lwi	r3, r19, 16
20020594:	e8630010 	lwi	r3, r3, 16
20020598:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002059c:	f8130004 	swi	r0, r19, 4
200205a0:	b8000028 	bri	40		// 200205c8
        fifo->read_inds[i] = 0;
200205a4:	e8730010 	lwi	r3, r19, 16
200205a8:	e883000c 	lwi	r4, r3, 12
200205ac:	e8730004 	lwi	r3, r19, 4
200205b0:	64630402 	bslli	r3, r3, 2
200205b4:	10641800 	addk	r3, r4, r3
200205b8:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200205bc:	e8730004 	lwi	r3, r19, 4
200205c0:	30630001 	addik	r3, r3, 1
200205c4:	f8730004 	swi	r3, r19, 4
200205c8:	e8730010 	lwi	r3, r19, 16
200205cc:	e8830008 	lwi	r4, r3, 8
200205d0:	e8730004 	lwi	r3, r19, 4
200205d4:	16441803 	cmpu	r18, r4, r3
200205d8:	bc52ffcc 	blti	r18, -52		// 200205a4
        fifo->read_inds[i] = 0;
    }
}
200205dc:	10330000 	addk	r1, r19, r0
200205e0:	ea610008 	lwi	r19, r1, 8
200205e4:	3021000c 	addik	r1, r1, 12
200205e8:	b60f0008 	rtsd	r15, 8
200205ec:	80000000 	or	r0, r0, r0

200205f0 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200205f0:	3021fff4 	addik	r1, r1, -12
200205f4:	fa610008 	swi	r19, r1, 8
200205f8:	12610000 	addk	r19, r1, r0
200205fc:	f8b30010 	swi	r5, r19, 16
20020600:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20020604:	e8730010 	lwi	r3, r19, 16
20020608:	e8830004 	lwi	r4, r3, 4
2002060c:	e8730010 	lwi	r3, r19, 16
20020610:	e8a3000c 	lwi	r5, r3, 12
20020614:	e8730014 	lwi	r3, r19, 20
20020618:	64630402 	bslli	r3, r3, 2
2002061c:	10651800 	addk	r3, r5, r3
20020620:	e8a30000 	lwi	r5, r3, 0
20020624:	e8730010 	lwi	r3, r19, 16
20020628:	e8630000 	lwi	r3, r3, 0
2002062c:	3063ffff 	addik	r3, r3, -1
20020630:	84651800 	and	r3, r5, r3
20020634:	10641800 	addk	r3, r4, r3
20020638:	e0630000 	lbui	r3, r3, 0
2002063c:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20020640:	e8730010 	lwi	r3, r19, 16
20020644:	e883000c 	lwi	r4, r3, 12
20020648:	e8730014 	lwi	r3, r19, 20
2002064c:	64630402 	bslli	r3, r3, 2
20020650:	10641800 	addk	r3, r4, r3
20020654:	e8830000 	lwi	r4, r3, 0
20020658:	30840001 	addik	r4, r4, 1
2002065c:	f8830000 	swi	r4, r3, 0
    return value;
20020660:	e0730004 	lbui	r3, r19, 4
}
20020664:	10330000 	addk	r1, r19, r0
20020668:	ea610008 	lwi	r19, r1, 8
2002066c:	3021000c 	addik	r1, r1, 12
20020670:	b60f0008 	rtsd	r15, 8
20020674:	80000000 	or	r0, r0, r0

20020678 <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20020678:	3021fff8 	addik	r1, r1, -8
2002067c:	fa610004 	swi	r19, r1, 4
20020680:	12610000 	addk	r19, r1, r0
20020684:	f8b3000c 	swi	r5, r19, 12
20020688:	10660000 	addk	r3, r6, r0
2002068c:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20020690:	e873000c 	lwi	r3, r19, 12
20020694:	e8830004 	lwi	r4, r3, 4
20020698:	e873000c 	lwi	r3, r19, 12
2002069c:	e8630010 	lwi	r3, r3, 16
200206a0:	e8a30000 	lwi	r5, r3, 0
200206a4:	e873000c 	lwi	r3, r19, 12
200206a8:	e8630000 	lwi	r3, r3, 0
200206ac:	3063ffff 	addik	r3, r3, -1
200206b0:	84651800 	and	r3, r5, r3
200206b4:	10641800 	addk	r3, r4, r3
200206b8:	e0930010 	lbui	r4, r19, 16
200206bc:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
200206c0:	e873000c 	lwi	r3, r19, 12
200206c4:	e8630010 	lwi	r3, r3, 16
200206c8:	e8830000 	lwi	r4, r3, 0
200206cc:	30840001 	addik	r4, r4, 1
200206d0:	f8830000 	swi	r4, r3, 0
}
200206d4:	10330000 	addk	r1, r19, r0
200206d8:	ea610004 	lwi	r19, r1, 4
200206dc:	30210008 	addik	r1, r1, 8
200206e0:	b60f0008 	rtsd	r15, 8
200206e4:	80000000 	or	r0, r0, r0

200206e8 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200206e8:	3021fff8 	addik	r1, r1, -8
200206ec:	fa610004 	swi	r19, r1, 4
200206f0:	12610000 	addk	r19, r1, r0
200206f4:	f8b3000c 	swi	r5, r19, 12
200206f8:	f8d30010 	swi	r6, r19, 16
200206fc:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20020700:	e873000c 	lwi	r3, r19, 12
20020704:	e8630010 	lwi	r3, r3, 16
20020708:	e8830000 	lwi	r4, r3, 0
2002070c:	e873000c 	lwi	r3, r19, 12
20020710:	e8a3000c 	lwi	r5, r3, 12
20020714:	e8730010 	lwi	r3, r19, 16
20020718:	64630402 	bslli	r3, r3, 2
2002071c:	10651800 	addk	r3, r5, r3
20020720:	e8630000 	lwi	r3, r3, 0
20020724:	14a32000 	rsubk	r5, r3, r4
20020728:	30600001 	addik	r3, r0, 1
2002072c:	e8930014 	lwi	r4, r19, 20
20020730:	16442803 	cmpu	r18, r4, r5
20020734:	bcb20008 	bgei	r18, 8		// 2002073c
20020738:	10600000 	addk	r3, r0, r0
2002073c:	a46300ff 	andi	r3, r3, 255
}
20020740:	10330000 	addk	r1, r19, r0
20020744:	ea610004 	lwi	r19, r1, 4
20020748:	30210008 	addik	r1, r1, 8
2002074c:	b60f0008 	rtsd	r15, 8
20020750:	80000000 	or	r0, r0, r0

20020754 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20020754:	3021fff8 	addik	r1, r1, -8
20020758:	fa610004 	swi	r19, r1, 4
2002075c:	12610000 	addk	r19, r1, r0
20020760:	f8b3000c 	swi	r5, r19, 12
20020764:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20020768:	e873000c 	lwi	r3, r19, 12
2002076c:	e8630010 	lwi	r3, r3, 16
20020770:	e8830000 	lwi	r4, r3, 0
20020774:	e873000c 	lwi	r3, r19, 12
20020778:	e8a3000c 	lwi	r5, r3, 12
2002077c:	e8730010 	lwi	r3, r19, 16
20020780:	64630402 	bslli	r3, r3, 2
20020784:	10651800 	addk	r3, r5, r3
20020788:	e8630000 	lwi	r3, r3, 0
2002078c:	14632000 	rsubk	r3, r3, r4
}
20020790:	10330000 	addk	r1, r19, r0
20020794:	ea610004 	lwi	r19, r1, 4
20020798:	30210008 	addik	r1, r1, 8
2002079c:	b60f0008 	rtsd	r15, 8
200207a0:	80000000 	or	r0, r0, r0

200207a4 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200207a4:	3021fff4 	addik	r1, r1, -12
200207a8:	fa610008 	swi	r19, r1, 8
200207ac:	12610000 	addk	r19, r1, r0
200207b0:	f8b30010 	swi	r5, r19, 16
200207b4:	f8d30014 	swi	r6, r19, 20
200207b8:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200207bc:	f8130004 	swi	r0, r19, 4
200207c0:	b800005c 	bri	92		// 2002081c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200207c4:	e8730010 	lwi	r3, r19, 16
200207c8:	e8830000 	lwi	r4, r3, 0
200207cc:	e8730010 	lwi	r3, r19, 16
200207d0:	e8a3000c 	lwi	r5, r3, 12
200207d4:	e8730004 	lwi	r3, r19, 4
200207d8:	64630402 	bslli	r3, r3, 2
200207dc:	10651800 	addk	r3, r5, r3
200207e0:	e8a30000 	lwi	r5, r3, 0
200207e4:	e8730010 	lwi	r3, r19, 16
200207e8:	e8630010 	lwi	r3, r3, 16
200207ec:	e8630000 	lwi	r3, r3, 0
200207f0:	14632800 	rsubk	r3, r3, r5
200207f4:	10641800 	addk	r3, r4, r3
200207f8:	30830001 	addik	r4, r3, 1
200207fc:	e8730018 	lwi	r3, r19, 24
20020800:	16441803 	cmpu	r18, r4, r3
20020804:	bc52000c 	blti	r18, 12		// 20020810
            return 0;
20020808:	10600000 	addk	r3, r0, r0
2002080c:	b8000024 	bri	36		// 20020830
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20020810:	e8730004 	lwi	r3, r19, 4
20020814:	30630001 	addik	r3, r3, 1
20020818:	f8730004 	swi	r3, r19, 4
2002081c:	e8930004 	lwi	r4, r19, 4
20020820:	e8730014 	lwi	r3, r19, 20
20020824:	16432003 	cmpu	r18, r3, r4
20020828:	bc52ff9c 	blti	r18, -100		// 200207c4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002082c:	30600001 	addik	r3, r0, 1
}
20020830:	10330000 	addk	r1, r19, r0
20020834:	ea610008 	lwi	r19, r1, 8
20020838:	3021000c 	addik	r1, r1, 12
2002083c:	b60f0008 	rtsd	r15, 8
20020840:	80000000 	or	r0, r0, r0

20020844 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20020844:	3021ffec 	addik	r1, r1, -20
20020848:	fa610010 	swi	r19, r1, 16
2002084c:	12610000 	addk	r19, r1, r0
20020850:	f8b30018 	swi	r5, r19, 24
20020854:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20020858:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002085c:	f8130004 	swi	r0, r19, 4
20020860:	b8000054 	bri	84		// 200208b4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20020864:	e8730018 	lwi	r3, r19, 24
20020868:	e8630010 	lwi	r3, r3, 16
2002086c:	e8830000 	lwi	r4, r3, 0
20020870:	e8730018 	lwi	r3, r19, 24
20020874:	e8a3000c 	lwi	r5, r3, 12
20020878:	e8730004 	lwi	r3, r19, 4
2002087c:	64630402 	bslli	r3, r3, 2
20020880:	10651800 	addk	r3, r5, r3
20020884:	e8630000 	lwi	r3, r3, 0
20020888:	14632000 	rsubk	r3, r3, r4
2002088c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20020890:	e8930008 	lwi	r4, r19, 8
20020894:	e873000c 	lwi	r3, r19, 12
20020898:	16441803 	cmpu	r18, r4, r3
2002089c:	bcb20008 	bgei	r18, 8		// 200208a4
200208a0:	10640000 	addk	r3, r4, r0
200208a4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200208a8:	e8730004 	lwi	r3, r19, 4
200208ac:	30630001 	addik	r3, r3, 1
200208b0:	f8730004 	swi	r3, r19, 4
200208b4:	e8930004 	lwi	r4, r19, 4
200208b8:	e873001c 	lwi	r3, r19, 28
200208bc:	16432003 	cmpu	r18, r3, r4
200208c0:	bc52ffa4 	blti	r18, -92		// 20020864
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200208c4:	e8730018 	lwi	r3, r19, 24
200208c8:	e8830000 	lwi	r4, r3, 0
200208cc:	e8730008 	lwi	r3, r19, 8
200208d0:	14632000 	rsubk	r3, r3, r4
}
200208d4:	10330000 	addk	r1, r19, r0
200208d8:	ea610010 	lwi	r19, r1, 16
200208dc:	30210014 	addik	r1, r1, 20
200208e0:	b60f0008 	rtsd	r15, 8
200208e4:	80000000 	or	r0, r0, r0

200208e8 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200208e8:	3021fff4 	addik	r1, r1, -12
200208ec:	fa610008 	swi	r19, r1, 8
200208f0:	12610000 	addk	r19, r1, r0
200208f4:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
200208f8:	e8730010 	lwi	r3, r19, 16
200208fc:	e8630010 	lwi	r3, r3, 16
20020900:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20020904:	f8130004 	swi	r0, r19, 4
20020908:	b8000028 	bri	40		// 20020930
        fifo->read_inds[i] = 0;
2002090c:	e8730010 	lwi	r3, r19, 16
20020910:	e883000c 	lwi	r4, r3, 12
20020914:	e8730004 	lwi	r3, r19, 4
20020918:	64630402 	bslli	r3, r3, 2
2002091c:	10641800 	addk	r3, r4, r3
20020920:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20020924:	e8730004 	lwi	r3, r19, 4
20020928:	30630001 	addik	r3, r3, 1
2002092c:	f8730004 	swi	r3, r19, 4
20020930:	e8730010 	lwi	r3, r19, 16
20020934:	e8830008 	lwi	r4, r3, 8
20020938:	e8730004 	lwi	r3, r19, 4
2002093c:	16441803 	cmpu	r18, r4, r3
20020940:	bc52ffcc 	blti	r18, -52		// 2002090c
        fifo->read_inds[i] = 0;
    }
}
20020944:	10330000 	addk	r1, r19, r0
20020948:	ea610008 	lwi	r19, r1, 8
2002094c:	3021000c 	addik	r1, r1, 12
20020950:	b60f0008 	rtsd	r15, 8
20020954:	80000000 	or	r0, r0, r0

20020958 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20020958:	3021fff4 	addik	r1, r1, -12
2002095c:	fa610008 	swi	r19, r1, 8
20020960:	12610000 	addk	r19, r1, r0
20020964:	f8b30010 	swi	r5, r19, 16
20020968:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2002096c:	e8730010 	lwi	r3, r19, 16
20020970:	e8830004 	lwi	r4, r3, 4
20020974:	e8730010 	lwi	r3, r19, 16
20020978:	e8a3000c 	lwi	r5, r3, 12
2002097c:	e8730014 	lwi	r3, r19, 20
20020980:	64630402 	bslli	r3, r3, 2
20020984:	10651800 	addk	r3, r5, r3
20020988:	e8a30000 	lwi	r5, r3, 0
2002098c:	e8730010 	lwi	r3, r19, 16
20020990:	e8630000 	lwi	r3, r3, 0
20020994:	3063ffff 	addik	r3, r3, -1
20020998:	84651800 	and	r3, r5, r3
2002099c:	10631800 	addk	r3, r3, r3
200209a0:	10641800 	addk	r3, r4, r3
200209a4:	e4630000 	lhui	r3, r3, 0
200209a8:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200209ac:	e8730010 	lwi	r3, r19, 16
200209b0:	e883000c 	lwi	r4, r3, 12
200209b4:	e8730014 	lwi	r3, r19, 20
200209b8:	64630402 	bslli	r3, r3, 2
200209bc:	10641800 	addk	r3, r4, r3
200209c0:	e8830000 	lwi	r4, r3, 0
200209c4:	30840001 	addik	r4, r4, 1
200209c8:	f8830000 	swi	r4, r3, 0
    return value;
200209cc:	e4730004 	lhui	r3, r19, 4
}
200209d0:	10330000 	addk	r1, r19, r0
200209d4:	ea610008 	lwi	r19, r1, 8
200209d8:	3021000c 	addik	r1, r1, 12
200209dc:	b60f0008 	rtsd	r15, 8
200209e0:	80000000 	or	r0, r0, r0

200209e4 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200209e4:	3021fff8 	addik	r1, r1, -8
200209e8:	fa610004 	swi	r19, r1, 4
200209ec:	12610000 	addk	r19, r1, r0
200209f0:	f8b3000c 	swi	r5, r19, 12
200209f4:	10660000 	addk	r3, r6, r0
200209f8:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200209fc:	e873000c 	lwi	r3, r19, 12
20020a00:	e8830004 	lwi	r4, r3, 4
20020a04:	e873000c 	lwi	r3, r19, 12
20020a08:	e8630010 	lwi	r3, r3, 16
20020a0c:	e8a30000 	lwi	r5, r3, 0
20020a10:	e873000c 	lwi	r3, r19, 12
20020a14:	e8630000 	lwi	r3, r3, 0
20020a18:	3063ffff 	addik	r3, r3, -1
20020a1c:	84651800 	and	r3, r5, r3
20020a20:	10631800 	addk	r3, r3, r3
20020a24:	10641800 	addk	r3, r4, r3
20020a28:	e4930010 	lhui	r4, r19, 16
20020a2c:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20020a30:	e873000c 	lwi	r3, r19, 12
20020a34:	e8630010 	lwi	r3, r3, 16
20020a38:	e8830000 	lwi	r4, r3, 0
20020a3c:	30840001 	addik	r4, r4, 1
20020a40:	f8830000 	swi	r4, r3, 0
}
20020a44:	10330000 	addk	r1, r19, r0
20020a48:	ea610004 	lwi	r19, r1, 4
20020a4c:	30210008 	addik	r1, r1, 8
20020a50:	b60f0008 	rtsd	r15, 8
20020a54:	80000000 	or	r0, r0, r0

20020a58 <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20020a58:	3021fff8 	addik	r1, r1, -8
20020a5c:	fa610004 	swi	r19, r1, 4
20020a60:	12610000 	addk	r19, r1, r0
20020a64:	f8b3000c 	swi	r5, r19, 12
20020a68:	f8d30010 	swi	r6, r19, 16
20020a6c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20020a70:	e873000c 	lwi	r3, r19, 12
20020a74:	e8630010 	lwi	r3, r3, 16
20020a78:	e8830000 	lwi	r4, r3, 0
20020a7c:	e873000c 	lwi	r3, r19, 12
20020a80:	e8a3000c 	lwi	r5, r3, 12
20020a84:	e8730010 	lwi	r3, r19, 16
20020a88:	64630402 	bslli	r3, r3, 2
20020a8c:	10651800 	addk	r3, r5, r3
20020a90:	e8630000 	lwi	r3, r3, 0
20020a94:	14a32000 	rsubk	r5, r3, r4
20020a98:	30600001 	addik	r3, r0, 1
20020a9c:	e8930014 	lwi	r4, r19, 20
20020aa0:	16442803 	cmpu	r18, r4, r5
20020aa4:	bcb20008 	bgei	r18, 8		// 20020aac
20020aa8:	10600000 	addk	r3, r0, r0
20020aac:	a46300ff 	andi	r3, r3, 255
}
20020ab0:	10330000 	addk	r1, r19, r0
20020ab4:	ea610004 	lwi	r19, r1, 4
20020ab8:	30210008 	addik	r1, r1, 8
20020abc:	b60f0008 	rtsd	r15, 8
20020ac0:	80000000 	or	r0, r0, r0

20020ac4 <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20020ac4:	3021fff8 	addik	r1, r1, -8
20020ac8:	fa610004 	swi	r19, r1, 4
20020acc:	12610000 	addk	r19, r1, r0
20020ad0:	f8b3000c 	swi	r5, r19, 12
20020ad4:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20020ad8:	e873000c 	lwi	r3, r19, 12
20020adc:	e8630010 	lwi	r3, r3, 16
20020ae0:	e8830000 	lwi	r4, r3, 0
20020ae4:	e873000c 	lwi	r3, r19, 12
20020ae8:	e8a3000c 	lwi	r5, r3, 12
20020aec:	e8730010 	lwi	r3, r19, 16
20020af0:	64630402 	bslli	r3, r3, 2
20020af4:	10651800 	addk	r3, r5, r3
20020af8:	e8630000 	lwi	r3, r3, 0
20020afc:	14632000 	rsubk	r3, r3, r4
}
20020b00:	10330000 	addk	r1, r19, r0
20020b04:	ea610004 	lwi	r19, r1, 4
20020b08:	30210008 	addik	r1, r1, 8
20020b0c:	b60f0008 	rtsd	r15, 8
20020b10:	80000000 	or	r0, r0, r0

20020b14 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20020b14:	3021fff4 	addik	r1, r1, -12
20020b18:	fa610008 	swi	r19, r1, 8
20020b1c:	12610000 	addk	r19, r1, r0
20020b20:	f8b30010 	swi	r5, r19, 16
20020b24:	f8d30014 	swi	r6, r19, 20
20020b28:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20020b2c:	f8130004 	swi	r0, r19, 4
20020b30:	b800005c 	bri	92		// 20020b8c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20020b34:	e8730010 	lwi	r3, r19, 16
20020b38:	e8830000 	lwi	r4, r3, 0
20020b3c:	e8730010 	lwi	r3, r19, 16
20020b40:	e8a3000c 	lwi	r5, r3, 12
20020b44:	e8730004 	lwi	r3, r19, 4
20020b48:	64630402 	bslli	r3, r3, 2
20020b4c:	10651800 	addk	r3, r5, r3
20020b50:	e8a30000 	lwi	r5, r3, 0
20020b54:	e8730010 	lwi	r3, r19, 16
20020b58:	e8630010 	lwi	r3, r3, 16
20020b5c:	e8630000 	lwi	r3, r3, 0
20020b60:	14632800 	rsubk	r3, r3, r5
20020b64:	10641800 	addk	r3, r4, r3
20020b68:	30830001 	addik	r4, r3, 1
20020b6c:	e8730018 	lwi	r3, r19, 24
20020b70:	16441803 	cmpu	r18, r4, r3
20020b74:	bc52000c 	blti	r18, 12		// 20020b80
            return 0;
20020b78:	10600000 	addk	r3, r0, r0
20020b7c:	b8000024 	bri	36		// 20020ba0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20020b80:	e8730004 	lwi	r3, r19, 4
20020b84:	30630001 	addik	r3, r3, 1
20020b88:	f8730004 	swi	r3, r19, 4
20020b8c:	e8930004 	lwi	r4, r19, 4
20020b90:	e8730014 	lwi	r3, r19, 20
20020b94:	16432003 	cmpu	r18, r3, r4
20020b98:	bc52ff9c 	blti	r18, -100		// 20020b34
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20020b9c:	30600001 	addik	r3, r0, 1
}
20020ba0:	10330000 	addk	r1, r19, r0
20020ba4:	ea610008 	lwi	r19, r1, 8
20020ba8:	3021000c 	addik	r1, r1, 12
20020bac:	b60f0008 	rtsd	r15, 8
20020bb0:	80000000 	or	r0, r0, r0

20020bb4 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20020bb4:	3021ffec 	addik	r1, r1, -20
20020bb8:	fa610010 	swi	r19, r1, 16
20020bbc:	12610000 	addk	r19, r1, r0
20020bc0:	f8b30018 	swi	r5, r19, 24
20020bc4:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20020bc8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20020bcc:	f8130004 	swi	r0, r19, 4
20020bd0:	b8000054 	bri	84		// 20020c24
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20020bd4:	e8730018 	lwi	r3, r19, 24
20020bd8:	e8630010 	lwi	r3, r3, 16
20020bdc:	e8830000 	lwi	r4, r3, 0
20020be0:	e8730018 	lwi	r3, r19, 24
20020be4:	e8a3000c 	lwi	r5, r3, 12
20020be8:	e8730004 	lwi	r3, r19, 4
20020bec:	64630402 	bslli	r3, r3, 2
20020bf0:	10651800 	addk	r3, r5, r3
20020bf4:	e8630000 	lwi	r3, r3, 0
20020bf8:	14632000 	rsubk	r3, r3, r4
20020bfc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20020c00:	e8930008 	lwi	r4, r19, 8
20020c04:	e873000c 	lwi	r3, r19, 12
20020c08:	16441803 	cmpu	r18, r4, r3
20020c0c:	bcb20008 	bgei	r18, 8		// 20020c14
20020c10:	10640000 	addk	r3, r4, r0
20020c14:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20020c18:	e8730004 	lwi	r3, r19, 4
20020c1c:	30630001 	addik	r3, r3, 1
20020c20:	f8730004 	swi	r3, r19, 4
20020c24:	e8930004 	lwi	r4, r19, 4
20020c28:	e873001c 	lwi	r3, r19, 28
20020c2c:	16432003 	cmpu	r18, r3, r4
20020c30:	bc52ffa4 	blti	r18, -92		// 20020bd4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20020c34:	e8730018 	lwi	r3, r19, 24
20020c38:	e8830000 	lwi	r4, r3, 0
20020c3c:	e8730008 	lwi	r3, r19, 8
20020c40:	14632000 	rsubk	r3, r3, r4
}
20020c44:	10330000 	addk	r1, r19, r0
20020c48:	ea610010 	lwi	r19, r1, 16
20020c4c:	30210014 	addik	r1, r1, 20
20020c50:	b60f0008 	rtsd	r15, 8
20020c54:	80000000 	or	r0, r0, r0

20020c58 <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20020c58:	3021fff4 	addik	r1, r1, -12
20020c5c:	fa610008 	swi	r19, r1, 8
20020c60:	12610000 	addk	r19, r1, r0
20020c64:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20020c68:	e8730010 	lwi	r3, r19, 16
20020c6c:	e8630010 	lwi	r3, r3, 16
20020c70:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20020c74:	f8130004 	swi	r0, r19, 4
20020c78:	b8000028 	bri	40		// 20020ca0
        fifo->read_inds[i] = 0;
20020c7c:	e8730010 	lwi	r3, r19, 16
20020c80:	e883000c 	lwi	r4, r3, 12
20020c84:	e8730004 	lwi	r3, r19, 4
20020c88:	64630402 	bslli	r3, r3, 2
20020c8c:	10641800 	addk	r3, r4, r3
20020c90:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20020c94:	e8730004 	lwi	r3, r19, 4
20020c98:	30630001 	addik	r3, r3, 1
20020c9c:	f8730004 	swi	r3, r19, 4
20020ca0:	e8730010 	lwi	r3, r19, 16
20020ca4:	e8830008 	lwi	r4, r3, 8
20020ca8:	e8730004 	lwi	r3, r19, 4
20020cac:	16441803 	cmpu	r18, r4, r3
20020cb0:	bc52ffcc 	blti	r18, -52		// 20020c7c
        fifo->read_inds[i] = 0;
    }
}
20020cb4:	10330000 	addk	r1, r19, r0
20020cb8:	ea610008 	lwi	r19, r1, 8
20020cbc:	3021000c 	addik	r1, r1, 12
20020cc0:	b60f0008 	rtsd	r15, 8
20020cc4:	80000000 	or	r0, r0, r0

20020cc8 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20020cc8:	3021fff4 	addik	r1, r1, -12
20020ccc:	fa610008 	swi	r19, r1, 8
20020cd0:	12610000 	addk	r19, r1, r0
20020cd4:	f8b30010 	swi	r5, r19, 16
20020cd8:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20020cdc:	e8730010 	lwi	r3, r19, 16
20020ce0:	e8830004 	lwi	r4, r3, 4
20020ce4:	e8730010 	lwi	r3, r19, 16
20020ce8:	e8a3000c 	lwi	r5, r3, 12
20020cec:	e8730014 	lwi	r3, r19, 20
20020cf0:	64630402 	bslli	r3, r3, 2
20020cf4:	10651800 	addk	r3, r5, r3
20020cf8:	e8a30000 	lwi	r5, r3, 0
20020cfc:	e8730010 	lwi	r3, r19, 16
20020d00:	e8630000 	lwi	r3, r3, 0
20020d04:	3063ffff 	addik	r3, r3, -1
20020d08:	84651800 	and	r3, r5, r3
20020d0c:	64630402 	bslli	r3, r3, 2
20020d10:	10641800 	addk	r3, r4, r3
20020d14:	e8630000 	lwi	r3, r3, 0
20020d18:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20020d1c:	e8730010 	lwi	r3, r19, 16
20020d20:	e883000c 	lwi	r4, r3, 12
20020d24:	e8730014 	lwi	r3, r19, 20
20020d28:	64630402 	bslli	r3, r3, 2
20020d2c:	10641800 	addk	r3, r4, r3
20020d30:	e8830000 	lwi	r4, r3, 0
20020d34:	30840001 	addik	r4, r4, 1
20020d38:	f8830000 	swi	r4, r3, 0
    return value;
20020d3c:	e8730004 	lwi	r3, r19, 4
}
20020d40:	10330000 	addk	r1, r19, r0
20020d44:	ea610008 	lwi	r19, r1, 8
20020d48:	3021000c 	addik	r1, r1, 12
20020d4c:	b60f0008 	rtsd	r15, 8
20020d50:	80000000 	or	r0, r0, r0

20020d54 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20020d54:	3021fff8 	addik	r1, r1, -8
20020d58:	fa610004 	swi	r19, r1, 4
20020d5c:	12610000 	addk	r19, r1, r0
20020d60:	f8b3000c 	swi	r5, r19, 12
20020d64:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20020d68:	e873000c 	lwi	r3, r19, 12
20020d6c:	e8830004 	lwi	r4, r3, 4
20020d70:	e873000c 	lwi	r3, r19, 12
20020d74:	e8630010 	lwi	r3, r3, 16
20020d78:	e8a30000 	lwi	r5, r3, 0
20020d7c:	e873000c 	lwi	r3, r19, 12
20020d80:	e8630000 	lwi	r3, r3, 0
20020d84:	3063ffff 	addik	r3, r3, -1
20020d88:	84651800 	and	r3, r5, r3
20020d8c:	64630402 	bslli	r3, r3, 2
20020d90:	10641800 	addk	r3, r4, r3
20020d94:	e8930010 	lwi	r4, r19, 16
20020d98:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20020d9c:	e873000c 	lwi	r3, r19, 12
20020da0:	e8630010 	lwi	r3, r3, 16
20020da4:	e8830000 	lwi	r4, r3, 0
20020da8:	30840001 	addik	r4, r4, 1
20020dac:	f8830000 	swi	r4, r3, 0
}
20020db0:	10330000 	addk	r1, r19, r0
20020db4:	ea610004 	lwi	r19, r1, 4
20020db8:	30210008 	addik	r1, r1, 8
20020dbc:	b60f0008 	rtsd	r15, 8
20020dc0:	80000000 	or	r0, r0, r0

20020dc4 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20020dc4:	3021fff8 	addik	r1, r1, -8
20020dc8:	fa610004 	swi	r19, r1, 4
20020dcc:	12610000 	addk	r19, r1, r0
20020dd0:	f8b3000c 	swi	r5, r19, 12
20020dd4:	f8d30010 	swi	r6, r19, 16
20020dd8:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20020ddc:	e873000c 	lwi	r3, r19, 12
20020de0:	e8630010 	lwi	r3, r3, 16
20020de4:	e8830000 	lwi	r4, r3, 0
20020de8:	e873000c 	lwi	r3, r19, 12
20020dec:	e8a3000c 	lwi	r5, r3, 12
20020df0:	e8730010 	lwi	r3, r19, 16
20020df4:	64630402 	bslli	r3, r3, 2
20020df8:	10651800 	addk	r3, r5, r3
20020dfc:	e8630000 	lwi	r3, r3, 0
20020e00:	14a32000 	rsubk	r5, r3, r4
20020e04:	30600001 	addik	r3, r0, 1
20020e08:	e8930014 	lwi	r4, r19, 20
20020e0c:	16442803 	cmpu	r18, r4, r5
20020e10:	bcb20008 	bgei	r18, 8		// 20020e18
20020e14:	10600000 	addk	r3, r0, r0
20020e18:	a46300ff 	andi	r3, r3, 255
}
20020e1c:	10330000 	addk	r1, r19, r0
20020e20:	ea610004 	lwi	r19, r1, 4
20020e24:	30210008 	addik	r1, r1, 8
20020e28:	b60f0008 	rtsd	r15, 8
20020e2c:	80000000 	or	r0, r0, r0

20020e30 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20020e30:	3021fff8 	addik	r1, r1, -8
20020e34:	fa610004 	swi	r19, r1, 4
20020e38:	12610000 	addk	r19, r1, r0
20020e3c:	f8b3000c 	swi	r5, r19, 12
20020e40:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20020e44:	e873000c 	lwi	r3, r19, 12
20020e48:	e8630010 	lwi	r3, r3, 16
20020e4c:	e8830000 	lwi	r4, r3, 0
20020e50:	e873000c 	lwi	r3, r19, 12
20020e54:	e8a3000c 	lwi	r5, r3, 12
20020e58:	e8730010 	lwi	r3, r19, 16
20020e5c:	64630402 	bslli	r3, r3, 2
20020e60:	10651800 	addk	r3, r5, r3
20020e64:	e8630000 	lwi	r3, r3, 0
20020e68:	14632000 	rsubk	r3, r3, r4
}
20020e6c:	10330000 	addk	r1, r19, r0
20020e70:	ea610004 	lwi	r19, r1, 4
20020e74:	30210008 	addik	r1, r1, 8
20020e78:	b60f0008 	rtsd	r15, 8
20020e7c:	80000000 	or	r0, r0, r0

20020e80 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20020e80:	3021fff4 	addik	r1, r1, -12
20020e84:	fa610008 	swi	r19, r1, 8
20020e88:	12610000 	addk	r19, r1, r0
20020e8c:	f8b30010 	swi	r5, r19, 16
20020e90:	f8d30014 	swi	r6, r19, 20
20020e94:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20020e98:	f8130004 	swi	r0, r19, 4
20020e9c:	b800005c 	bri	92		// 20020ef8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20020ea0:	e8730010 	lwi	r3, r19, 16
20020ea4:	e8830000 	lwi	r4, r3, 0
20020ea8:	e8730010 	lwi	r3, r19, 16
20020eac:	e8a3000c 	lwi	r5, r3, 12
20020eb0:	e8730004 	lwi	r3, r19, 4
20020eb4:	64630402 	bslli	r3, r3, 2
20020eb8:	10651800 	addk	r3, r5, r3
20020ebc:	e8a30000 	lwi	r5, r3, 0
20020ec0:	e8730010 	lwi	r3, r19, 16
20020ec4:	e8630010 	lwi	r3, r3, 16
20020ec8:	e8630000 	lwi	r3, r3, 0
20020ecc:	14632800 	rsubk	r3, r3, r5
20020ed0:	10641800 	addk	r3, r4, r3
20020ed4:	30830001 	addik	r4, r3, 1
20020ed8:	e8730018 	lwi	r3, r19, 24
20020edc:	16441803 	cmpu	r18, r4, r3
20020ee0:	bc52000c 	blti	r18, 12		// 20020eec
            return 0;
20020ee4:	10600000 	addk	r3, r0, r0
20020ee8:	b8000024 	bri	36		// 20020f0c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20020eec:	e8730004 	lwi	r3, r19, 4
20020ef0:	30630001 	addik	r3, r3, 1
20020ef4:	f8730004 	swi	r3, r19, 4
20020ef8:	e8930004 	lwi	r4, r19, 4
20020efc:	e8730014 	lwi	r3, r19, 20
20020f00:	16432003 	cmpu	r18, r3, r4
20020f04:	bc52ff9c 	blti	r18, -100		// 20020ea0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20020f08:	30600001 	addik	r3, r0, 1
}
20020f0c:	10330000 	addk	r1, r19, r0
20020f10:	ea610008 	lwi	r19, r1, 8
20020f14:	3021000c 	addik	r1, r1, 12
20020f18:	b60f0008 	rtsd	r15, 8
20020f1c:	80000000 	or	r0, r0, r0

20020f20 <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20020f20:	3021ffec 	addik	r1, r1, -20
20020f24:	fa610010 	swi	r19, r1, 16
20020f28:	12610000 	addk	r19, r1, r0
20020f2c:	f8b30018 	swi	r5, r19, 24
20020f30:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20020f34:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20020f38:	f8130004 	swi	r0, r19, 4
20020f3c:	b8000054 	bri	84		// 20020f90
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20020f40:	e8730018 	lwi	r3, r19, 24
20020f44:	e8630010 	lwi	r3, r3, 16
20020f48:	e8830000 	lwi	r4, r3, 0
20020f4c:	e8730018 	lwi	r3, r19, 24
20020f50:	e8a3000c 	lwi	r5, r3, 12
20020f54:	e8730004 	lwi	r3, r19, 4
20020f58:	64630402 	bslli	r3, r3, 2
20020f5c:	10651800 	addk	r3, r5, r3
20020f60:	e8630000 	lwi	r3, r3, 0
20020f64:	14632000 	rsubk	r3, r3, r4
20020f68:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20020f6c:	e8930008 	lwi	r4, r19, 8
20020f70:	e873000c 	lwi	r3, r19, 12
20020f74:	16441803 	cmpu	r18, r4, r3
20020f78:	bcb20008 	bgei	r18, 8		// 20020f80
20020f7c:	10640000 	addk	r3, r4, r0
20020f80:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20020f84:	e8730004 	lwi	r3, r19, 4
20020f88:	30630001 	addik	r3, r3, 1
20020f8c:	f8730004 	swi	r3, r19, 4
20020f90:	e8930004 	lwi	r4, r19, 4
20020f94:	e873001c 	lwi	r3, r19, 28
20020f98:	16432003 	cmpu	r18, r3, r4
20020f9c:	bc52ffa4 	blti	r18, -92		// 20020f40
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20020fa0:	e8730018 	lwi	r3, r19, 24
20020fa4:	e8830000 	lwi	r4, r3, 0
20020fa8:	e8730008 	lwi	r3, r19, 8
20020fac:	14632000 	rsubk	r3, r3, r4
}
20020fb0:	10330000 	addk	r1, r19, r0
20020fb4:	ea610010 	lwi	r19, r1, 16
20020fb8:	30210014 	addik	r1, r1, 20
20020fbc:	b60f0008 	rtsd	r15, 8
20020fc0:	80000000 	or	r0, r0, r0

20020fc4 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20020fc4:	3021fff4 	addik	r1, r1, -12
20020fc8:	fa610008 	swi	r19, r1, 8
20020fcc:	12610000 	addk	r19, r1, r0
20020fd0:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20020fd4:	e8730010 	lwi	r3, r19, 16
20020fd8:	e8630010 	lwi	r3, r3, 16
20020fdc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20020fe0:	f8130004 	swi	r0, r19, 4
20020fe4:	b8000028 	bri	40		// 2002100c
        fifo->read_inds[i] = 0;
20020fe8:	e8730010 	lwi	r3, r19, 16
20020fec:	e883000c 	lwi	r4, r3, 12
20020ff0:	e8730004 	lwi	r3, r19, 4
20020ff4:	64630402 	bslli	r3, r3, 2
20020ff8:	10641800 	addk	r3, r4, r3
20020ffc:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20021000:	e8730004 	lwi	r3, r19, 4
20021004:	30630001 	addik	r3, r3, 1
20021008:	f8730004 	swi	r3, r19, 4
2002100c:	e8730010 	lwi	r3, r19, 16
20021010:	e8830008 	lwi	r4, r3, 8
20021014:	e8730004 	lwi	r3, r19, 4
20021018:	16441803 	cmpu	r18, r4, r3
2002101c:	bc52ffcc 	blti	r18, -52		// 20020fe8
        fifo->read_inds[i] = 0;
    }
}
20021020:	10330000 	addk	r1, r19, r0
20021024:	ea610008 	lwi	r19, r1, 8
20021028:	3021000c 	addik	r1, r1, 12
2002102c:	b60f0008 	rtsd	r15, 8
20021030:	80000000 	or	r0, r0, r0

20021034 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20021034:	3021fff0 	addik	r1, r1, -16
20021038:	fa61000c 	swi	r19, r1, 12
2002103c:	12610000 	addk	r19, r1, r0
20021040:	f8b30014 	swi	r5, r19, 20
20021044:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20021048:	e8730014 	lwi	r3, r19, 20
2002104c:	e8830004 	lwi	r4, r3, 4
20021050:	e8730014 	lwi	r3, r19, 20
20021054:	e8a3000c 	lwi	r5, r3, 12
20021058:	e8730018 	lwi	r3, r19, 24
2002105c:	64630402 	bslli	r3, r3, 2
20021060:	10651800 	addk	r3, r5, r3
20021064:	e8a30000 	lwi	r5, r3, 0
20021068:	e8730014 	lwi	r3, r19, 20
2002106c:	e8630000 	lwi	r3, r3, 0
20021070:	3063ffff 	addik	r3, r3, -1
20021074:	84651800 	and	r3, r5, r3
20021078:	64630403 	bslli	r3, r3, 3
2002107c:	10641800 	addk	r3, r4, r3
20021080:	e8830000 	lwi	r4, r3, 0
20021084:	e8a30004 	lwi	r5, r3, 4
20021088:	f8930004 	swi	r4, r19, 4
2002108c:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20021090:	e8730014 	lwi	r3, r19, 20
20021094:	e883000c 	lwi	r4, r3, 12
20021098:	e8730018 	lwi	r3, r19, 24
2002109c:	64630402 	bslli	r3, r3, 2
200210a0:	10641800 	addk	r3, r4, r3
200210a4:	e8830000 	lwi	r4, r3, 0
200210a8:	30840001 	addik	r4, r4, 1
200210ac:	f8830000 	swi	r4, r3, 0
    return value;
200210b0:	e8930004 	lwi	r4, r19, 4
200210b4:	e8b30008 	lwi	r5, r19, 8
}
200210b8:	10640000 	addk	r3, r4, r0
200210bc:	10850000 	addk	r4, r5, r0
200210c0:	10330000 	addk	r1, r19, r0
200210c4:	ea61000c 	lwi	r19, r1, 12
200210c8:	30210010 	addik	r1, r1, 16
200210cc:	b60f0008 	rtsd	r15, 8
200210d0:	80000000 	or	r0, r0, r0

200210d4 <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200210d4:	3021fff8 	addik	r1, r1, -8
200210d8:	fa610004 	swi	r19, r1, 4
200210dc:	12610000 	addk	r19, r1, r0
200210e0:	f8b3000c 	swi	r5, r19, 12
200210e4:	f8d30010 	swi	r6, r19, 16
200210e8:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200210ec:	e873000c 	lwi	r3, r19, 12
200210f0:	e8830004 	lwi	r4, r3, 4
200210f4:	e873000c 	lwi	r3, r19, 12
200210f8:	e8630010 	lwi	r3, r3, 16
200210fc:	e8a30000 	lwi	r5, r3, 0
20021100:	e873000c 	lwi	r3, r19, 12
20021104:	e8630000 	lwi	r3, r3, 0
20021108:	3063ffff 	addik	r3, r3, -1
2002110c:	84651800 	and	r3, r5, r3
20021110:	64630403 	bslli	r3, r3, 3
20021114:	10641800 	addk	r3, r4, r3
20021118:	e8930010 	lwi	r4, r19, 16
2002111c:	e8b30014 	lwi	r5, r19, 20
20021120:	f8830000 	swi	r4, r3, 0
20021124:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20021128:	e873000c 	lwi	r3, r19, 12
2002112c:	e8630010 	lwi	r3, r3, 16
20021130:	e8830000 	lwi	r4, r3, 0
20021134:	30840001 	addik	r4, r4, 1
20021138:	f8830000 	swi	r4, r3, 0
}
2002113c:	10330000 	addk	r1, r19, r0
20021140:	ea610004 	lwi	r19, r1, 4
20021144:	30210008 	addik	r1, r1, 8
20021148:	b60f0008 	rtsd	r15, 8
2002114c:	80000000 	or	r0, r0, r0

20021150 <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20021150:	3021fff8 	addik	r1, r1, -8
20021154:	fa610004 	swi	r19, r1, 4
20021158:	12610000 	addk	r19, r1, r0
2002115c:	f8b3000c 	swi	r5, r19, 12
20021160:	f8d30010 	swi	r6, r19, 16
20021164:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20021168:	e873000c 	lwi	r3, r19, 12
2002116c:	e8630010 	lwi	r3, r3, 16
20021170:	e8830000 	lwi	r4, r3, 0
20021174:	e873000c 	lwi	r3, r19, 12
20021178:	e8a3000c 	lwi	r5, r3, 12
2002117c:	e8730010 	lwi	r3, r19, 16
20021180:	64630402 	bslli	r3, r3, 2
20021184:	10651800 	addk	r3, r5, r3
20021188:	e8630000 	lwi	r3, r3, 0
2002118c:	14a32000 	rsubk	r5, r3, r4
20021190:	30600001 	addik	r3, r0, 1
20021194:	e8930014 	lwi	r4, r19, 20
20021198:	16442803 	cmpu	r18, r4, r5
2002119c:	bcb20008 	bgei	r18, 8		// 200211a4
200211a0:	10600000 	addk	r3, r0, r0
200211a4:	a46300ff 	andi	r3, r3, 255
}
200211a8:	10330000 	addk	r1, r19, r0
200211ac:	ea610004 	lwi	r19, r1, 4
200211b0:	30210008 	addik	r1, r1, 8
200211b4:	b60f0008 	rtsd	r15, 8
200211b8:	80000000 	or	r0, r0, r0

200211bc <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200211bc:	3021fff8 	addik	r1, r1, -8
200211c0:	fa610004 	swi	r19, r1, 4
200211c4:	12610000 	addk	r19, r1, r0
200211c8:	f8b3000c 	swi	r5, r19, 12
200211cc:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200211d0:	e873000c 	lwi	r3, r19, 12
200211d4:	e8630010 	lwi	r3, r3, 16
200211d8:	e8830000 	lwi	r4, r3, 0
200211dc:	e873000c 	lwi	r3, r19, 12
200211e0:	e8a3000c 	lwi	r5, r3, 12
200211e4:	e8730010 	lwi	r3, r19, 16
200211e8:	64630402 	bslli	r3, r3, 2
200211ec:	10651800 	addk	r3, r5, r3
200211f0:	e8630000 	lwi	r3, r3, 0
200211f4:	14632000 	rsubk	r3, r3, r4
}
200211f8:	10330000 	addk	r1, r19, r0
200211fc:	ea610004 	lwi	r19, r1, 4
20021200:	30210008 	addik	r1, r1, 8
20021204:	b60f0008 	rtsd	r15, 8
20021208:	80000000 	or	r0, r0, r0

2002120c <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002120c:	3021fff4 	addik	r1, r1, -12
20021210:	fa610008 	swi	r19, r1, 8
20021214:	12610000 	addk	r19, r1, r0
20021218:	f8b30010 	swi	r5, r19, 16
2002121c:	f8d30014 	swi	r6, r19, 20
20021220:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20021224:	f8130004 	swi	r0, r19, 4
20021228:	b800005c 	bri	92		// 20021284
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002122c:	e8730010 	lwi	r3, r19, 16
20021230:	e8830000 	lwi	r4, r3, 0
20021234:	e8730010 	lwi	r3, r19, 16
20021238:	e8a3000c 	lwi	r5, r3, 12
2002123c:	e8730004 	lwi	r3, r19, 4
20021240:	64630402 	bslli	r3, r3, 2
20021244:	10651800 	addk	r3, r5, r3
20021248:	e8a30000 	lwi	r5, r3, 0
2002124c:	e8730010 	lwi	r3, r19, 16
20021250:	e8630010 	lwi	r3, r3, 16
20021254:	e8630000 	lwi	r3, r3, 0
20021258:	14632800 	rsubk	r3, r3, r5
2002125c:	10641800 	addk	r3, r4, r3
20021260:	30830001 	addik	r4, r3, 1
20021264:	e8730018 	lwi	r3, r19, 24
20021268:	16441803 	cmpu	r18, r4, r3
2002126c:	bc52000c 	blti	r18, 12		// 20021278
            return 0;
20021270:	10600000 	addk	r3, r0, r0
20021274:	b8000024 	bri	36		// 20021298
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20021278:	e8730004 	lwi	r3, r19, 4
2002127c:	30630001 	addik	r3, r3, 1
20021280:	f8730004 	swi	r3, r19, 4
20021284:	e8930004 	lwi	r4, r19, 4
20021288:	e8730014 	lwi	r3, r19, 20
2002128c:	16432003 	cmpu	r18, r3, r4
20021290:	bc52ff9c 	blti	r18, -100		// 2002122c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20021294:	30600001 	addik	r3, r0, 1
}
20021298:	10330000 	addk	r1, r19, r0
2002129c:	ea610008 	lwi	r19, r1, 8
200212a0:	3021000c 	addik	r1, r1, 12
200212a4:	b60f0008 	rtsd	r15, 8
200212a8:	80000000 	or	r0, r0, r0

200212ac <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200212ac:	3021ffec 	addik	r1, r1, -20
200212b0:	fa610010 	swi	r19, r1, 16
200212b4:	12610000 	addk	r19, r1, r0
200212b8:	f8b30018 	swi	r5, r19, 24
200212bc:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200212c0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200212c4:	f8130004 	swi	r0, r19, 4
200212c8:	b8000054 	bri	84		// 2002131c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200212cc:	e8730018 	lwi	r3, r19, 24
200212d0:	e8630010 	lwi	r3, r3, 16
200212d4:	e8830000 	lwi	r4, r3, 0
200212d8:	e8730018 	lwi	r3, r19, 24
200212dc:	e8a3000c 	lwi	r5, r3, 12
200212e0:	e8730004 	lwi	r3, r19, 4
200212e4:	64630402 	bslli	r3, r3, 2
200212e8:	10651800 	addk	r3, r5, r3
200212ec:	e8630000 	lwi	r3, r3, 0
200212f0:	14632000 	rsubk	r3, r3, r4
200212f4:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200212f8:	e8930008 	lwi	r4, r19, 8
200212fc:	e873000c 	lwi	r3, r19, 12
20021300:	16441803 	cmpu	r18, r4, r3
20021304:	bcb20008 	bgei	r18, 8		// 2002130c
20021308:	10640000 	addk	r3, r4, r0
2002130c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20021310:	e8730004 	lwi	r3, r19, 4
20021314:	30630001 	addik	r3, r3, 1
20021318:	f8730004 	swi	r3, r19, 4
2002131c:	e8930004 	lwi	r4, r19, 4
20021320:	e873001c 	lwi	r3, r19, 28
20021324:	16432003 	cmpu	r18, r3, r4
20021328:	bc52ffa4 	blti	r18, -92		// 200212cc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002132c:	e8730018 	lwi	r3, r19, 24
20021330:	e8830000 	lwi	r4, r3, 0
20021334:	e8730008 	lwi	r3, r19, 8
20021338:	14632000 	rsubk	r3, r3, r4
}
2002133c:	10330000 	addk	r1, r19, r0
20021340:	ea610010 	lwi	r19, r1, 16
20021344:	30210014 	addik	r1, r1, 20
20021348:	b60f0008 	rtsd	r15, 8
2002134c:	80000000 	or	r0, r0, r0

20021350 <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20021350:	3021fff4 	addik	r1, r1, -12
20021354:	fa610008 	swi	r19, r1, 8
20021358:	12610000 	addk	r19, r1, r0
2002135c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20021360:	e8730010 	lwi	r3, r19, 16
20021364:	e8630010 	lwi	r3, r3, 16
20021368:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002136c:	f8130004 	swi	r0, r19, 4
20021370:	b8000028 	bri	40		// 20021398
        fifo->read_inds[i] = 0;
20021374:	e8730010 	lwi	r3, r19, 16
20021378:	e883000c 	lwi	r4, r3, 12
2002137c:	e8730004 	lwi	r3, r19, 4
20021380:	64630402 	bslli	r3, r3, 2
20021384:	10641800 	addk	r3, r4, r3
20021388:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002138c:	e8730004 	lwi	r3, r19, 4
20021390:	30630001 	addik	r3, r3, 1
20021394:	f8730004 	swi	r3, r19, 4
20021398:	e8730010 	lwi	r3, r19, 16
2002139c:	e8830008 	lwi	r4, r3, 8
200213a0:	e8730004 	lwi	r3, r19, 4
200213a4:	16441803 	cmpu	r18, r4, r3
200213a8:	bc52ffcc 	blti	r18, -52		// 20021374
        fifo->read_inds[i] = 0;
    }
}
200213ac:	10330000 	addk	r1, r19, r0
200213b0:	ea610008 	lwi	r19, r1, 8
200213b4:	3021000c 	addik	r1, r1, 12
200213b8:	b60f0008 	rtsd	r15, 8
200213bc:	80000000 	or	r0, r0, r0

200213c0 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200213c0:	3021fff4 	addik	r1, r1, -12
200213c4:	fa610008 	swi	r19, r1, 8
200213c8:	12610000 	addk	r19, r1, r0
200213cc:	f8b30010 	swi	r5, r19, 16
200213d0:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200213d4:	e8730010 	lwi	r3, r19, 16
200213d8:	e8830004 	lwi	r4, r3, 4
200213dc:	e8730010 	lwi	r3, r19, 16
200213e0:	e8a3000c 	lwi	r5, r3, 12
200213e4:	e8730014 	lwi	r3, r19, 20
200213e8:	64630402 	bslli	r3, r3, 2
200213ec:	10651800 	addk	r3, r5, r3
200213f0:	e8a30000 	lwi	r5, r3, 0
200213f4:	e8730010 	lwi	r3, r19, 16
200213f8:	e8630000 	lwi	r3, r3, 0
200213fc:	3063ffff 	addik	r3, r3, -1
20021400:	84651800 	and	r3, r5, r3
20021404:	64630402 	bslli	r3, r3, 2
20021408:	10641800 	addk	r3, r4, r3
2002140c:	e8630000 	lwi	r3, r3, 0
20021410:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20021414:	e8730010 	lwi	r3, r19, 16
20021418:	e883000c 	lwi	r4, r3, 12
2002141c:	e8730014 	lwi	r3, r19, 20
20021420:	64630402 	bslli	r3, r3, 2
20021424:	10641800 	addk	r3, r4, r3
20021428:	e8830000 	lwi	r4, r3, 0
2002142c:	30840001 	addik	r4, r4, 1
20021430:	f8830000 	swi	r4, r3, 0
    return value;
20021434:	e8730004 	lwi	r3, r19, 4
}
20021438:	10330000 	addk	r1, r19, r0
2002143c:	ea610008 	lwi	r19, r1, 8
20021440:	3021000c 	addik	r1, r1, 12
20021444:	b60f0008 	rtsd	r15, 8
20021448:	80000000 	or	r0, r0, r0

2002144c <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002144c:	3021fff8 	addik	r1, r1, -8
20021450:	fa610004 	swi	r19, r1, 4
20021454:	12610000 	addk	r19, r1, r0
20021458:	f8b3000c 	swi	r5, r19, 12
2002145c:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20021460:	e873000c 	lwi	r3, r19, 12
20021464:	e8830004 	lwi	r4, r3, 4
20021468:	e873000c 	lwi	r3, r19, 12
2002146c:	e8630010 	lwi	r3, r3, 16
20021470:	e8a30000 	lwi	r5, r3, 0
20021474:	e873000c 	lwi	r3, r19, 12
20021478:	e8630000 	lwi	r3, r3, 0
2002147c:	3063ffff 	addik	r3, r3, -1
20021480:	84651800 	and	r3, r5, r3
20021484:	64630402 	bslli	r3, r3, 2
20021488:	10641800 	addk	r3, r4, r3
2002148c:	e8930010 	lwi	r4, r19, 16
20021490:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20021494:	e873000c 	lwi	r3, r19, 12
20021498:	e8630010 	lwi	r3, r3, 16
2002149c:	e8830000 	lwi	r4, r3, 0
200214a0:	30840001 	addik	r4, r4, 1
200214a4:	f8830000 	swi	r4, r3, 0
}
200214a8:	10330000 	addk	r1, r19, r0
200214ac:	ea610004 	lwi	r19, r1, 4
200214b0:	30210008 	addik	r1, r1, 8
200214b4:	b60f0008 	rtsd	r15, 8
200214b8:	80000000 	or	r0, r0, r0

200214bc <read_BYTE>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_BYTE() {
200214bc:	3021ffe0 	addik	r1, r1, -32
200214c0:	f9e10000 	swi	r15, r1, 0
200214c4:	fa61001c 	swi	r19, r1, 28
200214c8:	12610000 	addk	r19, r1, r0
		index_BYTE = decoder_parser_parseheaders_BYTE->read_inds[0];
200214cc:	b0002004 	imm	8196
200214d0:	e8607318 	lwi	r3, r0, 29464	// 20047318 <decoder_parser_parseheaders_BYTE>
200214d4:	e863000c 	lwi	r3, r3, 12
200214d8:	e8630000 	lwi	r3, r3, 0
200214dc:	b0002006 	imm	8198
200214e0:	f8601dd8 	swi	r3, r0, 7640	// 20061dd8 <index_BYTE>
		numTokens_BYTE = index_BYTE + fifo_u8_get_num_tokens(decoder_parser_parseheaders_BYTE, 0);
200214e4:	b0002004 	imm	8196
200214e8:	e8607318 	lwi	r3, r0, 29464	// 20047318 <decoder_parser_parseheaders_BYTE>
200214ec:	10a30000 	addk	r5, r3, r0
200214f0:	10c00000 	addk	r6, r0, r0
200214f4:	b9f4eef8 	brlid	r15, -4360	// 200203ec <fifo_u8_get_num_tokens>
200214f8:	80000000 	or	r0, r0, r0
200214fc:	10830000 	addk	r4, r3, r0
20021500:	b0002006 	imm	8198
20021504:	e8601dd8 	lwi	r3, r0, 7640	// 20061dd8 <index_BYTE>
20021508:	10641800 	addk	r3, r4, r3
2002150c:	b0002006 	imm	8198
20021510:	f8601ddc 	swi	r3, r0, 7644	// 20061ddc <numTokens_BYTE>
	}
20021514:	e9e10000 	lwi	r15, r1, 0
20021518:	10330000 	addk	r1, r19, r0
2002151c:	ea61001c 	lwi	r19, r1, 28
20021520:	30210020 	addik	r1, r1, 32
20021524:	b60f0008 	rtsd	r15, 8
20021528:	80000000 	or	r0, r0, r0

2002152c <read_end_BYTE>:
	
	static void read_end_BYTE() {
2002152c:	3021fff8 	addik	r1, r1, -8
20021530:	fa610004 	swi	r19, r1, 4
20021534:	12610000 	addk	r19, r1, r0
		decoder_parser_parseheaders_BYTE->read_inds[0] = index_BYTE;
20021538:	b0002004 	imm	8196
2002153c:	e8607318 	lwi	r3, r0, 29464	// 20047318 <decoder_parser_parseheaders_BYTE>
20021540:	e863000c 	lwi	r3, r3, 12
20021544:	b0002006 	imm	8198
20021548:	e8801dd8 	lwi	r4, r0, 7640	// 20061dd8 <index_BYTE>
2002154c:	f8830000 	swi	r4, r3, 0
	}
20021550:	10330000 	addk	r1, r19, r0
20021554:	ea610004 	lwi	r19, r1, 4
20021558:	30210008 	addik	r1, r1, 8
2002155c:	b60f0008 	rtsd	r15, 8
20021560:	80000000 	or	r0, r0, r0

20021564 <write_BTYPE>:

	static void write_BTYPE() {
20021564:	3021ffe0 	addik	r1, r1, -32
20021568:	f9e10000 	swi	r15, r1, 0
2002156c:	fa61001c 	swi	r19, r1, 28
20021570:	12610000 	addk	r19, r1, r0
		index_BTYPE = (*decoder_parser_parseheaders_BTYPE->write_ind);
20021574:	b0002004 	imm	8196
20021578:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
2002157c:	e8630010 	lwi	r3, r3, 16
20021580:	e8630000 	lwi	r3, r3, 0
20021584:	b0002006 	imm	8198
20021588:	f8601de0 	swi	r3, r0, 7648	// 20061de0 <index_BTYPE>
		numFree_BTYPE = index_BTYPE + fifo_i16_get_room(decoder_parser_parseheaders_BTYPE, NUM_READERS_BTYPE);
2002158c:	b0002004 	imm	8196
20021590:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20021594:	10a30000 	addk	r5, r3, r0
20021598:	30c00006 	addik	r6, r0, 6
2002159c:	b9f4e4d4 	brlid	r15, -6956	// 2001fa70 <fifo_i16_get_room>
200215a0:	80000000 	or	r0, r0, r0
200215a4:	10830000 	addk	r4, r3, r0
200215a8:	b0002006 	imm	8198
200215ac:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
200215b0:	10641800 	addk	r3, r4, r3
200215b4:	b0002006 	imm	8198
200215b8:	f8601de4 	swi	r3, r0, 7652	// 20061de4 <numFree_BTYPE>
	}
200215bc:	e9e10000 	lwi	r15, r1, 0
200215c0:	10330000 	addk	r1, r19, r0
200215c4:	ea61001c 	lwi	r19, r1, 28
200215c8:	30210020 	addik	r1, r1, 32
200215cc:	b60f0008 	rtsd	r15, 8
200215d0:	80000000 	or	r0, r0, r0

200215d4 <write_end_BTYPE>:
	
	static void write_end_BTYPE() {
200215d4:	3021fff8 	addik	r1, r1, -8
200215d8:	fa610004 	swi	r19, r1, 4
200215dc:	12610000 	addk	r19, r1, r0
		(*decoder_parser_parseheaders_BTYPE->write_ind) = index_BTYPE;
200215e0:	b0002004 	imm	8196
200215e4:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
200215e8:	e8630010 	lwi	r3, r3, 16
200215ec:	b0002006 	imm	8198
200215f0:	e8801de0 	lwi	r4, r0, 7648	// 20061de0 <index_BTYPE>
200215f4:	f8830000 	swi	r4, r3, 0
	}
200215f8:	10330000 	addk	r1, r19, r0
200215fc:	ea610004 	lwi	r19, r1, 4
20021600:	30210008 	addik	r1, r1, 8
20021604:	b60f0008 	rtsd	r15, 8
20021608:	80000000 	or	r0, r0, r0

2002160c <write_MV>:
	static void write_MV() {
2002160c:	3021ffe0 	addik	r1, r1, -32
20021610:	f9e10000 	swi	r15, r1, 0
20021614:	fa61001c 	swi	r19, r1, 28
20021618:	12610000 	addk	r19, r1, r0
		index_MV = (*decoder_parser_parseheaders_MV->write_ind);
2002161c:	b0002004 	imm	8196
20021620:	e860733c 	lwi	r3, r0, 29500	// 2004733c <decoder_parser_parseheaders_MV>
20021624:	e8630010 	lwi	r3, r3, 16
20021628:	e8630000 	lwi	r3, r3, 0
2002162c:	b0002006 	imm	8198
20021630:	f8601de8 	swi	r3, r0, 7656	// 20061de8 <index_MV>
		numFree_MV = index_MV + fifo_i16_get_room(decoder_parser_parseheaders_MV, NUM_READERS_MV);
20021634:	b0002004 	imm	8196
20021638:	e860733c 	lwi	r3, r0, 29500	// 2004733c <decoder_parser_parseheaders_MV>
2002163c:	10a30000 	addk	r5, r3, r0
20021640:	30c00001 	addik	r6, r0, 1
20021644:	b9f4e42c 	brlid	r15, -7124	// 2001fa70 <fifo_i16_get_room>
20021648:	80000000 	or	r0, r0, r0
2002164c:	10830000 	addk	r4, r3, r0
20021650:	b0002006 	imm	8198
20021654:	e8601de8 	lwi	r3, r0, 7656	// 20061de8 <index_MV>
20021658:	10641800 	addk	r3, r4, r3
2002165c:	b0002006 	imm	8198
20021660:	f8601dec 	swi	r3, r0, 7660	// 20061dec <numFree_MV>
	}
20021664:	e9e10000 	lwi	r15, r1, 0
20021668:	10330000 	addk	r1, r19, r0
2002166c:	ea61001c 	lwi	r19, r1, 28
20021670:	30210020 	addik	r1, r1, 32
20021674:	b60f0008 	rtsd	r15, 8
20021678:	80000000 	or	r0, r0, r0

2002167c <write_end_MV>:
	
	static void write_end_MV() {
2002167c:	3021fff8 	addik	r1, r1, -8
20021680:	fa610004 	swi	r19, r1, 4
20021684:	12610000 	addk	r19, r1, r0
		(*decoder_parser_parseheaders_MV->write_ind) = index_MV;
20021688:	b0002004 	imm	8196
2002168c:	e860733c 	lwi	r3, r0, 29500	// 2004733c <decoder_parser_parseheaders_MV>
20021690:	e8630010 	lwi	r3, r3, 16
20021694:	b0002006 	imm	8198
20021698:	e8801de8 	lwi	r4, r0, 7656	// 20061de8 <index_MV>
2002169c:	f8830000 	swi	r4, r3, 0
	}
200216a0:	10330000 	addk	r1, r19, r0
200216a4:	ea610004 	lwi	r19, r1, 4
200216a8:	30210008 	addik	r1, r1, 8
200216ac:	b60f0008 	rtsd	r15, 8
200216b0:	80000000 	or	r0, r0, r0

200216b4 <write_RUN>:
	static void write_RUN() {
200216b4:	3021ffe0 	addik	r1, r1, -32
200216b8:	f9e10000 	swi	r15, r1, 0
200216bc:	fa61001c 	swi	r19, r1, 28
200216c0:	12610000 	addk	r19, r1, r0
		index_RUN = (*decoder_parser_parseheaders_RUN->write_ind);
200216c4:	b0002004 	imm	8196
200216c8:	e8607334 	lwi	r3, r0, 29492	// 20047334 <decoder_parser_parseheaders_RUN>
200216cc:	e8630010 	lwi	r3, r3, 16
200216d0:	e8630000 	lwi	r3, r3, 0
200216d4:	b0002006 	imm	8198
200216d8:	f8601df0 	swi	r3, r0, 7664	// 20061df0 <index_RUN>
		numFree_RUN = index_RUN + fifo_i8_get_room(decoder_parser_parseheaders_RUN, NUM_READERS_RUN);
200216dc:	b0002004 	imm	8196
200216e0:	e8607334 	lwi	r3, r0, 29492	// 20047334 <decoder_parser_parseheaders_RUN>
200216e4:	10a30000 	addk	r5, r3, r0
200216e8:	30c00001 	addik	r6, r0, 1
200216ec:	b9f4e018 	brlid	r15, -8168	// 2001f704 <fifo_i8_get_room>
200216f0:	80000000 	or	r0, r0, r0
200216f4:	10830000 	addk	r4, r3, r0
200216f8:	b0002006 	imm	8198
200216fc:	e8601df0 	lwi	r3, r0, 7664	// 20061df0 <index_RUN>
20021700:	10641800 	addk	r3, r4, r3
20021704:	b0002006 	imm	8198
20021708:	f8601df4 	swi	r3, r0, 7668	// 20061df4 <numFree_RUN>
	}
2002170c:	e9e10000 	lwi	r15, r1, 0
20021710:	10330000 	addk	r1, r19, r0
20021714:	ea61001c 	lwi	r19, r1, 28
20021718:	30210020 	addik	r1, r1, 32
2002171c:	b60f0008 	rtsd	r15, 8
20021720:	80000000 	or	r0, r0, r0

20021724 <write_end_RUN>:
	
	static void write_end_RUN() {
20021724:	3021fff8 	addik	r1, r1, -8
20021728:	fa610004 	swi	r19, r1, 4
2002172c:	12610000 	addk	r19, r1, r0
		(*decoder_parser_parseheaders_RUN->write_ind) = index_RUN;
20021730:	b0002004 	imm	8196
20021734:	e8607334 	lwi	r3, r0, 29492	// 20047334 <decoder_parser_parseheaders_RUN>
20021738:	e8630010 	lwi	r3, r3, 16
2002173c:	b0002006 	imm	8198
20021740:	e8801df0 	lwi	r4, r0, 7664	// 20061df0 <index_RUN>
20021744:	f8830000 	swi	r4, r3, 0
	}
20021748:	10330000 	addk	r1, r19, r0
2002174c:	ea610004 	lwi	r19, r1, 4
20021750:	30210008 	addik	r1, r1, 8
20021754:	b60f0008 	rtsd	r15, 8
20021758:	80000000 	or	r0, r0, r0

2002175c <write_VALUE>:
	static void write_VALUE() {
2002175c:	3021ffe0 	addik	r1, r1, -32
20021760:	f9e10000 	swi	r15, r1, 0
20021764:	fa61001c 	swi	r19, r1, 28
20021768:	12610000 	addk	r19, r1, r0
		index_VALUE = (*decoder_parser_parseheaders_VALUE->write_ind);
2002176c:	b0002004 	imm	8196
20021770:	e8607370 	lwi	r3, r0, 29552	// 20047370 <decoder_parser_parseheaders_VALUE>
20021774:	e8630010 	lwi	r3, r3, 16
20021778:	e8630000 	lwi	r3, r3, 0
2002177c:	b0002006 	imm	8198
20021780:	f8601df8 	swi	r3, r0, 7672	// 20061df8 <index_VALUE>
		numFree_VALUE = index_VALUE + fifo_i16_get_room(decoder_parser_parseheaders_VALUE, NUM_READERS_VALUE);
20021784:	b0002004 	imm	8196
20021788:	e8607370 	lwi	r3, r0, 29552	// 20047370 <decoder_parser_parseheaders_VALUE>
2002178c:	10a30000 	addk	r5, r3, r0
20021790:	30c00001 	addik	r6, r0, 1
20021794:	b9f4e2dc 	brlid	r15, -7460	// 2001fa70 <fifo_i16_get_room>
20021798:	80000000 	or	r0, r0, r0
2002179c:	10830000 	addk	r4, r3, r0
200217a0:	b0002006 	imm	8198
200217a4:	e8601df8 	lwi	r3, r0, 7672	// 20061df8 <index_VALUE>
200217a8:	10641800 	addk	r3, r4, r3
200217ac:	b0002006 	imm	8198
200217b0:	f8601dfc 	swi	r3, r0, 7676	// 20061dfc <numFree_VALUE>
	}
200217b4:	e9e10000 	lwi	r15, r1, 0
200217b8:	10330000 	addk	r1, r19, r0
200217bc:	ea61001c 	lwi	r19, r1, 28
200217c0:	30210020 	addik	r1, r1, 32
200217c4:	b60f0008 	rtsd	r15, 8
200217c8:	80000000 	or	r0, r0, r0

200217cc <write_end_VALUE>:
	
	static void write_end_VALUE() {
200217cc:	3021fff8 	addik	r1, r1, -8
200217d0:	fa610004 	swi	r19, r1, 4
200217d4:	12610000 	addk	r19, r1, r0
		(*decoder_parser_parseheaders_VALUE->write_ind) = index_VALUE;
200217d8:	b0002004 	imm	8196
200217dc:	e8607370 	lwi	r3, r0, 29552	// 20047370 <decoder_parser_parseheaders_VALUE>
200217e0:	e8630010 	lwi	r3, r3, 16
200217e4:	b0002006 	imm	8198
200217e8:	e8801df8 	lwi	r4, r0, 7672	// 20061df8 <index_VALUE>
200217ec:	f8830000 	swi	r4, r3, 0
	}
200217f0:	10330000 	addk	r1, r19, r0
200217f4:	ea610004 	lwi	r19, r1, 4
200217f8:	30210008 	addik	r1, r1, 8
200217fc:	b60f0008 	rtsd	r15, 8
20021800:	80000000 	or	r0, r0, r0

20021804 <write_LAST>:
	static void write_LAST() {
20021804:	3021ffe0 	addik	r1, r1, -32
20021808:	f9e10000 	swi	r15, r1, 0
2002180c:	fa61001c 	swi	r19, r1, 28
20021810:	12610000 	addk	r19, r1, r0
		index_LAST = (*decoder_parser_parseheaders_LAST->write_ind);
20021814:	b0002004 	imm	8196
20021818:	e860734c 	lwi	r3, r0, 29516	// 2004734c <decoder_parser_parseheaders_LAST>
2002181c:	e8630010 	lwi	r3, r3, 16
20021820:	e8630000 	lwi	r3, r3, 0
20021824:	b0002006 	imm	8198
20021828:	f8601e00 	swi	r3, r0, 7680	// 20061e00 <index_LAST>
		numFree_LAST = index_LAST + fifo_i32_get_room(decoder_parser_parseheaders_LAST, NUM_READERS_LAST);
2002182c:	b0002004 	imm	8196
20021830:	e860734c 	lwi	r3, r0, 29516	// 2004734c <decoder_parser_parseheaders_LAST>
20021834:	10a30000 	addk	r5, r3, r0
20021838:	30c00001 	addik	r6, r0, 1
2002183c:	b9f4e5a8 	brlid	r15, -6744	// 2001fde4 <fifo_i32_get_room>
20021840:	80000000 	or	r0, r0, r0
20021844:	10830000 	addk	r4, r3, r0
20021848:	b0002006 	imm	8198
2002184c:	e8601e00 	lwi	r3, r0, 7680	// 20061e00 <index_LAST>
20021850:	10641800 	addk	r3, r4, r3
20021854:	b0002006 	imm	8198
20021858:	f8601e04 	swi	r3, r0, 7684	// 20061e04 <numFree_LAST>
	}
2002185c:	e9e10000 	lwi	r15, r1, 0
20021860:	10330000 	addk	r1, r19, r0
20021864:	ea61001c 	lwi	r19, r1, 28
20021868:	30210020 	addik	r1, r1, 32
2002186c:	b60f0008 	rtsd	r15, 8
20021870:	80000000 	or	r0, r0, r0

20021874 <write_end_LAST>:
	
	static void write_end_LAST() {
20021874:	3021fff8 	addik	r1, r1, -8
20021878:	fa610004 	swi	r19, r1, 4
2002187c:	12610000 	addk	r19, r1, r0
		(*decoder_parser_parseheaders_LAST->write_ind) = index_LAST;
20021880:	b0002004 	imm	8196
20021884:	e860734c 	lwi	r3, r0, 29516	// 2004734c <decoder_parser_parseheaders_LAST>
20021888:	e8630010 	lwi	r3, r3, 16
2002188c:	b0002006 	imm	8198
20021890:	e8801e00 	lwi	r4, r0, 7680	// 20061e00 <index_LAST>
20021894:	f8830000 	swi	r4, r3, 0
	}
20021898:	10330000 	addk	r1, r19, r0
2002189c:	ea610004 	lwi	r19, r1, 4
200218a0:	30210008 	addik	r1, r1, 8
200218a4:	b60f0008 	rtsd	r15, 8
200218a8:	80000000 	or	r0, r0, r0

200218ac <write_WIDTH>:
	static void write_WIDTH() {
200218ac:	3021ffe0 	addik	r1, r1, -32
200218b0:	f9e10000 	swi	r15, r1, 0
200218b4:	fa61001c 	swi	r19, r1, 28
200218b8:	12610000 	addk	r19, r1, r0
		index_WIDTH = (*decoder_parser_parseheaders_WIDTH->write_ind);
200218bc:	b0002004 	imm	8196
200218c0:	e8607344 	lwi	r3, r0, 29508	// 20047344 <decoder_parser_parseheaders_WIDTH>
200218c4:	e8630010 	lwi	r3, r3, 16
200218c8:	e8630000 	lwi	r3, r3, 0
200218cc:	b0002006 	imm	8198
200218d0:	f8601e08 	swi	r3, r0, 7688	// 20061e08 <index_WIDTH>
		numFree_WIDTH = index_WIDTH + fifo_i16_get_room(decoder_parser_parseheaders_WIDTH, NUM_READERS_WIDTH);
200218d4:	b0002004 	imm	8196
200218d8:	e8607344 	lwi	r3, r0, 29508	// 20047344 <decoder_parser_parseheaders_WIDTH>
200218dc:	10a30000 	addk	r5, r3, r0
200218e0:	30c00001 	addik	r6, r0, 1
200218e4:	b9f4e18c 	brlid	r15, -7796	// 2001fa70 <fifo_i16_get_room>
200218e8:	80000000 	or	r0, r0, r0
200218ec:	10830000 	addk	r4, r3, r0
200218f0:	b0002006 	imm	8198
200218f4:	e8601e08 	lwi	r3, r0, 7688	// 20061e08 <index_WIDTH>
200218f8:	10641800 	addk	r3, r4, r3
200218fc:	b0002006 	imm	8198
20021900:	f8601e0c 	swi	r3, r0, 7692	// 20061e0c <numFree_WIDTH>
	}
20021904:	e9e10000 	lwi	r15, r1, 0
20021908:	10330000 	addk	r1, r19, r0
2002190c:	ea61001c 	lwi	r19, r1, 28
20021910:	30210020 	addik	r1, r1, 32
20021914:	b60f0008 	rtsd	r15, 8
20021918:	80000000 	or	r0, r0, r0

2002191c <write_end_WIDTH>:
	
	static void write_end_WIDTH() {
2002191c:	3021fff8 	addik	r1, r1, -8
20021920:	fa610004 	swi	r19, r1, 4
20021924:	12610000 	addk	r19, r1, r0
		(*decoder_parser_parseheaders_WIDTH->write_ind) = index_WIDTH;
20021928:	b0002004 	imm	8196
2002192c:	e8607344 	lwi	r3, r0, 29508	// 20047344 <decoder_parser_parseheaders_WIDTH>
20021930:	e8630010 	lwi	r3, r3, 16
20021934:	b0002006 	imm	8198
20021938:	e8801e08 	lwi	r4, r0, 7688	// 20061e08 <index_WIDTH>
2002193c:	f8830000 	swi	r4, r3, 0
	}
20021940:	10330000 	addk	r1, r19, r0
20021944:	ea610004 	lwi	r19, r1, 4
20021948:	30210008 	addik	r1, r1, 8
2002194c:	b60f0008 	rtsd	r15, 8
20021950:	80000000 	or	r0, r0, r0

20021954 <write_HEIGHT>:
	static void write_HEIGHT() {
20021954:	3021ffe0 	addik	r1, r1, -32
20021958:	f9e10000 	swi	r15, r1, 0
2002195c:	fa61001c 	swi	r19, r1, 28
20021960:	12610000 	addk	r19, r1, r0
		index_HEIGHT = (*decoder_parser_parseheaders_HEIGHT->write_ind);
20021964:	b0002004 	imm	8196
20021968:	e860732c 	lwi	r3, r0, 29484	// 2004732c <decoder_parser_parseheaders_HEIGHT>
2002196c:	e8630010 	lwi	r3, r3, 16
20021970:	e8630000 	lwi	r3, r3, 0
20021974:	b0002006 	imm	8198
20021978:	f8601e10 	swi	r3, r0, 7696	// 20061e10 <index_HEIGHT>
		numFree_HEIGHT = index_HEIGHT + fifo_i16_get_room(decoder_parser_parseheaders_HEIGHT, NUM_READERS_HEIGHT);
2002197c:	b0002004 	imm	8196
20021980:	e860732c 	lwi	r3, r0, 29484	// 2004732c <decoder_parser_parseheaders_HEIGHT>
20021984:	10a30000 	addk	r5, r3, r0
20021988:	30c00001 	addik	r6, r0, 1
2002198c:	b9f4e0e4 	brlid	r15, -7964	// 2001fa70 <fifo_i16_get_room>
20021990:	80000000 	or	r0, r0, r0
20021994:	10830000 	addk	r4, r3, r0
20021998:	b0002006 	imm	8198
2002199c:	e8601e10 	lwi	r3, r0, 7696	// 20061e10 <index_HEIGHT>
200219a0:	10641800 	addk	r3, r4, r3
200219a4:	b0002006 	imm	8198
200219a8:	f8601e14 	swi	r3, r0, 7700	// 20061e14 <numFree_HEIGHT>
	}
200219ac:	e9e10000 	lwi	r15, r1, 0
200219b0:	10330000 	addk	r1, r19, r0
200219b4:	ea61001c 	lwi	r19, r1, 28
200219b8:	30210020 	addik	r1, r1, 32
200219bc:	b60f0008 	rtsd	r15, 8
200219c0:	80000000 	or	r0, r0, r0

200219c4 <write_end_HEIGHT>:
	
	static void write_end_HEIGHT() {
200219c4:	3021fff8 	addik	r1, r1, -8
200219c8:	fa610004 	swi	r19, r1, 4
200219cc:	12610000 	addk	r19, r1, r0
		(*decoder_parser_parseheaders_HEIGHT->write_ind) = index_HEIGHT;
200219d0:	b0002004 	imm	8196
200219d4:	e860732c 	lwi	r3, r0, 29484	// 2004732c <decoder_parser_parseheaders_HEIGHT>
200219d8:	e8630010 	lwi	r3, r3, 16
200219dc:	b0002006 	imm	8198
200219e0:	e8801e10 	lwi	r4, r0, 7696	// 20061e10 <index_HEIGHT>
200219e4:	f8830000 	swi	r4, r3, 0
	}
200219e8:	10330000 	addk	r1, r19, r0
200219ec:	ea610004 	lwi	r19, r1, 4
200219f0:	30210008 	addik	r1, r1, 8
200219f4:	b60f0008 	rtsd	r15, 8
200219f8:	80000000 	or	r0, r0, r0

200219fc <write_QP>:
	static void write_QP() {
200219fc:	3021ffe0 	addik	r1, r1, -32
20021a00:	f9e10000 	swi	r15, r1, 0
20021a04:	fa61001c 	swi	r19, r1, 28
20021a08:	12610000 	addk	r19, r1, r0
		index_QP = (*decoder_parser_parseheaders_QP->write_ind);
20021a0c:	b0002004 	imm	8196
20021a10:	e8607324 	lwi	r3, r0, 29476	// 20047324 <decoder_parser_parseheaders_QP>
20021a14:	e8630010 	lwi	r3, r3, 16
20021a18:	e8630000 	lwi	r3, r3, 0
20021a1c:	b0002006 	imm	8198
20021a20:	f8601e18 	swi	r3, r0, 7704	// 20061e18 <index_QP>
		numFree_QP = index_QP + fifo_i8_get_room(decoder_parser_parseheaders_QP, NUM_READERS_QP);
20021a24:	b0002004 	imm	8196
20021a28:	e8607324 	lwi	r3, r0, 29476	// 20047324 <decoder_parser_parseheaders_QP>
20021a2c:	10a30000 	addk	r5, r3, r0
20021a30:	30c00001 	addik	r6, r0, 1
20021a34:	b9f4dcd0 	brlid	r15, -9008	// 2001f704 <fifo_i8_get_room>
20021a38:	80000000 	or	r0, r0, r0
20021a3c:	10830000 	addk	r4, r3, r0
20021a40:	b0002006 	imm	8198
20021a44:	e8601e18 	lwi	r3, r0, 7704	// 20061e18 <index_QP>
20021a48:	10641800 	addk	r3, r4, r3
20021a4c:	b0002006 	imm	8198
20021a50:	f8601e1c 	swi	r3, r0, 7708	// 20061e1c <numFree_QP>
	}
20021a54:	e9e10000 	lwi	r15, r1, 0
20021a58:	10330000 	addk	r1, r19, r0
20021a5c:	ea61001c 	lwi	r19, r1, 28
20021a60:	30210020 	addik	r1, r1, 32
20021a64:	b60f0008 	rtsd	r15, 8
20021a68:	80000000 	or	r0, r0, r0

20021a6c <write_end_QP>:
	
	static void write_end_QP() {
20021a6c:	3021fff8 	addik	r1, r1, -8
20021a70:	fa610004 	swi	r19, r1, 4
20021a74:	12610000 	addk	r19, r1, r0
		(*decoder_parser_parseheaders_QP->write_ind) = index_QP;
20021a78:	b0002004 	imm	8196
20021a7c:	e8607324 	lwi	r3, r0, 29476	// 20047324 <decoder_parser_parseheaders_QP>
20021a80:	e8630010 	lwi	r3, r3, 16
20021a84:	b0002006 	imm	8198
20021a88:	e8801e18 	lwi	r4, r0, 7704	// 20061e18 <index_QP>
20021a8c:	f8830000 	swi	r4, r3, 0
	}
20021a90:	10330000 	addk	r1, r19, r0
20021a94:	ea610004 	lwi	r19, r1, 4
20021a98:	30210008 	addik	r1, r1, 8
20021a9c:	b60f0008 	rtsd	r15, 8
20021aa0:	80000000 	or	r0, r0, r0

20021aa4 <BitstreamReadUtils_getFifoIdx>:
	static void vldFunctions_get_mv(i16 fifo[10], i32 res[1], char * name);
	static i32 BitstreamReadUtils_IsStartCode(u16 fifo[10]);
	static void BitstreamReadUtils_byte_align(u16 fifo[10]);
	static void log2bin(u32 value, u32 res[1]);

	static u16 BitstreamReadUtils_getFifoIdx(u16 cptBits, u16 fifo[10]) {
20021aa4:	3021fff0 	addik	r1, r1, -16
20021aa8:	fa61000c 	swi	r19, r1, 12
20021aac:	12610000 	addk	r19, r1, r0
20021ab0:	10650000 	addk	r3, r5, r0
20021ab4:	f8d30018 	swi	r6, r19, 24
20021ab8:	f4730014 	shi	r3, r19, 20
		u8 local_FIFO_IDX;
		u16 fifo_idx;
		u8 local_FIFO_SIZE;
		i16 tmp_if;
	
		local_FIFO_IDX = BitstreamReadUtils_FIFO_IDX;
20021abc:	30600009 	addik	r3, r0, 9
20021ac0:	f0730006 	sbi	r3, r19, 6
		fifo_idx = fifo[local_FIFO_IDX];
20021ac4:	e0730006 	lbui	r3, r19, 6
20021ac8:	10631800 	addk	r3, r3, r3
20021acc:	e8930018 	lwi	r4, r19, 24
20021ad0:	10641800 	addk	r3, r4, r3
20021ad4:	e4630000 	lhui	r3, r3, 0
20021ad8:	f4730008 	shi	r3, r19, 8
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20021adc:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20021ae0:	f073000a 	sbi	r3, r19, 10
		if ((cptBits & local_FIFO_SIZE - 1) != 0) {
20021ae4:	e4930014 	lhui	r4, r19, 20
20021ae8:	e073000a 	lbui	r3, r19, 10
20021aec:	3063ffff 	addik	r3, r3, -1
20021af0:	84641800 	and	r3, r4, r3
20021af4:	bc030064 	beqi	r3, 100		// 20021b58
			local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20021af8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20021afc:	f073000a 	sbi	r3, r19, 10
			tmp_if = fifo_idx - 1 - (cptBits >> 3) & local_FIFO_SIZE - 1;
20021b00:	e4730014 	lhui	r3, r19, 20
20021b04:	64630003 	bsrli	r3, r3, 3
20021b08:	b0000000 	imm	0
20021b0c:	a463ffff 	andi	r3, r3, -1
20021b10:	e4930008 	lhui	r4, r19, 8
20021b14:	14632000 	rsubk	r3, r3, r4
20021b18:	b0000000 	imm	0
20021b1c:	a463ffff 	andi	r3, r3, -1
20021b20:	3063ffff 	addik	r3, r3, -1
20021b24:	b0000000 	imm	0
20021b28:	a463ffff 	andi	r3, r3, -1
20021b2c:	90830061 	sext16	r4, r3
20021b30:	e073000a 	lbui	r3, r19, 10
20021b34:	b0000000 	imm	0
20021b38:	a463ffff 	andi	r3, r3, -1
20021b3c:	3063ffff 	addik	r3, r3, -1
20021b40:	b0000000 	imm	0
20021b44:	a463ffff 	andi	r3, r3, -1
20021b48:	90630061 	sext16	r3, r3
20021b4c:	84641800 	and	r3, r4, r3
20021b50:	f4730004 	shi	r3, r19, 4
20021b54:	b8000054 	bri	84		// 20021ba8
		} else {
			local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20021b58:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20021b5c:	f073000a 	sbi	r3, r19, 10
			tmp_if = fifo_idx - (cptBits >> 3) & local_FIFO_SIZE - 1;
20021b60:	e4730014 	lhui	r3, r19, 20
20021b64:	64630003 	bsrli	r3, r3, 3
20021b68:	b0000000 	imm	0
20021b6c:	a463ffff 	andi	r3, r3, -1
20021b70:	e4930008 	lhui	r4, r19, 8
20021b74:	14632000 	rsubk	r3, r3, r4
20021b78:	b0000000 	imm	0
20021b7c:	a463ffff 	andi	r3, r3, -1
20021b80:	90830061 	sext16	r4, r3
20021b84:	e073000a 	lbui	r3, r19, 10
20021b88:	b0000000 	imm	0
20021b8c:	a463ffff 	andi	r3, r3, -1
20021b90:	3063ffff 	addik	r3, r3, -1
20021b94:	b0000000 	imm	0
20021b98:	a463ffff 	andi	r3, r3, -1
20021b9c:	90630061 	sext16	r3, r3
20021ba0:	84641800 	and	r3, r4, r3
20021ba4:	f4730004 	shi	r3, r19, 4
		}
		return tmp_if;
20021ba8:	e4730004 	lhui	r3, r19, 4
	}
20021bac:	10330000 	addk	r1, r19, r0
20021bb0:	ea61000c 	lwi	r19, r1, 12
20021bb4:	30210010 	addik	r1, r1, 16
20021bb8:	b60f0008 	rtsd	r15, 8
20021bbc:	80000000 	or	r0, r0, r0

20021bc0 <BitstreamReadUtils_showXBits>:
	static void BitstreamReadUtils_showXBits(u8 nb, u16 fifo[10], u32 res[1]) {
20021bc0:	3021ffc4 	addik	r1, r1, -60
20021bc4:	f9e10000 	swi	r15, r1, 0
20021bc8:	fa610038 	swi	r19, r1, 56
20021bcc:	12610000 	addk	r19, r1, r0
20021bd0:	10650000 	addk	r3, r5, r0
20021bd4:	f8d30044 	swi	r6, r19, 68
20021bd8:	f8f30048 	swi	r7, r19, 72
20021bdc:	f0730040 	sbi	r3, r19, 64
		u16 tmp_fifo0;
		u16 tmp_fifo1;
		u16 tmp_fifo2;
		u32 tmp_res;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20021be0:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20021be4:	f073001c 	sbi	r3, r19, 28
		cptBits = fifo[local_FIFO_CPT_BITS];
20021be8:	e073001c 	lbui	r3, r19, 28
20021bec:	10631800 	addk	r3, r3, r3
20021bf0:	e8930044 	lwi	r4, r19, 68
20021bf4:	10641800 	addk	r3, r4, r3
20021bf8:	e4630000 	lhui	r3, r3, 0
20021bfc:	f473001e 	shi	r3, r19, 30
		idx = BitstreamReadUtils_getFifoIdx(cptBits, fifo);
20021c00:	e473001e 	lhui	r3, r19, 30
20021c04:	10a30000 	addk	r5, r3, r0
20021c08:	e8d30044 	lwi	r6, r19, 68
20021c0c:	b9f4fe98 	brlid	r15, -360	// 20021aa4 <BitstreamReadUtils_getFifoIdx>
20021c10:	80000000 	or	r0, r0, r0
20021c14:	f4730020 	shi	r3, r19, 32
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20021c18:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20021c1c:	f0730022 	sbi	r3, r19, 34
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20021c20:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20021c24:	f0730022 	sbi	r3, r19, 34
		cpt = 8 - (cptBits & local_FIFO_SIZE - 1) & local_FIFO_SIZE - 1;
20021c28:	e473001e 	lhui	r3, r19, 30
20021c2c:	90830060 	sext8	r4, r3
20021c30:	e0730022 	lbui	r3, r19, 34
20021c34:	3063ffff 	addik	r3, r3, -1
20021c38:	a46300ff 	andi	r3, r3, 255
20021c3c:	90630060 	sext8	r3, r3
20021c40:	84641800 	and	r3, r4, r3
20021c44:	90630060 	sext8	r3, r3
20021c48:	a46300ff 	andi	r3, r3, 255
20021c4c:	30800008 	addik	r4, r0, 8	// 8 <_vector_sw_exception>
20021c50:	14632000 	rsubk	r3, r3, r4
20021c54:	a46300ff 	andi	r3, r3, 255
20021c58:	90830060 	sext8	r4, r3
20021c5c:	e0730022 	lbui	r3, r19, 34
20021c60:	3063ffff 	addik	r3, r3, -1
20021c64:	a46300ff 	andi	r3, r3, 255
20021c68:	90630060 	sext8	r3, r3
20021c6c:	84641800 	and	r3, r4, r3
20021c70:	90630060 	sext8	r3, r3
20021c74:	f0730023 	sbi	r3, r19, 35
		local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
20021c78:	f8130024 	swi	r0, r19, 36
		if (local_DEBUG_PARSER) {
			if (nb > cptBits) {
			}
		}
		tmp_fifo = fifo[idx];
20021c7c:	e4730020 	lhui	r3, r19, 32
20021c80:	10631800 	addk	r3, r3, r3
20021c84:	e8930044 	lwi	r4, r19, 68
20021c88:	10641800 	addk	r3, r4, r3
20021c8c:	e4630000 	lhui	r3, r3, 0
20021c90:	f4730028 	shi	r3, r19, 40
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20021c94:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20021c98:	f0730022 	sbi	r3, r19, 34
		tmp_fifo0 = fifo[idx + 1 & local_FIFO_SIZE - 1];
20021c9c:	e4730020 	lhui	r3, r19, 32
20021ca0:	30830001 	addik	r4, r3, 1
20021ca4:	e0730022 	lbui	r3, r19, 34
20021ca8:	3063ffff 	addik	r3, r3, -1
20021cac:	84641800 	and	r3, r4, r3
20021cb0:	10631800 	addk	r3, r3, r3
20021cb4:	e8930044 	lwi	r4, r19, 68
20021cb8:	10641800 	addk	r3, r4, r3
20021cbc:	e4630000 	lhui	r3, r3, 0
20021cc0:	f473002a 	shi	r3, r19, 42
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20021cc4:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20021cc8:	f0730022 	sbi	r3, r19, 34
		tmp_fifo1 = fifo[idx + 2 & local_FIFO_SIZE - 1];
20021ccc:	e4730020 	lhui	r3, r19, 32
20021cd0:	30830002 	addik	r4, r3, 2
20021cd4:	e0730022 	lbui	r3, r19, 34
20021cd8:	3063ffff 	addik	r3, r3, -1
20021cdc:	84641800 	and	r3, r4, r3
20021ce0:	10631800 	addk	r3, r3, r3
20021ce4:	e8930044 	lwi	r4, r19, 68
20021ce8:	10641800 	addk	r3, r4, r3
20021cec:	e4630000 	lhui	r3, r3, 0
20021cf0:	f473002c 	shi	r3, r19, 44
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20021cf4:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20021cf8:	f0730022 	sbi	r3, r19, 34
		tmp_fifo2 = fifo[idx + 3 & local_FIFO_SIZE - 1];
20021cfc:	e4730020 	lhui	r3, r19, 32
20021d00:	30830003 	addik	r4, r3, 3
20021d04:	e0730022 	lbui	r3, r19, 34
20021d08:	3063ffff 	addik	r3, r3, -1
20021d0c:	84641800 	and	r3, r4, r3
20021d10:	10631800 	addk	r3, r3, r3
20021d14:	e8930044 	lwi	r4, r19, 68
20021d18:	10641800 	addk	r3, r4, r3
20021d1c:	e4630000 	lhui	r3, r3, 0
20021d20:	f473002e 	shi	r3, r19, 46
		res[0] = tmp_fifo << 24 | tmp_fifo0 << 16 | tmp_fifo1 << 8 | tmp_fifo2;
20021d24:	e4730028 	lhui	r3, r19, 40
20021d28:	64830418 	bslli	r4, r3, 24
20021d2c:	e473002a 	lhui	r3, r19, 42
20021d30:	64630410 	bslli	r3, r3, 16
20021d34:	80841800 	or	r4, r4, r3
20021d38:	e473002c 	lhui	r3, r19, 44
20021d3c:	64630408 	bslli	r3, r3, 8
20021d40:	80841800 	or	r4, r4, r3
20021d44:	e473002e 	lhui	r3, r19, 46
20021d48:	80641800 	or	r3, r4, r3
20021d4c:	10830000 	addk	r4, r3, r0
20021d50:	e8730048 	lwi	r3, r19, 72
20021d54:	f8830000 	swi	r4, r3, 0
		tmp_res = res[0];
20021d58:	e8730048 	lwi	r3, r19, 72
20021d5c:	e8630000 	lwi	r3, r3, 0
20021d60:	f8730030 	swi	r3, r19, 48
		res[0] = (tmp_res << cpt) >> (32 - nb) & (1 << nb) - 1;
20021d64:	e0730023 	lbui	r3, r19, 35
20021d68:	e8930030 	lwi	r4, r19, 48
20021d6c:	44841c00 	bsll	r4, r4, r3
20021d70:	e0730040 	lbui	r3, r19, 64
20021d74:	30a00020 	addik	r5, r0, 32	// 20 <_vector_hw_exception>
20021d78:	14632800 	rsubk	r3, r3, r5
20021d7c:	44841800 	bsrl	r4, r4, r3
20021d80:	e0730040 	lbui	r3, r19, 64
20021d84:	30a00001 	addik	r5, r0, 1
20021d88:	44651c00 	bsll	r3, r5, r3
20021d8c:	3063ffff 	addik	r3, r3, -1
20021d90:	84841800 	and	r4, r4, r3
20021d94:	e8730048 	lwi	r3, r19, 72
20021d98:	f8830000 	swi	r4, r3, 0
	}
20021d9c:	e9e10000 	lwi	r15, r1, 0
20021da0:	10330000 	addk	r1, r19, r0
20021da4:	ea610038 	lwi	r19, r1, 56
20021da8:	3021003c 	addik	r1, r1, 60
20021dac:	b60f0008 	rtsd	r15, 8
20021db0:	80000000 	or	r0, r0, r0

20021db4 <BitstreamReadUtils_flushBits>:
	static void BitstreamReadUtils_flushBits(u8 nb, u16 fifo[10]) {
20021db4:	3021fff4 	addik	r1, r1, -12
20021db8:	fa610008 	swi	r19, r1, 8
20021dbc:	12610000 	addk	r19, r1, r0
20021dc0:	10650000 	addk	r3, r5, r0
20021dc4:	f8d30014 	swi	r6, r19, 20
20021dc8:	f0730010 	sbi	r3, r19, 16
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20021dcc:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20021dd0:	f0730004 	sbi	r3, r19, 4
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20021dd4:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20021dd8:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
20021ddc:	e0730004 	lbui	r3, r19, 4
20021de0:	10631800 	addk	r3, r3, r3
20021de4:	e8930014 	lwi	r4, r19, 20
20021de8:	10641800 	addk	r3, r4, r3
20021dec:	e4630000 	lhui	r3, r3, 0
20021df0:	f4730006 	shi	r3, r19, 6
		fifo[local_FIFO_CPT_BITS] = tmp_fifo - nb;
20021df4:	e0730004 	lbui	r3, r19, 4
20021df8:	10631800 	addk	r3, r3, r3
20021dfc:	e8930014 	lwi	r4, r19, 20
20021e00:	10641800 	addk	r3, r4, r3
20021e04:	e0930010 	lbui	r4, r19, 16
20021e08:	b0000000 	imm	0
20021e0c:	a484ffff 	andi	r4, r4, -1
20021e10:	e4b30006 	lhui	r5, r19, 6
20021e14:	14842800 	rsubk	r4, r4, r5
20021e18:	b0000000 	imm	0
20021e1c:	a484ffff 	andi	r4, r4, -1
20021e20:	f4830000 	shi	r4, r3, 0
	}
20021e24:	10330000 	addk	r1, r19, r0
20021e28:	ea610008 	lwi	r19, r1, 8
20021e2c:	3021000c 	addik	r1, r1, 12
20021e30:	b60f0008 	rtsd	r15, 8
20021e34:	80000000 	or	r0, r0, r0

20021e38 <BitstreamReadUtils_getBits>:
	static void BitstreamReadUtils_getBits(u8 nb, u16 fifo[10], i32 res[1]) {
20021e38:	3021ffe0 	addik	r1, r1, -32
20021e3c:	f9e10000 	swi	r15, r1, 0
20021e40:	fa61001c 	swi	r19, r1, 28
20021e44:	12610000 	addk	r19, r1, r0
20021e48:	10650000 	addk	r3, r5, r0
20021e4c:	f8d30028 	swi	r6, r19, 40
20021e50:	f8f3002c 	swi	r7, r19, 44
20021e54:	f0730024 	sbi	r3, r19, 36
	
		if (nb == 0) {
20021e58:	e0730024 	lbui	r3, r19, 36
20021e5c:	bc230010 	bnei	r3, 16		// 20021e6c
			res[0] = 0;
20021e60:	e873002c 	lwi	r3, r19, 44
20021e64:	f8030000 	swi	r0, r3, 0
20021e68:	b8000030 	bri	48		// 20021e98
		} else {
			BitstreamReadUtils_showXBits(nb, fifo, res);
20021e6c:	e0730024 	lbui	r3, r19, 36
20021e70:	10a30000 	addk	r5, r3, r0
20021e74:	e8d30028 	lwi	r6, r19, 40
20021e78:	e8f3002c 	lwi	r7, r19, 44
20021e7c:	b9f4fd44 	brlid	r15, -700	// 20021bc0 <BitstreamReadUtils_showXBits>
20021e80:	80000000 	or	r0, r0, r0
			BitstreamReadUtils_flushBits(nb, fifo);
20021e84:	e0730024 	lbui	r3, r19, 36
20021e88:	10a30000 	addk	r5, r3, r0
20021e8c:	e8d30028 	lwi	r6, r19, 40
20021e90:	b9f4ff24 	brlid	r15, -220	// 20021db4 <BitstreamReadUtils_flushBits>
20021e94:	80000000 	or	r0, r0, r0
		}
	}
20021e98:	e9e10000 	lwi	r15, r1, 0
20021e9c:	10330000 	addk	r1, r19, r0
20021ea0:	ea61001c 	lwi	r19, r1, 28
20021ea4:	30210020 	addik	r1, r1, 32
20021ea8:	b60f0008 	rtsd	r15, 8
20021eac:	80000000 	or	r0, r0, r0

20021eb0 <BitstreamReadUtils_vld_u>:
	static void BitstreamReadUtils_vld_u(u8 nb, u16 fifo[10], i32 res[1]) {
20021eb0:	3021ffe0 	addik	r1, r1, -32
20021eb4:	f9e10000 	swi	r15, r1, 0
20021eb8:	fa61001c 	swi	r19, r1, 28
20021ebc:	12610000 	addk	r19, r1, r0
20021ec0:	10650000 	addk	r3, r5, r0
20021ec4:	f8d30028 	swi	r6, r19, 40
20021ec8:	f8f3002c 	swi	r7, r19, 44
20021ecc:	f0730024 	sbi	r3, r19, 36
	
		BitstreamReadUtils_getBits(nb, fifo, res);
20021ed0:	e0730024 	lbui	r3, r19, 36
20021ed4:	10a30000 	addk	r5, r3, r0
20021ed8:	e8d30028 	lwi	r6, r19, 40
20021edc:	e8f3002c 	lwi	r7, r19, 44
20021ee0:	b9f4ff58 	brlid	r15, -168	// 20021e38 <BitstreamReadUtils_getBits>
20021ee4:	80000000 	or	r0, r0, r0
	}
20021ee8:	e9e10000 	lwi	r15, r1, 0
20021eec:	10330000 	addk	r1, r19, r0
20021ef0:	ea61001c 	lwi	r19, r1, 28
20021ef4:	30210020 	addik	r1, r1, 32
20021ef8:	b60f0008 	rtsd	r15, 8
20021efc:	80000000 	or	r0, r0, r0

20021f00 <BitstreamReadUtils_vld_u_name>:
	static void BitstreamReadUtils_vld_u_name(u8 nb, u16 fifo[10], i32 res[1], char * name) {
20021f00:	3021ffd8 	addik	r1, r1, -40
20021f04:	f9e10000 	swi	r15, r1, 0
20021f08:	fa610024 	swi	r19, r1, 36
20021f0c:	12610000 	addk	r19, r1, r0
20021f10:	10650000 	addk	r3, r5, r0
20021f14:	f8d30030 	swi	r6, r19, 48
20021f18:	f8f30034 	swi	r7, r19, 52
20021f1c:	f9130038 	swi	r8, r19, 56
20021f20:	f073002c 	sbi	r3, r19, 44
		i32 local_DEBUG_PARSER;
		i32 tmp_res;
	
		BitstreamReadUtils_vld_u(nb, fifo, res);
20021f24:	e073002c 	lbui	r3, r19, 44
20021f28:	10a30000 	addk	r5, r3, r0
20021f2c:	e8d30030 	lwi	r6, r19, 48
20021f30:	e8f30034 	lwi	r7, r19, 52
20021f34:	b9f4ff7c 	brlid	r15, -132	// 20021eb0 <BitstreamReadUtils_vld_u>
20021f38:	80000000 	or	r0, r0, r0
		local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
20021f3c:	f813001c 	swi	r0, r19, 28
		if (local_DEBUG_PARSER) {
20021f40:	e873001c 	lwi	r3, r19, 28
20021f44:	bc030010 	beqi	r3, 16		// 20021f54
			tmp_res = res[0];
20021f48:	e8730034 	lwi	r3, r19, 52
20021f4c:	e8630000 	lwi	r3, r3, 0
20021f50:	f8730020 	swi	r3, r19, 32
		}
	}
20021f54:	e9e10000 	lwi	r15, r1, 0
20021f58:	10330000 	addk	r1, r19, r0
20021f5c:	ea610024 	lwi	r19, r1, 36
20021f60:	30210028 	addik	r1, r1, 40
20021f64:	b60f0008 	rtsd	r15, 8
20021f68:	80000000 	or	r0, r0, r0

20021f6c <BitstreamReadUtils_showBits>:
	static void BitstreamReadUtils_showBits(u8 nb, u16 fifo[10], i32 res[1]) {
20021f6c:	3021ffbc 	addik	r1, r1, -68
20021f70:	f9e10000 	swi	r15, r1, 0
20021f74:	fa610040 	swi	r19, r1, 64
20021f78:	12610000 	addk	r19, r1, r0
20021f7c:	10650000 	addk	r3, r5, r0
20021f80:	f8d3004c 	swi	r6, r19, 76
20021f84:	f8f30050 	swi	r7, r19, 80
20021f88:	f0730048 	sbi	r3, r19, 72
		i32 tmp_res;
		u16 tmp_fifo;
		i32 tmp_res0;
		u16 tmp_fifo0;
	
		nb_v = nb;
20021f8c:	e0730048 	lbui	r3, r19, 72
20021f90:	f073001c 	sbi	r3, r19, 28
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20021f94:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20021f98:	f0730023 	sbi	r3, r19, 35
		cptBits = fifo[local_FIFO_CPT_BITS];
20021f9c:	e0730023 	lbui	r3, r19, 35
20021fa0:	10631800 	addk	r3, r3, r3
20021fa4:	e893004c 	lwi	r4, r19, 76
20021fa8:	10641800 	addk	r3, r4, r3
20021fac:	e4630000 	lhui	r3, r3, 0
20021fb0:	f473001e 	shi	r3, r19, 30
		idx = BitstreamReadUtils_getFifoIdx(cptBits, fifo);
20021fb4:	e473001e 	lhui	r3, r19, 30
20021fb8:	10a30000 	addk	r5, r3, r0
20021fbc:	e8d3004c 	lwi	r6, r19, 76
20021fc0:	b9f4fae4 	brlid	r15, -1308	// 20021aa4 <BitstreamReadUtils_getFifoIdx>
20021fc4:	80000000 	or	r0, r0, r0
20021fc8:	f4730020 	shi	r3, r19, 32
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20021fcc:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20021fd0:	f0730024 	sbi	r3, r19, 36
		cpt = cptBits & local_FIFO_SIZE - 1;
20021fd4:	e473001e 	lhui	r3, r19, 30
20021fd8:	90830060 	sext8	r4, r3
20021fdc:	e0730024 	lbui	r3, r19, 36
20021fe0:	3063ffff 	addik	r3, r3, -1
20021fe4:	a46300ff 	andi	r3, r3, 255
20021fe8:	90630060 	sext8	r3, r3
20021fec:	84641800 	and	r3, r4, r3
20021ff0:	90630060 	sext8	r3, r3
20021ff4:	f0730022 	sbi	r3, r19, 34
		local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
20021ff8:	f8130028 	swi	r0, r19, 40
		if (local_DEBUG_PARSER) {
			if (nb > cptBits) {
			}
		}
		res[0] = 0;
20021ffc:	e8730050 	lwi	r3, r19, 80
20022000:	f8030000 	swi	r0, r3, 0
		if (cpt == 0) {
20022004:	e0730022 	lbui	r3, r19, 34
20022008:	bc230018 	bnei	r3, 24		// 20022020
			local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
2002200c:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20022010:	f0730024 	sbi	r3, r19, 36
			cpt = local_FIFO_SIZE;
20022014:	e0730024 	lbui	r3, r19, 36
20022018:	f0730022 	sbi	r3, r19, 34
		}
		while (nb_v > cpt) {
2002201c:	b800010c 	bri	268		// 20022128
20022020:	b8000108 	bri	264		// 20022128
			tmp_res = res[0];
20022024:	e8730050 	lwi	r3, r19, 80
20022028:	e8630000 	lwi	r3, r3, 0
2002202c:	f873002c 	swi	r3, r19, 44
			tmp_fifo = fifo[idx];
20022030:	e4730020 	lhui	r3, r19, 32
20022034:	10631800 	addk	r3, r3, r3
20022038:	e893004c 	lwi	r4, r19, 76
2002203c:	10641800 	addk	r3, r4, r3
20022040:	e4630000 	lhui	r3, r3, 0
20022044:	f4730030 	shi	r3, r19, 48
			res[0] = (tmp_res << cpt) + (tmp_fifo & (1 << cpt) - 1);
20022048:	e0730022 	lbui	r3, r19, 34
2002204c:	e893002c 	lwi	r4, r19, 44
20022050:	44841c00 	bsll	r4, r4, r3
20022054:	e4b30030 	lhui	r5, r19, 48
20022058:	e0730022 	lbui	r3, r19, 34
2002205c:	30c00001 	addik	r6, r0, 1
20022060:	44661c00 	bsll	r3, r6, r3
20022064:	3063ffff 	addik	r3, r3, -1
20022068:	84651800 	and	r3, r5, r3
2002206c:	10841800 	addk	r4, r4, r3
20022070:	e8730050 	lwi	r3, r19, 80
20022074:	f8830000 	swi	r4, r3, 0
			cptBits = cptBits - cpt;
20022078:	e0730022 	lbui	r3, r19, 34
2002207c:	b0000000 	imm	0
20022080:	a463ffff 	andi	r3, r3, -1
20022084:	e493001e 	lhui	r4, r19, 30
20022088:	14632000 	rsubk	r3, r3, r4
2002208c:	f473001e 	shi	r3, r19, 30
			nb_v = nb_v - cpt;
20022090:	e093001c 	lbui	r4, r19, 28
20022094:	e0730022 	lbui	r3, r19, 34
20022098:	14632000 	rsubk	r3, r3, r4
2002209c:	f073001c 	sbi	r3, r19, 28
			local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
200220a0:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200220a4:	f0730024 	sbi	r3, r19, 36
			idx = idx + 1 & local_FIFO_SIZE - 1;
200220a8:	e4730020 	lhui	r3, r19, 32
200220ac:	30630001 	addik	r3, r3, 1
200220b0:	b0000000 	imm	0
200220b4:	a463ffff 	andi	r3, r3, -1
200220b8:	90830061 	sext16	r4, r3
200220bc:	e0730024 	lbui	r3, r19, 36
200220c0:	b0000000 	imm	0
200220c4:	a463ffff 	andi	r3, r3, -1
200220c8:	3063ffff 	addik	r3, r3, -1
200220cc:	b0000000 	imm	0
200220d0:	a463ffff 	andi	r3, r3, -1
200220d4:	90630061 	sext16	r3, r3
200220d8:	84641800 	and	r3, r4, r3
200220dc:	90630061 	sext16	r3, r3
200220e0:	f4730020 	shi	r3, r19, 32
			local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
200220e4:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200220e8:	f0730024 	sbi	r3, r19, 36
			cpt = cptBits & local_FIFO_SIZE - 1;
200220ec:	e473001e 	lhui	r3, r19, 30
200220f0:	90830060 	sext8	r4, r3
200220f4:	e0730024 	lbui	r3, r19, 36
200220f8:	3063ffff 	addik	r3, r3, -1
200220fc:	a46300ff 	andi	r3, r3, 255
20022100:	90630060 	sext8	r3, r3
20022104:	84641800 	and	r3, r4, r3
20022108:	90630060 	sext8	r3, r3
2002210c:	f0730022 	sbi	r3, r19, 34
			if (cpt == 0) {
20022110:	e0730022 	lbui	r3, r19, 34
20022114:	bc230014 	bnei	r3, 20		// 20022128
				local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20022118:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002211c:	f0730024 	sbi	r3, r19, 36
				cpt = local_FIFO_SIZE;
20022120:	e0730024 	lbui	r3, r19, 36
20022124:	f0730022 	sbi	r3, r19, 34
		res[0] = 0;
		if (cpt == 0) {
			local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
			cpt = local_FIFO_SIZE;
		}
		while (nb_v > cpt) {
20022128:	e093001c 	lbui	r4, r19, 28
2002212c:	e0730022 	lbui	r3, r19, 34
20022130:	16441803 	cmpu	r18, r4, r3
20022134:	bc52fef0 	blti	r18, -272		// 20022024
			if (cpt == 0) {
				local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
				cpt = local_FIFO_SIZE;
			}
		}
		cpt = cpt - nb_v;
20022138:	e0930022 	lbui	r4, r19, 34
2002213c:	e073001c 	lbui	r3, r19, 28
20022140:	14632000 	rsubk	r3, r3, r4
20022144:	f0730022 	sbi	r3, r19, 34
		tmp_res0 = res[0];
20022148:	e8730050 	lwi	r3, r19, 80
2002214c:	e8630000 	lwi	r3, r3, 0
20022150:	f8730034 	swi	r3, r19, 52
		tmp_fifo0 = fifo[idx];
20022154:	e4730020 	lhui	r3, r19, 32
20022158:	10631800 	addk	r3, r3, r3
2002215c:	e893004c 	lwi	r4, r19, 76
20022160:	10641800 	addk	r3, r4, r3
20022164:	e4630000 	lhui	r3, r3, 0
20022168:	f4730038 	shi	r3, r19, 56
		res[0] = (tmp_res0 << nb_v) + (tmp_fifo0 >> cpt & (1 << nb_v) - 1);
2002216c:	e073001c 	lbui	r3, r19, 28
20022170:	e8930034 	lwi	r4, r19, 52
20022174:	44841c00 	bsll	r4, r4, r3
20022178:	e4b30038 	lhui	r5, r19, 56
2002217c:	e0730022 	lbui	r3, r19, 34
20022180:	44a51a00 	bsra	r5, r5, r3
20022184:	e073001c 	lbui	r3, r19, 28
20022188:	30c00001 	addik	r6, r0, 1
2002218c:	44661c00 	bsll	r3, r6, r3
20022190:	3063ffff 	addik	r3, r3, -1
20022194:	84651800 	and	r3, r5, r3
20022198:	10841800 	addk	r4, r4, r3
2002219c:	e8730050 	lwi	r3, r19, 80
200221a0:	f8830000 	swi	r4, r3, 0
		cptBits = cptBits - nb_v;
200221a4:	e073001c 	lbui	r3, r19, 28
200221a8:	b0000000 	imm	0
200221ac:	a463ffff 	andi	r3, r3, -1
200221b0:	e493001e 	lhui	r4, r19, 30
200221b4:	14632000 	rsubk	r3, r3, r4
200221b8:	f473001e 	shi	r3, r19, 30
		nb_v = 0;
200221bc:	f013001c 	sbi	r0, r19, 28
	}
200221c0:	e9e10000 	lwi	r15, r1, 0
200221c4:	10330000 	addk	r1, r19, r0
200221c8:	ea610040 	lwi	r19, r1, 64
200221cc:	30210044 	addik	r1, r1, 68
200221d0:	b60f0008 	rtsd	r15, 8
200221d4:	80000000 	or	r0, r0, r0

200221d8 <vldFunctions_get_mcbpc>:
	static void vldFunctions_get_mcbpc(i16 fifo[10], i32 res[1], char * name, u8 vop_coding_type) {
200221d8:	3021ffc0 	addik	r1, r1, -64
200221dc:	f9e10000 	swi	r15, r1, 0
200221e0:	fa61003c 	swi	r19, r1, 60
200221e4:	12610000 	addk	r19, r1, r0
200221e8:	f8b30044 	swi	r5, r19, 68
200221ec:	f8d30048 	swi	r6, r19, 72
200221f0:	f8f3004c 	swi	r7, r19, 76
200221f4:	10680000 	addk	r3, r8, r0
200221f8:	f0730050 	sbi	r3, r19, 80
		i32 tmp_res0;
		i16 tmp_mcbpc_inter_table;
		i16 tmp_mcbpc_inter_table0;
		i32 tmp_res1;
	
		local_I_VOP = vldFunctions_I_VOP;
200221fc:	f8130020 	swi	r0, r19, 32
		if (vop_coding_type == local_I_VOP) {
20022200:	e0930050 	lbui	r4, r19, 80
20022204:	e8730020 	lwi	r3, r19, 32
20022208:	88641800 	xor	r3, r4, r3
2002220c:	bc2300a0 	bnei	r3, 160		// 200222ac
			BitstreamReadUtils_showBits(9, fifo, res);
20022210:	30a00009 	addik	r5, r0, 9
20022214:	e8d30044 	lwi	r6, r19, 68
20022218:	e8f30048 	lwi	r7, r19, 72
2002221c:	b9f4fd50 	brlid	r15, -688	// 20021f6c <BitstreamReadUtils_showBits>
20022220:	80000000 	or	r0, r0, r0
			index_replaced = res[0];
20022224:	e8730048 	lwi	r3, r19, 72
20022228:	e8630000 	lwi	r3, r3, 0
2002222c:	f873001c 	swi	r3, r19, 28
			index_replaced = index_replaced >> 3;
20022230:	e873001c 	lwi	r3, r19, 28
20022234:	64630203 	bsrai	r3, r3, 3
20022238:	f873001c 	swi	r3, r19, 28
			tmp_mcbpc_intra_table = vldTables_mcbpc_intra_table[index_replaced][1];
2002223c:	e873001c 	lwi	r3, r19, 28
20022240:	10631800 	addk	r3, r3, r3
20022244:	b0002003 	imm	8195
20022248:	3063bf79 	addik	r3, r3, -16519
2002224c:	e0630000 	lbui	r3, r3, 0
20022250:	f0730024 	sbi	r3, r19, 36
			BitstreamReadUtils_flushBits(tmp_mcbpc_intra_table, fifo);
20022254:	e0730024 	lbui	r3, r19, 36
20022258:	10a30000 	addk	r5, r3, r0
2002225c:	e8d30044 	lwi	r6, r19, 68
20022260:	b9f4fb54 	brlid	r15, -1196	// 20021db4 <BitstreamReadUtils_flushBits>
20022264:	80000000 	or	r0, r0, r0
			tmp_mcbpc_intra_table0 = vldTables_mcbpc_intra_table[index_replaced][0];
20022268:	e873001c 	lwi	r3, r19, 28
2002226c:	10631800 	addk	r3, r3, r3
20022270:	b0002003 	imm	8195
20022274:	3063bf78 	addik	r3, r3, -16520
20022278:	e0630000 	lbui	r3, r3, 0
2002227c:	f0730025 	sbi	r3, r19, 37
			res[0] = tmp_mcbpc_intra_table0;
20022280:	e0730025 	lbui	r3, r19, 37
20022284:	90830060 	sext8	r4, r3
20022288:	e8730048 	lwi	r3, r19, 72
2002228c:	f8830000 	swi	r4, r3, 0
			local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
20022290:	f8130028 	swi	r0, r19, 40
			if (local_DEBUG_PARSER) {
20022294:	e8730028 	lwi	r3, r19, 40
20022298:	bc0300cc 	beqi	r3, 204		// 20022364
				tmp_res = res[0];
2002229c:	e8730048 	lwi	r3, r19, 72
200222a0:	e8630000 	lwi	r3, r3, 0
200222a4:	f873002c 	swi	r3, r19, 44
200222a8:	b80000bc 	bri	188		// 20022364
			}
		} else {
			BitstreamReadUtils_showBits(9, fifo, res);
200222ac:	30a00009 	addik	r5, r0, 9
200222b0:	e8d30044 	lwi	r6, r19, 68
200222b4:	e8f30048 	lwi	r7, r19, 72
200222b8:	b9f4fcb4 	brlid	r15, -844	// 20021f6c <BitstreamReadUtils_showBits>
200222bc:	80000000 	or	r0, r0, r0
			tmp_res0 = res[0];
200222c0:	e8730048 	lwi	r3, r19, 72
200222c4:	e8630000 	lwi	r3, r3, 0
200222c8:	f8730030 	swi	r3, r19, 48
			if (tmp_res0 < 256) {
200222cc:	e8930030 	lwi	r4, r19, 48
200222d0:	306000ff 	addik	r3, r0, 255
200222d4:	16441801 	cmp	r18, r4, r3
200222d8:	bc520014 	blti	r18, 20		// 200222ec
				index_replaced = res[0];
200222dc:	e8730048 	lwi	r3, r19, 72
200222e0:	e8630000 	lwi	r3, r3, 0
200222e4:	f873001c 	swi	r3, r19, 28
200222e8:	b800000c 	bri	12		// 200222f4
			} else {
				index_replaced = 256;
200222ec:	30600100 	addik	r3, r0, 256
200222f0:	f873001c 	swi	r3, r19, 28
			}
			tmp_mcbpc_inter_table = vldTables_mcbpc_inter_table[index_replaced][1];
200222f4:	e873001c 	lwi	r3, r19, 28
200222f8:	64630402 	bslli	r3, r3, 2
200222fc:	b0002003 	imm	8195
20022300:	3063bffa 	addik	r3, r3, -16390
20022304:	e4630000 	lhui	r3, r3, 0
20022308:	f4730034 	shi	r3, r19, 52
			BitstreamReadUtils_flushBits(tmp_mcbpc_inter_table, fifo);
2002230c:	e4730034 	lhui	r3, r19, 52
20022310:	a46300ff 	andi	r3, r3, 255
20022314:	10a30000 	addk	r5, r3, r0
20022318:	e8d30044 	lwi	r6, r19, 68
2002231c:	b9f4fa98 	brlid	r15, -1384	// 20021db4 <BitstreamReadUtils_flushBits>
20022320:	80000000 	or	r0, r0, r0
			tmp_mcbpc_inter_table0 = vldTables_mcbpc_inter_table[index_replaced][0];
20022324:	e873001c 	lwi	r3, r19, 28
20022328:	64630402 	bslli	r3, r3, 2
2002232c:	b0002003 	imm	8195
20022330:	3063bff8 	addik	r3, r3, -16392
20022334:	e4630000 	lhui	r3, r3, 0
20022338:	f4730036 	shi	r3, r19, 54
			res[0] = tmp_mcbpc_inter_table0;
2002233c:	e4730036 	lhui	r3, r19, 54
20022340:	90830061 	sext16	r4, r3
20022344:	e8730048 	lwi	r3, r19, 72
20022348:	f8830000 	swi	r4, r3, 0
			local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
2002234c:	f8130028 	swi	r0, r19, 40
			if (local_DEBUG_PARSER) {
20022350:	e8730028 	lwi	r3, r19, 40
20022354:	bc030010 	beqi	r3, 16		// 20022364
				tmp_res1 = res[0];
20022358:	e8730048 	lwi	r3, r19, 72
2002235c:	e8630000 	lwi	r3, r3, 0
20022360:	f8730038 	swi	r3, r19, 56
			}
		}
	}
20022364:	e9e10000 	lwi	r15, r1, 0
20022368:	10330000 	addk	r1, r19, r0
2002236c:	ea61003c 	lwi	r19, r1, 60
20022370:	30210040 	addik	r1, r1, 64
20022374:	b60f0008 	rtsd	r15, 8
20022378:	80000000 	or	r0, r0, r0

2002237c <vldFunctions_get_cbpy>:
	static void vldFunctions_get_cbpy(i16 fifo[10], i32 res[1], char * name, i32 intra) {
2002237c:	3021ffcc 	addik	r1, r1, -52
20022380:	f9e10000 	swi	r15, r1, 0
20022384:	fa610030 	swi	r19, r1, 48
20022388:	12610000 	addk	r19, r1, r0
2002238c:	f8b30038 	swi	r5, r19, 56
20022390:	f8d3003c 	swi	r6, r19, 60
20022394:	f8f30040 	swi	r7, r19, 64
20022398:	f9130044 	swi	r8, r19, 68
		i8 tmp_cbpy_table0;
		i32 tmp_res;
		i32 local_DEBUG_PARSER;
		i32 tmp_res0;
	
		BitstreamReadUtils_showBits(6, fifo, res);
2002239c:	30a00006 	addik	r5, r0, 6
200223a0:	e8d30038 	lwi	r6, r19, 56
200223a4:	e8f3003c 	lwi	r7, r19, 60
200223a8:	b9f4fbc4 	brlid	r15, -1084	// 20021f6c <BitstreamReadUtils_showBits>
200223ac:	80000000 	or	r0, r0, r0
		index_replaced = res[0];
200223b0:	e873003c 	lwi	r3, r19, 60
200223b4:	e8630000 	lwi	r3, r3, 0
200223b8:	f873001c 	swi	r3, r19, 28
		tmp_cbpy_table = vldTables_cbpy_table[index_replaced][1];
200223bc:	e873001c 	lwi	r3, r19, 28
200223c0:	10631800 	addk	r3, r3, r3
200223c4:	b0002003 	imm	8195
200223c8:	3063c3fd 	addik	r3, r3, -15363
200223cc:	e0630000 	lbui	r3, r3, 0
200223d0:	f0730020 	sbi	r3, r19, 32
		BitstreamReadUtils_flushBits(tmp_cbpy_table, fifo);
200223d4:	e0730020 	lbui	r3, r19, 32
200223d8:	10a30000 	addk	r5, r3, r0
200223dc:	e8d30038 	lwi	r6, r19, 56
200223e0:	b9f4f9d4 	brlid	r15, -1580	// 20021db4 <BitstreamReadUtils_flushBits>
200223e4:	80000000 	or	r0, r0, r0
		tmp_cbpy_table0 = vldTables_cbpy_table[index_replaced][0];
200223e8:	e873001c 	lwi	r3, r19, 28
200223ec:	10631800 	addk	r3, r3, r3
200223f0:	b0002003 	imm	8195
200223f4:	3063c3fc 	addik	r3, r3, -15364
200223f8:	e0630000 	lbui	r3, r3, 0
200223fc:	f0730021 	sbi	r3, r19, 33
		res[0] = tmp_cbpy_table0;
20022400:	e0730021 	lbui	r3, r19, 33
20022404:	90830060 	sext8	r4, r3
20022408:	e873003c 	lwi	r3, r19, 60
2002240c:	f8830000 	swi	r4, r3, 0
		if (!intra) {
20022410:	e8730044 	lwi	r3, r19, 68
20022414:	bc230024 	bnei	r3, 36		// 20022438
			tmp_res = res[0];
20022418:	e873003c 	lwi	r3, r19, 60
2002241c:	e8630000 	lwi	r3, r3, 0
20022420:	f8730024 	swi	r3, r19, 36
			res[0] = 15 - tmp_res;
20022424:	e8730024 	lwi	r3, r19, 36
20022428:	30a0000f 	addik	r5, r0, 15
2002242c:	14832800 	rsubk	r4, r3, r5
20022430:	e873003c 	lwi	r3, r19, 60
20022434:	f8830000 	swi	r4, r3, 0
		}
		local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
20022438:	f8130028 	swi	r0, r19, 40
		if (local_DEBUG_PARSER) {
2002243c:	e8730028 	lwi	r3, r19, 40
20022440:	bc030010 	beqi	r3, 16		// 20022450
			tmp_res0 = res[0];
20022444:	e873003c 	lwi	r3, r19, 60
20022448:	e8630000 	lwi	r3, r3, 0
2002244c:	f873002c 	swi	r3, r19, 44
		}
	}
20022450:	e9e10000 	lwi	r15, r1, 0
20022454:	10330000 	addk	r1, r19, r0
20022458:	ea610030 	lwi	r19, r1, 48
2002245c:	30210034 	addik	r1, r1, 52
20022460:	b60f0008 	rtsd	r15, 8
20022464:	80000000 	or	r0, r0, r0

20022468 <vldFunctions_get_dc_size_lum>:
	static void vldFunctions_get_dc_size_lum(i16 fifo[10], i32 res[1], char * name) {
20022468:	3021ffc8 	addik	r1, r1, -56
2002246c:	f9e10000 	swi	r15, r1, 0
20022470:	fa610034 	swi	r19, r1, 52
20022474:	12610000 	addk	r19, r1, r0
20022478:	f8b3003c 	swi	r5, r19, 60
2002247c:	f8d30040 	swi	r6, r19, 64
20022480:	f8f30044 	swi	r7, r19, 68
		i8 tmp_dc_lum_tab;
		i8 tmp_dc_lum_tab0;
		i32 local_DEBUG_PARSER;
		i32 tmp_res;
	
		valEnd = 0;
20022484:	f8130024 	swi	r0, r19, 36
		BitstreamReadUtils_showBits(11, fifo, res);
20022488:	30a0000b 	addik	r5, r0, 11
2002248c:	e8d3003c 	lwi	r6, r19, 60
20022490:	e8f30040 	lwi	r7, r19, 64
20022494:	b9f4fad8 	brlid	r15, -1320	// 20021f6c <BitstreamReadUtils_showBits>
20022498:	80000000 	or	r0, r0, r0
		code = res[0];
2002249c:	e8730040 	lwi	r3, r19, 64
200224a0:	e8630000 	lwi	r3, r3, 0
200224a4:	f873001c 	swi	r3, r19, 28
		val = 11;
200224a8:	3060000b 	addik	r3, r0, 11
200224ac:	f8730020 	swi	r3, r19, 32
		while (val > 3 && !valEnd) {
200224b0:	b800004c 	bri	76		// 200224fc
			if (code == 1) {
200224b4:	e873001c 	lwi	r3, r19, 28
200224b8:	a8630001 	xori	r3, r3, 1
200224bc:	bc230028 	bnei	r3, 40		// 200224e4
				BitstreamReadUtils_flushBits(val, fifo);
200224c0:	e8730020 	lwi	r3, r19, 32
200224c4:	a46300ff 	andi	r3, r3, 255
200224c8:	10a30000 	addk	r5, r3, r0
200224cc:	e8d3003c 	lwi	r6, r19, 60
200224d0:	b9f4f8e4 	brlid	r15, -1820	// 20021db4 <BitstreamReadUtils_flushBits>
200224d4:	80000000 	or	r0, r0, r0
				valEnd = 1;
200224d8:	30600001 	addik	r3, r0, 1
200224dc:	f8730024 	swi	r3, r19, 36
200224e0:	b800001c 	bri	28		// 200224fc
			} else {
				code = code >> 1;
200224e4:	e873001c 	lwi	r3, r19, 28
200224e8:	90630001 	sra	r3, r3
200224ec:	f873001c 	swi	r3, r19, 28
				val = val - 1;
200224f0:	e8730020 	lwi	r3, r19, 32
200224f4:	3063ffff 	addik	r3, r3, -1
200224f8:	f8730020 	swi	r3, r19, 32
	
		valEnd = 0;
		BitstreamReadUtils_showBits(11, fifo, res);
		code = res[0];
		val = 11;
		while (val > 3 && !valEnd) {
200224fc:	e8930020 	lwi	r4, r19, 32
20022500:	30600003 	addik	r3, r0, 3
20022504:	16441801 	cmp	r18, r4, r3
20022508:	bcb2000c 	bgei	r18, 12		// 20022514
2002250c:	e8730024 	lwi	r3, r19, 36
20022510:	bc03ffa4 	beqi	r3, -92		// 200224b4
			} else {
				code = code >> 1;
				val = val - 1;
			}
		}
		if (valEnd) {
20022514:	e8730024 	lwi	r3, r19, 36
20022518:	bc030018 	beqi	r3, 24		// 20022530
			res[0] = val + 1;
2002251c:	e8730020 	lwi	r3, r19, 32
20022520:	30830001 	addik	r4, r3, 1
20022524:	e8730040 	lwi	r3, r19, 64
20022528:	f8830000 	swi	r4, r3, 0
2002252c:	b8000058 	bri	88		// 20022584
		} else {
			tmp_dc_lum_tab = vldTables_dc_lum_tab[code][1];
20022530:	e873001c 	lwi	r3, r19, 28
20022534:	10631800 	addk	r3, r3, r3
20022538:	b0002003 	imm	8195
2002253c:	3063c47d 	addik	r3, r3, -15235
20022540:	e0630000 	lbui	r3, r3, 0
20022544:	f0730028 	sbi	r3, r19, 40
			BitstreamReadUtils_flushBits(tmp_dc_lum_tab, fifo);
20022548:	e0730028 	lbui	r3, r19, 40
2002254c:	10a30000 	addk	r5, r3, r0
20022550:	e8d3003c 	lwi	r6, r19, 60
20022554:	b9f4f860 	brlid	r15, -1952	// 20021db4 <BitstreamReadUtils_flushBits>
20022558:	80000000 	or	r0, r0, r0
			tmp_dc_lum_tab0 = vldTables_dc_lum_tab[code][0];
2002255c:	e873001c 	lwi	r3, r19, 28
20022560:	10631800 	addk	r3, r3, r3
20022564:	b0002003 	imm	8195
20022568:	3063c47c 	addik	r3, r3, -15236
2002256c:	e0630000 	lbui	r3, r3, 0
20022570:	f0730029 	sbi	r3, r19, 41
			res[0] = tmp_dc_lum_tab0;
20022574:	e0730029 	lbui	r3, r19, 41
20022578:	90830060 	sext8	r4, r3
2002257c:	e8730040 	lwi	r3, r19, 64
20022580:	f8830000 	swi	r4, r3, 0
		}
		local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
20022584:	f813002c 	swi	r0, r19, 44
		if (local_DEBUG_PARSER) {
20022588:	e873002c 	lwi	r3, r19, 44
2002258c:	bc030010 	beqi	r3, 16		// 2002259c
			tmp_res = res[0];
20022590:	e8730040 	lwi	r3, r19, 64
20022594:	e8630000 	lwi	r3, r3, 0
20022598:	f8730030 	swi	r3, r19, 48
		}
	}
2002259c:	e9e10000 	lwi	r15, r1, 0
200225a0:	10330000 	addk	r1, r19, r0
200225a4:	ea610034 	lwi	r19, r1, 52
200225a8:	30210038 	addik	r1, r1, 56
200225ac:	b60f0008 	rtsd	r15, 8
200225b0:	80000000 	or	r0, r0, r0

200225b4 <vldFunctions_get_dc_size_chrom>:
	static void vldFunctions_get_dc_size_chrom(i16 fifo[10], i32 res[1], char * name) {
200225b4:	3021ffc8 	addik	r1, r1, -56
200225b8:	f9e10000 	swi	r15, r1, 0
200225bc:	fa610034 	swi	r19, r1, 52
200225c0:	12610000 	addk	r19, r1, r0
200225c4:	f8b3003c 	swi	r5, r19, 60
200225c8:	f8d30040 	swi	r6, r19, 64
200225cc:	f8f30044 	swi	r7, r19, 68
		i32 valEnd;
		i32 tmp_res;
		i32 local_DEBUG_PARSER;
		i32 tmp_res0;
	
		valEnd = 0;
200225d0:	f8130024 	swi	r0, r19, 36
		BitstreamReadUtils_showBits(12, fifo, res);
200225d4:	30a0000c 	addik	r5, r0, 12
200225d8:	e8d3003c 	lwi	r6, r19, 60
200225dc:	e8f30040 	lwi	r7, r19, 64
200225e0:	b9f4f98c 	brlid	r15, -1652	// 20021f6c <BitstreamReadUtils_showBits>
200225e4:	80000000 	or	r0, r0, r0
		code = res[0];
200225e8:	e8730040 	lwi	r3, r19, 64
200225ec:	e8630000 	lwi	r3, r3, 0
200225f0:	f873001c 	swi	r3, r19, 28
		val = 12;
200225f4:	3060000c 	addik	r3, r0, 12
200225f8:	f8730020 	swi	r3, r19, 32
		while (val > 2 && !valEnd) {
200225fc:	b800004c 	bri	76		// 20022648
			if (code == 1) {
20022600:	e873001c 	lwi	r3, r19, 28
20022604:	a8630001 	xori	r3, r3, 1
20022608:	bc230028 	bnei	r3, 40		// 20022630
				BitstreamReadUtils_flushBits(val, fifo);
2002260c:	e8730020 	lwi	r3, r19, 32
20022610:	a46300ff 	andi	r3, r3, 255
20022614:	10a30000 	addk	r5, r3, r0
20022618:	e8d3003c 	lwi	r6, r19, 60
2002261c:	b9f4f798 	brlid	r15, -2152	// 20021db4 <BitstreamReadUtils_flushBits>
20022620:	80000000 	or	r0, r0, r0
				valEnd = 1;
20022624:	30600001 	addik	r3, r0, 1
20022628:	f8730024 	swi	r3, r19, 36
2002262c:	b800001c 	bri	28		// 20022648
			} else {
				code = code >> 1;
20022630:	e873001c 	lwi	r3, r19, 28
20022634:	90630001 	sra	r3, r3
20022638:	f873001c 	swi	r3, r19, 28
				val = val - 1;
2002263c:	e8730020 	lwi	r3, r19, 32
20022640:	3063ffff 	addik	r3, r3, -1
20022644:	f8730020 	swi	r3, r19, 32
	
		valEnd = 0;
		BitstreamReadUtils_showBits(12, fifo, res);
		code = res[0];
		val = 12;
		while (val > 2 && !valEnd) {
20022648:	e8930020 	lwi	r4, r19, 32
2002264c:	30600002 	addik	r3, r0, 2
20022650:	16441801 	cmp	r18, r4, r3
20022654:	bcb2000c 	bgei	r18, 12		// 20022660
20022658:	e8730024 	lwi	r3, r19, 36
2002265c:	bc03ffa4 	beqi	r3, -92		// 20022600
			} else {
				code = code >> 1;
				val = val - 1;
			}
		}
		if (valEnd) {
20022660:	e8730024 	lwi	r3, r19, 36
20022664:	bc030014 	beqi	r3, 20		// 20022678
			res[0] = val;
20022668:	e8730040 	lwi	r3, r19, 64
2002266c:	e8930020 	lwi	r4, r19, 32
20022670:	f8830000 	swi	r4, r3, 0
20022674:	b8000038 	bri	56		// 200226ac
		} else {
			BitstreamReadUtils_getBits(2, fifo, res);
20022678:	30a00002 	addik	r5, r0, 2
2002267c:	e8d3003c 	lwi	r6, r19, 60
20022680:	e8f30040 	lwi	r7, r19, 64
20022684:	b9f4f7b4 	brlid	r15, -2124	// 20021e38 <BitstreamReadUtils_getBits>
20022688:	80000000 	or	r0, r0, r0
			tmp_res = res[0];
2002268c:	e8730040 	lwi	r3, r19, 64
20022690:	e8630000 	lwi	r3, r3, 0
20022694:	f8730028 	swi	r3, r19, 40
			res[0] = 3 - tmp_res;
20022698:	e8730028 	lwi	r3, r19, 40
2002269c:	30a00003 	addik	r5, r0, 3
200226a0:	14832800 	rsubk	r4, r3, r5
200226a4:	e8730040 	lwi	r3, r19, 64
200226a8:	f8830000 	swi	r4, r3, 0
		}
		local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
200226ac:	f813002c 	swi	r0, r19, 44
		if (local_DEBUG_PARSER) {
200226b0:	e873002c 	lwi	r3, r19, 44
200226b4:	bc030010 	beqi	r3, 16		// 200226c4
			tmp_res0 = res[0];
200226b8:	e8730040 	lwi	r3, r19, 64
200226bc:	e8630000 	lwi	r3, r3, 0
200226c0:	f8730030 	swi	r3, r19, 48
		}
	}
200226c4:	e9e10000 	lwi	r15, r1, 0
200226c8:	10330000 	addk	r1, r19, r0
200226cc:	ea610034 	lwi	r19, r1, 52
200226d0:	30210038 	addik	r1, r1, 56
200226d4:	b60f0008 	rtsd	r15, 8
200226d8:	80000000 	or	r0, r0, r0

200226dc <vldFunctions_get_dc_dif>:
	static void vldFunctions_get_dc_dif(i16 fifo[10], i32 res[1], char * name, i16 dc_size) {
200226dc:	3021ffcc 	addik	r1, r1, -52
200226e0:	f9e10000 	swi	r15, r1, 0
200226e4:	fa610030 	swi	r19, r1, 48
200226e8:	12610000 	addk	r19, r1, r0
200226ec:	f8b30038 	swi	r5, r19, 56
200226f0:	f8d3003c 	swi	r6, r19, 60
200226f4:	f8f30040 	swi	r7, r19, 64
200226f8:	10680000 	addk	r3, r8, r0
200226fc:	f4730044 	shi	r3, r19, 68
		i32 tmp_res;
		i32 tmp_res0;
		i32 local_DEBUG_PARSER;
		i32 tmp_res1;
	
		BitstreamReadUtils_vld_u(dc_size, fifo, res);
20022700:	e4730044 	lhui	r3, r19, 68
20022704:	a46300ff 	andi	r3, r3, 255
20022708:	10a30000 	addk	r5, r3, r0
2002270c:	e8d30038 	lwi	r6, r19, 56
20022710:	e8f3003c 	lwi	r7, r19, 60
20022714:	b9f4f79c 	brlid	r15, -2148	// 20021eb0 <BitstreamReadUtils_vld_u>
20022718:	80000000 	or	r0, r0, r0
		tmp_res = res[0];
2002271c:	e873003c 	lwi	r3, r19, 60
20022720:	e8630000 	lwi	r3, r3, 0
20022724:	f873001c 	swi	r3, r19, 28
		msb = tmp_res >> (dc_size - 1);
20022728:	e4730044 	lhui	r3, r19, 68
2002272c:	90630061 	sext16	r3, r3
20022730:	3063ffff 	addik	r3, r3, -1
20022734:	e893001c 	lwi	r4, r19, 28
20022738:	44641a00 	bsra	r3, r4, r3
2002273c:	f8730020 	swi	r3, r19, 32
		if (msb == 0) {
20022740:	e8730020 	lwi	r3, r19, 32
20022744:	bc230038 	bnei	r3, 56		// 2002277c
			tmp_res0 = res[0];
20022748:	e873003c 	lwi	r3, r19, 60
2002274c:	e8630000 	lwi	r3, r3, 0
20022750:	f8730024 	swi	r3, r19, 36
			res[0] = -1 * (tmp_res0 ^ (1 << dc_size) - 1);
20022754:	e4730044 	lhui	r3, r19, 68
20022758:	90630061 	sext16	r3, r3
2002275c:	30800001 	addik	r4, r0, 1
20022760:	44641c00 	bsll	r3, r4, r3
20022764:	3083ffff 	addik	r4, r3, -1
20022768:	e8730024 	lwi	r3, r19, 36
2002276c:	88641800 	xor	r3, r4, r3
20022770:	14830000 	rsubk	r4, r3, r0
20022774:	e873003c 	lwi	r3, r19, 60
20022778:	f8830000 	swi	r4, r3, 0
		}
		local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
2002277c:	f8130028 	swi	r0, r19, 40
		if (local_DEBUG_PARSER) {
20022780:	e8730028 	lwi	r3, r19, 40
20022784:	bc030010 	beqi	r3, 16		// 20022794
			tmp_res1 = res[0];
20022788:	e873003c 	lwi	r3, r19, 60
2002278c:	e8630000 	lwi	r3, r3, 0
20022790:	f873002c 	swi	r3, r19, 44
		}
	}
20022794:	e9e10000 	lwi	r15, r1, 0
20022798:	10330000 	addk	r1, r19, r0
2002279c:	ea610030 	lwi	r19, r1, 48
200227a0:	30210034 	addik	r1, r1, 52
200227a4:	b60f0008 	rtsd	r15, 8
200227a8:	80000000 	or	r0, r0, r0

200227ac <vldFunctions_GET_BITS>:
	static u32 vldFunctions_GET_BITS(u32 cache, i32 n) {
200227ac:	3021fff8 	addik	r1, r1, -8
200227b0:	fa610004 	swi	r19, r1, 4
200227b4:	12610000 	addk	r19, r1, r0
200227b8:	f8b3000c 	swi	r5, r19, 12
200227bc:	f8d30010 	swi	r6, r19, 16
	
		return cache >> (32 - n);
200227c0:	e8730010 	lwi	r3, r19, 16
200227c4:	30800020 	addik	r4, r0, 32	// 20 <_vector_hw_exception>
200227c8:	14632000 	rsubk	r3, r3, r4
200227cc:	e893000c 	lwi	r4, r19, 12
200227d0:	44641800 	bsrl	r3, r4, r3
	}
200227d4:	10330000 	addk	r1, r19, r0
200227d8:	ea610004 	lwi	r19, r1, 4
200227dc:	30210008 	addik	r1, r1, 8
200227e0:	b60f0008 	rtsd	r15, 8
200227e4:	80000000 	or	r0, r0, r0

200227e8 <vldFunctions_get_coeff>:
	static void vldFunctions_get_coeff(i16 fifo[10], u32 res[1], char * name, i32 is_intra, i32 last[1], i8 run[1], i8 level[1]) {
200227e8:	3021ff30 	addik	r1, r1, -208
200227ec:	f9e10000 	swi	r15, r1, 0
200227f0:	fa6100cc 	swi	r19, r1, 204
200227f4:	12610000 	addk	r19, r1, r0
200227f8:	f8b300d4 	swi	r5, r19, 212
200227fc:	f8d300d8 	swi	r6, r19, 216
20022800:	f8f300dc 	swi	r7, r19, 220
20022804:	f91300e0 	swi	r8, r19, 224
20022808:	f93300e4 	swi	r9, r19, 228
2002280c:	f95300e8 	swi	r10, r19, 232
		i8 tmp_run1;
		i8 tmp_level6;
		i32 tmp_last1;
		u8 tmp_if1;
	
		if (is_intra) {
20022810:	e87300e0 	lwi	r3, r19, 224
20022814:	bc030010 	beqi	r3, 16		// 20022824
			intra = 1;
20022818:	30600001 	addik	r3, r0, 1
2002281c:	f073001c 	sbi	r3, r19, 28
20022820:	b8000008 	bri	8		// 20022828
		} else {
			intra = 0;
20022824:	f013001c 	sbi	r0, r19, 28
		}
		skip[0] = 1;
20022828:	30600001 	addik	r3, r0, 1
2002282c:	f87300c0 	swi	r3, r19, 192
		skip[1] = 1;
20022830:	30600001 	addik	r3, r0, 1
20022834:	f87300c4 	swi	r3, r19, 196
		skip[2] = 2;
20022838:	30600002 	addik	r3, r0, 2
2002283c:	f87300c8 	swi	r3, r19, 200
		BitstreamReadUtils_showBits(32, fifo, res);
20022840:	30a00020 	addik	r5, r0, 32	// 20 <_vector_hw_exception>
20022844:	e8d300d4 	lwi	r6, r19, 212
20022848:	e8f300d8 	lwi	r7, r19, 216
2002284c:	b9f4f720 	brlid	r15, -2272	// 20021f6c <BitstreamReadUtils_showBits>
20022850:	80000000 	or	r0, r0, r0
		cache = res[0];
20022854:	e87300d8 	lwi	r3, r19, 216
20022858:	e8630000 	lwi	r3, r3, 0
2002285c:	f8730020 	swi	r3, r19, 32
		tmp_GET_BITS = vldFunctions_GET_BITS(cache, 7);
20022860:	e8b30020 	lwi	r5, r19, 32
20022864:	30c00007 	addik	r6, r0, 7
20022868:	b9f4ff44 	brlid	r15, -188	// 200227ac <vldFunctions_GET_BITS>
2002286c:	80000000 	or	r0, r0, r0
20022870:	f8730024 	swi	r3, r19, 36
		local_ESCAPE = vldTables_ESCAPE;
20022874:	30600003 	addik	r3, r0, 3
20022878:	f8730028 	swi	r3, r19, 40
		if (tmp_GET_BITS != local_ESCAPE) {
2002287c:	e8930028 	lwi	r4, r19, 40
20022880:	e8730024 	lwi	r3, r19, 36
20022884:	88641800 	xor	r3, r4, r3
20022888:	bc0301e0 	beqi	r3, 480		// 20022a68
			tmp_GET_BITS0 = vldFunctions_GET_BITS(cache, 12);
2002288c:	e8b30020 	lwi	r5, r19, 32
20022890:	30c0000c 	addik	r6, r0, 12
20022894:	b9f4ff18 	brlid	r15, -232	// 200227ac <vldFunctions_GET_BITS>
20022898:	80000000 	or	r0, r0, r0
2002289c:	f873002c 	swi	r3, r19, 44
			tmp_DCT3D = vldTables_DCT3D[intra][tmp_GET_BITS0][1];
200228a0:	e073001c 	lbui	r3, r19, 28
200228a4:	6483040c 	bslli	r4, r3, 12
200228a8:	e873002c 	lwi	r3, r19, 44
200228ac:	10641800 	addk	r3, r4, r3
200228b0:	64630402 	bslli	r3, r3, 2
200228b4:	b0002003 	imm	8195
200228b8:	3063c48d 	addik	r3, r3, -15219
200228bc:	e0630000 	lbui	r3, r3, 0
200228c0:	f0730030 	sbi	r3, r19, 48
			last[0] = tmp_DCT3D == 1;
200228c4:	e0930030 	lbui	r4, r19, 48
200228c8:	30600001 	addik	r3, r0, 1
200228cc:	88641c00 	pcmpeq	r3, r4, r3
200228d0:	a46300ff 	andi	r3, r3, 255
200228d4:	10830000 	addk	r4, r3, r0
200228d8:	e87300e4 	lwi	r3, r19, 228
200228dc:	f8830000 	swi	r4, r3, 0
			tmp_GET_BITS1 = vldFunctions_GET_BITS(cache, 12);
200228e0:	e8b30020 	lwi	r5, r19, 32
200228e4:	30c0000c 	addik	r6, r0, 12
200228e8:	b9f4fec4 	brlid	r15, -316	// 200227ac <vldFunctions_GET_BITS>
200228ec:	80000000 	or	r0, r0, r0
200228f0:	f8730034 	swi	r3, r19, 52
			tmp_DCT3D0 = vldTables_DCT3D[intra][tmp_GET_BITS1][2];
200228f4:	e073001c 	lbui	r3, r19, 28
200228f8:	6483040c 	bslli	r4, r3, 12
200228fc:	e8730034 	lwi	r3, r19, 52
20022900:	10641800 	addk	r3, r4, r3
20022904:	64630402 	bslli	r3, r3, 2
20022908:	b0002003 	imm	8195
2002290c:	3063c48e 	addik	r3, r3, -15218
20022910:	e0630000 	lbui	r3, r3, 0
20022914:	f0730038 	sbi	r3, r19, 56
			run[0] = tmp_DCT3D0;
20022918:	e0730038 	lbui	r3, r19, 56
2002291c:	90830060 	sext8	r4, r3
20022920:	e87300e8 	lwi	r3, r19, 232
20022924:	f0830000 	sbi	r4, r3, 0
			tmp_GET_BITS2 = vldFunctions_GET_BITS(cache, 12);
20022928:	e8b30020 	lwi	r5, r19, 32
2002292c:	30c0000c 	addik	r6, r0, 12
20022930:	b9f4fe7c 	brlid	r15, -388	// 200227ac <vldFunctions_GET_BITS>
20022934:	80000000 	or	r0, r0, r0
20022938:	f873003c 	swi	r3, r19, 60
			tmp_DCT3D1 = vldTables_DCT3D[intra][tmp_GET_BITS2][3];
2002293c:	e073001c 	lbui	r3, r19, 28
20022940:	6483040c 	bslli	r4, r3, 12
20022944:	e873003c 	lwi	r3, r19, 60
20022948:	10641800 	addk	r3, r4, r3
2002294c:	64630402 	bslli	r3, r3, 2
20022950:	b0002003 	imm	8195
20022954:	3063c48f 	addik	r3, r3, -15217
20022958:	e0630000 	lbui	r3, r3, 0
2002295c:	f0730040 	sbi	r3, r19, 64
			level[0] = tmp_DCT3D1;
20022960:	e0730040 	lbui	r3, r19, 64
20022964:	90830060 	sext8	r4, r3
20022968:	e87300ec 	lwi	r3, r19, 236
2002296c:	f0830000 	sbi	r4, r3, 0
			tmp_GET_BITS3 = vldFunctions_GET_BITS(cache, 12);
20022970:	e8b30020 	lwi	r5, r19, 32
20022974:	30c0000c 	addik	r6, r0, 12
20022978:	b9f4fe34 	brlid	r15, -460	// 200227ac <vldFunctions_GET_BITS>
2002297c:	80000000 	or	r0, r0, r0
20022980:	f8730044 	swi	r3, r19, 68
			tmp_DCT3D2 = vldTables_DCT3D[intra][tmp_GET_BITS3][0];
20022984:	e073001c 	lbui	r3, r19, 28
20022988:	6483040c 	bslli	r4, r3, 12
2002298c:	e8730044 	lwi	r3, r19, 68
20022990:	10641800 	addk	r3, r4, r3
20022994:	64630402 	bslli	r3, r3, 2
20022998:	b0002003 	imm	8195
2002299c:	3063c48c 	addik	r3, r3, -15220
200229a0:	e0630000 	lbui	r3, r3, 0
200229a4:	f0730048 	sbi	r3, r19, 72
			BitstreamReadUtils_flushBits(tmp_DCT3D2 + 1, fifo);
200229a8:	e0730048 	lbui	r3, r19, 72
200229ac:	30630001 	addik	r3, r3, 1
200229b0:	a46300ff 	andi	r3, r3, 255
200229b4:	10a30000 	addk	r5, r3, r0
200229b8:	e8d300d4 	lwi	r6, r19, 212
200229bc:	b9f4f3f8 	brlid	r15, -3080	// 20021db4 <BitstreamReadUtils_flushBits>
200229c0:	80000000 	or	r0, r0, r0
			tmp_GET_BITS4 = vldFunctions_GET_BITS(cache, 12);
200229c4:	e8b30020 	lwi	r5, r19, 32
200229c8:	30c0000c 	addik	r6, r0, 12
200229cc:	b9f4fde0 	brlid	r15, -544	// 200227ac <vldFunctions_GET_BITS>
200229d0:	80000000 	or	r0, r0, r0
200229d4:	f873004c 	swi	r3, r19, 76
			tmp_DCT3D3 = vldTables_DCT3D[intra][tmp_GET_BITS4][0];
200229d8:	e073001c 	lbui	r3, r19, 28
200229dc:	6483040c 	bslli	r4, r3, 12
200229e0:	e873004c 	lwi	r3, r19, 76
200229e4:	10641800 	addk	r3, r4, r3
200229e8:	64630402 	bslli	r3, r3, 2
200229ec:	b0002003 	imm	8195
200229f0:	3063c48c 	addik	r3, r3, -15220
200229f4:	e0630000 	lbui	r3, r3, 0
200229f8:	f0730050 	sbi	r3, r19, 80
			tmp_GET_BITS5 = vldFunctions_GET_BITS(cache, tmp_DCT3D3 + 1);
200229fc:	e0730050 	lbui	r3, r19, 80
20022a00:	30630001 	addik	r3, r3, 1
20022a04:	e8b30020 	lwi	r5, r19, 32
20022a08:	10c30000 	addk	r6, r3, r0
20022a0c:	b9f4fda0 	brlid	r15, -608	// 200227ac <vldFunctions_GET_BITS>
20022a10:	80000000 	or	r0, r0, r0
20022a14:	f8730054 	swi	r3, r19, 84
			if ((tmp_GET_BITS5 & 1) == 1) {
20022a18:	e8730054 	lwi	r3, r19, 84
20022a1c:	a4630001 	andi	r3, r3, 1
20022a20:	bc03002c 	beqi	r3, 44		// 20022a4c
				tmp_level = level[0];
20022a24:	e87300ec 	lwi	r3, r19, 236
20022a28:	e0630000 	lbui	r3, r3, 0
20022a2c:	f0730058 	sbi	r3, r19, 88
				level[0] = -tmp_level;
20022a30:	e0730058 	lbui	r3, r19, 88
20022a34:	14630000 	rsubk	r3, r3, r0
20022a38:	a46300ff 	andi	r3, r3, 255
20022a3c:	90830060 	sext8	r4, r3
20022a40:	e87300ec 	lwi	r3, r19, 236
20022a44:	f0830000 	sbi	r4, r3, 0
20022a48:	b8000440 	bri	1088		// 20022e88
			} else {
				tmp_level0 = level[0];
20022a4c:	e87300ec 	lwi	r3, r19, 236
20022a50:	e0630000 	lbui	r3, r3, 0
20022a54:	f0730059 	sbi	r3, r19, 89
				level[0] = tmp_level0;
20022a58:	e87300ec 	lwi	r3, r19, 236
20022a5c:	e0930059 	lbui	r4, r19, 89
20022a60:	f0830000 	sbi	r4, r3, 0
20022a64:	b8000424 	bri	1060		// 20022e88
			}
		} else {
			cache = cache << 7;
20022a68:	e8730020 	lwi	r3, r19, 32
20022a6c:	64630407 	bslli	r3, r3, 7
20022a70:	f8730020 	swi	r3, r19, 32
			mode = vldFunctions_GET_BITS(cache, 2);
20022a74:	e8b30020 	lwi	r5, r19, 32
20022a78:	30c00002 	addik	r6, r0, 2
20022a7c:	b9f4fd30 	brlid	r15, -720	// 200227ac <vldFunctions_GET_BITS>
20022a80:	80000000 	or	r0, r0, r0
20022a84:	f873005c 	swi	r3, r19, 92
			if (mode < 3) {
20022a88:	e893005c 	lwi	r4, r19, 92
20022a8c:	30600002 	addik	r3, r0, 2
20022a90:	16441801 	cmp	r18, r4, r3
20022a94:	bc520330 	blti	r18, 816		// 20022dc4
				tmp_skip = skip[mode];
20022a98:	e873005c 	lwi	r3, r19, 92
20022a9c:	64630402 	bslli	r3, r3, 2
20022aa0:	3093001c 	addik	r4, r19, 28
20022aa4:	10641800 	addk	r3, r4, r3
20022aa8:	306300a4 	addik	r3, r3, 164
20022aac:	e8630000 	lwi	r3, r3, 0
20022ab0:	f8730060 	swi	r3, r19, 96
				cache = cache << tmp_skip;
20022ab4:	e8930020 	lwi	r4, r19, 32
20022ab8:	e8730060 	lwi	r3, r19, 96
20022abc:	44641c00 	bsll	r3, r4, r3
20022ac0:	f8730020 	swi	r3, r19, 32
				tmp_GET_BITS6 = vldFunctions_GET_BITS(cache, 12);
20022ac4:	e8b30020 	lwi	r5, r19, 32
20022ac8:	30c0000c 	addik	r6, r0, 12
20022acc:	b9f4fce0 	brlid	r15, -800	// 200227ac <vldFunctions_GET_BITS>
20022ad0:	80000000 	or	r0, r0, r0
20022ad4:	f8730064 	swi	r3, r19, 100
				tmp_DCT3D4 = vldTables_DCT3D[intra][tmp_GET_BITS6][1];
20022ad8:	e073001c 	lbui	r3, r19, 28
20022adc:	6483040c 	bslli	r4, r3, 12
20022ae0:	e8730064 	lwi	r3, r19, 100
20022ae4:	10641800 	addk	r3, r4, r3
20022ae8:	64630402 	bslli	r3, r3, 2
20022aec:	b0002003 	imm	8195
20022af0:	3063c48d 	addik	r3, r3, -15219
20022af4:	e0630000 	lbui	r3, r3, 0
20022af8:	f0730068 	sbi	r3, r19, 104
				last[0] = tmp_DCT3D4 == 1;
20022afc:	e0930068 	lbui	r4, r19, 104
20022b00:	30600001 	addik	r3, r0, 1
20022b04:	88641c00 	pcmpeq	r3, r4, r3
20022b08:	a46300ff 	andi	r3, r3, 255
20022b0c:	10830000 	addk	r4, r3, r0
20022b10:	e87300e4 	lwi	r3, r19, 228
20022b14:	f8830000 	swi	r4, r3, 0
				tmp_GET_BITS7 = vldFunctions_GET_BITS(cache, 12);
20022b18:	e8b30020 	lwi	r5, r19, 32
20022b1c:	30c0000c 	addik	r6, r0, 12
20022b20:	b9f4fc8c 	brlid	r15, -884	// 200227ac <vldFunctions_GET_BITS>
20022b24:	80000000 	or	r0, r0, r0
20022b28:	f873006c 	swi	r3, r19, 108
				tmp_DCT3D5 = vldTables_DCT3D[intra][tmp_GET_BITS7][2];
20022b2c:	e073001c 	lbui	r3, r19, 28
20022b30:	6483040c 	bslli	r4, r3, 12
20022b34:	e873006c 	lwi	r3, r19, 108
20022b38:	10641800 	addk	r3, r4, r3
20022b3c:	64630402 	bslli	r3, r3, 2
20022b40:	b0002003 	imm	8195
20022b44:	3063c48e 	addik	r3, r3, -15218
20022b48:	e0630000 	lbui	r3, r3, 0
20022b4c:	f0730070 	sbi	r3, r19, 112
				run[0] = tmp_DCT3D5;
20022b50:	e0730070 	lbui	r3, r19, 112
20022b54:	90830060 	sext8	r4, r3
20022b58:	e87300e8 	lwi	r3, r19, 232
20022b5c:	f0830000 	sbi	r4, r3, 0
				tmp_GET_BITS8 = vldFunctions_GET_BITS(cache, 12);
20022b60:	e8b30020 	lwi	r5, r19, 32
20022b64:	30c0000c 	addik	r6, r0, 12
20022b68:	b9f4fc44 	brlid	r15, -956	// 200227ac <vldFunctions_GET_BITS>
20022b6c:	80000000 	or	r0, r0, r0
20022b70:	f8730074 	swi	r3, r19, 116
				tmp_DCT3D6 = vldTables_DCT3D[intra][tmp_GET_BITS8][3];
20022b74:	e073001c 	lbui	r3, r19, 28
20022b78:	6483040c 	bslli	r4, r3, 12
20022b7c:	e8730074 	lwi	r3, r19, 116
20022b80:	10641800 	addk	r3, r4, r3
20022b84:	64630402 	bslli	r3, r3, 2
20022b88:	b0002003 	imm	8195
20022b8c:	3063c48f 	addik	r3, r3, -15217
20022b90:	e0630000 	lbui	r3, r3, 0
20022b94:	f0730078 	sbi	r3, r19, 120
				level[0] = tmp_DCT3D6;
20022b98:	e0730078 	lbui	r3, r19, 120
20022b9c:	90830060 	sext8	r4, r3
20022ba0:	e87300ec 	lwi	r3, r19, 236
20022ba4:	f0830000 	sbi	r4, r3, 0
				if (mode < 2) {
20022ba8:	e893005c 	lwi	r4, r19, 92
20022bac:	30600001 	addik	r3, r0, 1
20022bb0:	16441801 	cmp	r18, r4, r3
20022bb4:	bc520090 	blti	r18, 144		// 20022c44
					tmp_level1 = level[0];
20022bb8:	e87300ec 	lwi	r3, r19, 236
20022bbc:	e0630000 	lbui	r3, r3, 0
20022bc0:	f0730079 	sbi	r3, r19, 121
					tmp_last = last[0];
20022bc4:	e87300e4 	lwi	r3, r19, 228
20022bc8:	e8630000 	lwi	r3, r3, 0
20022bcc:	f873007c 	swi	r3, r19, 124
					if (tmp_last) {
20022bd0:	e873007c 	lwi	r3, r19, 124
20022bd4:	bc030010 	beqi	r3, 16		// 20022be4
						tmp_if = 1;
20022bd8:	30600001 	addik	r3, r0, 1
20022bdc:	f073001d 	sbi	r3, r19, 29
20022be0:	b8000008 	bri	8		// 20022be8
					} else {
						tmp_if = 0;
20022be4:	f013001d 	sbi	r0, r19, 29
					}
					tmp_run = run[0];
20022be8:	e87300e8 	lwi	r3, r19, 232
20022bec:	e0630000 	lbui	r3, r3, 0
20022bf0:	f0730080 	sbi	r3, r19, 128
					tmp_max_level = vldTables_max_level[intra][tmp_if][tmp_run];
20022bf4:	e0b3001c 	lbui	r5, r19, 28
20022bf8:	e093001d 	lbui	r4, r19, 29
20022bfc:	e0730080 	lbui	r3, r19, 128
20022c00:	90630060 	sext8	r3, r3
20022c04:	10a52800 	addk	r5, r5, r5
20022c08:	10852000 	addk	r4, r5, r4
20022c0c:	64840406 	bslli	r4, r4, 6
20022c10:	10641800 	addk	r3, r4, r3
20022c14:	b0002004 	imm	8196
20022c18:	3063448c 	addik	r3, r3, 17548
20022c1c:	e0630000 	lbui	r3, r3, 0
20022c20:	f0730081 	sbi	r3, r19, 129
					level[0] = tmp_level1 + tmp_max_level;
20022c24:	e0930079 	lbui	r4, r19, 121
20022c28:	e0730081 	lbui	r3, r19, 129
20022c2c:	10641800 	addk	r3, r4, r3
20022c30:	a46300ff 	andi	r3, r3, 255
20022c34:	90830060 	sext8	r4, r3
20022c38:	e87300ec 	lwi	r3, r19, 236
20022c3c:	f0830000 	sbi	r4, r3, 0
20022c40:	b8000094 	bri	148		// 20022cd4
				} else {
					tmp_run0 = run[0];
20022c44:	e87300e8 	lwi	r3, r19, 232
20022c48:	e0630000 	lbui	r3, r3, 0
20022c4c:	f0730082 	sbi	r3, r19, 130
					tmp_last0 = last[0];
20022c50:	e87300e4 	lwi	r3, r19, 228
20022c54:	e8630000 	lwi	r3, r3, 0
20022c58:	f8730084 	swi	r3, r19, 132
					if (tmp_last0) {
20022c5c:	e8730084 	lwi	r3, r19, 132
20022c60:	bc030010 	beqi	r3, 16		// 20022c70
						tmp_if0 = 1;
20022c64:	30600001 	addik	r3, r0, 1
20022c68:	f073001e 	sbi	r3, r19, 30
20022c6c:	b8000008 	bri	8		// 20022c74
					} else {
						tmp_if0 = 0;
20022c70:	f013001e 	sbi	r0, r19, 30
					}
					tmp_level2 = level[0];
20022c74:	e87300ec 	lwi	r3, r19, 236
20022c78:	e0630000 	lbui	r3, r3, 0
20022c7c:	f0730088 	sbi	r3, r19, 136
					tmp_max_run = vldTables_max_run[intra][tmp_if0][tmp_level2];
20022c80:	e0b3001c 	lbui	r5, r19, 28
20022c84:	e093001e 	lbui	r4, r19, 30
20022c88:	e0730088 	lbui	r3, r19, 136
20022c8c:	90630060 	sext8	r3, r3
20022c90:	10a52800 	addk	r5, r5, r5
20022c94:	10852000 	addk	r4, r5, r4
20022c98:	64840406 	bslli	r4, r4, 6
20022c9c:	10641800 	addk	r3, r4, r3
20022ca0:	b0002004 	imm	8196
20022ca4:	3063458c 	addik	r3, r3, 17804
20022ca8:	e0630000 	lbui	r3, r3, 0
20022cac:	f0730089 	sbi	r3, r19, 137
					run[0] = tmp_run0 + tmp_max_run + 1;
20022cb0:	e0930082 	lbui	r4, r19, 130
20022cb4:	e0730089 	lbui	r3, r19, 137
20022cb8:	10641800 	addk	r3, r4, r3
20022cbc:	a46300ff 	andi	r3, r3, 255
20022cc0:	30630001 	addik	r3, r3, 1
20022cc4:	a46300ff 	andi	r3, r3, 255
20022cc8:	90830060 	sext8	r4, r3
20022ccc:	e87300e8 	lwi	r3, r19, 232
20022cd0:	f0830000 	sbi	r4, r3, 0
				}
				tmp_GET_BITS9 = vldFunctions_GET_BITS(cache, 12);
20022cd4:	e8b30020 	lwi	r5, r19, 32
20022cd8:	30c0000c 	addik	r6, r0, 12
20022cdc:	b9f4fad0 	brlid	r15, -1328	// 200227ac <vldFunctions_GET_BITS>
20022ce0:	80000000 	or	r0, r0, r0
20022ce4:	f873008c 	swi	r3, r19, 140
				len = vldTables_DCT3D[intra][tmp_GET_BITS9][0];
20022ce8:	e073001c 	lbui	r3, r19, 28
20022cec:	6483040c 	bslli	r4, r3, 12
20022cf0:	e873008c 	lwi	r3, r19, 140
20022cf4:	10641800 	addk	r3, r4, r3
20022cf8:	64630402 	bslli	r3, r3, 2
20022cfc:	b0002003 	imm	8195
20022d00:	3063c48c 	addik	r3, r3, -15220
20022d04:	e0630000 	lbui	r3, r3, 0
20022d08:	f8730090 	swi	r3, r19, 144
				tmp_skip0 = skip[mode];
20022d0c:	e873005c 	lwi	r3, r19, 92
20022d10:	64630402 	bslli	r3, r3, 2
20022d14:	3093001c 	addik	r4, r19, 28
20022d18:	10641800 	addk	r3, r4, r3
20022d1c:	306300a4 	addik	r3, r3, 164
20022d20:	e8630000 	lwi	r3, r3, 0
20022d24:	f8730094 	swi	r3, r19, 148
				BitstreamReadUtils_flushBits(7 + tmp_skip0 + len + 1, fifo);
20022d28:	e8730094 	lwi	r3, r19, 148
20022d2c:	a48300ff 	andi	r4, r3, 255
20022d30:	e8730090 	lwi	r3, r19, 144
20022d34:	a46300ff 	andi	r3, r3, 255
20022d38:	10641800 	addk	r3, r4, r3
20022d3c:	a46300ff 	andi	r3, r3, 255
20022d40:	30630008 	addik	r3, r3, 8
20022d44:	a46300ff 	andi	r3, r3, 255
20022d48:	10a30000 	addk	r5, r3, r0
20022d4c:	e8d300d4 	lwi	r6, r19, 212
20022d50:	b9f4f064 	brlid	r15, -3996	// 20021db4 <BitstreamReadUtils_flushBits>
20022d54:	80000000 	or	r0, r0, r0
				tmp_GET_BITS10 = vldFunctions_GET_BITS(cache, len + 1);
20022d58:	e8730090 	lwi	r3, r19, 144
20022d5c:	30630001 	addik	r3, r3, 1
20022d60:	e8b30020 	lwi	r5, r19, 32
20022d64:	10c30000 	addk	r6, r3, r0
20022d68:	b9f4fa44 	brlid	r15, -1468	// 200227ac <vldFunctions_GET_BITS>
20022d6c:	80000000 	or	r0, r0, r0
20022d70:	f8730098 	swi	r3, r19, 152
				if ((tmp_GET_BITS10 & 1) == 1) {
20022d74:	e8730098 	lwi	r3, r19, 152
20022d78:	a4630001 	andi	r3, r3, 1
20022d7c:	bc03002c 	beqi	r3, 44		// 20022da8
					tmp_level3 = level[0];
20022d80:	e87300ec 	lwi	r3, r19, 236
20022d84:	e0630000 	lbui	r3, r3, 0
20022d88:	f073009c 	sbi	r3, r19, 156
					level[0] = -tmp_level3;
20022d8c:	e073009c 	lbui	r3, r19, 156
20022d90:	14630000 	rsubk	r3, r3, r0
20022d94:	a46300ff 	andi	r3, r3, 255
20022d98:	90830060 	sext8	r4, r3
20022d9c:	e87300ec 	lwi	r3, r19, 236
20022da0:	f0830000 	sbi	r4, r3, 0
20022da4:	b80000e4 	bri	228		// 20022e88
				} else {
					tmp_level4 = level[0];
20022da8:	e87300ec 	lwi	r3, r19, 236
20022dac:	e0630000 	lbui	r3, r3, 0
20022db0:	f073009d 	sbi	r3, r19, 157
					level[0] = tmp_level4;
20022db4:	e87300ec 	lwi	r3, r19, 236
20022db8:	e093009d 	lbui	r4, r19, 157
20022dbc:	f0830000 	sbi	r4, r3, 0
20022dc0:	b80000c8 	bri	200		// 20022e88
				}
			} else {
				cache = cache << 2;
20022dc4:	e8730020 	lwi	r3, r19, 32
20022dc8:	64630402 	bslli	r3, r3, 2
20022dcc:	f8730020 	swi	r3, r19, 32
				tmp_GET_BITS11 = vldFunctions_GET_BITS(cache, 1);
20022dd0:	e8b30020 	lwi	r5, r19, 32
20022dd4:	30c00001 	addik	r6, r0, 1
20022dd8:	b9f4f9d4 	brlid	r15, -1580	// 200227ac <vldFunctions_GET_BITS>
20022ddc:	80000000 	or	r0, r0, r0
20022de0:	f87300a0 	swi	r3, r19, 160
				last[0] = tmp_GET_BITS11 == 1;
20022de4:	e89300a0 	lwi	r4, r19, 160
20022de8:	30600001 	addik	r3, r0, 1
20022dec:	88641c00 	pcmpeq	r3, r4, r3
20022df0:	a46300ff 	andi	r3, r3, 255
20022df4:	10830000 	addk	r4, r3, r0
20022df8:	e87300e4 	lwi	r3, r19, 228
20022dfc:	f8830000 	swi	r4, r3, 0
				tmp_GET_BITS12 = vldFunctions_GET_BITS(cache, 7);
20022e00:	e8b30020 	lwi	r5, r19, 32
20022e04:	30c00007 	addik	r6, r0, 7
20022e08:	b9f4f9a4 	brlid	r15, -1628	// 200227ac <vldFunctions_GET_BITS>
20022e0c:	80000000 	or	r0, r0, r0
20022e10:	f87300a4 	swi	r3, r19, 164
				run[0] = tmp_GET_BITS12 & 63;
20022e14:	e87300a4 	lwi	r3, r19, 164
20022e18:	90630060 	sext8	r3, r3
20022e1c:	a463003f 	andi	r3, r3, 63
20022e20:	90830060 	sext8	r4, r3
20022e24:	e87300e8 	lwi	r3, r19, 232
20022e28:	f0830000 	sbi	r4, r3, 0
				tmp_GET_BITS13 = vldFunctions_GET_BITS(cache, 20);
20022e2c:	e8b30020 	lwi	r5, r19, 32
20022e30:	30c00014 	addik	r6, r0, 20
20022e34:	b9f4f978 	brlid	r15, -1672	// 200227ac <vldFunctions_GET_BITS>
20022e38:	80000000 	or	r0, r0, r0
20022e3c:	f87300a8 	swi	r3, r19, 168
				level[0] = tmp_GET_BITS13 & 4095;
20022e40:	e87300a8 	lwi	r3, r19, 168
20022e44:	90830060 	sext8	r4, r3
20022e48:	e87300ec 	lwi	r3, r19, 236
20022e4c:	f0830000 	sbi	r4, r3, 0
				BitstreamReadUtils_flushBits(30, fifo);
20022e50:	30a0001e 	addik	r5, r0, 30
20022e54:	e8d300d4 	lwi	r6, r19, 212
20022e58:	b9f4ef5c 	brlid	r15, -4260	// 20021db4 <BitstreamReadUtils_flushBits>
20022e5c:	80000000 	or	r0, r0, r0
				tmp_level5 = level[0];
20022e60:	e87300ec 	lwi	r3, r19, 236
20022e64:	e0630000 	lbui	r3, r3, 0
20022e68:	f07300ac 	sbi	r3, r19, 172
				level[0] = (tmp_level5 << 20) >> 20;
20022e6c:	e07300ac 	lbui	r3, r19, 172
20022e70:	90630060 	sext8	r3, r3
20022e74:	64630414 	bslli	r3, r3, 20
20022e78:	64630214 	bsrai	r3, r3, 20
20022e7c:	90830060 	sext8	r4, r3
20022e80:	e87300ec 	lwi	r3, r19, 236
20022e84:	f0830000 	sbi	r4, r3, 0
			}
		}
		local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
20022e88:	f81300b0 	swi	r0, r19, 176
		if (local_DEBUG_PARSER) {
20022e8c:	e87300b0 	lwi	r3, r19, 176
20022e90:	bc030040 	beqi	r3, 64		// 20022ed0
			tmp_run1 = run[0];
20022e94:	e87300e8 	lwi	r3, r19, 232
20022e98:	e0630000 	lbui	r3, r3, 0
20022e9c:	f07300b4 	sbi	r3, r19, 180
			tmp_level6 = level[0];
20022ea0:	e87300ec 	lwi	r3, r19, 236
20022ea4:	e0630000 	lbui	r3, r3, 0
20022ea8:	f07300b5 	sbi	r3, r19, 181
			tmp_last1 = last[0];
20022eac:	e87300e4 	lwi	r3, r19, 228
20022eb0:	e8630000 	lwi	r3, r3, 0
20022eb4:	f87300b8 	swi	r3, r19, 184
			if (tmp_last1) {
20022eb8:	e87300b8 	lwi	r3, r19, 184
20022ebc:	bc030010 	beqi	r3, 16		// 20022ecc
				tmp_if1 = 1;
20022ec0:	30600001 	addik	r3, r0, 1
20022ec4:	f07300bc 	sbi	r3, r19, 188
20022ec8:	b8000008 	bri	8		// 20022ed0
			} else {
				tmp_if1 = 0;
20022ecc:	f01300bc 	sbi	r0, r19, 188
			}
		}
	}
20022ed0:	e9e10000 	lwi	r15, r1, 0
20022ed4:	10330000 	addk	r1, r19, r0
20022ed8:	ea6100cc 	lwi	r19, r1, 204
20022edc:	302100d0 	addik	r1, r1, 208
20022ee0:	b60f0008 	rtsd	r15, 8
20022ee4:	80000000 	or	r0, r0, r0

20022ee8 <vldFunctions_get_mv>:
	static void vldFunctions_get_mv(i16 fifo[10], i32 res[1], char * name) {
20022ee8:	3021ffc8 	addik	r1, r1, -56
20022eec:	f9e10000 	swi	r15, r1, 0
20022ef0:	fa610034 	swi	r19, r1, 52
20022ef4:	12610000 	addk	r19, r1, r0
20022ef8:	f8b3003c 	swi	r5, r19, 60
20022efc:	f8d30040 	swi	r6, r19, 64
20022f00:	f8f30044 	swi	r7, r19, 68
		i8 tmp_TMNMVtab2;
		i8 tmp_TMNMVtab20;
		i32 local_DEBUG_PARSER;
		i32 tmp_res0;
	
		BitstreamReadUtils_vld_u(1, fifo, res);
20022f04:	30a00001 	addik	r5, r0, 1
20022f08:	e8d3003c 	lwi	r6, r19, 60
20022f0c:	e8f30040 	lwi	r7, r19, 64
20022f10:	b9f4efa0 	brlid	r15, -4192	// 20021eb0 <BitstreamReadUtils_vld_u>
20022f14:	80000000 	or	r0, r0, r0
		tmp_res = res[0];
20022f18:	e8730040 	lwi	r3, r19, 64
20022f1c:	e8630000 	lwi	r3, r3, 0
20022f20:	f873001c 	swi	r3, r19, 28
		if (tmp_res == 0) {
20022f24:	e873001c 	lwi	r3, r19, 28
20022f28:	bc230178 	bnei	r3, 376		// 200230a0
			BitstreamReadUtils_showBits(12, fifo, res);
20022f2c:	30a0000c 	addik	r5, r0, 12
20022f30:	e8d3003c 	lwi	r6, r19, 60
20022f34:	e8f30040 	lwi	r7, r19, 64
20022f38:	b9f4f034 	brlid	r15, -4044	// 20021f6c <BitstreamReadUtils_showBits>
20022f3c:	80000000 	or	r0, r0, r0
			index_replaced = res[0];
20022f40:	e8730040 	lwi	r3, r19, 64
20022f44:	e8630000 	lwi	r3, r3, 0
20022f48:	f8730020 	swi	r3, r19, 32
			if (index_replaced >= 512) {
20022f4c:	e8930020 	lwi	r4, r19, 32
20022f50:	306001ff 	addik	r3, r0, 511
20022f54:	16441801 	cmp	r18, r4, r3
20022f58:	bcb2006c 	bgei	r18, 108		// 20022fc4
				index_replaced = (index_replaced >> 8) - 2;
20022f5c:	e8730020 	lwi	r3, r19, 32
20022f60:	64630208 	bsrai	r3, r3, 8
20022f64:	3063fffe 	addik	r3, r3, -2
20022f68:	f8730020 	swi	r3, r19, 32
				tmp_TMNMVtab0 = vldTables_TMNMVtab0[index_replaced][1];
20022f6c:	e8730020 	lwi	r3, r19, 32
20022f70:	10631800 	addk	r3, r3, r3
20022f74:	b0002004 	imm	8196
20022f78:	3063468d 	addik	r3, r3, 18061
20022f7c:	e0630000 	lbui	r3, r3, 0
20022f80:	f0730024 	sbi	r3, r19, 36
				BitstreamReadUtils_flushBits(tmp_TMNMVtab0, fifo);
20022f84:	e0730024 	lbui	r3, r19, 36
20022f88:	10a30000 	addk	r5, r3, r0
20022f8c:	e8d3003c 	lwi	r6, r19, 60
20022f90:	b9f4ee24 	brlid	r15, -4572	// 20021db4 <BitstreamReadUtils_flushBits>
20022f94:	80000000 	or	r0, r0, r0
				tmp_TMNMVtab00 = vldTables_TMNMVtab0[index_replaced][0];
20022f98:	e8730020 	lwi	r3, r19, 32
20022f9c:	10631800 	addk	r3, r3, r3
20022fa0:	b0002004 	imm	8196
20022fa4:	3063468c 	addik	r3, r3, 18060
20022fa8:	e0630000 	lbui	r3, r3, 0
20022fac:	f0730025 	sbi	r3, r19, 37
				res[0] = tmp_TMNMVtab00;
20022fb0:	e0730025 	lbui	r3, r19, 37
20022fb4:	90830060 	sext8	r4, r3
20022fb8:	e8730040 	lwi	r3, r19, 64
20022fbc:	f8830000 	swi	r4, r3, 0
20022fc0:	b80000e8 	bri	232		// 200230a8
			} else {
				if (index_replaced >= 128) {
20022fc4:	e8930020 	lwi	r4, r19, 32
20022fc8:	3060007f 	addik	r3, r0, 127
20022fcc:	16441801 	cmp	r18, r4, r3
20022fd0:	bcb2006c 	bgei	r18, 108		// 2002303c
					index_replaced = (index_replaced >> 2) - 32;
20022fd4:	e8730020 	lwi	r3, r19, 32
20022fd8:	64630202 	bsrai	r3, r3, 2
20022fdc:	3063ffe0 	addik	r3, r3, -32
20022fe0:	f8730020 	swi	r3, r19, 32
					tmp_TMNMVtab1 = vldTables_TMNMVtab1[index_replaced][1];
20022fe4:	e8730020 	lwi	r3, r19, 32
20022fe8:	10631800 	addk	r3, r3, r3
20022fec:	b0002004 	imm	8196
20022ff0:	306346a9 	addik	r3, r3, 18089
20022ff4:	e0630000 	lbui	r3, r3, 0
20022ff8:	f0730026 	sbi	r3, r19, 38
					BitstreamReadUtils_flushBits(tmp_TMNMVtab1, fifo);
20022ffc:	e0730026 	lbui	r3, r19, 38
20023000:	10a30000 	addk	r5, r3, r0
20023004:	e8d3003c 	lwi	r6, r19, 60
20023008:	b9f4edac 	brlid	r15, -4692	// 20021db4 <BitstreamReadUtils_flushBits>
2002300c:	80000000 	or	r0, r0, r0
					tmp_TMNMVtab10 = vldTables_TMNMVtab1[index_replaced][0];
20023010:	e8730020 	lwi	r3, r19, 32
20023014:	10631800 	addk	r3, r3, r3
20023018:	b0002004 	imm	8196
2002301c:	306346a8 	addik	r3, r3, 18088
20023020:	e0630000 	lbui	r3, r3, 0
20023024:	f0730027 	sbi	r3, r19, 39
					res[0] = tmp_TMNMVtab10;
20023028:	e0730027 	lbui	r3, r19, 39
2002302c:	90830060 	sext8	r4, r3
20023030:	e8730040 	lwi	r3, r19, 64
20023034:	f8830000 	swi	r4, r3, 0
20023038:	b8000070 	bri	112		// 200230a8
				} else {
					index_replaced = index_replaced - 4;
2002303c:	e8730020 	lwi	r3, r19, 32
20023040:	3063fffc 	addik	r3, r3, -4
20023044:	f8730020 	swi	r3, r19, 32
					tmp_TMNMVtab2 = vldTables_TMNMVtab2[index_replaced][1];
20023048:	e8730020 	lwi	r3, r19, 32
2002304c:	10631800 	addk	r3, r3, r3
20023050:	b0002004 	imm	8196
20023054:	30634769 	addik	r3, r3, 18281
20023058:	e0630000 	lbui	r3, r3, 0
2002305c:	f0730028 	sbi	r3, r19, 40
					BitstreamReadUtils_flushBits(tmp_TMNMVtab2, fifo);
20023060:	e0730028 	lbui	r3, r19, 40
20023064:	10a30000 	addk	r5, r3, r0
20023068:	e8d3003c 	lwi	r6, r19, 60
2002306c:	b9f4ed48 	brlid	r15, -4792	// 20021db4 <BitstreamReadUtils_flushBits>
20023070:	80000000 	or	r0, r0, r0
					tmp_TMNMVtab20 = vldTables_TMNMVtab2[index_replaced][0];
20023074:	e8730020 	lwi	r3, r19, 32
20023078:	10631800 	addk	r3, r3, r3
2002307c:	b0002004 	imm	8196
20023080:	30634768 	addik	r3, r3, 18280
20023084:	e0630000 	lbui	r3, r3, 0
20023088:	f0730029 	sbi	r3, r19, 41
					res[0] = tmp_TMNMVtab20;
2002308c:	e0730029 	lbui	r3, r19, 41
20023090:	90830060 	sext8	r4, r3
20023094:	e8730040 	lwi	r3, r19, 64
20023098:	f8830000 	swi	r4, r3, 0
2002309c:	b800000c 	bri	12		// 200230a8
				}
			}
		} else {
			res[0] = 0;
200230a0:	e8730040 	lwi	r3, r19, 64
200230a4:	f8030000 	swi	r0, r3, 0
		}
		local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
200230a8:	f813002c 	swi	r0, r19, 44
		if (local_DEBUG_PARSER) {
200230ac:	e873002c 	lwi	r3, r19, 44
200230b0:	bc030010 	beqi	r3, 16		// 200230c0
			tmp_res0 = res[0];
200230b4:	e8730040 	lwi	r3, r19, 64
200230b8:	e8630000 	lwi	r3, r3, 0
200230bc:	f8730030 	swi	r3, r19, 48
		}
	}
200230c0:	e9e10000 	lwi	r15, r1, 0
200230c4:	10330000 	addk	r1, r19, r0
200230c8:	ea610034 	lwi	r19, r1, 52
200230cc:	30210038 	addik	r1, r1, 56
200230d0:	b60f0008 	rtsd	r15, 8
200230d4:	80000000 	or	r0, r0, r0

200230d8 <BitstreamReadUtils_IsStartCode>:
	static i32 BitstreamReadUtils_IsStartCode(u16 fifo[10]) {
200230d8:	3021ffd0 	addik	r1, r1, -48
200230dc:	f9e10000 	swi	r15, r1, 0
200230e0:	fa61002c 	swi	r19, r1, 44
200230e4:	12610000 	addk	r19, r1, r0
200230e8:	f8b30034 	swi	r5, r19, 52
		u16 idx;
		u16 tmp_fifo;
		u8 local_FIFO_DEPTH;
		i32 tmp_if;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
200230ec:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200230f0:	f0730020 	sbi	r3, r19, 32
		cptBits = fifo[local_FIFO_CPT_BITS];
200230f4:	e0730020 	lbui	r3, r19, 32
200230f8:	10631800 	addk	r3, r3, r3
200230fc:	e8930034 	lwi	r4, r19, 52
20023100:	10641800 	addk	r3, r4, r3
20023104:	e4630000 	lhui	r3, r3, 0
20023108:	f4730022 	shi	r3, r19, 34
		idx = BitstreamReadUtils_getFifoIdx(cptBits, fifo);
2002310c:	e4730022 	lhui	r3, r19, 34
20023110:	10a30000 	addk	r5, r3, r0
20023114:	e8d30034 	lwi	r6, r19, 52
20023118:	b9f4e98c 	brlid	r15, -5748	// 20021aa4 <BitstreamReadUtils_getFifoIdx>
2002311c:	80000000 	or	r0, r0, r0
20023120:	f4730024 	shi	r3, r19, 36
		tmp_fifo = fifo[idx];
20023124:	e4730024 	lhui	r3, r19, 36
20023128:	10631800 	addk	r3, r3, r3
2002312c:	e8930034 	lwi	r4, r19, 52
20023130:	10641800 	addk	r3, r4, r3
20023134:	e4630000 	lhui	r3, r3, 0
20023138:	f4730026 	shi	r3, r19, 38
		local_FIFO_DEPTH = BitstreamReadUtils_FIFO_DEPTH;
2002313c:	30600009 	addik	r3, r0, 9
20023140:	f0730028 	sbi	r3, r19, 40
		if ((tmp_fifo & 1 << (local_FIFO_DEPTH - 1)) != 0) {
20023144:	e4930026 	lhui	r4, r19, 38
20023148:	e0730028 	lbui	r3, r19, 40
2002314c:	3063ffff 	addik	r3, r3, -1
20023150:	44641a00 	bsra	r3, r4, r3
20023154:	a4630001 	andi	r3, r3, 1
20023158:	bc030010 	beqi	r3, 16		// 20023168
			tmp_if = 1;
2002315c:	30600001 	addik	r3, r0, 1
20023160:	f873001c 	swi	r3, r19, 28
20023164:	b8000008 	bri	8		// 2002316c
		} else {
			tmp_if = 0;
20023168:	f813001c 	swi	r0, r19, 28
		}
		return tmp_if;
2002316c:	e873001c 	lwi	r3, r19, 28
	}
20023170:	e9e10000 	lwi	r15, r1, 0
20023174:	10330000 	addk	r1, r19, r0
20023178:	ea61002c 	lwi	r19, r1, 44
2002317c:	30210030 	addik	r1, r1, 48
20023180:	b60f0008 	rtsd	r15, 8
20023184:	80000000 	or	r0, r0, r0

20023188 <BitstreamReadUtils_byte_align>:
	static void BitstreamReadUtils_byte_align(u16 fifo[10]) {
20023188:	3021fff4 	addik	r1, r1, -12
2002318c:	fa610008 	swi	r19, r1, 8
20023190:	12610000 	addk	r19, r1, r0
20023194:	f8b30010 	swi	r5, r19, 16
		u8 local_FIFO_CPT_BITS;
		u16 cptBits;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20023198:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002319c:	f0730004 	sbi	r3, r19, 4
		cptBits = fifo[local_FIFO_CPT_BITS];
200231a0:	e0730004 	lbui	r3, r19, 4
200231a4:	10631800 	addk	r3, r3, r3
200231a8:	e8930010 	lwi	r4, r19, 16
200231ac:	10641800 	addk	r3, r4, r3
200231b0:	e4630000 	lhui	r3, r3, 0
200231b4:	f4730006 	shi	r3, r19, 6
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
200231b8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200231bc:	f0730004 	sbi	r3, r19, 4
		fifo[local_FIFO_CPT_BITS] = cptBits - (cptBits & 7);
200231c0:	e0730004 	lbui	r3, r19, 4
200231c4:	10631800 	addk	r3, r3, r3
200231c8:	e8930010 	lwi	r4, r19, 16
200231cc:	10641800 	addk	r3, r4, r3
200231d0:	e4930006 	lhui	r4, r19, 6
200231d4:	a484fff8 	andi	r4, r4, -8
200231d8:	b0000000 	imm	0
200231dc:	a484ffff 	andi	r4, r4, -1
200231e0:	f4830000 	shi	r4, r3, 0
	}
200231e4:	10330000 	addk	r1, r19, r0
200231e8:	ea610008 	lwi	r19, r1, 8
200231ec:	3021000c 	addik	r1, r1, 12
200231f0:	b60f0008 	rtsd	r15, 8
200231f4:	80000000 	or	r0, r0, r0

200231f8 <log2bin>:
	static void log2bin(u32 value, u32 res[1]) {
200231f8:	3021fff0 	addik	r1, r1, -16
200231fc:	fa61000c 	swi	r19, r1, 12
20023200:	12610000 	addk	r19, r1, r0
20023204:	f8b30014 	swi	r5, r19, 20
20023208:	f8d30018 	swi	r6, r19, 24
		i32 invalue;
		u32 tmp_res;
	
		invalue = value;
2002320c:	e8730014 	lwi	r3, r19, 20
20023210:	f8730004 	swi	r3, r19, 4
		res[0] = 0;
20023214:	e8730018 	lwi	r3, r19, 24
20023218:	f8030000 	swi	r0, r3, 0
		while (invalue != 0) {
2002321c:	b800002c 	bri	44		// 20023248
			invalue = invalue >> 1;
20023220:	e8730004 	lwi	r3, r19, 4
20023224:	90630001 	sra	r3, r3
20023228:	f8730004 	swi	r3, r19, 4
			tmp_res = res[0];
2002322c:	e8730018 	lwi	r3, r19, 24
20023230:	e8630000 	lwi	r3, r3, 0
20023234:	f8730008 	swi	r3, r19, 8
			res[0] = tmp_res + 1;
20023238:	e8730008 	lwi	r3, r19, 8
2002323c:	30830001 	addik	r4, r3, 1
20023240:	e8730018 	lwi	r3, r19, 24
20023244:	f8830000 	swi	r4, r3, 0
		i32 invalue;
		u32 tmp_res;
	
		invalue = value;
		res[0] = 0;
		while (invalue != 0) {
20023248:	e8730004 	lwi	r3, r19, 4
2002324c:	bc23ffd4 	bnei	r3, -44		// 20023220
			invalue = invalue >> 1;
			tmp_res = res[0];
			res[0] = tmp_res + 1;
		}
	}
20023250:	10330000 	addk	r1, r19, r0
20023254:	ea61000c 	lwi	r19, r1, 12
20023258:	30210010 	addik	r1, r1, 16
2002325c:	b60f0008 	rtsd	r15, 8
20023260:	80000000 	or	r0, r0, r0

20023264 <isSchedulable_untagged_0>:

	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_untagged_0() {
20023264:	3021ffec 	addik	r1, r1, -20
20023268:	fa610010 	swi	r19, r1, 16
2002326c:	12610000 	addk	r19, r1, r0
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20023270:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20023274:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
20023278:	e0730004 	lbui	r3, r19, 4
2002327c:	10631800 	addk	r3, r3, r3
20023280:	b0002006 	imm	8198
20023284:	30631e20 	addik	r3, r3, 7712
20023288:	e4630000 	lhui	r3, r3, 0
2002328c:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20023290:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20023294:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo <= (local_FIFO_SIZE - 1) << 3;
20023298:	e4b30006 	lhui	r5, r19, 6
2002329c:	e0730008 	lbui	r3, r19, 8
200232a0:	3063ffff 	addik	r3, r3, -1
200232a4:	64830403 	bslli	r4, r3, 3
200232a8:	30600001 	addik	r3, r0, 1
200232ac:	16452001 	cmp	r18, r5, r4
200232b0:	bcb20008 	bgei	r18, 8		// 200232b8
200232b4:	10600000 	addk	r3, r0, r0
200232b8:	a46300ff 	andi	r3, r3, 255
200232bc:	f873000c 	swi	r3, r19, 12
		return result;
200232c0:	e873000c 	lwi	r3, r19, 12
	}
200232c4:	10330000 	addk	r1, r19, r0
200232c8:	ea610010 	lwi	r19, r1, 16
200232cc:	30210014 	addik	r1, r1, 20
200232d0:	b60f0008 	rtsd	r15, 8
200232d4:	80000000 	or	r0, r0, r0

200232d8 <untagged_0>:
	
	static void untagged_0() {
200232d8:	3021ffc8 	addik	r1, r1, -56
200232dc:	f9e10000 	swi	r15, r1, 0
200232e0:	fa610034 	swi	r19, r1, 52
200232e4:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BYTE = index_BYTE % SIZE_BYTE;
200232e8:	b0002006 	imm	8198
200232ec:	e8601dd8 	lwi	r3, r0, 7640	// 20061dd8 <index_BYTE>
200232f0:	a46301ff 	andi	r3, r3, 511
200232f4:	f873001c 	swi	r3, r19, 28
		u16 tmp_fifo;
		i32 local_DEBUG_BITSTREAM;
		u16 tmp_fifo0;
		u8 local_FIFO_SIZE;
	
		b = tokens_BYTE[(index_BYTE + (0)) % SIZE_BYTE];
200232f8:	b0002004 	imm	8196
200232fc:	e8607318 	lwi	r3, r0, 29464	// 20047318 <decoder_parser_parseheaders_BYTE>
20023300:	e8830004 	lwi	r4, r3, 4
20023304:	b0002006 	imm	8198
20023308:	e8601dd8 	lwi	r3, r0, 7640	// 20061dd8 <index_BYTE>
2002330c:	a46301ff 	andi	r3, r3, 511
20023310:	10641800 	addk	r3, r4, r3
20023314:	e0630000 	lbui	r3, r3, 0
20023318:	f0730020 	sbi	r3, r19, 32
		local_FIFO_IDX = BitstreamReadUtils_FIFO_IDX;
2002331c:	30600009 	addik	r3, r0, 9
20023320:	f0730021 	sbi	r3, r19, 33
		fifo_idx = fifo[local_FIFO_IDX];
20023324:	e0730021 	lbui	r3, r19, 33
20023328:	10631800 	addk	r3, r3, r3
2002332c:	b0002006 	imm	8198
20023330:	30631e20 	addik	r3, r3, 7712
20023334:	e4630000 	lhui	r3, r3, 0
20023338:	f0730022 	sbi	r3, r19, 34
		local_START_CODE_VALUE = ParserUtils_START_CODE_VALUE;
2002333c:	30600001 	addik	r3, r0, 1
20023340:	f0730023 	sbi	r3, r19, 35
		local_zeroByte = zeroByte;
20023344:	b0002006 	imm	8198
20023348:	e0601e34 	lbui	r3, r0, 7732	// 20061e34 <zeroByte>
2002334c:	f0730024 	sbi	r3, r19, 36
		if (b == local_START_CODE_VALUE && local_zeroByte == 3) {
20023350:	e0930020 	lbui	r4, r19, 32
20023354:	e0730023 	lbui	r3, r19, 35
20023358:	88641800 	xor	r3, r4, r3
2002335c:	bc23004c 	bnei	r3, 76		// 200233a8
20023360:	e0730024 	lbui	r3, r19, 36
20023364:	a8630003 	xori	r3, r3, 3
20023368:	bc230040 	bnei	r3, 64		// 200233a8
			local_START_CODE_FLAG = ParserUtils_START_CODE_FLAG;
2002336c:	30600100 	addik	r3, r0, 256
20023370:	f4730026 	shi	r3, r19, 38
			fifo[fifo_idx] = b + local_START_CODE_FLAG;
20023374:	e0730022 	lbui	r3, r19, 34
20023378:	e0930020 	lbui	r4, r19, 32
2002337c:	b0000000 	imm	0
20023380:	a4a4ffff 	andi	r5, r4, -1
20023384:	e4930026 	lhui	r4, r19, 38
20023388:	10852000 	addk	r4, r5, r4
2002338c:	b0000000 	imm	0
20023390:	a484ffff 	andi	r4, r4, -1
20023394:	10631800 	addk	r3, r3, r3
20023398:	b0002006 	imm	8198
2002339c:	30631e20 	addik	r3, r3, 7712
200233a0:	f4830000 	shi	r4, r3, 0
200233a4:	b8000024 	bri	36		// 200233c8
		} else {
			fifo[fifo_idx] = b;
200233a8:	e0730022 	lbui	r3, r19, 34
200233ac:	e0930020 	lbui	r4, r19, 32
200233b0:	b0000000 	imm	0
200233b4:	a484ffff 	andi	r4, r4, -1
200233b8:	10631800 	addk	r3, r3, r3
200233bc:	b0002006 	imm	8198
200233c0:	30631e20 	addik	r3, r3, 7712
200233c4:	f4830000 	shi	r4, r3, 0
		}
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
200233c8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200233cc:	f0730028 	sbi	r3, r19, 40
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
200233d0:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200233d4:	f0730028 	sbi	r3, r19, 40
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
200233d8:	e0730028 	lbui	r3, r19, 40
200233dc:	10631800 	addk	r3, r3, r3
200233e0:	b0002006 	imm	8198
200233e4:	30631e20 	addik	r3, r3, 7712
200233e8:	e4630000 	lhui	r3, r3, 0
200233ec:	f473002a 	shi	r3, r19, 42
		fifo[local_FIFO_CPT_BITS] = tmp_fifo + 8;
200233f0:	e0730028 	lbui	r3, r19, 40
200233f4:	e493002a 	lhui	r4, r19, 42
200233f8:	30840008 	addik	r4, r4, 8
200233fc:	b0000000 	imm	0
20023400:	a484ffff 	andi	r4, r4, -1
20023404:	10631800 	addk	r3, r3, r3
20023408:	b0002006 	imm	8198
2002340c:	30631e20 	addik	r3, r3, 7712
20023410:	f4830000 	shi	r4, r3, 0
		local_DEBUG_BITSTREAM = DEBUG_BITSTREAM;
20023414:	f813002c 	swi	r0, r19, 44
		if (local_DEBUG_BITSTREAM) {
20023418:	e873002c 	lwi	r3, r19, 44
2002341c:	bc030024 	beqi	r3, 36		// 20023440
			local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20023420:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20023424:	f0730028 	sbi	r3, r19, 40
			tmp_fifo0 = fifo[local_FIFO_CPT_BITS];
20023428:	e0730028 	lbui	r3, r19, 40
2002342c:	10631800 	addk	r3, r3, r3
20023430:	b0002006 	imm	8198
20023434:	30631e20 	addik	r3, r3, 7712
20023438:	e4630000 	lhui	r3, r3, 0
2002343c:	f4730030 	shi	r3, r19, 48
		}
		local_FIFO_IDX = BitstreamReadUtils_FIFO_IDX;
20023440:	30600009 	addik	r3, r0, 9
20023444:	f0730021 	sbi	r3, r19, 33
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20023448:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002344c:	f0730032 	sbi	r3, r19, 50
		fifo[local_FIFO_IDX] = fifo_idx + 1 & local_FIFO_SIZE - 1;
20023450:	e0730021 	lbui	r3, r19, 33
20023454:	e0930022 	lbui	r4, r19, 34
20023458:	b0000000 	imm	0
2002345c:	a484ffff 	andi	r4, r4, -1
20023460:	30840001 	addik	r4, r4, 1
20023464:	b0000000 	imm	0
20023468:	a484ffff 	andi	r4, r4, -1
2002346c:	90a40061 	sext16	r5, r4
20023470:	e0930032 	lbui	r4, r19, 50
20023474:	b0000000 	imm	0
20023478:	a484ffff 	andi	r4, r4, -1
2002347c:	3084ffff 	addik	r4, r4, -1
20023480:	b0000000 	imm	0
20023484:	a484ffff 	andi	r4, r4, -1
20023488:	90840061 	sext16	r4, r4
2002348c:	84852000 	and	r4, r5, r4
20023490:	90840061 	sext16	r4, r4
20023494:	b0000000 	imm	0
20023498:	a484ffff 	andi	r4, r4, -1
2002349c:	10631800 	addk	r3, r3, r3
200234a0:	b0002006 	imm	8198
200234a4:	30631e20 	addik	r3, r3, 7712
200234a8:	f4830000 	shi	r4, r3, 0
		if (b == 0) {
200234ac:	e0730020 	lbui	r3, r19, 32
200234b0:	bc230038 	bnei	r3, 56		// 200234e8
			local_zeroByte = zeroByte;
200234b4:	b0002006 	imm	8198
200234b8:	e0601e34 	lbui	r3, r0, 7732	// 20061e34 <zeroByte>
200234bc:	f0730024 	sbi	r3, r19, 36
			zeroByte = (local_zeroByte << 1) + 1 & 3;
200234c0:	e0730024 	lbui	r3, r19, 36
200234c4:	10631800 	addk	r3, r3, r3
200234c8:	a46300ff 	andi	r3, r3, 255
200234cc:	30630001 	addik	r3, r3, 1
200234d0:	a46300ff 	andi	r3, r3, 255
200234d4:	a4630003 	andi	r3, r3, 3
200234d8:	a46300ff 	andi	r3, r3, 255
200234dc:	b0002006 	imm	8198
200234e0:	f0601e34 	sbi	r3, r0, 7732	// 20061e34 <zeroByte>
200234e4:	b800000c 	bri	12		// 200234f0
		} else {
			zeroByte = 0;
200234e8:	b0002006 	imm	8198
200234ec:	f0001e34 	sbi	r0, r0, 7732	// 20061e34 <zeroByte>
		}
	
		// Update ports indexes
		index_BYTE += 1;
200234f0:	b0002006 	imm	8198
200234f4:	e8601dd8 	lwi	r3, r0, 7640	// 20061dd8 <index_BYTE>
200234f8:	30630001 	addik	r3, r3, 1
200234fc:	b0002006 	imm	8198
20023500:	f8601dd8 	swi	r3, r0, 7640	// 20061dd8 <index_BYTE>
		
		read_end_BYTE();
20023504:	b9f4e028 	brlid	r15, -8152	// 2002152c <read_end_BYTE>
20023508:	80000000 	or	r0, r0, r0
	}
2002350c:	e9e10000 	lwi	r15, r1, 0
20023510:	10330000 	addk	r1, r19, r0
20023514:	ea610034 	lwi	r19, r1, 52
20023518:	30210038 	addik	r1, r1, 56
2002351c:	b60f0008 	rtsd	r15, 8
20023520:	80000000 	or	r0, r0, r0

20023524 <isSchedulable_look_for_Sequence_Header>:
	static i32 isSchedulable_look_for_Sequence_Header() {
20023524:	3021fff4 	addik	r1, r1, -12
20023528:	fa610008 	swi	r19, r1, 8
2002352c:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
20023530:	30600001 	addik	r3, r0, 1
20023534:	f8730004 	swi	r3, r19, 4
		return result;
20023538:	e8730004 	lwi	r3, r19, 4
	}
2002353c:	10330000 	addk	r1, r19, r0
20023540:	ea610008 	lwi	r19, r1, 8
20023544:	3021000c 	addik	r1, r1, 12
20023548:	b60f0008 	rtsd	r15, 8
2002354c:	80000000 	or	r0, r0, r0

20023550 <look_for_Sequence_Header>:
	
	static void look_for_Sequence_Header() {
20023550:	3021fff8 	addik	r1, r1, -8
20023554:	fa610004 	swi	r19, r1, 4
20023558:	12610000 	addk	r19, r1, r0
	
	
	
		// Update ports indexes
		
	}
2002355c:	10330000 	addk	r1, r19, r0
20023560:	ea610004 	lwi	r19, r1, 4
20023564:	30210008 	addik	r1, r1, 8
20023568:	b60f0008 	rtsd	r15, 8
2002356c:	80000000 	or	r0, r0, r0

20023570 <isSchedulable_read_start_code>:
	static i32 isSchedulable_read_start_code() {
20023570:	3021ffec 	addik	r1, r1, -20
20023574:	fa610010 	swi	r19, r1, 16
20023578:	12610000 	addk	r19, r1, r0
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
2002357c:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20023580:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
20023584:	e0730004 	lbui	r3, r19, 4
20023588:	10631800 	addk	r3, r3, r3
2002358c:	b0002006 	imm	8198
20023590:	30631e20 	addik	r3, r3, 7712
20023594:	e4630000 	lhui	r3, r3, 0
20023598:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
2002359c:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200235a0:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
200235a4:	e4b30006 	lhui	r5, r19, 6
200235a8:	e0730008 	lbui	r3, r19, 8
200235ac:	3063ffff 	addik	r3, r3, -1
200235b0:	64830403 	bslli	r4, r3, 3
200235b4:	30600001 	addik	r3, r0, 1
200235b8:	16442801 	cmp	r18, r4, r5
200235bc:	bcb20008 	bgei	r18, 8		// 200235c4
200235c0:	10600000 	addk	r3, r0, r0
200235c4:	a46300ff 	andi	r3, r3, 255
200235c8:	f873000c 	swi	r3, r19, 12
		return result;
200235cc:	e873000c 	lwi	r3, r19, 12
	}
200235d0:	10330000 	addk	r1, r19, r0
200235d4:	ea610010 	lwi	r19, r1, 16
200235d8:	30210014 	addik	r1, r1, 20
200235dc:	b60f0008 	rtsd	r15, 8
200235e0:	80000000 	or	r0, r0, r0

200235e4 <read_start_code>:
	
	static void read_start_code() {
200235e4:	3021ffd8 	addik	r1, r1, -40
200235e8:	f9e10000 	swi	r15, r1, 0
200235ec:	fa610024 	swi	r19, r1, 36
200235f0:	12610000 	addk	r19, r1, r0
		// Compute aligned port indexes
	
		i32 res[1];
		i32 tmp_res;
	
		BitstreamReadUtils_vld_u_name(8, fifo, res, "start_code                           ");
200235f4:	30730020 	addik	r3, r19, 32
200235f8:	30a00008 	addik	r5, r0, 8	// 8 <_vector_sw_exception>
200235fc:	b0002006 	imm	8198
20023600:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023604:	10e30000 	addk	r7, r3, r0
20023608:	b0002004 	imm	8196
2002360c:	310049f4 	addik	r8, r0, 18932
20023610:	b9f4e8f0 	brlid	r15, -5904	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023614:	80000000 	or	r0, r0, r0
		tmp_res = res[0];
20023618:	e8730020 	lwi	r3, r19, 32
2002361c:	f873001c 	swi	r3, r19, 28
		start_code = tmp_res;
20023620:	e873001c 	lwi	r3, r19, 28
20023624:	a46300ff 	andi	r3, r3, 255
20023628:	b0002006 	imm	8198
2002362c:	f0601e35 	sbi	r3, r0, 7733	// 20061e35 <start_code>
	
		// Update ports indexes
		
	}
20023630:	e9e10000 	lwi	r15, r1, 0
20023634:	10330000 	addk	r1, r19, r0
20023638:	ea610024 	lwi	r19, r1, 36
2002363c:	30210028 	addik	r1, r1, 40
20023640:	b60f0008 	rtsd	r15, 8
20023644:	80000000 	or	r0, r0, r0

20023648 <isSchedulable_look_for_other_header>:
	static i32 isSchedulable_look_for_other_header() {
20023648:	3021fff4 	addik	r1, r1, -12
2002364c:	fa610008 	swi	r19, r1, 8
20023650:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
20023654:	30600001 	addik	r3, r0, 1
20023658:	f8730004 	swi	r3, r19, 4
		return result;
2002365c:	e8730004 	lwi	r3, r19, 4
	}
20023660:	10330000 	addk	r1, r19, r0
20023664:	ea610008 	lwi	r19, r1, 8
20023668:	3021000c 	addik	r1, r1, 12
2002366c:	b60f0008 	rtsd	r15, 8
20023670:	80000000 	or	r0, r0, r0

20023674 <look_for_other_header>:
	
	static void look_for_other_header() {
20023674:	3021fff8 	addik	r1, r1, -8
20023678:	fa610004 	swi	r19, r1, 4
2002367c:	12610000 	addk	r19, r1, r0
	
	
	
		// Update ports indexes
		
	}
20023680:	10330000 	addk	r1, r19, r0
20023684:	ea610004 	lwi	r19, r1, 4
20023688:	30210008 	addik	r1, r1, 8
2002368c:	b60f0008 	rtsd	r15, 8
20023690:	80000000 	or	r0, r0, r0

20023694 <isSchedulable_look_for_vol>:
	static i32 isSchedulable_look_for_vol() {
20023694:	3021ffec 	addik	r1, r1, -20
20023698:	fa610010 	swi	r19, r1, 16
2002369c:	12610000 	addk	r19, r1, r0
		i32 result;
		u8 local_start_code;
		i32 local_VOL_START_CODE;
	
		local_start_code = start_code;
200236a0:	b0002006 	imm	8198
200236a4:	e0601e35 	lbui	r3, r0, 7733	// 20061e35 <start_code>
200236a8:	f0730004 	sbi	r3, r19, 4
		local_VOL_START_CODE = VOL_START_CODE;
200236ac:	30600020 	addik	r3, r0, 32	// 20 <_vector_hw_exception>
200236b0:	f8730008 	swi	r3, r19, 8
		result = local_start_code == local_VOL_START_CODE;
200236b4:	e0930004 	lbui	r4, r19, 4
200236b8:	e8730008 	lwi	r3, r19, 8
200236bc:	88641c00 	pcmpeq	r3, r4, r3
200236c0:	a46300ff 	andi	r3, r3, 255
200236c4:	f873000c 	swi	r3, r19, 12
		return result;
200236c8:	e873000c 	lwi	r3, r19, 12
	}
200236cc:	10330000 	addk	r1, r19, r0
200236d0:	ea610010 	lwi	r19, r1, 16
200236d4:	30210014 	addik	r1, r1, 20
200236d8:	b60f0008 	rtsd	r15, 8
200236dc:	80000000 	or	r0, r0, r0

200236e0 <look_for_vol>:
	
	static void look_for_vol() {
200236e0:	3021fff8 	addik	r1, r1, -8
200236e4:	fa610004 	swi	r19, r1, 4
200236e8:	12610000 	addk	r19, r1, r0
	
	
	
		// Update ports indexes
		
	}
200236ec:	10330000 	addk	r1, r19, r0
200236f0:	ea610004 	lwi	r19, r1, 4
200236f4:	30210008 	addik	r1, r1, 8
200236f8:	b60f0008 	rtsd	r15, 8
200236fc:	80000000 	or	r0, r0, r0

20023700 <isSchedulable_look_for_vop>:
	static i32 isSchedulable_look_for_vop() {
20023700:	3021ffec 	addik	r1, r1, -20
20023704:	fa610010 	swi	r19, r1, 16
20023708:	12610000 	addk	r19, r1, r0
		i32 result;
		u8 local_start_code;
		i32 local_VOP_START_CODE;
	
		local_start_code = start_code;
2002370c:	b0002006 	imm	8198
20023710:	e0601e35 	lbui	r3, r0, 7733	// 20061e35 <start_code>
20023714:	f0730004 	sbi	r3, r19, 4
		local_VOP_START_CODE = VOP_START_CODE;
20023718:	306000b6 	addik	r3, r0, 182
2002371c:	f8730008 	swi	r3, r19, 8
		result = local_start_code == local_VOP_START_CODE;
20023720:	e0930004 	lbui	r4, r19, 4
20023724:	e8730008 	lwi	r3, r19, 8
20023728:	88641c00 	pcmpeq	r3, r4, r3
2002372c:	a46300ff 	andi	r3, r3, 255
20023730:	f873000c 	swi	r3, r19, 12
		return result;
20023734:	e873000c 	lwi	r3, r19, 12
	}
20023738:	10330000 	addk	r1, r19, r0
2002373c:	ea610010 	lwi	r19, r1, 16
20023740:	30210014 	addik	r1, r1, 20
20023744:	b60f0008 	rtsd	r15, 8
20023748:	80000000 	or	r0, r0, r0

2002374c <look_for_vop>:
	
	static void look_for_vop() {
2002374c:	3021fff8 	addik	r1, r1, -8
20023750:	fa610004 	swi	r19, r1, 4
20023754:	12610000 	addk	r19, r1, r0
	
	
	
		// Update ports indexes
		
	}
20023758:	10330000 	addk	r1, r19, r0
2002375c:	ea610004 	lwi	r19, r1, 4
20023760:	30210008 	addik	r1, r1, 8
20023764:	b60f0008 	rtsd	r15, 8
20023768:	80000000 	or	r0, r0, r0

2002376c <isSchedulable_read_vol_start>:
	static i32 isSchedulable_read_vol_start() {
2002376c:	3021ffec 	addik	r1, r1, -20
20023770:	fa610010 	swi	r19, r1, 16
20023774:	12610000 	addk	r19, r1, r0
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20023778:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002377c:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
20023780:	e0730004 	lbui	r3, r19, 4
20023784:	10631800 	addk	r3, r3, r3
20023788:	b0002006 	imm	8198
2002378c:	30631e20 	addik	r3, r3, 7712
20023790:	e4630000 	lhui	r3, r3, 0
20023794:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20023798:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002379c:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
200237a0:	e4b30006 	lhui	r5, r19, 6
200237a4:	e0730008 	lbui	r3, r19, 8
200237a8:	3063ffff 	addik	r3, r3, -1
200237ac:	64830403 	bslli	r4, r3, 3
200237b0:	30600001 	addik	r3, r0, 1
200237b4:	16442801 	cmp	r18, r4, r5
200237b8:	bcb20008 	bgei	r18, 8		// 200237c0
200237bc:	10600000 	addk	r3, r0, r0
200237c0:	a46300ff 	andi	r3, r3, 255
200237c4:	f873000c 	swi	r3, r19, 12
		return result;
200237c8:	e873000c 	lwi	r3, r19, 12
	}
200237cc:	10330000 	addk	r1, r19, r0
200237d0:	ea610010 	lwi	r19, r1, 16
200237d4:	30210014 	addik	r1, r1, 20
200237d8:	b60f0008 	rtsd	r15, 8
200237dc:	80000000 	or	r0, r0, r0

200237e0 <read_vol_start>:
	
	static void read_vol_start() {
200237e0:	3021ffbc 	addik	r1, r1, -68
200237e4:	f9e10000 	swi	r15, r1, 0
200237e8:	fa610040 	swi	r19, r1, 64
200237ec:	12610000 	addk	r19, r1, r0
		i32 tmp_res0;
		i32 local_vol_control_parameters;
		i32 tmp_res1;
		i32 local_vbv_parameters;
	
		BitstreamReadUtils_vld_u_name(1, fifo, res, "random_accessible_vol                           ");
200237f0:	3073003c 	addik	r3, r19, 60
200237f4:	30a00001 	addik	r5, r0, 1
200237f8:	b0002006 	imm	8198
200237fc:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023800:	10e30000 	addk	r7, r3, r0
20023804:	b0002004 	imm	8196
20023808:	31004a1c 	addik	r8, r0, 18972
2002380c:	b9f4e6f4 	brlid	r15, -6412	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023810:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(8, fifo, res, "video_object_type_indication                           ");
20023814:	3073003c 	addik	r3, r19, 60
20023818:	30a00008 	addik	r5, r0, 8	// 8 <_vector_sw_exception>
2002381c:	b0002006 	imm	8198
20023820:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023824:	10e30000 	addk	r7, r3, r0
20023828:	b0002004 	imm	8196
2002382c:	31004a50 	addik	r8, r0, 19024
20023830:	b9f4e6d0 	brlid	r15, -6448	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023834:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "is_object_layer_identifier                           ");
20023838:	3073003c 	addik	r3, r19, 60
2002383c:	30a00001 	addik	r5, r0, 1
20023840:	b0002006 	imm	8198
20023844:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023848:	10e30000 	addk	r7, r3, r0
2002384c:	b0002004 	imm	8196
20023850:	31004a88 	addik	r8, r0, 19080
20023854:	b9f4e6ac 	brlid	r15, -6484	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023858:	80000000 	or	r0, r0, r0
		tmp_res = res[0];
2002385c:	e873003c 	lwi	r3, r19, 60
20023860:	f873001c 	swi	r3, r19, 28
		is_object_layer_identifier = tmp_res == 1;
20023864:	e893001c 	lwi	r4, r19, 28
20023868:	30600001 	addik	r3, r0, 1
2002386c:	88641c00 	pcmpeq	r3, r4, r3
20023870:	a46300ff 	andi	r3, r3, 255
20023874:	f8730020 	swi	r3, r19, 32
		if (is_object_layer_identifier) {
20023878:	e8730020 	lwi	r3, r19, 32
2002387c:	bc03004c 	beqi	r3, 76		// 200238c8
			BitstreamReadUtils_vld_u_name(4, fifo, res, "video_object_layer_verid                           ");
20023880:	3073003c 	addik	r3, r19, 60
20023884:	30a00004 	addik	r5, r0, 4
20023888:	b0002006 	imm	8198
2002388c:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023890:	10e30000 	addk	r7, r3, r0
20023894:	b0002004 	imm	8196
20023898:	31004ac0 	addik	r8, r0, 19136
2002389c:	b9f4e664 	brlid	r15, -6556	// 20021f00 <BitstreamReadUtils_vld_u_name>
200238a0:	80000000 	or	r0, r0, r0
			BitstreamReadUtils_vld_u_name(3, fifo, res, "video_object_layer_priority                           ");
200238a4:	3073003c 	addik	r3, r19, 60
200238a8:	30a00003 	addik	r5, r0, 3
200238ac:	b0002006 	imm	8198
200238b0:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
200238b4:	10e30000 	addk	r7, r3, r0
200238b8:	b0002004 	imm	8196
200238bc:	31004af4 	addik	r8, r0, 19188
200238c0:	b9f4e640 	brlid	r15, -6592	// 20021f00 <BitstreamReadUtils_vld_u_name>
200238c4:	80000000 	or	r0, r0, r0
		}
		BitstreamReadUtils_vld_u_name(4, fifo, res, "aspect_ratio_info                           ");
200238c8:	3073003c 	addik	r3, r19, 60
200238cc:	30a00004 	addik	r5, r0, 4
200238d0:	b0002006 	imm	8198
200238d4:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
200238d8:	10e30000 	addk	r7, r3, r0
200238dc:	b0002004 	imm	8196
200238e0:	31004b2c 	addik	r8, r0, 19244
200238e4:	b9f4e61c 	brlid	r15, -6628	// 20021f00 <BitstreamReadUtils_vld_u_name>
200238e8:	80000000 	or	r0, r0, r0
		aspect_ratio_info = res[0];
200238ec:	e873003c 	lwi	r3, r19, 60
200238f0:	f0730024 	sbi	r3, r19, 36
		local_EXTENDED_PAR = EXTENDED_PAR;
200238f4:	3060000f 	addik	r3, r0, 15
200238f8:	f8730028 	swi	r3, r19, 40
		if (aspect_ratio_info == local_EXTENDED_PAR) {
200238fc:	e0930024 	lbui	r4, r19, 36
20023900:	e8730028 	lwi	r3, r19, 40
20023904:	88641800 	xor	r3, r4, r3
20023908:	bc23004c 	bnei	r3, 76		// 20023954
			BitstreamReadUtils_vld_u_name(8, fifo, res, "par_width                           ");
2002390c:	3073003c 	addik	r3, r19, 60
20023910:	30a00008 	addik	r5, r0, 8	// 8 <_vector_sw_exception>
20023914:	b0002006 	imm	8198
20023918:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
2002391c:	10e30000 	addk	r7, r3, r0
20023920:	b0002004 	imm	8196
20023924:	31004b5c 	addik	r8, r0, 19292
20023928:	b9f4e5d8 	brlid	r15, -6696	// 20021f00 <BitstreamReadUtils_vld_u_name>
2002392c:	80000000 	or	r0, r0, r0
			BitstreamReadUtils_vld_u_name(8, fifo, res, "par_height                          ");
20023930:	3073003c 	addik	r3, r19, 60
20023934:	30a00008 	addik	r5, r0, 8	// 8 <_vector_sw_exception>
20023938:	b0002006 	imm	8198
2002393c:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023940:	10e30000 	addk	r7, r3, r0
20023944:	b0002004 	imm	8196
20023948:	31004b84 	addik	r8, r0, 19332
2002394c:	b9f4e5b4 	brlid	r15, -6732	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023950:	80000000 	or	r0, r0, r0
		}
		BitstreamReadUtils_vld_u_name(1, fifo, res, "vol_control_parameters                           ");
20023954:	3073003c 	addik	r3, r19, 60
20023958:	30a00001 	addik	r5, r0, 1
2002395c:	b0002006 	imm	8198
20023960:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023964:	10e30000 	addk	r7, r3, r0
20023968:	b0002004 	imm	8196
2002396c:	31004bac 	addik	r8, r0, 19372
20023970:	b9f4e590 	brlid	r15, -6768	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023974:	80000000 	or	r0, r0, r0
		tmp_res0 = res[0];
20023978:	e873003c 	lwi	r3, r19, 60
2002397c:	f873002c 	swi	r3, r19, 44
		vol_control_parameters = tmp_res0 == 1;
20023980:	e893002c 	lwi	r4, r19, 44
20023984:	30600001 	addik	r3, r0, 1
20023988:	88641c00 	pcmpeq	r3, r4, r3
2002398c:	a46300ff 	andi	r3, r3, 255
20023990:	b0002006 	imm	8198
20023994:	f8601e38 	swi	r3, r0, 7736	// 20061e38 <vol_control_parameters>
		local_vol_control_parameters = vol_control_parameters;
20023998:	b0002006 	imm	8198
2002399c:	e8601e38 	lwi	r3, r0, 7736	// 20061e38 <vol_control_parameters>
200239a0:	f8730030 	swi	r3, r19, 48
		if (local_vol_control_parameters) {
200239a4:	e8730030 	lwi	r3, r19, 48
200239a8:	bc0300ec 	beqi	r3, 236		// 20023a94
			BitstreamReadUtils_vld_u_name(2, fifo, res, "chroma_format                           ");
200239ac:	3073003c 	addik	r3, r19, 60
200239b0:	30a00002 	addik	r5, r0, 2
200239b4:	b0002006 	imm	8198
200239b8:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
200239bc:	10e30000 	addk	r7, r3, r0
200239c0:	b0002004 	imm	8196
200239c4:	31004be0 	addik	r8, r0, 19424
200239c8:	b9f4e538 	brlid	r15, -6856	// 20021f00 <BitstreamReadUtils_vld_u_name>
200239cc:	80000000 	or	r0, r0, r0
			BitstreamReadUtils_vld_u_name(1, fifo, res, "low_delay                           ");
200239d0:	3073003c 	addik	r3, r19, 60
200239d4:	30a00001 	addik	r5, r0, 1
200239d8:	b0002006 	imm	8198
200239dc:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
200239e0:	10e30000 	addk	r7, r3, r0
200239e4:	b0002004 	imm	8196
200239e8:	31004c0c 	addik	r8, r0, 19468
200239ec:	b9f4e514 	brlid	r15, -6892	// 20021f00 <BitstreamReadUtils_vld_u_name>
200239f0:	80000000 	or	r0, r0, r0
			BitstreamReadUtils_vld_u_name(1, fifo, res, "vbv_parameters                           ");
200239f4:	3073003c 	addik	r3, r19, 60
200239f8:	30a00001 	addik	r5, r0, 1
200239fc:	b0002006 	imm	8198
20023a00:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023a04:	10e30000 	addk	r7, r3, r0
20023a08:	b0002004 	imm	8196
20023a0c:	31004c34 	addik	r8, r0, 19508
20023a10:	b9f4e4f0 	brlid	r15, -6928	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023a14:	80000000 	or	r0, r0, r0
			tmp_res1 = res[0];
20023a18:	e873003c 	lwi	r3, r19, 60
20023a1c:	f8730034 	swi	r3, r19, 52
			vbv_parameters = tmp_res1 == 1;
20023a20:	e8930034 	lwi	r4, r19, 52
20023a24:	30600001 	addik	r3, r0, 1
20023a28:	88641c00 	pcmpeq	r3, r4, r3
20023a2c:	a46300ff 	andi	r3, r3, 255
20023a30:	b0002006 	imm	8198
20023a34:	f8601e3c 	swi	r3, r0, 7740	// 20061e3c <vbv_parameters>
			local_vbv_parameters = vbv_parameters;
20023a38:	b0002006 	imm	8198
20023a3c:	e8601e3c 	lwi	r3, r0, 7740	// 20061e3c <vbv_parameters>
20023a40:	f8730038 	swi	r3, r19, 56
			if (local_vbv_parameters) {
20023a44:	e8730038 	lwi	r3, r19, 56
20023a48:	bc03004c 	beqi	r3, 76		// 20023a94
				BitstreamReadUtils_vld_u_name(15, fifo, res, "first_half_bit_rate                           ");
20023a4c:	3073003c 	addik	r3, r19, 60
20023a50:	30a0000f 	addik	r5, r0, 15
20023a54:	b0002006 	imm	8198
20023a58:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023a5c:	10e30000 	addk	r7, r3, r0
20023a60:	b0002004 	imm	8196
20023a64:	31004c60 	addik	r8, r0, 19552
20023a68:	b9f4e498 	brlid	r15, -7016	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023a6c:	80000000 	or	r0, r0, r0
				BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
20023a70:	3073003c 	addik	r3, r19, 60
20023a74:	30a00001 	addik	r5, r0, 1
20023a78:	b0002006 	imm	8198
20023a7c:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023a80:	10e30000 	addk	r7, r3, r0
20023a84:	b0002004 	imm	8196
20023a88:	31004c90 	addik	r8, r0, 19600
20023a8c:	b9f4e474 	brlid	r15, -7052	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023a90:	80000000 	or	r0, r0, r0
			}
		}
	
		// Update ports indexes
		
	}
20023a94:	e9e10000 	lwi	r15, r1, 0
20023a98:	10330000 	addk	r1, r19, r0
20023a9c:	ea610040 	lwi	r19, r1, 64
20023aa0:	30210044 	addik	r1, r1, 68
20023aa4:	b60f0008 	rtsd	r15, 8
20023aa8:	80000000 	or	r0, r0, r0

20023aac <isSchedulable_read_vol_vbv_parameters1>:
	static i32 isSchedulable_read_vol_vbv_parameters1() {
20023aac:	3021ffec 	addik	r1, r1, -20
20023ab0:	fa610010 	swi	r19, r1, 16
20023ab4:	12610000 	addk	r19, r1, r0
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20023ab8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20023abc:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
20023ac0:	e0730004 	lbui	r3, r19, 4
20023ac4:	10631800 	addk	r3, r3, r3
20023ac8:	b0002006 	imm	8198
20023acc:	30631e20 	addik	r3, r3, 7712
20023ad0:	e4630000 	lhui	r3, r3, 0
20023ad4:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20023ad8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20023adc:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
20023ae0:	e4b30006 	lhui	r5, r19, 6
20023ae4:	e0730008 	lbui	r3, r19, 8
20023ae8:	3063ffff 	addik	r3, r3, -1
20023aec:	64830403 	bslli	r4, r3, 3
20023af0:	30600001 	addik	r3, r0, 1
20023af4:	16442801 	cmp	r18, r4, r5
20023af8:	bcb20008 	bgei	r18, 8		// 20023b00
20023afc:	10600000 	addk	r3, r0, r0
20023b00:	a46300ff 	andi	r3, r3, 255
20023b04:	f873000c 	swi	r3, r19, 12
		return result;
20023b08:	e873000c 	lwi	r3, r19, 12
	}
20023b0c:	10330000 	addk	r1, r19, r0
20023b10:	ea610010 	lwi	r19, r1, 16
20023b14:	30210014 	addik	r1, r1, 20
20023b18:	b60f0008 	rtsd	r15, 8
20023b1c:	80000000 	or	r0, r0, r0

20023b20 <read_vol_vbv_parameters1>:
	
	static void read_vol_vbv_parameters1() {
20023b20:	3021ffd4 	addik	r1, r1, -44
20023b24:	f9e10000 	swi	r15, r1, 0
20023b28:	fa610028 	swi	r19, r1, 40
20023b2c:	12610000 	addk	r19, r1, r0
	
		i32 res[1];
		i32 local_vol_control_parameters;
		i32 local_vbv_parameters;
	
		local_vol_control_parameters = vol_control_parameters;
20023b30:	b0002006 	imm	8198
20023b34:	e8601e38 	lwi	r3, r0, 7736	// 20061e38 <vol_control_parameters>
20023b38:	f873001c 	swi	r3, r19, 28
		if (local_vol_control_parameters) {
20023b3c:	e873001c 	lwi	r3, r19, 28
20023b40:	bc030114 	beqi	r3, 276		// 20023c54
			local_vbv_parameters = vbv_parameters;
20023b44:	b0002006 	imm	8198
20023b48:	e8601e3c 	lwi	r3, r0, 7740	// 20061e3c <vbv_parameters>
20023b4c:	f8730020 	swi	r3, r19, 32
			if (local_vbv_parameters) {
20023b50:	e8730020 	lwi	r3, r19, 32
20023b54:	bc030100 	beqi	r3, 256		// 20023c54
				BitstreamReadUtils_vld_u_name(15, fifo, res, "latter_half_bit_rate                           ");
20023b58:	30730024 	addik	r3, r19, 36
20023b5c:	30a0000f 	addik	r5, r0, 15
20023b60:	b0002006 	imm	8198
20023b64:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023b68:	10e30000 	addk	r7, r3, r0
20023b6c:	b0002004 	imm	8196
20023b70:	31004cb8 	addik	r8, r0, 19640
20023b74:	b9f4e38c 	brlid	r15, -7284	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023b78:	80000000 	or	r0, r0, r0
				BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
20023b7c:	30730024 	addik	r3, r19, 36
20023b80:	30a00001 	addik	r5, r0, 1
20023b84:	b0002006 	imm	8198
20023b88:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023b8c:	10e30000 	addk	r7, r3, r0
20023b90:	b0002004 	imm	8196
20023b94:	31004c90 	addik	r8, r0, 19600
20023b98:	b9f4e368 	brlid	r15, -7320	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023b9c:	80000000 	or	r0, r0, r0
				BitstreamReadUtils_vld_u_name(15, fifo, res, "first_half_vbv_buffer_size                           ");
20023ba0:	30730024 	addik	r3, r19, 36
20023ba4:	30a0000f 	addik	r5, r0, 15
20023ba8:	b0002006 	imm	8198
20023bac:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023bb0:	10e30000 	addk	r7, r3, r0
20023bb4:	b0002004 	imm	8196
20023bb8:	31004ce8 	addik	r8, r0, 19688
20023bbc:	b9f4e344 	brlid	r15, -7356	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023bc0:	80000000 	or	r0, r0, r0
				BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
20023bc4:	30730024 	addik	r3, r19, 36
20023bc8:	30a00001 	addik	r5, r0, 1
20023bcc:	b0002006 	imm	8198
20023bd0:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023bd4:	10e30000 	addk	r7, r3, r0
20023bd8:	b0002004 	imm	8196
20023bdc:	31004c90 	addik	r8, r0, 19600
20023be0:	b9f4e320 	brlid	r15, -7392	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023be4:	80000000 	or	r0, r0, r0
				BitstreamReadUtils_vld_u_name(3, fifo, res, "latter_half_vbv_buffer_size                           ");
20023be8:	30730024 	addik	r3, r19, 36
20023bec:	30a00003 	addik	r5, r0, 3
20023bf0:	b0002006 	imm	8198
20023bf4:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023bf8:	10e30000 	addk	r7, r3, r0
20023bfc:	b0002004 	imm	8196
20023c00:	31004d20 	addik	r8, r0, 19744
20023c04:	b9f4e2fc 	brlid	r15, -7428	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023c08:	80000000 	or	r0, r0, r0
				BitstreamReadUtils_vld_u_name(11, fifo, res, "first_half_vbv_occupancy                           ");
20023c0c:	30730024 	addik	r3, r19, 36
20023c10:	30a0000b 	addik	r5, r0, 11
20023c14:	b0002006 	imm	8198
20023c18:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023c1c:	10e30000 	addk	r7, r3, r0
20023c20:	b0002004 	imm	8196
20023c24:	31004d58 	addik	r8, r0, 19800
20023c28:	b9f4e2d8 	brlid	r15, -7464	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023c2c:	80000000 	or	r0, r0, r0
				BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
20023c30:	30730024 	addik	r3, r19, 36
20023c34:	30a00001 	addik	r5, r0, 1
20023c38:	b0002006 	imm	8198
20023c3c:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023c40:	10e30000 	addk	r7, r3, r0
20023c44:	b0002004 	imm	8196
20023c48:	31004c90 	addik	r8, r0, 19600
20023c4c:	b9f4e2b4 	brlid	r15, -7500	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023c50:	80000000 	or	r0, r0, r0
			}
		}
	
		// Update ports indexes
		
	}
20023c54:	e9e10000 	lwi	r15, r1, 0
20023c58:	10330000 	addk	r1, r19, r0
20023c5c:	ea610028 	lwi	r19, r1, 40
20023c60:	3021002c 	addik	r1, r1, 44
20023c64:	b60f0008 	rtsd	r15, 8
20023c68:	80000000 	or	r0, r0, r0

20023c6c <isSchedulable_read_vol_vbv_parameters2>:
	static i32 isSchedulable_read_vol_vbv_parameters2() {
20023c6c:	3021ffec 	addik	r1, r1, -20
20023c70:	fa610010 	swi	r19, r1, 16
20023c74:	12610000 	addk	r19, r1, r0
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20023c78:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20023c7c:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
20023c80:	e0730004 	lbui	r3, r19, 4
20023c84:	10631800 	addk	r3, r3, r3
20023c88:	b0002006 	imm	8198
20023c8c:	30631e20 	addik	r3, r3, 7712
20023c90:	e4630000 	lhui	r3, r3, 0
20023c94:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20023c98:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20023c9c:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
20023ca0:	e4b30006 	lhui	r5, r19, 6
20023ca4:	e0730008 	lbui	r3, r19, 8
20023ca8:	3063ffff 	addik	r3, r3, -1
20023cac:	64830403 	bslli	r4, r3, 3
20023cb0:	30600001 	addik	r3, r0, 1
20023cb4:	16442801 	cmp	r18, r4, r5
20023cb8:	bcb20008 	bgei	r18, 8		// 20023cc0
20023cbc:	10600000 	addk	r3, r0, r0
20023cc0:	a46300ff 	andi	r3, r3, 255
20023cc4:	f873000c 	swi	r3, r19, 12
		return result;
20023cc8:	e873000c 	lwi	r3, r19, 12
	}
20023ccc:	10330000 	addk	r1, r19, r0
20023cd0:	ea610010 	lwi	r19, r1, 16
20023cd4:	30210014 	addik	r1, r1, 20
20023cd8:	b60f0008 	rtsd	r15, 8
20023cdc:	80000000 	or	r0, r0, r0

20023ce0 <read_vol_vbv_parameters2>:
	
	static void read_vol_vbv_parameters2() {
20023ce0:	3021ffd4 	addik	r1, r1, -44
20023ce4:	f9e10000 	swi	r15, r1, 0
20023ce8:	fa610028 	swi	r19, r1, 40
20023cec:	12610000 	addk	r19, r1, r0
	
		i32 res[1];
		i32 local_vol_control_parameters;
		i32 local_vbv_parameters;
	
		local_vol_control_parameters = vol_control_parameters;
20023cf0:	b0002006 	imm	8198
20023cf4:	e8601e38 	lwi	r3, r0, 7736	// 20061e38 <vol_control_parameters>
20023cf8:	f873001c 	swi	r3, r19, 28
		if (local_vol_control_parameters) {
20023cfc:	e873001c 	lwi	r3, r19, 28
20023d00:	bc030060 	beqi	r3, 96		// 20023d60
			local_vbv_parameters = vbv_parameters;
20023d04:	b0002006 	imm	8198
20023d08:	e8601e3c 	lwi	r3, r0, 7740	// 20061e3c <vbv_parameters>
20023d0c:	f8730020 	swi	r3, r19, 32
			if (local_vbv_parameters) {
20023d10:	e8730020 	lwi	r3, r19, 32
20023d14:	bc03004c 	beqi	r3, 76		// 20023d60
				BitstreamReadUtils_vld_u_name(15, fifo, res, "latter_half_vbv_occupancy                           ");
20023d18:	30730024 	addik	r3, r19, 36
20023d1c:	30a0000f 	addik	r5, r0, 15
20023d20:	b0002006 	imm	8198
20023d24:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023d28:	10e30000 	addk	r7, r3, r0
20023d2c:	b0002004 	imm	8196
20023d30:	31004d8c 	addik	r8, r0, 19852
20023d34:	b9f4e1cc 	brlid	r15, -7732	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023d38:	80000000 	or	r0, r0, r0
				BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
20023d3c:	30730024 	addik	r3, r19, 36
20023d40:	30a00001 	addik	r5, r0, 1
20023d44:	b0002006 	imm	8198
20023d48:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023d4c:	10e30000 	addk	r7, r3, r0
20023d50:	b0002004 	imm	8196
20023d54:	31004c90 	addik	r8, r0, 19600
20023d58:	b9f4e1a8 	brlid	r15, -7768	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023d5c:	80000000 	or	r0, r0, r0
			}
		}
	
		// Update ports indexes
		
	}
20023d60:	e9e10000 	lwi	r15, r1, 0
20023d64:	10330000 	addk	r1, r19, r0
20023d68:	ea610028 	lwi	r19, r1, 40
20023d6c:	3021002c 	addik	r1, r1, 44
20023d70:	b60f0008 	rtsd	r15, 8
20023d74:	80000000 	or	r0, r0, r0

20023d78 <isSchedulable_read_vol_video_object_layer_shape>:
	static i32 isSchedulable_read_vol_video_object_layer_shape() {
20023d78:	3021ffec 	addik	r1, r1, -20
20023d7c:	fa610010 	swi	r19, r1, 16
20023d80:	12610000 	addk	r19, r1, r0
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20023d84:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20023d88:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
20023d8c:	e0730004 	lbui	r3, r19, 4
20023d90:	10631800 	addk	r3, r3, r3
20023d94:	b0002006 	imm	8198
20023d98:	30631e20 	addik	r3, r3, 7712
20023d9c:	e4630000 	lhui	r3, r3, 0
20023da0:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20023da4:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20023da8:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
20023dac:	e4b30006 	lhui	r5, r19, 6
20023db0:	e0730008 	lbui	r3, r19, 8
20023db4:	3063ffff 	addik	r3, r3, -1
20023db8:	64830403 	bslli	r4, r3, 3
20023dbc:	30600001 	addik	r3, r0, 1
20023dc0:	16442801 	cmp	r18, r4, r5
20023dc4:	bcb20008 	bgei	r18, 8		// 20023dcc
20023dc8:	10600000 	addk	r3, r0, r0
20023dcc:	a46300ff 	andi	r3, r3, 255
20023dd0:	f873000c 	swi	r3, r19, 12
		return result;
20023dd4:	e873000c 	lwi	r3, r19, 12
	}
20023dd8:	10330000 	addk	r1, r19, r0
20023ddc:	ea610010 	lwi	r19, r1, 16
20023de0:	30210014 	addik	r1, r1, 20
20023de4:	b60f0008 	rtsd	r15, 8
20023de8:	80000000 	or	r0, r0, r0

20023dec <read_vol_video_object_layer_shape>:
	
	static void read_vol_video_object_layer_shape() {
20023dec:	3021ffc4 	addik	r1, r1, -60
20023df0:	f9e10000 	swi	r15, r1, 0
20023df4:	fa610038 	swi	r19, r1, 56
20023df8:	12610000 	addk	r19, r1, r0
		i32 tmp_res;
		i32 tmp_res0;
		i32 tmp_res1;
		u8 local_vop_time_increment_resolution_bits;
	
		BitstreamReadUtils_vld_u_name(2, fifo, res, "video_object_layer_shape                           ");
20023dfc:	30730034 	addik	r3, r19, 52
20023e00:	30a00002 	addik	r5, r0, 2
20023e04:	b0002006 	imm	8198
20023e08:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023e0c:	10e30000 	addk	r7, r3, r0
20023e10:	b0002004 	imm	8196
20023e14:	31004dc4 	addik	r8, r0, 19908
20023e18:	b9f4e0e8 	brlid	r15, -7960	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023e1c:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
20023e20:	30730034 	addik	r3, r19, 52
20023e24:	30a00001 	addik	r5, r0, 1
20023e28:	b0002006 	imm	8198
20023e2c:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023e30:	10e30000 	addk	r7, r3, r0
20023e34:	b0002004 	imm	8196
20023e38:	31004c90 	addik	r8, r0, 19600
20023e3c:	b9f4e0c4 	brlid	r15, -7996	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023e40:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(16, fifo, res, "vop_time_increment_resolution                           ");
20023e44:	30730034 	addik	r3, r19, 52
20023e48:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
20023e4c:	b0002006 	imm	8198
20023e50:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023e54:	10e30000 	addk	r7, r3, r0
20023e58:	b0002004 	imm	8196
20023e5c:	31004df8 	addik	r8, r0, 19960
20023e60:	b9f4e0a0 	brlid	r15, -8032	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023e64:	80000000 	or	r0, r0, r0
		vop_time_increment_resolution = res[0];
20023e68:	e8730034 	lwi	r3, r19, 52
20023e6c:	f473001c 	shi	r3, r19, 28
		log2bin(vop_time_increment_resolution - 1, res);
20023e70:	e473001c 	lhui	r3, r19, 28
20023e74:	3063ffff 	addik	r3, r3, -1
20023e78:	10830000 	addk	r4, r3, r0
20023e7c:	30730034 	addik	r3, r19, 52
20023e80:	10a40000 	addk	r5, r4, r0
20023e84:	10c30000 	addk	r6, r3, r0
20023e88:	b9f4f370 	brlid	r15, -3216	// 200231f8 <log2bin>
20023e8c:	80000000 	or	r0, r0, r0
		tmp_res = res[0];
20023e90:	e8730034 	lwi	r3, r19, 52
20023e94:	f8730020 	swi	r3, r19, 32
		if (tmp_res > 1) {
20023e98:	e8930020 	lwi	r4, r19, 32
20023e9c:	30600001 	addik	r3, r0, 1
20023ea0:	16441801 	cmp	r18, r4, r3
20023ea4:	bcb20020 	bgei	r18, 32		// 20023ec4
			tmp_res0 = res[0];
20023ea8:	e8730034 	lwi	r3, r19, 52
20023eac:	f8730024 	swi	r3, r19, 36
			vop_time_increment_resolution_bits = tmp_res0;
20023eb0:	e8730024 	lwi	r3, r19, 36
20023eb4:	a46300ff 	andi	r3, r3, 255
20023eb8:	b0002006 	imm	8198
20023ebc:	f0601e40 	sbi	r3, r0, 7744	// 20061e40 <vop_time_increment_resolution_bits>
20023ec0:	b8000010 	bri	16		// 20023ed0
		} else {
			vop_time_increment_resolution_bits = 1;
20023ec4:	30600001 	addik	r3, r0, 1
20023ec8:	b0002006 	imm	8198
20023ecc:	f0601e40 	sbi	r3, r0, 7744	// 20061e40 <vop_time_increment_resolution_bits>
		}
		BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
20023ed0:	30730034 	addik	r3, r19, 52
20023ed4:	30a00001 	addik	r5, r0, 1
20023ed8:	b0002006 	imm	8198
20023edc:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023ee0:	10e30000 	addk	r7, r3, r0
20023ee4:	b0002004 	imm	8196
20023ee8:	31004c90 	addik	r8, r0, 19600
20023eec:	b9f4e014 	brlid	r15, -8172	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023ef0:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "fixed_vop_rate                           ");
20023ef4:	30730034 	addik	r3, r19, 52
20023ef8:	30a00001 	addik	r5, r0, 1
20023efc:	b0002006 	imm	8198
20023f00:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023f04:	10e30000 	addk	r7, r3, r0
20023f08:	b0002004 	imm	8196
20023f0c:	31004e34 	addik	r8, r0, 20020
20023f10:	b9f4dff0 	brlid	r15, -8208	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023f14:	80000000 	or	r0, r0, r0
		tmp_res1 = res[0];
20023f18:	e8730034 	lwi	r3, r19, 52
20023f1c:	f8730028 	swi	r3, r19, 40
		fixed_vop_rate = tmp_res1 == 1;
20023f20:	e8930028 	lwi	r4, r19, 40
20023f24:	30600001 	addik	r3, r0, 1
20023f28:	88641c00 	pcmpeq	r3, r4, r3
20023f2c:	a46300ff 	andi	r3, r3, 255
20023f30:	f873002c 	swi	r3, r19, 44
		if (fixed_vop_rate) {
20023f34:	e873002c 	lwi	r3, r19, 44
20023f38:	bc030038 	beqi	r3, 56		// 20023f70
			local_vop_time_increment_resolution_bits = vop_time_increment_resolution_bits;
20023f3c:	b0002006 	imm	8198
20023f40:	e0601e40 	lbui	r3, r0, 7744	// 20061e40 <vop_time_increment_resolution_bits>
20023f44:	f0730030 	sbi	r3, r19, 48
			BitstreamReadUtils_vld_u_name(local_vop_time_increment_resolution_bits, fifo, res, "vop_time_increment_resolution_bits                           ");
20023f48:	e0930030 	lbui	r4, r19, 48
20023f4c:	30730034 	addik	r3, r19, 52
20023f50:	10a40000 	addk	r5, r4, r0
20023f54:	b0002006 	imm	8198
20023f58:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023f5c:	10e30000 	addk	r7, r3, r0
20023f60:	b0002004 	imm	8196
20023f64:	31004e60 	addik	r8, r0, 20064
20023f68:	b9f4df98 	brlid	r15, -8296	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023f6c:	80000000 	or	r0, r0, r0
		}
		BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
20023f70:	30730034 	addik	r3, r19, 52
20023f74:	30a00001 	addik	r5, r0, 1
20023f78:	b0002006 	imm	8198
20023f7c:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20023f80:	10e30000 	addk	r7, r3, r0
20023f84:	b0002004 	imm	8196
20023f88:	31004c90 	addik	r8, r0, 19600
20023f8c:	b9f4df74 	brlid	r15, -8332	// 20021f00 <BitstreamReadUtils_vld_u_name>
20023f90:	80000000 	or	r0, r0, r0
	
		// Update ports indexes
		
	}
20023f94:	e9e10000 	lwi	r15, r1, 0
20023f98:	10330000 	addk	r1, r19, r0
20023f9c:	ea610038 	lwi	r19, r1, 56
20023fa0:	3021003c 	addik	r1, r1, 60
20023fa4:	b60f0008 	rtsd	r15, 8
20023fa8:	80000000 	or	r0, r0, r0

20023fac <isSchedulable_read_vol_video_object_layer_width>:
	static i32 isSchedulable_read_vol_video_object_layer_width() {
20023fac:	3021ffec 	addik	r1, r1, -20
20023fb0:	fa610010 	swi	r19, r1, 16
20023fb4:	12610000 	addk	r19, r1, r0
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20023fb8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20023fbc:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
20023fc0:	e0730004 	lbui	r3, r19, 4
20023fc4:	10631800 	addk	r3, r3, r3
20023fc8:	b0002006 	imm	8198
20023fcc:	30631e20 	addik	r3, r3, 7712
20023fd0:	e4630000 	lhui	r3, r3, 0
20023fd4:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20023fd8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20023fdc:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
20023fe0:	e4b30006 	lhui	r5, r19, 6
20023fe4:	e0730008 	lbui	r3, r19, 8
20023fe8:	3063ffff 	addik	r3, r3, -1
20023fec:	64830403 	bslli	r4, r3, 3
20023ff0:	30600001 	addik	r3, r0, 1
20023ff4:	16442801 	cmp	r18, r4, r5
20023ff8:	bcb20008 	bgei	r18, 8		// 20024000
20023ffc:	10600000 	addk	r3, r0, r0
20024000:	a46300ff 	andi	r3, r3, 255
20024004:	f873000c 	swi	r3, r19, 12
		return result;
20024008:	e873000c 	lwi	r3, r19, 12
	}
2002400c:	10330000 	addk	r1, r19, r0
20024010:	ea610010 	lwi	r19, r1, 16
20024014:	30210014 	addik	r1, r1, 20
20024018:	b60f0008 	rtsd	r15, 8
2002401c:	80000000 	or	r0, r0, r0

20024020 <read_vol_video_object_layer_width>:
	
	static void read_vol_video_object_layer_width() {
20024020:	3021ffd0 	addik	r1, r1, -48
20024024:	f9e10000 	swi	r15, r1, 0
20024028:	fa61002c 	swi	r19, r1, 44
2002402c:	12610000 	addk	r19, r1, r0
		i32 tmp_res;
		i32 tmp_res0;
		u16 local_video_object_layer_width;
		u16 local_video_object_layer_height;
	
		BitstreamReadUtils_vld_u_name(13, fifo, res, "video_object_layer_width                           ");
20024030:	30730028 	addik	r3, r19, 40
20024034:	30a0000d 	addik	r5, r0, 13
20024038:	b0002006 	imm	8198
2002403c:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20024040:	10e30000 	addk	r7, r3, r0
20024044:	b0002004 	imm	8196
20024048:	31004ea0 	addik	r8, r0, 20128
2002404c:	b9f4deb4 	brlid	r15, -8524	// 20021f00 <BitstreamReadUtils_vld_u_name>
20024050:	80000000 	or	r0, r0, r0
		tmp_res = res[0];
20024054:	e8730028 	lwi	r3, r19, 40
20024058:	f873001c 	swi	r3, r19, 28
		video_object_layer_width = tmp_res;
2002405c:	e873001c 	lwi	r3, r19, 28
20024060:	b0000000 	imm	0
20024064:	a463ffff 	andi	r3, r3, -1
20024068:	b0002006 	imm	8198
2002406c:	f4601e42 	shi	r3, r0, 7746	// 20061e42 <video_object_layer_width>
		BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
20024070:	30730028 	addik	r3, r19, 40
20024074:	30a00001 	addik	r5, r0, 1
20024078:	b0002006 	imm	8198
2002407c:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20024080:	10e30000 	addk	r7, r3, r0
20024084:	b0002004 	imm	8196
20024088:	31004c90 	addik	r8, r0, 19600
2002408c:	b9f4de74 	brlid	r15, -8588	// 20021f00 <BitstreamReadUtils_vld_u_name>
20024090:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(13, fifo, res, "video_object_layer_height                           ");
20024094:	30730028 	addik	r3, r19, 40
20024098:	30a0000d 	addik	r5, r0, 13
2002409c:	b0002006 	imm	8198
200240a0:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
200240a4:	10e30000 	addk	r7, r3, r0
200240a8:	b0002004 	imm	8196
200240ac:	31004ed4 	addik	r8, r0, 20180
200240b0:	b9f4de50 	brlid	r15, -8624	// 20021f00 <BitstreamReadUtils_vld_u_name>
200240b4:	80000000 	or	r0, r0, r0
		tmp_res0 = res[0];
200240b8:	e8730028 	lwi	r3, r19, 40
200240bc:	f8730020 	swi	r3, r19, 32
		video_object_layer_height = tmp_res0;
200240c0:	e8730020 	lwi	r3, r19, 32
200240c4:	b0000000 	imm	0
200240c8:	a463ffff 	andi	r3, r3, -1
200240cc:	b0002006 	imm	8198
200240d0:	f4601e44 	shi	r3, r0, 7748	// 20061e44 <video_object_layer_height>
		local_video_object_layer_width = video_object_layer_width;
200240d4:	b0002006 	imm	8198
200240d8:	e4601e42 	lhui	r3, r0, 7746	// 20061e42 <video_object_layer_width>
200240dc:	f4730024 	shi	r3, r19, 36
		local_video_object_layer_height = video_object_layer_height;
200240e0:	b0002006 	imm	8198
200240e4:	e4601e44 	lhui	r3, r0, 7748	// 20061e44 <video_object_layer_height>
200240e8:	f4730026 	shi	r3, r19, 38
		mb_pic = local_video_object_layer_width * local_video_object_layer_height / 256;
200240ec:	e4930024 	lhui	r4, r19, 36
200240f0:	e4730026 	lhui	r3, r19, 38
200240f4:	40641800 	mul	r3, r4, r3
200240f8:	6483021f 	bsrai	r4, r3, 31
200240fc:	64840018 	bsrli	r4, r4, 24
20024100:	10641800 	addk	r3, r4, r3
20024104:	64630208 	bsrai	r3, r3, 8
20024108:	b0000000 	imm	0
2002410c:	a463ffff 	andi	r3, r3, -1
20024110:	b0002006 	imm	8198
20024114:	f4601e46 	shi	r3, r0, 7750	// 20061e46 <mb_pic>
		BitstreamReadUtils_vld_u_name(1, fifo, res, "interlaced                           ");
20024118:	30730028 	addik	r3, r19, 40
2002411c:	30a00001 	addik	r5, r0, 1
20024120:	b0002006 	imm	8198
20024124:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20024128:	10e30000 	addk	r7, r3, r0
2002412c:	b0002004 	imm	8196
20024130:	31004f0c 	addik	r8, r0, 20236
20024134:	b9f4ddcc 	brlid	r15, -8756	// 20021f00 <BitstreamReadUtils_vld_u_name>
20024138:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "obmc_disable                           ");
2002413c:	30730028 	addik	r3, r19, 40
20024140:	30a00001 	addik	r5, r0, 1
20024144:	b0002006 	imm	8198
20024148:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
2002414c:	10e30000 	addk	r7, r3, r0
20024150:	b0002004 	imm	8196
20024154:	31004f34 	addik	r8, r0, 20276
20024158:	b9f4dda8 	brlid	r15, -8792	// 20021f00 <BitstreamReadUtils_vld_u_name>
2002415c:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "sprite_enable                           ");
20024160:	30730028 	addik	r3, r19, 40
20024164:	30a00001 	addik	r5, r0, 1
20024168:	b0002006 	imm	8198
2002416c:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20024170:	10e30000 	addk	r7, r3, r0
20024174:	b0002004 	imm	8196
20024178:	31004f5c 	addik	r8, r0, 20316
2002417c:	b9f4dd84 	brlid	r15, -8828	// 20021f00 <BitstreamReadUtils_vld_u_name>
20024180:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "not_8_bit                           ");
20024184:	30730028 	addik	r3, r19, 40
20024188:	30a00001 	addik	r5, r0, 1
2002418c:	b0002006 	imm	8198
20024190:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20024194:	10e30000 	addk	r7, r3, r0
20024198:	b0002004 	imm	8196
2002419c:	31004f88 	addik	r8, r0, 20360
200241a0:	b9f4dd60 	brlid	r15, -8864	// 20021f00 <BitstreamReadUtils_vld_u_name>
200241a4:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "quant_type                           ");
200241a8:	30730028 	addik	r3, r19, 40
200241ac:	30a00001 	addik	r5, r0, 1
200241b0:	b0002006 	imm	8198
200241b4:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
200241b8:	10e30000 	addk	r7, r3, r0
200241bc:	b0002004 	imm	8196
200241c0:	31004fb0 	addik	r8, r0, 20400
200241c4:	b9f4dd3c 	brlid	r15, -8900	// 20021f00 <BitstreamReadUtils_vld_u_name>
200241c8:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "complexity_estimation_disable                           ");
200241cc:	30730028 	addik	r3, r19, 40
200241d0:	30a00001 	addik	r5, r0, 1
200241d4:	b0002006 	imm	8198
200241d8:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
200241dc:	10e30000 	addk	r7, r3, r0
200241e0:	b0002004 	imm	8196
200241e4:	31004fd8 	addik	r8, r0, 20440
200241e8:	b9f4dd18 	brlid	r15, -8936	// 20021f00 <BitstreamReadUtils_vld_u_name>
200241ec:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "resync_marker_disable                           ");
200241f0:	30730028 	addik	r3, r19, 40
200241f4:	30a00001 	addik	r5, r0, 1
200241f8:	b0002006 	imm	8198
200241fc:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20024200:	10e30000 	addk	r7, r3, r0
20024204:	b0002004 	imm	8196
20024208:	31005014 	addik	r8, r0, 20500
2002420c:	b9f4dcf4 	brlid	r15, -8972	// 20021f00 <BitstreamReadUtils_vld_u_name>
20024210:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "data_partitioned                           ");
20024214:	30730028 	addik	r3, r19, 40
20024218:	30a00001 	addik	r5, r0, 1
2002421c:	b0002006 	imm	8198
20024220:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20024224:	10e30000 	addk	r7, r3, r0
20024228:	b0002004 	imm	8196
2002422c:	31005048 	addik	r8, r0, 20552
20024230:	b9f4dcd0 	brlid	r15, -9008	// 20021f00 <BitstreamReadUtils_vld_u_name>
20024234:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "scalability                           ");
20024238:	30730028 	addik	r3, r19, 40
2002423c:	30a00001 	addik	r5, r0, 1
20024240:	b0002006 	imm	8198
20024244:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20024248:	10e30000 	addk	r7, r3, r0
2002424c:	b0002004 	imm	8196
20024250:	31005074 	addik	r8, r0, 20596
20024254:	b9f4dcac 	brlid	r15, -9044	// 20021f00 <BitstreamReadUtils_vld_u_name>
20024258:	80000000 	or	r0, r0, r0
	
		// Update ports indexes
		
	}
2002425c:	e9e10000 	lwi	r15, r1, 0
20024260:	10330000 	addk	r1, r19, r0
20024264:	ea61002c 	lwi	r19, r1, 44
20024268:	30210030 	addik	r1, r1, 48
2002426c:	b60f0008 	rtsd	r15, 8
20024270:	80000000 	or	r0, r0, r0

20024274 <isSchedulable_read_vop>:
	static i32 isSchedulable_read_vop() {
20024274:	3021ffec 	addik	r1, r1, -20
20024278:	fa610010 	swi	r19, r1, 16
2002427c:	12610000 	addk	r19, r1, r0
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20024280:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20024284:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
20024288:	e0730004 	lbui	r3, r19, 4
2002428c:	10631800 	addk	r3, r3, r3
20024290:	b0002006 	imm	8198
20024294:	30631e20 	addik	r3, r3, 7712
20024298:	e4630000 	lhui	r3, r3, 0
2002429c:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
200242a0:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200242a4:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
200242a8:	e4b30006 	lhui	r5, r19, 6
200242ac:	e0730008 	lbui	r3, r19, 8
200242b0:	3063ffff 	addik	r3, r3, -1
200242b4:	64830403 	bslli	r4, r3, 3
200242b8:	30600001 	addik	r3, r0, 1
200242bc:	16442801 	cmp	r18, r4, r5
200242c0:	bcb20008 	bgei	r18, 8		// 200242c8
200242c4:	10600000 	addk	r3, r0, r0
200242c8:	a46300ff 	andi	r3, r3, 255
200242cc:	f873000c 	swi	r3, r19, 12
		return result;
200242d0:	e873000c 	lwi	r3, r19, 12
	}
200242d4:	10330000 	addk	r1, r19, r0
200242d8:	ea610010 	lwi	r19, r1, 16
200242dc:	30210014 	addik	r1, r1, 20
200242e0:	b60f0008 	rtsd	r15, 8
200242e4:	80000000 	or	r0, r0, r0

200242e8 <read_vop>:
	
	static void read_vop() {
200242e8:	3021ffd8 	addik	r1, r1, -40
200242ec:	f9e10000 	swi	r15, r1, 0
200242f0:	fa610024 	swi	r19, r1, 36
200242f4:	12610000 	addk	r19, r1, r0
		// Compute aligned port indexes
	
		i32 res[1];
		i32 tmp_res;
	
		mb_cnt = 0;
200242f8:	b0002006 	imm	8198
200242fc:	f8001e58 	swi	r0, r0, 7768	// 20061e58 <mb_cnt>
		BitstreamReadUtils_vld_u_name(2, fifo, res, "vop_coding_type                           ");
20024300:	30730020 	addik	r3, r19, 32
20024304:	30a00002 	addik	r5, r0, 2
20024308:	b0002006 	imm	8198
2002430c:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20024310:	10e30000 	addk	r7, r3, r0
20024314:	b0002004 	imm	8196
20024318:	3100509c 	addik	r8, r0, 20636
2002431c:	b9f4dbe4 	brlid	r15, -9244	// 20021f00 <BitstreamReadUtils_vld_u_name>
20024320:	80000000 	or	r0, r0, r0
		tmp_res = res[0];
20024324:	e8730020 	lwi	r3, r19, 32
20024328:	f873001c 	swi	r3, r19, 28
		vop_coding_type = tmp_res;
2002432c:	e873001c 	lwi	r3, r19, 28
20024330:	a46300ff 	andi	r3, r3, 255
20024334:	b0002006 	imm	8198
20024338:	f0601e48 	sbi	r3, r0, 7752	// 20061e48 <vop_coding_type>
	
		// Update ports indexes
		
	}
2002433c:	e9e10000 	lwi	r15, r1, 0
20024340:	10330000 	addk	r1, r19, r0
20024344:	ea610024 	lwi	r19, r1, 36
20024348:	30210028 	addik	r1, r1, 40
2002434c:	b60f0008 	rtsd	r15, 8
20024350:	80000000 	or	r0, r0, r0

20024354 <isSchedulable_read_vop_coding_type_supported>:
	static i32 isSchedulable_read_vop_coding_type_supported() {
20024354:	3021ffe4 	addik	r1, r1, -28
20024358:	fa610018 	swi	r19, r1, 24
2002435c:	12610000 	addk	r19, r1, r0
		u8 local_FIFO_SIZE;
		u8 local_vop_coding_type;
		i32 local_I_VOP;
		i32 local_P_VOP;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20024360:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20024364:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
20024368:	e0730004 	lbui	r3, r19, 4
2002436c:	10631800 	addk	r3, r3, r3
20024370:	b0002006 	imm	8198
20024374:	30631e20 	addik	r3, r3, 7712
20024378:	e4630000 	lhui	r3, r3, 0
2002437c:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20024380:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20024384:	f0730008 	sbi	r3, r19, 8
		local_vop_coding_type = vop_coding_type;
20024388:	b0002006 	imm	8198
2002438c:	e0601e48 	lbui	r3, r0, 7752	// 20061e48 <vop_coding_type>
20024390:	f0730009 	sbi	r3, r19, 9
		local_I_VOP = vldFunctions_I_VOP;
20024394:	f813000c 	swi	r0, r19, 12
		local_vop_coding_type = vop_coding_type;
20024398:	b0002006 	imm	8198
2002439c:	e0601e48 	lbui	r3, r0, 7752	// 20061e48 <vop_coding_type>
200243a0:	f0730009 	sbi	r3, r19, 9
		local_P_VOP = vldFunctions_P_VOP;
200243a4:	30600001 	addik	r3, r0, 1
200243a8:	f8730010 	swi	r3, r19, 16
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3 && (local_vop_coding_type == local_I_VOP || local_vop_coding_type == local_P_VOP);
200243ac:	e4930006 	lhui	r4, r19, 6
200243b0:	e0730008 	lbui	r3, r19, 8
200243b4:	3063ffff 	addik	r3, r3, -1
200243b8:	64630403 	bslli	r3, r3, 3
200243bc:	16432001 	cmp	r18, r3, r4
200243c0:	bc52002c 	blti	r18, 44		// 200243ec
200243c4:	e0930009 	lbui	r4, r19, 9
200243c8:	e873000c 	lwi	r3, r19, 12
200243cc:	88641800 	xor	r3, r4, r3
200243d0:	bc030014 	beqi	r3, 20		// 200243e4
200243d4:	e0930009 	lbui	r4, r19, 9
200243d8:	e8730010 	lwi	r3, r19, 16
200243dc:	88641800 	xor	r3, r4, r3
200243e0:	bc23000c 	bnei	r3, 12		// 200243ec
200243e4:	30600001 	addik	r3, r0, 1
200243e8:	b8000008 	bri	8		// 200243f0
200243ec:	10600000 	addk	r3, r0, r0
200243f0:	f8730014 	swi	r3, r19, 20
		return result;
200243f4:	e8730014 	lwi	r3, r19, 20
	}
200243f8:	10330000 	addk	r1, r19, r0
200243fc:	ea610018 	lwi	r19, r1, 24
20024400:	3021001c 	addik	r1, r1, 28
20024404:	b60f0008 	rtsd	r15, 8
20024408:	80000000 	or	r0, r0, r0

2002440c <read_vop_coding_type_supported>:
	
	static void read_vop_coding_type_supported() {
2002440c:	3021ffc8 	addik	r1, r1, -56
20024410:	f9e10000 	swi	r15, r1, 0
20024414:	fa610034 	swi	r19, r1, 52
20024418:	12610000 	addk	r19, r1, r0
		i32 time_incr;
		i32 tmp_res;
		u8 local_vop_time_increment_resolution_bits;
		i32 tmp_res0;
	
		modulo_time_base = 1;
2002441c:	30600001 	addik	r3, r0, 1
20024420:	f873001c 	swi	r3, r19, 28
		time_incr = 0;
20024424:	f8130020 	swi	r0, r19, 32
		while (modulo_time_base) {
20024428:	b8000050 	bri	80		// 20024478
			BitstreamReadUtils_vld_u_name(1, fifo, res, "modulo_time_base                           ");
2002442c:	30730030 	addik	r3, r19, 48
20024430:	30a00001 	addik	r5, r0, 1
20024434:	b0002006 	imm	8198
20024438:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
2002443c:	10e30000 	addk	r7, r3, r0
20024440:	b0002004 	imm	8196
20024444:	310050c8 	addik	r8, r0, 20680
20024448:	b9f4dab8 	brlid	r15, -9544	// 20021f00 <BitstreamReadUtils_vld_u_name>
2002444c:	80000000 	or	r0, r0, r0
			tmp_res = res[0];
20024450:	e8730030 	lwi	r3, r19, 48
20024454:	f8730024 	swi	r3, r19, 36
			modulo_time_base = tmp_res == 1;
20024458:	e8930024 	lwi	r4, r19, 36
2002445c:	30600001 	addik	r3, r0, 1
20024460:	88641c00 	pcmpeq	r3, r4, r3
20024464:	a46300ff 	andi	r3, r3, 255
20024468:	f873001c 	swi	r3, r19, 28
			time_incr = time_incr + 1;
2002446c:	e8730020 	lwi	r3, r19, 32
20024470:	30630001 	addik	r3, r3, 1
20024474:	f8730020 	swi	r3, r19, 32
		u8 local_vop_time_increment_resolution_bits;
		i32 tmp_res0;
	
		modulo_time_base = 1;
		time_incr = 0;
		while (modulo_time_base) {
20024478:	e873001c 	lwi	r3, r19, 28
2002447c:	bc23ffb0 	bnei	r3, -80		// 2002442c
			BitstreamReadUtils_vld_u_name(1, fifo, res, "modulo_time_base                           ");
			tmp_res = res[0];
			modulo_time_base = tmp_res == 1;
			time_incr = time_incr + 1;
		}
		BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
20024480:	30730030 	addik	r3, r19, 48
20024484:	30a00001 	addik	r5, r0, 1
20024488:	b0002006 	imm	8198
2002448c:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20024490:	10e30000 	addk	r7, r3, r0
20024494:	b0002004 	imm	8196
20024498:	31004c90 	addik	r8, r0, 19600
2002449c:	b9f4da64 	brlid	r15, -9628	// 20021f00 <BitstreamReadUtils_vld_u_name>
200244a0:	80000000 	or	r0, r0, r0
		local_vop_time_increment_resolution_bits = vop_time_increment_resolution_bits;
200244a4:	b0002006 	imm	8198
200244a8:	e0601e40 	lbui	r3, r0, 7744	// 20061e40 <vop_time_increment_resolution_bits>
200244ac:	f0730028 	sbi	r3, r19, 40
		BitstreamReadUtils_vld_u_name(local_vop_time_increment_resolution_bits, fifo, res, "vop_time_increment                           ");
200244b0:	e0930028 	lbui	r4, r19, 40
200244b4:	30730030 	addik	r3, r19, 48
200244b8:	10a40000 	addk	r5, r4, r0
200244bc:	b0002006 	imm	8198
200244c0:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
200244c4:	10e30000 	addk	r7, r3, r0
200244c8:	b0002004 	imm	8196
200244cc:	310050f4 	addik	r8, r0, 20724
200244d0:	b9f4da30 	brlid	r15, -9680	// 20021f00 <BitstreamReadUtils_vld_u_name>
200244d4:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
200244d8:	30730030 	addik	r3, r19, 48
200244dc:	30a00001 	addik	r5, r0, 1
200244e0:	b0002006 	imm	8198
200244e4:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
200244e8:	10e30000 	addk	r7, r3, r0
200244ec:	b0002004 	imm	8196
200244f0:	31004c90 	addik	r8, r0, 19600
200244f4:	b9f4da0c 	brlid	r15, -9716	// 20021f00 <BitstreamReadUtils_vld_u_name>
200244f8:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "vop_coded                           ");
200244fc:	30730030 	addik	r3, r19, 48
20024500:	30a00001 	addik	r5, r0, 1
20024504:	b0002006 	imm	8198
20024508:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
2002450c:	10e30000 	addk	r7, r3, r0
20024510:	b0002004 	imm	8196
20024514:	31005124 	addik	r8, r0, 20772
20024518:	b9f4d9e8 	brlid	r15, -9752	// 20021f00 <BitstreamReadUtils_vld_u_name>
2002451c:	80000000 	or	r0, r0, r0
		tmp_res0 = res[0];
20024520:	e8730030 	lwi	r3, r19, 48
20024524:	f873002c 	swi	r3, r19, 44
		vop_coded = tmp_res0 == 1;
20024528:	e893002c 	lwi	r4, r19, 44
2002452c:	30600001 	addik	r3, r0, 1
20024530:	88641c00 	pcmpeq	r3, r4, r3
20024534:	a46300ff 	andi	r3, r3, 255
20024538:	b0002006 	imm	8198
2002453c:	f8601e4c 	swi	r3, r0, 7756	// 20061e4c <vop_coded>
	
		// Update ports indexes
		
	}
20024540:	e9e10000 	lwi	r15, r1, 0
20024544:	10330000 	addk	r1, r19, r0
20024548:	ea610034 	lwi	r19, r1, 52
2002454c:	30210038 	addik	r1, r1, 56
20024550:	b60f0008 	rtsd	r15, 8
20024554:	80000000 	or	r0, r0, r0

20024558 <isSchedulable_read_vop_coding_type_unsupported>:
	static i32 isSchedulable_read_vop_coding_type_unsupported() {
20024558:	3021ffe8 	addik	r1, r1, -24
2002455c:	fa610014 	swi	r19, r1, 20
20024560:	12610000 	addk	r19, r1, r0
		i32 result;
		u8 local_vop_coding_type;
		i32 local_I_VOP;
		i32 local_P_VOP;
	
		local_vop_coding_type = vop_coding_type;
20024564:	b0002006 	imm	8198
20024568:	e0601e48 	lbui	r3, r0, 7752	// 20061e48 <vop_coding_type>
2002456c:	f0730004 	sbi	r3, r19, 4
		local_I_VOP = vldFunctions_I_VOP;
20024570:	f8130008 	swi	r0, r19, 8
		local_vop_coding_type = vop_coding_type;
20024574:	b0002006 	imm	8198
20024578:	e0601e48 	lbui	r3, r0, 7752	// 20061e48 <vop_coding_type>
2002457c:	f0730004 	sbi	r3, r19, 4
		local_P_VOP = vldFunctions_P_VOP;
20024580:	30600001 	addik	r3, r0, 1
20024584:	f873000c 	swi	r3, r19, 12
		result = local_vop_coding_type != local_I_VOP && local_vop_coding_type != local_P_VOP;
20024588:	e0930004 	lbui	r4, r19, 4
2002458c:	e8730008 	lwi	r3, r19, 8
20024590:	88641800 	xor	r3, r4, r3
20024594:	bc03001c 	beqi	r3, 28		// 200245b0
20024598:	e0930004 	lbui	r4, r19, 4
2002459c:	e873000c 	lwi	r3, r19, 12
200245a0:	88641800 	xor	r3, r4, r3
200245a4:	bc03000c 	beqi	r3, 12		// 200245b0
200245a8:	30600001 	addik	r3, r0, 1
200245ac:	b8000008 	bri	8		// 200245b4
200245b0:	10600000 	addk	r3, r0, r0
200245b4:	f8730010 	swi	r3, r19, 16
		return result;
200245b8:	e8730010 	lwi	r3, r19, 16
	}
200245bc:	10330000 	addk	r1, r19, r0
200245c0:	ea610014 	lwi	r19, r1, 20
200245c4:	30210018 	addik	r1, r1, 24
200245c8:	b60f0008 	rtsd	r15, 8
200245cc:	80000000 	or	r0, r0, r0

200245d0 <read_vop_coding_type_unsupported>:
	
	static void read_vop_coding_type_unsupported() {
200245d0:	3021fff8 	addik	r1, r1, -8
200245d4:	fa610004 	swi	r19, r1, 4
200245d8:	12610000 	addk	r19, r1, r0
	
	
	
		// Update ports indexes
		
	}
200245dc:	10330000 	addk	r1, r19, r0
200245e0:	ea610004 	lwi	r19, r1, 4
200245e4:	30210008 	addik	r1, r1, 8
200245e8:	b60f0008 	rtsd	r15, 8
200245ec:	80000000 	or	r0, r0, r0

200245f0 <isSchedulable_read_vop_coded_coded>:
	static i32 isSchedulable_read_vop_coded_coded() {
200245f0:	3021ffe8 	addik	r1, r1, -24
200245f4:	fa610014 	swi	r19, r1, 20
200245f8:	12610000 	addk	r19, r1, r0
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
		i32 local_vop_coded;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
200245fc:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20024600:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
20024604:	e0730004 	lbui	r3, r19, 4
20024608:	10631800 	addk	r3, r3, r3
2002460c:	b0002006 	imm	8198
20024610:	30631e20 	addik	r3, r3, 7712
20024614:	e4630000 	lhui	r3, r3, 0
20024618:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
2002461c:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20024620:	f0730008 	sbi	r3, r19, 8
		local_vop_coded = vop_coded;
20024624:	b0002006 	imm	8198
20024628:	e8601e4c 	lwi	r3, r0, 7756	// 20061e4c <vop_coded>
2002462c:	f873000c 	swi	r3, r19, 12
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3 && local_vop_coded;
20024630:	e4930006 	lhui	r4, r19, 6
20024634:	e0730008 	lbui	r3, r19, 8
20024638:	3063ffff 	addik	r3, r3, -1
2002463c:	64630403 	bslli	r3, r3, 3
20024640:	16432001 	cmp	r18, r3, r4
20024644:	bc520014 	blti	r18, 20		// 20024658
20024648:	e873000c 	lwi	r3, r19, 12
2002464c:	bc03000c 	beqi	r3, 12		// 20024658
20024650:	30600001 	addik	r3, r0, 1
20024654:	b8000008 	bri	8		// 2002465c
20024658:	10600000 	addk	r3, r0, r0
2002465c:	f8730010 	swi	r3, r19, 16
		return result;
20024660:	e8730010 	lwi	r3, r19, 16
	}
20024664:	10330000 	addk	r1, r19, r0
20024668:	ea610014 	lwi	r19, r1, 20
2002466c:	30210018 	addik	r1, r1, 24
20024670:	b60f0008 	rtsd	r15, 8
20024674:	80000000 	or	r0, r0, r0

20024678 <read_vop_coded_coded>:
	
	static void read_vop_coded_coded() {
20024678:	3021ff78 	addik	r1, r1, -136
2002467c:	f9e10000 	swi	r15, r1, 0
20024680:	fa610084 	swi	r19, r1, 132
20024684:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20024688:	b0002006 	imm	8198
2002468c:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20024690:	a46301ff 	andi	r3, r3, 511
20024694:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_WIDTH = index_WIDTH % SIZE_WIDTH;
20024698:	b0002006 	imm	8198
2002469c:	e8601e08 	lwi	r3, r0, 7688	// 20061e08 <index_WIDTH>
200246a0:	a46301ff 	andi	r3, r3, 511
200246a4:	f8730028 	swi	r3, r19, 40
		i32 index_aligned_HEIGHT = index_HEIGHT % SIZE_HEIGHT;
200246a8:	b0002006 	imm	8198
200246ac:	e8601e10 	lwi	r3, r0, 7696	// 20061e10 <index_HEIGHT>
200246b0:	a46301ff 	andi	r3, r3, 511
200246b4:	f873002c 	swi	r3, r19, 44
		i32 local_FCODE_SHIFT;
		i32 local_FCODE_MASK;
		u16 local_video_object_layer_width;
		u16 local_video_object_layer_height;
	
		local_vop_coding_type = vop_coding_type;
200246b8:	b0002006 	imm	8198
200246bc:	e0601e48 	lbui	r3, r0, 7752	// 20061e48 <vop_coding_type>
200246c0:	f0730030 	sbi	r3, r19, 48
		local_P_VOP = vldFunctions_P_VOP;
200246c4:	30600001 	addik	r3, r0, 1
200246c8:	f8730034 	swi	r3, r19, 52
		if (local_vop_coding_type == local_P_VOP) {
200246cc:	e0930030 	lbui	r4, r19, 48
200246d0:	e8730034 	lwi	r3, r19, 52
200246d4:	88641800 	xor	r3, r4, r3
200246d8:	bc23004c 	bnei	r3, 76		// 20024724
			BitstreamReadUtils_vld_u_name(1, fifo, res, "vop_rounding_type                           ");
200246dc:	30730080 	addik	r3, r19, 128
200246e0:	30a00001 	addik	r5, r0, 1
200246e4:	b0002006 	imm	8198
200246e8:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
200246ec:	10e30000 	addk	r7, r3, r0
200246f0:	b0002004 	imm	8196
200246f4:	3100514c 	addik	r8, r0, 20812
200246f8:	b9f4d808 	brlid	r15, -10232	// 20021f00 <BitstreamReadUtils_vld_u_name>
200246fc:	80000000 	or	r0, r0, r0
			tmp_res = res[0];
20024700:	e8730080 	lwi	r3, r19, 128
20024704:	f8730038 	swi	r3, r19, 56
			round = tmp_res == 1;
20024708:	e8930038 	lwi	r4, r19, 56
2002470c:	30600001 	addik	r3, r0, 1
20024710:	88641c00 	pcmpeq	r3, r4, r3
20024714:	a46300ff 	andi	r3, r3, 255
20024718:	b0002006 	imm	8198
2002471c:	f8601e50 	swi	r3, r0, 7760	// 20061e50 <round>
20024720:	b800000c 	bri	12		// 2002472c
		} else {
			round = 0;
20024724:	b0002006 	imm	8198
20024728:	f8001e50 	swi	r0, r0, 7760	// 20061e50 <round>
		}
		BitstreamReadUtils_vld_u_name(3, fifo, res, "intra_dc_vlc_thr                           ");
2002472c:	30730080 	addik	r3, r19, 128
20024730:	30a00003 	addik	r5, r0, 3
20024734:	b0002006 	imm	8198
20024738:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
2002473c:	10e30000 	addk	r7, r3, r0
20024740:	b0002004 	imm	8196
20024744:	3100517c 	addik	r8, r0, 20860
20024748:	b9f4d7b8 	brlid	r15, -10312	// 20021f00 <BitstreamReadUtils_vld_u_name>
2002474c:	80000000 	or	r0, r0, r0
		tmp_res0 = res[0];
20024750:	e8730080 	lwi	r3, r19, 128
20024754:	f873003c 	swi	r3, r19, 60
		tmp_intra_dc_threshold_table = intra_dc_threshold_table[tmp_res0];
20024758:	e873003c 	lwi	r3, r19, 60
2002475c:	b0002004 	imm	8196
20024760:	30634860 	addik	r3, r3, 18528
20024764:	e0630000 	lbui	r3, r3, 0
20024768:	f0730040 	sbi	r3, r19, 64
		intra_dc_vlc_thr = tmp_intra_dc_threshold_table;
2002476c:	e0730040 	lbui	r3, r19, 64
20024770:	b0002006 	imm	8198
20024774:	f0601e56 	sbi	r3, r0, 7766	// 20061e56 <intra_dc_vlc_thr>
		BitstreamReadUtils_vld_u_name(5, fifo, res, "vop_quant                           ");
20024778:	30730080 	addik	r3, r19, 128
2002477c:	30a00005 	addik	r5, r0, 5
20024780:	b0002006 	imm	8198
20024784:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20024788:	10e30000 	addk	r7, r3, r0
2002478c:	b0002004 	imm	8196
20024790:	310051a8 	addik	r8, r0, 20904
20024794:	b9f4d76c 	brlid	r15, -10388	// 20021f00 <BitstreamReadUtils_vld_u_name>
20024798:	80000000 	or	r0, r0, r0
		tmp_res1 = res[0];
2002479c:	e8730080 	lwi	r3, r19, 128
200247a0:	f8730044 	swi	r3, r19, 68
		vop_quant = tmp_res1;
200247a4:	e8730044 	lwi	r3, r19, 68
200247a8:	90630060 	sext8	r3, r3
200247ac:	b0002006 	imm	8198
200247b0:	f0601e54 	sbi	r3, r0, 7764	// 20061e54 <vop_quant>
		local_vop_quant = vop_quant;
200247b4:	b0002006 	imm	8198
200247b8:	e0601e54 	lbui	r3, r0, 7764	// 20061e54 <vop_quant>
200247bc:	f0730048 	sbi	r3, r19, 72
		prev_quant = local_vop_quant;
200247c0:	e0730048 	lbui	r3, r19, 72
200247c4:	b0002006 	imm	8198
200247c8:	f0601e55 	sbi	r3, r0, 7765	// 20061e55 <prev_quant>
		local_vop_coding_type = vop_coding_type;
200247cc:	b0002006 	imm	8198
200247d0:	e0601e48 	lbui	r3, r0, 7752	// 20061e48 <vop_coding_type>
200247d4:	f0730030 	sbi	r3, r19, 48
		local_I_VOP = vldFunctions_I_VOP;
200247d8:	f813004c 	swi	r0, r19, 76
		if (local_vop_coding_type != local_I_VOP) {
200247dc:	e0930030 	lbui	r4, r19, 48
200247e0:	e873004c 	lwi	r3, r19, 76
200247e4:	88641800 	xor	r3, r4, r3
200247e8:	bc030044 	beqi	r3, 68		// 2002482c
			BitstreamReadUtils_vld_u_name(3, fifo, res, "vop_fcode_forward                           ");
200247ec:	30730080 	addik	r3, r19, 128
200247f0:	30a00003 	addik	r5, r0, 3
200247f4:	b0002006 	imm	8198
200247f8:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
200247fc:	10e30000 	addk	r7, r3, r0
20024800:	b0002004 	imm	8196
20024804:	310051d0 	addik	r8, r0, 20944
20024808:	b9f4d6f8 	brlid	r15, -10504	// 20021f00 <BitstreamReadUtils_vld_u_name>
2002480c:	80000000 	or	r0, r0, r0
			tmp_res2 = res[0];
20024810:	e8730080 	lwi	r3, r19, 128
20024814:	f8730050 	swi	r3, r19, 80
			fcode = tmp_res2;
20024818:	e8730050 	lwi	r3, r19, 80
2002481c:	90630060 	sext8	r3, r3
20024820:	b0002006 	imm	8198
20024824:	f0601e57 	sbi	r3, r0, 7767	// 20061e57 <fcode>
20024828:	b800000c 	bri	12		// 20024834
		} else {
			fcode = 0;
2002482c:	b0002006 	imm	8198
20024830:	f0001e57 	sbi	r0, r0, 7767	// 20061e57 <fcode>
		}
		local_vop_coding_type = vop_coding_type;
20024834:	b0002006 	imm	8198
20024838:	e0601e48 	lbui	r3, r0, 7752	// 20061e48 <vop_coding_type>
2002483c:	f0730030 	sbi	r3, r19, 48
		local_B_VOP = vldFunctions_B_VOP;
20024840:	30600002 	addik	r3, r0, 2
20024844:	f8730054 	swi	r3, r19, 84
		if (local_vop_coding_type == local_B_VOP) {
20024848:	e0930030 	lbui	r4, r19, 48
2002484c:	e8730054 	lwi	r3, r19, 84
20024850:	88641800 	xor	r3, r4, r3
20024854:	bc230028 	bnei	r3, 40		// 2002487c
			BitstreamReadUtils_vld_u_name(3, fifo, res, "vop_fcode_backward                           ");
20024858:	30730080 	addik	r3, r19, 128
2002485c:	30a00003 	addik	r5, r0, 3
20024860:	b0002006 	imm	8198
20024864:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20024868:	10e30000 	addk	r7, r3, r0
2002486c:	b0002004 	imm	8196
20024870:	31005200 	addik	r8, r0, 20992
20024874:	b9f4d68c 	brlid	r15, -10612	// 20021f00 <BitstreamReadUtils_vld_u_name>
20024878:	80000000 	or	r0, r0, r0
		}
		local_NEWVOP = ConstantsBtype_NEWVOP;
2002487c:	30600800 	addik	r3, r0, 2048
20024880:	f8730058 	swi	r3, r19, 88
		local_vop_coding_type = vop_coding_type;
20024884:	b0002006 	imm	8198
20024888:	e0601e48 	lbui	r3, r0, 7752	// 20061e48 <vop_coding_type>
2002488c:	f0730030 	sbi	r3, r19, 48
		local_I_VOP = vldFunctions_I_VOP;
20024890:	f813004c 	swi	r0, r19, 76
		if (local_vop_coding_type == local_I_VOP) {
20024894:	e0930030 	lbui	r4, r19, 48
20024898:	e873004c 	lwi	r3, r19, 76
2002489c:	88641800 	xor	r3, r4, r3
200248a0:	bc230018 	bnei	r3, 24		// 200248b8
			local_INTRA = ConstantsBtype_INTRA;
200248a4:	30600400 	addik	r3, r0, 1024	// 400 <_HEAP_SIZE>
200248a8:	f873005c 	swi	r3, r19, 92
			tmp_if = local_INTRA;
200248ac:	e873005c 	lwi	r3, r19, 92
200248b0:	f873001c 	swi	r3, r19, 28
200248b4:	b8000014 	bri	20		// 200248c8
		} else {
			local_INTER = ConstantsBtype_INTER;
200248b8:	30600200 	addik	r3, r0, 512
200248bc:	f8730060 	swi	r3, r19, 96
			tmp_if = local_INTER;
200248c0:	e8730060 	lwi	r3, r19, 96
200248c4:	f873001c 	swi	r3, r19, 28
		}
		cmd = local_NEWVOP | tmp_if;
200248c8:	e8930058 	lwi	r4, r19, 88
200248cc:	e873001c 	lwi	r3, r19, 28
200248d0:	80641800 	or	r3, r4, r3
200248d4:	f8730064 	swi	r3, r19, 100
		local_round = round;
200248d8:	b0002006 	imm	8198
200248dc:	e8601e50 	lwi	r3, r0, 7760	// 20061e50 <round>
200248e0:	f8730068 	swi	r3, r19, 104
		if (local_round) {
200248e4:	e8730068 	lwi	r3, r19, 104
200248e8:	bc030018 	beqi	r3, 24		// 20024900
			local_ROUND_TYPE = Constants_ROUND_TYPE;
200248ec:	30600020 	addik	r3, r0, 32	// 20 <_vector_hw_exception>
200248f0:	f873006c 	swi	r3, r19, 108
			tmp_if0 = local_ROUND_TYPE;
200248f4:	e873006c 	lwi	r3, r19, 108
200248f8:	f8730020 	swi	r3, r19, 32
200248fc:	b8000008 	bri	8		// 20024904
		} else {
			tmp_if0 = 0;
20024900:	f8130020 	swi	r0, r19, 32
		}
		cmd = cmd | tmp_if0;
20024904:	e8930064 	lwi	r4, r19, 100
20024908:	e8730020 	lwi	r3, r19, 32
2002490c:	80641800 	or	r3, r4, r3
20024910:	f8730064 	swi	r3, r19, 100
		local_fcode = fcode;
20024914:	b0002006 	imm	8198
20024918:	e0601e57 	lbui	r3, r0, 7767	// 20061e57 <fcode>
2002491c:	f0730070 	sbi	r3, r19, 112
		local_FCODE_SHIFT = Constants_FCODE_SHIFT;
20024920:	30600006 	addik	r3, r0, 6
20024924:	f8730074 	swi	r3, r19, 116
		local_FCODE_MASK = ConstantsBtype_FCODE_MASK;
20024928:	306001c0 	addik	r3, r0, 448
2002492c:	f8730078 	swi	r3, r19, 120
		cmd = cmd | local_fcode << local_FCODE_SHIFT & local_FCODE_MASK;
20024930:	e0730070 	lbui	r3, r19, 112
20024934:	90830060 	sext8	r4, r3
20024938:	e8730074 	lwi	r3, r19, 116
2002493c:	44841c00 	bsll	r4, r4, r3
20024940:	e8730078 	lwi	r3, r19, 120
20024944:	84641800 	and	r3, r4, r3
20024948:	e8930064 	lwi	r4, r19, 100
2002494c:	80641800 	or	r3, r4, r3
20024950:	f8730064 	swi	r3, r19, 100
		tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE] = cmd;
20024954:	b0002004 	imm	8196
20024958:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
2002495c:	e8830004 	lwi	r4, r3, 4
20024960:	b0002006 	imm	8198
20024964:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20024968:	a46301ff 	andi	r3, r3, 511
2002496c:	10631800 	addk	r3, r3, r3
20024970:	10641800 	addk	r3, r4, r3
20024974:	e8930064 	lwi	r4, r19, 100
20024978:	90840061 	sext16	r4, r4
2002497c:	f4830000 	shi	r4, r3, 0
		local_video_object_layer_width = video_object_layer_width;
20024980:	b0002006 	imm	8198
20024984:	e4601e42 	lhui	r3, r0, 7746	// 20061e42 <video_object_layer_width>
20024988:	f473007c 	shi	r3, r19, 124
		tokens_BTYPE[(index_BTYPE + (1)) % SIZE_BTYPE] = local_video_object_layer_width / 16;
2002498c:	b0002004 	imm	8196
20024990:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20024994:	e8830004 	lwi	r4, r3, 4
20024998:	b0002006 	imm	8198
2002499c:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
200249a0:	30630001 	addik	r3, r3, 1
200249a4:	a46301ff 	andi	r3, r3, 511
200249a8:	10631800 	addk	r3, r3, r3
200249ac:	10641800 	addk	r3, r4, r3
200249b0:	e493007c 	lhui	r4, r19, 124
200249b4:	64840004 	bsrli	r4, r4, 4
200249b8:	b0000000 	imm	0
200249bc:	a484ffff 	andi	r4, r4, -1
200249c0:	90840061 	sext16	r4, r4
200249c4:	f4830000 	shi	r4, r3, 0
		local_video_object_layer_height = video_object_layer_height;
200249c8:	b0002006 	imm	8198
200249cc:	e4601e44 	lhui	r3, r0, 7748	// 20061e44 <video_object_layer_height>
200249d0:	f473007e 	shi	r3, r19, 126
		tokens_BTYPE[(index_BTYPE + (2)) % SIZE_BTYPE] = local_video_object_layer_height / 16;
200249d4:	b0002004 	imm	8196
200249d8:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
200249dc:	e8830004 	lwi	r4, r3, 4
200249e0:	b0002006 	imm	8198
200249e4:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
200249e8:	30630002 	addik	r3, r3, 2
200249ec:	a46301ff 	andi	r3, r3, 511
200249f0:	10631800 	addk	r3, r3, r3
200249f4:	10641800 	addk	r3, r4, r3
200249f8:	e493007e 	lhui	r4, r19, 126
200249fc:	64840004 	bsrli	r4, r4, 4
20024a00:	b0000000 	imm	0
20024a04:	a484ffff 	andi	r4, r4, -1
20024a08:	90840061 	sext16	r4, r4
20024a0c:	f4830000 	shi	r4, r3, 0
		local_video_object_layer_width = video_object_layer_width;
20024a10:	b0002006 	imm	8198
20024a14:	e4601e42 	lhui	r3, r0, 7746	// 20061e42 <video_object_layer_width>
20024a18:	f473007c 	shi	r3, r19, 124
		tokens_WIDTH[(index_WIDTH + (0)) % SIZE_WIDTH] = local_video_object_layer_width / 16;
20024a1c:	b0002004 	imm	8196
20024a20:	e8607344 	lwi	r3, r0, 29508	// 20047344 <decoder_parser_parseheaders_WIDTH>
20024a24:	e8830004 	lwi	r4, r3, 4
20024a28:	b0002006 	imm	8198
20024a2c:	e8601e08 	lwi	r3, r0, 7688	// 20061e08 <index_WIDTH>
20024a30:	a46301ff 	andi	r3, r3, 511
20024a34:	10631800 	addk	r3, r3, r3
20024a38:	10641800 	addk	r3, r4, r3
20024a3c:	e493007c 	lhui	r4, r19, 124
20024a40:	64840004 	bsrli	r4, r4, 4
20024a44:	b0000000 	imm	0
20024a48:	a484ffff 	andi	r4, r4, -1
20024a4c:	90840061 	sext16	r4, r4
20024a50:	f4830000 	shi	r4, r3, 0
		local_video_object_layer_height = video_object_layer_height;
20024a54:	b0002006 	imm	8198
20024a58:	e4601e44 	lhui	r3, r0, 7748	// 20061e44 <video_object_layer_height>
20024a5c:	f473007e 	shi	r3, r19, 126
		tokens_HEIGHT[(index_HEIGHT + (0)) % SIZE_HEIGHT] = local_video_object_layer_height / 16;
20024a60:	b0002004 	imm	8196
20024a64:	e860732c 	lwi	r3, r0, 29484	// 2004732c <decoder_parser_parseheaders_HEIGHT>
20024a68:	e8830004 	lwi	r4, r3, 4
20024a6c:	b0002006 	imm	8198
20024a70:	e8601e10 	lwi	r3, r0, 7696	// 20061e10 <index_HEIGHT>
20024a74:	a46301ff 	andi	r3, r3, 511
20024a78:	10631800 	addk	r3, r3, r3
20024a7c:	10641800 	addk	r3, r4, r3
20024a80:	e493007e 	lhui	r4, r19, 126
20024a84:	64840004 	bsrli	r4, r4, 4
20024a88:	b0000000 	imm	0
20024a8c:	a484ffff 	andi	r4, r4, -1
20024a90:	90840061 	sext16	r4, r4
20024a94:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 3;
20024a98:	b0002006 	imm	8198
20024a9c:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20024aa0:	30630003 	addik	r3, r3, 3
20024aa4:	b0002006 	imm	8198
20024aa8:	f8601de0 	swi	r3, r0, 7648	// 20061de0 <index_BTYPE>
		index_WIDTH += 1;
20024aac:	b0002006 	imm	8198
20024ab0:	e8601e08 	lwi	r3, r0, 7688	// 20061e08 <index_WIDTH>
20024ab4:	30630001 	addik	r3, r3, 1
20024ab8:	b0002006 	imm	8198
20024abc:	f8601e08 	swi	r3, r0, 7688	// 20061e08 <index_WIDTH>
		index_HEIGHT += 1;
20024ac0:	b0002006 	imm	8198
20024ac4:	e8601e10 	lwi	r3, r0, 7696	// 20061e10 <index_HEIGHT>
20024ac8:	30630001 	addik	r3, r3, 1
20024acc:	b0002006 	imm	8198
20024ad0:	f8601e10 	swi	r3, r0, 7696	// 20061e10 <index_HEIGHT>
		
		write_end_BTYPE();
20024ad4:	b9f4cb00 	brlid	r15, -13568	// 200215d4 <write_end_BTYPE>
20024ad8:	80000000 	or	r0, r0, r0
		write_end_WIDTH();
20024adc:	b9f4ce40 	brlid	r15, -12736	// 2002191c <write_end_WIDTH>
20024ae0:	80000000 	or	r0, r0, r0
		write_end_HEIGHT();
20024ae4:	b9f4cee0 	brlid	r15, -12576	// 200219c4 <write_end_HEIGHT>
20024ae8:	80000000 	or	r0, r0, r0
	}
20024aec:	e9e10000 	lwi	r15, r1, 0
20024af0:	10330000 	addk	r1, r19, r0
20024af4:	ea610084 	lwi	r19, r1, 132
20024af8:	30210088 	addik	r1, r1, 136
20024afc:	b60f0008 	rtsd	r15, 8
20024b00:	80000000 	or	r0, r0, r0

20024b04 <isSchedulable_read_vop_coded_uncoded>:
	static i32 isSchedulable_read_vop_coded_uncoded() {
20024b04:	3021fff0 	addik	r1, r1, -16
20024b08:	fa61000c 	swi	r19, r1, 12
20024b0c:	12610000 	addk	r19, r1, r0
		i32 result;
		i32 local_vop_coded;
	
		local_vop_coded = vop_coded;
20024b10:	b0002006 	imm	8198
20024b14:	e8601e4c 	lwi	r3, r0, 7756	// 20061e4c <vop_coded>
20024b18:	f8730004 	swi	r3, r19, 4
		result = !local_vop_coded;
20024b1c:	e8930004 	lwi	r4, r19, 4
20024b20:	10600000 	addk	r3, r0, r0
20024b24:	88641c00 	pcmpeq	r3, r4, r3
20024b28:	a46300ff 	andi	r3, r3, 255
20024b2c:	f8730008 	swi	r3, r19, 8
		return result;
20024b30:	e8730008 	lwi	r3, r19, 8
	}
20024b34:	10330000 	addk	r1, r19, r0
20024b38:	ea61000c 	lwi	r19, r1, 12
20024b3c:	30210010 	addik	r1, r1, 16
20024b40:	b60f0008 	rtsd	r15, 8
20024b44:	80000000 	or	r0, r0, r0

20024b48 <read_vop_coded_uncoded>:
	
	static void read_vop_coded_uncoded() {
20024b48:	3021fff8 	addik	r1, r1, -8
20024b4c:	fa610004 	swi	r19, r1, 4
20024b50:	12610000 	addk	r19, r1, r0
	
	
	
		// Update ports indexes
		
	}
20024b54:	10330000 	addk	r1, r19, r0
20024b58:	ea610004 	lwi	r19, r1, 4
20024b5c:	30210008 	addik	r1, r1, 8
20024b60:	b60f0008 	rtsd	r15, 8
20024b64:	80000000 	or	r0, r0, r0

20024b68 <isSchedulable_read_mb_start>:
	static i32 isSchedulable_read_mb_start() {
20024b68:	3021ffec 	addik	r1, r1, -20
20024b6c:	fa610010 	swi	r19, r1, 16
20024b70:	12610000 	addk	r19, r1, r0
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20024b74:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20024b78:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
20024b7c:	e0730004 	lbui	r3, r19, 4
20024b80:	10631800 	addk	r3, r3, r3
20024b84:	b0002006 	imm	8198
20024b88:	30631e20 	addik	r3, r3, 7712
20024b8c:	e4630000 	lhui	r3, r3, 0
20024b90:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20024b94:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20024b98:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
20024b9c:	e4b30006 	lhui	r5, r19, 6
20024ba0:	e0730008 	lbui	r3, r19, 8
20024ba4:	3063ffff 	addik	r3, r3, -1
20024ba8:	64830403 	bslli	r4, r3, 3
20024bac:	30600001 	addik	r3, r0, 1
20024bb0:	16442801 	cmp	r18, r4, r5
20024bb4:	bcb20008 	bgei	r18, 8		// 20024bbc
20024bb8:	10600000 	addk	r3, r0, r0
20024bbc:	a46300ff 	andi	r3, r3, 255
20024bc0:	f873000c 	swi	r3, r19, 12
		return result;
20024bc4:	e873000c 	lwi	r3, r19, 12
	}
20024bc8:	10330000 	addk	r1, r19, r0
20024bcc:	ea610010 	lwi	r19, r1, 16
20024bd0:	30210014 	addik	r1, r1, 20
20024bd4:	b60f0008 	rtsd	r15, 8
20024bd8:	80000000 	or	r0, r0, r0

20024bdc <read_mb_start>:
	
	static void read_mb_start() {
20024bdc:	3021ffa4 	addik	r1, r1, -92
20024be0:	f9e10000 	swi	r15, r1, 0
20024be4:	fa610058 	swi	r19, r1, 88
20024be8:	12610000 	addk	r19, r1, r0
		i8 local_vop_quant;
		i32 local_btype_is_Q;
		i32 tmp_res4;
		i8 tmp_dquant_table;
	
		comp = 0;
20024bec:	b0002006 	imm	8198
20024bf0:	f0001e78 	sbi	r0, r0, 7800	// 20061e78 <comp>
		local_vop_coding_type = vop_coding_type;
20024bf4:	b0002006 	imm	8198
20024bf8:	e0601e48 	lbui	r3, r0, 7752	// 20061e48 <vop_coding_type>
20024bfc:	f073001c 	sbi	r3, r19, 28
		local_I_VOP = vldFunctions_I_VOP;
20024c00:	f8130020 	swi	r0, r19, 32
		if (local_vop_coding_type != local_I_VOP) {
20024c04:	e093001c 	lbui	r4, r19, 28
20024c08:	e8730020 	lwi	r3, r19, 32
20024c0c:	88641800 	xor	r3, r4, r3
20024c10:	bc03004c 	beqi	r3, 76		// 20024c5c
			BitstreamReadUtils_vld_u_name(1, fifo, res, "not_coded                           ");
20024c14:	30730054 	addik	r3, r19, 84
20024c18:	30a00001 	addik	r5, r0, 1
20024c1c:	b0002006 	imm	8198
20024c20:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20024c24:	10e30000 	addk	r7, r3, r0
20024c28:	b0002004 	imm	8196
20024c2c:	31005230 	addik	r8, r0, 21040
20024c30:	b9f4d2d0 	brlid	r15, -11568	// 20021f00 <BitstreamReadUtils_vld_u_name>
20024c34:	80000000 	or	r0, r0, r0
			tmp_res = res[0];
20024c38:	e8730054 	lwi	r3, r19, 84
20024c3c:	f8730024 	swi	r3, r19, 36
			not_coded = tmp_res == 1;
20024c40:	e8930024 	lwi	r4, r19, 36
20024c44:	30600001 	addik	r3, r0, 1
20024c48:	88641c00 	pcmpeq	r3, r4, r3
20024c4c:	a46300ff 	andi	r3, r3, 255
20024c50:	b0002006 	imm	8198
20024c54:	f8601e6c 	swi	r3, r0, 7788	// 20061e6c <not_coded>
20024c58:	b800000c 	bri	12		// 20024c64
		} else {
			not_coded = 0;
20024c5c:	b0002006 	imm	8198
20024c60:	f8001e6c 	swi	r0, r0, 7788	// 20061e6c <not_coded>
		}
		local_not_coded = not_coded;
20024c64:	b0002006 	imm	8198
20024c68:	e8601e6c 	lwi	r3, r0, 7788	// 20061e6c <not_coded>
20024c6c:	f8730028 	swi	r3, r19, 40
		local_vop_coding_type = vop_coding_type;
20024c70:	b0002006 	imm	8198
20024c74:	e0601e48 	lbui	r3, r0, 7752	// 20061e48 <vop_coding_type>
20024c78:	f073001c 	sbi	r3, r19, 28
		local_I_VOP = vldFunctions_I_VOP;
20024c7c:	f8130020 	swi	r0, r19, 32
		if (!local_not_coded || local_vop_coding_type == local_I_VOP) {
20024c80:	e8730028 	lwi	r3, r19, 40
20024c84:	bc030014 	beqi	r3, 20		// 20024c98
20024c88:	e093001c 	lbui	r4, r19, 28
20024c8c:	e8730020 	lwi	r3, r19, 32
20024c90:	88641800 	xor	r3, r4, r3
20024c94:	bc2302e0 	bnei	r3, 736		// 20024f74
			local_vop_coding_type = vop_coding_type;
20024c98:	b0002006 	imm	8198
20024c9c:	e0601e48 	lbui	r3, r0, 7752	// 20061e48 <vop_coding_type>
20024ca0:	f073001c 	sbi	r3, r19, 28
			vldFunctions_get_mcbpc(fifo, res, "mcbpc                           ", local_vop_coding_type);
20024ca4:	30930054 	addik	r4, r19, 84
20024ca8:	e073001c 	lbui	r3, r19, 28
20024cac:	b0002006 	imm	8198
20024cb0:	30a01e20 	addik	r5, r0, 7712	// 20061e20 <fifo>
20024cb4:	10c40000 	addk	r6, r4, r0
20024cb8:	b0002004 	imm	8196
20024cbc:	30e05258 	addik	r7, r0, 21080
20024cc0:	11030000 	addk	r8, r3, r0
20024cc4:	b9f4d514 	brlid	r15, -10988	// 200221d8 <vldFunctions_get_mcbpc>
20024cc8:	80000000 	or	r0, r0, r0
			tmp_res0 = res[0];
20024ccc:	e8730054 	lwi	r3, r19, 84
20024cd0:	f873002c 	swi	r3, r19, 44
			derived_mb_type = tmp_res0 & 7;
20024cd4:	e873002c 	lwi	r3, r19, 44
20024cd8:	90630060 	sext8	r3, r3
20024cdc:	a4630007 	andi	r3, r3, 7
20024ce0:	90630060 	sext8	r3, r3
20024ce4:	b0002006 	imm	8198
20024ce8:	f0601e5c 	sbi	r3, r0, 7772	// 20061e5c <derived_mb_type>
			tmp_res1 = res[0];
20024cec:	e8730054 	lwi	r3, r19, 84
20024cf0:	f8730030 	swi	r3, r19, 48
			cbpc = tmp_res1 >> 4;
20024cf4:	e8730030 	lwi	r3, r19, 48
20024cf8:	64630204 	bsrai	r3, r3, 4
20024cfc:	90630060 	sext8	r3, r3
20024d00:	b0002006 	imm	8198
20024d04:	f0601e5d 	sbi	r3, r0, 7773	// 20061e5d <cbpc>
			local_derived_mb_type = derived_mb_type;
20024d08:	b0002006 	imm	8198
20024d0c:	e0601e5c 	lbui	r3, r0, 7772	// 20061e5c <derived_mb_type>
20024d10:	f0730034 	sbi	r3, r19, 52
			fourmvflag = local_derived_mb_type == 2;
20024d14:	e0730034 	lbui	r3, r19, 52
20024d18:	90830060 	sext8	r4, r3
20024d1c:	30600002 	addik	r3, r0, 2
20024d20:	88641c00 	pcmpeq	r3, r4, r3
20024d24:	a46300ff 	andi	r3, r3, 255
20024d28:	b0002006 	imm	8198
20024d2c:	f8601e68 	swi	r3, r0, 7784	// 20061e68 <fourmvflag>
			local_derived_mb_type = derived_mb_type;
20024d30:	b0002006 	imm	8198
20024d34:	e0601e5c 	lbui	r3, r0, 7772	// 20061e5c <derived_mb_type>
20024d38:	f0730034 	sbi	r3, r19, 52
			local_derived_mb_type = derived_mb_type;
20024d3c:	b0002006 	imm	8198
20024d40:	e0601e5c 	lbui	r3, r0, 7772	// 20061e5c <derived_mb_type>
20024d44:	f0730034 	sbi	r3, r19, 52
			is_intra = local_derived_mb_type == 3 || local_derived_mb_type == 4;
20024d48:	e0730034 	lbui	r3, r19, 52
20024d4c:	90630060 	sext8	r3, r3
20024d50:	a8630003 	xori	r3, r3, 3
20024d54:	bc030014 	beqi	r3, 20		// 20024d68
20024d58:	e0730034 	lbui	r3, r19, 52
20024d5c:	90630060 	sext8	r3, r3
20024d60:	a8630004 	xori	r3, r3, 4
20024d64:	bc23000c 	bnei	r3, 12		// 20024d70
20024d68:	30600001 	addik	r3, r0, 1
20024d6c:	b8000008 	bri	8		// 20024d74
20024d70:	10600000 	addk	r3, r0, r0
20024d74:	b0002006 	imm	8198
20024d78:	f8601e60 	swi	r3, r0, 7776	// 20061e60 <is_intra>
			local_derived_mb_type = derived_mb_type;
20024d7c:	b0002006 	imm	8198
20024d80:	e0601e5c 	lbui	r3, r0, 7772	// 20061e5c <derived_mb_type>
20024d84:	f0730034 	sbi	r3, r19, 52
			local_derived_mb_type = derived_mb_type;
20024d88:	b0002006 	imm	8198
20024d8c:	e0601e5c 	lbui	r3, r0, 7772	// 20061e5c <derived_mb_type>
20024d90:	f0730034 	sbi	r3, r19, 52
			btype_is_Q = local_derived_mb_type == 1 || local_derived_mb_type == 4;
20024d94:	e0730034 	lbui	r3, r19, 52
20024d98:	90630060 	sext8	r3, r3
20024d9c:	a8630001 	xori	r3, r3, 1
20024da0:	bc030014 	beqi	r3, 20		// 20024db4
20024da4:	e0730034 	lbui	r3, r19, 52
20024da8:	90630060 	sext8	r3, r3
20024dac:	a8630004 	xori	r3, r3, 4
20024db0:	bc23000c 	bnei	r3, 12		// 20024dbc
20024db4:	30600001 	addik	r3, r0, 1
20024db8:	b8000008 	bri	8		// 20024dc0
20024dbc:	10600000 	addk	r3, r0, r0
20024dc0:	b0002006 	imm	8198
20024dc4:	f8601e64 	swi	r3, r0, 7780	// 20061e64 <btype_is_Q>
			local_is_intra = is_intra;
20024dc8:	b0002006 	imm	8198
20024dcc:	e8601e60 	lwi	r3, r0, 7776	// 20061e60 <is_intra>
20024dd0:	f8730038 	swi	r3, r19, 56
			if (local_is_intra) {
20024dd4:	e8730038 	lwi	r3, r19, 56
20024dd8:	bc03004c 	beqi	r3, 76		// 20024e24
				BitstreamReadUtils_vld_u_name(1, fifo, res, "ac_pred_flag                           ");
20024ddc:	30730054 	addik	r3, r19, 84
20024de0:	30a00001 	addik	r5, r0, 1
20024de4:	b0002006 	imm	8198
20024de8:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20024dec:	10e30000 	addk	r7, r3, r0
20024df0:	b0002004 	imm	8196
20024df4:	3100527c 	addik	r8, r0, 21116
20024df8:	b9f4d108 	brlid	r15, -12024	// 20021f00 <BitstreamReadUtils_vld_u_name>
20024dfc:	80000000 	or	r0, r0, r0
				tmp_res2 = res[0];
20024e00:	e8730054 	lwi	r3, r19, 84
20024e04:	f873003c 	swi	r3, r19, 60
				ac_pred_flag = tmp_res2 == 1;
20024e08:	e893003c 	lwi	r4, r19, 60
20024e0c:	30600001 	addik	r3, r0, 1
20024e10:	88641c00 	pcmpeq	r3, r4, r3
20024e14:	a46300ff 	andi	r3, r3, 255
20024e18:	b0002006 	imm	8198
20024e1c:	f8601e74 	swi	r3, r0, 7796	// 20061e74 <ac_pred_flag>
20024e20:	b800000c 	bri	12		// 20024e2c
			} else {
				ac_pred_flag = 0;
20024e24:	b0002006 	imm	8198
20024e28:	f8001e74 	swi	r0, r0, 7796	// 20061e74 <ac_pred_flag>
			}
			local_is_intra = is_intra;
20024e2c:	b0002006 	imm	8198
20024e30:	e8601e60 	lwi	r3, r0, 7776	// 20061e60 <is_intra>
20024e34:	f8730038 	swi	r3, r19, 56
			vldFunctions_get_cbpy(fifo, res, "cbpy                           ", local_is_intra);
20024e38:	30730054 	addik	r3, r19, 84
20024e3c:	b0002006 	imm	8198
20024e40:	30a01e20 	addik	r5, r0, 7712	// 20061e20 <fifo>
20024e44:	10c30000 	addk	r6, r3, r0
20024e48:	b0002004 	imm	8196
20024e4c:	30e052a4 	addik	r7, r0, 21156
20024e50:	e9130038 	lwi	r8, r19, 56
20024e54:	b9f4d528 	brlid	r15, -10968	// 2002237c <vldFunctions_get_cbpy>
20024e58:	80000000 	or	r0, r0, r0
			tmp_res3 = res[0];
20024e5c:	e8730054 	lwi	r3, r19, 84
20024e60:	f8730040 	swi	r3, r19, 64
			local_cbpc = cbpc;
20024e64:	b0002006 	imm	8198
20024e68:	e0601e5d 	lbui	r3, r0, 7773	// 20061e5d <cbpc>
20024e6c:	f0730044 	sbi	r3, r19, 68
			cbp = tmp_res3 << 2 | local_cbpc;
20024e70:	e8730040 	lwi	r3, r19, 64
20024e74:	64630402 	bslli	r3, r3, 2
20024e78:	90830060 	sext8	r4, r3
20024e7c:	e0730044 	lbui	r3, r19, 68
20024e80:	80641800 	or	r3, r4, r3
20024e84:	90630060 	sext8	r3, r3
20024e88:	b0002006 	imm	8198
20024e8c:	f0601e70 	sbi	r3, r0, 7792	// 20061e70 <cbp>
			local_vop_quant = vop_quant;
20024e90:	b0002006 	imm	8198
20024e94:	e0601e54 	lbui	r3, r0, 7764	// 20061e54 <vop_quant>
20024e98:	f0730045 	sbi	r3, r19, 69
			prev_quant = local_vop_quant;
20024e9c:	e0730045 	lbui	r3, r19, 69
20024ea0:	b0002006 	imm	8198
20024ea4:	f0601e55 	sbi	r3, r0, 7765	// 20061e55 <prev_quant>
			local_btype_is_Q = btype_is_Q;
20024ea8:	b0002006 	imm	8198
20024eac:	e8601e64 	lwi	r3, r0, 7780	// 20061e64 <btype_is_Q>
20024eb0:	f8730048 	swi	r3, r19, 72
			if (local_btype_is_Q) {
20024eb4:	e8730048 	lwi	r3, r19, 72
20024eb8:	bc0300bc 	beqi	r3, 188		// 20024f74
				BitstreamReadUtils_vld_u_name(2, fifo, res, "dquant                           ");
20024ebc:	30730054 	addik	r3, r19, 84
20024ec0:	30a00002 	addik	r5, r0, 2
20024ec4:	b0002006 	imm	8198
20024ec8:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20024ecc:	10e30000 	addk	r7, r3, r0
20024ed0:	b0002004 	imm	8196
20024ed4:	310052c4 	addik	r8, r0, 21188
20024ed8:	b9f4d028 	brlid	r15, -12248	// 20021f00 <BitstreamReadUtils_vld_u_name>
20024edc:	80000000 	or	r0, r0, r0
				local_vop_quant = vop_quant;
20024ee0:	b0002006 	imm	8198
20024ee4:	e0601e54 	lbui	r3, r0, 7764	// 20061e54 <vop_quant>
20024ee8:	f0730045 	sbi	r3, r19, 69
				tmp_res4 = res[0];
20024eec:	e8730054 	lwi	r3, r19, 84
20024ef0:	f873004c 	swi	r3, r19, 76
				tmp_dquant_table = dquant_table[tmp_res4];
20024ef4:	e873004c 	lwi	r3, r19, 76
20024ef8:	b0002004 	imm	8196
20024efc:	30634868 	addik	r3, r3, 18536
20024f00:	e0630000 	lbui	r3, r3, 0
20024f04:	f0730050 	sbi	r3, r19, 80
				vop_quant = local_vop_quant + tmp_dquant_table;
20024f08:	e0930045 	lbui	r4, r19, 69
20024f0c:	e0730050 	lbui	r3, r19, 80
20024f10:	10641800 	addk	r3, r4, r3
20024f14:	a46300ff 	andi	r3, r3, 255
20024f18:	90630060 	sext8	r3, r3
20024f1c:	b0002006 	imm	8198
20024f20:	f0601e54 	sbi	r3, r0, 7764	// 20061e54 <vop_quant>
				local_vop_quant = vop_quant;
20024f24:	b0002006 	imm	8198
20024f28:	e0601e54 	lbui	r3, r0, 7764	// 20061e54 <vop_quant>
20024f2c:	f0730045 	sbi	r3, r19, 69
				if (local_vop_quant > 31) {
20024f30:	e0730045 	lbui	r3, r19, 69
20024f34:	90830060 	sext8	r4, r3
20024f38:	3060001f 	addik	r3, r0, 31
20024f3c:	16441801 	cmp	r18, r4, r3
20024f40:	bcb20010 	bgei	r18, 16		// 20024f50
					vop_quant = 31;
20024f44:	3060001f 	addik	r3, r0, 31
20024f48:	b0002006 	imm	8198
20024f4c:	f0601e54 	sbi	r3, r0, 7764	// 20061e54 <vop_quant>
				}
				local_vop_quant = vop_quant;
20024f50:	b0002006 	imm	8198
20024f54:	e0601e54 	lbui	r3, r0, 7764	// 20061e54 <vop_quant>
20024f58:	f0730045 	sbi	r3, r19, 69
				if (local_vop_quant < 1) {
20024f5c:	e0730045 	lbui	r3, r19, 69
20024f60:	90630060 	sext8	r3, r3
20024f64:	bc830010 	bgti	r3, 16		// 20024f74
					vop_quant = 1;
20024f68:	30600001 	addik	r3, r0, 1
20024f6c:	b0002006 	imm	8198
20024f70:	f0601e54 	sbi	r3, r0, 7764	// 20061e54 <vop_quant>
			}
		}
	
		// Update ports indexes
		
	}
20024f74:	e9e10000 	lwi	r15, r1, 0
20024f78:	10330000 	addk	r1, r19, r0
20024f7c:	ea610058 	lwi	r19, r1, 88
20024f80:	3021005c 	addik	r1, r1, 92
20024f84:	b60f0008 	rtsd	r15, 8
20024f88:	80000000 	or	r0, r0, r0

20024f8c <isSchedulable_read_mb_done>:
	static i32 isSchedulable_read_mb_done() {
20024f8c:	3021ffec 	addik	r1, r1, -20
20024f90:	fa610010 	swi	r19, r1, 16
20024f94:	12610000 	addk	r19, r1, r0
		i32 result;
		i32 local_mb_cnt;
		u16 local_mb_pic;
	
		local_mb_cnt = mb_cnt;
20024f98:	b0002006 	imm	8198
20024f9c:	e8601e58 	lwi	r3, r0, 7768	// 20061e58 <mb_cnt>
20024fa0:	f8730004 	swi	r3, r19, 4
		local_mb_pic = mb_pic;
20024fa4:	b0002006 	imm	8198
20024fa8:	e4601e46 	lhui	r3, r0, 7750	// 20061e46 <mb_pic>
20024fac:	f4730008 	shi	r3, r19, 8
		result = local_mb_cnt == local_mb_pic;
20024fb0:	e4930008 	lhui	r4, r19, 8
20024fb4:	e8730004 	lwi	r3, r19, 4
20024fb8:	88641c00 	pcmpeq	r3, r4, r3
20024fbc:	a46300ff 	andi	r3, r3, 255
20024fc0:	f873000c 	swi	r3, r19, 12
		return result;
20024fc4:	e873000c 	lwi	r3, r19, 12
	}
20024fc8:	10330000 	addk	r1, r19, r0
20024fcc:	ea610010 	lwi	r19, r1, 16
20024fd0:	30210014 	addik	r1, r1, 20
20024fd4:	b60f0008 	rtsd	r15, 8
20024fd8:	80000000 	or	r0, r0, r0

20024fdc <read_mb_done>:
	
	static void read_mb_done() {
20024fdc:	3021fff8 	addik	r1, r1, -8
20024fe0:	fa610004 	swi	r19, r1, 4
20024fe4:	12610000 	addk	r19, r1, r0
	
	
	
		// Update ports indexes
		
	}
20024fe8:	10330000 	addk	r1, r19, r0
20024fec:	ea610004 	lwi	r19, r1, 4
20024ff0:	30210008 	addik	r1, r1, 8
20024ff4:	b60f0008 	rtsd	r15, 8
20024ff8:	80000000 	or	r0, r0, r0

20024ffc <isSchedulable_read_block_start>:
	static i32 isSchedulable_read_block_start() {
20024ffc:	3021fff4 	addik	r1, r1, -12
20025000:	fa610008 	swi	r19, r1, 8
20025004:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
20025008:	30600001 	addik	r3, r0, 1
2002500c:	f8730004 	swi	r3, r19, 4
		return result;
20025010:	e8730004 	lwi	r3, r19, 4
	}
20025014:	10330000 	addk	r1, r19, r0
20025018:	ea610008 	lwi	r19, r1, 8
2002501c:	3021000c 	addik	r1, r1, 12
20025020:	b60f0008 	rtsd	r15, 8
20025024:	80000000 	or	r0, r0, r0

20025028 <read_block_start>:
	
	static void read_block_start() {
20025028:	3021fff4 	addik	r1, r1, -12
2002502c:	fa610008 	swi	r19, r1, 8
20025030:	12610000 	addk	r19, r1, r0
		// Compute aligned port indexes
	
		i8 local_cbp;
		i8 local_comp;
	
		last[0] = 0;
20025034:	b0002006 	imm	8198
20025038:	f8001e7c 	swi	r0, r0, 7804	// 20061e7c <last>
		local_cbp = cbp;
2002503c:	b0002006 	imm	8198
20025040:	e0601e70 	lbui	r3, r0, 7792	// 20061e70 <cbp>
20025044:	f0730004 	sbi	r3, r19, 4
		local_comp = comp;
20025048:	b0002006 	imm	8198
2002504c:	e0601e78 	lbui	r3, r0, 7800	// 20061e78 <comp>
20025050:	f0730005 	sbi	r3, r19, 5
		ac_coded = (local_cbp & 1 << (5 - local_comp)) != 0;
20025054:	e0730004 	lbui	r3, r19, 4
20025058:	90830060 	sext8	r4, r3
2002505c:	e0730005 	lbui	r3, r19, 5
20025060:	90630060 	sext8	r3, r3
20025064:	30a00005 	addik	r5, r0, 5
20025068:	14632800 	rsubk	r3, r3, r5
2002506c:	44641a00 	bsra	r3, r4, r3
20025070:	a4830001 	andi	r4, r3, 1
20025074:	10600000 	addk	r3, r0, r0
20025078:	8c641c00 	pcmpne	r3, r4, r3
2002507c:	a46300ff 	andi	r3, r3, 255
20025080:	b0002006 	imm	8198
20025084:	f8601e88 	swi	r3, r0, 7816	// 20061e88 <ac_coded>
	
		// Update ports indexes
		
	}
20025088:	10330000 	addk	r1, r19, r0
2002508c:	ea610008 	lwi	r19, r1, 8
20025090:	3021000c 	addik	r1, r1, 12
20025094:	b60f0008 	rtsd	r15, 8
20025098:	80000000 	or	r0, r0, r0

2002509c <isSchedulable_read_block_done>:
	static i32 isSchedulable_read_block_done() {
2002509c:	3021fff0 	addik	r1, r1, -16
200250a0:	fa61000c 	swi	r19, r1, 12
200250a4:	12610000 	addk	r19, r1, r0
		i32 result;
		i8 local_comp;
	
		local_comp = comp;
200250a8:	b0002006 	imm	8198
200250ac:	e0601e78 	lbui	r3, r0, 7800	// 20061e78 <comp>
200250b0:	f0730004 	sbi	r3, r19, 4
		result = local_comp == 6;
200250b4:	e0730004 	lbui	r3, r19, 4
200250b8:	90830060 	sext8	r4, r3
200250bc:	30600006 	addik	r3, r0, 6
200250c0:	88641c00 	pcmpeq	r3, r4, r3
200250c4:	a46300ff 	andi	r3, r3, 255
200250c8:	f8730008 	swi	r3, r19, 8
		return result;
200250cc:	e8730008 	lwi	r3, r19, 8
	}
200250d0:	10330000 	addk	r1, r19, r0
200250d4:	ea61000c 	lwi	r19, r1, 12
200250d8:	30210010 	addik	r1, r1, 16
200250dc:	b60f0008 	rtsd	r15, 8
200250e0:	80000000 	or	r0, r0, r0

200250e4 <read_block_done>:
	
	static void read_block_done() {
200250e4:	3021fff4 	addik	r1, r1, -12
200250e8:	fa610008 	swi	r19, r1, 8
200250ec:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
	
		i32 local_mb_cnt;
	
		local_mb_cnt = mb_cnt;
200250f0:	b0002006 	imm	8198
200250f4:	e8601e58 	lwi	r3, r0, 7768	// 20061e58 <mb_cnt>
200250f8:	f8730004 	swi	r3, r19, 4
		mb_cnt = local_mb_cnt + 1;
200250fc:	e8730004 	lwi	r3, r19, 4
20025100:	30630001 	addik	r3, r3, 1
20025104:	b0002006 	imm	8198
20025108:	f8601e58 	swi	r3, r0, 7768	// 20061e58 <mb_cnt>
	
		// Update ports indexes
		
	}
2002510c:	10330000 	addk	r1, r19, r0
20025110:	ea610008 	lwi	r19, r1, 8
20025114:	3021000c 	addik	r1, r1, 12
20025118:	b60f0008 	rtsd	r15, 8
2002511c:	80000000 	or	r0, r0, r0

20025120 <isSchedulable_read_block_dc>:
	static i32 isSchedulable_read_block_dc() {
20025120:	3021ffec 	addik	r1, r1, -20
20025124:	fa610010 	swi	r19, r1, 16
20025128:	12610000 	addk	r19, r1, r0
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
2002512c:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20025130:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
20025134:	e0730004 	lbui	r3, r19, 4
20025138:	10631800 	addk	r3, r3, r3
2002513c:	b0002006 	imm	8198
20025140:	30631e20 	addik	r3, r3, 7712
20025144:	e4630000 	lhui	r3, r3, 0
20025148:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
2002514c:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20025150:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
20025154:	e4b30006 	lhui	r5, r19, 6
20025158:	e0730008 	lbui	r3, r19, 8
2002515c:	3063ffff 	addik	r3, r3, -1
20025160:	64830403 	bslli	r4, r3, 3
20025164:	30600001 	addik	r3, r0, 1
20025168:	16442801 	cmp	r18, r4, r5
2002516c:	bcb20008 	bgei	r18, 8		// 20025174
20025170:	10600000 	addk	r3, r0, r0
20025174:	a46300ff 	andi	r3, r3, 255
20025178:	f873000c 	swi	r3, r19, 12
		return result;
2002517c:	e873000c 	lwi	r3, r19, 12
	}
20025180:	10330000 	addk	r1, r19, r0
20025184:	ea610010 	lwi	r19, r1, 16
20025188:	30210014 	addik	r1, r1, 20
2002518c:	b60f0008 	rtsd	r15, 8
20025190:	80000000 	or	r0, r0, r0

20025194 <read_block_dc>:
	
	static void read_block_dc() {
20025194:	3021ff94 	addik	r1, r1, -108
20025198:	f9e10000 	swi	r15, r1, 0
2002519c:	fa610068 	swi	r19, r1, 104
200251a0:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
200251a4:	b0002006 	imm	8198
200251a8:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
200251ac:	a46301ff 	andi	r3, r3, 511
200251b0:	f873002c 	swi	r3, r19, 44
		i32 index_aligned_QP = index_QP % SIZE_QP;
200251b4:	b0002006 	imm	8198
200251b8:	e8601e18 	lwi	r3, r0, 7704	// 20061e18 <index_QP>
200251bc:	a46301ff 	andi	r3, r3, 511
200251c0:	f8730030 	swi	r3, r19, 48
		i32 index_aligned_RUN = index_RUN % SIZE_RUN;
200251c4:	b0002006 	imm	8198
200251c8:	e8601df0 	lwi	r3, r0, 7664	// 20061df0 <index_RUN>
200251cc:	a46301ff 	andi	r3, r3, 511
200251d0:	f8730034 	swi	r3, r19, 52
		i32 index_aligned_VALUE = index_VALUE % SIZE_VALUE;
200251d4:	b0002006 	imm	8198
200251d8:	e8601df8 	lwi	r3, r0, 7672	// 20061df8 <index_VALUE>
200251dc:	a46301ff 	andi	r3, r3, 511
200251e0:	f8730038 	swi	r3, r19, 56
		i32 index_aligned_LAST = index_LAST % SIZE_LAST;
200251e4:	b0002006 	imm	8198
200251e8:	e8601e00 	lwi	r3, r0, 7680	// 20061e00 <index_LAST>
200251ec:	a46301ff 	andi	r3, r3, 511
200251f0:	f873003c 	swi	r3, r19, 60
		i32 local_ACPRED;
		i32 local_DEBUG_PARSER;
		u8 tmp_if1;
		i8 local_vop_quant;
	
		local_prev_quant = prev_quant;
200251f4:	b0002006 	imm	8198
200251f8:	e0601e55 	lbui	r3, r0, 7765	// 20061e55 <prev_quant>
200251fc:	f0730040 	sbi	r3, r19, 64
		local_intra_dc_vlc_thr = intra_dc_vlc_thr;
20025200:	b0002006 	imm	8198
20025204:	e0601e56 	lbui	r3, r0, 7766	// 20061e56 <intra_dc_vlc_thr>
20025208:	f0730041 	sbi	r3, r19, 65
		if (local_prev_quant < local_intra_dc_vlc_thr) {
2002520c:	e0730040 	lbui	r3, r19, 64
20025210:	90830060 	sext8	r4, r3
20025214:	e0730041 	lbui	r3, r19, 65
20025218:	90630060 	sext8	r3, r3
2002521c:	16432001 	cmp	r18, r3, r4
20025220:	bcb200f4 	bgei	r18, 244		// 20025314
			local_comp = comp;
20025224:	b0002006 	imm	8198
20025228:	e0601e78 	lbui	r3, r0, 7800	// 20061e78 <comp>
2002522c:	f0730042 	sbi	r3, r19, 66
			if (local_comp < 4) {
20025230:	e0730042 	lbui	r3, r19, 66
20025234:	90830060 	sext8	r4, r3
20025238:	30600003 	addik	r3, r0, 3
2002523c:	16441801 	cmp	r18, r4, r3
20025240:	bc520030 	blti	r18, 48		// 20025270
				vldFunctions_get_dc_size_lum(fifo, res, "dc_size                ");
20025244:	30730064 	addik	r3, r19, 100
20025248:	b0002006 	imm	8198
2002524c:	30a01e20 	addik	r5, r0, 7712	// 20061e20 <fifo>
20025250:	10c30000 	addk	r6, r3, r0
20025254:	b0002004 	imm	8196
20025258:	30e052e8 	addik	r7, r0, 21224
2002525c:	b9f4d20c 	brlid	r15, -11764	// 20022468 <vldFunctions_get_dc_size_lum>
20025260:	80000000 	or	r0, r0, r0
				dc_size = res[0];
20025264:	e8730064 	lwi	r3, r19, 100
20025268:	f873001c 	swi	r3, r19, 28
2002526c:	b800002c 	bri	44		// 20025298
			} else {
				vldFunctions_get_dc_size_chrom(fifo, res, "dc_size                ");
20025270:	30730064 	addik	r3, r19, 100
20025274:	b0002006 	imm	8198
20025278:	30a01e20 	addik	r5, r0, 7712	// 20061e20 <fifo>
2002527c:	10c30000 	addk	r6, r3, r0
20025280:	b0002004 	imm	8196
20025284:	30e052e8 	addik	r7, r0, 21224
20025288:	b9f4d32c 	brlid	r15, -11476	// 200225b4 <vldFunctions_get_dc_size_chrom>
2002528c:	80000000 	or	r0, r0, r0
				dc_size = res[0];
20025290:	e8730064 	lwi	r3, r19, 100
20025294:	f873001c 	swi	r3, r19, 28
			}
			if (dc_size > 0) {
20025298:	e873001c 	lwi	r3, r19, 28
2002529c:	bc63003c 	blei	r3, 60		// 200252d8
				vldFunctions_get_dc_dif(fifo, res, "dc_dif                ", dc_size);
200252a0:	e873001c 	lwi	r3, r19, 28
200252a4:	90630061 	sext16	r3, r3
200252a8:	30930064 	addik	r4, r19, 100
200252ac:	b0002006 	imm	8198
200252b0:	30a01e20 	addik	r5, r0, 7712	// 20061e20 <fifo>
200252b4:	10c40000 	addk	r6, r4, r0
200252b8:	b0002004 	imm	8196
200252bc:	30e05300 	addik	r7, r0, 21248
200252c0:	11030000 	addk	r8, r3, r0
200252c4:	b9f4d418 	brlid	r15, -11240	// 200226dc <vldFunctions_get_dc_dif>
200252c8:	80000000 	or	r0, r0, r0
				dc_dif = res[0];
200252cc:	e8730064 	lwi	r3, r19, 100
200252d0:	f8730020 	swi	r3, r19, 32
200252d4:	b8000008 	bri	8		// 200252dc
			} else {
				dc_dif = 0;
200252d8:	f8130020 	swi	r0, r19, 32
			}
			if (dc_size > 8) {
200252dc:	e893001c 	lwi	r4, r19, 28
200252e0:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200252e4:	16441801 	cmp	r18, r4, r3
200252e8:	bcb20030 	bgei	r18, 48		// 20025318
				BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
200252ec:	30730064 	addik	r3, r19, 100
200252f0:	30a00001 	addik	r5, r0, 1
200252f4:	b0002006 	imm	8198
200252f8:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
200252fc:	10e30000 	addk	r7, r3, r0
20025300:	b0002004 	imm	8196
20025304:	31004c90 	addik	r8, r0, 19600
20025308:	b9f4cbf8 	brlid	r15, -13320	// 20021f00 <BitstreamReadUtils_vld_u_name>
2002530c:	80000000 	or	r0, r0, r0
20025310:	b8000008 	bri	8		// 20025318
			}
		} else {
			dc_dif = 0;
20025314:	f8130020 	swi	r0, r19, 32
		}
		local_INTRA = ConstantsBtype_INTRA;
20025318:	30600400 	addik	r3, r0, 1024	// 400 <_HEAP_SIZE>
2002531c:	f8730044 	swi	r3, r19, 68
		local_ac_coded = ac_coded;
20025320:	b0002006 	imm	8198
20025324:	e8601e88 	lwi	r3, r0, 7816	// 20061e88 <ac_coded>
20025328:	f8730048 	swi	r3, r19, 72
		if (local_ac_coded) {
2002532c:	e8730048 	lwi	r3, r19, 72
20025330:	bc030018 	beqi	r3, 24		// 20025348
			local_ACCODED = Constants_ACCODED;
20025334:	30600002 	addik	r3, r0, 2
20025338:	f873004c 	swi	r3, r19, 76
			tmp_if = local_ACCODED;
2002533c:	e873004c 	lwi	r3, r19, 76
20025340:	f8730024 	swi	r3, r19, 36
20025344:	b8000008 	bri	8		// 2002534c
		} else {
			tmp_if = 0;
20025348:	f8130024 	swi	r0, r19, 36
		}
		cmd = local_INTRA | tmp_if;
2002534c:	e8730044 	lwi	r3, r19, 68
20025350:	90830061 	sext16	r4, r3
20025354:	e8730024 	lwi	r3, r19, 36
20025358:	90630061 	sext16	r3, r3
2002535c:	80641800 	or	r3, r4, r3
20025360:	f4730050 	shi	r3, r19, 80
		local_ac_pred_flag = ac_pred_flag;
20025364:	b0002006 	imm	8198
20025368:	e8601e74 	lwi	r3, r0, 7796	// 20061e74 <ac_pred_flag>
2002536c:	f8730054 	swi	r3, r19, 84
		if (local_ac_pred_flag) {
20025370:	e8730054 	lwi	r3, r19, 84
20025374:	bc030018 	beqi	r3, 24		// 2002538c
			local_ACPRED = Constants_ACPRED;
20025378:	30600001 	addik	r3, r0, 1
2002537c:	f8730058 	swi	r3, r19, 88
			tmp_if0 = local_ACPRED;
20025380:	e8730058 	lwi	r3, r19, 88
20025384:	f8730028 	swi	r3, r19, 40
20025388:	b8000008 	bri	8		// 20025390
		} else {
			tmp_if0 = 0;
2002538c:	f8130028 	swi	r0, r19, 40
		}
		cmd = cmd | tmp_if0;
20025390:	e8730028 	lwi	r3, r19, 40
20025394:	90830061 	sext16	r4, r3
20025398:	e4730050 	lhui	r3, r19, 80
2002539c:	80641800 	or	r3, r4, r3
200253a0:	f4730050 	shi	r3, r19, 80
		local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
200253a4:	f813005c 	swi	r0, r19, 92
		if (local_DEBUG_PARSER) {
200253a8:	e873005c 	lwi	r3, r19, 92
200253ac:	bc030028 	beqi	r3, 40		// 200253d4
			local_ac_coded = ac_coded;
200253b0:	b0002006 	imm	8198
200253b4:	e8601e88 	lwi	r3, r0, 7816	// 20061e88 <ac_coded>
200253b8:	f8730048 	swi	r3, r19, 72
			if (!local_ac_coded) {
200253bc:	e8730048 	lwi	r3, r19, 72
200253c0:	bc230010 	bnei	r3, 16		// 200253d0
				tmp_if1 = 1;
200253c4:	30600001 	addik	r3, r0, 1
200253c8:	f0730060 	sbi	r3, r19, 96
200253cc:	b8000008 	bri	8		// 200253d4
			} else {
				tmp_if1 = 0;
200253d0:	f0130060 	sbi	r0, r19, 96
			}
		}
		tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE] = cmd;
200253d4:	b0002004 	imm	8196
200253d8:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
200253dc:	e8830004 	lwi	r4, r3, 4
200253e0:	b0002006 	imm	8198
200253e4:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
200253e8:	a46301ff 	andi	r3, r3, 511
200253ec:	10631800 	addk	r3, r3, r3
200253f0:	10641800 	addk	r3, r4, r3
200253f4:	e4930050 	lhui	r4, r19, 80
200253f8:	f4830000 	shi	r4, r3, 0
		local_vop_quant = vop_quant;
200253fc:	b0002006 	imm	8198
20025400:	e0601e54 	lbui	r3, r0, 7764	// 20061e54 <vop_quant>
20025404:	f0730061 	sbi	r3, r19, 97
		tokens_QP[(index_QP + (0)) % SIZE_QP] = local_vop_quant;
20025408:	b0002004 	imm	8196
2002540c:	e8607324 	lwi	r3, r0, 29476	// 20047324 <decoder_parser_parseheaders_QP>
20025410:	e8830004 	lwi	r4, r3, 4
20025414:	b0002006 	imm	8198
20025418:	e8601e18 	lwi	r3, r0, 7704	// 20061e18 <index_QP>
2002541c:	a46301ff 	andi	r3, r3, 511
20025420:	10641800 	addk	r3, r4, r3
20025424:	e0930061 	lbui	r4, r19, 97
20025428:	f0830000 	sbi	r4, r3, 0
		tokens_RUN[(index_RUN + (0)) % SIZE_RUN] = 0;
2002542c:	b0002004 	imm	8196
20025430:	e8607334 	lwi	r3, r0, 29492	// 20047334 <decoder_parser_parseheaders_RUN>
20025434:	e8830004 	lwi	r4, r3, 4
20025438:	b0002006 	imm	8198
2002543c:	e8601df0 	lwi	r3, r0, 7664	// 20061df0 <index_RUN>
20025440:	a46301ff 	andi	r3, r3, 511
20025444:	10641800 	addk	r3, r4, r3
20025448:	f0030000 	sbi	r0, r3, 0
		tokens_VALUE[(index_VALUE + (0)) % SIZE_VALUE] = dc_dif;
2002544c:	b0002004 	imm	8196
20025450:	e8607370 	lwi	r3, r0, 29552	// 20047370 <decoder_parser_parseheaders_VALUE>
20025454:	e8830004 	lwi	r4, r3, 4
20025458:	b0002006 	imm	8198
2002545c:	e8601df8 	lwi	r3, r0, 7672	// 20061df8 <index_VALUE>
20025460:	a46301ff 	andi	r3, r3, 511
20025464:	10631800 	addk	r3, r3, r3
20025468:	10641800 	addk	r3, r4, r3
2002546c:	e8930020 	lwi	r4, r19, 32
20025470:	90840061 	sext16	r4, r4
20025474:	f4830000 	shi	r4, r3, 0
		local_ac_coded = ac_coded;
20025478:	b0002006 	imm	8198
2002547c:	e8601e88 	lwi	r3, r0, 7816	// 20061e88 <ac_coded>
20025480:	f8730048 	swi	r3, r19, 72
		tokens_LAST[(index_LAST + (0)) % SIZE_LAST] = !local_ac_coded;
20025484:	b0002004 	imm	8196
20025488:	e860734c 	lwi	r3, r0, 29516	// 2004734c <decoder_parser_parseheaders_LAST>
2002548c:	e8830004 	lwi	r4, r3, 4
20025490:	b0002006 	imm	8198
20025494:	e8601e00 	lwi	r3, r0, 7680	// 20061e00 <index_LAST>
20025498:	a46301ff 	andi	r3, r3, 511
2002549c:	64630402 	bslli	r3, r3, 2
200254a0:	10641800 	addk	r3, r4, r3
200254a4:	e8b30048 	lwi	r5, r19, 72
200254a8:	10800000 	addk	r4, r0, r0
200254ac:	88852400 	pcmpeq	r4, r5, r4
200254b0:	a48400ff 	andi	r4, r4, 255
200254b4:	f8830000 	swi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
200254b8:	b0002006 	imm	8198
200254bc:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
200254c0:	30630001 	addik	r3, r3, 1
200254c4:	b0002006 	imm	8198
200254c8:	f8601de0 	swi	r3, r0, 7648	// 20061de0 <index_BTYPE>
		index_QP += 1;
200254cc:	b0002006 	imm	8198
200254d0:	e8601e18 	lwi	r3, r0, 7704	// 20061e18 <index_QP>
200254d4:	30630001 	addik	r3, r3, 1
200254d8:	b0002006 	imm	8198
200254dc:	f8601e18 	swi	r3, r0, 7704	// 20061e18 <index_QP>
		index_RUN += 1;
200254e0:	b0002006 	imm	8198
200254e4:	e8601df0 	lwi	r3, r0, 7664	// 20061df0 <index_RUN>
200254e8:	30630001 	addik	r3, r3, 1
200254ec:	b0002006 	imm	8198
200254f0:	f8601df0 	swi	r3, r0, 7664	// 20061df0 <index_RUN>
		index_VALUE += 1;
200254f4:	b0002006 	imm	8198
200254f8:	e8601df8 	lwi	r3, r0, 7672	// 20061df8 <index_VALUE>
200254fc:	30630001 	addik	r3, r3, 1
20025500:	b0002006 	imm	8198
20025504:	f8601df8 	swi	r3, r0, 7672	// 20061df8 <index_VALUE>
		index_LAST += 1;
20025508:	b0002006 	imm	8198
2002550c:	e8601e00 	lwi	r3, r0, 7680	// 20061e00 <index_LAST>
20025510:	30630001 	addik	r3, r3, 1
20025514:	b0002006 	imm	8198
20025518:	f8601e00 	swi	r3, r0, 7680	// 20061e00 <index_LAST>
		
		write_end_BTYPE();
2002551c:	b9f4c0b8 	brlid	r15, -16200	// 200215d4 <write_end_BTYPE>
20025520:	80000000 	or	r0, r0, r0
		write_end_QP();
20025524:	b9f4c548 	brlid	r15, -15032	// 20021a6c <write_end_QP>
20025528:	80000000 	or	r0, r0, r0
		write_end_RUN();
2002552c:	b9f4c1f8 	brlid	r15, -15880	// 20021724 <write_end_RUN>
20025530:	80000000 	or	r0, r0, r0
		write_end_VALUE();
20025534:	b9f4c298 	brlid	r15, -15720	// 200217cc <write_end_VALUE>
20025538:	80000000 	or	r0, r0, r0
		write_end_LAST();
2002553c:	b9f4c338 	brlid	r15, -15560	// 20021874 <write_end_LAST>
20025540:	80000000 	or	r0, r0, r0
	}
20025544:	e9e10000 	lwi	r15, r1, 0
20025548:	10330000 	addk	r1, r19, r0
2002554c:	ea610068 	lwi	r19, r1, 104
20025550:	3021006c 	addik	r1, r1, 108
20025554:	b60f0008 	rtsd	r15, 8
20025558:	80000000 	or	r0, r0, r0

2002555c <isSchedulable_read_block_nodc_inter>:
	static i32 isSchedulable_read_block_nodc_inter() {
2002555c:	3021fff0 	addik	r1, r1, -16
20025560:	fa61000c 	swi	r19, r1, 12
20025564:	12610000 	addk	r19, r1, r0
		i32 result;
		i32 local_is_intra;
	
		local_is_intra = is_intra;
20025568:	b0002006 	imm	8198
2002556c:	e8601e60 	lwi	r3, r0, 7776	// 20061e60 <is_intra>
20025570:	f8730004 	swi	r3, r19, 4
		result = !local_is_intra;
20025574:	e8930004 	lwi	r4, r19, 4
20025578:	10600000 	addk	r3, r0, r0
2002557c:	88641c00 	pcmpeq	r3, r4, r3
20025580:	a46300ff 	andi	r3, r3, 255
20025584:	f8730008 	swi	r3, r19, 8
		return result;
20025588:	e8730008 	lwi	r3, r19, 8
	}
2002558c:	10330000 	addk	r1, r19, r0
20025590:	ea61000c 	lwi	r19, r1, 12
20025594:	30210010 	addik	r1, r1, 16
20025598:	b60f0008 	rtsd	r15, 8
2002559c:	80000000 	or	r0, r0, r0

200255a0 <read_block_nodc_inter>:
	
	static void read_block_nodc_inter() {
200255a0:	3021ffb0 	addik	r1, r1, -80
200255a4:	f9e10000 	swi	r15, r1, 0
200255a8:	fa61004c 	swi	r19, r1, 76
200255ac:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
200255b0:	b0002006 	imm	8198
200255b4:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
200255b8:	a46301ff 	andi	r3, r3, 511
200255bc:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_QP = index_QP % SIZE_QP;
200255c0:	b0002006 	imm	8198
200255c4:	e8601e18 	lwi	r3, r0, 7704	// 20061e18 <index_QP>
200255c8:	a46301ff 	andi	r3, r3, 511
200255cc:	f8730028 	swi	r3, r19, 40
		i32 local_fourmvflag;
		i32 tmp_if0;
		i32 local_FOURMV;
		i8 local_vop_quant;
	
		local_INTER = ConstantsBtype_INTER;
200255d0:	30600200 	addik	r3, r0, 512
200255d4:	f873002c 	swi	r3, r19, 44
		local_ac_coded = ac_coded;
200255d8:	b0002006 	imm	8198
200255dc:	e8601e88 	lwi	r3, r0, 7816	// 20061e88 <ac_coded>
200255e0:	f8730030 	swi	r3, r19, 48
		if (local_ac_coded) {
200255e4:	e8730030 	lwi	r3, r19, 48
200255e8:	bc030018 	beqi	r3, 24		// 20025600
			local_ACCODED = Constants_ACCODED;
200255ec:	30600002 	addik	r3, r0, 2
200255f0:	f8730034 	swi	r3, r19, 52
			tmp_if = local_ACCODED;
200255f4:	e8730034 	lwi	r3, r19, 52
200255f8:	f873001c 	swi	r3, r19, 28
200255fc:	b8000008 	bri	8		// 20025604
		} else {
			tmp_if = 0;
20025600:	f813001c 	swi	r0, r19, 28
		}
		cmd = local_INTER | tmp_if;
20025604:	e873002c 	lwi	r3, r19, 44
20025608:	90830061 	sext16	r4, r3
2002560c:	e873001c 	lwi	r3, r19, 28
20025610:	90630061 	sext16	r3, r3
20025614:	80641800 	or	r3, r4, r3
20025618:	f4730038 	shi	r3, r19, 56
		local_MOTION = ConstantsBtype_MOTION;
2002561c:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20025620:	f873003c 	swi	r3, r19, 60
		local_fourmvflag = fourmvflag;
20025624:	b0002006 	imm	8198
20025628:	e8601e68 	lwi	r3, r0, 7784	// 20061e68 <fourmvflag>
2002562c:	f8730040 	swi	r3, r19, 64
		if (local_fourmvflag) {
20025630:	e8730040 	lwi	r3, r19, 64
20025634:	bc030018 	beqi	r3, 24		// 2002564c
			local_FOURMV = Constants_FOURMV;
20025638:	30600004 	addik	r3, r0, 4
2002563c:	f8730044 	swi	r3, r19, 68
			tmp_if0 = local_FOURMV;
20025640:	e8730044 	lwi	r3, r19, 68
20025644:	f8730020 	swi	r3, r19, 32
20025648:	b8000008 	bri	8		// 20025650
		} else {
			tmp_if0 = 0;
2002564c:	f8130020 	swi	r0, r19, 32
		}
		cmd = cmd | (local_MOTION | tmp_if0);
20025650:	e873003c 	lwi	r3, r19, 60
20025654:	90830061 	sext16	r4, r3
20025658:	e8730020 	lwi	r3, r19, 32
2002565c:	90630061 	sext16	r3, r3
20025660:	80641800 	or	r3, r4, r3
20025664:	90830061 	sext16	r4, r3
20025668:	e4730038 	lhui	r3, r19, 56
2002566c:	80641800 	or	r3, r4, r3
20025670:	f4730038 	shi	r3, r19, 56
		tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE] = cmd;
20025674:	b0002004 	imm	8196
20025678:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
2002567c:	e8830004 	lwi	r4, r3, 4
20025680:	b0002006 	imm	8198
20025684:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20025688:	a46301ff 	andi	r3, r3, 511
2002568c:	10631800 	addk	r3, r3, r3
20025690:	10641800 	addk	r3, r4, r3
20025694:	e4930038 	lhui	r4, r19, 56
20025698:	f4830000 	shi	r4, r3, 0
		local_vop_quant = vop_quant;
2002569c:	b0002006 	imm	8198
200256a0:	e0601e54 	lbui	r3, r0, 7764	// 20061e54 <vop_quant>
200256a4:	f0730048 	sbi	r3, r19, 72
		tokens_QP[(index_QP + (0)) % SIZE_QP] = local_vop_quant;
200256a8:	b0002004 	imm	8196
200256ac:	e8607324 	lwi	r3, r0, 29476	// 20047324 <decoder_parser_parseheaders_QP>
200256b0:	e8830004 	lwi	r4, r3, 4
200256b4:	b0002006 	imm	8198
200256b8:	e8601e18 	lwi	r3, r0, 7704	// 20061e18 <index_QP>
200256bc:	a46301ff 	andi	r3, r3, 511
200256c0:	10641800 	addk	r3, r4, r3
200256c4:	e0930048 	lbui	r4, r19, 72
200256c8:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
200256cc:	b0002006 	imm	8198
200256d0:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
200256d4:	30630001 	addik	r3, r3, 1
200256d8:	b0002006 	imm	8198
200256dc:	f8601de0 	swi	r3, r0, 7648	// 20061de0 <index_BTYPE>
		index_QP += 1;
200256e0:	b0002006 	imm	8198
200256e4:	e8601e18 	lwi	r3, r0, 7704	// 20061e18 <index_QP>
200256e8:	30630001 	addik	r3, r3, 1
200256ec:	b0002006 	imm	8198
200256f0:	f8601e18 	swi	r3, r0, 7704	// 20061e18 <index_QP>
		
		write_end_BTYPE();
200256f4:	b9f4bee0 	brlid	r15, -16672	// 200215d4 <write_end_BTYPE>
200256f8:	80000000 	or	r0, r0, r0
		write_end_QP();
200256fc:	b9f4c370 	brlid	r15, -15504	// 20021a6c <write_end_QP>
20025700:	80000000 	or	r0, r0, r0
	}
20025704:	e9e10000 	lwi	r15, r1, 0
20025708:	10330000 	addk	r1, r19, r0
2002570c:	ea61004c 	lwi	r19, r1, 76
20025710:	30210050 	addik	r1, r1, 80
20025714:	b60f0008 	rtsd	r15, 8
20025718:	80000000 	or	r0, r0, r0

2002571c <isSchedulable_read_block_nodc_intra>:
	static i32 isSchedulable_read_block_nodc_intra() {
2002571c:	3021ffe8 	addik	r1, r1, -24
20025720:	fa610014 	swi	r19, r1, 20
20025724:	12610000 	addk	r19, r1, r0
		i32 local_is_intra;
		i8 local_prev_quant;
		i8 local_intra_dc_vlc_thr;
		i32 local_ac_coded;
	
		local_is_intra = is_intra;
20025728:	b0002006 	imm	8198
2002572c:	e8601e60 	lwi	r3, r0, 7776	// 20061e60 <is_intra>
20025730:	f8730004 	swi	r3, r19, 4
		local_prev_quant = prev_quant;
20025734:	b0002006 	imm	8198
20025738:	e0601e55 	lbui	r3, r0, 7765	// 20061e55 <prev_quant>
2002573c:	f0730008 	sbi	r3, r19, 8
		local_intra_dc_vlc_thr = intra_dc_vlc_thr;
20025740:	b0002006 	imm	8198
20025744:	e0601e56 	lbui	r3, r0, 7766	// 20061e56 <intra_dc_vlc_thr>
20025748:	f0730009 	sbi	r3, r19, 9
		local_ac_coded = ac_coded;
2002574c:	b0002006 	imm	8198
20025750:	e8601e88 	lwi	r3, r0, 7816	// 20061e88 <ac_coded>
20025754:	f873000c 	swi	r3, r19, 12
		result = local_is_intra && local_prev_quant >= local_intra_dc_vlc_thr && local_ac_coded;
20025758:	e8730004 	lwi	r3, r19, 4
2002575c:	bc03002c 	beqi	r3, 44		// 20025788
20025760:	e0730008 	lbui	r3, r19, 8
20025764:	90830060 	sext8	r4, r3
20025768:	e0730009 	lbui	r3, r19, 9
2002576c:	90630060 	sext8	r3, r3
20025770:	16432001 	cmp	r18, r3, r4
20025774:	bc520014 	blti	r18, 20		// 20025788
20025778:	e873000c 	lwi	r3, r19, 12
2002577c:	bc03000c 	beqi	r3, 12		// 20025788
20025780:	30600001 	addik	r3, r0, 1
20025784:	b8000008 	bri	8		// 2002578c
20025788:	10600000 	addk	r3, r0, r0
2002578c:	f8730010 	swi	r3, r19, 16
		return result;
20025790:	e8730010 	lwi	r3, r19, 16
	}
20025794:	10330000 	addk	r1, r19, r0
20025798:	ea610014 	lwi	r19, r1, 20
2002579c:	30210018 	addik	r1, r1, 24
200257a0:	b60f0008 	rtsd	r15, 8
200257a4:	80000000 	or	r0, r0, r0

200257a8 <read_block_nodc_intra>:
	
	static void read_block_nodc_intra() {
200257a8:	3021ffb4 	addik	r1, r1, -76
200257ac:	f9e10000 	swi	r15, r1, 0
200257b0:	fa610048 	swi	r19, r1, 72
200257b4:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
200257b8:	b0002006 	imm	8198
200257bc:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
200257c0:	a46301ff 	andi	r3, r3, 511
200257c4:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_QP = index_QP % SIZE_QP;
200257c8:	b0002006 	imm	8198
200257cc:	e8601e18 	lwi	r3, r0, 7704	// 20061e18 <index_QP>
200257d0:	a46301ff 	andi	r3, r3, 511
200257d4:	f8730028 	swi	r3, r19, 40
		i32 local_ac_pred_flag;
		i32 tmp_if0;
		i32 local_ACPRED;
		i8 local_vop_quant;
	
		local_INTRA = ConstantsBtype_INTRA;
200257d8:	30600400 	addik	r3, r0, 1024	// 400 <_HEAP_SIZE>
200257dc:	f873002c 	swi	r3, r19, 44
		local_ac_coded = ac_coded;
200257e0:	b0002006 	imm	8198
200257e4:	e8601e88 	lwi	r3, r0, 7816	// 20061e88 <ac_coded>
200257e8:	f8730030 	swi	r3, r19, 48
		if (local_ac_coded) {
200257ec:	e8730030 	lwi	r3, r19, 48
200257f0:	bc030018 	beqi	r3, 24		// 20025808
			local_ACCODED = Constants_ACCODED;
200257f4:	30600002 	addik	r3, r0, 2
200257f8:	f8730034 	swi	r3, r19, 52
			tmp_if = local_ACCODED;
200257fc:	e8730034 	lwi	r3, r19, 52
20025800:	f873001c 	swi	r3, r19, 28
20025804:	b8000008 	bri	8		// 2002580c
		} else {
			tmp_if = 0;
20025808:	f813001c 	swi	r0, r19, 28
		}
		cmd = local_INTRA | tmp_if;
2002580c:	e873002c 	lwi	r3, r19, 44
20025810:	90830061 	sext16	r4, r3
20025814:	e873001c 	lwi	r3, r19, 28
20025818:	90630061 	sext16	r3, r3
2002581c:	80641800 	or	r3, r4, r3
20025820:	f4730038 	shi	r3, r19, 56
		local_ac_pred_flag = ac_pred_flag;
20025824:	b0002006 	imm	8198
20025828:	e8601e74 	lwi	r3, r0, 7796	// 20061e74 <ac_pred_flag>
2002582c:	f873003c 	swi	r3, r19, 60
		if (local_ac_pred_flag) {
20025830:	e873003c 	lwi	r3, r19, 60
20025834:	bc030018 	beqi	r3, 24		// 2002584c
			local_ACPRED = Constants_ACPRED;
20025838:	30600001 	addik	r3, r0, 1
2002583c:	f8730040 	swi	r3, r19, 64
			tmp_if0 = local_ACPRED;
20025840:	e8730040 	lwi	r3, r19, 64
20025844:	f8730020 	swi	r3, r19, 32
20025848:	b8000008 	bri	8		// 20025850
		} else {
			tmp_if0 = 0;
2002584c:	f8130020 	swi	r0, r19, 32
		}
		cmd = cmd | tmp_if0;
20025850:	e8730020 	lwi	r3, r19, 32
20025854:	90830061 	sext16	r4, r3
20025858:	e4730038 	lhui	r3, r19, 56
2002585c:	80641800 	or	r3, r4, r3
20025860:	f4730038 	shi	r3, r19, 56
		tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE] = cmd;
20025864:	b0002004 	imm	8196
20025868:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
2002586c:	e8830004 	lwi	r4, r3, 4
20025870:	b0002006 	imm	8198
20025874:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20025878:	a46301ff 	andi	r3, r3, 511
2002587c:	10631800 	addk	r3, r3, r3
20025880:	10641800 	addk	r3, r4, r3
20025884:	e4930038 	lhui	r4, r19, 56
20025888:	f4830000 	shi	r4, r3, 0
		local_vop_quant = vop_quant;
2002588c:	b0002006 	imm	8198
20025890:	e0601e54 	lbui	r3, r0, 7764	// 20061e54 <vop_quant>
20025894:	f0730044 	sbi	r3, r19, 68
		tokens_QP[(index_QP + (0)) % SIZE_QP] = local_vop_quant;
20025898:	b0002004 	imm	8196
2002589c:	e8607324 	lwi	r3, r0, 29476	// 20047324 <decoder_parser_parseheaders_QP>
200258a0:	e8830004 	lwi	r4, r3, 4
200258a4:	b0002006 	imm	8198
200258a8:	e8601e18 	lwi	r3, r0, 7704	// 20061e18 <index_QP>
200258ac:	a46301ff 	andi	r3, r3, 511
200258b0:	10641800 	addk	r3, r4, r3
200258b4:	e0930044 	lbui	r4, r19, 68
200258b8:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
200258bc:	b0002006 	imm	8198
200258c0:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
200258c4:	30630001 	addik	r3, r3, 1
200258c8:	b0002006 	imm	8198
200258cc:	f8601de0 	swi	r3, r0, 7648	// 20061de0 <index_BTYPE>
		index_QP += 1;
200258d0:	b0002006 	imm	8198
200258d4:	e8601e18 	lwi	r3, r0, 7704	// 20061e18 <index_QP>
200258d8:	30630001 	addik	r3, r3, 1
200258dc:	b0002006 	imm	8198
200258e0:	f8601e18 	swi	r3, r0, 7704	// 20061e18 <index_QP>
		
		write_end_BTYPE();
200258e4:	b9f4bcf0 	brlid	r15, -17168	// 200215d4 <write_end_BTYPE>
200258e8:	80000000 	or	r0, r0, r0
		write_end_QP();
200258ec:	b9f4c180 	brlid	r15, -16000	// 20021a6c <write_end_QP>
200258f0:	80000000 	or	r0, r0, r0
	}
200258f4:	e9e10000 	lwi	r15, r1, 0
200258f8:	10330000 	addk	r1, r19, r0
200258fc:	ea610048 	lwi	r19, r1, 72
20025900:	3021004c 	addik	r1, r1, 76
20025904:	b60f0008 	rtsd	r15, 8
20025908:	80000000 	or	r0, r0, r0

2002590c <isSchedulable_read_block_coeff_ac>:
	static i32 isSchedulable_read_block_coeff_ac() {
2002590c:	3021fff0 	addik	r1, r1, -16
20025910:	fa61000c 	swi	r19, r1, 12
20025914:	12610000 	addk	r19, r1, r0
		i32 result;
		i32 local_ac_coded;
	
		local_ac_coded = ac_coded;
20025918:	b0002006 	imm	8198
2002591c:	e8601e88 	lwi	r3, r0, 7816	// 20061e88 <ac_coded>
20025920:	f8730004 	swi	r3, r19, 4
		result = local_ac_coded;
20025924:	e8730004 	lwi	r3, r19, 4
20025928:	f8730008 	swi	r3, r19, 8
		return result;
2002592c:	e8730008 	lwi	r3, r19, 8
	}
20025930:	10330000 	addk	r1, r19, r0
20025934:	ea61000c 	lwi	r19, r1, 12
20025938:	30210010 	addik	r1, r1, 16
2002593c:	b60f0008 	rtsd	r15, 8
20025940:	80000000 	or	r0, r0, r0

20025944 <read_block_coeff_ac>:
	
	static void read_block_coeff_ac() {
20025944:	3021fff8 	addik	r1, r1, -8
20025948:	fa610004 	swi	r19, r1, 4
2002594c:	12610000 	addk	r19, r1, r0
	
	
	
		// Update ports indexes
		
	}
20025950:	10330000 	addk	r1, r19, r0
20025954:	ea610004 	lwi	r19, r1, 4
20025958:	30210008 	addik	r1, r1, 8
2002595c:	b60f0008 	rtsd	r15, 8
20025960:	80000000 	or	r0, r0, r0

20025964 <isSchedulable_read_block_coeff_noac>:
	static i32 isSchedulable_read_block_coeff_noac() {
20025964:	3021fff4 	addik	r1, r1, -12
20025968:	fa610008 	swi	r19, r1, 8
2002596c:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
20025970:	30600001 	addik	r3, r0, 1
20025974:	f8730004 	swi	r3, r19, 4
		return result;
20025978:	e8730004 	lwi	r3, r19, 4
	}
2002597c:	10330000 	addk	r1, r19, r0
20025980:	ea610008 	lwi	r19, r1, 8
20025984:	3021000c 	addik	r1, r1, 12
20025988:	b60f0008 	rtsd	r15, 8
2002598c:	80000000 	or	r0, r0, r0

20025990 <read_block_coeff_noac>:
	
	static void read_block_coeff_noac() {
20025990:	3021fff4 	addik	r1, r1, -12
20025994:	fa610008 	swi	r19, r1, 8
20025998:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
	
		i8 local_comp;
	
		local_comp = comp;
2002599c:	b0002006 	imm	8198
200259a0:	e0601e78 	lbui	r3, r0, 7800	// 20061e78 <comp>
200259a4:	f0730004 	sbi	r3, r19, 4
		comp = local_comp + 1;
200259a8:	e0730004 	lbui	r3, r19, 4
200259ac:	30630001 	addik	r3, r3, 1
200259b0:	a46300ff 	andi	r3, r3, 255
200259b4:	90630060 	sext8	r3, r3
200259b8:	b0002006 	imm	8198
200259bc:	f0601e78 	sbi	r3, r0, 7800	// 20061e78 <comp>
	
		// Update ports indexes
		
	}
200259c0:	10330000 	addk	r1, r19, r0
200259c4:	ea610008 	lwi	r19, r1, 8
200259c8:	3021000c 	addik	r1, r1, 12
200259cc:	b60f0008 	rtsd	r15, 8
200259d0:	80000000 	or	r0, r0, r0

200259d4 <isSchedulable_read_block_coeff>:
	static i32 isSchedulable_read_block_coeff() {
200259d4:	3021ffec 	addik	r1, r1, -20
200259d8:	fa610010 	swi	r19, r1, 16
200259dc:	12610000 	addk	r19, r1, r0
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
200259e0:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200259e4:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
200259e8:	e0730004 	lbui	r3, r19, 4
200259ec:	10631800 	addk	r3, r3, r3
200259f0:	b0002006 	imm	8198
200259f4:	30631e20 	addik	r3, r3, 7712
200259f8:	e4630000 	lhui	r3, r3, 0
200259fc:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20025a00:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20025a04:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
20025a08:	e4b30006 	lhui	r5, r19, 6
20025a0c:	e0730008 	lbui	r3, r19, 8
20025a10:	3063ffff 	addik	r3, r3, -1
20025a14:	64830403 	bslli	r4, r3, 3
20025a18:	30600001 	addik	r3, r0, 1
20025a1c:	16442801 	cmp	r18, r4, r5
20025a20:	bcb20008 	bgei	r18, 8		// 20025a28
20025a24:	10600000 	addk	r3, r0, r0
20025a28:	a46300ff 	andi	r3, r3, 255
20025a2c:	f873000c 	swi	r3, r19, 12
		return result;
20025a30:	e873000c 	lwi	r3, r19, 12
	}
20025a34:	10330000 	addk	r1, r19, r0
20025a38:	ea610010 	lwi	r19, r1, 16
20025a3c:	30210014 	addik	r1, r1, 20
20025a40:	b60f0008 	rtsd	r15, 8
20025a44:	80000000 	or	r0, r0, r0

20025a48 <read_block_coeff>:
	
	static void read_block_coeff() {
20025a48:	3021ffc0 	addik	r1, r1, -64
20025a4c:	f9e10000 	swi	r15, r1, 0
20025a50:	fa61003c 	swi	r19, r1, 60
20025a54:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_RUN = index_RUN % SIZE_RUN;
20025a58:	b0002006 	imm	8198
20025a5c:	e8601df0 	lwi	r3, r0, 7664	// 20061df0 <index_RUN>
20025a60:	a46301ff 	andi	r3, r3, 511
20025a64:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_VALUE = index_VALUE % SIZE_VALUE;
20025a68:	b0002006 	imm	8198
20025a6c:	e8601df8 	lwi	r3, r0, 7672	// 20061df8 <index_VALUE>
20025a70:	a46301ff 	andi	r3, r3, 511
20025a74:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_LAST = index_LAST % SIZE_LAST;
20025a78:	b0002006 	imm	8198
20025a7c:	e8601e00 	lwi	r3, r0, 7680	// 20061e00 <index_LAST>
20025a80:	a46301ff 	andi	r3, r3, 511
20025a84:	f8730028 	swi	r3, r19, 40
		i32 local_is_intra;
		i8 tmp_run;
		i8 tmp_level;
		i32 tmp_last;
	
		local_is_intra = is_intra;
20025a88:	b0002006 	imm	8198
20025a8c:	e8601e60 	lwi	r3, r0, 7776	// 20061e60 <is_intra>
20025a90:	f873002c 	swi	r3, r19, 44
		vldFunctions_get_coeff(fifo, res, "get_coeff            ", local_is_intra, last, run, level);
20025a94:	30730038 	addik	r3, r19, 56
20025a98:	b0002006 	imm	8198
20025a9c:	30801e84 	addik	r4, r0, 7812	// 20061e84 <level>
20025aa0:	f881001c 	swi	r4, r1, 28
20025aa4:	b0002006 	imm	8198
20025aa8:	30a01e20 	addik	r5, r0, 7712	// 20061e20 <fifo>
20025aac:	10c30000 	addk	r6, r3, r0
20025ab0:	b0002004 	imm	8196
20025ab4:	30e05318 	addik	r7, r0, 21272
20025ab8:	e913002c 	lwi	r8, r19, 44
20025abc:	b0002006 	imm	8198
20025ac0:	31201e7c 	addik	r9, r0, 7804	// 20061e7c <last>
20025ac4:	b0002006 	imm	8198
20025ac8:	31401e80 	addik	r10, r0, 7808	// 20061e80 <run>
20025acc:	b9f4cd1c 	brlid	r15, -13028	// 200227e8 <vldFunctions_get_coeff>
20025ad0:	80000000 	or	r0, r0, r0
		tmp_run = run[0];
20025ad4:	b0002006 	imm	8198
20025ad8:	e0601e80 	lbui	r3, r0, 7808	// 20061e80 <run>
20025adc:	f0730030 	sbi	r3, r19, 48
		tokens_RUN[(index_RUN + (0)) % SIZE_RUN] = tmp_run;
20025ae0:	b0002004 	imm	8196
20025ae4:	e8607334 	lwi	r3, r0, 29492	// 20047334 <decoder_parser_parseheaders_RUN>
20025ae8:	e8830004 	lwi	r4, r3, 4
20025aec:	b0002006 	imm	8198
20025af0:	e8601df0 	lwi	r3, r0, 7664	// 20061df0 <index_RUN>
20025af4:	a46301ff 	andi	r3, r3, 511
20025af8:	10641800 	addk	r3, r4, r3
20025afc:	e0930030 	lbui	r4, r19, 48
20025b00:	f0830000 	sbi	r4, r3, 0
		tmp_level = level[0];
20025b04:	b0002006 	imm	8198
20025b08:	e0601e84 	lbui	r3, r0, 7812	// 20061e84 <level>
20025b0c:	f0730031 	sbi	r3, r19, 49
		tokens_VALUE[(index_VALUE + (0)) % SIZE_VALUE] = tmp_level;
20025b10:	b0002004 	imm	8196
20025b14:	e8607370 	lwi	r3, r0, 29552	// 20047370 <decoder_parser_parseheaders_VALUE>
20025b18:	e8830004 	lwi	r4, r3, 4
20025b1c:	b0002006 	imm	8198
20025b20:	e8601df8 	lwi	r3, r0, 7672	// 20061df8 <index_VALUE>
20025b24:	a46301ff 	andi	r3, r3, 511
20025b28:	10631800 	addk	r3, r3, r3
20025b2c:	10641800 	addk	r3, r4, r3
20025b30:	e0930031 	lbui	r4, r19, 49
20025b34:	90840060 	sext8	r4, r4
20025b38:	90840061 	sext16	r4, r4
20025b3c:	f4830000 	shi	r4, r3, 0
		tmp_last = last[0];
20025b40:	b0002006 	imm	8198
20025b44:	e8601e7c 	lwi	r3, r0, 7804	// 20061e7c <last>
20025b48:	f8730034 	swi	r3, r19, 52
		tokens_LAST[(index_LAST + (0)) % SIZE_LAST] = tmp_last;
20025b4c:	b0002004 	imm	8196
20025b50:	e860734c 	lwi	r3, r0, 29516	// 2004734c <decoder_parser_parseheaders_LAST>
20025b54:	e8830004 	lwi	r4, r3, 4
20025b58:	b0002006 	imm	8198
20025b5c:	e8601e00 	lwi	r3, r0, 7680	// 20061e00 <index_LAST>
20025b60:	a46301ff 	andi	r3, r3, 511
20025b64:	64630402 	bslli	r3, r3, 2
20025b68:	10641800 	addk	r3, r4, r3
20025b6c:	e8930034 	lwi	r4, r19, 52
20025b70:	f8830000 	swi	r4, r3, 0
	
		// Update ports indexes
		index_RUN += 1;
20025b74:	b0002006 	imm	8198
20025b78:	e8601df0 	lwi	r3, r0, 7664	// 20061df0 <index_RUN>
20025b7c:	30630001 	addik	r3, r3, 1
20025b80:	b0002006 	imm	8198
20025b84:	f8601df0 	swi	r3, r0, 7664	// 20061df0 <index_RUN>
		index_VALUE += 1;
20025b88:	b0002006 	imm	8198
20025b8c:	e8601df8 	lwi	r3, r0, 7672	// 20061df8 <index_VALUE>
20025b90:	30630001 	addik	r3, r3, 1
20025b94:	b0002006 	imm	8198
20025b98:	f8601df8 	swi	r3, r0, 7672	// 20061df8 <index_VALUE>
		index_LAST += 1;
20025b9c:	b0002006 	imm	8198
20025ba0:	e8601e00 	lwi	r3, r0, 7680	// 20061e00 <index_LAST>
20025ba4:	30630001 	addik	r3, r3, 1
20025ba8:	b0002006 	imm	8198
20025bac:	f8601e00 	swi	r3, r0, 7680	// 20061e00 <index_LAST>
		
		write_end_RUN();
20025bb0:	b9f4bb74 	brlid	r15, -17548	// 20021724 <write_end_RUN>
20025bb4:	80000000 	or	r0, r0, r0
		write_end_VALUE();
20025bb8:	b9f4bc14 	brlid	r15, -17388	// 200217cc <write_end_VALUE>
20025bbc:	80000000 	or	r0, r0, r0
		write_end_LAST();
20025bc0:	b9f4bcb4 	brlid	r15, -17228	// 20021874 <write_end_LAST>
20025bc4:	80000000 	or	r0, r0, r0
	}
20025bc8:	e9e10000 	lwi	r15, r1, 0
20025bcc:	10330000 	addk	r1, r19, r0
20025bd0:	ea61003c 	lwi	r19, r1, 60
20025bd4:	30210040 	addik	r1, r1, 64
20025bd8:	b60f0008 	rtsd	r15, 8
20025bdc:	80000000 	or	r0, r0, r0

20025be0 <isSchedulable_read_block_coeff_done>:
	static i32 isSchedulable_read_block_coeff_done() {
20025be0:	3021fff0 	addik	r1, r1, -16
20025be4:	fa61000c 	swi	r19, r1, 12
20025be8:	12610000 	addk	r19, r1, r0
		i32 result;
		i32 tmp_last;
	
		tmp_last = last[0];
20025bec:	b0002006 	imm	8198
20025bf0:	e8601e7c 	lwi	r3, r0, 7804	// 20061e7c <last>
20025bf4:	f8730004 	swi	r3, r19, 4
		result = tmp_last;
20025bf8:	e8730004 	lwi	r3, r19, 4
20025bfc:	f8730008 	swi	r3, r19, 8
		return result;
20025c00:	e8730008 	lwi	r3, r19, 8
	}
20025c04:	10330000 	addk	r1, r19, r0
20025c08:	ea61000c 	lwi	r19, r1, 12
20025c0c:	30210010 	addik	r1, r1, 16
20025c10:	b60f0008 	rtsd	r15, 8
20025c14:	80000000 	or	r0, r0, r0

20025c18 <read_block_coeff_done>:
	
	static void read_block_coeff_done() {
20025c18:	3021fff4 	addik	r1, r1, -12
20025c1c:	fa610008 	swi	r19, r1, 8
20025c20:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
	
		i8 local_comp;
	
		local_comp = comp;
20025c24:	b0002006 	imm	8198
20025c28:	e0601e78 	lbui	r3, r0, 7800	// 20061e78 <comp>
20025c2c:	f0730004 	sbi	r3, r19, 4
		comp = local_comp + 1;
20025c30:	e0730004 	lbui	r3, r19, 4
20025c34:	30630001 	addik	r3, r3, 1
20025c38:	a46300ff 	andi	r3, r3, 255
20025c3c:	90630060 	sext8	r3, r3
20025c40:	b0002006 	imm	8198
20025c44:	f0601e78 	sbi	r3, r0, 7800	// 20061e78 <comp>
	
		// Update ports indexes
		
	}
20025c48:	10330000 	addk	r1, r19, r0
20025c4c:	ea610008 	lwi	r19, r1, 8
20025c50:	3021000c 	addik	r1, r1, 12
20025c54:	b60f0008 	rtsd	r15, 8
20025c58:	80000000 	or	r0, r0, r0

20025c5c <isSchedulable_read_uncoded>:
	static i32 isSchedulable_read_uncoded() {
20025c5c:	3021fff0 	addik	r1, r1, -16
20025c60:	fa61000c 	swi	r19, r1, 12
20025c64:	12610000 	addk	r19, r1, r0
		i32 result;
		i32 local_not_coded;
	
		local_not_coded = not_coded;
20025c68:	b0002006 	imm	8198
20025c6c:	e8601e6c 	lwi	r3, r0, 7788	// 20061e6c <not_coded>
20025c70:	f8730004 	swi	r3, r19, 4
		result = local_not_coded;
20025c74:	e8730004 	lwi	r3, r19, 4
20025c78:	f8730008 	swi	r3, r19, 8
		return result;
20025c7c:	e8730008 	lwi	r3, r19, 8
	}
20025c80:	10330000 	addk	r1, r19, r0
20025c84:	ea61000c 	lwi	r19, r1, 12
20025c88:	30210010 	addik	r1, r1, 16
20025c8c:	b60f0008 	rtsd	r15, 8
20025c90:	80000000 	or	r0, r0, r0

20025c94 <read_uncoded>:
	
	static void read_uncoded() {
20025c94:	3021ffc8 	addik	r1, r1, -56
20025c98:	f9e10000 	swi	r15, r1, 0
20025c9c:	fa610034 	swi	r19, r1, 52
20025ca0:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20025ca4:	b0002006 	imm	8198
20025ca8:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20025cac:	a46301ff 	andi	r3, r3, 511
20025cb0:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_QP = index_QP % SIZE_QP;
20025cb4:	b0002006 	imm	8198
20025cb8:	e8601e18 	lwi	r3, r0, 7704	// 20061e18 <index_QP>
20025cbc:	a46301ff 	andi	r3, r3, 511
20025cc0:	f8730024 	swi	r3, r19, 36
		i32 local_mb_cnt;
		i32 i;
		i32 local_INTER;
		i8 local_vop_quant;
	
		comp = 6;
20025cc4:	30600006 	addik	r3, r0, 6
20025cc8:	b0002006 	imm	8198
20025ccc:	f0601e78 	sbi	r3, r0, 7800	// 20061e78 <comp>
		local_mb_cnt = mb_cnt;
20025cd0:	b0002006 	imm	8198
20025cd4:	e8601e58 	lwi	r3, r0, 7768	// 20061e58 <mb_cnt>
20025cd8:	f8730028 	swi	r3, r19, 40
		mb_cnt = local_mb_cnt + 1;
20025cdc:	e8730028 	lwi	r3, r19, 40
20025ce0:	30630001 	addik	r3, r3, 1
20025ce4:	b0002006 	imm	8198
20025ce8:	f8601e58 	swi	r3, r0, 7768	// 20061e58 <mb_cnt>
		i = 0;
20025cec:	f813001c 	swi	r0, r19, 28
		while (i <= 5) {
20025cf0:	b800004c 	bri	76		// 20025d3c
			local_INTER = ConstantsBtype_INTER;
20025cf4:	30600200 	addik	r3, r0, 512
20025cf8:	f873002c 	swi	r3, r19, 44
			tokens_BTYPE[(index_BTYPE + (i)) % SIZE_BTYPE] = local_INTER;
20025cfc:	b0002004 	imm	8196
20025d00:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20025d04:	e8830004 	lwi	r4, r3, 4
20025d08:	b0002006 	imm	8198
20025d0c:	e8a01de0 	lwi	r5, r0, 7648	// 20061de0 <index_BTYPE>
20025d10:	e873001c 	lwi	r3, r19, 28
20025d14:	10651800 	addk	r3, r5, r3
20025d18:	a46301ff 	andi	r3, r3, 511
20025d1c:	10631800 	addk	r3, r3, r3
20025d20:	10641800 	addk	r3, r4, r3
20025d24:	e893002c 	lwi	r4, r19, 44
20025d28:	90840061 	sext16	r4, r4
20025d2c:	f4830000 	shi	r4, r3, 0
			i = i + 1;
20025d30:	e873001c 	lwi	r3, r19, 28
20025d34:	30630001 	addik	r3, r3, 1
20025d38:	f873001c 	swi	r3, r19, 28
	
		comp = 6;
		local_mb_cnt = mb_cnt;
		mb_cnt = local_mb_cnt + 1;
		i = 0;
		while (i <= 5) {
20025d3c:	e893001c 	lwi	r4, r19, 28
20025d40:	30600005 	addik	r3, r0, 5
20025d44:	16441801 	cmp	r18, r4, r3
20025d48:	bcb2ffac 	bgei	r18, -84		// 20025cf4
			local_INTER = ConstantsBtype_INTER;
			tokens_BTYPE[(index_BTYPE + (i)) % SIZE_BTYPE] = local_INTER;
			i = i + 1;
		}
		i = 0;
20025d4c:	f813001c 	swi	r0, r19, 28
		while (i <= 5) {
20025d50:	b8000048 	bri	72		// 20025d98
			local_vop_quant = vop_quant;
20025d54:	b0002006 	imm	8198
20025d58:	e0601e54 	lbui	r3, r0, 7764	// 20061e54 <vop_quant>
20025d5c:	f0730030 	sbi	r3, r19, 48
			tokens_QP[(index_QP + (i)) % SIZE_QP] = local_vop_quant;
20025d60:	b0002004 	imm	8196
20025d64:	e8607324 	lwi	r3, r0, 29476	// 20047324 <decoder_parser_parseheaders_QP>
20025d68:	e8830004 	lwi	r4, r3, 4
20025d6c:	b0002006 	imm	8198
20025d70:	e8a01e18 	lwi	r5, r0, 7704	// 20061e18 <index_QP>
20025d74:	e873001c 	lwi	r3, r19, 28
20025d78:	10651800 	addk	r3, r5, r3
20025d7c:	a46301ff 	andi	r3, r3, 511
20025d80:	10641800 	addk	r3, r4, r3
20025d84:	e0930030 	lbui	r4, r19, 48
20025d88:	f0830000 	sbi	r4, r3, 0
			i = i + 1;
20025d8c:	e873001c 	lwi	r3, r19, 28
20025d90:	30630001 	addik	r3, r3, 1
20025d94:	f873001c 	swi	r3, r19, 28
			local_INTER = ConstantsBtype_INTER;
			tokens_BTYPE[(index_BTYPE + (i)) % SIZE_BTYPE] = local_INTER;
			i = i + 1;
		}
		i = 0;
		while (i <= 5) {
20025d98:	e893001c 	lwi	r4, r19, 28
20025d9c:	30600005 	addik	r3, r0, 5
20025da0:	16441801 	cmp	r18, r4, r3
20025da4:	bcb2ffb0 	bgei	r18, -80		// 20025d54
			tokens_QP[(index_QP + (i)) % SIZE_QP] = local_vop_quant;
			i = i + 1;
		}
	
		// Update ports indexes
		index_BTYPE += 6;
20025da8:	b0002006 	imm	8198
20025dac:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20025db0:	30630006 	addik	r3, r3, 6
20025db4:	b0002006 	imm	8198
20025db8:	f8601de0 	swi	r3, r0, 7648	// 20061de0 <index_BTYPE>
		index_QP += 6;
20025dbc:	b0002006 	imm	8198
20025dc0:	e8601e18 	lwi	r3, r0, 7704	// 20061e18 <index_QP>
20025dc4:	30630006 	addik	r3, r3, 6
20025dc8:	b0002006 	imm	8198
20025dcc:	f8601e18 	swi	r3, r0, 7704	// 20061e18 <index_QP>
		
		write_end_BTYPE();
20025dd0:	b9f4b804 	brlid	r15, -18428	// 200215d4 <write_end_BTYPE>
20025dd4:	80000000 	or	r0, r0, r0
		write_end_QP();
20025dd8:	b9f4bc94 	brlid	r15, -17260	// 20021a6c <write_end_QP>
20025ddc:	80000000 	or	r0, r0, r0
	}
20025de0:	e9e10000 	lwi	r15, r1, 0
20025de4:	10330000 	addk	r1, r19, r0
20025de8:	ea610034 	lwi	r19, r1, 52
20025dec:	30210038 	addik	r1, r1, 56
20025df0:	b60f0008 	rtsd	r15, 8
20025df4:	80000000 	or	r0, r0, r0

20025df8 <isSchedulable_read_mv_start>:
	static i32 isSchedulable_read_mv_start() {
20025df8:	3021fff0 	addik	r1, r1, -16
20025dfc:	fa61000c 	swi	r19, r1, 12
20025e00:	12610000 	addk	r19, r1, r0
		i32 result;
		i8 local_derived_mb_type;
	
		local_derived_mb_type = derived_mb_type;
20025e04:	b0002006 	imm	8198
20025e08:	e0601e5c 	lbui	r3, r0, 7772	// 20061e5c <derived_mb_type>
20025e0c:	f0730004 	sbi	r3, r19, 4
		local_derived_mb_type = derived_mb_type;
20025e10:	b0002006 	imm	8198
20025e14:	e0601e5c 	lbui	r3, r0, 7772	// 20061e5c <derived_mb_type>
20025e18:	f0730004 	sbi	r3, r19, 4
		result = local_derived_mb_type != 3 && local_derived_mb_type != 4;
20025e1c:	e0730004 	lbui	r3, r19, 4
20025e20:	90630060 	sext8	r3, r3
20025e24:	a8630003 	xori	r3, r3, 3
20025e28:	bc03001c 	beqi	r3, 28		// 20025e44
20025e2c:	e0730004 	lbui	r3, r19, 4
20025e30:	90630060 	sext8	r3, r3
20025e34:	a8630004 	xori	r3, r3, 4
20025e38:	bc03000c 	beqi	r3, 12		// 20025e44
20025e3c:	30600001 	addik	r3, r0, 1
20025e40:	b8000008 	bri	8		// 20025e48
20025e44:	10600000 	addk	r3, r0, r0
20025e48:	f8730008 	swi	r3, r19, 8
		return result;
20025e4c:	e8730008 	lwi	r3, r19, 8
	}
20025e50:	10330000 	addk	r1, r19, r0
20025e54:	ea61000c 	lwi	r19, r1, 12
20025e58:	30210010 	addik	r1, r1, 16
20025e5c:	b60f0008 	rtsd	r15, 8
20025e60:	80000000 	or	r0, r0, r0

20025e64 <read_mv_start>:
	
	static void read_mv_start() {
20025e64:	3021fff8 	addik	r1, r1, -8
20025e68:	fa610004 	swi	r19, r1, 4
20025e6c:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
	
	
		mvcomp = 0;
20025e70:	b0002006 	imm	8198
20025e74:	f0001e8c 	sbi	r0, r0, 7820	// 20061e8c <mvcomp>
	
		// Update ports indexes
		
	}
20025e78:	10330000 	addk	r1, r19, r0
20025e7c:	ea610004 	lwi	r19, r1, 4
20025e80:	30210008 	addik	r1, r1, 8
20025e84:	b60f0008 	rtsd	r15, 8
20025e88:	80000000 	or	r0, r0, r0

20025e8c <isSchedulable_read_mv_data>:
	static i32 isSchedulable_read_mv_data() {
20025e8c:	3021ffec 	addik	r1, r1, -20
20025e90:	fa610010 	swi	r19, r1, 16
20025e94:	12610000 	addk	r19, r1, r0
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20025e98:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20025e9c:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
20025ea0:	e0730004 	lbui	r3, r19, 4
20025ea4:	10631800 	addk	r3, r3, r3
20025ea8:	b0002006 	imm	8198
20025eac:	30631e20 	addik	r3, r3, 7712
20025eb0:	e4630000 	lhui	r3, r3, 0
20025eb4:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20025eb8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20025ebc:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
20025ec0:	e4b30006 	lhui	r5, r19, 6
20025ec4:	e0730008 	lbui	r3, r19, 8
20025ec8:	3063ffff 	addik	r3, r3, -1
20025ecc:	64830403 	bslli	r4, r3, 3
20025ed0:	30600001 	addik	r3, r0, 1
20025ed4:	16442801 	cmp	r18, r4, r5
20025ed8:	bcb20008 	bgei	r18, 8		// 20025ee0
20025edc:	10600000 	addk	r3, r0, r0
20025ee0:	a46300ff 	andi	r3, r3, 255
20025ee4:	f873000c 	swi	r3, r19, 12
		return result;
20025ee8:	e873000c 	lwi	r3, r19, 12
	}
20025eec:	10330000 	addk	r1, r19, r0
20025ef0:	ea610010 	lwi	r19, r1, 16
20025ef4:	30210014 	addik	r1, r1, 20
20025ef8:	b60f0008 	rtsd	r15, 8
20025efc:	80000000 	or	r0, r0, r0

20025f00 <read_mv_data>:
	
	static void read_mv_data() {
20025f00:	3021ffb8 	addik	r1, r1, -72
20025f04:	f9e10000 	swi	r15, r1, 0
20025f08:	fa610044 	swi	r19, r1, 68
20025f0c:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_MV = index_MV % SIZE_MV;
20025f10:	b0002006 	imm	8198
20025f14:	e8601de8 	lwi	r3, r0, 7656	// 20061de8 <index_MV>
20025f18:	a46301ff 	andi	r3, r3, 511
20025f1c:	f873001c 	swi	r3, r19, 28
		i32 tmp_res2;
		i32 tmp_res3;
		i32 tmp_res4;
		u8 local_mvcomp;
	
		vldFunctions_get_mv(fifo, res, "horizontal_mv_data            ");
20025f20:	30730040 	addik	r3, r19, 64
20025f24:	b0002006 	imm	8198
20025f28:	30a01e20 	addik	r5, r0, 7712	// 20061e20 <fifo>
20025f2c:	10c30000 	addk	r6, r3, r0
20025f30:	b0002004 	imm	8196
20025f34:	30e05330 	addik	r7, r0, 21296
20025f38:	b9f4cfb0 	brlid	r15, -12368	// 20022ee8 <vldFunctions_get_mv>
20025f3c:	80000000 	or	r0, r0, r0
		tmp_res = res[0];
20025f40:	e8730040 	lwi	r3, r19, 64
20025f44:	f8730020 	swi	r3, r19, 32
		tokens_MV[(index_MV + (0)) % SIZE_MV] = tmp_res;
20025f48:	b0002004 	imm	8196
20025f4c:	e860733c 	lwi	r3, r0, 29500	// 2004733c <decoder_parser_parseheaders_MV>
20025f50:	e8830004 	lwi	r4, r3, 4
20025f54:	b0002006 	imm	8198
20025f58:	e8601de8 	lwi	r3, r0, 7656	// 20061de8 <index_MV>
20025f5c:	a46301ff 	andi	r3, r3, 511
20025f60:	10631800 	addk	r3, r3, r3
20025f64:	10641800 	addk	r3, r4, r3
20025f68:	e8930020 	lwi	r4, r19, 32
20025f6c:	90840061 	sext16	r4, r4
20025f70:	f4830000 	shi	r4, r3, 0
		local_fcode = fcode;
20025f74:	b0002006 	imm	8198
20025f78:	e0601e57 	lbui	r3, r0, 7767	// 20061e57 <fcode>
20025f7c:	f0730024 	sbi	r3, r19, 36
		tmp_res0 = res[0];
20025f80:	e8730040 	lwi	r3, r19, 64
20025f84:	f8730028 	swi	r3, r19, 40
		if (local_fcode <= 1 || tmp_res0 == 0) {
20025f88:	e0730024 	lbui	r3, r19, 36
20025f8c:	90830060 	sext8	r4, r3
20025f90:	30600001 	addik	r3, r0, 1
20025f94:	16441801 	cmp	r18, r4, r3
20025f98:	bcb2000c 	bgei	r18, 12		// 20025fa4
20025f9c:	e8730028 	lwi	r3, r19, 40
20025fa0:	bc230030 	bnei	r3, 48		// 20025fd0
			tokens_MV[(index_MV + (1)) % SIZE_MV] = 0;
20025fa4:	b0002004 	imm	8196
20025fa8:	e860733c 	lwi	r3, r0, 29500	// 2004733c <decoder_parser_parseheaders_MV>
20025fac:	e8830004 	lwi	r4, r3, 4
20025fb0:	b0002006 	imm	8198
20025fb4:	e8601de8 	lwi	r3, r0, 7656	// 20061de8 <index_MV>
20025fb8:	30630001 	addik	r3, r3, 1
20025fbc:	a46301ff 	andi	r3, r3, 511
20025fc0:	10631800 	addk	r3, r3, r3
20025fc4:	10641800 	addk	r3, r4, r3
20025fc8:	f4030000 	shi	r0, r3, 0
20025fcc:	b8000078 	bri	120		// 20026044
		} else {
			local_fcode = fcode;
20025fd0:	b0002006 	imm	8198
20025fd4:	e0601e57 	lbui	r3, r0, 7767	// 20061e57 <fcode>
20025fd8:	f0730024 	sbi	r3, r19, 36
			BitstreamReadUtils_vld_u_name(local_fcode - 1, fifo, res, "horizontal_mv_residual            ");
20025fdc:	e0730024 	lbui	r3, r19, 36
20025fe0:	3063ffff 	addik	r3, r3, -1
20025fe4:	a48300ff 	andi	r4, r3, 255
20025fe8:	30730040 	addik	r3, r19, 64
20025fec:	10a40000 	addk	r5, r4, r0
20025ff0:	b0002006 	imm	8198
20025ff4:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20025ff8:	10e30000 	addk	r7, r3, r0
20025ffc:	b0002004 	imm	8196
20026000:	31005350 	addik	r8, r0, 21328
20026004:	b9f4befc 	brlid	r15, -16644	// 20021f00 <BitstreamReadUtils_vld_u_name>
20026008:	80000000 	or	r0, r0, r0
			tmp_res1 = res[0];
2002600c:	e8730040 	lwi	r3, r19, 64
20026010:	f873002c 	swi	r3, r19, 44
			tokens_MV[(index_MV + (1)) % SIZE_MV] = tmp_res1;
20026014:	b0002004 	imm	8196
20026018:	e860733c 	lwi	r3, r0, 29500	// 2004733c <decoder_parser_parseheaders_MV>
2002601c:	e8830004 	lwi	r4, r3, 4
20026020:	b0002006 	imm	8198
20026024:	e8601de8 	lwi	r3, r0, 7656	// 20061de8 <index_MV>
20026028:	30630001 	addik	r3, r3, 1
2002602c:	a46301ff 	andi	r3, r3, 511
20026030:	10631800 	addk	r3, r3, r3
20026034:	10641800 	addk	r3, r4, r3
20026038:	e893002c 	lwi	r4, r19, 44
2002603c:	90840061 	sext16	r4, r4
20026040:	f4830000 	shi	r4, r3, 0
		}
		vldFunctions_get_mv(fifo, res, "vertical_mv_data            ");
20026044:	30730040 	addik	r3, r19, 64
20026048:	b0002006 	imm	8198
2002604c:	30a01e20 	addik	r5, r0, 7712	// 20061e20 <fifo>
20026050:	10c30000 	addk	r6, r3, r0
20026054:	b0002004 	imm	8196
20026058:	30e05374 	addik	r7, r0, 21364
2002605c:	b9f4ce8c 	brlid	r15, -12660	// 20022ee8 <vldFunctions_get_mv>
20026060:	80000000 	or	r0, r0, r0
		tmp_res2 = res[0];
20026064:	e8730040 	lwi	r3, r19, 64
20026068:	f8730030 	swi	r3, r19, 48
		tokens_MV[(index_MV + (2)) % SIZE_MV] = tmp_res2;
2002606c:	b0002004 	imm	8196
20026070:	e860733c 	lwi	r3, r0, 29500	// 2004733c <decoder_parser_parseheaders_MV>
20026074:	e8830004 	lwi	r4, r3, 4
20026078:	b0002006 	imm	8198
2002607c:	e8601de8 	lwi	r3, r0, 7656	// 20061de8 <index_MV>
20026080:	30630002 	addik	r3, r3, 2
20026084:	a46301ff 	andi	r3, r3, 511
20026088:	10631800 	addk	r3, r3, r3
2002608c:	10641800 	addk	r3, r4, r3
20026090:	e8930030 	lwi	r4, r19, 48
20026094:	90840061 	sext16	r4, r4
20026098:	f4830000 	shi	r4, r3, 0
		local_fcode = fcode;
2002609c:	b0002006 	imm	8198
200260a0:	e0601e57 	lbui	r3, r0, 7767	// 20061e57 <fcode>
200260a4:	f0730024 	sbi	r3, r19, 36
		tmp_res3 = res[0];
200260a8:	e8730040 	lwi	r3, r19, 64
200260ac:	f8730034 	swi	r3, r19, 52
		if (local_fcode <= 1 || tmp_res3 == 0) {
200260b0:	e0730024 	lbui	r3, r19, 36
200260b4:	90830060 	sext8	r4, r3
200260b8:	30600001 	addik	r3, r0, 1
200260bc:	16441801 	cmp	r18, r4, r3
200260c0:	bcb2000c 	bgei	r18, 12		// 200260cc
200260c4:	e8730034 	lwi	r3, r19, 52
200260c8:	bc230030 	bnei	r3, 48		// 200260f8
			tokens_MV[(index_MV + (3)) % SIZE_MV] = 0;
200260cc:	b0002004 	imm	8196
200260d0:	e860733c 	lwi	r3, r0, 29500	// 2004733c <decoder_parser_parseheaders_MV>
200260d4:	e8830004 	lwi	r4, r3, 4
200260d8:	b0002006 	imm	8198
200260dc:	e8601de8 	lwi	r3, r0, 7656	// 20061de8 <index_MV>
200260e0:	30630003 	addik	r3, r3, 3
200260e4:	a46301ff 	andi	r3, r3, 511
200260e8:	10631800 	addk	r3, r3, r3
200260ec:	10641800 	addk	r3, r4, r3
200260f0:	f4030000 	shi	r0, r3, 0
200260f4:	b8000078 	bri	120		// 2002616c
		} else {
			local_fcode = fcode;
200260f8:	b0002006 	imm	8198
200260fc:	e0601e57 	lbui	r3, r0, 7767	// 20061e57 <fcode>
20026100:	f0730024 	sbi	r3, r19, 36
			BitstreamReadUtils_vld_u_name(local_fcode - 1, fifo, res, "vertical_mv_residual            ");
20026104:	e0730024 	lbui	r3, r19, 36
20026108:	3063ffff 	addik	r3, r3, -1
2002610c:	a48300ff 	andi	r4, r3, 255
20026110:	30730040 	addik	r3, r19, 64
20026114:	10a40000 	addk	r5, r4, r0
20026118:	b0002006 	imm	8198
2002611c:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
20026120:	10e30000 	addk	r7, r3, r0
20026124:	b0002004 	imm	8196
20026128:	31005394 	addik	r8, r0, 21396
2002612c:	b9f4bdd4 	brlid	r15, -16940	// 20021f00 <BitstreamReadUtils_vld_u_name>
20026130:	80000000 	or	r0, r0, r0
			tmp_res4 = res[0];
20026134:	e8730040 	lwi	r3, r19, 64
20026138:	f8730038 	swi	r3, r19, 56
			tokens_MV[(index_MV + (3)) % SIZE_MV] = tmp_res4;
2002613c:	b0002004 	imm	8196
20026140:	e860733c 	lwi	r3, r0, 29500	// 2004733c <decoder_parser_parseheaders_MV>
20026144:	e8830004 	lwi	r4, r3, 4
20026148:	b0002006 	imm	8198
2002614c:	e8601de8 	lwi	r3, r0, 7656	// 20061de8 <index_MV>
20026150:	30630003 	addik	r3, r3, 3
20026154:	a46301ff 	andi	r3, r3, 511
20026158:	10631800 	addk	r3, r3, r3
2002615c:	10641800 	addk	r3, r4, r3
20026160:	e8930038 	lwi	r4, r19, 56
20026164:	90840061 	sext16	r4, r4
20026168:	f4830000 	shi	r4, r3, 0
		}
		local_mvcomp = mvcomp;
2002616c:	b0002006 	imm	8198
20026170:	e0601e8c 	lbui	r3, r0, 7820	// 20061e8c <mvcomp>
20026174:	f073003c 	sbi	r3, r19, 60
		mvcomp = local_mvcomp + 1;
20026178:	e073003c 	lbui	r3, r19, 60
2002617c:	30630001 	addik	r3, r3, 1
20026180:	a46300ff 	andi	r3, r3, 255
20026184:	b0002006 	imm	8198
20026188:	f0601e8c 	sbi	r3, r0, 7820	// 20061e8c <mvcomp>
	
		// Update ports indexes
		index_MV += 4;
2002618c:	b0002006 	imm	8198
20026190:	e8601de8 	lwi	r3, r0, 7656	// 20061de8 <index_MV>
20026194:	30630004 	addik	r3, r3, 4
20026198:	b0002006 	imm	8198
2002619c:	f8601de8 	swi	r3, r0, 7656	// 20061de8 <index_MV>
		
		write_end_MV();
200261a0:	b9f4b4dc 	brlid	r15, -19236	// 2002167c <write_end_MV>
200261a4:	80000000 	or	r0, r0, r0
	}
200261a8:	e9e10000 	lwi	r15, r1, 0
200261ac:	10330000 	addk	r1, r19, r0
200261b0:	ea610044 	lwi	r19, r1, 68
200261b4:	30210048 	addik	r1, r1, 72
200261b8:	b60f0008 	rtsd	r15, 8
200261bc:	80000000 	or	r0, r0, r0

200261c0 <isSchedulable_read_mv_data_done>:
	static i32 isSchedulable_read_mv_data_done() {
200261c0:	3021ffec 	addik	r1, r1, -20
200261c4:	fa610010 	swi	r19, r1, 16
200261c8:	12610000 	addk	r19, r1, r0
		i32 result;
		u8 local_mvcomp;
		i32 local_fourmvflag;
	
		local_mvcomp = mvcomp;
200261cc:	b0002006 	imm	8198
200261d0:	e0601e8c 	lbui	r3, r0, 7820	// 20061e8c <mvcomp>
200261d4:	f0730004 	sbi	r3, r19, 4
		local_mvcomp = mvcomp;
200261d8:	b0002006 	imm	8198
200261dc:	e0601e8c 	lbui	r3, r0, 7820	// 20061e8c <mvcomp>
200261e0:	f0730004 	sbi	r3, r19, 4
		local_fourmvflag = fourmvflag;
200261e4:	b0002006 	imm	8198
200261e8:	e8601e68 	lwi	r3, r0, 7784	// 20061e68 <fourmvflag>
200261ec:	f8730008 	swi	r3, r19, 8
		result = local_mvcomp == 4 || local_mvcomp == 1 && !local_fourmvflag;
200261f0:	e0730004 	lbui	r3, r19, 4
200261f4:	a8630004 	xori	r3, r3, 4
200261f8:	bc030018 	beqi	r3, 24		// 20026210
200261fc:	e0730004 	lbui	r3, r19, 4
20026200:	a8630001 	xori	r3, r3, 1
20026204:	bc230014 	bnei	r3, 20		// 20026218
20026208:	e8730008 	lwi	r3, r19, 8
2002620c:	bc23000c 	bnei	r3, 12		// 20026218
20026210:	30600001 	addik	r3, r0, 1
20026214:	b8000008 	bri	8		// 2002621c
20026218:	10600000 	addk	r3, r0, r0
2002621c:	f873000c 	swi	r3, r19, 12
		return result;
20026220:	e873000c 	lwi	r3, r19, 12
	}
20026224:	10330000 	addk	r1, r19, r0
20026228:	ea610010 	lwi	r19, r1, 16
2002622c:	30210014 	addik	r1, r1, 20
20026230:	b60f0008 	rtsd	r15, 8
20026234:	80000000 	or	r0, r0, r0

20026238 <read_mv_data_done>:
	
	static void read_mv_data_done() {
20026238:	3021fff8 	addik	r1, r1, -8
2002623c:	fa610004 	swi	r19, r1, 4
20026240:	12610000 	addk	r19, r1, r0
	
	
	
		// Update ports indexes
		
	}
20026244:	10330000 	addk	r1, r19, r0
20026248:	ea610004 	lwi	r19, r1, 4
2002624c:	30210008 	addik	r1, r1, 8
20026250:	b60f0008 	rtsd	r15, 8
20026254:	80000000 	or	r0, r0, r0

20026258 <isSchedulable_start_code_search>:
	static i32 isSchedulable_start_code_search() {
20026258:	3021ffd0 	addik	r1, r1, -48
2002625c:	f9e10000 	swi	r15, r1, 0
20026260:	fa61002c 	swi	r19, r1, 44
20026264:	12610000 	addk	r19, r1, r0
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
		i32 tmp_IsStartCode;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20026268:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002626c:	f073001c 	sbi	r3, r19, 28
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
20026270:	e073001c 	lbui	r3, r19, 28
20026274:	10631800 	addk	r3, r3, r3
20026278:	b0002006 	imm	8198
2002627c:	30631e20 	addik	r3, r3, 7712
20026280:	e4630000 	lhui	r3, r3, 0
20026284:	f473001e 	shi	r3, r19, 30
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20026288:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002628c:	f0730020 	sbi	r3, r19, 32
		tmp_IsStartCode = BitstreamReadUtils_IsStartCode(fifo);
20026290:	b0002006 	imm	8198
20026294:	30a01e20 	addik	r5, r0, 7712	// 20061e20 <fifo>
20026298:	b9f4ce40 	brlid	r15, -12736	// 200230d8 <BitstreamReadUtils_IsStartCode>
2002629c:	80000000 	or	r0, r0, r0
200262a0:	f8730024 	swi	r3, r19, 36
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3 && !tmp_IsStartCode;
200262a4:	e493001e 	lhui	r4, r19, 30
200262a8:	e0730020 	lbui	r3, r19, 32
200262ac:	3063ffff 	addik	r3, r3, -1
200262b0:	64630403 	bslli	r3, r3, 3
200262b4:	16432001 	cmp	r18, r3, r4
200262b8:	bc520014 	blti	r18, 20		// 200262cc
200262bc:	e8730024 	lwi	r3, r19, 36
200262c0:	bc23000c 	bnei	r3, 12		// 200262cc
200262c4:	30600001 	addik	r3, r0, 1
200262c8:	b8000008 	bri	8		// 200262d0
200262cc:	10600000 	addk	r3, r0, r0
200262d0:	f8730028 	swi	r3, r19, 40
		return result;
200262d4:	e8730028 	lwi	r3, r19, 40
	}
200262d8:	e9e10000 	lwi	r15, r1, 0
200262dc:	10330000 	addk	r1, r19, r0
200262e0:	ea61002c 	lwi	r19, r1, 44
200262e4:	30210030 	addik	r1, r1, 48
200262e8:	b60f0008 	rtsd	r15, 8
200262ec:	80000000 	or	r0, r0, r0

200262f0 <start_code_search>:
	
	static void start_code_search() {
200262f0:	3021ffdc 	addik	r1, r1, -36
200262f4:	f9e10000 	swi	r15, r1, 0
200262f8:	fa610020 	swi	r19, r1, 32
200262fc:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
	
		i32 local_DEBUG_BITSTREAM;
	
		BitstreamReadUtils_flushBits(8, fifo);
20026300:	30a00008 	addik	r5, r0, 8	// 8 <_vector_sw_exception>
20026304:	b0002006 	imm	8198
20026308:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
2002630c:	b9f4baa8 	brlid	r15, -17752	// 20021db4 <BitstreamReadUtils_flushBits>
20026310:	80000000 	or	r0, r0, r0
		local_DEBUG_BITSTREAM = DEBUG_BITSTREAM;
20026314:	f813001c 	swi	r0, r19, 28
		if (local_DEBUG_BITSTREAM) {
		}
	
		// Update ports indexes
		
	}
20026318:	e9e10000 	lwi	r15, r1, 0
2002631c:	10330000 	addk	r1, r19, r0
20026320:	ea610020 	lwi	r19, r1, 32
20026324:	30210024 	addik	r1, r1, 36
20026328:	b60f0008 	rtsd	r15, 8
2002632c:	80000000 	or	r0, r0, r0

20026330 <isSchedulable_start_code_done>:
	static i32 isSchedulable_start_code_done() {
20026330:	3021ffd0 	addik	r1, r1, -48
20026334:	f9e10000 	swi	r15, r1, 0
20026338:	fa61002c 	swi	r19, r1, 44
2002633c:	12610000 	addk	r19, r1, r0
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
		i32 tmp_IsStartCode;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20026340:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20026344:	f073001c 	sbi	r3, r19, 28
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
20026348:	e073001c 	lbui	r3, r19, 28
2002634c:	10631800 	addk	r3, r3, r3
20026350:	b0002006 	imm	8198
20026354:	30631e20 	addik	r3, r3, 7712
20026358:	e4630000 	lhui	r3, r3, 0
2002635c:	f473001e 	shi	r3, r19, 30
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20026360:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20026364:	f0730020 	sbi	r3, r19, 32
		tmp_IsStartCode = BitstreamReadUtils_IsStartCode(fifo);
20026368:	b0002006 	imm	8198
2002636c:	30a01e20 	addik	r5, r0, 7712	// 20061e20 <fifo>
20026370:	b9f4cd68 	brlid	r15, -12952	// 200230d8 <BitstreamReadUtils_IsStartCode>
20026374:	80000000 	or	r0, r0, r0
20026378:	f8730024 	swi	r3, r19, 36
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3 && tmp_IsStartCode;
2002637c:	e493001e 	lhui	r4, r19, 30
20026380:	e0730020 	lbui	r3, r19, 32
20026384:	3063ffff 	addik	r3, r3, -1
20026388:	64630403 	bslli	r3, r3, 3
2002638c:	16432001 	cmp	r18, r3, r4
20026390:	bc520014 	blti	r18, 20		// 200263a4
20026394:	e8730024 	lwi	r3, r19, 36
20026398:	bc03000c 	beqi	r3, 12		// 200263a4
2002639c:	30600001 	addik	r3, r0, 1
200263a0:	b8000008 	bri	8		// 200263a8
200263a4:	10600000 	addk	r3, r0, r0
200263a8:	f8730028 	swi	r3, r19, 40
		return result;
200263ac:	e8730028 	lwi	r3, r19, 40
	}
200263b0:	e9e10000 	lwi	r15, r1, 0
200263b4:	10330000 	addk	r1, r19, r0
200263b8:	ea61002c 	lwi	r19, r1, 44
200263bc:	30210030 	addik	r1, r1, 48
200263c0:	b60f0008 	rtsd	r15, 8
200263c4:	80000000 	or	r0, r0, r0

200263c8 <start_code_done>:
	
	static void start_code_done() {
200263c8:	3021ffdc 	addik	r1, r1, -36
200263cc:	f9e10000 	swi	r15, r1, 0
200263d0:	fa610020 	swi	r19, r1, 32
200263d4:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
	
		i32 local_DEBUG_BITSTREAM;
	
		BitstreamReadUtils_flushBits(8, fifo);
200263d8:	30a00008 	addik	r5, r0, 8	// 8 <_vector_sw_exception>
200263dc:	b0002006 	imm	8198
200263e0:	30c01e20 	addik	r6, r0, 7712	// 20061e20 <fifo>
200263e4:	b9f4b9d0 	brlid	r15, -17968	// 20021db4 <BitstreamReadUtils_flushBits>
200263e8:	80000000 	or	r0, r0, r0
		local_DEBUG_BITSTREAM = DEBUG_BITSTREAM;
200263ec:	f813001c 	swi	r0, r19, 28
		if (local_DEBUG_BITSTREAM) {
		}
	
		// Update ports indexes
		
	}
200263f0:	e9e10000 	lwi	r15, r1, 0
200263f4:	10330000 	addk	r1, r19, r0
200263f8:	ea610020 	lwi	r19, r1, 32
200263fc:	30210024 	addik	r1, r1, 36
20026400:	b60f0008 	rtsd	r15, 8
20026404:	80000000 	or	r0, r0, r0

20026408 <isSchedulable_byte_align_a>:
	static i32 isSchedulable_byte_align_a() {
20026408:	3021ffec 	addik	r1, r1, -20
2002640c:	fa610010 	swi	r19, r1, 16
20026410:	12610000 	addk	r19, r1, r0
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20026414:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20026418:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
2002641c:	e0730004 	lbui	r3, r19, 4
20026420:	10631800 	addk	r3, r3, r3
20026424:	b0002006 	imm	8198
20026428:	30631e20 	addik	r3, r3, 7712
2002642c:	e4630000 	lhui	r3, r3, 0
20026430:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20026434:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20026438:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
2002643c:	e4b30006 	lhui	r5, r19, 6
20026440:	e0730008 	lbui	r3, r19, 8
20026444:	3063ffff 	addik	r3, r3, -1
20026448:	64830403 	bslli	r4, r3, 3
2002644c:	30600001 	addik	r3, r0, 1
20026450:	16442801 	cmp	r18, r4, r5
20026454:	bcb20008 	bgei	r18, 8		// 2002645c
20026458:	10600000 	addk	r3, r0, r0
2002645c:	a46300ff 	andi	r3, r3, 255
20026460:	f873000c 	swi	r3, r19, 12
		return result;
20026464:	e873000c 	lwi	r3, r19, 12
	}
20026468:	10330000 	addk	r1, r19, r0
2002646c:	ea610010 	lwi	r19, r1, 16
20026470:	30210014 	addik	r1, r1, 20
20026474:	b60f0008 	rtsd	r15, 8
20026478:	80000000 	or	r0, r0, r0

2002647c <byte_align_a>:
	
	static void byte_align_a() {
2002647c:	3021ffe0 	addik	r1, r1, -32
20026480:	f9e10000 	swi	r15, r1, 0
20026484:	fa61001c 	swi	r19, r1, 28
20026488:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
	
	
		BitstreamReadUtils_byte_align(fifo);
2002648c:	b0002006 	imm	8198
20026490:	30a01e20 	addik	r5, r0, 7712	// 20061e20 <fifo>
20026494:	b9f4ccf4 	brlid	r15, -13068	// 20023188 <BitstreamReadUtils_byte_align>
20026498:	80000000 	or	r0, r0, r0
	
		// Update ports indexes
		
	}
2002649c:	e9e10000 	lwi	r15, r1, 0
200264a0:	10330000 	addk	r1, r19, r0
200264a4:	ea61001c 	lwi	r19, r1, 28
200264a8:	30210020 	addik	r1, r1, 32
200264ac:	b60f0008 	rtsd	r15, 8
200264b0:	80000000 	or	r0, r0, r0

200264b4 <isSchedulable_undefined>:
	static i32 isSchedulable_undefined() {
200264b4:	3021fff0 	addik	r1, r1, -16
200264b8:	fa61000c 	swi	r19, r1, 12
200264bc:	12610000 	addk	r19, r1, r0
		i32 result;
		i32 local_actorNotFinished;
	
		local_actorNotFinished = actorNotFinished;
200264c0:	b0002004 	imm	8196
200264c4:	e860742c 	lwi	r3, r0, 29740	// 2004742c <actorNotFinished>
200264c8:	f8730004 	swi	r3, r19, 4
		result = local_actorNotFinished;
200264cc:	e8730004 	lwi	r3, r19, 4
200264d0:	f8730008 	swi	r3, r19, 8
		return result;
200264d4:	e8730008 	lwi	r3, r19, 8
	}
200264d8:	10330000 	addk	r1, r19, r0
200264dc:	ea61000c 	lwi	r19, r1, 12
200264e0:	30210010 	addik	r1, r1, 16
200264e4:	b60f0008 	rtsd	r15, 8
200264e8:	80000000 	or	r0, r0, r0

200264ec <undefined>:
	
	static void undefined() {
200264ec:	3021fff8 	addik	r1, r1, -8
200264f0:	fa610004 	swi	r19, r1, 4
200264f4:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
	
	
		actorNotFinished = 0;
200264f8:	b0002004 	imm	8196
200264fc:	f800742c 	swi	r0, r0, 29740	// 2004742c <actorNotFinished>
	
		// Update ports indexes
		
	}
20026500:	10330000 	addk	r1, r19, r0
20026504:	ea610004 	lwi	r19, r1, 4
20026508:	30210008 	addik	r1, r1, 8
2002650c:	b60f0008 	rtsd	r15, 8
20026510:	80000000 	or	r0, r0, r0

20026514 <decoder_parser_parseheaders_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_parser_parseheaders_initialize() {
20026514:	3021fff4 	addik	r1, r1, -12
20026518:	fa610008 	swi	r19, r1, 8
2002651c:	12610000 	addk	r19, r1, r0
		int i = 0;
20026520:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_look_for_Sequence_Header;
20026524:	30600002 	addik	r3, r0, 2
20026528:	b0002006 	imm	8198
2002652c:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
		
	finished:
		// no read_end/write_end here!
		return;
20026530:	80000000 	or	r0, r0, r0
	}
20026534:	10330000 	addk	r1, r19, r0
20026538:	ea610008 	lwi	r19, r1, 8
2002653c:	3021000c 	addik	r1, r1, 12
20026540:	b60f0008 	rtsd	r15, 8
20026544:	80000000 	or	r0, r0, r0

20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	int decoder_parser_parseheaders_outside_FSM_scheduler() {
20026548:	3021ffd8 	addik	r1, r1, -40
2002654c:	f9e10000 	swi	r15, r1, 0
20026550:	fa610024 	swi	r19, r1, 36
20026554:	12610000 	addk	r19, r1, r0
		int i = 0;
20026558:	f813001c 	swi	r0, r19, 28
		while (1) {
			// Action loop
			if (numTokens_BYTE - index_BYTE >= 1 && isSchedulable_untagged_0()) {
2002655c:	b0002006 	imm	8198
20026560:	e8801ddc 	lwi	r4, r0, 7644	// 20061ddc <numTokens_BYTE>
20026564:	b0002006 	imm	8198
20026568:	e8601dd8 	lwi	r3, r0, 7640	// 20061dd8 <index_BYTE>
2002656c:	88641800 	xor	r3, r4, r3
20026570:	bc030038 	beqi	r3, 56		// 200265a8
20026574:	b9f4ccf0 	brlid	r15, -13072	// 20023264 <isSchedulable_untagged_0>
20026578:	80000000 	or	r0, r0, r0
2002657c:	bc03002c 	beqi	r3, 44		// 200265a8
				int stop = 0;
20026580:	f8130020 	swi	r0, r19, 32
				if (stop != 0) {
20026584:	e8730020 	lwi	r3, r19, 32
20026588:	bc030008 	beqi	r3, 8		// 20026590
					goto finished;
2002658c:	b800001c 	bri	28		// 200265a8
				}
				untagged_0();
20026590:	b9f4cd48 	brlid	r15, -12984	// 200232d8 <untagged_0>
20026594:	80000000 	or	r0, r0, r0
				i++;
20026598:	e873001c 	lwi	r3, r19, 28
2002659c:	30630001 	addik	r3, r3, 1
200265a0:	f873001c 	swi	r3, r19, 28
			} else {
				goto finished;
			}
		}
200265a4:	b800ffb8 	bri	-72		// 2002655c
	finished:
		// no read_end/write_end here!
		return i;
200265a8:	e873001c 	lwi	r3, r19, 28
	}
200265ac:	e9e10000 	lwi	r15, r1, 0
200265b0:	10330000 	addk	r1, r19, r0
200265b4:	ea610024 	lwi	r19, r1, 36
200265b8:	30210028 	addik	r1, r1, 40
200265bc:	b60f0008 	rtsd	r15, 8
200265c0:	80000000 	or	r0, r0, r0

200265c4 <decoder_parser_parseheaders_scheduler>:
	
	int decoder_parser_parseheaders_scheduler() {
200265c4:	3021ff50 	addik	r1, r1, -176
200265c8:	f9e10000 	swi	r15, r1, 0
200265cc:	fa6100ac 	swi	r19, r1, 172
200265d0:	12610000 	addk	r19, r1, r0
		int i = 0;
200265d4:	f813001c 	swi	r0, r19, 28
		if(needInit){
200265d8:	b0002004 	imm	8196
200265dc:	e0607430 	lbui	r3, r0, 29744	// 20047430 <needInit>
200265e0:	bc030014 	beqi	r3, 20		// 200265f4
			decoder_parser_parseheaders_initialize();
200265e4:	b9f4ff30 	brlid	r15, -208	// 20026514 <decoder_parser_parseheaders_initialize>
200265e8:	80000000 	or	r0, r0, r0
			needInit = 0;
200265ec:	b0002004 	imm	8196
200265f0:	f0007430 	sbi	r0, r0, 29744	// 20047430 <needInit>
		}
	
		read_BYTE();
200265f4:	b9f4aec8 	brlid	r15, -20792	// 200214bc <read_BYTE>
200265f8:	80000000 	or	r0, r0, r0
		write_BTYPE();
200265fc:	b9f4af68 	brlid	r15, -20632	// 20021564 <write_BTYPE>
20026600:	80000000 	or	r0, r0, r0
		write_MV();
20026604:	b9f4b008 	brlid	r15, -20472	// 2002160c <write_MV>
20026608:	80000000 	or	r0, r0, r0
		write_RUN();
2002660c:	b9f4b0a8 	brlid	r15, -20312	// 200216b4 <write_RUN>
20026610:	80000000 	or	r0, r0, r0
		write_VALUE();
20026614:	b9f4b148 	brlid	r15, -20152	// 2002175c <write_VALUE>
20026618:	80000000 	or	r0, r0, r0
		write_LAST();
2002661c:	b9f4b1e8 	brlid	r15, -19992	// 20021804 <write_LAST>
20026620:	80000000 	or	r0, r0, r0
		write_WIDTH();
20026624:	b9f4b288 	brlid	r15, -19832	// 200218ac <write_WIDTH>
20026628:	80000000 	or	r0, r0, r0
		write_HEIGHT();
2002662c:	b9f4b328 	brlid	r15, -19672	// 20021954 <write_HEIGHT>
20026630:	80000000 	or	r0, r0, r0
		write_QP();
20026634:	b9f4b3c8 	brlid	r15, -19512	// 200219fc <write_QP>
20026638:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
2002663c:	b0002006 	imm	8198
20026640:	e8601e90 	lwi	r3, r0, 7824	// 20061e90 <_FSM_state>
20026644:	30800014 	addik	r4, r0, 20
20026648:	16432003 	cmpu	r18, r3, r4
2002664c:	bc520018 	blti	r18, 24		// 20026664
20026650:	64630402 	bslli	r3, r3, 2
20026654:	b0002004 	imm	8196
20026658:	306353b8 	addik	r3, r3, 21432
2002665c:	e8630000 	lwi	r3, r3, 0
20026660:	98081800 	bra	r3
		case my_state_search_start_code:
			goto l_search_start_code;
		case my_state_undefined:
			goto l_undefined;
		default:
			exit(1);
20026664:	30a00001 	addik	r5, r0, 1
20026668:	b000dffd 	imm	-8195
2002666c:	b9f49d2c 	brlid	r15, -25300	// 398 <exit>
20026670:	80000000 	or	r0, r0, r0
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_byte_align_a:
			goto l_byte_align_a;
20026674:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_byte_align_a:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
20026678:	b9f4fed0 	brlid	r15, -304	// 20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002667c:	80000000 	or	r0, r0, r0
20026680:	e893001c 	lwi	r4, r19, 28
20026684:	10641800 	addk	r3, r4, r3
20026688:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_byte_align_a()) {
2002668c:	b9f4fd7c 	brlid	r15, -644	// 20026408 <isSchedulable_byte_align_a>
20026690:	80000000 	or	r0, r0, r0
20026694:	bc030034 	beqi	r3, 52		// 200266c8
				int stop = 0;
20026698:	f8130040 	swi	r0, r19, 64
				if (stop != 0) {
2002669c:	e8730040 	lwi	r3, r19, 64
200266a0:	bc030010 	beqi	r3, 16		// 200266b0
					_FSM_state = my_state_byte_align_a;
200266a4:	b0002006 	imm	8198
200266a8:	f8001e90 	swi	r0, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
200266ac:	b8001400 	bri	5120		// 20027aac
				}
				byte_align_a();
200266b0:	b9f4fdcc 	brlid	r15, -564	// 2002647c <byte_align_a>
200266b4:	80000000 	or	r0, r0, r0
				i++;
200266b8:	e873001c 	lwi	r3, r19, 28
200266bc:	30630001 	addik	r3, r3, 1
200266c0:	f873001c 	swi	r3, r19, 28
				goto l_search_start_code;
200266c4:	b80012dc 	bri	4828		// 200279a0
			} else {
				_FSM_state = my_state_byte_align_a;
200266c8:	b0002006 	imm	8198
200266cc:	f8001e90 	swi	r0, r0, 7824	// 20061e90 <_FSM_state>
				goto finished;
200266d0:	b80013dc 	bri	5084		// 20027aac
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_byte_align_a:
			goto l_byte_align_a;
		case my_state_find_header:
			goto l_find_header;
200266d4:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_byte_align_a;
				goto finished;
			}
		l_find_header:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
200266d8:	b9f4fe70 	brlid	r15, -400	// 20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>
200266dc:	80000000 	or	r0, r0, r0
200266e0:	e893001c 	lwi	r4, r19, 28
200266e4:	10641800 	addk	r3, r4, r3
200266e8:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_look_for_vol()) {
200266ec:	b9f4cfa8 	brlid	r15, -12376	// 20023694 <isSchedulable_look_for_vol>
200266f0:	80000000 	or	r0, r0, r0
200266f4:	bc030038 	beqi	r3, 56		// 2002672c
				int stop = 0;
200266f8:	f8130050 	swi	r0, r19, 80
				if (stop != 0) {
200266fc:	e8730050 	lwi	r3, r19, 80
20026700:	bc030014 	beqi	r3, 20		// 20026714
					_FSM_state = my_state_find_header;
20026704:	30600001 	addik	r3, r0, 1
20026708:	b0002006 	imm	8198
2002670c:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20026710:	b800139c 	bri	5020		// 20027aac
				}
				look_for_vol();
20026714:	b9f4cfcc 	brlid	r15, -12340	// 200236e0 <look_for_vol>
20026718:	80000000 	or	r0, r0, r0
				i++;
2002671c:	e873001c 	lwi	r3, r19, 28
20026720:	30630001 	addik	r3, r3, 1
20026724:	f873001c 	swi	r3, r19, 28
				goto l_read_vol;
20026728:	b8000d14 	bri	3348		// 2002743c
			} else if (isSchedulable_look_for_vop()) {
2002672c:	b9f4cfd4 	brlid	r15, -12332	// 20023700 <isSchedulable_look_for_vop>
20026730:	80000000 	or	r0, r0, r0
20026734:	bc030038 	beqi	r3, 56		// 2002676c
				int stop = 0;
20026738:	f8130054 	swi	r0, r19, 84
				if (stop != 0) {
2002673c:	e8730054 	lwi	r3, r19, 84
20026740:	bc030014 	beqi	r3, 20		// 20026754
					_FSM_state = my_state_find_header;
20026744:	30600001 	addik	r3, r0, 1
20026748:	b0002006 	imm	8198
2002674c:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20026750:	b800135c 	bri	4956		// 20027aac
				}
				look_for_vop();
20026754:	b9f4cff8 	brlid	r15, -12296	// 2002374c <look_for_vop>
20026758:	80000000 	or	r0, r0, r0
				i++;
2002675c:	e873001c 	lwi	r3, r19, 28
20026760:	30630001 	addik	r3, r3, 1
20026764:	f873001c 	swi	r3, r19, 28
				goto l_read_vop;
20026768:	b8000edc 	bri	3804		// 20027644
			} else if (isSchedulable_look_for_other_header()) {
2002676c:	b9f4cedc 	brlid	r15, -12580	// 20023648 <isSchedulable_look_for_other_header>
20026770:	80000000 	or	r0, r0, r0
20026774:	bc030038 	beqi	r3, 56		// 200267ac
				int stop = 0;
20026778:	f8130058 	swi	r0, r19, 88
				if (stop != 0) {
2002677c:	e8730058 	lwi	r3, r19, 88
20026780:	bc030014 	beqi	r3, 20		// 20026794
					_FSM_state = my_state_find_header;
20026784:	30600001 	addik	r3, r0, 1
20026788:	b0002006 	imm	8198
2002678c:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20026790:	b800131c 	bri	4892		// 20027aac
				}
				look_for_other_header();
20026794:	b9f4cee0 	brlid	r15, -12576	// 20023674 <look_for_other_header>
20026798:	80000000 	or	r0, r0, r0
				i++;
2002679c:	e873001c 	lwi	r3, r19, 28
200267a0:	30630001 	addik	r3, r3, 1
200267a4:	f873001c 	swi	r3, r19, 28
				goto l_look_for_Sequence_Header;
200267a8:	b8000018 	bri	24		// 200267c0
			} else {
				_FSM_state = my_state_find_header;
200267ac:	30600001 	addik	r3, r0, 1
200267b0:	b0002006 	imm	8198
200267b4:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
				goto finished;
200267b8:	b80012f4 	bri	4852		// 20027aac
		case my_state_byte_align_a:
			goto l_byte_align_a;
		case my_state_find_header:
			goto l_find_header;
		case my_state_look_for_Sequence_Header:
			goto l_look_for_Sequence_Header;
200267bc:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_find_header;
				goto finished;
			}
		l_look_for_Sequence_Header:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
200267c0:	b9f4fd88 	brlid	r15, -632	// 20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>
200267c4:	80000000 	or	r0, r0, r0
200267c8:	e893001c 	lwi	r4, r19, 28
200267cc:	10641800 	addk	r3, r4, r3
200267d0:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_look_for_Sequence_Header()) {
200267d4:	b9f4cd50 	brlid	r15, -12976	// 20023524 <isSchedulable_look_for_Sequence_Header>
200267d8:	80000000 	or	r0, r0, r0
200267dc:	bc030038 	beqi	r3, 56		// 20026814
				int stop = 0;
200267e0:	f813008c 	swi	r0, r19, 140
				if (stop != 0) {
200267e4:	e873008c 	lwi	r3, r19, 140
200267e8:	bc030014 	beqi	r3, 20		// 200267fc
					_FSM_state = my_state_look_for_Sequence_Header;
200267ec:	30600002 	addik	r3, r0, 2
200267f0:	b0002006 	imm	8198
200267f4:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
200267f8:	b80012b4 	bri	4788		// 20027aac
				}
				look_for_Sequence_Header();
200267fc:	b9f4cd54 	brlid	r15, -12972	// 20023550 <look_for_Sequence_Header>
20026800:	80000000 	or	r0, r0, r0
				i++;
20026804:	e873001c 	lwi	r3, r19, 28
20026808:	30630001 	addik	r3, r3, 1
2002680c:	f873001c 	swi	r3, r19, 28
				goto l_byte_align_a;
20026810:	b800fe68 	bri	-408		// 20026678
			} else {
				_FSM_state = my_state_look_for_Sequence_Header;
20026814:	30600002 	addik	r3, r0, 2
20026818:	b0002006 	imm	8198
2002681c:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
				goto finished;
20026820:	b800128c 	bri	4748		// 20027aac
		case my_state_find_header:
			goto l_find_header;
		case my_state_look_for_Sequence_Header:
			goto l_look_for_Sequence_Header;
		case my_state_read_block:
			goto l_read_block;
20026824:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_look_for_Sequence_Header;
				goto finished;
			}
		l_read_block:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
20026828:	b9f4fd20 	brlid	r15, -736	// 20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002682c:	80000000 	or	r0, r0, r0
20026830:	e893001c 	lwi	r4, r19, 28
20026834:	10641800 	addk	r3, r4, r3
20026838:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_block_done()) {
2002683c:	b9f4e860 	brlid	r15, -6048	// 2002509c <isSchedulable_read_block_done>
20026840:	80000000 	or	r0, r0, r0
20026844:	bc030038 	beqi	r3, 56		// 2002687c
				int stop = 0;
20026848:	f813009c 	swi	r0, r19, 156
				if (stop != 0) {
2002684c:	e873009c 	lwi	r3, r19, 156
20026850:	bc030014 	beqi	r3, 20		// 20026864
					_FSM_state = my_state_read_block;
20026854:	30600003 	addik	r3, r0, 3
20026858:	b0002006 	imm	8198
2002685c:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20026860:	b800124c 	bri	4684		// 20027aac
				}
				read_block_done();
20026864:	b9f4e880 	brlid	r15, -6016	// 200250e4 <read_block_done>
20026868:	80000000 	or	r0, r0, r0
				i++;
2002686c:	e873001c 	lwi	r3, r19, 28
20026870:	30630001 	addik	r3, r3, 1
20026874:	f873001c 	swi	r3, r19, 28
				goto l_read_mb;
20026878:	b8000770 	bri	1904		// 20026fe8
			} else if (isSchedulable_read_block_start()) {
2002687c:	b9f4e780 	brlid	r15, -6272	// 20024ffc <isSchedulable_read_block_start>
20026880:	80000000 	or	r0, r0, r0
20026884:	bc030038 	beqi	r3, 56		// 200268bc
				int stop = 0;
20026888:	f81300a0 	swi	r0, r19, 160
				if (stop != 0) {
2002688c:	e87300a0 	lwi	r3, r19, 160
20026890:	bc030014 	beqi	r3, 20		// 200268a4
					_FSM_state = my_state_read_block;
20026894:	30600003 	addik	r3, r0, 3
20026898:	b0002006 	imm	8198
2002689c:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
200268a0:	b800120c 	bri	4620		// 20027aac
				}
				read_block_start();
200268a4:	b9f4e784 	brlid	r15, -6268	// 20025028 <read_block_start>
200268a8:	80000000 	or	r0, r0, r0
				i++;
200268ac:	e873001c 	lwi	r3, r19, 28
200268b0:	30630001 	addik	r3, r3, 1
200268b4:	f873001c 	swi	r3, r19, 28
				goto l_read_block_dc;
200268b8:	b80001ec 	bri	492		// 20026aa4
			} else {
				_FSM_state = my_state_read_block;
200268bc:	30600003 	addik	r3, r0, 3
200268c0:	b0002006 	imm	8198
200268c4:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
				goto finished;
200268c8:	b80011e4 	bri	4580		// 20027aac
		case my_state_look_for_Sequence_Header:
			goto l_look_for_Sequence_Header;
		case my_state_read_block:
			goto l_read_block;
		case my_state_read_block_coeff:
			goto l_read_block_coeff;
200268cc:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_block;
				goto finished;
			}
		l_read_block_coeff:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
200268d0:	b9f4fc78 	brlid	r15, -904	// 20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>
200268d4:	80000000 	or	r0, r0, r0
200268d8:	e893001c 	lwi	r4, r19, 28
200268dc:	10641800 	addk	r3, r4, r3
200268e0:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_block_coeff_done()) {
200268e4:	b9f4f2fc 	brlid	r15, -3332	// 20025be0 <isSchedulable_read_block_coeff_done>
200268e8:	80000000 	or	r0, r0, r0
200268ec:	bc030038 	beqi	r3, 56		// 20026924
				int stop = 0;
200268f0:	f8130080 	swi	r0, r19, 128
				if (stop != 0) {
200268f4:	e8730080 	lwi	r3, r19, 128
200268f8:	bc030014 	beqi	r3, 20		// 2002690c
					_FSM_state = my_state_read_block_coeff;
200268fc:	30600004 	addik	r3, r0, 4
20026900:	b0002006 	imm	8198
20026904:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20026908:	b80011a4 	bri	4516		// 20027aac
				}
				read_block_coeff_done();
2002690c:	b9f4f30c 	brlid	r15, -3316	// 20025c18 <read_block_coeff_done>
20026910:	80000000 	or	r0, r0, r0
				i++;
20026914:	e873001c 	lwi	r3, r19, 28
20026918:	30630001 	addik	r3, r3, 1
2002691c:	f873001c 	swi	r3, r19, 28
				goto l_read_block;
20026920:	b800ff08 	bri	-248		// 20026828
			} else if (isSchedulable_read_block_coeff()) {
20026924:	b9f4f0b0 	brlid	r15, -3920	// 200259d4 <isSchedulable_read_block_coeff>
20026928:	80000000 	or	r0, r0, r0
2002692c:	bc0300bc 	beqi	r3, 188		// 200269e8
				int stop = 0;
20026930:	f8130020 	swi	r0, r19, 32
				if (1 > SIZE_RUN - index_RUN + decoder_parser_parseheaders_RUN->read_inds[0]) {
20026934:	b0002004 	imm	8196
20026938:	e8607334 	lwi	r3, r0, 29492	// 20047334 <decoder_parser_parseheaders_RUN>
2002693c:	e863000c 	lwi	r3, r3, 12
20026940:	e8830000 	lwi	r4, r3, 0
20026944:	b0002006 	imm	8198
20026948:	e8601df0 	lwi	r3, r0, 7664	// 20061df0 <index_RUN>
2002694c:	14632000 	rsubk	r3, r3, r4
20026950:	a863fe00 	xori	r3, r3, -512
20026954:	bc23000c 	bnei	r3, 12		// 20026960
					stop = 1;
20026958:	30600001 	addik	r3, r0, 1
2002695c:	f8730020 	swi	r3, r19, 32
				}
				if (1 > SIZE_VALUE - index_VALUE + decoder_parser_parseheaders_VALUE->read_inds[0]) {
20026960:	b0002004 	imm	8196
20026964:	e8607370 	lwi	r3, r0, 29552	// 20047370 <decoder_parser_parseheaders_VALUE>
20026968:	e863000c 	lwi	r3, r3, 12
2002696c:	e8830000 	lwi	r4, r3, 0
20026970:	b0002006 	imm	8198
20026974:	e8601df8 	lwi	r3, r0, 7672	// 20061df8 <index_VALUE>
20026978:	14632000 	rsubk	r3, r3, r4
2002697c:	a863fe00 	xori	r3, r3, -512
20026980:	bc23000c 	bnei	r3, 12		// 2002698c
					stop = 1;
20026984:	30600001 	addik	r3, r0, 1
20026988:	f8730020 	swi	r3, r19, 32
				}
				if (1 > SIZE_LAST - index_LAST + decoder_parser_parseheaders_LAST->read_inds[0]) {
2002698c:	b0002004 	imm	8196
20026990:	e860734c 	lwi	r3, r0, 29516	// 2004734c <decoder_parser_parseheaders_LAST>
20026994:	e863000c 	lwi	r3, r3, 12
20026998:	e8830000 	lwi	r4, r3, 0
2002699c:	b0002006 	imm	8198
200269a0:	e8601e00 	lwi	r3, r0, 7680	// 20061e00 <index_LAST>
200269a4:	14632000 	rsubk	r3, r3, r4
200269a8:	a863fe00 	xori	r3, r3, -512
200269ac:	bc23000c 	bnei	r3, 12		// 200269b8
					stop = 1;
200269b0:	30600001 	addik	r3, r0, 1
200269b4:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
200269b8:	e8730020 	lwi	r3, r19, 32
200269bc:	bc030014 	beqi	r3, 20		// 200269d0
					_FSM_state = my_state_read_block_coeff;
200269c0:	30600004 	addik	r3, r0, 4
200269c4:	b0002006 	imm	8198
200269c8:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
200269cc:	b80010e0 	bri	4320		// 20027aac
				}
				read_block_coeff();
200269d0:	b9f4f078 	brlid	r15, -3976	// 20025a48 <read_block_coeff>
200269d4:	80000000 	or	r0, r0, r0
				i++;
200269d8:	e873001c 	lwi	r3, r19, 28
200269dc:	30630001 	addik	r3, r3, 1
200269e0:	f873001c 	swi	r3, r19, 28
				goto l_read_block_coeff;
200269e4:	b800feec 	bri	-276		// 200268d0
			} else {
				_FSM_state = my_state_read_block_coeff;
200269e8:	30600004 	addik	r3, r0, 4
200269ec:	b0002006 	imm	8198
200269f0:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
				goto finished;
200269f4:	b80010b8 	bri	4280		// 20027aac
		case my_state_read_block:
			goto l_read_block;
		case my_state_read_block_coeff:
			goto l_read_block_coeff;
		case my_state_read_block_coeff_ac:
			goto l_read_block_coeff_ac;
200269f8:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_block_coeff;
				goto finished;
			}
		l_read_block_coeff_ac:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
200269fc:	b9f4fb4c 	brlid	r15, -1204	// 20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>
20026a00:	80000000 	or	r0, r0, r0
20026a04:	e893001c 	lwi	r4, r19, 28
20026a08:	10641800 	addk	r3, r4, r3
20026a0c:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_block_coeff_ac()) {
20026a10:	b9f4eefc 	brlid	r15, -4356	// 2002590c <isSchedulable_read_block_coeff_ac>
20026a14:	80000000 	or	r0, r0, r0
20026a18:	bc030038 	beqi	r3, 56		// 20026a50
				int stop = 0;
20026a1c:	f81300a4 	swi	r0, r19, 164
				if (stop != 0) {
20026a20:	e87300a4 	lwi	r3, r19, 164
20026a24:	bc030014 	beqi	r3, 20		// 20026a38
					_FSM_state = my_state_read_block_coeff_ac;
20026a28:	30600005 	addik	r3, r0, 5
20026a2c:	b0002006 	imm	8198
20026a30:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20026a34:	b8001078 	bri	4216		// 20027aac
				}
				read_block_coeff_ac();
20026a38:	b9f4ef0c 	brlid	r15, -4340	// 20025944 <read_block_coeff_ac>
20026a3c:	80000000 	or	r0, r0, r0
				i++;
20026a40:	e873001c 	lwi	r3, r19, 28
20026a44:	30630001 	addik	r3, r3, 1
20026a48:	f873001c 	swi	r3, r19, 28
				goto l_read_block_coeff;
20026a4c:	b800fe84 	bri	-380		// 200268d0
			} else if (isSchedulable_read_block_coeff_noac()) {
20026a50:	b9f4ef14 	brlid	r15, -4332	// 20025964 <isSchedulable_read_block_coeff_noac>
20026a54:	80000000 	or	r0, r0, r0
20026a58:	bc030038 	beqi	r3, 56		// 20026a90
				int stop = 0;
20026a5c:	f81300a8 	swi	r0, r19, 168
				if (stop != 0) {
20026a60:	e87300a8 	lwi	r3, r19, 168
20026a64:	bc030014 	beqi	r3, 20		// 20026a78
					_FSM_state = my_state_read_block_coeff_ac;
20026a68:	30600005 	addik	r3, r0, 5
20026a6c:	b0002006 	imm	8198
20026a70:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20026a74:	b8001038 	bri	4152		// 20027aac
				}
				read_block_coeff_noac();
20026a78:	b9f4ef18 	brlid	r15, -4328	// 20025990 <read_block_coeff_noac>
20026a7c:	80000000 	or	r0, r0, r0
				i++;
20026a80:	e873001c 	lwi	r3, r19, 28
20026a84:	30630001 	addik	r3, r3, 1
20026a88:	f873001c 	swi	r3, r19, 28
				goto l_read_block;
20026a8c:	b800fd9c 	bri	-612		// 20026828
			} else {
				_FSM_state = my_state_read_block_coeff_ac;
20026a90:	30600005 	addik	r3, r0, 5
20026a94:	b0002006 	imm	8198
20026a98:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
				goto finished;
20026a9c:	b8001010 	bri	4112		// 20027aac
		case my_state_read_block_coeff:
			goto l_read_block_coeff;
		case my_state_read_block_coeff_ac:
			goto l_read_block_coeff_ac;
		case my_state_read_block_dc:
			goto l_read_block_dc;
20026aa0:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_block_coeff_ac;
				goto finished;
			}
		l_read_block_dc:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
20026aa4:	b9f4faa4 	brlid	r15, -1372	// 20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>
20026aa8:	80000000 	or	r0, r0, r0
20026aac:	e893001c 	lwi	r4, r19, 28
20026ab0:	10641800 	addk	r3, r4, r3
20026ab4:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_block_nodc_inter()) {
20026ab8:	b9f4eaa4 	brlid	r15, -5468	// 2002555c <isSchedulable_read_block_nodc_inter>
20026abc:	80000000 	or	r0, r0, r0
20026ac0:	bc030180 	beqi	r3, 384		// 20026c40
				int stop = 0;
20026ac4:	f8130024 	swi	r0, r19, 36
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[0]) {
20026ac8:	b0002004 	imm	8196
20026acc:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20026ad0:	e863000c 	lwi	r3, r3, 12
20026ad4:	e8830000 	lwi	r4, r3, 0
20026ad8:	b0002006 	imm	8198
20026adc:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20026ae0:	14632000 	rsubk	r3, r3, r4
20026ae4:	a863fe00 	xori	r3, r3, -512
20026ae8:	bc23000c 	bnei	r3, 12		// 20026af4
					stop = 1;
20026aec:	30600001 	addik	r3, r0, 1
20026af0:	f8730024 	swi	r3, r19, 36
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[1]) {
20026af4:	b0002004 	imm	8196
20026af8:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20026afc:	e863000c 	lwi	r3, r3, 12
20026b00:	30630004 	addik	r3, r3, 4
20026b04:	e8830000 	lwi	r4, r3, 0
20026b08:	b0002006 	imm	8198
20026b0c:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20026b10:	14632000 	rsubk	r3, r3, r4
20026b14:	a863fe00 	xori	r3, r3, -512
20026b18:	bc23000c 	bnei	r3, 12		// 20026b24
					stop = 1;
20026b1c:	30600001 	addik	r3, r0, 1
20026b20:	f8730024 	swi	r3, r19, 36
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[2]) {
20026b24:	b0002004 	imm	8196
20026b28:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20026b2c:	e863000c 	lwi	r3, r3, 12
20026b30:	30630008 	addik	r3, r3, 8
20026b34:	e8830000 	lwi	r4, r3, 0
20026b38:	b0002006 	imm	8198
20026b3c:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20026b40:	14632000 	rsubk	r3, r3, r4
20026b44:	a863fe00 	xori	r3, r3, -512
20026b48:	bc23000c 	bnei	r3, 12		// 20026b54
					stop = 1;
20026b4c:	30600001 	addik	r3, r0, 1
20026b50:	f8730024 	swi	r3, r19, 36
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[3]) {
20026b54:	b0002004 	imm	8196
20026b58:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20026b5c:	e863000c 	lwi	r3, r3, 12
20026b60:	3063000c 	addik	r3, r3, 12
20026b64:	e8830000 	lwi	r4, r3, 0
20026b68:	b0002006 	imm	8198
20026b6c:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20026b70:	14632000 	rsubk	r3, r3, r4
20026b74:	a863fe00 	xori	r3, r3, -512
20026b78:	bc23000c 	bnei	r3, 12		// 20026b84
					stop = 1;
20026b7c:	30600001 	addik	r3, r0, 1
20026b80:	f8730024 	swi	r3, r19, 36
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[4]) {
20026b84:	b0002004 	imm	8196
20026b88:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20026b8c:	e863000c 	lwi	r3, r3, 12
20026b90:	30630010 	addik	r3, r3, 16
20026b94:	e8830000 	lwi	r4, r3, 0
20026b98:	b0002006 	imm	8198
20026b9c:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20026ba0:	14632000 	rsubk	r3, r3, r4
20026ba4:	a863fe00 	xori	r3, r3, -512
20026ba8:	bc23000c 	bnei	r3, 12		// 20026bb4
					stop = 1;
20026bac:	30600001 	addik	r3, r0, 1
20026bb0:	f8730024 	swi	r3, r19, 36
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[5]) {
20026bb4:	b0002004 	imm	8196
20026bb8:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20026bbc:	e863000c 	lwi	r3, r3, 12
20026bc0:	30630014 	addik	r3, r3, 20
20026bc4:	e8830000 	lwi	r4, r3, 0
20026bc8:	b0002006 	imm	8198
20026bcc:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20026bd0:	14632000 	rsubk	r3, r3, r4
20026bd4:	a863fe00 	xori	r3, r3, -512
20026bd8:	bc23000c 	bnei	r3, 12		// 20026be4
					stop = 1;
20026bdc:	30600001 	addik	r3, r0, 1
20026be0:	f8730024 	swi	r3, r19, 36
				}
				if (1 > SIZE_QP - index_QP + decoder_parser_parseheaders_QP->read_inds[0]) {
20026be4:	b0002004 	imm	8196
20026be8:	e8607324 	lwi	r3, r0, 29476	// 20047324 <decoder_parser_parseheaders_QP>
20026bec:	e863000c 	lwi	r3, r3, 12
20026bf0:	e8830000 	lwi	r4, r3, 0
20026bf4:	b0002006 	imm	8198
20026bf8:	e8601e18 	lwi	r3, r0, 7704	// 20061e18 <index_QP>
20026bfc:	14632000 	rsubk	r3, r3, r4
20026c00:	a863fe00 	xori	r3, r3, -512
20026c04:	bc23000c 	bnei	r3, 12		// 20026c10
					stop = 1;
20026c08:	30600001 	addik	r3, r0, 1
20026c0c:	f8730024 	swi	r3, r19, 36
				}
				if (stop != 0) {
20026c10:	e8730024 	lwi	r3, r19, 36
20026c14:	bc030014 	beqi	r3, 20		// 20026c28
					_FSM_state = my_state_read_block_dc;
20026c18:	30600006 	addik	r3, r0, 6
20026c1c:	b0002006 	imm	8198
20026c20:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20026c24:	b8000e88 	bri	3720		// 20027aac
				}
				read_block_nodc_inter();
20026c28:	b9f4e978 	brlid	r15, -5768	// 200255a0 <read_block_nodc_inter>
20026c2c:	80000000 	or	r0, r0, r0
				i++;
20026c30:	e873001c 	lwi	r3, r19, 28
20026c34:	30630001 	addik	r3, r3, 1
20026c38:	f873001c 	swi	r3, r19, 28
				goto l_read_block_coeff_ac;
20026c3c:	b800fdc0 	bri	-576		// 200269fc
			} else if (isSchedulable_read_block_nodc_intra()) {
20026c40:	b9f4eadc 	brlid	r15, -5412	// 2002571c <isSchedulable_read_block_nodc_intra>
20026c44:	80000000 	or	r0, r0, r0
20026c48:	bc030180 	beqi	r3, 384		// 20026dc8
				int stop = 0;
20026c4c:	f8130028 	swi	r0, r19, 40
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[0]) {
20026c50:	b0002004 	imm	8196
20026c54:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20026c58:	e863000c 	lwi	r3, r3, 12
20026c5c:	e8830000 	lwi	r4, r3, 0
20026c60:	b0002006 	imm	8198
20026c64:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20026c68:	14632000 	rsubk	r3, r3, r4
20026c6c:	a863fe00 	xori	r3, r3, -512
20026c70:	bc23000c 	bnei	r3, 12		// 20026c7c
					stop = 1;
20026c74:	30600001 	addik	r3, r0, 1
20026c78:	f8730028 	swi	r3, r19, 40
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[1]) {
20026c7c:	b0002004 	imm	8196
20026c80:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20026c84:	e863000c 	lwi	r3, r3, 12
20026c88:	30630004 	addik	r3, r3, 4
20026c8c:	e8830000 	lwi	r4, r3, 0
20026c90:	b0002006 	imm	8198
20026c94:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20026c98:	14632000 	rsubk	r3, r3, r4
20026c9c:	a863fe00 	xori	r3, r3, -512
20026ca0:	bc23000c 	bnei	r3, 12		// 20026cac
					stop = 1;
20026ca4:	30600001 	addik	r3, r0, 1
20026ca8:	f8730028 	swi	r3, r19, 40
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[2]) {
20026cac:	b0002004 	imm	8196
20026cb0:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20026cb4:	e863000c 	lwi	r3, r3, 12
20026cb8:	30630008 	addik	r3, r3, 8
20026cbc:	e8830000 	lwi	r4, r3, 0
20026cc0:	b0002006 	imm	8198
20026cc4:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20026cc8:	14632000 	rsubk	r3, r3, r4
20026ccc:	a863fe00 	xori	r3, r3, -512
20026cd0:	bc23000c 	bnei	r3, 12		// 20026cdc
					stop = 1;
20026cd4:	30600001 	addik	r3, r0, 1
20026cd8:	f8730028 	swi	r3, r19, 40
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[3]) {
20026cdc:	b0002004 	imm	8196
20026ce0:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20026ce4:	e863000c 	lwi	r3, r3, 12
20026ce8:	3063000c 	addik	r3, r3, 12
20026cec:	e8830000 	lwi	r4, r3, 0
20026cf0:	b0002006 	imm	8198
20026cf4:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20026cf8:	14632000 	rsubk	r3, r3, r4
20026cfc:	a863fe00 	xori	r3, r3, -512
20026d00:	bc23000c 	bnei	r3, 12		// 20026d0c
					stop = 1;
20026d04:	30600001 	addik	r3, r0, 1
20026d08:	f8730028 	swi	r3, r19, 40
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[4]) {
20026d0c:	b0002004 	imm	8196
20026d10:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20026d14:	e863000c 	lwi	r3, r3, 12
20026d18:	30630010 	addik	r3, r3, 16
20026d1c:	e8830000 	lwi	r4, r3, 0
20026d20:	b0002006 	imm	8198
20026d24:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20026d28:	14632000 	rsubk	r3, r3, r4
20026d2c:	a863fe00 	xori	r3, r3, -512
20026d30:	bc23000c 	bnei	r3, 12		// 20026d3c
					stop = 1;
20026d34:	30600001 	addik	r3, r0, 1
20026d38:	f8730028 	swi	r3, r19, 40
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[5]) {
20026d3c:	b0002004 	imm	8196
20026d40:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20026d44:	e863000c 	lwi	r3, r3, 12
20026d48:	30630014 	addik	r3, r3, 20
20026d4c:	e8830000 	lwi	r4, r3, 0
20026d50:	b0002006 	imm	8198
20026d54:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20026d58:	14632000 	rsubk	r3, r3, r4
20026d5c:	a863fe00 	xori	r3, r3, -512
20026d60:	bc23000c 	bnei	r3, 12		// 20026d6c
					stop = 1;
20026d64:	30600001 	addik	r3, r0, 1
20026d68:	f8730028 	swi	r3, r19, 40
				}
				if (1 > SIZE_QP - index_QP + decoder_parser_parseheaders_QP->read_inds[0]) {
20026d6c:	b0002004 	imm	8196
20026d70:	e8607324 	lwi	r3, r0, 29476	// 20047324 <decoder_parser_parseheaders_QP>
20026d74:	e863000c 	lwi	r3, r3, 12
20026d78:	e8830000 	lwi	r4, r3, 0
20026d7c:	b0002006 	imm	8198
20026d80:	e8601e18 	lwi	r3, r0, 7704	// 20061e18 <index_QP>
20026d84:	14632000 	rsubk	r3, r3, r4
20026d88:	a863fe00 	xori	r3, r3, -512
20026d8c:	bc23000c 	bnei	r3, 12		// 20026d98
					stop = 1;
20026d90:	30600001 	addik	r3, r0, 1
20026d94:	f8730028 	swi	r3, r19, 40
				}
				if (stop != 0) {
20026d98:	e8730028 	lwi	r3, r19, 40
20026d9c:	bc030014 	beqi	r3, 20		// 20026db0
					_FSM_state = my_state_read_block_dc;
20026da0:	30600006 	addik	r3, r0, 6
20026da4:	b0002006 	imm	8198
20026da8:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20026dac:	b8000d00 	bri	3328		// 20027aac
				}
				read_block_nodc_intra();
20026db0:	b9f4e9f8 	brlid	r15, -5640	// 200257a8 <read_block_nodc_intra>
20026db4:	80000000 	or	r0, r0, r0
				i++;
20026db8:	e873001c 	lwi	r3, r19, 28
20026dbc:	30630001 	addik	r3, r3, 1
20026dc0:	f873001c 	swi	r3, r19, 28
				goto l_read_block_coeff_ac;
20026dc4:	b800fc38 	bri	-968		// 200269fc
			} else if (isSchedulable_read_block_dc()) {
20026dc8:	b9f4e358 	brlid	r15, -7336	// 20025120 <isSchedulable_read_block_dc>
20026dcc:	80000000 	or	r0, r0, r0
20026dd0:	bc030204 	beqi	r3, 516		// 20026fd4
				int stop = 0;
20026dd4:	f813002c 	swi	r0, r19, 44
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[0]) {
20026dd8:	b0002004 	imm	8196
20026ddc:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20026de0:	e863000c 	lwi	r3, r3, 12
20026de4:	e8830000 	lwi	r4, r3, 0
20026de8:	b0002006 	imm	8198
20026dec:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20026df0:	14632000 	rsubk	r3, r3, r4
20026df4:	a863fe00 	xori	r3, r3, -512
20026df8:	bc23000c 	bnei	r3, 12		// 20026e04
					stop = 1;
20026dfc:	30600001 	addik	r3, r0, 1
20026e00:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[1]) {
20026e04:	b0002004 	imm	8196
20026e08:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20026e0c:	e863000c 	lwi	r3, r3, 12
20026e10:	30630004 	addik	r3, r3, 4
20026e14:	e8830000 	lwi	r4, r3, 0
20026e18:	b0002006 	imm	8198
20026e1c:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20026e20:	14632000 	rsubk	r3, r3, r4
20026e24:	a863fe00 	xori	r3, r3, -512
20026e28:	bc23000c 	bnei	r3, 12		// 20026e34
					stop = 1;
20026e2c:	30600001 	addik	r3, r0, 1
20026e30:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[2]) {
20026e34:	b0002004 	imm	8196
20026e38:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20026e3c:	e863000c 	lwi	r3, r3, 12
20026e40:	30630008 	addik	r3, r3, 8
20026e44:	e8830000 	lwi	r4, r3, 0
20026e48:	b0002006 	imm	8198
20026e4c:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20026e50:	14632000 	rsubk	r3, r3, r4
20026e54:	a863fe00 	xori	r3, r3, -512
20026e58:	bc23000c 	bnei	r3, 12		// 20026e64
					stop = 1;
20026e5c:	30600001 	addik	r3, r0, 1
20026e60:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[3]) {
20026e64:	b0002004 	imm	8196
20026e68:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20026e6c:	e863000c 	lwi	r3, r3, 12
20026e70:	3063000c 	addik	r3, r3, 12
20026e74:	e8830000 	lwi	r4, r3, 0
20026e78:	b0002006 	imm	8198
20026e7c:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20026e80:	14632000 	rsubk	r3, r3, r4
20026e84:	a863fe00 	xori	r3, r3, -512
20026e88:	bc23000c 	bnei	r3, 12		// 20026e94
					stop = 1;
20026e8c:	30600001 	addik	r3, r0, 1
20026e90:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[4]) {
20026e94:	b0002004 	imm	8196
20026e98:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20026e9c:	e863000c 	lwi	r3, r3, 12
20026ea0:	30630010 	addik	r3, r3, 16
20026ea4:	e8830000 	lwi	r4, r3, 0
20026ea8:	b0002006 	imm	8198
20026eac:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20026eb0:	14632000 	rsubk	r3, r3, r4
20026eb4:	a863fe00 	xori	r3, r3, -512
20026eb8:	bc23000c 	bnei	r3, 12		// 20026ec4
					stop = 1;
20026ebc:	30600001 	addik	r3, r0, 1
20026ec0:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[5]) {
20026ec4:	b0002004 	imm	8196
20026ec8:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20026ecc:	e863000c 	lwi	r3, r3, 12
20026ed0:	30630014 	addik	r3, r3, 20
20026ed4:	e8830000 	lwi	r4, r3, 0
20026ed8:	b0002006 	imm	8198
20026edc:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20026ee0:	14632000 	rsubk	r3, r3, r4
20026ee4:	a863fe00 	xori	r3, r3, -512
20026ee8:	bc23000c 	bnei	r3, 12		// 20026ef4
					stop = 1;
20026eec:	30600001 	addik	r3, r0, 1
20026ef0:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_QP - index_QP + decoder_parser_parseheaders_QP->read_inds[0]) {
20026ef4:	b0002004 	imm	8196
20026ef8:	e8607324 	lwi	r3, r0, 29476	// 20047324 <decoder_parser_parseheaders_QP>
20026efc:	e863000c 	lwi	r3, r3, 12
20026f00:	e8830000 	lwi	r4, r3, 0
20026f04:	b0002006 	imm	8198
20026f08:	e8601e18 	lwi	r3, r0, 7704	// 20061e18 <index_QP>
20026f0c:	14632000 	rsubk	r3, r3, r4
20026f10:	a863fe00 	xori	r3, r3, -512
20026f14:	bc23000c 	bnei	r3, 12		// 20026f20
					stop = 1;
20026f18:	30600001 	addik	r3, r0, 1
20026f1c:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_RUN - index_RUN + decoder_parser_parseheaders_RUN->read_inds[0]) {
20026f20:	b0002004 	imm	8196
20026f24:	e8607334 	lwi	r3, r0, 29492	// 20047334 <decoder_parser_parseheaders_RUN>
20026f28:	e863000c 	lwi	r3, r3, 12
20026f2c:	e8830000 	lwi	r4, r3, 0
20026f30:	b0002006 	imm	8198
20026f34:	e8601df0 	lwi	r3, r0, 7664	// 20061df0 <index_RUN>
20026f38:	14632000 	rsubk	r3, r3, r4
20026f3c:	a863fe00 	xori	r3, r3, -512
20026f40:	bc23000c 	bnei	r3, 12		// 20026f4c
					stop = 1;
20026f44:	30600001 	addik	r3, r0, 1
20026f48:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_VALUE - index_VALUE + decoder_parser_parseheaders_VALUE->read_inds[0]) {
20026f4c:	b0002004 	imm	8196
20026f50:	e8607370 	lwi	r3, r0, 29552	// 20047370 <decoder_parser_parseheaders_VALUE>
20026f54:	e863000c 	lwi	r3, r3, 12
20026f58:	e8830000 	lwi	r4, r3, 0
20026f5c:	b0002006 	imm	8198
20026f60:	e8601df8 	lwi	r3, r0, 7672	// 20061df8 <index_VALUE>
20026f64:	14632000 	rsubk	r3, r3, r4
20026f68:	a863fe00 	xori	r3, r3, -512
20026f6c:	bc23000c 	bnei	r3, 12		// 20026f78
					stop = 1;
20026f70:	30600001 	addik	r3, r0, 1
20026f74:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_LAST - index_LAST + decoder_parser_parseheaders_LAST->read_inds[0]) {
20026f78:	b0002004 	imm	8196
20026f7c:	e860734c 	lwi	r3, r0, 29516	// 2004734c <decoder_parser_parseheaders_LAST>
20026f80:	e863000c 	lwi	r3, r3, 12
20026f84:	e8830000 	lwi	r4, r3, 0
20026f88:	b0002006 	imm	8198
20026f8c:	e8601e00 	lwi	r3, r0, 7680	// 20061e00 <index_LAST>
20026f90:	14632000 	rsubk	r3, r3, r4
20026f94:	a863fe00 	xori	r3, r3, -512
20026f98:	bc23000c 	bnei	r3, 12		// 20026fa4
					stop = 1;
20026f9c:	30600001 	addik	r3, r0, 1
20026fa0:	f873002c 	swi	r3, r19, 44
				}
				if (stop != 0) {
20026fa4:	e873002c 	lwi	r3, r19, 44
20026fa8:	bc030014 	beqi	r3, 20		// 20026fbc
					_FSM_state = my_state_read_block_dc;
20026fac:	30600006 	addik	r3, r0, 6
20026fb0:	b0002006 	imm	8198
20026fb4:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20026fb8:	b8000af4 	bri	2804		// 20027aac
				}
				read_block_dc();
20026fbc:	b9f4e1d8 	brlid	r15, -7720	// 20025194 <read_block_dc>
20026fc0:	80000000 	or	r0, r0, r0
				i++;
20026fc4:	e873001c 	lwi	r3, r19, 28
20026fc8:	30630001 	addik	r3, r3, 1
20026fcc:	f873001c 	swi	r3, r19, 28
				goto l_read_block_coeff_ac;
20026fd0:	b800fa2c 	bri	-1492		// 200269fc
			} else {
				_FSM_state = my_state_read_block_dc;
20026fd4:	30600006 	addik	r3, r0, 6
20026fd8:	b0002006 	imm	8198
20026fdc:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
				goto finished;
20026fe0:	b8000acc 	bri	2764		// 20027aac
		case my_state_read_block_coeff_ac:
			goto l_read_block_coeff_ac;
		case my_state_read_block_dc:
			goto l_read_block_dc;
		case my_state_read_mb:
			goto l_read_mb;
20026fe4:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_block_dc;
				goto finished;
			}
		l_read_mb:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
20026fe8:	b9f4f560 	brlid	r15, -2720	// 20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>
20026fec:	80000000 	or	r0, r0, r0
20026ff0:	e893001c 	lwi	r4, r19, 28
20026ff4:	10641800 	addk	r3, r4, r3
20026ff8:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_mb_done()) {
20026ffc:	b9f4df90 	brlid	r15, -8304	// 20024f8c <isSchedulable_read_mb_done>
20027000:	80000000 	or	r0, r0, r0
20027004:	bc030038 	beqi	r3, 56		// 2002703c
				int stop = 0;
20027008:	f8130084 	swi	r0, r19, 132
				if (stop != 0) {
2002700c:	e8730084 	lwi	r3, r19, 132
20027010:	bc030014 	beqi	r3, 20		// 20027024
					_FSM_state = my_state_read_mb;
20027014:	30600007 	addik	r3, r0, 7
20027018:	b0002006 	imm	8198
2002701c:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20027020:	b8000a8c 	bri	2700		// 20027aac
				}
				read_mb_done();
20027024:	b9f4dfb8 	brlid	r15, -8264	// 20024fdc <read_mb_done>
20027028:	80000000 	or	r0, r0, r0
				i++;
2002702c:	e873001c 	lwi	r3, r19, 28
20027030:	30630001 	addik	r3, r3, 1
20027034:	f873001c 	swi	r3, r19, 28
				goto l_look_for_Sequence_Header;
20027038:	b800f788 	bri	-2168		// 200267c0
			} else if (isSchedulable_read_mb_start()) {
2002703c:	b9f4db2c 	brlid	r15, -9428	// 20024b68 <isSchedulable_read_mb_start>
20027040:	80000000 	or	r0, r0, r0
20027044:	bc030038 	beqi	r3, 56		// 2002707c
				int stop = 0;
20027048:	f8130088 	swi	r0, r19, 136
				if (stop != 0) {
2002704c:	e8730088 	lwi	r3, r19, 136
20027050:	bc030014 	beqi	r3, 20		// 20027064
					_FSM_state = my_state_read_mb;
20027054:	30600007 	addik	r3, r0, 7
20027058:	b0002006 	imm	8198
2002705c:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20027060:	b8000a4c 	bri	2636		// 20027aac
				}
				read_mb_start();
20027064:	b9f4db78 	brlid	r15, -9352	// 20024bdc <read_mb_start>
20027068:	80000000 	or	r0, r0, r0
				i++;
2002706c:	e873001c 	lwi	r3, r19, 28
20027070:	30630001 	addik	r3, r3, 1
20027074:	f873001c 	swi	r3, r19, 28
				goto l_read_mv;
20027078:	b8000018 	bri	24		// 20027090
			} else {
				_FSM_state = my_state_read_mb;
2002707c:	30600007 	addik	r3, r0, 7
20027080:	b0002006 	imm	8198
20027084:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
				goto finished;
20027088:	b8000a24 	bri	2596		// 20027aac
		case my_state_read_block_dc:
			goto l_read_block_dc;
		case my_state_read_mb:
			goto l_read_mb;
		case my_state_read_mv:
			goto l_read_mv;
2002708c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_mb;
				goto finished;
			}
		l_read_mv:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
20027090:	b9f4f4b8 	brlid	r15, -2888	// 20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>
20027094:	80000000 	or	r0, r0, r0
20027098:	e893001c 	lwi	r4, r19, 28
2002709c:	10641800 	addk	r3, r4, r3
200270a0:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_uncoded()) {
200270a4:	b9f4ebb8 	brlid	r15, -5192	// 20025c5c <isSchedulable_read_uncoded>
200270a8:	80000000 	or	r0, r0, r0
200270ac:	bc0301b8 	beqi	r3, 440		// 20027264
				int stop = 0;
200270b0:	f8130030 	swi	r0, r19, 48
				if (6 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[0]) {
200270b4:	b0002004 	imm	8196
200270b8:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
200270bc:	e863000c 	lwi	r3, r3, 12
200270c0:	e8830000 	lwi	r4, r3, 0
200270c4:	b0002006 	imm	8198
200270c8:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
200270cc:	14632000 	rsubk	r3, r3, r4
200270d0:	30830200 	addik	r4, r3, 512
200270d4:	30600005 	addik	r3, r0, 5
200270d8:	16441803 	cmpu	r18, r4, r3
200270dc:	bc52000c 	blti	r18, 12		// 200270e8
					stop = 1;
200270e0:	30600001 	addik	r3, r0, 1
200270e4:	f8730030 	swi	r3, r19, 48
				}
				if (6 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[1]) {
200270e8:	b0002004 	imm	8196
200270ec:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
200270f0:	e863000c 	lwi	r3, r3, 12
200270f4:	30630004 	addik	r3, r3, 4
200270f8:	e8830000 	lwi	r4, r3, 0
200270fc:	b0002006 	imm	8198
20027100:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20027104:	14632000 	rsubk	r3, r3, r4
20027108:	30830200 	addik	r4, r3, 512
2002710c:	30600005 	addik	r3, r0, 5
20027110:	16441803 	cmpu	r18, r4, r3
20027114:	bc52000c 	blti	r18, 12		// 20027120
					stop = 1;
20027118:	30600001 	addik	r3, r0, 1
2002711c:	f8730030 	swi	r3, r19, 48
				}
				if (6 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[2]) {
20027120:	b0002004 	imm	8196
20027124:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20027128:	e863000c 	lwi	r3, r3, 12
2002712c:	30630008 	addik	r3, r3, 8
20027130:	e8830000 	lwi	r4, r3, 0
20027134:	b0002006 	imm	8198
20027138:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
2002713c:	14632000 	rsubk	r3, r3, r4
20027140:	30830200 	addik	r4, r3, 512
20027144:	30600005 	addik	r3, r0, 5
20027148:	16441803 	cmpu	r18, r4, r3
2002714c:	bc52000c 	blti	r18, 12		// 20027158
					stop = 1;
20027150:	30600001 	addik	r3, r0, 1
20027154:	f8730030 	swi	r3, r19, 48
				}
				if (6 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[3]) {
20027158:	b0002004 	imm	8196
2002715c:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20027160:	e863000c 	lwi	r3, r3, 12
20027164:	3063000c 	addik	r3, r3, 12
20027168:	e8830000 	lwi	r4, r3, 0
2002716c:	b0002006 	imm	8198
20027170:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20027174:	14632000 	rsubk	r3, r3, r4
20027178:	30830200 	addik	r4, r3, 512
2002717c:	30600005 	addik	r3, r0, 5
20027180:	16441803 	cmpu	r18, r4, r3
20027184:	bc52000c 	blti	r18, 12		// 20027190
					stop = 1;
20027188:	30600001 	addik	r3, r0, 1
2002718c:	f8730030 	swi	r3, r19, 48
				}
				if (6 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[4]) {
20027190:	b0002004 	imm	8196
20027194:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20027198:	e863000c 	lwi	r3, r3, 12
2002719c:	30630010 	addik	r3, r3, 16
200271a0:	e8830000 	lwi	r4, r3, 0
200271a4:	b0002006 	imm	8198
200271a8:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
200271ac:	14632000 	rsubk	r3, r3, r4
200271b0:	30830200 	addik	r4, r3, 512
200271b4:	30600005 	addik	r3, r0, 5
200271b8:	16441803 	cmpu	r18, r4, r3
200271bc:	bc52000c 	blti	r18, 12		// 200271c8
					stop = 1;
200271c0:	30600001 	addik	r3, r0, 1
200271c4:	f8730030 	swi	r3, r19, 48
				}
				if (6 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[5]) {
200271c8:	b0002004 	imm	8196
200271cc:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
200271d0:	e863000c 	lwi	r3, r3, 12
200271d4:	30630014 	addik	r3, r3, 20
200271d8:	e8830000 	lwi	r4, r3, 0
200271dc:	b0002006 	imm	8198
200271e0:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
200271e4:	14632000 	rsubk	r3, r3, r4
200271e8:	30830200 	addik	r4, r3, 512
200271ec:	30600005 	addik	r3, r0, 5
200271f0:	16441803 	cmpu	r18, r4, r3
200271f4:	bc52000c 	blti	r18, 12		// 20027200
					stop = 1;
200271f8:	30600001 	addik	r3, r0, 1
200271fc:	f8730030 	swi	r3, r19, 48
				}
				if (6 > SIZE_QP - index_QP + decoder_parser_parseheaders_QP->read_inds[0]) {
20027200:	b0002004 	imm	8196
20027204:	e8607324 	lwi	r3, r0, 29476	// 20047324 <decoder_parser_parseheaders_QP>
20027208:	e863000c 	lwi	r3, r3, 12
2002720c:	e8830000 	lwi	r4, r3, 0
20027210:	b0002006 	imm	8198
20027214:	e8601e18 	lwi	r3, r0, 7704	// 20061e18 <index_QP>
20027218:	14632000 	rsubk	r3, r3, r4
2002721c:	30830200 	addik	r4, r3, 512
20027220:	30600005 	addik	r3, r0, 5
20027224:	16441803 	cmpu	r18, r4, r3
20027228:	bc52000c 	blti	r18, 12		// 20027234
					stop = 1;
2002722c:	30600001 	addik	r3, r0, 1
20027230:	f8730030 	swi	r3, r19, 48
				}
				if (stop != 0) {
20027234:	e8730030 	lwi	r3, r19, 48
20027238:	bc030014 	beqi	r3, 20		// 2002724c
					_FSM_state = my_state_read_mv;
2002723c:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20027240:	b0002006 	imm	8198
20027244:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20027248:	b8000864 	bri	2148		// 20027aac
				}
				read_uncoded();
2002724c:	b9f4ea48 	brlid	r15, -5560	// 20025c94 <read_uncoded>
20027250:	80000000 	or	r0, r0, r0
				i++;
20027254:	e873001c 	lwi	r3, r19, 28
20027258:	30630001 	addik	r3, r3, 1
2002725c:	f873001c 	swi	r3, r19, 28
				goto l_read_mb;
20027260:	b800fd88 	bri	-632		// 20026fe8
			} else if (isSchedulable_read_mv_start()) {
20027264:	b9f4eb94 	brlid	r15, -5228	// 20025df8 <isSchedulable_read_mv_start>
20027268:	80000000 	or	r0, r0, r0
2002726c:	bc030038 	beqi	r3, 56		// 200272a4
				int stop = 0;
20027270:	f8130090 	swi	r0, r19, 144
				if (stop != 0) {
20027274:	e8730090 	lwi	r3, r19, 144
20027278:	bc030014 	beqi	r3, 20		// 2002728c
					_FSM_state = my_state_read_mv;
2002727c:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20027280:	b0002006 	imm	8198
20027284:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20027288:	b8000824 	bri	2084		// 20027aac
				}
				read_mv_start();
2002728c:	b9f4ebd8 	brlid	r15, -5160	// 20025e64 <read_mv_start>
20027290:	80000000 	or	r0, r0, r0
				i++;
20027294:	e873001c 	lwi	r3, r19, 28
20027298:	30630001 	addik	r3, r3, 1
2002729c:	f873001c 	swi	r3, r19, 28
				goto l_read_mv_data;
200272a0:	b8000058 	bri	88		// 200272f8
			} else if (isSchedulable_read_block_start()) {
200272a4:	b9f4dd58 	brlid	r15, -8872	// 20024ffc <isSchedulable_read_block_start>
200272a8:	80000000 	or	r0, r0, r0
200272ac:	bc030038 	beqi	r3, 56		// 200272e4
				int stop = 0;
200272b0:	f8130094 	swi	r0, r19, 148
				if (stop != 0) {
200272b4:	e8730094 	lwi	r3, r19, 148
200272b8:	bc030014 	beqi	r3, 20		// 200272cc
					_FSM_state = my_state_read_mv;
200272bc:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200272c0:	b0002006 	imm	8198
200272c4:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
200272c8:	b80007e4 	bri	2020		// 20027aac
				}
				read_block_start();
200272cc:	b9f4dd5c 	brlid	r15, -8868	// 20025028 <read_block_start>
200272d0:	80000000 	or	r0, r0, r0
				i++;
200272d4:	e873001c 	lwi	r3, r19, 28
200272d8:	30630001 	addik	r3, r3, 1
200272dc:	f873001c 	swi	r3, r19, 28
				goto l_read_block_dc;
200272e0:	b800f7c4 	bri	-2108		// 20026aa4
			} else {
				_FSM_state = my_state_read_mv;
200272e4:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200272e8:	b0002006 	imm	8198
200272ec:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
				goto finished;
200272f0:	b80007bc 	bri	1980		// 20027aac
		case my_state_read_mb:
			goto l_read_mb;
		case my_state_read_mv:
			goto l_read_mv;
		case my_state_read_mv_data:
			goto l_read_mv_data;
200272f4:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_mv;
				goto finished;
			}
		l_read_mv_data:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
200272f8:	b9f4f250 	brlid	r15, -3504	// 20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>
200272fc:	80000000 	or	r0, r0, r0
20027300:	e893001c 	lwi	r4, r19, 28
20027304:	10641800 	addk	r3, r4, r3
20027308:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_mv_data_done()) {
2002730c:	b9f4eeb4 	brlid	r15, -4428	// 200261c0 <isSchedulable_read_mv_data_done>
20027310:	80000000 	or	r0, r0, r0
20027314:	bc030038 	beqi	r3, 56		// 2002734c
				int stop = 0;
20027318:	f8130098 	swi	r0, r19, 152
				if (stop != 0) {
2002731c:	e8730098 	lwi	r3, r19, 152
20027320:	bc030014 	beqi	r3, 20		// 20027334
					_FSM_state = my_state_read_mv_data;
20027324:	30600009 	addik	r3, r0, 9
20027328:	b0002006 	imm	8198
2002732c:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20027330:	b800077c 	bri	1916		// 20027aac
				}
				read_mv_data_done();
20027334:	b9f4ef04 	brlid	r15, -4348	// 20026238 <read_mv_data_done>
20027338:	80000000 	or	r0, r0, r0
				i++;
2002733c:	e873001c 	lwi	r3, r19, 28
20027340:	30630001 	addik	r3, r3, 1
20027344:	f873001c 	swi	r3, r19, 28
				goto l_read_block;
20027348:	b800f4e0 	bri	-2848		// 20026828
			} else if (isSchedulable_read_mv_data()) {
2002734c:	b9f4eb40 	brlid	r15, -5312	// 20025e8c <isSchedulable_read_mv_data>
20027350:	80000000 	or	r0, r0, r0
20027354:	bc03006c 	beqi	r3, 108		// 200273c0
				int stop = 0;
20027358:	f8130034 	swi	r0, r19, 52
				if (4 > SIZE_MV - index_MV + decoder_parser_parseheaders_MV->read_inds[0]) {
2002735c:	b0002004 	imm	8196
20027360:	e860733c 	lwi	r3, r0, 29500	// 2004733c <decoder_parser_parseheaders_MV>
20027364:	e863000c 	lwi	r3, r3, 12
20027368:	e8830000 	lwi	r4, r3, 0
2002736c:	b0002006 	imm	8198
20027370:	e8601de8 	lwi	r3, r0, 7656	// 20061de8 <index_MV>
20027374:	14632000 	rsubk	r3, r3, r4
20027378:	30830200 	addik	r4, r3, 512
2002737c:	30600003 	addik	r3, r0, 3
20027380:	16441803 	cmpu	r18, r4, r3
20027384:	bc52000c 	blti	r18, 12		// 20027390
					stop = 1;
20027388:	30600001 	addik	r3, r0, 1
2002738c:	f8730034 	swi	r3, r19, 52
				}
				if (stop != 0) {
20027390:	e8730034 	lwi	r3, r19, 52
20027394:	bc030014 	beqi	r3, 20		// 200273a8
					_FSM_state = my_state_read_mv_data;
20027398:	30600009 	addik	r3, r0, 9
2002739c:	b0002006 	imm	8198
200273a0:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
200273a4:	b8000708 	bri	1800		// 20027aac
				}
				read_mv_data();
200273a8:	b9f4eb58 	brlid	r15, -5288	// 20025f00 <read_mv_data>
200273ac:	80000000 	or	r0, r0, r0
				i++;
200273b0:	e873001c 	lwi	r3, r19, 28
200273b4:	30630001 	addik	r3, r3, 1
200273b8:	f873001c 	swi	r3, r19, 28
				goto l_read_mv_data;
200273bc:	b800ff3c 	bri	-196		// 200272f8
			} else {
				_FSM_state = my_state_read_mv_data;
200273c0:	30600009 	addik	r3, r0, 9
200273c4:	b0002006 	imm	8198
200273c8:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
				goto finished;
200273cc:	b80006e0 	bri	1760		// 20027aac
		case my_state_read_mv:
			goto l_read_mv;
		case my_state_read_mv_data:
			goto l_read_mv_data;
		case my_state_read_start_code:
			goto l_read_start_code;
200273d0:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_mv_data;
				goto finished;
			}
		l_read_start_code:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
200273d4:	b9f4f174 	brlid	r15, -3724	// 20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>
200273d8:	80000000 	or	r0, r0, r0
200273dc:	e893001c 	lwi	r4, r19, 28
200273e0:	10641800 	addk	r3, r4, r3
200273e4:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_start_code()) {
200273e8:	b9f4c188 	brlid	r15, -15992	// 20023570 <isSchedulable_read_start_code>
200273ec:	80000000 	or	r0, r0, r0
200273f0:	bc030038 	beqi	r3, 56		// 20027428
				int stop = 0;
200273f4:	f813004c 	swi	r0, r19, 76
				if (stop != 0) {
200273f8:	e873004c 	lwi	r3, r19, 76
200273fc:	bc030014 	beqi	r3, 20		// 20027410
					_FSM_state = my_state_read_start_code;
20027400:	3060000a 	addik	r3, r0, 10
20027404:	b0002006 	imm	8198
20027408:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
2002740c:	b80006a0 	bri	1696		// 20027aac
				}
				read_start_code();
20027410:	b9f4c1d4 	brlid	r15, -15916	// 200235e4 <read_start_code>
20027414:	80000000 	or	r0, r0, r0
				i++;
20027418:	e873001c 	lwi	r3, r19, 28
2002741c:	30630001 	addik	r3, r3, 1
20027420:	f873001c 	swi	r3, r19, 28
				goto l_find_header;
20027424:	b800f2b4 	bri	-3404		// 200266d8
			} else {
				_FSM_state = my_state_read_start_code;
20027428:	3060000a 	addik	r3, r0, 10
2002742c:	b0002006 	imm	8198
20027430:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
				goto finished;
20027434:	b8000678 	bri	1656		// 20027aac
		case my_state_read_mv_data:
			goto l_read_mv_data;
		case my_state_read_start_code:
			goto l_read_start_code;
		case my_state_read_vol:
			goto l_read_vol;
20027438:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_start_code;
				goto finished;
			}
		l_read_vol:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002743c:	b9f4f10c 	brlid	r15, -3828	// 20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>
20027440:	80000000 	or	r0, r0, r0
20027444:	e893001c 	lwi	r4, r19, 28
20027448:	10641800 	addk	r3, r4, r3
2002744c:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_vol_start()) {
20027450:	b9f4c31c 	brlid	r15, -15588	// 2002376c <isSchedulable_read_vol_start>
20027454:	80000000 	or	r0, r0, r0
20027458:	bc030038 	beqi	r3, 56		// 20027490
				int stop = 0;
2002745c:	f813005c 	swi	r0, r19, 92
				if (stop != 0) {
20027460:	e873005c 	lwi	r3, r19, 92
20027464:	bc030014 	beqi	r3, 20		// 20027478
					_FSM_state = my_state_read_vol;
20027468:	3060000b 	addik	r3, r0, 11
2002746c:	b0002006 	imm	8198
20027470:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20027474:	b8000638 	bri	1592		// 20027aac
				}
				read_vol_start();
20027478:	b9f4c368 	brlid	r15, -15512	// 200237e0 <read_vol_start>
2002747c:	80000000 	or	r0, r0, r0
				i++;
20027480:	e873001c 	lwi	r3, r19, 28
20027484:	30630001 	addik	r3, r3, 1
20027488:	f873001c 	swi	r3, r19, 28
				goto l_read_vol_vbv_parameters;
2002748c:	b8000018 	bri	24		// 200274a4
			} else {
				_FSM_state = my_state_read_vol;
20027490:	3060000b 	addik	r3, r0, 11
20027494:	b0002006 	imm	8198
20027498:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
				goto finished;
2002749c:	b8000610 	bri	1552		// 20027aac
		case my_state_read_start_code:
			goto l_read_start_code;
		case my_state_read_vol:
			goto l_read_vol;
		case my_state_read_vol_vbv_parameters:
			goto l_read_vol_vbv_parameters;
200274a0:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_vol;
				goto finished;
			}
		l_read_vol_vbv_parameters:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
200274a4:	b9f4f0a4 	brlid	r15, -3932	// 20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>
200274a8:	80000000 	or	r0, r0, r0
200274ac:	e893001c 	lwi	r4, r19, 28
200274b0:	10641800 	addk	r3, r4, r3
200274b4:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_vol_vbv_parameters1()) {
200274b8:	b9f4c5f4 	brlid	r15, -14860	// 20023aac <isSchedulable_read_vol_vbv_parameters1>
200274bc:	80000000 	or	r0, r0, r0
200274c0:	bc030038 	beqi	r3, 56		// 200274f8
				int stop = 0;
200274c4:	f8130060 	swi	r0, r19, 96
				if (stop != 0) {
200274c8:	e8730060 	lwi	r3, r19, 96
200274cc:	bc030014 	beqi	r3, 20		// 200274e0
					_FSM_state = my_state_read_vol_vbv_parameters;
200274d0:	3060000c 	addik	r3, r0, 12
200274d4:	b0002006 	imm	8198
200274d8:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
200274dc:	b80005d0 	bri	1488		// 20027aac
				}
				read_vol_vbv_parameters1();
200274e0:	b9f4c640 	brlid	r15, -14784	// 20023b20 <read_vol_vbv_parameters1>
200274e4:	80000000 	or	r0, r0, r0
				i++;
200274e8:	e873001c 	lwi	r3, r19, 28
200274ec:	30630001 	addik	r3, r3, 1
200274f0:	f873001c 	swi	r3, r19, 28
				goto l_read_vol_vbv_parameters2;
200274f4:	b8000018 	bri	24		// 2002750c
			} else {
				_FSM_state = my_state_read_vol_vbv_parameters;
200274f8:	3060000c 	addik	r3, r0, 12
200274fc:	b0002006 	imm	8198
20027500:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
				goto finished;
20027504:	b80005a8 	bri	1448		// 20027aac
		case my_state_read_vol:
			goto l_read_vol;
		case my_state_read_vol_vbv_parameters:
			goto l_read_vol_vbv_parameters;
		case my_state_read_vol_vbv_parameters2:
			goto l_read_vol_vbv_parameters2;
20027508:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_vol_vbv_parameters;
				goto finished;
			}
		l_read_vol_vbv_parameters2:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002750c:	b9f4f03c 	brlid	r15, -4036	// 20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>
20027510:	80000000 	or	r0, r0, r0
20027514:	e893001c 	lwi	r4, r19, 28
20027518:	10641800 	addk	r3, r4, r3
2002751c:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_vol_vbv_parameters2()) {
20027520:	b9f4c74c 	brlid	r15, -14516	// 20023c6c <isSchedulable_read_vol_vbv_parameters2>
20027524:	80000000 	or	r0, r0, r0
20027528:	bc030038 	beqi	r3, 56		// 20027560
				int stop = 0;
2002752c:	f8130064 	swi	r0, r19, 100
				if (stop != 0) {
20027530:	e8730064 	lwi	r3, r19, 100
20027534:	bc030014 	beqi	r3, 20		// 20027548
					_FSM_state = my_state_read_vol_vbv_parameters2;
20027538:	3060000d 	addik	r3, r0, 13
2002753c:	b0002006 	imm	8198
20027540:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20027544:	b8000568 	bri	1384		// 20027aac
				}
				read_vol_vbv_parameters2();
20027548:	b9f4c798 	brlid	r15, -14440	// 20023ce0 <read_vol_vbv_parameters2>
2002754c:	80000000 	or	r0, r0, r0
				i++;
20027550:	e873001c 	lwi	r3, r19, 28
20027554:	30630001 	addik	r3, r3, 1
20027558:	f873001c 	swi	r3, r19, 28
				goto l_read_vol_video_object_layer_shape;
2002755c:	b8000018 	bri	24		// 20027574
			} else {
				_FSM_state = my_state_read_vol_vbv_parameters2;
20027560:	3060000d 	addik	r3, r0, 13
20027564:	b0002006 	imm	8198
20027568:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
				goto finished;
2002756c:	b8000540 	bri	1344		// 20027aac
		case my_state_read_vol_vbv_parameters:
			goto l_read_vol_vbv_parameters;
		case my_state_read_vol_vbv_parameters2:
			goto l_read_vol_vbv_parameters2;
		case my_state_read_vol_video_object_layer_shape:
			goto l_read_vol_video_object_layer_shape;
20027570:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_vol_vbv_parameters2;
				goto finished;
			}
		l_read_vol_video_object_layer_shape:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
20027574:	b9f4efd4 	brlid	r15, -4140	// 20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>
20027578:	80000000 	or	r0, r0, r0
2002757c:	e893001c 	lwi	r4, r19, 28
20027580:	10641800 	addk	r3, r4, r3
20027584:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_vol_video_object_layer_shape()) {
20027588:	b9f4c7f0 	brlid	r15, -14352	// 20023d78 <isSchedulable_read_vol_video_object_layer_shape>
2002758c:	80000000 	or	r0, r0, r0
20027590:	bc030038 	beqi	r3, 56		// 200275c8
				int stop = 0;
20027594:	f8130068 	swi	r0, r19, 104
				if (stop != 0) {
20027598:	e8730068 	lwi	r3, r19, 104
2002759c:	bc030014 	beqi	r3, 20		// 200275b0
					_FSM_state = my_state_read_vol_video_object_layer_shape;
200275a0:	3060000e 	addik	r3, r0, 14
200275a4:	b0002006 	imm	8198
200275a8:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
200275ac:	b8000500 	bri	1280		// 20027aac
				}
				read_vol_video_object_layer_shape();
200275b0:	b9f4c83c 	brlid	r15, -14276	// 20023dec <read_vol_video_object_layer_shape>
200275b4:	80000000 	or	r0, r0, r0
				i++;
200275b8:	e873001c 	lwi	r3, r19, 28
200275bc:	30630001 	addik	r3, r3, 1
200275c0:	f873001c 	swi	r3, r19, 28
				goto l_read_vol_video_object_layer_width;
200275c4:	b8000018 	bri	24		// 200275dc
			} else {
				_FSM_state = my_state_read_vol_video_object_layer_shape;
200275c8:	3060000e 	addik	r3, r0, 14
200275cc:	b0002006 	imm	8198
200275d0:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
				goto finished;
200275d4:	b80004d8 	bri	1240		// 20027aac
		case my_state_read_vol_vbv_parameters2:
			goto l_read_vol_vbv_parameters2;
		case my_state_read_vol_video_object_layer_shape:
			goto l_read_vol_video_object_layer_shape;
		case my_state_read_vol_video_object_layer_width:
			goto l_read_vol_video_object_layer_width;
200275d8:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_vol_video_object_layer_shape;
				goto finished;
			}
		l_read_vol_video_object_layer_width:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
200275dc:	b9f4ef6c 	brlid	r15, -4244	// 20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>
200275e0:	80000000 	or	r0, r0, r0
200275e4:	e893001c 	lwi	r4, r19, 28
200275e8:	10641800 	addk	r3, r4, r3
200275ec:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_vol_video_object_layer_width()) {
200275f0:	b9f4c9bc 	brlid	r15, -13892	// 20023fac <isSchedulable_read_vol_video_object_layer_width>
200275f4:	80000000 	or	r0, r0, r0
200275f8:	bc030038 	beqi	r3, 56		// 20027630
				int stop = 0;
200275fc:	f813006c 	swi	r0, r19, 108
				if (stop != 0) {
20027600:	e873006c 	lwi	r3, r19, 108
20027604:	bc030014 	beqi	r3, 20		// 20027618
					_FSM_state = my_state_read_vol_video_object_layer_width;
20027608:	3060000f 	addik	r3, r0, 15
2002760c:	b0002006 	imm	8198
20027610:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20027614:	b8000498 	bri	1176		// 20027aac
				}
				read_vol_video_object_layer_width();
20027618:	b9f4ca08 	brlid	r15, -13816	// 20024020 <read_vol_video_object_layer_width>
2002761c:	80000000 	or	r0, r0, r0
				i++;
20027620:	e873001c 	lwi	r3, r19, 28
20027624:	30630001 	addik	r3, r3, 1
20027628:	f873001c 	swi	r3, r19, 28
				goto l_look_for_Sequence_Header;
2002762c:	b800f194 	bri	-3692		// 200267c0
			} else {
				_FSM_state = my_state_read_vol_video_object_layer_width;
20027630:	3060000f 	addik	r3, r0, 15
20027634:	b0002006 	imm	8198
20027638:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
				goto finished;
2002763c:	b8000470 	bri	1136		// 20027aac
		case my_state_read_vol_video_object_layer_shape:
			goto l_read_vol_video_object_layer_shape;
		case my_state_read_vol_video_object_layer_width:
			goto l_read_vol_video_object_layer_width;
		case my_state_read_vop:
			goto l_read_vop;
20027640:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_vol_video_object_layer_width;
				goto finished;
			}
		l_read_vop:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
20027644:	b9f4ef04 	brlid	r15, -4348	// 20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>
20027648:	80000000 	or	r0, r0, r0
2002764c:	e893001c 	lwi	r4, r19, 28
20027650:	10641800 	addk	r3, r4, r3
20027654:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_vop()) {
20027658:	b9f4cc1c 	brlid	r15, -13284	// 20024274 <isSchedulable_read_vop>
2002765c:	80000000 	or	r0, r0, r0
20027660:	bc030038 	beqi	r3, 56		// 20027698
				int stop = 0;
20027664:	f8130070 	swi	r0, r19, 112
				if (stop != 0) {
20027668:	e8730070 	lwi	r3, r19, 112
2002766c:	bc030014 	beqi	r3, 20		// 20027680
					_FSM_state = my_state_read_vop;
20027670:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
20027674:	b0002006 	imm	8198
20027678:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
2002767c:	b8000430 	bri	1072		// 20027aac
				}
				read_vop();
20027680:	b9f4cc68 	brlid	r15, -13208	// 200242e8 <read_vop>
20027684:	80000000 	or	r0, r0, r0
				i++;
20027688:	e873001c 	lwi	r3, r19, 28
2002768c:	30630001 	addik	r3, r3, 1
20027690:	f873001c 	swi	r3, r19, 28
				goto l_read_vop_coding_type;
20027694:	b8000264 	bri	612		// 200278f8
			} else {
				_FSM_state = my_state_read_vop;
20027698:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
2002769c:	b0002006 	imm	8198
200276a0:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
				goto finished;
200276a4:	b8000408 	bri	1032		// 20027aac
		case my_state_read_vol_video_object_layer_width:
			goto l_read_vol_video_object_layer_width;
		case my_state_read_vop:
			goto l_read_vop;
		case my_state_read_vop_coded:
			goto l_read_vop_coded;
200276a8:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_vop;
				goto finished;
			}
		l_read_vop_coded:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
200276ac:	b9f4ee9c 	brlid	r15, -4452	// 20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>
200276b0:	80000000 	or	r0, r0, r0
200276b4:	e893001c 	lwi	r4, r19, 28
200276b8:	10641800 	addk	r3, r4, r3
200276bc:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_vop_coded_coded()) {
200276c0:	b9f4cf30 	brlid	r15, -12496	// 200245f0 <isSchedulable_read_vop_coded_coded>
200276c4:	80000000 	or	r0, r0, r0
200276c8:	bc0301dc 	beqi	r3, 476		// 200278a4
				int stop = 0;
200276cc:	f8130038 	swi	r0, r19, 56
				if (3 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[0]) {
200276d0:	b0002004 	imm	8196
200276d4:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
200276d8:	e863000c 	lwi	r3, r3, 12
200276dc:	e8830000 	lwi	r4, r3, 0
200276e0:	b0002006 	imm	8198
200276e4:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
200276e8:	14632000 	rsubk	r3, r3, r4
200276ec:	30830200 	addik	r4, r3, 512
200276f0:	30600002 	addik	r3, r0, 2
200276f4:	16441803 	cmpu	r18, r4, r3
200276f8:	bc52000c 	blti	r18, 12		// 20027704
					stop = 1;
200276fc:	30600001 	addik	r3, r0, 1
20027700:	f8730038 	swi	r3, r19, 56
				}
				if (3 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[1]) {
20027704:	b0002004 	imm	8196
20027708:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
2002770c:	e863000c 	lwi	r3, r3, 12
20027710:	30630004 	addik	r3, r3, 4
20027714:	e8830000 	lwi	r4, r3, 0
20027718:	b0002006 	imm	8198
2002771c:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20027720:	14632000 	rsubk	r3, r3, r4
20027724:	30830200 	addik	r4, r3, 512
20027728:	30600002 	addik	r3, r0, 2
2002772c:	16441803 	cmpu	r18, r4, r3
20027730:	bc52000c 	blti	r18, 12		// 2002773c
					stop = 1;
20027734:	30600001 	addik	r3, r0, 1
20027738:	f8730038 	swi	r3, r19, 56
				}
				if (3 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[2]) {
2002773c:	b0002004 	imm	8196
20027740:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
20027744:	e863000c 	lwi	r3, r3, 12
20027748:	30630008 	addik	r3, r3, 8
2002774c:	e8830000 	lwi	r4, r3, 0
20027750:	b0002006 	imm	8198
20027754:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20027758:	14632000 	rsubk	r3, r3, r4
2002775c:	30830200 	addik	r4, r3, 512
20027760:	30600002 	addik	r3, r0, 2
20027764:	16441803 	cmpu	r18, r4, r3
20027768:	bc52000c 	blti	r18, 12		// 20027774
					stop = 1;
2002776c:	30600001 	addik	r3, r0, 1
20027770:	f8730038 	swi	r3, r19, 56
				}
				if (3 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[3]) {
20027774:	b0002004 	imm	8196
20027778:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
2002777c:	e863000c 	lwi	r3, r3, 12
20027780:	3063000c 	addik	r3, r3, 12
20027784:	e8830000 	lwi	r4, r3, 0
20027788:	b0002006 	imm	8198
2002778c:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20027790:	14632000 	rsubk	r3, r3, r4
20027794:	30830200 	addik	r4, r3, 512
20027798:	30600002 	addik	r3, r0, 2
2002779c:	16441803 	cmpu	r18, r4, r3
200277a0:	bc52000c 	blti	r18, 12		// 200277ac
					stop = 1;
200277a4:	30600001 	addik	r3, r0, 1
200277a8:	f8730038 	swi	r3, r19, 56
				}
				if (3 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[4]) {
200277ac:	b0002004 	imm	8196
200277b0:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
200277b4:	e863000c 	lwi	r3, r3, 12
200277b8:	30630010 	addik	r3, r3, 16
200277bc:	e8830000 	lwi	r4, r3, 0
200277c0:	b0002006 	imm	8198
200277c4:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
200277c8:	14632000 	rsubk	r3, r3, r4
200277cc:	30830200 	addik	r4, r3, 512
200277d0:	30600002 	addik	r3, r0, 2
200277d4:	16441803 	cmpu	r18, r4, r3
200277d8:	bc52000c 	blti	r18, 12		// 200277e4
					stop = 1;
200277dc:	30600001 	addik	r3, r0, 1
200277e0:	f8730038 	swi	r3, r19, 56
				}
				if (3 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[5]) {
200277e4:	b0002004 	imm	8196
200277e8:	e8607354 	lwi	r3, r0, 29524	// 20047354 <decoder_parser_parseheaders_BTYPE>
200277ec:	e863000c 	lwi	r3, r3, 12
200277f0:	30630014 	addik	r3, r3, 20
200277f4:	e8830000 	lwi	r4, r3, 0
200277f8:	b0002006 	imm	8198
200277fc:	e8601de0 	lwi	r3, r0, 7648	// 20061de0 <index_BTYPE>
20027800:	14632000 	rsubk	r3, r3, r4
20027804:	30830200 	addik	r4, r3, 512
20027808:	30600002 	addik	r3, r0, 2
2002780c:	16441803 	cmpu	r18, r4, r3
20027810:	bc52000c 	blti	r18, 12		// 2002781c
					stop = 1;
20027814:	30600001 	addik	r3, r0, 1
20027818:	f8730038 	swi	r3, r19, 56
				}
				if (1 > SIZE_WIDTH - index_WIDTH + decoder_parser_parseheaders_WIDTH->read_inds[0]) {
2002781c:	b0002004 	imm	8196
20027820:	e8607344 	lwi	r3, r0, 29508	// 20047344 <decoder_parser_parseheaders_WIDTH>
20027824:	e863000c 	lwi	r3, r3, 12
20027828:	e8830000 	lwi	r4, r3, 0
2002782c:	b0002006 	imm	8198
20027830:	e8601e08 	lwi	r3, r0, 7688	// 20061e08 <index_WIDTH>
20027834:	14632000 	rsubk	r3, r3, r4
20027838:	a863fe00 	xori	r3, r3, -512
2002783c:	bc23000c 	bnei	r3, 12		// 20027848
					stop = 1;
20027840:	30600001 	addik	r3, r0, 1
20027844:	f8730038 	swi	r3, r19, 56
				}
				if (1 > SIZE_HEIGHT - index_HEIGHT + decoder_parser_parseheaders_HEIGHT->read_inds[0]) {
20027848:	b0002004 	imm	8196
2002784c:	e860732c 	lwi	r3, r0, 29484	// 2004732c <decoder_parser_parseheaders_HEIGHT>
20027850:	e863000c 	lwi	r3, r3, 12
20027854:	e8830000 	lwi	r4, r3, 0
20027858:	b0002006 	imm	8198
2002785c:	e8601e10 	lwi	r3, r0, 7696	// 20061e10 <index_HEIGHT>
20027860:	14632000 	rsubk	r3, r3, r4
20027864:	a863fe00 	xori	r3, r3, -512
20027868:	bc23000c 	bnei	r3, 12		// 20027874
					stop = 1;
2002786c:	30600001 	addik	r3, r0, 1
20027870:	f8730038 	swi	r3, r19, 56
				}
				if (stop != 0) {
20027874:	e8730038 	lwi	r3, r19, 56
20027878:	bc030014 	beqi	r3, 20		// 2002788c
					_FSM_state = my_state_read_vop_coded;
2002787c:	30600011 	addik	r3, r0, 17
20027880:	b0002006 	imm	8198
20027884:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20027888:	b8000224 	bri	548		// 20027aac
				}
				read_vop_coded_coded();
2002788c:	b9f4cdec 	brlid	r15, -12820	// 20024678 <read_vop_coded_coded>
20027890:	80000000 	or	r0, r0, r0
				i++;
20027894:	e873001c 	lwi	r3, r19, 28
20027898:	30630001 	addik	r3, r3, 1
2002789c:	f873001c 	swi	r3, r19, 28
				goto l_read_mb;
200278a0:	b800f748 	bri	-2232		// 20026fe8
			} else if (isSchedulable_read_vop_coded_uncoded()) {
200278a4:	b9f4d260 	brlid	r15, -11680	// 20024b04 <isSchedulable_read_vop_coded_uncoded>
200278a8:	80000000 	or	r0, r0, r0
200278ac:	bc030038 	beqi	r3, 56		// 200278e4
				int stop = 0;
200278b0:	f813007c 	swi	r0, r19, 124
				if (stop != 0) {
200278b4:	e873007c 	lwi	r3, r19, 124
200278b8:	bc030014 	beqi	r3, 20		// 200278cc
					_FSM_state = my_state_read_vop_coded;
200278bc:	30600011 	addik	r3, r0, 17
200278c0:	b0002006 	imm	8198
200278c4:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
200278c8:	b80001e4 	bri	484		// 20027aac
				}
				read_vop_coded_uncoded();
200278cc:	b9f4d27c 	brlid	r15, -11652	// 20024b48 <read_vop_coded_uncoded>
200278d0:	80000000 	or	r0, r0, r0
				i++;
200278d4:	e873001c 	lwi	r3, r19, 28
200278d8:	30630001 	addik	r3, r3, 1
200278dc:	f873001c 	swi	r3, r19, 28
				goto l_look_for_Sequence_Header;
200278e0:	b800eee0 	bri	-4384		// 200267c0
			} else {
				_FSM_state = my_state_read_vop_coded;
200278e4:	30600011 	addik	r3, r0, 17
200278e8:	b0002006 	imm	8198
200278ec:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
				goto finished;
200278f0:	b80001bc 	bri	444		// 20027aac
		case my_state_read_vop:
			goto l_read_vop;
		case my_state_read_vop_coded:
			goto l_read_vop_coded;
		case my_state_read_vop_coding_type:
			goto l_read_vop_coding_type;
200278f4:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_vop_coded;
				goto finished;
			}
		l_read_vop_coding_type:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
200278f8:	b9f4ec50 	brlid	r15, -5040	// 20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>
200278fc:	80000000 	or	r0, r0, r0
20027900:	e893001c 	lwi	r4, r19, 28
20027904:	10641800 	addk	r3, r4, r3
20027908:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_vop_coding_type_supported()) {
2002790c:	b9f4ca48 	brlid	r15, -13752	// 20024354 <isSchedulable_read_vop_coding_type_supported>
20027910:	80000000 	or	r0, r0, r0
20027914:	bc030038 	beqi	r3, 56		// 2002794c
				int stop = 0;
20027918:	f8130074 	swi	r0, r19, 116
				if (stop != 0) {
2002791c:	e8730074 	lwi	r3, r19, 116
20027920:	bc030014 	beqi	r3, 20		// 20027934
					_FSM_state = my_state_read_vop_coding_type;
20027924:	30600012 	addik	r3, r0, 18
20027928:	b0002006 	imm	8198
2002792c:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20027930:	b800017c 	bri	380		// 20027aac
				}
				read_vop_coding_type_supported();
20027934:	b9f4cad8 	brlid	r15, -13608	// 2002440c <read_vop_coding_type_supported>
20027938:	80000000 	or	r0, r0, r0
				i++;
2002793c:	e873001c 	lwi	r3, r19, 28
20027940:	30630001 	addik	r3, r3, 1
20027944:	f873001c 	swi	r3, r19, 28
				goto l_read_vop_coded;
20027948:	b800fd64 	bri	-668		// 200276ac
			} else if (isSchedulable_read_vop_coding_type_unsupported()) {
2002794c:	b9f4cc0c 	brlid	r15, -13300	// 20024558 <isSchedulable_read_vop_coding_type_unsupported>
20027950:	80000000 	or	r0, r0, r0
20027954:	bc030038 	beqi	r3, 56		// 2002798c
				int stop = 0;
20027958:	f8130078 	swi	r0, r19, 120
				if (stop != 0) {
2002795c:	e8730078 	lwi	r3, r19, 120
20027960:	bc030014 	beqi	r3, 20		// 20027974
					_FSM_state = my_state_read_vop_coding_type;
20027964:	30600012 	addik	r3, r0, 18
20027968:	b0002006 	imm	8198
2002796c:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20027970:	b800013c 	bri	316		// 20027aac
				}
				read_vop_coding_type_unsupported();
20027974:	b9f4cc5c 	brlid	r15, -13220	// 200245d0 <read_vop_coding_type_unsupported>
20027978:	80000000 	or	r0, r0, r0
				i++;
2002797c:	e873001c 	lwi	r3, r19, 28
20027980:	30630001 	addik	r3, r3, 1
20027984:	f873001c 	swi	r3, r19, 28
				goto l_look_for_Sequence_Header;
20027988:	b800ee38 	bri	-4552		// 200267c0
			} else {
				_FSM_state = my_state_read_vop_coding_type;
2002798c:	30600012 	addik	r3, r0, 18
20027990:	b0002006 	imm	8198
20027994:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
				goto finished;
20027998:	b8000114 	bri	276		// 20027aac
		case my_state_read_vop_coded:
			goto l_read_vop_coded;
		case my_state_read_vop_coding_type:
			goto l_read_vop_coding_type;
		case my_state_search_start_code:
			goto l_search_start_code;
2002799c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_vop_coding_type;
				goto finished;
			}
		l_search_start_code:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
200279a0:	b9f4eba8 	brlid	r15, -5208	// 20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>
200279a4:	80000000 	or	r0, r0, r0
200279a8:	e893001c 	lwi	r4, r19, 28
200279ac:	10641800 	addk	r3, r4, r3
200279b0:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_start_code_search()) {
200279b4:	b9f4e8a4 	brlid	r15, -5980	// 20026258 <isSchedulable_start_code_search>
200279b8:	80000000 	or	r0, r0, r0
200279bc:	bc030038 	beqi	r3, 56		// 200279f4
				int stop = 0;
200279c0:	f8130044 	swi	r0, r19, 68
				if (stop != 0) {
200279c4:	e8730044 	lwi	r3, r19, 68
200279c8:	bc030014 	beqi	r3, 20		// 200279dc
					_FSM_state = my_state_search_start_code;
200279cc:	30600013 	addik	r3, r0, 19
200279d0:	b0002006 	imm	8198
200279d4:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
200279d8:	b80000d4 	bri	212		// 20027aac
				}
				start_code_search();
200279dc:	b9f4e914 	brlid	r15, -5868	// 200262f0 <start_code_search>
200279e0:	80000000 	or	r0, r0, r0
				i++;
200279e4:	e873001c 	lwi	r3, r19, 28
200279e8:	30630001 	addik	r3, r3, 1
200279ec:	f873001c 	swi	r3, r19, 28
				goto l_search_start_code;
200279f0:	b800ffb0 	bri	-80		// 200279a0
			} else if (isSchedulable_start_code_done()) {
200279f4:	b9f4e93c 	brlid	r15, -5828	// 20026330 <isSchedulable_start_code_done>
200279f8:	80000000 	or	r0, r0, r0
200279fc:	bc030038 	beqi	r3, 56		// 20027a34
				int stop = 0;
20027a00:	f8130048 	swi	r0, r19, 72
				if (stop != 0) {
20027a04:	e8730048 	lwi	r3, r19, 72
20027a08:	bc030014 	beqi	r3, 20		// 20027a1c
					_FSM_state = my_state_search_start_code;
20027a0c:	30600013 	addik	r3, r0, 19
20027a10:	b0002006 	imm	8198
20027a14:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20027a18:	b8000094 	bri	148		// 20027aac
				}
				start_code_done();
20027a1c:	b9f4e9ac 	brlid	r15, -5716	// 200263c8 <start_code_done>
20027a20:	80000000 	or	r0, r0, r0
				i++;
20027a24:	e873001c 	lwi	r3, r19, 28
20027a28:	30630001 	addik	r3, r3, 1
20027a2c:	f873001c 	swi	r3, r19, 28
				goto l_read_start_code;
20027a30:	b800f9a4 	bri	-1628		// 200273d4
			} else {
				_FSM_state = my_state_search_start_code;
20027a34:	30600013 	addik	r3, r0, 19
20027a38:	b0002006 	imm	8198
20027a3c:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
				goto finished;
20027a40:	b800006c 	bri	108		// 20027aac
		case my_state_read_vop_coding_type:
			goto l_read_vop_coding_type;
		case my_state_search_start_code:
			goto l_search_start_code;
		case my_state_undefined:
			goto l_undefined;
20027a44:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_search_start_code;
				goto finished;
			}
		l_undefined:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
20027a48:	b9f4eb00 	brlid	r15, -5376	// 20026548 <decoder_parser_parseheaders_outside_FSM_scheduler>
20027a4c:	80000000 	or	r0, r0, r0
20027a50:	e893001c 	lwi	r4, r19, 28
20027a54:	10641800 	addk	r3, r4, r3
20027a58:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_undefined()) {
20027a5c:	b9f4ea58 	brlid	r15, -5544	// 200264b4 <isSchedulable_undefined>
20027a60:	80000000 	or	r0, r0, r0
20027a64:	bc030038 	beqi	r3, 56		// 20027a9c
				int stop = 0;
20027a68:	f813003c 	swi	r0, r19, 60
				if (stop != 0) {
20027a6c:	e873003c 	lwi	r3, r19, 60
20027a70:	bc030014 	beqi	r3, 20		// 20027a84
					_FSM_state = my_state_undefined;
20027a74:	30600014 	addik	r3, r0, 20
20027a78:	b0002006 	imm	8198
20027a7c:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
					goto finished;
20027a80:	b800002c 	bri	44		// 20027aac
				}
				undefined();
20027a84:	b9f4ea68 	brlid	r15, -5528	// 200264ec <undefined>
20027a88:	80000000 	or	r0, r0, r0
				i++;
20027a8c:	e873001c 	lwi	r3, r19, 28
20027a90:	30630001 	addik	r3, r3, 1
20027a94:	f873001c 	swi	r3, r19, 28
				goto l_undefined;
20027a98:	b800ffb0 	bri	-80		// 20027a48
			} else {
				_FSM_state = my_state_undefined;
20027a9c:	30600014 	addik	r3, r0, 20
20027aa0:	b0002006 	imm	8198
20027aa4:	f8601e90 	swi	r3, r0, 7824	// 20061e90 <_FSM_state>
				goto finished;
20027aa8:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_BYTE();
20027aac:	b9f49a80 	brlid	r15, -25984	// 2002152c <read_end_BYTE>
20027ab0:	80000000 	or	r0, r0, r0
		
		write_end_BTYPE();
20027ab4:	b9f49b20 	brlid	r15, -25824	// 200215d4 <write_end_BTYPE>
20027ab8:	80000000 	or	r0, r0, r0
		write_end_MV();
20027abc:	b9f49bc0 	brlid	r15, -25664	// 2002167c <write_end_MV>
20027ac0:	80000000 	or	r0, r0, r0
		write_end_RUN();
20027ac4:	b9f49c60 	brlid	r15, -25504	// 20021724 <write_end_RUN>
20027ac8:	80000000 	or	r0, r0, r0
		write_end_VALUE();
20027acc:	b9f49d00 	brlid	r15, -25344	// 200217cc <write_end_VALUE>
20027ad0:	80000000 	or	r0, r0, r0
		write_end_LAST();
20027ad4:	b9f49da0 	brlid	r15, -25184	// 20021874 <write_end_LAST>
20027ad8:	80000000 	or	r0, r0, r0
		write_end_WIDTH();
20027adc:	b9f49e40 	brlid	r15, -25024	// 2002191c <write_end_WIDTH>
20027ae0:	80000000 	or	r0, r0, r0
		write_end_HEIGHT();
20027ae4:	b9f49ee0 	brlid	r15, -24864	// 200219c4 <write_end_HEIGHT>
20027ae8:	80000000 	or	r0, r0, r0
		write_end_QP();
20027aec:	b9f49f80 	brlid	r15, -24704	// 20021a6c <write_end_QP>
20027af0:	80000000 	or	r0, r0, r0
		
		
		return i;
20027af4:	e873001c 	lwi	r3, r19, 28
	}
20027af8:	e9e10000 	lwi	r15, r1, 0
20027afc:	10330000 	addk	r1, r19, r0
20027b00:	ea6100ac 	lwi	r19, r1, 172
20027b04:	302100b0 	addik	r1, r1, 176
20027b08:	b60f0008 	rtsd	r15, 8
20027b0c:	80000000 	or	r0, r0, r0

20027b10 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20027b10:	3021fff8 	addik	r1, r1, -8
20027b14:	fa610004 	swi	r19, r1, 4
20027b18:	12610000 	addk	r19, r1, r0
20027b1c:	f8b3000c 	swi	r5, r19, 12
20027b20:	f8d30010 	swi	r6, r19, 16
20027b24:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20027b28:	e873000c 	lwi	r3, r19, 12
20027b2c:	e8630010 	lwi	r3, r3, 16
20027b30:	e8830000 	lwi	r4, r3, 0
20027b34:	e873000c 	lwi	r3, r19, 12
20027b38:	e8a3000c 	lwi	r5, r3, 12
20027b3c:	e8730010 	lwi	r3, r19, 16
20027b40:	64630402 	bslli	r3, r3, 2
20027b44:	10651800 	addk	r3, r5, r3
20027b48:	e8630000 	lwi	r3, r3, 0
20027b4c:	14a32000 	rsubk	r5, r3, r4
20027b50:	30600001 	addik	r3, r0, 1
20027b54:	e8930014 	lwi	r4, r19, 20
20027b58:	16442803 	cmpu	r18, r4, r5
20027b5c:	bcb20008 	bgei	r18, 8		// 20027b64
20027b60:	10600000 	addk	r3, r0, r0
20027b64:	a46300ff 	andi	r3, r3, 255
}
20027b68:	10330000 	addk	r1, r19, r0
20027b6c:	ea610004 	lwi	r19, r1, 4
20027b70:	30210008 	addik	r1, r1, 8
20027b74:	b60f0008 	rtsd	r15, 8
20027b78:	80000000 	or	r0, r0, r0

20027b7c <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20027b7c:	3021fff8 	addik	r1, r1, -8
20027b80:	fa610004 	swi	r19, r1, 4
20027b84:	12610000 	addk	r19, r1, r0
20027b88:	f8b3000c 	swi	r5, r19, 12
20027b8c:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20027b90:	e873000c 	lwi	r3, r19, 12
20027b94:	e8630010 	lwi	r3, r3, 16
20027b98:	e8830000 	lwi	r4, r3, 0
20027b9c:	e873000c 	lwi	r3, r19, 12
20027ba0:	e8a3000c 	lwi	r5, r3, 12
20027ba4:	e8730010 	lwi	r3, r19, 16
20027ba8:	64630402 	bslli	r3, r3, 2
20027bac:	10651800 	addk	r3, r5, r3
20027bb0:	e8630000 	lwi	r3, r3, 0
20027bb4:	14632000 	rsubk	r3, r3, r4
}
20027bb8:	10330000 	addk	r1, r19, r0
20027bbc:	ea610004 	lwi	r19, r1, 4
20027bc0:	30210008 	addik	r1, r1, 8
20027bc4:	b60f0008 	rtsd	r15, 8
20027bc8:	80000000 	or	r0, r0, r0

20027bcc <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20027bcc:	3021fff4 	addik	r1, r1, -12
20027bd0:	fa610008 	swi	r19, r1, 8
20027bd4:	12610000 	addk	r19, r1, r0
20027bd8:	f8b30010 	swi	r5, r19, 16
20027bdc:	f8d30014 	swi	r6, r19, 20
20027be0:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20027be4:	f8130004 	swi	r0, r19, 4
20027be8:	b800005c 	bri	92		// 20027c44
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20027bec:	e8730010 	lwi	r3, r19, 16
20027bf0:	e8830000 	lwi	r4, r3, 0
20027bf4:	e8730010 	lwi	r3, r19, 16
20027bf8:	e8a3000c 	lwi	r5, r3, 12
20027bfc:	e8730004 	lwi	r3, r19, 4
20027c00:	64630402 	bslli	r3, r3, 2
20027c04:	10651800 	addk	r3, r5, r3
20027c08:	e8a30000 	lwi	r5, r3, 0
20027c0c:	e8730010 	lwi	r3, r19, 16
20027c10:	e8630010 	lwi	r3, r3, 16
20027c14:	e8630000 	lwi	r3, r3, 0
20027c18:	14632800 	rsubk	r3, r3, r5
20027c1c:	10641800 	addk	r3, r4, r3
20027c20:	30830001 	addik	r4, r3, 1
20027c24:	e8730018 	lwi	r3, r19, 24
20027c28:	16441803 	cmpu	r18, r4, r3
20027c2c:	bc52000c 	blti	r18, 12		// 20027c38
            return 0;
20027c30:	10600000 	addk	r3, r0, r0
20027c34:	b8000024 	bri	36		// 20027c58
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20027c38:	e8730004 	lwi	r3, r19, 4
20027c3c:	30630001 	addik	r3, r3, 1
20027c40:	f8730004 	swi	r3, r19, 4
20027c44:	e8930004 	lwi	r4, r19, 4
20027c48:	e8730014 	lwi	r3, r19, 20
20027c4c:	16432003 	cmpu	r18, r3, r4
20027c50:	bc52ff9c 	blti	r18, -100		// 20027bec
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20027c54:	30600001 	addik	r3, r0, 1
}
20027c58:	10330000 	addk	r1, r19, r0
20027c5c:	ea610008 	lwi	r19, r1, 8
20027c60:	3021000c 	addik	r1, r1, 12
20027c64:	b60f0008 	rtsd	r15, 8
20027c68:	80000000 	or	r0, r0, r0

20027c6c <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20027c6c:	3021ffec 	addik	r1, r1, -20
20027c70:	fa610010 	swi	r19, r1, 16
20027c74:	12610000 	addk	r19, r1, r0
20027c78:	f8b30018 	swi	r5, r19, 24
20027c7c:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20027c80:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20027c84:	f8130004 	swi	r0, r19, 4
20027c88:	b8000054 	bri	84		// 20027cdc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20027c8c:	e8730018 	lwi	r3, r19, 24
20027c90:	e8630010 	lwi	r3, r3, 16
20027c94:	e8830000 	lwi	r4, r3, 0
20027c98:	e8730018 	lwi	r3, r19, 24
20027c9c:	e8a3000c 	lwi	r5, r3, 12
20027ca0:	e8730004 	lwi	r3, r19, 4
20027ca4:	64630402 	bslli	r3, r3, 2
20027ca8:	10651800 	addk	r3, r5, r3
20027cac:	e8630000 	lwi	r3, r3, 0
20027cb0:	14632000 	rsubk	r3, r3, r4
20027cb4:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20027cb8:	e8930008 	lwi	r4, r19, 8
20027cbc:	e873000c 	lwi	r3, r19, 12
20027cc0:	16441803 	cmpu	r18, r4, r3
20027cc4:	bcb20008 	bgei	r18, 8		// 20027ccc
20027cc8:	10640000 	addk	r3, r4, r0
20027ccc:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20027cd0:	e8730004 	lwi	r3, r19, 4
20027cd4:	30630001 	addik	r3, r3, 1
20027cd8:	f8730004 	swi	r3, r19, 4
20027cdc:	e8930004 	lwi	r4, r19, 4
20027ce0:	e873001c 	lwi	r3, r19, 28
20027ce4:	16432003 	cmpu	r18, r3, r4
20027ce8:	bc52ffa4 	blti	r18, -92		// 20027c8c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20027cec:	e8730018 	lwi	r3, r19, 24
20027cf0:	e8830000 	lwi	r4, r3, 0
20027cf4:	e8730008 	lwi	r3, r19, 8
20027cf8:	14632000 	rsubk	r3, r3, r4
}
20027cfc:	10330000 	addk	r1, r19, r0
20027d00:	ea610010 	lwi	r19, r1, 16
20027d04:	30210014 	addik	r1, r1, 20
20027d08:	b60f0008 	rtsd	r15, 8
20027d0c:	80000000 	or	r0, r0, r0

20027d10 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20027d10:	3021fff4 	addik	r1, r1, -12
20027d14:	fa610008 	swi	r19, r1, 8
20027d18:	12610000 	addk	r19, r1, r0
20027d1c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20027d20:	e8730010 	lwi	r3, r19, 16
20027d24:	e8630010 	lwi	r3, r3, 16
20027d28:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20027d2c:	f8130004 	swi	r0, r19, 4
20027d30:	b8000028 	bri	40		// 20027d58
        fifo->read_inds[i] = 0;
20027d34:	e8730010 	lwi	r3, r19, 16
20027d38:	e883000c 	lwi	r4, r3, 12
20027d3c:	e8730004 	lwi	r3, r19, 4
20027d40:	64630402 	bslli	r3, r3, 2
20027d44:	10641800 	addk	r3, r4, r3
20027d48:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20027d4c:	e8730004 	lwi	r3, r19, 4
20027d50:	30630001 	addik	r3, r3, 1
20027d54:	f8730004 	swi	r3, r19, 4
20027d58:	e8730010 	lwi	r3, r19, 16
20027d5c:	e8830008 	lwi	r4, r3, 8
20027d60:	e8730004 	lwi	r3, r19, 4
20027d64:	16441803 	cmpu	r18, r4, r3
20027d68:	bc52ffcc 	blti	r18, -52		// 20027d34
        fifo->read_inds[i] = 0;
    }
}
20027d6c:	10330000 	addk	r1, r19, r0
20027d70:	ea610008 	lwi	r19, r1, 8
20027d74:	3021000c 	addik	r1, r1, 12
20027d78:	b60f0008 	rtsd	r15, 8
20027d7c:	80000000 	or	r0, r0, r0

20027d80 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20027d80:	3021fff4 	addik	r1, r1, -12
20027d84:	fa610008 	swi	r19, r1, 8
20027d88:	12610000 	addk	r19, r1, r0
20027d8c:	f8b30010 	swi	r5, r19, 16
20027d90:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20027d94:	e8730010 	lwi	r3, r19, 16
20027d98:	e8830004 	lwi	r4, r3, 4
20027d9c:	e8730010 	lwi	r3, r19, 16
20027da0:	e8a3000c 	lwi	r5, r3, 12
20027da4:	e8730014 	lwi	r3, r19, 20
20027da8:	64630402 	bslli	r3, r3, 2
20027dac:	10651800 	addk	r3, r5, r3
20027db0:	e8a30000 	lwi	r5, r3, 0
20027db4:	e8730010 	lwi	r3, r19, 16
20027db8:	e8630000 	lwi	r3, r3, 0
20027dbc:	3063ffff 	addik	r3, r3, -1
20027dc0:	84651800 	and	r3, r5, r3
20027dc4:	10641800 	addk	r3, r4, r3
20027dc8:	e0630000 	lbui	r3, r3, 0
20027dcc:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20027dd0:	e8730010 	lwi	r3, r19, 16
20027dd4:	e883000c 	lwi	r4, r3, 12
20027dd8:	e8730014 	lwi	r3, r19, 20
20027ddc:	64630402 	bslli	r3, r3, 2
20027de0:	10641800 	addk	r3, r4, r3
20027de4:	e8830000 	lwi	r4, r3, 0
20027de8:	30840001 	addik	r4, r4, 1
20027dec:	f8830000 	swi	r4, r3, 0
    return value;
20027df0:	e0730004 	lbui	r3, r19, 4
20027df4:	90630060 	sext8	r3, r3
}
20027df8:	10330000 	addk	r1, r19, r0
20027dfc:	ea610008 	lwi	r19, r1, 8
20027e00:	3021000c 	addik	r1, r1, 12
20027e04:	b60f0008 	rtsd	r15, 8
20027e08:	80000000 	or	r0, r0, r0

20027e0c <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20027e0c:	3021fff8 	addik	r1, r1, -8
20027e10:	fa610004 	swi	r19, r1, 4
20027e14:	12610000 	addk	r19, r1, r0
20027e18:	f8b3000c 	swi	r5, r19, 12
20027e1c:	10660000 	addk	r3, r6, r0
20027e20:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20027e24:	e873000c 	lwi	r3, r19, 12
20027e28:	e8830004 	lwi	r4, r3, 4
20027e2c:	e873000c 	lwi	r3, r19, 12
20027e30:	e8630010 	lwi	r3, r3, 16
20027e34:	e8a30000 	lwi	r5, r3, 0
20027e38:	e873000c 	lwi	r3, r19, 12
20027e3c:	e8630000 	lwi	r3, r3, 0
20027e40:	3063ffff 	addik	r3, r3, -1
20027e44:	84651800 	and	r3, r5, r3
20027e48:	10641800 	addk	r3, r4, r3
20027e4c:	e0930010 	lbui	r4, r19, 16
20027e50:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20027e54:	e873000c 	lwi	r3, r19, 12
20027e58:	e8630010 	lwi	r3, r3, 16
20027e5c:	e8830000 	lwi	r4, r3, 0
20027e60:	30840001 	addik	r4, r4, 1
20027e64:	f8830000 	swi	r4, r3, 0
}
20027e68:	10330000 	addk	r1, r19, r0
20027e6c:	ea610004 	lwi	r19, r1, 4
20027e70:	30210008 	addik	r1, r1, 8
20027e74:	b60f0008 	rtsd	r15, 8
20027e78:	80000000 	or	r0, r0, r0

20027e7c <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20027e7c:	3021fff8 	addik	r1, r1, -8
20027e80:	fa610004 	swi	r19, r1, 4
20027e84:	12610000 	addk	r19, r1, r0
20027e88:	f8b3000c 	swi	r5, r19, 12
20027e8c:	f8d30010 	swi	r6, r19, 16
20027e90:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20027e94:	e873000c 	lwi	r3, r19, 12
20027e98:	e8630010 	lwi	r3, r3, 16
20027e9c:	e8830000 	lwi	r4, r3, 0
20027ea0:	e873000c 	lwi	r3, r19, 12
20027ea4:	e8a3000c 	lwi	r5, r3, 12
20027ea8:	e8730010 	lwi	r3, r19, 16
20027eac:	64630402 	bslli	r3, r3, 2
20027eb0:	10651800 	addk	r3, r5, r3
20027eb4:	e8630000 	lwi	r3, r3, 0
20027eb8:	14a32000 	rsubk	r5, r3, r4
20027ebc:	30600001 	addik	r3, r0, 1
20027ec0:	e8930014 	lwi	r4, r19, 20
20027ec4:	16442803 	cmpu	r18, r4, r5
20027ec8:	bcb20008 	bgei	r18, 8		// 20027ed0
20027ecc:	10600000 	addk	r3, r0, r0
20027ed0:	a46300ff 	andi	r3, r3, 255
}
20027ed4:	10330000 	addk	r1, r19, r0
20027ed8:	ea610004 	lwi	r19, r1, 4
20027edc:	30210008 	addik	r1, r1, 8
20027ee0:	b60f0008 	rtsd	r15, 8
20027ee4:	80000000 	or	r0, r0, r0

20027ee8 <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20027ee8:	3021fff8 	addik	r1, r1, -8
20027eec:	fa610004 	swi	r19, r1, 4
20027ef0:	12610000 	addk	r19, r1, r0
20027ef4:	f8b3000c 	swi	r5, r19, 12
20027ef8:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20027efc:	e873000c 	lwi	r3, r19, 12
20027f00:	e8630010 	lwi	r3, r3, 16
20027f04:	e8830000 	lwi	r4, r3, 0
20027f08:	e873000c 	lwi	r3, r19, 12
20027f0c:	e8a3000c 	lwi	r5, r3, 12
20027f10:	e8730010 	lwi	r3, r19, 16
20027f14:	64630402 	bslli	r3, r3, 2
20027f18:	10651800 	addk	r3, r5, r3
20027f1c:	e8630000 	lwi	r3, r3, 0
20027f20:	14632000 	rsubk	r3, r3, r4
}
20027f24:	10330000 	addk	r1, r19, r0
20027f28:	ea610004 	lwi	r19, r1, 4
20027f2c:	30210008 	addik	r1, r1, 8
20027f30:	b60f0008 	rtsd	r15, 8
20027f34:	80000000 	or	r0, r0, r0

20027f38 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20027f38:	3021fff4 	addik	r1, r1, -12
20027f3c:	fa610008 	swi	r19, r1, 8
20027f40:	12610000 	addk	r19, r1, r0
20027f44:	f8b30010 	swi	r5, r19, 16
20027f48:	f8d30014 	swi	r6, r19, 20
20027f4c:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20027f50:	f8130004 	swi	r0, r19, 4
20027f54:	b800005c 	bri	92		// 20027fb0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20027f58:	e8730010 	lwi	r3, r19, 16
20027f5c:	e8830000 	lwi	r4, r3, 0
20027f60:	e8730010 	lwi	r3, r19, 16
20027f64:	e8a3000c 	lwi	r5, r3, 12
20027f68:	e8730004 	lwi	r3, r19, 4
20027f6c:	64630402 	bslli	r3, r3, 2
20027f70:	10651800 	addk	r3, r5, r3
20027f74:	e8a30000 	lwi	r5, r3, 0
20027f78:	e8730010 	lwi	r3, r19, 16
20027f7c:	e8630010 	lwi	r3, r3, 16
20027f80:	e8630000 	lwi	r3, r3, 0
20027f84:	14632800 	rsubk	r3, r3, r5
20027f88:	10641800 	addk	r3, r4, r3
20027f8c:	30830001 	addik	r4, r3, 1
20027f90:	e8730018 	lwi	r3, r19, 24
20027f94:	16441803 	cmpu	r18, r4, r3
20027f98:	bc52000c 	blti	r18, 12		// 20027fa4
            return 0;
20027f9c:	10600000 	addk	r3, r0, r0
20027fa0:	b8000024 	bri	36		// 20027fc4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20027fa4:	e8730004 	lwi	r3, r19, 4
20027fa8:	30630001 	addik	r3, r3, 1
20027fac:	f8730004 	swi	r3, r19, 4
20027fb0:	e8930004 	lwi	r4, r19, 4
20027fb4:	e8730014 	lwi	r3, r19, 20
20027fb8:	16432003 	cmpu	r18, r3, r4
20027fbc:	bc52ff9c 	blti	r18, -100		// 20027f58
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20027fc0:	30600001 	addik	r3, r0, 1
}
20027fc4:	10330000 	addk	r1, r19, r0
20027fc8:	ea610008 	lwi	r19, r1, 8
20027fcc:	3021000c 	addik	r1, r1, 12
20027fd0:	b60f0008 	rtsd	r15, 8
20027fd4:	80000000 	or	r0, r0, r0

20027fd8 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20027fd8:	3021ffec 	addik	r1, r1, -20
20027fdc:	fa610010 	swi	r19, r1, 16
20027fe0:	12610000 	addk	r19, r1, r0
20027fe4:	f8b30018 	swi	r5, r19, 24
20027fe8:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20027fec:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20027ff0:	f8130004 	swi	r0, r19, 4
20027ff4:	b8000054 	bri	84		// 20028048
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20027ff8:	e8730018 	lwi	r3, r19, 24
20027ffc:	e8630010 	lwi	r3, r3, 16
20028000:	e8830000 	lwi	r4, r3, 0
20028004:	e8730018 	lwi	r3, r19, 24
20028008:	e8a3000c 	lwi	r5, r3, 12
2002800c:	e8730004 	lwi	r3, r19, 4
20028010:	64630402 	bslli	r3, r3, 2
20028014:	10651800 	addk	r3, r5, r3
20028018:	e8630000 	lwi	r3, r3, 0
2002801c:	14632000 	rsubk	r3, r3, r4
20028020:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20028024:	e8930008 	lwi	r4, r19, 8
20028028:	e873000c 	lwi	r3, r19, 12
2002802c:	16441803 	cmpu	r18, r4, r3
20028030:	bcb20008 	bgei	r18, 8		// 20028038
20028034:	10640000 	addk	r3, r4, r0
20028038:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002803c:	e8730004 	lwi	r3, r19, 4
20028040:	30630001 	addik	r3, r3, 1
20028044:	f8730004 	swi	r3, r19, 4
20028048:	e8930004 	lwi	r4, r19, 4
2002804c:	e873001c 	lwi	r3, r19, 28
20028050:	16432003 	cmpu	r18, r3, r4
20028054:	bc52ffa4 	blti	r18, -92		// 20027ff8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20028058:	e8730018 	lwi	r3, r19, 24
2002805c:	e8830000 	lwi	r4, r3, 0
20028060:	e8730008 	lwi	r3, r19, 8
20028064:	14632000 	rsubk	r3, r3, r4
}
20028068:	10330000 	addk	r1, r19, r0
2002806c:	ea610010 	lwi	r19, r1, 16
20028070:	30210014 	addik	r1, r1, 20
20028074:	b60f0008 	rtsd	r15, 8
20028078:	80000000 	or	r0, r0, r0

2002807c <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002807c:	3021fff4 	addik	r1, r1, -12
20028080:	fa610008 	swi	r19, r1, 8
20028084:	12610000 	addk	r19, r1, r0
20028088:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2002808c:	e8730010 	lwi	r3, r19, 16
20028090:	e8630010 	lwi	r3, r3, 16
20028094:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20028098:	f8130004 	swi	r0, r19, 4
2002809c:	b8000028 	bri	40		// 200280c4
        fifo->read_inds[i] = 0;
200280a0:	e8730010 	lwi	r3, r19, 16
200280a4:	e883000c 	lwi	r4, r3, 12
200280a8:	e8730004 	lwi	r3, r19, 4
200280ac:	64630402 	bslli	r3, r3, 2
200280b0:	10641800 	addk	r3, r4, r3
200280b4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200280b8:	e8730004 	lwi	r3, r19, 4
200280bc:	30630001 	addik	r3, r3, 1
200280c0:	f8730004 	swi	r3, r19, 4
200280c4:	e8730010 	lwi	r3, r19, 16
200280c8:	e8830008 	lwi	r4, r3, 8
200280cc:	e8730004 	lwi	r3, r19, 4
200280d0:	16441803 	cmpu	r18, r4, r3
200280d4:	bc52ffcc 	blti	r18, -52		// 200280a0
        fifo->read_inds[i] = 0;
    }
}
200280d8:	10330000 	addk	r1, r19, r0
200280dc:	ea610008 	lwi	r19, r1, 8
200280e0:	3021000c 	addik	r1, r1, 12
200280e4:	b60f0008 	rtsd	r15, 8
200280e8:	80000000 	or	r0, r0, r0

200280ec <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200280ec:	3021fff4 	addik	r1, r1, -12
200280f0:	fa610008 	swi	r19, r1, 8
200280f4:	12610000 	addk	r19, r1, r0
200280f8:	f8b30010 	swi	r5, r19, 16
200280fc:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20028100:	e8730010 	lwi	r3, r19, 16
20028104:	e8830004 	lwi	r4, r3, 4
20028108:	e8730010 	lwi	r3, r19, 16
2002810c:	e8a3000c 	lwi	r5, r3, 12
20028110:	e8730014 	lwi	r3, r19, 20
20028114:	64630402 	bslli	r3, r3, 2
20028118:	10651800 	addk	r3, r5, r3
2002811c:	e8a30000 	lwi	r5, r3, 0
20028120:	e8730010 	lwi	r3, r19, 16
20028124:	e8630000 	lwi	r3, r3, 0
20028128:	3063ffff 	addik	r3, r3, -1
2002812c:	84651800 	and	r3, r5, r3
20028130:	10631800 	addk	r3, r3, r3
20028134:	10641800 	addk	r3, r4, r3
20028138:	e4630000 	lhui	r3, r3, 0
2002813c:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20028140:	e8730010 	lwi	r3, r19, 16
20028144:	e883000c 	lwi	r4, r3, 12
20028148:	e8730014 	lwi	r3, r19, 20
2002814c:	64630402 	bslli	r3, r3, 2
20028150:	10641800 	addk	r3, r4, r3
20028154:	e8830000 	lwi	r4, r3, 0
20028158:	30840001 	addik	r4, r4, 1
2002815c:	f8830000 	swi	r4, r3, 0
    return value;
20028160:	e4730004 	lhui	r3, r19, 4
20028164:	90630061 	sext16	r3, r3
}
20028168:	10330000 	addk	r1, r19, r0
2002816c:	ea610008 	lwi	r19, r1, 8
20028170:	3021000c 	addik	r1, r1, 12
20028174:	b60f0008 	rtsd	r15, 8
20028178:	80000000 	or	r0, r0, r0

2002817c <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002817c:	3021fff8 	addik	r1, r1, -8
20028180:	fa610004 	swi	r19, r1, 4
20028184:	12610000 	addk	r19, r1, r0
20028188:	f8b3000c 	swi	r5, r19, 12
2002818c:	10660000 	addk	r3, r6, r0
20028190:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20028194:	e873000c 	lwi	r3, r19, 12
20028198:	e8830004 	lwi	r4, r3, 4
2002819c:	e873000c 	lwi	r3, r19, 12
200281a0:	e8630010 	lwi	r3, r3, 16
200281a4:	e8a30000 	lwi	r5, r3, 0
200281a8:	e873000c 	lwi	r3, r19, 12
200281ac:	e8630000 	lwi	r3, r3, 0
200281b0:	3063ffff 	addik	r3, r3, -1
200281b4:	84651800 	and	r3, r5, r3
200281b8:	10631800 	addk	r3, r3, r3
200281bc:	10641800 	addk	r3, r4, r3
200281c0:	e4930010 	lhui	r4, r19, 16
200281c4:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
200281c8:	e873000c 	lwi	r3, r19, 12
200281cc:	e8630010 	lwi	r3, r3, 16
200281d0:	e8830000 	lwi	r4, r3, 0
200281d4:	30840001 	addik	r4, r4, 1
200281d8:	f8830000 	swi	r4, r3, 0
}
200281dc:	10330000 	addk	r1, r19, r0
200281e0:	ea610004 	lwi	r19, r1, 4
200281e4:	30210008 	addik	r1, r1, 8
200281e8:	b60f0008 	rtsd	r15, 8
200281ec:	80000000 	or	r0, r0, r0

200281f0 <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200281f0:	3021fff8 	addik	r1, r1, -8
200281f4:	fa610004 	swi	r19, r1, 4
200281f8:	12610000 	addk	r19, r1, r0
200281fc:	f8b3000c 	swi	r5, r19, 12
20028200:	f8d30010 	swi	r6, r19, 16
20028204:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20028208:	e873000c 	lwi	r3, r19, 12
2002820c:	e8630010 	lwi	r3, r3, 16
20028210:	e8830000 	lwi	r4, r3, 0
20028214:	e873000c 	lwi	r3, r19, 12
20028218:	e8a3000c 	lwi	r5, r3, 12
2002821c:	e8730010 	lwi	r3, r19, 16
20028220:	64630402 	bslli	r3, r3, 2
20028224:	10651800 	addk	r3, r5, r3
20028228:	e8630000 	lwi	r3, r3, 0
2002822c:	14a32000 	rsubk	r5, r3, r4
20028230:	30600001 	addik	r3, r0, 1
20028234:	e8930014 	lwi	r4, r19, 20
20028238:	16442803 	cmpu	r18, r4, r5
2002823c:	bcb20008 	bgei	r18, 8		// 20028244
20028240:	10600000 	addk	r3, r0, r0
20028244:	a46300ff 	andi	r3, r3, 255
}
20028248:	10330000 	addk	r1, r19, r0
2002824c:	ea610004 	lwi	r19, r1, 4
20028250:	30210008 	addik	r1, r1, 8
20028254:	b60f0008 	rtsd	r15, 8
20028258:	80000000 	or	r0, r0, r0

2002825c <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002825c:	3021fff8 	addik	r1, r1, -8
20028260:	fa610004 	swi	r19, r1, 4
20028264:	12610000 	addk	r19, r1, r0
20028268:	f8b3000c 	swi	r5, r19, 12
2002826c:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20028270:	e873000c 	lwi	r3, r19, 12
20028274:	e8630010 	lwi	r3, r3, 16
20028278:	e8830000 	lwi	r4, r3, 0
2002827c:	e873000c 	lwi	r3, r19, 12
20028280:	e8a3000c 	lwi	r5, r3, 12
20028284:	e8730010 	lwi	r3, r19, 16
20028288:	64630402 	bslli	r3, r3, 2
2002828c:	10651800 	addk	r3, r5, r3
20028290:	e8630000 	lwi	r3, r3, 0
20028294:	14632000 	rsubk	r3, r3, r4
}
20028298:	10330000 	addk	r1, r19, r0
2002829c:	ea610004 	lwi	r19, r1, 4
200282a0:	30210008 	addik	r1, r1, 8
200282a4:	b60f0008 	rtsd	r15, 8
200282a8:	80000000 	or	r0, r0, r0

200282ac <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200282ac:	3021fff4 	addik	r1, r1, -12
200282b0:	fa610008 	swi	r19, r1, 8
200282b4:	12610000 	addk	r19, r1, r0
200282b8:	f8b30010 	swi	r5, r19, 16
200282bc:	f8d30014 	swi	r6, r19, 20
200282c0:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200282c4:	f8130004 	swi	r0, r19, 4
200282c8:	b800005c 	bri	92		// 20028324
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200282cc:	e8730010 	lwi	r3, r19, 16
200282d0:	e8830000 	lwi	r4, r3, 0
200282d4:	e8730010 	lwi	r3, r19, 16
200282d8:	e8a3000c 	lwi	r5, r3, 12
200282dc:	e8730004 	lwi	r3, r19, 4
200282e0:	64630402 	bslli	r3, r3, 2
200282e4:	10651800 	addk	r3, r5, r3
200282e8:	e8a30000 	lwi	r5, r3, 0
200282ec:	e8730010 	lwi	r3, r19, 16
200282f0:	e8630010 	lwi	r3, r3, 16
200282f4:	e8630000 	lwi	r3, r3, 0
200282f8:	14632800 	rsubk	r3, r3, r5
200282fc:	10641800 	addk	r3, r4, r3
20028300:	30830001 	addik	r4, r3, 1
20028304:	e8730018 	lwi	r3, r19, 24
20028308:	16441803 	cmpu	r18, r4, r3
2002830c:	bc52000c 	blti	r18, 12		// 20028318
            return 0;
20028310:	10600000 	addk	r3, r0, r0
20028314:	b8000024 	bri	36		// 20028338
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20028318:	e8730004 	lwi	r3, r19, 4
2002831c:	30630001 	addik	r3, r3, 1
20028320:	f8730004 	swi	r3, r19, 4
20028324:	e8930004 	lwi	r4, r19, 4
20028328:	e8730014 	lwi	r3, r19, 20
2002832c:	16432003 	cmpu	r18, r3, r4
20028330:	bc52ff9c 	blti	r18, -100		// 200282cc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20028334:	30600001 	addik	r3, r0, 1
}
20028338:	10330000 	addk	r1, r19, r0
2002833c:	ea610008 	lwi	r19, r1, 8
20028340:	3021000c 	addik	r1, r1, 12
20028344:	b60f0008 	rtsd	r15, 8
20028348:	80000000 	or	r0, r0, r0

2002834c <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002834c:	3021ffec 	addik	r1, r1, -20
20028350:	fa610010 	swi	r19, r1, 16
20028354:	12610000 	addk	r19, r1, r0
20028358:	f8b30018 	swi	r5, r19, 24
2002835c:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20028360:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20028364:	f8130004 	swi	r0, r19, 4
20028368:	b8000054 	bri	84		// 200283bc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2002836c:	e8730018 	lwi	r3, r19, 24
20028370:	e8630010 	lwi	r3, r3, 16
20028374:	e8830000 	lwi	r4, r3, 0
20028378:	e8730018 	lwi	r3, r19, 24
2002837c:	e8a3000c 	lwi	r5, r3, 12
20028380:	e8730004 	lwi	r3, r19, 4
20028384:	64630402 	bslli	r3, r3, 2
20028388:	10651800 	addk	r3, r5, r3
2002838c:	e8630000 	lwi	r3, r3, 0
20028390:	14632000 	rsubk	r3, r3, r4
20028394:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20028398:	e8930008 	lwi	r4, r19, 8
2002839c:	e873000c 	lwi	r3, r19, 12
200283a0:	16441803 	cmpu	r18, r4, r3
200283a4:	bcb20008 	bgei	r18, 8		// 200283ac
200283a8:	10640000 	addk	r3, r4, r0
200283ac:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200283b0:	e8730004 	lwi	r3, r19, 4
200283b4:	30630001 	addik	r3, r3, 1
200283b8:	f8730004 	swi	r3, r19, 4
200283bc:	e8930004 	lwi	r4, r19, 4
200283c0:	e873001c 	lwi	r3, r19, 28
200283c4:	16432003 	cmpu	r18, r3, r4
200283c8:	bc52ffa4 	blti	r18, -92		// 2002836c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200283cc:	e8730018 	lwi	r3, r19, 24
200283d0:	e8830000 	lwi	r4, r3, 0
200283d4:	e8730008 	lwi	r3, r19, 8
200283d8:	14632000 	rsubk	r3, r3, r4
}
200283dc:	10330000 	addk	r1, r19, r0
200283e0:	ea610010 	lwi	r19, r1, 16
200283e4:	30210014 	addik	r1, r1, 20
200283e8:	b60f0008 	rtsd	r15, 8
200283ec:	80000000 	or	r0, r0, r0

200283f0 <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200283f0:	3021fff4 	addik	r1, r1, -12
200283f4:	fa610008 	swi	r19, r1, 8
200283f8:	12610000 	addk	r19, r1, r0
200283fc:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20028400:	e8730010 	lwi	r3, r19, 16
20028404:	e8630010 	lwi	r3, r3, 16
20028408:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002840c:	f8130004 	swi	r0, r19, 4
20028410:	b8000028 	bri	40		// 20028438
        fifo->read_inds[i] = 0;
20028414:	e8730010 	lwi	r3, r19, 16
20028418:	e883000c 	lwi	r4, r3, 12
2002841c:	e8730004 	lwi	r3, r19, 4
20028420:	64630402 	bslli	r3, r3, 2
20028424:	10641800 	addk	r3, r4, r3
20028428:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002842c:	e8730004 	lwi	r3, r19, 4
20028430:	30630001 	addik	r3, r3, 1
20028434:	f8730004 	swi	r3, r19, 4
20028438:	e8730010 	lwi	r3, r19, 16
2002843c:	e8830008 	lwi	r4, r3, 8
20028440:	e8730004 	lwi	r3, r19, 4
20028444:	16441803 	cmpu	r18, r4, r3
20028448:	bc52ffcc 	blti	r18, -52		// 20028414
        fifo->read_inds[i] = 0;
    }
}
2002844c:	10330000 	addk	r1, r19, r0
20028450:	ea610008 	lwi	r19, r1, 8
20028454:	3021000c 	addik	r1, r1, 12
20028458:	b60f0008 	rtsd	r15, 8
2002845c:	80000000 	or	r0, r0, r0

20028460 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20028460:	3021fff4 	addik	r1, r1, -12
20028464:	fa610008 	swi	r19, r1, 8
20028468:	12610000 	addk	r19, r1, r0
2002846c:	f8b30010 	swi	r5, r19, 16
20028470:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20028474:	e8730010 	lwi	r3, r19, 16
20028478:	e8830004 	lwi	r4, r3, 4
2002847c:	e8730010 	lwi	r3, r19, 16
20028480:	e8a3000c 	lwi	r5, r3, 12
20028484:	e8730014 	lwi	r3, r19, 20
20028488:	64630402 	bslli	r3, r3, 2
2002848c:	10651800 	addk	r3, r5, r3
20028490:	e8a30000 	lwi	r5, r3, 0
20028494:	e8730010 	lwi	r3, r19, 16
20028498:	e8630000 	lwi	r3, r3, 0
2002849c:	3063ffff 	addik	r3, r3, -1
200284a0:	84651800 	and	r3, r5, r3
200284a4:	64630402 	bslli	r3, r3, 2
200284a8:	10641800 	addk	r3, r4, r3
200284ac:	e8630000 	lwi	r3, r3, 0
200284b0:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200284b4:	e8730010 	lwi	r3, r19, 16
200284b8:	e883000c 	lwi	r4, r3, 12
200284bc:	e8730014 	lwi	r3, r19, 20
200284c0:	64630402 	bslli	r3, r3, 2
200284c4:	10641800 	addk	r3, r4, r3
200284c8:	e8830000 	lwi	r4, r3, 0
200284cc:	30840001 	addik	r4, r4, 1
200284d0:	f8830000 	swi	r4, r3, 0
    return value;
200284d4:	e8730004 	lwi	r3, r19, 4
}
200284d8:	10330000 	addk	r1, r19, r0
200284dc:	ea610008 	lwi	r19, r1, 8
200284e0:	3021000c 	addik	r1, r1, 12
200284e4:	b60f0008 	rtsd	r15, 8
200284e8:	80000000 	or	r0, r0, r0

200284ec <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200284ec:	3021fff8 	addik	r1, r1, -8
200284f0:	fa610004 	swi	r19, r1, 4
200284f4:	12610000 	addk	r19, r1, r0
200284f8:	f8b3000c 	swi	r5, r19, 12
200284fc:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20028500:	e873000c 	lwi	r3, r19, 12
20028504:	e8830004 	lwi	r4, r3, 4
20028508:	e873000c 	lwi	r3, r19, 12
2002850c:	e8630010 	lwi	r3, r3, 16
20028510:	e8a30000 	lwi	r5, r3, 0
20028514:	e873000c 	lwi	r3, r19, 12
20028518:	e8630000 	lwi	r3, r3, 0
2002851c:	3063ffff 	addik	r3, r3, -1
20028520:	84651800 	and	r3, r5, r3
20028524:	64630402 	bslli	r3, r3, 2
20028528:	10641800 	addk	r3, r4, r3
2002852c:	e8930010 	lwi	r4, r19, 16
20028530:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20028534:	e873000c 	lwi	r3, r19, 12
20028538:	e8630010 	lwi	r3, r3, 16
2002853c:	e8830000 	lwi	r4, r3, 0
20028540:	30840001 	addik	r4, r4, 1
20028544:	f8830000 	swi	r4, r3, 0
}
20028548:	10330000 	addk	r1, r19, r0
2002854c:	ea610004 	lwi	r19, r1, 4
20028550:	30210008 	addik	r1, r1, 8
20028554:	b60f0008 	rtsd	r15, 8
20028558:	80000000 	or	r0, r0, r0

2002855c <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002855c:	3021fff8 	addik	r1, r1, -8
20028560:	fa610004 	swi	r19, r1, 4
20028564:	12610000 	addk	r19, r1, r0
20028568:	f8b3000c 	swi	r5, r19, 12
2002856c:	f8d30010 	swi	r6, r19, 16
20028570:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20028574:	e873000c 	lwi	r3, r19, 12
20028578:	e8630010 	lwi	r3, r3, 16
2002857c:	e8830000 	lwi	r4, r3, 0
20028580:	e873000c 	lwi	r3, r19, 12
20028584:	e8a3000c 	lwi	r5, r3, 12
20028588:	e8730010 	lwi	r3, r19, 16
2002858c:	64630402 	bslli	r3, r3, 2
20028590:	10651800 	addk	r3, r5, r3
20028594:	e8630000 	lwi	r3, r3, 0
20028598:	14a32000 	rsubk	r5, r3, r4
2002859c:	30600001 	addik	r3, r0, 1
200285a0:	e8930014 	lwi	r4, r19, 20
200285a4:	16442803 	cmpu	r18, r4, r5
200285a8:	bcb20008 	bgei	r18, 8		// 200285b0
200285ac:	10600000 	addk	r3, r0, r0
200285b0:	a46300ff 	andi	r3, r3, 255
}
200285b4:	10330000 	addk	r1, r19, r0
200285b8:	ea610004 	lwi	r19, r1, 4
200285bc:	30210008 	addik	r1, r1, 8
200285c0:	b60f0008 	rtsd	r15, 8
200285c4:	80000000 	or	r0, r0, r0

200285c8 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200285c8:	3021fff8 	addik	r1, r1, -8
200285cc:	fa610004 	swi	r19, r1, 4
200285d0:	12610000 	addk	r19, r1, r0
200285d4:	f8b3000c 	swi	r5, r19, 12
200285d8:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200285dc:	e873000c 	lwi	r3, r19, 12
200285e0:	e8630010 	lwi	r3, r3, 16
200285e4:	e8830000 	lwi	r4, r3, 0
200285e8:	e873000c 	lwi	r3, r19, 12
200285ec:	e8a3000c 	lwi	r5, r3, 12
200285f0:	e8730010 	lwi	r3, r19, 16
200285f4:	64630402 	bslli	r3, r3, 2
200285f8:	10651800 	addk	r3, r5, r3
200285fc:	e8630000 	lwi	r3, r3, 0
20028600:	14632000 	rsubk	r3, r3, r4
}
20028604:	10330000 	addk	r1, r19, r0
20028608:	ea610004 	lwi	r19, r1, 4
2002860c:	30210008 	addik	r1, r1, 8
20028610:	b60f0008 	rtsd	r15, 8
20028614:	80000000 	or	r0, r0, r0

20028618 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20028618:	3021fff4 	addik	r1, r1, -12
2002861c:	fa610008 	swi	r19, r1, 8
20028620:	12610000 	addk	r19, r1, r0
20028624:	f8b30010 	swi	r5, r19, 16
20028628:	f8d30014 	swi	r6, r19, 20
2002862c:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20028630:	f8130004 	swi	r0, r19, 4
20028634:	b800005c 	bri	92		// 20028690
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20028638:	e8730010 	lwi	r3, r19, 16
2002863c:	e8830000 	lwi	r4, r3, 0
20028640:	e8730010 	lwi	r3, r19, 16
20028644:	e8a3000c 	lwi	r5, r3, 12
20028648:	e8730004 	lwi	r3, r19, 4
2002864c:	64630402 	bslli	r3, r3, 2
20028650:	10651800 	addk	r3, r5, r3
20028654:	e8a30000 	lwi	r5, r3, 0
20028658:	e8730010 	lwi	r3, r19, 16
2002865c:	e8630010 	lwi	r3, r3, 16
20028660:	e8630000 	lwi	r3, r3, 0
20028664:	14632800 	rsubk	r3, r3, r5
20028668:	10641800 	addk	r3, r4, r3
2002866c:	30830001 	addik	r4, r3, 1
20028670:	e8730018 	lwi	r3, r19, 24
20028674:	16441803 	cmpu	r18, r4, r3
20028678:	bc52000c 	blti	r18, 12		// 20028684
            return 0;
2002867c:	10600000 	addk	r3, r0, r0
20028680:	b8000024 	bri	36		// 200286a4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20028684:	e8730004 	lwi	r3, r19, 4
20028688:	30630001 	addik	r3, r3, 1
2002868c:	f8730004 	swi	r3, r19, 4
20028690:	e8930004 	lwi	r4, r19, 4
20028694:	e8730014 	lwi	r3, r19, 20
20028698:	16432003 	cmpu	r18, r3, r4
2002869c:	bc52ff9c 	blti	r18, -100		// 20028638
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200286a0:	30600001 	addik	r3, r0, 1
}
200286a4:	10330000 	addk	r1, r19, r0
200286a8:	ea610008 	lwi	r19, r1, 8
200286ac:	3021000c 	addik	r1, r1, 12
200286b0:	b60f0008 	rtsd	r15, 8
200286b4:	80000000 	or	r0, r0, r0

200286b8 <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200286b8:	3021ffec 	addik	r1, r1, -20
200286bc:	fa610010 	swi	r19, r1, 16
200286c0:	12610000 	addk	r19, r1, r0
200286c4:	f8b30018 	swi	r5, r19, 24
200286c8:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200286cc:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200286d0:	f8130004 	swi	r0, r19, 4
200286d4:	b8000054 	bri	84		// 20028728
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200286d8:	e8730018 	lwi	r3, r19, 24
200286dc:	e8630010 	lwi	r3, r3, 16
200286e0:	e8830000 	lwi	r4, r3, 0
200286e4:	e8730018 	lwi	r3, r19, 24
200286e8:	e8a3000c 	lwi	r5, r3, 12
200286ec:	e8730004 	lwi	r3, r19, 4
200286f0:	64630402 	bslli	r3, r3, 2
200286f4:	10651800 	addk	r3, r5, r3
200286f8:	e8630000 	lwi	r3, r3, 0
200286fc:	14632000 	rsubk	r3, r3, r4
20028700:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20028704:	e8930008 	lwi	r4, r19, 8
20028708:	e873000c 	lwi	r3, r19, 12
2002870c:	16441803 	cmpu	r18, r4, r3
20028710:	bcb20008 	bgei	r18, 8		// 20028718
20028714:	10640000 	addk	r3, r4, r0
20028718:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002871c:	e8730004 	lwi	r3, r19, 4
20028720:	30630001 	addik	r3, r3, 1
20028724:	f8730004 	swi	r3, r19, 4
20028728:	e8930004 	lwi	r4, r19, 4
2002872c:	e873001c 	lwi	r3, r19, 28
20028730:	16432003 	cmpu	r18, r3, r4
20028734:	bc52ffa4 	blti	r18, -92		// 200286d8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20028738:	e8730018 	lwi	r3, r19, 24
2002873c:	e8830000 	lwi	r4, r3, 0
20028740:	e8730008 	lwi	r3, r19, 8
20028744:	14632000 	rsubk	r3, r3, r4
}
20028748:	10330000 	addk	r1, r19, r0
2002874c:	ea610010 	lwi	r19, r1, 16
20028750:	30210014 	addik	r1, r1, 20
20028754:	b60f0008 	rtsd	r15, 8
20028758:	80000000 	or	r0, r0, r0

2002875c <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002875c:	3021fff4 	addik	r1, r1, -12
20028760:	fa610008 	swi	r19, r1, 8
20028764:	12610000 	addk	r19, r1, r0
20028768:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2002876c:	e8730010 	lwi	r3, r19, 16
20028770:	e8630010 	lwi	r3, r3, 16
20028774:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20028778:	f8130004 	swi	r0, r19, 4
2002877c:	b8000028 	bri	40		// 200287a4
        fifo->read_inds[i] = 0;
20028780:	e8730010 	lwi	r3, r19, 16
20028784:	e883000c 	lwi	r4, r3, 12
20028788:	e8730004 	lwi	r3, r19, 4
2002878c:	64630402 	bslli	r3, r3, 2
20028790:	10641800 	addk	r3, r4, r3
20028794:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20028798:	e8730004 	lwi	r3, r19, 4
2002879c:	30630001 	addik	r3, r3, 1
200287a0:	f8730004 	swi	r3, r19, 4
200287a4:	e8730010 	lwi	r3, r19, 16
200287a8:	e8830008 	lwi	r4, r3, 8
200287ac:	e8730004 	lwi	r3, r19, 4
200287b0:	16441803 	cmpu	r18, r4, r3
200287b4:	bc52ffcc 	blti	r18, -52		// 20028780
        fifo->read_inds[i] = 0;
    }
}
200287b8:	10330000 	addk	r1, r19, r0
200287bc:	ea610008 	lwi	r19, r1, 8
200287c0:	3021000c 	addik	r1, r1, 12
200287c4:	b60f0008 	rtsd	r15, 8
200287c8:	80000000 	or	r0, r0, r0

200287cc <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200287cc:	3021fff0 	addik	r1, r1, -16
200287d0:	fa61000c 	swi	r19, r1, 12
200287d4:	12610000 	addk	r19, r1, r0
200287d8:	f8b30014 	swi	r5, r19, 20
200287dc:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200287e0:	e8730014 	lwi	r3, r19, 20
200287e4:	e8830004 	lwi	r4, r3, 4
200287e8:	e8730014 	lwi	r3, r19, 20
200287ec:	e8a3000c 	lwi	r5, r3, 12
200287f0:	e8730018 	lwi	r3, r19, 24
200287f4:	64630402 	bslli	r3, r3, 2
200287f8:	10651800 	addk	r3, r5, r3
200287fc:	e8a30000 	lwi	r5, r3, 0
20028800:	e8730014 	lwi	r3, r19, 20
20028804:	e8630000 	lwi	r3, r3, 0
20028808:	3063ffff 	addik	r3, r3, -1
2002880c:	84651800 	and	r3, r5, r3
20028810:	64630403 	bslli	r3, r3, 3
20028814:	10641800 	addk	r3, r4, r3
20028818:	e8830000 	lwi	r4, r3, 0
2002881c:	e8a30004 	lwi	r5, r3, 4
20028820:	f8930004 	swi	r4, r19, 4
20028824:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20028828:	e8730014 	lwi	r3, r19, 20
2002882c:	e883000c 	lwi	r4, r3, 12
20028830:	e8730018 	lwi	r3, r19, 24
20028834:	64630402 	bslli	r3, r3, 2
20028838:	10641800 	addk	r3, r4, r3
2002883c:	e8830000 	lwi	r4, r3, 0
20028840:	30840001 	addik	r4, r4, 1
20028844:	f8830000 	swi	r4, r3, 0
    return value;
20028848:	e8930004 	lwi	r4, r19, 4
2002884c:	e8b30008 	lwi	r5, r19, 8
}
20028850:	10640000 	addk	r3, r4, r0
20028854:	10850000 	addk	r4, r5, r0
20028858:	10330000 	addk	r1, r19, r0
2002885c:	ea61000c 	lwi	r19, r1, 12
20028860:	30210010 	addik	r1, r1, 16
20028864:	b60f0008 	rtsd	r15, 8
20028868:	80000000 	or	r0, r0, r0

2002886c <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002886c:	3021fff8 	addik	r1, r1, -8
20028870:	fa610004 	swi	r19, r1, 4
20028874:	12610000 	addk	r19, r1, r0
20028878:	f8b3000c 	swi	r5, r19, 12
2002887c:	f8d30010 	swi	r6, r19, 16
20028880:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20028884:	e873000c 	lwi	r3, r19, 12
20028888:	e8830004 	lwi	r4, r3, 4
2002888c:	e873000c 	lwi	r3, r19, 12
20028890:	e8630010 	lwi	r3, r3, 16
20028894:	e8a30000 	lwi	r5, r3, 0
20028898:	e873000c 	lwi	r3, r19, 12
2002889c:	e8630000 	lwi	r3, r3, 0
200288a0:	3063ffff 	addik	r3, r3, -1
200288a4:	84651800 	and	r3, r5, r3
200288a8:	64630403 	bslli	r3, r3, 3
200288ac:	10641800 	addk	r3, r4, r3
200288b0:	e8930010 	lwi	r4, r19, 16
200288b4:	e8b30014 	lwi	r5, r19, 20
200288b8:	f8830000 	swi	r4, r3, 0
200288bc:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
200288c0:	e873000c 	lwi	r3, r19, 12
200288c4:	e8630010 	lwi	r3, r3, 16
200288c8:	e8830000 	lwi	r4, r3, 0
200288cc:	30840001 	addik	r4, r4, 1
200288d0:	f8830000 	swi	r4, r3, 0
}
200288d4:	10330000 	addk	r1, r19, r0
200288d8:	ea610004 	lwi	r19, r1, 4
200288dc:	30210008 	addik	r1, r1, 8
200288e0:	b60f0008 	rtsd	r15, 8
200288e4:	80000000 	or	r0, r0, r0

200288e8 <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200288e8:	3021fff8 	addik	r1, r1, -8
200288ec:	fa610004 	swi	r19, r1, 4
200288f0:	12610000 	addk	r19, r1, r0
200288f4:	f8b3000c 	swi	r5, r19, 12
200288f8:	f8d30010 	swi	r6, r19, 16
200288fc:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20028900:	e873000c 	lwi	r3, r19, 12
20028904:	e8630010 	lwi	r3, r3, 16
20028908:	e8830000 	lwi	r4, r3, 0
2002890c:	e873000c 	lwi	r3, r19, 12
20028910:	e8a3000c 	lwi	r5, r3, 12
20028914:	e8730010 	lwi	r3, r19, 16
20028918:	64630402 	bslli	r3, r3, 2
2002891c:	10651800 	addk	r3, r5, r3
20028920:	e8630000 	lwi	r3, r3, 0
20028924:	14a32000 	rsubk	r5, r3, r4
20028928:	30600001 	addik	r3, r0, 1
2002892c:	e8930014 	lwi	r4, r19, 20
20028930:	16442803 	cmpu	r18, r4, r5
20028934:	bcb20008 	bgei	r18, 8		// 2002893c
20028938:	10600000 	addk	r3, r0, r0
2002893c:	a46300ff 	andi	r3, r3, 255
}
20028940:	10330000 	addk	r1, r19, r0
20028944:	ea610004 	lwi	r19, r1, 4
20028948:	30210008 	addik	r1, r1, 8
2002894c:	b60f0008 	rtsd	r15, 8
20028950:	80000000 	or	r0, r0, r0

20028954 <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20028954:	3021fff8 	addik	r1, r1, -8
20028958:	fa610004 	swi	r19, r1, 4
2002895c:	12610000 	addk	r19, r1, r0
20028960:	f8b3000c 	swi	r5, r19, 12
20028964:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20028968:	e873000c 	lwi	r3, r19, 12
2002896c:	e8630010 	lwi	r3, r3, 16
20028970:	e8830000 	lwi	r4, r3, 0
20028974:	e873000c 	lwi	r3, r19, 12
20028978:	e8a3000c 	lwi	r5, r3, 12
2002897c:	e8730010 	lwi	r3, r19, 16
20028980:	64630402 	bslli	r3, r3, 2
20028984:	10651800 	addk	r3, r5, r3
20028988:	e8630000 	lwi	r3, r3, 0
2002898c:	14632000 	rsubk	r3, r3, r4
}
20028990:	10330000 	addk	r1, r19, r0
20028994:	ea610004 	lwi	r19, r1, 4
20028998:	30210008 	addik	r1, r1, 8
2002899c:	b60f0008 	rtsd	r15, 8
200289a0:	80000000 	or	r0, r0, r0

200289a4 <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200289a4:	3021fff4 	addik	r1, r1, -12
200289a8:	fa610008 	swi	r19, r1, 8
200289ac:	12610000 	addk	r19, r1, r0
200289b0:	f8b30010 	swi	r5, r19, 16
200289b4:	f8d30014 	swi	r6, r19, 20
200289b8:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200289bc:	f8130004 	swi	r0, r19, 4
200289c0:	b800005c 	bri	92		// 20028a1c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200289c4:	e8730010 	lwi	r3, r19, 16
200289c8:	e8830000 	lwi	r4, r3, 0
200289cc:	e8730010 	lwi	r3, r19, 16
200289d0:	e8a3000c 	lwi	r5, r3, 12
200289d4:	e8730004 	lwi	r3, r19, 4
200289d8:	64630402 	bslli	r3, r3, 2
200289dc:	10651800 	addk	r3, r5, r3
200289e0:	e8a30000 	lwi	r5, r3, 0
200289e4:	e8730010 	lwi	r3, r19, 16
200289e8:	e8630010 	lwi	r3, r3, 16
200289ec:	e8630000 	lwi	r3, r3, 0
200289f0:	14632800 	rsubk	r3, r3, r5
200289f4:	10641800 	addk	r3, r4, r3
200289f8:	30830001 	addik	r4, r3, 1
200289fc:	e8730018 	lwi	r3, r19, 24
20028a00:	16441803 	cmpu	r18, r4, r3
20028a04:	bc52000c 	blti	r18, 12		// 20028a10
            return 0;
20028a08:	10600000 	addk	r3, r0, r0
20028a0c:	b8000024 	bri	36		// 20028a30
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20028a10:	e8730004 	lwi	r3, r19, 4
20028a14:	30630001 	addik	r3, r3, 1
20028a18:	f8730004 	swi	r3, r19, 4
20028a1c:	e8930004 	lwi	r4, r19, 4
20028a20:	e8730014 	lwi	r3, r19, 20
20028a24:	16432003 	cmpu	r18, r3, r4
20028a28:	bc52ff9c 	blti	r18, -100		// 200289c4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20028a2c:	30600001 	addik	r3, r0, 1
}
20028a30:	10330000 	addk	r1, r19, r0
20028a34:	ea610008 	lwi	r19, r1, 8
20028a38:	3021000c 	addik	r1, r1, 12
20028a3c:	b60f0008 	rtsd	r15, 8
20028a40:	80000000 	or	r0, r0, r0

20028a44 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20028a44:	3021ffec 	addik	r1, r1, -20
20028a48:	fa610010 	swi	r19, r1, 16
20028a4c:	12610000 	addk	r19, r1, r0
20028a50:	f8b30018 	swi	r5, r19, 24
20028a54:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20028a58:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20028a5c:	f8130004 	swi	r0, r19, 4
20028a60:	b8000054 	bri	84		// 20028ab4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20028a64:	e8730018 	lwi	r3, r19, 24
20028a68:	e8630010 	lwi	r3, r3, 16
20028a6c:	e8830000 	lwi	r4, r3, 0
20028a70:	e8730018 	lwi	r3, r19, 24
20028a74:	e8a3000c 	lwi	r5, r3, 12
20028a78:	e8730004 	lwi	r3, r19, 4
20028a7c:	64630402 	bslli	r3, r3, 2
20028a80:	10651800 	addk	r3, r5, r3
20028a84:	e8630000 	lwi	r3, r3, 0
20028a88:	14632000 	rsubk	r3, r3, r4
20028a8c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20028a90:	e8930008 	lwi	r4, r19, 8
20028a94:	e873000c 	lwi	r3, r19, 12
20028a98:	16441803 	cmpu	r18, r4, r3
20028a9c:	bcb20008 	bgei	r18, 8		// 20028aa4
20028aa0:	10640000 	addk	r3, r4, r0
20028aa4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20028aa8:	e8730004 	lwi	r3, r19, 4
20028aac:	30630001 	addik	r3, r3, 1
20028ab0:	f8730004 	swi	r3, r19, 4
20028ab4:	e8930004 	lwi	r4, r19, 4
20028ab8:	e873001c 	lwi	r3, r19, 28
20028abc:	16432003 	cmpu	r18, r3, r4
20028ac0:	bc52ffa4 	blti	r18, -92		// 20028a64
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20028ac4:	e8730018 	lwi	r3, r19, 24
20028ac8:	e8830000 	lwi	r4, r3, 0
20028acc:	e8730008 	lwi	r3, r19, 8
20028ad0:	14632000 	rsubk	r3, r3, r4
}
20028ad4:	10330000 	addk	r1, r19, r0
20028ad8:	ea610010 	lwi	r19, r1, 16
20028adc:	30210014 	addik	r1, r1, 20
20028ae0:	b60f0008 	rtsd	r15, 8
20028ae4:	80000000 	or	r0, r0, r0

20028ae8 <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20028ae8:	3021fff4 	addik	r1, r1, -12
20028aec:	fa610008 	swi	r19, r1, 8
20028af0:	12610000 	addk	r19, r1, r0
20028af4:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20028af8:	e8730010 	lwi	r3, r19, 16
20028afc:	e8630010 	lwi	r3, r3, 16
20028b00:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20028b04:	f8130004 	swi	r0, r19, 4
20028b08:	b8000028 	bri	40		// 20028b30
        fifo->read_inds[i] = 0;
20028b0c:	e8730010 	lwi	r3, r19, 16
20028b10:	e883000c 	lwi	r4, r3, 12
20028b14:	e8730004 	lwi	r3, r19, 4
20028b18:	64630402 	bslli	r3, r3, 2
20028b1c:	10641800 	addk	r3, r4, r3
20028b20:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20028b24:	e8730004 	lwi	r3, r19, 4
20028b28:	30630001 	addik	r3, r3, 1
20028b2c:	f8730004 	swi	r3, r19, 4
20028b30:	e8730010 	lwi	r3, r19, 16
20028b34:	e8830008 	lwi	r4, r3, 8
20028b38:	e8730004 	lwi	r3, r19, 4
20028b3c:	16441803 	cmpu	r18, r4, r3
20028b40:	bc52ffcc 	blti	r18, -52		// 20028b0c
        fifo->read_inds[i] = 0;
    }
}
20028b44:	10330000 	addk	r1, r19, r0
20028b48:	ea610008 	lwi	r19, r1, 8
20028b4c:	3021000c 	addik	r1, r1, 12
20028b50:	b60f0008 	rtsd	r15, 8
20028b54:	80000000 	or	r0, r0, r0

20028b58 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20028b58:	3021fff4 	addik	r1, r1, -12
20028b5c:	fa610008 	swi	r19, r1, 8
20028b60:	12610000 	addk	r19, r1, r0
20028b64:	f8b30010 	swi	r5, r19, 16
20028b68:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20028b6c:	e8730010 	lwi	r3, r19, 16
20028b70:	e8830004 	lwi	r4, r3, 4
20028b74:	e8730010 	lwi	r3, r19, 16
20028b78:	e8a3000c 	lwi	r5, r3, 12
20028b7c:	e8730014 	lwi	r3, r19, 20
20028b80:	64630402 	bslli	r3, r3, 2
20028b84:	10651800 	addk	r3, r5, r3
20028b88:	e8a30000 	lwi	r5, r3, 0
20028b8c:	e8730010 	lwi	r3, r19, 16
20028b90:	e8630000 	lwi	r3, r3, 0
20028b94:	3063ffff 	addik	r3, r3, -1
20028b98:	84651800 	and	r3, r5, r3
20028b9c:	10641800 	addk	r3, r4, r3
20028ba0:	e0630000 	lbui	r3, r3, 0
20028ba4:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20028ba8:	e8730010 	lwi	r3, r19, 16
20028bac:	e883000c 	lwi	r4, r3, 12
20028bb0:	e8730014 	lwi	r3, r19, 20
20028bb4:	64630402 	bslli	r3, r3, 2
20028bb8:	10641800 	addk	r3, r4, r3
20028bbc:	e8830000 	lwi	r4, r3, 0
20028bc0:	30840001 	addik	r4, r4, 1
20028bc4:	f8830000 	swi	r4, r3, 0
    return value;
20028bc8:	e0730004 	lbui	r3, r19, 4
}
20028bcc:	10330000 	addk	r1, r19, r0
20028bd0:	ea610008 	lwi	r19, r1, 8
20028bd4:	3021000c 	addik	r1, r1, 12
20028bd8:	b60f0008 	rtsd	r15, 8
20028bdc:	80000000 	or	r0, r0, r0

20028be0 <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20028be0:	3021fff8 	addik	r1, r1, -8
20028be4:	fa610004 	swi	r19, r1, 4
20028be8:	12610000 	addk	r19, r1, r0
20028bec:	f8b3000c 	swi	r5, r19, 12
20028bf0:	10660000 	addk	r3, r6, r0
20028bf4:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20028bf8:	e873000c 	lwi	r3, r19, 12
20028bfc:	e8830004 	lwi	r4, r3, 4
20028c00:	e873000c 	lwi	r3, r19, 12
20028c04:	e8630010 	lwi	r3, r3, 16
20028c08:	e8a30000 	lwi	r5, r3, 0
20028c0c:	e873000c 	lwi	r3, r19, 12
20028c10:	e8630000 	lwi	r3, r3, 0
20028c14:	3063ffff 	addik	r3, r3, -1
20028c18:	84651800 	and	r3, r5, r3
20028c1c:	10641800 	addk	r3, r4, r3
20028c20:	e0930010 	lbui	r4, r19, 16
20028c24:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20028c28:	e873000c 	lwi	r3, r19, 12
20028c2c:	e8630010 	lwi	r3, r3, 16
20028c30:	e8830000 	lwi	r4, r3, 0
20028c34:	30840001 	addik	r4, r4, 1
20028c38:	f8830000 	swi	r4, r3, 0
}
20028c3c:	10330000 	addk	r1, r19, r0
20028c40:	ea610004 	lwi	r19, r1, 4
20028c44:	30210008 	addik	r1, r1, 8
20028c48:	b60f0008 	rtsd	r15, 8
20028c4c:	80000000 	or	r0, r0, r0

20028c50 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20028c50:	3021fff8 	addik	r1, r1, -8
20028c54:	fa610004 	swi	r19, r1, 4
20028c58:	12610000 	addk	r19, r1, r0
20028c5c:	f8b3000c 	swi	r5, r19, 12
20028c60:	f8d30010 	swi	r6, r19, 16
20028c64:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20028c68:	e873000c 	lwi	r3, r19, 12
20028c6c:	e8630010 	lwi	r3, r3, 16
20028c70:	e8830000 	lwi	r4, r3, 0
20028c74:	e873000c 	lwi	r3, r19, 12
20028c78:	e8a3000c 	lwi	r5, r3, 12
20028c7c:	e8730010 	lwi	r3, r19, 16
20028c80:	64630402 	bslli	r3, r3, 2
20028c84:	10651800 	addk	r3, r5, r3
20028c88:	e8630000 	lwi	r3, r3, 0
20028c8c:	14a32000 	rsubk	r5, r3, r4
20028c90:	30600001 	addik	r3, r0, 1
20028c94:	e8930014 	lwi	r4, r19, 20
20028c98:	16442803 	cmpu	r18, r4, r5
20028c9c:	bcb20008 	bgei	r18, 8		// 20028ca4
20028ca0:	10600000 	addk	r3, r0, r0
20028ca4:	a46300ff 	andi	r3, r3, 255
}
20028ca8:	10330000 	addk	r1, r19, r0
20028cac:	ea610004 	lwi	r19, r1, 4
20028cb0:	30210008 	addik	r1, r1, 8
20028cb4:	b60f0008 	rtsd	r15, 8
20028cb8:	80000000 	or	r0, r0, r0

20028cbc <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20028cbc:	3021fff8 	addik	r1, r1, -8
20028cc0:	fa610004 	swi	r19, r1, 4
20028cc4:	12610000 	addk	r19, r1, r0
20028cc8:	f8b3000c 	swi	r5, r19, 12
20028ccc:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20028cd0:	e873000c 	lwi	r3, r19, 12
20028cd4:	e8630010 	lwi	r3, r3, 16
20028cd8:	e8830000 	lwi	r4, r3, 0
20028cdc:	e873000c 	lwi	r3, r19, 12
20028ce0:	e8a3000c 	lwi	r5, r3, 12
20028ce4:	e8730010 	lwi	r3, r19, 16
20028ce8:	64630402 	bslli	r3, r3, 2
20028cec:	10651800 	addk	r3, r5, r3
20028cf0:	e8630000 	lwi	r3, r3, 0
20028cf4:	14632000 	rsubk	r3, r3, r4
}
20028cf8:	10330000 	addk	r1, r19, r0
20028cfc:	ea610004 	lwi	r19, r1, 4
20028d00:	30210008 	addik	r1, r1, 8
20028d04:	b60f0008 	rtsd	r15, 8
20028d08:	80000000 	or	r0, r0, r0

20028d0c <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20028d0c:	3021fff4 	addik	r1, r1, -12
20028d10:	fa610008 	swi	r19, r1, 8
20028d14:	12610000 	addk	r19, r1, r0
20028d18:	f8b30010 	swi	r5, r19, 16
20028d1c:	f8d30014 	swi	r6, r19, 20
20028d20:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20028d24:	f8130004 	swi	r0, r19, 4
20028d28:	b800005c 	bri	92		// 20028d84
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20028d2c:	e8730010 	lwi	r3, r19, 16
20028d30:	e8830000 	lwi	r4, r3, 0
20028d34:	e8730010 	lwi	r3, r19, 16
20028d38:	e8a3000c 	lwi	r5, r3, 12
20028d3c:	e8730004 	lwi	r3, r19, 4
20028d40:	64630402 	bslli	r3, r3, 2
20028d44:	10651800 	addk	r3, r5, r3
20028d48:	e8a30000 	lwi	r5, r3, 0
20028d4c:	e8730010 	lwi	r3, r19, 16
20028d50:	e8630010 	lwi	r3, r3, 16
20028d54:	e8630000 	lwi	r3, r3, 0
20028d58:	14632800 	rsubk	r3, r3, r5
20028d5c:	10641800 	addk	r3, r4, r3
20028d60:	30830001 	addik	r4, r3, 1
20028d64:	e8730018 	lwi	r3, r19, 24
20028d68:	16441803 	cmpu	r18, r4, r3
20028d6c:	bc52000c 	blti	r18, 12		// 20028d78
            return 0;
20028d70:	10600000 	addk	r3, r0, r0
20028d74:	b8000024 	bri	36		// 20028d98
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20028d78:	e8730004 	lwi	r3, r19, 4
20028d7c:	30630001 	addik	r3, r3, 1
20028d80:	f8730004 	swi	r3, r19, 4
20028d84:	e8930004 	lwi	r4, r19, 4
20028d88:	e8730014 	lwi	r3, r19, 20
20028d8c:	16432003 	cmpu	r18, r3, r4
20028d90:	bc52ff9c 	blti	r18, -100		// 20028d2c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20028d94:	30600001 	addik	r3, r0, 1
}
20028d98:	10330000 	addk	r1, r19, r0
20028d9c:	ea610008 	lwi	r19, r1, 8
20028da0:	3021000c 	addik	r1, r1, 12
20028da4:	b60f0008 	rtsd	r15, 8
20028da8:	80000000 	or	r0, r0, r0

20028dac <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20028dac:	3021ffec 	addik	r1, r1, -20
20028db0:	fa610010 	swi	r19, r1, 16
20028db4:	12610000 	addk	r19, r1, r0
20028db8:	f8b30018 	swi	r5, r19, 24
20028dbc:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20028dc0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20028dc4:	f8130004 	swi	r0, r19, 4
20028dc8:	b8000054 	bri	84		// 20028e1c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20028dcc:	e8730018 	lwi	r3, r19, 24
20028dd0:	e8630010 	lwi	r3, r3, 16
20028dd4:	e8830000 	lwi	r4, r3, 0
20028dd8:	e8730018 	lwi	r3, r19, 24
20028ddc:	e8a3000c 	lwi	r5, r3, 12
20028de0:	e8730004 	lwi	r3, r19, 4
20028de4:	64630402 	bslli	r3, r3, 2
20028de8:	10651800 	addk	r3, r5, r3
20028dec:	e8630000 	lwi	r3, r3, 0
20028df0:	14632000 	rsubk	r3, r3, r4
20028df4:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20028df8:	e8930008 	lwi	r4, r19, 8
20028dfc:	e873000c 	lwi	r3, r19, 12
20028e00:	16441803 	cmpu	r18, r4, r3
20028e04:	bcb20008 	bgei	r18, 8		// 20028e0c
20028e08:	10640000 	addk	r3, r4, r0
20028e0c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20028e10:	e8730004 	lwi	r3, r19, 4
20028e14:	30630001 	addik	r3, r3, 1
20028e18:	f8730004 	swi	r3, r19, 4
20028e1c:	e8930004 	lwi	r4, r19, 4
20028e20:	e873001c 	lwi	r3, r19, 28
20028e24:	16432003 	cmpu	r18, r3, r4
20028e28:	bc52ffa4 	blti	r18, -92		// 20028dcc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20028e2c:	e8730018 	lwi	r3, r19, 24
20028e30:	e8830000 	lwi	r4, r3, 0
20028e34:	e8730008 	lwi	r3, r19, 8
20028e38:	14632000 	rsubk	r3, r3, r4
}
20028e3c:	10330000 	addk	r1, r19, r0
20028e40:	ea610010 	lwi	r19, r1, 16
20028e44:	30210014 	addik	r1, r1, 20
20028e48:	b60f0008 	rtsd	r15, 8
20028e4c:	80000000 	or	r0, r0, r0

20028e50 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20028e50:	3021fff4 	addik	r1, r1, -12
20028e54:	fa610008 	swi	r19, r1, 8
20028e58:	12610000 	addk	r19, r1, r0
20028e5c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20028e60:	e8730010 	lwi	r3, r19, 16
20028e64:	e8630010 	lwi	r3, r3, 16
20028e68:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20028e6c:	f8130004 	swi	r0, r19, 4
20028e70:	b8000028 	bri	40		// 20028e98
        fifo->read_inds[i] = 0;
20028e74:	e8730010 	lwi	r3, r19, 16
20028e78:	e883000c 	lwi	r4, r3, 12
20028e7c:	e8730004 	lwi	r3, r19, 4
20028e80:	64630402 	bslli	r3, r3, 2
20028e84:	10641800 	addk	r3, r4, r3
20028e88:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20028e8c:	e8730004 	lwi	r3, r19, 4
20028e90:	30630001 	addik	r3, r3, 1
20028e94:	f8730004 	swi	r3, r19, 4
20028e98:	e8730010 	lwi	r3, r19, 16
20028e9c:	e8830008 	lwi	r4, r3, 8
20028ea0:	e8730004 	lwi	r3, r19, 4
20028ea4:	16441803 	cmpu	r18, r4, r3
20028ea8:	bc52ffcc 	blti	r18, -52		// 20028e74
        fifo->read_inds[i] = 0;
    }
}
20028eac:	10330000 	addk	r1, r19, r0
20028eb0:	ea610008 	lwi	r19, r1, 8
20028eb4:	3021000c 	addik	r1, r1, 12
20028eb8:	b60f0008 	rtsd	r15, 8
20028ebc:	80000000 	or	r0, r0, r0

20028ec0 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20028ec0:	3021fff4 	addik	r1, r1, -12
20028ec4:	fa610008 	swi	r19, r1, 8
20028ec8:	12610000 	addk	r19, r1, r0
20028ecc:	f8b30010 	swi	r5, r19, 16
20028ed0:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20028ed4:	e8730010 	lwi	r3, r19, 16
20028ed8:	e8830004 	lwi	r4, r3, 4
20028edc:	e8730010 	lwi	r3, r19, 16
20028ee0:	e8a3000c 	lwi	r5, r3, 12
20028ee4:	e8730014 	lwi	r3, r19, 20
20028ee8:	64630402 	bslli	r3, r3, 2
20028eec:	10651800 	addk	r3, r5, r3
20028ef0:	e8a30000 	lwi	r5, r3, 0
20028ef4:	e8730010 	lwi	r3, r19, 16
20028ef8:	e8630000 	lwi	r3, r3, 0
20028efc:	3063ffff 	addik	r3, r3, -1
20028f00:	84651800 	and	r3, r5, r3
20028f04:	10631800 	addk	r3, r3, r3
20028f08:	10641800 	addk	r3, r4, r3
20028f0c:	e4630000 	lhui	r3, r3, 0
20028f10:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20028f14:	e8730010 	lwi	r3, r19, 16
20028f18:	e883000c 	lwi	r4, r3, 12
20028f1c:	e8730014 	lwi	r3, r19, 20
20028f20:	64630402 	bslli	r3, r3, 2
20028f24:	10641800 	addk	r3, r4, r3
20028f28:	e8830000 	lwi	r4, r3, 0
20028f2c:	30840001 	addik	r4, r4, 1
20028f30:	f8830000 	swi	r4, r3, 0
    return value;
20028f34:	e4730004 	lhui	r3, r19, 4
}
20028f38:	10330000 	addk	r1, r19, r0
20028f3c:	ea610008 	lwi	r19, r1, 8
20028f40:	3021000c 	addik	r1, r1, 12
20028f44:	b60f0008 	rtsd	r15, 8
20028f48:	80000000 	or	r0, r0, r0

20028f4c <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20028f4c:	3021fff8 	addik	r1, r1, -8
20028f50:	fa610004 	swi	r19, r1, 4
20028f54:	12610000 	addk	r19, r1, r0
20028f58:	f8b3000c 	swi	r5, r19, 12
20028f5c:	10660000 	addk	r3, r6, r0
20028f60:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20028f64:	e873000c 	lwi	r3, r19, 12
20028f68:	e8830004 	lwi	r4, r3, 4
20028f6c:	e873000c 	lwi	r3, r19, 12
20028f70:	e8630010 	lwi	r3, r3, 16
20028f74:	e8a30000 	lwi	r5, r3, 0
20028f78:	e873000c 	lwi	r3, r19, 12
20028f7c:	e8630000 	lwi	r3, r3, 0
20028f80:	3063ffff 	addik	r3, r3, -1
20028f84:	84651800 	and	r3, r5, r3
20028f88:	10631800 	addk	r3, r3, r3
20028f8c:	10641800 	addk	r3, r4, r3
20028f90:	e4930010 	lhui	r4, r19, 16
20028f94:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20028f98:	e873000c 	lwi	r3, r19, 12
20028f9c:	e8630010 	lwi	r3, r3, 16
20028fa0:	e8830000 	lwi	r4, r3, 0
20028fa4:	30840001 	addik	r4, r4, 1
20028fa8:	f8830000 	swi	r4, r3, 0
}
20028fac:	10330000 	addk	r1, r19, r0
20028fb0:	ea610004 	lwi	r19, r1, 4
20028fb4:	30210008 	addik	r1, r1, 8
20028fb8:	b60f0008 	rtsd	r15, 8
20028fbc:	80000000 	or	r0, r0, r0

20028fc0 <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20028fc0:	3021fff8 	addik	r1, r1, -8
20028fc4:	fa610004 	swi	r19, r1, 4
20028fc8:	12610000 	addk	r19, r1, r0
20028fcc:	f8b3000c 	swi	r5, r19, 12
20028fd0:	f8d30010 	swi	r6, r19, 16
20028fd4:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20028fd8:	e873000c 	lwi	r3, r19, 12
20028fdc:	e8630010 	lwi	r3, r3, 16
20028fe0:	e8830000 	lwi	r4, r3, 0
20028fe4:	e873000c 	lwi	r3, r19, 12
20028fe8:	e8a3000c 	lwi	r5, r3, 12
20028fec:	e8730010 	lwi	r3, r19, 16
20028ff0:	64630402 	bslli	r3, r3, 2
20028ff4:	10651800 	addk	r3, r5, r3
20028ff8:	e8630000 	lwi	r3, r3, 0
20028ffc:	14a32000 	rsubk	r5, r3, r4
20029000:	30600001 	addik	r3, r0, 1
20029004:	e8930014 	lwi	r4, r19, 20
20029008:	16442803 	cmpu	r18, r4, r5
2002900c:	bcb20008 	bgei	r18, 8		// 20029014
20029010:	10600000 	addk	r3, r0, r0
20029014:	a46300ff 	andi	r3, r3, 255
}
20029018:	10330000 	addk	r1, r19, r0
2002901c:	ea610004 	lwi	r19, r1, 4
20029020:	30210008 	addik	r1, r1, 8
20029024:	b60f0008 	rtsd	r15, 8
20029028:	80000000 	or	r0, r0, r0

2002902c <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002902c:	3021fff8 	addik	r1, r1, -8
20029030:	fa610004 	swi	r19, r1, 4
20029034:	12610000 	addk	r19, r1, r0
20029038:	f8b3000c 	swi	r5, r19, 12
2002903c:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20029040:	e873000c 	lwi	r3, r19, 12
20029044:	e8630010 	lwi	r3, r3, 16
20029048:	e8830000 	lwi	r4, r3, 0
2002904c:	e873000c 	lwi	r3, r19, 12
20029050:	e8a3000c 	lwi	r5, r3, 12
20029054:	e8730010 	lwi	r3, r19, 16
20029058:	64630402 	bslli	r3, r3, 2
2002905c:	10651800 	addk	r3, r5, r3
20029060:	e8630000 	lwi	r3, r3, 0
20029064:	14632000 	rsubk	r3, r3, r4
}
20029068:	10330000 	addk	r1, r19, r0
2002906c:	ea610004 	lwi	r19, r1, 4
20029070:	30210008 	addik	r1, r1, 8
20029074:	b60f0008 	rtsd	r15, 8
20029078:	80000000 	or	r0, r0, r0

2002907c <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002907c:	3021fff4 	addik	r1, r1, -12
20029080:	fa610008 	swi	r19, r1, 8
20029084:	12610000 	addk	r19, r1, r0
20029088:	f8b30010 	swi	r5, r19, 16
2002908c:	f8d30014 	swi	r6, r19, 20
20029090:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20029094:	f8130004 	swi	r0, r19, 4
20029098:	b800005c 	bri	92		// 200290f4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002909c:	e8730010 	lwi	r3, r19, 16
200290a0:	e8830000 	lwi	r4, r3, 0
200290a4:	e8730010 	lwi	r3, r19, 16
200290a8:	e8a3000c 	lwi	r5, r3, 12
200290ac:	e8730004 	lwi	r3, r19, 4
200290b0:	64630402 	bslli	r3, r3, 2
200290b4:	10651800 	addk	r3, r5, r3
200290b8:	e8a30000 	lwi	r5, r3, 0
200290bc:	e8730010 	lwi	r3, r19, 16
200290c0:	e8630010 	lwi	r3, r3, 16
200290c4:	e8630000 	lwi	r3, r3, 0
200290c8:	14632800 	rsubk	r3, r3, r5
200290cc:	10641800 	addk	r3, r4, r3
200290d0:	30830001 	addik	r4, r3, 1
200290d4:	e8730018 	lwi	r3, r19, 24
200290d8:	16441803 	cmpu	r18, r4, r3
200290dc:	bc52000c 	blti	r18, 12		// 200290e8
            return 0;
200290e0:	10600000 	addk	r3, r0, r0
200290e4:	b8000024 	bri	36		// 20029108
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200290e8:	e8730004 	lwi	r3, r19, 4
200290ec:	30630001 	addik	r3, r3, 1
200290f0:	f8730004 	swi	r3, r19, 4
200290f4:	e8930004 	lwi	r4, r19, 4
200290f8:	e8730014 	lwi	r3, r19, 20
200290fc:	16432003 	cmpu	r18, r3, r4
20029100:	bc52ff9c 	blti	r18, -100		// 2002909c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20029104:	30600001 	addik	r3, r0, 1
}
20029108:	10330000 	addk	r1, r19, r0
2002910c:	ea610008 	lwi	r19, r1, 8
20029110:	3021000c 	addik	r1, r1, 12
20029114:	b60f0008 	rtsd	r15, 8
20029118:	80000000 	or	r0, r0, r0

2002911c <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002911c:	3021ffec 	addik	r1, r1, -20
20029120:	fa610010 	swi	r19, r1, 16
20029124:	12610000 	addk	r19, r1, r0
20029128:	f8b30018 	swi	r5, r19, 24
2002912c:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20029130:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20029134:	f8130004 	swi	r0, r19, 4
20029138:	b8000054 	bri	84		// 2002918c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2002913c:	e8730018 	lwi	r3, r19, 24
20029140:	e8630010 	lwi	r3, r3, 16
20029144:	e8830000 	lwi	r4, r3, 0
20029148:	e8730018 	lwi	r3, r19, 24
2002914c:	e8a3000c 	lwi	r5, r3, 12
20029150:	e8730004 	lwi	r3, r19, 4
20029154:	64630402 	bslli	r3, r3, 2
20029158:	10651800 	addk	r3, r5, r3
2002915c:	e8630000 	lwi	r3, r3, 0
20029160:	14632000 	rsubk	r3, r3, r4
20029164:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20029168:	e8930008 	lwi	r4, r19, 8
2002916c:	e873000c 	lwi	r3, r19, 12
20029170:	16441803 	cmpu	r18, r4, r3
20029174:	bcb20008 	bgei	r18, 8		// 2002917c
20029178:	10640000 	addk	r3, r4, r0
2002917c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20029180:	e8730004 	lwi	r3, r19, 4
20029184:	30630001 	addik	r3, r3, 1
20029188:	f8730004 	swi	r3, r19, 4
2002918c:	e8930004 	lwi	r4, r19, 4
20029190:	e873001c 	lwi	r3, r19, 28
20029194:	16432003 	cmpu	r18, r3, r4
20029198:	bc52ffa4 	blti	r18, -92		// 2002913c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002919c:	e8730018 	lwi	r3, r19, 24
200291a0:	e8830000 	lwi	r4, r3, 0
200291a4:	e8730008 	lwi	r3, r19, 8
200291a8:	14632000 	rsubk	r3, r3, r4
}
200291ac:	10330000 	addk	r1, r19, r0
200291b0:	ea610010 	lwi	r19, r1, 16
200291b4:	30210014 	addik	r1, r1, 20
200291b8:	b60f0008 	rtsd	r15, 8
200291bc:	80000000 	or	r0, r0, r0

200291c0 <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200291c0:	3021fff4 	addik	r1, r1, -12
200291c4:	fa610008 	swi	r19, r1, 8
200291c8:	12610000 	addk	r19, r1, r0
200291cc:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
200291d0:	e8730010 	lwi	r3, r19, 16
200291d4:	e8630010 	lwi	r3, r3, 16
200291d8:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200291dc:	f8130004 	swi	r0, r19, 4
200291e0:	b8000028 	bri	40		// 20029208
        fifo->read_inds[i] = 0;
200291e4:	e8730010 	lwi	r3, r19, 16
200291e8:	e883000c 	lwi	r4, r3, 12
200291ec:	e8730004 	lwi	r3, r19, 4
200291f0:	64630402 	bslli	r3, r3, 2
200291f4:	10641800 	addk	r3, r4, r3
200291f8:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200291fc:	e8730004 	lwi	r3, r19, 4
20029200:	30630001 	addik	r3, r3, 1
20029204:	f8730004 	swi	r3, r19, 4
20029208:	e8730010 	lwi	r3, r19, 16
2002920c:	e8830008 	lwi	r4, r3, 8
20029210:	e8730004 	lwi	r3, r19, 4
20029214:	16441803 	cmpu	r18, r4, r3
20029218:	bc52ffcc 	blti	r18, -52		// 200291e4
        fifo->read_inds[i] = 0;
    }
}
2002921c:	10330000 	addk	r1, r19, r0
20029220:	ea610008 	lwi	r19, r1, 8
20029224:	3021000c 	addik	r1, r1, 12
20029228:	b60f0008 	rtsd	r15, 8
2002922c:	80000000 	or	r0, r0, r0

20029230 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20029230:	3021fff4 	addik	r1, r1, -12
20029234:	fa610008 	swi	r19, r1, 8
20029238:	12610000 	addk	r19, r1, r0
2002923c:	f8b30010 	swi	r5, r19, 16
20029240:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20029244:	e8730010 	lwi	r3, r19, 16
20029248:	e8830004 	lwi	r4, r3, 4
2002924c:	e8730010 	lwi	r3, r19, 16
20029250:	e8a3000c 	lwi	r5, r3, 12
20029254:	e8730014 	lwi	r3, r19, 20
20029258:	64630402 	bslli	r3, r3, 2
2002925c:	10651800 	addk	r3, r5, r3
20029260:	e8a30000 	lwi	r5, r3, 0
20029264:	e8730010 	lwi	r3, r19, 16
20029268:	e8630000 	lwi	r3, r3, 0
2002926c:	3063ffff 	addik	r3, r3, -1
20029270:	84651800 	and	r3, r5, r3
20029274:	64630402 	bslli	r3, r3, 2
20029278:	10641800 	addk	r3, r4, r3
2002927c:	e8630000 	lwi	r3, r3, 0
20029280:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20029284:	e8730010 	lwi	r3, r19, 16
20029288:	e883000c 	lwi	r4, r3, 12
2002928c:	e8730014 	lwi	r3, r19, 20
20029290:	64630402 	bslli	r3, r3, 2
20029294:	10641800 	addk	r3, r4, r3
20029298:	e8830000 	lwi	r4, r3, 0
2002929c:	30840001 	addik	r4, r4, 1
200292a0:	f8830000 	swi	r4, r3, 0
    return value;
200292a4:	e8730004 	lwi	r3, r19, 4
}
200292a8:	10330000 	addk	r1, r19, r0
200292ac:	ea610008 	lwi	r19, r1, 8
200292b0:	3021000c 	addik	r1, r1, 12
200292b4:	b60f0008 	rtsd	r15, 8
200292b8:	80000000 	or	r0, r0, r0

200292bc <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200292bc:	3021fff8 	addik	r1, r1, -8
200292c0:	fa610004 	swi	r19, r1, 4
200292c4:	12610000 	addk	r19, r1, r0
200292c8:	f8b3000c 	swi	r5, r19, 12
200292cc:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200292d0:	e873000c 	lwi	r3, r19, 12
200292d4:	e8830004 	lwi	r4, r3, 4
200292d8:	e873000c 	lwi	r3, r19, 12
200292dc:	e8630010 	lwi	r3, r3, 16
200292e0:	e8a30000 	lwi	r5, r3, 0
200292e4:	e873000c 	lwi	r3, r19, 12
200292e8:	e8630000 	lwi	r3, r3, 0
200292ec:	3063ffff 	addik	r3, r3, -1
200292f0:	84651800 	and	r3, r5, r3
200292f4:	64630402 	bslli	r3, r3, 2
200292f8:	10641800 	addk	r3, r4, r3
200292fc:	e8930010 	lwi	r4, r19, 16
20029300:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20029304:	e873000c 	lwi	r3, r19, 12
20029308:	e8630010 	lwi	r3, r3, 16
2002930c:	e8830000 	lwi	r4, r3, 0
20029310:	30840001 	addik	r4, r4, 1
20029314:	f8830000 	swi	r4, r3, 0
}
20029318:	10330000 	addk	r1, r19, r0
2002931c:	ea610004 	lwi	r19, r1, 4
20029320:	30210008 	addik	r1, r1, 8
20029324:	b60f0008 	rtsd	r15, 8
20029328:	80000000 	or	r0, r0, r0

2002932c <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002932c:	3021fff8 	addik	r1, r1, -8
20029330:	fa610004 	swi	r19, r1, 4
20029334:	12610000 	addk	r19, r1, r0
20029338:	f8b3000c 	swi	r5, r19, 12
2002933c:	f8d30010 	swi	r6, r19, 16
20029340:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20029344:	e873000c 	lwi	r3, r19, 12
20029348:	e8630010 	lwi	r3, r3, 16
2002934c:	e8830000 	lwi	r4, r3, 0
20029350:	e873000c 	lwi	r3, r19, 12
20029354:	e8a3000c 	lwi	r5, r3, 12
20029358:	e8730010 	lwi	r3, r19, 16
2002935c:	64630402 	bslli	r3, r3, 2
20029360:	10651800 	addk	r3, r5, r3
20029364:	e8630000 	lwi	r3, r3, 0
20029368:	14a32000 	rsubk	r5, r3, r4
2002936c:	30600001 	addik	r3, r0, 1
20029370:	e8930014 	lwi	r4, r19, 20
20029374:	16442803 	cmpu	r18, r4, r5
20029378:	bcb20008 	bgei	r18, 8		// 20029380
2002937c:	10600000 	addk	r3, r0, r0
20029380:	a46300ff 	andi	r3, r3, 255
}
20029384:	10330000 	addk	r1, r19, r0
20029388:	ea610004 	lwi	r19, r1, 4
2002938c:	30210008 	addik	r1, r1, 8
20029390:	b60f0008 	rtsd	r15, 8
20029394:	80000000 	or	r0, r0, r0

20029398 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20029398:	3021fff8 	addik	r1, r1, -8
2002939c:	fa610004 	swi	r19, r1, 4
200293a0:	12610000 	addk	r19, r1, r0
200293a4:	f8b3000c 	swi	r5, r19, 12
200293a8:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200293ac:	e873000c 	lwi	r3, r19, 12
200293b0:	e8630010 	lwi	r3, r3, 16
200293b4:	e8830000 	lwi	r4, r3, 0
200293b8:	e873000c 	lwi	r3, r19, 12
200293bc:	e8a3000c 	lwi	r5, r3, 12
200293c0:	e8730010 	lwi	r3, r19, 16
200293c4:	64630402 	bslli	r3, r3, 2
200293c8:	10651800 	addk	r3, r5, r3
200293cc:	e8630000 	lwi	r3, r3, 0
200293d0:	14632000 	rsubk	r3, r3, r4
}
200293d4:	10330000 	addk	r1, r19, r0
200293d8:	ea610004 	lwi	r19, r1, 4
200293dc:	30210008 	addik	r1, r1, 8
200293e0:	b60f0008 	rtsd	r15, 8
200293e4:	80000000 	or	r0, r0, r0

200293e8 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200293e8:	3021fff4 	addik	r1, r1, -12
200293ec:	fa610008 	swi	r19, r1, 8
200293f0:	12610000 	addk	r19, r1, r0
200293f4:	f8b30010 	swi	r5, r19, 16
200293f8:	f8d30014 	swi	r6, r19, 20
200293fc:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20029400:	f8130004 	swi	r0, r19, 4
20029404:	b800005c 	bri	92		// 20029460
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20029408:	e8730010 	lwi	r3, r19, 16
2002940c:	e8830000 	lwi	r4, r3, 0
20029410:	e8730010 	lwi	r3, r19, 16
20029414:	e8a3000c 	lwi	r5, r3, 12
20029418:	e8730004 	lwi	r3, r19, 4
2002941c:	64630402 	bslli	r3, r3, 2
20029420:	10651800 	addk	r3, r5, r3
20029424:	e8a30000 	lwi	r5, r3, 0
20029428:	e8730010 	lwi	r3, r19, 16
2002942c:	e8630010 	lwi	r3, r3, 16
20029430:	e8630000 	lwi	r3, r3, 0
20029434:	14632800 	rsubk	r3, r3, r5
20029438:	10641800 	addk	r3, r4, r3
2002943c:	30830001 	addik	r4, r3, 1
20029440:	e8730018 	lwi	r3, r19, 24
20029444:	16441803 	cmpu	r18, r4, r3
20029448:	bc52000c 	blti	r18, 12		// 20029454
            return 0;
2002944c:	10600000 	addk	r3, r0, r0
20029450:	b8000024 	bri	36		// 20029474
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20029454:	e8730004 	lwi	r3, r19, 4
20029458:	30630001 	addik	r3, r3, 1
2002945c:	f8730004 	swi	r3, r19, 4
20029460:	e8930004 	lwi	r4, r19, 4
20029464:	e8730014 	lwi	r3, r19, 20
20029468:	16432003 	cmpu	r18, r3, r4
2002946c:	bc52ff9c 	blti	r18, -100		// 20029408
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20029470:	30600001 	addik	r3, r0, 1
}
20029474:	10330000 	addk	r1, r19, r0
20029478:	ea610008 	lwi	r19, r1, 8
2002947c:	3021000c 	addik	r1, r1, 12
20029480:	b60f0008 	rtsd	r15, 8
20029484:	80000000 	or	r0, r0, r0

20029488 <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20029488:	3021ffec 	addik	r1, r1, -20
2002948c:	fa610010 	swi	r19, r1, 16
20029490:	12610000 	addk	r19, r1, r0
20029494:	f8b30018 	swi	r5, r19, 24
20029498:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002949c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200294a0:	f8130004 	swi	r0, r19, 4
200294a4:	b8000054 	bri	84		// 200294f8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200294a8:	e8730018 	lwi	r3, r19, 24
200294ac:	e8630010 	lwi	r3, r3, 16
200294b0:	e8830000 	lwi	r4, r3, 0
200294b4:	e8730018 	lwi	r3, r19, 24
200294b8:	e8a3000c 	lwi	r5, r3, 12
200294bc:	e8730004 	lwi	r3, r19, 4
200294c0:	64630402 	bslli	r3, r3, 2
200294c4:	10651800 	addk	r3, r5, r3
200294c8:	e8630000 	lwi	r3, r3, 0
200294cc:	14632000 	rsubk	r3, r3, r4
200294d0:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200294d4:	e8930008 	lwi	r4, r19, 8
200294d8:	e873000c 	lwi	r3, r19, 12
200294dc:	16441803 	cmpu	r18, r4, r3
200294e0:	bcb20008 	bgei	r18, 8		// 200294e8
200294e4:	10640000 	addk	r3, r4, r0
200294e8:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200294ec:	e8730004 	lwi	r3, r19, 4
200294f0:	30630001 	addik	r3, r3, 1
200294f4:	f8730004 	swi	r3, r19, 4
200294f8:	e8930004 	lwi	r4, r19, 4
200294fc:	e873001c 	lwi	r3, r19, 28
20029500:	16432003 	cmpu	r18, r3, r4
20029504:	bc52ffa4 	blti	r18, -92		// 200294a8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20029508:	e8730018 	lwi	r3, r19, 24
2002950c:	e8830000 	lwi	r4, r3, 0
20029510:	e8730008 	lwi	r3, r19, 8
20029514:	14632000 	rsubk	r3, r3, r4
}
20029518:	10330000 	addk	r1, r19, r0
2002951c:	ea610010 	lwi	r19, r1, 16
20029520:	30210014 	addik	r1, r1, 20
20029524:	b60f0008 	rtsd	r15, 8
20029528:	80000000 	or	r0, r0, r0

2002952c <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002952c:	3021fff4 	addik	r1, r1, -12
20029530:	fa610008 	swi	r19, r1, 8
20029534:	12610000 	addk	r19, r1, r0
20029538:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2002953c:	e8730010 	lwi	r3, r19, 16
20029540:	e8630010 	lwi	r3, r3, 16
20029544:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20029548:	f8130004 	swi	r0, r19, 4
2002954c:	b8000028 	bri	40		// 20029574
        fifo->read_inds[i] = 0;
20029550:	e8730010 	lwi	r3, r19, 16
20029554:	e883000c 	lwi	r4, r3, 12
20029558:	e8730004 	lwi	r3, r19, 4
2002955c:	64630402 	bslli	r3, r3, 2
20029560:	10641800 	addk	r3, r4, r3
20029564:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20029568:	e8730004 	lwi	r3, r19, 4
2002956c:	30630001 	addik	r3, r3, 1
20029570:	f8730004 	swi	r3, r19, 4
20029574:	e8730010 	lwi	r3, r19, 16
20029578:	e8830008 	lwi	r4, r3, 8
2002957c:	e8730004 	lwi	r3, r19, 4
20029580:	16441803 	cmpu	r18, r4, r3
20029584:	bc52ffcc 	blti	r18, -52		// 20029550
        fifo->read_inds[i] = 0;
    }
}
20029588:	10330000 	addk	r1, r19, r0
2002958c:	ea610008 	lwi	r19, r1, 8
20029590:	3021000c 	addik	r1, r1, 12
20029594:	b60f0008 	rtsd	r15, 8
20029598:	80000000 	or	r0, r0, r0

2002959c <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002959c:	3021fff0 	addik	r1, r1, -16
200295a0:	fa61000c 	swi	r19, r1, 12
200295a4:	12610000 	addk	r19, r1, r0
200295a8:	f8b30014 	swi	r5, r19, 20
200295ac:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200295b0:	e8730014 	lwi	r3, r19, 20
200295b4:	e8830004 	lwi	r4, r3, 4
200295b8:	e8730014 	lwi	r3, r19, 20
200295bc:	e8a3000c 	lwi	r5, r3, 12
200295c0:	e8730018 	lwi	r3, r19, 24
200295c4:	64630402 	bslli	r3, r3, 2
200295c8:	10651800 	addk	r3, r5, r3
200295cc:	e8a30000 	lwi	r5, r3, 0
200295d0:	e8730014 	lwi	r3, r19, 20
200295d4:	e8630000 	lwi	r3, r3, 0
200295d8:	3063ffff 	addik	r3, r3, -1
200295dc:	84651800 	and	r3, r5, r3
200295e0:	64630403 	bslli	r3, r3, 3
200295e4:	10641800 	addk	r3, r4, r3
200295e8:	e8830000 	lwi	r4, r3, 0
200295ec:	e8a30004 	lwi	r5, r3, 4
200295f0:	f8930004 	swi	r4, r19, 4
200295f4:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
200295f8:	e8730014 	lwi	r3, r19, 20
200295fc:	e883000c 	lwi	r4, r3, 12
20029600:	e8730018 	lwi	r3, r19, 24
20029604:	64630402 	bslli	r3, r3, 2
20029608:	10641800 	addk	r3, r4, r3
2002960c:	e8830000 	lwi	r4, r3, 0
20029610:	30840001 	addik	r4, r4, 1
20029614:	f8830000 	swi	r4, r3, 0
    return value;
20029618:	e8930004 	lwi	r4, r19, 4
2002961c:	e8b30008 	lwi	r5, r19, 8
}
20029620:	10640000 	addk	r3, r4, r0
20029624:	10850000 	addk	r4, r5, r0
20029628:	10330000 	addk	r1, r19, r0
2002962c:	ea61000c 	lwi	r19, r1, 12
20029630:	30210010 	addik	r1, r1, 16
20029634:	b60f0008 	rtsd	r15, 8
20029638:	80000000 	or	r0, r0, r0

2002963c <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002963c:	3021fff8 	addik	r1, r1, -8
20029640:	fa610004 	swi	r19, r1, 4
20029644:	12610000 	addk	r19, r1, r0
20029648:	f8b3000c 	swi	r5, r19, 12
2002964c:	f8d30010 	swi	r6, r19, 16
20029650:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20029654:	e873000c 	lwi	r3, r19, 12
20029658:	e8830004 	lwi	r4, r3, 4
2002965c:	e873000c 	lwi	r3, r19, 12
20029660:	e8630010 	lwi	r3, r3, 16
20029664:	e8a30000 	lwi	r5, r3, 0
20029668:	e873000c 	lwi	r3, r19, 12
2002966c:	e8630000 	lwi	r3, r3, 0
20029670:	3063ffff 	addik	r3, r3, -1
20029674:	84651800 	and	r3, r5, r3
20029678:	64630403 	bslli	r3, r3, 3
2002967c:	10641800 	addk	r3, r4, r3
20029680:	e8930010 	lwi	r4, r19, 16
20029684:	e8b30014 	lwi	r5, r19, 20
20029688:	f8830000 	swi	r4, r3, 0
2002968c:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20029690:	e873000c 	lwi	r3, r19, 12
20029694:	e8630010 	lwi	r3, r3, 16
20029698:	e8830000 	lwi	r4, r3, 0
2002969c:	30840001 	addik	r4, r4, 1
200296a0:	f8830000 	swi	r4, r3, 0
}
200296a4:	10330000 	addk	r1, r19, r0
200296a8:	ea610004 	lwi	r19, r1, 4
200296ac:	30210008 	addik	r1, r1, 8
200296b0:	b60f0008 	rtsd	r15, 8
200296b4:	80000000 	or	r0, r0, r0

200296b8 <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200296b8:	3021fff8 	addik	r1, r1, -8
200296bc:	fa610004 	swi	r19, r1, 4
200296c0:	12610000 	addk	r19, r1, r0
200296c4:	f8b3000c 	swi	r5, r19, 12
200296c8:	f8d30010 	swi	r6, r19, 16
200296cc:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200296d0:	e873000c 	lwi	r3, r19, 12
200296d4:	e8630010 	lwi	r3, r3, 16
200296d8:	e8830000 	lwi	r4, r3, 0
200296dc:	e873000c 	lwi	r3, r19, 12
200296e0:	e8a3000c 	lwi	r5, r3, 12
200296e4:	e8730010 	lwi	r3, r19, 16
200296e8:	64630402 	bslli	r3, r3, 2
200296ec:	10651800 	addk	r3, r5, r3
200296f0:	e8630000 	lwi	r3, r3, 0
200296f4:	14a32000 	rsubk	r5, r3, r4
200296f8:	30600001 	addik	r3, r0, 1
200296fc:	e8930014 	lwi	r4, r19, 20
20029700:	16442803 	cmpu	r18, r4, r5
20029704:	bcb20008 	bgei	r18, 8		// 2002970c
20029708:	10600000 	addk	r3, r0, r0
2002970c:	a46300ff 	andi	r3, r3, 255
}
20029710:	10330000 	addk	r1, r19, r0
20029714:	ea610004 	lwi	r19, r1, 4
20029718:	30210008 	addik	r1, r1, 8
2002971c:	b60f0008 	rtsd	r15, 8
20029720:	80000000 	or	r0, r0, r0

20029724 <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20029724:	3021fff8 	addik	r1, r1, -8
20029728:	fa610004 	swi	r19, r1, 4
2002972c:	12610000 	addk	r19, r1, r0
20029730:	f8b3000c 	swi	r5, r19, 12
20029734:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20029738:	e873000c 	lwi	r3, r19, 12
2002973c:	e8630010 	lwi	r3, r3, 16
20029740:	e8830000 	lwi	r4, r3, 0
20029744:	e873000c 	lwi	r3, r19, 12
20029748:	e8a3000c 	lwi	r5, r3, 12
2002974c:	e8730010 	lwi	r3, r19, 16
20029750:	64630402 	bslli	r3, r3, 2
20029754:	10651800 	addk	r3, r5, r3
20029758:	e8630000 	lwi	r3, r3, 0
2002975c:	14632000 	rsubk	r3, r3, r4
}
20029760:	10330000 	addk	r1, r19, r0
20029764:	ea610004 	lwi	r19, r1, 4
20029768:	30210008 	addik	r1, r1, 8
2002976c:	b60f0008 	rtsd	r15, 8
20029770:	80000000 	or	r0, r0, r0

20029774 <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20029774:	3021fff4 	addik	r1, r1, -12
20029778:	fa610008 	swi	r19, r1, 8
2002977c:	12610000 	addk	r19, r1, r0
20029780:	f8b30010 	swi	r5, r19, 16
20029784:	f8d30014 	swi	r6, r19, 20
20029788:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002978c:	f8130004 	swi	r0, r19, 4
20029790:	b800005c 	bri	92		// 200297ec
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20029794:	e8730010 	lwi	r3, r19, 16
20029798:	e8830000 	lwi	r4, r3, 0
2002979c:	e8730010 	lwi	r3, r19, 16
200297a0:	e8a3000c 	lwi	r5, r3, 12
200297a4:	e8730004 	lwi	r3, r19, 4
200297a8:	64630402 	bslli	r3, r3, 2
200297ac:	10651800 	addk	r3, r5, r3
200297b0:	e8a30000 	lwi	r5, r3, 0
200297b4:	e8730010 	lwi	r3, r19, 16
200297b8:	e8630010 	lwi	r3, r3, 16
200297bc:	e8630000 	lwi	r3, r3, 0
200297c0:	14632800 	rsubk	r3, r3, r5
200297c4:	10641800 	addk	r3, r4, r3
200297c8:	30830001 	addik	r4, r3, 1
200297cc:	e8730018 	lwi	r3, r19, 24
200297d0:	16441803 	cmpu	r18, r4, r3
200297d4:	bc52000c 	blti	r18, 12		// 200297e0
            return 0;
200297d8:	10600000 	addk	r3, r0, r0
200297dc:	b8000024 	bri	36		// 20029800
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200297e0:	e8730004 	lwi	r3, r19, 4
200297e4:	30630001 	addik	r3, r3, 1
200297e8:	f8730004 	swi	r3, r19, 4
200297ec:	e8930004 	lwi	r4, r19, 4
200297f0:	e8730014 	lwi	r3, r19, 20
200297f4:	16432003 	cmpu	r18, r3, r4
200297f8:	bc52ff9c 	blti	r18, -100		// 20029794
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200297fc:	30600001 	addik	r3, r0, 1
}
20029800:	10330000 	addk	r1, r19, r0
20029804:	ea610008 	lwi	r19, r1, 8
20029808:	3021000c 	addik	r1, r1, 12
2002980c:	b60f0008 	rtsd	r15, 8
20029810:	80000000 	or	r0, r0, r0

20029814 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20029814:	3021ffec 	addik	r1, r1, -20
20029818:	fa610010 	swi	r19, r1, 16
2002981c:	12610000 	addk	r19, r1, r0
20029820:	f8b30018 	swi	r5, r19, 24
20029824:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20029828:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002982c:	f8130004 	swi	r0, r19, 4
20029830:	b8000054 	bri	84		// 20029884
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20029834:	e8730018 	lwi	r3, r19, 24
20029838:	e8630010 	lwi	r3, r3, 16
2002983c:	e8830000 	lwi	r4, r3, 0
20029840:	e8730018 	lwi	r3, r19, 24
20029844:	e8a3000c 	lwi	r5, r3, 12
20029848:	e8730004 	lwi	r3, r19, 4
2002984c:	64630402 	bslli	r3, r3, 2
20029850:	10651800 	addk	r3, r5, r3
20029854:	e8630000 	lwi	r3, r3, 0
20029858:	14632000 	rsubk	r3, r3, r4
2002985c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20029860:	e8930008 	lwi	r4, r19, 8
20029864:	e873000c 	lwi	r3, r19, 12
20029868:	16441803 	cmpu	r18, r4, r3
2002986c:	bcb20008 	bgei	r18, 8		// 20029874
20029870:	10640000 	addk	r3, r4, r0
20029874:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20029878:	e8730004 	lwi	r3, r19, 4
2002987c:	30630001 	addik	r3, r3, 1
20029880:	f8730004 	swi	r3, r19, 4
20029884:	e8930004 	lwi	r4, r19, 4
20029888:	e873001c 	lwi	r3, r19, 28
2002988c:	16432003 	cmpu	r18, r3, r4
20029890:	bc52ffa4 	blti	r18, -92		// 20029834
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20029894:	e8730018 	lwi	r3, r19, 24
20029898:	e8830000 	lwi	r4, r3, 0
2002989c:	e8730008 	lwi	r3, r19, 8
200298a0:	14632000 	rsubk	r3, r3, r4
}
200298a4:	10330000 	addk	r1, r19, r0
200298a8:	ea610010 	lwi	r19, r1, 16
200298ac:	30210014 	addik	r1, r1, 20
200298b0:	b60f0008 	rtsd	r15, 8
200298b4:	80000000 	or	r0, r0, r0

200298b8 <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200298b8:	3021fff4 	addik	r1, r1, -12
200298bc:	fa610008 	swi	r19, r1, 8
200298c0:	12610000 	addk	r19, r1, r0
200298c4:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
200298c8:	e8730010 	lwi	r3, r19, 16
200298cc:	e8630010 	lwi	r3, r3, 16
200298d0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200298d4:	f8130004 	swi	r0, r19, 4
200298d8:	b8000028 	bri	40		// 20029900
        fifo->read_inds[i] = 0;
200298dc:	e8730010 	lwi	r3, r19, 16
200298e0:	e883000c 	lwi	r4, r3, 12
200298e4:	e8730004 	lwi	r3, r19, 4
200298e8:	64630402 	bslli	r3, r3, 2
200298ec:	10641800 	addk	r3, r4, r3
200298f0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200298f4:	e8730004 	lwi	r3, r19, 4
200298f8:	30630001 	addik	r3, r3, 1
200298fc:	f8730004 	swi	r3, r19, 4
20029900:	e8730010 	lwi	r3, r19, 16
20029904:	e8830008 	lwi	r4, r3, 8
20029908:	e8730004 	lwi	r3, r19, 4
2002990c:	16441803 	cmpu	r18, r4, r3
20029910:	bc52ffcc 	blti	r18, -52		// 200298dc
        fifo->read_inds[i] = 0;
    }
}
20029914:	10330000 	addk	r1, r19, r0
20029918:	ea610008 	lwi	r19, r1, 8
2002991c:	3021000c 	addik	r1, r1, 12
20029920:	b60f0008 	rtsd	r15, 8
20029924:	80000000 	or	r0, r0, r0

20029928 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20029928:	3021fff4 	addik	r1, r1, -12
2002992c:	fa610008 	swi	r19, r1, 8
20029930:	12610000 	addk	r19, r1, r0
20029934:	f8b30010 	swi	r5, r19, 16
20029938:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2002993c:	e8730010 	lwi	r3, r19, 16
20029940:	e8830004 	lwi	r4, r3, 4
20029944:	e8730010 	lwi	r3, r19, 16
20029948:	e8a3000c 	lwi	r5, r3, 12
2002994c:	e8730014 	lwi	r3, r19, 20
20029950:	64630402 	bslli	r3, r3, 2
20029954:	10651800 	addk	r3, r5, r3
20029958:	e8a30000 	lwi	r5, r3, 0
2002995c:	e8730010 	lwi	r3, r19, 16
20029960:	e8630000 	lwi	r3, r3, 0
20029964:	3063ffff 	addik	r3, r3, -1
20029968:	84651800 	and	r3, r5, r3
2002996c:	64630402 	bslli	r3, r3, 2
20029970:	10641800 	addk	r3, r4, r3
20029974:	e8630000 	lwi	r3, r3, 0
20029978:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2002997c:	e8730010 	lwi	r3, r19, 16
20029980:	e883000c 	lwi	r4, r3, 12
20029984:	e8730014 	lwi	r3, r19, 20
20029988:	64630402 	bslli	r3, r3, 2
2002998c:	10641800 	addk	r3, r4, r3
20029990:	e8830000 	lwi	r4, r3, 0
20029994:	30840001 	addik	r4, r4, 1
20029998:	f8830000 	swi	r4, r3, 0
    return value;
2002999c:	e8730004 	lwi	r3, r19, 4
}
200299a0:	10330000 	addk	r1, r19, r0
200299a4:	ea610008 	lwi	r19, r1, 8
200299a8:	3021000c 	addik	r1, r1, 12
200299ac:	b60f0008 	rtsd	r15, 8
200299b0:	80000000 	or	r0, r0, r0

200299b4 <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200299b4:	3021fff8 	addik	r1, r1, -8
200299b8:	fa610004 	swi	r19, r1, 4
200299bc:	12610000 	addk	r19, r1, r0
200299c0:	f8b3000c 	swi	r5, r19, 12
200299c4:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200299c8:	e873000c 	lwi	r3, r19, 12
200299cc:	e8830004 	lwi	r4, r3, 4
200299d0:	e873000c 	lwi	r3, r19, 12
200299d4:	e8630010 	lwi	r3, r3, 16
200299d8:	e8a30000 	lwi	r5, r3, 0
200299dc:	e873000c 	lwi	r3, r19, 12
200299e0:	e8630000 	lwi	r3, r3, 0
200299e4:	3063ffff 	addik	r3, r3, -1
200299e8:	84651800 	and	r3, r5, r3
200299ec:	64630402 	bslli	r3, r3, 2
200299f0:	10641800 	addk	r3, r4, r3
200299f4:	e8930010 	lwi	r4, r19, 16
200299f8:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
200299fc:	e873000c 	lwi	r3, r19, 12
20029a00:	e8630010 	lwi	r3, r3, 16
20029a04:	e8830000 	lwi	r4, r3, 0
20029a08:	30840001 	addik	r4, r4, 1
20029a0c:	f8830000 	swi	r4, r3, 0
}
20029a10:	10330000 	addk	r1, r19, r0
20029a14:	ea610004 	lwi	r19, r1, 4
20029a18:	30210008 	addik	r1, r1, 8
20029a1c:	b60f0008 	rtsd	r15, 8
20029a20:	80000000 	or	r0, r0, r0

20029a24 <read_BTYPE>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_BTYPE() {
20029a24:	3021ffe0 	addik	r1, r1, -32
20029a28:	f9e10000 	swi	r15, r1, 0
20029a2c:	fa61001c 	swi	r19, r1, 28
20029a30:	12610000 	addk	r19, r1, r0
		index_BTYPE = decoder_texture_DCReconstruction_addressing_BTYPE->read_inds[2];
20029a34:	b0002004 	imm	8196
20029a38:	e8607754 	lwi	r3, r0, 30548	// 20047754 <decoder_texture_DCReconstruction_addressing_BTYPE>
20029a3c:	e863000c 	lwi	r3, r3, 12
20029a40:	e8630008 	lwi	r3, r3, 8
20029a44:	b0002006 	imm	8198
20029a48:	f8601e94 	swi	r3, r0, 7828	// 20061e94 <index_BTYPE>
		numTokens_BTYPE = index_BTYPE + fifo_i16_get_num_tokens(decoder_texture_DCReconstruction_addressing_BTYPE, 2);
20029a4c:	b0002004 	imm	8196
20029a50:	e8607754 	lwi	r3, r0, 30548	// 20047754 <decoder_texture_DCReconstruction_addressing_BTYPE>
20029a54:	10a30000 	addk	r5, r3, r0
20029a58:	30c00002 	addik	r6, r0, 2
20029a5c:	b9f4e48c 	brlid	r15, -7028	// 20027ee8 <fifo_i16_get_num_tokens>
20029a60:	80000000 	or	r0, r0, r0
20029a64:	10830000 	addk	r4, r3, r0
20029a68:	b0002006 	imm	8198
20029a6c:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
20029a70:	10641800 	addk	r3, r4, r3
20029a74:	b0002006 	imm	8198
20029a78:	f8601e98 	swi	r3, r0, 7832	// 20061e98 <numTokens_BTYPE>
	}
20029a7c:	e9e10000 	lwi	r15, r1, 0
20029a80:	10330000 	addk	r1, r19, r0
20029a84:	ea61001c 	lwi	r19, r1, 28
20029a88:	30210020 	addik	r1, r1, 32
20029a8c:	b60f0008 	rtsd	r15, 8
20029a90:	80000000 	or	r0, r0, r0

20029a94 <read_end_BTYPE>:
	
	static void read_end_BTYPE() {
20029a94:	3021fff8 	addik	r1, r1, -8
20029a98:	fa610004 	swi	r19, r1, 4
20029a9c:	12610000 	addk	r19, r1, r0
		decoder_texture_DCReconstruction_addressing_BTYPE->read_inds[2] = index_BTYPE;
20029aa0:	b0002004 	imm	8196
20029aa4:	e8607754 	lwi	r3, r0, 30548	// 20047754 <decoder_texture_DCReconstruction_addressing_BTYPE>
20029aa8:	e863000c 	lwi	r3, r3, 12
20029aac:	30630008 	addik	r3, r3, 8
20029ab0:	b0002006 	imm	8198
20029ab4:	e8801e94 	lwi	r4, r0, 7828	// 20061e94 <index_BTYPE>
20029ab8:	f8830000 	swi	r4, r3, 0
	}
20029abc:	10330000 	addk	r1, r19, r0
20029ac0:	ea610004 	lwi	r19, r1, 4
20029ac4:	30210008 	addik	r1, r1, 8
20029ac8:	b60f0008 	rtsd	r15, 8
20029acc:	80000000 	or	r0, r0, r0

20029ad0 <write_A>:

	static void write_A() {
20029ad0:	3021ffe0 	addik	r1, r1, -32
20029ad4:	f9e10000 	swi	r15, r1, 0
20029ad8:	fa61001c 	swi	r19, r1, 28
20029adc:	12610000 	addk	r19, r1, r0
		index_A = (*decoder_texture_DCReconstruction_addressing_A->write_ind);
20029ae0:	b0002004 	imm	8196
20029ae4:	e86077bc 	lwi	r3, r0, 30652	// 200477bc <decoder_texture_DCReconstruction_addressing_A>
20029ae8:	e8630010 	lwi	r3, r3, 16
20029aec:	e8630000 	lwi	r3, r3, 0
20029af0:	b0002006 	imm	8198
20029af4:	f8601e9c 	swi	r3, r0, 7836	// 20061e9c <index_A>
		numFree_A = index_A + fifo_i16_get_room(decoder_texture_DCReconstruction_addressing_A, NUM_READERS_A);
20029af8:	b0002004 	imm	8196
20029afc:	e86077bc 	lwi	r3, r0, 30652	// 200477bc <decoder_texture_DCReconstruction_addressing_A>
20029b00:	10a30000 	addk	r5, r3, r0
20029b04:	30c00001 	addik	r6, r0, 1
20029b08:	b9f4e4d0 	brlid	r15, -6960	// 20027fd8 <fifo_i16_get_room>
20029b0c:	80000000 	or	r0, r0, r0
20029b10:	10830000 	addk	r4, r3, r0
20029b14:	b0002006 	imm	8198
20029b18:	e8601e9c 	lwi	r3, r0, 7836	// 20061e9c <index_A>
20029b1c:	10641800 	addk	r3, r4, r3
20029b20:	b0002006 	imm	8198
20029b24:	f8601ea0 	swi	r3, r0, 7840	// 20061ea0 <numFree_A>
	}
20029b28:	e9e10000 	lwi	r15, r1, 0
20029b2c:	10330000 	addk	r1, r19, r0
20029b30:	ea61001c 	lwi	r19, r1, 28
20029b34:	30210020 	addik	r1, r1, 32
20029b38:	b60f0008 	rtsd	r15, 8
20029b3c:	80000000 	or	r0, r0, r0

20029b40 <write_end_A>:
	
	static void write_end_A() {
20029b40:	3021fff8 	addik	r1, r1, -8
20029b44:	fa610004 	swi	r19, r1, 4
20029b48:	12610000 	addk	r19, r1, r0
		(*decoder_texture_DCReconstruction_addressing_A->write_ind) = index_A;
20029b4c:	b0002004 	imm	8196
20029b50:	e86077bc 	lwi	r3, r0, 30652	// 200477bc <decoder_texture_DCReconstruction_addressing_A>
20029b54:	e8630010 	lwi	r3, r3, 16
20029b58:	b0002006 	imm	8198
20029b5c:	e8801e9c 	lwi	r4, r0, 7836	// 20061e9c <index_A>
20029b60:	f8830000 	swi	r4, r3, 0
	}
20029b64:	10330000 	addk	r1, r19, r0
20029b68:	ea610004 	lwi	r19, r1, 4
20029b6c:	30210008 	addik	r1, r1, 8
20029b70:	b60f0008 	rtsd	r15, 8
20029b74:	80000000 	or	r0, r0, r0

20029b78 <write_B>:
	static void write_B() {
20029b78:	3021ffe0 	addik	r1, r1, -32
20029b7c:	f9e10000 	swi	r15, r1, 0
20029b80:	fa61001c 	swi	r19, r1, 28
20029b84:	12610000 	addk	r19, r1, r0
		index_B = (*decoder_texture_DCReconstruction_addressing_B->write_ind);
20029b88:	b0002004 	imm	8196
20029b8c:	e86077b4 	lwi	r3, r0, 30644	// 200477b4 <decoder_texture_DCReconstruction_addressing_B>
20029b90:	e8630010 	lwi	r3, r3, 16
20029b94:	e8630000 	lwi	r3, r3, 0
20029b98:	b0002006 	imm	8198
20029b9c:	f8601ea4 	swi	r3, r0, 7844	// 20061ea4 <index_B>
		numFree_B = index_B + fifo_i16_get_room(decoder_texture_DCReconstruction_addressing_B, NUM_READERS_B);
20029ba0:	b0002004 	imm	8196
20029ba4:	e86077b4 	lwi	r3, r0, 30644	// 200477b4 <decoder_texture_DCReconstruction_addressing_B>
20029ba8:	10a30000 	addk	r5, r3, r0
20029bac:	30c00001 	addik	r6, r0, 1
20029bb0:	b9f4e428 	brlid	r15, -7128	// 20027fd8 <fifo_i16_get_room>
20029bb4:	80000000 	or	r0, r0, r0
20029bb8:	10830000 	addk	r4, r3, r0
20029bbc:	b0002006 	imm	8198
20029bc0:	e8601ea4 	lwi	r3, r0, 7844	// 20061ea4 <index_B>
20029bc4:	10641800 	addk	r3, r4, r3
20029bc8:	b0002006 	imm	8198
20029bcc:	f8601ea8 	swi	r3, r0, 7848	// 20061ea8 <numFree_B>
	}
20029bd0:	e9e10000 	lwi	r15, r1, 0
20029bd4:	10330000 	addk	r1, r19, r0
20029bd8:	ea61001c 	lwi	r19, r1, 28
20029bdc:	30210020 	addik	r1, r1, 32
20029be0:	b60f0008 	rtsd	r15, 8
20029be4:	80000000 	or	r0, r0, r0

20029be8 <write_end_B>:
	
	static void write_end_B() {
20029be8:	3021fff8 	addik	r1, r1, -8
20029bec:	fa610004 	swi	r19, r1, 4
20029bf0:	12610000 	addk	r19, r1, r0
		(*decoder_texture_DCReconstruction_addressing_B->write_ind) = index_B;
20029bf4:	b0002004 	imm	8196
20029bf8:	e86077b4 	lwi	r3, r0, 30644	// 200477b4 <decoder_texture_DCReconstruction_addressing_B>
20029bfc:	e8630010 	lwi	r3, r3, 16
20029c00:	b0002006 	imm	8198
20029c04:	e8801ea4 	lwi	r4, r0, 7844	// 20061ea4 <index_B>
20029c08:	f8830000 	swi	r4, r3, 0
	}
20029c0c:	10330000 	addk	r1, r19, r0
20029c10:	ea610004 	lwi	r19, r1, 4
20029c14:	30210008 	addik	r1, r1, 8
20029c18:	b60f0008 	rtsd	r15, 8
20029c1c:	80000000 	or	r0, r0, r0

20029c20 <write_C>:
	static void write_C() {
20029c20:	3021ffe0 	addik	r1, r1, -32
20029c24:	f9e10000 	swi	r15, r1, 0
20029c28:	fa61001c 	swi	r19, r1, 28
20029c2c:	12610000 	addk	r19, r1, r0
		index_C = (*decoder_texture_DCReconstruction_addressing_C->write_ind);
20029c30:	b0002004 	imm	8196
20029c34:	e86077c4 	lwi	r3, r0, 30660	// 200477c4 <decoder_texture_DCReconstruction_addressing_C>
20029c38:	e8630010 	lwi	r3, r3, 16
20029c3c:	e8630000 	lwi	r3, r3, 0
20029c40:	b0002006 	imm	8198
20029c44:	f8601eac 	swi	r3, r0, 7852	// 20061eac <index_C>
		numFree_C = index_C + fifo_i16_get_room(decoder_texture_DCReconstruction_addressing_C, NUM_READERS_C);
20029c48:	b0002004 	imm	8196
20029c4c:	e86077c4 	lwi	r3, r0, 30660	// 200477c4 <decoder_texture_DCReconstruction_addressing_C>
20029c50:	10a30000 	addk	r5, r3, r0
20029c54:	30c00001 	addik	r6, r0, 1
20029c58:	b9f4e380 	brlid	r15, -7296	// 20027fd8 <fifo_i16_get_room>
20029c5c:	80000000 	or	r0, r0, r0
20029c60:	10830000 	addk	r4, r3, r0
20029c64:	b0002006 	imm	8198
20029c68:	e8601eac 	lwi	r3, r0, 7852	// 20061eac <index_C>
20029c6c:	10641800 	addk	r3, r4, r3
20029c70:	b0002006 	imm	8198
20029c74:	f8601eb0 	swi	r3, r0, 7856	// 20061eb0 <numFree_C>
	}
20029c78:	e9e10000 	lwi	r15, r1, 0
20029c7c:	10330000 	addk	r1, r19, r0
20029c80:	ea61001c 	lwi	r19, r1, 28
20029c84:	30210020 	addik	r1, r1, 32
20029c88:	b60f0008 	rtsd	r15, 8
20029c8c:	80000000 	or	r0, r0, r0

20029c90 <write_end_C>:
	
	static void write_end_C() {
20029c90:	3021fff8 	addik	r1, r1, -8
20029c94:	fa610004 	swi	r19, r1, 4
20029c98:	12610000 	addk	r19, r1, r0
		(*decoder_texture_DCReconstruction_addressing_C->write_ind) = index_C;
20029c9c:	b0002004 	imm	8196
20029ca0:	e86077c4 	lwi	r3, r0, 30660	// 200477c4 <decoder_texture_DCReconstruction_addressing_C>
20029ca4:	e8630010 	lwi	r3, r3, 16
20029ca8:	b0002006 	imm	8198
20029cac:	e8801eac 	lwi	r4, r0, 7852	// 20061eac <index_C>
20029cb0:	f8830000 	swi	r4, r3, 0
	}
20029cb4:	10330000 	addk	r1, r19, r0
20029cb8:	ea610004 	lwi	r19, r1, 4
20029cbc:	30210008 	addik	r1, r1, 8
20029cc0:	b60f0008 	rtsd	r15, 8
20029cc4:	80000000 	or	r0, r0, r0

20029cc8 <decrement>:
	////////////////////////////////////////////////////////////////////////////////
	// Functions/procedures
	static i8 decrement(i8 p);
	static i16 access(i8 p, i8 c);

	static i8 decrement(i8 p) {
20029cc8:	3021fff0 	addik	r1, r1, -16
20029ccc:	fa61000c 	swi	r19, r1, 12
20029cd0:	12610000 	addk	r19, r1, r0
20029cd4:	10650000 	addk	r3, r5, r0
20029cd8:	f0730014 	sbi	r3, r19, 20
		i32 tmp_if;
		i32 local_BUF_SIZE;
	
		if (p == 1) {
20029cdc:	e0730014 	lbui	r3, r19, 20
20029ce0:	90630060 	sext8	r3, r3
20029ce4:	a8630001 	xori	r3, r3, 1
20029ce8:	bc23001c 	bnei	r3, 28		// 20029d04
			local_BUF_SIZE = BUF_SIZE;
20029cec:	3060000e 	addik	r3, r0, 14
20029cf0:	f8730008 	swi	r3, r19, 8
			tmp_if = local_BUF_SIZE - 1;
20029cf4:	e8730008 	lwi	r3, r19, 8
20029cf8:	3063ffff 	addik	r3, r3, -1
20029cfc:	f8730004 	swi	r3, r19, 4
20029d00:	b8000014 	bri	20		// 20029d14
		} else {
			tmp_if = p - 1;
20029d04:	e0730014 	lbui	r3, r19, 20
20029d08:	90630060 	sext8	r3, r3
20029d0c:	3063ffff 	addik	r3, r3, -1
20029d10:	f8730004 	swi	r3, r19, 4
		}
		return tmp_if;
20029d14:	e8730004 	lwi	r3, r19, 4
20029d18:	90630060 	sext8	r3, r3
	}
20029d1c:	10330000 	addk	r1, r19, r0
20029d20:	ea61000c 	lwi	r19, r1, 12
20029d24:	30210010 	addik	r1, r1, 16
20029d28:	b60f0008 	rtsd	r15, 8
20029d2c:	80000000 	or	r0, r0, r0

20029d30 <access>:
	static i16 access(i8 p, i8 c) {
20029d30:	3021fff8 	addik	r1, r1, -8
20029d34:	fa610004 	swi	r19, r1, 4
20029d38:	12610000 	addk	r19, r1, r0
20029d3c:	10850000 	addk	r4, r5, r0
20029d40:	10660000 	addk	r3, r6, r0
20029d44:	f093000c 	sbi	r4, r19, 12
20029d48:	f0730010 	sbi	r3, r19, 16
	
		return p << 3 | c;
20029d4c:	e073000c 	lbui	r3, r19, 12
20029d50:	90630060 	sext8	r3, r3
20029d54:	64630403 	bslli	r3, r3, 3
20029d58:	90830061 	sext16	r4, r3
20029d5c:	e0730010 	lbui	r3, r19, 16
20029d60:	90630060 	sext8	r3, r3
20029d64:	90630061 	sext16	r3, r3
20029d68:	80641800 	or	r3, r4, r3
20029d6c:	90630061 	sext16	r3, r3
	}
20029d70:	10330000 	addk	r1, r19, r0
20029d74:	ea610004 	lwi	r19, r1, 4
20029d78:	30210008 	addik	r1, r1, 8
20029d7c:	b60f0008 	rtsd	r15, 8
20029d80:	80000000 	or	r0, r0, r0

20029d84 <isSchedulable_start>:

	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_start() {
20029d84:	3021ffec 	addik	r1, r1, -20
20029d88:	fa610010 	swi	r19, r1, 16
20029d8c:	12610000 	addk	r19, r1, r0
		i32 result;
		i16 cmd;
		i32 local_NEWVOP;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20029d90:	b0002004 	imm	8196
20029d94:	e8607754 	lwi	r3, r0, 30548	// 20047754 <decoder_texture_DCReconstruction_addressing_BTYPE>
20029d98:	e8830004 	lwi	r4, r3, 4
20029d9c:	b0002006 	imm	8198
20029da0:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
20029da4:	a46301ff 	andi	r3, r3, 511
20029da8:	10631800 	addk	r3, r3, r3
20029dac:	10641800 	addk	r3, r4, r3
20029db0:	e4630000 	lhui	r3, r3, 0
20029db4:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
20029db8:	30600800 	addik	r3, r0, 2048
20029dbc:	f8730008 	swi	r3, r19, 8
		result = (cmd & local_NEWVOP) != 0;
20029dc0:	e4730004 	lhui	r3, r19, 4
20029dc4:	90830061 	sext16	r4, r3
20029dc8:	e8730008 	lwi	r3, r19, 8
20029dcc:	84841800 	and	r4, r4, r3
20029dd0:	10600000 	addk	r3, r0, r0
20029dd4:	8c641c00 	pcmpne	r3, r4, r3
20029dd8:	a46300ff 	andi	r3, r3, 255
20029ddc:	f873000c 	swi	r3, r19, 12
		return result;
20029de0:	e873000c 	lwi	r3, r19, 12
	}
20029de4:	10330000 	addk	r1, r19, r0
20029de8:	ea610010 	lwi	r19, r1, 16
20029dec:	30210014 	addik	r1, r1, 20
20029df0:	b60f0008 	rtsd	r15, 8
20029df4:	80000000 	or	r0, r0, r0

20029df8 <start>:
	
	static void start() {
20029df8:	3021ffd8 	addik	r1, r1, -40
20029dfc:	f9e10000 	swi	r15, r1, 0
20029e00:	fa610024 	swi	r19, r1, 36
20029e04:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20029e08:	b0002006 	imm	8198
20029e0c:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
20029e10:	a46301ff 	andi	r3, r3, 511
20029e14:	f873001c 	swi	r3, r19, 28
	
		i16 cmd;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20029e18:	b0002004 	imm	8196
20029e1c:	e8607754 	lwi	r3, r0, 30548	// 20047754 <decoder_texture_DCReconstruction_addressing_BTYPE>
20029e20:	e8830004 	lwi	r4, r3, 4
20029e24:	b0002006 	imm	8198
20029e28:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
20029e2c:	a46301ff 	andi	r3, r3, 511
20029e30:	10631800 	addk	r3, r3, r3
20029e34:	10641800 	addk	r3, r4, r3
20029e38:	e4630000 	lhui	r3, r3, 0
20029e3c:	f4730020 	shi	r3, r19, 32
		mbx = 0;
20029e40:	b0002006 	imm	8198
20029e44:	f0001eb4 	sbi	r0, r0, 7860	// 20061eb4 <mbx>
		top_edge = 1;
20029e48:	30600001 	addik	r3, r0, 1
20029e4c:	b0002004 	imm	8196
20029e50:	f8607820 	swi	r3, r0, 30752	// 20047820 <top_edge>
		left_edge = 1;
20029e54:	30600001 	addik	r3, r0, 1
20029e58:	b0002006 	imm	8198
20029e5c:	f8601eb8 	swi	r3, r0, 7864	// 20061eb8 <left_edge>
		comp = 0;
20029e60:	b0002006 	imm	8198
20029e64:	f0001ebc 	sbi	r0, r0, 7868	// 20061ebc <comp>
	
		// Update ports indexes
		index_BTYPE += 1;
20029e68:	b0002006 	imm	8198
20029e6c:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
20029e70:	30630001 	addik	r3, r3, 1
20029e74:	b0002006 	imm	8198
20029e78:	f8601e94 	swi	r3, r0, 7828	// 20061e94 <index_BTYPE>
		
		read_end_BTYPE();
20029e7c:	b9f4fc18 	brlid	r15, -1000	// 20029a94 <read_end_BTYPE>
20029e80:	80000000 	or	r0, r0, r0
	}
20029e84:	e9e10000 	lwi	r15, r1, 0
20029e88:	10330000 	addk	r1, r19, r0
20029e8c:	ea610024 	lwi	r19, r1, 36
20029e90:	30210028 	addik	r1, r1, 40
20029e94:	b60f0008 	rtsd	r15, 8
20029e98:	80000000 	or	r0, r0, r0

20029e9c <isSchedulable_getw>:
	static i32 isSchedulable_getw() {
20029e9c:	3021fff4 	addik	r1, r1, -12
20029ea0:	fa610008 	swi	r19, r1, 8
20029ea4:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
20029ea8:	30600001 	addik	r3, r0, 1
20029eac:	f8730004 	swi	r3, r19, 4
		return result;
20029eb0:	e8730004 	lwi	r3, r19, 4
	}
20029eb4:	10330000 	addk	r1, r19, r0
20029eb8:	ea610008 	lwi	r19, r1, 8
20029ebc:	3021000c 	addik	r1, r1, 12
20029ec0:	b60f0008 	rtsd	r15, 8
20029ec4:	80000000 	or	r0, r0, r0

20029ec8 <getw_replaced>:
	
	static void getw_replaced() {
20029ec8:	3021ffd8 	addik	r1, r1, -40
20029ecc:	f9e10000 	swi	r15, r1, 0
20029ed0:	fa610024 	swi	r19, r1, 36
20029ed4:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20029ed8:	b0002006 	imm	8198
20029edc:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
20029ee0:	a46301ff 	andi	r3, r3, 511
20029ee4:	f873001c 	swi	r3, r19, 28
	
		i16 w;
	
		w = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20029ee8:	b0002004 	imm	8196
20029eec:	e8607754 	lwi	r3, r0, 30548	// 20047754 <decoder_texture_DCReconstruction_addressing_BTYPE>
20029ef0:	e8830004 	lwi	r4, r3, 4
20029ef4:	b0002006 	imm	8198
20029ef8:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
20029efc:	a46301ff 	andi	r3, r3, 511
20029f00:	10631800 	addk	r3, r3, r3
20029f04:	10641800 	addk	r3, r4, r3
20029f08:	e4630000 	lhui	r3, r3, 0
20029f0c:	f4730020 	shi	r3, r19, 32
		mbwidth = w;
20029f10:	e4730020 	lhui	r3, r19, 32
20029f14:	90630060 	sext8	r3, r3
20029f18:	b0002006 	imm	8198
20029f1c:	f0601ebd 	sbi	r3, r0, 7869	// 20061ebd <mbwidth>
		ptr = 1;
20029f20:	30600001 	addik	r3, r0, 1
20029f24:	b0002006 	imm	8198
20029f28:	f0602080 	sbi	r3, r0, 8320	// 20062080 <ptr>
		ptr_left = 2;
20029f2c:	30600002 	addik	r3, r0, 2
20029f30:	b0002006 	imm	8198
20029f34:	f0602081 	sbi	r3, r0, 8321	// 20062081 <ptr_left>
		ptr_above = 1 + w;
20029f38:	e4730020 	lhui	r3, r19, 32
20029f3c:	a46300ff 	andi	r3, r3, 255
20029f40:	30630001 	addik	r3, r3, 1
20029f44:	a46300ff 	andi	r3, r3, 255
20029f48:	90630060 	sext8	r3, r3
20029f4c:	b0002006 	imm	8198
20029f50:	f0602082 	sbi	r3, r0, 8322	// 20062082 <ptr_above>
		ptr_above_left = 2 + w;
20029f54:	e4730020 	lhui	r3, r19, 32
20029f58:	a46300ff 	andi	r3, r3, 255
20029f5c:	30630002 	addik	r3, r3, 2
20029f60:	a46300ff 	andi	r3, r3, 255
20029f64:	90630060 	sext8	r3, r3
20029f68:	b0002006 	imm	8198
20029f6c:	f0602083 	sbi	r3, r0, 8323	// 20062083 <ptr_above_left>
	
		// Update ports indexes
		index_BTYPE += 1;
20029f70:	b0002006 	imm	8198
20029f74:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
20029f78:	30630001 	addik	r3, r3, 1
20029f7c:	b0002006 	imm	8198
20029f80:	f8601e94 	swi	r3, r0, 7828	// 20061e94 <index_BTYPE>
		
		read_end_BTYPE();
20029f84:	b9f4fb10 	brlid	r15, -1264	// 20029a94 <read_end_BTYPE>
20029f88:	80000000 	or	r0, r0, r0
	}
20029f8c:	e9e10000 	lwi	r15, r1, 0
20029f90:	10330000 	addk	r1, r19, r0
20029f94:	ea610024 	lwi	r19, r1, 36
20029f98:	30210028 	addik	r1, r1, 40
20029f9c:	b60f0008 	rtsd	r15, 8
20029fa0:	80000000 	or	r0, r0, r0

20029fa4 <isSchedulable_geth>:
	static i32 isSchedulable_geth() {
20029fa4:	3021fff4 	addik	r1, r1, -12
20029fa8:	fa610008 	swi	r19, r1, 8
20029fac:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
20029fb0:	30600001 	addik	r3, r0, 1
20029fb4:	f8730004 	swi	r3, r19, 4
		return result;
20029fb8:	e8730004 	lwi	r3, r19, 4
	}
20029fbc:	10330000 	addk	r1, r19, r0
20029fc0:	ea610008 	lwi	r19, r1, 8
20029fc4:	3021000c 	addik	r1, r1, 12
20029fc8:	b60f0008 	rtsd	r15, 8
20029fcc:	80000000 	or	r0, r0, r0

20029fd0 <geth>:
	
	static void geth() {
20029fd0:	3021ffd8 	addik	r1, r1, -40
20029fd4:	f9e10000 	swi	r15, r1, 0
20029fd8:	fa610024 	swi	r19, r1, 36
20029fdc:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20029fe0:	b0002006 	imm	8198
20029fe4:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
20029fe8:	a46301ff 	andi	r3, r3, 511
20029fec:	f873001c 	swi	r3, r19, 28
	
		i16 h;
	
		h = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20029ff0:	b0002004 	imm	8196
20029ff4:	e8607754 	lwi	r3, r0, 30548	// 20047754 <decoder_texture_DCReconstruction_addressing_BTYPE>
20029ff8:	e8830004 	lwi	r4, r3, 4
20029ffc:	b0002006 	imm	8198
2002a000:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
2002a004:	a46301ff 	andi	r3, r3, 511
2002a008:	10631800 	addk	r3, r3, r3
2002a00c:	10641800 	addk	r3, r4, r3
2002a010:	e4630000 	lhui	r3, r3, 0
2002a014:	f4730020 	shi	r3, r19, 32
	
		// Update ports indexes
		index_BTYPE += 1;
2002a018:	b0002006 	imm	8198
2002a01c:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
2002a020:	30630001 	addik	r3, r3, 1
2002a024:	b0002006 	imm	8198
2002a028:	f8601e94 	swi	r3, r0, 7828	// 20061e94 <index_BTYPE>
		
		read_end_BTYPE();
2002a02c:	b9f4fa68 	brlid	r15, -1432	// 20029a94 <read_end_BTYPE>
2002a030:	80000000 	or	r0, r0, r0
	}
2002a034:	e9e10000 	lwi	r15, r1, 0
2002a038:	10330000 	addk	r1, r19, r0
2002a03c:	ea610024 	lwi	r19, r1, 36
2002a040:	30210028 	addik	r1, r1, 40
2002a044:	b60f0008 	rtsd	r15, 8
2002a048:	80000000 	or	r0, r0, r0

2002a04c <isSchedulable_read_intra>:
	static i32 isSchedulable_read_intra() {
2002a04c:	3021ffec 	addik	r1, r1, -20
2002a050:	fa610010 	swi	r19, r1, 16
2002a054:	12610000 	addk	r19, r1, r0
		i32 result;
		i16 btype;
		i32 local_INTRA;
	
		btype = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2002a058:	b0002004 	imm	8196
2002a05c:	e8607754 	lwi	r3, r0, 30548	// 20047754 <decoder_texture_DCReconstruction_addressing_BTYPE>
2002a060:	e8830004 	lwi	r4, r3, 4
2002a064:	b0002006 	imm	8198
2002a068:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
2002a06c:	a46301ff 	andi	r3, r3, 511
2002a070:	10631800 	addk	r3, r3, r3
2002a074:	10641800 	addk	r3, r4, r3
2002a078:	e4630000 	lhui	r3, r3, 0
2002a07c:	f4730004 	shi	r3, r19, 4
		local_INTRA = ConstantsBtype_INTRA;
2002a080:	30600400 	addik	r3, r0, 1024	// 400 <_HEAP_SIZE>
2002a084:	f8730008 	swi	r3, r19, 8
		result = (btype & local_INTRA) != 0;
2002a088:	e4730004 	lhui	r3, r19, 4
2002a08c:	90830061 	sext16	r4, r3
2002a090:	e8730008 	lwi	r3, r19, 8
2002a094:	84841800 	and	r4, r4, r3
2002a098:	10600000 	addk	r3, r0, r0
2002a09c:	8c641c00 	pcmpne	r3, r4, r3
2002a0a0:	a46300ff 	andi	r3, r3, 255
2002a0a4:	f873000c 	swi	r3, r19, 12
		return result;
2002a0a8:	e873000c 	lwi	r3, r19, 12
	}
2002a0ac:	10330000 	addk	r1, r19, r0
2002a0b0:	ea610010 	lwi	r19, r1, 16
2002a0b4:	30210014 	addik	r1, r1, 20
2002a0b8:	b60f0008 	rtsd	r15, 8
2002a0bc:	80000000 	or	r0, r0, r0

2002a0c0 <read_intra>:
	
	static void read_intra() {
2002a0c0:	3021ffd4 	addik	r1, r1, -44
2002a0c4:	f9e10000 	swi	r15, r1, 0
2002a0c8:	fa610028 	swi	r19, r1, 40
2002a0cc:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2002a0d0:	b0002006 	imm	8198
2002a0d4:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
2002a0d8:	a46301ff 	andi	r3, r3, 511
2002a0dc:	f873001c 	swi	r3, r19, 28
		i16 btype;
		i8 local_ptr;
		i8 local_comp;
		i16 tmp_access;
	
		btype = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2002a0e0:	b0002004 	imm	8196
2002a0e4:	e8607754 	lwi	r3, r0, 30548	// 20047754 <decoder_texture_DCReconstruction_addressing_BTYPE>
2002a0e8:	e8830004 	lwi	r4, r3, 4
2002a0ec:	b0002006 	imm	8198
2002a0f0:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
2002a0f4:	a46301ff 	andi	r3, r3, 511
2002a0f8:	10631800 	addk	r3, r3, r3
2002a0fc:	10641800 	addk	r3, r4, r3
2002a100:	e4630000 	lhui	r3, r3, 0
2002a104:	f4730020 	shi	r3, r19, 32
		local_ptr = ptr;
2002a108:	b0002006 	imm	8198
2002a10c:	e0602080 	lbui	r3, r0, 8320	// 20062080 <ptr>
2002a110:	f0730022 	sbi	r3, r19, 34
		local_comp = comp;
2002a114:	b0002006 	imm	8198
2002a118:	e0601ebc 	lbui	r3, r0, 7868	// 20061ebc <comp>
2002a11c:	f0730023 	sbi	r3, r19, 35
		tmp_access = access(local_ptr, local_comp);
2002a120:	e0730022 	lbui	r3, r19, 34
2002a124:	90830060 	sext8	r4, r3
2002a128:	e0730023 	lbui	r3, r19, 35
2002a12c:	90630060 	sext8	r3, r3
2002a130:	10a40000 	addk	r5, r4, r0
2002a134:	10c30000 	addk	r6, r3, r0
2002a138:	b9f4fbf8 	brlid	r15, -1032	// 20029d30 <access>
2002a13c:	80000000 	or	r0, r0, r0
2002a140:	f4730024 	shi	r3, r19, 36
		coded[tmp_access] = 1;
2002a144:	e4730024 	lhui	r3, r19, 36
2002a148:	90630061 	sext16	r3, r3
2002a14c:	64630402 	bslli	r3, r3, 2
2002a150:	b0002006 	imm	8198
2002a154:	30631ec0 	addik	r3, r3, 7872
2002a158:	30800001 	addik	r4, r0, 1
2002a15c:	f8830000 	swi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
2002a160:	b0002006 	imm	8198
2002a164:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
2002a168:	30630001 	addik	r3, r3, 1
2002a16c:	b0002006 	imm	8198
2002a170:	f8601e94 	swi	r3, r0, 7828	// 20061e94 <index_BTYPE>
		
		read_end_BTYPE();
2002a174:	b9f4f920 	brlid	r15, -1760	// 20029a94 <read_end_BTYPE>
2002a178:	80000000 	or	r0, r0, r0
	}
2002a17c:	e9e10000 	lwi	r15, r1, 0
2002a180:	10330000 	addk	r1, r19, r0
2002a184:	ea610028 	lwi	r19, r1, 40
2002a188:	3021002c 	addik	r1, r1, 44
2002a18c:	b60f0008 	rtsd	r15, 8
2002a190:	80000000 	or	r0, r0, r0

2002a194 <isSchedulable_read_other>:
	static i32 isSchedulable_read_other() {
2002a194:	3021fff4 	addik	r1, r1, -12
2002a198:	fa610008 	swi	r19, r1, 8
2002a19c:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2002a1a0:	30600001 	addik	r3, r0, 1
2002a1a4:	f8730004 	swi	r3, r19, 4
		return result;
2002a1a8:	e8730004 	lwi	r3, r19, 4
	}
2002a1ac:	10330000 	addk	r1, r19, r0
2002a1b0:	ea610008 	lwi	r19, r1, 8
2002a1b4:	3021000c 	addik	r1, r1, 12
2002a1b8:	b60f0008 	rtsd	r15, 8
2002a1bc:	80000000 	or	r0, r0, r0

2002a1c0 <read_other>:
	
	static void read_other() {
2002a1c0:	3021ffd4 	addik	r1, r1, -44
2002a1c4:	f9e10000 	swi	r15, r1, 0
2002a1c8:	fa610028 	swi	r19, r1, 40
2002a1cc:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2002a1d0:	b0002006 	imm	8198
2002a1d4:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
2002a1d8:	a46301ff 	andi	r3, r3, 511
2002a1dc:	f873001c 	swi	r3, r19, 28
		i16 btype;
		i8 local_ptr;
		i8 local_comp;
		i16 tmp_access;
	
		btype = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2002a1e0:	b0002004 	imm	8196
2002a1e4:	e8607754 	lwi	r3, r0, 30548	// 20047754 <decoder_texture_DCReconstruction_addressing_BTYPE>
2002a1e8:	e8830004 	lwi	r4, r3, 4
2002a1ec:	b0002006 	imm	8198
2002a1f0:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
2002a1f4:	a46301ff 	andi	r3, r3, 511
2002a1f8:	10631800 	addk	r3, r3, r3
2002a1fc:	10641800 	addk	r3, r4, r3
2002a200:	e4630000 	lhui	r3, r3, 0
2002a204:	f4730020 	shi	r3, r19, 32
		local_ptr = ptr;
2002a208:	b0002006 	imm	8198
2002a20c:	e0602080 	lbui	r3, r0, 8320	// 20062080 <ptr>
2002a210:	f0730022 	sbi	r3, r19, 34
		local_comp = comp;
2002a214:	b0002006 	imm	8198
2002a218:	e0601ebc 	lbui	r3, r0, 7868	// 20061ebc <comp>
2002a21c:	f0730023 	sbi	r3, r19, 35
		tmp_access = access(local_ptr, local_comp);
2002a220:	e0730022 	lbui	r3, r19, 34
2002a224:	90830060 	sext8	r4, r3
2002a228:	e0730023 	lbui	r3, r19, 35
2002a22c:	90630060 	sext8	r3, r3
2002a230:	10a40000 	addk	r5, r4, r0
2002a234:	10c30000 	addk	r6, r3, r0
2002a238:	b9f4faf8 	brlid	r15, -1288	// 20029d30 <access>
2002a23c:	80000000 	or	r0, r0, r0
2002a240:	f4730024 	shi	r3, r19, 36
		coded[tmp_access] = 0;
2002a244:	e4730024 	lhui	r3, r19, 36
2002a248:	90630061 	sext16	r3, r3
2002a24c:	64630402 	bslli	r3, r3, 2
2002a250:	b0002006 	imm	8198
2002a254:	30631ec0 	addik	r3, r3, 7872
2002a258:	f8030000 	swi	r0, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
2002a25c:	b0002006 	imm	8198
2002a260:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
2002a264:	30630001 	addik	r3, r3, 1
2002a268:	b0002006 	imm	8198
2002a26c:	f8601e94 	swi	r3, r0, 7828	// 20061e94 <index_BTYPE>
		
		read_end_BTYPE();
2002a270:	b9f4f824 	brlid	r15, -2012	// 20029a94 <read_end_BTYPE>
2002a274:	80000000 	or	r0, r0, r0
	}
2002a278:	e9e10000 	lwi	r15, r1, 0
2002a27c:	10330000 	addk	r1, r19, r0
2002a280:	ea610028 	lwi	r19, r1, 40
2002a284:	3021002c 	addik	r1, r1, 44
2002a288:	b60f0008 	rtsd	r15, 8
2002a28c:	80000000 	or	r0, r0, r0

2002a290 <isSchedulable_advance>:
	static i32 isSchedulable_advance() {
2002a290:	3021fff4 	addik	r1, r1, -12
2002a294:	fa610008 	swi	r19, r1, 8
2002a298:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2002a29c:	30600001 	addik	r3, r0, 1
2002a2a0:	f8730004 	swi	r3, r19, 4
		return result;
2002a2a4:	e8730004 	lwi	r3, r19, 4
	}
2002a2a8:	10330000 	addk	r1, r19, r0
2002a2ac:	ea610008 	lwi	r19, r1, 8
2002a2b0:	3021000c 	addik	r1, r1, 12
2002a2b4:	b60f0008 	rtsd	r15, 8
2002a2b8:	80000000 	or	r0, r0, r0

2002a2bc <advance>:
	
	static void advance() {
2002a2bc:	3021ffd4 	addik	r1, r1, -44
2002a2c0:	f9e10000 	swi	r15, r1, 0
2002a2c4:	fa610028 	swi	r19, r1, 40
2002a2c8:	12610000 	addk	r19, r1, r0
		i8 local_ptr_above;
		i8 tmp_decrement1;
		i8 local_ptr_above_left;
		i8 tmp_decrement2;
	
		local_comp = comp;
2002a2cc:	b0002006 	imm	8198
2002a2d0:	e0601ebc 	lbui	r3, r0, 7868	// 20061ebc <comp>
2002a2d4:	f073001c 	sbi	r3, r19, 28
		comp = local_comp + 1;
2002a2d8:	e073001c 	lbui	r3, r19, 28
2002a2dc:	30630001 	addik	r3, r3, 1
2002a2e0:	a46300ff 	andi	r3, r3, 255
2002a2e4:	90630060 	sext8	r3, r3
2002a2e8:	b0002006 	imm	8198
2002a2ec:	f0601ebc 	sbi	r3, r0, 7868	// 20061ebc <comp>
		local_comp = comp;
2002a2f0:	b0002006 	imm	8198
2002a2f4:	e0601ebc 	lbui	r3, r0, 7868	// 20061ebc <comp>
2002a2f8:	f073001c 	sbi	r3, r19, 28
		if (local_comp == 6) {
2002a2fc:	e073001c 	lbui	r3, r19, 28
2002a300:	90630060 	sext8	r3, r3
2002a304:	a8630006 	xori	r3, r3, 6
2002a308:	bc230144 	bnei	r3, 324		// 2002a44c
			comp = 0;
2002a30c:	b0002006 	imm	8198
2002a310:	f0001ebc 	sbi	r0, r0, 7868	// 20061ebc <comp>
			local_mbx = mbx;
2002a314:	b0002006 	imm	8198
2002a318:	e0601eb4 	lbui	r3, r0, 7860	// 20061eb4 <mbx>
2002a31c:	f073001d 	sbi	r3, r19, 29
			mbx = local_mbx + 1;
2002a320:	e073001d 	lbui	r3, r19, 29
2002a324:	30630001 	addik	r3, r3, 1
2002a328:	a46300ff 	andi	r3, r3, 255
2002a32c:	90630060 	sext8	r3, r3
2002a330:	b0002006 	imm	8198
2002a334:	f0601eb4 	sbi	r3, r0, 7860	// 20061eb4 <mbx>
			left_edge = 0;
2002a338:	b0002006 	imm	8198
2002a33c:	f8001eb8 	swi	r0, r0, 7864	// 20061eb8 <left_edge>
			local_mbx = mbx;
2002a340:	b0002006 	imm	8198
2002a344:	e0601eb4 	lbui	r3, r0, 7860	// 20061eb4 <mbx>
2002a348:	f073001d 	sbi	r3, r19, 29
			local_mbwidth = mbwidth;
2002a34c:	b0002006 	imm	8198
2002a350:	e0601ebd 	lbui	r3, r0, 7869	// 20061ebd <mbwidth>
2002a354:	f073001e 	sbi	r3, r19, 30
			if (local_mbx == local_mbwidth) {
2002a358:	e073001d 	lbui	r3, r19, 29
2002a35c:	90830060 	sext8	r4, r3
2002a360:	e073001e 	lbui	r3, r19, 30
2002a364:	90630060 	sext8	r3, r3
2002a368:	88641800 	xor	r3, r4, r3
2002a36c:	bc230020 	bnei	r3, 32		// 2002a38c
				mbx = 0;
2002a370:	b0002006 	imm	8198
2002a374:	f0001eb4 	sbi	r0, r0, 7860	// 20061eb4 <mbx>
				top_edge = 0;
2002a378:	b0002004 	imm	8196
2002a37c:	f8007820 	swi	r0, r0, 30752	// 20047820 <top_edge>
				left_edge = 1;
2002a380:	30600001 	addik	r3, r0, 1
2002a384:	b0002006 	imm	8198
2002a388:	f8601eb8 	swi	r3, r0, 7864	// 20061eb8 <left_edge>
			}
			local_ptr = ptr;
2002a38c:	b0002006 	imm	8198
2002a390:	e0602080 	lbui	r3, r0, 8320	// 20062080 <ptr>
2002a394:	f073001f 	sbi	r3, r19, 31
			tmp_decrement = decrement(local_ptr);
2002a398:	e073001f 	lbui	r3, r19, 31
2002a39c:	90630060 	sext8	r3, r3
2002a3a0:	10a30000 	addk	r5, r3, r0
2002a3a4:	b9f4f924 	brlid	r15, -1756	// 20029cc8 <decrement>
2002a3a8:	80000000 	or	r0, r0, r0
2002a3ac:	f0730020 	sbi	r3, r19, 32
			ptr = tmp_decrement;
2002a3b0:	e0730020 	lbui	r3, r19, 32
2002a3b4:	b0002006 	imm	8198
2002a3b8:	f0602080 	sbi	r3, r0, 8320	// 20062080 <ptr>
			local_ptr_left = ptr_left;
2002a3bc:	b0002006 	imm	8198
2002a3c0:	e0602081 	lbui	r3, r0, 8321	// 20062081 <ptr_left>
2002a3c4:	f0730021 	sbi	r3, r19, 33
			tmp_decrement0 = decrement(local_ptr_left);
2002a3c8:	e0730021 	lbui	r3, r19, 33
2002a3cc:	90630060 	sext8	r3, r3
2002a3d0:	10a30000 	addk	r5, r3, r0
2002a3d4:	b9f4f8f4 	brlid	r15, -1804	// 20029cc8 <decrement>
2002a3d8:	80000000 	or	r0, r0, r0
2002a3dc:	f0730022 	sbi	r3, r19, 34
			ptr_left = tmp_decrement0;
2002a3e0:	e0730022 	lbui	r3, r19, 34
2002a3e4:	b0002006 	imm	8198
2002a3e8:	f0602081 	sbi	r3, r0, 8321	// 20062081 <ptr_left>
			local_ptr_above = ptr_above;
2002a3ec:	b0002006 	imm	8198
2002a3f0:	e0602082 	lbui	r3, r0, 8322	// 20062082 <ptr_above>
2002a3f4:	f0730023 	sbi	r3, r19, 35
			tmp_decrement1 = decrement(local_ptr_above);
2002a3f8:	e0730023 	lbui	r3, r19, 35
2002a3fc:	90630060 	sext8	r3, r3
2002a400:	10a30000 	addk	r5, r3, r0
2002a404:	b9f4f8c4 	brlid	r15, -1852	// 20029cc8 <decrement>
2002a408:	80000000 	or	r0, r0, r0
2002a40c:	f0730024 	sbi	r3, r19, 36
			ptr_above = tmp_decrement1;
2002a410:	e0730024 	lbui	r3, r19, 36
2002a414:	b0002006 	imm	8198
2002a418:	f0602082 	sbi	r3, r0, 8322	// 20062082 <ptr_above>
			local_ptr_above_left = ptr_above_left;
2002a41c:	b0002006 	imm	8198
2002a420:	e0602083 	lbui	r3, r0, 8323	// 20062083 <ptr_above_left>
2002a424:	f0730025 	sbi	r3, r19, 37
			tmp_decrement2 = decrement(local_ptr_above_left);
2002a428:	e0730025 	lbui	r3, r19, 37
2002a42c:	90630060 	sext8	r3, r3
2002a430:	10a30000 	addk	r5, r3, r0
2002a434:	b9f4f894 	brlid	r15, -1900	// 20029cc8 <decrement>
2002a438:	80000000 	or	r0, r0, r0
2002a43c:	f0730026 	sbi	r3, r19, 38
			ptr_above_left = tmp_decrement2;
2002a440:	e0730026 	lbui	r3, r19, 38
2002a444:	b0002006 	imm	8198
2002a448:	f0602083 	sbi	r3, r0, 8323	// 20062083 <ptr_above_left>
		}
	
		// Update ports indexes
		
	}
2002a44c:	e9e10000 	lwi	r15, r1, 0
2002a450:	10330000 	addk	r1, r19, r0
2002a454:	ea610028 	lwi	r19, r1, 40
2002a458:	3021002c 	addik	r1, r1, 44
2002a45c:	b60f0008 	rtsd	r15, 8
2002a460:	80000000 	or	r0, r0, r0

2002a464 <isSchedulable_predict>:
	static i32 isSchedulable_predict() {
2002a464:	3021fff4 	addik	r1, r1, -12
2002a468:	fa610008 	swi	r19, r1, 8
2002a46c:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2002a470:	30600001 	addik	r3, r0, 1
2002a474:	f8730004 	swi	r3, r19, 4
		return result;
2002a478:	e8730004 	lwi	r3, r19, 4
	}
2002a47c:	10330000 	addk	r1, r19, r0
2002a480:	ea610008 	lwi	r19, r1, 8
2002a484:	3021000c 	addik	r1, r1, 12
2002a488:	b60f0008 	rtsd	r15, 8
2002a48c:	80000000 	or	r0, r0, r0

2002a490 <predict>:
	
	static void predict() {
2002a490:	3021ff74 	addik	r1, r1, -140
2002a494:	f9e10000 	swi	r15, r1, 0
2002a498:	fa610088 	swi	r19, r1, 136
2002a49c:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_A = index_A % SIZE_A;
2002a4a0:	b0002006 	imm	8198
2002a4a4:	e8601e9c 	lwi	r3, r0, 7836	// 20061e9c <index_A>
2002a4a8:	a46301ff 	andi	r3, r3, 511
2002a4ac:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_B = index_B % SIZE_B;
2002a4b0:	b0002006 	imm	8198
2002a4b4:	e8601ea4 	lwi	r3, r0, 7844	// 20061ea4 <index_B>
2002a4b8:	a46301ff 	andi	r3, r3, 511
2002a4bc:	f8730028 	swi	r3, r19, 40
		i32 index_aligned_C = index_C % SIZE_C;
2002a4c0:	b0002006 	imm	8198
2002a4c4:	e8601eac 	lwi	r3, r0, 7852	// 20061eac <index_C>
2002a4c8:	a46301ff 	andi	r3, r3, 511
2002a4cc:	f873002c 	swi	r3, r19, 44
		i32 tmp_coded10;
		i32 tmp_coded11;
		i32 tmp_coded12;
		i32 tmp_coded13;
	
		local_comp = comp;
2002a4d0:	b0002006 	imm	8198
2002a4d4:	e0601ebc 	lbui	r3, r0, 7868	// 20061ebc <comp>
2002a4d8:	f0730030 	sbi	r3, r19, 48
		if (local_comp == 0) {
2002a4dc:	e0730030 	lbui	r3, r19, 48
2002a4e0:	90630060 	sext8	r3, r3
2002a4e4:	bc23013c 	bnei	r3, 316		// 2002a620
			a = 0;
2002a4e8:	f413001c 	shi	r0, r19, 28
			b = 0;
2002a4ec:	f413001e 	shi	r0, r19, 30
			c = 0;
2002a4f0:	f4130020 	shi	r0, r19, 32
			local_left_edge = left_edge;
2002a4f4:	b0002006 	imm	8198
2002a4f8:	e8601eb8 	lwi	r3, r0, 7864	// 20061eb8 <left_edge>
2002a4fc:	f8730034 	swi	r3, r19, 52
			if (!local_left_edge) {
2002a500:	e8730034 	lwi	r3, r19, 52
2002a504:	bc2300b8 	bnei	r3, 184		// 2002a5bc
				local_ptr_left = ptr_left;
2002a508:	b0002006 	imm	8198
2002a50c:	e0602081 	lbui	r3, r0, 8321	// 20062081 <ptr_left>
2002a510:	f0730038 	sbi	r3, r19, 56
				a = access(local_ptr_left, 1);
2002a514:	e0730038 	lbui	r3, r19, 56
2002a518:	90630060 	sext8	r3, r3
2002a51c:	10a30000 	addk	r5, r3, r0
2002a520:	30c00001 	addik	r6, r0, 1
2002a524:	b9f4f80c 	brlid	r15, -2036	// 20029d30 <access>
2002a528:	80000000 	or	r0, r0, r0
2002a52c:	f473001c 	shi	r3, r19, 28
				tmp_coded = coded[a];
2002a530:	e473001c 	lhui	r3, r19, 28
2002a534:	90630061 	sext16	r3, r3
2002a538:	64630402 	bslli	r3, r3, 2
2002a53c:	b0002006 	imm	8198
2002a540:	30631ec0 	addik	r3, r3, 7872
2002a544:	e8630000 	lwi	r3, r3, 0
2002a548:	f873003c 	swi	r3, r19, 60
				if (!tmp_coded) {
2002a54c:	e873003c 	lwi	r3, r19, 60
2002a550:	bc230008 	bnei	r3, 8		// 2002a558
					a = 0;
2002a554:	f413001c 	shi	r0, r19, 28
				}
				local_top_edge = top_edge;
2002a558:	b0002004 	imm	8196
2002a55c:	e8607820 	lwi	r3, r0, 30752	// 20047820 <top_edge>
2002a560:	f8730040 	swi	r3, r19, 64
				if (!local_top_edge) {
2002a564:	e8730040 	lwi	r3, r19, 64
2002a568:	bc230054 	bnei	r3, 84		// 2002a5bc
					local_ptr_above_left = ptr_above_left;
2002a56c:	b0002006 	imm	8198
2002a570:	e0602083 	lbui	r3, r0, 8323	// 20062083 <ptr_above_left>
2002a574:	f0730044 	sbi	r3, r19, 68
					b = access(local_ptr_above_left, 3);
2002a578:	e0730044 	lbui	r3, r19, 68
2002a57c:	90630060 	sext8	r3, r3
2002a580:	10a30000 	addk	r5, r3, r0
2002a584:	30c00003 	addik	r6, r0, 3
2002a588:	b9f4f7a8 	brlid	r15, -2136	// 20029d30 <access>
2002a58c:	80000000 	or	r0, r0, r0
2002a590:	f473001e 	shi	r3, r19, 30
					tmp_coded0 = coded[b];
2002a594:	e473001e 	lhui	r3, r19, 30
2002a598:	90630061 	sext16	r3, r3
2002a59c:	64630402 	bslli	r3, r3, 2
2002a5a0:	b0002006 	imm	8198
2002a5a4:	30631ec0 	addik	r3, r3, 7872
2002a5a8:	e8630000 	lwi	r3, r3, 0
2002a5ac:	f8730048 	swi	r3, r19, 72
					if (!tmp_coded0) {
2002a5b0:	e8730048 	lwi	r3, r19, 72
2002a5b4:	bc230008 	bnei	r3, 8		// 2002a5bc
						b = 0;
2002a5b8:	f413001e 	shi	r0, r19, 30
					}
				}
			}
			local_top_edge = top_edge;
2002a5bc:	b0002004 	imm	8196
2002a5c0:	e8607820 	lwi	r3, r0, 30752	// 20047820 <top_edge>
2002a5c4:	f8730040 	swi	r3, r19, 64
			if (!local_top_edge) {
2002a5c8:	e8730040 	lwi	r3, r19, 64
2002a5cc:	bc230054 	bnei	r3, 84		// 2002a620
				local_ptr_above = ptr_above;
2002a5d0:	b0002006 	imm	8198
2002a5d4:	e0602082 	lbui	r3, r0, 8322	// 20062082 <ptr_above>
2002a5d8:	f073004c 	sbi	r3, r19, 76
				c = access(local_ptr_above, 2);
2002a5dc:	e073004c 	lbui	r3, r19, 76
2002a5e0:	90630060 	sext8	r3, r3
2002a5e4:	10a30000 	addk	r5, r3, r0
2002a5e8:	30c00002 	addik	r6, r0, 2
2002a5ec:	b9f4f744 	brlid	r15, -2236	// 20029d30 <access>
2002a5f0:	80000000 	or	r0, r0, r0
2002a5f4:	f4730020 	shi	r3, r19, 32
				tmp_coded1 = coded[c];
2002a5f8:	e4730020 	lhui	r3, r19, 32
2002a5fc:	90630061 	sext16	r3, r3
2002a600:	64630402 	bslli	r3, r3, 2
2002a604:	b0002006 	imm	8198
2002a608:	30631ec0 	addik	r3, r3, 7872
2002a60c:	e8630000 	lwi	r3, r3, 0
2002a610:	f8730050 	swi	r3, r19, 80
				if (!tmp_coded1) {
2002a614:	e8730050 	lwi	r3, r19, 80
2002a618:	bc230008 	bnei	r3, 8		// 2002a620
					c = 0;
2002a61c:	f4130020 	shi	r0, r19, 32
				}
			}
		}
		local_comp = comp;
2002a620:	b0002006 	imm	8198
2002a624:	e0601ebc 	lbui	r3, r0, 7868	// 20061ebc <comp>
2002a628:	f0730030 	sbi	r3, r19, 48
		if (local_comp == 1) {
2002a62c:	e0730030 	lbui	r3, r19, 48
2002a630:	90630060 	sext8	r3, r3
2002a634:	a8630001 	xori	r3, r3, 1
2002a638:	bc230110 	bnei	r3, 272		// 2002a748
			local_ptr = ptr;
2002a63c:	b0002006 	imm	8198
2002a640:	e0602080 	lbui	r3, r0, 8320	// 20062080 <ptr>
2002a644:	f0730054 	sbi	r3, r19, 84
			a = access(local_ptr, 0);
2002a648:	e0730054 	lbui	r3, r19, 84
2002a64c:	90630060 	sext8	r3, r3
2002a650:	10a30000 	addk	r5, r3, r0
2002a654:	10c00000 	addk	r6, r0, r0
2002a658:	b9f4f6d8 	brlid	r15, -2344	// 20029d30 <access>
2002a65c:	80000000 	or	r0, r0, r0
2002a660:	f473001c 	shi	r3, r19, 28
			b = 0;
2002a664:	f413001e 	shi	r0, r19, 30
			c = 0;
2002a668:	f4130020 	shi	r0, r19, 32
			tmp_coded2 = coded[a];
2002a66c:	e473001c 	lhui	r3, r19, 28
2002a670:	90630061 	sext16	r3, r3
2002a674:	64630402 	bslli	r3, r3, 2
2002a678:	b0002006 	imm	8198
2002a67c:	30631ec0 	addik	r3, r3, 7872
2002a680:	e8630000 	lwi	r3, r3, 0
2002a684:	f8730058 	swi	r3, r19, 88
			if (!tmp_coded2) {
2002a688:	e8730058 	lwi	r3, r19, 88
2002a68c:	bc230008 	bnei	r3, 8		// 2002a694
				a = 0;
2002a690:	f413001c 	shi	r0, r19, 28
			}
			local_top_edge = top_edge;
2002a694:	b0002004 	imm	8196
2002a698:	e8607820 	lwi	r3, r0, 30752	// 20047820 <top_edge>
2002a69c:	f8730040 	swi	r3, r19, 64
			if (!local_top_edge) {
2002a6a0:	e8730040 	lwi	r3, r19, 64
2002a6a4:	bc2300a4 	bnei	r3, 164		// 2002a748
				local_ptr_above = ptr_above;
2002a6a8:	b0002006 	imm	8198
2002a6ac:	e0602082 	lbui	r3, r0, 8322	// 20062082 <ptr_above>
2002a6b0:	f073004c 	sbi	r3, r19, 76
				b = access(local_ptr_above, 2);
2002a6b4:	e073004c 	lbui	r3, r19, 76
2002a6b8:	90630060 	sext8	r3, r3
2002a6bc:	10a30000 	addk	r5, r3, r0
2002a6c0:	30c00002 	addik	r6, r0, 2
2002a6c4:	b9f4f66c 	brlid	r15, -2452	// 20029d30 <access>
2002a6c8:	80000000 	or	r0, r0, r0
2002a6cc:	f473001e 	shi	r3, r19, 30
				tmp_coded3 = coded[b];
2002a6d0:	e473001e 	lhui	r3, r19, 30
2002a6d4:	90630061 	sext16	r3, r3
2002a6d8:	64630402 	bslli	r3, r3, 2
2002a6dc:	b0002006 	imm	8198
2002a6e0:	30631ec0 	addik	r3, r3, 7872
2002a6e4:	e8630000 	lwi	r3, r3, 0
2002a6e8:	f873005c 	swi	r3, r19, 92
				if (!tmp_coded3) {
2002a6ec:	e873005c 	lwi	r3, r19, 92
2002a6f0:	bc230008 	bnei	r3, 8		// 2002a6f8
					b = 0;
2002a6f4:	f413001e 	shi	r0, r19, 30
				}
				local_ptr_above = ptr_above;
2002a6f8:	b0002006 	imm	8198
2002a6fc:	e0602082 	lbui	r3, r0, 8322	// 20062082 <ptr_above>
2002a700:	f073004c 	sbi	r3, r19, 76
				c = access(local_ptr_above, 3);
2002a704:	e073004c 	lbui	r3, r19, 76
2002a708:	90630060 	sext8	r3, r3
2002a70c:	10a30000 	addk	r5, r3, r0
2002a710:	30c00003 	addik	r6, r0, 3
2002a714:	b9f4f61c 	brlid	r15, -2532	// 20029d30 <access>
2002a718:	80000000 	or	r0, r0, r0
2002a71c:	f4730020 	shi	r3, r19, 32
				tmp_coded4 = coded[c];
2002a720:	e4730020 	lhui	r3, r19, 32
2002a724:	90630061 	sext16	r3, r3
2002a728:	64630402 	bslli	r3, r3, 2
2002a72c:	b0002006 	imm	8198
2002a730:	30631ec0 	addik	r3, r3, 7872
2002a734:	e8630000 	lwi	r3, r3, 0
2002a738:	f8730060 	swi	r3, r19, 96
				if (!tmp_coded4) {
2002a73c:	e8730060 	lwi	r3, r19, 96
2002a740:	bc230008 	bnei	r3, 8		// 2002a748
					c = 0;
2002a744:	f4130020 	shi	r0, r19, 32
				}
			}
		}
		local_comp = comp;
2002a748:	b0002006 	imm	8198
2002a74c:	e0601ebc 	lbui	r3, r0, 7868	// 20061ebc <comp>
2002a750:	f0730030 	sbi	r3, r19, 48
		if (local_comp == 2) {
2002a754:	e0730030 	lbui	r3, r19, 48
2002a758:	90630060 	sext8	r3, r3
2002a75c:	a8630002 	xori	r3, r3, 2
2002a760:	bc230110 	bnei	r3, 272		// 2002a870
			a = 0;
2002a764:	f413001c 	shi	r0, r19, 28
			b = 0;
2002a768:	f413001e 	shi	r0, r19, 30
			local_ptr = ptr;
2002a76c:	b0002006 	imm	8198
2002a770:	e0602080 	lbui	r3, r0, 8320	// 20062080 <ptr>
2002a774:	f0730054 	sbi	r3, r19, 84
			c = access(local_ptr, 0);
2002a778:	e0730054 	lbui	r3, r19, 84
2002a77c:	90630060 	sext8	r3, r3
2002a780:	10a30000 	addk	r5, r3, r0
2002a784:	10c00000 	addk	r6, r0, r0
2002a788:	b9f4f5a8 	brlid	r15, -2648	// 20029d30 <access>
2002a78c:	80000000 	or	r0, r0, r0
2002a790:	f4730020 	shi	r3, r19, 32
			local_left_edge = left_edge;
2002a794:	b0002006 	imm	8198
2002a798:	e8601eb8 	lwi	r3, r0, 7864	// 20061eb8 <left_edge>
2002a79c:	f8730034 	swi	r3, r19, 52
			if (!local_left_edge) {
2002a7a0:	e8730034 	lwi	r3, r19, 52
2002a7a4:	bc2300a4 	bnei	r3, 164		// 2002a848
				local_ptr_left = ptr_left;
2002a7a8:	b0002006 	imm	8198
2002a7ac:	e0602081 	lbui	r3, r0, 8321	// 20062081 <ptr_left>
2002a7b0:	f0730038 	sbi	r3, r19, 56
				a = access(local_ptr_left, 3);
2002a7b4:	e0730038 	lbui	r3, r19, 56
2002a7b8:	90630060 	sext8	r3, r3
2002a7bc:	10a30000 	addk	r5, r3, r0
2002a7c0:	30c00003 	addik	r6, r0, 3
2002a7c4:	b9f4f56c 	brlid	r15, -2708	// 20029d30 <access>
2002a7c8:	80000000 	or	r0, r0, r0
2002a7cc:	f473001c 	shi	r3, r19, 28
				tmp_coded5 = coded[a];
2002a7d0:	e473001c 	lhui	r3, r19, 28
2002a7d4:	90630061 	sext16	r3, r3
2002a7d8:	64630402 	bslli	r3, r3, 2
2002a7dc:	b0002006 	imm	8198
2002a7e0:	30631ec0 	addik	r3, r3, 7872
2002a7e4:	e8630000 	lwi	r3, r3, 0
2002a7e8:	f8730064 	swi	r3, r19, 100
				if (!tmp_coded5) {
2002a7ec:	e8730064 	lwi	r3, r19, 100
2002a7f0:	bc230008 	bnei	r3, 8		// 2002a7f8
					a = 0;
2002a7f4:	f413001c 	shi	r0, r19, 28
				}
				local_ptr_left = ptr_left;
2002a7f8:	b0002006 	imm	8198
2002a7fc:	e0602081 	lbui	r3, r0, 8321	// 20062081 <ptr_left>
2002a800:	f0730038 	sbi	r3, r19, 56
				b = access(local_ptr_left, 1);
2002a804:	e0730038 	lbui	r3, r19, 56
2002a808:	90630060 	sext8	r3, r3
2002a80c:	10a30000 	addk	r5, r3, r0
2002a810:	30c00001 	addik	r6, r0, 1
2002a814:	b9f4f51c 	brlid	r15, -2788	// 20029d30 <access>
2002a818:	80000000 	or	r0, r0, r0
2002a81c:	f473001e 	shi	r3, r19, 30
				tmp_coded6 = coded[b];
2002a820:	e473001e 	lhui	r3, r19, 30
2002a824:	90630061 	sext16	r3, r3
2002a828:	64630402 	bslli	r3, r3, 2
2002a82c:	b0002006 	imm	8198
2002a830:	30631ec0 	addik	r3, r3, 7872
2002a834:	e8630000 	lwi	r3, r3, 0
2002a838:	f8730068 	swi	r3, r19, 104
				if (!tmp_coded6) {
2002a83c:	e8730068 	lwi	r3, r19, 104
2002a840:	bc230008 	bnei	r3, 8		// 2002a848
					b = 0;
2002a844:	f413001e 	shi	r0, r19, 30
				}
			}
			tmp_coded7 = coded[c];
2002a848:	e4730020 	lhui	r3, r19, 32
2002a84c:	90630061 	sext16	r3, r3
2002a850:	64630402 	bslli	r3, r3, 2
2002a854:	b0002006 	imm	8198
2002a858:	30631ec0 	addik	r3, r3, 7872
2002a85c:	e8630000 	lwi	r3, r3, 0
2002a860:	f873006c 	swi	r3, r19, 108
			if (!tmp_coded7) {
2002a864:	e873006c 	lwi	r3, r19, 108
2002a868:	bc230008 	bnei	r3, 8		// 2002a870
				c = 0;
2002a86c:	f4130020 	shi	r0, r19, 32
			}
		}
		local_comp = comp;
2002a870:	b0002006 	imm	8198
2002a874:	e0601ebc 	lbui	r3, r0, 7868	// 20061ebc <comp>
2002a878:	f0730030 	sbi	r3, r19, 48
		if (local_comp == 3) {
2002a87c:	e0730030 	lbui	r3, r19, 48
2002a880:	90630060 	sext8	r3, r3
2002a884:	a8630003 	xori	r3, r3, 3
2002a888:	bc2300f4 	bnei	r3, 244		// 2002a97c
			local_ptr = ptr;
2002a88c:	b0002006 	imm	8198
2002a890:	e0602080 	lbui	r3, r0, 8320	// 20062080 <ptr>
2002a894:	f0730054 	sbi	r3, r19, 84
			a = access(local_ptr, 2);
2002a898:	e0730054 	lbui	r3, r19, 84
2002a89c:	90630060 	sext8	r3, r3
2002a8a0:	10a30000 	addk	r5, r3, r0
2002a8a4:	30c00002 	addik	r6, r0, 2
2002a8a8:	b9f4f488 	brlid	r15, -2936	// 20029d30 <access>
2002a8ac:	80000000 	or	r0, r0, r0
2002a8b0:	f473001c 	shi	r3, r19, 28
			local_ptr = ptr;
2002a8b4:	b0002006 	imm	8198
2002a8b8:	e0602080 	lbui	r3, r0, 8320	// 20062080 <ptr>
2002a8bc:	f0730054 	sbi	r3, r19, 84
			b = access(local_ptr, 0);
2002a8c0:	e0730054 	lbui	r3, r19, 84
2002a8c4:	90630060 	sext8	r3, r3
2002a8c8:	10a30000 	addk	r5, r3, r0
2002a8cc:	10c00000 	addk	r6, r0, r0
2002a8d0:	b9f4f460 	brlid	r15, -2976	// 20029d30 <access>
2002a8d4:	80000000 	or	r0, r0, r0
2002a8d8:	f473001e 	shi	r3, r19, 30
			local_ptr = ptr;
2002a8dc:	b0002006 	imm	8198
2002a8e0:	e0602080 	lbui	r3, r0, 8320	// 20062080 <ptr>
2002a8e4:	f0730054 	sbi	r3, r19, 84
			c = access(local_ptr, 1);
2002a8e8:	e0730054 	lbui	r3, r19, 84
2002a8ec:	90630060 	sext8	r3, r3
2002a8f0:	10a30000 	addk	r5, r3, r0
2002a8f4:	30c00001 	addik	r6, r0, 1
2002a8f8:	b9f4f438 	brlid	r15, -3016	// 20029d30 <access>
2002a8fc:	80000000 	or	r0, r0, r0
2002a900:	f4730020 	shi	r3, r19, 32
			tmp_coded8 = coded[a];
2002a904:	e473001c 	lhui	r3, r19, 28
2002a908:	90630061 	sext16	r3, r3
2002a90c:	64630402 	bslli	r3, r3, 2
2002a910:	b0002006 	imm	8198
2002a914:	30631ec0 	addik	r3, r3, 7872
2002a918:	e8630000 	lwi	r3, r3, 0
2002a91c:	f8730070 	swi	r3, r19, 112
			if (!tmp_coded8) {
2002a920:	e8730070 	lwi	r3, r19, 112
2002a924:	bc230008 	bnei	r3, 8		// 2002a92c
				a = 0;
2002a928:	f413001c 	shi	r0, r19, 28
			}
			tmp_coded9 = coded[b];
2002a92c:	e473001e 	lhui	r3, r19, 30
2002a930:	90630061 	sext16	r3, r3
2002a934:	64630402 	bslli	r3, r3, 2
2002a938:	b0002006 	imm	8198
2002a93c:	30631ec0 	addik	r3, r3, 7872
2002a940:	e8630000 	lwi	r3, r3, 0
2002a944:	f8730074 	swi	r3, r19, 116
			if (!tmp_coded9) {
2002a948:	e8730074 	lwi	r3, r19, 116
2002a94c:	bc230008 	bnei	r3, 8		// 2002a954
				b = 0;
2002a950:	f413001e 	shi	r0, r19, 30
			}
			tmp_coded10 = coded[c];
2002a954:	e4730020 	lhui	r3, r19, 32
2002a958:	90630061 	sext16	r3, r3
2002a95c:	64630402 	bslli	r3, r3, 2
2002a960:	b0002006 	imm	8198
2002a964:	30631ec0 	addik	r3, r3, 7872
2002a968:	e8630000 	lwi	r3, r3, 0
2002a96c:	f8730078 	swi	r3, r19, 120
			if (!tmp_coded10) {
2002a970:	e8730078 	lwi	r3, r19, 120
2002a974:	bc230008 	bnei	r3, 8		// 2002a97c
				c = 0;
2002a978:	f4130020 	shi	r0, r19, 32
			}
		}
		local_comp = comp;
2002a97c:	b0002006 	imm	8198
2002a980:	e0601ebc 	lbui	r3, r0, 7868	// 20061ebc <comp>
2002a984:	f0730030 	sbi	r3, r19, 48
		local_comp = comp;
2002a988:	b0002006 	imm	8198
2002a98c:	e0601ebc 	lbui	r3, r0, 7868	// 20061ebc <comp>
2002a990:	f0730030 	sbi	r3, r19, 48
		if (local_comp == 4 || local_comp == 5) {
2002a994:	e0730030 	lbui	r3, r19, 48
2002a998:	90630060 	sext8	r3, r3
2002a99c:	a8630004 	xori	r3, r3, 4
2002a9a0:	bc030014 	beqi	r3, 20		// 2002a9b4
2002a9a4:	e0730030 	lbui	r3, r19, 48
2002a9a8:	90630060 	sext8	r3, r3
2002a9ac:	a8630005 	xori	r3, r3, 5
2002a9b0:	bc230178 	bnei	r3, 376		// 2002ab28
			a = 0;
2002a9b4:	f413001c 	shi	r0, r19, 28
			b = 0;
2002a9b8:	f413001e 	shi	r0, r19, 30
			c = 0;
2002a9bc:	f4130020 	shi	r0, r19, 32
			local_left_edge = left_edge;
2002a9c0:	b0002006 	imm	8198
2002a9c4:	e8601eb8 	lwi	r3, r0, 7864	// 20061eb8 <left_edge>
2002a9c8:	f8730034 	swi	r3, r19, 52
			if (!local_left_edge) {
2002a9cc:	e8730034 	lwi	r3, r19, 52
2002a9d0:	bc2300e0 	bnei	r3, 224		// 2002aab0
				local_ptr_left = ptr_left;
2002a9d4:	b0002006 	imm	8198
2002a9d8:	e0602081 	lbui	r3, r0, 8321	// 20062081 <ptr_left>
2002a9dc:	f0730038 	sbi	r3, r19, 56
				local_comp = comp;
2002a9e0:	b0002006 	imm	8198
2002a9e4:	e0601ebc 	lbui	r3, r0, 7868	// 20061ebc <comp>
2002a9e8:	f0730030 	sbi	r3, r19, 48
				a = access(local_ptr_left, local_comp);
2002a9ec:	e0730038 	lbui	r3, r19, 56
2002a9f0:	90830060 	sext8	r4, r3
2002a9f4:	e0730030 	lbui	r3, r19, 48
2002a9f8:	90630060 	sext8	r3, r3
2002a9fc:	10a40000 	addk	r5, r4, r0
2002aa00:	10c30000 	addk	r6, r3, r0
2002aa04:	b9f4f32c 	brlid	r15, -3284	// 20029d30 <access>
2002aa08:	80000000 	or	r0, r0, r0
2002aa0c:	f473001c 	shi	r3, r19, 28
				tmp_coded11 = coded[a];
2002aa10:	e473001c 	lhui	r3, r19, 28
2002aa14:	90630061 	sext16	r3, r3
2002aa18:	64630402 	bslli	r3, r3, 2
2002aa1c:	b0002006 	imm	8198
2002aa20:	30631ec0 	addik	r3, r3, 7872
2002aa24:	e8630000 	lwi	r3, r3, 0
2002aa28:	f873007c 	swi	r3, r19, 124
				if (!tmp_coded11) {
2002aa2c:	e873007c 	lwi	r3, r19, 124
2002aa30:	bc230008 	bnei	r3, 8		// 2002aa38
					a = 0;
2002aa34:	f413001c 	shi	r0, r19, 28
				}
				local_top_edge = top_edge;
2002aa38:	b0002004 	imm	8196
2002aa3c:	e8607820 	lwi	r3, r0, 30752	// 20047820 <top_edge>
2002aa40:	f8730040 	swi	r3, r19, 64
				if (!local_top_edge) {
2002aa44:	e8730040 	lwi	r3, r19, 64
2002aa48:	bc230068 	bnei	r3, 104		// 2002aab0
					local_ptr_above_left = ptr_above_left;
2002aa4c:	b0002006 	imm	8198
2002aa50:	e0602083 	lbui	r3, r0, 8323	// 20062083 <ptr_above_left>
2002aa54:	f0730044 	sbi	r3, r19, 68
					local_comp = comp;
2002aa58:	b0002006 	imm	8198
2002aa5c:	e0601ebc 	lbui	r3, r0, 7868	// 20061ebc <comp>
2002aa60:	f0730030 	sbi	r3, r19, 48
					b = access(local_ptr_above_left, local_comp);
2002aa64:	e0730044 	lbui	r3, r19, 68
2002aa68:	90830060 	sext8	r4, r3
2002aa6c:	e0730030 	lbui	r3, r19, 48
2002aa70:	90630060 	sext8	r3, r3
2002aa74:	10a40000 	addk	r5, r4, r0
2002aa78:	10c30000 	addk	r6, r3, r0
2002aa7c:	b9f4f2b4 	brlid	r15, -3404	// 20029d30 <access>
2002aa80:	80000000 	or	r0, r0, r0
2002aa84:	f473001e 	shi	r3, r19, 30
					tmp_coded12 = coded[b];
2002aa88:	e473001e 	lhui	r3, r19, 30
2002aa8c:	90630061 	sext16	r3, r3
2002aa90:	64630402 	bslli	r3, r3, 2
2002aa94:	b0002006 	imm	8198
2002aa98:	30631ec0 	addik	r3, r3, 7872
2002aa9c:	e8630000 	lwi	r3, r3, 0
2002aaa0:	f8730080 	swi	r3, r19, 128
					if (!tmp_coded12) {
2002aaa4:	e8730080 	lwi	r3, r19, 128
2002aaa8:	bc230008 	bnei	r3, 8		// 2002aab0
						b = 0;
2002aaac:	f413001e 	shi	r0, r19, 30
					}
				}
			}
			local_top_edge = top_edge;
2002aab0:	b0002004 	imm	8196
2002aab4:	e8607820 	lwi	r3, r0, 30752	// 20047820 <top_edge>
2002aab8:	f8730040 	swi	r3, r19, 64
			if (!local_top_edge) {
2002aabc:	e8730040 	lwi	r3, r19, 64
2002aac0:	bc230068 	bnei	r3, 104		// 2002ab28
				local_ptr_above = ptr_above;
2002aac4:	b0002006 	imm	8198
2002aac8:	e0602082 	lbui	r3, r0, 8322	// 20062082 <ptr_above>
2002aacc:	f073004c 	sbi	r3, r19, 76
				local_comp = comp;
2002aad0:	b0002006 	imm	8198
2002aad4:	e0601ebc 	lbui	r3, r0, 7868	// 20061ebc <comp>
2002aad8:	f0730030 	sbi	r3, r19, 48
				c = access(local_ptr_above, local_comp);
2002aadc:	e073004c 	lbui	r3, r19, 76
2002aae0:	90830060 	sext8	r4, r3
2002aae4:	e0730030 	lbui	r3, r19, 48
2002aae8:	90630060 	sext8	r3, r3
2002aaec:	10a40000 	addk	r5, r4, r0
2002aaf0:	10c30000 	addk	r6, r3, r0
2002aaf4:	b9f4f23c 	brlid	r15, -3524	// 20029d30 <access>
2002aaf8:	80000000 	or	r0, r0, r0
2002aafc:	f4730020 	shi	r3, r19, 32
				tmp_coded13 = coded[c];
2002ab00:	e4730020 	lhui	r3, r19, 32
2002ab04:	90630061 	sext16	r3, r3
2002ab08:	64630402 	bslli	r3, r3, 2
2002ab0c:	b0002006 	imm	8198
2002ab10:	30631ec0 	addik	r3, r3, 7872
2002ab14:	e8630000 	lwi	r3, r3, 0
2002ab18:	f8730084 	swi	r3, r19, 132
				if (!tmp_coded13) {
2002ab1c:	e8730084 	lwi	r3, r19, 132
2002ab20:	bc230008 	bnei	r3, 8		// 2002ab28
					c = 0;
2002ab24:	f4130020 	shi	r0, r19, 32
				}
			}
		}
		tokens_A[(index_A + (0)) % SIZE_A] = a;
2002ab28:	b0002004 	imm	8196
2002ab2c:	e86077bc 	lwi	r3, r0, 30652	// 200477bc <decoder_texture_DCReconstruction_addressing_A>
2002ab30:	e8830004 	lwi	r4, r3, 4
2002ab34:	b0002006 	imm	8198
2002ab38:	e8601e9c 	lwi	r3, r0, 7836	// 20061e9c <index_A>
2002ab3c:	a46301ff 	andi	r3, r3, 511
2002ab40:	10631800 	addk	r3, r3, r3
2002ab44:	10641800 	addk	r3, r4, r3
2002ab48:	e493001c 	lhui	r4, r19, 28
2002ab4c:	f4830000 	shi	r4, r3, 0
		tokens_B[(index_B + (0)) % SIZE_B] = b;
2002ab50:	b0002004 	imm	8196
2002ab54:	e86077b4 	lwi	r3, r0, 30644	// 200477b4 <decoder_texture_DCReconstruction_addressing_B>
2002ab58:	e8830004 	lwi	r4, r3, 4
2002ab5c:	b0002006 	imm	8198
2002ab60:	e8601ea4 	lwi	r3, r0, 7844	// 20061ea4 <index_B>
2002ab64:	a46301ff 	andi	r3, r3, 511
2002ab68:	10631800 	addk	r3, r3, r3
2002ab6c:	10641800 	addk	r3, r4, r3
2002ab70:	e493001e 	lhui	r4, r19, 30
2002ab74:	f4830000 	shi	r4, r3, 0
		tokens_C[(index_C + (0)) % SIZE_C] = c;
2002ab78:	b0002004 	imm	8196
2002ab7c:	e86077c4 	lwi	r3, r0, 30660	// 200477c4 <decoder_texture_DCReconstruction_addressing_C>
2002ab80:	e8830004 	lwi	r4, r3, 4
2002ab84:	b0002006 	imm	8198
2002ab88:	e8601eac 	lwi	r3, r0, 7852	// 20061eac <index_C>
2002ab8c:	a46301ff 	andi	r3, r3, 511
2002ab90:	10631800 	addk	r3, r3, r3
2002ab94:	10641800 	addk	r3, r4, r3
2002ab98:	e4930020 	lhui	r4, r19, 32
2002ab9c:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_A += 1;
2002aba0:	b0002006 	imm	8198
2002aba4:	e8601e9c 	lwi	r3, r0, 7836	// 20061e9c <index_A>
2002aba8:	30630001 	addik	r3, r3, 1
2002abac:	b0002006 	imm	8198
2002abb0:	f8601e9c 	swi	r3, r0, 7836	// 20061e9c <index_A>
		index_B += 1;
2002abb4:	b0002006 	imm	8198
2002abb8:	e8601ea4 	lwi	r3, r0, 7844	// 20061ea4 <index_B>
2002abbc:	30630001 	addik	r3, r3, 1
2002abc0:	b0002006 	imm	8198
2002abc4:	f8601ea4 	swi	r3, r0, 7844	// 20061ea4 <index_B>
		index_C += 1;
2002abc8:	b0002006 	imm	8198
2002abcc:	e8601eac 	lwi	r3, r0, 7852	// 20061eac <index_C>
2002abd0:	30630001 	addik	r3, r3, 1
2002abd4:	b0002006 	imm	8198
2002abd8:	f8601eac 	swi	r3, r0, 7852	// 20061eac <index_C>
		
		write_end_A();
2002abdc:	b9f4ef64 	brlid	r15, -4252	// 20029b40 <write_end_A>
2002abe0:	80000000 	or	r0, r0, r0
		write_end_B();
2002abe4:	b9f4f004 	brlid	r15, -4092	// 20029be8 <write_end_B>
2002abe8:	80000000 	or	r0, r0, r0
		write_end_C();
2002abec:	b9f4f0a4 	brlid	r15, -3932	// 20029c90 <write_end_C>
2002abf0:	80000000 	or	r0, r0, r0
	}
2002abf4:	e9e10000 	lwi	r15, r1, 0
2002abf8:	10330000 	addk	r1, r19, r0
2002abfc:	ea610088 	lwi	r19, r1, 136
2002ac00:	3021008c 	addik	r1, r1, 140
2002ac04:	b60f0008 	rtsd	r15, 8
2002ac08:	80000000 	or	r0, r0, r0

2002ac0c <decoder_texture_DCReconstruction_addressing_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_texture_DCReconstruction_addressing_initialize() {
2002ac0c:	3021fff4 	addik	r1, r1, -12
2002ac10:	fa610008 	swi	r19, r1, 8
2002ac14:	12610000 	addk	r19, r1, r0
		int i = 0;
2002ac18:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_read;
2002ac1c:	30600004 	addik	r3, r0, 4
2002ac20:	b0002006 	imm	8198
2002ac24:	f8602084 	swi	r3, r0, 8324	// 20062084 <_FSM_state>
		
	finished:
		// no read_end/write_end here!
		return;
2002ac28:	80000000 	or	r0, r0, r0
	}
2002ac2c:	10330000 	addk	r1, r19, r0
2002ac30:	ea610008 	lwi	r19, r1, 8
2002ac34:	3021000c 	addik	r1, r1, 12
2002ac38:	b60f0008 	rtsd	r15, 8
2002ac3c:	80000000 	or	r0, r0, r0

2002ac40 <decoder_texture_DCReconstruction_addressing_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	
	int decoder_texture_DCReconstruction_addressing_scheduler() {
2002ac40:	3021ffc0 	addik	r1, r1, -64
2002ac44:	f9e10000 	swi	r15, r1, 0
2002ac48:	fa61003c 	swi	r19, r1, 60
2002ac4c:	12610000 	addk	r19, r1, r0
		int i = 0;
2002ac50:	f813001c 	swi	r0, r19, 28
		if(needInit){
2002ac54:	b0002004 	imm	8196
2002ac58:	e0607824 	lbui	r3, r0, 30756	// 20047824 <needInit>
2002ac5c:	bc030014 	beqi	r3, 20		// 2002ac70
			decoder_texture_DCReconstruction_addressing_initialize();
2002ac60:	b9f4ffac 	brlid	r15, -84	// 2002ac0c <decoder_texture_DCReconstruction_addressing_initialize>
2002ac64:	80000000 	or	r0, r0, r0
			needInit = 0;
2002ac68:	b0002004 	imm	8196
2002ac6c:	f0007824 	sbi	r0, r0, 30756	// 20047824 <needInit>
		}
	
		read_BTYPE();
2002ac70:	b9f4edb4 	brlid	r15, -4684	// 20029a24 <read_BTYPE>
2002ac74:	80000000 	or	r0, r0, r0
		write_A();
2002ac78:	b9f4ee58 	brlid	r15, -4520	// 20029ad0 <write_A>
2002ac7c:	80000000 	or	r0, r0, r0
		write_B();
2002ac80:	b9f4eef8 	brlid	r15, -4360	// 20029b78 <write_B>
2002ac84:	80000000 	or	r0, r0, r0
		write_C();
2002ac88:	b9f4ef98 	brlid	r15, -4200	// 20029c20 <write_C>
2002ac8c:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
2002ac90:	b0002006 	imm	8198
2002ac94:	e8602084 	lwi	r3, r0, 8324	// 20062084 <_FSM_state>
2002ac98:	30800004 	addik	r4, r0, 4
2002ac9c:	16432003 	cmpu	r18, r3, r4
2002aca0:	bc520018 	blti	r18, 24		// 2002acb8
2002aca4:	64630402 	bslli	r3, r3, 2
2002aca8:	b0002004 	imm	8196
2002acac:	30635434 	addik	r3, r3, 21556
2002acb0:	e8630000 	lwi	r3, r3, 0
2002acb4:	98081800 	bra	r3
		case my_state_predict:
			goto l_predict;
		case my_state_read:
			goto l_read;
		default:
			exit(1);
2002acb8:	30a00001 	addik	r5, r0, 1
2002acbc:	b000dffd 	imm	-8195
2002acc0:	b9f456d8 	brlid	r15, 22232	// 398 <exit>
2002acc4:	80000000 	or	r0, r0, r0
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_advance:
			goto l_advance;
2002acc8:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_advance:
			if (isSchedulable_advance()) {
2002accc:	b9f4f5c4 	brlid	r15, -2620	// 2002a290 <isSchedulable_advance>
2002acd0:	80000000 	or	r0, r0, r0
2002acd4:	bc030034 	beqi	r3, 52		// 2002ad08
				int stop = 0;
2002acd8:	f8130024 	swi	r0, r19, 36
				if (stop != 0) {
2002acdc:	e8730024 	lwi	r3, r19, 36
2002ace0:	bc030010 	beqi	r3, 16		// 2002acf0
					_FSM_state = my_state_advance;
2002ace4:	b0002006 	imm	8198
2002ace8:	f8002084 	swi	r0, r0, 8324	// 20062084 <_FSM_state>
					goto finished;
2002acec:	b80002f4 	bri	756		// 2002afe0
				}
				advance();
2002acf0:	b9f4f5cc 	brlid	r15, -2612	// 2002a2bc <advance>
2002acf4:	80000000 	or	r0, r0, r0
				i++;
2002acf8:	e873001c 	lwi	r3, r19, 28
2002acfc:	30630001 	addik	r3, r3, 1
2002ad00:	f873001c 	swi	r3, r19, 28
				goto l_read;
2002ad04:	b80001c4 	bri	452		// 2002aec8
			} else {
				_FSM_state = my_state_advance;
2002ad08:	b0002006 	imm	8198
2002ad0c:	f8002084 	swi	r0, r0, 8324	// 20062084 <_FSM_state>
				goto finished;
2002ad10:	b80002d0 	bri	720		// 2002afe0
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_advance:
			goto l_advance;
		case my_state_geth:
			goto l_geth;
2002ad14:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_advance;
				goto finished;
			}
		l_geth:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_geth()) {
2002ad18:	b0002006 	imm	8198
2002ad1c:	e8801e98 	lwi	r4, r0, 7832	// 20061e98 <numTokens_BTYPE>
2002ad20:	b0002006 	imm	8198
2002ad24:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
2002ad28:	88641800 	xor	r3, r4, r3
2002ad2c:	bc030044 	beqi	r3, 68		// 2002ad70
2002ad30:	b9f4f274 	brlid	r15, -3468	// 20029fa4 <isSchedulable_geth>
2002ad34:	80000000 	or	r0, r0, r0
2002ad38:	bc030038 	beqi	r3, 56		// 2002ad70
				int stop = 0;
2002ad3c:	f8130028 	swi	r0, r19, 40
				if (stop != 0) {
2002ad40:	e8730028 	lwi	r3, r19, 40
2002ad44:	bc030014 	beqi	r3, 20		// 2002ad58
					_FSM_state = my_state_geth;
2002ad48:	30600001 	addik	r3, r0, 1
2002ad4c:	b0002006 	imm	8198
2002ad50:	f8602084 	swi	r3, r0, 8324	// 20062084 <_FSM_state>
					goto finished;
2002ad54:	b800028c 	bri	652		// 2002afe0
				}
				geth();
2002ad58:	b9f4f278 	brlid	r15, -3464	// 20029fd0 <geth>
2002ad5c:	80000000 	or	r0, r0, r0
				i++;
2002ad60:	e873001c 	lwi	r3, r19, 28
2002ad64:	30630001 	addik	r3, r3, 1
2002ad68:	f873001c 	swi	r3, r19, 28
				goto l_read;
2002ad6c:	b800015c 	bri	348		// 2002aec8
			} else {
				_FSM_state = my_state_geth;
2002ad70:	30600001 	addik	r3, r0, 1
2002ad74:	b0002006 	imm	8198
2002ad78:	f8602084 	swi	r3, r0, 8324	// 20062084 <_FSM_state>
				goto finished;
2002ad7c:	b8000264 	bri	612		// 2002afe0
		case my_state_advance:
			goto l_advance;
		case my_state_geth:
			goto l_geth;
		case my_state_getw:
			goto l_getw;
2002ad80:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_geth;
				goto finished;
			}
		l_getw:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_getw()) {
2002ad84:	b0002006 	imm	8198
2002ad88:	e8801e98 	lwi	r4, r0, 7832	// 20061e98 <numTokens_BTYPE>
2002ad8c:	b0002006 	imm	8198
2002ad90:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
2002ad94:	88641800 	xor	r3, r4, r3
2002ad98:	bc030044 	beqi	r3, 68		// 2002addc
2002ad9c:	b9f4f100 	brlid	r15, -3840	// 20029e9c <isSchedulable_getw>
2002ada0:	80000000 	or	r0, r0, r0
2002ada4:	bc030038 	beqi	r3, 56		// 2002addc
				int stop = 0;
2002ada8:	f8130038 	swi	r0, r19, 56
				if (stop != 0) {
2002adac:	e8730038 	lwi	r3, r19, 56
2002adb0:	bc030014 	beqi	r3, 20		// 2002adc4
					_FSM_state = my_state_getw;
2002adb4:	30600002 	addik	r3, r0, 2
2002adb8:	b0002006 	imm	8198
2002adbc:	f8602084 	swi	r3, r0, 8324	// 20062084 <_FSM_state>
					goto finished;
2002adc0:	b8000220 	bri	544		// 2002afe0
				}
				getw_replaced();
2002adc4:	b9f4f104 	brlid	r15, -3836	// 20029ec8 <getw_replaced>
2002adc8:	80000000 	or	r0, r0, r0
				i++;
2002adcc:	e873001c 	lwi	r3, r19, 28
2002add0:	30630001 	addik	r3, r3, 1
2002add4:	f873001c 	swi	r3, r19, 28
				goto l_geth;
2002add8:	b800ff40 	bri	-192		// 2002ad18
			} else {
				_FSM_state = my_state_getw;
2002addc:	30600002 	addik	r3, r0, 2
2002ade0:	b0002006 	imm	8198
2002ade4:	f8602084 	swi	r3, r0, 8324	// 20062084 <_FSM_state>
				goto finished;
2002ade8:	b80001f8 	bri	504		// 2002afe0
		case my_state_geth:
			goto l_geth;
		case my_state_getw:
			goto l_getw;
		case my_state_predict:
			goto l_predict;
2002adec:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_getw;
				goto finished;
			}
		l_predict:
			if (isSchedulable_predict()) {
2002adf0:	b9f4f674 	brlid	r15, -2444	// 2002a464 <isSchedulable_predict>
2002adf4:	80000000 	or	r0, r0, r0
2002adf8:	bc0300bc 	beqi	r3, 188		// 2002aeb4
				int stop = 0;
2002adfc:	f8130020 	swi	r0, r19, 32
				if (1 > SIZE_A - index_A + decoder_texture_DCReconstruction_addressing_A->read_inds[0]) {
2002ae00:	b0002004 	imm	8196
2002ae04:	e86077bc 	lwi	r3, r0, 30652	// 200477bc <decoder_texture_DCReconstruction_addressing_A>
2002ae08:	e863000c 	lwi	r3, r3, 12
2002ae0c:	e8830000 	lwi	r4, r3, 0
2002ae10:	b0002006 	imm	8198
2002ae14:	e8601e9c 	lwi	r3, r0, 7836	// 20061e9c <index_A>
2002ae18:	14632000 	rsubk	r3, r3, r4
2002ae1c:	a863fe00 	xori	r3, r3, -512
2002ae20:	bc23000c 	bnei	r3, 12		// 2002ae2c
					stop = 1;
2002ae24:	30600001 	addik	r3, r0, 1
2002ae28:	f8730020 	swi	r3, r19, 32
				}
				if (1 > SIZE_B - index_B + decoder_texture_DCReconstruction_addressing_B->read_inds[0]) {
2002ae2c:	b0002004 	imm	8196
2002ae30:	e86077b4 	lwi	r3, r0, 30644	// 200477b4 <decoder_texture_DCReconstruction_addressing_B>
2002ae34:	e863000c 	lwi	r3, r3, 12
2002ae38:	e8830000 	lwi	r4, r3, 0
2002ae3c:	b0002006 	imm	8198
2002ae40:	e8601ea4 	lwi	r3, r0, 7844	// 20061ea4 <index_B>
2002ae44:	14632000 	rsubk	r3, r3, r4
2002ae48:	a863fe00 	xori	r3, r3, -512
2002ae4c:	bc23000c 	bnei	r3, 12		// 2002ae58
					stop = 1;
2002ae50:	30600001 	addik	r3, r0, 1
2002ae54:	f8730020 	swi	r3, r19, 32
				}
				if (1 > SIZE_C - index_C + decoder_texture_DCReconstruction_addressing_C->read_inds[0]) {
2002ae58:	b0002004 	imm	8196
2002ae5c:	e86077c4 	lwi	r3, r0, 30660	// 200477c4 <decoder_texture_DCReconstruction_addressing_C>
2002ae60:	e863000c 	lwi	r3, r3, 12
2002ae64:	e8830000 	lwi	r4, r3, 0
2002ae68:	b0002006 	imm	8198
2002ae6c:	e8601eac 	lwi	r3, r0, 7852	// 20061eac <index_C>
2002ae70:	14632000 	rsubk	r3, r3, r4
2002ae74:	a863fe00 	xori	r3, r3, -512
2002ae78:	bc23000c 	bnei	r3, 12		// 2002ae84
					stop = 1;
2002ae7c:	30600001 	addik	r3, r0, 1
2002ae80:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
2002ae84:	e8730020 	lwi	r3, r19, 32
2002ae88:	bc030014 	beqi	r3, 20		// 2002ae9c
					_FSM_state = my_state_predict;
2002ae8c:	30600003 	addik	r3, r0, 3
2002ae90:	b0002006 	imm	8198
2002ae94:	f8602084 	swi	r3, r0, 8324	// 20062084 <_FSM_state>
					goto finished;
2002ae98:	b8000148 	bri	328		// 2002afe0
				}
				predict();
2002ae9c:	b9f4f5f4 	brlid	r15, -2572	// 2002a490 <predict>
2002aea0:	80000000 	or	r0, r0, r0
				i++;
2002aea4:	e873001c 	lwi	r3, r19, 28
2002aea8:	30630001 	addik	r3, r3, 1
2002aeac:	f873001c 	swi	r3, r19, 28
				goto l_advance;
2002aeb0:	b800fe1c 	bri	-484		// 2002accc
			} else {
				_FSM_state = my_state_predict;
2002aeb4:	30600003 	addik	r3, r0, 3
2002aeb8:	b0002006 	imm	8198
2002aebc:	f8602084 	swi	r3, r0, 8324	// 20062084 <_FSM_state>
				goto finished;
2002aec0:	b8000120 	bri	288		// 2002afe0
		case my_state_getw:
			goto l_getw;
		case my_state_predict:
			goto l_predict;
		case my_state_read:
			goto l_read;
2002aec4:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_predict;
				goto finished;
			}
		l_read:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_start()) {
2002aec8:	b0002006 	imm	8198
2002aecc:	e8801e98 	lwi	r4, r0, 7832	// 20061e98 <numTokens_BTYPE>
2002aed0:	b0002006 	imm	8198
2002aed4:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
2002aed8:	88641800 	xor	r3, r4, r3
2002aedc:	bc030044 	beqi	r3, 68		// 2002af20
2002aee0:	b9f4eea4 	brlid	r15, -4444	// 20029d84 <isSchedulable_start>
2002aee4:	80000000 	or	r0, r0, r0
2002aee8:	bc030038 	beqi	r3, 56		// 2002af20
				int stop = 0;
2002aeec:	f813002c 	swi	r0, r19, 44
				if (stop != 0) {
2002aef0:	e873002c 	lwi	r3, r19, 44
2002aef4:	bc030014 	beqi	r3, 20		// 2002af08
					_FSM_state = my_state_read;
2002aef8:	30600004 	addik	r3, r0, 4
2002aefc:	b0002006 	imm	8198
2002af00:	f8602084 	swi	r3, r0, 8324	// 20062084 <_FSM_state>
					goto finished;
2002af04:	b80000dc 	bri	220		// 2002afe0
				}
				start();
2002af08:	b9f4eef0 	brlid	r15, -4368	// 20029df8 <start>
2002af0c:	80000000 	or	r0, r0, r0
				i++;
2002af10:	e873001c 	lwi	r3, r19, 28
2002af14:	30630001 	addik	r3, r3, 1
2002af18:	f873001c 	swi	r3, r19, 28
				goto l_getw;
2002af1c:	b800fe68 	bri	-408		// 2002ad84
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_read_intra()) {
2002af20:	b0002006 	imm	8198
2002af24:	e8801e98 	lwi	r4, r0, 7832	// 20061e98 <numTokens_BTYPE>
2002af28:	b0002006 	imm	8198
2002af2c:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
2002af30:	88641800 	xor	r3, r4, r3
2002af34:	bc030044 	beqi	r3, 68		// 2002af78
2002af38:	b9f4f114 	brlid	r15, -3820	// 2002a04c <isSchedulable_read_intra>
2002af3c:	80000000 	or	r0, r0, r0
2002af40:	bc030038 	beqi	r3, 56		// 2002af78
				int stop = 0;
2002af44:	f8130030 	swi	r0, r19, 48
				if (stop != 0) {
2002af48:	e8730030 	lwi	r3, r19, 48
2002af4c:	bc030014 	beqi	r3, 20		// 2002af60
					_FSM_state = my_state_read;
2002af50:	30600004 	addik	r3, r0, 4
2002af54:	b0002006 	imm	8198
2002af58:	f8602084 	swi	r3, r0, 8324	// 20062084 <_FSM_state>
					goto finished;
2002af5c:	b8000084 	bri	132		// 2002afe0
				}
				read_intra();
2002af60:	b9f4f160 	brlid	r15, -3744	// 2002a0c0 <read_intra>
2002af64:	80000000 	or	r0, r0, r0
				i++;
2002af68:	e873001c 	lwi	r3, r19, 28
2002af6c:	30630001 	addik	r3, r3, 1
2002af70:	f873001c 	swi	r3, r19, 28
				goto l_predict;
2002af74:	b800fe7c 	bri	-388		// 2002adf0
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_read_other()) {
2002af78:	b0002006 	imm	8198
2002af7c:	e8801e98 	lwi	r4, r0, 7832	// 20061e98 <numTokens_BTYPE>
2002af80:	b0002006 	imm	8198
2002af84:	e8601e94 	lwi	r3, r0, 7828	// 20061e94 <index_BTYPE>
2002af88:	88641800 	xor	r3, r4, r3
2002af8c:	bc030044 	beqi	r3, 68		// 2002afd0
2002af90:	b9f4f204 	brlid	r15, -3580	// 2002a194 <isSchedulable_read_other>
2002af94:	80000000 	or	r0, r0, r0
2002af98:	bc030038 	beqi	r3, 56		// 2002afd0
				int stop = 0;
2002af9c:	f8130034 	swi	r0, r19, 52
				if (stop != 0) {
2002afa0:	e8730034 	lwi	r3, r19, 52
2002afa4:	bc030014 	beqi	r3, 20		// 2002afb8
					_FSM_state = my_state_read;
2002afa8:	30600004 	addik	r3, r0, 4
2002afac:	b0002006 	imm	8198
2002afb0:	f8602084 	swi	r3, r0, 8324	// 20062084 <_FSM_state>
					goto finished;
2002afb4:	b800002c 	bri	44		// 2002afe0
				}
				read_other();
2002afb8:	b9f4f208 	brlid	r15, -3576	// 2002a1c0 <read_other>
2002afbc:	80000000 	or	r0, r0, r0
				i++;
2002afc0:	e873001c 	lwi	r3, r19, 28
2002afc4:	30630001 	addik	r3, r3, 1
2002afc8:	f873001c 	swi	r3, r19, 28
				goto l_advance;
2002afcc:	b800fd00 	bri	-768		// 2002accc
			} else {
				_FSM_state = my_state_read;
2002afd0:	30600004 	addik	r3, r0, 4
2002afd4:	b0002006 	imm	8198
2002afd8:	f8602084 	swi	r3, r0, 8324	// 20062084 <_FSM_state>
				goto finished;
2002afdc:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_BTYPE();
2002afe0:	b9f4eab4 	brlid	r15, -5452	// 20029a94 <read_end_BTYPE>
2002afe4:	80000000 	or	r0, r0, r0
		
		write_end_A();
2002afe8:	b9f4eb58 	brlid	r15, -5288	// 20029b40 <write_end_A>
2002afec:	80000000 	or	r0, r0, r0
		write_end_B();
2002aff0:	b9f4ebf8 	brlid	r15, -5128	// 20029be8 <write_end_B>
2002aff4:	80000000 	or	r0, r0, r0
		write_end_C();
2002aff8:	b9f4ec98 	brlid	r15, -4968	// 20029c90 <write_end_C>
2002affc:	80000000 	or	r0, r0, r0
		
		
		return i;
2002b000:	e873001c 	lwi	r3, r19, 28
	}
2002b004:	e9e10000 	lwi	r15, r1, 0
2002b008:	10330000 	addk	r1, r19, r0
2002b00c:	ea61003c 	lwi	r19, r1, 60
2002b010:	30210040 	addik	r1, r1, 64
2002b014:	b60f0008 	rtsd	r15, 8
2002b018:	80000000 	or	r0, r0, r0

2002b01c <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002b01c:	3021fff8 	addik	r1, r1, -8
2002b020:	fa610004 	swi	r19, r1, 4
2002b024:	12610000 	addk	r19, r1, r0
2002b028:	f8b3000c 	swi	r5, r19, 12
2002b02c:	f8d30010 	swi	r6, r19, 16
2002b030:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002b034:	e873000c 	lwi	r3, r19, 12
2002b038:	e8630010 	lwi	r3, r3, 16
2002b03c:	e8830000 	lwi	r4, r3, 0
2002b040:	e873000c 	lwi	r3, r19, 12
2002b044:	e8a3000c 	lwi	r5, r3, 12
2002b048:	e8730010 	lwi	r3, r19, 16
2002b04c:	64630402 	bslli	r3, r3, 2
2002b050:	10651800 	addk	r3, r5, r3
2002b054:	e8630000 	lwi	r3, r3, 0
2002b058:	14a32000 	rsubk	r5, r3, r4
2002b05c:	30600001 	addik	r3, r0, 1
2002b060:	e8930014 	lwi	r4, r19, 20
2002b064:	16442803 	cmpu	r18, r4, r5
2002b068:	bcb20008 	bgei	r18, 8		// 2002b070
2002b06c:	10600000 	addk	r3, r0, r0
2002b070:	a46300ff 	andi	r3, r3, 255
}
2002b074:	10330000 	addk	r1, r19, r0
2002b078:	ea610004 	lwi	r19, r1, 4
2002b07c:	30210008 	addik	r1, r1, 8
2002b080:	b60f0008 	rtsd	r15, 8
2002b084:	80000000 	or	r0, r0, r0

2002b088 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002b088:	3021fff8 	addik	r1, r1, -8
2002b08c:	fa610004 	swi	r19, r1, 4
2002b090:	12610000 	addk	r19, r1, r0
2002b094:	f8b3000c 	swi	r5, r19, 12
2002b098:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002b09c:	e873000c 	lwi	r3, r19, 12
2002b0a0:	e8630010 	lwi	r3, r3, 16
2002b0a4:	e8830000 	lwi	r4, r3, 0
2002b0a8:	e873000c 	lwi	r3, r19, 12
2002b0ac:	e8a3000c 	lwi	r5, r3, 12
2002b0b0:	e8730010 	lwi	r3, r19, 16
2002b0b4:	64630402 	bslli	r3, r3, 2
2002b0b8:	10651800 	addk	r3, r5, r3
2002b0bc:	e8630000 	lwi	r3, r3, 0
2002b0c0:	14632000 	rsubk	r3, r3, r4
}
2002b0c4:	10330000 	addk	r1, r19, r0
2002b0c8:	ea610004 	lwi	r19, r1, 4
2002b0cc:	30210008 	addik	r1, r1, 8
2002b0d0:	b60f0008 	rtsd	r15, 8
2002b0d4:	80000000 	or	r0, r0, r0

2002b0d8 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002b0d8:	3021fff4 	addik	r1, r1, -12
2002b0dc:	fa610008 	swi	r19, r1, 8
2002b0e0:	12610000 	addk	r19, r1, r0
2002b0e4:	f8b30010 	swi	r5, r19, 16
2002b0e8:	f8d30014 	swi	r6, r19, 20
2002b0ec:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002b0f0:	f8130004 	swi	r0, r19, 4
2002b0f4:	b800005c 	bri	92		// 2002b150
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002b0f8:	e8730010 	lwi	r3, r19, 16
2002b0fc:	e8830000 	lwi	r4, r3, 0
2002b100:	e8730010 	lwi	r3, r19, 16
2002b104:	e8a3000c 	lwi	r5, r3, 12
2002b108:	e8730004 	lwi	r3, r19, 4
2002b10c:	64630402 	bslli	r3, r3, 2
2002b110:	10651800 	addk	r3, r5, r3
2002b114:	e8a30000 	lwi	r5, r3, 0
2002b118:	e8730010 	lwi	r3, r19, 16
2002b11c:	e8630010 	lwi	r3, r3, 16
2002b120:	e8630000 	lwi	r3, r3, 0
2002b124:	14632800 	rsubk	r3, r3, r5
2002b128:	10641800 	addk	r3, r4, r3
2002b12c:	30830001 	addik	r4, r3, 1
2002b130:	e8730018 	lwi	r3, r19, 24
2002b134:	16441803 	cmpu	r18, r4, r3
2002b138:	bc52000c 	blti	r18, 12		// 2002b144
            return 0;
2002b13c:	10600000 	addk	r3, r0, r0
2002b140:	b8000024 	bri	36		// 2002b164
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002b144:	e8730004 	lwi	r3, r19, 4
2002b148:	30630001 	addik	r3, r3, 1
2002b14c:	f8730004 	swi	r3, r19, 4
2002b150:	e8930004 	lwi	r4, r19, 4
2002b154:	e8730014 	lwi	r3, r19, 20
2002b158:	16432003 	cmpu	r18, r3, r4
2002b15c:	bc52ff9c 	blti	r18, -100		// 2002b0f8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002b160:	30600001 	addik	r3, r0, 1
}
2002b164:	10330000 	addk	r1, r19, r0
2002b168:	ea610008 	lwi	r19, r1, 8
2002b16c:	3021000c 	addik	r1, r1, 12
2002b170:	b60f0008 	rtsd	r15, 8
2002b174:	80000000 	or	r0, r0, r0

2002b178 <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002b178:	3021ffec 	addik	r1, r1, -20
2002b17c:	fa610010 	swi	r19, r1, 16
2002b180:	12610000 	addk	r19, r1, r0
2002b184:	f8b30018 	swi	r5, r19, 24
2002b188:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002b18c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002b190:	f8130004 	swi	r0, r19, 4
2002b194:	b8000054 	bri	84		// 2002b1e8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2002b198:	e8730018 	lwi	r3, r19, 24
2002b19c:	e8630010 	lwi	r3, r3, 16
2002b1a0:	e8830000 	lwi	r4, r3, 0
2002b1a4:	e8730018 	lwi	r3, r19, 24
2002b1a8:	e8a3000c 	lwi	r5, r3, 12
2002b1ac:	e8730004 	lwi	r3, r19, 4
2002b1b0:	64630402 	bslli	r3, r3, 2
2002b1b4:	10651800 	addk	r3, r5, r3
2002b1b8:	e8630000 	lwi	r3, r3, 0
2002b1bc:	14632000 	rsubk	r3, r3, r4
2002b1c0:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002b1c4:	e8930008 	lwi	r4, r19, 8
2002b1c8:	e873000c 	lwi	r3, r19, 12
2002b1cc:	16441803 	cmpu	r18, r4, r3
2002b1d0:	bcb20008 	bgei	r18, 8		// 2002b1d8
2002b1d4:	10640000 	addk	r3, r4, r0
2002b1d8:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002b1dc:	e8730004 	lwi	r3, r19, 4
2002b1e0:	30630001 	addik	r3, r3, 1
2002b1e4:	f8730004 	swi	r3, r19, 4
2002b1e8:	e8930004 	lwi	r4, r19, 4
2002b1ec:	e873001c 	lwi	r3, r19, 28
2002b1f0:	16432003 	cmpu	r18, r3, r4
2002b1f4:	bc52ffa4 	blti	r18, -92		// 2002b198
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002b1f8:	e8730018 	lwi	r3, r19, 24
2002b1fc:	e8830000 	lwi	r4, r3, 0
2002b200:	e8730008 	lwi	r3, r19, 8
2002b204:	14632000 	rsubk	r3, r3, r4
}
2002b208:	10330000 	addk	r1, r19, r0
2002b20c:	ea610010 	lwi	r19, r1, 16
2002b210:	30210014 	addik	r1, r1, 20
2002b214:	b60f0008 	rtsd	r15, 8
2002b218:	80000000 	or	r0, r0, r0

2002b21c <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002b21c:	3021fff4 	addik	r1, r1, -12
2002b220:	fa610008 	swi	r19, r1, 8
2002b224:	12610000 	addk	r19, r1, r0
2002b228:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2002b22c:	e8730010 	lwi	r3, r19, 16
2002b230:	e8630010 	lwi	r3, r3, 16
2002b234:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002b238:	f8130004 	swi	r0, r19, 4
2002b23c:	b8000028 	bri	40		// 2002b264
        fifo->read_inds[i] = 0;
2002b240:	e8730010 	lwi	r3, r19, 16
2002b244:	e883000c 	lwi	r4, r3, 12
2002b248:	e8730004 	lwi	r3, r19, 4
2002b24c:	64630402 	bslli	r3, r3, 2
2002b250:	10641800 	addk	r3, r4, r3
2002b254:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002b258:	e8730004 	lwi	r3, r19, 4
2002b25c:	30630001 	addik	r3, r3, 1
2002b260:	f8730004 	swi	r3, r19, 4
2002b264:	e8730010 	lwi	r3, r19, 16
2002b268:	e8830008 	lwi	r4, r3, 8
2002b26c:	e8730004 	lwi	r3, r19, 4
2002b270:	16441803 	cmpu	r18, r4, r3
2002b274:	bc52ffcc 	blti	r18, -52		// 2002b240
        fifo->read_inds[i] = 0;
    }
}
2002b278:	10330000 	addk	r1, r19, r0
2002b27c:	ea610008 	lwi	r19, r1, 8
2002b280:	3021000c 	addik	r1, r1, 12
2002b284:	b60f0008 	rtsd	r15, 8
2002b288:	80000000 	or	r0, r0, r0

2002b28c <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002b28c:	3021fff4 	addik	r1, r1, -12
2002b290:	fa610008 	swi	r19, r1, 8
2002b294:	12610000 	addk	r19, r1, r0
2002b298:	f8b30010 	swi	r5, r19, 16
2002b29c:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2002b2a0:	e8730010 	lwi	r3, r19, 16
2002b2a4:	e8830004 	lwi	r4, r3, 4
2002b2a8:	e8730010 	lwi	r3, r19, 16
2002b2ac:	e8a3000c 	lwi	r5, r3, 12
2002b2b0:	e8730014 	lwi	r3, r19, 20
2002b2b4:	64630402 	bslli	r3, r3, 2
2002b2b8:	10651800 	addk	r3, r5, r3
2002b2bc:	e8a30000 	lwi	r5, r3, 0
2002b2c0:	e8730010 	lwi	r3, r19, 16
2002b2c4:	e8630000 	lwi	r3, r3, 0
2002b2c8:	3063ffff 	addik	r3, r3, -1
2002b2cc:	84651800 	and	r3, r5, r3
2002b2d0:	10641800 	addk	r3, r4, r3
2002b2d4:	e0630000 	lbui	r3, r3, 0
2002b2d8:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2002b2dc:	e8730010 	lwi	r3, r19, 16
2002b2e0:	e883000c 	lwi	r4, r3, 12
2002b2e4:	e8730014 	lwi	r3, r19, 20
2002b2e8:	64630402 	bslli	r3, r3, 2
2002b2ec:	10641800 	addk	r3, r4, r3
2002b2f0:	e8830000 	lwi	r4, r3, 0
2002b2f4:	30840001 	addik	r4, r4, 1
2002b2f8:	f8830000 	swi	r4, r3, 0
    return value;
2002b2fc:	e0730004 	lbui	r3, r19, 4
2002b300:	90630060 	sext8	r3, r3
}
2002b304:	10330000 	addk	r1, r19, r0
2002b308:	ea610008 	lwi	r19, r1, 8
2002b30c:	3021000c 	addik	r1, r1, 12
2002b310:	b60f0008 	rtsd	r15, 8
2002b314:	80000000 	or	r0, r0, r0

2002b318 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002b318:	3021fff8 	addik	r1, r1, -8
2002b31c:	fa610004 	swi	r19, r1, 4
2002b320:	12610000 	addk	r19, r1, r0
2002b324:	f8b3000c 	swi	r5, r19, 12
2002b328:	10660000 	addk	r3, r6, r0
2002b32c:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002b330:	e873000c 	lwi	r3, r19, 12
2002b334:	e8830004 	lwi	r4, r3, 4
2002b338:	e873000c 	lwi	r3, r19, 12
2002b33c:	e8630010 	lwi	r3, r3, 16
2002b340:	e8a30000 	lwi	r5, r3, 0
2002b344:	e873000c 	lwi	r3, r19, 12
2002b348:	e8630000 	lwi	r3, r3, 0
2002b34c:	3063ffff 	addik	r3, r3, -1
2002b350:	84651800 	and	r3, r5, r3
2002b354:	10641800 	addk	r3, r4, r3
2002b358:	e0930010 	lbui	r4, r19, 16
2002b35c:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2002b360:	e873000c 	lwi	r3, r19, 12
2002b364:	e8630010 	lwi	r3, r3, 16
2002b368:	e8830000 	lwi	r4, r3, 0
2002b36c:	30840001 	addik	r4, r4, 1
2002b370:	f8830000 	swi	r4, r3, 0
}
2002b374:	10330000 	addk	r1, r19, r0
2002b378:	ea610004 	lwi	r19, r1, 4
2002b37c:	30210008 	addik	r1, r1, 8
2002b380:	b60f0008 	rtsd	r15, 8
2002b384:	80000000 	or	r0, r0, r0

2002b388 <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002b388:	3021fff8 	addik	r1, r1, -8
2002b38c:	fa610004 	swi	r19, r1, 4
2002b390:	12610000 	addk	r19, r1, r0
2002b394:	f8b3000c 	swi	r5, r19, 12
2002b398:	f8d30010 	swi	r6, r19, 16
2002b39c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002b3a0:	e873000c 	lwi	r3, r19, 12
2002b3a4:	e8630010 	lwi	r3, r3, 16
2002b3a8:	e8830000 	lwi	r4, r3, 0
2002b3ac:	e873000c 	lwi	r3, r19, 12
2002b3b0:	e8a3000c 	lwi	r5, r3, 12
2002b3b4:	e8730010 	lwi	r3, r19, 16
2002b3b8:	64630402 	bslli	r3, r3, 2
2002b3bc:	10651800 	addk	r3, r5, r3
2002b3c0:	e8630000 	lwi	r3, r3, 0
2002b3c4:	14a32000 	rsubk	r5, r3, r4
2002b3c8:	30600001 	addik	r3, r0, 1
2002b3cc:	e8930014 	lwi	r4, r19, 20
2002b3d0:	16442803 	cmpu	r18, r4, r5
2002b3d4:	bcb20008 	bgei	r18, 8		// 2002b3dc
2002b3d8:	10600000 	addk	r3, r0, r0
2002b3dc:	a46300ff 	andi	r3, r3, 255
}
2002b3e0:	10330000 	addk	r1, r19, r0
2002b3e4:	ea610004 	lwi	r19, r1, 4
2002b3e8:	30210008 	addik	r1, r1, 8
2002b3ec:	b60f0008 	rtsd	r15, 8
2002b3f0:	80000000 	or	r0, r0, r0

2002b3f4 <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002b3f4:	3021fff8 	addik	r1, r1, -8
2002b3f8:	fa610004 	swi	r19, r1, 4
2002b3fc:	12610000 	addk	r19, r1, r0
2002b400:	f8b3000c 	swi	r5, r19, 12
2002b404:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002b408:	e873000c 	lwi	r3, r19, 12
2002b40c:	e8630010 	lwi	r3, r3, 16
2002b410:	e8830000 	lwi	r4, r3, 0
2002b414:	e873000c 	lwi	r3, r19, 12
2002b418:	e8a3000c 	lwi	r5, r3, 12
2002b41c:	e8730010 	lwi	r3, r19, 16
2002b420:	64630402 	bslli	r3, r3, 2
2002b424:	10651800 	addk	r3, r5, r3
2002b428:	e8630000 	lwi	r3, r3, 0
2002b42c:	14632000 	rsubk	r3, r3, r4
}
2002b430:	10330000 	addk	r1, r19, r0
2002b434:	ea610004 	lwi	r19, r1, 4
2002b438:	30210008 	addik	r1, r1, 8
2002b43c:	b60f0008 	rtsd	r15, 8
2002b440:	80000000 	or	r0, r0, r0

2002b444 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002b444:	3021fff4 	addik	r1, r1, -12
2002b448:	fa610008 	swi	r19, r1, 8
2002b44c:	12610000 	addk	r19, r1, r0
2002b450:	f8b30010 	swi	r5, r19, 16
2002b454:	f8d30014 	swi	r6, r19, 20
2002b458:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002b45c:	f8130004 	swi	r0, r19, 4
2002b460:	b800005c 	bri	92		// 2002b4bc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002b464:	e8730010 	lwi	r3, r19, 16
2002b468:	e8830000 	lwi	r4, r3, 0
2002b46c:	e8730010 	lwi	r3, r19, 16
2002b470:	e8a3000c 	lwi	r5, r3, 12
2002b474:	e8730004 	lwi	r3, r19, 4
2002b478:	64630402 	bslli	r3, r3, 2
2002b47c:	10651800 	addk	r3, r5, r3
2002b480:	e8a30000 	lwi	r5, r3, 0
2002b484:	e8730010 	lwi	r3, r19, 16
2002b488:	e8630010 	lwi	r3, r3, 16
2002b48c:	e8630000 	lwi	r3, r3, 0
2002b490:	14632800 	rsubk	r3, r3, r5
2002b494:	10641800 	addk	r3, r4, r3
2002b498:	30830001 	addik	r4, r3, 1
2002b49c:	e8730018 	lwi	r3, r19, 24
2002b4a0:	16441803 	cmpu	r18, r4, r3
2002b4a4:	bc52000c 	blti	r18, 12		// 2002b4b0
            return 0;
2002b4a8:	10600000 	addk	r3, r0, r0
2002b4ac:	b8000024 	bri	36		// 2002b4d0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002b4b0:	e8730004 	lwi	r3, r19, 4
2002b4b4:	30630001 	addik	r3, r3, 1
2002b4b8:	f8730004 	swi	r3, r19, 4
2002b4bc:	e8930004 	lwi	r4, r19, 4
2002b4c0:	e8730014 	lwi	r3, r19, 20
2002b4c4:	16432003 	cmpu	r18, r3, r4
2002b4c8:	bc52ff9c 	blti	r18, -100		// 2002b464
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002b4cc:	30600001 	addik	r3, r0, 1
}
2002b4d0:	10330000 	addk	r1, r19, r0
2002b4d4:	ea610008 	lwi	r19, r1, 8
2002b4d8:	3021000c 	addik	r1, r1, 12
2002b4dc:	b60f0008 	rtsd	r15, 8
2002b4e0:	80000000 	or	r0, r0, r0

2002b4e4 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002b4e4:	3021ffec 	addik	r1, r1, -20
2002b4e8:	fa610010 	swi	r19, r1, 16
2002b4ec:	12610000 	addk	r19, r1, r0
2002b4f0:	f8b30018 	swi	r5, r19, 24
2002b4f4:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002b4f8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002b4fc:	f8130004 	swi	r0, r19, 4
2002b500:	b8000054 	bri	84		// 2002b554
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2002b504:	e8730018 	lwi	r3, r19, 24
2002b508:	e8630010 	lwi	r3, r3, 16
2002b50c:	e8830000 	lwi	r4, r3, 0
2002b510:	e8730018 	lwi	r3, r19, 24
2002b514:	e8a3000c 	lwi	r5, r3, 12
2002b518:	e8730004 	lwi	r3, r19, 4
2002b51c:	64630402 	bslli	r3, r3, 2
2002b520:	10651800 	addk	r3, r5, r3
2002b524:	e8630000 	lwi	r3, r3, 0
2002b528:	14632000 	rsubk	r3, r3, r4
2002b52c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002b530:	e8930008 	lwi	r4, r19, 8
2002b534:	e873000c 	lwi	r3, r19, 12
2002b538:	16441803 	cmpu	r18, r4, r3
2002b53c:	bcb20008 	bgei	r18, 8		// 2002b544
2002b540:	10640000 	addk	r3, r4, r0
2002b544:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002b548:	e8730004 	lwi	r3, r19, 4
2002b54c:	30630001 	addik	r3, r3, 1
2002b550:	f8730004 	swi	r3, r19, 4
2002b554:	e8930004 	lwi	r4, r19, 4
2002b558:	e873001c 	lwi	r3, r19, 28
2002b55c:	16432003 	cmpu	r18, r3, r4
2002b560:	bc52ffa4 	blti	r18, -92		// 2002b504
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002b564:	e8730018 	lwi	r3, r19, 24
2002b568:	e8830000 	lwi	r4, r3, 0
2002b56c:	e8730008 	lwi	r3, r19, 8
2002b570:	14632000 	rsubk	r3, r3, r4
}
2002b574:	10330000 	addk	r1, r19, r0
2002b578:	ea610010 	lwi	r19, r1, 16
2002b57c:	30210014 	addik	r1, r1, 20
2002b580:	b60f0008 	rtsd	r15, 8
2002b584:	80000000 	or	r0, r0, r0

2002b588 <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002b588:	3021fff4 	addik	r1, r1, -12
2002b58c:	fa610008 	swi	r19, r1, 8
2002b590:	12610000 	addk	r19, r1, r0
2002b594:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2002b598:	e8730010 	lwi	r3, r19, 16
2002b59c:	e8630010 	lwi	r3, r3, 16
2002b5a0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002b5a4:	f8130004 	swi	r0, r19, 4
2002b5a8:	b8000028 	bri	40		// 2002b5d0
        fifo->read_inds[i] = 0;
2002b5ac:	e8730010 	lwi	r3, r19, 16
2002b5b0:	e883000c 	lwi	r4, r3, 12
2002b5b4:	e8730004 	lwi	r3, r19, 4
2002b5b8:	64630402 	bslli	r3, r3, 2
2002b5bc:	10641800 	addk	r3, r4, r3
2002b5c0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002b5c4:	e8730004 	lwi	r3, r19, 4
2002b5c8:	30630001 	addik	r3, r3, 1
2002b5cc:	f8730004 	swi	r3, r19, 4
2002b5d0:	e8730010 	lwi	r3, r19, 16
2002b5d4:	e8830008 	lwi	r4, r3, 8
2002b5d8:	e8730004 	lwi	r3, r19, 4
2002b5dc:	16441803 	cmpu	r18, r4, r3
2002b5e0:	bc52ffcc 	blti	r18, -52		// 2002b5ac
        fifo->read_inds[i] = 0;
    }
}
2002b5e4:	10330000 	addk	r1, r19, r0
2002b5e8:	ea610008 	lwi	r19, r1, 8
2002b5ec:	3021000c 	addik	r1, r1, 12
2002b5f0:	b60f0008 	rtsd	r15, 8
2002b5f4:	80000000 	or	r0, r0, r0

2002b5f8 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002b5f8:	3021fff4 	addik	r1, r1, -12
2002b5fc:	fa610008 	swi	r19, r1, 8
2002b600:	12610000 	addk	r19, r1, r0
2002b604:	f8b30010 	swi	r5, r19, 16
2002b608:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2002b60c:	e8730010 	lwi	r3, r19, 16
2002b610:	e8830004 	lwi	r4, r3, 4
2002b614:	e8730010 	lwi	r3, r19, 16
2002b618:	e8a3000c 	lwi	r5, r3, 12
2002b61c:	e8730014 	lwi	r3, r19, 20
2002b620:	64630402 	bslli	r3, r3, 2
2002b624:	10651800 	addk	r3, r5, r3
2002b628:	e8a30000 	lwi	r5, r3, 0
2002b62c:	e8730010 	lwi	r3, r19, 16
2002b630:	e8630000 	lwi	r3, r3, 0
2002b634:	3063ffff 	addik	r3, r3, -1
2002b638:	84651800 	and	r3, r5, r3
2002b63c:	10631800 	addk	r3, r3, r3
2002b640:	10641800 	addk	r3, r4, r3
2002b644:	e4630000 	lhui	r3, r3, 0
2002b648:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2002b64c:	e8730010 	lwi	r3, r19, 16
2002b650:	e883000c 	lwi	r4, r3, 12
2002b654:	e8730014 	lwi	r3, r19, 20
2002b658:	64630402 	bslli	r3, r3, 2
2002b65c:	10641800 	addk	r3, r4, r3
2002b660:	e8830000 	lwi	r4, r3, 0
2002b664:	30840001 	addik	r4, r4, 1
2002b668:	f8830000 	swi	r4, r3, 0
    return value;
2002b66c:	e4730004 	lhui	r3, r19, 4
2002b670:	90630061 	sext16	r3, r3
}
2002b674:	10330000 	addk	r1, r19, r0
2002b678:	ea610008 	lwi	r19, r1, 8
2002b67c:	3021000c 	addik	r1, r1, 12
2002b680:	b60f0008 	rtsd	r15, 8
2002b684:	80000000 	or	r0, r0, r0

2002b688 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002b688:	3021fff8 	addik	r1, r1, -8
2002b68c:	fa610004 	swi	r19, r1, 4
2002b690:	12610000 	addk	r19, r1, r0
2002b694:	f8b3000c 	swi	r5, r19, 12
2002b698:	10660000 	addk	r3, r6, r0
2002b69c:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002b6a0:	e873000c 	lwi	r3, r19, 12
2002b6a4:	e8830004 	lwi	r4, r3, 4
2002b6a8:	e873000c 	lwi	r3, r19, 12
2002b6ac:	e8630010 	lwi	r3, r3, 16
2002b6b0:	e8a30000 	lwi	r5, r3, 0
2002b6b4:	e873000c 	lwi	r3, r19, 12
2002b6b8:	e8630000 	lwi	r3, r3, 0
2002b6bc:	3063ffff 	addik	r3, r3, -1
2002b6c0:	84651800 	and	r3, r5, r3
2002b6c4:	10631800 	addk	r3, r3, r3
2002b6c8:	10641800 	addk	r3, r4, r3
2002b6cc:	e4930010 	lhui	r4, r19, 16
2002b6d0:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2002b6d4:	e873000c 	lwi	r3, r19, 12
2002b6d8:	e8630010 	lwi	r3, r3, 16
2002b6dc:	e8830000 	lwi	r4, r3, 0
2002b6e0:	30840001 	addik	r4, r4, 1
2002b6e4:	f8830000 	swi	r4, r3, 0
}
2002b6e8:	10330000 	addk	r1, r19, r0
2002b6ec:	ea610004 	lwi	r19, r1, 4
2002b6f0:	30210008 	addik	r1, r1, 8
2002b6f4:	b60f0008 	rtsd	r15, 8
2002b6f8:	80000000 	or	r0, r0, r0

2002b6fc <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002b6fc:	3021fff8 	addik	r1, r1, -8
2002b700:	fa610004 	swi	r19, r1, 4
2002b704:	12610000 	addk	r19, r1, r0
2002b708:	f8b3000c 	swi	r5, r19, 12
2002b70c:	f8d30010 	swi	r6, r19, 16
2002b710:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002b714:	e873000c 	lwi	r3, r19, 12
2002b718:	e8630010 	lwi	r3, r3, 16
2002b71c:	e8830000 	lwi	r4, r3, 0
2002b720:	e873000c 	lwi	r3, r19, 12
2002b724:	e8a3000c 	lwi	r5, r3, 12
2002b728:	e8730010 	lwi	r3, r19, 16
2002b72c:	64630402 	bslli	r3, r3, 2
2002b730:	10651800 	addk	r3, r5, r3
2002b734:	e8630000 	lwi	r3, r3, 0
2002b738:	14a32000 	rsubk	r5, r3, r4
2002b73c:	30600001 	addik	r3, r0, 1
2002b740:	e8930014 	lwi	r4, r19, 20
2002b744:	16442803 	cmpu	r18, r4, r5
2002b748:	bcb20008 	bgei	r18, 8		// 2002b750
2002b74c:	10600000 	addk	r3, r0, r0
2002b750:	a46300ff 	andi	r3, r3, 255
}
2002b754:	10330000 	addk	r1, r19, r0
2002b758:	ea610004 	lwi	r19, r1, 4
2002b75c:	30210008 	addik	r1, r1, 8
2002b760:	b60f0008 	rtsd	r15, 8
2002b764:	80000000 	or	r0, r0, r0

2002b768 <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002b768:	3021fff8 	addik	r1, r1, -8
2002b76c:	fa610004 	swi	r19, r1, 4
2002b770:	12610000 	addk	r19, r1, r0
2002b774:	f8b3000c 	swi	r5, r19, 12
2002b778:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002b77c:	e873000c 	lwi	r3, r19, 12
2002b780:	e8630010 	lwi	r3, r3, 16
2002b784:	e8830000 	lwi	r4, r3, 0
2002b788:	e873000c 	lwi	r3, r19, 12
2002b78c:	e8a3000c 	lwi	r5, r3, 12
2002b790:	e8730010 	lwi	r3, r19, 16
2002b794:	64630402 	bslli	r3, r3, 2
2002b798:	10651800 	addk	r3, r5, r3
2002b79c:	e8630000 	lwi	r3, r3, 0
2002b7a0:	14632000 	rsubk	r3, r3, r4
}
2002b7a4:	10330000 	addk	r1, r19, r0
2002b7a8:	ea610004 	lwi	r19, r1, 4
2002b7ac:	30210008 	addik	r1, r1, 8
2002b7b0:	b60f0008 	rtsd	r15, 8
2002b7b4:	80000000 	or	r0, r0, r0

2002b7b8 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002b7b8:	3021fff4 	addik	r1, r1, -12
2002b7bc:	fa610008 	swi	r19, r1, 8
2002b7c0:	12610000 	addk	r19, r1, r0
2002b7c4:	f8b30010 	swi	r5, r19, 16
2002b7c8:	f8d30014 	swi	r6, r19, 20
2002b7cc:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002b7d0:	f8130004 	swi	r0, r19, 4
2002b7d4:	b800005c 	bri	92		// 2002b830
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002b7d8:	e8730010 	lwi	r3, r19, 16
2002b7dc:	e8830000 	lwi	r4, r3, 0
2002b7e0:	e8730010 	lwi	r3, r19, 16
2002b7e4:	e8a3000c 	lwi	r5, r3, 12
2002b7e8:	e8730004 	lwi	r3, r19, 4
2002b7ec:	64630402 	bslli	r3, r3, 2
2002b7f0:	10651800 	addk	r3, r5, r3
2002b7f4:	e8a30000 	lwi	r5, r3, 0
2002b7f8:	e8730010 	lwi	r3, r19, 16
2002b7fc:	e8630010 	lwi	r3, r3, 16
2002b800:	e8630000 	lwi	r3, r3, 0
2002b804:	14632800 	rsubk	r3, r3, r5
2002b808:	10641800 	addk	r3, r4, r3
2002b80c:	30830001 	addik	r4, r3, 1
2002b810:	e8730018 	lwi	r3, r19, 24
2002b814:	16441803 	cmpu	r18, r4, r3
2002b818:	bc52000c 	blti	r18, 12		// 2002b824
            return 0;
2002b81c:	10600000 	addk	r3, r0, r0
2002b820:	b8000024 	bri	36		// 2002b844
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002b824:	e8730004 	lwi	r3, r19, 4
2002b828:	30630001 	addik	r3, r3, 1
2002b82c:	f8730004 	swi	r3, r19, 4
2002b830:	e8930004 	lwi	r4, r19, 4
2002b834:	e8730014 	lwi	r3, r19, 20
2002b838:	16432003 	cmpu	r18, r3, r4
2002b83c:	bc52ff9c 	blti	r18, -100		// 2002b7d8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002b840:	30600001 	addik	r3, r0, 1
}
2002b844:	10330000 	addk	r1, r19, r0
2002b848:	ea610008 	lwi	r19, r1, 8
2002b84c:	3021000c 	addik	r1, r1, 12
2002b850:	b60f0008 	rtsd	r15, 8
2002b854:	80000000 	or	r0, r0, r0

2002b858 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002b858:	3021ffec 	addik	r1, r1, -20
2002b85c:	fa610010 	swi	r19, r1, 16
2002b860:	12610000 	addk	r19, r1, r0
2002b864:	f8b30018 	swi	r5, r19, 24
2002b868:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002b86c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002b870:	f8130004 	swi	r0, r19, 4
2002b874:	b8000054 	bri	84		// 2002b8c8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2002b878:	e8730018 	lwi	r3, r19, 24
2002b87c:	e8630010 	lwi	r3, r3, 16
2002b880:	e8830000 	lwi	r4, r3, 0
2002b884:	e8730018 	lwi	r3, r19, 24
2002b888:	e8a3000c 	lwi	r5, r3, 12
2002b88c:	e8730004 	lwi	r3, r19, 4
2002b890:	64630402 	bslli	r3, r3, 2
2002b894:	10651800 	addk	r3, r5, r3
2002b898:	e8630000 	lwi	r3, r3, 0
2002b89c:	14632000 	rsubk	r3, r3, r4
2002b8a0:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002b8a4:	e8930008 	lwi	r4, r19, 8
2002b8a8:	e873000c 	lwi	r3, r19, 12
2002b8ac:	16441803 	cmpu	r18, r4, r3
2002b8b0:	bcb20008 	bgei	r18, 8		// 2002b8b8
2002b8b4:	10640000 	addk	r3, r4, r0
2002b8b8:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002b8bc:	e8730004 	lwi	r3, r19, 4
2002b8c0:	30630001 	addik	r3, r3, 1
2002b8c4:	f8730004 	swi	r3, r19, 4
2002b8c8:	e8930004 	lwi	r4, r19, 4
2002b8cc:	e873001c 	lwi	r3, r19, 28
2002b8d0:	16432003 	cmpu	r18, r3, r4
2002b8d4:	bc52ffa4 	blti	r18, -92		// 2002b878
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002b8d8:	e8730018 	lwi	r3, r19, 24
2002b8dc:	e8830000 	lwi	r4, r3, 0
2002b8e0:	e8730008 	lwi	r3, r19, 8
2002b8e4:	14632000 	rsubk	r3, r3, r4
}
2002b8e8:	10330000 	addk	r1, r19, r0
2002b8ec:	ea610010 	lwi	r19, r1, 16
2002b8f0:	30210014 	addik	r1, r1, 20
2002b8f4:	b60f0008 	rtsd	r15, 8
2002b8f8:	80000000 	or	r0, r0, r0

2002b8fc <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002b8fc:	3021fff4 	addik	r1, r1, -12
2002b900:	fa610008 	swi	r19, r1, 8
2002b904:	12610000 	addk	r19, r1, r0
2002b908:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2002b90c:	e8730010 	lwi	r3, r19, 16
2002b910:	e8630010 	lwi	r3, r3, 16
2002b914:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002b918:	f8130004 	swi	r0, r19, 4
2002b91c:	b8000028 	bri	40		// 2002b944
        fifo->read_inds[i] = 0;
2002b920:	e8730010 	lwi	r3, r19, 16
2002b924:	e883000c 	lwi	r4, r3, 12
2002b928:	e8730004 	lwi	r3, r19, 4
2002b92c:	64630402 	bslli	r3, r3, 2
2002b930:	10641800 	addk	r3, r4, r3
2002b934:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002b938:	e8730004 	lwi	r3, r19, 4
2002b93c:	30630001 	addik	r3, r3, 1
2002b940:	f8730004 	swi	r3, r19, 4
2002b944:	e8730010 	lwi	r3, r19, 16
2002b948:	e8830008 	lwi	r4, r3, 8
2002b94c:	e8730004 	lwi	r3, r19, 4
2002b950:	16441803 	cmpu	r18, r4, r3
2002b954:	bc52ffcc 	blti	r18, -52		// 2002b920
        fifo->read_inds[i] = 0;
    }
}
2002b958:	10330000 	addk	r1, r19, r0
2002b95c:	ea610008 	lwi	r19, r1, 8
2002b960:	3021000c 	addik	r1, r1, 12
2002b964:	b60f0008 	rtsd	r15, 8
2002b968:	80000000 	or	r0, r0, r0

2002b96c <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002b96c:	3021fff4 	addik	r1, r1, -12
2002b970:	fa610008 	swi	r19, r1, 8
2002b974:	12610000 	addk	r19, r1, r0
2002b978:	f8b30010 	swi	r5, r19, 16
2002b97c:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2002b980:	e8730010 	lwi	r3, r19, 16
2002b984:	e8830004 	lwi	r4, r3, 4
2002b988:	e8730010 	lwi	r3, r19, 16
2002b98c:	e8a3000c 	lwi	r5, r3, 12
2002b990:	e8730014 	lwi	r3, r19, 20
2002b994:	64630402 	bslli	r3, r3, 2
2002b998:	10651800 	addk	r3, r5, r3
2002b99c:	e8a30000 	lwi	r5, r3, 0
2002b9a0:	e8730010 	lwi	r3, r19, 16
2002b9a4:	e8630000 	lwi	r3, r3, 0
2002b9a8:	3063ffff 	addik	r3, r3, -1
2002b9ac:	84651800 	and	r3, r5, r3
2002b9b0:	64630402 	bslli	r3, r3, 2
2002b9b4:	10641800 	addk	r3, r4, r3
2002b9b8:	e8630000 	lwi	r3, r3, 0
2002b9bc:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2002b9c0:	e8730010 	lwi	r3, r19, 16
2002b9c4:	e883000c 	lwi	r4, r3, 12
2002b9c8:	e8730014 	lwi	r3, r19, 20
2002b9cc:	64630402 	bslli	r3, r3, 2
2002b9d0:	10641800 	addk	r3, r4, r3
2002b9d4:	e8830000 	lwi	r4, r3, 0
2002b9d8:	30840001 	addik	r4, r4, 1
2002b9dc:	f8830000 	swi	r4, r3, 0
    return value;
2002b9e0:	e8730004 	lwi	r3, r19, 4
}
2002b9e4:	10330000 	addk	r1, r19, r0
2002b9e8:	ea610008 	lwi	r19, r1, 8
2002b9ec:	3021000c 	addik	r1, r1, 12
2002b9f0:	b60f0008 	rtsd	r15, 8
2002b9f4:	80000000 	or	r0, r0, r0

2002b9f8 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002b9f8:	3021fff8 	addik	r1, r1, -8
2002b9fc:	fa610004 	swi	r19, r1, 4
2002ba00:	12610000 	addk	r19, r1, r0
2002ba04:	f8b3000c 	swi	r5, r19, 12
2002ba08:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002ba0c:	e873000c 	lwi	r3, r19, 12
2002ba10:	e8830004 	lwi	r4, r3, 4
2002ba14:	e873000c 	lwi	r3, r19, 12
2002ba18:	e8630010 	lwi	r3, r3, 16
2002ba1c:	e8a30000 	lwi	r5, r3, 0
2002ba20:	e873000c 	lwi	r3, r19, 12
2002ba24:	e8630000 	lwi	r3, r3, 0
2002ba28:	3063ffff 	addik	r3, r3, -1
2002ba2c:	84651800 	and	r3, r5, r3
2002ba30:	64630402 	bslli	r3, r3, 2
2002ba34:	10641800 	addk	r3, r4, r3
2002ba38:	e8930010 	lwi	r4, r19, 16
2002ba3c:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2002ba40:	e873000c 	lwi	r3, r19, 12
2002ba44:	e8630010 	lwi	r3, r3, 16
2002ba48:	e8830000 	lwi	r4, r3, 0
2002ba4c:	30840001 	addik	r4, r4, 1
2002ba50:	f8830000 	swi	r4, r3, 0
}
2002ba54:	10330000 	addk	r1, r19, r0
2002ba58:	ea610004 	lwi	r19, r1, 4
2002ba5c:	30210008 	addik	r1, r1, 8
2002ba60:	b60f0008 	rtsd	r15, 8
2002ba64:	80000000 	or	r0, r0, r0

2002ba68 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002ba68:	3021fff8 	addik	r1, r1, -8
2002ba6c:	fa610004 	swi	r19, r1, 4
2002ba70:	12610000 	addk	r19, r1, r0
2002ba74:	f8b3000c 	swi	r5, r19, 12
2002ba78:	f8d30010 	swi	r6, r19, 16
2002ba7c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002ba80:	e873000c 	lwi	r3, r19, 12
2002ba84:	e8630010 	lwi	r3, r3, 16
2002ba88:	e8830000 	lwi	r4, r3, 0
2002ba8c:	e873000c 	lwi	r3, r19, 12
2002ba90:	e8a3000c 	lwi	r5, r3, 12
2002ba94:	e8730010 	lwi	r3, r19, 16
2002ba98:	64630402 	bslli	r3, r3, 2
2002ba9c:	10651800 	addk	r3, r5, r3
2002baa0:	e8630000 	lwi	r3, r3, 0
2002baa4:	14a32000 	rsubk	r5, r3, r4
2002baa8:	30600001 	addik	r3, r0, 1
2002baac:	e8930014 	lwi	r4, r19, 20
2002bab0:	16442803 	cmpu	r18, r4, r5
2002bab4:	bcb20008 	bgei	r18, 8		// 2002babc
2002bab8:	10600000 	addk	r3, r0, r0
2002babc:	a46300ff 	andi	r3, r3, 255
}
2002bac0:	10330000 	addk	r1, r19, r0
2002bac4:	ea610004 	lwi	r19, r1, 4
2002bac8:	30210008 	addik	r1, r1, 8
2002bacc:	b60f0008 	rtsd	r15, 8
2002bad0:	80000000 	or	r0, r0, r0

2002bad4 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002bad4:	3021fff8 	addik	r1, r1, -8
2002bad8:	fa610004 	swi	r19, r1, 4
2002badc:	12610000 	addk	r19, r1, r0
2002bae0:	f8b3000c 	swi	r5, r19, 12
2002bae4:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002bae8:	e873000c 	lwi	r3, r19, 12
2002baec:	e8630010 	lwi	r3, r3, 16
2002baf0:	e8830000 	lwi	r4, r3, 0
2002baf4:	e873000c 	lwi	r3, r19, 12
2002baf8:	e8a3000c 	lwi	r5, r3, 12
2002bafc:	e8730010 	lwi	r3, r19, 16
2002bb00:	64630402 	bslli	r3, r3, 2
2002bb04:	10651800 	addk	r3, r5, r3
2002bb08:	e8630000 	lwi	r3, r3, 0
2002bb0c:	14632000 	rsubk	r3, r3, r4
}
2002bb10:	10330000 	addk	r1, r19, r0
2002bb14:	ea610004 	lwi	r19, r1, 4
2002bb18:	30210008 	addik	r1, r1, 8
2002bb1c:	b60f0008 	rtsd	r15, 8
2002bb20:	80000000 	or	r0, r0, r0

2002bb24 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002bb24:	3021fff4 	addik	r1, r1, -12
2002bb28:	fa610008 	swi	r19, r1, 8
2002bb2c:	12610000 	addk	r19, r1, r0
2002bb30:	f8b30010 	swi	r5, r19, 16
2002bb34:	f8d30014 	swi	r6, r19, 20
2002bb38:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002bb3c:	f8130004 	swi	r0, r19, 4
2002bb40:	b800005c 	bri	92		// 2002bb9c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002bb44:	e8730010 	lwi	r3, r19, 16
2002bb48:	e8830000 	lwi	r4, r3, 0
2002bb4c:	e8730010 	lwi	r3, r19, 16
2002bb50:	e8a3000c 	lwi	r5, r3, 12
2002bb54:	e8730004 	lwi	r3, r19, 4
2002bb58:	64630402 	bslli	r3, r3, 2
2002bb5c:	10651800 	addk	r3, r5, r3
2002bb60:	e8a30000 	lwi	r5, r3, 0
2002bb64:	e8730010 	lwi	r3, r19, 16
2002bb68:	e8630010 	lwi	r3, r3, 16
2002bb6c:	e8630000 	lwi	r3, r3, 0
2002bb70:	14632800 	rsubk	r3, r3, r5
2002bb74:	10641800 	addk	r3, r4, r3
2002bb78:	30830001 	addik	r4, r3, 1
2002bb7c:	e8730018 	lwi	r3, r19, 24
2002bb80:	16441803 	cmpu	r18, r4, r3
2002bb84:	bc52000c 	blti	r18, 12		// 2002bb90
            return 0;
2002bb88:	10600000 	addk	r3, r0, r0
2002bb8c:	b8000024 	bri	36		// 2002bbb0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002bb90:	e8730004 	lwi	r3, r19, 4
2002bb94:	30630001 	addik	r3, r3, 1
2002bb98:	f8730004 	swi	r3, r19, 4
2002bb9c:	e8930004 	lwi	r4, r19, 4
2002bba0:	e8730014 	lwi	r3, r19, 20
2002bba4:	16432003 	cmpu	r18, r3, r4
2002bba8:	bc52ff9c 	blti	r18, -100		// 2002bb44
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002bbac:	30600001 	addik	r3, r0, 1
}
2002bbb0:	10330000 	addk	r1, r19, r0
2002bbb4:	ea610008 	lwi	r19, r1, 8
2002bbb8:	3021000c 	addik	r1, r1, 12
2002bbbc:	b60f0008 	rtsd	r15, 8
2002bbc0:	80000000 	or	r0, r0, r0

2002bbc4 <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002bbc4:	3021ffec 	addik	r1, r1, -20
2002bbc8:	fa610010 	swi	r19, r1, 16
2002bbcc:	12610000 	addk	r19, r1, r0
2002bbd0:	f8b30018 	swi	r5, r19, 24
2002bbd4:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002bbd8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002bbdc:	f8130004 	swi	r0, r19, 4
2002bbe0:	b8000054 	bri	84		// 2002bc34
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2002bbe4:	e8730018 	lwi	r3, r19, 24
2002bbe8:	e8630010 	lwi	r3, r3, 16
2002bbec:	e8830000 	lwi	r4, r3, 0
2002bbf0:	e8730018 	lwi	r3, r19, 24
2002bbf4:	e8a3000c 	lwi	r5, r3, 12
2002bbf8:	e8730004 	lwi	r3, r19, 4
2002bbfc:	64630402 	bslli	r3, r3, 2
2002bc00:	10651800 	addk	r3, r5, r3
2002bc04:	e8630000 	lwi	r3, r3, 0
2002bc08:	14632000 	rsubk	r3, r3, r4
2002bc0c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002bc10:	e8930008 	lwi	r4, r19, 8
2002bc14:	e873000c 	lwi	r3, r19, 12
2002bc18:	16441803 	cmpu	r18, r4, r3
2002bc1c:	bcb20008 	bgei	r18, 8		// 2002bc24
2002bc20:	10640000 	addk	r3, r4, r0
2002bc24:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002bc28:	e8730004 	lwi	r3, r19, 4
2002bc2c:	30630001 	addik	r3, r3, 1
2002bc30:	f8730004 	swi	r3, r19, 4
2002bc34:	e8930004 	lwi	r4, r19, 4
2002bc38:	e873001c 	lwi	r3, r19, 28
2002bc3c:	16432003 	cmpu	r18, r3, r4
2002bc40:	bc52ffa4 	blti	r18, -92		// 2002bbe4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002bc44:	e8730018 	lwi	r3, r19, 24
2002bc48:	e8830000 	lwi	r4, r3, 0
2002bc4c:	e8730008 	lwi	r3, r19, 8
2002bc50:	14632000 	rsubk	r3, r3, r4
}
2002bc54:	10330000 	addk	r1, r19, r0
2002bc58:	ea610010 	lwi	r19, r1, 16
2002bc5c:	30210014 	addik	r1, r1, 20
2002bc60:	b60f0008 	rtsd	r15, 8
2002bc64:	80000000 	or	r0, r0, r0

2002bc68 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002bc68:	3021fff4 	addik	r1, r1, -12
2002bc6c:	fa610008 	swi	r19, r1, 8
2002bc70:	12610000 	addk	r19, r1, r0
2002bc74:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2002bc78:	e8730010 	lwi	r3, r19, 16
2002bc7c:	e8630010 	lwi	r3, r3, 16
2002bc80:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002bc84:	f8130004 	swi	r0, r19, 4
2002bc88:	b8000028 	bri	40		// 2002bcb0
        fifo->read_inds[i] = 0;
2002bc8c:	e8730010 	lwi	r3, r19, 16
2002bc90:	e883000c 	lwi	r4, r3, 12
2002bc94:	e8730004 	lwi	r3, r19, 4
2002bc98:	64630402 	bslli	r3, r3, 2
2002bc9c:	10641800 	addk	r3, r4, r3
2002bca0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002bca4:	e8730004 	lwi	r3, r19, 4
2002bca8:	30630001 	addik	r3, r3, 1
2002bcac:	f8730004 	swi	r3, r19, 4
2002bcb0:	e8730010 	lwi	r3, r19, 16
2002bcb4:	e8830008 	lwi	r4, r3, 8
2002bcb8:	e8730004 	lwi	r3, r19, 4
2002bcbc:	16441803 	cmpu	r18, r4, r3
2002bcc0:	bc52ffcc 	blti	r18, -52		// 2002bc8c
        fifo->read_inds[i] = 0;
    }
}
2002bcc4:	10330000 	addk	r1, r19, r0
2002bcc8:	ea610008 	lwi	r19, r1, 8
2002bccc:	3021000c 	addik	r1, r1, 12
2002bcd0:	b60f0008 	rtsd	r15, 8
2002bcd4:	80000000 	or	r0, r0, r0

2002bcd8 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002bcd8:	3021fff0 	addik	r1, r1, -16
2002bcdc:	fa61000c 	swi	r19, r1, 12
2002bce0:	12610000 	addk	r19, r1, r0
2002bce4:	f8b30014 	swi	r5, r19, 20
2002bce8:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2002bcec:	e8730014 	lwi	r3, r19, 20
2002bcf0:	e8830004 	lwi	r4, r3, 4
2002bcf4:	e8730014 	lwi	r3, r19, 20
2002bcf8:	e8a3000c 	lwi	r5, r3, 12
2002bcfc:	e8730018 	lwi	r3, r19, 24
2002bd00:	64630402 	bslli	r3, r3, 2
2002bd04:	10651800 	addk	r3, r5, r3
2002bd08:	e8a30000 	lwi	r5, r3, 0
2002bd0c:	e8730014 	lwi	r3, r19, 20
2002bd10:	e8630000 	lwi	r3, r3, 0
2002bd14:	3063ffff 	addik	r3, r3, -1
2002bd18:	84651800 	and	r3, r5, r3
2002bd1c:	64630403 	bslli	r3, r3, 3
2002bd20:	10641800 	addk	r3, r4, r3
2002bd24:	e8830000 	lwi	r4, r3, 0
2002bd28:	e8a30004 	lwi	r5, r3, 4
2002bd2c:	f8930004 	swi	r4, r19, 4
2002bd30:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2002bd34:	e8730014 	lwi	r3, r19, 20
2002bd38:	e883000c 	lwi	r4, r3, 12
2002bd3c:	e8730018 	lwi	r3, r19, 24
2002bd40:	64630402 	bslli	r3, r3, 2
2002bd44:	10641800 	addk	r3, r4, r3
2002bd48:	e8830000 	lwi	r4, r3, 0
2002bd4c:	30840001 	addik	r4, r4, 1
2002bd50:	f8830000 	swi	r4, r3, 0
    return value;
2002bd54:	e8930004 	lwi	r4, r19, 4
2002bd58:	e8b30008 	lwi	r5, r19, 8
}
2002bd5c:	10640000 	addk	r3, r4, r0
2002bd60:	10850000 	addk	r4, r5, r0
2002bd64:	10330000 	addk	r1, r19, r0
2002bd68:	ea61000c 	lwi	r19, r1, 12
2002bd6c:	30210010 	addik	r1, r1, 16
2002bd70:	b60f0008 	rtsd	r15, 8
2002bd74:	80000000 	or	r0, r0, r0

2002bd78 <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002bd78:	3021fff8 	addik	r1, r1, -8
2002bd7c:	fa610004 	swi	r19, r1, 4
2002bd80:	12610000 	addk	r19, r1, r0
2002bd84:	f8b3000c 	swi	r5, r19, 12
2002bd88:	f8d30010 	swi	r6, r19, 16
2002bd8c:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002bd90:	e873000c 	lwi	r3, r19, 12
2002bd94:	e8830004 	lwi	r4, r3, 4
2002bd98:	e873000c 	lwi	r3, r19, 12
2002bd9c:	e8630010 	lwi	r3, r3, 16
2002bda0:	e8a30000 	lwi	r5, r3, 0
2002bda4:	e873000c 	lwi	r3, r19, 12
2002bda8:	e8630000 	lwi	r3, r3, 0
2002bdac:	3063ffff 	addik	r3, r3, -1
2002bdb0:	84651800 	and	r3, r5, r3
2002bdb4:	64630403 	bslli	r3, r3, 3
2002bdb8:	10641800 	addk	r3, r4, r3
2002bdbc:	e8930010 	lwi	r4, r19, 16
2002bdc0:	e8b30014 	lwi	r5, r19, 20
2002bdc4:	f8830000 	swi	r4, r3, 0
2002bdc8:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2002bdcc:	e873000c 	lwi	r3, r19, 12
2002bdd0:	e8630010 	lwi	r3, r3, 16
2002bdd4:	e8830000 	lwi	r4, r3, 0
2002bdd8:	30840001 	addik	r4, r4, 1
2002bddc:	f8830000 	swi	r4, r3, 0
}
2002bde0:	10330000 	addk	r1, r19, r0
2002bde4:	ea610004 	lwi	r19, r1, 4
2002bde8:	30210008 	addik	r1, r1, 8
2002bdec:	b60f0008 	rtsd	r15, 8
2002bdf0:	80000000 	or	r0, r0, r0

2002bdf4 <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002bdf4:	3021fff8 	addik	r1, r1, -8
2002bdf8:	fa610004 	swi	r19, r1, 4
2002bdfc:	12610000 	addk	r19, r1, r0
2002be00:	f8b3000c 	swi	r5, r19, 12
2002be04:	f8d30010 	swi	r6, r19, 16
2002be08:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002be0c:	e873000c 	lwi	r3, r19, 12
2002be10:	e8630010 	lwi	r3, r3, 16
2002be14:	e8830000 	lwi	r4, r3, 0
2002be18:	e873000c 	lwi	r3, r19, 12
2002be1c:	e8a3000c 	lwi	r5, r3, 12
2002be20:	e8730010 	lwi	r3, r19, 16
2002be24:	64630402 	bslli	r3, r3, 2
2002be28:	10651800 	addk	r3, r5, r3
2002be2c:	e8630000 	lwi	r3, r3, 0
2002be30:	14a32000 	rsubk	r5, r3, r4
2002be34:	30600001 	addik	r3, r0, 1
2002be38:	e8930014 	lwi	r4, r19, 20
2002be3c:	16442803 	cmpu	r18, r4, r5
2002be40:	bcb20008 	bgei	r18, 8		// 2002be48
2002be44:	10600000 	addk	r3, r0, r0
2002be48:	a46300ff 	andi	r3, r3, 255
}
2002be4c:	10330000 	addk	r1, r19, r0
2002be50:	ea610004 	lwi	r19, r1, 4
2002be54:	30210008 	addik	r1, r1, 8
2002be58:	b60f0008 	rtsd	r15, 8
2002be5c:	80000000 	or	r0, r0, r0

2002be60 <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002be60:	3021fff8 	addik	r1, r1, -8
2002be64:	fa610004 	swi	r19, r1, 4
2002be68:	12610000 	addk	r19, r1, r0
2002be6c:	f8b3000c 	swi	r5, r19, 12
2002be70:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002be74:	e873000c 	lwi	r3, r19, 12
2002be78:	e8630010 	lwi	r3, r3, 16
2002be7c:	e8830000 	lwi	r4, r3, 0
2002be80:	e873000c 	lwi	r3, r19, 12
2002be84:	e8a3000c 	lwi	r5, r3, 12
2002be88:	e8730010 	lwi	r3, r19, 16
2002be8c:	64630402 	bslli	r3, r3, 2
2002be90:	10651800 	addk	r3, r5, r3
2002be94:	e8630000 	lwi	r3, r3, 0
2002be98:	14632000 	rsubk	r3, r3, r4
}
2002be9c:	10330000 	addk	r1, r19, r0
2002bea0:	ea610004 	lwi	r19, r1, 4
2002bea4:	30210008 	addik	r1, r1, 8
2002bea8:	b60f0008 	rtsd	r15, 8
2002beac:	80000000 	or	r0, r0, r0

2002beb0 <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002beb0:	3021fff4 	addik	r1, r1, -12
2002beb4:	fa610008 	swi	r19, r1, 8
2002beb8:	12610000 	addk	r19, r1, r0
2002bebc:	f8b30010 	swi	r5, r19, 16
2002bec0:	f8d30014 	swi	r6, r19, 20
2002bec4:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002bec8:	f8130004 	swi	r0, r19, 4
2002becc:	b800005c 	bri	92		// 2002bf28
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002bed0:	e8730010 	lwi	r3, r19, 16
2002bed4:	e8830000 	lwi	r4, r3, 0
2002bed8:	e8730010 	lwi	r3, r19, 16
2002bedc:	e8a3000c 	lwi	r5, r3, 12
2002bee0:	e8730004 	lwi	r3, r19, 4
2002bee4:	64630402 	bslli	r3, r3, 2
2002bee8:	10651800 	addk	r3, r5, r3
2002beec:	e8a30000 	lwi	r5, r3, 0
2002bef0:	e8730010 	lwi	r3, r19, 16
2002bef4:	e8630010 	lwi	r3, r3, 16
2002bef8:	e8630000 	lwi	r3, r3, 0
2002befc:	14632800 	rsubk	r3, r3, r5
2002bf00:	10641800 	addk	r3, r4, r3
2002bf04:	30830001 	addik	r4, r3, 1
2002bf08:	e8730018 	lwi	r3, r19, 24
2002bf0c:	16441803 	cmpu	r18, r4, r3
2002bf10:	bc52000c 	blti	r18, 12		// 2002bf1c
            return 0;
2002bf14:	10600000 	addk	r3, r0, r0
2002bf18:	b8000024 	bri	36		// 2002bf3c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002bf1c:	e8730004 	lwi	r3, r19, 4
2002bf20:	30630001 	addik	r3, r3, 1
2002bf24:	f8730004 	swi	r3, r19, 4
2002bf28:	e8930004 	lwi	r4, r19, 4
2002bf2c:	e8730014 	lwi	r3, r19, 20
2002bf30:	16432003 	cmpu	r18, r3, r4
2002bf34:	bc52ff9c 	blti	r18, -100		// 2002bed0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002bf38:	30600001 	addik	r3, r0, 1
}
2002bf3c:	10330000 	addk	r1, r19, r0
2002bf40:	ea610008 	lwi	r19, r1, 8
2002bf44:	3021000c 	addik	r1, r1, 12
2002bf48:	b60f0008 	rtsd	r15, 8
2002bf4c:	80000000 	or	r0, r0, r0

2002bf50 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002bf50:	3021ffec 	addik	r1, r1, -20
2002bf54:	fa610010 	swi	r19, r1, 16
2002bf58:	12610000 	addk	r19, r1, r0
2002bf5c:	f8b30018 	swi	r5, r19, 24
2002bf60:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002bf64:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002bf68:	f8130004 	swi	r0, r19, 4
2002bf6c:	b8000054 	bri	84		// 2002bfc0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2002bf70:	e8730018 	lwi	r3, r19, 24
2002bf74:	e8630010 	lwi	r3, r3, 16
2002bf78:	e8830000 	lwi	r4, r3, 0
2002bf7c:	e8730018 	lwi	r3, r19, 24
2002bf80:	e8a3000c 	lwi	r5, r3, 12
2002bf84:	e8730004 	lwi	r3, r19, 4
2002bf88:	64630402 	bslli	r3, r3, 2
2002bf8c:	10651800 	addk	r3, r5, r3
2002bf90:	e8630000 	lwi	r3, r3, 0
2002bf94:	14632000 	rsubk	r3, r3, r4
2002bf98:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002bf9c:	e8930008 	lwi	r4, r19, 8
2002bfa0:	e873000c 	lwi	r3, r19, 12
2002bfa4:	16441803 	cmpu	r18, r4, r3
2002bfa8:	bcb20008 	bgei	r18, 8		// 2002bfb0
2002bfac:	10640000 	addk	r3, r4, r0
2002bfb0:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002bfb4:	e8730004 	lwi	r3, r19, 4
2002bfb8:	30630001 	addik	r3, r3, 1
2002bfbc:	f8730004 	swi	r3, r19, 4
2002bfc0:	e8930004 	lwi	r4, r19, 4
2002bfc4:	e873001c 	lwi	r3, r19, 28
2002bfc8:	16432003 	cmpu	r18, r3, r4
2002bfcc:	bc52ffa4 	blti	r18, -92		// 2002bf70
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002bfd0:	e8730018 	lwi	r3, r19, 24
2002bfd4:	e8830000 	lwi	r4, r3, 0
2002bfd8:	e8730008 	lwi	r3, r19, 8
2002bfdc:	14632000 	rsubk	r3, r3, r4
}
2002bfe0:	10330000 	addk	r1, r19, r0
2002bfe4:	ea610010 	lwi	r19, r1, 16
2002bfe8:	30210014 	addik	r1, r1, 20
2002bfec:	b60f0008 	rtsd	r15, 8
2002bff0:	80000000 	or	r0, r0, r0

2002bff4 <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002bff4:	3021fff4 	addik	r1, r1, -12
2002bff8:	fa610008 	swi	r19, r1, 8
2002bffc:	12610000 	addk	r19, r1, r0
2002c000:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2002c004:	e8730010 	lwi	r3, r19, 16
2002c008:	e8630010 	lwi	r3, r3, 16
2002c00c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002c010:	f8130004 	swi	r0, r19, 4
2002c014:	b8000028 	bri	40		// 2002c03c
        fifo->read_inds[i] = 0;
2002c018:	e8730010 	lwi	r3, r19, 16
2002c01c:	e883000c 	lwi	r4, r3, 12
2002c020:	e8730004 	lwi	r3, r19, 4
2002c024:	64630402 	bslli	r3, r3, 2
2002c028:	10641800 	addk	r3, r4, r3
2002c02c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002c030:	e8730004 	lwi	r3, r19, 4
2002c034:	30630001 	addik	r3, r3, 1
2002c038:	f8730004 	swi	r3, r19, 4
2002c03c:	e8730010 	lwi	r3, r19, 16
2002c040:	e8830008 	lwi	r4, r3, 8
2002c044:	e8730004 	lwi	r3, r19, 4
2002c048:	16441803 	cmpu	r18, r4, r3
2002c04c:	bc52ffcc 	blti	r18, -52		// 2002c018
        fifo->read_inds[i] = 0;
    }
}
2002c050:	10330000 	addk	r1, r19, r0
2002c054:	ea610008 	lwi	r19, r1, 8
2002c058:	3021000c 	addik	r1, r1, 12
2002c05c:	b60f0008 	rtsd	r15, 8
2002c060:	80000000 	or	r0, r0, r0

2002c064 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002c064:	3021fff4 	addik	r1, r1, -12
2002c068:	fa610008 	swi	r19, r1, 8
2002c06c:	12610000 	addk	r19, r1, r0
2002c070:	f8b30010 	swi	r5, r19, 16
2002c074:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2002c078:	e8730010 	lwi	r3, r19, 16
2002c07c:	e8830004 	lwi	r4, r3, 4
2002c080:	e8730010 	lwi	r3, r19, 16
2002c084:	e8a3000c 	lwi	r5, r3, 12
2002c088:	e8730014 	lwi	r3, r19, 20
2002c08c:	64630402 	bslli	r3, r3, 2
2002c090:	10651800 	addk	r3, r5, r3
2002c094:	e8a30000 	lwi	r5, r3, 0
2002c098:	e8730010 	lwi	r3, r19, 16
2002c09c:	e8630000 	lwi	r3, r3, 0
2002c0a0:	3063ffff 	addik	r3, r3, -1
2002c0a4:	84651800 	and	r3, r5, r3
2002c0a8:	10641800 	addk	r3, r4, r3
2002c0ac:	e0630000 	lbui	r3, r3, 0
2002c0b0:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2002c0b4:	e8730010 	lwi	r3, r19, 16
2002c0b8:	e883000c 	lwi	r4, r3, 12
2002c0bc:	e8730014 	lwi	r3, r19, 20
2002c0c0:	64630402 	bslli	r3, r3, 2
2002c0c4:	10641800 	addk	r3, r4, r3
2002c0c8:	e8830000 	lwi	r4, r3, 0
2002c0cc:	30840001 	addik	r4, r4, 1
2002c0d0:	f8830000 	swi	r4, r3, 0
    return value;
2002c0d4:	e0730004 	lbui	r3, r19, 4
}
2002c0d8:	10330000 	addk	r1, r19, r0
2002c0dc:	ea610008 	lwi	r19, r1, 8
2002c0e0:	3021000c 	addik	r1, r1, 12
2002c0e4:	b60f0008 	rtsd	r15, 8
2002c0e8:	80000000 	or	r0, r0, r0

2002c0ec <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002c0ec:	3021fff8 	addik	r1, r1, -8
2002c0f0:	fa610004 	swi	r19, r1, 4
2002c0f4:	12610000 	addk	r19, r1, r0
2002c0f8:	f8b3000c 	swi	r5, r19, 12
2002c0fc:	10660000 	addk	r3, r6, r0
2002c100:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002c104:	e873000c 	lwi	r3, r19, 12
2002c108:	e8830004 	lwi	r4, r3, 4
2002c10c:	e873000c 	lwi	r3, r19, 12
2002c110:	e8630010 	lwi	r3, r3, 16
2002c114:	e8a30000 	lwi	r5, r3, 0
2002c118:	e873000c 	lwi	r3, r19, 12
2002c11c:	e8630000 	lwi	r3, r3, 0
2002c120:	3063ffff 	addik	r3, r3, -1
2002c124:	84651800 	and	r3, r5, r3
2002c128:	10641800 	addk	r3, r4, r3
2002c12c:	e0930010 	lbui	r4, r19, 16
2002c130:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2002c134:	e873000c 	lwi	r3, r19, 12
2002c138:	e8630010 	lwi	r3, r3, 16
2002c13c:	e8830000 	lwi	r4, r3, 0
2002c140:	30840001 	addik	r4, r4, 1
2002c144:	f8830000 	swi	r4, r3, 0
}
2002c148:	10330000 	addk	r1, r19, r0
2002c14c:	ea610004 	lwi	r19, r1, 4
2002c150:	30210008 	addik	r1, r1, 8
2002c154:	b60f0008 	rtsd	r15, 8
2002c158:	80000000 	or	r0, r0, r0

2002c15c <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002c15c:	3021fff8 	addik	r1, r1, -8
2002c160:	fa610004 	swi	r19, r1, 4
2002c164:	12610000 	addk	r19, r1, r0
2002c168:	f8b3000c 	swi	r5, r19, 12
2002c16c:	f8d30010 	swi	r6, r19, 16
2002c170:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002c174:	e873000c 	lwi	r3, r19, 12
2002c178:	e8630010 	lwi	r3, r3, 16
2002c17c:	e8830000 	lwi	r4, r3, 0
2002c180:	e873000c 	lwi	r3, r19, 12
2002c184:	e8a3000c 	lwi	r5, r3, 12
2002c188:	e8730010 	lwi	r3, r19, 16
2002c18c:	64630402 	bslli	r3, r3, 2
2002c190:	10651800 	addk	r3, r5, r3
2002c194:	e8630000 	lwi	r3, r3, 0
2002c198:	14a32000 	rsubk	r5, r3, r4
2002c19c:	30600001 	addik	r3, r0, 1
2002c1a0:	e8930014 	lwi	r4, r19, 20
2002c1a4:	16442803 	cmpu	r18, r4, r5
2002c1a8:	bcb20008 	bgei	r18, 8		// 2002c1b0
2002c1ac:	10600000 	addk	r3, r0, r0
2002c1b0:	a46300ff 	andi	r3, r3, 255
}
2002c1b4:	10330000 	addk	r1, r19, r0
2002c1b8:	ea610004 	lwi	r19, r1, 4
2002c1bc:	30210008 	addik	r1, r1, 8
2002c1c0:	b60f0008 	rtsd	r15, 8
2002c1c4:	80000000 	or	r0, r0, r0

2002c1c8 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002c1c8:	3021fff8 	addik	r1, r1, -8
2002c1cc:	fa610004 	swi	r19, r1, 4
2002c1d0:	12610000 	addk	r19, r1, r0
2002c1d4:	f8b3000c 	swi	r5, r19, 12
2002c1d8:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002c1dc:	e873000c 	lwi	r3, r19, 12
2002c1e0:	e8630010 	lwi	r3, r3, 16
2002c1e4:	e8830000 	lwi	r4, r3, 0
2002c1e8:	e873000c 	lwi	r3, r19, 12
2002c1ec:	e8a3000c 	lwi	r5, r3, 12
2002c1f0:	e8730010 	lwi	r3, r19, 16
2002c1f4:	64630402 	bslli	r3, r3, 2
2002c1f8:	10651800 	addk	r3, r5, r3
2002c1fc:	e8630000 	lwi	r3, r3, 0
2002c200:	14632000 	rsubk	r3, r3, r4
}
2002c204:	10330000 	addk	r1, r19, r0
2002c208:	ea610004 	lwi	r19, r1, 4
2002c20c:	30210008 	addik	r1, r1, 8
2002c210:	b60f0008 	rtsd	r15, 8
2002c214:	80000000 	or	r0, r0, r0

2002c218 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002c218:	3021fff4 	addik	r1, r1, -12
2002c21c:	fa610008 	swi	r19, r1, 8
2002c220:	12610000 	addk	r19, r1, r0
2002c224:	f8b30010 	swi	r5, r19, 16
2002c228:	f8d30014 	swi	r6, r19, 20
2002c22c:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002c230:	f8130004 	swi	r0, r19, 4
2002c234:	b800005c 	bri	92		// 2002c290
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002c238:	e8730010 	lwi	r3, r19, 16
2002c23c:	e8830000 	lwi	r4, r3, 0
2002c240:	e8730010 	lwi	r3, r19, 16
2002c244:	e8a3000c 	lwi	r5, r3, 12
2002c248:	e8730004 	lwi	r3, r19, 4
2002c24c:	64630402 	bslli	r3, r3, 2
2002c250:	10651800 	addk	r3, r5, r3
2002c254:	e8a30000 	lwi	r5, r3, 0
2002c258:	e8730010 	lwi	r3, r19, 16
2002c25c:	e8630010 	lwi	r3, r3, 16
2002c260:	e8630000 	lwi	r3, r3, 0
2002c264:	14632800 	rsubk	r3, r3, r5
2002c268:	10641800 	addk	r3, r4, r3
2002c26c:	30830001 	addik	r4, r3, 1
2002c270:	e8730018 	lwi	r3, r19, 24
2002c274:	16441803 	cmpu	r18, r4, r3
2002c278:	bc52000c 	blti	r18, 12		// 2002c284
            return 0;
2002c27c:	10600000 	addk	r3, r0, r0
2002c280:	b8000024 	bri	36		// 2002c2a4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002c284:	e8730004 	lwi	r3, r19, 4
2002c288:	30630001 	addik	r3, r3, 1
2002c28c:	f8730004 	swi	r3, r19, 4
2002c290:	e8930004 	lwi	r4, r19, 4
2002c294:	e8730014 	lwi	r3, r19, 20
2002c298:	16432003 	cmpu	r18, r3, r4
2002c29c:	bc52ff9c 	blti	r18, -100		// 2002c238
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002c2a0:	30600001 	addik	r3, r0, 1
}
2002c2a4:	10330000 	addk	r1, r19, r0
2002c2a8:	ea610008 	lwi	r19, r1, 8
2002c2ac:	3021000c 	addik	r1, r1, 12
2002c2b0:	b60f0008 	rtsd	r15, 8
2002c2b4:	80000000 	or	r0, r0, r0

2002c2b8 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002c2b8:	3021ffec 	addik	r1, r1, -20
2002c2bc:	fa610010 	swi	r19, r1, 16
2002c2c0:	12610000 	addk	r19, r1, r0
2002c2c4:	f8b30018 	swi	r5, r19, 24
2002c2c8:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002c2cc:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002c2d0:	f8130004 	swi	r0, r19, 4
2002c2d4:	b8000054 	bri	84		// 2002c328
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2002c2d8:	e8730018 	lwi	r3, r19, 24
2002c2dc:	e8630010 	lwi	r3, r3, 16
2002c2e0:	e8830000 	lwi	r4, r3, 0
2002c2e4:	e8730018 	lwi	r3, r19, 24
2002c2e8:	e8a3000c 	lwi	r5, r3, 12
2002c2ec:	e8730004 	lwi	r3, r19, 4
2002c2f0:	64630402 	bslli	r3, r3, 2
2002c2f4:	10651800 	addk	r3, r5, r3
2002c2f8:	e8630000 	lwi	r3, r3, 0
2002c2fc:	14632000 	rsubk	r3, r3, r4
2002c300:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002c304:	e8930008 	lwi	r4, r19, 8
2002c308:	e873000c 	lwi	r3, r19, 12
2002c30c:	16441803 	cmpu	r18, r4, r3
2002c310:	bcb20008 	bgei	r18, 8		// 2002c318
2002c314:	10640000 	addk	r3, r4, r0
2002c318:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002c31c:	e8730004 	lwi	r3, r19, 4
2002c320:	30630001 	addik	r3, r3, 1
2002c324:	f8730004 	swi	r3, r19, 4
2002c328:	e8930004 	lwi	r4, r19, 4
2002c32c:	e873001c 	lwi	r3, r19, 28
2002c330:	16432003 	cmpu	r18, r3, r4
2002c334:	bc52ffa4 	blti	r18, -92		// 2002c2d8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002c338:	e8730018 	lwi	r3, r19, 24
2002c33c:	e8830000 	lwi	r4, r3, 0
2002c340:	e8730008 	lwi	r3, r19, 8
2002c344:	14632000 	rsubk	r3, r3, r4
}
2002c348:	10330000 	addk	r1, r19, r0
2002c34c:	ea610010 	lwi	r19, r1, 16
2002c350:	30210014 	addik	r1, r1, 20
2002c354:	b60f0008 	rtsd	r15, 8
2002c358:	80000000 	or	r0, r0, r0

2002c35c <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002c35c:	3021fff4 	addik	r1, r1, -12
2002c360:	fa610008 	swi	r19, r1, 8
2002c364:	12610000 	addk	r19, r1, r0
2002c368:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2002c36c:	e8730010 	lwi	r3, r19, 16
2002c370:	e8630010 	lwi	r3, r3, 16
2002c374:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002c378:	f8130004 	swi	r0, r19, 4
2002c37c:	b8000028 	bri	40		// 2002c3a4
        fifo->read_inds[i] = 0;
2002c380:	e8730010 	lwi	r3, r19, 16
2002c384:	e883000c 	lwi	r4, r3, 12
2002c388:	e8730004 	lwi	r3, r19, 4
2002c38c:	64630402 	bslli	r3, r3, 2
2002c390:	10641800 	addk	r3, r4, r3
2002c394:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002c398:	e8730004 	lwi	r3, r19, 4
2002c39c:	30630001 	addik	r3, r3, 1
2002c3a0:	f8730004 	swi	r3, r19, 4
2002c3a4:	e8730010 	lwi	r3, r19, 16
2002c3a8:	e8830008 	lwi	r4, r3, 8
2002c3ac:	e8730004 	lwi	r3, r19, 4
2002c3b0:	16441803 	cmpu	r18, r4, r3
2002c3b4:	bc52ffcc 	blti	r18, -52		// 2002c380
        fifo->read_inds[i] = 0;
    }
}
2002c3b8:	10330000 	addk	r1, r19, r0
2002c3bc:	ea610008 	lwi	r19, r1, 8
2002c3c0:	3021000c 	addik	r1, r1, 12
2002c3c4:	b60f0008 	rtsd	r15, 8
2002c3c8:	80000000 	or	r0, r0, r0

2002c3cc <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002c3cc:	3021fff4 	addik	r1, r1, -12
2002c3d0:	fa610008 	swi	r19, r1, 8
2002c3d4:	12610000 	addk	r19, r1, r0
2002c3d8:	f8b30010 	swi	r5, r19, 16
2002c3dc:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2002c3e0:	e8730010 	lwi	r3, r19, 16
2002c3e4:	e8830004 	lwi	r4, r3, 4
2002c3e8:	e8730010 	lwi	r3, r19, 16
2002c3ec:	e8a3000c 	lwi	r5, r3, 12
2002c3f0:	e8730014 	lwi	r3, r19, 20
2002c3f4:	64630402 	bslli	r3, r3, 2
2002c3f8:	10651800 	addk	r3, r5, r3
2002c3fc:	e8a30000 	lwi	r5, r3, 0
2002c400:	e8730010 	lwi	r3, r19, 16
2002c404:	e8630000 	lwi	r3, r3, 0
2002c408:	3063ffff 	addik	r3, r3, -1
2002c40c:	84651800 	and	r3, r5, r3
2002c410:	10631800 	addk	r3, r3, r3
2002c414:	10641800 	addk	r3, r4, r3
2002c418:	e4630000 	lhui	r3, r3, 0
2002c41c:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2002c420:	e8730010 	lwi	r3, r19, 16
2002c424:	e883000c 	lwi	r4, r3, 12
2002c428:	e8730014 	lwi	r3, r19, 20
2002c42c:	64630402 	bslli	r3, r3, 2
2002c430:	10641800 	addk	r3, r4, r3
2002c434:	e8830000 	lwi	r4, r3, 0
2002c438:	30840001 	addik	r4, r4, 1
2002c43c:	f8830000 	swi	r4, r3, 0
    return value;
2002c440:	e4730004 	lhui	r3, r19, 4
}
2002c444:	10330000 	addk	r1, r19, r0
2002c448:	ea610008 	lwi	r19, r1, 8
2002c44c:	3021000c 	addik	r1, r1, 12
2002c450:	b60f0008 	rtsd	r15, 8
2002c454:	80000000 	or	r0, r0, r0

2002c458 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002c458:	3021fff8 	addik	r1, r1, -8
2002c45c:	fa610004 	swi	r19, r1, 4
2002c460:	12610000 	addk	r19, r1, r0
2002c464:	f8b3000c 	swi	r5, r19, 12
2002c468:	10660000 	addk	r3, r6, r0
2002c46c:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002c470:	e873000c 	lwi	r3, r19, 12
2002c474:	e8830004 	lwi	r4, r3, 4
2002c478:	e873000c 	lwi	r3, r19, 12
2002c47c:	e8630010 	lwi	r3, r3, 16
2002c480:	e8a30000 	lwi	r5, r3, 0
2002c484:	e873000c 	lwi	r3, r19, 12
2002c488:	e8630000 	lwi	r3, r3, 0
2002c48c:	3063ffff 	addik	r3, r3, -1
2002c490:	84651800 	and	r3, r5, r3
2002c494:	10631800 	addk	r3, r3, r3
2002c498:	10641800 	addk	r3, r4, r3
2002c49c:	e4930010 	lhui	r4, r19, 16
2002c4a0:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2002c4a4:	e873000c 	lwi	r3, r19, 12
2002c4a8:	e8630010 	lwi	r3, r3, 16
2002c4ac:	e8830000 	lwi	r4, r3, 0
2002c4b0:	30840001 	addik	r4, r4, 1
2002c4b4:	f8830000 	swi	r4, r3, 0
}
2002c4b8:	10330000 	addk	r1, r19, r0
2002c4bc:	ea610004 	lwi	r19, r1, 4
2002c4c0:	30210008 	addik	r1, r1, 8
2002c4c4:	b60f0008 	rtsd	r15, 8
2002c4c8:	80000000 	or	r0, r0, r0

2002c4cc <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002c4cc:	3021fff8 	addik	r1, r1, -8
2002c4d0:	fa610004 	swi	r19, r1, 4
2002c4d4:	12610000 	addk	r19, r1, r0
2002c4d8:	f8b3000c 	swi	r5, r19, 12
2002c4dc:	f8d30010 	swi	r6, r19, 16
2002c4e0:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002c4e4:	e873000c 	lwi	r3, r19, 12
2002c4e8:	e8630010 	lwi	r3, r3, 16
2002c4ec:	e8830000 	lwi	r4, r3, 0
2002c4f0:	e873000c 	lwi	r3, r19, 12
2002c4f4:	e8a3000c 	lwi	r5, r3, 12
2002c4f8:	e8730010 	lwi	r3, r19, 16
2002c4fc:	64630402 	bslli	r3, r3, 2
2002c500:	10651800 	addk	r3, r5, r3
2002c504:	e8630000 	lwi	r3, r3, 0
2002c508:	14a32000 	rsubk	r5, r3, r4
2002c50c:	30600001 	addik	r3, r0, 1
2002c510:	e8930014 	lwi	r4, r19, 20
2002c514:	16442803 	cmpu	r18, r4, r5
2002c518:	bcb20008 	bgei	r18, 8		// 2002c520
2002c51c:	10600000 	addk	r3, r0, r0
2002c520:	a46300ff 	andi	r3, r3, 255
}
2002c524:	10330000 	addk	r1, r19, r0
2002c528:	ea610004 	lwi	r19, r1, 4
2002c52c:	30210008 	addik	r1, r1, 8
2002c530:	b60f0008 	rtsd	r15, 8
2002c534:	80000000 	or	r0, r0, r0

2002c538 <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002c538:	3021fff8 	addik	r1, r1, -8
2002c53c:	fa610004 	swi	r19, r1, 4
2002c540:	12610000 	addk	r19, r1, r0
2002c544:	f8b3000c 	swi	r5, r19, 12
2002c548:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002c54c:	e873000c 	lwi	r3, r19, 12
2002c550:	e8630010 	lwi	r3, r3, 16
2002c554:	e8830000 	lwi	r4, r3, 0
2002c558:	e873000c 	lwi	r3, r19, 12
2002c55c:	e8a3000c 	lwi	r5, r3, 12
2002c560:	e8730010 	lwi	r3, r19, 16
2002c564:	64630402 	bslli	r3, r3, 2
2002c568:	10651800 	addk	r3, r5, r3
2002c56c:	e8630000 	lwi	r3, r3, 0
2002c570:	14632000 	rsubk	r3, r3, r4
}
2002c574:	10330000 	addk	r1, r19, r0
2002c578:	ea610004 	lwi	r19, r1, 4
2002c57c:	30210008 	addik	r1, r1, 8
2002c580:	b60f0008 	rtsd	r15, 8
2002c584:	80000000 	or	r0, r0, r0

2002c588 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002c588:	3021fff4 	addik	r1, r1, -12
2002c58c:	fa610008 	swi	r19, r1, 8
2002c590:	12610000 	addk	r19, r1, r0
2002c594:	f8b30010 	swi	r5, r19, 16
2002c598:	f8d30014 	swi	r6, r19, 20
2002c59c:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002c5a0:	f8130004 	swi	r0, r19, 4
2002c5a4:	b800005c 	bri	92		// 2002c600
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002c5a8:	e8730010 	lwi	r3, r19, 16
2002c5ac:	e8830000 	lwi	r4, r3, 0
2002c5b0:	e8730010 	lwi	r3, r19, 16
2002c5b4:	e8a3000c 	lwi	r5, r3, 12
2002c5b8:	e8730004 	lwi	r3, r19, 4
2002c5bc:	64630402 	bslli	r3, r3, 2
2002c5c0:	10651800 	addk	r3, r5, r3
2002c5c4:	e8a30000 	lwi	r5, r3, 0
2002c5c8:	e8730010 	lwi	r3, r19, 16
2002c5cc:	e8630010 	lwi	r3, r3, 16
2002c5d0:	e8630000 	lwi	r3, r3, 0
2002c5d4:	14632800 	rsubk	r3, r3, r5
2002c5d8:	10641800 	addk	r3, r4, r3
2002c5dc:	30830001 	addik	r4, r3, 1
2002c5e0:	e8730018 	lwi	r3, r19, 24
2002c5e4:	16441803 	cmpu	r18, r4, r3
2002c5e8:	bc52000c 	blti	r18, 12		// 2002c5f4
            return 0;
2002c5ec:	10600000 	addk	r3, r0, r0
2002c5f0:	b8000024 	bri	36		// 2002c614
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002c5f4:	e8730004 	lwi	r3, r19, 4
2002c5f8:	30630001 	addik	r3, r3, 1
2002c5fc:	f8730004 	swi	r3, r19, 4
2002c600:	e8930004 	lwi	r4, r19, 4
2002c604:	e8730014 	lwi	r3, r19, 20
2002c608:	16432003 	cmpu	r18, r3, r4
2002c60c:	bc52ff9c 	blti	r18, -100		// 2002c5a8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002c610:	30600001 	addik	r3, r0, 1
}
2002c614:	10330000 	addk	r1, r19, r0
2002c618:	ea610008 	lwi	r19, r1, 8
2002c61c:	3021000c 	addik	r1, r1, 12
2002c620:	b60f0008 	rtsd	r15, 8
2002c624:	80000000 	or	r0, r0, r0

2002c628 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002c628:	3021ffec 	addik	r1, r1, -20
2002c62c:	fa610010 	swi	r19, r1, 16
2002c630:	12610000 	addk	r19, r1, r0
2002c634:	f8b30018 	swi	r5, r19, 24
2002c638:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002c63c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002c640:	f8130004 	swi	r0, r19, 4
2002c644:	b8000054 	bri	84		// 2002c698
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2002c648:	e8730018 	lwi	r3, r19, 24
2002c64c:	e8630010 	lwi	r3, r3, 16
2002c650:	e8830000 	lwi	r4, r3, 0
2002c654:	e8730018 	lwi	r3, r19, 24
2002c658:	e8a3000c 	lwi	r5, r3, 12
2002c65c:	e8730004 	lwi	r3, r19, 4
2002c660:	64630402 	bslli	r3, r3, 2
2002c664:	10651800 	addk	r3, r5, r3
2002c668:	e8630000 	lwi	r3, r3, 0
2002c66c:	14632000 	rsubk	r3, r3, r4
2002c670:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002c674:	e8930008 	lwi	r4, r19, 8
2002c678:	e873000c 	lwi	r3, r19, 12
2002c67c:	16441803 	cmpu	r18, r4, r3
2002c680:	bcb20008 	bgei	r18, 8		// 2002c688
2002c684:	10640000 	addk	r3, r4, r0
2002c688:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002c68c:	e8730004 	lwi	r3, r19, 4
2002c690:	30630001 	addik	r3, r3, 1
2002c694:	f8730004 	swi	r3, r19, 4
2002c698:	e8930004 	lwi	r4, r19, 4
2002c69c:	e873001c 	lwi	r3, r19, 28
2002c6a0:	16432003 	cmpu	r18, r3, r4
2002c6a4:	bc52ffa4 	blti	r18, -92		// 2002c648
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002c6a8:	e8730018 	lwi	r3, r19, 24
2002c6ac:	e8830000 	lwi	r4, r3, 0
2002c6b0:	e8730008 	lwi	r3, r19, 8
2002c6b4:	14632000 	rsubk	r3, r3, r4
}
2002c6b8:	10330000 	addk	r1, r19, r0
2002c6bc:	ea610010 	lwi	r19, r1, 16
2002c6c0:	30210014 	addik	r1, r1, 20
2002c6c4:	b60f0008 	rtsd	r15, 8
2002c6c8:	80000000 	or	r0, r0, r0

2002c6cc <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002c6cc:	3021fff4 	addik	r1, r1, -12
2002c6d0:	fa610008 	swi	r19, r1, 8
2002c6d4:	12610000 	addk	r19, r1, r0
2002c6d8:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2002c6dc:	e8730010 	lwi	r3, r19, 16
2002c6e0:	e8630010 	lwi	r3, r3, 16
2002c6e4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002c6e8:	f8130004 	swi	r0, r19, 4
2002c6ec:	b8000028 	bri	40		// 2002c714
        fifo->read_inds[i] = 0;
2002c6f0:	e8730010 	lwi	r3, r19, 16
2002c6f4:	e883000c 	lwi	r4, r3, 12
2002c6f8:	e8730004 	lwi	r3, r19, 4
2002c6fc:	64630402 	bslli	r3, r3, 2
2002c700:	10641800 	addk	r3, r4, r3
2002c704:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002c708:	e8730004 	lwi	r3, r19, 4
2002c70c:	30630001 	addik	r3, r3, 1
2002c710:	f8730004 	swi	r3, r19, 4
2002c714:	e8730010 	lwi	r3, r19, 16
2002c718:	e8830008 	lwi	r4, r3, 8
2002c71c:	e8730004 	lwi	r3, r19, 4
2002c720:	16441803 	cmpu	r18, r4, r3
2002c724:	bc52ffcc 	blti	r18, -52		// 2002c6f0
        fifo->read_inds[i] = 0;
    }
}
2002c728:	10330000 	addk	r1, r19, r0
2002c72c:	ea610008 	lwi	r19, r1, 8
2002c730:	3021000c 	addik	r1, r1, 12
2002c734:	b60f0008 	rtsd	r15, 8
2002c738:	80000000 	or	r0, r0, r0

2002c73c <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002c73c:	3021fff4 	addik	r1, r1, -12
2002c740:	fa610008 	swi	r19, r1, 8
2002c744:	12610000 	addk	r19, r1, r0
2002c748:	f8b30010 	swi	r5, r19, 16
2002c74c:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2002c750:	e8730010 	lwi	r3, r19, 16
2002c754:	e8830004 	lwi	r4, r3, 4
2002c758:	e8730010 	lwi	r3, r19, 16
2002c75c:	e8a3000c 	lwi	r5, r3, 12
2002c760:	e8730014 	lwi	r3, r19, 20
2002c764:	64630402 	bslli	r3, r3, 2
2002c768:	10651800 	addk	r3, r5, r3
2002c76c:	e8a30000 	lwi	r5, r3, 0
2002c770:	e8730010 	lwi	r3, r19, 16
2002c774:	e8630000 	lwi	r3, r3, 0
2002c778:	3063ffff 	addik	r3, r3, -1
2002c77c:	84651800 	and	r3, r5, r3
2002c780:	64630402 	bslli	r3, r3, 2
2002c784:	10641800 	addk	r3, r4, r3
2002c788:	e8630000 	lwi	r3, r3, 0
2002c78c:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2002c790:	e8730010 	lwi	r3, r19, 16
2002c794:	e883000c 	lwi	r4, r3, 12
2002c798:	e8730014 	lwi	r3, r19, 20
2002c79c:	64630402 	bslli	r3, r3, 2
2002c7a0:	10641800 	addk	r3, r4, r3
2002c7a4:	e8830000 	lwi	r4, r3, 0
2002c7a8:	30840001 	addik	r4, r4, 1
2002c7ac:	f8830000 	swi	r4, r3, 0
    return value;
2002c7b0:	e8730004 	lwi	r3, r19, 4
}
2002c7b4:	10330000 	addk	r1, r19, r0
2002c7b8:	ea610008 	lwi	r19, r1, 8
2002c7bc:	3021000c 	addik	r1, r1, 12
2002c7c0:	b60f0008 	rtsd	r15, 8
2002c7c4:	80000000 	or	r0, r0, r0

2002c7c8 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002c7c8:	3021fff8 	addik	r1, r1, -8
2002c7cc:	fa610004 	swi	r19, r1, 4
2002c7d0:	12610000 	addk	r19, r1, r0
2002c7d4:	f8b3000c 	swi	r5, r19, 12
2002c7d8:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002c7dc:	e873000c 	lwi	r3, r19, 12
2002c7e0:	e8830004 	lwi	r4, r3, 4
2002c7e4:	e873000c 	lwi	r3, r19, 12
2002c7e8:	e8630010 	lwi	r3, r3, 16
2002c7ec:	e8a30000 	lwi	r5, r3, 0
2002c7f0:	e873000c 	lwi	r3, r19, 12
2002c7f4:	e8630000 	lwi	r3, r3, 0
2002c7f8:	3063ffff 	addik	r3, r3, -1
2002c7fc:	84651800 	and	r3, r5, r3
2002c800:	64630402 	bslli	r3, r3, 2
2002c804:	10641800 	addk	r3, r4, r3
2002c808:	e8930010 	lwi	r4, r19, 16
2002c80c:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2002c810:	e873000c 	lwi	r3, r19, 12
2002c814:	e8630010 	lwi	r3, r3, 16
2002c818:	e8830000 	lwi	r4, r3, 0
2002c81c:	30840001 	addik	r4, r4, 1
2002c820:	f8830000 	swi	r4, r3, 0
}
2002c824:	10330000 	addk	r1, r19, r0
2002c828:	ea610004 	lwi	r19, r1, 4
2002c82c:	30210008 	addik	r1, r1, 8
2002c830:	b60f0008 	rtsd	r15, 8
2002c834:	80000000 	or	r0, r0, r0

2002c838 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002c838:	3021fff8 	addik	r1, r1, -8
2002c83c:	fa610004 	swi	r19, r1, 4
2002c840:	12610000 	addk	r19, r1, r0
2002c844:	f8b3000c 	swi	r5, r19, 12
2002c848:	f8d30010 	swi	r6, r19, 16
2002c84c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002c850:	e873000c 	lwi	r3, r19, 12
2002c854:	e8630010 	lwi	r3, r3, 16
2002c858:	e8830000 	lwi	r4, r3, 0
2002c85c:	e873000c 	lwi	r3, r19, 12
2002c860:	e8a3000c 	lwi	r5, r3, 12
2002c864:	e8730010 	lwi	r3, r19, 16
2002c868:	64630402 	bslli	r3, r3, 2
2002c86c:	10651800 	addk	r3, r5, r3
2002c870:	e8630000 	lwi	r3, r3, 0
2002c874:	14a32000 	rsubk	r5, r3, r4
2002c878:	30600001 	addik	r3, r0, 1
2002c87c:	e8930014 	lwi	r4, r19, 20
2002c880:	16442803 	cmpu	r18, r4, r5
2002c884:	bcb20008 	bgei	r18, 8		// 2002c88c
2002c888:	10600000 	addk	r3, r0, r0
2002c88c:	a46300ff 	andi	r3, r3, 255
}
2002c890:	10330000 	addk	r1, r19, r0
2002c894:	ea610004 	lwi	r19, r1, 4
2002c898:	30210008 	addik	r1, r1, 8
2002c89c:	b60f0008 	rtsd	r15, 8
2002c8a0:	80000000 	or	r0, r0, r0

2002c8a4 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002c8a4:	3021fff8 	addik	r1, r1, -8
2002c8a8:	fa610004 	swi	r19, r1, 4
2002c8ac:	12610000 	addk	r19, r1, r0
2002c8b0:	f8b3000c 	swi	r5, r19, 12
2002c8b4:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002c8b8:	e873000c 	lwi	r3, r19, 12
2002c8bc:	e8630010 	lwi	r3, r3, 16
2002c8c0:	e8830000 	lwi	r4, r3, 0
2002c8c4:	e873000c 	lwi	r3, r19, 12
2002c8c8:	e8a3000c 	lwi	r5, r3, 12
2002c8cc:	e8730010 	lwi	r3, r19, 16
2002c8d0:	64630402 	bslli	r3, r3, 2
2002c8d4:	10651800 	addk	r3, r5, r3
2002c8d8:	e8630000 	lwi	r3, r3, 0
2002c8dc:	14632000 	rsubk	r3, r3, r4
}
2002c8e0:	10330000 	addk	r1, r19, r0
2002c8e4:	ea610004 	lwi	r19, r1, 4
2002c8e8:	30210008 	addik	r1, r1, 8
2002c8ec:	b60f0008 	rtsd	r15, 8
2002c8f0:	80000000 	or	r0, r0, r0

2002c8f4 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002c8f4:	3021fff4 	addik	r1, r1, -12
2002c8f8:	fa610008 	swi	r19, r1, 8
2002c8fc:	12610000 	addk	r19, r1, r0
2002c900:	f8b30010 	swi	r5, r19, 16
2002c904:	f8d30014 	swi	r6, r19, 20
2002c908:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002c90c:	f8130004 	swi	r0, r19, 4
2002c910:	b800005c 	bri	92		// 2002c96c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002c914:	e8730010 	lwi	r3, r19, 16
2002c918:	e8830000 	lwi	r4, r3, 0
2002c91c:	e8730010 	lwi	r3, r19, 16
2002c920:	e8a3000c 	lwi	r5, r3, 12
2002c924:	e8730004 	lwi	r3, r19, 4
2002c928:	64630402 	bslli	r3, r3, 2
2002c92c:	10651800 	addk	r3, r5, r3
2002c930:	e8a30000 	lwi	r5, r3, 0
2002c934:	e8730010 	lwi	r3, r19, 16
2002c938:	e8630010 	lwi	r3, r3, 16
2002c93c:	e8630000 	lwi	r3, r3, 0
2002c940:	14632800 	rsubk	r3, r3, r5
2002c944:	10641800 	addk	r3, r4, r3
2002c948:	30830001 	addik	r4, r3, 1
2002c94c:	e8730018 	lwi	r3, r19, 24
2002c950:	16441803 	cmpu	r18, r4, r3
2002c954:	bc52000c 	blti	r18, 12		// 2002c960
            return 0;
2002c958:	10600000 	addk	r3, r0, r0
2002c95c:	b8000024 	bri	36		// 2002c980
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002c960:	e8730004 	lwi	r3, r19, 4
2002c964:	30630001 	addik	r3, r3, 1
2002c968:	f8730004 	swi	r3, r19, 4
2002c96c:	e8930004 	lwi	r4, r19, 4
2002c970:	e8730014 	lwi	r3, r19, 20
2002c974:	16432003 	cmpu	r18, r3, r4
2002c978:	bc52ff9c 	blti	r18, -100		// 2002c914
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002c97c:	30600001 	addik	r3, r0, 1
}
2002c980:	10330000 	addk	r1, r19, r0
2002c984:	ea610008 	lwi	r19, r1, 8
2002c988:	3021000c 	addik	r1, r1, 12
2002c98c:	b60f0008 	rtsd	r15, 8
2002c990:	80000000 	or	r0, r0, r0

2002c994 <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002c994:	3021ffec 	addik	r1, r1, -20
2002c998:	fa610010 	swi	r19, r1, 16
2002c99c:	12610000 	addk	r19, r1, r0
2002c9a0:	f8b30018 	swi	r5, r19, 24
2002c9a4:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002c9a8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002c9ac:	f8130004 	swi	r0, r19, 4
2002c9b0:	b8000054 	bri	84		// 2002ca04
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2002c9b4:	e8730018 	lwi	r3, r19, 24
2002c9b8:	e8630010 	lwi	r3, r3, 16
2002c9bc:	e8830000 	lwi	r4, r3, 0
2002c9c0:	e8730018 	lwi	r3, r19, 24
2002c9c4:	e8a3000c 	lwi	r5, r3, 12
2002c9c8:	e8730004 	lwi	r3, r19, 4
2002c9cc:	64630402 	bslli	r3, r3, 2
2002c9d0:	10651800 	addk	r3, r5, r3
2002c9d4:	e8630000 	lwi	r3, r3, 0
2002c9d8:	14632000 	rsubk	r3, r3, r4
2002c9dc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002c9e0:	e8930008 	lwi	r4, r19, 8
2002c9e4:	e873000c 	lwi	r3, r19, 12
2002c9e8:	16441803 	cmpu	r18, r4, r3
2002c9ec:	bcb20008 	bgei	r18, 8		// 2002c9f4
2002c9f0:	10640000 	addk	r3, r4, r0
2002c9f4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002c9f8:	e8730004 	lwi	r3, r19, 4
2002c9fc:	30630001 	addik	r3, r3, 1
2002ca00:	f8730004 	swi	r3, r19, 4
2002ca04:	e8930004 	lwi	r4, r19, 4
2002ca08:	e873001c 	lwi	r3, r19, 28
2002ca0c:	16432003 	cmpu	r18, r3, r4
2002ca10:	bc52ffa4 	blti	r18, -92		// 2002c9b4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002ca14:	e8730018 	lwi	r3, r19, 24
2002ca18:	e8830000 	lwi	r4, r3, 0
2002ca1c:	e8730008 	lwi	r3, r19, 8
2002ca20:	14632000 	rsubk	r3, r3, r4
}
2002ca24:	10330000 	addk	r1, r19, r0
2002ca28:	ea610010 	lwi	r19, r1, 16
2002ca2c:	30210014 	addik	r1, r1, 20
2002ca30:	b60f0008 	rtsd	r15, 8
2002ca34:	80000000 	or	r0, r0, r0

2002ca38 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002ca38:	3021fff4 	addik	r1, r1, -12
2002ca3c:	fa610008 	swi	r19, r1, 8
2002ca40:	12610000 	addk	r19, r1, r0
2002ca44:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2002ca48:	e8730010 	lwi	r3, r19, 16
2002ca4c:	e8630010 	lwi	r3, r3, 16
2002ca50:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002ca54:	f8130004 	swi	r0, r19, 4
2002ca58:	b8000028 	bri	40		// 2002ca80
        fifo->read_inds[i] = 0;
2002ca5c:	e8730010 	lwi	r3, r19, 16
2002ca60:	e883000c 	lwi	r4, r3, 12
2002ca64:	e8730004 	lwi	r3, r19, 4
2002ca68:	64630402 	bslli	r3, r3, 2
2002ca6c:	10641800 	addk	r3, r4, r3
2002ca70:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002ca74:	e8730004 	lwi	r3, r19, 4
2002ca78:	30630001 	addik	r3, r3, 1
2002ca7c:	f8730004 	swi	r3, r19, 4
2002ca80:	e8730010 	lwi	r3, r19, 16
2002ca84:	e8830008 	lwi	r4, r3, 8
2002ca88:	e8730004 	lwi	r3, r19, 4
2002ca8c:	16441803 	cmpu	r18, r4, r3
2002ca90:	bc52ffcc 	blti	r18, -52		// 2002ca5c
        fifo->read_inds[i] = 0;
    }
}
2002ca94:	10330000 	addk	r1, r19, r0
2002ca98:	ea610008 	lwi	r19, r1, 8
2002ca9c:	3021000c 	addik	r1, r1, 12
2002caa0:	b60f0008 	rtsd	r15, 8
2002caa4:	80000000 	or	r0, r0, r0

2002caa8 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002caa8:	3021fff0 	addik	r1, r1, -16
2002caac:	fa61000c 	swi	r19, r1, 12
2002cab0:	12610000 	addk	r19, r1, r0
2002cab4:	f8b30014 	swi	r5, r19, 20
2002cab8:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2002cabc:	e8730014 	lwi	r3, r19, 20
2002cac0:	e8830004 	lwi	r4, r3, 4
2002cac4:	e8730014 	lwi	r3, r19, 20
2002cac8:	e8a3000c 	lwi	r5, r3, 12
2002cacc:	e8730018 	lwi	r3, r19, 24
2002cad0:	64630402 	bslli	r3, r3, 2
2002cad4:	10651800 	addk	r3, r5, r3
2002cad8:	e8a30000 	lwi	r5, r3, 0
2002cadc:	e8730014 	lwi	r3, r19, 20
2002cae0:	e8630000 	lwi	r3, r3, 0
2002cae4:	3063ffff 	addik	r3, r3, -1
2002cae8:	84651800 	and	r3, r5, r3
2002caec:	64630403 	bslli	r3, r3, 3
2002caf0:	10641800 	addk	r3, r4, r3
2002caf4:	e8830000 	lwi	r4, r3, 0
2002caf8:	e8a30004 	lwi	r5, r3, 4
2002cafc:	f8930004 	swi	r4, r19, 4
2002cb00:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2002cb04:	e8730014 	lwi	r3, r19, 20
2002cb08:	e883000c 	lwi	r4, r3, 12
2002cb0c:	e8730018 	lwi	r3, r19, 24
2002cb10:	64630402 	bslli	r3, r3, 2
2002cb14:	10641800 	addk	r3, r4, r3
2002cb18:	e8830000 	lwi	r4, r3, 0
2002cb1c:	30840001 	addik	r4, r4, 1
2002cb20:	f8830000 	swi	r4, r3, 0
    return value;
2002cb24:	e8930004 	lwi	r4, r19, 4
2002cb28:	e8b30008 	lwi	r5, r19, 8
}
2002cb2c:	10640000 	addk	r3, r4, r0
2002cb30:	10850000 	addk	r4, r5, r0
2002cb34:	10330000 	addk	r1, r19, r0
2002cb38:	ea61000c 	lwi	r19, r1, 12
2002cb3c:	30210010 	addik	r1, r1, 16
2002cb40:	b60f0008 	rtsd	r15, 8
2002cb44:	80000000 	or	r0, r0, r0

2002cb48 <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002cb48:	3021fff8 	addik	r1, r1, -8
2002cb4c:	fa610004 	swi	r19, r1, 4
2002cb50:	12610000 	addk	r19, r1, r0
2002cb54:	f8b3000c 	swi	r5, r19, 12
2002cb58:	f8d30010 	swi	r6, r19, 16
2002cb5c:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002cb60:	e873000c 	lwi	r3, r19, 12
2002cb64:	e8830004 	lwi	r4, r3, 4
2002cb68:	e873000c 	lwi	r3, r19, 12
2002cb6c:	e8630010 	lwi	r3, r3, 16
2002cb70:	e8a30000 	lwi	r5, r3, 0
2002cb74:	e873000c 	lwi	r3, r19, 12
2002cb78:	e8630000 	lwi	r3, r3, 0
2002cb7c:	3063ffff 	addik	r3, r3, -1
2002cb80:	84651800 	and	r3, r5, r3
2002cb84:	64630403 	bslli	r3, r3, 3
2002cb88:	10641800 	addk	r3, r4, r3
2002cb8c:	e8930010 	lwi	r4, r19, 16
2002cb90:	e8b30014 	lwi	r5, r19, 20
2002cb94:	f8830000 	swi	r4, r3, 0
2002cb98:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2002cb9c:	e873000c 	lwi	r3, r19, 12
2002cba0:	e8630010 	lwi	r3, r3, 16
2002cba4:	e8830000 	lwi	r4, r3, 0
2002cba8:	30840001 	addik	r4, r4, 1
2002cbac:	f8830000 	swi	r4, r3, 0
}
2002cbb0:	10330000 	addk	r1, r19, r0
2002cbb4:	ea610004 	lwi	r19, r1, 4
2002cbb8:	30210008 	addik	r1, r1, 8
2002cbbc:	b60f0008 	rtsd	r15, 8
2002cbc0:	80000000 	or	r0, r0, r0

2002cbc4 <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002cbc4:	3021fff8 	addik	r1, r1, -8
2002cbc8:	fa610004 	swi	r19, r1, 4
2002cbcc:	12610000 	addk	r19, r1, r0
2002cbd0:	f8b3000c 	swi	r5, r19, 12
2002cbd4:	f8d30010 	swi	r6, r19, 16
2002cbd8:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002cbdc:	e873000c 	lwi	r3, r19, 12
2002cbe0:	e8630010 	lwi	r3, r3, 16
2002cbe4:	e8830000 	lwi	r4, r3, 0
2002cbe8:	e873000c 	lwi	r3, r19, 12
2002cbec:	e8a3000c 	lwi	r5, r3, 12
2002cbf0:	e8730010 	lwi	r3, r19, 16
2002cbf4:	64630402 	bslli	r3, r3, 2
2002cbf8:	10651800 	addk	r3, r5, r3
2002cbfc:	e8630000 	lwi	r3, r3, 0
2002cc00:	14a32000 	rsubk	r5, r3, r4
2002cc04:	30600001 	addik	r3, r0, 1
2002cc08:	e8930014 	lwi	r4, r19, 20
2002cc0c:	16442803 	cmpu	r18, r4, r5
2002cc10:	bcb20008 	bgei	r18, 8		// 2002cc18
2002cc14:	10600000 	addk	r3, r0, r0
2002cc18:	a46300ff 	andi	r3, r3, 255
}
2002cc1c:	10330000 	addk	r1, r19, r0
2002cc20:	ea610004 	lwi	r19, r1, 4
2002cc24:	30210008 	addik	r1, r1, 8
2002cc28:	b60f0008 	rtsd	r15, 8
2002cc2c:	80000000 	or	r0, r0, r0

2002cc30 <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002cc30:	3021fff8 	addik	r1, r1, -8
2002cc34:	fa610004 	swi	r19, r1, 4
2002cc38:	12610000 	addk	r19, r1, r0
2002cc3c:	f8b3000c 	swi	r5, r19, 12
2002cc40:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002cc44:	e873000c 	lwi	r3, r19, 12
2002cc48:	e8630010 	lwi	r3, r3, 16
2002cc4c:	e8830000 	lwi	r4, r3, 0
2002cc50:	e873000c 	lwi	r3, r19, 12
2002cc54:	e8a3000c 	lwi	r5, r3, 12
2002cc58:	e8730010 	lwi	r3, r19, 16
2002cc5c:	64630402 	bslli	r3, r3, 2
2002cc60:	10651800 	addk	r3, r5, r3
2002cc64:	e8630000 	lwi	r3, r3, 0
2002cc68:	14632000 	rsubk	r3, r3, r4
}
2002cc6c:	10330000 	addk	r1, r19, r0
2002cc70:	ea610004 	lwi	r19, r1, 4
2002cc74:	30210008 	addik	r1, r1, 8
2002cc78:	b60f0008 	rtsd	r15, 8
2002cc7c:	80000000 	or	r0, r0, r0

2002cc80 <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002cc80:	3021fff4 	addik	r1, r1, -12
2002cc84:	fa610008 	swi	r19, r1, 8
2002cc88:	12610000 	addk	r19, r1, r0
2002cc8c:	f8b30010 	swi	r5, r19, 16
2002cc90:	f8d30014 	swi	r6, r19, 20
2002cc94:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002cc98:	f8130004 	swi	r0, r19, 4
2002cc9c:	b800005c 	bri	92		// 2002ccf8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002cca0:	e8730010 	lwi	r3, r19, 16
2002cca4:	e8830000 	lwi	r4, r3, 0
2002cca8:	e8730010 	lwi	r3, r19, 16
2002ccac:	e8a3000c 	lwi	r5, r3, 12
2002ccb0:	e8730004 	lwi	r3, r19, 4
2002ccb4:	64630402 	bslli	r3, r3, 2
2002ccb8:	10651800 	addk	r3, r5, r3
2002ccbc:	e8a30000 	lwi	r5, r3, 0
2002ccc0:	e8730010 	lwi	r3, r19, 16
2002ccc4:	e8630010 	lwi	r3, r3, 16
2002ccc8:	e8630000 	lwi	r3, r3, 0
2002cccc:	14632800 	rsubk	r3, r3, r5
2002ccd0:	10641800 	addk	r3, r4, r3
2002ccd4:	30830001 	addik	r4, r3, 1
2002ccd8:	e8730018 	lwi	r3, r19, 24
2002ccdc:	16441803 	cmpu	r18, r4, r3
2002cce0:	bc52000c 	blti	r18, 12		// 2002ccec
            return 0;
2002cce4:	10600000 	addk	r3, r0, r0
2002cce8:	b8000024 	bri	36		// 2002cd0c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002ccec:	e8730004 	lwi	r3, r19, 4
2002ccf0:	30630001 	addik	r3, r3, 1
2002ccf4:	f8730004 	swi	r3, r19, 4
2002ccf8:	e8930004 	lwi	r4, r19, 4
2002ccfc:	e8730014 	lwi	r3, r19, 20
2002cd00:	16432003 	cmpu	r18, r3, r4
2002cd04:	bc52ff9c 	blti	r18, -100		// 2002cca0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002cd08:	30600001 	addik	r3, r0, 1
}
2002cd0c:	10330000 	addk	r1, r19, r0
2002cd10:	ea610008 	lwi	r19, r1, 8
2002cd14:	3021000c 	addik	r1, r1, 12
2002cd18:	b60f0008 	rtsd	r15, 8
2002cd1c:	80000000 	or	r0, r0, r0

2002cd20 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002cd20:	3021ffec 	addik	r1, r1, -20
2002cd24:	fa610010 	swi	r19, r1, 16
2002cd28:	12610000 	addk	r19, r1, r0
2002cd2c:	f8b30018 	swi	r5, r19, 24
2002cd30:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002cd34:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002cd38:	f8130004 	swi	r0, r19, 4
2002cd3c:	b8000054 	bri	84		// 2002cd90
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2002cd40:	e8730018 	lwi	r3, r19, 24
2002cd44:	e8630010 	lwi	r3, r3, 16
2002cd48:	e8830000 	lwi	r4, r3, 0
2002cd4c:	e8730018 	lwi	r3, r19, 24
2002cd50:	e8a3000c 	lwi	r5, r3, 12
2002cd54:	e8730004 	lwi	r3, r19, 4
2002cd58:	64630402 	bslli	r3, r3, 2
2002cd5c:	10651800 	addk	r3, r5, r3
2002cd60:	e8630000 	lwi	r3, r3, 0
2002cd64:	14632000 	rsubk	r3, r3, r4
2002cd68:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002cd6c:	e8930008 	lwi	r4, r19, 8
2002cd70:	e873000c 	lwi	r3, r19, 12
2002cd74:	16441803 	cmpu	r18, r4, r3
2002cd78:	bcb20008 	bgei	r18, 8		// 2002cd80
2002cd7c:	10640000 	addk	r3, r4, r0
2002cd80:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002cd84:	e8730004 	lwi	r3, r19, 4
2002cd88:	30630001 	addik	r3, r3, 1
2002cd8c:	f8730004 	swi	r3, r19, 4
2002cd90:	e8930004 	lwi	r4, r19, 4
2002cd94:	e873001c 	lwi	r3, r19, 28
2002cd98:	16432003 	cmpu	r18, r3, r4
2002cd9c:	bc52ffa4 	blti	r18, -92		// 2002cd40
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002cda0:	e8730018 	lwi	r3, r19, 24
2002cda4:	e8830000 	lwi	r4, r3, 0
2002cda8:	e8730008 	lwi	r3, r19, 8
2002cdac:	14632000 	rsubk	r3, r3, r4
}
2002cdb0:	10330000 	addk	r1, r19, r0
2002cdb4:	ea610010 	lwi	r19, r1, 16
2002cdb8:	30210014 	addik	r1, r1, 20
2002cdbc:	b60f0008 	rtsd	r15, 8
2002cdc0:	80000000 	or	r0, r0, r0

2002cdc4 <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002cdc4:	3021fff4 	addik	r1, r1, -12
2002cdc8:	fa610008 	swi	r19, r1, 8
2002cdcc:	12610000 	addk	r19, r1, r0
2002cdd0:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2002cdd4:	e8730010 	lwi	r3, r19, 16
2002cdd8:	e8630010 	lwi	r3, r3, 16
2002cddc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002cde0:	f8130004 	swi	r0, r19, 4
2002cde4:	b8000028 	bri	40		// 2002ce0c
        fifo->read_inds[i] = 0;
2002cde8:	e8730010 	lwi	r3, r19, 16
2002cdec:	e883000c 	lwi	r4, r3, 12
2002cdf0:	e8730004 	lwi	r3, r19, 4
2002cdf4:	64630402 	bslli	r3, r3, 2
2002cdf8:	10641800 	addk	r3, r4, r3
2002cdfc:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002ce00:	e8730004 	lwi	r3, r19, 4
2002ce04:	30630001 	addik	r3, r3, 1
2002ce08:	f8730004 	swi	r3, r19, 4
2002ce0c:	e8730010 	lwi	r3, r19, 16
2002ce10:	e8830008 	lwi	r4, r3, 8
2002ce14:	e8730004 	lwi	r3, r19, 4
2002ce18:	16441803 	cmpu	r18, r4, r3
2002ce1c:	bc52ffcc 	blti	r18, -52		// 2002cde8
        fifo->read_inds[i] = 0;
    }
}
2002ce20:	10330000 	addk	r1, r19, r0
2002ce24:	ea610008 	lwi	r19, r1, 8
2002ce28:	3021000c 	addik	r1, r1, 12
2002ce2c:	b60f0008 	rtsd	r15, 8
2002ce30:	80000000 	or	r0, r0, r0

2002ce34 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002ce34:	3021fff4 	addik	r1, r1, -12
2002ce38:	fa610008 	swi	r19, r1, 8
2002ce3c:	12610000 	addk	r19, r1, r0
2002ce40:	f8b30010 	swi	r5, r19, 16
2002ce44:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2002ce48:	e8730010 	lwi	r3, r19, 16
2002ce4c:	e8830004 	lwi	r4, r3, 4
2002ce50:	e8730010 	lwi	r3, r19, 16
2002ce54:	e8a3000c 	lwi	r5, r3, 12
2002ce58:	e8730014 	lwi	r3, r19, 20
2002ce5c:	64630402 	bslli	r3, r3, 2
2002ce60:	10651800 	addk	r3, r5, r3
2002ce64:	e8a30000 	lwi	r5, r3, 0
2002ce68:	e8730010 	lwi	r3, r19, 16
2002ce6c:	e8630000 	lwi	r3, r3, 0
2002ce70:	3063ffff 	addik	r3, r3, -1
2002ce74:	84651800 	and	r3, r5, r3
2002ce78:	64630402 	bslli	r3, r3, 2
2002ce7c:	10641800 	addk	r3, r4, r3
2002ce80:	e8630000 	lwi	r3, r3, 0
2002ce84:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2002ce88:	e8730010 	lwi	r3, r19, 16
2002ce8c:	e883000c 	lwi	r4, r3, 12
2002ce90:	e8730014 	lwi	r3, r19, 20
2002ce94:	64630402 	bslli	r3, r3, 2
2002ce98:	10641800 	addk	r3, r4, r3
2002ce9c:	e8830000 	lwi	r4, r3, 0
2002cea0:	30840001 	addik	r4, r4, 1
2002cea4:	f8830000 	swi	r4, r3, 0
    return value;
2002cea8:	e8730004 	lwi	r3, r19, 4
}
2002ceac:	10330000 	addk	r1, r19, r0
2002ceb0:	ea610008 	lwi	r19, r1, 8
2002ceb4:	3021000c 	addik	r1, r1, 12
2002ceb8:	b60f0008 	rtsd	r15, 8
2002cebc:	80000000 	or	r0, r0, r0

2002cec0 <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002cec0:	3021fff8 	addik	r1, r1, -8
2002cec4:	fa610004 	swi	r19, r1, 4
2002cec8:	12610000 	addk	r19, r1, r0
2002cecc:	f8b3000c 	swi	r5, r19, 12
2002ced0:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002ced4:	e873000c 	lwi	r3, r19, 12
2002ced8:	e8830004 	lwi	r4, r3, 4
2002cedc:	e873000c 	lwi	r3, r19, 12
2002cee0:	e8630010 	lwi	r3, r3, 16
2002cee4:	e8a30000 	lwi	r5, r3, 0
2002cee8:	e873000c 	lwi	r3, r19, 12
2002ceec:	e8630000 	lwi	r3, r3, 0
2002cef0:	3063ffff 	addik	r3, r3, -1
2002cef4:	84651800 	and	r3, r5, r3
2002cef8:	64630402 	bslli	r3, r3, 2
2002cefc:	10641800 	addk	r3, r4, r3
2002cf00:	e8930010 	lwi	r4, r19, 16
2002cf04:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2002cf08:	e873000c 	lwi	r3, r19, 12
2002cf0c:	e8630010 	lwi	r3, r3, 16
2002cf10:	e8830000 	lwi	r4, r3, 0
2002cf14:	30840001 	addik	r4, r4, 1
2002cf18:	f8830000 	swi	r4, r3, 0
}
2002cf1c:	10330000 	addk	r1, r19, r0
2002cf20:	ea610004 	lwi	r19, r1, 4
2002cf24:	30210008 	addik	r1, r1, 8
2002cf28:	b60f0008 	rtsd	r15, 8
2002cf2c:	80000000 	or	r0, r0, r0

2002cf30 <read_BTYPE>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_BTYPE() {
2002cf30:	3021ffe0 	addik	r1, r1, -32
2002cf34:	f9e10000 	swi	r15, r1, 0
2002cf38:	fa61001c 	swi	r19, r1, 28
2002cf3c:	12610000 	addk	r19, r1, r0
		index_BTYPE = decoder_texture_DCReconstruction_invpred_BTYPE->read_inds[3];
2002cf40:	b0002004 	imm	8196
2002cf44:	e8607b0c 	lwi	r3, r0, 31500	// 20047b0c <decoder_texture_DCReconstruction_invpred_BTYPE>
2002cf48:	e863000c 	lwi	r3, r3, 12
2002cf4c:	e863000c 	lwi	r3, r3, 12
2002cf50:	b0002006 	imm	8198
2002cf54:	f8602088 	swi	r3, r0, 8328	// 20062088 <index_BTYPE>
		numTokens_BTYPE = index_BTYPE + fifo_i16_get_num_tokens(decoder_texture_DCReconstruction_invpred_BTYPE, 3);
2002cf58:	b0002004 	imm	8196
2002cf5c:	e8607b0c 	lwi	r3, r0, 31500	// 20047b0c <decoder_texture_DCReconstruction_invpred_BTYPE>
2002cf60:	10a30000 	addk	r5, r3, r0
2002cf64:	30c00003 	addik	r6, r0, 3
2002cf68:	b9f4e48c 	brlid	r15, -7028	// 2002b3f4 <fifo_i16_get_num_tokens>
2002cf6c:	80000000 	or	r0, r0, r0
2002cf70:	10830000 	addk	r4, r3, r0
2002cf74:	b0002006 	imm	8198
2002cf78:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002cf7c:	10641800 	addk	r3, r4, r3
2002cf80:	b0002006 	imm	8198
2002cf84:	f860208c 	swi	r3, r0, 8332	// 2006208c <numTokens_BTYPE>
	}
2002cf88:	e9e10000 	lwi	r15, r1, 0
2002cf8c:	10330000 	addk	r1, r19, r0
2002cf90:	ea61001c 	lwi	r19, r1, 28
2002cf94:	30210020 	addik	r1, r1, 32
2002cf98:	b60f0008 	rtsd	r15, 8
2002cf9c:	80000000 	or	r0, r0, r0

2002cfa0 <read_end_BTYPE>:
	
	static void read_end_BTYPE() {
2002cfa0:	3021fff8 	addik	r1, r1, -8
2002cfa4:	fa610004 	swi	r19, r1, 4
2002cfa8:	12610000 	addk	r19, r1, r0
		decoder_texture_DCReconstruction_invpred_BTYPE->read_inds[3] = index_BTYPE;
2002cfac:	b0002004 	imm	8196
2002cfb0:	e8607b0c 	lwi	r3, r0, 31500	// 20047b0c <decoder_texture_DCReconstruction_invpred_BTYPE>
2002cfb4:	e863000c 	lwi	r3, r3, 12
2002cfb8:	3063000c 	addik	r3, r3, 12
2002cfbc:	b0002006 	imm	8198
2002cfc0:	e8802088 	lwi	r4, r0, 8328	// 20062088 <index_BTYPE>
2002cfc4:	f8830000 	swi	r4, r3, 0
	}
2002cfc8:	10330000 	addk	r1, r19, r0
2002cfcc:	ea610004 	lwi	r19, r1, 4
2002cfd0:	30210008 	addik	r1, r1, 8
2002cfd4:	b60f0008 	rtsd	r15, 8
2002cfd8:	80000000 	or	r0, r0, r0

2002cfdc <read_A>:
	static void read_A() {
2002cfdc:	3021ffe0 	addik	r1, r1, -32
2002cfe0:	f9e10000 	swi	r15, r1, 0
2002cfe4:	fa61001c 	swi	r19, r1, 28
2002cfe8:	12610000 	addk	r19, r1, r0
		index_A = decoder_texture_DCReconstruction_invpred_A->read_inds[0];
2002cfec:	b0002004 	imm	8196
2002cff0:	e8607b74 	lwi	r3, r0, 31604	// 20047b74 <decoder_texture_DCReconstruction_invpred_A>
2002cff4:	e863000c 	lwi	r3, r3, 12
2002cff8:	e8630000 	lwi	r3, r3, 0
2002cffc:	b0002006 	imm	8198
2002d000:	f8602090 	swi	r3, r0, 8336	// 20062090 <index_A>
		numTokens_A = index_A + fifo_i16_get_num_tokens(decoder_texture_DCReconstruction_invpred_A, 0);
2002d004:	b0002004 	imm	8196
2002d008:	e8607b74 	lwi	r3, r0, 31604	// 20047b74 <decoder_texture_DCReconstruction_invpred_A>
2002d00c:	10a30000 	addk	r5, r3, r0
2002d010:	10c00000 	addk	r6, r0, r0
2002d014:	b9f4e3e0 	brlid	r15, -7200	// 2002b3f4 <fifo_i16_get_num_tokens>
2002d018:	80000000 	or	r0, r0, r0
2002d01c:	10830000 	addk	r4, r3, r0
2002d020:	b0002006 	imm	8198
2002d024:	e8602090 	lwi	r3, r0, 8336	// 20062090 <index_A>
2002d028:	10641800 	addk	r3, r4, r3
2002d02c:	b0002006 	imm	8198
2002d030:	f8602094 	swi	r3, r0, 8340	// 20062094 <numTokens_A>
	}
2002d034:	e9e10000 	lwi	r15, r1, 0
2002d038:	10330000 	addk	r1, r19, r0
2002d03c:	ea61001c 	lwi	r19, r1, 28
2002d040:	30210020 	addik	r1, r1, 32
2002d044:	b60f0008 	rtsd	r15, 8
2002d048:	80000000 	or	r0, r0, r0

2002d04c <read_end_A>:
	
	static void read_end_A() {
2002d04c:	3021fff8 	addik	r1, r1, -8
2002d050:	fa610004 	swi	r19, r1, 4
2002d054:	12610000 	addk	r19, r1, r0
		decoder_texture_DCReconstruction_invpred_A->read_inds[0] = index_A;
2002d058:	b0002004 	imm	8196
2002d05c:	e8607b74 	lwi	r3, r0, 31604	// 20047b74 <decoder_texture_DCReconstruction_invpred_A>
2002d060:	e863000c 	lwi	r3, r3, 12
2002d064:	b0002006 	imm	8198
2002d068:	e8802090 	lwi	r4, r0, 8336	// 20062090 <index_A>
2002d06c:	f8830000 	swi	r4, r3, 0
	}
2002d070:	10330000 	addk	r1, r19, r0
2002d074:	ea610004 	lwi	r19, r1, 4
2002d078:	30210008 	addik	r1, r1, 8
2002d07c:	b60f0008 	rtsd	r15, 8
2002d080:	80000000 	or	r0, r0, r0

2002d084 <read_B>:
	static void read_B() {
2002d084:	3021ffe0 	addik	r1, r1, -32
2002d088:	f9e10000 	swi	r15, r1, 0
2002d08c:	fa61001c 	swi	r19, r1, 28
2002d090:	12610000 	addk	r19, r1, r0
		index_B = decoder_texture_DCReconstruction_invpred_B->read_inds[0];
2002d094:	b0002004 	imm	8196
2002d098:	e8607b6c 	lwi	r3, r0, 31596	// 20047b6c <decoder_texture_DCReconstruction_invpred_B>
2002d09c:	e863000c 	lwi	r3, r3, 12
2002d0a0:	e8630000 	lwi	r3, r3, 0
2002d0a4:	b0002006 	imm	8198
2002d0a8:	f8602098 	swi	r3, r0, 8344	// 20062098 <index_B>
		numTokens_B = index_B + fifo_i16_get_num_tokens(decoder_texture_DCReconstruction_invpred_B, 0);
2002d0ac:	b0002004 	imm	8196
2002d0b0:	e8607b6c 	lwi	r3, r0, 31596	// 20047b6c <decoder_texture_DCReconstruction_invpred_B>
2002d0b4:	10a30000 	addk	r5, r3, r0
2002d0b8:	10c00000 	addk	r6, r0, r0
2002d0bc:	b9f4e338 	brlid	r15, -7368	// 2002b3f4 <fifo_i16_get_num_tokens>
2002d0c0:	80000000 	or	r0, r0, r0
2002d0c4:	10830000 	addk	r4, r3, r0
2002d0c8:	b0002006 	imm	8198
2002d0cc:	e8602098 	lwi	r3, r0, 8344	// 20062098 <index_B>
2002d0d0:	10641800 	addk	r3, r4, r3
2002d0d4:	b0002006 	imm	8198
2002d0d8:	f860209c 	swi	r3, r0, 8348	// 2006209c <numTokens_B>
	}
2002d0dc:	e9e10000 	lwi	r15, r1, 0
2002d0e0:	10330000 	addk	r1, r19, r0
2002d0e4:	ea61001c 	lwi	r19, r1, 28
2002d0e8:	30210020 	addik	r1, r1, 32
2002d0ec:	b60f0008 	rtsd	r15, 8
2002d0f0:	80000000 	or	r0, r0, r0

2002d0f4 <read_end_B>:
	
	static void read_end_B() {
2002d0f4:	3021fff8 	addik	r1, r1, -8
2002d0f8:	fa610004 	swi	r19, r1, 4
2002d0fc:	12610000 	addk	r19, r1, r0
		decoder_texture_DCReconstruction_invpred_B->read_inds[0] = index_B;
2002d100:	b0002004 	imm	8196
2002d104:	e8607b6c 	lwi	r3, r0, 31596	// 20047b6c <decoder_texture_DCReconstruction_invpred_B>
2002d108:	e863000c 	lwi	r3, r3, 12
2002d10c:	b0002006 	imm	8198
2002d110:	e8802098 	lwi	r4, r0, 8344	// 20062098 <index_B>
2002d114:	f8830000 	swi	r4, r3, 0
	}
2002d118:	10330000 	addk	r1, r19, r0
2002d11c:	ea610004 	lwi	r19, r1, 4
2002d120:	30210008 	addik	r1, r1, 8
2002d124:	b60f0008 	rtsd	r15, 8
2002d128:	80000000 	or	r0, r0, r0

2002d12c <read_C>:
	static void read_C() {
2002d12c:	3021ffe0 	addik	r1, r1, -32
2002d130:	f9e10000 	swi	r15, r1, 0
2002d134:	fa61001c 	swi	r19, r1, 28
2002d138:	12610000 	addk	r19, r1, r0
		index_C = decoder_texture_DCReconstruction_invpred_C->read_inds[0];
2002d13c:	b0002004 	imm	8196
2002d140:	e8607b7c 	lwi	r3, r0, 31612	// 20047b7c <decoder_texture_DCReconstruction_invpred_C>
2002d144:	e863000c 	lwi	r3, r3, 12
2002d148:	e8630000 	lwi	r3, r3, 0
2002d14c:	b0002006 	imm	8198
2002d150:	f86020a0 	swi	r3, r0, 8352	// 200620a0 <index_C>
		numTokens_C = index_C + fifo_i16_get_num_tokens(decoder_texture_DCReconstruction_invpred_C, 0);
2002d154:	b0002004 	imm	8196
2002d158:	e8607b7c 	lwi	r3, r0, 31612	// 20047b7c <decoder_texture_DCReconstruction_invpred_C>
2002d15c:	10a30000 	addk	r5, r3, r0
2002d160:	10c00000 	addk	r6, r0, r0
2002d164:	b9f4e290 	brlid	r15, -7536	// 2002b3f4 <fifo_i16_get_num_tokens>
2002d168:	80000000 	or	r0, r0, r0
2002d16c:	10830000 	addk	r4, r3, r0
2002d170:	b0002006 	imm	8198
2002d174:	e86020a0 	lwi	r3, r0, 8352	// 200620a0 <index_C>
2002d178:	10641800 	addk	r3, r4, r3
2002d17c:	b0002006 	imm	8198
2002d180:	f86020a4 	swi	r3, r0, 8356	// 200620a4 <numTokens_C>
	}
2002d184:	e9e10000 	lwi	r15, r1, 0
2002d188:	10330000 	addk	r1, r19, r0
2002d18c:	ea61001c 	lwi	r19, r1, 28
2002d190:	30210020 	addik	r1, r1, 32
2002d194:	b60f0008 	rtsd	r15, 8
2002d198:	80000000 	or	r0, r0, r0

2002d19c <read_end_C>:
	
	static void read_end_C() {
2002d19c:	3021fff8 	addik	r1, r1, -8
2002d1a0:	fa610004 	swi	r19, r1, 4
2002d1a4:	12610000 	addk	r19, r1, r0
		decoder_texture_DCReconstruction_invpred_C->read_inds[0] = index_C;
2002d1a8:	b0002004 	imm	8196
2002d1ac:	e8607b7c 	lwi	r3, r0, 31612	// 20047b7c <decoder_texture_DCReconstruction_invpred_C>
2002d1b0:	e863000c 	lwi	r3, r3, 12
2002d1b4:	b0002006 	imm	8198
2002d1b8:	e88020a0 	lwi	r4, r0, 8352	// 200620a0 <index_C>
2002d1bc:	f8830000 	swi	r4, r3, 0
	}
2002d1c0:	10330000 	addk	r1, r19, r0
2002d1c4:	ea610004 	lwi	r19, r1, 4
2002d1c8:	30210008 	addik	r1, r1, 8
2002d1cc:	b60f0008 	rtsd	r15, 8
2002d1d0:	80000000 	or	r0, r0, r0

2002d1d4 <read_QFS_DC>:
	static void read_QFS_DC() {
2002d1d4:	3021ffe0 	addik	r1, r1, -32
2002d1d8:	f9e10000 	swi	r15, r1, 0
2002d1dc:	fa61001c 	swi	r19, r1, 28
2002d1e0:	12610000 	addk	r19, r1, r0
		index_QFS_DC = decoder_texture_DCReconstruction_invpred_QFS_DC->read_inds[0];
2002d1e4:	b0002004 	imm	8196
2002d1e8:	e8607b44 	lwi	r3, r0, 31556	// 20047b44 <decoder_texture_DCReconstruction_invpred_QFS_DC>
2002d1ec:	e863000c 	lwi	r3, r3, 12
2002d1f0:	e8630000 	lwi	r3, r3, 0
2002d1f4:	b0002006 	imm	8198
2002d1f8:	f86020a8 	swi	r3, r0, 8360	// 200620a8 <index_QFS_DC>
		numTokens_QFS_DC = index_QFS_DC + fifo_i16_get_num_tokens(decoder_texture_DCReconstruction_invpred_QFS_DC, 0);
2002d1fc:	b0002004 	imm	8196
2002d200:	e8607b44 	lwi	r3, r0, 31556	// 20047b44 <decoder_texture_DCReconstruction_invpred_QFS_DC>
2002d204:	10a30000 	addk	r5, r3, r0
2002d208:	10c00000 	addk	r6, r0, r0
2002d20c:	b9f4e1e8 	brlid	r15, -7704	// 2002b3f4 <fifo_i16_get_num_tokens>
2002d210:	80000000 	or	r0, r0, r0
2002d214:	10830000 	addk	r4, r3, r0
2002d218:	b0002006 	imm	8198
2002d21c:	e86020a8 	lwi	r3, r0, 8360	// 200620a8 <index_QFS_DC>
2002d220:	10641800 	addk	r3, r4, r3
2002d224:	b0002006 	imm	8198
2002d228:	f86020ac 	swi	r3, r0, 8364	// 200620ac <numTokens_QFS_DC>
	}
2002d22c:	e9e10000 	lwi	r15, r1, 0
2002d230:	10330000 	addk	r1, r19, r0
2002d234:	ea61001c 	lwi	r19, r1, 28
2002d238:	30210020 	addik	r1, r1, 32
2002d23c:	b60f0008 	rtsd	r15, 8
2002d240:	80000000 	or	r0, r0, r0

2002d244 <read_end_QFS_DC>:
	
	static void read_end_QFS_DC() {
2002d244:	3021fff8 	addik	r1, r1, -8
2002d248:	fa610004 	swi	r19, r1, 4
2002d24c:	12610000 	addk	r19, r1, r0
		decoder_texture_DCReconstruction_invpred_QFS_DC->read_inds[0] = index_QFS_DC;
2002d250:	b0002004 	imm	8196
2002d254:	e8607b44 	lwi	r3, r0, 31556	// 20047b44 <decoder_texture_DCReconstruction_invpred_QFS_DC>
2002d258:	e863000c 	lwi	r3, r3, 12
2002d25c:	b0002006 	imm	8198
2002d260:	e88020a8 	lwi	r4, r0, 8360	// 200620a8 <index_QFS_DC>
2002d264:	f8830000 	swi	r4, r3, 0
	}
2002d268:	10330000 	addk	r1, r19, r0
2002d26c:	ea610004 	lwi	r19, r1, 4
2002d270:	30210008 	addik	r1, r1, 8
2002d274:	b60f0008 	rtsd	r15, 8
2002d278:	80000000 	or	r0, r0, r0

2002d27c <read_QP>:
	static void read_QP() {
2002d27c:	3021ffe0 	addik	r1, r1, -32
2002d280:	f9e10000 	swi	r15, r1, 0
2002d284:	fa61001c 	swi	r19, r1, 28
2002d288:	12610000 	addk	r19, r1, r0
		index_QP = decoder_texture_DCReconstruction_invpred_QP->read_inds[0];
2002d28c:	b0002004 	imm	8196
2002d290:	e8607ad0 	lwi	r3, r0, 31440	// 20047ad0 <decoder_texture_DCReconstruction_invpred_QP>
2002d294:	e863000c 	lwi	r3, r3, 12
2002d298:	e8630000 	lwi	r3, r3, 0
2002d29c:	b0002006 	imm	8198
2002d2a0:	f86020b0 	swi	r3, r0, 8368	// 200620b0 <index_QP>
		numTokens_QP = index_QP + fifo_i8_get_num_tokens(decoder_texture_DCReconstruction_invpred_QP, 0);
2002d2a4:	b0002004 	imm	8196
2002d2a8:	e8607ad0 	lwi	r3, r0, 31440	// 20047ad0 <decoder_texture_DCReconstruction_invpred_QP>
2002d2ac:	10a30000 	addk	r5, r3, r0
2002d2b0:	10c00000 	addk	r6, r0, r0
2002d2b4:	b9f4ddd4 	brlid	r15, -8748	// 2002b088 <fifo_i8_get_num_tokens>
2002d2b8:	80000000 	or	r0, r0, r0
2002d2bc:	10830000 	addk	r4, r3, r0
2002d2c0:	b0002006 	imm	8198
2002d2c4:	e86020b0 	lwi	r3, r0, 8368	// 200620b0 <index_QP>
2002d2c8:	10641800 	addk	r3, r4, r3
2002d2cc:	b0002006 	imm	8198
2002d2d0:	f86020b4 	swi	r3, r0, 8372	// 200620b4 <numTokens_QP>
	}
2002d2d4:	e9e10000 	lwi	r15, r1, 0
2002d2d8:	10330000 	addk	r1, r19, r0
2002d2dc:	ea61001c 	lwi	r19, r1, 28
2002d2e0:	30210020 	addik	r1, r1, 32
2002d2e4:	b60f0008 	rtsd	r15, 8
2002d2e8:	80000000 	or	r0, r0, r0

2002d2ec <read_end_QP>:
	
	static void read_end_QP() {
2002d2ec:	3021fff8 	addik	r1, r1, -8
2002d2f0:	fa610004 	swi	r19, r1, 4
2002d2f4:	12610000 	addk	r19, r1, r0
		decoder_texture_DCReconstruction_invpred_QP->read_inds[0] = index_QP;
2002d2f8:	b0002004 	imm	8196
2002d2fc:	e8607ad0 	lwi	r3, r0, 31440	// 20047ad0 <decoder_texture_DCReconstruction_invpred_QP>
2002d300:	e863000c 	lwi	r3, r3, 12
2002d304:	b0002006 	imm	8198
2002d308:	e88020b0 	lwi	r4, r0, 8368	// 200620b0 <index_QP>
2002d30c:	f8830000 	swi	r4, r3, 0
	}
2002d310:	10330000 	addk	r1, r19, r0
2002d314:	ea610004 	lwi	r19, r1, 4
2002d318:	30210008 	addik	r1, r1, 8
2002d31c:	b60f0008 	rtsd	r15, 8
2002d320:	80000000 	or	r0, r0, r0

2002d324 <write_QF_DC>:

	static void write_QF_DC() {
2002d324:	3021ffe0 	addik	r1, r1, -32
2002d328:	f9e10000 	swi	r15, r1, 0
2002d32c:	fa61001c 	swi	r19, r1, 28
2002d330:	12610000 	addk	r19, r1, r0
		index_QF_DC = (*decoder_texture_DCReconstruction_invpred_QF_DC->write_ind);
2002d334:	b0002004 	imm	8196
2002d338:	e8607b88 	lwi	r3, r0, 31624	// 20047b88 <decoder_texture_DCReconstruction_invpred_QF_DC>
2002d33c:	e8630010 	lwi	r3, r3, 16
2002d340:	e8630000 	lwi	r3, r3, 0
2002d344:	b0002006 	imm	8198
2002d348:	f86020b8 	swi	r3, r0, 8376	// 200620b8 <index_QF_DC>
		numFree_QF_DC = index_QF_DC + fifo_i16_get_room(decoder_texture_DCReconstruction_invpred_QF_DC, NUM_READERS_QF_DC);
2002d34c:	b0002004 	imm	8196
2002d350:	e8607b88 	lwi	r3, r0, 31624	// 20047b88 <decoder_texture_DCReconstruction_invpred_QF_DC>
2002d354:	10a30000 	addk	r5, r3, r0
2002d358:	30c00001 	addik	r6, r0, 1
2002d35c:	b9f4e188 	brlid	r15, -7800	// 2002b4e4 <fifo_i16_get_room>
2002d360:	80000000 	or	r0, r0, r0
2002d364:	10830000 	addk	r4, r3, r0
2002d368:	b0002006 	imm	8198
2002d36c:	e86020b8 	lwi	r3, r0, 8376	// 200620b8 <index_QF_DC>
2002d370:	10641800 	addk	r3, r4, r3
2002d374:	b0002006 	imm	8198
2002d378:	f86020bc 	swi	r3, r0, 8380	// 200620bc <numFree_QF_DC>
	}
2002d37c:	e9e10000 	lwi	r15, r1, 0
2002d380:	10330000 	addk	r1, r19, r0
2002d384:	ea61001c 	lwi	r19, r1, 28
2002d388:	30210020 	addik	r1, r1, 32
2002d38c:	b60f0008 	rtsd	r15, 8
2002d390:	80000000 	or	r0, r0, r0

2002d394 <write_end_QF_DC>:
	
	static void write_end_QF_DC() {
2002d394:	3021fff8 	addik	r1, r1, -8
2002d398:	fa610004 	swi	r19, r1, 4
2002d39c:	12610000 	addk	r19, r1, r0
		(*decoder_texture_DCReconstruction_invpred_QF_DC->write_ind) = index_QF_DC;
2002d3a0:	b0002004 	imm	8196
2002d3a4:	e8607b88 	lwi	r3, r0, 31624	// 20047b88 <decoder_texture_DCReconstruction_invpred_QF_DC>
2002d3a8:	e8630010 	lwi	r3, r3, 16
2002d3ac:	b0002006 	imm	8198
2002d3b0:	e88020b8 	lwi	r4, r0, 8376	// 200620b8 <index_QF_DC>
2002d3b4:	f8830000 	swi	r4, r3, 0
	}
2002d3b8:	10330000 	addk	r1, r19, r0
2002d3bc:	ea610004 	lwi	r19, r1, 4
2002d3c0:	30210008 	addik	r1, r1, 8
2002d3c4:	b60f0008 	rtsd	r15, 8
2002d3c8:	80000000 	or	r0, r0, r0

2002d3cc <write_PTR>:
	static void write_PTR() {
2002d3cc:	3021ffe0 	addik	r1, r1, -32
2002d3d0:	f9e10000 	swi	r15, r1, 0
2002d3d4:	fa61001c 	swi	r19, r1, 28
2002d3d8:	12610000 	addk	r19, r1, r0
		index_PTR = (*decoder_texture_DCReconstruction_invpred_PTR->write_ind);
2002d3dc:	b0002004 	imm	8196
2002d3e0:	e8607b80 	lwi	r3, r0, 31616	// 20047b80 <decoder_texture_DCReconstruction_invpred_PTR>
2002d3e4:	e8630010 	lwi	r3, r3, 16
2002d3e8:	e8630000 	lwi	r3, r3, 0
2002d3ec:	b0002006 	imm	8198
2002d3f0:	f86020c0 	swi	r3, r0, 8384	// 200620c0 <index_PTR>
		numFree_PTR = index_PTR + fifo_i16_get_room(decoder_texture_DCReconstruction_invpred_PTR, NUM_READERS_PTR);
2002d3f4:	b0002004 	imm	8196
2002d3f8:	e8607b80 	lwi	r3, r0, 31616	// 20047b80 <decoder_texture_DCReconstruction_invpred_PTR>
2002d3fc:	10a30000 	addk	r5, r3, r0
2002d400:	30c00001 	addik	r6, r0, 1
2002d404:	b9f4e0e0 	brlid	r15, -7968	// 2002b4e4 <fifo_i16_get_room>
2002d408:	80000000 	or	r0, r0, r0
2002d40c:	10830000 	addk	r4, r3, r0
2002d410:	b0002006 	imm	8198
2002d414:	e86020c0 	lwi	r3, r0, 8384	// 200620c0 <index_PTR>
2002d418:	10641800 	addk	r3, r4, r3
2002d41c:	b0002006 	imm	8198
2002d420:	f86020c4 	swi	r3, r0, 8388	// 200620c4 <numFree_PTR>
	}
2002d424:	e9e10000 	lwi	r15, r1, 0
2002d428:	10330000 	addk	r1, r19, r0
2002d42c:	ea61001c 	lwi	r19, r1, 28
2002d430:	30210020 	addik	r1, r1, 32
2002d434:	b60f0008 	rtsd	r15, 8
2002d438:	80000000 	or	r0, r0, r0

2002d43c <write_end_PTR>:
	
	static void write_end_PTR() {
2002d43c:	3021fff8 	addik	r1, r1, -8
2002d440:	fa610004 	swi	r19, r1, 4
2002d444:	12610000 	addk	r19, r1, r0
		(*decoder_texture_DCReconstruction_invpred_PTR->write_ind) = index_PTR;
2002d448:	b0002004 	imm	8196
2002d44c:	e8607b80 	lwi	r3, r0, 31616	// 20047b80 <decoder_texture_DCReconstruction_invpred_PTR>
2002d450:	e8630010 	lwi	r3, r3, 16
2002d454:	b0002006 	imm	8198
2002d458:	e88020c0 	lwi	r4, r0, 8384	// 200620c0 <index_PTR>
2002d45c:	f8830000 	swi	r4, r3, 0
	}
2002d460:	10330000 	addk	r1, r19, r0
2002d464:	ea610004 	lwi	r19, r1, 4
2002d468:	30210008 	addik	r1, r1, 8
2002d46c:	b60f0008 	rtsd	r15, 8
2002d470:	80000000 	or	r0, r0, r0

2002d474 <write_AC_PRED_DIR>:
	static void write_AC_PRED_DIR() {
2002d474:	3021ffe0 	addik	r1, r1, -32
2002d478:	f9e10000 	swi	r15, r1, 0
2002d47c:	fa61001c 	swi	r19, r1, 28
2002d480:	12610000 	addk	r19, r1, r0
		index_AC_PRED_DIR = (*decoder_texture_DCReconstruction_invpred_AC_PRED_DIR->write_ind);
2002d484:	b0002004 	imm	8196
2002d488:	e8607ba0 	lwi	r3, r0, 31648	// 20047ba0 <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>
2002d48c:	e8630010 	lwi	r3, r3, 16
2002d490:	e8630000 	lwi	r3, r3, 0
2002d494:	b0002006 	imm	8198
2002d498:	f86020c8 	swi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
		numFree_AC_PRED_DIR = index_AC_PRED_DIR + fifo_i8_get_room(decoder_texture_DCReconstruction_invpred_AC_PRED_DIR, NUM_READERS_AC_PRED_DIR);
2002d49c:	b0002004 	imm	8196
2002d4a0:	e8607ba0 	lwi	r3, r0, 31648	// 20047ba0 <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>
2002d4a4:	10a30000 	addk	r5, r3, r0
2002d4a8:	30c00001 	addik	r6, r0, 1
2002d4ac:	b9f4dccc 	brlid	r15, -9012	// 2002b178 <fifo_i8_get_room>
2002d4b0:	80000000 	or	r0, r0, r0
2002d4b4:	10830000 	addk	r4, r3, r0
2002d4b8:	b0002006 	imm	8198
2002d4bc:	e86020c8 	lwi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
2002d4c0:	10641800 	addk	r3, r4, r3
2002d4c4:	b0002006 	imm	8198
2002d4c8:	f86020cc 	swi	r3, r0, 8396	// 200620cc <numFree_AC_PRED_DIR>
	}
2002d4cc:	e9e10000 	lwi	r15, r1, 0
2002d4d0:	10330000 	addk	r1, r19, r0
2002d4d4:	ea61001c 	lwi	r19, r1, 28
2002d4d8:	30210020 	addik	r1, r1, 32
2002d4dc:	b60f0008 	rtsd	r15, 8
2002d4e0:	80000000 	or	r0, r0, r0

2002d4e4 <write_end_AC_PRED_DIR>:
	
	static void write_end_AC_PRED_DIR() {
2002d4e4:	3021fff8 	addik	r1, r1, -8
2002d4e8:	fa610004 	swi	r19, r1, 4
2002d4ec:	12610000 	addk	r19, r1, r0
		(*decoder_texture_DCReconstruction_invpred_AC_PRED_DIR->write_ind) = index_AC_PRED_DIR;
2002d4f0:	b0002004 	imm	8196
2002d4f4:	e8607ba0 	lwi	r3, r0, 31648	// 20047ba0 <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>
2002d4f8:	e8630010 	lwi	r3, r3, 16
2002d4fc:	b0002006 	imm	8198
2002d500:	e88020c8 	lwi	r4, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
2002d504:	f8830000 	swi	r4, r3, 0
	}
2002d508:	10330000 	addk	r1, r19, r0
2002d50c:	ea610004 	lwi	r19, r1, 4
2002d510:	30210008 	addik	r1, r1, 8
2002d514:	b60f0008 	rtsd	r15, 8
2002d518:	80000000 	or	r0, r0, r0

2002d51c <write_MODE>:
	static void write_MODE() {
2002d51c:	3021ffe0 	addik	r1, r1, -32
2002d520:	f9e10000 	swi	r15, r1, 0
2002d524:	fa61001c 	swi	r19, r1, 28
2002d528:	12610000 	addk	r19, r1, r0
		index_MODE = (*decoder_texture_DCReconstruction_invpred_MODE->write_ind);
2002d52c:	b0002004 	imm	8196
2002d530:	e8607b90 	lwi	r3, r0, 31632	// 20047b90 <decoder_texture_DCReconstruction_invpred_MODE>
2002d534:	e8630010 	lwi	r3, r3, 16
2002d538:	e8630000 	lwi	r3, r3, 0
2002d53c:	b0002006 	imm	8198
2002d540:	f86020d0 	swi	r3, r0, 8400	// 200620d0 <index_MODE>
		numFree_MODE = index_MODE + fifo_i8_get_room(decoder_texture_DCReconstruction_invpred_MODE, NUM_READERS_MODE);
2002d544:	b0002004 	imm	8196
2002d548:	e8607b90 	lwi	r3, r0, 31632	// 20047b90 <decoder_texture_DCReconstruction_invpred_MODE>
2002d54c:	10a30000 	addk	r5, r3, r0
2002d550:	30c00001 	addik	r6, r0, 1
2002d554:	b9f4dc24 	brlid	r15, -9180	// 2002b178 <fifo_i8_get_room>
2002d558:	80000000 	or	r0, r0, r0
2002d55c:	10830000 	addk	r4, r3, r0
2002d560:	b0002006 	imm	8198
2002d564:	e86020d0 	lwi	r3, r0, 8400	// 200620d0 <index_MODE>
2002d568:	10641800 	addk	r3, r4, r3
2002d56c:	b0002006 	imm	8198
2002d570:	f86020d4 	swi	r3, r0, 8404	// 200620d4 <numFree_MODE>
	}
2002d574:	e9e10000 	lwi	r15, r1, 0
2002d578:	10330000 	addk	r1, r19, r0
2002d57c:	ea61001c 	lwi	r19, r1, 28
2002d580:	30210020 	addik	r1, r1, 32
2002d584:	b60f0008 	rtsd	r15, 8
2002d588:	80000000 	or	r0, r0, r0

2002d58c <write_end_MODE>:
	
	static void write_end_MODE() {
2002d58c:	3021fff8 	addik	r1, r1, -8
2002d590:	fa610004 	swi	r19, r1, 4
2002d594:	12610000 	addk	r19, r1, r0
		(*decoder_texture_DCReconstruction_invpred_MODE->write_ind) = index_MODE;
2002d598:	b0002004 	imm	8196
2002d59c:	e8607b90 	lwi	r3, r0, 31632	// 20047b90 <decoder_texture_DCReconstruction_invpred_MODE>
2002d5a0:	e8630010 	lwi	r3, r3, 16
2002d5a4:	b0002006 	imm	8198
2002d5a8:	e88020d0 	lwi	r4, r0, 8400	// 200620d0 <index_MODE>
2002d5ac:	f8830000 	swi	r4, r3, 0
	}
2002d5b0:	10330000 	addk	r1, r19, r0
2002d5b4:	ea610004 	lwi	r19, r1, 4
2002d5b8:	30210008 	addik	r1, r1, 8
2002d5bc:	b60f0008 	rtsd	r15, 8
2002d5c0:	80000000 	or	r0, r0, r0

2002d5c4 <write_SIGNED>:
	static void write_SIGNED() {
2002d5c4:	3021ffe0 	addik	r1, r1, -32
2002d5c8:	f9e10000 	swi	r15, r1, 0
2002d5cc:	fa61001c 	swi	r19, r1, 28
2002d5d0:	12610000 	addk	r19, r1, r0
		index_SIGNED = (*decoder_texture_DCReconstruction_invpred_SIGNED->write_ind);
2002d5d4:	b0002004 	imm	8196
2002d5d8:	e8607b98 	lwi	r3, r0, 31640	// 20047b98 <decoder_texture_DCReconstruction_invpred_SIGNED>
2002d5dc:	e8630010 	lwi	r3, r3, 16
2002d5e0:	e8630000 	lwi	r3, r3, 0
2002d5e4:	b0002006 	imm	8198
2002d5e8:	f86020d8 	swi	r3, r0, 8408	// 200620d8 <index_SIGNED>
		numFree_SIGNED = index_SIGNED + fifo_i32_get_room(decoder_texture_DCReconstruction_invpred_SIGNED, NUM_READERS_SIGNED);
2002d5ec:	b0002004 	imm	8196
2002d5f0:	e8607b98 	lwi	r3, r0, 31640	// 20047b98 <decoder_texture_DCReconstruction_invpred_SIGNED>
2002d5f4:	10a30000 	addk	r5, r3, r0
2002d5f8:	30c00001 	addik	r6, r0, 1
2002d5fc:	b9f4e25c 	brlid	r15, -7588	// 2002b858 <fifo_i32_get_room>
2002d600:	80000000 	or	r0, r0, r0
2002d604:	10830000 	addk	r4, r3, r0
2002d608:	b0002006 	imm	8198
2002d60c:	e86020d8 	lwi	r3, r0, 8408	// 200620d8 <index_SIGNED>
2002d610:	10641800 	addk	r3, r4, r3
2002d614:	b0002006 	imm	8198
2002d618:	f86020dc 	swi	r3, r0, 8412	// 200620dc <numFree_SIGNED>
	}
2002d61c:	e9e10000 	lwi	r15, r1, 0
2002d620:	10330000 	addk	r1, r19, r0
2002d624:	ea61001c 	lwi	r19, r1, 28
2002d628:	30210020 	addik	r1, r1, 32
2002d62c:	b60f0008 	rtsd	r15, 8
2002d630:	80000000 	or	r0, r0, r0

2002d634 <write_end_SIGNED>:
	
	static void write_end_SIGNED() {
2002d634:	3021fff8 	addik	r1, r1, -8
2002d638:	fa610004 	swi	r19, r1, 4
2002d63c:	12610000 	addk	r19, r1, r0
		(*decoder_texture_DCReconstruction_invpred_SIGNED->write_ind) = index_SIGNED;
2002d640:	b0002004 	imm	8196
2002d644:	e8607b98 	lwi	r3, r0, 31640	// 20047b98 <decoder_texture_DCReconstruction_invpred_SIGNED>
2002d648:	e8630010 	lwi	r3, r3, 16
2002d64c:	b0002006 	imm	8198
2002d650:	e88020d8 	lwi	r4, r0, 8408	// 200620d8 <index_SIGNED>
2002d654:	f8830000 	swi	r4, r3, 0
	}
2002d658:	10330000 	addk	r1, r19, r0
2002d65c:	ea610004 	lwi	r19, r1, 4
2002d660:	30210008 	addik	r1, r1, 8
2002d664:	b60f0008 	rtsd	r15, 8
2002d668:	80000000 	or	r0, r0, r0

2002d66c <write_QUANT>:
	static void write_QUANT() {
2002d66c:	3021ffe0 	addik	r1, r1, -32
2002d670:	f9e10000 	swi	r15, r1, 0
2002d674:	fa61001c 	swi	r19, r1, 28
2002d678:	12610000 	addk	r19, r1, r0
		index_QUANT = (*decoder_texture_DCReconstruction_invpred_QUANT->write_ind);
2002d67c:	b0002004 	imm	8196
2002d680:	e8607ba8 	lwi	r3, r0, 31656	// 20047ba8 <decoder_texture_DCReconstruction_invpred_QUANT>
2002d684:	e8630010 	lwi	r3, r3, 16
2002d688:	e8630000 	lwi	r3, r3, 0
2002d68c:	b0002006 	imm	8198
2002d690:	f86020e0 	swi	r3, r0, 8416	// 200620e0 <index_QUANT>
		numFree_QUANT = index_QUANT + fifo_i8_get_room(decoder_texture_DCReconstruction_invpred_QUANT, NUM_READERS_QUANT);
2002d694:	b0002004 	imm	8196
2002d698:	e8607ba8 	lwi	r3, r0, 31656	// 20047ba8 <decoder_texture_DCReconstruction_invpred_QUANT>
2002d69c:	10a30000 	addk	r5, r3, r0
2002d6a0:	30c00001 	addik	r6, r0, 1
2002d6a4:	b9f4dad4 	brlid	r15, -9516	// 2002b178 <fifo_i8_get_room>
2002d6a8:	80000000 	or	r0, r0, r0
2002d6ac:	10830000 	addk	r4, r3, r0
2002d6b0:	b0002006 	imm	8198
2002d6b4:	e86020e0 	lwi	r3, r0, 8416	// 200620e0 <index_QUANT>
2002d6b8:	10641800 	addk	r3, r4, r3
2002d6bc:	b0002006 	imm	8198
2002d6c0:	f86020e4 	swi	r3, r0, 8420	// 200620e4 <numFree_QUANT>
	}
2002d6c4:	e9e10000 	lwi	r15, r1, 0
2002d6c8:	10330000 	addk	r1, r19, r0
2002d6cc:	ea61001c 	lwi	r19, r1, 28
2002d6d0:	30210020 	addik	r1, r1, 32
2002d6d4:	b60f0008 	rtsd	r15, 8
2002d6d8:	80000000 	or	r0, r0, r0

2002d6dc <write_end_QUANT>:
	
	static void write_end_QUANT() {
2002d6dc:	3021fff8 	addik	r1, r1, -8
2002d6e0:	fa610004 	swi	r19, r1, 4
2002d6e4:	12610000 	addk	r19, r1, r0
		(*decoder_texture_DCReconstruction_invpred_QUANT->write_ind) = index_QUANT;
2002d6e8:	b0002004 	imm	8196
2002d6ec:	e8607ba8 	lwi	r3, r0, 31656	// 20047ba8 <decoder_texture_DCReconstruction_invpred_QUANT>
2002d6f0:	e8630010 	lwi	r3, r3, 16
2002d6f4:	b0002006 	imm	8198
2002d6f8:	e88020e0 	lwi	r4, r0, 8416	// 200620e0 <index_QUANT>
2002d6fc:	f8830000 	swi	r4, r3, 0
	}
2002d700:	10330000 	addk	r1, r19, r0
2002d704:	ea610004 	lwi	r19, r1, 4
2002d708:	30210008 	addik	r1, r1, 8
2002d70c:	b60f0008 	rtsd	r15, 8
2002d710:	80000000 	or	r0, r0, r0

2002d714 <Math_abs>:
	// Functions/procedures
	static i32 Math_abs(i32 x);
	static i32 saturate(i32 x);
	static i8 dc_scaler();

	static i32 Math_abs(i32 x) {
2002d714:	3021fff4 	addik	r1, r1, -12
2002d718:	fa610008 	swi	r19, r1, 8
2002d71c:	12610000 	addk	r19, r1, r0
2002d720:	f8b30010 	swi	r5, r19, 16
		i32 tmp_if;
	
		if (x > 0) {
2002d724:	e8730010 	lwi	r3, r19, 16
2002d728:	bc630010 	blei	r3, 16		// 2002d738
			tmp_if = x;
2002d72c:	e8730010 	lwi	r3, r19, 16
2002d730:	f8730004 	swi	r3, r19, 4
2002d734:	b8000010 	bri	16		// 2002d744
		} else {
			tmp_if = -x;
2002d738:	e8730010 	lwi	r3, r19, 16
2002d73c:	14630000 	rsubk	r3, r3, r0
2002d740:	f8730004 	swi	r3, r19, 4
		}
		return tmp_if;
2002d744:	e8730004 	lwi	r3, r19, 4
	}
2002d748:	10330000 	addk	r1, r19, r0
2002d74c:	ea610008 	lwi	r19, r1, 8
2002d750:	3021000c 	addik	r1, r1, 12
2002d754:	b60f0008 	rtsd	r15, 8
2002d758:	80000000 	or	r0, r0, r0

2002d75c <saturate>:
	static i32 saturate(i32 x) {
2002d75c:	3021ffec 	addik	r1, r1, -20
2002d760:	fa610010 	swi	r19, r1, 16
2002d764:	12610000 	addk	r19, r1, r0
2002d768:	f8b30018 	swi	r5, r19, 24
		i32 minus;
		i32 plus;
		i32 tmp_if;
	
		minus = x < -2048;
2002d76c:	30600001 	addik	r3, r0, 1
2002d770:	e8b30018 	lwi	r5, r19, 24
2002d774:	3080f800 	addik	r4, r0, -2048
2002d778:	16442801 	cmp	r18, r4, r5
2002d77c:	bc520008 	blti	r18, 8		// 2002d784
2002d780:	10600000 	addk	r3, r0, r0
2002d784:	a46300ff 	andi	r3, r3, 255
2002d788:	f8730008 	swi	r3, r19, 8
		plus = x > 2047;
2002d78c:	30600001 	addik	r3, r0, 1
2002d790:	e8b30018 	lwi	r5, r19, 24
2002d794:	308007ff 	addik	r4, r0, 2047
2002d798:	16452001 	cmp	r18, r5, r4
2002d79c:	bc520008 	blti	r18, 8		// 2002d7a4
2002d7a0:	10600000 	addk	r3, r0, r0
2002d7a4:	a46300ff 	andi	r3, r3, 255
2002d7a8:	f873000c 	swi	r3, r19, 12
		if (minus) {
2002d7ac:	e8730008 	lwi	r3, r19, 8
2002d7b0:	bc030010 	beqi	r3, 16		// 2002d7c0
			tmp_if = -2048;
2002d7b4:	3060f800 	addik	r3, r0, -2048
2002d7b8:	f8730004 	swi	r3, r19, 4
2002d7bc:	b8000020 	bri	32		// 2002d7dc
		} else {
			if (plus) {
2002d7c0:	e873000c 	lwi	r3, r19, 12
2002d7c4:	bc030010 	beqi	r3, 16		// 2002d7d4
				tmp_if = 2047;
2002d7c8:	306007ff 	addik	r3, r0, 2047
2002d7cc:	f8730004 	swi	r3, r19, 4
2002d7d0:	b800000c 	bri	12		// 2002d7dc
			} else {
				tmp_if = x;
2002d7d4:	e8730018 	lwi	r3, r19, 24
2002d7d8:	f8730004 	swi	r3, r19, 4
			}
		}
		return tmp_if;
2002d7dc:	e8730004 	lwi	r3, r19, 4
	}
2002d7e0:	10330000 	addk	r1, r19, r0
2002d7e4:	ea610010 	lwi	r19, r1, 16
2002d7e8:	30210014 	addik	r1, r1, 20
2002d7ec:	b60f0008 	rtsd	r15, 8
2002d7f0:	80000000 	or	r0, r0, r0

2002d7f4 <dc_scaler>:
	static i8 dc_scaler() {
2002d7f4:	3021fff4 	addik	r1, r1, -12
2002d7f8:	fa610008 	swi	r19, r1, 8
2002d7fc:	12610000 	addk	r19, r1, r0
		i8 local_comp;
		i8 tmp_if;
		i8 local_s_QP;
	
		local_comp = comp;
2002d800:	b0002006 	imm	8198
2002d804:	e06020ea 	lbui	r3, r0, 8426	// 200620ea <comp>
2002d808:	f0730005 	sbi	r3, r19, 5
		if ((local_comp & 4) == 0) {
2002d80c:	e0730005 	lbui	r3, r19, 5
2002d810:	a4630004 	andi	r3, r3, 4
2002d814:	bc230138 	bnei	r3, 312		// 2002d94c
			local_s_QP = s_QP;
2002d818:	b0002006 	imm	8198
2002d81c:	e06020e8 	lbui	r3, r0, 8424	// 200620e8 <s_QP>
2002d820:	f0730006 	sbi	r3, r19, 6
			local_s_QP = s_QP;
2002d824:	b0002006 	imm	8198
2002d828:	e06020e8 	lbui	r3, r0, 8424	// 200620e8 <s_QP>
2002d82c:	f0730006 	sbi	r3, r19, 6
			if (local_s_QP > 0 && local_s_QP < 5) {
2002d830:	e0730006 	lbui	r3, r19, 6
2002d834:	90630060 	sext8	r3, r3
2002d838:	bc630024 	blei	r3, 36		// 2002d85c
2002d83c:	e0730006 	lbui	r3, r19, 6
2002d840:	90830060 	sext8	r4, r3
2002d844:	30600004 	addik	r3, r0, 4
2002d848:	16441801 	cmp	r18, r4, r3
2002d84c:	bc520010 	blti	r18, 16		// 2002d85c
				tmp_if = 8;
2002d850:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002d854:	f0730004 	sbi	r3, r19, 4
2002d858:	b80000f0 	bri	240		// 2002d948
			} else {
				local_s_QP = s_QP;
2002d85c:	b0002006 	imm	8198
2002d860:	e06020e8 	lbui	r3, r0, 8424	// 200620e8 <s_QP>
2002d864:	f0730006 	sbi	r3, r19, 6
				local_s_QP = s_QP;
2002d868:	b0002006 	imm	8198
2002d86c:	e06020e8 	lbui	r3, r0, 8424	// 200620e8 <s_QP>
2002d870:	f0730006 	sbi	r3, r19, 6
				if (local_s_QP > 4 && local_s_QP < 9) {
2002d874:	e0730006 	lbui	r3, r19, 6
2002d878:	90830060 	sext8	r4, r3
2002d87c:	30600004 	addik	r3, r0, 4
2002d880:	16441801 	cmp	r18, r4, r3
2002d884:	bcb20038 	bgei	r18, 56		// 2002d8bc
2002d888:	e0730006 	lbui	r3, r19, 6
2002d88c:	90830060 	sext8	r4, r3
2002d890:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002d894:	16441801 	cmp	r18, r4, r3
2002d898:	bc520024 	blti	r18, 36		// 2002d8bc
					local_s_QP = s_QP;
2002d89c:	b0002006 	imm	8198
2002d8a0:	e06020e8 	lbui	r3, r0, 8424	// 200620e8 <s_QP>
2002d8a4:	f0730006 	sbi	r3, r19, 6
					tmp_if = 2 * local_s_QP;
2002d8a8:	e0730006 	lbui	r3, r19, 6
2002d8ac:	10631800 	addk	r3, r3, r3
2002d8b0:	a46300ff 	andi	r3, r3, 255
2002d8b4:	f0730004 	sbi	r3, r19, 4
2002d8b8:	b8000090 	bri	144		// 2002d948
				} else {
					local_s_QP = s_QP;
2002d8bc:	b0002006 	imm	8198
2002d8c0:	e06020e8 	lbui	r3, r0, 8424	// 200620e8 <s_QP>
2002d8c4:	f0730006 	sbi	r3, r19, 6
					local_s_QP = s_QP;
2002d8c8:	b0002006 	imm	8198
2002d8cc:	e06020e8 	lbui	r3, r0, 8424	// 200620e8 <s_QP>
2002d8d0:	f0730006 	sbi	r3, r19, 6
					if (local_s_QP > 8 && local_s_QP < 25) {
2002d8d4:	e0730006 	lbui	r3, r19, 6
2002d8d8:	90830060 	sext8	r4, r3
2002d8dc:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002d8e0:	16441801 	cmp	r18, r4, r3
2002d8e4:	bcb20038 	bgei	r18, 56		// 2002d91c
2002d8e8:	e0730006 	lbui	r3, r19, 6
2002d8ec:	90830060 	sext8	r4, r3
2002d8f0:	30600018 	addik	r3, r0, 24
2002d8f4:	16441801 	cmp	r18, r4, r3
2002d8f8:	bc520024 	blti	r18, 36		// 2002d91c
						local_s_QP = s_QP;
2002d8fc:	b0002006 	imm	8198
2002d900:	e06020e8 	lbui	r3, r0, 8424	// 200620e8 <s_QP>
2002d904:	f0730006 	sbi	r3, r19, 6
						tmp_if = local_s_QP + 8;
2002d908:	e0730006 	lbui	r3, r19, 6
2002d90c:	30630008 	addik	r3, r3, 8
2002d910:	a46300ff 	andi	r3, r3, 255
2002d914:	f0730004 	sbi	r3, r19, 4
2002d918:	b8000030 	bri	48		// 2002d948
					} else {
						local_s_QP = s_QP;
2002d91c:	b0002006 	imm	8198
2002d920:	e06020e8 	lbui	r3, r0, 8424	// 200620e8 <s_QP>
2002d924:	f0730006 	sbi	r3, r19, 6
						tmp_if = 2 * local_s_QP - 16;
2002d928:	e0730006 	lbui	r3, r19, 6
2002d92c:	90630060 	sext8	r3, r3
2002d930:	3063fff8 	addik	r3, r3, -8
2002d934:	a46300ff 	andi	r3, r3, 255
2002d938:	10631800 	addk	r3, r3, r3
2002d93c:	a46300ff 	andi	r3, r3, 255
2002d940:	f0730004 	sbi	r3, r19, 4
2002d944:	b80000cc 	bri	204		// 2002da10
2002d948:	b80000c8 	bri	200		// 2002da10
					}
				}
			}
		} else {
			local_s_QP = s_QP;
2002d94c:	b0002006 	imm	8198
2002d950:	e06020e8 	lbui	r3, r0, 8424	// 200620e8 <s_QP>
2002d954:	f0730006 	sbi	r3, r19, 6
			local_s_QP = s_QP;
2002d958:	b0002006 	imm	8198
2002d95c:	e06020e8 	lbui	r3, r0, 8424	// 200620e8 <s_QP>
2002d960:	f0730006 	sbi	r3, r19, 6
			if (local_s_QP > 0 && local_s_QP < 5) {
2002d964:	e0730006 	lbui	r3, r19, 6
2002d968:	90630060 	sext8	r3, r3
2002d96c:	bc630024 	blei	r3, 36		// 2002d990
2002d970:	e0730006 	lbui	r3, r19, 6
2002d974:	90830060 	sext8	r4, r3
2002d978:	30600004 	addik	r3, r0, 4
2002d97c:	16441801 	cmp	r18, r4, r3
2002d980:	bc520010 	blti	r18, 16		// 2002d990
				tmp_if = 8;
2002d984:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002d988:	f0730004 	sbi	r3, r19, 4
2002d98c:	b8000084 	bri	132		// 2002da10
			} else {
				local_s_QP = s_QP;
2002d990:	b0002006 	imm	8198
2002d994:	e06020e8 	lbui	r3, r0, 8424	// 200620e8 <s_QP>
2002d998:	f0730006 	sbi	r3, r19, 6
				local_s_QP = s_QP;
2002d99c:	b0002006 	imm	8198
2002d9a0:	e06020e8 	lbui	r3, r0, 8424	// 200620e8 <s_QP>
2002d9a4:	f0730006 	sbi	r3, r19, 6
				if (local_s_QP > 4 && local_s_QP < 25) {
2002d9a8:	e0730006 	lbui	r3, r19, 6
2002d9ac:	90830060 	sext8	r4, r3
2002d9b0:	30600004 	addik	r3, r0, 4
2002d9b4:	16441801 	cmp	r18, r4, r3
2002d9b8:	bcb2003c 	bgei	r18, 60		// 2002d9f4
2002d9bc:	e0730006 	lbui	r3, r19, 6
2002d9c0:	90830060 	sext8	r4, r3
2002d9c4:	30600018 	addik	r3, r0, 24
2002d9c8:	16441801 	cmp	r18, r4, r3
2002d9cc:	bc520028 	blti	r18, 40		// 2002d9f4
					local_s_QP = s_QP;
2002d9d0:	b0002006 	imm	8198
2002d9d4:	e06020e8 	lbui	r3, r0, 8424	// 200620e8 <s_QP>
2002d9d8:	f0730006 	sbi	r3, r19, 6
					tmp_if = (local_s_QP + 13) >> 1;
2002d9dc:	e0730006 	lbui	r3, r19, 6
2002d9e0:	90630060 	sext8	r3, r3
2002d9e4:	3063000d 	addik	r3, r3, 13
2002d9e8:	90630001 	sra	r3, r3
2002d9ec:	f0730004 	sbi	r3, r19, 4
2002d9f0:	b8000020 	bri	32		// 2002da10
				} else {
					local_s_QP = s_QP;
2002d9f4:	b0002006 	imm	8198
2002d9f8:	e06020e8 	lbui	r3, r0, 8424	// 200620e8 <s_QP>
2002d9fc:	f0730006 	sbi	r3, r19, 6
					tmp_if = local_s_QP - 6;
2002da00:	e0730006 	lbui	r3, r19, 6
2002da04:	3063fffa 	addik	r3, r3, -6
2002da08:	a46300ff 	andi	r3, r3, 255
2002da0c:	f0730004 	sbi	r3, r19, 4
				}
			}
		}
		return tmp_if;
2002da10:	e0730004 	lbui	r3, r19, 4
2002da14:	90630060 	sext8	r3, r3
	}
2002da18:	10330000 	addk	r1, r19, r0
2002da1c:	ea610008 	lwi	r19, r1, 8
2002da20:	3021000c 	addik	r1, r1, 12
2002da24:	b60f0008 	rtsd	r15, 8
2002da28:	80000000 	or	r0, r0, r0

2002da2c <isSchedulable_start>:

	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_start() {
2002da2c:	3021ffec 	addik	r1, r1, -20
2002da30:	fa610010 	swi	r19, r1, 16
2002da34:	12610000 	addk	r19, r1, r0
		i32 result;
		i16 cmd;
		i32 local_NEWVOP;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2002da38:	b0002004 	imm	8196
2002da3c:	e8607b0c 	lwi	r3, r0, 31500	// 20047b0c <decoder_texture_DCReconstruction_invpred_BTYPE>
2002da40:	e8830004 	lwi	r4, r3, 4
2002da44:	b0002006 	imm	8198
2002da48:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002da4c:	a46301ff 	andi	r3, r3, 511
2002da50:	10631800 	addk	r3, r3, r3
2002da54:	10641800 	addk	r3, r4, r3
2002da58:	e4630000 	lhui	r3, r3, 0
2002da5c:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
2002da60:	30600800 	addik	r3, r0, 2048
2002da64:	f8730008 	swi	r3, r19, 8
		result = (cmd & local_NEWVOP) != 0;
2002da68:	e4730004 	lhui	r3, r19, 4
2002da6c:	90830061 	sext16	r4, r3
2002da70:	e8730008 	lwi	r3, r19, 8
2002da74:	84841800 	and	r4, r4, r3
2002da78:	10600000 	addk	r3, r0, r0
2002da7c:	8c641c00 	pcmpne	r3, r4, r3
2002da80:	a46300ff 	andi	r3, r3, 255
2002da84:	f873000c 	swi	r3, r19, 12
		return result;
2002da88:	e873000c 	lwi	r3, r19, 12
	}
2002da8c:	10330000 	addk	r1, r19, r0
2002da90:	ea610010 	lwi	r19, r1, 16
2002da94:	30210014 	addik	r1, r1, 20
2002da98:	b60f0008 	rtsd	r15, 8
2002da9c:	80000000 	or	r0, r0, r0

2002daa0 <start>:
	
	static void start() {
2002daa0:	3021ffd4 	addik	r1, r1, -44
2002daa4:	f9e10000 	swi	r15, r1, 0
2002daa8:	fa610028 	swi	r19, r1, 40
2002daac:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2002dab0:	b0002006 	imm	8198
2002dab4:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002dab8:	a46301ff 	andi	r3, r3, 511
2002dabc:	f873001c 	swi	r3, r19, 28
		i32 index_aligned_AC_PRED_DIR = index_AC_PRED_DIR % SIZE_AC_PRED_DIR;
2002dac0:	b0002006 	imm	8198
2002dac4:	e86020c8 	lwi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
2002dac8:	a46301ff 	andi	r3, r3, 511
2002dacc:	f8730020 	swi	r3, r19, 32
	
		i16 cmd;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2002dad0:	b0002004 	imm	8196
2002dad4:	e8607b0c 	lwi	r3, r0, 31500	// 20047b0c <decoder_texture_DCReconstruction_invpred_BTYPE>
2002dad8:	e8830004 	lwi	r4, r3, 4
2002dadc:	b0002006 	imm	8198
2002dae0:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002dae4:	a46301ff 	andi	r3, r3, 511
2002dae8:	10631800 	addk	r3, r3, r3
2002daec:	10641800 	addk	r3, r4, r3
2002daf0:	e4630000 	lhui	r3, r3, 0
2002daf4:	f4730024 	shi	r3, r19, 36
		comp = 0;
2002daf8:	b0002006 	imm	8198
2002dafc:	f00020ea 	sbi	r0, r0, 8426	// 200620ea <comp>
		ptr = 8;
2002db00:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002db04:	b0002004 	imm	8196
2002db08:	f8607bd4 	swi	r3, r0, 31700	// 20047bd4 <ptr>
		tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR] = -2;
2002db0c:	b0002004 	imm	8196
2002db10:	e8607ba0 	lwi	r3, r0, 31648	// 20047ba0 <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>
2002db14:	e8830004 	lwi	r4, r3, 4
2002db18:	b0002006 	imm	8198
2002db1c:	e86020c8 	lwi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
2002db20:	a46301ff 	andi	r3, r3, 511
2002db24:	10641800 	addk	r3, r4, r3
2002db28:	3080fffe 	addik	r4, r0, -2
2002db2c:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
2002db30:	b0002006 	imm	8198
2002db34:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002db38:	30630001 	addik	r3, r3, 1
2002db3c:	b0002006 	imm	8198
2002db40:	f8602088 	swi	r3, r0, 8328	// 20062088 <index_BTYPE>
		index_AC_PRED_DIR += 1;
2002db44:	b0002006 	imm	8198
2002db48:	e86020c8 	lwi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
2002db4c:	30630001 	addik	r3, r3, 1
2002db50:	b0002006 	imm	8198
2002db54:	f86020c8 	swi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
		
		read_end_BTYPE();
2002db58:	b9f4f448 	brlid	r15, -3000	// 2002cfa0 <read_end_BTYPE>
2002db5c:	80000000 	or	r0, r0, r0
		write_end_AC_PRED_DIR();
2002db60:	b9f4f984 	brlid	r15, -1660	// 2002d4e4 <write_end_AC_PRED_DIR>
2002db64:	80000000 	or	r0, r0, r0
	}
2002db68:	e9e10000 	lwi	r15, r1, 0
2002db6c:	10330000 	addk	r1, r19, r0
2002db70:	ea610028 	lwi	r19, r1, 40
2002db74:	3021002c 	addik	r1, r1, 44
2002db78:	b60f0008 	rtsd	r15, 8
2002db7c:	80000000 	or	r0, r0, r0

2002db80 <isSchedulable_skip>:
	static i32 isSchedulable_skip() {
2002db80:	3021fff4 	addik	r1, r1, -12
2002db84:	fa610008 	swi	r19, r1, 8
2002db88:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2002db8c:	30600001 	addik	r3, r0, 1
2002db90:	f8730004 	swi	r3, r19, 4
		return result;
2002db94:	e8730004 	lwi	r3, r19, 4
	}
2002db98:	10330000 	addk	r1, r19, r0
2002db9c:	ea610008 	lwi	r19, r1, 8
2002dba0:	3021000c 	addik	r1, r1, 12
2002dba4:	b60f0008 	rtsd	r15, 8
2002dba8:	80000000 	or	r0, r0, r0

2002dbac <skip>:
	
	static void skip() {
2002dbac:	3021ffd8 	addik	r1, r1, -40
2002dbb0:	f9e10000 	swi	r15, r1, 0
2002dbb4:	fa610024 	swi	r19, r1, 36
2002dbb8:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2002dbbc:	b0002006 	imm	8198
2002dbc0:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002dbc4:	a46301ff 	andi	r3, r3, 511
2002dbc8:	f873001c 	swi	r3, r19, 28
	
		i16 x;
	
		x = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2002dbcc:	b0002004 	imm	8196
2002dbd0:	e8607b0c 	lwi	r3, r0, 31500	// 20047b0c <decoder_texture_DCReconstruction_invpred_BTYPE>
2002dbd4:	e8830004 	lwi	r4, r3, 4
2002dbd8:	b0002006 	imm	8198
2002dbdc:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002dbe0:	a46301ff 	andi	r3, r3, 511
2002dbe4:	10631800 	addk	r3, r3, r3
2002dbe8:	10641800 	addk	r3, r4, r3
2002dbec:	e4630000 	lhui	r3, r3, 0
2002dbf0:	f4730020 	shi	r3, r19, 32
	
		// Update ports indexes
		index_BTYPE += 1;
2002dbf4:	b0002006 	imm	8198
2002dbf8:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002dbfc:	30630001 	addik	r3, r3, 1
2002dc00:	b0002006 	imm	8198
2002dc04:	f8602088 	swi	r3, r0, 8328	// 20062088 <index_BTYPE>
		
		read_end_BTYPE();
2002dc08:	b9f4f398 	brlid	r15, -3176	// 2002cfa0 <read_end_BTYPE>
2002dc0c:	80000000 	or	r0, r0, r0
	}
2002dc10:	e9e10000 	lwi	r15, r1, 0
2002dc14:	10330000 	addk	r1, r19, r0
2002dc18:	ea610024 	lwi	r19, r1, 36
2002dc1c:	30210028 	addik	r1, r1, 40
2002dc20:	b60f0008 	rtsd	r15, 8
2002dc24:	80000000 	or	r0, r0, r0

2002dc28 <isSchedulable_read_inter_ac>:
	static i32 isSchedulable_read_inter_ac() {
2002dc28:	3021ffe8 	addik	r1, r1, -24
2002dc2c:	fa610014 	swi	r19, r1, 20
2002dc30:	12610000 	addk	r19, r1, r0
		i32 result;
		i16 cmd;
		i32 local_INTER;
		i32 local_ACCODED;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2002dc34:	b0002004 	imm	8196
2002dc38:	e8607b0c 	lwi	r3, r0, 31500	// 20047b0c <decoder_texture_DCReconstruction_invpred_BTYPE>
2002dc3c:	e8830004 	lwi	r4, r3, 4
2002dc40:	b0002006 	imm	8198
2002dc44:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002dc48:	a46301ff 	andi	r3, r3, 511
2002dc4c:	10631800 	addk	r3, r3, r3
2002dc50:	10641800 	addk	r3, r4, r3
2002dc54:	e4630000 	lhui	r3, r3, 0
2002dc58:	f4730004 	shi	r3, r19, 4
		local_INTER = ConstantsBtype_INTER;
2002dc5c:	30600200 	addik	r3, r0, 512
2002dc60:	f8730008 	swi	r3, r19, 8
		local_ACCODED = Constants_ACCODED;
2002dc64:	30600002 	addik	r3, r0, 2
2002dc68:	f873000c 	swi	r3, r19, 12
		result = (cmd & local_INTER) != 0 && (cmd & local_ACCODED) != 0;
2002dc6c:	e4730004 	lhui	r3, r19, 4
2002dc70:	90830061 	sext16	r4, r3
2002dc74:	e8730008 	lwi	r3, r19, 8
2002dc78:	84641800 	and	r3, r4, r3
2002dc7c:	bc030020 	beqi	r3, 32		// 2002dc9c
2002dc80:	e4730004 	lhui	r3, r19, 4
2002dc84:	90830061 	sext16	r4, r3
2002dc88:	e873000c 	lwi	r3, r19, 12
2002dc8c:	84641800 	and	r3, r4, r3
2002dc90:	bc03000c 	beqi	r3, 12		// 2002dc9c
2002dc94:	30600001 	addik	r3, r0, 1
2002dc98:	b8000008 	bri	8		// 2002dca0
2002dc9c:	10600000 	addk	r3, r0, r0
2002dca0:	f8730010 	swi	r3, r19, 16
		return result;
2002dca4:	e8730010 	lwi	r3, r19, 16
	}
2002dca8:	10330000 	addk	r1, r19, r0
2002dcac:	ea610014 	lwi	r19, r1, 20
2002dcb0:	30210018 	addik	r1, r1, 24
2002dcb4:	b60f0008 	rtsd	r15, 8
2002dcb8:	80000000 	or	r0, r0, r0

2002dcbc <read_inter_ac>:
	
	static void read_inter_ac() {
2002dcbc:	3021ffc0 	addik	r1, r1, -64
2002dcc0:	f9e10000 	swi	r15, r1, 0
2002dcc4:	fa61003c 	swi	r19, r1, 60
2002dcc8:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2002dccc:	b0002006 	imm	8198
2002dcd0:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002dcd4:	a46301ff 	andi	r3, r3, 511
2002dcd8:	f873001c 	swi	r3, r19, 28
		i32 index_aligned_QP = index_QP % SIZE_QP;
2002dcdc:	b0002006 	imm	8198
2002dce0:	e86020b0 	lwi	r3, r0, 8368	// 200620b0 <index_QP>
2002dce4:	a46301ff 	andi	r3, r3, 511
2002dce8:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_AC_PRED_DIR = index_AC_PRED_DIR % SIZE_AC_PRED_DIR;
2002dcec:	b0002006 	imm	8198
2002dcf0:	e86020c8 	lwi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
2002dcf4:	a46301ff 	andi	r3, r3, 511
2002dcf8:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_MODE = index_MODE % SIZE_MODE;
2002dcfc:	b0002006 	imm	8198
2002dd00:	e86020d0 	lwi	r3, r0, 8400	// 200620d0 <index_MODE>
2002dd04:	a46301ff 	andi	r3, r3, 511
2002dd08:	f8730028 	swi	r3, r19, 40
		i32 index_aligned_PTR = index_PTR % SIZE_PTR;
2002dd0c:	b0002006 	imm	8198
2002dd10:	e86020c0 	lwi	r3, r0, 8384	// 200620c0 <index_PTR>
2002dd14:	a46301ff 	andi	r3, r3, 511
2002dd18:	f873002c 	swi	r3, r19, 44
		i32 index_aligned_SIGNED = index_SIGNED % SIZE_SIGNED;
2002dd1c:	b0002006 	imm	8198
2002dd20:	e86020d8 	lwi	r3, r0, 8408	// 200620d8 <index_SIGNED>
2002dd24:	a46301ff 	andi	r3, r3, 511
2002dd28:	f8730030 	swi	r3, r19, 48
		i32 index_aligned_QUANT = index_QUANT % SIZE_QUANT;
2002dd2c:	b0002006 	imm	8198
2002dd30:	e86020e0 	lwi	r3, r0, 8416	// 200620e0 <index_QUANT>
2002dd34:	a46301ff 	andi	r3, r3, 511
2002dd38:	f8730034 	swi	r3, r19, 52
	
		i16 cmd;
		i8 qp;
		i8 local_s_QP;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2002dd3c:	b0002004 	imm	8196
2002dd40:	e8607b0c 	lwi	r3, r0, 31500	// 20047b0c <decoder_texture_DCReconstruction_invpred_BTYPE>
2002dd44:	e8830004 	lwi	r4, r3, 4
2002dd48:	b0002006 	imm	8198
2002dd4c:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002dd50:	a46301ff 	andi	r3, r3, 511
2002dd54:	10631800 	addk	r3, r3, r3
2002dd58:	10641800 	addk	r3, r4, r3
2002dd5c:	e4630000 	lhui	r3, r3, 0
2002dd60:	f4730038 	shi	r3, r19, 56
		qp = tokens_QP[(index_QP + (0)) % SIZE_QP];
2002dd64:	b0002004 	imm	8196
2002dd68:	e8607ad0 	lwi	r3, r0, 31440	// 20047ad0 <decoder_texture_DCReconstruction_invpred_QP>
2002dd6c:	e8830004 	lwi	r4, r3, 4
2002dd70:	b0002006 	imm	8198
2002dd74:	e86020b0 	lwi	r3, r0, 8368	// 200620b0 <index_QP>
2002dd78:	a46301ff 	andi	r3, r3, 511
2002dd7c:	10641800 	addk	r3, r4, r3
2002dd80:	e0630000 	lbui	r3, r3, 0
2002dd84:	f073003a 	sbi	r3, r19, 58
		is_signed = 1;
2002dd88:	30600001 	addik	r3, r0, 1
2002dd8c:	b0002006 	imm	8198
2002dd90:	f86020f4 	swi	r3, r0, 8436	// 200620f4 <is_signed>
		s_QP = qp;
2002dd94:	e073003a 	lbui	r3, r19, 58
2002dd98:	b0002006 	imm	8198
2002dd9c:	f06020e8 	sbi	r3, r0, 8424	// 200620e8 <s_QP>
		local_s_QP = s_QP;
2002dda0:	b0002006 	imm	8198
2002dda4:	e06020e8 	lbui	r3, r0, 8424	// 200620e8 <s_QP>
2002dda8:	f073003b 	sbi	r3, r19, 59
		round = local_s_QP & 1 ^ 1;
2002ddac:	e073003b 	lbui	r3, r19, 59
2002ddb0:	a4830001 	andi	r4, r3, 1
2002ddb4:	10600000 	addk	r3, r0, r0
2002ddb8:	88641c00 	pcmpeq	r3, r4, r3
2002ddbc:	a46300ff 	andi	r3, r3, 255
2002ddc0:	90630060 	sext8	r3, r3
2002ddc4:	b0002006 	imm	8198
2002ddc8:	f06020e9 	sbi	r3, r0, 8425	// 200620e9 <round>
		tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR] = 0;
2002ddcc:	b0002004 	imm	8196
2002ddd0:	e8607ba0 	lwi	r3, r0, 31648	// 20047ba0 <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>
2002ddd4:	e8830004 	lwi	r4, r3, 4
2002ddd8:	b0002006 	imm	8198
2002dddc:	e86020c8 	lwi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
2002dde0:	a46301ff 	andi	r3, r3, 511
2002dde4:	10641800 	addk	r3, r4, r3
2002dde8:	f0030000 	sbi	r0, r3, 0
		tokens_MODE[(index_MODE + (0)) % SIZE_MODE] = 0;
2002ddec:	b0002004 	imm	8196
2002ddf0:	e8607b90 	lwi	r3, r0, 31632	// 20047b90 <decoder_texture_DCReconstruction_invpred_MODE>
2002ddf4:	e8830004 	lwi	r4, r3, 4
2002ddf8:	b0002006 	imm	8198
2002ddfc:	e86020d0 	lwi	r3, r0, 8400	// 200620d0 <index_MODE>
2002de00:	a46301ff 	andi	r3, r3, 511
2002de04:	10641800 	addk	r3, r4, r3
2002de08:	f0030000 	sbi	r0, r3, 0
		tokens_PTR[(index_PTR + (0)) % SIZE_PTR] = 0;
2002de0c:	b0002004 	imm	8196
2002de10:	e8607b80 	lwi	r3, r0, 31616	// 20047b80 <decoder_texture_DCReconstruction_invpred_PTR>
2002de14:	e8830004 	lwi	r4, r3, 4
2002de18:	b0002006 	imm	8198
2002de1c:	e86020c0 	lwi	r3, r0, 8384	// 200620c0 <index_PTR>
2002de20:	a46301ff 	andi	r3, r3, 511
2002de24:	10631800 	addk	r3, r3, r3
2002de28:	10641800 	addk	r3, r4, r3
2002de2c:	f4030000 	shi	r0, r3, 0
		tokens_SIGNED[(index_SIGNED + (0)) % SIZE_SIGNED] = 1;
2002de30:	b0002004 	imm	8196
2002de34:	e8607b98 	lwi	r3, r0, 31640	// 20047b98 <decoder_texture_DCReconstruction_invpred_SIGNED>
2002de38:	e8830004 	lwi	r4, r3, 4
2002de3c:	b0002006 	imm	8198
2002de40:	e86020d8 	lwi	r3, r0, 8408	// 200620d8 <index_SIGNED>
2002de44:	a46301ff 	andi	r3, r3, 511
2002de48:	64630402 	bslli	r3, r3, 2
2002de4c:	10641800 	addk	r3, r4, r3
2002de50:	30800001 	addik	r4, r0, 1
2002de54:	f8830000 	swi	r4, r3, 0
		local_s_QP = s_QP;
2002de58:	b0002006 	imm	8198
2002de5c:	e06020e8 	lbui	r3, r0, 8424	// 200620e8 <s_QP>
2002de60:	f073003b 	sbi	r3, r19, 59
		tokens_QUANT[(index_QUANT + (0)) % SIZE_QUANT] = local_s_QP;
2002de64:	b0002004 	imm	8196
2002de68:	e8607ba8 	lwi	r3, r0, 31656	// 20047ba8 <decoder_texture_DCReconstruction_invpred_QUANT>
2002de6c:	e8830004 	lwi	r4, r3, 4
2002de70:	b0002006 	imm	8198
2002de74:	e86020e0 	lwi	r3, r0, 8416	// 200620e0 <index_QUANT>
2002de78:	a46301ff 	andi	r3, r3, 511
2002de7c:	10641800 	addk	r3, r4, r3
2002de80:	e093003b 	lbui	r4, r19, 59
2002de84:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
2002de88:	b0002006 	imm	8198
2002de8c:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002de90:	30630001 	addik	r3, r3, 1
2002de94:	b0002006 	imm	8198
2002de98:	f8602088 	swi	r3, r0, 8328	// 20062088 <index_BTYPE>
		index_QP += 1;
2002de9c:	b0002006 	imm	8198
2002dea0:	e86020b0 	lwi	r3, r0, 8368	// 200620b0 <index_QP>
2002dea4:	30630001 	addik	r3, r3, 1
2002dea8:	b0002006 	imm	8198
2002deac:	f86020b0 	swi	r3, r0, 8368	// 200620b0 <index_QP>
		index_AC_PRED_DIR += 1;
2002deb0:	b0002006 	imm	8198
2002deb4:	e86020c8 	lwi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
2002deb8:	30630001 	addik	r3, r3, 1
2002debc:	b0002006 	imm	8198
2002dec0:	f86020c8 	swi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
		index_MODE += 1;
2002dec4:	b0002006 	imm	8198
2002dec8:	e86020d0 	lwi	r3, r0, 8400	// 200620d0 <index_MODE>
2002decc:	30630001 	addik	r3, r3, 1
2002ded0:	b0002006 	imm	8198
2002ded4:	f86020d0 	swi	r3, r0, 8400	// 200620d0 <index_MODE>
		index_PTR += 1;
2002ded8:	b0002006 	imm	8198
2002dedc:	e86020c0 	lwi	r3, r0, 8384	// 200620c0 <index_PTR>
2002dee0:	30630001 	addik	r3, r3, 1
2002dee4:	b0002006 	imm	8198
2002dee8:	f86020c0 	swi	r3, r0, 8384	// 200620c0 <index_PTR>
		index_SIGNED += 1;
2002deec:	b0002006 	imm	8198
2002def0:	e86020d8 	lwi	r3, r0, 8408	// 200620d8 <index_SIGNED>
2002def4:	30630001 	addik	r3, r3, 1
2002def8:	b0002006 	imm	8198
2002defc:	f86020d8 	swi	r3, r0, 8408	// 200620d8 <index_SIGNED>
		index_QUANT += 1;
2002df00:	b0002006 	imm	8198
2002df04:	e86020e0 	lwi	r3, r0, 8416	// 200620e0 <index_QUANT>
2002df08:	30630001 	addik	r3, r3, 1
2002df0c:	b0002006 	imm	8198
2002df10:	f86020e0 	swi	r3, r0, 8416	// 200620e0 <index_QUANT>
		
		read_end_BTYPE();
2002df14:	b9f4f08c 	brlid	r15, -3956	// 2002cfa0 <read_end_BTYPE>
2002df18:	80000000 	or	r0, r0, r0
		read_end_QP();
2002df1c:	b9f4f3d0 	brlid	r15, -3120	// 2002d2ec <read_end_QP>
2002df20:	80000000 	or	r0, r0, r0
		write_end_AC_PRED_DIR();
2002df24:	b9f4f5c0 	brlid	r15, -2624	// 2002d4e4 <write_end_AC_PRED_DIR>
2002df28:	80000000 	or	r0, r0, r0
		write_end_MODE();
2002df2c:	b9f4f660 	brlid	r15, -2464	// 2002d58c <write_end_MODE>
2002df30:	80000000 	or	r0, r0, r0
		write_end_PTR();
2002df34:	b9f4f508 	brlid	r15, -2808	// 2002d43c <write_end_PTR>
2002df38:	80000000 	or	r0, r0, r0
		write_end_SIGNED();
2002df3c:	b9f4f6f8 	brlid	r15, -2312	// 2002d634 <write_end_SIGNED>
2002df40:	80000000 	or	r0, r0, r0
		write_end_QUANT();
2002df44:	b9f4f798 	brlid	r15, -2152	// 2002d6dc <write_end_QUANT>
2002df48:	80000000 	or	r0, r0, r0
	}
2002df4c:	e9e10000 	lwi	r15, r1, 0
2002df50:	10330000 	addk	r1, r19, r0
2002df54:	ea61003c 	lwi	r19, r1, 60
2002df58:	30210040 	addik	r1, r1, 64
2002df5c:	b60f0008 	rtsd	r15, 8
2002df60:	80000000 	or	r0, r0, r0

2002df64 <isSchedulable_read_other>:
	static i32 isSchedulable_read_other() {
2002df64:	3021ffe8 	addik	r1, r1, -24
2002df68:	fa610014 	swi	r19, r1, 20
2002df6c:	12610000 	addk	r19, r1, r0
		i32 result;
		i16 cmd;
		i32 local_INTRA;
		i32 local_ACCODED;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2002df70:	b0002004 	imm	8196
2002df74:	e8607b0c 	lwi	r3, r0, 31500	// 20047b0c <decoder_texture_DCReconstruction_invpred_BTYPE>
2002df78:	e8830004 	lwi	r4, r3, 4
2002df7c:	b0002006 	imm	8198
2002df80:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002df84:	a46301ff 	andi	r3, r3, 511
2002df88:	10631800 	addk	r3, r3, r3
2002df8c:	10641800 	addk	r3, r4, r3
2002df90:	e4630000 	lhui	r3, r3, 0
2002df94:	f4730004 	shi	r3, r19, 4
		local_INTRA = ConstantsBtype_INTRA;
2002df98:	30600400 	addik	r3, r0, 1024	// 400 <_HEAP_SIZE>
2002df9c:	f8730008 	swi	r3, r19, 8
		local_ACCODED = Constants_ACCODED;
2002dfa0:	30600002 	addik	r3, r0, 2
2002dfa4:	f873000c 	swi	r3, r19, 12
		result = (cmd & local_INTRA) == 0 && (cmd & local_ACCODED) == 0;
2002dfa8:	e4730004 	lhui	r3, r19, 4
2002dfac:	90830061 	sext16	r4, r3
2002dfb0:	e8730008 	lwi	r3, r19, 8
2002dfb4:	84641800 	and	r3, r4, r3
2002dfb8:	bc230020 	bnei	r3, 32		// 2002dfd8
2002dfbc:	e4730004 	lhui	r3, r19, 4
2002dfc0:	90830061 	sext16	r4, r3
2002dfc4:	e873000c 	lwi	r3, r19, 12
2002dfc8:	84641800 	and	r3, r4, r3
2002dfcc:	bc23000c 	bnei	r3, 12		// 2002dfd8
2002dfd0:	30600001 	addik	r3, r0, 1
2002dfd4:	b8000008 	bri	8		// 2002dfdc
2002dfd8:	10600000 	addk	r3, r0, r0
2002dfdc:	f8730010 	swi	r3, r19, 16
		return result;
2002dfe0:	e8730010 	lwi	r3, r19, 16
	}
2002dfe4:	10330000 	addk	r1, r19, r0
2002dfe8:	ea610014 	lwi	r19, r1, 20
2002dfec:	30210018 	addik	r1, r1, 24
2002dff0:	b60f0008 	rtsd	r15, 8
2002dff4:	80000000 	or	r0, r0, r0

2002dff8 <read_other>:
	
	static void read_other() {
2002dff8:	3021ffd0 	addik	r1, r1, -48
2002dffc:	f9e10000 	swi	r15, r1, 0
2002e000:	fa61002c 	swi	r19, r1, 44
2002e004:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2002e008:	b0002006 	imm	8198
2002e00c:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002e010:	a46301ff 	andi	r3, r3, 511
2002e014:	f873001c 	swi	r3, r19, 28
		i32 index_aligned_QP = index_QP % SIZE_QP;
2002e018:	b0002006 	imm	8198
2002e01c:	e86020b0 	lwi	r3, r0, 8368	// 200620b0 <index_QP>
2002e020:	a46301ff 	andi	r3, r3, 511
2002e024:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_AC_PRED_DIR = index_AC_PRED_DIR % SIZE_AC_PRED_DIR;
2002e028:	b0002006 	imm	8198
2002e02c:	e86020c8 	lwi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
2002e030:	a46301ff 	andi	r3, r3, 511
2002e034:	f8730024 	swi	r3, r19, 36
	
		i16 cmd;
		i8 qp;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2002e038:	b0002004 	imm	8196
2002e03c:	e8607b0c 	lwi	r3, r0, 31500	// 20047b0c <decoder_texture_DCReconstruction_invpred_BTYPE>
2002e040:	e8830004 	lwi	r4, r3, 4
2002e044:	b0002006 	imm	8198
2002e048:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002e04c:	a46301ff 	andi	r3, r3, 511
2002e050:	10631800 	addk	r3, r3, r3
2002e054:	10641800 	addk	r3, r4, r3
2002e058:	e4630000 	lhui	r3, r3, 0
2002e05c:	f4730028 	shi	r3, r19, 40
		qp = tokens_QP[(index_QP + (0)) % SIZE_QP];
2002e060:	b0002004 	imm	8196
2002e064:	e8607ad0 	lwi	r3, r0, 31440	// 20047ad0 <decoder_texture_DCReconstruction_invpred_QP>
2002e068:	e8830004 	lwi	r4, r3, 4
2002e06c:	b0002006 	imm	8198
2002e070:	e86020b0 	lwi	r3, r0, 8368	// 200620b0 <index_QP>
2002e074:	a46301ff 	andi	r3, r3, 511
2002e078:	10641800 	addk	r3, r4, r3
2002e07c:	e0630000 	lbui	r3, r3, 0
2002e080:	f073002a 	sbi	r3, r19, 42
		s_QP = qp;
2002e084:	e073002a 	lbui	r3, r19, 42
2002e088:	b0002006 	imm	8198
2002e08c:	f06020e8 	sbi	r3, r0, 8424	// 200620e8 <s_QP>
		tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR] = -1;
2002e090:	b0002004 	imm	8196
2002e094:	e8607ba0 	lwi	r3, r0, 31648	// 20047ba0 <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>
2002e098:	e8830004 	lwi	r4, r3, 4
2002e09c:	b0002006 	imm	8198
2002e0a0:	e86020c8 	lwi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
2002e0a4:	a46301ff 	andi	r3, r3, 511
2002e0a8:	10641800 	addk	r3, r4, r3
2002e0ac:	3080ffff 	addik	r4, r0, -1
2002e0b0:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
2002e0b4:	b0002006 	imm	8198
2002e0b8:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002e0bc:	30630001 	addik	r3, r3, 1
2002e0c0:	b0002006 	imm	8198
2002e0c4:	f8602088 	swi	r3, r0, 8328	// 20062088 <index_BTYPE>
		index_QP += 1;
2002e0c8:	b0002006 	imm	8198
2002e0cc:	e86020b0 	lwi	r3, r0, 8368	// 200620b0 <index_QP>
2002e0d0:	30630001 	addik	r3, r3, 1
2002e0d4:	b0002006 	imm	8198
2002e0d8:	f86020b0 	swi	r3, r0, 8368	// 200620b0 <index_QP>
		index_AC_PRED_DIR += 1;
2002e0dc:	b0002006 	imm	8198
2002e0e0:	e86020c8 	lwi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
2002e0e4:	30630001 	addik	r3, r3, 1
2002e0e8:	b0002006 	imm	8198
2002e0ec:	f86020c8 	swi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
		
		read_end_BTYPE();
2002e0f0:	b9f4eeb0 	brlid	r15, -4432	// 2002cfa0 <read_end_BTYPE>
2002e0f4:	80000000 	or	r0, r0, r0
		read_end_QP();
2002e0f8:	b9f4f1f4 	brlid	r15, -3596	// 2002d2ec <read_end_QP>
2002e0fc:	80000000 	or	r0, r0, r0
		write_end_AC_PRED_DIR();
2002e100:	b9f4f3e4 	brlid	r15, -3100	// 2002d4e4 <write_end_AC_PRED_DIR>
2002e104:	80000000 	or	r0, r0, r0
	}
2002e108:	e9e10000 	lwi	r15, r1, 0
2002e10c:	10330000 	addk	r1, r19, r0
2002e110:	ea61002c 	lwi	r19, r1, 44
2002e114:	30210030 	addik	r1, r1, 48
2002e118:	b60f0008 	rtsd	r15, 8
2002e11c:	80000000 	or	r0, r0, r0

2002e120 <isSchedulable_read_intra>:
	static i32 isSchedulable_read_intra() {
2002e120:	3021fff4 	addik	r1, r1, -12
2002e124:	fa610008 	swi	r19, r1, 8
2002e128:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2002e12c:	30600001 	addik	r3, r0, 1
2002e130:	f8730004 	swi	r3, r19, 4
		return result;
2002e134:	e8730004 	lwi	r3, r19, 4
	}
2002e138:	10330000 	addk	r1, r19, r0
2002e13c:	ea610008 	lwi	r19, r1, 8
2002e140:	3021000c 	addik	r1, r1, 12
2002e144:	b60f0008 	rtsd	r15, 8
2002e148:	80000000 	or	r0, r0, r0

2002e14c <read_intra>:
	
	static void read_intra() {
2002e14c:	3021ff88 	addik	r1, r1, -120
2002e150:	f9e10000 	swi	r15, r1, 0
2002e154:	fa610074 	swi	r19, r1, 116
2002e158:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2002e15c:	b0002006 	imm	8198
2002e160:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002e164:	a46301ff 	andi	r3, r3, 511
2002e168:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_QP = index_QP % SIZE_QP;
2002e16c:	b0002006 	imm	8198
2002e170:	e86020b0 	lwi	r3, r0, 8368	// 200620b0 <index_QP>
2002e174:	a46301ff 	andi	r3, r3, 511
2002e178:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_A = index_A % SIZE_A;
2002e17c:	b0002006 	imm	8198
2002e180:	e8602090 	lwi	r3, r0, 8336	// 20062090 <index_A>
2002e184:	a46301ff 	andi	r3, r3, 511
2002e188:	f8730028 	swi	r3, r19, 40
		i32 index_aligned_B = index_B % SIZE_B;
2002e18c:	b0002006 	imm	8198
2002e190:	e8602098 	lwi	r3, r0, 8344	// 20062098 <index_B>
2002e194:	a46301ff 	andi	r3, r3, 511
2002e198:	f873002c 	swi	r3, r19, 44
		i32 index_aligned_C = index_C % SIZE_C;
2002e19c:	b0002006 	imm	8198
2002e1a0:	e86020a0 	lwi	r3, r0, 8352	// 200620a0 <index_C>
2002e1a4:	a46301ff 	andi	r3, r3, 511
2002e1a8:	f8730030 	swi	r3, r19, 48
		i32 index_aligned_PTR = index_PTR % SIZE_PTR;
2002e1ac:	b0002006 	imm	8198
2002e1b0:	e86020c0 	lwi	r3, r0, 8384	// 200620c0 <index_PTR>
2002e1b4:	a46301ff 	andi	r3, r3, 511
2002e1b8:	f8730034 	swi	r3, r19, 52
		i32 index_aligned_AC_PRED_DIR = index_AC_PRED_DIR % SIZE_AC_PRED_DIR;
2002e1bc:	b0002006 	imm	8198
2002e1c0:	e86020c8 	lwi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
2002e1c4:	a46301ff 	andi	r3, r3, 511
2002e1c8:	f8730038 	swi	r3, r19, 56
		i32 index_aligned_MODE = index_MODE % SIZE_MODE;
2002e1cc:	b0002006 	imm	8198
2002e1d0:	e86020d0 	lwi	r3, r0, 8400	// 200620d0 <index_MODE>
2002e1d4:	a46301ff 	andi	r3, r3, 511
2002e1d8:	f873003c 	swi	r3, r19, 60
		i32 index_aligned_SIGNED = index_SIGNED % SIZE_SIGNED;
2002e1dc:	b0002006 	imm	8198
2002e1e0:	e86020d8 	lwi	r3, r0, 8408	// 200620d8 <index_SIGNED>
2002e1e4:	a46301ff 	andi	r3, r3, 511
2002e1e8:	f8730040 	swi	r3, r19, 64
		i32 index_aligned_QUANT = index_QUANT % SIZE_QUANT;
2002e1ec:	b0002006 	imm	8198
2002e1f0:	e86020e0 	lwi	r3, r0, 8416	// 200620e0 <index_QUANT>
2002e1f4:	a46301ff 	andi	r3, r3, 511
2002e1f8:	f8730044 	swi	r3, r19, 68
		i16 tmp_if;
		i8 local_scaler;
		i32 local_is_signed;
		i8 local_s_QP;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2002e1fc:	b0002004 	imm	8196
2002e200:	e8607b0c 	lwi	r3, r0, 31500	// 20047b0c <decoder_texture_DCReconstruction_invpred_BTYPE>
2002e204:	e8830004 	lwi	r4, r3, 4
2002e208:	b0002006 	imm	8198
2002e20c:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002e210:	a46301ff 	andi	r3, r3, 511
2002e214:	10631800 	addk	r3, r3, r3
2002e218:	10641800 	addk	r3, r4, r3
2002e21c:	e4630000 	lhui	r3, r3, 0
2002e220:	f4730048 	shi	r3, r19, 72
		qp = tokens_QP[(index_QP + (0)) % SIZE_QP];
2002e224:	b0002004 	imm	8196
2002e228:	e8607ad0 	lwi	r3, r0, 31440	// 20047ad0 <decoder_texture_DCReconstruction_invpred_QP>
2002e22c:	e8830004 	lwi	r4, r3, 4
2002e230:	b0002006 	imm	8198
2002e234:	e86020b0 	lwi	r3, r0, 8368	// 200620b0 <index_QP>
2002e238:	a46301ff 	andi	r3, r3, 511
2002e23c:	10641800 	addk	r3, r4, r3
2002e240:	e0630000 	lbui	r3, r3, 0
2002e244:	f073004a 	sbi	r3, r19, 74
		a = tokens_A[(index_A + (0)) % SIZE_A];
2002e248:	b0002004 	imm	8196
2002e24c:	e8607b74 	lwi	r3, r0, 31604	// 20047b74 <decoder_texture_DCReconstruction_invpred_A>
2002e250:	e8830004 	lwi	r4, r3, 4
2002e254:	b0002006 	imm	8198
2002e258:	e8602090 	lwi	r3, r0, 8336	// 20062090 <index_A>
2002e25c:	a46301ff 	andi	r3, r3, 511
2002e260:	10631800 	addk	r3, r3, r3
2002e264:	10641800 	addk	r3, r4, r3
2002e268:	e4630000 	lhui	r3, r3, 0
2002e26c:	f473004c 	shi	r3, r19, 76
		b = tokens_B[(index_B + (0)) % SIZE_B];
2002e270:	b0002004 	imm	8196
2002e274:	e8607b6c 	lwi	r3, r0, 31596	// 20047b6c <decoder_texture_DCReconstruction_invpred_B>
2002e278:	e8830004 	lwi	r4, r3, 4
2002e27c:	b0002006 	imm	8198
2002e280:	e8602098 	lwi	r3, r0, 8344	// 20062098 <index_B>
2002e284:	a46301ff 	andi	r3, r3, 511
2002e288:	10631800 	addk	r3, r3, r3
2002e28c:	10641800 	addk	r3, r4, r3
2002e290:	e4630000 	lhui	r3, r3, 0
2002e294:	f473004e 	shi	r3, r19, 78
		c = tokens_C[(index_C + (0)) % SIZE_C];
2002e298:	b0002004 	imm	8196
2002e29c:	e8607b7c 	lwi	r3, r0, 31612	// 20047b7c <decoder_texture_DCReconstruction_invpred_C>
2002e2a0:	e8830004 	lwi	r4, r3, 4
2002e2a4:	b0002006 	imm	8198
2002e2a8:	e86020a0 	lwi	r3, r0, 8352	// 200620a0 <index_C>
2002e2ac:	a46301ff 	andi	r3, r3, 511
2002e2b0:	10631800 	addk	r3, r3, r3
2002e2b4:	10641800 	addk	r3, r4, r3
2002e2b8:	e4630000 	lhui	r3, r3, 0
2002e2bc:	f4730050 	shi	r3, r19, 80
		dca = dc_buf[a];
2002e2c0:	e473004c 	lhui	r3, r19, 76
2002e2c4:	90630061 	sext16	r3, r3
2002e2c8:	10631800 	addk	r3, r3, r3
2002e2cc:	b0002004 	imm	8196
2002e2d0:	30637bd8 	addik	r3, r3, 31704
2002e2d4:	e4630000 	lhui	r3, r3, 0
2002e2d8:	f4730052 	shi	r3, r19, 82
		dcb = dc_buf[b];
2002e2dc:	e473004e 	lhui	r3, r19, 78
2002e2e0:	90630061 	sext16	r3, r3
2002e2e4:	10631800 	addk	r3, r3, r3
2002e2e8:	b0002004 	imm	8196
2002e2ec:	30637bd8 	addik	r3, r3, 31704
2002e2f0:	e4630000 	lhui	r3, r3, 0
2002e2f4:	f4730054 	shi	r3, r19, 84
		dcc = dc_buf[c];
2002e2f8:	e4730050 	lhui	r3, r19, 80
2002e2fc:	90630061 	sext16	r3, r3
2002e300:	10631800 	addk	r3, r3, r3
2002e304:	b0002004 	imm	8196
2002e308:	30637bd8 	addik	r3, r3, 31704
2002e30c:	e4630000 	lhui	r3, r3, 0
2002e310:	f4730056 	shi	r3, r19, 86
		horiz = Math_abs(dcb - dcc);
2002e314:	e4730054 	lhui	r3, r19, 84
2002e318:	90830061 	sext16	r4, r3
2002e31c:	e4730056 	lhui	r3, r19, 86
2002e320:	90630061 	sext16	r3, r3
2002e324:	14632000 	rsubk	r3, r3, r4
2002e328:	10a30000 	addk	r5, r3, r0
2002e32c:	b9f4f3e8 	brlid	r15, -3096	// 2002d714 <Math_abs>
2002e330:	80000000 	or	r0, r0, r0
2002e334:	f4730058 	shi	r3, r19, 88
		vert = Math_abs(dca - dcb);
2002e338:	e4730052 	lhui	r3, r19, 82
2002e33c:	90830061 	sext16	r4, r3
2002e340:	e4730054 	lhui	r3, r19, 84
2002e344:	90630061 	sext16	r3, r3
2002e348:	14632000 	rsubk	r3, r3, r4
2002e34c:	10a30000 	addk	r5, r3, r0
2002e350:	b9f4f3c4 	brlid	r15, -3132	// 2002d714 <Math_abs>
2002e354:	80000000 	or	r0, r0, r0
2002e358:	f473005a 	shi	r3, r19, 90
		top = vert < horiz;
2002e35c:	30600001 	addik	r3, r0, 1
2002e360:	e493005a 	lhui	r4, r19, 90
2002e364:	90a40061 	sext16	r5, r4
2002e368:	e4930058 	lhui	r4, r19, 88
2002e36c:	90840061 	sext16	r4, r4
2002e370:	16442801 	cmp	r18, r4, r5
2002e374:	bc520008 	blti	r18, 8		// 2002e37c
2002e378:	10600000 	addk	r3, r0, r0
2002e37c:	a46300ff 	andi	r3, r3, 255
2002e380:	f873005c 	swi	r3, r19, 92
		local_ACPRED = Constants_ACPRED;
2002e384:	30600001 	addik	r3, r0, 1
2002e388:	f8730060 	swi	r3, r19, 96
		ac = (cmd & local_ACPRED) != 0;
2002e38c:	e4730048 	lhui	r3, r19, 72
2002e390:	90830061 	sext16	r4, r3
2002e394:	e8730060 	lwi	r3, r19, 96
2002e398:	84841800 	and	r4, r4, r3
2002e39c:	10600000 	addk	r3, r0, r0
2002e3a0:	8c641c00 	pcmpne	r3, r4, r3
2002e3a4:	a46300ff 	andi	r3, r3, 255
2002e3a8:	f8730064 	swi	r3, r19, 100
		s_QP = qp;
2002e3ac:	e073004a 	lbui	r3, r19, 74
2002e3b0:	b0002006 	imm	8198
2002e3b4:	f06020e8 	sbi	r3, r0, 8424	// 200620e8 <s_QP>
		tmp_dc_scaler = dc_scaler();
2002e3b8:	b9f4f43c 	brlid	r15, -3012	// 2002d7f4 <dc_scaler>
2002e3bc:	80000000 	or	r0, r0, r0
2002e3c0:	f0730068 	sbi	r3, r19, 104
		scaler = tmp_dc_scaler;
2002e3c4:	e0730068 	lbui	r3, r19, 104
2002e3c8:	b0002006 	imm	8198
2002e3cc:	f06020ee 	sbi	r3, r0, 8430	// 200620ee <scaler>
		if (top) {
2002e3d0:	e873005c 	lwi	r3, r19, 92
2002e3d4:	bc030010 	beqi	r3, 16		// 2002e3e4
			tmp_if = dcc;
2002e3d8:	e4730056 	lhui	r3, r19, 86
2002e3dc:	f473001e 	shi	r3, r19, 30
2002e3e0:	b800000c 	bri	12		// 2002e3ec
		} else {
			tmp_if = dca;
2002e3e4:	e4730052 	lhui	r3, r19, 82
2002e3e8:	f473001e 	shi	r3, r19, 30
		}
		local_scaler = scaler;
2002e3ec:	b0002006 	imm	8198
2002e3f0:	e06020ee 	lbui	r3, r0, 8430	// 200620ee <scaler>
2002e3f4:	f0730069 	sbi	r3, r19, 105
		local_scaler = scaler;
2002e3f8:	b0002006 	imm	8198
2002e3fc:	e06020ee 	lbui	r3, r0, 8430	// 200620ee <scaler>
2002e400:	f0730069 	sbi	r3, r19, 105
		dc_pred = (tmp_if + (local_scaler >> 1)) / local_scaler;
2002e404:	e473001e 	lhui	r3, r19, 30
2002e408:	90830061 	sext16	r4, r3
2002e40c:	e0730069 	lbui	r3, r19, 105
2002e410:	90630060 	sext8	r3, r3
2002e414:	90630001 	sra	r3, r3
2002e418:	90630060 	sext8	r3, r3
2002e41c:	10841800 	addk	r4, r4, r3
2002e420:	e0730069 	lbui	r3, r19, 105
2002e424:	90630060 	sext8	r3, r3
2002e428:	48632000 	idiv	r3, r3, r4
2002e42c:	90630061 	sext16	r3, r3
2002e430:	b0002006 	imm	8198
2002e434:	f46020ec 	shi	r3, r0, 8428	// 200620ec <dc_pred>
		if (!ac) {
2002e438:	e8730064 	lwi	r3, r19, 100
2002e43c:	bc23000c 	bnei	r3, 12		// 2002e448
			s = 0;
2002e440:	f013001c 	sbi	r0, r19, 28
2002e444:	b8000020 	bri	32		// 2002e464
		} else {
			if (top) {
2002e448:	e873005c 	lwi	r3, r19, 92
2002e44c:	bc030010 	beqi	r3, 16		// 2002e45c
				s = 2;
2002e450:	30600002 	addik	r3, r0, 2
2002e454:	f073001c 	sbi	r3, r19, 28
2002e458:	b800000c 	bri	12		// 2002e464
			} else {
				s = 1;
2002e45c:	30600001 	addik	r3, r0, 1
2002e460:	f073001c 	sbi	r3, r19, 28
			}
		}
		local_scaler = scaler;
2002e464:	b0002006 	imm	8198
2002e468:	e06020ee 	lbui	r3, r0, 8430	// 200620ee <scaler>
2002e46c:	f0730069 	sbi	r3, r19, 105
		is_signed = local_scaler == 0;
2002e470:	e0730069 	lbui	r3, r19, 105
2002e474:	90830060 	sext8	r4, r3
2002e478:	10600000 	addk	r3, r0, r0
2002e47c:	88641c00 	pcmpeq	r3, r4, r3
2002e480:	a46300ff 	andi	r3, r3, 255
2002e484:	b0002006 	imm	8198
2002e488:	f86020f4 	swi	r3, r0, 8436	// 200620f4 <is_signed>
		if (top) {
2002e48c:	e873005c 	lwi	r3, r19, 92
2002e490:	bc030030 	beqi	r3, 48		// 2002e4c0
			tokens_PTR[(index_PTR + (0)) % SIZE_PTR] = c;
2002e494:	b0002004 	imm	8196
2002e498:	e8607b80 	lwi	r3, r0, 31616	// 20047b80 <decoder_texture_DCReconstruction_invpred_PTR>
2002e49c:	e8830004 	lwi	r4, r3, 4
2002e4a0:	b0002006 	imm	8198
2002e4a4:	e86020c0 	lwi	r3, r0, 8384	// 200620c0 <index_PTR>
2002e4a8:	a46301ff 	andi	r3, r3, 511
2002e4ac:	10631800 	addk	r3, r3, r3
2002e4b0:	10641800 	addk	r3, r4, r3
2002e4b4:	e4930050 	lhui	r4, r19, 80
2002e4b8:	f4830000 	shi	r4, r3, 0
2002e4bc:	b800002c 	bri	44		// 2002e4e8
		} else {
			tokens_PTR[(index_PTR + (0)) % SIZE_PTR] = a;
2002e4c0:	b0002004 	imm	8196
2002e4c4:	e8607b80 	lwi	r3, r0, 31616	// 20047b80 <decoder_texture_DCReconstruction_invpred_PTR>
2002e4c8:	e8830004 	lwi	r4, r3, 4
2002e4cc:	b0002006 	imm	8198
2002e4d0:	e86020c0 	lwi	r3, r0, 8384	// 200620c0 <index_PTR>
2002e4d4:	a46301ff 	andi	r3, r3, 511
2002e4d8:	10631800 	addk	r3, r3, r3
2002e4dc:	10641800 	addk	r3, r4, r3
2002e4e0:	e493004c 	lhui	r4, r19, 76
2002e4e4:	f4830000 	shi	r4, r3, 0
		}
		tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR] = s;
2002e4e8:	b0002004 	imm	8196
2002e4ec:	e8607ba0 	lwi	r3, r0, 31648	// 20047ba0 <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>
2002e4f0:	e8830004 	lwi	r4, r3, 4
2002e4f4:	b0002006 	imm	8198
2002e4f8:	e86020c8 	lwi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
2002e4fc:	a46301ff 	andi	r3, r3, 511
2002e500:	10641800 	addk	r3, r4, r3
2002e504:	e093001c 	lbui	r4, r19, 28
2002e508:	f0830000 	sbi	r4, r3, 0
		tokens_MODE[(index_MODE + (0)) % SIZE_MODE] = s;
2002e50c:	b0002004 	imm	8196
2002e510:	e8607b90 	lwi	r3, r0, 31632	// 20047b90 <decoder_texture_DCReconstruction_invpred_MODE>
2002e514:	e8830004 	lwi	r4, r3, 4
2002e518:	b0002006 	imm	8198
2002e51c:	e86020d0 	lwi	r3, r0, 8400	// 200620d0 <index_MODE>
2002e520:	a46301ff 	andi	r3, r3, 511
2002e524:	10641800 	addk	r3, r4, r3
2002e528:	e093001c 	lbui	r4, r19, 28
2002e52c:	f0830000 	sbi	r4, r3, 0
		local_is_signed = is_signed;
2002e530:	b0002006 	imm	8198
2002e534:	e86020f4 	lwi	r3, r0, 8436	// 200620f4 <is_signed>
2002e538:	f873006c 	swi	r3, r19, 108
		tokens_SIGNED[(index_SIGNED + (0)) % SIZE_SIGNED] = local_is_signed;
2002e53c:	b0002004 	imm	8196
2002e540:	e8607b98 	lwi	r3, r0, 31640	// 20047b98 <decoder_texture_DCReconstruction_invpred_SIGNED>
2002e544:	e8830004 	lwi	r4, r3, 4
2002e548:	b0002006 	imm	8198
2002e54c:	e86020d8 	lwi	r3, r0, 8408	// 200620d8 <index_SIGNED>
2002e550:	a46301ff 	andi	r3, r3, 511
2002e554:	64630402 	bslli	r3, r3, 2
2002e558:	10641800 	addk	r3, r4, r3
2002e55c:	e893006c 	lwi	r4, r19, 108
2002e560:	f8830000 	swi	r4, r3, 0
		local_s_QP = s_QP;
2002e564:	b0002006 	imm	8198
2002e568:	e06020e8 	lbui	r3, r0, 8424	// 200620e8 <s_QP>
2002e56c:	f0730070 	sbi	r3, r19, 112
		tokens_QUANT[(index_QUANT + (0)) % SIZE_QUANT] = local_s_QP;
2002e570:	b0002004 	imm	8196
2002e574:	e8607ba8 	lwi	r3, r0, 31656	// 20047ba8 <decoder_texture_DCReconstruction_invpred_QUANT>
2002e578:	e8830004 	lwi	r4, r3, 4
2002e57c:	b0002006 	imm	8198
2002e580:	e86020e0 	lwi	r3, r0, 8416	// 200620e0 <index_QUANT>
2002e584:	a46301ff 	andi	r3, r3, 511
2002e588:	10641800 	addk	r3, r4, r3
2002e58c:	e0930070 	lbui	r4, r19, 112
2002e590:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
2002e594:	b0002006 	imm	8198
2002e598:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002e59c:	30630001 	addik	r3, r3, 1
2002e5a0:	b0002006 	imm	8198
2002e5a4:	f8602088 	swi	r3, r0, 8328	// 20062088 <index_BTYPE>
		index_QP += 1;
2002e5a8:	b0002006 	imm	8198
2002e5ac:	e86020b0 	lwi	r3, r0, 8368	// 200620b0 <index_QP>
2002e5b0:	30630001 	addik	r3, r3, 1
2002e5b4:	b0002006 	imm	8198
2002e5b8:	f86020b0 	swi	r3, r0, 8368	// 200620b0 <index_QP>
		index_A += 1;
2002e5bc:	b0002006 	imm	8198
2002e5c0:	e8602090 	lwi	r3, r0, 8336	// 20062090 <index_A>
2002e5c4:	30630001 	addik	r3, r3, 1
2002e5c8:	b0002006 	imm	8198
2002e5cc:	f8602090 	swi	r3, r0, 8336	// 20062090 <index_A>
		index_B += 1;
2002e5d0:	b0002006 	imm	8198
2002e5d4:	e8602098 	lwi	r3, r0, 8344	// 20062098 <index_B>
2002e5d8:	30630001 	addik	r3, r3, 1
2002e5dc:	b0002006 	imm	8198
2002e5e0:	f8602098 	swi	r3, r0, 8344	// 20062098 <index_B>
		index_C += 1;
2002e5e4:	b0002006 	imm	8198
2002e5e8:	e86020a0 	lwi	r3, r0, 8352	// 200620a0 <index_C>
2002e5ec:	30630001 	addik	r3, r3, 1
2002e5f0:	b0002006 	imm	8198
2002e5f4:	f86020a0 	swi	r3, r0, 8352	// 200620a0 <index_C>
		index_PTR += 1;
2002e5f8:	b0002006 	imm	8198
2002e5fc:	e86020c0 	lwi	r3, r0, 8384	// 200620c0 <index_PTR>
2002e600:	30630001 	addik	r3, r3, 1
2002e604:	b0002006 	imm	8198
2002e608:	f86020c0 	swi	r3, r0, 8384	// 200620c0 <index_PTR>
		index_AC_PRED_DIR += 1;
2002e60c:	b0002006 	imm	8198
2002e610:	e86020c8 	lwi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
2002e614:	30630001 	addik	r3, r3, 1
2002e618:	b0002006 	imm	8198
2002e61c:	f86020c8 	swi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
		index_MODE += 1;
2002e620:	b0002006 	imm	8198
2002e624:	e86020d0 	lwi	r3, r0, 8400	// 200620d0 <index_MODE>
2002e628:	30630001 	addik	r3, r3, 1
2002e62c:	b0002006 	imm	8198
2002e630:	f86020d0 	swi	r3, r0, 8400	// 200620d0 <index_MODE>
		index_SIGNED += 1;
2002e634:	b0002006 	imm	8198
2002e638:	e86020d8 	lwi	r3, r0, 8408	// 200620d8 <index_SIGNED>
2002e63c:	30630001 	addik	r3, r3, 1
2002e640:	b0002006 	imm	8198
2002e644:	f86020d8 	swi	r3, r0, 8408	// 200620d8 <index_SIGNED>
		index_QUANT += 1;
2002e648:	b0002006 	imm	8198
2002e64c:	e86020e0 	lwi	r3, r0, 8416	// 200620e0 <index_QUANT>
2002e650:	30630001 	addik	r3, r3, 1
2002e654:	b0002006 	imm	8198
2002e658:	f86020e0 	swi	r3, r0, 8416	// 200620e0 <index_QUANT>
		
		read_end_BTYPE();
2002e65c:	b9f4e944 	brlid	r15, -5820	// 2002cfa0 <read_end_BTYPE>
2002e660:	80000000 	or	r0, r0, r0
		read_end_QP();
2002e664:	b9f4ec88 	brlid	r15, -4984	// 2002d2ec <read_end_QP>
2002e668:	80000000 	or	r0, r0, r0
		read_end_A();
2002e66c:	b9f4e9e0 	brlid	r15, -5664	// 2002d04c <read_end_A>
2002e670:	80000000 	or	r0, r0, r0
		read_end_B();
2002e674:	b9f4ea80 	brlid	r15, -5504	// 2002d0f4 <read_end_B>
2002e678:	80000000 	or	r0, r0, r0
		read_end_C();
2002e67c:	b9f4eb20 	brlid	r15, -5344	// 2002d19c <read_end_C>
2002e680:	80000000 	or	r0, r0, r0
		write_end_PTR();
2002e684:	b9f4edb8 	brlid	r15, -4680	// 2002d43c <write_end_PTR>
2002e688:	80000000 	or	r0, r0, r0
		write_end_AC_PRED_DIR();
2002e68c:	b9f4ee58 	brlid	r15, -4520	// 2002d4e4 <write_end_AC_PRED_DIR>
2002e690:	80000000 	or	r0, r0, r0
		write_end_MODE();
2002e694:	b9f4eef8 	brlid	r15, -4360	// 2002d58c <write_end_MODE>
2002e698:	80000000 	or	r0, r0, r0
		write_end_SIGNED();
2002e69c:	b9f4ef98 	brlid	r15, -4200	// 2002d634 <write_end_SIGNED>
2002e6a0:	80000000 	or	r0, r0, r0
		write_end_QUANT();
2002e6a4:	b9f4f038 	brlid	r15, -4040	// 2002d6dc <write_end_QUANT>
2002e6a8:	80000000 	or	r0, r0, r0
	}
2002e6ac:	e9e10000 	lwi	r15, r1, 0
2002e6b0:	10330000 	addk	r1, r19, r0
2002e6b4:	ea610074 	lwi	r19, r1, 116
2002e6b8:	30210078 	addik	r1, r1, 120
2002e6bc:	b60f0008 	rtsd	r15, 8
2002e6c0:	80000000 	or	r0, r0, r0

2002e6c4 <isSchedulable_getdc_inter>:
	static i32 isSchedulable_getdc_inter() {
2002e6c4:	3021fff4 	addik	r1, r1, -12
2002e6c8:	fa610008 	swi	r19, r1, 8
2002e6cc:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2002e6d0:	30600001 	addik	r3, r0, 1
2002e6d4:	f8730004 	swi	r3, r19, 4
		return result;
2002e6d8:	e8730004 	lwi	r3, r19, 4
	}
2002e6dc:	10330000 	addk	r1, r19, r0
2002e6e0:	ea610008 	lwi	r19, r1, 8
2002e6e4:	3021000c 	addik	r1, r1, 12
2002e6e8:	b60f0008 	rtsd	r15, 8
2002e6ec:	80000000 	or	r0, r0, r0

2002e6f0 <getdc_inter>:
	
	static void getdc_inter() {
2002e6f0:	3021ffcc 	addik	r1, r1, -52
2002e6f4:	f9e10000 	swi	r15, r1, 0
2002e6f8:	fa610030 	swi	r19, r1, 48
2002e6fc:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_QFS_DC = index_QFS_DC % SIZE_QFS_DC;
2002e700:	b0002006 	imm	8198
2002e704:	e86020a8 	lwi	r3, r0, 8360	// 200620a8 <index_QFS_DC>
2002e708:	a46301ff 	andi	r3, r3, 511
2002e70c:	f873001c 	swi	r3, r19, 28
		i32 tmp_abs;
		i8 local_round;
		i16 v;
		i32 local_is_signed;
	
		dc = tokens_QFS_DC[(index_QFS_DC + (0)) % SIZE_QFS_DC];
2002e710:	b0002004 	imm	8196
2002e714:	e8607b44 	lwi	r3, r0, 31556	// 20047b44 <decoder_texture_DCReconstruction_invpred_QFS_DC>
2002e718:	e8830004 	lwi	r4, r3, 4
2002e71c:	b0002006 	imm	8198
2002e720:	e86020a8 	lwi	r3, r0, 8360	// 200620a8 <index_QFS_DC>
2002e724:	a46301ff 	andi	r3, r3, 511
2002e728:	10631800 	addk	r3, r3, r3
2002e72c:	10641800 	addk	r3, r4, r3
2002e730:	e4630000 	lhui	r3, r3, 0
2002e734:	f4730020 	shi	r3, r19, 32
		local_s_QP = s_QP;
2002e738:	b0002006 	imm	8198
2002e73c:	e06020e8 	lbui	r3, r0, 8424	// 200620e8 <s_QP>
2002e740:	f0730022 	sbi	r3, r19, 34
		tmp_abs = Math_abs(dc);
2002e744:	e4730020 	lhui	r3, r19, 32
2002e748:	90630061 	sext16	r3, r3
2002e74c:	10a30000 	addk	r5, r3, r0
2002e750:	b9f4efc4 	brlid	r15, -4156	// 2002d714 <Math_abs>
2002e754:	80000000 	or	r0, r0, r0
2002e758:	f8730024 	swi	r3, r19, 36
		local_round = round;
2002e75c:	b0002006 	imm	8198
2002e760:	e06020e9 	lbui	r3, r0, 8425	// 200620e9 <round>
2002e764:	f0730028 	sbi	r3, r19, 40
		v = local_s_QP * ((tmp_abs << 1) + 1) - local_round;
2002e768:	e0730022 	lbui	r3, r19, 34
2002e76c:	90630060 	sext8	r3, r3
2002e770:	b0000000 	imm	0
2002e774:	a483ffff 	andi	r4, r3, -1
2002e778:	e8730024 	lwi	r3, r19, 36
2002e77c:	10631800 	addk	r3, r3, r3
2002e780:	30630001 	addik	r3, r3, 1
2002e784:	b0000000 	imm	0
2002e788:	a463ffff 	andi	r3, r3, -1
2002e78c:	40641800 	mul	r3, r4, r3
2002e790:	b0000000 	imm	0
2002e794:	a483ffff 	andi	r4, r3, -1
2002e798:	e0730028 	lbui	r3, r19, 40
2002e79c:	90630060 	sext8	r3, r3
2002e7a0:	b0000000 	imm	0
2002e7a4:	a463ffff 	andi	r3, r3, -1
2002e7a8:	14632000 	rsubk	r3, r3, r4
2002e7ac:	b0000000 	imm	0
2002e7b0:	a463ffff 	andi	r3, r3, -1
2002e7b4:	f473002a 	shi	r3, r19, 42
		if (dc == 0) {
2002e7b8:	e4730020 	lhui	r3, r19, 32
2002e7bc:	90630061 	sext16	r3, r3
2002e7c0:	bc230010 	bnei	r3, 16		// 2002e7d0
			dc_val = 0;
2002e7c4:	b0002006 	imm	8198
2002e7c8:	f40020f0 	shi	r0, r0, 8432	// 200620f0 <dc_val>
2002e7cc:	b8000060 	bri	96		// 2002e82c
		} else {
			local_is_signed = is_signed;
2002e7d0:	b0002006 	imm	8198
2002e7d4:	e86020f4 	lwi	r3, r0, 8436	// 200620f4 <is_signed>
2002e7d8:	f873002c 	swi	r3, r19, 44
			if (!local_is_signed) {
2002e7dc:	e873002c 	lwi	r3, r19, 44
2002e7e0:	bc230014 	bnei	r3, 20		// 2002e7f4
				dc_val = dc;
2002e7e4:	e4730020 	lhui	r3, r19, 32
2002e7e8:	b0002006 	imm	8198
2002e7ec:	f46020f0 	shi	r3, r0, 8432	// 200620f0 <dc_val>
2002e7f0:	b800003c 	bri	60		// 2002e82c
			} else {
				if (dc < 0) {
2002e7f4:	e4730020 	lhui	r3, r19, 32
2002e7f8:	90630061 	sext16	r3, r3
2002e7fc:	bca30024 	bgei	r3, 36		// 2002e820
					dc_val = -v;
2002e800:	e473002a 	lhui	r3, r19, 42
2002e804:	14630000 	rsubk	r3, r3, r0
2002e808:	b0000000 	imm	0
2002e80c:	a463ffff 	andi	r3, r3, -1
2002e810:	90630061 	sext16	r3, r3
2002e814:	b0002006 	imm	8198
2002e818:	f46020f0 	shi	r3, r0, 8432	// 200620f0 <dc_val>
2002e81c:	b8000010 	bri	16		// 2002e82c
				} else {
					dc_val = v;
2002e820:	e473002a 	lhui	r3, r19, 42
2002e824:	b0002006 	imm	8198
2002e828:	f46020f0 	shi	r3, r0, 8432	// 200620f0 <dc_val>
				}
			}
		}
	
		// Update ports indexes
		index_QFS_DC += 1;
2002e82c:	b0002006 	imm	8198
2002e830:	e86020a8 	lwi	r3, r0, 8360	// 200620a8 <index_QFS_DC>
2002e834:	30630001 	addik	r3, r3, 1
2002e838:	b0002006 	imm	8198
2002e83c:	f86020a8 	swi	r3, r0, 8360	// 200620a8 <index_QFS_DC>
		
		read_end_QFS_DC();
2002e840:	b9f4ea04 	brlid	r15, -5628	// 2002d244 <read_end_QFS_DC>
2002e844:	80000000 	or	r0, r0, r0
	}
2002e848:	e9e10000 	lwi	r15, r1, 0
2002e84c:	10330000 	addk	r1, r19, r0
2002e850:	ea610030 	lwi	r19, r1, 48
2002e854:	30210034 	addik	r1, r1, 52
2002e858:	b60f0008 	rtsd	r15, 8
2002e85c:	80000000 	or	r0, r0, r0

2002e860 <isSchedulable_getdc_intra>:
	static i32 isSchedulable_getdc_intra() {
2002e860:	3021fff4 	addik	r1, r1, -12
2002e864:	fa610008 	swi	r19, r1, 8
2002e868:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2002e86c:	30600001 	addik	r3, r0, 1
2002e870:	f8730004 	swi	r3, r19, 4
		return result;
2002e874:	e8730004 	lwi	r3, r19, 4
	}
2002e878:	10330000 	addk	r1, r19, r0
2002e87c:	ea610008 	lwi	r19, r1, 8
2002e880:	3021000c 	addik	r1, r1, 12
2002e884:	b60f0008 	rtsd	r15, 8
2002e888:	80000000 	or	r0, r0, r0

2002e88c <getdc_intra>:
	
	static void getdc_intra() {
2002e88c:	3021ffd4 	addik	r1, r1, -44
2002e890:	f9e10000 	swi	r15, r1, 0
2002e894:	fa610028 	swi	r19, r1, 40
2002e898:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_QFS_DC = index_QFS_DC % SIZE_QFS_DC;
2002e89c:	b0002006 	imm	8198
2002e8a0:	e86020a8 	lwi	r3, r0, 8360	// 200620a8 <index_QFS_DC>
2002e8a4:	a46301ff 	andi	r3, r3, 511
2002e8a8:	f873001c 	swi	r3, r19, 28
	
		i16 dc;
		i16 local_dc_pred;
		i8 local_scaler;
	
		dc = tokens_QFS_DC[(index_QFS_DC + (0)) % SIZE_QFS_DC];
2002e8ac:	b0002004 	imm	8196
2002e8b0:	e8607b44 	lwi	r3, r0, 31556	// 20047b44 <decoder_texture_DCReconstruction_invpred_QFS_DC>
2002e8b4:	e8830004 	lwi	r4, r3, 4
2002e8b8:	b0002006 	imm	8198
2002e8bc:	e86020a8 	lwi	r3, r0, 8360	// 200620a8 <index_QFS_DC>
2002e8c0:	a46301ff 	andi	r3, r3, 511
2002e8c4:	10631800 	addk	r3, r3, r3
2002e8c8:	10641800 	addk	r3, r4, r3
2002e8cc:	e4630000 	lhui	r3, r3, 0
2002e8d0:	f4730020 	shi	r3, r19, 32
		local_dc_pred = dc_pred;
2002e8d4:	b0002006 	imm	8198
2002e8d8:	e46020ec 	lhui	r3, r0, 8428	// 200620ec <dc_pred>
2002e8dc:	f4730022 	shi	r3, r19, 34
		local_scaler = scaler;
2002e8e0:	b0002006 	imm	8198
2002e8e4:	e06020ee 	lbui	r3, r0, 8430	// 200620ee <scaler>
2002e8e8:	f0730024 	sbi	r3, r19, 36
		dc_val = (dc + local_dc_pred) * local_scaler;
2002e8ec:	e4730020 	lhui	r3, r19, 32
2002e8f0:	90830061 	sext16	r4, r3
2002e8f4:	e4730022 	lhui	r3, r19, 34
2002e8f8:	90630061 	sext16	r3, r3
2002e8fc:	10641800 	addk	r3, r4, r3
2002e900:	b0000000 	imm	0
2002e904:	a483ffff 	andi	r4, r3, -1
2002e908:	e0730024 	lbui	r3, r19, 36
2002e90c:	90630060 	sext8	r3, r3
2002e910:	b0000000 	imm	0
2002e914:	a463ffff 	andi	r3, r3, -1
2002e918:	40641800 	mul	r3, r4, r3
2002e91c:	b0000000 	imm	0
2002e920:	a463ffff 	andi	r3, r3, -1
2002e924:	90630061 	sext16	r3, r3
2002e928:	b0002006 	imm	8198
2002e92c:	f46020f0 	shi	r3, r0, 8432	// 200620f0 <dc_val>
	
		// Update ports indexes
		index_QFS_DC += 1;
2002e930:	b0002006 	imm	8198
2002e934:	e86020a8 	lwi	r3, r0, 8360	// 200620a8 <index_QFS_DC>
2002e938:	30630001 	addik	r3, r3, 1
2002e93c:	b0002006 	imm	8198
2002e940:	f86020a8 	swi	r3, r0, 8360	// 200620a8 <index_QFS_DC>
		
		read_end_QFS_DC();
2002e944:	b9f4e900 	brlid	r15, -5888	// 2002d244 <read_end_QFS_DC>
2002e948:	80000000 	or	r0, r0, r0
	}
2002e94c:	e9e10000 	lwi	r15, r1, 0
2002e950:	10330000 	addk	r1, r19, r0
2002e954:	ea610028 	lwi	r19, r1, 40
2002e958:	3021002c 	addik	r1, r1, 44
2002e95c:	b60f0008 	rtsd	r15, 8
2002e960:	80000000 	or	r0, r0, r0

2002e964 <isSchedulable_sat>:
	static i32 isSchedulable_sat() {
2002e964:	3021fff4 	addik	r1, r1, -12
2002e968:	fa610008 	swi	r19, r1, 8
2002e96c:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2002e970:	30600001 	addik	r3, r0, 1
2002e974:	f8730004 	swi	r3, r19, 4
		return result;
2002e978:	e8730004 	lwi	r3, r19, 4
	}
2002e97c:	10330000 	addk	r1, r19, r0
2002e980:	ea610008 	lwi	r19, r1, 8
2002e984:	3021000c 	addik	r1, r1, 12
2002e988:	b60f0008 	rtsd	r15, 8
2002e98c:	80000000 	or	r0, r0, r0

2002e990 <sat>:
	
	static void sat() {
2002e990:	3021ffd0 	addik	r1, r1, -48
2002e994:	f9e10000 	swi	r15, r1, 0
2002e998:	fa61002c 	swi	r19, r1, 44
2002e99c:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_QF_DC = index_QF_DC % SIZE_QF_DC;
2002e9a0:	b0002006 	imm	8198
2002e9a4:	e86020b8 	lwi	r3, r0, 8376	// 200620b8 <index_QF_DC>
2002e9a8:	a46301ff 	andi	r3, r3, 511
2002e9ac:	f873001c 	swi	r3, r19, 28
		i16 local_dc_val;
		i16 dc;
		i32 local_ptr;
		i8 local_comp;
	
		local_dc_val = dc_val;
2002e9b0:	b0002006 	imm	8198
2002e9b4:	e46020f0 	lhui	r3, r0, 8432	// 200620f0 <dc_val>
2002e9b8:	f4730020 	shi	r3, r19, 32
		dc = saturate(local_dc_val);
2002e9bc:	e4730020 	lhui	r3, r19, 32
2002e9c0:	90630061 	sext16	r3, r3
2002e9c4:	10a30000 	addk	r5, r3, r0
2002e9c8:	b9f4ed94 	brlid	r15, -4716	// 2002d75c <saturate>
2002e9cc:	80000000 	or	r0, r0, r0
2002e9d0:	f4730022 	shi	r3, r19, 34
		local_ptr = ptr;
2002e9d4:	b0002004 	imm	8196
2002e9d8:	e8607bd4 	lwi	r3, r0, 31700	// 20047bd4 <ptr>
2002e9dc:	f8730024 	swi	r3, r19, 36
		local_comp = comp;
2002e9e0:	b0002006 	imm	8198
2002e9e4:	e06020ea 	lbui	r3, r0, 8426	// 200620ea <comp>
2002e9e8:	f0730028 	sbi	r3, r19, 40
		dc_buf[local_ptr | local_comp] = dc;
2002e9ec:	e0730028 	lbui	r3, r19, 40
2002e9f0:	90830060 	sext8	r4, r3
2002e9f4:	e8730024 	lwi	r3, r19, 36
2002e9f8:	80641800 	or	r3, r4, r3
2002e9fc:	10631800 	addk	r3, r3, r3
2002ea00:	b0002004 	imm	8196
2002ea04:	30637bd8 	addik	r3, r3, 31704
2002ea08:	e4930022 	lhui	r4, r19, 34
2002ea0c:	f4830000 	shi	r4, r3, 0
		tokens_QF_DC[(index_QF_DC + (0)) % SIZE_QF_DC] = dc;
2002ea10:	b0002004 	imm	8196
2002ea14:	e8607b88 	lwi	r3, r0, 31624	// 20047b88 <decoder_texture_DCReconstruction_invpred_QF_DC>
2002ea18:	e8830004 	lwi	r4, r3, 4
2002ea1c:	b0002006 	imm	8198
2002ea20:	e86020b8 	lwi	r3, r0, 8376	// 200620b8 <index_QF_DC>
2002ea24:	a46301ff 	andi	r3, r3, 511
2002ea28:	10631800 	addk	r3, r3, r3
2002ea2c:	10641800 	addk	r3, r4, r3
2002ea30:	e4930022 	lhui	r4, r19, 34
2002ea34:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_QF_DC += 1;
2002ea38:	b0002006 	imm	8198
2002ea3c:	e86020b8 	lwi	r3, r0, 8376	// 200620b8 <index_QF_DC>
2002ea40:	30630001 	addik	r3, r3, 1
2002ea44:	b0002006 	imm	8198
2002ea48:	f86020b8 	swi	r3, r0, 8376	// 200620b8 <index_QF_DC>
		
		write_end_QF_DC();
2002ea4c:	b9f4e948 	brlid	r15, -5816	// 2002d394 <write_end_QF_DC>
2002ea50:	80000000 	or	r0, r0, r0
	}
2002ea54:	e9e10000 	lwi	r15, r1, 0
2002ea58:	10330000 	addk	r1, r19, r0
2002ea5c:	ea61002c 	lwi	r19, r1, 44
2002ea60:	30210030 	addik	r1, r1, 48
2002ea64:	b60f0008 	rtsd	r15, 8
2002ea68:	80000000 	or	r0, r0, r0

2002ea6c <isSchedulable_advance>:
	static i32 isSchedulable_advance() {
2002ea6c:	3021fff4 	addik	r1, r1, -12
2002ea70:	fa610008 	swi	r19, r1, 8
2002ea74:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2002ea78:	30600001 	addik	r3, r0, 1
2002ea7c:	f8730004 	swi	r3, r19, 4
		return result;
2002ea80:	e8730004 	lwi	r3, r19, 4
	}
2002ea84:	10330000 	addk	r1, r19, r0
2002ea88:	ea610008 	lwi	r19, r1, 8
2002ea8c:	3021000c 	addik	r1, r1, 12
2002ea90:	b60f0008 	rtsd	r15, 8
2002ea94:	80000000 	or	r0, r0, r0

2002ea98 <advance>:
	
	static void advance() {
2002ea98:	3021ffec 	addik	r1, r1, -20
2002ea9c:	fa610010 	swi	r19, r1, 16
2002eaa0:	12610000 	addk	r19, r1, r0
	
		i8 local_comp;
		i32 local_ptr;
		i32 local_BUF_SIZE;
	
		local_comp = comp;
2002eaa4:	b0002006 	imm	8198
2002eaa8:	e06020ea 	lbui	r3, r0, 8426	// 200620ea <comp>
2002eaac:	f0730004 	sbi	r3, r19, 4
		comp = local_comp + 1;
2002eab0:	e0730004 	lbui	r3, r19, 4
2002eab4:	30630001 	addik	r3, r3, 1
2002eab8:	a46300ff 	andi	r3, r3, 255
2002eabc:	90630060 	sext8	r3, r3
2002eac0:	b0002006 	imm	8198
2002eac4:	f06020ea 	sbi	r3, r0, 8426	// 200620ea <comp>
		local_comp = comp;
2002eac8:	b0002006 	imm	8198
2002eacc:	e06020ea 	lbui	r3, r0, 8426	// 200620ea <comp>
2002ead0:	f0730004 	sbi	r3, r19, 4
		if (local_comp == 6) {
2002ead4:	e0730004 	lbui	r3, r19, 4
2002ead8:	90630060 	sext8	r3, r3
2002eadc:	a8630006 	xori	r3, r3, 6
2002eae0:	bc23005c 	bnei	r3, 92		// 2002eb3c
			comp = 0;
2002eae4:	b0002006 	imm	8198
2002eae8:	f00020ea 	sbi	r0, r0, 8426	// 200620ea <comp>
			local_ptr = ptr;
2002eaec:	b0002004 	imm	8196
2002eaf0:	e8607bd4 	lwi	r3, r0, 31700	// 20047bd4 <ptr>
2002eaf4:	f8730008 	swi	r3, r19, 8
			if (local_ptr == 8) {
2002eaf8:	e8730008 	lwi	r3, r19, 8
2002eafc:	a8630008 	xori	r3, r3, 8
2002eb00:	bc230020 	bnei	r3, 32		// 2002eb20
				local_BUF_SIZE = BUF_SIZE;
2002eb04:	30600070 	addik	r3, r0, 112	// 70 <deregister_tm_clones>
2002eb08:	f873000c 	swi	r3, r19, 12
				ptr = local_BUF_SIZE - 8;
2002eb0c:	e873000c 	lwi	r3, r19, 12
2002eb10:	3063fff8 	addik	r3, r3, -8
2002eb14:	b0002004 	imm	8196
2002eb18:	f8607bd4 	swi	r3, r0, 31700	// 20047bd4 <ptr>
2002eb1c:	b8000020 	bri	32		// 2002eb3c
			} else {
				local_ptr = ptr;
2002eb20:	b0002004 	imm	8196
2002eb24:	e8607bd4 	lwi	r3, r0, 31700	// 20047bd4 <ptr>
2002eb28:	f8730008 	swi	r3, r19, 8
				ptr = local_ptr - 8;
2002eb2c:	e8730008 	lwi	r3, r19, 8
2002eb30:	3063fff8 	addik	r3, r3, -8
2002eb34:	b0002004 	imm	8196
2002eb38:	f8607bd4 	swi	r3, r0, 31700	// 20047bd4 <ptr>
			}
		}
	
		// Update ports indexes
		
	}
2002eb3c:	10330000 	addk	r1, r19, r0
2002eb40:	ea610010 	lwi	r19, r1, 16
2002eb44:	30210014 	addik	r1, r1, 20
2002eb48:	b60f0008 	rtsd	r15, 8
2002eb4c:	80000000 	or	r0, r0, r0

2002eb50 <decoder_texture_DCReconstruction_invpred_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_texture_DCReconstruction_invpred_initialize() {
2002eb50:	3021fff4 	addik	r1, r1, -12
2002eb54:	fa610008 	swi	r19, r1, 8
2002eb58:	12610000 	addk	r19, r1, r0
		int i = 0;
2002eb5c:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_read;
2002eb60:	30600005 	addik	r3, r0, 5
2002eb64:	b0002006 	imm	8198
2002eb68:	f86020f8 	swi	r3, r0, 8440	// 200620f8 <_FSM_state>
		
	finished:
		// no read_end/write_end here!
		return;
2002eb6c:	80000000 	or	r0, r0, r0
	}
2002eb70:	10330000 	addk	r1, r19, r0
2002eb74:	ea610008 	lwi	r19, r1, 8
2002eb78:	3021000c 	addik	r1, r1, 12
2002eb7c:	b60f0008 	rtsd	r15, 8
2002eb80:	80000000 	or	r0, r0, r0

2002eb84 <decoder_texture_DCReconstruction_invpred_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	
	int decoder_texture_DCReconstruction_invpred_scheduler() {
2002eb84:	3021ffb4 	addik	r1, r1, -76
2002eb88:	f9e10000 	swi	r15, r1, 0
2002eb8c:	fa610048 	swi	r19, r1, 72
2002eb90:	12610000 	addk	r19, r1, r0
		int i = 0;
2002eb94:	f813001c 	swi	r0, r19, 28
		if(needInit){
2002eb98:	b0002004 	imm	8196
2002eb9c:	e0607cb8 	lbui	r3, r0, 31928	// 20047cb8 <needInit>
2002eba0:	bc030014 	beqi	r3, 20		// 2002ebb4
			decoder_texture_DCReconstruction_invpred_initialize();
2002eba4:	b9f4ffac 	brlid	r15, -84	// 2002eb50 <decoder_texture_DCReconstruction_invpred_initialize>
2002eba8:	80000000 	or	r0, r0, r0
			needInit = 0;
2002ebac:	b0002004 	imm	8196
2002ebb0:	f0007cb8 	sbi	r0, r0, 31928	// 20047cb8 <needInit>
		}
	
		read_BTYPE();
2002ebb4:	b9f4e37c 	brlid	r15, -7300	// 2002cf30 <read_BTYPE>
2002ebb8:	80000000 	or	r0, r0, r0
		read_A();
2002ebbc:	b9f4e420 	brlid	r15, -7136	// 2002cfdc <read_A>
2002ebc0:	80000000 	or	r0, r0, r0
		read_B();
2002ebc4:	b9f4e4c0 	brlid	r15, -6976	// 2002d084 <read_B>
2002ebc8:	80000000 	or	r0, r0, r0
		read_C();
2002ebcc:	b9f4e560 	brlid	r15, -6816	// 2002d12c <read_C>
2002ebd0:	80000000 	or	r0, r0, r0
		read_QFS_DC();
2002ebd4:	b9f4e600 	brlid	r15, -6656	// 2002d1d4 <read_QFS_DC>
2002ebd8:	80000000 	or	r0, r0, r0
		read_QP();
2002ebdc:	b9f4e6a0 	brlid	r15, -6496	// 2002d27c <read_QP>
2002ebe0:	80000000 	or	r0, r0, r0
		write_QF_DC();
2002ebe4:	b9f4e740 	brlid	r15, -6336	// 2002d324 <write_QF_DC>
2002ebe8:	80000000 	or	r0, r0, r0
		write_PTR();
2002ebec:	b9f4e7e0 	brlid	r15, -6176	// 2002d3cc <write_PTR>
2002ebf0:	80000000 	or	r0, r0, r0
		write_AC_PRED_DIR();
2002ebf4:	b9f4e880 	brlid	r15, -6016	// 2002d474 <write_AC_PRED_DIR>
2002ebf8:	80000000 	or	r0, r0, r0
		write_MODE();
2002ebfc:	b9f4e920 	brlid	r15, -5856	// 2002d51c <write_MODE>
2002ec00:	80000000 	or	r0, r0, r0
		write_SIGNED();
2002ec04:	b9f4e9c0 	brlid	r15, -5696	// 2002d5c4 <write_SIGNED>
2002ec08:	80000000 	or	r0, r0, r0
		write_QUANT();
2002ec0c:	b9f4ea60 	brlid	r15, -5536	// 2002d66c <write_QUANT>
2002ec10:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
2002ec14:	b0002006 	imm	8198
2002ec18:	e86020f8 	lwi	r3, r0, 8440	// 200620f8 <_FSM_state>
2002ec1c:	30800006 	addik	r4, r0, 6
2002ec20:	16432003 	cmpu	r18, r3, r4
2002ec24:	bc520018 	blti	r18, 24		// 2002ec3c
2002ec28:	64630402 	bslli	r3, r3, 2
2002ec2c:	b0002004 	imm	8196
2002ec30:	3063547c 	addik	r3, r3, 21628
2002ec34:	e8630000 	lwi	r3, r3, 0
2002ec38:	98081800 	bra	r3
		case my_state_read:
			goto l_read;
		case my_state_sat:
			goto l_sat;
		default:
			exit(1);
2002ec3c:	30a00001 	addik	r5, r0, 1
2002ec40:	b000dffd 	imm	-8195
2002ec44:	b9f41754 	brlid	r15, 5972	// 398 <exit>
2002ec48:	80000000 	or	r0, r0, r0
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_advance:
			goto l_advance;
2002ec4c:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_advance:
			if (isSchedulable_advance()) {
2002ec50:	b9f4fe1c 	brlid	r15, -484	// 2002ea6c <isSchedulable_advance>
2002ec54:	80000000 	or	r0, r0, r0
2002ec58:	bc030034 	beqi	r3, 52		// 2002ec8c
				int stop = 0;
2002ec5c:	f8130034 	swi	r0, r19, 52
				if (stop != 0) {
2002ec60:	e8730034 	lwi	r3, r19, 52
2002ec64:	bc030010 	beqi	r3, 16		// 2002ec74
					_FSM_state = my_state_advance;
2002ec68:	b0002006 	imm	8198
2002ec6c:	f80020f8 	swi	r0, r0, 8440	// 200620f8 <_FSM_state>
					goto finished;
2002ec70:	b800066c 	bri	1644		// 2002f2dc
				}
				advance();
2002ec74:	b9f4fe24 	brlid	r15, -476	// 2002ea98 <advance>
2002ec78:	80000000 	or	r0, r0, r0
				i++;
2002ec7c:	e873001c 	lwi	r3, r19, 28
2002ec80:	30630001 	addik	r3, r3, 1
2002ec84:	f873001c 	swi	r3, r19, 28
				goto l_read;
2002ec88:	b80001c4 	bri	452		// 2002ee4c
			} else {
				_FSM_state = my_state_advance;
2002ec8c:	b0002006 	imm	8198
2002ec90:	f80020f8 	swi	r0, r0, 8440	// 200620f8 <_FSM_state>
				goto finished;
2002ec94:	b8000648 	bri	1608		// 2002f2dc
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_advance:
			goto l_advance;
		case my_state_geth:
			goto l_geth;
2002ec98:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_advance;
				goto finished;
			}
		l_geth:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_skip()) {
2002ec9c:	b0002006 	imm	8198
2002eca0:	e880208c 	lwi	r4, r0, 8332	// 2006208c <numTokens_BTYPE>
2002eca4:	b0002006 	imm	8198
2002eca8:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002ecac:	88641800 	xor	r3, r4, r3
2002ecb0:	bc030044 	beqi	r3, 68		// 2002ecf4
2002ecb4:	b9f4eecc 	brlid	r15, -4404	// 2002db80 <isSchedulable_skip>
2002ecb8:	80000000 	or	r0, r0, r0
2002ecbc:	bc030038 	beqi	r3, 56		// 2002ecf4
				int stop = 0;
2002ecc0:	f8130038 	swi	r0, r19, 56
				if (stop != 0) {
2002ecc4:	e8730038 	lwi	r3, r19, 56
2002ecc8:	bc030014 	beqi	r3, 20		// 2002ecdc
					_FSM_state = my_state_geth;
2002eccc:	30600001 	addik	r3, r0, 1
2002ecd0:	b0002006 	imm	8198
2002ecd4:	f86020f8 	swi	r3, r0, 8440	// 200620f8 <_FSM_state>
					goto finished;
2002ecd8:	b8000604 	bri	1540		// 2002f2dc
				}
				skip();
2002ecdc:	b9f4eed0 	brlid	r15, -4400	// 2002dbac <skip>
2002ece0:	80000000 	or	r0, r0, r0
				i++;
2002ece4:	e873001c 	lwi	r3, r19, 28
2002ece8:	30630001 	addik	r3, r3, 1
2002ecec:	f873001c 	swi	r3, r19, 28
				goto l_read;
2002ecf0:	b800015c 	bri	348		// 2002ee4c
			} else {
				_FSM_state = my_state_geth;
2002ecf4:	30600001 	addik	r3, r0, 1
2002ecf8:	b0002006 	imm	8198
2002ecfc:	f86020f8 	swi	r3, r0, 8440	// 200620f8 <_FSM_state>
				goto finished;
2002ed00:	b80005dc 	bri	1500		// 2002f2dc
		case my_state_advance:
			goto l_advance;
		case my_state_geth:
			goto l_geth;
		case my_state_getw:
			goto l_getw;
2002ed04:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_geth;
				goto finished;
			}
		l_getw:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_skip()) {
2002ed08:	b0002006 	imm	8198
2002ed0c:	e880208c 	lwi	r4, r0, 8332	// 2006208c <numTokens_BTYPE>
2002ed10:	b0002006 	imm	8198
2002ed14:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002ed18:	88641800 	xor	r3, r4, r3
2002ed1c:	bc030044 	beqi	r3, 68		// 2002ed60
2002ed20:	b9f4ee60 	brlid	r15, -4512	// 2002db80 <isSchedulable_skip>
2002ed24:	80000000 	or	r0, r0, r0
2002ed28:	bc030038 	beqi	r3, 56		// 2002ed60
				int stop = 0;
2002ed2c:	f8130044 	swi	r0, r19, 68
				if (stop != 0) {
2002ed30:	e8730044 	lwi	r3, r19, 68
2002ed34:	bc030014 	beqi	r3, 20		// 2002ed48
					_FSM_state = my_state_getw;
2002ed38:	30600002 	addik	r3, r0, 2
2002ed3c:	b0002006 	imm	8198
2002ed40:	f86020f8 	swi	r3, r0, 8440	// 200620f8 <_FSM_state>
					goto finished;
2002ed44:	b8000598 	bri	1432		// 2002f2dc
				}
				skip();
2002ed48:	b9f4ee64 	brlid	r15, -4508	// 2002dbac <skip>
2002ed4c:	80000000 	or	r0, r0, r0
				i++;
2002ed50:	e873001c 	lwi	r3, r19, 28
2002ed54:	30630001 	addik	r3, r3, 1
2002ed58:	f873001c 	swi	r3, r19, 28
				goto l_geth;
2002ed5c:	b800ff40 	bri	-192		// 2002ec9c
			} else {
				_FSM_state = my_state_getw;
2002ed60:	30600002 	addik	r3, r0, 2
2002ed64:	b0002006 	imm	8198
2002ed68:	f86020f8 	swi	r3, r0, 8440	// 200620f8 <_FSM_state>
				goto finished;
2002ed6c:	b8000570 	bri	1392		// 2002f2dc
		case my_state_geth:
			goto l_geth;
		case my_state_getw:
			goto l_getw;
		case my_state_inter:
			goto l_inter;
2002ed70:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_getw;
				goto finished;
			}
		l_inter:
			if (numTokens_QFS_DC - index_QFS_DC >= 1 && isSchedulable_getdc_inter()) {
2002ed74:	b0002006 	imm	8198
2002ed78:	e88020ac 	lwi	r4, r0, 8364	// 200620ac <numTokens_QFS_DC>
2002ed7c:	b0002006 	imm	8198
2002ed80:	e86020a8 	lwi	r3, r0, 8360	// 200620a8 <index_QFS_DC>
2002ed84:	88641800 	xor	r3, r4, r3
2002ed88:	bc030044 	beqi	r3, 68		// 2002edcc
2002ed8c:	b9f4f938 	brlid	r15, -1736	// 2002e6c4 <isSchedulable_getdc_inter>
2002ed90:	80000000 	or	r0, r0, r0
2002ed94:	bc030038 	beqi	r3, 56		// 2002edcc
				int stop = 0;
2002ed98:	f8130040 	swi	r0, r19, 64
				if (stop != 0) {
2002ed9c:	e8730040 	lwi	r3, r19, 64
2002eda0:	bc030014 	beqi	r3, 20		// 2002edb4
					_FSM_state = my_state_inter;
2002eda4:	30600003 	addik	r3, r0, 3
2002eda8:	b0002006 	imm	8198
2002edac:	f86020f8 	swi	r3, r0, 8440	// 200620f8 <_FSM_state>
					goto finished;
2002edb0:	b800052c 	bri	1324		// 2002f2dc
				}
				getdc_inter();
2002edb4:	b9f4f93c 	brlid	r15, -1732	// 2002e6f0 <getdc_inter>
2002edb8:	80000000 	or	r0, r0, r0
				i++;
2002edbc:	e873001c 	lwi	r3, r19, 28
2002edc0:	30630001 	addik	r3, r3, 1
2002edc4:	f873001c 	swi	r3, r19, 28
				goto l_sat;
2002edc8:	b8000498 	bri	1176		// 2002f260
			} else {
				_FSM_state = my_state_inter;
2002edcc:	30600003 	addik	r3, r0, 3
2002edd0:	b0002006 	imm	8198
2002edd4:	f86020f8 	swi	r3, r0, 8440	// 200620f8 <_FSM_state>
				goto finished;
2002edd8:	b8000504 	bri	1284		// 2002f2dc
		case my_state_getw:
			goto l_getw;
		case my_state_inter:
			goto l_inter;
		case my_state_intra:
			goto l_intra;
2002eddc:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_inter;
				goto finished;
			}
		l_intra:
			if (numTokens_QFS_DC - index_QFS_DC >= 1 && isSchedulable_getdc_intra()) {
2002ede0:	b0002006 	imm	8198
2002ede4:	e88020ac 	lwi	r4, r0, 8364	// 200620ac <numTokens_QFS_DC>
2002ede8:	b0002006 	imm	8198
2002edec:	e86020a8 	lwi	r3, r0, 8360	// 200620a8 <index_QFS_DC>
2002edf0:	88641800 	xor	r3, r4, r3
2002edf4:	bc030044 	beqi	r3, 68		// 2002ee38
2002edf8:	b9f4fa68 	brlid	r15, -1432	// 2002e860 <isSchedulable_getdc_intra>
2002edfc:	80000000 	or	r0, r0, r0
2002ee00:	bc030038 	beqi	r3, 56		// 2002ee38
				int stop = 0;
2002ee04:	f813003c 	swi	r0, r19, 60
				if (stop != 0) {
2002ee08:	e873003c 	lwi	r3, r19, 60
2002ee0c:	bc030014 	beqi	r3, 20		// 2002ee20
					_FSM_state = my_state_intra;
2002ee10:	30600004 	addik	r3, r0, 4
2002ee14:	b0002006 	imm	8198
2002ee18:	f86020f8 	swi	r3, r0, 8440	// 200620f8 <_FSM_state>
					goto finished;
2002ee1c:	b80004c0 	bri	1216		// 2002f2dc
				}
				getdc_intra();
2002ee20:	b9f4fa6c 	brlid	r15, -1428	// 2002e88c <getdc_intra>
2002ee24:	80000000 	or	r0, r0, r0
				i++;
2002ee28:	e873001c 	lwi	r3, r19, 28
2002ee2c:	30630001 	addik	r3, r3, 1
2002ee30:	f873001c 	swi	r3, r19, 28
				goto l_sat;
2002ee34:	b800042c 	bri	1068		// 2002f260
			} else {
				_FSM_state = my_state_intra;
2002ee38:	30600004 	addik	r3, r0, 4
2002ee3c:	b0002006 	imm	8198
2002ee40:	f86020f8 	swi	r3, r0, 8440	// 200620f8 <_FSM_state>
				goto finished;
2002ee44:	b8000498 	bri	1176		// 2002f2dc
		case my_state_inter:
			goto l_inter;
		case my_state_intra:
			goto l_intra;
		case my_state_read:
			goto l_read;
2002ee48:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_intra;
				goto finished;
			}
		l_read:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_start()) {
2002ee4c:	b0002006 	imm	8198
2002ee50:	e880208c 	lwi	r4, r0, 8332	// 2006208c <numTokens_BTYPE>
2002ee54:	b0002006 	imm	8198
2002ee58:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002ee5c:	88641800 	xor	r3, r4, r3
2002ee60:	bc030070 	beqi	r3, 112		// 2002eed0
2002ee64:	b9f4ebc8 	brlid	r15, -5176	// 2002da2c <isSchedulable_start>
2002ee68:	80000000 	or	r0, r0, r0
2002ee6c:	bc030064 	beqi	r3, 100		// 2002eed0
				int stop = 0;
2002ee70:	f8130020 	swi	r0, r19, 32
				if (1 > SIZE_AC_PRED_DIR - index_AC_PRED_DIR + decoder_texture_DCReconstruction_invpred_AC_PRED_DIR->read_inds[0]) {
2002ee74:	b0002004 	imm	8196
2002ee78:	e8607ba0 	lwi	r3, r0, 31648	// 20047ba0 <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>
2002ee7c:	e863000c 	lwi	r3, r3, 12
2002ee80:	e8830000 	lwi	r4, r3, 0
2002ee84:	b0002006 	imm	8198
2002ee88:	e86020c8 	lwi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
2002ee8c:	14632000 	rsubk	r3, r3, r4
2002ee90:	a863fe00 	xori	r3, r3, -512
2002ee94:	bc23000c 	bnei	r3, 12		// 2002eea0
					stop = 1;
2002ee98:	30600001 	addik	r3, r0, 1
2002ee9c:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
2002eea0:	e8730020 	lwi	r3, r19, 32
2002eea4:	bc030014 	beqi	r3, 20		// 2002eeb8
					_FSM_state = my_state_read;
2002eea8:	30600005 	addik	r3, r0, 5
2002eeac:	b0002006 	imm	8198
2002eeb0:	f86020f8 	swi	r3, r0, 8440	// 200620f8 <_FSM_state>
					goto finished;
2002eeb4:	b8000428 	bri	1064		// 2002f2dc
				}
				start();
2002eeb8:	b9f4ebe8 	brlid	r15, -5144	// 2002daa0 <start>
2002eebc:	80000000 	or	r0, r0, r0
				i++;
2002eec0:	e873001c 	lwi	r3, r19, 28
2002eec4:	30630001 	addik	r3, r3, 1
2002eec8:	f873001c 	swi	r3, r19, 28
				goto l_getw;
2002eecc:	b800fe3c 	bri	-452		// 2002ed08
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && numTokens_QP - index_QP >= 1 && isSchedulable_read_inter_ac()) {
2002eed0:	b0002006 	imm	8198
2002eed4:	e880208c 	lwi	r4, r0, 8332	// 2006208c <numTokens_BTYPE>
2002eed8:	b0002006 	imm	8198
2002eedc:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002eee0:	88641800 	xor	r3, r4, r3
2002eee4:	bc030138 	beqi	r3, 312		// 2002f01c
2002eee8:	b0002006 	imm	8198
2002eeec:	e88020b4 	lwi	r4, r0, 8372	// 200620b4 <numTokens_QP>
2002eef0:	b0002006 	imm	8198
2002eef4:	e86020b0 	lwi	r3, r0, 8368	// 200620b0 <index_QP>
2002eef8:	88641800 	xor	r3, r4, r3
2002eefc:	bc030120 	beqi	r3, 288		// 2002f01c
2002ef00:	b9f4ed28 	brlid	r15, -4824	// 2002dc28 <isSchedulable_read_inter_ac>
2002ef04:	80000000 	or	r0, r0, r0
2002ef08:	bc030114 	beqi	r3, 276		// 2002f01c
				int stop = 0;
2002ef0c:	f8130024 	swi	r0, r19, 36
				if (1 > SIZE_AC_PRED_DIR - index_AC_PRED_DIR + decoder_texture_DCReconstruction_invpred_AC_PRED_DIR->read_inds[0]) {
2002ef10:	b0002004 	imm	8196
2002ef14:	e8607ba0 	lwi	r3, r0, 31648	// 20047ba0 <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>
2002ef18:	e863000c 	lwi	r3, r3, 12
2002ef1c:	e8830000 	lwi	r4, r3, 0
2002ef20:	b0002006 	imm	8198
2002ef24:	e86020c8 	lwi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
2002ef28:	14632000 	rsubk	r3, r3, r4
2002ef2c:	a863fe00 	xori	r3, r3, -512
2002ef30:	bc23000c 	bnei	r3, 12		// 2002ef3c
					stop = 1;
2002ef34:	30600001 	addik	r3, r0, 1
2002ef38:	f8730024 	swi	r3, r19, 36
				}
				if (1 > SIZE_MODE - index_MODE + decoder_texture_DCReconstruction_invpred_MODE->read_inds[0]) {
2002ef3c:	b0002004 	imm	8196
2002ef40:	e8607b90 	lwi	r3, r0, 31632	// 20047b90 <decoder_texture_DCReconstruction_invpred_MODE>
2002ef44:	e863000c 	lwi	r3, r3, 12
2002ef48:	e8830000 	lwi	r4, r3, 0
2002ef4c:	b0002006 	imm	8198
2002ef50:	e86020d0 	lwi	r3, r0, 8400	// 200620d0 <index_MODE>
2002ef54:	14632000 	rsubk	r3, r3, r4
2002ef58:	a863fe00 	xori	r3, r3, -512
2002ef5c:	bc23000c 	bnei	r3, 12		// 2002ef68
					stop = 1;
2002ef60:	30600001 	addik	r3, r0, 1
2002ef64:	f8730024 	swi	r3, r19, 36
				}
				if (1 > SIZE_PTR - index_PTR + decoder_texture_DCReconstruction_invpred_PTR->read_inds[0]) {
2002ef68:	b0002004 	imm	8196
2002ef6c:	e8607b80 	lwi	r3, r0, 31616	// 20047b80 <decoder_texture_DCReconstruction_invpred_PTR>
2002ef70:	e863000c 	lwi	r3, r3, 12
2002ef74:	e8830000 	lwi	r4, r3, 0
2002ef78:	b0002006 	imm	8198
2002ef7c:	e86020c0 	lwi	r3, r0, 8384	// 200620c0 <index_PTR>
2002ef80:	14632000 	rsubk	r3, r3, r4
2002ef84:	a863fe00 	xori	r3, r3, -512
2002ef88:	bc23000c 	bnei	r3, 12		// 2002ef94
					stop = 1;
2002ef8c:	30600001 	addik	r3, r0, 1
2002ef90:	f8730024 	swi	r3, r19, 36
				}
				if (1 > SIZE_SIGNED - index_SIGNED + decoder_texture_DCReconstruction_invpred_SIGNED->read_inds[0]) {
2002ef94:	b0002004 	imm	8196
2002ef98:	e8607b98 	lwi	r3, r0, 31640	// 20047b98 <decoder_texture_DCReconstruction_invpred_SIGNED>
2002ef9c:	e863000c 	lwi	r3, r3, 12
2002efa0:	e8830000 	lwi	r4, r3, 0
2002efa4:	b0002006 	imm	8198
2002efa8:	e86020d8 	lwi	r3, r0, 8408	// 200620d8 <index_SIGNED>
2002efac:	14632000 	rsubk	r3, r3, r4
2002efb0:	a863fe00 	xori	r3, r3, -512
2002efb4:	bc23000c 	bnei	r3, 12		// 2002efc0
					stop = 1;
2002efb8:	30600001 	addik	r3, r0, 1
2002efbc:	f8730024 	swi	r3, r19, 36
				}
				if (1 > SIZE_QUANT - index_QUANT + decoder_texture_DCReconstruction_invpred_QUANT->read_inds[0]) {
2002efc0:	b0002004 	imm	8196
2002efc4:	e8607ba8 	lwi	r3, r0, 31656	// 20047ba8 <decoder_texture_DCReconstruction_invpred_QUANT>
2002efc8:	e863000c 	lwi	r3, r3, 12
2002efcc:	e8830000 	lwi	r4, r3, 0
2002efd0:	b0002006 	imm	8198
2002efd4:	e86020e0 	lwi	r3, r0, 8416	// 200620e0 <index_QUANT>
2002efd8:	14632000 	rsubk	r3, r3, r4
2002efdc:	a863fe00 	xori	r3, r3, -512
2002efe0:	bc23000c 	bnei	r3, 12		// 2002efec
					stop = 1;
2002efe4:	30600001 	addik	r3, r0, 1
2002efe8:	f8730024 	swi	r3, r19, 36
				}
				if (stop != 0) {
2002efec:	e8730024 	lwi	r3, r19, 36
2002eff0:	bc030014 	beqi	r3, 20		// 2002f004
					_FSM_state = my_state_read;
2002eff4:	30600005 	addik	r3, r0, 5
2002eff8:	b0002006 	imm	8198
2002effc:	f86020f8 	swi	r3, r0, 8440	// 200620f8 <_FSM_state>
					goto finished;
2002f000:	b80002dc 	bri	732		// 2002f2dc
				}
				read_inter_ac();
2002f004:	b9f4ecb8 	brlid	r15, -4936	// 2002dcbc <read_inter_ac>
2002f008:	80000000 	or	r0, r0, r0
				i++;
2002f00c:	e873001c 	lwi	r3, r19, 28
2002f010:	30630001 	addik	r3, r3, 1
2002f014:	f873001c 	swi	r3, r19, 28
				goto l_inter;
2002f018:	b800fd5c 	bri	-676		// 2002ed74
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && numTokens_QP - index_QP >= 1 && isSchedulable_read_other()) {
2002f01c:	b0002006 	imm	8198
2002f020:	e880208c 	lwi	r4, r0, 8332	// 2006208c <numTokens_BTYPE>
2002f024:	b0002006 	imm	8198
2002f028:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002f02c:	88641800 	xor	r3, r4, r3
2002f030:	bc030088 	beqi	r3, 136		// 2002f0b8
2002f034:	b0002006 	imm	8198
2002f038:	e88020b4 	lwi	r4, r0, 8372	// 200620b4 <numTokens_QP>
2002f03c:	b0002006 	imm	8198
2002f040:	e86020b0 	lwi	r3, r0, 8368	// 200620b0 <index_QP>
2002f044:	88641800 	xor	r3, r4, r3
2002f048:	bc030070 	beqi	r3, 112		// 2002f0b8
2002f04c:	b9f4ef18 	brlid	r15, -4328	// 2002df64 <isSchedulable_read_other>
2002f050:	80000000 	or	r0, r0, r0
2002f054:	bc030064 	beqi	r3, 100		// 2002f0b8
				int stop = 0;
2002f058:	f8130028 	swi	r0, r19, 40
				if (1 > SIZE_AC_PRED_DIR - index_AC_PRED_DIR + decoder_texture_DCReconstruction_invpred_AC_PRED_DIR->read_inds[0]) {
2002f05c:	b0002004 	imm	8196
2002f060:	e8607ba0 	lwi	r3, r0, 31648	// 20047ba0 <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>
2002f064:	e863000c 	lwi	r3, r3, 12
2002f068:	e8830000 	lwi	r4, r3, 0
2002f06c:	b0002006 	imm	8198
2002f070:	e86020c8 	lwi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
2002f074:	14632000 	rsubk	r3, r3, r4
2002f078:	a863fe00 	xori	r3, r3, -512
2002f07c:	bc23000c 	bnei	r3, 12		// 2002f088
					stop = 1;
2002f080:	30600001 	addik	r3, r0, 1
2002f084:	f8730028 	swi	r3, r19, 40
				}
				if (stop != 0) {
2002f088:	e8730028 	lwi	r3, r19, 40
2002f08c:	bc030014 	beqi	r3, 20		// 2002f0a0
					_FSM_state = my_state_read;
2002f090:	30600005 	addik	r3, r0, 5
2002f094:	b0002006 	imm	8198
2002f098:	f86020f8 	swi	r3, r0, 8440	// 200620f8 <_FSM_state>
					goto finished;
2002f09c:	b8000240 	bri	576		// 2002f2dc
				}
				read_other();
2002f0a0:	b9f4ef58 	brlid	r15, -4264	// 2002dff8 <read_other>
2002f0a4:	80000000 	or	r0, r0, r0
				i++;
2002f0a8:	e873001c 	lwi	r3, r19, 28
2002f0ac:	30630001 	addik	r3, r3, 1
2002f0b0:	f873001c 	swi	r3, r19, 28
				goto l_advance;
2002f0b4:	b800fb9c 	bri	-1124		// 2002ec50
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && numTokens_QP - index_QP >= 1 && numTokens_A - index_A >= 1 && numTokens_B - index_B >= 1 && numTokens_C - index_C >= 1 && isSchedulable_read_intra()) {
2002f0b8:	b0002006 	imm	8198
2002f0bc:	e880208c 	lwi	r4, r0, 8332	// 2006208c <numTokens_BTYPE>
2002f0c0:	b0002006 	imm	8198
2002f0c4:	e8602088 	lwi	r3, r0, 8328	// 20062088 <index_BTYPE>
2002f0c8:	88641800 	xor	r3, r4, r3
2002f0cc:	bc030180 	beqi	r3, 384		// 2002f24c
2002f0d0:	b0002006 	imm	8198
2002f0d4:	e88020b4 	lwi	r4, r0, 8372	// 200620b4 <numTokens_QP>
2002f0d8:	b0002006 	imm	8198
2002f0dc:	e86020b0 	lwi	r3, r0, 8368	// 200620b0 <index_QP>
2002f0e0:	88641800 	xor	r3, r4, r3
2002f0e4:	bc030168 	beqi	r3, 360		// 2002f24c
2002f0e8:	b0002006 	imm	8198
2002f0ec:	e8802094 	lwi	r4, r0, 8340	// 20062094 <numTokens_A>
2002f0f0:	b0002006 	imm	8198
2002f0f4:	e8602090 	lwi	r3, r0, 8336	// 20062090 <index_A>
2002f0f8:	88641800 	xor	r3, r4, r3
2002f0fc:	bc030150 	beqi	r3, 336		// 2002f24c
2002f100:	b0002006 	imm	8198
2002f104:	e880209c 	lwi	r4, r0, 8348	// 2006209c <numTokens_B>
2002f108:	b0002006 	imm	8198
2002f10c:	e8602098 	lwi	r3, r0, 8344	// 20062098 <index_B>
2002f110:	88641800 	xor	r3, r4, r3
2002f114:	bc030138 	beqi	r3, 312		// 2002f24c
2002f118:	b0002006 	imm	8198
2002f11c:	e88020a4 	lwi	r4, r0, 8356	// 200620a4 <numTokens_C>
2002f120:	b0002006 	imm	8198
2002f124:	e86020a0 	lwi	r3, r0, 8352	// 200620a0 <index_C>
2002f128:	88641800 	xor	r3, r4, r3
2002f12c:	bc030120 	beqi	r3, 288		// 2002f24c
2002f130:	b9f4eff0 	brlid	r15, -4112	// 2002e120 <isSchedulable_read_intra>
2002f134:	80000000 	or	r0, r0, r0
2002f138:	bc030114 	beqi	r3, 276		// 2002f24c
				int stop = 0;
2002f13c:	f813002c 	swi	r0, r19, 44
				if (1 > SIZE_PTR - index_PTR + decoder_texture_DCReconstruction_invpred_PTR->read_inds[0]) {
2002f140:	b0002004 	imm	8196
2002f144:	e8607b80 	lwi	r3, r0, 31616	// 20047b80 <decoder_texture_DCReconstruction_invpred_PTR>
2002f148:	e863000c 	lwi	r3, r3, 12
2002f14c:	e8830000 	lwi	r4, r3, 0
2002f150:	b0002006 	imm	8198
2002f154:	e86020c0 	lwi	r3, r0, 8384	// 200620c0 <index_PTR>
2002f158:	14632000 	rsubk	r3, r3, r4
2002f15c:	a863fe00 	xori	r3, r3, -512
2002f160:	bc23000c 	bnei	r3, 12		// 2002f16c
					stop = 1;
2002f164:	30600001 	addik	r3, r0, 1
2002f168:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_AC_PRED_DIR - index_AC_PRED_DIR + decoder_texture_DCReconstruction_invpred_AC_PRED_DIR->read_inds[0]) {
2002f16c:	b0002004 	imm	8196
2002f170:	e8607ba0 	lwi	r3, r0, 31648	// 20047ba0 <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>
2002f174:	e863000c 	lwi	r3, r3, 12
2002f178:	e8830000 	lwi	r4, r3, 0
2002f17c:	b0002006 	imm	8198
2002f180:	e86020c8 	lwi	r3, r0, 8392	// 200620c8 <index_AC_PRED_DIR>
2002f184:	14632000 	rsubk	r3, r3, r4
2002f188:	a863fe00 	xori	r3, r3, -512
2002f18c:	bc23000c 	bnei	r3, 12		// 2002f198
					stop = 1;
2002f190:	30600001 	addik	r3, r0, 1
2002f194:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_MODE - index_MODE + decoder_texture_DCReconstruction_invpred_MODE->read_inds[0]) {
2002f198:	b0002004 	imm	8196
2002f19c:	e8607b90 	lwi	r3, r0, 31632	// 20047b90 <decoder_texture_DCReconstruction_invpred_MODE>
2002f1a0:	e863000c 	lwi	r3, r3, 12
2002f1a4:	e8830000 	lwi	r4, r3, 0
2002f1a8:	b0002006 	imm	8198
2002f1ac:	e86020d0 	lwi	r3, r0, 8400	// 200620d0 <index_MODE>
2002f1b0:	14632000 	rsubk	r3, r3, r4
2002f1b4:	a863fe00 	xori	r3, r3, -512
2002f1b8:	bc23000c 	bnei	r3, 12		// 2002f1c4
					stop = 1;
2002f1bc:	30600001 	addik	r3, r0, 1
2002f1c0:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_SIGNED - index_SIGNED + decoder_texture_DCReconstruction_invpred_SIGNED->read_inds[0]) {
2002f1c4:	b0002004 	imm	8196
2002f1c8:	e8607b98 	lwi	r3, r0, 31640	// 20047b98 <decoder_texture_DCReconstruction_invpred_SIGNED>
2002f1cc:	e863000c 	lwi	r3, r3, 12
2002f1d0:	e8830000 	lwi	r4, r3, 0
2002f1d4:	b0002006 	imm	8198
2002f1d8:	e86020d8 	lwi	r3, r0, 8408	// 200620d8 <index_SIGNED>
2002f1dc:	14632000 	rsubk	r3, r3, r4
2002f1e0:	a863fe00 	xori	r3, r3, -512
2002f1e4:	bc23000c 	bnei	r3, 12		// 2002f1f0
					stop = 1;
2002f1e8:	30600001 	addik	r3, r0, 1
2002f1ec:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_QUANT - index_QUANT + decoder_texture_DCReconstruction_invpred_QUANT->read_inds[0]) {
2002f1f0:	b0002004 	imm	8196
2002f1f4:	e8607ba8 	lwi	r3, r0, 31656	// 20047ba8 <decoder_texture_DCReconstruction_invpred_QUANT>
2002f1f8:	e863000c 	lwi	r3, r3, 12
2002f1fc:	e8830000 	lwi	r4, r3, 0
2002f200:	b0002006 	imm	8198
2002f204:	e86020e0 	lwi	r3, r0, 8416	// 200620e0 <index_QUANT>
2002f208:	14632000 	rsubk	r3, r3, r4
2002f20c:	a863fe00 	xori	r3, r3, -512
2002f210:	bc23000c 	bnei	r3, 12		// 2002f21c
					stop = 1;
2002f214:	30600001 	addik	r3, r0, 1
2002f218:	f873002c 	swi	r3, r19, 44
				}
				if (stop != 0) {
2002f21c:	e873002c 	lwi	r3, r19, 44
2002f220:	bc030014 	beqi	r3, 20		// 2002f234
					_FSM_state = my_state_read;
2002f224:	30600005 	addik	r3, r0, 5
2002f228:	b0002006 	imm	8198
2002f22c:	f86020f8 	swi	r3, r0, 8440	// 200620f8 <_FSM_state>
					goto finished;
2002f230:	b80000ac 	bri	172		// 2002f2dc
				}
				read_intra();
2002f234:	b9f4ef18 	brlid	r15, -4328	// 2002e14c <read_intra>
2002f238:	80000000 	or	r0, r0, r0
				i++;
2002f23c:	e873001c 	lwi	r3, r19, 28
2002f240:	30630001 	addik	r3, r3, 1
2002f244:	f873001c 	swi	r3, r19, 28
				goto l_intra;
2002f248:	b800fb98 	bri	-1128		// 2002ede0
			} else {
				_FSM_state = my_state_read;
2002f24c:	30600005 	addik	r3, r0, 5
2002f250:	b0002006 	imm	8198
2002f254:	f86020f8 	swi	r3, r0, 8440	// 200620f8 <_FSM_state>
				goto finished;
2002f258:	b8000084 	bri	132		// 2002f2dc
		case my_state_intra:
			goto l_intra;
		case my_state_read:
			goto l_read;
		case my_state_sat:
			goto l_sat;
2002f25c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read;
				goto finished;
			}
		l_sat:
			if (isSchedulable_sat()) {
2002f260:	b9f4f704 	brlid	r15, -2300	// 2002e964 <isSchedulable_sat>
2002f264:	80000000 	or	r0, r0, r0
2002f268:	bc030064 	beqi	r3, 100		// 2002f2cc
				int stop = 0;
2002f26c:	f8130030 	swi	r0, r19, 48
				if (1 > SIZE_QF_DC - index_QF_DC + decoder_texture_DCReconstruction_invpred_QF_DC->read_inds[0]) {
2002f270:	b0002004 	imm	8196
2002f274:	e8607b88 	lwi	r3, r0, 31624	// 20047b88 <decoder_texture_DCReconstruction_invpred_QF_DC>
2002f278:	e863000c 	lwi	r3, r3, 12
2002f27c:	e8830000 	lwi	r4, r3, 0
2002f280:	b0002006 	imm	8198
2002f284:	e86020b8 	lwi	r3, r0, 8376	// 200620b8 <index_QF_DC>
2002f288:	14632000 	rsubk	r3, r3, r4
2002f28c:	a863fe00 	xori	r3, r3, -512
2002f290:	bc23000c 	bnei	r3, 12		// 2002f29c
					stop = 1;
2002f294:	30600001 	addik	r3, r0, 1
2002f298:	f8730030 	swi	r3, r19, 48
				}
				if (stop != 0) {
2002f29c:	e8730030 	lwi	r3, r19, 48
2002f2a0:	bc030014 	beqi	r3, 20		// 2002f2b4
					_FSM_state = my_state_sat;
2002f2a4:	30600006 	addik	r3, r0, 6
2002f2a8:	b0002006 	imm	8198
2002f2ac:	f86020f8 	swi	r3, r0, 8440	// 200620f8 <_FSM_state>
					goto finished;
2002f2b0:	b800002c 	bri	44		// 2002f2dc
				}
				sat();
2002f2b4:	b9f4f6dc 	brlid	r15, -2340	// 2002e990 <sat>
2002f2b8:	80000000 	or	r0, r0, r0
				i++;
2002f2bc:	e873001c 	lwi	r3, r19, 28
2002f2c0:	30630001 	addik	r3, r3, 1
2002f2c4:	f873001c 	swi	r3, r19, 28
				goto l_advance;
2002f2c8:	b800f988 	bri	-1656		// 2002ec50
			} else {
				_FSM_state = my_state_sat;
2002f2cc:	30600006 	addik	r3, r0, 6
2002f2d0:	b0002006 	imm	8198
2002f2d4:	f86020f8 	swi	r3, r0, 8440	// 200620f8 <_FSM_state>
				goto finished;
2002f2d8:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_BTYPE();
2002f2dc:	b9f4dcc4 	brlid	r15, -9020	// 2002cfa0 <read_end_BTYPE>
2002f2e0:	80000000 	or	r0, r0, r0
		read_end_A();
2002f2e4:	b9f4dd68 	brlid	r15, -8856	// 2002d04c <read_end_A>
2002f2e8:	80000000 	or	r0, r0, r0
		read_end_B();
2002f2ec:	b9f4de08 	brlid	r15, -8696	// 2002d0f4 <read_end_B>
2002f2f0:	80000000 	or	r0, r0, r0
		read_end_C();
2002f2f4:	b9f4dea8 	brlid	r15, -8536	// 2002d19c <read_end_C>
2002f2f8:	80000000 	or	r0, r0, r0
		read_end_QFS_DC();
2002f2fc:	b9f4df48 	brlid	r15, -8376	// 2002d244 <read_end_QFS_DC>
2002f300:	80000000 	or	r0, r0, r0
		read_end_QP();
2002f304:	b9f4dfe8 	brlid	r15, -8216	// 2002d2ec <read_end_QP>
2002f308:	80000000 	or	r0, r0, r0
		
		write_end_QF_DC();
2002f30c:	b9f4e088 	brlid	r15, -8056	// 2002d394 <write_end_QF_DC>
2002f310:	80000000 	or	r0, r0, r0
		write_end_PTR();
2002f314:	b9f4e128 	brlid	r15, -7896	// 2002d43c <write_end_PTR>
2002f318:	80000000 	or	r0, r0, r0
		write_end_AC_PRED_DIR();
2002f31c:	b9f4e1c8 	brlid	r15, -7736	// 2002d4e4 <write_end_AC_PRED_DIR>
2002f320:	80000000 	or	r0, r0, r0
		write_end_MODE();
2002f324:	b9f4e268 	brlid	r15, -7576	// 2002d58c <write_end_MODE>
2002f328:	80000000 	or	r0, r0, r0
		write_end_SIGNED();
2002f32c:	b9f4e308 	brlid	r15, -7416	// 2002d634 <write_end_SIGNED>
2002f330:	80000000 	or	r0, r0, r0
		write_end_QUANT();
2002f334:	b9f4e3a8 	brlid	r15, -7256	// 2002d6dc <write_end_QUANT>
2002f338:	80000000 	or	r0, r0, r0
		
		
		return i;
2002f33c:	e873001c 	lwi	r3, r19, 28
	}
2002f340:	e9e10000 	lwi	r15, r1, 0
2002f344:	10330000 	addk	r1, r19, r0
2002f348:	ea610048 	lwi	r19, r1, 72
2002f34c:	3021004c 	addik	r1, r1, 76
2002f350:	b60f0008 	rtsd	r15, 8
2002f354:	80000000 	or	r0, r0, r0

2002f358 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002f358:	3021fff8 	addik	r1, r1, -8
2002f35c:	fa610004 	swi	r19, r1, 4
2002f360:	12610000 	addk	r19, r1, r0
2002f364:	f8b3000c 	swi	r5, r19, 12
2002f368:	f8d30010 	swi	r6, r19, 16
2002f36c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002f370:	e873000c 	lwi	r3, r19, 12
2002f374:	e8630010 	lwi	r3, r3, 16
2002f378:	e8830000 	lwi	r4, r3, 0
2002f37c:	e873000c 	lwi	r3, r19, 12
2002f380:	e8a3000c 	lwi	r5, r3, 12
2002f384:	e8730010 	lwi	r3, r19, 16
2002f388:	64630402 	bslli	r3, r3, 2
2002f38c:	10651800 	addk	r3, r5, r3
2002f390:	e8630000 	lwi	r3, r3, 0
2002f394:	14a32000 	rsubk	r5, r3, r4
2002f398:	30600001 	addik	r3, r0, 1
2002f39c:	e8930014 	lwi	r4, r19, 20
2002f3a0:	16442803 	cmpu	r18, r4, r5
2002f3a4:	bcb20008 	bgei	r18, 8		// 2002f3ac
2002f3a8:	10600000 	addk	r3, r0, r0
2002f3ac:	a46300ff 	andi	r3, r3, 255
}
2002f3b0:	10330000 	addk	r1, r19, r0
2002f3b4:	ea610004 	lwi	r19, r1, 4
2002f3b8:	30210008 	addik	r1, r1, 8
2002f3bc:	b60f0008 	rtsd	r15, 8
2002f3c0:	80000000 	or	r0, r0, r0

2002f3c4 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002f3c4:	3021fff8 	addik	r1, r1, -8
2002f3c8:	fa610004 	swi	r19, r1, 4
2002f3cc:	12610000 	addk	r19, r1, r0
2002f3d0:	f8b3000c 	swi	r5, r19, 12
2002f3d4:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002f3d8:	e873000c 	lwi	r3, r19, 12
2002f3dc:	e8630010 	lwi	r3, r3, 16
2002f3e0:	e8830000 	lwi	r4, r3, 0
2002f3e4:	e873000c 	lwi	r3, r19, 12
2002f3e8:	e8a3000c 	lwi	r5, r3, 12
2002f3ec:	e8730010 	lwi	r3, r19, 16
2002f3f0:	64630402 	bslli	r3, r3, 2
2002f3f4:	10651800 	addk	r3, r5, r3
2002f3f8:	e8630000 	lwi	r3, r3, 0
2002f3fc:	14632000 	rsubk	r3, r3, r4
}
2002f400:	10330000 	addk	r1, r19, r0
2002f404:	ea610004 	lwi	r19, r1, 4
2002f408:	30210008 	addik	r1, r1, 8
2002f40c:	b60f0008 	rtsd	r15, 8
2002f410:	80000000 	or	r0, r0, r0

2002f414 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002f414:	3021fff4 	addik	r1, r1, -12
2002f418:	fa610008 	swi	r19, r1, 8
2002f41c:	12610000 	addk	r19, r1, r0
2002f420:	f8b30010 	swi	r5, r19, 16
2002f424:	f8d30014 	swi	r6, r19, 20
2002f428:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002f42c:	f8130004 	swi	r0, r19, 4
2002f430:	b800005c 	bri	92		// 2002f48c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002f434:	e8730010 	lwi	r3, r19, 16
2002f438:	e8830000 	lwi	r4, r3, 0
2002f43c:	e8730010 	lwi	r3, r19, 16
2002f440:	e8a3000c 	lwi	r5, r3, 12
2002f444:	e8730004 	lwi	r3, r19, 4
2002f448:	64630402 	bslli	r3, r3, 2
2002f44c:	10651800 	addk	r3, r5, r3
2002f450:	e8a30000 	lwi	r5, r3, 0
2002f454:	e8730010 	lwi	r3, r19, 16
2002f458:	e8630010 	lwi	r3, r3, 16
2002f45c:	e8630000 	lwi	r3, r3, 0
2002f460:	14632800 	rsubk	r3, r3, r5
2002f464:	10641800 	addk	r3, r4, r3
2002f468:	30830001 	addik	r4, r3, 1
2002f46c:	e8730018 	lwi	r3, r19, 24
2002f470:	16441803 	cmpu	r18, r4, r3
2002f474:	bc52000c 	blti	r18, 12		// 2002f480
            return 0;
2002f478:	10600000 	addk	r3, r0, r0
2002f47c:	b8000024 	bri	36		// 2002f4a0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002f480:	e8730004 	lwi	r3, r19, 4
2002f484:	30630001 	addik	r3, r3, 1
2002f488:	f8730004 	swi	r3, r19, 4
2002f48c:	e8930004 	lwi	r4, r19, 4
2002f490:	e8730014 	lwi	r3, r19, 20
2002f494:	16432003 	cmpu	r18, r3, r4
2002f498:	bc52ff9c 	blti	r18, -100		// 2002f434
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002f49c:	30600001 	addik	r3, r0, 1
}
2002f4a0:	10330000 	addk	r1, r19, r0
2002f4a4:	ea610008 	lwi	r19, r1, 8
2002f4a8:	3021000c 	addik	r1, r1, 12
2002f4ac:	b60f0008 	rtsd	r15, 8
2002f4b0:	80000000 	or	r0, r0, r0

2002f4b4 <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002f4b4:	3021ffec 	addik	r1, r1, -20
2002f4b8:	fa610010 	swi	r19, r1, 16
2002f4bc:	12610000 	addk	r19, r1, r0
2002f4c0:	f8b30018 	swi	r5, r19, 24
2002f4c4:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002f4c8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002f4cc:	f8130004 	swi	r0, r19, 4
2002f4d0:	b8000054 	bri	84		// 2002f524
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2002f4d4:	e8730018 	lwi	r3, r19, 24
2002f4d8:	e8630010 	lwi	r3, r3, 16
2002f4dc:	e8830000 	lwi	r4, r3, 0
2002f4e0:	e8730018 	lwi	r3, r19, 24
2002f4e4:	e8a3000c 	lwi	r5, r3, 12
2002f4e8:	e8730004 	lwi	r3, r19, 4
2002f4ec:	64630402 	bslli	r3, r3, 2
2002f4f0:	10651800 	addk	r3, r5, r3
2002f4f4:	e8630000 	lwi	r3, r3, 0
2002f4f8:	14632000 	rsubk	r3, r3, r4
2002f4fc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002f500:	e8930008 	lwi	r4, r19, 8
2002f504:	e873000c 	lwi	r3, r19, 12
2002f508:	16441803 	cmpu	r18, r4, r3
2002f50c:	bcb20008 	bgei	r18, 8		// 2002f514
2002f510:	10640000 	addk	r3, r4, r0
2002f514:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002f518:	e8730004 	lwi	r3, r19, 4
2002f51c:	30630001 	addik	r3, r3, 1
2002f520:	f8730004 	swi	r3, r19, 4
2002f524:	e8930004 	lwi	r4, r19, 4
2002f528:	e873001c 	lwi	r3, r19, 28
2002f52c:	16432003 	cmpu	r18, r3, r4
2002f530:	bc52ffa4 	blti	r18, -92		// 2002f4d4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002f534:	e8730018 	lwi	r3, r19, 24
2002f538:	e8830000 	lwi	r4, r3, 0
2002f53c:	e8730008 	lwi	r3, r19, 8
2002f540:	14632000 	rsubk	r3, r3, r4
}
2002f544:	10330000 	addk	r1, r19, r0
2002f548:	ea610010 	lwi	r19, r1, 16
2002f54c:	30210014 	addik	r1, r1, 20
2002f550:	b60f0008 	rtsd	r15, 8
2002f554:	80000000 	or	r0, r0, r0

2002f558 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002f558:	3021fff4 	addik	r1, r1, -12
2002f55c:	fa610008 	swi	r19, r1, 8
2002f560:	12610000 	addk	r19, r1, r0
2002f564:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2002f568:	e8730010 	lwi	r3, r19, 16
2002f56c:	e8630010 	lwi	r3, r3, 16
2002f570:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002f574:	f8130004 	swi	r0, r19, 4
2002f578:	b8000028 	bri	40		// 2002f5a0
        fifo->read_inds[i] = 0;
2002f57c:	e8730010 	lwi	r3, r19, 16
2002f580:	e883000c 	lwi	r4, r3, 12
2002f584:	e8730004 	lwi	r3, r19, 4
2002f588:	64630402 	bslli	r3, r3, 2
2002f58c:	10641800 	addk	r3, r4, r3
2002f590:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002f594:	e8730004 	lwi	r3, r19, 4
2002f598:	30630001 	addik	r3, r3, 1
2002f59c:	f8730004 	swi	r3, r19, 4
2002f5a0:	e8730010 	lwi	r3, r19, 16
2002f5a4:	e8830008 	lwi	r4, r3, 8
2002f5a8:	e8730004 	lwi	r3, r19, 4
2002f5ac:	16441803 	cmpu	r18, r4, r3
2002f5b0:	bc52ffcc 	blti	r18, -52		// 2002f57c
        fifo->read_inds[i] = 0;
    }
}
2002f5b4:	10330000 	addk	r1, r19, r0
2002f5b8:	ea610008 	lwi	r19, r1, 8
2002f5bc:	3021000c 	addik	r1, r1, 12
2002f5c0:	b60f0008 	rtsd	r15, 8
2002f5c4:	80000000 	or	r0, r0, r0

2002f5c8 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002f5c8:	3021fff4 	addik	r1, r1, -12
2002f5cc:	fa610008 	swi	r19, r1, 8
2002f5d0:	12610000 	addk	r19, r1, r0
2002f5d4:	f8b30010 	swi	r5, r19, 16
2002f5d8:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2002f5dc:	e8730010 	lwi	r3, r19, 16
2002f5e0:	e8830004 	lwi	r4, r3, 4
2002f5e4:	e8730010 	lwi	r3, r19, 16
2002f5e8:	e8a3000c 	lwi	r5, r3, 12
2002f5ec:	e8730014 	lwi	r3, r19, 20
2002f5f0:	64630402 	bslli	r3, r3, 2
2002f5f4:	10651800 	addk	r3, r5, r3
2002f5f8:	e8a30000 	lwi	r5, r3, 0
2002f5fc:	e8730010 	lwi	r3, r19, 16
2002f600:	e8630000 	lwi	r3, r3, 0
2002f604:	3063ffff 	addik	r3, r3, -1
2002f608:	84651800 	and	r3, r5, r3
2002f60c:	10641800 	addk	r3, r4, r3
2002f610:	e0630000 	lbui	r3, r3, 0
2002f614:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2002f618:	e8730010 	lwi	r3, r19, 16
2002f61c:	e883000c 	lwi	r4, r3, 12
2002f620:	e8730014 	lwi	r3, r19, 20
2002f624:	64630402 	bslli	r3, r3, 2
2002f628:	10641800 	addk	r3, r4, r3
2002f62c:	e8830000 	lwi	r4, r3, 0
2002f630:	30840001 	addik	r4, r4, 1
2002f634:	f8830000 	swi	r4, r3, 0
    return value;
2002f638:	e0730004 	lbui	r3, r19, 4
2002f63c:	90630060 	sext8	r3, r3
}
2002f640:	10330000 	addk	r1, r19, r0
2002f644:	ea610008 	lwi	r19, r1, 8
2002f648:	3021000c 	addik	r1, r1, 12
2002f64c:	b60f0008 	rtsd	r15, 8
2002f650:	80000000 	or	r0, r0, r0

2002f654 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002f654:	3021fff8 	addik	r1, r1, -8
2002f658:	fa610004 	swi	r19, r1, 4
2002f65c:	12610000 	addk	r19, r1, r0
2002f660:	f8b3000c 	swi	r5, r19, 12
2002f664:	10660000 	addk	r3, r6, r0
2002f668:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002f66c:	e873000c 	lwi	r3, r19, 12
2002f670:	e8830004 	lwi	r4, r3, 4
2002f674:	e873000c 	lwi	r3, r19, 12
2002f678:	e8630010 	lwi	r3, r3, 16
2002f67c:	e8a30000 	lwi	r5, r3, 0
2002f680:	e873000c 	lwi	r3, r19, 12
2002f684:	e8630000 	lwi	r3, r3, 0
2002f688:	3063ffff 	addik	r3, r3, -1
2002f68c:	84651800 	and	r3, r5, r3
2002f690:	10641800 	addk	r3, r4, r3
2002f694:	e0930010 	lbui	r4, r19, 16
2002f698:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2002f69c:	e873000c 	lwi	r3, r19, 12
2002f6a0:	e8630010 	lwi	r3, r3, 16
2002f6a4:	e8830000 	lwi	r4, r3, 0
2002f6a8:	30840001 	addik	r4, r4, 1
2002f6ac:	f8830000 	swi	r4, r3, 0
}
2002f6b0:	10330000 	addk	r1, r19, r0
2002f6b4:	ea610004 	lwi	r19, r1, 4
2002f6b8:	30210008 	addik	r1, r1, 8
2002f6bc:	b60f0008 	rtsd	r15, 8
2002f6c0:	80000000 	or	r0, r0, r0

2002f6c4 <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002f6c4:	3021fff8 	addik	r1, r1, -8
2002f6c8:	fa610004 	swi	r19, r1, 4
2002f6cc:	12610000 	addk	r19, r1, r0
2002f6d0:	f8b3000c 	swi	r5, r19, 12
2002f6d4:	f8d30010 	swi	r6, r19, 16
2002f6d8:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002f6dc:	e873000c 	lwi	r3, r19, 12
2002f6e0:	e8630010 	lwi	r3, r3, 16
2002f6e4:	e8830000 	lwi	r4, r3, 0
2002f6e8:	e873000c 	lwi	r3, r19, 12
2002f6ec:	e8a3000c 	lwi	r5, r3, 12
2002f6f0:	e8730010 	lwi	r3, r19, 16
2002f6f4:	64630402 	bslli	r3, r3, 2
2002f6f8:	10651800 	addk	r3, r5, r3
2002f6fc:	e8630000 	lwi	r3, r3, 0
2002f700:	14a32000 	rsubk	r5, r3, r4
2002f704:	30600001 	addik	r3, r0, 1
2002f708:	e8930014 	lwi	r4, r19, 20
2002f70c:	16442803 	cmpu	r18, r4, r5
2002f710:	bcb20008 	bgei	r18, 8		// 2002f718
2002f714:	10600000 	addk	r3, r0, r0
2002f718:	a46300ff 	andi	r3, r3, 255
}
2002f71c:	10330000 	addk	r1, r19, r0
2002f720:	ea610004 	lwi	r19, r1, 4
2002f724:	30210008 	addik	r1, r1, 8
2002f728:	b60f0008 	rtsd	r15, 8
2002f72c:	80000000 	or	r0, r0, r0

2002f730 <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002f730:	3021fff8 	addik	r1, r1, -8
2002f734:	fa610004 	swi	r19, r1, 4
2002f738:	12610000 	addk	r19, r1, r0
2002f73c:	f8b3000c 	swi	r5, r19, 12
2002f740:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002f744:	e873000c 	lwi	r3, r19, 12
2002f748:	e8630010 	lwi	r3, r3, 16
2002f74c:	e8830000 	lwi	r4, r3, 0
2002f750:	e873000c 	lwi	r3, r19, 12
2002f754:	e8a3000c 	lwi	r5, r3, 12
2002f758:	e8730010 	lwi	r3, r19, 16
2002f75c:	64630402 	bslli	r3, r3, 2
2002f760:	10651800 	addk	r3, r5, r3
2002f764:	e8630000 	lwi	r3, r3, 0
2002f768:	14632000 	rsubk	r3, r3, r4
}
2002f76c:	10330000 	addk	r1, r19, r0
2002f770:	ea610004 	lwi	r19, r1, 4
2002f774:	30210008 	addik	r1, r1, 8
2002f778:	b60f0008 	rtsd	r15, 8
2002f77c:	80000000 	or	r0, r0, r0

2002f780 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002f780:	3021fff4 	addik	r1, r1, -12
2002f784:	fa610008 	swi	r19, r1, 8
2002f788:	12610000 	addk	r19, r1, r0
2002f78c:	f8b30010 	swi	r5, r19, 16
2002f790:	f8d30014 	swi	r6, r19, 20
2002f794:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002f798:	f8130004 	swi	r0, r19, 4
2002f79c:	b800005c 	bri	92		// 2002f7f8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002f7a0:	e8730010 	lwi	r3, r19, 16
2002f7a4:	e8830000 	lwi	r4, r3, 0
2002f7a8:	e8730010 	lwi	r3, r19, 16
2002f7ac:	e8a3000c 	lwi	r5, r3, 12
2002f7b0:	e8730004 	lwi	r3, r19, 4
2002f7b4:	64630402 	bslli	r3, r3, 2
2002f7b8:	10651800 	addk	r3, r5, r3
2002f7bc:	e8a30000 	lwi	r5, r3, 0
2002f7c0:	e8730010 	lwi	r3, r19, 16
2002f7c4:	e8630010 	lwi	r3, r3, 16
2002f7c8:	e8630000 	lwi	r3, r3, 0
2002f7cc:	14632800 	rsubk	r3, r3, r5
2002f7d0:	10641800 	addk	r3, r4, r3
2002f7d4:	30830001 	addik	r4, r3, 1
2002f7d8:	e8730018 	lwi	r3, r19, 24
2002f7dc:	16441803 	cmpu	r18, r4, r3
2002f7e0:	bc52000c 	blti	r18, 12		// 2002f7ec
            return 0;
2002f7e4:	10600000 	addk	r3, r0, r0
2002f7e8:	b8000024 	bri	36		// 2002f80c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002f7ec:	e8730004 	lwi	r3, r19, 4
2002f7f0:	30630001 	addik	r3, r3, 1
2002f7f4:	f8730004 	swi	r3, r19, 4
2002f7f8:	e8930004 	lwi	r4, r19, 4
2002f7fc:	e8730014 	lwi	r3, r19, 20
2002f800:	16432003 	cmpu	r18, r3, r4
2002f804:	bc52ff9c 	blti	r18, -100		// 2002f7a0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002f808:	30600001 	addik	r3, r0, 1
}
2002f80c:	10330000 	addk	r1, r19, r0
2002f810:	ea610008 	lwi	r19, r1, 8
2002f814:	3021000c 	addik	r1, r1, 12
2002f818:	b60f0008 	rtsd	r15, 8
2002f81c:	80000000 	or	r0, r0, r0

2002f820 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002f820:	3021ffec 	addik	r1, r1, -20
2002f824:	fa610010 	swi	r19, r1, 16
2002f828:	12610000 	addk	r19, r1, r0
2002f82c:	f8b30018 	swi	r5, r19, 24
2002f830:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002f834:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002f838:	f8130004 	swi	r0, r19, 4
2002f83c:	b8000054 	bri	84		// 2002f890
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2002f840:	e8730018 	lwi	r3, r19, 24
2002f844:	e8630010 	lwi	r3, r3, 16
2002f848:	e8830000 	lwi	r4, r3, 0
2002f84c:	e8730018 	lwi	r3, r19, 24
2002f850:	e8a3000c 	lwi	r5, r3, 12
2002f854:	e8730004 	lwi	r3, r19, 4
2002f858:	64630402 	bslli	r3, r3, 2
2002f85c:	10651800 	addk	r3, r5, r3
2002f860:	e8630000 	lwi	r3, r3, 0
2002f864:	14632000 	rsubk	r3, r3, r4
2002f868:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002f86c:	e8930008 	lwi	r4, r19, 8
2002f870:	e873000c 	lwi	r3, r19, 12
2002f874:	16441803 	cmpu	r18, r4, r3
2002f878:	bcb20008 	bgei	r18, 8		// 2002f880
2002f87c:	10640000 	addk	r3, r4, r0
2002f880:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002f884:	e8730004 	lwi	r3, r19, 4
2002f888:	30630001 	addik	r3, r3, 1
2002f88c:	f8730004 	swi	r3, r19, 4
2002f890:	e8930004 	lwi	r4, r19, 4
2002f894:	e873001c 	lwi	r3, r19, 28
2002f898:	16432003 	cmpu	r18, r3, r4
2002f89c:	bc52ffa4 	blti	r18, -92		// 2002f840
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002f8a0:	e8730018 	lwi	r3, r19, 24
2002f8a4:	e8830000 	lwi	r4, r3, 0
2002f8a8:	e8730008 	lwi	r3, r19, 8
2002f8ac:	14632000 	rsubk	r3, r3, r4
}
2002f8b0:	10330000 	addk	r1, r19, r0
2002f8b4:	ea610010 	lwi	r19, r1, 16
2002f8b8:	30210014 	addik	r1, r1, 20
2002f8bc:	b60f0008 	rtsd	r15, 8
2002f8c0:	80000000 	or	r0, r0, r0

2002f8c4 <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002f8c4:	3021fff4 	addik	r1, r1, -12
2002f8c8:	fa610008 	swi	r19, r1, 8
2002f8cc:	12610000 	addk	r19, r1, r0
2002f8d0:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2002f8d4:	e8730010 	lwi	r3, r19, 16
2002f8d8:	e8630010 	lwi	r3, r3, 16
2002f8dc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002f8e0:	f8130004 	swi	r0, r19, 4
2002f8e4:	b8000028 	bri	40		// 2002f90c
        fifo->read_inds[i] = 0;
2002f8e8:	e8730010 	lwi	r3, r19, 16
2002f8ec:	e883000c 	lwi	r4, r3, 12
2002f8f0:	e8730004 	lwi	r3, r19, 4
2002f8f4:	64630402 	bslli	r3, r3, 2
2002f8f8:	10641800 	addk	r3, r4, r3
2002f8fc:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002f900:	e8730004 	lwi	r3, r19, 4
2002f904:	30630001 	addik	r3, r3, 1
2002f908:	f8730004 	swi	r3, r19, 4
2002f90c:	e8730010 	lwi	r3, r19, 16
2002f910:	e8830008 	lwi	r4, r3, 8
2002f914:	e8730004 	lwi	r3, r19, 4
2002f918:	16441803 	cmpu	r18, r4, r3
2002f91c:	bc52ffcc 	blti	r18, -52		// 2002f8e8
        fifo->read_inds[i] = 0;
    }
}
2002f920:	10330000 	addk	r1, r19, r0
2002f924:	ea610008 	lwi	r19, r1, 8
2002f928:	3021000c 	addik	r1, r1, 12
2002f92c:	b60f0008 	rtsd	r15, 8
2002f930:	80000000 	or	r0, r0, r0

2002f934 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002f934:	3021fff4 	addik	r1, r1, -12
2002f938:	fa610008 	swi	r19, r1, 8
2002f93c:	12610000 	addk	r19, r1, r0
2002f940:	f8b30010 	swi	r5, r19, 16
2002f944:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2002f948:	e8730010 	lwi	r3, r19, 16
2002f94c:	e8830004 	lwi	r4, r3, 4
2002f950:	e8730010 	lwi	r3, r19, 16
2002f954:	e8a3000c 	lwi	r5, r3, 12
2002f958:	e8730014 	lwi	r3, r19, 20
2002f95c:	64630402 	bslli	r3, r3, 2
2002f960:	10651800 	addk	r3, r5, r3
2002f964:	e8a30000 	lwi	r5, r3, 0
2002f968:	e8730010 	lwi	r3, r19, 16
2002f96c:	e8630000 	lwi	r3, r3, 0
2002f970:	3063ffff 	addik	r3, r3, -1
2002f974:	84651800 	and	r3, r5, r3
2002f978:	10631800 	addk	r3, r3, r3
2002f97c:	10641800 	addk	r3, r4, r3
2002f980:	e4630000 	lhui	r3, r3, 0
2002f984:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2002f988:	e8730010 	lwi	r3, r19, 16
2002f98c:	e883000c 	lwi	r4, r3, 12
2002f990:	e8730014 	lwi	r3, r19, 20
2002f994:	64630402 	bslli	r3, r3, 2
2002f998:	10641800 	addk	r3, r4, r3
2002f99c:	e8830000 	lwi	r4, r3, 0
2002f9a0:	30840001 	addik	r4, r4, 1
2002f9a4:	f8830000 	swi	r4, r3, 0
    return value;
2002f9a8:	e4730004 	lhui	r3, r19, 4
2002f9ac:	90630061 	sext16	r3, r3
}
2002f9b0:	10330000 	addk	r1, r19, r0
2002f9b4:	ea610008 	lwi	r19, r1, 8
2002f9b8:	3021000c 	addik	r1, r1, 12
2002f9bc:	b60f0008 	rtsd	r15, 8
2002f9c0:	80000000 	or	r0, r0, r0

2002f9c4 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002f9c4:	3021fff8 	addik	r1, r1, -8
2002f9c8:	fa610004 	swi	r19, r1, 4
2002f9cc:	12610000 	addk	r19, r1, r0
2002f9d0:	f8b3000c 	swi	r5, r19, 12
2002f9d4:	10660000 	addk	r3, r6, r0
2002f9d8:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002f9dc:	e873000c 	lwi	r3, r19, 12
2002f9e0:	e8830004 	lwi	r4, r3, 4
2002f9e4:	e873000c 	lwi	r3, r19, 12
2002f9e8:	e8630010 	lwi	r3, r3, 16
2002f9ec:	e8a30000 	lwi	r5, r3, 0
2002f9f0:	e873000c 	lwi	r3, r19, 12
2002f9f4:	e8630000 	lwi	r3, r3, 0
2002f9f8:	3063ffff 	addik	r3, r3, -1
2002f9fc:	84651800 	and	r3, r5, r3
2002fa00:	10631800 	addk	r3, r3, r3
2002fa04:	10641800 	addk	r3, r4, r3
2002fa08:	e4930010 	lhui	r4, r19, 16
2002fa0c:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2002fa10:	e873000c 	lwi	r3, r19, 12
2002fa14:	e8630010 	lwi	r3, r3, 16
2002fa18:	e8830000 	lwi	r4, r3, 0
2002fa1c:	30840001 	addik	r4, r4, 1
2002fa20:	f8830000 	swi	r4, r3, 0
}
2002fa24:	10330000 	addk	r1, r19, r0
2002fa28:	ea610004 	lwi	r19, r1, 4
2002fa2c:	30210008 	addik	r1, r1, 8
2002fa30:	b60f0008 	rtsd	r15, 8
2002fa34:	80000000 	or	r0, r0, r0

2002fa38 <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002fa38:	3021fff8 	addik	r1, r1, -8
2002fa3c:	fa610004 	swi	r19, r1, 4
2002fa40:	12610000 	addk	r19, r1, r0
2002fa44:	f8b3000c 	swi	r5, r19, 12
2002fa48:	f8d30010 	swi	r6, r19, 16
2002fa4c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002fa50:	e873000c 	lwi	r3, r19, 12
2002fa54:	e8630010 	lwi	r3, r3, 16
2002fa58:	e8830000 	lwi	r4, r3, 0
2002fa5c:	e873000c 	lwi	r3, r19, 12
2002fa60:	e8a3000c 	lwi	r5, r3, 12
2002fa64:	e8730010 	lwi	r3, r19, 16
2002fa68:	64630402 	bslli	r3, r3, 2
2002fa6c:	10651800 	addk	r3, r5, r3
2002fa70:	e8630000 	lwi	r3, r3, 0
2002fa74:	14a32000 	rsubk	r5, r3, r4
2002fa78:	30600001 	addik	r3, r0, 1
2002fa7c:	e8930014 	lwi	r4, r19, 20
2002fa80:	16442803 	cmpu	r18, r4, r5
2002fa84:	bcb20008 	bgei	r18, 8		// 2002fa8c
2002fa88:	10600000 	addk	r3, r0, r0
2002fa8c:	a46300ff 	andi	r3, r3, 255
}
2002fa90:	10330000 	addk	r1, r19, r0
2002fa94:	ea610004 	lwi	r19, r1, 4
2002fa98:	30210008 	addik	r1, r1, 8
2002fa9c:	b60f0008 	rtsd	r15, 8
2002faa0:	80000000 	or	r0, r0, r0

2002faa4 <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002faa4:	3021fff8 	addik	r1, r1, -8
2002faa8:	fa610004 	swi	r19, r1, 4
2002faac:	12610000 	addk	r19, r1, r0
2002fab0:	f8b3000c 	swi	r5, r19, 12
2002fab4:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002fab8:	e873000c 	lwi	r3, r19, 12
2002fabc:	e8630010 	lwi	r3, r3, 16
2002fac0:	e8830000 	lwi	r4, r3, 0
2002fac4:	e873000c 	lwi	r3, r19, 12
2002fac8:	e8a3000c 	lwi	r5, r3, 12
2002facc:	e8730010 	lwi	r3, r19, 16
2002fad0:	64630402 	bslli	r3, r3, 2
2002fad4:	10651800 	addk	r3, r5, r3
2002fad8:	e8630000 	lwi	r3, r3, 0
2002fadc:	14632000 	rsubk	r3, r3, r4
}
2002fae0:	10330000 	addk	r1, r19, r0
2002fae4:	ea610004 	lwi	r19, r1, 4
2002fae8:	30210008 	addik	r1, r1, 8
2002faec:	b60f0008 	rtsd	r15, 8
2002faf0:	80000000 	or	r0, r0, r0

2002faf4 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002faf4:	3021fff4 	addik	r1, r1, -12
2002faf8:	fa610008 	swi	r19, r1, 8
2002fafc:	12610000 	addk	r19, r1, r0
2002fb00:	f8b30010 	swi	r5, r19, 16
2002fb04:	f8d30014 	swi	r6, r19, 20
2002fb08:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002fb0c:	f8130004 	swi	r0, r19, 4
2002fb10:	b800005c 	bri	92		// 2002fb6c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002fb14:	e8730010 	lwi	r3, r19, 16
2002fb18:	e8830000 	lwi	r4, r3, 0
2002fb1c:	e8730010 	lwi	r3, r19, 16
2002fb20:	e8a3000c 	lwi	r5, r3, 12
2002fb24:	e8730004 	lwi	r3, r19, 4
2002fb28:	64630402 	bslli	r3, r3, 2
2002fb2c:	10651800 	addk	r3, r5, r3
2002fb30:	e8a30000 	lwi	r5, r3, 0
2002fb34:	e8730010 	lwi	r3, r19, 16
2002fb38:	e8630010 	lwi	r3, r3, 16
2002fb3c:	e8630000 	lwi	r3, r3, 0
2002fb40:	14632800 	rsubk	r3, r3, r5
2002fb44:	10641800 	addk	r3, r4, r3
2002fb48:	30830001 	addik	r4, r3, 1
2002fb4c:	e8730018 	lwi	r3, r19, 24
2002fb50:	16441803 	cmpu	r18, r4, r3
2002fb54:	bc52000c 	blti	r18, 12		// 2002fb60
            return 0;
2002fb58:	10600000 	addk	r3, r0, r0
2002fb5c:	b8000024 	bri	36		// 2002fb80
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002fb60:	e8730004 	lwi	r3, r19, 4
2002fb64:	30630001 	addik	r3, r3, 1
2002fb68:	f8730004 	swi	r3, r19, 4
2002fb6c:	e8930004 	lwi	r4, r19, 4
2002fb70:	e8730014 	lwi	r3, r19, 20
2002fb74:	16432003 	cmpu	r18, r3, r4
2002fb78:	bc52ff9c 	blti	r18, -100		// 2002fb14
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002fb7c:	30600001 	addik	r3, r0, 1
}
2002fb80:	10330000 	addk	r1, r19, r0
2002fb84:	ea610008 	lwi	r19, r1, 8
2002fb88:	3021000c 	addik	r1, r1, 12
2002fb8c:	b60f0008 	rtsd	r15, 8
2002fb90:	80000000 	or	r0, r0, r0

2002fb94 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002fb94:	3021ffec 	addik	r1, r1, -20
2002fb98:	fa610010 	swi	r19, r1, 16
2002fb9c:	12610000 	addk	r19, r1, r0
2002fba0:	f8b30018 	swi	r5, r19, 24
2002fba4:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002fba8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002fbac:	f8130004 	swi	r0, r19, 4
2002fbb0:	b8000054 	bri	84		// 2002fc04
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2002fbb4:	e8730018 	lwi	r3, r19, 24
2002fbb8:	e8630010 	lwi	r3, r3, 16
2002fbbc:	e8830000 	lwi	r4, r3, 0
2002fbc0:	e8730018 	lwi	r3, r19, 24
2002fbc4:	e8a3000c 	lwi	r5, r3, 12
2002fbc8:	e8730004 	lwi	r3, r19, 4
2002fbcc:	64630402 	bslli	r3, r3, 2
2002fbd0:	10651800 	addk	r3, r5, r3
2002fbd4:	e8630000 	lwi	r3, r3, 0
2002fbd8:	14632000 	rsubk	r3, r3, r4
2002fbdc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002fbe0:	e8930008 	lwi	r4, r19, 8
2002fbe4:	e873000c 	lwi	r3, r19, 12
2002fbe8:	16441803 	cmpu	r18, r4, r3
2002fbec:	bcb20008 	bgei	r18, 8		// 2002fbf4
2002fbf0:	10640000 	addk	r3, r4, r0
2002fbf4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002fbf8:	e8730004 	lwi	r3, r19, 4
2002fbfc:	30630001 	addik	r3, r3, 1
2002fc00:	f8730004 	swi	r3, r19, 4
2002fc04:	e8930004 	lwi	r4, r19, 4
2002fc08:	e873001c 	lwi	r3, r19, 28
2002fc0c:	16432003 	cmpu	r18, r3, r4
2002fc10:	bc52ffa4 	blti	r18, -92		// 2002fbb4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002fc14:	e8730018 	lwi	r3, r19, 24
2002fc18:	e8830000 	lwi	r4, r3, 0
2002fc1c:	e8730008 	lwi	r3, r19, 8
2002fc20:	14632000 	rsubk	r3, r3, r4
}
2002fc24:	10330000 	addk	r1, r19, r0
2002fc28:	ea610010 	lwi	r19, r1, 16
2002fc2c:	30210014 	addik	r1, r1, 20
2002fc30:	b60f0008 	rtsd	r15, 8
2002fc34:	80000000 	or	r0, r0, r0

2002fc38 <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002fc38:	3021fff4 	addik	r1, r1, -12
2002fc3c:	fa610008 	swi	r19, r1, 8
2002fc40:	12610000 	addk	r19, r1, r0
2002fc44:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2002fc48:	e8730010 	lwi	r3, r19, 16
2002fc4c:	e8630010 	lwi	r3, r3, 16
2002fc50:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002fc54:	f8130004 	swi	r0, r19, 4
2002fc58:	b8000028 	bri	40		// 2002fc80
        fifo->read_inds[i] = 0;
2002fc5c:	e8730010 	lwi	r3, r19, 16
2002fc60:	e883000c 	lwi	r4, r3, 12
2002fc64:	e8730004 	lwi	r3, r19, 4
2002fc68:	64630402 	bslli	r3, r3, 2
2002fc6c:	10641800 	addk	r3, r4, r3
2002fc70:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002fc74:	e8730004 	lwi	r3, r19, 4
2002fc78:	30630001 	addik	r3, r3, 1
2002fc7c:	f8730004 	swi	r3, r19, 4
2002fc80:	e8730010 	lwi	r3, r19, 16
2002fc84:	e8830008 	lwi	r4, r3, 8
2002fc88:	e8730004 	lwi	r3, r19, 4
2002fc8c:	16441803 	cmpu	r18, r4, r3
2002fc90:	bc52ffcc 	blti	r18, -52		// 2002fc5c
        fifo->read_inds[i] = 0;
    }
}
2002fc94:	10330000 	addk	r1, r19, r0
2002fc98:	ea610008 	lwi	r19, r1, 8
2002fc9c:	3021000c 	addik	r1, r1, 12
2002fca0:	b60f0008 	rtsd	r15, 8
2002fca4:	80000000 	or	r0, r0, r0

2002fca8 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002fca8:	3021fff4 	addik	r1, r1, -12
2002fcac:	fa610008 	swi	r19, r1, 8
2002fcb0:	12610000 	addk	r19, r1, r0
2002fcb4:	f8b30010 	swi	r5, r19, 16
2002fcb8:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2002fcbc:	e8730010 	lwi	r3, r19, 16
2002fcc0:	e8830004 	lwi	r4, r3, 4
2002fcc4:	e8730010 	lwi	r3, r19, 16
2002fcc8:	e8a3000c 	lwi	r5, r3, 12
2002fccc:	e8730014 	lwi	r3, r19, 20
2002fcd0:	64630402 	bslli	r3, r3, 2
2002fcd4:	10651800 	addk	r3, r5, r3
2002fcd8:	e8a30000 	lwi	r5, r3, 0
2002fcdc:	e8730010 	lwi	r3, r19, 16
2002fce0:	e8630000 	lwi	r3, r3, 0
2002fce4:	3063ffff 	addik	r3, r3, -1
2002fce8:	84651800 	and	r3, r5, r3
2002fcec:	64630402 	bslli	r3, r3, 2
2002fcf0:	10641800 	addk	r3, r4, r3
2002fcf4:	e8630000 	lwi	r3, r3, 0
2002fcf8:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2002fcfc:	e8730010 	lwi	r3, r19, 16
2002fd00:	e883000c 	lwi	r4, r3, 12
2002fd04:	e8730014 	lwi	r3, r19, 20
2002fd08:	64630402 	bslli	r3, r3, 2
2002fd0c:	10641800 	addk	r3, r4, r3
2002fd10:	e8830000 	lwi	r4, r3, 0
2002fd14:	30840001 	addik	r4, r4, 1
2002fd18:	f8830000 	swi	r4, r3, 0
    return value;
2002fd1c:	e8730004 	lwi	r3, r19, 4
}
2002fd20:	10330000 	addk	r1, r19, r0
2002fd24:	ea610008 	lwi	r19, r1, 8
2002fd28:	3021000c 	addik	r1, r1, 12
2002fd2c:	b60f0008 	rtsd	r15, 8
2002fd30:	80000000 	or	r0, r0, r0

2002fd34 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002fd34:	3021fff8 	addik	r1, r1, -8
2002fd38:	fa610004 	swi	r19, r1, 4
2002fd3c:	12610000 	addk	r19, r1, r0
2002fd40:	f8b3000c 	swi	r5, r19, 12
2002fd44:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002fd48:	e873000c 	lwi	r3, r19, 12
2002fd4c:	e8830004 	lwi	r4, r3, 4
2002fd50:	e873000c 	lwi	r3, r19, 12
2002fd54:	e8630010 	lwi	r3, r3, 16
2002fd58:	e8a30000 	lwi	r5, r3, 0
2002fd5c:	e873000c 	lwi	r3, r19, 12
2002fd60:	e8630000 	lwi	r3, r3, 0
2002fd64:	3063ffff 	addik	r3, r3, -1
2002fd68:	84651800 	and	r3, r5, r3
2002fd6c:	64630402 	bslli	r3, r3, 2
2002fd70:	10641800 	addk	r3, r4, r3
2002fd74:	e8930010 	lwi	r4, r19, 16
2002fd78:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2002fd7c:	e873000c 	lwi	r3, r19, 12
2002fd80:	e8630010 	lwi	r3, r3, 16
2002fd84:	e8830000 	lwi	r4, r3, 0
2002fd88:	30840001 	addik	r4, r4, 1
2002fd8c:	f8830000 	swi	r4, r3, 0
}
2002fd90:	10330000 	addk	r1, r19, r0
2002fd94:	ea610004 	lwi	r19, r1, 4
2002fd98:	30210008 	addik	r1, r1, 8
2002fd9c:	b60f0008 	rtsd	r15, 8
2002fda0:	80000000 	or	r0, r0, r0

2002fda4 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002fda4:	3021fff8 	addik	r1, r1, -8
2002fda8:	fa610004 	swi	r19, r1, 4
2002fdac:	12610000 	addk	r19, r1, r0
2002fdb0:	f8b3000c 	swi	r5, r19, 12
2002fdb4:	f8d30010 	swi	r6, r19, 16
2002fdb8:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002fdbc:	e873000c 	lwi	r3, r19, 12
2002fdc0:	e8630010 	lwi	r3, r3, 16
2002fdc4:	e8830000 	lwi	r4, r3, 0
2002fdc8:	e873000c 	lwi	r3, r19, 12
2002fdcc:	e8a3000c 	lwi	r5, r3, 12
2002fdd0:	e8730010 	lwi	r3, r19, 16
2002fdd4:	64630402 	bslli	r3, r3, 2
2002fdd8:	10651800 	addk	r3, r5, r3
2002fddc:	e8630000 	lwi	r3, r3, 0
2002fde0:	14a32000 	rsubk	r5, r3, r4
2002fde4:	30600001 	addik	r3, r0, 1
2002fde8:	e8930014 	lwi	r4, r19, 20
2002fdec:	16442803 	cmpu	r18, r4, r5
2002fdf0:	bcb20008 	bgei	r18, 8		// 2002fdf8
2002fdf4:	10600000 	addk	r3, r0, r0
2002fdf8:	a46300ff 	andi	r3, r3, 255
}
2002fdfc:	10330000 	addk	r1, r19, r0
2002fe00:	ea610004 	lwi	r19, r1, 4
2002fe04:	30210008 	addik	r1, r1, 8
2002fe08:	b60f0008 	rtsd	r15, 8
2002fe0c:	80000000 	or	r0, r0, r0

2002fe10 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002fe10:	3021fff8 	addik	r1, r1, -8
2002fe14:	fa610004 	swi	r19, r1, 4
2002fe18:	12610000 	addk	r19, r1, r0
2002fe1c:	f8b3000c 	swi	r5, r19, 12
2002fe20:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002fe24:	e873000c 	lwi	r3, r19, 12
2002fe28:	e8630010 	lwi	r3, r3, 16
2002fe2c:	e8830000 	lwi	r4, r3, 0
2002fe30:	e873000c 	lwi	r3, r19, 12
2002fe34:	e8a3000c 	lwi	r5, r3, 12
2002fe38:	e8730010 	lwi	r3, r19, 16
2002fe3c:	64630402 	bslli	r3, r3, 2
2002fe40:	10651800 	addk	r3, r5, r3
2002fe44:	e8630000 	lwi	r3, r3, 0
2002fe48:	14632000 	rsubk	r3, r3, r4
}
2002fe4c:	10330000 	addk	r1, r19, r0
2002fe50:	ea610004 	lwi	r19, r1, 4
2002fe54:	30210008 	addik	r1, r1, 8
2002fe58:	b60f0008 	rtsd	r15, 8
2002fe5c:	80000000 	or	r0, r0, r0

2002fe60 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002fe60:	3021fff4 	addik	r1, r1, -12
2002fe64:	fa610008 	swi	r19, r1, 8
2002fe68:	12610000 	addk	r19, r1, r0
2002fe6c:	f8b30010 	swi	r5, r19, 16
2002fe70:	f8d30014 	swi	r6, r19, 20
2002fe74:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002fe78:	f8130004 	swi	r0, r19, 4
2002fe7c:	b800005c 	bri	92		// 2002fed8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002fe80:	e8730010 	lwi	r3, r19, 16
2002fe84:	e8830000 	lwi	r4, r3, 0
2002fe88:	e8730010 	lwi	r3, r19, 16
2002fe8c:	e8a3000c 	lwi	r5, r3, 12
2002fe90:	e8730004 	lwi	r3, r19, 4
2002fe94:	64630402 	bslli	r3, r3, 2
2002fe98:	10651800 	addk	r3, r5, r3
2002fe9c:	e8a30000 	lwi	r5, r3, 0
2002fea0:	e8730010 	lwi	r3, r19, 16
2002fea4:	e8630010 	lwi	r3, r3, 16
2002fea8:	e8630000 	lwi	r3, r3, 0
2002feac:	14632800 	rsubk	r3, r3, r5
2002feb0:	10641800 	addk	r3, r4, r3
2002feb4:	30830001 	addik	r4, r3, 1
2002feb8:	e8730018 	lwi	r3, r19, 24
2002febc:	16441803 	cmpu	r18, r4, r3
2002fec0:	bc52000c 	blti	r18, 12		// 2002fecc
            return 0;
2002fec4:	10600000 	addk	r3, r0, r0
2002fec8:	b8000024 	bri	36		// 2002feec
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002fecc:	e8730004 	lwi	r3, r19, 4
2002fed0:	30630001 	addik	r3, r3, 1
2002fed4:	f8730004 	swi	r3, r19, 4
2002fed8:	e8930004 	lwi	r4, r19, 4
2002fedc:	e8730014 	lwi	r3, r19, 20
2002fee0:	16432003 	cmpu	r18, r3, r4
2002fee4:	bc52ff9c 	blti	r18, -100		// 2002fe80
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002fee8:	30600001 	addik	r3, r0, 1
}
2002feec:	10330000 	addk	r1, r19, r0
2002fef0:	ea610008 	lwi	r19, r1, 8
2002fef4:	3021000c 	addik	r1, r1, 12
2002fef8:	b60f0008 	rtsd	r15, 8
2002fefc:	80000000 	or	r0, r0, r0

2002ff00 <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002ff00:	3021ffec 	addik	r1, r1, -20
2002ff04:	fa610010 	swi	r19, r1, 16
2002ff08:	12610000 	addk	r19, r1, r0
2002ff0c:	f8b30018 	swi	r5, r19, 24
2002ff10:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002ff14:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002ff18:	f8130004 	swi	r0, r19, 4
2002ff1c:	b8000054 	bri	84		// 2002ff70
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2002ff20:	e8730018 	lwi	r3, r19, 24
2002ff24:	e8630010 	lwi	r3, r3, 16
2002ff28:	e8830000 	lwi	r4, r3, 0
2002ff2c:	e8730018 	lwi	r3, r19, 24
2002ff30:	e8a3000c 	lwi	r5, r3, 12
2002ff34:	e8730004 	lwi	r3, r19, 4
2002ff38:	64630402 	bslli	r3, r3, 2
2002ff3c:	10651800 	addk	r3, r5, r3
2002ff40:	e8630000 	lwi	r3, r3, 0
2002ff44:	14632000 	rsubk	r3, r3, r4
2002ff48:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002ff4c:	e8930008 	lwi	r4, r19, 8
2002ff50:	e873000c 	lwi	r3, r19, 12
2002ff54:	16441803 	cmpu	r18, r4, r3
2002ff58:	bcb20008 	bgei	r18, 8		// 2002ff60
2002ff5c:	10640000 	addk	r3, r4, r0
2002ff60:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002ff64:	e8730004 	lwi	r3, r19, 4
2002ff68:	30630001 	addik	r3, r3, 1
2002ff6c:	f8730004 	swi	r3, r19, 4
2002ff70:	e8930004 	lwi	r4, r19, 4
2002ff74:	e873001c 	lwi	r3, r19, 28
2002ff78:	16432003 	cmpu	r18, r3, r4
2002ff7c:	bc52ffa4 	blti	r18, -92		// 2002ff20
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002ff80:	e8730018 	lwi	r3, r19, 24
2002ff84:	e8830000 	lwi	r4, r3, 0
2002ff88:	e8730008 	lwi	r3, r19, 8
2002ff8c:	14632000 	rsubk	r3, r3, r4
}
2002ff90:	10330000 	addk	r1, r19, r0
2002ff94:	ea610010 	lwi	r19, r1, 16
2002ff98:	30210014 	addik	r1, r1, 20
2002ff9c:	b60f0008 	rtsd	r15, 8
2002ffa0:	80000000 	or	r0, r0, r0

2002ffa4 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002ffa4:	3021fff4 	addik	r1, r1, -12
2002ffa8:	fa610008 	swi	r19, r1, 8
2002ffac:	12610000 	addk	r19, r1, r0
2002ffb0:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2002ffb4:	e8730010 	lwi	r3, r19, 16
2002ffb8:	e8630010 	lwi	r3, r3, 16
2002ffbc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002ffc0:	f8130004 	swi	r0, r19, 4
2002ffc4:	b8000028 	bri	40		// 2002ffec
        fifo->read_inds[i] = 0;
2002ffc8:	e8730010 	lwi	r3, r19, 16
2002ffcc:	e883000c 	lwi	r4, r3, 12
2002ffd0:	e8730004 	lwi	r3, r19, 4
2002ffd4:	64630402 	bslli	r3, r3, 2
2002ffd8:	10641800 	addk	r3, r4, r3
2002ffdc:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002ffe0:	e8730004 	lwi	r3, r19, 4
2002ffe4:	30630001 	addik	r3, r3, 1
2002ffe8:	f8730004 	swi	r3, r19, 4
2002ffec:	e8730010 	lwi	r3, r19, 16
2002fff0:	e8830008 	lwi	r4, r3, 8
2002fff4:	e8730004 	lwi	r3, r19, 4
2002fff8:	16441803 	cmpu	r18, r4, r3
2002fffc:	bc52ffcc 	blti	r18, -52		// 2002ffc8
        fifo->read_inds[i] = 0;
    }
}
20030000:	10330000 	addk	r1, r19, r0
20030004:	ea610008 	lwi	r19, r1, 8
20030008:	3021000c 	addik	r1, r1, 12
2003000c:	b60f0008 	rtsd	r15, 8
20030010:	80000000 	or	r0, r0, r0

20030014 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20030014:	3021fff0 	addik	r1, r1, -16
20030018:	fa61000c 	swi	r19, r1, 12
2003001c:	12610000 	addk	r19, r1, r0
20030020:	f8b30014 	swi	r5, r19, 20
20030024:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20030028:	e8730014 	lwi	r3, r19, 20
2003002c:	e8830004 	lwi	r4, r3, 4
20030030:	e8730014 	lwi	r3, r19, 20
20030034:	e8a3000c 	lwi	r5, r3, 12
20030038:	e8730018 	lwi	r3, r19, 24
2003003c:	64630402 	bslli	r3, r3, 2
20030040:	10651800 	addk	r3, r5, r3
20030044:	e8a30000 	lwi	r5, r3, 0
20030048:	e8730014 	lwi	r3, r19, 20
2003004c:	e8630000 	lwi	r3, r3, 0
20030050:	3063ffff 	addik	r3, r3, -1
20030054:	84651800 	and	r3, r5, r3
20030058:	64630403 	bslli	r3, r3, 3
2003005c:	10641800 	addk	r3, r4, r3
20030060:	e8830000 	lwi	r4, r3, 0
20030064:	e8a30004 	lwi	r5, r3, 4
20030068:	f8930004 	swi	r4, r19, 4
2003006c:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20030070:	e8730014 	lwi	r3, r19, 20
20030074:	e883000c 	lwi	r4, r3, 12
20030078:	e8730018 	lwi	r3, r19, 24
2003007c:	64630402 	bslli	r3, r3, 2
20030080:	10641800 	addk	r3, r4, r3
20030084:	e8830000 	lwi	r4, r3, 0
20030088:	30840001 	addik	r4, r4, 1
2003008c:	f8830000 	swi	r4, r3, 0
    return value;
20030090:	e8930004 	lwi	r4, r19, 4
20030094:	e8b30008 	lwi	r5, r19, 8
}
20030098:	10640000 	addk	r3, r4, r0
2003009c:	10850000 	addk	r4, r5, r0
200300a0:	10330000 	addk	r1, r19, r0
200300a4:	ea61000c 	lwi	r19, r1, 12
200300a8:	30210010 	addik	r1, r1, 16
200300ac:	b60f0008 	rtsd	r15, 8
200300b0:	80000000 	or	r0, r0, r0

200300b4 <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200300b4:	3021fff8 	addik	r1, r1, -8
200300b8:	fa610004 	swi	r19, r1, 4
200300bc:	12610000 	addk	r19, r1, r0
200300c0:	f8b3000c 	swi	r5, r19, 12
200300c4:	f8d30010 	swi	r6, r19, 16
200300c8:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200300cc:	e873000c 	lwi	r3, r19, 12
200300d0:	e8830004 	lwi	r4, r3, 4
200300d4:	e873000c 	lwi	r3, r19, 12
200300d8:	e8630010 	lwi	r3, r3, 16
200300dc:	e8a30000 	lwi	r5, r3, 0
200300e0:	e873000c 	lwi	r3, r19, 12
200300e4:	e8630000 	lwi	r3, r3, 0
200300e8:	3063ffff 	addik	r3, r3, -1
200300ec:	84651800 	and	r3, r5, r3
200300f0:	64630403 	bslli	r3, r3, 3
200300f4:	10641800 	addk	r3, r4, r3
200300f8:	e8930010 	lwi	r4, r19, 16
200300fc:	e8b30014 	lwi	r5, r19, 20
20030100:	f8830000 	swi	r4, r3, 0
20030104:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20030108:	e873000c 	lwi	r3, r19, 12
2003010c:	e8630010 	lwi	r3, r3, 16
20030110:	e8830000 	lwi	r4, r3, 0
20030114:	30840001 	addik	r4, r4, 1
20030118:	f8830000 	swi	r4, r3, 0
}
2003011c:	10330000 	addk	r1, r19, r0
20030120:	ea610004 	lwi	r19, r1, 4
20030124:	30210008 	addik	r1, r1, 8
20030128:	b60f0008 	rtsd	r15, 8
2003012c:	80000000 	or	r0, r0, r0

20030130 <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20030130:	3021fff8 	addik	r1, r1, -8
20030134:	fa610004 	swi	r19, r1, 4
20030138:	12610000 	addk	r19, r1, r0
2003013c:	f8b3000c 	swi	r5, r19, 12
20030140:	f8d30010 	swi	r6, r19, 16
20030144:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20030148:	e873000c 	lwi	r3, r19, 12
2003014c:	e8630010 	lwi	r3, r3, 16
20030150:	e8830000 	lwi	r4, r3, 0
20030154:	e873000c 	lwi	r3, r19, 12
20030158:	e8a3000c 	lwi	r5, r3, 12
2003015c:	e8730010 	lwi	r3, r19, 16
20030160:	64630402 	bslli	r3, r3, 2
20030164:	10651800 	addk	r3, r5, r3
20030168:	e8630000 	lwi	r3, r3, 0
2003016c:	14a32000 	rsubk	r5, r3, r4
20030170:	30600001 	addik	r3, r0, 1
20030174:	e8930014 	lwi	r4, r19, 20
20030178:	16442803 	cmpu	r18, r4, r5
2003017c:	bcb20008 	bgei	r18, 8		// 20030184
20030180:	10600000 	addk	r3, r0, r0
20030184:	a46300ff 	andi	r3, r3, 255
}
20030188:	10330000 	addk	r1, r19, r0
2003018c:	ea610004 	lwi	r19, r1, 4
20030190:	30210008 	addik	r1, r1, 8
20030194:	b60f0008 	rtsd	r15, 8
20030198:	80000000 	or	r0, r0, r0

2003019c <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003019c:	3021fff8 	addik	r1, r1, -8
200301a0:	fa610004 	swi	r19, r1, 4
200301a4:	12610000 	addk	r19, r1, r0
200301a8:	f8b3000c 	swi	r5, r19, 12
200301ac:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200301b0:	e873000c 	lwi	r3, r19, 12
200301b4:	e8630010 	lwi	r3, r3, 16
200301b8:	e8830000 	lwi	r4, r3, 0
200301bc:	e873000c 	lwi	r3, r19, 12
200301c0:	e8a3000c 	lwi	r5, r3, 12
200301c4:	e8730010 	lwi	r3, r19, 16
200301c8:	64630402 	bslli	r3, r3, 2
200301cc:	10651800 	addk	r3, r5, r3
200301d0:	e8630000 	lwi	r3, r3, 0
200301d4:	14632000 	rsubk	r3, r3, r4
}
200301d8:	10330000 	addk	r1, r19, r0
200301dc:	ea610004 	lwi	r19, r1, 4
200301e0:	30210008 	addik	r1, r1, 8
200301e4:	b60f0008 	rtsd	r15, 8
200301e8:	80000000 	or	r0, r0, r0

200301ec <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200301ec:	3021fff4 	addik	r1, r1, -12
200301f0:	fa610008 	swi	r19, r1, 8
200301f4:	12610000 	addk	r19, r1, r0
200301f8:	f8b30010 	swi	r5, r19, 16
200301fc:	f8d30014 	swi	r6, r19, 20
20030200:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20030204:	f8130004 	swi	r0, r19, 4
20030208:	b800005c 	bri	92		// 20030264
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003020c:	e8730010 	lwi	r3, r19, 16
20030210:	e8830000 	lwi	r4, r3, 0
20030214:	e8730010 	lwi	r3, r19, 16
20030218:	e8a3000c 	lwi	r5, r3, 12
2003021c:	e8730004 	lwi	r3, r19, 4
20030220:	64630402 	bslli	r3, r3, 2
20030224:	10651800 	addk	r3, r5, r3
20030228:	e8a30000 	lwi	r5, r3, 0
2003022c:	e8730010 	lwi	r3, r19, 16
20030230:	e8630010 	lwi	r3, r3, 16
20030234:	e8630000 	lwi	r3, r3, 0
20030238:	14632800 	rsubk	r3, r3, r5
2003023c:	10641800 	addk	r3, r4, r3
20030240:	30830001 	addik	r4, r3, 1
20030244:	e8730018 	lwi	r3, r19, 24
20030248:	16441803 	cmpu	r18, r4, r3
2003024c:	bc52000c 	blti	r18, 12		// 20030258
            return 0;
20030250:	10600000 	addk	r3, r0, r0
20030254:	b8000024 	bri	36		// 20030278
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20030258:	e8730004 	lwi	r3, r19, 4
2003025c:	30630001 	addik	r3, r3, 1
20030260:	f8730004 	swi	r3, r19, 4
20030264:	e8930004 	lwi	r4, r19, 4
20030268:	e8730014 	lwi	r3, r19, 20
2003026c:	16432003 	cmpu	r18, r3, r4
20030270:	bc52ff9c 	blti	r18, -100		// 2003020c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20030274:	30600001 	addik	r3, r0, 1
}
20030278:	10330000 	addk	r1, r19, r0
2003027c:	ea610008 	lwi	r19, r1, 8
20030280:	3021000c 	addik	r1, r1, 12
20030284:	b60f0008 	rtsd	r15, 8
20030288:	80000000 	or	r0, r0, r0

2003028c <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003028c:	3021ffec 	addik	r1, r1, -20
20030290:	fa610010 	swi	r19, r1, 16
20030294:	12610000 	addk	r19, r1, r0
20030298:	f8b30018 	swi	r5, r19, 24
2003029c:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200302a0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200302a4:	f8130004 	swi	r0, r19, 4
200302a8:	b8000054 	bri	84		// 200302fc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200302ac:	e8730018 	lwi	r3, r19, 24
200302b0:	e8630010 	lwi	r3, r3, 16
200302b4:	e8830000 	lwi	r4, r3, 0
200302b8:	e8730018 	lwi	r3, r19, 24
200302bc:	e8a3000c 	lwi	r5, r3, 12
200302c0:	e8730004 	lwi	r3, r19, 4
200302c4:	64630402 	bslli	r3, r3, 2
200302c8:	10651800 	addk	r3, r5, r3
200302cc:	e8630000 	lwi	r3, r3, 0
200302d0:	14632000 	rsubk	r3, r3, r4
200302d4:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200302d8:	e8930008 	lwi	r4, r19, 8
200302dc:	e873000c 	lwi	r3, r19, 12
200302e0:	16441803 	cmpu	r18, r4, r3
200302e4:	bcb20008 	bgei	r18, 8		// 200302ec
200302e8:	10640000 	addk	r3, r4, r0
200302ec:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200302f0:	e8730004 	lwi	r3, r19, 4
200302f4:	30630001 	addik	r3, r3, 1
200302f8:	f8730004 	swi	r3, r19, 4
200302fc:	e8930004 	lwi	r4, r19, 4
20030300:	e873001c 	lwi	r3, r19, 28
20030304:	16432003 	cmpu	r18, r3, r4
20030308:	bc52ffa4 	blti	r18, -92		// 200302ac
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003030c:	e8730018 	lwi	r3, r19, 24
20030310:	e8830000 	lwi	r4, r3, 0
20030314:	e8730008 	lwi	r3, r19, 8
20030318:	14632000 	rsubk	r3, r3, r4
}
2003031c:	10330000 	addk	r1, r19, r0
20030320:	ea610010 	lwi	r19, r1, 16
20030324:	30210014 	addik	r1, r1, 20
20030328:	b60f0008 	rtsd	r15, 8
2003032c:	80000000 	or	r0, r0, r0

20030330 <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20030330:	3021fff4 	addik	r1, r1, -12
20030334:	fa610008 	swi	r19, r1, 8
20030338:	12610000 	addk	r19, r1, r0
2003033c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20030340:	e8730010 	lwi	r3, r19, 16
20030344:	e8630010 	lwi	r3, r3, 16
20030348:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003034c:	f8130004 	swi	r0, r19, 4
20030350:	b8000028 	bri	40		// 20030378
        fifo->read_inds[i] = 0;
20030354:	e8730010 	lwi	r3, r19, 16
20030358:	e883000c 	lwi	r4, r3, 12
2003035c:	e8730004 	lwi	r3, r19, 4
20030360:	64630402 	bslli	r3, r3, 2
20030364:	10641800 	addk	r3, r4, r3
20030368:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003036c:	e8730004 	lwi	r3, r19, 4
20030370:	30630001 	addik	r3, r3, 1
20030374:	f8730004 	swi	r3, r19, 4
20030378:	e8730010 	lwi	r3, r19, 16
2003037c:	e8830008 	lwi	r4, r3, 8
20030380:	e8730004 	lwi	r3, r19, 4
20030384:	16441803 	cmpu	r18, r4, r3
20030388:	bc52ffcc 	blti	r18, -52		// 20030354
        fifo->read_inds[i] = 0;
    }
}
2003038c:	10330000 	addk	r1, r19, r0
20030390:	ea610008 	lwi	r19, r1, 8
20030394:	3021000c 	addik	r1, r1, 12
20030398:	b60f0008 	rtsd	r15, 8
2003039c:	80000000 	or	r0, r0, r0

200303a0 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200303a0:	3021fff4 	addik	r1, r1, -12
200303a4:	fa610008 	swi	r19, r1, 8
200303a8:	12610000 	addk	r19, r1, r0
200303ac:	f8b30010 	swi	r5, r19, 16
200303b0:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200303b4:	e8730010 	lwi	r3, r19, 16
200303b8:	e8830004 	lwi	r4, r3, 4
200303bc:	e8730010 	lwi	r3, r19, 16
200303c0:	e8a3000c 	lwi	r5, r3, 12
200303c4:	e8730014 	lwi	r3, r19, 20
200303c8:	64630402 	bslli	r3, r3, 2
200303cc:	10651800 	addk	r3, r5, r3
200303d0:	e8a30000 	lwi	r5, r3, 0
200303d4:	e8730010 	lwi	r3, r19, 16
200303d8:	e8630000 	lwi	r3, r3, 0
200303dc:	3063ffff 	addik	r3, r3, -1
200303e0:	84651800 	and	r3, r5, r3
200303e4:	10641800 	addk	r3, r4, r3
200303e8:	e0630000 	lbui	r3, r3, 0
200303ec:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200303f0:	e8730010 	lwi	r3, r19, 16
200303f4:	e883000c 	lwi	r4, r3, 12
200303f8:	e8730014 	lwi	r3, r19, 20
200303fc:	64630402 	bslli	r3, r3, 2
20030400:	10641800 	addk	r3, r4, r3
20030404:	e8830000 	lwi	r4, r3, 0
20030408:	30840001 	addik	r4, r4, 1
2003040c:	f8830000 	swi	r4, r3, 0
    return value;
20030410:	e0730004 	lbui	r3, r19, 4
}
20030414:	10330000 	addk	r1, r19, r0
20030418:	ea610008 	lwi	r19, r1, 8
2003041c:	3021000c 	addik	r1, r1, 12
20030420:	b60f0008 	rtsd	r15, 8
20030424:	80000000 	or	r0, r0, r0

20030428 <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20030428:	3021fff8 	addik	r1, r1, -8
2003042c:	fa610004 	swi	r19, r1, 4
20030430:	12610000 	addk	r19, r1, r0
20030434:	f8b3000c 	swi	r5, r19, 12
20030438:	10660000 	addk	r3, r6, r0
2003043c:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20030440:	e873000c 	lwi	r3, r19, 12
20030444:	e8830004 	lwi	r4, r3, 4
20030448:	e873000c 	lwi	r3, r19, 12
2003044c:	e8630010 	lwi	r3, r3, 16
20030450:	e8a30000 	lwi	r5, r3, 0
20030454:	e873000c 	lwi	r3, r19, 12
20030458:	e8630000 	lwi	r3, r3, 0
2003045c:	3063ffff 	addik	r3, r3, -1
20030460:	84651800 	and	r3, r5, r3
20030464:	10641800 	addk	r3, r4, r3
20030468:	e0930010 	lbui	r4, r19, 16
2003046c:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20030470:	e873000c 	lwi	r3, r19, 12
20030474:	e8630010 	lwi	r3, r3, 16
20030478:	e8830000 	lwi	r4, r3, 0
2003047c:	30840001 	addik	r4, r4, 1
20030480:	f8830000 	swi	r4, r3, 0
}
20030484:	10330000 	addk	r1, r19, r0
20030488:	ea610004 	lwi	r19, r1, 4
2003048c:	30210008 	addik	r1, r1, 8
20030490:	b60f0008 	rtsd	r15, 8
20030494:	80000000 	or	r0, r0, r0

20030498 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20030498:	3021fff8 	addik	r1, r1, -8
2003049c:	fa610004 	swi	r19, r1, 4
200304a0:	12610000 	addk	r19, r1, r0
200304a4:	f8b3000c 	swi	r5, r19, 12
200304a8:	f8d30010 	swi	r6, r19, 16
200304ac:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200304b0:	e873000c 	lwi	r3, r19, 12
200304b4:	e8630010 	lwi	r3, r3, 16
200304b8:	e8830000 	lwi	r4, r3, 0
200304bc:	e873000c 	lwi	r3, r19, 12
200304c0:	e8a3000c 	lwi	r5, r3, 12
200304c4:	e8730010 	lwi	r3, r19, 16
200304c8:	64630402 	bslli	r3, r3, 2
200304cc:	10651800 	addk	r3, r5, r3
200304d0:	e8630000 	lwi	r3, r3, 0
200304d4:	14a32000 	rsubk	r5, r3, r4
200304d8:	30600001 	addik	r3, r0, 1
200304dc:	e8930014 	lwi	r4, r19, 20
200304e0:	16442803 	cmpu	r18, r4, r5
200304e4:	bcb20008 	bgei	r18, 8		// 200304ec
200304e8:	10600000 	addk	r3, r0, r0
200304ec:	a46300ff 	andi	r3, r3, 255
}
200304f0:	10330000 	addk	r1, r19, r0
200304f4:	ea610004 	lwi	r19, r1, 4
200304f8:	30210008 	addik	r1, r1, 8
200304fc:	b60f0008 	rtsd	r15, 8
20030500:	80000000 	or	r0, r0, r0

20030504 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20030504:	3021fff8 	addik	r1, r1, -8
20030508:	fa610004 	swi	r19, r1, 4
2003050c:	12610000 	addk	r19, r1, r0
20030510:	f8b3000c 	swi	r5, r19, 12
20030514:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20030518:	e873000c 	lwi	r3, r19, 12
2003051c:	e8630010 	lwi	r3, r3, 16
20030520:	e8830000 	lwi	r4, r3, 0
20030524:	e873000c 	lwi	r3, r19, 12
20030528:	e8a3000c 	lwi	r5, r3, 12
2003052c:	e8730010 	lwi	r3, r19, 16
20030530:	64630402 	bslli	r3, r3, 2
20030534:	10651800 	addk	r3, r5, r3
20030538:	e8630000 	lwi	r3, r3, 0
2003053c:	14632000 	rsubk	r3, r3, r4
}
20030540:	10330000 	addk	r1, r19, r0
20030544:	ea610004 	lwi	r19, r1, 4
20030548:	30210008 	addik	r1, r1, 8
2003054c:	b60f0008 	rtsd	r15, 8
20030550:	80000000 	or	r0, r0, r0

20030554 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20030554:	3021fff4 	addik	r1, r1, -12
20030558:	fa610008 	swi	r19, r1, 8
2003055c:	12610000 	addk	r19, r1, r0
20030560:	f8b30010 	swi	r5, r19, 16
20030564:	f8d30014 	swi	r6, r19, 20
20030568:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003056c:	f8130004 	swi	r0, r19, 4
20030570:	b800005c 	bri	92		// 200305cc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20030574:	e8730010 	lwi	r3, r19, 16
20030578:	e8830000 	lwi	r4, r3, 0
2003057c:	e8730010 	lwi	r3, r19, 16
20030580:	e8a3000c 	lwi	r5, r3, 12
20030584:	e8730004 	lwi	r3, r19, 4
20030588:	64630402 	bslli	r3, r3, 2
2003058c:	10651800 	addk	r3, r5, r3
20030590:	e8a30000 	lwi	r5, r3, 0
20030594:	e8730010 	lwi	r3, r19, 16
20030598:	e8630010 	lwi	r3, r3, 16
2003059c:	e8630000 	lwi	r3, r3, 0
200305a0:	14632800 	rsubk	r3, r3, r5
200305a4:	10641800 	addk	r3, r4, r3
200305a8:	30830001 	addik	r4, r3, 1
200305ac:	e8730018 	lwi	r3, r19, 24
200305b0:	16441803 	cmpu	r18, r4, r3
200305b4:	bc52000c 	blti	r18, 12		// 200305c0
            return 0;
200305b8:	10600000 	addk	r3, r0, r0
200305bc:	b8000024 	bri	36		// 200305e0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200305c0:	e8730004 	lwi	r3, r19, 4
200305c4:	30630001 	addik	r3, r3, 1
200305c8:	f8730004 	swi	r3, r19, 4
200305cc:	e8930004 	lwi	r4, r19, 4
200305d0:	e8730014 	lwi	r3, r19, 20
200305d4:	16432003 	cmpu	r18, r3, r4
200305d8:	bc52ff9c 	blti	r18, -100		// 20030574
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200305dc:	30600001 	addik	r3, r0, 1
}
200305e0:	10330000 	addk	r1, r19, r0
200305e4:	ea610008 	lwi	r19, r1, 8
200305e8:	3021000c 	addik	r1, r1, 12
200305ec:	b60f0008 	rtsd	r15, 8
200305f0:	80000000 	or	r0, r0, r0

200305f4 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200305f4:	3021ffec 	addik	r1, r1, -20
200305f8:	fa610010 	swi	r19, r1, 16
200305fc:	12610000 	addk	r19, r1, r0
20030600:	f8b30018 	swi	r5, r19, 24
20030604:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20030608:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003060c:	f8130004 	swi	r0, r19, 4
20030610:	b8000054 	bri	84		// 20030664
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20030614:	e8730018 	lwi	r3, r19, 24
20030618:	e8630010 	lwi	r3, r3, 16
2003061c:	e8830000 	lwi	r4, r3, 0
20030620:	e8730018 	lwi	r3, r19, 24
20030624:	e8a3000c 	lwi	r5, r3, 12
20030628:	e8730004 	lwi	r3, r19, 4
2003062c:	64630402 	bslli	r3, r3, 2
20030630:	10651800 	addk	r3, r5, r3
20030634:	e8630000 	lwi	r3, r3, 0
20030638:	14632000 	rsubk	r3, r3, r4
2003063c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20030640:	e8930008 	lwi	r4, r19, 8
20030644:	e873000c 	lwi	r3, r19, 12
20030648:	16441803 	cmpu	r18, r4, r3
2003064c:	bcb20008 	bgei	r18, 8		// 20030654
20030650:	10640000 	addk	r3, r4, r0
20030654:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20030658:	e8730004 	lwi	r3, r19, 4
2003065c:	30630001 	addik	r3, r3, 1
20030660:	f8730004 	swi	r3, r19, 4
20030664:	e8930004 	lwi	r4, r19, 4
20030668:	e873001c 	lwi	r3, r19, 28
2003066c:	16432003 	cmpu	r18, r3, r4
20030670:	bc52ffa4 	blti	r18, -92		// 20030614
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20030674:	e8730018 	lwi	r3, r19, 24
20030678:	e8830000 	lwi	r4, r3, 0
2003067c:	e8730008 	lwi	r3, r19, 8
20030680:	14632000 	rsubk	r3, r3, r4
}
20030684:	10330000 	addk	r1, r19, r0
20030688:	ea610010 	lwi	r19, r1, 16
2003068c:	30210014 	addik	r1, r1, 20
20030690:	b60f0008 	rtsd	r15, 8
20030694:	80000000 	or	r0, r0, r0

20030698 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20030698:	3021fff4 	addik	r1, r1, -12
2003069c:	fa610008 	swi	r19, r1, 8
200306a0:	12610000 	addk	r19, r1, r0
200306a4:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
200306a8:	e8730010 	lwi	r3, r19, 16
200306ac:	e8630010 	lwi	r3, r3, 16
200306b0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200306b4:	f8130004 	swi	r0, r19, 4
200306b8:	b8000028 	bri	40		// 200306e0
        fifo->read_inds[i] = 0;
200306bc:	e8730010 	lwi	r3, r19, 16
200306c0:	e883000c 	lwi	r4, r3, 12
200306c4:	e8730004 	lwi	r3, r19, 4
200306c8:	64630402 	bslli	r3, r3, 2
200306cc:	10641800 	addk	r3, r4, r3
200306d0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200306d4:	e8730004 	lwi	r3, r19, 4
200306d8:	30630001 	addik	r3, r3, 1
200306dc:	f8730004 	swi	r3, r19, 4
200306e0:	e8730010 	lwi	r3, r19, 16
200306e4:	e8830008 	lwi	r4, r3, 8
200306e8:	e8730004 	lwi	r3, r19, 4
200306ec:	16441803 	cmpu	r18, r4, r3
200306f0:	bc52ffcc 	blti	r18, -52		// 200306bc
        fifo->read_inds[i] = 0;
    }
}
200306f4:	10330000 	addk	r1, r19, r0
200306f8:	ea610008 	lwi	r19, r1, 8
200306fc:	3021000c 	addik	r1, r1, 12
20030700:	b60f0008 	rtsd	r15, 8
20030704:	80000000 	or	r0, r0, r0

20030708 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20030708:	3021fff4 	addik	r1, r1, -12
2003070c:	fa610008 	swi	r19, r1, 8
20030710:	12610000 	addk	r19, r1, r0
20030714:	f8b30010 	swi	r5, r19, 16
20030718:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003071c:	e8730010 	lwi	r3, r19, 16
20030720:	e8830004 	lwi	r4, r3, 4
20030724:	e8730010 	lwi	r3, r19, 16
20030728:	e8a3000c 	lwi	r5, r3, 12
2003072c:	e8730014 	lwi	r3, r19, 20
20030730:	64630402 	bslli	r3, r3, 2
20030734:	10651800 	addk	r3, r5, r3
20030738:	e8a30000 	lwi	r5, r3, 0
2003073c:	e8730010 	lwi	r3, r19, 16
20030740:	e8630000 	lwi	r3, r3, 0
20030744:	3063ffff 	addik	r3, r3, -1
20030748:	84651800 	and	r3, r5, r3
2003074c:	10631800 	addk	r3, r3, r3
20030750:	10641800 	addk	r3, r4, r3
20030754:	e4630000 	lhui	r3, r3, 0
20030758:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003075c:	e8730010 	lwi	r3, r19, 16
20030760:	e883000c 	lwi	r4, r3, 12
20030764:	e8730014 	lwi	r3, r19, 20
20030768:	64630402 	bslli	r3, r3, 2
2003076c:	10641800 	addk	r3, r4, r3
20030770:	e8830000 	lwi	r4, r3, 0
20030774:	30840001 	addik	r4, r4, 1
20030778:	f8830000 	swi	r4, r3, 0
    return value;
2003077c:	e4730004 	lhui	r3, r19, 4
}
20030780:	10330000 	addk	r1, r19, r0
20030784:	ea610008 	lwi	r19, r1, 8
20030788:	3021000c 	addik	r1, r1, 12
2003078c:	b60f0008 	rtsd	r15, 8
20030790:	80000000 	or	r0, r0, r0

20030794 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20030794:	3021fff8 	addik	r1, r1, -8
20030798:	fa610004 	swi	r19, r1, 4
2003079c:	12610000 	addk	r19, r1, r0
200307a0:	f8b3000c 	swi	r5, r19, 12
200307a4:	10660000 	addk	r3, r6, r0
200307a8:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200307ac:	e873000c 	lwi	r3, r19, 12
200307b0:	e8830004 	lwi	r4, r3, 4
200307b4:	e873000c 	lwi	r3, r19, 12
200307b8:	e8630010 	lwi	r3, r3, 16
200307bc:	e8a30000 	lwi	r5, r3, 0
200307c0:	e873000c 	lwi	r3, r19, 12
200307c4:	e8630000 	lwi	r3, r3, 0
200307c8:	3063ffff 	addik	r3, r3, -1
200307cc:	84651800 	and	r3, r5, r3
200307d0:	10631800 	addk	r3, r3, r3
200307d4:	10641800 	addk	r3, r4, r3
200307d8:	e4930010 	lhui	r4, r19, 16
200307dc:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
200307e0:	e873000c 	lwi	r3, r19, 12
200307e4:	e8630010 	lwi	r3, r3, 16
200307e8:	e8830000 	lwi	r4, r3, 0
200307ec:	30840001 	addik	r4, r4, 1
200307f0:	f8830000 	swi	r4, r3, 0
}
200307f4:	10330000 	addk	r1, r19, r0
200307f8:	ea610004 	lwi	r19, r1, 4
200307fc:	30210008 	addik	r1, r1, 8
20030800:	b60f0008 	rtsd	r15, 8
20030804:	80000000 	or	r0, r0, r0

20030808 <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20030808:	3021fff8 	addik	r1, r1, -8
2003080c:	fa610004 	swi	r19, r1, 4
20030810:	12610000 	addk	r19, r1, r0
20030814:	f8b3000c 	swi	r5, r19, 12
20030818:	f8d30010 	swi	r6, r19, 16
2003081c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20030820:	e873000c 	lwi	r3, r19, 12
20030824:	e8630010 	lwi	r3, r3, 16
20030828:	e8830000 	lwi	r4, r3, 0
2003082c:	e873000c 	lwi	r3, r19, 12
20030830:	e8a3000c 	lwi	r5, r3, 12
20030834:	e8730010 	lwi	r3, r19, 16
20030838:	64630402 	bslli	r3, r3, 2
2003083c:	10651800 	addk	r3, r5, r3
20030840:	e8630000 	lwi	r3, r3, 0
20030844:	14a32000 	rsubk	r5, r3, r4
20030848:	30600001 	addik	r3, r0, 1
2003084c:	e8930014 	lwi	r4, r19, 20
20030850:	16442803 	cmpu	r18, r4, r5
20030854:	bcb20008 	bgei	r18, 8		// 2003085c
20030858:	10600000 	addk	r3, r0, r0
2003085c:	a46300ff 	andi	r3, r3, 255
}
20030860:	10330000 	addk	r1, r19, r0
20030864:	ea610004 	lwi	r19, r1, 4
20030868:	30210008 	addik	r1, r1, 8
2003086c:	b60f0008 	rtsd	r15, 8
20030870:	80000000 	or	r0, r0, r0

20030874 <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20030874:	3021fff8 	addik	r1, r1, -8
20030878:	fa610004 	swi	r19, r1, 4
2003087c:	12610000 	addk	r19, r1, r0
20030880:	f8b3000c 	swi	r5, r19, 12
20030884:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20030888:	e873000c 	lwi	r3, r19, 12
2003088c:	e8630010 	lwi	r3, r3, 16
20030890:	e8830000 	lwi	r4, r3, 0
20030894:	e873000c 	lwi	r3, r19, 12
20030898:	e8a3000c 	lwi	r5, r3, 12
2003089c:	e8730010 	lwi	r3, r19, 16
200308a0:	64630402 	bslli	r3, r3, 2
200308a4:	10651800 	addk	r3, r5, r3
200308a8:	e8630000 	lwi	r3, r3, 0
200308ac:	14632000 	rsubk	r3, r3, r4
}
200308b0:	10330000 	addk	r1, r19, r0
200308b4:	ea610004 	lwi	r19, r1, 4
200308b8:	30210008 	addik	r1, r1, 8
200308bc:	b60f0008 	rtsd	r15, 8
200308c0:	80000000 	or	r0, r0, r0

200308c4 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200308c4:	3021fff4 	addik	r1, r1, -12
200308c8:	fa610008 	swi	r19, r1, 8
200308cc:	12610000 	addk	r19, r1, r0
200308d0:	f8b30010 	swi	r5, r19, 16
200308d4:	f8d30014 	swi	r6, r19, 20
200308d8:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200308dc:	f8130004 	swi	r0, r19, 4
200308e0:	b800005c 	bri	92		// 2003093c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200308e4:	e8730010 	lwi	r3, r19, 16
200308e8:	e8830000 	lwi	r4, r3, 0
200308ec:	e8730010 	lwi	r3, r19, 16
200308f0:	e8a3000c 	lwi	r5, r3, 12
200308f4:	e8730004 	lwi	r3, r19, 4
200308f8:	64630402 	bslli	r3, r3, 2
200308fc:	10651800 	addk	r3, r5, r3
20030900:	e8a30000 	lwi	r5, r3, 0
20030904:	e8730010 	lwi	r3, r19, 16
20030908:	e8630010 	lwi	r3, r3, 16
2003090c:	e8630000 	lwi	r3, r3, 0
20030910:	14632800 	rsubk	r3, r3, r5
20030914:	10641800 	addk	r3, r4, r3
20030918:	30830001 	addik	r4, r3, 1
2003091c:	e8730018 	lwi	r3, r19, 24
20030920:	16441803 	cmpu	r18, r4, r3
20030924:	bc52000c 	blti	r18, 12		// 20030930
            return 0;
20030928:	10600000 	addk	r3, r0, r0
2003092c:	b8000024 	bri	36		// 20030950
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20030930:	e8730004 	lwi	r3, r19, 4
20030934:	30630001 	addik	r3, r3, 1
20030938:	f8730004 	swi	r3, r19, 4
2003093c:	e8930004 	lwi	r4, r19, 4
20030940:	e8730014 	lwi	r3, r19, 20
20030944:	16432003 	cmpu	r18, r3, r4
20030948:	bc52ff9c 	blti	r18, -100		// 200308e4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003094c:	30600001 	addik	r3, r0, 1
}
20030950:	10330000 	addk	r1, r19, r0
20030954:	ea610008 	lwi	r19, r1, 8
20030958:	3021000c 	addik	r1, r1, 12
2003095c:	b60f0008 	rtsd	r15, 8
20030960:	80000000 	or	r0, r0, r0

20030964 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20030964:	3021ffec 	addik	r1, r1, -20
20030968:	fa610010 	swi	r19, r1, 16
2003096c:	12610000 	addk	r19, r1, r0
20030970:	f8b30018 	swi	r5, r19, 24
20030974:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20030978:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003097c:	f8130004 	swi	r0, r19, 4
20030980:	b8000054 	bri	84		// 200309d4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20030984:	e8730018 	lwi	r3, r19, 24
20030988:	e8630010 	lwi	r3, r3, 16
2003098c:	e8830000 	lwi	r4, r3, 0
20030990:	e8730018 	lwi	r3, r19, 24
20030994:	e8a3000c 	lwi	r5, r3, 12
20030998:	e8730004 	lwi	r3, r19, 4
2003099c:	64630402 	bslli	r3, r3, 2
200309a0:	10651800 	addk	r3, r5, r3
200309a4:	e8630000 	lwi	r3, r3, 0
200309a8:	14632000 	rsubk	r3, r3, r4
200309ac:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200309b0:	e8930008 	lwi	r4, r19, 8
200309b4:	e873000c 	lwi	r3, r19, 12
200309b8:	16441803 	cmpu	r18, r4, r3
200309bc:	bcb20008 	bgei	r18, 8		// 200309c4
200309c0:	10640000 	addk	r3, r4, r0
200309c4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200309c8:	e8730004 	lwi	r3, r19, 4
200309cc:	30630001 	addik	r3, r3, 1
200309d0:	f8730004 	swi	r3, r19, 4
200309d4:	e8930004 	lwi	r4, r19, 4
200309d8:	e873001c 	lwi	r3, r19, 28
200309dc:	16432003 	cmpu	r18, r3, r4
200309e0:	bc52ffa4 	blti	r18, -92		// 20030984
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200309e4:	e8730018 	lwi	r3, r19, 24
200309e8:	e8830000 	lwi	r4, r3, 0
200309ec:	e8730008 	lwi	r3, r19, 8
200309f0:	14632000 	rsubk	r3, r3, r4
}
200309f4:	10330000 	addk	r1, r19, r0
200309f8:	ea610010 	lwi	r19, r1, 16
200309fc:	30210014 	addik	r1, r1, 20
20030a00:	b60f0008 	rtsd	r15, 8
20030a04:	80000000 	or	r0, r0, r0

20030a08 <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20030a08:	3021fff4 	addik	r1, r1, -12
20030a0c:	fa610008 	swi	r19, r1, 8
20030a10:	12610000 	addk	r19, r1, r0
20030a14:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20030a18:	e8730010 	lwi	r3, r19, 16
20030a1c:	e8630010 	lwi	r3, r3, 16
20030a20:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20030a24:	f8130004 	swi	r0, r19, 4
20030a28:	b8000028 	bri	40		// 20030a50
        fifo->read_inds[i] = 0;
20030a2c:	e8730010 	lwi	r3, r19, 16
20030a30:	e883000c 	lwi	r4, r3, 12
20030a34:	e8730004 	lwi	r3, r19, 4
20030a38:	64630402 	bslli	r3, r3, 2
20030a3c:	10641800 	addk	r3, r4, r3
20030a40:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20030a44:	e8730004 	lwi	r3, r19, 4
20030a48:	30630001 	addik	r3, r3, 1
20030a4c:	f8730004 	swi	r3, r19, 4
20030a50:	e8730010 	lwi	r3, r19, 16
20030a54:	e8830008 	lwi	r4, r3, 8
20030a58:	e8730004 	lwi	r3, r19, 4
20030a5c:	16441803 	cmpu	r18, r4, r3
20030a60:	bc52ffcc 	blti	r18, -52		// 20030a2c
        fifo->read_inds[i] = 0;
    }
}
20030a64:	10330000 	addk	r1, r19, r0
20030a68:	ea610008 	lwi	r19, r1, 8
20030a6c:	3021000c 	addik	r1, r1, 12
20030a70:	b60f0008 	rtsd	r15, 8
20030a74:	80000000 	or	r0, r0, r0

20030a78 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20030a78:	3021fff4 	addik	r1, r1, -12
20030a7c:	fa610008 	swi	r19, r1, 8
20030a80:	12610000 	addk	r19, r1, r0
20030a84:	f8b30010 	swi	r5, r19, 16
20030a88:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20030a8c:	e8730010 	lwi	r3, r19, 16
20030a90:	e8830004 	lwi	r4, r3, 4
20030a94:	e8730010 	lwi	r3, r19, 16
20030a98:	e8a3000c 	lwi	r5, r3, 12
20030a9c:	e8730014 	lwi	r3, r19, 20
20030aa0:	64630402 	bslli	r3, r3, 2
20030aa4:	10651800 	addk	r3, r5, r3
20030aa8:	e8a30000 	lwi	r5, r3, 0
20030aac:	e8730010 	lwi	r3, r19, 16
20030ab0:	e8630000 	lwi	r3, r3, 0
20030ab4:	3063ffff 	addik	r3, r3, -1
20030ab8:	84651800 	and	r3, r5, r3
20030abc:	64630402 	bslli	r3, r3, 2
20030ac0:	10641800 	addk	r3, r4, r3
20030ac4:	e8630000 	lwi	r3, r3, 0
20030ac8:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20030acc:	e8730010 	lwi	r3, r19, 16
20030ad0:	e883000c 	lwi	r4, r3, 12
20030ad4:	e8730014 	lwi	r3, r19, 20
20030ad8:	64630402 	bslli	r3, r3, 2
20030adc:	10641800 	addk	r3, r4, r3
20030ae0:	e8830000 	lwi	r4, r3, 0
20030ae4:	30840001 	addik	r4, r4, 1
20030ae8:	f8830000 	swi	r4, r3, 0
    return value;
20030aec:	e8730004 	lwi	r3, r19, 4
}
20030af0:	10330000 	addk	r1, r19, r0
20030af4:	ea610008 	lwi	r19, r1, 8
20030af8:	3021000c 	addik	r1, r1, 12
20030afc:	b60f0008 	rtsd	r15, 8
20030b00:	80000000 	or	r0, r0, r0

20030b04 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20030b04:	3021fff8 	addik	r1, r1, -8
20030b08:	fa610004 	swi	r19, r1, 4
20030b0c:	12610000 	addk	r19, r1, r0
20030b10:	f8b3000c 	swi	r5, r19, 12
20030b14:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20030b18:	e873000c 	lwi	r3, r19, 12
20030b1c:	e8830004 	lwi	r4, r3, 4
20030b20:	e873000c 	lwi	r3, r19, 12
20030b24:	e8630010 	lwi	r3, r3, 16
20030b28:	e8a30000 	lwi	r5, r3, 0
20030b2c:	e873000c 	lwi	r3, r19, 12
20030b30:	e8630000 	lwi	r3, r3, 0
20030b34:	3063ffff 	addik	r3, r3, -1
20030b38:	84651800 	and	r3, r5, r3
20030b3c:	64630402 	bslli	r3, r3, 2
20030b40:	10641800 	addk	r3, r4, r3
20030b44:	e8930010 	lwi	r4, r19, 16
20030b48:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20030b4c:	e873000c 	lwi	r3, r19, 12
20030b50:	e8630010 	lwi	r3, r3, 16
20030b54:	e8830000 	lwi	r4, r3, 0
20030b58:	30840001 	addik	r4, r4, 1
20030b5c:	f8830000 	swi	r4, r3, 0
}
20030b60:	10330000 	addk	r1, r19, r0
20030b64:	ea610004 	lwi	r19, r1, 4
20030b68:	30210008 	addik	r1, r1, 8
20030b6c:	b60f0008 	rtsd	r15, 8
20030b70:	80000000 	or	r0, r0, r0

20030b74 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20030b74:	3021fff8 	addik	r1, r1, -8
20030b78:	fa610004 	swi	r19, r1, 4
20030b7c:	12610000 	addk	r19, r1, r0
20030b80:	f8b3000c 	swi	r5, r19, 12
20030b84:	f8d30010 	swi	r6, r19, 16
20030b88:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20030b8c:	e873000c 	lwi	r3, r19, 12
20030b90:	e8630010 	lwi	r3, r3, 16
20030b94:	e8830000 	lwi	r4, r3, 0
20030b98:	e873000c 	lwi	r3, r19, 12
20030b9c:	e8a3000c 	lwi	r5, r3, 12
20030ba0:	e8730010 	lwi	r3, r19, 16
20030ba4:	64630402 	bslli	r3, r3, 2
20030ba8:	10651800 	addk	r3, r5, r3
20030bac:	e8630000 	lwi	r3, r3, 0
20030bb0:	14a32000 	rsubk	r5, r3, r4
20030bb4:	30600001 	addik	r3, r0, 1
20030bb8:	e8930014 	lwi	r4, r19, 20
20030bbc:	16442803 	cmpu	r18, r4, r5
20030bc0:	bcb20008 	bgei	r18, 8		// 20030bc8
20030bc4:	10600000 	addk	r3, r0, r0
20030bc8:	a46300ff 	andi	r3, r3, 255
}
20030bcc:	10330000 	addk	r1, r19, r0
20030bd0:	ea610004 	lwi	r19, r1, 4
20030bd4:	30210008 	addik	r1, r1, 8
20030bd8:	b60f0008 	rtsd	r15, 8
20030bdc:	80000000 	or	r0, r0, r0

20030be0 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20030be0:	3021fff8 	addik	r1, r1, -8
20030be4:	fa610004 	swi	r19, r1, 4
20030be8:	12610000 	addk	r19, r1, r0
20030bec:	f8b3000c 	swi	r5, r19, 12
20030bf0:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20030bf4:	e873000c 	lwi	r3, r19, 12
20030bf8:	e8630010 	lwi	r3, r3, 16
20030bfc:	e8830000 	lwi	r4, r3, 0
20030c00:	e873000c 	lwi	r3, r19, 12
20030c04:	e8a3000c 	lwi	r5, r3, 12
20030c08:	e8730010 	lwi	r3, r19, 16
20030c0c:	64630402 	bslli	r3, r3, 2
20030c10:	10651800 	addk	r3, r5, r3
20030c14:	e8630000 	lwi	r3, r3, 0
20030c18:	14632000 	rsubk	r3, r3, r4
}
20030c1c:	10330000 	addk	r1, r19, r0
20030c20:	ea610004 	lwi	r19, r1, 4
20030c24:	30210008 	addik	r1, r1, 8
20030c28:	b60f0008 	rtsd	r15, 8
20030c2c:	80000000 	or	r0, r0, r0

20030c30 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20030c30:	3021fff4 	addik	r1, r1, -12
20030c34:	fa610008 	swi	r19, r1, 8
20030c38:	12610000 	addk	r19, r1, r0
20030c3c:	f8b30010 	swi	r5, r19, 16
20030c40:	f8d30014 	swi	r6, r19, 20
20030c44:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20030c48:	f8130004 	swi	r0, r19, 4
20030c4c:	b800005c 	bri	92		// 20030ca8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20030c50:	e8730010 	lwi	r3, r19, 16
20030c54:	e8830000 	lwi	r4, r3, 0
20030c58:	e8730010 	lwi	r3, r19, 16
20030c5c:	e8a3000c 	lwi	r5, r3, 12
20030c60:	e8730004 	lwi	r3, r19, 4
20030c64:	64630402 	bslli	r3, r3, 2
20030c68:	10651800 	addk	r3, r5, r3
20030c6c:	e8a30000 	lwi	r5, r3, 0
20030c70:	e8730010 	lwi	r3, r19, 16
20030c74:	e8630010 	lwi	r3, r3, 16
20030c78:	e8630000 	lwi	r3, r3, 0
20030c7c:	14632800 	rsubk	r3, r3, r5
20030c80:	10641800 	addk	r3, r4, r3
20030c84:	30830001 	addik	r4, r3, 1
20030c88:	e8730018 	lwi	r3, r19, 24
20030c8c:	16441803 	cmpu	r18, r4, r3
20030c90:	bc52000c 	blti	r18, 12		// 20030c9c
            return 0;
20030c94:	10600000 	addk	r3, r0, r0
20030c98:	b8000024 	bri	36		// 20030cbc
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20030c9c:	e8730004 	lwi	r3, r19, 4
20030ca0:	30630001 	addik	r3, r3, 1
20030ca4:	f8730004 	swi	r3, r19, 4
20030ca8:	e8930004 	lwi	r4, r19, 4
20030cac:	e8730014 	lwi	r3, r19, 20
20030cb0:	16432003 	cmpu	r18, r3, r4
20030cb4:	bc52ff9c 	blti	r18, -100		// 20030c50
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20030cb8:	30600001 	addik	r3, r0, 1
}
20030cbc:	10330000 	addk	r1, r19, r0
20030cc0:	ea610008 	lwi	r19, r1, 8
20030cc4:	3021000c 	addik	r1, r1, 12
20030cc8:	b60f0008 	rtsd	r15, 8
20030ccc:	80000000 	or	r0, r0, r0

20030cd0 <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20030cd0:	3021ffec 	addik	r1, r1, -20
20030cd4:	fa610010 	swi	r19, r1, 16
20030cd8:	12610000 	addk	r19, r1, r0
20030cdc:	f8b30018 	swi	r5, r19, 24
20030ce0:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20030ce4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20030ce8:	f8130004 	swi	r0, r19, 4
20030cec:	b8000054 	bri	84		// 20030d40
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20030cf0:	e8730018 	lwi	r3, r19, 24
20030cf4:	e8630010 	lwi	r3, r3, 16
20030cf8:	e8830000 	lwi	r4, r3, 0
20030cfc:	e8730018 	lwi	r3, r19, 24
20030d00:	e8a3000c 	lwi	r5, r3, 12
20030d04:	e8730004 	lwi	r3, r19, 4
20030d08:	64630402 	bslli	r3, r3, 2
20030d0c:	10651800 	addk	r3, r5, r3
20030d10:	e8630000 	lwi	r3, r3, 0
20030d14:	14632000 	rsubk	r3, r3, r4
20030d18:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20030d1c:	e8930008 	lwi	r4, r19, 8
20030d20:	e873000c 	lwi	r3, r19, 12
20030d24:	16441803 	cmpu	r18, r4, r3
20030d28:	bcb20008 	bgei	r18, 8		// 20030d30
20030d2c:	10640000 	addk	r3, r4, r0
20030d30:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20030d34:	e8730004 	lwi	r3, r19, 4
20030d38:	30630001 	addik	r3, r3, 1
20030d3c:	f8730004 	swi	r3, r19, 4
20030d40:	e8930004 	lwi	r4, r19, 4
20030d44:	e873001c 	lwi	r3, r19, 28
20030d48:	16432003 	cmpu	r18, r3, r4
20030d4c:	bc52ffa4 	blti	r18, -92		// 20030cf0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20030d50:	e8730018 	lwi	r3, r19, 24
20030d54:	e8830000 	lwi	r4, r3, 0
20030d58:	e8730008 	lwi	r3, r19, 8
20030d5c:	14632000 	rsubk	r3, r3, r4
}
20030d60:	10330000 	addk	r1, r19, r0
20030d64:	ea610010 	lwi	r19, r1, 16
20030d68:	30210014 	addik	r1, r1, 20
20030d6c:	b60f0008 	rtsd	r15, 8
20030d70:	80000000 	or	r0, r0, r0

20030d74 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20030d74:	3021fff4 	addik	r1, r1, -12
20030d78:	fa610008 	swi	r19, r1, 8
20030d7c:	12610000 	addk	r19, r1, r0
20030d80:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20030d84:	e8730010 	lwi	r3, r19, 16
20030d88:	e8630010 	lwi	r3, r3, 16
20030d8c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20030d90:	f8130004 	swi	r0, r19, 4
20030d94:	b8000028 	bri	40		// 20030dbc
        fifo->read_inds[i] = 0;
20030d98:	e8730010 	lwi	r3, r19, 16
20030d9c:	e883000c 	lwi	r4, r3, 12
20030da0:	e8730004 	lwi	r3, r19, 4
20030da4:	64630402 	bslli	r3, r3, 2
20030da8:	10641800 	addk	r3, r4, r3
20030dac:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20030db0:	e8730004 	lwi	r3, r19, 4
20030db4:	30630001 	addik	r3, r3, 1
20030db8:	f8730004 	swi	r3, r19, 4
20030dbc:	e8730010 	lwi	r3, r19, 16
20030dc0:	e8830008 	lwi	r4, r3, 8
20030dc4:	e8730004 	lwi	r3, r19, 4
20030dc8:	16441803 	cmpu	r18, r4, r3
20030dcc:	bc52ffcc 	blti	r18, -52		// 20030d98
        fifo->read_inds[i] = 0;
    }
}
20030dd0:	10330000 	addk	r1, r19, r0
20030dd4:	ea610008 	lwi	r19, r1, 8
20030dd8:	3021000c 	addik	r1, r1, 12
20030ddc:	b60f0008 	rtsd	r15, 8
20030de0:	80000000 	or	r0, r0, r0

20030de4 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20030de4:	3021fff0 	addik	r1, r1, -16
20030de8:	fa61000c 	swi	r19, r1, 12
20030dec:	12610000 	addk	r19, r1, r0
20030df0:	f8b30014 	swi	r5, r19, 20
20030df4:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20030df8:	e8730014 	lwi	r3, r19, 20
20030dfc:	e8830004 	lwi	r4, r3, 4
20030e00:	e8730014 	lwi	r3, r19, 20
20030e04:	e8a3000c 	lwi	r5, r3, 12
20030e08:	e8730018 	lwi	r3, r19, 24
20030e0c:	64630402 	bslli	r3, r3, 2
20030e10:	10651800 	addk	r3, r5, r3
20030e14:	e8a30000 	lwi	r5, r3, 0
20030e18:	e8730014 	lwi	r3, r19, 20
20030e1c:	e8630000 	lwi	r3, r3, 0
20030e20:	3063ffff 	addik	r3, r3, -1
20030e24:	84651800 	and	r3, r5, r3
20030e28:	64630403 	bslli	r3, r3, 3
20030e2c:	10641800 	addk	r3, r4, r3
20030e30:	e8830000 	lwi	r4, r3, 0
20030e34:	e8a30004 	lwi	r5, r3, 4
20030e38:	f8930004 	swi	r4, r19, 4
20030e3c:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20030e40:	e8730014 	lwi	r3, r19, 20
20030e44:	e883000c 	lwi	r4, r3, 12
20030e48:	e8730018 	lwi	r3, r19, 24
20030e4c:	64630402 	bslli	r3, r3, 2
20030e50:	10641800 	addk	r3, r4, r3
20030e54:	e8830000 	lwi	r4, r3, 0
20030e58:	30840001 	addik	r4, r4, 1
20030e5c:	f8830000 	swi	r4, r3, 0
    return value;
20030e60:	e8930004 	lwi	r4, r19, 4
20030e64:	e8b30008 	lwi	r5, r19, 8
}
20030e68:	10640000 	addk	r3, r4, r0
20030e6c:	10850000 	addk	r4, r5, r0
20030e70:	10330000 	addk	r1, r19, r0
20030e74:	ea61000c 	lwi	r19, r1, 12
20030e78:	30210010 	addik	r1, r1, 16
20030e7c:	b60f0008 	rtsd	r15, 8
20030e80:	80000000 	or	r0, r0, r0

20030e84 <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20030e84:	3021fff8 	addik	r1, r1, -8
20030e88:	fa610004 	swi	r19, r1, 4
20030e8c:	12610000 	addk	r19, r1, r0
20030e90:	f8b3000c 	swi	r5, r19, 12
20030e94:	f8d30010 	swi	r6, r19, 16
20030e98:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20030e9c:	e873000c 	lwi	r3, r19, 12
20030ea0:	e8830004 	lwi	r4, r3, 4
20030ea4:	e873000c 	lwi	r3, r19, 12
20030ea8:	e8630010 	lwi	r3, r3, 16
20030eac:	e8a30000 	lwi	r5, r3, 0
20030eb0:	e873000c 	lwi	r3, r19, 12
20030eb4:	e8630000 	lwi	r3, r3, 0
20030eb8:	3063ffff 	addik	r3, r3, -1
20030ebc:	84651800 	and	r3, r5, r3
20030ec0:	64630403 	bslli	r3, r3, 3
20030ec4:	10641800 	addk	r3, r4, r3
20030ec8:	e8930010 	lwi	r4, r19, 16
20030ecc:	e8b30014 	lwi	r5, r19, 20
20030ed0:	f8830000 	swi	r4, r3, 0
20030ed4:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20030ed8:	e873000c 	lwi	r3, r19, 12
20030edc:	e8630010 	lwi	r3, r3, 16
20030ee0:	e8830000 	lwi	r4, r3, 0
20030ee4:	30840001 	addik	r4, r4, 1
20030ee8:	f8830000 	swi	r4, r3, 0
}
20030eec:	10330000 	addk	r1, r19, r0
20030ef0:	ea610004 	lwi	r19, r1, 4
20030ef4:	30210008 	addik	r1, r1, 8
20030ef8:	b60f0008 	rtsd	r15, 8
20030efc:	80000000 	or	r0, r0, r0

20030f00 <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20030f00:	3021fff8 	addik	r1, r1, -8
20030f04:	fa610004 	swi	r19, r1, 4
20030f08:	12610000 	addk	r19, r1, r0
20030f0c:	f8b3000c 	swi	r5, r19, 12
20030f10:	f8d30010 	swi	r6, r19, 16
20030f14:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20030f18:	e873000c 	lwi	r3, r19, 12
20030f1c:	e8630010 	lwi	r3, r3, 16
20030f20:	e8830000 	lwi	r4, r3, 0
20030f24:	e873000c 	lwi	r3, r19, 12
20030f28:	e8a3000c 	lwi	r5, r3, 12
20030f2c:	e8730010 	lwi	r3, r19, 16
20030f30:	64630402 	bslli	r3, r3, 2
20030f34:	10651800 	addk	r3, r5, r3
20030f38:	e8630000 	lwi	r3, r3, 0
20030f3c:	14a32000 	rsubk	r5, r3, r4
20030f40:	30600001 	addik	r3, r0, 1
20030f44:	e8930014 	lwi	r4, r19, 20
20030f48:	16442803 	cmpu	r18, r4, r5
20030f4c:	bcb20008 	bgei	r18, 8		// 20030f54
20030f50:	10600000 	addk	r3, r0, r0
20030f54:	a46300ff 	andi	r3, r3, 255
}
20030f58:	10330000 	addk	r1, r19, r0
20030f5c:	ea610004 	lwi	r19, r1, 4
20030f60:	30210008 	addik	r1, r1, 8
20030f64:	b60f0008 	rtsd	r15, 8
20030f68:	80000000 	or	r0, r0, r0

20030f6c <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20030f6c:	3021fff8 	addik	r1, r1, -8
20030f70:	fa610004 	swi	r19, r1, 4
20030f74:	12610000 	addk	r19, r1, r0
20030f78:	f8b3000c 	swi	r5, r19, 12
20030f7c:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20030f80:	e873000c 	lwi	r3, r19, 12
20030f84:	e8630010 	lwi	r3, r3, 16
20030f88:	e8830000 	lwi	r4, r3, 0
20030f8c:	e873000c 	lwi	r3, r19, 12
20030f90:	e8a3000c 	lwi	r5, r3, 12
20030f94:	e8730010 	lwi	r3, r19, 16
20030f98:	64630402 	bslli	r3, r3, 2
20030f9c:	10651800 	addk	r3, r5, r3
20030fa0:	e8630000 	lwi	r3, r3, 0
20030fa4:	14632000 	rsubk	r3, r3, r4
}
20030fa8:	10330000 	addk	r1, r19, r0
20030fac:	ea610004 	lwi	r19, r1, 4
20030fb0:	30210008 	addik	r1, r1, 8
20030fb4:	b60f0008 	rtsd	r15, 8
20030fb8:	80000000 	or	r0, r0, r0

20030fbc <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20030fbc:	3021fff4 	addik	r1, r1, -12
20030fc0:	fa610008 	swi	r19, r1, 8
20030fc4:	12610000 	addk	r19, r1, r0
20030fc8:	f8b30010 	swi	r5, r19, 16
20030fcc:	f8d30014 	swi	r6, r19, 20
20030fd0:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20030fd4:	f8130004 	swi	r0, r19, 4
20030fd8:	b800005c 	bri	92		// 20031034
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20030fdc:	e8730010 	lwi	r3, r19, 16
20030fe0:	e8830000 	lwi	r4, r3, 0
20030fe4:	e8730010 	lwi	r3, r19, 16
20030fe8:	e8a3000c 	lwi	r5, r3, 12
20030fec:	e8730004 	lwi	r3, r19, 4
20030ff0:	64630402 	bslli	r3, r3, 2
20030ff4:	10651800 	addk	r3, r5, r3
20030ff8:	e8a30000 	lwi	r5, r3, 0
20030ffc:	e8730010 	lwi	r3, r19, 16
20031000:	e8630010 	lwi	r3, r3, 16
20031004:	e8630000 	lwi	r3, r3, 0
20031008:	14632800 	rsubk	r3, r3, r5
2003100c:	10641800 	addk	r3, r4, r3
20031010:	30830001 	addik	r4, r3, 1
20031014:	e8730018 	lwi	r3, r19, 24
20031018:	16441803 	cmpu	r18, r4, r3
2003101c:	bc52000c 	blti	r18, 12		// 20031028
            return 0;
20031020:	10600000 	addk	r3, r0, r0
20031024:	b8000024 	bri	36		// 20031048
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20031028:	e8730004 	lwi	r3, r19, 4
2003102c:	30630001 	addik	r3, r3, 1
20031030:	f8730004 	swi	r3, r19, 4
20031034:	e8930004 	lwi	r4, r19, 4
20031038:	e8730014 	lwi	r3, r19, 20
2003103c:	16432003 	cmpu	r18, r3, r4
20031040:	bc52ff9c 	blti	r18, -100		// 20030fdc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20031044:	30600001 	addik	r3, r0, 1
}
20031048:	10330000 	addk	r1, r19, r0
2003104c:	ea610008 	lwi	r19, r1, 8
20031050:	3021000c 	addik	r1, r1, 12
20031054:	b60f0008 	rtsd	r15, 8
20031058:	80000000 	or	r0, r0, r0

2003105c <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003105c:	3021ffec 	addik	r1, r1, -20
20031060:	fa610010 	swi	r19, r1, 16
20031064:	12610000 	addk	r19, r1, r0
20031068:	f8b30018 	swi	r5, r19, 24
2003106c:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20031070:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20031074:	f8130004 	swi	r0, r19, 4
20031078:	b8000054 	bri	84		// 200310cc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003107c:	e8730018 	lwi	r3, r19, 24
20031080:	e8630010 	lwi	r3, r3, 16
20031084:	e8830000 	lwi	r4, r3, 0
20031088:	e8730018 	lwi	r3, r19, 24
2003108c:	e8a3000c 	lwi	r5, r3, 12
20031090:	e8730004 	lwi	r3, r19, 4
20031094:	64630402 	bslli	r3, r3, 2
20031098:	10651800 	addk	r3, r5, r3
2003109c:	e8630000 	lwi	r3, r3, 0
200310a0:	14632000 	rsubk	r3, r3, r4
200310a4:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200310a8:	e8930008 	lwi	r4, r19, 8
200310ac:	e873000c 	lwi	r3, r19, 12
200310b0:	16441803 	cmpu	r18, r4, r3
200310b4:	bcb20008 	bgei	r18, 8		// 200310bc
200310b8:	10640000 	addk	r3, r4, r0
200310bc:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200310c0:	e8730004 	lwi	r3, r19, 4
200310c4:	30630001 	addik	r3, r3, 1
200310c8:	f8730004 	swi	r3, r19, 4
200310cc:	e8930004 	lwi	r4, r19, 4
200310d0:	e873001c 	lwi	r3, r19, 28
200310d4:	16432003 	cmpu	r18, r3, r4
200310d8:	bc52ffa4 	blti	r18, -92		// 2003107c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200310dc:	e8730018 	lwi	r3, r19, 24
200310e0:	e8830000 	lwi	r4, r3, 0
200310e4:	e8730008 	lwi	r3, r19, 8
200310e8:	14632000 	rsubk	r3, r3, r4
}
200310ec:	10330000 	addk	r1, r19, r0
200310f0:	ea610010 	lwi	r19, r1, 16
200310f4:	30210014 	addik	r1, r1, 20
200310f8:	b60f0008 	rtsd	r15, 8
200310fc:	80000000 	or	r0, r0, r0

20031100 <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20031100:	3021fff4 	addik	r1, r1, -12
20031104:	fa610008 	swi	r19, r1, 8
20031108:	12610000 	addk	r19, r1, r0
2003110c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20031110:	e8730010 	lwi	r3, r19, 16
20031114:	e8630010 	lwi	r3, r3, 16
20031118:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003111c:	f8130004 	swi	r0, r19, 4
20031120:	b8000028 	bri	40		// 20031148
        fifo->read_inds[i] = 0;
20031124:	e8730010 	lwi	r3, r19, 16
20031128:	e883000c 	lwi	r4, r3, 12
2003112c:	e8730004 	lwi	r3, r19, 4
20031130:	64630402 	bslli	r3, r3, 2
20031134:	10641800 	addk	r3, r4, r3
20031138:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003113c:	e8730004 	lwi	r3, r19, 4
20031140:	30630001 	addik	r3, r3, 1
20031144:	f8730004 	swi	r3, r19, 4
20031148:	e8730010 	lwi	r3, r19, 16
2003114c:	e8830008 	lwi	r4, r3, 8
20031150:	e8730004 	lwi	r3, r19, 4
20031154:	16441803 	cmpu	r18, r4, r3
20031158:	bc52ffcc 	blti	r18, -52		// 20031124
        fifo->read_inds[i] = 0;
    }
}
2003115c:	10330000 	addk	r1, r19, r0
20031160:	ea610008 	lwi	r19, r1, 8
20031164:	3021000c 	addik	r1, r1, 12
20031168:	b60f0008 	rtsd	r15, 8
2003116c:	80000000 	or	r0, r0, r0

20031170 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20031170:	3021fff4 	addik	r1, r1, -12
20031174:	fa610008 	swi	r19, r1, 8
20031178:	12610000 	addk	r19, r1, r0
2003117c:	f8b30010 	swi	r5, r19, 16
20031180:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20031184:	e8730010 	lwi	r3, r19, 16
20031188:	e8830004 	lwi	r4, r3, 4
2003118c:	e8730010 	lwi	r3, r19, 16
20031190:	e8a3000c 	lwi	r5, r3, 12
20031194:	e8730014 	lwi	r3, r19, 20
20031198:	64630402 	bslli	r3, r3, 2
2003119c:	10651800 	addk	r3, r5, r3
200311a0:	e8a30000 	lwi	r5, r3, 0
200311a4:	e8730010 	lwi	r3, r19, 16
200311a8:	e8630000 	lwi	r3, r3, 0
200311ac:	3063ffff 	addik	r3, r3, -1
200311b0:	84651800 	and	r3, r5, r3
200311b4:	64630402 	bslli	r3, r3, 2
200311b8:	10641800 	addk	r3, r4, r3
200311bc:	e8630000 	lwi	r3, r3, 0
200311c0:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200311c4:	e8730010 	lwi	r3, r19, 16
200311c8:	e883000c 	lwi	r4, r3, 12
200311cc:	e8730014 	lwi	r3, r19, 20
200311d0:	64630402 	bslli	r3, r3, 2
200311d4:	10641800 	addk	r3, r4, r3
200311d8:	e8830000 	lwi	r4, r3, 0
200311dc:	30840001 	addik	r4, r4, 1
200311e0:	f8830000 	swi	r4, r3, 0
    return value;
200311e4:	e8730004 	lwi	r3, r19, 4
}
200311e8:	10330000 	addk	r1, r19, r0
200311ec:	ea610008 	lwi	r19, r1, 8
200311f0:	3021000c 	addik	r1, r1, 12
200311f4:	b60f0008 	rtsd	r15, 8
200311f8:	80000000 	or	r0, r0, r0

200311fc <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200311fc:	3021fff8 	addik	r1, r1, -8
20031200:	fa610004 	swi	r19, r1, 4
20031204:	12610000 	addk	r19, r1, r0
20031208:	f8b3000c 	swi	r5, r19, 12
2003120c:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20031210:	e873000c 	lwi	r3, r19, 12
20031214:	e8830004 	lwi	r4, r3, 4
20031218:	e873000c 	lwi	r3, r19, 12
2003121c:	e8630010 	lwi	r3, r3, 16
20031220:	e8a30000 	lwi	r5, r3, 0
20031224:	e873000c 	lwi	r3, r19, 12
20031228:	e8630000 	lwi	r3, r3, 0
2003122c:	3063ffff 	addik	r3, r3, -1
20031230:	84651800 	and	r3, r5, r3
20031234:	64630402 	bslli	r3, r3, 2
20031238:	10641800 	addk	r3, r4, r3
2003123c:	e8930010 	lwi	r4, r19, 16
20031240:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20031244:	e873000c 	lwi	r3, r19, 12
20031248:	e8630010 	lwi	r3, r3, 16
2003124c:	e8830000 	lwi	r4, r3, 0
20031250:	30840001 	addik	r4, r4, 1
20031254:	f8830000 	swi	r4, r3, 0
}
20031258:	10330000 	addk	r1, r19, r0
2003125c:	ea610004 	lwi	r19, r1, 4
20031260:	30210008 	addik	r1, r1, 8
20031264:	b60f0008 	rtsd	r15, 8
20031268:	80000000 	or	r0, r0, r0

2003126c <read_IN>:
	
	static u8 needInit = 1;
	
	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_IN() {
2003126c:	3021ffe0 	addik	r1, r1, -32
20031270:	f9e10000 	swi	r15, r1, 0
20031274:	fa61001c 	swi	r19, r1, 28
20031278:	12610000 	addk	r19, r1, r0
		index_IN = decoder_texture_DCsplit_IN->read_inds[0];
2003127c:	b0002004 	imm	8196
20031280:	e8607fc8 	lwi	r3, r0, 32712	// 20047fc8 <decoder_texture_DCsplit_IN>
20031284:	e863000c 	lwi	r3, r3, 12
20031288:	e8630000 	lwi	r3, r3, 0
2003128c:	b0002006 	imm	8198
20031290:	f86020fc 	swi	r3, r0, 8444	// 200620fc <index_IN>
		numTokens_IN = index_IN + fifo_i16_get_num_tokens(decoder_texture_DCsplit_IN, 0);
20031294:	b0002004 	imm	8196
20031298:	e8607fc8 	lwi	r3, r0, 32712	// 20047fc8 <decoder_texture_DCsplit_IN>
2003129c:	10a30000 	addk	r5, r3, r0
200312a0:	10c00000 	addk	r6, r0, r0
200312a4:	b9f4e48c 	brlid	r15, -7028	// 2002f730 <fifo_i16_get_num_tokens>
200312a8:	80000000 	or	r0, r0, r0
200312ac:	10830000 	addk	r4, r3, r0
200312b0:	b0002006 	imm	8198
200312b4:	e86020fc 	lwi	r3, r0, 8444	// 200620fc <index_IN>
200312b8:	10641800 	addk	r3, r4, r3
200312bc:	b0002006 	imm	8198
200312c0:	f8602100 	swi	r3, r0, 8448	// 20062100 <numTokens_IN>
	}
200312c4:	e9e10000 	lwi	r15, r1, 0
200312c8:	10330000 	addk	r1, r19, r0
200312cc:	ea61001c 	lwi	r19, r1, 28
200312d0:	30210020 	addik	r1, r1, 32
200312d4:	b60f0008 	rtsd	r15, 8
200312d8:	80000000 	or	r0, r0, r0

200312dc <read_end_IN>:
	
	static void read_end_IN() {
200312dc:	3021fff8 	addik	r1, r1, -8
200312e0:	fa610004 	swi	r19, r1, 4
200312e4:	12610000 	addk	r19, r1, r0
		decoder_texture_DCsplit_IN->read_inds[0] = index_IN;
200312e8:	b0002004 	imm	8196
200312ec:	e8607fc8 	lwi	r3, r0, 32712	// 20047fc8 <decoder_texture_DCsplit_IN>
200312f0:	e863000c 	lwi	r3, r3, 12
200312f4:	b0002006 	imm	8198
200312f8:	e88020fc 	lwi	r4, r0, 8444	// 200620fc <index_IN>
200312fc:	f8830000 	swi	r4, r3, 0
	}
20031300:	10330000 	addk	r1, r19, r0
20031304:	ea610004 	lwi	r19, r1, 4
20031308:	30210008 	addik	r1, r1, 8
2003130c:	b60f0008 	rtsd	r15, 8
20031310:	80000000 	or	r0, r0, r0

20031314 <write_DC>:

	static void write_DC() {
20031314:	3021ffe0 	addik	r1, r1, -32
20031318:	f9e10000 	swi	r15, r1, 0
2003131c:	fa61001c 	swi	r19, r1, 28
20031320:	12610000 	addk	r19, r1, r0
		index_DC = (*decoder_texture_DCsplit_DC->write_ind);
20031324:	b0002004 	imm	8196
20031328:	e8607fdc 	lwi	r3, r0, 32732	// 20047fdc <decoder_texture_DCsplit_DC>
2003132c:	e8630010 	lwi	r3, r3, 16
20031330:	e8630000 	lwi	r3, r3, 0
20031334:	b0002006 	imm	8198
20031338:	f8602104 	swi	r3, r0, 8452	// 20062104 <index_DC>
		numFree_DC = index_DC + fifo_i16_get_room(decoder_texture_DCsplit_DC, NUM_READERS_DC);
2003133c:	b0002004 	imm	8196
20031340:	e8607fdc 	lwi	r3, r0, 32732	// 20047fdc <decoder_texture_DCsplit_DC>
20031344:	10a30000 	addk	r5, r3, r0
20031348:	30c00001 	addik	r6, r0, 1
2003134c:	b9f4e4d4 	brlid	r15, -6956	// 2002f820 <fifo_i16_get_room>
20031350:	80000000 	or	r0, r0, r0
20031354:	10830000 	addk	r4, r3, r0
20031358:	b0002006 	imm	8198
2003135c:	e8602104 	lwi	r3, r0, 8452	// 20062104 <index_DC>
20031360:	10641800 	addk	r3, r4, r3
20031364:	b0002006 	imm	8198
20031368:	f8602108 	swi	r3, r0, 8456	// 20062108 <numFree_DC>
	}
2003136c:	e9e10000 	lwi	r15, r1, 0
20031370:	10330000 	addk	r1, r19, r0
20031374:	ea61001c 	lwi	r19, r1, 28
20031378:	30210020 	addik	r1, r1, 32
2003137c:	b60f0008 	rtsd	r15, 8
20031380:	80000000 	or	r0, r0, r0

20031384 <write_end_DC>:
	
	static void write_end_DC() {
20031384:	3021fff8 	addik	r1, r1, -8
20031388:	fa610004 	swi	r19, r1, 4
2003138c:	12610000 	addk	r19, r1, r0
		(*decoder_texture_DCsplit_DC->write_ind) = index_DC;
20031390:	b0002004 	imm	8196
20031394:	e8607fdc 	lwi	r3, r0, 32732	// 20047fdc <decoder_texture_DCsplit_DC>
20031398:	e8630010 	lwi	r3, r3, 16
2003139c:	b0002006 	imm	8198
200313a0:	e8802104 	lwi	r4, r0, 8452	// 20062104 <index_DC>
200313a4:	f8830000 	swi	r4, r3, 0
	}
200313a8:	10330000 	addk	r1, r19, r0
200313ac:	ea610004 	lwi	r19, r1, 4
200313b0:	30210008 	addik	r1, r1, 8
200313b4:	b60f0008 	rtsd	r15, 8
200313b8:	80000000 	or	r0, r0, r0

200313bc <write_AC>:
	static void write_AC() {
200313bc:	3021ffe0 	addik	r1, r1, -32
200313c0:	f9e10000 	swi	r15, r1, 0
200313c4:	fa61001c 	swi	r19, r1, 28
200313c8:	12610000 	addk	r19, r1, r0
		index_AC = (*decoder_texture_DCsplit_AC->write_ind);
200313cc:	b0002004 	imm	8196
200313d0:	e8607fd4 	lwi	r3, r0, 32724	// 20047fd4 <decoder_texture_DCsplit_AC>
200313d4:	e8630010 	lwi	r3, r3, 16
200313d8:	e8630000 	lwi	r3, r3, 0
200313dc:	b0002006 	imm	8198
200313e0:	f860210c 	swi	r3, r0, 8460	// 2006210c <index_AC>
		numFree_AC = index_AC + fifo_i16_get_room(decoder_texture_DCsplit_AC, NUM_READERS_AC);
200313e4:	b0002004 	imm	8196
200313e8:	e8607fd4 	lwi	r3, r0, 32724	// 20047fd4 <decoder_texture_DCsplit_AC>
200313ec:	10a30000 	addk	r5, r3, r0
200313f0:	30c00001 	addik	r6, r0, 1
200313f4:	b9f4e42c 	brlid	r15, -7124	// 2002f820 <fifo_i16_get_room>
200313f8:	80000000 	or	r0, r0, r0
200313fc:	10830000 	addk	r4, r3, r0
20031400:	b0002006 	imm	8198
20031404:	e860210c 	lwi	r3, r0, 8460	// 2006210c <index_AC>
20031408:	10641800 	addk	r3, r4, r3
2003140c:	b0002006 	imm	8198
20031410:	f8602110 	swi	r3, r0, 8464	// 20062110 <numFree_AC>
	}
20031414:	e9e10000 	lwi	r15, r1, 0
20031418:	10330000 	addk	r1, r19, r0
2003141c:	ea61001c 	lwi	r19, r1, 28
20031420:	30210020 	addik	r1, r1, 32
20031424:	b60f0008 	rtsd	r15, 8
20031428:	80000000 	or	r0, r0, r0

2003142c <write_end_AC>:
	
	static void write_end_AC() {
2003142c:	3021fff8 	addik	r1, r1, -8
20031430:	fa610004 	swi	r19, r1, 4
20031434:	12610000 	addk	r19, r1, r0
		(*decoder_texture_DCsplit_AC->write_ind) = index_AC;
20031438:	b0002004 	imm	8196
2003143c:	e8607fd4 	lwi	r3, r0, 32724	// 20047fd4 <decoder_texture_DCsplit_AC>
20031440:	e8630010 	lwi	r3, r3, 16
20031444:	b0002006 	imm	8198
20031448:	e880210c 	lwi	r4, r0, 8460	// 2006210c <index_AC>
2003144c:	f8830000 	swi	r4, r3, 0
	}
20031450:	10330000 	addk	r1, r19, r0
20031454:	ea610004 	lwi	r19, r1, 4
20031458:	30210008 	addik	r1, r1, 8
2003145c:	b60f0008 	rtsd	r15, 8
20031460:	80000000 	or	r0, r0, r0

20031464 <isSchedulable_untagged_0>:
	// Functions/procedures


	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_untagged_0() {
20031464:	3021fff4 	addik	r1, r1, -12
20031468:	fa610008 	swi	r19, r1, 8
2003146c:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
20031470:	30600001 	addik	r3, r0, 1
20031474:	f8730004 	swi	r3, r19, 4
		return result;
20031478:	e8730004 	lwi	r3, r19, 4
	}
2003147c:	10330000 	addk	r1, r19, r0
20031480:	ea610008 	lwi	r19, r1, 8
20031484:	3021000c 	addik	r1, r1, 12
20031488:	b60f0008 	rtsd	r15, 8
2003148c:	80000000 	or	r0, r0, r0

20031490 <untagged_0>:
	
	static void untagged_0() {
20031490:	3021ffcc 	addik	r1, r1, -52
20031494:	f9e10000 	swi	r15, r1, 0
20031498:	fa610030 	swi	r19, r1, 48
2003149c:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_IN = index_IN % SIZE_IN;
200314a0:	b0002006 	imm	8198
200314a4:	e86020fc 	lwi	r3, r0, 8444	// 200620fc <index_IN>
200314a8:	a46301ff 	andi	r3, r3, 511
200314ac:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_DC = index_DC % SIZE_DC;
200314b0:	b0002006 	imm	8198
200314b4:	e8602104 	lwi	r3, r0, 8452	// 20062104 <index_DC>
200314b8:	a46301ff 	andi	r3, r3, 511
200314bc:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_AC = index_AC % SIZE_AC;
200314c0:	b0002006 	imm	8198
200314c4:	e860210c 	lwi	r3, r0, 8460	// 2006210c <index_AC>
200314c8:	a46301ff 	andi	r3, r3, 511
200314cc:	f8730028 	swi	r3, r19, 40
	
		i16 tmp_IN;
		i32 i;
		i16 tmp_IN0;
	
		tmp_IN = tokens_IN[(index_IN + (0)) % SIZE_IN];
200314d0:	b0002004 	imm	8196
200314d4:	e8607fc8 	lwi	r3, r0, 32712	// 20047fc8 <decoder_texture_DCsplit_IN>
200314d8:	e8830004 	lwi	r4, r3, 4
200314dc:	b0002006 	imm	8198
200314e0:	e86020fc 	lwi	r3, r0, 8444	// 200620fc <index_IN>
200314e4:	a46301ff 	andi	r3, r3, 511
200314e8:	10631800 	addk	r3, r3, r3
200314ec:	10641800 	addk	r3, r4, r3
200314f0:	e4630000 	lhui	r3, r3, 0
200314f4:	f473002c 	shi	r3, r19, 44
		tokens_DC[(index_DC + (0)) % SIZE_DC] = tmp_IN;
200314f8:	b0002004 	imm	8196
200314fc:	e8607fdc 	lwi	r3, r0, 32732	// 20047fdc <decoder_texture_DCsplit_DC>
20031500:	e8830004 	lwi	r4, r3, 4
20031504:	b0002006 	imm	8198
20031508:	e8602104 	lwi	r3, r0, 8452	// 20062104 <index_DC>
2003150c:	a46301ff 	andi	r3, r3, 511
20031510:	10631800 	addk	r3, r3, r3
20031514:	10641800 	addk	r3, r4, r3
20031518:	e493002c 	lhui	r4, r19, 44
2003151c:	f4830000 	shi	r4, r3, 0
		i = 1;
20031520:	30600001 	addik	r3, r0, 1
20031524:	f873001c 	swi	r3, r19, 28
		while (i <= 63) {
20031528:	b8000074 	bri	116		// 2003159c
			tmp_IN0 = tokens_IN[(index_IN + (i)) % SIZE_IN];
2003152c:	b0002004 	imm	8196
20031530:	e8607fc8 	lwi	r3, r0, 32712	// 20047fc8 <decoder_texture_DCsplit_IN>
20031534:	e8830004 	lwi	r4, r3, 4
20031538:	b0002006 	imm	8198
2003153c:	e8a020fc 	lwi	r5, r0, 8444	// 200620fc <index_IN>
20031540:	e873001c 	lwi	r3, r19, 28
20031544:	10651800 	addk	r3, r5, r3
20031548:	a46301ff 	andi	r3, r3, 511
2003154c:	10631800 	addk	r3, r3, r3
20031550:	10641800 	addk	r3, r4, r3
20031554:	e4630000 	lhui	r3, r3, 0
20031558:	f473002e 	shi	r3, r19, 46
			tokens_AC[(index_AC + (i - 1)) % SIZE_AC] = tmp_IN0;
2003155c:	b0002004 	imm	8196
20031560:	e8607fd4 	lwi	r3, r0, 32724	// 20047fd4 <decoder_texture_DCsplit_AC>
20031564:	e8830004 	lwi	r4, r3, 4
20031568:	e8b3001c 	lwi	r5, r19, 28
2003156c:	b0002006 	imm	8198
20031570:	e860210c 	lwi	r3, r0, 8460	// 2006210c <index_AC>
20031574:	10651800 	addk	r3, r5, r3
20031578:	3063ffff 	addik	r3, r3, -1
2003157c:	a46301ff 	andi	r3, r3, 511
20031580:	10631800 	addk	r3, r3, r3
20031584:	10641800 	addk	r3, r4, r3
20031588:	e493002e 	lhui	r4, r19, 46
2003158c:	f4830000 	shi	r4, r3, 0
			i = i + 1;
20031590:	e873001c 	lwi	r3, r19, 28
20031594:	30630001 	addik	r3, r3, 1
20031598:	f873001c 	swi	r3, r19, 28
		i16 tmp_IN0;
	
		tmp_IN = tokens_IN[(index_IN + (0)) % SIZE_IN];
		tokens_DC[(index_DC + (0)) % SIZE_DC] = tmp_IN;
		i = 1;
		while (i <= 63) {
2003159c:	e893001c 	lwi	r4, r19, 28
200315a0:	3060003f 	addik	r3, r0, 63
200315a4:	16441801 	cmp	r18, r4, r3
200315a8:	bcb2ff84 	bgei	r18, -124		// 2003152c
			tokens_AC[(index_AC + (i - 1)) % SIZE_AC] = tmp_IN0;
			i = i + 1;
		}
	
		// Update ports indexes
		index_IN += 64;
200315ac:	b0002006 	imm	8198
200315b0:	e86020fc 	lwi	r3, r0, 8444	// 200620fc <index_IN>
200315b4:	30630040 	addik	r3, r3, 64
200315b8:	b0002006 	imm	8198
200315bc:	f86020fc 	swi	r3, r0, 8444	// 200620fc <index_IN>
		index_DC += 1;
200315c0:	b0002006 	imm	8198
200315c4:	e8602104 	lwi	r3, r0, 8452	// 20062104 <index_DC>
200315c8:	30630001 	addik	r3, r3, 1
200315cc:	b0002006 	imm	8198
200315d0:	f8602104 	swi	r3, r0, 8452	// 20062104 <index_DC>
		index_AC += 63;
200315d4:	b0002006 	imm	8198
200315d8:	e860210c 	lwi	r3, r0, 8460	// 2006210c <index_AC>
200315dc:	3063003f 	addik	r3, r3, 63
200315e0:	b0002006 	imm	8198
200315e4:	f860210c 	swi	r3, r0, 8460	// 2006210c <index_AC>
		
		read_end_IN();
200315e8:	b9f4fcf4 	brlid	r15, -780	// 200312dc <read_end_IN>
200315ec:	80000000 	or	r0, r0, r0
		write_end_DC();
200315f0:	b9f4fd94 	brlid	r15, -620	// 20031384 <write_end_DC>
200315f4:	80000000 	or	r0, r0, r0
		write_end_AC();
200315f8:	b9f4fe34 	brlid	r15, -460	// 2003142c <write_end_AC>
200315fc:	80000000 	or	r0, r0, r0
	}
20031600:	e9e10000 	lwi	r15, r1, 0
20031604:	10330000 	addk	r1, r19, r0
20031608:	ea610030 	lwi	r19, r1, 48
2003160c:	30210034 	addik	r1, r1, 52
20031610:	b60f0008 	rtsd	r15, 8
20031614:	80000000 	or	r0, r0, r0

20031618 <decoder_texture_DCsplit_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_texture_DCsplit_initialize() {
20031618:	3021fff4 	addik	r1, r1, -12
2003161c:	fa610008 	swi	r19, r1, 8
20031620:	12610000 	addk	r19, r1, r0
		int i = 0;
20031624:	f8130004 	swi	r0, r19, 4
		
	finished:
		// no read_end/write_end here!
		return;
20031628:	80000000 	or	r0, r0, r0
	}
2003162c:	10330000 	addk	r1, r19, r0
20031630:	ea610008 	lwi	r19, r1, 8
20031634:	3021000c 	addik	r1, r1, 12
20031638:	b60f0008 	rtsd	r15, 8
2003163c:	80000000 	or	r0, r0, r0

20031640 <decoder_texture_DCsplit_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	int decoder_texture_DCsplit_scheduler() {
20031640:	3021ffd8 	addik	r1, r1, -40
20031644:	f9e10000 	swi	r15, r1, 0
20031648:	fa610024 	swi	r19, r1, 36
2003164c:	12610000 	addk	r19, r1, r0
		int i = 0;
20031650:	f813001c 	swi	r0, r19, 28
		if(needInit){
20031654:	b0002004 	imm	8196
20031658:	e0608070 	lbui	r3, r0, -32656	// 20048070 <needInit>
2003165c:	bc030014 	beqi	r3, 20		// 20031670
			decoder_texture_DCsplit_initialize();
20031660:	b9f4ffb8 	brlid	r15, -72	// 20031618 <decoder_texture_DCsplit_initialize>
20031664:	80000000 	or	r0, r0, r0
			needInit = 0;
20031668:	b0002004 	imm	8196
2003166c:	f0008070 	sbi	r0, r0, -32656	// 20048070 <needInit>
		}
		read_IN();
20031670:	b9f4fbfc 	brlid	r15, -1028	// 2003126c <read_IN>
20031674:	80000000 	or	r0, r0, r0
		write_DC();
20031678:	b9f4fc9c 	brlid	r15, -868	// 20031314 <write_DC>
2003167c:	80000000 	or	r0, r0, r0
		write_AC();
20031680:	b9f4fd3c 	brlid	r15, -708	// 200313bc <write_AC>
20031684:	80000000 	or	r0, r0, r0
		
	
	
		while (1) {
			// Action loop
			if (numTokens_IN - index_IN >= 64 && isSchedulable_untagged_0()) {
20031688:	b0002006 	imm	8198
2003168c:	e8802100 	lwi	r4, r0, 8448	// 20062100 <numTokens_IN>
20031690:	b0002006 	imm	8198
20031694:	e86020fc 	lwi	r3, r0, 8444	// 200620fc <index_IN>
20031698:	14832000 	rsubk	r4, r3, r4
2003169c:	3060003f 	addik	r3, r0, 63
200316a0:	16441803 	cmpu	r18, r4, r3
200316a4:	bcb20098 	bgei	r18, 152		// 2003173c
200316a8:	b9f4fdbc 	brlid	r15, -580	// 20031464 <isSchedulable_untagged_0>
200316ac:	80000000 	or	r0, r0, r0
200316b0:	bc03008c 	beqi	r3, 140		// 2003173c
				int stop = 0;
200316b4:	f8130020 	swi	r0, r19, 32
				if (1 > SIZE_DC - index_DC + decoder_texture_DCsplit_DC->read_inds[0]) {
200316b8:	b0002004 	imm	8196
200316bc:	e8607fdc 	lwi	r3, r0, 32732	// 20047fdc <decoder_texture_DCsplit_DC>
200316c0:	e863000c 	lwi	r3, r3, 12
200316c4:	e8830000 	lwi	r4, r3, 0
200316c8:	b0002006 	imm	8198
200316cc:	e8602104 	lwi	r3, r0, 8452	// 20062104 <index_DC>
200316d0:	14632000 	rsubk	r3, r3, r4
200316d4:	a863fe00 	xori	r3, r3, -512
200316d8:	bc23000c 	bnei	r3, 12		// 200316e4
					stop = 1;
200316dc:	30600001 	addik	r3, r0, 1
200316e0:	f8730020 	swi	r3, r19, 32
				}
				if (63 > SIZE_AC - index_AC + decoder_texture_DCsplit_AC->read_inds[0]) {
200316e4:	b0002004 	imm	8196
200316e8:	e8607fd4 	lwi	r3, r0, 32724	// 20047fd4 <decoder_texture_DCsplit_AC>
200316ec:	e863000c 	lwi	r3, r3, 12
200316f0:	e8830000 	lwi	r4, r3, 0
200316f4:	b0002006 	imm	8198
200316f8:	e860210c 	lwi	r3, r0, 8460	// 2006210c <index_AC>
200316fc:	14632000 	rsubk	r3, r3, r4
20031700:	30830200 	addik	r4, r3, 512
20031704:	3060003e 	addik	r3, r0, 62
20031708:	16441803 	cmpu	r18, r4, r3
2003170c:	bc52000c 	blti	r18, 12		// 20031718
					stop = 1;
20031710:	30600001 	addik	r3, r0, 1
20031714:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
20031718:	e8730020 	lwi	r3, r19, 32
2003171c:	bc030008 	beqi	r3, 8		// 20031724
					goto finished;
20031720:	b800001c 	bri	28		// 2003173c
				}
				untagged_0();
20031724:	b9f4fd6c 	brlid	r15, -660	// 20031490 <untagged_0>
20031728:	80000000 	or	r0, r0, r0
				i++;
2003172c:	e873001c 	lwi	r3, r19, 28
20031730:	30630001 	addik	r3, r3, 1
20031734:	f873001c 	swi	r3, r19, 28
			} else {
				goto finished;
			}
		}
20031738:	b800ff50 	bri	-176		// 20031688
		
	finished:
	
		read_end_IN();
2003173c:	b9f4fba0 	brlid	r15, -1120	// 200312dc <read_end_IN>
20031740:	80000000 	or	r0, r0, r0
		write_end_DC();
20031744:	b9f4fc40 	brlid	r15, -960	// 20031384 <write_end_DC>
20031748:	80000000 	or	r0, r0, r0
		write_end_AC();
2003174c:	b9f4fce0 	brlid	r15, -800	// 2003142c <write_end_AC>
20031750:	80000000 	or	r0, r0, r0
		
		
		return i;
20031754:	e873001c 	lwi	r3, r19, 28
	}
20031758:	e9e10000 	lwi	r15, r1, 0
2003175c:	10330000 	addk	r1, r19, r0
20031760:	ea610024 	lwi	r19, r1, 36
20031764:	30210028 	addik	r1, r1, 40
20031768:	b60f0008 	rtsd	r15, 8
2003176c:	80000000 	or	r0, r0, r0

20031770 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20031770:	3021fff8 	addik	r1, r1, -8
20031774:	fa610004 	swi	r19, r1, 4
20031778:	12610000 	addk	r19, r1, r0
2003177c:	f8b3000c 	swi	r5, r19, 12
20031780:	f8d30010 	swi	r6, r19, 16
20031784:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20031788:	e873000c 	lwi	r3, r19, 12
2003178c:	e8630010 	lwi	r3, r3, 16
20031790:	e8830000 	lwi	r4, r3, 0
20031794:	e873000c 	lwi	r3, r19, 12
20031798:	e8a3000c 	lwi	r5, r3, 12
2003179c:	e8730010 	lwi	r3, r19, 16
200317a0:	64630402 	bslli	r3, r3, 2
200317a4:	10651800 	addk	r3, r5, r3
200317a8:	e8630000 	lwi	r3, r3, 0
200317ac:	14a32000 	rsubk	r5, r3, r4
200317b0:	30600001 	addik	r3, r0, 1
200317b4:	e8930014 	lwi	r4, r19, 20
200317b8:	16442803 	cmpu	r18, r4, r5
200317bc:	bcb20008 	bgei	r18, 8		// 200317c4
200317c0:	10600000 	addk	r3, r0, r0
200317c4:	a46300ff 	andi	r3, r3, 255
}
200317c8:	10330000 	addk	r1, r19, r0
200317cc:	ea610004 	lwi	r19, r1, 4
200317d0:	30210008 	addik	r1, r1, 8
200317d4:	b60f0008 	rtsd	r15, 8
200317d8:	80000000 	or	r0, r0, r0

200317dc <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200317dc:	3021fff8 	addik	r1, r1, -8
200317e0:	fa610004 	swi	r19, r1, 4
200317e4:	12610000 	addk	r19, r1, r0
200317e8:	f8b3000c 	swi	r5, r19, 12
200317ec:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200317f0:	e873000c 	lwi	r3, r19, 12
200317f4:	e8630010 	lwi	r3, r3, 16
200317f8:	e8830000 	lwi	r4, r3, 0
200317fc:	e873000c 	lwi	r3, r19, 12
20031800:	e8a3000c 	lwi	r5, r3, 12
20031804:	e8730010 	lwi	r3, r19, 16
20031808:	64630402 	bslli	r3, r3, 2
2003180c:	10651800 	addk	r3, r5, r3
20031810:	e8630000 	lwi	r3, r3, 0
20031814:	14632000 	rsubk	r3, r3, r4
}
20031818:	10330000 	addk	r1, r19, r0
2003181c:	ea610004 	lwi	r19, r1, 4
20031820:	30210008 	addik	r1, r1, 8
20031824:	b60f0008 	rtsd	r15, 8
20031828:	80000000 	or	r0, r0, r0

2003182c <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003182c:	3021fff4 	addik	r1, r1, -12
20031830:	fa610008 	swi	r19, r1, 8
20031834:	12610000 	addk	r19, r1, r0
20031838:	f8b30010 	swi	r5, r19, 16
2003183c:	f8d30014 	swi	r6, r19, 20
20031840:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20031844:	f8130004 	swi	r0, r19, 4
20031848:	b800005c 	bri	92		// 200318a4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003184c:	e8730010 	lwi	r3, r19, 16
20031850:	e8830000 	lwi	r4, r3, 0
20031854:	e8730010 	lwi	r3, r19, 16
20031858:	e8a3000c 	lwi	r5, r3, 12
2003185c:	e8730004 	lwi	r3, r19, 4
20031860:	64630402 	bslli	r3, r3, 2
20031864:	10651800 	addk	r3, r5, r3
20031868:	e8a30000 	lwi	r5, r3, 0
2003186c:	e8730010 	lwi	r3, r19, 16
20031870:	e8630010 	lwi	r3, r3, 16
20031874:	e8630000 	lwi	r3, r3, 0
20031878:	14632800 	rsubk	r3, r3, r5
2003187c:	10641800 	addk	r3, r4, r3
20031880:	30830001 	addik	r4, r3, 1
20031884:	e8730018 	lwi	r3, r19, 24
20031888:	16441803 	cmpu	r18, r4, r3
2003188c:	bc52000c 	blti	r18, 12		// 20031898
            return 0;
20031890:	10600000 	addk	r3, r0, r0
20031894:	b8000024 	bri	36		// 200318b8
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20031898:	e8730004 	lwi	r3, r19, 4
2003189c:	30630001 	addik	r3, r3, 1
200318a0:	f8730004 	swi	r3, r19, 4
200318a4:	e8930004 	lwi	r4, r19, 4
200318a8:	e8730014 	lwi	r3, r19, 20
200318ac:	16432003 	cmpu	r18, r3, r4
200318b0:	bc52ff9c 	blti	r18, -100		// 2003184c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200318b4:	30600001 	addik	r3, r0, 1
}
200318b8:	10330000 	addk	r1, r19, r0
200318bc:	ea610008 	lwi	r19, r1, 8
200318c0:	3021000c 	addik	r1, r1, 12
200318c4:	b60f0008 	rtsd	r15, 8
200318c8:	80000000 	or	r0, r0, r0

200318cc <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200318cc:	3021ffec 	addik	r1, r1, -20
200318d0:	fa610010 	swi	r19, r1, 16
200318d4:	12610000 	addk	r19, r1, r0
200318d8:	f8b30018 	swi	r5, r19, 24
200318dc:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200318e0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200318e4:	f8130004 	swi	r0, r19, 4
200318e8:	b8000054 	bri	84		// 2003193c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200318ec:	e8730018 	lwi	r3, r19, 24
200318f0:	e8630010 	lwi	r3, r3, 16
200318f4:	e8830000 	lwi	r4, r3, 0
200318f8:	e8730018 	lwi	r3, r19, 24
200318fc:	e8a3000c 	lwi	r5, r3, 12
20031900:	e8730004 	lwi	r3, r19, 4
20031904:	64630402 	bslli	r3, r3, 2
20031908:	10651800 	addk	r3, r5, r3
2003190c:	e8630000 	lwi	r3, r3, 0
20031910:	14632000 	rsubk	r3, r3, r4
20031914:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20031918:	e8930008 	lwi	r4, r19, 8
2003191c:	e873000c 	lwi	r3, r19, 12
20031920:	16441803 	cmpu	r18, r4, r3
20031924:	bcb20008 	bgei	r18, 8		// 2003192c
20031928:	10640000 	addk	r3, r4, r0
2003192c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20031930:	e8730004 	lwi	r3, r19, 4
20031934:	30630001 	addik	r3, r3, 1
20031938:	f8730004 	swi	r3, r19, 4
2003193c:	e8930004 	lwi	r4, r19, 4
20031940:	e873001c 	lwi	r3, r19, 28
20031944:	16432003 	cmpu	r18, r3, r4
20031948:	bc52ffa4 	blti	r18, -92		// 200318ec
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003194c:	e8730018 	lwi	r3, r19, 24
20031950:	e8830000 	lwi	r4, r3, 0
20031954:	e8730008 	lwi	r3, r19, 8
20031958:	14632000 	rsubk	r3, r3, r4
}
2003195c:	10330000 	addk	r1, r19, r0
20031960:	ea610010 	lwi	r19, r1, 16
20031964:	30210014 	addik	r1, r1, 20
20031968:	b60f0008 	rtsd	r15, 8
2003196c:	80000000 	or	r0, r0, r0

20031970 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20031970:	3021fff4 	addik	r1, r1, -12
20031974:	fa610008 	swi	r19, r1, 8
20031978:	12610000 	addk	r19, r1, r0
2003197c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20031980:	e8730010 	lwi	r3, r19, 16
20031984:	e8630010 	lwi	r3, r3, 16
20031988:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003198c:	f8130004 	swi	r0, r19, 4
20031990:	b8000028 	bri	40		// 200319b8
        fifo->read_inds[i] = 0;
20031994:	e8730010 	lwi	r3, r19, 16
20031998:	e883000c 	lwi	r4, r3, 12
2003199c:	e8730004 	lwi	r3, r19, 4
200319a0:	64630402 	bslli	r3, r3, 2
200319a4:	10641800 	addk	r3, r4, r3
200319a8:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200319ac:	e8730004 	lwi	r3, r19, 4
200319b0:	30630001 	addik	r3, r3, 1
200319b4:	f8730004 	swi	r3, r19, 4
200319b8:	e8730010 	lwi	r3, r19, 16
200319bc:	e8830008 	lwi	r4, r3, 8
200319c0:	e8730004 	lwi	r3, r19, 4
200319c4:	16441803 	cmpu	r18, r4, r3
200319c8:	bc52ffcc 	blti	r18, -52		// 20031994
        fifo->read_inds[i] = 0;
    }
}
200319cc:	10330000 	addk	r1, r19, r0
200319d0:	ea610008 	lwi	r19, r1, 8
200319d4:	3021000c 	addik	r1, r1, 12
200319d8:	b60f0008 	rtsd	r15, 8
200319dc:	80000000 	or	r0, r0, r0

200319e0 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200319e0:	3021fff4 	addik	r1, r1, -12
200319e4:	fa610008 	swi	r19, r1, 8
200319e8:	12610000 	addk	r19, r1, r0
200319ec:	f8b30010 	swi	r5, r19, 16
200319f0:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200319f4:	e8730010 	lwi	r3, r19, 16
200319f8:	e8830004 	lwi	r4, r3, 4
200319fc:	e8730010 	lwi	r3, r19, 16
20031a00:	e8a3000c 	lwi	r5, r3, 12
20031a04:	e8730014 	lwi	r3, r19, 20
20031a08:	64630402 	bslli	r3, r3, 2
20031a0c:	10651800 	addk	r3, r5, r3
20031a10:	e8a30000 	lwi	r5, r3, 0
20031a14:	e8730010 	lwi	r3, r19, 16
20031a18:	e8630000 	lwi	r3, r3, 0
20031a1c:	3063ffff 	addik	r3, r3, -1
20031a20:	84651800 	and	r3, r5, r3
20031a24:	10641800 	addk	r3, r4, r3
20031a28:	e0630000 	lbui	r3, r3, 0
20031a2c:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20031a30:	e8730010 	lwi	r3, r19, 16
20031a34:	e883000c 	lwi	r4, r3, 12
20031a38:	e8730014 	lwi	r3, r19, 20
20031a3c:	64630402 	bslli	r3, r3, 2
20031a40:	10641800 	addk	r3, r4, r3
20031a44:	e8830000 	lwi	r4, r3, 0
20031a48:	30840001 	addik	r4, r4, 1
20031a4c:	f8830000 	swi	r4, r3, 0
    return value;
20031a50:	e0730004 	lbui	r3, r19, 4
20031a54:	90630060 	sext8	r3, r3
}
20031a58:	10330000 	addk	r1, r19, r0
20031a5c:	ea610008 	lwi	r19, r1, 8
20031a60:	3021000c 	addik	r1, r1, 12
20031a64:	b60f0008 	rtsd	r15, 8
20031a68:	80000000 	or	r0, r0, r0

20031a6c <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20031a6c:	3021fff8 	addik	r1, r1, -8
20031a70:	fa610004 	swi	r19, r1, 4
20031a74:	12610000 	addk	r19, r1, r0
20031a78:	f8b3000c 	swi	r5, r19, 12
20031a7c:	10660000 	addk	r3, r6, r0
20031a80:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20031a84:	e873000c 	lwi	r3, r19, 12
20031a88:	e8830004 	lwi	r4, r3, 4
20031a8c:	e873000c 	lwi	r3, r19, 12
20031a90:	e8630010 	lwi	r3, r3, 16
20031a94:	e8a30000 	lwi	r5, r3, 0
20031a98:	e873000c 	lwi	r3, r19, 12
20031a9c:	e8630000 	lwi	r3, r3, 0
20031aa0:	3063ffff 	addik	r3, r3, -1
20031aa4:	84651800 	and	r3, r5, r3
20031aa8:	10641800 	addk	r3, r4, r3
20031aac:	e0930010 	lbui	r4, r19, 16
20031ab0:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20031ab4:	e873000c 	lwi	r3, r19, 12
20031ab8:	e8630010 	lwi	r3, r3, 16
20031abc:	e8830000 	lwi	r4, r3, 0
20031ac0:	30840001 	addik	r4, r4, 1
20031ac4:	f8830000 	swi	r4, r3, 0
}
20031ac8:	10330000 	addk	r1, r19, r0
20031acc:	ea610004 	lwi	r19, r1, 4
20031ad0:	30210008 	addik	r1, r1, 8
20031ad4:	b60f0008 	rtsd	r15, 8
20031ad8:	80000000 	or	r0, r0, r0

20031adc <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20031adc:	3021fff8 	addik	r1, r1, -8
20031ae0:	fa610004 	swi	r19, r1, 4
20031ae4:	12610000 	addk	r19, r1, r0
20031ae8:	f8b3000c 	swi	r5, r19, 12
20031aec:	f8d30010 	swi	r6, r19, 16
20031af0:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20031af4:	e873000c 	lwi	r3, r19, 12
20031af8:	e8630010 	lwi	r3, r3, 16
20031afc:	e8830000 	lwi	r4, r3, 0
20031b00:	e873000c 	lwi	r3, r19, 12
20031b04:	e8a3000c 	lwi	r5, r3, 12
20031b08:	e8730010 	lwi	r3, r19, 16
20031b0c:	64630402 	bslli	r3, r3, 2
20031b10:	10651800 	addk	r3, r5, r3
20031b14:	e8630000 	lwi	r3, r3, 0
20031b18:	14a32000 	rsubk	r5, r3, r4
20031b1c:	30600001 	addik	r3, r0, 1
20031b20:	e8930014 	lwi	r4, r19, 20
20031b24:	16442803 	cmpu	r18, r4, r5
20031b28:	bcb20008 	bgei	r18, 8		// 20031b30
20031b2c:	10600000 	addk	r3, r0, r0
20031b30:	a46300ff 	andi	r3, r3, 255
}
20031b34:	10330000 	addk	r1, r19, r0
20031b38:	ea610004 	lwi	r19, r1, 4
20031b3c:	30210008 	addik	r1, r1, 8
20031b40:	b60f0008 	rtsd	r15, 8
20031b44:	80000000 	or	r0, r0, r0

20031b48 <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20031b48:	3021fff8 	addik	r1, r1, -8
20031b4c:	fa610004 	swi	r19, r1, 4
20031b50:	12610000 	addk	r19, r1, r0
20031b54:	f8b3000c 	swi	r5, r19, 12
20031b58:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20031b5c:	e873000c 	lwi	r3, r19, 12
20031b60:	e8630010 	lwi	r3, r3, 16
20031b64:	e8830000 	lwi	r4, r3, 0
20031b68:	e873000c 	lwi	r3, r19, 12
20031b6c:	e8a3000c 	lwi	r5, r3, 12
20031b70:	e8730010 	lwi	r3, r19, 16
20031b74:	64630402 	bslli	r3, r3, 2
20031b78:	10651800 	addk	r3, r5, r3
20031b7c:	e8630000 	lwi	r3, r3, 0
20031b80:	14632000 	rsubk	r3, r3, r4
}
20031b84:	10330000 	addk	r1, r19, r0
20031b88:	ea610004 	lwi	r19, r1, 4
20031b8c:	30210008 	addik	r1, r1, 8
20031b90:	b60f0008 	rtsd	r15, 8
20031b94:	80000000 	or	r0, r0, r0

20031b98 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20031b98:	3021fff4 	addik	r1, r1, -12
20031b9c:	fa610008 	swi	r19, r1, 8
20031ba0:	12610000 	addk	r19, r1, r0
20031ba4:	f8b30010 	swi	r5, r19, 16
20031ba8:	f8d30014 	swi	r6, r19, 20
20031bac:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20031bb0:	f8130004 	swi	r0, r19, 4
20031bb4:	b800005c 	bri	92		// 20031c10
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20031bb8:	e8730010 	lwi	r3, r19, 16
20031bbc:	e8830000 	lwi	r4, r3, 0
20031bc0:	e8730010 	lwi	r3, r19, 16
20031bc4:	e8a3000c 	lwi	r5, r3, 12
20031bc8:	e8730004 	lwi	r3, r19, 4
20031bcc:	64630402 	bslli	r3, r3, 2
20031bd0:	10651800 	addk	r3, r5, r3
20031bd4:	e8a30000 	lwi	r5, r3, 0
20031bd8:	e8730010 	lwi	r3, r19, 16
20031bdc:	e8630010 	lwi	r3, r3, 16
20031be0:	e8630000 	lwi	r3, r3, 0
20031be4:	14632800 	rsubk	r3, r3, r5
20031be8:	10641800 	addk	r3, r4, r3
20031bec:	30830001 	addik	r4, r3, 1
20031bf0:	e8730018 	lwi	r3, r19, 24
20031bf4:	16441803 	cmpu	r18, r4, r3
20031bf8:	bc52000c 	blti	r18, 12		// 20031c04
            return 0;
20031bfc:	10600000 	addk	r3, r0, r0
20031c00:	b8000024 	bri	36		// 20031c24
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20031c04:	e8730004 	lwi	r3, r19, 4
20031c08:	30630001 	addik	r3, r3, 1
20031c0c:	f8730004 	swi	r3, r19, 4
20031c10:	e8930004 	lwi	r4, r19, 4
20031c14:	e8730014 	lwi	r3, r19, 20
20031c18:	16432003 	cmpu	r18, r3, r4
20031c1c:	bc52ff9c 	blti	r18, -100		// 20031bb8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20031c20:	30600001 	addik	r3, r0, 1
}
20031c24:	10330000 	addk	r1, r19, r0
20031c28:	ea610008 	lwi	r19, r1, 8
20031c2c:	3021000c 	addik	r1, r1, 12
20031c30:	b60f0008 	rtsd	r15, 8
20031c34:	80000000 	or	r0, r0, r0

20031c38 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20031c38:	3021ffec 	addik	r1, r1, -20
20031c3c:	fa610010 	swi	r19, r1, 16
20031c40:	12610000 	addk	r19, r1, r0
20031c44:	f8b30018 	swi	r5, r19, 24
20031c48:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20031c4c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20031c50:	f8130004 	swi	r0, r19, 4
20031c54:	b8000054 	bri	84		// 20031ca8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20031c58:	e8730018 	lwi	r3, r19, 24
20031c5c:	e8630010 	lwi	r3, r3, 16
20031c60:	e8830000 	lwi	r4, r3, 0
20031c64:	e8730018 	lwi	r3, r19, 24
20031c68:	e8a3000c 	lwi	r5, r3, 12
20031c6c:	e8730004 	lwi	r3, r19, 4
20031c70:	64630402 	bslli	r3, r3, 2
20031c74:	10651800 	addk	r3, r5, r3
20031c78:	e8630000 	lwi	r3, r3, 0
20031c7c:	14632000 	rsubk	r3, r3, r4
20031c80:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20031c84:	e8930008 	lwi	r4, r19, 8
20031c88:	e873000c 	lwi	r3, r19, 12
20031c8c:	16441803 	cmpu	r18, r4, r3
20031c90:	bcb20008 	bgei	r18, 8		// 20031c98
20031c94:	10640000 	addk	r3, r4, r0
20031c98:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20031c9c:	e8730004 	lwi	r3, r19, 4
20031ca0:	30630001 	addik	r3, r3, 1
20031ca4:	f8730004 	swi	r3, r19, 4
20031ca8:	e8930004 	lwi	r4, r19, 4
20031cac:	e873001c 	lwi	r3, r19, 28
20031cb0:	16432003 	cmpu	r18, r3, r4
20031cb4:	bc52ffa4 	blti	r18, -92		// 20031c58
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20031cb8:	e8730018 	lwi	r3, r19, 24
20031cbc:	e8830000 	lwi	r4, r3, 0
20031cc0:	e8730008 	lwi	r3, r19, 8
20031cc4:	14632000 	rsubk	r3, r3, r4
}
20031cc8:	10330000 	addk	r1, r19, r0
20031ccc:	ea610010 	lwi	r19, r1, 16
20031cd0:	30210014 	addik	r1, r1, 20
20031cd4:	b60f0008 	rtsd	r15, 8
20031cd8:	80000000 	or	r0, r0, r0

20031cdc <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20031cdc:	3021fff4 	addik	r1, r1, -12
20031ce0:	fa610008 	swi	r19, r1, 8
20031ce4:	12610000 	addk	r19, r1, r0
20031ce8:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20031cec:	e8730010 	lwi	r3, r19, 16
20031cf0:	e8630010 	lwi	r3, r3, 16
20031cf4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20031cf8:	f8130004 	swi	r0, r19, 4
20031cfc:	b8000028 	bri	40		// 20031d24
        fifo->read_inds[i] = 0;
20031d00:	e8730010 	lwi	r3, r19, 16
20031d04:	e883000c 	lwi	r4, r3, 12
20031d08:	e8730004 	lwi	r3, r19, 4
20031d0c:	64630402 	bslli	r3, r3, 2
20031d10:	10641800 	addk	r3, r4, r3
20031d14:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20031d18:	e8730004 	lwi	r3, r19, 4
20031d1c:	30630001 	addik	r3, r3, 1
20031d20:	f8730004 	swi	r3, r19, 4
20031d24:	e8730010 	lwi	r3, r19, 16
20031d28:	e8830008 	lwi	r4, r3, 8
20031d2c:	e8730004 	lwi	r3, r19, 4
20031d30:	16441803 	cmpu	r18, r4, r3
20031d34:	bc52ffcc 	blti	r18, -52		// 20031d00
        fifo->read_inds[i] = 0;
    }
}
20031d38:	10330000 	addk	r1, r19, r0
20031d3c:	ea610008 	lwi	r19, r1, 8
20031d40:	3021000c 	addik	r1, r1, 12
20031d44:	b60f0008 	rtsd	r15, 8
20031d48:	80000000 	or	r0, r0, r0

20031d4c <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20031d4c:	3021fff4 	addik	r1, r1, -12
20031d50:	fa610008 	swi	r19, r1, 8
20031d54:	12610000 	addk	r19, r1, r0
20031d58:	f8b30010 	swi	r5, r19, 16
20031d5c:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20031d60:	e8730010 	lwi	r3, r19, 16
20031d64:	e8830004 	lwi	r4, r3, 4
20031d68:	e8730010 	lwi	r3, r19, 16
20031d6c:	e8a3000c 	lwi	r5, r3, 12
20031d70:	e8730014 	lwi	r3, r19, 20
20031d74:	64630402 	bslli	r3, r3, 2
20031d78:	10651800 	addk	r3, r5, r3
20031d7c:	e8a30000 	lwi	r5, r3, 0
20031d80:	e8730010 	lwi	r3, r19, 16
20031d84:	e8630000 	lwi	r3, r3, 0
20031d88:	3063ffff 	addik	r3, r3, -1
20031d8c:	84651800 	and	r3, r5, r3
20031d90:	10631800 	addk	r3, r3, r3
20031d94:	10641800 	addk	r3, r4, r3
20031d98:	e4630000 	lhui	r3, r3, 0
20031d9c:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20031da0:	e8730010 	lwi	r3, r19, 16
20031da4:	e883000c 	lwi	r4, r3, 12
20031da8:	e8730014 	lwi	r3, r19, 20
20031dac:	64630402 	bslli	r3, r3, 2
20031db0:	10641800 	addk	r3, r4, r3
20031db4:	e8830000 	lwi	r4, r3, 0
20031db8:	30840001 	addik	r4, r4, 1
20031dbc:	f8830000 	swi	r4, r3, 0
    return value;
20031dc0:	e4730004 	lhui	r3, r19, 4
20031dc4:	90630061 	sext16	r3, r3
}
20031dc8:	10330000 	addk	r1, r19, r0
20031dcc:	ea610008 	lwi	r19, r1, 8
20031dd0:	3021000c 	addik	r1, r1, 12
20031dd4:	b60f0008 	rtsd	r15, 8
20031dd8:	80000000 	or	r0, r0, r0

20031ddc <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20031ddc:	3021fff8 	addik	r1, r1, -8
20031de0:	fa610004 	swi	r19, r1, 4
20031de4:	12610000 	addk	r19, r1, r0
20031de8:	f8b3000c 	swi	r5, r19, 12
20031dec:	10660000 	addk	r3, r6, r0
20031df0:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20031df4:	e873000c 	lwi	r3, r19, 12
20031df8:	e8830004 	lwi	r4, r3, 4
20031dfc:	e873000c 	lwi	r3, r19, 12
20031e00:	e8630010 	lwi	r3, r3, 16
20031e04:	e8a30000 	lwi	r5, r3, 0
20031e08:	e873000c 	lwi	r3, r19, 12
20031e0c:	e8630000 	lwi	r3, r3, 0
20031e10:	3063ffff 	addik	r3, r3, -1
20031e14:	84651800 	and	r3, r5, r3
20031e18:	10631800 	addk	r3, r3, r3
20031e1c:	10641800 	addk	r3, r4, r3
20031e20:	e4930010 	lhui	r4, r19, 16
20031e24:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20031e28:	e873000c 	lwi	r3, r19, 12
20031e2c:	e8630010 	lwi	r3, r3, 16
20031e30:	e8830000 	lwi	r4, r3, 0
20031e34:	30840001 	addik	r4, r4, 1
20031e38:	f8830000 	swi	r4, r3, 0
}
20031e3c:	10330000 	addk	r1, r19, r0
20031e40:	ea610004 	lwi	r19, r1, 4
20031e44:	30210008 	addik	r1, r1, 8
20031e48:	b60f0008 	rtsd	r15, 8
20031e4c:	80000000 	or	r0, r0, r0

20031e50 <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20031e50:	3021fff8 	addik	r1, r1, -8
20031e54:	fa610004 	swi	r19, r1, 4
20031e58:	12610000 	addk	r19, r1, r0
20031e5c:	f8b3000c 	swi	r5, r19, 12
20031e60:	f8d30010 	swi	r6, r19, 16
20031e64:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20031e68:	e873000c 	lwi	r3, r19, 12
20031e6c:	e8630010 	lwi	r3, r3, 16
20031e70:	e8830000 	lwi	r4, r3, 0
20031e74:	e873000c 	lwi	r3, r19, 12
20031e78:	e8a3000c 	lwi	r5, r3, 12
20031e7c:	e8730010 	lwi	r3, r19, 16
20031e80:	64630402 	bslli	r3, r3, 2
20031e84:	10651800 	addk	r3, r5, r3
20031e88:	e8630000 	lwi	r3, r3, 0
20031e8c:	14a32000 	rsubk	r5, r3, r4
20031e90:	30600001 	addik	r3, r0, 1
20031e94:	e8930014 	lwi	r4, r19, 20
20031e98:	16442803 	cmpu	r18, r4, r5
20031e9c:	bcb20008 	bgei	r18, 8		// 20031ea4
20031ea0:	10600000 	addk	r3, r0, r0
20031ea4:	a46300ff 	andi	r3, r3, 255
}
20031ea8:	10330000 	addk	r1, r19, r0
20031eac:	ea610004 	lwi	r19, r1, 4
20031eb0:	30210008 	addik	r1, r1, 8
20031eb4:	b60f0008 	rtsd	r15, 8
20031eb8:	80000000 	or	r0, r0, r0

20031ebc <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20031ebc:	3021fff8 	addik	r1, r1, -8
20031ec0:	fa610004 	swi	r19, r1, 4
20031ec4:	12610000 	addk	r19, r1, r0
20031ec8:	f8b3000c 	swi	r5, r19, 12
20031ecc:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20031ed0:	e873000c 	lwi	r3, r19, 12
20031ed4:	e8630010 	lwi	r3, r3, 16
20031ed8:	e8830000 	lwi	r4, r3, 0
20031edc:	e873000c 	lwi	r3, r19, 12
20031ee0:	e8a3000c 	lwi	r5, r3, 12
20031ee4:	e8730010 	lwi	r3, r19, 16
20031ee8:	64630402 	bslli	r3, r3, 2
20031eec:	10651800 	addk	r3, r5, r3
20031ef0:	e8630000 	lwi	r3, r3, 0
20031ef4:	14632000 	rsubk	r3, r3, r4
}
20031ef8:	10330000 	addk	r1, r19, r0
20031efc:	ea610004 	lwi	r19, r1, 4
20031f00:	30210008 	addik	r1, r1, 8
20031f04:	b60f0008 	rtsd	r15, 8
20031f08:	80000000 	or	r0, r0, r0

20031f0c <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20031f0c:	3021fff4 	addik	r1, r1, -12
20031f10:	fa610008 	swi	r19, r1, 8
20031f14:	12610000 	addk	r19, r1, r0
20031f18:	f8b30010 	swi	r5, r19, 16
20031f1c:	f8d30014 	swi	r6, r19, 20
20031f20:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20031f24:	f8130004 	swi	r0, r19, 4
20031f28:	b800005c 	bri	92		// 20031f84
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20031f2c:	e8730010 	lwi	r3, r19, 16
20031f30:	e8830000 	lwi	r4, r3, 0
20031f34:	e8730010 	lwi	r3, r19, 16
20031f38:	e8a3000c 	lwi	r5, r3, 12
20031f3c:	e8730004 	lwi	r3, r19, 4
20031f40:	64630402 	bslli	r3, r3, 2
20031f44:	10651800 	addk	r3, r5, r3
20031f48:	e8a30000 	lwi	r5, r3, 0
20031f4c:	e8730010 	lwi	r3, r19, 16
20031f50:	e8630010 	lwi	r3, r3, 16
20031f54:	e8630000 	lwi	r3, r3, 0
20031f58:	14632800 	rsubk	r3, r3, r5
20031f5c:	10641800 	addk	r3, r4, r3
20031f60:	30830001 	addik	r4, r3, 1
20031f64:	e8730018 	lwi	r3, r19, 24
20031f68:	16441803 	cmpu	r18, r4, r3
20031f6c:	bc52000c 	blti	r18, 12		// 20031f78
            return 0;
20031f70:	10600000 	addk	r3, r0, r0
20031f74:	b8000024 	bri	36		// 20031f98
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20031f78:	e8730004 	lwi	r3, r19, 4
20031f7c:	30630001 	addik	r3, r3, 1
20031f80:	f8730004 	swi	r3, r19, 4
20031f84:	e8930004 	lwi	r4, r19, 4
20031f88:	e8730014 	lwi	r3, r19, 20
20031f8c:	16432003 	cmpu	r18, r3, r4
20031f90:	bc52ff9c 	blti	r18, -100		// 20031f2c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20031f94:	30600001 	addik	r3, r0, 1
}
20031f98:	10330000 	addk	r1, r19, r0
20031f9c:	ea610008 	lwi	r19, r1, 8
20031fa0:	3021000c 	addik	r1, r1, 12
20031fa4:	b60f0008 	rtsd	r15, 8
20031fa8:	80000000 	or	r0, r0, r0

20031fac <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20031fac:	3021ffec 	addik	r1, r1, -20
20031fb0:	fa610010 	swi	r19, r1, 16
20031fb4:	12610000 	addk	r19, r1, r0
20031fb8:	f8b30018 	swi	r5, r19, 24
20031fbc:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20031fc0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20031fc4:	f8130004 	swi	r0, r19, 4
20031fc8:	b8000054 	bri	84		// 2003201c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20031fcc:	e8730018 	lwi	r3, r19, 24
20031fd0:	e8630010 	lwi	r3, r3, 16
20031fd4:	e8830000 	lwi	r4, r3, 0
20031fd8:	e8730018 	lwi	r3, r19, 24
20031fdc:	e8a3000c 	lwi	r5, r3, 12
20031fe0:	e8730004 	lwi	r3, r19, 4
20031fe4:	64630402 	bslli	r3, r3, 2
20031fe8:	10651800 	addk	r3, r5, r3
20031fec:	e8630000 	lwi	r3, r3, 0
20031ff0:	14632000 	rsubk	r3, r3, r4
20031ff4:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20031ff8:	e8930008 	lwi	r4, r19, 8
20031ffc:	e873000c 	lwi	r3, r19, 12
20032000:	16441803 	cmpu	r18, r4, r3
20032004:	bcb20008 	bgei	r18, 8		// 2003200c
20032008:	10640000 	addk	r3, r4, r0
2003200c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20032010:	e8730004 	lwi	r3, r19, 4
20032014:	30630001 	addik	r3, r3, 1
20032018:	f8730004 	swi	r3, r19, 4
2003201c:	e8930004 	lwi	r4, r19, 4
20032020:	e873001c 	lwi	r3, r19, 28
20032024:	16432003 	cmpu	r18, r3, r4
20032028:	bc52ffa4 	blti	r18, -92		// 20031fcc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003202c:	e8730018 	lwi	r3, r19, 24
20032030:	e8830000 	lwi	r4, r3, 0
20032034:	e8730008 	lwi	r3, r19, 8
20032038:	14632000 	rsubk	r3, r3, r4
}
2003203c:	10330000 	addk	r1, r19, r0
20032040:	ea610010 	lwi	r19, r1, 16
20032044:	30210014 	addik	r1, r1, 20
20032048:	b60f0008 	rtsd	r15, 8
2003204c:	80000000 	or	r0, r0, r0

20032050 <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20032050:	3021fff4 	addik	r1, r1, -12
20032054:	fa610008 	swi	r19, r1, 8
20032058:	12610000 	addk	r19, r1, r0
2003205c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20032060:	e8730010 	lwi	r3, r19, 16
20032064:	e8630010 	lwi	r3, r3, 16
20032068:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003206c:	f8130004 	swi	r0, r19, 4
20032070:	b8000028 	bri	40		// 20032098
        fifo->read_inds[i] = 0;
20032074:	e8730010 	lwi	r3, r19, 16
20032078:	e883000c 	lwi	r4, r3, 12
2003207c:	e8730004 	lwi	r3, r19, 4
20032080:	64630402 	bslli	r3, r3, 2
20032084:	10641800 	addk	r3, r4, r3
20032088:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003208c:	e8730004 	lwi	r3, r19, 4
20032090:	30630001 	addik	r3, r3, 1
20032094:	f8730004 	swi	r3, r19, 4
20032098:	e8730010 	lwi	r3, r19, 16
2003209c:	e8830008 	lwi	r4, r3, 8
200320a0:	e8730004 	lwi	r3, r19, 4
200320a4:	16441803 	cmpu	r18, r4, r3
200320a8:	bc52ffcc 	blti	r18, -52		// 20032074
        fifo->read_inds[i] = 0;
    }
}
200320ac:	10330000 	addk	r1, r19, r0
200320b0:	ea610008 	lwi	r19, r1, 8
200320b4:	3021000c 	addik	r1, r1, 12
200320b8:	b60f0008 	rtsd	r15, 8
200320bc:	80000000 	or	r0, r0, r0

200320c0 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200320c0:	3021fff4 	addik	r1, r1, -12
200320c4:	fa610008 	swi	r19, r1, 8
200320c8:	12610000 	addk	r19, r1, r0
200320cc:	f8b30010 	swi	r5, r19, 16
200320d0:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200320d4:	e8730010 	lwi	r3, r19, 16
200320d8:	e8830004 	lwi	r4, r3, 4
200320dc:	e8730010 	lwi	r3, r19, 16
200320e0:	e8a3000c 	lwi	r5, r3, 12
200320e4:	e8730014 	lwi	r3, r19, 20
200320e8:	64630402 	bslli	r3, r3, 2
200320ec:	10651800 	addk	r3, r5, r3
200320f0:	e8a30000 	lwi	r5, r3, 0
200320f4:	e8730010 	lwi	r3, r19, 16
200320f8:	e8630000 	lwi	r3, r3, 0
200320fc:	3063ffff 	addik	r3, r3, -1
20032100:	84651800 	and	r3, r5, r3
20032104:	64630402 	bslli	r3, r3, 2
20032108:	10641800 	addk	r3, r4, r3
2003210c:	e8630000 	lwi	r3, r3, 0
20032110:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20032114:	e8730010 	lwi	r3, r19, 16
20032118:	e883000c 	lwi	r4, r3, 12
2003211c:	e8730014 	lwi	r3, r19, 20
20032120:	64630402 	bslli	r3, r3, 2
20032124:	10641800 	addk	r3, r4, r3
20032128:	e8830000 	lwi	r4, r3, 0
2003212c:	30840001 	addik	r4, r4, 1
20032130:	f8830000 	swi	r4, r3, 0
    return value;
20032134:	e8730004 	lwi	r3, r19, 4
}
20032138:	10330000 	addk	r1, r19, r0
2003213c:	ea610008 	lwi	r19, r1, 8
20032140:	3021000c 	addik	r1, r1, 12
20032144:	b60f0008 	rtsd	r15, 8
20032148:	80000000 	or	r0, r0, r0

2003214c <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003214c:	3021fff8 	addik	r1, r1, -8
20032150:	fa610004 	swi	r19, r1, 4
20032154:	12610000 	addk	r19, r1, r0
20032158:	f8b3000c 	swi	r5, r19, 12
2003215c:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20032160:	e873000c 	lwi	r3, r19, 12
20032164:	e8830004 	lwi	r4, r3, 4
20032168:	e873000c 	lwi	r3, r19, 12
2003216c:	e8630010 	lwi	r3, r3, 16
20032170:	e8a30000 	lwi	r5, r3, 0
20032174:	e873000c 	lwi	r3, r19, 12
20032178:	e8630000 	lwi	r3, r3, 0
2003217c:	3063ffff 	addik	r3, r3, -1
20032180:	84651800 	and	r3, r5, r3
20032184:	64630402 	bslli	r3, r3, 2
20032188:	10641800 	addk	r3, r4, r3
2003218c:	e8930010 	lwi	r4, r19, 16
20032190:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20032194:	e873000c 	lwi	r3, r19, 12
20032198:	e8630010 	lwi	r3, r3, 16
2003219c:	e8830000 	lwi	r4, r3, 0
200321a0:	30840001 	addik	r4, r4, 1
200321a4:	f8830000 	swi	r4, r3, 0
}
200321a8:	10330000 	addk	r1, r19, r0
200321ac:	ea610004 	lwi	r19, r1, 4
200321b0:	30210008 	addik	r1, r1, 8
200321b4:	b60f0008 	rtsd	r15, 8
200321b8:	80000000 	or	r0, r0, r0

200321bc <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200321bc:	3021fff8 	addik	r1, r1, -8
200321c0:	fa610004 	swi	r19, r1, 4
200321c4:	12610000 	addk	r19, r1, r0
200321c8:	f8b3000c 	swi	r5, r19, 12
200321cc:	f8d30010 	swi	r6, r19, 16
200321d0:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200321d4:	e873000c 	lwi	r3, r19, 12
200321d8:	e8630010 	lwi	r3, r3, 16
200321dc:	e8830000 	lwi	r4, r3, 0
200321e0:	e873000c 	lwi	r3, r19, 12
200321e4:	e8a3000c 	lwi	r5, r3, 12
200321e8:	e8730010 	lwi	r3, r19, 16
200321ec:	64630402 	bslli	r3, r3, 2
200321f0:	10651800 	addk	r3, r5, r3
200321f4:	e8630000 	lwi	r3, r3, 0
200321f8:	14a32000 	rsubk	r5, r3, r4
200321fc:	30600001 	addik	r3, r0, 1
20032200:	e8930014 	lwi	r4, r19, 20
20032204:	16442803 	cmpu	r18, r4, r5
20032208:	bcb20008 	bgei	r18, 8		// 20032210
2003220c:	10600000 	addk	r3, r0, r0
20032210:	a46300ff 	andi	r3, r3, 255
}
20032214:	10330000 	addk	r1, r19, r0
20032218:	ea610004 	lwi	r19, r1, 4
2003221c:	30210008 	addik	r1, r1, 8
20032220:	b60f0008 	rtsd	r15, 8
20032224:	80000000 	or	r0, r0, r0

20032228 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20032228:	3021fff8 	addik	r1, r1, -8
2003222c:	fa610004 	swi	r19, r1, 4
20032230:	12610000 	addk	r19, r1, r0
20032234:	f8b3000c 	swi	r5, r19, 12
20032238:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003223c:	e873000c 	lwi	r3, r19, 12
20032240:	e8630010 	lwi	r3, r3, 16
20032244:	e8830000 	lwi	r4, r3, 0
20032248:	e873000c 	lwi	r3, r19, 12
2003224c:	e8a3000c 	lwi	r5, r3, 12
20032250:	e8730010 	lwi	r3, r19, 16
20032254:	64630402 	bslli	r3, r3, 2
20032258:	10651800 	addk	r3, r5, r3
2003225c:	e8630000 	lwi	r3, r3, 0
20032260:	14632000 	rsubk	r3, r3, r4
}
20032264:	10330000 	addk	r1, r19, r0
20032268:	ea610004 	lwi	r19, r1, 4
2003226c:	30210008 	addik	r1, r1, 8
20032270:	b60f0008 	rtsd	r15, 8
20032274:	80000000 	or	r0, r0, r0

20032278 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20032278:	3021fff4 	addik	r1, r1, -12
2003227c:	fa610008 	swi	r19, r1, 8
20032280:	12610000 	addk	r19, r1, r0
20032284:	f8b30010 	swi	r5, r19, 16
20032288:	f8d30014 	swi	r6, r19, 20
2003228c:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20032290:	f8130004 	swi	r0, r19, 4
20032294:	b800005c 	bri	92		// 200322f0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20032298:	e8730010 	lwi	r3, r19, 16
2003229c:	e8830000 	lwi	r4, r3, 0
200322a0:	e8730010 	lwi	r3, r19, 16
200322a4:	e8a3000c 	lwi	r5, r3, 12
200322a8:	e8730004 	lwi	r3, r19, 4
200322ac:	64630402 	bslli	r3, r3, 2
200322b0:	10651800 	addk	r3, r5, r3
200322b4:	e8a30000 	lwi	r5, r3, 0
200322b8:	e8730010 	lwi	r3, r19, 16
200322bc:	e8630010 	lwi	r3, r3, 16
200322c0:	e8630000 	lwi	r3, r3, 0
200322c4:	14632800 	rsubk	r3, r3, r5
200322c8:	10641800 	addk	r3, r4, r3
200322cc:	30830001 	addik	r4, r3, 1
200322d0:	e8730018 	lwi	r3, r19, 24
200322d4:	16441803 	cmpu	r18, r4, r3
200322d8:	bc52000c 	blti	r18, 12		// 200322e4
            return 0;
200322dc:	10600000 	addk	r3, r0, r0
200322e0:	b8000024 	bri	36		// 20032304
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200322e4:	e8730004 	lwi	r3, r19, 4
200322e8:	30630001 	addik	r3, r3, 1
200322ec:	f8730004 	swi	r3, r19, 4
200322f0:	e8930004 	lwi	r4, r19, 4
200322f4:	e8730014 	lwi	r3, r19, 20
200322f8:	16432003 	cmpu	r18, r3, r4
200322fc:	bc52ff9c 	blti	r18, -100		// 20032298
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20032300:	30600001 	addik	r3, r0, 1
}
20032304:	10330000 	addk	r1, r19, r0
20032308:	ea610008 	lwi	r19, r1, 8
2003230c:	3021000c 	addik	r1, r1, 12
20032310:	b60f0008 	rtsd	r15, 8
20032314:	80000000 	or	r0, r0, r0

20032318 <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20032318:	3021ffec 	addik	r1, r1, -20
2003231c:	fa610010 	swi	r19, r1, 16
20032320:	12610000 	addk	r19, r1, r0
20032324:	f8b30018 	swi	r5, r19, 24
20032328:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003232c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20032330:	f8130004 	swi	r0, r19, 4
20032334:	b8000054 	bri	84		// 20032388
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20032338:	e8730018 	lwi	r3, r19, 24
2003233c:	e8630010 	lwi	r3, r3, 16
20032340:	e8830000 	lwi	r4, r3, 0
20032344:	e8730018 	lwi	r3, r19, 24
20032348:	e8a3000c 	lwi	r5, r3, 12
2003234c:	e8730004 	lwi	r3, r19, 4
20032350:	64630402 	bslli	r3, r3, 2
20032354:	10651800 	addk	r3, r5, r3
20032358:	e8630000 	lwi	r3, r3, 0
2003235c:	14632000 	rsubk	r3, r3, r4
20032360:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20032364:	e8930008 	lwi	r4, r19, 8
20032368:	e873000c 	lwi	r3, r19, 12
2003236c:	16441803 	cmpu	r18, r4, r3
20032370:	bcb20008 	bgei	r18, 8		// 20032378
20032374:	10640000 	addk	r3, r4, r0
20032378:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003237c:	e8730004 	lwi	r3, r19, 4
20032380:	30630001 	addik	r3, r3, 1
20032384:	f8730004 	swi	r3, r19, 4
20032388:	e8930004 	lwi	r4, r19, 4
2003238c:	e873001c 	lwi	r3, r19, 28
20032390:	16432003 	cmpu	r18, r3, r4
20032394:	bc52ffa4 	blti	r18, -92		// 20032338
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20032398:	e8730018 	lwi	r3, r19, 24
2003239c:	e8830000 	lwi	r4, r3, 0
200323a0:	e8730008 	lwi	r3, r19, 8
200323a4:	14632000 	rsubk	r3, r3, r4
}
200323a8:	10330000 	addk	r1, r19, r0
200323ac:	ea610010 	lwi	r19, r1, 16
200323b0:	30210014 	addik	r1, r1, 20
200323b4:	b60f0008 	rtsd	r15, 8
200323b8:	80000000 	or	r0, r0, r0

200323bc <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200323bc:	3021fff4 	addik	r1, r1, -12
200323c0:	fa610008 	swi	r19, r1, 8
200323c4:	12610000 	addk	r19, r1, r0
200323c8:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
200323cc:	e8730010 	lwi	r3, r19, 16
200323d0:	e8630010 	lwi	r3, r3, 16
200323d4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200323d8:	f8130004 	swi	r0, r19, 4
200323dc:	b8000028 	bri	40		// 20032404
        fifo->read_inds[i] = 0;
200323e0:	e8730010 	lwi	r3, r19, 16
200323e4:	e883000c 	lwi	r4, r3, 12
200323e8:	e8730004 	lwi	r3, r19, 4
200323ec:	64630402 	bslli	r3, r3, 2
200323f0:	10641800 	addk	r3, r4, r3
200323f4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200323f8:	e8730004 	lwi	r3, r19, 4
200323fc:	30630001 	addik	r3, r3, 1
20032400:	f8730004 	swi	r3, r19, 4
20032404:	e8730010 	lwi	r3, r19, 16
20032408:	e8830008 	lwi	r4, r3, 8
2003240c:	e8730004 	lwi	r3, r19, 4
20032410:	16441803 	cmpu	r18, r4, r3
20032414:	bc52ffcc 	blti	r18, -52		// 200323e0
        fifo->read_inds[i] = 0;
    }
}
20032418:	10330000 	addk	r1, r19, r0
2003241c:	ea610008 	lwi	r19, r1, 8
20032420:	3021000c 	addik	r1, r1, 12
20032424:	b60f0008 	rtsd	r15, 8
20032428:	80000000 	or	r0, r0, r0

2003242c <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003242c:	3021fff0 	addik	r1, r1, -16
20032430:	fa61000c 	swi	r19, r1, 12
20032434:	12610000 	addk	r19, r1, r0
20032438:	f8b30014 	swi	r5, r19, 20
2003243c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20032440:	e8730014 	lwi	r3, r19, 20
20032444:	e8830004 	lwi	r4, r3, 4
20032448:	e8730014 	lwi	r3, r19, 20
2003244c:	e8a3000c 	lwi	r5, r3, 12
20032450:	e8730018 	lwi	r3, r19, 24
20032454:	64630402 	bslli	r3, r3, 2
20032458:	10651800 	addk	r3, r5, r3
2003245c:	e8a30000 	lwi	r5, r3, 0
20032460:	e8730014 	lwi	r3, r19, 20
20032464:	e8630000 	lwi	r3, r3, 0
20032468:	3063ffff 	addik	r3, r3, -1
2003246c:	84651800 	and	r3, r5, r3
20032470:	64630403 	bslli	r3, r3, 3
20032474:	10641800 	addk	r3, r4, r3
20032478:	e8830000 	lwi	r4, r3, 0
2003247c:	e8a30004 	lwi	r5, r3, 4
20032480:	f8930004 	swi	r4, r19, 4
20032484:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20032488:	e8730014 	lwi	r3, r19, 20
2003248c:	e883000c 	lwi	r4, r3, 12
20032490:	e8730018 	lwi	r3, r19, 24
20032494:	64630402 	bslli	r3, r3, 2
20032498:	10641800 	addk	r3, r4, r3
2003249c:	e8830000 	lwi	r4, r3, 0
200324a0:	30840001 	addik	r4, r4, 1
200324a4:	f8830000 	swi	r4, r3, 0
    return value;
200324a8:	e8930004 	lwi	r4, r19, 4
200324ac:	e8b30008 	lwi	r5, r19, 8
}
200324b0:	10640000 	addk	r3, r4, r0
200324b4:	10850000 	addk	r4, r5, r0
200324b8:	10330000 	addk	r1, r19, r0
200324bc:	ea61000c 	lwi	r19, r1, 12
200324c0:	30210010 	addik	r1, r1, 16
200324c4:	b60f0008 	rtsd	r15, 8
200324c8:	80000000 	or	r0, r0, r0

200324cc <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200324cc:	3021fff8 	addik	r1, r1, -8
200324d0:	fa610004 	swi	r19, r1, 4
200324d4:	12610000 	addk	r19, r1, r0
200324d8:	f8b3000c 	swi	r5, r19, 12
200324dc:	f8d30010 	swi	r6, r19, 16
200324e0:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200324e4:	e873000c 	lwi	r3, r19, 12
200324e8:	e8830004 	lwi	r4, r3, 4
200324ec:	e873000c 	lwi	r3, r19, 12
200324f0:	e8630010 	lwi	r3, r3, 16
200324f4:	e8a30000 	lwi	r5, r3, 0
200324f8:	e873000c 	lwi	r3, r19, 12
200324fc:	e8630000 	lwi	r3, r3, 0
20032500:	3063ffff 	addik	r3, r3, -1
20032504:	84651800 	and	r3, r5, r3
20032508:	64630403 	bslli	r3, r3, 3
2003250c:	10641800 	addk	r3, r4, r3
20032510:	e8930010 	lwi	r4, r19, 16
20032514:	e8b30014 	lwi	r5, r19, 20
20032518:	f8830000 	swi	r4, r3, 0
2003251c:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20032520:	e873000c 	lwi	r3, r19, 12
20032524:	e8630010 	lwi	r3, r3, 16
20032528:	e8830000 	lwi	r4, r3, 0
2003252c:	30840001 	addik	r4, r4, 1
20032530:	f8830000 	swi	r4, r3, 0
}
20032534:	10330000 	addk	r1, r19, r0
20032538:	ea610004 	lwi	r19, r1, 4
2003253c:	30210008 	addik	r1, r1, 8
20032540:	b60f0008 	rtsd	r15, 8
20032544:	80000000 	or	r0, r0, r0

20032548 <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20032548:	3021fff8 	addik	r1, r1, -8
2003254c:	fa610004 	swi	r19, r1, 4
20032550:	12610000 	addk	r19, r1, r0
20032554:	f8b3000c 	swi	r5, r19, 12
20032558:	f8d30010 	swi	r6, r19, 16
2003255c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20032560:	e873000c 	lwi	r3, r19, 12
20032564:	e8630010 	lwi	r3, r3, 16
20032568:	e8830000 	lwi	r4, r3, 0
2003256c:	e873000c 	lwi	r3, r19, 12
20032570:	e8a3000c 	lwi	r5, r3, 12
20032574:	e8730010 	lwi	r3, r19, 16
20032578:	64630402 	bslli	r3, r3, 2
2003257c:	10651800 	addk	r3, r5, r3
20032580:	e8630000 	lwi	r3, r3, 0
20032584:	14a32000 	rsubk	r5, r3, r4
20032588:	30600001 	addik	r3, r0, 1
2003258c:	e8930014 	lwi	r4, r19, 20
20032590:	16442803 	cmpu	r18, r4, r5
20032594:	bcb20008 	bgei	r18, 8		// 2003259c
20032598:	10600000 	addk	r3, r0, r0
2003259c:	a46300ff 	andi	r3, r3, 255
}
200325a0:	10330000 	addk	r1, r19, r0
200325a4:	ea610004 	lwi	r19, r1, 4
200325a8:	30210008 	addik	r1, r1, 8
200325ac:	b60f0008 	rtsd	r15, 8
200325b0:	80000000 	or	r0, r0, r0

200325b4 <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200325b4:	3021fff8 	addik	r1, r1, -8
200325b8:	fa610004 	swi	r19, r1, 4
200325bc:	12610000 	addk	r19, r1, r0
200325c0:	f8b3000c 	swi	r5, r19, 12
200325c4:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200325c8:	e873000c 	lwi	r3, r19, 12
200325cc:	e8630010 	lwi	r3, r3, 16
200325d0:	e8830000 	lwi	r4, r3, 0
200325d4:	e873000c 	lwi	r3, r19, 12
200325d8:	e8a3000c 	lwi	r5, r3, 12
200325dc:	e8730010 	lwi	r3, r19, 16
200325e0:	64630402 	bslli	r3, r3, 2
200325e4:	10651800 	addk	r3, r5, r3
200325e8:	e8630000 	lwi	r3, r3, 0
200325ec:	14632000 	rsubk	r3, r3, r4
}
200325f0:	10330000 	addk	r1, r19, r0
200325f4:	ea610004 	lwi	r19, r1, 4
200325f8:	30210008 	addik	r1, r1, 8
200325fc:	b60f0008 	rtsd	r15, 8
20032600:	80000000 	or	r0, r0, r0

20032604 <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20032604:	3021fff4 	addik	r1, r1, -12
20032608:	fa610008 	swi	r19, r1, 8
2003260c:	12610000 	addk	r19, r1, r0
20032610:	f8b30010 	swi	r5, r19, 16
20032614:	f8d30014 	swi	r6, r19, 20
20032618:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003261c:	f8130004 	swi	r0, r19, 4
20032620:	b800005c 	bri	92		// 2003267c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20032624:	e8730010 	lwi	r3, r19, 16
20032628:	e8830000 	lwi	r4, r3, 0
2003262c:	e8730010 	lwi	r3, r19, 16
20032630:	e8a3000c 	lwi	r5, r3, 12
20032634:	e8730004 	lwi	r3, r19, 4
20032638:	64630402 	bslli	r3, r3, 2
2003263c:	10651800 	addk	r3, r5, r3
20032640:	e8a30000 	lwi	r5, r3, 0
20032644:	e8730010 	lwi	r3, r19, 16
20032648:	e8630010 	lwi	r3, r3, 16
2003264c:	e8630000 	lwi	r3, r3, 0
20032650:	14632800 	rsubk	r3, r3, r5
20032654:	10641800 	addk	r3, r4, r3
20032658:	30830001 	addik	r4, r3, 1
2003265c:	e8730018 	lwi	r3, r19, 24
20032660:	16441803 	cmpu	r18, r4, r3
20032664:	bc52000c 	blti	r18, 12		// 20032670
            return 0;
20032668:	10600000 	addk	r3, r0, r0
2003266c:	b8000024 	bri	36		// 20032690
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20032670:	e8730004 	lwi	r3, r19, 4
20032674:	30630001 	addik	r3, r3, 1
20032678:	f8730004 	swi	r3, r19, 4
2003267c:	e8930004 	lwi	r4, r19, 4
20032680:	e8730014 	lwi	r3, r19, 20
20032684:	16432003 	cmpu	r18, r3, r4
20032688:	bc52ff9c 	blti	r18, -100		// 20032624
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003268c:	30600001 	addik	r3, r0, 1
}
20032690:	10330000 	addk	r1, r19, r0
20032694:	ea610008 	lwi	r19, r1, 8
20032698:	3021000c 	addik	r1, r1, 12
2003269c:	b60f0008 	rtsd	r15, 8
200326a0:	80000000 	or	r0, r0, r0

200326a4 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200326a4:	3021ffec 	addik	r1, r1, -20
200326a8:	fa610010 	swi	r19, r1, 16
200326ac:	12610000 	addk	r19, r1, r0
200326b0:	f8b30018 	swi	r5, r19, 24
200326b4:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200326b8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200326bc:	f8130004 	swi	r0, r19, 4
200326c0:	b8000054 	bri	84		// 20032714
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200326c4:	e8730018 	lwi	r3, r19, 24
200326c8:	e8630010 	lwi	r3, r3, 16
200326cc:	e8830000 	lwi	r4, r3, 0
200326d0:	e8730018 	lwi	r3, r19, 24
200326d4:	e8a3000c 	lwi	r5, r3, 12
200326d8:	e8730004 	lwi	r3, r19, 4
200326dc:	64630402 	bslli	r3, r3, 2
200326e0:	10651800 	addk	r3, r5, r3
200326e4:	e8630000 	lwi	r3, r3, 0
200326e8:	14632000 	rsubk	r3, r3, r4
200326ec:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200326f0:	e8930008 	lwi	r4, r19, 8
200326f4:	e873000c 	lwi	r3, r19, 12
200326f8:	16441803 	cmpu	r18, r4, r3
200326fc:	bcb20008 	bgei	r18, 8		// 20032704
20032700:	10640000 	addk	r3, r4, r0
20032704:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20032708:	e8730004 	lwi	r3, r19, 4
2003270c:	30630001 	addik	r3, r3, 1
20032710:	f8730004 	swi	r3, r19, 4
20032714:	e8930004 	lwi	r4, r19, 4
20032718:	e873001c 	lwi	r3, r19, 28
2003271c:	16432003 	cmpu	r18, r3, r4
20032720:	bc52ffa4 	blti	r18, -92		// 200326c4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20032724:	e8730018 	lwi	r3, r19, 24
20032728:	e8830000 	lwi	r4, r3, 0
2003272c:	e8730008 	lwi	r3, r19, 8
20032730:	14632000 	rsubk	r3, r3, r4
}
20032734:	10330000 	addk	r1, r19, r0
20032738:	ea610010 	lwi	r19, r1, 16
2003273c:	30210014 	addik	r1, r1, 20
20032740:	b60f0008 	rtsd	r15, 8
20032744:	80000000 	or	r0, r0, r0

20032748 <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20032748:	3021fff4 	addik	r1, r1, -12
2003274c:	fa610008 	swi	r19, r1, 8
20032750:	12610000 	addk	r19, r1, r0
20032754:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20032758:	e8730010 	lwi	r3, r19, 16
2003275c:	e8630010 	lwi	r3, r3, 16
20032760:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20032764:	f8130004 	swi	r0, r19, 4
20032768:	b8000028 	bri	40		// 20032790
        fifo->read_inds[i] = 0;
2003276c:	e8730010 	lwi	r3, r19, 16
20032770:	e883000c 	lwi	r4, r3, 12
20032774:	e8730004 	lwi	r3, r19, 4
20032778:	64630402 	bslli	r3, r3, 2
2003277c:	10641800 	addk	r3, r4, r3
20032780:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20032784:	e8730004 	lwi	r3, r19, 4
20032788:	30630001 	addik	r3, r3, 1
2003278c:	f8730004 	swi	r3, r19, 4
20032790:	e8730010 	lwi	r3, r19, 16
20032794:	e8830008 	lwi	r4, r3, 8
20032798:	e8730004 	lwi	r3, r19, 4
2003279c:	16441803 	cmpu	r18, r4, r3
200327a0:	bc52ffcc 	blti	r18, -52		// 2003276c
        fifo->read_inds[i] = 0;
    }
}
200327a4:	10330000 	addk	r1, r19, r0
200327a8:	ea610008 	lwi	r19, r1, 8
200327ac:	3021000c 	addik	r1, r1, 12
200327b0:	b60f0008 	rtsd	r15, 8
200327b4:	80000000 	or	r0, r0, r0

200327b8 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200327b8:	3021fff4 	addik	r1, r1, -12
200327bc:	fa610008 	swi	r19, r1, 8
200327c0:	12610000 	addk	r19, r1, r0
200327c4:	f8b30010 	swi	r5, r19, 16
200327c8:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200327cc:	e8730010 	lwi	r3, r19, 16
200327d0:	e8830004 	lwi	r4, r3, 4
200327d4:	e8730010 	lwi	r3, r19, 16
200327d8:	e8a3000c 	lwi	r5, r3, 12
200327dc:	e8730014 	lwi	r3, r19, 20
200327e0:	64630402 	bslli	r3, r3, 2
200327e4:	10651800 	addk	r3, r5, r3
200327e8:	e8a30000 	lwi	r5, r3, 0
200327ec:	e8730010 	lwi	r3, r19, 16
200327f0:	e8630000 	lwi	r3, r3, 0
200327f4:	3063ffff 	addik	r3, r3, -1
200327f8:	84651800 	and	r3, r5, r3
200327fc:	10641800 	addk	r3, r4, r3
20032800:	e0630000 	lbui	r3, r3, 0
20032804:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20032808:	e8730010 	lwi	r3, r19, 16
2003280c:	e883000c 	lwi	r4, r3, 12
20032810:	e8730014 	lwi	r3, r19, 20
20032814:	64630402 	bslli	r3, r3, 2
20032818:	10641800 	addk	r3, r4, r3
2003281c:	e8830000 	lwi	r4, r3, 0
20032820:	30840001 	addik	r4, r4, 1
20032824:	f8830000 	swi	r4, r3, 0
    return value;
20032828:	e0730004 	lbui	r3, r19, 4
}
2003282c:	10330000 	addk	r1, r19, r0
20032830:	ea610008 	lwi	r19, r1, 8
20032834:	3021000c 	addik	r1, r1, 12
20032838:	b60f0008 	rtsd	r15, 8
2003283c:	80000000 	or	r0, r0, r0

20032840 <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20032840:	3021fff8 	addik	r1, r1, -8
20032844:	fa610004 	swi	r19, r1, 4
20032848:	12610000 	addk	r19, r1, r0
2003284c:	f8b3000c 	swi	r5, r19, 12
20032850:	10660000 	addk	r3, r6, r0
20032854:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20032858:	e873000c 	lwi	r3, r19, 12
2003285c:	e8830004 	lwi	r4, r3, 4
20032860:	e873000c 	lwi	r3, r19, 12
20032864:	e8630010 	lwi	r3, r3, 16
20032868:	e8a30000 	lwi	r5, r3, 0
2003286c:	e873000c 	lwi	r3, r19, 12
20032870:	e8630000 	lwi	r3, r3, 0
20032874:	3063ffff 	addik	r3, r3, -1
20032878:	84651800 	and	r3, r5, r3
2003287c:	10641800 	addk	r3, r4, r3
20032880:	e0930010 	lbui	r4, r19, 16
20032884:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20032888:	e873000c 	lwi	r3, r19, 12
2003288c:	e8630010 	lwi	r3, r3, 16
20032890:	e8830000 	lwi	r4, r3, 0
20032894:	30840001 	addik	r4, r4, 1
20032898:	f8830000 	swi	r4, r3, 0
}
2003289c:	10330000 	addk	r1, r19, r0
200328a0:	ea610004 	lwi	r19, r1, 4
200328a4:	30210008 	addik	r1, r1, 8
200328a8:	b60f0008 	rtsd	r15, 8
200328ac:	80000000 	or	r0, r0, r0

200328b0 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200328b0:	3021fff8 	addik	r1, r1, -8
200328b4:	fa610004 	swi	r19, r1, 4
200328b8:	12610000 	addk	r19, r1, r0
200328bc:	f8b3000c 	swi	r5, r19, 12
200328c0:	f8d30010 	swi	r6, r19, 16
200328c4:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200328c8:	e873000c 	lwi	r3, r19, 12
200328cc:	e8630010 	lwi	r3, r3, 16
200328d0:	e8830000 	lwi	r4, r3, 0
200328d4:	e873000c 	lwi	r3, r19, 12
200328d8:	e8a3000c 	lwi	r5, r3, 12
200328dc:	e8730010 	lwi	r3, r19, 16
200328e0:	64630402 	bslli	r3, r3, 2
200328e4:	10651800 	addk	r3, r5, r3
200328e8:	e8630000 	lwi	r3, r3, 0
200328ec:	14a32000 	rsubk	r5, r3, r4
200328f0:	30600001 	addik	r3, r0, 1
200328f4:	e8930014 	lwi	r4, r19, 20
200328f8:	16442803 	cmpu	r18, r4, r5
200328fc:	bcb20008 	bgei	r18, 8		// 20032904
20032900:	10600000 	addk	r3, r0, r0
20032904:	a46300ff 	andi	r3, r3, 255
}
20032908:	10330000 	addk	r1, r19, r0
2003290c:	ea610004 	lwi	r19, r1, 4
20032910:	30210008 	addik	r1, r1, 8
20032914:	b60f0008 	rtsd	r15, 8
20032918:	80000000 	or	r0, r0, r0

2003291c <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003291c:	3021fff8 	addik	r1, r1, -8
20032920:	fa610004 	swi	r19, r1, 4
20032924:	12610000 	addk	r19, r1, r0
20032928:	f8b3000c 	swi	r5, r19, 12
2003292c:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20032930:	e873000c 	lwi	r3, r19, 12
20032934:	e8630010 	lwi	r3, r3, 16
20032938:	e8830000 	lwi	r4, r3, 0
2003293c:	e873000c 	lwi	r3, r19, 12
20032940:	e8a3000c 	lwi	r5, r3, 12
20032944:	e8730010 	lwi	r3, r19, 16
20032948:	64630402 	bslli	r3, r3, 2
2003294c:	10651800 	addk	r3, r5, r3
20032950:	e8630000 	lwi	r3, r3, 0
20032954:	14632000 	rsubk	r3, r3, r4
}
20032958:	10330000 	addk	r1, r19, r0
2003295c:	ea610004 	lwi	r19, r1, 4
20032960:	30210008 	addik	r1, r1, 8
20032964:	b60f0008 	rtsd	r15, 8
20032968:	80000000 	or	r0, r0, r0

2003296c <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003296c:	3021fff4 	addik	r1, r1, -12
20032970:	fa610008 	swi	r19, r1, 8
20032974:	12610000 	addk	r19, r1, r0
20032978:	f8b30010 	swi	r5, r19, 16
2003297c:	f8d30014 	swi	r6, r19, 20
20032980:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20032984:	f8130004 	swi	r0, r19, 4
20032988:	b800005c 	bri	92		// 200329e4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003298c:	e8730010 	lwi	r3, r19, 16
20032990:	e8830000 	lwi	r4, r3, 0
20032994:	e8730010 	lwi	r3, r19, 16
20032998:	e8a3000c 	lwi	r5, r3, 12
2003299c:	e8730004 	lwi	r3, r19, 4
200329a0:	64630402 	bslli	r3, r3, 2
200329a4:	10651800 	addk	r3, r5, r3
200329a8:	e8a30000 	lwi	r5, r3, 0
200329ac:	e8730010 	lwi	r3, r19, 16
200329b0:	e8630010 	lwi	r3, r3, 16
200329b4:	e8630000 	lwi	r3, r3, 0
200329b8:	14632800 	rsubk	r3, r3, r5
200329bc:	10641800 	addk	r3, r4, r3
200329c0:	30830001 	addik	r4, r3, 1
200329c4:	e8730018 	lwi	r3, r19, 24
200329c8:	16441803 	cmpu	r18, r4, r3
200329cc:	bc52000c 	blti	r18, 12		// 200329d8
            return 0;
200329d0:	10600000 	addk	r3, r0, r0
200329d4:	b8000024 	bri	36		// 200329f8
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200329d8:	e8730004 	lwi	r3, r19, 4
200329dc:	30630001 	addik	r3, r3, 1
200329e0:	f8730004 	swi	r3, r19, 4
200329e4:	e8930004 	lwi	r4, r19, 4
200329e8:	e8730014 	lwi	r3, r19, 20
200329ec:	16432003 	cmpu	r18, r3, r4
200329f0:	bc52ff9c 	blti	r18, -100		// 2003298c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200329f4:	30600001 	addik	r3, r0, 1
}
200329f8:	10330000 	addk	r1, r19, r0
200329fc:	ea610008 	lwi	r19, r1, 8
20032a00:	3021000c 	addik	r1, r1, 12
20032a04:	b60f0008 	rtsd	r15, 8
20032a08:	80000000 	or	r0, r0, r0

20032a0c <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20032a0c:	3021ffec 	addik	r1, r1, -20
20032a10:	fa610010 	swi	r19, r1, 16
20032a14:	12610000 	addk	r19, r1, r0
20032a18:	f8b30018 	swi	r5, r19, 24
20032a1c:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20032a20:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20032a24:	f8130004 	swi	r0, r19, 4
20032a28:	b8000054 	bri	84		// 20032a7c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20032a2c:	e8730018 	lwi	r3, r19, 24
20032a30:	e8630010 	lwi	r3, r3, 16
20032a34:	e8830000 	lwi	r4, r3, 0
20032a38:	e8730018 	lwi	r3, r19, 24
20032a3c:	e8a3000c 	lwi	r5, r3, 12
20032a40:	e8730004 	lwi	r3, r19, 4
20032a44:	64630402 	bslli	r3, r3, 2
20032a48:	10651800 	addk	r3, r5, r3
20032a4c:	e8630000 	lwi	r3, r3, 0
20032a50:	14632000 	rsubk	r3, r3, r4
20032a54:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20032a58:	e8930008 	lwi	r4, r19, 8
20032a5c:	e873000c 	lwi	r3, r19, 12
20032a60:	16441803 	cmpu	r18, r4, r3
20032a64:	bcb20008 	bgei	r18, 8		// 20032a6c
20032a68:	10640000 	addk	r3, r4, r0
20032a6c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20032a70:	e8730004 	lwi	r3, r19, 4
20032a74:	30630001 	addik	r3, r3, 1
20032a78:	f8730004 	swi	r3, r19, 4
20032a7c:	e8930004 	lwi	r4, r19, 4
20032a80:	e873001c 	lwi	r3, r19, 28
20032a84:	16432003 	cmpu	r18, r3, r4
20032a88:	bc52ffa4 	blti	r18, -92		// 20032a2c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20032a8c:	e8730018 	lwi	r3, r19, 24
20032a90:	e8830000 	lwi	r4, r3, 0
20032a94:	e8730008 	lwi	r3, r19, 8
20032a98:	14632000 	rsubk	r3, r3, r4
}
20032a9c:	10330000 	addk	r1, r19, r0
20032aa0:	ea610010 	lwi	r19, r1, 16
20032aa4:	30210014 	addik	r1, r1, 20
20032aa8:	b60f0008 	rtsd	r15, 8
20032aac:	80000000 	or	r0, r0, r0

20032ab0 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20032ab0:	3021fff4 	addik	r1, r1, -12
20032ab4:	fa610008 	swi	r19, r1, 8
20032ab8:	12610000 	addk	r19, r1, r0
20032abc:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20032ac0:	e8730010 	lwi	r3, r19, 16
20032ac4:	e8630010 	lwi	r3, r3, 16
20032ac8:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20032acc:	f8130004 	swi	r0, r19, 4
20032ad0:	b8000028 	bri	40		// 20032af8
        fifo->read_inds[i] = 0;
20032ad4:	e8730010 	lwi	r3, r19, 16
20032ad8:	e883000c 	lwi	r4, r3, 12
20032adc:	e8730004 	lwi	r3, r19, 4
20032ae0:	64630402 	bslli	r3, r3, 2
20032ae4:	10641800 	addk	r3, r4, r3
20032ae8:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20032aec:	e8730004 	lwi	r3, r19, 4
20032af0:	30630001 	addik	r3, r3, 1
20032af4:	f8730004 	swi	r3, r19, 4
20032af8:	e8730010 	lwi	r3, r19, 16
20032afc:	e8830008 	lwi	r4, r3, 8
20032b00:	e8730004 	lwi	r3, r19, 4
20032b04:	16441803 	cmpu	r18, r4, r3
20032b08:	bc52ffcc 	blti	r18, -52		// 20032ad4
        fifo->read_inds[i] = 0;
    }
}
20032b0c:	10330000 	addk	r1, r19, r0
20032b10:	ea610008 	lwi	r19, r1, 8
20032b14:	3021000c 	addik	r1, r1, 12
20032b18:	b60f0008 	rtsd	r15, 8
20032b1c:	80000000 	or	r0, r0, r0

20032b20 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20032b20:	3021fff4 	addik	r1, r1, -12
20032b24:	fa610008 	swi	r19, r1, 8
20032b28:	12610000 	addk	r19, r1, r0
20032b2c:	f8b30010 	swi	r5, r19, 16
20032b30:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20032b34:	e8730010 	lwi	r3, r19, 16
20032b38:	e8830004 	lwi	r4, r3, 4
20032b3c:	e8730010 	lwi	r3, r19, 16
20032b40:	e8a3000c 	lwi	r5, r3, 12
20032b44:	e8730014 	lwi	r3, r19, 20
20032b48:	64630402 	bslli	r3, r3, 2
20032b4c:	10651800 	addk	r3, r5, r3
20032b50:	e8a30000 	lwi	r5, r3, 0
20032b54:	e8730010 	lwi	r3, r19, 16
20032b58:	e8630000 	lwi	r3, r3, 0
20032b5c:	3063ffff 	addik	r3, r3, -1
20032b60:	84651800 	and	r3, r5, r3
20032b64:	10631800 	addk	r3, r3, r3
20032b68:	10641800 	addk	r3, r4, r3
20032b6c:	e4630000 	lhui	r3, r3, 0
20032b70:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20032b74:	e8730010 	lwi	r3, r19, 16
20032b78:	e883000c 	lwi	r4, r3, 12
20032b7c:	e8730014 	lwi	r3, r19, 20
20032b80:	64630402 	bslli	r3, r3, 2
20032b84:	10641800 	addk	r3, r4, r3
20032b88:	e8830000 	lwi	r4, r3, 0
20032b8c:	30840001 	addik	r4, r4, 1
20032b90:	f8830000 	swi	r4, r3, 0
    return value;
20032b94:	e4730004 	lhui	r3, r19, 4
}
20032b98:	10330000 	addk	r1, r19, r0
20032b9c:	ea610008 	lwi	r19, r1, 8
20032ba0:	3021000c 	addik	r1, r1, 12
20032ba4:	b60f0008 	rtsd	r15, 8
20032ba8:	80000000 	or	r0, r0, r0

20032bac <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20032bac:	3021fff8 	addik	r1, r1, -8
20032bb0:	fa610004 	swi	r19, r1, 4
20032bb4:	12610000 	addk	r19, r1, r0
20032bb8:	f8b3000c 	swi	r5, r19, 12
20032bbc:	10660000 	addk	r3, r6, r0
20032bc0:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20032bc4:	e873000c 	lwi	r3, r19, 12
20032bc8:	e8830004 	lwi	r4, r3, 4
20032bcc:	e873000c 	lwi	r3, r19, 12
20032bd0:	e8630010 	lwi	r3, r3, 16
20032bd4:	e8a30000 	lwi	r5, r3, 0
20032bd8:	e873000c 	lwi	r3, r19, 12
20032bdc:	e8630000 	lwi	r3, r3, 0
20032be0:	3063ffff 	addik	r3, r3, -1
20032be4:	84651800 	and	r3, r5, r3
20032be8:	10631800 	addk	r3, r3, r3
20032bec:	10641800 	addk	r3, r4, r3
20032bf0:	e4930010 	lhui	r4, r19, 16
20032bf4:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20032bf8:	e873000c 	lwi	r3, r19, 12
20032bfc:	e8630010 	lwi	r3, r3, 16
20032c00:	e8830000 	lwi	r4, r3, 0
20032c04:	30840001 	addik	r4, r4, 1
20032c08:	f8830000 	swi	r4, r3, 0
}
20032c0c:	10330000 	addk	r1, r19, r0
20032c10:	ea610004 	lwi	r19, r1, 4
20032c14:	30210008 	addik	r1, r1, 8
20032c18:	b60f0008 	rtsd	r15, 8
20032c1c:	80000000 	or	r0, r0, r0

20032c20 <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20032c20:	3021fff8 	addik	r1, r1, -8
20032c24:	fa610004 	swi	r19, r1, 4
20032c28:	12610000 	addk	r19, r1, r0
20032c2c:	f8b3000c 	swi	r5, r19, 12
20032c30:	f8d30010 	swi	r6, r19, 16
20032c34:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20032c38:	e873000c 	lwi	r3, r19, 12
20032c3c:	e8630010 	lwi	r3, r3, 16
20032c40:	e8830000 	lwi	r4, r3, 0
20032c44:	e873000c 	lwi	r3, r19, 12
20032c48:	e8a3000c 	lwi	r5, r3, 12
20032c4c:	e8730010 	lwi	r3, r19, 16
20032c50:	64630402 	bslli	r3, r3, 2
20032c54:	10651800 	addk	r3, r5, r3
20032c58:	e8630000 	lwi	r3, r3, 0
20032c5c:	14a32000 	rsubk	r5, r3, r4
20032c60:	30600001 	addik	r3, r0, 1
20032c64:	e8930014 	lwi	r4, r19, 20
20032c68:	16442803 	cmpu	r18, r4, r5
20032c6c:	bcb20008 	bgei	r18, 8		// 20032c74
20032c70:	10600000 	addk	r3, r0, r0
20032c74:	a46300ff 	andi	r3, r3, 255
}
20032c78:	10330000 	addk	r1, r19, r0
20032c7c:	ea610004 	lwi	r19, r1, 4
20032c80:	30210008 	addik	r1, r1, 8
20032c84:	b60f0008 	rtsd	r15, 8
20032c88:	80000000 	or	r0, r0, r0

20032c8c <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20032c8c:	3021fff8 	addik	r1, r1, -8
20032c90:	fa610004 	swi	r19, r1, 4
20032c94:	12610000 	addk	r19, r1, r0
20032c98:	f8b3000c 	swi	r5, r19, 12
20032c9c:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20032ca0:	e873000c 	lwi	r3, r19, 12
20032ca4:	e8630010 	lwi	r3, r3, 16
20032ca8:	e8830000 	lwi	r4, r3, 0
20032cac:	e873000c 	lwi	r3, r19, 12
20032cb0:	e8a3000c 	lwi	r5, r3, 12
20032cb4:	e8730010 	lwi	r3, r19, 16
20032cb8:	64630402 	bslli	r3, r3, 2
20032cbc:	10651800 	addk	r3, r5, r3
20032cc0:	e8630000 	lwi	r3, r3, 0
20032cc4:	14632000 	rsubk	r3, r3, r4
}
20032cc8:	10330000 	addk	r1, r19, r0
20032ccc:	ea610004 	lwi	r19, r1, 4
20032cd0:	30210008 	addik	r1, r1, 8
20032cd4:	b60f0008 	rtsd	r15, 8
20032cd8:	80000000 	or	r0, r0, r0

20032cdc <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20032cdc:	3021fff4 	addik	r1, r1, -12
20032ce0:	fa610008 	swi	r19, r1, 8
20032ce4:	12610000 	addk	r19, r1, r0
20032ce8:	f8b30010 	swi	r5, r19, 16
20032cec:	f8d30014 	swi	r6, r19, 20
20032cf0:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20032cf4:	f8130004 	swi	r0, r19, 4
20032cf8:	b800005c 	bri	92		// 20032d54
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20032cfc:	e8730010 	lwi	r3, r19, 16
20032d00:	e8830000 	lwi	r4, r3, 0
20032d04:	e8730010 	lwi	r3, r19, 16
20032d08:	e8a3000c 	lwi	r5, r3, 12
20032d0c:	e8730004 	lwi	r3, r19, 4
20032d10:	64630402 	bslli	r3, r3, 2
20032d14:	10651800 	addk	r3, r5, r3
20032d18:	e8a30000 	lwi	r5, r3, 0
20032d1c:	e8730010 	lwi	r3, r19, 16
20032d20:	e8630010 	lwi	r3, r3, 16
20032d24:	e8630000 	lwi	r3, r3, 0
20032d28:	14632800 	rsubk	r3, r3, r5
20032d2c:	10641800 	addk	r3, r4, r3
20032d30:	30830001 	addik	r4, r3, 1
20032d34:	e8730018 	lwi	r3, r19, 24
20032d38:	16441803 	cmpu	r18, r4, r3
20032d3c:	bc52000c 	blti	r18, 12		// 20032d48
            return 0;
20032d40:	10600000 	addk	r3, r0, r0
20032d44:	b8000024 	bri	36		// 20032d68
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20032d48:	e8730004 	lwi	r3, r19, 4
20032d4c:	30630001 	addik	r3, r3, 1
20032d50:	f8730004 	swi	r3, r19, 4
20032d54:	e8930004 	lwi	r4, r19, 4
20032d58:	e8730014 	lwi	r3, r19, 20
20032d5c:	16432003 	cmpu	r18, r3, r4
20032d60:	bc52ff9c 	blti	r18, -100		// 20032cfc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20032d64:	30600001 	addik	r3, r0, 1
}
20032d68:	10330000 	addk	r1, r19, r0
20032d6c:	ea610008 	lwi	r19, r1, 8
20032d70:	3021000c 	addik	r1, r1, 12
20032d74:	b60f0008 	rtsd	r15, 8
20032d78:	80000000 	or	r0, r0, r0

20032d7c <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20032d7c:	3021ffec 	addik	r1, r1, -20
20032d80:	fa610010 	swi	r19, r1, 16
20032d84:	12610000 	addk	r19, r1, r0
20032d88:	f8b30018 	swi	r5, r19, 24
20032d8c:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20032d90:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20032d94:	f8130004 	swi	r0, r19, 4
20032d98:	b8000054 	bri	84		// 20032dec
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20032d9c:	e8730018 	lwi	r3, r19, 24
20032da0:	e8630010 	lwi	r3, r3, 16
20032da4:	e8830000 	lwi	r4, r3, 0
20032da8:	e8730018 	lwi	r3, r19, 24
20032dac:	e8a3000c 	lwi	r5, r3, 12
20032db0:	e8730004 	lwi	r3, r19, 4
20032db4:	64630402 	bslli	r3, r3, 2
20032db8:	10651800 	addk	r3, r5, r3
20032dbc:	e8630000 	lwi	r3, r3, 0
20032dc0:	14632000 	rsubk	r3, r3, r4
20032dc4:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20032dc8:	e8930008 	lwi	r4, r19, 8
20032dcc:	e873000c 	lwi	r3, r19, 12
20032dd0:	16441803 	cmpu	r18, r4, r3
20032dd4:	bcb20008 	bgei	r18, 8		// 20032ddc
20032dd8:	10640000 	addk	r3, r4, r0
20032ddc:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20032de0:	e8730004 	lwi	r3, r19, 4
20032de4:	30630001 	addik	r3, r3, 1
20032de8:	f8730004 	swi	r3, r19, 4
20032dec:	e8930004 	lwi	r4, r19, 4
20032df0:	e873001c 	lwi	r3, r19, 28
20032df4:	16432003 	cmpu	r18, r3, r4
20032df8:	bc52ffa4 	blti	r18, -92		// 20032d9c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20032dfc:	e8730018 	lwi	r3, r19, 24
20032e00:	e8830000 	lwi	r4, r3, 0
20032e04:	e8730008 	lwi	r3, r19, 8
20032e08:	14632000 	rsubk	r3, r3, r4
}
20032e0c:	10330000 	addk	r1, r19, r0
20032e10:	ea610010 	lwi	r19, r1, 16
20032e14:	30210014 	addik	r1, r1, 20
20032e18:	b60f0008 	rtsd	r15, 8
20032e1c:	80000000 	or	r0, r0, r0

20032e20 <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20032e20:	3021fff4 	addik	r1, r1, -12
20032e24:	fa610008 	swi	r19, r1, 8
20032e28:	12610000 	addk	r19, r1, r0
20032e2c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20032e30:	e8730010 	lwi	r3, r19, 16
20032e34:	e8630010 	lwi	r3, r3, 16
20032e38:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20032e3c:	f8130004 	swi	r0, r19, 4
20032e40:	b8000028 	bri	40		// 20032e68
        fifo->read_inds[i] = 0;
20032e44:	e8730010 	lwi	r3, r19, 16
20032e48:	e883000c 	lwi	r4, r3, 12
20032e4c:	e8730004 	lwi	r3, r19, 4
20032e50:	64630402 	bslli	r3, r3, 2
20032e54:	10641800 	addk	r3, r4, r3
20032e58:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20032e5c:	e8730004 	lwi	r3, r19, 4
20032e60:	30630001 	addik	r3, r3, 1
20032e64:	f8730004 	swi	r3, r19, 4
20032e68:	e8730010 	lwi	r3, r19, 16
20032e6c:	e8830008 	lwi	r4, r3, 8
20032e70:	e8730004 	lwi	r3, r19, 4
20032e74:	16441803 	cmpu	r18, r4, r3
20032e78:	bc52ffcc 	blti	r18, -52		// 20032e44
        fifo->read_inds[i] = 0;
    }
}
20032e7c:	10330000 	addk	r1, r19, r0
20032e80:	ea610008 	lwi	r19, r1, 8
20032e84:	3021000c 	addik	r1, r1, 12
20032e88:	b60f0008 	rtsd	r15, 8
20032e8c:	80000000 	or	r0, r0, r0

20032e90 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20032e90:	3021fff4 	addik	r1, r1, -12
20032e94:	fa610008 	swi	r19, r1, 8
20032e98:	12610000 	addk	r19, r1, r0
20032e9c:	f8b30010 	swi	r5, r19, 16
20032ea0:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20032ea4:	e8730010 	lwi	r3, r19, 16
20032ea8:	e8830004 	lwi	r4, r3, 4
20032eac:	e8730010 	lwi	r3, r19, 16
20032eb0:	e8a3000c 	lwi	r5, r3, 12
20032eb4:	e8730014 	lwi	r3, r19, 20
20032eb8:	64630402 	bslli	r3, r3, 2
20032ebc:	10651800 	addk	r3, r5, r3
20032ec0:	e8a30000 	lwi	r5, r3, 0
20032ec4:	e8730010 	lwi	r3, r19, 16
20032ec8:	e8630000 	lwi	r3, r3, 0
20032ecc:	3063ffff 	addik	r3, r3, -1
20032ed0:	84651800 	and	r3, r5, r3
20032ed4:	64630402 	bslli	r3, r3, 2
20032ed8:	10641800 	addk	r3, r4, r3
20032edc:	e8630000 	lwi	r3, r3, 0
20032ee0:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20032ee4:	e8730010 	lwi	r3, r19, 16
20032ee8:	e883000c 	lwi	r4, r3, 12
20032eec:	e8730014 	lwi	r3, r19, 20
20032ef0:	64630402 	bslli	r3, r3, 2
20032ef4:	10641800 	addk	r3, r4, r3
20032ef8:	e8830000 	lwi	r4, r3, 0
20032efc:	30840001 	addik	r4, r4, 1
20032f00:	f8830000 	swi	r4, r3, 0
    return value;
20032f04:	e8730004 	lwi	r3, r19, 4
}
20032f08:	10330000 	addk	r1, r19, r0
20032f0c:	ea610008 	lwi	r19, r1, 8
20032f10:	3021000c 	addik	r1, r1, 12
20032f14:	b60f0008 	rtsd	r15, 8
20032f18:	80000000 	or	r0, r0, r0

20032f1c <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20032f1c:	3021fff8 	addik	r1, r1, -8
20032f20:	fa610004 	swi	r19, r1, 4
20032f24:	12610000 	addk	r19, r1, r0
20032f28:	f8b3000c 	swi	r5, r19, 12
20032f2c:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20032f30:	e873000c 	lwi	r3, r19, 12
20032f34:	e8830004 	lwi	r4, r3, 4
20032f38:	e873000c 	lwi	r3, r19, 12
20032f3c:	e8630010 	lwi	r3, r3, 16
20032f40:	e8a30000 	lwi	r5, r3, 0
20032f44:	e873000c 	lwi	r3, r19, 12
20032f48:	e8630000 	lwi	r3, r3, 0
20032f4c:	3063ffff 	addik	r3, r3, -1
20032f50:	84651800 	and	r3, r5, r3
20032f54:	64630402 	bslli	r3, r3, 2
20032f58:	10641800 	addk	r3, r4, r3
20032f5c:	e8930010 	lwi	r4, r19, 16
20032f60:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20032f64:	e873000c 	lwi	r3, r19, 12
20032f68:	e8630010 	lwi	r3, r3, 16
20032f6c:	e8830000 	lwi	r4, r3, 0
20032f70:	30840001 	addik	r4, r4, 1
20032f74:	f8830000 	swi	r4, r3, 0
}
20032f78:	10330000 	addk	r1, r19, r0
20032f7c:	ea610004 	lwi	r19, r1, 4
20032f80:	30210008 	addik	r1, r1, 8
20032f84:	b60f0008 	rtsd	r15, 8
20032f88:	80000000 	or	r0, r0, r0

20032f8c <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20032f8c:	3021fff8 	addik	r1, r1, -8
20032f90:	fa610004 	swi	r19, r1, 4
20032f94:	12610000 	addk	r19, r1, r0
20032f98:	f8b3000c 	swi	r5, r19, 12
20032f9c:	f8d30010 	swi	r6, r19, 16
20032fa0:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20032fa4:	e873000c 	lwi	r3, r19, 12
20032fa8:	e8630010 	lwi	r3, r3, 16
20032fac:	e8830000 	lwi	r4, r3, 0
20032fb0:	e873000c 	lwi	r3, r19, 12
20032fb4:	e8a3000c 	lwi	r5, r3, 12
20032fb8:	e8730010 	lwi	r3, r19, 16
20032fbc:	64630402 	bslli	r3, r3, 2
20032fc0:	10651800 	addk	r3, r5, r3
20032fc4:	e8630000 	lwi	r3, r3, 0
20032fc8:	14a32000 	rsubk	r5, r3, r4
20032fcc:	30600001 	addik	r3, r0, 1
20032fd0:	e8930014 	lwi	r4, r19, 20
20032fd4:	16442803 	cmpu	r18, r4, r5
20032fd8:	bcb20008 	bgei	r18, 8		// 20032fe0
20032fdc:	10600000 	addk	r3, r0, r0
20032fe0:	a46300ff 	andi	r3, r3, 255
}
20032fe4:	10330000 	addk	r1, r19, r0
20032fe8:	ea610004 	lwi	r19, r1, 4
20032fec:	30210008 	addik	r1, r1, 8
20032ff0:	b60f0008 	rtsd	r15, 8
20032ff4:	80000000 	or	r0, r0, r0

20032ff8 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20032ff8:	3021fff8 	addik	r1, r1, -8
20032ffc:	fa610004 	swi	r19, r1, 4
20033000:	12610000 	addk	r19, r1, r0
20033004:	f8b3000c 	swi	r5, r19, 12
20033008:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003300c:	e873000c 	lwi	r3, r19, 12
20033010:	e8630010 	lwi	r3, r3, 16
20033014:	e8830000 	lwi	r4, r3, 0
20033018:	e873000c 	lwi	r3, r19, 12
2003301c:	e8a3000c 	lwi	r5, r3, 12
20033020:	e8730010 	lwi	r3, r19, 16
20033024:	64630402 	bslli	r3, r3, 2
20033028:	10651800 	addk	r3, r5, r3
2003302c:	e8630000 	lwi	r3, r3, 0
20033030:	14632000 	rsubk	r3, r3, r4
}
20033034:	10330000 	addk	r1, r19, r0
20033038:	ea610004 	lwi	r19, r1, 4
2003303c:	30210008 	addik	r1, r1, 8
20033040:	b60f0008 	rtsd	r15, 8
20033044:	80000000 	or	r0, r0, r0

20033048 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20033048:	3021fff4 	addik	r1, r1, -12
2003304c:	fa610008 	swi	r19, r1, 8
20033050:	12610000 	addk	r19, r1, r0
20033054:	f8b30010 	swi	r5, r19, 16
20033058:	f8d30014 	swi	r6, r19, 20
2003305c:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20033060:	f8130004 	swi	r0, r19, 4
20033064:	b800005c 	bri	92		// 200330c0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20033068:	e8730010 	lwi	r3, r19, 16
2003306c:	e8830000 	lwi	r4, r3, 0
20033070:	e8730010 	lwi	r3, r19, 16
20033074:	e8a3000c 	lwi	r5, r3, 12
20033078:	e8730004 	lwi	r3, r19, 4
2003307c:	64630402 	bslli	r3, r3, 2
20033080:	10651800 	addk	r3, r5, r3
20033084:	e8a30000 	lwi	r5, r3, 0
20033088:	e8730010 	lwi	r3, r19, 16
2003308c:	e8630010 	lwi	r3, r3, 16
20033090:	e8630000 	lwi	r3, r3, 0
20033094:	14632800 	rsubk	r3, r3, r5
20033098:	10641800 	addk	r3, r4, r3
2003309c:	30830001 	addik	r4, r3, 1
200330a0:	e8730018 	lwi	r3, r19, 24
200330a4:	16441803 	cmpu	r18, r4, r3
200330a8:	bc52000c 	blti	r18, 12		// 200330b4
            return 0;
200330ac:	10600000 	addk	r3, r0, r0
200330b0:	b8000024 	bri	36		// 200330d4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200330b4:	e8730004 	lwi	r3, r19, 4
200330b8:	30630001 	addik	r3, r3, 1
200330bc:	f8730004 	swi	r3, r19, 4
200330c0:	e8930004 	lwi	r4, r19, 4
200330c4:	e8730014 	lwi	r3, r19, 20
200330c8:	16432003 	cmpu	r18, r3, r4
200330cc:	bc52ff9c 	blti	r18, -100		// 20033068
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200330d0:	30600001 	addik	r3, r0, 1
}
200330d4:	10330000 	addk	r1, r19, r0
200330d8:	ea610008 	lwi	r19, r1, 8
200330dc:	3021000c 	addik	r1, r1, 12
200330e0:	b60f0008 	rtsd	r15, 8
200330e4:	80000000 	or	r0, r0, r0

200330e8 <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200330e8:	3021ffec 	addik	r1, r1, -20
200330ec:	fa610010 	swi	r19, r1, 16
200330f0:	12610000 	addk	r19, r1, r0
200330f4:	f8b30018 	swi	r5, r19, 24
200330f8:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200330fc:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20033100:	f8130004 	swi	r0, r19, 4
20033104:	b8000054 	bri	84		// 20033158
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20033108:	e8730018 	lwi	r3, r19, 24
2003310c:	e8630010 	lwi	r3, r3, 16
20033110:	e8830000 	lwi	r4, r3, 0
20033114:	e8730018 	lwi	r3, r19, 24
20033118:	e8a3000c 	lwi	r5, r3, 12
2003311c:	e8730004 	lwi	r3, r19, 4
20033120:	64630402 	bslli	r3, r3, 2
20033124:	10651800 	addk	r3, r5, r3
20033128:	e8630000 	lwi	r3, r3, 0
2003312c:	14632000 	rsubk	r3, r3, r4
20033130:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20033134:	e8930008 	lwi	r4, r19, 8
20033138:	e873000c 	lwi	r3, r19, 12
2003313c:	16441803 	cmpu	r18, r4, r3
20033140:	bcb20008 	bgei	r18, 8		// 20033148
20033144:	10640000 	addk	r3, r4, r0
20033148:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003314c:	e8730004 	lwi	r3, r19, 4
20033150:	30630001 	addik	r3, r3, 1
20033154:	f8730004 	swi	r3, r19, 4
20033158:	e8930004 	lwi	r4, r19, 4
2003315c:	e873001c 	lwi	r3, r19, 28
20033160:	16432003 	cmpu	r18, r3, r4
20033164:	bc52ffa4 	blti	r18, -92		// 20033108
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20033168:	e8730018 	lwi	r3, r19, 24
2003316c:	e8830000 	lwi	r4, r3, 0
20033170:	e8730008 	lwi	r3, r19, 8
20033174:	14632000 	rsubk	r3, r3, r4
}
20033178:	10330000 	addk	r1, r19, r0
2003317c:	ea610010 	lwi	r19, r1, 16
20033180:	30210014 	addik	r1, r1, 20
20033184:	b60f0008 	rtsd	r15, 8
20033188:	80000000 	or	r0, r0, r0

2003318c <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003318c:	3021fff4 	addik	r1, r1, -12
20033190:	fa610008 	swi	r19, r1, 8
20033194:	12610000 	addk	r19, r1, r0
20033198:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2003319c:	e8730010 	lwi	r3, r19, 16
200331a0:	e8630010 	lwi	r3, r3, 16
200331a4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200331a8:	f8130004 	swi	r0, r19, 4
200331ac:	b8000028 	bri	40		// 200331d4
        fifo->read_inds[i] = 0;
200331b0:	e8730010 	lwi	r3, r19, 16
200331b4:	e883000c 	lwi	r4, r3, 12
200331b8:	e8730004 	lwi	r3, r19, 4
200331bc:	64630402 	bslli	r3, r3, 2
200331c0:	10641800 	addk	r3, r4, r3
200331c4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200331c8:	e8730004 	lwi	r3, r19, 4
200331cc:	30630001 	addik	r3, r3, 1
200331d0:	f8730004 	swi	r3, r19, 4
200331d4:	e8730010 	lwi	r3, r19, 16
200331d8:	e8830008 	lwi	r4, r3, 8
200331dc:	e8730004 	lwi	r3, r19, 4
200331e0:	16441803 	cmpu	r18, r4, r3
200331e4:	bc52ffcc 	blti	r18, -52		// 200331b0
        fifo->read_inds[i] = 0;
    }
}
200331e8:	10330000 	addk	r1, r19, r0
200331ec:	ea610008 	lwi	r19, r1, 8
200331f0:	3021000c 	addik	r1, r1, 12
200331f4:	b60f0008 	rtsd	r15, 8
200331f8:	80000000 	or	r0, r0, r0

200331fc <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200331fc:	3021fff0 	addik	r1, r1, -16
20033200:	fa61000c 	swi	r19, r1, 12
20033204:	12610000 	addk	r19, r1, r0
20033208:	f8b30014 	swi	r5, r19, 20
2003320c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20033210:	e8730014 	lwi	r3, r19, 20
20033214:	e8830004 	lwi	r4, r3, 4
20033218:	e8730014 	lwi	r3, r19, 20
2003321c:	e8a3000c 	lwi	r5, r3, 12
20033220:	e8730018 	lwi	r3, r19, 24
20033224:	64630402 	bslli	r3, r3, 2
20033228:	10651800 	addk	r3, r5, r3
2003322c:	e8a30000 	lwi	r5, r3, 0
20033230:	e8730014 	lwi	r3, r19, 20
20033234:	e8630000 	lwi	r3, r3, 0
20033238:	3063ffff 	addik	r3, r3, -1
2003323c:	84651800 	and	r3, r5, r3
20033240:	64630403 	bslli	r3, r3, 3
20033244:	10641800 	addk	r3, r4, r3
20033248:	e8830000 	lwi	r4, r3, 0
2003324c:	e8a30004 	lwi	r5, r3, 4
20033250:	f8930004 	swi	r4, r19, 4
20033254:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20033258:	e8730014 	lwi	r3, r19, 20
2003325c:	e883000c 	lwi	r4, r3, 12
20033260:	e8730018 	lwi	r3, r19, 24
20033264:	64630402 	bslli	r3, r3, 2
20033268:	10641800 	addk	r3, r4, r3
2003326c:	e8830000 	lwi	r4, r3, 0
20033270:	30840001 	addik	r4, r4, 1
20033274:	f8830000 	swi	r4, r3, 0
    return value;
20033278:	e8930004 	lwi	r4, r19, 4
2003327c:	e8b30008 	lwi	r5, r19, 8
}
20033280:	10640000 	addk	r3, r4, r0
20033284:	10850000 	addk	r4, r5, r0
20033288:	10330000 	addk	r1, r19, r0
2003328c:	ea61000c 	lwi	r19, r1, 12
20033290:	30210010 	addik	r1, r1, 16
20033294:	b60f0008 	rtsd	r15, 8
20033298:	80000000 	or	r0, r0, r0

2003329c <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003329c:	3021fff8 	addik	r1, r1, -8
200332a0:	fa610004 	swi	r19, r1, 4
200332a4:	12610000 	addk	r19, r1, r0
200332a8:	f8b3000c 	swi	r5, r19, 12
200332ac:	f8d30010 	swi	r6, r19, 16
200332b0:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200332b4:	e873000c 	lwi	r3, r19, 12
200332b8:	e8830004 	lwi	r4, r3, 4
200332bc:	e873000c 	lwi	r3, r19, 12
200332c0:	e8630010 	lwi	r3, r3, 16
200332c4:	e8a30000 	lwi	r5, r3, 0
200332c8:	e873000c 	lwi	r3, r19, 12
200332cc:	e8630000 	lwi	r3, r3, 0
200332d0:	3063ffff 	addik	r3, r3, -1
200332d4:	84651800 	and	r3, r5, r3
200332d8:	64630403 	bslli	r3, r3, 3
200332dc:	10641800 	addk	r3, r4, r3
200332e0:	e8930010 	lwi	r4, r19, 16
200332e4:	e8b30014 	lwi	r5, r19, 20
200332e8:	f8830000 	swi	r4, r3, 0
200332ec:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
200332f0:	e873000c 	lwi	r3, r19, 12
200332f4:	e8630010 	lwi	r3, r3, 16
200332f8:	e8830000 	lwi	r4, r3, 0
200332fc:	30840001 	addik	r4, r4, 1
20033300:	f8830000 	swi	r4, r3, 0
}
20033304:	10330000 	addk	r1, r19, r0
20033308:	ea610004 	lwi	r19, r1, 4
2003330c:	30210008 	addik	r1, r1, 8
20033310:	b60f0008 	rtsd	r15, 8
20033314:	80000000 	or	r0, r0, r0

20033318 <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20033318:	3021fff8 	addik	r1, r1, -8
2003331c:	fa610004 	swi	r19, r1, 4
20033320:	12610000 	addk	r19, r1, r0
20033324:	f8b3000c 	swi	r5, r19, 12
20033328:	f8d30010 	swi	r6, r19, 16
2003332c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20033330:	e873000c 	lwi	r3, r19, 12
20033334:	e8630010 	lwi	r3, r3, 16
20033338:	e8830000 	lwi	r4, r3, 0
2003333c:	e873000c 	lwi	r3, r19, 12
20033340:	e8a3000c 	lwi	r5, r3, 12
20033344:	e8730010 	lwi	r3, r19, 16
20033348:	64630402 	bslli	r3, r3, 2
2003334c:	10651800 	addk	r3, r5, r3
20033350:	e8630000 	lwi	r3, r3, 0
20033354:	14a32000 	rsubk	r5, r3, r4
20033358:	30600001 	addik	r3, r0, 1
2003335c:	e8930014 	lwi	r4, r19, 20
20033360:	16442803 	cmpu	r18, r4, r5
20033364:	bcb20008 	bgei	r18, 8		// 2003336c
20033368:	10600000 	addk	r3, r0, r0
2003336c:	a46300ff 	andi	r3, r3, 255
}
20033370:	10330000 	addk	r1, r19, r0
20033374:	ea610004 	lwi	r19, r1, 4
20033378:	30210008 	addik	r1, r1, 8
2003337c:	b60f0008 	rtsd	r15, 8
20033380:	80000000 	or	r0, r0, r0

20033384 <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20033384:	3021fff8 	addik	r1, r1, -8
20033388:	fa610004 	swi	r19, r1, 4
2003338c:	12610000 	addk	r19, r1, r0
20033390:	f8b3000c 	swi	r5, r19, 12
20033394:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20033398:	e873000c 	lwi	r3, r19, 12
2003339c:	e8630010 	lwi	r3, r3, 16
200333a0:	e8830000 	lwi	r4, r3, 0
200333a4:	e873000c 	lwi	r3, r19, 12
200333a8:	e8a3000c 	lwi	r5, r3, 12
200333ac:	e8730010 	lwi	r3, r19, 16
200333b0:	64630402 	bslli	r3, r3, 2
200333b4:	10651800 	addk	r3, r5, r3
200333b8:	e8630000 	lwi	r3, r3, 0
200333bc:	14632000 	rsubk	r3, r3, r4
}
200333c0:	10330000 	addk	r1, r19, r0
200333c4:	ea610004 	lwi	r19, r1, 4
200333c8:	30210008 	addik	r1, r1, 8
200333cc:	b60f0008 	rtsd	r15, 8
200333d0:	80000000 	or	r0, r0, r0

200333d4 <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200333d4:	3021fff4 	addik	r1, r1, -12
200333d8:	fa610008 	swi	r19, r1, 8
200333dc:	12610000 	addk	r19, r1, r0
200333e0:	f8b30010 	swi	r5, r19, 16
200333e4:	f8d30014 	swi	r6, r19, 20
200333e8:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200333ec:	f8130004 	swi	r0, r19, 4
200333f0:	b800005c 	bri	92		// 2003344c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200333f4:	e8730010 	lwi	r3, r19, 16
200333f8:	e8830000 	lwi	r4, r3, 0
200333fc:	e8730010 	lwi	r3, r19, 16
20033400:	e8a3000c 	lwi	r5, r3, 12
20033404:	e8730004 	lwi	r3, r19, 4
20033408:	64630402 	bslli	r3, r3, 2
2003340c:	10651800 	addk	r3, r5, r3
20033410:	e8a30000 	lwi	r5, r3, 0
20033414:	e8730010 	lwi	r3, r19, 16
20033418:	e8630010 	lwi	r3, r3, 16
2003341c:	e8630000 	lwi	r3, r3, 0
20033420:	14632800 	rsubk	r3, r3, r5
20033424:	10641800 	addk	r3, r4, r3
20033428:	30830001 	addik	r4, r3, 1
2003342c:	e8730018 	lwi	r3, r19, 24
20033430:	16441803 	cmpu	r18, r4, r3
20033434:	bc52000c 	blti	r18, 12		// 20033440
            return 0;
20033438:	10600000 	addk	r3, r0, r0
2003343c:	b8000024 	bri	36		// 20033460
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20033440:	e8730004 	lwi	r3, r19, 4
20033444:	30630001 	addik	r3, r3, 1
20033448:	f8730004 	swi	r3, r19, 4
2003344c:	e8930004 	lwi	r4, r19, 4
20033450:	e8730014 	lwi	r3, r19, 20
20033454:	16432003 	cmpu	r18, r3, r4
20033458:	bc52ff9c 	blti	r18, -100		// 200333f4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003345c:	30600001 	addik	r3, r0, 1
}
20033460:	10330000 	addk	r1, r19, r0
20033464:	ea610008 	lwi	r19, r1, 8
20033468:	3021000c 	addik	r1, r1, 12
2003346c:	b60f0008 	rtsd	r15, 8
20033470:	80000000 	or	r0, r0, r0

20033474 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20033474:	3021ffec 	addik	r1, r1, -20
20033478:	fa610010 	swi	r19, r1, 16
2003347c:	12610000 	addk	r19, r1, r0
20033480:	f8b30018 	swi	r5, r19, 24
20033484:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20033488:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003348c:	f8130004 	swi	r0, r19, 4
20033490:	b8000054 	bri	84		// 200334e4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20033494:	e8730018 	lwi	r3, r19, 24
20033498:	e8630010 	lwi	r3, r3, 16
2003349c:	e8830000 	lwi	r4, r3, 0
200334a0:	e8730018 	lwi	r3, r19, 24
200334a4:	e8a3000c 	lwi	r5, r3, 12
200334a8:	e8730004 	lwi	r3, r19, 4
200334ac:	64630402 	bslli	r3, r3, 2
200334b0:	10651800 	addk	r3, r5, r3
200334b4:	e8630000 	lwi	r3, r3, 0
200334b8:	14632000 	rsubk	r3, r3, r4
200334bc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200334c0:	e8930008 	lwi	r4, r19, 8
200334c4:	e873000c 	lwi	r3, r19, 12
200334c8:	16441803 	cmpu	r18, r4, r3
200334cc:	bcb20008 	bgei	r18, 8		// 200334d4
200334d0:	10640000 	addk	r3, r4, r0
200334d4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200334d8:	e8730004 	lwi	r3, r19, 4
200334dc:	30630001 	addik	r3, r3, 1
200334e0:	f8730004 	swi	r3, r19, 4
200334e4:	e8930004 	lwi	r4, r19, 4
200334e8:	e873001c 	lwi	r3, r19, 28
200334ec:	16432003 	cmpu	r18, r3, r4
200334f0:	bc52ffa4 	blti	r18, -92		// 20033494
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200334f4:	e8730018 	lwi	r3, r19, 24
200334f8:	e8830000 	lwi	r4, r3, 0
200334fc:	e8730008 	lwi	r3, r19, 8
20033500:	14632000 	rsubk	r3, r3, r4
}
20033504:	10330000 	addk	r1, r19, r0
20033508:	ea610010 	lwi	r19, r1, 16
2003350c:	30210014 	addik	r1, r1, 20
20033510:	b60f0008 	rtsd	r15, 8
20033514:	80000000 	or	r0, r0, r0

20033518 <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20033518:	3021fff4 	addik	r1, r1, -12
2003351c:	fa610008 	swi	r19, r1, 8
20033520:	12610000 	addk	r19, r1, r0
20033524:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20033528:	e8730010 	lwi	r3, r19, 16
2003352c:	e8630010 	lwi	r3, r3, 16
20033530:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20033534:	f8130004 	swi	r0, r19, 4
20033538:	b8000028 	bri	40		// 20033560
        fifo->read_inds[i] = 0;
2003353c:	e8730010 	lwi	r3, r19, 16
20033540:	e883000c 	lwi	r4, r3, 12
20033544:	e8730004 	lwi	r3, r19, 4
20033548:	64630402 	bslli	r3, r3, 2
2003354c:	10641800 	addk	r3, r4, r3
20033550:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20033554:	e8730004 	lwi	r3, r19, 4
20033558:	30630001 	addik	r3, r3, 1
2003355c:	f8730004 	swi	r3, r19, 4
20033560:	e8730010 	lwi	r3, r19, 16
20033564:	e8830008 	lwi	r4, r3, 8
20033568:	e8730004 	lwi	r3, r19, 4
2003356c:	16441803 	cmpu	r18, r4, r3
20033570:	bc52ffcc 	blti	r18, -52		// 2003353c
        fifo->read_inds[i] = 0;
    }
}
20033574:	10330000 	addk	r1, r19, r0
20033578:	ea610008 	lwi	r19, r1, 8
2003357c:	3021000c 	addik	r1, r1, 12
20033580:	b60f0008 	rtsd	r15, 8
20033584:	80000000 	or	r0, r0, r0

20033588 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20033588:	3021fff4 	addik	r1, r1, -12
2003358c:	fa610008 	swi	r19, r1, 8
20033590:	12610000 	addk	r19, r1, r0
20033594:	f8b30010 	swi	r5, r19, 16
20033598:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003359c:	e8730010 	lwi	r3, r19, 16
200335a0:	e8830004 	lwi	r4, r3, 4
200335a4:	e8730010 	lwi	r3, r19, 16
200335a8:	e8a3000c 	lwi	r5, r3, 12
200335ac:	e8730014 	lwi	r3, r19, 20
200335b0:	64630402 	bslli	r3, r3, 2
200335b4:	10651800 	addk	r3, r5, r3
200335b8:	e8a30000 	lwi	r5, r3, 0
200335bc:	e8730010 	lwi	r3, r19, 16
200335c0:	e8630000 	lwi	r3, r3, 0
200335c4:	3063ffff 	addik	r3, r3, -1
200335c8:	84651800 	and	r3, r5, r3
200335cc:	64630402 	bslli	r3, r3, 2
200335d0:	10641800 	addk	r3, r4, r3
200335d4:	e8630000 	lwi	r3, r3, 0
200335d8:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200335dc:	e8730010 	lwi	r3, r19, 16
200335e0:	e883000c 	lwi	r4, r3, 12
200335e4:	e8730014 	lwi	r3, r19, 20
200335e8:	64630402 	bslli	r3, r3, 2
200335ec:	10641800 	addk	r3, r4, r3
200335f0:	e8830000 	lwi	r4, r3, 0
200335f4:	30840001 	addik	r4, r4, 1
200335f8:	f8830000 	swi	r4, r3, 0
    return value;
200335fc:	e8730004 	lwi	r3, r19, 4
}
20033600:	10330000 	addk	r1, r19, r0
20033604:	ea610008 	lwi	r19, r1, 8
20033608:	3021000c 	addik	r1, r1, 12
2003360c:	b60f0008 	rtsd	r15, 8
20033610:	80000000 	or	r0, r0, r0

20033614 <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20033614:	3021fff8 	addik	r1, r1, -8
20033618:	fa610004 	swi	r19, r1, 4
2003361c:	12610000 	addk	r19, r1, r0
20033620:	f8b3000c 	swi	r5, r19, 12
20033624:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20033628:	e873000c 	lwi	r3, r19, 12
2003362c:	e8830004 	lwi	r4, r3, 4
20033630:	e873000c 	lwi	r3, r19, 12
20033634:	e8630010 	lwi	r3, r3, 16
20033638:	e8a30000 	lwi	r5, r3, 0
2003363c:	e873000c 	lwi	r3, r19, 12
20033640:	e8630000 	lwi	r3, r3, 0
20033644:	3063ffff 	addik	r3, r3, -1
20033648:	84651800 	and	r3, r5, r3
2003364c:	64630402 	bslli	r3, r3, 2
20033650:	10641800 	addk	r3, r4, r3
20033654:	e8930010 	lwi	r4, r19, 16
20033658:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2003365c:	e873000c 	lwi	r3, r19, 12
20033660:	e8630010 	lwi	r3, r3, 16
20033664:	e8830000 	lwi	r4, r3, 0
20033668:	30840001 	addik	r4, r4, 1
2003366c:	f8830000 	swi	r4, r3, 0
}
20033670:	10330000 	addk	r1, r19, r0
20033674:	ea610004 	lwi	r19, r1, 4
20033678:	30210008 	addik	r1, r1, 8
2003367c:	b60f0008 	rtsd	r15, 8
20033680:	80000000 	or	r0, r0, r0

20033684 <read_PQF_AC>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_PQF_AC() {
20033684:	3021ffe0 	addik	r1, r1, -32
20033688:	f9e10000 	swi	r15, r1, 0
2003368c:	fa61001c 	swi	r19, r1, 28
20033690:	12610000 	addk	r19, r1, r0
		index_PQF_AC = decoder_texture_IAP_PQF_AC->read_inds[0];
20033694:	b0002004 	imm	8196
20033698:	e8608384 	lwi	r3, r0, -31868	// 20048384 <decoder_texture_IAP_PQF_AC>
2003369c:	e863000c 	lwi	r3, r3, 12
200336a0:	e8630000 	lwi	r3, r3, 0
200336a4:	b0002006 	imm	8198
200336a8:	f8602114 	swi	r3, r0, 8468	// 20062114 <index_PQF_AC>
		numTokens_PQF_AC = index_PQF_AC + fifo_i16_get_num_tokens(decoder_texture_IAP_PQF_AC, 0);
200336ac:	b0002004 	imm	8196
200336b0:	e8608384 	lwi	r3, r0, -31868	// 20048384 <decoder_texture_IAP_PQF_AC>
200336b4:	10a30000 	addk	r5, r3, r0
200336b8:	10c00000 	addk	r6, r0, r0
200336bc:	b9f4e48c 	brlid	r15, -7028	// 20031b48 <fifo_i16_get_num_tokens>
200336c0:	80000000 	or	r0, r0, r0
200336c4:	10830000 	addk	r4, r3, r0
200336c8:	b0002006 	imm	8198
200336cc:	e8602114 	lwi	r3, r0, 8468	// 20062114 <index_PQF_AC>
200336d0:	10641800 	addk	r3, r4, r3
200336d4:	b0002006 	imm	8198
200336d8:	f8602118 	swi	r3, r0, 8472	// 20062118 <numTokens_PQF_AC>
	}
200336dc:	e9e10000 	lwi	r15, r1, 0
200336e0:	10330000 	addk	r1, r19, r0
200336e4:	ea61001c 	lwi	r19, r1, 28
200336e8:	30210020 	addik	r1, r1, 32
200336ec:	b60f0008 	rtsd	r15, 8
200336f0:	80000000 	or	r0, r0, r0

200336f4 <read_end_PQF_AC>:
	
	static void read_end_PQF_AC() {
200336f4:	3021fff8 	addik	r1, r1, -8
200336f8:	fa610004 	swi	r19, r1, 4
200336fc:	12610000 	addk	r19, r1, r0
		decoder_texture_IAP_PQF_AC->read_inds[0] = index_PQF_AC;
20033700:	b0002004 	imm	8196
20033704:	e8608384 	lwi	r3, r0, -31868	// 20048384 <decoder_texture_IAP_PQF_AC>
20033708:	e863000c 	lwi	r3, r3, 12
2003370c:	b0002006 	imm	8198
20033710:	e8802114 	lwi	r4, r0, 8468	// 20062114 <index_PQF_AC>
20033714:	f8830000 	swi	r4, r3, 0
	}
20033718:	10330000 	addk	r1, r19, r0
2003371c:	ea610004 	lwi	r19, r1, 4
20033720:	30210008 	addik	r1, r1, 8
20033724:	b60f0008 	rtsd	r15, 8
20033728:	80000000 	or	r0, r0, r0

2003372c <read_PTR>:
	static void read_PTR() {
2003372c:	3021ffe0 	addik	r1, r1, -32
20033730:	f9e10000 	swi	r15, r1, 0
20033734:	fa61001c 	swi	r19, r1, 28
20033738:	12610000 	addk	r19, r1, r0
		index_PTR = decoder_texture_IAP_PTR->read_inds[0];
2003373c:	b0002004 	imm	8196
20033740:	e86083bc 	lwi	r3, r0, -31812	// 200483bc <decoder_texture_IAP_PTR>
20033744:	e863000c 	lwi	r3, r3, 12
20033748:	e8630000 	lwi	r3, r3, 0
2003374c:	b0002006 	imm	8198
20033750:	f860211c 	swi	r3, r0, 8476	// 2006211c <index_PTR>
		numTokens_PTR = index_PTR + fifo_i16_get_num_tokens(decoder_texture_IAP_PTR, 0);
20033754:	b0002004 	imm	8196
20033758:	e86083bc 	lwi	r3, r0, -31812	// 200483bc <decoder_texture_IAP_PTR>
2003375c:	10a30000 	addk	r5, r3, r0
20033760:	10c00000 	addk	r6, r0, r0
20033764:	b9f4e3e4 	brlid	r15, -7196	// 20031b48 <fifo_i16_get_num_tokens>
20033768:	80000000 	or	r0, r0, r0
2003376c:	10830000 	addk	r4, r3, r0
20033770:	b0002006 	imm	8198
20033774:	e860211c 	lwi	r3, r0, 8476	// 2006211c <index_PTR>
20033778:	10641800 	addk	r3, r4, r3
2003377c:	b0002006 	imm	8198
20033780:	f8602120 	swi	r3, r0, 8480	// 20062120 <numTokens_PTR>
	}
20033784:	e9e10000 	lwi	r15, r1, 0
20033788:	10330000 	addk	r1, r19, r0
2003378c:	ea61001c 	lwi	r19, r1, 28
20033790:	30210020 	addik	r1, r1, 32
20033794:	b60f0008 	rtsd	r15, 8
20033798:	80000000 	or	r0, r0, r0

2003379c <read_end_PTR>:
	
	static void read_end_PTR() {
2003379c:	3021fff8 	addik	r1, r1, -8
200337a0:	fa610004 	swi	r19, r1, 4
200337a4:	12610000 	addk	r19, r1, r0
		decoder_texture_IAP_PTR->read_inds[0] = index_PTR;
200337a8:	b0002004 	imm	8196
200337ac:	e86083bc 	lwi	r3, r0, -31812	// 200483bc <decoder_texture_IAP_PTR>
200337b0:	e863000c 	lwi	r3, r3, 12
200337b4:	b0002006 	imm	8198
200337b8:	e880211c 	lwi	r4, r0, 8476	// 2006211c <index_PTR>
200337bc:	f8830000 	swi	r4, r3, 0
	}
200337c0:	10330000 	addk	r1, r19, r0
200337c4:	ea610004 	lwi	r19, r1, 4
200337c8:	30210008 	addik	r1, r1, 8
200337cc:	b60f0008 	rtsd	r15, 8
200337d0:	80000000 	or	r0, r0, r0

200337d4 <read_AC_PRED_DIR>:
	static void read_AC_PRED_DIR() {
200337d4:	3021ffe0 	addik	r1, r1, -32
200337d8:	f9e10000 	swi	r15, r1, 0
200337dc:	fa61001c 	swi	r19, r1, 28
200337e0:	12610000 	addk	r19, r1, r0
		index_AC_PRED_DIR = decoder_texture_IAP_AC_PRED_DIR->read_inds[0];
200337e4:	b0002004 	imm	8196
200337e8:	e86083dc 	lwi	r3, r0, -31780	// 200483dc <decoder_texture_IAP_AC_PRED_DIR>
200337ec:	e863000c 	lwi	r3, r3, 12
200337f0:	e8630000 	lwi	r3, r3, 0
200337f4:	b0002006 	imm	8198
200337f8:	f8602124 	swi	r3, r0, 8484	// 20062124 <index_AC_PRED_DIR>
		numTokens_AC_PRED_DIR = index_AC_PRED_DIR + fifo_i8_get_num_tokens(decoder_texture_IAP_AC_PRED_DIR, 0);
200337fc:	b0002004 	imm	8196
20033800:	e86083dc 	lwi	r3, r0, -31780	// 200483dc <decoder_texture_IAP_AC_PRED_DIR>
20033804:	10a30000 	addk	r5, r3, r0
20033808:	10c00000 	addk	r6, r0, r0
2003380c:	b9f4dfd0 	brlid	r15, -8240	// 200317dc <fifo_i8_get_num_tokens>
20033810:	80000000 	or	r0, r0, r0
20033814:	10830000 	addk	r4, r3, r0
20033818:	b0002006 	imm	8198
2003381c:	e8602124 	lwi	r3, r0, 8484	// 20062124 <index_AC_PRED_DIR>
20033820:	10641800 	addk	r3, r4, r3
20033824:	b0002006 	imm	8198
20033828:	f8602128 	swi	r3, r0, 8488	// 20062128 <numTokens_AC_PRED_DIR>
	}
2003382c:	e9e10000 	lwi	r15, r1, 0
20033830:	10330000 	addk	r1, r19, r0
20033834:	ea61001c 	lwi	r19, r1, 28
20033838:	30210020 	addik	r1, r1, 32
2003383c:	b60f0008 	rtsd	r15, 8
20033840:	80000000 	or	r0, r0, r0

20033844 <read_end_AC_PRED_DIR>:
	
	static void read_end_AC_PRED_DIR() {
20033844:	3021fff8 	addik	r1, r1, -8
20033848:	fa610004 	swi	r19, r1, 4
2003384c:	12610000 	addk	r19, r1, r0
		decoder_texture_IAP_AC_PRED_DIR->read_inds[0] = index_AC_PRED_DIR;
20033850:	b0002004 	imm	8196
20033854:	e86083dc 	lwi	r3, r0, -31780	// 200483dc <decoder_texture_IAP_AC_PRED_DIR>
20033858:	e863000c 	lwi	r3, r3, 12
2003385c:	b0002006 	imm	8198
20033860:	e8802124 	lwi	r4, r0, 8484	// 20062124 <index_AC_PRED_DIR>
20033864:	f8830000 	swi	r4, r3, 0
	}
20033868:	10330000 	addk	r1, r19, r0
2003386c:	ea610004 	lwi	r19, r1, 4
20033870:	30210008 	addik	r1, r1, 8
20033874:	b60f0008 	rtsd	r15, 8
20033878:	80000000 	or	r0, r0, r0

2003387c <write_QF_AC>:

	static void write_QF_AC() {
2003387c:	3021ffe0 	addik	r1, r1, -32
20033880:	f9e10000 	swi	r15, r1, 0
20033884:	fa61001c 	swi	r19, r1, 28
20033888:	12610000 	addk	r19, r1, r0
		index_QF_AC = (*decoder_texture_IAP_QF_AC->write_ind);
2003388c:	b0002004 	imm	8196
20033890:	e8608388 	lwi	r3, r0, -31864	// 20048388 <decoder_texture_IAP_QF_AC>
20033894:	e8630010 	lwi	r3, r3, 16
20033898:	e8630000 	lwi	r3, r3, 0
2003389c:	b0002006 	imm	8198
200338a0:	f860212c 	swi	r3, r0, 8492	// 2006212c <index_QF_AC>
		numFree_QF_AC = index_QF_AC + fifo_i16_get_room(decoder_texture_IAP_QF_AC, NUM_READERS_QF_AC);
200338a4:	b0002004 	imm	8196
200338a8:	e8608388 	lwi	r3, r0, -31864	// 20048388 <decoder_texture_IAP_QF_AC>
200338ac:	10a30000 	addk	r5, r3, r0
200338b0:	30c00001 	addik	r6, r0, 1
200338b4:	b9f4e384 	brlid	r15, -7292	// 20031c38 <fifo_i16_get_room>
200338b8:	80000000 	or	r0, r0, r0
200338bc:	10830000 	addk	r4, r3, r0
200338c0:	b0002006 	imm	8198
200338c4:	e860212c 	lwi	r3, r0, 8492	// 2006212c <index_QF_AC>
200338c8:	10641800 	addk	r3, r4, r3
200338cc:	b0002006 	imm	8198
200338d0:	f8602130 	swi	r3, r0, 8496	// 20062130 <numFree_QF_AC>
	}
200338d4:	e9e10000 	lwi	r15, r1, 0
200338d8:	10330000 	addk	r1, r19, r0
200338dc:	ea61001c 	lwi	r19, r1, 28
200338e0:	30210020 	addik	r1, r1, 32
200338e4:	b60f0008 	rtsd	r15, 8
200338e8:	80000000 	or	r0, r0, r0

200338ec <write_end_QF_AC>:
	
	static void write_end_QF_AC() {
200338ec:	3021fff8 	addik	r1, r1, -8
200338f0:	fa610004 	swi	r19, r1, 4
200338f4:	12610000 	addk	r19, r1, r0
		(*decoder_texture_IAP_QF_AC->write_ind) = index_QF_AC;
200338f8:	b0002004 	imm	8196
200338fc:	e8608388 	lwi	r3, r0, -31864	// 20048388 <decoder_texture_IAP_QF_AC>
20033900:	e8630010 	lwi	r3, r3, 16
20033904:	b0002006 	imm	8198
20033908:	e880212c 	lwi	r4, r0, 8492	// 2006212c <index_QF_AC>
2003390c:	f8830000 	swi	r4, r3, 0
	}
20033910:	10330000 	addk	r1, r19, r0
20033914:	ea610004 	lwi	r19, r1, 4
20033918:	30210008 	addik	r1, r1, 8
2003391c:	b60f0008 	rtsd	r15, 8
20033920:	80000000 	or	r0, r0, r0

20033924 <isSchedulable_newvop>:
	// Functions/procedures


	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_newvop() {
20033924:	3021fff0 	addik	r1, r1, -16
20033928:	fa61000c 	swi	r19, r1, 12
2003392c:	12610000 	addk	r19, r1, r0
		i32 result;
		i8 s;
	
		s = tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR];
20033930:	b0002004 	imm	8196
20033934:	e86083dc 	lwi	r3, r0, -31780	// 200483dc <decoder_texture_IAP_AC_PRED_DIR>
20033938:	e8830004 	lwi	r4, r3, 4
2003393c:	b0002006 	imm	8198
20033940:	e8602124 	lwi	r3, r0, 8484	// 20062124 <index_AC_PRED_DIR>
20033944:	a46301ff 	andi	r3, r3, 511
20033948:	10641800 	addk	r3, r4, r3
2003394c:	e0630000 	lbui	r3, r3, 0
20033950:	f0730004 	sbi	r3, r19, 4
		result = s == -2;
20033954:	e0730004 	lbui	r3, r19, 4
20033958:	90830060 	sext8	r4, r3
2003395c:	3060fffe 	addik	r3, r0, -2
20033960:	88641c00 	pcmpeq	r3, r4, r3
20033964:	a46300ff 	andi	r3, r3, 255
20033968:	f8730008 	swi	r3, r19, 8
		return result;
2003396c:	e8730008 	lwi	r3, r19, 8
	}
20033970:	10330000 	addk	r1, r19, r0
20033974:	ea61000c 	lwi	r19, r1, 12
20033978:	30210010 	addik	r1, r1, 16
2003397c:	b60f0008 	rtsd	r15, 8
20033980:	80000000 	or	r0, r0, r0

20033984 <newvop>:
	
	static void newvop() {
20033984:	3021ffd8 	addik	r1, r1, -40
20033988:	f9e10000 	swi	r15, r1, 0
2003398c:	fa610024 	swi	r19, r1, 36
20033990:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_AC_PRED_DIR = index_AC_PRED_DIR % SIZE_AC_PRED_DIR;
20033994:	b0002006 	imm	8198
20033998:	e8602124 	lwi	r3, r0, 8484	// 20062124 <index_AC_PRED_DIR>
2003399c:	a46301ff 	andi	r3, r3, 511
200339a0:	f873001c 	swi	r3, r19, 28
	
		i8 s;
	
		s = tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR];
200339a4:	b0002004 	imm	8196
200339a8:	e86083dc 	lwi	r3, r0, -31780	// 200483dc <decoder_texture_IAP_AC_PRED_DIR>
200339ac:	e8830004 	lwi	r4, r3, 4
200339b0:	b0002006 	imm	8198
200339b4:	e8602124 	lwi	r3, r0, 8484	// 20062124 <index_AC_PRED_DIR>
200339b8:	a46301ff 	andi	r3, r3, 511
200339bc:	10641800 	addk	r3, r4, r3
200339c0:	e0630000 	lbui	r3, r3, 0
200339c4:	f0730020 	sbi	r3, r19, 32
		comp = 0;
200339c8:	b0002006 	imm	8198
200339cc:	f0002f38 	sbi	r0, r0, 12088	// 20062f38 <comp>
		ptr = 8;
200339d0:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200339d4:	b0002006 	imm	8198
200339d8:	f4602134 	shi	r3, r0, 8500	// 20062134 <ptr>
	
		// Update ports indexes
		index_AC_PRED_DIR += 1;
200339dc:	b0002006 	imm	8198
200339e0:	e8602124 	lwi	r3, r0, 8484	// 20062124 <index_AC_PRED_DIR>
200339e4:	30630001 	addik	r3, r3, 1
200339e8:	b0002006 	imm	8198
200339ec:	f8602124 	swi	r3, r0, 8484	// 20062124 <index_AC_PRED_DIR>
		
		read_end_AC_PRED_DIR();
200339f0:	b9f4fe54 	brlid	r15, -428	// 20033844 <read_end_AC_PRED_DIR>
200339f4:	80000000 	or	r0, r0, r0
	}
200339f8:	e9e10000 	lwi	r15, r1, 0
200339fc:	10330000 	addk	r1, r19, r0
20033a00:	ea610024 	lwi	r19, r1, 36
20033a04:	30210028 	addik	r1, r1, 40
20033a08:	b60f0008 	rtsd	r15, 8
20033a0c:	80000000 	or	r0, r0, r0

20033a10 <isSchedulable_skip>:
	static i32 isSchedulable_skip() {
20033a10:	3021fff0 	addik	r1, r1, -16
20033a14:	fa61000c 	swi	r19, r1, 12
20033a18:	12610000 	addk	r19, r1, r0
		i32 result;
		i8 s;
	
		s = tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR];
20033a1c:	b0002004 	imm	8196
20033a20:	e86083dc 	lwi	r3, r0, -31780	// 200483dc <decoder_texture_IAP_AC_PRED_DIR>
20033a24:	e8830004 	lwi	r4, r3, 4
20033a28:	b0002006 	imm	8198
20033a2c:	e8602124 	lwi	r3, r0, 8484	// 20062124 <index_AC_PRED_DIR>
20033a30:	a46301ff 	andi	r3, r3, 511
20033a34:	10641800 	addk	r3, r4, r3
20033a38:	e0630000 	lbui	r3, r3, 0
20033a3c:	f0730004 	sbi	r3, r19, 4
		result = s < 0;
20033a40:	e0730004 	lbui	r3, r19, 4
20033a44:	64630007 	bsrli	r3, r3, 7
20033a48:	a46300ff 	andi	r3, r3, 255
20033a4c:	f8730008 	swi	r3, r19, 8
		return result;
20033a50:	e8730008 	lwi	r3, r19, 8
	}
20033a54:	10330000 	addk	r1, r19, r0
20033a58:	ea61000c 	lwi	r19, r1, 12
20033a5c:	30210010 	addik	r1, r1, 16
20033a60:	b60f0008 	rtsd	r15, 8
20033a64:	80000000 	or	r0, r0, r0

20033a68 <skip>:
	
	static void skip() {
20033a68:	3021ffd8 	addik	r1, r1, -40
20033a6c:	f9e10000 	swi	r15, r1, 0
20033a70:	fa610024 	swi	r19, r1, 36
20033a74:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_AC_PRED_DIR = index_AC_PRED_DIR % SIZE_AC_PRED_DIR;
20033a78:	b0002006 	imm	8198
20033a7c:	e8602124 	lwi	r3, r0, 8484	// 20062124 <index_AC_PRED_DIR>
20033a80:	a46301ff 	andi	r3, r3, 511
20033a84:	f873001c 	swi	r3, r19, 28
	
		i8 s;
	
		s = tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR];
20033a88:	b0002004 	imm	8196
20033a8c:	e86083dc 	lwi	r3, r0, -31780	// 200483dc <decoder_texture_IAP_AC_PRED_DIR>
20033a90:	e8830004 	lwi	r4, r3, 4
20033a94:	b0002006 	imm	8198
20033a98:	e8602124 	lwi	r3, r0, 8484	// 20062124 <index_AC_PRED_DIR>
20033a9c:	a46301ff 	andi	r3, r3, 511
20033aa0:	10641800 	addk	r3, r4, r3
20033aa4:	e0630000 	lbui	r3, r3, 0
20033aa8:	f0730020 	sbi	r3, r19, 32
	
		// Update ports indexes
		index_AC_PRED_DIR += 1;
20033aac:	b0002006 	imm	8198
20033ab0:	e8602124 	lwi	r3, r0, 8484	// 20062124 <index_AC_PRED_DIR>
20033ab4:	30630001 	addik	r3, r3, 1
20033ab8:	b0002006 	imm	8198
20033abc:	f8602124 	swi	r3, r0, 8484	// 20062124 <index_AC_PRED_DIR>
		
		read_end_AC_PRED_DIR();
20033ac0:	b9f4fd84 	brlid	r15, -636	// 20033844 <read_end_AC_PRED_DIR>
20033ac4:	80000000 	or	r0, r0, r0
	}
20033ac8:	e9e10000 	lwi	r15, r1, 0
20033acc:	10330000 	addk	r1, r19, r0
20033ad0:	ea610024 	lwi	r19, r1, 36
20033ad4:	30210028 	addik	r1, r1, 40
20033ad8:	b60f0008 	rtsd	r15, 8
20033adc:	80000000 	or	r0, r0, r0

20033ae0 <isSchedulable_start>:
	static i32 isSchedulable_start() {
20033ae0:	3021fff4 	addik	r1, r1, -12
20033ae4:	fa610008 	swi	r19, r1, 8
20033ae8:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
20033aec:	30600001 	addik	r3, r0, 1
20033af0:	f8730004 	swi	r3, r19, 4
		return result;
20033af4:	e8730004 	lwi	r3, r19, 4
	}
20033af8:	10330000 	addk	r1, r19, r0
20033afc:	ea610008 	lwi	r19, r1, 8
20033b00:	3021000c 	addik	r1, r1, 12
20033b04:	b60f0008 	rtsd	r15, 8
20033b08:	80000000 	or	r0, r0, r0

20033b0c <start>:
	
	static void start() {
20033b0c:	3021ffd4 	addik	r1, r1, -44
20033b10:	f9e10000 	swi	r15, r1, 0
20033b14:	fa610028 	swi	r19, r1, 40
20033b18:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_AC_PRED_DIR = index_AC_PRED_DIR % SIZE_AC_PRED_DIR;
20033b1c:	b0002006 	imm	8198
20033b20:	e8602124 	lwi	r3, r0, 8484	// 20062124 <index_AC_PRED_DIR>
20033b24:	a46301ff 	andi	r3, r3, 511
20033b28:	f873001c 	swi	r3, r19, 28
		i32 index_aligned_PTR = index_PTR % SIZE_PTR;
20033b2c:	b0002006 	imm	8198
20033b30:	e860211c 	lwi	r3, r0, 8476	// 2006211c <index_PTR>
20033b34:	a46301ff 	andi	r3, r3, 511
20033b38:	f8730020 	swi	r3, r19, 32
	
		i8 s;
		i16 p;
	
		s = tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR];
20033b3c:	b0002004 	imm	8196
20033b40:	e86083dc 	lwi	r3, r0, -31780	// 200483dc <decoder_texture_IAP_AC_PRED_DIR>
20033b44:	e8830004 	lwi	r4, r3, 4
20033b48:	b0002006 	imm	8198
20033b4c:	e8602124 	lwi	r3, r0, 8484	// 20062124 <index_AC_PRED_DIR>
20033b50:	a46301ff 	andi	r3, r3, 511
20033b54:	10641800 	addk	r3, r4, r3
20033b58:	e0630000 	lbui	r3, r3, 0
20033b5c:	f0730024 	sbi	r3, r19, 36
		p = tokens_PTR[(index_PTR + (0)) % SIZE_PTR];
20033b60:	b0002004 	imm	8196
20033b64:	e86083bc 	lwi	r3, r0, -31812	// 200483bc <decoder_texture_IAP_PTR>
20033b68:	e8830004 	lwi	r4, r3, 4
20033b6c:	b0002006 	imm	8198
20033b70:	e860211c 	lwi	r3, r0, 8476	// 2006211c <index_PTR>
20033b74:	a46301ff 	andi	r3, r3, 511
20033b78:	10631800 	addk	r3, r3, r3
20033b7c:	10641800 	addk	r3, r4, r3
20033b80:	e4630000 	lhui	r3, r3, 0
20033b84:	f4730026 	shi	r3, r19, 38
		pred_ptr = p;
20033b88:	e4730026 	lhui	r3, r19, 38
20033b8c:	b0002006 	imm	8198
20033b90:	f4602136 	shi	r3, r0, 8502	// 20062136 <pred_ptr>
		top = s == 2;
20033b94:	e0730024 	lbui	r3, r19, 36
20033b98:	90830060 	sext8	r4, r3
20033b9c:	30600002 	addik	r3, r0, 2
20033ba0:	88641c00 	pcmpeq	r3, r4, r3
20033ba4:	a46300ff 	andi	r3, r3, 255
20033ba8:	b0002006 	imm	8198
20033bac:	f8602f3c 	swi	r3, r0, 12092	// 20062f3c <top>
		acpred_flag = s != 0;
20033bb0:	e0730024 	lbui	r3, r19, 36
20033bb4:	90830060 	sext8	r4, r3
20033bb8:	10600000 	addk	r3, r0, r0
20033bbc:	8c641c00 	pcmpne	r3, r4, r3
20033bc0:	a46300ff 	andi	r3, r3, 255
20033bc4:	b0002006 	imm	8198
20033bc8:	f8602f40 	swi	r3, r0, 12096	// 20062f40 <acpred_flag>
	
		// Update ports indexes
		index_AC_PRED_DIR += 1;
20033bcc:	b0002006 	imm	8198
20033bd0:	e8602124 	lwi	r3, r0, 8484	// 20062124 <index_AC_PRED_DIR>
20033bd4:	30630001 	addik	r3, r3, 1
20033bd8:	b0002006 	imm	8198
20033bdc:	f8602124 	swi	r3, r0, 8484	// 20062124 <index_AC_PRED_DIR>
		index_PTR += 1;
20033be0:	b0002006 	imm	8198
20033be4:	e860211c 	lwi	r3, r0, 8476	// 2006211c <index_PTR>
20033be8:	30630001 	addik	r3, r3, 1
20033bec:	b0002006 	imm	8198
20033bf0:	f860211c 	swi	r3, r0, 8476	// 2006211c <index_PTR>
		
		read_end_AC_PRED_DIR();
20033bf4:	b9f4fc50 	brlid	r15, -944	// 20033844 <read_end_AC_PRED_DIR>
20033bf8:	80000000 	or	r0, r0, r0
		read_end_PTR();
20033bfc:	b9f4fba0 	brlid	r15, -1120	// 2003379c <read_end_PTR>
20033c00:	80000000 	or	r0, r0, r0
	}
20033c04:	e9e10000 	lwi	r15, r1, 0
20033c08:	10330000 	addk	r1, r19, r0
20033c0c:	ea610028 	lwi	r19, r1, 40
20033c10:	3021002c 	addik	r1, r1, 44
20033c14:	b60f0008 	rtsd	r15, 8
20033c18:	80000000 	or	r0, r0, r0

20033c1c <isSchedulable_advance>:
	static i32 isSchedulable_advance() {
20033c1c:	3021fff4 	addik	r1, r1, -12
20033c20:	fa610008 	swi	r19, r1, 8
20033c24:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
20033c28:	30600001 	addik	r3, r0, 1
20033c2c:	f8730004 	swi	r3, r19, 4
		return result;
20033c30:	e8730004 	lwi	r3, r19, 4
	}
20033c34:	10330000 	addk	r1, r19, r0
20033c38:	ea610008 	lwi	r19, r1, 8
20033c3c:	3021000c 	addik	r1, r1, 12
20033c40:	b60f0008 	rtsd	r15, 8
20033c44:	80000000 	or	r0, r0, r0

20033c48 <advance>:
	
	static void advance() {
20033c48:	3021fff0 	addik	r1, r1, -16
20033c4c:	fa61000c 	swi	r19, r1, 12
20033c50:	12610000 	addk	r19, r1, r0
	
		i8 local_comp;
		i16 local_ptr;
		i32 local_BUF_SIZE;
	
		local_comp = comp;
20033c54:	b0002006 	imm	8198
20033c58:	e0602f38 	lbui	r3, r0, 12088	// 20062f38 <comp>
20033c5c:	f0730004 	sbi	r3, r19, 4
		comp = local_comp + 1;
20033c60:	e0730004 	lbui	r3, r19, 4
20033c64:	30630001 	addik	r3, r3, 1
20033c68:	a46300ff 	andi	r3, r3, 255
20033c6c:	90630060 	sext8	r3, r3
20033c70:	b0002006 	imm	8198
20033c74:	f0602f38 	sbi	r3, r0, 12088	// 20062f38 <comp>
		local_comp = comp;
20033c78:	b0002006 	imm	8198
20033c7c:	e0602f38 	lbui	r3, r0, 12088	// 20062f38 <comp>
20033c80:	f0730004 	sbi	r3, r19, 4
		if (local_comp == 6) {
20033c84:	e0730004 	lbui	r3, r19, 4
20033c88:	90630060 	sext8	r3, r3
20033c8c:	a8630006 	xori	r3, r3, 6
20033c90:	bc230080 	bnei	r3, 128		// 20033d10
			comp = 0;
20033c94:	b0002006 	imm	8198
20033c98:	f0002f38 	sbi	r0, r0, 12088	// 20062f38 <comp>
			local_ptr = ptr;
20033c9c:	b0002006 	imm	8198
20033ca0:	e4602134 	lhui	r3, r0, 8500	// 20062134 <ptr>
20033ca4:	f4730006 	shi	r3, r19, 6
			if (local_ptr == 8) {
20033ca8:	e4730006 	lhui	r3, r19, 6
20033cac:	90630061 	sext16	r3, r3
20033cb0:	a8630008 	xori	r3, r3, 8
20033cb4:	bc230034 	bnei	r3, 52		// 20033ce8
				local_BUF_SIZE = BUF_SIZE;
20033cb8:	30600070 	addik	r3, r0, 112	// 70 <deregister_tm_clones>
20033cbc:	f8730008 	swi	r3, r19, 8
				ptr = local_BUF_SIZE - 8;
20033cc0:	e8730008 	lwi	r3, r19, 8
20033cc4:	b0000000 	imm	0
20033cc8:	a463ffff 	andi	r3, r3, -1
20033ccc:	3063fff8 	addik	r3, r3, -8
20033cd0:	b0000000 	imm	0
20033cd4:	a463ffff 	andi	r3, r3, -1
20033cd8:	90630061 	sext16	r3, r3
20033cdc:	b0002006 	imm	8198
20033ce0:	f4602134 	shi	r3, r0, 8500	// 20062134 <ptr>
20033ce4:	b800002c 	bri	44		// 20033d10
			} else {
				local_ptr = ptr;
20033ce8:	b0002006 	imm	8198
20033cec:	e4602134 	lhui	r3, r0, 8500	// 20062134 <ptr>
20033cf0:	f4730006 	shi	r3, r19, 6
				ptr = local_ptr - 8;
20033cf4:	e4730006 	lhui	r3, r19, 6
20033cf8:	3063fff8 	addik	r3, r3, -8
20033cfc:	b0000000 	imm	0
20033d00:	a463ffff 	andi	r3, r3, -1
20033d04:	90630061 	sext16	r3, r3
20033d08:	b0002006 	imm	8198
20033d0c:	f4602134 	shi	r3, r0, 8500	// 20062134 <ptr>
			}
		}
	
		// Update ports indexes
		
	}
20033d10:	10330000 	addk	r1, r19, r0
20033d14:	ea61000c 	lwi	r19, r1, 12
20033d18:	30210010 	addik	r1, r1, 16
20033d1c:	b60f0008 	rtsd	r15, 8
20033d20:	80000000 	or	r0, r0, r0

20033d24 <isSchedulable_copy>:
	static i32 isSchedulable_copy() {
20033d24:	3021fff4 	addik	r1, r1, -12
20033d28:	fa610008 	swi	r19, r1, 8
20033d2c:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
20033d30:	30600001 	addik	r3, r0, 1
20033d34:	f8730004 	swi	r3, r19, 4
		return result;
20033d38:	e8730004 	lwi	r3, r19, 4
	}
20033d3c:	10330000 	addk	r1, r19, r0
20033d40:	ea610008 	lwi	r19, r1, 8
20033d44:	3021000c 	addik	r1, r1, 12
20033d48:	b60f0008 	rtsd	r15, 8
20033d4c:	80000000 	or	r0, r0, r0

20033d50 <copy>:
	
	static void copy() {
20033d50:	3021ffa8 	addik	r1, r1, -88
20033d54:	f9e10000 	swi	r15, r1, 0
20033d58:	fa610054 	swi	r19, r1, 84
20033d5c:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_PQF_AC = index_PQF_AC % SIZE_PQF_AC;
20033d60:	b0002006 	imm	8198
20033d64:	e8602114 	lwi	r3, r0, 8468	// 20062114 <index_PQF_AC>
20033d68:	a46301ff 	andi	r3, r3, 511
20033d6c:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_QF_AC = index_QF_AC % SIZE_QF_AC;
20033d70:	b0002006 	imm	8198
20033d74:	e860212c 	lwi	r3, r0, 8492	// 2006212c <index_QF_AC>
20033d78:	a46301ff 	andi	r3, r3, 511
20033d7c:	f8730028 	swi	r3, r19, 40
		i16 tmp_PQF_AC0;
		i16 local_ptr;
		i8 local_comp;
		i16 tmp_pred;
	
		i = 0;
20033d80:	f8130020 	swi	r0, r19, 32
		while (i <= 62) {
20033d84:	b800027c 	bri	636		// 20034000
			count = i + 1;
20033d88:	e8730020 	lwi	r3, r19, 32
20033d8c:	30630001 	addik	r3, r3, 1
20033d90:	f873002c 	swi	r3, r19, 44
			v = count & 7;
20033d94:	e873002c 	lwi	r3, r19, 44
20033d98:	90630060 	sext8	r3, r3
20033d9c:	a4630007 	andi	r3, r3, 7
20033da0:	f0730030 	sbi	r3, r19, 48
			h = count >> 3 & 7;
20033da4:	e873002c 	lwi	r3, r19, 44
20033da8:	64630203 	bsrai	r3, r3, 3
20033dac:	90630060 	sext8	r3, r3
20033db0:	a4630007 	andi	r3, r3, 7
20033db4:	f0730031 	sbi	r3, r19, 49
			top_edge = h == 0;
20033db8:	e0730031 	lbui	r3, r19, 49
20033dbc:	90830060 	sext8	r4, r3
20033dc0:	10600000 	addk	r3, r0, r0
20033dc4:	88641c00 	pcmpeq	r3, r4, r3
20033dc8:	a46300ff 	andi	r3, r3, 255
20033dcc:	f8730034 	swi	r3, r19, 52
			left_edge = v == 0;
20033dd0:	e0730030 	lbui	r3, r19, 48
20033dd4:	90830060 	sext8	r4, r3
20033dd8:	10600000 	addk	r3, r0, r0
20033ddc:	88641c00 	pcmpeq	r3, r4, r3
20033de0:	a46300ff 	andi	r3, r3, 255
20033de4:	f8730038 	swi	r3, r19, 56
			if (top_edge) {
20033de8:	e8730034 	lwi	r3, r19, 52
20033dec:	bc030010 	beqi	r3, 16		// 20033dfc
				index_replaced = v;
20033df0:	e0730030 	lbui	r3, r19, 48
20033df4:	f073001c 	sbi	r3, r19, 28
20033df8:	b8000010 	bri	16		// 20033e08
			} else {
				index_replaced = h | 8;
20033dfc:	e0730031 	lbui	r3, r19, 49
20033e00:	a0630008 	ori	r3, r3, 8
20033e04:	f073001c 	sbi	r3, r19, 28
			}
			local_acpred_flag = acpred_flag;
20033e08:	b0002006 	imm	8198
20033e0c:	e8602f40 	lwi	r3, r0, 12096	// 20062f40 <acpred_flag>
20033e10:	f873003c 	swi	r3, r19, 60
			local_top = top;
20033e14:	b0002006 	imm	8198
20033e18:	e8602f3c 	lwi	r3, r0, 12092	// 20062f3c <top>
20033e1c:	f8730040 	swi	r3, r19, 64
			local_top = top;
20033e20:	b0002006 	imm	8198
20033e24:	e8602f3c 	lwi	r3, r0, 12092	// 20062f3c <top>
20033e28:	f8730040 	swi	r3, r19, 64
			if (local_acpred_flag && (local_top && top_edge || !local_top && left_edge)) {
20033e2c:	e873003c 	lwi	r3, r19, 60
20033e30:	bc0300d4 	beqi	r3, 212		// 20033f04
20033e34:	e8730040 	lwi	r3, r19, 64
20033e38:	bc03000c 	beqi	r3, 12		// 20033e44
20033e3c:	e8730034 	lwi	r3, r19, 52
20033e40:	bc230014 	bnei	r3, 20		// 20033e54
20033e44:	e8730040 	lwi	r3, r19, 64
20033e48:	bc2300bc 	bnei	r3, 188		// 20033f04
20033e4c:	e8730038 	lwi	r3, r19, 56
20033e50:	bc0300b4 	beqi	r3, 180		// 20033f04
				tmp_PQF_AC = tokens_PQF_AC[(index_PQF_AC + (i)) % SIZE_PQF_AC];
20033e54:	b0002004 	imm	8196
20033e58:	e8608384 	lwi	r3, r0, -31868	// 20048384 <decoder_texture_IAP_PQF_AC>
20033e5c:	e8830004 	lwi	r4, r3, 4
20033e60:	b0002006 	imm	8198
20033e64:	e8a02114 	lwi	r5, r0, 8468	// 20062114 <index_PQF_AC>
20033e68:	e8730020 	lwi	r3, r19, 32
20033e6c:	10651800 	addk	r3, r5, r3
20033e70:	a46301ff 	andi	r3, r3, 511
20033e74:	10631800 	addk	r3, r3, r3
20033e78:	10641800 	addk	r3, r4, r3
20033e7c:	e4630000 	lhui	r3, r3, 0
20033e80:	f4730044 	shi	r3, r19, 68
				local_pred_ptr = pred_ptr;
20033e84:	b0002006 	imm	8198
20033e88:	e4602136 	lhui	r3, r0, 8502	// 20062136 <pred_ptr>
20033e8c:	f4730046 	shi	r3, r19, 70
				tmp_buf = buf[local_pred_ptr << 4 | index_replaced];
20033e90:	e4730046 	lhui	r3, r19, 70
20033e94:	90630061 	sext16	r3, r3
20033e98:	64830404 	bslli	r4, r3, 4
20033e9c:	e073001c 	lbui	r3, r19, 28
20033ea0:	90630060 	sext8	r3, r3
20033ea4:	80641800 	or	r3, r4, r3
20033ea8:	10631800 	addk	r3, r3, r3
20033eac:	b0002006 	imm	8198
20033eb0:	30632138 	addik	r3, r3, 8504
20033eb4:	e4630000 	lhui	r3, r3, 0
20033eb8:	f4730048 	shi	r3, r19, 72
				tokens_QF_AC[(index_QF_AC + (i)) % SIZE_QF_AC] = tmp_PQF_AC + tmp_buf;
20033ebc:	b0002004 	imm	8196
20033ec0:	e8608388 	lwi	r3, r0, -31864	// 20048388 <decoder_texture_IAP_QF_AC>
20033ec4:	e8830004 	lwi	r4, r3, 4
20033ec8:	b0002006 	imm	8198
20033ecc:	e8a0212c 	lwi	r5, r0, 8492	// 2006212c <index_QF_AC>
20033ed0:	e8730020 	lwi	r3, r19, 32
20033ed4:	10651800 	addk	r3, r5, r3
20033ed8:	a46301ff 	andi	r3, r3, 511
20033edc:	10631800 	addk	r3, r3, r3
20033ee0:	10641800 	addk	r3, r4, r3
20033ee4:	e4b30044 	lhui	r5, r19, 68
20033ee8:	e4930048 	lhui	r4, r19, 72
20033eec:	10852000 	addk	r4, r5, r4
20033ef0:	b0000000 	imm	0
20033ef4:	a484ffff 	andi	r4, r4, -1
20033ef8:	90840061 	sext16	r4, r4
20033efc:	f4830000 	shi	r4, r3, 0
20033f00:	b8000064 	bri	100		// 20033f64
			} else {
				tmp_PQF_AC0 = tokens_PQF_AC[(index_PQF_AC + (i)) % SIZE_PQF_AC];
20033f04:	b0002004 	imm	8196
20033f08:	e8608384 	lwi	r3, r0, -31868	// 20048384 <decoder_texture_IAP_PQF_AC>
20033f0c:	e8830004 	lwi	r4, r3, 4
20033f10:	b0002006 	imm	8198
20033f14:	e8a02114 	lwi	r5, r0, 8468	// 20062114 <index_PQF_AC>
20033f18:	e8730020 	lwi	r3, r19, 32
20033f1c:	10651800 	addk	r3, r5, r3
20033f20:	a46301ff 	andi	r3, r3, 511
20033f24:	10631800 	addk	r3, r3, r3
20033f28:	10641800 	addk	r3, r4, r3
20033f2c:	e4630000 	lhui	r3, r3, 0
20033f30:	f473004a 	shi	r3, r19, 74
				tokens_QF_AC[(index_QF_AC + (i)) % SIZE_QF_AC] = tmp_PQF_AC0;
20033f34:	b0002004 	imm	8196
20033f38:	e8608388 	lwi	r3, r0, -31864	// 20048388 <decoder_texture_IAP_QF_AC>
20033f3c:	e8830004 	lwi	r4, r3, 4
20033f40:	b0002006 	imm	8198
20033f44:	e8a0212c 	lwi	r5, r0, 8492	// 2006212c <index_QF_AC>
20033f48:	e8730020 	lwi	r3, r19, 32
20033f4c:	10651800 	addk	r3, r5, r3
20033f50:	a46301ff 	andi	r3, r3, 511
20033f54:	10631800 	addk	r3, r3, r3
20033f58:	10641800 	addk	r3, r4, r3
20033f5c:	e493004a 	lhui	r4, r19, 74
20033f60:	f4830000 	shi	r4, r3, 0
			}
			if (left_edge || top_edge) {
20033f64:	e8730038 	lwi	r3, r19, 56
20033f68:	bc23000c 	bnei	r3, 12		// 20033f74
20033f6c:	e8730034 	lwi	r3, r19, 52
20033f70:	bc030084 	beqi	r3, 132		// 20033ff4
				local_ptr = ptr;
20033f74:	b0002006 	imm	8198
20033f78:	e4602134 	lhui	r3, r0, 8500	// 20062134 <ptr>
20033f7c:	f473004c 	shi	r3, r19, 76
				local_comp = comp;
20033f80:	b0002006 	imm	8198
20033f84:	e0602f38 	lbui	r3, r0, 12088	// 20062f38 <comp>
20033f88:	f073004e 	sbi	r3, r19, 78
				tmp_pred = tokens_QF_AC[(index_QF_AC + (i)) % SIZE_QF_AC];
20033f8c:	b0002004 	imm	8196
20033f90:	e8608388 	lwi	r3, r0, -31864	// 20048388 <decoder_texture_IAP_QF_AC>
20033f94:	e8830004 	lwi	r4, r3, 4
20033f98:	b0002006 	imm	8198
20033f9c:	e8a0212c 	lwi	r5, r0, 8492	// 2006212c <index_QF_AC>
20033fa0:	e8730020 	lwi	r3, r19, 32
20033fa4:	10651800 	addk	r3, r5, r3
20033fa8:	a46301ff 	andi	r3, r3, 511
20033fac:	10631800 	addk	r3, r3, r3
20033fb0:	10641800 	addk	r3, r4, r3
20033fb4:	e4630000 	lhui	r3, r3, 0
20033fb8:	f4730050 	shi	r3, r19, 80
				buf[(local_ptr | local_comp) << 4 | index_replaced] = tmp_pred;
20033fbc:	e473004c 	lhui	r3, r19, 76
20033fc0:	90830061 	sext16	r4, r3
20033fc4:	e073004e 	lbui	r3, r19, 78
20033fc8:	90630060 	sext8	r3, r3
20033fcc:	80641800 	or	r3, r4, r3
20033fd0:	64830404 	bslli	r4, r3, 4
20033fd4:	e073001c 	lbui	r3, r19, 28
20033fd8:	90630060 	sext8	r3, r3
20033fdc:	80641800 	or	r3, r4, r3
20033fe0:	10631800 	addk	r3, r3, r3
20033fe4:	b0002006 	imm	8198
20033fe8:	30632138 	addik	r3, r3, 8504
20033fec:	e4930050 	lhui	r4, r19, 80
20033ff0:	f4830000 	shi	r4, r3, 0
			}
			i = i + 1;
20033ff4:	e8730020 	lwi	r3, r19, 32
20033ff8:	30630001 	addik	r3, r3, 1
20033ffc:	f8730020 	swi	r3, r19, 32
		i16 local_ptr;
		i8 local_comp;
		i16 tmp_pred;
	
		i = 0;
		while (i <= 62) {
20034000:	e8930020 	lwi	r4, r19, 32
20034004:	3060003e 	addik	r3, r0, 62
20034008:	16441801 	cmp	r18, r4, r3
2003400c:	bcb2fd7c 	bgei	r18, -644		// 20033d88
			}
			i = i + 1;
		}
	
		// Update ports indexes
		index_PQF_AC += 63;
20034010:	b0002006 	imm	8198
20034014:	e8602114 	lwi	r3, r0, 8468	// 20062114 <index_PQF_AC>
20034018:	3063003f 	addik	r3, r3, 63
2003401c:	b0002006 	imm	8198
20034020:	f8602114 	swi	r3, r0, 8468	// 20062114 <index_PQF_AC>
		index_QF_AC += 63;
20034024:	b0002006 	imm	8198
20034028:	e860212c 	lwi	r3, r0, 8492	// 2006212c <index_QF_AC>
2003402c:	3063003f 	addik	r3, r3, 63
20034030:	b0002006 	imm	8198
20034034:	f860212c 	swi	r3, r0, 8492	// 2006212c <index_QF_AC>
		
		read_end_PQF_AC();
20034038:	b9f4f6bc 	brlid	r15, -2372	// 200336f4 <read_end_PQF_AC>
2003403c:	80000000 	or	r0, r0, r0
		write_end_QF_AC();
20034040:	b9f4f8ac 	brlid	r15, -1876	// 200338ec <write_end_QF_AC>
20034044:	80000000 	or	r0, r0, r0
	}
20034048:	e9e10000 	lwi	r15, r1, 0
2003404c:	10330000 	addk	r1, r19, r0
20034050:	ea610054 	lwi	r19, r1, 84
20034054:	30210058 	addik	r1, r1, 88
20034058:	b60f0008 	rtsd	r15, 8
2003405c:	80000000 	or	r0, r0, r0

20034060 <decoder_texture_IAP_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_texture_IAP_initialize() {
20034060:	3021fff4 	addik	r1, r1, -12
20034064:	fa610008 	swi	r19, r1, 8
20034068:	12610000 	addk	r19, r1, r0
		int i = 0;
2003406c:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_start;
20034070:	30600002 	addik	r3, r0, 2
20034074:	b0002006 	imm	8198
20034078:	f8602f44 	swi	r3, r0, 12100	// 20062f44 <_FSM_state>
		
	finished:
		// no read_end/write_end here!
		return;
2003407c:	80000000 	or	r0, r0, r0
	}
20034080:	10330000 	addk	r1, r19, r0
20034084:	ea610008 	lwi	r19, r1, 8
20034088:	3021000c 	addik	r1, r1, 12
2003408c:	b60f0008 	rtsd	r15, 8
20034090:	80000000 	or	r0, r0, r0

20034094 <decoder_texture_IAP_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	
	int decoder_texture_IAP_scheduler() {
20034094:	3021ffc8 	addik	r1, r1, -56
20034098:	f9e10000 	swi	r15, r1, 0
2003409c:	fa610034 	swi	r19, r1, 52
200340a0:	12610000 	addk	r19, r1, r0
		int i = 0;
200340a4:	f813001c 	swi	r0, r19, 28
		if(needInit){
200340a8:	b0002004 	imm	8196
200340ac:	e060840c 	lbui	r3, r0, -31732	// 2004840c <needInit>
200340b0:	bc030014 	beqi	r3, 20		// 200340c4
			decoder_texture_IAP_initialize();
200340b4:	b9f4ffac 	brlid	r15, -84	// 20034060 <decoder_texture_IAP_initialize>
200340b8:	80000000 	or	r0, r0, r0
			needInit = 0;
200340bc:	b0002004 	imm	8196
200340c0:	f000840c 	sbi	r0, r0, -31732	// 2004840c <needInit>
		}
	
		read_PQF_AC();
200340c4:	b9f4f5c0 	brlid	r15, -2624	// 20033684 <read_PQF_AC>
200340c8:	80000000 	or	r0, r0, r0
		read_PTR();
200340cc:	b9f4f660 	brlid	r15, -2464	// 2003372c <read_PTR>
200340d0:	80000000 	or	r0, r0, r0
		read_AC_PRED_DIR();
200340d4:	b9f4f700 	brlid	r15, -2304	// 200337d4 <read_AC_PRED_DIR>
200340d8:	80000000 	or	r0, r0, r0
		write_QF_AC();
200340dc:	b9f4f7a0 	brlid	r15, -2144	// 2003387c <write_QF_AC>
200340e0:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
200340e4:	b0002006 	imm	8198
200340e8:	e8602f44 	lwi	r3, r0, 12100	// 20062f44 <_FSM_state>
200340ec:	a8830001 	xori	r4, r3, 1
200340f0:	bc040074 	beqi	r4, 116		// 20034164
200340f4:	30800001 	addik	r4, r0, 1
200340f8:	16441803 	cmpu	r18, r4, r3
200340fc:	bc52001c 	blti	r18, 28		// 20034118
20034100:	a8630002 	xori	r3, r3, 2
20034104:	bc030108 	beqi	r3, 264		// 2003420c
		case my_state_pred:
			goto l_pred;
		case my_state_start:
			goto l_start;
		default:
			exit(1);
20034108:	30a00001 	addik	r5, r0, 1
2003410c:	b000dffc 	imm	-8196
20034110:	b9f4c288 	brlid	r15, -15736	// 398 <exit>
20034114:	80000000 	or	r0, r0, r0
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_advance:
			goto l_advance;
20034118:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_advance:
			if (isSchedulable_advance()) {
2003411c:	b9f4fb00 	brlid	r15, -1280	// 20033c1c <isSchedulable_advance>
20034120:	80000000 	or	r0, r0, r0
20034124:	bc030034 	beqi	r3, 52		// 20034158
				int stop = 0;
20034128:	f8130024 	swi	r0, r19, 36
				if (stop != 0) {
2003412c:	e8730024 	lwi	r3, r19, 36
20034130:	bc030010 	beqi	r3, 16		// 20034140
					_FSM_state = my_state_advance;
20034134:	b0002006 	imm	8198
20034138:	f8002f44 	swi	r0, r0, 12100	// 20062f44 <_FSM_state>
					goto finished;
2003413c:	b8000204 	bri	516		// 20034340
				}
				advance();
20034140:	b9f4fb08 	brlid	r15, -1272	// 20033c48 <advance>
20034144:	80000000 	or	r0, r0, r0
				i++;
20034148:	e873001c 	lwi	r3, r19, 28
2003414c:	30630001 	addik	r3, r3, 1
20034150:	f873001c 	swi	r3, r19, 28
				goto l_start;
20034154:	b80000bc 	bri	188		// 20034210
			} else {
				_FSM_state = my_state_advance;
20034158:	b0002006 	imm	8198
2003415c:	f8002f44 	swi	r0, r0, 12100	// 20062f44 <_FSM_state>
				goto finished;
20034160:	b80001e0 	bri	480		// 20034340
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_advance:
			goto l_advance;
		case my_state_pred:
			goto l_pred;
20034164:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_advance;
				goto finished;
			}
		l_pred:
			if (numTokens_PQF_AC - index_PQF_AC >= 63 && isSchedulable_copy()) {
20034168:	b0002006 	imm	8198
2003416c:	e8802118 	lwi	r4, r0, 8472	// 20062118 <numTokens_PQF_AC>
20034170:	b0002006 	imm	8198
20034174:	e8602114 	lwi	r3, r0, 8468	// 20062114 <index_PQF_AC>
20034178:	14832000 	rsubk	r4, r3, r4
2003417c:	3060003e 	addik	r3, r0, 62
20034180:	16441803 	cmpu	r18, r4, r3
20034184:	bcb20078 	bgei	r18, 120		// 200341fc
20034188:	b9f4fb9c 	brlid	r15, -1124	// 20033d24 <isSchedulable_copy>
2003418c:	80000000 	or	r0, r0, r0
20034190:	bc03006c 	beqi	r3, 108		// 200341fc
				int stop = 0;
20034194:	f8130020 	swi	r0, r19, 32
				if (63 > SIZE_QF_AC - index_QF_AC + decoder_texture_IAP_QF_AC->read_inds[0]) {
20034198:	b0002004 	imm	8196
2003419c:	e8608388 	lwi	r3, r0, -31864	// 20048388 <decoder_texture_IAP_QF_AC>
200341a0:	e863000c 	lwi	r3, r3, 12
200341a4:	e8830000 	lwi	r4, r3, 0
200341a8:	b0002006 	imm	8198
200341ac:	e860212c 	lwi	r3, r0, 8492	// 2006212c <index_QF_AC>
200341b0:	14632000 	rsubk	r3, r3, r4
200341b4:	30830200 	addik	r4, r3, 512
200341b8:	3060003e 	addik	r3, r0, 62
200341bc:	16441803 	cmpu	r18, r4, r3
200341c0:	bc52000c 	blti	r18, 12		// 200341cc
					stop = 1;
200341c4:	30600001 	addik	r3, r0, 1
200341c8:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
200341cc:	e8730020 	lwi	r3, r19, 32
200341d0:	bc030014 	beqi	r3, 20		// 200341e4
					_FSM_state = my_state_pred;
200341d4:	30600001 	addik	r3, r0, 1
200341d8:	b0002006 	imm	8198
200341dc:	f8602f44 	swi	r3, r0, 12100	// 20062f44 <_FSM_state>
					goto finished;
200341e0:	b8000160 	bri	352		// 20034340
				}
				copy();
200341e4:	b9f4fb6c 	brlid	r15, -1172	// 20033d50 <copy>
200341e8:	80000000 	or	r0, r0, r0
				i++;
200341ec:	e873001c 	lwi	r3, r19, 28
200341f0:	30630001 	addik	r3, r3, 1
200341f4:	f873001c 	swi	r3, r19, 28
				goto l_advance;
200341f8:	b800ff24 	bri	-220		// 2003411c
			} else {
				_FSM_state = my_state_pred;
200341fc:	30600001 	addik	r3, r0, 1
20034200:	b0002006 	imm	8198
20034204:	f8602f44 	swi	r3, r0, 12100	// 20062f44 <_FSM_state>
				goto finished;
20034208:	b8000138 	bri	312		// 20034340
		case my_state_advance:
			goto l_advance;
		case my_state_pred:
			goto l_pred;
		case my_state_start:
			goto l_start;
2003420c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_pred;
				goto finished;
			}
		l_start:
			if (numTokens_AC_PRED_DIR - index_AC_PRED_DIR >= 1 && isSchedulable_newvop()) {
20034210:	b0002006 	imm	8198
20034214:	e8802128 	lwi	r4, r0, 8488	// 20062128 <numTokens_AC_PRED_DIR>
20034218:	b0002006 	imm	8198
2003421c:	e8602124 	lwi	r3, r0, 8484	// 20062124 <index_AC_PRED_DIR>
20034220:	88641800 	xor	r3, r4, r3
20034224:	bc030044 	beqi	r3, 68		// 20034268
20034228:	b9f4f6fc 	brlid	r15, -2308	// 20033924 <isSchedulable_newvop>
2003422c:	80000000 	or	r0, r0, r0
20034230:	bc030038 	beqi	r3, 56		// 20034268
				int stop = 0;
20034234:	f8130028 	swi	r0, r19, 40
				if (stop != 0) {
20034238:	e8730028 	lwi	r3, r19, 40
2003423c:	bc030014 	beqi	r3, 20		// 20034250
					_FSM_state = my_state_start;
20034240:	30600002 	addik	r3, r0, 2
20034244:	b0002006 	imm	8198
20034248:	f8602f44 	swi	r3, r0, 12100	// 20062f44 <_FSM_state>
					goto finished;
2003424c:	b80000f4 	bri	244		// 20034340
				}
				newvop();
20034250:	b9f4f734 	brlid	r15, -2252	// 20033984 <newvop>
20034254:	80000000 	or	r0, r0, r0
				i++;
20034258:	e873001c 	lwi	r3, r19, 28
2003425c:	30630001 	addik	r3, r3, 1
20034260:	f873001c 	swi	r3, r19, 28
				goto l_start;
20034264:	b800ffac 	bri	-84		// 20034210
			} else if (numTokens_AC_PRED_DIR - index_AC_PRED_DIR >= 1 && isSchedulable_skip()) {
20034268:	b0002006 	imm	8198
2003426c:	e8802128 	lwi	r4, r0, 8488	// 20062128 <numTokens_AC_PRED_DIR>
20034270:	b0002006 	imm	8198
20034274:	e8602124 	lwi	r3, r0, 8484	// 20062124 <index_AC_PRED_DIR>
20034278:	88641800 	xor	r3, r4, r3
2003427c:	bc030044 	beqi	r3, 68		// 200342c0
20034280:	b9f4f790 	brlid	r15, -2160	// 20033a10 <isSchedulable_skip>
20034284:	80000000 	or	r0, r0, r0
20034288:	bc030038 	beqi	r3, 56		// 200342c0
				int stop = 0;
2003428c:	f813002c 	swi	r0, r19, 44
				if (stop != 0) {
20034290:	e873002c 	lwi	r3, r19, 44
20034294:	bc030014 	beqi	r3, 20		// 200342a8
					_FSM_state = my_state_start;
20034298:	30600002 	addik	r3, r0, 2
2003429c:	b0002006 	imm	8198
200342a0:	f8602f44 	swi	r3, r0, 12100	// 20062f44 <_FSM_state>
					goto finished;
200342a4:	b800009c 	bri	156		// 20034340
				}
				skip();
200342a8:	b9f4f7c0 	brlid	r15, -2112	// 20033a68 <skip>
200342ac:	80000000 	or	r0, r0, r0
				i++;
200342b0:	e873001c 	lwi	r3, r19, 28
200342b4:	30630001 	addik	r3, r3, 1
200342b8:	f873001c 	swi	r3, r19, 28
				goto l_advance;
200342bc:	b800fe60 	bri	-416		// 2003411c
			} else if (numTokens_AC_PRED_DIR - index_AC_PRED_DIR >= 1 && numTokens_PTR - index_PTR >= 1 && isSchedulable_start()) {
200342c0:	b0002006 	imm	8198
200342c4:	e8802128 	lwi	r4, r0, 8488	// 20062128 <numTokens_AC_PRED_DIR>
200342c8:	b0002006 	imm	8198
200342cc:	e8602124 	lwi	r3, r0, 8484	// 20062124 <index_AC_PRED_DIR>
200342d0:	88641800 	xor	r3, r4, r3
200342d4:	bc03005c 	beqi	r3, 92		// 20034330
200342d8:	b0002006 	imm	8198
200342dc:	e8802120 	lwi	r4, r0, 8480	// 20062120 <numTokens_PTR>
200342e0:	b0002006 	imm	8198
200342e4:	e860211c 	lwi	r3, r0, 8476	// 2006211c <index_PTR>
200342e8:	88641800 	xor	r3, r4, r3
200342ec:	bc030044 	beqi	r3, 68		// 20034330
200342f0:	b9f4f7f0 	brlid	r15, -2064	// 20033ae0 <isSchedulable_start>
200342f4:	80000000 	or	r0, r0, r0
200342f8:	bc030038 	beqi	r3, 56		// 20034330
				int stop = 0;
200342fc:	f8130030 	swi	r0, r19, 48
				if (stop != 0) {
20034300:	e8730030 	lwi	r3, r19, 48
20034304:	bc030014 	beqi	r3, 20		// 20034318
					_FSM_state = my_state_start;
20034308:	30600002 	addik	r3, r0, 2
2003430c:	b0002006 	imm	8198
20034310:	f8602f44 	swi	r3, r0, 12100	// 20062f44 <_FSM_state>
					goto finished;
20034314:	b800002c 	bri	44		// 20034340
				}
				start();
20034318:	b9f4f7f4 	brlid	r15, -2060	// 20033b0c <start>
2003431c:	80000000 	or	r0, r0, r0
				i++;
20034320:	e873001c 	lwi	r3, r19, 28
20034324:	30630001 	addik	r3, r3, 1
20034328:	f873001c 	swi	r3, r19, 28
				goto l_pred;
2003432c:	b800fe3c 	bri	-452		// 20034168
			} else {
				_FSM_state = my_state_start;
20034330:	30600002 	addik	r3, r0, 2
20034334:	b0002006 	imm	8198
20034338:	f8602f44 	swi	r3, r0, 12100	// 20062f44 <_FSM_state>
				goto finished;
2003433c:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_PQF_AC();
20034340:	b9f4f3b4 	brlid	r15, -3148	// 200336f4 <read_end_PQF_AC>
20034344:	80000000 	or	r0, r0, r0
		read_end_PTR();
20034348:	b9f4f454 	brlid	r15, -2988	// 2003379c <read_end_PTR>
2003434c:	80000000 	or	r0, r0, r0
		read_end_AC_PRED_DIR();
20034350:	b9f4f4f4 	brlid	r15, -2828	// 20033844 <read_end_AC_PRED_DIR>
20034354:	80000000 	or	r0, r0, r0
		
		write_end_QF_AC();
20034358:	b9f4f594 	brlid	r15, -2668	// 200338ec <write_end_QF_AC>
2003435c:	80000000 	or	r0, r0, r0
		
		
		return i;
20034360:	e873001c 	lwi	r3, r19, 28
	}
20034364:	e9e10000 	lwi	r15, r1, 0
20034368:	10330000 	addk	r1, r19, r0
2003436c:	ea610034 	lwi	r19, r1, 52
20034370:	30210038 	addik	r1, r1, 56
20034374:	b60f0008 	rtsd	r15, 8
20034378:	80000000 	or	r0, r0, r0

2003437c <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003437c:	3021fff8 	addik	r1, r1, -8
20034380:	fa610004 	swi	r19, r1, 4
20034384:	12610000 	addk	r19, r1, r0
20034388:	f8b3000c 	swi	r5, r19, 12
2003438c:	f8d30010 	swi	r6, r19, 16
20034390:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20034394:	e873000c 	lwi	r3, r19, 12
20034398:	e8630010 	lwi	r3, r3, 16
2003439c:	e8830000 	lwi	r4, r3, 0
200343a0:	e873000c 	lwi	r3, r19, 12
200343a4:	e8a3000c 	lwi	r5, r3, 12
200343a8:	e8730010 	lwi	r3, r19, 16
200343ac:	64630402 	bslli	r3, r3, 2
200343b0:	10651800 	addk	r3, r5, r3
200343b4:	e8630000 	lwi	r3, r3, 0
200343b8:	14a32000 	rsubk	r5, r3, r4
200343bc:	30600001 	addik	r3, r0, 1
200343c0:	e8930014 	lwi	r4, r19, 20
200343c4:	16442803 	cmpu	r18, r4, r5
200343c8:	bcb20008 	bgei	r18, 8		// 200343d0
200343cc:	10600000 	addk	r3, r0, r0
200343d0:	a46300ff 	andi	r3, r3, 255
}
200343d4:	10330000 	addk	r1, r19, r0
200343d8:	ea610004 	lwi	r19, r1, 4
200343dc:	30210008 	addik	r1, r1, 8
200343e0:	b60f0008 	rtsd	r15, 8
200343e4:	80000000 	or	r0, r0, r0

200343e8 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200343e8:	3021fff8 	addik	r1, r1, -8
200343ec:	fa610004 	swi	r19, r1, 4
200343f0:	12610000 	addk	r19, r1, r0
200343f4:	f8b3000c 	swi	r5, r19, 12
200343f8:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200343fc:	e873000c 	lwi	r3, r19, 12
20034400:	e8630010 	lwi	r3, r3, 16
20034404:	e8830000 	lwi	r4, r3, 0
20034408:	e873000c 	lwi	r3, r19, 12
2003440c:	e8a3000c 	lwi	r5, r3, 12
20034410:	e8730010 	lwi	r3, r19, 16
20034414:	64630402 	bslli	r3, r3, 2
20034418:	10651800 	addk	r3, r5, r3
2003441c:	e8630000 	lwi	r3, r3, 0
20034420:	14632000 	rsubk	r3, r3, r4
}
20034424:	10330000 	addk	r1, r19, r0
20034428:	ea610004 	lwi	r19, r1, 4
2003442c:	30210008 	addik	r1, r1, 8
20034430:	b60f0008 	rtsd	r15, 8
20034434:	80000000 	or	r0, r0, r0

20034438 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20034438:	3021fff4 	addik	r1, r1, -12
2003443c:	fa610008 	swi	r19, r1, 8
20034440:	12610000 	addk	r19, r1, r0
20034444:	f8b30010 	swi	r5, r19, 16
20034448:	f8d30014 	swi	r6, r19, 20
2003444c:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20034450:	f8130004 	swi	r0, r19, 4
20034454:	b800005c 	bri	92		// 200344b0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20034458:	e8730010 	lwi	r3, r19, 16
2003445c:	e8830000 	lwi	r4, r3, 0
20034460:	e8730010 	lwi	r3, r19, 16
20034464:	e8a3000c 	lwi	r5, r3, 12
20034468:	e8730004 	lwi	r3, r19, 4
2003446c:	64630402 	bslli	r3, r3, 2
20034470:	10651800 	addk	r3, r5, r3
20034474:	e8a30000 	lwi	r5, r3, 0
20034478:	e8730010 	lwi	r3, r19, 16
2003447c:	e8630010 	lwi	r3, r3, 16
20034480:	e8630000 	lwi	r3, r3, 0
20034484:	14632800 	rsubk	r3, r3, r5
20034488:	10641800 	addk	r3, r4, r3
2003448c:	30830001 	addik	r4, r3, 1
20034490:	e8730018 	lwi	r3, r19, 24
20034494:	16441803 	cmpu	r18, r4, r3
20034498:	bc52000c 	blti	r18, 12		// 200344a4
            return 0;
2003449c:	10600000 	addk	r3, r0, r0
200344a0:	b8000024 	bri	36		// 200344c4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200344a4:	e8730004 	lwi	r3, r19, 4
200344a8:	30630001 	addik	r3, r3, 1
200344ac:	f8730004 	swi	r3, r19, 4
200344b0:	e8930004 	lwi	r4, r19, 4
200344b4:	e8730014 	lwi	r3, r19, 20
200344b8:	16432003 	cmpu	r18, r3, r4
200344bc:	bc52ff9c 	blti	r18, -100		// 20034458
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200344c0:	30600001 	addik	r3, r0, 1
}
200344c4:	10330000 	addk	r1, r19, r0
200344c8:	ea610008 	lwi	r19, r1, 8
200344cc:	3021000c 	addik	r1, r1, 12
200344d0:	b60f0008 	rtsd	r15, 8
200344d4:	80000000 	or	r0, r0, r0

200344d8 <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200344d8:	3021ffec 	addik	r1, r1, -20
200344dc:	fa610010 	swi	r19, r1, 16
200344e0:	12610000 	addk	r19, r1, r0
200344e4:	f8b30018 	swi	r5, r19, 24
200344e8:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200344ec:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200344f0:	f8130004 	swi	r0, r19, 4
200344f4:	b8000054 	bri	84		// 20034548
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200344f8:	e8730018 	lwi	r3, r19, 24
200344fc:	e8630010 	lwi	r3, r3, 16
20034500:	e8830000 	lwi	r4, r3, 0
20034504:	e8730018 	lwi	r3, r19, 24
20034508:	e8a3000c 	lwi	r5, r3, 12
2003450c:	e8730004 	lwi	r3, r19, 4
20034510:	64630402 	bslli	r3, r3, 2
20034514:	10651800 	addk	r3, r5, r3
20034518:	e8630000 	lwi	r3, r3, 0
2003451c:	14632000 	rsubk	r3, r3, r4
20034520:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20034524:	e8930008 	lwi	r4, r19, 8
20034528:	e873000c 	lwi	r3, r19, 12
2003452c:	16441803 	cmpu	r18, r4, r3
20034530:	bcb20008 	bgei	r18, 8		// 20034538
20034534:	10640000 	addk	r3, r4, r0
20034538:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003453c:	e8730004 	lwi	r3, r19, 4
20034540:	30630001 	addik	r3, r3, 1
20034544:	f8730004 	swi	r3, r19, 4
20034548:	e8930004 	lwi	r4, r19, 4
2003454c:	e873001c 	lwi	r3, r19, 28
20034550:	16432003 	cmpu	r18, r3, r4
20034554:	bc52ffa4 	blti	r18, -92		// 200344f8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20034558:	e8730018 	lwi	r3, r19, 24
2003455c:	e8830000 	lwi	r4, r3, 0
20034560:	e8730008 	lwi	r3, r19, 8
20034564:	14632000 	rsubk	r3, r3, r4
}
20034568:	10330000 	addk	r1, r19, r0
2003456c:	ea610010 	lwi	r19, r1, 16
20034570:	30210014 	addik	r1, r1, 20
20034574:	b60f0008 	rtsd	r15, 8
20034578:	80000000 	or	r0, r0, r0

2003457c <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003457c:	3021fff4 	addik	r1, r1, -12
20034580:	fa610008 	swi	r19, r1, 8
20034584:	12610000 	addk	r19, r1, r0
20034588:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2003458c:	e8730010 	lwi	r3, r19, 16
20034590:	e8630010 	lwi	r3, r3, 16
20034594:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20034598:	f8130004 	swi	r0, r19, 4
2003459c:	b8000028 	bri	40		// 200345c4
        fifo->read_inds[i] = 0;
200345a0:	e8730010 	lwi	r3, r19, 16
200345a4:	e883000c 	lwi	r4, r3, 12
200345a8:	e8730004 	lwi	r3, r19, 4
200345ac:	64630402 	bslli	r3, r3, 2
200345b0:	10641800 	addk	r3, r4, r3
200345b4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200345b8:	e8730004 	lwi	r3, r19, 4
200345bc:	30630001 	addik	r3, r3, 1
200345c0:	f8730004 	swi	r3, r19, 4
200345c4:	e8730010 	lwi	r3, r19, 16
200345c8:	e8830008 	lwi	r4, r3, 8
200345cc:	e8730004 	lwi	r3, r19, 4
200345d0:	16441803 	cmpu	r18, r4, r3
200345d4:	bc52ffcc 	blti	r18, -52		// 200345a0
        fifo->read_inds[i] = 0;
    }
}
200345d8:	10330000 	addk	r1, r19, r0
200345dc:	ea610008 	lwi	r19, r1, 8
200345e0:	3021000c 	addik	r1, r1, 12
200345e4:	b60f0008 	rtsd	r15, 8
200345e8:	80000000 	or	r0, r0, r0

200345ec <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200345ec:	3021fff4 	addik	r1, r1, -12
200345f0:	fa610008 	swi	r19, r1, 8
200345f4:	12610000 	addk	r19, r1, r0
200345f8:	f8b30010 	swi	r5, r19, 16
200345fc:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20034600:	e8730010 	lwi	r3, r19, 16
20034604:	e8830004 	lwi	r4, r3, 4
20034608:	e8730010 	lwi	r3, r19, 16
2003460c:	e8a3000c 	lwi	r5, r3, 12
20034610:	e8730014 	lwi	r3, r19, 20
20034614:	64630402 	bslli	r3, r3, 2
20034618:	10651800 	addk	r3, r5, r3
2003461c:	e8a30000 	lwi	r5, r3, 0
20034620:	e8730010 	lwi	r3, r19, 16
20034624:	e8630000 	lwi	r3, r3, 0
20034628:	3063ffff 	addik	r3, r3, -1
2003462c:	84651800 	and	r3, r5, r3
20034630:	10641800 	addk	r3, r4, r3
20034634:	e0630000 	lbui	r3, r3, 0
20034638:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003463c:	e8730010 	lwi	r3, r19, 16
20034640:	e883000c 	lwi	r4, r3, 12
20034644:	e8730014 	lwi	r3, r19, 20
20034648:	64630402 	bslli	r3, r3, 2
2003464c:	10641800 	addk	r3, r4, r3
20034650:	e8830000 	lwi	r4, r3, 0
20034654:	30840001 	addik	r4, r4, 1
20034658:	f8830000 	swi	r4, r3, 0
    return value;
2003465c:	e0730004 	lbui	r3, r19, 4
20034660:	90630060 	sext8	r3, r3
}
20034664:	10330000 	addk	r1, r19, r0
20034668:	ea610008 	lwi	r19, r1, 8
2003466c:	3021000c 	addik	r1, r1, 12
20034670:	b60f0008 	rtsd	r15, 8
20034674:	80000000 	or	r0, r0, r0

20034678 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20034678:	3021fff8 	addik	r1, r1, -8
2003467c:	fa610004 	swi	r19, r1, 4
20034680:	12610000 	addk	r19, r1, r0
20034684:	f8b3000c 	swi	r5, r19, 12
20034688:	10660000 	addk	r3, r6, r0
2003468c:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20034690:	e873000c 	lwi	r3, r19, 12
20034694:	e8830004 	lwi	r4, r3, 4
20034698:	e873000c 	lwi	r3, r19, 12
2003469c:	e8630010 	lwi	r3, r3, 16
200346a0:	e8a30000 	lwi	r5, r3, 0
200346a4:	e873000c 	lwi	r3, r19, 12
200346a8:	e8630000 	lwi	r3, r3, 0
200346ac:	3063ffff 	addik	r3, r3, -1
200346b0:	84651800 	and	r3, r5, r3
200346b4:	10641800 	addk	r3, r4, r3
200346b8:	e0930010 	lbui	r4, r19, 16
200346bc:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
200346c0:	e873000c 	lwi	r3, r19, 12
200346c4:	e8630010 	lwi	r3, r3, 16
200346c8:	e8830000 	lwi	r4, r3, 0
200346cc:	30840001 	addik	r4, r4, 1
200346d0:	f8830000 	swi	r4, r3, 0
}
200346d4:	10330000 	addk	r1, r19, r0
200346d8:	ea610004 	lwi	r19, r1, 4
200346dc:	30210008 	addik	r1, r1, 8
200346e0:	b60f0008 	rtsd	r15, 8
200346e4:	80000000 	or	r0, r0, r0

200346e8 <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200346e8:	3021fff8 	addik	r1, r1, -8
200346ec:	fa610004 	swi	r19, r1, 4
200346f0:	12610000 	addk	r19, r1, r0
200346f4:	f8b3000c 	swi	r5, r19, 12
200346f8:	f8d30010 	swi	r6, r19, 16
200346fc:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20034700:	e873000c 	lwi	r3, r19, 12
20034704:	e8630010 	lwi	r3, r3, 16
20034708:	e8830000 	lwi	r4, r3, 0
2003470c:	e873000c 	lwi	r3, r19, 12
20034710:	e8a3000c 	lwi	r5, r3, 12
20034714:	e8730010 	lwi	r3, r19, 16
20034718:	64630402 	bslli	r3, r3, 2
2003471c:	10651800 	addk	r3, r5, r3
20034720:	e8630000 	lwi	r3, r3, 0
20034724:	14a32000 	rsubk	r5, r3, r4
20034728:	30600001 	addik	r3, r0, 1
2003472c:	e8930014 	lwi	r4, r19, 20
20034730:	16442803 	cmpu	r18, r4, r5
20034734:	bcb20008 	bgei	r18, 8		// 2003473c
20034738:	10600000 	addk	r3, r0, r0
2003473c:	a46300ff 	andi	r3, r3, 255
}
20034740:	10330000 	addk	r1, r19, r0
20034744:	ea610004 	lwi	r19, r1, 4
20034748:	30210008 	addik	r1, r1, 8
2003474c:	b60f0008 	rtsd	r15, 8
20034750:	80000000 	or	r0, r0, r0

20034754 <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20034754:	3021fff8 	addik	r1, r1, -8
20034758:	fa610004 	swi	r19, r1, 4
2003475c:	12610000 	addk	r19, r1, r0
20034760:	f8b3000c 	swi	r5, r19, 12
20034764:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20034768:	e873000c 	lwi	r3, r19, 12
2003476c:	e8630010 	lwi	r3, r3, 16
20034770:	e8830000 	lwi	r4, r3, 0
20034774:	e873000c 	lwi	r3, r19, 12
20034778:	e8a3000c 	lwi	r5, r3, 12
2003477c:	e8730010 	lwi	r3, r19, 16
20034780:	64630402 	bslli	r3, r3, 2
20034784:	10651800 	addk	r3, r5, r3
20034788:	e8630000 	lwi	r3, r3, 0
2003478c:	14632000 	rsubk	r3, r3, r4
}
20034790:	10330000 	addk	r1, r19, r0
20034794:	ea610004 	lwi	r19, r1, 4
20034798:	30210008 	addik	r1, r1, 8
2003479c:	b60f0008 	rtsd	r15, 8
200347a0:	80000000 	or	r0, r0, r0

200347a4 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200347a4:	3021fff4 	addik	r1, r1, -12
200347a8:	fa610008 	swi	r19, r1, 8
200347ac:	12610000 	addk	r19, r1, r0
200347b0:	f8b30010 	swi	r5, r19, 16
200347b4:	f8d30014 	swi	r6, r19, 20
200347b8:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200347bc:	f8130004 	swi	r0, r19, 4
200347c0:	b800005c 	bri	92		// 2003481c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200347c4:	e8730010 	lwi	r3, r19, 16
200347c8:	e8830000 	lwi	r4, r3, 0
200347cc:	e8730010 	lwi	r3, r19, 16
200347d0:	e8a3000c 	lwi	r5, r3, 12
200347d4:	e8730004 	lwi	r3, r19, 4
200347d8:	64630402 	bslli	r3, r3, 2
200347dc:	10651800 	addk	r3, r5, r3
200347e0:	e8a30000 	lwi	r5, r3, 0
200347e4:	e8730010 	lwi	r3, r19, 16
200347e8:	e8630010 	lwi	r3, r3, 16
200347ec:	e8630000 	lwi	r3, r3, 0
200347f0:	14632800 	rsubk	r3, r3, r5
200347f4:	10641800 	addk	r3, r4, r3
200347f8:	30830001 	addik	r4, r3, 1
200347fc:	e8730018 	lwi	r3, r19, 24
20034800:	16441803 	cmpu	r18, r4, r3
20034804:	bc52000c 	blti	r18, 12		// 20034810
            return 0;
20034808:	10600000 	addk	r3, r0, r0
2003480c:	b8000024 	bri	36		// 20034830
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20034810:	e8730004 	lwi	r3, r19, 4
20034814:	30630001 	addik	r3, r3, 1
20034818:	f8730004 	swi	r3, r19, 4
2003481c:	e8930004 	lwi	r4, r19, 4
20034820:	e8730014 	lwi	r3, r19, 20
20034824:	16432003 	cmpu	r18, r3, r4
20034828:	bc52ff9c 	blti	r18, -100		// 200347c4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003482c:	30600001 	addik	r3, r0, 1
}
20034830:	10330000 	addk	r1, r19, r0
20034834:	ea610008 	lwi	r19, r1, 8
20034838:	3021000c 	addik	r1, r1, 12
2003483c:	b60f0008 	rtsd	r15, 8
20034840:	80000000 	or	r0, r0, r0

20034844 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20034844:	3021ffec 	addik	r1, r1, -20
20034848:	fa610010 	swi	r19, r1, 16
2003484c:	12610000 	addk	r19, r1, r0
20034850:	f8b30018 	swi	r5, r19, 24
20034854:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20034858:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003485c:	f8130004 	swi	r0, r19, 4
20034860:	b8000054 	bri	84		// 200348b4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20034864:	e8730018 	lwi	r3, r19, 24
20034868:	e8630010 	lwi	r3, r3, 16
2003486c:	e8830000 	lwi	r4, r3, 0
20034870:	e8730018 	lwi	r3, r19, 24
20034874:	e8a3000c 	lwi	r5, r3, 12
20034878:	e8730004 	lwi	r3, r19, 4
2003487c:	64630402 	bslli	r3, r3, 2
20034880:	10651800 	addk	r3, r5, r3
20034884:	e8630000 	lwi	r3, r3, 0
20034888:	14632000 	rsubk	r3, r3, r4
2003488c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20034890:	e8930008 	lwi	r4, r19, 8
20034894:	e873000c 	lwi	r3, r19, 12
20034898:	16441803 	cmpu	r18, r4, r3
2003489c:	bcb20008 	bgei	r18, 8		// 200348a4
200348a0:	10640000 	addk	r3, r4, r0
200348a4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200348a8:	e8730004 	lwi	r3, r19, 4
200348ac:	30630001 	addik	r3, r3, 1
200348b0:	f8730004 	swi	r3, r19, 4
200348b4:	e8930004 	lwi	r4, r19, 4
200348b8:	e873001c 	lwi	r3, r19, 28
200348bc:	16432003 	cmpu	r18, r3, r4
200348c0:	bc52ffa4 	blti	r18, -92		// 20034864
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200348c4:	e8730018 	lwi	r3, r19, 24
200348c8:	e8830000 	lwi	r4, r3, 0
200348cc:	e8730008 	lwi	r3, r19, 8
200348d0:	14632000 	rsubk	r3, r3, r4
}
200348d4:	10330000 	addk	r1, r19, r0
200348d8:	ea610010 	lwi	r19, r1, 16
200348dc:	30210014 	addik	r1, r1, 20
200348e0:	b60f0008 	rtsd	r15, 8
200348e4:	80000000 	or	r0, r0, r0

200348e8 <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200348e8:	3021fff4 	addik	r1, r1, -12
200348ec:	fa610008 	swi	r19, r1, 8
200348f0:	12610000 	addk	r19, r1, r0
200348f4:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
200348f8:	e8730010 	lwi	r3, r19, 16
200348fc:	e8630010 	lwi	r3, r3, 16
20034900:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20034904:	f8130004 	swi	r0, r19, 4
20034908:	b8000028 	bri	40		// 20034930
        fifo->read_inds[i] = 0;
2003490c:	e8730010 	lwi	r3, r19, 16
20034910:	e883000c 	lwi	r4, r3, 12
20034914:	e8730004 	lwi	r3, r19, 4
20034918:	64630402 	bslli	r3, r3, 2
2003491c:	10641800 	addk	r3, r4, r3
20034920:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20034924:	e8730004 	lwi	r3, r19, 4
20034928:	30630001 	addik	r3, r3, 1
2003492c:	f8730004 	swi	r3, r19, 4
20034930:	e8730010 	lwi	r3, r19, 16
20034934:	e8830008 	lwi	r4, r3, 8
20034938:	e8730004 	lwi	r3, r19, 4
2003493c:	16441803 	cmpu	r18, r4, r3
20034940:	bc52ffcc 	blti	r18, -52		// 2003490c
        fifo->read_inds[i] = 0;
    }
}
20034944:	10330000 	addk	r1, r19, r0
20034948:	ea610008 	lwi	r19, r1, 8
2003494c:	3021000c 	addik	r1, r1, 12
20034950:	b60f0008 	rtsd	r15, 8
20034954:	80000000 	or	r0, r0, r0

20034958 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20034958:	3021fff4 	addik	r1, r1, -12
2003495c:	fa610008 	swi	r19, r1, 8
20034960:	12610000 	addk	r19, r1, r0
20034964:	f8b30010 	swi	r5, r19, 16
20034968:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003496c:	e8730010 	lwi	r3, r19, 16
20034970:	e8830004 	lwi	r4, r3, 4
20034974:	e8730010 	lwi	r3, r19, 16
20034978:	e8a3000c 	lwi	r5, r3, 12
2003497c:	e8730014 	lwi	r3, r19, 20
20034980:	64630402 	bslli	r3, r3, 2
20034984:	10651800 	addk	r3, r5, r3
20034988:	e8a30000 	lwi	r5, r3, 0
2003498c:	e8730010 	lwi	r3, r19, 16
20034990:	e8630000 	lwi	r3, r3, 0
20034994:	3063ffff 	addik	r3, r3, -1
20034998:	84651800 	and	r3, r5, r3
2003499c:	10631800 	addk	r3, r3, r3
200349a0:	10641800 	addk	r3, r4, r3
200349a4:	e4630000 	lhui	r3, r3, 0
200349a8:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200349ac:	e8730010 	lwi	r3, r19, 16
200349b0:	e883000c 	lwi	r4, r3, 12
200349b4:	e8730014 	lwi	r3, r19, 20
200349b8:	64630402 	bslli	r3, r3, 2
200349bc:	10641800 	addk	r3, r4, r3
200349c0:	e8830000 	lwi	r4, r3, 0
200349c4:	30840001 	addik	r4, r4, 1
200349c8:	f8830000 	swi	r4, r3, 0
    return value;
200349cc:	e4730004 	lhui	r3, r19, 4
200349d0:	90630061 	sext16	r3, r3
}
200349d4:	10330000 	addk	r1, r19, r0
200349d8:	ea610008 	lwi	r19, r1, 8
200349dc:	3021000c 	addik	r1, r1, 12
200349e0:	b60f0008 	rtsd	r15, 8
200349e4:	80000000 	or	r0, r0, r0

200349e8 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200349e8:	3021fff8 	addik	r1, r1, -8
200349ec:	fa610004 	swi	r19, r1, 4
200349f0:	12610000 	addk	r19, r1, r0
200349f4:	f8b3000c 	swi	r5, r19, 12
200349f8:	10660000 	addk	r3, r6, r0
200349fc:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20034a00:	e873000c 	lwi	r3, r19, 12
20034a04:	e8830004 	lwi	r4, r3, 4
20034a08:	e873000c 	lwi	r3, r19, 12
20034a0c:	e8630010 	lwi	r3, r3, 16
20034a10:	e8a30000 	lwi	r5, r3, 0
20034a14:	e873000c 	lwi	r3, r19, 12
20034a18:	e8630000 	lwi	r3, r3, 0
20034a1c:	3063ffff 	addik	r3, r3, -1
20034a20:	84651800 	and	r3, r5, r3
20034a24:	10631800 	addk	r3, r3, r3
20034a28:	10641800 	addk	r3, r4, r3
20034a2c:	e4930010 	lhui	r4, r19, 16
20034a30:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20034a34:	e873000c 	lwi	r3, r19, 12
20034a38:	e8630010 	lwi	r3, r3, 16
20034a3c:	e8830000 	lwi	r4, r3, 0
20034a40:	30840001 	addik	r4, r4, 1
20034a44:	f8830000 	swi	r4, r3, 0
}
20034a48:	10330000 	addk	r1, r19, r0
20034a4c:	ea610004 	lwi	r19, r1, 4
20034a50:	30210008 	addik	r1, r1, 8
20034a54:	b60f0008 	rtsd	r15, 8
20034a58:	80000000 	or	r0, r0, r0

20034a5c <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20034a5c:	3021fff8 	addik	r1, r1, -8
20034a60:	fa610004 	swi	r19, r1, 4
20034a64:	12610000 	addk	r19, r1, r0
20034a68:	f8b3000c 	swi	r5, r19, 12
20034a6c:	f8d30010 	swi	r6, r19, 16
20034a70:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20034a74:	e873000c 	lwi	r3, r19, 12
20034a78:	e8630010 	lwi	r3, r3, 16
20034a7c:	e8830000 	lwi	r4, r3, 0
20034a80:	e873000c 	lwi	r3, r19, 12
20034a84:	e8a3000c 	lwi	r5, r3, 12
20034a88:	e8730010 	lwi	r3, r19, 16
20034a8c:	64630402 	bslli	r3, r3, 2
20034a90:	10651800 	addk	r3, r5, r3
20034a94:	e8630000 	lwi	r3, r3, 0
20034a98:	14a32000 	rsubk	r5, r3, r4
20034a9c:	30600001 	addik	r3, r0, 1
20034aa0:	e8930014 	lwi	r4, r19, 20
20034aa4:	16442803 	cmpu	r18, r4, r5
20034aa8:	bcb20008 	bgei	r18, 8		// 20034ab0
20034aac:	10600000 	addk	r3, r0, r0
20034ab0:	a46300ff 	andi	r3, r3, 255
}
20034ab4:	10330000 	addk	r1, r19, r0
20034ab8:	ea610004 	lwi	r19, r1, 4
20034abc:	30210008 	addik	r1, r1, 8
20034ac0:	b60f0008 	rtsd	r15, 8
20034ac4:	80000000 	or	r0, r0, r0

20034ac8 <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20034ac8:	3021fff8 	addik	r1, r1, -8
20034acc:	fa610004 	swi	r19, r1, 4
20034ad0:	12610000 	addk	r19, r1, r0
20034ad4:	f8b3000c 	swi	r5, r19, 12
20034ad8:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20034adc:	e873000c 	lwi	r3, r19, 12
20034ae0:	e8630010 	lwi	r3, r3, 16
20034ae4:	e8830000 	lwi	r4, r3, 0
20034ae8:	e873000c 	lwi	r3, r19, 12
20034aec:	e8a3000c 	lwi	r5, r3, 12
20034af0:	e8730010 	lwi	r3, r19, 16
20034af4:	64630402 	bslli	r3, r3, 2
20034af8:	10651800 	addk	r3, r5, r3
20034afc:	e8630000 	lwi	r3, r3, 0
20034b00:	14632000 	rsubk	r3, r3, r4
}
20034b04:	10330000 	addk	r1, r19, r0
20034b08:	ea610004 	lwi	r19, r1, 4
20034b0c:	30210008 	addik	r1, r1, 8
20034b10:	b60f0008 	rtsd	r15, 8
20034b14:	80000000 	or	r0, r0, r0

20034b18 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20034b18:	3021fff4 	addik	r1, r1, -12
20034b1c:	fa610008 	swi	r19, r1, 8
20034b20:	12610000 	addk	r19, r1, r0
20034b24:	f8b30010 	swi	r5, r19, 16
20034b28:	f8d30014 	swi	r6, r19, 20
20034b2c:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20034b30:	f8130004 	swi	r0, r19, 4
20034b34:	b800005c 	bri	92		// 20034b90
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20034b38:	e8730010 	lwi	r3, r19, 16
20034b3c:	e8830000 	lwi	r4, r3, 0
20034b40:	e8730010 	lwi	r3, r19, 16
20034b44:	e8a3000c 	lwi	r5, r3, 12
20034b48:	e8730004 	lwi	r3, r19, 4
20034b4c:	64630402 	bslli	r3, r3, 2
20034b50:	10651800 	addk	r3, r5, r3
20034b54:	e8a30000 	lwi	r5, r3, 0
20034b58:	e8730010 	lwi	r3, r19, 16
20034b5c:	e8630010 	lwi	r3, r3, 16
20034b60:	e8630000 	lwi	r3, r3, 0
20034b64:	14632800 	rsubk	r3, r3, r5
20034b68:	10641800 	addk	r3, r4, r3
20034b6c:	30830001 	addik	r4, r3, 1
20034b70:	e8730018 	lwi	r3, r19, 24
20034b74:	16441803 	cmpu	r18, r4, r3
20034b78:	bc52000c 	blti	r18, 12		// 20034b84
            return 0;
20034b7c:	10600000 	addk	r3, r0, r0
20034b80:	b8000024 	bri	36		// 20034ba4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20034b84:	e8730004 	lwi	r3, r19, 4
20034b88:	30630001 	addik	r3, r3, 1
20034b8c:	f8730004 	swi	r3, r19, 4
20034b90:	e8930004 	lwi	r4, r19, 4
20034b94:	e8730014 	lwi	r3, r19, 20
20034b98:	16432003 	cmpu	r18, r3, r4
20034b9c:	bc52ff9c 	blti	r18, -100		// 20034b38
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20034ba0:	30600001 	addik	r3, r0, 1
}
20034ba4:	10330000 	addk	r1, r19, r0
20034ba8:	ea610008 	lwi	r19, r1, 8
20034bac:	3021000c 	addik	r1, r1, 12
20034bb0:	b60f0008 	rtsd	r15, 8
20034bb4:	80000000 	or	r0, r0, r0

20034bb8 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20034bb8:	3021ffec 	addik	r1, r1, -20
20034bbc:	fa610010 	swi	r19, r1, 16
20034bc0:	12610000 	addk	r19, r1, r0
20034bc4:	f8b30018 	swi	r5, r19, 24
20034bc8:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20034bcc:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20034bd0:	f8130004 	swi	r0, r19, 4
20034bd4:	b8000054 	bri	84		// 20034c28
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20034bd8:	e8730018 	lwi	r3, r19, 24
20034bdc:	e8630010 	lwi	r3, r3, 16
20034be0:	e8830000 	lwi	r4, r3, 0
20034be4:	e8730018 	lwi	r3, r19, 24
20034be8:	e8a3000c 	lwi	r5, r3, 12
20034bec:	e8730004 	lwi	r3, r19, 4
20034bf0:	64630402 	bslli	r3, r3, 2
20034bf4:	10651800 	addk	r3, r5, r3
20034bf8:	e8630000 	lwi	r3, r3, 0
20034bfc:	14632000 	rsubk	r3, r3, r4
20034c00:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20034c04:	e8930008 	lwi	r4, r19, 8
20034c08:	e873000c 	lwi	r3, r19, 12
20034c0c:	16441803 	cmpu	r18, r4, r3
20034c10:	bcb20008 	bgei	r18, 8		// 20034c18
20034c14:	10640000 	addk	r3, r4, r0
20034c18:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20034c1c:	e8730004 	lwi	r3, r19, 4
20034c20:	30630001 	addik	r3, r3, 1
20034c24:	f8730004 	swi	r3, r19, 4
20034c28:	e8930004 	lwi	r4, r19, 4
20034c2c:	e873001c 	lwi	r3, r19, 28
20034c30:	16432003 	cmpu	r18, r3, r4
20034c34:	bc52ffa4 	blti	r18, -92		// 20034bd8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20034c38:	e8730018 	lwi	r3, r19, 24
20034c3c:	e8830000 	lwi	r4, r3, 0
20034c40:	e8730008 	lwi	r3, r19, 8
20034c44:	14632000 	rsubk	r3, r3, r4
}
20034c48:	10330000 	addk	r1, r19, r0
20034c4c:	ea610010 	lwi	r19, r1, 16
20034c50:	30210014 	addik	r1, r1, 20
20034c54:	b60f0008 	rtsd	r15, 8
20034c58:	80000000 	or	r0, r0, r0

20034c5c <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20034c5c:	3021fff4 	addik	r1, r1, -12
20034c60:	fa610008 	swi	r19, r1, 8
20034c64:	12610000 	addk	r19, r1, r0
20034c68:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20034c6c:	e8730010 	lwi	r3, r19, 16
20034c70:	e8630010 	lwi	r3, r3, 16
20034c74:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20034c78:	f8130004 	swi	r0, r19, 4
20034c7c:	b8000028 	bri	40		// 20034ca4
        fifo->read_inds[i] = 0;
20034c80:	e8730010 	lwi	r3, r19, 16
20034c84:	e883000c 	lwi	r4, r3, 12
20034c88:	e8730004 	lwi	r3, r19, 4
20034c8c:	64630402 	bslli	r3, r3, 2
20034c90:	10641800 	addk	r3, r4, r3
20034c94:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20034c98:	e8730004 	lwi	r3, r19, 4
20034c9c:	30630001 	addik	r3, r3, 1
20034ca0:	f8730004 	swi	r3, r19, 4
20034ca4:	e8730010 	lwi	r3, r19, 16
20034ca8:	e8830008 	lwi	r4, r3, 8
20034cac:	e8730004 	lwi	r3, r19, 4
20034cb0:	16441803 	cmpu	r18, r4, r3
20034cb4:	bc52ffcc 	blti	r18, -52		// 20034c80
        fifo->read_inds[i] = 0;
    }
}
20034cb8:	10330000 	addk	r1, r19, r0
20034cbc:	ea610008 	lwi	r19, r1, 8
20034cc0:	3021000c 	addik	r1, r1, 12
20034cc4:	b60f0008 	rtsd	r15, 8
20034cc8:	80000000 	or	r0, r0, r0

20034ccc <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20034ccc:	3021fff4 	addik	r1, r1, -12
20034cd0:	fa610008 	swi	r19, r1, 8
20034cd4:	12610000 	addk	r19, r1, r0
20034cd8:	f8b30010 	swi	r5, r19, 16
20034cdc:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20034ce0:	e8730010 	lwi	r3, r19, 16
20034ce4:	e8830004 	lwi	r4, r3, 4
20034ce8:	e8730010 	lwi	r3, r19, 16
20034cec:	e8a3000c 	lwi	r5, r3, 12
20034cf0:	e8730014 	lwi	r3, r19, 20
20034cf4:	64630402 	bslli	r3, r3, 2
20034cf8:	10651800 	addk	r3, r5, r3
20034cfc:	e8a30000 	lwi	r5, r3, 0
20034d00:	e8730010 	lwi	r3, r19, 16
20034d04:	e8630000 	lwi	r3, r3, 0
20034d08:	3063ffff 	addik	r3, r3, -1
20034d0c:	84651800 	and	r3, r5, r3
20034d10:	64630402 	bslli	r3, r3, 2
20034d14:	10641800 	addk	r3, r4, r3
20034d18:	e8630000 	lwi	r3, r3, 0
20034d1c:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20034d20:	e8730010 	lwi	r3, r19, 16
20034d24:	e883000c 	lwi	r4, r3, 12
20034d28:	e8730014 	lwi	r3, r19, 20
20034d2c:	64630402 	bslli	r3, r3, 2
20034d30:	10641800 	addk	r3, r4, r3
20034d34:	e8830000 	lwi	r4, r3, 0
20034d38:	30840001 	addik	r4, r4, 1
20034d3c:	f8830000 	swi	r4, r3, 0
    return value;
20034d40:	e8730004 	lwi	r3, r19, 4
}
20034d44:	10330000 	addk	r1, r19, r0
20034d48:	ea610008 	lwi	r19, r1, 8
20034d4c:	3021000c 	addik	r1, r1, 12
20034d50:	b60f0008 	rtsd	r15, 8
20034d54:	80000000 	or	r0, r0, r0

20034d58 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20034d58:	3021fff8 	addik	r1, r1, -8
20034d5c:	fa610004 	swi	r19, r1, 4
20034d60:	12610000 	addk	r19, r1, r0
20034d64:	f8b3000c 	swi	r5, r19, 12
20034d68:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20034d6c:	e873000c 	lwi	r3, r19, 12
20034d70:	e8830004 	lwi	r4, r3, 4
20034d74:	e873000c 	lwi	r3, r19, 12
20034d78:	e8630010 	lwi	r3, r3, 16
20034d7c:	e8a30000 	lwi	r5, r3, 0
20034d80:	e873000c 	lwi	r3, r19, 12
20034d84:	e8630000 	lwi	r3, r3, 0
20034d88:	3063ffff 	addik	r3, r3, -1
20034d8c:	84651800 	and	r3, r5, r3
20034d90:	64630402 	bslli	r3, r3, 2
20034d94:	10641800 	addk	r3, r4, r3
20034d98:	e8930010 	lwi	r4, r19, 16
20034d9c:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20034da0:	e873000c 	lwi	r3, r19, 12
20034da4:	e8630010 	lwi	r3, r3, 16
20034da8:	e8830000 	lwi	r4, r3, 0
20034dac:	30840001 	addik	r4, r4, 1
20034db0:	f8830000 	swi	r4, r3, 0
}
20034db4:	10330000 	addk	r1, r19, r0
20034db8:	ea610004 	lwi	r19, r1, 4
20034dbc:	30210008 	addik	r1, r1, 8
20034dc0:	b60f0008 	rtsd	r15, 8
20034dc4:	80000000 	or	r0, r0, r0

20034dc8 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20034dc8:	3021fff8 	addik	r1, r1, -8
20034dcc:	fa610004 	swi	r19, r1, 4
20034dd0:	12610000 	addk	r19, r1, r0
20034dd4:	f8b3000c 	swi	r5, r19, 12
20034dd8:	f8d30010 	swi	r6, r19, 16
20034ddc:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20034de0:	e873000c 	lwi	r3, r19, 12
20034de4:	e8630010 	lwi	r3, r3, 16
20034de8:	e8830000 	lwi	r4, r3, 0
20034dec:	e873000c 	lwi	r3, r19, 12
20034df0:	e8a3000c 	lwi	r5, r3, 12
20034df4:	e8730010 	lwi	r3, r19, 16
20034df8:	64630402 	bslli	r3, r3, 2
20034dfc:	10651800 	addk	r3, r5, r3
20034e00:	e8630000 	lwi	r3, r3, 0
20034e04:	14a32000 	rsubk	r5, r3, r4
20034e08:	30600001 	addik	r3, r0, 1
20034e0c:	e8930014 	lwi	r4, r19, 20
20034e10:	16442803 	cmpu	r18, r4, r5
20034e14:	bcb20008 	bgei	r18, 8		// 20034e1c
20034e18:	10600000 	addk	r3, r0, r0
20034e1c:	a46300ff 	andi	r3, r3, 255
}
20034e20:	10330000 	addk	r1, r19, r0
20034e24:	ea610004 	lwi	r19, r1, 4
20034e28:	30210008 	addik	r1, r1, 8
20034e2c:	b60f0008 	rtsd	r15, 8
20034e30:	80000000 	or	r0, r0, r0

20034e34 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20034e34:	3021fff8 	addik	r1, r1, -8
20034e38:	fa610004 	swi	r19, r1, 4
20034e3c:	12610000 	addk	r19, r1, r0
20034e40:	f8b3000c 	swi	r5, r19, 12
20034e44:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20034e48:	e873000c 	lwi	r3, r19, 12
20034e4c:	e8630010 	lwi	r3, r3, 16
20034e50:	e8830000 	lwi	r4, r3, 0
20034e54:	e873000c 	lwi	r3, r19, 12
20034e58:	e8a3000c 	lwi	r5, r3, 12
20034e5c:	e8730010 	lwi	r3, r19, 16
20034e60:	64630402 	bslli	r3, r3, 2
20034e64:	10651800 	addk	r3, r5, r3
20034e68:	e8630000 	lwi	r3, r3, 0
20034e6c:	14632000 	rsubk	r3, r3, r4
}
20034e70:	10330000 	addk	r1, r19, r0
20034e74:	ea610004 	lwi	r19, r1, 4
20034e78:	30210008 	addik	r1, r1, 8
20034e7c:	b60f0008 	rtsd	r15, 8
20034e80:	80000000 	or	r0, r0, r0

20034e84 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20034e84:	3021fff4 	addik	r1, r1, -12
20034e88:	fa610008 	swi	r19, r1, 8
20034e8c:	12610000 	addk	r19, r1, r0
20034e90:	f8b30010 	swi	r5, r19, 16
20034e94:	f8d30014 	swi	r6, r19, 20
20034e98:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20034e9c:	f8130004 	swi	r0, r19, 4
20034ea0:	b800005c 	bri	92		// 20034efc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20034ea4:	e8730010 	lwi	r3, r19, 16
20034ea8:	e8830000 	lwi	r4, r3, 0
20034eac:	e8730010 	lwi	r3, r19, 16
20034eb0:	e8a3000c 	lwi	r5, r3, 12
20034eb4:	e8730004 	lwi	r3, r19, 4
20034eb8:	64630402 	bslli	r3, r3, 2
20034ebc:	10651800 	addk	r3, r5, r3
20034ec0:	e8a30000 	lwi	r5, r3, 0
20034ec4:	e8730010 	lwi	r3, r19, 16
20034ec8:	e8630010 	lwi	r3, r3, 16
20034ecc:	e8630000 	lwi	r3, r3, 0
20034ed0:	14632800 	rsubk	r3, r3, r5
20034ed4:	10641800 	addk	r3, r4, r3
20034ed8:	30830001 	addik	r4, r3, 1
20034edc:	e8730018 	lwi	r3, r19, 24
20034ee0:	16441803 	cmpu	r18, r4, r3
20034ee4:	bc52000c 	blti	r18, 12		// 20034ef0
            return 0;
20034ee8:	10600000 	addk	r3, r0, r0
20034eec:	b8000024 	bri	36		// 20034f10
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20034ef0:	e8730004 	lwi	r3, r19, 4
20034ef4:	30630001 	addik	r3, r3, 1
20034ef8:	f8730004 	swi	r3, r19, 4
20034efc:	e8930004 	lwi	r4, r19, 4
20034f00:	e8730014 	lwi	r3, r19, 20
20034f04:	16432003 	cmpu	r18, r3, r4
20034f08:	bc52ff9c 	blti	r18, -100		// 20034ea4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20034f0c:	30600001 	addik	r3, r0, 1
}
20034f10:	10330000 	addk	r1, r19, r0
20034f14:	ea610008 	lwi	r19, r1, 8
20034f18:	3021000c 	addik	r1, r1, 12
20034f1c:	b60f0008 	rtsd	r15, 8
20034f20:	80000000 	or	r0, r0, r0

20034f24 <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20034f24:	3021ffec 	addik	r1, r1, -20
20034f28:	fa610010 	swi	r19, r1, 16
20034f2c:	12610000 	addk	r19, r1, r0
20034f30:	f8b30018 	swi	r5, r19, 24
20034f34:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20034f38:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20034f3c:	f8130004 	swi	r0, r19, 4
20034f40:	b8000054 	bri	84		// 20034f94
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20034f44:	e8730018 	lwi	r3, r19, 24
20034f48:	e8630010 	lwi	r3, r3, 16
20034f4c:	e8830000 	lwi	r4, r3, 0
20034f50:	e8730018 	lwi	r3, r19, 24
20034f54:	e8a3000c 	lwi	r5, r3, 12
20034f58:	e8730004 	lwi	r3, r19, 4
20034f5c:	64630402 	bslli	r3, r3, 2
20034f60:	10651800 	addk	r3, r5, r3
20034f64:	e8630000 	lwi	r3, r3, 0
20034f68:	14632000 	rsubk	r3, r3, r4
20034f6c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20034f70:	e8930008 	lwi	r4, r19, 8
20034f74:	e873000c 	lwi	r3, r19, 12
20034f78:	16441803 	cmpu	r18, r4, r3
20034f7c:	bcb20008 	bgei	r18, 8		// 20034f84
20034f80:	10640000 	addk	r3, r4, r0
20034f84:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20034f88:	e8730004 	lwi	r3, r19, 4
20034f8c:	30630001 	addik	r3, r3, 1
20034f90:	f8730004 	swi	r3, r19, 4
20034f94:	e8930004 	lwi	r4, r19, 4
20034f98:	e873001c 	lwi	r3, r19, 28
20034f9c:	16432003 	cmpu	r18, r3, r4
20034fa0:	bc52ffa4 	blti	r18, -92		// 20034f44
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20034fa4:	e8730018 	lwi	r3, r19, 24
20034fa8:	e8830000 	lwi	r4, r3, 0
20034fac:	e8730008 	lwi	r3, r19, 8
20034fb0:	14632000 	rsubk	r3, r3, r4
}
20034fb4:	10330000 	addk	r1, r19, r0
20034fb8:	ea610010 	lwi	r19, r1, 16
20034fbc:	30210014 	addik	r1, r1, 20
20034fc0:	b60f0008 	rtsd	r15, 8
20034fc4:	80000000 	or	r0, r0, r0

20034fc8 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20034fc8:	3021fff4 	addik	r1, r1, -12
20034fcc:	fa610008 	swi	r19, r1, 8
20034fd0:	12610000 	addk	r19, r1, r0
20034fd4:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20034fd8:	e8730010 	lwi	r3, r19, 16
20034fdc:	e8630010 	lwi	r3, r3, 16
20034fe0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20034fe4:	f8130004 	swi	r0, r19, 4
20034fe8:	b8000028 	bri	40		// 20035010
        fifo->read_inds[i] = 0;
20034fec:	e8730010 	lwi	r3, r19, 16
20034ff0:	e883000c 	lwi	r4, r3, 12
20034ff4:	e8730004 	lwi	r3, r19, 4
20034ff8:	64630402 	bslli	r3, r3, 2
20034ffc:	10641800 	addk	r3, r4, r3
20035000:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20035004:	e8730004 	lwi	r3, r19, 4
20035008:	30630001 	addik	r3, r3, 1
2003500c:	f8730004 	swi	r3, r19, 4
20035010:	e8730010 	lwi	r3, r19, 16
20035014:	e8830008 	lwi	r4, r3, 8
20035018:	e8730004 	lwi	r3, r19, 4
2003501c:	16441803 	cmpu	r18, r4, r3
20035020:	bc52ffcc 	blti	r18, -52		// 20034fec
        fifo->read_inds[i] = 0;
    }
}
20035024:	10330000 	addk	r1, r19, r0
20035028:	ea610008 	lwi	r19, r1, 8
2003502c:	3021000c 	addik	r1, r1, 12
20035030:	b60f0008 	rtsd	r15, 8
20035034:	80000000 	or	r0, r0, r0

20035038 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20035038:	3021fff0 	addik	r1, r1, -16
2003503c:	fa61000c 	swi	r19, r1, 12
20035040:	12610000 	addk	r19, r1, r0
20035044:	f8b30014 	swi	r5, r19, 20
20035048:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003504c:	e8730014 	lwi	r3, r19, 20
20035050:	e8830004 	lwi	r4, r3, 4
20035054:	e8730014 	lwi	r3, r19, 20
20035058:	e8a3000c 	lwi	r5, r3, 12
2003505c:	e8730018 	lwi	r3, r19, 24
20035060:	64630402 	bslli	r3, r3, 2
20035064:	10651800 	addk	r3, r5, r3
20035068:	e8a30000 	lwi	r5, r3, 0
2003506c:	e8730014 	lwi	r3, r19, 20
20035070:	e8630000 	lwi	r3, r3, 0
20035074:	3063ffff 	addik	r3, r3, -1
20035078:	84651800 	and	r3, r5, r3
2003507c:	64630403 	bslli	r3, r3, 3
20035080:	10641800 	addk	r3, r4, r3
20035084:	e8830000 	lwi	r4, r3, 0
20035088:	e8a30004 	lwi	r5, r3, 4
2003508c:	f8930004 	swi	r4, r19, 4
20035090:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20035094:	e8730014 	lwi	r3, r19, 20
20035098:	e883000c 	lwi	r4, r3, 12
2003509c:	e8730018 	lwi	r3, r19, 24
200350a0:	64630402 	bslli	r3, r3, 2
200350a4:	10641800 	addk	r3, r4, r3
200350a8:	e8830000 	lwi	r4, r3, 0
200350ac:	30840001 	addik	r4, r4, 1
200350b0:	f8830000 	swi	r4, r3, 0
    return value;
200350b4:	e8930004 	lwi	r4, r19, 4
200350b8:	e8b30008 	lwi	r5, r19, 8
}
200350bc:	10640000 	addk	r3, r4, r0
200350c0:	10850000 	addk	r4, r5, r0
200350c4:	10330000 	addk	r1, r19, r0
200350c8:	ea61000c 	lwi	r19, r1, 12
200350cc:	30210010 	addik	r1, r1, 16
200350d0:	b60f0008 	rtsd	r15, 8
200350d4:	80000000 	or	r0, r0, r0

200350d8 <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200350d8:	3021fff8 	addik	r1, r1, -8
200350dc:	fa610004 	swi	r19, r1, 4
200350e0:	12610000 	addk	r19, r1, r0
200350e4:	f8b3000c 	swi	r5, r19, 12
200350e8:	f8d30010 	swi	r6, r19, 16
200350ec:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200350f0:	e873000c 	lwi	r3, r19, 12
200350f4:	e8830004 	lwi	r4, r3, 4
200350f8:	e873000c 	lwi	r3, r19, 12
200350fc:	e8630010 	lwi	r3, r3, 16
20035100:	e8a30000 	lwi	r5, r3, 0
20035104:	e873000c 	lwi	r3, r19, 12
20035108:	e8630000 	lwi	r3, r3, 0
2003510c:	3063ffff 	addik	r3, r3, -1
20035110:	84651800 	and	r3, r5, r3
20035114:	64630403 	bslli	r3, r3, 3
20035118:	10641800 	addk	r3, r4, r3
2003511c:	e8930010 	lwi	r4, r19, 16
20035120:	e8b30014 	lwi	r5, r19, 20
20035124:	f8830000 	swi	r4, r3, 0
20035128:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2003512c:	e873000c 	lwi	r3, r19, 12
20035130:	e8630010 	lwi	r3, r3, 16
20035134:	e8830000 	lwi	r4, r3, 0
20035138:	30840001 	addik	r4, r4, 1
2003513c:	f8830000 	swi	r4, r3, 0
}
20035140:	10330000 	addk	r1, r19, r0
20035144:	ea610004 	lwi	r19, r1, 4
20035148:	30210008 	addik	r1, r1, 8
2003514c:	b60f0008 	rtsd	r15, 8
20035150:	80000000 	or	r0, r0, r0

20035154 <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20035154:	3021fff8 	addik	r1, r1, -8
20035158:	fa610004 	swi	r19, r1, 4
2003515c:	12610000 	addk	r19, r1, r0
20035160:	f8b3000c 	swi	r5, r19, 12
20035164:	f8d30010 	swi	r6, r19, 16
20035168:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003516c:	e873000c 	lwi	r3, r19, 12
20035170:	e8630010 	lwi	r3, r3, 16
20035174:	e8830000 	lwi	r4, r3, 0
20035178:	e873000c 	lwi	r3, r19, 12
2003517c:	e8a3000c 	lwi	r5, r3, 12
20035180:	e8730010 	lwi	r3, r19, 16
20035184:	64630402 	bslli	r3, r3, 2
20035188:	10651800 	addk	r3, r5, r3
2003518c:	e8630000 	lwi	r3, r3, 0
20035190:	14a32000 	rsubk	r5, r3, r4
20035194:	30600001 	addik	r3, r0, 1
20035198:	e8930014 	lwi	r4, r19, 20
2003519c:	16442803 	cmpu	r18, r4, r5
200351a0:	bcb20008 	bgei	r18, 8		// 200351a8
200351a4:	10600000 	addk	r3, r0, r0
200351a8:	a46300ff 	andi	r3, r3, 255
}
200351ac:	10330000 	addk	r1, r19, r0
200351b0:	ea610004 	lwi	r19, r1, 4
200351b4:	30210008 	addik	r1, r1, 8
200351b8:	b60f0008 	rtsd	r15, 8
200351bc:	80000000 	or	r0, r0, r0

200351c0 <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200351c0:	3021fff8 	addik	r1, r1, -8
200351c4:	fa610004 	swi	r19, r1, 4
200351c8:	12610000 	addk	r19, r1, r0
200351cc:	f8b3000c 	swi	r5, r19, 12
200351d0:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200351d4:	e873000c 	lwi	r3, r19, 12
200351d8:	e8630010 	lwi	r3, r3, 16
200351dc:	e8830000 	lwi	r4, r3, 0
200351e0:	e873000c 	lwi	r3, r19, 12
200351e4:	e8a3000c 	lwi	r5, r3, 12
200351e8:	e8730010 	lwi	r3, r19, 16
200351ec:	64630402 	bslli	r3, r3, 2
200351f0:	10651800 	addk	r3, r5, r3
200351f4:	e8630000 	lwi	r3, r3, 0
200351f8:	14632000 	rsubk	r3, r3, r4
}
200351fc:	10330000 	addk	r1, r19, r0
20035200:	ea610004 	lwi	r19, r1, 4
20035204:	30210008 	addik	r1, r1, 8
20035208:	b60f0008 	rtsd	r15, 8
2003520c:	80000000 	or	r0, r0, r0

20035210 <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20035210:	3021fff4 	addik	r1, r1, -12
20035214:	fa610008 	swi	r19, r1, 8
20035218:	12610000 	addk	r19, r1, r0
2003521c:	f8b30010 	swi	r5, r19, 16
20035220:	f8d30014 	swi	r6, r19, 20
20035224:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20035228:	f8130004 	swi	r0, r19, 4
2003522c:	b800005c 	bri	92		// 20035288
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20035230:	e8730010 	lwi	r3, r19, 16
20035234:	e8830000 	lwi	r4, r3, 0
20035238:	e8730010 	lwi	r3, r19, 16
2003523c:	e8a3000c 	lwi	r5, r3, 12
20035240:	e8730004 	lwi	r3, r19, 4
20035244:	64630402 	bslli	r3, r3, 2
20035248:	10651800 	addk	r3, r5, r3
2003524c:	e8a30000 	lwi	r5, r3, 0
20035250:	e8730010 	lwi	r3, r19, 16
20035254:	e8630010 	lwi	r3, r3, 16
20035258:	e8630000 	lwi	r3, r3, 0
2003525c:	14632800 	rsubk	r3, r3, r5
20035260:	10641800 	addk	r3, r4, r3
20035264:	30830001 	addik	r4, r3, 1
20035268:	e8730018 	lwi	r3, r19, 24
2003526c:	16441803 	cmpu	r18, r4, r3
20035270:	bc52000c 	blti	r18, 12		// 2003527c
            return 0;
20035274:	10600000 	addk	r3, r0, r0
20035278:	b8000024 	bri	36		// 2003529c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003527c:	e8730004 	lwi	r3, r19, 4
20035280:	30630001 	addik	r3, r3, 1
20035284:	f8730004 	swi	r3, r19, 4
20035288:	e8930004 	lwi	r4, r19, 4
2003528c:	e8730014 	lwi	r3, r19, 20
20035290:	16432003 	cmpu	r18, r3, r4
20035294:	bc52ff9c 	blti	r18, -100		// 20035230
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20035298:	30600001 	addik	r3, r0, 1
}
2003529c:	10330000 	addk	r1, r19, r0
200352a0:	ea610008 	lwi	r19, r1, 8
200352a4:	3021000c 	addik	r1, r1, 12
200352a8:	b60f0008 	rtsd	r15, 8
200352ac:	80000000 	or	r0, r0, r0

200352b0 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200352b0:	3021ffec 	addik	r1, r1, -20
200352b4:	fa610010 	swi	r19, r1, 16
200352b8:	12610000 	addk	r19, r1, r0
200352bc:	f8b30018 	swi	r5, r19, 24
200352c0:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200352c4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200352c8:	f8130004 	swi	r0, r19, 4
200352cc:	b8000054 	bri	84		// 20035320
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200352d0:	e8730018 	lwi	r3, r19, 24
200352d4:	e8630010 	lwi	r3, r3, 16
200352d8:	e8830000 	lwi	r4, r3, 0
200352dc:	e8730018 	lwi	r3, r19, 24
200352e0:	e8a3000c 	lwi	r5, r3, 12
200352e4:	e8730004 	lwi	r3, r19, 4
200352e8:	64630402 	bslli	r3, r3, 2
200352ec:	10651800 	addk	r3, r5, r3
200352f0:	e8630000 	lwi	r3, r3, 0
200352f4:	14632000 	rsubk	r3, r3, r4
200352f8:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200352fc:	e8930008 	lwi	r4, r19, 8
20035300:	e873000c 	lwi	r3, r19, 12
20035304:	16441803 	cmpu	r18, r4, r3
20035308:	bcb20008 	bgei	r18, 8		// 20035310
2003530c:	10640000 	addk	r3, r4, r0
20035310:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20035314:	e8730004 	lwi	r3, r19, 4
20035318:	30630001 	addik	r3, r3, 1
2003531c:	f8730004 	swi	r3, r19, 4
20035320:	e8930004 	lwi	r4, r19, 4
20035324:	e873001c 	lwi	r3, r19, 28
20035328:	16432003 	cmpu	r18, r3, r4
2003532c:	bc52ffa4 	blti	r18, -92		// 200352d0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20035330:	e8730018 	lwi	r3, r19, 24
20035334:	e8830000 	lwi	r4, r3, 0
20035338:	e8730008 	lwi	r3, r19, 8
2003533c:	14632000 	rsubk	r3, r3, r4
}
20035340:	10330000 	addk	r1, r19, r0
20035344:	ea610010 	lwi	r19, r1, 16
20035348:	30210014 	addik	r1, r1, 20
2003534c:	b60f0008 	rtsd	r15, 8
20035350:	80000000 	or	r0, r0, r0

20035354 <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20035354:	3021fff4 	addik	r1, r1, -12
20035358:	fa610008 	swi	r19, r1, 8
2003535c:	12610000 	addk	r19, r1, r0
20035360:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20035364:	e8730010 	lwi	r3, r19, 16
20035368:	e8630010 	lwi	r3, r3, 16
2003536c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20035370:	f8130004 	swi	r0, r19, 4
20035374:	b8000028 	bri	40		// 2003539c
        fifo->read_inds[i] = 0;
20035378:	e8730010 	lwi	r3, r19, 16
2003537c:	e883000c 	lwi	r4, r3, 12
20035380:	e8730004 	lwi	r3, r19, 4
20035384:	64630402 	bslli	r3, r3, 2
20035388:	10641800 	addk	r3, r4, r3
2003538c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20035390:	e8730004 	lwi	r3, r19, 4
20035394:	30630001 	addik	r3, r3, 1
20035398:	f8730004 	swi	r3, r19, 4
2003539c:	e8730010 	lwi	r3, r19, 16
200353a0:	e8830008 	lwi	r4, r3, 8
200353a4:	e8730004 	lwi	r3, r19, 4
200353a8:	16441803 	cmpu	r18, r4, r3
200353ac:	bc52ffcc 	blti	r18, -52		// 20035378
        fifo->read_inds[i] = 0;
    }
}
200353b0:	10330000 	addk	r1, r19, r0
200353b4:	ea610008 	lwi	r19, r1, 8
200353b8:	3021000c 	addik	r1, r1, 12
200353bc:	b60f0008 	rtsd	r15, 8
200353c0:	80000000 	or	r0, r0, r0

200353c4 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200353c4:	3021fff4 	addik	r1, r1, -12
200353c8:	fa610008 	swi	r19, r1, 8
200353cc:	12610000 	addk	r19, r1, r0
200353d0:	f8b30010 	swi	r5, r19, 16
200353d4:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200353d8:	e8730010 	lwi	r3, r19, 16
200353dc:	e8830004 	lwi	r4, r3, 4
200353e0:	e8730010 	lwi	r3, r19, 16
200353e4:	e8a3000c 	lwi	r5, r3, 12
200353e8:	e8730014 	lwi	r3, r19, 20
200353ec:	64630402 	bslli	r3, r3, 2
200353f0:	10651800 	addk	r3, r5, r3
200353f4:	e8a30000 	lwi	r5, r3, 0
200353f8:	e8730010 	lwi	r3, r19, 16
200353fc:	e8630000 	lwi	r3, r3, 0
20035400:	3063ffff 	addik	r3, r3, -1
20035404:	84651800 	and	r3, r5, r3
20035408:	10641800 	addk	r3, r4, r3
2003540c:	e0630000 	lbui	r3, r3, 0
20035410:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20035414:	e8730010 	lwi	r3, r19, 16
20035418:	e883000c 	lwi	r4, r3, 12
2003541c:	e8730014 	lwi	r3, r19, 20
20035420:	64630402 	bslli	r3, r3, 2
20035424:	10641800 	addk	r3, r4, r3
20035428:	e8830000 	lwi	r4, r3, 0
2003542c:	30840001 	addik	r4, r4, 1
20035430:	f8830000 	swi	r4, r3, 0
    return value;
20035434:	e0730004 	lbui	r3, r19, 4
}
20035438:	10330000 	addk	r1, r19, r0
2003543c:	ea610008 	lwi	r19, r1, 8
20035440:	3021000c 	addik	r1, r1, 12
20035444:	b60f0008 	rtsd	r15, 8
20035448:	80000000 	or	r0, r0, r0

2003544c <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003544c:	3021fff8 	addik	r1, r1, -8
20035450:	fa610004 	swi	r19, r1, 4
20035454:	12610000 	addk	r19, r1, r0
20035458:	f8b3000c 	swi	r5, r19, 12
2003545c:	10660000 	addk	r3, r6, r0
20035460:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20035464:	e873000c 	lwi	r3, r19, 12
20035468:	e8830004 	lwi	r4, r3, 4
2003546c:	e873000c 	lwi	r3, r19, 12
20035470:	e8630010 	lwi	r3, r3, 16
20035474:	e8a30000 	lwi	r5, r3, 0
20035478:	e873000c 	lwi	r3, r19, 12
2003547c:	e8630000 	lwi	r3, r3, 0
20035480:	3063ffff 	addik	r3, r3, -1
20035484:	84651800 	and	r3, r5, r3
20035488:	10641800 	addk	r3, r4, r3
2003548c:	e0930010 	lbui	r4, r19, 16
20035490:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20035494:	e873000c 	lwi	r3, r19, 12
20035498:	e8630010 	lwi	r3, r3, 16
2003549c:	e8830000 	lwi	r4, r3, 0
200354a0:	30840001 	addik	r4, r4, 1
200354a4:	f8830000 	swi	r4, r3, 0
}
200354a8:	10330000 	addk	r1, r19, r0
200354ac:	ea610004 	lwi	r19, r1, 4
200354b0:	30210008 	addik	r1, r1, 8
200354b4:	b60f0008 	rtsd	r15, 8
200354b8:	80000000 	or	r0, r0, r0

200354bc <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200354bc:	3021fff8 	addik	r1, r1, -8
200354c0:	fa610004 	swi	r19, r1, 4
200354c4:	12610000 	addk	r19, r1, r0
200354c8:	f8b3000c 	swi	r5, r19, 12
200354cc:	f8d30010 	swi	r6, r19, 16
200354d0:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200354d4:	e873000c 	lwi	r3, r19, 12
200354d8:	e8630010 	lwi	r3, r3, 16
200354dc:	e8830000 	lwi	r4, r3, 0
200354e0:	e873000c 	lwi	r3, r19, 12
200354e4:	e8a3000c 	lwi	r5, r3, 12
200354e8:	e8730010 	lwi	r3, r19, 16
200354ec:	64630402 	bslli	r3, r3, 2
200354f0:	10651800 	addk	r3, r5, r3
200354f4:	e8630000 	lwi	r3, r3, 0
200354f8:	14a32000 	rsubk	r5, r3, r4
200354fc:	30600001 	addik	r3, r0, 1
20035500:	e8930014 	lwi	r4, r19, 20
20035504:	16442803 	cmpu	r18, r4, r5
20035508:	bcb20008 	bgei	r18, 8		// 20035510
2003550c:	10600000 	addk	r3, r0, r0
20035510:	a46300ff 	andi	r3, r3, 255
}
20035514:	10330000 	addk	r1, r19, r0
20035518:	ea610004 	lwi	r19, r1, 4
2003551c:	30210008 	addik	r1, r1, 8
20035520:	b60f0008 	rtsd	r15, 8
20035524:	80000000 	or	r0, r0, r0

20035528 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20035528:	3021fff8 	addik	r1, r1, -8
2003552c:	fa610004 	swi	r19, r1, 4
20035530:	12610000 	addk	r19, r1, r0
20035534:	f8b3000c 	swi	r5, r19, 12
20035538:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003553c:	e873000c 	lwi	r3, r19, 12
20035540:	e8630010 	lwi	r3, r3, 16
20035544:	e8830000 	lwi	r4, r3, 0
20035548:	e873000c 	lwi	r3, r19, 12
2003554c:	e8a3000c 	lwi	r5, r3, 12
20035550:	e8730010 	lwi	r3, r19, 16
20035554:	64630402 	bslli	r3, r3, 2
20035558:	10651800 	addk	r3, r5, r3
2003555c:	e8630000 	lwi	r3, r3, 0
20035560:	14632000 	rsubk	r3, r3, r4
}
20035564:	10330000 	addk	r1, r19, r0
20035568:	ea610004 	lwi	r19, r1, 4
2003556c:	30210008 	addik	r1, r1, 8
20035570:	b60f0008 	rtsd	r15, 8
20035574:	80000000 	or	r0, r0, r0

20035578 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20035578:	3021fff4 	addik	r1, r1, -12
2003557c:	fa610008 	swi	r19, r1, 8
20035580:	12610000 	addk	r19, r1, r0
20035584:	f8b30010 	swi	r5, r19, 16
20035588:	f8d30014 	swi	r6, r19, 20
2003558c:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20035590:	f8130004 	swi	r0, r19, 4
20035594:	b800005c 	bri	92		// 200355f0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20035598:	e8730010 	lwi	r3, r19, 16
2003559c:	e8830000 	lwi	r4, r3, 0
200355a0:	e8730010 	lwi	r3, r19, 16
200355a4:	e8a3000c 	lwi	r5, r3, 12
200355a8:	e8730004 	lwi	r3, r19, 4
200355ac:	64630402 	bslli	r3, r3, 2
200355b0:	10651800 	addk	r3, r5, r3
200355b4:	e8a30000 	lwi	r5, r3, 0
200355b8:	e8730010 	lwi	r3, r19, 16
200355bc:	e8630010 	lwi	r3, r3, 16
200355c0:	e8630000 	lwi	r3, r3, 0
200355c4:	14632800 	rsubk	r3, r3, r5
200355c8:	10641800 	addk	r3, r4, r3
200355cc:	30830001 	addik	r4, r3, 1
200355d0:	e8730018 	lwi	r3, r19, 24
200355d4:	16441803 	cmpu	r18, r4, r3
200355d8:	bc52000c 	blti	r18, 12		// 200355e4
            return 0;
200355dc:	10600000 	addk	r3, r0, r0
200355e0:	b8000024 	bri	36		// 20035604
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200355e4:	e8730004 	lwi	r3, r19, 4
200355e8:	30630001 	addik	r3, r3, 1
200355ec:	f8730004 	swi	r3, r19, 4
200355f0:	e8930004 	lwi	r4, r19, 4
200355f4:	e8730014 	lwi	r3, r19, 20
200355f8:	16432003 	cmpu	r18, r3, r4
200355fc:	bc52ff9c 	blti	r18, -100		// 20035598
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20035600:	30600001 	addik	r3, r0, 1
}
20035604:	10330000 	addk	r1, r19, r0
20035608:	ea610008 	lwi	r19, r1, 8
2003560c:	3021000c 	addik	r1, r1, 12
20035610:	b60f0008 	rtsd	r15, 8
20035614:	80000000 	or	r0, r0, r0

20035618 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20035618:	3021ffec 	addik	r1, r1, -20
2003561c:	fa610010 	swi	r19, r1, 16
20035620:	12610000 	addk	r19, r1, r0
20035624:	f8b30018 	swi	r5, r19, 24
20035628:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003562c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20035630:	f8130004 	swi	r0, r19, 4
20035634:	b8000054 	bri	84		// 20035688
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20035638:	e8730018 	lwi	r3, r19, 24
2003563c:	e8630010 	lwi	r3, r3, 16
20035640:	e8830000 	lwi	r4, r3, 0
20035644:	e8730018 	lwi	r3, r19, 24
20035648:	e8a3000c 	lwi	r5, r3, 12
2003564c:	e8730004 	lwi	r3, r19, 4
20035650:	64630402 	bslli	r3, r3, 2
20035654:	10651800 	addk	r3, r5, r3
20035658:	e8630000 	lwi	r3, r3, 0
2003565c:	14632000 	rsubk	r3, r3, r4
20035660:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20035664:	e8930008 	lwi	r4, r19, 8
20035668:	e873000c 	lwi	r3, r19, 12
2003566c:	16441803 	cmpu	r18, r4, r3
20035670:	bcb20008 	bgei	r18, 8		// 20035678
20035674:	10640000 	addk	r3, r4, r0
20035678:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003567c:	e8730004 	lwi	r3, r19, 4
20035680:	30630001 	addik	r3, r3, 1
20035684:	f8730004 	swi	r3, r19, 4
20035688:	e8930004 	lwi	r4, r19, 4
2003568c:	e873001c 	lwi	r3, r19, 28
20035690:	16432003 	cmpu	r18, r3, r4
20035694:	bc52ffa4 	blti	r18, -92		// 20035638
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20035698:	e8730018 	lwi	r3, r19, 24
2003569c:	e8830000 	lwi	r4, r3, 0
200356a0:	e8730008 	lwi	r3, r19, 8
200356a4:	14632000 	rsubk	r3, r3, r4
}
200356a8:	10330000 	addk	r1, r19, r0
200356ac:	ea610010 	lwi	r19, r1, 16
200356b0:	30210014 	addik	r1, r1, 20
200356b4:	b60f0008 	rtsd	r15, 8
200356b8:	80000000 	or	r0, r0, r0

200356bc <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200356bc:	3021fff4 	addik	r1, r1, -12
200356c0:	fa610008 	swi	r19, r1, 8
200356c4:	12610000 	addk	r19, r1, r0
200356c8:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
200356cc:	e8730010 	lwi	r3, r19, 16
200356d0:	e8630010 	lwi	r3, r3, 16
200356d4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200356d8:	f8130004 	swi	r0, r19, 4
200356dc:	b8000028 	bri	40		// 20035704
        fifo->read_inds[i] = 0;
200356e0:	e8730010 	lwi	r3, r19, 16
200356e4:	e883000c 	lwi	r4, r3, 12
200356e8:	e8730004 	lwi	r3, r19, 4
200356ec:	64630402 	bslli	r3, r3, 2
200356f0:	10641800 	addk	r3, r4, r3
200356f4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200356f8:	e8730004 	lwi	r3, r19, 4
200356fc:	30630001 	addik	r3, r3, 1
20035700:	f8730004 	swi	r3, r19, 4
20035704:	e8730010 	lwi	r3, r19, 16
20035708:	e8830008 	lwi	r4, r3, 8
2003570c:	e8730004 	lwi	r3, r19, 4
20035710:	16441803 	cmpu	r18, r4, r3
20035714:	bc52ffcc 	blti	r18, -52		// 200356e0
        fifo->read_inds[i] = 0;
    }
}
20035718:	10330000 	addk	r1, r19, r0
2003571c:	ea610008 	lwi	r19, r1, 8
20035720:	3021000c 	addik	r1, r1, 12
20035724:	b60f0008 	rtsd	r15, 8
20035728:	80000000 	or	r0, r0, r0

2003572c <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003572c:	3021fff4 	addik	r1, r1, -12
20035730:	fa610008 	swi	r19, r1, 8
20035734:	12610000 	addk	r19, r1, r0
20035738:	f8b30010 	swi	r5, r19, 16
2003573c:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20035740:	e8730010 	lwi	r3, r19, 16
20035744:	e8830004 	lwi	r4, r3, 4
20035748:	e8730010 	lwi	r3, r19, 16
2003574c:	e8a3000c 	lwi	r5, r3, 12
20035750:	e8730014 	lwi	r3, r19, 20
20035754:	64630402 	bslli	r3, r3, 2
20035758:	10651800 	addk	r3, r5, r3
2003575c:	e8a30000 	lwi	r5, r3, 0
20035760:	e8730010 	lwi	r3, r19, 16
20035764:	e8630000 	lwi	r3, r3, 0
20035768:	3063ffff 	addik	r3, r3, -1
2003576c:	84651800 	and	r3, r5, r3
20035770:	10631800 	addk	r3, r3, r3
20035774:	10641800 	addk	r3, r4, r3
20035778:	e4630000 	lhui	r3, r3, 0
2003577c:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20035780:	e8730010 	lwi	r3, r19, 16
20035784:	e883000c 	lwi	r4, r3, 12
20035788:	e8730014 	lwi	r3, r19, 20
2003578c:	64630402 	bslli	r3, r3, 2
20035790:	10641800 	addk	r3, r4, r3
20035794:	e8830000 	lwi	r4, r3, 0
20035798:	30840001 	addik	r4, r4, 1
2003579c:	f8830000 	swi	r4, r3, 0
    return value;
200357a0:	e4730004 	lhui	r3, r19, 4
}
200357a4:	10330000 	addk	r1, r19, r0
200357a8:	ea610008 	lwi	r19, r1, 8
200357ac:	3021000c 	addik	r1, r1, 12
200357b0:	b60f0008 	rtsd	r15, 8
200357b4:	80000000 	or	r0, r0, r0

200357b8 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200357b8:	3021fff8 	addik	r1, r1, -8
200357bc:	fa610004 	swi	r19, r1, 4
200357c0:	12610000 	addk	r19, r1, r0
200357c4:	f8b3000c 	swi	r5, r19, 12
200357c8:	10660000 	addk	r3, r6, r0
200357cc:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200357d0:	e873000c 	lwi	r3, r19, 12
200357d4:	e8830004 	lwi	r4, r3, 4
200357d8:	e873000c 	lwi	r3, r19, 12
200357dc:	e8630010 	lwi	r3, r3, 16
200357e0:	e8a30000 	lwi	r5, r3, 0
200357e4:	e873000c 	lwi	r3, r19, 12
200357e8:	e8630000 	lwi	r3, r3, 0
200357ec:	3063ffff 	addik	r3, r3, -1
200357f0:	84651800 	and	r3, r5, r3
200357f4:	10631800 	addk	r3, r3, r3
200357f8:	10641800 	addk	r3, r4, r3
200357fc:	e4930010 	lhui	r4, r19, 16
20035800:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20035804:	e873000c 	lwi	r3, r19, 12
20035808:	e8630010 	lwi	r3, r3, 16
2003580c:	e8830000 	lwi	r4, r3, 0
20035810:	30840001 	addik	r4, r4, 1
20035814:	f8830000 	swi	r4, r3, 0
}
20035818:	10330000 	addk	r1, r19, r0
2003581c:	ea610004 	lwi	r19, r1, 4
20035820:	30210008 	addik	r1, r1, 8
20035824:	b60f0008 	rtsd	r15, 8
20035828:	80000000 	or	r0, r0, r0

2003582c <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003582c:	3021fff8 	addik	r1, r1, -8
20035830:	fa610004 	swi	r19, r1, 4
20035834:	12610000 	addk	r19, r1, r0
20035838:	f8b3000c 	swi	r5, r19, 12
2003583c:	f8d30010 	swi	r6, r19, 16
20035840:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20035844:	e873000c 	lwi	r3, r19, 12
20035848:	e8630010 	lwi	r3, r3, 16
2003584c:	e8830000 	lwi	r4, r3, 0
20035850:	e873000c 	lwi	r3, r19, 12
20035854:	e8a3000c 	lwi	r5, r3, 12
20035858:	e8730010 	lwi	r3, r19, 16
2003585c:	64630402 	bslli	r3, r3, 2
20035860:	10651800 	addk	r3, r5, r3
20035864:	e8630000 	lwi	r3, r3, 0
20035868:	14a32000 	rsubk	r5, r3, r4
2003586c:	30600001 	addik	r3, r0, 1
20035870:	e8930014 	lwi	r4, r19, 20
20035874:	16442803 	cmpu	r18, r4, r5
20035878:	bcb20008 	bgei	r18, 8		// 20035880
2003587c:	10600000 	addk	r3, r0, r0
20035880:	a46300ff 	andi	r3, r3, 255
}
20035884:	10330000 	addk	r1, r19, r0
20035888:	ea610004 	lwi	r19, r1, 4
2003588c:	30210008 	addik	r1, r1, 8
20035890:	b60f0008 	rtsd	r15, 8
20035894:	80000000 	or	r0, r0, r0

20035898 <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20035898:	3021fff8 	addik	r1, r1, -8
2003589c:	fa610004 	swi	r19, r1, 4
200358a0:	12610000 	addk	r19, r1, r0
200358a4:	f8b3000c 	swi	r5, r19, 12
200358a8:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200358ac:	e873000c 	lwi	r3, r19, 12
200358b0:	e8630010 	lwi	r3, r3, 16
200358b4:	e8830000 	lwi	r4, r3, 0
200358b8:	e873000c 	lwi	r3, r19, 12
200358bc:	e8a3000c 	lwi	r5, r3, 12
200358c0:	e8730010 	lwi	r3, r19, 16
200358c4:	64630402 	bslli	r3, r3, 2
200358c8:	10651800 	addk	r3, r5, r3
200358cc:	e8630000 	lwi	r3, r3, 0
200358d0:	14632000 	rsubk	r3, r3, r4
}
200358d4:	10330000 	addk	r1, r19, r0
200358d8:	ea610004 	lwi	r19, r1, 4
200358dc:	30210008 	addik	r1, r1, 8
200358e0:	b60f0008 	rtsd	r15, 8
200358e4:	80000000 	or	r0, r0, r0

200358e8 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200358e8:	3021fff4 	addik	r1, r1, -12
200358ec:	fa610008 	swi	r19, r1, 8
200358f0:	12610000 	addk	r19, r1, r0
200358f4:	f8b30010 	swi	r5, r19, 16
200358f8:	f8d30014 	swi	r6, r19, 20
200358fc:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20035900:	f8130004 	swi	r0, r19, 4
20035904:	b800005c 	bri	92		// 20035960
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20035908:	e8730010 	lwi	r3, r19, 16
2003590c:	e8830000 	lwi	r4, r3, 0
20035910:	e8730010 	lwi	r3, r19, 16
20035914:	e8a3000c 	lwi	r5, r3, 12
20035918:	e8730004 	lwi	r3, r19, 4
2003591c:	64630402 	bslli	r3, r3, 2
20035920:	10651800 	addk	r3, r5, r3
20035924:	e8a30000 	lwi	r5, r3, 0
20035928:	e8730010 	lwi	r3, r19, 16
2003592c:	e8630010 	lwi	r3, r3, 16
20035930:	e8630000 	lwi	r3, r3, 0
20035934:	14632800 	rsubk	r3, r3, r5
20035938:	10641800 	addk	r3, r4, r3
2003593c:	30830001 	addik	r4, r3, 1
20035940:	e8730018 	lwi	r3, r19, 24
20035944:	16441803 	cmpu	r18, r4, r3
20035948:	bc52000c 	blti	r18, 12		// 20035954
            return 0;
2003594c:	10600000 	addk	r3, r0, r0
20035950:	b8000024 	bri	36		// 20035974
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20035954:	e8730004 	lwi	r3, r19, 4
20035958:	30630001 	addik	r3, r3, 1
2003595c:	f8730004 	swi	r3, r19, 4
20035960:	e8930004 	lwi	r4, r19, 4
20035964:	e8730014 	lwi	r3, r19, 20
20035968:	16432003 	cmpu	r18, r3, r4
2003596c:	bc52ff9c 	blti	r18, -100		// 20035908
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20035970:	30600001 	addik	r3, r0, 1
}
20035974:	10330000 	addk	r1, r19, r0
20035978:	ea610008 	lwi	r19, r1, 8
2003597c:	3021000c 	addik	r1, r1, 12
20035980:	b60f0008 	rtsd	r15, 8
20035984:	80000000 	or	r0, r0, r0

20035988 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20035988:	3021ffec 	addik	r1, r1, -20
2003598c:	fa610010 	swi	r19, r1, 16
20035990:	12610000 	addk	r19, r1, r0
20035994:	f8b30018 	swi	r5, r19, 24
20035998:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003599c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200359a0:	f8130004 	swi	r0, r19, 4
200359a4:	b8000054 	bri	84		// 200359f8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200359a8:	e8730018 	lwi	r3, r19, 24
200359ac:	e8630010 	lwi	r3, r3, 16
200359b0:	e8830000 	lwi	r4, r3, 0
200359b4:	e8730018 	lwi	r3, r19, 24
200359b8:	e8a3000c 	lwi	r5, r3, 12
200359bc:	e8730004 	lwi	r3, r19, 4
200359c0:	64630402 	bslli	r3, r3, 2
200359c4:	10651800 	addk	r3, r5, r3
200359c8:	e8630000 	lwi	r3, r3, 0
200359cc:	14632000 	rsubk	r3, r3, r4
200359d0:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200359d4:	e8930008 	lwi	r4, r19, 8
200359d8:	e873000c 	lwi	r3, r19, 12
200359dc:	16441803 	cmpu	r18, r4, r3
200359e0:	bcb20008 	bgei	r18, 8		// 200359e8
200359e4:	10640000 	addk	r3, r4, r0
200359e8:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200359ec:	e8730004 	lwi	r3, r19, 4
200359f0:	30630001 	addik	r3, r3, 1
200359f4:	f8730004 	swi	r3, r19, 4
200359f8:	e8930004 	lwi	r4, r19, 4
200359fc:	e873001c 	lwi	r3, r19, 28
20035a00:	16432003 	cmpu	r18, r3, r4
20035a04:	bc52ffa4 	blti	r18, -92		// 200359a8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20035a08:	e8730018 	lwi	r3, r19, 24
20035a0c:	e8830000 	lwi	r4, r3, 0
20035a10:	e8730008 	lwi	r3, r19, 8
20035a14:	14632000 	rsubk	r3, r3, r4
}
20035a18:	10330000 	addk	r1, r19, r0
20035a1c:	ea610010 	lwi	r19, r1, 16
20035a20:	30210014 	addik	r1, r1, 20
20035a24:	b60f0008 	rtsd	r15, 8
20035a28:	80000000 	or	r0, r0, r0

20035a2c <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20035a2c:	3021fff4 	addik	r1, r1, -12
20035a30:	fa610008 	swi	r19, r1, 8
20035a34:	12610000 	addk	r19, r1, r0
20035a38:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20035a3c:	e8730010 	lwi	r3, r19, 16
20035a40:	e8630010 	lwi	r3, r3, 16
20035a44:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20035a48:	f8130004 	swi	r0, r19, 4
20035a4c:	b8000028 	bri	40		// 20035a74
        fifo->read_inds[i] = 0;
20035a50:	e8730010 	lwi	r3, r19, 16
20035a54:	e883000c 	lwi	r4, r3, 12
20035a58:	e8730004 	lwi	r3, r19, 4
20035a5c:	64630402 	bslli	r3, r3, 2
20035a60:	10641800 	addk	r3, r4, r3
20035a64:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20035a68:	e8730004 	lwi	r3, r19, 4
20035a6c:	30630001 	addik	r3, r3, 1
20035a70:	f8730004 	swi	r3, r19, 4
20035a74:	e8730010 	lwi	r3, r19, 16
20035a78:	e8830008 	lwi	r4, r3, 8
20035a7c:	e8730004 	lwi	r3, r19, 4
20035a80:	16441803 	cmpu	r18, r4, r3
20035a84:	bc52ffcc 	blti	r18, -52		// 20035a50
        fifo->read_inds[i] = 0;
    }
}
20035a88:	10330000 	addk	r1, r19, r0
20035a8c:	ea610008 	lwi	r19, r1, 8
20035a90:	3021000c 	addik	r1, r1, 12
20035a94:	b60f0008 	rtsd	r15, 8
20035a98:	80000000 	or	r0, r0, r0

20035a9c <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20035a9c:	3021fff4 	addik	r1, r1, -12
20035aa0:	fa610008 	swi	r19, r1, 8
20035aa4:	12610000 	addk	r19, r1, r0
20035aa8:	f8b30010 	swi	r5, r19, 16
20035aac:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20035ab0:	e8730010 	lwi	r3, r19, 16
20035ab4:	e8830004 	lwi	r4, r3, 4
20035ab8:	e8730010 	lwi	r3, r19, 16
20035abc:	e8a3000c 	lwi	r5, r3, 12
20035ac0:	e8730014 	lwi	r3, r19, 20
20035ac4:	64630402 	bslli	r3, r3, 2
20035ac8:	10651800 	addk	r3, r5, r3
20035acc:	e8a30000 	lwi	r5, r3, 0
20035ad0:	e8730010 	lwi	r3, r19, 16
20035ad4:	e8630000 	lwi	r3, r3, 0
20035ad8:	3063ffff 	addik	r3, r3, -1
20035adc:	84651800 	and	r3, r5, r3
20035ae0:	64630402 	bslli	r3, r3, 2
20035ae4:	10641800 	addk	r3, r4, r3
20035ae8:	e8630000 	lwi	r3, r3, 0
20035aec:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20035af0:	e8730010 	lwi	r3, r19, 16
20035af4:	e883000c 	lwi	r4, r3, 12
20035af8:	e8730014 	lwi	r3, r19, 20
20035afc:	64630402 	bslli	r3, r3, 2
20035b00:	10641800 	addk	r3, r4, r3
20035b04:	e8830000 	lwi	r4, r3, 0
20035b08:	30840001 	addik	r4, r4, 1
20035b0c:	f8830000 	swi	r4, r3, 0
    return value;
20035b10:	e8730004 	lwi	r3, r19, 4
}
20035b14:	10330000 	addk	r1, r19, r0
20035b18:	ea610008 	lwi	r19, r1, 8
20035b1c:	3021000c 	addik	r1, r1, 12
20035b20:	b60f0008 	rtsd	r15, 8
20035b24:	80000000 	or	r0, r0, r0

20035b28 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20035b28:	3021fff8 	addik	r1, r1, -8
20035b2c:	fa610004 	swi	r19, r1, 4
20035b30:	12610000 	addk	r19, r1, r0
20035b34:	f8b3000c 	swi	r5, r19, 12
20035b38:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20035b3c:	e873000c 	lwi	r3, r19, 12
20035b40:	e8830004 	lwi	r4, r3, 4
20035b44:	e873000c 	lwi	r3, r19, 12
20035b48:	e8630010 	lwi	r3, r3, 16
20035b4c:	e8a30000 	lwi	r5, r3, 0
20035b50:	e873000c 	lwi	r3, r19, 12
20035b54:	e8630000 	lwi	r3, r3, 0
20035b58:	3063ffff 	addik	r3, r3, -1
20035b5c:	84651800 	and	r3, r5, r3
20035b60:	64630402 	bslli	r3, r3, 2
20035b64:	10641800 	addk	r3, r4, r3
20035b68:	e8930010 	lwi	r4, r19, 16
20035b6c:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20035b70:	e873000c 	lwi	r3, r19, 12
20035b74:	e8630010 	lwi	r3, r3, 16
20035b78:	e8830000 	lwi	r4, r3, 0
20035b7c:	30840001 	addik	r4, r4, 1
20035b80:	f8830000 	swi	r4, r3, 0
}
20035b84:	10330000 	addk	r1, r19, r0
20035b88:	ea610004 	lwi	r19, r1, 4
20035b8c:	30210008 	addik	r1, r1, 8
20035b90:	b60f0008 	rtsd	r15, 8
20035b94:	80000000 	or	r0, r0, r0

20035b98 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20035b98:	3021fff8 	addik	r1, r1, -8
20035b9c:	fa610004 	swi	r19, r1, 4
20035ba0:	12610000 	addk	r19, r1, r0
20035ba4:	f8b3000c 	swi	r5, r19, 12
20035ba8:	f8d30010 	swi	r6, r19, 16
20035bac:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20035bb0:	e873000c 	lwi	r3, r19, 12
20035bb4:	e8630010 	lwi	r3, r3, 16
20035bb8:	e8830000 	lwi	r4, r3, 0
20035bbc:	e873000c 	lwi	r3, r19, 12
20035bc0:	e8a3000c 	lwi	r5, r3, 12
20035bc4:	e8730010 	lwi	r3, r19, 16
20035bc8:	64630402 	bslli	r3, r3, 2
20035bcc:	10651800 	addk	r3, r5, r3
20035bd0:	e8630000 	lwi	r3, r3, 0
20035bd4:	14a32000 	rsubk	r5, r3, r4
20035bd8:	30600001 	addik	r3, r0, 1
20035bdc:	e8930014 	lwi	r4, r19, 20
20035be0:	16442803 	cmpu	r18, r4, r5
20035be4:	bcb20008 	bgei	r18, 8		// 20035bec
20035be8:	10600000 	addk	r3, r0, r0
20035bec:	a46300ff 	andi	r3, r3, 255
}
20035bf0:	10330000 	addk	r1, r19, r0
20035bf4:	ea610004 	lwi	r19, r1, 4
20035bf8:	30210008 	addik	r1, r1, 8
20035bfc:	b60f0008 	rtsd	r15, 8
20035c00:	80000000 	or	r0, r0, r0

20035c04 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20035c04:	3021fff8 	addik	r1, r1, -8
20035c08:	fa610004 	swi	r19, r1, 4
20035c0c:	12610000 	addk	r19, r1, r0
20035c10:	f8b3000c 	swi	r5, r19, 12
20035c14:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20035c18:	e873000c 	lwi	r3, r19, 12
20035c1c:	e8630010 	lwi	r3, r3, 16
20035c20:	e8830000 	lwi	r4, r3, 0
20035c24:	e873000c 	lwi	r3, r19, 12
20035c28:	e8a3000c 	lwi	r5, r3, 12
20035c2c:	e8730010 	lwi	r3, r19, 16
20035c30:	64630402 	bslli	r3, r3, 2
20035c34:	10651800 	addk	r3, r5, r3
20035c38:	e8630000 	lwi	r3, r3, 0
20035c3c:	14632000 	rsubk	r3, r3, r4
}
20035c40:	10330000 	addk	r1, r19, r0
20035c44:	ea610004 	lwi	r19, r1, 4
20035c48:	30210008 	addik	r1, r1, 8
20035c4c:	b60f0008 	rtsd	r15, 8
20035c50:	80000000 	or	r0, r0, r0

20035c54 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20035c54:	3021fff4 	addik	r1, r1, -12
20035c58:	fa610008 	swi	r19, r1, 8
20035c5c:	12610000 	addk	r19, r1, r0
20035c60:	f8b30010 	swi	r5, r19, 16
20035c64:	f8d30014 	swi	r6, r19, 20
20035c68:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20035c6c:	f8130004 	swi	r0, r19, 4
20035c70:	b800005c 	bri	92		// 20035ccc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20035c74:	e8730010 	lwi	r3, r19, 16
20035c78:	e8830000 	lwi	r4, r3, 0
20035c7c:	e8730010 	lwi	r3, r19, 16
20035c80:	e8a3000c 	lwi	r5, r3, 12
20035c84:	e8730004 	lwi	r3, r19, 4
20035c88:	64630402 	bslli	r3, r3, 2
20035c8c:	10651800 	addk	r3, r5, r3
20035c90:	e8a30000 	lwi	r5, r3, 0
20035c94:	e8730010 	lwi	r3, r19, 16
20035c98:	e8630010 	lwi	r3, r3, 16
20035c9c:	e8630000 	lwi	r3, r3, 0
20035ca0:	14632800 	rsubk	r3, r3, r5
20035ca4:	10641800 	addk	r3, r4, r3
20035ca8:	30830001 	addik	r4, r3, 1
20035cac:	e8730018 	lwi	r3, r19, 24
20035cb0:	16441803 	cmpu	r18, r4, r3
20035cb4:	bc52000c 	blti	r18, 12		// 20035cc0
            return 0;
20035cb8:	10600000 	addk	r3, r0, r0
20035cbc:	b8000024 	bri	36		// 20035ce0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20035cc0:	e8730004 	lwi	r3, r19, 4
20035cc4:	30630001 	addik	r3, r3, 1
20035cc8:	f8730004 	swi	r3, r19, 4
20035ccc:	e8930004 	lwi	r4, r19, 4
20035cd0:	e8730014 	lwi	r3, r19, 20
20035cd4:	16432003 	cmpu	r18, r3, r4
20035cd8:	bc52ff9c 	blti	r18, -100		// 20035c74
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20035cdc:	30600001 	addik	r3, r0, 1
}
20035ce0:	10330000 	addk	r1, r19, r0
20035ce4:	ea610008 	lwi	r19, r1, 8
20035ce8:	3021000c 	addik	r1, r1, 12
20035cec:	b60f0008 	rtsd	r15, 8
20035cf0:	80000000 	or	r0, r0, r0

20035cf4 <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20035cf4:	3021ffec 	addik	r1, r1, -20
20035cf8:	fa610010 	swi	r19, r1, 16
20035cfc:	12610000 	addk	r19, r1, r0
20035d00:	f8b30018 	swi	r5, r19, 24
20035d04:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20035d08:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20035d0c:	f8130004 	swi	r0, r19, 4
20035d10:	b8000054 	bri	84		// 20035d64
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20035d14:	e8730018 	lwi	r3, r19, 24
20035d18:	e8630010 	lwi	r3, r3, 16
20035d1c:	e8830000 	lwi	r4, r3, 0
20035d20:	e8730018 	lwi	r3, r19, 24
20035d24:	e8a3000c 	lwi	r5, r3, 12
20035d28:	e8730004 	lwi	r3, r19, 4
20035d2c:	64630402 	bslli	r3, r3, 2
20035d30:	10651800 	addk	r3, r5, r3
20035d34:	e8630000 	lwi	r3, r3, 0
20035d38:	14632000 	rsubk	r3, r3, r4
20035d3c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20035d40:	e8930008 	lwi	r4, r19, 8
20035d44:	e873000c 	lwi	r3, r19, 12
20035d48:	16441803 	cmpu	r18, r4, r3
20035d4c:	bcb20008 	bgei	r18, 8		// 20035d54
20035d50:	10640000 	addk	r3, r4, r0
20035d54:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20035d58:	e8730004 	lwi	r3, r19, 4
20035d5c:	30630001 	addik	r3, r3, 1
20035d60:	f8730004 	swi	r3, r19, 4
20035d64:	e8930004 	lwi	r4, r19, 4
20035d68:	e873001c 	lwi	r3, r19, 28
20035d6c:	16432003 	cmpu	r18, r3, r4
20035d70:	bc52ffa4 	blti	r18, -92		// 20035d14
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20035d74:	e8730018 	lwi	r3, r19, 24
20035d78:	e8830000 	lwi	r4, r3, 0
20035d7c:	e8730008 	lwi	r3, r19, 8
20035d80:	14632000 	rsubk	r3, r3, r4
}
20035d84:	10330000 	addk	r1, r19, r0
20035d88:	ea610010 	lwi	r19, r1, 16
20035d8c:	30210014 	addik	r1, r1, 20
20035d90:	b60f0008 	rtsd	r15, 8
20035d94:	80000000 	or	r0, r0, r0

20035d98 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20035d98:	3021fff4 	addik	r1, r1, -12
20035d9c:	fa610008 	swi	r19, r1, 8
20035da0:	12610000 	addk	r19, r1, r0
20035da4:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20035da8:	e8730010 	lwi	r3, r19, 16
20035dac:	e8630010 	lwi	r3, r3, 16
20035db0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20035db4:	f8130004 	swi	r0, r19, 4
20035db8:	b8000028 	bri	40		// 20035de0
        fifo->read_inds[i] = 0;
20035dbc:	e8730010 	lwi	r3, r19, 16
20035dc0:	e883000c 	lwi	r4, r3, 12
20035dc4:	e8730004 	lwi	r3, r19, 4
20035dc8:	64630402 	bslli	r3, r3, 2
20035dcc:	10641800 	addk	r3, r4, r3
20035dd0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20035dd4:	e8730004 	lwi	r3, r19, 4
20035dd8:	30630001 	addik	r3, r3, 1
20035ddc:	f8730004 	swi	r3, r19, 4
20035de0:	e8730010 	lwi	r3, r19, 16
20035de4:	e8830008 	lwi	r4, r3, 8
20035de8:	e8730004 	lwi	r3, r19, 4
20035dec:	16441803 	cmpu	r18, r4, r3
20035df0:	bc52ffcc 	blti	r18, -52		// 20035dbc
        fifo->read_inds[i] = 0;
    }
}
20035df4:	10330000 	addk	r1, r19, r0
20035df8:	ea610008 	lwi	r19, r1, 8
20035dfc:	3021000c 	addik	r1, r1, 12
20035e00:	b60f0008 	rtsd	r15, 8
20035e04:	80000000 	or	r0, r0, r0

20035e08 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20035e08:	3021fff0 	addik	r1, r1, -16
20035e0c:	fa61000c 	swi	r19, r1, 12
20035e10:	12610000 	addk	r19, r1, r0
20035e14:	f8b30014 	swi	r5, r19, 20
20035e18:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20035e1c:	e8730014 	lwi	r3, r19, 20
20035e20:	e8830004 	lwi	r4, r3, 4
20035e24:	e8730014 	lwi	r3, r19, 20
20035e28:	e8a3000c 	lwi	r5, r3, 12
20035e2c:	e8730018 	lwi	r3, r19, 24
20035e30:	64630402 	bslli	r3, r3, 2
20035e34:	10651800 	addk	r3, r5, r3
20035e38:	e8a30000 	lwi	r5, r3, 0
20035e3c:	e8730014 	lwi	r3, r19, 20
20035e40:	e8630000 	lwi	r3, r3, 0
20035e44:	3063ffff 	addik	r3, r3, -1
20035e48:	84651800 	and	r3, r5, r3
20035e4c:	64630403 	bslli	r3, r3, 3
20035e50:	10641800 	addk	r3, r4, r3
20035e54:	e8830000 	lwi	r4, r3, 0
20035e58:	e8a30004 	lwi	r5, r3, 4
20035e5c:	f8930004 	swi	r4, r19, 4
20035e60:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20035e64:	e8730014 	lwi	r3, r19, 20
20035e68:	e883000c 	lwi	r4, r3, 12
20035e6c:	e8730018 	lwi	r3, r19, 24
20035e70:	64630402 	bslli	r3, r3, 2
20035e74:	10641800 	addk	r3, r4, r3
20035e78:	e8830000 	lwi	r4, r3, 0
20035e7c:	30840001 	addik	r4, r4, 1
20035e80:	f8830000 	swi	r4, r3, 0
    return value;
20035e84:	e8930004 	lwi	r4, r19, 4
20035e88:	e8b30008 	lwi	r5, r19, 8
}
20035e8c:	10640000 	addk	r3, r4, r0
20035e90:	10850000 	addk	r4, r5, r0
20035e94:	10330000 	addk	r1, r19, r0
20035e98:	ea61000c 	lwi	r19, r1, 12
20035e9c:	30210010 	addik	r1, r1, 16
20035ea0:	b60f0008 	rtsd	r15, 8
20035ea4:	80000000 	or	r0, r0, r0

20035ea8 <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20035ea8:	3021fff8 	addik	r1, r1, -8
20035eac:	fa610004 	swi	r19, r1, 4
20035eb0:	12610000 	addk	r19, r1, r0
20035eb4:	f8b3000c 	swi	r5, r19, 12
20035eb8:	f8d30010 	swi	r6, r19, 16
20035ebc:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20035ec0:	e873000c 	lwi	r3, r19, 12
20035ec4:	e8830004 	lwi	r4, r3, 4
20035ec8:	e873000c 	lwi	r3, r19, 12
20035ecc:	e8630010 	lwi	r3, r3, 16
20035ed0:	e8a30000 	lwi	r5, r3, 0
20035ed4:	e873000c 	lwi	r3, r19, 12
20035ed8:	e8630000 	lwi	r3, r3, 0
20035edc:	3063ffff 	addik	r3, r3, -1
20035ee0:	84651800 	and	r3, r5, r3
20035ee4:	64630403 	bslli	r3, r3, 3
20035ee8:	10641800 	addk	r3, r4, r3
20035eec:	e8930010 	lwi	r4, r19, 16
20035ef0:	e8b30014 	lwi	r5, r19, 20
20035ef4:	f8830000 	swi	r4, r3, 0
20035ef8:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20035efc:	e873000c 	lwi	r3, r19, 12
20035f00:	e8630010 	lwi	r3, r3, 16
20035f04:	e8830000 	lwi	r4, r3, 0
20035f08:	30840001 	addik	r4, r4, 1
20035f0c:	f8830000 	swi	r4, r3, 0
}
20035f10:	10330000 	addk	r1, r19, r0
20035f14:	ea610004 	lwi	r19, r1, 4
20035f18:	30210008 	addik	r1, r1, 8
20035f1c:	b60f0008 	rtsd	r15, 8
20035f20:	80000000 	or	r0, r0, r0

20035f24 <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20035f24:	3021fff8 	addik	r1, r1, -8
20035f28:	fa610004 	swi	r19, r1, 4
20035f2c:	12610000 	addk	r19, r1, r0
20035f30:	f8b3000c 	swi	r5, r19, 12
20035f34:	f8d30010 	swi	r6, r19, 16
20035f38:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20035f3c:	e873000c 	lwi	r3, r19, 12
20035f40:	e8630010 	lwi	r3, r3, 16
20035f44:	e8830000 	lwi	r4, r3, 0
20035f48:	e873000c 	lwi	r3, r19, 12
20035f4c:	e8a3000c 	lwi	r5, r3, 12
20035f50:	e8730010 	lwi	r3, r19, 16
20035f54:	64630402 	bslli	r3, r3, 2
20035f58:	10651800 	addk	r3, r5, r3
20035f5c:	e8630000 	lwi	r3, r3, 0
20035f60:	14a32000 	rsubk	r5, r3, r4
20035f64:	30600001 	addik	r3, r0, 1
20035f68:	e8930014 	lwi	r4, r19, 20
20035f6c:	16442803 	cmpu	r18, r4, r5
20035f70:	bcb20008 	bgei	r18, 8		// 20035f78
20035f74:	10600000 	addk	r3, r0, r0
20035f78:	a46300ff 	andi	r3, r3, 255
}
20035f7c:	10330000 	addk	r1, r19, r0
20035f80:	ea610004 	lwi	r19, r1, 4
20035f84:	30210008 	addik	r1, r1, 8
20035f88:	b60f0008 	rtsd	r15, 8
20035f8c:	80000000 	or	r0, r0, r0

20035f90 <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20035f90:	3021fff8 	addik	r1, r1, -8
20035f94:	fa610004 	swi	r19, r1, 4
20035f98:	12610000 	addk	r19, r1, r0
20035f9c:	f8b3000c 	swi	r5, r19, 12
20035fa0:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20035fa4:	e873000c 	lwi	r3, r19, 12
20035fa8:	e8630010 	lwi	r3, r3, 16
20035fac:	e8830000 	lwi	r4, r3, 0
20035fb0:	e873000c 	lwi	r3, r19, 12
20035fb4:	e8a3000c 	lwi	r5, r3, 12
20035fb8:	e8730010 	lwi	r3, r19, 16
20035fbc:	64630402 	bslli	r3, r3, 2
20035fc0:	10651800 	addk	r3, r5, r3
20035fc4:	e8630000 	lwi	r3, r3, 0
20035fc8:	14632000 	rsubk	r3, r3, r4
}
20035fcc:	10330000 	addk	r1, r19, r0
20035fd0:	ea610004 	lwi	r19, r1, 4
20035fd4:	30210008 	addik	r1, r1, 8
20035fd8:	b60f0008 	rtsd	r15, 8
20035fdc:	80000000 	or	r0, r0, r0

20035fe0 <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20035fe0:	3021fff4 	addik	r1, r1, -12
20035fe4:	fa610008 	swi	r19, r1, 8
20035fe8:	12610000 	addk	r19, r1, r0
20035fec:	f8b30010 	swi	r5, r19, 16
20035ff0:	f8d30014 	swi	r6, r19, 20
20035ff4:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20035ff8:	f8130004 	swi	r0, r19, 4
20035ffc:	b800005c 	bri	92		// 20036058
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20036000:	e8730010 	lwi	r3, r19, 16
20036004:	e8830000 	lwi	r4, r3, 0
20036008:	e8730010 	lwi	r3, r19, 16
2003600c:	e8a3000c 	lwi	r5, r3, 12
20036010:	e8730004 	lwi	r3, r19, 4
20036014:	64630402 	bslli	r3, r3, 2
20036018:	10651800 	addk	r3, r5, r3
2003601c:	e8a30000 	lwi	r5, r3, 0
20036020:	e8730010 	lwi	r3, r19, 16
20036024:	e8630010 	lwi	r3, r3, 16
20036028:	e8630000 	lwi	r3, r3, 0
2003602c:	14632800 	rsubk	r3, r3, r5
20036030:	10641800 	addk	r3, r4, r3
20036034:	30830001 	addik	r4, r3, 1
20036038:	e8730018 	lwi	r3, r19, 24
2003603c:	16441803 	cmpu	r18, r4, r3
20036040:	bc52000c 	blti	r18, 12		// 2003604c
            return 0;
20036044:	10600000 	addk	r3, r0, r0
20036048:	b8000024 	bri	36		// 2003606c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003604c:	e8730004 	lwi	r3, r19, 4
20036050:	30630001 	addik	r3, r3, 1
20036054:	f8730004 	swi	r3, r19, 4
20036058:	e8930004 	lwi	r4, r19, 4
2003605c:	e8730014 	lwi	r3, r19, 20
20036060:	16432003 	cmpu	r18, r3, r4
20036064:	bc52ff9c 	blti	r18, -100		// 20036000
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20036068:	30600001 	addik	r3, r0, 1
}
2003606c:	10330000 	addk	r1, r19, r0
20036070:	ea610008 	lwi	r19, r1, 8
20036074:	3021000c 	addik	r1, r1, 12
20036078:	b60f0008 	rtsd	r15, 8
2003607c:	80000000 	or	r0, r0, r0

20036080 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20036080:	3021ffec 	addik	r1, r1, -20
20036084:	fa610010 	swi	r19, r1, 16
20036088:	12610000 	addk	r19, r1, r0
2003608c:	f8b30018 	swi	r5, r19, 24
20036090:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20036094:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20036098:	f8130004 	swi	r0, r19, 4
2003609c:	b8000054 	bri	84		// 200360f0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200360a0:	e8730018 	lwi	r3, r19, 24
200360a4:	e8630010 	lwi	r3, r3, 16
200360a8:	e8830000 	lwi	r4, r3, 0
200360ac:	e8730018 	lwi	r3, r19, 24
200360b0:	e8a3000c 	lwi	r5, r3, 12
200360b4:	e8730004 	lwi	r3, r19, 4
200360b8:	64630402 	bslli	r3, r3, 2
200360bc:	10651800 	addk	r3, r5, r3
200360c0:	e8630000 	lwi	r3, r3, 0
200360c4:	14632000 	rsubk	r3, r3, r4
200360c8:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200360cc:	e8930008 	lwi	r4, r19, 8
200360d0:	e873000c 	lwi	r3, r19, 12
200360d4:	16441803 	cmpu	r18, r4, r3
200360d8:	bcb20008 	bgei	r18, 8		// 200360e0
200360dc:	10640000 	addk	r3, r4, r0
200360e0:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200360e4:	e8730004 	lwi	r3, r19, 4
200360e8:	30630001 	addik	r3, r3, 1
200360ec:	f8730004 	swi	r3, r19, 4
200360f0:	e8930004 	lwi	r4, r19, 4
200360f4:	e873001c 	lwi	r3, r19, 28
200360f8:	16432003 	cmpu	r18, r3, r4
200360fc:	bc52ffa4 	blti	r18, -92		// 200360a0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20036100:	e8730018 	lwi	r3, r19, 24
20036104:	e8830000 	lwi	r4, r3, 0
20036108:	e8730008 	lwi	r3, r19, 8
2003610c:	14632000 	rsubk	r3, r3, r4
}
20036110:	10330000 	addk	r1, r19, r0
20036114:	ea610010 	lwi	r19, r1, 16
20036118:	30210014 	addik	r1, r1, 20
2003611c:	b60f0008 	rtsd	r15, 8
20036120:	80000000 	or	r0, r0, r0

20036124 <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20036124:	3021fff4 	addik	r1, r1, -12
20036128:	fa610008 	swi	r19, r1, 8
2003612c:	12610000 	addk	r19, r1, r0
20036130:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20036134:	e8730010 	lwi	r3, r19, 16
20036138:	e8630010 	lwi	r3, r3, 16
2003613c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20036140:	f8130004 	swi	r0, r19, 4
20036144:	b8000028 	bri	40		// 2003616c
        fifo->read_inds[i] = 0;
20036148:	e8730010 	lwi	r3, r19, 16
2003614c:	e883000c 	lwi	r4, r3, 12
20036150:	e8730004 	lwi	r3, r19, 4
20036154:	64630402 	bslli	r3, r3, 2
20036158:	10641800 	addk	r3, r4, r3
2003615c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20036160:	e8730004 	lwi	r3, r19, 4
20036164:	30630001 	addik	r3, r3, 1
20036168:	f8730004 	swi	r3, r19, 4
2003616c:	e8730010 	lwi	r3, r19, 16
20036170:	e8830008 	lwi	r4, r3, 8
20036174:	e8730004 	lwi	r3, r19, 4
20036178:	16441803 	cmpu	r18, r4, r3
2003617c:	bc52ffcc 	blti	r18, -52		// 20036148
        fifo->read_inds[i] = 0;
    }
}
20036180:	10330000 	addk	r1, r19, r0
20036184:	ea610008 	lwi	r19, r1, 8
20036188:	3021000c 	addik	r1, r1, 12
2003618c:	b60f0008 	rtsd	r15, 8
20036190:	80000000 	or	r0, r0, r0

20036194 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20036194:	3021fff4 	addik	r1, r1, -12
20036198:	fa610008 	swi	r19, r1, 8
2003619c:	12610000 	addk	r19, r1, r0
200361a0:	f8b30010 	swi	r5, r19, 16
200361a4:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200361a8:	e8730010 	lwi	r3, r19, 16
200361ac:	e8830004 	lwi	r4, r3, 4
200361b0:	e8730010 	lwi	r3, r19, 16
200361b4:	e8a3000c 	lwi	r5, r3, 12
200361b8:	e8730014 	lwi	r3, r19, 20
200361bc:	64630402 	bslli	r3, r3, 2
200361c0:	10651800 	addk	r3, r5, r3
200361c4:	e8a30000 	lwi	r5, r3, 0
200361c8:	e8730010 	lwi	r3, r19, 16
200361cc:	e8630000 	lwi	r3, r3, 0
200361d0:	3063ffff 	addik	r3, r3, -1
200361d4:	84651800 	and	r3, r5, r3
200361d8:	64630402 	bslli	r3, r3, 2
200361dc:	10641800 	addk	r3, r4, r3
200361e0:	e8630000 	lwi	r3, r3, 0
200361e4:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200361e8:	e8730010 	lwi	r3, r19, 16
200361ec:	e883000c 	lwi	r4, r3, 12
200361f0:	e8730014 	lwi	r3, r19, 20
200361f4:	64630402 	bslli	r3, r3, 2
200361f8:	10641800 	addk	r3, r4, r3
200361fc:	e8830000 	lwi	r4, r3, 0
20036200:	30840001 	addik	r4, r4, 1
20036204:	f8830000 	swi	r4, r3, 0
    return value;
20036208:	e8730004 	lwi	r3, r19, 4
}
2003620c:	10330000 	addk	r1, r19, r0
20036210:	ea610008 	lwi	r19, r1, 8
20036214:	3021000c 	addik	r1, r1, 12
20036218:	b60f0008 	rtsd	r15, 8
2003621c:	80000000 	or	r0, r0, r0

20036220 <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20036220:	3021fff8 	addik	r1, r1, -8
20036224:	fa610004 	swi	r19, r1, 4
20036228:	12610000 	addk	r19, r1, r0
2003622c:	f8b3000c 	swi	r5, r19, 12
20036230:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20036234:	e873000c 	lwi	r3, r19, 12
20036238:	e8830004 	lwi	r4, r3, 4
2003623c:	e873000c 	lwi	r3, r19, 12
20036240:	e8630010 	lwi	r3, r3, 16
20036244:	e8a30000 	lwi	r5, r3, 0
20036248:	e873000c 	lwi	r3, r19, 12
2003624c:	e8630000 	lwi	r3, r3, 0
20036250:	3063ffff 	addik	r3, r3, -1
20036254:	84651800 	and	r3, r5, r3
20036258:	64630402 	bslli	r3, r3, 2
2003625c:	10641800 	addk	r3, r4, r3
20036260:	e8930010 	lwi	r4, r19, 16
20036264:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20036268:	e873000c 	lwi	r3, r19, 12
2003626c:	e8630010 	lwi	r3, r3, 16
20036270:	e8830000 	lwi	r4, r3, 0
20036274:	30840001 	addik	r4, r4, 1
20036278:	f8830000 	swi	r4, r3, 0
}
2003627c:	10330000 	addk	r1, r19, r0
20036280:	ea610004 	lwi	r19, r1, 4
20036284:	30210008 	addik	r1, r1, 8
20036288:	b60f0008 	rtsd	r15, 8
2003628c:	80000000 	or	r0, r0, r0

20036290 <read_DC>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_DC() {
20036290:	3021ffe0 	addik	r1, r1, -32
20036294:	f9e10000 	swi	r15, r1, 0
20036298:	fa61001c 	swi	r19, r1, 28
2003629c:	12610000 	addk	r19, r1, r0
		index_DC = decoder_texture_IQ_DC->read_inds[0];
200362a0:	b0002004 	imm	8196
200362a4:	e860876c 	lwi	r3, r0, -30868	// 2004876c <decoder_texture_IQ_DC>
200362a8:	e863000c 	lwi	r3, r3, 12
200362ac:	e8630000 	lwi	r3, r3, 0
200362b0:	b0002006 	imm	8198
200362b4:	f8602f48 	swi	r3, r0, 12104	// 20062f48 <index_DC>
		numTokens_DC = index_DC + fifo_i16_get_num_tokens(decoder_texture_IQ_DC, 0);
200362b8:	b0002004 	imm	8196
200362bc:	e860876c 	lwi	r3, r0, -30868	// 2004876c <decoder_texture_IQ_DC>
200362c0:	10a30000 	addk	r5, r3, r0
200362c4:	10c00000 	addk	r6, r0, r0
200362c8:	b9f4e48c 	brlid	r15, -7028	// 20034754 <fifo_i16_get_num_tokens>
200362cc:	80000000 	or	r0, r0, r0
200362d0:	10830000 	addk	r4, r3, r0
200362d4:	b0002006 	imm	8198
200362d8:	e8602f48 	lwi	r3, r0, 12104	// 20062f48 <index_DC>
200362dc:	10641800 	addk	r3, r4, r3
200362e0:	b0002006 	imm	8198
200362e4:	f8602f4c 	swi	r3, r0, 12108	// 20062f4c <numTokens_DC>
	}
200362e8:	e9e10000 	lwi	r15, r1, 0
200362ec:	10330000 	addk	r1, r19, r0
200362f0:	ea61001c 	lwi	r19, r1, 28
200362f4:	30210020 	addik	r1, r1, 32
200362f8:	b60f0008 	rtsd	r15, 8
200362fc:	80000000 	or	r0, r0, r0

20036300 <read_end_DC>:
	
	static void read_end_DC() {
20036300:	3021fff8 	addik	r1, r1, -8
20036304:	fa610004 	swi	r19, r1, 4
20036308:	12610000 	addk	r19, r1, r0
		decoder_texture_IQ_DC->read_inds[0] = index_DC;
2003630c:	b0002004 	imm	8196
20036310:	e860876c 	lwi	r3, r0, -30868	// 2004876c <decoder_texture_IQ_DC>
20036314:	e863000c 	lwi	r3, r3, 12
20036318:	b0002006 	imm	8198
2003631c:	e8802f48 	lwi	r4, r0, 12104	// 20062f48 <index_DC>
20036320:	f8830000 	swi	r4, r3, 0
	}
20036324:	10330000 	addk	r1, r19, r0
20036328:	ea610004 	lwi	r19, r1, 4
2003632c:	30210008 	addik	r1, r1, 8
20036330:	b60f0008 	rtsd	r15, 8
20036334:	80000000 	or	r0, r0, r0

20036338 <read_AC>:
	static void read_AC() {
20036338:	3021ffe0 	addik	r1, r1, -32
2003633c:	f9e10000 	swi	r15, r1, 0
20036340:	fa61001c 	swi	r19, r1, 28
20036344:	12610000 	addk	r19, r1, r0
		index_AC = decoder_texture_IQ_AC->read_inds[0];
20036348:	b0002004 	imm	8196
2003634c:	e8608734 	lwi	r3, r0, -30924	// 20048734 <decoder_texture_IQ_AC>
20036350:	e863000c 	lwi	r3, r3, 12
20036354:	e8630000 	lwi	r3, r3, 0
20036358:	b0002006 	imm	8198
2003635c:	f8602f50 	swi	r3, r0, 12112	// 20062f50 <index_AC>
		numTokens_AC = index_AC + fifo_i16_get_num_tokens(decoder_texture_IQ_AC, 0);
20036360:	b0002004 	imm	8196
20036364:	e8608734 	lwi	r3, r0, -30924	// 20048734 <decoder_texture_IQ_AC>
20036368:	10a30000 	addk	r5, r3, r0
2003636c:	10c00000 	addk	r6, r0, r0
20036370:	b9f4e3e4 	brlid	r15, -7196	// 20034754 <fifo_i16_get_num_tokens>
20036374:	80000000 	or	r0, r0, r0
20036378:	10830000 	addk	r4, r3, r0
2003637c:	b0002006 	imm	8198
20036380:	e8602f50 	lwi	r3, r0, 12112	// 20062f50 <index_AC>
20036384:	10641800 	addk	r3, r4, r3
20036388:	b0002006 	imm	8198
2003638c:	f8602f54 	swi	r3, r0, 12116	// 20062f54 <numTokens_AC>
	}
20036390:	e9e10000 	lwi	r15, r1, 0
20036394:	10330000 	addk	r1, r19, r0
20036398:	ea61001c 	lwi	r19, r1, 28
2003639c:	30210020 	addik	r1, r1, 32
200363a0:	b60f0008 	rtsd	r15, 8
200363a4:	80000000 	or	r0, r0, r0

200363a8 <read_end_AC>:
	
	static void read_end_AC() {
200363a8:	3021fff8 	addik	r1, r1, -8
200363ac:	fa610004 	swi	r19, r1, 4
200363b0:	12610000 	addk	r19, r1, r0
		decoder_texture_IQ_AC->read_inds[0] = index_AC;
200363b4:	b0002004 	imm	8196
200363b8:	e8608734 	lwi	r3, r0, -30924	// 20048734 <decoder_texture_IQ_AC>
200363bc:	e863000c 	lwi	r3, r3, 12
200363c0:	b0002006 	imm	8198
200363c4:	e8802f50 	lwi	r4, r0, 12112	// 20062f50 <index_AC>
200363c8:	f8830000 	swi	r4, r3, 0
	}
200363cc:	10330000 	addk	r1, r19, r0
200363d0:	ea610004 	lwi	r19, r1, 4
200363d4:	30210008 	addik	r1, r1, 8
200363d8:	b60f0008 	rtsd	r15, 8
200363dc:	80000000 	or	r0, r0, r0

200363e0 <read_QP>:
	static void read_QP() {
200363e0:	3021ffe0 	addik	r1, r1, -32
200363e4:	f9e10000 	swi	r15, r1, 0
200363e8:	fa61001c 	swi	r19, r1, 28
200363ec:	12610000 	addk	r19, r1, r0
		index_QP = decoder_texture_IQ_QP->read_inds[0];
200363f0:	b0002004 	imm	8196
200363f4:	e860878c 	lwi	r3, r0, -30836	// 2004878c <decoder_texture_IQ_QP>
200363f8:	e863000c 	lwi	r3, r3, 12
200363fc:	e8630000 	lwi	r3, r3, 0
20036400:	b0002006 	imm	8198
20036404:	f8602f58 	swi	r3, r0, 12120	// 20062f58 <index_QP>
		numTokens_QP = index_QP + fifo_i8_get_num_tokens(decoder_texture_IQ_QP, 0);
20036408:	b0002004 	imm	8196
2003640c:	e860878c 	lwi	r3, r0, -30836	// 2004878c <decoder_texture_IQ_QP>
20036410:	10a30000 	addk	r5, r3, r0
20036414:	10c00000 	addk	r6, r0, r0
20036418:	b9f4dfd0 	brlid	r15, -8240	// 200343e8 <fifo_i8_get_num_tokens>
2003641c:	80000000 	or	r0, r0, r0
20036420:	10830000 	addk	r4, r3, r0
20036424:	b0002006 	imm	8198
20036428:	e8602f58 	lwi	r3, r0, 12120	// 20062f58 <index_QP>
2003642c:	10641800 	addk	r3, r4, r3
20036430:	b0002006 	imm	8198
20036434:	f8602f5c 	swi	r3, r0, 12124	// 20062f5c <numTokens_QP>
	}
20036438:	e9e10000 	lwi	r15, r1, 0
2003643c:	10330000 	addk	r1, r19, r0
20036440:	ea61001c 	lwi	r19, r1, 28
20036444:	30210020 	addik	r1, r1, 32
20036448:	b60f0008 	rtsd	r15, 8
2003644c:	80000000 	or	r0, r0, r0

20036450 <read_end_QP>:
	
	static void read_end_QP() {
20036450:	3021fff8 	addik	r1, r1, -8
20036454:	fa610004 	swi	r19, r1, 4
20036458:	12610000 	addk	r19, r1, r0
		decoder_texture_IQ_QP->read_inds[0] = index_QP;
2003645c:	b0002004 	imm	8196
20036460:	e860878c 	lwi	r3, r0, -30836	// 2004878c <decoder_texture_IQ_QP>
20036464:	e863000c 	lwi	r3, r3, 12
20036468:	b0002006 	imm	8198
2003646c:	e8802f58 	lwi	r4, r0, 12120	// 20062f58 <index_QP>
20036470:	f8830000 	swi	r4, r3, 0
	}
20036474:	10330000 	addk	r1, r19, r0
20036478:	ea610004 	lwi	r19, r1, 4
2003647c:	30210008 	addik	r1, r1, 8
20036480:	b60f0008 	rtsd	r15, 8
20036484:	80000000 	or	r0, r0, r0

20036488 <write_OUT>:

	static void write_OUT() {
20036488:	3021ffe0 	addik	r1, r1, -32
2003648c:	f9e10000 	swi	r15, r1, 0
20036490:	fa61001c 	swi	r19, r1, 28
20036494:	12610000 	addk	r19, r1, r0
		index_OUT = (*decoder_texture_IQ_OUT->write_ind);
20036498:	b0002004 	imm	8196
2003649c:	e8608738 	lwi	r3, r0, -30920	// 20048738 <decoder_texture_IQ_OUT>
200364a0:	e8630010 	lwi	r3, r3, 16
200364a4:	e8630000 	lwi	r3, r3, 0
200364a8:	b0002006 	imm	8198
200364ac:	f8602f60 	swi	r3, r0, 12128	// 20062f60 <index_OUT>
		numFree_OUT = index_OUT + fifo_i16_get_room(decoder_texture_IQ_OUT, NUM_READERS_OUT);
200364b0:	b0002004 	imm	8196
200364b4:	e8608738 	lwi	r3, r0, -30920	// 20048738 <decoder_texture_IQ_OUT>
200364b8:	10a30000 	addk	r5, r3, r0
200364bc:	30c00001 	addik	r6, r0, 1
200364c0:	b9f4e384 	brlid	r15, -7292	// 20034844 <fifo_i16_get_room>
200364c4:	80000000 	or	r0, r0, r0
200364c8:	10830000 	addk	r4, r3, r0
200364cc:	b0002006 	imm	8198
200364d0:	e8602f60 	lwi	r3, r0, 12128	// 20062f60 <index_OUT>
200364d4:	10641800 	addk	r3, r4, r3
200364d8:	b0002006 	imm	8198
200364dc:	f8602f64 	swi	r3, r0, 12132	// 20062f64 <numFree_OUT>
	}
200364e0:	e9e10000 	lwi	r15, r1, 0
200364e4:	10330000 	addk	r1, r19, r0
200364e8:	ea61001c 	lwi	r19, r1, 28
200364ec:	30210020 	addik	r1, r1, 32
200364f0:	b60f0008 	rtsd	r15, 8
200364f4:	80000000 	or	r0, r0, r0

200364f8 <write_end_OUT>:
	
	static void write_end_OUT() {
200364f8:	3021fff8 	addik	r1, r1, -8
200364fc:	fa610004 	swi	r19, r1, 4
20036500:	12610000 	addk	r19, r1, r0
		(*decoder_texture_IQ_OUT->write_ind) = index_OUT;
20036504:	b0002004 	imm	8196
20036508:	e8608738 	lwi	r3, r0, -30920	// 20048738 <decoder_texture_IQ_OUT>
2003650c:	e8630010 	lwi	r3, r3, 16
20036510:	b0002006 	imm	8198
20036514:	e8802f60 	lwi	r4, r0, 12128	// 20062f60 <index_OUT>
20036518:	f8830000 	swi	r4, r3, 0
	}
2003651c:	10330000 	addk	r1, r19, r0
20036520:	ea610004 	lwi	r19, r1, 4
20036524:	30210008 	addik	r1, r1, 8
20036528:	b60f0008 	rtsd	r15, 8
2003652c:	80000000 	or	r0, r0, r0

20036530 <Math_abs>:
	////////////////////////////////////////////////////////////////////////////////
	// Functions/procedures
	static i32 Math_abs(i32 x);
	static i32 saturate(i32 x);

	static i32 Math_abs(i32 x) {
20036530:	3021fff4 	addik	r1, r1, -12
20036534:	fa610008 	swi	r19, r1, 8
20036538:	12610000 	addk	r19, r1, r0
2003653c:	f8b30010 	swi	r5, r19, 16
		i32 tmp_if;
	
		if (x > 0) {
20036540:	e8730010 	lwi	r3, r19, 16
20036544:	bc630010 	blei	r3, 16		// 20036554
			tmp_if = x;
20036548:	e8730010 	lwi	r3, r19, 16
2003654c:	f8730004 	swi	r3, r19, 4
20036550:	b8000010 	bri	16		// 20036560
		} else {
			tmp_if = -x;
20036554:	e8730010 	lwi	r3, r19, 16
20036558:	14630000 	rsubk	r3, r3, r0
2003655c:	f8730004 	swi	r3, r19, 4
		}
		return tmp_if;
20036560:	e8730004 	lwi	r3, r19, 4
	}
20036564:	10330000 	addk	r1, r19, r0
20036568:	ea610008 	lwi	r19, r1, 8
2003656c:	3021000c 	addik	r1, r1, 12
20036570:	b60f0008 	rtsd	r15, 8
20036574:	80000000 	or	r0, r0, r0

20036578 <saturate>:
	static i32 saturate(i32 x) {
20036578:	3021ffec 	addik	r1, r1, -20
2003657c:	fa610010 	swi	r19, r1, 16
20036580:	12610000 	addk	r19, r1, r0
20036584:	f8b30018 	swi	r5, r19, 24
		i32 minus;
		i32 plus;
		i32 tmp_if;
	
		minus = x < -2048;
20036588:	30600001 	addik	r3, r0, 1
2003658c:	e8b30018 	lwi	r5, r19, 24
20036590:	3080f800 	addik	r4, r0, -2048
20036594:	16442801 	cmp	r18, r4, r5
20036598:	bc520008 	blti	r18, 8		// 200365a0
2003659c:	10600000 	addk	r3, r0, r0
200365a0:	a46300ff 	andi	r3, r3, 255
200365a4:	f8730008 	swi	r3, r19, 8
		plus = x > 2047;
200365a8:	30600001 	addik	r3, r0, 1
200365ac:	e8b30018 	lwi	r5, r19, 24
200365b0:	308007ff 	addik	r4, r0, 2047
200365b4:	16452001 	cmp	r18, r5, r4
200365b8:	bc520008 	blti	r18, 8		// 200365c0
200365bc:	10600000 	addk	r3, r0, r0
200365c0:	a46300ff 	andi	r3, r3, 255
200365c4:	f873000c 	swi	r3, r19, 12
		if (minus) {
200365c8:	e8730008 	lwi	r3, r19, 8
200365cc:	bc030010 	beqi	r3, 16		// 200365dc
			tmp_if = -2048;
200365d0:	3060f800 	addik	r3, r0, -2048
200365d4:	f8730004 	swi	r3, r19, 4
200365d8:	b8000020 	bri	32		// 200365f8
		} else {
			if (plus) {
200365dc:	e873000c 	lwi	r3, r19, 12
200365e0:	bc030010 	beqi	r3, 16		// 200365f0
				tmp_if = 2047;
200365e4:	306007ff 	addik	r3, r0, 2047
200365e8:	f8730004 	swi	r3, r19, 4
200365ec:	b800000c 	bri	12		// 200365f8
			} else {
				tmp_if = x;
200365f0:	e8730018 	lwi	r3, r19, 24
200365f4:	f8730004 	swi	r3, r19, 4
			}
		}
		return tmp_if;
200365f8:	e8730004 	lwi	r3, r19, 4
	}
200365fc:	10330000 	addk	r1, r19, r0
20036600:	ea610010 	lwi	r19, r1, 16
20036604:	30210014 	addik	r1, r1, 20
20036608:	b60f0008 	rtsd	r15, 8
2003660c:	80000000 	or	r0, r0, r0

20036610 <isSchedulable_get_qp>:

	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_get_qp() {
20036610:	3021fff4 	addik	r1, r1, -12
20036614:	fa610008 	swi	r19, r1, 8
20036618:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2003661c:	30600001 	addik	r3, r0, 1
20036620:	f8730004 	swi	r3, r19, 4
		return result;
20036624:	e8730004 	lwi	r3, r19, 4
	}
20036628:	10330000 	addk	r1, r19, r0
2003662c:	ea610008 	lwi	r19, r1, 8
20036630:	3021000c 	addik	r1, r1, 12
20036634:	b60f0008 	rtsd	r15, 8
20036638:	80000000 	or	r0, r0, r0

2003663c <get_qp>:
	
	static void get_qp() {
2003663c:	3021ffd0 	addik	r1, r1, -48
20036640:	f9e10000 	swi	r15, r1, 0
20036644:	fa61002c 	swi	r19, r1, 44
20036648:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_QP = index_QP % SIZE_QP;
2003664c:	b0002006 	imm	8198
20036650:	e8602f58 	lwi	r3, r0, 12120	// 20062f58 <index_QP>
20036654:	a46301ff 	andi	r3, r3, 511
20036658:	f873001c 	swi	r3, r19, 28
		i32 index_aligned_DC = index_DC % SIZE_DC;
2003665c:	b0002006 	imm	8198
20036660:	e8602f48 	lwi	r3, r0, 12104	// 20062f48 <index_DC>
20036664:	a46301ff 	andi	r3, r3, 511
20036668:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_OUT = index_OUT % SIZE_OUT;
2003666c:	b0002006 	imm	8198
20036670:	e8602f60 	lwi	r3, r0, 12128	// 20062f60 <index_OUT>
20036674:	a46301ff 	andi	r3, r3, 511
20036678:	f8730024 	swi	r3, r19, 36
	
		i8 q;
		i16 i;
	
		q = tokens_QP[(index_QP + (0)) % SIZE_QP];
2003667c:	b0002004 	imm	8196
20036680:	e860878c 	lwi	r3, r0, -30836	// 2004878c <decoder_texture_IQ_QP>
20036684:	e8830004 	lwi	r4, r3, 4
20036688:	b0002006 	imm	8198
2003668c:	e8602f58 	lwi	r3, r0, 12120	// 20062f58 <index_QP>
20036690:	a46301ff 	andi	r3, r3, 511
20036694:	10641800 	addk	r3, r4, r3
20036698:	e0630000 	lbui	r3, r3, 0
2003669c:	f0730028 	sbi	r3, r19, 40
		i = tokens_DC[(index_DC + (0)) % SIZE_DC];
200366a0:	b0002004 	imm	8196
200366a4:	e860876c 	lwi	r3, r0, -30868	// 2004876c <decoder_texture_IQ_DC>
200366a8:	e8830004 	lwi	r4, r3, 4
200366ac:	b0002006 	imm	8198
200366b0:	e8602f48 	lwi	r3, r0, 12104	// 20062f48 <index_DC>
200366b4:	a46301ff 	andi	r3, r3, 511
200366b8:	10631800 	addk	r3, r3, r3
200366bc:	10641800 	addk	r3, r4, r3
200366c0:	e4630000 	lhui	r3, r3, 0
200366c4:	f473002a 	shi	r3, r19, 42
		quant = q;
200366c8:	e0730028 	lbui	r3, r19, 40
200366cc:	b0002006 	imm	8198
200366d0:	f0602f68 	sbi	r3, r0, 12136	// 20062f68 <quant>
		round = q & 1 ^ 1;
200366d4:	e0730028 	lbui	r3, r19, 40
200366d8:	a4830001 	andi	r4, r3, 1
200366dc:	10600000 	addk	r3, r0, r0
200366e0:	88641c00 	pcmpeq	r3, r4, r3
200366e4:	a46300ff 	andi	r3, r3, 255
200366e8:	90630060 	sext8	r3, r3
200366ec:	b0002006 	imm	8198
200366f0:	f0602f69 	sbi	r3, r0, 12137	// 20062f69 <round>
		tokens_OUT[(index_OUT + (0)) % SIZE_OUT] = i;
200366f4:	b0002004 	imm	8196
200366f8:	e8608738 	lwi	r3, r0, -30920	// 20048738 <decoder_texture_IQ_OUT>
200366fc:	e8830004 	lwi	r4, r3, 4
20036700:	b0002006 	imm	8198
20036704:	e8602f60 	lwi	r3, r0, 12128	// 20062f60 <index_OUT>
20036708:	a46301ff 	andi	r3, r3, 511
2003670c:	10631800 	addk	r3, r3, r3
20036710:	10641800 	addk	r3, r4, r3
20036714:	e493002a 	lhui	r4, r19, 42
20036718:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_QP += 1;
2003671c:	b0002006 	imm	8198
20036720:	e8602f58 	lwi	r3, r0, 12120	// 20062f58 <index_QP>
20036724:	30630001 	addik	r3, r3, 1
20036728:	b0002006 	imm	8198
2003672c:	f8602f58 	swi	r3, r0, 12120	// 20062f58 <index_QP>
		index_DC += 1;
20036730:	b0002006 	imm	8198
20036734:	e8602f48 	lwi	r3, r0, 12104	// 20062f48 <index_DC>
20036738:	30630001 	addik	r3, r3, 1
2003673c:	b0002006 	imm	8198
20036740:	f8602f48 	swi	r3, r0, 12104	// 20062f48 <index_DC>
		index_OUT += 1;
20036744:	b0002006 	imm	8198
20036748:	e8602f60 	lwi	r3, r0, 12128	// 20062f60 <index_OUT>
2003674c:	30630001 	addik	r3, r3, 1
20036750:	b0002006 	imm	8198
20036754:	f8602f60 	swi	r3, r0, 12128	// 20062f60 <index_OUT>
		
		read_end_QP();
20036758:	b9f4fcf8 	brlid	r15, -776	// 20036450 <read_end_QP>
2003675c:	80000000 	or	r0, r0, r0
		read_end_DC();
20036760:	b9f4fba0 	brlid	r15, -1120	// 20036300 <read_end_DC>
20036764:	80000000 	or	r0, r0, r0
		write_end_OUT();
20036768:	b9f4fd90 	brlid	r15, -624	// 200364f8 <write_end_OUT>
2003676c:	80000000 	or	r0, r0, r0
	}
20036770:	e9e10000 	lwi	r15, r1, 0
20036774:	10330000 	addk	r1, r19, r0
20036778:	ea61002c 	lwi	r19, r1, 44
2003677c:	30210030 	addik	r1, r1, 48
20036780:	b60f0008 	rtsd	r15, 8
20036784:	80000000 	or	r0, r0, r0

20036788 <isSchedulable_ac>:
	static i32 isSchedulable_ac() {
20036788:	3021fff4 	addik	r1, r1, -12
2003678c:	fa610008 	swi	r19, r1, 8
20036790:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
20036794:	30600001 	addik	r3, r0, 1
20036798:	f8730004 	swi	r3, r19, 4
		return result;
2003679c:	e8730004 	lwi	r3, r19, 4
	}
200367a0:	10330000 	addk	r1, r19, r0
200367a4:	ea610008 	lwi	r19, r1, 8
200367a8:	3021000c 	addik	r1, r1, 12
200367ac:	b60f0008 	rtsd	r15, 8
200367b0:	80000000 	or	r0, r0, r0

200367b4 <ac>:
	
	static void ac() {
200367b4:	3021ffc0 	addik	r1, r1, -64
200367b8:	f9e10000 	swi	r15, r1, 0
200367bc:	fa61003c 	swi	r19, r1, 60
200367c0:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_AC = index_AC % SIZE_AC;
200367c4:	b0002006 	imm	8198
200367c8:	e8602f50 	lwi	r3, r0, 12112	// 20062f50 <index_AC>
200367cc:	a46301ff 	andi	r3, r3, 511
200367d0:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_OUT = index_OUT % SIZE_OUT;
200367d4:	b0002006 	imm	8198
200367d8:	e8602f60 	lwi	r3, r0, 12128	// 20062f60 <index_OUT>
200367dc:	a46301ff 	andi	r3, r3, 511
200367e0:	f8730024 	swi	r3, r19, 36
		i32 tmp_abs;
		i8 local_round;
		i32 tmp_saturate;
		i32 tmp_saturate0;
	
		j = 0;
200367e4:	f813001c 	swi	r0, r19, 28
		while (j <= 62) {
200367e8:	b80001a8 	bri	424		// 20036990
			ac_i = tokens_AC[(index_AC + (j)) % SIZE_AC];
200367ec:	b0002004 	imm	8196
200367f0:	e8608734 	lwi	r3, r0, -30924	// 20048734 <decoder_texture_IQ_AC>
200367f4:	e8830004 	lwi	r4, r3, 4
200367f8:	b0002006 	imm	8198
200367fc:	e8a02f50 	lwi	r5, r0, 12112	// 20062f50 <index_AC>
20036800:	e873001c 	lwi	r3, r19, 28
20036804:	10651800 	addk	r3, r5, r3
20036808:	a46301ff 	andi	r3, r3, 511
2003680c:	10631800 	addk	r3, r3, r3
20036810:	10641800 	addk	r3, r4, r3
20036814:	e4630000 	lhui	r3, r3, 0
20036818:	f4730028 	shi	r3, r19, 40
			local_quant = quant;
2003681c:	b0002006 	imm	8198
20036820:	e0602f68 	lbui	r3, r0, 12136	// 20062f68 <quant>
20036824:	f073002a 	sbi	r3, r19, 42
			tmp_abs = Math_abs(ac_i);
20036828:	e4730028 	lhui	r3, r19, 40
2003682c:	90630061 	sext16	r3, r3
20036830:	10a30000 	addk	r5, r3, r0
20036834:	b9f4fcfc 	brlid	r15, -772	// 20036530 <Math_abs>
20036838:	80000000 	or	r0, r0, r0
2003683c:	f873002c 	swi	r3, r19, 44
			local_round = round;
20036840:	b0002006 	imm	8198
20036844:	e0602f69 	lbui	r3, r0, 12137	// 20062f69 <round>
20036848:	f0730030 	sbi	r3, r19, 48
			iq = local_quant * ((tmp_abs << 1) + 1) - local_round;
2003684c:	e073002a 	lbui	r3, r19, 42
20036850:	90630060 	sext8	r3, r3
20036854:	b0000000 	imm	0
20036858:	a483ffff 	andi	r4, r3, -1
2003685c:	e873002c 	lwi	r3, r19, 44
20036860:	10631800 	addk	r3, r3, r3
20036864:	30630001 	addik	r3, r3, 1
20036868:	b0000000 	imm	0
2003686c:	a463ffff 	andi	r3, r3, -1
20036870:	40641800 	mul	r3, r4, r3
20036874:	b0000000 	imm	0
20036878:	a483ffff 	andi	r4, r3, -1
2003687c:	e0730030 	lbui	r3, r19, 48
20036880:	90630060 	sext8	r3, r3
20036884:	b0000000 	imm	0
20036888:	a463ffff 	andi	r3, r3, -1
2003688c:	14632000 	rsubk	r3, r3, r4
20036890:	b0000000 	imm	0
20036894:	a463ffff 	andi	r3, r3, -1
20036898:	f4730032 	shi	r3, r19, 50
			if (ac_i == 0) {
2003689c:	e4730028 	lhui	r3, r19, 40
200368a0:	90630061 	sext16	r3, r3
200368a4:	bc230034 	bnei	r3, 52		// 200368d8
				tokens_OUT[(index_OUT + (j)) % SIZE_OUT] = 0;
200368a8:	b0002004 	imm	8196
200368ac:	e8608738 	lwi	r3, r0, -30920	// 20048738 <decoder_texture_IQ_OUT>
200368b0:	e8830004 	lwi	r4, r3, 4
200368b4:	b0002006 	imm	8198
200368b8:	e8a02f60 	lwi	r5, r0, 12128	// 20062f60 <index_OUT>
200368bc:	e873001c 	lwi	r3, r19, 28
200368c0:	10651800 	addk	r3, r5, r3
200368c4:	a46301ff 	andi	r3, r3, 511
200368c8:	10631800 	addk	r3, r3, r3
200368cc:	10641800 	addk	r3, r4, r3
200368d0:	f4030000 	shi	r0, r3, 0
200368d4:	b80000b0 	bri	176		// 20036984
			} else {
				if (ac_i < 0) {
200368d8:	e4730028 	lhui	r3, r19, 40
200368dc:	90630061 	sext16	r3, r3
200368e0:	bca30058 	bgei	r3, 88		// 20036938
					tmp_saturate = saturate(-iq);
200368e4:	e4730032 	lhui	r3, r19, 50
200368e8:	90630061 	sext16	r3, r3
200368ec:	14630000 	rsubk	r3, r3, r0
200368f0:	10a30000 	addk	r5, r3, r0
200368f4:	b9f4fc84 	brlid	r15, -892	// 20036578 <saturate>
200368f8:	80000000 	or	r0, r0, r0
200368fc:	f8730034 	swi	r3, r19, 52
					tokens_OUT[(index_OUT + (j)) % SIZE_OUT] = tmp_saturate;
20036900:	b0002004 	imm	8196
20036904:	e8608738 	lwi	r3, r0, -30920	// 20048738 <decoder_texture_IQ_OUT>
20036908:	e8830004 	lwi	r4, r3, 4
2003690c:	b0002006 	imm	8198
20036910:	e8a02f60 	lwi	r5, r0, 12128	// 20062f60 <index_OUT>
20036914:	e873001c 	lwi	r3, r19, 28
20036918:	10651800 	addk	r3, r5, r3
2003691c:	a46301ff 	andi	r3, r3, 511
20036920:	10631800 	addk	r3, r3, r3
20036924:	10641800 	addk	r3, r4, r3
20036928:	e8930034 	lwi	r4, r19, 52
2003692c:	90840061 	sext16	r4, r4
20036930:	f4830000 	shi	r4, r3, 0
20036934:	b8000050 	bri	80		// 20036984
				} else {
					tmp_saturate0 = saturate(iq);
20036938:	e4730032 	lhui	r3, r19, 50
2003693c:	90630061 	sext16	r3, r3
20036940:	10a30000 	addk	r5, r3, r0
20036944:	b9f4fc34 	brlid	r15, -972	// 20036578 <saturate>
20036948:	80000000 	or	r0, r0, r0
2003694c:	f8730038 	swi	r3, r19, 56
					tokens_OUT[(index_OUT + (j)) % SIZE_OUT] = tmp_saturate0;
20036950:	b0002004 	imm	8196
20036954:	e8608738 	lwi	r3, r0, -30920	// 20048738 <decoder_texture_IQ_OUT>
20036958:	e8830004 	lwi	r4, r3, 4
2003695c:	b0002006 	imm	8198
20036960:	e8a02f60 	lwi	r5, r0, 12128	// 20062f60 <index_OUT>
20036964:	e873001c 	lwi	r3, r19, 28
20036968:	10651800 	addk	r3, r5, r3
2003696c:	a46301ff 	andi	r3, r3, 511
20036970:	10631800 	addk	r3, r3, r3
20036974:	10641800 	addk	r3, r4, r3
20036978:	e8930038 	lwi	r4, r19, 56
2003697c:	90840061 	sext16	r4, r4
20036980:	f4830000 	shi	r4, r3, 0
				}
			}
			j = j + 1;
20036984:	e873001c 	lwi	r3, r19, 28
20036988:	30630001 	addik	r3, r3, 1
2003698c:	f873001c 	swi	r3, r19, 28
		i8 local_round;
		i32 tmp_saturate;
		i32 tmp_saturate0;
	
		j = 0;
		while (j <= 62) {
20036990:	e893001c 	lwi	r4, r19, 28
20036994:	3060003e 	addik	r3, r0, 62
20036998:	16441801 	cmp	r18, r4, r3
2003699c:	bcb2fe50 	bgei	r18, -432		// 200367ec
			}
			j = j + 1;
		}
	
		// Update ports indexes
		index_AC += 63;
200369a0:	b0002006 	imm	8198
200369a4:	e8602f50 	lwi	r3, r0, 12112	// 20062f50 <index_AC>
200369a8:	3063003f 	addik	r3, r3, 63
200369ac:	b0002006 	imm	8198
200369b0:	f8602f50 	swi	r3, r0, 12112	// 20062f50 <index_AC>
		index_OUT += 63;
200369b4:	b0002006 	imm	8198
200369b8:	e8602f60 	lwi	r3, r0, 12128	// 20062f60 <index_OUT>
200369bc:	3063003f 	addik	r3, r3, 63
200369c0:	b0002006 	imm	8198
200369c4:	f8602f60 	swi	r3, r0, 12128	// 20062f60 <index_OUT>
		
		read_end_AC();
200369c8:	b9f4f9e0 	brlid	r15, -1568	// 200363a8 <read_end_AC>
200369cc:	80000000 	or	r0, r0, r0
		write_end_OUT();
200369d0:	b9f4fb28 	brlid	r15, -1240	// 200364f8 <write_end_OUT>
200369d4:	80000000 	or	r0, r0, r0
	}
200369d8:	e9e10000 	lwi	r15, r1, 0
200369dc:	10330000 	addk	r1, r19, r0
200369e0:	ea61003c 	lwi	r19, r1, 60
200369e4:	30210040 	addik	r1, r1, 64
200369e8:	b60f0008 	rtsd	r15, 8
200369ec:	80000000 	or	r0, r0, r0

200369f0 <decoder_texture_IQ_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_texture_IQ_initialize() {
200369f0:	3021fff4 	addik	r1, r1, -12
200369f4:	fa610008 	swi	r19, r1, 8
200369f8:	12610000 	addk	r19, r1, r0
		int i = 0;
200369fc:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_start;
20036a00:	30600001 	addik	r3, r0, 1
20036a04:	b0002006 	imm	8198
20036a08:	f8602f6c 	swi	r3, r0, 12140	// 20062f6c <_FSM_state>
		
	finished:
		// no read_end/write_end here!
		return;
20036a0c:	80000000 	or	r0, r0, r0
	}
20036a10:	10330000 	addk	r1, r19, r0
20036a14:	ea610008 	lwi	r19, r1, 8
20036a18:	3021000c 	addik	r1, r1, 12
20036a1c:	b60f0008 	rtsd	r15, 8
20036a20:	80000000 	or	r0, r0, r0

20036a24 <decoder_texture_IQ_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	
	int decoder_texture_IQ_scheduler() {
20036a24:	3021ffd4 	addik	r1, r1, -44
20036a28:	f9e10000 	swi	r15, r1, 0
20036a2c:	fa610028 	swi	r19, r1, 40
20036a30:	12610000 	addk	r19, r1, r0
		int i = 0;
20036a34:	f813001c 	swi	r0, r19, 28
		if(needInit){
20036a38:	b0002004 	imm	8196
20036a3c:	e06087b4 	lbui	r3, r0, -30796	// 200487b4 <needInit>
20036a40:	bc030014 	beqi	r3, 20		// 20036a54
			decoder_texture_IQ_initialize();
20036a44:	b9f4ffac 	brlid	r15, -84	// 200369f0 <decoder_texture_IQ_initialize>
20036a48:	80000000 	or	r0, r0, r0
			needInit = 0;
20036a4c:	b0002004 	imm	8196
20036a50:	f00087b4 	sbi	r0, r0, -30796	// 200487b4 <needInit>
		}
	
		read_DC();
20036a54:	b9f4f83c 	brlid	r15, -1988	// 20036290 <read_DC>
20036a58:	80000000 	or	r0, r0, r0
		read_AC();
20036a5c:	b9f4f8dc 	brlid	r15, -1828	// 20036338 <read_AC>
20036a60:	80000000 	or	r0, r0, r0
		read_QP();
20036a64:	b9f4f97c 	brlid	r15, -1668	// 200363e0 <read_QP>
20036a68:	80000000 	or	r0, r0, r0
		write_OUT();
20036a6c:	b9f4fa1c 	brlid	r15, -1508	// 20036488 <write_OUT>
20036a70:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
20036a74:	b0002006 	imm	8198
20036a78:	e8602f6c 	lwi	r3, r0, 12140	// 20062f6c <_FSM_state>
20036a7c:	bc03001c 	beqi	r3, 28		// 20036a98
20036a80:	a8630001 	xori	r3, r3, 1
20036a84:	bc0300b4 	beqi	r3, 180		// 20036b38
		case my_state_ac:
			goto l_ac;
		case my_state_start:
			goto l_start;
		default:
			exit(1);
20036a88:	30a00001 	addik	r5, r0, 1
20036a8c:	b000dffc 	imm	-8196
20036a90:	b9f49908 	brlid	r15, -26360	// 398 <exit>
20036a94:	80000000 	or	r0, r0, r0
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_ac:
			goto l_ac;
20036a98:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_ac:
			if (numTokens_AC - index_AC >= 63 && isSchedulable_ac()) {
20036a9c:	b0002006 	imm	8198
20036aa0:	e8802f54 	lwi	r4, r0, 12116	// 20062f54 <numTokens_AC>
20036aa4:	b0002006 	imm	8198
20036aa8:	e8602f50 	lwi	r3, r0, 12112	// 20062f50 <index_AC>
20036aac:	14832000 	rsubk	r4, r3, r4
20036ab0:	3060003e 	addik	r3, r0, 62
20036ab4:	16441803 	cmpu	r18, r4, r3
20036ab8:	bcb20074 	bgei	r18, 116		// 20036b2c
20036abc:	b9f4fccc 	brlid	r15, -820	// 20036788 <isSchedulable_ac>
20036ac0:	80000000 	or	r0, r0, r0
20036ac4:	bc030068 	beqi	r3, 104		// 20036b2c
				int stop = 0;
20036ac8:	f8130020 	swi	r0, r19, 32
				if (63 > SIZE_OUT - index_OUT + decoder_texture_IQ_OUT->read_inds[0]) {
20036acc:	b0002004 	imm	8196
20036ad0:	e8608738 	lwi	r3, r0, -30920	// 20048738 <decoder_texture_IQ_OUT>
20036ad4:	e863000c 	lwi	r3, r3, 12
20036ad8:	e8830000 	lwi	r4, r3, 0
20036adc:	b0002006 	imm	8198
20036ae0:	e8602f60 	lwi	r3, r0, 12128	// 20062f60 <index_OUT>
20036ae4:	14632000 	rsubk	r3, r3, r4
20036ae8:	30830200 	addik	r4, r3, 512
20036aec:	3060003e 	addik	r3, r0, 62
20036af0:	16441803 	cmpu	r18, r4, r3
20036af4:	bc52000c 	blti	r18, 12		// 20036b00
					stop = 1;
20036af8:	30600001 	addik	r3, r0, 1
20036afc:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
20036b00:	e8730020 	lwi	r3, r19, 32
20036b04:	bc030010 	beqi	r3, 16		// 20036b14
					_FSM_state = my_state_ac;
20036b08:	b0002006 	imm	8198
20036b0c:	f8002f6c 	swi	r0, r0, 12140	// 20062f6c <_FSM_state>
					goto finished;
20036b10:	b80000d8 	bri	216		// 20036be8
				}
				ac();
20036b14:	b9f4fca0 	brlid	r15, -864	// 200367b4 <ac>
20036b18:	80000000 	or	r0, r0, r0
				i++;
20036b1c:	e873001c 	lwi	r3, r19, 28
20036b20:	30630001 	addik	r3, r3, 1
20036b24:	f873001c 	swi	r3, r19, 28
				goto l_start;
20036b28:	b8000014 	bri	20		// 20036b3c
			} else {
				_FSM_state = my_state_ac;
20036b2c:	b0002006 	imm	8198
20036b30:	f8002f6c 	swi	r0, r0, 12140	// 20062f6c <_FSM_state>
				goto finished;
20036b34:	b80000b4 	bri	180		// 20036be8
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_ac:
			goto l_ac;
		case my_state_start:
			goto l_start;
20036b38:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_ac;
				goto finished;
			}
		l_start:
			if (numTokens_QP - index_QP >= 1 && numTokens_DC - index_DC >= 1 && isSchedulable_get_qp()) {
20036b3c:	b0002006 	imm	8198
20036b40:	e8802f5c 	lwi	r4, r0, 12124	// 20062f5c <numTokens_QP>
20036b44:	b0002006 	imm	8198
20036b48:	e8602f58 	lwi	r3, r0, 12120	// 20062f58 <index_QP>
20036b4c:	88641800 	xor	r3, r4, r3
20036b50:	bc030088 	beqi	r3, 136		// 20036bd8
20036b54:	b0002006 	imm	8198
20036b58:	e8802f4c 	lwi	r4, r0, 12108	// 20062f4c <numTokens_DC>
20036b5c:	b0002006 	imm	8198
20036b60:	e8602f48 	lwi	r3, r0, 12104	// 20062f48 <index_DC>
20036b64:	88641800 	xor	r3, r4, r3
20036b68:	bc030070 	beqi	r3, 112		// 20036bd8
20036b6c:	b9f4faa4 	brlid	r15, -1372	// 20036610 <isSchedulable_get_qp>
20036b70:	80000000 	or	r0, r0, r0
20036b74:	bc030064 	beqi	r3, 100		// 20036bd8
				int stop = 0;
20036b78:	f8130024 	swi	r0, r19, 36
				if (1 > SIZE_OUT - index_OUT + decoder_texture_IQ_OUT->read_inds[0]) {
20036b7c:	b0002004 	imm	8196
20036b80:	e8608738 	lwi	r3, r0, -30920	// 20048738 <decoder_texture_IQ_OUT>
20036b84:	e863000c 	lwi	r3, r3, 12
20036b88:	e8830000 	lwi	r4, r3, 0
20036b8c:	b0002006 	imm	8198
20036b90:	e8602f60 	lwi	r3, r0, 12128	// 20062f60 <index_OUT>
20036b94:	14632000 	rsubk	r3, r3, r4
20036b98:	a863fe00 	xori	r3, r3, -512
20036b9c:	bc23000c 	bnei	r3, 12		// 20036ba8
					stop = 1;
20036ba0:	30600001 	addik	r3, r0, 1
20036ba4:	f8730024 	swi	r3, r19, 36
				}
				if (stop != 0) {
20036ba8:	e8730024 	lwi	r3, r19, 36
20036bac:	bc030014 	beqi	r3, 20		// 20036bc0
					_FSM_state = my_state_start;
20036bb0:	30600001 	addik	r3, r0, 1
20036bb4:	b0002006 	imm	8198
20036bb8:	f8602f6c 	swi	r3, r0, 12140	// 20062f6c <_FSM_state>
					goto finished;
20036bbc:	b800002c 	bri	44		// 20036be8
				}
				get_qp();
20036bc0:	b9f4fa7c 	brlid	r15, -1412	// 2003663c <get_qp>
20036bc4:	80000000 	or	r0, r0, r0
				i++;
20036bc8:	e873001c 	lwi	r3, r19, 28
20036bcc:	30630001 	addik	r3, r3, 1
20036bd0:	f873001c 	swi	r3, r19, 28
				goto l_ac;
20036bd4:	b800fec8 	bri	-312		// 20036a9c
			} else {
				_FSM_state = my_state_start;
20036bd8:	30600001 	addik	r3, r0, 1
20036bdc:	b0002006 	imm	8198
20036be0:	f8602f6c 	swi	r3, r0, 12140	// 20062f6c <_FSM_state>
				goto finished;
20036be4:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_DC();
20036be8:	b9f4f718 	brlid	r15, -2280	// 20036300 <read_end_DC>
20036bec:	80000000 	or	r0, r0, r0
		read_end_AC();
20036bf0:	b9f4f7b8 	brlid	r15, -2120	// 200363a8 <read_end_AC>
20036bf4:	80000000 	or	r0, r0, r0
		read_end_QP();
20036bf8:	b9f4f858 	brlid	r15, -1960	// 20036450 <read_end_QP>
20036bfc:	80000000 	or	r0, r0, r0
		
		write_end_OUT();
20036c00:	b9f4f8f8 	brlid	r15, -1800	// 200364f8 <write_end_OUT>
20036c04:	80000000 	or	r0, r0, r0
		
		
		return i;
20036c08:	e873001c 	lwi	r3, r19, 28
	}
20036c0c:	e9e10000 	lwi	r15, r1, 0
20036c10:	10330000 	addk	r1, r19, r0
20036c14:	ea610028 	lwi	r19, r1, 40
20036c18:	3021002c 	addik	r1, r1, 44
20036c1c:	b60f0008 	rtsd	r15, 8
20036c20:	80000000 	or	r0, r0, r0

20036c24 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20036c24:	3021fff8 	addik	r1, r1, -8
20036c28:	fa610004 	swi	r19, r1, 4
20036c2c:	12610000 	addk	r19, r1, r0
20036c30:	f8b3000c 	swi	r5, r19, 12
20036c34:	f8d30010 	swi	r6, r19, 16
20036c38:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20036c3c:	e873000c 	lwi	r3, r19, 12
20036c40:	e8630010 	lwi	r3, r3, 16
20036c44:	e8830000 	lwi	r4, r3, 0
20036c48:	e873000c 	lwi	r3, r19, 12
20036c4c:	e8a3000c 	lwi	r5, r3, 12
20036c50:	e8730010 	lwi	r3, r19, 16
20036c54:	64630402 	bslli	r3, r3, 2
20036c58:	10651800 	addk	r3, r5, r3
20036c5c:	e8630000 	lwi	r3, r3, 0
20036c60:	14a32000 	rsubk	r5, r3, r4
20036c64:	30600001 	addik	r3, r0, 1
20036c68:	e8930014 	lwi	r4, r19, 20
20036c6c:	16442803 	cmpu	r18, r4, r5
20036c70:	bcb20008 	bgei	r18, 8		// 20036c78
20036c74:	10600000 	addk	r3, r0, r0
20036c78:	a46300ff 	andi	r3, r3, 255
}
20036c7c:	10330000 	addk	r1, r19, r0
20036c80:	ea610004 	lwi	r19, r1, 4
20036c84:	30210008 	addik	r1, r1, 8
20036c88:	b60f0008 	rtsd	r15, 8
20036c8c:	80000000 	or	r0, r0, r0

20036c90 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20036c90:	3021fff8 	addik	r1, r1, -8
20036c94:	fa610004 	swi	r19, r1, 4
20036c98:	12610000 	addk	r19, r1, r0
20036c9c:	f8b3000c 	swi	r5, r19, 12
20036ca0:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20036ca4:	e873000c 	lwi	r3, r19, 12
20036ca8:	e8630010 	lwi	r3, r3, 16
20036cac:	e8830000 	lwi	r4, r3, 0
20036cb0:	e873000c 	lwi	r3, r19, 12
20036cb4:	e8a3000c 	lwi	r5, r3, 12
20036cb8:	e8730010 	lwi	r3, r19, 16
20036cbc:	64630402 	bslli	r3, r3, 2
20036cc0:	10651800 	addk	r3, r5, r3
20036cc4:	e8630000 	lwi	r3, r3, 0
20036cc8:	14632000 	rsubk	r3, r3, r4
}
20036ccc:	10330000 	addk	r1, r19, r0
20036cd0:	ea610004 	lwi	r19, r1, 4
20036cd4:	30210008 	addik	r1, r1, 8
20036cd8:	b60f0008 	rtsd	r15, 8
20036cdc:	80000000 	or	r0, r0, r0

20036ce0 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20036ce0:	3021fff4 	addik	r1, r1, -12
20036ce4:	fa610008 	swi	r19, r1, 8
20036ce8:	12610000 	addk	r19, r1, r0
20036cec:	f8b30010 	swi	r5, r19, 16
20036cf0:	f8d30014 	swi	r6, r19, 20
20036cf4:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20036cf8:	f8130004 	swi	r0, r19, 4
20036cfc:	b800005c 	bri	92		// 20036d58
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20036d00:	e8730010 	lwi	r3, r19, 16
20036d04:	e8830000 	lwi	r4, r3, 0
20036d08:	e8730010 	lwi	r3, r19, 16
20036d0c:	e8a3000c 	lwi	r5, r3, 12
20036d10:	e8730004 	lwi	r3, r19, 4
20036d14:	64630402 	bslli	r3, r3, 2
20036d18:	10651800 	addk	r3, r5, r3
20036d1c:	e8a30000 	lwi	r5, r3, 0
20036d20:	e8730010 	lwi	r3, r19, 16
20036d24:	e8630010 	lwi	r3, r3, 16
20036d28:	e8630000 	lwi	r3, r3, 0
20036d2c:	14632800 	rsubk	r3, r3, r5
20036d30:	10641800 	addk	r3, r4, r3
20036d34:	30830001 	addik	r4, r3, 1
20036d38:	e8730018 	lwi	r3, r19, 24
20036d3c:	16441803 	cmpu	r18, r4, r3
20036d40:	bc52000c 	blti	r18, 12		// 20036d4c
            return 0;
20036d44:	10600000 	addk	r3, r0, r0
20036d48:	b8000024 	bri	36		// 20036d6c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20036d4c:	e8730004 	lwi	r3, r19, 4
20036d50:	30630001 	addik	r3, r3, 1
20036d54:	f8730004 	swi	r3, r19, 4
20036d58:	e8930004 	lwi	r4, r19, 4
20036d5c:	e8730014 	lwi	r3, r19, 20
20036d60:	16432003 	cmpu	r18, r3, r4
20036d64:	bc52ff9c 	blti	r18, -100		// 20036d00
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20036d68:	30600001 	addik	r3, r0, 1
}
20036d6c:	10330000 	addk	r1, r19, r0
20036d70:	ea610008 	lwi	r19, r1, 8
20036d74:	3021000c 	addik	r1, r1, 12
20036d78:	b60f0008 	rtsd	r15, 8
20036d7c:	80000000 	or	r0, r0, r0

20036d80 <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20036d80:	3021ffec 	addik	r1, r1, -20
20036d84:	fa610010 	swi	r19, r1, 16
20036d88:	12610000 	addk	r19, r1, r0
20036d8c:	f8b30018 	swi	r5, r19, 24
20036d90:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20036d94:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20036d98:	f8130004 	swi	r0, r19, 4
20036d9c:	b8000054 	bri	84		// 20036df0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20036da0:	e8730018 	lwi	r3, r19, 24
20036da4:	e8630010 	lwi	r3, r3, 16
20036da8:	e8830000 	lwi	r4, r3, 0
20036dac:	e8730018 	lwi	r3, r19, 24
20036db0:	e8a3000c 	lwi	r5, r3, 12
20036db4:	e8730004 	lwi	r3, r19, 4
20036db8:	64630402 	bslli	r3, r3, 2
20036dbc:	10651800 	addk	r3, r5, r3
20036dc0:	e8630000 	lwi	r3, r3, 0
20036dc4:	14632000 	rsubk	r3, r3, r4
20036dc8:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20036dcc:	e8930008 	lwi	r4, r19, 8
20036dd0:	e873000c 	lwi	r3, r19, 12
20036dd4:	16441803 	cmpu	r18, r4, r3
20036dd8:	bcb20008 	bgei	r18, 8		// 20036de0
20036ddc:	10640000 	addk	r3, r4, r0
20036de0:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20036de4:	e8730004 	lwi	r3, r19, 4
20036de8:	30630001 	addik	r3, r3, 1
20036dec:	f8730004 	swi	r3, r19, 4
20036df0:	e8930004 	lwi	r4, r19, 4
20036df4:	e873001c 	lwi	r3, r19, 28
20036df8:	16432003 	cmpu	r18, r3, r4
20036dfc:	bc52ffa4 	blti	r18, -92		// 20036da0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20036e00:	e8730018 	lwi	r3, r19, 24
20036e04:	e8830000 	lwi	r4, r3, 0
20036e08:	e8730008 	lwi	r3, r19, 8
20036e0c:	14632000 	rsubk	r3, r3, r4
}
20036e10:	10330000 	addk	r1, r19, r0
20036e14:	ea610010 	lwi	r19, r1, 16
20036e18:	30210014 	addik	r1, r1, 20
20036e1c:	b60f0008 	rtsd	r15, 8
20036e20:	80000000 	or	r0, r0, r0

20036e24 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20036e24:	3021fff4 	addik	r1, r1, -12
20036e28:	fa610008 	swi	r19, r1, 8
20036e2c:	12610000 	addk	r19, r1, r0
20036e30:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20036e34:	e8730010 	lwi	r3, r19, 16
20036e38:	e8630010 	lwi	r3, r3, 16
20036e3c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20036e40:	f8130004 	swi	r0, r19, 4
20036e44:	b8000028 	bri	40		// 20036e6c
        fifo->read_inds[i] = 0;
20036e48:	e8730010 	lwi	r3, r19, 16
20036e4c:	e883000c 	lwi	r4, r3, 12
20036e50:	e8730004 	lwi	r3, r19, 4
20036e54:	64630402 	bslli	r3, r3, 2
20036e58:	10641800 	addk	r3, r4, r3
20036e5c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20036e60:	e8730004 	lwi	r3, r19, 4
20036e64:	30630001 	addik	r3, r3, 1
20036e68:	f8730004 	swi	r3, r19, 4
20036e6c:	e8730010 	lwi	r3, r19, 16
20036e70:	e8830008 	lwi	r4, r3, 8
20036e74:	e8730004 	lwi	r3, r19, 4
20036e78:	16441803 	cmpu	r18, r4, r3
20036e7c:	bc52ffcc 	blti	r18, -52		// 20036e48
        fifo->read_inds[i] = 0;
    }
}
20036e80:	10330000 	addk	r1, r19, r0
20036e84:	ea610008 	lwi	r19, r1, 8
20036e88:	3021000c 	addik	r1, r1, 12
20036e8c:	b60f0008 	rtsd	r15, 8
20036e90:	80000000 	or	r0, r0, r0

20036e94 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20036e94:	3021fff4 	addik	r1, r1, -12
20036e98:	fa610008 	swi	r19, r1, 8
20036e9c:	12610000 	addk	r19, r1, r0
20036ea0:	f8b30010 	swi	r5, r19, 16
20036ea4:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20036ea8:	e8730010 	lwi	r3, r19, 16
20036eac:	e8830004 	lwi	r4, r3, 4
20036eb0:	e8730010 	lwi	r3, r19, 16
20036eb4:	e8a3000c 	lwi	r5, r3, 12
20036eb8:	e8730014 	lwi	r3, r19, 20
20036ebc:	64630402 	bslli	r3, r3, 2
20036ec0:	10651800 	addk	r3, r5, r3
20036ec4:	e8a30000 	lwi	r5, r3, 0
20036ec8:	e8730010 	lwi	r3, r19, 16
20036ecc:	e8630000 	lwi	r3, r3, 0
20036ed0:	3063ffff 	addik	r3, r3, -1
20036ed4:	84651800 	and	r3, r5, r3
20036ed8:	10641800 	addk	r3, r4, r3
20036edc:	e0630000 	lbui	r3, r3, 0
20036ee0:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20036ee4:	e8730010 	lwi	r3, r19, 16
20036ee8:	e883000c 	lwi	r4, r3, 12
20036eec:	e8730014 	lwi	r3, r19, 20
20036ef0:	64630402 	bslli	r3, r3, 2
20036ef4:	10641800 	addk	r3, r4, r3
20036ef8:	e8830000 	lwi	r4, r3, 0
20036efc:	30840001 	addik	r4, r4, 1
20036f00:	f8830000 	swi	r4, r3, 0
    return value;
20036f04:	e0730004 	lbui	r3, r19, 4
20036f08:	90630060 	sext8	r3, r3
}
20036f0c:	10330000 	addk	r1, r19, r0
20036f10:	ea610008 	lwi	r19, r1, 8
20036f14:	3021000c 	addik	r1, r1, 12
20036f18:	b60f0008 	rtsd	r15, 8
20036f1c:	80000000 	or	r0, r0, r0

20036f20 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20036f20:	3021fff8 	addik	r1, r1, -8
20036f24:	fa610004 	swi	r19, r1, 4
20036f28:	12610000 	addk	r19, r1, r0
20036f2c:	f8b3000c 	swi	r5, r19, 12
20036f30:	10660000 	addk	r3, r6, r0
20036f34:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20036f38:	e873000c 	lwi	r3, r19, 12
20036f3c:	e8830004 	lwi	r4, r3, 4
20036f40:	e873000c 	lwi	r3, r19, 12
20036f44:	e8630010 	lwi	r3, r3, 16
20036f48:	e8a30000 	lwi	r5, r3, 0
20036f4c:	e873000c 	lwi	r3, r19, 12
20036f50:	e8630000 	lwi	r3, r3, 0
20036f54:	3063ffff 	addik	r3, r3, -1
20036f58:	84651800 	and	r3, r5, r3
20036f5c:	10641800 	addk	r3, r4, r3
20036f60:	e0930010 	lbui	r4, r19, 16
20036f64:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20036f68:	e873000c 	lwi	r3, r19, 12
20036f6c:	e8630010 	lwi	r3, r3, 16
20036f70:	e8830000 	lwi	r4, r3, 0
20036f74:	30840001 	addik	r4, r4, 1
20036f78:	f8830000 	swi	r4, r3, 0
}
20036f7c:	10330000 	addk	r1, r19, r0
20036f80:	ea610004 	lwi	r19, r1, 4
20036f84:	30210008 	addik	r1, r1, 8
20036f88:	b60f0008 	rtsd	r15, 8
20036f8c:	80000000 	or	r0, r0, r0

20036f90 <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20036f90:	3021fff8 	addik	r1, r1, -8
20036f94:	fa610004 	swi	r19, r1, 4
20036f98:	12610000 	addk	r19, r1, r0
20036f9c:	f8b3000c 	swi	r5, r19, 12
20036fa0:	f8d30010 	swi	r6, r19, 16
20036fa4:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20036fa8:	e873000c 	lwi	r3, r19, 12
20036fac:	e8630010 	lwi	r3, r3, 16
20036fb0:	e8830000 	lwi	r4, r3, 0
20036fb4:	e873000c 	lwi	r3, r19, 12
20036fb8:	e8a3000c 	lwi	r5, r3, 12
20036fbc:	e8730010 	lwi	r3, r19, 16
20036fc0:	64630402 	bslli	r3, r3, 2
20036fc4:	10651800 	addk	r3, r5, r3
20036fc8:	e8630000 	lwi	r3, r3, 0
20036fcc:	14a32000 	rsubk	r5, r3, r4
20036fd0:	30600001 	addik	r3, r0, 1
20036fd4:	e8930014 	lwi	r4, r19, 20
20036fd8:	16442803 	cmpu	r18, r4, r5
20036fdc:	bcb20008 	bgei	r18, 8		// 20036fe4
20036fe0:	10600000 	addk	r3, r0, r0
20036fe4:	a46300ff 	andi	r3, r3, 255
}
20036fe8:	10330000 	addk	r1, r19, r0
20036fec:	ea610004 	lwi	r19, r1, 4
20036ff0:	30210008 	addik	r1, r1, 8
20036ff4:	b60f0008 	rtsd	r15, 8
20036ff8:	80000000 	or	r0, r0, r0

20036ffc <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20036ffc:	3021fff8 	addik	r1, r1, -8
20037000:	fa610004 	swi	r19, r1, 4
20037004:	12610000 	addk	r19, r1, r0
20037008:	f8b3000c 	swi	r5, r19, 12
2003700c:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20037010:	e873000c 	lwi	r3, r19, 12
20037014:	e8630010 	lwi	r3, r3, 16
20037018:	e8830000 	lwi	r4, r3, 0
2003701c:	e873000c 	lwi	r3, r19, 12
20037020:	e8a3000c 	lwi	r5, r3, 12
20037024:	e8730010 	lwi	r3, r19, 16
20037028:	64630402 	bslli	r3, r3, 2
2003702c:	10651800 	addk	r3, r5, r3
20037030:	e8630000 	lwi	r3, r3, 0
20037034:	14632000 	rsubk	r3, r3, r4
}
20037038:	10330000 	addk	r1, r19, r0
2003703c:	ea610004 	lwi	r19, r1, 4
20037040:	30210008 	addik	r1, r1, 8
20037044:	b60f0008 	rtsd	r15, 8
20037048:	80000000 	or	r0, r0, r0

2003704c <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003704c:	3021fff4 	addik	r1, r1, -12
20037050:	fa610008 	swi	r19, r1, 8
20037054:	12610000 	addk	r19, r1, r0
20037058:	f8b30010 	swi	r5, r19, 16
2003705c:	f8d30014 	swi	r6, r19, 20
20037060:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20037064:	f8130004 	swi	r0, r19, 4
20037068:	b800005c 	bri	92		// 200370c4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003706c:	e8730010 	lwi	r3, r19, 16
20037070:	e8830000 	lwi	r4, r3, 0
20037074:	e8730010 	lwi	r3, r19, 16
20037078:	e8a3000c 	lwi	r5, r3, 12
2003707c:	e8730004 	lwi	r3, r19, 4
20037080:	64630402 	bslli	r3, r3, 2
20037084:	10651800 	addk	r3, r5, r3
20037088:	e8a30000 	lwi	r5, r3, 0
2003708c:	e8730010 	lwi	r3, r19, 16
20037090:	e8630010 	lwi	r3, r3, 16
20037094:	e8630000 	lwi	r3, r3, 0
20037098:	14632800 	rsubk	r3, r3, r5
2003709c:	10641800 	addk	r3, r4, r3
200370a0:	30830001 	addik	r4, r3, 1
200370a4:	e8730018 	lwi	r3, r19, 24
200370a8:	16441803 	cmpu	r18, r4, r3
200370ac:	bc52000c 	blti	r18, 12		// 200370b8
            return 0;
200370b0:	10600000 	addk	r3, r0, r0
200370b4:	b8000024 	bri	36		// 200370d8
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200370b8:	e8730004 	lwi	r3, r19, 4
200370bc:	30630001 	addik	r3, r3, 1
200370c0:	f8730004 	swi	r3, r19, 4
200370c4:	e8930004 	lwi	r4, r19, 4
200370c8:	e8730014 	lwi	r3, r19, 20
200370cc:	16432003 	cmpu	r18, r3, r4
200370d0:	bc52ff9c 	blti	r18, -100		// 2003706c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200370d4:	30600001 	addik	r3, r0, 1
}
200370d8:	10330000 	addk	r1, r19, r0
200370dc:	ea610008 	lwi	r19, r1, 8
200370e0:	3021000c 	addik	r1, r1, 12
200370e4:	b60f0008 	rtsd	r15, 8
200370e8:	80000000 	or	r0, r0, r0

200370ec <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200370ec:	3021ffec 	addik	r1, r1, -20
200370f0:	fa610010 	swi	r19, r1, 16
200370f4:	12610000 	addk	r19, r1, r0
200370f8:	f8b30018 	swi	r5, r19, 24
200370fc:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20037100:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20037104:	f8130004 	swi	r0, r19, 4
20037108:	b8000054 	bri	84		// 2003715c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003710c:	e8730018 	lwi	r3, r19, 24
20037110:	e8630010 	lwi	r3, r3, 16
20037114:	e8830000 	lwi	r4, r3, 0
20037118:	e8730018 	lwi	r3, r19, 24
2003711c:	e8a3000c 	lwi	r5, r3, 12
20037120:	e8730004 	lwi	r3, r19, 4
20037124:	64630402 	bslli	r3, r3, 2
20037128:	10651800 	addk	r3, r5, r3
2003712c:	e8630000 	lwi	r3, r3, 0
20037130:	14632000 	rsubk	r3, r3, r4
20037134:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20037138:	e8930008 	lwi	r4, r19, 8
2003713c:	e873000c 	lwi	r3, r19, 12
20037140:	16441803 	cmpu	r18, r4, r3
20037144:	bcb20008 	bgei	r18, 8		// 2003714c
20037148:	10640000 	addk	r3, r4, r0
2003714c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20037150:	e8730004 	lwi	r3, r19, 4
20037154:	30630001 	addik	r3, r3, 1
20037158:	f8730004 	swi	r3, r19, 4
2003715c:	e8930004 	lwi	r4, r19, 4
20037160:	e873001c 	lwi	r3, r19, 28
20037164:	16432003 	cmpu	r18, r3, r4
20037168:	bc52ffa4 	blti	r18, -92		// 2003710c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003716c:	e8730018 	lwi	r3, r19, 24
20037170:	e8830000 	lwi	r4, r3, 0
20037174:	e8730008 	lwi	r3, r19, 8
20037178:	14632000 	rsubk	r3, r3, r4
}
2003717c:	10330000 	addk	r1, r19, r0
20037180:	ea610010 	lwi	r19, r1, 16
20037184:	30210014 	addik	r1, r1, 20
20037188:	b60f0008 	rtsd	r15, 8
2003718c:	80000000 	or	r0, r0, r0

20037190 <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20037190:	3021fff4 	addik	r1, r1, -12
20037194:	fa610008 	swi	r19, r1, 8
20037198:	12610000 	addk	r19, r1, r0
2003719c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
200371a0:	e8730010 	lwi	r3, r19, 16
200371a4:	e8630010 	lwi	r3, r3, 16
200371a8:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200371ac:	f8130004 	swi	r0, r19, 4
200371b0:	b8000028 	bri	40		// 200371d8
        fifo->read_inds[i] = 0;
200371b4:	e8730010 	lwi	r3, r19, 16
200371b8:	e883000c 	lwi	r4, r3, 12
200371bc:	e8730004 	lwi	r3, r19, 4
200371c0:	64630402 	bslli	r3, r3, 2
200371c4:	10641800 	addk	r3, r4, r3
200371c8:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200371cc:	e8730004 	lwi	r3, r19, 4
200371d0:	30630001 	addik	r3, r3, 1
200371d4:	f8730004 	swi	r3, r19, 4
200371d8:	e8730010 	lwi	r3, r19, 16
200371dc:	e8830008 	lwi	r4, r3, 8
200371e0:	e8730004 	lwi	r3, r19, 4
200371e4:	16441803 	cmpu	r18, r4, r3
200371e8:	bc52ffcc 	blti	r18, -52		// 200371b4
        fifo->read_inds[i] = 0;
    }
}
200371ec:	10330000 	addk	r1, r19, r0
200371f0:	ea610008 	lwi	r19, r1, 8
200371f4:	3021000c 	addik	r1, r1, 12
200371f8:	b60f0008 	rtsd	r15, 8
200371fc:	80000000 	or	r0, r0, r0

20037200 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20037200:	3021fff4 	addik	r1, r1, -12
20037204:	fa610008 	swi	r19, r1, 8
20037208:	12610000 	addk	r19, r1, r0
2003720c:	f8b30010 	swi	r5, r19, 16
20037210:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20037214:	e8730010 	lwi	r3, r19, 16
20037218:	e8830004 	lwi	r4, r3, 4
2003721c:	e8730010 	lwi	r3, r19, 16
20037220:	e8a3000c 	lwi	r5, r3, 12
20037224:	e8730014 	lwi	r3, r19, 20
20037228:	64630402 	bslli	r3, r3, 2
2003722c:	10651800 	addk	r3, r5, r3
20037230:	e8a30000 	lwi	r5, r3, 0
20037234:	e8730010 	lwi	r3, r19, 16
20037238:	e8630000 	lwi	r3, r3, 0
2003723c:	3063ffff 	addik	r3, r3, -1
20037240:	84651800 	and	r3, r5, r3
20037244:	10631800 	addk	r3, r3, r3
20037248:	10641800 	addk	r3, r4, r3
2003724c:	e4630000 	lhui	r3, r3, 0
20037250:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20037254:	e8730010 	lwi	r3, r19, 16
20037258:	e883000c 	lwi	r4, r3, 12
2003725c:	e8730014 	lwi	r3, r19, 20
20037260:	64630402 	bslli	r3, r3, 2
20037264:	10641800 	addk	r3, r4, r3
20037268:	e8830000 	lwi	r4, r3, 0
2003726c:	30840001 	addik	r4, r4, 1
20037270:	f8830000 	swi	r4, r3, 0
    return value;
20037274:	e4730004 	lhui	r3, r19, 4
20037278:	90630061 	sext16	r3, r3
}
2003727c:	10330000 	addk	r1, r19, r0
20037280:	ea610008 	lwi	r19, r1, 8
20037284:	3021000c 	addik	r1, r1, 12
20037288:	b60f0008 	rtsd	r15, 8
2003728c:	80000000 	or	r0, r0, r0

20037290 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20037290:	3021fff8 	addik	r1, r1, -8
20037294:	fa610004 	swi	r19, r1, 4
20037298:	12610000 	addk	r19, r1, r0
2003729c:	f8b3000c 	swi	r5, r19, 12
200372a0:	10660000 	addk	r3, r6, r0
200372a4:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200372a8:	e873000c 	lwi	r3, r19, 12
200372ac:	e8830004 	lwi	r4, r3, 4
200372b0:	e873000c 	lwi	r3, r19, 12
200372b4:	e8630010 	lwi	r3, r3, 16
200372b8:	e8a30000 	lwi	r5, r3, 0
200372bc:	e873000c 	lwi	r3, r19, 12
200372c0:	e8630000 	lwi	r3, r3, 0
200372c4:	3063ffff 	addik	r3, r3, -1
200372c8:	84651800 	and	r3, r5, r3
200372cc:	10631800 	addk	r3, r3, r3
200372d0:	10641800 	addk	r3, r4, r3
200372d4:	e4930010 	lhui	r4, r19, 16
200372d8:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
200372dc:	e873000c 	lwi	r3, r19, 12
200372e0:	e8630010 	lwi	r3, r3, 16
200372e4:	e8830000 	lwi	r4, r3, 0
200372e8:	30840001 	addik	r4, r4, 1
200372ec:	f8830000 	swi	r4, r3, 0
}
200372f0:	10330000 	addk	r1, r19, r0
200372f4:	ea610004 	lwi	r19, r1, 4
200372f8:	30210008 	addik	r1, r1, 8
200372fc:	b60f0008 	rtsd	r15, 8
20037300:	80000000 	or	r0, r0, r0

20037304 <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20037304:	3021fff8 	addik	r1, r1, -8
20037308:	fa610004 	swi	r19, r1, 4
2003730c:	12610000 	addk	r19, r1, r0
20037310:	f8b3000c 	swi	r5, r19, 12
20037314:	f8d30010 	swi	r6, r19, 16
20037318:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003731c:	e873000c 	lwi	r3, r19, 12
20037320:	e8630010 	lwi	r3, r3, 16
20037324:	e8830000 	lwi	r4, r3, 0
20037328:	e873000c 	lwi	r3, r19, 12
2003732c:	e8a3000c 	lwi	r5, r3, 12
20037330:	e8730010 	lwi	r3, r19, 16
20037334:	64630402 	bslli	r3, r3, 2
20037338:	10651800 	addk	r3, r5, r3
2003733c:	e8630000 	lwi	r3, r3, 0
20037340:	14a32000 	rsubk	r5, r3, r4
20037344:	30600001 	addik	r3, r0, 1
20037348:	e8930014 	lwi	r4, r19, 20
2003734c:	16442803 	cmpu	r18, r4, r5
20037350:	bcb20008 	bgei	r18, 8		// 20037358
20037354:	10600000 	addk	r3, r0, r0
20037358:	a46300ff 	andi	r3, r3, 255
}
2003735c:	10330000 	addk	r1, r19, r0
20037360:	ea610004 	lwi	r19, r1, 4
20037364:	30210008 	addik	r1, r1, 8
20037368:	b60f0008 	rtsd	r15, 8
2003736c:	80000000 	or	r0, r0, r0

20037370 <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20037370:	3021fff8 	addik	r1, r1, -8
20037374:	fa610004 	swi	r19, r1, 4
20037378:	12610000 	addk	r19, r1, r0
2003737c:	f8b3000c 	swi	r5, r19, 12
20037380:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20037384:	e873000c 	lwi	r3, r19, 12
20037388:	e8630010 	lwi	r3, r3, 16
2003738c:	e8830000 	lwi	r4, r3, 0
20037390:	e873000c 	lwi	r3, r19, 12
20037394:	e8a3000c 	lwi	r5, r3, 12
20037398:	e8730010 	lwi	r3, r19, 16
2003739c:	64630402 	bslli	r3, r3, 2
200373a0:	10651800 	addk	r3, r5, r3
200373a4:	e8630000 	lwi	r3, r3, 0
200373a8:	14632000 	rsubk	r3, r3, r4
}
200373ac:	10330000 	addk	r1, r19, r0
200373b0:	ea610004 	lwi	r19, r1, 4
200373b4:	30210008 	addik	r1, r1, 8
200373b8:	b60f0008 	rtsd	r15, 8
200373bc:	80000000 	or	r0, r0, r0

200373c0 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200373c0:	3021fff4 	addik	r1, r1, -12
200373c4:	fa610008 	swi	r19, r1, 8
200373c8:	12610000 	addk	r19, r1, r0
200373cc:	f8b30010 	swi	r5, r19, 16
200373d0:	f8d30014 	swi	r6, r19, 20
200373d4:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200373d8:	f8130004 	swi	r0, r19, 4
200373dc:	b800005c 	bri	92		// 20037438
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200373e0:	e8730010 	lwi	r3, r19, 16
200373e4:	e8830000 	lwi	r4, r3, 0
200373e8:	e8730010 	lwi	r3, r19, 16
200373ec:	e8a3000c 	lwi	r5, r3, 12
200373f0:	e8730004 	lwi	r3, r19, 4
200373f4:	64630402 	bslli	r3, r3, 2
200373f8:	10651800 	addk	r3, r5, r3
200373fc:	e8a30000 	lwi	r5, r3, 0
20037400:	e8730010 	lwi	r3, r19, 16
20037404:	e8630010 	lwi	r3, r3, 16
20037408:	e8630000 	lwi	r3, r3, 0
2003740c:	14632800 	rsubk	r3, r3, r5
20037410:	10641800 	addk	r3, r4, r3
20037414:	30830001 	addik	r4, r3, 1
20037418:	e8730018 	lwi	r3, r19, 24
2003741c:	16441803 	cmpu	r18, r4, r3
20037420:	bc52000c 	blti	r18, 12		// 2003742c
            return 0;
20037424:	10600000 	addk	r3, r0, r0
20037428:	b8000024 	bri	36		// 2003744c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003742c:	e8730004 	lwi	r3, r19, 4
20037430:	30630001 	addik	r3, r3, 1
20037434:	f8730004 	swi	r3, r19, 4
20037438:	e8930004 	lwi	r4, r19, 4
2003743c:	e8730014 	lwi	r3, r19, 20
20037440:	16432003 	cmpu	r18, r3, r4
20037444:	bc52ff9c 	blti	r18, -100		// 200373e0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20037448:	30600001 	addik	r3, r0, 1
}
2003744c:	10330000 	addk	r1, r19, r0
20037450:	ea610008 	lwi	r19, r1, 8
20037454:	3021000c 	addik	r1, r1, 12
20037458:	b60f0008 	rtsd	r15, 8
2003745c:	80000000 	or	r0, r0, r0

20037460 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20037460:	3021ffec 	addik	r1, r1, -20
20037464:	fa610010 	swi	r19, r1, 16
20037468:	12610000 	addk	r19, r1, r0
2003746c:	f8b30018 	swi	r5, r19, 24
20037470:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20037474:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20037478:	f8130004 	swi	r0, r19, 4
2003747c:	b8000054 	bri	84		// 200374d0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20037480:	e8730018 	lwi	r3, r19, 24
20037484:	e8630010 	lwi	r3, r3, 16
20037488:	e8830000 	lwi	r4, r3, 0
2003748c:	e8730018 	lwi	r3, r19, 24
20037490:	e8a3000c 	lwi	r5, r3, 12
20037494:	e8730004 	lwi	r3, r19, 4
20037498:	64630402 	bslli	r3, r3, 2
2003749c:	10651800 	addk	r3, r5, r3
200374a0:	e8630000 	lwi	r3, r3, 0
200374a4:	14632000 	rsubk	r3, r3, r4
200374a8:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200374ac:	e8930008 	lwi	r4, r19, 8
200374b0:	e873000c 	lwi	r3, r19, 12
200374b4:	16441803 	cmpu	r18, r4, r3
200374b8:	bcb20008 	bgei	r18, 8		// 200374c0
200374bc:	10640000 	addk	r3, r4, r0
200374c0:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200374c4:	e8730004 	lwi	r3, r19, 4
200374c8:	30630001 	addik	r3, r3, 1
200374cc:	f8730004 	swi	r3, r19, 4
200374d0:	e8930004 	lwi	r4, r19, 4
200374d4:	e873001c 	lwi	r3, r19, 28
200374d8:	16432003 	cmpu	r18, r3, r4
200374dc:	bc52ffa4 	blti	r18, -92		// 20037480
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200374e0:	e8730018 	lwi	r3, r19, 24
200374e4:	e8830000 	lwi	r4, r3, 0
200374e8:	e8730008 	lwi	r3, r19, 8
200374ec:	14632000 	rsubk	r3, r3, r4
}
200374f0:	10330000 	addk	r1, r19, r0
200374f4:	ea610010 	lwi	r19, r1, 16
200374f8:	30210014 	addik	r1, r1, 20
200374fc:	b60f0008 	rtsd	r15, 8
20037500:	80000000 	or	r0, r0, r0

20037504 <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20037504:	3021fff4 	addik	r1, r1, -12
20037508:	fa610008 	swi	r19, r1, 8
2003750c:	12610000 	addk	r19, r1, r0
20037510:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20037514:	e8730010 	lwi	r3, r19, 16
20037518:	e8630010 	lwi	r3, r3, 16
2003751c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20037520:	f8130004 	swi	r0, r19, 4
20037524:	b8000028 	bri	40		// 2003754c
        fifo->read_inds[i] = 0;
20037528:	e8730010 	lwi	r3, r19, 16
2003752c:	e883000c 	lwi	r4, r3, 12
20037530:	e8730004 	lwi	r3, r19, 4
20037534:	64630402 	bslli	r3, r3, 2
20037538:	10641800 	addk	r3, r4, r3
2003753c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20037540:	e8730004 	lwi	r3, r19, 4
20037544:	30630001 	addik	r3, r3, 1
20037548:	f8730004 	swi	r3, r19, 4
2003754c:	e8730010 	lwi	r3, r19, 16
20037550:	e8830008 	lwi	r4, r3, 8
20037554:	e8730004 	lwi	r3, r19, 4
20037558:	16441803 	cmpu	r18, r4, r3
2003755c:	bc52ffcc 	blti	r18, -52		// 20037528
        fifo->read_inds[i] = 0;
    }
}
20037560:	10330000 	addk	r1, r19, r0
20037564:	ea610008 	lwi	r19, r1, 8
20037568:	3021000c 	addik	r1, r1, 12
2003756c:	b60f0008 	rtsd	r15, 8
20037570:	80000000 	or	r0, r0, r0

20037574 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20037574:	3021fff4 	addik	r1, r1, -12
20037578:	fa610008 	swi	r19, r1, 8
2003757c:	12610000 	addk	r19, r1, r0
20037580:	f8b30010 	swi	r5, r19, 16
20037584:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20037588:	e8730010 	lwi	r3, r19, 16
2003758c:	e8830004 	lwi	r4, r3, 4
20037590:	e8730010 	lwi	r3, r19, 16
20037594:	e8a3000c 	lwi	r5, r3, 12
20037598:	e8730014 	lwi	r3, r19, 20
2003759c:	64630402 	bslli	r3, r3, 2
200375a0:	10651800 	addk	r3, r5, r3
200375a4:	e8a30000 	lwi	r5, r3, 0
200375a8:	e8730010 	lwi	r3, r19, 16
200375ac:	e8630000 	lwi	r3, r3, 0
200375b0:	3063ffff 	addik	r3, r3, -1
200375b4:	84651800 	and	r3, r5, r3
200375b8:	64630402 	bslli	r3, r3, 2
200375bc:	10641800 	addk	r3, r4, r3
200375c0:	e8630000 	lwi	r3, r3, 0
200375c4:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200375c8:	e8730010 	lwi	r3, r19, 16
200375cc:	e883000c 	lwi	r4, r3, 12
200375d0:	e8730014 	lwi	r3, r19, 20
200375d4:	64630402 	bslli	r3, r3, 2
200375d8:	10641800 	addk	r3, r4, r3
200375dc:	e8830000 	lwi	r4, r3, 0
200375e0:	30840001 	addik	r4, r4, 1
200375e4:	f8830000 	swi	r4, r3, 0
    return value;
200375e8:	e8730004 	lwi	r3, r19, 4
}
200375ec:	10330000 	addk	r1, r19, r0
200375f0:	ea610008 	lwi	r19, r1, 8
200375f4:	3021000c 	addik	r1, r1, 12
200375f8:	b60f0008 	rtsd	r15, 8
200375fc:	80000000 	or	r0, r0, r0

20037600 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20037600:	3021fff8 	addik	r1, r1, -8
20037604:	fa610004 	swi	r19, r1, 4
20037608:	12610000 	addk	r19, r1, r0
2003760c:	f8b3000c 	swi	r5, r19, 12
20037610:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20037614:	e873000c 	lwi	r3, r19, 12
20037618:	e8830004 	lwi	r4, r3, 4
2003761c:	e873000c 	lwi	r3, r19, 12
20037620:	e8630010 	lwi	r3, r3, 16
20037624:	e8a30000 	lwi	r5, r3, 0
20037628:	e873000c 	lwi	r3, r19, 12
2003762c:	e8630000 	lwi	r3, r3, 0
20037630:	3063ffff 	addik	r3, r3, -1
20037634:	84651800 	and	r3, r5, r3
20037638:	64630402 	bslli	r3, r3, 2
2003763c:	10641800 	addk	r3, r4, r3
20037640:	e8930010 	lwi	r4, r19, 16
20037644:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20037648:	e873000c 	lwi	r3, r19, 12
2003764c:	e8630010 	lwi	r3, r3, 16
20037650:	e8830000 	lwi	r4, r3, 0
20037654:	30840001 	addik	r4, r4, 1
20037658:	f8830000 	swi	r4, r3, 0
}
2003765c:	10330000 	addk	r1, r19, r0
20037660:	ea610004 	lwi	r19, r1, 4
20037664:	30210008 	addik	r1, r1, 8
20037668:	b60f0008 	rtsd	r15, 8
2003766c:	80000000 	or	r0, r0, r0

20037670 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20037670:	3021fff8 	addik	r1, r1, -8
20037674:	fa610004 	swi	r19, r1, 4
20037678:	12610000 	addk	r19, r1, r0
2003767c:	f8b3000c 	swi	r5, r19, 12
20037680:	f8d30010 	swi	r6, r19, 16
20037684:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20037688:	e873000c 	lwi	r3, r19, 12
2003768c:	e8630010 	lwi	r3, r3, 16
20037690:	e8830000 	lwi	r4, r3, 0
20037694:	e873000c 	lwi	r3, r19, 12
20037698:	e8a3000c 	lwi	r5, r3, 12
2003769c:	e8730010 	lwi	r3, r19, 16
200376a0:	64630402 	bslli	r3, r3, 2
200376a4:	10651800 	addk	r3, r5, r3
200376a8:	e8630000 	lwi	r3, r3, 0
200376ac:	14a32000 	rsubk	r5, r3, r4
200376b0:	30600001 	addik	r3, r0, 1
200376b4:	e8930014 	lwi	r4, r19, 20
200376b8:	16442803 	cmpu	r18, r4, r5
200376bc:	bcb20008 	bgei	r18, 8		// 200376c4
200376c0:	10600000 	addk	r3, r0, r0
200376c4:	a46300ff 	andi	r3, r3, 255
}
200376c8:	10330000 	addk	r1, r19, r0
200376cc:	ea610004 	lwi	r19, r1, 4
200376d0:	30210008 	addik	r1, r1, 8
200376d4:	b60f0008 	rtsd	r15, 8
200376d8:	80000000 	or	r0, r0, r0

200376dc <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200376dc:	3021fff8 	addik	r1, r1, -8
200376e0:	fa610004 	swi	r19, r1, 4
200376e4:	12610000 	addk	r19, r1, r0
200376e8:	f8b3000c 	swi	r5, r19, 12
200376ec:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200376f0:	e873000c 	lwi	r3, r19, 12
200376f4:	e8630010 	lwi	r3, r3, 16
200376f8:	e8830000 	lwi	r4, r3, 0
200376fc:	e873000c 	lwi	r3, r19, 12
20037700:	e8a3000c 	lwi	r5, r3, 12
20037704:	e8730010 	lwi	r3, r19, 16
20037708:	64630402 	bslli	r3, r3, 2
2003770c:	10651800 	addk	r3, r5, r3
20037710:	e8630000 	lwi	r3, r3, 0
20037714:	14632000 	rsubk	r3, r3, r4
}
20037718:	10330000 	addk	r1, r19, r0
2003771c:	ea610004 	lwi	r19, r1, 4
20037720:	30210008 	addik	r1, r1, 8
20037724:	b60f0008 	rtsd	r15, 8
20037728:	80000000 	or	r0, r0, r0

2003772c <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003772c:	3021fff4 	addik	r1, r1, -12
20037730:	fa610008 	swi	r19, r1, 8
20037734:	12610000 	addk	r19, r1, r0
20037738:	f8b30010 	swi	r5, r19, 16
2003773c:	f8d30014 	swi	r6, r19, 20
20037740:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20037744:	f8130004 	swi	r0, r19, 4
20037748:	b800005c 	bri	92		// 200377a4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003774c:	e8730010 	lwi	r3, r19, 16
20037750:	e8830000 	lwi	r4, r3, 0
20037754:	e8730010 	lwi	r3, r19, 16
20037758:	e8a3000c 	lwi	r5, r3, 12
2003775c:	e8730004 	lwi	r3, r19, 4
20037760:	64630402 	bslli	r3, r3, 2
20037764:	10651800 	addk	r3, r5, r3
20037768:	e8a30000 	lwi	r5, r3, 0
2003776c:	e8730010 	lwi	r3, r19, 16
20037770:	e8630010 	lwi	r3, r3, 16
20037774:	e8630000 	lwi	r3, r3, 0
20037778:	14632800 	rsubk	r3, r3, r5
2003777c:	10641800 	addk	r3, r4, r3
20037780:	30830001 	addik	r4, r3, 1
20037784:	e8730018 	lwi	r3, r19, 24
20037788:	16441803 	cmpu	r18, r4, r3
2003778c:	bc52000c 	blti	r18, 12		// 20037798
            return 0;
20037790:	10600000 	addk	r3, r0, r0
20037794:	b8000024 	bri	36		// 200377b8
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20037798:	e8730004 	lwi	r3, r19, 4
2003779c:	30630001 	addik	r3, r3, 1
200377a0:	f8730004 	swi	r3, r19, 4
200377a4:	e8930004 	lwi	r4, r19, 4
200377a8:	e8730014 	lwi	r3, r19, 20
200377ac:	16432003 	cmpu	r18, r3, r4
200377b0:	bc52ff9c 	blti	r18, -100		// 2003774c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200377b4:	30600001 	addik	r3, r0, 1
}
200377b8:	10330000 	addk	r1, r19, r0
200377bc:	ea610008 	lwi	r19, r1, 8
200377c0:	3021000c 	addik	r1, r1, 12
200377c4:	b60f0008 	rtsd	r15, 8
200377c8:	80000000 	or	r0, r0, r0

200377cc <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200377cc:	3021ffec 	addik	r1, r1, -20
200377d0:	fa610010 	swi	r19, r1, 16
200377d4:	12610000 	addk	r19, r1, r0
200377d8:	f8b30018 	swi	r5, r19, 24
200377dc:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200377e0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200377e4:	f8130004 	swi	r0, r19, 4
200377e8:	b8000054 	bri	84		// 2003783c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200377ec:	e8730018 	lwi	r3, r19, 24
200377f0:	e8630010 	lwi	r3, r3, 16
200377f4:	e8830000 	lwi	r4, r3, 0
200377f8:	e8730018 	lwi	r3, r19, 24
200377fc:	e8a3000c 	lwi	r5, r3, 12
20037800:	e8730004 	lwi	r3, r19, 4
20037804:	64630402 	bslli	r3, r3, 2
20037808:	10651800 	addk	r3, r5, r3
2003780c:	e8630000 	lwi	r3, r3, 0
20037810:	14632000 	rsubk	r3, r3, r4
20037814:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20037818:	e8930008 	lwi	r4, r19, 8
2003781c:	e873000c 	lwi	r3, r19, 12
20037820:	16441803 	cmpu	r18, r4, r3
20037824:	bcb20008 	bgei	r18, 8		// 2003782c
20037828:	10640000 	addk	r3, r4, r0
2003782c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20037830:	e8730004 	lwi	r3, r19, 4
20037834:	30630001 	addik	r3, r3, 1
20037838:	f8730004 	swi	r3, r19, 4
2003783c:	e8930004 	lwi	r4, r19, 4
20037840:	e873001c 	lwi	r3, r19, 28
20037844:	16432003 	cmpu	r18, r3, r4
20037848:	bc52ffa4 	blti	r18, -92		// 200377ec
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003784c:	e8730018 	lwi	r3, r19, 24
20037850:	e8830000 	lwi	r4, r3, 0
20037854:	e8730008 	lwi	r3, r19, 8
20037858:	14632000 	rsubk	r3, r3, r4
}
2003785c:	10330000 	addk	r1, r19, r0
20037860:	ea610010 	lwi	r19, r1, 16
20037864:	30210014 	addik	r1, r1, 20
20037868:	b60f0008 	rtsd	r15, 8
2003786c:	80000000 	or	r0, r0, r0

20037870 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20037870:	3021fff4 	addik	r1, r1, -12
20037874:	fa610008 	swi	r19, r1, 8
20037878:	12610000 	addk	r19, r1, r0
2003787c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20037880:	e8730010 	lwi	r3, r19, 16
20037884:	e8630010 	lwi	r3, r3, 16
20037888:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003788c:	f8130004 	swi	r0, r19, 4
20037890:	b8000028 	bri	40		// 200378b8
        fifo->read_inds[i] = 0;
20037894:	e8730010 	lwi	r3, r19, 16
20037898:	e883000c 	lwi	r4, r3, 12
2003789c:	e8730004 	lwi	r3, r19, 4
200378a0:	64630402 	bslli	r3, r3, 2
200378a4:	10641800 	addk	r3, r4, r3
200378a8:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200378ac:	e8730004 	lwi	r3, r19, 4
200378b0:	30630001 	addik	r3, r3, 1
200378b4:	f8730004 	swi	r3, r19, 4
200378b8:	e8730010 	lwi	r3, r19, 16
200378bc:	e8830008 	lwi	r4, r3, 8
200378c0:	e8730004 	lwi	r3, r19, 4
200378c4:	16441803 	cmpu	r18, r4, r3
200378c8:	bc52ffcc 	blti	r18, -52		// 20037894
        fifo->read_inds[i] = 0;
    }
}
200378cc:	10330000 	addk	r1, r19, r0
200378d0:	ea610008 	lwi	r19, r1, 8
200378d4:	3021000c 	addik	r1, r1, 12
200378d8:	b60f0008 	rtsd	r15, 8
200378dc:	80000000 	or	r0, r0, r0

200378e0 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200378e0:	3021fff0 	addik	r1, r1, -16
200378e4:	fa61000c 	swi	r19, r1, 12
200378e8:	12610000 	addk	r19, r1, r0
200378ec:	f8b30014 	swi	r5, r19, 20
200378f0:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200378f4:	e8730014 	lwi	r3, r19, 20
200378f8:	e8830004 	lwi	r4, r3, 4
200378fc:	e8730014 	lwi	r3, r19, 20
20037900:	e8a3000c 	lwi	r5, r3, 12
20037904:	e8730018 	lwi	r3, r19, 24
20037908:	64630402 	bslli	r3, r3, 2
2003790c:	10651800 	addk	r3, r5, r3
20037910:	e8a30000 	lwi	r5, r3, 0
20037914:	e8730014 	lwi	r3, r19, 20
20037918:	e8630000 	lwi	r3, r3, 0
2003791c:	3063ffff 	addik	r3, r3, -1
20037920:	84651800 	and	r3, r5, r3
20037924:	64630403 	bslli	r3, r3, 3
20037928:	10641800 	addk	r3, r4, r3
2003792c:	e8830000 	lwi	r4, r3, 0
20037930:	e8a30004 	lwi	r5, r3, 4
20037934:	f8930004 	swi	r4, r19, 4
20037938:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2003793c:	e8730014 	lwi	r3, r19, 20
20037940:	e883000c 	lwi	r4, r3, 12
20037944:	e8730018 	lwi	r3, r19, 24
20037948:	64630402 	bslli	r3, r3, 2
2003794c:	10641800 	addk	r3, r4, r3
20037950:	e8830000 	lwi	r4, r3, 0
20037954:	30840001 	addik	r4, r4, 1
20037958:	f8830000 	swi	r4, r3, 0
    return value;
2003795c:	e8930004 	lwi	r4, r19, 4
20037960:	e8b30008 	lwi	r5, r19, 8
}
20037964:	10640000 	addk	r3, r4, r0
20037968:	10850000 	addk	r4, r5, r0
2003796c:	10330000 	addk	r1, r19, r0
20037970:	ea61000c 	lwi	r19, r1, 12
20037974:	30210010 	addik	r1, r1, 16
20037978:	b60f0008 	rtsd	r15, 8
2003797c:	80000000 	or	r0, r0, r0

20037980 <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20037980:	3021fff8 	addik	r1, r1, -8
20037984:	fa610004 	swi	r19, r1, 4
20037988:	12610000 	addk	r19, r1, r0
2003798c:	f8b3000c 	swi	r5, r19, 12
20037990:	f8d30010 	swi	r6, r19, 16
20037994:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20037998:	e873000c 	lwi	r3, r19, 12
2003799c:	e8830004 	lwi	r4, r3, 4
200379a0:	e873000c 	lwi	r3, r19, 12
200379a4:	e8630010 	lwi	r3, r3, 16
200379a8:	e8a30000 	lwi	r5, r3, 0
200379ac:	e873000c 	lwi	r3, r19, 12
200379b0:	e8630000 	lwi	r3, r3, 0
200379b4:	3063ffff 	addik	r3, r3, -1
200379b8:	84651800 	and	r3, r5, r3
200379bc:	64630403 	bslli	r3, r3, 3
200379c0:	10641800 	addk	r3, r4, r3
200379c4:	e8930010 	lwi	r4, r19, 16
200379c8:	e8b30014 	lwi	r5, r19, 20
200379cc:	f8830000 	swi	r4, r3, 0
200379d0:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
200379d4:	e873000c 	lwi	r3, r19, 12
200379d8:	e8630010 	lwi	r3, r3, 16
200379dc:	e8830000 	lwi	r4, r3, 0
200379e0:	30840001 	addik	r4, r4, 1
200379e4:	f8830000 	swi	r4, r3, 0
}
200379e8:	10330000 	addk	r1, r19, r0
200379ec:	ea610004 	lwi	r19, r1, 4
200379f0:	30210008 	addik	r1, r1, 8
200379f4:	b60f0008 	rtsd	r15, 8
200379f8:	80000000 	or	r0, r0, r0

200379fc <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200379fc:	3021fff8 	addik	r1, r1, -8
20037a00:	fa610004 	swi	r19, r1, 4
20037a04:	12610000 	addk	r19, r1, r0
20037a08:	f8b3000c 	swi	r5, r19, 12
20037a0c:	f8d30010 	swi	r6, r19, 16
20037a10:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20037a14:	e873000c 	lwi	r3, r19, 12
20037a18:	e8630010 	lwi	r3, r3, 16
20037a1c:	e8830000 	lwi	r4, r3, 0
20037a20:	e873000c 	lwi	r3, r19, 12
20037a24:	e8a3000c 	lwi	r5, r3, 12
20037a28:	e8730010 	lwi	r3, r19, 16
20037a2c:	64630402 	bslli	r3, r3, 2
20037a30:	10651800 	addk	r3, r5, r3
20037a34:	e8630000 	lwi	r3, r3, 0
20037a38:	14a32000 	rsubk	r5, r3, r4
20037a3c:	30600001 	addik	r3, r0, 1
20037a40:	e8930014 	lwi	r4, r19, 20
20037a44:	16442803 	cmpu	r18, r4, r5
20037a48:	bcb20008 	bgei	r18, 8		// 20037a50
20037a4c:	10600000 	addk	r3, r0, r0
20037a50:	a46300ff 	andi	r3, r3, 255
}
20037a54:	10330000 	addk	r1, r19, r0
20037a58:	ea610004 	lwi	r19, r1, 4
20037a5c:	30210008 	addik	r1, r1, 8
20037a60:	b60f0008 	rtsd	r15, 8
20037a64:	80000000 	or	r0, r0, r0

20037a68 <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20037a68:	3021fff8 	addik	r1, r1, -8
20037a6c:	fa610004 	swi	r19, r1, 4
20037a70:	12610000 	addk	r19, r1, r0
20037a74:	f8b3000c 	swi	r5, r19, 12
20037a78:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20037a7c:	e873000c 	lwi	r3, r19, 12
20037a80:	e8630010 	lwi	r3, r3, 16
20037a84:	e8830000 	lwi	r4, r3, 0
20037a88:	e873000c 	lwi	r3, r19, 12
20037a8c:	e8a3000c 	lwi	r5, r3, 12
20037a90:	e8730010 	lwi	r3, r19, 16
20037a94:	64630402 	bslli	r3, r3, 2
20037a98:	10651800 	addk	r3, r5, r3
20037a9c:	e8630000 	lwi	r3, r3, 0
20037aa0:	14632000 	rsubk	r3, r3, r4
}
20037aa4:	10330000 	addk	r1, r19, r0
20037aa8:	ea610004 	lwi	r19, r1, 4
20037aac:	30210008 	addik	r1, r1, 8
20037ab0:	b60f0008 	rtsd	r15, 8
20037ab4:	80000000 	or	r0, r0, r0

20037ab8 <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20037ab8:	3021fff4 	addik	r1, r1, -12
20037abc:	fa610008 	swi	r19, r1, 8
20037ac0:	12610000 	addk	r19, r1, r0
20037ac4:	f8b30010 	swi	r5, r19, 16
20037ac8:	f8d30014 	swi	r6, r19, 20
20037acc:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20037ad0:	f8130004 	swi	r0, r19, 4
20037ad4:	b800005c 	bri	92		// 20037b30
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20037ad8:	e8730010 	lwi	r3, r19, 16
20037adc:	e8830000 	lwi	r4, r3, 0
20037ae0:	e8730010 	lwi	r3, r19, 16
20037ae4:	e8a3000c 	lwi	r5, r3, 12
20037ae8:	e8730004 	lwi	r3, r19, 4
20037aec:	64630402 	bslli	r3, r3, 2
20037af0:	10651800 	addk	r3, r5, r3
20037af4:	e8a30000 	lwi	r5, r3, 0
20037af8:	e8730010 	lwi	r3, r19, 16
20037afc:	e8630010 	lwi	r3, r3, 16
20037b00:	e8630000 	lwi	r3, r3, 0
20037b04:	14632800 	rsubk	r3, r3, r5
20037b08:	10641800 	addk	r3, r4, r3
20037b0c:	30830001 	addik	r4, r3, 1
20037b10:	e8730018 	lwi	r3, r19, 24
20037b14:	16441803 	cmpu	r18, r4, r3
20037b18:	bc52000c 	blti	r18, 12		// 20037b24
            return 0;
20037b1c:	10600000 	addk	r3, r0, r0
20037b20:	b8000024 	bri	36		// 20037b44
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20037b24:	e8730004 	lwi	r3, r19, 4
20037b28:	30630001 	addik	r3, r3, 1
20037b2c:	f8730004 	swi	r3, r19, 4
20037b30:	e8930004 	lwi	r4, r19, 4
20037b34:	e8730014 	lwi	r3, r19, 20
20037b38:	16432003 	cmpu	r18, r3, r4
20037b3c:	bc52ff9c 	blti	r18, -100		// 20037ad8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20037b40:	30600001 	addik	r3, r0, 1
}
20037b44:	10330000 	addk	r1, r19, r0
20037b48:	ea610008 	lwi	r19, r1, 8
20037b4c:	3021000c 	addik	r1, r1, 12
20037b50:	b60f0008 	rtsd	r15, 8
20037b54:	80000000 	or	r0, r0, r0

20037b58 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20037b58:	3021ffec 	addik	r1, r1, -20
20037b5c:	fa610010 	swi	r19, r1, 16
20037b60:	12610000 	addk	r19, r1, r0
20037b64:	f8b30018 	swi	r5, r19, 24
20037b68:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20037b6c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20037b70:	f8130004 	swi	r0, r19, 4
20037b74:	b8000054 	bri	84		// 20037bc8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20037b78:	e8730018 	lwi	r3, r19, 24
20037b7c:	e8630010 	lwi	r3, r3, 16
20037b80:	e8830000 	lwi	r4, r3, 0
20037b84:	e8730018 	lwi	r3, r19, 24
20037b88:	e8a3000c 	lwi	r5, r3, 12
20037b8c:	e8730004 	lwi	r3, r19, 4
20037b90:	64630402 	bslli	r3, r3, 2
20037b94:	10651800 	addk	r3, r5, r3
20037b98:	e8630000 	lwi	r3, r3, 0
20037b9c:	14632000 	rsubk	r3, r3, r4
20037ba0:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20037ba4:	e8930008 	lwi	r4, r19, 8
20037ba8:	e873000c 	lwi	r3, r19, 12
20037bac:	16441803 	cmpu	r18, r4, r3
20037bb0:	bcb20008 	bgei	r18, 8		// 20037bb8
20037bb4:	10640000 	addk	r3, r4, r0
20037bb8:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20037bbc:	e8730004 	lwi	r3, r19, 4
20037bc0:	30630001 	addik	r3, r3, 1
20037bc4:	f8730004 	swi	r3, r19, 4
20037bc8:	e8930004 	lwi	r4, r19, 4
20037bcc:	e873001c 	lwi	r3, r19, 28
20037bd0:	16432003 	cmpu	r18, r3, r4
20037bd4:	bc52ffa4 	blti	r18, -92		// 20037b78
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20037bd8:	e8730018 	lwi	r3, r19, 24
20037bdc:	e8830000 	lwi	r4, r3, 0
20037be0:	e8730008 	lwi	r3, r19, 8
20037be4:	14632000 	rsubk	r3, r3, r4
}
20037be8:	10330000 	addk	r1, r19, r0
20037bec:	ea610010 	lwi	r19, r1, 16
20037bf0:	30210014 	addik	r1, r1, 20
20037bf4:	b60f0008 	rtsd	r15, 8
20037bf8:	80000000 	or	r0, r0, r0

20037bfc <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20037bfc:	3021fff4 	addik	r1, r1, -12
20037c00:	fa610008 	swi	r19, r1, 8
20037c04:	12610000 	addk	r19, r1, r0
20037c08:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20037c0c:	e8730010 	lwi	r3, r19, 16
20037c10:	e8630010 	lwi	r3, r3, 16
20037c14:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20037c18:	f8130004 	swi	r0, r19, 4
20037c1c:	b8000028 	bri	40		// 20037c44
        fifo->read_inds[i] = 0;
20037c20:	e8730010 	lwi	r3, r19, 16
20037c24:	e883000c 	lwi	r4, r3, 12
20037c28:	e8730004 	lwi	r3, r19, 4
20037c2c:	64630402 	bslli	r3, r3, 2
20037c30:	10641800 	addk	r3, r4, r3
20037c34:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20037c38:	e8730004 	lwi	r3, r19, 4
20037c3c:	30630001 	addik	r3, r3, 1
20037c40:	f8730004 	swi	r3, r19, 4
20037c44:	e8730010 	lwi	r3, r19, 16
20037c48:	e8830008 	lwi	r4, r3, 8
20037c4c:	e8730004 	lwi	r3, r19, 4
20037c50:	16441803 	cmpu	r18, r4, r3
20037c54:	bc52ffcc 	blti	r18, -52		// 20037c20
        fifo->read_inds[i] = 0;
    }
}
20037c58:	10330000 	addk	r1, r19, r0
20037c5c:	ea610008 	lwi	r19, r1, 8
20037c60:	3021000c 	addik	r1, r1, 12
20037c64:	b60f0008 	rtsd	r15, 8
20037c68:	80000000 	or	r0, r0, r0

20037c6c <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20037c6c:	3021fff4 	addik	r1, r1, -12
20037c70:	fa610008 	swi	r19, r1, 8
20037c74:	12610000 	addk	r19, r1, r0
20037c78:	f8b30010 	swi	r5, r19, 16
20037c7c:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20037c80:	e8730010 	lwi	r3, r19, 16
20037c84:	e8830004 	lwi	r4, r3, 4
20037c88:	e8730010 	lwi	r3, r19, 16
20037c8c:	e8a3000c 	lwi	r5, r3, 12
20037c90:	e8730014 	lwi	r3, r19, 20
20037c94:	64630402 	bslli	r3, r3, 2
20037c98:	10651800 	addk	r3, r5, r3
20037c9c:	e8a30000 	lwi	r5, r3, 0
20037ca0:	e8730010 	lwi	r3, r19, 16
20037ca4:	e8630000 	lwi	r3, r3, 0
20037ca8:	3063ffff 	addik	r3, r3, -1
20037cac:	84651800 	and	r3, r5, r3
20037cb0:	10641800 	addk	r3, r4, r3
20037cb4:	e0630000 	lbui	r3, r3, 0
20037cb8:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20037cbc:	e8730010 	lwi	r3, r19, 16
20037cc0:	e883000c 	lwi	r4, r3, 12
20037cc4:	e8730014 	lwi	r3, r19, 20
20037cc8:	64630402 	bslli	r3, r3, 2
20037ccc:	10641800 	addk	r3, r4, r3
20037cd0:	e8830000 	lwi	r4, r3, 0
20037cd4:	30840001 	addik	r4, r4, 1
20037cd8:	f8830000 	swi	r4, r3, 0
    return value;
20037cdc:	e0730004 	lbui	r3, r19, 4
}
20037ce0:	10330000 	addk	r1, r19, r0
20037ce4:	ea610008 	lwi	r19, r1, 8
20037ce8:	3021000c 	addik	r1, r1, 12
20037cec:	b60f0008 	rtsd	r15, 8
20037cf0:	80000000 	or	r0, r0, r0

20037cf4 <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20037cf4:	3021fff8 	addik	r1, r1, -8
20037cf8:	fa610004 	swi	r19, r1, 4
20037cfc:	12610000 	addk	r19, r1, r0
20037d00:	f8b3000c 	swi	r5, r19, 12
20037d04:	10660000 	addk	r3, r6, r0
20037d08:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20037d0c:	e873000c 	lwi	r3, r19, 12
20037d10:	e8830004 	lwi	r4, r3, 4
20037d14:	e873000c 	lwi	r3, r19, 12
20037d18:	e8630010 	lwi	r3, r3, 16
20037d1c:	e8a30000 	lwi	r5, r3, 0
20037d20:	e873000c 	lwi	r3, r19, 12
20037d24:	e8630000 	lwi	r3, r3, 0
20037d28:	3063ffff 	addik	r3, r3, -1
20037d2c:	84651800 	and	r3, r5, r3
20037d30:	10641800 	addk	r3, r4, r3
20037d34:	e0930010 	lbui	r4, r19, 16
20037d38:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20037d3c:	e873000c 	lwi	r3, r19, 12
20037d40:	e8630010 	lwi	r3, r3, 16
20037d44:	e8830000 	lwi	r4, r3, 0
20037d48:	30840001 	addik	r4, r4, 1
20037d4c:	f8830000 	swi	r4, r3, 0
}
20037d50:	10330000 	addk	r1, r19, r0
20037d54:	ea610004 	lwi	r19, r1, 4
20037d58:	30210008 	addik	r1, r1, 8
20037d5c:	b60f0008 	rtsd	r15, 8
20037d60:	80000000 	or	r0, r0, r0

20037d64 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20037d64:	3021fff8 	addik	r1, r1, -8
20037d68:	fa610004 	swi	r19, r1, 4
20037d6c:	12610000 	addk	r19, r1, r0
20037d70:	f8b3000c 	swi	r5, r19, 12
20037d74:	f8d30010 	swi	r6, r19, 16
20037d78:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20037d7c:	e873000c 	lwi	r3, r19, 12
20037d80:	e8630010 	lwi	r3, r3, 16
20037d84:	e8830000 	lwi	r4, r3, 0
20037d88:	e873000c 	lwi	r3, r19, 12
20037d8c:	e8a3000c 	lwi	r5, r3, 12
20037d90:	e8730010 	lwi	r3, r19, 16
20037d94:	64630402 	bslli	r3, r3, 2
20037d98:	10651800 	addk	r3, r5, r3
20037d9c:	e8630000 	lwi	r3, r3, 0
20037da0:	14a32000 	rsubk	r5, r3, r4
20037da4:	30600001 	addik	r3, r0, 1
20037da8:	e8930014 	lwi	r4, r19, 20
20037dac:	16442803 	cmpu	r18, r4, r5
20037db0:	bcb20008 	bgei	r18, 8		// 20037db8
20037db4:	10600000 	addk	r3, r0, r0
20037db8:	a46300ff 	andi	r3, r3, 255
}
20037dbc:	10330000 	addk	r1, r19, r0
20037dc0:	ea610004 	lwi	r19, r1, 4
20037dc4:	30210008 	addik	r1, r1, 8
20037dc8:	b60f0008 	rtsd	r15, 8
20037dcc:	80000000 	or	r0, r0, r0

20037dd0 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20037dd0:	3021fff8 	addik	r1, r1, -8
20037dd4:	fa610004 	swi	r19, r1, 4
20037dd8:	12610000 	addk	r19, r1, r0
20037ddc:	f8b3000c 	swi	r5, r19, 12
20037de0:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20037de4:	e873000c 	lwi	r3, r19, 12
20037de8:	e8630010 	lwi	r3, r3, 16
20037dec:	e8830000 	lwi	r4, r3, 0
20037df0:	e873000c 	lwi	r3, r19, 12
20037df4:	e8a3000c 	lwi	r5, r3, 12
20037df8:	e8730010 	lwi	r3, r19, 16
20037dfc:	64630402 	bslli	r3, r3, 2
20037e00:	10651800 	addk	r3, r5, r3
20037e04:	e8630000 	lwi	r3, r3, 0
20037e08:	14632000 	rsubk	r3, r3, r4
}
20037e0c:	10330000 	addk	r1, r19, r0
20037e10:	ea610004 	lwi	r19, r1, 4
20037e14:	30210008 	addik	r1, r1, 8
20037e18:	b60f0008 	rtsd	r15, 8
20037e1c:	80000000 	or	r0, r0, r0

20037e20 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20037e20:	3021fff4 	addik	r1, r1, -12
20037e24:	fa610008 	swi	r19, r1, 8
20037e28:	12610000 	addk	r19, r1, r0
20037e2c:	f8b30010 	swi	r5, r19, 16
20037e30:	f8d30014 	swi	r6, r19, 20
20037e34:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20037e38:	f8130004 	swi	r0, r19, 4
20037e3c:	b800005c 	bri	92		// 20037e98
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20037e40:	e8730010 	lwi	r3, r19, 16
20037e44:	e8830000 	lwi	r4, r3, 0
20037e48:	e8730010 	lwi	r3, r19, 16
20037e4c:	e8a3000c 	lwi	r5, r3, 12
20037e50:	e8730004 	lwi	r3, r19, 4
20037e54:	64630402 	bslli	r3, r3, 2
20037e58:	10651800 	addk	r3, r5, r3
20037e5c:	e8a30000 	lwi	r5, r3, 0
20037e60:	e8730010 	lwi	r3, r19, 16
20037e64:	e8630010 	lwi	r3, r3, 16
20037e68:	e8630000 	lwi	r3, r3, 0
20037e6c:	14632800 	rsubk	r3, r3, r5
20037e70:	10641800 	addk	r3, r4, r3
20037e74:	30830001 	addik	r4, r3, 1
20037e78:	e8730018 	lwi	r3, r19, 24
20037e7c:	16441803 	cmpu	r18, r4, r3
20037e80:	bc52000c 	blti	r18, 12		// 20037e8c
            return 0;
20037e84:	10600000 	addk	r3, r0, r0
20037e88:	b8000024 	bri	36		// 20037eac
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20037e8c:	e8730004 	lwi	r3, r19, 4
20037e90:	30630001 	addik	r3, r3, 1
20037e94:	f8730004 	swi	r3, r19, 4
20037e98:	e8930004 	lwi	r4, r19, 4
20037e9c:	e8730014 	lwi	r3, r19, 20
20037ea0:	16432003 	cmpu	r18, r3, r4
20037ea4:	bc52ff9c 	blti	r18, -100		// 20037e40
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20037ea8:	30600001 	addik	r3, r0, 1
}
20037eac:	10330000 	addk	r1, r19, r0
20037eb0:	ea610008 	lwi	r19, r1, 8
20037eb4:	3021000c 	addik	r1, r1, 12
20037eb8:	b60f0008 	rtsd	r15, 8
20037ebc:	80000000 	or	r0, r0, r0

20037ec0 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20037ec0:	3021ffec 	addik	r1, r1, -20
20037ec4:	fa610010 	swi	r19, r1, 16
20037ec8:	12610000 	addk	r19, r1, r0
20037ecc:	f8b30018 	swi	r5, r19, 24
20037ed0:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20037ed4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20037ed8:	f8130004 	swi	r0, r19, 4
20037edc:	b8000054 	bri	84		// 20037f30
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20037ee0:	e8730018 	lwi	r3, r19, 24
20037ee4:	e8630010 	lwi	r3, r3, 16
20037ee8:	e8830000 	lwi	r4, r3, 0
20037eec:	e8730018 	lwi	r3, r19, 24
20037ef0:	e8a3000c 	lwi	r5, r3, 12
20037ef4:	e8730004 	lwi	r3, r19, 4
20037ef8:	64630402 	bslli	r3, r3, 2
20037efc:	10651800 	addk	r3, r5, r3
20037f00:	e8630000 	lwi	r3, r3, 0
20037f04:	14632000 	rsubk	r3, r3, r4
20037f08:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20037f0c:	e8930008 	lwi	r4, r19, 8
20037f10:	e873000c 	lwi	r3, r19, 12
20037f14:	16441803 	cmpu	r18, r4, r3
20037f18:	bcb20008 	bgei	r18, 8		// 20037f20
20037f1c:	10640000 	addk	r3, r4, r0
20037f20:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20037f24:	e8730004 	lwi	r3, r19, 4
20037f28:	30630001 	addik	r3, r3, 1
20037f2c:	f8730004 	swi	r3, r19, 4
20037f30:	e8930004 	lwi	r4, r19, 4
20037f34:	e873001c 	lwi	r3, r19, 28
20037f38:	16432003 	cmpu	r18, r3, r4
20037f3c:	bc52ffa4 	blti	r18, -92		// 20037ee0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20037f40:	e8730018 	lwi	r3, r19, 24
20037f44:	e8830000 	lwi	r4, r3, 0
20037f48:	e8730008 	lwi	r3, r19, 8
20037f4c:	14632000 	rsubk	r3, r3, r4
}
20037f50:	10330000 	addk	r1, r19, r0
20037f54:	ea610010 	lwi	r19, r1, 16
20037f58:	30210014 	addik	r1, r1, 20
20037f5c:	b60f0008 	rtsd	r15, 8
20037f60:	80000000 	or	r0, r0, r0

20037f64 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20037f64:	3021fff4 	addik	r1, r1, -12
20037f68:	fa610008 	swi	r19, r1, 8
20037f6c:	12610000 	addk	r19, r1, r0
20037f70:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20037f74:	e8730010 	lwi	r3, r19, 16
20037f78:	e8630010 	lwi	r3, r3, 16
20037f7c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20037f80:	f8130004 	swi	r0, r19, 4
20037f84:	b8000028 	bri	40		// 20037fac
        fifo->read_inds[i] = 0;
20037f88:	e8730010 	lwi	r3, r19, 16
20037f8c:	e883000c 	lwi	r4, r3, 12
20037f90:	e8730004 	lwi	r3, r19, 4
20037f94:	64630402 	bslli	r3, r3, 2
20037f98:	10641800 	addk	r3, r4, r3
20037f9c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20037fa0:	e8730004 	lwi	r3, r19, 4
20037fa4:	30630001 	addik	r3, r3, 1
20037fa8:	f8730004 	swi	r3, r19, 4
20037fac:	e8730010 	lwi	r3, r19, 16
20037fb0:	e8830008 	lwi	r4, r3, 8
20037fb4:	e8730004 	lwi	r3, r19, 4
20037fb8:	16441803 	cmpu	r18, r4, r3
20037fbc:	bc52ffcc 	blti	r18, -52		// 20037f88
        fifo->read_inds[i] = 0;
    }
}
20037fc0:	10330000 	addk	r1, r19, r0
20037fc4:	ea610008 	lwi	r19, r1, 8
20037fc8:	3021000c 	addik	r1, r1, 12
20037fcc:	b60f0008 	rtsd	r15, 8
20037fd0:	80000000 	or	r0, r0, r0

20037fd4 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20037fd4:	3021fff4 	addik	r1, r1, -12
20037fd8:	fa610008 	swi	r19, r1, 8
20037fdc:	12610000 	addk	r19, r1, r0
20037fe0:	f8b30010 	swi	r5, r19, 16
20037fe4:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20037fe8:	e8730010 	lwi	r3, r19, 16
20037fec:	e8830004 	lwi	r4, r3, 4
20037ff0:	e8730010 	lwi	r3, r19, 16
20037ff4:	e8a3000c 	lwi	r5, r3, 12
20037ff8:	e8730014 	lwi	r3, r19, 20
20037ffc:	64630402 	bslli	r3, r3, 2
20038000:	10651800 	addk	r3, r5, r3
20038004:	e8a30000 	lwi	r5, r3, 0
20038008:	e8730010 	lwi	r3, r19, 16
2003800c:	e8630000 	lwi	r3, r3, 0
20038010:	3063ffff 	addik	r3, r3, -1
20038014:	84651800 	and	r3, r5, r3
20038018:	10631800 	addk	r3, r3, r3
2003801c:	10641800 	addk	r3, r4, r3
20038020:	e4630000 	lhui	r3, r3, 0
20038024:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20038028:	e8730010 	lwi	r3, r19, 16
2003802c:	e883000c 	lwi	r4, r3, 12
20038030:	e8730014 	lwi	r3, r19, 20
20038034:	64630402 	bslli	r3, r3, 2
20038038:	10641800 	addk	r3, r4, r3
2003803c:	e8830000 	lwi	r4, r3, 0
20038040:	30840001 	addik	r4, r4, 1
20038044:	f8830000 	swi	r4, r3, 0
    return value;
20038048:	e4730004 	lhui	r3, r19, 4
}
2003804c:	10330000 	addk	r1, r19, r0
20038050:	ea610008 	lwi	r19, r1, 8
20038054:	3021000c 	addik	r1, r1, 12
20038058:	b60f0008 	rtsd	r15, 8
2003805c:	80000000 	or	r0, r0, r0

20038060 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20038060:	3021fff8 	addik	r1, r1, -8
20038064:	fa610004 	swi	r19, r1, 4
20038068:	12610000 	addk	r19, r1, r0
2003806c:	f8b3000c 	swi	r5, r19, 12
20038070:	10660000 	addk	r3, r6, r0
20038074:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20038078:	e873000c 	lwi	r3, r19, 12
2003807c:	e8830004 	lwi	r4, r3, 4
20038080:	e873000c 	lwi	r3, r19, 12
20038084:	e8630010 	lwi	r3, r3, 16
20038088:	e8a30000 	lwi	r5, r3, 0
2003808c:	e873000c 	lwi	r3, r19, 12
20038090:	e8630000 	lwi	r3, r3, 0
20038094:	3063ffff 	addik	r3, r3, -1
20038098:	84651800 	and	r3, r5, r3
2003809c:	10631800 	addk	r3, r3, r3
200380a0:	10641800 	addk	r3, r4, r3
200380a4:	e4930010 	lhui	r4, r19, 16
200380a8:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
200380ac:	e873000c 	lwi	r3, r19, 12
200380b0:	e8630010 	lwi	r3, r3, 16
200380b4:	e8830000 	lwi	r4, r3, 0
200380b8:	30840001 	addik	r4, r4, 1
200380bc:	f8830000 	swi	r4, r3, 0
}
200380c0:	10330000 	addk	r1, r19, r0
200380c4:	ea610004 	lwi	r19, r1, 4
200380c8:	30210008 	addik	r1, r1, 8
200380cc:	b60f0008 	rtsd	r15, 8
200380d0:	80000000 	or	r0, r0, r0

200380d4 <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200380d4:	3021fff8 	addik	r1, r1, -8
200380d8:	fa610004 	swi	r19, r1, 4
200380dc:	12610000 	addk	r19, r1, r0
200380e0:	f8b3000c 	swi	r5, r19, 12
200380e4:	f8d30010 	swi	r6, r19, 16
200380e8:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200380ec:	e873000c 	lwi	r3, r19, 12
200380f0:	e8630010 	lwi	r3, r3, 16
200380f4:	e8830000 	lwi	r4, r3, 0
200380f8:	e873000c 	lwi	r3, r19, 12
200380fc:	e8a3000c 	lwi	r5, r3, 12
20038100:	e8730010 	lwi	r3, r19, 16
20038104:	64630402 	bslli	r3, r3, 2
20038108:	10651800 	addk	r3, r5, r3
2003810c:	e8630000 	lwi	r3, r3, 0
20038110:	14a32000 	rsubk	r5, r3, r4
20038114:	30600001 	addik	r3, r0, 1
20038118:	e8930014 	lwi	r4, r19, 20
2003811c:	16442803 	cmpu	r18, r4, r5
20038120:	bcb20008 	bgei	r18, 8		// 20038128
20038124:	10600000 	addk	r3, r0, r0
20038128:	a46300ff 	andi	r3, r3, 255
}
2003812c:	10330000 	addk	r1, r19, r0
20038130:	ea610004 	lwi	r19, r1, 4
20038134:	30210008 	addik	r1, r1, 8
20038138:	b60f0008 	rtsd	r15, 8
2003813c:	80000000 	or	r0, r0, r0

20038140 <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20038140:	3021fff8 	addik	r1, r1, -8
20038144:	fa610004 	swi	r19, r1, 4
20038148:	12610000 	addk	r19, r1, r0
2003814c:	f8b3000c 	swi	r5, r19, 12
20038150:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20038154:	e873000c 	lwi	r3, r19, 12
20038158:	e8630010 	lwi	r3, r3, 16
2003815c:	e8830000 	lwi	r4, r3, 0
20038160:	e873000c 	lwi	r3, r19, 12
20038164:	e8a3000c 	lwi	r5, r3, 12
20038168:	e8730010 	lwi	r3, r19, 16
2003816c:	64630402 	bslli	r3, r3, 2
20038170:	10651800 	addk	r3, r5, r3
20038174:	e8630000 	lwi	r3, r3, 0
20038178:	14632000 	rsubk	r3, r3, r4
}
2003817c:	10330000 	addk	r1, r19, r0
20038180:	ea610004 	lwi	r19, r1, 4
20038184:	30210008 	addik	r1, r1, 8
20038188:	b60f0008 	rtsd	r15, 8
2003818c:	80000000 	or	r0, r0, r0

20038190 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20038190:	3021fff4 	addik	r1, r1, -12
20038194:	fa610008 	swi	r19, r1, 8
20038198:	12610000 	addk	r19, r1, r0
2003819c:	f8b30010 	swi	r5, r19, 16
200381a0:	f8d30014 	swi	r6, r19, 20
200381a4:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200381a8:	f8130004 	swi	r0, r19, 4
200381ac:	b800005c 	bri	92		// 20038208
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200381b0:	e8730010 	lwi	r3, r19, 16
200381b4:	e8830000 	lwi	r4, r3, 0
200381b8:	e8730010 	lwi	r3, r19, 16
200381bc:	e8a3000c 	lwi	r5, r3, 12
200381c0:	e8730004 	lwi	r3, r19, 4
200381c4:	64630402 	bslli	r3, r3, 2
200381c8:	10651800 	addk	r3, r5, r3
200381cc:	e8a30000 	lwi	r5, r3, 0
200381d0:	e8730010 	lwi	r3, r19, 16
200381d4:	e8630010 	lwi	r3, r3, 16
200381d8:	e8630000 	lwi	r3, r3, 0
200381dc:	14632800 	rsubk	r3, r3, r5
200381e0:	10641800 	addk	r3, r4, r3
200381e4:	30830001 	addik	r4, r3, 1
200381e8:	e8730018 	lwi	r3, r19, 24
200381ec:	16441803 	cmpu	r18, r4, r3
200381f0:	bc52000c 	blti	r18, 12		// 200381fc
            return 0;
200381f4:	10600000 	addk	r3, r0, r0
200381f8:	b8000024 	bri	36		// 2003821c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200381fc:	e8730004 	lwi	r3, r19, 4
20038200:	30630001 	addik	r3, r3, 1
20038204:	f8730004 	swi	r3, r19, 4
20038208:	e8930004 	lwi	r4, r19, 4
2003820c:	e8730014 	lwi	r3, r19, 20
20038210:	16432003 	cmpu	r18, r3, r4
20038214:	bc52ff9c 	blti	r18, -100		// 200381b0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20038218:	30600001 	addik	r3, r0, 1
}
2003821c:	10330000 	addk	r1, r19, r0
20038220:	ea610008 	lwi	r19, r1, 8
20038224:	3021000c 	addik	r1, r1, 12
20038228:	b60f0008 	rtsd	r15, 8
2003822c:	80000000 	or	r0, r0, r0

20038230 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20038230:	3021ffec 	addik	r1, r1, -20
20038234:	fa610010 	swi	r19, r1, 16
20038238:	12610000 	addk	r19, r1, r0
2003823c:	f8b30018 	swi	r5, r19, 24
20038240:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20038244:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20038248:	f8130004 	swi	r0, r19, 4
2003824c:	b8000054 	bri	84		// 200382a0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20038250:	e8730018 	lwi	r3, r19, 24
20038254:	e8630010 	lwi	r3, r3, 16
20038258:	e8830000 	lwi	r4, r3, 0
2003825c:	e8730018 	lwi	r3, r19, 24
20038260:	e8a3000c 	lwi	r5, r3, 12
20038264:	e8730004 	lwi	r3, r19, 4
20038268:	64630402 	bslli	r3, r3, 2
2003826c:	10651800 	addk	r3, r5, r3
20038270:	e8630000 	lwi	r3, r3, 0
20038274:	14632000 	rsubk	r3, r3, r4
20038278:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003827c:	e8930008 	lwi	r4, r19, 8
20038280:	e873000c 	lwi	r3, r19, 12
20038284:	16441803 	cmpu	r18, r4, r3
20038288:	bcb20008 	bgei	r18, 8		// 20038290
2003828c:	10640000 	addk	r3, r4, r0
20038290:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20038294:	e8730004 	lwi	r3, r19, 4
20038298:	30630001 	addik	r3, r3, 1
2003829c:	f8730004 	swi	r3, r19, 4
200382a0:	e8930004 	lwi	r4, r19, 4
200382a4:	e873001c 	lwi	r3, r19, 28
200382a8:	16432003 	cmpu	r18, r3, r4
200382ac:	bc52ffa4 	blti	r18, -92		// 20038250
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200382b0:	e8730018 	lwi	r3, r19, 24
200382b4:	e8830000 	lwi	r4, r3, 0
200382b8:	e8730008 	lwi	r3, r19, 8
200382bc:	14632000 	rsubk	r3, r3, r4
}
200382c0:	10330000 	addk	r1, r19, r0
200382c4:	ea610010 	lwi	r19, r1, 16
200382c8:	30210014 	addik	r1, r1, 20
200382cc:	b60f0008 	rtsd	r15, 8
200382d0:	80000000 	or	r0, r0, r0

200382d4 <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200382d4:	3021fff4 	addik	r1, r1, -12
200382d8:	fa610008 	swi	r19, r1, 8
200382dc:	12610000 	addk	r19, r1, r0
200382e0:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
200382e4:	e8730010 	lwi	r3, r19, 16
200382e8:	e8630010 	lwi	r3, r3, 16
200382ec:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200382f0:	f8130004 	swi	r0, r19, 4
200382f4:	b8000028 	bri	40		// 2003831c
        fifo->read_inds[i] = 0;
200382f8:	e8730010 	lwi	r3, r19, 16
200382fc:	e883000c 	lwi	r4, r3, 12
20038300:	e8730004 	lwi	r3, r19, 4
20038304:	64630402 	bslli	r3, r3, 2
20038308:	10641800 	addk	r3, r4, r3
2003830c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20038310:	e8730004 	lwi	r3, r19, 4
20038314:	30630001 	addik	r3, r3, 1
20038318:	f8730004 	swi	r3, r19, 4
2003831c:	e8730010 	lwi	r3, r19, 16
20038320:	e8830008 	lwi	r4, r3, 8
20038324:	e8730004 	lwi	r3, r19, 4
20038328:	16441803 	cmpu	r18, r4, r3
2003832c:	bc52ffcc 	blti	r18, -52		// 200382f8
        fifo->read_inds[i] = 0;
    }
}
20038330:	10330000 	addk	r1, r19, r0
20038334:	ea610008 	lwi	r19, r1, 8
20038338:	3021000c 	addik	r1, r1, 12
2003833c:	b60f0008 	rtsd	r15, 8
20038340:	80000000 	or	r0, r0, r0

20038344 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20038344:	3021fff4 	addik	r1, r1, -12
20038348:	fa610008 	swi	r19, r1, 8
2003834c:	12610000 	addk	r19, r1, r0
20038350:	f8b30010 	swi	r5, r19, 16
20038354:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20038358:	e8730010 	lwi	r3, r19, 16
2003835c:	e8830004 	lwi	r4, r3, 4
20038360:	e8730010 	lwi	r3, r19, 16
20038364:	e8a3000c 	lwi	r5, r3, 12
20038368:	e8730014 	lwi	r3, r19, 20
2003836c:	64630402 	bslli	r3, r3, 2
20038370:	10651800 	addk	r3, r5, r3
20038374:	e8a30000 	lwi	r5, r3, 0
20038378:	e8730010 	lwi	r3, r19, 16
2003837c:	e8630000 	lwi	r3, r3, 0
20038380:	3063ffff 	addik	r3, r3, -1
20038384:	84651800 	and	r3, r5, r3
20038388:	64630402 	bslli	r3, r3, 2
2003838c:	10641800 	addk	r3, r4, r3
20038390:	e8630000 	lwi	r3, r3, 0
20038394:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20038398:	e8730010 	lwi	r3, r19, 16
2003839c:	e883000c 	lwi	r4, r3, 12
200383a0:	e8730014 	lwi	r3, r19, 20
200383a4:	64630402 	bslli	r3, r3, 2
200383a8:	10641800 	addk	r3, r4, r3
200383ac:	e8830000 	lwi	r4, r3, 0
200383b0:	30840001 	addik	r4, r4, 1
200383b4:	f8830000 	swi	r4, r3, 0
    return value;
200383b8:	e8730004 	lwi	r3, r19, 4
}
200383bc:	10330000 	addk	r1, r19, r0
200383c0:	ea610008 	lwi	r19, r1, 8
200383c4:	3021000c 	addik	r1, r1, 12
200383c8:	b60f0008 	rtsd	r15, 8
200383cc:	80000000 	or	r0, r0, r0

200383d0 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200383d0:	3021fff8 	addik	r1, r1, -8
200383d4:	fa610004 	swi	r19, r1, 4
200383d8:	12610000 	addk	r19, r1, r0
200383dc:	f8b3000c 	swi	r5, r19, 12
200383e0:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200383e4:	e873000c 	lwi	r3, r19, 12
200383e8:	e8830004 	lwi	r4, r3, 4
200383ec:	e873000c 	lwi	r3, r19, 12
200383f0:	e8630010 	lwi	r3, r3, 16
200383f4:	e8a30000 	lwi	r5, r3, 0
200383f8:	e873000c 	lwi	r3, r19, 12
200383fc:	e8630000 	lwi	r3, r3, 0
20038400:	3063ffff 	addik	r3, r3, -1
20038404:	84651800 	and	r3, r5, r3
20038408:	64630402 	bslli	r3, r3, 2
2003840c:	10641800 	addk	r3, r4, r3
20038410:	e8930010 	lwi	r4, r19, 16
20038414:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20038418:	e873000c 	lwi	r3, r19, 12
2003841c:	e8630010 	lwi	r3, r3, 16
20038420:	e8830000 	lwi	r4, r3, 0
20038424:	30840001 	addik	r4, r4, 1
20038428:	f8830000 	swi	r4, r3, 0
}
2003842c:	10330000 	addk	r1, r19, r0
20038430:	ea610004 	lwi	r19, r1, 4
20038434:	30210008 	addik	r1, r1, 8
20038438:	b60f0008 	rtsd	r15, 8
2003843c:	80000000 	or	r0, r0, r0

20038440 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20038440:	3021fff8 	addik	r1, r1, -8
20038444:	fa610004 	swi	r19, r1, 4
20038448:	12610000 	addk	r19, r1, r0
2003844c:	f8b3000c 	swi	r5, r19, 12
20038450:	f8d30010 	swi	r6, r19, 16
20038454:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20038458:	e873000c 	lwi	r3, r19, 12
2003845c:	e8630010 	lwi	r3, r3, 16
20038460:	e8830000 	lwi	r4, r3, 0
20038464:	e873000c 	lwi	r3, r19, 12
20038468:	e8a3000c 	lwi	r5, r3, 12
2003846c:	e8730010 	lwi	r3, r19, 16
20038470:	64630402 	bslli	r3, r3, 2
20038474:	10651800 	addk	r3, r5, r3
20038478:	e8630000 	lwi	r3, r3, 0
2003847c:	14a32000 	rsubk	r5, r3, r4
20038480:	30600001 	addik	r3, r0, 1
20038484:	e8930014 	lwi	r4, r19, 20
20038488:	16442803 	cmpu	r18, r4, r5
2003848c:	bcb20008 	bgei	r18, 8		// 20038494
20038490:	10600000 	addk	r3, r0, r0
20038494:	a46300ff 	andi	r3, r3, 255
}
20038498:	10330000 	addk	r1, r19, r0
2003849c:	ea610004 	lwi	r19, r1, 4
200384a0:	30210008 	addik	r1, r1, 8
200384a4:	b60f0008 	rtsd	r15, 8
200384a8:	80000000 	or	r0, r0, r0

200384ac <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200384ac:	3021fff8 	addik	r1, r1, -8
200384b0:	fa610004 	swi	r19, r1, 4
200384b4:	12610000 	addk	r19, r1, r0
200384b8:	f8b3000c 	swi	r5, r19, 12
200384bc:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200384c0:	e873000c 	lwi	r3, r19, 12
200384c4:	e8630010 	lwi	r3, r3, 16
200384c8:	e8830000 	lwi	r4, r3, 0
200384cc:	e873000c 	lwi	r3, r19, 12
200384d0:	e8a3000c 	lwi	r5, r3, 12
200384d4:	e8730010 	lwi	r3, r19, 16
200384d8:	64630402 	bslli	r3, r3, 2
200384dc:	10651800 	addk	r3, r5, r3
200384e0:	e8630000 	lwi	r3, r3, 0
200384e4:	14632000 	rsubk	r3, r3, r4
}
200384e8:	10330000 	addk	r1, r19, r0
200384ec:	ea610004 	lwi	r19, r1, 4
200384f0:	30210008 	addik	r1, r1, 8
200384f4:	b60f0008 	rtsd	r15, 8
200384f8:	80000000 	or	r0, r0, r0

200384fc <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200384fc:	3021fff4 	addik	r1, r1, -12
20038500:	fa610008 	swi	r19, r1, 8
20038504:	12610000 	addk	r19, r1, r0
20038508:	f8b30010 	swi	r5, r19, 16
2003850c:	f8d30014 	swi	r6, r19, 20
20038510:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20038514:	f8130004 	swi	r0, r19, 4
20038518:	b800005c 	bri	92		// 20038574
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003851c:	e8730010 	lwi	r3, r19, 16
20038520:	e8830000 	lwi	r4, r3, 0
20038524:	e8730010 	lwi	r3, r19, 16
20038528:	e8a3000c 	lwi	r5, r3, 12
2003852c:	e8730004 	lwi	r3, r19, 4
20038530:	64630402 	bslli	r3, r3, 2
20038534:	10651800 	addk	r3, r5, r3
20038538:	e8a30000 	lwi	r5, r3, 0
2003853c:	e8730010 	lwi	r3, r19, 16
20038540:	e8630010 	lwi	r3, r3, 16
20038544:	e8630000 	lwi	r3, r3, 0
20038548:	14632800 	rsubk	r3, r3, r5
2003854c:	10641800 	addk	r3, r4, r3
20038550:	30830001 	addik	r4, r3, 1
20038554:	e8730018 	lwi	r3, r19, 24
20038558:	16441803 	cmpu	r18, r4, r3
2003855c:	bc52000c 	blti	r18, 12		// 20038568
            return 0;
20038560:	10600000 	addk	r3, r0, r0
20038564:	b8000024 	bri	36		// 20038588
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20038568:	e8730004 	lwi	r3, r19, 4
2003856c:	30630001 	addik	r3, r3, 1
20038570:	f8730004 	swi	r3, r19, 4
20038574:	e8930004 	lwi	r4, r19, 4
20038578:	e8730014 	lwi	r3, r19, 20
2003857c:	16432003 	cmpu	r18, r3, r4
20038580:	bc52ff9c 	blti	r18, -100		// 2003851c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20038584:	30600001 	addik	r3, r0, 1
}
20038588:	10330000 	addk	r1, r19, r0
2003858c:	ea610008 	lwi	r19, r1, 8
20038590:	3021000c 	addik	r1, r1, 12
20038594:	b60f0008 	rtsd	r15, 8
20038598:	80000000 	or	r0, r0, r0

2003859c <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003859c:	3021ffec 	addik	r1, r1, -20
200385a0:	fa610010 	swi	r19, r1, 16
200385a4:	12610000 	addk	r19, r1, r0
200385a8:	f8b30018 	swi	r5, r19, 24
200385ac:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200385b0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200385b4:	f8130004 	swi	r0, r19, 4
200385b8:	b8000054 	bri	84		// 2003860c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200385bc:	e8730018 	lwi	r3, r19, 24
200385c0:	e8630010 	lwi	r3, r3, 16
200385c4:	e8830000 	lwi	r4, r3, 0
200385c8:	e8730018 	lwi	r3, r19, 24
200385cc:	e8a3000c 	lwi	r5, r3, 12
200385d0:	e8730004 	lwi	r3, r19, 4
200385d4:	64630402 	bslli	r3, r3, 2
200385d8:	10651800 	addk	r3, r5, r3
200385dc:	e8630000 	lwi	r3, r3, 0
200385e0:	14632000 	rsubk	r3, r3, r4
200385e4:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200385e8:	e8930008 	lwi	r4, r19, 8
200385ec:	e873000c 	lwi	r3, r19, 12
200385f0:	16441803 	cmpu	r18, r4, r3
200385f4:	bcb20008 	bgei	r18, 8		// 200385fc
200385f8:	10640000 	addk	r3, r4, r0
200385fc:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20038600:	e8730004 	lwi	r3, r19, 4
20038604:	30630001 	addik	r3, r3, 1
20038608:	f8730004 	swi	r3, r19, 4
2003860c:	e8930004 	lwi	r4, r19, 4
20038610:	e873001c 	lwi	r3, r19, 28
20038614:	16432003 	cmpu	r18, r3, r4
20038618:	bc52ffa4 	blti	r18, -92		// 200385bc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003861c:	e8730018 	lwi	r3, r19, 24
20038620:	e8830000 	lwi	r4, r3, 0
20038624:	e8730008 	lwi	r3, r19, 8
20038628:	14632000 	rsubk	r3, r3, r4
}
2003862c:	10330000 	addk	r1, r19, r0
20038630:	ea610010 	lwi	r19, r1, 16
20038634:	30210014 	addik	r1, r1, 20
20038638:	b60f0008 	rtsd	r15, 8
2003863c:	80000000 	or	r0, r0, r0

20038640 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20038640:	3021fff4 	addik	r1, r1, -12
20038644:	fa610008 	swi	r19, r1, 8
20038648:	12610000 	addk	r19, r1, r0
2003864c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20038650:	e8730010 	lwi	r3, r19, 16
20038654:	e8630010 	lwi	r3, r3, 16
20038658:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003865c:	f8130004 	swi	r0, r19, 4
20038660:	b8000028 	bri	40		// 20038688
        fifo->read_inds[i] = 0;
20038664:	e8730010 	lwi	r3, r19, 16
20038668:	e883000c 	lwi	r4, r3, 12
2003866c:	e8730004 	lwi	r3, r19, 4
20038670:	64630402 	bslli	r3, r3, 2
20038674:	10641800 	addk	r3, r4, r3
20038678:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003867c:	e8730004 	lwi	r3, r19, 4
20038680:	30630001 	addik	r3, r3, 1
20038684:	f8730004 	swi	r3, r19, 4
20038688:	e8730010 	lwi	r3, r19, 16
2003868c:	e8830008 	lwi	r4, r3, 8
20038690:	e8730004 	lwi	r3, r19, 4
20038694:	16441803 	cmpu	r18, r4, r3
20038698:	bc52ffcc 	blti	r18, -52		// 20038664
        fifo->read_inds[i] = 0;
    }
}
2003869c:	10330000 	addk	r1, r19, r0
200386a0:	ea610008 	lwi	r19, r1, 8
200386a4:	3021000c 	addik	r1, r1, 12
200386a8:	b60f0008 	rtsd	r15, 8
200386ac:	80000000 	or	r0, r0, r0

200386b0 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200386b0:	3021fff0 	addik	r1, r1, -16
200386b4:	fa61000c 	swi	r19, r1, 12
200386b8:	12610000 	addk	r19, r1, r0
200386bc:	f8b30014 	swi	r5, r19, 20
200386c0:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200386c4:	e8730014 	lwi	r3, r19, 20
200386c8:	e8830004 	lwi	r4, r3, 4
200386cc:	e8730014 	lwi	r3, r19, 20
200386d0:	e8a3000c 	lwi	r5, r3, 12
200386d4:	e8730018 	lwi	r3, r19, 24
200386d8:	64630402 	bslli	r3, r3, 2
200386dc:	10651800 	addk	r3, r5, r3
200386e0:	e8a30000 	lwi	r5, r3, 0
200386e4:	e8730014 	lwi	r3, r19, 20
200386e8:	e8630000 	lwi	r3, r3, 0
200386ec:	3063ffff 	addik	r3, r3, -1
200386f0:	84651800 	and	r3, r5, r3
200386f4:	64630403 	bslli	r3, r3, 3
200386f8:	10641800 	addk	r3, r4, r3
200386fc:	e8830000 	lwi	r4, r3, 0
20038700:	e8a30004 	lwi	r5, r3, 4
20038704:	f8930004 	swi	r4, r19, 4
20038708:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2003870c:	e8730014 	lwi	r3, r19, 20
20038710:	e883000c 	lwi	r4, r3, 12
20038714:	e8730018 	lwi	r3, r19, 24
20038718:	64630402 	bslli	r3, r3, 2
2003871c:	10641800 	addk	r3, r4, r3
20038720:	e8830000 	lwi	r4, r3, 0
20038724:	30840001 	addik	r4, r4, 1
20038728:	f8830000 	swi	r4, r3, 0
    return value;
2003872c:	e8930004 	lwi	r4, r19, 4
20038730:	e8b30008 	lwi	r5, r19, 8
}
20038734:	10640000 	addk	r3, r4, r0
20038738:	10850000 	addk	r4, r5, r0
2003873c:	10330000 	addk	r1, r19, r0
20038740:	ea61000c 	lwi	r19, r1, 12
20038744:	30210010 	addik	r1, r1, 16
20038748:	b60f0008 	rtsd	r15, 8
2003874c:	80000000 	or	r0, r0, r0

20038750 <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20038750:	3021fff8 	addik	r1, r1, -8
20038754:	fa610004 	swi	r19, r1, 4
20038758:	12610000 	addk	r19, r1, r0
2003875c:	f8b3000c 	swi	r5, r19, 12
20038760:	f8d30010 	swi	r6, r19, 16
20038764:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20038768:	e873000c 	lwi	r3, r19, 12
2003876c:	e8830004 	lwi	r4, r3, 4
20038770:	e873000c 	lwi	r3, r19, 12
20038774:	e8630010 	lwi	r3, r3, 16
20038778:	e8a30000 	lwi	r5, r3, 0
2003877c:	e873000c 	lwi	r3, r19, 12
20038780:	e8630000 	lwi	r3, r3, 0
20038784:	3063ffff 	addik	r3, r3, -1
20038788:	84651800 	and	r3, r5, r3
2003878c:	64630403 	bslli	r3, r3, 3
20038790:	10641800 	addk	r3, r4, r3
20038794:	e8930010 	lwi	r4, r19, 16
20038798:	e8b30014 	lwi	r5, r19, 20
2003879c:	f8830000 	swi	r4, r3, 0
200387a0:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
200387a4:	e873000c 	lwi	r3, r19, 12
200387a8:	e8630010 	lwi	r3, r3, 16
200387ac:	e8830000 	lwi	r4, r3, 0
200387b0:	30840001 	addik	r4, r4, 1
200387b4:	f8830000 	swi	r4, r3, 0
}
200387b8:	10330000 	addk	r1, r19, r0
200387bc:	ea610004 	lwi	r19, r1, 4
200387c0:	30210008 	addik	r1, r1, 8
200387c4:	b60f0008 	rtsd	r15, 8
200387c8:	80000000 	or	r0, r0, r0

200387cc <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200387cc:	3021fff8 	addik	r1, r1, -8
200387d0:	fa610004 	swi	r19, r1, 4
200387d4:	12610000 	addk	r19, r1, r0
200387d8:	f8b3000c 	swi	r5, r19, 12
200387dc:	f8d30010 	swi	r6, r19, 16
200387e0:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200387e4:	e873000c 	lwi	r3, r19, 12
200387e8:	e8630010 	lwi	r3, r3, 16
200387ec:	e8830000 	lwi	r4, r3, 0
200387f0:	e873000c 	lwi	r3, r19, 12
200387f4:	e8a3000c 	lwi	r5, r3, 12
200387f8:	e8730010 	lwi	r3, r19, 16
200387fc:	64630402 	bslli	r3, r3, 2
20038800:	10651800 	addk	r3, r5, r3
20038804:	e8630000 	lwi	r3, r3, 0
20038808:	14a32000 	rsubk	r5, r3, r4
2003880c:	30600001 	addik	r3, r0, 1
20038810:	e8930014 	lwi	r4, r19, 20
20038814:	16442803 	cmpu	r18, r4, r5
20038818:	bcb20008 	bgei	r18, 8		// 20038820
2003881c:	10600000 	addk	r3, r0, r0
20038820:	a46300ff 	andi	r3, r3, 255
}
20038824:	10330000 	addk	r1, r19, r0
20038828:	ea610004 	lwi	r19, r1, 4
2003882c:	30210008 	addik	r1, r1, 8
20038830:	b60f0008 	rtsd	r15, 8
20038834:	80000000 	or	r0, r0, r0

20038838 <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20038838:	3021fff8 	addik	r1, r1, -8
2003883c:	fa610004 	swi	r19, r1, 4
20038840:	12610000 	addk	r19, r1, r0
20038844:	f8b3000c 	swi	r5, r19, 12
20038848:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003884c:	e873000c 	lwi	r3, r19, 12
20038850:	e8630010 	lwi	r3, r3, 16
20038854:	e8830000 	lwi	r4, r3, 0
20038858:	e873000c 	lwi	r3, r19, 12
2003885c:	e8a3000c 	lwi	r5, r3, 12
20038860:	e8730010 	lwi	r3, r19, 16
20038864:	64630402 	bslli	r3, r3, 2
20038868:	10651800 	addk	r3, r5, r3
2003886c:	e8630000 	lwi	r3, r3, 0
20038870:	14632000 	rsubk	r3, r3, r4
}
20038874:	10330000 	addk	r1, r19, r0
20038878:	ea610004 	lwi	r19, r1, 4
2003887c:	30210008 	addik	r1, r1, 8
20038880:	b60f0008 	rtsd	r15, 8
20038884:	80000000 	or	r0, r0, r0

20038888 <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20038888:	3021fff4 	addik	r1, r1, -12
2003888c:	fa610008 	swi	r19, r1, 8
20038890:	12610000 	addk	r19, r1, r0
20038894:	f8b30010 	swi	r5, r19, 16
20038898:	f8d30014 	swi	r6, r19, 20
2003889c:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200388a0:	f8130004 	swi	r0, r19, 4
200388a4:	b800005c 	bri	92		// 20038900
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200388a8:	e8730010 	lwi	r3, r19, 16
200388ac:	e8830000 	lwi	r4, r3, 0
200388b0:	e8730010 	lwi	r3, r19, 16
200388b4:	e8a3000c 	lwi	r5, r3, 12
200388b8:	e8730004 	lwi	r3, r19, 4
200388bc:	64630402 	bslli	r3, r3, 2
200388c0:	10651800 	addk	r3, r5, r3
200388c4:	e8a30000 	lwi	r5, r3, 0
200388c8:	e8730010 	lwi	r3, r19, 16
200388cc:	e8630010 	lwi	r3, r3, 16
200388d0:	e8630000 	lwi	r3, r3, 0
200388d4:	14632800 	rsubk	r3, r3, r5
200388d8:	10641800 	addk	r3, r4, r3
200388dc:	30830001 	addik	r4, r3, 1
200388e0:	e8730018 	lwi	r3, r19, 24
200388e4:	16441803 	cmpu	r18, r4, r3
200388e8:	bc52000c 	blti	r18, 12		// 200388f4
            return 0;
200388ec:	10600000 	addk	r3, r0, r0
200388f0:	b8000024 	bri	36		// 20038914
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200388f4:	e8730004 	lwi	r3, r19, 4
200388f8:	30630001 	addik	r3, r3, 1
200388fc:	f8730004 	swi	r3, r19, 4
20038900:	e8930004 	lwi	r4, r19, 4
20038904:	e8730014 	lwi	r3, r19, 20
20038908:	16432003 	cmpu	r18, r3, r4
2003890c:	bc52ff9c 	blti	r18, -100		// 200388a8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20038910:	30600001 	addik	r3, r0, 1
}
20038914:	10330000 	addk	r1, r19, r0
20038918:	ea610008 	lwi	r19, r1, 8
2003891c:	3021000c 	addik	r1, r1, 12
20038920:	b60f0008 	rtsd	r15, 8
20038924:	80000000 	or	r0, r0, r0

20038928 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20038928:	3021ffec 	addik	r1, r1, -20
2003892c:	fa610010 	swi	r19, r1, 16
20038930:	12610000 	addk	r19, r1, r0
20038934:	f8b30018 	swi	r5, r19, 24
20038938:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003893c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20038940:	f8130004 	swi	r0, r19, 4
20038944:	b8000054 	bri	84		// 20038998
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20038948:	e8730018 	lwi	r3, r19, 24
2003894c:	e8630010 	lwi	r3, r3, 16
20038950:	e8830000 	lwi	r4, r3, 0
20038954:	e8730018 	lwi	r3, r19, 24
20038958:	e8a3000c 	lwi	r5, r3, 12
2003895c:	e8730004 	lwi	r3, r19, 4
20038960:	64630402 	bslli	r3, r3, 2
20038964:	10651800 	addk	r3, r5, r3
20038968:	e8630000 	lwi	r3, r3, 0
2003896c:	14632000 	rsubk	r3, r3, r4
20038970:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20038974:	e8930008 	lwi	r4, r19, 8
20038978:	e873000c 	lwi	r3, r19, 12
2003897c:	16441803 	cmpu	r18, r4, r3
20038980:	bcb20008 	bgei	r18, 8		// 20038988
20038984:	10640000 	addk	r3, r4, r0
20038988:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003898c:	e8730004 	lwi	r3, r19, 4
20038990:	30630001 	addik	r3, r3, 1
20038994:	f8730004 	swi	r3, r19, 4
20038998:	e8930004 	lwi	r4, r19, 4
2003899c:	e873001c 	lwi	r3, r19, 28
200389a0:	16432003 	cmpu	r18, r3, r4
200389a4:	bc52ffa4 	blti	r18, -92		// 20038948
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200389a8:	e8730018 	lwi	r3, r19, 24
200389ac:	e8830000 	lwi	r4, r3, 0
200389b0:	e8730008 	lwi	r3, r19, 8
200389b4:	14632000 	rsubk	r3, r3, r4
}
200389b8:	10330000 	addk	r1, r19, r0
200389bc:	ea610010 	lwi	r19, r1, 16
200389c0:	30210014 	addik	r1, r1, 20
200389c4:	b60f0008 	rtsd	r15, 8
200389c8:	80000000 	or	r0, r0, r0

200389cc <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200389cc:	3021fff4 	addik	r1, r1, -12
200389d0:	fa610008 	swi	r19, r1, 8
200389d4:	12610000 	addk	r19, r1, r0
200389d8:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
200389dc:	e8730010 	lwi	r3, r19, 16
200389e0:	e8630010 	lwi	r3, r3, 16
200389e4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200389e8:	f8130004 	swi	r0, r19, 4
200389ec:	b8000028 	bri	40		// 20038a14
        fifo->read_inds[i] = 0;
200389f0:	e8730010 	lwi	r3, r19, 16
200389f4:	e883000c 	lwi	r4, r3, 12
200389f8:	e8730004 	lwi	r3, r19, 4
200389fc:	64630402 	bslli	r3, r3, 2
20038a00:	10641800 	addk	r3, r4, r3
20038a04:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20038a08:	e8730004 	lwi	r3, r19, 4
20038a0c:	30630001 	addik	r3, r3, 1
20038a10:	f8730004 	swi	r3, r19, 4
20038a14:	e8730010 	lwi	r3, r19, 16
20038a18:	e8830008 	lwi	r4, r3, 8
20038a1c:	e8730004 	lwi	r3, r19, 4
20038a20:	16441803 	cmpu	r18, r4, r3
20038a24:	bc52ffcc 	blti	r18, -52		// 200389f0
        fifo->read_inds[i] = 0;
    }
}
20038a28:	10330000 	addk	r1, r19, r0
20038a2c:	ea610008 	lwi	r19, r1, 8
20038a30:	3021000c 	addik	r1, r1, 12
20038a34:	b60f0008 	rtsd	r15, 8
20038a38:	80000000 	or	r0, r0, r0

20038a3c <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20038a3c:	3021fff4 	addik	r1, r1, -12
20038a40:	fa610008 	swi	r19, r1, 8
20038a44:	12610000 	addk	r19, r1, r0
20038a48:	f8b30010 	swi	r5, r19, 16
20038a4c:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20038a50:	e8730010 	lwi	r3, r19, 16
20038a54:	e8830004 	lwi	r4, r3, 4
20038a58:	e8730010 	lwi	r3, r19, 16
20038a5c:	e8a3000c 	lwi	r5, r3, 12
20038a60:	e8730014 	lwi	r3, r19, 20
20038a64:	64630402 	bslli	r3, r3, 2
20038a68:	10651800 	addk	r3, r5, r3
20038a6c:	e8a30000 	lwi	r5, r3, 0
20038a70:	e8730010 	lwi	r3, r19, 16
20038a74:	e8630000 	lwi	r3, r3, 0
20038a78:	3063ffff 	addik	r3, r3, -1
20038a7c:	84651800 	and	r3, r5, r3
20038a80:	64630402 	bslli	r3, r3, 2
20038a84:	10641800 	addk	r3, r4, r3
20038a88:	e8630000 	lwi	r3, r3, 0
20038a8c:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20038a90:	e8730010 	lwi	r3, r19, 16
20038a94:	e883000c 	lwi	r4, r3, 12
20038a98:	e8730014 	lwi	r3, r19, 20
20038a9c:	64630402 	bslli	r3, r3, 2
20038aa0:	10641800 	addk	r3, r4, r3
20038aa4:	e8830000 	lwi	r4, r3, 0
20038aa8:	30840001 	addik	r4, r4, 1
20038aac:	f8830000 	swi	r4, r3, 0
    return value;
20038ab0:	e8730004 	lwi	r3, r19, 4
}
20038ab4:	10330000 	addk	r1, r19, r0
20038ab8:	ea610008 	lwi	r19, r1, 8
20038abc:	3021000c 	addik	r1, r1, 12
20038ac0:	b60f0008 	rtsd	r15, 8
20038ac4:	80000000 	or	r0, r0, r0

20038ac8 <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20038ac8:	3021fff8 	addik	r1, r1, -8
20038acc:	fa610004 	swi	r19, r1, 4
20038ad0:	12610000 	addk	r19, r1, r0
20038ad4:	f8b3000c 	swi	r5, r19, 12
20038ad8:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20038adc:	e873000c 	lwi	r3, r19, 12
20038ae0:	e8830004 	lwi	r4, r3, 4
20038ae4:	e873000c 	lwi	r3, r19, 12
20038ae8:	e8630010 	lwi	r3, r3, 16
20038aec:	e8a30000 	lwi	r5, r3, 0
20038af0:	e873000c 	lwi	r3, r19, 12
20038af4:	e8630000 	lwi	r3, r3, 0
20038af8:	3063ffff 	addik	r3, r3, -1
20038afc:	84651800 	and	r3, r5, r3
20038b00:	64630402 	bslli	r3, r3, 2
20038b04:	10641800 	addk	r3, r4, r3
20038b08:	e8930010 	lwi	r4, r19, 16
20038b0c:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20038b10:	e873000c 	lwi	r3, r19, 12
20038b14:	e8630010 	lwi	r3, r3, 16
20038b18:	e8830000 	lwi	r4, r3, 0
20038b1c:	30840001 	addik	r4, r4, 1
20038b20:	f8830000 	swi	r4, r3, 0
}
20038b24:	10330000 	addk	r1, r19, r0
20038b28:	ea610004 	lwi	r19, r1, 4
20038b2c:	30210008 	addik	r1, r1, 8
20038b30:	b60f0008 	rtsd	r15, 8
20038b34:	80000000 	or	r0, r0, r0

20038b38 <read_AC_PRED_DIR>:
	
	static u8 needInit = 1;
	
	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_AC_PRED_DIR() {
20038b38:	3021ffe0 	addik	r1, r1, -32
20038b3c:	f9e10000 	swi	r15, r1, 0
20038b40:	fa61001c 	swi	r19, r1, 28
20038b44:	12610000 	addk	r19, r1, r0
		index_AC_PRED_DIR = decoder_texture_IS_AC_PRED_DIR->read_inds[0];
20038b48:	b0002004 	imm	8196
20038b4c:	e8608b18 	lwi	r3, r0, -29928	// 20048b18 <decoder_texture_IS_AC_PRED_DIR>
20038b50:	e863000c 	lwi	r3, r3, 12
20038b54:	e8630000 	lwi	r3, r3, 0
20038b58:	b0002006 	imm	8198
20038b5c:	f8602f70 	swi	r3, r0, 12144	// 20062f70 <index_AC_PRED_DIR>
		numTokens_AC_PRED_DIR = index_AC_PRED_DIR + fifo_i8_get_num_tokens(decoder_texture_IS_AC_PRED_DIR, 0);
20038b60:	b0002004 	imm	8196
20038b64:	e8608b18 	lwi	r3, r0, -29928	// 20048b18 <decoder_texture_IS_AC_PRED_DIR>
20038b68:	10a30000 	addk	r5, r3, r0
20038b6c:	10c00000 	addk	r6, r0, r0
20038b70:	b9f4e120 	brlid	r15, -7904	// 20036c90 <fifo_i8_get_num_tokens>
20038b74:	80000000 	or	r0, r0, r0
20038b78:	10830000 	addk	r4, r3, r0
20038b7c:	b0002006 	imm	8198
20038b80:	e8602f70 	lwi	r3, r0, 12144	// 20062f70 <index_AC_PRED_DIR>
20038b84:	10641800 	addk	r3, r4, r3
20038b88:	b0002006 	imm	8198
20038b8c:	f8602f74 	swi	r3, r0, 12148	// 20062f74 <numTokens_AC_PRED_DIR>
	}
20038b90:	e9e10000 	lwi	r15, r1, 0
20038b94:	10330000 	addk	r1, r19, r0
20038b98:	ea61001c 	lwi	r19, r1, 28
20038b9c:	30210020 	addik	r1, r1, 32
20038ba0:	b60f0008 	rtsd	r15, 8
20038ba4:	80000000 	or	r0, r0, r0

20038ba8 <read_end_AC_PRED_DIR>:
	
	static void read_end_AC_PRED_DIR() {
20038ba8:	3021fff8 	addik	r1, r1, -8
20038bac:	fa610004 	swi	r19, r1, 4
20038bb0:	12610000 	addk	r19, r1, r0
		decoder_texture_IS_AC_PRED_DIR->read_inds[0] = index_AC_PRED_DIR;
20038bb4:	b0002004 	imm	8196
20038bb8:	e8608b18 	lwi	r3, r0, -29928	// 20048b18 <decoder_texture_IS_AC_PRED_DIR>
20038bbc:	e863000c 	lwi	r3, r3, 12
20038bc0:	b0002006 	imm	8198
20038bc4:	e8802f70 	lwi	r4, r0, 12144	// 20062f70 <index_AC_PRED_DIR>
20038bc8:	f8830000 	swi	r4, r3, 0
	}
20038bcc:	10330000 	addk	r1, r19, r0
20038bd0:	ea610004 	lwi	r19, r1, 4
20038bd4:	30210008 	addik	r1, r1, 8
20038bd8:	b60f0008 	rtsd	r15, 8
20038bdc:	80000000 	or	r0, r0, r0

20038be0 <read_QFS_AC>:
	static void read_QFS_AC() {
20038be0:	3021ffe0 	addik	r1, r1, -32
20038be4:	f9e10000 	swi	r15, r1, 0
20038be8:	fa61001c 	swi	r19, r1, 28
20038bec:	12610000 	addk	r19, r1, r0
		index_QFS_AC = decoder_texture_IS_QFS_AC->read_inds[0];
20038bf0:	b0002004 	imm	8196
20038bf4:	e8608ac0 	lwi	r3, r0, -30016	// 20048ac0 <decoder_texture_IS_QFS_AC>
20038bf8:	e863000c 	lwi	r3, r3, 12
20038bfc:	e8630000 	lwi	r3, r3, 0
20038c00:	b0002006 	imm	8198
20038c04:	f8602f78 	swi	r3, r0, 12152	// 20062f78 <index_QFS_AC>
		numTokens_QFS_AC = index_QFS_AC + fifo_i16_get_num_tokens(decoder_texture_IS_QFS_AC, 0);
20038c08:	b0002004 	imm	8196
20038c0c:	e8608ac0 	lwi	r3, r0, -30016	// 20048ac0 <decoder_texture_IS_QFS_AC>
20038c10:	10a30000 	addk	r5, r3, r0
20038c14:	10c00000 	addk	r6, r0, r0
20038c18:	b9f4e3e4 	brlid	r15, -7196	// 20036ffc <fifo_i16_get_num_tokens>
20038c1c:	80000000 	or	r0, r0, r0
20038c20:	10830000 	addk	r4, r3, r0
20038c24:	b0002006 	imm	8198
20038c28:	e8602f78 	lwi	r3, r0, 12152	// 20062f78 <index_QFS_AC>
20038c2c:	10641800 	addk	r3, r4, r3
20038c30:	b0002006 	imm	8198
20038c34:	f8602f7c 	swi	r3, r0, 12156	// 20062f7c <numTokens_QFS_AC>
	}
20038c38:	e9e10000 	lwi	r15, r1, 0
20038c3c:	10330000 	addk	r1, r19, r0
20038c40:	ea61001c 	lwi	r19, r1, 28
20038c44:	30210020 	addik	r1, r1, 32
20038c48:	b60f0008 	rtsd	r15, 8
20038c4c:	80000000 	or	r0, r0, r0

20038c50 <read_end_QFS_AC>:
	
	static void read_end_QFS_AC() {
20038c50:	3021fff8 	addik	r1, r1, -8
20038c54:	fa610004 	swi	r19, r1, 4
20038c58:	12610000 	addk	r19, r1, r0
		decoder_texture_IS_QFS_AC->read_inds[0] = index_QFS_AC;
20038c5c:	b0002004 	imm	8196
20038c60:	e8608ac0 	lwi	r3, r0, -30016	// 20048ac0 <decoder_texture_IS_QFS_AC>
20038c64:	e863000c 	lwi	r3, r3, 12
20038c68:	b0002006 	imm	8198
20038c6c:	e8802f78 	lwi	r4, r0, 12152	// 20062f78 <index_QFS_AC>
20038c70:	f8830000 	swi	r4, r3, 0
	}
20038c74:	10330000 	addk	r1, r19, r0
20038c78:	ea610004 	lwi	r19, r1, 4
20038c7c:	30210008 	addik	r1, r1, 8
20038c80:	b60f0008 	rtsd	r15, 8
20038c84:	80000000 	or	r0, r0, r0

20038c88 <write_PQF_AC>:

	static void write_PQF_AC() {
20038c88:	3021ffe0 	addik	r1, r1, -32
20038c8c:	f9e10000 	swi	r15, r1, 0
20038c90:	fa61001c 	swi	r19, r1, 28
20038c94:	12610000 	addk	r19, r1, r0
		index_PQF_AC = (*decoder_texture_IS_PQF_AC->write_ind);
20038c98:	b0002004 	imm	8196
20038c9c:	e8608acc 	lwi	r3, r0, -30004	// 20048acc <decoder_texture_IS_PQF_AC>
20038ca0:	e8630010 	lwi	r3, r3, 16
20038ca4:	e8630000 	lwi	r3, r3, 0
20038ca8:	b0002006 	imm	8198
20038cac:	f8602f80 	swi	r3, r0, 12160	// 20062f80 <index_PQF_AC>
		numFree_PQF_AC = index_PQF_AC + fifo_i16_get_room(decoder_texture_IS_PQF_AC, NUM_READERS_PQF_AC);
20038cb0:	b0002004 	imm	8196
20038cb4:	e8608acc 	lwi	r3, r0, -30004	// 20048acc <decoder_texture_IS_PQF_AC>
20038cb8:	10a30000 	addk	r5, r3, r0
20038cbc:	30c00001 	addik	r6, r0, 1
20038cc0:	b9f4e42c 	brlid	r15, -7124	// 200370ec <fifo_i16_get_room>
20038cc4:	80000000 	or	r0, r0, r0
20038cc8:	10830000 	addk	r4, r3, r0
20038ccc:	b0002006 	imm	8198
20038cd0:	e8602f80 	lwi	r3, r0, 12160	// 20062f80 <index_PQF_AC>
20038cd4:	10641800 	addk	r3, r4, r3
20038cd8:	b0002006 	imm	8198
20038cdc:	f8602f84 	swi	r3, r0, 12164	// 20062f84 <numFree_PQF_AC>
	}
20038ce0:	e9e10000 	lwi	r15, r1, 0
20038ce4:	10330000 	addk	r1, r19, r0
20038ce8:	ea61001c 	lwi	r19, r1, 28
20038cec:	30210020 	addik	r1, r1, 32
20038cf0:	b60f0008 	rtsd	r15, 8
20038cf4:	80000000 	or	r0, r0, r0

20038cf8 <write_end_PQF_AC>:
	
	static void write_end_PQF_AC() {
20038cf8:	3021fff8 	addik	r1, r1, -8
20038cfc:	fa610004 	swi	r19, r1, 4
20038d00:	12610000 	addk	r19, r1, r0
		(*decoder_texture_IS_PQF_AC->write_ind) = index_PQF_AC;
20038d04:	b0002004 	imm	8196
20038d08:	e8608acc 	lwi	r3, r0, -30004	// 20048acc <decoder_texture_IS_PQF_AC>
20038d0c:	e8630010 	lwi	r3, r3, 16
20038d10:	b0002006 	imm	8198
20038d14:	e8802f80 	lwi	r4, r0, 12160	// 20062f80 <index_PQF_AC>
20038d18:	f8830000 	swi	r4, r3, 0
	}
20038d1c:	10330000 	addk	r1, r19, r0
20038d20:	ea610004 	lwi	r19, r1, 4
20038d24:	30210008 	addik	r1, r1, 8
20038d28:	b60f0008 	rtsd	r15, 8
20038d2c:	80000000 	or	r0, r0, r0

20038d30 <isSchedulable_skip>:
	// Functions/procedures


	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_skip() {
20038d30:	3021fff0 	addik	r1, r1, -16
20038d34:	fa61000c 	swi	r19, r1, 12
20038d38:	12610000 	addk	r19, r1, r0
		i32 result;
		i8 i;
	
		i = tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR];
20038d3c:	b0002004 	imm	8196
20038d40:	e8608b18 	lwi	r3, r0, -29928	// 20048b18 <decoder_texture_IS_AC_PRED_DIR>
20038d44:	e8830004 	lwi	r4, r3, 4
20038d48:	b0002006 	imm	8198
20038d4c:	e8602f70 	lwi	r3, r0, 12144	// 20062f70 <index_AC_PRED_DIR>
20038d50:	a46301ff 	andi	r3, r3, 511
20038d54:	10641800 	addk	r3, r4, r3
20038d58:	e0630000 	lbui	r3, r3, 0
20038d5c:	f0730004 	sbi	r3, r19, 4
		result = i < 0;
20038d60:	e0730004 	lbui	r3, r19, 4
20038d64:	64630007 	bsrli	r3, r3, 7
20038d68:	a46300ff 	andi	r3, r3, 255
20038d6c:	f8730008 	swi	r3, r19, 8
		return result;
20038d70:	e8730008 	lwi	r3, r19, 8
	}
20038d74:	10330000 	addk	r1, r19, r0
20038d78:	ea61000c 	lwi	r19, r1, 12
20038d7c:	30210010 	addik	r1, r1, 16
20038d80:	b60f0008 	rtsd	r15, 8
20038d84:	80000000 	or	r0, r0, r0

20038d88 <skip>:
	
	static void skip() {
20038d88:	3021ffd8 	addik	r1, r1, -40
20038d8c:	f9e10000 	swi	r15, r1, 0
20038d90:	fa610024 	swi	r19, r1, 36
20038d94:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_AC_PRED_DIR = index_AC_PRED_DIR % SIZE_AC_PRED_DIR;
20038d98:	b0002006 	imm	8198
20038d9c:	e8602f70 	lwi	r3, r0, 12144	// 20062f70 <index_AC_PRED_DIR>
20038da0:	a46301ff 	andi	r3, r3, 511
20038da4:	f873001c 	swi	r3, r19, 28
	
		i8 i;
	
		i = tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR];
20038da8:	b0002004 	imm	8196
20038dac:	e8608b18 	lwi	r3, r0, -29928	// 20048b18 <decoder_texture_IS_AC_PRED_DIR>
20038db0:	e8830004 	lwi	r4, r3, 4
20038db4:	b0002006 	imm	8198
20038db8:	e8602f70 	lwi	r3, r0, 12144	// 20062f70 <index_AC_PRED_DIR>
20038dbc:	a46301ff 	andi	r3, r3, 511
20038dc0:	10641800 	addk	r3, r4, r3
20038dc4:	e0630000 	lbui	r3, r3, 0
20038dc8:	f0730020 	sbi	r3, r19, 32
	
		// Update ports indexes
		index_AC_PRED_DIR += 1;
20038dcc:	b0002006 	imm	8198
20038dd0:	e8602f70 	lwi	r3, r0, 12144	// 20062f70 <index_AC_PRED_DIR>
20038dd4:	30630001 	addik	r3, r3, 1
20038dd8:	b0002006 	imm	8198
20038ddc:	f8602f70 	swi	r3, r0, 12144	// 20062f70 <index_AC_PRED_DIR>
		
		read_end_AC_PRED_DIR();
20038de0:	b9f4fdc8 	brlid	r15, -568	// 20038ba8 <read_end_AC_PRED_DIR>
20038de4:	80000000 	or	r0, r0, r0
	}
20038de8:	e9e10000 	lwi	r15, r1, 0
20038dec:	10330000 	addk	r1, r19, r0
20038df0:	ea610024 	lwi	r19, r1, 36
20038df4:	30210028 	addik	r1, r1, 40
20038df8:	b60f0008 	rtsd	r15, 8
20038dfc:	80000000 	or	r0, r0, r0

20038e00 <isSchedulable_rw>:
	static i32 isSchedulable_rw() {
20038e00:	3021fff4 	addik	r1, r1, -12
20038e04:	fa610008 	swi	r19, r1, 8
20038e08:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
20038e0c:	30600001 	addik	r3, r0, 1
20038e10:	f8730004 	swi	r3, r19, 4
		return result;
20038e14:	e8730004 	lwi	r3, r19, 4
	}
20038e18:	10330000 	addk	r1, r19, r0
20038e1c:	ea610008 	lwi	r19, r1, 8
20038e20:	3021000c 	addik	r1, r1, 12
20038e24:	b60f0008 	rtsd	r15, 8
20038e28:	80000000 	or	r0, r0, r0

20038e2c <rw>:
	
	static void rw() {
20038e2c:	3021ffc4 	addik	r1, r1, -60
20038e30:	f9e10000 	swi	r15, r1, 0
20038e34:	fa610038 	swi	r19, r1, 56
20038e38:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_AC_PRED_DIR = index_AC_PRED_DIR % SIZE_AC_PRED_DIR;
20038e3c:	b0002006 	imm	8198
20038e40:	e8602f70 	lwi	r3, r0, 12144	// 20062f70 <index_AC_PRED_DIR>
20038e44:	a46301ff 	andi	r3, r3, 511
20038e48:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_QFS_AC = index_QFS_AC % SIZE_QFS_AC;
20038e4c:	b0002006 	imm	8198
20038e50:	e8602f78 	lwi	r3, r0, 12152	// 20062f78 <index_QFS_AC>
20038e54:	a46301ff 	andi	r3, r3, 511
20038e58:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_PQF_AC = index_PQF_AC % SIZE_PQF_AC;
20038e5c:	b0002006 	imm	8198
20038e60:	e8602f80 	lwi	r3, r0, 12160	// 20062f80 <index_PQF_AC>
20038e64:	a46301ff 	andi	r3, r3, 511
20038e68:	f8730028 	swi	r3, r19, 40
		i32 offset;
		i32 addr;
		i8 tmp_Scanmode;
		i16 tmp_QFS_AC;
	
		dir = tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR];
20038e6c:	b0002004 	imm	8196
20038e70:	e8608b18 	lwi	r3, r0, -29928	// 20048b18 <decoder_texture_IS_AC_PRED_DIR>
20038e74:	e8830004 	lwi	r4, r3, 4
20038e78:	b0002006 	imm	8198
20038e7c:	e8602f70 	lwi	r3, r0, 12144	// 20062f70 <index_AC_PRED_DIR>
20038e80:	a46301ff 	andi	r3, r3, 511
20038e84:	10641800 	addk	r3, r4, r3
20038e88:	e0630000 	lbui	r3, r3, 0
20038e8c:	f073002c 	sbi	r3, r19, 44
		offset = (dir << 6) + 1;
20038e90:	e073002c 	lbui	r3, r19, 44
20038e94:	90630060 	sext8	r3, r3
20038e98:	64630406 	bslli	r3, r3, 6
20038e9c:	30630001 	addik	r3, r3, 1
20038ea0:	f8730030 	swi	r3, r19, 48
		addr = 0;
20038ea4:	f813001c 	swi	r0, r19, 28
		while (addr <= 62) {
20038ea8:	b8000090 	bri	144		// 20038f38
			tmp_Scanmode = Scanmode[offset + addr];
20038eac:	e8930030 	lwi	r4, r19, 48
20038eb0:	e873001c 	lwi	r3, r19, 28
20038eb4:	10641800 	addk	r3, r4, r3
20038eb8:	b0002004 	imm	8196
20038ebc:	e06354bc 	lbui	r3, r3, 21692
20038ec0:	f0730034 	sbi	r3, r19, 52
			tmp_QFS_AC = tokens_QFS_AC[(index_QFS_AC + (tmp_Scanmode - 1)) % SIZE_QFS_AC];
20038ec4:	b0002004 	imm	8196
20038ec8:	e8608ac0 	lwi	r3, r0, -30016	// 20048ac0 <decoder_texture_IS_QFS_AC>
20038ecc:	e8830004 	lwi	r4, r3, 4
20038ed0:	e0730034 	lbui	r3, r19, 52
20038ed4:	90a30060 	sext8	r5, r3
20038ed8:	b0002006 	imm	8198
20038edc:	e8602f78 	lwi	r3, r0, 12152	// 20062f78 <index_QFS_AC>
20038ee0:	10651800 	addk	r3, r5, r3
20038ee4:	3063ffff 	addik	r3, r3, -1
20038ee8:	a46301ff 	andi	r3, r3, 511
20038eec:	10631800 	addk	r3, r3, r3
20038ef0:	10641800 	addk	r3, r4, r3
20038ef4:	e4630000 	lhui	r3, r3, 0
20038ef8:	f4730036 	shi	r3, r19, 54
			tokens_PQF_AC[(index_PQF_AC + (addr)) % SIZE_PQF_AC] = tmp_QFS_AC;
20038efc:	b0002004 	imm	8196
20038f00:	e8608acc 	lwi	r3, r0, -30004	// 20048acc <decoder_texture_IS_PQF_AC>
20038f04:	e8830004 	lwi	r4, r3, 4
20038f08:	b0002006 	imm	8198
20038f0c:	e8a02f80 	lwi	r5, r0, 12160	// 20062f80 <index_PQF_AC>
20038f10:	e873001c 	lwi	r3, r19, 28
20038f14:	10651800 	addk	r3, r5, r3
20038f18:	a46301ff 	andi	r3, r3, 511
20038f1c:	10631800 	addk	r3, r3, r3
20038f20:	10641800 	addk	r3, r4, r3
20038f24:	e4930036 	lhui	r4, r19, 54
20038f28:	f4830000 	shi	r4, r3, 0
			addr = addr + 1;
20038f2c:	e873001c 	lwi	r3, r19, 28
20038f30:	30630001 	addik	r3, r3, 1
20038f34:	f873001c 	swi	r3, r19, 28
		i16 tmp_QFS_AC;
	
		dir = tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR];
		offset = (dir << 6) + 1;
		addr = 0;
		while (addr <= 62) {
20038f38:	e893001c 	lwi	r4, r19, 28
20038f3c:	3060003e 	addik	r3, r0, 62
20038f40:	16441801 	cmp	r18, r4, r3
20038f44:	bcb2ff68 	bgei	r18, -152		// 20038eac
			tokens_PQF_AC[(index_PQF_AC + (addr)) % SIZE_PQF_AC] = tmp_QFS_AC;
			addr = addr + 1;
		}
	
		// Update ports indexes
		index_AC_PRED_DIR += 1;
20038f48:	b0002006 	imm	8198
20038f4c:	e8602f70 	lwi	r3, r0, 12144	// 20062f70 <index_AC_PRED_DIR>
20038f50:	30630001 	addik	r3, r3, 1
20038f54:	b0002006 	imm	8198
20038f58:	f8602f70 	swi	r3, r0, 12144	// 20062f70 <index_AC_PRED_DIR>
		index_QFS_AC += 63;
20038f5c:	b0002006 	imm	8198
20038f60:	e8602f78 	lwi	r3, r0, 12152	// 20062f78 <index_QFS_AC>
20038f64:	3063003f 	addik	r3, r3, 63
20038f68:	b0002006 	imm	8198
20038f6c:	f8602f78 	swi	r3, r0, 12152	// 20062f78 <index_QFS_AC>
		index_PQF_AC += 63;
20038f70:	b0002006 	imm	8198
20038f74:	e8602f80 	lwi	r3, r0, 12160	// 20062f80 <index_PQF_AC>
20038f78:	3063003f 	addik	r3, r3, 63
20038f7c:	b0002006 	imm	8198
20038f80:	f8602f80 	swi	r3, r0, 12160	// 20062f80 <index_PQF_AC>
		
		read_end_AC_PRED_DIR();
20038f84:	b9f4fc24 	brlid	r15, -988	// 20038ba8 <read_end_AC_PRED_DIR>
20038f88:	80000000 	or	r0, r0, r0
		read_end_QFS_AC();
20038f8c:	b9f4fcc4 	brlid	r15, -828	// 20038c50 <read_end_QFS_AC>
20038f90:	80000000 	or	r0, r0, r0
		write_end_PQF_AC();
20038f94:	b9f4fd64 	brlid	r15, -668	// 20038cf8 <write_end_PQF_AC>
20038f98:	80000000 	or	r0, r0, r0
	}
20038f9c:	e9e10000 	lwi	r15, r1, 0
20038fa0:	10330000 	addk	r1, r19, r0
20038fa4:	ea610038 	lwi	r19, r1, 56
20038fa8:	3021003c 	addik	r1, r1, 60
20038fac:	b60f0008 	rtsd	r15, 8
20038fb0:	80000000 	or	r0, r0, r0

20038fb4 <decoder_texture_IS_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_texture_IS_initialize() {
20038fb4:	3021fff4 	addik	r1, r1, -12
20038fb8:	fa610008 	swi	r19, r1, 8
20038fbc:	12610000 	addk	r19, r1, r0
		int i = 0;
20038fc0:	f8130004 	swi	r0, r19, 4
		
	finished:
		// no read_end/write_end here!
		return;
20038fc4:	80000000 	or	r0, r0, r0
	}
20038fc8:	10330000 	addk	r1, r19, r0
20038fcc:	ea610008 	lwi	r19, r1, 8
20038fd0:	3021000c 	addik	r1, r1, 12
20038fd4:	b60f0008 	rtsd	r15, 8
20038fd8:	80000000 	or	r0, r0, r0

20038fdc <decoder_texture_IS_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	int decoder_texture_IS_scheduler() {
20038fdc:	3021ffd4 	addik	r1, r1, -44
20038fe0:	f9e10000 	swi	r15, r1, 0
20038fe4:	fa610028 	swi	r19, r1, 40
20038fe8:	12610000 	addk	r19, r1, r0
		int i = 0;
20038fec:	f813001c 	swi	r0, r19, 28
		if(needInit){
20038ff0:	b0002004 	imm	8196
20038ff4:	e0608b58 	lbui	r3, r0, -29864	// 20048b58 <needInit>
20038ff8:	bc030014 	beqi	r3, 20		// 2003900c
			decoder_texture_IS_initialize();
20038ffc:	b9f4ffb8 	brlid	r15, -72	// 20038fb4 <decoder_texture_IS_initialize>
20039000:	80000000 	or	r0, r0, r0
			needInit = 0;
20039004:	b0002004 	imm	8196
20039008:	f0008b58 	sbi	r0, r0, -29864	// 20048b58 <needInit>
		}
		read_AC_PRED_DIR();
2003900c:	b9f4fb2c 	brlid	r15, -1236	// 20038b38 <read_AC_PRED_DIR>
20039010:	80000000 	or	r0, r0, r0
		read_QFS_AC();
20039014:	b9f4fbcc 	brlid	r15, -1076	// 20038be0 <read_QFS_AC>
20039018:	80000000 	or	r0, r0, r0
		write_PQF_AC();
2003901c:	b9f4fc6c 	brlid	r15, -916	// 20038c88 <write_PQF_AC>
20039020:	80000000 	or	r0, r0, r0
		
	
	
		while (1) {
			// Action loop
			if (numTokens_AC_PRED_DIR - index_AC_PRED_DIR >= 1 && numTokens_QFS_AC - index_QFS_AC >= 63 && isSchedulable_skip()) {
20039024:	b0002006 	imm	8198
20039028:	e8802f74 	lwi	r4, r0, 12148	// 20062f74 <numTokens_AC_PRED_DIR>
2003902c:	b0002006 	imm	8198
20039030:	e8602f70 	lwi	r3, r0, 12144	// 20062f70 <index_AC_PRED_DIR>
20039034:	88641800 	xor	r3, r4, r3
20039038:	bc03005c 	beqi	r3, 92		// 20039094
2003903c:	b0002006 	imm	8198
20039040:	e8802f7c 	lwi	r4, r0, 12156	// 20062f7c <numTokens_QFS_AC>
20039044:	b0002006 	imm	8198
20039048:	e8602f78 	lwi	r3, r0, 12152	// 20062f78 <index_QFS_AC>
2003904c:	14832000 	rsubk	r4, r3, r4
20039050:	3060003e 	addik	r3, r0, 62
20039054:	16441803 	cmpu	r18, r4, r3
20039058:	bcb2003c 	bgei	r18, 60		// 20039094
2003905c:	b9f4fcd4 	brlid	r15, -812	// 20038d30 <isSchedulable_skip>
20039060:	80000000 	or	r0, r0, r0
20039064:	bc030030 	beqi	r3, 48		// 20039094
				int stop = 0;
20039068:	f8130024 	swi	r0, r19, 36
				if (stop != 0) {
2003906c:	e8730024 	lwi	r3, r19, 36
20039070:	bc030008 	beqi	r3, 8		// 20039078
					goto finished;
20039074:	b80000c0 	bri	192		// 20039134
				}
				skip();
20039078:	b9f4fd10 	brlid	r15, -752	// 20038d88 <skip>
2003907c:	80000000 	or	r0, r0, r0
				i++;
20039080:	e873001c 	lwi	r3, r19, 28
20039084:	30630001 	addik	r3, r3, 1
20039088:	f873001c 	swi	r3, r19, 28
		
	
	
		while (1) {
			// Action loop
			if (numTokens_AC_PRED_DIR - index_AC_PRED_DIR >= 1 && numTokens_QFS_AC - index_QFS_AC >= 63 && isSchedulable_skip()) {
2003908c:	80000000 	or	r0, r0, r0
				rw();
				i++;
			} else {
				goto finished;
			}
		}
20039090:	b800ff94 	bri	-108		// 20039024
				if (stop != 0) {
					goto finished;
				}
				skip();
				i++;
			} else if (numTokens_AC_PRED_DIR - index_AC_PRED_DIR >= 1 && numTokens_QFS_AC - index_QFS_AC >= 63 && isSchedulable_rw()) {
20039094:	b0002006 	imm	8198
20039098:	e8802f74 	lwi	r4, r0, 12148	// 20062f74 <numTokens_AC_PRED_DIR>
2003909c:	b0002006 	imm	8198
200390a0:	e8602f70 	lwi	r3, r0, 12144	// 20062f70 <index_AC_PRED_DIR>
200390a4:	88641800 	xor	r3, r4, r3
200390a8:	bc03008c 	beqi	r3, 140		// 20039134
200390ac:	b0002006 	imm	8198
200390b0:	e8802f7c 	lwi	r4, r0, 12156	// 20062f7c <numTokens_QFS_AC>
200390b4:	b0002006 	imm	8198
200390b8:	e8602f78 	lwi	r3, r0, 12152	// 20062f78 <index_QFS_AC>
200390bc:	14832000 	rsubk	r4, r3, r4
200390c0:	3060003e 	addik	r3, r0, 62
200390c4:	16441803 	cmpu	r18, r4, r3
200390c8:	bcb2006c 	bgei	r18, 108		// 20039134
200390cc:	b9f4fd34 	brlid	r15, -716	// 20038e00 <isSchedulable_rw>
200390d0:	80000000 	or	r0, r0, r0
200390d4:	bc030060 	beqi	r3, 96		// 20039134
				int stop = 0;
200390d8:	f8130020 	swi	r0, r19, 32
				if (63 > SIZE_PQF_AC - index_PQF_AC + decoder_texture_IS_PQF_AC->read_inds[0]) {
200390dc:	b0002004 	imm	8196
200390e0:	e8608acc 	lwi	r3, r0, -30004	// 20048acc <decoder_texture_IS_PQF_AC>
200390e4:	e863000c 	lwi	r3, r3, 12
200390e8:	e8830000 	lwi	r4, r3, 0
200390ec:	b0002006 	imm	8198
200390f0:	e8602f80 	lwi	r3, r0, 12160	// 20062f80 <index_PQF_AC>
200390f4:	14632000 	rsubk	r3, r3, r4
200390f8:	30830200 	addik	r4, r3, 512
200390fc:	3060003e 	addik	r3, r0, 62
20039100:	16441803 	cmpu	r18, r4, r3
20039104:	bc52000c 	blti	r18, 12		// 20039110
					stop = 1;
20039108:	30600001 	addik	r3, r0, 1
2003910c:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
20039110:	e8730020 	lwi	r3, r19, 32
20039114:	bc030008 	beqi	r3, 8		// 2003911c
					goto finished;
20039118:	b800001c 	bri	28		// 20039134
				}
				rw();
2003911c:	b9f4fd10 	brlid	r15, -752	// 20038e2c <rw>
20039120:	80000000 	or	r0, r0, r0
				i++;
20039124:	e873001c 	lwi	r3, r19, 28
20039128:	30630001 	addik	r3, r3, 1
2003912c:	f873001c 	swi	r3, r19, 28
			} else {
				goto finished;
			}
		}
20039130:	b800fef4 	bri	-268		// 20039024
		
	finished:
	
		read_end_AC_PRED_DIR();
20039134:	b9f4fa74 	brlid	r15, -1420	// 20038ba8 <read_end_AC_PRED_DIR>
20039138:	80000000 	or	r0, r0, r0
		read_end_QFS_AC();
2003913c:	b9f4fb14 	brlid	r15, -1260	// 20038c50 <read_end_QFS_AC>
20039140:	80000000 	or	r0, r0, r0
		write_end_PQF_AC();
20039144:	b9f4fbb4 	brlid	r15, -1100	// 20038cf8 <write_end_PQF_AC>
20039148:	80000000 	or	r0, r0, r0
		
		
		return i;
2003914c:	e873001c 	lwi	r3, r19, 28
	}
20039150:	e9e10000 	lwi	r15, r1, 0
20039154:	10330000 	addk	r1, r19, r0
20039158:	ea610028 	lwi	r19, r1, 40
2003915c:	3021002c 	addik	r1, r1, 44
20039160:	b60f0008 	rtsd	r15, 8
20039164:	80000000 	or	r0, r0, r0

20039168 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20039168:	3021fff8 	addik	r1, r1, -8
2003916c:	fa610004 	swi	r19, r1, 4
20039170:	12610000 	addk	r19, r1, r0
20039174:	f8b3000c 	swi	r5, r19, 12
20039178:	f8d30010 	swi	r6, r19, 16
2003917c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20039180:	e873000c 	lwi	r3, r19, 12
20039184:	e8630010 	lwi	r3, r3, 16
20039188:	e8830000 	lwi	r4, r3, 0
2003918c:	e873000c 	lwi	r3, r19, 12
20039190:	e8a3000c 	lwi	r5, r3, 12
20039194:	e8730010 	lwi	r3, r19, 16
20039198:	64630402 	bslli	r3, r3, 2
2003919c:	10651800 	addk	r3, r5, r3
200391a0:	e8630000 	lwi	r3, r3, 0
200391a4:	14a32000 	rsubk	r5, r3, r4
200391a8:	30600001 	addik	r3, r0, 1
200391ac:	e8930014 	lwi	r4, r19, 20
200391b0:	16442803 	cmpu	r18, r4, r5
200391b4:	bcb20008 	bgei	r18, 8		// 200391bc
200391b8:	10600000 	addk	r3, r0, r0
200391bc:	a46300ff 	andi	r3, r3, 255
}
200391c0:	10330000 	addk	r1, r19, r0
200391c4:	ea610004 	lwi	r19, r1, 4
200391c8:	30210008 	addik	r1, r1, 8
200391cc:	b60f0008 	rtsd	r15, 8
200391d0:	80000000 	or	r0, r0, r0

200391d4 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200391d4:	3021fff8 	addik	r1, r1, -8
200391d8:	fa610004 	swi	r19, r1, 4
200391dc:	12610000 	addk	r19, r1, r0
200391e0:	f8b3000c 	swi	r5, r19, 12
200391e4:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200391e8:	e873000c 	lwi	r3, r19, 12
200391ec:	e8630010 	lwi	r3, r3, 16
200391f0:	e8830000 	lwi	r4, r3, 0
200391f4:	e873000c 	lwi	r3, r19, 12
200391f8:	e8a3000c 	lwi	r5, r3, 12
200391fc:	e8730010 	lwi	r3, r19, 16
20039200:	64630402 	bslli	r3, r3, 2
20039204:	10651800 	addk	r3, r5, r3
20039208:	e8630000 	lwi	r3, r3, 0
2003920c:	14632000 	rsubk	r3, r3, r4
}
20039210:	10330000 	addk	r1, r19, r0
20039214:	ea610004 	lwi	r19, r1, 4
20039218:	30210008 	addik	r1, r1, 8
2003921c:	b60f0008 	rtsd	r15, 8
20039220:	80000000 	or	r0, r0, r0

20039224 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20039224:	3021fff4 	addik	r1, r1, -12
20039228:	fa610008 	swi	r19, r1, 8
2003922c:	12610000 	addk	r19, r1, r0
20039230:	f8b30010 	swi	r5, r19, 16
20039234:	f8d30014 	swi	r6, r19, 20
20039238:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003923c:	f8130004 	swi	r0, r19, 4
20039240:	b800005c 	bri	92		// 2003929c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20039244:	e8730010 	lwi	r3, r19, 16
20039248:	e8830000 	lwi	r4, r3, 0
2003924c:	e8730010 	lwi	r3, r19, 16
20039250:	e8a3000c 	lwi	r5, r3, 12
20039254:	e8730004 	lwi	r3, r19, 4
20039258:	64630402 	bslli	r3, r3, 2
2003925c:	10651800 	addk	r3, r5, r3
20039260:	e8a30000 	lwi	r5, r3, 0
20039264:	e8730010 	lwi	r3, r19, 16
20039268:	e8630010 	lwi	r3, r3, 16
2003926c:	e8630000 	lwi	r3, r3, 0
20039270:	14632800 	rsubk	r3, r3, r5
20039274:	10641800 	addk	r3, r4, r3
20039278:	30830001 	addik	r4, r3, 1
2003927c:	e8730018 	lwi	r3, r19, 24
20039280:	16441803 	cmpu	r18, r4, r3
20039284:	bc52000c 	blti	r18, 12		// 20039290
            return 0;
20039288:	10600000 	addk	r3, r0, r0
2003928c:	b8000024 	bri	36		// 200392b0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20039290:	e8730004 	lwi	r3, r19, 4
20039294:	30630001 	addik	r3, r3, 1
20039298:	f8730004 	swi	r3, r19, 4
2003929c:	e8930004 	lwi	r4, r19, 4
200392a0:	e8730014 	lwi	r3, r19, 20
200392a4:	16432003 	cmpu	r18, r3, r4
200392a8:	bc52ff9c 	blti	r18, -100		// 20039244
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200392ac:	30600001 	addik	r3, r0, 1
}
200392b0:	10330000 	addk	r1, r19, r0
200392b4:	ea610008 	lwi	r19, r1, 8
200392b8:	3021000c 	addik	r1, r1, 12
200392bc:	b60f0008 	rtsd	r15, 8
200392c0:	80000000 	or	r0, r0, r0

200392c4 <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200392c4:	3021ffec 	addik	r1, r1, -20
200392c8:	fa610010 	swi	r19, r1, 16
200392cc:	12610000 	addk	r19, r1, r0
200392d0:	f8b30018 	swi	r5, r19, 24
200392d4:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200392d8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200392dc:	f8130004 	swi	r0, r19, 4
200392e0:	b8000054 	bri	84		// 20039334
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200392e4:	e8730018 	lwi	r3, r19, 24
200392e8:	e8630010 	lwi	r3, r3, 16
200392ec:	e8830000 	lwi	r4, r3, 0
200392f0:	e8730018 	lwi	r3, r19, 24
200392f4:	e8a3000c 	lwi	r5, r3, 12
200392f8:	e8730004 	lwi	r3, r19, 4
200392fc:	64630402 	bslli	r3, r3, 2
20039300:	10651800 	addk	r3, r5, r3
20039304:	e8630000 	lwi	r3, r3, 0
20039308:	14632000 	rsubk	r3, r3, r4
2003930c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20039310:	e8930008 	lwi	r4, r19, 8
20039314:	e873000c 	lwi	r3, r19, 12
20039318:	16441803 	cmpu	r18, r4, r3
2003931c:	bcb20008 	bgei	r18, 8		// 20039324
20039320:	10640000 	addk	r3, r4, r0
20039324:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20039328:	e8730004 	lwi	r3, r19, 4
2003932c:	30630001 	addik	r3, r3, 1
20039330:	f8730004 	swi	r3, r19, 4
20039334:	e8930004 	lwi	r4, r19, 4
20039338:	e873001c 	lwi	r3, r19, 28
2003933c:	16432003 	cmpu	r18, r3, r4
20039340:	bc52ffa4 	blti	r18, -92		// 200392e4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20039344:	e8730018 	lwi	r3, r19, 24
20039348:	e8830000 	lwi	r4, r3, 0
2003934c:	e8730008 	lwi	r3, r19, 8
20039350:	14632000 	rsubk	r3, r3, r4
}
20039354:	10330000 	addk	r1, r19, r0
20039358:	ea610010 	lwi	r19, r1, 16
2003935c:	30210014 	addik	r1, r1, 20
20039360:	b60f0008 	rtsd	r15, 8
20039364:	80000000 	or	r0, r0, r0

20039368 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20039368:	3021fff4 	addik	r1, r1, -12
2003936c:	fa610008 	swi	r19, r1, 8
20039370:	12610000 	addk	r19, r1, r0
20039374:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20039378:	e8730010 	lwi	r3, r19, 16
2003937c:	e8630010 	lwi	r3, r3, 16
20039380:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20039384:	f8130004 	swi	r0, r19, 4
20039388:	b8000028 	bri	40		// 200393b0
        fifo->read_inds[i] = 0;
2003938c:	e8730010 	lwi	r3, r19, 16
20039390:	e883000c 	lwi	r4, r3, 12
20039394:	e8730004 	lwi	r3, r19, 4
20039398:	64630402 	bslli	r3, r3, 2
2003939c:	10641800 	addk	r3, r4, r3
200393a0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200393a4:	e8730004 	lwi	r3, r19, 4
200393a8:	30630001 	addik	r3, r3, 1
200393ac:	f8730004 	swi	r3, r19, 4
200393b0:	e8730010 	lwi	r3, r19, 16
200393b4:	e8830008 	lwi	r4, r3, 8
200393b8:	e8730004 	lwi	r3, r19, 4
200393bc:	16441803 	cmpu	r18, r4, r3
200393c0:	bc52ffcc 	blti	r18, -52		// 2003938c
        fifo->read_inds[i] = 0;
    }
}
200393c4:	10330000 	addk	r1, r19, r0
200393c8:	ea610008 	lwi	r19, r1, 8
200393cc:	3021000c 	addik	r1, r1, 12
200393d0:	b60f0008 	rtsd	r15, 8
200393d4:	80000000 	or	r0, r0, r0

200393d8 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200393d8:	3021fff4 	addik	r1, r1, -12
200393dc:	fa610008 	swi	r19, r1, 8
200393e0:	12610000 	addk	r19, r1, r0
200393e4:	f8b30010 	swi	r5, r19, 16
200393e8:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200393ec:	e8730010 	lwi	r3, r19, 16
200393f0:	e8830004 	lwi	r4, r3, 4
200393f4:	e8730010 	lwi	r3, r19, 16
200393f8:	e8a3000c 	lwi	r5, r3, 12
200393fc:	e8730014 	lwi	r3, r19, 20
20039400:	64630402 	bslli	r3, r3, 2
20039404:	10651800 	addk	r3, r5, r3
20039408:	e8a30000 	lwi	r5, r3, 0
2003940c:	e8730010 	lwi	r3, r19, 16
20039410:	e8630000 	lwi	r3, r3, 0
20039414:	3063ffff 	addik	r3, r3, -1
20039418:	84651800 	and	r3, r5, r3
2003941c:	10641800 	addk	r3, r4, r3
20039420:	e0630000 	lbui	r3, r3, 0
20039424:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20039428:	e8730010 	lwi	r3, r19, 16
2003942c:	e883000c 	lwi	r4, r3, 12
20039430:	e8730014 	lwi	r3, r19, 20
20039434:	64630402 	bslli	r3, r3, 2
20039438:	10641800 	addk	r3, r4, r3
2003943c:	e8830000 	lwi	r4, r3, 0
20039440:	30840001 	addik	r4, r4, 1
20039444:	f8830000 	swi	r4, r3, 0
    return value;
20039448:	e0730004 	lbui	r3, r19, 4
2003944c:	90630060 	sext8	r3, r3
}
20039450:	10330000 	addk	r1, r19, r0
20039454:	ea610008 	lwi	r19, r1, 8
20039458:	3021000c 	addik	r1, r1, 12
2003945c:	b60f0008 	rtsd	r15, 8
20039460:	80000000 	or	r0, r0, r0

20039464 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20039464:	3021fff8 	addik	r1, r1, -8
20039468:	fa610004 	swi	r19, r1, 4
2003946c:	12610000 	addk	r19, r1, r0
20039470:	f8b3000c 	swi	r5, r19, 12
20039474:	10660000 	addk	r3, r6, r0
20039478:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003947c:	e873000c 	lwi	r3, r19, 12
20039480:	e8830004 	lwi	r4, r3, 4
20039484:	e873000c 	lwi	r3, r19, 12
20039488:	e8630010 	lwi	r3, r3, 16
2003948c:	e8a30000 	lwi	r5, r3, 0
20039490:	e873000c 	lwi	r3, r19, 12
20039494:	e8630000 	lwi	r3, r3, 0
20039498:	3063ffff 	addik	r3, r3, -1
2003949c:	84651800 	and	r3, r5, r3
200394a0:	10641800 	addk	r3, r4, r3
200394a4:	e0930010 	lbui	r4, r19, 16
200394a8:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
200394ac:	e873000c 	lwi	r3, r19, 12
200394b0:	e8630010 	lwi	r3, r3, 16
200394b4:	e8830000 	lwi	r4, r3, 0
200394b8:	30840001 	addik	r4, r4, 1
200394bc:	f8830000 	swi	r4, r3, 0
}
200394c0:	10330000 	addk	r1, r19, r0
200394c4:	ea610004 	lwi	r19, r1, 4
200394c8:	30210008 	addik	r1, r1, 8
200394cc:	b60f0008 	rtsd	r15, 8
200394d0:	80000000 	or	r0, r0, r0

200394d4 <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200394d4:	3021fff8 	addik	r1, r1, -8
200394d8:	fa610004 	swi	r19, r1, 4
200394dc:	12610000 	addk	r19, r1, r0
200394e0:	f8b3000c 	swi	r5, r19, 12
200394e4:	f8d30010 	swi	r6, r19, 16
200394e8:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200394ec:	e873000c 	lwi	r3, r19, 12
200394f0:	e8630010 	lwi	r3, r3, 16
200394f4:	e8830000 	lwi	r4, r3, 0
200394f8:	e873000c 	lwi	r3, r19, 12
200394fc:	e8a3000c 	lwi	r5, r3, 12
20039500:	e8730010 	lwi	r3, r19, 16
20039504:	64630402 	bslli	r3, r3, 2
20039508:	10651800 	addk	r3, r5, r3
2003950c:	e8630000 	lwi	r3, r3, 0
20039510:	14a32000 	rsubk	r5, r3, r4
20039514:	30600001 	addik	r3, r0, 1
20039518:	e8930014 	lwi	r4, r19, 20
2003951c:	16442803 	cmpu	r18, r4, r5
20039520:	bcb20008 	bgei	r18, 8		// 20039528
20039524:	10600000 	addk	r3, r0, r0
20039528:	a46300ff 	andi	r3, r3, 255
}
2003952c:	10330000 	addk	r1, r19, r0
20039530:	ea610004 	lwi	r19, r1, 4
20039534:	30210008 	addik	r1, r1, 8
20039538:	b60f0008 	rtsd	r15, 8
2003953c:	80000000 	or	r0, r0, r0

20039540 <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20039540:	3021fff8 	addik	r1, r1, -8
20039544:	fa610004 	swi	r19, r1, 4
20039548:	12610000 	addk	r19, r1, r0
2003954c:	f8b3000c 	swi	r5, r19, 12
20039550:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20039554:	e873000c 	lwi	r3, r19, 12
20039558:	e8630010 	lwi	r3, r3, 16
2003955c:	e8830000 	lwi	r4, r3, 0
20039560:	e873000c 	lwi	r3, r19, 12
20039564:	e8a3000c 	lwi	r5, r3, 12
20039568:	e8730010 	lwi	r3, r19, 16
2003956c:	64630402 	bslli	r3, r3, 2
20039570:	10651800 	addk	r3, r5, r3
20039574:	e8630000 	lwi	r3, r3, 0
20039578:	14632000 	rsubk	r3, r3, r4
}
2003957c:	10330000 	addk	r1, r19, r0
20039580:	ea610004 	lwi	r19, r1, 4
20039584:	30210008 	addik	r1, r1, 8
20039588:	b60f0008 	rtsd	r15, 8
2003958c:	80000000 	or	r0, r0, r0

20039590 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20039590:	3021fff4 	addik	r1, r1, -12
20039594:	fa610008 	swi	r19, r1, 8
20039598:	12610000 	addk	r19, r1, r0
2003959c:	f8b30010 	swi	r5, r19, 16
200395a0:	f8d30014 	swi	r6, r19, 20
200395a4:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200395a8:	f8130004 	swi	r0, r19, 4
200395ac:	b800005c 	bri	92		// 20039608
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200395b0:	e8730010 	lwi	r3, r19, 16
200395b4:	e8830000 	lwi	r4, r3, 0
200395b8:	e8730010 	lwi	r3, r19, 16
200395bc:	e8a3000c 	lwi	r5, r3, 12
200395c0:	e8730004 	lwi	r3, r19, 4
200395c4:	64630402 	bslli	r3, r3, 2
200395c8:	10651800 	addk	r3, r5, r3
200395cc:	e8a30000 	lwi	r5, r3, 0
200395d0:	e8730010 	lwi	r3, r19, 16
200395d4:	e8630010 	lwi	r3, r3, 16
200395d8:	e8630000 	lwi	r3, r3, 0
200395dc:	14632800 	rsubk	r3, r3, r5
200395e0:	10641800 	addk	r3, r4, r3
200395e4:	30830001 	addik	r4, r3, 1
200395e8:	e8730018 	lwi	r3, r19, 24
200395ec:	16441803 	cmpu	r18, r4, r3
200395f0:	bc52000c 	blti	r18, 12		// 200395fc
            return 0;
200395f4:	10600000 	addk	r3, r0, r0
200395f8:	b8000024 	bri	36		// 2003961c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200395fc:	e8730004 	lwi	r3, r19, 4
20039600:	30630001 	addik	r3, r3, 1
20039604:	f8730004 	swi	r3, r19, 4
20039608:	e8930004 	lwi	r4, r19, 4
2003960c:	e8730014 	lwi	r3, r19, 20
20039610:	16432003 	cmpu	r18, r3, r4
20039614:	bc52ff9c 	blti	r18, -100		// 200395b0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20039618:	30600001 	addik	r3, r0, 1
}
2003961c:	10330000 	addk	r1, r19, r0
20039620:	ea610008 	lwi	r19, r1, 8
20039624:	3021000c 	addik	r1, r1, 12
20039628:	b60f0008 	rtsd	r15, 8
2003962c:	80000000 	or	r0, r0, r0

20039630 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20039630:	3021ffec 	addik	r1, r1, -20
20039634:	fa610010 	swi	r19, r1, 16
20039638:	12610000 	addk	r19, r1, r0
2003963c:	f8b30018 	swi	r5, r19, 24
20039640:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20039644:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20039648:	f8130004 	swi	r0, r19, 4
2003964c:	b8000054 	bri	84		// 200396a0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20039650:	e8730018 	lwi	r3, r19, 24
20039654:	e8630010 	lwi	r3, r3, 16
20039658:	e8830000 	lwi	r4, r3, 0
2003965c:	e8730018 	lwi	r3, r19, 24
20039660:	e8a3000c 	lwi	r5, r3, 12
20039664:	e8730004 	lwi	r3, r19, 4
20039668:	64630402 	bslli	r3, r3, 2
2003966c:	10651800 	addk	r3, r5, r3
20039670:	e8630000 	lwi	r3, r3, 0
20039674:	14632000 	rsubk	r3, r3, r4
20039678:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003967c:	e8930008 	lwi	r4, r19, 8
20039680:	e873000c 	lwi	r3, r19, 12
20039684:	16441803 	cmpu	r18, r4, r3
20039688:	bcb20008 	bgei	r18, 8		// 20039690
2003968c:	10640000 	addk	r3, r4, r0
20039690:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20039694:	e8730004 	lwi	r3, r19, 4
20039698:	30630001 	addik	r3, r3, 1
2003969c:	f8730004 	swi	r3, r19, 4
200396a0:	e8930004 	lwi	r4, r19, 4
200396a4:	e873001c 	lwi	r3, r19, 28
200396a8:	16432003 	cmpu	r18, r3, r4
200396ac:	bc52ffa4 	blti	r18, -92		// 20039650
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200396b0:	e8730018 	lwi	r3, r19, 24
200396b4:	e8830000 	lwi	r4, r3, 0
200396b8:	e8730008 	lwi	r3, r19, 8
200396bc:	14632000 	rsubk	r3, r3, r4
}
200396c0:	10330000 	addk	r1, r19, r0
200396c4:	ea610010 	lwi	r19, r1, 16
200396c8:	30210014 	addik	r1, r1, 20
200396cc:	b60f0008 	rtsd	r15, 8
200396d0:	80000000 	or	r0, r0, r0

200396d4 <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200396d4:	3021fff4 	addik	r1, r1, -12
200396d8:	fa610008 	swi	r19, r1, 8
200396dc:	12610000 	addk	r19, r1, r0
200396e0:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
200396e4:	e8730010 	lwi	r3, r19, 16
200396e8:	e8630010 	lwi	r3, r3, 16
200396ec:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200396f0:	f8130004 	swi	r0, r19, 4
200396f4:	b8000028 	bri	40		// 2003971c
        fifo->read_inds[i] = 0;
200396f8:	e8730010 	lwi	r3, r19, 16
200396fc:	e883000c 	lwi	r4, r3, 12
20039700:	e8730004 	lwi	r3, r19, 4
20039704:	64630402 	bslli	r3, r3, 2
20039708:	10641800 	addk	r3, r4, r3
2003970c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20039710:	e8730004 	lwi	r3, r19, 4
20039714:	30630001 	addik	r3, r3, 1
20039718:	f8730004 	swi	r3, r19, 4
2003971c:	e8730010 	lwi	r3, r19, 16
20039720:	e8830008 	lwi	r4, r3, 8
20039724:	e8730004 	lwi	r3, r19, 4
20039728:	16441803 	cmpu	r18, r4, r3
2003972c:	bc52ffcc 	blti	r18, -52		// 200396f8
        fifo->read_inds[i] = 0;
    }
}
20039730:	10330000 	addk	r1, r19, r0
20039734:	ea610008 	lwi	r19, r1, 8
20039738:	3021000c 	addik	r1, r1, 12
2003973c:	b60f0008 	rtsd	r15, 8
20039740:	80000000 	or	r0, r0, r0

20039744 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20039744:	3021fff4 	addik	r1, r1, -12
20039748:	fa610008 	swi	r19, r1, 8
2003974c:	12610000 	addk	r19, r1, r0
20039750:	f8b30010 	swi	r5, r19, 16
20039754:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20039758:	e8730010 	lwi	r3, r19, 16
2003975c:	e8830004 	lwi	r4, r3, 4
20039760:	e8730010 	lwi	r3, r19, 16
20039764:	e8a3000c 	lwi	r5, r3, 12
20039768:	e8730014 	lwi	r3, r19, 20
2003976c:	64630402 	bslli	r3, r3, 2
20039770:	10651800 	addk	r3, r5, r3
20039774:	e8a30000 	lwi	r5, r3, 0
20039778:	e8730010 	lwi	r3, r19, 16
2003977c:	e8630000 	lwi	r3, r3, 0
20039780:	3063ffff 	addik	r3, r3, -1
20039784:	84651800 	and	r3, r5, r3
20039788:	10631800 	addk	r3, r3, r3
2003978c:	10641800 	addk	r3, r4, r3
20039790:	e4630000 	lhui	r3, r3, 0
20039794:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20039798:	e8730010 	lwi	r3, r19, 16
2003979c:	e883000c 	lwi	r4, r3, 12
200397a0:	e8730014 	lwi	r3, r19, 20
200397a4:	64630402 	bslli	r3, r3, 2
200397a8:	10641800 	addk	r3, r4, r3
200397ac:	e8830000 	lwi	r4, r3, 0
200397b0:	30840001 	addik	r4, r4, 1
200397b4:	f8830000 	swi	r4, r3, 0
    return value;
200397b8:	e4730004 	lhui	r3, r19, 4
200397bc:	90630061 	sext16	r3, r3
}
200397c0:	10330000 	addk	r1, r19, r0
200397c4:	ea610008 	lwi	r19, r1, 8
200397c8:	3021000c 	addik	r1, r1, 12
200397cc:	b60f0008 	rtsd	r15, 8
200397d0:	80000000 	or	r0, r0, r0

200397d4 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200397d4:	3021fff8 	addik	r1, r1, -8
200397d8:	fa610004 	swi	r19, r1, 4
200397dc:	12610000 	addk	r19, r1, r0
200397e0:	f8b3000c 	swi	r5, r19, 12
200397e4:	10660000 	addk	r3, r6, r0
200397e8:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200397ec:	e873000c 	lwi	r3, r19, 12
200397f0:	e8830004 	lwi	r4, r3, 4
200397f4:	e873000c 	lwi	r3, r19, 12
200397f8:	e8630010 	lwi	r3, r3, 16
200397fc:	e8a30000 	lwi	r5, r3, 0
20039800:	e873000c 	lwi	r3, r19, 12
20039804:	e8630000 	lwi	r3, r3, 0
20039808:	3063ffff 	addik	r3, r3, -1
2003980c:	84651800 	and	r3, r5, r3
20039810:	10631800 	addk	r3, r3, r3
20039814:	10641800 	addk	r3, r4, r3
20039818:	e4930010 	lhui	r4, r19, 16
2003981c:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20039820:	e873000c 	lwi	r3, r19, 12
20039824:	e8630010 	lwi	r3, r3, 16
20039828:	e8830000 	lwi	r4, r3, 0
2003982c:	30840001 	addik	r4, r4, 1
20039830:	f8830000 	swi	r4, r3, 0
}
20039834:	10330000 	addk	r1, r19, r0
20039838:	ea610004 	lwi	r19, r1, 4
2003983c:	30210008 	addik	r1, r1, 8
20039840:	b60f0008 	rtsd	r15, 8
20039844:	80000000 	or	r0, r0, r0

20039848 <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20039848:	3021fff8 	addik	r1, r1, -8
2003984c:	fa610004 	swi	r19, r1, 4
20039850:	12610000 	addk	r19, r1, r0
20039854:	f8b3000c 	swi	r5, r19, 12
20039858:	f8d30010 	swi	r6, r19, 16
2003985c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20039860:	e873000c 	lwi	r3, r19, 12
20039864:	e8630010 	lwi	r3, r3, 16
20039868:	e8830000 	lwi	r4, r3, 0
2003986c:	e873000c 	lwi	r3, r19, 12
20039870:	e8a3000c 	lwi	r5, r3, 12
20039874:	e8730010 	lwi	r3, r19, 16
20039878:	64630402 	bslli	r3, r3, 2
2003987c:	10651800 	addk	r3, r5, r3
20039880:	e8630000 	lwi	r3, r3, 0
20039884:	14a32000 	rsubk	r5, r3, r4
20039888:	30600001 	addik	r3, r0, 1
2003988c:	e8930014 	lwi	r4, r19, 20
20039890:	16442803 	cmpu	r18, r4, r5
20039894:	bcb20008 	bgei	r18, 8		// 2003989c
20039898:	10600000 	addk	r3, r0, r0
2003989c:	a46300ff 	andi	r3, r3, 255
}
200398a0:	10330000 	addk	r1, r19, r0
200398a4:	ea610004 	lwi	r19, r1, 4
200398a8:	30210008 	addik	r1, r1, 8
200398ac:	b60f0008 	rtsd	r15, 8
200398b0:	80000000 	or	r0, r0, r0

200398b4 <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200398b4:	3021fff8 	addik	r1, r1, -8
200398b8:	fa610004 	swi	r19, r1, 4
200398bc:	12610000 	addk	r19, r1, r0
200398c0:	f8b3000c 	swi	r5, r19, 12
200398c4:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200398c8:	e873000c 	lwi	r3, r19, 12
200398cc:	e8630010 	lwi	r3, r3, 16
200398d0:	e8830000 	lwi	r4, r3, 0
200398d4:	e873000c 	lwi	r3, r19, 12
200398d8:	e8a3000c 	lwi	r5, r3, 12
200398dc:	e8730010 	lwi	r3, r19, 16
200398e0:	64630402 	bslli	r3, r3, 2
200398e4:	10651800 	addk	r3, r5, r3
200398e8:	e8630000 	lwi	r3, r3, 0
200398ec:	14632000 	rsubk	r3, r3, r4
}
200398f0:	10330000 	addk	r1, r19, r0
200398f4:	ea610004 	lwi	r19, r1, 4
200398f8:	30210008 	addik	r1, r1, 8
200398fc:	b60f0008 	rtsd	r15, 8
20039900:	80000000 	or	r0, r0, r0

20039904 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20039904:	3021fff4 	addik	r1, r1, -12
20039908:	fa610008 	swi	r19, r1, 8
2003990c:	12610000 	addk	r19, r1, r0
20039910:	f8b30010 	swi	r5, r19, 16
20039914:	f8d30014 	swi	r6, r19, 20
20039918:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003991c:	f8130004 	swi	r0, r19, 4
20039920:	b800005c 	bri	92		// 2003997c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20039924:	e8730010 	lwi	r3, r19, 16
20039928:	e8830000 	lwi	r4, r3, 0
2003992c:	e8730010 	lwi	r3, r19, 16
20039930:	e8a3000c 	lwi	r5, r3, 12
20039934:	e8730004 	lwi	r3, r19, 4
20039938:	64630402 	bslli	r3, r3, 2
2003993c:	10651800 	addk	r3, r5, r3
20039940:	e8a30000 	lwi	r5, r3, 0
20039944:	e8730010 	lwi	r3, r19, 16
20039948:	e8630010 	lwi	r3, r3, 16
2003994c:	e8630000 	lwi	r3, r3, 0
20039950:	14632800 	rsubk	r3, r3, r5
20039954:	10641800 	addk	r3, r4, r3
20039958:	30830001 	addik	r4, r3, 1
2003995c:	e8730018 	lwi	r3, r19, 24
20039960:	16441803 	cmpu	r18, r4, r3
20039964:	bc52000c 	blti	r18, 12		// 20039970
            return 0;
20039968:	10600000 	addk	r3, r0, r0
2003996c:	b8000024 	bri	36		// 20039990
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20039970:	e8730004 	lwi	r3, r19, 4
20039974:	30630001 	addik	r3, r3, 1
20039978:	f8730004 	swi	r3, r19, 4
2003997c:	e8930004 	lwi	r4, r19, 4
20039980:	e8730014 	lwi	r3, r19, 20
20039984:	16432003 	cmpu	r18, r3, r4
20039988:	bc52ff9c 	blti	r18, -100		// 20039924
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003998c:	30600001 	addik	r3, r0, 1
}
20039990:	10330000 	addk	r1, r19, r0
20039994:	ea610008 	lwi	r19, r1, 8
20039998:	3021000c 	addik	r1, r1, 12
2003999c:	b60f0008 	rtsd	r15, 8
200399a0:	80000000 	or	r0, r0, r0

200399a4 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200399a4:	3021ffec 	addik	r1, r1, -20
200399a8:	fa610010 	swi	r19, r1, 16
200399ac:	12610000 	addk	r19, r1, r0
200399b0:	f8b30018 	swi	r5, r19, 24
200399b4:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
200399b8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200399bc:	f8130004 	swi	r0, r19, 4
200399c0:	b8000054 	bri	84		// 20039a14
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200399c4:	e8730018 	lwi	r3, r19, 24
200399c8:	e8630010 	lwi	r3, r3, 16
200399cc:	e8830000 	lwi	r4, r3, 0
200399d0:	e8730018 	lwi	r3, r19, 24
200399d4:	e8a3000c 	lwi	r5, r3, 12
200399d8:	e8730004 	lwi	r3, r19, 4
200399dc:	64630402 	bslli	r3, r3, 2
200399e0:	10651800 	addk	r3, r5, r3
200399e4:	e8630000 	lwi	r3, r3, 0
200399e8:	14632000 	rsubk	r3, r3, r4
200399ec:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200399f0:	e8930008 	lwi	r4, r19, 8
200399f4:	e873000c 	lwi	r3, r19, 12
200399f8:	16441803 	cmpu	r18, r4, r3
200399fc:	bcb20008 	bgei	r18, 8		// 20039a04
20039a00:	10640000 	addk	r3, r4, r0
20039a04:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20039a08:	e8730004 	lwi	r3, r19, 4
20039a0c:	30630001 	addik	r3, r3, 1
20039a10:	f8730004 	swi	r3, r19, 4
20039a14:	e8930004 	lwi	r4, r19, 4
20039a18:	e873001c 	lwi	r3, r19, 28
20039a1c:	16432003 	cmpu	r18, r3, r4
20039a20:	bc52ffa4 	blti	r18, -92		// 200399c4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20039a24:	e8730018 	lwi	r3, r19, 24
20039a28:	e8830000 	lwi	r4, r3, 0
20039a2c:	e8730008 	lwi	r3, r19, 8
20039a30:	14632000 	rsubk	r3, r3, r4
}
20039a34:	10330000 	addk	r1, r19, r0
20039a38:	ea610010 	lwi	r19, r1, 16
20039a3c:	30210014 	addik	r1, r1, 20
20039a40:	b60f0008 	rtsd	r15, 8
20039a44:	80000000 	or	r0, r0, r0

20039a48 <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20039a48:	3021fff4 	addik	r1, r1, -12
20039a4c:	fa610008 	swi	r19, r1, 8
20039a50:	12610000 	addk	r19, r1, r0
20039a54:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20039a58:	e8730010 	lwi	r3, r19, 16
20039a5c:	e8630010 	lwi	r3, r3, 16
20039a60:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20039a64:	f8130004 	swi	r0, r19, 4
20039a68:	b8000028 	bri	40		// 20039a90
        fifo->read_inds[i] = 0;
20039a6c:	e8730010 	lwi	r3, r19, 16
20039a70:	e883000c 	lwi	r4, r3, 12
20039a74:	e8730004 	lwi	r3, r19, 4
20039a78:	64630402 	bslli	r3, r3, 2
20039a7c:	10641800 	addk	r3, r4, r3
20039a80:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20039a84:	e8730004 	lwi	r3, r19, 4
20039a88:	30630001 	addik	r3, r3, 1
20039a8c:	f8730004 	swi	r3, r19, 4
20039a90:	e8730010 	lwi	r3, r19, 16
20039a94:	e8830008 	lwi	r4, r3, 8
20039a98:	e8730004 	lwi	r3, r19, 4
20039a9c:	16441803 	cmpu	r18, r4, r3
20039aa0:	bc52ffcc 	blti	r18, -52		// 20039a6c
        fifo->read_inds[i] = 0;
    }
}
20039aa4:	10330000 	addk	r1, r19, r0
20039aa8:	ea610008 	lwi	r19, r1, 8
20039aac:	3021000c 	addik	r1, r1, 12
20039ab0:	b60f0008 	rtsd	r15, 8
20039ab4:	80000000 	or	r0, r0, r0

20039ab8 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20039ab8:	3021fff4 	addik	r1, r1, -12
20039abc:	fa610008 	swi	r19, r1, 8
20039ac0:	12610000 	addk	r19, r1, r0
20039ac4:	f8b30010 	swi	r5, r19, 16
20039ac8:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20039acc:	e8730010 	lwi	r3, r19, 16
20039ad0:	e8830004 	lwi	r4, r3, 4
20039ad4:	e8730010 	lwi	r3, r19, 16
20039ad8:	e8a3000c 	lwi	r5, r3, 12
20039adc:	e8730014 	lwi	r3, r19, 20
20039ae0:	64630402 	bslli	r3, r3, 2
20039ae4:	10651800 	addk	r3, r5, r3
20039ae8:	e8a30000 	lwi	r5, r3, 0
20039aec:	e8730010 	lwi	r3, r19, 16
20039af0:	e8630000 	lwi	r3, r3, 0
20039af4:	3063ffff 	addik	r3, r3, -1
20039af8:	84651800 	and	r3, r5, r3
20039afc:	64630402 	bslli	r3, r3, 2
20039b00:	10641800 	addk	r3, r4, r3
20039b04:	e8630000 	lwi	r3, r3, 0
20039b08:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20039b0c:	e8730010 	lwi	r3, r19, 16
20039b10:	e883000c 	lwi	r4, r3, 12
20039b14:	e8730014 	lwi	r3, r19, 20
20039b18:	64630402 	bslli	r3, r3, 2
20039b1c:	10641800 	addk	r3, r4, r3
20039b20:	e8830000 	lwi	r4, r3, 0
20039b24:	30840001 	addik	r4, r4, 1
20039b28:	f8830000 	swi	r4, r3, 0
    return value;
20039b2c:	e8730004 	lwi	r3, r19, 4
}
20039b30:	10330000 	addk	r1, r19, r0
20039b34:	ea610008 	lwi	r19, r1, 8
20039b38:	3021000c 	addik	r1, r1, 12
20039b3c:	b60f0008 	rtsd	r15, 8
20039b40:	80000000 	or	r0, r0, r0

20039b44 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20039b44:	3021fff8 	addik	r1, r1, -8
20039b48:	fa610004 	swi	r19, r1, 4
20039b4c:	12610000 	addk	r19, r1, r0
20039b50:	f8b3000c 	swi	r5, r19, 12
20039b54:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20039b58:	e873000c 	lwi	r3, r19, 12
20039b5c:	e8830004 	lwi	r4, r3, 4
20039b60:	e873000c 	lwi	r3, r19, 12
20039b64:	e8630010 	lwi	r3, r3, 16
20039b68:	e8a30000 	lwi	r5, r3, 0
20039b6c:	e873000c 	lwi	r3, r19, 12
20039b70:	e8630000 	lwi	r3, r3, 0
20039b74:	3063ffff 	addik	r3, r3, -1
20039b78:	84651800 	and	r3, r5, r3
20039b7c:	64630402 	bslli	r3, r3, 2
20039b80:	10641800 	addk	r3, r4, r3
20039b84:	e8930010 	lwi	r4, r19, 16
20039b88:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20039b8c:	e873000c 	lwi	r3, r19, 12
20039b90:	e8630010 	lwi	r3, r3, 16
20039b94:	e8830000 	lwi	r4, r3, 0
20039b98:	30840001 	addik	r4, r4, 1
20039b9c:	f8830000 	swi	r4, r3, 0
}
20039ba0:	10330000 	addk	r1, r19, r0
20039ba4:	ea610004 	lwi	r19, r1, 4
20039ba8:	30210008 	addik	r1, r1, 8
20039bac:	b60f0008 	rtsd	r15, 8
20039bb0:	80000000 	or	r0, r0, r0

20039bb4 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20039bb4:	3021fff8 	addik	r1, r1, -8
20039bb8:	fa610004 	swi	r19, r1, 4
20039bbc:	12610000 	addk	r19, r1, r0
20039bc0:	f8b3000c 	swi	r5, r19, 12
20039bc4:	f8d30010 	swi	r6, r19, 16
20039bc8:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20039bcc:	e873000c 	lwi	r3, r19, 12
20039bd0:	e8630010 	lwi	r3, r3, 16
20039bd4:	e8830000 	lwi	r4, r3, 0
20039bd8:	e873000c 	lwi	r3, r19, 12
20039bdc:	e8a3000c 	lwi	r5, r3, 12
20039be0:	e8730010 	lwi	r3, r19, 16
20039be4:	64630402 	bslli	r3, r3, 2
20039be8:	10651800 	addk	r3, r5, r3
20039bec:	e8630000 	lwi	r3, r3, 0
20039bf0:	14a32000 	rsubk	r5, r3, r4
20039bf4:	30600001 	addik	r3, r0, 1
20039bf8:	e8930014 	lwi	r4, r19, 20
20039bfc:	16442803 	cmpu	r18, r4, r5
20039c00:	bcb20008 	bgei	r18, 8		// 20039c08
20039c04:	10600000 	addk	r3, r0, r0
20039c08:	a46300ff 	andi	r3, r3, 255
}
20039c0c:	10330000 	addk	r1, r19, r0
20039c10:	ea610004 	lwi	r19, r1, 4
20039c14:	30210008 	addik	r1, r1, 8
20039c18:	b60f0008 	rtsd	r15, 8
20039c1c:	80000000 	or	r0, r0, r0

20039c20 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20039c20:	3021fff8 	addik	r1, r1, -8
20039c24:	fa610004 	swi	r19, r1, 4
20039c28:	12610000 	addk	r19, r1, r0
20039c2c:	f8b3000c 	swi	r5, r19, 12
20039c30:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20039c34:	e873000c 	lwi	r3, r19, 12
20039c38:	e8630010 	lwi	r3, r3, 16
20039c3c:	e8830000 	lwi	r4, r3, 0
20039c40:	e873000c 	lwi	r3, r19, 12
20039c44:	e8a3000c 	lwi	r5, r3, 12
20039c48:	e8730010 	lwi	r3, r19, 16
20039c4c:	64630402 	bslli	r3, r3, 2
20039c50:	10651800 	addk	r3, r5, r3
20039c54:	e8630000 	lwi	r3, r3, 0
20039c58:	14632000 	rsubk	r3, r3, r4
}
20039c5c:	10330000 	addk	r1, r19, r0
20039c60:	ea610004 	lwi	r19, r1, 4
20039c64:	30210008 	addik	r1, r1, 8
20039c68:	b60f0008 	rtsd	r15, 8
20039c6c:	80000000 	or	r0, r0, r0

20039c70 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20039c70:	3021fff4 	addik	r1, r1, -12
20039c74:	fa610008 	swi	r19, r1, 8
20039c78:	12610000 	addk	r19, r1, r0
20039c7c:	f8b30010 	swi	r5, r19, 16
20039c80:	f8d30014 	swi	r6, r19, 20
20039c84:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20039c88:	f8130004 	swi	r0, r19, 4
20039c8c:	b800005c 	bri	92		// 20039ce8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20039c90:	e8730010 	lwi	r3, r19, 16
20039c94:	e8830000 	lwi	r4, r3, 0
20039c98:	e8730010 	lwi	r3, r19, 16
20039c9c:	e8a3000c 	lwi	r5, r3, 12
20039ca0:	e8730004 	lwi	r3, r19, 4
20039ca4:	64630402 	bslli	r3, r3, 2
20039ca8:	10651800 	addk	r3, r5, r3
20039cac:	e8a30000 	lwi	r5, r3, 0
20039cb0:	e8730010 	lwi	r3, r19, 16
20039cb4:	e8630010 	lwi	r3, r3, 16
20039cb8:	e8630000 	lwi	r3, r3, 0
20039cbc:	14632800 	rsubk	r3, r3, r5
20039cc0:	10641800 	addk	r3, r4, r3
20039cc4:	30830001 	addik	r4, r3, 1
20039cc8:	e8730018 	lwi	r3, r19, 24
20039ccc:	16441803 	cmpu	r18, r4, r3
20039cd0:	bc52000c 	blti	r18, 12		// 20039cdc
            return 0;
20039cd4:	10600000 	addk	r3, r0, r0
20039cd8:	b8000024 	bri	36		// 20039cfc
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20039cdc:	e8730004 	lwi	r3, r19, 4
20039ce0:	30630001 	addik	r3, r3, 1
20039ce4:	f8730004 	swi	r3, r19, 4
20039ce8:	e8930004 	lwi	r4, r19, 4
20039cec:	e8730014 	lwi	r3, r19, 20
20039cf0:	16432003 	cmpu	r18, r3, r4
20039cf4:	bc52ff9c 	blti	r18, -100		// 20039c90
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20039cf8:	30600001 	addik	r3, r0, 1
}
20039cfc:	10330000 	addk	r1, r19, r0
20039d00:	ea610008 	lwi	r19, r1, 8
20039d04:	3021000c 	addik	r1, r1, 12
20039d08:	b60f0008 	rtsd	r15, 8
20039d0c:	80000000 	or	r0, r0, r0

20039d10 <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20039d10:	3021ffec 	addik	r1, r1, -20
20039d14:	fa610010 	swi	r19, r1, 16
20039d18:	12610000 	addk	r19, r1, r0
20039d1c:	f8b30018 	swi	r5, r19, 24
20039d20:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
20039d24:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20039d28:	f8130004 	swi	r0, r19, 4
20039d2c:	b8000054 	bri	84		// 20039d80
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20039d30:	e8730018 	lwi	r3, r19, 24
20039d34:	e8630010 	lwi	r3, r3, 16
20039d38:	e8830000 	lwi	r4, r3, 0
20039d3c:	e8730018 	lwi	r3, r19, 24
20039d40:	e8a3000c 	lwi	r5, r3, 12
20039d44:	e8730004 	lwi	r3, r19, 4
20039d48:	64630402 	bslli	r3, r3, 2
20039d4c:	10651800 	addk	r3, r5, r3
20039d50:	e8630000 	lwi	r3, r3, 0
20039d54:	14632000 	rsubk	r3, r3, r4
20039d58:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20039d5c:	e8930008 	lwi	r4, r19, 8
20039d60:	e873000c 	lwi	r3, r19, 12
20039d64:	16441803 	cmpu	r18, r4, r3
20039d68:	bcb20008 	bgei	r18, 8		// 20039d70
20039d6c:	10640000 	addk	r3, r4, r0
20039d70:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20039d74:	e8730004 	lwi	r3, r19, 4
20039d78:	30630001 	addik	r3, r3, 1
20039d7c:	f8730004 	swi	r3, r19, 4
20039d80:	e8930004 	lwi	r4, r19, 4
20039d84:	e873001c 	lwi	r3, r19, 28
20039d88:	16432003 	cmpu	r18, r3, r4
20039d8c:	bc52ffa4 	blti	r18, -92		// 20039d30
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20039d90:	e8730018 	lwi	r3, r19, 24
20039d94:	e8830000 	lwi	r4, r3, 0
20039d98:	e8730008 	lwi	r3, r19, 8
20039d9c:	14632000 	rsubk	r3, r3, r4
}
20039da0:	10330000 	addk	r1, r19, r0
20039da4:	ea610010 	lwi	r19, r1, 16
20039da8:	30210014 	addik	r1, r1, 20
20039dac:	b60f0008 	rtsd	r15, 8
20039db0:	80000000 	or	r0, r0, r0

20039db4 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20039db4:	3021fff4 	addik	r1, r1, -12
20039db8:	fa610008 	swi	r19, r1, 8
20039dbc:	12610000 	addk	r19, r1, r0
20039dc0:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
20039dc4:	e8730010 	lwi	r3, r19, 16
20039dc8:	e8630010 	lwi	r3, r3, 16
20039dcc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20039dd0:	f8130004 	swi	r0, r19, 4
20039dd4:	b8000028 	bri	40		// 20039dfc
        fifo->read_inds[i] = 0;
20039dd8:	e8730010 	lwi	r3, r19, 16
20039ddc:	e883000c 	lwi	r4, r3, 12
20039de0:	e8730004 	lwi	r3, r19, 4
20039de4:	64630402 	bslli	r3, r3, 2
20039de8:	10641800 	addk	r3, r4, r3
20039dec:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20039df0:	e8730004 	lwi	r3, r19, 4
20039df4:	30630001 	addik	r3, r3, 1
20039df8:	f8730004 	swi	r3, r19, 4
20039dfc:	e8730010 	lwi	r3, r19, 16
20039e00:	e8830008 	lwi	r4, r3, 8
20039e04:	e8730004 	lwi	r3, r19, 4
20039e08:	16441803 	cmpu	r18, r4, r3
20039e0c:	bc52ffcc 	blti	r18, -52		// 20039dd8
        fifo->read_inds[i] = 0;
    }
}
20039e10:	10330000 	addk	r1, r19, r0
20039e14:	ea610008 	lwi	r19, r1, 8
20039e18:	3021000c 	addik	r1, r1, 12
20039e1c:	b60f0008 	rtsd	r15, 8
20039e20:	80000000 	or	r0, r0, r0

20039e24 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20039e24:	3021fff0 	addik	r1, r1, -16
20039e28:	fa61000c 	swi	r19, r1, 12
20039e2c:	12610000 	addk	r19, r1, r0
20039e30:	f8b30014 	swi	r5, r19, 20
20039e34:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20039e38:	e8730014 	lwi	r3, r19, 20
20039e3c:	e8830004 	lwi	r4, r3, 4
20039e40:	e8730014 	lwi	r3, r19, 20
20039e44:	e8a3000c 	lwi	r5, r3, 12
20039e48:	e8730018 	lwi	r3, r19, 24
20039e4c:	64630402 	bslli	r3, r3, 2
20039e50:	10651800 	addk	r3, r5, r3
20039e54:	e8a30000 	lwi	r5, r3, 0
20039e58:	e8730014 	lwi	r3, r19, 20
20039e5c:	e8630000 	lwi	r3, r3, 0
20039e60:	3063ffff 	addik	r3, r3, -1
20039e64:	84651800 	and	r3, r5, r3
20039e68:	64630403 	bslli	r3, r3, 3
20039e6c:	10641800 	addk	r3, r4, r3
20039e70:	e8830000 	lwi	r4, r3, 0
20039e74:	e8a30004 	lwi	r5, r3, 4
20039e78:	f8930004 	swi	r4, r19, 4
20039e7c:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20039e80:	e8730014 	lwi	r3, r19, 20
20039e84:	e883000c 	lwi	r4, r3, 12
20039e88:	e8730018 	lwi	r3, r19, 24
20039e8c:	64630402 	bslli	r3, r3, 2
20039e90:	10641800 	addk	r3, r4, r3
20039e94:	e8830000 	lwi	r4, r3, 0
20039e98:	30840001 	addik	r4, r4, 1
20039e9c:	f8830000 	swi	r4, r3, 0
    return value;
20039ea0:	e8930004 	lwi	r4, r19, 4
20039ea4:	e8b30008 	lwi	r5, r19, 8
}
20039ea8:	10640000 	addk	r3, r4, r0
20039eac:	10850000 	addk	r4, r5, r0
20039eb0:	10330000 	addk	r1, r19, r0
20039eb4:	ea61000c 	lwi	r19, r1, 12
20039eb8:	30210010 	addik	r1, r1, 16
20039ebc:	b60f0008 	rtsd	r15, 8
20039ec0:	80000000 	or	r0, r0, r0

20039ec4 <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20039ec4:	3021fff8 	addik	r1, r1, -8
20039ec8:	fa610004 	swi	r19, r1, 4
20039ecc:	12610000 	addk	r19, r1, r0
20039ed0:	f8b3000c 	swi	r5, r19, 12
20039ed4:	f8d30010 	swi	r6, r19, 16
20039ed8:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20039edc:	e873000c 	lwi	r3, r19, 12
20039ee0:	e8830004 	lwi	r4, r3, 4
20039ee4:	e873000c 	lwi	r3, r19, 12
20039ee8:	e8630010 	lwi	r3, r3, 16
20039eec:	e8a30000 	lwi	r5, r3, 0
20039ef0:	e873000c 	lwi	r3, r19, 12
20039ef4:	e8630000 	lwi	r3, r3, 0
20039ef8:	3063ffff 	addik	r3, r3, -1
20039efc:	84651800 	and	r3, r5, r3
20039f00:	64630403 	bslli	r3, r3, 3
20039f04:	10641800 	addk	r3, r4, r3
20039f08:	e8930010 	lwi	r4, r19, 16
20039f0c:	e8b30014 	lwi	r5, r19, 20
20039f10:	f8830000 	swi	r4, r3, 0
20039f14:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20039f18:	e873000c 	lwi	r3, r19, 12
20039f1c:	e8630010 	lwi	r3, r3, 16
20039f20:	e8830000 	lwi	r4, r3, 0
20039f24:	30840001 	addik	r4, r4, 1
20039f28:	f8830000 	swi	r4, r3, 0
}
20039f2c:	10330000 	addk	r1, r19, r0
20039f30:	ea610004 	lwi	r19, r1, 4
20039f34:	30210008 	addik	r1, r1, 8
20039f38:	b60f0008 	rtsd	r15, 8
20039f3c:	80000000 	or	r0, r0, r0

20039f40 <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20039f40:	3021fff8 	addik	r1, r1, -8
20039f44:	fa610004 	swi	r19, r1, 4
20039f48:	12610000 	addk	r19, r1, r0
20039f4c:	f8b3000c 	swi	r5, r19, 12
20039f50:	f8d30010 	swi	r6, r19, 16
20039f54:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20039f58:	e873000c 	lwi	r3, r19, 12
20039f5c:	e8630010 	lwi	r3, r3, 16
20039f60:	e8830000 	lwi	r4, r3, 0
20039f64:	e873000c 	lwi	r3, r19, 12
20039f68:	e8a3000c 	lwi	r5, r3, 12
20039f6c:	e8730010 	lwi	r3, r19, 16
20039f70:	64630402 	bslli	r3, r3, 2
20039f74:	10651800 	addk	r3, r5, r3
20039f78:	e8630000 	lwi	r3, r3, 0
20039f7c:	14a32000 	rsubk	r5, r3, r4
20039f80:	30600001 	addik	r3, r0, 1
20039f84:	e8930014 	lwi	r4, r19, 20
20039f88:	16442803 	cmpu	r18, r4, r5
20039f8c:	bcb20008 	bgei	r18, 8		// 20039f94
20039f90:	10600000 	addk	r3, r0, r0
20039f94:	a46300ff 	andi	r3, r3, 255
}
20039f98:	10330000 	addk	r1, r19, r0
20039f9c:	ea610004 	lwi	r19, r1, 4
20039fa0:	30210008 	addik	r1, r1, 8
20039fa4:	b60f0008 	rtsd	r15, 8
20039fa8:	80000000 	or	r0, r0, r0

20039fac <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20039fac:	3021fff8 	addik	r1, r1, -8
20039fb0:	fa610004 	swi	r19, r1, 4
20039fb4:	12610000 	addk	r19, r1, r0
20039fb8:	f8b3000c 	swi	r5, r19, 12
20039fbc:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20039fc0:	e873000c 	lwi	r3, r19, 12
20039fc4:	e8630010 	lwi	r3, r3, 16
20039fc8:	e8830000 	lwi	r4, r3, 0
20039fcc:	e873000c 	lwi	r3, r19, 12
20039fd0:	e8a3000c 	lwi	r5, r3, 12
20039fd4:	e8730010 	lwi	r3, r19, 16
20039fd8:	64630402 	bslli	r3, r3, 2
20039fdc:	10651800 	addk	r3, r5, r3
20039fe0:	e8630000 	lwi	r3, r3, 0
20039fe4:	14632000 	rsubk	r3, r3, r4
}
20039fe8:	10330000 	addk	r1, r19, r0
20039fec:	ea610004 	lwi	r19, r1, 4
20039ff0:	30210008 	addik	r1, r1, 8
20039ff4:	b60f0008 	rtsd	r15, 8
20039ff8:	80000000 	or	r0, r0, r0

20039ffc <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20039ffc:	3021fff4 	addik	r1, r1, -12
2003a000:	fa610008 	swi	r19, r1, 8
2003a004:	12610000 	addk	r19, r1, r0
2003a008:	f8b30010 	swi	r5, r19, 16
2003a00c:	f8d30014 	swi	r6, r19, 20
2003a010:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003a014:	f8130004 	swi	r0, r19, 4
2003a018:	b800005c 	bri	92		// 2003a074
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003a01c:	e8730010 	lwi	r3, r19, 16
2003a020:	e8830000 	lwi	r4, r3, 0
2003a024:	e8730010 	lwi	r3, r19, 16
2003a028:	e8a3000c 	lwi	r5, r3, 12
2003a02c:	e8730004 	lwi	r3, r19, 4
2003a030:	64630402 	bslli	r3, r3, 2
2003a034:	10651800 	addk	r3, r5, r3
2003a038:	e8a30000 	lwi	r5, r3, 0
2003a03c:	e8730010 	lwi	r3, r19, 16
2003a040:	e8630010 	lwi	r3, r3, 16
2003a044:	e8630000 	lwi	r3, r3, 0
2003a048:	14632800 	rsubk	r3, r3, r5
2003a04c:	10641800 	addk	r3, r4, r3
2003a050:	30830001 	addik	r4, r3, 1
2003a054:	e8730018 	lwi	r3, r19, 24
2003a058:	16441803 	cmpu	r18, r4, r3
2003a05c:	bc52000c 	blti	r18, 12		// 2003a068
            return 0;
2003a060:	10600000 	addk	r3, r0, r0
2003a064:	b8000024 	bri	36		// 2003a088
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003a068:	e8730004 	lwi	r3, r19, 4
2003a06c:	30630001 	addik	r3, r3, 1
2003a070:	f8730004 	swi	r3, r19, 4
2003a074:	e8930004 	lwi	r4, r19, 4
2003a078:	e8730014 	lwi	r3, r19, 20
2003a07c:	16432003 	cmpu	r18, r3, r4
2003a080:	bc52ff9c 	blti	r18, -100		// 2003a01c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003a084:	30600001 	addik	r3, r0, 1
}
2003a088:	10330000 	addk	r1, r19, r0
2003a08c:	ea610008 	lwi	r19, r1, 8
2003a090:	3021000c 	addik	r1, r1, 12
2003a094:	b60f0008 	rtsd	r15, 8
2003a098:	80000000 	or	r0, r0, r0

2003a09c <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003a09c:	3021ffec 	addik	r1, r1, -20
2003a0a0:	fa610010 	swi	r19, r1, 16
2003a0a4:	12610000 	addk	r19, r1, r0
2003a0a8:	f8b30018 	swi	r5, r19, 24
2003a0ac:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003a0b0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003a0b4:	f8130004 	swi	r0, r19, 4
2003a0b8:	b8000054 	bri	84		// 2003a10c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003a0bc:	e8730018 	lwi	r3, r19, 24
2003a0c0:	e8630010 	lwi	r3, r3, 16
2003a0c4:	e8830000 	lwi	r4, r3, 0
2003a0c8:	e8730018 	lwi	r3, r19, 24
2003a0cc:	e8a3000c 	lwi	r5, r3, 12
2003a0d0:	e8730004 	lwi	r3, r19, 4
2003a0d4:	64630402 	bslli	r3, r3, 2
2003a0d8:	10651800 	addk	r3, r5, r3
2003a0dc:	e8630000 	lwi	r3, r3, 0
2003a0e0:	14632000 	rsubk	r3, r3, r4
2003a0e4:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003a0e8:	e8930008 	lwi	r4, r19, 8
2003a0ec:	e873000c 	lwi	r3, r19, 12
2003a0f0:	16441803 	cmpu	r18, r4, r3
2003a0f4:	bcb20008 	bgei	r18, 8		// 2003a0fc
2003a0f8:	10640000 	addk	r3, r4, r0
2003a0fc:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003a100:	e8730004 	lwi	r3, r19, 4
2003a104:	30630001 	addik	r3, r3, 1
2003a108:	f8730004 	swi	r3, r19, 4
2003a10c:	e8930004 	lwi	r4, r19, 4
2003a110:	e873001c 	lwi	r3, r19, 28
2003a114:	16432003 	cmpu	r18, r3, r4
2003a118:	bc52ffa4 	blti	r18, -92		// 2003a0bc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003a11c:	e8730018 	lwi	r3, r19, 24
2003a120:	e8830000 	lwi	r4, r3, 0
2003a124:	e8730008 	lwi	r3, r19, 8
2003a128:	14632000 	rsubk	r3, r3, r4
}
2003a12c:	10330000 	addk	r1, r19, r0
2003a130:	ea610010 	lwi	r19, r1, 16
2003a134:	30210014 	addik	r1, r1, 20
2003a138:	b60f0008 	rtsd	r15, 8
2003a13c:	80000000 	or	r0, r0, r0

2003a140 <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003a140:	3021fff4 	addik	r1, r1, -12
2003a144:	fa610008 	swi	r19, r1, 8
2003a148:	12610000 	addk	r19, r1, r0
2003a14c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2003a150:	e8730010 	lwi	r3, r19, 16
2003a154:	e8630010 	lwi	r3, r3, 16
2003a158:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003a15c:	f8130004 	swi	r0, r19, 4
2003a160:	b8000028 	bri	40		// 2003a188
        fifo->read_inds[i] = 0;
2003a164:	e8730010 	lwi	r3, r19, 16
2003a168:	e883000c 	lwi	r4, r3, 12
2003a16c:	e8730004 	lwi	r3, r19, 4
2003a170:	64630402 	bslli	r3, r3, 2
2003a174:	10641800 	addk	r3, r4, r3
2003a178:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003a17c:	e8730004 	lwi	r3, r19, 4
2003a180:	30630001 	addik	r3, r3, 1
2003a184:	f8730004 	swi	r3, r19, 4
2003a188:	e8730010 	lwi	r3, r19, 16
2003a18c:	e8830008 	lwi	r4, r3, 8
2003a190:	e8730004 	lwi	r3, r19, 4
2003a194:	16441803 	cmpu	r18, r4, r3
2003a198:	bc52ffcc 	blti	r18, -52		// 2003a164
        fifo->read_inds[i] = 0;
    }
}
2003a19c:	10330000 	addk	r1, r19, r0
2003a1a0:	ea610008 	lwi	r19, r1, 8
2003a1a4:	3021000c 	addik	r1, r1, 12
2003a1a8:	b60f0008 	rtsd	r15, 8
2003a1ac:	80000000 	or	r0, r0, r0

2003a1b0 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003a1b0:	3021fff4 	addik	r1, r1, -12
2003a1b4:	fa610008 	swi	r19, r1, 8
2003a1b8:	12610000 	addk	r19, r1, r0
2003a1bc:	f8b30010 	swi	r5, r19, 16
2003a1c0:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003a1c4:	e8730010 	lwi	r3, r19, 16
2003a1c8:	e8830004 	lwi	r4, r3, 4
2003a1cc:	e8730010 	lwi	r3, r19, 16
2003a1d0:	e8a3000c 	lwi	r5, r3, 12
2003a1d4:	e8730014 	lwi	r3, r19, 20
2003a1d8:	64630402 	bslli	r3, r3, 2
2003a1dc:	10651800 	addk	r3, r5, r3
2003a1e0:	e8a30000 	lwi	r5, r3, 0
2003a1e4:	e8730010 	lwi	r3, r19, 16
2003a1e8:	e8630000 	lwi	r3, r3, 0
2003a1ec:	3063ffff 	addik	r3, r3, -1
2003a1f0:	84651800 	and	r3, r5, r3
2003a1f4:	10641800 	addk	r3, r4, r3
2003a1f8:	e0630000 	lbui	r3, r3, 0
2003a1fc:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003a200:	e8730010 	lwi	r3, r19, 16
2003a204:	e883000c 	lwi	r4, r3, 12
2003a208:	e8730014 	lwi	r3, r19, 20
2003a20c:	64630402 	bslli	r3, r3, 2
2003a210:	10641800 	addk	r3, r4, r3
2003a214:	e8830000 	lwi	r4, r3, 0
2003a218:	30840001 	addik	r4, r4, 1
2003a21c:	f8830000 	swi	r4, r3, 0
    return value;
2003a220:	e0730004 	lbui	r3, r19, 4
}
2003a224:	10330000 	addk	r1, r19, r0
2003a228:	ea610008 	lwi	r19, r1, 8
2003a22c:	3021000c 	addik	r1, r1, 12
2003a230:	b60f0008 	rtsd	r15, 8
2003a234:	80000000 	or	r0, r0, r0

2003a238 <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003a238:	3021fff8 	addik	r1, r1, -8
2003a23c:	fa610004 	swi	r19, r1, 4
2003a240:	12610000 	addk	r19, r1, r0
2003a244:	f8b3000c 	swi	r5, r19, 12
2003a248:	10660000 	addk	r3, r6, r0
2003a24c:	f0730010 	sbi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003a250:	e873000c 	lwi	r3, r19, 12
2003a254:	e8830004 	lwi	r4, r3, 4
2003a258:	e873000c 	lwi	r3, r19, 12
2003a25c:	e8630010 	lwi	r3, r3, 16
2003a260:	e8a30000 	lwi	r5, r3, 0
2003a264:	e873000c 	lwi	r3, r19, 12
2003a268:	e8630000 	lwi	r3, r3, 0
2003a26c:	3063ffff 	addik	r3, r3, -1
2003a270:	84651800 	and	r3, r5, r3
2003a274:	10641800 	addk	r3, r4, r3
2003a278:	e0930010 	lbui	r4, r19, 16
2003a27c:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2003a280:	e873000c 	lwi	r3, r19, 12
2003a284:	e8630010 	lwi	r3, r3, 16
2003a288:	e8830000 	lwi	r4, r3, 0
2003a28c:	30840001 	addik	r4, r4, 1
2003a290:	f8830000 	swi	r4, r3, 0
}
2003a294:	10330000 	addk	r1, r19, r0
2003a298:	ea610004 	lwi	r19, r1, 4
2003a29c:	30210008 	addik	r1, r1, 8
2003a2a0:	b60f0008 	rtsd	r15, 8
2003a2a4:	80000000 	or	r0, r0, r0

2003a2a8 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003a2a8:	3021fff8 	addik	r1, r1, -8
2003a2ac:	fa610004 	swi	r19, r1, 4
2003a2b0:	12610000 	addk	r19, r1, r0
2003a2b4:	f8b3000c 	swi	r5, r19, 12
2003a2b8:	f8d30010 	swi	r6, r19, 16
2003a2bc:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003a2c0:	e873000c 	lwi	r3, r19, 12
2003a2c4:	e8630010 	lwi	r3, r3, 16
2003a2c8:	e8830000 	lwi	r4, r3, 0
2003a2cc:	e873000c 	lwi	r3, r19, 12
2003a2d0:	e8a3000c 	lwi	r5, r3, 12
2003a2d4:	e8730010 	lwi	r3, r19, 16
2003a2d8:	64630402 	bslli	r3, r3, 2
2003a2dc:	10651800 	addk	r3, r5, r3
2003a2e0:	e8630000 	lwi	r3, r3, 0
2003a2e4:	14a32000 	rsubk	r5, r3, r4
2003a2e8:	30600001 	addik	r3, r0, 1
2003a2ec:	e8930014 	lwi	r4, r19, 20
2003a2f0:	16442803 	cmpu	r18, r4, r5
2003a2f4:	bcb20008 	bgei	r18, 8		// 2003a2fc
2003a2f8:	10600000 	addk	r3, r0, r0
2003a2fc:	a46300ff 	andi	r3, r3, 255
}
2003a300:	10330000 	addk	r1, r19, r0
2003a304:	ea610004 	lwi	r19, r1, 4
2003a308:	30210008 	addik	r1, r1, 8
2003a30c:	b60f0008 	rtsd	r15, 8
2003a310:	80000000 	or	r0, r0, r0

2003a314 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003a314:	3021fff8 	addik	r1, r1, -8
2003a318:	fa610004 	swi	r19, r1, 4
2003a31c:	12610000 	addk	r19, r1, r0
2003a320:	f8b3000c 	swi	r5, r19, 12
2003a324:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003a328:	e873000c 	lwi	r3, r19, 12
2003a32c:	e8630010 	lwi	r3, r3, 16
2003a330:	e8830000 	lwi	r4, r3, 0
2003a334:	e873000c 	lwi	r3, r19, 12
2003a338:	e8a3000c 	lwi	r5, r3, 12
2003a33c:	e8730010 	lwi	r3, r19, 16
2003a340:	64630402 	bslli	r3, r3, 2
2003a344:	10651800 	addk	r3, r5, r3
2003a348:	e8630000 	lwi	r3, r3, 0
2003a34c:	14632000 	rsubk	r3, r3, r4
}
2003a350:	10330000 	addk	r1, r19, r0
2003a354:	ea610004 	lwi	r19, r1, 4
2003a358:	30210008 	addik	r1, r1, 8
2003a35c:	b60f0008 	rtsd	r15, 8
2003a360:	80000000 	or	r0, r0, r0

2003a364 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003a364:	3021fff4 	addik	r1, r1, -12
2003a368:	fa610008 	swi	r19, r1, 8
2003a36c:	12610000 	addk	r19, r1, r0
2003a370:	f8b30010 	swi	r5, r19, 16
2003a374:	f8d30014 	swi	r6, r19, 20
2003a378:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003a37c:	f8130004 	swi	r0, r19, 4
2003a380:	b800005c 	bri	92		// 2003a3dc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003a384:	e8730010 	lwi	r3, r19, 16
2003a388:	e8830000 	lwi	r4, r3, 0
2003a38c:	e8730010 	lwi	r3, r19, 16
2003a390:	e8a3000c 	lwi	r5, r3, 12
2003a394:	e8730004 	lwi	r3, r19, 4
2003a398:	64630402 	bslli	r3, r3, 2
2003a39c:	10651800 	addk	r3, r5, r3
2003a3a0:	e8a30000 	lwi	r5, r3, 0
2003a3a4:	e8730010 	lwi	r3, r19, 16
2003a3a8:	e8630010 	lwi	r3, r3, 16
2003a3ac:	e8630000 	lwi	r3, r3, 0
2003a3b0:	14632800 	rsubk	r3, r3, r5
2003a3b4:	10641800 	addk	r3, r4, r3
2003a3b8:	30830001 	addik	r4, r3, 1
2003a3bc:	e8730018 	lwi	r3, r19, 24
2003a3c0:	16441803 	cmpu	r18, r4, r3
2003a3c4:	bc52000c 	blti	r18, 12		// 2003a3d0
            return 0;
2003a3c8:	10600000 	addk	r3, r0, r0
2003a3cc:	b8000024 	bri	36		// 2003a3f0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003a3d0:	e8730004 	lwi	r3, r19, 4
2003a3d4:	30630001 	addik	r3, r3, 1
2003a3d8:	f8730004 	swi	r3, r19, 4
2003a3dc:	e8930004 	lwi	r4, r19, 4
2003a3e0:	e8730014 	lwi	r3, r19, 20
2003a3e4:	16432003 	cmpu	r18, r3, r4
2003a3e8:	bc52ff9c 	blti	r18, -100		// 2003a384
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003a3ec:	30600001 	addik	r3, r0, 1
}
2003a3f0:	10330000 	addk	r1, r19, r0
2003a3f4:	ea610008 	lwi	r19, r1, 8
2003a3f8:	3021000c 	addik	r1, r1, 12
2003a3fc:	b60f0008 	rtsd	r15, 8
2003a400:	80000000 	or	r0, r0, r0

2003a404 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003a404:	3021ffec 	addik	r1, r1, -20
2003a408:	fa610010 	swi	r19, r1, 16
2003a40c:	12610000 	addk	r19, r1, r0
2003a410:	f8b30018 	swi	r5, r19, 24
2003a414:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003a418:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003a41c:	f8130004 	swi	r0, r19, 4
2003a420:	b8000054 	bri	84		// 2003a474
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003a424:	e8730018 	lwi	r3, r19, 24
2003a428:	e8630010 	lwi	r3, r3, 16
2003a42c:	e8830000 	lwi	r4, r3, 0
2003a430:	e8730018 	lwi	r3, r19, 24
2003a434:	e8a3000c 	lwi	r5, r3, 12
2003a438:	e8730004 	lwi	r3, r19, 4
2003a43c:	64630402 	bslli	r3, r3, 2
2003a440:	10651800 	addk	r3, r5, r3
2003a444:	e8630000 	lwi	r3, r3, 0
2003a448:	14632000 	rsubk	r3, r3, r4
2003a44c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003a450:	e8930008 	lwi	r4, r19, 8
2003a454:	e873000c 	lwi	r3, r19, 12
2003a458:	16441803 	cmpu	r18, r4, r3
2003a45c:	bcb20008 	bgei	r18, 8		// 2003a464
2003a460:	10640000 	addk	r3, r4, r0
2003a464:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003a468:	e8730004 	lwi	r3, r19, 4
2003a46c:	30630001 	addik	r3, r3, 1
2003a470:	f8730004 	swi	r3, r19, 4
2003a474:	e8930004 	lwi	r4, r19, 4
2003a478:	e873001c 	lwi	r3, r19, 28
2003a47c:	16432003 	cmpu	r18, r3, r4
2003a480:	bc52ffa4 	blti	r18, -92		// 2003a424
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003a484:	e8730018 	lwi	r3, r19, 24
2003a488:	e8830000 	lwi	r4, r3, 0
2003a48c:	e8730008 	lwi	r3, r19, 8
2003a490:	14632000 	rsubk	r3, r3, r4
}
2003a494:	10330000 	addk	r1, r19, r0
2003a498:	ea610010 	lwi	r19, r1, 16
2003a49c:	30210014 	addik	r1, r1, 20
2003a4a0:	b60f0008 	rtsd	r15, 8
2003a4a4:	80000000 	or	r0, r0, r0

2003a4a8 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003a4a8:	3021fff4 	addik	r1, r1, -12
2003a4ac:	fa610008 	swi	r19, r1, 8
2003a4b0:	12610000 	addk	r19, r1, r0
2003a4b4:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2003a4b8:	e8730010 	lwi	r3, r19, 16
2003a4bc:	e8630010 	lwi	r3, r3, 16
2003a4c0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003a4c4:	f8130004 	swi	r0, r19, 4
2003a4c8:	b8000028 	bri	40		// 2003a4f0
        fifo->read_inds[i] = 0;
2003a4cc:	e8730010 	lwi	r3, r19, 16
2003a4d0:	e883000c 	lwi	r4, r3, 12
2003a4d4:	e8730004 	lwi	r3, r19, 4
2003a4d8:	64630402 	bslli	r3, r3, 2
2003a4dc:	10641800 	addk	r3, r4, r3
2003a4e0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003a4e4:	e8730004 	lwi	r3, r19, 4
2003a4e8:	30630001 	addik	r3, r3, 1
2003a4ec:	f8730004 	swi	r3, r19, 4
2003a4f0:	e8730010 	lwi	r3, r19, 16
2003a4f4:	e8830008 	lwi	r4, r3, 8
2003a4f8:	e8730004 	lwi	r3, r19, 4
2003a4fc:	16441803 	cmpu	r18, r4, r3
2003a500:	bc52ffcc 	blti	r18, -52		// 2003a4cc
        fifo->read_inds[i] = 0;
    }
}
2003a504:	10330000 	addk	r1, r19, r0
2003a508:	ea610008 	lwi	r19, r1, 8
2003a50c:	3021000c 	addik	r1, r1, 12
2003a510:	b60f0008 	rtsd	r15, 8
2003a514:	80000000 	or	r0, r0, r0

2003a518 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003a518:	3021fff4 	addik	r1, r1, -12
2003a51c:	fa610008 	swi	r19, r1, 8
2003a520:	12610000 	addk	r19, r1, r0
2003a524:	f8b30010 	swi	r5, r19, 16
2003a528:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003a52c:	e8730010 	lwi	r3, r19, 16
2003a530:	e8830004 	lwi	r4, r3, 4
2003a534:	e8730010 	lwi	r3, r19, 16
2003a538:	e8a3000c 	lwi	r5, r3, 12
2003a53c:	e8730014 	lwi	r3, r19, 20
2003a540:	64630402 	bslli	r3, r3, 2
2003a544:	10651800 	addk	r3, r5, r3
2003a548:	e8a30000 	lwi	r5, r3, 0
2003a54c:	e8730010 	lwi	r3, r19, 16
2003a550:	e8630000 	lwi	r3, r3, 0
2003a554:	3063ffff 	addik	r3, r3, -1
2003a558:	84651800 	and	r3, r5, r3
2003a55c:	10631800 	addk	r3, r3, r3
2003a560:	10641800 	addk	r3, r4, r3
2003a564:	e4630000 	lhui	r3, r3, 0
2003a568:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003a56c:	e8730010 	lwi	r3, r19, 16
2003a570:	e883000c 	lwi	r4, r3, 12
2003a574:	e8730014 	lwi	r3, r19, 20
2003a578:	64630402 	bslli	r3, r3, 2
2003a57c:	10641800 	addk	r3, r4, r3
2003a580:	e8830000 	lwi	r4, r3, 0
2003a584:	30840001 	addik	r4, r4, 1
2003a588:	f8830000 	swi	r4, r3, 0
    return value;
2003a58c:	e4730004 	lhui	r3, r19, 4
}
2003a590:	10330000 	addk	r1, r19, r0
2003a594:	ea610008 	lwi	r19, r1, 8
2003a598:	3021000c 	addik	r1, r1, 12
2003a59c:	b60f0008 	rtsd	r15, 8
2003a5a0:	80000000 	or	r0, r0, r0

2003a5a4 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003a5a4:	3021fff8 	addik	r1, r1, -8
2003a5a8:	fa610004 	swi	r19, r1, 4
2003a5ac:	12610000 	addk	r19, r1, r0
2003a5b0:	f8b3000c 	swi	r5, r19, 12
2003a5b4:	10660000 	addk	r3, r6, r0
2003a5b8:	f4730010 	shi	r3, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003a5bc:	e873000c 	lwi	r3, r19, 12
2003a5c0:	e8830004 	lwi	r4, r3, 4
2003a5c4:	e873000c 	lwi	r3, r19, 12
2003a5c8:	e8630010 	lwi	r3, r3, 16
2003a5cc:	e8a30000 	lwi	r5, r3, 0
2003a5d0:	e873000c 	lwi	r3, r19, 12
2003a5d4:	e8630000 	lwi	r3, r3, 0
2003a5d8:	3063ffff 	addik	r3, r3, -1
2003a5dc:	84651800 	and	r3, r5, r3
2003a5e0:	10631800 	addk	r3, r3, r3
2003a5e4:	10641800 	addk	r3, r4, r3
2003a5e8:	e4930010 	lhui	r4, r19, 16
2003a5ec:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2003a5f0:	e873000c 	lwi	r3, r19, 12
2003a5f4:	e8630010 	lwi	r3, r3, 16
2003a5f8:	e8830000 	lwi	r4, r3, 0
2003a5fc:	30840001 	addik	r4, r4, 1
2003a600:	f8830000 	swi	r4, r3, 0
}
2003a604:	10330000 	addk	r1, r19, r0
2003a608:	ea610004 	lwi	r19, r1, 4
2003a60c:	30210008 	addik	r1, r1, 8
2003a610:	b60f0008 	rtsd	r15, 8
2003a614:	80000000 	or	r0, r0, r0

2003a618 <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003a618:	3021fff8 	addik	r1, r1, -8
2003a61c:	fa610004 	swi	r19, r1, 4
2003a620:	12610000 	addk	r19, r1, r0
2003a624:	f8b3000c 	swi	r5, r19, 12
2003a628:	f8d30010 	swi	r6, r19, 16
2003a62c:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003a630:	e873000c 	lwi	r3, r19, 12
2003a634:	e8630010 	lwi	r3, r3, 16
2003a638:	e8830000 	lwi	r4, r3, 0
2003a63c:	e873000c 	lwi	r3, r19, 12
2003a640:	e8a3000c 	lwi	r5, r3, 12
2003a644:	e8730010 	lwi	r3, r19, 16
2003a648:	64630402 	bslli	r3, r3, 2
2003a64c:	10651800 	addk	r3, r5, r3
2003a650:	e8630000 	lwi	r3, r3, 0
2003a654:	14a32000 	rsubk	r5, r3, r4
2003a658:	30600001 	addik	r3, r0, 1
2003a65c:	e8930014 	lwi	r4, r19, 20
2003a660:	16442803 	cmpu	r18, r4, r5
2003a664:	bcb20008 	bgei	r18, 8		// 2003a66c
2003a668:	10600000 	addk	r3, r0, r0
2003a66c:	a46300ff 	andi	r3, r3, 255
}
2003a670:	10330000 	addk	r1, r19, r0
2003a674:	ea610004 	lwi	r19, r1, 4
2003a678:	30210008 	addik	r1, r1, 8
2003a67c:	b60f0008 	rtsd	r15, 8
2003a680:	80000000 	or	r0, r0, r0

2003a684 <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003a684:	3021fff8 	addik	r1, r1, -8
2003a688:	fa610004 	swi	r19, r1, 4
2003a68c:	12610000 	addk	r19, r1, r0
2003a690:	f8b3000c 	swi	r5, r19, 12
2003a694:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003a698:	e873000c 	lwi	r3, r19, 12
2003a69c:	e8630010 	lwi	r3, r3, 16
2003a6a0:	e8830000 	lwi	r4, r3, 0
2003a6a4:	e873000c 	lwi	r3, r19, 12
2003a6a8:	e8a3000c 	lwi	r5, r3, 12
2003a6ac:	e8730010 	lwi	r3, r19, 16
2003a6b0:	64630402 	bslli	r3, r3, 2
2003a6b4:	10651800 	addk	r3, r5, r3
2003a6b8:	e8630000 	lwi	r3, r3, 0
2003a6bc:	14632000 	rsubk	r3, r3, r4
}
2003a6c0:	10330000 	addk	r1, r19, r0
2003a6c4:	ea610004 	lwi	r19, r1, 4
2003a6c8:	30210008 	addik	r1, r1, 8
2003a6cc:	b60f0008 	rtsd	r15, 8
2003a6d0:	80000000 	or	r0, r0, r0

2003a6d4 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003a6d4:	3021fff4 	addik	r1, r1, -12
2003a6d8:	fa610008 	swi	r19, r1, 8
2003a6dc:	12610000 	addk	r19, r1, r0
2003a6e0:	f8b30010 	swi	r5, r19, 16
2003a6e4:	f8d30014 	swi	r6, r19, 20
2003a6e8:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003a6ec:	f8130004 	swi	r0, r19, 4
2003a6f0:	b800005c 	bri	92		// 2003a74c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003a6f4:	e8730010 	lwi	r3, r19, 16
2003a6f8:	e8830000 	lwi	r4, r3, 0
2003a6fc:	e8730010 	lwi	r3, r19, 16
2003a700:	e8a3000c 	lwi	r5, r3, 12
2003a704:	e8730004 	lwi	r3, r19, 4
2003a708:	64630402 	bslli	r3, r3, 2
2003a70c:	10651800 	addk	r3, r5, r3
2003a710:	e8a30000 	lwi	r5, r3, 0
2003a714:	e8730010 	lwi	r3, r19, 16
2003a718:	e8630010 	lwi	r3, r3, 16
2003a71c:	e8630000 	lwi	r3, r3, 0
2003a720:	14632800 	rsubk	r3, r3, r5
2003a724:	10641800 	addk	r3, r4, r3
2003a728:	30830001 	addik	r4, r3, 1
2003a72c:	e8730018 	lwi	r3, r19, 24
2003a730:	16441803 	cmpu	r18, r4, r3
2003a734:	bc52000c 	blti	r18, 12		// 2003a740
            return 0;
2003a738:	10600000 	addk	r3, r0, r0
2003a73c:	b8000024 	bri	36		// 2003a760
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003a740:	e8730004 	lwi	r3, r19, 4
2003a744:	30630001 	addik	r3, r3, 1
2003a748:	f8730004 	swi	r3, r19, 4
2003a74c:	e8930004 	lwi	r4, r19, 4
2003a750:	e8730014 	lwi	r3, r19, 20
2003a754:	16432003 	cmpu	r18, r3, r4
2003a758:	bc52ff9c 	blti	r18, -100		// 2003a6f4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003a75c:	30600001 	addik	r3, r0, 1
}
2003a760:	10330000 	addk	r1, r19, r0
2003a764:	ea610008 	lwi	r19, r1, 8
2003a768:	3021000c 	addik	r1, r1, 12
2003a76c:	b60f0008 	rtsd	r15, 8
2003a770:	80000000 	or	r0, r0, r0

2003a774 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003a774:	3021ffec 	addik	r1, r1, -20
2003a778:	fa610010 	swi	r19, r1, 16
2003a77c:	12610000 	addk	r19, r1, r0
2003a780:	f8b30018 	swi	r5, r19, 24
2003a784:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003a788:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003a78c:	f8130004 	swi	r0, r19, 4
2003a790:	b8000054 	bri	84		// 2003a7e4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003a794:	e8730018 	lwi	r3, r19, 24
2003a798:	e8630010 	lwi	r3, r3, 16
2003a79c:	e8830000 	lwi	r4, r3, 0
2003a7a0:	e8730018 	lwi	r3, r19, 24
2003a7a4:	e8a3000c 	lwi	r5, r3, 12
2003a7a8:	e8730004 	lwi	r3, r19, 4
2003a7ac:	64630402 	bslli	r3, r3, 2
2003a7b0:	10651800 	addk	r3, r5, r3
2003a7b4:	e8630000 	lwi	r3, r3, 0
2003a7b8:	14632000 	rsubk	r3, r3, r4
2003a7bc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003a7c0:	e8930008 	lwi	r4, r19, 8
2003a7c4:	e873000c 	lwi	r3, r19, 12
2003a7c8:	16441803 	cmpu	r18, r4, r3
2003a7cc:	bcb20008 	bgei	r18, 8		// 2003a7d4
2003a7d0:	10640000 	addk	r3, r4, r0
2003a7d4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003a7d8:	e8730004 	lwi	r3, r19, 4
2003a7dc:	30630001 	addik	r3, r3, 1
2003a7e0:	f8730004 	swi	r3, r19, 4
2003a7e4:	e8930004 	lwi	r4, r19, 4
2003a7e8:	e873001c 	lwi	r3, r19, 28
2003a7ec:	16432003 	cmpu	r18, r3, r4
2003a7f0:	bc52ffa4 	blti	r18, -92		// 2003a794
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003a7f4:	e8730018 	lwi	r3, r19, 24
2003a7f8:	e8830000 	lwi	r4, r3, 0
2003a7fc:	e8730008 	lwi	r3, r19, 8
2003a800:	14632000 	rsubk	r3, r3, r4
}
2003a804:	10330000 	addk	r1, r19, r0
2003a808:	ea610010 	lwi	r19, r1, 16
2003a80c:	30210014 	addik	r1, r1, 20
2003a810:	b60f0008 	rtsd	r15, 8
2003a814:	80000000 	or	r0, r0, r0

2003a818 <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003a818:	3021fff4 	addik	r1, r1, -12
2003a81c:	fa610008 	swi	r19, r1, 8
2003a820:	12610000 	addk	r19, r1, r0
2003a824:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2003a828:	e8730010 	lwi	r3, r19, 16
2003a82c:	e8630010 	lwi	r3, r3, 16
2003a830:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003a834:	f8130004 	swi	r0, r19, 4
2003a838:	b8000028 	bri	40		// 2003a860
        fifo->read_inds[i] = 0;
2003a83c:	e8730010 	lwi	r3, r19, 16
2003a840:	e883000c 	lwi	r4, r3, 12
2003a844:	e8730004 	lwi	r3, r19, 4
2003a848:	64630402 	bslli	r3, r3, 2
2003a84c:	10641800 	addk	r3, r4, r3
2003a850:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003a854:	e8730004 	lwi	r3, r19, 4
2003a858:	30630001 	addik	r3, r3, 1
2003a85c:	f8730004 	swi	r3, r19, 4
2003a860:	e8730010 	lwi	r3, r19, 16
2003a864:	e8830008 	lwi	r4, r3, 8
2003a868:	e8730004 	lwi	r3, r19, 4
2003a86c:	16441803 	cmpu	r18, r4, r3
2003a870:	bc52ffcc 	blti	r18, -52		// 2003a83c
        fifo->read_inds[i] = 0;
    }
}
2003a874:	10330000 	addk	r1, r19, r0
2003a878:	ea610008 	lwi	r19, r1, 8
2003a87c:	3021000c 	addik	r1, r1, 12
2003a880:	b60f0008 	rtsd	r15, 8
2003a884:	80000000 	or	r0, r0, r0

2003a888 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003a888:	3021fff4 	addik	r1, r1, -12
2003a88c:	fa610008 	swi	r19, r1, 8
2003a890:	12610000 	addk	r19, r1, r0
2003a894:	f8b30010 	swi	r5, r19, 16
2003a898:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003a89c:	e8730010 	lwi	r3, r19, 16
2003a8a0:	e8830004 	lwi	r4, r3, 4
2003a8a4:	e8730010 	lwi	r3, r19, 16
2003a8a8:	e8a3000c 	lwi	r5, r3, 12
2003a8ac:	e8730014 	lwi	r3, r19, 20
2003a8b0:	64630402 	bslli	r3, r3, 2
2003a8b4:	10651800 	addk	r3, r5, r3
2003a8b8:	e8a30000 	lwi	r5, r3, 0
2003a8bc:	e8730010 	lwi	r3, r19, 16
2003a8c0:	e8630000 	lwi	r3, r3, 0
2003a8c4:	3063ffff 	addik	r3, r3, -1
2003a8c8:	84651800 	and	r3, r5, r3
2003a8cc:	64630402 	bslli	r3, r3, 2
2003a8d0:	10641800 	addk	r3, r4, r3
2003a8d4:	e8630000 	lwi	r3, r3, 0
2003a8d8:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003a8dc:	e8730010 	lwi	r3, r19, 16
2003a8e0:	e883000c 	lwi	r4, r3, 12
2003a8e4:	e8730014 	lwi	r3, r19, 20
2003a8e8:	64630402 	bslli	r3, r3, 2
2003a8ec:	10641800 	addk	r3, r4, r3
2003a8f0:	e8830000 	lwi	r4, r3, 0
2003a8f4:	30840001 	addik	r4, r4, 1
2003a8f8:	f8830000 	swi	r4, r3, 0
    return value;
2003a8fc:	e8730004 	lwi	r3, r19, 4
}
2003a900:	10330000 	addk	r1, r19, r0
2003a904:	ea610008 	lwi	r19, r1, 8
2003a908:	3021000c 	addik	r1, r1, 12
2003a90c:	b60f0008 	rtsd	r15, 8
2003a910:	80000000 	or	r0, r0, r0

2003a914 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003a914:	3021fff8 	addik	r1, r1, -8
2003a918:	fa610004 	swi	r19, r1, 4
2003a91c:	12610000 	addk	r19, r1, r0
2003a920:	f8b3000c 	swi	r5, r19, 12
2003a924:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003a928:	e873000c 	lwi	r3, r19, 12
2003a92c:	e8830004 	lwi	r4, r3, 4
2003a930:	e873000c 	lwi	r3, r19, 12
2003a934:	e8630010 	lwi	r3, r3, 16
2003a938:	e8a30000 	lwi	r5, r3, 0
2003a93c:	e873000c 	lwi	r3, r19, 12
2003a940:	e8630000 	lwi	r3, r3, 0
2003a944:	3063ffff 	addik	r3, r3, -1
2003a948:	84651800 	and	r3, r5, r3
2003a94c:	64630402 	bslli	r3, r3, 2
2003a950:	10641800 	addk	r3, r4, r3
2003a954:	e8930010 	lwi	r4, r19, 16
2003a958:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2003a95c:	e873000c 	lwi	r3, r19, 12
2003a960:	e8630010 	lwi	r3, r3, 16
2003a964:	e8830000 	lwi	r4, r3, 0
2003a968:	30840001 	addik	r4, r4, 1
2003a96c:	f8830000 	swi	r4, r3, 0
}
2003a970:	10330000 	addk	r1, r19, r0
2003a974:	ea610004 	lwi	r19, r1, 4
2003a978:	30210008 	addik	r1, r1, 8
2003a97c:	b60f0008 	rtsd	r15, 8
2003a980:	80000000 	or	r0, r0, r0

2003a984 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003a984:	3021fff8 	addik	r1, r1, -8
2003a988:	fa610004 	swi	r19, r1, 4
2003a98c:	12610000 	addk	r19, r1, r0
2003a990:	f8b3000c 	swi	r5, r19, 12
2003a994:	f8d30010 	swi	r6, r19, 16
2003a998:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003a99c:	e873000c 	lwi	r3, r19, 12
2003a9a0:	e8630010 	lwi	r3, r3, 16
2003a9a4:	e8830000 	lwi	r4, r3, 0
2003a9a8:	e873000c 	lwi	r3, r19, 12
2003a9ac:	e8a3000c 	lwi	r5, r3, 12
2003a9b0:	e8730010 	lwi	r3, r19, 16
2003a9b4:	64630402 	bslli	r3, r3, 2
2003a9b8:	10651800 	addk	r3, r5, r3
2003a9bc:	e8630000 	lwi	r3, r3, 0
2003a9c0:	14a32000 	rsubk	r5, r3, r4
2003a9c4:	30600001 	addik	r3, r0, 1
2003a9c8:	e8930014 	lwi	r4, r19, 20
2003a9cc:	16442803 	cmpu	r18, r4, r5
2003a9d0:	bcb20008 	bgei	r18, 8		// 2003a9d8
2003a9d4:	10600000 	addk	r3, r0, r0
2003a9d8:	a46300ff 	andi	r3, r3, 255
}
2003a9dc:	10330000 	addk	r1, r19, r0
2003a9e0:	ea610004 	lwi	r19, r1, 4
2003a9e4:	30210008 	addik	r1, r1, 8
2003a9e8:	b60f0008 	rtsd	r15, 8
2003a9ec:	80000000 	or	r0, r0, r0

2003a9f0 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003a9f0:	3021fff8 	addik	r1, r1, -8
2003a9f4:	fa610004 	swi	r19, r1, 4
2003a9f8:	12610000 	addk	r19, r1, r0
2003a9fc:	f8b3000c 	swi	r5, r19, 12
2003aa00:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003aa04:	e873000c 	lwi	r3, r19, 12
2003aa08:	e8630010 	lwi	r3, r3, 16
2003aa0c:	e8830000 	lwi	r4, r3, 0
2003aa10:	e873000c 	lwi	r3, r19, 12
2003aa14:	e8a3000c 	lwi	r5, r3, 12
2003aa18:	e8730010 	lwi	r3, r19, 16
2003aa1c:	64630402 	bslli	r3, r3, 2
2003aa20:	10651800 	addk	r3, r5, r3
2003aa24:	e8630000 	lwi	r3, r3, 0
2003aa28:	14632000 	rsubk	r3, r3, r4
}
2003aa2c:	10330000 	addk	r1, r19, r0
2003aa30:	ea610004 	lwi	r19, r1, 4
2003aa34:	30210008 	addik	r1, r1, 8
2003aa38:	b60f0008 	rtsd	r15, 8
2003aa3c:	80000000 	or	r0, r0, r0

2003aa40 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003aa40:	3021fff4 	addik	r1, r1, -12
2003aa44:	fa610008 	swi	r19, r1, 8
2003aa48:	12610000 	addk	r19, r1, r0
2003aa4c:	f8b30010 	swi	r5, r19, 16
2003aa50:	f8d30014 	swi	r6, r19, 20
2003aa54:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003aa58:	f8130004 	swi	r0, r19, 4
2003aa5c:	b800005c 	bri	92		// 2003aab8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003aa60:	e8730010 	lwi	r3, r19, 16
2003aa64:	e8830000 	lwi	r4, r3, 0
2003aa68:	e8730010 	lwi	r3, r19, 16
2003aa6c:	e8a3000c 	lwi	r5, r3, 12
2003aa70:	e8730004 	lwi	r3, r19, 4
2003aa74:	64630402 	bslli	r3, r3, 2
2003aa78:	10651800 	addk	r3, r5, r3
2003aa7c:	e8a30000 	lwi	r5, r3, 0
2003aa80:	e8730010 	lwi	r3, r19, 16
2003aa84:	e8630010 	lwi	r3, r3, 16
2003aa88:	e8630000 	lwi	r3, r3, 0
2003aa8c:	14632800 	rsubk	r3, r3, r5
2003aa90:	10641800 	addk	r3, r4, r3
2003aa94:	30830001 	addik	r4, r3, 1
2003aa98:	e8730018 	lwi	r3, r19, 24
2003aa9c:	16441803 	cmpu	r18, r4, r3
2003aaa0:	bc52000c 	blti	r18, 12		// 2003aaac
            return 0;
2003aaa4:	10600000 	addk	r3, r0, r0
2003aaa8:	b8000024 	bri	36		// 2003aacc
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003aaac:	e8730004 	lwi	r3, r19, 4
2003aab0:	30630001 	addik	r3, r3, 1
2003aab4:	f8730004 	swi	r3, r19, 4
2003aab8:	e8930004 	lwi	r4, r19, 4
2003aabc:	e8730014 	lwi	r3, r19, 20
2003aac0:	16432003 	cmpu	r18, r3, r4
2003aac4:	bc52ff9c 	blti	r18, -100		// 2003aa60
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003aac8:	30600001 	addik	r3, r0, 1
}
2003aacc:	10330000 	addk	r1, r19, r0
2003aad0:	ea610008 	lwi	r19, r1, 8
2003aad4:	3021000c 	addik	r1, r1, 12
2003aad8:	b60f0008 	rtsd	r15, 8
2003aadc:	80000000 	or	r0, r0, r0

2003aae0 <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003aae0:	3021ffec 	addik	r1, r1, -20
2003aae4:	fa610010 	swi	r19, r1, 16
2003aae8:	12610000 	addk	r19, r1, r0
2003aaec:	f8b30018 	swi	r5, r19, 24
2003aaf0:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003aaf4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003aaf8:	f8130004 	swi	r0, r19, 4
2003aafc:	b8000054 	bri	84		// 2003ab50
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003ab00:	e8730018 	lwi	r3, r19, 24
2003ab04:	e8630010 	lwi	r3, r3, 16
2003ab08:	e8830000 	lwi	r4, r3, 0
2003ab0c:	e8730018 	lwi	r3, r19, 24
2003ab10:	e8a3000c 	lwi	r5, r3, 12
2003ab14:	e8730004 	lwi	r3, r19, 4
2003ab18:	64630402 	bslli	r3, r3, 2
2003ab1c:	10651800 	addk	r3, r5, r3
2003ab20:	e8630000 	lwi	r3, r3, 0
2003ab24:	14632000 	rsubk	r3, r3, r4
2003ab28:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003ab2c:	e8930008 	lwi	r4, r19, 8
2003ab30:	e873000c 	lwi	r3, r19, 12
2003ab34:	16441803 	cmpu	r18, r4, r3
2003ab38:	bcb20008 	bgei	r18, 8		// 2003ab40
2003ab3c:	10640000 	addk	r3, r4, r0
2003ab40:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003ab44:	e8730004 	lwi	r3, r19, 4
2003ab48:	30630001 	addik	r3, r3, 1
2003ab4c:	f8730004 	swi	r3, r19, 4
2003ab50:	e8930004 	lwi	r4, r19, 4
2003ab54:	e873001c 	lwi	r3, r19, 28
2003ab58:	16432003 	cmpu	r18, r3, r4
2003ab5c:	bc52ffa4 	blti	r18, -92		// 2003ab00
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003ab60:	e8730018 	lwi	r3, r19, 24
2003ab64:	e8830000 	lwi	r4, r3, 0
2003ab68:	e8730008 	lwi	r3, r19, 8
2003ab6c:	14632000 	rsubk	r3, r3, r4
}
2003ab70:	10330000 	addk	r1, r19, r0
2003ab74:	ea610010 	lwi	r19, r1, 16
2003ab78:	30210014 	addik	r1, r1, 20
2003ab7c:	b60f0008 	rtsd	r15, 8
2003ab80:	80000000 	or	r0, r0, r0

2003ab84 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003ab84:	3021fff4 	addik	r1, r1, -12
2003ab88:	fa610008 	swi	r19, r1, 8
2003ab8c:	12610000 	addk	r19, r1, r0
2003ab90:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2003ab94:	e8730010 	lwi	r3, r19, 16
2003ab98:	e8630010 	lwi	r3, r3, 16
2003ab9c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003aba0:	f8130004 	swi	r0, r19, 4
2003aba4:	b8000028 	bri	40		// 2003abcc
        fifo->read_inds[i] = 0;
2003aba8:	e8730010 	lwi	r3, r19, 16
2003abac:	e883000c 	lwi	r4, r3, 12
2003abb0:	e8730004 	lwi	r3, r19, 4
2003abb4:	64630402 	bslli	r3, r3, 2
2003abb8:	10641800 	addk	r3, r4, r3
2003abbc:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003abc0:	e8730004 	lwi	r3, r19, 4
2003abc4:	30630001 	addik	r3, r3, 1
2003abc8:	f8730004 	swi	r3, r19, 4
2003abcc:	e8730010 	lwi	r3, r19, 16
2003abd0:	e8830008 	lwi	r4, r3, 8
2003abd4:	e8730004 	lwi	r3, r19, 4
2003abd8:	16441803 	cmpu	r18, r4, r3
2003abdc:	bc52ffcc 	blti	r18, -52		// 2003aba8
        fifo->read_inds[i] = 0;
    }
}
2003abe0:	10330000 	addk	r1, r19, r0
2003abe4:	ea610008 	lwi	r19, r1, 8
2003abe8:	3021000c 	addik	r1, r1, 12
2003abec:	b60f0008 	rtsd	r15, 8
2003abf0:	80000000 	or	r0, r0, r0

2003abf4 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003abf4:	3021fff0 	addik	r1, r1, -16
2003abf8:	fa61000c 	swi	r19, r1, 12
2003abfc:	12610000 	addk	r19, r1, r0
2003ac00:	f8b30014 	swi	r5, r19, 20
2003ac04:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003ac08:	e8730014 	lwi	r3, r19, 20
2003ac0c:	e8830004 	lwi	r4, r3, 4
2003ac10:	e8730014 	lwi	r3, r19, 20
2003ac14:	e8a3000c 	lwi	r5, r3, 12
2003ac18:	e8730018 	lwi	r3, r19, 24
2003ac1c:	64630402 	bslli	r3, r3, 2
2003ac20:	10651800 	addk	r3, r5, r3
2003ac24:	e8a30000 	lwi	r5, r3, 0
2003ac28:	e8730014 	lwi	r3, r19, 20
2003ac2c:	e8630000 	lwi	r3, r3, 0
2003ac30:	3063ffff 	addik	r3, r3, -1
2003ac34:	84651800 	and	r3, r5, r3
2003ac38:	64630403 	bslli	r3, r3, 3
2003ac3c:	10641800 	addk	r3, r4, r3
2003ac40:	e8830000 	lwi	r4, r3, 0
2003ac44:	e8a30004 	lwi	r5, r3, 4
2003ac48:	f8930004 	swi	r4, r19, 4
2003ac4c:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2003ac50:	e8730014 	lwi	r3, r19, 20
2003ac54:	e883000c 	lwi	r4, r3, 12
2003ac58:	e8730018 	lwi	r3, r19, 24
2003ac5c:	64630402 	bslli	r3, r3, 2
2003ac60:	10641800 	addk	r3, r4, r3
2003ac64:	e8830000 	lwi	r4, r3, 0
2003ac68:	30840001 	addik	r4, r4, 1
2003ac6c:	f8830000 	swi	r4, r3, 0
    return value;
2003ac70:	e8930004 	lwi	r4, r19, 4
2003ac74:	e8b30008 	lwi	r5, r19, 8
}
2003ac78:	10640000 	addk	r3, r4, r0
2003ac7c:	10850000 	addk	r4, r5, r0
2003ac80:	10330000 	addk	r1, r19, r0
2003ac84:	ea61000c 	lwi	r19, r1, 12
2003ac88:	30210010 	addik	r1, r1, 16
2003ac8c:	b60f0008 	rtsd	r15, 8
2003ac90:	80000000 	or	r0, r0, r0

2003ac94 <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003ac94:	3021fff8 	addik	r1, r1, -8
2003ac98:	fa610004 	swi	r19, r1, 4
2003ac9c:	12610000 	addk	r19, r1, r0
2003aca0:	f8b3000c 	swi	r5, r19, 12
2003aca4:	f8d30010 	swi	r6, r19, 16
2003aca8:	f8f30014 	swi	r7, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003acac:	e873000c 	lwi	r3, r19, 12
2003acb0:	e8830004 	lwi	r4, r3, 4
2003acb4:	e873000c 	lwi	r3, r19, 12
2003acb8:	e8630010 	lwi	r3, r3, 16
2003acbc:	e8a30000 	lwi	r5, r3, 0
2003acc0:	e873000c 	lwi	r3, r19, 12
2003acc4:	e8630000 	lwi	r3, r3, 0
2003acc8:	3063ffff 	addik	r3, r3, -1
2003accc:	84651800 	and	r3, r5, r3
2003acd0:	64630403 	bslli	r3, r3, 3
2003acd4:	10641800 	addk	r3, r4, r3
2003acd8:	e8930010 	lwi	r4, r19, 16
2003acdc:	e8b30014 	lwi	r5, r19, 20
2003ace0:	f8830000 	swi	r4, r3, 0
2003ace4:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2003ace8:	e873000c 	lwi	r3, r19, 12
2003acec:	e8630010 	lwi	r3, r3, 16
2003acf0:	e8830000 	lwi	r4, r3, 0
2003acf4:	30840001 	addik	r4, r4, 1
2003acf8:	f8830000 	swi	r4, r3, 0
}
2003acfc:	10330000 	addk	r1, r19, r0
2003ad00:	ea610004 	lwi	r19, r1, 4
2003ad04:	30210008 	addik	r1, r1, 8
2003ad08:	b60f0008 	rtsd	r15, 8
2003ad0c:	80000000 	or	r0, r0, r0

2003ad10 <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003ad10:	3021fff8 	addik	r1, r1, -8
2003ad14:	fa610004 	swi	r19, r1, 4
2003ad18:	12610000 	addk	r19, r1, r0
2003ad1c:	f8b3000c 	swi	r5, r19, 12
2003ad20:	f8d30010 	swi	r6, r19, 16
2003ad24:	f8f30014 	swi	r7, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003ad28:	e873000c 	lwi	r3, r19, 12
2003ad2c:	e8630010 	lwi	r3, r3, 16
2003ad30:	e8830000 	lwi	r4, r3, 0
2003ad34:	e873000c 	lwi	r3, r19, 12
2003ad38:	e8a3000c 	lwi	r5, r3, 12
2003ad3c:	e8730010 	lwi	r3, r19, 16
2003ad40:	64630402 	bslli	r3, r3, 2
2003ad44:	10651800 	addk	r3, r5, r3
2003ad48:	e8630000 	lwi	r3, r3, 0
2003ad4c:	14a32000 	rsubk	r5, r3, r4
2003ad50:	30600001 	addik	r3, r0, 1
2003ad54:	e8930014 	lwi	r4, r19, 20
2003ad58:	16442803 	cmpu	r18, r4, r5
2003ad5c:	bcb20008 	bgei	r18, 8		// 2003ad64
2003ad60:	10600000 	addk	r3, r0, r0
2003ad64:	a46300ff 	andi	r3, r3, 255
}
2003ad68:	10330000 	addk	r1, r19, r0
2003ad6c:	ea610004 	lwi	r19, r1, 4
2003ad70:	30210008 	addik	r1, r1, 8
2003ad74:	b60f0008 	rtsd	r15, 8
2003ad78:	80000000 	or	r0, r0, r0

2003ad7c <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003ad7c:	3021fff8 	addik	r1, r1, -8
2003ad80:	fa610004 	swi	r19, r1, 4
2003ad84:	12610000 	addk	r19, r1, r0
2003ad88:	f8b3000c 	swi	r5, r19, 12
2003ad8c:	f8d30010 	swi	r6, r19, 16
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003ad90:	e873000c 	lwi	r3, r19, 12
2003ad94:	e8630010 	lwi	r3, r3, 16
2003ad98:	e8830000 	lwi	r4, r3, 0
2003ad9c:	e873000c 	lwi	r3, r19, 12
2003ada0:	e8a3000c 	lwi	r5, r3, 12
2003ada4:	e8730010 	lwi	r3, r19, 16
2003ada8:	64630402 	bslli	r3, r3, 2
2003adac:	10651800 	addk	r3, r5, r3
2003adb0:	e8630000 	lwi	r3, r3, 0
2003adb4:	14632000 	rsubk	r3, r3, r4
}
2003adb8:	10330000 	addk	r1, r19, r0
2003adbc:	ea610004 	lwi	r19, r1, 4
2003adc0:	30210008 	addik	r1, r1, 8
2003adc4:	b60f0008 	rtsd	r15, 8
2003adc8:	80000000 	or	r0, r0, r0

2003adcc <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003adcc:	3021fff4 	addik	r1, r1, -12
2003add0:	fa610008 	swi	r19, r1, 8
2003add4:	12610000 	addk	r19, r1, r0
2003add8:	f8b30010 	swi	r5, r19, 16
2003addc:	f8d30014 	swi	r6, r19, 20
2003ade0:	f8f30018 	swi	r7, r19, 24
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003ade4:	f8130004 	swi	r0, r19, 4
2003ade8:	b800005c 	bri	92		// 2003ae44
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003adec:	e8730010 	lwi	r3, r19, 16
2003adf0:	e8830000 	lwi	r4, r3, 0
2003adf4:	e8730010 	lwi	r3, r19, 16
2003adf8:	e8a3000c 	lwi	r5, r3, 12
2003adfc:	e8730004 	lwi	r3, r19, 4
2003ae00:	64630402 	bslli	r3, r3, 2
2003ae04:	10651800 	addk	r3, r5, r3
2003ae08:	e8a30000 	lwi	r5, r3, 0
2003ae0c:	e8730010 	lwi	r3, r19, 16
2003ae10:	e8630010 	lwi	r3, r3, 16
2003ae14:	e8630000 	lwi	r3, r3, 0
2003ae18:	14632800 	rsubk	r3, r3, r5
2003ae1c:	10641800 	addk	r3, r4, r3
2003ae20:	30830001 	addik	r4, r3, 1
2003ae24:	e8730018 	lwi	r3, r19, 24
2003ae28:	16441803 	cmpu	r18, r4, r3
2003ae2c:	bc52000c 	blti	r18, 12		// 2003ae38
            return 0;
2003ae30:	10600000 	addk	r3, r0, r0
2003ae34:	b8000024 	bri	36		// 2003ae58
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003ae38:	e8730004 	lwi	r3, r19, 4
2003ae3c:	30630001 	addik	r3, r3, 1
2003ae40:	f8730004 	swi	r3, r19, 4
2003ae44:	e8930004 	lwi	r4, r19, 4
2003ae48:	e8730014 	lwi	r3, r19, 20
2003ae4c:	16432003 	cmpu	r18, r3, r4
2003ae50:	bc52ff9c 	blti	r18, -100		// 2003adec
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003ae54:	30600001 	addik	r3, r0, 1
}
2003ae58:	10330000 	addk	r1, r19, r0
2003ae5c:	ea610008 	lwi	r19, r1, 8
2003ae60:	3021000c 	addik	r1, r1, 12
2003ae64:	b60f0008 	rtsd	r15, 8
2003ae68:	80000000 	or	r0, r0, r0

2003ae6c <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003ae6c:	3021ffec 	addik	r1, r1, -20
2003ae70:	fa610010 	swi	r19, r1, 16
2003ae74:	12610000 	addk	r19, r1, r0
2003ae78:	f8b30018 	swi	r5, r19, 24
2003ae7c:	f8d3001c 	swi	r6, r19, 28
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003ae80:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003ae84:	f8130004 	swi	r0, r19, 4
2003ae88:	b8000054 	bri	84		// 2003aedc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003ae8c:	e8730018 	lwi	r3, r19, 24
2003ae90:	e8630010 	lwi	r3, r3, 16
2003ae94:	e8830000 	lwi	r4, r3, 0
2003ae98:	e8730018 	lwi	r3, r19, 24
2003ae9c:	e8a3000c 	lwi	r5, r3, 12
2003aea0:	e8730004 	lwi	r3, r19, 4
2003aea4:	64630402 	bslli	r3, r3, 2
2003aea8:	10651800 	addk	r3, r5, r3
2003aeac:	e8630000 	lwi	r3, r3, 0
2003aeb0:	14632000 	rsubk	r3, r3, r4
2003aeb4:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003aeb8:	e8930008 	lwi	r4, r19, 8
2003aebc:	e873000c 	lwi	r3, r19, 12
2003aec0:	16441803 	cmpu	r18, r4, r3
2003aec4:	bcb20008 	bgei	r18, 8		// 2003aecc
2003aec8:	10640000 	addk	r3, r4, r0
2003aecc:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003aed0:	e8730004 	lwi	r3, r19, 4
2003aed4:	30630001 	addik	r3, r3, 1
2003aed8:	f8730004 	swi	r3, r19, 4
2003aedc:	e8930004 	lwi	r4, r19, 4
2003aee0:	e873001c 	lwi	r3, r19, 28
2003aee4:	16432003 	cmpu	r18, r3, r4
2003aee8:	bc52ffa4 	blti	r18, -92		// 2003ae8c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003aeec:	e8730018 	lwi	r3, r19, 24
2003aef0:	e8830000 	lwi	r4, r3, 0
2003aef4:	e8730008 	lwi	r3, r19, 8
2003aef8:	14632000 	rsubk	r3, r3, r4
}
2003aefc:	10330000 	addk	r1, r19, r0
2003af00:	ea610010 	lwi	r19, r1, 16
2003af04:	30210014 	addik	r1, r1, 20
2003af08:	b60f0008 	rtsd	r15, 8
2003af0c:	80000000 	or	r0, r0, r0

2003af10 <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003af10:	3021fff4 	addik	r1, r1, -12
2003af14:	fa610008 	swi	r19, r1, 8
2003af18:	12610000 	addk	r19, r1, r0
2003af1c:	f8b30010 	swi	r5, r19, 16
    unsigned int i;
    (*fifo->write_ind) = 0;
2003af20:	e8730010 	lwi	r3, r19, 16
2003af24:	e8630010 	lwi	r3, r3, 16
2003af28:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003af2c:	f8130004 	swi	r0, r19, 4
2003af30:	b8000028 	bri	40		// 2003af58
        fifo->read_inds[i] = 0;
2003af34:	e8730010 	lwi	r3, r19, 16
2003af38:	e883000c 	lwi	r4, r3, 12
2003af3c:	e8730004 	lwi	r3, r19, 4
2003af40:	64630402 	bslli	r3, r3, 2
2003af44:	10641800 	addk	r3, r4, r3
2003af48:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003af4c:	e8730004 	lwi	r3, r19, 4
2003af50:	30630001 	addik	r3, r3, 1
2003af54:	f8730004 	swi	r3, r19, 4
2003af58:	e8730010 	lwi	r3, r19, 16
2003af5c:	e8830008 	lwi	r4, r3, 8
2003af60:	e8730004 	lwi	r3, r19, 4
2003af64:	16441803 	cmpu	r18, r4, r3
2003af68:	bc52ffcc 	blti	r18, -52		// 2003af34
        fifo->read_inds[i] = 0;
    }
}
2003af6c:	10330000 	addk	r1, r19, r0
2003af70:	ea610008 	lwi	r19, r1, 8
2003af74:	3021000c 	addik	r1, r1, 12
2003af78:	b60f0008 	rtsd	r15, 8
2003af7c:	80000000 	or	r0, r0, r0

2003af80 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003af80:	3021fff4 	addik	r1, r1, -12
2003af84:	fa610008 	swi	r19, r1, 8
2003af88:	12610000 	addk	r19, r1, r0
2003af8c:	f8b30010 	swi	r5, r19, 16
2003af90:	f8d30014 	swi	r6, r19, 20
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003af94:	e8730010 	lwi	r3, r19, 16
2003af98:	e8830004 	lwi	r4, r3, 4
2003af9c:	e8730010 	lwi	r3, r19, 16
2003afa0:	e8a3000c 	lwi	r5, r3, 12
2003afa4:	e8730014 	lwi	r3, r19, 20
2003afa8:	64630402 	bslli	r3, r3, 2
2003afac:	10651800 	addk	r3, r5, r3
2003afb0:	e8a30000 	lwi	r5, r3, 0
2003afb4:	e8730010 	lwi	r3, r19, 16
2003afb8:	e8630000 	lwi	r3, r3, 0
2003afbc:	3063ffff 	addik	r3, r3, -1
2003afc0:	84651800 	and	r3, r5, r3
2003afc4:	64630402 	bslli	r3, r3, 2
2003afc8:	10641800 	addk	r3, r4, r3
2003afcc:	e8630000 	lwi	r3, r3, 0
2003afd0:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003afd4:	e8730010 	lwi	r3, r19, 16
2003afd8:	e883000c 	lwi	r4, r3, 12
2003afdc:	e8730014 	lwi	r3, r19, 20
2003afe0:	64630402 	bslli	r3, r3, 2
2003afe4:	10641800 	addk	r3, r4, r3
2003afe8:	e8830000 	lwi	r4, r3, 0
2003afec:	30840001 	addik	r4, r4, 1
2003aff0:	f8830000 	swi	r4, r3, 0
    return value;
2003aff4:	e8730004 	lwi	r3, r19, 4
}
2003aff8:	10330000 	addk	r1, r19, r0
2003affc:	ea610008 	lwi	r19, r1, 8
2003b000:	3021000c 	addik	r1, r1, 12
2003b004:	b60f0008 	rtsd	r15, 8
2003b008:	80000000 	or	r0, r0, r0

2003b00c <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003b00c:	3021fff8 	addik	r1, r1, -8
2003b010:	fa610004 	swi	r19, r1, 4
2003b014:	12610000 	addk	r19, r1, r0
2003b018:	f8b3000c 	swi	r5, r19, 12
2003b01c:	f8d30010 	swi	r6, r19, 16
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003b020:	e873000c 	lwi	r3, r19, 12
2003b024:	e8830004 	lwi	r4, r3, 4
2003b028:	e873000c 	lwi	r3, r19, 12
2003b02c:	e8630010 	lwi	r3, r3, 16
2003b030:	e8a30000 	lwi	r5, r3, 0
2003b034:	e873000c 	lwi	r3, r19, 12
2003b038:	e8630000 	lwi	r3, r3, 0
2003b03c:	3063ffff 	addik	r3, r3, -1
2003b040:	84651800 	and	r3, r5, r3
2003b044:	64630402 	bslli	r3, r3, 2
2003b048:	10641800 	addk	r3, r4, r3
2003b04c:	e8930010 	lwi	r4, r19, 16
2003b050:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2003b054:	e873000c 	lwi	r3, r19, 12
2003b058:	e8630010 	lwi	r3, r3, 16
2003b05c:	e8830000 	lwi	r4, r3, 0
2003b060:	30840001 	addik	r4, r4, 1
2003b064:	f8830000 	swi	r4, r3, 0
}
2003b068:	10330000 	addk	r1, r19, r0
2003b06c:	ea610004 	lwi	r19, r1, 4
2003b070:	30210008 	addik	r1, r1, 8
2003b074:	b60f0008 	rtsd	r15, 8
2003b078:	80000000 	or	r0, r0, r0

2003b07c <read_IN>:
	
	static u8 needInit = 1;
	
	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_IN() {
2003b07c:	3021ffe0 	addik	r1, r1, -32
2003b080:	f9e10000 	swi	r15, r1, 0
2003b084:	fa61001c 	swi	r19, r1, 28
2003b088:	12610000 	addk	r19, r1, r0
		index_IN = decoder_texture_idct2d_IN->read_inds[0];
2003b08c:	b0002004 	imm	8196
2003b090:	e8608e7c 	lwi	r3, r0, -29060	// 20048e7c <decoder_texture_idct2d_IN>
2003b094:	e863000c 	lwi	r3, r3, 12
2003b098:	e8630000 	lwi	r3, r3, 0
2003b09c:	b0002006 	imm	8198
2003b0a0:	f8602f88 	swi	r3, r0, 12168	// 20062f88 <index_IN>
		numTokens_IN = index_IN + fifo_i16_get_num_tokens(decoder_texture_idct2d_IN, 0);
2003b0a4:	b0002004 	imm	8196
2003b0a8:	e8608e7c 	lwi	r3, r0, -29060	// 20048e7c <decoder_texture_idct2d_IN>
2003b0ac:	10a30000 	addk	r5, r3, r0
2003b0b0:	10c00000 	addk	r6, r0, r0
2003b0b4:	b9f4e48c 	brlid	r15, -7028	// 20039540 <fifo_i16_get_num_tokens>
2003b0b8:	80000000 	or	r0, r0, r0
2003b0bc:	10830000 	addk	r4, r3, r0
2003b0c0:	b0002006 	imm	8198
2003b0c4:	e8602f88 	lwi	r3, r0, 12168	// 20062f88 <index_IN>
2003b0c8:	10641800 	addk	r3, r4, r3
2003b0cc:	b0002006 	imm	8198
2003b0d0:	f8602f8c 	swi	r3, r0, 12172	// 20062f8c <numTokens_IN>
	}
2003b0d4:	e9e10000 	lwi	r15, r1, 0
2003b0d8:	10330000 	addk	r1, r19, r0
2003b0dc:	ea61001c 	lwi	r19, r1, 28
2003b0e0:	30210020 	addik	r1, r1, 32
2003b0e4:	b60f0008 	rtsd	r15, 8
2003b0e8:	80000000 	or	r0, r0, r0

2003b0ec <read_end_IN>:
	
	static void read_end_IN() {
2003b0ec:	3021fff8 	addik	r1, r1, -8
2003b0f0:	fa610004 	swi	r19, r1, 4
2003b0f4:	12610000 	addk	r19, r1, r0
		decoder_texture_idct2d_IN->read_inds[0] = index_IN;
2003b0f8:	b0002004 	imm	8196
2003b0fc:	e8608e7c 	lwi	r3, r0, -29060	// 20048e7c <decoder_texture_idct2d_IN>
2003b100:	e863000c 	lwi	r3, r3, 12
2003b104:	b0002006 	imm	8198
2003b108:	e8802f88 	lwi	r4, r0, 12168	// 20062f88 <index_IN>
2003b10c:	f8830000 	swi	r4, r3, 0
	}
2003b110:	10330000 	addk	r1, r19, r0
2003b114:	ea610004 	lwi	r19, r1, 4
2003b118:	30210008 	addik	r1, r1, 8
2003b11c:	b60f0008 	rtsd	r15, 8
2003b120:	80000000 	or	r0, r0, r0

2003b124 <read_SIGNED>:
	static void read_SIGNED() {
2003b124:	3021ffe0 	addik	r1, r1, -32
2003b128:	f9e10000 	swi	r15, r1, 0
2003b12c:	fa61001c 	swi	r19, r1, 28
2003b130:	12610000 	addk	r19, r1, r0
		index_SIGNED = decoder_texture_idct2d_SIGNED->read_inds[0];
2003b134:	b0002004 	imm	8196
2003b138:	e8608ebc 	lwi	r3, r0, -28996	// 20048ebc <decoder_texture_idct2d_SIGNED>
2003b13c:	e863000c 	lwi	r3, r3, 12
2003b140:	e8630000 	lwi	r3, r3, 0
2003b144:	b0002006 	imm	8198
2003b148:	f8602f90 	swi	r3, r0, 12176	// 20062f90 <index_SIGNED>
		numTokens_SIGNED = index_SIGNED + fifo_i32_get_num_tokens(decoder_texture_idct2d_SIGNED, 0);
2003b14c:	b0002004 	imm	8196
2003b150:	e8608ebc 	lwi	r3, r0, -28996	// 20048ebc <decoder_texture_idct2d_SIGNED>
2003b154:	10a30000 	addk	r5, r3, r0
2003b158:	10c00000 	addk	r6, r0, r0
2003b15c:	b9f4e758 	brlid	r15, -6312	// 200398b4 <fifo_i32_get_num_tokens>
2003b160:	80000000 	or	r0, r0, r0
2003b164:	10830000 	addk	r4, r3, r0
2003b168:	b0002006 	imm	8198
2003b16c:	e8602f90 	lwi	r3, r0, 12176	// 20062f90 <index_SIGNED>
2003b170:	10641800 	addk	r3, r4, r3
2003b174:	b0002006 	imm	8198
2003b178:	f8602f94 	swi	r3, r0, 12180	// 20062f94 <numTokens_SIGNED>
	}
2003b17c:	e9e10000 	lwi	r15, r1, 0
2003b180:	10330000 	addk	r1, r19, r0
2003b184:	ea61001c 	lwi	r19, r1, 28
2003b188:	30210020 	addik	r1, r1, 32
2003b18c:	b60f0008 	rtsd	r15, 8
2003b190:	80000000 	or	r0, r0, r0

2003b194 <read_end_SIGNED>:
	
	static void read_end_SIGNED() {
2003b194:	3021fff8 	addik	r1, r1, -8
2003b198:	fa610004 	swi	r19, r1, 4
2003b19c:	12610000 	addk	r19, r1, r0
		decoder_texture_idct2d_SIGNED->read_inds[0] = index_SIGNED;
2003b1a0:	b0002004 	imm	8196
2003b1a4:	e8608ebc 	lwi	r3, r0, -28996	// 20048ebc <decoder_texture_idct2d_SIGNED>
2003b1a8:	e863000c 	lwi	r3, r3, 12
2003b1ac:	b0002006 	imm	8198
2003b1b0:	e8802f90 	lwi	r4, r0, 12176	// 20062f90 <index_SIGNED>
2003b1b4:	f8830000 	swi	r4, r3, 0
	}
2003b1b8:	10330000 	addk	r1, r19, r0
2003b1bc:	ea610004 	lwi	r19, r1, 4
2003b1c0:	30210008 	addik	r1, r1, 8
2003b1c4:	b60f0008 	rtsd	r15, 8
2003b1c8:	80000000 	or	r0, r0, r0

2003b1cc <write_OUT>:

	static void write_OUT() {
2003b1cc:	3021ffe0 	addik	r1, r1, -32
2003b1d0:	f9e10000 	swi	r15, r1, 0
2003b1d4:	fa61001c 	swi	r19, r1, 28
2003b1d8:	12610000 	addk	r19, r1, r0
		index_OUT = (*decoder_texture_idct2d_OUT->write_ind);
2003b1dc:	b0002004 	imm	8196
2003b1e0:	e8608e80 	lwi	r3, r0, -29056	// 20048e80 <decoder_texture_idct2d_OUT>
2003b1e4:	e8630010 	lwi	r3, r3, 16
2003b1e8:	e8630000 	lwi	r3, r3, 0
2003b1ec:	b0002006 	imm	8198
2003b1f0:	f8602f98 	swi	r3, r0, 12184	// 20062f98 <index_OUT>
		numFree_OUT = index_OUT + fifo_i16_get_room(decoder_texture_idct2d_OUT, NUM_READERS_OUT);
2003b1f4:	b0002004 	imm	8196
2003b1f8:	e8608e80 	lwi	r3, r0, -29056	// 20048e80 <decoder_texture_idct2d_OUT>
2003b1fc:	10a30000 	addk	r5, r3, r0
2003b200:	30c00001 	addik	r6, r0, 1
2003b204:	b9f4e42c 	brlid	r15, -7124	// 20039630 <fifo_i16_get_room>
2003b208:	80000000 	or	r0, r0, r0
2003b20c:	10830000 	addk	r4, r3, r0
2003b210:	b0002006 	imm	8198
2003b214:	e8602f98 	lwi	r3, r0, 12184	// 20062f98 <index_OUT>
2003b218:	10641800 	addk	r3, r4, r3
2003b21c:	b0002006 	imm	8198
2003b220:	f8602f9c 	swi	r3, r0, 12188	// 20062f9c <numFree_OUT>
	}
2003b224:	e9e10000 	lwi	r15, r1, 0
2003b228:	10330000 	addk	r1, r19, r0
2003b22c:	ea61001c 	lwi	r19, r1, 28
2003b230:	30210020 	addik	r1, r1, 32
2003b234:	b60f0008 	rtsd	r15, 8
2003b238:	80000000 	or	r0, r0, r0

2003b23c <write_end_OUT>:
	
	static void write_end_OUT() {
2003b23c:	3021fff8 	addik	r1, r1, -8
2003b240:	fa610004 	swi	r19, r1, 4
2003b244:	12610000 	addk	r19, r1, r0
		(*decoder_texture_idct2d_OUT->write_ind) = index_OUT;
2003b248:	b0002004 	imm	8196
2003b24c:	e8608e80 	lwi	r3, r0, -29056	// 20048e80 <decoder_texture_idct2d_OUT>
2003b250:	e8630010 	lwi	r3, r3, 16
2003b254:	b0002006 	imm	8198
2003b258:	e8802f98 	lwi	r4, r0, 12184	// 20062f98 <index_OUT>
2003b25c:	f8830000 	swi	r4, r3, 0
	}
2003b260:	10330000 	addk	r1, r19, r0
2003b264:	ea610004 	lwi	r19, r1, 4
2003b268:	30210008 	addik	r1, r1, 8
2003b26c:	b60f0008 	rtsd	r15, 8
2003b270:	80000000 	or	r0, r0, r0

2003b274 <pmul_1_1>:
	static i32 pmul_3_1(i32 X);
	static i32 pmul_3_2(i32 X);
	static i32 clip(i32 x, i32 lim);
	static void idct1d(i32 X[64], i32 Y[64]);

	static i32 pmul_1_1(i32 X) {
2003b274:	3021fff4 	addik	r1, r1, -12
2003b278:	fa610008 	swi	r19, r1, 8
2003b27c:	12610000 	addk	r19, r1, r0
2003b280:	f8b30010 	swi	r5, r19, 16
		i32 Temp1;
	
		Temp1 = (X >> 3) - (X >> 7);
2003b284:	e8730010 	lwi	r3, r19, 16
2003b288:	64830203 	bsrai	r4, r3, 3
2003b28c:	e8730010 	lwi	r3, r19, 16
2003b290:	64630207 	bsrai	r3, r3, 7
2003b294:	14632000 	rsubk	r3, r3, r4
2003b298:	f8730004 	swi	r3, r19, 4
		return X - Temp1;
2003b29c:	e8930010 	lwi	r4, r19, 16
2003b2a0:	e8730004 	lwi	r3, r19, 4
2003b2a4:	14632000 	rsubk	r3, r3, r4
	}
2003b2a8:	10330000 	addk	r1, r19, r0
2003b2ac:	ea610008 	lwi	r19, r1, 8
2003b2b0:	3021000c 	addik	r1, r1, 12
2003b2b4:	b60f0008 	rtsd	r15, 8
2003b2b8:	80000000 	or	r0, r0, r0

2003b2bc <pmul_1_2>:
	static i32 pmul_1_2(i32 X) {
2003b2bc:	3021fff0 	addik	r1, r1, -16
2003b2c0:	fa61000c 	swi	r19, r1, 12
2003b2c4:	12610000 	addk	r19, r1, r0
2003b2c8:	f8b30014 	swi	r5, r19, 20
		i32 Temp1;
		i32 Temp2;
	
		Temp1 = (X >> 3) - (X >> 7);
2003b2cc:	e8730014 	lwi	r3, r19, 20
2003b2d0:	64830203 	bsrai	r4, r3, 3
2003b2d4:	e8730014 	lwi	r3, r19, 20
2003b2d8:	64630207 	bsrai	r3, r3, 7
2003b2dc:	14632000 	rsubk	r3, r3, r4
2003b2e0:	f8730004 	swi	r3, r19, 4
		Temp2 = Temp1 - (X >> 11);
2003b2e4:	e8730014 	lwi	r3, r19, 20
2003b2e8:	6463020b 	bsrai	r3, r3, 11
2003b2ec:	e8930004 	lwi	r4, r19, 4
2003b2f0:	14632000 	rsubk	r3, r3, r4
2003b2f4:	f8730008 	swi	r3, r19, 8
		return Temp1 + (Temp2 >> 1);
2003b2f8:	e8730008 	lwi	r3, r19, 8
2003b2fc:	90830001 	sra	r4, r3
2003b300:	e8730004 	lwi	r3, r19, 4
2003b304:	10641800 	addk	r3, r4, r3
	}
2003b308:	10330000 	addk	r1, r19, r0
2003b30c:	ea61000c 	lwi	r19, r1, 12
2003b310:	30210010 	addik	r1, r1, 16
2003b314:	b60f0008 	rtsd	r15, 8
2003b318:	80000000 	or	r0, r0, r0

2003b31c <pmul_2_1>:
	static i32 pmul_2_1(i32 X) {
2003b31c:	3021fff4 	addik	r1, r1, -12
2003b320:	fa610008 	swi	r19, r1, 8
2003b324:	12610000 	addk	r19, r1, r0
2003b328:	f8b30010 	swi	r5, r19, 16
		i32 Temp1;
	
		Temp1 = (X >> 9) - X;
2003b32c:	e8730010 	lwi	r3, r19, 16
2003b330:	64830209 	bsrai	r4, r3, 9
2003b334:	e8730010 	lwi	r3, r19, 16
2003b338:	14632000 	rsubk	r3, r3, r4
2003b33c:	f8730004 	swi	r3, r19, 4
		return (Temp1 >> 2) - Temp1;
2003b340:	e8730004 	lwi	r3, r19, 4
2003b344:	64830202 	bsrai	r4, r3, 2
2003b348:	e8730004 	lwi	r3, r19, 4
2003b34c:	14632000 	rsubk	r3, r3, r4
	}
2003b350:	10330000 	addk	r1, r19, r0
2003b354:	ea610008 	lwi	r19, r1, 8
2003b358:	3021000c 	addik	r1, r1, 12
2003b35c:	b60f0008 	rtsd	r15, 8
2003b360:	80000000 	or	r0, r0, r0

2003b364 <pmul_2_2>:
	static i32 pmul_2_2(i32 X) {
2003b364:	3021fff8 	addik	r1, r1, -8
2003b368:	fa610004 	swi	r19, r1, 4
2003b36c:	12610000 	addk	r19, r1, r0
2003b370:	f8b3000c 	swi	r5, r19, 12
	
		return X >> 1;
2003b374:	e873000c 	lwi	r3, r19, 12
2003b378:	90630001 	sra	r3, r3
	}
2003b37c:	10330000 	addk	r1, r19, r0
2003b380:	ea610004 	lwi	r19, r1, 4
2003b384:	30210008 	addik	r1, r1, 8
2003b388:	b60f0008 	rtsd	r15, 8
2003b38c:	80000000 	or	r0, r0, r0

2003b390 <pmul_3_1>:
	static i32 pmul_3_1(i32 X) {
2003b390:	3021fff0 	addik	r1, r1, -16
2003b394:	fa61000c 	swi	r19, r1, 12
2003b398:	12610000 	addk	r19, r1, r0
2003b39c:	f8b30014 	swi	r5, r19, 20
		i32 Temp1;
		i32 Temp2;
	
		Temp1 = X + (X >> 5);
2003b3a0:	e8730014 	lwi	r3, r19, 20
2003b3a4:	64830205 	bsrai	r4, r3, 5
2003b3a8:	e8730014 	lwi	r3, r19, 20
2003b3ac:	10641800 	addk	r3, r4, r3
2003b3b0:	f8730004 	swi	r3, r19, 4
		Temp2 = Temp1 >> 2;
2003b3b4:	e8730004 	lwi	r3, r19, 4
2003b3b8:	64630202 	bsrai	r3, r3, 2
2003b3bc:	f8730008 	swi	r3, r19, 8
		return Temp2 + (X >> 4);
2003b3c0:	e8730014 	lwi	r3, r19, 20
2003b3c4:	64830204 	bsrai	r4, r3, 4
2003b3c8:	e8730008 	lwi	r3, r19, 8
2003b3cc:	10641800 	addk	r3, r4, r3
	}
2003b3d0:	10330000 	addk	r1, r19, r0
2003b3d4:	ea61000c 	lwi	r19, r1, 12
2003b3d8:	30210010 	addik	r1, r1, 16
2003b3dc:	b60f0008 	rtsd	r15, 8
2003b3e0:	80000000 	or	r0, r0, r0

2003b3e4 <pmul_3_2>:
	static i32 pmul_3_2(i32 X) {
2003b3e4:	3021fff0 	addik	r1, r1, -16
2003b3e8:	fa61000c 	swi	r19, r1, 12
2003b3ec:	12610000 	addk	r19, r1, r0
2003b3f0:	f8b30014 	swi	r5, r19, 20
		i32 Temp1;
		i32 Temp2;
	
		Temp1 = X + (X >> 5);
2003b3f4:	e8730014 	lwi	r3, r19, 20
2003b3f8:	64830205 	bsrai	r4, r3, 5
2003b3fc:	e8730014 	lwi	r3, r19, 20
2003b400:	10641800 	addk	r3, r4, r3
2003b404:	f8730004 	swi	r3, r19, 4
		Temp2 = Temp1 >> 2;
2003b408:	e8730004 	lwi	r3, r19, 4
2003b40c:	64630202 	bsrai	r3, r3, 2
2003b410:	f8730008 	swi	r3, r19, 8
		return Temp1 - Temp2;
2003b414:	e8930004 	lwi	r4, r19, 4
2003b418:	e8730008 	lwi	r3, r19, 8
2003b41c:	14632000 	rsubk	r3, r3, r4
	}
2003b420:	10330000 	addk	r1, r19, r0
2003b424:	ea61000c 	lwi	r19, r1, 12
2003b428:	30210010 	addik	r1, r1, 16
2003b42c:	b60f0008 	rtsd	r15, 8
2003b430:	80000000 	or	r0, r0, r0

2003b434 <clip>:
	static i32 clip(i32 x, i32 lim) {
2003b434:	3021fff4 	addik	r1, r1, -12
2003b438:	fa610008 	swi	r19, r1, 8
2003b43c:	12610000 	addk	r19, r1, r0
2003b440:	f8b30010 	swi	r5, r19, 16
2003b444:	f8d30014 	swi	r6, r19, 20
		i32 tmp_if;
	
		if (x < lim) {
2003b448:	e8930010 	lwi	r4, r19, 16
2003b44c:	e8730014 	lwi	r3, r19, 20
2003b450:	16432001 	cmp	r18, r3, r4
2003b454:	bcb20010 	bgei	r18, 16		// 2003b464
			tmp_if = lim;
2003b458:	e8730014 	lwi	r3, r19, 20
2003b45c:	f8730004 	swi	r3, r19, 4
2003b460:	b8000028 	bri	40		// 2003b488
		} else {
			if (x > 255) {
2003b464:	e8930010 	lwi	r4, r19, 16
2003b468:	306000ff 	addik	r3, r0, 255
2003b46c:	16441801 	cmp	r18, r4, r3
2003b470:	bcb20010 	bgei	r18, 16		// 2003b480
				tmp_if = 255;
2003b474:	306000ff 	addik	r3, r0, 255
2003b478:	f8730004 	swi	r3, r19, 4
2003b47c:	b800000c 	bri	12		// 2003b488
			} else {
				tmp_if = x;
2003b480:	e8730010 	lwi	r3, r19, 16
2003b484:	f8730004 	swi	r3, r19, 4
			}
		}
		return tmp_if;
2003b488:	e8730004 	lwi	r3, r19, 4
	}
2003b48c:	10330000 	addk	r1, r19, r0
2003b490:	ea610008 	lwi	r19, r1, 8
2003b494:	3021000c 	addik	r1, r1, 12
2003b498:	b60f0008 	rtsd	r15, 8
2003b49c:	80000000 	or	r0, r0, r0

2003b4a0 <idct1d>:
	static void idct1d(i32 X[64], i32 Y[64]) {
2003b4a0:	3021ffb4 	addik	r1, r1, -76
2003b4a4:	f9e10000 	swi	r15, r1, 0
2003b4a8:	fa610048 	swi	r19, r1, 72
2003b4ac:	12610000 	addk	r19, r1, r0
2003b4b0:	f8b30050 	swi	r5, r19, 80
2003b4b4:	f8d30054 	swi	r6, r19, 84
		i32 x7;
		i32 xa;
		i32 xb;
		i32 i;
	
		i = 0;
2003b4b8:	f813001c 	swi	r0, r19, 28
		while (i <= 7) {
2003b4bc:	b80003e8 	bri	1000		// 2003b8a4
			x1 = X[8 * i + 1];
2003b4c0:	e873001c 	lwi	r3, r19, 28
2003b4c4:	64630405 	bslli	r3, r3, 5
2003b4c8:	30630004 	addik	r3, r3, 4
2003b4cc:	e8930050 	lwi	r4, r19, 80
2003b4d0:	10641800 	addk	r3, r4, r3
2003b4d4:	e8630000 	lwi	r3, r3, 0
2003b4d8:	f8730020 	swi	r3, r19, 32
			x3 = X[8 * i + 3];
2003b4dc:	e873001c 	lwi	r3, r19, 28
2003b4e0:	64630405 	bslli	r3, r3, 5
2003b4e4:	3063000c 	addik	r3, r3, 12
2003b4e8:	e8930050 	lwi	r4, r19, 80
2003b4ec:	10641800 	addk	r3, r4, r3
2003b4f0:	e8630000 	lwi	r3, r3, 0
2003b4f4:	f8730024 	swi	r3, r19, 36
			x5 = X[8 * i + 5];
2003b4f8:	e873001c 	lwi	r3, r19, 28
2003b4fc:	64630405 	bslli	r3, r3, 5
2003b500:	30630014 	addik	r3, r3, 20
2003b504:	e8930050 	lwi	r4, r19, 80
2003b508:	10641800 	addk	r3, r4, r3
2003b50c:	e8630000 	lwi	r3, r3, 0
2003b510:	f8730028 	swi	r3, r19, 40
			x7 = X[8 * i + 7];
2003b514:	e873001c 	lwi	r3, r19, 28
2003b518:	64630405 	bslli	r3, r3, 5
2003b51c:	3063001c 	addik	r3, r3, 28
2003b520:	e8930050 	lwi	r4, r19, 80
2003b524:	10641800 	addk	r3, r4, r3
2003b528:	e8630000 	lwi	r3, r3, 0
2003b52c:	f873002c 	swi	r3, r19, 44
			xa = x1 + x7;
2003b530:	e8930020 	lwi	r4, r19, 32
2003b534:	e873002c 	lwi	r3, r19, 44
2003b538:	10641800 	addk	r3, r4, r3
2003b53c:	f8730030 	swi	r3, r19, 48
			xb = x1 - x7;
2003b540:	e8930020 	lwi	r4, r19, 32
2003b544:	e873002c 	lwi	r3, r19, 44
2003b548:	14632000 	rsubk	r3, r3, r4
2003b54c:	f8730034 	swi	r3, r19, 52
			x1 = xa + x3;
2003b550:	e8930030 	lwi	r4, r19, 48
2003b554:	e8730024 	lwi	r3, r19, 36
2003b558:	10641800 	addk	r3, r4, r3
2003b55c:	f8730020 	swi	r3, r19, 32
			x3 = xa - x3;
2003b560:	e8930030 	lwi	r4, r19, 48
2003b564:	e8730024 	lwi	r3, r19, 36
2003b568:	14632000 	rsubk	r3, r3, r4
2003b56c:	f8730024 	swi	r3, r19, 36
			x7 = xb + x5;
2003b570:	e8930034 	lwi	r4, r19, 52
2003b574:	e8730028 	lwi	r3, r19, 40
2003b578:	10641800 	addk	r3, r4, r3
2003b57c:	f873002c 	swi	r3, r19, 44
			x5 = xb - x5;
2003b580:	e8930034 	lwi	r4, r19, 52
2003b584:	e8730028 	lwi	r3, r19, 40
2003b588:	14632000 	rsubk	r3, r3, r4
2003b58c:	f8730028 	swi	r3, r19, 40
			xa = pmul_1_2(x3);
2003b590:	e8b30024 	lwi	r5, r19, 36
2003b594:	b9f4fd28 	brlid	r15, -728	// 2003b2bc <pmul_1_2>
2003b598:	80000000 	or	r0, r0, r0
2003b59c:	f8730030 	swi	r3, r19, 48
			x3 = pmul_1_1(x3);
2003b5a0:	e8b30024 	lwi	r5, r19, 36
2003b5a4:	b9f4fcd0 	brlid	r15, -816	// 2003b274 <pmul_1_1>
2003b5a8:	80000000 	or	r0, r0, r0
2003b5ac:	f8730024 	swi	r3, r19, 36
			xb = pmul_1_2(x5);
2003b5b0:	e8b30028 	lwi	r5, r19, 40
2003b5b4:	b9f4fd08 	brlid	r15, -760	// 2003b2bc <pmul_1_2>
2003b5b8:	80000000 	or	r0, r0, r0
2003b5bc:	f8730034 	swi	r3, r19, 52
			x5 = pmul_1_1(x5);
2003b5c0:	e8b30028 	lwi	r5, r19, 40
2003b5c4:	b9f4fcb0 	brlid	r15, -848	// 2003b274 <pmul_1_1>
2003b5c8:	80000000 	or	r0, r0, r0
2003b5cc:	f8730028 	swi	r3, r19, 40
			x3 = x3 - xb;
2003b5d0:	e8930024 	lwi	r4, r19, 36
2003b5d4:	e8730034 	lwi	r3, r19, 52
2003b5d8:	14632000 	rsubk	r3, r3, r4
2003b5dc:	f8730024 	swi	r3, r19, 36
			x5 = x5 + xa;
2003b5e0:	e8930028 	lwi	r4, r19, 40
2003b5e4:	e8730030 	lwi	r3, r19, 48
2003b5e8:	10641800 	addk	r3, r4, r3
2003b5ec:	f8730028 	swi	r3, r19, 40
			xa = pmul_2_2(x1);
2003b5f0:	e8b30020 	lwi	r5, r19, 32
2003b5f4:	b9f4fd70 	brlid	r15, -656	// 2003b364 <pmul_2_2>
2003b5f8:	80000000 	or	r0, r0, r0
2003b5fc:	f8730030 	swi	r3, r19, 48
			x1 = pmul_2_1(x1);
2003b600:	e8b30020 	lwi	r5, r19, 32
2003b604:	b9f4fd18 	brlid	r15, -744	// 2003b31c <pmul_2_1>
2003b608:	80000000 	or	r0, r0, r0
2003b60c:	f8730020 	swi	r3, r19, 32
			xb = pmul_2_2(x7);
2003b610:	e8b3002c 	lwi	r5, r19, 44
2003b614:	b9f4fd50 	brlid	r15, -688	// 2003b364 <pmul_2_2>
2003b618:	80000000 	or	r0, r0, r0
2003b61c:	f8730034 	swi	r3, r19, 52
			x7 = pmul_2_1(x7);
2003b620:	e8b3002c 	lwi	r5, r19, 44
2003b624:	b9f4fcf8 	brlid	r15, -776	// 2003b31c <pmul_2_1>
2003b628:	80000000 	or	r0, r0, r0
2003b62c:	f873002c 	swi	r3, r19, 44
			x1 = x1 + xb;
2003b630:	e8930020 	lwi	r4, r19, 32
2003b634:	e8730034 	lwi	r3, r19, 52
2003b638:	10641800 	addk	r3, r4, r3
2003b63c:	f8730020 	swi	r3, r19, 32
			x7 = x7 - xa;
2003b640:	e893002c 	lwi	r4, r19, 44
2003b644:	e8730030 	lwi	r3, r19, 48
2003b648:	14632000 	rsubk	r3, r3, r4
2003b64c:	f873002c 	swi	r3, r19, 44
			x0 = X[8 * i + 0];
2003b650:	e873001c 	lwi	r3, r19, 28
2003b654:	64630405 	bslli	r3, r3, 5
2003b658:	e8930050 	lwi	r4, r19, 80
2003b65c:	10641800 	addk	r3, r4, r3
2003b660:	e8630000 	lwi	r3, r3, 0
2003b664:	f8730038 	swi	r3, r19, 56
			x2 = X[8 * i + 2];
2003b668:	e873001c 	lwi	r3, r19, 28
2003b66c:	64630405 	bslli	r3, r3, 5
2003b670:	30630008 	addik	r3, r3, 8
2003b674:	e8930050 	lwi	r4, r19, 80
2003b678:	10641800 	addk	r3, r4, r3
2003b67c:	e8630000 	lwi	r3, r3, 0
2003b680:	f873003c 	swi	r3, r19, 60
			x4 = X[8 * i + 4];
2003b684:	e873001c 	lwi	r3, r19, 28
2003b688:	64630405 	bslli	r3, r3, 5
2003b68c:	30630010 	addik	r3, r3, 16
2003b690:	e8930050 	lwi	r4, r19, 80
2003b694:	10641800 	addk	r3, r4, r3
2003b698:	e8630000 	lwi	r3, r3, 0
2003b69c:	f8730040 	swi	r3, r19, 64
			x6 = X[8 * i + 6];
2003b6a0:	e873001c 	lwi	r3, r19, 28
2003b6a4:	64630405 	bslli	r3, r3, 5
2003b6a8:	30630018 	addik	r3, r3, 24
2003b6ac:	e8930050 	lwi	r4, r19, 80
2003b6b0:	10641800 	addk	r3, r4, r3
2003b6b4:	e8630000 	lwi	r3, r3, 0
2003b6b8:	f8730044 	swi	r3, r19, 68
			xa = pmul_3_2(x2);
2003b6bc:	e8b3003c 	lwi	r5, r19, 60
2003b6c0:	b9f4fd24 	brlid	r15, -732	// 2003b3e4 <pmul_3_2>
2003b6c4:	80000000 	or	r0, r0, r0
2003b6c8:	f8730030 	swi	r3, r19, 48
			x2 = pmul_3_1(x2);
2003b6cc:	e8b3003c 	lwi	r5, r19, 60
2003b6d0:	b9f4fcc0 	brlid	r15, -832	// 2003b390 <pmul_3_1>
2003b6d4:	80000000 	or	r0, r0, r0
2003b6d8:	f873003c 	swi	r3, r19, 60
			xb = pmul_3_2(x6);
2003b6dc:	e8b30044 	lwi	r5, r19, 68
2003b6e0:	b9f4fd04 	brlid	r15, -764	// 2003b3e4 <pmul_3_2>
2003b6e4:	80000000 	or	r0, r0, r0
2003b6e8:	f8730034 	swi	r3, r19, 52
			x6 = pmul_3_1(x6);
2003b6ec:	e8b30044 	lwi	r5, r19, 68
2003b6f0:	b9f4fca0 	brlid	r15, -864	// 2003b390 <pmul_3_1>
2003b6f4:	80000000 	or	r0, r0, r0
2003b6f8:	f8730044 	swi	r3, r19, 68
			x2 = x2 - xb;
2003b6fc:	e893003c 	lwi	r4, r19, 60
2003b700:	e8730034 	lwi	r3, r19, 52
2003b704:	14632000 	rsubk	r3, r3, r4
2003b708:	f873003c 	swi	r3, r19, 60
			x6 = x6 + xa;
2003b70c:	e8930044 	lwi	r4, r19, 68
2003b710:	e8730030 	lwi	r3, r19, 48
2003b714:	10641800 	addk	r3, r4, r3
2003b718:	f8730044 	swi	r3, r19, 68
			xa = x0 + x4;
2003b71c:	e8930038 	lwi	r4, r19, 56
2003b720:	e8730040 	lwi	r3, r19, 64
2003b724:	10641800 	addk	r3, r4, r3
2003b728:	f8730030 	swi	r3, r19, 48
			xb = x0 - x4;
2003b72c:	e8930038 	lwi	r4, r19, 56
2003b730:	e8730040 	lwi	r3, r19, 64
2003b734:	14632000 	rsubk	r3, r3, r4
2003b738:	f8730034 	swi	r3, r19, 52
			x0 = xa + x6;
2003b73c:	e8930030 	lwi	r4, r19, 48
2003b740:	e8730044 	lwi	r3, r19, 68
2003b744:	10641800 	addk	r3, r4, r3
2003b748:	f8730038 	swi	r3, r19, 56
			x6 = xa - x6;
2003b74c:	e8930030 	lwi	r4, r19, 48
2003b750:	e8730044 	lwi	r3, r19, 68
2003b754:	14632000 	rsubk	r3, r3, r4
2003b758:	f8730044 	swi	r3, r19, 68
			x4 = xb + x2;
2003b75c:	e8930034 	lwi	r4, r19, 52
2003b760:	e873003c 	lwi	r3, r19, 60
2003b764:	10641800 	addk	r3, r4, r3
2003b768:	f8730040 	swi	r3, r19, 64
			x2 = xb - x2;
2003b76c:	e8930034 	lwi	r4, r19, 52
2003b770:	e873003c 	lwi	r3, r19, 60
2003b774:	14632000 	rsubk	r3, r3, r4
2003b778:	f873003c 	swi	r3, r19, 60
			Y[i + 8 * 0] = x0 + x1;
2003b77c:	e873001c 	lwi	r3, r19, 28
2003b780:	64630402 	bslli	r3, r3, 2
2003b784:	e8930054 	lwi	r4, r19, 84
2003b788:	10641800 	addk	r3, r4, r3
2003b78c:	e8b30038 	lwi	r5, r19, 56
2003b790:	e8930020 	lwi	r4, r19, 32
2003b794:	10852000 	addk	r4, r5, r4
2003b798:	f8830000 	swi	r4, r3, 0
			Y[i + 8 * 1] = x4 + x5;
2003b79c:	e873001c 	lwi	r3, r19, 28
2003b7a0:	30630008 	addik	r3, r3, 8
2003b7a4:	64630402 	bslli	r3, r3, 2
2003b7a8:	e8930054 	lwi	r4, r19, 84
2003b7ac:	10641800 	addk	r3, r4, r3
2003b7b0:	e8b30040 	lwi	r5, r19, 64
2003b7b4:	e8930028 	lwi	r4, r19, 40
2003b7b8:	10852000 	addk	r4, r5, r4
2003b7bc:	f8830000 	swi	r4, r3, 0
			Y[i + 8 * 2] = x2 + x3;
2003b7c0:	e873001c 	lwi	r3, r19, 28
2003b7c4:	30630010 	addik	r3, r3, 16
2003b7c8:	64630402 	bslli	r3, r3, 2
2003b7cc:	e8930054 	lwi	r4, r19, 84
2003b7d0:	10641800 	addk	r3, r4, r3
2003b7d4:	e8b3003c 	lwi	r5, r19, 60
2003b7d8:	e8930024 	lwi	r4, r19, 36
2003b7dc:	10852000 	addk	r4, r5, r4
2003b7e0:	f8830000 	swi	r4, r3, 0
			Y[i + 8 * 3] = x6 + x7;
2003b7e4:	e873001c 	lwi	r3, r19, 28
2003b7e8:	30630018 	addik	r3, r3, 24
2003b7ec:	64630402 	bslli	r3, r3, 2
2003b7f0:	e8930054 	lwi	r4, r19, 84
2003b7f4:	10641800 	addk	r3, r4, r3
2003b7f8:	e8b30044 	lwi	r5, r19, 68
2003b7fc:	e893002c 	lwi	r4, r19, 44
2003b800:	10852000 	addk	r4, r5, r4
2003b804:	f8830000 	swi	r4, r3, 0
			Y[i + 8 * 4] = x6 - x7;
2003b808:	e873001c 	lwi	r3, r19, 28
2003b80c:	30630020 	addik	r3, r3, 32
2003b810:	64630402 	bslli	r3, r3, 2
2003b814:	e8930054 	lwi	r4, r19, 84
2003b818:	10641800 	addk	r3, r4, r3
2003b81c:	e8b30044 	lwi	r5, r19, 68
2003b820:	e893002c 	lwi	r4, r19, 44
2003b824:	14842800 	rsubk	r4, r4, r5
2003b828:	f8830000 	swi	r4, r3, 0
			Y[i + 8 * 5] = x2 - x3;
2003b82c:	e873001c 	lwi	r3, r19, 28
2003b830:	30630028 	addik	r3, r3, 40
2003b834:	64630402 	bslli	r3, r3, 2
2003b838:	e8930054 	lwi	r4, r19, 84
2003b83c:	10641800 	addk	r3, r4, r3
2003b840:	e8b3003c 	lwi	r5, r19, 60
2003b844:	e8930024 	lwi	r4, r19, 36
2003b848:	14842800 	rsubk	r4, r4, r5
2003b84c:	f8830000 	swi	r4, r3, 0
			Y[i + 8 * 6] = x4 - x5;
2003b850:	e873001c 	lwi	r3, r19, 28
2003b854:	30630030 	addik	r3, r3, 48
2003b858:	64630402 	bslli	r3, r3, 2
2003b85c:	e8930054 	lwi	r4, r19, 84
2003b860:	10641800 	addk	r3, r4, r3
2003b864:	e8b30040 	lwi	r5, r19, 64
2003b868:	e8930028 	lwi	r4, r19, 40
2003b86c:	14842800 	rsubk	r4, r4, r5
2003b870:	f8830000 	swi	r4, r3, 0
			Y[i + 8 * 7] = x0 - x1;
2003b874:	e873001c 	lwi	r3, r19, 28
2003b878:	30630038 	addik	r3, r3, 56
2003b87c:	64630402 	bslli	r3, r3, 2
2003b880:	e8930054 	lwi	r4, r19, 84
2003b884:	10641800 	addk	r3, r4, r3
2003b888:	e8b30038 	lwi	r5, r19, 56
2003b88c:	e8930020 	lwi	r4, r19, 32
2003b890:	14842800 	rsubk	r4, r4, r5
2003b894:	f8830000 	swi	r4, r3, 0
			i = i + 1;
2003b898:	e873001c 	lwi	r3, r19, 28
2003b89c:	30630001 	addik	r3, r3, 1
2003b8a0:	f873001c 	swi	r3, r19, 28
		i32 xa;
		i32 xb;
		i32 i;
	
		i = 0;
		while (i <= 7) {
2003b8a4:	e893001c 	lwi	r4, r19, 28
2003b8a8:	30600007 	addik	r3, r0, 7
2003b8ac:	16441801 	cmp	r18, r4, r3
2003b8b0:	bcb2fc10 	bgei	r18, -1008		// 2003b4c0
			Y[i + 8 * 5] = x2 - x3;
			Y[i + 8 * 6] = x4 - x5;
			Y[i + 8 * 7] = x0 - x1;
			i = i + 1;
		}
	}
2003b8b4:	e9e10000 	lwi	r15, r1, 0
2003b8b8:	10330000 	addk	r1, r19, r0
2003b8bc:	ea610048 	lwi	r19, r1, 72
2003b8c0:	3021004c 	addik	r1, r1, 76
2003b8c4:	b60f0008 	rtsd	r15, 8
2003b8c8:	80000000 	or	r0, r0, r0

2003b8cc <isSchedulable_untagged_0>:

	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_untagged_0() {
2003b8cc:	3021fff4 	addik	r1, r1, -12
2003b8d0:	fa610008 	swi	r19, r1, 8
2003b8d4:	12610000 	addk	r19, r1, r0
		i32 result;
	
		result = 1;
2003b8d8:	30600001 	addik	r3, r0, 1
2003b8dc:	f8730004 	swi	r3, r19, 4
		return result;
2003b8e0:	e8730004 	lwi	r3, r19, 4
	}
2003b8e4:	10330000 	addk	r1, r19, r0
2003b8e8:	ea610008 	lwi	r19, r1, 8
2003b8ec:	3021000c 	addik	r1, r1, 12
2003b8f0:	b60f0008 	rtsd	r15, 8
2003b8f4:	80000000 	or	r0, r0, r0

2003b8f8 <untagged_0>:
	
	static void untagged_0() {
2003b8f8:	3021fdb0 	addik	r1, r1, -592
2003b8fc:	f9e10000 	swi	r15, r1, 0
2003b900:	fa61024c 	swi	r19, r1, 588
2003b904:	12610000 	addk	r19, r1, r0
	
		// Compute aligned port indexes
		i32 index_aligned_IN = index_IN % SIZE_IN;
2003b908:	b0002006 	imm	8198
2003b90c:	e8602f88 	lwi	r3, r0, 12168	// 20062f88 <index_IN>
2003b910:	a46301ff 	andi	r3, r3, 511
2003b914:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_SIGNED = index_SIGNED % SIZE_SIGNED;
2003b918:	b0002006 	imm	8198
2003b91c:	e8602f90 	lwi	r3, r0, 12176	// 20062f90 <index_SIGNED>
2003b920:	a46301ff 	andi	r3, r3, 511
2003b924:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_OUT = index_OUT % SIZE_OUT;
2003b928:	b0002006 	imm	8198
2003b92c:	e8602f98 	lwi	r3, r0, 12184	// 20062f98 <index_OUT>
2003b930:	a46301ff 	andi	r3, r3, 511
2003b934:	f8730028 	swi	r3, r19, 40
		i32 tmp_block10;
		i32 tmp_clip;
		i32 tmp_block11;
		i32 tmp_clip0;
	
		s = tokens_SIGNED[(index_SIGNED + (0)) % SIZE_SIGNED];
2003b938:	b0002004 	imm	8196
2003b93c:	e8608ebc 	lwi	r3, r0, -28996	// 20048ebc <decoder_texture_idct2d_SIGNED>
2003b940:	e8830004 	lwi	r4, r3, 4
2003b944:	b0002006 	imm	8198
2003b948:	e8602f90 	lwi	r3, r0, 12176	// 20062f90 <index_SIGNED>
2003b94c:	a46301ff 	andi	r3, r3, 511
2003b950:	64630402 	bslli	r3, r3, 2
2003b954:	10641800 	addk	r3, r4, r3
2003b958:	e8630000 	lwi	r3, r3, 0
2003b95c:	f873002c 	swi	r3, r19, 44
		n = 0;
2003b960:	f813001c 	swi	r0, r19, 28
		while (n <= 63) {
2003b964:	b8000080 	bri	128		// 2003b9e4
			tmp_scale = scale[n];
2003b968:	e873001c 	lwi	r3, r19, 28
2003b96c:	64630402 	bslli	r3, r3, 2
2003b970:	b0002004 	imm	8196
2003b974:	3063557c 	addik	r3, r3, 21884
2003b978:	e8630000 	lwi	r3, r3, 0
2003b97c:	f8730030 	swi	r3, r19, 48
			tmp_IN = tokens_IN[(index_IN + (n)) % SIZE_IN];
2003b980:	b0002004 	imm	8196
2003b984:	e8608e7c 	lwi	r3, r0, -29060	// 20048e7c <decoder_texture_idct2d_IN>
2003b988:	e8830004 	lwi	r4, r3, 4
2003b98c:	b0002006 	imm	8198
2003b990:	e8a02f88 	lwi	r5, r0, 12168	// 20062f88 <index_IN>
2003b994:	e873001c 	lwi	r3, r19, 28
2003b998:	10651800 	addk	r3, r5, r3
2003b99c:	a46301ff 	andi	r3, r3, 511
2003b9a0:	10631800 	addk	r3, r3, r3
2003b9a4:	10641800 	addk	r3, r4, r3
2003b9a8:	e4630000 	lhui	r3, r3, 0
2003b9ac:	f4730034 	shi	r3, r19, 52
			block1[n] = tmp_scale * tmp_IN;
2003b9b0:	e4730034 	lhui	r3, r19, 52
2003b9b4:	90830061 	sext16	r4, r3
2003b9b8:	e8730030 	lwi	r3, r19, 48
2003b9bc:	40841800 	mul	r4, r4, r3
2003b9c0:	e873001c 	lwi	r3, r19, 28
2003b9c4:	64630402 	bslli	r3, r3, 2
2003b9c8:	30b3001c 	addik	r5, r19, 28
2003b9cc:	10651800 	addk	r3, r5, r3
2003b9d0:	30630030 	addik	r3, r3, 48
2003b9d4:	f8830000 	swi	r4, r3, 0
			n = n + 1;
2003b9d8:	e873001c 	lwi	r3, r19, 28
2003b9dc:	30630001 	addik	r3, r3, 1
2003b9e0:	f873001c 	swi	r3, r19, 28
		i32 tmp_block11;
		i32 tmp_clip0;
	
		s = tokens_SIGNED[(index_SIGNED + (0)) % SIZE_SIGNED];
		n = 0;
		while (n <= 63) {
2003b9e4:	e893001c 	lwi	r4, r19, 28
2003b9e8:	3060003f 	addik	r3, r0, 63
2003b9ec:	16441801 	cmp	r18, r4, r3
2003b9f0:	bcb2ff78 	bgei	r18, -136		// 2003b968
			tmp_scale = scale[n];
			tmp_IN = tokens_IN[(index_IN + (n)) % SIZE_IN];
			block1[n] = tmp_scale * tmp_IN;
			n = n + 1;
		}
		tmp_block1 = block1[0];
2003b9f4:	e873004c 	lwi	r3, r19, 76
2003b9f8:	f8730038 	swi	r3, r19, 56
		block1[0] = tmp_block1 + (1 << 12);
2003b9fc:	e8730038 	lwi	r3, r19, 56
2003ba00:	30631000 	addik	r3, r3, 4096
2003ba04:	f873004c 	swi	r3, r19, 76
		idct1d(block1, block2);
2003ba08:	3093004c 	addik	r4, r19, 76
2003ba0c:	3073014c 	addik	r3, r19, 332
2003ba10:	10a40000 	addk	r5, r4, r0
2003ba14:	10c30000 	addk	r6, r3, r0
2003ba18:	b9f4fa88 	brlid	r15, -1400	// 2003b4a0 <idct1d>
2003ba1c:	80000000 	or	r0, r0, r0
		idct1d(block2, block1);
2003ba20:	3093014c 	addik	r4, r19, 332
2003ba24:	3073004c 	addik	r3, r19, 76
2003ba28:	10a40000 	addk	r5, r4, r0
2003ba2c:	10c30000 	addk	r6, r3, r0
2003ba30:	b9f4fa70 	brlid	r15, -1424	// 2003b4a0 <idct1d>
2003ba34:	80000000 	or	r0, r0, r0
		if (s) {
2003ba38:	e873002c 	lwi	r3, r19, 44
2003ba3c:	bc030098 	beqi	r3, 152		// 2003bad4
			n = 0;
2003ba40:	f813001c 	swi	r0, r19, 28
			while (n <= 63) {
2003ba44:	b800007c 	bri	124		// 2003bac0
				tmp_block10 = block1[n];
2003ba48:	e873001c 	lwi	r3, r19, 28
2003ba4c:	64630402 	bslli	r3, r3, 2
2003ba50:	3093001c 	addik	r4, r19, 28
2003ba54:	10641800 	addk	r3, r4, r3
2003ba58:	30630030 	addik	r3, r3, 48
2003ba5c:	e8630000 	lwi	r3, r3, 0
2003ba60:	f873003c 	swi	r3, r19, 60
				tmp_clip = clip(tmp_block10 >> 13, -255);
2003ba64:	e873003c 	lwi	r3, r19, 60
2003ba68:	6463020d 	bsrai	r3, r3, 13
2003ba6c:	10a30000 	addk	r5, r3, r0
2003ba70:	30c0ff01 	addik	r6, r0, -255
2003ba74:	b9f4f9c0 	brlid	r15, -1600	// 2003b434 <clip>
2003ba78:	80000000 	or	r0, r0, r0
2003ba7c:	f8730040 	swi	r3, r19, 64
				tokens_OUT[(index_OUT + (n)) % SIZE_OUT] = tmp_clip;
2003ba80:	b0002004 	imm	8196
2003ba84:	e8608e80 	lwi	r3, r0, -29056	// 20048e80 <decoder_texture_idct2d_OUT>
2003ba88:	e8830004 	lwi	r4, r3, 4
2003ba8c:	b0002006 	imm	8198
2003ba90:	e8a02f98 	lwi	r5, r0, 12184	// 20062f98 <index_OUT>
2003ba94:	e873001c 	lwi	r3, r19, 28
2003ba98:	10651800 	addk	r3, r5, r3
2003ba9c:	a46301ff 	andi	r3, r3, 511
2003baa0:	10631800 	addk	r3, r3, r3
2003baa4:	10641800 	addk	r3, r4, r3
2003baa8:	e8930040 	lwi	r4, r19, 64
2003baac:	90840061 	sext16	r4, r4
2003bab0:	f4830000 	shi	r4, r3, 0
				n = n + 1;
2003bab4:	e873001c 	lwi	r3, r19, 28
2003bab8:	30630001 	addik	r3, r3, 1
2003babc:	f873001c 	swi	r3, r19, 28
		block1[0] = tmp_block1 + (1 << 12);
		idct1d(block1, block2);
		idct1d(block2, block1);
		if (s) {
			n = 0;
			while (n <= 63) {
2003bac0:	e893001c 	lwi	r4, r19, 28
2003bac4:	3060003f 	addik	r3, r0, 63
2003bac8:	16441801 	cmp	r18, r4, r3
2003bacc:	bcb2ff7c 	bgei	r18, -132		// 2003ba48
2003bad0:	b8000094 	bri	148		// 2003bb64
				tmp_clip = clip(tmp_block10 >> 13, -255);
				tokens_OUT[(index_OUT + (n)) % SIZE_OUT] = tmp_clip;
				n = n + 1;
			}
		} else {
			n = 0;
2003bad4:	f813001c 	swi	r0, r19, 28
			while (n <= 63) {
2003bad8:	b800007c 	bri	124		// 2003bb54
				tmp_block11 = block1[n];
2003badc:	e873001c 	lwi	r3, r19, 28
2003bae0:	64630402 	bslli	r3, r3, 2
2003bae4:	3093001c 	addik	r4, r19, 28
2003bae8:	10641800 	addk	r3, r4, r3
2003baec:	30630030 	addik	r3, r3, 48
2003baf0:	e8630000 	lwi	r3, r3, 0
2003baf4:	f8730044 	swi	r3, r19, 68
				tmp_clip0 = clip(tmp_block11 >> 13, 0);
2003baf8:	e8730044 	lwi	r3, r19, 68
2003bafc:	6463020d 	bsrai	r3, r3, 13
2003bb00:	10a30000 	addk	r5, r3, r0
2003bb04:	10c00000 	addk	r6, r0, r0
2003bb08:	b9f4f92c 	brlid	r15, -1748	// 2003b434 <clip>
2003bb0c:	80000000 	or	r0, r0, r0
2003bb10:	f8730048 	swi	r3, r19, 72
				tokens_OUT[(index_OUT + (n)) % SIZE_OUT] = tmp_clip0;
2003bb14:	b0002004 	imm	8196
2003bb18:	e8608e80 	lwi	r3, r0, -29056	// 20048e80 <decoder_texture_idct2d_OUT>
2003bb1c:	e8830004 	lwi	r4, r3, 4
2003bb20:	b0002006 	imm	8198
2003bb24:	e8a02f98 	lwi	r5, r0, 12184	// 20062f98 <index_OUT>
2003bb28:	e873001c 	lwi	r3, r19, 28
2003bb2c:	10651800 	addk	r3, r5, r3
2003bb30:	a46301ff 	andi	r3, r3, 511
2003bb34:	10631800 	addk	r3, r3, r3
2003bb38:	10641800 	addk	r3, r4, r3
2003bb3c:	e8930048 	lwi	r4, r19, 72
2003bb40:	90840061 	sext16	r4, r4
2003bb44:	f4830000 	shi	r4, r3, 0
				n = n + 1;
2003bb48:	e873001c 	lwi	r3, r19, 28
2003bb4c:	30630001 	addik	r3, r3, 1
2003bb50:	f873001c 	swi	r3, r19, 28
				tokens_OUT[(index_OUT + (n)) % SIZE_OUT] = tmp_clip;
				n = n + 1;
			}
		} else {
			n = 0;
			while (n <= 63) {
2003bb54:	e893001c 	lwi	r4, r19, 28
2003bb58:	3060003f 	addik	r3, r0, 63
2003bb5c:	16441801 	cmp	r18, r4, r3
2003bb60:	bcb2ff7c 	bgei	r18, -132		// 2003badc
				n = n + 1;
			}
		}
	
		// Update ports indexes
		index_IN += 64;
2003bb64:	b0002006 	imm	8198
2003bb68:	e8602f88 	lwi	r3, r0, 12168	// 20062f88 <index_IN>
2003bb6c:	30630040 	addik	r3, r3, 64
2003bb70:	b0002006 	imm	8198
2003bb74:	f8602f88 	swi	r3, r0, 12168	// 20062f88 <index_IN>
		index_SIGNED += 1;
2003bb78:	b0002006 	imm	8198
2003bb7c:	e8602f90 	lwi	r3, r0, 12176	// 20062f90 <index_SIGNED>
2003bb80:	30630001 	addik	r3, r3, 1
2003bb84:	b0002006 	imm	8198
2003bb88:	f8602f90 	swi	r3, r0, 12176	// 20062f90 <index_SIGNED>
		index_OUT += 64;
2003bb8c:	b0002006 	imm	8198
2003bb90:	e8602f98 	lwi	r3, r0, 12184	// 20062f98 <index_OUT>
2003bb94:	30630040 	addik	r3, r3, 64
2003bb98:	b0002006 	imm	8198
2003bb9c:	f8602f98 	swi	r3, r0, 12184	// 20062f98 <index_OUT>
		
		read_end_IN();
2003bba0:	b9f4f54c 	brlid	r15, -2740	// 2003b0ec <read_end_IN>
2003bba4:	80000000 	or	r0, r0, r0
		read_end_SIGNED();
2003bba8:	b9f4f5ec 	brlid	r15, -2580	// 2003b194 <read_end_SIGNED>
2003bbac:	80000000 	or	r0, r0, r0
		write_end_OUT();
2003bbb0:	b9f4f68c 	brlid	r15, -2420	// 2003b23c <write_end_OUT>
2003bbb4:	80000000 	or	r0, r0, r0
	}
2003bbb8:	e9e10000 	lwi	r15, r1, 0
2003bbbc:	10330000 	addk	r1, r19, r0
2003bbc0:	ea61024c 	lwi	r19, r1, 588
2003bbc4:	30210250 	addik	r1, r1, 592
2003bbc8:	b60f0008 	rtsd	r15, 8
2003bbcc:	80000000 	or	r0, r0, r0

2003bbd0 <decoder_texture_idct2d_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_texture_idct2d_initialize() {
2003bbd0:	3021fff4 	addik	r1, r1, -12
2003bbd4:	fa610008 	swi	r19, r1, 8
2003bbd8:	12610000 	addk	r19, r1, r0
		int i = 0;
2003bbdc:	f8130004 	swi	r0, r19, 4
		
	finished:
		// no read_end/write_end here!
		return;
2003bbe0:	80000000 	or	r0, r0, r0
	}
2003bbe4:	10330000 	addk	r1, r19, r0
2003bbe8:	ea610008 	lwi	r19, r1, 8
2003bbec:	3021000c 	addik	r1, r1, 12
2003bbf0:	b60f0008 	rtsd	r15, 8
2003bbf4:	80000000 	or	r0, r0, r0

2003bbf8 <decoder_texture_idct2d_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	int decoder_texture_idct2d_scheduler() {
2003bbf8:	3021ffd8 	addik	r1, r1, -40
2003bbfc:	f9e10000 	swi	r15, r1, 0
2003bc00:	fa610024 	swi	r19, r1, 36
2003bc04:	12610000 	addk	r19, r1, r0
		int i = 0;
2003bc08:	f813001c 	swi	r0, r19, 28
		if(needInit){
2003bc0c:	b0002004 	imm	8196
2003bc10:	e0608ef4 	lbui	r3, r0, -28940	// 20048ef4 <needInit>
2003bc14:	bc030014 	beqi	r3, 20		// 2003bc28
			decoder_texture_idct2d_initialize();
2003bc18:	b9f4ffb8 	brlid	r15, -72	// 2003bbd0 <decoder_texture_idct2d_initialize>
2003bc1c:	80000000 	or	r0, r0, r0
			needInit = 0;
2003bc20:	b0002004 	imm	8196
2003bc24:	f0008ef4 	sbi	r0, r0, -28940	// 20048ef4 <needInit>
		}
		read_IN();
2003bc28:	b9f4f454 	brlid	r15, -2988	// 2003b07c <read_IN>
2003bc2c:	80000000 	or	r0, r0, r0
		read_SIGNED();
2003bc30:	b9f4f4f4 	brlid	r15, -2828	// 2003b124 <read_SIGNED>
2003bc34:	80000000 	or	r0, r0, r0
		write_OUT();
2003bc38:	b9f4f594 	brlid	r15, -2668	// 2003b1cc <write_OUT>
2003bc3c:	80000000 	or	r0, r0, r0
		
	
	
		while (1) {
			// Action loop
			if (numTokens_IN - index_IN >= 64 && numTokens_SIGNED - index_SIGNED >= 1 && isSchedulable_untagged_0()) {
2003bc40:	b0002006 	imm	8198
2003bc44:	e8802f8c 	lwi	r4, r0, 12172	// 20062f8c <numTokens_IN>
2003bc48:	b0002006 	imm	8198
2003bc4c:	e8602f88 	lwi	r3, r0, 12168	// 20062f88 <index_IN>
2003bc50:	14832000 	rsubk	r4, r3, r4
2003bc54:	3060003f 	addik	r3, r0, 63
2003bc58:	16441803 	cmpu	r18, r4, r3
2003bc5c:	bcb20084 	bgei	r18, 132		// 2003bce0
2003bc60:	b0002006 	imm	8198
2003bc64:	e8802f94 	lwi	r4, r0, 12180	// 20062f94 <numTokens_SIGNED>
2003bc68:	b0002006 	imm	8198
2003bc6c:	e8602f90 	lwi	r3, r0, 12176	// 20062f90 <index_SIGNED>
2003bc70:	88641800 	xor	r3, r4, r3
2003bc74:	bc03006c 	beqi	r3, 108		// 2003bce0
2003bc78:	b9f4fc54 	brlid	r15, -940	// 2003b8cc <isSchedulable_untagged_0>
2003bc7c:	80000000 	or	r0, r0, r0
2003bc80:	bc030060 	beqi	r3, 96		// 2003bce0
				int stop = 0;
2003bc84:	f8130020 	swi	r0, r19, 32
				if (64 > SIZE_OUT - index_OUT + decoder_texture_idct2d_OUT->read_inds[0]) {
2003bc88:	b0002004 	imm	8196
2003bc8c:	e8608e80 	lwi	r3, r0, -29056	// 20048e80 <decoder_texture_idct2d_OUT>
2003bc90:	e863000c 	lwi	r3, r3, 12
2003bc94:	e8830000 	lwi	r4, r3, 0
2003bc98:	b0002006 	imm	8198
2003bc9c:	e8602f98 	lwi	r3, r0, 12184	// 20062f98 <index_OUT>
2003bca0:	14632000 	rsubk	r3, r3, r4
2003bca4:	30830200 	addik	r4, r3, 512
2003bca8:	3060003f 	addik	r3, r0, 63
2003bcac:	16441803 	cmpu	r18, r4, r3
2003bcb0:	bc52000c 	blti	r18, 12		// 2003bcbc
					stop = 1;
2003bcb4:	30600001 	addik	r3, r0, 1
2003bcb8:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
2003bcbc:	e8730020 	lwi	r3, r19, 32
2003bcc0:	bc030008 	beqi	r3, 8		// 2003bcc8
					goto finished;
2003bcc4:	b800001c 	bri	28		// 2003bce0
				}
				untagged_0();
2003bcc8:	b9f4fc30 	brlid	r15, -976	// 2003b8f8 <untagged_0>
2003bccc:	80000000 	or	r0, r0, r0
				i++;
2003bcd0:	e873001c 	lwi	r3, r19, 28
2003bcd4:	30630001 	addik	r3, r3, 1
2003bcd8:	f873001c 	swi	r3, r19, 28
			} else {
				goto finished;
			}
		}
2003bcdc:	b800ff64 	bri	-156		// 2003bc40
		
	finished:
	
		read_end_IN();
2003bce0:	b9f4f40c 	brlid	r15, -3060	// 2003b0ec <read_end_IN>
2003bce4:	80000000 	or	r0, r0, r0
		read_end_SIGNED();
2003bce8:	b9f4f4ac 	brlid	r15, -2900	// 2003b194 <read_end_SIGNED>
2003bcec:	80000000 	or	r0, r0, r0
		write_end_OUT();
2003bcf0:	b9f4f54c 	brlid	r15, -2740	// 2003b23c <write_end_OUT>
2003bcf4:	80000000 	or	r0, r0, r0
		
		
		return i;
2003bcf8:	e873001c 	lwi	r3, r19, 28
	}
2003bcfc:	e9e10000 	lwi	r15, r1, 0
2003bd00:	10330000 	addk	r1, r19, r0
2003bd04:	ea610024 	lwi	r19, r1, 36
2003bd08:	30210028 	addik	r1, r1, 40
2003bd0c:	b60f0008 	rtsd	r15, 8
2003bd10:	80000000 	or	r0, r0, r0
2003bd14:	00000055 		r0, r0, r0
2003bd18:	00000056 		r0, r0, r0
2003bd1c:	00000059 		r0, r0, r0
2003bd20:	00646d63 		r3, r4, r13
2003bd24:	626d6f63 	muli	r19, r13, 28515
2003bd28:	00656e69 		r3, r5, r13
2003bd2c:	69746f6d 		r11, r20, r13
2003bd30:	00006e6f 		r0, r0, r13
2003bd34:	70696b73 		r3, r9, r13
2003bd38:	00000068 		r0, r0, r0
2003bd3c:	70696b73 		r3, r9, r13
2003bd40:	00000077 		r0, r0, r0
2003bd44:	74786574 		r3, r24, r12
2003bd48:	00657275 		r3, r5, r14
2003bd4c:	2000d3e4 	addi	r0, r0, -11292
2003bd50:	2000d544 	addi	r0, r0, -10940
2003bd54:	2000d644 	addi	r0, r0, -10684
2003bd58:	2000d724 	addi	r0, r0, -10460
2003bd5c:	2000d790 	addi	r0, r0, -10352
2003bd60:	2000d7fc 	addi	r0, r0, -10244
2003bd64:	00646d63 		r3, r4, r13
2003bd68:	5f746567 		r27, r20, r12
2003bd6c:	00685f77 		r3, r8, r11
2003bd70:	64616572 	bslli	r3, r1, 18
2003bd74:	0062665f 		r3, r2, r12
2003bd78:	64616572 	bslli	r3, r1, 18
2003bd7c:	00766d5f 		r3, r22, r13
2003bd80:	006e7572 		r3, r14, r14
2003bd84:	72617473 		r19, r1, r14
2003bd88:	00000074 		r0, r0, r0
2003bd8c:	61766461 	muli	r11, r22, 25697
2003bd90:	0065636e 		r3, r5, r12
2003bd94:	706d6f63 		r3, r13, r13
2003bd98:	00657475 		r3, r5, r14
2003bd9c:	705f6f64 		r2, r31, r13
2003bda0:	5f646572 		r27, r4, r12
2003bda4:	00000078 		r0, r0, r0
2003bda8:	705f6f64 		r2, r31, r13
2003bdac:	5f646572 		r27, r4, r12
2003bdb0:	00000079 		r0, r0, r0
2003bdb4:	5f746567 		r27, r20, r12
2003bdb8:	5f67616d 		r27, r7, r12
2003bdbc:	00000078 		r0, r0, r0
2003bdc0:	5f746567 		r27, r20, r12
2003bdc4:	5f67616d 		r27, r7, r12
2003bdc8:	00000079 		r0, r0, r0
2003bdcc:	5f746567 		r27, r20, r12
2003bdd0:	64657270 	bsrai	r3, r5, 16
2003bdd4:	0000705f 		r0, r0, r14
2003bdd8:	5f746567 		r27, r20, r12
2003bddc:	64657270 	bsrai	r3, r5, 16
2003bde0:	0031705f 		r1, r17, r14
2003bde4:	5f746567 		r27, r20, r12
2003bde8:	64657270 	bsrai	r3, r5, 16
2003bdec:	0000785f 		r0, r0, r15
2003bdf0:	5f746567 		r27, r20, r12
2003bdf4:	64657270 	bsrai	r3, r5, 16
2003bdf8:	0031785f 		r1, r17, r15
2003bdfc:	5f746567 		r27, r20, r12
2003be00:	64657270 	bsrai	r3, r5, 16
2003be04:	0032785f 		r1, r18, r15
2003be08:	5f746567 		r27, r20, r12
2003be0c:	64657270 	bsrai	r3, r5, 16
2003be10:	0000795f 		r0, r0, r15
2003be14:	5f746567 		r27, r20, r12
2003be18:	64657270 	bsrai	r3, r5, 16
2003be1c:	0031795f 		r1, r17, r15
2003be20:	5f746567 		r27, r20, r12
2003be24:	64657270 	bsrai	r3, r5, 16
2003be28:	0032795f 		r1, r18, r15
2003be2c:	5f746567 		r27, r20, r12
2003be30:	5f736572 		r27, r19, r12
2003be34:	00000078 		r0, r0, r0
2003be38:	5f746567 		r27, r20, r12
2003be3c:	5f736572 		r27, r19, r12
2003be40:	00615f78 		r3, r1, r11
2003be44:	5f746567 		r27, r20, r12
2003be48:	5f736572 		r27, r19, r12
2003be4c:	00625f78 		r3, r2, r11
2003be50:	5f746567 		r27, r20, r12
2003be54:	5f736572 		r27, r19, r12
2003be58:	00635f78 		r3, r3, r11
2003be5c:	5f746567 		r27, r20, r12
2003be60:	5f736572 		r27, r19, r12
2003be64:	00645f78 		r3, r4, r11
2003be68:	5f746567 		r27, r20, r12
2003be6c:	5f736572 		r27, r19, r12
2003be70:	00655f78 		r3, r5, r11
2003be74:	5f746567 		r27, r20, r12
2003be78:	5f736572 		r27, r19, r12
2003be7c:	00000079 		r0, r0, r0
2003be80:	5f746567 		r27, r20, r12
2003be84:	5f736572 		r27, r19, r12
2003be88:	00615f79 		r3, r1, r11
2003be8c:	5f746567 		r27, r20, r12
2003be90:	5f736572 		r27, r19, r12
2003be94:	00625f79 		r3, r2, r11
2003be98:	5f746567 		r27, r20, r12
2003be9c:	5f736572 		r27, r19, r12
2003bea0:	00635f79 		r3, r3, r11
2003bea4:	5f746567 		r27, r20, r12
2003bea8:	5f736572 		r27, r19, r12
2003beac:	00645f79 		r3, r4, r11
2003beb0:	5f746567 		r27, r20, r12
2003beb4:	5f736572 		r27, r19, r12
2003beb8:	00655f79 		r3, r5, r11
2003bebc:	68746567 		r3, r20, r12
2003bec0:	
2003bf78 <vldTables_mcbpc_intra_table>:
2003bf78:	061400ff 06340624 04040404 04040404     ....$.4.........
2003bf88:	03130313 03130313 03130313 03130313     ................
2003bf98:	03230323 03230323 03230323 03230323     #.#.#.#.#.#.#.#.
2003bfa8:	03330333 03330333 03330333 03330333     3.3.3.3.3.3.3.3.
2003bfb8:	01030103 01030103 01030103 01030103     ................
2003bfc8:	01030103 01030103 01030103 01030103     ................
2003bfd8:	01030103 01030103 01030103 01030103     ................
2003bfe8:	01030103 01030103 01030103 01030103     ................

2003bff8 <vldTables_mcbpc_inter_table>:
2003bff8:	0000ffff 000900ff 00090034 00090024     ........4...$...
2003c008:	00090014 00090031 00080023 00080023     ....1...#...#...
2003c018:	00080013 00080013 00080032 00080032     ........2...2...
2003c028:	00070033 00070033 00070033 00070033     3...3...3...3...
2003c038:	00070022 00070022 00070022 00070022     "..."..."..."...
2003c048:	00070012 00070012 00070012 00070012     ................
2003c058:	00070021 00070021 00070021 00070021     !...!...!...!...
2003c068:	00070011 00070011 00070011 00070011     ................
2003c078:	00060004 00060004 00060004 00060004     ................
2003c088:	00060004 00060004 00060004 00060004     ................
2003c098:	00060030 00060030 00060030 00060030     0...0...0...0...
2003c0a8:	00060030 00060030 00060030 00060030     0...0...0...0...
2003c0b8:	00050003 00050003 00050003 00050003     ................
2003c0c8:	00050003 00050003 00050003 00050003     ................
2003c0d8:	00050003 00050003 00050003 00050003     ................
2003c0e8:	00050003 00050003 00050003 00050003     ................
2003c0f8:	00040020 00040020 00040020 00040020      ... ... ... ...
2003c108:	00040020 00040020 00040020 00040020      ... ... ... ...
2003c118:	00040020 00040020 00040020 00040020      ... ... ... ...
2003c128:	00040020 00040020 00040020 00040020      ... ... ... ...
2003c138:	00040020 00040020 00040020 00040020      ... ... ... ...
2003c148:	00040020 00040020 00040020 00040020      ... ... ... ...
2003c158:	00040020 00040020 00040020 00040020      ... ... ... ...
2003c168:	00040020 00040020 00040020 00040020      ... ... ... ...
2003c178:	00040010 00040010 00040010 00040010     ................
2003c188:	00040010 00040010 00040010 00040010     ................
2003c198:	00040010 00040010 00040010 00040010     ................
2003c1a8:	00040010 00040010 00040010 00040010     ................
2003c1b8:	00040010 00040010 00040010 00040010     ................
2003c1c8:	00040010 00040010 00040010 00040010     ................
2003c1d8:	00040010 00040010 00040010 00040010     ................
2003c1e8:	00040010 00040010 00040010 00040010     ................
2003c1f8:	00030002 00030002 00030002 00030002     ................
2003c208:	00030002 00030002 00030002 00030002     ................
2003c218:	00030002 00030002 00030002 00030002     ................
2003c228:	00030002 00030002 00030002 00030002     ................
2003c238:	00030002 00030002 00030002 00030002     ................
2003c248:	00030002 00030002 00030002 00030002     ................
2003c258:	00030002 00030002 00030002 00030002     ................
2003c268:	00030002 00030002 00030002 00030002     ................
2003c278:	00030002 00030002 00030002 00030002     ................
2003c288:	00030002 00030002 00030002 00030002     ................
2003c298:	00030002 00030002 00030002 00030002     ................
2003c2a8:	00030002 00030002 00030002 00030002     ................
2003c2b8:	00030002 00030002 00030002 00030002     ................
2003c2c8:	00030002 00030002 00030002 00030002     ................
2003c2d8:	00030002 00030002 00030002 00030002     ................
2003c2e8:	00030002 00030002 00030002 00030002     ................
2003c2f8:	00030001 00030001 00030001 00030001     ................
2003c308:	00030001 00030001 00030001 00030001     ................
2003c318:	00030001 00030001 00030001 00030001     ................
2003c328:	00030001 00030001 00030001 00030001     ................
2003c338:	00030001 00030001 00030001 00030001     ................
2003c348:	00030001 00030001 00030001 00030001     ................
2003c358:	00030001 00030001 00030001 00030001     ................
2003c368:	00030001 00030001 00030001 00030001     ................
2003c378:	00030001 00030001 00030001 00030001     ................
2003c388:	00030001 00030001 00030001 00030001     ................
2003c398:	00030001 00030001 00030001 00030001     ................
2003c3a8:	00030001 00030001 00030001 00030001     ................
2003c3b8:	00030001 00030001 00030001 00030001     ................
2003c3c8:	00030001 00030001 00030001 00030001     ................
2003c3d8:	00030001 00030001 00030001 00030001     ................
2003c3e8:	00030001 00030001 00030001 00030001     ................
2003c3f8:	00010000                                ....

2003c3fc <vldTables_cbpy_table>:
2003c3fc:	00ff00ff 06090606 05080508 05040504     ................
2003c40c:	05020502 05010501 04000400 04000400     ................
2003c41c:	040c040c 040c040c 040a040a 040a040a     ................
2003c42c:	040e040e 040e040e 04050405 04050405     ................
2003c43c:	040d040d 040d040d 04030403 04030403     ................
2003c44c:	040b040b 040b040b 04070407 04070407     ................
2003c45c:	020f020f 020f020f 020f020f 020f020f     ................
2003c46c:	020f020f 020f020f 020f020f 020f020f     ................

2003c47c <vldTables_dc_lum_tab>:
2003c47c:	03040000 03000303 02020202 02010201     ................

2003c48c <vldTables_DCT3D>:
	...
2003c4ac:	0201010b 0201010b 0300010b 0300010b     ................
2003c4bc:	0b00000b 0b00000b 0a00000b 0a00000b     ................
2003c4cc:	011c010a 011c010a 011c010a 011c010a     ................
2003c4dc:	011b010a 011b010a 011b010a 011b010a     ................
2003c4ec:	011a010a 011a010a 011a010a 011a010a     ................
2003c4fc:	0119010a 0119010a 0119010a 0119010a     ................
2003c50c:	0209000a 0209000a 0209000a 0209000a     ................
2003c51c:	0208000a 0208000a 0208000a 0208000a     ................
2003c52c:	0207000a 0207000a 0207000a 0207000a     ................
2003c53c:	0206000a 0206000a 0206000a 0206000a     ................
2003c54c:	0205000a 0205000a 0205000a 0205000a     ................
2003c55c:	0303000a 0303000a 0303000a 0303000a     ................
2003c56c:	0302000a 0302000a 0302000a 0302000a     ................
2003c57c:	0401000a 0401000a 0401000a 0401000a     ................
2003c58c:	0c00000b 0c00000b 0501000b 0501000b     ................
2003c59c:	0117000b 0117000b 0118000b 0118000b     ................
2003c5ac:	011d010b 011d010b 011e010b 011e010b     ................
2003c5bc:	011f010b 011f010b 0120010b 0120010b     .......... ... .
2003c5cc:	0601000c 0402000c 0304000c 0305000c     ................
2003c5dc:	0306000c 020a000c 0119000c 011a000c     ................
2003c5ec:	0121010c 0122010c 0123010c 0124010c     ..!..."...#...$.
2003c5fc:	0125010c 0126010c 0127010c 0128010c     ..%...&...'...(.
	...
2003c68c:	0900000a 0900000a 0900000a 0900000a     ................
2003c69c:	0800000a 0800000a 0800000a 0800000a     ................
2003c6ac:	01180109 01180109 01180109 01180109     ................
2003c6bc:	01180109 01180109 01180109 01180109     ................
2003c6cc:	01170109 01170109 01170109 01170109     ................
2003c6dc:	01170109 01170109 01170109 01170109     ................
2003c6ec:	01160109 01160109 01160109 01160109     ................
2003c6fc:	01160109 01160109 01160109 01160109     ................
2003c70c:	01150109 01150109 01150109 01150109     ................
2003c71c:	01150109 01150109 01150109 01150109     ................
2003c72c:	01140109 01140109 01140109 01140109     ................
2003c73c:	01140109 01140109 01140109 01140109     ................
2003c74c:	01130109 01130109 01130109 01130109     ................
2003c75c:	01130109 01130109 01130109 01130109     ................
2003c76c:	01120109 01120109 01120109 01120109     ................
2003c77c:	01120109 01120109 01120109 01120109     ................
2003c78c:	01110109 01110109 01110109 01110109     ................
2003c79c:	01110109 01110109 01110109 01110109     ................
2003c7ac:	02000109 02000109 02000109 02000109     ................
2003c7bc:	02000109 02000109 02000109 02000109     ................
2003c7cc:	01160009 01160009 01160009 01160009     ................
2003c7dc:	01160009 01160009 01160009 01160009     ................
2003c7ec:	01150009 01150009 01150009 01150009     ................
2003c7fc:	01150009 01150009 01150009 01150009     ................
2003c80c:	01140009 01140009 01140009 01140009     ................
2003c81c:	01140009 01140009 01140009 01140009     ................
2003c82c:	01130009 01130009 01130009 01130009     ................
2003c83c:	01130009 01130009 01130009 01130009     ................
2003c84c:	01120009 01120009 01120009 01120009     ................
2003c85c:	01120009 01120009 01120009 01120009     ................
2003c86c:	01110009 01110009 01110009 01110009     ................
2003c87c:	01110009 01110009 01110009 01110009     ................
2003c88c:	01100009 01100009 01100009 01100009     ................
2003c89c:	01100009 01100009 01100009 01100009     ................
2003c8ac:	010f0009 010f0009 010f0009 010f0009     ................
2003c8bc:	010f0009 010f0009 010f0009 010f0009     ................
2003c8cc:	02040009 02040009 02040009 02040009     ................
2003c8dc:	02040009 02040009 02040009 02040009     ................
2003c8ec:	02030009 02030009 02030009 02030009     ................
2003c8fc:	02030009 02030009 02030009 02030009     ................
2003c90c:	07000009 07000009 07000009 07000009     ................
2003c91c:	07000009 07000009 07000009 07000009     ................
2003c92c:	06000009 06000009 06000009 06000009     ................
2003c93c:	06000009 06000009 06000009 06000009     ................
2003c94c:	01100108 01100108 01100108 01100108     ................
2003c95c:	01100108 01100108 01100108 01100108     ................
2003c96c:	01100108 01100108 01100108 01100108     ................
2003c97c:	01100108 01100108 01100108 01100108     ................
2003c98c:	010f0108 010f0108 010f0108 010f0108     ................
2003c99c:	010f0108 010f0108 010f0108 010f0108     ................
2003c9ac:	010f0108 010f0108 010f0108 010f0108     ................
2003c9bc:	010f0108 010f0108 010f0108 010f0108     ................
2003c9cc:	010e0108 010e0108 010e0108 010e0108     ................
2003c9dc:	010e0108 010e0108 010e0108 010e0108     ................
2003c9ec:	010e0108 010e0108 010e0108 010e0108     ................
2003c9fc:	010e0108 010e0108 010e0108 010e0108     ................
2003ca0c:	010d0108 010d0108 010d0108 010d0108     ................
2003ca1c:	010d0108 010d0108 010d0108 010d0108     ................
2003ca2c:	010d0108 010d0108 010d0108 010d0108     ................
2003ca3c:	010d0108 010d0108 010d0108 010d0108     ................
2003ca4c:	010c0108 010c0108 010c0108 010c0108     ................
2003ca5c:	010c0108 010c0108 010c0108 010c0108     ................
2003ca6c:	010c0108 010c0108 010c0108 010c0108     ................
2003ca7c:	010c0108 010c0108 010c0108 010c0108     ................
2003ca8c:	010b0108 010b0108 010b0108 010b0108     ................
2003ca9c:	010b0108 010b0108 010b0108 010b0108     ................
2003caac:	010b0108 010b0108 010b0108 010b0108     ................
2003cabc:	010b0108 010b0108 010b0108 010b0108     ................
2003cacc:	010a0108 010a0108 010a0108 010a0108     ................
2003cadc:	010a0108 010a0108 010a0108 010a0108     ................
2003caec:	010a0108 010a0108 010a0108 010a0108     ................
2003cafc:	010a0108 010a0108 010a0108 010a0108     ................
2003cb0c:	01090108 01090108 01090108 01090108     ................
2003cb1c:	01090108 01090108 01090108 01090108     ................
2003cb2c:	01090108 01090108 01090108 01090108     ................
2003cb3c:	01090108 01090108 01090108 01090108     ................
2003cb4c:	010e0008 010e0008 010e0008 010e0008     ................
2003cb5c:	010e0008 010e0008 010e0008 010e0008     ................
2003cb6c:	010e0008 010e0008 010e0008 010e0008     ................
2003cb7c:	010e0008 010e0008 010e0008 010e0008     ................
2003cb8c:	010d0008 010d0008 010d0008 010d0008     ................
2003cb9c:	010d0008 010d0008 010d0008 010d0008     ................
2003cbac:	010d0008 010d0008 010d0008 010d0008     ................
2003cbbc:	010d0008 010d0008 010d0008 010d0008     ................
2003cbcc:	02020008 02020008 02020008 02020008     ................
2003cbdc:	02020008 02020008 02020008 02020008     ................
2003cbec:	02020008 02020008 02020008 02020008     ................
2003cbfc:	02020008 02020008 02020008 02020008     ................
2003cc0c:	03010008 03010008 03010008 03010008     ................
2003cc1c:	03010008 03010008 03010008 03010008     ................
2003cc2c:	03010008 03010008 03010008 03010008     ................
2003cc3c:	03010008 03010008 03010008 03010008     ................
2003cc4c:	05000008 05000008 05000008 05000008     ................
2003cc5c:	05000008 05000008 05000008 05000008     ................
2003cc6c:	05000008 05000008 05000008 05000008     ................
2003cc7c:	05000008 05000008 05000008 05000008     ................
2003cc8c:	01080107 01080107 01080107 01080107     ................
2003cc9c:	01080107 01080107 01080107 01080107     ................
2003ccac:	01080107 01080107 01080107 01080107     ................
2003ccbc:	01080107 01080107 01080107 01080107     ................
2003cccc:	01080107 01080107 01080107 01080107     ................
2003ccdc:	01080107 01080107 01080107 01080107     ................
2003ccec:	01080107 01080107 01080107 01080107     ................
2003ccfc:	01080107 01080107 01080107 01080107     ................
2003cd0c:	01070107 01070107 01070107 01070107     ................
2003cd1c:	01070107 01070107 01070107 01070107     ................
2003cd2c:	01070107 01070107 01070107 01070107     ................
2003cd3c:	01070107 01070107 01070107 01070107     ................
2003cd4c:	01070107 01070107 01070107 01070107     ................
2003cd5c:	01070107 01070107 01070107 01070107     ................
2003cd6c:	01070107 01070107 01070107 01070107     ................
2003cd7c:	01070107 01070107 01070107 01070107     ................
2003cd8c:	01060107 01060107 01060107 01060107     ................
2003cd9c:	01060107 01060107 01060107 01060107     ................
2003cdac:	01060107 01060107 01060107 01060107     ................
2003cdbc:	01060107 01060107 01060107 01060107     ................
2003cdcc:	01060107 01060107 01060107 01060107     ................
2003cddc:	01060107 01060107 01060107 01060107     ................
2003cdec:	01060107 01060107 01060107 01060107     ................
2003cdfc:	01060107 01060107 01060107 01060107     ................
2003ce0c:	01050107 01050107 01050107 01050107     ................
2003ce1c:	01050107 01050107 01050107 01050107     ................
2003ce2c:	01050107 01050107 01050107 01050107     ................
2003ce3c:	01050107 01050107 01050107 01050107     ................
2003ce4c:	01050107 01050107 01050107 01050107     ................
2003ce5c:	01050107 01050107 01050107 01050107     ................
2003ce6c:	01050107 01050107 01050107 01050107     ................
2003ce7c:	01050107 01050107 01050107 01050107     ................
2003ce8c:	010c0007 010c0007 010c0007 010c0007     ................
2003ce9c:	010c0007 010c0007 010c0007 010c0007     ................
2003ceac:	010c0007 010c0007 010c0007 010c0007     ................
2003cebc:	010c0007 010c0007 010c0007 010c0007     ................
2003cecc:	010c0007 010c0007 010c0007 010c0007     ................
2003cedc:	010c0007 010c0007 010c0007 010c0007     ................
2003ceec:	010c0007 010c0007 010c0007 010c0007     ................
2003cefc:	010c0007 010c0007 010c0007 010c0007     ................
2003cf0c:	010b0007 010b0007 010b0007 010b0007     ................
2003cf1c:	010b0007 010b0007 010b0007 010b0007     ................
2003cf2c:	010b0007 010b0007 010b0007 010b0007     ................
2003cf3c:	010b0007 010b0007 010b0007 010b0007     ................
2003cf4c:	010b0007 010b0007 010b0007 010b0007     ................
2003cf5c:	010b0007 010b0007 010b0007 010b0007     ................
2003cf6c:	010b0007 010b0007 010b0007 010b0007     ................
2003cf7c:	010b0007 010b0007 010b0007 010b0007     ................
2003cf8c:	010a0007 010a0007 010a0007 010a0007     ................
2003cf9c:	010a0007 010a0007 010a0007 010a0007     ................
2003cfac:	010a0007 010a0007 010a0007 010a0007     ................
2003cfbc:	010a0007 010a0007 010a0007 010a0007     ................
2003cfcc:	010a0007 010a0007 010a0007 010a0007     ................
2003cfdc:	010a0007 010a0007 010a0007 010a0007     ................
2003cfec:	010a0007 010a0007 010a0007 010a0007     ................
2003cffc:	010a0007 010a0007 010a0007 010a0007     ................
2003d00c:	04000007 04000007 04000007 04000007     ................
2003d01c:	04000007 04000007 04000007 04000007     ................
2003d02c:	04000007 04000007 04000007 04000007     ................
2003d03c:	04000007 04000007 04000007 04000007     ................
2003d04c:	04000007 04000007 04000007 04000007     ................
2003d05c:	04000007 04000007 04000007 04000007     ................
2003d06c:	04000007 04000007 04000007 04000007     ................
2003d07c:	04000007 04000007 04000007 04000007     ................
2003d08c:	01040106 01040106 01040106 01040106     ................
2003d09c:	01040106 01040106 01040106 01040106     ................
2003d0ac:	01040106 01040106 01040106 01040106     ................
2003d0bc:	01040106 01040106 01040106 01040106     ................
2003d0cc:	01040106 01040106 01040106 01040106     ................
2003d0dc:	01040106 01040106 01040106 01040106     ................
2003d0ec:	01040106 01040106 01040106 01040106     ................
2003d0fc:	01040106 01040106 01040106 01040106     ................
2003d10c:	01040106 01040106 01040106 01040106     ................
2003d11c:	01040106 01040106 01040106 01040106     ................
2003d12c:	01040106 01040106 01040106 01040106     ................
2003d13c:	01040106 01040106 01040106 01040106     ................
2003d14c:	01040106 01040106 01040106 01040106     ................
2003d15c:	01040106 01040106 01040106 01040106     ................
2003d16c:	01040106 01040106 01040106 01040106     ................
2003d17c:	01040106 01040106 01040106 01040106     ................
2003d18c:	01030106 01030106 01030106 01030106     ................
2003d19c:	01030106 01030106 01030106 01030106     ................
2003d1ac:	01030106 01030106 01030106 01030106     ................
2003d1bc:	01030106 01030106 01030106 01030106     ................
2003d1cc:	01030106 01030106 01030106 01030106     ................
2003d1dc:	01030106 01030106 01030106 01030106     ................
2003d1ec:	01030106 01030106 01030106 01030106     ................
2003d1fc:	01030106 01030106 01030106 01030106     ................
2003d20c:	01030106 01030106 01030106 01030106     ................
2003d21c:	01030106 01030106 01030106 01030106     ................
2003d22c:	01030106 01030106 01030106 01030106     ................
2003d23c:	01030106 01030106 01030106 01030106     ................
2003d24c:	01030106 01030106 01030106 01030106     ................
2003d25c:	01030106 01030106 01030106 01030106     ................
2003d26c:	01030106 01030106 01030106 01030106     ................
2003d27c:	01030106 01030106 01030106 01030106     ................
2003d28c:	01020106 01020106 01020106 01020106     ................
2003d29c:	01020106 01020106 01020106 01020106     ................
2003d2ac:	01020106 01020106 01020106 01020106     ................
2003d2bc:	01020106 01020106 01020106 01020106     ................
2003d2cc:	01020106 01020106 01020106 01020106     ................
2003d2dc:	01020106 01020106 01020106 01020106     ................
2003d2ec:	01020106 01020106 01020106 01020106     ................
2003d2fc:	01020106 01020106 01020106 01020106     ................
2003d30c:	01020106 01020106 01020106 01020106     ................
2003d31c:	01020106 01020106 01020106 01020106     ................
2003d32c:	01020106 01020106 01020106 01020106     ................
2003d33c:	01020106 01020106 01020106 01020106     ................
2003d34c:	01020106 01020106 01020106 01020106     ................
2003d35c:	01020106 01020106 01020106 01020106     ................
2003d36c:	01020106 01020106 01020106 01020106     ................
2003d37c:	01020106 01020106 01020106 01020106     ................
2003d38c:	01010106 01010106 01010106 01010106     ................
2003d39c:	01010106 01010106 01010106 01010106     ................
2003d3ac:	01010106 01010106 01010106 01010106     ................
2003d3bc:	01010106 01010106 01010106 01010106     ................
2003d3cc:	01010106 01010106 01010106 01010106     ................
2003d3dc:	01010106 01010106 01010106 01010106     ................
2003d3ec:	01010106 01010106 01010106 01010106     ................
2003d3fc:	01010106 01010106 01010106 01010106     ................
2003d40c:	01010106 01010106 01010106 01010106     ................
2003d41c:	01010106 01010106 01010106 01010106     ................
2003d42c:	01010106 01010106 01010106 01010106     ................
2003d43c:	01010106 01010106 01010106 01010106     ................
2003d44c:	01010106 01010106 01010106 01010106     ................
2003d45c:	01010106 01010106 01010106 01010106     ................
2003d46c:	01010106 01010106 01010106 01010106     ................
2003d47c:	01010106 01010106 01010106 01010106     ................
2003d48c:	01090006 01090006 01090006 01090006     ................
2003d49c:	01090006 01090006 01090006 01090006     ................
2003d4ac:	01090006 01090006 01090006 01090006     ................
2003d4bc:	01090006 01090006 01090006 01090006     ................
2003d4cc:	01090006 01090006 01090006 01090006     ................
2003d4dc:	01090006 01090006 01090006 01090006     ................
2003d4ec:	01090006 01090006 01090006 01090006     ................
2003d4fc:	01090006 01090006 01090006 01090006     ................
2003d50c:	01090006 01090006 01090006 01090006     ................
2003d51c:	01090006 01090006 01090006 01090006     ................
2003d52c:	01090006 01090006 01090006 01090006     ................
2003d53c:	01090006 01090006 01090006 01090006     ................
2003d54c:	01090006 01090006 01090006 01090006     ................
2003d55c:	01090006 01090006 01090006 01090006     ................
2003d56c:	01090006 01090006 01090006 01090006     ................
2003d57c:	01090006 01090006 01090006 01090006     ................
2003d58c:	01080006 01080006 01080006 01080006     ................
2003d59c:	01080006 01080006 01080006 01080006     ................
2003d5ac:	01080006 01080006 01080006 01080006     ................
2003d5bc:	01080006 01080006 01080006 01080006     ................
2003d5cc:	01080006 01080006 01080006 01080006     ................
2003d5dc:	01080006 01080006 01080006 01080006     ................
2003d5ec:	01080006 01080006 01080006 01080006     ................
2003d5fc:	01080006 01080006 01080006 01080006     ................
2003d60c:	01080006 01080006 01080006 01080006     ................
2003d61c:	01080006 01080006 01080006 01080006     ................
2003d62c:	01080006 01080006 01080006 01080006     ................
2003d63c:	01080006 01080006 01080006 01080006     ................
2003d64c:	01080006 01080006 01080006 01080006     ................
2003d65c:	01080006 01080006 01080006 01080006     ................
2003d66c:	01080006 01080006 01080006 01080006     ................
2003d67c:	01080006 01080006 01080006 01080006     ................
2003d68c:	01070006 01070006 01070006 01070006     ................
2003d69c:	01070006 01070006 01070006 01070006     ................
2003d6ac:	01070006 01070006 01070006 01070006     ................
2003d6bc:	01070006 01070006 01070006 01070006     ................
2003d6cc:	01070006 01070006 01070006 01070006     ................
2003d6dc:	01070006 01070006 01070006 01070006     ................
2003d6ec:	01070006 01070006 01070006 01070006     ................
2003d6fc:	01070006 01070006 01070006 01070006     ................
2003d70c:	01070006 01070006 01070006 01070006     ................
2003d71c:	01070006 01070006 01070006 01070006     ................
2003d72c:	01070006 01070006 01070006 01070006     ................
2003d73c:	01070006 01070006 01070006 01070006     ................
2003d74c:	01070006 01070006 01070006 01070006     ................
2003d75c:	01070006 01070006 01070006 01070006     ................
2003d76c:	01070006 01070006 01070006 01070006     ................
2003d77c:	01070006 01070006 01070006 01070006     ................
2003d78c:	01060006 01060006 01060006 01060006     ................
2003d79c:	01060006 01060006 01060006 01060006     ................
2003d7ac:	01060006 01060006 01060006 01060006     ................
2003d7bc:	01060006 01060006 01060006 01060006     ................
2003d7cc:	01060006 01060006 01060006 01060006     ................
2003d7dc:	01060006 01060006 01060006 01060006     ................
2003d7ec:	01060006 01060006 01060006 01060006     ................
2003d7fc:	01060006 01060006 01060006 01060006     ................
2003d80c:	01060006 01060006 01060006 01060006     ................
2003d81c:	01060006 01060006 01060006 01060006     ................
2003d82c:	01060006 01060006 01060006 01060006     ................
2003d83c:	01060006 01060006 01060006 01060006     ................
2003d84c:	01060006 01060006 01060006 01060006     ................
2003d85c:	01060006 01060006 01060006 01060006     ................
2003d86c:	01060006 01060006 01060006 01060006     ................
2003d87c:	01060006 01060006 01060006 01060006     ................
2003d88c:	02010006 02010006 02010006 02010006     ................
2003d89c:	02010006 02010006 02010006 02010006     ................
2003d8ac:	02010006 02010006 02010006 02010006     ................
2003d8bc:	02010006 02010006 02010006 02010006     ................
2003d8cc:	02010006 02010006 02010006 02010006     ................
2003d8dc:	02010006 02010006 02010006 02010006     ................
2003d8ec:	02010006 02010006 02010006 02010006     ................
2003d8fc:	02010006 02010006 02010006 02010006     ................
2003d90c:	02010006 02010006 02010006 02010006     ................
2003d91c:	02010006 02010006 02010006 02010006     ................
2003d92c:	02010006 02010006 02010006 02010006     ................
2003d93c:	02010006 02010006 02010006 02010006     ................
2003d94c:	02010006 02010006 02010006 02010006     ................
2003d95c:	02010006 02010006 02010006 02010006     ................
2003d96c:	02010006 02010006 02010006 02010006     ................
2003d97c:	02010006 02010006 02010006 02010006     ................
2003d98c:	03000006 03000006 03000006 03000006     ................
2003d99c:	03000006 03000006 03000006 03000006     ................
2003d9ac:	03000006 03000006 03000006 03000006     ................
2003d9bc:	03000006 03000006 03000006 03000006     ................
2003d9cc:	03000006 03000006 03000006 03000006     ................
2003d9dc:	03000006 03000006 03000006 03000006     ................
2003d9ec:	03000006 03000006 03000006 03000006     ................
2003d9fc:	03000006 03000006 03000006 03000006     ................
2003da0c:	03000006 03000006 03000006 03000006     ................
2003da1c:	03000006 03000006 03000006 03000006     ................
2003da2c:	03000006 03000006 03000006 03000006     ................
2003da3c:	03000006 03000006 03000006 03000006     ................
2003da4c:	03000006 03000006 03000006 03000006     ................
2003da5c:	03000006 03000006 03000006 03000006     ................
2003da6c:	03000006 03000006 03000006 03000006     ................
2003da7c:	03000006 03000006 03000006 03000006     ................
2003da8c:	01050005 01050005 01050005 01050005     ................
2003da9c:	01050005 01050005 01050005 01050005     ................
2003daac:	01050005 01050005 01050005 01050005     ................
2003dabc:	01050005 01050005 01050005 01050005     ................
2003dacc:	01050005 01050005 01050005 01050005     ................
2003dadc:	01050005 01050005 01050005 01050005     ................
2003daec:	01050005 01050005 01050005 01050005     ................
2003dafc:	01050005 01050005 01050005 01050005     ................
2003db0c:	01050005 01050005 01050005 01050005     ................
2003db1c:	01050005 01050005 01050005 01050005     ................
2003db2c:	01050005 01050005 01050005 01050005     ................
2003db3c:	01050005 01050005 01050005 01050005     ................
2003db4c:	01050005 01050005 01050005 01050005     ................
2003db5c:	01050005 01050005 01050005 01050005     ................
2003db6c:	01050005 01050005 01050005 01050005     ................
2003db7c:	01050005 01050005 01050005 01050005     ................
2003db8c:	01050005 01050005 01050005 01050005     ................
2003db9c:	01050005 01050005 01050005 01050005     ................
2003dbac:	01050005 01050005 01050005 01050005     ................
2003dbbc:	01050005 01050005 01050005 01050005     ................
2003dbcc:	01050005 01050005 01050005 01050005     ................
2003dbdc:	01050005 01050005 01050005 01050005     ................
2003dbec:	01050005 01050005 01050005 01050005     ................
2003dbfc:	01050005 01050005 01050005 01050005     ................
2003dc0c:	01050005 01050005 01050005 01050005     ................
2003dc1c:	01050005 01050005 01050005 01050005     ................
2003dc2c:	01050005 01050005 01050005 01050005     ................
2003dc3c:	01050005 01050005 01050005 01050005     ................
2003dc4c:	01050005 01050005 01050005 01050005     ................
2003dc5c:	01050005 01050005 01050005 01050005     ................
2003dc6c:	01050005 01050005 01050005 01050005     ................
2003dc7c:	01050005 01050005 01050005 01050005     ................
2003dc8c:	01040005 01040005 01040005 01040005     ................
2003dc9c:	01040005 01040005 01040005 01040005     ................
2003dcac:	01040005 01040005 01040005 01040005     ................
2003dcbc:	01040005 01040005 01040005 01040005     ................
2003dccc:	01040005 01040005 01040005 01040005     ................
2003dcdc:	01040005 01040005 01040005 01040005     ................
2003dcec:	01040005 01040005 01040005 01040005     ................
2003dcfc:	01040005 01040005 01040005 01040005     ................
2003dd0c:	01040005 01040005 01040005 01040005     ................
2003dd1c:	01040005 01040005 01040005 01040005     ................
2003dd2c:	01040005 01040005 01040005 01040005     ................
2003dd3c:	01040005 01040005 01040005 01040005     ................
2003dd4c:	01040005 01040005 01040005 01040005     ................
2003dd5c:	01040005 01040005 01040005 01040005     ................
2003dd6c:	01040005 01040005 01040005 01040005     ................
2003dd7c:	01040005 01040005 01040005 01040005     ................
2003dd8c:	01040005 01040005 01040005 01040005     ................
2003dd9c:	01040005 01040005 01040005 01040005     ................
2003ddac:	01040005 01040005 01040005 01040005     ................
2003ddbc:	01040005 01040005 01040005 01040005     ................
2003ddcc:	01040005 01040005 01040005 01040005     ................
2003dddc:	01040005 01040005 01040005 01040005     ................
2003ddec:	01040005 01040005 01040005 01040005     ................
2003ddfc:	01040005 01040005 01040005 01040005     ................
2003de0c:	01040005 01040005 01040005 01040005     ................
2003de1c:	01040005 01040005 01040005 01040005     ................
2003de2c:	01040005 01040005 01040005 01040005     ................
2003de3c:	01040005 01040005 01040005 01040005     ................
2003de4c:	01040005 01040005 01040005 01040005     ................
2003de5c:	01040005 01040005 01040005 01040005     ................
2003de6c:	01040005 01040005 01040005 01040005     ................
2003de7c:	01040005 01040005 01040005 01040005     ................
2003de8c:	01030005 01030005 01030005 01030005     ................
2003de9c:	01030005 01030005 01030005 01030005     ................
2003deac:	01030005 01030005 01030005 01030005     ................
2003debc:	01030005 01030005 01030005 01030005     ................
2003decc:	01030005 01030005 01030005 01030005     ................
2003dedc:	01030005 01030005 01030005 01030005     ................
2003deec:	01030005 01030005 01030005 01030005     ................
2003defc:	01030005 01030005 01030005 01030005     ................
2003df0c:	01030005 01030005 01030005 01030005     ................
2003df1c:	01030005 01030005 01030005 01030005     ................
2003df2c:	01030005 01030005 01030005 01030005     ................
2003df3c:	01030005 01030005 01030005 01030005     ................
2003df4c:	01030005 01030005 01030005 01030005     ................
2003df5c:	01030005 01030005 01030005 01030005     ................
2003df6c:	01030005 01030005 01030005 01030005     ................
2003df7c:	01030005 01030005 01030005 01030005     ................
2003df8c:	01030005 01030005 01030005 01030005     ................
2003df9c:	01030005 01030005 01030005 01030005     ................
2003dfac:	01030005 01030005 01030005 01030005     ................
2003dfbc:	01030005 01030005 01030005 01030005     ................
2003dfcc:	01030005 01030005 01030005 01030005     ................
2003dfdc:	01030005 01030005 01030005 01030005     ................
2003dfec:	01030005 01030005 01030005 01030005     ................
2003dffc:	01030005 01030005 01030005 01030005     ................
2003e00c:	01030005 01030005 01030005 01030005     ................
2003e01c:	01030005 01030005 01030005 01030005     ................
2003e02c:	01030005 01030005 01030005 01030005     ................
2003e03c:	01030005 01030005 01030005 01030005     ................
2003e04c:	01030005 01030005 01030005 01030005     ................
2003e05c:	01030005 01030005 01030005 01030005     ................
2003e06c:	01030005 01030005 01030005 01030005     ................
2003e07c:	01030005 01030005 01030005 01030005     ................
2003e08c:	01000104 01000104 01000104 01000104     ................
2003e09c:	01000104 01000104 01000104 01000104     ................
2003e0ac:	01000104 01000104 01000104 01000104     ................
2003e0bc:	01000104 01000104 01000104 01000104     ................
2003e0cc:	01000104 01000104 01000104 01000104     ................
2003e0dc:	01000104 01000104 01000104 01000104     ................
2003e0ec:	01000104 01000104 01000104 01000104     ................
2003e0fc:	01000104 01000104 01000104 01000104     ................
2003e10c:	01000104 01000104 01000104 01000104     ................
2003e11c:	01000104 01000104 01000104 01000104     ................
2003e12c:	01000104 01000104 01000104 01000104     ................
2003e13c:	01000104 01000104 01000104 01000104     ................
2003e14c:	01000104 01000104 01000104 01000104     ................
2003e15c:	01000104 01000104 01000104 01000104     ................
2003e16c:	01000104 01000104 01000104 01000104     ................
2003e17c:	01000104 01000104 01000104 01000104     ................
2003e18c:	01000104 01000104 01000104 01000104     ................
2003e19c:	01000104 01000104 01000104 01000104     ................
2003e1ac:	01000104 01000104 01000104 01000104     ................
2003e1bc:	01000104 01000104 01000104 01000104     ................
2003e1cc:	01000104 01000104 01000104 01000104     ................
2003e1dc:	01000104 01000104 01000104 01000104     ................
2003e1ec:	01000104 01000104 01000104 01000104     ................
2003e1fc:	01000104 01000104 01000104 01000104     ................
2003e20c:	01000104 01000104 01000104 01000104     ................
2003e21c:	01000104 01000104 01000104 01000104     ................
2003e22c:	01000104 01000104 01000104 01000104     ................
2003e23c:	01000104 01000104 01000104 01000104     ................
2003e24c:	01000104 01000104 01000104 01000104     ................
2003e25c:	01000104 01000104 01000104 01000104     ................
2003e26c:	01000104 01000104 01000104 01000104     ................
2003e27c:	01000104 01000104 01000104 01000104     ................
2003e28c:	01000104 01000104 01000104 01000104     ................
2003e29c:	01000104 01000104 01000104 01000104     ................
2003e2ac:	01000104 01000104 01000104 01000104     ................
2003e2bc:	01000104 01000104 01000104 01000104     ................
2003e2cc:	01000104 01000104 01000104 01000104     ................
2003e2dc:	01000104 01000104 01000104 01000104     ................
2003e2ec:	01000104 01000104 01000104 01000104     ................
2003e2fc:	01000104 01000104 01000104 01000104     ................
2003e30c:	01000104 01000104 01000104 01000104     ................
2003e31c:	01000104 01000104 01000104 01000104     ................
2003e32c:	01000104 01000104 01000104 01000104     ................
2003e33c:	01000104 01000104 01000104 01000104     ................
2003e34c:	01000104 01000104 01000104 01000104     ................
2003e35c:	01000104 01000104 01000104 01000104     ................
2003e36c:	01000104 01000104 01000104 01000104     ................
2003e37c:	01000104 01000104 01000104 01000104     ................
2003e38c:	01000104 01000104 01000104 01000104     ................
2003e39c:	01000104 01000104 01000104 01000104     ................
2003e3ac:	01000104 01000104 01000104 01000104     ................
2003e3bc:	01000104 01000104 01000104 01000104     ................
2003e3cc:	01000104 01000104 01000104 01000104     ................
2003e3dc:	01000104 01000104 01000104 01000104     ................
2003e3ec:	01000104 01000104 01000104 01000104     ................
2003e3fc:	01000104 01000104 01000104 01000104     ................
2003e40c:	01000104 01000104 01000104 01000104     ................
2003e41c:	01000104 01000104 01000104 01000104     ................
2003e42c:	01000104 01000104 01000104 01000104     ................
2003e43c:	01000104 01000104 01000104 01000104     ................
2003e44c:	01000104 01000104 01000104 01000104     ................
2003e45c:	01000104 01000104 01000104 01000104     ................
2003e46c:	01000104 01000104 01000104 01000104     ................
2003e47c:	01000104 01000104 01000104 01000104     ................
2003e48c:	01000002 01000002 01000002 01000002     ................
2003e49c:	01000002 01000002 01000002 01000002     ................
2003e4ac:	01000002 01000002 01000002 01000002     ................
2003e4bc:	01000002 01000002 01000002 01000002     ................
2003e4cc:	01000002 01000002 01000002 01000002     ................
2003e4dc:	01000002 01000002 01000002 01000002     ................
2003e4ec:	01000002 01000002 01000002 01000002     ................
2003e4fc:	01000002 01000002 01000002 01000002     ................
2003e50c:	01000002 01000002 01000002 01000002     ................
2003e51c:	01000002 01000002 01000002 01000002     ................
2003e52c:	01000002 01000002 01000002 01000002     ................
2003e53c:	01000002 01000002 01000002 01000002     ................
2003e54c:	01000002 01000002 01000002 01000002     ................
2003e55c:	01000002 01000002 01000002 01000002     ................
2003e56c:	01000002 01000002 01000002 01000002     ................
2003e57c:	01000002 01000002 01000002 01000002     ................
2003e58c:	01000002 01000002 01000002 01000002     ................
2003e59c:	01000002 01000002 01000002 01000002     ................
2003e5ac:	01000002 01000002 01000002 01000002     ................
2003e5bc:	01000002 01000002 01000002 01000002     ................
2003e5cc:	01000002 01000002 01000002 01000002     ................
2003e5dc:	01000002 01000002 01000002 01000002     ................
2003e5ec:	01000002 01000002 01000002 01000002     ................
2003e5fc:	01000002 01000002 01000002 01000002     ................
2003e60c:	01000002 01000002 01000002 01000002     ................
2003e61c:	01000002 01000002 01000002 01000002     ................
2003e62c:	01000002 01000002 01000002 01000002     ................
2003e63c:	01000002 01000002 01000002 01000002     ................
2003e64c:	01000002 01000002 01000002 01000002     ................
2003e65c:	01000002 01000002 01000002 01000002     ................
2003e66c:	01000002 01000002 01000002 01000002     ................
2003e67c:	01000002 01000002 01000002 01000002     ................
2003e68c:	01000002 01000002 01000002 01000002     ................
2003e69c:	01000002 01000002 01000002 01000002     ................
2003e6ac:	01000002 01000002 01000002 01000002     ................
2003e6bc:	01000002 01000002 01000002 01000002     ................
2003e6cc:	01000002 01000002 01000002 01000002     ................
2003e6dc:	01000002 01000002 01000002 01000002     ................
2003e6ec:	01000002 01000002 01000002 01000002     ................
2003e6fc:	01000002 01000002 01000002 01000002     ................
2003e70c:	01000002 01000002 01000002 01000002     ................
2003e71c:	01000002 01000002 01000002 01000002     ................
2003e72c:	01000002 01000002 01000002 01000002     ................
2003e73c:	01000002 01000002 01000002 01000002     ................
2003e74c:	01000002 01000002 01000002 01000002     ................
2003e75c:	01000002 01000002 01000002 01000002     ................
2003e76c:	01000002 01000002 01000002 01000002     ................
2003e77c:	01000002 01000002 01000002 01000002     ................
2003e78c:	01000002 01000002 01000002 01000002     ................
2003e79c:	01000002 01000002 01000002 01000002     ................
2003e7ac:	01000002 01000002 01000002 01000002     ................
2003e7bc:	01000002 01000002 01000002 01000002     ................
2003e7cc:	01000002 01000002 01000002 01000002     ................
2003e7dc:	01000002 01000002 01000002 01000002     ................
2003e7ec:	01000002 01000002 01000002 01000002     ................
2003e7fc:	01000002 01000002 01000002 01000002     ................
2003e80c:	01000002 01000002 01000002 01000002     ................
2003e81c:	01000002 01000002 01000002 01000002     ................
2003e82c:	01000002 01000002 01000002 01000002     ................
2003e83c:	01000002 01000002 01000002 01000002     ................
2003e84c:	01000002 01000002 01000002 01000002     ................
2003e85c:	01000002 01000002 01000002 01000002     ................
2003e86c:	01000002 01000002 01000002 01000002     ................
2003e87c:	01000002 01000002 01000002 01000002     ................
2003e88c:	01000002 01000002 01000002 01000002     ................
2003e89c:	01000002 01000002 01000002 01000002     ................
2003e8ac:	01000002 01000002 01000002 01000002     ................
2003e8bc:	01000002 01000002 01000002 01000002     ................
2003e8cc:	01000002 01000002 01000002 01000002     ................
2003e8dc:	01000002 01000002 01000002 01000002     ................
2003e8ec:	01000002 01000002 01000002 01000002     ................
2003e8fc:	01000002 01000002 01000002 01000002     ................
2003e90c:	01000002 01000002 01000002 01000002     ................
2003e91c:	01000002 01000002 01000002 01000002     ................
2003e92c:	01000002 01000002 01000002 01000002     ................
2003e93c:	01000002 01000002 01000002 01000002     ................
2003e94c:	01000002 01000002 01000002 01000002     ................
2003e95c:	01000002 01000002 01000002 01000002     ................
2003e96c:	01000002 01000002 01000002 01000002     ................
2003e97c:	01000002 01000002 01000002 01000002     ................
2003e98c:	01000002 01000002 01000002 01000002     ................
2003e99c:	01000002 01000002 01000002 01000002     ................
2003e9ac:	01000002 01000002 01000002 01000002     ................
2003e9bc:	01000002 01000002 01000002 01000002     ................
2003e9cc:	01000002 01000002 01000002 01000002     ................
2003e9dc:	01000002 01000002 01000002 01000002     ................
2003e9ec:	01000002 01000002 01000002 01000002     ................
2003e9fc:	01000002 01000002 01000002 01000002     ................
2003ea0c:	01000002 01000002 01000002 01000002     ................
2003ea1c:	01000002 01000002 01000002 01000002     ................
2003ea2c:	01000002 01000002 01000002 01000002     ................
2003ea3c:	01000002 01000002 01000002 01000002     ................
2003ea4c:	01000002 01000002 01000002 01000002     ................
2003ea5c:	01000002 01000002 01000002 01000002     ................
2003ea6c:	01000002 01000002 01000002 01000002     ................
2003ea7c:	01000002 01000002 01000002 01000002     ................
2003ea8c:	01000002 01000002 01000002 01000002     ................
2003ea9c:	01000002 01000002 01000002 01000002     ................
2003eaac:	01000002 01000002 01000002 01000002     ................
2003eabc:	01000002 01000002 01000002 01000002     ................
2003eacc:	01000002 01000002 01000002 01000002     ................
2003eadc:	01000002 01000002 01000002 01000002     ................
2003eaec:	01000002 01000002 01000002 01000002     ................
2003eafc:	01000002 01000002 01000002 01000002     ................
2003eb0c:	01000002 01000002 01000002 01000002     ................
2003eb1c:	01000002 01000002 01000002 01000002     ................
2003eb2c:	01000002 01000002 01000002 01000002     ................
2003eb3c:	01000002 01000002 01000002 01000002     ................
2003eb4c:	01000002 01000002 01000002 01000002     ................
2003eb5c:	01000002 01000002 01000002 01000002     ................
2003eb6c:	01000002 01000002 01000002 01000002     ................
2003eb7c:	01000002 01000002 01000002 01000002     ................
2003eb8c:	01000002 01000002 01000002 01000002     ................
2003eb9c:	01000002 01000002 01000002 01000002     ................
2003ebac:	01000002 01000002 01000002 01000002     ................
2003ebbc:	01000002 01000002 01000002 01000002     ................
2003ebcc:	01000002 01000002 01000002 01000002     ................
2003ebdc:	01000002 01000002 01000002 01000002     ................
2003ebec:	01000002 01000002 01000002 01000002     ................
2003ebfc:	01000002 01000002 01000002 01000002     ................
2003ec0c:	01000002 01000002 01000002 01000002     ................
2003ec1c:	01000002 01000002 01000002 01000002     ................
2003ec2c:	01000002 01000002 01000002 01000002     ................
2003ec3c:	01000002 01000002 01000002 01000002     ................
2003ec4c:	01000002 01000002 01000002 01000002     ................
2003ec5c:	01000002 01000002 01000002 01000002     ................
2003ec6c:	01000002 01000002 01000002 01000002     ................
2003ec7c:	01000002 01000002 01000002 01000002     ................
2003ec8c:	01000002 01000002 01000002 01000002     ................
2003ec9c:	01000002 01000002 01000002 01000002     ................
2003ecac:	01000002 01000002 01000002 01000002     ................
2003ecbc:	01000002 01000002 01000002 01000002     ................
2003eccc:	01000002 01000002 01000002 01000002     ................
2003ecdc:	01000002 01000002 01000002 01000002     ................
2003ecec:	01000002 01000002 01000002 01000002     ................
2003ecfc:	01000002 01000002 01000002 01000002     ................
2003ed0c:	01000002 01000002 01000002 01000002     ................
2003ed1c:	01000002 01000002 01000002 01000002     ................
2003ed2c:	01000002 01000002 01000002 01000002     ................
2003ed3c:	01000002 01000002 01000002 01000002     ................
2003ed4c:	01000002 01000002 01000002 01000002     ................
2003ed5c:	01000002 01000002 01000002 01000002     ................
2003ed6c:	01000002 01000002 01000002 01000002     ................
2003ed7c:	01000002 01000002 01000002 01000002     ................
2003ed8c:	01000002 01000002 01000002 01000002     ................
2003ed9c:	01000002 01000002 01000002 01000002     ................
2003edac:	01000002 01000002 01000002 01000002     ................
2003edbc:	01000002 01000002 01000002 01000002     ................
2003edcc:	01000002 01000002 01000002 01000002     ................
2003eddc:	01000002 01000002 01000002 01000002     ................
2003edec:	01000002 01000002 01000002 01000002     ................
2003edfc:	01000002 01000002 01000002 01000002     ................
2003ee0c:	01000002 01000002 01000002 01000002     ................
2003ee1c:	01000002 01000002 01000002 01000002     ................
2003ee2c:	01000002 01000002 01000002 01000002     ................
2003ee3c:	01000002 01000002 01000002 01000002     ................
2003ee4c:	01000002 01000002 01000002 01000002     ................
2003ee5c:	01000002 01000002 01000002 01000002     ................
2003ee6c:	01000002 01000002 01000002 01000002     ................
2003ee7c:	01000002 01000002 01000002 01000002     ................
2003ee8c:	01000002 01000002 01000002 01000002     ................
2003ee9c:	01000002 01000002 01000002 01000002     ................
2003eeac:	01000002 01000002 01000002 01000002     ................
2003eebc:	01000002 01000002 01000002 01000002     ................
2003eecc:	01000002 01000002 01000002 01000002     ................
2003eedc:	01000002 01000002 01000002 01000002     ................
2003eeec:	01000002 01000002 01000002 01000002     ................
2003eefc:	01000002 01000002 01000002 01000002     ................
2003ef0c:	01000002 01000002 01000002 01000002     ................
2003ef1c:	01000002 01000002 01000002 01000002     ................
2003ef2c:	01000002 01000002 01000002 01000002     ................
2003ef3c:	01000002 01000002 01000002 01000002     ................
2003ef4c:	01000002 01000002 01000002 01000002     ................
2003ef5c:	01000002 01000002 01000002 01000002     ................
2003ef6c:	01000002 01000002 01000002 01000002     ................
2003ef7c:	01000002 01000002 01000002 01000002     ................
2003ef8c:	01000002 01000002 01000002 01000002     ................
2003ef9c:	01000002 01000002 01000002 01000002     ................
2003efac:	01000002 01000002 01000002 01000002     ................
2003efbc:	01000002 01000002 01000002 01000002     ................
2003efcc:	01000002 01000002 01000002 01000002     ................
2003efdc:	01000002 01000002 01000002 01000002     ................
2003efec:	01000002 01000002 01000002 01000002     ................
2003effc:	01000002 01000002 01000002 01000002     ................
2003f00c:	01000002 01000002 01000002 01000002     ................
2003f01c:	01000002 01000002 01000002 01000002     ................
2003f02c:	01000002 01000002 01000002 01000002     ................
2003f03c:	01000002 01000002 01000002 01000002     ................
2003f04c:	01000002 01000002 01000002 01000002     ................
2003f05c:	01000002 01000002 01000002 01000002     ................
2003f06c:	01000002 01000002 01000002 01000002     ................
2003f07c:	01000002 01000002 01000002 01000002     ................
2003f08c:	01000002 01000002 01000002 01000002     ................
2003f09c:	01000002 01000002 01000002 01000002     ................
2003f0ac:	01000002 01000002 01000002 01000002     ................
2003f0bc:	01000002 01000002 01000002 01000002     ................
2003f0cc:	01000002 01000002 01000002 01000002     ................
2003f0dc:	01000002 01000002 01000002 01000002     ................
2003f0ec:	01000002 01000002 01000002 01000002     ................
2003f0fc:	01000002 01000002 01000002 01000002     ................
2003f10c:	01000002 01000002 01000002 01000002     ................
2003f11c:	01000002 01000002 01000002 01000002     ................
2003f12c:	01000002 01000002 01000002 01000002     ................
2003f13c:	01000002 01000002 01000002 01000002     ................
2003f14c:	01000002 01000002 01000002 01000002     ................
2003f15c:	01000002 01000002 01000002 01000002     ................
2003f16c:	01000002 01000002 01000002 01000002     ................
2003f17c:	01000002 01000002 01000002 01000002     ................
2003f18c:	01000002 01000002 01000002 01000002     ................
2003f19c:	01000002 01000002 01000002 01000002     ................
2003f1ac:	01000002 01000002 01000002 01000002     ................
2003f1bc:	01000002 01000002 01000002 01000002     ................
2003f1cc:	01000002 01000002 01000002 01000002     ................
2003f1dc:	01000002 01000002 01000002 01000002     ................
2003f1ec:	01000002 01000002 01000002 01000002     ................
2003f1fc:	01000002 01000002 01000002 01000002     ................
2003f20c:	01000002 01000002 01000002 01000002     ................
2003f21c:	01000002 01000002 01000002 01000002     ................
2003f22c:	01000002 01000002 01000002 01000002     ................
2003f23c:	01000002 01000002 01000002 01000002     ................
2003f24c:	01000002 01000002 01000002 01000002     ................
2003f25c:	01000002 01000002 01000002 01000002     ................
2003f26c:	01000002 01000002 01000002 01000002     ................
2003f27c:	01000002 01000002 01000002 01000002     ................
2003f28c:	01000002 01000002 01000002 01000002     ................
2003f29c:	01000002 01000002 01000002 01000002     ................
2003f2ac:	01000002 01000002 01000002 01000002     ................
2003f2bc:	01000002 01000002 01000002 01000002     ................
2003f2cc:	01000002 01000002 01000002 01000002     ................
2003f2dc:	01000002 01000002 01000002 01000002     ................
2003f2ec:	01000002 01000002 01000002 01000002     ................
2003f2fc:	01000002 01000002 01000002 01000002     ................
2003f30c:	01000002 01000002 01000002 01000002     ................
2003f31c:	01000002 01000002 01000002 01000002     ................
2003f32c:	01000002 01000002 01000002 01000002     ................
2003f33c:	01000002 01000002 01000002 01000002     ................
2003f34c:	01000002 01000002 01000002 01000002     ................
2003f35c:	01000002 01000002 01000002 01000002     ................
2003f36c:	01000002 01000002 01000002 01000002     ................
2003f37c:	01000002 01000002 01000002 01000002     ................
2003f38c:	01000002 01000002 01000002 01000002     ................
2003f39c:	01000002 01000002 01000002 01000002     ................
2003f3ac:	01000002 01000002 01000002 01000002     ................
2003f3bc:	01000002 01000002 01000002 01000002     ................
2003f3cc:	01000002 01000002 01000002 01000002     ................
2003f3dc:	01000002 01000002 01000002 01000002     ................
2003f3ec:	01000002 01000002 01000002 01000002     ................
2003f3fc:	01000002 01000002 01000002 01000002     ................
2003f40c:	01000002 01000002 01000002 01000002     ................
2003f41c:	01000002 01000002 01000002 01000002     ................
2003f42c:	01000002 01000002 01000002 01000002     ................
2003f43c:	01000002 01000002 01000002 01000002     ................
2003f44c:	01000002 01000002 01000002 01000002     ................
2003f45c:	01000002 01000002 01000002 01000002     ................
2003f46c:	01000002 01000002 01000002 01000002     ................
2003f47c:	01000002 01000002 01000002 01000002     ................
2003f48c:	01010003 01010003 01010003 01010003     ................
2003f49c:	01010003 01010003 01010003 01010003     ................
2003f4ac:	01010003 01010003 01010003 01010003     ................
2003f4bc:	01010003 01010003 01010003 01010003     ................
2003f4cc:	01010003 01010003 01010003 01010003     ................
2003f4dc:	01010003 01010003 01010003 01010003     ................
2003f4ec:	01010003 01010003 01010003 01010003     ................
2003f4fc:	01010003 01010003 01010003 01010003     ................
2003f50c:	01010003 01010003 01010003 01010003     ................
2003f51c:	01010003 01010003 01010003 01010003     ................
2003f52c:	01010003 01010003 01010003 01010003     ................
2003f53c:	01010003 01010003 01010003 01010003     ................
2003f54c:	01010003 01010003 01010003 01010003     ................
2003f55c:	01010003 01010003 01010003 01010003     ................
2003f56c:	01010003 01010003 01010003 01010003     ................
2003f57c:	01010003 01010003 01010003 01010003     ................
2003f58c:	01010003 01010003 01010003 01010003     ................
2003f59c:	01010003 01010003 01010003 01010003     ................
2003f5ac:	01010003 01010003 01010003 01010003     ................
2003f5bc:	01010003 01010003 01010003 01010003     ................
2003f5cc:	01010003 01010003 01010003 01010003     ................
2003f5dc:	01010003 01010003 01010003 01010003     ................
2003f5ec:	01010003 01010003 01010003 01010003     ................
2003f5fc:	01010003 01010003 01010003 01010003     ................
2003f60c:	01010003 01010003 01010003 01010003     ................
2003f61c:	01010003 01010003 01010003 01010003     ................
2003f62c:	01010003 01010003 01010003 01010003     ................
2003f63c:	01010003 01010003 01010003 01010003     ................
2003f64c:	01010003 01010003 01010003 01010003     ................
2003f65c:	01010003 01010003 01010003 01010003     ................
2003f66c:	01010003 01010003 01010003 01010003     ................
2003f67c:	01010003 01010003 01010003 01010003     ................
2003f68c:	01010003 01010003 01010003 01010003     ................
2003f69c:	01010003 01010003 01010003 01010003     ................
2003f6ac:	01010003 01010003 01010003 01010003     ................
2003f6bc:	01010003 01010003 01010003 01010003     ................
2003f6cc:	01010003 01010003 01010003 01010003     ................
2003f6dc:	01010003 01010003 01010003 01010003     ................
2003f6ec:	01010003 01010003 01010003 01010003     ................
2003f6fc:	01010003 01010003 01010003 01010003     ................
2003f70c:	01010003 01010003 01010003 01010003     ................
2003f71c:	01010003 01010003 01010003 01010003     ................
2003f72c:	01010003 01010003 01010003 01010003     ................
2003f73c:	01010003 01010003 01010003 01010003     ................
2003f74c:	01010003 01010003 01010003 01010003     ................
2003f75c:	01010003 01010003 01010003 01010003     ................
2003f76c:	01010003 01010003 01010003 01010003     ................
2003f77c:	01010003 01010003 01010003 01010003     ................
2003f78c:	01010003 01010003 01010003 01010003     ................
2003f79c:	01010003 01010003 01010003 01010003     ................
2003f7ac:	01010003 01010003 01010003 01010003     ................
2003f7bc:	01010003 01010003 01010003 01010003     ................
2003f7cc:	01010003 01010003 01010003 01010003     ................
2003f7dc:	01010003 01010003 01010003 01010003     ................
2003f7ec:	01010003 01010003 01010003 01010003     ................
2003f7fc:	01010003 01010003 01010003 01010003     ................
2003f80c:	01010003 01010003 01010003 01010003     ................
2003f81c:	01010003 01010003 01010003 01010003     ................
2003f82c:	01010003 01010003 01010003 01010003     ................
2003f83c:	01010003 01010003 01010003 01010003     ................
2003f84c:	01010003 01010003 01010003 01010003     ................
2003f85c:	01010003 01010003 01010003 01010003     ................
2003f86c:	01010003 01010003 01010003 01010003     ................
2003f87c:	01010003 01010003 01010003 01010003     ................
2003f88c:	01010003 01010003 01010003 01010003     ................
2003f89c:	01010003 01010003 01010003 01010003     ................
2003f8ac:	01010003 01010003 01010003 01010003     ................
2003f8bc:	01010003 01010003 01010003 01010003     ................
2003f8cc:	01010003 01010003 01010003 01010003     ................
2003f8dc:	01010003 01010003 01010003 01010003     ................
2003f8ec:	01010003 01010003 01010003 01010003     ................
2003f8fc:	01010003 01010003 01010003 01010003     ................
2003f90c:	01010003 01010003 01010003 01010003     ................
2003f91c:	01010003 01010003 01010003 01010003     ................
2003f92c:	01010003 01010003 01010003 01010003     ................
2003f93c:	01010003 01010003 01010003 01010003     ................
2003f94c:	01010003 01010003 01010003 01010003     ................
2003f95c:	01010003 01010003 01010003 01010003     ................
2003f96c:	01010003 01010003 01010003 01010003     ................
2003f97c:	01010003 01010003 01010003 01010003     ................
2003f98c:	01010003 01010003 01010003 01010003     ................
2003f99c:	01010003 01010003 01010003 01010003     ................
2003f9ac:	01010003 01010003 01010003 01010003     ................
2003f9bc:	01010003 01010003 01010003 01010003     ................
2003f9cc:	01010003 01010003 01010003 01010003     ................
2003f9dc:	01010003 01010003 01010003 01010003     ................
2003f9ec:	01010003 01010003 01010003 01010003     ................
2003f9fc:	01010003 01010003 01010003 01010003     ................
2003fa0c:	01010003 01010003 01010003 01010003     ................
2003fa1c:	01010003 01010003 01010003 01010003     ................
2003fa2c:	01010003 01010003 01010003 01010003     ................
2003fa3c:	01010003 01010003 01010003 01010003     ................
2003fa4c:	01010003 01010003 01010003 01010003     ................
2003fa5c:	01010003 01010003 01010003 01010003     ................
2003fa6c:	01010003 01010003 01010003 01010003     ................
2003fa7c:	01010003 01010003 01010003 01010003     ................
2003fa8c:	01010003 01010003 01010003 01010003     ................
2003fa9c:	01010003 01010003 01010003 01010003     ................
2003faac:	01010003 01010003 01010003 01010003     ................
2003fabc:	01010003 01010003 01010003 01010003     ................
2003facc:	01010003 01010003 01010003 01010003     ................
2003fadc:	01010003 01010003 01010003 01010003     ................
2003faec:	01010003 01010003 01010003 01010003     ................
2003fafc:	01010003 01010003 01010003 01010003     ................
2003fb0c:	01010003 01010003 01010003 01010003     ................
2003fb1c:	01010003 01010003 01010003 01010003     ................
2003fb2c:	01010003 01010003 01010003 01010003     ................
2003fb3c:	01010003 01010003 01010003 01010003     ................
2003fb4c:	01010003 01010003 01010003 01010003     ................
2003fb5c:	01010003 01010003 01010003 01010003     ................
2003fb6c:	01010003 01010003 01010003 01010003     ................
2003fb7c:	01010003 01010003 01010003 01010003     ................
2003fb8c:	01010003 01010003 01010003 01010003     ................
2003fb9c:	01010003 01010003 01010003 01010003     ................
2003fbac:	01010003 01010003 01010003 01010003     ................
2003fbbc:	01010003 01010003 01010003 01010003     ................
2003fbcc:	01010003 01010003 01010003 01010003     ................
2003fbdc:	01010003 01010003 01010003 01010003     ................
2003fbec:	01010003 01010003 01010003 01010003     ................
2003fbfc:	01010003 01010003 01010003 01010003     ................
2003fc0c:	01010003 01010003 01010003 01010003     ................
2003fc1c:	01010003 01010003 01010003 01010003     ................
2003fc2c:	01010003 01010003 01010003 01010003     ................
2003fc3c:	01010003 01010003 01010003 01010003     ................
2003fc4c:	01010003 01010003 01010003 01010003     ................
2003fc5c:	01010003 01010003 01010003 01010003     ................
2003fc6c:	01010003 01010003 01010003 01010003     ................
2003fc7c:	01010003 01010003 01010003 01010003     ................
2003fc8c:	01020004 01020004 01020004 01020004     ................
2003fc9c:	01020004 01020004 01020004 01020004     ................
2003fcac:	01020004 01020004 01020004 01020004     ................
2003fcbc:	01020004 01020004 01020004 01020004     ................
2003fccc:	01020004 01020004 01020004 01020004     ................
2003fcdc:	01020004 01020004 01020004 01020004     ................
2003fcec:	01020004 01020004 01020004 01020004     ................
2003fcfc:	01020004 01020004 01020004 01020004     ................
2003fd0c:	01020004 01020004 01020004 01020004     ................
2003fd1c:	01020004 01020004 01020004 01020004     ................
2003fd2c:	01020004 01020004 01020004 01020004     ................
2003fd3c:	01020004 01020004 01020004 01020004     ................
2003fd4c:	01020004 01020004 01020004 01020004     ................
2003fd5c:	01020004 01020004 01020004 01020004     ................
2003fd6c:	01020004 01020004 01020004 01020004     ................
2003fd7c:	01020004 01020004 01020004 01020004     ................
2003fd8c:	01020004 01020004 01020004 01020004     ................
2003fd9c:	01020004 01020004 01020004 01020004     ................
2003fdac:	01020004 01020004 01020004 01020004     ................
2003fdbc:	01020004 01020004 01020004 01020004     ................
2003fdcc:	01020004 01020004 01020004 01020004     ................
2003fddc:	01020004 01020004 01020004 01020004     ................
2003fdec:	01020004 01020004 01020004 01020004     ................
2003fdfc:	01020004 01020004 01020004 01020004     ................
2003fe0c:	01020004 01020004 01020004 01020004     ................
2003fe1c:	01020004 01020004 01020004 01020004     ................
2003fe2c:	01020004 01020004 01020004 01020004     ................
2003fe3c:	01020004 01020004 01020004 01020004     ................
2003fe4c:	01020004 01020004 01020004 01020004     ................
2003fe5c:	01020004 01020004 01020004 01020004     ................
2003fe6c:	01020004 01020004 01020004 01020004     ................
2003fe7c:	01020004 01020004 01020004 01020004     ................
2003fe8c:	01020004 01020004 01020004 01020004     ................
2003fe9c:	01020004 01020004 01020004 01020004     ................
2003feac:	01020004 01020004 01020004 01020004     ................
2003febc:	01020004 01020004 01020004 01020004     ................
2003fecc:	01020004 01020004 01020004 01020004     ................
2003fedc:	01020004 01020004 01020004 01020004     ................
2003feec:	01020004 01020004 01020004 01020004     ................
2003fefc:	01020004 01020004 01020004 01020004     ................
2003ff0c:	01020004 01020004 01020004 01020004     ................
2003ff1c:	01020004 01020004 01020004 01020004     ................
2003ff2c:	01020004 01020004 01020004 01020004     ................
2003ff3c:	01020004 01020004 01020004 01020004     ................
2003ff4c:	01020004 01020004 01020004 01020004     ................
2003ff5c:	01020004 01020004 01020004 01020004     ................
2003ff6c:	01020004 01020004 01020004 01020004     ................
2003ff7c:	01020004 01020004 01020004 01020004     ................
2003ff8c:	01020004 01020004 01020004 01020004     ................
2003ff9c:	01020004 01020004 01020004 01020004     ................
2003ffac:	01020004 01020004 01020004 01020004     ................
2003ffbc:	01020004 01020004 01020004 01020004     ................
2003ffcc:	01020004 01020004 01020004 01020004     ................
2003ffdc:	01020004 01020004 01020004 01020004     ................
2003ffec:	01020004 01020004 01020004 01020004     ................
2003fffc:	01020004 01020004 01020004 01020004     ................
2004000c:	01020004 01020004 01020004 01020004     ................
2004001c:	01020004 01020004 01020004 01020004     ................
2004002c:	01020004 01020004 01020004 01020004     ................
2004003c:	01020004 01020004 01020004 01020004     ................
2004004c:	01020004 01020004 01020004 01020004     ................
2004005c:	01020004 01020004 01020004 01020004     ................
2004006c:	01020004 01020004 01020004 01020004     ................
2004007c:	01020004 01020004 01020004 01020004     ................
2004008c:	02000004 02000004 02000004 02000004     ................
2004009c:	02000004 02000004 02000004 02000004     ................
200400ac:	02000004 02000004 02000004 02000004     ................
200400bc:	02000004 02000004 02000004 02000004     ................
200400cc:	02000004 02000004 02000004 02000004     ................
200400dc:	02000004 02000004 02000004 02000004     ................
200400ec:	02000004 02000004 02000004 02000004     ................
200400fc:	02000004 02000004 02000004 02000004     ................
2004010c:	02000004 02000004 02000004 02000004     ................
2004011c:	02000004 02000004 02000004 02000004     ................
2004012c:	02000004 02000004 02000004 02000004     ................
2004013c:	02000004 02000004 02000004 02000004     ................
2004014c:	02000004 02000004 02000004 02000004     ................
2004015c:	02000004 02000004 02000004 02000004     ................
2004016c:	02000004 02000004 02000004 02000004     ................
2004017c:	02000004 02000004 02000004 02000004     ................
2004018c:	02000004 02000004 02000004 02000004     ................
2004019c:	02000004 02000004 02000004 02000004     ................
200401ac:	02000004 02000004 02000004 02000004     ................
200401bc:	02000004 02000004 02000004 02000004     ................
200401cc:	02000004 02000004 02000004 02000004     ................
200401dc:	02000004 02000004 02000004 02000004     ................
200401ec:	02000004 02000004 02000004 02000004     ................
200401fc:	02000004 02000004 02000004 02000004     ................
2004020c:	02000004 02000004 02000004 02000004     ................
2004021c:	02000004 02000004 02000004 02000004     ................
2004022c:	02000004 02000004 02000004 02000004     ................
2004023c:	02000004 02000004 02000004 02000004     ................
2004024c:	02000004 02000004 02000004 02000004     ................
2004025c:	02000004 02000004 02000004 02000004     ................
2004026c:	02000004 02000004 02000004 02000004     ................
2004027c:	02000004 02000004 02000004 02000004     ................
2004028c:	02000004 02000004 02000004 02000004     ................
2004029c:	02000004 02000004 02000004 02000004     ................
200402ac:	02000004 02000004 02000004 02000004     ................
200402bc:	02000004 02000004 02000004 02000004     ................
200402cc:	02000004 02000004 02000004 02000004     ................
200402dc:	02000004 02000004 02000004 02000004     ................
200402ec:	02000004 02000004 02000004 02000004     ................
200402fc:	02000004 02000004 02000004 02000004     ................
2004030c:	02000004 02000004 02000004 02000004     ................
2004031c:	02000004 02000004 02000004 02000004     ................
2004032c:	02000004 02000004 02000004 02000004     ................
2004033c:	02000004 02000004 02000004 02000004     ................
2004034c:	02000004 02000004 02000004 02000004     ................
2004035c:	02000004 02000004 02000004 02000004     ................
2004036c:	02000004 02000004 02000004 02000004     ................
2004037c:	02000004 02000004 02000004 02000004     ................
2004038c:	02000004 02000004 02000004 02000004     ................
2004039c:	02000004 02000004 02000004 02000004     ................
200403ac:	02000004 02000004 02000004 02000004     ................
200403bc:	02000004 02000004 02000004 02000004     ................
200403cc:	02000004 02000004 02000004 02000004     ................
200403dc:	02000004 02000004 02000004 02000004     ................
200403ec:	02000004 02000004 02000004 02000004     ................
200403fc:	02000004 02000004 02000004 02000004     ................
2004040c:	02000004 02000004 02000004 02000004     ................
2004041c:	02000004 02000004 02000004 02000004     ................
2004042c:	02000004 02000004 02000004 02000004     ................
2004043c:	02000004 02000004 02000004 02000004     ................
2004044c:	02000004 02000004 02000004 02000004     ................
2004045c:	02000004 02000004 02000004 02000004     ................
2004046c:	02000004 02000004 02000004 02000004     ................
2004047c:	02000004 02000004 02000004 02000004     ................
	...
200404ac:	0700010b 0700010b 0600010b 0600010b     ................
200404bc:	1600000b 1600000b 1500000b 1500000b     ................
200404cc:	0202010a 0202010a 0202010a 0202010a     ................
200404dc:	0301010a 0301010a 0301010a 0301010a     ................
200404ec:	0500010a 0500010a 0500010a 0500010a     ................
200404fc:	010d000a 010d000a 010d000a 010d000a     ................
2004050c:	0305000a 0305000a 0305000a 0305000a     ................
2004051c:	0208000a 0208000a 0208000a 0208000a     ................
2004052c:	0304000a 0304000a 0304000a 0304000a     ................
2004053c:	0403000a 0403000a 0403000a 0403000a     ................
2004054c:	0402000a 0402000a 0402000a 0402000a     ................
2004055c:	0701000a 0701000a 0701000a 0701000a     ................
2004056c:	1400000a 1400000a 1400000a 1400000a     ................
2004057c:	1300000a 1300000a 1300000a 1300000a     ................
2004058c:	1700000b 1700000b 1800000b 1800000b     ................
2004059c:	0801000b 0801000b 0209000b 0209000b     ................
200405ac:	0203010b 0203010b 0204010b 0204010b     ................
200405bc:	010f010b 010f010b 0110010b 0110010b     ................
200405cc:	1900000c 1a00000c 1b00000c 0901000c     ................
200405dc:	0306000c 0a01000c 0502000c 0307000c     ................
200405ec:	010e000c 0800010c 0205010c 0206010c     ................
200405fc:	0111010c 0112010c 0113010c 0114010c     ................
	...
2004068c:	1200000a 1200000a 1200000a 1200000a     ................
2004069c:	1100000a 1100000a 1100000a 1100000a     ................
200406ac:	010e0109 010e0109 010e0109 010e0109     ................
200406bc:	010e0109 010e0109 010e0109 010e0109     ................
200406cc:	010d0109 010d0109 010d0109 010d0109     ................
200406dc:	010d0109 010d0109 010d0109 010d0109     ................
200406ec:	010c0109 010c0109 010c0109 010c0109     ................
200406fc:	010c0109 010c0109 010c0109 010c0109     ................
2004070c:	010b0109 010b0109 010b0109 010b0109     ................
2004071c:	010b0109 010b0109 010b0109 010b0109     ................
2004072c:	010a0109 010a0109 010a0109 010a0109     ................
2004073c:	010a0109 010a0109 010a0109 010a0109     ................
2004074c:	02010109 02010109 02010109 02010109     ................
2004075c:	02010109 02010109 02010109 02010109     ................
2004076c:	04000109 04000109 04000109 04000109     ................
2004077c:	04000109 04000109 04000109 04000109     ................
2004078c:	010c0009 010c0009 010c0009 010c0009     ................
2004079c:	010c0009 010c0009 010c0009 010c0009     ................
200407ac:	010b0009 010b0009 010b0009 010b0009     ................
200407bc:	010b0009 010b0009 010b0009 010b0009     ................
200407cc:	02070009 02070009 02070009 02070009     ................
200407dc:	02070009 02070009 02070009 02070009     ................
200407ec:	02060009 02060009 02060009 02060009     ................
200407fc:	02060009 02060009 02060009 02060009     ................
2004080c:	02050009 02050009 02050009 02050009     ................
2004081c:	02050009 02050009 02050009 02050009     ................
2004082c:	03030009 03030009 03030009 03030009     ................
2004083c:	03030009 03030009 03030009 03030009     ................
2004084c:	03020009 03020009 03020009 03020009     ................
2004085c:	03020009 03020009 03020009 03020009     ................
2004086c:	06010009 06010009 06010009 06010009     ................
2004087c:	06010009 06010009 06010009 06010009     ................
2004088c:	05010009 05010009 05010009 05010009     ................
2004089c:	05010009 05010009 05010009 05010009     ................
200408ac:	10000009 10000009 10000009 10000009     ................
200408bc:	10000009 10000009 10000009 10000009     ................
200408cc:	02040009 02040009 02040009 02040009     ................
200408dc:	02040009 02040009 02040009 02040009     ................
200408ec:	0f000009 0f000009 0f000009 0f000009     ................
200408fc:	0f000009 0f000009 0f000009 0f000009     ................
2004090c:	0e000009 0e000009 0e000009 0e000009     ................
2004091c:	0e000009 0e000009 0e000009 0e000009     ................
2004092c:	0d000009 0d000009 0d000009 0d000009     ................
2004093c:	0d000009 0d000009 0d000009 0d000009     ................
2004094c:	01080108 01080108 01080108 01080108     ................
2004095c:	01080108 01080108 01080108 01080108     ................
2004096c:	01080108 01080108 01080108 01080108     ................
2004097c:	01080108 01080108 01080108 01080108     ................
2004098c:	01070108 01070108 01070108 01070108     ................
2004099c:	01070108 01070108 01070108 01070108     ................
200409ac:	01070108 01070108 01070108 01070108     ................
200409bc:	01070108 01070108 01070108 01070108     ................
200409cc:	01060108 01060108 01060108 01060108     ................
200409dc:	01060108 01060108 01060108 01060108     ................
200409ec:	01060108 01060108 01060108 01060108     ................
200409fc:	01060108 01060108 01060108 01060108     ................
20040a0c:	03000108 03000108 03000108 03000108     ................
20040a1c:	03000108 03000108 03000108 03000108     ................
20040a2c:	03000108 03000108 03000108 03000108     ................
20040a3c:	03000108 03000108 03000108 03000108     ................
20040a4c:	010a0008 010a0008 010a0008 010a0008     ................
20040a5c:	010a0008 010a0008 010a0008 010a0008     ................
20040a6c:	010a0008 010a0008 010a0008 010a0008     ................
20040a7c:	010a0008 010a0008 010a0008 010a0008     ................
20040a8c:	01090008 01090008 01090008 01090008     ................
20040a9c:	01090008 01090008 01090008 01090008     ................
20040aac:	01090008 01090008 01090008 01090008     ................
20040abc:	01090008 01090008 01090008 01090008     ................
20040acc:	01080008 01080008 01080008 01080008     ................
20040adc:	01080008 01080008 01080008 01080008     ................
20040aec:	01080008 01080008 01080008 01080008     ................
20040afc:	01080008 01080008 01080008 01080008     ................
20040b0c:	01090108 01090108 01090108 01090108     ................
20040b1c:	01090108 01090108 01090108 01090108     ................
20040b2c:	01090108 01090108 01090108 01090108     ................
20040b3c:	01090108 01090108 01090108 01090108     ................
20040b4c:	02030008 02030008 02030008 02030008     ................
20040b5c:	02030008 02030008 02030008 02030008     ................
20040b6c:	02030008 02030008 02030008 02030008     ................
20040b7c:	02030008 02030008 02030008 02030008     ................
20040b8c:	04010008 04010008 04010008 04010008     ................
20040b9c:	04010008 04010008 04010008 04010008     ................
20040bac:	04010008 04010008 04010008 04010008     ................
20040bbc:	04010008 04010008 04010008 04010008     ................
20040bcc:	0c000008 0c000008 0c000008 0c000008     ................
20040bdc:	0c000008 0c000008 0c000008 0c000008     ................
20040bec:	0c000008 0c000008 0c000008 0c000008     ................
20040bfc:	0c000008 0c000008 0c000008 0c000008     ................
20040c0c:	0b000008 0b000008 0b000008 0b000008     ................
20040c1c:	0b000008 0b000008 0b000008 0b000008     ................
20040c2c:	0b000008 0b000008 0b000008 0b000008     ................
20040c3c:	0b000008 0b000008 0b000008 0b000008     ................
20040c4c:	0a000008 0a000008 0a000008 0a000008     ................
20040c5c:	0a000008 0a000008 0a000008 0a000008     ................
20040c6c:	0a000008 0a000008 0a000008 0a000008     ................
20040c7c:	0a000008 0a000008 0a000008 0a000008     ................
20040c8c:	01040107 01040107 01040107 01040107     ................
20040c9c:	01040107 01040107 01040107 01040107     ................
20040cac:	01040107 01040107 01040107 01040107     ................
20040cbc:	01040107 01040107 01040107 01040107     ................
20040ccc:	01040107 01040107 01040107 01040107     ................
20040cdc:	01040107 01040107 01040107 01040107     ................
20040cec:	01040107 01040107 01040107 01040107     ................
20040cfc:	01040107 01040107 01040107 01040107     ................
20040d0c:	01030107 01030107 01030107 01030107     ................
20040d1c:	01030107 01030107 01030107 01030107     ................
20040d2c:	01030107 01030107 01030107 01030107     ................
20040d3c:	01030107 01030107 01030107 01030107     ................
20040d4c:	01030107 01030107 01030107 01030107     ................
20040d5c:	01030107 01030107 01030107 01030107     ................
20040d6c:	01030107 01030107 01030107 01030107     ................
20040d7c:	01030107 01030107 01030107 01030107     ................
20040d8c:	01060007 01060007 01060007 01060007     ................
20040d9c:	01060007 01060007 01060007 01060007     ................
20040dac:	01060007 01060007 01060007 01060007     ................
20040dbc:	01060007 01060007 01060007 01060007     ................
20040dcc:	01060007 01060007 01060007 01060007     ................
20040ddc:	01060007 01060007 01060007 01060007     ................
20040dec:	01060007 01060007 01060007 01060007     ................
20040dfc:	01060007 01060007 01060007 01060007     ................
20040e0c:	01050107 01050107 01050107 01050107     ................
20040e1c:	01050107 01050107 01050107 01050107     ................
20040e2c:	01050107 01050107 01050107 01050107     ................
20040e3c:	01050107 01050107 01050107 01050107     ................
20040e4c:	01050107 01050107 01050107 01050107     ................
20040e5c:	01050107 01050107 01050107 01050107     ................
20040e6c:	01050107 01050107 01050107 01050107     ................
20040e7c:	01050107 01050107 01050107 01050107     ................
20040e8c:	01070007 01070007 01070007 01070007     ................
20040e9c:	01070007 01070007 01070007 01070007     ................
20040eac:	01070007 01070007 01070007 01070007     ................
20040ebc:	01070007 01070007 01070007 01070007     ................
20040ecc:	01070007 01070007 01070007 01070007     ................
20040edc:	01070007 01070007 01070007 01070007     ................
20040eec:	01070007 01070007 01070007 01070007     ................
20040efc:	01070007 01070007 01070007 01070007     ................
20040f0c:	02020007 02020007 02020007 02020007     ................
20040f1c:	02020007 02020007 02020007 02020007     ................
20040f2c:	02020007 02020007 02020007 02020007     ................
20040f3c:	02020007 02020007 02020007 02020007     ................
20040f4c:	02020007 02020007 02020007 02020007     ................
20040f5c:	02020007 02020007 02020007 02020007     ................
20040f6c:	02020007 02020007 02020007 02020007     ................
20040f7c:	02020007 02020007 02020007 02020007     ................
20040f8c:	03010007 03010007 03010007 03010007     ................
20040f9c:	03010007 03010007 03010007 03010007     ................
20040fac:	03010007 03010007 03010007 03010007     ................
20040fbc:	03010007 03010007 03010007 03010007     ................
20040fcc:	03010007 03010007 03010007 03010007     ................
20040fdc:	03010007 03010007 03010007 03010007     ................
20040fec:	03010007 03010007 03010007 03010007     ................
20040ffc:	03010007 03010007 03010007 03010007     ................
2004100c:	09000007 09000007 09000007 09000007     ................
2004101c:	09000007 09000007 09000007 09000007     ................
2004102c:	09000007 09000007 09000007 09000007     ................
2004103c:	09000007 09000007 09000007 09000007     ................
2004104c:	09000007 09000007 09000007 09000007     ................
2004105c:	09000007 09000007 09000007 09000007     ................
2004106c:	09000007 09000007 09000007 09000007     ................
2004107c:	09000007 09000007 09000007 09000007     ................
2004108c:	02000106 02000106 02000106 02000106     ................
2004109c:	02000106 02000106 02000106 02000106     ................
200410ac:	02000106 02000106 02000106 02000106     ................
200410bc:	02000106 02000106 02000106 02000106     ................
200410cc:	02000106 02000106 02000106 02000106     ................
200410dc:	02000106 02000106 02000106 02000106     ................
200410ec:	02000106 02000106 02000106 02000106     ................
200410fc:	02000106 02000106 02000106 02000106     ................
2004110c:	02000106 02000106 02000106 02000106     ................
2004111c:	02000106 02000106 02000106 02000106     ................
2004112c:	02000106 02000106 02000106 02000106     ................
2004113c:	02000106 02000106 02000106 02000106     ................
2004114c:	02000106 02000106 02000106 02000106     ................
2004115c:	02000106 02000106 02000106 02000106     ................
2004116c:	02000106 02000106 02000106 02000106     ................
2004117c:	02000106 02000106 02000106 02000106     ................
2004118c:	01050006 01050006 01050006 01050006     ................
2004119c:	01050006 01050006 01050006 01050006     ................
200411ac:	01050006 01050006 01050006 01050006     ................
200411bc:	01050006 01050006 01050006 01050006     ................
200411cc:	01050006 01050006 01050006 01050006     ................
200411dc:	01050006 01050006 01050006 01050006     ................
200411ec:	01050006 01050006 01050006 01050006     ................
200411fc:	01050006 01050006 01050006 01050006     ................
2004120c:	01050006 01050006 01050006 01050006     ................
2004121c:	01050006 01050006 01050006 01050006     ................
2004122c:	01050006 01050006 01050006 01050006     ................
2004123c:	01050006 01050006 01050006 01050006     ................
2004124c:	01050006 01050006 01050006 01050006     ................
2004125c:	01050006 01050006 01050006 01050006     ................
2004126c:	01050006 01050006 01050006 01050006     ................
2004127c:	01050006 01050006 01050006 01050006     ................
2004128c:	01020106 01020106 01020106 01020106     ................
2004129c:	01020106 01020106 01020106 01020106     ................
200412ac:	01020106 01020106 01020106 01020106     ................
200412bc:	01020106 01020106 01020106 01020106     ................
200412cc:	01020106 01020106 01020106 01020106     ................
200412dc:	01020106 01020106 01020106 01020106     ................
200412ec:	01020106 01020106 01020106 01020106     ................
200412fc:	01020106 01020106 01020106 01020106     ................
2004130c:	01020106 01020106 01020106 01020106     ................
2004131c:	01020106 01020106 01020106 01020106     ................
2004132c:	01020106 01020106 01020106 01020106     ................
2004133c:	01020106 01020106 01020106 01020106     ................
2004134c:	01020106 01020106 01020106 01020106     ................
2004135c:	01020106 01020106 01020106 01020106     ................
2004136c:	01020106 01020106 01020106 01020106     ................
2004137c:	01020106 01020106 01020106 01020106     ................
2004138c:	01010106 01010106 01010106 01010106     ................
2004139c:	01010106 01010106 01010106 01010106     ................
200413ac:	01010106 01010106 01010106 01010106     ................
200413bc:	01010106 01010106 01010106 01010106     ................
200413cc:	01010106 01010106 01010106 01010106     ................
200413dc:	01010106 01010106 01010106 01010106     ................
200413ec:	01010106 01010106 01010106 01010106     ................
200413fc:	01010106 01010106 01010106 01010106     ................
2004140c:	01010106 01010106 01010106 01010106     ................
2004141c:	01010106 01010106 01010106 01010106     ................
2004142c:	01010106 01010106 01010106 01010106     ................
2004143c:	01010106 01010106 01010106 01010106     ................
2004144c:	01010106 01010106 01010106 01010106     ................
2004145c:	01010106 01010106 01010106 01010106     ................
2004146c:	01010106 01010106 01010106 01010106     ................
2004147c:	01010106 01010106 01010106 01010106     ................
2004148c:	01040006 01040006 01040006 01040006     ................
2004149c:	01040006 01040006 01040006 01040006     ................
200414ac:	01040006 01040006 01040006 01040006     ................
200414bc:	01040006 01040006 01040006 01040006     ................
200414cc:	01040006 01040006 01040006 01040006     ................
200414dc:	01040006 01040006 01040006 01040006     ................
200414ec:	01040006 01040006 01040006 01040006     ................
200414fc:	01040006 01040006 01040006 01040006     ................
2004150c:	01040006 01040006 01040006 01040006     ................
2004151c:	01040006 01040006 01040006 01040006     ................
2004152c:	01040006 01040006 01040006 01040006     ................
2004153c:	01040006 01040006 01040006 01040006     ................
2004154c:	01040006 01040006 01040006 01040006     ................
2004155c:	01040006 01040006 01040006 01040006     ................
2004156c:	01040006 01040006 01040006 01040006     ................
2004157c:	01040006 01040006 01040006 01040006     ................
2004158c:	01030006 01030006 01030006 01030006     ................
2004159c:	01030006 01030006 01030006 01030006     ................
200415ac:	01030006 01030006 01030006 01030006     ................
200415bc:	01030006 01030006 01030006 01030006     ................
200415cc:	01030006 01030006 01030006 01030006     ................
200415dc:	01030006 01030006 01030006 01030006     ................
200415ec:	01030006 01030006 01030006 01030006     ................
200415fc:	01030006 01030006 01030006 01030006     ................
2004160c:	01030006 01030006 01030006 01030006     ................
2004161c:	01030006 01030006 01030006 01030006     ................
2004162c:	01030006 01030006 01030006 01030006     ................
2004163c:	01030006 01030006 01030006 01030006     ................
2004164c:	01030006 01030006 01030006 01030006     ................
2004165c:	01030006 01030006 01030006 01030006     ................
2004166c:	01030006 01030006 01030006 01030006     ................
2004167c:	01030006 01030006 01030006 01030006     ................
2004168c:	08000006 08000006 08000006 08000006     ................
2004169c:	08000006 08000006 08000006 08000006     ................
200416ac:	08000006 08000006 08000006 08000006     ................
200416bc:	08000006 08000006 08000006 08000006     ................
200416cc:	08000006 08000006 08000006 08000006     ................
200416dc:	08000006 08000006 08000006 08000006     ................
200416ec:	08000006 08000006 08000006 08000006     ................
200416fc:	08000006 08000006 08000006 08000006     ................
2004170c:	08000006 08000006 08000006 08000006     ................
2004171c:	08000006 08000006 08000006 08000006     ................
2004172c:	08000006 08000006 08000006 08000006     ................
2004173c:	08000006 08000006 08000006 08000006     ................
2004174c:	08000006 08000006 08000006 08000006     ................
2004175c:	08000006 08000006 08000006 08000006     ................
2004176c:	08000006 08000006 08000006 08000006     ................
2004177c:	08000006 08000006 08000006 08000006     ................
2004178c:	07000006 07000006 07000006 07000006     ................
2004179c:	07000006 07000006 07000006 07000006     ................
200417ac:	07000006 07000006 07000006 07000006     ................
200417bc:	07000006 07000006 07000006 07000006     ................
200417cc:	07000006 07000006 07000006 07000006     ................
200417dc:	07000006 07000006 07000006 07000006     ................
200417ec:	07000006 07000006 07000006 07000006     ................
200417fc:	07000006 07000006 07000006 07000006     ................
2004180c:	07000006 07000006 07000006 07000006     ................
2004181c:	07000006 07000006 07000006 07000006     ................
2004182c:	07000006 07000006 07000006 07000006     ................
2004183c:	07000006 07000006 07000006 07000006     ................
2004184c:	07000006 07000006 07000006 07000006     ................
2004185c:	07000006 07000006 07000006 07000006     ................
2004186c:	07000006 07000006 07000006 07000006     ................
2004187c:	07000006 07000006 07000006 07000006     ................
2004188c:	02010006 02010006 02010006 02010006     ................
2004189c:	02010006 02010006 02010006 02010006     ................
200418ac:	02010006 02010006 02010006 02010006     ................
200418bc:	02010006 02010006 02010006 02010006     ................
200418cc:	02010006 02010006 02010006 02010006     ................
200418dc:	02010006 02010006 02010006 02010006     ................
200418ec:	02010006 02010006 02010006 02010006     ................
200418fc:	02010006 02010006 02010006 02010006     ................
2004190c:	02010006 02010006 02010006 02010006     ................
2004191c:	02010006 02010006 02010006 02010006     ................
2004192c:	02010006 02010006 02010006 02010006     ................
2004193c:	02010006 02010006 02010006 02010006     ................
2004194c:	02010006 02010006 02010006 02010006     ................
2004195c:	02010006 02010006 02010006 02010006     ................
2004196c:	02010006 02010006 02010006 02010006     ................
2004197c:	02010006 02010006 02010006 02010006     ................
2004198c:	06000006 06000006 06000006 06000006     ................
2004199c:	06000006 06000006 06000006 06000006     ................
200419ac:	06000006 06000006 06000006 06000006     ................
200419bc:	06000006 06000006 06000006 06000006     ................
200419cc:	06000006 06000006 06000006 06000006     ................
200419dc:	06000006 06000006 06000006 06000006     ................
200419ec:	06000006 06000006 06000006 06000006     ................
200419fc:	06000006 06000006 06000006 06000006     ................
20041a0c:	06000006 06000006 06000006 06000006     ................
20041a1c:	06000006 06000006 06000006 06000006     ................
20041a2c:	06000006 06000006 06000006 06000006     ................
20041a3c:	06000006 06000006 06000006 06000006     ................
20041a4c:	06000006 06000006 06000006 06000006     ................
20041a5c:	06000006 06000006 06000006 06000006     ................
20041a6c:	06000006 06000006 06000006 06000006     ................
20041a7c:	06000006 06000006 06000006 06000006     ................
20041a8c:	01020005 01020005 01020005 01020005     ................
20041a9c:	01020005 01020005 01020005 01020005     ................
20041aac:	01020005 01020005 01020005 01020005     ................
20041abc:	01020005 01020005 01020005 01020005     ................
20041acc:	01020005 01020005 01020005 01020005     ................
20041adc:	01020005 01020005 01020005 01020005     ................
20041aec:	01020005 01020005 01020005 01020005     ................
20041afc:	01020005 01020005 01020005 01020005     ................
20041b0c:	01020005 01020005 01020005 01020005     ................
20041b1c:	01020005 01020005 01020005 01020005     ................
20041b2c:	01020005 01020005 01020005 01020005     ................
20041b3c:	01020005 01020005 01020005 01020005     ................
20041b4c:	01020005 01020005 01020005 01020005     ................
20041b5c:	01020005 01020005 01020005 01020005     ................
20041b6c:	01020005 01020005 01020005 01020005     ................
20041b7c:	01020005 01020005 01020005 01020005     ................
20041b8c:	01020005 01020005 01020005 01020005     ................
20041b9c:	01020005 01020005 01020005 01020005     ................
20041bac:	01020005 01020005 01020005 01020005     ................
20041bbc:	01020005 01020005 01020005 01020005     ................
20041bcc:	01020005 01020005 01020005 01020005     ................
20041bdc:	01020005 01020005 01020005 01020005     ................
20041bec:	01020005 01020005 01020005 01020005     ................
20041bfc:	01020005 01020005 01020005 01020005     ................
20041c0c:	01020005 01020005 01020005 01020005     ................
20041c1c:	01020005 01020005 01020005 01020005     ................
20041c2c:	01020005 01020005 01020005 01020005     ................
20041c3c:	01020005 01020005 01020005 01020005     ................
20041c4c:	01020005 01020005 01020005 01020005     ................
20041c5c:	01020005 01020005 01020005 01020005     ................
20041c6c:	01020005 01020005 01020005 01020005     ................
20041c7c:	01020005 01020005 01020005 01020005     ................
20041c8c:	05000005 05000005 05000005 05000005     ................
20041c9c:	05000005 05000005 05000005 05000005     ................
20041cac:	05000005 05000005 05000005 05000005     ................
20041cbc:	05000005 05000005 05000005 05000005     ................
20041ccc:	05000005 05000005 05000005 05000005     ................
20041cdc:	05000005 05000005 05000005 05000005     ................
20041cec:	05000005 05000005 05000005 05000005     ................
20041cfc:	05000005 05000005 05000005 05000005     ................
20041d0c:	05000005 05000005 05000005 05000005     ................
20041d1c:	05000005 05000005 05000005 05000005     ................
20041d2c:	05000005 05000005 05000005 05000005     ................
20041d3c:	05000005 05000005 05000005 05000005     ................
20041d4c:	05000005 05000005 05000005 05000005     ................
20041d5c:	05000005 05000005 05000005 05000005     ................
20041d6c:	05000005 05000005 05000005 05000005     ................
20041d7c:	05000005 05000005 05000005 05000005     ................
20041d8c:	05000005 05000005 05000005 05000005     ................
20041d9c:	05000005 05000005 05000005 05000005     ................
20041dac:	05000005 05000005 05000005 05000005     ................
20041dbc:	05000005 05000005 05000005 05000005     ................
20041dcc:	05000005 05000005 05000005 05000005     ................
20041ddc:	05000005 05000005 05000005 05000005     ................
20041dec:	05000005 05000005 05000005 05000005     ................
20041dfc:	05000005 05000005 05000005 05000005     ................
20041e0c:	05000005 05000005 05000005 05000005     ................
20041e1c:	05000005 05000005 05000005 05000005     ................
20041e2c:	05000005 05000005 05000005 05000005     ................
20041e3c:	05000005 05000005 05000005 05000005     ................
20041e4c:	05000005 05000005 05000005 05000005     ................
20041e5c:	05000005 05000005 05000005 05000005     ................
20041e6c:	05000005 05000005 05000005 05000005     ................
20041e7c:	05000005 05000005 05000005 05000005     ................
20041e8c:	04000005 04000005 04000005 04000005     ................
20041e9c:	04000005 04000005 04000005 04000005     ................
20041eac:	04000005 04000005 04000005 04000005     ................
20041ebc:	04000005 04000005 04000005 04000005     ................
20041ecc:	04000005 04000005 04000005 04000005     ................
20041edc:	04000005 04000005 04000005 04000005     ................
20041eec:	04000005 04000005 04000005 04000005     ................
20041efc:	04000005 04000005 04000005 04000005     ................
20041f0c:	04000005 04000005 04000005 04000005     ................
20041f1c:	04000005 04000005 04000005 04000005     ................
20041f2c:	04000005 04000005 04000005 04000005     ................
20041f3c:	04000005 04000005 04000005 04000005     ................
20041f4c:	04000005 04000005 04000005 04000005     ................
20041f5c:	04000005 04000005 04000005 04000005     ................
20041f6c:	04000005 04000005 04000005 04000005     ................
20041f7c:	04000005 04000005 04000005 04000005     ................
20041f8c:	04000005 04000005 04000005 04000005     ................
20041f9c:	04000005 04000005 04000005 04000005     ................
20041fac:	04000005 04000005 04000005 04000005     ................
20041fbc:	04000005 04000005 04000005 04000005     ................
20041fcc:	04000005 04000005 04000005 04000005     ................
20041fdc:	04000005 04000005 04000005 04000005     ................
20041fec:	04000005 04000005 04000005 04000005     ................
20041ffc:	04000005 04000005 04000005 04000005     ................
2004200c:	04000005 04000005 04000005 04000005     ................
2004201c:	04000005 04000005 04000005 04000005     ................
2004202c:	04000005 04000005 04000005 04000005     ................
2004203c:	04000005 04000005 04000005 04000005     ................
2004204c:	04000005 04000005 04000005 04000005     ................
2004205c:	04000005 04000005 04000005 04000005     ................
2004206c:	04000005 04000005 04000005 04000005     ................
2004207c:	04000005 04000005 04000005 04000005     ................
2004208c:	01000104 01000104 01000104 01000104     ................
2004209c:	01000104 01000104 01000104 01000104     ................
200420ac:	01000104 01000104 01000104 01000104     ................
200420bc:	01000104 01000104 01000104 01000104     ................
200420cc:	01000104 01000104 01000104 01000104     ................
200420dc:	01000104 01000104 01000104 01000104     ................
200420ec:	01000104 01000104 01000104 01000104     ................
200420fc:	01000104 01000104 01000104 01000104     ................
2004210c:	01000104 01000104 01000104 01000104     ................
2004211c:	01000104 01000104 01000104 01000104     ................
2004212c:	01000104 01000104 01000104 01000104     ................
2004213c:	01000104 01000104 01000104 01000104     ................
2004214c:	01000104 01000104 01000104 01000104     ................
2004215c:	01000104 01000104 01000104 01000104     ................
2004216c:	01000104 01000104 01000104 01000104     ................
2004217c:	01000104 01000104 01000104 01000104     ................
2004218c:	01000104 01000104 01000104 01000104     ................
2004219c:	01000104 01000104 01000104 01000104     ................
200421ac:	01000104 01000104 01000104 01000104     ................
200421bc:	01000104 01000104 01000104 01000104     ................
200421cc:	01000104 01000104 01000104 01000104     ................
200421dc:	01000104 01000104 01000104 01000104     ................
200421ec:	01000104 01000104 01000104 01000104     ................
200421fc:	01000104 01000104 01000104 01000104     ................
2004220c:	01000104 01000104 01000104 01000104     ................
2004221c:	01000104 01000104 01000104 01000104     ................
2004222c:	01000104 01000104 01000104 01000104     ................
2004223c:	01000104 01000104 01000104 01000104     ................
2004224c:	01000104 01000104 01000104 01000104     ................
2004225c:	01000104 01000104 01000104 01000104     ................
2004226c:	01000104 01000104 01000104 01000104     ................
2004227c:	01000104 01000104 01000104 01000104     ................
2004228c:	01000104 01000104 01000104 01000104     ................
2004229c:	01000104 01000104 01000104 01000104     ................
200422ac:	01000104 01000104 01000104 01000104     ................
200422bc:	01000104 01000104 01000104 01000104     ................
200422cc:	01000104 01000104 01000104 01000104     ................
200422dc:	01000104 01000104 01000104 01000104     ................
200422ec:	01000104 01000104 01000104 01000104     ................
200422fc:	01000104 01000104 01000104 01000104     ................
2004230c:	01000104 01000104 01000104 01000104     ................
2004231c:	01000104 01000104 01000104 01000104     ................
2004232c:	01000104 01000104 01000104 01000104     ................
2004233c:	01000104 01000104 01000104 01000104     ................
2004234c:	01000104 01000104 01000104 01000104     ................
2004235c:	01000104 01000104 01000104 01000104     ................
2004236c:	01000104 01000104 01000104 01000104     ................
2004237c:	01000104 01000104 01000104 01000104     ................
2004238c:	01000104 01000104 01000104 01000104     ................
2004239c:	01000104 01000104 01000104 01000104     ................
200423ac:	01000104 01000104 01000104 01000104     ................
200423bc:	01000104 01000104 01000104 01000104     ................
200423cc:	01000104 01000104 01000104 01000104     ................
200423dc:	01000104 01000104 01000104 01000104     ................
200423ec:	01000104 01000104 01000104 01000104     ................
200423fc:	01000104 01000104 01000104 01000104     ................
2004240c:	01000104 01000104 01000104 01000104     ................
2004241c:	01000104 01000104 01000104 01000104     ................
2004242c:	01000104 01000104 01000104 01000104     ................
2004243c:	01000104 01000104 01000104 01000104     ................
2004244c:	01000104 01000104 01000104 01000104     ................
2004245c:	01000104 01000104 01000104 01000104     ................
2004246c:	01000104 01000104 01000104 01000104     ................
2004247c:	01000104 01000104 01000104 01000104     ................
2004248c:	01000002 01000002 01000002 01000002     ................
2004249c:	01000002 01000002 01000002 01000002     ................
200424ac:	01000002 01000002 01000002 01000002     ................
200424bc:	01000002 01000002 01000002 01000002     ................
200424cc:	01000002 01000002 01000002 01000002     ................
200424dc:	01000002 01000002 01000002 01000002     ................
200424ec:	01000002 01000002 01000002 01000002     ................
200424fc:	01000002 01000002 01000002 01000002     ................
2004250c:	01000002 01000002 01000002 01000002     ................
2004251c:	01000002 01000002 01000002 01000002     ................
2004252c:	01000002 01000002 01000002 01000002     ................
2004253c:	01000002 01000002 01000002 01000002     ................
2004254c:	01000002 01000002 01000002 01000002     ................
2004255c:	01000002 01000002 01000002 01000002     ................
2004256c:	01000002 01000002 01000002 01000002     ................
2004257c:	01000002 01000002 01000002 01000002     ................
2004258c:	01000002 01000002 01000002 01000002     ................
2004259c:	01000002 01000002 01000002 01000002     ................
200425ac:	01000002 01000002 01000002 01000002     ................
200425bc:	01000002 01000002 01000002 01000002     ................
200425cc:	01000002 01000002 01000002 01000002     ................
200425dc:	01000002 01000002 01000002 01000002     ................
200425ec:	01000002 01000002 01000002 01000002     ................
200425fc:	01000002 01000002 01000002 01000002     ................
2004260c:	01000002 01000002 01000002 01000002     ................
2004261c:	01000002 01000002 01000002 01000002     ................
2004262c:	01000002 01000002 01000002 01000002     ................
2004263c:	01000002 01000002 01000002 01000002     ................
2004264c:	01000002 01000002 01000002 01000002     ................
2004265c:	01000002 01000002 01000002 01000002     ................
2004266c:	01000002 01000002 01000002 01000002     ................
2004267c:	01000002 01000002 01000002 01000002     ................
2004268c:	01000002 01000002 01000002 01000002     ................
2004269c:	01000002 01000002 01000002 01000002     ................
200426ac:	01000002 01000002 01000002 01000002     ................
200426bc:	01000002 01000002 01000002 01000002     ................
200426cc:	01000002 01000002 01000002 01000002     ................
200426dc:	01000002 01000002 01000002 01000002     ................
200426ec:	01000002 01000002 01000002 01000002     ................
200426fc:	01000002 01000002 01000002 01000002     ................
2004270c:	01000002 01000002 01000002 01000002     ................
2004271c:	01000002 01000002 01000002 01000002     ................
2004272c:	01000002 01000002 01000002 01000002     ................
2004273c:	01000002 01000002 01000002 01000002     ................
2004274c:	01000002 01000002 01000002 01000002     ................
2004275c:	01000002 01000002 01000002 01000002     ................
2004276c:	01000002 01000002 01000002 01000002     ................
2004277c:	01000002 01000002 01000002 01000002     ................
2004278c:	01000002 01000002 01000002 01000002     ................
2004279c:	01000002 01000002 01000002 01000002     ................
200427ac:	01000002 01000002 01000002 01000002     ................
200427bc:	01000002 01000002 01000002 01000002     ................
200427cc:	01000002 01000002 01000002 01000002     ................
200427dc:	01000002 01000002 01000002 01000002     ................
200427ec:	01000002 01000002 01000002 01000002     ................
200427fc:	01000002 01000002 01000002 01000002     ................
2004280c:	01000002 01000002 01000002 01000002     ................
2004281c:	01000002 01000002 01000002 01000002     ................
2004282c:	01000002 01000002 01000002 01000002     ................
2004283c:	01000002 01000002 01000002 01000002     ................
2004284c:	01000002 01000002 01000002 01000002     ................
2004285c:	01000002 01000002 01000002 01000002     ................
2004286c:	01000002 01000002 01000002 01000002     ................
2004287c:	01000002 01000002 01000002 01000002     ................
2004288c:	01000002 01000002 01000002 01000002     ................
2004289c:	01000002 01000002 01000002 01000002     ................
200428ac:	01000002 01000002 01000002 01000002     ................
200428bc:	01000002 01000002 01000002 01000002     ................
200428cc:	01000002 01000002 01000002 01000002     ................
200428dc:	01000002 01000002 01000002 01000002     ................
200428ec:	01000002 01000002 01000002 01000002     ................
200428fc:	01000002 01000002 01000002 01000002     ................
2004290c:	01000002 01000002 01000002 01000002     ................
2004291c:	01000002 01000002 01000002 01000002     ................
2004292c:	01000002 01000002 01000002 01000002     ................
2004293c:	01000002 01000002 01000002 01000002     ................
2004294c:	01000002 01000002 01000002 01000002     ................
2004295c:	01000002 01000002 01000002 01000002     ................
2004296c:	01000002 01000002 01000002 01000002     ................
2004297c:	01000002 01000002 01000002 01000002     ................
2004298c:	01000002 01000002 01000002 01000002     ................
2004299c:	01000002 01000002 01000002 01000002     ................
200429ac:	01000002 01000002 01000002 01000002     ................
200429bc:	01000002 01000002 01000002 01000002     ................
200429cc:	01000002 01000002 01000002 01000002     ................
200429dc:	01000002 01000002 01000002 01000002     ................
200429ec:	01000002 01000002 01000002 01000002     ................
200429fc:	01000002 01000002 01000002 01000002     ................
20042a0c:	01000002 01000002 01000002 01000002     ................
20042a1c:	01000002 01000002 01000002 01000002     ................
20042a2c:	01000002 01000002 01000002 01000002     ................
20042a3c:	01000002 01000002 01000002 01000002     ................
20042a4c:	01000002 01000002 01000002 01000002     ................
20042a5c:	01000002 01000002 01000002 01000002     ................
20042a6c:	01000002 01000002 01000002 01000002     ................
20042a7c:	01000002 01000002 01000002 01000002     ................
20042a8c:	01000002 01000002 01000002 01000002     ................
20042a9c:	01000002 01000002 01000002 01000002     ................
20042aac:	01000002 01000002 01000002 01000002     ................
20042abc:	01000002 01000002 01000002 01000002     ................
20042acc:	01000002 01000002 01000002 01000002     ................
20042adc:	01000002 01000002 01000002 01000002     ................
20042aec:	01000002 01000002 01000002 01000002     ................
20042afc:	01000002 01000002 01000002 01000002     ................
20042b0c:	01000002 01000002 01000002 01000002     ................
20042b1c:	01000002 01000002 01000002 01000002     ................
20042b2c:	01000002 01000002 01000002 01000002     ................
20042b3c:	01000002 01000002 01000002 01000002     ................
20042b4c:	01000002 01000002 01000002 01000002     ................
20042b5c:	01000002 01000002 01000002 01000002     ................
20042b6c:	01000002 01000002 01000002 01000002     ................
20042b7c:	01000002 01000002 01000002 01000002     ................
20042b8c:	01000002 01000002 01000002 01000002     ................
20042b9c:	01000002 01000002 01000002 01000002     ................
20042bac:	01000002 01000002 01000002 01000002     ................
20042bbc:	01000002 01000002 01000002 01000002     ................
20042bcc:	01000002 01000002 01000002 01000002     ................
20042bdc:	01000002 01000002 01000002 01000002     ................
20042bec:	01000002 01000002 01000002 01000002     ................
20042bfc:	01000002 01000002 01000002 01000002     ................
20042c0c:	01000002 01000002 01000002 01000002     ................
20042c1c:	01000002 01000002 01000002 01000002     ................
20042c2c:	01000002 01000002 01000002 01000002     ................
20042c3c:	01000002 01000002 01000002 01000002     ................
20042c4c:	01000002 01000002 01000002 01000002     ................
20042c5c:	01000002 01000002 01000002 01000002     ................
20042c6c:	01000002 01000002 01000002 01000002     ................
20042c7c:	01000002 01000002 01000002 01000002     ................
20042c8c:	01000002 01000002 01000002 01000002     ................
20042c9c:	01000002 01000002 01000002 01000002     ................
20042cac:	01000002 01000002 01000002 01000002     ................
20042cbc:	01000002 01000002 01000002 01000002     ................
20042ccc:	01000002 01000002 01000002 01000002     ................
20042cdc:	01000002 01000002 01000002 01000002     ................
20042cec:	01000002 01000002 01000002 01000002     ................
20042cfc:	01000002 01000002 01000002 01000002     ................
20042d0c:	01000002 01000002 01000002 01000002     ................
20042d1c:	01000002 01000002 01000002 01000002     ................
20042d2c:	01000002 01000002 01000002 01000002     ................
20042d3c:	01000002 01000002 01000002 01000002     ................
20042d4c:	01000002 01000002 01000002 01000002     ................
20042d5c:	01000002 01000002 01000002 01000002     ................
20042d6c:	01000002 01000002 01000002 01000002     ................
20042d7c:	01000002 01000002 01000002 01000002     ................
20042d8c:	01000002 01000002 01000002 01000002     ................
20042d9c:	01000002 01000002 01000002 01000002     ................
20042dac:	01000002 01000002 01000002 01000002     ................
20042dbc:	01000002 01000002 01000002 01000002     ................
20042dcc:	01000002 01000002 01000002 01000002     ................
20042ddc:	01000002 01000002 01000002 01000002     ................
20042dec:	01000002 01000002 01000002 01000002     ................
20042dfc:	01000002 01000002 01000002 01000002     ................
20042e0c:	01000002 01000002 01000002 01000002     ................
20042e1c:	01000002 01000002 01000002 01000002     ................
20042e2c:	01000002 01000002 01000002 01000002     ................
20042e3c:	01000002 01000002 01000002 01000002     ................
20042e4c:	01000002 01000002 01000002 01000002     ................
20042e5c:	01000002 01000002 01000002 01000002     ................
20042e6c:	01000002 01000002 01000002 01000002     ................
20042e7c:	01000002 01000002 01000002 01000002     ................
20042e8c:	01000002 01000002 01000002 01000002     ................
20042e9c:	01000002 01000002 01000002 01000002     ................
20042eac:	01000002 01000002 01000002 01000002     ................
20042ebc:	01000002 01000002 01000002 01000002     ................
20042ecc:	01000002 01000002 01000002 01000002     ................
20042edc:	01000002 01000002 01000002 01000002     ................
20042eec:	01000002 01000002 01000002 01000002     ................
20042efc:	01000002 01000002 01000002 01000002     ................
20042f0c:	01000002 01000002 01000002 01000002     ................
20042f1c:	01000002 01000002 01000002 01000002     ................
20042f2c:	01000002 01000002 01000002 01000002     ................
20042f3c:	01000002 01000002 01000002 01000002     ................
20042f4c:	01000002 01000002 01000002 01000002     ................
20042f5c:	01000002 01000002 01000002 01000002     ................
20042f6c:	01000002 01000002 01000002 01000002     ................
20042f7c:	01000002 01000002 01000002 01000002     ................
20042f8c:	01000002 01000002 01000002 01000002     ................
20042f9c:	01000002 01000002 01000002 01000002     ................
20042fac:	01000002 01000002 01000002 01000002     ................
20042fbc:	01000002 01000002 01000002 01000002     ................
20042fcc:	01000002 01000002 01000002 01000002     ................
20042fdc:	01000002 01000002 01000002 01000002     ................
20042fec:	01000002 01000002 01000002 01000002     ................
20042ffc:	01000002 01000002 01000002 01000002     ................
2004300c:	01000002 01000002 01000002 01000002     ................
2004301c:	01000002 01000002 01000002 01000002     ................
2004302c:	01000002 01000002 01000002 01000002     ................
2004303c:	01000002 01000002 01000002 01000002     ................
2004304c:	01000002 01000002 01000002 01000002     ................
2004305c:	01000002 01000002 01000002 01000002     ................
2004306c:	01000002 01000002 01000002 01000002     ................
2004307c:	01000002 01000002 01000002 01000002     ................
2004308c:	01000002 01000002 01000002 01000002     ................
2004309c:	01000002 01000002 01000002 01000002     ................
200430ac:	01000002 01000002 01000002 01000002     ................
200430bc:	01000002 01000002 01000002 01000002     ................
200430cc:	01000002 01000002 01000002 01000002     ................
200430dc:	01000002 01000002 01000002 01000002     ................
200430ec:	01000002 01000002 01000002 01000002     ................
200430fc:	01000002 01000002 01000002 01000002     ................
2004310c:	01000002 01000002 01000002 01000002     ................
2004311c:	01000002 01000002 01000002 01000002     ................
2004312c:	01000002 01000002 01000002 01000002     ................
2004313c:	01000002 01000002 01000002 01000002     ................
2004314c:	01000002 01000002 01000002 01000002     ................
2004315c:	01000002 01000002 01000002 01000002     ................
2004316c:	01000002 01000002 01000002 01000002     ................
2004317c:	01000002 01000002 01000002 01000002     ................
2004318c:	01000002 01000002 01000002 01000002     ................
2004319c:	01000002 01000002 01000002 01000002     ................
200431ac:	01000002 01000002 01000002 01000002     ................
200431bc:	01000002 01000002 01000002 01000002     ................
200431cc:	01000002 01000002 01000002 01000002     ................
200431dc:	01000002 01000002 01000002 01000002     ................
200431ec:	01000002 01000002 01000002 01000002     ................
200431fc:	01000002 01000002 01000002 01000002     ................
2004320c:	01000002 01000002 01000002 01000002     ................
2004321c:	01000002 01000002 01000002 01000002     ................
2004322c:	01000002 01000002 01000002 01000002     ................
2004323c:	01000002 01000002 01000002 01000002     ................
2004324c:	01000002 01000002 01000002 01000002     ................
2004325c:	01000002 01000002 01000002 01000002     ................
2004326c:	01000002 01000002 01000002 01000002     ................
2004327c:	01000002 01000002 01000002 01000002     ................
2004328c:	01000002 01000002 01000002 01000002     ................
2004329c:	01000002 01000002 01000002 01000002     ................
200432ac:	01000002 01000002 01000002 01000002     ................
200432bc:	01000002 01000002 01000002 01000002     ................
200432cc:	01000002 01000002 01000002 01000002     ................
200432dc:	01000002 01000002 01000002 01000002     ................
200432ec:	01000002 01000002 01000002 01000002     ................
200432fc:	01000002 01000002 01000002 01000002     ................
2004330c:	01000002 01000002 01000002 01000002     ................
2004331c:	01000002 01000002 01000002 01000002     ................
2004332c:	01000002 01000002 01000002 01000002     ................
2004333c:	01000002 01000002 01000002 01000002     ................
2004334c:	01000002 01000002 01000002 01000002     ................
2004335c:	01000002 01000002 01000002 01000002     ................
2004336c:	01000002 01000002 01000002 01000002     ................
2004337c:	01000002 01000002 01000002 01000002     ................
2004338c:	01000002 01000002 01000002 01000002     ................
2004339c:	01000002 01000002 01000002 01000002     ................
200433ac:	01000002 01000002 01000002 01000002     ................
200433bc:	01000002 01000002 01000002 01000002     ................
200433cc:	01000002 01000002 01000002 01000002     ................
200433dc:	01000002 01000002 01000002 01000002     ................
200433ec:	01000002 01000002 01000002 01000002     ................
200433fc:	01000002 01000002 01000002 01000002     ................
2004340c:	01000002 01000002 01000002 01000002     ................
2004341c:	01000002 01000002 01000002 01000002     ................
2004342c:	01000002 01000002 01000002 01000002     ................
2004343c:	01000002 01000002 01000002 01000002     ................
2004344c:	01000002 01000002 01000002 01000002     ................
2004345c:	01000002 01000002 01000002 01000002     ................
2004346c:	01000002 01000002 01000002 01000002     ................
2004347c:	01000002 01000002 01000002 01000002     ................
2004348c:	02000003 02000003 02000003 02000003     ................
2004349c:	02000003 02000003 02000003 02000003     ................
200434ac:	02000003 02000003 02000003 02000003     ................
200434bc:	02000003 02000003 02000003 02000003     ................
200434cc:	02000003 02000003 02000003 02000003     ................
200434dc:	02000003 02000003 02000003 02000003     ................
200434ec:	02000003 02000003 02000003 02000003     ................
200434fc:	02000003 02000003 02000003 02000003     ................
2004350c:	02000003 02000003 02000003 02000003     ................
2004351c:	02000003 02000003 02000003 02000003     ................
2004352c:	02000003 02000003 02000003 02000003     ................
2004353c:	02000003 02000003 02000003 02000003     ................
2004354c:	02000003 02000003 02000003 02000003     ................
2004355c:	02000003 02000003 02000003 02000003     ................
2004356c:	02000003 02000003 02000003 02000003     ................
2004357c:	02000003 02000003 02000003 02000003     ................
2004358c:	02000003 02000003 02000003 02000003     ................
2004359c:	02000003 02000003 02000003 02000003     ................
200435ac:	02000003 02000003 02000003 02000003     ................
200435bc:	02000003 02000003 02000003 02000003     ................
200435cc:	02000003 02000003 02000003 02000003     ................
200435dc:	02000003 02000003 02000003 02000003     ................
200435ec:	02000003 02000003 02000003 02000003     ................
200435fc:	02000003 02000003 02000003 02000003     ................
2004360c:	02000003 02000003 02000003 02000003     ................
2004361c:	02000003 02000003 02000003 02000003     ................
2004362c:	02000003 02000003 02000003 02000003     ................
2004363c:	02000003 02000003 02000003 02000003     ................
2004364c:	02000003 02000003 02000003 02000003     ................
2004365c:	02000003 02000003 02000003 02000003     ................
2004366c:	02000003 02000003 02000003 02000003     ................
2004367c:	02000003 02000003 02000003 02000003     ................
2004368c:	02000003 02000003 02000003 02000003     ................
2004369c:	02000003 02000003 02000003 02000003     ................
200436ac:	02000003 02000003 02000003 02000003     ................
200436bc:	02000003 02000003 02000003 02000003     ................
200436cc:	02000003 02000003 02000003 02000003     ................
200436dc:	02000003 02000003 02000003 02000003     ................
200436ec:	02000003 02000003 02000003 02000003     ................
200436fc:	02000003 02000003 02000003 02000003     ................
2004370c:	02000003 02000003 02000003 02000003     ................
2004371c:	02000003 02000003 02000003 02000003     ................
2004372c:	02000003 02000003 02000003 02000003     ................
2004373c:	02000003 02000003 02000003 02000003     ................
2004374c:	02000003 02000003 02000003 02000003     ................
2004375c:	02000003 02000003 02000003 02000003     ................
2004376c:	02000003 02000003 02000003 02000003     ................
2004377c:	02000003 02000003 02000003 02000003     ................
2004378c:	02000003 02000003 02000003 02000003     ................
2004379c:	02000003 02000003 02000003 02000003     ................
200437ac:	02000003 02000003 02000003 02000003     ................
200437bc:	02000003 02000003 02000003 02000003     ................
200437cc:	02000003 02000003 02000003 02000003     ................
200437dc:	02000003 02000003 02000003 02000003     ................
200437ec:	02000003 02000003 02000003 02000003     ................
200437fc:	02000003 02000003 02000003 02000003     ................
2004380c:	02000003 02000003 02000003 02000003     ................
2004381c:	02000003 02000003 02000003 02000003     ................
2004382c:	02000003 02000003 02000003 02000003     ................
2004383c:	02000003 02000003 02000003 02000003     ................
2004384c:	02000003 02000003 02000003 02000003     ................
2004385c:	02000003 02000003 02000003 02000003     ................
2004386c:	02000003 02000003 02000003 02000003     ................
2004387c:	02000003 02000003 02000003 02000003     ................
2004388c:	02000003 02000003 02000003 02000003     ................
2004389c:	02000003 02000003 02000003 02000003     ................
200438ac:	02000003 02000003 02000003 02000003     ................
200438bc:	02000003 02000003 02000003 02000003     ................
200438cc:	02000003 02000003 02000003 02000003     ................
200438dc:	02000003 02000003 02000003 02000003     ................
200438ec:	02000003 02000003 02000003 02000003     ................
200438fc:	02000003 02000003 02000003 02000003     ................
2004390c:	02000003 02000003 02000003 02000003     ................
2004391c:	02000003 02000003 02000003 02000003     ................
2004392c:	02000003 02000003 02000003 02000003     ................
2004393c:	02000003 02000003 02000003 02000003     ................
2004394c:	02000003 02000003 02000003 02000003     ................
2004395c:	02000003 02000003 02000003 02000003     ................
2004396c:	02000003 02000003 02000003 02000003     ................
2004397c:	02000003 02000003 02000003 02000003     ................
2004398c:	02000003 02000003 02000003 02000003     ................
2004399c:	02000003 02000003 02000003 02000003     ................
200439ac:	02000003 02000003 02000003 02000003     ................
200439bc:	02000003 02000003 02000003 02000003     ................
200439cc:	02000003 02000003 02000003 02000003     ................
200439dc:	02000003 02000003 02000003 02000003     ................
200439ec:	02000003 02000003 02000003 02000003     ................
200439fc:	02000003 02000003 02000003 02000003     ................
20043a0c:	02000003 02000003 02000003 02000003     ................
20043a1c:	02000003 02000003 02000003 02000003     ................
20043a2c:	02000003 02000003 02000003 02000003     ................
20043a3c:	02000003 02000003 02000003 02000003     ................
20043a4c:	02000003 02000003 02000003 02000003     ................
20043a5c:	02000003 02000003 02000003 02000003     ................
20043a6c:	02000003 02000003 02000003 02000003     ................
20043a7c:	02000003 02000003 02000003 02000003     ................
20043a8c:	02000003 02000003 02000003 02000003     ................
20043a9c:	02000003 02000003 02000003 02000003     ................
20043aac:	02000003 02000003 02000003 02000003     ................
20043abc:	02000003 02000003 02000003 02000003     ................
20043acc:	02000003 02000003 02000003 02000003     ................
20043adc:	02000003 02000003 02000003 02000003     ................
20043aec:	02000003 02000003 02000003 02000003     ................
20043afc:	02000003 02000003 02000003 02000003     ................
20043b0c:	02000003 02000003 02000003 02000003     ................
20043b1c:	02000003 02000003 02000003 02000003     ................
20043b2c:	02000003 02000003 02000003 02000003     ................
20043b3c:	02000003 02000003 02000003 02000003     ................
20043b4c:	02000003 02000003 02000003 02000003     ................
20043b5c:	02000003 02000003 02000003 02000003     ................
20043b6c:	02000003 02000003 02000003 02000003     ................
20043b7c:	02000003 02000003 02000003 02000003     ................
20043b8c:	02000003 02000003 02000003 02000003     ................
20043b9c:	02000003 02000003 02000003 02000003     ................
20043bac:	02000003 02000003 02000003 02000003     ................
20043bbc:	02000003 02000003 02000003 02000003     ................
20043bcc:	02000003 02000003 02000003 02000003     ................
20043bdc:	02000003 02000003 02000003 02000003     ................
20043bec:	02000003 02000003 02000003 02000003     ................
20043bfc:	02000003 02000003 02000003 02000003     ................
20043c0c:	02000003 02000003 02000003 02000003     ................
20043c1c:	02000003 02000003 02000003 02000003     ................
20043c2c:	02000003 02000003 02000003 02000003     ................
20043c3c:	02000003 02000003 02000003 02000003     ................
20043c4c:	02000003 02000003 02000003 02000003     ................
20043c5c:	02000003 02000003 02000003 02000003     ................
20043c6c:	02000003 02000003 02000003 02000003     ................
20043c7c:	02000003 02000003 02000003 02000003     ................
20043c8c:	01010004 01010004 01010004 01010004     ................
20043c9c:	01010004 01010004 01010004 01010004     ................
20043cac:	01010004 01010004 01010004 01010004     ................
20043cbc:	01010004 01010004 01010004 01010004     ................
20043ccc:	01010004 01010004 01010004 01010004     ................
20043cdc:	01010004 01010004 01010004 01010004     ................
20043cec:	01010004 01010004 01010004 01010004     ................
20043cfc:	01010004 01010004 01010004 01010004     ................
20043d0c:	01010004 01010004 01010004 01010004     ................
20043d1c:	01010004 01010004 01010004 01010004     ................
20043d2c:	01010004 01010004 01010004 01010004     ................
20043d3c:	01010004 01010004 01010004 01010004     ................
20043d4c:	01010004 01010004 01010004 01010004     ................
20043d5c:	01010004 01010004 01010004 01010004     ................
20043d6c:	01010004 01010004 01010004 01010004     ................
20043d7c:	01010004 01010004 01010004 01010004     ................
20043d8c:	01010004 01010004 01010004 01010004     ................
20043d9c:	01010004 01010004 01010004 01010004     ................
20043dac:	01010004 01010004 01010004 01010004     ................
20043dbc:	01010004 01010004 01010004 01010004     ................
20043dcc:	01010004 01010004 01010004 01010004     ................
20043ddc:	01010004 01010004 01010004 01010004     ................
20043dec:	01010004 01010004 01010004 01010004     ................
20043dfc:	01010004 01010004 01010004 01010004     ................
20043e0c:	01010004 01010004 01010004 01010004     ................
20043e1c:	01010004 01010004 01010004 01010004     ................
20043e2c:	01010004 01010004 01010004 01010004     ................
20043e3c:	01010004 01010004 01010004 01010004     ................
20043e4c:	01010004 01010004 01010004 01010004     ................
20043e5c:	01010004 01010004 01010004 01010004     ................
20043e6c:	01010004 01010004 01010004 01010004     ................
20043e7c:	01010004 01010004 01010004 01010004     ................
20043e8c:	01010004 01010004 01010004 01010004     ................
20043e9c:	01010004 01010004 01010004 01010004     ................
20043eac:	01010004 01010004 01010004 01010004     ................
20043ebc:	01010004 01010004 01010004 01010004     ................
20043ecc:	01010004 01010004 01010004 01010004     ................
20043edc:	01010004 01010004 01010004 01010004     ................
20043eec:	01010004 01010004 01010004 01010004     ................
20043efc:	01010004 01010004 01010004 01010004     ................
20043f0c:	01010004 01010004 01010004 01010004     ................
20043f1c:	01010004 01010004 01010004 01010004     ................
20043f2c:	01010004 01010004 01010004 01010004     ................
20043f3c:	01010004 01010004 01010004 01010004     ................
20043f4c:	01010004 01010004 01010004 01010004     ................
20043f5c:	01010004 01010004 01010004 01010004     ................
20043f6c:	01010004 01010004 01010004 01010004     ................
20043f7c:	01010004 01010004 01010004 01010004     ................
20043f8c:	01010004 01010004 01010004 01010004     ................
20043f9c:	01010004 01010004 01010004 01010004     ................
20043fac:	01010004 01010004 01010004 01010004     ................
20043fbc:	01010004 01010004 01010004 01010004     ................
20043fcc:	01010004 01010004 01010004 01010004     ................
20043fdc:	01010004 01010004 01010004 01010004     ................
20043fec:	01010004 01010004 01010004 01010004     ................
20043ffc:	01010004 01010004 01010004 01010004     ................
2004400c:	01010004 01010004 01010004 01010004     ................
2004401c:	01010004 01010004 01010004 01010004     ................
2004402c:	01010004 01010004 01010004 01010004     ................
2004403c:	01010004 01010004 01010004 01010004     ................
2004404c:	01010004 01010004 01010004 01010004     ................
2004405c:	01010004 01010004 01010004 01010004     ................
2004406c:	01010004 01010004 01010004 01010004     ................
2004407c:	01010004 01010004 01010004 01010004     ................
2004408c:	03000004 03000004 03000004 03000004     ................
2004409c:	03000004 03000004 03000004 03000004     ................
200440ac:	03000004 03000004 03000004 03000004     ................
200440bc:	03000004 03000004 03000004 03000004     ................
200440cc:	03000004 03000004 03000004 03000004     ................
200440dc:	03000004 03000004 03000004 03000004     ................
200440ec:	03000004 03000004 03000004 03000004     ................
200440fc:	03000004 03000004 03000004 03000004     ................
2004410c:	03000004 03000004 03000004 03000004     ................
2004411c:	03000004 03000004 03000004 03000004     ................
2004412c:	03000004 03000004 03000004 03000004     ................
2004413c:	03000004 03000004 03000004 03000004     ................
2004414c:	03000004 03000004 03000004 03000004     ................
2004415c:	03000004 03000004 03000004 03000004     ................
2004416c:	03000004 03000004 03000004 03000004     ................
2004417c:	03000004 03000004 03000004 03000004     ................
2004418c:	03000004 03000004 03000004 03000004     ................
2004419c:	03000004 03000004 03000004 03000004     ................
200441ac:	03000004 03000004 03000004 03000004     ................
200441bc:	03000004 03000004 03000004 03000004     ................
200441cc:	03000004 03000004 03000004 03000004     ................
200441dc:	03000004 03000004 03000004 03000004     ................
200441ec:	03000004 03000004 03000004 03000004     ................
200441fc:	03000004 03000004 03000004 03000004     ................
2004420c:	03000004 03000004 03000004 03000004     ................
2004421c:	03000004 03000004 03000004 03000004     ................
2004422c:	03000004 03000004 03000004 03000004     ................
2004423c:	03000004 03000004 03000004 03000004     ................
2004424c:	03000004 03000004 03000004 03000004     ................
2004425c:	03000004 03000004 03000004 03000004     ................
2004426c:	03000004 03000004 03000004 03000004     ................
2004427c:	03000004 03000004 03000004 03000004     ................
2004428c:	03000004 03000004 03000004 03000004     ................
2004429c:	03000004 03000004 03000004 03000004     ................
200442ac:	03000004 03000004 03000004 03000004     ................
200442bc:	03000004 03000004 03000004 03000004     ................
200442cc:	03000004 03000004 03000004 03000004     ................
200442dc:	03000004 03000004 03000004 03000004     ................
200442ec:	03000004 03000004 03000004 03000004     ................
200442fc:	03000004 03000004 03000004 03000004     ................
2004430c:	03000004 03000004 03000004 03000004     ................
2004431c:	03000004 03000004 03000004 03000004     ................
2004432c:	03000004 03000004 03000004 03000004     ................
2004433c:	03000004 03000004 03000004 03000004     ................
2004434c:	03000004 03000004 03000004 03000004     ................
2004435c:	03000004 03000004 03000004 03000004     ................
2004436c:	03000004 03000004 03000004 03000004     ................
2004437c:	03000004 03000004 03000004 03000004     ................
2004438c:	03000004 03000004 03000004 03000004     ................
2004439c:	03000004 03000004 03000004 03000004     ................
200443ac:	03000004 03000004 03000004 03000004     ................
200443bc:	03000004 03000004 03000004 03000004     ................
200443cc:	03000004 03000004 03000004 03000004     ................
200443dc:	03000004 03000004 03000004 03000004     ................
200443ec:	03000004 03000004 03000004 03000004     ................
200443fc:	03000004 03000004 03000004 03000004     ................
2004440c:	03000004 03000004 03000004 03000004     ................
2004441c:	03000004 03000004 03000004 03000004     ................
2004442c:	03000004 03000004 03000004 03000004     ................
2004443c:	03000004 03000004 03000004 03000004     ................
2004444c:	03000004 03000004 03000004 03000004     ................
2004445c:	03000004 03000004 03000004 03000004     ................
2004446c:	03000004 03000004 03000004 03000004     ................
2004447c:	03000004 03000004 03000004 03000004     ................

2004448c <vldTables_max_level>:
2004448c:	0304060c 02030303 01020202 01010101     ................
2004449c:	01010101 01010101 00010101 00000000     ................
	...
200444cc:	01010203 01010101 01010101 01010101     ................
200444dc:	01010101 01010101 01010101 01010101     ................
200444ec:	01010101 01010101 00000001 00000000     ................
	...
2004450c:	04050a1b 03030303 01010202 00010101     ................
	...
2004454c:	02020308 01020202 01010101 01010101     ................
2004455c:	01010101 00000001 00000000 00000000     ................
	...

2004458c <vldTables_max_run>:
2004458c:	060a1a00 00010102 00000000 00000000     ................
	...
200445cc:	00012800 00000000 00000000 00000000     .(..............
	...
2004460c:	07090e00 01010203 00010101 00000000     ................
	...
2004464c:	01061400 00000000 00000000 00000000     ................
	...

2004468c <vldTables_TMNMVtab0>:
2004468c:	04fd0403 03020302 03fe03fe 02010201     ................
2004469c:	02010201 02ff02ff 02ff02ff              ............

200446a8 <vldTables_TMNMVtab1>:
200446a8:	0af40a0c 0af50a0b 090a090a 09f609f6     ................
200446b8:	09090909 09f709f7 09080908 09f809f8     ................
200446c8:	07070707 07070707 07070707 07070707     ................
200446d8:	07f907f9 07f907f9 07f907f9 07f907f9     ................
200446e8:	07060706 07060706 07060706 07060706     ................
200446f8:	07fa07fa 07fa07fa 07fa07fa 07fa07fa     ................
20044708:	07050705 07050705 07050705 07050705     ................
20044718:	07fb07fb 07fb07fb 07fb07fb 07fb07fb     ................
20044728:	06040604 06040604 06040604 06040604     ................
20044738:	06040604 06040604 06040604 06040604     ................
20044748:	06fc06fc 06fc06fc 06fc06fc 06fc06fc     ................
20044758:	06fc06fc 06fc06fc 06fc06fc 06fc06fc     ................

20044768 <vldTables_TMNMVtab2>:
20044768:	0ce00c20 0ce10c1f 0b1e0b1e 0be20be2      ...............
20044778:	0b1d0b1d 0be30be3 0b1c0b1c 0be40be4     ................
20044788:	0b1b0b1b 0be50be5 0b1a0b1a 0be60be6     ................
20044798:	0b190b19 0be70be7 0a180a18 0a180a18     ................
200447a8:	0ae80ae8 0ae80ae8 0a170a17 0a170a17     ................
200447b8:	0ae90ae9 0ae90ae9 0a160a16 0a160a16     ................
200447c8:	0aea0aea 0aea0aea 0a150a15 0a150a15     ................
200447d8:	0aeb0aeb 0aeb0aeb 0a140a14 0a140a14     ................
200447e8:	0aec0aec 0aec0aec 0a130a13 0a130a13     ................
200447f8:	0aed0aed 0aed0aed 0a120a12 0a120a12     ................
20044808:	0aee0aee 0aee0aee 0a110a11 0a110a11     ................
20044818:	0aef0aef 0aef0aef 0a100a10 0a100a10     ................
20044828:	0af00af0 0af00af0 0a0f0a0f 0a0f0a0f     ................
20044838:	0af10af1 0af10af1 0a0e0a0e 0a0e0a0e     ................
20044848:	0af20af2 0af20af2 0a0d0a0d 0a0d0a0d     ................
20044858:	0af30af3 0af30af3                       ........

20044860 <intra_dc_threshold_table>:
20044860:	110f0d20 01171513                        .......

20044868 <dquant_table>:
20044868:	0201feff 65747962 696c615f 615f6e67     ....byte_align_a
20044878:	00000000 646e6966 6165685f 00726564     ....find_header.
20044888:	6b6f6f6c 726f665f 7165535f 636e6575     look_for_Sequenc
20044898:	65485f65 72656461 00000000 64616572     e_Header....read
200448a8:	6f6c625f 00006b63 64616572 6f6c625f     _block..read_blo
200448b8:	635f6b63 6666656f 00000000 64616572     ck_coeff....read
200448c8:	6f6c625f 635f6b63 6666656f 0063615f     _block_coeff_ac.
200448d8:	64616572 6f6c625f 645f6b63 00000063     read_block_dc...
200448e8:	64616572 00626d5f 64616572 00766d5f     read_mb.read_mv.
200448f8:	64616572 5f766d5f 61746164 00000000     read_mv_data....
20044908:	64616572 6174735f 635f7472 0065646f     read_start_code.
20044918:	64616572 6c6f765f 00000000 64616572     read_vol....read
20044928:	6c6f765f 7662765f 7261705f 74656d61     _vol_vbv_paramet
20044938:	00737265 64616572 6c6f765f 7662765f     ers.read_vol_vbv
20044948:	7261705f 74656d61 32737265 00000000     _parameters2....
20044958:	64616572 6c6f765f 6469765f 6f5f6f65     read_vol_video_o
20044968:	63656a62 616c5f74 5f726579 70616873     bject_layer_shap
20044978:	00000065 64616572 6c6f765f 6469765f     e...read_vol_vid
20044988:	6f5f6f65 63656a62 616c5f74 5f726579     eo_object_layer_
20044998:	74646977 00000068 64616572 706f765f     width...read_vop
200449a8:	00000000 64616572 706f765f 646f635f     ....read_vop_cod
200449b8:	00006465 64616572 706f765f 646f635f     ed..read_vop_cod
200449c8:	5f676e69 65707974 00000000 72616573     ing_type....sear
200449d8:	735f6863 74726174 646f635f 00000065     ch_start_code...
200449e8:	65646e75 656e6966 00000064 72617473     undefined...star
200449f8:	6f635f74 20206564 20202020 20202020     t_code          
20044a08:	20202020 20202020 20202020 20202020                     
20044a18:	00000020 646e6172 615f6d6f 73656363      ...random_acces
20044a28:	6c626973 6f765f65 2020206c 20202020     sible_vol       
20044a38:	20202020 20202020 20202020 20202020                     
20044a48:	20202020 00000000 65646976 626f5f6f         ....video_ob
20044a58:	7463656a 7079745f 6e695f65 61636964     ject_type_indica
20044a68:	6e6f6974 20202020 20202020 20202020     tion            
20044a78:	20202020 20202020 20202020 00202020                    .
20044a88:	6f5f7369 63656a62 616c5f74 5f726579     is_object_layer_
20044a98:	6e656469 69666974 20207265 20202020     identifier      
20044aa8:	20202020 20202020 20202020 20202020                     
20044ab8:	20202020 00000020 65646976 626f5f6f          ...video_ob
20044ac8:	7463656a 79616c5f 765f7265 64697265     ject_layer_verid
20044ad8:	20202020 20202020 20202020 20202020                     
20044ae8:	20202020 20202020 00202020 65646976                .vide
20044af8:	626f5f6f 7463656a 79616c5f 705f7265     o_object_layer_p
20044b08:	726f6972 20797469 20202020 20202020     riority         
20044b18:	20202020 20202020 20202020 20202020                     
20044b28:	00002020 65707361 725f7463 6f697461       ..aspect_ratio
20044b38:	666e695f 2020206f 20202020 20202020     _info           
20044b48:	20202020 20202020 20202020 20202020                     
20044b58:	00000000 5f726170 74646977 20202068     ....par_width   
20044b68:	20202020 20202020 20202020 20202020                     
20044b78:	20202020 20202020 00000000 5f726170             ....par_
20044b88:	67696568 20207468 20202020 20202020     height          
20044b98:	20202020 20202020 20202020 20202020                     
20044ba8:	00000000 5f6c6f76 746e6f63 5f6c6f72     ....vol_control_
20044bb8:	61726170 6574656d 20207372 20202020     parameters      
20044bc8:	20202020 20202020 20202020 20202020                     
20044bd8:	20202020 00000020 6f726863 665f616d          ...chroma_f
20044be8:	616d726f 20202074 20202020 20202020     ormat           
20044bf8:	20202020 20202020 20202020 20202020                     
20044c08:	00000000 5f776f6c 616c6564 20202079     ....low_delay   
20044c18:	20202020 20202020 20202020 20202020                     
20044c28:	20202020 20202020 00000000 5f766276             ....vbv_
20044c38:	61726170 6574656d 20207372 20202020     parameters      
20044c48:	20202020 20202020 20202020 20202020                     
20044c58:	20202020 00000020 73726966 61685f74          ...first_ha
20044c68:	625f666c 725f7469 20657461 20202020     lf_bit_rate     
20044c78:	20202020 20202020 20202020 20202020                     
20044c88:	20202020 00002020 6b72616d 625f7265           ..marker_b
20044c98:	20207469 20202020 20202020 20202020     it              
20044ca8:	20202020 20202020 20202020 00000020                  ...
20044cb8:	7474616c 685f7265 5f666c61 5f746962     latter_half_bit_
20044cc8:	65746172 20202020 20202020 20202020     rate            
20044cd8:	20202020 20202020 20202020 00202020                    .
20044ce8:	73726966 61685f74 765f666c 625f7662     first_half_vbv_b
20044cf8:	65666675 69735f72 2020657a 20202020     uffer_size      
20044d08:	20202020 20202020 20202020 20202020                     
20044d18:	20202020 00000020 7474616c 685f7265          ...latter_h
20044d28:	5f666c61 5f766276 66667562 735f7265     alf_vbv_buffer_s
20044d38:	20657a69 20202020 20202020 20202020     ize             
20044d48:	20202020 20202020 20202020 00002020                   ..
20044d58:	73726966 61685f74 765f666c 6f5f7662     first_half_vbv_o
20044d68:	70756363 79636e61 20202020 20202020     ccupancy        
20044d78:	20202020 20202020 20202020 20202020                     
20044d88:	00202020 7474616c 685f7265 5f666c61        .latter_half_
20044d98:	5f766276 7563636f 636e6170 20202079     vbv_occupancy   
20044da8:	20202020 20202020 20202020 20202020                     
20044db8:	20202020 20202020 00000000 65646976             ....vide
20044dc8:	626f5f6f 7463656a 79616c5f 735f7265     o_object_layer_s
20044dd8:	65706168 20202020 20202020 20202020     hape            
20044de8:	20202020 20202020 20202020 00202020                    .
20044df8:	5f706f76 656d6974 636e695f 656d6572     vop_time_increme
20044e08:	725f746e 6c6f7365 6f697475 2020206e     nt_resolution   
20044e18:	20202020 20202020 20202020 20202020                     
20044e28:	20202020 20202020 00000000 65786966             ....fixe
20044e38:	6f765f64 61725f70 20206574 20202020     d_vop_rate      
20044e48:	20202020 20202020 20202020 20202020                     
20044e58:	20202020 00000020 5f706f76 656d6974          ...vop_time
20044e68:	636e695f 656d6572 725f746e 6c6f7365     _increment_resol
20044e78:	6f697475 69625f6e 20207374 20202020     ution_bits      
20044e88:	20202020 20202020 20202020 20202020                     
20044e98:	20202020 00000020 65646976 626f5f6f          ...video_ob
20044ea8:	7463656a 79616c5f 775f7265 68746469     ject_layer_width
20044eb8:	20202020 20202020 20202020 20202020                     
20044ec8:	20202020 20202020 00202020 65646976                .vide
20044ed8:	626f5f6f 7463656a 79616c5f 685f7265     o_object_layer_h
20044ee8:	68676965 20202074 20202020 20202020     eight           
20044ef8:	20202020 20202020 20202020 20202020                     
20044f08:	00000000 65746e69 63616c72 20206465     ....interlaced  
20044f18:	20202020 20202020 20202020 20202020                     
20044f28:	20202020 20202020 00000020 636d626f              ...obmc
20044f38:	7369645f 656c6261 20202020 20202020     _disable        
20044f48:	20202020 20202020 20202020 20202020                     
20044f58:	00202020 69727073 655f6574 6c62616e        .sprite_enabl
20044f68:	20202065 20202020 20202020 20202020     e               
20044f78:	20202020 20202020 20202020 00000000                 ....
20044f88:	5f746f6e 69625f38 20202074 20202020     not_8_bit       
20044f98:	20202020 20202020 20202020 20202020                     
20044fa8:	20202020 00000000 6e617571 79745f74         ....quant_ty
20044fb8:	20206570 20202020 20202020 20202020     pe              
20044fc8:	20202020 20202020 20202020 00000020                  ...
20044fd8:	706d6f63 6978656c 655f7974 6d697473     complexity_estim
20044fe8:	6f697461 69645f6e 6c626173 20202065     ation_disable   
20044ff8:	20202020 20202020 20202020 20202020                     
20045008:	20202020 20202020 00000000 79736572             ....resy
20045018:	6d5f636e 656b7261 69645f72 6c626173     nc_marker_disabl
20045028:	20202065 20202020 20202020 20202020     e               
20045038:	20202020 20202020 20202020 00000000                 ....
20045048:	61746164 7261705f 69746974 64656e6f     data_partitioned
20045058:	20202020 20202020 20202020 20202020                     
20045068:	20202020 20202020 00202020 6c616373                .scal
20045078:	6c696261 20797469 20202020 20202020     ability         
20045088:	20202020 20202020 20202020 20202020                     
20045098:	00002020 5f706f76 69646f63 745f676e       ..vop_coding_t
200450a8:	20657079 20202020 20202020 20202020     ype             
200450b8:	20202020 20202020 20202020 00002020                   ..
200450c8:	75646f6d 745f6f6c 5f656d69 65736162     modulo_time_base
200450d8:	20202020 20202020 20202020 20202020                     
200450e8:	20202020 20202020 00202020 5f706f76                .vop_
200450f8:	656d6974 636e695f 656d6572 2020746e     time_increment  
20045108:	20202020 20202020 20202020 20202020                     
20045118:	20202020 20202020 00000020 5f706f76              ...vop_
20045128:	65646f63 20202064 20202020 20202020     coded           
20045138:	20202020 20202020 20202020 20202020                     
20045148:	00000000 5f706f76 6e756f72 676e6964     ....vop_rounding
20045158:	7079745f 20202065 20202020 20202020     _type           
20045168:	20202020 20202020 20202020 20202020                     
20045178:	00000000 72746e69 63645f61 636c765f     ....intra_dc_vlc
20045188:	7268745f 20202020 20202020 20202020     _thr            
20045198:	20202020 20202020 20202020 00202020                    .
200451a8:	5f706f76 6e617571 20202074 20202020     vop_quant       
200451b8:	20202020 20202020 20202020 20202020                     
200451c8:	20202020 00000000 5f706f76 646f6366         ....vop_fcod
200451d8:	6f665f65 72617772 20202064 20202020     e_forward       
200451e8:	20202020 20202020 20202020 20202020                     
200451f8:	20202020 00000000 5f706f76 646f6366         ....vop_fcod
20045208:	61625f65 61776b63 20206472 20202020     e_backward      
20045218:	20202020 20202020 20202020 20202020                     
20045228:	20202020 00000020 5f746f6e 65646f63          ...not_code
20045238:	20202064 20202020 20202020 20202020     d               
20045248:	20202020 20202020 20202020 00000000                 ....
20045258:	7062636d 20202063 20202020 20202020     mcbpc           
20045268:	20202020 20202020 20202020 20202020                     
20045278:	00000000 705f6361 5f646572 67616c66     ....ac_pred_flag
20045288:	20202020 20202020 20202020 20202020                     
20045298:	20202020 20202020 00202020 79706263                .cbpy
200452a8:	20202020 20202020 20202020 20202020                     
200452b8:	20202020 20202020 00202020 61757164                .dqua
200452c8:	2020746e 20202020 20202020 20202020     nt              
200452d8:	20202020 20202020 20202020 00000020                  ...
200452e8:	735f6364 20657a69 20202020 20202020     dc_size         
200452f8:	20202020 00202020 645f6364 20206669            .dc_dif  
20045308:	20202020 20202020 20202020 00002020                   ..
20045318:	5f746567 66656f63 20202066 20202020     get_coeff       
20045328:	20202020 00000020 69726f68 746e6f7a          ...horizont
20045338:	6d5f6c61 61645f76 20206174 20202020     al_mv_data      
20045348:	20202020 00002020 69726f68 746e6f7a           ..horizont
20045358:	6d5f6c61 65725f76 75646973 20206c61     al_mv_residual  
20045368:	20202020 20202020 00002020 74726576               ..vert
20045378:	6c616369 5f766d5f 61746164 20202020     ical_mv_data    
20045388:	20202020 20202020 00000000 74726576             ....vert
20045398:	6c616369 5f766d5f 69736572 6c617564     ical_mv_residual
200453a8:	20202020 20202020 20202020 00000000                 ....
200453b8:	20026674 200266d4 200267bc 20026824     tf. .f. .g. $h. 
200453c8:	200268cc 200269f8 20026aa0 20026fe4     .h. .i. .j. .o. 
200453d8:	2002708c 200272f4 200273d0 20027438     .p. .r. .s. 8t. 
200453e8:	200274a0 20027508 20027570 200275d8     .t. .u. pu. .u. 
200453f8:	20027640 200276a8 200278f4 2002799c     @v. .v. .x. .y. 
20045408:	20027a44 61766461 0065636e 68746567     Dz. advance.geth
20045418:	00000000 77746567 00000000 64657270     ....getw....pred
20045428:	00746369 64616572 00000000 2002acc8     ict.read....... 
20045438:	2002ad14 2002ad80 2002adec 2002aec4     ... ... ... ... 
20045448:	61766461 0065636e 68746567 00000000     advance.geth....
20045458:	77746567 00000000 65746e69 00000072     getw....inter...
20045468:	72746e69 00000061 64616572 00000000     intra...read....
20045478:	00746173 2002ec4c 2002ec98 2002ed04     sat.L.. ... ... 
20045488:	2002ed70 2002eddc 2002ee48 2002f25c     p.. ... H.. \.. 
20045498:	61766461 0065636e 64657270 00000000     advance.pred....
200454a8:	72617473 00000074 00006361 72617473     start...ac..star
200454b8:	00000074                                t...

200454bc <Scanmode>:
200454bc:	06050100 1c1b0f0e 0d070402 2a1d1a10     ...............*
200454cc:	110c0803 2b291e19 18120b09 352c281f     ......)+.....(,5
200454dc:	2017130a 36342d27 26211614 3c37332e     ... '-46..!&.37<
200454ec:	2f252215 3d3b3832 31302423 3f3e3a39     ."%/28;=#$019:>?
200454fc:	14060400 34262416 15070501 35272517     .....$&4.....%'5
2004550c:	18130802 36322822 19120903 37332923     ...."(26....#)37
2004551c:	1e1a110a 3c382e2a 1f1b100b 3d392f2b     ....*.8<....+/9=
2004552c:	201c0f0c 3e3a302c 211d0e0d 3f3b312d     ... ,0:>...!-1;?
2004553c:	03020100 0d0c0b0a 09080504 0e0f1011     ................
2004554c:	12130706 1d1c1b1a 19181514 21201f1e     .............. !
2004555c:	23221716 2d2c2b2a 29282524 31302f2e     .."#*+,-$%()./01
2004556c:	33322726 3b3a3938 37363534 3f3e3d3c     &'2389:;4567<=>?

2004557c <scale>:
2004557c:	00000400 00000472 000006c2 00000649     ....r.......I...
2004558c:	00000400 00000649 000006c2 00000472     ....I.......r...
2004559c:	00000472 000004f0 00000782 000006fc     r...............
200455ac:	00000472 000006fc 00000782 000004f0     r...............
200455bc:	000006c2 00000782 00000b6b 00000a9e     ........k.......
200455cc:	000006c2 00000a9e 00000b6b 00000782     ........k.......
200455dc:	00000649 000006fc 00000a9e 000009e0     I...............
200455ec:	00000649 000009e0 00000a9e 000006fc     I...............
200455fc:	00000400 00000472 000006c2 00000649     ....r.......I...
2004560c:	00000400 00000649 000006c2 00000472     ....I.......r...
2004561c:	00000649 000006fc 00000a9e 000009e0     I...............
2004562c:	00000649 000009e0 00000a9e 000006fc     I...............
2004563c:	000006c2 00000782 00000b6b 00000a9e     ........k.......
2004564c:	000006c2 00000a9e 00000b6b 00000782     ........k.......
2004565c:	00000472 000004f0 00000782 000006fc     r...............
2004566c:	00000472 000006fc 00000782 000004f0     r...............

2004567c <fifo_0>:
2004567c:	00000200 80000000 00000001 80000200     ................
2004568c:	80000204                                ....

20045690 <fifo_1>:
20045690:	00000200 80000208 00000001 80000408     ................
200456a0:	8000040c                                ....

200456a4 <fifo_2>:
200456a4:	00000200 80000410 00000001 80000610     ................
200456b4:	80000614                                ....

200456b8 <fifo_3>:
200456b8:	00000200 80000618 00000001 80000a18     ................
200456c8:	80000a1c                                ....

200456cc <fifo_4>:
200456cc:	00000200 80000a20 00000001 80000c20     .... ....... ...
200456dc:	80000c24                                $...

200456e0 <fifo_5>:
200456e0:	00000200 80000c28 00000001 80001028     ....(.......(...
200456f0:	8000102c                                ,...

200456f4 <fifo_6>:
200456f4:	00000200 80001030 00000001 80001430     ....0.......0...
20045704:	80001434                                4...

20045708 <fifo_7>:
20045708:	00000200 80001438 00000001 80001c38     ....8.......8...
20045718:	80001c3c                                <...

2004571c <fifo_8>:
2004571c:	00000200 80001c40 00000006 80002040     ....@.......@ ..
2004572c:	80002058                                X ..

20045730 <fifo_9>:
20045730:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
20045740:	80002460                                `$..

20045744 <fifo_10>:
20045744:	00000200 80002464 00000001 80002864     ....d$......d(..
20045754:	80002868                                h(..

20045758 <fifo_11>:
20045758:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
20045768:	80002c70                                p,..

2004576c <fifo_12>:
2004576c:	00000200 80002c74 00000001 80003074     ....t,......t0..
2004577c:	80003078                                x0..

20045780 <fifo_13>:
20045780:	00000200 8000307c 00000001 8000347c     ....|0......|4..
20045790:	80003480                                .4..

20045794 <fifo_14>:
20045794:	00000200 80003484 00000001 80003884     .....4.......8..
200457a4:	80003888                                .8..

200457a8 <fifo_15>:
200457a8:	00000200 8000388c 00000001 80003c8c     .....8.......<..
200457b8:	80003c90                                .<..

200457bc <fifo_16>:
200457bc:	00000200 80003c94 00000001 80004094     .....<.......@..
200457cc:	80004098                                .@..

200457d0 <fifo_17>:
200457d0:	00000200 8000409c 00000001 8000449c     .....@.......D..
200457e0:	800044a0                                .D..

200457e4 <fifo_18>:
200457e4:	00000200 800044a4 00000001 800048a4     .....D.......H..
200457f4:	800048a8                                .H..

200457f8 <fifo_19>:
200457f8:	00000200 800048ac 00000001 80004cac     .....H.......L..
20045808:	80004cb0                                .L..

2004580c <fifo_20>:
2004580c:	00000200 80004cb4 00000001 800050b4     .....L.......P..
2004581c:	800050b8                                .P..

20045820 <fifo_21>:
20045820:	00000200 800050bc 00000001 800054bc     .....P.......T..
20045830:	800054c0                                .T..

20045834 <fifo_22>:
20045834:	00000200 800054c4 00000001 800058c4     .....T.......X..
20045844:	800058c8                                .X..

20045848 <fifo_23>:
20045848:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20045858:	80005cd0                                .\..

2004585c <fifo_24>:
2004585c:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
2004586c:	80005ed8                                .^..

20045870 <fifo_25>:
20045870:	00000200 80005edc 00000001 800066dc     .....^.......f..
20045880:	800066e0                                .f..

20045884 <fifo_26>:
20045884:	00000200 800066e4 00000001 800068e4     .....f.......h..
20045894:	800068e8                                .h..

20045898 <fifo_27>:
20045898:	00000200 800068ec 00000001 80006aec     .....h.......j..
200458a8:	80006af0                                .j..

200458ac <fifo_28>:
200458ac:	00000200 80006af4 00000001 80006ef4     .....j.......n..
200458bc:	80006ef8                                .n..

200458c0 <fifo_29>:
200458c0:	00000200 80006efc 00000002 800072fc     .....n.......r..
200458d0:	80007304                                .s..

200458d4 <fifo_30>:
200458d4:	00000200 80007308 00000001 80007708     .....s.......w..
200458e4:	8000770c                                .w..

200458e8 <fifo_31>:
200458e8:	00000200 80007710 00000001 80007910     .....w.......y..
200458f8:	80007914                                .y..

200458fc <source_O>:
200458fc:	2004567c                                |V. 

20045900 <decoder_parser_parseheaders_BYTE>:
20045900:	2004567c                                |V. 

20045904 <decoder_merger_YUV>:
20045904:	20045690                                .V. 

20045908 <display_B>:
20045908:	20045690                                .V. 

2004590c <decoder_parser_parseheaders_QP>:
2004590c:	200456a4                                .V. 

20045910 <decoder_texture_DCReconstruction_invpred_QP>:
20045910:	200456a4                                .V. 

20045914 <decoder_parser_parseheaders_HEIGHT>:
20045914:	200456b8                                .V. 

20045918 <display_HEIGHT>:
20045918:	200456b8                                .V. 

2004591c <decoder_parser_parseheaders_RUN>:
2004591c:	200456cc                                .V. 

20045920 <decoder_parser_blkexp_RUN>:
20045920:	200456cc                                .V. 

20045924 <decoder_parser_parseheaders_MV>:
20045924:	200456e0                                .V. 

20045928 <decoder_parser_mvrecon_MVIN>:
20045928:	200456e0                                .V. 

2004592c <decoder_parser_parseheaders_WIDTH>:
2004592c:	200456f4                                .V. 

20045930 <display_WIDTH>:
20045930:	200456f4                                .V. 

20045934 <decoder_parser_parseheaders_LAST>:
20045934:	20045708                                .W. 

20045938 <decoder_parser_blkexp_LAST>:
20045938:	20045708                                .W. 

2004593c <decoder_parser_parseheaders_BTYPE>:
2004593c:	2004571c                                .W. 

20045940 <decoder_parser_mvseq_BTYPE>:
20045940:	2004571c                                .W. 

20045944 <decoder_parser_mvrecon_BTYPE>:
20045944:	2004571c                                .W. 

20045948 <decoder_texture_DCReconstruction_addressing_BTYPE>:
20045948:	2004571c                                .W. 

2004594c <decoder_texture_DCReconstruction_invpred_BTYPE>:
2004594c:	2004571c                                .W. 

20045950 <decoder_motion_add_BTYPE>:
20045950:	2004571c                                .W. 

20045954 <decoder_motion_framebuf_BTYPE>:
20045954:	2004571c                                .W. 

20045958 <decoder_parser_parseheaders_VALUE>:
20045958:	20045730                                0W. 

2004595c <decoder_parser_blkexp_VALUE>:
2004595c:	20045730                                0W. 

20045960 <decoder_parser_mvseq_A>:
20045960:	20045744                                DW. 

20045964 <decoder_parser_mvrecon_A>:
20045964:	20045744                                DW. 

20045968 <decoder_parser_blkexp_QFS>:
20045968:	20045758                                XW. 

2004596c <decoder_texture_DCsplit_IN>:
2004596c:	20045758                                XW. 

20045970 <decoder_parser_mvrecon_MV>:
20045970:	2004576c                                lW. 

20045974 <decoder_motion_framebuf_MV>:
20045974:	2004576c                                lW. 

20045978 <decoder_texture_DCsplit_AC>:
20045978:	20045780                                .W. 

2004597c <decoder_texture_IS_QFS_AC>:
2004597c:	20045780                                .W. 

20045980 <decoder_texture_DCsplit_DC>:
20045980:	20045794                                .W. 

20045984 <decoder_texture_DCReconstruction_invpred_QFS_DC>:
20045984:	20045794                                .W. 

20045988 <decoder_texture_IS_PQF_AC>:
20045988:	200457a8                                .W. 

2004598c <decoder_texture_IAP_PQF_AC>:
2004598c:	200457a8                                .W. 

20045990 <decoder_texture_IAP_QF_AC>:
20045990:	200457bc                                .W. 

20045994 <decoder_texture_IQ_AC>:
20045994:	200457bc                                .W. 

20045998 <decoder_texture_IQ_OUT>:
20045998:	200457d0                                .W. 

2004599c <decoder_texture_idct2d_IN>:
2004599c:	200457d0                                .W. 

200459a0 <decoder_texture_idct2d_OUT>:
200459a0:	200457e4                                .W. 

200459a4 <decoder_motion_add_TEX>:
200459a4:	200457e4                                .W. 

200459a8 <decoder_texture_DCReconstruction_addressing_B>:
200459a8:	200457f8                                .W. 

200459ac <decoder_texture_DCReconstruction_invpred_B>:
200459ac:	200457f8                                .W. 

200459b0 <decoder_texture_DCReconstruction_addressing_A>:
200459b0:	2004580c                                .X. 

200459b4 <decoder_texture_DCReconstruction_invpred_A>:
200459b4:	2004580c                                .X. 

200459b8 <decoder_texture_DCReconstruction_addressing_C>:
200459b8:	20045820                                 X. 

200459bc <decoder_texture_DCReconstruction_invpred_C>:
200459bc:	20045820                                 X. 

200459c0 <decoder_texture_DCReconstruction_invpred_PTR>:
200459c0:	20045834                                4X. 

200459c4 <decoder_texture_IAP_PTR>:
200459c4:	20045834                                4X. 

200459c8 <decoder_texture_DCReconstruction_invpred_QF_DC>:
200459c8:	20045848                                HX. 

200459cc <decoder_texture_IQ_DC>:
200459cc:	20045848                                HX. 

200459d0 <decoder_texture_DCReconstruction_invpred_MODE>:
200459d0:	2004585c                                \X. 

200459d4 <decoder_texture_IS_AC_PRED_DIR>:
200459d4:	2004585c                                \X. 

200459d8 <decoder_texture_DCReconstruction_invpred_SIGNED>:
200459d8:	20045870                                pX. 

200459dc <decoder_texture_idct2d_SIGNED>:
200459dc:	20045870                                pX. 

200459e0 <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>:
200459e0:	20045884                                .X. 

200459e4 <decoder_texture_IAP_AC_PRED_DIR>:
200459e4:	20045884                                .X. 

200459e8 <decoder_texture_DCReconstruction_invpred_QUANT>:
200459e8:	20045898                                .X. 

200459ec <decoder_texture_IQ_QP>:
200459ec:	20045898                                .X. 

200459f0 <decoder_motion_interpolation_MOT>:
200459f0:	200458ac                                .X. 

200459f4 <decoder_motion_add_MOT>:
200459f4:	200458ac                                .X. 

200459f8 <decoder_motion_add_VID>:
200459f8:	200458c0                                .X. 

200459fc <decoder_motion_framebuf_WD>:
200459fc:	200458c0                                .X. 

20045a00 <decoder_merger_YUV_i>:
20045a00:	200458c0                                .X. 

20045a04 <decoder_motion_framebuf_RD>:
20045a04:	200458d4                                .X. 

20045a08 <decoder_motion_interpolation_RD>:
20045a08:	200458d4                                .X. 

20045a0c <decoder_motion_framebuf_halfpel>:
20045a0c:	200458e8                                .X. 

20045a10 <decoder_motion_interpolation_halfpel>:
20045a10:	200458e8                                .X. 

20045a14 <needInit>:
20045a14:	00000001                                ....

20045a18 <stateNames>:
20045a18:	2003bd14 2003bd18 2003bd1c              ... ... ... 

20045a24 <fifo_0>:
20045a24:	00000200 80000000 00000001 80000200     ................
20045a34:	80000204                                ....

20045a38 <fifo_1>:
20045a38:	00000200 80000208 00000001 80000408     ................
20045a48:	8000040c                                ....

20045a4c <fifo_2>:
20045a4c:	00000200 80000410 00000001 80000610     ................
20045a5c:	80000614                                ....

20045a60 <fifo_3>:
20045a60:	00000200 80000618 00000001 80000a18     ................
20045a70:	80000a1c                                ....

20045a74 <fifo_4>:
20045a74:	00000200 80000a20 00000001 80000c20     .... ....... ...
20045a84:	80000c24                                $...

20045a88 <fifo_5>:
20045a88:	00000200 80000c28 00000001 80001028     ....(.......(...
20045a98:	8000102c                                ,...

20045a9c <fifo_6>:
20045a9c:	00000200 80001030 00000001 80001430     ....0.......0...
20045aac:	80001434                                4...

20045ab0 <fifo_7>:
20045ab0:	00000200 80001438 00000001 80001c38     ....8.......8...
20045ac0:	80001c3c                                <...

20045ac4 <fifo_8>:
20045ac4:	00000200 80001c40 00000006 80002040     ....@.......@ ..
20045ad4:	80002058                                X ..

20045ad8 <fifo_9>:
20045ad8:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
20045ae8:	80002460                                `$..

20045aec <fifo_10>:
20045aec:	00000200 80002464 00000001 80002864     ....d$......d(..
20045afc:	80002868                                h(..

20045b00 <fifo_11>:
20045b00:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
20045b10:	80002c70                                p,..

20045b14 <fifo_12>:
20045b14:	00000200 80002c74 00000001 80003074     ....t,......t0..
20045b24:	80003078                                x0..

20045b28 <fifo_13>:
20045b28:	00000200 8000307c 00000001 8000347c     ....|0......|4..
20045b38:	80003480                                .4..

20045b3c <fifo_14>:
20045b3c:	00000200 80003484 00000001 80003884     .....4.......8..
20045b4c:	80003888                                .8..

20045b50 <fifo_15>:
20045b50:	00000200 8000388c 00000001 80003c8c     .....8.......<..
20045b60:	80003c90                                .<..

20045b64 <fifo_16>:
20045b64:	00000200 80003c94 00000001 80004094     .....<.......@..
20045b74:	80004098                                .@..

20045b78 <fifo_17>:
20045b78:	00000200 8000409c 00000001 8000449c     .....@.......D..
20045b88:	800044a0                                .D..

20045b8c <fifo_18>:
20045b8c:	00000200 800044a4 00000001 800048a4     .....D.......H..
20045b9c:	800048a8                                .H..

20045ba0 <fifo_19>:
20045ba0:	00000200 800048ac 00000001 80004cac     .....H.......L..
20045bb0:	80004cb0                                .L..

20045bb4 <fifo_20>:
20045bb4:	00000200 80004cb4 00000001 800050b4     .....L.......P..
20045bc4:	800050b8                                .P..

20045bc8 <fifo_21>:
20045bc8:	00000200 800050bc 00000001 800054bc     .....P.......T..
20045bd8:	800054c0                                .T..

20045bdc <fifo_22>:
20045bdc:	00000200 800054c4 00000001 800058c4     .....T.......X..
20045bec:	800058c8                                .X..

20045bf0 <fifo_23>:
20045bf0:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20045c00:	80005cd0                                .\..

20045c04 <fifo_24>:
20045c04:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20045c14:	80005ed8                                .^..

20045c18 <fifo_25>:
20045c18:	00000200 80005edc 00000001 800066dc     .....^.......f..
20045c28:	800066e0                                .f..

20045c2c <fifo_26>:
20045c2c:	00000200 800066e4 00000001 800068e4     .....f.......h..
20045c3c:	800068e8                                .h..

20045c40 <fifo_27>:
20045c40:	00000200 800068ec 00000001 80006aec     .....h.......j..
20045c50:	80006af0                                .j..

20045c54 <fifo_28>:
20045c54:	00000200 80006af4 00000001 80006ef4     .....j.......n..
20045c64:	80006ef8                                .n..

20045c68 <fifo_29>:
20045c68:	00000200 80006efc 00000002 800072fc     .....n.......r..
20045c78:	80007304                                .s..

20045c7c <fifo_30>:
20045c7c:	00000200 80007308 00000001 80007708     .....s.......w..
20045c8c:	8000770c                                .w..

20045c90 <fifo_31>:
20045c90:	00000200 80007710 00000001 80007910     .....w.......y..
20045ca0:	80007914                                .y..

20045ca4 <source_O>:
20045ca4:	20045a24                                $Z. 

20045ca8 <decoder_parser_parseheaders_BYTE>:
20045ca8:	20045a24                                $Z. 

20045cac <decoder_merger_YUV>:
20045cac:	20045a38                                8Z. 

20045cb0 <display_B>:
20045cb0:	20045a38                                8Z. 

20045cb4 <decoder_parser_parseheaders_QP>:
20045cb4:	20045a4c                                LZ. 

20045cb8 <decoder_texture_DCReconstruction_invpred_QP>:
20045cb8:	20045a4c                                LZ. 

20045cbc <decoder_parser_parseheaders_HEIGHT>:
20045cbc:	20045a60                                `Z. 

20045cc0 <display_HEIGHT>:
20045cc0:	20045a60                                `Z. 

20045cc4 <decoder_parser_parseheaders_RUN>:
20045cc4:	20045a74                                tZ. 

20045cc8 <decoder_parser_blkexp_RUN>:
20045cc8:	20045a74                                tZ. 

20045ccc <decoder_parser_parseheaders_MV>:
20045ccc:	20045a88                                .Z. 

20045cd0 <decoder_parser_mvrecon_MVIN>:
20045cd0:	20045a88                                .Z. 

20045cd4 <decoder_parser_parseheaders_WIDTH>:
20045cd4:	20045a9c                                .Z. 

20045cd8 <display_WIDTH>:
20045cd8:	20045a9c                                .Z. 

20045cdc <decoder_parser_parseheaders_LAST>:
20045cdc:	20045ab0                                .Z. 

20045ce0 <decoder_parser_blkexp_LAST>:
20045ce0:	20045ab0                                .Z. 

20045ce4 <decoder_parser_parseheaders_BTYPE>:
20045ce4:	20045ac4                                .Z. 

20045ce8 <decoder_parser_mvseq_BTYPE>:
20045ce8:	20045ac4                                .Z. 

20045cec <decoder_parser_mvrecon_BTYPE>:
20045cec:	20045ac4                                .Z. 

20045cf0 <decoder_texture_DCReconstruction_addressing_BTYPE>:
20045cf0:	20045ac4                                .Z. 

20045cf4 <decoder_texture_DCReconstruction_invpred_BTYPE>:
20045cf4:	20045ac4                                .Z. 

20045cf8 <decoder_motion_add_BTYPE>:
20045cf8:	20045ac4                                .Z. 

20045cfc <decoder_motion_framebuf_BTYPE>:
20045cfc:	20045ac4                                .Z. 

20045d00 <decoder_parser_parseheaders_VALUE>:
20045d00:	20045ad8                                .Z. 

20045d04 <decoder_parser_blkexp_VALUE>:
20045d04:	20045ad8                                .Z. 

20045d08 <decoder_parser_mvseq_A>:
20045d08:	20045aec                                .Z. 

20045d0c <decoder_parser_mvrecon_A>:
20045d0c:	20045aec                                .Z. 

20045d10 <decoder_parser_blkexp_QFS>:
20045d10:	20045b00                                .[. 

20045d14 <decoder_texture_DCsplit_IN>:
20045d14:	20045b00                                .[. 

20045d18 <decoder_parser_mvrecon_MV>:
20045d18:	20045b14                                .[. 

20045d1c <decoder_motion_framebuf_MV>:
20045d1c:	20045b14                                .[. 

20045d20 <decoder_texture_DCsplit_AC>:
20045d20:	20045b28                                ([. 

20045d24 <decoder_texture_IS_QFS_AC>:
20045d24:	20045b28                                ([. 

20045d28 <decoder_texture_DCsplit_DC>:
20045d28:	20045b3c                                <[. 

20045d2c <decoder_texture_DCReconstruction_invpred_QFS_DC>:
20045d2c:	20045b3c                                <[. 

20045d30 <decoder_texture_IS_PQF_AC>:
20045d30:	20045b50                                P[. 

20045d34 <decoder_texture_IAP_PQF_AC>:
20045d34:	20045b50                                P[. 

20045d38 <decoder_texture_IAP_QF_AC>:
20045d38:	20045b64                                d[. 

20045d3c <decoder_texture_IQ_AC>:
20045d3c:	20045b64                                d[. 

20045d40 <decoder_texture_IQ_OUT>:
20045d40:	20045b78                                x[. 

20045d44 <decoder_texture_idct2d_IN>:
20045d44:	20045b78                                x[. 

20045d48 <decoder_texture_idct2d_OUT>:
20045d48:	20045b8c                                .[. 

20045d4c <decoder_motion_add_TEX>:
20045d4c:	20045b8c                                .[. 

20045d50 <decoder_texture_DCReconstruction_addressing_B>:
20045d50:	20045ba0                                .[. 

20045d54 <decoder_texture_DCReconstruction_invpred_B>:
20045d54:	20045ba0                                .[. 

20045d58 <decoder_texture_DCReconstruction_addressing_A>:
20045d58:	20045bb4                                .[. 

20045d5c <decoder_texture_DCReconstruction_invpred_A>:
20045d5c:	20045bb4                                .[. 

20045d60 <decoder_texture_DCReconstruction_addressing_C>:
20045d60:	20045bc8                                .[. 

20045d64 <decoder_texture_DCReconstruction_invpred_C>:
20045d64:	20045bc8                                .[. 

20045d68 <decoder_texture_DCReconstruction_invpred_PTR>:
20045d68:	20045bdc                                .[. 

20045d6c <decoder_texture_IAP_PTR>:
20045d6c:	20045bdc                                .[. 

20045d70 <decoder_texture_DCReconstruction_invpred_QF_DC>:
20045d70:	20045bf0                                .[. 

20045d74 <decoder_texture_IQ_DC>:
20045d74:	20045bf0                                .[. 

20045d78 <decoder_texture_DCReconstruction_invpred_MODE>:
20045d78:	20045c04                                .\. 

20045d7c <decoder_texture_IS_AC_PRED_DIR>:
20045d7c:	20045c04                                .\. 

20045d80 <decoder_texture_DCReconstruction_invpred_SIGNED>:
20045d80:	20045c18                                .\. 

20045d84 <decoder_texture_idct2d_SIGNED>:
20045d84:	20045c18                                .\. 

20045d88 <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>:
20045d88:	20045c2c                                ,\. 

20045d8c <decoder_texture_IAP_AC_PRED_DIR>:
20045d8c:	20045c2c                                ,\. 

20045d90 <decoder_texture_DCReconstruction_invpred_QUANT>:
20045d90:	20045c40                                @\. 

20045d94 <decoder_texture_IQ_QP>:
20045d94:	20045c40                                @\. 

20045d98 <decoder_motion_interpolation_MOT>:
20045d98:	20045c54                                T\. 

20045d9c <decoder_motion_add_MOT>:
20045d9c:	20045c54                                T\. 

20045da0 <decoder_motion_add_VID>:
20045da0:	20045c68                                h\. 

20045da4 <decoder_motion_framebuf_WD>:
20045da4:	20045c68                                h\. 

20045da8 <decoder_merger_YUV_i>:
20045da8:	20045c68                                h\. 

20045dac <decoder_motion_framebuf_RD>:
20045dac:	20045c7c                                |\. 

20045db0 <decoder_motion_interpolation_RD>:
20045db0:	20045c7c                                |\. 

20045db4 <decoder_motion_framebuf_halfpel>:
20045db4:	20045c90                                .\. 

20045db8 <decoder_motion_interpolation_halfpel>:
20045db8:	20045c90                                .\. 

20045dbc <needInit>:
20045dbc:	00000001                                ....

20045dc0 <stateNames>:
20045dc0:	2003bd20 2003bd24 2003bd2c 2003bd34      .. $.. ,.. 4.. 
20045dd0:	2003bd3c 2003bd44                       <.. D.. 

20045dd8 <fifo_0>:
20045dd8:	00000200 80000000 00000001 80000200     ................
20045de8:	80000204                                ....

20045dec <fifo_1>:
20045dec:	00000200 80000208 00000001 80000408     ................
20045dfc:	8000040c                                ....

20045e00 <fifo_2>:
20045e00:	00000200 80000410 00000001 80000610     ................
20045e10:	80000614                                ....

20045e14 <fifo_3>:
20045e14:	00000200 80000618 00000001 80000a18     ................
20045e24:	80000a1c                                ....

20045e28 <fifo_4>:
20045e28:	00000200 80000a20 00000001 80000c20     .... ....... ...
20045e38:	80000c24                                $...

20045e3c <fifo_5>:
20045e3c:	00000200 80000c28 00000001 80001028     ....(.......(...
20045e4c:	8000102c                                ,...

20045e50 <fifo_6>:
20045e50:	00000200 80001030 00000001 80001430     ....0.......0...
20045e60:	80001434                                4...

20045e64 <fifo_7>:
20045e64:	00000200 80001438 00000001 80001c38     ....8.......8...
20045e74:	80001c3c                                <...

20045e78 <fifo_8>:
20045e78:	00000200 80001c40 00000006 80002040     ....@.......@ ..
20045e88:	80002058                                X ..

20045e8c <fifo_9>:
20045e8c:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
20045e9c:	80002460                                `$..

20045ea0 <fifo_10>:
20045ea0:	00000200 80002464 00000001 80002864     ....d$......d(..
20045eb0:	80002868                                h(..

20045eb4 <fifo_11>:
20045eb4:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
20045ec4:	80002c70                                p,..

20045ec8 <fifo_12>:
20045ec8:	00000200 80002c74 00000001 80003074     ....t,......t0..
20045ed8:	80003078                                x0..

20045edc <fifo_13>:
20045edc:	00000200 8000307c 00000001 8000347c     ....|0......|4..
20045eec:	80003480                                .4..

20045ef0 <fifo_14>:
20045ef0:	00000200 80003484 00000001 80003884     .....4.......8..
20045f00:	80003888                                .8..

20045f04 <fifo_15>:
20045f04:	00000200 8000388c 00000001 80003c8c     .....8.......<..
20045f14:	80003c90                                .<..

20045f18 <fifo_16>:
20045f18:	00000200 80003c94 00000001 80004094     .....<.......@..
20045f28:	80004098                                .@..

20045f2c <fifo_17>:
20045f2c:	00000200 8000409c 00000001 8000449c     .....@.......D..
20045f3c:	800044a0                                .D..

20045f40 <fifo_18>:
20045f40:	00000200 800044a4 00000001 800048a4     .....D.......H..
20045f50:	800048a8                                .H..

20045f54 <fifo_19>:
20045f54:	00000200 800048ac 00000001 80004cac     .....H.......L..
20045f64:	80004cb0                                .L..

20045f68 <fifo_20>:
20045f68:	00000200 80004cb4 00000001 800050b4     .....L.......P..
20045f78:	800050b8                                .P..

20045f7c <fifo_21>:
20045f7c:	00000200 800050bc 00000001 800054bc     .....P.......T..
20045f8c:	800054c0                                .T..

20045f90 <fifo_22>:
20045f90:	00000200 800054c4 00000001 800058c4     .....T.......X..
20045fa0:	800058c8                                .X..

20045fa4 <fifo_23>:
20045fa4:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20045fb4:	80005cd0                                .\..

20045fb8 <fifo_24>:
20045fb8:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20045fc8:	80005ed8                                .^..

20045fcc <fifo_25>:
20045fcc:	00000200 80005edc 00000001 800066dc     .....^.......f..
20045fdc:	800066e0                                .f..

20045fe0 <fifo_26>:
20045fe0:	00000200 800066e4 00000001 800068e4     .....f.......h..
20045ff0:	800068e8                                .h..

20045ff4 <fifo_27>:
20045ff4:	00000200 800068ec 00000001 80006aec     .....h.......j..
20046004:	80006af0                                .j..

20046008 <fifo_28>:
20046008:	00000200 80006af4 00000001 80006ef4     .....j.......n..
20046018:	80006ef8                                .n..

2004601c <fifo_29>:
2004601c:	00000200 80006efc 00000002 800072fc     .....n.......r..
2004602c:	80007304                                .s..

20046030 <fifo_30>:
20046030:	00000200 80007308 00000001 80007708     .....s.......w..
20046040:	8000770c                                .w..

20046044 <fifo_31>:
20046044:	00000200 80007710 00000001 80007910     .....w.......y..
20046054:	80007914                                .y..

20046058 <source_O>:
20046058:	20045dd8                                .]. 

2004605c <decoder_parser_parseheaders_BYTE>:
2004605c:	20045dd8                                .]. 

20046060 <decoder_merger_YUV>:
20046060:	20045dec                                .]. 

20046064 <display_B>:
20046064:	20045dec                                .]. 

20046068 <decoder_parser_parseheaders_QP>:
20046068:	20045e00                                .^. 

2004606c <decoder_texture_DCReconstruction_invpred_QP>:
2004606c:	20045e00                                .^. 

20046070 <decoder_parser_parseheaders_HEIGHT>:
20046070:	20045e14                                .^. 

20046074 <display_HEIGHT>:
20046074:	20045e14                                .^. 

20046078 <decoder_parser_parseheaders_RUN>:
20046078:	20045e28                                (^. 

2004607c <decoder_parser_blkexp_RUN>:
2004607c:	20045e28                                (^. 

20046080 <decoder_parser_parseheaders_MV>:
20046080:	20045e3c                                <^. 

20046084 <decoder_parser_mvrecon_MVIN>:
20046084:	20045e3c                                <^. 

20046088 <decoder_parser_parseheaders_WIDTH>:
20046088:	20045e50                                P^. 

2004608c <display_WIDTH>:
2004608c:	20045e50                                P^. 

20046090 <decoder_parser_parseheaders_LAST>:
20046090:	20045e64                                d^. 

20046094 <decoder_parser_blkexp_LAST>:
20046094:	20045e64                                d^. 

20046098 <decoder_parser_parseheaders_BTYPE>:
20046098:	20045e78                                x^. 

2004609c <decoder_parser_mvseq_BTYPE>:
2004609c:	20045e78                                x^. 

200460a0 <decoder_parser_mvrecon_BTYPE>:
200460a0:	20045e78                                x^. 

200460a4 <decoder_texture_DCReconstruction_addressing_BTYPE>:
200460a4:	20045e78                                x^. 

200460a8 <decoder_texture_DCReconstruction_invpred_BTYPE>:
200460a8:	20045e78                                x^. 

200460ac <decoder_motion_add_BTYPE>:
200460ac:	20045e78                                x^. 

200460b0 <decoder_motion_framebuf_BTYPE>:
200460b0:	20045e78                                x^. 

200460b4 <decoder_parser_parseheaders_VALUE>:
200460b4:	20045e8c                                .^. 

200460b8 <decoder_parser_blkexp_VALUE>:
200460b8:	20045e8c                                .^. 

200460bc <decoder_parser_mvseq_A>:
200460bc:	20045ea0                                .^. 

200460c0 <decoder_parser_mvrecon_A>:
200460c0:	20045ea0                                .^. 

200460c4 <decoder_parser_blkexp_QFS>:
200460c4:	20045eb4                                .^. 

200460c8 <decoder_texture_DCsplit_IN>:
200460c8:	20045eb4                                .^. 

200460cc <decoder_parser_mvrecon_MV>:
200460cc:	20045ec8                                .^. 

200460d0 <decoder_motion_framebuf_MV>:
200460d0:	20045ec8                                .^. 

200460d4 <decoder_texture_DCsplit_AC>:
200460d4:	20045edc                                .^. 

200460d8 <decoder_texture_IS_QFS_AC>:
200460d8:	20045edc                                .^. 

200460dc <decoder_texture_DCsplit_DC>:
200460dc:	20045ef0                                .^. 

200460e0 <decoder_texture_DCReconstruction_invpred_QFS_DC>:
200460e0:	20045ef0                                .^. 

200460e4 <decoder_texture_IS_PQF_AC>:
200460e4:	20045f04                                ._. 

200460e8 <decoder_texture_IAP_PQF_AC>:
200460e8:	20045f04                                ._. 

200460ec <decoder_texture_IAP_QF_AC>:
200460ec:	20045f18                                ._. 

200460f0 <decoder_texture_IQ_AC>:
200460f0:	20045f18                                ._. 

200460f4 <decoder_texture_IQ_OUT>:
200460f4:	20045f2c                                ,_. 

200460f8 <decoder_texture_idct2d_IN>:
200460f8:	20045f2c                                ,_. 

200460fc <decoder_texture_idct2d_OUT>:
200460fc:	20045f40                                @_. 

20046100 <decoder_motion_add_TEX>:
20046100:	20045f40                                @_. 

20046104 <decoder_texture_DCReconstruction_addressing_B>:
20046104:	20045f54                                T_. 

20046108 <decoder_texture_DCReconstruction_invpred_B>:
20046108:	20045f54                                T_. 

2004610c <decoder_texture_DCReconstruction_addressing_A>:
2004610c:	20045f68                                h_. 

20046110 <decoder_texture_DCReconstruction_invpred_A>:
20046110:	20045f68                                h_. 

20046114 <decoder_texture_DCReconstruction_addressing_C>:
20046114:	20045f7c                                |_. 

20046118 <decoder_texture_DCReconstruction_invpred_C>:
20046118:	20045f7c                                |_. 

2004611c <decoder_texture_DCReconstruction_invpred_PTR>:
2004611c:	20045f90                                ._. 

20046120 <decoder_texture_IAP_PTR>:
20046120:	20045f90                                ._. 

20046124 <decoder_texture_DCReconstruction_invpred_QF_DC>:
20046124:	20045fa4                                ._. 

20046128 <decoder_texture_IQ_DC>:
20046128:	20045fa4                                ._. 

2004612c <decoder_texture_DCReconstruction_invpred_MODE>:
2004612c:	20045fb8                                ._. 

20046130 <decoder_texture_IS_AC_PRED_DIR>:
20046130:	20045fb8                                ._. 

20046134 <decoder_texture_DCReconstruction_invpred_SIGNED>:
20046134:	20045fcc                                ._. 

20046138 <decoder_texture_idct2d_SIGNED>:
20046138:	20045fcc                                ._. 

2004613c <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>:
2004613c:	20045fe0                                ._. 

20046140 <decoder_texture_IAP_AC_PRED_DIR>:
20046140:	20045fe0                                ._. 

20046144 <decoder_texture_DCReconstruction_invpred_QUANT>:
20046144:	20045ff4                                ._. 

20046148 <decoder_texture_IQ_QP>:
20046148:	20045ff4                                ._. 

2004614c <decoder_motion_interpolation_MOT>:
2004614c:	20046008                                .`. 

20046150 <decoder_motion_add_MOT>:
20046150:	20046008                                .`. 

20046154 <decoder_motion_add_VID>:
20046154:	2004601c                                .`. 

20046158 <decoder_motion_framebuf_WD>:
20046158:	2004601c                                .`. 

2004615c <decoder_merger_YUV_i>:
2004615c:	2004601c                                .`. 

20046160 <decoder_motion_framebuf_RD>:
20046160:	20046030                                0`. 

20046164 <decoder_motion_interpolation_RD>:
20046164:	20046030                                0`. 

20046168 <decoder_motion_framebuf_halfpel>:
20046168:	20046044                                D`. 

2004616c <decoder_motion_interpolation_halfpel>:
2004616c:	20046044                                D`. 

20046170 <start_of_frame>:
20046170:	ffffffff                                ....

20046174 <start_of_frame_U>:
20046174:	ffffffff                                ....

20046178 <needInit>:
20046178:	00000001                                ....

2004617c <stateNames>:
2004617c:	2003bd64 2003bd68 2003bd70 2003bd78     d.. h.. p.. x.. 

2004618c <fifo_0>:
2004618c:	00000200 80000000 00000001 80000200     ................
2004619c:	80000204                                ....

200461a0 <fifo_1>:
200461a0:	00000200 80000208 00000001 80000408     ................
200461b0:	8000040c                                ....

200461b4 <fifo_2>:
200461b4:	00000200 80000410 00000001 80000610     ................
200461c4:	80000614                                ....

200461c8 <fifo_3>:
200461c8:	00000200 80000618 00000001 80000a18     ................
200461d8:	80000a1c                                ....

200461dc <fifo_4>:
200461dc:	00000200 80000a20 00000001 80000c20     .... ....... ...
200461ec:	80000c24                                $...

200461f0 <fifo_5>:
200461f0:	00000200 80000c28 00000001 80001028     ....(.......(...
20046200:	8000102c                                ,...

20046204 <fifo_6>:
20046204:	00000200 80001030 00000001 80001430     ....0.......0...
20046214:	80001434                                4...

20046218 <fifo_7>:
20046218:	00000200 80001438 00000001 80001c38     ....8.......8...
20046228:	80001c3c                                <...

2004622c <fifo_8>:
2004622c:	00000200 80001c40 00000006 80002040     ....@.......@ ..
2004623c:	80002058                                X ..

20046240 <fifo_9>:
20046240:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
20046250:	80002460                                `$..

20046254 <fifo_10>:
20046254:	00000200 80002464 00000001 80002864     ....d$......d(..
20046264:	80002868                                h(..

20046268 <fifo_11>:
20046268:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
20046278:	80002c70                                p,..

2004627c <fifo_12>:
2004627c:	00000200 80002c74 00000001 80003074     ....t,......t0..
2004628c:	80003078                                x0..

20046290 <fifo_13>:
20046290:	00000200 8000307c 00000001 8000347c     ....|0......|4..
200462a0:	80003480                                .4..

200462a4 <fifo_14>:
200462a4:	00000200 80003484 00000001 80003884     .....4.......8..
200462b4:	80003888                                .8..

200462b8 <fifo_15>:
200462b8:	00000200 8000388c 00000001 80003c8c     .....8.......<..
200462c8:	80003c90                                .<..

200462cc <fifo_16>:
200462cc:	00000200 80003c94 00000001 80004094     .....<.......@..
200462dc:	80004098                                .@..

200462e0 <fifo_17>:
200462e0:	00000200 8000409c 00000001 8000449c     .....@.......D..
200462f0:	800044a0                                .D..

200462f4 <fifo_18>:
200462f4:	00000200 800044a4 00000001 800048a4     .....D.......H..
20046304:	800048a8                                .H..

20046308 <fifo_19>:
20046308:	00000200 800048ac 00000001 80004cac     .....H.......L..
20046318:	80004cb0                                .L..

2004631c <fifo_20>:
2004631c:	00000200 80004cb4 00000001 800050b4     .....L.......P..
2004632c:	800050b8                                .P..

20046330 <fifo_21>:
20046330:	00000200 800050bc 00000001 800054bc     .....P.......T..
20046340:	800054c0                                .T..

20046344 <fifo_22>:
20046344:	00000200 800054c4 00000001 800058c4     .....T.......X..
20046354:	800058c8                                .X..

20046358 <fifo_23>:
20046358:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20046368:	80005cd0                                .\..

2004636c <fifo_24>:
2004636c:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
2004637c:	80005ed8                                .^..

20046380 <fifo_25>:
20046380:	00000200 80005edc 00000001 800066dc     .....^.......f..
20046390:	800066e0                                .f..

20046394 <fifo_26>:
20046394:	00000200 800066e4 00000001 800068e4     .....f.......h..
200463a4:	800068e8                                .h..

200463a8 <fifo_27>:
200463a8:	00000200 800068ec 00000001 80006aec     .....h.......j..
200463b8:	80006af0                                .j..

200463bc <fifo_28>:
200463bc:	00000200 80006af4 00000001 80006ef4     .....j.......n..
200463cc:	80006ef8                                .n..

200463d0 <fifo_29>:
200463d0:	00000200 80006efc 00000002 800072fc     .....n.......r..
200463e0:	80007304                                .s..

200463e4 <fifo_30>:
200463e4:	00000200 80007308 00000001 80007708     .....s.......w..
200463f4:	8000770c                                .w..

200463f8 <fifo_31>:
200463f8:	00000200 80007710 00000001 80007910     .....w.......y..
20046408:	80007914                                .y..

2004640c <source_O>:
2004640c:	2004618c                                .a. 

20046410 <decoder_parser_parseheaders_BYTE>:
20046410:	2004618c                                .a. 

20046414 <decoder_merger_YUV>:
20046414:	200461a0                                .a. 

20046418 <display_B>:
20046418:	200461a0                                .a. 

2004641c <decoder_parser_parseheaders_QP>:
2004641c:	200461b4                                .a. 

20046420 <decoder_texture_DCReconstruction_invpred_QP>:
20046420:	200461b4                                .a. 

20046424 <decoder_parser_parseheaders_HEIGHT>:
20046424:	200461c8                                .a. 

20046428 <display_HEIGHT>:
20046428:	200461c8                                .a. 

2004642c <decoder_parser_parseheaders_RUN>:
2004642c:	200461dc                                .a. 

20046430 <decoder_parser_blkexp_RUN>:
20046430:	200461dc                                .a. 

20046434 <decoder_parser_parseheaders_MV>:
20046434:	200461f0                                .a. 

20046438 <decoder_parser_mvrecon_MVIN>:
20046438:	200461f0                                .a. 

2004643c <decoder_parser_parseheaders_WIDTH>:
2004643c:	20046204                                .b. 

20046440 <display_WIDTH>:
20046440:	20046204                                .b. 

20046444 <decoder_parser_parseheaders_LAST>:
20046444:	20046218                                .b. 

20046448 <decoder_parser_blkexp_LAST>:
20046448:	20046218                                .b. 

2004644c <decoder_parser_parseheaders_BTYPE>:
2004644c:	2004622c                                ,b. 

20046450 <decoder_parser_mvseq_BTYPE>:
20046450:	2004622c                                ,b. 

20046454 <decoder_parser_mvrecon_BTYPE>:
20046454:	2004622c                                ,b. 

20046458 <decoder_texture_DCReconstruction_addressing_BTYPE>:
20046458:	2004622c                                ,b. 

2004645c <decoder_texture_DCReconstruction_invpred_BTYPE>:
2004645c:	2004622c                                ,b. 

20046460 <decoder_motion_add_BTYPE>:
20046460:	2004622c                                ,b. 

20046464 <decoder_motion_framebuf_BTYPE>:
20046464:	2004622c                                ,b. 

20046468 <decoder_parser_parseheaders_VALUE>:
20046468:	20046240                                @b. 

2004646c <decoder_parser_blkexp_VALUE>:
2004646c:	20046240                                @b. 

20046470 <decoder_parser_mvseq_A>:
20046470:	20046254                                Tb. 

20046474 <decoder_parser_mvrecon_A>:
20046474:	20046254                                Tb. 

20046478 <decoder_parser_blkexp_QFS>:
20046478:	20046268                                hb. 

2004647c <decoder_texture_DCsplit_IN>:
2004647c:	20046268                                hb. 

20046480 <decoder_parser_mvrecon_MV>:
20046480:	2004627c                                |b. 

20046484 <decoder_motion_framebuf_MV>:
20046484:	2004627c                                |b. 

20046488 <decoder_texture_DCsplit_AC>:
20046488:	20046290                                .b. 

2004648c <decoder_texture_IS_QFS_AC>:
2004648c:	20046290                                .b. 

20046490 <decoder_texture_DCsplit_DC>:
20046490:	200462a4                                .b. 

20046494 <decoder_texture_DCReconstruction_invpred_QFS_DC>:
20046494:	200462a4                                .b. 

20046498 <decoder_texture_IS_PQF_AC>:
20046498:	200462b8                                .b. 

2004649c <decoder_texture_IAP_PQF_AC>:
2004649c:	200462b8                                .b. 

200464a0 <decoder_texture_IAP_QF_AC>:
200464a0:	200462cc                                .b. 

200464a4 <decoder_texture_IQ_AC>:
200464a4:	200462cc                                .b. 

200464a8 <decoder_texture_IQ_OUT>:
200464a8:	200462e0                                .b. 

200464ac <decoder_texture_idct2d_IN>:
200464ac:	200462e0                                .b. 

200464b0 <decoder_texture_idct2d_OUT>:
200464b0:	200462f4                                .b. 

200464b4 <decoder_motion_add_TEX>:
200464b4:	200462f4                                .b. 

200464b8 <decoder_texture_DCReconstruction_addressing_B>:
200464b8:	20046308                                .c. 

200464bc <decoder_texture_DCReconstruction_invpred_B>:
200464bc:	20046308                                .c. 

200464c0 <decoder_texture_DCReconstruction_addressing_A>:
200464c0:	2004631c                                .c. 

200464c4 <decoder_texture_DCReconstruction_invpred_A>:
200464c4:	2004631c                                .c. 

200464c8 <decoder_texture_DCReconstruction_addressing_C>:
200464c8:	20046330                                0c. 

200464cc <decoder_texture_DCReconstruction_invpred_C>:
200464cc:	20046330                                0c. 

200464d0 <decoder_texture_DCReconstruction_invpred_PTR>:
200464d0:	20046344                                Dc. 

200464d4 <decoder_texture_IAP_PTR>:
200464d4:	20046344                                Dc. 

200464d8 <decoder_texture_DCReconstruction_invpred_QF_DC>:
200464d8:	20046358                                Xc. 

200464dc <decoder_texture_IQ_DC>:
200464dc:	20046358                                Xc. 

200464e0 <decoder_texture_DCReconstruction_invpred_MODE>:
200464e0:	2004636c                                lc. 

200464e4 <decoder_texture_IS_AC_PRED_DIR>:
200464e4:	2004636c                                lc. 

200464e8 <decoder_texture_DCReconstruction_invpred_SIGNED>:
200464e8:	20046380                                .c. 

200464ec <decoder_texture_idct2d_SIGNED>:
200464ec:	20046380                                .c. 

200464f0 <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>:
200464f0:	20046394                                .c. 

200464f4 <decoder_texture_IAP_AC_PRED_DIR>:
200464f4:	20046394                                .c. 

200464f8 <decoder_texture_DCReconstruction_invpred_QUANT>:
200464f8:	200463a8                                .c. 

200464fc <decoder_texture_IQ_QP>:
200464fc:	200463a8                                .c. 

20046500 <decoder_motion_interpolation_MOT>:
20046500:	200463bc                                .c. 

20046504 <decoder_motion_add_MOT>:
20046504:	200463bc                                .c. 

20046508 <decoder_motion_add_VID>:
20046508:	200463d0                                .c. 

2004650c <decoder_motion_framebuf_WD>:
2004650c:	200463d0                                .c. 

20046510 <decoder_merger_YUV_i>:
20046510:	200463d0                                .c. 

20046514 <decoder_motion_framebuf_RD>:
20046514:	200463e4                                .c. 

20046518 <decoder_motion_interpolation_RD>:
20046518:	200463e4                                .c. 

2004651c <decoder_motion_framebuf_halfpel>:
2004651c:	200463f8                                .c. 

20046520 <decoder_motion_interpolation_halfpel>:
20046520:	200463f8                                .c. 

20046524 <needInit>:
20046524:	00000001                                ....

20046528 <fifo_0>:
20046528:	00000200 80000000 00000001 80000200     ................
20046538:	80000204                                ....

2004653c <fifo_1>:
2004653c:	00000200 80000208 00000001 80000408     ................
2004654c:	8000040c                                ....

20046550 <fifo_2>:
20046550:	00000200 80000410 00000001 80000610     ................
20046560:	80000614                                ....

20046564 <fifo_3>:
20046564:	00000200 80000618 00000001 80000a18     ................
20046574:	80000a1c                                ....

20046578 <fifo_4>:
20046578:	00000200 80000a20 00000001 80000c20     .... ....... ...
20046588:	80000c24                                $...

2004658c <fifo_5>:
2004658c:	00000200 80000c28 00000001 80001028     ....(.......(...
2004659c:	8000102c                                ,...

200465a0 <fifo_6>:
200465a0:	00000200 80001030 00000001 80001430     ....0.......0...
200465b0:	80001434                                4...

200465b4 <fifo_7>:
200465b4:	00000200 80001438 00000001 80001c38     ....8.......8...
200465c4:	80001c3c                                <...

200465c8 <fifo_8>:
200465c8:	00000200 80001c40 00000006 80002040     ....@.......@ ..
200465d8:	80002058                                X ..

200465dc <fifo_9>:
200465dc:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
200465ec:	80002460                                `$..

200465f0 <fifo_10>:
200465f0:	00000200 80002464 00000001 80002864     ....d$......d(..
20046600:	80002868                                h(..

20046604 <fifo_11>:
20046604:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
20046614:	80002c70                                p,..

20046618 <fifo_12>:
20046618:	00000200 80002c74 00000001 80003074     ....t,......t0..
20046628:	80003078                                x0..

2004662c <fifo_13>:
2004662c:	00000200 8000307c 00000001 8000347c     ....|0......|4..
2004663c:	80003480                                .4..

20046640 <fifo_14>:
20046640:	00000200 80003484 00000001 80003884     .....4.......8..
20046650:	80003888                                .8..

20046654 <fifo_15>:
20046654:	00000200 8000388c 00000001 80003c8c     .....8.......<..
20046664:	80003c90                                .<..

20046668 <fifo_16>:
20046668:	00000200 80003c94 00000001 80004094     .....<.......@..
20046678:	80004098                                .@..

2004667c <fifo_17>:
2004667c:	00000200 8000409c 00000001 8000449c     .....@.......D..
2004668c:	800044a0                                .D..

20046690 <fifo_18>:
20046690:	00000200 800044a4 00000001 800048a4     .....D.......H..
200466a0:	800048a8                                .H..

200466a4 <fifo_19>:
200466a4:	00000200 800048ac 00000001 80004cac     .....H.......L..
200466b4:	80004cb0                                .L..

200466b8 <fifo_20>:
200466b8:	00000200 80004cb4 00000001 800050b4     .....L.......P..
200466c8:	800050b8                                .P..

200466cc <fifo_21>:
200466cc:	00000200 800050bc 00000001 800054bc     .....P.......T..
200466dc:	800054c0                                .T..

200466e0 <fifo_22>:
200466e0:	00000200 800054c4 00000001 800058c4     .....T.......X..
200466f0:	800058c8                                .X..

200466f4 <fifo_23>:
200466f4:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20046704:	80005cd0                                .\..

20046708 <fifo_24>:
20046708:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20046718:	80005ed8                                .^..

2004671c <fifo_25>:
2004671c:	00000200 80005edc 00000001 800066dc     .....^.......f..
2004672c:	800066e0                                .f..

20046730 <fifo_26>:
20046730:	00000200 800066e4 00000001 800068e4     .....f.......h..
20046740:	800068e8                                .h..

20046744 <fifo_27>:
20046744:	00000200 800068ec 00000001 80006aec     .....h.......j..
20046754:	80006af0                                .j..

20046758 <fifo_28>:
20046758:	00000200 80006af4 00000001 80006ef4     .....j.......n..
20046768:	80006ef8                                .n..

2004676c <fifo_29>:
2004676c:	00000200 80006efc 00000002 800072fc     .....n.......r..
2004677c:	80007304                                .s..

20046780 <fifo_30>:
20046780:	00000200 80007308 00000001 80007708     .....s.......w..
20046790:	8000770c                                .w..

20046794 <fifo_31>:
20046794:	00000200 80007710 00000001 80007910     .....w.......y..
200467a4:	80007914                                .y..

200467a8 <source_O>:
200467a8:	20046528                                (e. 

200467ac <decoder_parser_parseheaders_BYTE>:
200467ac:	20046528                                (e. 

200467b0 <decoder_merger_YUV>:
200467b0:	2004653c                                <e. 

200467b4 <display_B>:
200467b4:	2004653c                                <e. 

200467b8 <decoder_parser_parseheaders_QP>:
200467b8:	20046550                                Pe. 

200467bc <decoder_texture_DCReconstruction_invpred_QP>:
200467bc:	20046550                                Pe. 

200467c0 <decoder_parser_parseheaders_HEIGHT>:
200467c0:	20046564                                de. 

200467c4 <display_HEIGHT>:
200467c4:	20046564                                de. 

200467c8 <decoder_parser_parseheaders_RUN>:
200467c8:	20046578                                xe. 

200467cc <decoder_parser_blkexp_RUN>:
200467cc:	20046578                                xe. 

200467d0 <decoder_parser_parseheaders_MV>:
200467d0:	2004658c                                .e. 

200467d4 <decoder_parser_mvrecon_MVIN>:
200467d4:	2004658c                                .e. 

200467d8 <decoder_parser_parseheaders_WIDTH>:
200467d8:	200465a0                                .e. 

200467dc <display_WIDTH>:
200467dc:	200465a0                                .e. 

200467e0 <decoder_parser_parseheaders_LAST>:
200467e0:	200465b4                                .e. 

200467e4 <decoder_parser_blkexp_LAST>:
200467e4:	200465b4                                .e. 

200467e8 <decoder_parser_parseheaders_BTYPE>:
200467e8:	200465c8                                .e. 

200467ec <decoder_parser_mvseq_BTYPE>:
200467ec:	200465c8                                .e. 

200467f0 <decoder_parser_mvrecon_BTYPE>:
200467f0:	200465c8                                .e. 

200467f4 <decoder_texture_DCReconstruction_addressing_BTYPE>:
200467f4:	200465c8                                .e. 

200467f8 <decoder_texture_DCReconstruction_invpred_BTYPE>:
200467f8:	200465c8                                .e. 

200467fc <decoder_motion_add_BTYPE>:
200467fc:	200465c8                                .e. 

20046800 <decoder_motion_framebuf_BTYPE>:
20046800:	200465c8                                .e. 

20046804 <decoder_parser_parseheaders_VALUE>:
20046804:	200465dc                                .e. 

20046808 <decoder_parser_blkexp_VALUE>:
20046808:	200465dc                                .e. 

2004680c <decoder_parser_mvseq_A>:
2004680c:	200465f0                                .e. 

20046810 <decoder_parser_mvrecon_A>:
20046810:	200465f0                                .e. 

20046814 <decoder_parser_blkexp_QFS>:
20046814:	20046604                                .f. 

20046818 <decoder_texture_DCsplit_IN>:
20046818:	20046604                                .f. 

2004681c <decoder_parser_mvrecon_MV>:
2004681c:	20046618                                .f. 

20046820 <decoder_motion_framebuf_MV>:
20046820:	20046618                                .f. 

20046824 <decoder_texture_DCsplit_AC>:
20046824:	2004662c                                ,f. 

20046828 <decoder_texture_IS_QFS_AC>:
20046828:	2004662c                                ,f. 

2004682c <decoder_texture_DCsplit_DC>:
2004682c:	20046640                                @f. 

20046830 <decoder_texture_DCReconstruction_invpred_QFS_DC>:
20046830:	20046640                                @f. 

20046834 <decoder_texture_IS_PQF_AC>:
20046834:	20046654                                Tf. 

20046838 <decoder_texture_IAP_PQF_AC>:
20046838:	20046654                                Tf. 

2004683c <decoder_texture_IAP_QF_AC>:
2004683c:	20046668                                hf. 

20046840 <decoder_texture_IQ_AC>:
20046840:	20046668                                hf. 

20046844 <decoder_texture_IQ_OUT>:
20046844:	2004667c                                |f. 

20046848 <decoder_texture_idct2d_IN>:
20046848:	2004667c                                |f. 

2004684c <decoder_texture_idct2d_OUT>:
2004684c:	20046690                                .f. 

20046850 <decoder_motion_add_TEX>:
20046850:	20046690                                .f. 

20046854 <decoder_texture_DCReconstruction_addressing_B>:
20046854:	200466a4                                .f. 

20046858 <decoder_texture_DCReconstruction_invpred_B>:
20046858:	200466a4                                .f. 

2004685c <decoder_texture_DCReconstruction_addressing_A>:
2004685c:	200466b8                                .f. 

20046860 <decoder_texture_DCReconstruction_invpred_A>:
20046860:	200466b8                                .f. 

20046864 <decoder_texture_DCReconstruction_addressing_C>:
20046864:	200466cc                                .f. 

20046868 <decoder_texture_DCReconstruction_invpred_C>:
20046868:	200466cc                                .f. 

2004686c <decoder_texture_DCReconstruction_invpred_PTR>:
2004686c:	200466e0                                .f. 

20046870 <decoder_texture_IAP_PTR>:
20046870:	200466e0                                .f. 

20046874 <decoder_texture_DCReconstruction_invpred_QF_DC>:
20046874:	200466f4                                .f. 

20046878 <decoder_texture_IQ_DC>:
20046878:	200466f4                                .f. 

2004687c <decoder_texture_DCReconstruction_invpred_MODE>:
2004687c:	20046708                                .g. 

20046880 <decoder_texture_IS_AC_PRED_DIR>:
20046880:	20046708                                .g. 

20046884 <decoder_texture_DCReconstruction_invpred_SIGNED>:
20046884:	2004671c                                .g. 

20046888 <decoder_texture_idct2d_SIGNED>:
20046888:	2004671c                                .g. 

2004688c <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>:
2004688c:	20046730                                0g. 

20046890 <decoder_texture_IAP_AC_PRED_DIR>:
20046890:	20046730                                0g. 

20046894 <decoder_texture_DCReconstruction_invpred_QUANT>:
20046894:	20046744                                Dg. 

20046898 <decoder_texture_IQ_QP>:
20046898:	20046744                                Dg. 

2004689c <decoder_motion_interpolation_MOT>:
2004689c:	20046758                                Xg. 

200468a0 <decoder_motion_add_MOT>:
200468a0:	20046758                                Xg. 

200468a4 <decoder_motion_add_VID>:
200468a4:	2004676c                                lg. 

200468a8 <decoder_motion_framebuf_WD>:
200468a8:	2004676c                                lg. 

200468ac <decoder_merger_YUV_i>:
200468ac:	2004676c                                lg. 

200468b0 <decoder_motion_framebuf_RD>:
200468b0:	20046780                                .g. 

200468b4 <decoder_motion_interpolation_RD>:
200468b4:	20046780                                .g. 

200468b8 <decoder_motion_framebuf_halfpel>:
200468b8:	20046794                                .g. 

200468bc <decoder_motion_interpolation_halfpel>:
200468bc:	20046794                                .g. 

200468c0 <needInit>:
200468c0:	00000001                                ....

200468c4 <stateNames>:
200468c4:	2003bd80 2003bd84                       ... ... 

200468cc <fifo_0>:
200468cc:	00000200 80000000 00000001 80000200     ................
200468dc:	80000204                                ....

200468e0 <fifo_1>:
200468e0:	00000200 80000208 00000001 80000408     ................
200468f0:	8000040c                                ....

200468f4 <fifo_2>:
200468f4:	00000200 80000410 00000001 80000610     ................
20046904:	80000614                                ....

20046908 <fifo_3>:
20046908:	00000200 80000618 00000001 80000a18     ................
20046918:	80000a1c                                ....

2004691c <fifo_4>:
2004691c:	00000200 80000a20 00000001 80000c20     .... ....... ...
2004692c:	80000c24                                $...

20046930 <fifo_5>:
20046930:	00000200 80000c28 00000001 80001028     ....(.......(...
20046940:	8000102c                                ,...

20046944 <fifo_6>:
20046944:	00000200 80001030 00000001 80001430     ....0.......0...
20046954:	80001434                                4...

20046958 <fifo_7>:
20046958:	00000200 80001438 00000001 80001c38     ....8.......8...
20046968:	80001c3c                                <...

2004696c <fifo_8>:
2004696c:	00000200 80001c40 00000006 80002040     ....@.......@ ..
2004697c:	80002058                                X ..

20046980 <fifo_9>:
20046980:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
20046990:	80002460                                `$..

20046994 <fifo_10>:
20046994:	00000200 80002464 00000001 80002864     ....d$......d(..
200469a4:	80002868                                h(..

200469a8 <fifo_11>:
200469a8:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
200469b8:	80002c70                                p,..

200469bc <fifo_12>:
200469bc:	00000200 80002c74 00000001 80003074     ....t,......t0..
200469cc:	80003078                                x0..

200469d0 <fifo_13>:
200469d0:	00000200 8000307c 00000001 8000347c     ....|0......|4..
200469e0:	80003480                                .4..

200469e4 <fifo_14>:
200469e4:	00000200 80003484 00000001 80003884     .....4.......8..
200469f4:	80003888                                .8..

200469f8 <fifo_15>:
200469f8:	00000200 8000388c 00000001 80003c8c     .....8.......<..
20046a08:	80003c90                                .<..

20046a0c <fifo_16>:
20046a0c:	00000200 80003c94 00000001 80004094     .....<.......@..
20046a1c:	80004098                                .@..

20046a20 <fifo_17>:
20046a20:	00000200 8000409c 00000001 8000449c     .....@.......D..
20046a30:	800044a0                                .D..

20046a34 <fifo_18>:
20046a34:	00000200 800044a4 00000001 800048a4     .....D.......H..
20046a44:	800048a8                                .H..

20046a48 <fifo_19>:
20046a48:	00000200 800048ac 00000001 80004cac     .....H.......L..
20046a58:	80004cb0                                .L..

20046a5c <fifo_20>:
20046a5c:	00000200 80004cb4 00000001 800050b4     .....L.......P..
20046a6c:	800050b8                                .P..

20046a70 <fifo_21>:
20046a70:	00000200 800050bc 00000001 800054bc     .....P.......T..
20046a80:	800054c0                                .T..

20046a84 <fifo_22>:
20046a84:	00000200 800054c4 00000001 800058c4     .....T.......X..
20046a94:	800058c8                                .X..

20046a98 <fifo_23>:
20046a98:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20046aa8:	80005cd0                                .\..

20046aac <fifo_24>:
20046aac:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20046abc:	80005ed8                                .^..

20046ac0 <fifo_25>:
20046ac0:	00000200 80005edc 00000001 800066dc     .....^.......f..
20046ad0:	800066e0                                .f..

20046ad4 <fifo_26>:
20046ad4:	00000200 800066e4 00000001 800068e4     .....f.......h..
20046ae4:	800068e8                                .h..

20046ae8 <fifo_27>:
20046ae8:	00000200 800068ec 00000001 80006aec     .....h.......j..
20046af8:	80006af0                                .j..

20046afc <fifo_28>:
20046afc:	00000200 80006af4 00000001 80006ef4     .....j.......n..
20046b0c:	80006ef8                                .n..

20046b10 <fifo_29>:
20046b10:	00000200 80006efc 00000002 800072fc     .....n.......r..
20046b20:	80007304                                .s..

20046b24 <fifo_30>:
20046b24:	00000200 80007308 00000001 80007708     .....s.......w..
20046b34:	8000770c                                .w..

20046b38 <fifo_31>:
20046b38:	00000200 80007710 00000001 80007910     .....w.......y..
20046b48:	80007914                                .y..

20046b4c <source_O>:
20046b4c:	200468cc                                .h. 

20046b50 <decoder_parser_parseheaders_BYTE>:
20046b50:	200468cc                                .h. 

20046b54 <decoder_merger_YUV>:
20046b54:	200468e0                                .h. 

20046b58 <display_B>:
20046b58:	200468e0                                .h. 

20046b5c <decoder_parser_parseheaders_QP>:
20046b5c:	200468f4                                .h. 

20046b60 <decoder_texture_DCReconstruction_invpred_QP>:
20046b60:	200468f4                                .h. 

20046b64 <decoder_parser_parseheaders_HEIGHT>:
20046b64:	20046908                                .i. 

20046b68 <display_HEIGHT>:
20046b68:	20046908                                .i. 

20046b6c <decoder_parser_parseheaders_RUN>:
20046b6c:	2004691c                                .i. 

20046b70 <decoder_parser_blkexp_RUN>:
20046b70:	2004691c                                .i. 

20046b74 <decoder_parser_parseheaders_MV>:
20046b74:	20046930                                0i. 

20046b78 <decoder_parser_mvrecon_MVIN>:
20046b78:	20046930                                0i. 

20046b7c <decoder_parser_parseheaders_WIDTH>:
20046b7c:	20046944                                Di. 

20046b80 <display_WIDTH>:
20046b80:	20046944                                Di. 

20046b84 <decoder_parser_parseheaders_LAST>:
20046b84:	20046958                                Xi. 

20046b88 <decoder_parser_blkexp_LAST>:
20046b88:	20046958                                Xi. 

20046b8c <decoder_parser_parseheaders_BTYPE>:
20046b8c:	2004696c                                li. 

20046b90 <decoder_parser_mvseq_BTYPE>:
20046b90:	2004696c                                li. 

20046b94 <decoder_parser_mvrecon_BTYPE>:
20046b94:	2004696c                                li. 

20046b98 <decoder_texture_DCReconstruction_addressing_BTYPE>:
20046b98:	2004696c                                li. 

20046b9c <decoder_texture_DCReconstruction_invpred_BTYPE>:
20046b9c:	2004696c                                li. 

20046ba0 <decoder_motion_add_BTYPE>:
20046ba0:	2004696c                                li. 

20046ba4 <decoder_motion_framebuf_BTYPE>:
20046ba4:	2004696c                                li. 

20046ba8 <decoder_parser_parseheaders_VALUE>:
20046ba8:	20046980                                .i. 

20046bac <decoder_parser_blkexp_VALUE>:
20046bac:	20046980                                .i. 

20046bb0 <decoder_parser_mvseq_A>:
20046bb0:	20046994                                .i. 

20046bb4 <decoder_parser_mvrecon_A>:
20046bb4:	20046994                                .i. 

20046bb8 <decoder_parser_blkexp_QFS>:
20046bb8:	200469a8                                .i. 

20046bbc <decoder_texture_DCsplit_IN>:
20046bbc:	200469a8                                .i. 

20046bc0 <decoder_parser_mvrecon_MV>:
20046bc0:	200469bc                                .i. 

20046bc4 <decoder_motion_framebuf_MV>:
20046bc4:	200469bc                                .i. 

20046bc8 <decoder_texture_DCsplit_AC>:
20046bc8:	200469d0                                .i. 

20046bcc <decoder_texture_IS_QFS_AC>:
20046bcc:	200469d0                                .i. 

20046bd0 <decoder_texture_DCsplit_DC>:
20046bd0:	200469e4                                .i. 

20046bd4 <decoder_texture_DCReconstruction_invpred_QFS_DC>:
20046bd4:	200469e4                                .i. 

20046bd8 <decoder_texture_IS_PQF_AC>:
20046bd8:	200469f8                                .i. 

20046bdc <decoder_texture_IAP_PQF_AC>:
20046bdc:	200469f8                                .i. 

20046be0 <decoder_texture_IAP_QF_AC>:
20046be0:	20046a0c                                .j. 

20046be4 <decoder_texture_IQ_AC>:
20046be4:	20046a0c                                .j. 

20046be8 <decoder_texture_IQ_OUT>:
20046be8:	20046a20                                 j. 

20046bec <decoder_texture_idct2d_IN>:
20046bec:	20046a20                                 j. 

20046bf0 <decoder_texture_idct2d_OUT>:
20046bf0:	20046a34                                4j. 

20046bf4 <decoder_motion_add_TEX>:
20046bf4:	20046a34                                4j. 

20046bf8 <decoder_texture_DCReconstruction_addressing_B>:
20046bf8:	20046a48                                Hj. 

20046bfc <decoder_texture_DCReconstruction_invpred_B>:
20046bfc:	20046a48                                Hj. 

20046c00 <decoder_texture_DCReconstruction_addressing_A>:
20046c00:	20046a5c                                \j. 

20046c04 <decoder_texture_DCReconstruction_invpred_A>:
20046c04:	20046a5c                                \j. 

20046c08 <decoder_texture_DCReconstruction_addressing_C>:
20046c08:	20046a70                                pj. 

20046c0c <decoder_texture_DCReconstruction_invpred_C>:
20046c0c:	20046a70                                pj. 

20046c10 <decoder_texture_DCReconstruction_invpred_PTR>:
20046c10:	20046a84                                .j. 

20046c14 <decoder_texture_IAP_PTR>:
20046c14:	20046a84                                .j. 

20046c18 <decoder_texture_DCReconstruction_invpred_QF_DC>:
20046c18:	20046a98                                .j. 

20046c1c <decoder_texture_IQ_DC>:
20046c1c:	20046a98                                .j. 

20046c20 <decoder_texture_DCReconstruction_invpred_MODE>:
20046c20:	20046aac                                .j. 

20046c24 <decoder_texture_IS_AC_PRED_DIR>:
20046c24:	20046aac                                .j. 

20046c28 <decoder_texture_DCReconstruction_invpred_SIGNED>:
20046c28:	20046ac0                                .j. 

20046c2c <decoder_texture_idct2d_SIGNED>:
20046c2c:	20046ac0                                .j. 

20046c30 <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>:
20046c30:	20046ad4                                .j. 

20046c34 <decoder_texture_IAP_AC_PRED_DIR>:
20046c34:	20046ad4                                .j. 

20046c38 <decoder_texture_DCReconstruction_invpred_QUANT>:
20046c38:	20046ae8                                .j. 

20046c3c <decoder_texture_IQ_QP>:
20046c3c:	20046ae8                                .j. 

20046c40 <decoder_motion_interpolation_MOT>:
20046c40:	20046afc                                .j. 

20046c44 <decoder_motion_add_MOT>:
20046c44:	20046afc                                .j. 

20046c48 <decoder_motion_add_VID>:
20046c48:	20046b10                                .k. 

20046c4c <decoder_motion_framebuf_WD>:
20046c4c:	20046b10                                .k. 

20046c50 <decoder_merger_YUV_i>:
20046c50:	20046b10                                .k. 

20046c54 <decoder_motion_framebuf_RD>:
20046c54:	20046b24                                $k. 

20046c58 <decoder_motion_interpolation_RD>:
20046c58:	20046b24                                $k. 

20046c5c <decoder_motion_framebuf_halfpel>:
20046c5c:	20046b38                                8k. 

20046c60 <decoder_motion_interpolation_halfpel>:
20046c60:	20046b38                                8k. 

20046c64 <top_edge>:
20046c64:	00000001                                ....

20046c68 <needInit>:
20046c68:	00000001                                ....

20046c6c <stateNames>:
20046c6c:	2003bd8c 2003bd94 2003bd9c 2003bda8     ... ... ... ... 
20046c7c:	2003bdb4 2003bdc0 2003bdcc 2003bdd8     ... ... ... ... 
20046c8c:	2003bde4 2003bdf0 2003bdfc 2003be08     ... ... ... ... 
20046c9c:	2003be14 2003be20 2003be2c 2003be38     ...  .. ,.. 8.. 
20046cac:	2003be44 2003be50 2003be5c 2003be68     D.. P.. \.. h.. 
20046cbc:	2003be74 2003be80 2003be8c 2003be98     t.. ... ... ... 
20046ccc:	2003bea4 2003beb0 2003bebc 2003bec4     ... ... ... ... 
20046cdc:	2003becc 2003bed4 2003bedc              ... ... ... 

20046ce8 <fifo_0>:
20046ce8:	00000200 80000000 00000001 80000200     ................
20046cf8:	80000204                                ....

20046cfc <fifo_1>:
20046cfc:	00000200 80000208 00000001 80000408     ................
20046d0c:	8000040c                                ....

20046d10 <fifo_2>:
20046d10:	00000200 80000410 00000001 80000610     ................
20046d20:	80000614                                ....

20046d24 <fifo_3>:
20046d24:	00000200 80000618 00000001 80000a18     ................
20046d34:	80000a1c                                ....

20046d38 <fifo_4>:
20046d38:	00000200 80000a20 00000001 80000c20     .... ....... ...
20046d48:	80000c24                                $...

20046d4c <fifo_5>:
20046d4c:	00000200 80000c28 00000001 80001028     ....(.......(...
20046d5c:	8000102c                                ,...

20046d60 <fifo_6>:
20046d60:	00000200 80001030 00000001 80001430     ....0.......0...
20046d70:	80001434                                4...

20046d74 <fifo_7>:
20046d74:	00000200 80001438 00000001 80001c38     ....8.......8...
20046d84:	80001c3c                                <...

20046d88 <fifo_8>:
20046d88:	00000200 80001c40 00000006 80002040     ....@.......@ ..
20046d98:	80002058                                X ..

20046d9c <fifo_9>:
20046d9c:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
20046dac:	80002460                                `$..

20046db0 <fifo_10>:
20046db0:	00000200 80002464 00000001 80002864     ....d$......d(..
20046dc0:	80002868                                h(..

20046dc4 <fifo_11>:
20046dc4:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
20046dd4:	80002c70                                p,..

20046dd8 <fifo_12>:
20046dd8:	00000200 80002c74 00000001 80003074     ....t,......t0..
20046de8:	80003078                                x0..

20046dec <fifo_13>:
20046dec:	00000200 8000307c 00000001 8000347c     ....|0......|4..
20046dfc:	80003480                                .4..

20046e00 <fifo_14>:
20046e00:	00000200 80003484 00000001 80003884     .....4.......8..
20046e10:	80003888                                .8..

20046e14 <fifo_15>:
20046e14:	00000200 8000388c 00000001 80003c8c     .....8.......<..
20046e24:	80003c90                                .<..

20046e28 <fifo_16>:
20046e28:	00000200 80003c94 00000001 80004094     .....<.......@..
20046e38:	80004098                                .@..

20046e3c <fifo_17>:
20046e3c:	00000200 8000409c 00000001 8000449c     .....@.......D..
20046e4c:	800044a0                                .D..

20046e50 <fifo_18>:
20046e50:	00000200 800044a4 00000001 800048a4     .....D.......H..
20046e60:	800048a8                                .H..

20046e64 <fifo_19>:
20046e64:	00000200 800048ac 00000001 80004cac     .....H.......L..
20046e74:	80004cb0                                .L..

20046e78 <fifo_20>:
20046e78:	00000200 80004cb4 00000001 800050b4     .....L.......P..
20046e88:	800050b8                                .P..

20046e8c <fifo_21>:
20046e8c:	00000200 800050bc 00000001 800054bc     .....P.......T..
20046e9c:	800054c0                                .T..

20046ea0 <fifo_22>:
20046ea0:	00000200 800054c4 00000001 800058c4     .....T.......X..
20046eb0:	800058c8                                .X..

20046eb4 <fifo_23>:
20046eb4:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20046ec4:	80005cd0                                .\..

20046ec8 <fifo_24>:
20046ec8:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20046ed8:	80005ed8                                .^..

20046edc <fifo_25>:
20046edc:	00000200 80005edc 00000001 800066dc     .....^.......f..
20046eec:	800066e0                                .f..

20046ef0 <fifo_26>:
20046ef0:	00000200 800066e4 00000001 800068e4     .....f.......h..
20046f00:	800068e8                                .h..

20046f04 <fifo_27>:
20046f04:	00000200 800068ec 00000001 80006aec     .....h.......j..
20046f14:	80006af0                                .j..

20046f18 <fifo_28>:
20046f18:	00000200 80006af4 00000001 80006ef4     .....j.......n..
20046f28:	80006ef8                                .n..

20046f2c <fifo_29>:
20046f2c:	00000200 80006efc 00000002 800072fc     .....n.......r..
20046f3c:	80007304                                .s..

20046f40 <fifo_30>:
20046f40:	00000200 80007308 00000001 80007708     .....s.......w..
20046f50:	8000770c                                .w..

20046f54 <fifo_31>:
20046f54:	00000200 80007710 00000001 80007910     .....w.......y..
20046f64:	80007914                                .y..

20046f68 <source_O>:
20046f68:	20046ce8                                .l. 

20046f6c <decoder_parser_parseheaders_BYTE>:
20046f6c:	20046ce8                                .l. 

20046f70 <decoder_merger_YUV>:
20046f70:	20046cfc                                .l. 

20046f74 <display_B>:
20046f74:	20046cfc                                .l. 

20046f78 <decoder_parser_parseheaders_QP>:
20046f78:	20046d10                                .m. 

20046f7c <decoder_texture_DCReconstruction_invpred_QP>:
20046f7c:	20046d10                                .m. 

20046f80 <decoder_parser_parseheaders_HEIGHT>:
20046f80:	20046d24                                $m. 

20046f84 <display_HEIGHT>:
20046f84:	20046d24                                $m. 

20046f88 <decoder_parser_parseheaders_RUN>:
20046f88:	20046d38                                8m. 

20046f8c <decoder_parser_blkexp_RUN>:
20046f8c:	20046d38                                8m. 

20046f90 <decoder_parser_parseheaders_MV>:
20046f90:	20046d4c                                Lm. 

20046f94 <decoder_parser_mvrecon_MVIN>:
20046f94:	20046d4c                                Lm. 

20046f98 <decoder_parser_parseheaders_WIDTH>:
20046f98:	20046d60                                `m. 

20046f9c <display_WIDTH>:
20046f9c:	20046d60                                `m. 

20046fa0 <decoder_parser_parseheaders_LAST>:
20046fa0:	20046d74                                tm. 

20046fa4 <decoder_parser_blkexp_LAST>:
20046fa4:	20046d74                                tm. 

20046fa8 <decoder_parser_parseheaders_BTYPE>:
20046fa8:	20046d88                                .m. 

20046fac <decoder_parser_mvseq_BTYPE>:
20046fac:	20046d88                                .m. 

20046fb0 <decoder_parser_mvrecon_BTYPE>:
20046fb0:	20046d88                                .m. 

20046fb4 <decoder_texture_DCReconstruction_addressing_BTYPE>:
20046fb4:	20046d88                                .m. 

20046fb8 <decoder_texture_DCReconstruction_invpred_BTYPE>:
20046fb8:	20046d88                                .m. 

20046fbc <decoder_motion_add_BTYPE>:
20046fbc:	20046d88                                .m. 

20046fc0 <decoder_motion_framebuf_BTYPE>:
20046fc0:	20046d88                                .m. 

20046fc4 <decoder_parser_parseheaders_VALUE>:
20046fc4:	20046d9c                                .m. 

20046fc8 <decoder_parser_blkexp_VALUE>:
20046fc8:	20046d9c                                .m. 

20046fcc <decoder_parser_mvseq_A>:
20046fcc:	20046db0                                .m. 

20046fd0 <decoder_parser_mvrecon_A>:
20046fd0:	20046db0                                .m. 

20046fd4 <decoder_parser_blkexp_QFS>:
20046fd4:	20046dc4                                .m. 

20046fd8 <decoder_texture_DCsplit_IN>:
20046fd8:	20046dc4                                .m. 

20046fdc <decoder_parser_mvrecon_MV>:
20046fdc:	20046dd8                                .m. 

20046fe0 <decoder_motion_framebuf_MV>:
20046fe0:	20046dd8                                .m. 

20046fe4 <decoder_texture_DCsplit_AC>:
20046fe4:	20046dec                                .m. 

20046fe8 <decoder_texture_IS_QFS_AC>:
20046fe8:	20046dec                                .m. 

20046fec <decoder_texture_DCsplit_DC>:
20046fec:	20046e00                                .n. 

20046ff0 <decoder_texture_DCReconstruction_invpred_QFS_DC>:
20046ff0:	20046e00                                .n. 

20046ff4 <decoder_texture_IS_PQF_AC>:
20046ff4:	20046e14                                .n. 

20046ff8 <decoder_texture_IAP_PQF_AC>:
20046ff8:	20046e14                                .n. 

20046ffc <decoder_texture_IAP_QF_AC>:
20046ffc:	20046e28                                (n. 

20047000 <decoder_texture_IQ_AC>:
20047000:	20046e28                                (n. 

20047004 <decoder_texture_IQ_OUT>:
20047004:	20046e3c                                <n. 

20047008 <decoder_texture_idct2d_IN>:
20047008:	20046e3c                                <n. 

2004700c <decoder_texture_idct2d_OUT>:
2004700c:	20046e50                                Pn. 

20047010 <decoder_motion_add_TEX>:
20047010:	20046e50                                Pn. 

20047014 <decoder_texture_DCReconstruction_addressing_B>:
20047014:	20046e64                                dn. 

20047018 <decoder_texture_DCReconstruction_invpred_B>:
20047018:	20046e64                                dn. 

2004701c <decoder_texture_DCReconstruction_addressing_A>:
2004701c:	20046e78                                xn. 

20047020 <decoder_texture_DCReconstruction_invpred_A>:
20047020:	20046e78                                xn. 

20047024 <decoder_texture_DCReconstruction_addressing_C>:
20047024:	20046e8c                                .n. 

20047028 <decoder_texture_DCReconstruction_invpred_C>:
20047028:	20046e8c                                .n. 

2004702c <decoder_texture_DCReconstruction_invpred_PTR>:
2004702c:	20046ea0                                .n. 

20047030 <decoder_texture_IAP_PTR>:
20047030:	20046ea0                                .n. 

20047034 <decoder_texture_DCReconstruction_invpred_QF_DC>:
20047034:	20046eb4                                .n. 

20047038 <decoder_texture_IQ_DC>:
20047038:	20046eb4                                .n. 

2004703c <decoder_texture_DCReconstruction_invpred_MODE>:
2004703c:	20046ec8                                .n. 

20047040 <decoder_texture_IS_AC_PRED_DIR>:
20047040:	20046ec8                                .n. 

20047044 <decoder_texture_DCReconstruction_invpred_SIGNED>:
20047044:	20046edc                                .n. 

20047048 <decoder_texture_idct2d_SIGNED>:
20047048:	20046edc                                .n. 

2004704c <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>:
2004704c:	20046ef0                                .n. 

20047050 <decoder_texture_IAP_AC_PRED_DIR>:
20047050:	20046ef0                                .n. 

20047054 <decoder_texture_DCReconstruction_invpred_QUANT>:
20047054:	20046f04                                .o. 

20047058 <decoder_texture_IQ_QP>:
20047058:	20046f04                                .o. 

2004705c <decoder_motion_interpolation_MOT>:
2004705c:	20046f18                                .o. 

20047060 <decoder_motion_add_MOT>:
20047060:	20046f18                                .o. 

20047064 <decoder_motion_add_VID>:
20047064:	20046f2c                                ,o. 

20047068 <decoder_motion_framebuf_WD>:
20047068:	20046f2c                                ,o. 

2004706c <decoder_merger_YUV_i>:
2004706c:	20046f2c                                ,o. 

20047070 <decoder_motion_framebuf_RD>:
20047070:	20046f40                                @o. 

20047074 <decoder_motion_interpolation_RD>:
20047074:	20046f40                                @o. 

20047078 <decoder_motion_framebuf_halfpel>:
20047078:	20046f54                                To. 

2004707c <decoder_motion_interpolation_halfpel>:
2004707c:	20046f54                                To. 

20047080 <top_edge>:
20047080:	00000001                                ....

20047084 <needInit>:
20047084:	00000001                                ....

20047088 <stateNames>:
20047088:	2003bf60 2003bf68 2003bf70              `.. h.. p.. 

20047094 <fifo_0>:
20047094:	00000200 80000000 00000001 80000200     ................
200470a4:	80000204                                ....

200470a8 <fifo_1>:
200470a8:	00000200 80000208 00000001 80000408     ................
200470b8:	8000040c                                ....

200470bc <fifo_2>:
200470bc:	00000200 80000410 00000001 80000610     ................
200470cc:	80000614                                ....

200470d0 <fifo_3>:
200470d0:	00000200 80000618 00000001 80000a18     ................
200470e0:	80000a1c                                ....

200470e4 <fifo_4>:
200470e4:	00000200 80000a20 00000001 80000c20     .... ....... ...
200470f4:	80000c24                                $...

200470f8 <fifo_5>:
200470f8:	00000200 80000c28 00000001 80001028     ....(.......(...
20047108:	8000102c                                ,...

2004710c <fifo_6>:
2004710c:	00000200 80001030 00000001 80001430     ....0.......0...
2004711c:	80001434                                4...

20047120 <fifo_7>:
20047120:	00000200 80001438 00000001 80001c38     ....8.......8...
20047130:	80001c3c                                <...

20047134 <fifo_8>:
20047134:	00000200 80001c40 00000006 80002040     ....@.......@ ..
20047144:	80002058                                X ..

20047148 <fifo_9>:
20047148:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
20047158:	80002460                                `$..

2004715c <fifo_10>:
2004715c:	00000200 80002464 00000001 80002864     ....d$......d(..
2004716c:	80002868                                h(..

20047170 <fifo_11>:
20047170:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
20047180:	80002c70                                p,..

20047184 <fifo_12>:
20047184:	00000200 80002c74 00000001 80003074     ....t,......t0..
20047194:	80003078                                x0..

20047198 <fifo_13>:
20047198:	00000200 8000307c 00000001 8000347c     ....|0......|4..
200471a8:	80003480                                .4..

200471ac <fifo_14>:
200471ac:	00000200 80003484 00000001 80003884     .....4.......8..
200471bc:	80003888                                .8..

200471c0 <fifo_15>:
200471c0:	00000200 8000388c 00000001 80003c8c     .....8.......<..
200471d0:	80003c90                                .<..

200471d4 <fifo_16>:
200471d4:	00000200 80003c94 00000001 80004094     .....<.......@..
200471e4:	80004098                                .@..

200471e8 <fifo_17>:
200471e8:	00000200 8000409c 00000001 8000449c     .....@.......D..
200471f8:	800044a0                                .D..

200471fc <fifo_18>:
200471fc:	00000200 800044a4 00000001 800048a4     .....D.......H..
2004720c:	800048a8                                .H..

20047210 <fifo_19>:
20047210:	00000200 800048ac 00000001 80004cac     .....H.......L..
20047220:	80004cb0                                .L..

20047224 <fifo_20>:
20047224:	00000200 80004cb4 00000001 800050b4     .....L.......P..
20047234:	800050b8                                .P..

20047238 <fifo_21>:
20047238:	00000200 800050bc 00000001 800054bc     .....P.......T..
20047248:	800054c0                                .T..

2004724c <fifo_22>:
2004724c:	00000200 800054c4 00000001 800058c4     .....T.......X..
2004725c:	800058c8                                .X..

20047260 <fifo_23>:
20047260:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20047270:	80005cd0                                .\..

20047274 <fifo_24>:
20047274:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20047284:	80005ed8                                .^..

20047288 <fifo_25>:
20047288:	00000200 80005edc 00000001 800066dc     .....^.......f..
20047298:	800066e0                                .f..

2004729c <fifo_26>:
2004729c:	00000200 800066e4 00000001 800068e4     .....f.......h..
200472ac:	800068e8                                .h..

200472b0 <fifo_27>:
200472b0:	00000200 800068ec 00000001 80006aec     .....h.......j..
200472c0:	80006af0                                .j..

200472c4 <fifo_28>:
200472c4:	00000200 80006af4 00000001 80006ef4     .....j.......n..
200472d4:	80006ef8                                .n..

200472d8 <fifo_29>:
200472d8:	00000200 80006efc 00000002 800072fc     .....n.......r..
200472e8:	80007304                                .s..

200472ec <fifo_30>:
200472ec:	00000200 80007308 00000001 80007708     .....s.......w..
200472fc:	8000770c                                .w..

20047300 <fifo_31>:
20047300:	00000200 80007710 00000001 80007910     .....w.......y..
20047310:	80007914                                .y..

20047314 <source_O>:
20047314:	20047094                                .p. 

20047318 <decoder_parser_parseheaders_BYTE>:
20047318:	20047094                                .p. 

2004731c <decoder_merger_YUV>:
2004731c:	200470a8                                .p. 

20047320 <display_B>:
20047320:	200470a8                                .p. 

20047324 <decoder_parser_parseheaders_QP>:
20047324:	200470bc                                .p. 

20047328 <decoder_texture_DCReconstruction_invpred_QP>:
20047328:	200470bc                                .p. 

2004732c <decoder_parser_parseheaders_HEIGHT>:
2004732c:	200470d0                                .p. 

20047330 <display_HEIGHT>:
20047330:	200470d0                                .p. 

20047334 <decoder_parser_parseheaders_RUN>:
20047334:	200470e4                                .p. 

20047338 <decoder_parser_blkexp_RUN>:
20047338:	200470e4                                .p. 

2004733c <decoder_parser_parseheaders_MV>:
2004733c:	200470f8                                .p. 

20047340 <decoder_parser_mvrecon_MVIN>:
20047340:	200470f8                                .p. 

20047344 <decoder_parser_parseheaders_WIDTH>:
20047344:	2004710c                                .q. 

20047348 <display_WIDTH>:
20047348:	2004710c                                .q. 

2004734c <decoder_parser_parseheaders_LAST>:
2004734c:	20047120                                 q. 

20047350 <decoder_parser_blkexp_LAST>:
20047350:	20047120                                 q. 

20047354 <decoder_parser_parseheaders_BTYPE>:
20047354:	20047134                                4q. 

20047358 <decoder_parser_mvseq_BTYPE>:
20047358:	20047134                                4q. 

2004735c <decoder_parser_mvrecon_BTYPE>:
2004735c:	20047134                                4q. 

20047360 <decoder_texture_DCReconstruction_addressing_BTYPE>:
20047360:	20047134                                4q. 

20047364 <decoder_texture_DCReconstruction_invpred_BTYPE>:
20047364:	20047134                                4q. 

20047368 <decoder_motion_add_BTYPE>:
20047368:	20047134                                4q. 

2004736c <decoder_motion_framebuf_BTYPE>:
2004736c:	20047134                                4q. 

20047370 <decoder_parser_parseheaders_VALUE>:
20047370:	20047148                                Hq. 

20047374 <decoder_parser_blkexp_VALUE>:
20047374:	20047148                                Hq. 

20047378 <decoder_parser_mvseq_A>:
20047378:	2004715c                                \q. 

2004737c <decoder_parser_mvrecon_A>:
2004737c:	2004715c                                \q. 

20047380 <decoder_parser_blkexp_QFS>:
20047380:	20047170                                pq. 

20047384 <decoder_texture_DCsplit_IN>:
20047384:	20047170                                pq. 

20047388 <decoder_parser_mvrecon_MV>:
20047388:	20047184                                .q. 

2004738c <decoder_motion_framebuf_MV>:
2004738c:	20047184                                .q. 

20047390 <decoder_texture_DCsplit_AC>:
20047390:	20047198                                .q. 

20047394 <decoder_texture_IS_QFS_AC>:
20047394:	20047198                                .q. 

20047398 <decoder_texture_DCsplit_DC>:
20047398:	200471ac                                .q. 

2004739c <decoder_texture_DCReconstruction_invpred_QFS_DC>:
2004739c:	200471ac                                .q. 

200473a0 <decoder_texture_IS_PQF_AC>:
200473a0:	200471c0                                .q. 

200473a4 <decoder_texture_IAP_PQF_AC>:
200473a4:	200471c0                                .q. 

200473a8 <decoder_texture_IAP_QF_AC>:
200473a8:	200471d4                                .q. 

200473ac <decoder_texture_IQ_AC>:
200473ac:	200471d4                                .q. 

200473b0 <decoder_texture_IQ_OUT>:
200473b0:	200471e8                                .q. 

200473b4 <decoder_texture_idct2d_IN>:
200473b4:	200471e8                                .q. 

200473b8 <decoder_texture_idct2d_OUT>:
200473b8:	200471fc                                .q. 

200473bc <decoder_motion_add_TEX>:
200473bc:	200471fc                                .q. 

200473c0 <decoder_texture_DCReconstruction_addressing_B>:
200473c0:	20047210                                .r. 

200473c4 <decoder_texture_DCReconstruction_invpred_B>:
200473c4:	20047210                                .r. 

200473c8 <decoder_texture_DCReconstruction_addressing_A>:
200473c8:	20047224                                $r. 

200473cc <decoder_texture_DCReconstruction_invpred_A>:
200473cc:	20047224                                $r. 

200473d0 <decoder_texture_DCReconstruction_addressing_C>:
200473d0:	20047238                                8r. 

200473d4 <decoder_texture_DCReconstruction_invpred_C>:
200473d4:	20047238                                8r. 

200473d8 <decoder_texture_DCReconstruction_invpred_PTR>:
200473d8:	2004724c                                Lr. 

200473dc <decoder_texture_IAP_PTR>:
200473dc:	2004724c                                Lr. 

200473e0 <decoder_texture_DCReconstruction_invpred_QF_DC>:
200473e0:	20047260                                `r. 

200473e4 <decoder_texture_IQ_DC>:
200473e4:	20047260                                `r. 

200473e8 <decoder_texture_DCReconstruction_invpred_MODE>:
200473e8:	20047274                                tr. 

200473ec <decoder_texture_IS_AC_PRED_DIR>:
200473ec:	20047274                                tr. 

200473f0 <decoder_texture_DCReconstruction_invpred_SIGNED>:
200473f0:	20047288                                .r. 

200473f4 <decoder_texture_idct2d_SIGNED>:
200473f4:	20047288                                .r. 

200473f8 <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>:
200473f8:	2004729c                                .r. 

200473fc <decoder_texture_IAP_AC_PRED_DIR>:
200473fc:	2004729c                                .r. 

20047400 <decoder_texture_DCReconstruction_invpred_QUANT>:
20047400:	200472b0                                .r. 

20047404 <decoder_texture_IQ_QP>:
20047404:	200472b0                                .r. 

20047408 <decoder_motion_interpolation_MOT>:
20047408:	200472c4                                .r. 

2004740c <decoder_motion_add_MOT>:
2004740c:	200472c4                                .r. 

20047410 <decoder_motion_add_VID>:
20047410:	200472d8                                .r. 

20047414 <decoder_motion_framebuf_WD>:
20047414:	200472d8                                .r. 

20047418 <decoder_merger_YUV_i>:
20047418:	200472d8                                .r. 

2004741c <decoder_motion_framebuf_RD>:
2004741c:	200472ec                                .r. 

20047420 <decoder_motion_interpolation_RD>:
20047420:	200472ec                                .r. 

20047424 <decoder_motion_framebuf_halfpel>:
20047424:	20047300                                .s. 

20047428 <decoder_motion_interpolation_halfpel>:
20047428:	20047300                                .s. 

2004742c <actorNotFinished>:
2004742c:	00000001                                ....

20047430 <needInit>:
20047430:	00000001                                ....

20047434 <stateNames>:
20047434:	2004486c 2004487c 20044888 200448a4     lH. |H. .H. .H. 
20047444:	200448b0 200448c4 200448d8 200448e8     .H. .H. .H. .H. 
20047454:	200448f0 200448f8 20044908 20044918     .H. .H. .I. .I. 
20047464:	20044924 2004493c 20044958 2004497c     $I. <I. XI. |I. 
20047474:	200449a0 200449ac 200449bc 200449d4     .I. .I. .I. .I. 
20047484:	200449e8                                .I. 

20047488 <fifo_0>:
20047488:	00000200 80000000 00000001 80000200     ................
20047498:	80000204                                ....

2004749c <fifo_1>:
2004749c:	00000200 80000208 00000001 80000408     ................
200474ac:	8000040c                                ....

200474b0 <fifo_2>:
200474b0:	00000200 80000410 00000001 80000610     ................
200474c0:	80000614                                ....

200474c4 <fifo_3>:
200474c4:	00000200 80000618 00000001 80000a18     ................
200474d4:	80000a1c                                ....

200474d8 <fifo_4>:
200474d8:	00000200 80000a20 00000001 80000c20     .... ....... ...
200474e8:	80000c24                                $...

200474ec <fifo_5>:
200474ec:	00000200 80000c28 00000001 80001028     ....(.......(...
200474fc:	8000102c                                ,...

20047500 <fifo_6>:
20047500:	00000200 80001030 00000001 80001430     ....0.......0...
20047510:	80001434                                4...

20047514 <fifo_7>:
20047514:	00000200 80001438 00000001 80001c38     ....8.......8...
20047524:	80001c3c                                <...

20047528 <fifo_8>:
20047528:	00000200 80001c40 00000006 80002040     ....@.......@ ..
20047538:	80002058                                X ..

2004753c <fifo_9>:
2004753c:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
2004754c:	80002460                                `$..

20047550 <fifo_10>:
20047550:	00000200 80002464 00000001 80002864     ....d$......d(..
20047560:	80002868                                h(..

20047564 <fifo_11>:
20047564:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
20047574:	80002c70                                p,..

20047578 <fifo_12>:
20047578:	00000200 80002c74 00000001 80003074     ....t,......t0..
20047588:	80003078                                x0..

2004758c <fifo_13>:
2004758c:	00000200 8000307c 00000001 8000347c     ....|0......|4..
2004759c:	80003480                                .4..

200475a0 <fifo_14>:
200475a0:	00000200 80003484 00000001 80003884     .....4.......8..
200475b0:	80003888                                .8..

200475b4 <fifo_15>:
200475b4:	00000200 8000388c 00000001 80003c8c     .....8.......<..
200475c4:	80003c90                                .<..

200475c8 <fifo_16>:
200475c8:	00000200 80003c94 00000001 80004094     .....<.......@..
200475d8:	80004098                                .@..

200475dc <fifo_17>:
200475dc:	00000200 8000409c 00000001 8000449c     .....@.......D..
200475ec:	800044a0                                .D..

200475f0 <fifo_18>:
200475f0:	00000200 800044a4 00000001 800048a4     .....D.......H..
20047600:	800048a8                                .H..

20047604 <fifo_19>:
20047604:	00000200 800048ac 00000001 80004cac     .....H.......L..
20047614:	80004cb0                                .L..

20047618 <fifo_20>:
20047618:	00000200 80004cb4 00000001 800050b4     .....L.......P..
20047628:	800050b8                                .P..

2004762c <fifo_21>:
2004762c:	00000200 800050bc 00000001 800054bc     .....P.......T..
2004763c:	800054c0                                .T..

20047640 <fifo_22>:
20047640:	00000200 800054c4 00000001 800058c4     .....T.......X..
20047650:	800058c8                                .X..

20047654 <fifo_23>:
20047654:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20047664:	80005cd0                                .\..

20047668 <fifo_24>:
20047668:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20047678:	80005ed8                                .^..

2004767c <fifo_25>:
2004767c:	00000200 80005edc 00000001 800066dc     .....^.......f..
2004768c:	800066e0                                .f..

20047690 <fifo_26>:
20047690:	00000200 800066e4 00000001 800068e4     .....f.......h..
200476a0:	800068e8                                .h..

200476a4 <fifo_27>:
200476a4:	00000200 800068ec 00000001 80006aec     .....h.......j..
200476b4:	80006af0                                .j..

200476b8 <fifo_28>:
200476b8:	00000200 80006af4 00000001 80006ef4     .....j.......n..
200476c8:	80006ef8                                .n..

200476cc <fifo_29>:
200476cc:	00000200 80006efc 00000002 800072fc     .....n.......r..
200476dc:	80007304                                .s..

200476e0 <fifo_30>:
200476e0:	00000200 80007308 00000001 80007708     .....s.......w..
200476f0:	8000770c                                .w..

200476f4 <fifo_31>:
200476f4:	00000200 80007710 00000001 80007910     .....w.......y..
20047704:	80007914                                .y..

20047708 <source_O>:
20047708:	20047488                                .t. 

2004770c <decoder_parser_parseheaders_BYTE>:
2004770c:	20047488                                .t. 

20047710 <decoder_merger_YUV>:
20047710:	2004749c                                .t. 

20047714 <display_B>:
20047714:	2004749c                                .t. 

20047718 <decoder_parser_parseheaders_QP>:
20047718:	200474b0                                .t. 

2004771c <decoder_texture_DCReconstruction_invpred_QP>:
2004771c:	200474b0                                .t. 

20047720 <decoder_parser_parseheaders_HEIGHT>:
20047720:	200474c4                                .t. 

20047724 <display_HEIGHT>:
20047724:	200474c4                                .t. 

20047728 <decoder_parser_parseheaders_RUN>:
20047728:	200474d8                                .t. 

2004772c <decoder_parser_blkexp_RUN>:
2004772c:	200474d8                                .t. 

20047730 <decoder_parser_parseheaders_MV>:
20047730:	200474ec                                .t. 

20047734 <decoder_parser_mvrecon_MVIN>:
20047734:	200474ec                                .t. 

20047738 <decoder_parser_parseheaders_WIDTH>:
20047738:	20047500                                .u. 

2004773c <display_WIDTH>:
2004773c:	20047500                                .u. 

20047740 <decoder_parser_parseheaders_LAST>:
20047740:	20047514                                .u. 

20047744 <decoder_parser_blkexp_LAST>:
20047744:	20047514                                .u. 

20047748 <decoder_parser_parseheaders_BTYPE>:
20047748:	20047528                                (u. 

2004774c <decoder_parser_mvseq_BTYPE>:
2004774c:	20047528                                (u. 

20047750 <decoder_parser_mvrecon_BTYPE>:
20047750:	20047528                                (u. 

20047754 <decoder_texture_DCReconstruction_addressing_BTYPE>:
20047754:	20047528                                (u. 

20047758 <decoder_texture_DCReconstruction_invpred_BTYPE>:
20047758:	20047528                                (u. 

2004775c <decoder_motion_add_BTYPE>:
2004775c:	20047528                                (u. 

20047760 <decoder_motion_framebuf_BTYPE>:
20047760:	20047528                                (u. 

20047764 <decoder_parser_parseheaders_VALUE>:
20047764:	2004753c                                <u. 

20047768 <decoder_parser_blkexp_VALUE>:
20047768:	2004753c                                <u. 

2004776c <decoder_parser_mvseq_A>:
2004776c:	20047550                                Pu. 

20047770 <decoder_parser_mvrecon_A>:
20047770:	20047550                                Pu. 

20047774 <decoder_parser_blkexp_QFS>:
20047774:	20047564                                du. 

20047778 <decoder_texture_DCsplit_IN>:
20047778:	20047564                                du. 

2004777c <decoder_parser_mvrecon_MV>:
2004777c:	20047578                                xu. 

20047780 <decoder_motion_framebuf_MV>:
20047780:	20047578                                xu. 

20047784 <decoder_texture_DCsplit_AC>:
20047784:	2004758c                                .u. 

20047788 <decoder_texture_IS_QFS_AC>:
20047788:	2004758c                                .u. 

2004778c <decoder_texture_DCsplit_DC>:
2004778c:	200475a0                                .u. 

20047790 <decoder_texture_DCReconstruction_invpred_QFS_DC>:
20047790:	200475a0                                .u. 

20047794 <decoder_texture_IS_PQF_AC>:
20047794:	200475b4                                .u. 

20047798 <decoder_texture_IAP_PQF_AC>:
20047798:	200475b4                                .u. 

2004779c <decoder_texture_IAP_QF_AC>:
2004779c:	200475c8                                .u. 

200477a0 <decoder_texture_IQ_AC>:
200477a0:	200475c8                                .u. 

200477a4 <decoder_texture_IQ_OUT>:
200477a4:	200475dc                                .u. 

200477a8 <decoder_texture_idct2d_IN>:
200477a8:	200475dc                                .u. 

200477ac <decoder_texture_idct2d_OUT>:
200477ac:	200475f0                                .u. 

200477b0 <decoder_motion_add_TEX>:
200477b0:	200475f0                                .u. 

200477b4 <decoder_texture_DCReconstruction_addressing_B>:
200477b4:	20047604                                .v. 

200477b8 <decoder_texture_DCReconstruction_invpred_B>:
200477b8:	20047604                                .v. 

200477bc <decoder_texture_DCReconstruction_addressing_A>:
200477bc:	20047618                                .v. 

200477c0 <decoder_texture_DCReconstruction_invpred_A>:
200477c0:	20047618                                .v. 

200477c4 <decoder_texture_DCReconstruction_addressing_C>:
200477c4:	2004762c                                ,v. 

200477c8 <decoder_texture_DCReconstruction_invpred_C>:
200477c8:	2004762c                                ,v. 

200477cc <decoder_texture_DCReconstruction_invpred_PTR>:
200477cc:	20047640                                @v. 

200477d0 <decoder_texture_IAP_PTR>:
200477d0:	20047640                                @v. 

200477d4 <decoder_texture_DCReconstruction_invpred_QF_DC>:
200477d4:	20047654                                Tv. 

200477d8 <decoder_texture_IQ_DC>:
200477d8:	20047654                                Tv. 

200477dc <decoder_texture_DCReconstruction_invpred_MODE>:
200477dc:	20047668                                hv. 

200477e0 <decoder_texture_IS_AC_PRED_DIR>:
200477e0:	20047668                                hv. 

200477e4 <decoder_texture_DCReconstruction_invpred_SIGNED>:
200477e4:	2004767c                                |v. 

200477e8 <decoder_texture_idct2d_SIGNED>:
200477e8:	2004767c                                |v. 

200477ec <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>:
200477ec:	20047690                                .v. 

200477f0 <decoder_texture_IAP_AC_PRED_DIR>:
200477f0:	20047690                                .v. 

200477f4 <decoder_texture_DCReconstruction_invpred_QUANT>:
200477f4:	200476a4                                .v. 

200477f8 <decoder_texture_IQ_QP>:
200477f8:	200476a4                                .v. 

200477fc <decoder_motion_interpolation_MOT>:
200477fc:	200476b8                                .v. 

20047800 <decoder_motion_add_MOT>:
20047800:	200476b8                                .v. 

20047804 <decoder_motion_add_VID>:
20047804:	200476cc                                .v. 

20047808 <decoder_motion_framebuf_WD>:
20047808:	200476cc                                .v. 

2004780c <decoder_merger_YUV_i>:
2004780c:	200476cc                                .v. 

20047810 <decoder_motion_framebuf_RD>:
20047810:	200476e0                                .v. 

20047814 <decoder_motion_interpolation_RD>:
20047814:	200476e0                                .v. 

20047818 <decoder_motion_framebuf_halfpel>:
20047818:	200476f4                                .v. 

2004781c <decoder_motion_interpolation_halfpel>:
2004781c:	200476f4                                .v. 

20047820 <top_edge>:
20047820:	00000001                                ....

20047824 <needInit>:
20047824:	00000001                                ....

20047828 <stateNames>:
20047828:	2004540c 20045414 2004541c 20045424     .T. .T. .T. $T. 
20047838:	2004542c                                ,T. 

2004783c <fifo_0>:
2004783c:	00000200 80000000 00000001 80000200     ................
2004784c:	80000204                                ....

20047850 <fifo_1>:
20047850:	00000200 80000208 00000001 80000408     ................
20047860:	8000040c                                ....

20047864 <fifo_2>:
20047864:	00000200 80000410 00000001 80000610     ................
20047874:	80000614                                ....

20047878 <fifo_3>:
20047878:	00000200 80000618 00000001 80000a18     ................
20047888:	80000a1c                                ....

2004788c <fifo_4>:
2004788c:	00000200 80000a20 00000001 80000c20     .... ....... ...
2004789c:	80000c24                                $...

200478a0 <fifo_5>:
200478a0:	00000200 80000c28 00000001 80001028     ....(.......(...
200478b0:	8000102c                                ,...

200478b4 <fifo_6>:
200478b4:	00000200 80001030 00000001 80001430     ....0.......0...
200478c4:	80001434                                4...

200478c8 <fifo_7>:
200478c8:	00000200 80001438 00000001 80001c38     ....8.......8...
200478d8:	80001c3c                                <...

200478dc <fifo_8>:
200478dc:	00000200 80001c40 00000006 80002040     ....@.......@ ..
200478ec:	80002058                                X ..

200478f0 <fifo_9>:
200478f0:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
20047900:	80002460                                `$..

20047904 <fifo_10>:
20047904:	00000200 80002464 00000001 80002864     ....d$......d(..
20047914:	80002868                                h(..

20047918 <fifo_11>:
20047918:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
20047928:	80002c70                                p,..

2004792c <fifo_12>:
2004792c:	00000200 80002c74 00000001 80003074     ....t,......t0..
2004793c:	80003078                                x0..

20047940 <fifo_13>:
20047940:	00000200 8000307c 00000001 8000347c     ....|0......|4..
20047950:	80003480                                .4..

20047954 <fifo_14>:
20047954:	00000200 80003484 00000001 80003884     .....4.......8..
20047964:	80003888                                .8..

20047968 <fifo_15>:
20047968:	00000200 8000388c 00000001 80003c8c     .....8.......<..
20047978:	80003c90                                .<..

2004797c <fifo_16>:
2004797c:	00000200 80003c94 00000001 80004094     .....<.......@..
2004798c:	80004098                                .@..

20047990 <fifo_17>:
20047990:	00000200 8000409c 00000001 8000449c     .....@.......D..
200479a0:	800044a0                                .D..

200479a4 <fifo_18>:
200479a4:	00000200 800044a4 00000001 800048a4     .....D.......H..
200479b4:	800048a8                                .H..

200479b8 <fifo_19>:
200479b8:	00000200 800048ac 00000001 80004cac     .....H.......L..
200479c8:	80004cb0                                .L..

200479cc <fifo_20>:
200479cc:	00000200 80004cb4 00000001 800050b4     .....L.......P..
200479dc:	800050b8                                .P..

200479e0 <fifo_21>:
200479e0:	00000200 800050bc 00000001 800054bc     .....P.......T..
200479f0:	800054c0                                .T..

200479f4 <fifo_22>:
200479f4:	00000200 800054c4 00000001 800058c4     .....T.......X..
20047a04:	800058c8                                .X..

20047a08 <fifo_23>:
20047a08:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20047a18:	80005cd0                                .\..

20047a1c <fifo_24>:
20047a1c:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20047a2c:	80005ed8                                .^..

20047a30 <fifo_25>:
20047a30:	00000200 80005edc 00000001 800066dc     .....^.......f..
20047a40:	800066e0                                .f..

20047a44 <fifo_26>:
20047a44:	00000200 800066e4 00000001 800068e4     .....f.......h..
20047a54:	800068e8                                .h..

20047a58 <fifo_27>:
20047a58:	00000200 800068ec 00000001 80006aec     .....h.......j..
20047a68:	80006af0                                .j..

20047a6c <fifo_28>:
20047a6c:	00000200 80006af4 00000001 80006ef4     .....j.......n..
20047a7c:	80006ef8                                .n..

20047a80 <fifo_29>:
20047a80:	00000200 80006efc 00000002 800072fc     .....n.......r..
20047a90:	80007304                                .s..

20047a94 <fifo_30>:
20047a94:	00000200 80007308 00000001 80007708     .....s.......w..
20047aa4:	8000770c                                .w..

20047aa8 <fifo_31>:
20047aa8:	00000200 80007710 00000001 80007910     .....w.......y..
20047ab8:	80007914                                .y..

20047abc <source_O>:
20047abc:	2004783c                                <x. 

20047ac0 <decoder_parser_parseheaders_BYTE>:
20047ac0:	2004783c                                <x. 

20047ac4 <decoder_merger_YUV>:
20047ac4:	20047850                                Px. 

20047ac8 <display_B>:
20047ac8:	20047850                                Px. 

20047acc <decoder_parser_parseheaders_QP>:
20047acc:	20047864                                dx. 

20047ad0 <decoder_texture_DCReconstruction_invpred_QP>:
20047ad0:	20047864                                dx. 

20047ad4 <decoder_parser_parseheaders_HEIGHT>:
20047ad4:	20047878                                xx. 

20047ad8 <display_HEIGHT>:
20047ad8:	20047878                                xx. 

20047adc <decoder_parser_parseheaders_RUN>:
20047adc:	2004788c                                .x. 

20047ae0 <decoder_parser_blkexp_RUN>:
20047ae0:	2004788c                                .x. 

20047ae4 <decoder_parser_parseheaders_MV>:
20047ae4:	200478a0                                .x. 

20047ae8 <decoder_parser_mvrecon_MVIN>:
20047ae8:	200478a0                                .x. 

20047aec <decoder_parser_parseheaders_WIDTH>:
20047aec:	200478b4                                .x. 

20047af0 <display_WIDTH>:
20047af0:	200478b4                                .x. 

20047af4 <decoder_parser_parseheaders_LAST>:
20047af4:	200478c8                                .x. 

20047af8 <decoder_parser_blkexp_LAST>:
20047af8:	200478c8                                .x. 

20047afc <decoder_parser_parseheaders_BTYPE>:
20047afc:	200478dc                                .x. 

20047b00 <decoder_parser_mvseq_BTYPE>:
20047b00:	200478dc                                .x. 

20047b04 <decoder_parser_mvrecon_BTYPE>:
20047b04:	200478dc                                .x. 

20047b08 <decoder_texture_DCReconstruction_addressing_BTYPE>:
20047b08:	200478dc                                .x. 

20047b0c <decoder_texture_DCReconstruction_invpred_BTYPE>:
20047b0c:	200478dc                                .x. 

20047b10 <decoder_motion_add_BTYPE>:
20047b10:	200478dc                                .x. 

20047b14 <decoder_motion_framebuf_BTYPE>:
20047b14:	200478dc                                .x. 

20047b18 <decoder_parser_parseheaders_VALUE>:
20047b18:	200478f0                                .x. 

20047b1c <decoder_parser_blkexp_VALUE>:
20047b1c:	200478f0                                .x. 

20047b20 <decoder_parser_mvseq_A>:
20047b20:	20047904                                .y. 

20047b24 <decoder_parser_mvrecon_A>:
20047b24:	20047904                                .y. 

20047b28 <decoder_parser_blkexp_QFS>:
20047b28:	20047918                                .y. 

20047b2c <decoder_texture_DCsplit_IN>:
20047b2c:	20047918                                .y. 

20047b30 <decoder_parser_mvrecon_MV>:
20047b30:	2004792c                                ,y. 

20047b34 <decoder_motion_framebuf_MV>:
20047b34:	2004792c                                ,y. 

20047b38 <decoder_texture_DCsplit_AC>:
20047b38:	20047940                                @y. 

20047b3c <decoder_texture_IS_QFS_AC>:
20047b3c:	20047940                                @y. 

20047b40 <decoder_texture_DCsplit_DC>:
20047b40:	20047954                                Ty. 

20047b44 <decoder_texture_DCReconstruction_invpred_QFS_DC>:
20047b44:	20047954                                Ty. 

20047b48 <decoder_texture_IS_PQF_AC>:
20047b48:	20047968                                hy. 

20047b4c <decoder_texture_IAP_PQF_AC>:
20047b4c:	20047968                                hy. 

20047b50 <decoder_texture_IAP_QF_AC>:
20047b50:	2004797c                                |y. 

20047b54 <decoder_texture_IQ_AC>:
20047b54:	2004797c                                |y. 

20047b58 <decoder_texture_IQ_OUT>:
20047b58:	20047990                                .y. 

20047b5c <decoder_texture_idct2d_IN>:
20047b5c:	20047990                                .y. 

20047b60 <decoder_texture_idct2d_OUT>:
20047b60:	200479a4                                .y. 

20047b64 <decoder_motion_add_TEX>:
20047b64:	200479a4                                .y. 

20047b68 <decoder_texture_DCReconstruction_addressing_B>:
20047b68:	200479b8                                .y. 

20047b6c <decoder_texture_DCReconstruction_invpred_B>:
20047b6c:	200479b8                                .y. 

20047b70 <decoder_texture_DCReconstruction_addressing_A>:
20047b70:	200479cc                                .y. 

20047b74 <decoder_texture_DCReconstruction_invpred_A>:
20047b74:	200479cc                                .y. 

20047b78 <decoder_texture_DCReconstruction_addressing_C>:
20047b78:	200479e0                                .y. 

20047b7c <decoder_texture_DCReconstruction_invpred_C>:
20047b7c:	200479e0                                .y. 

20047b80 <decoder_texture_DCReconstruction_invpred_PTR>:
20047b80:	200479f4                                .y. 

20047b84 <decoder_texture_IAP_PTR>:
20047b84:	200479f4                                .y. 

20047b88 <decoder_texture_DCReconstruction_invpred_QF_DC>:
20047b88:	20047a08                                .z. 

20047b8c <decoder_texture_IQ_DC>:
20047b8c:	20047a08                                .z. 

20047b90 <decoder_texture_DCReconstruction_invpred_MODE>:
20047b90:	20047a1c                                .z. 

20047b94 <decoder_texture_IS_AC_PRED_DIR>:
20047b94:	20047a1c                                .z. 

20047b98 <decoder_texture_DCReconstruction_invpred_SIGNED>:
20047b98:	20047a30                                0z. 

20047b9c <decoder_texture_idct2d_SIGNED>:
20047b9c:	20047a30                                0z. 

20047ba0 <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>:
20047ba0:	20047a44                                Dz. 

20047ba4 <decoder_texture_IAP_AC_PRED_DIR>:
20047ba4:	20047a44                                Dz. 

20047ba8 <decoder_texture_DCReconstruction_invpred_QUANT>:
20047ba8:	20047a58                                Xz. 

20047bac <decoder_texture_IQ_QP>:
20047bac:	20047a58                                Xz. 

20047bb0 <decoder_motion_interpolation_MOT>:
20047bb0:	20047a6c                                lz. 

20047bb4 <decoder_motion_add_MOT>:
20047bb4:	20047a6c                                lz. 

20047bb8 <decoder_motion_add_VID>:
20047bb8:	20047a80                                .z. 

20047bbc <decoder_motion_framebuf_WD>:
20047bbc:	20047a80                                .z. 

20047bc0 <decoder_merger_YUV_i>:
20047bc0:	20047a80                                .z. 

20047bc4 <decoder_motion_framebuf_RD>:
20047bc4:	20047a94                                .z. 

20047bc8 <decoder_motion_interpolation_RD>:
20047bc8:	20047a94                                .z. 

20047bcc <decoder_motion_framebuf_halfpel>:
20047bcc:	20047aa8                                .z. 

20047bd0 <decoder_motion_interpolation_halfpel>:
20047bd0:	20047aa8                                .z. 

20047bd4 <ptr>:
20047bd4:	00000008                                ....

20047bd8 <dc_buf>:
20047bd8:	04000400 04000400 04000400 04000400     ................
20047be8:	04000400 04000400 04000400 04000400     ................
20047bf8:	04000400 04000400 04000400 04000400     ................
20047c08:	04000400 04000400 04000400 04000400     ................
20047c18:	04000400 04000400 04000400 04000400     ................
20047c28:	04000400 04000400 04000400 04000400     ................
20047c38:	04000400 04000400 04000400 04000400     ................
20047c48:	04000400 04000400 04000400 04000400     ................
20047c58:	04000400 04000400 04000400 04000400     ................
20047c68:	04000400 04000400 04000400 04000400     ................
20047c78:	04000400 04000400 04000400 04000400     ................
20047c88:	04000400 04000400 04000400 04000400     ................
20047c98:	04000400 04000400 04000400 04000400     ................
20047ca8:	04000400 04000400 04000400 04000400     ................

20047cb8 <needInit>:
20047cb8:	00000001                                ....

20047cbc <stateNames>:
20047cbc:	20045448 20045450 20045458 20045460     HT. PT. XT. `T. 
20047ccc:	20045468 20045470 20045478              hT. pT. xT. 

20047cd8 <fifo_0>:
20047cd8:	00000200 80000000 00000001 80000200     ................
20047ce8:	80000204                                ....

20047cec <fifo_1>:
20047cec:	00000200 80000208 00000001 80000408     ................
20047cfc:	8000040c                                ....

20047d00 <fifo_2>:
20047d00:	00000200 80000410 00000001 80000610     ................
20047d10:	80000614                                ....

20047d14 <fifo_3>:
20047d14:	00000200 80000618 00000001 80000a18     ................
20047d24:	80000a1c                                ....

20047d28 <fifo_4>:
20047d28:	00000200 80000a20 00000001 80000c20     .... ....... ...
20047d38:	80000c24                                $...

20047d3c <fifo_5>:
20047d3c:	00000200 80000c28 00000001 80001028     ....(.......(...
20047d4c:	8000102c                                ,...

20047d50 <fifo_6>:
20047d50:	00000200 80001030 00000001 80001430     ....0.......0...
20047d60:	80001434                                4...

20047d64 <fifo_7>:
20047d64:	00000200 80001438 00000001 80001c38     ....8.......8...
20047d74:	80001c3c                                <...

20047d78 <fifo_8>:
20047d78:	00000200 80001c40 00000006 80002040     ....@.......@ ..
20047d88:	80002058                                X ..

20047d8c <fifo_9>:
20047d8c:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
20047d9c:	80002460                                `$..

20047da0 <fifo_10>:
20047da0:	00000200 80002464 00000001 80002864     ....d$......d(..
20047db0:	80002868                                h(..

20047db4 <fifo_11>:
20047db4:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
20047dc4:	80002c70                                p,..

20047dc8 <fifo_12>:
20047dc8:	00000200 80002c74 00000001 80003074     ....t,......t0..
20047dd8:	80003078                                x0..

20047ddc <fifo_13>:
20047ddc:	00000200 8000307c 00000001 8000347c     ....|0......|4..
20047dec:	80003480                                .4..

20047df0 <fifo_14>:
20047df0:	00000200 80003484 00000001 80003884     .....4.......8..
20047e00:	80003888                                .8..

20047e04 <fifo_15>:
20047e04:	00000200 8000388c 00000001 80003c8c     .....8.......<..
20047e14:	80003c90                                .<..

20047e18 <fifo_16>:
20047e18:	00000200 80003c94 00000001 80004094     .....<.......@..
20047e28:	80004098                                .@..

20047e2c <fifo_17>:
20047e2c:	00000200 8000409c 00000001 8000449c     .....@.......D..
20047e3c:	800044a0                                .D..

20047e40 <fifo_18>:
20047e40:	00000200 800044a4 00000001 800048a4     .....D.......H..
20047e50:	800048a8                                .H..

20047e54 <fifo_19>:
20047e54:	00000200 800048ac 00000001 80004cac     .....H.......L..
20047e64:	80004cb0                                .L..

20047e68 <fifo_20>:
20047e68:	00000200 80004cb4 00000001 800050b4     .....L.......P..
20047e78:	800050b8                                .P..

20047e7c <fifo_21>:
20047e7c:	00000200 800050bc 00000001 800054bc     .....P.......T..
20047e8c:	800054c0                                .T..

20047e90 <fifo_22>:
20047e90:	00000200 800054c4 00000001 800058c4     .....T.......X..
20047ea0:	800058c8                                .X..

20047ea4 <fifo_23>:
20047ea4:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20047eb4:	80005cd0                                .\..

20047eb8 <fifo_24>:
20047eb8:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20047ec8:	80005ed8                                .^..

20047ecc <fifo_25>:
20047ecc:	00000200 80005edc 00000001 800066dc     .....^.......f..
20047edc:	800066e0                                .f..

20047ee0 <fifo_26>:
20047ee0:	00000200 800066e4 00000001 800068e4     .....f.......h..
20047ef0:	800068e8                                .h..

20047ef4 <fifo_27>:
20047ef4:	00000200 800068ec 00000001 80006aec     .....h.......j..
20047f04:	80006af0                                .j..

20047f08 <fifo_28>:
20047f08:	00000200 80006af4 00000001 80006ef4     .....j.......n..
20047f18:	80006ef8                                .n..

20047f1c <fifo_29>:
20047f1c:	00000200 80006efc 00000002 800072fc     .....n.......r..
20047f2c:	80007304                                .s..

20047f30 <fifo_30>:
20047f30:	00000200 80007308 00000001 80007708     .....s.......w..
20047f40:	8000770c                                .w..

20047f44 <fifo_31>:
20047f44:	00000200 80007710 00000001 80007910     .....w.......y..
20047f54:	80007914                                .y..

20047f58 <source_O>:
20047f58:	20047cd8                                .|. 

20047f5c <decoder_parser_parseheaders_BYTE>:
20047f5c:	20047cd8                                .|. 

20047f60 <decoder_merger_YUV>:
20047f60:	20047cec                                .|. 

20047f64 <display_B>:
20047f64:	20047cec                                .|. 

20047f68 <decoder_parser_parseheaders_QP>:
20047f68:	20047d00                                .}. 

20047f6c <decoder_texture_DCReconstruction_invpred_QP>:
20047f6c:	20047d00                                .}. 

20047f70 <decoder_parser_parseheaders_HEIGHT>:
20047f70:	20047d14                                .}. 

20047f74 <display_HEIGHT>:
20047f74:	20047d14                                .}. 

20047f78 <decoder_parser_parseheaders_RUN>:
20047f78:	20047d28                                (}. 

20047f7c <decoder_parser_blkexp_RUN>:
20047f7c:	20047d28                                (}. 

20047f80 <decoder_parser_parseheaders_MV>:
20047f80:	20047d3c                                <}. 

20047f84 <decoder_parser_mvrecon_MVIN>:
20047f84:	20047d3c                                <}. 

20047f88 <decoder_parser_parseheaders_WIDTH>:
20047f88:	20047d50                                P}. 

20047f8c <display_WIDTH>:
20047f8c:	20047d50                                P}. 

20047f90 <decoder_parser_parseheaders_LAST>:
20047f90:	20047d64                                d}. 

20047f94 <decoder_parser_blkexp_LAST>:
20047f94:	20047d64                                d}. 

20047f98 <decoder_parser_parseheaders_BTYPE>:
20047f98:	20047d78                                x}. 

20047f9c <decoder_parser_mvseq_BTYPE>:
20047f9c:	20047d78                                x}. 

20047fa0 <decoder_parser_mvrecon_BTYPE>:
20047fa0:	20047d78                                x}. 

20047fa4 <decoder_texture_DCReconstruction_addressing_BTYPE>:
20047fa4:	20047d78                                x}. 

20047fa8 <decoder_texture_DCReconstruction_invpred_BTYPE>:
20047fa8:	20047d78                                x}. 

20047fac <decoder_motion_add_BTYPE>:
20047fac:	20047d78                                x}. 

20047fb0 <decoder_motion_framebuf_BTYPE>:
20047fb0:	20047d78                                x}. 

20047fb4 <decoder_parser_parseheaders_VALUE>:
20047fb4:	20047d8c                                .}. 

20047fb8 <decoder_parser_blkexp_VALUE>:
20047fb8:	20047d8c                                .}. 

20047fbc <decoder_parser_mvseq_A>:
20047fbc:	20047da0                                .}. 

20047fc0 <decoder_parser_mvrecon_A>:
20047fc0:	20047da0                                .}. 

20047fc4 <decoder_parser_blkexp_QFS>:
20047fc4:	20047db4                                .}. 

20047fc8 <decoder_texture_DCsplit_IN>:
20047fc8:	20047db4                                .}. 

20047fcc <decoder_parser_mvrecon_MV>:
20047fcc:	20047dc8                                .}. 

20047fd0 <decoder_motion_framebuf_MV>:
20047fd0:	20047dc8                                .}. 

20047fd4 <decoder_texture_DCsplit_AC>:
20047fd4:	20047ddc                                .}. 

20047fd8 <decoder_texture_IS_QFS_AC>:
20047fd8:	20047ddc                                .}. 

20047fdc <decoder_texture_DCsplit_DC>:
20047fdc:	20047df0                                .}. 

20047fe0 <decoder_texture_DCReconstruction_invpred_QFS_DC>:
20047fe0:	20047df0                                .}. 

20047fe4 <decoder_texture_IS_PQF_AC>:
20047fe4:	20047e04                                .~. 

20047fe8 <decoder_texture_IAP_PQF_AC>:
20047fe8:	20047e04                                .~. 

20047fec <decoder_texture_IAP_QF_AC>:
20047fec:	20047e18                                .~. 

20047ff0 <decoder_texture_IQ_AC>:
20047ff0:	20047e18                                .~. 

20047ff4 <decoder_texture_IQ_OUT>:
20047ff4:	20047e2c                                ,~. 

20047ff8 <decoder_texture_idct2d_IN>:
20047ff8:	20047e2c                                ,~. 

20047ffc <decoder_texture_idct2d_OUT>:
20047ffc:	20047e40                                @~. 

20048000 <decoder_motion_add_TEX>:
20048000:	20047e40                                @~. 

20048004 <decoder_texture_DCReconstruction_addressing_B>:
20048004:	20047e54                                T~. 

20048008 <decoder_texture_DCReconstruction_invpred_B>:
20048008:	20047e54                                T~. 

2004800c <decoder_texture_DCReconstruction_addressing_A>:
2004800c:	20047e68                                h~. 

20048010 <decoder_texture_DCReconstruction_invpred_A>:
20048010:	20047e68                                h~. 

20048014 <decoder_texture_DCReconstruction_addressing_C>:
20048014:	20047e7c                                |~. 

20048018 <decoder_texture_DCReconstruction_invpred_C>:
20048018:	20047e7c                                |~. 

2004801c <decoder_texture_DCReconstruction_invpred_PTR>:
2004801c:	20047e90                                .~. 

20048020 <decoder_texture_IAP_PTR>:
20048020:	20047e90                                .~. 

20048024 <decoder_texture_DCReconstruction_invpred_QF_DC>:
20048024:	20047ea4                                .~. 

20048028 <decoder_texture_IQ_DC>:
20048028:	20047ea4                                .~. 

2004802c <decoder_texture_DCReconstruction_invpred_MODE>:
2004802c:	20047eb8                                .~. 

20048030 <decoder_texture_IS_AC_PRED_DIR>:
20048030:	20047eb8                                .~. 

20048034 <decoder_texture_DCReconstruction_invpred_SIGNED>:
20048034:	20047ecc                                .~. 

20048038 <decoder_texture_idct2d_SIGNED>:
20048038:	20047ecc                                .~. 

2004803c <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>:
2004803c:	20047ee0                                .~. 

20048040 <decoder_texture_IAP_AC_PRED_DIR>:
20048040:	20047ee0                                .~. 

20048044 <decoder_texture_DCReconstruction_invpred_QUANT>:
20048044:	20047ef4                                .~. 

20048048 <decoder_texture_IQ_QP>:
20048048:	20047ef4                                .~. 

2004804c <decoder_motion_interpolation_MOT>:
2004804c:	20047f08                                ... 

20048050 <decoder_motion_add_MOT>:
20048050:	20047f08                                ... 

20048054 <decoder_motion_add_VID>:
20048054:	20047f1c                                ... 

20048058 <decoder_motion_framebuf_WD>:
20048058:	20047f1c                                ... 

2004805c <decoder_merger_YUV_i>:
2004805c:	20047f1c                                ... 

20048060 <decoder_motion_framebuf_RD>:
20048060:	20047f30                                0.. 

20048064 <decoder_motion_interpolation_RD>:
20048064:	20047f30                                0.. 

20048068 <decoder_motion_framebuf_halfpel>:
20048068:	20047f44                                D.. 

2004806c <decoder_motion_interpolation_halfpel>:
2004806c:	20047f44                                D.. 

20048070 <needInit>:
20048070:	00000001                                ....

20048074 <fifo_0>:
20048074:	00000200 80000000 00000001 80000200     ................
20048084:	80000204                                ....

20048088 <fifo_1>:
20048088:	00000200 80000208 00000001 80000408     ................
20048098:	8000040c                                ....

2004809c <fifo_2>:
2004809c:	00000200 80000410 00000001 80000610     ................
200480ac:	80000614                                ....

200480b0 <fifo_3>:
200480b0:	00000200 80000618 00000001 80000a18     ................
200480c0:	80000a1c                                ....

200480c4 <fifo_4>:
200480c4:	00000200 80000a20 00000001 80000c20     .... ....... ...
200480d4:	80000c24                                $...

200480d8 <fifo_5>:
200480d8:	00000200 80000c28 00000001 80001028     ....(.......(...
200480e8:	8000102c                                ,...

200480ec <fifo_6>:
200480ec:	00000200 80001030 00000001 80001430     ....0.......0...
200480fc:	80001434                                4...

20048100 <fifo_7>:
20048100:	00000200 80001438 00000001 80001c38     ....8.......8...
20048110:	80001c3c                                <...

20048114 <fifo_8>:
20048114:	00000200 80001c40 00000006 80002040     ....@.......@ ..
20048124:	80002058                                X ..

20048128 <fifo_9>:
20048128:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
20048138:	80002460                                `$..

2004813c <fifo_10>:
2004813c:	00000200 80002464 00000001 80002864     ....d$......d(..
2004814c:	80002868                                h(..

20048150 <fifo_11>:
20048150:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
20048160:	80002c70                                p,..

20048164 <fifo_12>:
20048164:	00000200 80002c74 00000001 80003074     ....t,......t0..
20048174:	80003078                                x0..

20048178 <fifo_13>:
20048178:	00000200 8000307c 00000001 8000347c     ....|0......|4..
20048188:	80003480                                .4..

2004818c <fifo_14>:
2004818c:	00000200 80003484 00000001 80003884     .....4.......8..
2004819c:	80003888                                .8..

200481a0 <fifo_15>:
200481a0:	00000200 8000388c 00000001 80003c8c     .....8.......<..
200481b0:	80003c90                                .<..

200481b4 <fifo_16>:
200481b4:	00000200 80003c94 00000001 80004094     .....<.......@..
200481c4:	80004098                                .@..

200481c8 <fifo_17>:
200481c8:	00000200 8000409c 00000001 8000449c     .....@.......D..
200481d8:	800044a0                                .D..

200481dc <fifo_18>:
200481dc:	00000200 800044a4 00000001 800048a4     .....D.......H..
200481ec:	800048a8                                .H..

200481f0 <fifo_19>:
200481f0:	00000200 800048ac 00000001 80004cac     .....H.......L..
20048200:	80004cb0                                .L..

20048204 <fifo_20>:
20048204:	00000200 80004cb4 00000001 800050b4     .....L.......P..
20048214:	800050b8                                .P..

20048218 <fifo_21>:
20048218:	00000200 800050bc 00000001 800054bc     .....P.......T..
20048228:	800054c0                                .T..

2004822c <fifo_22>:
2004822c:	00000200 800054c4 00000001 800058c4     .....T.......X..
2004823c:	800058c8                                .X..

20048240 <fifo_23>:
20048240:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20048250:	80005cd0                                .\..

20048254 <fifo_24>:
20048254:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20048264:	80005ed8                                .^..

20048268 <fifo_25>:
20048268:	00000200 80005edc 00000001 800066dc     .....^.......f..
20048278:	800066e0                                .f..

2004827c <fifo_26>:
2004827c:	00000200 800066e4 00000001 800068e4     .....f.......h..
2004828c:	800068e8                                .h..

20048290 <fifo_27>:
20048290:	00000200 800068ec 00000001 80006aec     .....h.......j..
200482a0:	80006af0                                .j..

200482a4 <fifo_28>:
200482a4:	00000200 80006af4 00000001 80006ef4     .....j.......n..
200482b4:	80006ef8                                .n..

200482b8 <fifo_29>:
200482b8:	00000200 80006efc 00000002 800072fc     .....n.......r..
200482c8:	80007304                                .s..

200482cc <fifo_30>:
200482cc:	00000200 80007308 00000001 80007708     .....s.......w..
200482dc:	8000770c                                .w..

200482e0 <fifo_31>:
200482e0:	00000200 80007710 00000001 80007910     .....w.......y..
200482f0:	80007914                                .y..

200482f4 <source_O>:
200482f4:	20048074                                t.. 

200482f8 <decoder_parser_parseheaders_BYTE>:
200482f8:	20048074                                t.. 

200482fc <decoder_merger_YUV>:
200482fc:	20048088                                ... 

20048300 <display_B>:
20048300:	20048088                                ... 

20048304 <decoder_parser_parseheaders_QP>:
20048304:	2004809c                                ... 

20048308 <decoder_texture_DCReconstruction_invpred_QP>:
20048308:	2004809c                                ... 

2004830c <decoder_parser_parseheaders_HEIGHT>:
2004830c:	200480b0                                ... 

20048310 <display_HEIGHT>:
20048310:	200480b0                                ... 

20048314 <decoder_parser_parseheaders_RUN>:
20048314:	200480c4                                ... 

20048318 <decoder_parser_blkexp_RUN>:
20048318:	200480c4                                ... 

2004831c <decoder_parser_parseheaders_MV>:
2004831c:	200480d8                                ... 

20048320 <decoder_parser_mvrecon_MVIN>:
20048320:	200480d8                                ... 

20048324 <decoder_parser_parseheaders_WIDTH>:
20048324:	200480ec                                ... 

20048328 <display_WIDTH>:
20048328:	200480ec                                ... 

2004832c <decoder_parser_parseheaders_LAST>:
2004832c:	20048100                                ... 

20048330 <decoder_parser_blkexp_LAST>:
20048330:	20048100                                ... 

20048334 <decoder_parser_parseheaders_BTYPE>:
20048334:	20048114                                ... 

20048338 <decoder_parser_mvseq_BTYPE>:
20048338:	20048114                                ... 

2004833c <decoder_parser_mvrecon_BTYPE>:
2004833c:	20048114                                ... 

20048340 <decoder_texture_DCReconstruction_addressing_BTYPE>:
20048340:	20048114                                ... 

20048344 <decoder_texture_DCReconstruction_invpred_BTYPE>:
20048344:	20048114                                ... 

20048348 <decoder_motion_add_BTYPE>:
20048348:	20048114                                ... 

2004834c <decoder_motion_framebuf_BTYPE>:
2004834c:	20048114                                ... 

20048350 <decoder_parser_parseheaders_VALUE>:
20048350:	20048128                                (.. 

20048354 <decoder_parser_blkexp_VALUE>:
20048354:	20048128                                (.. 

20048358 <decoder_parser_mvseq_A>:
20048358:	2004813c                                <.. 

2004835c <decoder_parser_mvrecon_A>:
2004835c:	2004813c                                <.. 

20048360 <decoder_parser_blkexp_QFS>:
20048360:	20048150                                P.. 

20048364 <decoder_texture_DCsplit_IN>:
20048364:	20048150                                P.. 

20048368 <decoder_parser_mvrecon_MV>:
20048368:	20048164                                d.. 

2004836c <decoder_motion_framebuf_MV>:
2004836c:	20048164                                d.. 

20048370 <decoder_texture_DCsplit_AC>:
20048370:	20048178                                x.. 

20048374 <decoder_texture_IS_QFS_AC>:
20048374:	20048178                                x.. 

20048378 <decoder_texture_DCsplit_DC>:
20048378:	2004818c                                ... 

2004837c <decoder_texture_DCReconstruction_invpred_QFS_DC>:
2004837c:	2004818c                                ... 

20048380 <decoder_texture_IS_PQF_AC>:
20048380:	200481a0                                ... 

20048384 <decoder_texture_IAP_PQF_AC>:
20048384:	200481a0                                ... 

20048388 <decoder_texture_IAP_QF_AC>:
20048388:	200481b4                                ... 

2004838c <decoder_texture_IQ_AC>:
2004838c:	200481b4                                ... 

20048390 <decoder_texture_IQ_OUT>:
20048390:	200481c8                                ... 

20048394 <decoder_texture_idct2d_IN>:
20048394:	200481c8                                ... 

20048398 <decoder_texture_idct2d_OUT>:
20048398:	200481dc                                ... 

2004839c <decoder_motion_add_TEX>:
2004839c:	200481dc                                ... 

200483a0 <decoder_texture_DCReconstruction_addressing_B>:
200483a0:	200481f0                                ... 

200483a4 <decoder_texture_DCReconstruction_invpred_B>:
200483a4:	200481f0                                ... 

200483a8 <decoder_texture_DCReconstruction_addressing_A>:
200483a8:	20048204                                ... 

200483ac <decoder_texture_DCReconstruction_invpred_A>:
200483ac:	20048204                                ... 

200483b0 <decoder_texture_DCReconstruction_addressing_C>:
200483b0:	20048218                                ... 

200483b4 <decoder_texture_DCReconstruction_invpred_C>:
200483b4:	20048218                                ... 

200483b8 <decoder_texture_DCReconstruction_invpred_PTR>:
200483b8:	2004822c                                ,.. 

200483bc <decoder_texture_IAP_PTR>:
200483bc:	2004822c                                ,.. 

200483c0 <decoder_texture_DCReconstruction_invpred_QF_DC>:
200483c0:	20048240                                @.. 

200483c4 <decoder_texture_IQ_DC>:
200483c4:	20048240                                @.. 

200483c8 <decoder_texture_DCReconstruction_invpred_MODE>:
200483c8:	20048254                                T.. 

200483cc <decoder_texture_IS_AC_PRED_DIR>:
200483cc:	20048254                                T.. 

200483d0 <decoder_texture_DCReconstruction_invpred_SIGNED>:
200483d0:	20048268                                h.. 

200483d4 <decoder_texture_idct2d_SIGNED>:
200483d4:	20048268                                h.. 

200483d8 <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>:
200483d8:	2004827c                                |.. 

200483dc <decoder_texture_IAP_AC_PRED_DIR>:
200483dc:	2004827c                                |.. 

200483e0 <decoder_texture_DCReconstruction_invpred_QUANT>:
200483e0:	20048290                                ... 

200483e4 <decoder_texture_IQ_QP>:
200483e4:	20048290                                ... 

200483e8 <decoder_motion_interpolation_MOT>:
200483e8:	200482a4                                ... 

200483ec <decoder_motion_add_MOT>:
200483ec:	200482a4                                ... 

200483f0 <decoder_motion_add_VID>:
200483f0:	200482b8                                ... 

200483f4 <decoder_motion_framebuf_WD>:
200483f4:	200482b8                                ... 

200483f8 <decoder_merger_YUV_i>:
200483f8:	200482b8                                ... 

200483fc <decoder_motion_framebuf_RD>:
200483fc:	200482cc                                ... 

20048400 <decoder_motion_interpolation_RD>:
20048400:	200482cc                                ... 

20048404 <decoder_motion_framebuf_halfpel>:
20048404:	200482e0                                ... 

20048408 <decoder_motion_interpolation_halfpel>:
20048408:	200482e0                                ... 

2004840c <needInit>:
2004840c:	00000001                                ....

20048410 <stateNames>:
20048410:	20045498 200454a0 200454a8              .T. .T. .T. 

2004841c <fifo_0>:
2004841c:	00000200 80000000 00000001 80000200     ................
2004842c:	80000204                                ....

20048430 <fifo_1>:
20048430:	00000200 80000208 00000001 80000408     ................
20048440:	8000040c                                ....

20048444 <fifo_2>:
20048444:	00000200 80000410 00000001 80000610     ................
20048454:	80000614                                ....

20048458 <fifo_3>:
20048458:	00000200 80000618 00000001 80000a18     ................
20048468:	80000a1c                                ....

2004846c <fifo_4>:
2004846c:	00000200 80000a20 00000001 80000c20     .... ....... ...
2004847c:	80000c24                                $...

20048480 <fifo_5>:
20048480:	00000200 80000c28 00000001 80001028     ....(.......(...
20048490:	8000102c                                ,...

20048494 <fifo_6>:
20048494:	00000200 80001030 00000001 80001430     ....0.......0...
200484a4:	80001434                                4...

200484a8 <fifo_7>:
200484a8:	00000200 80001438 00000001 80001c38     ....8.......8...
200484b8:	80001c3c                                <...

200484bc <fifo_8>:
200484bc:	00000200 80001c40 00000006 80002040     ....@.......@ ..
200484cc:	80002058                                X ..

200484d0 <fifo_9>:
200484d0:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
200484e0:	80002460                                `$..

200484e4 <fifo_10>:
200484e4:	00000200 80002464 00000001 80002864     ....d$......d(..
200484f4:	80002868                                h(..

200484f8 <fifo_11>:
200484f8:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
20048508:	80002c70                                p,..

2004850c <fifo_12>:
2004850c:	00000200 80002c74 00000001 80003074     ....t,......t0..
2004851c:	80003078                                x0..

20048520 <fifo_13>:
20048520:	00000200 8000307c 00000001 8000347c     ....|0......|4..
20048530:	80003480                                .4..

20048534 <fifo_14>:
20048534:	00000200 80003484 00000001 80003884     .....4.......8..
20048544:	80003888                                .8..

20048548 <fifo_15>:
20048548:	00000200 8000388c 00000001 80003c8c     .....8.......<..
20048558:	80003c90                                .<..

2004855c <fifo_16>:
2004855c:	00000200 80003c94 00000001 80004094     .....<.......@..
2004856c:	80004098                                .@..

20048570 <fifo_17>:
20048570:	00000200 8000409c 00000001 8000449c     .....@.......D..
20048580:	800044a0                                .D..

20048584 <fifo_18>:
20048584:	00000200 800044a4 00000001 800048a4     .....D.......H..
20048594:	800048a8                                .H..

20048598 <fifo_19>:
20048598:	00000200 800048ac 00000001 80004cac     .....H.......L..
200485a8:	80004cb0                                .L..

200485ac <fifo_20>:
200485ac:	00000200 80004cb4 00000001 800050b4     .....L.......P..
200485bc:	800050b8                                .P..

200485c0 <fifo_21>:
200485c0:	00000200 800050bc 00000001 800054bc     .....P.......T..
200485d0:	800054c0                                .T..

200485d4 <fifo_22>:
200485d4:	00000200 800054c4 00000001 800058c4     .....T.......X..
200485e4:	800058c8                                .X..

200485e8 <fifo_23>:
200485e8:	00000200 800058cc 00000001 80005ccc     .....X.......\..
200485f8:	80005cd0                                .\..

200485fc <fifo_24>:
200485fc:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
2004860c:	80005ed8                                .^..

20048610 <fifo_25>:
20048610:	00000200 80005edc 00000001 800066dc     .....^.......f..
20048620:	800066e0                                .f..

20048624 <fifo_26>:
20048624:	00000200 800066e4 00000001 800068e4     .....f.......h..
20048634:	800068e8                                .h..

20048638 <fifo_27>:
20048638:	00000200 800068ec 00000001 80006aec     .....h.......j..
20048648:	80006af0                                .j..

2004864c <fifo_28>:
2004864c:	00000200 80006af4 00000001 80006ef4     .....j.......n..
2004865c:	80006ef8                                .n..

20048660 <fifo_29>:
20048660:	00000200 80006efc 00000002 800072fc     .....n.......r..
20048670:	80007304                                .s..

20048674 <fifo_30>:
20048674:	00000200 80007308 00000001 80007708     .....s.......w..
20048684:	8000770c                                .w..

20048688 <fifo_31>:
20048688:	00000200 80007710 00000001 80007910     .....w.......y..
20048698:	80007914                                .y..

2004869c <source_O>:
2004869c:	2004841c                                ... 

200486a0 <decoder_parser_parseheaders_BYTE>:
200486a0:	2004841c                                ... 

200486a4 <decoder_merger_YUV>:
200486a4:	20048430                                0.. 

200486a8 <display_B>:
200486a8:	20048430                                0.. 

200486ac <decoder_parser_parseheaders_QP>:
200486ac:	20048444                                D.. 

200486b0 <decoder_texture_DCReconstruction_invpred_QP>:
200486b0:	20048444                                D.. 

200486b4 <decoder_parser_parseheaders_HEIGHT>:
200486b4:	20048458                                X.. 

200486b8 <display_HEIGHT>:
200486b8:	20048458                                X.. 

200486bc <decoder_parser_parseheaders_RUN>:
200486bc:	2004846c                                l.. 

200486c0 <decoder_parser_blkexp_RUN>:
200486c0:	2004846c                                l.. 

200486c4 <decoder_parser_parseheaders_MV>:
200486c4:	20048480                                ... 

200486c8 <decoder_parser_mvrecon_MVIN>:
200486c8:	20048480                                ... 

200486cc <decoder_parser_parseheaders_WIDTH>:
200486cc:	20048494                                ... 

200486d0 <display_WIDTH>:
200486d0:	20048494                                ... 

200486d4 <decoder_parser_parseheaders_LAST>:
200486d4:	200484a8                                ... 

200486d8 <decoder_parser_blkexp_LAST>:
200486d8:	200484a8                                ... 

200486dc <decoder_parser_parseheaders_BTYPE>:
200486dc:	200484bc                                ... 

200486e0 <decoder_parser_mvseq_BTYPE>:
200486e0:	200484bc                                ... 

200486e4 <decoder_parser_mvrecon_BTYPE>:
200486e4:	200484bc                                ... 

200486e8 <decoder_texture_DCReconstruction_addressing_BTYPE>:
200486e8:	200484bc                                ... 

200486ec <decoder_texture_DCReconstruction_invpred_BTYPE>:
200486ec:	200484bc                                ... 

200486f0 <decoder_motion_add_BTYPE>:
200486f0:	200484bc                                ... 

200486f4 <decoder_motion_framebuf_BTYPE>:
200486f4:	200484bc                                ... 

200486f8 <decoder_parser_parseheaders_VALUE>:
200486f8:	200484d0                                ... 

200486fc <decoder_parser_blkexp_VALUE>:
200486fc:	200484d0                                ... 

20048700 <decoder_parser_mvseq_A>:
20048700:	200484e4                                ... 

20048704 <decoder_parser_mvrecon_A>:
20048704:	200484e4                                ... 

20048708 <decoder_parser_blkexp_QFS>:
20048708:	200484f8                                ... 

2004870c <decoder_texture_DCsplit_IN>:
2004870c:	200484f8                                ... 

20048710 <decoder_parser_mvrecon_MV>:
20048710:	2004850c                                ... 

20048714 <decoder_motion_framebuf_MV>:
20048714:	2004850c                                ... 

20048718 <decoder_texture_DCsplit_AC>:
20048718:	20048520                                 .. 

2004871c <decoder_texture_IS_QFS_AC>:
2004871c:	20048520                                 .. 

20048720 <decoder_texture_DCsplit_DC>:
20048720:	20048534                                4.. 

20048724 <decoder_texture_DCReconstruction_invpred_QFS_DC>:
20048724:	20048534                                4.. 

20048728 <decoder_texture_IS_PQF_AC>:
20048728:	20048548                                H.. 

2004872c <decoder_texture_IAP_PQF_AC>:
2004872c:	20048548                                H.. 

20048730 <decoder_texture_IAP_QF_AC>:
20048730:	2004855c                                \.. 

20048734 <decoder_texture_IQ_AC>:
20048734:	2004855c                                \.. 

20048738 <decoder_texture_IQ_OUT>:
20048738:	20048570                                p.. 

2004873c <decoder_texture_idct2d_IN>:
2004873c:	20048570                                p.. 

20048740 <decoder_texture_idct2d_OUT>:
20048740:	20048584                                ... 

20048744 <decoder_motion_add_TEX>:
20048744:	20048584                                ... 

20048748 <decoder_texture_DCReconstruction_addressing_B>:
20048748:	20048598                                ... 

2004874c <decoder_texture_DCReconstruction_invpred_B>:
2004874c:	20048598                                ... 

20048750 <decoder_texture_DCReconstruction_addressing_A>:
20048750:	200485ac                                ... 

20048754 <decoder_texture_DCReconstruction_invpred_A>:
20048754:	200485ac                                ... 

20048758 <decoder_texture_DCReconstruction_addressing_C>:
20048758:	200485c0                                ... 

2004875c <decoder_texture_DCReconstruction_invpred_C>:
2004875c:	200485c0                                ... 

20048760 <decoder_texture_DCReconstruction_invpred_PTR>:
20048760:	200485d4                                ... 

20048764 <decoder_texture_IAP_PTR>:
20048764:	200485d4                                ... 

20048768 <decoder_texture_DCReconstruction_invpred_QF_DC>:
20048768:	200485e8                                ... 

2004876c <decoder_texture_IQ_DC>:
2004876c:	200485e8                                ... 

20048770 <decoder_texture_DCReconstruction_invpred_MODE>:
20048770:	200485fc                                ... 

20048774 <decoder_texture_IS_AC_PRED_DIR>:
20048774:	200485fc                                ... 

20048778 <decoder_texture_DCReconstruction_invpred_SIGNED>:
20048778:	20048610                                ... 

2004877c <decoder_texture_idct2d_SIGNED>:
2004877c:	20048610                                ... 

20048780 <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>:
20048780:	20048624                                $.. 

20048784 <decoder_texture_IAP_AC_PRED_DIR>:
20048784:	20048624                                $.. 

20048788 <decoder_texture_DCReconstruction_invpred_QUANT>:
20048788:	20048638                                8.. 

2004878c <decoder_texture_IQ_QP>:
2004878c:	20048638                                8.. 

20048790 <decoder_motion_interpolation_MOT>:
20048790:	2004864c                                L.. 

20048794 <decoder_motion_add_MOT>:
20048794:	2004864c                                L.. 

20048798 <decoder_motion_add_VID>:
20048798:	20048660                                `.. 

2004879c <decoder_motion_framebuf_WD>:
2004879c:	20048660                                `.. 

200487a0 <decoder_merger_YUV_i>:
200487a0:	20048660                                `.. 

200487a4 <decoder_motion_framebuf_RD>:
200487a4:	20048674                                t.. 

200487a8 <decoder_motion_interpolation_RD>:
200487a8:	20048674                                t.. 

200487ac <decoder_motion_framebuf_halfpel>:
200487ac:	20048688                                ... 

200487b0 <decoder_motion_interpolation_halfpel>:
200487b0:	20048688                                ... 

200487b4 <needInit>:
200487b4:	00000001                                ....

200487b8 <stateNames>:
200487b8:	200454b0 200454b4                       .T. .T. 

200487c0 <fifo_0>:
200487c0:	00000200 80000000 00000001 80000200     ................
200487d0:	80000204                                ....

200487d4 <fifo_1>:
200487d4:	00000200 80000208 00000001 80000408     ................
200487e4:	8000040c                                ....

200487e8 <fifo_2>:
200487e8:	00000200 80000410 00000001 80000610     ................
200487f8:	80000614                                ....

200487fc <fifo_3>:
200487fc:	00000200 80000618 00000001 80000a18     ................
2004880c:	80000a1c                                ....

20048810 <fifo_4>:
20048810:	00000200 80000a20 00000001 80000c20     .... ....... ...
20048820:	80000c24                                $...

20048824 <fifo_5>:
20048824:	00000200 80000c28 00000001 80001028     ....(.......(...
20048834:	8000102c                                ,...

20048838 <fifo_6>:
20048838:	00000200 80001030 00000001 80001430     ....0.......0...
20048848:	80001434                                4...

2004884c <fifo_7>:
2004884c:	00000200 80001438 00000001 80001c38     ....8.......8...
2004885c:	80001c3c                                <...

20048860 <fifo_8>:
20048860:	00000200 80001c40 00000006 80002040     ....@.......@ ..
20048870:	80002058                                X ..

20048874 <fifo_9>:
20048874:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
20048884:	80002460                                `$..

20048888 <fifo_10>:
20048888:	00000200 80002464 00000001 80002864     ....d$......d(..
20048898:	80002868                                h(..

2004889c <fifo_11>:
2004889c:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
200488ac:	80002c70                                p,..

200488b0 <fifo_12>:
200488b0:	00000200 80002c74 00000001 80003074     ....t,......t0..
200488c0:	80003078                                x0..

200488c4 <fifo_13>:
200488c4:	00000200 8000307c 00000001 8000347c     ....|0......|4..
200488d4:	80003480                                .4..

200488d8 <fifo_14>:
200488d8:	00000200 80003484 00000001 80003884     .....4.......8..
200488e8:	80003888                                .8..

200488ec <fifo_15>:
200488ec:	00000200 8000388c 00000001 80003c8c     .....8.......<..
200488fc:	80003c90                                .<..

20048900 <fifo_16>:
20048900:	00000200 80003c94 00000001 80004094     .....<.......@..
20048910:	80004098                                .@..

20048914 <fifo_17>:
20048914:	00000200 8000409c 00000001 8000449c     .....@.......D..
20048924:	800044a0                                .D..

20048928 <fifo_18>:
20048928:	00000200 800044a4 00000001 800048a4     .....D.......H..
20048938:	800048a8                                .H..

2004893c <fifo_19>:
2004893c:	00000200 800048ac 00000001 80004cac     .....H.......L..
2004894c:	80004cb0                                .L..

20048950 <fifo_20>:
20048950:	00000200 80004cb4 00000001 800050b4     .....L.......P..
20048960:	800050b8                                .P..

20048964 <fifo_21>:
20048964:	00000200 800050bc 00000001 800054bc     .....P.......T..
20048974:	800054c0                                .T..

20048978 <fifo_22>:
20048978:	00000200 800054c4 00000001 800058c4     .....T.......X..
20048988:	800058c8                                .X..

2004898c <fifo_23>:
2004898c:	00000200 800058cc 00000001 80005ccc     .....X.......\..
2004899c:	80005cd0                                .\..

200489a0 <fifo_24>:
200489a0:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
200489b0:	80005ed8                                .^..

200489b4 <fifo_25>:
200489b4:	00000200 80005edc 00000001 800066dc     .....^.......f..
200489c4:	800066e0                                .f..

200489c8 <fifo_26>:
200489c8:	00000200 800066e4 00000001 800068e4     .....f.......h..
200489d8:	800068e8                                .h..

200489dc <fifo_27>:
200489dc:	00000200 800068ec 00000001 80006aec     .....h.......j..
200489ec:	80006af0                                .j..

200489f0 <fifo_28>:
200489f0:	00000200 80006af4 00000001 80006ef4     .....j.......n..
20048a00:	80006ef8                                .n..

20048a04 <fifo_29>:
20048a04:	00000200 80006efc 00000002 800072fc     .....n.......r..
20048a14:	80007304                                .s..

20048a18 <fifo_30>:
20048a18:	00000200 80007308 00000001 80007708     .....s.......w..
20048a28:	8000770c                                .w..

20048a2c <fifo_31>:
20048a2c:	00000200 80007710 00000001 80007910     .....w.......y..
20048a3c:	80007914                                .y..

20048a40 <source_O>:
20048a40:	200487c0                                ... 

20048a44 <decoder_parser_parseheaders_BYTE>:
20048a44:	200487c0                                ... 

20048a48 <decoder_merger_YUV>:
20048a48:	200487d4                                ... 

20048a4c <display_B>:
20048a4c:	200487d4                                ... 

20048a50 <decoder_parser_parseheaders_QP>:
20048a50:	200487e8                                ... 

20048a54 <decoder_texture_DCReconstruction_invpred_QP>:
20048a54:	200487e8                                ... 

20048a58 <decoder_parser_parseheaders_HEIGHT>:
20048a58:	200487fc                                ... 

20048a5c <display_HEIGHT>:
20048a5c:	200487fc                                ... 

20048a60 <decoder_parser_parseheaders_RUN>:
20048a60:	20048810                                ... 

20048a64 <decoder_parser_blkexp_RUN>:
20048a64:	20048810                                ... 

20048a68 <decoder_parser_parseheaders_MV>:
20048a68:	20048824                                $.. 

20048a6c <decoder_parser_mvrecon_MVIN>:
20048a6c:	20048824                                $.. 

20048a70 <decoder_parser_parseheaders_WIDTH>:
20048a70:	20048838                                8.. 

20048a74 <display_WIDTH>:
20048a74:	20048838                                8.. 

20048a78 <decoder_parser_parseheaders_LAST>:
20048a78:	2004884c                                L.. 

20048a7c <decoder_parser_blkexp_LAST>:
20048a7c:	2004884c                                L.. 

20048a80 <decoder_parser_parseheaders_BTYPE>:
20048a80:	20048860                                `.. 

20048a84 <decoder_parser_mvseq_BTYPE>:
20048a84:	20048860                                `.. 

20048a88 <decoder_parser_mvrecon_BTYPE>:
20048a88:	20048860                                `.. 

20048a8c <decoder_texture_DCReconstruction_addressing_BTYPE>:
20048a8c:	20048860                                `.. 

20048a90 <decoder_texture_DCReconstruction_invpred_BTYPE>:
20048a90:	20048860                                `.. 

20048a94 <decoder_motion_add_BTYPE>:
20048a94:	20048860                                `.. 

20048a98 <decoder_motion_framebuf_BTYPE>:
20048a98:	20048860                                `.. 

20048a9c <decoder_parser_parseheaders_VALUE>:
20048a9c:	20048874                                t.. 

20048aa0 <decoder_parser_blkexp_VALUE>:
20048aa0:	20048874                                t.. 

20048aa4 <decoder_parser_mvseq_A>:
20048aa4:	20048888                                ... 

20048aa8 <decoder_parser_mvrecon_A>:
20048aa8:	20048888                                ... 

20048aac <decoder_parser_blkexp_QFS>:
20048aac:	2004889c                                ... 

20048ab0 <decoder_texture_DCsplit_IN>:
20048ab0:	2004889c                                ... 

20048ab4 <decoder_parser_mvrecon_MV>:
20048ab4:	200488b0                                ... 

20048ab8 <decoder_motion_framebuf_MV>:
20048ab8:	200488b0                                ... 

20048abc <decoder_texture_DCsplit_AC>:
20048abc:	200488c4                                ... 

20048ac0 <decoder_texture_IS_QFS_AC>:
20048ac0:	200488c4                                ... 

20048ac4 <decoder_texture_DCsplit_DC>:
20048ac4:	200488d8                                ... 

20048ac8 <decoder_texture_DCReconstruction_invpred_QFS_DC>:
20048ac8:	200488d8                                ... 

20048acc <decoder_texture_IS_PQF_AC>:
20048acc:	200488ec                                ... 

20048ad0 <decoder_texture_IAP_PQF_AC>:
20048ad0:	200488ec                                ... 

20048ad4 <decoder_texture_IAP_QF_AC>:
20048ad4:	20048900                                ... 

20048ad8 <decoder_texture_IQ_AC>:
20048ad8:	20048900                                ... 

20048adc <decoder_texture_IQ_OUT>:
20048adc:	20048914                                ... 

20048ae0 <decoder_texture_idct2d_IN>:
20048ae0:	20048914                                ... 

20048ae4 <decoder_texture_idct2d_OUT>:
20048ae4:	20048928                                (.. 

20048ae8 <decoder_motion_add_TEX>:
20048ae8:	20048928                                (.. 

20048aec <decoder_texture_DCReconstruction_addressing_B>:
20048aec:	2004893c                                <.. 

20048af0 <decoder_texture_DCReconstruction_invpred_B>:
20048af0:	2004893c                                <.. 

20048af4 <decoder_texture_DCReconstruction_addressing_A>:
20048af4:	20048950                                P.. 

20048af8 <decoder_texture_DCReconstruction_invpred_A>:
20048af8:	20048950                                P.. 

20048afc <decoder_texture_DCReconstruction_addressing_C>:
20048afc:	20048964                                d.. 

20048b00 <decoder_texture_DCReconstruction_invpred_C>:
20048b00:	20048964                                d.. 

20048b04 <decoder_texture_DCReconstruction_invpred_PTR>:
20048b04:	20048978                                x.. 

20048b08 <decoder_texture_IAP_PTR>:
20048b08:	20048978                                x.. 

20048b0c <decoder_texture_DCReconstruction_invpred_QF_DC>:
20048b0c:	2004898c                                ... 

20048b10 <decoder_texture_IQ_DC>:
20048b10:	2004898c                                ... 

20048b14 <decoder_texture_DCReconstruction_invpred_MODE>:
20048b14:	200489a0                                ... 

20048b18 <decoder_texture_IS_AC_PRED_DIR>:
20048b18:	200489a0                                ... 

20048b1c <decoder_texture_DCReconstruction_invpred_SIGNED>:
20048b1c:	200489b4                                ... 

20048b20 <decoder_texture_idct2d_SIGNED>:
20048b20:	200489b4                                ... 

20048b24 <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>:
20048b24:	200489c8                                ... 

20048b28 <decoder_texture_IAP_AC_PRED_DIR>:
20048b28:	200489c8                                ... 

20048b2c <decoder_texture_DCReconstruction_invpred_QUANT>:
20048b2c:	200489dc                                ... 

20048b30 <decoder_texture_IQ_QP>:
20048b30:	200489dc                                ... 

20048b34 <decoder_motion_interpolation_MOT>:
20048b34:	200489f0                                ... 

20048b38 <decoder_motion_add_MOT>:
20048b38:	200489f0                                ... 

20048b3c <decoder_motion_add_VID>:
20048b3c:	20048a04                                ... 

20048b40 <decoder_motion_framebuf_WD>:
20048b40:	20048a04                                ... 

20048b44 <decoder_merger_YUV_i>:
20048b44:	20048a04                                ... 

20048b48 <decoder_motion_framebuf_RD>:
20048b48:	20048a18                                ... 

20048b4c <decoder_motion_interpolation_RD>:
20048b4c:	20048a18                                ... 

20048b50 <decoder_motion_framebuf_halfpel>:
20048b50:	20048a2c                                ,.. 

20048b54 <decoder_motion_interpolation_halfpel>:
20048b54:	20048a2c                                ,.. 

20048b58 <needInit>:
20048b58:	00000001                                ....

20048b5c <fifo_0>:
20048b5c:	00000200 80000000 00000001 80000200     ................
20048b6c:	80000204                                ....

20048b70 <fifo_1>:
20048b70:	00000200 80000208 00000001 80000408     ................
20048b80:	8000040c                                ....

20048b84 <fifo_2>:
20048b84:	00000200 80000410 00000001 80000610     ................
20048b94:	80000614                                ....

20048b98 <fifo_3>:
20048b98:	00000200 80000618 00000001 80000a18     ................
20048ba8:	80000a1c                                ....

20048bac <fifo_4>:
20048bac:	00000200 80000a20 00000001 80000c20     .... ....... ...
20048bbc:	80000c24                                $...

20048bc0 <fifo_5>:
20048bc0:	00000200 80000c28 00000001 80001028     ....(.......(...
20048bd0:	8000102c                                ,...

20048bd4 <fifo_6>:
20048bd4:	00000200 80001030 00000001 80001430     ....0.......0...
20048be4:	80001434                                4...

20048be8 <fifo_7>:
20048be8:	00000200 80001438 00000001 80001c38     ....8.......8...
20048bf8:	80001c3c                                <...

20048bfc <fifo_8>:
20048bfc:	00000200 80001c40 00000006 80002040     ....@.......@ ..
20048c0c:	80002058                                X ..

20048c10 <fifo_9>:
20048c10:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
20048c20:	80002460                                `$..

20048c24 <fifo_10>:
20048c24:	00000200 80002464 00000001 80002864     ....d$......d(..
20048c34:	80002868                                h(..

20048c38 <fifo_11>:
20048c38:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
20048c48:	80002c70                                p,..

20048c4c <fifo_12>:
20048c4c:	00000200 80002c74 00000001 80003074     ....t,......t0..
20048c5c:	80003078                                x0..

20048c60 <fifo_13>:
20048c60:	00000200 8000307c 00000001 8000347c     ....|0......|4..
20048c70:	80003480                                .4..

20048c74 <fifo_14>:
20048c74:	00000200 80003484 00000001 80003884     .....4.......8..
20048c84:	80003888                                .8..

20048c88 <fifo_15>:
20048c88:	00000200 8000388c 00000001 80003c8c     .....8.......<..
20048c98:	80003c90                                .<..

20048c9c <fifo_16>:
20048c9c:	00000200 80003c94 00000001 80004094     .....<.......@..
20048cac:	80004098                                .@..

20048cb0 <fifo_17>:
20048cb0:	00000200 8000409c 00000001 8000449c     .....@.......D..
20048cc0:	800044a0                                .D..

20048cc4 <fifo_18>:
20048cc4:	00000200 800044a4 00000001 800048a4     .....D.......H..
20048cd4:	800048a8                                .H..

20048cd8 <fifo_19>:
20048cd8:	00000200 800048ac 00000001 80004cac     .....H.......L..
20048ce8:	80004cb0                                .L..

20048cec <fifo_20>:
20048cec:	00000200 80004cb4 00000001 800050b4     .....L.......P..
20048cfc:	800050b8                                .P..

20048d00 <fifo_21>:
20048d00:	00000200 800050bc 00000001 800054bc     .....P.......T..
20048d10:	800054c0                                .T..

20048d14 <fifo_22>:
20048d14:	00000200 800054c4 00000001 800058c4     .....T.......X..
20048d24:	800058c8                                .X..

20048d28 <fifo_23>:
20048d28:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20048d38:	80005cd0                                .\..

20048d3c <fifo_24>:
20048d3c:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20048d4c:	80005ed8                                .^..

20048d50 <fifo_25>:
20048d50:	00000200 80005edc 00000001 800066dc     .....^.......f..
20048d60:	800066e0                                .f..

20048d64 <fifo_26>:
20048d64:	00000200 800066e4 00000001 800068e4     .....f.......h..
20048d74:	800068e8                                .h..

20048d78 <fifo_27>:
20048d78:	00000200 800068ec 00000001 80006aec     .....h.......j..
20048d88:	80006af0                                .j..

20048d8c <fifo_28>:
20048d8c:	00000200 80006af4 00000001 80006ef4     .....j.......n..
20048d9c:	80006ef8                                .n..

20048da0 <fifo_29>:
20048da0:	00000200 80006efc 00000002 800072fc     .....n.......r..
20048db0:	80007304                                .s..

20048db4 <fifo_30>:
20048db4:	00000200 80007308 00000001 80007708     .....s.......w..
20048dc4:	8000770c                                .w..

20048dc8 <fifo_31>:
20048dc8:	00000200 80007710 00000001 80007910     .....w.......y..
20048dd8:	80007914                                .y..

20048ddc <source_O>:
20048ddc:	20048b5c                                \.. 

20048de0 <decoder_parser_parseheaders_BYTE>:
20048de0:	20048b5c                                \.. 

20048de4 <decoder_merger_YUV>:
20048de4:	20048b70                                p.. 

20048de8 <display_B>:
20048de8:	20048b70                                p.. 

20048dec <decoder_parser_parseheaders_QP>:
20048dec:	20048b84                                ... 

20048df0 <decoder_texture_DCReconstruction_invpred_QP>:
20048df0:	20048b84                                ... 

20048df4 <decoder_parser_parseheaders_HEIGHT>:
20048df4:	20048b98                                ... 

20048df8 <display_HEIGHT>:
20048df8:	20048b98                                ... 

20048dfc <decoder_parser_parseheaders_RUN>:
20048dfc:	20048bac                                ... 

20048e00 <decoder_parser_blkexp_RUN>:
20048e00:	20048bac                                ... 

20048e04 <decoder_parser_parseheaders_MV>:
20048e04:	20048bc0                                ... 

20048e08 <decoder_parser_mvrecon_MVIN>:
20048e08:	20048bc0                                ... 

20048e0c <decoder_parser_parseheaders_WIDTH>:
20048e0c:	20048bd4                                ... 

20048e10 <display_WIDTH>:
20048e10:	20048bd4                                ... 

20048e14 <decoder_parser_parseheaders_LAST>:
20048e14:	20048be8                                ... 

20048e18 <decoder_parser_blkexp_LAST>:
20048e18:	20048be8                                ... 

20048e1c <decoder_parser_parseheaders_BTYPE>:
20048e1c:	20048bfc                                ... 

20048e20 <decoder_parser_mvseq_BTYPE>:
20048e20:	20048bfc                                ... 

20048e24 <decoder_parser_mvrecon_BTYPE>:
20048e24:	20048bfc                                ... 

20048e28 <decoder_texture_DCReconstruction_addressing_BTYPE>:
20048e28:	20048bfc                                ... 

20048e2c <decoder_texture_DCReconstruction_invpred_BTYPE>:
20048e2c:	20048bfc                                ... 

20048e30 <decoder_motion_add_BTYPE>:
20048e30:	20048bfc                                ... 

20048e34 <decoder_motion_framebuf_BTYPE>:
20048e34:	20048bfc                                ... 

20048e38 <decoder_parser_parseheaders_VALUE>:
20048e38:	20048c10                                ... 

20048e3c <decoder_parser_blkexp_VALUE>:
20048e3c:	20048c10                                ... 

20048e40 <decoder_parser_mvseq_A>:
20048e40:	20048c24                                $.. 

20048e44 <decoder_parser_mvrecon_A>:
20048e44:	20048c24                                $.. 

20048e48 <decoder_parser_blkexp_QFS>:
20048e48:	20048c38                                8.. 

20048e4c <decoder_texture_DCsplit_IN>:
20048e4c:	20048c38                                8.. 

20048e50 <decoder_parser_mvrecon_MV>:
20048e50:	20048c4c                                L.. 

20048e54 <decoder_motion_framebuf_MV>:
20048e54:	20048c4c                                L.. 

20048e58 <decoder_texture_DCsplit_AC>:
20048e58:	20048c60                                `.. 

20048e5c <decoder_texture_IS_QFS_AC>:
20048e5c:	20048c60                                `.. 

20048e60 <decoder_texture_DCsplit_DC>:
20048e60:	20048c74                                t.. 

20048e64 <decoder_texture_DCReconstruction_invpred_QFS_DC>:
20048e64:	20048c74                                t.. 

20048e68 <decoder_texture_IS_PQF_AC>:
20048e68:	20048c88                                ... 

20048e6c <decoder_texture_IAP_PQF_AC>:
20048e6c:	20048c88                                ... 

20048e70 <decoder_texture_IAP_QF_AC>:
20048e70:	20048c9c                                ... 

20048e74 <decoder_texture_IQ_AC>:
20048e74:	20048c9c                                ... 

20048e78 <decoder_texture_IQ_OUT>:
20048e78:	20048cb0                                ... 

20048e7c <decoder_texture_idct2d_IN>:
20048e7c:	20048cb0                                ... 

20048e80 <decoder_texture_idct2d_OUT>:
20048e80:	20048cc4                                ... 

20048e84 <decoder_motion_add_TEX>:
20048e84:	20048cc4                                ... 

20048e88 <decoder_texture_DCReconstruction_addressing_B>:
20048e88:	20048cd8                                ... 

20048e8c <decoder_texture_DCReconstruction_invpred_B>:
20048e8c:	20048cd8                                ... 

20048e90 <decoder_texture_DCReconstruction_addressing_A>:
20048e90:	20048cec                                ... 

20048e94 <decoder_texture_DCReconstruction_invpred_A>:
20048e94:	20048cec                                ... 

20048e98 <decoder_texture_DCReconstruction_addressing_C>:
20048e98:	20048d00                                ... 

20048e9c <decoder_texture_DCReconstruction_invpred_C>:
20048e9c:	20048d00                                ... 

20048ea0 <decoder_texture_DCReconstruction_invpred_PTR>:
20048ea0:	20048d14                                ... 

20048ea4 <decoder_texture_IAP_PTR>:
20048ea4:	20048d14                                ... 

20048ea8 <decoder_texture_DCReconstruction_invpred_QF_DC>:
20048ea8:	20048d28                                (.. 

20048eac <decoder_texture_IQ_DC>:
20048eac:	20048d28                                (.. 

20048eb0 <decoder_texture_DCReconstruction_invpred_MODE>:
20048eb0:	20048d3c                                <.. 

20048eb4 <decoder_texture_IS_AC_PRED_DIR>:
20048eb4:	20048d3c                                <.. 

20048eb8 <decoder_texture_DCReconstruction_invpred_SIGNED>:
20048eb8:	20048d50                                P.. 

20048ebc <decoder_texture_idct2d_SIGNED>:
20048ebc:	20048d50                                P.. 

20048ec0 <decoder_texture_DCReconstruction_invpred_AC_PRED_DIR>:
20048ec0:	20048d64                                d.. 

20048ec4 <decoder_texture_IAP_AC_PRED_DIR>:
20048ec4:	20048d64                                d.. 

20048ec8 <decoder_texture_DCReconstruction_invpred_QUANT>:
20048ec8:	20048d78                                x.. 

20048ecc <decoder_texture_IQ_QP>:
20048ecc:	20048d78                                x.. 

20048ed0 <decoder_motion_interpolation_MOT>:
20048ed0:	20048d8c                                ... 

20048ed4 <decoder_motion_add_MOT>:
20048ed4:	20048d8c                                ... 

20048ed8 <decoder_motion_add_VID>:
20048ed8:	20048da0                                ... 

20048edc <decoder_motion_framebuf_WD>:
20048edc:	20048da0                                ... 

20048ee0 <decoder_merger_YUV_i>:
20048ee0:	20048da0                                ... 

20048ee4 <decoder_motion_framebuf_RD>:
20048ee4:	20048db4                                ... 

20048ee8 <decoder_motion_interpolation_RD>:
20048ee8:	20048db4                                ... 

20048eec <decoder_motion_framebuf_halfpel>:
20048eec:	20048dc8                                ... 

20048ef0 <decoder_motion_interpolation_halfpel>:
20048ef0:	20048dc8                                ... 

20048ef4 <needInit>:
20048ef4:	00000001                                ....

20048ef8 <index_YUV_i>:
20048ef8:	00000000                                ....

20048efc <numTokens_YUV_i>:
20048efc:	00000000                                ....

20048f00 <index_YUV>:
20048f00:	00000000                                ....

20048f04 <numFree_YUV>:
20048f04:	00000000                                ....

20048f08 <_FSM_state>:
20048f08:	00000000                                ....

20048f0c <index_MOT>:
20048f0c:	00000000                                ....

20048f10 <numTokens_MOT>:
20048f10:	00000000                                ....

20048f14 <index_TEX>:
20048f14:	00000000                                ....

20048f18 <numTokens_TEX>:
20048f18:	00000000                                ....

20048f1c <index_BTYPE>:
20048f1c:	00000000                                ....

20048f20 <numTokens_BTYPE>:
20048f20:	00000000                                ....

20048f24 <index_VID>:
20048f24:	00000000                                ....

20048f28 <numFree_VID>:
20048f28:	00000000                                ....

20048f2c <_FSM_state>:
20048f2c:	00000000                                ....

20048f30 <index_MV>:
20048f30:	00000000                                ....

20048f34 <numTokens_MV>:
20048f34:	00000000                                ....

20048f38 <index_BTYPE>:
20048f38:	00000000                                ....

20048f3c <numTokens_BTYPE>:
20048f3c:	00000000                                ....

20048f40 <index_WD>:
20048f40:	00000000                                ....

20048f44 <numTokens_WD>:
20048f44:	00000000                                ....

20048f48 <index_halfpel>:
20048f48:	00000000                                ....

20048f4c <numFree_halfpel>:
20048f4c:	00000000                                ....

20048f50 <index_RD>:
20048f50:	00000000                                ....

20048f54 <numFree_RD>:
20048f54:	00000000                                ....

20048f58 <frameBuffer>:
	...

20059758 <frameBuffer_U>:
	...

2005d958 <frameBuffer_V>:
	...

20061b58 <vop_width>:
20061b58:	00000000                                ....

20061b5c <vop_height>:
20061b5c:	00000000                                ....

20061b60 <vop_width_in_samples>:
20061b60:	00000000                                ....

20061b64 <vop_height_in_samples>:
20061b64:	00000000                                ....

20061b68 <vop_rounding_mode>:
20061b68:	00000000                                ....

20061b6c <max_outstanding_writes>:
20061b6c:	00000000                                ....

20061b70 <vop_width_in_samples_U>:
20061b70:	00000000                                ....

20061b74 <vop_height_in_samples_U>:
20061b74:	00000000                                ....

20061b78 <mvx>:
	...

20061b7a <mvy>:
	...

20061b7c <mbx_read>:
20061b7c:	00000000                                ....

20061b80 <mby_read>:
20061b80:	00000000                                ....

20061b84 <outstanding_writes>:
20061b84:	00000000                                ....

20061b88 <mb_write_ptr>:
20061b88:	00000000                                ....

20061b8c <mbx_write>:
20061b8c:	00000000                                ....

20061b90 <mb_write_ptr_chroma>:
20061b90:	00000000                                ....

20061b94 <comp_so_far>:
20061b94:	00000000                                ....

20061b98 <_FSM_state>:
20061b98:	00000000                                ....

20061b9c <index_RD>:
20061b9c:	00000000                                ....

20061ba0 <numTokens_RD>:
20061ba0:	00000000                                ....

20061ba4 <index_halfpel>:
20061ba4:	00000000                                ....

20061ba8 <numTokens_halfpel>:
20061ba8:	00000000                                ....

20061bac <index_MOT>:
20061bac:	00000000                                ....

20061bb0 <numFree_MOT>:
20061bb0:	00000000                                ....

20061bb4 <index_RUN>:
20061bb4:	00000000                                ....

20061bb8 <numTokens_RUN>:
20061bb8:	00000000                                ....

20061bbc <index_VALUE>:
20061bbc:	00000000                                ....

20061bc0 <numTokens_VALUE>:
20061bc0:	00000000                                ....

20061bc4 <index_LAST>:
20061bc4:	00000000                                ....

20061bc8 <numTokens_LAST>:
20061bc8:	00000000                                ....

20061bcc <index_QFS>:
20061bcc:	00000000                                ....

20061bd0 <numFree_QFS>:
20061bd0:	00000000                                ....

20061bd4 <count>:
20061bd4:	00000000                                ....

20061bd8 <qfs>:
	...

20061c58 <_FSM_state>:
20061c58:	00000000                                ....

20061c5c <index_BTYPE>:
20061c5c:	00000000                                ....

20061c60 <numTokens_BTYPE>:
20061c60:	00000000                                ....

20061c64 <index_MVIN>:
20061c64:	00000000                                ....

20061c68 <numTokens_MVIN>:
20061c68:	00000000                                ....

20061c6c <index_A>:
20061c6c:	00000000                                ....

20061c70 <numTokens_A>:
20061c70:	00000000                                ....

20061c74 <index_MV>:
20061c74:	00000000                                ....

20061c78 <numFree_MV>:
20061c78:	00000000                                ....

20061c7c <mbx>:
	...

20061c7d <comp>:
	...

20061c7e <mbwidth>:
	...

20061c80 <ptr>:
20061c80:	00000000                                ....

20061c84 <buf>:
	...

20061d84 <mv_rsize>:
	...

20061d86 <mv_range>:
	...

20061d88 <mv_low>:
	...

20061d8a <mv_high>:
	...

20061d8c <fourmv>:
20061d8c:	00000000                                ....

20061d90 <aptr>:
	...

20061d92 <bptr>:
	...

20061d94 <cptr>:
	...

20061d96 <apred>:
	...

20061d98 <bpred>:
	...

20061d9a <cpred>:
	...

20061d9c <mag>:
	...

20061d9e <mv_x>:
	...

20061da0 <mv_y>:
	...

20061da2 <sum_x>:
	...

20061da4 <sum_y>:
20061da4:	00000000                                ....

20061da8 <x_flag>:
20061da8:	00000000                                ....

20061dac <res_shift>:
20061dac:	00000000                                ....

20061db0 <_FSM_state>:
20061db0:	00000000                                ....

20061db4 <index_BTYPE>:
20061db4:	00000000                                ....

20061db8 <numTokens_BTYPE>:
20061db8:	00000000                                ....

20061dbc <index_A>:
20061dbc:	00000000                                ....

20061dc0 <numFree_A>:
20061dc0:	00000000                                ....

20061dc4 <mbx>:
20061dc4:	00000000                                ....

20061dc8 <right_edge>:
20061dc8:	00000000                                ....

20061dcc <comp>:
	...

20061dcd <mbwidth>:
	...

20061dce <ptr>:
	...

20061dcf <ptr_left>:
	...

20061dd0 <ptr_above>:
	...

20061dd1 <ptr_above_right>:
20061dd1:	00000000                                         ...

20061dd4 <_FSM_state>:
20061dd4:	00000000                                ....

20061dd8 <index_BYTE>:
20061dd8:	00000000                                ....

20061ddc <numTokens_BYTE>:
20061ddc:	00000000                                ....

20061de0 <index_BTYPE>:
20061de0:	00000000                                ....

20061de4 <numFree_BTYPE>:
20061de4:	00000000                                ....

20061de8 <index_MV>:
20061de8:	00000000                                ....

20061dec <numFree_MV>:
20061dec:	00000000                                ....

20061df0 <index_RUN>:
20061df0:	00000000                                ....

20061df4 <numFree_RUN>:
20061df4:	00000000                                ....

20061df8 <index_VALUE>:
20061df8:	00000000                                ....

20061dfc <numFree_VALUE>:
20061dfc:	00000000                                ....

20061e00 <index_LAST>:
20061e00:	00000000                                ....

20061e04 <numFree_LAST>:
20061e04:	00000000                                ....

20061e08 <index_WIDTH>:
20061e08:	00000000                                ....

20061e0c <numFree_WIDTH>:
20061e0c:	00000000                                ....

20061e10 <index_HEIGHT>:
20061e10:	00000000                                ....

20061e14 <numFree_HEIGHT>:
20061e14:	00000000                                ....

20061e18 <index_QP>:
20061e18:	00000000                                ....

20061e1c <numFree_QP>:
20061e1c:	00000000                                ....

20061e20 <fifo>:
	...

20061e34 <zeroByte>:
	...

20061e35 <start_code>:
20061e35:	00000000                                         ...

20061e38 <vol_control_parameters>:
20061e38:	00000000                                ....

20061e3c <vbv_parameters>:
20061e3c:	00000000                                ....

20061e40 <vop_time_increment_resolution_bits>:
	...

20061e42 <video_object_layer_width>:
	...

20061e44 <video_object_layer_height>:
	...

20061e46 <mb_pic>:
	...

20061e48 <vop_coding_type>:
20061e48:	00000000                                ....

20061e4c <vop_coded>:
20061e4c:	00000000                                ....

20061e50 <round>:
20061e50:	00000000                                ....

20061e54 <vop_quant>:
	...

20061e55 <prev_quant>:
	...

20061e56 <intra_dc_vlc_thr>:
	...

20061e57 <fcode>:
	...

20061e58 <mb_cnt>:
20061e58:	00000000                                ....

20061e5c <derived_mb_type>:
	...

20061e5d <cbpc>:
20061e5d:	00000000                                         ...

20061e60 <is_intra>:
20061e60:	00000000                                ....

20061e64 <btype_is_Q>:
20061e64:	00000000                                ....

20061e68 <fourmvflag>:
20061e68:	00000000                                ....

20061e6c <not_coded>:
20061e6c:	00000000                                ....

20061e70 <cbp>:
20061e70:	00000000                                ....

20061e74 <ac_pred_flag>:
20061e74:	00000000                                ....

20061e78 <comp>:
20061e78:	00000000                                ....

20061e7c <last>:
20061e7c:	00000000                                ....

20061e80 <run>:
20061e80:	00000000                                ....

20061e84 <level>:
20061e84:	00000000                                ....

20061e88 <ac_coded>:
20061e88:	00000000                                ....

20061e8c <mvcomp>:
20061e8c:	00000000                                ....

20061e90 <_FSM_state>:
20061e90:	00000000                                ....

20061e94 <index_BTYPE>:
20061e94:	00000000                                ....

20061e98 <numTokens_BTYPE>:
20061e98:	00000000                                ....

20061e9c <index_A>:
20061e9c:	00000000                                ....

20061ea0 <numFree_A>:
20061ea0:	00000000                                ....

20061ea4 <index_B>:
20061ea4:	00000000                                ....

20061ea8 <numFree_B>:
20061ea8:	00000000                                ....

20061eac <index_C>:
20061eac:	00000000                                ....

20061eb0 <numFree_C>:
20061eb0:	00000000                                ....

20061eb4 <mbx>:
20061eb4:	00000000                                ....

20061eb8 <left_edge>:
20061eb8:	00000000                                ....

20061ebc <comp>:
	...

20061ebd <mbwidth>:
20061ebd:	00000000                                         ...

20061ec0 <coded>:
	...

20062080 <ptr>:
	...

20062081 <ptr_left>:
	...

20062082 <ptr_above>:
	...

20062083 <ptr_above_left>:
	...

20062084 <_FSM_state>:
20062084:	00000000                                ....

20062088 <index_BTYPE>:
20062088:	00000000                                ....

2006208c <numTokens_BTYPE>:
2006208c:	00000000                                ....

20062090 <index_A>:
20062090:	00000000                                ....

20062094 <numTokens_A>:
20062094:	00000000                                ....

20062098 <index_B>:
20062098:	00000000                                ....

2006209c <numTokens_B>:
2006209c:	00000000                                ....

200620a0 <index_C>:
200620a0:	00000000                                ....

200620a4 <numTokens_C>:
200620a4:	00000000                                ....

200620a8 <index_QFS_DC>:
200620a8:	00000000                                ....

200620ac <numTokens_QFS_DC>:
200620ac:	00000000                                ....

200620b0 <index_QP>:
200620b0:	00000000                                ....

200620b4 <numTokens_QP>:
200620b4:	00000000                                ....

200620b8 <index_QF_DC>:
200620b8:	00000000                                ....

200620bc <numFree_QF_DC>:
200620bc:	00000000                                ....

200620c0 <index_PTR>:
200620c0:	00000000                                ....

200620c4 <numFree_PTR>:
200620c4:	00000000                                ....

200620c8 <index_AC_PRED_DIR>:
200620c8:	00000000                                ....

200620cc <numFree_AC_PRED_DIR>:
200620cc:	00000000                                ....

200620d0 <index_MODE>:
200620d0:	00000000                                ....

200620d4 <numFree_MODE>:
200620d4:	00000000                                ....

200620d8 <index_SIGNED>:
200620d8:	00000000                                ....

200620dc <numFree_SIGNED>:
200620dc:	00000000                                ....

200620e0 <index_QUANT>:
200620e0:	00000000                                ....

200620e4 <numFree_QUANT>:
200620e4:	00000000                                ....

200620e8 <s_QP>:
	...

200620e9 <round>:
	...

200620ea <comp>:
	...

200620ec <dc_pred>:
	...

200620ee <scaler>:
	...

200620f0 <dc_val>:
200620f0:	00000000                                ....

200620f4 <is_signed>:
200620f4:	00000000                                ....

200620f8 <_FSM_state>:
200620f8:	00000000                                ....

200620fc <index_IN>:
200620fc:	00000000                                ....

20062100 <numTokens_IN>:
20062100:	00000000                                ....

20062104 <index_DC>:
20062104:	00000000                                ....

20062108 <numFree_DC>:
20062108:	00000000                                ....

2006210c <index_AC>:
2006210c:	00000000                                ....

20062110 <numFree_AC>:
20062110:	00000000                                ....

20062114 <index_PQF_AC>:
20062114:	00000000                                ....

20062118 <numTokens_PQF_AC>:
20062118:	00000000                                ....

2006211c <index_PTR>:
2006211c:	00000000                                ....

20062120 <numTokens_PTR>:
20062120:	00000000                                ....

20062124 <index_AC_PRED_DIR>:
20062124:	00000000                                ....

20062128 <numTokens_AC_PRED_DIR>:
20062128:	00000000                                ....

2006212c <index_QF_AC>:
2006212c:	00000000                                ....

20062130 <numFree_QF_AC>:
20062130:	00000000                                ....

20062134 <ptr>:
	...

20062136 <pred_ptr>:
	...

20062138 <buf>:
	...

20062f38 <comp>:
20062f38:	00000000                                ....

20062f3c <top>:
20062f3c:	00000000                                ....

20062f40 <acpred_flag>:
20062f40:	00000000                                ....

20062f44 <_FSM_state>:
20062f44:	00000000                                ....

20062f48 <index_DC>:
20062f48:	00000000                                ....

20062f4c <numTokens_DC>:
20062f4c:	00000000                                ....

20062f50 <index_AC>:
20062f50:	00000000                                ....

20062f54 <numTokens_AC>:
20062f54:	00000000                                ....

20062f58 <index_QP>:
20062f58:	00000000                                ....

20062f5c <numTokens_QP>:
20062f5c:	00000000                                ....

20062f60 <index_OUT>:
20062f60:	00000000                                ....

20062f64 <numFree_OUT>:
20062f64:	00000000                                ....

20062f68 <quant>:
	...

20062f69 <round>:
20062f69:	00000000                                         ...

20062f6c <_FSM_state>:
20062f6c:	00000000                                ....

20062f70 <index_AC_PRED_DIR>:
20062f70:	00000000                                ....

20062f74 <numTokens_AC_PRED_DIR>:
20062f74:	00000000                                ....

20062f78 <index_QFS_AC>:
20062f78:	00000000                                ....

20062f7c <numTokens_QFS_AC>:
20062f7c:	00000000                                ....

20062f80 <index_PQF_AC>:
20062f80:	00000000                                ....

20062f84 <numFree_PQF_AC>:
20062f84:	00000000                                ....

20062f88 <index_IN>:
20062f88:	00000000                                ....

20062f8c <numTokens_IN>:
20062f8c:	00000000                                ....

20062f90 <index_SIGNED>:
20062f90:	00000000                                ....

20062f94 <numTokens_SIGNED>:
20062f94:	00000000                                ....

20062f98 <index_OUT>:
20062f98:	00000000                                ....

20062f9c <numFree_OUT>:
20062f9c:	00000000                                ....

Disassembly of section .text:

00000050 <_start1>:
  50:	31a007a0 	addik	r13, r0, 1952	// 7a0 <_SDA_BASE_>
  54:	30400698 	addik	r2, r0, 1688	// 698 <_SDA2_BASE_>
  58:	30200fb8 	addik	r1, r0, 4024
  5c:	b9f401ac 	brlid	r15, 428	// 208 <_crtinit>
  60:	80000000 	or	r0, r0, r0
  64:	b9f40334 	brlid	r15, 820	// 398 <exit>
  68:	30a30000 	addik	r5, r3, 0

0000006c <_exit>:
  6c:	b8000000 	bri	0	// 6c <_exit>

00000070 <deregister_tm_clones>:
  70:	30a00798 	addik	r5, r0, 1944	// 798 <__data_end>
  74:	3080079b 	addik	r4, r0, 1947
  78:	30600006 	addik	r3, r0, 6
  7c:	14852000 	rsubk	r4, r5, r4
  80:	16441803 	cmpu	r18, r4, r3
  84:	bc52000c 	blti	r18, 12		// 90
  88:	b60f0008 	rtsd	r15, 8
  8c:	80000000 	or	r0, r0, r0
  90:	b0000000 	imm	0
  94:	30600000 	addik	r3, r0, 0
  98:	bc03fff0 	beqi	r3, -16		// 88
  9c:	3021ffe4 	addik	r1, r1, -28
  a0:	f9e10000 	swi	r15, r1, 0
  a4:	99fc1800 	brald	r15, r3
  a8:	80000000 	or	r0, r0, r0
  ac:	e9e10000 	lwi	r15, r1, 0
  b0:	b60f0008 	rtsd	r15, 8
  b4:	3021001c 	addik	r1, r1, 28

000000b8 <register_tm_clones>:
  b8:	30a00798 	addik	r5, r0, 1944	// 798 <__data_end>
  bc:	30600798 	addik	r3, r0, 1944	// 798 <__data_end>
  c0:	14651800 	rsubk	r3, r5, r3
  c4:	64630202 	bsrai	r3, r3, 2
  c8:	6483001f 	bsrli	r4, r3, 31
  cc:	10641800 	addk	r3, r4, r3
  d0:	90c30001 	sra	r6, r3
  d4:	bc26000c 	bnei	r6, 12		// e0
  d8:	b60f0008 	rtsd	r15, 8
  dc:	80000000 	or	r0, r0, r0
  e0:	b0000000 	imm	0
  e4:	30800000 	addik	r4, r0, 0
  e8:	bc04fff0 	beqi	r4, -16		// d8
  ec:	3021ffe4 	addik	r1, r1, -28
  f0:	f9e10000 	swi	r15, r1, 0
  f4:	99fc2000 	brald	r15, r4
  f8:	80000000 	or	r0, r0, r0
  fc:	e9e10000 	lwi	r15, r1, 0
 100:	b60f0008 	rtsd	r15, 8
 104:	3021001c 	addik	r1, r1, 28

00000108 <__do_global_dtors_aux>:
 108:	e06007a0 	lbui	r3, r0, 1952	// 7a0 <_SDA_BASE_>
 10c:	bc23009c 	bnei	r3, 156		// 1a8
 110:	3021ffe0 	addik	r1, r1, -32
 114:	fa61001c 	swi	r19, r1, 28
 118:	30800688 	addik	r4, r0, 1672	// 688 <__CTOR_END__>
 11c:	3260068c 	addik	r19, r0, 1676	// 68c <__DTOR_END__>
 120:	e86007a4 	lwi	r3, r0, 1956	// 7a4 <dtor_idx.2710>
 124:	16649800 	rsubk	r19, r4, r19
 128:	66730202 	bsrai	r19, r19, 2
 12c:	3273ffff 	addik	r19, r19, -1
 130:	16531803 	cmpu	r18, r19, r3
 134:	beb20034 	bgeid	r18, 52		// 168
 138:	f9e10000 	swi	r15, r1, 0
 13c:	30630001 	addik	r3, r3, 1
 140:	64830402 	bslli	r4, r3, 2
 144:	30840688 	addik	r4, r4, 1672
 148:	e8840000 	lwi	r4, r4, 0
 14c:	f86007a4 	swi	r3, r0, 1956	// 7a4 <dtor_idx.2710>
 150:	99fc2000 	brald	r15, r4
 154:	80000000 	or	r0, r0, r0
 158:	e86007a4 	lwi	r3, r0, 1956	// 7a4 <dtor_idx.2710>
 15c:	16531803 	cmpu	r18, r19, r3
 160:	be52ffe0 	bltid	r18, -32		// 140
 164:	30630001 	addik	r3, r3, 1
 168:	b9f4ff08 	brlid	r15, -248	// 70 <deregister_tm_clones>
 16c:	80000000 	or	r0, r0, r0
 170:	b0000000 	imm	0
 174:	30600000 	addik	r3, r0, 0
 178:	be03001c 	beqid	r3, 28		// 194
 17c:	e9e10000 	lwi	r15, r1, 0
 180:	30a00798 	addik	r5, r0, 1944	// 798 <__data_end>
 184:	b000ffff 	imm	-1
 188:	b9f4fe78 	brlid	r15, -392	// 0 <_start>
 18c:	80000000 	or	r0, r0, r0
 190:	e9e10000 	lwi	r15, r1, 0
 194:	ea61001c 	lwi	r19, r1, 28
 198:	30600001 	addik	r3, r0, 1
 19c:	f06007a0 	sbi	r3, r0, 1952	// 7a0 <_SDA_BASE_>
 1a0:	b60f0008 	rtsd	r15, 8
 1a4:	30210020 	addik	r1, r1, 32
 1a8:	b60f0008 	rtsd	r15, 8
 1ac:	80000000 	or	r0, r0, r0

000001b0 <frame_dummy>:
 1b0:	b0000000 	imm	0
 1b4:	30600000 	addik	r3, r0, 0
 1b8:	3021ffe4 	addik	r1, r1, -28
 1bc:	be030018 	beqid	r3, 24		// 1d4
 1c0:	f9e10000 	swi	r15, r1, 0
 1c4:	30a00798 	addik	r5, r0, 1944	// 798 <__data_end>
 1c8:	30c007a8 	addik	r6, r0, 1960	// 7a8 <object.2720>
 1cc:	99fc1800 	brald	r15, r3
 1d0:	80000000 	or	r0, r0, r0
 1d4:	e860079c 	lwi	r3, r0, 1948	// 79c <__JCR_END__>
 1d8:	bc03001c 	beqi	r3, 28		// 1f4
 1dc:	b0000000 	imm	0
 1e0:	30600000 	addik	r3, r0, 0
 1e4:	bc030010 	beqi	r3, 16		// 1f4
 1e8:	30a0079c 	addik	r5, r0, 1948	// 79c <__JCR_END__>
 1ec:	99fc1800 	brald	r15, r3
 1f0:	80000000 	or	r0, r0, r0
 1f4:	b9f4fec4 	brlid	r15, -316	// b8 <register_tm_clones>
 1f8:	80000000 	or	r0, r0, r0
 1fc:	e9e10000 	lwi	r15, r1, 0
 200:	b60f0008 	rtsd	r15, 8
 204:	3021001c 	addik	r1, r1, 28

00000208 <_crtinit>:
 208:	2021ffec 	addi	r1, r1, -20
 20c:	f9e10000 	swi	r15, r1, 0
 210:	20c007a0 	addi	r6, r0, 1952	// 7a0 <_SDA_BASE_>
 214:	20e007a0 	addi	r7, r0, 1952	// 7a0 <_SDA_BASE_>
 218:	06463800 	rsub	r18, r6, r7
 21c:	bc720014 	blei	r18, 20		// 230
 220:	f8060000 	swi	r0, r6, 0
 224:	20c60004 	addi	r6, r6, 4
 228:	06463800 	rsub	r18, r6, r7
 22c:	bc92fff4 	bgti	r18, -12		// 220
 230:	20c007a0 	addi	r6, r0, 1952	// 7a0 <_SDA_BASE_>
 234:	20e007c4 	addi	r7, r0, 1988	// 7c4 <__bss_end>
 238:	06463800 	rsub	r18, r6, r7
 23c:	bc720014 	blei	r18, 20		// 250
 240:	f8060000 	swi	r0, r6, 0
 244:	20c60004 	addi	r6, r6, 4
 248:	06463800 	rsub	r18, r6, r7
 24c:	bc92fff4 	bgti	r18, -12		// 240
 250:	b9f40140 	brlid	r15, 320	// 390 <_program_init>
 254:	80000000 	or	r0, r0, r0
 258:	b9f403d8 	brlid	r15, 984	// 630 <__init>
 25c:	80000000 	or	r0, r0, r0
 260:	20c00000 	addi	r6, r0, 0
 264:	20e00000 	addi	r7, r0, 0
 268:	b9f4002c 	brlid	r15, 44	// 294 <main>
 26c:	20a00000 	addi	r5, r0, 0
 270:	32630000 	addik	r19, r3, 0
 274:	b9f403f0 	brlid	r15, 1008	// 664 <__fini>
 278:	80000000 	or	r0, r0, r0
 27c:	b9f4010c 	brlid	r15, 268	// 388 <_program_clean>
 280:	80000000 	or	r0, r0, r0
 284:	c9e10000 	lw	r15, r1, r0
 288:	30730000 	addik	r3, r19, 0
 28c:	b60f0008 	rtsd	r15, 8
 290:	20210014 	addi	r1, r1, 20

00000294 <main>:
extern void call_decoder_texture_DCReconstruction_invpred_scheduler();
extern void call_decoder_motion_interpolation_scheduler();
extern void call_decoder_motion_add_scheduler();
extern void call_decoder_motion_framebuf_scheduler();

int main(){
 294:	3021ffe0 	addik	r1, r1, -32
 298:	f9e10000 	swi	r15, r1, 0
 29c:	fa61001c 	swi	r19, r1, 28
 2a0:	12610000 	addk	r19, r1, r0
	 call_decoder_merger_scheduler();
 2a4:	b0001fff 	imm	8191
 2a8:	b9f4fd58 	brlid	r15, -680	// 20000000 <call_decoder_merger_scheduler>
 2ac:	80000000 	or	r0, r0, r0
	 call_decoder_parser_parseheaders_scheduler();
 2b0:	b0001fff 	imm	8191
 2b4:	b9f4fd80 	brlid	r15, -640	// 20000034 <call_decoder_parser_parseheaders_scheduler>
 2b8:	80000000 	or	r0, r0, r0
	 call_decoder_parser_mvseq_scheduler();
 2bc:	b0001fff 	imm	8191
 2c0:	b9f4fda8 	brlid	r15, -600	// 20000068 <call_decoder_parser_mvseq_scheduler>
 2c4:	80000000 	or	r0, r0, r0
	 call_decoder_parser_blkexp_scheduler();
 2c8:	b0001fff 	imm	8191
 2cc:	b9f4fdd0 	brlid	r15, -560	// 2000009c <call_decoder_parser_blkexp_scheduler>
 2d0:	80000000 	or	r0, r0, r0
	 call_decoder_parser_mvrecon_scheduler();
 2d4:	b0001fff 	imm	8191
 2d8:	b9f4fdf8 	brlid	r15, -520	// 200000d0 <call_decoder_parser_mvrecon_scheduler>
 2dc:	80000000 	or	r0, r0, r0
	 call_decoder_texture_DCsplit_scheduler();
 2e0:	b0001fff 	imm	8191
 2e4:	b9f4fe20 	brlid	r15, -480	// 20000104 <call_decoder_texture_DCsplit_scheduler>
 2e8:	80000000 	or	r0, r0, r0
	 call_decoder_texture_IS_scheduler();
 2ec:	b0001fff 	imm	8191
 2f0:	b9f4fe48 	brlid	r15, -440	// 20000138 <call_decoder_texture_IS_scheduler>
 2f4:	80000000 	or	r0, r0, r0
	 call_decoder_texture_IAP_scheduler();
 2f8:	b0001fff 	imm	8191
 2fc:	b9f4fe70 	brlid	r15, -400	// 2000016c <call_decoder_texture_IAP_scheduler>
 300:	80000000 	or	r0, r0, r0
	 call_decoder_texture_IQ_scheduler();
 304:	b0001fff 	imm	8191
 308:	b9f4fe98 	brlid	r15, -360	// 200001a0 <call_decoder_texture_IQ_scheduler>
 30c:	80000000 	or	r0, r0, r0
	 call_decoder_texture_idct2d_scheduler();
 310:	b0001fff 	imm	8191
 314:	b9f4fec0 	brlid	r15, -320	// 200001d4 <call_decoder_texture_idct2d_scheduler>
 318:	80000000 	or	r0, r0, r0
	 call_decoder_texture_DCReconstruction_addressing_scheduler();
 31c:	b0001fff 	imm	8191
 320:	b9f4fee8 	brlid	r15, -280	// 20000208 <call_decoder_texture_DCReconstruction_addressing_scheduler>
 324:	80000000 	or	r0, r0, r0
	 call_decoder_texture_DCReconstruction_invpred_scheduler();
 328:	b0001fff 	imm	8191
 32c:	b9f4ff10 	brlid	r15, -240	// 2000023c <call_decoder_texture_DCReconstruction_invpred_scheduler>
 330:	80000000 	or	r0, r0, r0
	 call_decoder_motion_interpolation_scheduler();
 334:	b0001fff 	imm	8191
 338:	b9f4ff38 	brlid	r15, -200	// 20000270 <call_decoder_motion_interpolation_scheduler>
 33c:	80000000 	or	r0, r0, r0
	 call_decoder_motion_add_scheduler();
 340:	b0001fff 	imm	8191
 344:	b9f4ff60 	brlid	r15, -160	// 200002a4 <call_decoder_motion_add_scheduler>
 348:	80000000 	or	r0, r0, r0
	 call_decoder_motion_framebuf_scheduler();
 34c:	b0001fff 	imm	8191
 350:	b9f4ff88 	brlid	r15, -120	// 200002d8 <call_decoder_motion_framebuf_scheduler>
 354:	80000000 	or	r0, r0, r0

	 return 0;
 358:	10600000 	addk	r3, r0, r0
}
 35c:	e9e10000 	lwi	r15, r1, 0
 360:	10330000 	addk	r1, r19, r0
 364:	ea61001c 	lwi	r19, r1, 28
 368:	30210020 	addik	r1, r1, 32
 36c:	b60f0008 	rtsd	r15, 8
 370:	80000000 	or	r0, r0, r0

00000374 <_exception_handler>:
 374:	98085800 	bra	r11

00000378 <_hw_exception_handler>:
 378:	b6910000 	rted	r17, 0
 37c:	80000000 	or	r0, r0, r0

00000380 <_interrupt_handler>:
 380:	b62e0000 	rtid	r14, 0
 384:	80000000 	or	r0, r0, r0

00000388 <_program_clean>:
 388:	b60f0008 	rtsd	r15, 8
 38c:	80000000 	or	r0, r0, r0

00000390 <_program_init>:
 390:	b60f0008 	rtsd	r15, 8
 394:	80000000 	or	r0, r0, r0

00000398 <exit>:
 398:	3021ffe0 	addik	r1, r1, -32
 39c:	f9e10000 	swi	r15, r1, 0
 3a0:	fa61001c 	swi	r19, r1, 28
 3a4:	12610000 	addk	r19, r1, r0
 3a8:	f8b30024 	swi	r5, r19, 36
 3ac:	e8b30024 	lwi	r5, r19, 36
 3b0:	10c00000 	addk	r6, r0, r0
 3b4:	b9f40038 	brlid	r15, 56	// 3ec <__call_exitprocs>
 3b8:	80000000 	or	r0, r0, r0
 3bc:	e8600694 	lwi	r3, r0, 1684	// 694 <_global_impure_ptr>
 3c0:	e8630028 	lwi	r3, r3, 40
 3c4:	bc03001c 	beqi	r3, 28		// 3e0
 3c8:	e8600694 	lwi	r3, r0, 1684	// 694 <_global_impure_ptr>
 3cc:	e8630028 	lwi	r3, r3, 40
 3d0:	e8800694 	lwi	r4, r0, 1684	// 694 <_global_impure_ptr>
 3d4:	10a40000 	addk	r5, r4, r0
 3d8:	99fc1800 	brald	r15, r3
 3dc:	80000000 	or	r0, r0, r0
 3e0:	e8b30024 	lwi	r5, r19, 36
 3e4:	b9f4fc88 	brlid	r15, -888	// 6c <_exit>
 3e8:	80000000 	or	r0, r0, r0

000003ec <__call_exitprocs>:
 3ec:	3021ffc4 	addik	r1, r1, -60
 3f0:	f9e10000 	swi	r15, r1, 0
 3f4:	fa61002c 	swi	r19, r1, 44
 3f8:	fac10030 	swi	r22, r1, 48
 3fc:	fae10034 	swi	r23, r1, 52
 400:	fb010038 	swi	r24, r1, 56
 404:	12610000 	addk	r19, r1, r0
 408:	f8b30040 	swi	r5, r19, 64
 40c:	f8d30044 	swi	r6, r19, 68
 410:	e8600694 	lwi	r3, r0, 1684	// 694 <_global_impure_ptr>
 414:	eac30048 	lwi	r22, r3, 72
 418:	e8600694 	lwi	r3, r0, 1684	// 694 <_global_impure_ptr>
 41c:	30630048 	addik	r3, r3, 72
 420:	f873001c 	swi	r3, r19, 28
 424:	b80001a4 	bri	420		// 5c8
 428:	eb160088 	lwi	r24, r22, 136
 42c:	e8760004 	lwi	r3, r22, 4
 430:	32e3ffff 	addik	r23, r3, -1
 434:	b800012c 	bri	300		// 560
 438:	30600001 	addik	r3, r0, 1
 43c:	4463bc00 	bsll	r3, r3, r23
 440:	f8730020 	swi	r3, r19, 32
 444:	e8730044 	lwi	r3, r19, 68
 448:	bc030028 	beqi	r3, 40		// 470
 44c:	bc180020 	beqi	r24, 32		// 46c
 450:	30770020 	addik	r3, r23, 32
 454:	64630402 	bslli	r3, r3, 2
 458:	10781800 	addk	r3, r24, r3
 45c:	e8830000 	lwi	r4, r3, 0
 460:	e8730044 	lwi	r3, r19, 68
 464:	88641800 	xor	r3, r4, r3
 468:	bc030008 	beqi	r3, 8		// 470
 46c:	b80000f0 	bri	240		// 55c
 470:	30770002 	addik	r3, r23, 2
 474:	64630402 	bslli	r3, r3, 2
 478:	10761800 	addk	r3, r22, r3
 47c:	e8630000 	lwi	r3, r3, 0
 480:	f8730024 	swi	r3, r19, 36
 484:	e8760004 	lwi	r3, r22, 4
 488:	3063ffff 	addik	r3, r3, -1
 48c:	8863b800 	xor	r3, r3, r23
 490:	bc230014 	bnei	r3, 20		// 4a4
 494:	e8760004 	lwi	r3, r22, 4
 498:	3063ffff 	addik	r3, r3, -1
 49c:	f8760004 	swi	r3, r22, 4
 4a0:	b8000014 	bri	20		// 4b4
 4a4:	30770002 	addik	r3, r23, 2
 4a8:	64630402 	bslli	r3, r3, 2
 4ac:	10761800 	addk	r3, r22, r3
 4b0:	f8030000 	swi	r0, r3, 0
 4b4:	e8730024 	lwi	r3, r19, 36
 4b8:	bc230008 	bnei	r3, 8		// 4c0
 4bc:	b80000a0 	bri	160		// 55c
 4c0:	e8760004 	lwi	r3, r22, 4
 4c4:	f8730028 	swi	r3, r19, 40
 4c8:	bc180014 	beqi	r24, 20		// 4dc
 4cc:	e8980100 	lwi	r4, r24, 256
 4d0:	e8730020 	lwi	r3, r19, 32
 4d4:	84641800 	and	r3, r4, r3
 4d8:	bc230014 	bnei	r3, 20		// 4ec
 4dc:	e8730024 	lwi	r3, r19, 36
 4e0:	99fc1800 	brald	r15, r3
 4e4:	80000000 	or	r0, r0, r0
 4e8:	b8000054 	bri	84		// 53c
 4ec:	e8980104 	lwi	r4, r24, 260
 4f0:	e8730020 	lwi	r3, r19, 32
 4f4:	84641800 	and	r3, r4, r3
 4f8:	bc230028 	bnei	r3, 40		// 520
 4fc:	64770402 	bslli	r3, r23, 2
 500:	10781800 	addk	r3, r24, r3
 504:	e8830000 	lwi	r4, r3, 0
 508:	e8730024 	lwi	r3, r19, 36
 50c:	e8b30040 	lwi	r5, r19, 64
 510:	10c40000 	addk	r6, r4, r0
 514:	99fc1800 	brald	r15, r3
 518:	80000000 	or	r0, r0, r0
 51c:	b8000020 	bri	32		// 53c
 520:	64770402 	bslli	r3, r23, 2
 524:	10781800 	addk	r3, r24, r3
 528:	e8830000 	lwi	r4, r3, 0
 52c:	e8730024 	lwi	r3, r19, 36
 530:	10a40000 	addk	r5, r4, r0
 534:	99fc1800 	brald	r15, r3
 538:	80000000 	or	r0, r0, r0
 53c:	e8960004 	lwi	r4, r22, 4
 540:	e8730028 	lwi	r3, r19, 40
 544:	88641800 	xor	r3, r4, r3
 548:	bc23fec8 	bnei	r3, -312		// 410
 54c:	e873001c 	lwi	r3, r19, 28
 550:	e8630000 	lwi	r3, r3, 0
 554:	8863b000 	xor	r3, r3, r22
 558:	bc23feb8 	bnei	r3, -328		// 410
 55c:	32f7ffff 	addik	r23, r23, -1
 560:	bcb7fed8 	bgei	r23, -296		// 438
 564:	b0000000 	imm	0
 568:	30600000 	addik	r3, r0, 0
 56c:	bc230008 	bnei	r3, 8		// 574
 570:	b800005c 	bri	92		// 5cc
 574:	e8760004 	lwi	r3, r22, 4
 578:	bc230048 	bnei	r3, 72		// 5c0
 57c:	e8760000 	lwi	r3, r22, 0
 580:	bc030040 	beqi	r3, 64		// 5c0
 584:	e8960000 	lwi	r4, r22, 0
 588:	e873001c 	lwi	r3, r19, 28
 58c:	f8830000 	swi	r4, r3, 0
 590:	bc180014 	beqi	r24, 20		// 5a4
 594:	10b80000 	addk	r5, r24, r0
 598:	b000ffff 	imm	-1
 59c:	b9f4fa64 	brlid	r15, -1436	// 0 <_start>
 5a0:	80000000 	or	r0, r0, r0
 5a4:	10b60000 	addk	r5, r22, r0
 5a8:	b000ffff 	imm	-1
 5ac:	b9f4fa54 	brlid	r15, -1452	// 0 <_start>
 5b0:	80000000 	or	r0, r0, r0
 5b4:	e873001c 	lwi	r3, r19, 28
 5b8:	eac30000 	lwi	r22, r3, 0
 5bc:	b800000c 	bri	12		// 5c8
 5c0:	fad3001c 	swi	r22, r19, 28
 5c4:	ead60000 	lwi	r22, r22, 0
 5c8:	bc36fe60 	bnei	r22, -416		// 428
 5cc:	e9e10000 	lwi	r15, r1, 0
 5d0:	10330000 	addk	r1, r19, r0
 5d4:	ea61002c 	lwi	r19, r1, 44
 5d8:	eac10030 	lwi	r22, r1, 48
 5dc:	eae10034 	lwi	r23, r1, 52
 5e0:	eb010038 	lwi	r24, r1, 56
 5e4:	3021003c 	addik	r1, r1, 60
 5e8:	b60f0008 	rtsd	r15, 8
 5ec:	80000000 	or	r0, r0, r0

000005f0 <__do_global_ctors_aux>:
 5f0:	e8600680 	lwi	r3, r0, 1664	// 680 <__CTOR_LIST__>
 5f4:	3021ffe0 	addik	r1, r1, -32
 5f8:	fa61001c 	swi	r19, r1, 28
 5fc:	a883ffff 	xori	r4, r3, -1
 600:	32600680 	addik	r19, r0, 1664	// 680 <__CTOR_LIST__>
 604:	be04001c 	beqid	r4, 28		// 620
 608:	f9e10000 	swi	r15, r1, 0
 60c:	99fc1800 	brald	r15, r3
 610:	3273fffc 	addik	r19, r19, -4
 614:	e8730000 	lwi	r3, r19, 0
 618:	a883ffff 	xori	r4, r3, -1
 61c:	bc24fff0 	bnei	r4, -16		// 60c
 620:	e9e10000 	lwi	r15, r1, 0
 624:	ea61001c 	lwi	r19, r1, 28
 628:	b60f0008 	rtsd	r15, 8
 62c:	30210020 	addik	r1, r1, 32

Disassembly of section .init:

00000630 <__init>:
 630:	3021fff8 	addik	r1, r1, -8
 634:	d9e00800 	sw	r15, r0, r1
 638:	3160ffff 	addik	r11, r0, -1
 63c:	940bc802 	mts	rshr, r11
 640:	31600000 	addik	r11, r0, 0
 644:	940bc800 	mts	rslr, r11
 648:	b9f4fb68 	brlid	r15, -1176	// 1b0 <frame_dummy>
 64c:	80000000 	or	r0, r0, r0
 650:	b9f4ffa0 	brlid	r15, -96	// 5f0 <__do_global_ctors_aux>
 654:	80000000 	or	r0, r0, r0
 658:	c9e00800 	lw	r15, r0, r1
 65c:	b60f0008 	rtsd	r15, 8
 660:	30210008 	addik	r1, r1, 8

Disassembly of section .fini:

00000664 <__fini>:
 664:	3021fff8 	addik	r1, r1, -8
 668:	d9e00800 	sw	r15, r0, r1
 66c:	b9f4fa9c 	brlid	r15, -1380	// 108 <__do_global_dtors_aux>
 670:	80000000 	or	r0, r0, r0
 674:	c9e00800 	lw	r15, r0, r1
 678:	b60f0008 	rtsd	r15, 8
 67c:	30210008 	addik	r1, r1, 8
