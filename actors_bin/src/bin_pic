
C:\Users\yolivave\work\COMPA_Dynamic_Runtime\actors_bin\Debug\actors_bin.elf:     file format elf32-microblazeel
C:\Users\yolivave\work\COMPA_Dynamic_Runtime\actors_bin\Debug\actors_bin.elf
architecture: MicroBlaze, flags 0x00000012:
EXEC_P, HAS_SYMS
start address 0x00000050

Program Header:
    LOAD off    0x000000f4 vaddr 0x00000000 paddr 0x00000000 align 2**2
         filesz 0x00000024 memsz 0x00000024 flags r-x
    LOAD off    0x00000118 vaddr 0x00000050 paddr 0x00000050 align 2**2
         filesz 0x0000190c memsz 0x0000190c flags rwx
    LOAD off    0x00001a24 vaddr 0x00000698 paddr 0x00000698 align 2**0
         filesz 0x00000000 memsz 0x00000000 flags rw-
    LOAD off    0x00001a24 vaddr 0x0000195c paddr 0x0000195c align 2**2
         filesz 0x00000d90 memsz 0x000015bc flags rw-
    LOAD off    0x000027b4 vaddr 0x20000000 paddr 0x20000000 align 2**2
         filesz 0x00000438 memsz 0x00000438 flags r-x
    LOAD off    0x00002bec vaddr 0x20008000 paddr 0x20008000 align 2**2
         filesz 0x00064d6c memsz 0x00064d6c flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .vectors.reset 00000004  00000000  00000000  000000f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .vectors.sw_exception 00000004  00000008  00000008  000000fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .vectors.interrupt 00000004  00000010  00000010  00000104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .vectors.hw_exception 00000004  00000020  00000020  00000114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 sched_callers_section 00000438  20000000  20000000  000027b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 actors_code_section 00064d6c  20008000  20008000  00002bec  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  6 .text         000005e0  00000050  00000050  00000118  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  7 .init         00000034  00000630  00000630  000006f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .fini         0000001c  00000664  00000664  0000072c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .ctors        00000008  00000680  00000680  00000748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .dtors        00000008  00000688  00000688  00000750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .rodata       00000008  00000690  00000690  00000758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .sdata2       00000000  00000698  00000698  00001a24  2**0
                  ALLOC
 13 .data         000012c4  00000698  00000698  00000760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .got.plt      0000000c  0000195c  0000195c  00001a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .got          00000d7c  00001968  00001968  00001a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 16 .eh_frame     00000004  000026e4  000026e4  000027ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 17 .jcr          00000004  000026e8  000026e8  000027b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 18 .sdata        00000004  000026ec  000026ec  000027b4  2**0
                  ALLOC
 19 .bss          00000024  000026f0  000026f0  000027b4  2**2
                  ALLOC
 20 .heap         00000404  00002714  00002714  000027b4  2**0
                  ALLOC
 21 .stack        00000400  00002b18  00002b18  000027b4  2**0
                  ALLOC
 22 .debug_frame  0000deb8  00000000  00000000  00067958  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_info   00023c4f  00000000  00000000  00075810  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_abbrev 00001d7f  00000000  00000000  0009945f  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_aranges 00000290  00000000  00000000  0009b1de  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_line   00018e84  00000000  00000000  0009b46e  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_str    00004eb3  00000000  00000000  000b42f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_ranges 00000080  00000000  00000000  000b91a5  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .vectors.reset	00000000 .vectors.reset
00000008 l    d  .vectors.sw_exception	00000000 .vectors.sw_exception
00000010 l    d  .vectors.interrupt	00000000 .vectors.interrupt
00000020 l    d  .vectors.hw_exception	00000000 .vectors.hw_exception
20000000 l    d  sched_callers_section	00000000 sched_callers_section
20008000 l    d  actors_code_section	00000000 actors_code_section
00000050 l    d  .text	00000000 .text
00000630 l    d  .init	00000000 .init
00000664 l    d  .fini	00000000 .fini
00000680 l    d  .ctors	00000000 .ctors
00000688 l    d  .dtors	00000000 .dtors
00000690 l    d  .rodata	00000000 .rodata
00000698 l    d  .sdata2	00000000 .sdata2
00000698 l    d  .data	00000000 .data
0000195c l    d  .got.plt	00000000 .got.plt
00001968 l    d  .got	00000000 .got
000026e4 l    d  .eh_frame	00000000 .eh_frame
000026e8 l    d  .jcr	00000000 .jcr
000026ec l    d  .sdata	00000000 .sdata
000026f0 l    d  .bss	00000000 .bss
00002714 l    d  .heap	00000000 .heap
00002b18 l    d  .stack	00000000 .stack
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/xilinx/sdk/2014.2/gnu/microblaze/nt/bin/../lib/gcc/microblaze-xilinx-elf/4.8.3/../../../../microblaze-xilinx-elf/lib/bs/m/le/crt0.o
00000008 l       .vectors.sw_exception	00000000 _vector_sw_exception
00000010 l       .vectors.interrupt	00000000 _vector_interrupt
00000020 l       .vectors.hw_exception	00000000 _vector_hw_exception
00000000 l    df *ABS*	00000000 decoder_merger.o
20008000 l     F actors_code_section	00000080 fifo_i8_has_tokens
20008080 l     F actors_code_section	00000064 fifo_i8_get_num_tokens
200080e4 l     F actors_code_section	000000b4 fifo_i8_has_room
20008198 l     F actors_code_section	000000b8 fifo_i8_get_room
20008250 l     F actors_code_section	00000084 fifo_i8_clear
200082d4 l     F actors_code_section	000000a0 fifo_i8_read_1
20008374 l     F actors_code_section	00000084 fifo_i8_write_1
200083f8 l     F actors_code_section	00000080 fifo_i16_has_tokens
20008478 l     F actors_code_section	00000064 fifo_i16_get_num_tokens
200084dc l     F actors_code_section	000000b4 fifo_i16_has_room
20008590 l     F actors_code_section	000000b8 fifo_i16_get_room
20008648 l     F actors_code_section	00000084 fifo_i16_clear
200086cc l     F actors_code_section	000000a4 fifo_i16_read_1
20008770 l     F actors_code_section	00000088 fifo_i16_write_1
200087f8 l     F actors_code_section	00000080 fifo_i32_has_tokens
20008878 l     F actors_code_section	00000064 fifo_i32_get_num_tokens
200088dc l     F actors_code_section	000000b4 fifo_i32_has_room
20008990 l     F actors_code_section	000000b8 fifo_i32_get_room
20008a48 l     F actors_code_section	00000084 fifo_i32_clear
20008acc l     F actors_code_section	000000a0 fifo_i32_read_1
20008b6c l     F actors_code_section	00000084 fifo_i32_write_1
20008bf0 l     F actors_code_section	00000080 fifo_i64_has_tokens
20008c70 l     F actors_code_section	00000064 fifo_i64_get_num_tokens
20008cd4 l     F actors_code_section	000000b4 fifo_i64_has_room
20008d88 l     F actors_code_section	000000b8 fifo_i64_get_room
20008e40 l     F actors_code_section	00000084 fifo_i64_clear
20008ec4 l     F actors_code_section	000000b4 fifo_i64_read_1
20008f78 l     F actors_code_section	00000090 fifo_i64_write_1
20009008 l     F actors_code_section	00000080 fifo_u8_has_tokens
20009088 l     F actors_code_section	00000064 fifo_u8_get_num_tokens
200090ec l     F actors_code_section	000000b4 fifo_u8_has_room
200091a0 l     F actors_code_section	000000b8 fifo_u8_get_room
20009258 l     F actors_code_section	00000084 fifo_u8_clear
200092dc l     F actors_code_section	0000009c fifo_u8_read_1
20009378 l     F actors_code_section	00000084 fifo_u8_write_1
200093fc l     F actors_code_section	00000080 fifo_u16_has_tokens
2000947c l     F actors_code_section	00000064 fifo_u16_get_num_tokens
200094e0 l     F actors_code_section	000000b4 fifo_u16_has_room
20009594 l     F actors_code_section	000000b8 fifo_u16_get_room
2000964c l     F actors_code_section	00000084 fifo_u16_clear
200096d0 l     F actors_code_section	000000a0 fifo_u16_read_1
20009770 l     F actors_code_section	00000088 fifo_u16_write_1
200097f8 l     F actors_code_section	00000080 fifo_u32_has_tokens
20009878 l     F actors_code_section	00000064 fifo_u32_get_num_tokens
200098dc l     F actors_code_section	000000b4 fifo_u32_has_room
20009990 l     F actors_code_section	000000b8 fifo_u32_get_room
20009a48 l     F actors_code_section	00000084 fifo_u32_clear
20009acc l     F actors_code_section	000000a0 fifo_u32_read_1
20009b6c l     F actors_code_section	00000084 fifo_u32_write_1
20009bf0 l     F actors_code_section	00000080 fifo_u64_has_tokens
20009c70 l     F actors_code_section	00000064 fifo_u64_get_num_tokens
20009cd4 l     F actors_code_section	000000b4 fifo_u64_has_room
20009d88 l     F actors_code_section	000000b8 fifo_u64_get_room
20009e40 l     F actors_code_section	00000084 fifo_u64_clear
20009ec4 l     F actors_code_section	000000b4 fifo_u64_read_1
20009f78 l     F actors_code_section	00000090 fifo_u64_write_1
2000a008 l     F actors_code_section	00000080 fifo_float_has_tokens
2000a088 l     F actors_code_section	00000064 fifo_float_get_num_tokens
2000a0ec l     F actors_code_section	000000b4 fifo_float_has_room
2000a1a0 l     F actors_code_section	000000b8 fifo_float_get_room
2000a258 l     F actors_code_section	00000084 fifo_float_clear
2000a2dc l     F actors_code_section	000000a0 fifo_float_read_1
2000a37c l     F actors_code_section	00000084 fifo_float_write_1
2005060c l     O actors_code_section	00000014 fifo_0
20050620 l     O actors_code_section	00000014 fifo_1
20050634 l     O actors_code_section	00000014 fifo_2
20050648 l     O actors_code_section	00000014 fifo_3
2005065c l     O actors_code_section	00000014 fifo_4
20050670 l     O actors_code_section	00000014 fifo_5
20050684 l     O actors_code_section	00000014 fifo_6
20050698 l     O actors_code_section	00000014 fifo_7
200506ac l     O actors_code_section	00000014 fifo_8
200506c0 l     O actors_code_section	00000014 fifo_9
200506d4 l     O actors_code_section	00000014 fifo_10
200506e8 l     O actors_code_section	00000014 fifo_11
200506fc l     O actors_code_section	00000014 fifo_12
20050710 l     O actors_code_section	00000014 fifo_13
20050724 l     O actors_code_section	00000014 fifo_14
20050738 l     O actors_code_section	00000014 fifo_15
2005074c l     O actors_code_section	00000014 fifo_16
20050760 l     O actors_code_section	00000014 fifo_17
20050774 l     O actors_code_section	00000014 fifo_18
20050788 l     O actors_code_section	00000014 fifo_19
2005079c l     O actors_code_section	00000014 fifo_20
200507b0 l     O actors_code_section	00000014 fifo_21
200507c4 l     O actors_code_section	00000014 fifo_22
200507d8 l     O actors_code_section	00000014 fifo_23
200507ec l     O actors_code_section	00000014 fifo_24
20050800 l     O actors_code_section	00000014 fifo_25
20050814 l     O actors_code_section	00000014 fifo_26
20050828 l     O actors_code_section	00000014 fifo_27
2005083c l     O actors_code_section	00000014 fifo_28
20050850 l     O actors_code_section	00000014 fifo_29
20050864 l     O actors_code_section	00000014 fifo_30
20050878 l     O actors_code_section	00000014 fifo_31
00000798 l     O .data	00000004 source_O
0000079c l     O .data	00000004 decoder_parser_parseheaders_BYTE
000007a0 l     O .data	00000004 decoder_merger_YUV
000007a4 l     O .data	00000004 display_B
000007a8 l     O .data	00000004 decoder_parser_parseheaders_QP
000007ac l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QP
000007b0 l     O .data	00000004 decoder_parser_parseheaders_HEIGHT
000007b4 l     O .data	00000004 display_HEIGHT
000007b8 l     O .data	00000004 decoder_parser_parseheaders_RUN
000007bc l     O .data	00000004 decoder_parser_blkexp_RUN
000007c0 l     O .data	00000004 decoder_parser_parseheaders_MV
000007c4 l     O .data	00000004 decoder_parser_mvrecon_MVIN
000007c8 l     O .data	00000004 decoder_parser_parseheaders_WIDTH
000007cc l     O .data	00000004 display_WIDTH
000007d0 l     O .data	00000004 decoder_parser_parseheaders_LAST
000007d4 l     O .data	00000004 decoder_parser_blkexp_LAST
000007d8 l     O .data	00000004 decoder_parser_parseheaders_BTYPE
000007dc l     O .data	00000004 decoder_parser_mvseq_BTYPE
000007e0 l     O .data	00000004 decoder_parser_mvrecon_BTYPE
000007e4 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
000007e8 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
000007ec l     O .data	00000004 decoder_motion_add_BTYPE
000007f0 l     O .data	00000004 decoder_motion_framebuf_BTYPE
000007f4 l     O .data	00000004 decoder_parser_parseheaders_VALUE
000007f8 l     O .data	00000004 decoder_parser_blkexp_VALUE
000007fc l     O .data	00000004 decoder_parser_mvseq_A
00000800 l     O .data	00000004 decoder_parser_mvrecon_A
00000804 l     O .data	00000004 decoder_parser_blkexp_QFS
00000808 l     O .data	00000004 decoder_texture_DCsplit_IN
0000080c l     O .data	00000004 decoder_parser_mvrecon_MV
00000810 l     O .data	00000004 decoder_motion_framebuf_MV
00000814 l     O .data	00000004 decoder_texture_DCsplit_AC
00000818 l     O .data	00000004 decoder_texture_IS_QFS_AC
0000081c l     O .data	00000004 decoder_texture_DCsplit_DC
00000820 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
00000824 l     O .data	00000004 decoder_texture_IS_PQF_AC
00000828 l     O .data	00000004 decoder_texture_IAP_PQF_AC
0000082c l     O .data	00000004 decoder_texture_IAP_QF_AC
00000830 l     O .data	00000004 decoder_texture_IQ_AC
00000834 l     O .data	00000004 decoder_texture_IQ_OUT
00000838 l     O .data	00000004 decoder_texture_idct2d_IN
0000083c l     O .data	00000004 decoder_texture_idct2d_OUT
00000840 l     O .data	00000004 decoder_motion_add_TEX
00000844 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_B
00000848 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_B
0000084c l     O .data	00000004 decoder_texture_DCReconstruction_addressing_A
00000850 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_A
00000854 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_C
00000858 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_C
0000085c l     O .data	00000004 decoder_texture_DCReconstruction_invpred_PTR
00000860 l     O .data	00000004 decoder_texture_IAP_PTR
00000864 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
00000868 l     O .data	00000004 decoder_texture_IQ_DC
0000086c l     O .data	00000004 decoder_texture_DCReconstruction_invpred_MODE
00000870 l     O .data	00000004 decoder_texture_IS_AC_PRED_DIR
00000874 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
00000878 l     O .data	00000004 decoder_texture_idct2d_SIGNED
0000087c l     O .data	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
00000880 l     O .data	00000004 decoder_texture_IAP_AC_PRED_DIR
00000884 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QUANT
00000888 l     O .data	00000004 decoder_texture_IQ_QP
0000088c l     O .data	00000004 decoder_motion_interpolation_MOT
00000890 l     O .data	00000004 decoder_motion_add_MOT
00000894 l     O .data	00000004 decoder_motion_add_VID
00000898 l     O .data	00000004 decoder_motion_framebuf_WD
0000089c l     O .data	00000004 decoder_merger_YUV_i
000008a0 l     O .data	00000004 decoder_motion_framebuf_RD
000008a4 l     O .data	00000004 decoder_motion_interpolation_RD
000008a8 l     O .data	00000004 decoder_motion_framebuf_halfpel
000008ac l     O .data	00000004 decoder_motion_interpolation_halfpel
20052cc4 l     O actors_code_section	00000004 index_YUV_i
20052cc8 l     O actors_code_section	00000004 numTokens_YUV_i
20052ccc l     O actors_code_section	00000004 index_YUV
20052cd0 l     O actors_code_section	00000004 numFree_YUV
2005088c l     O actors_code_section	00000001 needInit
000008b0 l     O .data	0000000c stateNames
20052cd4 l     O actors_code_section	00000004 _FSM_state
2000a400 l     F actors_code_section	000000a0 read_YUV_i
2000a4a0 l     F actors_code_section	00000058 read_end_YUV_i
2000a4f8 l     F actors_code_section	000000a0 write_YUV
2000a598 l     F actors_code_section	00000054 write_end_YUV
2000a5ec l     F actors_code_section	00000040 isSchedulable_Y
2000a62c l     F actors_code_section	00000438 Y
2000aa64 l     F actors_code_section	00000040 isSchedulable_U
2000aaa4 l     F actors_code_section	00000150 U
2000abf4 l     F actors_code_section	00000040 isSchedulable_V
2000ac34 l     F actors_code_section	00000150 V
00000000 l    df *ABS*	00000000 decoder_motion_add.o
2000b11c l     F actors_code_section	00000080 fifo_i8_has_tokens
2000b19c l     F actors_code_section	00000064 fifo_i8_get_num_tokens
2000b200 l     F actors_code_section	000000b4 fifo_i8_has_room
2000b2b4 l     F actors_code_section	000000b8 fifo_i8_get_room
2000b36c l     F actors_code_section	00000084 fifo_i8_clear
2000b3f0 l     F actors_code_section	000000a0 fifo_i8_read_1
2000b490 l     F actors_code_section	00000084 fifo_i8_write_1
2000b514 l     F actors_code_section	00000080 fifo_i16_has_tokens
2000b594 l     F actors_code_section	00000064 fifo_i16_get_num_tokens
2000b5f8 l     F actors_code_section	000000b4 fifo_i16_has_room
2000b6ac l     F actors_code_section	000000b8 fifo_i16_get_room
2000b764 l     F actors_code_section	00000084 fifo_i16_clear
2000b7e8 l     F actors_code_section	000000a4 fifo_i16_read_1
2000b88c l     F actors_code_section	00000088 fifo_i16_write_1
2000b914 l     F actors_code_section	00000080 fifo_i32_has_tokens
2000b994 l     F actors_code_section	00000064 fifo_i32_get_num_tokens
2000b9f8 l     F actors_code_section	000000b4 fifo_i32_has_room
2000baac l     F actors_code_section	000000b8 fifo_i32_get_room
2000bb64 l     F actors_code_section	00000084 fifo_i32_clear
2000bbe8 l     F actors_code_section	000000a0 fifo_i32_read_1
2000bc88 l     F actors_code_section	00000084 fifo_i32_write_1
2000bd0c l     F actors_code_section	00000080 fifo_i64_has_tokens
2000bd8c l     F actors_code_section	00000064 fifo_i64_get_num_tokens
2000bdf0 l     F actors_code_section	000000b4 fifo_i64_has_room
2000bea4 l     F actors_code_section	000000b8 fifo_i64_get_room
2000bf5c l     F actors_code_section	00000084 fifo_i64_clear
2000bfe0 l     F actors_code_section	000000b4 fifo_i64_read_1
2000c094 l     F actors_code_section	00000090 fifo_i64_write_1
2000c124 l     F actors_code_section	00000080 fifo_u8_has_tokens
2000c1a4 l     F actors_code_section	00000064 fifo_u8_get_num_tokens
2000c208 l     F actors_code_section	000000b4 fifo_u8_has_room
2000c2bc l     F actors_code_section	000000b8 fifo_u8_get_room
2000c374 l     F actors_code_section	00000084 fifo_u8_clear
2000c3f8 l     F actors_code_section	0000009c fifo_u8_read_1
2000c494 l     F actors_code_section	00000084 fifo_u8_write_1
2000c518 l     F actors_code_section	00000080 fifo_u16_has_tokens
2000c598 l     F actors_code_section	00000064 fifo_u16_get_num_tokens
2000c5fc l     F actors_code_section	000000b4 fifo_u16_has_room
2000c6b0 l     F actors_code_section	000000b8 fifo_u16_get_room
2000c768 l     F actors_code_section	00000084 fifo_u16_clear
2000c7ec l     F actors_code_section	000000a0 fifo_u16_read_1
2000c88c l     F actors_code_section	00000088 fifo_u16_write_1
2000c914 l     F actors_code_section	00000080 fifo_u32_has_tokens
2000c994 l     F actors_code_section	00000064 fifo_u32_get_num_tokens
2000c9f8 l     F actors_code_section	000000b4 fifo_u32_has_room
2000caac l     F actors_code_section	000000b8 fifo_u32_get_room
2000cb64 l     F actors_code_section	00000084 fifo_u32_clear
2000cbe8 l     F actors_code_section	000000a0 fifo_u32_read_1
2000cc88 l     F actors_code_section	00000084 fifo_u32_write_1
2000cd0c l     F actors_code_section	00000080 fifo_u64_has_tokens
2000cd8c l     F actors_code_section	00000064 fifo_u64_get_num_tokens
2000cdf0 l     F actors_code_section	000000b4 fifo_u64_has_room
2000cea4 l     F actors_code_section	000000b8 fifo_u64_get_room
2000cf5c l     F actors_code_section	00000084 fifo_u64_clear
2000cfe0 l     F actors_code_section	000000b4 fifo_u64_read_1
2000d094 l     F actors_code_section	00000090 fifo_u64_write_1
2000d124 l     F actors_code_section	00000080 fifo_float_has_tokens
2000d1a4 l     F actors_code_section	00000064 fifo_float_get_num_tokens
2000d208 l     F actors_code_section	000000b4 fifo_float_has_room
2000d2bc l     F actors_code_section	000000b8 fifo_float_get_room
2000d374 l     F actors_code_section	00000084 fifo_float_clear
2000d3f8 l     F actors_code_section	000000a0 fifo_float_read_1
2000d498 l     F actors_code_section	00000084 fifo_float_write_1
20050890 l     O actors_code_section	00000014 fifo_0
200508a4 l     O actors_code_section	00000014 fifo_1
200508b8 l     O actors_code_section	00000014 fifo_2
200508cc l     O actors_code_section	00000014 fifo_3
200508e0 l     O actors_code_section	00000014 fifo_4
200508f4 l     O actors_code_section	00000014 fifo_5
20050908 l     O actors_code_section	00000014 fifo_6
2005091c l     O actors_code_section	00000014 fifo_7
20050930 l     O actors_code_section	00000014 fifo_8
20050944 l     O actors_code_section	00000014 fifo_9
20050958 l     O actors_code_section	00000014 fifo_10
2005096c l     O actors_code_section	00000014 fifo_11
20050980 l     O actors_code_section	00000014 fifo_12
20050994 l     O actors_code_section	00000014 fifo_13
200509a8 l     O actors_code_section	00000014 fifo_14
200509bc l     O actors_code_section	00000014 fifo_15
200509d0 l     O actors_code_section	00000014 fifo_16
200509e4 l     O actors_code_section	00000014 fifo_17
200509f8 l     O actors_code_section	00000014 fifo_18
20050a0c l     O actors_code_section	00000014 fifo_19
20050a20 l     O actors_code_section	00000014 fifo_20
20050a34 l     O actors_code_section	00000014 fifo_21
20050a48 l     O actors_code_section	00000014 fifo_22
20050a5c l     O actors_code_section	00000014 fifo_23
20050a70 l     O actors_code_section	00000014 fifo_24
20050a84 l     O actors_code_section	00000014 fifo_25
20050a98 l     O actors_code_section	00000014 fifo_26
20050aac l     O actors_code_section	00000014 fifo_27
20050ac0 l     O actors_code_section	00000014 fifo_28
20050ad4 l     O actors_code_section	00000014 fifo_29
20050ae8 l     O actors_code_section	00000014 fifo_30
20050afc l     O actors_code_section	00000014 fifo_31
000008bc l     O .data	00000004 source_O
000008c0 l     O .data	00000004 decoder_parser_parseheaders_BYTE
000008c4 l     O .data	00000004 decoder_merger_YUV
000008c8 l     O .data	00000004 display_B
000008cc l     O .data	00000004 decoder_parser_parseheaders_QP
000008d0 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QP
000008d4 l     O .data	00000004 decoder_parser_parseheaders_HEIGHT
000008d8 l     O .data	00000004 display_HEIGHT
000008dc l     O .data	00000004 decoder_parser_parseheaders_RUN
000008e0 l     O .data	00000004 decoder_parser_blkexp_RUN
000008e4 l     O .data	00000004 decoder_parser_parseheaders_MV
000008e8 l     O .data	00000004 decoder_parser_mvrecon_MVIN
000008ec l     O .data	00000004 decoder_parser_parseheaders_WIDTH
000008f0 l     O .data	00000004 display_WIDTH
000008f4 l     O .data	00000004 decoder_parser_parseheaders_LAST
000008f8 l     O .data	00000004 decoder_parser_blkexp_LAST
000008fc l     O .data	00000004 decoder_parser_parseheaders_BTYPE
00000900 l     O .data	00000004 decoder_parser_mvseq_BTYPE
00000904 l     O .data	00000004 decoder_parser_mvrecon_BTYPE
00000908 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
0000090c l     O .data	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
00000910 l     O .data	00000004 decoder_motion_add_BTYPE
00000914 l     O .data	00000004 decoder_motion_framebuf_BTYPE
00000918 l     O .data	00000004 decoder_parser_parseheaders_VALUE
0000091c l     O .data	00000004 decoder_parser_blkexp_VALUE
00000920 l     O .data	00000004 decoder_parser_mvseq_A
00000924 l     O .data	00000004 decoder_parser_mvrecon_A
00000928 l     O .data	00000004 decoder_parser_blkexp_QFS
0000092c l     O .data	00000004 decoder_texture_DCsplit_IN
00000930 l     O .data	00000004 decoder_parser_mvrecon_MV
00000934 l     O .data	00000004 decoder_motion_framebuf_MV
00000938 l     O .data	00000004 decoder_texture_DCsplit_AC
0000093c l     O .data	00000004 decoder_texture_IS_QFS_AC
00000940 l     O .data	00000004 decoder_texture_DCsplit_DC
00000944 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
00000948 l     O .data	00000004 decoder_texture_IS_PQF_AC
0000094c l     O .data	00000004 decoder_texture_IAP_PQF_AC
00000950 l     O .data	00000004 decoder_texture_IAP_QF_AC
00000954 l     O .data	00000004 decoder_texture_IQ_AC
00000958 l     O .data	00000004 decoder_texture_IQ_OUT
0000095c l     O .data	00000004 decoder_texture_idct2d_IN
00000960 l     O .data	00000004 decoder_texture_idct2d_OUT
00000964 l     O .data	00000004 decoder_motion_add_TEX
00000968 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_B
0000096c l     O .data	00000004 decoder_texture_DCReconstruction_invpred_B
00000970 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_A
00000974 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_A
00000978 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_C
0000097c l     O .data	00000004 decoder_texture_DCReconstruction_invpred_C
00000980 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_PTR
00000984 l     O .data	00000004 decoder_texture_IAP_PTR
00000988 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
0000098c l     O .data	00000004 decoder_texture_IQ_DC
00000990 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_MODE
00000994 l     O .data	00000004 decoder_texture_IS_AC_PRED_DIR
00000998 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
0000099c l     O .data	00000004 decoder_texture_idct2d_SIGNED
000009a0 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
000009a4 l     O .data	00000004 decoder_texture_IAP_AC_PRED_DIR
000009a8 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QUANT
000009ac l     O .data	00000004 decoder_texture_IQ_QP
000009b0 l     O .data	00000004 decoder_motion_interpolation_MOT
000009b4 l     O .data	00000004 decoder_motion_add_MOT
000009b8 l     O .data	00000004 decoder_motion_add_VID
000009bc l     O .data	00000004 decoder_motion_framebuf_WD
000009c0 l     O .data	00000004 decoder_merger_YUV_i
000009c4 l     O .data	00000004 decoder_motion_framebuf_RD
000009c8 l     O .data	00000004 decoder_motion_interpolation_RD
000009cc l     O .data	00000004 decoder_motion_framebuf_halfpel
000009d0 l     O .data	00000004 decoder_motion_interpolation_halfpel
20052cd8 l     O actors_code_section	00000004 index_MOT
20052cdc l     O actors_code_section	00000004 numTokens_MOT
20052ce0 l     O actors_code_section	00000004 index_TEX
20052ce4 l     O actors_code_section	00000004 numTokens_TEX
20052ce8 l     O actors_code_section	00000004 index_BTYPE
20052cec l     O actors_code_section	00000004 numTokens_BTYPE
20052cf0 l     O actors_code_section	00000004 index_VID
20052cf4 l     O actors_code_section	00000004 numFree_VID
20050b10 l     O actors_code_section	00000001 needInit
000009d4 l     O .data	00000018 stateNames
20052cf8 l     O actors_code_section	00000004 _FSM_state
2000d51c l     F actors_code_section	000000a0 read_MOT
2000d5bc l     F actors_code_section	00000054 read_end_MOT
2000d610 l     F actors_code_section	000000a0 read_TEX
2000d6b0 l     F actors_code_section	00000054 read_end_TEX
2000d704 l     F actors_code_section	000000a0 read_BTYPE
2000d7a4 l     F actors_code_section	00000058 read_end_BTYPE
2000d7fc l     F actors_code_section	000000a0 write_VID
2000d89c l     F actors_code_section	00000054 write_end_VID
2000d8f0 l     F actors_code_section	00000090 isSchedulable_cmd_newVop
2000d980 l     F actors_code_section	000000ac cmd_newVop
2000da2c l     F actors_code_section	00000090 isSchedulable_cmd_textureOnly
2000dabc l     F actors_code_section	000000ac cmd_textureOnly
2000db68 l     F actors_code_section	00000090 isSchedulable_cmd_motionOnly
2000dbf8 l     F actors_code_section	000000ac cmd_motionOnly
2000dca4 l     F actors_code_section	00000040 isSchedulable_cmd_other
2000dce4 l     F actors_code_section	000000ac cmd_other
2000dd90 l     F actors_code_section	00000040 isSchedulable_texture
2000ddd0 l     F actors_code_section	00000150 texture
2000df20 l     F actors_code_section	00000040 isSchedulable_motion
2000df60 l     F actors_code_section	00000150 motion
2000e0b0 l     F actors_code_section	00000040 isSchedulable_combine
2000e0f0 l     F actors_code_section	00000274 combine
20046cdc l       actors_code_section	00000000 $L235
2000e47c l       actors_code_section	00000000 $L274
2000e650 l       actors_code_section	00000000 $L275
2000e788 l       actors_code_section	00000000 $L276
2000e898 l       actors_code_section	00000000 $L277
2000e924 l       actors_code_section	00000000 $L278
2000e9b0 l       actors_code_section	00000000 $L273
00000000 l    df *ABS*	00000000 decoder_motion_framebuf.o
2000eb20 l     F actors_code_section	00000080 fifo_i8_has_tokens
2000eba0 l     F actors_code_section	00000064 fifo_i8_get_num_tokens
2000ec04 l     F actors_code_section	000000b4 fifo_i8_has_room
2000ecb8 l     F actors_code_section	000000b8 fifo_i8_get_room
2000ed70 l     F actors_code_section	00000084 fifo_i8_clear
2000edf4 l     F actors_code_section	000000a0 fifo_i8_read_1
2000ee94 l     F actors_code_section	00000084 fifo_i8_write_1
2000ef18 l     F actors_code_section	00000080 fifo_i16_has_tokens
2000ef98 l     F actors_code_section	00000064 fifo_i16_get_num_tokens
2000effc l     F actors_code_section	000000b4 fifo_i16_has_room
2000f0b0 l     F actors_code_section	000000b8 fifo_i16_get_room
2000f168 l     F actors_code_section	00000084 fifo_i16_clear
2000f1ec l     F actors_code_section	000000a4 fifo_i16_read_1
2000f290 l     F actors_code_section	00000088 fifo_i16_write_1
2000f318 l     F actors_code_section	00000080 fifo_i32_has_tokens
2000f398 l     F actors_code_section	00000064 fifo_i32_get_num_tokens
2000f3fc l     F actors_code_section	000000b4 fifo_i32_has_room
2000f4b0 l     F actors_code_section	000000b8 fifo_i32_get_room
2000f568 l     F actors_code_section	00000084 fifo_i32_clear
2000f5ec l     F actors_code_section	000000a0 fifo_i32_read_1
2000f68c l     F actors_code_section	00000084 fifo_i32_write_1
2000f710 l     F actors_code_section	00000080 fifo_i64_has_tokens
2000f790 l     F actors_code_section	00000064 fifo_i64_get_num_tokens
2000f7f4 l     F actors_code_section	000000b4 fifo_i64_has_room
2000f8a8 l     F actors_code_section	000000b8 fifo_i64_get_room
2000f960 l     F actors_code_section	00000084 fifo_i64_clear
2000f9e4 l     F actors_code_section	000000b4 fifo_i64_read_1
2000fa98 l     F actors_code_section	00000090 fifo_i64_write_1
2000fb28 l     F actors_code_section	00000080 fifo_u8_has_tokens
2000fba8 l     F actors_code_section	00000064 fifo_u8_get_num_tokens
2000fc0c l     F actors_code_section	000000b4 fifo_u8_has_room
2000fcc0 l     F actors_code_section	000000b8 fifo_u8_get_room
2000fd78 l     F actors_code_section	00000084 fifo_u8_clear
2000fdfc l     F actors_code_section	0000009c fifo_u8_read_1
2000fe98 l     F actors_code_section	00000084 fifo_u8_write_1
2000ff1c l     F actors_code_section	00000080 fifo_u16_has_tokens
2000ff9c l     F actors_code_section	00000064 fifo_u16_get_num_tokens
20010000 l     F actors_code_section	000000b4 fifo_u16_has_room
200100b4 l     F actors_code_section	000000b8 fifo_u16_get_room
2001016c l     F actors_code_section	00000084 fifo_u16_clear
200101f0 l     F actors_code_section	000000a0 fifo_u16_read_1
20010290 l     F actors_code_section	00000088 fifo_u16_write_1
20010318 l     F actors_code_section	00000080 fifo_u32_has_tokens
20010398 l     F actors_code_section	00000064 fifo_u32_get_num_tokens
200103fc l     F actors_code_section	000000b4 fifo_u32_has_room
200104b0 l     F actors_code_section	000000b8 fifo_u32_get_room
20010568 l     F actors_code_section	00000084 fifo_u32_clear
200105ec l     F actors_code_section	000000a0 fifo_u32_read_1
2001068c l     F actors_code_section	00000084 fifo_u32_write_1
20010710 l     F actors_code_section	00000080 fifo_u64_has_tokens
20010790 l     F actors_code_section	00000064 fifo_u64_get_num_tokens
200107f4 l     F actors_code_section	000000b4 fifo_u64_has_room
200108a8 l     F actors_code_section	000000b8 fifo_u64_get_room
20010960 l     F actors_code_section	00000084 fifo_u64_clear
200109e4 l     F actors_code_section	000000b4 fifo_u64_read_1
20010a98 l     F actors_code_section	00000090 fifo_u64_write_1
20010b28 l     F actors_code_section	00000080 fifo_float_has_tokens
20010ba8 l     F actors_code_section	00000064 fifo_float_get_num_tokens
20010c0c l     F actors_code_section	000000b4 fifo_float_has_room
20010cc0 l     F actors_code_section	000000b8 fifo_float_get_room
20010d78 l     F actors_code_section	00000084 fifo_float_clear
20010dfc l     F actors_code_section	000000a0 fifo_float_read_1
20010e9c l     F actors_code_section	00000084 fifo_float_write_1
20050b14 l     O actors_code_section	00000014 fifo_0
20050b28 l     O actors_code_section	00000014 fifo_1
20050b3c l     O actors_code_section	00000014 fifo_2
20050b50 l     O actors_code_section	00000014 fifo_3
20050b64 l     O actors_code_section	00000014 fifo_4
20050b78 l     O actors_code_section	00000014 fifo_5
20050b8c l     O actors_code_section	00000014 fifo_6
20050ba0 l     O actors_code_section	00000014 fifo_7
20050bb4 l     O actors_code_section	00000014 fifo_8
20050bc8 l     O actors_code_section	00000014 fifo_9
20050bdc l     O actors_code_section	00000014 fifo_10
20050bf0 l     O actors_code_section	00000014 fifo_11
20050c04 l     O actors_code_section	00000014 fifo_12
20050c18 l     O actors_code_section	00000014 fifo_13
20050c2c l     O actors_code_section	00000014 fifo_14
20050c40 l     O actors_code_section	00000014 fifo_15
20050c54 l     O actors_code_section	00000014 fifo_16
20050c68 l     O actors_code_section	00000014 fifo_17
20050c7c l     O actors_code_section	00000014 fifo_18
20050c90 l     O actors_code_section	00000014 fifo_19
20050ca4 l     O actors_code_section	00000014 fifo_20
20050cb8 l     O actors_code_section	00000014 fifo_21
20050ccc l     O actors_code_section	00000014 fifo_22
20050ce0 l     O actors_code_section	00000014 fifo_23
20050cf4 l     O actors_code_section	00000014 fifo_24
20050d08 l     O actors_code_section	00000014 fifo_25
20050d1c l     O actors_code_section	00000014 fifo_26
20050d30 l     O actors_code_section	00000014 fifo_27
20050d44 l     O actors_code_section	00000014 fifo_28
20050d58 l     O actors_code_section	00000014 fifo_29
20050d6c l     O actors_code_section	00000014 fifo_30
20050d80 l     O actors_code_section	00000014 fifo_31
000009ec l     O .data	00000004 source_O
000009f0 l     O .data	00000004 decoder_parser_parseheaders_BYTE
000009f4 l     O .data	00000004 decoder_merger_YUV
000009f8 l     O .data	00000004 display_B
000009fc l     O .data	00000004 decoder_parser_parseheaders_QP
00000a00 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QP
00000a04 l     O .data	00000004 decoder_parser_parseheaders_HEIGHT
00000a08 l     O .data	00000004 display_HEIGHT
00000a0c l     O .data	00000004 decoder_parser_parseheaders_RUN
00000a10 l     O .data	00000004 decoder_parser_blkexp_RUN
00000a14 l     O .data	00000004 decoder_parser_parseheaders_MV
00000a18 l     O .data	00000004 decoder_parser_mvrecon_MVIN
00000a1c l     O .data	00000004 decoder_parser_parseheaders_WIDTH
00000a20 l     O .data	00000004 display_WIDTH
00000a24 l     O .data	00000004 decoder_parser_parseheaders_LAST
00000a28 l     O .data	00000004 decoder_parser_blkexp_LAST
00000a2c l     O .data	00000004 decoder_parser_parseheaders_BTYPE
00000a30 l     O .data	00000004 decoder_parser_mvseq_BTYPE
00000a34 l     O .data	00000004 decoder_parser_mvrecon_BTYPE
00000a38 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
00000a3c l     O .data	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
00000a40 l     O .data	00000004 decoder_motion_add_BTYPE
00000a44 l     O .data	00000004 decoder_motion_framebuf_BTYPE
00000a48 l     O .data	00000004 decoder_parser_parseheaders_VALUE
00000a4c l     O .data	00000004 decoder_parser_blkexp_VALUE
00000a50 l     O .data	00000004 decoder_parser_mvseq_A
00000a54 l     O .data	00000004 decoder_parser_mvrecon_A
00000a58 l     O .data	00000004 decoder_parser_blkexp_QFS
00000a5c l     O .data	00000004 decoder_texture_DCsplit_IN
00000a60 l     O .data	00000004 decoder_parser_mvrecon_MV
00000a64 l     O .data	00000004 decoder_motion_framebuf_MV
00000a68 l     O .data	00000004 decoder_texture_DCsplit_AC
00000a6c l     O .data	00000004 decoder_texture_IS_QFS_AC
00000a70 l     O .data	00000004 decoder_texture_DCsplit_DC
00000a74 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
00000a78 l     O .data	00000004 decoder_texture_IS_PQF_AC
00000a7c l     O .data	00000004 decoder_texture_IAP_PQF_AC
00000a80 l     O .data	00000004 decoder_texture_IAP_QF_AC
00000a84 l     O .data	00000004 decoder_texture_IQ_AC
00000a88 l     O .data	00000004 decoder_texture_IQ_OUT
00000a8c l     O .data	00000004 decoder_texture_idct2d_IN
00000a90 l     O .data	00000004 decoder_texture_idct2d_OUT
00000a94 l     O .data	00000004 decoder_motion_add_TEX
00000a98 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_B
00000a9c l     O .data	00000004 decoder_texture_DCReconstruction_invpred_B
00000aa0 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_A
00000aa4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_A
00000aa8 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_C
00000aac l     O .data	00000004 decoder_texture_DCReconstruction_invpred_C
00000ab0 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_PTR
00000ab4 l     O .data	00000004 decoder_texture_IAP_PTR
00000ab8 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
00000abc l     O .data	00000004 decoder_texture_IQ_DC
00000ac0 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_MODE
00000ac4 l     O .data	00000004 decoder_texture_IS_AC_PRED_DIR
00000ac8 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
00000acc l     O .data	00000004 decoder_texture_idct2d_SIGNED
00000ad0 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
00000ad4 l     O .data	00000004 decoder_texture_IAP_AC_PRED_DIR
00000ad8 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QUANT
00000adc l     O .data	00000004 decoder_texture_IQ_QP
00000ae0 l     O .data	00000004 decoder_motion_interpolation_MOT
00000ae4 l     O .data	00000004 decoder_motion_add_MOT
00000ae8 l     O .data	00000004 decoder_motion_add_VID
00000aec l     O .data	00000004 decoder_motion_framebuf_WD
00000af0 l     O .data	00000004 decoder_merger_YUV_i
00000af4 l     O .data	00000004 decoder_motion_framebuf_RD
00000af8 l     O .data	00000004 decoder_motion_interpolation_RD
00000afc l     O .data	00000004 decoder_motion_framebuf_halfpel
00000b00 l     O .data	00000004 decoder_motion_interpolation_halfpel
20052cfc l     O actors_code_section	00000004 index_MV
20052d00 l     O actors_code_section	00000004 numTokens_MV
20052d04 l     O actors_code_section	00000004 index_BTYPE
20052d08 l     O actors_code_section	00000004 numTokens_BTYPE
20052d0c l     O actors_code_section	00000004 index_WD
20052d10 l     O actors_code_section	00000004 numTokens_WD
20052d14 l     O actors_code_section	00000004 index_halfpel
20052d18 l     O actors_code_section	00000004 numFree_halfpel
20052d1c l     O actors_code_section	00000004 index_RD
20052d20 l     O actors_code_section	00000004 numFree_RD
20052d24 l     O actors_code_section	00010800 frameBuffer
20063524 l     O actors_code_section	00004200 frameBuffer_U
20067724 l     O actors_code_section	00004200 frameBuffer_V
2006b924 l     O actors_code_section	00000004 vop_width
2006b928 l     O actors_code_section	00000004 vop_height
2006b92c l     O actors_code_section	00000004 vop_width_in_samples
2006b930 l     O actors_code_section	00000004 vop_height_in_samples
2006b934 l     O actors_code_section	00000004 vop_rounding_mode
2006b938 l     O actors_code_section	00000004 max_outstanding_writes
20050d94 l     O actors_code_section	00000004 start_of_frame
2006b93c l     O actors_code_section	00000004 vop_width_in_samples_U
2006b940 l     O actors_code_section	00000004 vop_height_in_samples_U
20050d98 l     O actors_code_section	00000004 start_of_frame_U
2006b944 l     O actors_code_section	00000002 mvx
2006b946 l     O actors_code_section	00000002 mvy
2006b948 l     O actors_code_section	00000004 mbx_read
2006b94c l     O actors_code_section	00000004 mby_read
2006b950 l     O actors_code_section	00000004 outstanding_writes
2006b954 l     O actors_code_section	00000004 mb_write_ptr
2006b958 l     O actors_code_section	00000004 mbx_write
2006b95c l     O actors_code_section	00000004 mb_write_ptr_chroma
2006b960 l     O actors_code_section	00000004 comp_so_far
20050d9c l     O actors_code_section	00000001 needInit
00000b04 l     O .data	00000010 stateNames
2006b964 l     O actors_code_section	00000004 _FSM_state
20010f20 l     F actors_code_section	000000a0 read_MV
20010fc0 l     F actors_code_section	00000054 read_end_MV
20011014 l     F actors_code_section	000000a0 read_BTYPE
200110b4 l     F actors_code_section	00000058 read_end_BTYPE
2001110c l     F actors_code_section	000000a0 read_WD
200111ac l     F actors_code_section	00000054 read_end_WD
20011200 l     F actors_code_section	000000a0 write_halfpel
200112a0 l     F actors_code_section	00000054 write_end_halfpel
200112f4 l     F actors_code_section	000000a0 write_RD
20011394 l     F actors_code_section	00000054 write_end_RD
200113e8 l     F actors_code_section	00000134 advance_block
2001151c l     F actors_code_section	00000090 isSchedulable_cmd_newVop
200115ac l     F actors_code_section	000000f4 cmd_newVop
200116a0 l     F actors_code_section	00000040 isSchedulable_get_w_h
200116e0 l     F actors_code_section	0000043c get_w_h
20011b1c l     F actors_code_section	00000090 isSchedulable_cmd_noMotion
20011bac l     F actors_code_section	000000bc cmd_noMotion
20011c68 l     F actors_code_section	00000090 isSchedulable_cmd_motion
20011cf8 l     F actors_code_section	000000ac cmd_motion
20011da4 l     F actors_code_section	00000040 isSchedulable_read_mv
20011de4 l     F actors_code_section	000001e0 read_mv
20011fc4 l     F actors_code_section	00000040 isSchedulable_cmd_neither
20012004 l     F actors_code_section	0000012c cmd_neither
20012130 l     F actors_code_section	00000098 isSchedulable_read_fb_Y
200121c8 l     F actors_code_section	00000560 read_fb_Y
20012728 l     F actors_code_section	00000094 isSchedulable_read_fb_U
200127bc l     F actors_code_section	00000510 read_fb_U
20012ccc l     F actors_code_section	00000078 isSchedulable_read_fb_V
20012d44 l     F actors_code_section	00000510 read_fb_V
20013254 l     F actors_code_section	00000068 isSchedulable_untagged_0
200132bc l     F actors_code_section	000005e8 untagged_0
00000000 l    df *ABS*	00000000 decoder_motion_interpolation.o
20014074 l     F actors_code_section	00000080 fifo_i8_has_tokens
200140f4 l     F actors_code_section	00000064 fifo_i8_get_num_tokens
20014158 l     F actors_code_section	000000b4 fifo_i8_has_room
2001420c l     F actors_code_section	000000b8 fifo_i8_get_room
200142c4 l     F actors_code_section	00000084 fifo_i8_clear
20014348 l     F actors_code_section	000000a0 fifo_i8_read_1
200143e8 l     F actors_code_section	00000084 fifo_i8_write_1
2001446c l     F actors_code_section	00000080 fifo_i16_has_tokens
200144ec l     F actors_code_section	00000064 fifo_i16_get_num_tokens
20014550 l     F actors_code_section	000000b4 fifo_i16_has_room
20014604 l     F actors_code_section	000000b8 fifo_i16_get_room
200146bc l     F actors_code_section	00000084 fifo_i16_clear
20014740 l     F actors_code_section	000000a4 fifo_i16_read_1
200147e4 l     F actors_code_section	00000088 fifo_i16_write_1
2001486c l     F actors_code_section	00000080 fifo_i32_has_tokens
200148ec l     F actors_code_section	00000064 fifo_i32_get_num_tokens
20014950 l     F actors_code_section	000000b4 fifo_i32_has_room
20014a04 l     F actors_code_section	000000b8 fifo_i32_get_room
20014abc l     F actors_code_section	00000084 fifo_i32_clear
20014b40 l     F actors_code_section	000000a0 fifo_i32_read_1
20014be0 l     F actors_code_section	00000084 fifo_i32_write_1
20014c64 l     F actors_code_section	00000080 fifo_i64_has_tokens
20014ce4 l     F actors_code_section	00000064 fifo_i64_get_num_tokens
20014d48 l     F actors_code_section	000000b4 fifo_i64_has_room
20014dfc l     F actors_code_section	000000b8 fifo_i64_get_room
20014eb4 l     F actors_code_section	00000084 fifo_i64_clear
20014f38 l     F actors_code_section	000000b4 fifo_i64_read_1
20014fec l     F actors_code_section	00000090 fifo_i64_write_1
2001507c l     F actors_code_section	00000080 fifo_u8_has_tokens
200150fc l     F actors_code_section	00000064 fifo_u8_get_num_tokens
20015160 l     F actors_code_section	000000b4 fifo_u8_has_room
20015214 l     F actors_code_section	000000b8 fifo_u8_get_room
200152cc l     F actors_code_section	00000084 fifo_u8_clear
20015350 l     F actors_code_section	0000009c fifo_u8_read_1
200153ec l     F actors_code_section	00000084 fifo_u8_write_1
20015470 l     F actors_code_section	00000080 fifo_u16_has_tokens
200154f0 l     F actors_code_section	00000064 fifo_u16_get_num_tokens
20015554 l     F actors_code_section	000000b4 fifo_u16_has_room
20015608 l     F actors_code_section	000000b8 fifo_u16_get_room
200156c0 l     F actors_code_section	00000084 fifo_u16_clear
20015744 l     F actors_code_section	000000a0 fifo_u16_read_1
200157e4 l     F actors_code_section	00000088 fifo_u16_write_1
2001586c l     F actors_code_section	00000080 fifo_u32_has_tokens
200158ec l     F actors_code_section	00000064 fifo_u32_get_num_tokens
20015950 l     F actors_code_section	000000b4 fifo_u32_has_room
20015a04 l     F actors_code_section	000000b8 fifo_u32_get_room
20015abc l     F actors_code_section	00000084 fifo_u32_clear
20015b40 l     F actors_code_section	000000a0 fifo_u32_read_1
20015be0 l     F actors_code_section	00000084 fifo_u32_write_1
20015c64 l     F actors_code_section	00000080 fifo_u64_has_tokens
20015ce4 l     F actors_code_section	00000064 fifo_u64_get_num_tokens
20015d48 l     F actors_code_section	000000b4 fifo_u64_has_room
20015dfc l     F actors_code_section	000000b8 fifo_u64_get_room
20015eb4 l     F actors_code_section	00000084 fifo_u64_clear
20015f38 l     F actors_code_section	000000b4 fifo_u64_read_1
20015fec l     F actors_code_section	00000090 fifo_u64_write_1
2001607c l     F actors_code_section	00000080 fifo_float_has_tokens
200160fc l     F actors_code_section	00000064 fifo_float_get_num_tokens
20016160 l     F actors_code_section	000000b4 fifo_float_has_room
20016214 l     F actors_code_section	000000b8 fifo_float_get_room
200162cc l     F actors_code_section	00000084 fifo_float_clear
20016350 l     F actors_code_section	000000a0 fifo_float_read_1
200163f0 l     F actors_code_section	00000084 fifo_float_write_1
20050da0 l     O actors_code_section	00000014 fifo_0
20050db4 l     O actors_code_section	00000014 fifo_1
20050dc8 l     O actors_code_section	00000014 fifo_2
20050ddc l     O actors_code_section	00000014 fifo_3
20050df0 l     O actors_code_section	00000014 fifo_4
20050e04 l     O actors_code_section	00000014 fifo_5
20050e18 l     O actors_code_section	00000014 fifo_6
20050e2c l     O actors_code_section	00000014 fifo_7
20050e40 l     O actors_code_section	00000014 fifo_8
20050e54 l     O actors_code_section	00000014 fifo_9
20050e68 l     O actors_code_section	00000014 fifo_10
20050e7c l     O actors_code_section	00000014 fifo_11
20050e90 l     O actors_code_section	00000014 fifo_12
20050ea4 l     O actors_code_section	00000014 fifo_13
20050eb8 l     O actors_code_section	00000014 fifo_14
20050ecc l     O actors_code_section	00000014 fifo_15
20050ee0 l     O actors_code_section	00000014 fifo_16
20050ef4 l     O actors_code_section	00000014 fifo_17
20050f08 l     O actors_code_section	00000014 fifo_18
20050f1c l     O actors_code_section	00000014 fifo_19
20050f30 l     O actors_code_section	00000014 fifo_20
20050f44 l     O actors_code_section	00000014 fifo_21
20050f58 l     O actors_code_section	00000014 fifo_22
20050f6c l     O actors_code_section	00000014 fifo_23
20050f80 l     O actors_code_section	00000014 fifo_24
20050f94 l     O actors_code_section	00000014 fifo_25
20050fa8 l     O actors_code_section	00000014 fifo_26
20050fbc l     O actors_code_section	00000014 fifo_27
20050fd0 l     O actors_code_section	00000014 fifo_28
20050fe4 l     O actors_code_section	00000014 fifo_29
20050ff8 l     O actors_code_section	00000014 fifo_30
2005100c l     O actors_code_section	00000014 fifo_31
00000b14 l     O .data	00000004 source_O
00000b18 l     O .data	00000004 decoder_parser_parseheaders_BYTE
00000b1c l     O .data	00000004 decoder_merger_YUV
00000b20 l     O .data	00000004 display_B
00000b24 l     O .data	00000004 decoder_parser_parseheaders_QP
00000b28 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QP
00000b2c l     O .data	00000004 decoder_parser_parseheaders_HEIGHT
00000b30 l     O .data	00000004 display_HEIGHT
00000b34 l     O .data	00000004 decoder_parser_parseheaders_RUN
00000b38 l     O .data	00000004 decoder_parser_blkexp_RUN
00000b3c l     O .data	00000004 decoder_parser_parseheaders_MV
00000b40 l     O .data	00000004 decoder_parser_mvrecon_MVIN
00000b44 l     O .data	00000004 decoder_parser_parseheaders_WIDTH
00000b48 l     O .data	00000004 display_WIDTH
00000b4c l     O .data	00000004 decoder_parser_parseheaders_LAST
00000b50 l     O .data	00000004 decoder_parser_blkexp_LAST
00000b54 l     O .data	00000004 decoder_parser_parseheaders_BTYPE
00000b58 l     O .data	00000004 decoder_parser_mvseq_BTYPE
00000b5c l     O .data	00000004 decoder_parser_mvrecon_BTYPE
00000b60 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
00000b64 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
00000b68 l     O .data	00000004 decoder_motion_add_BTYPE
00000b6c l     O .data	00000004 decoder_motion_framebuf_BTYPE
00000b70 l     O .data	00000004 decoder_parser_parseheaders_VALUE
00000b74 l     O .data	00000004 decoder_parser_blkexp_VALUE
00000b78 l     O .data	00000004 decoder_parser_mvseq_A
00000b7c l     O .data	00000004 decoder_parser_mvrecon_A
00000b80 l     O .data	00000004 decoder_parser_blkexp_QFS
00000b84 l     O .data	00000004 decoder_texture_DCsplit_IN
00000b88 l     O .data	00000004 decoder_parser_mvrecon_MV
00000b8c l     O .data	00000004 decoder_motion_framebuf_MV
00000b90 l     O .data	00000004 decoder_texture_DCsplit_AC
00000b94 l     O .data	00000004 decoder_texture_IS_QFS_AC
00000b98 l     O .data	00000004 decoder_texture_DCsplit_DC
00000b9c l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
00000ba0 l     O .data	00000004 decoder_texture_IS_PQF_AC
00000ba4 l     O .data	00000004 decoder_texture_IAP_PQF_AC
00000ba8 l     O .data	00000004 decoder_texture_IAP_QF_AC
00000bac l     O .data	00000004 decoder_texture_IQ_AC
00000bb0 l     O .data	00000004 decoder_texture_IQ_OUT
00000bb4 l     O .data	00000004 decoder_texture_idct2d_IN
00000bb8 l     O .data	00000004 decoder_texture_idct2d_OUT
00000bbc l     O .data	00000004 decoder_motion_add_TEX
00000bc0 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_B
00000bc4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_B
00000bc8 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_A
00000bcc l     O .data	00000004 decoder_texture_DCReconstruction_invpred_A
00000bd0 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_C
00000bd4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_C
00000bd8 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_PTR
00000bdc l     O .data	00000004 decoder_texture_IAP_PTR
00000be0 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
00000be4 l     O .data	00000004 decoder_texture_IQ_DC
00000be8 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_MODE
00000bec l     O .data	00000004 decoder_texture_IS_AC_PRED_DIR
00000bf0 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
00000bf4 l     O .data	00000004 decoder_texture_idct2d_SIGNED
00000bf8 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
00000bfc l     O .data	00000004 decoder_texture_IAP_AC_PRED_DIR
00000c00 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QUANT
00000c04 l     O .data	00000004 decoder_texture_IQ_QP
00000c08 l     O .data	00000004 decoder_motion_interpolation_MOT
00000c0c l     O .data	00000004 decoder_motion_add_MOT
00000c10 l     O .data	00000004 decoder_motion_add_VID
00000c14 l     O .data	00000004 decoder_motion_framebuf_WD
00000c18 l     O .data	00000004 decoder_merger_YUV_i
00000c1c l     O .data	00000004 decoder_motion_framebuf_RD
00000c20 l     O .data	00000004 decoder_motion_interpolation_RD
00000c24 l     O .data	00000004 decoder_motion_framebuf_halfpel
00000c28 l     O .data	00000004 decoder_motion_interpolation_halfpel
2006b968 l     O actors_code_section	00000004 index_RD
2006b96c l     O actors_code_section	00000004 numTokens_RD
2006b970 l     O actors_code_section	00000004 index_halfpel
2006b974 l     O actors_code_section	00000004 numTokens_halfpel
2006b978 l     O actors_code_section	00000004 index_MOT
2006b97c l     O actors_code_section	00000004 numFree_MOT
20051020 l     O actors_code_section	00000001 needInit
20016474 l     F actors_code_section	000000a0 read_RD
20016514 l     F actors_code_section	00000054 read_end_RD
20016568 l     F actors_code_section	000000a0 read_halfpel
20016608 l     F actors_code_section	00000054 read_end_halfpel
2001665c l     F actors_code_section	000000a0 write_MOT
200166fc l     F actors_code_section	00000054 write_end_MOT
20016750 l     F actors_code_section	00000084 isSchedulable_none
200167d4 l     F actors_code_section	00000200 none
200169d4 l     F actors_code_section	00000084 isSchedulable_row
20016a58 l     F actors_code_section	00000284 row
20016cdc l     F actors_code_section	00000084 isSchedulable_col
20016d60 l     F actors_code_section	00000284 col
20016fe4 l     F actors_code_section	00000040 isSchedulable_both
20017024 l     F actors_code_section	00000334 both
00000000 l    df *ABS*	00000000 decoder_parser_blkexp.o
20017784 l     F actors_code_section	00000080 fifo_i8_has_tokens
20017804 l     F actors_code_section	00000064 fifo_i8_get_num_tokens
20017868 l     F actors_code_section	000000b4 fifo_i8_has_room
2001791c l     F actors_code_section	000000b8 fifo_i8_get_room
200179d4 l     F actors_code_section	00000084 fifo_i8_clear
20017a58 l     F actors_code_section	000000a0 fifo_i8_read_1
20017af8 l     F actors_code_section	00000084 fifo_i8_write_1
20017b7c l     F actors_code_section	00000080 fifo_i16_has_tokens
20017bfc l     F actors_code_section	00000064 fifo_i16_get_num_tokens
20017c60 l     F actors_code_section	000000b4 fifo_i16_has_room
20017d14 l     F actors_code_section	000000b8 fifo_i16_get_room
20017dcc l     F actors_code_section	00000084 fifo_i16_clear
20017e50 l     F actors_code_section	000000a4 fifo_i16_read_1
20017ef4 l     F actors_code_section	00000088 fifo_i16_write_1
20017f7c l     F actors_code_section	00000080 fifo_i32_has_tokens
20017ffc l     F actors_code_section	00000064 fifo_i32_get_num_tokens
20018060 l     F actors_code_section	000000b4 fifo_i32_has_room
20018114 l     F actors_code_section	000000b8 fifo_i32_get_room
200181cc l     F actors_code_section	00000084 fifo_i32_clear
20018250 l     F actors_code_section	000000a0 fifo_i32_read_1
200182f0 l     F actors_code_section	00000084 fifo_i32_write_1
20018374 l     F actors_code_section	00000080 fifo_i64_has_tokens
200183f4 l     F actors_code_section	00000064 fifo_i64_get_num_tokens
20018458 l     F actors_code_section	000000b4 fifo_i64_has_room
2001850c l     F actors_code_section	000000b8 fifo_i64_get_room
200185c4 l     F actors_code_section	00000084 fifo_i64_clear
20018648 l     F actors_code_section	000000b4 fifo_i64_read_1
200186fc l     F actors_code_section	00000090 fifo_i64_write_1
2001878c l     F actors_code_section	00000080 fifo_u8_has_tokens
2001880c l     F actors_code_section	00000064 fifo_u8_get_num_tokens
20018870 l     F actors_code_section	000000b4 fifo_u8_has_room
20018924 l     F actors_code_section	000000b8 fifo_u8_get_room
200189dc l     F actors_code_section	00000084 fifo_u8_clear
20018a60 l     F actors_code_section	0000009c fifo_u8_read_1
20018afc l     F actors_code_section	00000084 fifo_u8_write_1
20018b80 l     F actors_code_section	00000080 fifo_u16_has_tokens
20018c00 l     F actors_code_section	00000064 fifo_u16_get_num_tokens
20018c64 l     F actors_code_section	000000b4 fifo_u16_has_room
20018d18 l     F actors_code_section	000000b8 fifo_u16_get_room
20018dd0 l     F actors_code_section	00000084 fifo_u16_clear
20018e54 l     F actors_code_section	000000a0 fifo_u16_read_1
20018ef4 l     F actors_code_section	00000088 fifo_u16_write_1
20018f7c l     F actors_code_section	00000080 fifo_u32_has_tokens
20018ffc l     F actors_code_section	00000064 fifo_u32_get_num_tokens
20019060 l     F actors_code_section	000000b4 fifo_u32_has_room
20019114 l     F actors_code_section	000000b8 fifo_u32_get_room
200191cc l     F actors_code_section	00000084 fifo_u32_clear
20019250 l     F actors_code_section	000000a0 fifo_u32_read_1
200192f0 l     F actors_code_section	00000084 fifo_u32_write_1
20019374 l     F actors_code_section	00000080 fifo_u64_has_tokens
200193f4 l     F actors_code_section	00000064 fifo_u64_get_num_tokens
20019458 l     F actors_code_section	000000b4 fifo_u64_has_room
2001950c l     F actors_code_section	000000b8 fifo_u64_get_room
200195c4 l     F actors_code_section	00000084 fifo_u64_clear
20019648 l     F actors_code_section	000000b4 fifo_u64_read_1
200196fc l     F actors_code_section	00000090 fifo_u64_write_1
2001978c l     F actors_code_section	00000080 fifo_float_has_tokens
2001980c l     F actors_code_section	00000064 fifo_float_get_num_tokens
20019870 l     F actors_code_section	000000b4 fifo_float_has_room
20019924 l     F actors_code_section	000000b8 fifo_float_get_room
200199dc l     F actors_code_section	00000084 fifo_float_clear
20019a60 l     F actors_code_section	000000a0 fifo_float_read_1
20019b00 l     F actors_code_section	00000084 fifo_float_write_1
20051024 l     O actors_code_section	00000014 fifo_0
20051038 l     O actors_code_section	00000014 fifo_1
2005104c l     O actors_code_section	00000014 fifo_2
20051060 l     O actors_code_section	00000014 fifo_3
20051074 l     O actors_code_section	00000014 fifo_4
20051088 l     O actors_code_section	00000014 fifo_5
2005109c l     O actors_code_section	00000014 fifo_6
200510b0 l     O actors_code_section	00000014 fifo_7
200510c4 l     O actors_code_section	00000014 fifo_8
200510d8 l     O actors_code_section	00000014 fifo_9
200510ec l     O actors_code_section	00000014 fifo_10
20051100 l     O actors_code_section	00000014 fifo_11
20051114 l     O actors_code_section	00000014 fifo_12
20051128 l     O actors_code_section	00000014 fifo_13
2005113c l     O actors_code_section	00000014 fifo_14
20051150 l     O actors_code_section	00000014 fifo_15
20051164 l     O actors_code_section	00000014 fifo_16
20051178 l     O actors_code_section	00000014 fifo_17
2005118c l     O actors_code_section	00000014 fifo_18
200511a0 l     O actors_code_section	00000014 fifo_19
200511b4 l     O actors_code_section	00000014 fifo_20
200511c8 l     O actors_code_section	00000014 fifo_21
200511dc l     O actors_code_section	00000014 fifo_22
200511f0 l     O actors_code_section	00000014 fifo_23
20051204 l     O actors_code_section	00000014 fifo_24
20051218 l     O actors_code_section	00000014 fifo_25
2005122c l     O actors_code_section	00000014 fifo_26
20051240 l     O actors_code_section	00000014 fifo_27
20051254 l     O actors_code_section	00000014 fifo_28
20051268 l     O actors_code_section	00000014 fifo_29
2005127c l     O actors_code_section	00000014 fifo_30
20051290 l     O actors_code_section	00000014 fifo_31
00000c2c l     O .data	00000004 source_O
00000c30 l     O .data	00000004 decoder_parser_parseheaders_BYTE
00000c34 l     O .data	00000004 decoder_merger_YUV
00000c38 l     O .data	00000004 display_B
00000c3c l     O .data	00000004 decoder_parser_parseheaders_QP
00000c40 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QP
00000c44 l     O .data	00000004 decoder_parser_parseheaders_HEIGHT
00000c48 l     O .data	00000004 display_HEIGHT
00000c4c l     O .data	00000004 decoder_parser_parseheaders_RUN
00000c50 l     O .data	00000004 decoder_parser_blkexp_RUN
00000c54 l     O .data	00000004 decoder_parser_parseheaders_MV
00000c58 l     O .data	00000004 decoder_parser_mvrecon_MVIN
00000c5c l     O .data	00000004 decoder_parser_parseheaders_WIDTH
00000c60 l     O .data	00000004 display_WIDTH
00000c64 l     O .data	00000004 decoder_parser_parseheaders_LAST
00000c68 l     O .data	00000004 decoder_parser_blkexp_LAST
00000c6c l     O .data	00000004 decoder_parser_parseheaders_BTYPE
00000c70 l     O .data	00000004 decoder_parser_mvseq_BTYPE
00000c74 l     O .data	00000004 decoder_parser_mvrecon_BTYPE
00000c78 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
00000c7c l     O .data	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
00000c80 l     O .data	00000004 decoder_motion_add_BTYPE
00000c84 l     O .data	00000004 decoder_motion_framebuf_BTYPE
00000c88 l     O .data	00000004 decoder_parser_parseheaders_VALUE
00000c8c l     O .data	00000004 decoder_parser_blkexp_VALUE
00000c90 l     O .data	00000004 decoder_parser_mvseq_A
00000c94 l     O .data	00000004 decoder_parser_mvrecon_A
00000c98 l     O .data	00000004 decoder_parser_blkexp_QFS
00000c9c l     O .data	00000004 decoder_texture_DCsplit_IN
00000ca0 l     O .data	00000004 decoder_parser_mvrecon_MV
00000ca4 l     O .data	00000004 decoder_motion_framebuf_MV
00000ca8 l     O .data	00000004 decoder_texture_DCsplit_AC
00000cac l     O .data	00000004 decoder_texture_IS_QFS_AC
00000cb0 l     O .data	00000004 decoder_texture_DCsplit_DC
00000cb4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
00000cb8 l     O .data	00000004 decoder_texture_IS_PQF_AC
00000cbc l     O .data	00000004 decoder_texture_IAP_PQF_AC
00000cc0 l     O .data	00000004 decoder_texture_IAP_QF_AC
00000cc4 l     O .data	00000004 decoder_texture_IQ_AC
00000cc8 l     O .data	00000004 decoder_texture_IQ_OUT
00000ccc l     O .data	00000004 decoder_texture_idct2d_IN
00000cd0 l     O .data	00000004 decoder_texture_idct2d_OUT
00000cd4 l     O .data	00000004 decoder_motion_add_TEX
00000cd8 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_B
00000cdc l     O .data	00000004 decoder_texture_DCReconstruction_invpred_B
00000ce0 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_A
00000ce4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_A
00000ce8 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_C
00000cec l     O .data	00000004 decoder_texture_DCReconstruction_invpred_C
00000cf0 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_PTR
00000cf4 l     O .data	00000004 decoder_texture_IAP_PTR
00000cf8 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
00000cfc l     O .data	00000004 decoder_texture_IQ_DC
00000d00 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_MODE
00000d04 l     O .data	00000004 decoder_texture_IS_AC_PRED_DIR
00000d08 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
00000d0c l     O .data	00000004 decoder_texture_idct2d_SIGNED
00000d10 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
00000d14 l     O .data	00000004 decoder_texture_IAP_AC_PRED_DIR
00000d18 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QUANT
00000d1c l     O .data	00000004 decoder_texture_IQ_QP
00000d20 l     O .data	00000004 decoder_motion_interpolation_MOT
00000d24 l     O .data	00000004 decoder_motion_add_MOT
00000d28 l     O .data	00000004 decoder_motion_add_VID
00000d2c l     O .data	00000004 decoder_motion_framebuf_WD
00000d30 l     O .data	00000004 decoder_merger_YUV_i
00000d34 l     O .data	00000004 decoder_motion_framebuf_RD
00000d38 l     O .data	00000004 decoder_motion_interpolation_RD
00000d3c l     O .data	00000004 decoder_motion_framebuf_halfpel
00000d40 l     O .data	00000004 decoder_motion_interpolation_halfpel
2006b980 l     O actors_code_section	00000004 index_RUN
2006b984 l     O actors_code_section	00000004 numTokens_RUN
2006b988 l     O actors_code_section	00000004 index_VALUE
2006b98c l     O actors_code_section	00000004 numTokens_VALUE
2006b990 l     O actors_code_section	00000004 index_LAST
2006b994 l     O actors_code_section	00000004 numTokens_LAST
2006b998 l     O actors_code_section	00000004 index_QFS
2006b99c l     O actors_code_section	00000004 numFree_QFS
2006b9a0 l     O actors_code_section	00000001 count
2006b9a4 l     O actors_code_section	00000080 qfs
200512a4 l     O actors_code_section	00000001 needInit
00000d44 l     O .data	00000008 stateNames
2006ba24 l     O actors_code_section	00000004 _FSM_state
20019b84 l     F actors_code_section	000000a0 read_RUN
20019c24 l     F actors_code_section	00000054 read_end_RUN
20019c78 l     F actors_code_section	000000a0 read_VALUE
20019d18 l     F actors_code_section	00000054 read_end_VALUE
20019d6c l     F actors_code_section	000000a0 read_LAST
20019e0c l     F actors_code_section	00000054 read_end_LAST
20019e60 l     F actors_code_section	000000a0 write_QFS
20019f00 l     F actors_code_section	00000054 write_end_QFS
20019f54 l     F actors_code_section	00000040 isSchedulable_start
20019f94 l     F actors_code_section	0000007c start
2001a010 l     F actors_code_section	00000070 isSchedulable_last
2001a080 l     F actors_code_section	0000027c last
2001a2fc l     F actors_code_section	00000040 isSchedulable_run
2001a33c l     F actors_code_section	000001fc run
00000000 l    df *ABS*	00000000 decoder_parser_mvrecon.o
2001a8b4 l     F actors_code_section	00000080 fifo_i8_has_tokens
2001a934 l     F actors_code_section	00000064 fifo_i8_get_num_tokens
2001a998 l     F actors_code_section	000000b4 fifo_i8_has_room
2001aa4c l     F actors_code_section	000000b8 fifo_i8_get_room
2001ab04 l     F actors_code_section	00000084 fifo_i8_clear
2001ab88 l     F actors_code_section	000000a0 fifo_i8_read_1
2001ac28 l     F actors_code_section	00000084 fifo_i8_write_1
2001acac l     F actors_code_section	00000080 fifo_i16_has_tokens
2001ad2c l     F actors_code_section	00000064 fifo_i16_get_num_tokens
2001ad90 l     F actors_code_section	000000b4 fifo_i16_has_room
2001ae44 l     F actors_code_section	000000b8 fifo_i16_get_room
2001aefc l     F actors_code_section	00000084 fifo_i16_clear
2001af80 l     F actors_code_section	000000a4 fifo_i16_read_1
2001b024 l     F actors_code_section	00000088 fifo_i16_write_1
2001b0ac l     F actors_code_section	00000080 fifo_i32_has_tokens
2001b12c l     F actors_code_section	00000064 fifo_i32_get_num_tokens
2001b190 l     F actors_code_section	000000b4 fifo_i32_has_room
2001b244 l     F actors_code_section	000000b8 fifo_i32_get_room
2001b2fc l     F actors_code_section	00000084 fifo_i32_clear
2001b380 l     F actors_code_section	000000a0 fifo_i32_read_1
2001b420 l     F actors_code_section	00000084 fifo_i32_write_1
2001b4a4 l     F actors_code_section	00000080 fifo_i64_has_tokens
2001b524 l     F actors_code_section	00000064 fifo_i64_get_num_tokens
2001b588 l     F actors_code_section	000000b4 fifo_i64_has_room
2001b63c l     F actors_code_section	000000b8 fifo_i64_get_room
2001b6f4 l     F actors_code_section	00000084 fifo_i64_clear
2001b778 l     F actors_code_section	000000b4 fifo_i64_read_1
2001b82c l     F actors_code_section	00000090 fifo_i64_write_1
2001b8bc l     F actors_code_section	00000080 fifo_u8_has_tokens
2001b93c l     F actors_code_section	00000064 fifo_u8_get_num_tokens
2001b9a0 l     F actors_code_section	000000b4 fifo_u8_has_room
2001ba54 l     F actors_code_section	000000b8 fifo_u8_get_room
2001bb0c l     F actors_code_section	00000084 fifo_u8_clear
2001bb90 l     F actors_code_section	0000009c fifo_u8_read_1
2001bc2c l     F actors_code_section	00000084 fifo_u8_write_1
2001bcb0 l     F actors_code_section	00000080 fifo_u16_has_tokens
2001bd30 l     F actors_code_section	00000064 fifo_u16_get_num_tokens
2001bd94 l     F actors_code_section	000000b4 fifo_u16_has_room
2001be48 l     F actors_code_section	000000b8 fifo_u16_get_room
2001bf00 l     F actors_code_section	00000084 fifo_u16_clear
2001bf84 l     F actors_code_section	000000a0 fifo_u16_read_1
2001c024 l     F actors_code_section	00000088 fifo_u16_write_1
2001c0ac l     F actors_code_section	00000080 fifo_u32_has_tokens
2001c12c l     F actors_code_section	00000064 fifo_u32_get_num_tokens
2001c190 l     F actors_code_section	000000b4 fifo_u32_has_room
2001c244 l     F actors_code_section	000000b8 fifo_u32_get_room
2001c2fc l     F actors_code_section	00000084 fifo_u32_clear
2001c380 l     F actors_code_section	000000a0 fifo_u32_read_1
2001c420 l     F actors_code_section	00000084 fifo_u32_write_1
2001c4a4 l     F actors_code_section	00000080 fifo_u64_has_tokens
2001c524 l     F actors_code_section	00000064 fifo_u64_get_num_tokens
2001c588 l     F actors_code_section	000000b4 fifo_u64_has_room
2001c63c l     F actors_code_section	000000b8 fifo_u64_get_room
2001c6f4 l     F actors_code_section	00000084 fifo_u64_clear
2001c778 l     F actors_code_section	000000b4 fifo_u64_read_1
2001c82c l     F actors_code_section	00000090 fifo_u64_write_1
2001c8bc l     F actors_code_section	00000080 fifo_float_has_tokens
2001c93c l     F actors_code_section	00000064 fifo_float_get_num_tokens
2001c9a0 l     F actors_code_section	000000b4 fifo_float_has_room
2001ca54 l     F actors_code_section	000000b8 fifo_float_get_room
2001cb0c l     F actors_code_section	00000084 fifo_float_clear
2001cb90 l     F actors_code_section	000000a0 fifo_float_read_1
2001cc30 l     F actors_code_section	00000084 fifo_float_write_1
200512a8 l     O actors_code_section	00000014 fifo_0
200512bc l     O actors_code_section	00000014 fifo_1
200512d0 l     O actors_code_section	00000014 fifo_2
200512e4 l     O actors_code_section	00000014 fifo_3
200512f8 l     O actors_code_section	00000014 fifo_4
2005130c l     O actors_code_section	00000014 fifo_5
20051320 l     O actors_code_section	00000014 fifo_6
20051334 l     O actors_code_section	00000014 fifo_7
20051348 l     O actors_code_section	00000014 fifo_8
2005135c l     O actors_code_section	00000014 fifo_9
20051370 l     O actors_code_section	00000014 fifo_10
20051384 l     O actors_code_section	00000014 fifo_11
20051398 l     O actors_code_section	00000014 fifo_12
200513ac l     O actors_code_section	00000014 fifo_13
200513c0 l     O actors_code_section	00000014 fifo_14
200513d4 l     O actors_code_section	00000014 fifo_15
200513e8 l     O actors_code_section	00000014 fifo_16
200513fc l     O actors_code_section	00000014 fifo_17
20051410 l     O actors_code_section	00000014 fifo_18
20051424 l     O actors_code_section	00000014 fifo_19
20051438 l     O actors_code_section	00000014 fifo_20
2005144c l     O actors_code_section	00000014 fifo_21
20051460 l     O actors_code_section	00000014 fifo_22
20051474 l     O actors_code_section	00000014 fifo_23
20051488 l     O actors_code_section	00000014 fifo_24
2005149c l     O actors_code_section	00000014 fifo_25
200514b0 l     O actors_code_section	00000014 fifo_26
200514c4 l     O actors_code_section	00000014 fifo_27
200514d8 l     O actors_code_section	00000014 fifo_28
200514ec l     O actors_code_section	00000014 fifo_29
20051500 l     O actors_code_section	00000014 fifo_30
20051514 l     O actors_code_section	00000014 fifo_31
00000d4c l     O .data	00000004 source_O
00000d50 l     O .data	00000004 decoder_parser_parseheaders_BYTE
00000d54 l     O .data	00000004 decoder_merger_YUV
00000d58 l     O .data	00000004 display_B
00000d5c l     O .data	00000004 decoder_parser_parseheaders_QP
00000d60 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QP
00000d64 l     O .data	00000004 decoder_parser_parseheaders_HEIGHT
00000d68 l     O .data	00000004 display_HEIGHT
00000d6c l     O .data	00000004 decoder_parser_parseheaders_RUN
00000d70 l     O .data	00000004 decoder_parser_blkexp_RUN
00000d74 l     O .data	00000004 decoder_parser_parseheaders_MV
00000d78 l     O .data	00000004 decoder_parser_mvrecon_MVIN
00000d7c l     O .data	00000004 decoder_parser_parseheaders_WIDTH
00000d80 l     O .data	00000004 display_WIDTH
00000d84 l     O .data	00000004 decoder_parser_parseheaders_LAST
00000d88 l     O .data	00000004 decoder_parser_blkexp_LAST
00000d8c l     O .data	00000004 decoder_parser_parseheaders_BTYPE
00000d90 l     O .data	00000004 decoder_parser_mvseq_BTYPE
00000d94 l     O .data	00000004 decoder_parser_mvrecon_BTYPE
00000d98 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
00000d9c l     O .data	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
00000da0 l     O .data	00000004 decoder_motion_add_BTYPE
00000da4 l     O .data	00000004 decoder_motion_framebuf_BTYPE
00000da8 l     O .data	00000004 decoder_parser_parseheaders_VALUE
00000dac l     O .data	00000004 decoder_parser_blkexp_VALUE
00000db0 l     O .data	00000004 decoder_parser_mvseq_A
00000db4 l     O .data	00000004 decoder_parser_mvrecon_A
00000db8 l     O .data	00000004 decoder_parser_blkexp_QFS
00000dbc l     O .data	00000004 decoder_texture_DCsplit_IN
00000dc0 l     O .data	00000004 decoder_parser_mvrecon_MV
00000dc4 l     O .data	00000004 decoder_motion_framebuf_MV
00000dc8 l     O .data	00000004 decoder_texture_DCsplit_AC
00000dcc l     O .data	00000004 decoder_texture_IS_QFS_AC
00000dd0 l     O .data	00000004 decoder_texture_DCsplit_DC
00000dd4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
00000dd8 l     O .data	00000004 decoder_texture_IS_PQF_AC
00000ddc l     O .data	00000004 decoder_texture_IAP_PQF_AC
00000de0 l     O .data	00000004 decoder_texture_IAP_QF_AC
00000de4 l     O .data	00000004 decoder_texture_IQ_AC
00000de8 l     O .data	00000004 decoder_texture_IQ_OUT
00000dec l     O .data	00000004 decoder_texture_idct2d_IN
00000df0 l     O .data	00000004 decoder_texture_idct2d_OUT
00000df4 l     O .data	00000004 decoder_motion_add_TEX
00000df8 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_B
00000dfc l     O .data	00000004 decoder_texture_DCReconstruction_invpred_B
00000e00 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_A
00000e04 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_A
00000e08 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_C
00000e0c l     O .data	00000004 decoder_texture_DCReconstruction_invpred_C
00000e10 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_PTR
00000e14 l     O .data	00000004 decoder_texture_IAP_PTR
00000e18 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
00000e1c l     O .data	00000004 decoder_texture_IQ_DC
00000e20 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_MODE
00000e24 l     O .data	00000004 decoder_texture_IS_AC_PRED_DIR
00000e28 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
00000e2c l     O .data	00000004 decoder_texture_idct2d_SIGNED
00000e30 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
00000e34 l     O .data	00000004 decoder_texture_IAP_AC_PRED_DIR
00000e38 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QUANT
00000e3c l     O .data	00000004 decoder_texture_IQ_QP
00000e40 l     O .data	00000004 decoder_motion_interpolation_MOT
00000e44 l     O .data	00000004 decoder_motion_add_MOT
00000e48 l     O .data	00000004 decoder_motion_add_VID
00000e4c l     O .data	00000004 decoder_motion_framebuf_WD
00000e50 l     O .data	00000004 decoder_merger_YUV_i
00000e54 l     O .data	00000004 decoder_motion_framebuf_RD
00000e58 l     O .data	00000004 decoder_motion_interpolation_RD
00000e5c l     O .data	00000004 decoder_motion_framebuf_halfpel
00000e60 l     O .data	00000004 decoder_motion_interpolation_halfpel
2006ba28 l     O actors_code_section	00000004 index_BTYPE
2006ba2c l     O actors_code_section	00000004 numTokens_BTYPE
2006ba30 l     O actors_code_section	00000004 index_MVIN
2006ba34 l     O actors_code_section	00000004 numTokens_MVIN
2006ba38 l     O actors_code_section	00000004 index_A
2006ba3c l     O actors_code_section	00000004 numTokens_A
2006ba40 l     O actors_code_section	00000004 index_MV
2006ba44 l     O actors_code_section	00000004 numFree_MV
2006ba48 l     O actors_code_section	00000001 mbx
20051528 l     O actors_code_section	00000004 top_edge
2006ba49 l     O actors_code_section	00000001 comp
2006ba4a l     O actors_code_section	00000001 mbwidth
2006ba4c l     O actors_code_section	00000002 ptr
2006ba50 l     O actors_code_section	00000100 buf
2006bb50 l     O actors_code_section	00000002 mv_rsize
2006bb52 l     O actors_code_section	00000002 mv_range
2006bb54 l     O actors_code_section	00000002 mv_low
2006bb56 l     O actors_code_section	00000002 mv_high
2006bb58 l     O actors_code_section	00000004 fourmv
2006bb5c l     O actors_code_section	00000002 aptr
2006bb5e l     O actors_code_section	00000002 bptr
2006bb60 l     O actors_code_section	00000002 cptr
2006bb62 l     O actors_code_section	00000002 apred
2006bb64 l     O actors_code_section	00000002 bpred
2006bb66 l     O actors_code_section	00000002 cpred
2006bb68 l     O actors_code_section	00000002 mag
2006bb6a l     O actors_code_section	00000002 mv_x
2006bb6c l     O actors_code_section	00000002 mv_y
2006bb6e l     O actors_code_section	00000002 sum_x
2006bb70 l     O actors_code_section	00000002 sum_y
2006bb74 l     O actors_code_section	00000004 x_flag
2006bb78 l     O actors_code_section	00000002 res_shift
2005152c l     O actors_code_section	00000001 needInit
00000e64 l     O .data	0000007c stateNames
2006bb7c l     O actors_code_section	00000004 _FSM_state
2001ccb4 l     F actors_code_section	000000a0 read_BTYPE
2001cd54 l     F actors_code_section	00000058 read_end_BTYPE
2001cdac l     F actors_code_section	000000a0 read_MVIN
2001ce4c l     F actors_code_section	00000054 read_end_MVIN
2001cea0 l     F actors_code_section	000000a0 read_A
2001cf40 l     F actors_code_section	00000054 read_end_A
2001cf94 l     F actors_code_section	000000a0 write_MV
2001d034 l     F actors_code_section	00000054 write_end_MV
2001d088 l     F actors_code_section	000000d8 middle
2001d160 l     F actors_code_section	000000f0 mvcalc
2001d250 l     F actors_code_section	00000120 mvclip
2001d370 l     F actors_code_section	0000006c uvclip_1
2001d3dc l     F actors_code_section	000000ec uvclip_4
2001d4c8 l     F actors_code_section	00000090 isSchedulable_start
2001d558 l     F actors_code_section	000001f8 start
2001d750 l     F actors_code_section	00000040 isSchedulable_getw
2001d790 l     F actors_code_section	000000d0 getw_replaced
2001d860 l     F actors_code_section	00000040 isSchedulable_geth
2001d8a0 l     F actors_code_section	000000ac geth
2001d94c l     F actors_code_section	000000cc isSchedulable_read_noMotion
2001da18 l     F actors_code_section	00000154 read_noMotion
2001db6c l     F actors_code_section	000000cc isSchedulable_read_motion
2001dc38 l     F actors_code_section	00000114 read_motion
2001dd4c l     F actors_code_section	000000a0 isSchedulable_compute_done
2001ddec l     F actors_code_section	00000034 compute_done
2001de20 l     F actors_code_section	00000040 isSchedulable_compute_start
2001de60 l     F actors_code_section	000000fc compute_start
2001df5c l     F actors_code_section	00000040 isSchedulable_get_pred
2001df9c l     F actors_code_section	00000128 get_pred
2001e0c4 l     F actors_code_section	00000040 isSchedulable_do_pred
2001e104 l     F actors_code_section	000000f0 do_pred
2001e1f4 l     F actors_code_section	00000040 isSchedulable_get_mag
2001e234 l     F actors_code_section	000000bc get_mag
2001e2f0 l     F actors_code_section	00000040 isSchedulable_get_residual_init
2001e330 l     F actors_code_section	000000ac get_residual_init
2001e3dc l     F actors_code_section	00000040 isSchedulable_get_residual_shift
2001e41c l     F actors_code_section	0000009c get_residual_shift
2001e4b8 l     F actors_code_section	00000040 isSchedulable_get_residual_adjust
2001e4f8 l     F actors_code_section	000000ec get_residual_adjust
2001e5e4 l     F actors_code_section	00000040 isSchedulable_get_residual_calc
2001e624 l     F actors_code_section	000000b4 get_residual_calc
2001e6d8 l     F actors_code_section	00000040 isSchedulable_get_residual_clip
2001e718 l     F actors_code_section	00000080 get_residual_clip
2001e798 l     F actors_code_section	00000040 isSchedulable_get_residual_final
2001e7d8 l     F actors_code_section	000000ec get_residual_final
2001e8c4 l     F actors_code_section	0000006c isSchedulable_write_luma
2001e930 l     F actors_code_section	000001c8 write_luma
2001eaf8 l     F actors_code_section	00000040 isSchedulable_write_chroma
2001eb38 l     F actors_code_section	00000170 write_chroma
2001eca8 l     F actors_code_section	00000040 isSchedulable_advance
2001ece8 l     F actors_code_section	00000180 advance
20046e74 l       actors_code_section	00000000 $L320
2001ef84 l       actors_code_section	00000000 $L461
2001efe8 l       actors_code_section	00000000 $L462
2001f0c8 l       actors_code_section	00000000 $L463
2001f134 l       actors_code_section	00000000 $L464
2001f1a0 l       actors_code_section	00000000 $L465
2001f22c l       actors_code_section	00000000 $L466
2001f2b8 l       actors_code_section	00000000 $L467
2001f344 l       actors_code_section	00000000 $L468
2001f3d0 l       actors_code_section	00000000 $L469
2001f43c l       actors_code_section	00000000 $L470
2001f4a8 l       actors_code_section	00000000 $L471
2001f514 l       actors_code_section	00000000 $L472
2001f580 l       actors_code_section	00000000 $L473
2001f5ec l       actors_code_section	00000000 $L474
2001f658 l       actors_code_section	00000000 $L475
2001f6c4 l       actors_code_section	00000000 $L476
2001f730 l       actors_code_section	00000000 $L477
2001f7bc l       actors_code_section	00000000 $L478
2001f828 l       actors_code_section	00000000 $L479
2001f894 l       actors_code_section	00000000 $L480
2001f900 l       actors_code_section	00000000 $L481
2001f96c l       actors_code_section	00000000 $L482
2001f9d8 l       actors_code_section	00000000 $L483
2001fa64 l       actors_code_section	00000000 $L484
2001fad0 l       actors_code_section	00000000 $L485
2001fb3c l       actors_code_section	00000000 $L486
2001fba8 l       actors_code_section	00000000 $L487
2001fc34 l       actors_code_section	00000000 $L488
2001fcc0 l       actors_code_section	00000000 $L489
2001fe34 l       actors_code_section	00000000 $L490
2001ff5c l       actors_code_section	00000000 $L460
00000000 l    df *ABS*	00000000 decoder_parser_mvseq.o
200200e4 l     F actors_code_section	00000080 fifo_i8_has_tokens
20020164 l     F actors_code_section	00000064 fifo_i8_get_num_tokens
200201c8 l     F actors_code_section	000000b4 fifo_i8_has_room
2002027c l     F actors_code_section	000000b8 fifo_i8_get_room
20020334 l     F actors_code_section	00000084 fifo_i8_clear
200203b8 l     F actors_code_section	000000a0 fifo_i8_read_1
20020458 l     F actors_code_section	00000084 fifo_i8_write_1
200204dc l     F actors_code_section	00000080 fifo_i16_has_tokens
2002055c l     F actors_code_section	00000064 fifo_i16_get_num_tokens
200205c0 l     F actors_code_section	000000b4 fifo_i16_has_room
20020674 l     F actors_code_section	000000b8 fifo_i16_get_room
2002072c l     F actors_code_section	00000084 fifo_i16_clear
200207b0 l     F actors_code_section	000000a4 fifo_i16_read_1
20020854 l     F actors_code_section	00000088 fifo_i16_write_1
200208dc l     F actors_code_section	00000080 fifo_i32_has_tokens
2002095c l     F actors_code_section	00000064 fifo_i32_get_num_tokens
200209c0 l     F actors_code_section	000000b4 fifo_i32_has_room
20020a74 l     F actors_code_section	000000b8 fifo_i32_get_room
20020b2c l     F actors_code_section	00000084 fifo_i32_clear
20020bb0 l     F actors_code_section	000000a0 fifo_i32_read_1
20020c50 l     F actors_code_section	00000084 fifo_i32_write_1
20020cd4 l     F actors_code_section	00000080 fifo_i64_has_tokens
20020d54 l     F actors_code_section	00000064 fifo_i64_get_num_tokens
20020db8 l     F actors_code_section	000000b4 fifo_i64_has_room
20020e6c l     F actors_code_section	000000b8 fifo_i64_get_room
20020f24 l     F actors_code_section	00000084 fifo_i64_clear
20020fa8 l     F actors_code_section	000000b4 fifo_i64_read_1
2002105c l     F actors_code_section	00000090 fifo_i64_write_1
200210ec l     F actors_code_section	00000080 fifo_u8_has_tokens
2002116c l     F actors_code_section	00000064 fifo_u8_get_num_tokens
200211d0 l     F actors_code_section	000000b4 fifo_u8_has_room
20021284 l     F actors_code_section	000000b8 fifo_u8_get_room
2002133c l     F actors_code_section	00000084 fifo_u8_clear
200213c0 l     F actors_code_section	0000009c fifo_u8_read_1
2002145c l     F actors_code_section	00000084 fifo_u8_write_1
200214e0 l     F actors_code_section	00000080 fifo_u16_has_tokens
20021560 l     F actors_code_section	00000064 fifo_u16_get_num_tokens
200215c4 l     F actors_code_section	000000b4 fifo_u16_has_room
20021678 l     F actors_code_section	000000b8 fifo_u16_get_room
20021730 l     F actors_code_section	00000084 fifo_u16_clear
200217b4 l     F actors_code_section	000000a0 fifo_u16_read_1
20021854 l     F actors_code_section	00000088 fifo_u16_write_1
200218dc l     F actors_code_section	00000080 fifo_u32_has_tokens
2002195c l     F actors_code_section	00000064 fifo_u32_get_num_tokens
200219c0 l     F actors_code_section	000000b4 fifo_u32_has_room
20021a74 l     F actors_code_section	000000b8 fifo_u32_get_room
20021b2c l     F actors_code_section	00000084 fifo_u32_clear
20021bb0 l     F actors_code_section	000000a0 fifo_u32_read_1
20021c50 l     F actors_code_section	00000084 fifo_u32_write_1
20021cd4 l     F actors_code_section	00000080 fifo_u64_has_tokens
20021d54 l     F actors_code_section	00000064 fifo_u64_get_num_tokens
20021db8 l     F actors_code_section	000000b4 fifo_u64_has_room
20021e6c l     F actors_code_section	000000b8 fifo_u64_get_room
20021f24 l     F actors_code_section	00000084 fifo_u64_clear
20021fa8 l     F actors_code_section	000000b4 fifo_u64_read_1
2002205c l     F actors_code_section	00000090 fifo_u64_write_1
200220ec l     F actors_code_section	00000080 fifo_float_has_tokens
2002216c l     F actors_code_section	00000064 fifo_float_get_num_tokens
200221d0 l     F actors_code_section	000000b4 fifo_float_has_room
20022284 l     F actors_code_section	000000b8 fifo_float_get_room
2002233c l     F actors_code_section	00000084 fifo_float_clear
200223c0 l     F actors_code_section	000000a0 fifo_float_read_1
20022460 l     F actors_code_section	00000084 fifo_float_write_1
20051530 l     O actors_code_section	00000014 fifo_0
20051544 l     O actors_code_section	00000014 fifo_1
20051558 l     O actors_code_section	00000014 fifo_2
2005156c l     O actors_code_section	00000014 fifo_3
20051580 l     O actors_code_section	00000014 fifo_4
20051594 l     O actors_code_section	00000014 fifo_5
200515a8 l     O actors_code_section	00000014 fifo_6
200515bc l     O actors_code_section	00000014 fifo_7
200515d0 l     O actors_code_section	00000014 fifo_8
200515e4 l     O actors_code_section	00000014 fifo_9
200515f8 l     O actors_code_section	00000014 fifo_10
2005160c l     O actors_code_section	00000014 fifo_11
20051620 l     O actors_code_section	00000014 fifo_12
20051634 l     O actors_code_section	00000014 fifo_13
20051648 l     O actors_code_section	00000014 fifo_14
2005165c l     O actors_code_section	00000014 fifo_15
20051670 l     O actors_code_section	00000014 fifo_16
20051684 l     O actors_code_section	00000014 fifo_17
20051698 l     O actors_code_section	00000014 fifo_18
200516ac l     O actors_code_section	00000014 fifo_19
200516c0 l     O actors_code_section	00000014 fifo_20
200516d4 l     O actors_code_section	00000014 fifo_21
200516e8 l     O actors_code_section	00000014 fifo_22
200516fc l     O actors_code_section	00000014 fifo_23
20051710 l     O actors_code_section	00000014 fifo_24
20051724 l     O actors_code_section	00000014 fifo_25
20051738 l     O actors_code_section	00000014 fifo_26
2005174c l     O actors_code_section	00000014 fifo_27
20051760 l     O actors_code_section	00000014 fifo_28
20051774 l     O actors_code_section	00000014 fifo_29
20051788 l     O actors_code_section	00000014 fifo_30
2005179c l     O actors_code_section	00000014 fifo_31
00000ee0 l     O .data	00000004 source_O
00000ee4 l     O .data	00000004 decoder_parser_parseheaders_BYTE
00000ee8 l     O .data	00000004 decoder_merger_YUV
00000eec l     O .data	00000004 display_B
00000ef0 l     O .data	00000004 decoder_parser_parseheaders_QP
00000ef4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QP
00000ef8 l     O .data	00000004 decoder_parser_parseheaders_HEIGHT
00000efc l     O .data	00000004 display_HEIGHT
00000f00 l     O .data	00000004 decoder_parser_parseheaders_RUN
00000f04 l     O .data	00000004 decoder_parser_blkexp_RUN
00000f08 l     O .data	00000004 decoder_parser_parseheaders_MV
00000f0c l     O .data	00000004 decoder_parser_mvrecon_MVIN
00000f10 l     O .data	00000004 decoder_parser_parseheaders_WIDTH
00000f14 l     O .data	00000004 display_WIDTH
00000f18 l     O .data	00000004 decoder_parser_parseheaders_LAST
00000f1c l     O .data	00000004 decoder_parser_blkexp_LAST
00000f20 l     O .data	00000004 decoder_parser_parseheaders_BTYPE
00000f24 l     O .data	00000004 decoder_parser_mvseq_BTYPE
00000f28 l     O .data	00000004 decoder_parser_mvrecon_BTYPE
00000f2c l     O .data	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
00000f30 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
00000f34 l     O .data	00000004 decoder_motion_add_BTYPE
00000f38 l     O .data	00000004 decoder_motion_framebuf_BTYPE
00000f3c l     O .data	00000004 decoder_parser_parseheaders_VALUE
00000f40 l     O .data	00000004 decoder_parser_blkexp_VALUE
00000f44 l     O .data	00000004 decoder_parser_mvseq_A
00000f48 l     O .data	00000004 decoder_parser_mvrecon_A
00000f4c l     O .data	00000004 decoder_parser_blkexp_QFS
00000f50 l     O .data	00000004 decoder_texture_DCsplit_IN
00000f54 l     O .data	00000004 decoder_parser_mvrecon_MV
00000f58 l     O .data	00000004 decoder_motion_framebuf_MV
00000f5c l     O .data	00000004 decoder_texture_DCsplit_AC
00000f60 l     O .data	00000004 decoder_texture_IS_QFS_AC
00000f64 l     O .data	00000004 decoder_texture_DCsplit_DC
00000f68 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
00000f6c l     O .data	00000004 decoder_texture_IS_PQF_AC
00000f70 l     O .data	00000004 decoder_texture_IAP_PQF_AC
00000f74 l     O .data	00000004 decoder_texture_IAP_QF_AC
00000f78 l     O .data	00000004 decoder_texture_IQ_AC
00000f7c l     O .data	00000004 decoder_texture_IQ_OUT
00000f80 l     O .data	00000004 decoder_texture_idct2d_IN
00000f84 l     O .data	00000004 decoder_texture_idct2d_OUT
00000f88 l     O .data	00000004 decoder_motion_add_TEX
00000f8c l     O .data	00000004 decoder_texture_DCReconstruction_addressing_B
00000f90 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_B
00000f94 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_A
00000f98 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_A
00000f9c l     O .data	00000004 decoder_texture_DCReconstruction_addressing_C
00000fa0 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_C
00000fa4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_PTR
00000fa8 l     O .data	00000004 decoder_texture_IAP_PTR
00000fac l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
00000fb0 l     O .data	00000004 decoder_texture_IQ_DC
00000fb4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_MODE
00000fb8 l     O .data	00000004 decoder_texture_IS_AC_PRED_DIR
00000fbc l     O .data	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
00000fc0 l     O .data	00000004 decoder_texture_idct2d_SIGNED
00000fc4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
00000fc8 l     O .data	00000004 decoder_texture_IAP_AC_PRED_DIR
00000fcc l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QUANT
00000fd0 l     O .data	00000004 decoder_texture_IQ_QP
00000fd4 l     O .data	00000004 decoder_motion_interpolation_MOT
00000fd8 l     O .data	00000004 decoder_motion_add_MOT
00000fdc l     O .data	00000004 decoder_motion_add_VID
00000fe0 l     O .data	00000004 decoder_motion_framebuf_WD
00000fe4 l     O .data	00000004 decoder_merger_YUV_i
00000fe8 l     O .data	00000004 decoder_motion_framebuf_RD
00000fec l     O .data	00000004 decoder_motion_interpolation_RD
00000ff0 l     O .data	00000004 decoder_motion_framebuf_halfpel
00000ff4 l     O .data	00000004 decoder_motion_interpolation_halfpel
2006bb80 l     O actors_code_section	00000004 index_BTYPE
2006bb84 l     O actors_code_section	00000004 numTokens_BTYPE
2006bb88 l     O actors_code_section	00000004 index_A
2006bb8c l     O actors_code_section	00000004 numFree_A
2006bb90 l     O actors_code_section	00000001 mbx
200517b0 l     O actors_code_section	00000004 top_edge
2006bb94 l     O actors_code_section	00000004 right_edge
2006bb98 l     O actors_code_section	00000001 comp
2006bb99 l     O actors_code_section	00000001 mbwidth
2006bb9a l     O actors_code_section	00000001 ptr
2006bb9b l     O actors_code_section	00000001 ptr_left
2006bb9c l     O actors_code_section	00000001 ptr_above
2006bb9d l     O actors_code_section	00000001 ptr_above_right
200517b4 l     O actors_code_section	00000001 needInit
00000ff8 l     O .data	0000000c stateNames
2006bba0 l     O actors_code_section	00000004 _FSM_state
200224e4 l     F actors_code_section	000000a0 read_BTYPE
20022584 l     F actors_code_section	00000054 read_end_BTYPE
200225d8 l     F actors_code_section	000000a0 write_A
20022678 l     F actors_code_section	00000054 write_end_A
200226cc l     F actors_code_section	0000007c decrement
20022748 l     F actors_code_section	0000006c access
200227b4 l     F actors_code_section	00000090 isSchedulable_start
20022844 l     F actors_code_section	000000e0 start
20022924 l     F actors_code_section	00000040 isSchedulable_getw
20022964 l     F actors_code_section	00000114 getw_replaced
20022a78 l     F actors_code_section	00000040 isSchedulable_geth
20022ab8 l     F actors_code_section	000000ac geth
20022b64 l     F actors_code_section	00000128 isSchedulable_read_noPredict
20022c8c l     F actors_code_section	000002bc read_noPredict
20022f48 l     F actors_code_section	000000e8 isSchedulable_read_predict_y0
20023030 l     F actors_code_section	000002e0 read_predict_y0
20023310 l     F actors_code_section	00000108 isSchedulable_read_predict_y1
20023418 l     F actors_code_section	000002b4 read_predict_y1
200236cc l     F actors_code_section	00000108 isSchedulable_read_predict_y2
200237d4 l     F actors_code_section	00000278 read_predict_y2
20023a4c l     F actors_code_section	00000108 isSchedulable_read_predict_y3
20023b54 l     F actors_code_section	0000024c read_predict_y3
00000000 l    df *ABS*	00000000 decoder_parser_parseheaders.o
200243a0 l     F actors_code_section	00000080 fifo_i8_has_tokens
20024420 l     F actors_code_section	00000064 fifo_i8_get_num_tokens
20024484 l     F actors_code_section	000000b4 fifo_i8_has_room
20024538 l     F actors_code_section	000000b8 fifo_i8_get_room
200245f0 l     F actors_code_section	00000084 fifo_i8_clear
20024674 l     F actors_code_section	000000a0 fifo_i8_read_1
20024714 l     F actors_code_section	00000084 fifo_i8_write_1
20024798 l     F actors_code_section	00000080 fifo_i16_has_tokens
20024818 l     F actors_code_section	00000064 fifo_i16_get_num_tokens
2002487c l     F actors_code_section	000000b4 fifo_i16_has_room
20024930 l     F actors_code_section	000000b8 fifo_i16_get_room
200249e8 l     F actors_code_section	00000084 fifo_i16_clear
20024a6c l     F actors_code_section	000000a4 fifo_i16_read_1
20024b10 l     F actors_code_section	00000088 fifo_i16_write_1
20024b98 l     F actors_code_section	00000080 fifo_i32_has_tokens
20024c18 l     F actors_code_section	00000064 fifo_i32_get_num_tokens
20024c7c l     F actors_code_section	000000b4 fifo_i32_has_room
20024d30 l     F actors_code_section	000000b8 fifo_i32_get_room
20024de8 l     F actors_code_section	00000084 fifo_i32_clear
20024e6c l     F actors_code_section	000000a0 fifo_i32_read_1
20024f0c l     F actors_code_section	00000084 fifo_i32_write_1
20024f90 l     F actors_code_section	00000080 fifo_i64_has_tokens
20025010 l     F actors_code_section	00000064 fifo_i64_get_num_tokens
20025074 l     F actors_code_section	000000b4 fifo_i64_has_room
20025128 l     F actors_code_section	000000b8 fifo_i64_get_room
200251e0 l     F actors_code_section	00000084 fifo_i64_clear
20025264 l     F actors_code_section	000000b4 fifo_i64_read_1
20025318 l     F actors_code_section	00000090 fifo_i64_write_1
200253a8 l     F actors_code_section	00000080 fifo_u8_has_tokens
20025428 l     F actors_code_section	00000064 fifo_u8_get_num_tokens
2002548c l     F actors_code_section	000000b4 fifo_u8_has_room
20025540 l     F actors_code_section	000000b8 fifo_u8_get_room
200255f8 l     F actors_code_section	00000084 fifo_u8_clear
2002567c l     F actors_code_section	0000009c fifo_u8_read_1
20025718 l     F actors_code_section	00000084 fifo_u8_write_1
2002579c l     F actors_code_section	00000080 fifo_u16_has_tokens
2002581c l     F actors_code_section	00000064 fifo_u16_get_num_tokens
20025880 l     F actors_code_section	000000b4 fifo_u16_has_room
20025934 l     F actors_code_section	000000b8 fifo_u16_get_room
200259ec l     F actors_code_section	00000084 fifo_u16_clear
20025a70 l     F actors_code_section	000000a0 fifo_u16_read_1
20025b10 l     F actors_code_section	00000088 fifo_u16_write_1
20025b98 l     F actors_code_section	00000080 fifo_u32_has_tokens
20025c18 l     F actors_code_section	00000064 fifo_u32_get_num_tokens
20025c7c l     F actors_code_section	000000b4 fifo_u32_has_room
20025d30 l     F actors_code_section	000000b8 fifo_u32_get_room
20025de8 l     F actors_code_section	00000084 fifo_u32_clear
20025e6c l     F actors_code_section	000000a0 fifo_u32_read_1
20025f0c l     F actors_code_section	00000084 fifo_u32_write_1
20025f90 l     F actors_code_section	00000080 fifo_u64_has_tokens
20026010 l     F actors_code_section	00000064 fifo_u64_get_num_tokens
20026074 l     F actors_code_section	000000b4 fifo_u64_has_room
20026128 l     F actors_code_section	000000b8 fifo_u64_get_room
200261e0 l     F actors_code_section	00000084 fifo_u64_clear
20026264 l     F actors_code_section	000000b4 fifo_u64_read_1
20026318 l     F actors_code_section	00000090 fifo_u64_write_1
200263a8 l     F actors_code_section	00000080 fifo_float_has_tokens
20026428 l     F actors_code_section	00000064 fifo_float_get_num_tokens
2002648c l     F actors_code_section	000000b4 fifo_float_has_room
20026540 l     F actors_code_section	000000b8 fifo_float_get_room
200265f8 l     F actors_code_section	00000084 fifo_float_clear
2002667c l     F actors_code_section	000000a0 fifo_float_read_1
2002671c l     F actors_code_section	00000084 fifo_float_write_1
200517b8 l     O actors_code_section	00000014 fifo_0
200517cc l     O actors_code_section	00000014 fifo_1
200517e0 l     O actors_code_section	00000014 fifo_2
200517f4 l     O actors_code_section	00000014 fifo_3
20051808 l     O actors_code_section	00000014 fifo_4
2005181c l     O actors_code_section	00000014 fifo_5
20051830 l     O actors_code_section	00000014 fifo_6
20051844 l     O actors_code_section	00000014 fifo_7
20051858 l     O actors_code_section	00000014 fifo_8
2005186c l     O actors_code_section	00000014 fifo_9
20051880 l     O actors_code_section	00000014 fifo_10
20051894 l     O actors_code_section	00000014 fifo_11
200518a8 l     O actors_code_section	00000014 fifo_12
200518bc l     O actors_code_section	00000014 fifo_13
200518d0 l     O actors_code_section	00000014 fifo_14
200518e4 l     O actors_code_section	00000014 fifo_15
200518f8 l     O actors_code_section	00000014 fifo_16
2005190c l     O actors_code_section	00000014 fifo_17
20051920 l     O actors_code_section	00000014 fifo_18
20051934 l     O actors_code_section	00000014 fifo_19
20051948 l     O actors_code_section	00000014 fifo_20
2005195c l     O actors_code_section	00000014 fifo_21
20051970 l     O actors_code_section	00000014 fifo_22
20051984 l     O actors_code_section	00000014 fifo_23
20051998 l     O actors_code_section	00000014 fifo_24
200519ac l     O actors_code_section	00000014 fifo_25
200519c0 l     O actors_code_section	00000014 fifo_26
200519d4 l     O actors_code_section	00000014 fifo_27
200519e8 l     O actors_code_section	00000014 fifo_28
200519fc l     O actors_code_section	00000014 fifo_29
20051a10 l     O actors_code_section	00000014 fifo_30
20051a24 l     O actors_code_section	00000014 fifo_31
00001004 l     O .data	00000004 source_O
00001008 l     O .data	00000004 decoder_parser_parseheaders_BYTE
0000100c l     O .data	00000004 decoder_merger_YUV
00001010 l     O .data	00000004 display_B
00001014 l     O .data	00000004 decoder_parser_parseheaders_QP
00001018 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QP
0000101c l     O .data	00000004 decoder_parser_parseheaders_HEIGHT
00001020 l     O .data	00000004 display_HEIGHT
00001024 l     O .data	00000004 decoder_parser_parseheaders_RUN
00001028 l     O .data	00000004 decoder_parser_blkexp_RUN
0000102c l     O .data	00000004 decoder_parser_parseheaders_MV
00001030 l     O .data	00000004 decoder_parser_mvrecon_MVIN
00001034 l     O .data	00000004 decoder_parser_parseheaders_WIDTH
00001038 l     O .data	00000004 display_WIDTH
0000103c l     O .data	00000004 decoder_parser_parseheaders_LAST
00001040 l     O .data	00000004 decoder_parser_blkexp_LAST
00001044 l     O .data	00000004 decoder_parser_parseheaders_BTYPE
00001048 l     O .data	00000004 decoder_parser_mvseq_BTYPE
0000104c l     O .data	00000004 decoder_parser_mvrecon_BTYPE
00001050 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
00001054 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
00001058 l     O .data	00000004 decoder_motion_add_BTYPE
0000105c l     O .data	00000004 decoder_motion_framebuf_BTYPE
00001060 l     O .data	00000004 decoder_parser_parseheaders_VALUE
00001064 l     O .data	00000004 decoder_parser_blkexp_VALUE
00001068 l     O .data	00000004 decoder_parser_mvseq_A
0000106c l     O .data	00000004 decoder_parser_mvrecon_A
00001070 l     O .data	00000004 decoder_parser_blkexp_QFS
00001074 l     O .data	00000004 decoder_texture_DCsplit_IN
00001078 l     O .data	00000004 decoder_parser_mvrecon_MV
0000107c l     O .data	00000004 decoder_motion_framebuf_MV
00001080 l     O .data	00000004 decoder_texture_DCsplit_AC
00001084 l     O .data	00000004 decoder_texture_IS_QFS_AC
00001088 l     O .data	00000004 decoder_texture_DCsplit_DC
0000108c l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
00001090 l     O .data	00000004 decoder_texture_IS_PQF_AC
00001094 l     O .data	00000004 decoder_texture_IAP_PQF_AC
00001098 l     O .data	00000004 decoder_texture_IAP_QF_AC
0000109c l     O .data	00000004 decoder_texture_IQ_AC
000010a0 l     O .data	00000004 decoder_texture_IQ_OUT
000010a4 l     O .data	00000004 decoder_texture_idct2d_IN
000010a8 l     O .data	00000004 decoder_texture_idct2d_OUT
000010ac l     O .data	00000004 decoder_motion_add_TEX
000010b0 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_B
000010b4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_B
000010b8 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_A
000010bc l     O .data	00000004 decoder_texture_DCReconstruction_invpred_A
000010c0 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_C
000010c4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_C
000010c8 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_PTR
000010cc l     O .data	00000004 decoder_texture_IAP_PTR
000010d0 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
000010d4 l     O .data	00000004 decoder_texture_IQ_DC
000010d8 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_MODE
000010dc l     O .data	00000004 decoder_texture_IS_AC_PRED_DIR
000010e0 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
000010e4 l     O .data	00000004 decoder_texture_idct2d_SIGNED
000010e8 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
000010ec l     O .data	00000004 decoder_texture_IAP_AC_PRED_DIR
000010f0 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QUANT
000010f4 l     O .data	00000004 decoder_texture_IQ_QP
000010f8 l     O .data	00000004 decoder_motion_interpolation_MOT
000010fc l     O .data	00000004 decoder_motion_add_MOT
00001100 l     O .data	00000004 decoder_motion_add_VID
00001104 l     O .data	00000004 decoder_motion_framebuf_WD
00001108 l     O .data	00000004 decoder_merger_YUV_i
0000110c l     O .data	00000004 decoder_motion_framebuf_RD
00001110 l     O .data	00000004 decoder_motion_interpolation_RD
00001114 l     O .data	00000004 decoder_motion_framebuf_halfpel
00001118 l     O .data	00000004 decoder_motion_interpolation_halfpel
2006bba4 l     O actors_code_section	00000004 index_BYTE
2006bba8 l     O actors_code_section	00000004 numTokens_BYTE
2006bbac l     O actors_code_section	00000004 index_BTYPE
2006bbb0 l     O actors_code_section	00000004 numFree_BTYPE
2006bbb4 l     O actors_code_section	00000004 index_MV
2006bbb8 l     O actors_code_section	00000004 numFree_MV
2006bbbc l     O actors_code_section	00000004 index_RUN
2006bbc0 l     O actors_code_section	00000004 numFree_RUN
2006bbc4 l     O actors_code_section	00000004 index_VALUE
2006bbc8 l     O actors_code_section	00000004 numFree_VALUE
2006bbcc l     O actors_code_section	00000004 index_LAST
2006bbd0 l     O actors_code_section	00000004 numFree_LAST
2006bbd4 l     O actors_code_section	00000004 index_WIDTH
2006bbd8 l     O actors_code_section	00000004 numFree_WIDTH
2006bbdc l     O actors_code_section	00000004 index_HEIGHT
2006bbe0 l     O actors_code_section	00000004 numFree_HEIGHT
2006bbe4 l     O actors_code_section	00000004 index_QP
2006bbe8 l     O actors_code_section	00000004 numFree_QP
20046f08 l     O actors_code_section	00000080 vldTables_mcbpc_intra_table
20046f88 l     O actors_code_section	00000404 vldTables_mcbpc_inter_table
2004738c l     O actors_code_section	00000080 vldTables_cbpy_table
2004740c l     O actors_code_section	00000010 vldTables_dc_lum_tab
2004741c l     O actors_code_section	00008000 vldTables_DCT3D
2004f41c l     O actors_code_section	00000100 vldTables_max_level
2004f51c l     O actors_code_section	00000100 vldTables_max_run
2004f61c l     O actors_code_section	0000001c vldTables_TMNMVtab0
2004f638 l     O actors_code_section	000000c0 vldTables_TMNMVtab1
2004f6f8 l     O actors_code_section	000000f8 vldTables_TMNMVtab2
2006bbec l     O actors_code_section	00000014 fifo
2006bc00 l     O actors_code_section	00000001 zeroByte
2006bc01 l     O actors_code_section	00000001 start_code
2006bc04 l     O actors_code_section	00000004 vol_control_parameters
2006bc08 l     O actors_code_section	00000004 vbv_parameters
2006bc0c l     O actors_code_section	00000001 vop_time_increment_resolution_bits
2006bc0e l     O actors_code_section	00000002 video_object_layer_width
2006bc10 l     O actors_code_section	00000002 video_object_layer_height
2006bc12 l     O actors_code_section	00000002 mb_pic
2006bc14 l     O actors_code_section	00000001 vop_coding_type
2006bc18 l     O actors_code_section	00000004 vop_coded
2006bc1c l     O actors_code_section	00000004 round
2006bc20 l     O actors_code_section	00000001 vop_quant
2006bc21 l     O actors_code_section	00000001 prev_quant
2004f7f0 l     O actors_code_section	00000008 intra_dc_threshold_table
2006bc22 l     O actors_code_section	00000001 intra_dc_vlc_thr
2006bc23 l     O actors_code_section	00000001 fcode
2006bc24 l     O actors_code_section	00000004 mb_cnt
2006bc28 l     O actors_code_section	00000001 derived_mb_type
2006bc29 l     O actors_code_section	00000001 cbpc
2006bc2c l     O actors_code_section	00000004 is_intra
2006bc30 l     O actors_code_section	00000004 btype_is_Q
2006bc34 l     O actors_code_section	00000004 fourmvflag
2006bc38 l     O actors_code_section	00000004 not_coded
2004f7f8 l     O actors_code_section	00000004 dquant_table
2006bc3c l     O actors_code_section	00000001 cbp
2006bc40 l     O actors_code_section	00000004 ac_pred_flag
2006bc44 l     O actors_code_section	00000001 comp
2006bc48 l     O actors_code_section	00000004 last
2006bc4c l     O actors_code_section	00000001 run
2006bc50 l     O actors_code_section	00000001 level
2006bc54 l     O actors_code_section	00000004 ac_coded
2006bc58 l     O actors_code_section	00000001 mvcomp
20051a38 l     O actors_code_section	00000004 actorNotFinished
20051a3c l     O actors_code_section	00000001 needInit
0000111c l     O .data	00000054 stateNames
2006bc5c l     O actors_code_section	00000004 _FSM_state
200267a0 l     F actors_code_section	000000a0 read_BYTE
20026840 l     F actors_code_section	00000054 read_end_BYTE
20026894 l     F actors_code_section	000000a0 write_BTYPE
20026934 l     F actors_code_section	00000054 write_end_BTYPE
20026988 l     F actors_code_section	000000a0 write_MV
20026a28 l     F actors_code_section	00000054 write_end_MV
20026a7c l     F actors_code_section	000000a0 write_RUN
20026b1c l     F actors_code_section	00000054 write_end_RUN
20026b70 l     F actors_code_section	000000a0 write_VALUE
20026c10 l     F actors_code_section	00000054 write_end_VALUE
20026c64 l     F actors_code_section	000000a0 write_LAST
20026d04 l     F actors_code_section	00000054 write_end_LAST
20026d58 l     F actors_code_section	000000a0 write_WIDTH
20026df8 l     F actors_code_section	00000054 write_end_WIDTH
20026e4c l     F actors_code_section	000000a0 write_HEIGHT
20026eec l     F actors_code_section	00000054 write_end_HEIGHT
20026f40 l     F actors_code_section	000000a0 write_QP
20026fe0 l     F actors_code_section	00000054 write_end_QP
20027034 l     F actors_code_section	00000130 BitstreamReadUtils_getFifoIdx
20027164 l     F actors_code_section	00000210 BitstreamReadUtils_showXBits
20027374 l     F actors_code_section	00000098 BitstreamReadUtils_flushBits
2002740c l     F actors_code_section	0000009c BitstreamReadUtils_getBits
200274a8 l     F actors_code_section	0000006c BitstreamReadUtils_vld_u
20027514 l     F actors_code_section	00000088 BitstreamReadUtils_vld_u_name
2002759c l     F actors_code_section	00000288 BitstreamReadUtils_showBits
20027824 l     F actors_code_section	000001f0 vldFunctions_get_mcbpc
20027a14 l     F actors_code_section	0000011c vldFunctions_get_cbpy
20027b30 l     F actors_code_section	00000184 vldFunctions_get_dc_size_lum
20027cb4 l     F actors_code_section	00000154 vldFunctions_get_dc_size_chrom
20027e08 l     F actors_code_section	000000ec vldFunctions_get_dc_dif
20027ef4 l     F actors_code_section	00000050 vldFunctions_GET_BITS
20027f44 l     F actors_code_section	000007f8 vldFunctions_get_coeff
2002873c l     F actors_code_section	00000250 vldFunctions_get_mv
2002898c l     F actors_code_section	000000cc BitstreamReadUtils_IsStartCode
20028a58 l     F actors_code_section	00000084 BitstreamReadUtils_byte_align
20028adc l     F actors_code_section	00000080 log2bin
20028b5c l     F actors_code_section	0000008c isSchedulable_untagged_0
20028be8 l     F actors_code_section	000002a8 untagged_0
20028e90 l     F actors_code_section	00000040 isSchedulable_look_for_Sequence_Header
20028ed0 l     F actors_code_section	00000034 look_for_Sequence_Header
20028f04 l     F actors_code_section	0000008c isSchedulable_read_start_code
20028f90 l     F actors_code_section	00000084 read_start_code
20029014 l     F actors_code_section	00000040 isSchedulable_look_for_other_header
20029054 l     F actors_code_section	00000034 look_for_other_header
20029088 l     F actors_code_section	00000064 isSchedulable_look_for_vol
200290ec l     F actors_code_section	00000034 look_for_vol
20029120 l     F actors_code_section	00000064 isSchedulable_look_for_vop
20029184 l     F actors_code_section	00000034 look_for_vop
200291b8 l     F actors_code_section	0000008c isSchedulable_read_vol_start
20029244 l     F actors_code_section	00000368 read_vol_start
200295ac l     F actors_code_section	0000008c isSchedulable_read_vol_vbv_parameters1
20029638 l     F actors_code_section	000001a0 read_vol_vbv_parameters1
200297d8 l     F actors_code_section	0000008c isSchedulable_read_vol_vbv_parameters2
20029864 l     F actors_code_section	000000c4 read_vol_vbv_parameters2
20029928 l     F actors_code_section	0000008c isSchedulable_read_vol_video_object_layer_shape
200299b4 l     F actors_code_section	00000220 read_vol_video_object_layer_shape
20029bd4 l     F actors_code_section	0000008c isSchedulable_read_vol_video_object_layer_width
20029c60 l     F actors_code_section	000002dc read_vol_video_object_layer_width
20029f3c l     F actors_code_section	0000008c isSchedulable_read_vop
20029fc8 l     F actors_code_section	00000090 read_vop
2002a058 l     F actors_code_section	000000d8 isSchedulable_read_vop_coding_type_supported
2002a130 l     F actors_code_section	00000194 read_vop_coding_type_supported
2002a2c4 l     F actors_code_section	00000094 isSchedulable_read_vop_coding_type_unsupported
2002a358 l     F actors_code_section	00000034 read_vop_coding_type_unsupported
2002a38c l     F actors_code_section	000000a4 isSchedulable_read_vop_coded_coded
2002a430 l     F actors_code_section	0000057c read_vop_coded_coded
2002a9ac l     F actors_code_section	0000005c isSchedulable_read_vop_coded_uncoded
2002aa08 l     F actors_code_section	00000034 read_vop_coded_uncoded
2002aa3c l     F actors_code_section	0000008c isSchedulable_read_mb_start
2002aac8 l     F actors_code_section	0000047c read_mb_start
2002af44 l     F actors_code_section	0000006c isSchedulable_read_mb_done
2002afb0 l     F actors_code_section	00000034 read_mb_done
2002afe4 l     F actors_code_section	00000040 isSchedulable_read_block_start
2002b024 l     F actors_code_section	0000009c read_block_start
2002b0c0 l     F actors_code_section	00000060 isSchedulable_read_block_done
2002b120 l     F actors_code_section	00000058 read_block_done
2002b178 l     F actors_code_section	0000008c isSchedulable_read_block_dc
2002b204 l     F actors_code_section	000004a8 read_block_dc
2002b6ac l     F actors_code_section	0000005c isSchedulable_read_block_nodc_inter
2002b708 l     F actors_code_section	000001d4 read_block_nodc_inter
2002b8dc l     F actors_code_section	000000b0 isSchedulable_read_block_nodc_intra
2002b98c l     F actors_code_section	000001bc read_block_nodc_intra
2002bb48 l     F actors_code_section	00000050 isSchedulable_read_block_coeff_ac
2002bb98 l     F actors_code_section	00000034 read_block_coeff_ac
2002bbcc l     F actors_code_section	00000040 isSchedulable_read_block_coeff_noac
2002bc0c l     F actors_code_section	00000060 read_block_coeff_noac
2002bc6c l     F actors_code_section	0000008c isSchedulable_read_block_coeff
2002bcf8 l     F actors_code_section	00000218 read_block_coeff
2002bf10 l     F actors_code_section	00000050 isSchedulable_read_block_coeff_done
2002bf60 l     F actors_code_section	00000060 read_block_coeff_done
2002bfc0 l     F actors_code_section	00000050 isSchedulable_read_uncoded
2002c010 l     F actors_code_section	000001c0 read_uncoded
2002c1d0 l     F actors_code_section	00000088 isSchedulable_read_mv_start
2002c258 l     F actors_code_section	00000040 read_mv_start
2002c298 l     F actors_code_section	0000008c isSchedulable_read_mv_data
2002c324 l     F actors_code_section	00000350 read_mv_data
2002c674 l     F actors_code_section	00000098 isSchedulable_read_mv_data_done
2002c70c l     F actors_code_section	00000034 read_mv_data_done
2002c740 l     F actors_code_section	000000b8 isSchedulable_start_code_search
2002c7f8 l     F actors_code_section	0000005c start_code_search
2002c854 l     F actors_code_section	000000b8 isSchedulable_start_code_done
2002c90c l     F actors_code_section	0000005c start_code_done
2002c968 l     F actors_code_section	0000008c isSchedulable_byte_align_a
2002c9f4 l     F actors_code_section	00000054 byte_align_a
2002ca48 l     F actors_code_section	00000050 isSchedulable_undefined
2002ca98 l     F actors_code_section	00000040 undefined
2004f984 l       actors_code_section	00000000 $LC21
2004f9ac l       actors_code_section	00000000 $LC22
2004f9e0 l       actors_code_section	00000000 $LC23
2004fa18 l       actors_code_section	00000000 $LC24
2004fa50 l       actors_code_section	00000000 $LC25
2004fa84 l       actors_code_section	00000000 $LC26
2004fabc l       actors_code_section	00000000 $LC27
2004faec l       actors_code_section	00000000 $LC28
2004fb14 l       actors_code_section	00000000 $LC29
2004fb3c l       actors_code_section	00000000 $LC30
2004fb70 l       actors_code_section	00000000 $LC31
2004fb9c l       actors_code_section	00000000 $LC32
2004fbc4 l       actors_code_section	00000000 $LC33
2004fbf0 l       actors_code_section	00000000 $LC34
2004fc20 l       actors_code_section	00000000 $LC35
2004fc48 l       actors_code_section	00000000 $LC36
2004fc78 l       actors_code_section	00000000 $LC37
2004fcb0 l       actors_code_section	00000000 $LC38
2004fce8 l       actors_code_section	00000000 $LC39
2004fd1c l       actors_code_section	00000000 $LC40
2004fd54 l       actors_code_section	00000000 $LC41
2004fd88 l       actors_code_section	00000000 $LC42
2004fdc4 l       actors_code_section	00000000 $LC43
2004fdf0 l       actors_code_section	00000000 $LC44
2004fe30 l       actors_code_section	00000000 $LC45
2004fe64 l       actors_code_section	00000000 $LC46
2004fe9c l       actors_code_section	00000000 $LC47
2004fec4 l       actors_code_section	00000000 $LC48
2004feec l       actors_code_section	00000000 $LC49
2004ff18 l       actors_code_section	00000000 $LC50
2004ff40 l       actors_code_section	00000000 $LC51
2004ff68 l       actors_code_section	00000000 $LC52
2004ffa4 l       actors_code_section	00000000 $LC53
2004ffd8 l       actors_code_section	00000000 $LC54
20050004 l       actors_code_section	00000000 $LC55
2005002c l       actors_code_section	00000000 $LC56
20050058 l       actors_code_section	00000000 $LC57
20050084 l       actors_code_section	00000000 $LC58
200500b4 l       actors_code_section	00000000 $LC59
200500dc l       actors_code_section	00000000 $LC60
2005010c l       actors_code_section	00000000 $LC61
20050138 l       actors_code_section	00000000 $LC62
20050160 l       actors_code_section	00000000 $LC63
20050190 l       actors_code_section	00000000 $LC64
200501c0 l       actors_code_section	00000000 $LC65
200501e8 l       actors_code_section	00000000 $LC66
2005020c l       actors_code_section	00000000 $LC67
20050234 l       actors_code_section	00000000 $LC68
20050254 l       actors_code_section	00000000 $LC69
20050278 l       actors_code_section	00000000 $LC70
20050290 l       actors_code_section	00000000 $LC71
200502a8 l       actors_code_section	00000000 $LC72
200502c0 l       actors_code_section	00000000 $LC73
200502e0 l       actors_code_section	00000000 $LC74
20050304 l       actors_code_section	00000000 $LC75
20050324 l       actors_code_section	00000000 $LC76
20050348 l       actors_code_section	00000000 $L505
2002ccec l       actors_code_section	00000000 $L663
2002cd68 l       actors_code_section	00000000 $L664
2002ce94 l       actors_code_section	00000000 $L665
2002cf18 l       actors_code_section	00000000 $L666
2002cff0 l       actors_code_section	00000000 $L667
2002d164 l       actors_code_section	00000000 $L668
2002d23c l       actors_code_section	00000000 $L669
2002d884 l       actors_code_section	00000000 $L670
2002d95c l       actors_code_section	00000000 $L671
2002dc40 l       actors_code_section	00000000 $L672
2002dd54 l       actors_code_section	00000000 $L673
2002ddd8 l       actors_code_section	00000000 $L674
2002de5c l       actors_code_section	00000000 $L675
2002dee0 l       actors_code_section	00000000 $L676
2002df64 l       actors_code_section	00000000 $L677
2002dfe8 l       actors_code_section	00000000 $L678
2002e06c l       actors_code_section	00000000 $L679
2002e0f0 l       actors_code_section	00000000 $L680
2002e3ac l       actors_code_section	00000000 $L681
2002e484 l       actors_code_section	00000000 $L682
2002e55c l       actors_code_section	00000000 $L662
00000000 l    df *ABS*	00000000 decoder_texture_DCReconstruction_addressing.o
2002e690 l     F actors_code_section	00000080 fifo_i8_has_tokens
2002e710 l     F actors_code_section	00000064 fifo_i8_get_num_tokens
2002e774 l     F actors_code_section	000000b4 fifo_i8_has_room
2002e828 l     F actors_code_section	000000b8 fifo_i8_get_room
2002e8e0 l     F actors_code_section	00000084 fifo_i8_clear
2002e964 l     F actors_code_section	000000a0 fifo_i8_read_1
2002ea04 l     F actors_code_section	00000084 fifo_i8_write_1
2002ea88 l     F actors_code_section	00000080 fifo_i16_has_tokens
2002eb08 l     F actors_code_section	00000064 fifo_i16_get_num_tokens
2002eb6c l     F actors_code_section	000000b4 fifo_i16_has_room
2002ec20 l     F actors_code_section	000000b8 fifo_i16_get_room
2002ecd8 l     F actors_code_section	00000084 fifo_i16_clear
2002ed5c l     F actors_code_section	000000a4 fifo_i16_read_1
2002ee00 l     F actors_code_section	00000088 fifo_i16_write_1
2002ee88 l     F actors_code_section	00000080 fifo_i32_has_tokens
2002ef08 l     F actors_code_section	00000064 fifo_i32_get_num_tokens
2002ef6c l     F actors_code_section	000000b4 fifo_i32_has_room
2002f020 l     F actors_code_section	000000b8 fifo_i32_get_room
2002f0d8 l     F actors_code_section	00000084 fifo_i32_clear
2002f15c l     F actors_code_section	000000a0 fifo_i32_read_1
2002f1fc l     F actors_code_section	00000084 fifo_i32_write_1
2002f280 l     F actors_code_section	00000080 fifo_i64_has_tokens
2002f300 l     F actors_code_section	00000064 fifo_i64_get_num_tokens
2002f364 l     F actors_code_section	000000b4 fifo_i64_has_room
2002f418 l     F actors_code_section	000000b8 fifo_i64_get_room
2002f4d0 l     F actors_code_section	00000084 fifo_i64_clear
2002f554 l     F actors_code_section	000000b4 fifo_i64_read_1
2002f608 l     F actors_code_section	00000090 fifo_i64_write_1
2002f698 l     F actors_code_section	00000080 fifo_u8_has_tokens
2002f718 l     F actors_code_section	00000064 fifo_u8_get_num_tokens
2002f77c l     F actors_code_section	000000b4 fifo_u8_has_room
2002f830 l     F actors_code_section	000000b8 fifo_u8_get_room
2002f8e8 l     F actors_code_section	00000084 fifo_u8_clear
2002f96c l     F actors_code_section	0000009c fifo_u8_read_1
2002fa08 l     F actors_code_section	00000084 fifo_u8_write_1
2002fa8c l     F actors_code_section	00000080 fifo_u16_has_tokens
2002fb0c l     F actors_code_section	00000064 fifo_u16_get_num_tokens
2002fb70 l     F actors_code_section	000000b4 fifo_u16_has_room
2002fc24 l     F actors_code_section	000000b8 fifo_u16_get_room
2002fcdc l     F actors_code_section	00000084 fifo_u16_clear
2002fd60 l     F actors_code_section	000000a0 fifo_u16_read_1
2002fe00 l     F actors_code_section	00000088 fifo_u16_write_1
2002fe88 l     F actors_code_section	00000080 fifo_u32_has_tokens
2002ff08 l     F actors_code_section	00000064 fifo_u32_get_num_tokens
2002ff6c l     F actors_code_section	000000b4 fifo_u32_has_room
20030020 l     F actors_code_section	000000b8 fifo_u32_get_room
200300d8 l     F actors_code_section	00000084 fifo_u32_clear
2003015c l     F actors_code_section	000000a0 fifo_u32_read_1
200301fc l     F actors_code_section	00000084 fifo_u32_write_1
20030280 l     F actors_code_section	00000080 fifo_u64_has_tokens
20030300 l     F actors_code_section	00000064 fifo_u64_get_num_tokens
20030364 l     F actors_code_section	000000b4 fifo_u64_has_room
20030418 l     F actors_code_section	000000b8 fifo_u64_get_room
200304d0 l     F actors_code_section	00000084 fifo_u64_clear
20030554 l     F actors_code_section	000000b4 fifo_u64_read_1
20030608 l     F actors_code_section	00000090 fifo_u64_write_1
20030698 l     F actors_code_section	00000080 fifo_float_has_tokens
20030718 l     F actors_code_section	00000064 fifo_float_get_num_tokens
2003077c l     F actors_code_section	000000b4 fifo_float_has_room
20030830 l     F actors_code_section	000000b8 fifo_float_get_room
200308e8 l     F actors_code_section	00000084 fifo_float_clear
2003096c l     F actors_code_section	000000a0 fifo_float_read_1
20030a0c l     F actors_code_section	00000084 fifo_float_write_1
20051a40 l     O actors_code_section	00000014 fifo_0
20051a54 l     O actors_code_section	00000014 fifo_1
20051a68 l     O actors_code_section	00000014 fifo_2
20051a7c l     O actors_code_section	00000014 fifo_3
20051a90 l     O actors_code_section	00000014 fifo_4
20051aa4 l     O actors_code_section	00000014 fifo_5
20051ab8 l     O actors_code_section	00000014 fifo_6
20051acc l     O actors_code_section	00000014 fifo_7
20051ae0 l     O actors_code_section	00000014 fifo_8
20051af4 l     O actors_code_section	00000014 fifo_9
20051b08 l     O actors_code_section	00000014 fifo_10
20051b1c l     O actors_code_section	00000014 fifo_11
20051b30 l     O actors_code_section	00000014 fifo_12
20051b44 l     O actors_code_section	00000014 fifo_13
20051b58 l     O actors_code_section	00000014 fifo_14
20051b6c l     O actors_code_section	00000014 fifo_15
20051b80 l     O actors_code_section	00000014 fifo_16
20051b94 l     O actors_code_section	00000014 fifo_17
20051ba8 l     O actors_code_section	00000014 fifo_18
20051bbc l     O actors_code_section	00000014 fifo_19
20051bd0 l     O actors_code_section	00000014 fifo_20
20051be4 l     O actors_code_section	00000014 fifo_21
20051bf8 l     O actors_code_section	00000014 fifo_22
20051c0c l     O actors_code_section	00000014 fifo_23
20051c20 l     O actors_code_section	00000014 fifo_24
20051c34 l     O actors_code_section	00000014 fifo_25
20051c48 l     O actors_code_section	00000014 fifo_26
20051c5c l     O actors_code_section	00000014 fifo_27
20051c70 l     O actors_code_section	00000014 fifo_28
20051c84 l     O actors_code_section	00000014 fifo_29
20051c98 l     O actors_code_section	00000014 fifo_30
20051cac l     O actors_code_section	00000014 fifo_31
00001170 l     O .data	00000004 source_O
00001174 l     O .data	00000004 decoder_parser_parseheaders_BYTE
00001178 l     O .data	00000004 decoder_merger_YUV
0000117c l     O .data	00000004 display_B
00001180 l     O .data	00000004 decoder_parser_parseheaders_QP
00001184 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QP
00001188 l     O .data	00000004 decoder_parser_parseheaders_HEIGHT
0000118c l     O .data	00000004 display_HEIGHT
00001190 l     O .data	00000004 decoder_parser_parseheaders_RUN
00001194 l     O .data	00000004 decoder_parser_blkexp_RUN
00001198 l     O .data	00000004 decoder_parser_parseheaders_MV
0000119c l     O .data	00000004 decoder_parser_mvrecon_MVIN
000011a0 l     O .data	00000004 decoder_parser_parseheaders_WIDTH
000011a4 l     O .data	00000004 display_WIDTH
000011a8 l     O .data	00000004 decoder_parser_parseheaders_LAST
000011ac l     O .data	00000004 decoder_parser_blkexp_LAST
000011b0 l     O .data	00000004 decoder_parser_parseheaders_BTYPE
000011b4 l     O .data	00000004 decoder_parser_mvseq_BTYPE
000011b8 l     O .data	00000004 decoder_parser_mvrecon_BTYPE
000011bc l     O .data	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
000011c0 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
000011c4 l     O .data	00000004 decoder_motion_add_BTYPE
000011c8 l     O .data	00000004 decoder_motion_framebuf_BTYPE
000011cc l     O .data	00000004 decoder_parser_parseheaders_VALUE
000011d0 l     O .data	00000004 decoder_parser_blkexp_VALUE
000011d4 l     O .data	00000004 decoder_parser_mvseq_A
000011d8 l     O .data	00000004 decoder_parser_mvrecon_A
000011dc l     O .data	00000004 decoder_parser_blkexp_QFS
000011e0 l     O .data	00000004 decoder_texture_DCsplit_IN
000011e4 l     O .data	00000004 decoder_parser_mvrecon_MV
000011e8 l     O .data	00000004 decoder_motion_framebuf_MV
000011ec l     O .data	00000004 decoder_texture_DCsplit_AC
000011f0 l     O .data	00000004 decoder_texture_IS_QFS_AC
000011f4 l     O .data	00000004 decoder_texture_DCsplit_DC
000011f8 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
000011fc l     O .data	00000004 decoder_texture_IS_PQF_AC
00001200 l     O .data	00000004 decoder_texture_IAP_PQF_AC
00001204 l     O .data	00000004 decoder_texture_IAP_QF_AC
00001208 l     O .data	00000004 decoder_texture_IQ_AC
0000120c l     O .data	00000004 decoder_texture_IQ_OUT
00001210 l     O .data	00000004 decoder_texture_idct2d_IN
00001214 l     O .data	00000004 decoder_texture_idct2d_OUT
00001218 l     O .data	00000004 decoder_motion_add_TEX
0000121c l     O .data	00000004 decoder_texture_DCReconstruction_addressing_B
00001220 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_B
00001224 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_A
00001228 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_A
0000122c l     O .data	00000004 decoder_texture_DCReconstruction_addressing_C
00001230 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_C
00001234 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_PTR
00001238 l     O .data	00000004 decoder_texture_IAP_PTR
0000123c l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
00001240 l     O .data	00000004 decoder_texture_IQ_DC
00001244 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_MODE
00001248 l     O .data	00000004 decoder_texture_IS_AC_PRED_DIR
0000124c l     O .data	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
00001250 l     O .data	00000004 decoder_texture_idct2d_SIGNED
00001254 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
00001258 l     O .data	00000004 decoder_texture_IAP_AC_PRED_DIR
0000125c l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QUANT
00001260 l     O .data	00000004 decoder_texture_IQ_QP
00001264 l     O .data	00000004 decoder_motion_interpolation_MOT
00001268 l     O .data	00000004 decoder_motion_add_MOT
0000126c l     O .data	00000004 decoder_motion_add_VID
00001270 l     O .data	00000004 decoder_motion_framebuf_WD
00001274 l     O .data	00000004 decoder_merger_YUV_i
00001278 l     O .data	00000004 decoder_motion_framebuf_RD
0000127c l     O .data	00000004 decoder_motion_interpolation_RD
00001280 l     O .data	00000004 decoder_motion_framebuf_halfpel
00001284 l     O .data	00000004 decoder_motion_interpolation_halfpel
2006bc60 l     O actors_code_section	00000004 index_BTYPE
2006bc64 l     O actors_code_section	00000004 numTokens_BTYPE
2006bc68 l     O actors_code_section	00000004 index_A
2006bc6c l     O actors_code_section	00000004 numFree_A
2006bc70 l     O actors_code_section	00000004 index_B
2006bc74 l     O actors_code_section	00000004 numFree_B
2006bc78 l     O actors_code_section	00000004 index_C
2006bc7c l     O actors_code_section	00000004 numFree_C
2006bc80 l     O actors_code_section	00000001 mbx
20051cc0 l     O actors_code_section	00000004 top_edge
2006bc84 l     O actors_code_section	00000004 left_edge
2006bc88 l     O actors_code_section	00000001 comp
2006bc89 l     O actors_code_section	00000001 mbwidth
2006bc8c l     O actors_code_section	000001c0 coded
2006be4c l     O actors_code_section	00000001 ptr
2006be4d l     O actors_code_section	00000001 ptr_left
2006be4e l     O actors_code_section	00000001 ptr_above
2006be4f l     O actors_code_section	00000001 ptr_above_left
20051cc4 l     O actors_code_section	00000001 needInit
00001288 l     O .data	00000014 stateNames
2006be50 l     O actors_code_section	00000004 _FSM_state
20030a90 l     F actors_code_section	000000a0 read_BTYPE
20030b30 l     F actors_code_section	00000058 read_end_BTYPE
20030b88 l     F actors_code_section	000000a0 write_A
20030c28 l     F actors_code_section	00000054 write_end_A
20030c7c l     F actors_code_section	000000a0 write_B
20030d1c l     F actors_code_section	00000054 write_end_B
20030d70 l     F actors_code_section	000000a0 write_C
20030e10 l     F actors_code_section	00000054 write_end_C
20030e64 l     F actors_code_section	0000007c decrement
20030ee0 l     F actors_code_section	00000068 access
20030f48 l     F actors_code_section	00000090 isSchedulable_start
20030fd8 l     F actors_code_section	000000e4 start
200310bc l     F actors_code_section	00000040 isSchedulable_getw
200310fc l     F actors_code_section	00000120 getw_replaced
2003121c l     F actors_code_section	00000040 isSchedulable_geth
2003125c l     F actors_code_section	000000ac geth
20031308 l     F actors_code_section	00000090 isSchedulable_read_intra
20031398 l     F actors_code_section	00000118 read_intra
200314b0 l     F actors_code_section	00000040 isSchedulable_read_other
200314f0 l     F actors_code_section	00000114 read_other
20031604 l     F actors_code_section	00000040 isSchedulable_advance
20031644 l     F actors_code_section	0000022c advance
20031870 l     F actors_code_section	00000040 isSchedulable_predict
200318b0 l     F actors_code_section	00000918 predict
200503c4 l       actors_code_section	00000000 $L250
200322e4 l       actors_code_section	00000000 $L280
20032348 l       actors_code_section	00000000 $L281
200323d4 l       actors_code_section	00000000 $L282
20032460 l       actors_code_section	00000000 $L283
20032568 l       actors_code_section	00000000 $L279
00000000 l    df *ABS*	00000000 decoder_texture_DCReconstruction_invpred.o
2003273c l     F actors_code_section	00000080 fifo_i8_has_tokens
200327bc l     F actors_code_section	00000064 fifo_i8_get_num_tokens
20032820 l     F actors_code_section	000000b4 fifo_i8_has_room
200328d4 l     F actors_code_section	000000b8 fifo_i8_get_room
2003298c l     F actors_code_section	00000084 fifo_i8_clear
20032a10 l     F actors_code_section	000000a0 fifo_i8_read_1
20032ab0 l     F actors_code_section	00000084 fifo_i8_write_1
20032b34 l     F actors_code_section	00000080 fifo_i16_has_tokens
20032bb4 l     F actors_code_section	00000064 fifo_i16_get_num_tokens
20032c18 l     F actors_code_section	000000b4 fifo_i16_has_room
20032ccc l     F actors_code_section	000000b8 fifo_i16_get_room
20032d84 l     F actors_code_section	00000084 fifo_i16_clear
20032e08 l     F actors_code_section	000000a4 fifo_i16_read_1
20032eac l     F actors_code_section	00000088 fifo_i16_write_1
20032f34 l     F actors_code_section	00000080 fifo_i32_has_tokens
20032fb4 l     F actors_code_section	00000064 fifo_i32_get_num_tokens
20033018 l     F actors_code_section	000000b4 fifo_i32_has_room
200330cc l     F actors_code_section	000000b8 fifo_i32_get_room
20033184 l     F actors_code_section	00000084 fifo_i32_clear
20033208 l     F actors_code_section	000000a0 fifo_i32_read_1
200332a8 l     F actors_code_section	00000084 fifo_i32_write_1
2003332c l     F actors_code_section	00000080 fifo_i64_has_tokens
200333ac l     F actors_code_section	00000064 fifo_i64_get_num_tokens
20033410 l     F actors_code_section	000000b4 fifo_i64_has_room
200334c4 l     F actors_code_section	000000b8 fifo_i64_get_room
2003357c l     F actors_code_section	00000084 fifo_i64_clear
20033600 l     F actors_code_section	000000b4 fifo_i64_read_1
200336b4 l     F actors_code_section	00000090 fifo_i64_write_1
20033744 l     F actors_code_section	00000080 fifo_u8_has_tokens
200337c4 l     F actors_code_section	00000064 fifo_u8_get_num_tokens
20033828 l     F actors_code_section	000000b4 fifo_u8_has_room
200338dc l     F actors_code_section	000000b8 fifo_u8_get_room
20033994 l     F actors_code_section	00000084 fifo_u8_clear
20033a18 l     F actors_code_section	0000009c fifo_u8_read_1
20033ab4 l     F actors_code_section	00000084 fifo_u8_write_1
20033b38 l     F actors_code_section	00000080 fifo_u16_has_tokens
20033bb8 l     F actors_code_section	00000064 fifo_u16_get_num_tokens
20033c1c l     F actors_code_section	000000b4 fifo_u16_has_room
20033cd0 l     F actors_code_section	000000b8 fifo_u16_get_room
20033d88 l     F actors_code_section	00000084 fifo_u16_clear
20033e0c l     F actors_code_section	000000a0 fifo_u16_read_1
20033eac l     F actors_code_section	00000088 fifo_u16_write_1
20033f34 l     F actors_code_section	00000080 fifo_u32_has_tokens
20033fb4 l     F actors_code_section	00000064 fifo_u32_get_num_tokens
20034018 l     F actors_code_section	000000b4 fifo_u32_has_room
200340cc l     F actors_code_section	000000b8 fifo_u32_get_room
20034184 l     F actors_code_section	00000084 fifo_u32_clear
20034208 l     F actors_code_section	000000a0 fifo_u32_read_1
200342a8 l     F actors_code_section	00000084 fifo_u32_write_1
2003432c l     F actors_code_section	00000080 fifo_u64_has_tokens
200343ac l     F actors_code_section	00000064 fifo_u64_get_num_tokens
20034410 l     F actors_code_section	000000b4 fifo_u64_has_room
200344c4 l     F actors_code_section	000000b8 fifo_u64_get_room
2003457c l     F actors_code_section	00000084 fifo_u64_clear
20034600 l     F actors_code_section	000000b4 fifo_u64_read_1
200346b4 l     F actors_code_section	00000090 fifo_u64_write_1
20034744 l     F actors_code_section	00000080 fifo_float_has_tokens
200347c4 l     F actors_code_section	00000064 fifo_float_get_num_tokens
20034828 l     F actors_code_section	000000b4 fifo_float_has_room
200348dc l     F actors_code_section	000000b8 fifo_float_get_room
20034994 l     F actors_code_section	00000084 fifo_float_clear
20034a18 l     F actors_code_section	000000a0 fifo_float_read_1
20034ab8 l     F actors_code_section	00000084 fifo_float_write_1
20051cc8 l     O actors_code_section	00000014 fifo_0
20051cdc l     O actors_code_section	00000014 fifo_1
20051cf0 l     O actors_code_section	00000014 fifo_2
20051d04 l     O actors_code_section	00000014 fifo_3
20051d18 l     O actors_code_section	00000014 fifo_4
20051d2c l     O actors_code_section	00000014 fifo_5
20051d40 l     O actors_code_section	00000014 fifo_6
20051d54 l     O actors_code_section	00000014 fifo_7
20051d68 l     O actors_code_section	00000014 fifo_8
20051d7c l     O actors_code_section	00000014 fifo_9
20051d90 l     O actors_code_section	00000014 fifo_10
20051da4 l     O actors_code_section	00000014 fifo_11
20051db8 l     O actors_code_section	00000014 fifo_12
20051dcc l     O actors_code_section	00000014 fifo_13
20051de0 l     O actors_code_section	00000014 fifo_14
20051df4 l     O actors_code_section	00000014 fifo_15
20051e08 l     O actors_code_section	00000014 fifo_16
20051e1c l     O actors_code_section	00000014 fifo_17
20051e30 l     O actors_code_section	00000014 fifo_18
20051e44 l     O actors_code_section	00000014 fifo_19
20051e58 l     O actors_code_section	00000014 fifo_20
20051e6c l     O actors_code_section	00000014 fifo_21
20051e80 l     O actors_code_section	00000014 fifo_22
20051e94 l     O actors_code_section	00000014 fifo_23
20051ea8 l     O actors_code_section	00000014 fifo_24
20051ebc l     O actors_code_section	00000014 fifo_25
20051ed0 l     O actors_code_section	00000014 fifo_26
20051ee4 l     O actors_code_section	00000014 fifo_27
20051ef8 l     O actors_code_section	00000014 fifo_28
20051f0c l     O actors_code_section	00000014 fifo_29
20051f20 l     O actors_code_section	00000014 fifo_30
20051f34 l     O actors_code_section	00000014 fifo_31
0000129c l     O .data	00000004 source_O
000012a0 l     O .data	00000004 decoder_parser_parseheaders_BYTE
000012a4 l     O .data	00000004 decoder_merger_YUV
000012a8 l     O .data	00000004 display_B
000012ac l     O .data	00000004 decoder_parser_parseheaders_QP
000012b0 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QP
000012b4 l     O .data	00000004 decoder_parser_parseheaders_HEIGHT
000012b8 l     O .data	00000004 display_HEIGHT
000012bc l     O .data	00000004 decoder_parser_parseheaders_RUN
000012c0 l     O .data	00000004 decoder_parser_blkexp_RUN
000012c4 l     O .data	00000004 decoder_parser_parseheaders_MV
000012c8 l     O .data	00000004 decoder_parser_mvrecon_MVIN
000012cc l     O .data	00000004 decoder_parser_parseheaders_WIDTH
000012d0 l     O .data	00000004 display_WIDTH
000012d4 l     O .data	00000004 decoder_parser_parseheaders_LAST
000012d8 l     O .data	00000004 decoder_parser_blkexp_LAST
000012dc l     O .data	00000004 decoder_parser_parseheaders_BTYPE
000012e0 l     O .data	00000004 decoder_parser_mvseq_BTYPE
000012e4 l     O .data	00000004 decoder_parser_mvrecon_BTYPE
000012e8 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
000012ec l     O .data	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
000012f0 l     O .data	00000004 decoder_motion_add_BTYPE
000012f4 l     O .data	00000004 decoder_motion_framebuf_BTYPE
000012f8 l     O .data	00000004 decoder_parser_parseheaders_VALUE
000012fc l     O .data	00000004 decoder_parser_blkexp_VALUE
00001300 l     O .data	00000004 decoder_parser_mvseq_A
00001304 l     O .data	00000004 decoder_parser_mvrecon_A
00001308 l     O .data	00000004 decoder_parser_blkexp_QFS
0000130c l     O .data	00000004 decoder_texture_DCsplit_IN
00001310 l     O .data	00000004 decoder_parser_mvrecon_MV
00001314 l     O .data	00000004 decoder_motion_framebuf_MV
00001318 l     O .data	00000004 decoder_texture_DCsplit_AC
0000131c l     O .data	00000004 decoder_texture_IS_QFS_AC
00001320 l     O .data	00000004 decoder_texture_DCsplit_DC
00001324 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
00001328 l     O .data	00000004 decoder_texture_IS_PQF_AC
0000132c l     O .data	00000004 decoder_texture_IAP_PQF_AC
00001330 l     O .data	00000004 decoder_texture_IAP_QF_AC
00001334 l     O .data	00000004 decoder_texture_IQ_AC
00001338 l     O .data	00000004 decoder_texture_IQ_OUT
0000133c l     O .data	00000004 decoder_texture_idct2d_IN
00001340 l     O .data	00000004 decoder_texture_idct2d_OUT
00001344 l     O .data	00000004 decoder_motion_add_TEX
00001348 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_B
0000134c l     O .data	00000004 decoder_texture_DCReconstruction_invpred_B
00001350 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_A
00001354 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_A
00001358 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_C
0000135c l     O .data	00000004 decoder_texture_DCReconstruction_invpred_C
00001360 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_PTR
00001364 l     O .data	00000004 decoder_texture_IAP_PTR
00001368 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
0000136c l     O .data	00000004 decoder_texture_IQ_DC
00001370 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_MODE
00001374 l     O .data	00000004 decoder_texture_IS_AC_PRED_DIR
00001378 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
0000137c l     O .data	00000004 decoder_texture_idct2d_SIGNED
00001380 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
00001384 l     O .data	00000004 decoder_texture_IAP_AC_PRED_DIR
00001388 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QUANT
0000138c l     O .data	00000004 decoder_texture_IQ_QP
00001390 l     O .data	00000004 decoder_motion_interpolation_MOT
00001394 l     O .data	00000004 decoder_motion_add_MOT
00001398 l     O .data	00000004 decoder_motion_add_VID
0000139c l     O .data	00000004 decoder_motion_framebuf_WD
000013a0 l     O .data	00000004 decoder_merger_YUV_i
000013a4 l     O .data	00000004 decoder_motion_framebuf_RD
000013a8 l     O .data	00000004 decoder_motion_interpolation_RD
000013ac l     O .data	00000004 decoder_motion_framebuf_halfpel
000013b0 l     O .data	00000004 decoder_motion_interpolation_halfpel
2006be54 l     O actors_code_section	00000004 index_BTYPE
2006be58 l     O actors_code_section	00000004 numTokens_BTYPE
2006be5c l     O actors_code_section	00000004 index_A
2006be60 l     O actors_code_section	00000004 numTokens_A
2006be64 l     O actors_code_section	00000004 index_B
2006be68 l     O actors_code_section	00000004 numTokens_B
2006be6c l     O actors_code_section	00000004 index_C
2006be70 l     O actors_code_section	00000004 numTokens_C
2006be74 l     O actors_code_section	00000004 index_QFS_DC
2006be78 l     O actors_code_section	00000004 numTokens_QFS_DC
2006be7c l     O actors_code_section	00000004 index_QP
2006be80 l     O actors_code_section	00000004 numTokens_QP
2006be84 l     O actors_code_section	00000004 index_QF_DC
2006be88 l     O actors_code_section	00000004 numFree_QF_DC
2006be8c l     O actors_code_section	00000004 index_PTR
2006be90 l     O actors_code_section	00000004 numFree_PTR
2006be94 l     O actors_code_section	00000004 index_AC_PRED_DIR
2006be98 l     O actors_code_section	00000004 numFree_AC_PRED_DIR
2006be9c l     O actors_code_section	00000004 index_MODE
2006bea0 l     O actors_code_section	00000004 numFree_MODE
2006bea4 l     O actors_code_section	00000004 index_SIGNED
2006bea8 l     O actors_code_section	00000004 numFree_SIGNED
2006beac l     O actors_code_section	00000004 index_QUANT
2006beb0 l     O actors_code_section	00000004 numFree_QUANT
2006beb4 l     O actors_code_section	00000001 s_QP
2006beb5 l     O actors_code_section	00000001 round
20051f48 l     O actors_code_section	00000004 ptr
2006beb6 l     O actors_code_section	00000001 comp
20051f4c l     O actors_code_section	000000e0 dc_buf
2006beb8 l     O actors_code_section	00000002 dc_pred
2006beba l     O actors_code_section	00000001 scaler
2006bebc l     O actors_code_section	00000002 dc_val
2006bec0 l     O actors_code_section	00000004 is_signed
2005202c l     O actors_code_section	00000001 needInit
000013b4 l     O .data	0000001c stateNames
2006bec4 l     O actors_code_section	00000004 _FSM_state
20034b3c l     F actors_code_section	000000a0 read_BTYPE
20034bdc l     F actors_code_section	00000058 read_end_BTYPE
20034c34 l     F actors_code_section	000000a0 read_A
20034cd4 l     F actors_code_section	00000054 read_end_A
20034d28 l     F actors_code_section	000000a0 read_B
20034dc8 l     F actors_code_section	00000054 read_end_B
20034e1c l     F actors_code_section	000000a0 read_C
20034ebc l     F actors_code_section	00000054 read_end_C
20034f10 l     F actors_code_section	000000a0 read_QFS_DC
20034fb0 l     F actors_code_section	00000054 read_end_QFS_DC
20035004 l     F actors_code_section	000000a0 read_QP
200350a4 l     F actors_code_section	00000054 read_end_QP
200350f8 l     F actors_code_section	000000a0 write_QF_DC
20035198 l     F actors_code_section	00000054 write_end_QF_DC
200351ec l     F actors_code_section	000000a0 write_PTR
2003528c l     F actors_code_section	00000054 write_end_PTR
200352e0 l     F actors_code_section	000000a0 write_AC_PRED_DIR
20035380 l     F actors_code_section	00000054 write_end_AC_PRED_DIR
200353d4 l     F actors_code_section	000000a0 write_MODE
20035474 l     F actors_code_section	00000054 write_end_MODE
200354c8 l     F actors_code_section	000000a0 write_SIGNED
20035568 l     F actors_code_section	00000054 write_end_SIGNED
200355bc l     F actors_code_section	000000a0 write_QUANT
2003565c l     F actors_code_section	00000054 write_end_QUANT
200356b0 l     F actors_code_section	0000005c Math_abs
2003570c l     F actors_code_section	000000ac saturate
200357b8 l     F actors_code_section	0000028c dc_scaler
20035a44 l     F actors_code_section	00000090 isSchedulable_start
20035ad4 l     F actors_code_section	00000134 start
20035c08 l     F actors_code_section	00000040 isSchedulable_skip
20035c48 l     F actors_code_section	000000ac skip
20035cf4 l     F actors_code_section	000000b0 isSchedulable_read_inter_ac
20035da4 l     F actors_code_section	00000394 read_inter_ac
20036138 l     F actors_code_section	000000b0 isSchedulable_read_other
200361e8 l     F actors_code_section	00000194 read_other
2003637c l     F actors_code_section	00000040 isSchedulable_read_intra
200363bc l     F actors_code_section	000006f8 read_intra
20036ab4 l     F actors_code_section	00000040 isSchedulable_getdc_inter
20036af4 l     F actors_code_section	000001c4 getdc_inter
20036cb8 l     F actors_code_section	00000040 isSchedulable_getdc_intra
20036cf8 l     F actors_code_section	00000114 getdc_intra
20036e0c l     F actors_code_section	00000040 isSchedulable_sat
20036e4c l     F actors_code_section	00000124 sat
20036f70 l     F actors_code_section	00000040 isSchedulable_advance
20036fb0 l     F actors_code_section	000000ec advance
2005040c l       actors_code_section	00000000 $L287
20037238 l       actors_code_section	00000000 $L337
2003729c l       actors_code_section	00000000 $L338
20037328 l       actors_code_section	00000000 $L339
200373b4 l       actors_code_section	00000000 $L340
20037440 l       actors_code_section	00000000 $L341
200374cc l       actors_code_section	00000000 $L342
200379e4 l       actors_code_section	00000000 $L336
00000000 l    df *ABS*	00000000 decoder_texture_DCsplit.o
20037b64 l     F actors_code_section	00000080 fifo_i8_has_tokens
20037be4 l     F actors_code_section	00000064 fifo_i8_get_num_tokens
20037c48 l     F actors_code_section	000000b4 fifo_i8_has_room
20037cfc l     F actors_code_section	000000b8 fifo_i8_get_room
20037db4 l     F actors_code_section	00000084 fifo_i8_clear
20037e38 l     F actors_code_section	000000a0 fifo_i8_read_1
20037ed8 l     F actors_code_section	00000084 fifo_i8_write_1
20037f5c l     F actors_code_section	00000080 fifo_i16_has_tokens
20037fdc l     F actors_code_section	00000064 fifo_i16_get_num_tokens
20038040 l     F actors_code_section	000000b4 fifo_i16_has_room
200380f4 l     F actors_code_section	000000b8 fifo_i16_get_room
200381ac l     F actors_code_section	00000084 fifo_i16_clear
20038230 l     F actors_code_section	000000a4 fifo_i16_read_1
200382d4 l     F actors_code_section	00000088 fifo_i16_write_1
2003835c l     F actors_code_section	00000080 fifo_i32_has_tokens
200383dc l     F actors_code_section	00000064 fifo_i32_get_num_tokens
20038440 l     F actors_code_section	000000b4 fifo_i32_has_room
200384f4 l     F actors_code_section	000000b8 fifo_i32_get_room
200385ac l     F actors_code_section	00000084 fifo_i32_clear
20038630 l     F actors_code_section	000000a0 fifo_i32_read_1
200386d0 l     F actors_code_section	00000084 fifo_i32_write_1
20038754 l     F actors_code_section	00000080 fifo_i64_has_tokens
200387d4 l     F actors_code_section	00000064 fifo_i64_get_num_tokens
20038838 l     F actors_code_section	000000b4 fifo_i64_has_room
200388ec l     F actors_code_section	000000b8 fifo_i64_get_room
200389a4 l     F actors_code_section	00000084 fifo_i64_clear
20038a28 l     F actors_code_section	000000b4 fifo_i64_read_1
20038adc l     F actors_code_section	00000090 fifo_i64_write_1
20038b6c l     F actors_code_section	00000080 fifo_u8_has_tokens
20038bec l     F actors_code_section	00000064 fifo_u8_get_num_tokens
20038c50 l     F actors_code_section	000000b4 fifo_u8_has_room
20038d04 l     F actors_code_section	000000b8 fifo_u8_get_room
20038dbc l     F actors_code_section	00000084 fifo_u8_clear
20038e40 l     F actors_code_section	0000009c fifo_u8_read_1
20038edc l     F actors_code_section	00000084 fifo_u8_write_1
20038f60 l     F actors_code_section	00000080 fifo_u16_has_tokens
20038fe0 l     F actors_code_section	00000064 fifo_u16_get_num_tokens
20039044 l     F actors_code_section	000000b4 fifo_u16_has_room
200390f8 l     F actors_code_section	000000b8 fifo_u16_get_room
200391b0 l     F actors_code_section	00000084 fifo_u16_clear
20039234 l     F actors_code_section	000000a0 fifo_u16_read_1
200392d4 l     F actors_code_section	00000088 fifo_u16_write_1
2003935c l     F actors_code_section	00000080 fifo_u32_has_tokens
200393dc l     F actors_code_section	00000064 fifo_u32_get_num_tokens
20039440 l     F actors_code_section	000000b4 fifo_u32_has_room
200394f4 l     F actors_code_section	000000b8 fifo_u32_get_room
200395ac l     F actors_code_section	00000084 fifo_u32_clear
20039630 l     F actors_code_section	000000a0 fifo_u32_read_1
200396d0 l     F actors_code_section	00000084 fifo_u32_write_1
20039754 l     F actors_code_section	00000080 fifo_u64_has_tokens
200397d4 l     F actors_code_section	00000064 fifo_u64_get_num_tokens
20039838 l     F actors_code_section	000000b4 fifo_u64_has_room
200398ec l     F actors_code_section	000000b8 fifo_u64_get_room
200399a4 l     F actors_code_section	00000084 fifo_u64_clear
20039a28 l     F actors_code_section	000000b4 fifo_u64_read_1
20039adc l     F actors_code_section	00000090 fifo_u64_write_1
20039b6c l     F actors_code_section	00000080 fifo_float_has_tokens
20039bec l     F actors_code_section	00000064 fifo_float_get_num_tokens
20039c50 l     F actors_code_section	000000b4 fifo_float_has_room
20039d04 l     F actors_code_section	000000b8 fifo_float_get_room
20039dbc l     F actors_code_section	00000084 fifo_float_clear
20039e40 l     F actors_code_section	000000a0 fifo_float_read_1
20039ee0 l     F actors_code_section	00000084 fifo_float_write_1
20052030 l     O actors_code_section	00000014 fifo_0
20052044 l     O actors_code_section	00000014 fifo_1
20052058 l     O actors_code_section	00000014 fifo_2
2005206c l     O actors_code_section	00000014 fifo_3
20052080 l     O actors_code_section	00000014 fifo_4
20052094 l     O actors_code_section	00000014 fifo_5
200520a8 l     O actors_code_section	00000014 fifo_6
200520bc l     O actors_code_section	00000014 fifo_7
200520d0 l     O actors_code_section	00000014 fifo_8
200520e4 l     O actors_code_section	00000014 fifo_9
200520f8 l     O actors_code_section	00000014 fifo_10
2005210c l     O actors_code_section	00000014 fifo_11
20052120 l     O actors_code_section	00000014 fifo_12
20052134 l     O actors_code_section	00000014 fifo_13
20052148 l     O actors_code_section	00000014 fifo_14
2005215c l     O actors_code_section	00000014 fifo_15
20052170 l     O actors_code_section	00000014 fifo_16
20052184 l     O actors_code_section	00000014 fifo_17
20052198 l     O actors_code_section	00000014 fifo_18
200521ac l     O actors_code_section	00000014 fifo_19
200521c0 l     O actors_code_section	00000014 fifo_20
200521d4 l     O actors_code_section	00000014 fifo_21
200521e8 l     O actors_code_section	00000014 fifo_22
200521fc l     O actors_code_section	00000014 fifo_23
20052210 l     O actors_code_section	00000014 fifo_24
20052224 l     O actors_code_section	00000014 fifo_25
20052238 l     O actors_code_section	00000014 fifo_26
2005224c l     O actors_code_section	00000014 fifo_27
20052260 l     O actors_code_section	00000014 fifo_28
20052274 l     O actors_code_section	00000014 fifo_29
20052288 l     O actors_code_section	00000014 fifo_30
2005229c l     O actors_code_section	00000014 fifo_31
000013d0 l     O .data	00000004 source_O
000013d4 l     O .data	00000004 decoder_parser_parseheaders_BYTE
000013d8 l     O .data	00000004 decoder_merger_YUV
000013dc l     O .data	00000004 display_B
000013e0 l     O .data	00000004 decoder_parser_parseheaders_QP
000013e4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QP
000013e8 l     O .data	00000004 decoder_parser_parseheaders_HEIGHT
000013ec l     O .data	00000004 display_HEIGHT
000013f0 l     O .data	00000004 decoder_parser_parseheaders_RUN
000013f4 l     O .data	00000004 decoder_parser_blkexp_RUN
000013f8 l     O .data	00000004 decoder_parser_parseheaders_MV
000013fc l     O .data	00000004 decoder_parser_mvrecon_MVIN
00001400 l     O .data	00000004 decoder_parser_parseheaders_WIDTH
00001404 l     O .data	00000004 display_WIDTH
00001408 l     O .data	00000004 decoder_parser_parseheaders_LAST
0000140c l     O .data	00000004 decoder_parser_blkexp_LAST
00001410 l     O .data	00000004 decoder_parser_parseheaders_BTYPE
00001414 l     O .data	00000004 decoder_parser_mvseq_BTYPE
00001418 l     O .data	00000004 decoder_parser_mvrecon_BTYPE
0000141c l     O .data	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
00001420 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
00001424 l     O .data	00000004 decoder_motion_add_BTYPE
00001428 l     O .data	00000004 decoder_motion_framebuf_BTYPE
0000142c l     O .data	00000004 decoder_parser_parseheaders_VALUE
00001430 l     O .data	00000004 decoder_parser_blkexp_VALUE
00001434 l     O .data	00000004 decoder_parser_mvseq_A
00001438 l     O .data	00000004 decoder_parser_mvrecon_A
0000143c l     O .data	00000004 decoder_parser_blkexp_QFS
00001440 l     O .data	00000004 decoder_texture_DCsplit_IN
00001444 l     O .data	00000004 decoder_parser_mvrecon_MV
00001448 l     O .data	00000004 decoder_motion_framebuf_MV
0000144c l     O .data	00000004 decoder_texture_DCsplit_AC
00001450 l     O .data	00000004 decoder_texture_IS_QFS_AC
00001454 l     O .data	00000004 decoder_texture_DCsplit_DC
00001458 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
0000145c l     O .data	00000004 decoder_texture_IS_PQF_AC
00001460 l     O .data	00000004 decoder_texture_IAP_PQF_AC
00001464 l     O .data	00000004 decoder_texture_IAP_QF_AC
00001468 l     O .data	00000004 decoder_texture_IQ_AC
0000146c l     O .data	00000004 decoder_texture_IQ_OUT
00001470 l     O .data	00000004 decoder_texture_idct2d_IN
00001474 l     O .data	00000004 decoder_texture_idct2d_OUT
00001478 l     O .data	00000004 decoder_motion_add_TEX
0000147c l     O .data	00000004 decoder_texture_DCReconstruction_addressing_B
00001480 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_B
00001484 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_A
00001488 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_A
0000148c l     O .data	00000004 decoder_texture_DCReconstruction_addressing_C
00001490 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_C
00001494 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_PTR
00001498 l     O .data	00000004 decoder_texture_IAP_PTR
0000149c l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
000014a0 l     O .data	00000004 decoder_texture_IQ_DC
000014a4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_MODE
000014a8 l     O .data	00000004 decoder_texture_IS_AC_PRED_DIR
000014ac l     O .data	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
000014b0 l     O .data	00000004 decoder_texture_idct2d_SIGNED
000014b4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
000014b8 l     O .data	00000004 decoder_texture_IAP_AC_PRED_DIR
000014bc l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QUANT
000014c0 l     O .data	00000004 decoder_texture_IQ_QP
000014c4 l     O .data	00000004 decoder_motion_interpolation_MOT
000014c8 l     O .data	00000004 decoder_motion_add_MOT
000014cc l     O .data	00000004 decoder_motion_add_VID
000014d0 l     O .data	00000004 decoder_motion_framebuf_WD
000014d4 l     O .data	00000004 decoder_merger_YUV_i
000014d8 l     O .data	00000004 decoder_motion_framebuf_RD
000014dc l     O .data	00000004 decoder_motion_interpolation_RD
000014e0 l     O .data	00000004 decoder_motion_framebuf_halfpel
000014e4 l     O .data	00000004 decoder_motion_interpolation_halfpel
2006bec8 l     O actors_code_section	00000004 index_IN
2006becc l     O actors_code_section	00000004 numTokens_IN
2006bed0 l     O actors_code_section	00000004 index_DC
2006bed4 l     O actors_code_section	00000004 numFree_DC
2006bed8 l     O actors_code_section	00000004 index_AC
2006bedc l     O actors_code_section	00000004 numFree_AC
200522b0 l     O actors_code_section	00000001 needInit
20039f64 l     F actors_code_section	000000a0 read_IN
2003a004 l     F actors_code_section	00000054 read_end_IN
2003a058 l     F actors_code_section	000000a0 write_DC
2003a0f8 l     F actors_code_section	00000054 write_end_DC
2003a14c l     F actors_code_section	000000a0 write_AC
2003a1ec l     F actors_code_section	00000054 write_end_AC
2003a240 l     F actors_code_section	00000040 isSchedulable_untagged_0
2003a280 l     F actors_code_section	000001f8 untagged_0
00000000 l    df *ABS*	00000000 decoder_texture_IAP.o
2003a65c l     F actors_code_section	00000080 fifo_i8_has_tokens
2003a6dc l     F actors_code_section	00000064 fifo_i8_get_num_tokens
2003a740 l     F actors_code_section	000000b4 fifo_i8_has_room
2003a7f4 l     F actors_code_section	000000b8 fifo_i8_get_room
2003a8ac l     F actors_code_section	00000084 fifo_i8_clear
2003a930 l     F actors_code_section	000000a0 fifo_i8_read_1
2003a9d0 l     F actors_code_section	00000084 fifo_i8_write_1
2003aa54 l     F actors_code_section	00000080 fifo_i16_has_tokens
2003aad4 l     F actors_code_section	00000064 fifo_i16_get_num_tokens
2003ab38 l     F actors_code_section	000000b4 fifo_i16_has_room
2003abec l     F actors_code_section	000000b8 fifo_i16_get_room
2003aca4 l     F actors_code_section	00000084 fifo_i16_clear
2003ad28 l     F actors_code_section	000000a4 fifo_i16_read_1
2003adcc l     F actors_code_section	00000088 fifo_i16_write_1
2003ae54 l     F actors_code_section	00000080 fifo_i32_has_tokens
2003aed4 l     F actors_code_section	00000064 fifo_i32_get_num_tokens
2003af38 l     F actors_code_section	000000b4 fifo_i32_has_room
2003afec l     F actors_code_section	000000b8 fifo_i32_get_room
2003b0a4 l     F actors_code_section	00000084 fifo_i32_clear
2003b128 l     F actors_code_section	000000a0 fifo_i32_read_1
2003b1c8 l     F actors_code_section	00000084 fifo_i32_write_1
2003b24c l     F actors_code_section	00000080 fifo_i64_has_tokens
2003b2cc l     F actors_code_section	00000064 fifo_i64_get_num_tokens
2003b330 l     F actors_code_section	000000b4 fifo_i64_has_room
2003b3e4 l     F actors_code_section	000000b8 fifo_i64_get_room
2003b49c l     F actors_code_section	00000084 fifo_i64_clear
2003b520 l     F actors_code_section	000000b4 fifo_i64_read_1
2003b5d4 l     F actors_code_section	00000090 fifo_i64_write_1
2003b664 l     F actors_code_section	00000080 fifo_u8_has_tokens
2003b6e4 l     F actors_code_section	00000064 fifo_u8_get_num_tokens
2003b748 l     F actors_code_section	000000b4 fifo_u8_has_room
2003b7fc l     F actors_code_section	000000b8 fifo_u8_get_room
2003b8b4 l     F actors_code_section	00000084 fifo_u8_clear
2003b938 l     F actors_code_section	0000009c fifo_u8_read_1
2003b9d4 l     F actors_code_section	00000084 fifo_u8_write_1
2003ba58 l     F actors_code_section	00000080 fifo_u16_has_tokens
2003bad8 l     F actors_code_section	00000064 fifo_u16_get_num_tokens
2003bb3c l     F actors_code_section	000000b4 fifo_u16_has_room
2003bbf0 l     F actors_code_section	000000b8 fifo_u16_get_room
2003bca8 l     F actors_code_section	00000084 fifo_u16_clear
2003bd2c l     F actors_code_section	000000a0 fifo_u16_read_1
2003bdcc l     F actors_code_section	00000088 fifo_u16_write_1
2003be54 l     F actors_code_section	00000080 fifo_u32_has_tokens
2003bed4 l     F actors_code_section	00000064 fifo_u32_get_num_tokens
2003bf38 l     F actors_code_section	000000b4 fifo_u32_has_room
2003bfec l     F actors_code_section	000000b8 fifo_u32_get_room
2003c0a4 l     F actors_code_section	00000084 fifo_u32_clear
2003c128 l     F actors_code_section	000000a0 fifo_u32_read_1
2003c1c8 l     F actors_code_section	00000084 fifo_u32_write_1
2003c24c l     F actors_code_section	00000080 fifo_u64_has_tokens
2003c2cc l     F actors_code_section	00000064 fifo_u64_get_num_tokens
2003c330 l     F actors_code_section	000000b4 fifo_u64_has_room
2003c3e4 l     F actors_code_section	000000b8 fifo_u64_get_room
2003c49c l     F actors_code_section	00000084 fifo_u64_clear
2003c520 l     F actors_code_section	000000b4 fifo_u64_read_1
2003c5d4 l     F actors_code_section	00000090 fifo_u64_write_1
2003c664 l     F actors_code_section	00000080 fifo_float_has_tokens
2003c6e4 l     F actors_code_section	00000064 fifo_float_get_num_tokens
2003c748 l     F actors_code_section	000000b4 fifo_float_has_room
2003c7fc l     F actors_code_section	000000b8 fifo_float_get_room
2003c8b4 l     F actors_code_section	00000084 fifo_float_clear
2003c938 l     F actors_code_section	000000a0 fifo_float_read_1
2003c9d8 l     F actors_code_section	00000084 fifo_float_write_1
200522b4 l     O actors_code_section	00000014 fifo_0
200522c8 l     O actors_code_section	00000014 fifo_1
200522dc l     O actors_code_section	00000014 fifo_2
200522f0 l     O actors_code_section	00000014 fifo_3
20052304 l     O actors_code_section	00000014 fifo_4
20052318 l     O actors_code_section	00000014 fifo_5
2005232c l     O actors_code_section	00000014 fifo_6
20052340 l     O actors_code_section	00000014 fifo_7
20052354 l     O actors_code_section	00000014 fifo_8
20052368 l     O actors_code_section	00000014 fifo_9
2005237c l     O actors_code_section	00000014 fifo_10
20052390 l     O actors_code_section	00000014 fifo_11
200523a4 l     O actors_code_section	00000014 fifo_12
200523b8 l     O actors_code_section	00000014 fifo_13
200523cc l     O actors_code_section	00000014 fifo_14
200523e0 l     O actors_code_section	00000014 fifo_15
200523f4 l     O actors_code_section	00000014 fifo_16
20052408 l     O actors_code_section	00000014 fifo_17
2005241c l     O actors_code_section	00000014 fifo_18
20052430 l     O actors_code_section	00000014 fifo_19
20052444 l     O actors_code_section	00000014 fifo_20
20052458 l     O actors_code_section	00000014 fifo_21
2005246c l     O actors_code_section	00000014 fifo_22
20052480 l     O actors_code_section	00000014 fifo_23
20052494 l     O actors_code_section	00000014 fifo_24
200524a8 l     O actors_code_section	00000014 fifo_25
200524bc l     O actors_code_section	00000014 fifo_26
200524d0 l     O actors_code_section	00000014 fifo_27
200524e4 l     O actors_code_section	00000014 fifo_28
200524f8 l     O actors_code_section	00000014 fifo_29
2005250c l     O actors_code_section	00000014 fifo_30
20052520 l     O actors_code_section	00000014 fifo_31
000014e8 l     O .data	00000004 source_O
000014ec l     O .data	00000004 decoder_parser_parseheaders_BYTE
000014f0 l     O .data	00000004 decoder_merger_YUV
000014f4 l     O .data	00000004 display_B
000014f8 l     O .data	00000004 decoder_parser_parseheaders_QP
000014fc l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QP
00001500 l     O .data	00000004 decoder_parser_parseheaders_HEIGHT
00001504 l     O .data	00000004 display_HEIGHT
00001508 l     O .data	00000004 decoder_parser_parseheaders_RUN
0000150c l     O .data	00000004 decoder_parser_blkexp_RUN
00001510 l     O .data	00000004 decoder_parser_parseheaders_MV
00001514 l     O .data	00000004 decoder_parser_mvrecon_MVIN
00001518 l     O .data	00000004 decoder_parser_parseheaders_WIDTH
0000151c l     O .data	00000004 display_WIDTH
00001520 l     O .data	00000004 decoder_parser_parseheaders_LAST
00001524 l     O .data	00000004 decoder_parser_blkexp_LAST
00001528 l     O .data	00000004 decoder_parser_parseheaders_BTYPE
0000152c l     O .data	00000004 decoder_parser_mvseq_BTYPE
00001530 l     O .data	00000004 decoder_parser_mvrecon_BTYPE
00001534 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
00001538 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
0000153c l     O .data	00000004 decoder_motion_add_BTYPE
00001540 l     O .data	00000004 decoder_motion_framebuf_BTYPE
00001544 l     O .data	00000004 decoder_parser_parseheaders_VALUE
00001548 l     O .data	00000004 decoder_parser_blkexp_VALUE
0000154c l     O .data	00000004 decoder_parser_mvseq_A
00001550 l     O .data	00000004 decoder_parser_mvrecon_A
00001554 l     O .data	00000004 decoder_parser_blkexp_QFS
00001558 l     O .data	00000004 decoder_texture_DCsplit_IN
0000155c l     O .data	00000004 decoder_parser_mvrecon_MV
00001560 l     O .data	00000004 decoder_motion_framebuf_MV
00001564 l     O .data	00000004 decoder_texture_DCsplit_AC
00001568 l     O .data	00000004 decoder_texture_IS_QFS_AC
0000156c l     O .data	00000004 decoder_texture_DCsplit_DC
00001570 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
00001574 l     O .data	00000004 decoder_texture_IS_PQF_AC
00001578 l     O .data	00000004 decoder_texture_IAP_PQF_AC
0000157c l     O .data	00000004 decoder_texture_IAP_QF_AC
00001580 l     O .data	00000004 decoder_texture_IQ_AC
00001584 l     O .data	00000004 decoder_texture_IQ_OUT
00001588 l     O .data	00000004 decoder_texture_idct2d_IN
0000158c l     O .data	00000004 decoder_texture_idct2d_OUT
00001590 l     O .data	00000004 decoder_motion_add_TEX
00001594 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_B
00001598 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_B
0000159c l     O .data	00000004 decoder_texture_DCReconstruction_addressing_A
000015a0 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_A
000015a4 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_C
000015a8 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_C
000015ac l     O .data	00000004 decoder_texture_DCReconstruction_invpred_PTR
000015b0 l     O .data	00000004 decoder_texture_IAP_PTR
000015b4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
000015b8 l     O .data	00000004 decoder_texture_IQ_DC
000015bc l     O .data	00000004 decoder_texture_DCReconstruction_invpred_MODE
000015c0 l     O .data	00000004 decoder_texture_IS_AC_PRED_DIR
000015c4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
000015c8 l     O .data	00000004 decoder_texture_idct2d_SIGNED
000015cc l     O .data	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
000015d0 l     O .data	00000004 decoder_texture_IAP_AC_PRED_DIR
000015d4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QUANT
000015d8 l     O .data	00000004 decoder_texture_IQ_QP
000015dc l     O .data	00000004 decoder_motion_interpolation_MOT
000015e0 l     O .data	00000004 decoder_motion_add_MOT
000015e4 l     O .data	00000004 decoder_motion_add_VID
000015e8 l     O .data	00000004 decoder_motion_framebuf_WD
000015ec l     O .data	00000004 decoder_merger_YUV_i
000015f0 l     O .data	00000004 decoder_motion_framebuf_RD
000015f4 l     O .data	00000004 decoder_motion_interpolation_RD
000015f8 l     O .data	00000004 decoder_motion_framebuf_halfpel
000015fc l     O .data	00000004 decoder_motion_interpolation_halfpel
2006bee0 l     O actors_code_section	00000004 index_PQF_AC
2006bee4 l     O actors_code_section	00000004 numTokens_PQF_AC
2006bee8 l     O actors_code_section	00000004 index_PTR
2006beec l     O actors_code_section	00000004 numTokens_PTR
2006bef0 l     O actors_code_section	00000004 index_AC_PRED_DIR
2006bef4 l     O actors_code_section	00000004 numTokens_AC_PRED_DIR
2006bef8 l     O actors_code_section	00000004 index_QF_AC
2006befc l     O actors_code_section	00000004 numFree_QF_AC
2006bf00 l     O actors_code_section	00000002 ptr
2006bf02 l     O actors_code_section	00000002 pred_ptr
2006bf04 l     O actors_code_section	00000e00 buf
2006cd04 l     O actors_code_section	00000001 comp
2006cd08 l     O actors_code_section	00000004 top
2006cd0c l     O actors_code_section	00000004 acpred_flag
20052534 l     O actors_code_section	00000001 needInit
00001600 l     O .data	0000000c stateNames
2006cd10 l     O actors_code_section	00000004 _FSM_state
2003ca5c l     F actors_code_section	000000a0 read_PQF_AC
2003cafc l     F actors_code_section	00000054 read_end_PQF_AC
2003cb50 l     F actors_code_section	000000a0 read_PTR
2003cbf0 l     F actors_code_section	00000054 read_end_PTR
2003cc44 l     F actors_code_section	000000a0 read_AC_PRED_DIR
2003cce4 l     F actors_code_section	00000054 read_end_AC_PRED_DIR
2003cd38 l     F actors_code_section	000000a0 write_QF_AC
2003cdd8 l     F actors_code_section	00000054 write_end_QF_AC
2003ce2c l     F actors_code_section	0000007c isSchedulable_newvop
2003cea8 l     F actors_code_section	000000c4 newvop
2003cf6c l     F actors_code_section	00000074 isSchedulable_skip
2003cfe0 l     F actors_code_section	000000a8 skip
2003d088 l     F actors_code_section	00000040 isSchedulable_start
2003d0c8 l     F actors_code_section	00000170 start
2003d238 l     F actors_code_section	00000040 isSchedulable_advance
2003d278 l     F actors_code_section	00000110 advance
2003d388 l     F actors_code_section	00000040 isSchedulable_copy
2003d3c8 l     F actors_code_section	00000394 copy
00000000 l    df *ABS*	00000000 decoder_texture_IQ.o
2003db94 l     F actors_code_section	00000080 fifo_i8_has_tokens
2003dc14 l     F actors_code_section	00000064 fifo_i8_get_num_tokens
2003dc78 l     F actors_code_section	000000b4 fifo_i8_has_room
2003dd2c l     F actors_code_section	000000b8 fifo_i8_get_room
2003dde4 l     F actors_code_section	00000084 fifo_i8_clear
2003de68 l     F actors_code_section	000000a0 fifo_i8_read_1
2003df08 l     F actors_code_section	00000084 fifo_i8_write_1
2003df8c l     F actors_code_section	00000080 fifo_i16_has_tokens
2003e00c l     F actors_code_section	00000064 fifo_i16_get_num_tokens
2003e070 l     F actors_code_section	000000b4 fifo_i16_has_room
2003e124 l     F actors_code_section	000000b8 fifo_i16_get_room
2003e1dc l     F actors_code_section	00000084 fifo_i16_clear
2003e260 l     F actors_code_section	000000a4 fifo_i16_read_1
2003e304 l     F actors_code_section	00000088 fifo_i16_write_1
2003e38c l     F actors_code_section	00000080 fifo_i32_has_tokens
2003e40c l     F actors_code_section	00000064 fifo_i32_get_num_tokens
2003e470 l     F actors_code_section	000000b4 fifo_i32_has_room
2003e524 l     F actors_code_section	000000b8 fifo_i32_get_room
2003e5dc l     F actors_code_section	00000084 fifo_i32_clear
2003e660 l     F actors_code_section	000000a0 fifo_i32_read_1
2003e700 l     F actors_code_section	00000084 fifo_i32_write_1
2003e784 l     F actors_code_section	00000080 fifo_i64_has_tokens
2003e804 l     F actors_code_section	00000064 fifo_i64_get_num_tokens
2003e868 l     F actors_code_section	000000b4 fifo_i64_has_room
2003e91c l     F actors_code_section	000000b8 fifo_i64_get_room
2003e9d4 l     F actors_code_section	00000084 fifo_i64_clear
2003ea58 l     F actors_code_section	000000b4 fifo_i64_read_1
2003eb0c l     F actors_code_section	00000090 fifo_i64_write_1
2003eb9c l     F actors_code_section	00000080 fifo_u8_has_tokens
2003ec1c l     F actors_code_section	00000064 fifo_u8_get_num_tokens
2003ec80 l     F actors_code_section	000000b4 fifo_u8_has_room
2003ed34 l     F actors_code_section	000000b8 fifo_u8_get_room
2003edec l     F actors_code_section	00000084 fifo_u8_clear
2003ee70 l     F actors_code_section	0000009c fifo_u8_read_1
2003ef0c l     F actors_code_section	00000084 fifo_u8_write_1
2003ef90 l     F actors_code_section	00000080 fifo_u16_has_tokens
2003f010 l     F actors_code_section	00000064 fifo_u16_get_num_tokens
2003f074 l     F actors_code_section	000000b4 fifo_u16_has_room
2003f128 l     F actors_code_section	000000b8 fifo_u16_get_room
2003f1e0 l     F actors_code_section	00000084 fifo_u16_clear
2003f264 l     F actors_code_section	000000a0 fifo_u16_read_1
2003f304 l     F actors_code_section	00000088 fifo_u16_write_1
2003f38c l     F actors_code_section	00000080 fifo_u32_has_tokens
2003f40c l     F actors_code_section	00000064 fifo_u32_get_num_tokens
2003f470 l     F actors_code_section	000000b4 fifo_u32_has_room
2003f524 l     F actors_code_section	000000b8 fifo_u32_get_room
2003f5dc l     F actors_code_section	00000084 fifo_u32_clear
2003f660 l     F actors_code_section	000000a0 fifo_u32_read_1
2003f700 l     F actors_code_section	00000084 fifo_u32_write_1
2003f784 l     F actors_code_section	00000080 fifo_u64_has_tokens
2003f804 l     F actors_code_section	00000064 fifo_u64_get_num_tokens
2003f868 l     F actors_code_section	000000b4 fifo_u64_has_room
2003f91c l     F actors_code_section	000000b8 fifo_u64_get_room
2003f9d4 l     F actors_code_section	00000084 fifo_u64_clear
2003fa58 l     F actors_code_section	000000b4 fifo_u64_read_1
2003fb0c l     F actors_code_section	00000090 fifo_u64_write_1
2003fb9c l     F actors_code_section	00000080 fifo_float_has_tokens
2003fc1c l     F actors_code_section	00000064 fifo_float_get_num_tokens
2003fc80 l     F actors_code_section	000000b4 fifo_float_has_room
2003fd34 l     F actors_code_section	000000b8 fifo_float_get_room
2003fdec l     F actors_code_section	00000084 fifo_float_clear
2003fe70 l     F actors_code_section	000000a0 fifo_float_read_1
2003ff10 l     F actors_code_section	00000084 fifo_float_write_1
20052538 l     O actors_code_section	00000014 fifo_0
2005254c l     O actors_code_section	00000014 fifo_1
20052560 l     O actors_code_section	00000014 fifo_2
20052574 l     O actors_code_section	00000014 fifo_3
20052588 l     O actors_code_section	00000014 fifo_4
2005259c l     O actors_code_section	00000014 fifo_5
200525b0 l     O actors_code_section	00000014 fifo_6
200525c4 l     O actors_code_section	00000014 fifo_7
200525d8 l     O actors_code_section	00000014 fifo_8
200525ec l     O actors_code_section	00000014 fifo_9
20052600 l     O actors_code_section	00000014 fifo_10
20052614 l     O actors_code_section	00000014 fifo_11
20052628 l     O actors_code_section	00000014 fifo_12
2005263c l     O actors_code_section	00000014 fifo_13
20052650 l     O actors_code_section	00000014 fifo_14
20052664 l     O actors_code_section	00000014 fifo_15
20052678 l     O actors_code_section	00000014 fifo_16
2005268c l     O actors_code_section	00000014 fifo_17
200526a0 l     O actors_code_section	00000014 fifo_18
200526b4 l     O actors_code_section	00000014 fifo_19
200526c8 l     O actors_code_section	00000014 fifo_20
200526dc l     O actors_code_section	00000014 fifo_21
200526f0 l     O actors_code_section	00000014 fifo_22
20052704 l     O actors_code_section	00000014 fifo_23
20052718 l     O actors_code_section	00000014 fifo_24
2005272c l     O actors_code_section	00000014 fifo_25
20052740 l     O actors_code_section	00000014 fifo_26
20052754 l     O actors_code_section	00000014 fifo_27
20052768 l     O actors_code_section	00000014 fifo_28
2005277c l     O actors_code_section	00000014 fifo_29
20052790 l     O actors_code_section	00000014 fifo_30
200527a4 l     O actors_code_section	00000014 fifo_31
0000160c l     O .data	00000004 source_O
00001610 l     O .data	00000004 decoder_parser_parseheaders_BYTE
00001614 l     O .data	00000004 decoder_merger_YUV
00001618 l     O .data	00000004 display_B
0000161c l     O .data	00000004 decoder_parser_parseheaders_QP
00001620 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QP
00001624 l     O .data	00000004 decoder_parser_parseheaders_HEIGHT
00001628 l     O .data	00000004 display_HEIGHT
0000162c l     O .data	00000004 decoder_parser_parseheaders_RUN
00001630 l     O .data	00000004 decoder_parser_blkexp_RUN
00001634 l     O .data	00000004 decoder_parser_parseheaders_MV
00001638 l     O .data	00000004 decoder_parser_mvrecon_MVIN
0000163c l     O .data	00000004 decoder_parser_parseheaders_WIDTH
00001640 l     O .data	00000004 display_WIDTH
00001644 l     O .data	00000004 decoder_parser_parseheaders_LAST
00001648 l     O .data	00000004 decoder_parser_blkexp_LAST
0000164c l     O .data	00000004 decoder_parser_parseheaders_BTYPE
00001650 l     O .data	00000004 decoder_parser_mvseq_BTYPE
00001654 l     O .data	00000004 decoder_parser_mvrecon_BTYPE
00001658 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
0000165c l     O .data	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
00001660 l     O .data	00000004 decoder_motion_add_BTYPE
00001664 l     O .data	00000004 decoder_motion_framebuf_BTYPE
00001668 l     O .data	00000004 decoder_parser_parseheaders_VALUE
0000166c l     O .data	00000004 decoder_parser_blkexp_VALUE
00001670 l     O .data	00000004 decoder_parser_mvseq_A
00001674 l     O .data	00000004 decoder_parser_mvrecon_A
00001678 l     O .data	00000004 decoder_parser_blkexp_QFS
0000167c l     O .data	00000004 decoder_texture_DCsplit_IN
00001680 l     O .data	00000004 decoder_parser_mvrecon_MV
00001684 l     O .data	00000004 decoder_motion_framebuf_MV
00001688 l     O .data	00000004 decoder_texture_DCsplit_AC
0000168c l     O .data	00000004 decoder_texture_IS_QFS_AC
00001690 l     O .data	00000004 decoder_texture_DCsplit_DC
00001694 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
00001698 l     O .data	00000004 decoder_texture_IS_PQF_AC
0000169c l     O .data	00000004 decoder_texture_IAP_PQF_AC
000016a0 l     O .data	00000004 decoder_texture_IAP_QF_AC
000016a4 l     O .data	00000004 decoder_texture_IQ_AC
000016a8 l     O .data	00000004 decoder_texture_IQ_OUT
000016ac l     O .data	00000004 decoder_texture_idct2d_IN
000016b0 l     O .data	00000004 decoder_texture_idct2d_OUT
000016b4 l     O .data	00000004 decoder_motion_add_TEX
000016b8 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_B
000016bc l     O .data	00000004 decoder_texture_DCReconstruction_invpred_B
000016c0 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_A
000016c4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_A
000016c8 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_C
000016cc l     O .data	00000004 decoder_texture_DCReconstruction_invpred_C
000016d0 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_PTR
000016d4 l     O .data	00000004 decoder_texture_IAP_PTR
000016d8 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
000016dc l     O .data	00000004 decoder_texture_IQ_DC
000016e0 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_MODE
000016e4 l     O .data	00000004 decoder_texture_IS_AC_PRED_DIR
000016e8 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
000016ec l     O .data	00000004 decoder_texture_idct2d_SIGNED
000016f0 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
000016f4 l     O .data	00000004 decoder_texture_IAP_AC_PRED_DIR
000016f8 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QUANT
000016fc l     O .data	00000004 decoder_texture_IQ_QP
00001700 l     O .data	00000004 decoder_motion_interpolation_MOT
00001704 l     O .data	00000004 decoder_motion_add_MOT
00001708 l     O .data	00000004 decoder_motion_add_VID
0000170c l     O .data	00000004 decoder_motion_framebuf_WD
00001710 l     O .data	00000004 decoder_merger_YUV_i
00001714 l     O .data	00000004 decoder_motion_framebuf_RD
00001718 l     O .data	00000004 decoder_motion_interpolation_RD
0000171c l     O .data	00000004 decoder_motion_framebuf_halfpel
00001720 l     O .data	00000004 decoder_motion_interpolation_halfpel
2006cd14 l     O actors_code_section	00000004 index_DC
2006cd18 l     O actors_code_section	00000004 numTokens_DC
2006cd1c l     O actors_code_section	00000004 index_AC
2006cd20 l     O actors_code_section	00000004 numTokens_AC
2006cd24 l     O actors_code_section	00000004 index_QP
2006cd28 l     O actors_code_section	00000004 numTokens_QP
2006cd2c l     O actors_code_section	00000004 index_OUT
2006cd30 l     O actors_code_section	00000004 numFree_OUT
2006cd34 l     O actors_code_section	00000001 quant
2006cd35 l     O actors_code_section	00000001 round
200527b8 l     O actors_code_section	00000001 needInit
00001724 l     O .data	00000008 stateNames
2006cd38 l     O actors_code_section	00000004 _FSM_state
2003ff94 l     F actors_code_section	000000a0 read_DC
20040034 l     F actors_code_section	00000054 read_end_DC
20040088 l     F actors_code_section	000000a0 read_AC
20040128 l     F actors_code_section	00000054 read_end_AC
2004017c l     F actors_code_section	000000a0 read_QP
2004021c l     F actors_code_section	00000054 read_end_QP
20040270 l     F actors_code_section	000000a0 write_OUT
20040310 l     F actors_code_section	00000054 write_end_OUT
20040364 l     F actors_code_section	0000005c Math_abs
200403c0 l     F actors_code_section	000000ac saturate
2004046c l     F actors_code_section	00000040 isSchedulable_get_qp
200404ac l     F actors_code_section	000001bc get_qp
20040668 l     F actors_code_section	00000040 isSchedulable_ac
200406a8 l     F actors_code_section	000002b8 ac
00000000 l    df *ABS*	00000000 decoder_texture_IS.o
20040c68 l     F actors_code_section	00000080 fifo_i8_has_tokens
20040ce8 l     F actors_code_section	00000064 fifo_i8_get_num_tokens
20040d4c l     F actors_code_section	000000b4 fifo_i8_has_room
20040e00 l     F actors_code_section	000000b8 fifo_i8_get_room
20040eb8 l     F actors_code_section	00000084 fifo_i8_clear
20040f3c l     F actors_code_section	000000a0 fifo_i8_read_1
20040fdc l     F actors_code_section	00000084 fifo_i8_write_1
20041060 l     F actors_code_section	00000080 fifo_i16_has_tokens
200410e0 l     F actors_code_section	00000064 fifo_i16_get_num_tokens
20041144 l     F actors_code_section	000000b4 fifo_i16_has_room
200411f8 l     F actors_code_section	000000b8 fifo_i16_get_room
200412b0 l     F actors_code_section	00000084 fifo_i16_clear
20041334 l     F actors_code_section	000000a4 fifo_i16_read_1
200413d8 l     F actors_code_section	00000088 fifo_i16_write_1
20041460 l     F actors_code_section	00000080 fifo_i32_has_tokens
200414e0 l     F actors_code_section	00000064 fifo_i32_get_num_tokens
20041544 l     F actors_code_section	000000b4 fifo_i32_has_room
200415f8 l     F actors_code_section	000000b8 fifo_i32_get_room
200416b0 l     F actors_code_section	00000084 fifo_i32_clear
20041734 l     F actors_code_section	000000a0 fifo_i32_read_1
200417d4 l     F actors_code_section	00000084 fifo_i32_write_1
20041858 l     F actors_code_section	00000080 fifo_i64_has_tokens
200418d8 l     F actors_code_section	00000064 fifo_i64_get_num_tokens
2004193c l     F actors_code_section	000000b4 fifo_i64_has_room
200419f0 l     F actors_code_section	000000b8 fifo_i64_get_room
20041aa8 l     F actors_code_section	00000084 fifo_i64_clear
20041b2c l     F actors_code_section	000000b4 fifo_i64_read_1
20041be0 l     F actors_code_section	00000090 fifo_i64_write_1
20041c70 l     F actors_code_section	00000080 fifo_u8_has_tokens
20041cf0 l     F actors_code_section	00000064 fifo_u8_get_num_tokens
20041d54 l     F actors_code_section	000000b4 fifo_u8_has_room
20041e08 l     F actors_code_section	000000b8 fifo_u8_get_room
20041ec0 l     F actors_code_section	00000084 fifo_u8_clear
20041f44 l     F actors_code_section	0000009c fifo_u8_read_1
20041fe0 l     F actors_code_section	00000084 fifo_u8_write_1
20042064 l     F actors_code_section	00000080 fifo_u16_has_tokens
200420e4 l     F actors_code_section	00000064 fifo_u16_get_num_tokens
20042148 l     F actors_code_section	000000b4 fifo_u16_has_room
200421fc l     F actors_code_section	000000b8 fifo_u16_get_room
200422b4 l     F actors_code_section	00000084 fifo_u16_clear
20042338 l     F actors_code_section	000000a0 fifo_u16_read_1
200423d8 l     F actors_code_section	00000088 fifo_u16_write_1
20042460 l     F actors_code_section	00000080 fifo_u32_has_tokens
200424e0 l     F actors_code_section	00000064 fifo_u32_get_num_tokens
20042544 l     F actors_code_section	000000b4 fifo_u32_has_room
200425f8 l     F actors_code_section	000000b8 fifo_u32_get_room
200426b0 l     F actors_code_section	00000084 fifo_u32_clear
20042734 l     F actors_code_section	000000a0 fifo_u32_read_1
200427d4 l     F actors_code_section	00000084 fifo_u32_write_1
20042858 l     F actors_code_section	00000080 fifo_u64_has_tokens
200428d8 l     F actors_code_section	00000064 fifo_u64_get_num_tokens
2004293c l     F actors_code_section	000000b4 fifo_u64_has_room
200429f0 l     F actors_code_section	000000b8 fifo_u64_get_room
20042aa8 l     F actors_code_section	00000084 fifo_u64_clear
20042b2c l     F actors_code_section	000000b4 fifo_u64_read_1
20042be0 l     F actors_code_section	00000090 fifo_u64_write_1
20042c70 l     F actors_code_section	00000080 fifo_float_has_tokens
20042cf0 l     F actors_code_section	00000064 fifo_float_get_num_tokens
20042d54 l     F actors_code_section	000000b4 fifo_float_has_room
20042e08 l     F actors_code_section	000000b8 fifo_float_get_room
20042ec0 l     F actors_code_section	00000084 fifo_float_clear
20042f44 l     F actors_code_section	000000a0 fifo_float_read_1
20042fe4 l     F actors_code_section	00000084 fifo_float_write_1
200527bc l     O actors_code_section	00000014 fifo_0
200527d0 l     O actors_code_section	00000014 fifo_1
200527e4 l     O actors_code_section	00000014 fifo_2
200527f8 l     O actors_code_section	00000014 fifo_3
2005280c l     O actors_code_section	00000014 fifo_4
20052820 l     O actors_code_section	00000014 fifo_5
20052834 l     O actors_code_section	00000014 fifo_6
20052848 l     O actors_code_section	00000014 fifo_7
2005285c l     O actors_code_section	00000014 fifo_8
20052870 l     O actors_code_section	00000014 fifo_9
20052884 l     O actors_code_section	00000014 fifo_10
20052898 l     O actors_code_section	00000014 fifo_11
200528ac l     O actors_code_section	00000014 fifo_12
200528c0 l     O actors_code_section	00000014 fifo_13
200528d4 l     O actors_code_section	00000014 fifo_14
200528e8 l     O actors_code_section	00000014 fifo_15
200528fc l     O actors_code_section	00000014 fifo_16
20052910 l     O actors_code_section	00000014 fifo_17
20052924 l     O actors_code_section	00000014 fifo_18
20052938 l     O actors_code_section	00000014 fifo_19
2005294c l     O actors_code_section	00000014 fifo_20
20052960 l     O actors_code_section	00000014 fifo_21
20052974 l     O actors_code_section	00000014 fifo_22
20052988 l     O actors_code_section	00000014 fifo_23
2005299c l     O actors_code_section	00000014 fifo_24
200529b0 l     O actors_code_section	00000014 fifo_25
200529c4 l     O actors_code_section	00000014 fifo_26
200529d8 l     O actors_code_section	00000014 fifo_27
200529ec l     O actors_code_section	00000014 fifo_28
20052a00 l     O actors_code_section	00000014 fifo_29
20052a14 l     O actors_code_section	00000014 fifo_30
20052a28 l     O actors_code_section	00000014 fifo_31
0000172c l     O .data	00000004 source_O
00001730 l     O .data	00000004 decoder_parser_parseheaders_BYTE
00001734 l     O .data	00000004 decoder_merger_YUV
00001738 l     O .data	00000004 display_B
0000173c l     O .data	00000004 decoder_parser_parseheaders_QP
00001740 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QP
00001744 l     O .data	00000004 decoder_parser_parseheaders_HEIGHT
00001748 l     O .data	00000004 display_HEIGHT
0000174c l     O .data	00000004 decoder_parser_parseheaders_RUN
00001750 l     O .data	00000004 decoder_parser_blkexp_RUN
00001754 l     O .data	00000004 decoder_parser_parseheaders_MV
00001758 l     O .data	00000004 decoder_parser_mvrecon_MVIN
0000175c l     O .data	00000004 decoder_parser_parseheaders_WIDTH
00001760 l     O .data	00000004 display_WIDTH
00001764 l     O .data	00000004 decoder_parser_parseheaders_LAST
00001768 l     O .data	00000004 decoder_parser_blkexp_LAST
0000176c l     O .data	00000004 decoder_parser_parseheaders_BTYPE
00001770 l     O .data	00000004 decoder_parser_mvseq_BTYPE
00001774 l     O .data	00000004 decoder_parser_mvrecon_BTYPE
00001778 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
0000177c l     O .data	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
00001780 l     O .data	00000004 decoder_motion_add_BTYPE
00001784 l     O .data	00000004 decoder_motion_framebuf_BTYPE
00001788 l     O .data	00000004 decoder_parser_parseheaders_VALUE
0000178c l     O .data	00000004 decoder_parser_blkexp_VALUE
00001790 l     O .data	00000004 decoder_parser_mvseq_A
00001794 l     O .data	00000004 decoder_parser_mvrecon_A
00001798 l     O .data	00000004 decoder_parser_blkexp_QFS
0000179c l     O .data	00000004 decoder_texture_DCsplit_IN
000017a0 l     O .data	00000004 decoder_parser_mvrecon_MV
000017a4 l     O .data	00000004 decoder_motion_framebuf_MV
000017a8 l     O .data	00000004 decoder_texture_DCsplit_AC
000017ac l     O .data	00000004 decoder_texture_IS_QFS_AC
000017b0 l     O .data	00000004 decoder_texture_DCsplit_DC
000017b4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
000017b8 l     O .data	00000004 decoder_texture_IS_PQF_AC
000017bc l     O .data	00000004 decoder_texture_IAP_PQF_AC
000017c0 l     O .data	00000004 decoder_texture_IAP_QF_AC
000017c4 l     O .data	00000004 decoder_texture_IQ_AC
000017c8 l     O .data	00000004 decoder_texture_IQ_OUT
000017cc l     O .data	00000004 decoder_texture_idct2d_IN
000017d0 l     O .data	00000004 decoder_texture_idct2d_OUT
000017d4 l     O .data	00000004 decoder_motion_add_TEX
000017d8 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_B
000017dc l     O .data	00000004 decoder_texture_DCReconstruction_invpred_B
000017e0 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_A
000017e4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_A
000017e8 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_C
000017ec l     O .data	00000004 decoder_texture_DCReconstruction_invpred_C
000017f0 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_PTR
000017f4 l     O .data	00000004 decoder_texture_IAP_PTR
000017f8 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
000017fc l     O .data	00000004 decoder_texture_IQ_DC
00001800 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_MODE
00001804 l     O .data	00000004 decoder_texture_IS_AC_PRED_DIR
00001808 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
0000180c l     O .data	00000004 decoder_texture_idct2d_SIGNED
00001810 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
00001814 l     O .data	00000004 decoder_texture_IAP_AC_PRED_DIR
00001818 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QUANT
0000181c l     O .data	00000004 decoder_texture_IQ_QP
00001820 l     O .data	00000004 decoder_motion_interpolation_MOT
00001824 l     O .data	00000004 decoder_motion_add_MOT
00001828 l     O .data	00000004 decoder_motion_add_VID
0000182c l     O .data	00000004 decoder_motion_framebuf_WD
00001830 l     O .data	00000004 decoder_merger_YUV_i
00001834 l     O .data	00000004 decoder_motion_framebuf_RD
00001838 l     O .data	00000004 decoder_motion_interpolation_RD
0000183c l     O .data	00000004 decoder_motion_framebuf_halfpel
00001840 l     O .data	00000004 decoder_motion_interpolation_halfpel
2006cd3c l     O actors_code_section	00000004 index_AC_PRED_DIR
2006cd40 l     O actors_code_section	00000004 numTokens_AC_PRED_DIR
2006cd44 l     O actors_code_section	00000004 index_QFS_AC
2006cd48 l     O actors_code_section	00000004 numTokens_QFS_AC
2006cd4c l     O actors_code_section	00000004 index_PQF_AC
2006cd50 l     O actors_code_section	00000004 numFree_PQF_AC
2005044c l     O actors_code_section	000000c0 Scanmode
20052a3c l     O actors_code_section	00000001 needInit
20043068 l     F actors_code_section	000000a0 read_AC_PRED_DIR
20043108 l     F actors_code_section	00000054 read_end_AC_PRED_DIR
2004315c l     F actors_code_section	000000a0 read_QFS_AC
200431fc l     F actors_code_section	00000054 read_end_QFS_AC
20043250 l     F actors_code_section	000000a0 write_PQF_AC
200432f0 l     F actors_code_section	00000054 write_end_PQF_AC
20043344 l     F actors_code_section	00000074 isSchedulable_skip
200433b8 l     F actors_code_section	000000a8 skip
20043460 l     F actors_code_section	00000040 isSchedulable_rw
200434a0 l     F actors_code_section	000001f4 rw
00000000 l    df *ABS*	00000000 decoder_texture_idct2d.o
200438f4 l     F actors_code_section	00000080 fifo_i8_has_tokens
20043974 l     F actors_code_section	00000064 fifo_i8_get_num_tokens
200439d8 l     F actors_code_section	000000b4 fifo_i8_has_room
20043a8c l     F actors_code_section	000000b8 fifo_i8_get_room
20043b44 l     F actors_code_section	00000084 fifo_i8_clear
20043bc8 l     F actors_code_section	000000a0 fifo_i8_read_1
20043c68 l     F actors_code_section	00000084 fifo_i8_write_1
20043cec l     F actors_code_section	00000080 fifo_i16_has_tokens
20043d6c l     F actors_code_section	00000064 fifo_i16_get_num_tokens
20043dd0 l     F actors_code_section	000000b4 fifo_i16_has_room
20043e84 l     F actors_code_section	000000b8 fifo_i16_get_room
20043f3c l     F actors_code_section	00000084 fifo_i16_clear
20043fc0 l     F actors_code_section	000000a4 fifo_i16_read_1
20044064 l     F actors_code_section	00000088 fifo_i16_write_1
200440ec l     F actors_code_section	00000080 fifo_i32_has_tokens
2004416c l     F actors_code_section	00000064 fifo_i32_get_num_tokens
200441d0 l     F actors_code_section	000000b4 fifo_i32_has_room
20044284 l     F actors_code_section	000000b8 fifo_i32_get_room
2004433c l     F actors_code_section	00000084 fifo_i32_clear
200443c0 l     F actors_code_section	000000a0 fifo_i32_read_1
20044460 l     F actors_code_section	00000084 fifo_i32_write_1
200444e4 l     F actors_code_section	00000080 fifo_i64_has_tokens
20044564 l     F actors_code_section	00000064 fifo_i64_get_num_tokens
200445c8 l     F actors_code_section	000000b4 fifo_i64_has_room
2004467c l     F actors_code_section	000000b8 fifo_i64_get_room
20044734 l     F actors_code_section	00000084 fifo_i64_clear
200447b8 l     F actors_code_section	000000b4 fifo_i64_read_1
2004486c l     F actors_code_section	00000090 fifo_i64_write_1
200448fc l     F actors_code_section	00000080 fifo_u8_has_tokens
2004497c l     F actors_code_section	00000064 fifo_u8_get_num_tokens
200449e0 l     F actors_code_section	000000b4 fifo_u8_has_room
20044a94 l     F actors_code_section	000000b8 fifo_u8_get_room
20044b4c l     F actors_code_section	00000084 fifo_u8_clear
20044bd0 l     F actors_code_section	0000009c fifo_u8_read_1
20044c6c l     F actors_code_section	00000084 fifo_u8_write_1
20044cf0 l     F actors_code_section	00000080 fifo_u16_has_tokens
20044d70 l     F actors_code_section	00000064 fifo_u16_get_num_tokens
20044dd4 l     F actors_code_section	000000b4 fifo_u16_has_room
20044e88 l     F actors_code_section	000000b8 fifo_u16_get_room
20044f40 l     F actors_code_section	00000084 fifo_u16_clear
20044fc4 l     F actors_code_section	000000a0 fifo_u16_read_1
20045064 l     F actors_code_section	00000088 fifo_u16_write_1
200450ec l     F actors_code_section	00000080 fifo_u32_has_tokens
2004516c l     F actors_code_section	00000064 fifo_u32_get_num_tokens
200451d0 l     F actors_code_section	000000b4 fifo_u32_has_room
20045284 l     F actors_code_section	000000b8 fifo_u32_get_room
2004533c l     F actors_code_section	00000084 fifo_u32_clear
200453c0 l     F actors_code_section	000000a0 fifo_u32_read_1
20045460 l     F actors_code_section	00000084 fifo_u32_write_1
200454e4 l     F actors_code_section	00000080 fifo_u64_has_tokens
20045564 l     F actors_code_section	00000064 fifo_u64_get_num_tokens
200455c8 l     F actors_code_section	000000b4 fifo_u64_has_room
2004567c l     F actors_code_section	000000b8 fifo_u64_get_room
20045734 l     F actors_code_section	00000084 fifo_u64_clear
200457b8 l     F actors_code_section	000000b4 fifo_u64_read_1
2004586c l     F actors_code_section	00000090 fifo_u64_write_1
200458fc l     F actors_code_section	00000080 fifo_float_has_tokens
2004597c l     F actors_code_section	00000064 fifo_float_get_num_tokens
200459e0 l     F actors_code_section	000000b4 fifo_float_has_room
20045a94 l     F actors_code_section	000000b8 fifo_float_get_room
20045b4c l     F actors_code_section	00000084 fifo_float_clear
20045bd0 l     F actors_code_section	000000a0 fifo_float_read_1
20045c70 l     F actors_code_section	00000084 fifo_float_write_1
20052a40 l     O actors_code_section	00000014 fifo_0
20052a54 l     O actors_code_section	00000014 fifo_1
20052a68 l     O actors_code_section	00000014 fifo_2
20052a7c l     O actors_code_section	00000014 fifo_3
20052a90 l     O actors_code_section	00000014 fifo_4
20052aa4 l     O actors_code_section	00000014 fifo_5
20052ab8 l     O actors_code_section	00000014 fifo_6
20052acc l     O actors_code_section	00000014 fifo_7
20052ae0 l     O actors_code_section	00000014 fifo_8
20052af4 l     O actors_code_section	00000014 fifo_9
20052b08 l     O actors_code_section	00000014 fifo_10
20052b1c l     O actors_code_section	00000014 fifo_11
20052b30 l     O actors_code_section	00000014 fifo_12
20052b44 l     O actors_code_section	00000014 fifo_13
20052b58 l     O actors_code_section	00000014 fifo_14
20052b6c l     O actors_code_section	00000014 fifo_15
20052b80 l     O actors_code_section	00000014 fifo_16
20052b94 l     O actors_code_section	00000014 fifo_17
20052ba8 l     O actors_code_section	00000014 fifo_18
20052bbc l     O actors_code_section	00000014 fifo_19
20052bd0 l     O actors_code_section	00000014 fifo_20
20052be4 l     O actors_code_section	00000014 fifo_21
20052bf8 l     O actors_code_section	00000014 fifo_22
20052c0c l     O actors_code_section	00000014 fifo_23
20052c20 l     O actors_code_section	00000014 fifo_24
20052c34 l     O actors_code_section	00000014 fifo_25
20052c48 l     O actors_code_section	00000014 fifo_26
20052c5c l     O actors_code_section	00000014 fifo_27
20052c70 l     O actors_code_section	00000014 fifo_28
20052c84 l     O actors_code_section	00000014 fifo_29
20052c98 l     O actors_code_section	00000014 fifo_30
20052cac l     O actors_code_section	00000014 fifo_31
00001844 l     O .data	00000004 source_O
00001848 l     O .data	00000004 decoder_parser_parseheaders_BYTE
0000184c l     O .data	00000004 decoder_merger_YUV
00001850 l     O .data	00000004 display_B
00001854 l     O .data	00000004 decoder_parser_parseheaders_QP
00001858 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QP
0000185c l     O .data	00000004 decoder_parser_parseheaders_HEIGHT
00001860 l     O .data	00000004 display_HEIGHT
00001864 l     O .data	00000004 decoder_parser_parseheaders_RUN
00001868 l     O .data	00000004 decoder_parser_blkexp_RUN
0000186c l     O .data	00000004 decoder_parser_parseheaders_MV
00001870 l     O .data	00000004 decoder_parser_mvrecon_MVIN
00001874 l     O .data	00000004 decoder_parser_parseheaders_WIDTH
00001878 l     O .data	00000004 display_WIDTH
0000187c l     O .data	00000004 decoder_parser_parseheaders_LAST
00001880 l     O .data	00000004 decoder_parser_blkexp_LAST
00001884 l     O .data	00000004 decoder_parser_parseheaders_BTYPE
00001888 l     O .data	00000004 decoder_parser_mvseq_BTYPE
0000188c l     O .data	00000004 decoder_parser_mvrecon_BTYPE
00001890 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_BTYPE
00001894 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_BTYPE
00001898 l     O .data	00000004 decoder_motion_add_BTYPE
0000189c l     O .data	00000004 decoder_motion_framebuf_BTYPE
000018a0 l     O .data	00000004 decoder_parser_parseheaders_VALUE
000018a4 l     O .data	00000004 decoder_parser_blkexp_VALUE
000018a8 l     O .data	00000004 decoder_parser_mvseq_A
000018ac l     O .data	00000004 decoder_parser_mvrecon_A
000018b0 l     O .data	00000004 decoder_parser_blkexp_QFS
000018b4 l     O .data	00000004 decoder_texture_DCsplit_IN
000018b8 l     O .data	00000004 decoder_parser_mvrecon_MV
000018bc l     O .data	00000004 decoder_motion_framebuf_MV
000018c0 l     O .data	00000004 decoder_texture_DCsplit_AC
000018c4 l     O .data	00000004 decoder_texture_IS_QFS_AC
000018c8 l     O .data	00000004 decoder_texture_DCsplit_DC
000018cc l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QFS_DC
000018d0 l     O .data	00000004 decoder_texture_IS_PQF_AC
000018d4 l     O .data	00000004 decoder_texture_IAP_PQF_AC
000018d8 l     O .data	00000004 decoder_texture_IAP_QF_AC
000018dc l     O .data	00000004 decoder_texture_IQ_AC
000018e0 l     O .data	00000004 decoder_texture_IQ_OUT
000018e4 l     O .data	00000004 decoder_texture_idct2d_IN
000018e8 l     O .data	00000004 decoder_texture_idct2d_OUT
000018ec l     O .data	00000004 decoder_motion_add_TEX
000018f0 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_B
000018f4 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_B
000018f8 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_A
000018fc l     O .data	00000004 decoder_texture_DCReconstruction_invpred_A
00001900 l     O .data	00000004 decoder_texture_DCReconstruction_addressing_C
00001904 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_C
00001908 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_PTR
0000190c l     O .data	00000004 decoder_texture_IAP_PTR
00001910 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QF_DC
00001914 l     O .data	00000004 decoder_texture_IQ_DC
00001918 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_MODE
0000191c l     O .data	00000004 decoder_texture_IS_AC_PRED_DIR
00001920 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_SIGNED
00001924 l     O .data	00000004 decoder_texture_idct2d_SIGNED
00001928 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_AC_PRED_DIR
0000192c l     O .data	00000004 decoder_texture_IAP_AC_PRED_DIR
00001930 l     O .data	00000004 decoder_texture_DCReconstruction_invpred_QUANT
00001934 l     O .data	00000004 decoder_texture_IQ_QP
00001938 l     O .data	00000004 decoder_motion_interpolation_MOT
0000193c l     O .data	00000004 decoder_motion_add_MOT
00001940 l     O .data	00000004 decoder_motion_add_VID
00001944 l     O .data	00000004 decoder_motion_framebuf_WD
00001948 l     O .data	00000004 decoder_merger_YUV_i
0000194c l     O .data	00000004 decoder_motion_framebuf_RD
00001950 l     O .data	00000004 decoder_motion_interpolation_RD
00001954 l     O .data	00000004 decoder_motion_framebuf_halfpel
00001958 l     O .data	00000004 decoder_motion_interpolation_halfpel
2006cd54 l     O actors_code_section	00000004 index_IN
2006cd58 l     O actors_code_section	00000004 numTokens_IN
2006cd5c l     O actors_code_section	00000004 index_SIGNED
2006cd60 l     O actors_code_section	00000004 numTokens_SIGNED
2006cd64 l     O actors_code_section	00000004 index_OUT
2006cd68 l     O actors_code_section	00000004 numFree_OUT
2005050c l     O actors_code_section	00000100 scale
20052cc0 l     O actors_code_section	00000001 needInit
20045cf4 l     F actors_code_section	000000a0 read_IN
20045d94 l     F actors_code_section	00000054 read_end_IN
20045de8 l     F actors_code_section	000000a0 read_SIGNED
20045e88 l     F actors_code_section	00000054 read_end_SIGNED
20045edc l     F actors_code_section	000000a0 write_OUT
20045f7c l     F actors_code_section	00000054 write_end_OUT
20045fd0 l     F actors_code_section	0000005c pmul_1_1
2004602c l     F actors_code_section	00000074 pmul_1_2
200460a0 l     F actors_code_section	0000005c pmul_2_1
200460fc l     F actors_code_section	00000040 pmul_2_2
2004613c l     F actors_code_section	00000068 pmul_3_1
200461a4 l     F actors_code_section	00000064 pmul_3_2
20046208 l     F actors_code_section	00000080 clip
20046288 l     F actors_code_section	000004a0 idct1d
20046728 l     F actors_code_section	00000040 isSchedulable_untagged_0
20046768 l     F actors_code_section	0000036c untagged_0
00000000 l    df *ABS*	00000000 c:/xilinx/sdk/2014.2/gnu/microblaze/nt/bin/../lib/gcc/microblaze-xilinx-elf/4.8.3/bs/m/le/crtbegin.o
00000698 l     O .data	00000000 force_to_data
00000680 l     O .ctors	00000000 __CTOR_LIST__
00000688 l     O .dtors	00000000 __DTOR_LIST__
000026e4 l     O .eh_frame	00000000 __EH_FRAME_BEGIN__
000026e8 l     O .jcr	00000000 __JCR_LIST__
00000070 l       .text	00000000 deregister_tm_clones
000000b8 l       .text	00000000 register_tm_clones
00000108 l       .text	00000000 __do_global_dtors_aux
000026f0 l     O .bss	00000001 completed.2708
000026f4 l     O .bss	00000004 dtor_idx.2710
000001b0 l       .text	00000000 frame_dummy
000026f8 l     O .bss	00000018 object.2720
00000000 l    df *ABS*	00000000 lib_a-impure.o
000006a0 l     O .data	000000f0 impure_data
00000000 l    df *ABS*	00000000 lib_a-__call_atexit.o
00002710 l     O .bss	00000004 __atexit_lock
00000000 l    df *ABS*	00000000 c:/xilinx/sdk/2014.2/gnu/microblaze/nt/bin/../lib/gcc/microblaze-xilinx-elf/4.8.3/bs/m/le/crtend.o
00000794 l     O .data	00000000 force_to_data
00000684 l     O .ctors	00000000 __CTOR_END__
000026e4 l     O .eh_frame	00000000 __FRAME_END__
000026e8 l     O .jcr	00000000 __JCR_END__
000005f0 l       .text	00000000 __do_global_ctors_aux
00000000 l    df *ABS*	00000000 
0000195c l     O .got.plt	00000000 _GLOBAL_OFFSET_TABLE_
200138a4 g     F actors_code_section	00000048 decoder_motion_framebuf_initialize
00000680 g       .ctors	00000000 ___CTORS_LIST___
20017358 g     F actors_code_section	0000003c decoder_motion_interpolation_initialize
2003d75c g     F actors_code_section	0000004c decoder_texture_IAP_initialize
200002d0 g     F sched_callers_section	00000048 call_decoder_texture_DCReconstruction_addressing_scheduler
000026f0 g       .bss	00000000 __sbss_start
20000000 g     F sched_callers_section	00000048 call_decoder_merger_scheduler
200409ac g     F actors_code_section	000002bc decoder_texture_IQ_scheduler
2000add0 g     F actors_code_section	0000034c decoder_merger_scheduler
20000048 g     F sched_callers_section	00000048 call_decoder_parser_parseheaders_scheduler
2000e3ac g     F actors_code_section	00000774 decoder_motion_add_scheduler
00001968 g     O .got	00000000 .hidden __TMC_END__
000026f0 g       .sdata	00000000 __sdata_start
0000068c g     O .dtors	00000000 .hidden __DTOR_END__
00000698 g       .rodata	00000000 __rodata_end
00000698 g       .sdata2	00000000 __sbss2_end
0000069c g     O .data	00000000 .hidden __dso_handle
00000208 g     F .text	00000000 _crtinit
20032214 g     F actors_code_section	00000528 decoder_texture_DCReconstruction_addressing_scheduler
00002b18 g       .heap	00000000 _heap_end
200321c8 g     F actors_code_section	0000004c decoder_texture_DCReconstruction_addressing_initialize
00000694 g     O .rodata	00000004 _global_impure_ptr
00002714 g       .bss	00000000 __bss_end
000026f0 g       .bss	00000000 __tbss_start
2001a538 g     F actors_code_section	0000004c decoder_parser_blkexp_initialize
200138ec g     F actors_code_section	000000b0 decoder_motion_framebuf_outside_FSM_scheduler
2003a4b4 g     F actors_code_section	000001a8 decoder_texture_DCsplit_scheduler
20000090 g     F sched_callers_section	00000048 call_decoder_parser_mvseq_scheduler
00000630 g       .init	00000000 __init
00002718 g       .heap	00000000 _heap_start
2003d7a8 g     F actors_code_section	000003ec decoder_texture_IAP_scheduler
000026f0 g       .bss	00000000 __sbss_end
00000000  w      *UND*	00000000 __sf_fake_stderr
00000000  w      *UND*	00000000 __deregister_frame_info
20000318 g     F sched_callers_section	00000048 call_decoder_texture_DCReconstruction_invpred_scheduler
2001eeb4 g     F actors_code_section	00001230 decoder_parser_mvrecon_scheduler
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
2003a478 g     F actors_code_section	0000003c decoder_texture_DCsplit_initialize
00000680 g       .ctors	00000000 __CTOR_LIST__
2001399c g     F actors_code_section	000006d8 decoder_motion_framebuf_scheduler
00000698 g       .sdata2	00000000 __sbss2_start
20000360 g     F sched_callers_section	00000048 call_decoder_motion_interpolation_scheduler
000003ec g     F .text	00000204 __call_exitprocs
00000000 g     F .vectors.reset	00000000 _start
20017394 g     F actors_code_section	000003f0 decoder_motion_interpolation_scheduler
00000690 g       .rodata	00000000 __rodata_start
20046b10 g     F actors_code_section	00000194 decoder_texture_idct2d_scheduler
000026f0 g       *ABS*	00000000 _SDA_BASE_
0000195c g       .data	00000000 __data_end
00000374  w    F .text	00000000 _exception_handler
2000ad84 g     F actors_code_section	0000004c decoder_merger_initialize
20046ad4 g     F actors_code_section	0000003c decoder_texture_idct2d_initialize
200001f8 g     F sched_callers_section	00000048 call_decoder_texture_IAP_scheduler
200370e8 g     F actors_code_section	00000a7c decoder_texture_DCReconstruction_invpred_scheduler
200436d0 g     F actors_code_section	00000224 decoder_texture_IS_scheduler
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
00000000  w      *UND*	00000000 __sf_fake_stdin
000026f0 g       .bss	00000000 __bss_start
00000400 g       *ABS*	00000000 _STACK_SIZE
000026f0 g       .bss	00000000 __tdata_start
000026f0 g       .bss	00000000 __tdata_end
2001a584 g     F actors_code_section	00000330 decoder_parser_blkexp_scheduler
00000294 g     F .text	000000e0 main
00000400 g       *ABS*	00000000 _HEAP_SIZE
20000120 g     F sched_callers_section	00000048 call_decoder_parser_mvrecon_scheduler
2002cb24 g     F actors_code_section	000000a8 decoder_parser_parseheaders_outside_FSM_scheduler
00000050 g     F .text	00000000 _start1
00002b18 g       .stack	00000000 _stack_end
200000d8 g     F sched_callers_section	00000048 call_decoder_parser_blkexp_scheduler
000026f0 g       .sdata	00000000 __sdata_end
00000698 g       .sdata2	00000000 __sdata2_start
00000688 g       .ctors	00000000 __CTOR_END__
00000688 g       .dtors	00000000 ___DTORS_LIST___
00000688 g       .dtors	00000000 __DTOR_LIST__
200001b0 g     F sched_callers_section	00000048 call_decoder_texture_IS_scheduler
2000e364 g     F actors_code_section	00000048 decoder_motion_add_initialize
20000168 g     F sched_callers_section	00000048 call_decoder_texture_DCsplit_scheduler
00000664 g       .fini	00000000 __fini
00000790 g     O .data	00000004 _impure_ptr
200003f0 g     F sched_callers_section	00000048 call_decoder_motion_framebuf_scheduler
00000698 g       .sdata2	00000000 __sdata2_end
00000380 g       .text	00000000 _interrupt_handler
2001ee68 g     F actors_code_section	0000004c decoder_parser_mvrecon_initialize
20023da0 g     F actors_code_section	0000004c decoder_parser_mvseq_initialize
00000688 g       .ctors	00000000 ___CTORS_END___
2002cbcc g     F actors_code_section	00001ac4 decoder_parser_parseheaders_scheduler
00002f18 g       .stack	00000000 __stack
00002f18 g       .stack	00000000 _end
00002718 g       .heap	00000000 _heap
20043694 g     F actors_code_section	0000003c decoder_texture_IS_initialize
00000398 g     F .text	00000054 exit
20000240 g     F sched_callers_section	00000048 call_decoder_texture_IQ_scheduler
00000378 g       .text	00000000 _hw_exception_handler
000026f0 g       .bss	00000000 __tbss_end
00000000  w      *UND*	00000000 __sf_fake_stdout
00000390 g       .text	00000000 _program_init
0000006c g     F .text	00000000 _exit
20040960 g     F actors_code_section	0000004c decoder_texture_IQ_initialize
00002f18 g       .stack	00000000 _stack
2002cad8 g     F actors_code_section	0000004c decoder_parser_parseheaders_initialize
2003709c g     F actors_code_section	0000004c decoder_texture_DCReconstruction_invpred_initialize
00000698 g       .data	00000000 __data_start
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00000388 g       .text	00000000 _program_clean
20023dec g     F actors_code_section	000005b4 decoder_parser_mvseq_scheduler
00000698 g       *ABS*	00000000 _SDA2_BASE_
00000000  w      *UND*	00000000 __register_frame_info
200003a8 g     F sched_callers_section	00000048 call_decoder_motion_add_scheduler
20000288 g     F sched_callers_section	00000048 call_decoder_texture_idct2d_scheduler
00000000  w      *UND*	00000000 free



Disassembly of section .vectors.reset:

00000000 <_start>:
   0:	b8080050 	brai	80	// 50 <_start1>

Disassembly of section .vectors.sw_exception:

00000008 <_vector_sw_exception>:
   8:	b8080374 	brai	884	// 374 <_exception_handler>

Disassembly of section .vectors.interrupt:

00000010 <_vector_interrupt>:
  10:	b8080380 	brai	896	// 380 <_interrupt_handler>

Disassembly of section .vectors.hw_exception:

00000020 <_vector_hw_exception>:
  20:	b8080378 	brai	888	// 378 <_hw_exception_handler>

Disassembly of section sched_callers_section:

20000000 <call_decoder_merger_scheduler>:
// Generated from "fr.irisa.mpeg4.part2.sp.Top_decoder_serial"
void call_decoder_merger_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_merger_scheduler(){
20000000:	3021ffdc 	addik	r1, r1, -36
20000004:	f9e10000 	swi	r15, r1, 0
20000008:	fa61001c 	swi	r19, r1, 28
2000000c:	fa810020 	swi	r20, r1, 32
20000010:	12610000 	addk	r19, r1, r0
20000014:	96808000 	mfs	r20, rpc
20000018:	b000e000 	imm	-8192
2000001c:	32941948 	addik	r20, r20, 6472
	decoder_merger_scheduler();
20000020:	b0000000 	imm	0
20000024:	b9f4adac 	brlid	r15, -21076	// 2000add0 <decoder_merger_scheduler>
20000028:	80000000 	or	r0, r0, r0
}
2000002c:	e9e10000 	lwi	r15, r1, 0
20000030:	10330000 	addk	r1, r19, r0
20000034:	ea61001c 	lwi	r19, r1, 28
20000038:	ea810020 	lwi	r20, r1, 32
2000003c:	30210024 	addik	r1, r1, 36
20000040:	b60f0008 	rtsd	r15, 8
20000044:	80000000 	or	r0, r0, r0

20000048 <call_decoder_parser_parseheaders_scheduler>:
void call_decoder_parser_parseheaders_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_parser_parseheaders_scheduler(){
20000048:	3021ffdc 	addik	r1, r1, -36
2000004c:	f9e10000 	swi	r15, r1, 0
20000050:	fa61001c 	swi	r19, r1, 28
20000054:	fa810020 	swi	r20, r1, 32
20000058:	12610000 	addk	r19, r1, r0
2000005c:	96808000 	mfs	r20, rpc
20000060:	b000e000 	imm	-8192
20000064:	32941900 	addik	r20, r20, 6400
	decoder_parser_parseheaders_scheduler();
20000068:	b0000002 	imm	2
2000006c:	b9f4cb60 	brlid	r15, -13472	// 2002cbcc <decoder_parser_parseheaders_scheduler>
20000070:	80000000 	or	r0, r0, r0
}
20000074:	e9e10000 	lwi	r15, r1, 0
20000078:	10330000 	addk	r1, r19, r0
2000007c:	ea61001c 	lwi	r19, r1, 28
20000080:	ea810020 	lwi	r20, r1, 32
20000084:	30210024 	addik	r1, r1, 36
20000088:	b60f0008 	rtsd	r15, 8
2000008c:	80000000 	or	r0, r0, r0

20000090 <call_decoder_parser_mvseq_scheduler>:
void call_decoder_parser_mvseq_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_parser_mvseq_scheduler(){
20000090:	3021ffdc 	addik	r1, r1, -36
20000094:	f9e10000 	swi	r15, r1, 0
20000098:	fa61001c 	swi	r19, r1, 28
2000009c:	fa810020 	swi	r20, r1, 32
200000a0:	12610000 	addk	r19, r1, r0
200000a4:	96808000 	mfs	r20, rpc
200000a8:	b000e000 	imm	-8192
200000ac:	329418b8 	addik	r20, r20, 6328
	decoder_parser_mvseq_scheduler();
200000b0:	b0000002 	imm	2
200000b4:	b9f43d38 	brlid	r15, 15672	// 20023dec <decoder_parser_mvseq_scheduler>
200000b8:	80000000 	or	r0, r0, r0
}
200000bc:	e9e10000 	lwi	r15, r1, 0
200000c0:	10330000 	addk	r1, r19, r0
200000c4:	ea61001c 	lwi	r19, r1, 28
200000c8:	ea810020 	lwi	r20, r1, 32
200000cc:	30210024 	addik	r1, r1, 36
200000d0:	b60f0008 	rtsd	r15, 8
200000d4:	80000000 	or	r0, r0, r0

200000d8 <call_decoder_parser_blkexp_scheduler>:
void call_decoder_parser_blkexp_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_parser_blkexp_scheduler(){
200000d8:	3021ffdc 	addik	r1, r1, -36
200000dc:	f9e10000 	swi	r15, r1, 0
200000e0:	fa61001c 	swi	r19, r1, 28
200000e4:	fa810020 	swi	r20, r1, 32
200000e8:	12610000 	addk	r19, r1, r0
200000ec:	96808000 	mfs	r20, rpc
200000f0:	b000e000 	imm	-8192
200000f4:	32941870 	addik	r20, r20, 6256
	decoder_parser_blkexp_scheduler();
200000f8:	b0000001 	imm	1
200000fc:	b9f4a488 	brlid	r15, -23416	// 2001a584 <decoder_parser_blkexp_scheduler>
20000100:	80000000 	or	r0, r0, r0
}
20000104:	e9e10000 	lwi	r15, r1, 0
20000108:	10330000 	addk	r1, r19, r0
2000010c:	ea61001c 	lwi	r19, r1, 28
20000110:	ea810020 	lwi	r20, r1, 32
20000114:	30210024 	addik	r1, r1, 36
20000118:	b60f0008 	rtsd	r15, 8
2000011c:	80000000 	or	r0, r0, r0

20000120 <call_decoder_parser_mvrecon_scheduler>:
void call_decoder_parser_mvrecon_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_parser_mvrecon_scheduler(){
20000120:	3021ffdc 	addik	r1, r1, -36
20000124:	f9e10000 	swi	r15, r1, 0
20000128:	fa61001c 	swi	r19, r1, 28
2000012c:	fa810020 	swi	r20, r1, 32
20000130:	12610000 	addk	r19, r1, r0
20000134:	96808000 	mfs	r20, rpc
20000138:	b000e000 	imm	-8192
2000013c:	32941828 	addik	r20, r20, 6184
	decoder_parser_mvrecon_scheduler();
20000140:	b0000001 	imm	1
20000144:	b9f4ed70 	brlid	r15, -4752	// 2001eeb4 <decoder_parser_mvrecon_scheduler>
20000148:	80000000 	or	r0, r0, r0
}
2000014c:	e9e10000 	lwi	r15, r1, 0
20000150:	10330000 	addk	r1, r19, r0
20000154:	ea61001c 	lwi	r19, r1, 28
20000158:	ea810020 	lwi	r20, r1, 32
2000015c:	30210024 	addik	r1, r1, 36
20000160:	b60f0008 	rtsd	r15, 8
20000164:	80000000 	or	r0, r0, r0

20000168 <call_decoder_texture_DCsplit_scheduler>:
void call_decoder_texture_DCsplit_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_texture_DCsplit_scheduler(){
20000168:	3021ffdc 	addik	r1, r1, -36
2000016c:	f9e10000 	swi	r15, r1, 0
20000170:	fa61001c 	swi	r19, r1, 28
20000174:	fa810020 	swi	r20, r1, 32
20000178:	12610000 	addk	r19, r1, r0
2000017c:	96808000 	mfs	r20, rpc
20000180:	b000e000 	imm	-8192
20000184:	329417e0 	addik	r20, r20, 6112
	decoder_texture_DCsplit_scheduler();
20000188:	b0000003 	imm	3
2000018c:	b9f4a328 	brlid	r15, -23768	// 2003a4b4 <decoder_texture_DCsplit_scheduler>
20000190:	80000000 	or	r0, r0, r0
}
20000194:	e9e10000 	lwi	r15, r1, 0
20000198:	10330000 	addk	r1, r19, r0
2000019c:	ea61001c 	lwi	r19, r1, 28
200001a0:	ea810020 	lwi	r20, r1, 32
200001a4:	30210024 	addik	r1, r1, 36
200001a8:	b60f0008 	rtsd	r15, 8
200001ac:	80000000 	or	r0, r0, r0

200001b0 <call_decoder_texture_IS_scheduler>:
void call_decoder_texture_IS_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_texture_IS_scheduler(){
200001b0:	3021ffdc 	addik	r1, r1, -36
200001b4:	f9e10000 	swi	r15, r1, 0
200001b8:	fa61001c 	swi	r19, r1, 28
200001bc:	fa810020 	swi	r20, r1, 32
200001c0:	12610000 	addk	r19, r1, r0
200001c4:	96808000 	mfs	r20, rpc
200001c8:	b000e000 	imm	-8192
200001cc:	32941798 	addik	r20, r20, 6040
	decoder_texture_IS_scheduler();
200001d0:	b0000004 	imm	4
200001d4:	b9f434fc 	brlid	r15, 13564	// 200436d0 <decoder_texture_IS_scheduler>
200001d8:	80000000 	or	r0, r0, r0
}
200001dc:	e9e10000 	lwi	r15, r1, 0
200001e0:	10330000 	addk	r1, r19, r0
200001e4:	ea61001c 	lwi	r19, r1, 28
200001e8:	ea810020 	lwi	r20, r1, 32
200001ec:	30210024 	addik	r1, r1, 36
200001f0:	b60f0008 	rtsd	r15, 8
200001f4:	80000000 	or	r0, r0, r0

200001f8 <call_decoder_texture_IAP_scheduler>:
void call_decoder_texture_IAP_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_texture_IAP_scheduler(){
200001f8:	3021ffdc 	addik	r1, r1, -36
200001fc:	f9e10000 	swi	r15, r1, 0
20000200:	fa61001c 	swi	r19, r1, 28
20000204:	fa810020 	swi	r20, r1, 32
20000208:	12610000 	addk	r19, r1, r0
2000020c:	96808000 	mfs	r20, rpc
20000210:	b000e000 	imm	-8192
20000214:	32941750 	addik	r20, r20, 5968
	decoder_texture_IAP_scheduler();
20000218:	b0000003 	imm	3
2000021c:	b9f4d58c 	brlid	r15, -10868	// 2003d7a8 <decoder_texture_IAP_scheduler>
20000220:	80000000 	or	r0, r0, r0
}
20000224:	e9e10000 	lwi	r15, r1, 0
20000228:	10330000 	addk	r1, r19, r0
2000022c:	ea61001c 	lwi	r19, r1, 28
20000230:	ea810020 	lwi	r20, r1, 32
20000234:	30210024 	addik	r1, r1, 36
20000238:	b60f0008 	rtsd	r15, 8
2000023c:	80000000 	or	r0, r0, r0

20000240 <call_decoder_texture_IQ_scheduler>:
void call_decoder_texture_IQ_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_texture_IQ_scheduler(){
20000240:	3021ffdc 	addik	r1, r1, -36
20000244:	f9e10000 	swi	r15, r1, 0
20000248:	fa61001c 	swi	r19, r1, 28
2000024c:	fa810020 	swi	r20, r1, 32
20000250:	12610000 	addk	r19, r1, r0
20000254:	96808000 	mfs	r20, rpc
20000258:	b000e000 	imm	-8192
2000025c:	32941708 	addik	r20, r20, 5896
	decoder_texture_IQ_scheduler();
20000260:	b0000004 	imm	4
20000264:	b9f40748 	brlid	r15, 1864	// 200409ac <decoder_texture_IQ_scheduler>
20000268:	80000000 	or	r0, r0, r0
}
2000026c:	e9e10000 	lwi	r15, r1, 0
20000270:	10330000 	addk	r1, r19, r0
20000274:	ea61001c 	lwi	r19, r1, 28
20000278:	ea810020 	lwi	r20, r1, 32
2000027c:	30210024 	addik	r1, r1, 36
20000280:	b60f0008 	rtsd	r15, 8
20000284:	80000000 	or	r0, r0, r0

20000288 <call_decoder_texture_idct2d_scheduler>:
void call_decoder_texture_idct2d_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_texture_idct2d_scheduler(){
20000288:	3021ffdc 	addik	r1, r1, -36
2000028c:	f9e10000 	swi	r15, r1, 0
20000290:	fa61001c 	swi	r19, r1, 28
20000294:	fa810020 	swi	r20, r1, 32
20000298:	12610000 	addk	r19, r1, r0
2000029c:	96808000 	mfs	r20, rpc
200002a0:	b000e000 	imm	-8192
200002a4:	329416c0 	addik	r20, r20, 5824
	decoder_texture_idct2d_scheduler();
200002a8:	b0000004 	imm	4
200002ac:	b9f46864 	brlid	r15, 26724	// 20046b10 <decoder_texture_idct2d_scheduler>
200002b0:	80000000 	or	r0, r0, r0
}
200002b4:	e9e10000 	lwi	r15, r1, 0
200002b8:	10330000 	addk	r1, r19, r0
200002bc:	ea61001c 	lwi	r19, r1, 28
200002c0:	ea810020 	lwi	r20, r1, 32
200002c4:	30210024 	addik	r1, r1, 36
200002c8:	b60f0008 	rtsd	r15, 8
200002cc:	80000000 	or	r0, r0, r0

200002d0 <call_decoder_texture_DCReconstruction_addressing_scheduler>:
void call_decoder_texture_DCReconstruction_addressing_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_texture_DCReconstruction_addressing_scheduler(){
200002d0:	3021ffdc 	addik	r1, r1, -36
200002d4:	f9e10000 	swi	r15, r1, 0
200002d8:	fa61001c 	swi	r19, r1, 28
200002dc:	fa810020 	swi	r20, r1, 32
200002e0:	12610000 	addk	r19, r1, r0
200002e4:	96808000 	mfs	r20, rpc
200002e8:	b000e000 	imm	-8192
200002ec:	32941678 	addik	r20, r20, 5752
	decoder_texture_DCReconstruction_addressing_scheduler();
200002f0:	b0000003 	imm	3
200002f4:	b9f41f20 	brlid	r15, 7968	// 20032214 <decoder_texture_DCReconstruction_addressing_scheduler>
200002f8:	80000000 	or	r0, r0, r0
}
200002fc:	e9e10000 	lwi	r15, r1, 0
20000300:	10330000 	addk	r1, r19, r0
20000304:	ea61001c 	lwi	r19, r1, 28
20000308:	ea810020 	lwi	r20, r1, 32
2000030c:	30210024 	addik	r1, r1, 36
20000310:	b60f0008 	rtsd	r15, 8
20000314:	80000000 	or	r0, r0, r0

20000318 <call_decoder_texture_DCReconstruction_invpred_scheduler>:
void call_decoder_texture_DCReconstruction_invpred_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_texture_DCReconstruction_invpred_scheduler(){
20000318:	3021ffdc 	addik	r1, r1, -36
2000031c:	f9e10000 	swi	r15, r1, 0
20000320:	fa61001c 	swi	r19, r1, 28
20000324:	fa810020 	swi	r20, r1, 32
20000328:	12610000 	addk	r19, r1, r0
2000032c:	96808000 	mfs	r20, rpc
20000330:	b000e000 	imm	-8192
20000334:	32941630 	addik	r20, r20, 5680
	decoder_texture_DCReconstruction_invpred_scheduler();
20000338:	b0000003 	imm	3
2000033c:	b9f46dac 	brlid	r15, 28076	// 200370e8 <decoder_texture_DCReconstruction_invpred_scheduler>
20000340:	80000000 	or	r0, r0, r0
}
20000344:	e9e10000 	lwi	r15, r1, 0
20000348:	10330000 	addk	r1, r19, r0
2000034c:	ea61001c 	lwi	r19, r1, 28
20000350:	ea810020 	lwi	r20, r1, 32
20000354:	30210024 	addik	r1, r1, 36
20000358:	b60f0008 	rtsd	r15, 8
2000035c:	80000000 	or	r0, r0, r0

20000360 <call_decoder_motion_interpolation_scheduler>:
void call_decoder_motion_interpolation_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_motion_interpolation_scheduler(){
20000360:	3021ffdc 	addik	r1, r1, -36
20000364:	f9e10000 	swi	r15, r1, 0
20000368:	fa61001c 	swi	r19, r1, 28
2000036c:	fa810020 	swi	r20, r1, 32
20000370:	12610000 	addk	r19, r1, r0
20000374:	96808000 	mfs	r20, rpc
20000378:	b000e000 	imm	-8192
2000037c:	329415e8 	addik	r20, r20, 5608
	decoder_motion_interpolation_scheduler();
20000380:	b0000001 	imm	1
20000384:	b9f47010 	brlid	r15, 28688	// 20017394 <decoder_motion_interpolation_scheduler>
20000388:	80000000 	or	r0, r0, r0
}
2000038c:	e9e10000 	lwi	r15, r1, 0
20000390:	10330000 	addk	r1, r19, r0
20000394:	ea61001c 	lwi	r19, r1, 28
20000398:	ea810020 	lwi	r20, r1, 32
2000039c:	30210024 	addik	r1, r1, 36
200003a0:	b60f0008 	rtsd	r15, 8
200003a4:	80000000 	or	r0, r0, r0

200003a8 <call_decoder_motion_add_scheduler>:
void call_decoder_motion_add_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_motion_add_scheduler(){
200003a8:	3021ffdc 	addik	r1, r1, -36
200003ac:	f9e10000 	swi	r15, r1, 0
200003b0:	fa61001c 	swi	r19, r1, 28
200003b4:	fa810020 	swi	r20, r1, 32
200003b8:	12610000 	addk	r19, r1, r0
200003bc:	96808000 	mfs	r20, rpc
200003c0:	b000e000 	imm	-8192
200003c4:	329415a0 	addik	r20, r20, 5536
	decoder_motion_add_scheduler();
200003c8:	b0000000 	imm	0
200003cc:	b9f4dfe0 	brlid	r15, -8224	// 2000e3ac <decoder_motion_add_scheduler>
200003d0:	80000000 	or	r0, r0, r0
}
200003d4:	e9e10000 	lwi	r15, r1, 0
200003d8:	10330000 	addk	r1, r19, r0
200003dc:	ea61001c 	lwi	r19, r1, 28
200003e0:	ea810020 	lwi	r20, r1, 32
200003e4:	30210024 	addik	r1, r1, 36
200003e8:	b60f0008 	rtsd	r15, 8
200003ec:	80000000 	or	r0, r0, r0

200003f0 <call_decoder_motion_framebuf_scheduler>:
void call_decoder_motion_framebuf_scheduler() __attribute__ ((section ("sched_callers_section")));
void call_decoder_motion_framebuf_scheduler(){
200003f0:	3021ffdc 	addik	r1, r1, -36
200003f4:	f9e10000 	swi	r15, r1, 0
200003f8:	fa61001c 	swi	r19, r1, 28
200003fc:	fa810020 	swi	r20, r1, 32
20000400:	12610000 	addk	r19, r1, r0
20000404:	96808000 	mfs	r20, rpc
20000408:	b000e000 	imm	-8192
2000040c:	32941558 	addik	r20, r20, 5464
	decoder_motion_framebuf_scheduler();
20000410:	b0000001 	imm	1
20000414:	b9f43588 	brlid	r15, 13704	// 2001399c <decoder_motion_framebuf_scheduler>
20000418:	80000000 	or	r0, r0, r0
}
2000041c:	e9e10000 	lwi	r15, r1, 0
20000420:	10330000 	addk	r1, r19, r0
20000424:	ea61001c 	lwi	r19, r1, 28
20000428:	ea810020 	lwi	r20, r1, 32
2000042c:	30210024 	addik	r1, r1, 36
20000430:	b60f0008 	rtsd	r15, 8
20000434:	80000000 	or	r0, r0, r0

Disassembly of section actors_code_section:

20008000 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20008000:	3021fff4 	addik	r1, r1, -12
20008004:	fa610004 	swi	r19, r1, 4
20008008:	fa810008 	swi	r20, r1, 8
2000800c:	12610000 	addk	r19, r1, r0
20008010:	96808000 	mfs	r20, rpc
20008014:	b000dfff 	imm	-8193
20008018:	3294994c 	addik	r20, r20, -26292
2000801c:	f8b30010 	swi	r5, r19, 16
20008020:	f8d30014 	swi	r6, r19, 20
20008024:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20008028:	e8730010 	lwi	r3, r19, 16
2000802c:	e8630010 	lwi	r3, r3, 16
20008030:	e8830000 	lwi	r4, r3, 0
20008034:	e8730010 	lwi	r3, r19, 16
20008038:	e8a3000c 	lwi	r5, r3, 12
2000803c:	e8730014 	lwi	r3, r19, 20
20008040:	64630402 	bslli	r3, r3, 2
20008044:	10651800 	addk	r3, r5, r3
20008048:	e8630000 	lwi	r3, r3, 0
2000804c:	14a32000 	rsubk	r5, r3, r4
20008050:	30600001 	addik	r3, r0, 1
20008054:	e8930018 	lwi	r4, r19, 24
20008058:	16442803 	cmpu	r18, r4, r5
2000805c:	bcb20008 	bgei	r18, 8		// 20008064
20008060:	10600000 	addk	r3, r0, r0
20008064:	a46300ff 	andi	r3, r3, 255
}
20008068:	10330000 	addk	r1, r19, r0
2000806c:	ea610004 	lwi	r19, r1, 4
20008070:	ea810008 	lwi	r20, r1, 8
20008074:	3021000c 	addik	r1, r1, 12
20008078:	b60f0008 	rtsd	r15, 8
2000807c:	80000000 	or	r0, r0, r0

20008080 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20008080:	3021fff4 	addik	r1, r1, -12
20008084:	fa610004 	swi	r19, r1, 4
20008088:	fa810008 	swi	r20, r1, 8
2000808c:	12610000 	addk	r19, r1, r0
20008090:	96808000 	mfs	r20, rpc
20008094:	b000dfff 	imm	-8193
20008098:	329498cc 	addik	r20, r20, -26420
2000809c:	f8b30010 	swi	r5, r19, 16
200080a0:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200080a4:	e8730010 	lwi	r3, r19, 16
200080a8:	e8630010 	lwi	r3, r3, 16
200080ac:	e8830000 	lwi	r4, r3, 0
200080b0:	e8730010 	lwi	r3, r19, 16
200080b4:	e8a3000c 	lwi	r5, r3, 12
200080b8:	e8730014 	lwi	r3, r19, 20
200080bc:	64630402 	bslli	r3, r3, 2
200080c0:	10651800 	addk	r3, r5, r3
200080c4:	e8630000 	lwi	r3, r3, 0
200080c8:	14632000 	rsubk	r3, r3, r4
}
200080cc:	10330000 	addk	r1, r19, r0
200080d0:	ea610004 	lwi	r19, r1, 4
200080d4:	ea810008 	lwi	r20, r1, 8
200080d8:	3021000c 	addik	r1, r1, 12
200080dc:	b60f0008 	rtsd	r15, 8
200080e0:	80000000 	or	r0, r0, r0

200080e4 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200080e4:	3021fff0 	addik	r1, r1, -16
200080e8:	fa610008 	swi	r19, r1, 8
200080ec:	fa81000c 	swi	r20, r1, 12
200080f0:	12610000 	addk	r19, r1, r0
200080f4:	96808000 	mfs	r20, rpc
200080f8:	b000dfff 	imm	-8193
200080fc:	32949868 	addik	r20, r20, -26520
20008100:	f8b30014 	swi	r5, r19, 20
20008104:	f8d30018 	swi	r6, r19, 24
20008108:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000810c:	f8130004 	swi	r0, r19, 4
20008110:	b800005c 	bri	92		// 2000816c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20008114:	e8730014 	lwi	r3, r19, 20
20008118:	e8830000 	lwi	r4, r3, 0
2000811c:	e8730014 	lwi	r3, r19, 20
20008120:	e8a3000c 	lwi	r5, r3, 12
20008124:	e8730004 	lwi	r3, r19, 4
20008128:	64630402 	bslli	r3, r3, 2
2000812c:	10651800 	addk	r3, r5, r3
20008130:	e8a30000 	lwi	r5, r3, 0
20008134:	e8730014 	lwi	r3, r19, 20
20008138:	e8630010 	lwi	r3, r3, 16
2000813c:	e8630000 	lwi	r3, r3, 0
20008140:	14632800 	rsubk	r3, r3, r5
20008144:	10641800 	addk	r3, r4, r3
20008148:	30830001 	addik	r4, r3, 1
2000814c:	e873001c 	lwi	r3, r19, 28
20008150:	16441803 	cmpu	r18, r4, r3
20008154:	bc52000c 	blti	r18, 12		// 20008160
            return 0;
20008158:	10600000 	addk	r3, r0, r0
2000815c:	b8000024 	bri	36		// 20008180
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20008160:	e8730004 	lwi	r3, r19, 4
20008164:	30630001 	addik	r3, r3, 1
20008168:	f8730004 	swi	r3, r19, 4
2000816c:	e8930004 	lwi	r4, r19, 4
20008170:	e8730018 	lwi	r3, r19, 24
20008174:	16432003 	cmpu	r18, r3, r4
20008178:	bc52ff9c 	blti	r18, -100		// 20008114
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000817c:	30600001 	addik	r3, r0, 1
}
20008180:	10330000 	addk	r1, r19, r0
20008184:	ea610008 	lwi	r19, r1, 8
20008188:	ea81000c 	lwi	r20, r1, 12
2000818c:	30210010 	addik	r1, r1, 16
20008190:	b60f0008 	rtsd	r15, 8
20008194:	80000000 	or	r0, r0, r0

20008198 <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20008198:	3021ffe8 	addik	r1, r1, -24
2000819c:	fa610010 	swi	r19, r1, 16
200081a0:	fa810014 	swi	r20, r1, 20
200081a4:	12610000 	addk	r19, r1, r0
200081a8:	96808000 	mfs	r20, rpc
200081ac:	b000dfff 	imm	-8193
200081b0:	329497b4 	addik	r20, r20, -26700
200081b4:	f8b3001c 	swi	r5, r19, 28
200081b8:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
200081bc:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200081c0:	f8130004 	swi	r0, r19, 4
200081c4:	b8000054 	bri	84		// 20008218
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200081c8:	e873001c 	lwi	r3, r19, 28
200081cc:	e8630010 	lwi	r3, r3, 16
200081d0:	e8830000 	lwi	r4, r3, 0
200081d4:	e873001c 	lwi	r3, r19, 28
200081d8:	e8a3000c 	lwi	r5, r3, 12
200081dc:	e8730004 	lwi	r3, r19, 4
200081e0:	64630402 	bslli	r3, r3, 2
200081e4:	10651800 	addk	r3, r5, r3
200081e8:	e8630000 	lwi	r3, r3, 0
200081ec:	14632000 	rsubk	r3, r3, r4
200081f0:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200081f4:	e8930008 	lwi	r4, r19, 8
200081f8:	e873000c 	lwi	r3, r19, 12
200081fc:	16441803 	cmpu	r18, r4, r3
20008200:	bcb20008 	bgei	r18, 8		// 20008208
20008204:	10640000 	addk	r3, r4, r0
20008208:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000820c:	e8730004 	lwi	r3, r19, 4
20008210:	30630001 	addik	r3, r3, 1
20008214:	f8730004 	swi	r3, r19, 4
20008218:	e8930004 	lwi	r4, r19, 4
2000821c:	e8730020 	lwi	r3, r19, 32
20008220:	16432003 	cmpu	r18, r3, r4
20008224:	bc52ffa4 	blti	r18, -92		// 200081c8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20008228:	e873001c 	lwi	r3, r19, 28
2000822c:	e8830000 	lwi	r4, r3, 0
20008230:	e8730008 	lwi	r3, r19, 8
20008234:	14632000 	rsubk	r3, r3, r4
}
20008238:	10330000 	addk	r1, r19, r0
2000823c:	ea610010 	lwi	r19, r1, 16
20008240:	ea810014 	lwi	r20, r1, 20
20008244:	30210018 	addik	r1, r1, 24
20008248:	b60f0008 	rtsd	r15, 8
2000824c:	80000000 	or	r0, r0, r0

20008250 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20008250:	3021fff0 	addik	r1, r1, -16
20008254:	fa610008 	swi	r19, r1, 8
20008258:	fa81000c 	swi	r20, r1, 12
2000825c:	12610000 	addk	r19, r1, r0
20008260:	96808000 	mfs	r20, rpc
20008264:	b000dfff 	imm	-8193
20008268:	329496fc 	addik	r20, r20, -26884
2000826c:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20008270:	e8730014 	lwi	r3, r19, 20
20008274:	e8630010 	lwi	r3, r3, 16
20008278:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000827c:	f8130004 	swi	r0, r19, 4
20008280:	b8000028 	bri	40		// 200082a8
        fifo->read_inds[i] = 0;
20008284:	e8730014 	lwi	r3, r19, 20
20008288:	e883000c 	lwi	r4, r3, 12
2000828c:	e8730004 	lwi	r3, r19, 4
20008290:	64630402 	bslli	r3, r3, 2
20008294:	10641800 	addk	r3, r4, r3
20008298:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000829c:	e8730004 	lwi	r3, r19, 4
200082a0:	30630001 	addik	r3, r3, 1
200082a4:	f8730004 	swi	r3, r19, 4
200082a8:	e8730014 	lwi	r3, r19, 20
200082ac:	e8830008 	lwi	r4, r3, 8
200082b0:	e8730004 	lwi	r3, r19, 4
200082b4:	16441803 	cmpu	r18, r4, r3
200082b8:	bc52ffcc 	blti	r18, -52		// 20008284
        fifo->read_inds[i] = 0;
    }
}
200082bc:	10330000 	addk	r1, r19, r0
200082c0:	ea610008 	lwi	r19, r1, 8
200082c4:	ea81000c 	lwi	r20, r1, 12
200082c8:	30210010 	addik	r1, r1, 16
200082cc:	b60f0008 	rtsd	r15, 8
200082d0:	80000000 	or	r0, r0, r0

200082d4 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200082d4:	3021fff0 	addik	r1, r1, -16
200082d8:	fa610008 	swi	r19, r1, 8
200082dc:	fa81000c 	swi	r20, r1, 12
200082e0:	12610000 	addk	r19, r1, r0
200082e4:	96808000 	mfs	r20, rpc
200082e8:	b000dfff 	imm	-8193
200082ec:	32949678 	addik	r20, r20, -27016
200082f0:	f8b30014 	swi	r5, r19, 20
200082f4:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200082f8:	e8730014 	lwi	r3, r19, 20
200082fc:	e8830004 	lwi	r4, r3, 4
20008300:	e8730014 	lwi	r3, r19, 20
20008304:	e8a3000c 	lwi	r5, r3, 12
20008308:	e8730018 	lwi	r3, r19, 24
2000830c:	64630402 	bslli	r3, r3, 2
20008310:	10651800 	addk	r3, r5, r3
20008314:	e8a30000 	lwi	r5, r3, 0
20008318:	e8730014 	lwi	r3, r19, 20
2000831c:	e8630000 	lwi	r3, r3, 0
20008320:	3063ffff 	addik	r3, r3, -1
20008324:	84651800 	and	r3, r5, r3
20008328:	10641800 	addk	r3, r4, r3
2000832c:	e0630000 	lbui	r3, r3, 0
20008330:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20008334:	e8730014 	lwi	r3, r19, 20
20008338:	e883000c 	lwi	r4, r3, 12
2000833c:	e8730018 	lwi	r3, r19, 24
20008340:	64630402 	bslli	r3, r3, 2
20008344:	10641800 	addk	r3, r4, r3
20008348:	e8830000 	lwi	r4, r3, 0
2000834c:	30840001 	addik	r4, r4, 1
20008350:	f8830000 	swi	r4, r3, 0
    return value;
20008354:	e0730004 	lbui	r3, r19, 4
20008358:	90630060 	sext8	r3, r3
}
2000835c:	10330000 	addk	r1, r19, r0
20008360:	ea610008 	lwi	r19, r1, 8
20008364:	ea81000c 	lwi	r20, r1, 12
20008368:	30210010 	addik	r1, r1, 16
2000836c:	b60f0008 	rtsd	r15, 8
20008370:	80000000 	or	r0, r0, r0

20008374 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20008374:	3021fff4 	addik	r1, r1, -12
20008378:	fa610004 	swi	r19, r1, 4
2000837c:	fa810008 	swi	r20, r1, 8
20008380:	12610000 	addk	r19, r1, r0
20008384:	96808000 	mfs	r20, rpc
20008388:	b000dfff 	imm	-8193
2000838c:	329495d8 	addik	r20, r20, -27176
20008390:	f8b30010 	swi	r5, r19, 16
20008394:	10660000 	addk	r3, r6, r0
20008398:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000839c:	e8730010 	lwi	r3, r19, 16
200083a0:	e8830004 	lwi	r4, r3, 4
200083a4:	e8730010 	lwi	r3, r19, 16
200083a8:	e8630010 	lwi	r3, r3, 16
200083ac:	e8a30000 	lwi	r5, r3, 0
200083b0:	e8730010 	lwi	r3, r19, 16
200083b4:	e8630000 	lwi	r3, r3, 0
200083b8:	3063ffff 	addik	r3, r3, -1
200083bc:	84651800 	and	r3, r5, r3
200083c0:	10641800 	addk	r3, r4, r3
200083c4:	e0930014 	lbui	r4, r19, 20
200083c8:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
200083cc:	e8730010 	lwi	r3, r19, 16
200083d0:	e8630010 	lwi	r3, r3, 16
200083d4:	e8830000 	lwi	r4, r3, 0
200083d8:	30840001 	addik	r4, r4, 1
200083dc:	f8830000 	swi	r4, r3, 0
}
200083e0:	10330000 	addk	r1, r19, r0
200083e4:	ea610004 	lwi	r19, r1, 4
200083e8:	ea810008 	lwi	r20, r1, 8
200083ec:	3021000c 	addik	r1, r1, 12
200083f0:	b60f0008 	rtsd	r15, 8
200083f4:	80000000 	or	r0, r0, r0

200083f8 <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200083f8:	3021fff4 	addik	r1, r1, -12
200083fc:	fa610004 	swi	r19, r1, 4
20008400:	fa810008 	swi	r20, r1, 8
20008404:	12610000 	addk	r19, r1, r0
20008408:	96808000 	mfs	r20, rpc
2000840c:	b000dfff 	imm	-8193
20008410:	32949554 	addik	r20, r20, -27308
20008414:	f8b30010 	swi	r5, r19, 16
20008418:	f8d30014 	swi	r6, r19, 20
2000841c:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20008420:	e8730010 	lwi	r3, r19, 16
20008424:	e8630010 	lwi	r3, r3, 16
20008428:	e8830000 	lwi	r4, r3, 0
2000842c:	e8730010 	lwi	r3, r19, 16
20008430:	e8a3000c 	lwi	r5, r3, 12
20008434:	e8730014 	lwi	r3, r19, 20
20008438:	64630402 	bslli	r3, r3, 2
2000843c:	10651800 	addk	r3, r5, r3
20008440:	e8630000 	lwi	r3, r3, 0
20008444:	14a32000 	rsubk	r5, r3, r4
20008448:	30600001 	addik	r3, r0, 1
2000844c:	e8930018 	lwi	r4, r19, 24
20008450:	16442803 	cmpu	r18, r4, r5
20008454:	bcb20008 	bgei	r18, 8		// 2000845c
20008458:	10600000 	addk	r3, r0, r0
2000845c:	a46300ff 	andi	r3, r3, 255
}
20008460:	10330000 	addk	r1, r19, r0
20008464:	ea610004 	lwi	r19, r1, 4
20008468:	ea810008 	lwi	r20, r1, 8
2000846c:	3021000c 	addik	r1, r1, 12
20008470:	b60f0008 	rtsd	r15, 8
20008474:	80000000 	or	r0, r0, r0

20008478 <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20008478:	3021fff4 	addik	r1, r1, -12
2000847c:	fa610004 	swi	r19, r1, 4
20008480:	fa810008 	swi	r20, r1, 8
20008484:	12610000 	addk	r19, r1, r0
20008488:	96808000 	mfs	r20, rpc
2000848c:	b000dfff 	imm	-8193
20008490:	329494d4 	addik	r20, r20, -27436
20008494:	f8b30010 	swi	r5, r19, 16
20008498:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000849c:	e8730010 	lwi	r3, r19, 16
200084a0:	e8630010 	lwi	r3, r3, 16
200084a4:	e8830000 	lwi	r4, r3, 0
200084a8:	e8730010 	lwi	r3, r19, 16
200084ac:	e8a3000c 	lwi	r5, r3, 12
200084b0:	e8730014 	lwi	r3, r19, 20
200084b4:	64630402 	bslli	r3, r3, 2
200084b8:	10651800 	addk	r3, r5, r3
200084bc:	e8630000 	lwi	r3, r3, 0
200084c0:	14632000 	rsubk	r3, r3, r4
}
200084c4:	10330000 	addk	r1, r19, r0
200084c8:	ea610004 	lwi	r19, r1, 4
200084cc:	ea810008 	lwi	r20, r1, 8
200084d0:	3021000c 	addik	r1, r1, 12
200084d4:	b60f0008 	rtsd	r15, 8
200084d8:	80000000 	or	r0, r0, r0

200084dc <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200084dc:	3021fff0 	addik	r1, r1, -16
200084e0:	fa610008 	swi	r19, r1, 8
200084e4:	fa81000c 	swi	r20, r1, 12
200084e8:	12610000 	addk	r19, r1, r0
200084ec:	96808000 	mfs	r20, rpc
200084f0:	b000dfff 	imm	-8193
200084f4:	32949470 	addik	r20, r20, -27536
200084f8:	f8b30014 	swi	r5, r19, 20
200084fc:	f8d30018 	swi	r6, r19, 24
20008500:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20008504:	f8130004 	swi	r0, r19, 4
20008508:	b800005c 	bri	92		// 20008564
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000850c:	e8730014 	lwi	r3, r19, 20
20008510:	e8830000 	lwi	r4, r3, 0
20008514:	e8730014 	lwi	r3, r19, 20
20008518:	e8a3000c 	lwi	r5, r3, 12
2000851c:	e8730004 	lwi	r3, r19, 4
20008520:	64630402 	bslli	r3, r3, 2
20008524:	10651800 	addk	r3, r5, r3
20008528:	e8a30000 	lwi	r5, r3, 0
2000852c:	e8730014 	lwi	r3, r19, 20
20008530:	e8630010 	lwi	r3, r3, 16
20008534:	e8630000 	lwi	r3, r3, 0
20008538:	14632800 	rsubk	r3, r3, r5
2000853c:	10641800 	addk	r3, r4, r3
20008540:	30830001 	addik	r4, r3, 1
20008544:	e873001c 	lwi	r3, r19, 28
20008548:	16441803 	cmpu	r18, r4, r3
2000854c:	bc52000c 	blti	r18, 12		// 20008558
            return 0;
20008550:	10600000 	addk	r3, r0, r0
20008554:	b8000024 	bri	36		// 20008578
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20008558:	e8730004 	lwi	r3, r19, 4
2000855c:	30630001 	addik	r3, r3, 1
20008560:	f8730004 	swi	r3, r19, 4
20008564:	e8930004 	lwi	r4, r19, 4
20008568:	e8730018 	lwi	r3, r19, 24
2000856c:	16432003 	cmpu	r18, r3, r4
20008570:	bc52ff9c 	blti	r18, -100		// 2000850c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20008574:	30600001 	addik	r3, r0, 1
}
20008578:	10330000 	addk	r1, r19, r0
2000857c:	ea610008 	lwi	r19, r1, 8
20008580:	ea81000c 	lwi	r20, r1, 12
20008584:	30210010 	addik	r1, r1, 16
20008588:	b60f0008 	rtsd	r15, 8
2000858c:	80000000 	or	r0, r0, r0

20008590 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20008590:	3021ffe8 	addik	r1, r1, -24
20008594:	fa610010 	swi	r19, r1, 16
20008598:	fa810014 	swi	r20, r1, 20
2000859c:	12610000 	addk	r19, r1, r0
200085a0:	96808000 	mfs	r20, rpc
200085a4:	b000dfff 	imm	-8193
200085a8:	329493bc 	addik	r20, r20, -27716
200085ac:	f8b3001c 	swi	r5, r19, 28
200085b0:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
200085b4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200085b8:	f8130004 	swi	r0, r19, 4
200085bc:	b8000054 	bri	84		// 20008610
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200085c0:	e873001c 	lwi	r3, r19, 28
200085c4:	e8630010 	lwi	r3, r3, 16
200085c8:	e8830000 	lwi	r4, r3, 0
200085cc:	e873001c 	lwi	r3, r19, 28
200085d0:	e8a3000c 	lwi	r5, r3, 12
200085d4:	e8730004 	lwi	r3, r19, 4
200085d8:	64630402 	bslli	r3, r3, 2
200085dc:	10651800 	addk	r3, r5, r3
200085e0:	e8630000 	lwi	r3, r3, 0
200085e4:	14632000 	rsubk	r3, r3, r4
200085e8:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200085ec:	e8930008 	lwi	r4, r19, 8
200085f0:	e873000c 	lwi	r3, r19, 12
200085f4:	16441803 	cmpu	r18, r4, r3
200085f8:	bcb20008 	bgei	r18, 8		// 20008600
200085fc:	10640000 	addk	r3, r4, r0
20008600:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20008604:	e8730004 	lwi	r3, r19, 4
20008608:	30630001 	addik	r3, r3, 1
2000860c:	f8730004 	swi	r3, r19, 4
20008610:	e8930004 	lwi	r4, r19, 4
20008614:	e8730020 	lwi	r3, r19, 32
20008618:	16432003 	cmpu	r18, r3, r4
2000861c:	bc52ffa4 	blti	r18, -92		// 200085c0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20008620:	e873001c 	lwi	r3, r19, 28
20008624:	e8830000 	lwi	r4, r3, 0
20008628:	e8730008 	lwi	r3, r19, 8
2000862c:	14632000 	rsubk	r3, r3, r4
}
20008630:	10330000 	addk	r1, r19, r0
20008634:	ea610010 	lwi	r19, r1, 16
20008638:	ea810014 	lwi	r20, r1, 20
2000863c:	30210018 	addik	r1, r1, 24
20008640:	b60f0008 	rtsd	r15, 8
20008644:	80000000 	or	r0, r0, r0

20008648 <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20008648:	3021fff0 	addik	r1, r1, -16
2000864c:	fa610008 	swi	r19, r1, 8
20008650:	fa81000c 	swi	r20, r1, 12
20008654:	12610000 	addk	r19, r1, r0
20008658:	96808000 	mfs	r20, rpc
2000865c:	b000dfff 	imm	-8193
20008660:	32949304 	addik	r20, r20, -27900
20008664:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20008668:	e8730014 	lwi	r3, r19, 20
2000866c:	e8630010 	lwi	r3, r3, 16
20008670:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20008674:	f8130004 	swi	r0, r19, 4
20008678:	b8000028 	bri	40		// 200086a0
        fifo->read_inds[i] = 0;
2000867c:	e8730014 	lwi	r3, r19, 20
20008680:	e883000c 	lwi	r4, r3, 12
20008684:	e8730004 	lwi	r3, r19, 4
20008688:	64630402 	bslli	r3, r3, 2
2000868c:	10641800 	addk	r3, r4, r3
20008690:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20008694:	e8730004 	lwi	r3, r19, 4
20008698:	30630001 	addik	r3, r3, 1
2000869c:	f8730004 	swi	r3, r19, 4
200086a0:	e8730014 	lwi	r3, r19, 20
200086a4:	e8830008 	lwi	r4, r3, 8
200086a8:	e8730004 	lwi	r3, r19, 4
200086ac:	16441803 	cmpu	r18, r4, r3
200086b0:	bc52ffcc 	blti	r18, -52		// 2000867c
        fifo->read_inds[i] = 0;
    }
}
200086b4:	10330000 	addk	r1, r19, r0
200086b8:	ea610008 	lwi	r19, r1, 8
200086bc:	ea81000c 	lwi	r20, r1, 12
200086c0:	30210010 	addik	r1, r1, 16
200086c4:	b60f0008 	rtsd	r15, 8
200086c8:	80000000 	or	r0, r0, r0

200086cc <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200086cc:	3021fff0 	addik	r1, r1, -16
200086d0:	fa610008 	swi	r19, r1, 8
200086d4:	fa81000c 	swi	r20, r1, 12
200086d8:	12610000 	addk	r19, r1, r0
200086dc:	96808000 	mfs	r20, rpc
200086e0:	b000dfff 	imm	-8193
200086e4:	32949280 	addik	r20, r20, -28032
200086e8:	f8b30014 	swi	r5, r19, 20
200086ec:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200086f0:	e8730014 	lwi	r3, r19, 20
200086f4:	e8830004 	lwi	r4, r3, 4
200086f8:	e8730014 	lwi	r3, r19, 20
200086fc:	e8a3000c 	lwi	r5, r3, 12
20008700:	e8730018 	lwi	r3, r19, 24
20008704:	64630402 	bslli	r3, r3, 2
20008708:	10651800 	addk	r3, r5, r3
2000870c:	e8a30000 	lwi	r5, r3, 0
20008710:	e8730014 	lwi	r3, r19, 20
20008714:	e8630000 	lwi	r3, r3, 0
20008718:	3063ffff 	addik	r3, r3, -1
2000871c:	84651800 	and	r3, r5, r3
20008720:	10631800 	addk	r3, r3, r3
20008724:	10641800 	addk	r3, r4, r3
20008728:	e4630000 	lhui	r3, r3, 0
2000872c:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20008730:	e8730014 	lwi	r3, r19, 20
20008734:	e883000c 	lwi	r4, r3, 12
20008738:	e8730018 	lwi	r3, r19, 24
2000873c:	64630402 	bslli	r3, r3, 2
20008740:	10641800 	addk	r3, r4, r3
20008744:	e8830000 	lwi	r4, r3, 0
20008748:	30840001 	addik	r4, r4, 1
2000874c:	f8830000 	swi	r4, r3, 0
    return value;
20008750:	e4730004 	lhui	r3, r19, 4
20008754:	90630061 	sext16	r3, r3
}
20008758:	10330000 	addk	r1, r19, r0
2000875c:	ea610008 	lwi	r19, r1, 8
20008760:	ea81000c 	lwi	r20, r1, 12
20008764:	30210010 	addik	r1, r1, 16
20008768:	b60f0008 	rtsd	r15, 8
2000876c:	80000000 	or	r0, r0, r0

20008770 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20008770:	3021fff4 	addik	r1, r1, -12
20008774:	fa610004 	swi	r19, r1, 4
20008778:	fa810008 	swi	r20, r1, 8
2000877c:	12610000 	addk	r19, r1, r0
20008780:	96808000 	mfs	r20, rpc
20008784:	b000dfff 	imm	-8193
20008788:	329491dc 	addik	r20, r20, -28196
2000878c:	f8b30010 	swi	r5, r19, 16
20008790:	10660000 	addk	r3, r6, r0
20008794:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20008798:	e8730010 	lwi	r3, r19, 16
2000879c:	e8830004 	lwi	r4, r3, 4
200087a0:	e8730010 	lwi	r3, r19, 16
200087a4:	e8630010 	lwi	r3, r3, 16
200087a8:	e8a30000 	lwi	r5, r3, 0
200087ac:	e8730010 	lwi	r3, r19, 16
200087b0:	e8630000 	lwi	r3, r3, 0
200087b4:	3063ffff 	addik	r3, r3, -1
200087b8:	84651800 	and	r3, r5, r3
200087bc:	10631800 	addk	r3, r3, r3
200087c0:	10641800 	addk	r3, r4, r3
200087c4:	e4930014 	lhui	r4, r19, 20
200087c8:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
200087cc:	e8730010 	lwi	r3, r19, 16
200087d0:	e8630010 	lwi	r3, r3, 16
200087d4:	e8830000 	lwi	r4, r3, 0
200087d8:	30840001 	addik	r4, r4, 1
200087dc:	f8830000 	swi	r4, r3, 0
}
200087e0:	10330000 	addk	r1, r19, r0
200087e4:	ea610004 	lwi	r19, r1, 4
200087e8:	ea810008 	lwi	r20, r1, 8
200087ec:	3021000c 	addik	r1, r1, 12
200087f0:	b60f0008 	rtsd	r15, 8
200087f4:	80000000 	or	r0, r0, r0

200087f8 <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200087f8:	3021fff4 	addik	r1, r1, -12
200087fc:	fa610004 	swi	r19, r1, 4
20008800:	fa810008 	swi	r20, r1, 8
20008804:	12610000 	addk	r19, r1, r0
20008808:	96808000 	mfs	r20, rpc
2000880c:	b000dfff 	imm	-8193
20008810:	32949154 	addik	r20, r20, -28332
20008814:	f8b30010 	swi	r5, r19, 16
20008818:	f8d30014 	swi	r6, r19, 20
2000881c:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20008820:	e8730010 	lwi	r3, r19, 16
20008824:	e8630010 	lwi	r3, r3, 16
20008828:	e8830000 	lwi	r4, r3, 0
2000882c:	e8730010 	lwi	r3, r19, 16
20008830:	e8a3000c 	lwi	r5, r3, 12
20008834:	e8730014 	lwi	r3, r19, 20
20008838:	64630402 	bslli	r3, r3, 2
2000883c:	10651800 	addk	r3, r5, r3
20008840:	e8630000 	lwi	r3, r3, 0
20008844:	14a32000 	rsubk	r5, r3, r4
20008848:	30600001 	addik	r3, r0, 1
2000884c:	e8930018 	lwi	r4, r19, 24
20008850:	16442803 	cmpu	r18, r4, r5
20008854:	bcb20008 	bgei	r18, 8		// 2000885c
20008858:	10600000 	addk	r3, r0, r0
2000885c:	a46300ff 	andi	r3, r3, 255
}
20008860:	10330000 	addk	r1, r19, r0
20008864:	ea610004 	lwi	r19, r1, 4
20008868:	ea810008 	lwi	r20, r1, 8
2000886c:	3021000c 	addik	r1, r1, 12
20008870:	b60f0008 	rtsd	r15, 8
20008874:	80000000 	or	r0, r0, r0

20008878 <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20008878:	3021fff4 	addik	r1, r1, -12
2000887c:	fa610004 	swi	r19, r1, 4
20008880:	fa810008 	swi	r20, r1, 8
20008884:	12610000 	addk	r19, r1, r0
20008888:	96808000 	mfs	r20, rpc
2000888c:	b000dfff 	imm	-8193
20008890:	329490d4 	addik	r20, r20, -28460
20008894:	f8b30010 	swi	r5, r19, 16
20008898:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000889c:	e8730010 	lwi	r3, r19, 16
200088a0:	e8630010 	lwi	r3, r3, 16
200088a4:	e8830000 	lwi	r4, r3, 0
200088a8:	e8730010 	lwi	r3, r19, 16
200088ac:	e8a3000c 	lwi	r5, r3, 12
200088b0:	e8730014 	lwi	r3, r19, 20
200088b4:	64630402 	bslli	r3, r3, 2
200088b8:	10651800 	addk	r3, r5, r3
200088bc:	e8630000 	lwi	r3, r3, 0
200088c0:	14632000 	rsubk	r3, r3, r4
}
200088c4:	10330000 	addk	r1, r19, r0
200088c8:	ea610004 	lwi	r19, r1, 4
200088cc:	ea810008 	lwi	r20, r1, 8
200088d0:	3021000c 	addik	r1, r1, 12
200088d4:	b60f0008 	rtsd	r15, 8
200088d8:	80000000 	or	r0, r0, r0

200088dc <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200088dc:	3021fff0 	addik	r1, r1, -16
200088e0:	fa610008 	swi	r19, r1, 8
200088e4:	fa81000c 	swi	r20, r1, 12
200088e8:	12610000 	addk	r19, r1, r0
200088ec:	96808000 	mfs	r20, rpc
200088f0:	b000dfff 	imm	-8193
200088f4:	32949070 	addik	r20, r20, -28560
200088f8:	f8b30014 	swi	r5, r19, 20
200088fc:	f8d30018 	swi	r6, r19, 24
20008900:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20008904:	f8130004 	swi	r0, r19, 4
20008908:	b800005c 	bri	92		// 20008964
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000890c:	e8730014 	lwi	r3, r19, 20
20008910:	e8830000 	lwi	r4, r3, 0
20008914:	e8730014 	lwi	r3, r19, 20
20008918:	e8a3000c 	lwi	r5, r3, 12
2000891c:	e8730004 	lwi	r3, r19, 4
20008920:	64630402 	bslli	r3, r3, 2
20008924:	10651800 	addk	r3, r5, r3
20008928:	e8a30000 	lwi	r5, r3, 0
2000892c:	e8730014 	lwi	r3, r19, 20
20008930:	e8630010 	lwi	r3, r3, 16
20008934:	e8630000 	lwi	r3, r3, 0
20008938:	14632800 	rsubk	r3, r3, r5
2000893c:	10641800 	addk	r3, r4, r3
20008940:	30830001 	addik	r4, r3, 1
20008944:	e873001c 	lwi	r3, r19, 28
20008948:	16441803 	cmpu	r18, r4, r3
2000894c:	bc52000c 	blti	r18, 12		// 20008958
            return 0;
20008950:	10600000 	addk	r3, r0, r0
20008954:	b8000024 	bri	36		// 20008978
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20008958:	e8730004 	lwi	r3, r19, 4
2000895c:	30630001 	addik	r3, r3, 1
20008960:	f8730004 	swi	r3, r19, 4
20008964:	e8930004 	lwi	r4, r19, 4
20008968:	e8730018 	lwi	r3, r19, 24
2000896c:	16432003 	cmpu	r18, r3, r4
20008970:	bc52ff9c 	blti	r18, -100		// 2000890c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20008974:	30600001 	addik	r3, r0, 1
}
20008978:	10330000 	addk	r1, r19, r0
2000897c:	ea610008 	lwi	r19, r1, 8
20008980:	ea81000c 	lwi	r20, r1, 12
20008984:	30210010 	addik	r1, r1, 16
20008988:	b60f0008 	rtsd	r15, 8
2000898c:	80000000 	or	r0, r0, r0

20008990 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20008990:	3021ffe8 	addik	r1, r1, -24
20008994:	fa610010 	swi	r19, r1, 16
20008998:	fa810014 	swi	r20, r1, 20
2000899c:	12610000 	addk	r19, r1, r0
200089a0:	96808000 	mfs	r20, rpc
200089a4:	b000dfff 	imm	-8193
200089a8:	32948fbc 	addik	r20, r20, -28740
200089ac:	f8b3001c 	swi	r5, r19, 28
200089b0:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
200089b4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200089b8:	f8130004 	swi	r0, r19, 4
200089bc:	b8000054 	bri	84		// 20008a10
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200089c0:	e873001c 	lwi	r3, r19, 28
200089c4:	e8630010 	lwi	r3, r3, 16
200089c8:	e8830000 	lwi	r4, r3, 0
200089cc:	e873001c 	lwi	r3, r19, 28
200089d0:	e8a3000c 	lwi	r5, r3, 12
200089d4:	e8730004 	lwi	r3, r19, 4
200089d8:	64630402 	bslli	r3, r3, 2
200089dc:	10651800 	addk	r3, r5, r3
200089e0:	e8630000 	lwi	r3, r3, 0
200089e4:	14632000 	rsubk	r3, r3, r4
200089e8:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200089ec:	e8930008 	lwi	r4, r19, 8
200089f0:	e873000c 	lwi	r3, r19, 12
200089f4:	16441803 	cmpu	r18, r4, r3
200089f8:	bcb20008 	bgei	r18, 8		// 20008a00
200089fc:	10640000 	addk	r3, r4, r0
20008a00:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20008a04:	e8730004 	lwi	r3, r19, 4
20008a08:	30630001 	addik	r3, r3, 1
20008a0c:	f8730004 	swi	r3, r19, 4
20008a10:	e8930004 	lwi	r4, r19, 4
20008a14:	e8730020 	lwi	r3, r19, 32
20008a18:	16432003 	cmpu	r18, r3, r4
20008a1c:	bc52ffa4 	blti	r18, -92		// 200089c0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20008a20:	e873001c 	lwi	r3, r19, 28
20008a24:	e8830000 	lwi	r4, r3, 0
20008a28:	e8730008 	lwi	r3, r19, 8
20008a2c:	14632000 	rsubk	r3, r3, r4
}
20008a30:	10330000 	addk	r1, r19, r0
20008a34:	ea610010 	lwi	r19, r1, 16
20008a38:	ea810014 	lwi	r20, r1, 20
20008a3c:	30210018 	addik	r1, r1, 24
20008a40:	b60f0008 	rtsd	r15, 8
20008a44:	80000000 	or	r0, r0, r0

20008a48 <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20008a48:	3021fff0 	addik	r1, r1, -16
20008a4c:	fa610008 	swi	r19, r1, 8
20008a50:	fa81000c 	swi	r20, r1, 12
20008a54:	12610000 	addk	r19, r1, r0
20008a58:	96808000 	mfs	r20, rpc
20008a5c:	b000dfff 	imm	-8193
20008a60:	32948f04 	addik	r20, r20, -28924
20008a64:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20008a68:	e8730014 	lwi	r3, r19, 20
20008a6c:	e8630010 	lwi	r3, r3, 16
20008a70:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20008a74:	f8130004 	swi	r0, r19, 4
20008a78:	b8000028 	bri	40		// 20008aa0
        fifo->read_inds[i] = 0;
20008a7c:	e8730014 	lwi	r3, r19, 20
20008a80:	e883000c 	lwi	r4, r3, 12
20008a84:	e8730004 	lwi	r3, r19, 4
20008a88:	64630402 	bslli	r3, r3, 2
20008a8c:	10641800 	addk	r3, r4, r3
20008a90:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20008a94:	e8730004 	lwi	r3, r19, 4
20008a98:	30630001 	addik	r3, r3, 1
20008a9c:	f8730004 	swi	r3, r19, 4
20008aa0:	e8730014 	lwi	r3, r19, 20
20008aa4:	e8830008 	lwi	r4, r3, 8
20008aa8:	e8730004 	lwi	r3, r19, 4
20008aac:	16441803 	cmpu	r18, r4, r3
20008ab0:	bc52ffcc 	blti	r18, -52		// 20008a7c
        fifo->read_inds[i] = 0;
    }
}
20008ab4:	10330000 	addk	r1, r19, r0
20008ab8:	ea610008 	lwi	r19, r1, 8
20008abc:	ea81000c 	lwi	r20, r1, 12
20008ac0:	30210010 	addik	r1, r1, 16
20008ac4:	b60f0008 	rtsd	r15, 8
20008ac8:	80000000 	or	r0, r0, r0

20008acc <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20008acc:	3021fff0 	addik	r1, r1, -16
20008ad0:	fa610008 	swi	r19, r1, 8
20008ad4:	fa81000c 	swi	r20, r1, 12
20008ad8:	12610000 	addk	r19, r1, r0
20008adc:	96808000 	mfs	r20, rpc
20008ae0:	b000dfff 	imm	-8193
20008ae4:	32948e80 	addik	r20, r20, -29056
20008ae8:	f8b30014 	swi	r5, r19, 20
20008aec:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20008af0:	e8730014 	lwi	r3, r19, 20
20008af4:	e8830004 	lwi	r4, r3, 4
20008af8:	e8730014 	lwi	r3, r19, 20
20008afc:	e8a3000c 	lwi	r5, r3, 12
20008b00:	e8730018 	lwi	r3, r19, 24
20008b04:	64630402 	bslli	r3, r3, 2
20008b08:	10651800 	addk	r3, r5, r3
20008b0c:	e8a30000 	lwi	r5, r3, 0
20008b10:	e8730014 	lwi	r3, r19, 20
20008b14:	e8630000 	lwi	r3, r3, 0
20008b18:	3063ffff 	addik	r3, r3, -1
20008b1c:	84651800 	and	r3, r5, r3
20008b20:	64630402 	bslli	r3, r3, 2
20008b24:	10641800 	addk	r3, r4, r3
20008b28:	e8630000 	lwi	r3, r3, 0
20008b2c:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20008b30:	e8730014 	lwi	r3, r19, 20
20008b34:	e883000c 	lwi	r4, r3, 12
20008b38:	e8730018 	lwi	r3, r19, 24
20008b3c:	64630402 	bslli	r3, r3, 2
20008b40:	10641800 	addk	r3, r4, r3
20008b44:	e8830000 	lwi	r4, r3, 0
20008b48:	30840001 	addik	r4, r4, 1
20008b4c:	f8830000 	swi	r4, r3, 0
    return value;
20008b50:	e8730004 	lwi	r3, r19, 4
}
20008b54:	10330000 	addk	r1, r19, r0
20008b58:	ea610008 	lwi	r19, r1, 8
20008b5c:	ea81000c 	lwi	r20, r1, 12
20008b60:	30210010 	addik	r1, r1, 16
20008b64:	b60f0008 	rtsd	r15, 8
20008b68:	80000000 	or	r0, r0, r0

20008b6c <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20008b6c:	3021fff4 	addik	r1, r1, -12
20008b70:	fa610004 	swi	r19, r1, 4
20008b74:	fa810008 	swi	r20, r1, 8
20008b78:	12610000 	addk	r19, r1, r0
20008b7c:	96808000 	mfs	r20, rpc
20008b80:	b000dfff 	imm	-8193
20008b84:	32948de0 	addik	r20, r20, -29216
20008b88:	f8b30010 	swi	r5, r19, 16
20008b8c:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20008b90:	e8730010 	lwi	r3, r19, 16
20008b94:	e8830004 	lwi	r4, r3, 4
20008b98:	e8730010 	lwi	r3, r19, 16
20008b9c:	e8630010 	lwi	r3, r3, 16
20008ba0:	e8a30000 	lwi	r5, r3, 0
20008ba4:	e8730010 	lwi	r3, r19, 16
20008ba8:	e8630000 	lwi	r3, r3, 0
20008bac:	3063ffff 	addik	r3, r3, -1
20008bb0:	84651800 	and	r3, r5, r3
20008bb4:	64630402 	bslli	r3, r3, 2
20008bb8:	10641800 	addk	r3, r4, r3
20008bbc:	e8930014 	lwi	r4, r19, 20
20008bc0:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20008bc4:	e8730010 	lwi	r3, r19, 16
20008bc8:	e8630010 	lwi	r3, r3, 16
20008bcc:	e8830000 	lwi	r4, r3, 0
20008bd0:	30840001 	addik	r4, r4, 1
20008bd4:	f8830000 	swi	r4, r3, 0
}
20008bd8:	10330000 	addk	r1, r19, r0
20008bdc:	ea610004 	lwi	r19, r1, 4
20008be0:	ea810008 	lwi	r20, r1, 8
20008be4:	3021000c 	addik	r1, r1, 12
20008be8:	b60f0008 	rtsd	r15, 8
20008bec:	80000000 	or	r0, r0, r0

20008bf0 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20008bf0:	3021fff4 	addik	r1, r1, -12
20008bf4:	fa610004 	swi	r19, r1, 4
20008bf8:	fa810008 	swi	r20, r1, 8
20008bfc:	12610000 	addk	r19, r1, r0
20008c00:	96808000 	mfs	r20, rpc
20008c04:	b000dfff 	imm	-8193
20008c08:	32948d5c 	addik	r20, r20, -29348
20008c0c:	f8b30010 	swi	r5, r19, 16
20008c10:	f8d30014 	swi	r6, r19, 20
20008c14:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20008c18:	e8730010 	lwi	r3, r19, 16
20008c1c:	e8630010 	lwi	r3, r3, 16
20008c20:	e8830000 	lwi	r4, r3, 0
20008c24:	e8730010 	lwi	r3, r19, 16
20008c28:	e8a3000c 	lwi	r5, r3, 12
20008c2c:	e8730014 	lwi	r3, r19, 20
20008c30:	64630402 	bslli	r3, r3, 2
20008c34:	10651800 	addk	r3, r5, r3
20008c38:	e8630000 	lwi	r3, r3, 0
20008c3c:	14a32000 	rsubk	r5, r3, r4
20008c40:	30600001 	addik	r3, r0, 1
20008c44:	e8930018 	lwi	r4, r19, 24
20008c48:	16442803 	cmpu	r18, r4, r5
20008c4c:	bcb20008 	bgei	r18, 8		// 20008c54
20008c50:	10600000 	addk	r3, r0, r0
20008c54:	a46300ff 	andi	r3, r3, 255
}
20008c58:	10330000 	addk	r1, r19, r0
20008c5c:	ea610004 	lwi	r19, r1, 4
20008c60:	ea810008 	lwi	r20, r1, 8
20008c64:	3021000c 	addik	r1, r1, 12
20008c68:	b60f0008 	rtsd	r15, 8
20008c6c:	80000000 	or	r0, r0, r0

20008c70 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20008c70:	3021fff4 	addik	r1, r1, -12
20008c74:	fa610004 	swi	r19, r1, 4
20008c78:	fa810008 	swi	r20, r1, 8
20008c7c:	12610000 	addk	r19, r1, r0
20008c80:	96808000 	mfs	r20, rpc
20008c84:	b000dfff 	imm	-8193
20008c88:	32948cdc 	addik	r20, r20, -29476
20008c8c:	f8b30010 	swi	r5, r19, 16
20008c90:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20008c94:	e8730010 	lwi	r3, r19, 16
20008c98:	e8630010 	lwi	r3, r3, 16
20008c9c:	e8830000 	lwi	r4, r3, 0
20008ca0:	e8730010 	lwi	r3, r19, 16
20008ca4:	e8a3000c 	lwi	r5, r3, 12
20008ca8:	e8730014 	lwi	r3, r19, 20
20008cac:	64630402 	bslli	r3, r3, 2
20008cb0:	10651800 	addk	r3, r5, r3
20008cb4:	e8630000 	lwi	r3, r3, 0
20008cb8:	14632000 	rsubk	r3, r3, r4
}
20008cbc:	10330000 	addk	r1, r19, r0
20008cc0:	ea610004 	lwi	r19, r1, 4
20008cc4:	ea810008 	lwi	r20, r1, 8
20008cc8:	3021000c 	addik	r1, r1, 12
20008ccc:	b60f0008 	rtsd	r15, 8
20008cd0:	80000000 	or	r0, r0, r0

20008cd4 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20008cd4:	3021fff0 	addik	r1, r1, -16
20008cd8:	fa610008 	swi	r19, r1, 8
20008cdc:	fa81000c 	swi	r20, r1, 12
20008ce0:	12610000 	addk	r19, r1, r0
20008ce4:	96808000 	mfs	r20, rpc
20008ce8:	b000dfff 	imm	-8193
20008cec:	32948c78 	addik	r20, r20, -29576
20008cf0:	f8b30014 	swi	r5, r19, 20
20008cf4:	f8d30018 	swi	r6, r19, 24
20008cf8:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20008cfc:	f8130004 	swi	r0, r19, 4
20008d00:	b800005c 	bri	92		// 20008d5c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20008d04:	e8730014 	lwi	r3, r19, 20
20008d08:	e8830000 	lwi	r4, r3, 0
20008d0c:	e8730014 	lwi	r3, r19, 20
20008d10:	e8a3000c 	lwi	r5, r3, 12
20008d14:	e8730004 	lwi	r3, r19, 4
20008d18:	64630402 	bslli	r3, r3, 2
20008d1c:	10651800 	addk	r3, r5, r3
20008d20:	e8a30000 	lwi	r5, r3, 0
20008d24:	e8730014 	lwi	r3, r19, 20
20008d28:	e8630010 	lwi	r3, r3, 16
20008d2c:	e8630000 	lwi	r3, r3, 0
20008d30:	14632800 	rsubk	r3, r3, r5
20008d34:	10641800 	addk	r3, r4, r3
20008d38:	30830001 	addik	r4, r3, 1
20008d3c:	e873001c 	lwi	r3, r19, 28
20008d40:	16441803 	cmpu	r18, r4, r3
20008d44:	bc52000c 	blti	r18, 12		// 20008d50
            return 0;
20008d48:	10600000 	addk	r3, r0, r0
20008d4c:	b8000024 	bri	36		// 20008d70
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20008d50:	e8730004 	lwi	r3, r19, 4
20008d54:	30630001 	addik	r3, r3, 1
20008d58:	f8730004 	swi	r3, r19, 4
20008d5c:	e8930004 	lwi	r4, r19, 4
20008d60:	e8730018 	lwi	r3, r19, 24
20008d64:	16432003 	cmpu	r18, r3, r4
20008d68:	bc52ff9c 	blti	r18, -100		// 20008d04
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20008d6c:	30600001 	addik	r3, r0, 1
}
20008d70:	10330000 	addk	r1, r19, r0
20008d74:	ea610008 	lwi	r19, r1, 8
20008d78:	ea81000c 	lwi	r20, r1, 12
20008d7c:	30210010 	addik	r1, r1, 16
20008d80:	b60f0008 	rtsd	r15, 8
20008d84:	80000000 	or	r0, r0, r0

20008d88 <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20008d88:	3021ffe8 	addik	r1, r1, -24
20008d8c:	fa610010 	swi	r19, r1, 16
20008d90:	fa810014 	swi	r20, r1, 20
20008d94:	12610000 	addk	r19, r1, r0
20008d98:	96808000 	mfs	r20, rpc
20008d9c:	b000dfff 	imm	-8193
20008da0:	32948bc4 	addik	r20, r20, -29756
20008da4:	f8b3001c 	swi	r5, r19, 28
20008da8:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20008dac:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20008db0:	f8130004 	swi	r0, r19, 4
20008db4:	b8000054 	bri	84		// 20008e08
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20008db8:	e873001c 	lwi	r3, r19, 28
20008dbc:	e8630010 	lwi	r3, r3, 16
20008dc0:	e8830000 	lwi	r4, r3, 0
20008dc4:	e873001c 	lwi	r3, r19, 28
20008dc8:	e8a3000c 	lwi	r5, r3, 12
20008dcc:	e8730004 	lwi	r3, r19, 4
20008dd0:	64630402 	bslli	r3, r3, 2
20008dd4:	10651800 	addk	r3, r5, r3
20008dd8:	e8630000 	lwi	r3, r3, 0
20008ddc:	14632000 	rsubk	r3, r3, r4
20008de0:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20008de4:	e8930008 	lwi	r4, r19, 8
20008de8:	e873000c 	lwi	r3, r19, 12
20008dec:	16441803 	cmpu	r18, r4, r3
20008df0:	bcb20008 	bgei	r18, 8		// 20008df8
20008df4:	10640000 	addk	r3, r4, r0
20008df8:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20008dfc:	e8730004 	lwi	r3, r19, 4
20008e00:	30630001 	addik	r3, r3, 1
20008e04:	f8730004 	swi	r3, r19, 4
20008e08:	e8930004 	lwi	r4, r19, 4
20008e0c:	e8730020 	lwi	r3, r19, 32
20008e10:	16432003 	cmpu	r18, r3, r4
20008e14:	bc52ffa4 	blti	r18, -92		// 20008db8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20008e18:	e873001c 	lwi	r3, r19, 28
20008e1c:	e8830000 	lwi	r4, r3, 0
20008e20:	e8730008 	lwi	r3, r19, 8
20008e24:	14632000 	rsubk	r3, r3, r4
}
20008e28:	10330000 	addk	r1, r19, r0
20008e2c:	ea610010 	lwi	r19, r1, 16
20008e30:	ea810014 	lwi	r20, r1, 20
20008e34:	30210018 	addik	r1, r1, 24
20008e38:	b60f0008 	rtsd	r15, 8
20008e3c:	80000000 	or	r0, r0, r0

20008e40 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20008e40:	3021fff0 	addik	r1, r1, -16
20008e44:	fa610008 	swi	r19, r1, 8
20008e48:	fa81000c 	swi	r20, r1, 12
20008e4c:	12610000 	addk	r19, r1, r0
20008e50:	96808000 	mfs	r20, rpc
20008e54:	b000dfff 	imm	-8193
20008e58:	32948b0c 	addik	r20, r20, -29940
20008e5c:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20008e60:	e8730014 	lwi	r3, r19, 20
20008e64:	e8630010 	lwi	r3, r3, 16
20008e68:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20008e6c:	f8130004 	swi	r0, r19, 4
20008e70:	b8000028 	bri	40		// 20008e98
        fifo->read_inds[i] = 0;
20008e74:	e8730014 	lwi	r3, r19, 20
20008e78:	e883000c 	lwi	r4, r3, 12
20008e7c:	e8730004 	lwi	r3, r19, 4
20008e80:	64630402 	bslli	r3, r3, 2
20008e84:	10641800 	addk	r3, r4, r3
20008e88:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20008e8c:	e8730004 	lwi	r3, r19, 4
20008e90:	30630001 	addik	r3, r3, 1
20008e94:	f8730004 	swi	r3, r19, 4
20008e98:	e8730014 	lwi	r3, r19, 20
20008e9c:	e8830008 	lwi	r4, r3, 8
20008ea0:	e8730004 	lwi	r3, r19, 4
20008ea4:	16441803 	cmpu	r18, r4, r3
20008ea8:	bc52ffcc 	blti	r18, -52		// 20008e74
        fifo->read_inds[i] = 0;
    }
}
20008eac:	10330000 	addk	r1, r19, r0
20008eb0:	ea610008 	lwi	r19, r1, 8
20008eb4:	ea81000c 	lwi	r20, r1, 12
20008eb8:	30210010 	addik	r1, r1, 16
20008ebc:	b60f0008 	rtsd	r15, 8
20008ec0:	80000000 	or	r0, r0, r0

20008ec4 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20008ec4:	3021ffec 	addik	r1, r1, -20
20008ec8:	fa61000c 	swi	r19, r1, 12
20008ecc:	fa810010 	swi	r20, r1, 16
20008ed0:	12610000 	addk	r19, r1, r0
20008ed4:	96808000 	mfs	r20, rpc
20008ed8:	b000dfff 	imm	-8193
20008edc:	32948a88 	addik	r20, r20, -30072
20008ee0:	f8b30018 	swi	r5, r19, 24
20008ee4:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20008ee8:	e8730018 	lwi	r3, r19, 24
20008eec:	e8830004 	lwi	r4, r3, 4
20008ef0:	e8730018 	lwi	r3, r19, 24
20008ef4:	e8a3000c 	lwi	r5, r3, 12
20008ef8:	e873001c 	lwi	r3, r19, 28
20008efc:	64630402 	bslli	r3, r3, 2
20008f00:	10651800 	addk	r3, r5, r3
20008f04:	e8a30000 	lwi	r5, r3, 0
20008f08:	e8730018 	lwi	r3, r19, 24
20008f0c:	e8630000 	lwi	r3, r3, 0
20008f10:	3063ffff 	addik	r3, r3, -1
20008f14:	84651800 	and	r3, r5, r3
20008f18:	64630403 	bslli	r3, r3, 3
20008f1c:	10641800 	addk	r3, r4, r3
20008f20:	e8830000 	lwi	r4, r3, 0
20008f24:	e8a30004 	lwi	r5, r3, 4
20008f28:	f8930004 	swi	r4, r19, 4
20008f2c:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20008f30:	e8730018 	lwi	r3, r19, 24
20008f34:	e883000c 	lwi	r4, r3, 12
20008f38:	e873001c 	lwi	r3, r19, 28
20008f3c:	64630402 	bslli	r3, r3, 2
20008f40:	10641800 	addk	r3, r4, r3
20008f44:	e8830000 	lwi	r4, r3, 0
20008f48:	30840001 	addik	r4, r4, 1
20008f4c:	f8830000 	swi	r4, r3, 0
    return value;
20008f50:	e8930004 	lwi	r4, r19, 4
20008f54:	e8b30008 	lwi	r5, r19, 8
}
20008f58:	10640000 	addk	r3, r4, r0
20008f5c:	10850000 	addk	r4, r5, r0
20008f60:	10330000 	addk	r1, r19, r0
20008f64:	ea61000c 	lwi	r19, r1, 12
20008f68:	ea810010 	lwi	r20, r1, 16
20008f6c:	30210014 	addik	r1, r1, 20
20008f70:	b60f0008 	rtsd	r15, 8
20008f74:	80000000 	or	r0, r0, r0

20008f78 <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20008f78:	3021fff4 	addik	r1, r1, -12
20008f7c:	fa610004 	swi	r19, r1, 4
20008f80:	fa810008 	swi	r20, r1, 8
20008f84:	12610000 	addk	r19, r1, r0
20008f88:	96808000 	mfs	r20, rpc
20008f8c:	b000dfff 	imm	-8193
20008f90:	329489d4 	addik	r20, r20, -30252
20008f94:	f8b30010 	swi	r5, r19, 16
20008f98:	f8d30014 	swi	r6, r19, 20
20008f9c:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20008fa0:	e8730010 	lwi	r3, r19, 16
20008fa4:	e8830004 	lwi	r4, r3, 4
20008fa8:	e8730010 	lwi	r3, r19, 16
20008fac:	e8630010 	lwi	r3, r3, 16
20008fb0:	e8a30000 	lwi	r5, r3, 0
20008fb4:	e8730010 	lwi	r3, r19, 16
20008fb8:	e8630000 	lwi	r3, r3, 0
20008fbc:	3063ffff 	addik	r3, r3, -1
20008fc0:	84651800 	and	r3, r5, r3
20008fc4:	64630403 	bslli	r3, r3, 3
20008fc8:	10641800 	addk	r3, r4, r3
20008fcc:	e8930014 	lwi	r4, r19, 20
20008fd0:	e8b30018 	lwi	r5, r19, 24
20008fd4:	f8830000 	swi	r4, r3, 0
20008fd8:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20008fdc:	e8730010 	lwi	r3, r19, 16
20008fe0:	e8630010 	lwi	r3, r3, 16
20008fe4:	e8830000 	lwi	r4, r3, 0
20008fe8:	30840001 	addik	r4, r4, 1
20008fec:	f8830000 	swi	r4, r3, 0
}
20008ff0:	10330000 	addk	r1, r19, r0
20008ff4:	ea610004 	lwi	r19, r1, 4
20008ff8:	ea810008 	lwi	r20, r1, 8
20008ffc:	3021000c 	addik	r1, r1, 12
20009000:	b60f0008 	rtsd	r15, 8
20009004:	80000000 	or	r0, r0, r0

20009008 <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20009008:	3021fff4 	addik	r1, r1, -12
2000900c:	fa610004 	swi	r19, r1, 4
20009010:	fa810008 	swi	r20, r1, 8
20009014:	12610000 	addk	r19, r1, r0
20009018:	96808000 	mfs	r20, rpc
2000901c:	b000dfff 	imm	-8193
20009020:	32948944 	addik	r20, r20, -30396
20009024:	f8b30010 	swi	r5, r19, 16
20009028:	f8d30014 	swi	r6, r19, 20
2000902c:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20009030:	e8730010 	lwi	r3, r19, 16
20009034:	e8630010 	lwi	r3, r3, 16
20009038:	e8830000 	lwi	r4, r3, 0
2000903c:	e8730010 	lwi	r3, r19, 16
20009040:	e8a3000c 	lwi	r5, r3, 12
20009044:	e8730014 	lwi	r3, r19, 20
20009048:	64630402 	bslli	r3, r3, 2
2000904c:	10651800 	addk	r3, r5, r3
20009050:	e8630000 	lwi	r3, r3, 0
20009054:	14a32000 	rsubk	r5, r3, r4
20009058:	30600001 	addik	r3, r0, 1
2000905c:	e8930018 	lwi	r4, r19, 24
20009060:	16442803 	cmpu	r18, r4, r5
20009064:	bcb20008 	bgei	r18, 8		// 2000906c
20009068:	10600000 	addk	r3, r0, r0
2000906c:	a46300ff 	andi	r3, r3, 255
}
20009070:	10330000 	addk	r1, r19, r0
20009074:	ea610004 	lwi	r19, r1, 4
20009078:	ea810008 	lwi	r20, r1, 8
2000907c:	3021000c 	addik	r1, r1, 12
20009080:	b60f0008 	rtsd	r15, 8
20009084:	80000000 	or	r0, r0, r0

20009088 <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20009088:	3021fff4 	addik	r1, r1, -12
2000908c:	fa610004 	swi	r19, r1, 4
20009090:	fa810008 	swi	r20, r1, 8
20009094:	12610000 	addk	r19, r1, r0
20009098:	96808000 	mfs	r20, rpc
2000909c:	b000dfff 	imm	-8193
200090a0:	329488c4 	addik	r20, r20, -30524
200090a4:	f8b30010 	swi	r5, r19, 16
200090a8:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200090ac:	e8730010 	lwi	r3, r19, 16
200090b0:	e8630010 	lwi	r3, r3, 16
200090b4:	e8830000 	lwi	r4, r3, 0
200090b8:	e8730010 	lwi	r3, r19, 16
200090bc:	e8a3000c 	lwi	r5, r3, 12
200090c0:	e8730014 	lwi	r3, r19, 20
200090c4:	64630402 	bslli	r3, r3, 2
200090c8:	10651800 	addk	r3, r5, r3
200090cc:	e8630000 	lwi	r3, r3, 0
200090d0:	14632000 	rsubk	r3, r3, r4
}
200090d4:	10330000 	addk	r1, r19, r0
200090d8:	ea610004 	lwi	r19, r1, 4
200090dc:	ea810008 	lwi	r20, r1, 8
200090e0:	3021000c 	addik	r1, r1, 12
200090e4:	b60f0008 	rtsd	r15, 8
200090e8:	80000000 	or	r0, r0, r0

200090ec <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200090ec:	3021fff0 	addik	r1, r1, -16
200090f0:	fa610008 	swi	r19, r1, 8
200090f4:	fa81000c 	swi	r20, r1, 12
200090f8:	12610000 	addk	r19, r1, r0
200090fc:	96808000 	mfs	r20, rpc
20009100:	b000dfff 	imm	-8193
20009104:	32948860 	addik	r20, r20, -30624
20009108:	f8b30014 	swi	r5, r19, 20
2000910c:	f8d30018 	swi	r6, r19, 24
20009110:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20009114:	f8130004 	swi	r0, r19, 4
20009118:	b800005c 	bri	92		// 20009174
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000911c:	e8730014 	lwi	r3, r19, 20
20009120:	e8830000 	lwi	r4, r3, 0
20009124:	e8730014 	lwi	r3, r19, 20
20009128:	e8a3000c 	lwi	r5, r3, 12
2000912c:	e8730004 	lwi	r3, r19, 4
20009130:	64630402 	bslli	r3, r3, 2
20009134:	10651800 	addk	r3, r5, r3
20009138:	e8a30000 	lwi	r5, r3, 0
2000913c:	e8730014 	lwi	r3, r19, 20
20009140:	e8630010 	lwi	r3, r3, 16
20009144:	e8630000 	lwi	r3, r3, 0
20009148:	14632800 	rsubk	r3, r3, r5
2000914c:	10641800 	addk	r3, r4, r3
20009150:	30830001 	addik	r4, r3, 1
20009154:	e873001c 	lwi	r3, r19, 28
20009158:	16441803 	cmpu	r18, r4, r3
2000915c:	bc52000c 	blti	r18, 12		// 20009168
            return 0;
20009160:	10600000 	addk	r3, r0, r0
20009164:	b8000024 	bri	36		// 20009188
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20009168:	e8730004 	lwi	r3, r19, 4
2000916c:	30630001 	addik	r3, r3, 1
20009170:	f8730004 	swi	r3, r19, 4
20009174:	e8930004 	lwi	r4, r19, 4
20009178:	e8730018 	lwi	r3, r19, 24
2000917c:	16432003 	cmpu	r18, r3, r4
20009180:	bc52ff9c 	blti	r18, -100		// 2000911c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20009184:	30600001 	addik	r3, r0, 1
}
20009188:	10330000 	addk	r1, r19, r0
2000918c:	ea610008 	lwi	r19, r1, 8
20009190:	ea81000c 	lwi	r20, r1, 12
20009194:	30210010 	addik	r1, r1, 16
20009198:	b60f0008 	rtsd	r15, 8
2000919c:	80000000 	or	r0, r0, r0

200091a0 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200091a0:	3021ffe8 	addik	r1, r1, -24
200091a4:	fa610010 	swi	r19, r1, 16
200091a8:	fa810014 	swi	r20, r1, 20
200091ac:	12610000 	addk	r19, r1, r0
200091b0:	96808000 	mfs	r20, rpc
200091b4:	b000dfff 	imm	-8193
200091b8:	329487ac 	addik	r20, r20, -30804
200091bc:	f8b3001c 	swi	r5, r19, 28
200091c0:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
200091c4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200091c8:	f8130004 	swi	r0, r19, 4
200091cc:	b8000054 	bri	84		// 20009220
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200091d0:	e873001c 	lwi	r3, r19, 28
200091d4:	e8630010 	lwi	r3, r3, 16
200091d8:	e8830000 	lwi	r4, r3, 0
200091dc:	e873001c 	lwi	r3, r19, 28
200091e0:	e8a3000c 	lwi	r5, r3, 12
200091e4:	e8730004 	lwi	r3, r19, 4
200091e8:	64630402 	bslli	r3, r3, 2
200091ec:	10651800 	addk	r3, r5, r3
200091f0:	e8630000 	lwi	r3, r3, 0
200091f4:	14632000 	rsubk	r3, r3, r4
200091f8:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200091fc:	e8930008 	lwi	r4, r19, 8
20009200:	e873000c 	lwi	r3, r19, 12
20009204:	16441803 	cmpu	r18, r4, r3
20009208:	bcb20008 	bgei	r18, 8		// 20009210
2000920c:	10640000 	addk	r3, r4, r0
20009210:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20009214:	e8730004 	lwi	r3, r19, 4
20009218:	30630001 	addik	r3, r3, 1
2000921c:	f8730004 	swi	r3, r19, 4
20009220:	e8930004 	lwi	r4, r19, 4
20009224:	e8730020 	lwi	r3, r19, 32
20009228:	16432003 	cmpu	r18, r3, r4
2000922c:	bc52ffa4 	blti	r18, -92		// 200091d0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20009230:	e873001c 	lwi	r3, r19, 28
20009234:	e8830000 	lwi	r4, r3, 0
20009238:	e8730008 	lwi	r3, r19, 8
2000923c:	14632000 	rsubk	r3, r3, r4
}
20009240:	10330000 	addk	r1, r19, r0
20009244:	ea610010 	lwi	r19, r1, 16
20009248:	ea810014 	lwi	r20, r1, 20
2000924c:	30210018 	addik	r1, r1, 24
20009250:	b60f0008 	rtsd	r15, 8
20009254:	80000000 	or	r0, r0, r0

20009258 <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20009258:	3021fff0 	addik	r1, r1, -16
2000925c:	fa610008 	swi	r19, r1, 8
20009260:	fa81000c 	swi	r20, r1, 12
20009264:	12610000 	addk	r19, r1, r0
20009268:	96808000 	mfs	r20, rpc
2000926c:	b000dfff 	imm	-8193
20009270:	329486f4 	addik	r20, r20, -30988
20009274:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20009278:	e8730014 	lwi	r3, r19, 20
2000927c:	e8630010 	lwi	r3, r3, 16
20009280:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20009284:	f8130004 	swi	r0, r19, 4
20009288:	b8000028 	bri	40		// 200092b0
        fifo->read_inds[i] = 0;
2000928c:	e8730014 	lwi	r3, r19, 20
20009290:	e883000c 	lwi	r4, r3, 12
20009294:	e8730004 	lwi	r3, r19, 4
20009298:	64630402 	bslli	r3, r3, 2
2000929c:	10641800 	addk	r3, r4, r3
200092a0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200092a4:	e8730004 	lwi	r3, r19, 4
200092a8:	30630001 	addik	r3, r3, 1
200092ac:	f8730004 	swi	r3, r19, 4
200092b0:	e8730014 	lwi	r3, r19, 20
200092b4:	e8830008 	lwi	r4, r3, 8
200092b8:	e8730004 	lwi	r3, r19, 4
200092bc:	16441803 	cmpu	r18, r4, r3
200092c0:	bc52ffcc 	blti	r18, -52		// 2000928c
        fifo->read_inds[i] = 0;
    }
}
200092c4:	10330000 	addk	r1, r19, r0
200092c8:	ea610008 	lwi	r19, r1, 8
200092cc:	ea81000c 	lwi	r20, r1, 12
200092d0:	30210010 	addik	r1, r1, 16
200092d4:	b60f0008 	rtsd	r15, 8
200092d8:	80000000 	or	r0, r0, r0

200092dc <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200092dc:	3021fff0 	addik	r1, r1, -16
200092e0:	fa610008 	swi	r19, r1, 8
200092e4:	fa81000c 	swi	r20, r1, 12
200092e8:	12610000 	addk	r19, r1, r0
200092ec:	96808000 	mfs	r20, rpc
200092f0:	b000dfff 	imm	-8193
200092f4:	32948670 	addik	r20, r20, -31120
200092f8:	f8b30014 	swi	r5, r19, 20
200092fc:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20009300:	e8730014 	lwi	r3, r19, 20
20009304:	e8830004 	lwi	r4, r3, 4
20009308:	e8730014 	lwi	r3, r19, 20
2000930c:	e8a3000c 	lwi	r5, r3, 12
20009310:	e8730018 	lwi	r3, r19, 24
20009314:	64630402 	bslli	r3, r3, 2
20009318:	10651800 	addk	r3, r5, r3
2000931c:	e8a30000 	lwi	r5, r3, 0
20009320:	e8730014 	lwi	r3, r19, 20
20009324:	e8630000 	lwi	r3, r3, 0
20009328:	3063ffff 	addik	r3, r3, -1
2000932c:	84651800 	and	r3, r5, r3
20009330:	10641800 	addk	r3, r4, r3
20009334:	e0630000 	lbui	r3, r3, 0
20009338:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000933c:	e8730014 	lwi	r3, r19, 20
20009340:	e883000c 	lwi	r4, r3, 12
20009344:	e8730018 	lwi	r3, r19, 24
20009348:	64630402 	bslli	r3, r3, 2
2000934c:	10641800 	addk	r3, r4, r3
20009350:	e8830000 	lwi	r4, r3, 0
20009354:	30840001 	addik	r4, r4, 1
20009358:	f8830000 	swi	r4, r3, 0
    return value;
2000935c:	e0730004 	lbui	r3, r19, 4
}
20009360:	10330000 	addk	r1, r19, r0
20009364:	ea610008 	lwi	r19, r1, 8
20009368:	ea81000c 	lwi	r20, r1, 12
2000936c:	30210010 	addik	r1, r1, 16
20009370:	b60f0008 	rtsd	r15, 8
20009374:	80000000 	or	r0, r0, r0

20009378 <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20009378:	3021fff4 	addik	r1, r1, -12
2000937c:	fa610004 	swi	r19, r1, 4
20009380:	fa810008 	swi	r20, r1, 8
20009384:	12610000 	addk	r19, r1, r0
20009388:	96808000 	mfs	r20, rpc
2000938c:	b000dfff 	imm	-8193
20009390:	329485d4 	addik	r20, r20, -31276
20009394:	f8b30010 	swi	r5, r19, 16
20009398:	10660000 	addk	r3, r6, r0
2000939c:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200093a0:	e8730010 	lwi	r3, r19, 16
200093a4:	e8830004 	lwi	r4, r3, 4
200093a8:	e8730010 	lwi	r3, r19, 16
200093ac:	e8630010 	lwi	r3, r3, 16
200093b0:	e8a30000 	lwi	r5, r3, 0
200093b4:	e8730010 	lwi	r3, r19, 16
200093b8:	e8630000 	lwi	r3, r3, 0
200093bc:	3063ffff 	addik	r3, r3, -1
200093c0:	84651800 	and	r3, r5, r3
200093c4:	10641800 	addk	r3, r4, r3
200093c8:	e0930014 	lbui	r4, r19, 20
200093cc:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
200093d0:	e8730010 	lwi	r3, r19, 16
200093d4:	e8630010 	lwi	r3, r3, 16
200093d8:	e8830000 	lwi	r4, r3, 0
200093dc:	30840001 	addik	r4, r4, 1
200093e0:	f8830000 	swi	r4, r3, 0
}
200093e4:	10330000 	addk	r1, r19, r0
200093e8:	ea610004 	lwi	r19, r1, 4
200093ec:	ea810008 	lwi	r20, r1, 8
200093f0:	3021000c 	addik	r1, r1, 12
200093f4:	b60f0008 	rtsd	r15, 8
200093f8:	80000000 	or	r0, r0, r0

200093fc <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200093fc:	3021fff4 	addik	r1, r1, -12
20009400:	fa610004 	swi	r19, r1, 4
20009404:	fa810008 	swi	r20, r1, 8
20009408:	12610000 	addk	r19, r1, r0
2000940c:	96808000 	mfs	r20, rpc
20009410:	b000dfff 	imm	-8193
20009414:	32948550 	addik	r20, r20, -31408
20009418:	f8b30010 	swi	r5, r19, 16
2000941c:	f8d30014 	swi	r6, r19, 20
20009420:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20009424:	e8730010 	lwi	r3, r19, 16
20009428:	e8630010 	lwi	r3, r3, 16
2000942c:	e8830000 	lwi	r4, r3, 0
20009430:	e8730010 	lwi	r3, r19, 16
20009434:	e8a3000c 	lwi	r5, r3, 12
20009438:	e8730014 	lwi	r3, r19, 20
2000943c:	64630402 	bslli	r3, r3, 2
20009440:	10651800 	addk	r3, r5, r3
20009444:	e8630000 	lwi	r3, r3, 0
20009448:	14a32000 	rsubk	r5, r3, r4
2000944c:	30600001 	addik	r3, r0, 1
20009450:	e8930018 	lwi	r4, r19, 24
20009454:	16442803 	cmpu	r18, r4, r5
20009458:	bcb20008 	bgei	r18, 8		// 20009460
2000945c:	10600000 	addk	r3, r0, r0
20009460:	a46300ff 	andi	r3, r3, 255
}
20009464:	10330000 	addk	r1, r19, r0
20009468:	ea610004 	lwi	r19, r1, 4
2000946c:	ea810008 	lwi	r20, r1, 8
20009470:	3021000c 	addik	r1, r1, 12
20009474:	b60f0008 	rtsd	r15, 8
20009478:	80000000 	or	r0, r0, r0

2000947c <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000947c:	3021fff4 	addik	r1, r1, -12
20009480:	fa610004 	swi	r19, r1, 4
20009484:	fa810008 	swi	r20, r1, 8
20009488:	12610000 	addk	r19, r1, r0
2000948c:	96808000 	mfs	r20, rpc
20009490:	b000dfff 	imm	-8193
20009494:	329484d0 	addik	r20, r20, -31536
20009498:	f8b30010 	swi	r5, r19, 16
2000949c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200094a0:	e8730010 	lwi	r3, r19, 16
200094a4:	e8630010 	lwi	r3, r3, 16
200094a8:	e8830000 	lwi	r4, r3, 0
200094ac:	e8730010 	lwi	r3, r19, 16
200094b0:	e8a3000c 	lwi	r5, r3, 12
200094b4:	e8730014 	lwi	r3, r19, 20
200094b8:	64630402 	bslli	r3, r3, 2
200094bc:	10651800 	addk	r3, r5, r3
200094c0:	e8630000 	lwi	r3, r3, 0
200094c4:	14632000 	rsubk	r3, r3, r4
}
200094c8:	10330000 	addk	r1, r19, r0
200094cc:	ea610004 	lwi	r19, r1, 4
200094d0:	ea810008 	lwi	r20, r1, 8
200094d4:	3021000c 	addik	r1, r1, 12
200094d8:	b60f0008 	rtsd	r15, 8
200094dc:	80000000 	or	r0, r0, r0

200094e0 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200094e0:	3021fff0 	addik	r1, r1, -16
200094e4:	fa610008 	swi	r19, r1, 8
200094e8:	fa81000c 	swi	r20, r1, 12
200094ec:	12610000 	addk	r19, r1, r0
200094f0:	96808000 	mfs	r20, rpc
200094f4:	b000dfff 	imm	-8193
200094f8:	3294846c 	addik	r20, r20, -31636
200094fc:	f8b30014 	swi	r5, r19, 20
20009500:	f8d30018 	swi	r6, r19, 24
20009504:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20009508:	f8130004 	swi	r0, r19, 4
2000950c:	b800005c 	bri	92		// 20009568
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20009510:	e8730014 	lwi	r3, r19, 20
20009514:	e8830000 	lwi	r4, r3, 0
20009518:	e8730014 	lwi	r3, r19, 20
2000951c:	e8a3000c 	lwi	r5, r3, 12
20009520:	e8730004 	lwi	r3, r19, 4
20009524:	64630402 	bslli	r3, r3, 2
20009528:	10651800 	addk	r3, r5, r3
2000952c:	e8a30000 	lwi	r5, r3, 0
20009530:	e8730014 	lwi	r3, r19, 20
20009534:	e8630010 	lwi	r3, r3, 16
20009538:	e8630000 	lwi	r3, r3, 0
2000953c:	14632800 	rsubk	r3, r3, r5
20009540:	10641800 	addk	r3, r4, r3
20009544:	30830001 	addik	r4, r3, 1
20009548:	e873001c 	lwi	r3, r19, 28
2000954c:	16441803 	cmpu	r18, r4, r3
20009550:	bc52000c 	blti	r18, 12		// 2000955c
            return 0;
20009554:	10600000 	addk	r3, r0, r0
20009558:	b8000024 	bri	36		// 2000957c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000955c:	e8730004 	lwi	r3, r19, 4
20009560:	30630001 	addik	r3, r3, 1
20009564:	f8730004 	swi	r3, r19, 4
20009568:	e8930004 	lwi	r4, r19, 4
2000956c:	e8730018 	lwi	r3, r19, 24
20009570:	16432003 	cmpu	r18, r3, r4
20009574:	bc52ff9c 	blti	r18, -100		// 20009510
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20009578:	30600001 	addik	r3, r0, 1
}
2000957c:	10330000 	addk	r1, r19, r0
20009580:	ea610008 	lwi	r19, r1, 8
20009584:	ea81000c 	lwi	r20, r1, 12
20009588:	30210010 	addik	r1, r1, 16
2000958c:	b60f0008 	rtsd	r15, 8
20009590:	80000000 	or	r0, r0, r0

20009594 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20009594:	3021ffe8 	addik	r1, r1, -24
20009598:	fa610010 	swi	r19, r1, 16
2000959c:	fa810014 	swi	r20, r1, 20
200095a0:	12610000 	addk	r19, r1, r0
200095a4:	96808000 	mfs	r20, rpc
200095a8:	b000dfff 	imm	-8193
200095ac:	329483b8 	addik	r20, r20, -31816
200095b0:	f8b3001c 	swi	r5, r19, 28
200095b4:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
200095b8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200095bc:	f8130004 	swi	r0, r19, 4
200095c0:	b8000054 	bri	84		// 20009614
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200095c4:	e873001c 	lwi	r3, r19, 28
200095c8:	e8630010 	lwi	r3, r3, 16
200095cc:	e8830000 	lwi	r4, r3, 0
200095d0:	e873001c 	lwi	r3, r19, 28
200095d4:	e8a3000c 	lwi	r5, r3, 12
200095d8:	e8730004 	lwi	r3, r19, 4
200095dc:	64630402 	bslli	r3, r3, 2
200095e0:	10651800 	addk	r3, r5, r3
200095e4:	e8630000 	lwi	r3, r3, 0
200095e8:	14632000 	rsubk	r3, r3, r4
200095ec:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200095f0:	e8930008 	lwi	r4, r19, 8
200095f4:	e873000c 	lwi	r3, r19, 12
200095f8:	16441803 	cmpu	r18, r4, r3
200095fc:	bcb20008 	bgei	r18, 8		// 20009604
20009600:	10640000 	addk	r3, r4, r0
20009604:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20009608:	e8730004 	lwi	r3, r19, 4
2000960c:	30630001 	addik	r3, r3, 1
20009610:	f8730004 	swi	r3, r19, 4
20009614:	e8930004 	lwi	r4, r19, 4
20009618:	e8730020 	lwi	r3, r19, 32
2000961c:	16432003 	cmpu	r18, r3, r4
20009620:	bc52ffa4 	blti	r18, -92		// 200095c4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20009624:	e873001c 	lwi	r3, r19, 28
20009628:	e8830000 	lwi	r4, r3, 0
2000962c:	e8730008 	lwi	r3, r19, 8
20009630:	14632000 	rsubk	r3, r3, r4
}
20009634:	10330000 	addk	r1, r19, r0
20009638:	ea610010 	lwi	r19, r1, 16
2000963c:	ea810014 	lwi	r20, r1, 20
20009640:	30210018 	addik	r1, r1, 24
20009644:	b60f0008 	rtsd	r15, 8
20009648:	80000000 	or	r0, r0, r0

2000964c <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000964c:	3021fff0 	addik	r1, r1, -16
20009650:	fa610008 	swi	r19, r1, 8
20009654:	fa81000c 	swi	r20, r1, 12
20009658:	12610000 	addk	r19, r1, r0
2000965c:	96808000 	mfs	r20, rpc
20009660:	b000dfff 	imm	-8193
20009664:	32948300 	addik	r20, r20, -32000
20009668:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2000966c:	e8730014 	lwi	r3, r19, 20
20009670:	e8630010 	lwi	r3, r3, 16
20009674:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20009678:	f8130004 	swi	r0, r19, 4
2000967c:	b8000028 	bri	40		// 200096a4
        fifo->read_inds[i] = 0;
20009680:	e8730014 	lwi	r3, r19, 20
20009684:	e883000c 	lwi	r4, r3, 12
20009688:	e8730004 	lwi	r3, r19, 4
2000968c:	64630402 	bslli	r3, r3, 2
20009690:	10641800 	addk	r3, r4, r3
20009694:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20009698:	e8730004 	lwi	r3, r19, 4
2000969c:	30630001 	addik	r3, r3, 1
200096a0:	f8730004 	swi	r3, r19, 4
200096a4:	e8730014 	lwi	r3, r19, 20
200096a8:	e8830008 	lwi	r4, r3, 8
200096ac:	e8730004 	lwi	r3, r19, 4
200096b0:	16441803 	cmpu	r18, r4, r3
200096b4:	bc52ffcc 	blti	r18, -52		// 20009680
        fifo->read_inds[i] = 0;
    }
}
200096b8:	10330000 	addk	r1, r19, r0
200096bc:	ea610008 	lwi	r19, r1, 8
200096c0:	ea81000c 	lwi	r20, r1, 12
200096c4:	30210010 	addik	r1, r1, 16
200096c8:	b60f0008 	rtsd	r15, 8
200096cc:	80000000 	or	r0, r0, r0

200096d0 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200096d0:	3021fff0 	addik	r1, r1, -16
200096d4:	fa610008 	swi	r19, r1, 8
200096d8:	fa81000c 	swi	r20, r1, 12
200096dc:	12610000 	addk	r19, r1, r0
200096e0:	96808000 	mfs	r20, rpc
200096e4:	b000dfff 	imm	-8193
200096e8:	3294827c 	addik	r20, r20, -32132
200096ec:	f8b30014 	swi	r5, r19, 20
200096f0:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200096f4:	e8730014 	lwi	r3, r19, 20
200096f8:	e8830004 	lwi	r4, r3, 4
200096fc:	e8730014 	lwi	r3, r19, 20
20009700:	e8a3000c 	lwi	r5, r3, 12
20009704:	e8730018 	lwi	r3, r19, 24
20009708:	64630402 	bslli	r3, r3, 2
2000970c:	10651800 	addk	r3, r5, r3
20009710:	e8a30000 	lwi	r5, r3, 0
20009714:	e8730014 	lwi	r3, r19, 20
20009718:	e8630000 	lwi	r3, r3, 0
2000971c:	3063ffff 	addik	r3, r3, -1
20009720:	84651800 	and	r3, r5, r3
20009724:	10631800 	addk	r3, r3, r3
20009728:	10641800 	addk	r3, r4, r3
2000972c:	e4630000 	lhui	r3, r3, 0
20009730:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20009734:	e8730014 	lwi	r3, r19, 20
20009738:	e883000c 	lwi	r4, r3, 12
2000973c:	e8730018 	lwi	r3, r19, 24
20009740:	64630402 	bslli	r3, r3, 2
20009744:	10641800 	addk	r3, r4, r3
20009748:	e8830000 	lwi	r4, r3, 0
2000974c:	30840001 	addik	r4, r4, 1
20009750:	f8830000 	swi	r4, r3, 0
    return value;
20009754:	e4730004 	lhui	r3, r19, 4
}
20009758:	10330000 	addk	r1, r19, r0
2000975c:	ea610008 	lwi	r19, r1, 8
20009760:	ea81000c 	lwi	r20, r1, 12
20009764:	30210010 	addik	r1, r1, 16
20009768:	b60f0008 	rtsd	r15, 8
2000976c:	80000000 	or	r0, r0, r0

20009770 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20009770:	3021fff4 	addik	r1, r1, -12
20009774:	fa610004 	swi	r19, r1, 4
20009778:	fa810008 	swi	r20, r1, 8
2000977c:	12610000 	addk	r19, r1, r0
20009780:	96808000 	mfs	r20, rpc
20009784:	b000dfff 	imm	-8193
20009788:	329481dc 	addik	r20, r20, -32292
2000978c:	f8b30010 	swi	r5, r19, 16
20009790:	10660000 	addk	r3, r6, r0
20009794:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20009798:	e8730010 	lwi	r3, r19, 16
2000979c:	e8830004 	lwi	r4, r3, 4
200097a0:	e8730010 	lwi	r3, r19, 16
200097a4:	e8630010 	lwi	r3, r3, 16
200097a8:	e8a30000 	lwi	r5, r3, 0
200097ac:	e8730010 	lwi	r3, r19, 16
200097b0:	e8630000 	lwi	r3, r3, 0
200097b4:	3063ffff 	addik	r3, r3, -1
200097b8:	84651800 	and	r3, r5, r3
200097bc:	10631800 	addk	r3, r3, r3
200097c0:	10641800 	addk	r3, r4, r3
200097c4:	e4930014 	lhui	r4, r19, 20
200097c8:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
200097cc:	e8730010 	lwi	r3, r19, 16
200097d0:	e8630010 	lwi	r3, r3, 16
200097d4:	e8830000 	lwi	r4, r3, 0
200097d8:	30840001 	addik	r4, r4, 1
200097dc:	f8830000 	swi	r4, r3, 0
}
200097e0:	10330000 	addk	r1, r19, r0
200097e4:	ea610004 	lwi	r19, r1, 4
200097e8:	ea810008 	lwi	r20, r1, 8
200097ec:	3021000c 	addik	r1, r1, 12
200097f0:	b60f0008 	rtsd	r15, 8
200097f4:	80000000 	or	r0, r0, r0

200097f8 <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200097f8:	3021fff4 	addik	r1, r1, -12
200097fc:	fa610004 	swi	r19, r1, 4
20009800:	fa810008 	swi	r20, r1, 8
20009804:	12610000 	addk	r19, r1, r0
20009808:	96808000 	mfs	r20, rpc
2000980c:	b000dfff 	imm	-8193
20009810:	32948154 	addik	r20, r20, -32428
20009814:	f8b30010 	swi	r5, r19, 16
20009818:	f8d30014 	swi	r6, r19, 20
2000981c:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20009820:	e8730010 	lwi	r3, r19, 16
20009824:	e8630010 	lwi	r3, r3, 16
20009828:	e8830000 	lwi	r4, r3, 0
2000982c:	e8730010 	lwi	r3, r19, 16
20009830:	e8a3000c 	lwi	r5, r3, 12
20009834:	e8730014 	lwi	r3, r19, 20
20009838:	64630402 	bslli	r3, r3, 2
2000983c:	10651800 	addk	r3, r5, r3
20009840:	e8630000 	lwi	r3, r3, 0
20009844:	14a32000 	rsubk	r5, r3, r4
20009848:	30600001 	addik	r3, r0, 1
2000984c:	e8930018 	lwi	r4, r19, 24
20009850:	16442803 	cmpu	r18, r4, r5
20009854:	bcb20008 	bgei	r18, 8		// 2000985c
20009858:	10600000 	addk	r3, r0, r0
2000985c:	a46300ff 	andi	r3, r3, 255
}
20009860:	10330000 	addk	r1, r19, r0
20009864:	ea610004 	lwi	r19, r1, 4
20009868:	ea810008 	lwi	r20, r1, 8
2000986c:	3021000c 	addik	r1, r1, 12
20009870:	b60f0008 	rtsd	r15, 8
20009874:	80000000 	or	r0, r0, r0

20009878 <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20009878:	3021fff4 	addik	r1, r1, -12
2000987c:	fa610004 	swi	r19, r1, 4
20009880:	fa810008 	swi	r20, r1, 8
20009884:	12610000 	addk	r19, r1, r0
20009888:	96808000 	mfs	r20, rpc
2000988c:	b000dfff 	imm	-8193
20009890:	329480d4 	addik	r20, r20, -32556
20009894:	f8b30010 	swi	r5, r19, 16
20009898:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000989c:	e8730010 	lwi	r3, r19, 16
200098a0:	e8630010 	lwi	r3, r3, 16
200098a4:	e8830000 	lwi	r4, r3, 0
200098a8:	e8730010 	lwi	r3, r19, 16
200098ac:	e8a3000c 	lwi	r5, r3, 12
200098b0:	e8730014 	lwi	r3, r19, 20
200098b4:	64630402 	bslli	r3, r3, 2
200098b8:	10651800 	addk	r3, r5, r3
200098bc:	e8630000 	lwi	r3, r3, 0
200098c0:	14632000 	rsubk	r3, r3, r4
}
200098c4:	10330000 	addk	r1, r19, r0
200098c8:	ea610004 	lwi	r19, r1, 4
200098cc:	ea810008 	lwi	r20, r1, 8
200098d0:	3021000c 	addik	r1, r1, 12
200098d4:	b60f0008 	rtsd	r15, 8
200098d8:	80000000 	or	r0, r0, r0

200098dc <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200098dc:	3021fff0 	addik	r1, r1, -16
200098e0:	fa610008 	swi	r19, r1, 8
200098e4:	fa81000c 	swi	r20, r1, 12
200098e8:	12610000 	addk	r19, r1, r0
200098ec:	96808000 	mfs	r20, rpc
200098f0:	b000dfff 	imm	-8193
200098f4:	32948070 	addik	r20, r20, -32656
200098f8:	f8b30014 	swi	r5, r19, 20
200098fc:	f8d30018 	swi	r6, r19, 24
20009900:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20009904:	f8130004 	swi	r0, r19, 4
20009908:	b800005c 	bri	92		// 20009964
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000990c:	e8730014 	lwi	r3, r19, 20
20009910:	e8830000 	lwi	r4, r3, 0
20009914:	e8730014 	lwi	r3, r19, 20
20009918:	e8a3000c 	lwi	r5, r3, 12
2000991c:	e8730004 	lwi	r3, r19, 4
20009920:	64630402 	bslli	r3, r3, 2
20009924:	10651800 	addk	r3, r5, r3
20009928:	e8a30000 	lwi	r5, r3, 0
2000992c:	e8730014 	lwi	r3, r19, 20
20009930:	e8630010 	lwi	r3, r3, 16
20009934:	e8630000 	lwi	r3, r3, 0
20009938:	14632800 	rsubk	r3, r3, r5
2000993c:	10641800 	addk	r3, r4, r3
20009940:	30830001 	addik	r4, r3, 1
20009944:	e873001c 	lwi	r3, r19, 28
20009948:	16441803 	cmpu	r18, r4, r3
2000994c:	bc52000c 	blti	r18, 12		// 20009958
            return 0;
20009950:	10600000 	addk	r3, r0, r0
20009954:	b8000024 	bri	36		// 20009978
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20009958:	e8730004 	lwi	r3, r19, 4
2000995c:	30630001 	addik	r3, r3, 1
20009960:	f8730004 	swi	r3, r19, 4
20009964:	e8930004 	lwi	r4, r19, 4
20009968:	e8730018 	lwi	r3, r19, 24
2000996c:	16432003 	cmpu	r18, r3, r4
20009970:	bc52ff9c 	blti	r18, -100		// 2000990c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20009974:	30600001 	addik	r3, r0, 1
}
20009978:	10330000 	addk	r1, r19, r0
2000997c:	ea610008 	lwi	r19, r1, 8
20009980:	ea81000c 	lwi	r20, r1, 12
20009984:	30210010 	addik	r1, r1, 16
20009988:	b60f0008 	rtsd	r15, 8
2000998c:	80000000 	or	r0, r0, r0

20009990 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20009990:	3021ffe8 	addik	r1, r1, -24
20009994:	fa610010 	swi	r19, r1, 16
20009998:	fa810014 	swi	r20, r1, 20
2000999c:	12610000 	addk	r19, r1, r0
200099a0:	96808000 	mfs	r20, rpc
200099a4:	b000dfff 	imm	-8193
200099a8:	32947fbc 	addik	r20, r20, 32700
200099ac:	f8b3001c 	swi	r5, r19, 28
200099b0:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
200099b4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200099b8:	f8130004 	swi	r0, r19, 4
200099bc:	b8000054 	bri	84		// 20009a10
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200099c0:	e873001c 	lwi	r3, r19, 28
200099c4:	e8630010 	lwi	r3, r3, 16
200099c8:	e8830000 	lwi	r4, r3, 0
200099cc:	e873001c 	lwi	r3, r19, 28
200099d0:	e8a3000c 	lwi	r5, r3, 12
200099d4:	e8730004 	lwi	r3, r19, 4
200099d8:	64630402 	bslli	r3, r3, 2
200099dc:	10651800 	addk	r3, r5, r3
200099e0:	e8630000 	lwi	r3, r3, 0
200099e4:	14632000 	rsubk	r3, r3, r4
200099e8:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200099ec:	e8930008 	lwi	r4, r19, 8
200099f0:	e873000c 	lwi	r3, r19, 12
200099f4:	16441803 	cmpu	r18, r4, r3
200099f8:	bcb20008 	bgei	r18, 8		// 20009a00
200099fc:	10640000 	addk	r3, r4, r0
20009a00:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20009a04:	e8730004 	lwi	r3, r19, 4
20009a08:	30630001 	addik	r3, r3, 1
20009a0c:	f8730004 	swi	r3, r19, 4
20009a10:	e8930004 	lwi	r4, r19, 4
20009a14:	e8730020 	lwi	r3, r19, 32
20009a18:	16432003 	cmpu	r18, r3, r4
20009a1c:	bc52ffa4 	blti	r18, -92		// 200099c0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20009a20:	e873001c 	lwi	r3, r19, 28
20009a24:	e8830000 	lwi	r4, r3, 0
20009a28:	e8730008 	lwi	r3, r19, 8
20009a2c:	14632000 	rsubk	r3, r3, r4
}
20009a30:	10330000 	addk	r1, r19, r0
20009a34:	ea610010 	lwi	r19, r1, 16
20009a38:	ea810014 	lwi	r20, r1, 20
20009a3c:	30210018 	addik	r1, r1, 24
20009a40:	b60f0008 	rtsd	r15, 8
20009a44:	80000000 	or	r0, r0, r0

20009a48 <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20009a48:	3021fff0 	addik	r1, r1, -16
20009a4c:	fa610008 	swi	r19, r1, 8
20009a50:	fa81000c 	swi	r20, r1, 12
20009a54:	12610000 	addk	r19, r1, r0
20009a58:	96808000 	mfs	r20, rpc
20009a5c:	b000dfff 	imm	-8193
20009a60:	32947f04 	addik	r20, r20, 32516
20009a64:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20009a68:	e8730014 	lwi	r3, r19, 20
20009a6c:	e8630010 	lwi	r3, r3, 16
20009a70:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20009a74:	f8130004 	swi	r0, r19, 4
20009a78:	b8000028 	bri	40		// 20009aa0
        fifo->read_inds[i] = 0;
20009a7c:	e8730014 	lwi	r3, r19, 20
20009a80:	e883000c 	lwi	r4, r3, 12
20009a84:	e8730004 	lwi	r3, r19, 4
20009a88:	64630402 	bslli	r3, r3, 2
20009a8c:	10641800 	addk	r3, r4, r3
20009a90:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20009a94:	e8730004 	lwi	r3, r19, 4
20009a98:	30630001 	addik	r3, r3, 1
20009a9c:	f8730004 	swi	r3, r19, 4
20009aa0:	e8730014 	lwi	r3, r19, 20
20009aa4:	e8830008 	lwi	r4, r3, 8
20009aa8:	e8730004 	lwi	r3, r19, 4
20009aac:	16441803 	cmpu	r18, r4, r3
20009ab0:	bc52ffcc 	blti	r18, -52		// 20009a7c
        fifo->read_inds[i] = 0;
    }
}
20009ab4:	10330000 	addk	r1, r19, r0
20009ab8:	ea610008 	lwi	r19, r1, 8
20009abc:	ea81000c 	lwi	r20, r1, 12
20009ac0:	30210010 	addik	r1, r1, 16
20009ac4:	b60f0008 	rtsd	r15, 8
20009ac8:	80000000 	or	r0, r0, r0

20009acc <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20009acc:	3021fff0 	addik	r1, r1, -16
20009ad0:	fa610008 	swi	r19, r1, 8
20009ad4:	fa81000c 	swi	r20, r1, 12
20009ad8:	12610000 	addk	r19, r1, r0
20009adc:	96808000 	mfs	r20, rpc
20009ae0:	b000dfff 	imm	-8193
20009ae4:	32947e80 	addik	r20, r20, 32384
20009ae8:	f8b30014 	swi	r5, r19, 20
20009aec:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20009af0:	e8730014 	lwi	r3, r19, 20
20009af4:	e8830004 	lwi	r4, r3, 4
20009af8:	e8730014 	lwi	r3, r19, 20
20009afc:	e8a3000c 	lwi	r5, r3, 12
20009b00:	e8730018 	lwi	r3, r19, 24
20009b04:	64630402 	bslli	r3, r3, 2
20009b08:	10651800 	addk	r3, r5, r3
20009b0c:	e8a30000 	lwi	r5, r3, 0
20009b10:	e8730014 	lwi	r3, r19, 20
20009b14:	e8630000 	lwi	r3, r3, 0
20009b18:	3063ffff 	addik	r3, r3, -1
20009b1c:	84651800 	and	r3, r5, r3
20009b20:	64630402 	bslli	r3, r3, 2
20009b24:	10641800 	addk	r3, r4, r3
20009b28:	e8630000 	lwi	r3, r3, 0
20009b2c:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20009b30:	e8730014 	lwi	r3, r19, 20
20009b34:	e883000c 	lwi	r4, r3, 12
20009b38:	e8730018 	lwi	r3, r19, 24
20009b3c:	64630402 	bslli	r3, r3, 2
20009b40:	10641800 	addk	r3, r4, r3
20009b44:	e8830000 	lwi	r4, r3, 0
20009b48:	30840001 	addik	r4, r4, 1
20009b4c:	f8830000 	swi	r4, r3, 0
    return value;
20009b50:	e8730004 	lwi	r3, r19, 4
}
20009b54:	10330000 	addk	r1, r19, r0
20009b58:	ea610008 	lwi	r19, r1, 8
20009b5c:	ea81000c 	lwi	r20, r1, 12
20009b60:	30210010 	addik	r1, r1, 16
20009b64:	b60f0008 	rtsd	r15, 8
20009b68:	80000000 	or	r0, r0, r0

20009b6c <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20009b6c:	3021fff4 	addik	r1, r1, -12
20009b70:	fa610004 	swi	r19, r1, 4
20009b74:	fa810008 	swi	r20, r1, 8
20009b78:	12610000 	addk	r19, r1, r0
20009b7c:	96808000 	mfs	r20, rpc
20009b80:	b000dfff 	imm	-8193
20009b84:	32947de0 	addik	r20, r20, 32224
20009b88:	f8b30010 	swi	r5, r19, 16
20009b8c:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20009b90:	e8730010 	lwi	r3, r19, 16
20009b94:	e8830004 	lwi	r4, r3, 4
20009b98:	e8730010 	lwi	r3, r19, 16
20009b9c:	e8630010 	lwi	r3, r3, 16
20009ba0:	e8a30000 	lwi	r5, r3, 0
20009ba4:	e8730010 	lwi	r3, r19, 16
20009ba8:	e8630000 	lwi	r3, r3, 0
20009bac:	3063ffff 	addik	r3, r3, -1
20009bb0:	84651800 	and	r3, r5, r3
20009bb4:	64630402 	bslli	r3, r3, 2
20009bb8:	10641800 	addk	r3, r4, r3
20009bbc:	e8930014 	lwi	r4, r19, 20
20009bc0:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20009bc4:	e8730010 	lwi	r3, r19, 16
20009bc8:	e8630010 	lwi	r3, r3, 16
20009bcc:	e8830000 	lwi	r4, r3, 0
20009bd0:	30840001 	addik	r4, r4, 1
20009bd4:	f8830000 	swi	r4, r3, 0
}
20009bd8:	10330000 	addk	r1, r19, r0
20009bdc:	ea610004 	lwi	r19, r1, 4
20009be0:	ea810008 	lwi	r20, r1, 8
20009be4:	3021000c 	addik	r1, r1, 12
20009be8:	b60f0008 	rtsd	r15, 8
20009bec:	80000000 	or	r0, r0, r0

20009bf0 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20009bf0:	3021fff4 	addik	r1, r1, -12
20009bf4:	fa610004 	swi	r19, r1, 4
20009bf8:	fa810008 	swi	r20, r1, 8
20009bfc:	12610000 	addk	r19, r1, r0
20009c00:	96808000 	mfs	r20, rpc
20009c04:	b000dfff 	imm	-8193
20009c08:	32947d5c 	addik	r20, r20, 32092
20009c0c:	f8b30010 	swi	r5, r19, 16
20009c10:	f8d30014 	swi	r6, r19, 20
20009c14:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20009c18:	e8730010 	lwi	r3, r19, 16
20009c1c:	e8630010 	lwi	r3, r3, 16
20009c20:	e8830000 	lwi	r4, r3, 0
20009c24:	e8730010 	lwi	r3, r19, 16
20009c28:	e8a3000c 	lwi	r5, r3, 12
20009c2c:	e8730014 	lwi	r3, r19, 20
20009c30:	64630402 	bslli	r3, r3, 2
20009c34:	10651800 	addk	r3, r5, r3
20009c38:	e8630000 	lwi	r3, r3, 0
20009c3c:	14a32000 	rsubk	r5, r3, r4
20009c40:	30600001 	addik	r3, r0, 1
20009c44:	e8930018 	lwi	r4, r19, 24
20009c48:	16442803 	cmpu	r18, r4, r5
20009c4c:	bcb20008 	bgei	r18, 8		// 20009c54
20009c50:	10600000 	addk	r3, r0, r0
20009c54:	a46300ff 	andi	r3, r3, 255
}
20009c58:	10330000 	addk	r1, r19, r0
20009c5c:	ea610004 	lwi	r19, r1, 4
20009c60:	ea810008 	lwi	r20, r1, 8
20009c64:	3021000c 	addik	r1, r1, 12
20009c68:	b60f0008 	rtsd	r15, 8
20009c6c:	80000000 	or	r0, r0, r0

20009c70 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20009c70:	3021fff4 	addik	r1, r1, -12
20009c74:	fa610004 	swi	r19, r1, 4
20009c78:	fa810008 	swi	r20, r1, 8
20009c7c:	12610000 	addk	r19, r1, r0
20009c80:	96808000 	mfs	r20, rpc
20009c84:	b000dfff 	imm	-8193
20009c88:	32947cdc 	addik	r20, r20, 31964
20009c8c:	f8b30010 	swi	r5, r19, 16
20009c90:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20009c94:	e8730010 	lwi	r3, r19, 16
20009c98:	e8630010 	lwi	r3, r3, 16
20009c9c:	e8830000 	lwi	r4, r3, 0
20009ca0:	e8730010 	lwi	r3, r19, 16
20009ca4:	e8a3000c 	lwi	r5, r3, 12
20009ca8:	e8730014 	lwi	r3, r19, 20
20009cac:	64630402 	bslli	r3, r3, 2
20009cb0:	10651800 	addk	r3, r5, r3
20009cb4:	e8630000 	lwi	r3, r3, 0
20009cb8:	14632000 	rsubk	r3, r3, r4
}
20009cbc:	10330000 	addk	r1, r19, r0
20009cc0:	ea610004 	lwi	r19, r1, 4
20009cc4:	ea810008 	lwi	r20, r1, 8
20009cc8:	3021000c 	addik	r1, r1, 12
20009ccc:	b60f0008 	rtsd	r15, 8
20009cd0:	80000000 	or	r0, r0, r0

20009cd4 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20009cd4:	3021fff0 	addik	r1, r1, -16
20009cd8:	fa610008 	swi	r19, r1, 8
20009cdc:	fa81000c 	swi	r20, r1, 12
20009ce0:	12610000 	addk	r19, r1, r0
20009ce4:	96808000 	mfs	r20, rpc
20009ce8:	b000dfff 	imm	-8193
20009cec:	32947c78 	addik	r20, r20, 31864
20009cf0:	f8b30014 	swi	r5, r19, 20
20009cf4:	f8d30018 	swi	r6, r19, 24
20009cf8:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20009cfc:	f8130004 	swi	r0, r19, 4
20009d00:	b800005c 	bri	92		// 20009d5c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20009d04:	e8730014 	lwi	r3, r19, 20
20009d08:	e8830000 	lwi	r4, r3, 0
20009d0c:	e8730014 	lwi	r3, r19, 20
20009d10:	e8a3000c 	lwi	r5, r3, 12
20009d14:	e8730004 	lwi	r3, r19, 4
20009d18:	64630402 	bslli	r3, r3, 2
20009d1c:	10651800 	addk	r3, r5, r3
20009d20:	e8a30000 	lwi	r5, r3, 0
20009d24:	e8730014 	lwi	r3, r19, 20
20009d28:	e8630010 	lwi	r3, r3, 16
20009d2c:	e8630000 	lwi	r3, r3, 0
20009d30:	14632800 	rsubk	r3, r3, r5
20009d34:	10641800 	addk	r3, r4, r3
20009d38:	30830001 	addik	r4, r3, 1
20009d3c:	e873001c 	lwi	r3, r19, 28
20009d40:	16441803 	cmpu	r18, r4, r3
20009d44:	bc52000c 	blti	r18, 12		// 20009d50
            return 0;
20009d48:	10600000 	addk	r3, r0, r0
20009d4c:	b8000024 	bri	36		// 20009d70
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20009d50:	e8730004 	lwi	r3, r19, 4
20009d54:	30630001 	addik	r3, r3, 1
20009d58:	f8730004 	swi	r3, r19, 4
20009d5c:	e8930004 	lwi	r4, r19, 4
20009d60:	e8730018 	lwi	r3, r19, 24
20009d64:	16432003 	cmpu	r18, r3, r4
20009d68:	bc52ff9c 	blti	r18, -100		// 20009d04
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20009d6c:	30600001 	addik	r3, r0, 1
}
20009d70:	10330000 	addk	r1, r19, r0
20009d74:	ea610008 	lwi	r19, r1, 8
20009d78:	ea81000c 	lwi	r20, r1, 12
20009d7c:	30210010 	addik	r1, r1, 16
20009d80:	b60f0008 	rtsd	r15, 8
20009d84:	80000000 	or	r0, r0, r0

20009d88 <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20009d88:	3021ffe8 	addik	r1, r1, -24
20009d8c:	fa610010 	swi	r19, r1, 16
20009d90:	fa810014 	swi	r20, r1, 20
20009d94:	12610000 	addk	r19, r1, r0
20009d98:	96808000 	mfs	r20, rpc
20009d9c:	b000dfff 	imm	-8193
20009da0:	32947bc4 	addik	r20, r20, 31684
20009da4:	f8b3001c 	swi	r5, r19, 28
20009da8:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20009dac:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20009db0:	f8130004 	swi	r0, r19, 4
20009db4:	b8000054 	bri	84		// 20009e08
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20009db8:	e873001c 	lwi	r3, r19, 28
20009dbc:	e8630010 	lwi	r3, r3, 16
20009dc0:	e8830000 	lwi	r4, r3, 0
20009dc4:	e873001c 	lwi	r3, r19, 28
20009dc8:	e8a3000c 	lwi	r5, r3, 12
20009dcc:	e8730004 	lwi	r3, r19, 4
20009dd0:	64630402 	bslli	r3, r3, 2
20009dd4:	10651800 	addk	r3, r5, r3
20009dd8:	e8630000 	lwi	r3, r3, 0
20009ddc:	14632000 	rsubk	r3, r3, r4
20009de0:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20009de4:	e8930008 	lwi	r4, r19, 8
20009de8:	e873000c 	lwi	r3, r19, 12
20009dec:	16441803 	cmpu	r18, r4, r3
20009df0:	bcb20008 	bgei	r18, 8		// 20009df8
20009df4:	10640000 	addk	r3, r4, r0
20009df8:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20009dfc:	e8730004 	lwi	r3, r19, 4
20009e00:	30630001 	addik	r3, r3, 1
20009e04:	f8730004 	swi	r3, r19, 4
20009e08:	e8930004 	lwi	r4, r19, 4
20009e0c:	e8730020 	lwi	r3, r19, 32
20009e10:	16432003 	cmpu	r18, r3, r4
20009e14:	bc52ffa4 	blti	r18, -92		// 20009db8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20009e18:	e873001c 	lwi	r3, r19, 28
20009e1c:	e8830000 	lwi	r4, r3, 0
20009e20:	e8730008 	lwi	r3, r19, 8
20009e24:	14632000 	rsubk	r3, r3, r4
}
20009e28:	10330000 	addk	r1, r19, r0
20009e2c:	ea610010 	lwi	r19, r1, 16
20009e30:	ea810014 	lwi	r20, r1, 20
20009e34:	30210018 	addik	r1, r1, 24
20009e38:	b60f0008 	rtsd	r15, 8
20009e3c:	80000000 	or	r0, r0, r0

20009e40 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20009e40:	3021fff0 	addik	r1, r1, -16
20009e44:	fa610008 	swi	r19, r1, 8
20009e48:	fa81000c 	swi	r20, r1, 12
20009e4c:	12610000 	addk	r19, r1, r0
20009e50:	96808000 	mfs	r20, rpc
20009e54:	b000dfff 	imm	-8193
20009e58:	32947b0c 	addik	r20, r20, 31500
20009e5c:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20009e60:	e8730014 	lwi	r3, r19, 20
20009e64:	e8630010 	lwi	r3, r3, 16
20009e68:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20009e6c:	f8130004 	swi	r0, r19, 4
20009e70:	b8000028 	bri	40		// 20009e98
        fifo->read_inds[i] = 0;
20009e74:	e8730014 	lwi	r3, r19, 20
20009e78:	e883000c 	lwi	r4, r3, 12
20009e7c:	e8730004 	lwi	r3, r19, 4
20009e80:	64630402 	bslli	r3, r3, 2
20009e84:	10641800 	addk	r3, r4, r3
20009e88:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20009e8c:	e8730004 	lwi	r3, r19, 4
20009e90:	30630001 	addik	r3, r3, 1
20009e94:	f8730004 	swi	r3, r19, 4
20009e98:	e8730014 	lwi	r3, r19, 20
20009e9c:	e8830008 	lwi	r4, r3, 8
20009ea0:	e8730004 	lwi	r3, r19, 4
20009ea4:	16441803 	cmpu	r18, r4, r3
20009ea8:	bc52ffcc 	blti	r18, -52		// 20009e74
        fifo->read_inds[i] = 0;
    }
}
20009eac:	10330000 	addk	r1, r19, r0
20009eb0:	ea610008 	lwi	r19, r1, 8
20009eb4:	ea81000c 	lwi	r20, r1, 12
20009eb8:	30210010 	addik	r1, r1, 16
20009ebc:	b60f0008 	rtsd	r15, 8
20009ec0:	80000000 	or	r0, r0, r0

20009ec4 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20009ec4:	3021ffec 	addik	r1, r1, -20
20009ec8:	fa61000c 	swi	r19, r1, 12
20009ecc:	fa810010 	swi	r20, r1, 16
20009ed0:	12610000 	addk	r19, r1, r0
20009ed4:	96808000 	mfs	r20, rpc
20009ed8:	b000dfff 	imm	-8193
20009edc:	32947a88 	addik	r20, r20, 31368
20009ee0:	f8b30018 	swi	r5, r19, 24
20009ee4:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20009ee8:	e8730018 	lwi	r3, r19, 24
20009eec:	e8830004 	lwi	r4, r3, 4
20009ef0:	e8730018 	lwi	r3, r19, 24
20009ef4:	e8a3000c 	lwi	r5, r3, 12
20009ef8:	e873001c 	lwi	r3, r19, 28
20009efc:	64630402 	bslli	r3, r3, 2
20009f00:	10651800 	addk	r3, r5, r3
20009f04:	e8a30000 	lwi	r5, r3, 0
20009f08:	e8730018 	lwi	r3, r19, 24
20009f0c:	e8630000 	lwi	r3, r3, 0
20009f10:	3063ffff 	addik	r3, r3, -1
20009f14:	84651800 	and	r3, r5, r3
20009f18:	64630403 	bslli	r3, r3, 3
20009f1c:	10641800 	addk	r3, r4, r3
20009f20:	e8830000 	lwi	r4, r3, 0
20009f24:	e8a30004 	lwi	r5, r3, 4
20009f28:	f8930004 	swi	r4, r19, 4
20009f2c:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20009f30:	e8730018 	lwi	r3, r19, 24
20009f34:	e883000c 	lwi	r4, r3, 12
20009f38:	e873001c 	lwi	r3, r19, 28
20009f3c:	64630402 	bslli	r3, r3, 2
20009f40:	10641800 	addk	r3, r4, r3
20009f44:	e8830000 	lwi	r4, r3, 0
20009f48:	30840001 	addik	r4, r4, 1
20009f4c:	f8830000 	swi	r4, r3, 0
    return value;
20009f50:	e8930004 	lwi	r4, r19, 4
20009f54:	e8b30008 	lwi	r5, r19, 8
}
20009f58:	10640000 	addk	r3, r4, r0
20009f5c:	10850000 	addk	r4, r5, r0
20009f60:	10330000 	addk	r1, r19, r0
20009f64:	ea61000c 	lwi	r19, r1, 12
20009f68:	ea810010 	lwi	r20, r1, 16
20009f6c:	30210014 	addik	r1, r1, 20
20009f70:	b60f0008 	rtsd	r15, 8
20009f74:	80000000 	or	r0, r0, r0

20009f78 <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20009f78:	3021fff4 	addik	r1, r1, -12
20009f7c:	fa610004 	swi	r19, r1, 4
20009f80:	fa810008 	swi	r20, r1, 8
20009f84:	12610000 	addk	r19, r1, r0
20009f88:	96808000 	mfs	r20, rpc
20009f8c:	b000dfff 	imm	-8193
20009f90:	329479d4 	addik	r20, r20, 31188
20009f94:	f8b30010 	swi	r5, r19, 16
20009f98:	f8d30014 	swi	r6, r19, 20
20009f9c:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20009fa0:	e8730010 	lwi	r3, r19, 16
20009fa4:	e8830004 	lwi	r4, r3, 4
20009fa8:	e8730010 	lwi	r3, r19, 16
20009fac:	e8630010 	lwi	r3, r3, 16
20009fb0:	e8a30000 	lwi	r5, r3, 0
20009fb4:	e8730010 	lwi	r3, r19, 16
20009fb8:	e8630000 	lwi	r3, r3, 0
20009fbc:	3063ffff 	addik	r3, r3, -1
20009fc0:	84651800 	and	r3, r5, r3
20009fc4:	64630403 	bslli	r3, r3, 3
20009fc8:	10641800 	addk	r3, r4, r3
20009fcc:	e8930014 	lwi	r4, r19, 20
20009fd0:	e8b30018 	lwi	r5, r19, 24
20009fd4:	f8830000 	swi	r4, r3, 0
20009fd8:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20009fdc:	e8730010 	lwi	r3, r19, 16
20009fe0:	e8630010 	lwi	r3, r3, 16
20009fe4:	e8830000 	lwi	r4, r3, 0
20009fe8:	30840001 	addik	r4, r4, 1
20009fec:	f8830000 	swi	r4, r3, 0
}
20009ff0:	10330000 	addk	r1, r19, r0
20009ff4:	ea610004 	lwi	r19, r1, 4
20009ff8:	ea810008 	lwi	r20, r1, 8
20009ffc:	3021000c 	addik	r1, r1, 12
2000a000:	b60f0008 	rtsd	r15, 8
2000a004:	80000000 	or	r0, r0, r0

2000a008 <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000a008:	3021fff4 	addik	r1, r1, -12
2000a00c:	fa610004 	swi	r19, r1, 4
2000a010:	fa810008 	swi	r20, r1, 8
2000a014:	12610000 	addk	r19, r1, r0
2000a018:	96808000 	mfs	r20, rpc
2000a01c:	b000dfff 	imm	-8193
2000a020:	32947944 	addik	r20, r20, 31044
2000a024:	f8b30010 	swi	r5, r19, 16
2000a028:	f8d30014 	swi	r6, r19, 20
2000a02c:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000a030:	e8730010 	lwi	r3, r19, 16
2000a034:	e8630010 	lwi	r3, r3, 16
2000a038:	e8830000 	lwi	r4, r3, 0
2000a03c:	e8730010 	lwi	r3, r19, 16
2000a040:	e8a3000c 	lwi	r5, r3, 12
2000a044:	e8730014 	lwi	r3, r19, 20
2000a048:	64630402 	bslli	r3, r3, 2
2000a04c:	10651800 	addk	r3, r5, r3
2000a050:	e8630000 	lwi	r3, r3, 0
2000a054:	14a32000 	rsubk	r5, r3, r4
2000a058:	30600001 	addik	r3, r0, 1
2000a05c:	e8930018 	lwi	r4, r19, 24
2000a060:	16442803 	cmpu	r18, r4, r5
2000a064:	bcb20008 	bgei	r18, 8		// 2000a06c
2000a068:	10600000 	addk	r3, r0, r0
2000a06c:	a46300ff 	andi	r3, r3, 255
}
2000a070:	10330000 	addk	r1, r19, r0
2000a074:	ea610004 	lwi	r19, r1, 4
2000a078:	ea810008 	lwi	r20, r1, 8
2000a07c:	3021000c 	addik	r1, r1, 12
2000a080:	b60f0008 	rtsd	r15, 8
2000a084:	80000000 	or	r0, r0, r0

2000a088 <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000a088:	3021fff4 	addik	r1, r1, -12
2000a08c:	fa610004 	swi	r19, r1, 4
2000a090:	fa810008 	swi	r20, r1, 8
2000a094:	12610000 	addk	r19, r1, r0
2000a098:	96808000 	mfs	r20, rpc
2000a09c:	b000dfff 	imm	-8193
2000a0a0:	329478c4 	addik	r20, r20, 30916
2000a0a4:	f8b30010 	swi	r5, r19, 16
2000a0a8:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000a0ac:	e8730010 	lwi	r3, r19, 16
2000a0b0:	e8630010 	lwi	r3, r3, 16
2000a0b4:	e8830000 	lwi	r4, r3, 0
2000a0b8:	e8730010 	lwi	r3, r19, 16
2000a0bc:	e8a3000c 	lwi	r5, r3, 12
2000a0c0:	e8730014 	lwi	r3, r19, 20
2000a0c4:	64630402 	bslli	r3, r3, 2
2000a0c8:	10651800 	addk	r3, r5, r3
2000a0cc:	e8630000 	lwi	r3, r3, 0
2000a0d0:	14632000 	rsubk	r3, r3, r4
}
2000a0d4:	10330000 	addk	r1, r19, r0
2000a0d8:	ea610004 	lwi	r19, r1, 4
2000a0dc:	ea810008 	lwi	r20, r1, 8
2000a0e0:	3021000c 	addik	r1, r1, 12
2000a0e4:	b60f0008 	rtsd	r15, 8
2000a0e8:	80000000 	or	r0, r0, r0

2000a0ec <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000a0ec:	3021fff0 	addik	r1, r1, -16
2000a0f0:	fa610008 	swi	r19, r1, 8
2000a0f4:	fa81000c 	swi	r20, r1, 12
2000a0f8:	12610000 	addk	r19, r1, r0
2000a0fc:	96808000 	mfs	r20, rpc
2000a100:	b000dfff 	imm	-8193
2000a104:	32947860 	addik	r20, r20, 30816
2000a108:	f8b30014 	swi	r5, r19, 20
2000a10c:	f8d30018 	swi	r6, r19, 24
2000a110:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000a114:	f8130004 	swi	r0, r19, 4
2000a118:	b800005c 	bri	92		// 2000a174
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000a11c:	e8730014 	lwi	r3, r19, 20
2000a120:	e8830000 	lwi	r4, r3, 0
2000a124:	e8730014 	lwi	r3, r19, 20
2000a128:	e8a3000c 	lwi	r5, r3, 12
2000a12c:	e8730004 	lwi	r3, r19, 4
2000a130:	64630402 	bslli	r3, r3, 2
2000a134:	10651800 	addk	r3, r5, r3
2000a138:	e8a30000 	lwi	r5, r3, 0
2000a13c:	e8730014 	lwi	r3, r19, 20
2000a140:	e8630010 	lwi	r3, r3, 16
2000a144:	e8630000 	lwi	r3, r3, 0
2000a148:	14632800 	rsubk	r3, r3, r5
2000a14c:	10641800 	addk	r3, r4, r3
2000a150:	30830001 	addik	r4, r3, 1
2000a154:	e873001c 	lwi	r3, r19, 28
2000a158:	16441803 	cmpu	r18, r4, r3
2000a15c:	bc52000c 	blti	r18, 12		// 2000a168
            return 0;
2000a160:	10600000 	addk	r3, r0, r0
2000a164:	b8000024 	bri	36		// 2000a188
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000a168:	e8730004 	lwi	r3, r19, 4
2000a16c:	30630001 	addik	r3, r3, 1
2000a170:	f8730004 	swi	r3, r19, 4
2000a174:	e8930004 	lwi	r4, r19, 4
2000a178:	e8730018 	lwi	r3, r19, 24
2000a17c:	16432003 	cmpu	r18, r3, r4
2000a180:	bc52ff9c 	blti	r18, -100		// 2000a11c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000a184:	30600001 	addik	r3, r0, 1
}
2000a188:	10330000 	addk	r1, r19, r0
2000a18c:	ea610008 	lwi	r19, r1, 8
2000a190:	ea81000c 	lwi	r20, r1, 12
2000a194:	30210010 	addik	r1, r1, 16
2000a198:	b60f0008 	rtsd	r15, 8
2000a19c:	80000000 	or	r0, r0, r0

2000a1a0 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000a1a0:	3021ffe8 	addik	r1, r1, -24
2000a1a4:	fa610010 	swi	r19, r1, 16
2000a1a8:	fa810014 	swi	r20, r1, 20
2000a1ac:	12610000 	addk	r19, r1, r0
2000a1b0:	96808000 	mfs	r20, rpc
2000a1b4:	b000dfff 	imm	-8193
2000a1b8:	329477ac 	addik	r20, r20, 30636
2000a1bc:	f8b3001c 	swi	r5, r19, 28
2000a1c0:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000a1c4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000a1c8:	f8130004 	swi	r0, r19, 4
2000a1cc:	b8000054 	bri	84		// 2000a220
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000a1d0:	e873001c 	lwi	r3, r19, 28
2000a1d4:	e8630010 	lwi	r3, r3, 16
2000a1d8:	e8830000 	lwi	r4, r3, 0
2000a1dc:	e873001c 	lwi	r3, r19, 28
2000a1e0:	e8a3000c 	lwi	r5, r3, 12
2000a1e4:	e8730004 	lwi	r3, r19, 4
2000a1e8:	64630402 	bslli	r3, r3, 2
2000a1ec:	10651800 	addk	r3, r5, r3
2000a1f0:	e8630000 	lwi	r3, r3, 0
2000a1f4:	14632000 	rsubk	r3, r3, r4
2000a1f8:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000a1fc:	e8930008 	lwi	r4, r19, 8
2000a200:	e873000c 	lwi	r3, r19, 12
2000a204:	16441803 	cmpu	r18, r4, r3
2000a208:	bcb20008 	bgei	r18, 8		// 2000a210
2000a20c:	10640000 	addk	r3, r4, r0
2000a210:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000a214:	e8730004 	lwi	r3, r19, 4
2000a218:	30630001 	addik	r3, r3, 1
2000a21c:	f8730004 	swi	r3, r19, 4
2000a220:	e8930004 	lwi	r4, r19, 4
2000a224:	e8730020 	lwi	r3, r19, 32
2000a228:	16432003 	cmpu	r18, r3, r4
2000a22c:	bc52ffa4 	blti	r18, -92		// 2000a1d0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000a230:	e873001c 	lwi	r3, r19, 28
2000a234:	e8830000 	lwi	r4, r3, 0
2000a238:	e8730008 	lwi	r3, r19, 8
2000a23c:	14632000 	rsubk	r3, r3, r4
}
2000a240:	10330000 	addk	r1, r19, r0
2000a244:	ea610010 	lwi	r19, r1, 16
2000a248:	ea810014 	lwi	r20, r1, 20
2000a24c:	30210018 	addik	r1, r1, 24
2000a250:	b60f0008 	rtsd	r15, 8
2000a254:	80000000 	or	r0, r0, r0

2000a258 <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000a258:	3021fff0 	addik	r1, r1, -16
2000a25c:	fa610008 	swi	r19, r1, 8
2000a260:	fa81000c 	swi	r20, r1, 12
2000a264:	12610000 	addk	r19, r1, r0
2000a268:	96808000 	mfs	r20, rpc
2000a26c:	b000dfff 	imm	-8193
2000a270:	329476f4 	addik	r20, r20, 30452
2000a274:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2000a278:	e8730014 	lwi	r3, r19, 20
2000a27c:	e8630010 	lwi	r3, r3, 16
2000a280:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000a284:	f8130004 	swi	r0, r19, 4
2000a288:	b8000028 	bri	40		// 2000a2b0
        fifo->read_inds[i] = 0;
2000a28c:	e8730014 	lwi	r3, r19, 20
2000a290:	e883000c 	lwi	r4, r3, 12
2000a294:	e8730004 	lwi	r3, r19, 4
2000a298:	64630402 	bslli	r3, r3, 2
2000a29c:	10641800 	addk	r3, r4, r3
2000a2a0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000a2a4:	e8730004 	lwi	r3, r19, 4
2000a2a8:	30630001 	addik	r3, r3, 1
2000a2ac:	f8730004 	swi	r3, r19, 4
2000a2b0:	e8730014 	lwi	r3, r19, 20
2000a2b4:	e8830008 	lwi	r4, r3, 8
2000a2b8:	e8730004 	lwi	r3, r19, 4
2000a2bc:	16441803 	cmpu	r18, r4, r3
2000a2c0:	bc52ffcc 	blti	r18, -52		// 2000a28c
        fifo->read_inds[i] = 0;
    }
}
2000a2c4:	10330000 	addk	r1, r19, r0
2000a2c8:	ea610008 	lwi	r19, r1, 8
2000a2cc:	ea81000c 	lwi	r20, r1, 12
2000a2d0:	30210010 	addik	r1, r1, 16
2000a2d4:	b60f0008 	rtsd	r15, 8
2000a2d8:	80000000 	or	r0, r0, r0

2000a2dc <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000a2dc:	3021fff0 	addik	r1, r1, -16
2000a2e0:	fa610008 	swi	r19, r1, 8
2000a2e4:	fa81000c 	swi	r20, r1, 12
2000a2e8:	12610000 	addk	r19, r1, r0
2000a2ec:	96808000 	mfs	r20, rpc
2000a2f0:	b000dfff 	imm	-8193
2000a2f4:	32947670 	addik	r20, r20, 30320
2000a2f8:	f8b30014 	swi	r5, r19, 20
2000a2fc:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000a300:	e8730014 	lwi	r3, r19, 20
2000a304:	e8830004 	lwi	r4, r3, 4
2000a308:	e8730014 	lwi	r3, r19, 20
2000a30c:	e8a3000c 	lwi	r5, r3, 12
2000a310:	e8730018 	lwi	r3, r19, 24
2000a314:	64630402 	bslli	r3, r3, 2
2000a318:	10651800 	addk	r3, r5, r3
2000a31c:	e8a30000 	lwi	r5, r3, 0
2000a320:	e8730014 	lwi	r3, r19, 20
2000a324:	e8630000 	lwi	r3, r3, 0
2000a328:	3063ffff 	addik	r3, r3, -1
2000a32c:	84651800 	and	r3, r5, r3
2000a330:	64630402 	bslli	r3, r3, 2
2000a334:	10641800 	addk	r3, r4, r3
2000a338:	e8630000 	lwi	r3, r3, 0
2000a33c:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000a340:	e8730014 	lwi	r3, r19, 20
2000a344:	e883000c 	lwi	r4, r3, 12
2000a348:	e8730018 	lwi	r3, r19, 24
2000a34c:	64630402 	bslli	r3, r3, 2
2000a350:	10641800 	addk	r3, r4, r3
2000a354:	e8830000 	lwi	r4, r3, 0
2000a358:	30840001 	addik	r4, r4, 1
2000a35c:	f8830000 	swi	r4, r3, 0
    return value;
2000a360:	e8730004 	lwi	r3, r19, 4
}
2000a364:	10330000 	addk	r1, r19, r0
2000a368:	ea610008 	lwi	r19, r1, 8
2000a36c:	ea81000c 	lwi	r20, r1, 12
2000a370:	30210010 	addik	r1, r1, 16
2000a374:	b60f0008 	rtsd	r15, 8
2000a378:	80000000 	or	r0, r0, r0

2000a37c <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000a37c:	3021fff4 	addik	r1, r1, -12
2000a380:	fa610004 	swi	r19, r1, 4
2000a384:	fa810008 	swi	r20, r1, 8
2000a388:	12610000 	addk	r19, r1, r0
2000a38c:	96808000 	mfs	r20, rpc
2000a390:	b000dfff 	imm	-8193
2000a394:	329475d0 	addik	r20, r20, 30160
2000a398:	f8b30010 	swi	r5, r19, 16
2000a39c:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000a3a0:	e8730010 	lwi	r3, r19, 16
2000a3a4:	e8830004 	lwi	r4, r3, 4
2000a3a8:	e8730010 	lwi	r3, r19, 16
2000a3ac:	e8630010 	lwi	r3, r3, 16
2000a3b0:	e8a30000 	lwi	r5, r3, 0
2000a3b4:	e8730010 	lwi	r3, r19, 16
2000a3b8:	e8630000 	lwi	r3, r3, 0
2000a3bc:	3063ffff 	addik	r3, r3, -1
2000a3c0:	84651800 	and	r3, r5, r3
2000a3c4:	64630402 	bslli	r3, r3, 2
2000a3c8:	10641800 	addk	r3, r4, r3
2000a3cc:	e8930014 	lwi	r4, r19, 20
2000a3d0:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2000a3d4:	e8730010 	lwi	r3, r19, 16
2000a3d8:	e8630010 	lwi	r3, r3, 16
2000a3dc:	e8830000 	lwi	r4, r3, 0
2000a3e0:	30840001 	addik	r4, r4, 1
2000a3e4:	f8830000 	swi	r4, r3, 0
}
2000a3e8:	10330000 	addk	r1, r19, r0
2000a3ec:	ea610004 	lwi	r19, r1, 4
2000a3f0:	ea810008 	lwi	r20, r1, 8
2000a3f4:	3021000c 	addik	r1, r1, 12
2000a3f8:	b60f0008 	rtsd	r15, 8
2000a3fc:	80000000 	or	r0, r0, r0

2000a400 <read_YUV_i>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_YUV_i() {
2000a400:	3021ffdc 	addik	r1, r1, -36
2000a404:	f9e10000 	swi	r15, r1, 0
2000a408:	fa61001c 	swi	r19, r1, 28
2000a40c:	fa810020 	swi	r20, r1, 32
2000a410:	12610000 	addk	r19, r1, r0
2000a414:	96808000 	mfs	r20, rpc
2000a418:	b000dfff 	imm	-8193
2000a41c:	32947548 	addik	r20, r20, 30024
		index_YUV_i = decoder_merger_YUV_i->read_inds[1];
2000a420:	b0000000 	imm	0
2000a424:	e8740018 	lwi	r3, r20, 24
2000a428:	e8630000 	lwi	r3, r3, 0
2000a42c:	e863000c 	lwi	r3, r3, 12
2000a430:	e8830004 	lwi	r4, r3, 4
2000a434:	b0000000 	imm	0
2000a438:	e874001c 	lwi	r3, r20, 28
2000a43c:	f8830000 	swi	r4, r3, 0
		numTokens_YUV_i = index_YUV_i + fifo_i16_get_num_tokens(decoder_merger_YUV_i, 1);
2000a440:	b0000000 	imm	0
2000a444:	e8740018 	lwi	r3, r20, 24
2000a448:	e8630000 	lwi	r3, r3, 0
2000a44c:	10a30000 	addk	r5, r3, r0
2000a450:	30c00001 	addik	r6, r0, 1
2000a454:	b0000000 	imm	0
2000a458:	e894000c 	lwi	r4, r20, 12
2000a45c:	99fc2000 	brald	r15, r4
2000a460:	80000000 	or	r0, r0, r0
2000a464:	10830000 	addk	r4, r3, r0
2000a468:	b0000000 	imm	0
2000a46c:	e874001c 	lwi	r3, r20, 28
2000a470:	e8630000 	lwi	r3, r3, 0
2000a474:	10841800 	addk	r4, r4, r3
2000a478:	b0000000 	imm	0
2000a47c:	e8740020 	lwi	r3, r20, 32
2000a480:	f8830000 	swi	r4, r3, 0
	}
2000a484:	e9e10000 	lwi	r15, r1, 0
2000a488:	10330000 	addk	r1, r19, r0
2000a48c:	ea61001c 	lwi	r19, r1, 28
2000a490:	ea810020 	lwi	r20, r1, 32
2000a494:	30210024 	addik	r1, r1, 36
2000a498:	b60f0008 	rtsd	r15, 8
2000a49c:	80000000 	or	r0, r0, r0

2000a4a0 <read_end_YUV_i>:
	
	static void read_end_YUV_i() {
2000a4a0:	3021fff4 	addik	r1, r1, -12
2000a4a4:	fa610004 	swi	r19, r1, 4
2000a4a8:	fa810008 	swi	r20, r1, 8
2000a4ac:	12610000 	addk	r19, r1, r0
2000a4b0:	96808000 	mfs	r20, rpc
2000a4b4:	b000dfff 	imm	-8193
2000a4b8:	329474ac 	addik	r20, r20, 29868
		decoder_merger_YUV_i->read_inds[1] = index_YUV_i;
2000a4bc:	b0000000 	imm	0
2000a4c0:	e8740018 	lwi	r3, r20, 24
2000a4c4:	e8630000 	lwi	r3, r3, 0
2000a4c8:	e863000c 	lwi	r3, r3, 12
2000a4cc:	30630004 	addik	r3, r3, 4
2000a4d0:	b0000000 	imm	0
2000a4d4:	e894001c 	lwi	r4, r20, 28
2000a4d8:	e8840000 	lwi	r4, r4, 0
2000a4dc:	f8830000 	swi	r4, r3, 0
	}
2000a4e0:	10330000 	addk	r1, r19, r0
2000a4e4:	ea610004 	lwi	r19, r1, 4
2000a4e8:	ea810008 	lwi	r20, r1, 8
2000a4ec:	3021000c 	addik	r1, r1, 12
2000a4f0:	b60f0008 	rtsd	r15, 8
2000a4f4:	80000000 	or	r0, r0, r0

2000a4f8 <write_YUV>:

	static void write_YUV() {
2000a4f8:	3021ffdc 	addik	r1, r1, -36
2000a4fc:	f9e10000 	swi	r15, r1, 0
2000a500:	fa61001c 	swi	r19, r1, 28
2000a504:	fa810020 	swi	r20, r1, 32
2000a508:	12610000 	addk	r19, r1, r0
2000a50c:	96808000 	mfs	r20, rpc
2000a510:	b000dfff 	imm	-8193
2000a514:	32947450 	addik	r20, r20, 29776
		index_YUV = (*decoder_merger_YUV->write_ind);
2000a518:	b0000000 	imm	0
2000a51c:	e8740014 	lwi	r3, r20, 20
2000a520:	e8630000 	lwi	r3, r3, 0
2000a524:	e8630010 	lwi	r3, r3, 16
2000a528:	e8830000 	lwi	r4, r3, 0
2000a52c:	b0000000 	imm	0
2000a530:	e8740024 	lwi	r3, r20, 36
2000a534:	f8830000 	swi	r4, r3, 0
		numFree_YUV = index_YUV + fifo_u8_get_room(decoder_merger_YUV, NUM_READERS_YUV);
2000a538:	b0000000 	imm	0
2000a53c:	e8740014 	lwi	r3, r20, 20
2000a540:	e8630000 	lwi	r3, r3, 0
2000a544:	10a30000 	addk	r5, r3, r0
2000a548:	30c00001 	addik	r6, r0, 1
2000a54c:	b0000000 	imm	0
2000a550:	e8940010 	lwi	r4, r20, 16
2000a554:	99fc2000 	brald	r15, r4
2000a558:	80000000 	or	r0, r0, r0
2000a55c:	10830000 	addk	r4, r3, r0
2000a560:	b0000000 	imm	0
2000a564:	e8740024 	lwi	r3, r20, 36
2000a568:	e8630000 	lwi	r3, r3, 0
2000a56c:	10841800 	addk	r4, r4, r3
2000a570:	b0000000 	imm	0
2000a574:	e8740028 	lwi	r3, r20, 40
2000a578:	f8830000 	swi	r4, r3, 0
	}
2000a57c:	e9e10000 	lwi	r15, r1, 0
2000a580:	10330000 	addk	r1, r19, r0
2000a584:	ea61001c 	lwi	r19, r1, 28
2000a588:	ea810020 	lwi	r20, r1, 32
2000a58c:	30210024 	addik	r1, r1, 36
2000a590:	b60f0008 	rtsd	r15, 8
2000a594:	80000000 	or	r0, r0, r0

2000a598 <write_end_YUV>:
	
	static void write_end_YUV() {
2000a598:	3021fff4 	addik	r1, r1, -12
2000a59c:	fa610004 	swi	r19, r1, 4
2000a5a0:	fa810008 	swi	r20, r1, 8
2000a5a4:	12610000 	addk	r19, r1, r0
2000a5a8:	96808000 	mfs	r20, rpc
2000a5ac:	b000dfff 	imm	-8193
2000a5b0:	329473b4 	addik	r20, r20, 29620
		(*decoder_merger_YUV->write_ind) = index_YUV;
2000a5b4:	b0000000 	imm	0
2000a5b8:	e8740014 	lwi	r3, r20, 20
2000a5bc:	e8630000 	lwi	r3, r3, 0
2000a5c0:	e8630010 	lwi	r3, r3, 16
2000a5c4:	b0000000 	imm	0
2000a5c8:	e8940024 	lwi	r4, r20, 36
2000a5cc:	e8840000 	lwi	r4, r4, 0
2000a5d0:	f8830000 	swi	r4, r3, 0
	}
2000a5d4:	10330000 	addk	r1, r19, r0
2000a5d8:	ea610004 	lwi	r19, r1, 4
2000a5dc:	ea810008 	lwi	r20, r1, 8
2000a5e0:	3021000c 	addik	r1, r1, 12
2000a5e4:	b60f0008 	rtsd	r15, 8
2000a5e8:	80000000 	or	r0, r0, r0

2000a5ec <isSchedulable_Y>:
	// Functions/procedures


	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_Y() {
2000a5ec:	3021fff0 	addik	r1, r1, -16
2000a5f0:	fa610008 	swi	r19, r1, 8
2000a5f4:	fa81000c 	swi	r20, r1, 12
2000a5f8:	12610000 	addk	r19, r1, r0
2000a5fc:	96808000 	mfs	r20, rpc
2000a600:	b000dfff 	imm	-8193
2000a604:	32947360 	addik	r20, r20, 29536
		i32 result;
	
		result = 1;
2000a608:	30600001 	addik	r3, r0, 1
2000a60c:	f8730004 	swi	r3, r19, 4
		return result;
2000a610:	e8730004 	lwi	r3, r19, 4
	}
2000a614:	10330000 	addk	r1, r19, r0
2000a618:	ea610008 	lwi	r19, r1, 8
2000a61c:	ea81000c 	lwi	r20, r1, 12
2000a620:	30210010 	addik	r1, r1, 16
2000a624:	b60f0008 	rtsd	r15, 8
2000a628:	80000000 	or	r0, r0, r0

2000a62c <Y>:
	
	static void Y() {
2000a62c:	3021ffc4 	addik	r1, r1, -60
2000a630:	f9e10000 	swi	r15, r1, 0
2000a634:	fa610034 	swi	r19, r1, 52
2000a638:	fa810038 	swi	r20, r1, 56
2000a63c:	12610000 	addk	r19, r1, r0
2000a640:	96808000 	mfs	r20, rpc
2000a644:	b000dfff 	imm	-8193
2000a648:	3294731c 	addik	r20, r20, 29468
	
		// Compute aligned port indexes
		i32 index_aligned_YUV_i = index_YUV_i % SIZE_YUV_i;
2000a64c:	b0000000 	imm	0
2000a650:	e874001c 	lwi	r3, r20, 28
2000a654:	e8630000 	lwi	r3, r3, 0
2000a658:	a46301ff 	andi	r3, r3, 511
2000a65c:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_YUV = index_YUV % SIZE_YUV;
2000a660:	b0000000 	imm	0
2000a664:	e8740024 	lwi	r3, r20, 36
2000a668:	e8630000 	lwi	r3, r3, 0
2000a66c:	a46301ff 	andi	r3, r3, 511
2000a670:	f8730028 	swi	r3, r19, 40
		i16 tmp_YUV_i;
		i16 tmp_YUV_i0;
		i16 tmp_YUV_i1;
		i16 tmp_YUV_i2;
	
		j = 0;
2000a674:	f813001c 	swi	r0, r19, 28
		while (j <= 7) {
2000a678:	b80000c4 	bri	196		// 2000a73c
			i = 0;
2000a67c:	f8130020 	swi	r0, r19, 32
			while (i <= 7) {
2000a680:	b80000a0 	bri	160		// 2000a720
				tmp_YUV_i = tokens_YUV_i[(index_YUV_i + (i + j * 8)) % SIZE_YUV_i];
2000a684:	b0000000 	imm	0
2000a688:	e8740018 	lwi	r3, r20, 24
2000a68c:	e8630000 	lwi	r3, r3, 0
2000a690:	e8830004 	lwi	r4, r3, 4
2000a694:	e873001c 	lwi	r3, r19, 28
2000a698:	64a30403 	bslli	r5, r3, 3
2000a69c:	e8730020 	lwi	r3, r19, 32
2000a6a0:	10651800 	addk	r3, r5, r3
2000a6a4:	10a30000 	addk	r5, r3, r0
2000a6a8:	b0000000 	imm	0
2000a6ac:	e874001c 	lwi	r3, r20, 28
2000a6b0:	e8630000 	lwi	r3, r3, 0
2000a6b4:	10651800 	addk	r3, r5, r3
2000a6b8:	a46301ff 	andi	r3, r3, 511
2000a6bc:	10631800 	addk	r3, r3, r3
2000a6c0:	10641800 	addk	r3, r4, r3
2000a6c4:	e4630000 	lhui	r3, r3, 0
2000a6c8:	f473002c 	shi	r3, r19, 44
				tokens_YUV[(index_YUV + (i + j * 16)) % SIZE_YUV] = tmp_YUV_i;
2000a6cc:	b0000000 	imm	0
2000a6d0:	e8740014 	lwi	r3, r20, 20
2000a6d4:	e8630000 	lwi	r3, r3, 0
2000a6d8:	e8830004 	lwi	r4, r3, 4
2000a6dc:	e873001c 	lwi	r3, r19, 28
2000a6e0:	64a30404 	bslli	r5, r3, 4
2000a6e4:	e8730020 	lwi	r3, r19, 32
2000a6e8:	10651800 	addk	r3, r5, r3
2000a6ec:	10a30000 	addk	r5, r3, r0
2000a6f0:	b0000000 	imm	0
2000a6f4:	e8740024 	lwi	r3, r20, 36
2000a6f8:	e8630000 	lwi	r3, r3, 0
2000a6fc:	10651800 	addk	r3, r5, r3
2000a700:	a46301ff 	andi	r3, r3, 511
2000a704:	10641800 	addk	r3, r4, r3
2000a708:	e493002c 	lhui	r4, r19, 44
2000a70c:	a48400ff 	andi	r4, r4, 255
2000a710:	f0830000 	sbi	r4, r3, 0
				i = i + 1;
2000a714:	e8730020 	lwi	r3, r19, 32
2000a718:	30630001 	addik	r3, r3, 1
2000a71c:	f8730020 	swi	r3, r19, 32
		i16 tmp_YUV_i2;
	
		j = 0;
		while (j <= 7) {
			i = 0;
			while (i <= 7) {
2000a720:	e8930020 	lwi	r4, r19, 32
2000a724:	30600007 	addik	r3, r0, 7
2000a728:	16441801 	cmp	r18, r4, r3
2000a72c:	bcb2ff58 	bgei	r18, -168		// 2000a684
				tmp_YUV_i = tokens_YUV_i[(index_YUV_i + (i + j * 8)) % SIZE_YUV_i];
				tokens_YUV[(index_YUV + (i + j * 16)) % SIZE_YUV] = tmp_YUV_i;
				i = i + 1;
			}
			j = j + 1;
2000a730:	e873001c 	lwi	r3, r19, 28
2000a734:	30630001 	addik	r3, r3, 1
2000a738:	f873001c 	swi	r3, r19, 28
		i16 tmp_YUV_i0;
		i16 tmp_YUV_i1;
		i16 tmp_YUV_i2;
	
		j = 0;
		while (j <= 7) {
2000a73c:	e893001c 	lwi	r4, r19, 28
2000a740:	30600007 	addik	r3, r0, 7
2000a744:	16441801 	cmp	r18, r4, r3
2000a748:	bcb2ff34 	bgei	r18, -204		// 2000a67c
				tokens_YUV[(index_YUV + (i + j * 16)) % SIZE_YUV] = tmp_YUV_i;
				i = i + 1;
			}
			j = j + 1;
		}
		j = 0;
2000a74c:	f813001c 	swi	r0, r19, 28
		while (j <= 7) {
2000a750:	b80000cc 	bri	204		// 2000a81c
			i = 0;
2000a754:	f8130020 	swi	r0, r19, 32
			while (i <= 7) {
2000a758:	b80000a8 	bri	168		// 2000a800
				tmp_YUV_i0 = tokens_YUV_i[(index_YUV_i + (i + 64 + j * 8)) % SIZE_YUV_i];
2000a75c:	b0000000 	imm	0
2000a760:	e8740018 	lwi	r3, r20, 24
2000a764:	e8630000 	lwi	r3, r3, 0
2000a768:	e8830004 	lwi	r4, r3, 4
2000a76c:	e8730020 	lwi	r3, r19, 32
2000a770:	30a30040 	addik	r5, r3, 64
2000a774:	e873001c 	lwi	r3, r19, 28
2000a778:	64630403 	bslli	r3, r3, 3
2000a77c:	10651800 	addk	r3, r5, r3
2000a780:	10a30000 	addk	r5, r3, r0
2000a784:	b0000000 	imm	0
2000a788:	e874001c 	lwi	r3, r20, 28
2000a78c:	e8630000 	lwi	r3, r3, 0
2000a790:	10651800 	addk	r3, r5, r3
2000a794:	a46301ff 	andi	r3, r3, 511
2000a798:	10631800 	addk	r3, r3, r3
2000a79c:	10641800 	addk	r3, r4, r3
2000a7a0:	e4630000 	lhui	r3, r3, 0
2000a7a4:	f473002e 	shi	r3, r19, 46
				tokens_YUV[(index_YUV + (i + 8 + j * 16)) % SIZE_YUV] = tmp_YUV_i0;
2000a7a8:	b0000000 	imm	0
2000a7ac:	e8740014 	lwi	r3, r20, 20
2000a7b0:	e8630000 	lwi	r3, r3, 0
2000a7b4:	e8830004 	lwi	r4, r3, 4
2000a7b8:	e8730020 	lwi	r3, r19, 32
2000a7bc:	30a30008 	addik	r5, r3, 8
2000a7c0:	e873001c 	lwi	r3, r19, 28
2000a7c4:	64630404 	bslli	r3, r3, 4
2000a7c8:	10651800 	addk	r3, r5, r3
2000a7cc:	10a30000 	addk	r5, r3, r0
2000a7d0:	b0000000 	imm	0
2000a7d4:	e8740024 	lwi	r3, r20, 36
2000a7d8:	e8630000 	lwi	r3, r3, 0
2000a7dc:	10651800 	addk	r3, r5, r3
2000a7e0:	a46301ff 	andi	r3, r3, 511
2000a7e4:	10641800 	addk	r3, r4, r3
2000a7e8:	e493002e 	lhui	r4, r19, 46
2000a7ec:	a48400ff 	andi	r4, r4, 255
2000a7f0:	f0830000 	sbi	r4, r3, 0
				i = i + 1;
2000a7f4:	e8730020 	lwi	r3, r19, 32
2000a7f8:	30630001 	addik	r3, r3, 1
2000a7fc:	f8730020 	swi	r3, r19, 32
			j = j + 1;
		}
		j = 0;
		while (j <= 7) {
			i = 0;
			while (i <= 7) {
2000a800:	e8930020 	lwi	r4, r19, 32
2000a804:	30600007 	addik	r3, r0, 7
2000a808:	16441801 	cmp	r18, r4, r3
2000a80c:	bcb2ff50 	bgei	r18, -176		// 2000a75c
				tmp_YUV_i0 = tokens_YUV_i[(index_YUV_i + (i + 64 + j * 8)) % SIZE_YUV_i];
				tokens_YUV[(index_YUV + (i + 8 + j * 16)) % SIZE_YUV] = tmp_YUV_i0;
				i = i + 1;
			}
			j = j + 1;
2000a810:	e873001c 	lwi	r3, r19, 28
2000a814:	30630001 	addik	r3, r3, 1
2000a818:	f873001c 	swi	r3, r19, 28
				i = i + 1;
			}
			j = j + 1;
		}
		j = 0;
		while (j <= 7) {
2000a81c:	e893001c 	lwi	r4, r19, 28
2000a820:	30600007 	addik	r3, r0, 7
2000a824:	16441801 	cmp	r18, r4, r3
2000a828:	bcb2ff2c 	bgei	r18, -212		// 2000a754
				tokens_YUV[(index_YUV + (i + 8 + j * 16)) % SIZE_YUV] = tmp_YUV_i0;
				i = i + 1;
			}
			j = j + 1;
		}
		j = 0;
2000a82c:	f813001c 	swi	r0, r19, 28
		while (j <= 7) {
2000a830:	b80000cc 	bri	204		// 2000a8fc
			i = 0;
2000a834:	f8130020 	swi	r0, r19, 32
			while (i <= 7) {
2000a838:	b80000a8 	bri	168		// 2000a8e0
				tmp_YUV_i1 = tokens_YUV_i[(index_YUV_i + (i + 2 * 64 + j * 8)) % SIZE_YUV_i];
2000a83c:	b0000000 	imm	0
2000a840:	e8740018 	lwi	r3, r20, 24
2000a844:	e8630000 	lwi	r3, r3, 0
2000a848:	e8830004 	lwi	r4, r3, 4
2000a84c:	e8730020 	lwi	r3, r19, 32
2000a850:	30a30080 	addik	r5, r3, 128
2000a854:	e873001c 	lwi	r3, r19, 28
2000a858:	64630403 	bslli	r3, r3, 3
2000a85c:	10651800 	addk	r3, r5, r3
2000a860:	10a30000 	addk	r5, r3, r0
2000a864:	b0000000 	imm	0
2000a868:	e874001c 	lwi	r3, r20, 28
2000a86c:	e8630000 	lwi	r3, r3, 0
2000a870:	10651800 	addk	r3, r5, r3
2000a874:	a46301ff 	andi	r3, r3, 511
2000a878:	10631800 	addk	r3, r3, r3
2000a87c:	10641800 	addk	r3, r4, r3
2000a880:	e4630000 	lhui	r3, r3, 0
2000a884:	f4730030 	shi	r3, r19, 48
				tokens_YUV[(index_YUV + (i + (j + 8) * 16)) % SIZE_YUV] = tmp_YUV_i1;
2000a888:	b0000000 	imm	0
2000a88c:	e8740014 	lwi	r3, r20, 20
2000a890:	e8630000 	lwi	r3, r3, 0
2000a894:	e8830004 	lwi	r4, r3, 4
2000a898:	e873001c 	lwi	r3, r19, 28
2000a89c:	30630008 	addik	r3, r3, 8
2000a8a0:	64a30404 	bslli	r5, r3, 4
2000a8a4:	e8730020 	lwi	r3, r19, 32
2000a8a8:	10651800 	addk	r3, r5, r3
2000a8ac:	10a30000 	addk	r5, r3, r0
2000a8b0:	b0000000 	imm	0
2000a8b4:	e8740024 	lwi	r3, r20, 36
2000a8b8:	e8630000 	lwi	r3, r3, 0
2000a8bc:	10651800 	addk	r3, r5, r3
2000a8c0:	a46301ff 	andi	r3, r3, 511
2000a8c4:	10641800 	addk	r3, r4, r3
2000a8c8:	e4930030 	lhui	r4, r19, 48
2000a8cc:	a48400ff 	andi	r4, r4, 255
2000a8d0:	f0830000 	sbi	r4, r3, 0
				i = i + 1;
2000a8d4:	e8730020 	lwi	r3, r19, 32
2000a8d8:	30630001 	addik	r3, r3, 1
2000a8dc:	f8730020 	swi	r3, r19, 32
			j = j + 1;
		}
		j = 0;
		while (j <= 7) {
			i = 0;
			while (i <= 7) {
2000a8e0:	e8930020 	lwi	r4, r19, 32
2000a8e4:	30600007 	addik	r3, r0, 7
2000a8e8:	16441801 	cmp	r18, r4, r3
2000a8ec:	bcb2ff50 	bgei	r18, -176		// 2000a83c
				tmp_YUV_i1 = tokens_YUV_i[(index_YUV_i + (i + 2 * 64 + j * 8)) % SIZE_YUV_i];
				tokens_YUV[(index_YUV + (i + (j + 8) * 16)) % SIZE_YUV] = tmp_YUV_i1;
				i = i + 1;
			}
			j = j + 1;
2000a8f0:	e873001c 	lwi	r3, r19, 28
2000a8f4:	30630001 	addik	r3, r3, 1
2000a8f8:	f873001c 	swi	r3, r19, 28
				i = i + 1;
			}
			j = j + 1;
		}
		j = 0;
		while (j <= 7) {
2000a8fc:	e893001c 	lwi	r4, r19, 28
2000a900:	30600007 	addik	r3, r0, 7
2000a904:	16441801 	cmp	r18, r4, r3
2000a908:	bcb2ff2c 	bgei	r18, -212		// 2000a834
				tokens_YUV[(index_YUV + (i + (j + 8) * 16)) % SIZE_YUV] = tmp_YUV_i1;
				i = i + 1;
			}
			j = j + 1;
		}
		j = 0;
2000a90c:	f813001c 	swi	r0, r19, 28
		while (j <= 7) {
2000a910:	b80000d0 	bri	208		// 2000a9e0
			i = 0;
2000a914:	f8130020 	swi	r0, r19, 32
			while (i <= 7) {
2000a918:	b80000ac 	bri	172		// 2000a9c4
				tmp_YUV_i2 = tokens_YUV_i[(index_YUV_i + (i + 3 * 64 + j * 8)) % SIZE_YUV_i];
2000a91c:	b0000000 	imm	0
2000a920:	e8740018 	lwi	r3, r20, 24
2000a924:	e8630000 	lwi	r3, r3, 0
2000a928:	e8830004 	lwi	r4, r3, 4
2000a92c:	e8730020 	lwi	r3, r19, 32
2000a930:	30a300c0 	addik	r5, r3, 192
2000a934:	e873001c 	lwi	r3, r19, 28
2000a938:	64630403 	bslli	r3, r3, 3
2000a93c:	10651800 	addk	r3, r5, r3
2000a940:	10a30000 	addk	r5, r3, r0
2000a944:	b0000000 	imm	0
2000a948:	e874001c 	lwi	r3, r20, 28
2000a94c:	e8630000 	lwi	r3, r3, 0
2000a950:	10651800 	addk	r3, r5, r3
2000a954:	a46301ff 	andi	r3, r3, 511
2000a958:	10631800 	addk	r3, r3, r3
2000a95c:	10641800 	addk	r3, r4, r3
2000a960:	e4630000 	lhui	r3, r3, 0
2000a964:	f4730032 	shi	r3, r19, 50
				tokens_YUV[(index_YUV + (i + 8 + (j + 8) * 16)) % SIZE_YUV] = tmp_YUV_i2;
2000a968:	b0000000 	imm	0
2000a96c:	e8740014 	lwi	r3, r20, 20
2000a970:	e8630000 	lwi	r3, r3, 0
2000a974:	e8830004 	lwi	r4, r3, 4
2000a978:	e8730020 	lwi	r3, r19, 32
2000a97c:	30a30008 	addik	r5, r3, 8
2000a980:	e873001c 	lwi	r3, r19, 28
2000a984:	30630008 	addik	r3, r3, 8
2000a988:	64630404 	bslli	r3, r3, 4
2000a98c:	10651800 	addk	r3, r5, r3
2000a990:	10a30000 	addk	r5, r3, r0
2000a994:	b0000000 	imm	0
2000a998:	e8740024 	lwi	r3, r20, 36
2000a99c:	e8630000 	lwi	r3, r3, 0
2000a9a0:	10651800 	addk	r3, r5, r3
2000a9a4:	a46301ff 	andi	r3, r3, 511
2000a9a8:	10641800 	addk	r3, r4, r3
2000a9ac:	e4930032 	lhui	r4, r19, 50
2000a9b0:	a48400ff 	andi	r4, r4, 255
2000a9b4:	f0830000 	sbi	r4, r3, 0
				i = i + 1;
2000a9b8:	e8730020 	lwi	r3, r19, 32
2000a9bc:	30630001 	addik	r3, r3, 1
2000a9c0:	f8730020 	swi	r3, r19, 32
			j = j + 1;
		}
		j = 0;
		while (j <= 7) {
			i = 0;
			while (i <= 7) {
2000a9c4:	e8930020 	lwi	r4, r19, 32
2000a9c8:	30600007 	addik	r3, r0, 7
2000a9cc:	16441801 	cmp	r18, r4, r3
2000a9d0:	bcb2ff4c 	bgei	r18, -180		// 2000a91c
				tmp_YUV_i2 = tokens_YUV_i[(index_YUV_i + (i + 3 * 64 + j * 8)) % SIZE_YUV_i];
				tokens_YUV[(index_YUV + (i + 8 + (j + 8) * 16)) % SIZE_YUV] = tmp_YUV_i2;
				i = i + 1;
			}
			j = j + 1;
2000a9d4:	e873001c 	lwi	r3, r19, 28
2000a9d8:	30630001 	addik	r3, r3, 1
2000a9dc:	f873001c 	swi	r3, r19, 28
				i = i + 1;
			}
			j = j + 1;
		}
		j = 0;
		while (j <= 7) {
2000a9e0:	e893001c 	lwi	r4, r19, 28
2000a9e4:	30600007 	addik	r3, r0, 7
2000a9e8:	16441801 	cmp	r18, r4, r3
2000a9ec:	bcb2ff28 	bgei	r18, -216		// 2000a914
			}
			j = j + 1;
		}
	
		// Update ports indexes
		index_YUV_i += 256;
2000a9f0:	b0000000 	imm	0
2000a9f4:	e874001c 	lwi	r3, r20, 28
2000a9f8:	e8630000 	lwi	r3, r3, 0
2000a9fc:	30830100 	addik	r4, r3, 256
2000aa00:	b0000000 	imm	0
2000aa04:	e874001c 	lwi	r3, r20, 28
2000aa08:	f8830000 	swi	r4, r3, 0
		index_YUV += 256;
2000aa0c:	b0000000 	imm	0
2000aa10:	e8740024 	lwi	r3, r20, 36
2000aa14:	e8630000 	lwi	r3, r3, 0
2000aa18:	30830100 	addik	r4, r3, 256
2000aa1c:	b0000000 	imm	0
2000aa20:	e8740024 	lwi	r3, r20, 36
2000aa24:	f8830000 	swi	r4, r3, 0
		
		read_end_YUV_i();
2000aa28:	b0000000 	imm	0
2000aa2c:	e8740038 	lwi	r3, r20, 56
2000aa30:	99fc1800 	brald	r15, r3
2000aa34:	80000000 	or	r0, r0, r0
		write_end_YUV();
2000aa38:	b0000000 	imm	0
2000aa3c:	e8740040 	lwi	r3, r20, 64
2000aa40:	99fc1800 	brald	r15, r3
2000aa44:	80000000 	or	r0, r0, r0
	}
2000aa48:	e9e10000 	lwi	r15, r1, 0
2000aa4c:	10330000 	addk	r1, r19, r0
2000aa50:	ea610034 	lwi	r19, r1, 52
2000aa54:	ea810038 	lwi	r20, r1, 56
2000aa58:	3021003c 	addik	r1, r1, 60
2000aa5c:	b60f0008 	rtsd	r15, 8
2000aa60:	80000000 	or	r0, r0, r0

2000aa64 <isSchedulable_U>:
	static i32 isSchedulable_U() {
2000aa64:	3021fff0 	addik	r1, r1, -16
2000aa68:	fa610008 	swi	r19, r1, 8
2000aa6c:	fa81000c 	swi	r20, r1, 12
2000aa70:	12610000 	addk	r19, r1, r0
2000aa74:	96808000 	mfs	r20, rpc
2000aa78:	b000dfff 	imm	-8193
2000aa7c:	32946ee8 	addik	r20, r20, 28392
		i32 result;
	
		result = 1;
2000aa80:	30600001 	addik	r3, r0, 1
2000aa84:	f8730004 	swi	r3, r19, 4
		return result;
2000aa88:	e8730004 	lwi	r3, r19, 4
	}
2000aa8c:	10330000 	addk	r1, r19, r0
2000aa90:	ea610008 	lwi	r19, r1, 8
2000aa94:	ea81000c 	lwi	r20, r1, 12
2000aa98:	30210010 	addik	r1, r1, 16
2000aa9c:	b60f0008 	rtsd	r15, 8
2000aaa0:	80000000 	or	r0, r0, r0

2000aaa4 <U>:
	
	static void U() {
2000aaa4:	3021ffcc 	addik	r1, r1, -52
2000aaa8:	f9e10000 	swi	r15, r1, 0
2000aaac:	fa61002c 	swi	r19, r1, 44
2000aab0:	fa810030 	swi	r20, r1, 48
2000aab4:	12610000 	addk	r19, r1, r0
2000aab8:	96808000 	mfs	r20, rpc
2000aabc:	b000dfff 	imm	-8193
2000aac0:	32946ea4 	addik	r20, r20, 28324
	
		// Compute aligned port indexes
		i32 index_aligned_YUV_i = index_YUV_i % SIZE_YUV_i;
2000aac4:	b0000000 	imm	0
2000aac8:	e874001c 	lwi	r3, r20, 28
2000aacc:	e8630000 	lwi	r3, r3, 0
2000aad0:	a46301ff 	andi	r3, r3, 511
2000aad4:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_YUV = index_YUV % SIZE_YUV;
2000aad8:	b0000000 	imm	0
2000aadc:	e8740024 	lwi	r3, r20, 36
2000aae0:	e8630000 	lwi	r3, r3, 0
2000aae4:	a46301ff 	andi	r3, r3, 511
2000aae8:	f8730024 	swi	r3, r19, 36
	
		i32 idx_YUV_i;
		u8 local_YUV_i;
	
		idx_YUV_i = 0;
2000aaec:	f813001c 	swi	r0, r19, 28
		while (idx_YUV_i < 64) {
2000aaf0:	b8000080 	bri	128		// 2000ab70
			local_YUV_i = tokens_YUV_i[(index_YUV_i + (idx_YUV_i)) % SIZE_YUV_i];
2000aaf4:	b0000000 	imm	0
2000aaf8:	e8740018 	lwi	r3, r20, 24
2000aafc:	e8630000 	lwi	r3, r3, 0
2000ab00:	e8830004 	lwi	r4, r3, 4
2000ab04:	b0000000 	imm	0
2000ab08:	e874001c 	lwi	r3, r20, 28
2000ab0c:	e8a30000 	lwi	r5, r3, 0
2000ab10:	e873001c 	lwi	r3, r19, 28
2000ab14:	10651800 	addk	r3, r5, r3
2000ab18:	a46301ff 	andi	r3, r3, 511
2000ab1c:	10631800 	addk	r3, r3, r3
2000ab20:	10641800 	addk	r3, r4, r3
2000ab24:	e4630000 	lhui	r3, r3, 0
2000ab28:	90630061 	sext16	r3, r3
2000ab2c:	f0730028 	sbi	r3, r19, 40
			tokens_YUV[(index_YUV + (idx_YUV_i)) % SIZE_YUV] = local_YUV_i;
2000ab30:	b0000000 	imm	0
2000ab34:	e8740014 	lwi	r3, r20, 20
2000ab38:	e8630000 	lwi	r3, r3, 0
2000ab3c:	e8830004 	lwi	r4, r3, 4
2000ab40:	b0000000 	imm	0
2000ab44:	e8740024 	lwi	r3, r20, 36
2000ab48:	e8a30000 	lwi	r5, r3, 0
2000ab4c:	e873001c 	lwi	r3, r19, 28
2000ab50:	10651800 	addk	r3, r5, r3
2000ab54:	a46301ff 	andi	r3, r3, 511
2000ab58:	10641800 	addk	r3, r4, r3
2000ab5c:	e0930028 	lbui	r4, r19, 40
2000ab60:	f0830000 	sbi	r4, r3, 0
			idx_YUV_i = idx_YUV_i + 1;
2000ab64:	e873001c 	lwi	r3, r19, 28
2000ab68:	30630001 	addik	r3, r3, 1
2000ab6c:	f873001c 	swi	r3, r19, 28
	
		i32 idx_YUV_i;
		u8 local_YUV_i;
	
		idx_YUV_i = 0;
		while (idx_YUV_i < 64) {
2000ab70:	e893001c 	lwi	r4, r19, 28
2000ab74:	3060003f 	addik	r3, r0, 63
2000ab78:	16441801 	cmp	r18, r4, r3
2000ab7c:	bcb2ff78 	bgei	r18, -136		// 2000aaf4
			tokens_YUV[(index_YUV + (idx_YUV_i)) % SIZE_YUV] = local_YUV_i;
			idx_YUV_i = idx_YUV_i + 1;
		}
	
		// Update ports indexes
		index_YUV_i += 64;
2000ab80:	b0000000 	imm	0
2000ab84:	e874001c 	lwi	r3, r20, 28
2000ab88:	e8630000 	lwi	r3, r3, 0
2000ab8c:	30830040 	addik	r4, r3, 64
2000ab90:	b0000000 	imm	0
2000ab94:	e874001c 	lwi	r3, r20, 28
2000ab98:	f8830000 	swi	r4, r3, 0
		index_YUV += 64;
2000ab9c:	b0000000 	imm	0
2000aba0:	e8740024 	lwi	r3, r20, 36
2000aba4:	e8630000 	lwi	r3, r3, 0
2000aba8:	30830040 	addik	r4, r3, 64
2000abac:	b0000000 	imm	0
2000abb0:	e8740024 	lwi	r3, r20, 36
2000abb4:	f8830000 	swi	r4, r3, 0
		
		read_end_YUV_i();
2000abb8:	b0000000 	imm	0
2000abbc:	e8740038 	lwi	r3, r20, 56
2000abc0:	99fc1800 	brald	r15, r3
2000abc4:	80000000 	or	r0, r0, r0
		write_end_YUV();
2000abc8:	b0000000 	imm	0
2000abcc:	e8740040 	lwi	r3, r20, 64
2000abd0:	99fc1800 	brald	r15, r3
2000abd4:	80000000 	or	r0, r0, r0
	}
2000abd8:	e9e10000 	lwi	r15, r1, 0
2000abdc:	10330000 	addk	r1, r19, r0
2000abe0:	ea61002c 	lwi	r19, r1, 44
2000abe4:	ea810030 	lwi	r20, r1, 48
2000abe8:	30210034 	addik	r1, r1, 52
2000abec:	b60f0008 	rtsd	r15, 8
2000abf0:	80000000 	or	r0, r0, r0

2000abf4 <isSchedulable_V>:
	static i32 isSchedulable_V() {
2000abf4:	3021fff0 	addik	r1, r1, -16
2000abf8:	fa610008 	swi	r19, r1, 8
2000abfc:	fa81000c 	swi	r20, r1, 12
2000ac00:	12610000 	addk	r19, r1, r0
2000ac04:	96808000 	mfs	r20, rpc
2000ac08:	b000dfff 	imm	-8193
2000ac0c:	32946d58 	addik	r20, r20, 27992
		i32 result;
	
		result = 1;
2000ac10:	30600001 	addik	r3, r0, 1
2000ac14:	f8730004 	swi	r3, r19, 4
		return result;
2000ac18:	e8730004 	lwi	r3, r19, 4
	}
2000ac1c:	10330000 	addk	r1, r19, r0
2000ac20:	ea610008 	lwi	r19, r1, 8
2000ac24:	ea81000c 	lwi	r20, r1, 12
2000ac28:	30210010 	addik	r1, r1, 16
2000ac2c:	b60f0008 	rtsd	r15, 8
2000ac30:	80000000 	or	r0, r0, r0

2000ac34 <V>:
	
	static void V() {
2000ac34:	3021ffcc 	addik	r1, r1, -52
2000ac38:	f9e10000 	swi	r15, r1, 0
2000ac3c:	fa61002c 	swi	r19, r1, 44
2000ac40:	fa810030 	swi	r20, r1, 48
2000ac44:	12610000 	addk	r19, r1, r0
2000ac48:	96808000 	mfs	r20, rpc
2000ac4c:	b000dfff 	imm	-8193
2000ac50:	32946d14 	addik	r20, r20, 27924
	
		// Compute aligned port indexes
		i32 index_aligned_YUV_i = index_YUV_i % SIZE_YUV_i;
2000ac54:	b0000000 	imm	0
2000ac58:	e874001c 	lwi	r3, r20, 28
2000ac5c:	e8630000 	lwi	r3, r3, 0
2000ac60:	a46301ff 	andi	r3, r3, 511
2000ac64:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_YUV = index_YUV % SIZE_YUV;
2000ac68:	b0000000 	imm	0
2000ac6c:	e8740024 	lwi	r3, r20, 36
2000ac70:	e8630000 	lwi	r3, r3, 0
2000ac74:	a46301ff 	andi	r3, r3, 511
2000ac78:	f8730024 	swi	r3, r19, 36
	
		i32 idx_YUV_i;
		u8 local_YUV_i;
	
		idx_YUV_i = 0;
2000ac7c:	f813001c 	swi	r0, r19, 28
		while (idx_YUV_i < 64) {
2000ac80:	b8000080 	bri	128		// 2000ad00
			local_YUV_i = tokens_YUV_i[(index_YUV_i + (idx_YUV_i)) % SIZE_YUV_i];
2000ac84:	b0000000 	imm	0
2000ac88:	e8740018 	lwi	r3, r20, 24
2000ac8c:	e8630000 	lwi	r3, r3, 0
2000ac90:	e8830004 	lwi	r4, r3, 4
2000ac94:	b0000000 	imm	0
2000ac98:	e874001c 	lwi	r3, r20, 28
2000ac9c:	e8a30000 	lwi	r5, r3, 0
2000aca0:	e873001c 	lwi	r3, r19, 28
2000aca4:	10651800 	addk	r3, r5, r3
2000aca8:	a46301ff 	andi	r3, r3, 511
2000acac:	10631800 	addk	r3, r3, r3
2000acb0:	10641800 	addk	r3, r4, r3
2000acb4:	e4630000 	lhui	r3, r3, 0
2000acb8:	90630061 	sext16	r3, r3
2000acbc:	f0730028 	sbi	r3, r19, 40
			tokens_YUV[(index_YUV + (idx_YUV_i)) % SIZE_YUV] = local_YUV_i;
2000acc0:	b0000000 	imm	0
2000acc4:	e8740014 	lwi	r3, r20, 20
2000acc8:	e8630000 	lwi	r3, r3, 0
2000accc:	e8830004 	lwi	r4, r3, 4
2000acd0:	b0000000 	imm	0
2000acd4:	e8740024 	lwi	r3, r20, 36
2000acd8:	e8a30000 	lwi	r5, r3, 0
2000acdc:	e873001c 	lwi	r3, r19, 28
2000ace0:	10651800 	addk	r3, r5, r3
2000ace4:	a46301ff 	andi	r3, r3, 511
2000ace8:	10641800 	addk	r3, r4, r3
2000acec:	e0930028 	lbui	r4, r19, 40
2000acf0:	f0830000 	sbi	r4, r3, 0
			idx_YUV_i = idx_YUV_i + 1;
2000acf4:	e873001c 	lwi	r3, r19, 28
2000acf8:	30630001 	addik	r3, r3, 1
2000acfc:	f873001c 	swi	r3, r19, 28
	
		i32 idx_YUV_i;
		u8 local_YUV_i;
	
		idx_YUV_i = 0;
		while (idx_YUV_i < 64) {
2000ad00:	e893001c 	lwi	r4, r19, 28
2000ad04:	3060003f 	addik	r3, r0, 63
2000ad08:	16441801 	cmp	r18, r4, r3
2000ad0c:	bcb2ff78 	bgei	r18, -136		// 2000ac84
			tokens_YUV[(index_YUV + (idx_YUV_i)) % SIZE_YUV] = local_YUV_i;
			idx_YUV_i = idx_YUV_i + 1;
		}
	
		// Update ports indexes
		index_YUV_i += 64;
2000ad10:	b0000000 	imm	0
2000ad14:	e874001c 	lwi	r3, r20, 28
2000ad18:	e8630000 	lwi	r3, r3, 0
2000ad1c:	30830040 	addik	r4, r3, 64
2000ad20:	b0000000 	imm	0
2000ad24:	e874001c 	lwi	r3, r20, 28
2000ad28:	f8830000 	swi	r4, r3, 0
		index_YUV += 64;
2000ad2c:	b0000000 	imm	0
2000ad30:	e8740024 	lwi	r3, r20, 36
2000ad34:	e8630000 	lwi	r3, r3, 0
2000ad38:	30830040 	addik	r4, r3, 64
2000ad3c:	b0000000 	imm	0
2000ad40:	e8740024 	lwi	r3, r20, 36
2000ad44:	f8830000 	swi	r4, r3, 0
		
		read_end_YUV_i();
2000ad48:	b0000000 	imm	0
2000ad4c:	e8740038 	lwi	r3, r20, 56
2000ad50:	99fc1800 	brald	r15, r3
2000ad54:	80000000 	or	r0, r0, r0
		write_end_YUV();
2000ad58:	b0000000 	imm	0
2000ad5c:	e8740040 	lwi	r3, r20, 64
2000ad60:	99fc1800 	brald	r15, r3
2000ad64:	80000000 	or	r0, r0, r0
	}
2000ad68:	e9e10000 	lwi	r15, r1, 0
2000ad6c:	10330000 	addk	r1, r19, r0
2000ad70:	ea61002c 	lwi	r19, r1, 44
2000ad74:	ea810030 	lwi	r20, r1, 48
2000ad78:	30210034 	addik	r1, r1, 52
2000ad7c:	b60f0008 	rtsd	r15, 8
2000ad80:	80000000 	or	r0, r0, r0

2000ad84 <decoder_merger_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_merger_initialize() {
2000ad84:	3021fff0 	addik	r1, r1, -16
2000ad88:	fa610008 	swi	r19, r1, 8
2000ad8c:	fa81000c 	swi	r20, r1, 12
2000ad90:	12610000 	addk	r19, r1, r0
2000ad94:	96808000 	mfs	r20, rpc
2000ad98:	b000dfff 	imm	-8193
2000ad9c:	32946bc8 	addik	r20, r20, 27592
		int i = 0;
2000ada0:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_Y;
2000ada4:	b0000000 	imm	0
2000ada8:	e8740030 	lwi	r3, r20, 48
2000adac:	30800002 	addik	r4, r0, 2
2000adb0:	f8830000 	swi	r4, r3, 0
		
	finished:
		// no read_end/write_end here!
		return;
2000adb4:	80000000 	or	r0, r0, r0
	}
2000adb8:	10330000 	addk	r1, r19, r0
2000adbc:	ea610008 	lwi	r19, r1, 8
2000adc0:	ea81000c 	lwi	r20, r1, 12
2000adc4:	30210010 	addik	r1, r1, 16
2000adc8:	b60f0008 	rtsd	r15, 8
2000adcc:	80000000 	or	r0, r0, r0

2000add0 <decoder_merger_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	
	int decoder_merger_scheduler() {
2000add0:	3021ffcc 	addik	r1, r1, -52
2000add4:	f9e10000 	swi	r15, r1, 0
2000add8:	fa61002c 	swi	r19, r1, 44
2000addc:	fa810030 	swi	r20, r1, 48
2000ade0:	12610000 	addk	r19, r1, r0
2000ade4:	96808000 	mfs	r20, rpc
2000ade8:	b000dfff 	imm	-8193
2000adec:	32946b78 	addik	r20, r20, 27512
		int i = 0;
2000adf0:	f813001c 	swi	r0, r19, 28
		if(needInit){
2000adf4:	b0000000 	imm	0
2000adf8:	e874002c 	lwi	r3, r20, 44
2000adfc:	e0630000 	lbui	r3, r3, 0
2000ae00:	bc03001c 	beqi	r3, 28		// 2000ae1c
			decoder_merger_initialize();
2000ae04:	b000ffff 	imm	-1
2000ae08:	b9f4ff7c 	brlid	r15, -132	// 2000ad84 <decoder_merger_initialize>
2000ae0c:	80000000 	or	r0, r0, r0
			needInit = 0;
2000ae10:	b0000000 	imm	0
2000ae14:	e874002c 	lwi	r3, r20, 44
2000ae18:	f0030000 	sbi	r0, r3, 0
		}
	
		read_YUV_i();
2000ae1c:	b0000000 	imm	0
2000ae20:	e8740034 	lwi	r3, r20, 52
2000ae24:	99fc1800 	brald	r15, r3
2000ae28:	80000000 	or	r0, r0, r0
		write_YUV();
2000ae2c:	b0000000 	imm	0
2000ae30:	e894003c 	lwi	r4, r20, 60
2000ae34:	99fc2000 	brald	r15, r4
2000ae38:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
2000ae3c:	b0000000 	imm	0
2000ae40:	e8740030 	lwi	r3, r20, 48
2000ae44:	e8630000 	lwi	r3, r3, 0
2000ae48:	a8830001 	xori	r4, r3, 1
2000ae4c:	bc0400f0 	beqi	r4, 240		// 2000af3c
2000ae50:	30800001 	addik	r4, r0, 1
2000ae54:	16441803 	cmpu	r18, r4, r3
2000ae58:	bc52001c 	blti	r18, 28		// 2000ae74
2000ae5c:	a8630002 	xori	r3, r3, 2
2000ae60:	bc0301ac 	beqi	r3, 428		// 2000b00c
		case my_state_V:
			goto l_V;
		case my_state_Y:
			goto l_Y;
		default:
			exit(1);
2000ae64:	30a00001 	addik	r5, r0, 1
2000ae68:	b000dfff 	imm	-8193
2000ae6c:	b9f4552c 	brlid	r15, 21804	// 398 <exit>
2000ae70:	80000000 	or	r0, r0, r0
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_U:
			goto l_U;
2000ae74:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_U:
			if (numTokens_YUV_i - index_YUV_i >= 64 && isSchedulable_U()) {
2000ae78:	b0000000 	imm	0
2000ae7c:	e8740020 	lwi	r3, r20, 32
2000ae80:	e8830000 	lwi	r4, r3, 0
2000ae84:	b0000000 	imm	0
2000ae88:	e874001c 	lwi	r3, r20, 28
2000ae8c:	e8630000 	lwi	r3, r3, 0
2000ae90:	14832000 	rsubk	r4, r3, r4
2000ae94:	3060003f 	addik	r3, r0, 63
2000ae98:	16441803 	cmpu	r18, r4, r3
2000ae9c:	bcb20090 	bgei	r18, 144		// 2000af2c
2000aea0:	b0000000 	imm	0
2000aea4:	e894004c 	lwi	r4, r20, 76
2000aea8:	99fc2000 	brald	r15, r4
2000aeac:	80000000 	or	r0, r0, r0
2000aeb0:	bc03007c 	beqi	r3, 124		// 2000af2c
				int stop = 0;
2000aeb4:	f8130020 	swi	r0, r19, 32
				if (64 > SIZE_YUV - index_YUV + decoder_merger_YUV->read_inds[0]) {
2000aeb8:	b0000000 	imm	0
2000aebc:	e8740014 	lwi	r3, r20, 20
2000aec0:	e8630000 	lwi	r3, r3, 0
2000aec4:	e863000c 	lwi	r3, r3, 12
2000aec8:	e8830000 	lwi	r4, r3, 0
2000aecc:	b0000000 	imm	0
2000aed0:	e8740024 	lwi	r3, r20, 36
2000aed4:	e8630000 	lwi	r3, r3, 0
2000aed8:	14632000 	rsubk	r3, r3, r4
2000aedc:	30830200 	addik	r4, r3, 512
2000aee0:	3060003f 	addik	r3, r0, 63
2000aee4:	16441803 	cmpu	r18, r4, r3
2000aee8:	bc52000c 	blti	r18, 12		// 2000aef4
					stop = 1;
2000aeec:	30600001 	addik	r3, r0, 1
2000aef0:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
2000aef4:	e8730020 	lwi	r3, r19, 32
2000aef8:	bc030014 	beqi	r3, 20		// 2000af0c
					_FSM_state = my_state_U;
2000aefc:	b0000000 	imm	0
2000af00:	e8740030 	lwi	r3, r20, 48
2000af04:	f8030000 	swi	r0, r3, 0
					goto finished;
2000af08:	b80001d4 	bri	468		// 2000b0dc
				}
				U();
2000af0c:	b0000000 	imm	0
2000af10:	e8740050 	lwi	r3, r20, 80
2000af14:	99fc1800 	brald	r15, r3
2000af18:	80000000 	or	r0, r0, r0
				i++;
2000af1c:	e873001c 	lwi	r3, r19, 28
2000af20:	30630001 	addik	r3, r3, 1
2000af24:	f873001c 	swi	r3, r19, 28
				goto l_V;
2000af28:	b8000018 	bri	24		// 2000af40
			} else {
				_FSM_state = my_state_U;
2000af2c:	b0000000 	imm	0
2000af30:	e8740030 	lwi	r3, r20, 48
2000af34:	f8030000 	swi	r0, r3, 0
				goto finished;
2000af38:	b80001a4 	bri	420		// 2000b0dc
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_U:
			goto l_U;
		case my_state_V:
			goto l_V;
2000af3c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_U;
				goto finished;
			}
		l_V:
			if (numTokens_YUV_i - index_YUV_i >= 64 && isSchedulable_V()) {
2000af40:	b0000000 	imm	0
2000af44:	e8740020 	lwi	r3, r20, 32
2000af48:	e8830000 	lwi	r4, r3, 0
2000af4c:	b0000000 	imm	0
2000af50:	e874001c 	lwi	r3, r20, 28
2000af54:	e8630000 	lwi	r3, r3, 0
2000af58:	14832000 	rsubk	r4, r3, r4
2000af5c:	3060003f 	addik	r3, r0, 63
2000af60:	16441803 	cmpu	r18, r4, r3
2000af64:	bcb20094 	bgei	r18, 148		// 2000aff8
2000af68:	b0000000 	imm	0
2000af6c:	e8940054 	lwi	r4, r20, 84
2000af70:	99fc2000 	brald	r15, r4
2000af74:	80000000 	or	r0, r0, r0
2000af78:	bc030080 	beqi	r3, 128		// 2000aff8
				int stop = 0;
2000af7c:	f8130024 	swi	r0, r19, 36
				if (64 > SIZE_YUV - index_YUV + decoder_merger_YUV->read_inds[0]) {
2000af80:	b0000000 	imm	0
2000af84:	e8740014 	lwi	r3, r20, 20
2000af88:	e8630000 	lwi	r3, r3, 0
2000af8c:	e863000c 	lwi	r3, r3, 12
2000af90:	e8830000 	lwi	r4, r3, 0
2000af94:	b0000000 	imm	0
2000af98:	e8740024 	lwi	r3, r20, 36
2000af9c:	e8630000 	lwi	r3, r3, 0
2000afa0:	14632000 	rsubk	r3, r3, r4
2000afa4:	30830200 	addik	r4, r3, 512
2000afa8:	3060003f 	addik	r3, r0, 63
2000afac:	16441803 	cmpu	r18, r4, r3
2000afb0:	bc52000c 	blti	r18, 12		// 2000afbc
					stop = 1;
2000afb4:	30600001 	addik	r3, r0, 1
2000afb8:	f8730024 	swi	r3, r19, 36
				}
				if (stop != 0) {
2000afbc:	e8730024 	lwi	r3, r19, 36
2000afc0:	bc030018 	beqi	r3, 24		// 2000afd8
					_FSM_state = my_state_V;
2000afc4:	b0000000 	imm	0
2000afc8:	e8740030 	lwi	r3, r20, 48
2000afcc:	30800001 	addik	r4, r0, 1
2000afd0:	f8830000 	swi	r4, r3, 0
					goto finished;
2000afd4:	b8000108 	bri	264		// 2000b0dc
				}
				V();
2000afd8:	b0000000 	imm	0
2000afdc:	e8740058 	lwi	r3, r20, 88
2000afe0:	99fc1800 	brald	r15, r3
2000afe4:	80000000 	or	r0, r0, r0
				i++;
2000afe8:	e873001c 	lwi	r3, r19, 28
2000afec:	30630001 	addik	r3, r3, 1
2000aff0:	f873001c 	swi	r3, r19, 28
				goto l_Y;
2000aff4:	b800001c 	bri	28		// 2000b010
			} else {
				_FSM_state = my_state_V;
2000aff8:	b0000000 	imm	0
2000affc:	e8740030 	lwi	r3, r20, 48
2000b000:	30800001 	addik	r4, r0, 1
2000b004:	f8830000 	swi	r4, r3, 0
				goto finished;
2000b008:	b80000d4 	bri	212		// 2000b0dc
		case my_state_U:
			goto l_U;
		case my_state_V:
			goto l_V;
		case my_state_Y:
			goto l_Y;
2000b00c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_V;
				goto finished;
			}
		l_Y:
			if (numTokens_YUV_i - index_YUV_i >= 256 && isSchedulable_Y()) {
2000b010:	b0000000 	imm	0
2000b014:	e8740020 	lwi	r3, r20, 32
2000b018:	e8830000 	lwi	r4, r3, 0
2000b01c:	b0000000 	imm	0
2000b020:	e874001c 	lwi	r3, r20, 28
2000b024:	e8630000 	lwi	r3, r3, 0
2000b028:	14832000 	rsubk	r4, r3, r4
2000b02c:	306000ff 	addik	r3, r0, 255
2000b030:	16441803 	cmpu	r18, r4, r3
2000b034:	bcb20094 	bgei	r18, 148		// 2000b0c8
2000b038:	b0000000 	imm	0
2000b03c:	e8940044 	lwi	r4, r20, 68
2000b040:	99fc2000 	brald	r15, r4
2000b044:	80000000 	or	r0, r0, r0
2000b048:	bc030080 	beqi	r3, 128		// 2000b0c8
				int stop = 0;
2000b04c:	f8130028 	swi	r0, r19, 40
				if (256 > SIZE_YUV - index_YUV + decoder_merger_YUV->read_inds[0]) {
2000b050:	b0000000 	imm	0
2000b054:	e8740014 	lwi	r3, r20, 20
2000b058:	e8630000 	lwi	r3, r3, 0
2000b05c:	e863000c 	lwi	r3, r3, 12
2000b060:	e8830000 	lwi	r4, r3, 0
2000b064:	b0000000 	imm	0
2000b068:	e8740024 	lwi	r3, r20, 36
2000b06c:	e8630000 	lwi	r3, r3, 0
2000b070:	14632000 	rsubk	r3, r3, r4
2000b074:	30830200 	addik	r4, r3, 512
2000b078:	306000ff 	addik	r3, r0, 255
2000b07c:	16441803 	cmpu	r18, r4, r3
2000b080:	bc52000c 	blti	r18, 12		// 2000b08c
					stop = 1;
2000b084:	30600001 	addik	r3, r0, 1
2000b088:	f8730028 	swi	r3, r19, 40
				}
				if (stop != 0) {
2000b08c:	e8730028 	lwi	r3, r19, 40
2000b090:	bc030018 	beqi	r3, 24		// 2000b0a8
					_FSM_state = my_state_Y;
2000b094:	b0000000 	imm	0
2000b098:	e8740030 	lwi	r3, r20, 48
2000b09c:	30800002 	addik	r4, r0, 2
2000b0a0:	f8830000 	swi	r4, r3, 0
					goto finished;
2000b0a4:	b8000038 	bri	56		// 2000b0dc
				}
				Y();
2000b0a8:	b0000000 	imm	0
2000b0ac:	e8740048 	lwi	r3, r20, 72
2000b0b0:	99fc1800 	brald	r15, r3
2000b0b4:	80000000 	or	r0, r0, r0
				i++;
2000b0b8:	e873001c 	lwi	r3, r19, 28
2000b0bc:	30630001 	addik	r3, r3, 1
2000b0c0:	f873001c 	swi	r3, r19, 28
				goto l_U;
2000b0c4:	b800fdb4 	bri	-588		// 2000ae78
			} else {
				_FSM_state = my_state_Y;
2000b0c8:	b0000000 	imm	0
2000b0cc:	e8740030 	lwi	r3, r20, 48
2000b0d0:	30800002 	addik	r4, r0, 2
2000b0d4:	f8830000 	swi	r4, r3, 0
				goto finished;
2000b0d8:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_YUV_i();
2000b0dc:	b0000000 	imm	0
2000b0e0:	e8940038 	lwi	r4, r20, 56
2000b0e4:	99fc2000 	brald	r15, r4
2000b0e8:	80000000 	or	r0, r0, r0
		
		write_end_YUV();
2000b0ec:	b0000000 	imm	0
2000b0f0:	e8740040 	lwi	r3, r20, 64
2000b0f4:	99fc1800 	brald	r15, r3
2000b0f8:	80000000 	or	r0, r0, r0
		
		
		return i;
2000b0fc:	e873001c 	lwi	r3, r19, 28
	}
2000b100:	e9e10000 	lwi	r15, r1, 0
2000b104:	10330000 	addk	r1, r19, r0
2000b108:	ea61002c 	lwi	r19, r1, 44
2000b10c:	ea810030 	lwi	r20, r1, 48
2000b110:	30210034 	addik	r1, r1, 52
2000b114:	b60f0008 	rtsd	r15, 8
2000b118:	80000000 	or	r0, r0, r0

2000b11c <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000b11c:	3021fff4 	addik	r1, r1, -12
2000b120:	fa610004 	swi	r19, r1, 4
2000b124:	fa810008 	swi	r20, r1, 8
2000b128:	12610000 	addk	r19, r1, r0
2000b12c:	96808000 	mfs	r20, rpc
2000b130:	b000dfff 	imm	-8193
2000b134:	32946830 	addik	r20, r20, 26672
2000b138:	f8b30010 	swi	r5, r19, 16
2000b13c:	f8d30014 	swi	r6, r19, 20
2000b140:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000b144:	e8730010 	lwi	r3, r19, 16
2000b148:	e8630010 	lwi	r3, r3, 16
2000b14c:	e8830000 	lwi	r4, r3, 0
2000b150:	e8730010 	lwi	r3, r19, 16
2000b154:	e8a3000c 	lwi	r5, r3, 12
2000b158:	e8730014 	lwi	r3, r19, 20
2000b15c:	64630402 	bslli	r3, r3, 2
2000b160:	10651800 	addk	r3, r5, r3
2000b164:	e8630000 	lwi	r3, r3, 0
2000b168:	14a32000 	rsubk	r5, r3, r4
2000b16c:	30600001 	addik	r3, r0, 1
2000b170:	e8930018 	lwi	r4, r19, 24
2000b174:	16442803 	cmpu	r18, r4, r5
2000b178:	bcb20008 	bgei	r18, 8		// 2000b180
2000b17c:	10600000 	addk	r3, r0, r0
2000b180:	a46300ff 	andi	r3, r3, 255
}
2000b184:	10330000 	addk	r1, r19, r0
2000b188:	ea610004 	lwi	r19, r1, 4
2000b18c:	ea810008 	lwi	r20, r1, 8
2000b190:	3021000c 	addik	r1, r1, 12
2000b194:	b60f0008 	rtsd	r15, 8
2000b198:	80000000 	or	r0, r0, r0

2000b19c <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000b19c:	3021fff4 	addik	r1, r1, -12
2000b1a0:	fa610004 	swi	r19, r1, 4
2000b1a4:	fa810008 	swi	r20, r1, 8
2000b1a8:	12610000 	addk	r19, r1, r0
2000b1ac:	96808000 	mfs	r20, rpc
2000b1b0:	b000dfff 	imm	-8193
2000b1b4:	329467b0 	addik	r20, r20, 26544
2000b1b8:	f8b30010 	swi	r5, r19, 16
2000b1bc:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000b1c0:	e8730010 	lwi	r3, r19, 16
2000b1c4:	e8630010 	lwi	r3, r3, 16
2000b1c8:	e8830000 	lwi	r4, r3, 0
2000b1cc:	e8730010 	lwi	r3, r19, 16
2000b1d0:	e8a3000c 	lwi	r5, r3, 12
2000b1d4:	e8730014 	lwi	r3, r19, 20
2000b1d8:	64630402 	bslli	r3, r3, 2
2000b1dc:	10651800 	addk	r3, r5, r3
2000b1e0:	e8630000 	lwi	r3, r3, 0
2000b1e4:	14632000 	rsubk	r3, r3, r4
}
2000b1e8:	10330000 	addk	r1, r19, r0
2000b1ec:	ea610004 	lwi	r19, r1, 4
2000b1f0:	ea810008 	lwi	r20, r1, 8
2000b1f4:	3021000c 	addik	r1, r1, 12
2000b1f8:	b60f0008 	rtsd	r15, 8
2000b1fc:	80000000 	or	r0, r0, r0

2000b200 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000b200:	3021fff0 	addik	r1, r1, -16
2000b204:	fa610008 	swi	r19, r1, 8
2000b208:	fa81000c 	swi	r20, r1, 12
2000b20c:	12610000 	addk	r19, r1, r0
2000b210:	96808000 	mfs	r20, rpc
2000b214:	b000dfff 	imm	-8193
2000b218:	3294674c 	addik	r20, r20, 26444
2000b21c:	f8b30014 	swi	r5, r19, 20
2000b220:	f8d30018 	swi	r6, r19, 24
2000b224:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000b228:	f8130004 	swi	r0, r19, 4
2000b22c:	b800005c 	bri	92		// 2000b288
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000b230:	e8730014 	lwi	r3, r19, 20
2000b234:	e8830000 	lwi	r4, r3, 0
2000b238:	e8730014 	lwi	r3, r19, 20
2000b23c:	e8a3000c 	lwi	r5, r3, 12
2000b240:	e8730004 	lwi	r3, r19, 4
2000b244:	64630402 	bslli	r3, r3, 2
2000b248:	10651800 	addk	r3, r5, r3
2000b24c:	e8a30000 	lwi	r5, r3, 0
2000b250:	e8730014 	lwi	r3, r19, 20
2000b254:	e8630010 	lwi	r3, r3, 16
2000b258:	e8630000 	lwi	r3, r3, 0
2000b25c:	14632800 	rsubk	r3, r3, r5
2000b260:	10641800 	addk	r3, r4, r3
2000b264:	30830001 	addik	r4, r3, 1
2000b268:	e873001c 	lwi	r3, r19, 28
2000b26c:	16441803 	cmpu	r18, r4, r3
2000b270:	bc52000c 	blti	r18, 12		// 2000b27c
            return 0;
2000b274:	10600000 	addk	r3, r0, r0
2000b278:	b8000024 	bri	36		// 2000b29c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000b27c:	e8730004 	lwi	r3, r19, 4
2000b280:	30630001 	addik	r3, r3, 1
2000b284:	f8730004 	swi	r3, r19, 4
2000b288:	e8930004 	lwi	r4, r19, 4
2000b28c:	e8730018 	lwi	r3, r19, 24
2000b290:	16432003 	cmpu	r18, r3, r4
2000b294:	bc52ff9c 	blti	r18, -100		// 2000b230
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000b298:	30600001 	addik	r3, r0, 1
}
2000b29c:	10330000 	addk	r1, r19, r0
2000b2a0:	ea610008 	lwi	r19, r1, 8
2000b2a4:	ea81000c 	lwi	r20, r1, 12
2000b2a8:	30210010 	addik	r1, r1, 16
2000b2ac:	b60f0008 	rtsd	r15, 8
2000b2b0:	80000000 	or	r0, r0, r0

2000b2b4 <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000b2b4:	3021ffe8 	addik	r1, r1, -24
2000b2b8:	fa610010 	swi	r19, r1, 16
2000b2bc:	fa810014 	swi	r20, r1, 20
2000b2c0:	12610000 	addk	r19, r1, r0
2000b2c4:	96808000 	mfs	r20, rpc
2000b2c8:	b000dfff 	imm	-8193
2000b2cc:	32946698 	addik	r20, r20, 26264
2000b2d0:	f8b3001c 	swi	r5, r19, 28
2000b2d4:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000b2d8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000b2dc:	f8130004 	swi	r0, r19, 4
2000b2e0:	b8000054 	bri	84		// 2000b334
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000b2e4:	e873001c 	lwi	r3, r19, 28
2000b2e8:	e8630010 	lwi	r3, r3, 16
2000b2ec:	e8830000 	lwi	r4, r3, 0
2000b2f0:	e873001c 	lwi	r3, r19, 28
2000b2f4:	e8a3000c 	lwi	r5, r3, 12
2000b2f8:	e8730004 	lwi	r3, r19, 4
2000b2fc:	64630402 	bslli	r3, r3, 2
2000b300:	10651800 	addk	r3, r5, r3
2000b304:	e8630000 	lwi	r3, r3, 0
2000b308:	14632000 	rsubk	r3, r3, r4
2000b30c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000b310:	e8930008 	lwi	r4, r19, 8
2000b314:	e873000c 	lwi	r3, r19, 12
2000b318:	16441803 	cmpu	r18, r4, r3
2000b31c:	bcb20008 	bgei	r18, 8		// 2000b324
2000b320:	10640000 	addk	r3, r4, r0
2000b324:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000b328:	e8730004 	lwi	r3, r19, 4
2000b32c:	30630001 	addik	r3, r3, 1
2000b330:	f8730004 	swi	r3, r19, 4
2000b334:	e8930004 	lwi	r4, r19, 4
2000b338:	e8730020 	lwi	r3, r19, 32
2000b33c:	16432003 	cmpu	r18, r3, r4
2000b340:	bc52ffa4 	blti	r18, -92		// 2000b2e4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000b344:	e873001c 	lwi	r3, r19, 28
2000b348:	e8830000 	lwi	r4, r3, 0
2000b34c:	e8730008 	lwi	r3, r19, 8
2000b350:	14632000 	rsubk	r3, r3, r4
}
2000b354:	10330000 	addk	r1, r19, r0
2000b358:	ea610010 	lwi	r19, r1, 16
2000b35c:	ea810014 	lwi	r20, r1, 20
2000b360:	30210018 	addik	r1, r1, 24
2000b364:	b60f0008 	rtsd	r15, 8
2000b368:	80000000 	or	r0, r0, r0

2000b36c <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000b36c:	3021fff0 	addik	r1, r1, -16
2000b370:	fa610008 	swi	r19, r1, 8
2000b374:	fa81000c 	swi	r20, r1, 12
2000b378:	12610000 	addk	r19, r1, r0
2000b37c:	96808000 	mfs	r20, rpc
2000b380:	b000dfff 	imm	-8193
2000b384:	329465e0 	addik	r20, r20, 26080
2000b388:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2000b38c:	e8730014 	lwi	r3, r19, 20
2000b390:	e8630010 	lwi	r3, r3, 16
2000b394:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000b398:	f8130004 	swi	r0, r19, 4
2000b39c:	b8000028 	bri	40		// 2000b3c4
        fifo->read_inds[i] = 0;
2000b3a0:	e8730014 	lwi	r3, r19, 20
2000b3a4:	e883000c 	lwi	r4, r3, 12
2000b3a8:	e8730004 	lwi	r3, r19, 4
2000b3ac:	64630402 	bslli	r3, r3, 2
2000b3b0:	10641800 	addk	r3, r4, r3
2000b3b4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000b3b8:	e8730004 	lwi	r3, r19, 4
2000b3bc:	30630001 	addik	r3, r3, 1
2000b3c0:	f8730004 	swi	r3, r19, 4
2000b3c4:	e8730014 	lwi	r3, r19, 20
2000b3c8:	e8830008 	lwi	r4, r3, 8
2000b3cc:	e8730004 	lwi	r3, r19, 4
2000b3d0:	16441803 	cmpu	r18, r4, r3
2000b3d4:	bc52ffcc 	blti	r18, -52		// 2000b3a0
        fifo->read_inds[i] = 0;
    }
}
2000b3d8:	10330000 	addk	r1, r19, r0
2000b3dc:	ea610008 	lwi	r19, r1, 8
2000b3e0:	ea81000c 	lwi	r20, r1, 12
2000b3e4:	30210010 	addik	r1, r1, 16
2000b3e8:	b60f0008 	rtsd	r15, 8
2000b3ec:	80000000 	or	r0, r0, r0

2000b3f0 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000b3f0:	3021fff0 	addik	r1, r1, -16
2000b3f4:	fa610008 	swi	r19, r1, 8
2000b3f8:	fa81000c 	swi	r20, r1, 12
2000b3fc:	12610000 	addk	r19, r1, r0
2000b400:	96808000 	mfs	r20, rpc
2000b404:	b000dfff 	imm	-8193
2000b408:	3294655c 	addik	r20, r20, 25948
2000b40c:	f8b30014 	swi	r5, r19, 20
2000b410:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000b414:	e8730014 	lwi	r3, r19, 20
2000b418:	e8830004 	lwi	r4, r3, 4
2000b41c:	e8730014 	lwi	r3, r19, 20
2000b420:	e8a3000c 	lwi	r5, r3, 12
2000b424:	e8730018 	lwi	r3, r19, 24
2000b428:	64630402 	bslli	r3, r3, 2
2000b42c:	10651800 	addk	r3, r5, r3
2000b430:	e8a30000 	lwi	r5, r3, 0
2000b434:	e8730014 	lwi	r3, r19, 20
2000b438:	e8630000 	lwi	r3, r3, 0
2000b43c:	3063ffff 	addik	r3, r3, -1
2000b440:	84651800 	and	r3, r5, r3
2000b444:	10641800 	addk	r3, r4, r3
2000b448:	e0630000 	lbui	r3, r3, 0
2000b44c:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000b450:	e8730014 	lwi	r3, r19, 20
2000b454:	e883000c 	lwi	r4, r3, 12
2000b458:	e8730018 	lwi	r3, r19, 24
2000b45c:	64630402 	bslli	r3, r3, 2
2000b460:	10641800 	addk	r3, r4, r3
2000b464:	e8830000 	lwi	r4, r3, 0
2000b468:	30840001 	addik	r4, r4, 1
2000b46c:	f8830000 	swi	r4, r3, 0
    return value;
2000b470:	e0730004 	lbui	r3, r19, 4
2000b474:	90630060 	sext8	r3, r3
}
2000b478:	10330000 	addk	r1, r19, r0
2000b47c:	ea610008 	lwi	r19, r1, 8
2000b480:	ea81000c 	lwi	r20, r1, 12
2000b484:	30210010 	addik	r1, r1, 16
2000b488:	b60f0008 	rtsd	r15, 8
2000b48c:	80000000 	or	r0, r0, r0

2000b490 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000b490:	3021fff4 	addik	r1, r1, -12
2000b494:	fa610004 	swi	r19, r1, 4
2000b498:	fa810008 	swi	r20, r1, 8
2000b49c:	12610000 	addk	r19, r1, r0
2000b4a0:	96808000 	mfs	r20, rpc
2000b4a4:	b000dfff 	imm	-8193
2000b4a8:	329464bc 	addik	r20, r20, 25788
2000b4ac:	f8b30010 	swi	r5, r19, 16
2000b4b0:	10660000 	addk	r3, r6, r0
2000b4b4:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000b4b8:	e8730010 	lwi	r3, r19, 16
2000b4bc:	e8830004 	lwi	r4, r3, 4
2000b4c0:	e8730010 	lwi	r3, r19, 16
2000b4c4:	e8630010 	lwi	r3, r3, 16
2000b4c8:	e8a30000 	lwi	r5, r3, 0
2000b4cc:	e8730010 	lwi	r3, r19, 16
2000b4d0:	e8630000 	lwi	r3, r3, 0
2000b4d4:	3063ffff 	addik	r3, r3, -1
2000b4d8:	84651800 	and	r3, r5, r3
2000b4dc:	10641800 	addk	r3, r4, r3
2000b4e0:	e0930014 	lbui	r4, r19, 20
2000b4e4:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2000b4e8:	e8730010 	lwi	r3, r19, 16
2000b4ec:	e8630010 	lwi	r3, r3, 16
2000b4f0:	e8830000 	lwi	r4, r3, 0
2000b4f4:	30840001 	addik	r4, r4, 1
2000b4f8:	f8830000 	swi	r4, r3, 0
}
2000b4fc:	10330000 	addk	r1, r19, r0
2000b500:	ea610004 	lwi	r19, r1, 4
2000b504:	ea810008 	lwi	r20, r1, 8
2000b508:	3021000c 	addik	r1, r1, 12
2000b50c:	b60f0008 	rtsd	r15, 8
2000b510:	80000000 	or	r0, r0, r0

2000b514 <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000b514:	3021fff4 	addik	r1, r1, -12
2000b518:	fa610004 	swi	r19, r1, 4
2000b51c:	fa810008 	swi	r20, r1, 8
2000b520:	12610000 	addk	r19, r1, r0
2000b524:	96808000 	mfs	r20, rpc
2000b528:	b000dfff 	imm	-8193
2000b52c:	32946438 	addik	r20, r20, 25656
2000b530:	f8b30010 	swi	r5, r19, 16
2000b534:	f8d30014 	swi	r6, r19, 20
2000b538:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000b53c:	e8730010 	lwi	r3, r19, 16
2000b540:	e8630010 	lwi	r3, r3, 16
2000b544:	e8830000 	lwi	r4, r3, 0
2000b548:	e8730010 	lwi	r3, r19, 16
2000b54c:	e8a3000c 	lwi	r5, r3, 12
2000b550:	e8730014 	lwi	r3, r19, 20
2000b554:	64630402 	bslli	r3, r3, 2
2000b558:	10651800 	addk	r3, r5, r3
2000b55c:	e8630000 	lwi	r3, r3, 0
2000b560:	14a32000 	rsubk	r5, r3, r4
2000b564:	30600001 	addik	r3, r0, 1
2000b568:	e8930018 	lwi	r4, r19, 24
2000b56c:	16442803 	cmpu	r18, r4, r5
2000b570:	bcb20008 	bgei	r18, 8		// 2000b578
2000b574:	10600000 	addk	r3, r0, r0
2000b578:	a46300ff 	andi	r3, r3, 255
}
2000b57c:	10330000 	addk	r1, r19, r0
2000b580:	ea610004 	lwi	r19, r1, 4
2000b584:	ea810008 	lwi	r20, r1, 8
2000b588:	3021000c 	addik	r1, r1, 12
2000b58c:	b60f0008 	rtsd	r15, 8
2000b590:	80000000 	or	r0, r0, r0

2000b594 <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000b594:	3021fff4 	addik	r1, r1, -12
2000b598:	fa610004 	swi	r19, r1, 4
2000b59c:	fa810008 	swi	r20, r1, 8
2000b5a0:	12610000 	addk	r19, r1, r0
2000b5a4:	96808000 	mfs	r20, rpc
2000b5a8:	b000dfff 	imm	-8193
2000b5ac:	329463b8 	addik	r20, r20, 25528
2000b5b0:	f8b30010 	swi	r5, r19, 16
2000b5b4:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000b5b8:	e8730010 	lwi	r3, r19, 16
2000b5bc:	e8630010 	lwi	r3, r3, 16
2000b5c0:	e8830000 	lwi	r4, r3, 0
2000b5c4:	e8730010 	lwi	r3, r19, 16
2000b5c8:	e8a3000c 	lwi	r5, r3, 12
2000b5cc:	e8730014 	lwi	r3, r19, 20
2000b5d0:	64630402 	bslli	r3, r3, 2
2000b5d4:	10651800 	addk	r3, r5, r3
2000b5d8:	e8630000 	lwi	r3, r3, 0
2000b5dc:	14632000 	rsubk	r3, r3, r4
}
2000b5e0:	10330000 	addk	r1, r19, r0
2000b5e4:	ea610004 	lwi	r19, r1, 4
2000b5e8:	ea810008 	lwi	r20, r1, 8
2000b5ec:	3021000c 	addik	r1, r1, 12
2000b5f0:	b60f0008 	rtsd	r15, 8
2000b5f4:	80000000 	or	r0, r0, r0

2000b5f8 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000b5f8:	3021fff0 	addik	r1, r1, -16
2000b5fc:	fa610008 	swi	r19, r1, 8
2000b600:	fa81000c 	swi	r20, r1, 12
2000b604:	12610000 	addk	r19, r1, r0
2000b608:	96808000 	mfs	r20, rpc
2000b60c:	b000dfff 	imm	-8193
2000b610:	32946354 	addik	r20, r20, 25428
2000b614:	f8b30014 	swi	r5, r19, 20
2000b618:	f8d30018 	swi	r6, r19, 24
2000b61c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000b620:	f8130004 	swi	r0, r19, 4
2000b624:	b800005c 	bri	92		// 2000b680
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000b628:	e8730014 	lwi	r3, r19, 20
2000b62c:	e8830000 	lwi	r4, r3, 0
2000b630:	e8730014 	lwi	r3, r19, 20
2000b634:	e8a3000c 	lwi	r5, r3, 12
2000b638:	e8730004 	lwi	r3, r19, 4
2000b63c:	64630402 	bslli	r3, r3, 2
2000b640:	10651800 	addk	r3, r5, r3
2000b644:	e8a30000 	lwi	r5, r3, 0
2000b648:	e8730014 	lwi	r3, r19, 20
2000b64c:	e8630010 	lwi	r3, r3, 16
2000b650:	e8630000 	lwi	r3, r3, 0
2000b654:	14632800 	rsubk	r3, r3, r5
2000b658:	10641800 	addk	r3, r4, r3
2000b65c:	30830001 	addik	r4, r3, 1
2000b660:	e873001c 	lwi	r3, r19, 28
2000b664:	16441803 	cmpu	r18, r4, r3
2000b668:	bc52000c 	blti	r18, 12		// 2000b674
            return 0;
2000b66c:	10600000 	addk	r3, r0, r0
2000b670:	b8000024 	bri	36		// 2000b694
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000b674:	e8730004 	lwi	r3, r19, 4
2000b678:	30630001 	addik	r3, r3, 1
2000b67c:	f8730004 	swi	r3, r19, 4
2000b680:	e8930004 	lwi	r4, r19, 4
2000b684:	e8730018 	lwi	r3, r19, 24
2000b688:	16432003 	cmpu	r18, r3, r4
2000b68c:	bc52ff9c 	blti	r18, -100		// 2000b628
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000b690:	30600001 	addik	r3, r0, 1
}
2000b694:	10330000 	addk	r1, r19, r0
2000b698:	ea610008 	lwi	r19, r1, 8
2000b69c:	ea81000c 	lwi	r20, r1, 12
2000b6a0:	30210010 	addik	r1, r1, 16
2000b6a4:	b60f0008 	rtsd	r15, 8
2000b6a8:	80000000 	or	r0, r0, r0

2000b6ac <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000b6ac:	3021ffe8 	addik	r1, r1, -24
2000b6b0:	fa610010 	swi	r19, r1, 16
2000b6b4:	fa810014 	swi	r20, r1, 20
2000b6b8:	12610000 	addk	r19, r1, r0
2000b6bc:	96808000 	mfs	r20, rpc
2000b6c0:	b000dfff 	imm	-8193
2000b6c4:	329462a0 	addik	r20, r20, 25248
2000b6c8:	f8b3001c 	swi	r5, r19, 28
2000b6cc:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000b6d0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000b6d4:	f8130004 	swi	r0, r19, 4
2000b6d8:	b8000054 	bri	84		// 2000b72c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000b6dc:	e873001c 	lwi	r3, r19, 28
2000b6e0:	e8630010 	lwi	r3, r3, 16
2000b6e4:	e8830000 	lwi	r4, r3, 0
2000b6e8:	e873001c 	lwi	r3, r19, 28
2000b6ec:	e8a3000c 	lwi	r5, r3, 12
2000b6f0:	e8730004 	lwi	r3, r19, 4
2000b6f4:	64630402 	bslli	r3, r3, 2
2000b6f8:	10651800 	addk	r3, r5, r3
2000b6fc:	e8630000 	lwi	r3, r3, 0
2000b700:	14632000 	rsubk	r3, r3, r4
2000b704:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000b708:	e8930008 	lwi	r4, r19, 8
2000b70c:	e873000c 	lwi	r3, r19, 12
2000b710:	16441803 	cmpu	r18, r4, r3
2000b714:	bcb20008 	bgei	r18, 8		// 2000b71c
2000b718:	10640000 	addk	r3, r4, r0
2000b71c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000b720:	e8730004 	lwi	r3, r19, 4
2000b724:	30630001 	addik	r3, r3, 1
2000b728:	f8730004 	swi	r3, r19, 4
2000b72c:	e8930004 	lwi	r4, r19, 4
2000b730:	e8730020 	lwi	r3, r19, 32
2000b734:	16432003 	cmpu	r18, r3, r4
2000b738:	bc52ffa4 	blti	r18, -92		// 2000b6dc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000b73c:	e873001c 	lwi	r3, r19, 28
2000b740:	e8830000 	lwi	r4, r3, 0
2000b744:	e8730008 	lwi	r3, r19, 8
2000b748:	14632000 	rsubk	r3, r3, r4
}
2000b74c:	10330000 	addk	r1, r19, r0
2000b750:	ea610010 	lwi	r19, r1, 16
2000b754:	ea810014 	lwi	r20, r1, 20
2000b758:	30210018 	addik	r1, r1, 24
2000b75c:	b60f0008 	rtsd	r15, 8
2000b760:	80000000 	or	r0, r0, r0

2000b764 <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000b764:	3021fff0 	addik	r1, r1, -16
2000b768:	fa610008 	swi	r19, r1, 8
2000b76c:	fa81000c 	swi	r20, r1, 12
2000b770:	12610000 	addk	r19, r1, r0
2000b774:	96808000 	mfs	r20, rpc
2000b778:	b000dfff 	imm	-8193
2000b77c:	329461e8 	addik	r20, r20, 25064
2000b780:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2000b784:	e8730014 	lwi	r3, r19, 20
2000b788:	e8630010 	lwi	r3, r3, 16
2000b78c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000b790:	f8130004 	swi	r0, r19, 4
2000b794:	b8000028 	bri	40		// 2000b7bc
        fifo->read_inds[i] = 0;
2000b798:	e8730014 	lwi	r3, r19, 20
2000b79c:	e883000c 	lwi	r4, r3, 12
2000b7a0:	e8730004 	lwi	r3, r19, 4
2000b7a4:	64630402 	bslli	r3, r3, 2
2000b7a8:	10641800 	addk	r3, r4, r3
2000b7ac:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000b7b0:	e8730004 	lwi	r3, r19, 4
2000b7b4:	30630001 	addik	r3, r3, 1
2000b7b8:	f8730004 	swi	r3, r19, 4
2000b7bc:	e8730014 	lwi	r3, r19, 20
2000b7c0:	e8830008 	lwi	r4, r3, 8
2000b7c4:	e8730004 	lwi	r3, r19, 4
2000b7c8:	16441803 	cmpu	r18, r4, r3
2000b7cc:	bc52ffcc 	blti	r18, -52		// 2000b798
        fifo->read_inds[i] = 0;
    }
}
2000b7d0:	10330000 	addk	r1, r19, r0
2000b7d4:	ea610008 	lwi	r19, r1, 8
2000b7d8:	ea81000c 	lwi	r20, r1, 12
2000b7dc:	30210010 	addik	r1, r1, 16
2000b7e0:	b60f0008 	rtsd	r15, 8
2000b7e4:	80000000 	or	r0, r0, r0

2000b7e8 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000b7e8:	3021fff0 	addik	r1, r1, -16
2000b7ec:	fa610008 	swi	r19, r1, 8
2000b7f0:	fa81000c 	swi	r20, r1, 12
2000b7f4:	12610000 	addk	r19, r1, r0
2000b7f8:	96808000 	mfs	r20, rpc
2000b7fc:	b000dfff 	imm	-8193
2000b800:	32946164 	addik	r20, r20, 24932
2000b804:	f8b30014 	swi	r5, r19, 20
2000b808:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000b80c:	e8730014 	lwi	r3, r19, 20
2000b810:	e8830004 	lwi	r4, r3, 4
2000b814:	e8730014 	lwi	r3, r19, 20
2000b818:	e8a3000c 	lwi	r5, r3, 12
2000b81c:	e8730018 	lwi	r3, r19, 24
2000b820:	64630402 	bslli	r3, r3, 2
2000b824:	10651800 	addk	r3, r5, r3
2000b828:	e8a30000 	lwi	r5, r3, 0
2000b82c:	e8730014 	lwi	r3, r19, 20
2000b830:	e8630000 	lwi	r3, r3, 0
2000b834:	3063ffff 	addik	r3, r3, -1
2000b838:	84651800 	and	r3, r5, r3
2000b83c:	10631800 	addk	r3, r3, r3
2000b840:	10641800 	addk	r3, r4, r3
2000b844:	e4630000 	lhui	r3, r3, 0
2000b848:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000b84c:	e8730014 	lwi	r3, r19, 20
2000b850:	e883000c 	lwi	r4, r3, 12
2000b854:	e8730018 	lwi	r3, r19, 24
2000b858:	64630402 	bslli	r3, r3, 2
2000b85c:	10641800 	addk	r3, r4, r3
2000b860:	e8830000 	lwi	r4, r3, 0
2000b864:	30840001 	addik	r4, r4, 1
2000b868:	f8830000 	swi	r4, r3, 0
    return value;
2000b86c:	e4730004 	lhui	r3, r19, 4
2000b870:	90630061 	sext16	r3, r3
}
2000b874:	10330000 	addk	r1, r19, r0
2000b878:	ea610008 	lwi	r19, r1, 8
2000b87c:	ea81000c 	lwi	r20, r1, 12
2000b880:	30210010 	addik	r1, r1, 16
2000b884:	b60f0008 	rtsd	r15, 8
2000b888:	80000000 	or	r0, r0, r0

2000b88c <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000b88c:	3021fff4 	addik	r1, r1, -12
2000b890:	fa610004 	swi	r19, r1, 4
2000b894:	fa810008 	swi	r20, r1, 8
2000b898:	12610000 	addk	r19, r1, r0
2000b89c:	96808000 	mfs	r20, rpc
2000b8a0:	b000dfff 	imm	-8193
2000b8a4:	329460c0 	addik	r20, r20, 24768
2000b8a8:	f8b30010 	swi	r5, r19, 16
2000b8ac:	10660000 	addk	r3, r6, r0
2000b8b0:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000b8b4:	e8730010 	lwi	r3, r19, 16
2000b8b8:	e8830004 	lwi	r4, r3, 4
2000b8bc:	e8730010 	lwi	r3, r19, 16
2000b8c0:	e8630010 	lwi	r3, r3, 16
2000b8c4:	e8a30000 	lwi	r5, r3, 0
2000b8c8:	e8730010 	lwi	r3, r19, 16
2000b8cc:	e8630000 	lwi	r3, r3, 0
2000b8d0:	3063ffff 	addik	r3, r3, -1
2000b8d4:	84651800 	and	r3, r5, r3
2000b8d8:	10631800 	addk	r3, r3, r3
2000b8dc:	10641800 	addk	r3, r4, r3
2000b8e0:	e4930014 	lhui	r4, r19, 20
2000b8e4:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2000b8e8:	e8730010 	lwi	r3, r19, 16
2000b8ec:	e8630010 	lwi	r3, r3, 16
2000b8f0:	e8830000 	lwi	r4, r3, 0
2000b8f4:	30840001 	addik	r4, r4, 1
2000b8f8:	f8830000 	swi	r4, r3, 0
}
2000b8fc:	10330000 	addk	r1, r19, r0
2000b900:	ea610004 	lwi	r19, r1, 4
2000b904:	ea810008 	lwi	r20, r1, 8
2000b908:	3021000c 	addik	r1, r1, 12
2000b90c:	b60f0008 	rtsd	r15, 8
2000b910:	80000000 	or	r0, r0, r0

2000b914 <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000b914:	3021fff4 	addik	r1, r1, -12
2000b918:	fa610004 	swi	r19, r1, 4
2000b91c:	fa810008 	swi	r20, r1, 8
2000b920:	12610000 	addk	r19, r1, r0
2000b924:	96808000 	mfs	r20, rpc
2000b928:	b000dfff 	imm	-8193
2000b92c:	32946038 	addik	r20, r20, 24632
2000b930:	f8b30010 	swi	r5, r19, 16
2000b934:	f8d30014 	swi	r6, r19, 20
2000b938:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000b93c:	e8730010 	lwi	r3, r19, 16
2000b940:	e8630010 	lwi	r3, r3, 16
2000b944:	e8830000 	lwi	r4, r3, 0
2000b948:	e8730010 	lwi	r3, r19, 16
2000b94c:	e8a3000c 	lwi	r5, r3, 12
2000b950:	e8730014 	lwi	r3, r19, 20
2000b954:	64630402 	bslli	r3, r3, 2
2000b958:	10651800 	addk	r3, r5, r3
2000b95c:	e8630000 	lwi	r3, r3, 0
2000b960:	14a32000 	rsubk	r5, r3, r4
2000b964:	30600001 	addik	r3, r0, 1
2000b968:	e8930018 	lwi	r4, r19, 24
2000b96c:	16442803 	cmpu	r18, r4, r5
2000b970:	bcb20008 	bgei	r18, 8		// 2000b978
2000b974:	10600000 	addk	r3, r0, r0
2000b978:	a46300ff 	andi	r3, r3, 255
}
2000b97c:	10330000 	addk	r1, r19, r0
2000b980:	ea610004 	lwi	r19, r1, 4
2000b984:	ea810008 	lwi	r20, r1, 8
2000b988:	3021000c 	addik	r1, r1, 12
2000b98c:	b60f0008 	rtsd	r15, 8
2000b990:	80000000 	or	r0, r0, r0

2000b994 <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000b994:	3021fff4 	addik	r1, r1, -12
2000b998:	fa610004 	swi	r19, r1, 4
2000b99c:	fa810008 	swi	r20, r1, 8
2000b9a0:	12610000 	addk	r19, r1, r0
2000b9a4:	96808000 	mfs	r20, rpc
2000b9a8:	b000dfff 	imm	-8193
2000b9ac:	32945fb8 	addik	r20, r20, 24504
2000b9b0:	f8b30010 	swi	r5, r19, 16
2000b9b4:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000b9b8:	e8730010 	lwi	r3, r19, 16
2000b9bc:	e8630010 	lwi	r3, r3, 16
2000b9c0:	e8830000 	lwi	r4, r3, 0
2000b9c4:	e8730010 	lwi	r3, r19, 16
2000b9c8:	e8a3000c 	lwi	r5, r3, 12
2000b9cc:	e8730014 	lwi	r3, r19, 20
2000b9d0:	64630402 	bslli	r3, r3, 2
2000b9d4:	10651800 	addk	r3, r5, r3
2000b9d8:	e8630000 	lwi	r3, r3, 0
2000b9dc:	14632000 	rsubk	r3, r3, r4
}
2000b9e0:	10330000 	addk	r1, r19, r0
2000b9e4:	ea610004 	lwi	r19, r1, 4
2000b9e8:	ea810008 	lwi	r20, r1, 8
2000b9ec:	3021000c 	addik	r1, r1, 12
2000b9f0:	b60f0008 	rtsd	r15, 8
2000b9f4:	80000000 	or	r0, r0, r0

2000b9f8 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000b9f8:	3021fff0 	addik	r1, r1, -16
2000b9fc:	fa610008 	swi	r19, r1, 8
2000ba00:	fa81000c 	swi	r20, r1, 12
2000ba04:	12610000 	addk	r19, r1, r0
2000ba08:	96808000 	mfs	r20, rpc
2000ba0c:	b000dfff 	imm	-8193
2000ba10:	32945f54 	addik	r20, r20, 24404
2000ba14:	f8b30014 	swi	r5, r19, 20
2000ba18:	f8d30018 	swi	r6, r19, 24
2000ba1c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000ba20:	f8130004 	swi	r0, r19, 4
2000ba24:	b800005c 	bri	92		// 2000ba80
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000ba28:	e8730014 	lwi	r3, r19, 20
2000ba2c:	e8830000 	lwi	r4, r3, 0
2000ba30:	e8730014 	lwi	r3, r19, 20
2000ba34:	e8a3000c 	lwi	r5, r3, 12
2000ba38:	e8730004 	lwi	r3, r19, 4
2000ba3c:	64630402 	bslli	r3, r3, 2
2000ba40:	10651800 	addk	r3, r5, r3
2000ba44:	e8a30000 	lwi	r5, r3, 0
2000ba48:	e8730014 	lwi	r3, r19, 20
2000ba4c:	e8630010 	lwi	r3, r3, 16
2000ba50:	e8630000 	lwi	r3, r3, 0
2000ba54:	14632800 	rsubk	r3, r3, r5
2000ba58:	10641800 	addk	r3, r4, r3
2000ba5c:	30830001 	addik	r4, r3, 1
2000ba60:	e873001c 	lwi	r3, r19, 28
2000ba64:	16441803 	cmpu	r18, r4, r3
2000ba68:	bc52000c 	blti	r18, 12		// 2000ba74
            return 0;
2000ba6c:	10600000 	addk	r3, r0, r0
2000ba70:	b8000024 	bri	36		// 2000ba94
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000ba74:	e8730004 	lwi	r3, r19, 4
2000ba78:	30630001 	addik	r3, r3, 1
2000ba7c:	f8730004 	swi	r3, r19, 4
2000ba80:	e8930004 	lwi	r4, r19, 4
2000ba84:	e8730018 	lwi	r3, r19, 24
2000ba88:	16432003 	cmpu	r18, r3, r4
2000ba8c:	bc52ff9c 	blti	r18, -100		// 2000ba28
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000ba90:	30600001 	addik	r3, r0, 1
}
2000ba94:	10330000 	addk	r1, r19, r0
2000ba98:	ea610008 	lwi	r19, r1, 8
2000ba9c:	ea81000c 	lwi	r20, r1, 12
2000baa0:	30210010 	addik	r1, r1, 16
2000baa4:	b60f0008 	rtsd	r15, 8
2000baa8:	80000000 	or	r0, r0, r0

2000baac <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000baac:	3021ffe8 	addik	r1, r1, -24
2000bab0:	fa610010 	swi	r19, r1, 16
2000bab4:	fa810014 	swi	r20, r1, 20
2000bab8:	12610000 	addk	r19, r1, r0
2000babc:	96808000 	mfs	r20, rpc
2000bac0:	b000dfff 	imm	-8193
2000bac4:	32945ea0 	addik	r20, r20, 24224
2000bac8:	f8b3001c 	swi	r5, r19, 28
2000bacc:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000bad0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000bad4:	f8130004 	swi	r0, r19, 4
2000bad8:	b8000054 	bri	84		// 2000bb2c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000badc:	e873001c 	lwi	r3, r19, 28
2000bae0:	e8630010 	lwi	r3, r3, 16
2000bae4:	e8830000 	lwi	r4, r3, 0
2000bae8:	e873001c 	lwi	r3, r19, 28
2000baec:	e8a3000c 	lwi	r5, r3, 12
2000baf0:	e8730004 	lwi	r3, r19, 4
2000baf4:	64630402 	bslli	r3, r3, 2
2000baf8:	10651800 	addk	r3, r5, r3
2000bafc:	e8630000 	lwi	r3, r3, 0
2000bb00:	14632000 	rsubk	r3, r3, r4
2000bb04:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000bb08:	e8930008 	lwi	r4, r19, 8
2000bb0c:	e873000c 	lwi	r3, r19, 12
2000bb10:	16441803 	cmpu	r18, r4, r3
2000bb14:	bcb20008 	bgei	r18, 8		// 2000bb1c
2000bb18:	10640000 	addk	r3, r4, r0
2000bb1c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000bb20:	e8730004 	lwi	r3, r19, 4
2000bb24:	30630001 	addik	r3, r3, 1
2000bb28:	f8730004 	swi	r3, r19, 4
2000bb2c:	e8930004 	lwi	r4, r19, 4
2000bb30:	e8730020 	lwi	r3, r19, 32
2000bb34:	16432003 	cmpu	r18, r3, r4
2000bb38:	bc52ffa4 	blti	r18, -92		// 2000badc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000bb3c:	e873001c 	lwi	r3, r19, 28
2000bb40:	e8830000 	lwi	r4, r3, 0
2000bb44:	e8730008 	lwi	r3, r19, 8
2000bb48:	14632000 	rsubk	r3, r3, r4
}
2000bb4c:	10330000 	addk	r1, r19, r0
2000bb50:	ea610010 	lwi	r19, r1, 16
2000bb54:	ea810014 	lwi	r20, r1, 20
2000bb58:	30210018 	addik	r1, r1, 24
2000bb5c:	b60f0008 	rtsd	r15, 8
2000bb60:	80000000 	or	r0, r0, r0

2000bb64 <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000bb64:	3021fff0 	addik	r1, r1, -16
2000bb68:	fa610008 	swi	r19, r1, 8
2000bb6c:	fa81000c 	swi	r20, r1, 12
2000bb70:	12610000 	addk	r19, r1, r0
2000bb74:	96808000 	mfs	r20, rpc
2000bb78:	b000dfff 	imm	-8193
2000bb7c:	32945de8 	addik	r20, r20, 24040
2000bb80:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2000bb84:	e8730014 	lwi	r3, r19, 20
2000bb88:	e8630010 	lwi	r3, r3, 16
2000bb8c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000bb90:	f8130004 	swi	r0, r19, 4
2000bb94:	b8000028 	bri	40		// 2000bbbc
        fifo->read_inds[i] = 0;
2000bb98:	e8730014 	lwi	r3, r19, 20
2000bb9c:	e883000c 	lwi	r4, r3, 12
2000bba0:	e8730004 	lwi	r3, r19, 4
2000bba4:	64630402 	bslli	r3, r3, 2
2000bba8:	10641800 	addk	r3, r4, r3
2000bbac:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000bbb0:	e8730004 	lwi	r3, r19, 4
2000bbb4:	30630001 	addik	r3, r3, 1
2000bbb8:	f8730004 	swi	r3, r19, 4
2000bbbc:	e8730014 	lwi	r3, r19, 20
2000bbc0:	e8830008 	lwi	r4, r3, 8
2000bbc4:	e8730004 	lwi	r3, r19, 4
2000bbc8:	16441803 	cmpu	r18, r4, r3
2000bbcc:	bc52ffcc 	blti	r18, -52		// 2000bb98
        fifo->read_inds[i] = 0;
    }
}
2000bbd0:	10330000 	addk	r1, r19, r0
2000bbd4:	ea610008 	lwi	r19, r1, 8
2000bbd8:	ea81000c 	lwi	r20, r1, 12
2000bbdc:	30210010 	addik	r1, r1, 16
2000bbe0:	b60f0008 	rtsd	r15, 8
2000bbe4:	80000000 	or	r0, r0, r0

2000bbe8 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000bbe8:	3021fff0 	addik	r1, r1, -16
2000bbec:	fa610008 	swi	r19, r1, 8
2000bbf0:	fa81000c 	swi	r20, r1, 12
2000bbf4:	12610000 	addk	r19, r1, r0
2000bbf8:	96808000 	mfs	r20, rpc
2000bbfc:	b000dfff 	imm	-8193
2000bc00:	32945d64 	addik	r20, r20, 23908
2000bc04:	f8b30014 	swi	r5, r19, 20
2000bc08:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000bc0c:	e8730014 	lwi	r3, r19, 20
2000bc10:	e8830004 	lwi	r4, r3, 4
2000bc14:	e8730014 	lwi	r3, r19, 20
2000bc18:	e8a3000c 	lwi	r5, r3, 12
2000bc1c:	e8730018 	lwi	r3, r19, 24
2000bc20:	64630402 	bslli	r3, r3, 2
2000bc24:	10651800 	addk	r3, r5, r3
2000bc28:	e8a30000 	lwi	r5, r3, 0
2000bc2c:	e8730014 	lwi	r3, r19, 20
2000bc30:	e8630000 	lwi	r3, r3, 0
2000bc34:	3063ffff 	addik	r3, r3, -1
2000bc38:	84651800 	and	r3, r5, r3
2000bc3c:	64630402 	bslli	r3, r3, 2
2000bc40:	10641800 	addk	r3, r4, r3
2000bc44:	e8630000 	lwi	r3, r3, 0
2000bc48:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000bc4c:	e8730014 	lwi	r3, r19, 20
2000bc50:	e883000c 	lwi	r4, r3, 12
2000bc54:	e8730018 	lwi	r3, r19, 24
2000bc58:	64630402 	bslli	r3, r3, 2
2000bc5c:	10641800 	addk	r3, r4, r3
2000bc60:	e8830000 	lwi	r4, r3, 0
2000bc64:	30840001 	addik	r4, r4, 1
2000bc68:	f8830000 	swi	r4, r3, 0
    return value;
2000bc6c:	e8730004 	lwi	r3, r19, 4
}
2000bc70:	10330000 	addk	r1, r19, r0
2000bc74:	ea610008 	lwi	r19, r1, 8
2000bc78:	ea81000c 	lwi	r20, r1, 12
2000bc7c:	30210010 	addik	r1, r1, 16
2000bc80:	b60f0008 	rtsd	r15, 8
2000bc84:	80000000 	or	r0, r0, r0

2000bc88 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000bc88:	3021fff4 	addik	r1, r1, -12
2000bc8c:	fa610004 	swi	r19, r1, 4
2000bc90:	fa810008 	swi	r20, r1, 8
2000bc94:	12610000 	addk	r19, r1, r0
2000bc98:	96808000 	mfs	r20, rpc
2000bc9c:	b000dfff 	imm	-8193
2000bca0:	32945cc4 	addik	r20, r20, 23748
2000bca4:	f8b30010 	swi	r5, r19, 16
2000bca8:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000bcac:	e8730010 	lwi	r3, r19, 16
2000bcb0:	e8830004 	lwi	r4, r3, 4
2000bcb4:	e8730010 	lwi	r3, r19, 16
2000bcb8:	e8630010 	lwi	r3, r3, 16
2000bcbc:	e8a30000 	lwi	r5, r3, 0
2000bcc0:	e8730010 	lwi	r3, r19, 16
2000bcc4:	e8630000 	lwi	r3, r3, 0
2000bcc8:	3063ffff 	addik	r3, r3, -1
2000bccc:	84651800 	and	r3, r5, r3
2000bcd0:	64630402 	bslli	r3, r3, 2
2000bcd4:	10641800 	addk	r3, r4, r3
2000bcd8:	e8930014 	lwi	r4, r19, 20
2000bcdc:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2000bce0:	e8730010 	lwi	r3, r19, 16
2000bce4:	e8630010 	lwi	r3, r3, 16
2000bce8:	e8830000 	lwi	r4, r3, 0
2000bcec:	30840001 	addik	r4, r4, 1
2000bcf0:	f8830000 	swi	r4, r3, 0
}
2000bcf4:	10330000 	addk	r1, r19, r0
2000bcf8:	ea610004 	lwi	r19, r1, 4
2000bcfc:	ea810008 	lwi	r20, r1, 8
2000bd00:	3021000c 	addik	r1, r1, 12
2000bd04:	b60f0008 	rtsd	r15, 8
2000bd08:	80000000 	or	r0, r0, r0

2000bd0c <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000bd0c:	3021fff4 	addik	r1, r1, -12
2000bd10:	fa610004 	swi	r19, r1, 4
2000bd14:	fa810008 	swi	r20, r1, 8
2000bd18:	12610000 	addk	r19, r1, r0
2000bd1c:	96808000 	mfs	r20, rpc
2000bd20:	b000dfff 	imm	-8193
2000bd24:	32945c40 	addik	r20, r20, 23616
2000bd28:	f8b30010 	swi	r5, r19, 16
2000bd2c:	f8d30014 	swi	r6, r19, 20
2000bd30:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000bd34:	e8730010 	lwi	r3, r19, 16
2000bd38:	e8630010 	lwi	r3, r3, 16
2000bd3c:	e8830000 	lwi	r4, r3, 0
2000bd40:	e8730010 	lwi	r3, r19, 16
2000bd44:	e8a3000c 	lwi	r5, r3, 12
2000bd48:	e8730014 	lwi	r3, r19, 20
2000bd4c:	64630402 	bslli	r3, r3, 2
2000bd50:	10651800 	addk	r3, r5, r3
2000bd54:	e8630000 	lwi	r3, r3, 0
2000bd58:	14a32000 	rsubk	r5, r3, r4
2000bd5c:	30600001 	addik	r3, r0, 1
2000bd60:	e8930018 	lwi	r4, r19, 24
2000bd64:	16442803 	cmpu	r18, r4, r5
2000bd68:	bcb20008 	bgei	r18, 8		// 2000bd70
2000bd6c:	10600000 	addk	r3, r0, r0
2000bd70:	a46300ff 	andi	r3, r3, 255
}
2000bd74:	10330000 	addk	r1, r19, r0
2000bd78:	ea610004 	lwi	r19, r1, 4
2000bd7c:	ea810008 	lwi	r20, r1, 8
2000bd80:	3021000c 	addik	r1, r1, 12
2000bd84:	b60f0008 	rtsd	r15, 8
2000bd88:	80000000 	or	r0, r0, r0

2000bd8c <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000bd8c:	3021fff4 	addik	r1, r1, -12
2000bd90:	fa610004 	swi	r19, r1, 4
2000bd94:	fa810008 	swi	r20, r1, 8
2000bd98:	12610000 	addk	r19, r1, r0
2000bd9c:	96808000 	mfs	r20, rpc
2000bda0:	b000dfff 	imm	-8193
2000bda4:	32945bc0 	addik	r20, r20, 23488
2000bda8:	f8b30010 	swi	r5, r19, 16
2000bdac:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000bdb0:	e8730010 	lwi	r3, r19, 16
2000bdb4:	e8630010 	lwi	r3, r3, 16
2000bdb8:	e8830000 	lwi	r4, r3, 0
2000bdbc:	e8730010 	lwi	r3, r19, 16
2000bdc0:	e8a3000c 	lwi	r5, r3, 12
2000bdc4:	e8730014 	lwi	r3, r19, 20
2000bdc8:	64630402 	bslli	r3, r3, 2
2000bdcc:	10651800 	addk	r3, r5, r3
2000bdd0:	e8630000 	lwi	r3, r3, 0
2000bdd4:	14632000 	rsubk	r3, r3, r4
}
2000bdd8:	10330000 	addk	r1, r19, r0
2000bddc:	ea610004 	lwi	r19, r1, 4
2000bde0:	ea810008 	lwi	r20, r1, 8
2000bde4:	3021000c 	addik	r1, r1, 12
2000bde8:	b60f0008 	rtsd	r15, 8
2000bdec:	80000000 	or	r0, r0, r0

2000bdf0 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000bdf0:	3021fff0 	addik	r1, r1, -16
2000bdf4:	fa610008 	swi	r19, r1, 8
2000bdf8:	fa81000c 	swi	r20, r1, 12
2000bdfc:	12610000 	addk	r19, r1, r0
2000be00:	96808000 	mfs	r20, rpc
2000be04:	b000dfff 	imm	-8193
2000be08:	32945b5c 	addik	r20, r20, 23388
2000be0c:	f8b30014 	swi	r5, r19, 20
2000be10:	f8d30018 	swi	r6, r19, 24
2000be14:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000be18:	f8130004 	swi	r0, r19, 4
2000be1c:	b800005c 	bri	92		// 2000be78
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000be20:	e8730014 	lwi	r3, r19, 20
2000be24:	e8830000 	lwi	r4, r3, 0
2000be28:	e8730014 	lwi	r3, r19, 20
2000be2c:	e8a3000c 	lwi	r5, r3, 12
2000be30:	e8730004 	lwi	r3, r19, 4
2000be34:	64630402 	bslli	r3, r3, 2
2000be38:	10651800 	addk	r3, r5, r3
2000be3c:	e8a30000 	lwi	r5, r3, 0
2000be40:	e8730014 	lwi	r3, r19, 20
2000be44:	e8630010 	lwi	r3, r3, 16
2000be48:	e8630000 	lwi	r3, r3, 0
2000be4c:	14632800 	rsubk	r3, r3, r5
2000be50:	10641800 	addk	r3, r4, r3
2000be54:	30830001 	addik	r4, r3, 1
2000be58:	e873001c 	lwi	r3, r19, 28
2000be5c:	16441803 	cmpu	r18, r4, r3
2000be60:	bc52000c 	blti	r18, 12		// 2000be6c
            return 0;
2000be64:	10600000 	addk	r3, r0, r0
2000be68:	b8000024 	bri	36		// 2000be8c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000be6c:	e8730004 	lwi	r3, r19, 4
2000be70:	30630001 	addik	r3, r3, 1
2000be74:	f8730004 	swi	r3, r19, 4
2000be78:	e8930004 	lwi	r4, r19, 4
2000be7c:	e8730018 	lwi	r3, r19, 24
2000be80:	16432003 	cmpu	r18, r3, r4
2000be84:	bc52ff9c 	blti	r18, -100		// 2000be20
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000be88:	30600001 	addik	r3, r0, 1
}
2000be8c:	10330000 	addk	r1, r19, r0
2000be90:	ea610008 	lwi	r19, r1, 8
2000be94:	ea81000c 	lwi	r20, r1, 12
2000be98:	30210010 	addik	r1, r1, 16
2000be9c:	b60f0008 	rtsd	r15, 8
2000bea0:	80000000 	or	r0, r0, r0

2000bea4 <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000bea4:	3021ffe8 	addik	r1, r1, -24
2000bea8:	fa610010 	swi	r19, r1, 16
2000beac:	fa810014 	swi	r20, r1, 20
2000beb0:	12610000 	addk	r19, r1, r0
2000beb4:	96808000 	mfs	r20, rpc
2000beb8:	b000dfff 	imm	-8193
2000bebc:	32945aa8 	addik	r20, r20, 23208
2000bec0:	f8b3001c 	swi	r5, r19, 28
2000bec4:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000bec8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000becc:	f8130004 	swi	r0, r19, 4
2000bed0:	b8000054 	bri	84		// 2000bf24
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000bed4:	e873001c 	lwi	r3, r19, 28
2000bed8:	e8630010 	lwi	r3, r3, 16
2000bedc:	e8830000 	lwi	r4, r3, 0
2000bee0:	e873001c 	lwi	r3, r19, 28
2000bee4:	e8a3000c 	lwi	r5, r3, 12
2000bee8:	e8730004 	lwi	r3, r19, 4
2000beec:	64630402 	bslli	r3, r3, 2
2000bef0:	10651800 	addk	r3, r5, r3
2000bef4:	e8630000 	lwi	r3, r3, 0
2000bef8:	14632000 	rsubk	r3, r3, r4
2000befc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000bf00:	e8930008 	lwi	r4, r19, 8
2000bf04:	e873000c 	lwi	r3, r19, 12
2000bf08:	16441803 	cmpu	r18, r4, r3
2000bf0c:	bcb20008 	bgei	r18, 8		// 2000bf14
2000bf10:	10640000 	addk	r3, r4, r0
2000bf14:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000bf18:	e8730004 	lwi	r3, r19, 4
2000bf1c:	30630001 	addik	r3, r3, 1
2000bf20:	f8730004 	swi	r3, r19, 4
2000bf24:	e8930004 	lwi	r4, r19, 4
2000bf28:	e8730020 	lwi	r3, r19, 32
2000bf2c:	16432003 	cmpu	r18, r3, r4
2000bf30:	bc52ffa4 	blti	r18, -92		// 2000bed4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000bf34:	e873001c 	lwi	r3, r19, 28
2000bf38:	e8830000 	lwi	r4, r3, 0
2000bf3c:	e8730008 	lwi	r3, r19, 8
2000bf40:	14632000 	rsubk	r3, r3, r4
}
2000bf44:	10330000 	addk	r1, r19, r0
2000bf48:	ea610010 	lwi	r19, r1, 16
2000bf4c:	ea810014 	lwi	r20, r1, 20
2000bf50:	30210018 	addik	r1, r1, 24
2000bf54:	b60f0008 	rtsd	r15, 8
2000bf58:	80000000 	or	r0, r0, r0

2000bf5c <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000bf5c:	3021fff0 	addik	r1, r1, -16
2000bf60:	fa610008 	swi	r19, r1, 8
2000bf64:	fa81000c 	swi	r20, r1, 12
2000bf68:	12610000 	addk	r19, r1, r0
2000bf6c:	96808000 	mfs	r20, rpc
2000bf70:	b000dfff 	imm	-8193
2000bf74:	329459f0 	addik	r20, r20, 23024
2000bf78:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2000bf7c:	e8730014 	lwi	r3, r19, 20
2000bf80:	e8630010 	lwi	r3, r3, 16
2000bf84:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000bf88:	f8130004 	swi	r0, r19, 4
2000bf8c:	b8000028 	bri	40		// 2000bfb4
        fifo->read_inds[i] = 0;
2000bf90:	e8730014 	lwi	r3, r19, 20
2000bf94:	e883000c 	lwi	r4, r3, 12
2000bf98:	e8730004 	lwi	r3, r19, 4
2000bf9c:	64630402 	bslli	r3, r3, 2
2000bfa0:	10641800 	addk	r3, r4, r3
2000bfa4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000bfa8:	e8730004 	lwi	r3, r19, 4
2000bfac:	30630001 	addik	r3, r3, 1
2000bfb0:	f8730004 	swi	r3, r19, 4
2000bfb4:	e8730014 	lwi	r3, r19, 20
2000bfb8:	e8830008 	lwi	r4, r3, 8
2000bfbc:	e8730004 	lwi	r3, r19, 4
2000bfc0:	16441803 	cmpu	r18, r4, r3
2000bfc4:	bc52ffcc 	blti	r18, -52		// 2000bf90
        fifo->read_inds[i] = 0;
    }
}
2000bfc8:	10330000 	addk	r1, r19, r0
2000bfcc:	ea610008 	lwi	r19, r1, 8
2000bfd0:	ea81000c 	lwi	r20, r1, 12
2000bfd4:	30210010 	addik	r1, r1, 16
2000bfd8:	b60f0008 	rtsd	r15, 8
2000bfdc:	80000000 	or	r0, r0, r0

2000bfe0 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000bfe0:	3021ffec 	addik	r1, r1, -20
2000bfe4:	fa61000c 	swi	r19, r1, 12
2000bfe8:	fa810010 	swi	r20, r1, 16
2000bfec:	12610000 	addk	r19, r1, r0
2000bff0:	96808000 	mfs	r20, rpc
2000bff4:	b000dfff 	imm	-8193
2000bff8:	3294596c 	addik	r20, r20, 22892
2000bffc:	f8b30018 	swi	r5, r19, 24
2000c000:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000c004:	e8730018 	lwi	r3, r19, 24
2000c008:	e8830004 	lwi	r4, r3, 4
2000c00c:	e8730018 	lwi	r3, r19, 24
2000c010:	e8a3000c 	lwi	r5, r3, 12
2000c014:	e873001c 	lwi	r3, r19, 28
2000c018:	64630402 	bslli	r3, r3, 2
2000c01c:	10651800 	addk	r3, r5, r3
2000c020:	e8a30000 	lwi	r5, r3, 0
2000c024:	e8730018 	lwi	r3, r19, 24
2000c028:	e8630000 	lwi	r3, r3, 0
2000c02c:	3063ffff 	addik	r3, r3, -1
2000c030:	84651800 	and	r3, r5, r3
2000c034:	64630403 	bslli	r3, r3, 3
2000c038:	10641800 	addk	r3, r4, r3
2000c03c:	e8830000 	lwi	r4, r3, 0
2000c040:	e8a30004 	lwi	r5, r3, 4
2000c044:	f8930004 	swi	r4, r19, 4
2000c048:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2000c04c:	e8730018 	lwi	r3, r19, 24
2000c050:	e883000c 	lwi	r4, r3, 12
2000c054:	e873001c 	lwi	r3, r19, 28
2000c058:	64630402 	bslli	r3, r3, 2
2000c05c:	10641800 	addk	r3, r4, r3
2000c060:	e8830000 	lwi	r4, r3, 0
2000c064:	30840001 	addik	r4, r4, 1
2000c068:	f8830000 	swi	r4, r3, 0
    return value;
2000c06c:	e8930004 	lwi	r4, r19, 4
2000c070:	e8b30008 	lwi	r5, r19, 8
}
2000c074:	10640000 	addk	r3, r4, r0
2000c078:	10850000 	addk	r4, r5, r0
2000c07c:	10330000 	addk	r1, r19, r0
2000c080:	ea61000c 	lwi	r19, r1, 12
2000c084:	ea810010 	lwi	r20, r1, 16
2000c088:	30210014 	addik	r1, r1, 20
2000c08c:	b60f0008 	rtsd	r15, 8
2000c090:	80000000 	or	r0, r0, r0

2000c094 <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000c094:	3021fff4 	addik	r1, r1, -12
2000c098:	fa610004 	swi	r19, r1, 4
2000c09c:	fa810008 	swi	r20, r1, 8
2000c0a0:	12610000 	addk	r19, r1, r0
2000c0a4:	96808000 	mfs	r20, rpc
2000c0a8:	b000dfff 	imm	-8193
2000c0ac:	329458b8 	addik	r20, r20, 22712
2000c0b0:	f8b30010 	swi	r5, r19, 16
2000c0b4:	f8d30014 	swi	r6, r19, 20
2000c0b8:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000c0bc:	e8730010 	lwi	r3, r19, 16
2000c0c0:	e8830004 	lwi	r4, r3, 4
2000c0c4:	e8730010 	lwi	r3, r19, 16
2000c0c8:	e8630010 	lwi	r3, r3, 16
2000c0cc:	e8a30000 	lwi	r5, r3, 0
2000c0d0:	e8730010 	lwi	r3, r19, 16
2000c0d4:	e8630000 	lwi	r3, r3, 0
2000c0d8:	3063ffff 	addik	r3, r3, -1
2000c0dc:	84651800 	and	r3, r5, r3
2000c0e0:	64630403 	bslli	r3, r3, 3
2000c0e4:	10641800 	addk	r3, r4, r3
2000c0e8:	e8930014 	lwi	r4, r19, 20
2000c0ec:	e8b30018 	lwi	r5, r19, 24
2000c0f0:	f8830000 	swi	r4, r3, 0
2000c0f4:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2000c0f8:	e8730010 	lwi	r3, r19, 16
2000c0fc:	e8630010 	lwi	r3, r3, 16
2000c100:	e8830000 	lwi	r4, r3, 0
2000c104:	30840001 	addik	r4, r4, 1
2000c108:	f8830000 	swi	r4, r3, 0
}
2000c10c:	10330000 	addk	r1, r19, r0
2000c110:	ea610004 	lwi	r19, r1, 4
2000c114:	ea810008 	lwi	r20, r1, 8
2000c118:	3021000c 	addik	r1, r1, 12
2000c11c:	b60f0008 	rtsd	r15, 8
2000c120:	80000000 	or	r0, r0, r0

2000c124 <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000c124:	3021fff4 	addik	r1, r1, -12
2000c128:	fa610004 	swi	r19, r1, 4
2000c12c:	fa810008 	swi	r20, r1, 8
2000c130:	12610000 	addk	r19, r1, r0
2000c134:	96808000 	mfs	r20, rpc
2000c138:	b000dfff 	imm	-8193
2000c13c:	32945828 	addik	r20, r20, 22568
2000c140:	f8b30010 	swi	r5, r19, 16
2000c144:	f8d30014 	swi	r6, r19, 20
2000c148:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000c14c:	e8730010 	lwi	r3, r19, 16
2000c150:	e8630010 	lwi	r3, r3, 16
2000c154:	e8830000 	lwi	r4, r3, 0
2000c158:	e8730010 	lwi	r3, r19, 16
2000c15c:	e8a3000c 	lwi	r5, r3, 12
2000c160:	e8730014 	lwi	r3, r19, 20
2000c164:	64630402 	bslli	r3, r3, 2
2000c168:	10651800 	addk	r3, r5, r3
2000c16c:	e8630000 	lwi	r3, r3, 0
2000c170:	14a32000 	rsubk	r5, r3, r4
2000c174:	30600001 	addik	r3, r0, 1
2000c178:	e8930018 	lwi	r4, r19, 24
2000c17c:	16442803 	cmpu	r18, r4, r5
2000c180:	bcb20008 	bgei	r18, 8		// 2000c188
2000c184:	10600000 	addk	r3, r0, r0
2000c188:	a46300ff 	andi	r3, r3, 255
}
2000c18c:	10330000 	addk	r1, r19, r0
2000c190:	ea610004 	lwi	r19, r1, 4
2000c194:	ea810008 	lwi	r20, r1, 8
2000c198:	3021000c 	addik	r1, r1, 12
2000c19c:	b60f0008 	rtsd	r15, 8
2000c1a0:	80000000 	or	r0, r0, r0

2000c1a4 <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000c1a4:	3021fff4 	addik	r1, r1, -12
2000c1a8:	fa610004 	swi	r19, r1, 4
2000c1ac:	fa810008 	swi	r20, r1, 8
2000c1b0:	12610000 	addk	r19, r1, r0
2000c1b4:	96808000 	mfs	r20, rpc
2000c1b8:	b000dfff 	imm	-8193
2000c1bc:	329457a8 	addik	r20, r20, 22440
2000c1c0:	f8b30010 	swi	r5, r19, 16
2000c1c4:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000c1c8:	e8730010 	lwi	r3, r19, 16
2000c1cc:	e8630010 	lwi	r3, r3, 16
2000c1d0:	e8830000 	lwi	r4, r3, 0
2000c1d4:	e8730010 	lwi	r3, r19, 16
2000c1d8:	e8a3000c 	lwi	r5, r3, 12
2000c1dc:	e8730014 	lwi	r3, r19, 20
2000c1e0:	64630402 	bslli	r3, r3, 2
2000c1e4:	10651800 	addk	r3, r5, r3
2000c1e8:	e8630000 	lwi	r3, r3, 0
2000c1ec:	14632000 	rsubk	r3, r3, r4
}
2000c1f0:	10330000 	addk	r1, r19, r0
2000c1f4:	ea610004 	lwi	r19, r1, 4
2000c1f8:	ea810008 	lwi	r20, r1, 8
2000c1fc:	3021000c 	addik	r1, r1, 12
2000c200:	b60f0008 	rtsd	r15, 8
2000c204:	80000000 	or	r0, r0, r0

2000c208 <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000c208:	3021fff0 	addik	r1, r1, -16
2000c20c:	fa610008 	swi	r19, r1, 8
2000c210:	fa81000c 	swi	r20, r1, 12
2000c214:	12610000 	addk	r19, r1, r0
2000c218:	96808000 	mfs	r20, rpc
2000c21c:	b000dfff 	imm	-8193
2000c220:	32945744 	addik	r20, r20, 22340
2000c224:	f8b30014 	swi	r5, r19, 20
2000c228:	f8d30018 	swi	r6, r19, 24
2000c22c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000c230:	f8130004 	swi	r0, r19, 4
2000c234:	b800005c 	bri	92		// 2000c290
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000c238:	e8730014 	lwi	r3, r19, 20
2000c23c:	e8830000 	lwi	r4, r3, 0
2000c240:	e8730014 	lwi	r3, r19, 20
2000c244:	e8a3000c 	lwi	r5, r3, 12
2000c248:	e8730004 	lwi	r3, r19, 4
2000c24c:	64630402 	bslli	r3, r3, 2
2000c250:	10651800 	addk	r3, r5, r3
2000c254:	e8a30000 	lwi	r5, r3, 0
2000c258:	e8730014 	lwi	r3, r19, 20
2000c25c:	e8630010 	lwi	r3, r3, 16
2000c260:	e8630000 	lwi	r3, r3, 0
2000c264:	14632800 	rsubk	r3, r3, r5
2000c268:	10641800 	addk	r3, r4, r3
2000c26c:	30830001 	addik	r4, r3, 1
2000c270:	e873001c 	lwi	r3, r19, 28
2000c274:	16441803 	cmpu	r18, r4, r3
2000c278:	bc52000c 	blti	r18, 12		// 2000c284
            return 0;
2000c27c:	10600000 	addk	r3, r0, r0
2000c280:	b8000024 	bri	36		// 2000c2a4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000c284:	e8730004 	lwi	r3, r19, 4
2000c288:	30630001 	addik	r3, r3, 1
2000c28c:	f8730004 	swi	r3, r19, 4
2000c290:	e8930004 	lwi	r4, r19, 4
2000c294:	e8730018 	lwi	r3, r19, 24
2000c298:	16432003 	cmpu	r18, r3, r4
2000c29c:	bc52ff9c 	blti	r18, -100		// 2000c238
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000c2a0:	30600001 	addik	r3, r0, 1
}
2000c2a4:	10330000 	addk	r1, r19, r0
2000c2a8:	ea610008 	lwi	r19, r1, 8
2000c2ac:	ea81000c 	lwi	r20, r1, 12
2000c2b0:	30210010 	addik	r1, r1, 16
2000c2b4:	b60f0008 	rtsd	r15, 8
2000c2b8:	80000000 	or	r0, r0, r0

2000c2bc <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000c2bc:	3021ffe8 	addik	r1, r1, -24
2000c2c0:	fa610010 	swi	r19, r1, 16
2000c2c4:	fa810014 	swi	r20, r1, 20
2000c2c8:	12610000 	addk	r19, r1, r0
2000c2cc:	96808000 	mfs	r20, rpc
2000c2d0:	b000dfff 	imm	-8193
2000c2d4:	32945690 	addik	r20, r20, 22160
2000c2d8:	f8b3001c 	swi	r5, r19, 28
2000c2dc:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000c2e0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000c2e4:	f8130004 	swi	r0, r19, 4
2000c2e8:	b8000054 	bri	84		// 2000c33c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000c2ec:	e873001c 	lwi	r3, r19, 28
2000c2f0:	e8630010 	lwi	r3, r3, 16
2000c2f4:	e8830000 	lwi	r4, r3, 0
2000c2f8:	e873001c 	lwi	r3, r19, 28
2000c2fc:	e8a3000c 	lwi	r5, r3, 12
2000c300:	e8730004 	lwi	r3, r19, 4
2000c304:	64630402 	bslli	r3, r3, 2
2000c308:	10651800 	addk	r3, r5, r3
2000c30c:	e8630000 	lwi	r3, r3, 0
2000c310:	14632000 	rsubk	r3, r3, r4
2000c314:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000c318:	e8930008 	lwi	r4, r19, 8
2000c31c:	e873000c 	lwi	r3, r19, 12
2000c320:	16441803 	cmpu	r18, r4, r3
2000c324:	bcb20008 	bgei	r18, 8		// 2000c32c
2000c328:	10640000 	addk	r3, r4, r0
2000c32c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000c330:	e8730004 	lwi	r3, r19, 4
2000c334:	30630001 	addik	r3, r3, 1
2000c338:	f8730004 	swi	r3, r19, 4
2000c33c:	e8930004 	lwi	r4, r19, 4
2000c340:	e8730020 	lwi	r3, r19, 32
2000c344:	16432003 	cmpu	r18, r3, r4
2000c348:	bc52ffa4 	blti	r18, -92		// 2000c2ec
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000c34c:	e873001c 	lwi	r3, r19, 28
2000c350:	e8830000 	lwi	r4, r3, 0
2000c354:	e8730008 	lwi	r3, r19, 8
2000c358:	14632000 	rsubk	r3, r3, r4
}
2000c35c:	10330000 	addk	r1, r19, r0
2000c360:	ea610010 	lwi	r19, r1, 16
2000c364:	ea810014 	lwi	r20, r1, 20
2000c368:	30210018 	addik	r1, r1, 24
2000c36c:	b60f0008 	rtsd	r15, 8
2000c370:	80000000 	or	r0, r0, r0

2000c374 <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000c374:	3021fff0 	addik	r1, r1, -16
2000c378:	fa610008 	swi	r19, r1, 8
2000c37c:	fa81000c 	swi	r20, r1, 12
2000c380:	12610000 	addk	r19, r1, r0
2000c384:	96808000 	mfs	r20, rpc
2000c388:	b000dfff 	imm	-8193
2000c38c:	329455d8 	addik	r20, r20, 21976
2000c390:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2000c394:	e8730014 	lwi	r3, r19, 20
2000c398:	e8630010 	lwi	r3, r3, 16
2000c39c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000c3a0:	f8130004 	swi	r0, r19, 4
2000c3a4:	b8000028 	bri	40		// 2000c3cc
        fifo->read_inds[i] = 0;
2000c3a8:	e8730014 	lwi	r3, r19, 20
2000c3ac:	e883000c 	lwi	r4, r3, 12
2000c3b0:	e8730004 	lwi	r3, r19, 4
2000c3b4:	64630402 	bslli	r3, r3, 2
2000c3b8:	10641800 	addk	r3, r4, r3
2000c3bc:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000c3c0:	e8730004 	lwi	r3, r19, 4
2000c3c4:	30630001 	addik	r3, r3, 1
2000c3c8:	f8730004 	swi	r3, r19, 4
2000c3cc:	e8730014 	lwi	r3, r19, 20
2000c3d0:	e8830008 	lwi	r4, r3, 8
2000c3d4:	e8730004 	lwi	r3, r19, 4
2000c3d8:	16441803 	cmpu	r18, r4, r3
2000c3dc:	bc52ffcc 	blti	r18, -52		// 2000c3a8
        fifo->read_inds[i] = 0;
    }
}
2000c3e0:	10330000 	addk	r1, r19, r0
2000c3e4:	ea610008 	lwi	r19, r1, 8
2000c3e8:	ea81000c 	lwi	r20, r1, 12
2000c3ec:	30210010 	addik	r1, r1, 16
2000c3f0:	b60f0008 	rtsd	r15, 8
2000c3f4:	80000000 	or	r0, r0, r0

2000c3f8 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000c3f8:	3021fff0 	addik	r1, r1, -16
2000c3fc:	fa610008 	swi	r19, r1, 8
2000c400:	fa81000c 	swi	r20, r1, 12
2000c404:	12610000 	addk	r19, r1, r0
2000c408:	96808000 	mfs	r20, rpc
2000c40c:	b000dfff 	imm	-8193
2000c410:	32945554 	addik	r20, r20, 21844
2000c414:	f8b30014 	swi	r5, r19, 20
2000c418:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000c41c:	e8730014 	lwi	r3, r19, 20
2000c420:	e8830004 	lwi	r4, r3, 4
2000c424:	e8730014 	lwi	r3, r19, 20
2000c428:	e8a3000c 	lwi	r5, r3, 12
2000c42c:	e8730018 	lwi	r3, r19, 24
2000c430:	64630402 	bslli	r3, r3, 2
2000c434:	10651800 	addk	r3, r5, r3
2000c438:	e8a30000 	lwi	r5, r3, 0
2000c43c:	e8730014 	lwi	r3, r19, 20
2000c440:	e8630000 	lwi	r3, r3, 0
2000c444:	3063ffff 	addik	r3, r3, -1
2000c448:	84651800 	and	r3, r5, r3
2000c44c:	10641800 	addk	r3, r4, r3
2000c450:	e0630000 	lbui	r3, r3, 0
2000c454:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000c458:	e8730014 	lwi	r3, r19, 20
2000c45c:	e883000c 	lwi	r4, r3, 12
2000c460:	e8730018 	lwi	r3, r19, 24
2000c464:	64630402 	bslli	r3, r3, 2
2000c468:	10641800 	addk	r3, r4, r3
2000c46c:	e8830000 	lwi	r4, r3, 0
2000c470:	30840001 	addik	r4, r4, 1
2000c474:	f8830000 	swi	r4, r3, 0
    return value;
2000c478:	e0730004 	lbui	r3, r19, 4
}
2000c47c:	10330000 	addk	r1, r19, r0
2000c480:	ea610008 	lwi	r19, r1, 8
2000c484:	ea81000c 	lwi	r20, r1, 12
2000c488:	30210010 	addik	r1, r1, 16
2000c48c:	b60f0008 	rtsd	r15, 8
2000c490:	80000000 	or	r0, r0, r0

2000c494 <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000c494:	3021fff4 	addik	r1, r1, -12
2000c498:	fa610004 	swi	r19, r1, 4
2000c49c:	fa810008 	swi	r20, r1, 8
2000c4a0:	12610000 	addk	r19, r1, r0
2000c4a4:	96808000 	mfs	r20, rpc
2000c4a8:	b000dfff 	imm	-8193
2000c4ac:	329454b8 	addik	r20, r20, 21688
2000c4b0:	f8b30010 	swi	r5, r19, 16
2000c4b4:	10660000 	addk	r3, r6, r0
2000c4b8:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000c4bc:	e8730010 	lwi	r3, r19, 16
2000c4c0:	e8830004 	lwi	r4, r3, 4
2000c4c4:	e8730010 	lwi	r3, r19, 16
2000c4c8:	e8630010 	lwi	r3, r3, 16
2000c4cc:	e8a30000 	lwi	r5, r3, 0
2000c4d0:	e8730010 	lwi	r3, r19, 16
2000c4d4:	e8630000 	lwi	r3, r3, 0
2000c4d8:	3063ffff 	addik	r3, r3, -1
2000c4dc:	84651800 	and	r3, r5, r3
2000c4e0:	10641800 	addk	r3, r4, r3
2000c4e4:	e0930014 	lbui	r4, r19, 20
2000c4e8:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2000c4ec:	e8730010 	lwi	r3, r19, 16
2000c4f0:	e8630010 	lwi	r3, r3, 16
2000c4f4:	e8830000 	lwi	r4, r3, 0
2000c4f8:	30840001 	addik	r4, r4, 1
2000c4fc:	f8830000 	swi	r4, r3, 0
}
2000c500:	10330000 	addk	r1, r19, r0
2000c504:	ea610004 	lwi	r19, r1, 4
2000c508:	ea810008 	lwi	r20, r1, 8
2000c50c:	3021000c 	addik	r1, r1, 12
2000c510:	b60f0008 	rtsd	r15, 8
2000c514:	80000000 	or	r0, r0, r0

2000c518 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000c518:	3021fff4 	addik	r1, r1, -12
2000c51c:	fa610004 	swi	r19, r1, 4
2000c520:	fa810008 	swi	r20, r1, 8
2000c524:	12610000 	addk	r19, r1, r0
2000c528:	96808000 	mfs	r20, rpc
2000c52c:	b000dfff 	imm	-8193
2000c530:	32945434 	addik	r20, r20, 21556
2000c534:	f8b30010 	swi	r5, r19, 16
2000c538:	f8d30014 	swi	r6, r19, 20
2000c53c:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000c540:	e8730010 	lwi	r3, r19, 16
2000c544:	e8630010 	lwi	r3, r3, 16
2000c548:	e8830000 	lwi	r4, r3, 0
2000c54c:	e8730010 	lwi	r3, r19, 16
2000c550:	e8a3000c 	lwi	r5, r3, 12
2000c554:	e8730014 	lwi	r3, r19, 20
2000c558:	64630402 	bslli	r3, r3, 2
2000c55c:	10651800 	addk	r3, r5, r3
2000c560:	e8630000 	lwi	r3, r3, 0
2000c564:	14a32000 	rsubk	r5, r3, r4
2000c568:	30600001 	addik	r3, r0, 1
2000c56c:	e8930018 	lwi	r4, r19, 24
2000c570:	16442803 	cmpu	r18, r4, r5
2000c574:	bcb20008 	bgei	r18, 8		// 2000c57c
2000c578:	10600000 	addk	r3, r0, r0
2000c57c:	a46300ff 	andi	r3, r3, 255
}
2000c580:	10330000 	addk	r1, r19, r0
2000c584:	ea610004 	lwi	r19, r1, 4
2000c588:	ea810008 	lwi	r20, r1, 8
2000c58c:	3021000c 	addik	r1, r1, 12
2000c590:	b60f0008 	rtsd	r15, 8
2000c594:	80000000 	or	r0, r0, r0

2000c598 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000c598:	3021fff4 	addik	r1, r1, -12
2000c59c:	fa610004 	swi	r19, r1, 4
2000c5a0:	fa810008 	swi	r20, r1, 8
2000c5a4:	12610000 	addk	r19, r1, r0
2000c5a8:	96808000 	mfs	r20, rpc
2000c5ac:	b000dfff 	imm	-8193
2000c5b0:	329453b4 	addik	r20, r20, 21428
2000c5b4:	f8b30010 	swi	r5, r19, 16
2000c5b8:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000c5bc:	e8730010 	lwi	r3, r19, 16
2000c5c0:	e8630010 	lwi	r3, r3, 16
2000c5c4:	e8830000 	lwi	r4, r3, 0
2000c5c8:	e8730010 	lwi	r3, r19, 16
2000c5cc:	e8a3000c 	lwi	r5, r3, 12
2000c5d0:	e8730014 	lwi	r3, r19, 20
2000c5d4:	64630402 	bslli	r3, r3, 2
2000c5d8:	10651800 	addk	r3, r5, r3
2000c5dc:	e8630000 	lwi	r3, r3, 0
2000c5e0:	14632000 	rsubk	r3, r3, r4
}
2000c5e4:	10330000 	addk	r1, r19, r0
2000c5e8:	ea610004 	lwi	r19, r1, 4
2000c5ec:	ea810008 	lwi	r20, r1, 8
2000c5f0:	3021000c 	addik	r1, r1, 12
2000c5f4:	b60f0008 	rtsd	r15, 8
2000c5f8:	80000000 	or	r0, r0, r0

2000c5fc <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000c5fc:	3021fff0 	addik	r1, r1, -16
2000c600:	fa610008 	swi	r19, r1, 8
2000c604:	fa81000c 	swi	r20, r1, 12
2000c608:	12610000 	addk	r19, r1, r0
2000c60c:	96808000 	mfs	r20, rpc
2000c610:	b000dfff 	imm	-8193
2000c614:	32945350 	addik	r20, r20, 21328
2000c618:	f8b30014 	swi	r5, r19, 20
2000c61c:	f8d30018 	swi	r6, r19, 24
2000c620:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000c624:	f8130004 	swi	r0, r19, 4
2000c628:	b800005c 	bri	92		// 2000c684
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000c62c:	e8730014 	lwi	r3, r19, 20
2000c630:	e8830000 	lwi	r4, r3, 0
2000c634:	e8730014 	lwi	r3, r19, 20
2000c638:	e8a3000c 	lwi	r5, r3, 12
2000c63c:	e8730004 	lwi	r3, r19, 4
2000c640:	64630402 	bslli	r3, r3, 2
2000c644:	10651800 	addk	r3, r5, r3
2000c648:	e8a30000 	lwi	r5, r3, 0
2000c64c:	e8730014 	lwi	r3, r19, 20
2000c650:	e8630010 	lwi	r3, r3, 16
2000c654:	e8630000 	lwi	r3, r3, 0
2000c658:	14632800 	rsubk	r3, r3, r5
2000c65c:	10641800 	addk	r3, r4, r3
2000c660:	30830001 	addik	r4, r3, 1
2000c664:	e873001c 	lwi	r3, r19, 28
2000c668:	16441803 	cmpu	r18, r4, r3
2000c66c:	bc52000c 	blti	r18, 12		// 2000c678
            return 0;
2000c670:	10600000 	addk	r3, r0, r0
2000c674:	b8000024 	bri	36		// 2000c698
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000c678:	e8730004 	lwi	r3, r19, 4
2000c67c:	30630001 	addik	r3, r3, 1
2000c680:	f8730004 	swi	r3, r19, 4
2000c684:	e8930004 	lwi	r4, r19, 4
2000c688:	e8730018 	lwi	r3, r19, 24
2000c68c:	16432003 	cmpu	r18, r3, r4
2000c690:	bc52ff9c 	blti	r18, -100		// 2000c62c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000c694:	30600001 	addik	r3, r0, 1
}
2000c698:	10330000 	addk	r1, r19, r0
2000c69c:	ea610008 	lwi	r19, r1, 8
2000c6a0:	ea81000c 	lwi	r20, r1, 12
2000c6a4:	30210010 	addik	r1, r1, 16
2000c6a8:	b60f0008 	rtsd	r15, 8
2000c6ac:	80000000 	or	r0, r0, r0

2000c6b0 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000c6b0:	3021ffe8 	addik	r1, r1, -24
2000c6b4:	fa610010 	swi	r19, r1, 16
2000c6b8:	fa810014 	swi	r20, r1, 20
2000c6bc:	12610000 	addk	r19, r1, r0
2000c6c0:	96808000 	mfs	r20, rpc
2000c6c4:	b000dfff 	imm	-8193
2000c6c8:	3294529c 	addik	r20, r20, 21148
2000c6cc:	f8b3001c 	swi	r5, r19, 28
2000c6d0:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000c6d4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000c6d8:	f8130004 	swi	r0, r19, 4
2000c6dc:	b8000054 	bri	84		// 2000c730
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000c6e0:	e873001c 	lwi	r3, r19, 28
2000c6e4:	e8630010 	lwi	r3, r3, 16
2000c6e8:	e8830000 	lwi	r4, r3, 0
2000c6ec:	e873001c 	lwi	r3, r19, 28
2000c6f0:	e8a3000c 	lwi	r5, r3, 12
2000c6f4:	e8730004 	lwi	r3, r19, 4
2000c6f8:	64630402 	bslli	r3, r3, 2
2000c6fc:	10651800 	addk	r3, r5, r3
2000c700:	e8630000 	lwi	r3, r3, 0
2000c704:	14632000 	rsubk	r3, r3, r4
2000c708:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000c70c:	e8930008 	lwi	r4, r19, 8
2000c710:	e873000c 	lwi	r3, r19, 12
2000c714:	16441803 	cmpu	r18, r4, r3
2000c718:	bcb20008 	bgei	r18, 8		// 2000c720
2000c71c:	10640000 	addk	r3, r4, r0
2000c720:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000c724:	e8730004 	lwi	r3, r19, 4
2000c728:	30630001 	addik	r3, r3, 1
2000c72c:	f8730004 	swi	r3, r19, 4
2000c730:	e8930004 	lwi	r4, r19, 4
2000c734:	e8730020 	lwi	r3, r19, 32
2000c738:	16432003 	cmpu	r18, r3, r4
2000c73c:	bc52ffa4 	blti	r18, -92		// 2000c6e0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000c740:	e873001c 	lwi	r3, r19, 28
2000c744:	e8830000 	lwi	r4, r3, 0
2000c748:	e8730008 	lwi	r3, r19, 8
2000c74c:	14632000 	rsubk	r3, r3, r4
}
2000c750:	10330000 	addk	r1, r19, r0
2000c754:	ea610010 	lwi	r19, r1, 16
2000c758:	ea810014 	lwi	r20, r1, 20
2000c75c:	30210018 	addik	r1, r1, 24
2000c760:	b60f0008 	rtsd	r15, 8
2000c764:	80000000 	or	r0, r0, r0

2000c768 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000c768:	3021fff0 	addik	r1, r1, -16
2000c76c:	fa610008 	swi	r19, r1, 8
2000c770:	fa81000c 	swi	r20, r1, 12
2000c774:	12610000 	addk	r19, r1, r0
2000c778:	96808000 	mfs	r20, rpc
2000c77c:	b000dfff 	imm	-8193
2000c780:	329451e4 	addik	r20, r20, 20964
2000c784:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2000c788:	e8730014 	lwi	r3, r19, 20
2000c78c:	e8630010 	lwi	r3, r3, 16
2000c790:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000c794:	f8130004 	swi	r0, r19, 4
2000c798:	b8000028 	bri	40		// 2000c7c0
        fifo->read_inds[i] = 0;
2000c79c:	e8730014 	lwi	r3, r19, 20
2000c7a0:	e883000c 	lwi	r4, r3, 12
2000c7a4:	e8730004 	lwi	r3, r19, 4
2000c7a8:	64630402 	bslli	r3, r3, 2
2000c7ac:	10641800 	addk	r3, r4, r3
2000c7b0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000c7b4:	e8730004 	lwi	r3, r19, 4
2000c7b8:	30630001 	addik	r3, r3, 1
2000c7bc:	f8730004 	swi	r3, r19, 4
2000c7c0:	e8730014 	lwi	r3, r19, 20
2000c7c4:	e8830008 	lwi	r4, r3, 8
2000c7c8:	e8730004 	lwi	r3, r19, 4
2000c7cc:	16441803 	cmpu	r18, r4, r3
2000c7d0:	bc52ffcc 	blti	r18, -52		// 2000c79c
        fifo->read_inds[i] = 0;
    }
}
2000c7d4:	10330000 	addk	r1, r19, r0
2000c7d8:	ea610008 	lwi	r19, r1, 8
2000c7dc:	ea81000c 	lwi	r20, r1, 12
2000c7e0:	30210010 	addik	r1, r1, 16
2000c7e4:	b60f0008 	rtsd	r15, 8
2000c7e8:	80000000 	or	r0, r0, r0

2000c7ec <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000c7ec:	3021fff0 	addik	r1, r1, -16
2000c7f0:	fa610008 	swi	r19, r1, 8
2000c7f4:	fa81000c 	swi	r20, r1, 12
2000c7f8:	12610000 	addk	r19, r1, r0
2000c7fc:	96808000 	mfs	r20, rpc
2000c800:	b000dfff 	imm	-8193
2000c804:	32945160 	addik	r20, r20, 20832
2000c808:	f8b30014 	swi	r5, r19, 20
2000c80c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000c810:	e8730014 	lwi	r3, r19, 20
2000c814:	e8830004 	lwi	r4, r3, 4
2000c818:	e8730014 	lwi	r3, r19, 20
2000c81c:	e8a3000c 	lwi	r5, r3, 12
2000c820:	e8730018 	lwi	r3, r19, 24
2000c824:	64630402 	bslli	r3, r3, 2
2000c828:	10651800 	addk	r3, r5, r3
2000c82c:	e8a30000 	lwi	r5, r3, 0
2000c830:	e8730014 	lwi	r3, r19, 20
2000c834:	e8630000 	lwi	r3, r3, 0
2000c838:	3063ffff 	addik	r3, r3, -1
2000c83c:	84651800 	and	r3, r5, r3
2000c840:	10631800 	addk	r3, r3, r3
2000c844:	10641800 	addk	r3, r4, r3
2000c848:	e4630000 	lhui	r3, r3, 0
2000c84c:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000c850:	e8730014 	lwi	r3, r19, 20
2000c854:	e883000c 	lwi	r4, r3, 12
2000c858:	e8730018 	lwi	r3, r19, 24
2000c85c:	64630402 	bslli	r3, r3, 2
2000c860:	10641800 	addk	r3, r4, r3
2000c864:	e8830000 	lwi	r4, r3, 0
2000c868:	30840001 	addik	r4, r4, 1
2000c86c:	f8830000 	swi	r4, r3, 0
    return value;
2000c870:	e4730004 	lhui	r3, r19, 4
}
2000c874:	10330000 	addk	r1, r19, r0
2000c878:	ea610008 	lwi	r19, r1, 8
2000c87c:	ea81000c 	lwi	r20, r1, 12
2000c880:	30210010 	addik	r1, r1, 16
2000c884:	b60f0008 	rtsd	r15, 8
2000c888:	80000000 	or	r0, r0, r0

2000c88c <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000c88c:	3021fff4 	addik	r1, r1, -12
2000c890:	fa610004 	swi	r19, r1, 4
2000c894:	fa810008 	swi	r20, r1, 8
2000c898:	12610000 	addk	r19, r1, r0
2000c89c:	96808000 	mfs	r20, rpc
2000c8a0:	b000dfff 	imm	-8193
2000c8a4:	329450c0 	addik	r20, r20, 20672
2000c8a8:	f8b30010 	swi	r5, r19, 16
2000c8ac:	10660000 	addk	r3, r6, r0
2000c8b0:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000c8b4:	e8730010 	lwi	r3, r19, 16
2000c8b8:	e8830004 	lwi	r4, r3, 4
2000c8bc:	e8730010 	lwi	r3, r19, 16
2000c8c0:	e8630010 	lwi	r3, r3, 16
2000c8c4:	e8a30000 	lwi	r5, r3, 0
2000c8c8:	e8730010 	lwi	r3, r19, 16
2000c8cc:	e8630000 	lwi	r3, r3, 0
2000c8d0:	3063ffff 	addik	r3, r3, -1
2000c8d4:	84651800 	and	r3, r5, r3
2000c8d8:	10631800 	addk	r3, r3, r3
2000c8dc:	10641800 	addk	r3, r4, r3
2000c8e0:	e4930014 	lhui	r4, r19, 20
2000c8e4:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2000c8e8:	e8730010 	lwi	r3, r19, 16
2000c8ec:	e8630010 	lwi	r3, r3, 16
2000c8f0:	e8830000 	lwi	r4, r3, 0
2000c8f4:	30840001 	addik	r4, r4, 1
2000c8f8:	f8830000 	swi	r4, r3, 0
}
2000c8fc:	10330000 	addk	r1, r19, r0
2000c900:	ea610004 	lwi	r19, r1, 4
2000c904:	ea810008 	lwi	r20, r1, 8
2000c908:	3021000c 	addik	r1, r1, 12
2000c90c:	b60f0008 	rtsd	r15, 8
2000c910:	80000000 	or	r0, r0, r0

2000c914 <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000c914:	3021fff4 	addik	r1, r1, -12
2000c918:	fa610004 	swi	r19, r1, 4
2000c91c:	fa810008 	swi	r20, r1, 8
2000c920:	12610000 	addk	r19, r1, r0
2000c924:	96808000 	mfs	r20, rpc
2000c928:	b000dfff 	imm	-8193
2000c92c:	32945038 	addik	r20, r20, 20536
2000c930:	f8b30010 	swi	r5, r19, 16
2000c934:	f8d30014 	swi	r6, r19, 20
2000c938:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000c93c:	e8730010 	lwi	r3, r19, 16
2000c940:	e8630010 	lwi	r3, r3, 16
2000c944:	e8830000 	lwi	r4, r3, 0
2000c948:	e8730010 	lwi	r3, r19, 16
2000c94c:	e8a3000c 	lwi	r5, r3, 12
2000c950:	e8730014 	lwi	r3, r19, 20
2000c954:	64630402 	bslli	r3, r3, 2
2000c958:	10651800 	addk	r3, r5, r3
2000c95c:	e8630000 	lwi	r3, r3, 0
2000c960:	14a32000 	rsubk	r5, r3, r4
2000c964:	30600001 	addik	r3, r0, 1
2000c968:	e8930018 	lwi	r4, r19, 24
2000c96c:	16442803 	cmpu	r18, r4, r5
2000c970:	bcb20008 	bgei	r18, 8		// 2000c978
2000c974:	10600000 	addk	r3, r0, r0
2000c978:	a46300ff 	andi	r3, r3, 255
}
2000c97c:	10330000 	addk	r1, r19, r0
2000c980:	ea610004 	lwi	r19, r1, 4
2000c984:	ea810008 	lwi	r20, r1, 8
2000c988:	3021000c 	addik	r1, r1, 12
2000c98c:	b60f0008 	rtsd	r15, 8
2000c990:	80000000 	or	r0, r0, r0

2000c994 <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000c994:	3021fff4 	addik	r1, r1, -12
2000c998:	fa610004 	swi	r19, r1, 4
2000c99c:	fa810008 	swi	r20, r1, 8
2000c9a0:	12610000 	addk	r19, r1, r0
2000c9a4:	96808000 	mfs	r20, rpc
2000c9a8:	b000dfff 	imm	-8193
2000c9ac:	32944fb8 	addik	r20, r20, 20408
2000c9b0:	f8b30010 	swi	r5, r19, 16
2000c9b4:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000c9b8:	e8730010 	lwi	r3, r19, 16
2000c9bc:	e8630010 	lwi	r3, r3, 16
2000c9c0:	e8830000 	lwi	r4, r3, 0
2000c9c4:	e8730010 	lwi	r3, r19, 16
2000c9c8:	e8a3000c 	lwi	r5, r3, 12
2000c9cc:	e8730014 	lwi	r3, r19, 20
2000c9d0:	64630402 	bslli	r3, r3, 2
2000c9d4:	10651800 	addk	r3, r5, r3
2000c9d8:	e8630000 	lwi	r3, r3, 0
2000c9dc:	14632000 	rsubk	r3, r3, r4
}
2000c9e0:	10330000 	addk	r1, r19, r0
2000c9e4:	ea610004 	lwi	r19, r1, 4
2000c9e8:	ea810008 	lwi	r20, r1, 8
2000c9ec:	3021000c 	addik	r1, r1, 12
2000c9f0:	b60f0008 	rtsd	r15, 8
2000c9f4:	80000000 	or	r0, r0, r0

2000c9f8 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000c9f8:	3021fff0 	addik	r1, r1, -16
2000c9fc:	fa610008 	swi	r19, r1, 8
2000ca00:	fa81000c 	swi	r20, r1, 12
2000ca04:	12610000 	addk	r19, r1, r0
2000ca08:	96808000 	mfs	r20, rpc
2000ca0c:	b000dfff 	imm	-8193
2000ca10:	32944f54 	addik	r20, r20, 20308
2000ca14:	f8b30014 	swi	r5, r19, 20
2000ca18:	f8d30018 	swi	r6, r19, 24
2000ca1c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000ca20:	f8130004 	swi	r0, r19, 4
2000ca24:	b800005c 	bri	92		// 2000ca80
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000ca28:	e8730014 	lwi	r3, r19, 20
2000ca2c:	e8830000 	lwi	r4, r3, 0
2000ca30:	e8730014 	lwi	r3, r19, 20
2000ca34:	e8a3000c 	lwi	r5, r3, 12
2000ca38:	e8730004 	lwi	r3, r19, 4
2000ca3c:	64630402 	bslli	r3, r3, 2
2000ca40:	10651800 	addk	r3, r5, r3
2000ca44:	e8a30000 	lwi	r5, r3, 0
2000ca48:	e8730014 	lwi	r3, r19, 20
2000ca4c:	e8630010 	lwi	r3, r3, 16
2000ca50:	e8630000 	lwi	r3, r3, 0
2000ca54:	14632800 	rsubk	r3, r3, r5
2000ca58:	10641800 	addk	r3, r4, r3
2000ca5c:	30830001 	addik	r4, r3, 1
2000ca60:	e873001c 	lwi	r3, r19, 28
2000ca64:	16441803 	cmpu	r18, r4, r3
2000ca68:	bc52000c 	blti	r18, 12		// 2000ca74
            return 0;
2000ca6c:	10600000 	addk	r3, r0, r0
2000ca70:	b8000024 	bri	36		// 2000ca94
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000ca74:	e8730004 	lwi	r3, r19, 4
2000ca78:	30630001 	addik	r3, r3, 1
2000ca7c:	f8730004 	swi	r3, r19, 4
2000ca80:	e8930004 	lwi	r4, r19, 4
2000ca84:	e8730018 	lwi	r3, r19, 24
2000ca88:	16432003 	cmpu	r18, r3, r4
2000ca8c:	bc52ff9c 	blti	r18, -100		// 2000ca28
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000ca90:	30600001 	addik	r3, r0, 1
}
2000ca94:	10330000 	addk	r1, r19, r0
2000ca98:	ea610008 	lwi	r19, r1, 8
2000ca9c:	ea81000c 	lwi	r20, r1, 12
2000caa0:	30210010 	addik	r1, r1, 16
2000caa4:	b60f0008 	rtsd	r15, 8
2000caa8:	80000000 	or	r0, r0, r0

2000caac <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000caac:	3021ffe8 	addik	r1, r1, -24
2000cab0:	fa610010 	swi	r19, r1, 16
2000cab4:	fa810014 	swi	r20, r1, 20
2000cab8:	12610000 	addk	r19, r1, r0
2000cabc:	96808000 	mfs	r20, rpc
2000cac0:	b000dfff 	imm	-8193
2000cac4:	32944ea0 	addik	r20, r20, 20128
2000cac8:	f8b3001c 	swi	r5, r19, 28
2000cacc:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000cad0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000cad4:	f8130004 	swi	r0, r19, 4
2000cad8:	b8000054 	bri	84		// 2000cb2c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000cadc:	e873001c 	lwi	r3, r19, 28
2000cae0:	e8630010 	lwi	r3, r3, 16
2000cae4:	e8830000 	lwi	r4, r3, 0
2000cae8:	e873001c 	lwi	r3, r19, 28
2000caec:	e8a3000c 	lwi	r5, r3, 12
2000caf0:	e8730004 	lwi	r3, r19, 4
2000caf4:	64630402 	bslli	r3, r3, 2
2000caf8:	10651800 	addk	r3, r5, r3
2000cafc:	e8630000 	lwi	r3, r3, 0
2000cb00:	14632000 	rsubk	r3, r3, r4
2000cb04:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000cb08:	e8930008 	lwi	r4, r19, 8
2000cb0c:	e873000c 	lwi	r3, r19, 12
2000cb10:	16441803 	cmpu	r18, r4, r3
2000cb14:	bcb20008 	bgei	r18, 8		// 2000cb1c
2000cb18:	10640000 	addk	r3, r4, r0
2000cb1c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000cb20:	e8730004 	lwi	r3, r19, 4
2000cb24:	30630001 	addik	r3, r3, 1
2000cb28:	f8730004 	swi	r3, r19, 4
2000cb2c:	e8930004 	lwi	r4, r19, 4
2000cb30:	e8730020 	lwi	r3, r19, 32
2000cb34:	16432003 	cmpu	r18, r3, r4
2000cb38:	bc52ffa4 	blti	r18, -92		// 2000cadc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000cb3c:	e873001c 	lwi	r3, r19, 28
2000cb40:	e8830000 	lwi	r4, r3, 0
2000cb44:	e8730008 	lwi	r3, r19, 8
2000cb48:	14632000 	rsubk	r3, r3, r4
}
2000cb4c:	10330000 	addk	r1, r19, r0
2000cb50:	ea610010 	lwi	r19, r1, 16
2000cb54:	ea810014 	lwi	r20, r1, 20
2000cb58:	30210018 	addik	r1, r1, 24
2000cb5c:	b60f0008 	rtsd	r15, 8
2000cb60:	80000000 	or	r0, r0, r0

2000cb64 <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000cb64:	3021fff0 	addik	r1, r1, -16
2000cb68:	fa610008 	swi	r19, r1, 8
2000cb6c:	fa81000c 	swi	r20, r1, 12
2000cb70:	12610000 	addk	r19, r1, r0
2000cb74:	96808000 	mfs	r20, rpc
2000cb78:	b000dfff 	imm	-8193
2000cb7c:	32944de8 	addik	r20, r20, 19944
2000cb80:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2000cb84:	e8730014 	lwi	r3, r19, 20
2000cb88:	e8630010 	lwi	r3, r3, 16
2000cb8c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000cb90:	f8130004 	swi	r0, r19, 4
2000cb94:	b8000028 	bri	40		// 2000cbbc
        fifo->read_inds[i] = 0;
2000cb98:	e8730014 	lwi	r3, r19, 20
2000cb9c:	e883000c 	lwi	r4, r3, 12
2000cba0:	e8730004 	lwi	r3, r19, 4
2000cba4:	64630402 	bslli	r3, r3, 2
2000cba8:	10641800 	addk	r3, r4, r3
2000cbac:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000cbb0:	e8730004 	lwi	r3, r19, 4
2000cbb4:	30630001 	addik	r3, r3, 1
2000cbb8:	f8730004 	swi	r3, r19, 4
2000cbbc:	e8730014 	lwi	r3, r19, 20
2000cbc0:	e8830008 	lwi	r4, r3, 8
2000cbc4:	e8730004 	lwi	r3, r19, 4
2000cbc8:	16441803 	cmpu	r18, r4, r3
2000cbcc:	bc52ffcc 	blti	r18, -52		// 2000cb98
        fifo->read_inds[i] = 0;
    }
}
2000cbd0:	10330000 	addk	r1, r19, r0
2000cbd4:	ea610008 	lwi	r19, r1, 8
2000cbd8:	ea81000c 	lwi	r20, r1, 12
2000cbdc:	30210010 	addik	r1, r1, 16
2000cbe0:	b60f0008 	rtsd	r15, 8
2000cbe4:	80000000 	or	r0, r0, r0

2000cbe8 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000cbe8:	3021fff0 	addik	r1, r1, -16
2000cbec:	fa610008 	swi	r19, r1, 8
2000cbf0:	fa81000c 	swi	r20, r1, 12
2000cbf4:	12610000 	addk	r19, r1, r0
2000cbf8:	96808000 	mfs	r20, rpc
2000cbfc:	b000dfff 	imm	-8193
2000cc00:	32944d64 	addik	r20, r20, 19812
2000cc04:	f8b30014 	swi	r5, r19, 20
2000cc08:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000cc0c:	e8730014 	lwi	r3, r19, 20
2000cc10:	e8830004 	lwi	r4, r3, 4
2000cc14:	e8730014 	lwi	r3, r19, 20
2000cc18:	e8a3000c 	lwi	r5, r3, 12
2000cc1c:	e8730018 	lwi	r3, r19, 24
2000cc20:	64630402 	bslli	r3, r3, 2
2000cc24:	10651800 	addk	r3, r5, r3
2000cc28:	e8a30000 	lwi	r5, r3, 0
2000cc2c:	e8730014 	lwi	r3, r19, 20
2000cc30:	e8630000 	lwi	r3, r3, 0
2000cc34:	3063ffff 	addik	r3, r3, -1
2000cc38:	84651800 	and	r3, r5, r3
2000cc3c:	64630402 	bslli	r3, r3, 2
2000cc40:	10641800 	addk	r3, r4, r3
2000cc44:	e8630000 	lwi	r3, r3, 0
2000cc48:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000cc4c:	e8730014 	lwi	r3, r19, 20
2000cc50:	e883000c 	lwi	r4, r3, 12
2000cc54:	e8730018 	lwi	r3, r19, 24
2000cc58:	64630402 	bslli	r3, r3, 2
2000cc5c:	10641800 	addk	r3, r4, r3
2000cc60:	e8830000 	lwi	r4, r3, 0
2000cc64:	30840001 	addik	r4, r4, 1
2000cc68:	f8830000 	swi	r4, r3, 0
    return value;
2000cc6c:	e8730004 	lwi	r3, r19, 4
}
2000cc70:	10330000 	addk	r1, r19, r0
2000cc74:	ea610008 	lwi	r19, r1, 8
2000cc78:	ea81000c 	lwi	r20, r1, 12
2000cc7c:	30210010 	addik	r1, r1, 16
2000cc80:	b60f0008 	rtsd	r15, 8
2000cc84:	80000000 	or	r0, r0, r0

2000cc88 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000cc88:	3021fff4 	addik	r1, r1, -12
2000cc8c:	fa610004 	swi	r19, r1, 4
2000cc90:	fa810008 	swi	r20, r1, 8
2000cc94:	12610000 	addk	r19, r1, r0
2000cc98:	96808000 	mfs	r20, rpc
2000cc9c:	b000dfff 	imm	-8193
2000cca0:	32944cc4 	addik	r20, r20, 19652
2000cca4:	f8b30010 	swi	r5, r19, 16
2000cca8:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000ccac:	e8730010 	lwi	r3, r19, 16
2000ccb0:	e8830004 	lwi	r4, r3, 4
2000ccb4:	e8730010 	lwi	r3, r19, 16
2000ccb8:	e8630010 	lwi	r3, r3, 16
2000ccbc:	e8a30000 	lwi	r5, r3, 0
2000ccc0:	e8730010 	lwi	r3, r19, 16
2000ccc4:	e8630000 	lwi	r3, r3, 0
2000ccc8:	3063ffff 	addik	r3, r3, -1
2000cccc:	84651800 	and	r3, r5, r3
2000ccd0:	64630402 	bslli	r3, r3, 2
2000ccd4:	10641800 	addk	r3, r4, r3
2000ccd8:	e8930014 	lwi	r4, r19, 20
2000ccdc:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2000cce0:	e8730010 	lwi	r3, r19, 16
2000cce4:	e8630010 	lwi	r3, r3, 16
2000cce8:	e8830000 	lwi	r4, r3, 0
2000ccec:	30840001 	addik	r4, r4, 1
2000ccf0:	f8830000 	swi	r4, r3, 0
}
2000ccf4:	10330000 	addk	r1, r19, r0
2000ccf8:	ea610004 	lwi	r19, r1, 4
2000ccfc:	ea810008 	lwi	r20, r1, 8
2000cd00:	3021000c 	addik	r1, r1, 12
2000cd04:	b60f0008 	rtsd	r15, 8
2000cd08:	80000000 	or	r0, r0, r0

2000cd0c <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000cd0c:	3021fff4 	addik	r1, r1, -12
2000cd10:	fa610004 	swi	r19, r1, 4
2000cd14:	fa810008 	swi	r20, r1, 8
2000cd18:	12610000 	addk	r19, r1, r0
2000cd1c:	96808000 	mfs	r20, rpc
2000cd20:	b000dfff 	imm	-8193
2000cd24:	32944c40 	addik	r20, r20, 19520
2000cd28:	f8b30010 	swi	r5, r19, 16
2000cd2c:	f8d30014 	swi	r6, r19, 20
2000cd30:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000cd34:	e8730010 	lwi	r3, r19, 16
2000cd38:	e8630010 	lwi	r3, r3, 16
2000cd3c:	e8830000 	lwi	r4, r3, 0
2000cd40:	e8730010 	lwi	r3, r19, 16
2000cd44:	e8a3000c 	lwi	r5, r3, 12
2000cd48:	e8730014 	lwi	r3, r19, 20
2000cd4c:	64630402 	bslli	r3, r3, 2
2000cd50:	10651800 	addk	r3, r5, r3
2000cd54:	e8630000 	lwi	r3, r3, 0
2000cd58:	14a32000 	rsubk	r5, r3, r4
2000cd5c:	30600001 	addik	r3, r0, 1
2000cd60:	e8930018 	lwi	r4, r19, 24
2000cd64:	16442803 	cmpu	r18, r4, r5
2000cd68:	bcb20008 	bgei	r18, 8		// 2000cd70
2000cd6c:	10600000 	addk	r3, r0, r0
2000cd70:	a46300ff 	andi	r3, r3, 255
}
2000cd74:	10330000 	addk	r1, r19, r0
2000cd78:	ea610004 	lwi	r19, r1, 4
2000cd7c:	ea810008 	lwi	r20, r1, 8
2000cd80:	3021000c 	addik	r1, r1, 12
2000cd84:	b60f0008 	rtsd	r15, 8
2000cd88:	80000000 	or	r0, r0, r0

2000cd8c <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000cd8c:	3021fff4 	addik	r1, r1, -12
2000cd90:	fa610004 	swi	r19, r1, 4
2000cd94:	fa810008 	swi	r20, r1, 8
2000cd98:	12610000 	addk	r19, r1, r0
2000cd9c:	96808000 	mfs	r20, rpc
2000cda0:	b000dfff 	imm	-8193
2000cda4:	32944bc0 	addik	r20, r20, 19392
2000cda8:	f8b30010 	swi	r5, r19, 16
2000cdac:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000cdb0:	e8730010 	lwi	r3, r19, 16
2000cdb4:	e8630010 	lwi	r3, r3, 16
2000cdb8:	e8830000 	lwi	r4, r3, 0
2000cdbc:	e8730010 	lwi	r3, r19, 16
2000cdc0:	e8a3000c 	lwi	r5, r3, 12
2000cdc4:	e8730014 	lwi	r3, r19, 20
2000cdc8:	64630402 	bslli	r3, r3, 2
2000cdcc:	10651800 	addk	r3, r5, r3
2000cdd0:	e8630000 	lwi	r3, r3, 0
2000cdd4:	14632000 	rsubk	r3, r3, r4
}
2000cdd8:	10330000 	addk	r1, r19, r0
2000cddc:	ea610004 	lwi	r19, r1, 4
2000cde0:	ea810008 	lwi	r20, r1, 8
2000cde4:	3021000c 	addik	r1, r1, 12
2000cde8:	b60f0008 	rtsd	r15, 8
2000cdec:	80000000 	or	r0, r0, r0

2000cdf0 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000cdf0:	3021fff0 	addik	r1, r1, -16
2000cdf4:	fa610008 	swi	r19, r1, 8
2000cdf8:	fa81000c 	swi	r20, r1, 12
2000cdfc:	12610000 	addk	r19, r1, r0
2000ce00:	96808000 	mfs	r20, rpc
2000ce04:	b000dfff 	imm	-8193
2000ce08:	32944b5c 	addik	r20, r20, 19292
2000ce0c:	f8b30014 	swi	r5, r19, 20
2000ce10:	f8d30018 	swi	r6, r19, 24
2000ce14:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000ce18:	f8130004 	swi	r0, r19, 4
2000ce1c:	b800005c 	bri	92		// 2000ce78
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000ce20:	e8730014 	lwi	r3, r19, 20
2000ce24:	e8830000 	lwi	r4, r3, 0
2000ce28:	e8730014 	lwi	r3, r19, 20
2000ce2c:	e8a3000c 	lwi	r5, r3, 12
2000ce30:	e8730004 	lwi	r3, r19, 4
2000ce34:	64630402 	bslli	r3, r3, 2
2000ce38:	10651800 	addk	r3, r5, r3
2000ce3c:	e8a30000 	lwi	r5, r3, 0
2000ce40:	e8730014 	lwi	r3, r19, 20
2000ce44:	e8630010 	lwi	r3, r3, 16
2000ce48:	e8630000 	lwi	r3, r3, 0
2000ce4c:	14632800 	rsubk	r3, r3, r5
2000ce50:	10641800 	addk	r3, r4, r3
2000ce54:	30830001 	addik	r4, r3, 1
2000ce58:	e873001c 	lwi	r3, r19, 28
2000ce5c:	16441803 	cmpu	r18, r4, r3
2000ce60:	bc52000c 	blti	r18, 12		// 2000ce6c
            return 0;
2000ce64:	10600000 	addk	r3, r0, r0
2000ce68:	b8000024 	bri	36		// 2000ce8c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000ce6c:	e8730004 	lwi	r3, r19, 4
2000ce70:	30630001 	addik	r3, r3, 1
2000ce74:	f8730004 	swi	r3, r19, 4
2000ce78:	e8930004 	lwi	r4, r19, 4
2000ce7c:	e8730018 	lwi	r3, r19, 24
2000ce80:	16432003 	cmpu	r18, r3, r4
2000ce84:	bc52ff9c 	blti	r18, -100		// 2000ce20
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000ce88:	30600001 	addik	r3, r0, 1
}
2000ce8c:	10330000 	addk	r1, r19, r0
2000ce90:	ea610008 	lwi	r19, r1, 8
2000ce94:	ea81000c 	lwi	r20, r1, 12
2000ce98:	30210010 	addik	r1, r1, 16
2000ce9c:	b60f0008 	rtsd	r15, 8
2000cea0:	80000000 	or	r0, r0, r0

2000cea4 <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000cea4:	3021ffe8 	addik	r1, r1, -24
2000cea8:	fa610010 	swi	r19, r1, 16
2000ceac:	fa810014 	swi	r20, r1, 20
2000ceb0:	12610000 	addk	r19, r1, r0
2000ceb4:	96808000 	mfs	r20, rpc
2000ceb8:	b000dfff 	imm	-8193
2000cebc:	32944aa8 	addik	r20, r20, 19112
2000cec0:	f8b3001c 	swi	r5, r19, 28
2000cec4:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000cec8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000cecc:	f8130004 	swi	r0, r19, 4
2000ced0:	b8000054 	bri	84		// 2000cf24
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000ced4:	e873001c 	lwi	r3, r19, 28
2000ced8:	e8630010 	lwi	r3, r3, 16
2000cedc:	e8830000 	lwi	r4, r3, 0
2000cee0:	e873001c 	lwi	r3, r19, 28
2000cee4:	e8a3000c 	lwi	r5, r3, 12
2000cee8:	e8730004 	lwi	r3, r19, 4
2000ceec:	64630402 	bslli	r3, r3, 2
2000cef0:	10651800 	addk	r3, r5, r3
2000cef4:	e8630000 	lwi	r3, r3, 0
2000cef8:	14632000 	rsubk	r3, r3, r4
2000cefc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000cf00:	e8930008 	lwi	r4, r19, 8
2000cf04:	e873000c 	lwi	r3, r19, 12
2000cf08:	16441803 	cmpu	r18, r4, r3
2000cf0c:	bcb20008 	bgei	r18, 8		// 2000cf14
2000cf10:	10640000 	addk	r3, r4, r0
2000cf14:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000cf18:	e8730004 	lwi	r3, r19, 4
2000cf1c:	30630001 	addik	r3, r3, 1
2000cf20:	f8730004 	swi	r3, r19, 4
2000cf24:	e8930004 	lwi	r4, r19, 4
2000cf28:	e8730020 	lwi	r3, r19, 32
2000cf2c:	16432003 	cmpu	r18, r3, r4
2000cf30:	bc52ffa4 	blti	r18, -92		// 2000ced4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000cf34:	e873001c 	lwi	r3, r19, 28
2000cf38:	e8830000 	lwi	r4, r3, 0
2000cf3c:	e8730008 	lwi	r3, r19, 8
2000cf40:	14632000 	rsubk	r3, r3, r4
}
2000cf44:	10330000 	addk	r1, r19, r0
2000cf48:	ea610010 	lwi	r19, r1, 16
2000cf4c:	ea810014 	lwi	r20, r1, 20
2000cf50:	30210018 	addik	r1, r1, 24
2000cf54:	b60f0008 	rtsd	r15, 8
2000cf58:	80000000 	or	r0, r0, r0

2000cf5c <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000cf5c:	3021fff0 	addik	r1, r1, -16
2000cf60:	fa610008 	swi	r19, r1, 8
2000cf64:	fa81000c 	swi	r20, r1, 12
2000cf68:	12610000 	addk	r19, r1, r0
2000cf6c:	96808000 	mfs	r20, rpc
2000cf70:	b000dfff 	imm	-8193
2000cf74:	329449f0 	addik	r20, r20, 18928
2000cf78:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2000cf7c:	e8730014 	lwi	r3, r19, 20
2000cf80:	e8630010 	lwi	r3, r3, 16
2000cf84:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000cf88:	f8130004 	swi	r0, r19, 4
2000cf8c:	b8000028 	bri	40		// 2000cfb4
        fifo->read_inds[i] = 0;
2000cf90:	e8730014 	lwi	r3, r19, 20
2000cf94:	e883000c 	lwi	r4, r3, 12
2000cf98:	e8730004 	lwi	r3, r19, 4
2000cf9c:	64630402 	bslli	r3, r3, 2
2000cfa0:	10641800 	addk	r3, r4, r3
2000cfa4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000cfa8:	e8730004 	lwi	r3, r19, 4
2000cfac:	30630001 	addik	r3, r3, 1
2000cfb0:	f8730004 	swi	r3, r19, 4
2000cfb4:	e8730014 	lwi	r3, r19, 20
2000cfb8:	e8830008 	lwi	r4, r3, 8
2000cfbc:	e8730004 	lwi	r3, r19, 4
2000cfc0:	16441803 	cmpu	r18, r4, r3
2000cfc4:	bc52ffcc 	blti	r18, -52		// 2000cf90
        fifo->read_inds[i] = 0;
    }
}
2000cfc8:	10330000 	addk	r1, r19, r0
2000cfcc:	ea610008 	lwi	r19, r1, 8
2000cfd0:	ea81000c 	lwi	r20, r1, 12
2000cfd4:	30210010 	addik	r1, r1, 16
2000cfd8:	b60f0008 	rtsd	r15, 8
2000cfdc:	80000000 	or	r0, r0, r0

2000cfe0 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000cfe0:	3021ffec 	addik	r1, r1, -20
2000cfe4:	fa61000c 	swi	r19, r1, 12
2000cfe8:	fa810010 	swi	r20, r1, 16
2000cfec:	12610000 	addk	r19, r1, r0
2000cff0:	96808000 	mfs	r20, rpc
2000cff4:	b000dfff 	imm	-8193
2000cff8:	3294496c 	addik	r20, r20, 18796
2000cffc:	f8b30018 	swi	r5, r19, 24
2000d000:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000d004:	e8730018 	lwi	r3, r19, 24
2000d008:	e8830004 	lwi	r4, r3, 4
2000d00c:	e8730018 	lwi	r3, r19, 24
2000d010:	e8a3000c 	lwi	r5, r3, 12
2000d014:	e873001c 	lwi	r3, r19, 28
2000d018:	64630402 	bslli	r3, r3, 2
2000d01c:	10651800 	addk	r3, r5, r3
2000d020:	e8a30000 	lwi	r5, r3, 0
2000d024:	e8730018 	lwi	r3, r19, 24
2000d028:	e8630000 	lwi	r3, r3, 0
2000d02c:	3063ffff 	addik	r3, r3, -1
2000d030:	84651800 	and	r3, r5, r3
2000d034:	64630403 	bslli	r3, r3, 3
2000d038:	10641800 	addk	r3, r4, r3
2000d03c:	e8830000 	lwi	r4, r3, 0
2000d040:	e8a30004 	lwi	r5, r3, 4
2000d044:	f8930004 	swi	r4, r19, 4
2000d048:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2000d04c:	e8730018 	lwi	r3, r19, 24
2000d050:	e883000c 	lwi	r4, r3, 12
2000d054:	e873001c 	lwi	r3, r19, 28
2000d058:	64630402 	bslli	r3, r3, 2
2000d05c:	10641800 	addk	r3, r4, r3
2000d060:	e8830000 	lwi	r4, r3, 0
2000d064:	30840001 	addik	r4, r4, 1
2000d068:	f8830000 	swi	r4, r3, 0
    return value;
2000d06c:	e8930004 	lwi	r4, r19, 4
2000d070:	e8b30008 	lwi	r5, r19, 8
}
2000d074:	10640000 	addk	r3, r4, r0
2000d078:	10850000 	addk	r4, r5, r0
2000d07c:	10330000 	addk	r1, r19, r0
2000d080:	ea61000c 	lwi	r19, r1, 12
2000d084:	ea810010 	lwi	r20, r1, 16
2000d088:	30210014 	addik	r1, r1, 20
2000d08c:	b60f0008 	rtsd	r15, 8
2000d090:	80000000 	or	r0, r0, r0

2000d094 <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000d094:	3021fff4 	addik	r1, r1, -12
2000d098:	fa610004 	swi	r19, r1, 4
2000d09c:	fa810008 	swi	r20, r1, 8
2000d0a0:	12610000 	addk	r19, r1, r0
2000d0a4:	96808000 	mfs	r20, rpc
2000d0a8:	b000dfff 	imm	-8193
2000d0ac:	329448b8 	addik	r20, r20, 18616
2000d0b0:	f8b30010 	swi	r5, r19, 16
2000d0b4:	f8d30014 	swi	r6, r19, 20
2000d0b8:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000d0bc:	e8730010 	lwi	r3, r19, 16
2000d0c0:	e8830004 	lwi	r4, r3, 4
2000d0c4:	e8730010 	lwi	r3, r19, 16
2000d0c8:	e8630010 	lwi	r3, r3, 16
2000d0cc:	e8a30000 	lwi	r5, r3, 0
2000d0d0:	e8730010 	lwi	r3, r19, 16
2000d0d4:	e8630000 	lwi	r3, r3, 0
2000d0d8:	3063ffff 	addik	r3, r3, -1
2000d0dc:	84651800 	and	r3, r5, r3
2000d0e0:	64630403 	bslli	r3, r3, 3
2000d0e4:	10641800 	addk	r3, r4, r3
2000d0e8:	e8930014 	lwi	r4, r19, 20
2000d0ec:	e8b30018 	lwi	r5, r19, 24
2000d0f0:	f8830000 	swi	r4, r3, 0
2000d0f4:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2000d0f8:	e8730010 	lwi	r3, r19, 16
2000d0fc:	e8630010 	lwi	r3, r3, 16
2000d100:	e8830000 	lwi	r4, r3, 0
2000d104:	30840001 	addik	r4, r4, 1
2000d108:	f8830000 	swi	r4, r3, 0
}
2000d10c:	10330000 	addk	r1, r19, r0
2000d110:	ea610004 	lwi	r19, r1, 4
2000d114:	ea810008 	lwi	r20, r1, 8
2000d118:	3021000c 	addik	r1, r1, 12
2000d11c:	b60f0008 	rtsd	r15, 8
2000d120:	80000000 	or	r0, r0, r0

2000d124 <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000d124:	3021fff4 	addik	r1, r1, -12
2000d128:	fa610004 	swi	r19, r1, 4
2000d12c:	fa810008 	swi	r20, r1, 8
2000d130:	12610000 	addk	r19, r1, r0
2000d134:	96808000 	mfs	r20, rpc
2000d138:	b000dfff 	imm	-8193
2000d13c:	32944828 	addik	r20, r20, 18472
2000d140:	f8b30010 	swi	r5, r19, 16
2000d144:	f8d30014 	swi	r6, r19, 20
2000d148:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000d14c:	e8730010 	lwi	r3, r19, 16
2000d150:	e8630010 	lwi	r3, r3, 16
2000d154:	e8830000 	lwi	r4, r3, 0
2000d158:	e8730010 	lwi	r3, r19, 16
2000d15c:	e8a3000c 	lwi	r5, r3, 12
2000d160:	e8730014 	lwi	r3, r19, 20
2000d164:	64630402 	bslli	r3, r3, 2
2000d168:	10651800 	addk	r3, r5, r3
2000d16c:	e8630000 	lwi	r3, r3, 0
2000d170:	14a32000 	rsubk	r5, r3, r4
2000d174:	30600001 	addik	r3, r0, 1
2000d178:	e8930018 	lwi	r4, r19, 24
2000d17c:	16442803 	cmpu	r18, r4, r5
2000d180:	bcb20008 	bgei	r18, 8		// 2000d188
2000d184:	10600000 	addk	r3, r0, r0
2000d188:	a46300ff 	andi	r3, r3, 255
}
2000d18c:	10330000 	addk	r1, r19, r0
2000d190:	ea610004 	lwi	r19, r1, 4
2000d194:	ea810008 	lwi	r20, r1, 8
2000d198:	3021000c 	addik	r1, r1, 12
2000d19c:	b60f0008 	rtsd	r15, 8
2000d1a0:	80000000 	or	r0, r0, r0

2000d1a4 <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000d1a4:	3021fff4 	addik	r1, r1, -12
2000d1a8:	fa610004 	swi	r19, r1, 4
2000d1ac:	fa810008 	swi	r20, r1, 8
2000d1b0:	12610000 	addk	r19, r1, r0
2000d1b4:	96808000 	mfs	r20, rpc
2000d1b8:	b000dfff 	imm	-8193
2000d1bc:	329447a8 	addik	r20, r20, 18344
2000d1c0:	f8b30010 	swi	r5, r19, 16
2000d1c4:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000d1c8:	e8730010 	lwi	r3, r19, 16
2000d1cc:	e8630010 	lwi	r3, r3, 16
2000d1d0:	e8830000 	lwi	r4, r3, 0
2000d1d4:	e8730010 	lwi	r3, r19, 16
2000d1d8:	e8a3000c 	lwi	r5, r3, 12
2000d1dc:	e8730014 	lwi	r3, r19, 20
2000d1e0:	64630402 	bslli	r3, r3, 2
2000d1e4:	10651800 	addk	r3, r5, r3
2000d1e8:	e8630000 	lwi	r3, r3, 0
2000d1ec:	14632000 	rsubk	r3, r3, r4
}
2000d1f0:	10330000 	addk	r1, r19, r0
2000d1f4:	ea610004 	lwi	r19, r1, 4
2000d1f8:	ea810008 	lwi	r20, r1, 8
2000d1fc:	3021000c 	addik	r1, r1, 12
2000d200:	b60f0008 	rtsd	r15, 8
2000d204:	80000000 	or	r0, r0, r0

2000d208 <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000d208:	3021fff0 	addik	r1, r1, -16
2000d20c:	fa610008 	swi	r19, r1, 8
2000d210:	fa81000c 	swi	r20, r1, 12
2000d214:	12610000 	addk	r19, r1, r0
2000d218:	96808000 	mfs	r20, rpc
2000d21c:	b000dfff 	imm	-8193
2000d220:	32944744 	addik	r20, r20, 18244
2000d224:	f8b30014 	swi	r5, r19, 20
2000d228:	f8d30018 	swi	r6, r19, 24
2000d22c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000d230:	f8130004 	swi	r0, r19, 4
2000d234:	b800005c 	bri	92		// 2000d290
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000d238:	e8730014 	lwi	r3, r19, 20
2000d23c:	e8830000 	lwi	r4, r3, 0
2000d240:	e8730014 	lwi	r3, r19, 20
2000d244:	e8a3000c 	lwi	r5, r3, 12
2000d248:	e8730004 	lwi	r3, r19, 4
2000d24c:	64630402 	bslli	r3, r3, 2
2000d250:	10651800 	addk	r3, r5, r3
2000d254:	e8a30000 	lwi	r5, r3, 0
2000d258:	e8730014 	lwi	r3, r19, 20
2000d25c:	e8630010 	lwi	r3, r3, 16
2000d260:	e8630000 	lwi	r3, r3, 0
2000d264:	14632800 	rsubk	r3, r3, r5
2000d268:	10641800 	addk	r3, r4, r3
2000d26c:	30830001 	addik	r4, r3, 1
2000d270:	e873001c 	lwi	r3, r19, 28
2000d274:	16441803 	cmpu	r18, r4, r3
2000d278:	bc52000c 	blti	r18, 12		// 2000d284
            return 0;
2000d27c:	10600000 	addk	r3, r0, r0
2000d280:	b8000024 	bri	36		// 2000d2a4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000d284:	e8730004 	lwi	r3, r19, 4
2000d288:	30630001 	addik	r3, r3, 1
2000d28c:	f8730004 	swi	r3, r19, 4
2000d290:	e8930004 	lwi	r4, r19, 4
2000d294:	e8730018 	lwi	r3, r19, 24
2000d298:	16432003 	cmpu	r18, r3, r4
2000d29c:	bc52ff9c 	blti	r18, -100		// 2000d238
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000d2a0:	30600001 	addik	r3, r0, 1
}
2000d2a4:	10330000 	addk	r1, r19, r0
2000d2a8:	ea610008 	lwi	r19, r1, 8
2000d2ac:	ea81000c 	lwi	r20, r1, 12
2000d2b0:	30210010 	addik	r1, r1, 16
2000d2b4:	b60f0008 	rtsd	r15, 8
2000d2b8:	80000000 	or	r0, r0, r0

2000d2bc <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000d2bc:	3021ffe8 	addik	r1, r1, -24
2000d2c0:	fa610010 	swi	r19, r1, 16
2000d2c4:	fa810014 	swi	r20, r1, 20
2000d2c8:	12610000 	addk	r19, r1, r0
2000d2cc:	96808000 	mfs	r20, rpc
2000d2d0:	b000dfff 	imm	-8193
2000d2d4:	32944690 	addik	r20, r20, 18064
2000d2d8:	f8b3001c 	swi	r5, r19, 28
2000d2dc:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000d2e0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000d2e4:	f8130004 	swi	r0, r19, 4
2000d2e8:	b8000054 	bri	84		// 2000d33c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000d2ec:	e873001c 	lwi	r3, r19, 28
2000d2f0:	e8630010 	lwi	r3, r3, 16
2000d2f4:	e8830000 	lwi	r4, r3, 0
2000d2f8:	e873001c 	lwi	r3, r19, 28
2000d2fc:	e8a3000c 	lwi	r5, r3, 12
2000d300:	e8730004 	lwi	r3, r19, 4
2000d304:	64630402 	bslli	r3, r3, 2
2000d308:	10651800 	addk	r3, r5, r3
2000d30c:	e8630000 	lwi	r3, r3, 0
2000d310:	14632000 	rsubk	r3, r3, r4
2000d314:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000d318:	e8930008 	lwi	r4, r19, 8
2000d31c:	e873000c 	lwi	r3, r19, 12
2000d320:	16441803 	cmpu	r18, r4, r3
2000d324:	bcb20008 	bgei	r18, 8		// 2000d32c
2000d328:	10640000 	addk	r3, r4, r0
2000d32c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000d330:	e8730004 	lwi	r3, r19, 4
2000d334:	30630001 	addik	r3, r3, 1
2000d338:	f8730004 	swi	r3, r19, 4
2000d33c:	e8930004 	lwi	r4, r19, 4
2000d340:	e8730020 	lwi	r3, r19, 32
2000d344:	16432003 	cmpu	r18, r3, r4
2000d348:	bc52ffa4 	blti	r18, -92		// 2000d2ec
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000d34c:	e873001c 	lwi	r3, r19, 28
2000d350:	e8830000 	lwi	r4, r3, 0
2000d354:	e8730008 	lwi	r3, r19, 8
2000d358:	14632000 	rsubk	r3, r3, r4
}
2000d35c:	10330000 	addk	r1, r19, r0
2000d360:	ea610010 	lwi	r19, r1, 16
2000d364:	ea810014 	lwi	r20, r1, 20
2000d368:	30210018 	addik	r1, r1, 24
2000d36c:	b60f0008 	rtsd	r15, 8
2000d370:	80000000 	or	r0, r0, r0

2000d374 <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000d374:	3021fff0 	addik	r1, r1, -16
2000d378:	fa610008 	swi	r19, r1, 8
2000d37c:	fa81000c 	swi	r20, r1, 12
2000d380:	12610000 	addk	r19, r1, r0
2000d384:	96808000 	mfs	r20, rpc
2000d388:	b000dfff 	imm	-8193
2000d38c:	329445d8 	addik	r20, r20, 17880
2000d390:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2000d394:	e8730014 	lwi	r3, r19, 20
2000d398:	e8630010 	lwi	r3, r3, 16
2000d39c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000d3a0:	f8130004 	swi	r0, r19, 4
2000d3a4:	b8000028 	bri	40		// 2000d3cc
        fifo->read_inds[i] = 0;
2000d3a8:	e8730014 	lwi	r3, r19, 20
2000d3ac:	e883000c 	lwi	r4, r3, 12
2000d3b0:	e8730004 	lwi	r3, r19, 4
2000d3b4:	64630402 	bslli	r3, r3, 2
2000d3b8:	10641800 	addk	r3, r4, r3
2000d3bc:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000d3c0:	e8730004 	lwi	r3, r19, 4
2000d3c4:	30630001 	addik	r3, r3, 1
2000d3c8:	f8730004 	swi	r3, r19, 4
2000d3cc:	e8730014 	lwi	r3, r19, 20
2000d3d0:	e8830008 	lwi	r4, r3, 8
2000d3d4:	e8730004 	lwi	r3, r19, 4
2000d3d8:	16441803 	cmpu	r18, r4, r3
2000d3dc:	bc52ffcc 	blti	r18, -52		// 2000d3a8
        fifo->read_inds[i] = 0;
    }
}
2000d3e0:	10330000 	addk	r1, r19, r0
2000d3e4:	ea610008 	lwi	r19, r1, 8
2000d3e8:	ea81000c 	lwi	r20, r1, 12
2000d3ec:	30210010 	addik	r1, r1, 16
2000d3f0:	b60f0008 	rtsd	r15, 8
2000d3f4:	80000000 	or	r0, r0, r0

2000d3f8 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000d3f8:	3021fff0 	addik	r1, r1, -16
2000d3fc:	fa610008 	swi	r19, r1, 8
2000d400:	fa81000c 	swi	r20, r1, 12
2000d404:	12610000 	addk	r19, r1, r0
2000d408:	96808000 	mfs	r20, rpc
2000d40c:	b000dfff 	imm	-8193
2000d410:	32944554 	addik	r20, r20, 17748
2000d414:	f8b30014 	swi	r5, r19, 20
2000d418:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000d41c:	e8730014 	lwi	r3, r19, 20
2000d420:	e8830004 	lwi	r4, r3, 4
2000d424:	e8730014 	lwi	r3, r19, 20
2000d428:	e8a3000c 	lwi	r5, r3, 12
2000d42c:	e8730018 	lwi	r3, r19, 24
2000d430:	64630402 	bslli	r3, r3, 2
2000d434:	10651800 	addk	r3, r5, r3
2000d438:	e8a30000 	lwi	r5, r3, 0
2000d43c:	e8730014 	lwi	r3, r19, 20
2000d440:	e8630000 	lwi	r3, r3, 0
2000d444:	3063ffff 	addik	r3, r3, -1
2000d448:	84651800 	and	r3, r5, r3
2000d44c:	64630402 	bslli	r3, r3, 2
2000d450:	10641800 	addk	r3, r4, r3
2000d454:	e8630000 	lwi	r3, r3, 0
2000d458:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000d45c:	e8730014 	lwi	r3, r19, 20
2000d460:	e883000c 	lwi	r4, r3, 12
2000d464:	e8730018 	lwi	r3, r19, 24
2000d468:	64630402 	bslli	r3, r3, 2
2000d46c:	10641800 	addk	r3, r4, r3
2000d470:	e8830000 	lwi	r4, r3, 0
2000d474:	30840001 	addik	r4, r4, 1
2000d478:	f8830000 	swi	r4, r3, 0
    return value;
2000d47c:	e8730004 	lwi	r3, r19, 4
}
2000d480:	10330000 	addk	r1, r19, r0
2000d484:	ea610008 	lwi	r19, r1, 8
2000d488:	ea81000c 	lwi	r20, r1, 12
2000d48c:	30210010 	addik	r1, r1, 16
2000d490:	b60f0008 	rtsd	r15, 8
2000d494:	80000000 	or	r0, r0, r0

2000d498 <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000d498:	3021fff4 	addik	r1, r1, -12
2000d49c:	fa610004 	swi	r19, r1, 4
2000d4a0:	fa810008 	swi	r20, r1, 8
2000d4a4:	12610000 	addk	r19, r1, r0
2000d4a8:	96808000 	mfs	r20, rpc
2000d4ac:	b000dfff 	imm	-8193
2000d4b0:	329444b4 	addik	r20, r20, 17588
2000d4b4:	f8b30010 	swi	r5, r19, 16
2000d4b8:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000d4bc:	e8730010 	lwi	r3, r19, 16
2000d4c0:	e8830004 	lwi	r4, r3, 4
2000d4c4:	e8730010 	lwi	r3, r19, 16
2000d4c8:	e8630010 	lwi	r3, r3, 16
2000d4cc:	e8a30000 	lwi	r5, r3, 0
2000d4d0:	e8730010 	lwi	r3, r19, 16
2000d4d4:	e8630000 	lwi	r3, r3, 0
2000d4d8:	3063ffff 	addik	r3, r3, -1
2000d4dc:	84651800 	and	r3, r5, r3
2000d4e0:	64630402 	bslli	r3, r3, 2
2000d4e4:	10641800 	addk	r3, r4, r3
2000d4e8:	e8930014 	lwi	r4, r19, 20
2000d4ec:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2000d4f0:	e8730010 	lwi	r3, r19, 16
2000d4f4:	e8630010 	lwi	r3, r3, 16
2000d4f8:	e8830000 	lwi	r4, r3, 0
2000d4fc:	30840001 	addik	r4, r4, 1
2000d500:	f8830000 	swi	r4, r3, 0
}
2000d504:	10330000 	addk	r1, r19, r0
2000d508:	ea610004 	lwi	r19, r1, 4
2000d50c:	ea810008 	lwi	r20, r1, 8
2000d510:	3021000c 	addik	r1, r1, 12
2000d514:	b60f0008 	rtsd	r15, 8
2000d518:	80000000 	or	r0, r0, r0

2000d51c <read_MOT>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_MOT() {
2000d51c:	3021ffdc 	addik	r1, r1, -36
2000d520:	f9e10000 	swi	r15, r1, 0
2000d524:	fa61001c 	swi	r19, r1, 28
2000d528:	fa810020 	swi	r20, r1, 32
2000d52c:	12610000 	addk	r19, r1, r0
2000d530:	96808000 	mfs	r20, rpc
2000d534:	b000dfff 	imm	-8193
2000d538:	3294442c 	addik	r20, r20, 17452
		index_MOT = decoder_motion_add_MOT->read_inds[0];
2000d53c:	b0000000 	imm	0
2000d540:	e874006c 	lwi	r3, r20, 108
2000d544:	e8630000 	lwi	r3, r3, 0
2000d548:	e863000c 	lwi	r3, r3, 12
2000d54c:	e8830000 	lwi	r4, r3, 0
2000d550:	b0000000 	imm	0
2000d554:	e8740074 	lwi	r3, r20, 116
2000d558:	f8830000 	swi	r4, r3, 0
		numTokens_MOT = index_MOT + fifo_i16_get_num_tokens(decoder_motion_add_MOT, 0);
2000d55c:	b0000000 	imm	0
2000d560:	e874006c 	lwi	r3, r20, 108
2000d564:	e8630000 	lwi	r3, r3, 0
2000d568:	10a30000 	addk	r5, r3, r0
2000d56c:	10c00000 	addk	r6, r0, r0
2000d570:	b0000000 	imm	0
2000d574:	e894005c 	lwi	r4, r20, 92
2000d578:	99fc2000 	brald	r15, r4
2000d57c:	80000000 	or	r0, r0, r0
2000d580:	10830000 	addk	r4, r3, r0
2000d584:	b0000000 	imm	0
2000d588:	e8740074 	lwi	r3, r20, 116
2000d58c:	e8630000 	lwi	r3, r3, 0
2000d590:	10841800 	addk	r4, r4, r3
2000d594:	b0000000 	imm	0
2000d598:	e8740078 	lwi	r3, r20, 120
2000d59c:	f8830000 	swi	r4, r3, 0
	}
2000d5a0:	e9e10000 	lwi	r15, r1, 0
2000d5a4:	10330000 	addk	r1, r19, r0
2000d5a8:	ea61001c 	lwi	r19, r1, 28
2000d5ac:	ea810020 	lwi	r20, r1, 32
2000d5b0:	30210024 	addik	r1, r1, 36
2000d5b4:	b60f0008 	rtsd	r15, 8
2000d5b8:	80000000 	or	r0, r0, r0

2000d5bc <read_end_MOT>:
	
	static void read_end_MOT() {
2000d5bc:	3021fff4 	addik	r1, r1, -12
2000d5c0:	fa610004 	swi	r19, r1, 4
2000d5c4:	fa810008 	swi	r20, r1, 8
2000d5c8:	12610000 	addk	r19, r1, r0
2000d5cc:	96808000 	mfs	r20, rpc
2000d5d0:	b000dfff 	imm	-8193
2000d5d4:	32944390 	addik	r20, r20, 17296
		decoder_motion_add_MOT->read_inds[0] = index_MOT;
2000d5d8:	b0000000 	imm	0
2000d5dc:	e874006c 	lwi	r3, r20, 108
2000d5e0:	e8630000 	lwi	r3, r3, 0
2000d5e4:	e863000c 	lwi	r3, r3, 12
2000d5e8:	b0000000 	imm	0
2000d5ec:	e8940074 	lwi	r4, r20, 116
2000d5f0:	e8840000 	lwi	r4, r4, 0
2000d5f4:	f8830000 	swi	r4, r3, 0
	}
2000d5f8:	10330000 	addk	r1, r19, r0
2000d5fc:	ea610004 	lwi	r19, r1, 4
2000d600:	ea810008 	lwi	r20, r1, 8
2000d604:	3021000c 	addik	r1, r1, 12
2000d608:	b60f0008 	rtsd	r15, 8
2000d60c:	80000000 	or	r0, r0, r0

2000d610 <read_TEX>:
	static void read_TEX() {
2000d610:	3021ffdc 	addik	r1, r1, -36
2000d614:	f9e10000 	swi	r15, r1, 0
2000d618:	fa61001c 	swi	r19, r1, 28
2000d61c:	fa810020 	swi	r20, r1, 32
2000d620:	12610000 	addk	r19, r1, r0
2000d624:	96808000 	mfs	r20, rpc
2000d628:	b000dfff 	imm	-8193
2000d62c:	32944338 	addik	r20, r20, 17208
		index_TEX = decoder_motion_add_TEX->read_inds[0];
2000d630:	b0000000 	imm	0
2000d634:	e8740068 	lwi	r3, r20, 104
2000d638:	e8630000 	lwi	r3, r3, 0
2000d63c:	e863000c 	lwi	r3, r3, 12
2000d640:	e8830000 	lwi	r4, r3, 0
2000d644:	b0000000 	imm	0
2000d648:	e874007c 	lwi	r3, r20, 124
2000d64c:	f8830000 	swi	r4, r3, 0
		numTokens_TEX = index_TEX + fifo_i16_get_num_tokens(decoder_motion_add_TEX, 0);
2000d650:	b0000000 	imm	0
2000d654:	e8740068 	lwi	r3, r20, 104
2000d658:	e8630000 	lwi	r3, r3, 0
2000d65c:	10a30000 	addk	r5, r3, r0
2000d660:	10c00000 	addk	r6, r0, r0
2000d664:	b0000000 	imm	0
2000d668:	e894005c 	lwi	r4, r20, 92
2000d66c:	99fc2000 	brald	r15, r4
2000d670:	80000000 	or	r0, r0, r0
2000d674:	10830000 	addk	r4, r3, r0
2000d678:	b0000000 	imm	0
2000d67c:	e874007c 	lwi	r3, r20, 124
2000d680:	e8630000 	lwi	r3, r3, 0
2000d684:	10841800 	addk	r4, r4, r3
2000d688:	b0000000 	imm	0
2000d68c:	e8740080 	lwi	r3, r20, 128
2000d690:	f8830000 	swi	r4, r3, 0
	}
2000d694:	e9e10000 	lwi	r15, r1, 0
2000d698:	10330000 	addk	r1, r19, r0
2000d69c:	ea61001c 	lwi	r19, r1, 28
2000d6a0:	ea810020 	lwi	r20, r1, 32
2000d6a4:	30210024 	addik	r1, r1, 36
2000d6a8:	b60f0008 	rtsd	r15, 8
2000d6ac:	80000000 	or	r0, r0, r0

2000d6b0 <read_end_TEX>:
	
	static void read_end_TEX() {
2000d6b0:	3021fff4 	addik	r1, r1, -12
2000d6b4:	fa610004 	swi	r19, r1, 4
2000d6b8:	fa810008 	swi	r20, r1, 8
2000d6bc:	12610000 	addk	r19, r1, r0
2000d6c0:	96808000 	mfs	r20, rpc
2000d6c4:	b000dfff 	imm	-8193
2000d6c8:	3294429c 	addik	r20, r20, 17052
		decoder_motion_add_TEX->read_inds[0] = index_TEX;
2000d6cc:	b0000000 	imm	0
2000d6d0:	e8740068 	lwi	r3, r20, 104
2000d6d4:	e8630000 	lwi	r3, r3, 0
2000d6d8:	e863000c 	lwi	r3, r3, 12
2000d6dc:	b0000000 	imm	0
2000d6e0:	e894007c 	lwi	r4, r20, 124
2000d6e4:	e8840000 	lwi	r4, r4, 0
2000d6e8:	f8830000 	swi	r4, r3, 0
	}
2000d6ec:	10330000 	addk	r1, r19, r0
2000d6f0:	ea610004 	lwi	r19, r1, 4
2000d6f4:	ea810008 	lwi	r20, r1, 8
2000d6f8:	3021000c 	addik	r1, r1, 12
2000d6fc:	b60f0008 	rtsd	r15, 8
2000d700:	80000000 	or	r0, r0, r0

2000d704 <read_BTYPE>:
	static void read_BTYPE() {
2000d704:	3021ffdc 	addik	r1, r1, -36
2000d708:	f9e10000 	swi	r15, r1, 0
2000d70c:	fa61001c 	swi	r19, r1, 28
2000d710:	fa810020 	swi	r20, r1, 32
2000d714:	12610000 	addk	r19, r1, r0
2000d718:	96808000 	mfs	r20, rpc
2000d71c:	b000dfff 	imm	-8193
2000d720:	32944244 	addik	r20, r20, 16964
		index_BTYPE = decoder_motion_add_BTYPE->read_inds[4];
2000d724:	b0000000 	imm	0
2000d728:	e8740064 	lwi	r3, r20, 100
2000d72c:	e8630000 	lwi	r3, r3, 0
2000d730:	e863000c 	lwi	r3, r3, 12
2000d734:	e8830010 	lwi	r4, r3, 16
2000d738:	b0000000 	imm	0
2000d73c:	e8740084 	lwi	r3, r20, 132
2000d740:	f8830000 	swi	r4, r3, 0
		numTokens_BTYPE = index_BTYPE + fifo_i16_get_num_tokens(decoder_motion_add_BTYPE, 4);
2000d744:	b0000000 	imm	0
2000d748:	e8740064 	lwi	r3, r20, 100
2000d74c:	e8630000 	lwi	r3, r3, 0
2000d750:	10a30000 	addk	r5, r3, r0
2000d754:	30c00004 	addik	r6, r0, 4
2000d758:	b0000000 	imm	0
2000d75c:	e894005c 	lwi	r4, r20, 92
2000d760:	99fc2000 	brald	r15, r4
2000d764:	80000000 	or	r0, r0, r0
2000d768:	10830000 	addk	r4, r3, r0
2000d76c:	b0000000 	imm	0
2000d770:	e8740084 	lwi	r3, r20, 132
2000d774:	e8630000 	lwi	r3, r3, 0
2000d778:	10841800 	addk	r4, r4, r3
2000d77c:	b0000000 	imm	0
2000d780:	e8740088 	lwi	r3, r20, 136
2000d784:	f8830000 	swi	r4, r3, 0
	}
2000d788:	e9e10000 	lwi	r15, r1, 0
2000d78c:	10330000 	addk	r1, r19, r0
2000d790:	ea61001c 	lwi	r19, r1, 28
2000d794:	ea810020 	lwi	r20, r1, 32
2000d798:	30210024 	addik	r1, r1, 36
2000d79c:	b60f0008 	rtsd	r15, 8
2000d7a0:	80000000 	or	r0, r0, r0

2000d7a4 <read_end_BTYPE>:
	
	static void read_end_BTYPE() {
2000d7a4:	3021fff4 	addik	r1, r1, -12
2000d7a8:	fa610004 	swi	r19, r1, 4
2000d7ac:	fa810008 	swi	r20, r1, 8
2000d7b0:	12610000 	addk	r19, r1, r0
2000d7b4:	96808000 	mfs	r20, rpc
2000d7b8:	b000dfff 	imm	-8193
2000d7bc:	329441a8 	addik	r20, r20, 16808
		decoder_motion_add_BTYPE->read_inds[4] = index_BTYPE;
2000d7c0:	b0000000 	imm	0
2000d7c4:	e8740064 	lwi	r3, r20, 100
2000d7c8:	e8630000 	lwi	r3, r3, 0
2000d7cc:	e863000c 	lwi	r3, r3, 12
2000d7d0:	30630010 	addik	r3, r3, 16
2000d7d4:	b0000000 	imm	0
2000d7d8:	e8940084 	lwi	r4, r20, 132
2000d7dc:	e8840000 	lwi	r4, r4, 0
2000d7e0:	f8830000 	swi	r4, r3, 0
	}
2000d7e4:	10330000 	addk	r1, r19, r0
2000d7e8:	ea610004 	lwi	r19, r1, 4
2000d7ec:	ea810008 	lwi	r20, r1, 8
2000d7f0:	3021000c 	addik	r1, r1, 12
2000d7f4:	b60f0008 	rtsd	r15, 8
2000d7f8:	80000000 	or	r0, r0, r0

2000d7fc <write_VID>:

	static void write_VID() {
2000d7fc:	3021ffdc 	addik	r1, r1, -36
2000d800:	f9e10000 	swi	r15, r1, 0
2000d804:	fa61001c 	swi	r19, r1, 28
2000d808:	fa810020 	swi	r20, r1, 32
2000d80c:	12610000 	addk	r19, r1, r0
2000d810:	96808000 	mfs	r20, rpc
2000d814:	b000dfff 	imm	-8193
2000d818:	3294414c 	addik	r20, r20, 16716
		index_VID = (*decoder_motion_add_VID->write_ind);
2000d81c:	b0000000 	imm	0
2000d820:	e8740070 	lwi	r3, r20, 112
2000d824:	e8630000 	lwi	r3, r3, 0
2000d828:	e8630010 	lwi	r3, r3, 16
2000d82c:	e8830000 	lwi	r4, r3, 0
2000d830:	b0000000 	imm	0
2000d834:	e874008c 	lwi	r3, r20, 140
2000d838:	f8830000 	swi	r4, r3, 0
		numFree_VID = index_VID + fifo_i16_get_room(decoder_motion_add_VID, NUM_READERS_VID);
2000d83c:	b0000000 	imm	0
2000d840:	e8740070 	lwi	r3, r20, 112
2000d844:	e8630000 	lwi	r3, r3, 0
2000d848:	10a30000 	addk	r5, r3, r0
2000d84c:	30c00002 	addik	r6, r0, 2
2000d850:	b0000000 	imm	0
2000d854:	e8940060 	lwi	r4, r20, 96
2000d858:	99fc2000 	brald	r15, r4
2000d85c:	80000000 	or	r0, r0, r0
2000d860:	10830000 	addk	r4, r3, r0
2000d864:	b0000000 	imm	0
2000d868:	e874008c 	lwi	r3, r20, 140
2000d86c:	e8630000 	lwi	r3, r3, 0
2000d870:	10841800 	addk	r4, r4, r3
2000d874:	b0000000 	imm	0
2000d878:	e8740090 	lwi	r3, r20, 144
2000d87c:	f8830000 	swi	r4, r3, 0
	}
2000d880:	e9e10000 	lwi	r15, r1, 0
2000d884:	10330000 	addk	r1, r19, r0
2000d888:	ea61001c 	lwi	r19, r1, 28
2000d88c:	ea810020 	lwi	r20, r1, 32
2000d890:	30210024 	addik	r1, r1, 36
2000d894:	b60f0008 	rtsd	r15, 8
2000d898:	80000000 	or	r0, r0, r0

2000d89c <write_end_VID>:
	
	static void write_end_VID() {
2000d89c:	3021fff4 	addik	r1, r1, -12
2000d8a0:	fa610004 	swi	r19, r1, 4
2000d8a4:	fa810008 	swi	r20, r1, 8
2000d8a8:	12610000 	addk	r19, r1, r0
2000d8ac:	96808000 	mfs	r20, rpc
2000d8b0:	b000dfff 	imm	-8193
2000d8b4:	329440b0 	addik	r20, r20, 16560
		(*decoder_motion_add_VID->write_ind) = index_VID;
2000d8b8:	b0000000 	imm	0
2000d8bc:	e8740070 	lwi	r3, r20, 112
2000d8c0:	e8630000 	lwi	r3, r3, 0
2000d8c4:	e8630010 	lwi	r3, r3, 16
2000d8c8:	b0000000 	imm	0
2000d8cc:	e894008c 	lwi	r4, r20, 140
2000d8d0:	e8840000 	lwi	r4, r4, 0
2000d8d4:	f8830000 	swi	r4, r3, 0
	}
2000d8d8:	10330000 	addk	r1, r19, r0
2000d8dc:	ea610004 	lwi	r19, r1, 4
2000d8e0:	ea810008 	lwi	r20, r1, 8
2000d8e4:	3021000c 	addik	r1, r1, 12
2000d8e8:	b60f0008 	rtsd	r15, 8
2000d8ec:	80000000 	or	r0, r0, r0

2000d8f0 <isSchedulable_cmd_newVop>:
	// Functions/procedures


	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_cmd_newVop() {
2000d8f0:	3021ffe8 	addik	r1, r1, -24
2000d8f4:	fa610010 	swi	r19, r1, 16
2000d8f8:	fa810014 	swi	r20, r1, 20
2000d8fc:	12610000 	addk	r19, r1, r0
2000d900:	96808000 	mfs	r20, rpc
2000d904:	b000dfff 	imm	-8193
2000d908:	3294405c 	addik	r20, r20, 16476
		i32 result;
		i16 cmd;
		i32 local_NEWVOP;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2000d90c:	b0000000 	imm	0
2000d910:	e8740064 	lwi	r3, r20, 100
2000d914:	e8630000 	lwi	r3, r3, 0
2000d918:	e8830004 	lwi	r4, r3, 4
2000d91c:	b0000000 	imm	0
2000d920:	e8740084 	lwi	r3, r20, 132
2000d924:	e8630000 	lwi	r3, r3, 0
2000d928:	a46301ff 	andi	r3, r3, 511
2000d92c:	10631800 	addk	r3, r3, r3
2000d930:	10641800 	addk	r3, r4, r3
2000d934:	e4630000 	lhui	r3, r3, 0
2000d938:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
2000d93c:	30600800 	addik	r3, r0, 2048	// 800 <decoder_parser_mvrecon_A>
2000d940:	f8730008 	swi	r3, r19, 8
		result = (cmd & local_NEWVOP) != 0;
2000d944:	e4730004 	lhui	r3, r19, 4
2000d948:	90830061 	sext16	r4, r3
2000d94c:	e8730008 	lwi	r3, r19, 8
2000d950:	84841800 	and	r4, r4, r3
2000d954:	10600000 	addk	r3, r0, r0
2000d958:	8c641c00 	pcmpne	r3, r4, r3
2000d95c:	a46300ff 	andi	r3, r3, 255
2000d960:	f873000c 	swi	r3, r19, 12
		return result;
2000d964:	e873000c 	lwi	r3, r19, 12
	}
2000d968:	10330000 	addk	r1, r19, r0
2000d96c:	ea610010 	lwi	r19, r1, 16
2000d970:	ea810014 	lwi	r20, r1, 20
2000d974:	30210018 	addik	r1, r1, 24
2000d978:	b60f0008 	rtsd	r15, 8
2000d97c:	80000000 	or	r0, r0, r0

2000d980 <cmd_newVop>:
	
	static void cmd_newVop() {
2000d980:	3021ffd4 	addik	r1, r1, -44
2000d984:	f9e10000 	swi	r15, r1, 0
2000d988:	fa610024 	swi	r19, r1, 36
2000d98c:	fa810028 	swi	r20, r1, 40
2000d990:	12610000 	addk	r19, r1, r0
2000d994:	96808000 	mfs	r20, rpc
2000d998:	b000dfff 	imm	-8193
2000d99c:	32943fc8 	addik	r20, r20, 16328
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2000d9a0:	b0000000 	imm	0
2000d9a4:	e8740084 	lwi	r3, r20, 132
2000d9a8:	e8630000 	lwi	r3, r3, 0
2000d9ac:	a46301ff 	andi	r3, r3, 511
2000d9b0:	f873001c 	swi	r3, r19, 28
	
		i16 cmd;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2000d9b4:	b0000000 	imm	0
2000d9b8:	e8740064 	lwi	r3, r20, 100
2000d9bc:	e8630000 	lwi	r3, r3, 0
2000d9c0:	e8830004 	lwi	r4, r3, 4
2000d9c4:	b0000000 	imm	0
2000d9c8:	e8740084 	lwi	r3, r20, 132
2000d9cc:	e8630000 	lwi	r3, r3, 0
2000d9d0:	a46301ff 	andi	r3, r3, 511
2000d9d4:	10631800 	addk	r3, r3, r3
2000d9d8:	10641800 	addk	r3, r4, r3
2000d9dc:	e4630000 	lhui	r3, r3, 0
2000d9e0:	f4730020 	shi	r3, r19, 32
	
		// Update ports indexes
		index_BTYPE += 1;
2000d9e4:	b0000000 	imm	0
2000d9e8:	e8740084 	lwi	r3, r20, 132
2000d9ec:	e8630000 	lwi	r3, r3, 0
2000d9f0:	30830001 	addik	r4, r3, 1
2000d9f4:	b0000000 	imm	0
2000d9f8:	e8740084 	lwi	r3, r20, 132
2000d9fc:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
2000da00:	b0000000 	imm	0
2000da04:	e87400b0 	lwi	r3, r20, 176
2000da08:	99fc1800 	brald	r15, r3
2000da0c:	80000000 	or	r0, r0, r0
	}
2000da10:	e9e10000 	lwi	r15, r1, 0
2000da14:	10330000 	addk	r1, r19, r0
2000da18:	ea610024 	lwi	r19, r1, 36
2000da1c:	ea810028 	lwi	r20, r1, 40
2000da20:	3021002c 	addik	r1, r1, 44
2000da24:	b60f0008 	rtsd	r15, 8
2000da28:	80000000 	or	r0, r0, r0

2000da2c <isSchedulable_cmd_textureOnly>:
	static i32 isSchedulable_cmd_textureOnly() {
2000da2c:	3021ffe8 	addik	r1, r1, -24
2000da30:	fa610010 	swi	r19, r1, 16
2000da34:	fa810014 	swi	r20, r1, 20
2000da38:	12610000 	addk	r19, r1, r0
2000da3c:	96808000 	mfs	r20, rpc
2000da40:	b000dfff 	imm	-8193
2000da44:	32943f20 	addik	r20, r20, 16160
		i32 result;
		i16 cmd;
		i32 local_INTRA;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2000da48:	b0000000 	imm	0
2000da4c:	e8740064 	lwi	r3, r20, 100
2000da50:	e8630000 	lwi	r3, r3, 0
2000da54:	e8830004 	lwi	r4, r3, 4
2000da58:	b0000000 	imm	0
2000da5c:	e8740084 	lwi	r3, r20, 132
2000da60:	e8630000 	lwi	r3, r3, 0
2000da64:	a46301ff 	andi	r3, r3, 511
2000da68:	10631800 	addk	r3, r3, r3
2000da6c:	10641800 	addk	r3, r4, r3
2000da70:	e4630000 	lhui	r3, r3, 0
2000da74:	f4730004 	shi	r3, r19, 4
		local_INTRA = ConstantsBtype_INTRA;
2000da78:	30600400 	addik	r3, r0, 1024	// 400 <_HEAP_SIZE>
2000da7c:	f8730008 	swi	r3, r19, 8
		result = (cmd & local_INTRA) != 0;
2000da80:	e4730004 	lhui	r3, r19, 4
2000da84:	90830061 	sext16	r4, r3
2000da88:	e8730008 	lwi	r3, r19, 8
2000da8c:	84841800 	and	r4, r4, r3
2000da90:	10600000 	addk	r3, r0, r0
2000da94:	8c641c00 	pcmpne	r3, r4, r3
2000da98:	a46300ff 	andi	r3, r3, 255
2000da9c:	f873000c 	swi	r3, r19, 12
		return result;
2000daa0:	e873000c 	lwi	r3, r19, 12
	}
2000daa4:	10330000 	addk	r1, r19, r0
2000daa8:	ea610010 	lwi	r19, r1, 16
2000daac:	ea810014 	lwi	r20, r1, 20
2000dab0:	30210018 	addik	r1, r1, 24
2000dab4:	b60f0008 	rtsd	r15, 8
2000dab8:	80000000 	or	r0, r0, r0

2000dabc <cmd_textureOnly>:
	
	static void cmd_textureOnly() {
2000dabc:	3021ffd4 	addik	r1, r1, -44
2000dac0:	f9e10000 	swi	r15, r1, 0
2000dac4:	fa610024 	swi	r19, r1, 36
2000dac8:	fa810028 	swi	r20, r1, 40
2000dacc:	12610000 	addk	r19, r1, r0
2000dad0:	96808000 	mfs	r20, rpc
2000dad4:	b000dfff 	imm	-8193
2000dad8:	32943e8c 	addik	r20, r20, 16012
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2000dadc:	b0000000 	imm	0
2000dae0:	e8740084 	lwi	r3, r20, 132
2000dae4:	e8630000 	lwi	r3, r3, 0
2000dae8:	a46301ff 	andi	r3, r3, 511
2000daec:	f873001c 	swi	r3, r19, 28
	
		i16 cmd;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2000daf0:	b0000000 	imm	0
2000daf4:	e8740064 	lwi	r3, r20, 100
2000daf8:	e8630000 	lwi	r3, r3, 0
2000dafc:	e8830004 	lwi	r4, r3, 4
2000db00:	b0000000 	imm	0
2000db04:	e8740084 	lwi	r3, r20, 132
2000db08:	e8630000 	lwi	r3, r3, 0
2000db0c:	a46301ff 	andi	r3, r3, 511
2000db10:	10631800 	addk	r3, r3, r3
2000db14:	10641800 	addk	r3, r4, r3
2000db18:	e4630000 	lhui	r3, r3, 0
2000db1c:	f4730020 	shi	r3, r19, 32
	
		// Update ports indexes
		index_BTYPE += 1;
2000db20:	b0000000 	imm	0
2000db24:	e8740084 	lwi	r3, r20, 132
2000db28:	e8630000 	lwi	r3, r3, 0
2000db2c:	30830001 	addik	r4, r3, 1
2000db30:	b0000000 	imm	0
2000db34:	e8740084 	lwi	r3, r20, 132
2000db38:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
2000db3c:	b0000000 	imm	0
2000db40:	e87400b0 	lwi	r3, r20, 176
2000db44:	99fc1800 	brald	r15, r3
2000db48:	80000000 	or	r0, r0, r0
	}
2000db4c:	e9e10000 	lwi	r15, r1, 0
2000db50:	10330000 	addk	r1, r19, r0
2000db54:	ea610024 	lwi	r19, r1, 36
2000db58:	ea810028 	lwi	r20, r1, 40
2000db5c:	3021002c 	addik	r1, r1, 44
2000db60:	b60f0008 	rtsd	r15, 8
2000db64:	80000000 	or	r0, r0, r0

2000db68 <isSchedulable_cmd_motionOnly>:
	static i32 isSchedulable_cmd_motionOnly() {
2000db68:	3021ffe8 	addik	r1, r1, -24
2000db6c:	fa610010 	swi	r19, r1, 16
2000db70:	fa810014 	swi	r20, r1, 20
2000db74:	12610000 	addk	r19, r1, r0
2000db78:	96808000 	mfs	r20, rpc
2000db7c:	b000dfff 	imm	-8193
2000db80:	32943de4 	addik	r20, r20, 15844
		i32 result;
		i16 cmd;
		i32 local_ACCODED;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2000db84:	b0000000 	imm	0
2000db88:	e8740064 	lwi	r3, r20, 100
2000db8c:	e8630000 	lwi	r3, r3, 0
2000db90:	e8830004 	lwi	r4, r3, 4
2000db94:	b0000000 	imm	0
2000db98:	e8740084 	lwi	r3, r20, 132
2000db9c:	e8630000 	lwi	r3, r3, 0
2000dba0:	a46301ff 	andi	r3, r3, 511
2000dba4:	10631800 	addk	r3, r3, r3
2000dba8:	10641800 	addk	r3, r4, r3
2000dbac:	e4630000 	lhui	r3, r3, 0
2000dbb0:	f4730004 	shi	r3, r19, 4
		local_ACCODED = Constants_ACCODED;
2000dbb4:	30600002 	addik	r3, r0, 2
2000dbb8:	f8730008 	swi	r3, r19, 8
		result = (cmd & local_ACCODED) == 0;
2000dbbc:	e4730004 	lhui	r3, r19, 4
2000dbc0:	90830061 	sext16	r4, r3
2000dbc4:	e8730008 	lwi	r3, r19, 8
2000dbc8:	84841800 	and	r4, r4, r3
2000dbcc:	10600000 	addk	r3, r0, r0
2000dbd0:	88641c00 	pcmpeq	r3, r4, r3
2000dbd4:	a46300ff 	andi	r3, r3, 255
2000dbd8:	f873000c 	swi	r3, r19, 12
		return result;
2000dbdc:	e873000c 	lwi	r3, r19, 12
	}
2000dbe0:	10330000 	addk	r1, r19, r0
2000dbe4:	ea610010 	lwi	r19, r1, 16
2000dbe8:	ea810014 	lwi	r20, r1, 20
2000dbec:	30210018 	addik	r1, r1, 24
2000dbf0:	b60f0008 	rtsd	r15, 8
2000dbf4:	80000000 	or	r0, r0, r0

2000dbf8 <cmd_motionOnly>:
	
	static void cmd_motionOnly() {
2000dbf8:	3021ffd4 	addik	r1, r1, -44
2000dbfc:	f9e10000 	swi	r15, r1, 0
2000dc00:	fa610024 	swi	r19, r1, 36
2000dc04:	fa810028 	swi	r20, r1, 40
2000dc08:	12610000 	addk	r19, r1, r0
2000dc0c:	96808000 	mfs	r20, rpc
2000dc10:	b000dfff 	imm	-8193
2000dc14:	32943d50 	addik	r20, r20, 15696
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2000dc18:	b0000000 	imm	0
2000dc1c:	e8740084 	lwi	r3, r20, 132
2000dc20:	e8630000 	lwi	r3, r3, 0
2000dc24:	a46301ff 	andi	r3, r3, 511
2000dc28:	f873001c 	swi	r3, r19, 28
	
		i16 cmd;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2000dc2c:	b0000000 	imm	0
2000dc30:	e8740064 	lwi	r3, r20, 100
2000dc34:	e8630000 	lwi	r3, r3, 0
2000dc38:	e8830004 	lwi	r4, r3, 4
2000dc3c:	b0000000 	imm	0
2000dc40:	e8740084 	lwi	r3, r20, 132
2000dc44:	e8630000 	lwi	r3, r3, 0
2000dc48:	a46301ff 	andi	r3, r3, 511
2000dc4c:	10631800 	addk	r3, r3, r3
2000dc50:	10641800 	addk	r3, r4, r3
2000dc54:	e4630000 	lhui	r3, r3, 0
2000dc58:	f4730020 	shi	r3, r19, 32
	
		// Update ports indexes
		index_BTYPE += 1;
2000dc5c:	b0000000 	imm	0
2000dc60:	e8740084 	lwi	r3, r20, 132
2000dc64:	e8630000 	lwi	r3, r3, 0
2000dc68:	30830001 	addik	r4, r3, 1
2000dc6c:	b0000000 	imm	0
2000dc70:	e8740084 	lwi	r3, r20, 132
2000dc74:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
2000dc78:	b0000000 	imm	0
2000dc7c:	e87400b0 	lwi	r3, r20, 176
2000dc80:	99fc1800 	brald	r15, r3
2000dc84:	80000000 	or	r0, r0, r0
	}
2000dc88:	e9e10000 	lwi	r15, r1, 0
2000dc8c:	10330000 	addk	r1, r19, r0
2000dc90:	ea610024 	lwi	r19, r1, 36
2000dc94:	ea810028 	lwi	r20, r1, 40
2000dc98:	3021002c 	addik	r1, r1, 44
2000dc9c:	b60f0008 	rtsd	r15, 8
2000dca0:	80000000 	or	r0, r0, r0

2000dca4 <isSchedulable_cmd_other>:
	static i32 isSchedulable_cmd_other() {
2000dca4:	3021fff0 	addik	r1, r1, -16
2000dca8:	fa610008 	swi	r19, r1, 8
2000dcac:	fa81000c 	swi	r20, r1, 12
2000dcb0:	12610000 	addk	r19, r1, r0
2000dcb4:	96808000 	mfs	r20, rpc
2000dcb8:	b000dfff 	imm	-8193
2000dcbc:	32943ca8 	addik	r20, r20, 15528
		i32 result;
	
		result = 1;
2000dcc0:	30600001 	addik	r3, r0, 1
2000dcc4:	f8730004 	swi	r3, r19, 4
		return result;
2000dcc8:	e8730004 	lwi	r3, r19, 4
	}
2000dccc:	10330000 	addk	r1, r19, r0
2000dcd0:	ea610008 	lwi	r19, r1, 8
2000dcd4:	ea81000c 	lwi	r20, r1, 12
2000dcd8:	30210010 	addik	r1, r1, 16
2000dcdc:	b60f0008 	rtsd	r15, 8
2000dce0:	80000000 	or	r0, r0, r0

2000dce4 <cmd_other>:
	
	static void cmd_other() {
2000dce4:	3021ffd4 	addik	r1, r1, -44
2000dce8:	f9e10000 	swi	r15, r1, 0
2000dcec:	fa610024 	swi	r19, r1, 36
2000dcf0:	fa810028 	swi	r20, r1, 40
2000dcf4:	12610000 	addk	r19, r1, r0
2000dcf8:	96808000 	mfs	r20, rpc
2000dcfc:	b000dfff 	imm	-8193
2000dd00:	32943c64 	addik	r20, r20, 15460
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2000dd04:	b0000000 	imm	0
2000dd08:	e8740084 	lwi	r3, r20, 132
2000dd0c:	e8630000 	lwi	r3, r3, 0
2000dd10:	a46301ff 	andi	r3, r3, 511
2000dd14:	f873001c 	swi	r3, r19, 28
	
		i16 cmd;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2000dd18:	b0000000 	imm	0
2000dd1c:	e8740064 	lwi	r3, r20, 100
2000dd20:	e8630000 	lwi	r3, r3, 0
2000dd24:	e8830004 	lwi	r4, r3, 4
2000dd28:	b0000000 	imm	0
2000dd2c:	e8740084 	lwi	r3, r20, 132
2000dd30:	e8630000 	lwi	r3, r3, 0
2000dd34:	a46301ff 	andi	r3, r3, 511
2000dd38:	10631800 	addk	r3, r3, r3
2000dd3c:	10641800 	addk	r3, r4, r3
2000dd40:	e4630000 	lhui	r3, r3, 0
2000dd44:	f4730020 	shi	r3, r19, 32
	
		// Update ports indexes
		index_BTYPE += 1;
2000dd48:	b0000000 	imm	0
2000dd4c:	e8740084 	lwi	r3, r20, 132
2000dd50:	e8630000 	lwi	r3, r3, 0
2000dd54:	30830001 	addik	r4, r3, 1
2000dd58:	b0000000 	imm	0
2000dd5c:	e8740084 	lwi	r3, r20, 132
2000dd60:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
2000dd64:	b0000000 	imm	0
2000dd68:	e87400b0 	lwi	r3, r20, 176
2000dd6c:	99fc1800 	brald	r15, r3
2000dd70:	80000000 	or	r0, r0, r0
	}
2000dd74:	e9e10000 	lwi	r15, r1, 0
2000dd78:	10330000 	addk	r1, r19, r0
2000dd7c:	ea610024 	lwi	r19, r1, 36
2000dd80:	ea810028 	lwi	r20, r1, 40
2000dd84:	3021002c 	addik	r1, r1, 44
2000dd88:	b60f0008 	rtsd	r15, 8
2000dd8c:	80000000 	or	r0, r0, r0

2000dd90 <isSchedulable_texture>:
	static i32 isSchedulable_texture() {
2000dd90:	3021fff0 	addik	r1, r1, -16
2000dd94:	fa610008 	swi	r19, r1, 8
2000dd98:	fa81000c 	swi	r20, r1, 12
2000dd9c:	12610000 	addk	r19, r1, r0
2000dda0:	96808000 	mfs	r20, rpc
2000dda4:	b000dfff 	imm	-8193
2000dda8:	32943bbc 	addik	r20, r20, 15292
		i32 result;
	
		result = 1;
2000ddac:	30600001 	addik	r3, r0, 1
2000ddb0:	f8730004 	swi	r3, r19, 4
		return result;
2000ddb4:	e8730004 	lwi	r3, r19, 4
	}
2000ddb8:	10330000 	addk	r1, r19, r0
2000ddbc:	ea610008 	lwi	r19, r1, 8
2000ddc0:	ea81000c 	lwi	r20, r1, 12
2000ddc4:	30210010 	addik	r1, r1, 16
2000ddc8:	b60f0008 	rtsd	r15, 8
2000ddcc:	80000000 	or	r0, r0, r0

2000ddd0 <texture>:
	
	static void texture() {
2000ddd0:	3021ffcc 	addik	r1, r1, -52
2000ddd4:	f9e10000 	swi	r15, r1, 0
2000ddd8:	fa61002c 	swi	r19, r1, 44
2000dddc:	fa810030 	swi	r20, r1, 48
2000dde0:	12610000 	addk	r19, r1, r0
2000dde4:	96808000 	mfs	r20, rpc
2000dde8:	b000dfff 	imm	-8193
2000ddec:	32943b78 	addik	r20, r20, 15224
	
		// Compute aligned port indexes
		i32 index_aligned_TEX = index_TEX % SIZE_TEX;
2000ddf0:	b0000000 	imm	0
2000ddf4:	e874007c 	lwi	r3, r20, 124
2000ddf8:	e8630000 	lwi	r3, r3, 0
2000ddfc:	a46301ff 	andi	r3, r3, 511
2000de00:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_VID = index_VID % SIZE_VID;
2000de04:	b0000000 	imm	0
2000de08:	e874008c 	lwi	r3, r20, 140
2000de0c:	e8630000 	lwi	r3, r3, 0
2000de10:	a46301ff 	andi	r3, r3, 511
2000de14:	f8730024 	swi	r3, r19, 36
	
		i32 idx_TEX;
		i16 local_TEX;
	
		idx_TEX = 0;
2000de18:	f813001c 	swi	r0, r19, 28
		while (idx_TEX < 64) {
2000de1c:	b8000080 	bri	128		// 2000de9c
			local_TEX = tokens_TEX[(index_TEX + (idx_TEX)) % SIZE_TEX];
2000de20:	b0000000 	imm	0
2000de24:	e8740068 	lwi	r3, r20, 104
2000de28:	e8630000 	lwi	r3, r3, 0
2000de2c:	e8830004 	lwi	r4, r3, 4
2000de30:	b0000000 	imm	0
2000de34:	e874007c 	lwi	r3, r20, 124
2000de38:	e8a30000 	lwi	r5, r3, 0
2000de3c:	e873001c 	lwi	r3, r19, 28
2000de40:	10651800 	addk	r3, r5, r3
2000de44:	a46301ff 	andi	r3, r3, 511
2000de48:	10631800 	addk	r3, r3, r3
2000de4c:	10641800 	addk	r3, r4, r3
2000de50:	e4630000 	lhui	r3, r3, 0
2000de54:	f4730028 	shi	r3, r19, 40
			tokens_VID[(index_VID + (idx_TEX)) % SIZE_VID] = local_TEX;
2000de58:	b0000000 	imm	0
2000de5c:	e8740070 	lwi	r3, r20, 112
2000de60:	e8630000 	lwi	r3, r3, 0
2000de64:	e8830004 	lwi	r4, r3, 4
2000de68:	b0000000 	imm	0
2000de6c:	e874008c 	lwi	r3, r20, 140
2000de70:	e8a30000 	lwi	r5, r3, 0
2000de74:	e873001c 	lwi	r3, r19, 28
2000de78:	10651800 	addk	r3, r5, r3
2000de7c:	a46301ff 	andi	r3, r3, 511
2000de80:	10631800 	addk	r3, r3, r3
2000de84:	10641800 	addk	r3, r4, r3
2000de88:	e4930028 	lhui	r4, r19, 40
2000de8c:	f4830000 	shi	r4, r3, 0
			idx_TEX = idx_TEX + 1;
2000de90:	e873001c 	lwi	r3, r19, 28
2000de94:	30630001 	addik	r3, r3, 1
2000de98:	f873001c 	swi	r3, r19, 28
	
		i32 idx_TEX;
		i16 local_TEX;
	
		idx_TEX = 0;
		while (idx_TEX < 64) {
2000de9c:	e893001c 	lwi	r4, r19, 28
2000dea0:	3060003f 	addik	r3, r0, 63
2000dea4:	16441801 	cmp	r18, r4, r3
2000dea8:	bcb2ff78 	bgei	r18, -136		// 2000de20
			tokens_VID[(index_VID + (idx_TEX)) % SIZE_VID] = local_TEX;
			idx_TEX = idx_TEX + 1;
		}
	
		// Update ports indexes
		index_TEX += 64;
2000deac:	b0000000 	imm	0
2000deb0:	e874007c 	lwi	r3, r20, 124
2000deb4:	e8630000 	lwi	r3, r3, 0
2000deb8:	30830040 	addik	r4, r3, 64
2000debc:	b0000000 	imm	0
2000dec0:	e874007c 	lwi	r3, r20, 124
2000dec4:	f8830000 	swi	r4, r3, 0
		index_VID += 64;
2000dec8:	b0000000 	imm	0
2000decc:	e874008c 	lwi	r3, r20, 140
2000ded0:	e8630000 	lwi	r3, r3, 0
2000ded4:	30830040 	addik	r4, r3, 64
2000ded8:	b0000000 	imm	0
2000dedc:	e874008c 	lwi	r3, r20, 140
2000dee0:	f8830000 	swi	r4, r3, 0
		
		read_end_TEX();
2000dee4:	b0000000 	imm	0
2000dee8:	e87400a8 	lwi	r3, r20, 168
2000deec:	99fc1800 	brald	r15, r3
2000def0:	80000000 	or	r0, r0, r0
		write_end_VID();
2000def4:	b0000000 	imm	0
2000def8:	e87400b8 	lwi	r3, r20, 184
2000defc:	99fc1800 	brald	r15, r3
2000df00:	80000000 	or	r0, r0, r0
	}
2000df04:	e9e10000 	lwi	r15, r1, 0
2000df08:	10330000 	addk	r1, r19, r0
2000df0c:	ea61002c 	lwi	r19, r1, 44
2000df10:	ea810030 	lwi	r20, r1, 48
2000df14:	30210034 	addik	r1, r1, 52
2000df18:	b60f0008 	rtsd	r15, 8
2000df1c:	80000000 	or	r0, r0, r0

2000df20 <isSchedulable_motion>:
	static i32 isSchedulable_motion() {
2000df20:	3021fff0 	addik	r1, r1, -16
2000df24:	fa610008 	swi	r19, r1, 8
2000df28:	fa81000c 	swi	r20, r1, 12
2000df2c:	12610000 	addk	r19, r1, r0
2000df30:	96808000 	mfs	r20, rpc
2000df34:	b000dfff 	imm	-8193
2000df38:	32943a2c 	addik	r20, r20, 14892
		i32 result;
	
		result = 1;
2000df3c:	30600001 	addik	r3, r0, 1
2000df40:	f8730004 	swi	r3, r19, 4
		return result;
2000df44:	e8730004 	lwi	r3, r19, 4
	}
2000df48:	10330000 	addk	r1, r19, r0
2000df4c:	ea610008 	lwi	r19, r1, 8
2000df50:	ea81000c 	lwi	r20, r1, 12
2000df54:	30210010 	addik	r1, r1, 16
2000df58:	b60f0008 	rtsd	r15, 8
2000df5c:	80000000 	or	r0, r0, r0

2000df60 <motion>:
	
	static void motion() {
2000df60:	3021ffcc 	addik	r1, r1, -52
2000df64:	f9e10000 	swi	r15, r1, 0
2000df68:	fa61002c 	swi	r19, r1, 44
2000df6c:	fa810030 	swi	r20, r1, 48
2000df70:	12610000 	addk	r19, r1, r0
2000df74:	96808000 	mfs	r20, rpc
2000df78:	b000dfff 	imm	-8193
2000df7c:	329439e8 	addik	r20, r20, 14824
	
		// Compute aligned port indexes
		i32 index_aligned_MOT = index_MOT % SIZE_MOT;
2000df80:	b0000000 	imm	0
2000df84:	e8740074 	lwi	r3, r20, 116
2000df88:	e8630000 	lwi	r3, r3, 0
2000df8c:	a46301ff 	andi	r3, r3, 511
2000df90:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_VID = index_VID % SIZE_VID;
2000df94:	b0000000 	imm	0
2000df98:	e874008c 	lwi	r3, r20, 140
2000df9c:	e8630000 	lwi	r3, r3, 0
2000dfa0:	a46301ff 	andi	r3, r3, 511
2000dfa4:	f8730024 	swi	r3, r19, 36
	
		i32 idx_MOT;
		i16 local_MOT;
	
		idx_MOT = 0;
2000dfa8:	f813001c 	swi	r0, r19, 28
		while (idx_MOT < 64) {
2000dfac:	b8000080 	bri	128		// 2000e02c
			local_MOT = tokens_MOT[(index_MOT + (idx_MOT)) % SIZE_MOT];
2000dfb0:	b0000000 	imm	0
2000dfb4:	e874006c 	lwi	r3, r20, 108
2000dfb8:	e8630000 	lwi	r3, r3, 0
2000dfbc:	e8830004 	lwi	r4, r3, 4
2000dfc0:	b0000000 	imm	0
2000dfc4:	e8740074 	lwi	r3, r20, 116
2000dfc8:	e8a30000 	lwi	r5, r3, 0
2000dfcc:	e873001c 	lwi	r3, r19, 28
2000dfd0:	10651800 	addk	r3, r5, r3
2000dfd4:	a46301ff 	andi	r3, r3, 511
2000dfd8:	10631800 	addk	r3, r3, r3
2000dfdc:	10641800 	addk	r3, r4, r3
2000dfe0:	e4630000 	lhui	r3, r3, 0
2000dfe4:	f4730028 	shi	r3, r19, 40
			tokens_VID[(index_VID + (idx_MOT)) % SIZE_VID] = local_MOT;
2000dfe8:	b0000000 	imm	0
2000dfec:	e8740070 	lwi	r3, r20, 112
2000dff0:	e8630000 	lwi	r3, r3, 0
2000dff4:	e8830004 	lwi	r4, r3, 4
2000dff8:	b0000000 	imm	0
2000dffc:	e874008c 	lwi	r3, r20, 140
2000e000:	e8a30000 	lwi	r5, r3, 0
2000e004:	e873001c 	lwi	r3, r19, 28
2000e008:	10651800 	addk	r3, r5, r3
2000e00c:	a46301ff 	andi	r3, r3, 511
2000e010:	10631800 	addk	r3, r3, r3
2000e014:	10641800 	addk	r3, r4, r3
2000e018:	e4930028 	lhui	r4, r19, 40
2000e01c:	f4830000 	shi	r4, r3, 0
			idx_MOT = idx_MOT + 1;
2000e020:	e873001c 	lwi	r3, r19, 28
2000e024:	30630001 	addik	r3, r3, 1
2000e028:	f873001c 	swi	r3, r19, 28
	
		i32 idx_MOT;
		i16 local_MOT;
	
		idx_MOT = 0;
		while (idx_MOT < 64) {
2000e02c:	e893001c 	lwi	r4, r19, 28
2000e030:	3060003f 	addik	r3, r0, 63
2000e034:	16441801 	cmp	r18, r4, r3
2000e038:	bcb2ff78 	bgei	r18, -136		// 2000dfb0
			tokens_VID[(index_VID + (idx_MOT)) % SIZE_VID] = local_MOT;
			idx_MOT = idx_MOT + 1;
		}
	
		// Update ports indexes
		index_MOT += 64;
2000e03c:	b0000000 	imm	0
2000e040:	e8740074 	lwi	r3, r20, 116
2000e044:	e8630000 	lwi	r3, r3, 0
2000e048:	30830040 	addik	r4, r3, 64
2000e04c:	b0000000 	imm	0
2000e050:	e8740074 	lwi	r3, r20, 116
2000e054:	f8830000 	swi	r4, r3, 0
		index_VID += 64;
2000e058:	b0000000 	imm	0
2000e05c:	e874008c 	lwi	r3, r20, 140
2000e060:	e8630000 	lwi	r3, r3, 0
2000e064:	30830040 	addik	r4, r3, 64
2000e068:	b0000000 	imm	0
2000e06c:	e874008c 	lwi	r3, r20, 140
2000e070:	f8830000 	swi	r4, r3, 0
		
		read_end_MOT();
2000e074:	b0000000 	imm	0
2000e078:	e87400a0 	lwi	r3, r20, 160
2000e07c:	99fc1800 	brald	r15, r3
2000e080:	80000000 	or	r0, r0, r0
		write_end_VID();
2000e084:	b0000000 	imm	0
2000e088:	e87400b8 	lwi	r3, r20, 184
2000e08c:	99fc1800 	brald	r15, r3
2000e090:	80000000 	or	r0, r0, r0
	}
2000e094:	e9e10000 	lwi	r15, r1, 0
2000e098:	10330000 	addk	r1, r19, r0
2000e09c:	ea61002c 	lwi	r19, r1, 44
2000e0a0:	ea810030 	lwi	r20, r1, 48
2000e0a4:	30210034 	addik	r1, r1, 52
2000e0a8:	b60f0008 	rtsd	r15, 8
2000e0ac:	80000000 	or	r0, r0, r0

2000e0b0 <isSchedulable_combine>:
	static i32 isSchedulable_combine() {
2000e0b0:	3021fff0 	addik	r1, r1, -16
2000e0b4:	fa610008 	swi	r19, r1, 8
2000e0b8:	fa81000c 	swi	r20, r1, 12
2000e0bc:	12610000 	addk	r19, r1, r0
2000e0c0:	96808000 	mfs	r20, rpc
2000e0c4:	b000dfff 	imm	-8193
2000e0c8:	3294389c 	addik	r20, r20, 14492
		i32 result;
	
		result = 1;
2000e0cc:	30600001 	addik	r3, r0, 1
2000e0d0:	f8730004 	swi	r3, r19, 4
		return result;
2000e0d4:	e8730004 	lwi	r3, r19, 4
	}
2000e0d8:	10330000 	addk	r1, r19, r0
2000e0dc:	ea610008 	lwi	r19, r1, 8
2000e0e0:	ea81000c 	lwi	r20, r1, 12
2000e0e4:	30210010 	addik	r1, r1, 16
2000e0e8:	b60f0008 	rtsd	r15, 8
2000e0ec:	80000000 	or	r0, r0, r0

2000e0f0 <combine>:
	
	static void combine() {
2000e0f0:	3021ffc4 	addik	r1, r1, -60
2000e0f4:	f9e10000 	swi	r15, r1, 0
2000e0f8:	fa610034 	swi	r19, r1, 52
2000e0fc:	fa810038 	swi	r20, r1, 56
2000e100:	12610000 	addk	r19, r1, r0
2000e104:	96808000 	mfs	r20, rpc
2000e108:	b000dfff 	imm	-8193
2000e10c:	32943858 	addik	r20, r20, 14424
	
		// Compute aligned port indexes
		i32 index_aligned_MOT = index_MOT % SIZE_MOT;
2000e110:	b0000000 	imm	0
2000e114:	e8740074 	lwi	r3, r20, 116
2000e118:	e8630000 	lwi	r3, r3, 0
2000e11c:	a46301ff 	andi	r3, r3, 511
2000e120:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_TEX = index_TEX % SIZE_TEX;
2000e124:	b0000000 	imm	0
2000e128:	e874007c 	lwi	r3, r20, 124
2000e12c:	e8630000 	lwi	r3, r3, 0
2000e130:	a46301ff 	andi	r3, r3, 511
2000e134:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_VID = index_VID % SIZE_VID;
2000e138:	b0000000 	imm	0
2000e13c:	e874008c 	lwi	r3, r20, 140
2000e140:	e8630000 	lwi	r3, r3, 0
2000e144:	a46301ff 	andi	r3, r3, 511
2000e148:	f8730028 	swi	r3, r19, 40
		i16 add;
		i32 i;
		i16 tmp_TEX;
		i16 tmp_MOT;
	
		i = 0;
2000e14c:	f813001c 	swi	r0, r19, 28
		while (i <= 63) {
2000e150:	b8000164 	bri	356		// 2000e2b4
			tmp_TEX = tokens_TEX[(index_TEX + (i)) % SIZE_TEX];
2000e154:	b0000000 	imm	0
2000e158:	e8740068 	lwi	r3, r20, 104
2000e15c:	e8630000 	lwi	r3, r3, 0
2000e160:	e8830004 	lwi	r4, r3, 4
2000e164:	b0000000 	imm	0
2000e168:	e874007c 	lwi	r3, r20, 124
2000e16c:	e8a30000 	lwi	r5, r3, 0
2000e170:	e873001c 	lwi	r3, r19, 28
2000e174:	10651800 	addk	r3, r5, r3
2000e178:	a46301ff 	andi	r3, r3, 511
2000e17c:	10631800 	addk	r3, r3, r3
2000e180:	10641800 	addk	r3, r4, r3
2000e184:	e4630000 	lhui	r3, r3, 0
2000e188:	f473002c 	shi	r3, r19, 44
			tmp_MOT = tokens_MOT[(index_MOT + (i)) % SIZE_MOT];
2000e18c:	b0000000 	imm	0
2000e190:	e874006c 	lwi	r3, r20, 108
2000e194:	e8630000 	lwi	r3, r3, 0
2000e198:	e8830004 	lwi	r4, r3, 4
2000e19c:	b0000000 	imm	0
2000e1a0:	e8740074 	lwi	r3, r20, 116
2000e1a4:	e8a30000 	lwi	r5, r3, 0
2000e1a8:	e873001c 	lwi	r3, r19, 28
2000e1ac:	10651800 	addk	r3, r5, r3
2000e1b0:	a46301ff 	andi	r3, r3, 511
2000e1b4:	10631800 	addk	r3, r3, r3
2000e1b8:	10641800 	addk	r3, r4, r3
2000e1bc:	e4630000 	lhui	r3, r3, 0
2000e1c0:	f473002e 	shi	r3, r19, 46
			add = tmp_TEX + tmp_MOT;
2000e1c4:	e493002c 	lhui	r4, r19, 44
2000e1c8:	e473002e 	lhui	r3, r19, 46
2000e1cc:	10641800 	addk	r3, r4, r3
2000e1d0:	b0000000 	imm	0
2000e1d4:	a463ffff 	andi	r3, r3, -1
2000e1d8:	f4730030 	shi	r3, r19, 48
			if (add < 0) {
2000e1dc:	e4730030 	lhui	r3, r19, 48
2000e1e0:	90630061 	sext16	r3, r3
2000e1e4:	bca3003c 	bgei	r3, 60		// 2000e220
				tokens_VID[(index_VID + (i)) % SIZE_VID] = 0;
2000e1e8:	b0000000 	imm	0
2000e1ec:	e8740070 	lwi	r3, r20, 112
2000e1f0:	e8630000 	lwi	r3, r3, 0
2000e1f4:	e8830004 	lwi	r4, r3, 4
2000e1f8:	b0000000 	imm	0
2000e1fc:	e874008c 	lwi	r3, r20, 140
2000e200:	e8a30000 	lwi	r5, r3, 0
2000e204:	e873001c 	lwi	r3, r19, 28
2000e208:	10651800 	addk	r3, r5, r3
2000e20c:	a46301ff 	andi	r3, r3, 511
2000e210:	10631800 	addk	r3, r3, r3
2000e214:	10641800 	addk	r3, r4, r3
2000e218:	f4030000 	shi	r0, r3, 0
2000e21c:	b800008c 	bri	140		// 2000e2a8
			} else {
				if (add > 255) {
2000e220:	e4730030 	lhui	r3, r19, 48
2000e224:	90830061 	sext16	r4, r3
2000e228:	306000ff 	addik	r3, r0, 255
2000e22c:	16441801 	cmp	r18, r4, r3
2000e230:	bcb20040 	bgei	r18, 64		// 2000e270
					tokens_VID[(index_VID + (i)) % SIZE_VID] = 255;
2000e234:	b0000000 	imm	0
2000e238:	e8740070 	lwi	r3, r20, 112
2000e23c:	e8630000 	lwi	r3, r3, 0
2000e240:	e8830004 	lwi	r4, r3, 4
2000e244:	b0000000 	imm	0
2000e248:	e874008c 	lwi	r3, r20, 140
2000e24c:	e8a30000 	lwi	r5, r3, 0
2000e250:	e873001c 	lwi	r3, r19, 28
2000e254:	10651800 	addk	r3, r5, r3
2000e258:	a46301ff 	andi	r3, r3, 511
2000e25c:	10631800 	addk	r3, r3, r3
2000e260:	10641800 	addk	r3, r4, r3
2000e264:	308000ff 	addik	r4, r0, 255
2000e268:	f4830000 	shi	r4, r3, 0
2000e26c:	b800003c 	bri	60		// 2000e2a8
				} else {
					tokens_VID[(index_VID + (i)) % SIZE_VID] = add;
2000e270:	b0000000 	imm	0
2000e274:	e8740070 	lwi	r3, r20, 112
2000e278:	e8630000 	lwi	r3, r3, 0
2000e27c:	e8830004 	lwi	r4, r3, 4
2000e280:	b0000000 	imm	0
2000e284:	e874008c 	lwi	r3, r20, 140
2000e288:	e8a30000 	lwi	r5, r3, 0
2000e28c:	e873001c 	lwi	r3, r19, 28
2000e290:	10651800 	addk	r3, r5, r3
2000e294:	a46301ff 	andi	r3, r3, 511
2000e298:	10631800 	addk	r3, r3, r3
2000e29c:	10641800 	addk	r3, r4, r3
2000e2a0:	e4930030 	lhui	r4, r19, 48
2000e2a4:	f4830000 	shi	r4, r3, 0
				}
			}
			i = i + 1;
2000e2a8:	e873001c 	lwi	r3, r19, 28
2000e2ac:	30630001 	addik	r3, r3, 1
2000e2b0:	f873001c 	swi	r3, r19, 28
		i32 i;
		i16 tmp_TEX;
		i16 tmp_MOT;
	
		i = 0;
		while (i <= 63) {
2000e2b4:	e893001c 	lwi	r4, r19, 28
2000e2b8:	3060003f 	addik	r3, r0, 63
2000e2bc:	16441801 	cmp	r18, r4, r3
2000e2c0:	bcb2fe94 	bgei	r18, -364		// 2000e154
			}
			i = i + 1;
		}
	
		// Update ports indexes
		index_MOT += 64;
2000e2c4:	b0000000 	imm	0
2000e2c8:	e8740074 	lwi	r3, r20, 116
2000e2cc:	e8630000 	lwi	r3, r3, 0
2000e2d0:	30830040 	addik	r4, r3, 64
2000e2d4:	b0000000 	imm	0
2000e2d8:	e8740074 	lwi	r3, r20, 116
2000e2dc:	f8830000 	swi	r4, r3, 0
		index_TEX += 64;
2000e2e0:	b0000000 	imm	0
2000e2e4:	e874007c 	lwi	r3, r20, 124
2000e2e8:	e8630000 	lwi	r3, r3, 0
2000e2ec:	30830040 	addik	r4, r3, 64
2000e2f0:	b0000000 	imm	0
2000e2f4:	e874007c 	lwi	r3, r20, 124
2000e2f8:	f8830000 	swi	r4, r3, 0
		index_VID += 64;
2000e2fc:	b0000000 	imm	0
2000e300:	e874008c 	lwi	r3, r20, 140
2000e304:	e8630000 	lwi	r3, r3, 0
2000e308:	30830040 	addik	r4, r3, 64
2000e30c:	b0000000 	imm	0
2000e310:	e874008c 	lwi	r3, r20, 140
2000e314:	f8830000 	swi	r4, r3, 0
		
		read_end_MOT();
2000e318:	b0000000 	imm	0
2000e31c:	e87400a0 	lwi	r3, r20, 160
2000e320:	99fc1800 	brald	r15, r3
2000e324:	80000000 	or	r0, r0, r0
		read_end_TEX();
2000e328:	b0000000 	imm	0
2000e32c:	e87400a8 	lwi	r3, r20, 168
2000e330:	99fc1800 	brald	r15, r3
2000e334:	80000000 	or	r0, r0, r0
		write_end_VID();
2000e338:	b0000000 	imm	0
2000e33c:	e87400b8 	lwi	r3, r20, 184
2000e340:	99fc1800 	brald	r15, r3
2000e344:	80000000 	or	r0, r0, r0
	}
2000e348:	e9e10000 	lwi	r15, r1, 0
2000e34c:	10330000 	addk	r1, r19, r0
2000e350:	ea610034 	lwi	r19, r1, 52
2000e354:	ea810038 	lwi	r20, r1, 56
2000e358:	3021003c 	addik	r1, r1, 60
2000e35c:	b60f0008 	rtsd	r15, 8
2000e360:	80000000 	or	r0, r0, r0

2000e364 <decoder_motion_add_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_motion_add_initialize() {
2000e364:	3021fff0 	addik	r1, r1, -16
2000e368:	fa610008 	swi	r19, r1, 8
2000e36c:	fa81000c 	swi	r20, r1, 12
2000e370:	12610000 	addk	r19, r1, r0
2000e374:	96808000 	mfs	r20, rpc
2000e378:	b000dfff 	imm	-8193
2000e37c:	329435e8 	addik	r20, r20, 13800
		int i = 0;
2000e380:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_cmd;
2000e384:	b0000000 	imm	0
2000e388:	e8740098 	lwi	r3, r20, 152
2000e38c:	f8030000 	swi	r0, r3, 0
		
	finished:
		// no read_end/write_end here!
		return;
2000e390:	80000000 	or	r0, r0, r0
	}
2000e394:	10330000 	addk	r1, r19, r0
2000e398:	ea610008 	lwi	r19, r1, 8
2000e39c:	ea81000c 	lwi	r20, r1, 12
2000e3a0:	30210010 	addik	r1, r1, 16
2000e3a4:	b60f0008 	rtsd	r15, 8
2000e3a8:	80000000 	or	r0, r0, r0

2000e3ac <decoder_motion_add_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	
	int decoder_motion_add_scheduler() {
2000e3ac:	3021ffb4 	addik	r1, r1, -76
2000e3b0:	f9e10000 	swi	r15, r1, 0
2000e3b4:	fa610044 	swi	r19, r1, 68
2000e3b8:	fa810048 	swi	r20, r1, 72
2000e3bc:	12610000 	addk	r19, r1, r0
2000e3c0:	96808000 	mfs	r20, rpc
2000e3c4:	b000dfff 	imm	-8193
2000e3c8:	3294359c 	addik	r20, r20, 13724
		int i = 0;
2000e3cc:	f813001c 	swi	r0, r19, 28
		if(needInit){
2000e3d0:	b0000000 	imm	0
2000e3d4:	e8740094 	lwi	r3, r20, 148
2000e3d8:	e0630000 	lbui	r3, r3, 0
2000e3dc:	bc03001c 	beqi	r3, 28		// 2000e3f8
			decoder_motion_add_initialize();
2000e3e0:	b000ffff 	imm	-1
2000e3e4:	b9f4ff80 	brlid	r15, -128	// 2000e364 <decoder_motion_add_initialize>
2000e3e8:	80000000 	or	r0, r0, r0
			needInit = 0;
2000e3ec:	b0000000 	imm	0
2000e3f0:	e8740094 	lwi	r3, r20, 148
2000e3f4:	f0030000 	sbi	r0, r3, 0
		}
	
		read_MOT();
2000e3f8:	b0000000 	imm	0
2000e3fc:	e874009c 	lwi	r3, r20, 156
2000e400:	99fc1800 	brald	r15, r3
2000e404:	80000000 	or	r0, r0, r0
		read_TEX();
2000e408:	b0000000 	imm	0
2000e40c:	e89400a4 	lwi	r4, r20, 164
2000e410:	99fc2000 	brald	r15, r4
2000e414:	80000000 	or	r0, r0, r0
		read_BTYPE();
2000e418:	b0000000 	imm	0
2000e41c:	e87400ac 	lwi	r3, r20, 172
2000e420:	99fc1800 	brald	r15, r3
2000e424:	80000000 	or	r0, r0, r0
		write_VID();
2000e428:	b0000000 	imm	0
2000e42c:	e89400b4 	lwi	r4, r20, 180
2000e430:	99fc2000 	brald	r15, r4
2000e434:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
2000e438:	b0000000 	imm	0
2000e43c:	e8740098 	lwi	r3, r20, 152
2000e440:	e8630000 	lwi	r3, r3, 0
2000e444:	30800005 	addik	r4, r0, 5
2000e448:	16432003 	cmpu	r18, r3, r4
2000e44c:	bc520020 	blti	r18, 32		// 2000e46c
2000e450:	64830402 	bslli	r4, r3, 2
2000e454:	b0000000 	imm	0
2000e458:	e87400f4 	lwi	r3, r20, 244
2000e45c:	10641800 	addk	r3, r4, r3
2000e460:	e8630000 	lwi	r3, r3, 0
2000e464:	1063a000 	addk	r3, r3, r20
2000e468:	98081800 	bra	r3
		case my_state_skipw:
			goto l_skipw;
		case my_state_texture:
			goto l_texture;
		default:
			exit(1);
2000e46c:	30a00001 	addik	r5, r0, 1
2000e470:	b000dfff 	imm	-8193
2000e474:	b9f41f24 	brlid	r15, 7972	// 398 <exit>
2000e478:	80000000 	or	r0, r0, r0

2000e47c <$L274>:
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_cmd:
			goto l_cmd;
2000e47c:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_cmd:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_cmd_newVop()) {
2000e480:	b0000000 	imm	0
2000e484:	e8740088 	lwi	r3, r20, 136
2000e488:	e8830000 	lwi	r4, r3, 0
2000e48c:	b0000000 	imm	0
2000e490:	e8740084 	lwi	r3, r20, 132
2000e494:	e8630000 	lwi	r3, r3, 0
2000e498:	88641800 	xor	r3, r4, r3
2000e49c:	bc030054 	beqi	r3, 84		// 2000e4f0
2000e4a0:	b0000000 	imm	0
2000e4a4:	e89400bc 	lwi	r4, r20, 188
2000e4a8:	99fc2000 	brald	r15, r4
2000e4ac:	80000000 	or	r0, r0, r0
2000e4b0:	bc030040 	beqi	r3, 64		// 2000e4f0
				int stop = 0;
2000e4b4:	f813002c 	swi	r0, r19, 44
				if (stop != 0) {
2000e4b8:	e873002c 	lwi	r3, r19, 44
2000e4bc:	bc030014 	beqi	r3, 20		// 2000e4d0
					_FSM_state = my_state_cmd;
2000e4c0:	b0000000 	imm	0
2000e4c4:	e8740098 	lwi	r3, r20, 152
2000e4c8:	f8030000 	swi	r0, r3, 0
					goto finished;
2000e4cc:	b80005f4 	bri	1524		// 2000eac0
				}
				cmd_newVop();
2000e4d0:	b0000000 	imm	0
2000e4d4:	e87400c0 	lwi	r3, r20, 192
2000e4d8:	99fc1800 	brald	r15, r3
2000e4dc:	80000000 	or	r0, r0, r0
				i++;
2000e4e0:	e873001c 	lwi	r3, r19, 28
2000e4e4:	30630001 	addik	r3, r3, 1
2000e4e8:	f873001c 	swi	r3, r19, 28
				goto l_skipw;
2000e4ec:	b800043c 	bri	1084		// 2000e928
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_cmd_textureOnly()) {
2000e4f0:	b0000000 	imm	0
2000e4f4:	e8740088 	lwi	r3, r20, 136
2000e4f8:	e8830000 	lwi	r4, r3, 0
2000e4fc:	b0000000 	imm	0
2000e500:	e8740084 	lwi	r3, r20, 132
2000e504:	e8630000 	lwi	r3, r3, 0
2000e508:	88641800 	xor	r3, r4, r3
2000e50c:	bc030054 	beqi	r3, 84		// 2000e560
2000e510:	b0000000 	imm	0
2000e514:	e89400c4 	lwi	r4, r20, 196
2000e518:	99fc2000 	brald	r15, r4
2000e51c:	80000000 	or	r0, r0, r0
2000e520:	bc030040 	beqi	r3, 64		// 2000e560
				int stop = 0;
2000e524:	f8130030 	swi	r0, r19, 48
				if (stop != 0) {
2000e528:	e8730030 	lwi	r3, r19, 48
2000e52c:	bc030014 	beqi	r3, 20		// 2000e540
					_FSM_state = my_state_cmd;
2000e530:	b0000000 	imm	0
2000e534:	e8740098 	lwi	r3, r20, 152
2000e538:	f8030000 	swi	r0, r3, 0
					goto finished;
2000e53c:	b8000584 	bri	1412		// 2000eac0
				}
				cmd_textureOnly();
2000e540:	b0000000 	imm	0
2000e544:	e87400c8 	lwi	r3, r20, 200
2000e548:	99fc1800 	brald	r15, r3
2000e54c:	80000000 	or	r0, r0, r0
				i++;
2000e550:	e873001c 	lwi	r3, r19, 28
2000e554:	30630001 	addik	r3, r3, 1
2000e558:	f873001c 	swi	r3, r19, 28
				goto l_texture;
2000e55c:	b8000458 	bri	1112		// 2000e9b4
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_cmd_motionOnly()) {
2000e560:	b0000000 	imm	0
2000e564:	e8740088 	lwi	r3, r20, 136
2000e568:	e8830000 	lwi	r4, r3, 0
2000e56c:	b0000000 	imm	0
2000e570:	e8740084 	lwi	r3, r20, 132
2000e574:	e8630000 	lwi	r3, r3, 0
2000e578:	88641800 	xor	r3, r4, r3
2000e57c:	bc030054 	beqi	r3, 84		// 2000e5d0
2000e580:	b0000000 	imm	0
2000e584:	e89400cc 	lwi	r4, r20, 204
2000e588:	99fc2000 	brald	r15, r4
2000e58c:	80000000 	or	r0, r0, r0
2000e590:	bc030040 	beqi	r3, 64		// 2000e5d0
				int stop = 0;
2000e594:	f8130034 	swi	r0, r19, 52
				if (stop != 0) {
2000e598:	e8730034 	lwi	r3, r19, 52
2000e59c:	bc030014 	beqi	r3, 20		// 2000e5b0
					_FSM_state = my_state_cmd;
2000e5a0:	b0000000 	imm	0
2000e5a4:	e8740098 	lwi	r3, r20, 152
2000e5a8:	f8030000 	swi	r0, r3, 0
					goto finished;
2000e5ac:	b8000514 	bri	1300		// 2000eac0
				}
				cmd_motionOnly();
2000e5b0:	b0000000 	imm	0
2000e5b4:	e87400d0 	lwi	r3, r20, 208
2000e5b8:	99fc1800 	brald	r15, r3
2000e5bc:	80000000 	or	r0, r0, r0
				i++;
2000e5c0:	e873001c 	lwi	r3, r19, 28
2000e5c4:	30630001 	addik	r3, r3, 1
2000e5c8:	f873001c 	swi	r3, r19, 28
				goto l_motion;
2000e5cc:	b80001c0 	bri	448		// 2000e78c
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_cmd_other()) {
2000e5d0:	b0000000 	imm	0
2000e5d4:	e8740088 	lwi	r3, r20, 136
2000e5d8:	e8830000 	lwi	r4, r3, 0
2000e5dc:	b0000000 	imm	0
2000e5e0:	e8740084 	lwi	r3, r20, 132
2000e5e4:	e8630000 	lwi	r3, r3, 0
2000e5e8:	88641800 	xor	r3, r4, r3
2000e5ec:	bc030054 	beqi	r3, 84		// 2000e640
2000e5f0:	b0000000 	imm	0
2000e5f4:	e89400d4 	lwi	r4, r20, 212
2000e5f8:	99fc2000 	brald	r15, r4
2000e5fc:	80000000 	or	r0, r0, r0
2000e600:	bc030040 	beqi	r3, 64		// 2000e640
				int stop = 0;
2000e604:	f8130038 	swi	r0, r19, 56
				if (stop != 0) {
2000e608:	e8730038 	lwi	r3, r19, 56
2000e60c:	bc030014 	beqi	r3, 20		// 2000e620
					_FSM_state = my_state_cmd;
2000e610:	b0000000 	imm	0
2000e614:	e8740098 	lwi	r3, r20, 152
2000e618:	f8030000 	swi	r0, r3, 0
					goto finished;
2000e61c:	b80004a4 	bri	1188		// 2000eac0
				}
				cmd_other();
2000e620:	b0000000 	imm	0
2000e624:	e87400d8 	lwi	r3, r20, 216
2000e628:	99fc1800 	brald	r15, r3
2000e62c:	80000000 	or	r0, r0, r0
				i++;
2000e630:	e873001c 	lwi	r3, r19, 28
2000e634:	30630001 	addik	r3, r3, 1
2000e638:	f873001c 	swi	r3, r19, 28
				goto l_combine;
2000e63c:	b8000018 	bri	24		// 2000e654
			} else {
				_FSM_state = my_state_cmd;
2000e640:	b0000000 	imm	0
2000e644:	e8740098 	lwi	r3, r20, 152
2000e648:	f8030000 	swi	r0, r3, 0
				goto finished;
2000e64c:	b8000474 	bri	1140		// 2000eac0

2000e650 <$L275>:
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_cmd:
			goto l_cmd;
		case my_state_combine:
			goto l_combine;
2000e650:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_cmd;
				goto finished;
			}
		l_combine:
			if (numTokens_MOT - index_MOT >= 64 && numTokens_TEX - index_TEX >= 64 && isSchedulable_combine()) {
2000e654:	b0000000 	imm	0
2000e658:	e8740078 	lwi	r3, r20, 120
2000e65c:	e8830000 	lwi	r4, r3, 0
2000e660:	b0000000 	imm	0
2000e664:	e8740074 	lwi	r3, r20, 116
2000e668:	e8630000 	lwi	r3, r3, 0
2000e66c:	14832000 	rsubk	r4, r3, r4
2000e670:	3060003f 	addik	r3, r0, 63
2000e674:	16441803 	cmpu	r18, r4, r3
2000e678:	bcb200fc 	bgei	r18, 252		// 2000e774
2000e67c:	b0000000 	imm	0
2000e680:	e8740080 	lwi	r3, r20, 128
2000e684:	e8830000 	lwi	r4, r3, 0
2000e688:	b0000000 	imm	0
2000e68c:	e874007c 	lwi	r3, r20, 124
2000e690:	e8630000 	lwi	r3, r3, 0
2000e694:	14832000 	rsubk	r4, r3, r4
2000e698:	3060003f 	addik	r3, r0, 63
2000e69c:	16441803 	cmpu	r18, r4, r3
2000e6a0:	bcb200d4 	bgei	r18, 212		// 2000e774
2000e6a4:	b0000000 	imm	0
2000e6a8:	e89400ec 	lwi	r4, r20, 236
2000e6ac:	99fc2000 	brald	r15, r4
2000e6b0:	80000000 	or	r0, r0, r0
2000e6b4:	bc0300c0 	beqi	r3, 192		// 2000e774
				int stop = 0;
2000e6b8:	f8130020 	swi	r0, r19, 32
				if (64 > SIZE_VID - index_VID + decoder_motion_add_VID->read_inds[0]) {
2000e6bc:	b0000000 	imm	0
2000e6c0:	e8740070 	lwi	r3, r20, 112
2000e6c4:	e8630000 	lwi	r3, r3, 0
2000e6c8:	e863000c 	lwi	r3, r3, 12
2000e6cc:	e8830000 	lwi	r4, r3, 0
2000e6d0:	b0000000 	imm	0
2000e6d4:	e874008c 	lwi	r3, r20, 140
2000e6d8:	e8630000 	lwi	r3, r3, 0
2000e6dc:	14632000 	rsubk	r3, r3, r4
2000e6e0:	30830200 	addik	r4, r3, 512
2000e6e4:	3060003f 	addik	r3, r0, 63
2000e6e8:	16441803 	cmpu	r18, r4, r3
2000e6ec:	bc52000c 	blti	r18, 12		// 2000e6f8
					stop = 1;
2000e6f0:	30600001 	addik	r3, r0, 1
2000e6f4:	f8730020 	swi	r3, r19, 32
				}
				if (64 > SIZE_VID - index_VID + decoder_motion_add_VID->read_inds[1]) {
2000e6f8:	b0000000 	imm	0
2000e6fc:	e8740070 	lwi	r3, r20, 112
2000e700:	e8630000 	lwi	r3, r3, 0
2000e704:	e863000c 	lwi	r3, r3, 12
2000e708:	30630004 	addik	r3, r3, 4
2000e70c:	e8830000 	lwi	r4, r3, 0
2000e710:	b0000000 	imm	0
2000e714:	e874008c 	lwi	r3, r20, 140
2000e718:	e8630000 	lwi	r3, r3, 0
2000e71c:	14632000 	rsubk	r3, r3, r4
2000e720:	30830200 	addik	r4, r3, 512
2000e724:	3060003f 	addik	r3, r0, 63
2000e728:	16441803 	cmpu	r18, r4, r3
2000e72c:	bc52000c 	blti	r18, 12		// 2000e738
					stop = 1;
2000e730:	30600001 	addik	r3, r0, 1
2000e734:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
2000e738:	e8730020 	lwi	r3, r19, 32
2000e73c:	bc030018 	beqi	r3, 24		// 2000e754
					_FSM_state = my_state_combine;
2000e740:	b0000000 	imm	0
2000e744:	e8740098 	lwi	r3, r20, 152
2000e748:	30800001 	addik	r4, r0, 1
2000e74c:	f8830000 	swi	r4, r3, 0
					goto finished;
2000e750:	b8000370 	bri	880		// 2000eac0
				}
				combine();
2000e754:	b0000000 	imm	0
2000e758:	e87400f0 	lwi	r3, r20, 240
2000e75c:	99fc1800 	brald	r15, r3
2000e760:	80000000 	or	r0, r0, r0
				i++;
2000e764:	e873001c 	lwi	r3, r19, 28
2000e768:	30630001 	addik	r3, r3, 1
2000e76c:	f873001c 	swi	r3, r19, 28
				goto l_cmd;
2000e770:	b800fd10 	bri	-752		// 2000e480
			} else {
				_FSM_state = my_state_combine;
2000e774:	b0000000 	imm	0
2000e778:	e8740098 	lwi	r3, r20, 152
2000e77c:	30800001 	addik	r4, r0, 1
2000e780:	f8830000 	swi	r4, r3, 0
				goto finished;
2000e784:	b800033c 	bri	828		// 2000eac0

2000e788 <$L276>:
		case my_state_cmd:
			goto l_cmd;
		case my_state_combine:
			goto l_combine;
		case my_state_motion:
			goto l_motion;
2000e788:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_combine;
				goto finished;
			}
		l_motion:
			if (numTokens_MOT - index_MOT >= 64 && isSchedulable_motion()) {
2000e78c:	b0000000 	imm	0
2000e790:	e8740078 	lwi	r3, r20, 120
2000e794:	e8830000 	lwi	r4, r3, 0
2000e798:	b0000000 	imm	0
2000e79c:	e8740074 	lwi	r3, r20, 116
2000e7a0:	e8630000 	lwi	r3, r3, 0
2000e7a4:	14832000 	rsubk	r4, r3, r4
2000e7a8:	3060003f 	addik	r3, r0, 63
2000e7ac:	16441803 	cmpu	r18, r4, r3
2000e7b0:	bcb200d4 	bgei	r18, 212		// 2000e884
2000e7b4:	b0000000 	imm	0
2000e7b8:	e89400e4 	lwi	r4, r20, 228
2000e7bc:	99fc2000 	brald	r15, r4
2000e7c0:	80000000 	or	r0, r0, r0
2000e7c4:	bc0300c0 	beqi	r3, 192		// 2000e884
				int stop = 0;
2000e7c8:	f8130024 	swi	r0, r19, 36
				if (64 > SIZE_VID - index_VID + decoder_motion_add_VID->read_inds[0]) {
2000e7cc:	b0000000 	imm	0
2000e7d0:	e8740070 	lwi	r3, r20, 112
2000e7d4:	e8630000 	lwi	r3, r3, 0
2000e7d8:	e863000c 	lwi	r3, r3, 12
2000e7dc:	e8830000 	lwi	r4, r3, 0
2000e7e0:	b0000000 	imm	0
2000e7e4:	e874008c 	lwi	r3, r20, 140
2000e7e8:	e8630000 	lwi	r3, r3, 0
2000e7ec:	14632000 	rsubk	r3, r3, r4
2000e7f0:	30830200 	addik	r4, r3, 512
2000e7f4:	3060003f 	addik	r3, r0, 63
2000e7f8:	16441803 	cmpu	r18, r4, r3
2000e7fc:	bc52000c 	blti	r18, 12		// 2000e808
					stop = 1;
2000e800:	30600001 	addik	r3, r0, 1
2000e804:	f8730024 	swi	r3, r19, 36
				}
				if (64 > SIZE_VID - index_VID + decoder_motion_add_VID->read_inds[1]) {
2000e808:	b0000000 	imm	0
2000e80c:	e8740070 	lwi	r3, r20, 112
2000e810:	e8630000 	lwi	r3, r3, 0
2000e814:	e863000c 	lwi	r3, r3, 12
2000e818:	30630004 	addik	r3, r3, 4
2000e81c:	e8830000 	lwi	r4, r3, 0
2000e820:	b0000000 	imm	0
2000e824:	e874008c 	lwi	r3, r20, 140
2000e828:	e8630000 	lwi	r3, r3, 0
2000e82c:	14632000 	rsubk	r3, r3, r4
2000e830:	30830200 	addik	r4, r3, 512
2000e834:	3060003f 	addik	r3, r0, 63
2000e838:	16441803 	cmpu	r18, r4, r3
2000e83c:	bc52000c 	blti	r18, 12		// 2000e848
					stop = 1;
2000e840:	30600001 	addik	r3, r0, 1
2000e844:	f8730024 	swi	r3, r19, 36
				}
				if (stop != 0) {
2000e848:	e8730024 	lwi	r3, r19, 36
2000e84c:	bc030018 	beqi	r3, 24		// 2000e864
					_FSM_state = my_state_motion;
2000e850:	b0000000 	imm	0
2000e854:	e8740098 	lwi	r3, r20, 152
2000e858:	30800002 	addik	r4, r0, 2
2000e85c:	f8830000 	swi	r4, r3, 0
					goto finished;
2000e860:	b8000260 	bri	608		// 2000eac0
				}
				motion();
2000e864:	b0000000 	imm	0
2000e868:	e87400e8 	lwi	r3, r20, 232
2000e86c:	99fc1800 	brald	r15, r3
2000e870:	80000000 	or	r0, r0, r0
				i++;
2000e874:	e873001c 	lwi	r3, r19, 28
2000e878:	30630001 	addik	r3, r3, 1
2000e87c:	f873001c 	swi	r3, r19, 28
				goto l_cmd;
2000e880:	b800fc00 	bri	-1024		// 2000e480
			} else {
				_FSM_state = my_state_motion;
2000e884:	b0000000 	imm	0
2000e888:	e8740098 	lwi	r3, r20, 152
2000e88c:	30800002 	addik	r4, r0, 2
2000e890:	f8830000 	swi	r4, r3, 0
				goto finished;
2000e894:	b800022c 	bri	556		// 2000eac0

2000e898 <$L277>:
		case my_state_combine:
			goto l_combine;
		case my_state_motion:
			goto l_motion;
		case my_state_skiph:
			goto l_skiph;
2000e898:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_motion;
				goto finished;
			}
		l_skiph:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_cmd_other()) {
2000e89c:	b0000000 	imm	0
2000e8a0:	e8740088 	lwi	r3, r20, 136
2000e8a4:	e8830000 	lwi	r4, r3, 0
2000e8a8:	b0000000 	imm	0
2000e8ac:	e8740084 	lwi	r3, r20, 132
2000e8b0:	e8630000 	lwi	r3, r3, 0
2000e8b4:	88641800 	xor	r3, r4, r3
2000e8b8:	bc030058 	beqi	r3, 88		// 2000e910
2000e8bc:	b0000000 	imm	0
2000e8c0:	e89400d4 	lwi	r4, r20, 212
2000e8c4:	99fc2000 	brald	r15, r4
2000e8c8:	80000000 	or	r0, r0, r0
2000e8cc:	bc030044 	beqi	r3, 68		// 2000e910
				int stop = 0;
2000e8d0:	f8130040 	swi	r0, r19, 64
				if (stop != 0) {
2000e8d4:	e8730040 	lwi	r3, r19, 64
2000e8d8:	bc030018 	beqi	r3, 24		// 2000e8f0
					_FSM_state = my_state_skiph;
2000e8dc:	b0000000 	imm	0
2000e8e0:	e8740098 	lwi	r3, r20, 152
2000e8e4:	30800003 	addik	r4, r0, 3
2000e8e8:	f8830000 	swi	r4, r3, 0
					goto finished;
2000e8ec:	b80001d4 	bri	468		// 2000eac0
				}
				cmd_other();
2000e8f0:	b0000000 	imm	0
2000e8f4:	e87400d8 	lwi	r3, r20, 216
2000e8f8:	99fc1800 	brald	r15, r3
2000e8fc:	80000000 	or	r0, r0, r0
				i++;
2000e900:	e873001c 	lwi	r3, r19, 28
2000e904:	30630001 	addik	r3, r3, 1
2000e908:	f873001c 	swi	r3, r19, 28
				goto l_cmd;
2000e90c:	b800fb74 	bri	-1164		// 2000e480
			} else {
				_FSM_state = my_state_skiph;
2000e910:	b0000000 	imm	0
2000e914:	e8740098 	lwi	r3, r20, 152
2000e918:	30800003 	addik	r4, r0, 3
2000e91c:	f8830000 	swi	r4, r3, 0
				goto finished;
2000e920:	b80001a0 	bri	416		// 2000eac0

2000e924 <$L278>:
		case my_state_motion:
			goto l_motion;
		case my_state_skiph:
			goto l_skiph;
		case my_state_skipw:
			goto l_skipw;
2000e924:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_skiph;
				goto finished;
			}
		l_skipw:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_cmd_other()) {
2000e928:	b0000000 	imm	0
2000e92c:	e8740088 	lwi	r3, r20, 136
2000e930:	e8830000 	lwi	r4, r3, 0
2000e934:	b0000000 	imm	0
2000e938:	e8740084 	lwi	r3, r20, 132
2000e93c:	e8630000 	lwi	r3, r3, 0
2000e940:	88641800 	xor	r3, r4, r3
2000e944:	bc030058 	beqi	r3, 88		// 2000e99c
2000e948:	b0000000 	imm	0
2000e94c:	e89400d4 	lwi	r4, r20, 212
2000e950:	99fc2000 	brald	r15, r4
2000e954:	80000000 	or	r0, r0, r0
2000e958:	bc030044 	beqi	r3, 68		// 2000e99c
				int stop = 0;
2000e95c:	f813003c 	swi	r0, r19, 60
				if (stop != 0) {
2000e960:	e873003c 	lwi	r3, r19, 60
2000e964:	bc030018 	beqi	r3, 24		// 2000e97c
					_FSM_state = my_state_skipw;
2000e968:	b0000000 	imm	0
2000e96c:	e8740098 	lwi	r3, r20, 152
2000e970:	30800004 	addik	r4, r0, 4
2000e974:	f8830000 	swi	r4, r3, 0
					goto finished;
2000e978:	b8000148 	bri	328		// 2000eac0
				}
				cmd_other();
2000e97c:	b0000000 	imm	0
2000e980:	e87400d8 	lwi	r3, r20, 216
2000e984:	99fc1800 	brald	r15, r3
2000e988:	80000000 	or	r0, r0, r0
				i++;
2000e98c:	e873001c 	lwi	r3, r19, 28
2000e990:	30630001 	addik	r3, r3, 1
2000e994:	f873001c 	swi	r3, r19, 28
				goto l_skiph;
2000e998:	b800ff04 	bri	-252		// 2000e89c
			} else {
				_FSM_state = my_state_skipw;
2000e99c:	b0000000 	imm	0
2000e9a0:	e8740098 	lwi	r3, r20, 152
2000e9a4:	30800004 	addik	r4, r0, 4
2000e9a8:	f8830000 	swi	r4, r3, 0
				goto finished;
2000e9ac:	b8000114 	bri	276		// 2000eac0

2000e9b0 <$L273>:
		case my_state_skiph:
			goto l_skiph;
		case my_state_skipw:
			goto l_skipw;
		case my_state_texture:
			goto l_texture;
2000e9b0:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_skipw;
				goto finished;
			}
		l_texture:
			if (numTokens_TEX - index_TEX >= 64 && isSchedulable_texture()) {
2000e9b4:	b0000000 	imm	0
2000e9b8:	e8740080 	lwi	r3, r20, 128
2000e9bc:	e8830000 	lwi	r4, r3, 0
2000e9c0:	b0000000 	imm	0
2000e9c4:	e874007c 	lwi	r3, r20, 124
2000e9c8:	e8630000 	lwi	r3, r3, 0
2000e9cc:	14832000 	rsubk	r4, r3, r4
2000e9d0:	3060003f 	addik	r3, r0, 63
2000e9d4:	16441803 	cmpu	r18, r4, r3
2000e9d8:	bcb200d4 	bgei	r18, 212		// 2000eaac
2000e9dc:	b0000000 	imm	0
2000e9e0:	e89400dc 	lwi	r4, r20, 220
2000e9e4:	99fc2000 	brald	r15, r4
2000e9e8:	80000000 	or	r0, r0, r0
2000e9ec:	bc0300c0 	beqi	r3, 192		// 2000eaac
				int stop = 0;
2000e9f0:	f8130028 	swi	r0, r19, 40
				if (64 > SIZE_VID - index_VID + decoder_motion_add_VID->read_inds[0]) {
2000e9f4:	b0000000 	imm	0
2000e9f8:	e8740070 	lwi	r3, r20, 112
2000e9fc:	e8630000 	lwi	r3, r3, 0
2000ea00:	e863000c 	lwi	r3, r3, 12
2000ea04:	e8830000 	lwi	r4, r3, 0
2000ea08:	b0000000 	imm	0
2000ea0c:	e874008c 	lwi	r3, r20, 140
2000ea10:	e8630000 	lwi	r3, r3, 0
2000ea14:	14632000 	rsubk	r3, r3, r4
2000ea18:	30830200 	addik	r4, r3, 512
2000ea1c:	3060003f 	addik	r3, r0, 63
2000ea20:	16441803 	cmpu	r18, r4, r3
2000ea24:	bc52000c 	blti	r18, 12		// 2000ea30
					stop = 1;
2000ea28:	30600001 	addik	r3, r0, 1
2000ea2c:	f8730028 	swi	r3, r19, 40
				}
				if (64 > SIZE_VID - index_VID + decoder_motion_add_VID->read_inds[1]) {
2000ea30:	b0000000 	imm	0
2000ea34:	e8740070 	lwi	r3, r20, 112
2000ea38:	e8630000 	lwi	r3, r3, 0
2000ea3c:	e863000c 	lwi	r3, r3, 12
2000ea40:	30630004 	addik	r3, r3, 4
2000ea44:	e8830000 	lwi	r4, r3, 0
2000ea48:	b0000000 	imm	0
2000ea4c:	e874008c 	lwi	r3, r20, 140
2000ea50:	e8630000 	lwi	r3, r3, 0
2000ea54:	14632000 	rsubk	r3, r3, r4
2000ea58:	30830200 	addik	r4, r3, 512
2000ea5c:	3060003f 	addik	r3, r0, 63
2000ea60:	16441803 	cmpu	r18, r4, r3
2000ea64:	bc52000c 	blti	r18, 12		// 2000ea70
					stop = 1;
2000ea68:	30600001 	addik	r3, r0, 1
2000ea6c:	f8730028 	swi	r3, r19, 40
				}
				if (stop != 0) {
2000ea70:	e8730028 	lwi	r3, r19, 40
2000ea74:	bc030018 	beqi	r3, 24		// 2000ea8c
					_FSM_state = my_state_texture;
2000ea78:	b0000000 	imm	0
2000ea7c:	e8740098 	lwi	r3, r20, 152
2000ea80:	30800005 	addik	r4, r0, 5
2000ea84:	f8830000 	swi	r4, r3, 0
					goto finished;
2000ea88:	b8000038 	bri	56		// 2000eac0
				}
				texture();
2000ea8c:	b0000000 	imm	0
2000ea90:	e87400e0 	lwi	r3, r20, 224
2000ea94:	99fc1800 	brald	r15, r3
2000ea98:	80000000 	or	r0, r0, r0
				i++;
2000ea9c:	e873001c 	lwi	r3, r19, 28
2000eaa0:	30630001 	addik	r3, r3, 1
2000eaa4:	f873001c 	swi	r3, r19, 28
				goto l_cmd;
2000eaa8:	b800f9d8 	bri	-1576		// 2000e480
			} else {
				_FSM_state = my_state_texture;
2000eaac:	b0000000 	imm	0
2000eab0:	e8740098 	lwi	r3, r20, 152
2000eab4:	30800005 	addik	r4, r0, 5
2000eab8:	f8830000 	swi	r4, r3, 0
				goto finished;
2000eabc:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_MOT();
2000eac0:	b0000000 	imm	0
2000eac4:	e89400a0 	lwi	r4, r20, 160
2000eac8:	99fc2000 	brald	r15, r4
2000eacc:	80000000 	or	r0, r0, r0
		read_end_TEX();
2000ead0:	b0000000 	imm	0
2000ead4:	e87400a8 	lwi	r3, r20, 168
2000ead8:	99fc1800 	brald	r15, r3
2000eadc:	80000000 	or	r0, r0, r0
		read_end_BTYPE();
2000eae0:	b0000000 	imm	0
2000eae4:	e89400b0 	lwi	r4, r20, 176
2000eae8:	99fc2000 	brald	r15, r4
2000eaec:	80000000 	or	r0, r0, r0
		
		write_end_VID();
2000eaf0:	b0000000 	imm	0
2000eaf4:	e87400b8 	lwi	r3, r20, 184
2000eaf8:	99fc1800 	brald	r15, r3
2000eafc:	80000000 	or	r0, r0, r0
		
		
		return i;
2000eb00:	e873001c 	lwi	r3, r19, 28
	}
2000eb04:	e9e10000 	lwi	r15, r1, 0
2000eb08:	10330000 	addk	r1, r19, r0
2000eb0c:	ea610044 	lwi	r19, r1, 68
2000eb10:	ea810048 	lwi	r20, r1, 72
2000eb14:	3021004c 	addik	r1, r1, 76
2000eb18:	b60f0008 	rtsd	r15, 8
2000eb1c:	80000000 	or	r0, r0, r0

2000eb20 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000eb20:	3021fff4 	addik	r1, r1, -12
2000eb24:	fa610004 	swi	r19, r1, 4
2000eb28:	fa810008 	swi	r20, r1, 8
2000eb2c:	12610000 	addk	r19, r1, r0
2000eb30:	96808000 	mfs	r20, rpc
2000eb34:	b000dfff 	imm	-8193
2000eb38:	32942e2c 	addik	r20, r20, 11820
2000eb3c:	f8b30010 	swi	r5, r19, 16
2000eb40:	f8d30014 	swi	r6, r19, 20
2000eb44:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000eb48:	e8730010 	lwi	r3, r19, 16
2000eb4c:	e8630010 	lwi	r3, r3, 16
2000eb50:	e8830000 	lwi	r4, r3, 0
2000eb54:	e8730010 	lwi	r3, r19, 16
2000eb58:	e8a3000c 	lwi	r5, r3, 12
2000eb5c:	e8730014 	lwi	r3, r19, 20
2000eb60:	64630402 	bslli	r3, r3, 2
2000eb64:	10651800 	addk	r3, r5, r3
2000eb68:	e8630000 	lwi	r3, r3, 0
2000eb6c:	14a32000 	rsubk	r5, r3, r4
2000eb70:	30600001 	addik	r3, r0, 1
2000eb74:	e8930018 	lwi	r4, r19, 24
2000eb78:	16442803 	cmpu	r18, r4, r5
2000eb7c:	bcb20008 	bgei	r18, 8		// 2000eb84
2000eb80:	10600000 	addk	r3, r0, r0
2000eb84:	a46300ff 	andi	r3, r3, 255
}
2000eb88:	10330000 	addk	r1, r19, r0
2000eb8c:	ea610004 	lwi	r19, r1, 4
2000eb90:	ea810008 	lwi	r20, r1, 8
2000eb94:	3021000c 	addik	r1, r1, 12
2000eb98:	b60f0008 	rtsd	r15, 8
2000eb9c:	80000000 	or	r0, r0, r0

2000eba0 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000eba0:	3021fff4 	addik	r1, r1, -12
2000eba4:	fa610004 	swi	r19, r1, 4
2000eba8:	fa810008 	swi	r20, r1, 8
2000ebac:	12610000 	addk	r19, r1, r0
2000ebb0:	96808000 	mfs	r20, rpc
2000ebb4:	b000dfff 	imm	-8193
2000ebb8:	32942dac 	addik	r20, r20, 11692
2000ebbc:	f8b30010 	swi	r5, r19, 16
2000ebc0:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000ebc4:	e8730010 	lwi	r3, r19, 16
2000ebc8:	e8630010 	lwi	r3, r3, 16
2000ebcc:	e8830000 	lwi	r4, r3, 0
2000ebd0:	e8730010 	lwi	r3, r19, 16
2000ebd4:	e8a3000c 	lwi	r5, r3, 12
2000ebd8:	e8730014 	lwi	r3, r19, 20
2000ebdc:	64630402 	bslli	r3, r3, 2
2000ebe0:	10651800 	addk	r3, r5, r3
2000ebe4:	e8630000 	lwi	r3, r3, 0
2000ebe8:	14632000 	rsubk	r3, r3, r4
}
2000ebec:	10330000 	addk	r1, r19, r0
2000ebf0:	ea610004 	lwi	r19, r1, 4
2000ebf4:	ea810008 	lwi	r20, r1, 8
2000ebf8:	3021000c 	addik	r1, r1, 12
2000ebfc:	b60f0008 	rtsd	r15, 8
2000ec00:	80000000 	or	r0, r0, r0

2000ec04 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000ec04:	3021fff0 	addik	r1, r1, -16
2000ec08:	fa610008 	swi	r19, r1, 8
2000ec0c:	fa81000c 	swi	r20, r1, 12
2000ec10:	12610000 	addk	r19, r1, r0
2000ec14:	96808000 	mfs	r20, rpc
2000ec18:	b000dfff 	imm	-8193
2000ec1c:	32942d48 	addik	r20, r20, 11592
2000ec20:	f8b30014 	swi	r5, r19, 20
2000ec24:	f8d30018 	swi	r6, r19, 24
2000ec28:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000ec2c:	f8130004 	swi	r0, r19, 4
2000ec30:	b800005c 	bri	92		// 2000ec8c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000ec34:	e8730014 	lwi	r3, r19, 20
2000ec38:	e8830000 	lwi	r4, r3, 0
2000ec3c:	e8730014 	lwi	r3, r19, 20
2000ec40:	e8a3000c 	lwi	r5, r3, 12
2000ec44:	e8730004 	lwi	r3, r19, 4
2000ec48:	64630402 	bslli	r3, r3, 2
2000ec4c:	10651800 	addk	r3, r5, r3
2000ec50:	e8a30000 	lwi	r5, r3, 0
2000ec54:	e8730014 	lwi	r3, r19, 20
2000ec58:	e8630010 	lwi	r3, r3, 16
2000ec5c:	e8630000 	lwi	r3, r3, 0
2000ec60:	14632800 	rsubk	r3, r3, r5
2000ec64:	10641800 	addk	r3, r4, r3
2000ec68:	30830001 	addik	r4, r3, 1
2000ec6c:	e873001c 	lwi	r3, r19, 28
2000ec70:	16441803 	cmpu	r18, r4, r3
2000ec74:	bc52000c 	blti	r18, 12		// 2000ec80
            return 0;
2000ec78:	10600000 	addk	r3, r0, r0
2000ec7c:	b8000024 	bri	36		// 2000eca0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000ec80:	e8730004 	lwi	r3, r19, 4
2000ec84:	30630001 	addik	r3, r3, 1
2000ec88:	f8730004 	swi	r3, r19, 4
2000ec8c:	e8930004 	lwi	r4, r19, 4
2000ec90:	e8730018 	lwi	r3, r19, 24
2000ec94:	16432003 	cmpu	r18, r3, r4
2000ec98:	bc52ff9c 	blti	r18, -100		// 2000ec34
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000ec9c:	30600001 	addik	r3, r0, 1
}
2000eca0:	10330000 	addk	r1, r19, r0
2000eca4:	ea610008 	lwi	r19, r1, 8
2000eca8:	ea81000c 	lwi	r20, r1, 12
2000ecac:	30210010 	addik	r1, r1, 16
2000ecb0:	b60f0008 	rtsd	r15, 8
2000ecb4:	80000000 	or	r0, r0, r0

2000ecb8 <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000ecb8:	3021ffe8 	addik	r1, r1, -24
2000ecbc:	fa610010 	swi	r19, r1, 16
2000ecc0:	fa810014 	swi	r20, r1, 20
2000ecc4:	12610000 	addk	r19, r1, r0
2000ecc8:	96808000 	mfs	r20, rpc
2000eccc:	b000dfff 	imm	-8193
2000ecd0:	32942c94 	addik	r20, r20, 11412
2000ecd4:	f8b3001c 	swi	r5, r19, 28
2000ecd8:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000ecdc:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000ece0:	f8130004 	swi	r0, r19, 4
2000ece4:	b8000054 	bri	84		// 2000ed38
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000ece8:	e873001c 	lwi	r3, r19, 28
2000ecec:	e8630010 	lwi	r3, r3, 16
2000ecf0:	e8830000 	lwi	r4, r3, 0
2000ecf4:	e873001c 	lwi	r3, r19, 28
2000ecf8:	e8a3000c 	lwi	r5, r3, 12
2000ecfc:	e8730004 	lwi	r3, r19, 4
2000ed00:	64630402 	bslli	r3, r3, 2
2000ed04:	10651800 	addk	r3, r5, r3
2000ed08:	e8630000 	lwi	r3, r3, 0
2000ed0c:	14632000 	rsubk	r3, r3, r4
2000ed10:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000ed14:	e8930008 	lwi	r4, r19, 8
2000ed18:	e873000c 	lwi	r3, r19, 12
2000ed1c:	16441803 	cmpu	r18, r4, r3
2000ed20:	bcb20008 	bgei	r18, 8		// 2000ed28
2000ed24:	10640000 	addk	r3, r4, r0
2000ed28:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000ed2c:	e8730004 	lwi	r3, r19, 4
2000ed30:	30630001 	addik	r3, r3, 1
2000ed34:	f8730004 	swi	r3, r19, 4
2000ed38:	e8930004 	lwi	r4, r19, 4
2000ed3c:	e8730020 	lwi	r3, r19, 32
2000ed40:	16432003 	cmpu	r18, r3, r4
2000ed44:	bc52ffa4 	blti	r18, -92		// 2000ece8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000ed48:	e873001c 	lwi	r3, r19, 28
2000ed4c:	e8830000 	lwi	r4, r3, 0
2000ed50:	e8730008 	lwi	r3, r19, 8
2000ed54:	14632000 	rsubk	r3, r3, r4
}
2000ed58:	10330000 	addk	r1, r19, r0
2000ed5c:	ea610010 	lwi	r19, r1, 16
2000ed60:	ea810014 	lwi	r20, r1, 20
2000ed64:	30210018 	addik	r1, r1, 24
2000ed68:	b60f0008 	rtsd	r15, 8
2000ed6c:	80000000 	or	r0, r0, r0

2000ed70 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000ed70:	3021fff0 	addik	r1, r1, -16
2000ed74:	fa610008 	swi	r19, r1, 8
2000ed78:	fa81000c 	swi	r20, r1, 12
2000ed7c:	12610000 	addk	r19, r1, r0
2000ed80:	96808000 	mfs	r20, rpc
2000ed84:	b000dfff 	imm	-8193
2000ed88:	32942bdc 	addik	r20, r20, 11228
2000ed8c:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2000ed90:	e8730014 	lwi	r3, r19, 20
2000ed94:	e8630010 	lwi	r3, r3, 16
2000ed98:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000ed9c:	f8130004 	swi	r0, r19, 4
2000eda0:	b8000028 	bri	40		// 2000edc8
        fifo->read_inds[i] = 0;
2000eda4:	e8730014 	lwi	r3, r19, 20
2000eda8:	e883000c 	lwi	r4, r3, 12
2000edac:	e8730004 	lwi	r3, r19, 4
2000edb0:	64630402 	bslli	r3, r3, 2
2000edb4:	10641800 	addk	r3, r4, r3
2000edb8:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000edbc:	e8730004 	lwi	r3, r19, 4
2000edc0:	30630001 	addik	r3, r3, 1
2000edc4:	f8730004 	swi	r3, r19, 4
2000edc8:	e8730014 	lwi	r3, r19, 20
2000edcc:	e8830008 	lwi	r4, r3, 8
2000edd0:	e8730004 	lwi	r3, r19, 4
2000edd4:	16441803 	cmpu	r18, r4, r3
2000edd8:	bc52ffcc 	blti	r18, -52		// 2000eda4
        fifo->read_inds[i] = 0;
    }
}
2000eddc:	10330000 	addk	r1, r19, r0
2000ede0:	ea610008 	lwi	r19, r1, 8
2000ede4:	ea81000c 	lwi	r20, r1, 12
2000ede8:	30210010 	addik	r1, r1, 16
2000edec:	b60f0008 	rtsd	r15, 8
2000edf0:	80000000 	or	r0, r0, r0

2000edf4 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000edf4:	3021fff0 	addik	r1, r1, -16
2000edf8:	fa610008 	swi	r19, r1, 8
2000edfc:	fa81000c 	swi	r20, r1, 12
2000ee00:	12610000 	addk	r19, r1, r0
2000ee04:	96808000 	mfs	r20, rpc
2000ee08:	b000dfff 	imm	-8193
2000ee0c:	32942b58 	addik	r20, r20, 11096
2000ee10:	f8b30014 	swi	r5, r19, 20
2000ee14:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000ee18:	e8730014 	lwi	r3, r19, 20
2000ee1c:	e8830004 	lwi	r4, r3, 4
2000ee20:	e8730014 	lwi	r3, r19, 20
2000ee24:	e8a3000c 	lwi	r5, r3, 12
2000ee28:	e8730018 	lwi	r3, r19, 24
2000ee2c:	64630402 	bslli	r3, r3, 2
2000ee30:	10651800 	addk	r3, r5, r3
2000ee34:	e8a30000 	lwi	r5, r3, 0
2000ee38:	e8730014 	lwi	r3, r19, 20
2000ee3c:	e8630000 	lwi	r3, r3, 0
2000ee40:	3063ffff 	addik	r3, r3, -1
2000ee44:	84651800 	and	r3, r5, r3
2000ee48:	10641800 	addk	r3, r4, r3
2000ee4c:	e0630000 	lbui	r3, r3, 0
2000ee50:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000ee54:	e8730014 	lwi	r3, r19, 20
2000ee58:	e883000c 	lwi	r4, r3, 12
2000ee5c:	e8730018 	lwi	r3, r19, 24
2000ee60:	64630402 	bslli	r3, r3, 2
2000ee64:	10641800 	addk	r3, r4, r3
2000ee68:	e8830000 	lwi	r4, r3, 0
2000ee6c:	30840001 	addik	r4, r4, 1
2000ee70:	f8830000 	swi	r4, r3, 0
    return value;
2000ee74:	e0730004 	lbui	r3, r19, 4
2000ee78:	90630060 	sext8	r3, r3
}
2000ee7c:	10330000 	addk	r1, r19, r0
2000ee80:	ea610008 	lwi	r19, r1, 8
2000ee84:	ea81000c 	lwi	r20, r1, 12
2000ee88:	30210010 	addik	r1, r1, 16
2000ee8c:	b60f0008 	rtsd	r15, 8
2000ee90:	80000000 	or	r0, r0, r0

2000ee94 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000ee94:	3021fff4 	addik	r1, r1, -12
2000ee98:	fa610004 	swi	r19, r1, 4
2000ee9c:	fa810008 	swi	r20, r1, 8
2000eea0:	12610000 	addk	r19, r1, r0
2000eea4:	96808000 	mfs	r20, rpc
2000eea8:	b000dfff 	imm	-8193
2000eeac:	32942ab8 	addik	r20, r20, 10936
2000eeb0:	f8b30010 	swi	r5, r19, 16
2000eeb4:	10660000 	addk	r3, r6, r0
2000eeb8:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000eebc:	e8730010 	lwi	r3, r19, 16
2000eec0:	e8830004 	lwi	r4, r3, 4
2000eec4:	e8730010 	lwi	r3, r19, 16
2000eec8:	e8630010 	lwi	r3, r3, 16
2000eecc:	e8a30000 	lwi	r5, r3, 0
2000eed0:	e8730010 	lwi	r3, r19, 16
2000eed4:	e8630000 	lwi	r3, r3, 0
2000eed8:	3063ffff 	addik	r3, r3, -1
2000eedc:	84651800 	and	r3, r5, r3
2000eee0:	10641800 	addk	r3, r4, r3
2000eee4:	e0930014 	lbui	r4, r19, 20
2000eee8:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2000eeec:	e8730010 	lwi	r3, r19, 16
2000eef0:	e8630010 	lwi	r3, r3, 16
2000eef4:	e8830000 	lwi	r4, r3, 0
2000eef8:	30840001 	addik	r4, r4, 1
2000eefc:	f8830000 	swi	r4, r3, 0
}
2000ef00:	10330000 	addk	r1, r19, r0
2000ef04:	ea610004 	lwi	r19, r1, 4
2000ef08:	ea810008 	lwi	r20, r1, 8
2000ef0c:	3021000c 	addik	r1, r1, 12
2000ef10:	b60f0008 	rtsd	r15, 8
2000ef14:	80000000 	or	r0, r0, r0

2000ef18 <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000ef18:	3021fff4 	addik	r1, r1, -12
2000ef1c:	fa610004 	swi	r19, r1, 4
2000ef20:	fa810008 	swi	r20, r1, 8
2000ef24:	12610000 	addk	r19, r1, r0
2000ef28:	96808000 	mfs	r20, rpc
2000ef2c:	b000dfff 	imm	-8193
2000ef30:	32942a34 	addik	r20, r20, 10804
2000ef34:	f8b30010 	swi	r5, r19, 16
2000ef38:	f8d30014 	swi	r6, r19, 20
2000ef3c:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000ef40:	e8730010 	lwi	r3, r19, 16
2000ef44:	e8630010 	lwi	r3, r3, 16
2000ef48:	e8830000 	lwi	r4, r3, 0
2000ef4c:	e8730010 	lwi	r3, r19, 16
2000ef50:	e8a3000c 	lwi	r5, r3, 12
2000ef54:	e8730014 	lwi	r3, r19, 20
2000ef58:	64630402 	bslli	r3, r3, 2
2000ef5c:	10651800 	addk	r3, r5, r3
2000ef60:	e8630000 	lwi	r3, r3, 0
2000ef64:	14a32000 	rsubk	r5, r3, r4
2000ef68:	30600001 	addik	r3, r0, 1
2000ef6c:	e8930018 	lwi	r4, r19, 24
2000ef70:	16442803 	cmpu	r18, r4, r5
2000ef74:	bcb20008 	bgei	r18, 8		// 2000ef7c
2000ef78:	10600000 	addk	r3, r0, r0
2000ef7c:	a46300ff 	andi	r3, r3, 255
}
2000ef80:	10330000 	addk	r1, r19, r0
2000ef84:	ea610004 	lwi	r19, r1, 4
2000ef88:	ea810008 	lwi	r20, r1, 8
2000ef8c:	3021000c 	addik	r1, r1, 12
2000ef90:	b60f0008 	rtsd	r15, 8
2000ef94:	80000000 	or	r0, r0, r0

2000ef98 <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000ef98:	3021fff4 	addik	r1, r1, -12
2000ef9c:	fa610004 	swi	r19, r1, 4
2000efa0:	fa810008 	swi	r20, r1, 8
2000efa4:	12610000 	addk	r19, r1, r0
2000efa8:	96808000 	mfs	r20, rpc
2000efac:	b000dfff 	imm	-8193
2000efb0:	329429b4 	addik	r20, r20, 10676
2000efb4:	f8b30010 	swi	r5, r19, 16
2000efb8:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000efbc:	e8730010 	lwi	r3, r19, 16
2000efc0:	e8630010 	lwi	r3, r3, 16
2000efc4:	e8830000 	lwi	r4, r3, 0
2000efc8:	e8730010 	lwi	r3, r19, 16
2000efcc:	e8a3000c 	lwi	r5, r3, 12
2000efd0:	e8730014 	lwi	r3, r19, 20
2000efd4:	64630402 	bslli	r3, r3, 2
2000efd8:	10651800 	addk	r3, r5, r3
2000efdc:	e8630000 	lwi	r3, r3, 0
2000efe0:	14632000 	rsubk	r3, r3, r4
}
2000efe4:	10330000 	addk	r1, r19, r0
2000efe8:	ea610004 	lwi	r19, r1, 4
2000efec:	ea810008 	lwi	r20, r1, 8
2000eff0:	3021000c 	addik	r1, r1, 12
2000eff4:	b60f0008 	rtsd	r15, 8
2000eff8:	80000000 	or	r0, r0, r0

2000effc <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000effc:	3021fff0 	addik	r1, r1, -16
2000f000:	fa610008 	swi	r19, r1, 8
2000f004:	fa81000c 	swi	r20, r1, 12
2000f008:	12610000 	addk	r19, r1, r0
2000f00c:	96808000 	mfs	r20, rpc
2000f010:	b000dfff 	imm	-8193
2000f014:	32942950 	addik	r20, r20, 10576
2000f018:	f8b30014 	swi	r5, r19, 20
2000f01c:	f8d30018 	swi	r6, r19, 24
2000f020:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000f024:	f8130004 	swi	r0, r19, 4
2000f028:	b800005c 	bri	92		// 2000f084
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000f02c:	e8730014 	lwi	r3, r19, 20
2000f030:	e8830000 	lwi	r4, r3, 0
2000f034:	e8730014 	lwi	r3, r19, 20
2000f038:	e8a3000c 	lwi	r5, r3, 12
2000f03c:	e8730004 	lwi	r3, r19, 4
2000f040:	64630402 	bslli	r3, r3, 2
2000f044:	10651800 	addk	r3, r5, r3
2000f048:	e8a30000 	lwi	r5, r3, 0
2000f04c:	e8730014 	lwi	r3, r19, 20
2000f050:	e8630010 	lwi	r3, r3, 16
2000f054:	e8630000 	lwi	r3, r3, 0
2000f058:	14632800 	rsubk	r3, r3, r5
2000f05c:	10641800 	addk	r3, r4, r3
2000f060:	30830001 	addik	r4, r3, 1
2000f064:	e873001c 	lwi	r3, r19, 28
2000f068:	16441803 	cmpu	r18, r4, r3
2000f06c:	bc52000c 	blti	r18, 12		// 2000f078
            return 0;
2000f070:	10600000 	addk	r3, r0, r0
2000f074:	b8000024 	bri	36		// 2000f098
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000f078:	e8730004 	lwi	r3, r19, 4
2000f07c:	30630001 	addik	r3, r3, 1
2000f080:	f8730004 	swi	r3, r19, 4
2000f084:	e8930004 	lwi	r4, r19, 4
2000f088:	e8730018 	lwi	r3, r19, 24
2000f08c:	16432003 	cmpu	r18, r3, r4
2000f090:	bc52ff9c 	blti	r18, -100		// 2000f02c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000f094:	30600001 	addik	r3, r0, 1
}
2000f098:	10330000 	addk	r1, r19, r0
2000f09c:	ea610008 	lwi	r19, r1, 8
2000f0a0:	ea81000c 	lwi	r20, r1, 12
2000f0a4:	30210010 	addik	r1, r1, 16
2000f0a8:	b60f0008 	rtsd	r15, 8
2000f0ac:	80000000 	or	r0, r0, r0

2000f0b0 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000f0b0:	3021ffe8 	addik	r1, r1, -24
2000f0b4:	fa610010 	swi	r19, r1, 16
2000f0b8:	fa810014 	swi	r20, r1, 20
2000f0bc:	12610000 	addk	r19, r1, r0
2000f0c0:	96808000 	mfs	r20, rpc
2000f0c4:	b000dfff 	imm	-8193
2000f0c8:	3294289c 	addik	r20, r20, 10396
2000f0cc:	f8b3001c 	swi	r5, r19, 28
2000f0d0:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000f0d4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000f0d8:	f8130004 	swi	r0, r19, 4
2000f0dc:	b8000054 	bri	84		// 2000f130
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000f0e0:	e873001c 	lwi	r3, r19, 28
2000f0e4:	e8630010 	lwi	r3, r3, 16
2000f0e8:	e8830000 	lwi	r4, r3, 0
2000f0ec:	e873001c 	lwi	r3, r19, 28
2000f0f0:	e8a3000c 	lwi	r5, r3, 12
2000f0f4:	e8730004 	lwi	r3, r19, 4
2000f0f8:	64630402 	bslli	r3, r3, 2
2000f0fc:	10651800 	addk	r3, r5, r3
2000f100:	e8630000 	lwi	r3, r3, 0
2000f104:	14632000 	rsubk	r3, r3, r4
2000f108:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000f10c:	e8930008 	lwi	r4, r19, 8
2000f110:	e873000c 	lwi	r3, r19, 12
2000f114:	16441803 	cmpu	r18, r4, r3
2000f118:	bcb20008 	bgei	r18, 8		// 2000f120
2000f11c:	10640000 	addk	r3, r4, r0
2000f120:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000f124:	e8730004 	lwi	r3, r19, 4
2000f128:	30630001 	addik	r3, r3, 1
2000f12c:	f8730004 	swi	r3, r19, 4
2000f130:	e8930004 	lwi	r4, r19, 4
2000f134:	e8730020 	lwi	r3, r19, 32
2000f138:	16432003 	cmpu	r18, r3, r4
2000f13c:	bc52ffa4 	blti	r18, -92		// 2000f0e0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000f140:	e873001c 	lwi	r3, r19, 28
2000f144:	e8830000 	lwi	r4, r3, 0
2000f148:	e8730008 	lwi	r3, r19, 8
2000f14c:	14632000 	rsubk	r3, r3, r4
}
2000f150:	10330000 	addk	r1, r19, r0
2000f154:	ea610010 	lwi	r19, r1, 16
2000f158:	ea810014 	lwi	r20, r1, 20
2000f15c:	30210018 	addik	r1, r1, 24
2000f160:	b60f0008 	rtsd	r15, 8
2000f164:	80000000 	or	r0, r0, r0

2000f168 <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000f168:	3021fff0 	addik	r1, r1, -16
2000f16c:	fa610008 	swi	r19, r1, 8
2000f170:	fa81000c 	swi	r20, r1, 12
2000f174:	12610000 	addk	r19, r1, r0
2000f178:	96808000 	mfs	r20, rpc
2000f17c:	b000dfff 	imm	-8193
2000f180:	329427e4 	addik	r20, r20, 10212
2000f184:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2000f188:	e8730014 	lwi	r3, r19, 20
2000f18c:	e8630010 	lwi	r3, r3, 16
2000f190:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000f194:	f8130004 	swi	r0, r19, 4
2000f198:	b8000028 	bri	40		// 2000f1c0
        fifo->read_inds[i] = 0;
2000f19c:	e8730014 	lwi	r3, r19, 20
2000f1a0:	e883000c 	lwi	r4, r3, 12
2000f1a4:	e8730004 	lwi	r3, r19, 4
2000f1a8:	64630402 	bslli	r3, r3, 2
2000f1ac:	10641800 	addk	r3, r4, r3
2000f1b0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000f1b4:	e8730004 	lwi	r3, r19, 4
2000f1b8:	30630001 	addik	r3, r3, 1
2000f1bc:	f8730004 	swi	r3, r19, 4
2000f1c0:	e8730014 	lwi	r3, r19, 20
2000f1c4:	e8830008 	lwi	r4, r3, 8
2000f1c8:	e8730004 	lwi	r3, r19, 4
2000f1cc:	16441803 	cmpu	r18, r4, r3
2000f1d0:	bc52ffcc 	blti	r18, -52		// 2000f19c
        fifo->read_inds[i] = 0;
    }
}
2000f1d4:	10330000 	addk	r1, r19, r0
2000f1d8:	ea610008 	lwi	r19, r1, 8
2000f1dc:	ea81000c 	lwi	r20, r1, 12
2000f1e0:	30210010 	addik	r1, r1, 16
2000f1e4:	b60f0008 	rtsd	r15, 8
2000f1e8:	80000000 	or	r0, r0, r0

2000f1ec <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000f1ec:	3021fff0 	addik	r1, r1, -16
2000f1f0:	fa610008 	swi	r19, r1, 8
2000f1f4:	fa81000c 	swi	r20, r1, 12
2000f1f8:	12610000 	addk	r19, r1, r0
2000f1fc:	96808000 	mfs	r20, rpc
2000f200:	b000dfff 	imm	-8193
2000f204:	32942760 	addik	r20, r20, 10080
2000f208:	f8b30014 	swi	r5, r19, 20
2000f20c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000f210:	e8730014 	lwi	r3, r19, 20
2000f214:	e8830004 	lwi	r4, r3, 4
2000f218:	e8730014 	lwi	r3, r19, 20
2000f21c:	e8a3000c 	lwi	r5, r3, 12
2000f220:	e8730018 	lwi	r3, r19, 24
2000f224:	64630402 	bslli	r3, r3, 2
2000f228:	10651800 	addk	r3, r5, r3
2000f22c:	e8a30000 	lwi	r5, r3, 0
2000f230:	e8730014 	lwi	r3, r19, 20
2000f234:	e8630000 	lwi	r3, r3, 0
2000f238:	3063ffff 	addik	r3, r3, -1
2000f23c:	84651800 	and	r3, r5, r3
2000f240:	10631800 	addk	r3, r3, r3
2000f244:	10641800 	addk	r3, r4, r3
2000f248:	e4630000 	lhui	r3, r3, 0
2000f24c:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000f250:	e8730014 	lwi	r3, r19, 20
2000f254:	e883000c 	lwi	r4, r3, 12
2000f258:	e8730018 	lwi	r3, r19, 24
2000f25c:	64630402 	bslli	r3, r3, 2
2000f260:	10641800 	addk	r3, r4, r3
2000f264:	e8830000 	lwi	r4, r3, 0
2000f268:	30840001 	addik	r4, r4, 1
2000f26c:	f8830000 	swi	r4, r3, 0
    return value;
2000f270:	e4730004 	lhui	r3, r19, 4
2000f274:	90630061 	sext16	r3, r3
}
2000f278:	10330000 	addk	r1, r19, r0
2000f27c:	ea610008 	lwi	r19, r1, 8
2000f280:	ea81000c 	lwi	r20, r1, 12
2000f284:	30210010 	addik	r1, r1, 16
2000f288:	b60f0008 	rtsd	r15, 8
2000f28c:	80000000 	or	r0, r0, r0

2000f290 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000f290:	3021fff4 	addik	r1, r1, -12
2000f294:	fa610004 	swi	r19, r1, 4
2000f298:	fa810008 	swi	r20, r1, 8
2000f29c:	12610000 	addk	r19, r1, r0
2000f2a0:	96808000 	mfs	r20, rpc
2000f2a4:	b000dfff 	imm	-8193
2000f2a8:	329426bc 	addik	r20, r20, 9916
2000f2ac:	f8b30010 	swi	r5, r19, 16
2000f2b0:	10660000 	addk	r3, r6, r0
2000f2b4:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000f2b8:	e8730010 	lwi	r3, r19, 16
2000f2bc:	e8830004 	lwi	r4, r3, 4
2000f2c0:	e8730010 	lwi	r3, r19, 16
2000f2c4:	e8630010 	lwi	r3, r3, 16
2000f2c8:	e8a30000 	lwi	r5, r3, 0
2000f2cc:	e8730010 	lwi	r3, r19, 16
2000f2d0:	e8630000 	lwi	r3, r3, 0
2000f2d4:	3063ffff 	addik	r3, r3, -1
2000f2d8:	84651800 	and	r3, r5, r3
2000f2dc:	10631800 	addk	r3, r3, r3
2000f2e0:	10641800 	addk	r3, r4, r3
2000f2e4:	e4930014 	lhui	r4, r19, 20
2000f2e8:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2000f2ec:	e8730010 	lwi	r3, r19, 16
2000f2f0:	e8630010 	lwi	r3, r3, 16
2000f2f4:	e8830000 	lwi	r4, r3, 0
2000f2f8:	30840001 	addik	r4, r4, 1
2000f2fc:	f8830000 	swi	r4, r3, 0
}
2000f300:	10330000 	addk	r1, r19, r0
2000f304:	ea610004 	lwi	r19, r1, 4
2000f308:	ea810008 	lwi	r20, r1, 8
2000f30c:	3021000c 	addik	r1, r1, 12
2000f310:	b60f0008 	rtsd	r15, 8
2000f314:	80000000 	or	r0, r0, r0

2000f318 <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000f318:	3021fff4 	addik	r1, r1, -12
2000f31c:	fa610004 	swi	r19, r1, 4
2000f320:	fa810008 	swi	r20, r1, 8
2000f324:	12610000 	addk	r19, r1, r0
2000f328:	96808000 	mfs	r20, rpc
2000f32c:	b000dfff 	imm	-8193
2000f330:	32942634 	addik	r20, r20, 9780
2000f334:	f8b30010 	swi	r5, r19, 16
2000f338:	f8d30014 	swi	r6, r19, 20
2000f33c:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000f340:	e8730010 	lwi	r3, r19, 16
2000f344:	e8630010 	lwi	r3, r3, 16
2000f348:	e8830000 	lwi	r4, r3, 0
2000f34c:	e8730010 	lwi	r3, r19, 16
2000f350:	e8a3000c 	lwi	r5, r3, 12
2000f354:	e8730014 	lwi	r3, r19, 20
2000f358:	64630402 	bslli	r3, r3, 2
2000f35c:	10651800 	addk	r3, r5, r3
2000f360:	e8630000 	lwi	r3, r3, 0
2000f364:	14a32000 	rsubk	r5, r3, r4
2000f368:	30600001 	addik	r3, r0, 1
2000f36c:	e8930018 	lwi	r4, r19, 24
2000f370:	16442803 	cmpu	r18, r4, r5
2000f374:	bcb20008 	bgei	r18, 8		// 2000f37c
2000f378:	10600000 	addk	r3, r0, r0
2000f37c:	a46300ff 	andi	r3, r3, 255
}
2000f380:	10330000 	addk	r1, r19, r0
2000f384:	ea610004 	lwi	r19, r1, 4
2000f388:	ea810008 	lwi	r20, r1, 8
2000f38c:	3021000c 	addik	r1, r1, 12
2000f390:	b60f0008 	rtsd	r15, 8
2000f394:	80000000 	or	r0, r0, r0

2000f398 <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000f398:	3021fff4 	addik	r1, r1, -12
2000f39c:	fa610004 	swi	r19, r1, 4
2000f3a0:	fa810008 	swi	r20, r1, 8
2000f3a4:	12610000 	addk	r19, r1, r0
2000f3a8:	96808000 	mfs	r20, rpc
2000f3ac:	b000dfff 	imm	-8193
2000f3b0:	329425b4 	addik	r20, r20, 9652
2000f3b4:	f8b30010 	swi	r5, r19, 16
2000f3b8:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000f3bc:	e8730010 	lwi	r3, r19, 16
2000f3c0:	e8630010 	lwi	r3, r3, 16
2000f3c4:	e8830000 	lwi	r4, r3, 0
2000f3c8:	e8730010 	lwi	r3, r19, 16
2000f3cc:	e8a3000c 	lwi	r5, r3, 12
2000f3d0:	e8730014 	lwi	r3, r19, 20
2000f3d4:	64630402 	bslli	r3, r3, 2
2000f3d8:	10651800 	addk	r3, r5, r3
2000f3dc:	e8630000 	lwi	r3, r3, 0
2000f3e0:	14632000 	rsubk	r3, r3, r4
}
2000f3e4:	10330000 	addk	r1, r19, r0
2000f3e8:	ea610004 	lwi	r19, r1, 4
2000f3ec:	ea810008 	lwi	r20, r1, 8
2000f3f0:	3021000c 	addik	r1, r1, 12
2000f3f4:	b60f0008 	rtsd	r15, 8
2000f3f8:	80000000 	or	r0, r0, r0

2000f3fc <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000f3fc:	3021fff0 	addik	r1, r1, -16
2000f400:	fa610008 	swi	r19, r1, 8
2000f404:	fa81000c 	swi	r20, r1, 12
2000f408:	12610000 	addk	r19, r1, r0
2000f40c:	96808000 	mfs	r20, rpc
2000f410:	b000dfff 	imm	-8193
2000f414:	32942550 	addik	r20, r20, 9552
2000f418:	f8b30014 	swi	r5, r19, 20
2000f41c:	f8d30018 	swi	r6, r19, 24
2000f420:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000f424:	f8130004 	swi	r0, r19, 4
2000f428:	b800005c 	bri	92		// 2000f484
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000f42c:	e8730014 	lwi	r3, r19, 20
2000f430:	e8830000 	lwi	r4, r3, 0
2000f434:	e8730014 	lwi	r3, r19, 20
2000f438:	e8a3000c 	lwi	r5, r3, 12
2000f43c:	e8730004 	lwi	r3, r19, 4
2000f440:	64630402 	bslli	r3, r3, 2
2000f444:	10651800 	addk	r3, r5, r3
2000f448:	e8a30000 	lwi	r5, r3, 0
2000f44c:	e8730014 	lwi	r3, r19, 20
2000f450:	e8630010 	lwi	r3, r3, 16
2000f454:	e8630000 	lwi	r3, r3, 0
2000f458:	14632800 	rsubk	r3, r3, r5
2000f45c:	10641800 	addk	r3, r4, r3
2000f460:	30830001 	addik	r4, r3, 1
2000f464:	e873001c 	lwi	r3, r19, 28
2000f468:	16441803 	cmpu	r18, r4, r3
2000f46c:	bc52000c 	blti	r18, 12		// 2000f478
            return 0;
2000f470:	10600000 	addk	r3, r0, r0
2000f474:	b8000024 	bri	36		// 2000f498
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000f478:	e8730004 	lwi	r3, r19, 4
2000f47c:	30630001 	addik	r3, r3, 1
2000f480:	f8730004 	swi	r3, r19, 4
2000f484:	e8930004 	lwi	r4, r19, 4
2000f488:	e8730018 	lwi	r3, r19, 24
2000f48c:	16432003 	cmpu	r18, r3, r4
2000f490:	bc52ff9c 	blti	r18, -100		// 2000f42c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000f494:	30600001 	addik	r3, r0, 1
}
2000f498:	10330000 	addk	r1, r19, r0
2000f49c:	ea610008 	lwi	r19, r1, 8
2000f4a0:	ea81000c 	lwi	r20, r1, 12
2000f4a4:	30210010 	addik	r1, r1, 16
2000f4a8:	b60f0008 	rtsd	r15, 8
2000f4ac:	80000000 	or	r0, r0, r0

2000f4b0 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000f4b0:	3021ffe8 	addik	r1, r1, -24
2000f4b4:	fa610010 	swi	r19, r1, 16
2000f4b8:	fa810014 	swi	r20, r1, 20
2000f4bc:	12610000 	addk	r19, r1, r0
2000f4c0:	96808000 	mfs	r20, rpc
2000f4c4:	b000dfff 	imm	-8193
2000f4c8:	3294249c 	addik	r20, r20, 9372
2000f4cc:	f8b3001c 	swi	r5, r19, 28
2000f4d0:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000f4d4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000f4d8:	f8130004 	swi	r0, r19, 4
2000f4dc:	b8000054 	bri	84		// 2000f530
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000f4e0:	e873001c 	lwi	r3, r19, 28
2000f4e4:	e8630010 	lwi	r3, r3, 16
2000f4e8:	e8830000 	lwi	r4, r3, 0
2000f4ec:	e873001c 	lwi	r3, r19, 28
2000f4f0:	e8a3000c 	lwi	r5, r3, 12
2000f4f4:	e8730004 	lwi	r3, r19, 4
2000f4f8:	64630402 	bslli	r3, r3, 2
2000f4fc:	10651800 	addk	r3, r5, r3
2000f500:	e8630000 	lwi	r3, r3, 0
2000f504:	14632000 	rsubk	r3, r3, r4
2000f508:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000f50c:	e8930008 	lwi	r4, r19, 8
2000f510:	e873000c 	lwi	r3, r19, 12
2000f514:	16441803 	cmpu	r18, r4, r3
2000f518:	bcb20008 	bgei	r18, 8		// 2000f520
2000f51c:	10640000 	addk	r3, r4, r0
2000f520:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000f524:	e8730004 	lwi	r3, r19, 4
2000f528:	30630001 	addik	r3, r3, 1
2000f52c:	f8730004 	swi	r3, r19, 4
2000f530:	e8930004 	lwi	r4, r19, 4
2000f534:	e8730020 	lwi	r3, r19, 32
2000f538:	16432003 	cmpu	r18, r3, r4
2000f53c:	bc52ffa4 	blti	r18, -92		// 2000f4e0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000f540:	e873001c 	lwi	r3, r19, 28
2000f544:	e8830000 	lwi	r4, r3, 0
2000f548:	e8730008 	lwi	r3, r19, 8
2000f54c:	14632000 	rsubk	r3, r3, r4
}
2000f550:	10330000 	addk	r1, r19, r0
2000f554:	ea610010 	lwi	r19, r1, 16
2000f558:	ea810014 	lwi	r20, r1, 20
2000f55c:	30210018 	addik	r1, r1, 24
2000f560:	b60f0008 	rtsd	r15, 8
2000f564:	80000000 	or	r0, r0, r0

2000f568 <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000f568:	3021fff0 	addik	r1, r1, -16
2000f56c:	fa610008 	swi	r19, r1, 8
2000f570:	fa81000c 	swi	r20, r1, 12
2000f574:	12610000 	addk	r19, r1, r0
2000f578:	96808000 	mfs	r20, rpc
2000f57c:	b000dfff 	imm	-8193
2000f580:	329423e4 	addik	r20, r20, 9188
2000f584:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2000f588:	e8730014 	lwi	r3, r19, 20
2000f58c:	e8630010 	lwi	r3, r3, 16
2000f590:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000f594:	f8130004 	swi	r0, r19, 4
2000f598:	b8000028 	bri	40		// 2000f5c0
        fifo->read_inds[i] = 0;
2000f59c:	e8730014 	lwi	r3, r19, 20
2000f5a0:	e883000c 	lwi	r4, r3, 12
2000f5a4:	e8730004 	lwi	r3, r19, 4
2000f5a8:	64630402 	bslli	r3, r3, 2
2000f5ac:	10641800 	addk	r3, r4, r3
2000f5b0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000f5b4:	e8730004 	lwi	r3, r19, 4
2000f5b8:	30630001 	addik	r3, r3, 1
2000f5bc:	f8730004 	swi	r3, r19, 4
2000f5c0:	e8730014 	lwi	r3, r19, 20
2000f5c4:	e8830008 	lwi	r4, r3, 8
2000f5c8:	e8730004 	lwi	r3, r19, 4
2000f5cc:	16441803 	cmpu	r18, r4, r3
2000f5d0:	bc52ffcc 	blti	r18, -52		// 2000f59c
        fifo->read_inds[i] = 0;
    }
}
2000f5d4:	10330000 	addk	r1, r19, r0
2000f5d8:	ea610008 	lwi	r19, r1, 8
2000f5dc:	ea81000c 	lwi	r20, r1, 12
2000f5e0:	30210010 	addik	r1, r1, 16
2000f5e4:	b60f0008 	rtsd	r15, 8
2000f5e8:	80000000 	or	r0, r0, r0

2000f5ec <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000f5ec:	3021fff0 	addik	r1, r1, -16
2000f5f0:	fa610008 	swi	r19, r1, 8
2000f5f4:	fa81000c 	swi	r20, r1, 12
2000f5f8:	12610000 	addk	r19, r1, r0
2000f5fc:	96808000 	mfs	r20, rpc
2000f600:	b000dfff 	imm	-8193
2000f604:	32942360 	addik	r20, r20, 9056
2000f608:	f8b30014 	swi	r5, r19, 20
2000f60c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000f610:	e8730014 	lwi	r3, r19, 20
2000f614:	e8830004 	lwi	r4, r3, 4
2000f618:	e8730014 	lwi	r3, r19, 20
2000f61c:	e8a3000c 	lwi	r5, r3, 12
2000f620:	e8730018 	lwi	r3, r19, 24
2000f624:	64630402 	bslli	r3, r3, 2
2000f628:	10651800 	addk	r3, r5, r3
2000f62c:	e8a30000 	lwi	r5, r3, 0
2000f630:	e8730014 	lwi	r3, r19, 20
2000f634:	e8630000 	lwi	r3, r3, 0
2000f638:	3063ffff 	addik	r3, r3, -1
2000f63c:	84651800 	and	r3, r5, r3
2000f640:	64630402 	bslli	r3, r3, 2
2000f644:	10641800 	addk	r3, r4, r3
2000f648:	e8630000 	lwi	r3, r3, 0
2000f64c:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000f650:	e8730014 	lwi	r3, r19, 20
2000f654:	e883000c 	lwi	r4, r3, 12
2000f658:	e8730018 	lwi	r3, r19, 24
2000f65c:	64630402 	bslli	r3, r3, 2
2000f660:	10641800 	addk	r3, r4, r3
2000f664:	e8830000 	lwi	r4, r3, 0
2000f668:	30840001 	addik	r4, r4, 1
2000f66c:	f8830000 	swi	r4, r3, 0
    return value;
2000f670:	e8730004 	lwi	r3, r19, 4
}
2000f674:	10330000 	addk	r1, r19, r0
2000f678:	ea610008 	lwi	r19, r1, 8
2000f67c:	ea81000c 	lwi	r20, r1, 12
2000f680:	30210010 	addik	r1, r1, 16
2000f684:	b60f0008 	rtsd	r15, 8
2000f688:	80000000 	or	r0, r0, r0

2000f68c <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000f68c:	3021fff4 	addik	r1, r1, -12
2000f690:	fa610004 	swi	r19, r1, 4
2000f694:	fa810008 	swi	r20, r1, 8
2000f698:	12610000 	addk	r19, r1, r0
2000f69c:	96808000 	mfs	r20, rpc
2000f6a0:	b000dfff 	imm	-8193
2000f6a4:	329422c0 	addik	r20, r20, 8896
2000f6a8:	f8b30010 	swi	r5, r19, 16
2000f6ac:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000f6b0:	e8730010 	lwi	r3, r19, 16
2000f6b4:	e8830004 	lwi	r4, r3, 4
2000f6b8:	e8730010 	lwi	r3, r19, 16
2000f6bc:	e8630010 	lwi	r3, r3, 16
2000f6c0:	e8a30000 	lwi	r5, r3, 0
2000f6c4:	e8730010 	lwi	r3, r19, 16
2000f6c8:	e8630000 	lwi	r3, r3, 0
2000f6cc:	3063ffff 	addik	r3, r3, -1
2000f6d0:	84651800 	and	r3, r5, r3
2000f6d4:	64630402 	bslli	r3, r3, 2
2000f6d8:	10641800 	addk	r3, r4, r3
2000f6dc:	e8930014 	lwi	r4, r19, 20
2000f6e0:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2000f6e4:	e8730010 	lwi	r3, r19, 16
2000f6e8:	e8630010 	lwi	r3, r3, 16
2000f6ec:	e8830000 	lwi	r4, r3, 0
2000f6f0:	30840001 	addik	r4, r4, 1
2000f6f4:	f8830000 	swi	r4, r3, 0
}
2000f6f8:	10330000 	addk	r1, r19, r0
2000f6fc:	ea610004 	lwi	r19, r1, 4
2000f700:	ea810008 	lwi	r20, r1, 8
2000f704:	3021000c 	addik	r1, r1, 12
2000f708:	b60f0008 	rtsd	r15, 8
2000f70c:	80000000 	or	r0, r0, r0

2000f710 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000f710:	3021fff4 	addik	r1, r1, -12
2000f714:	fa610004 	swi	r19, r1, 4
2000f718:	fa810008 	swi	r20, r1, 8
2000f71c:	12610000 	addk	r19, r1, r0
2000f720:	96808000 	mfs	r20, rpc
2000f724:	b000dfff 	imm	-8193
2000f728:	3294223c 	addik	r20, r20, 8764
2000f72c:	f8b30010 	swi	r5, r19, 16
2000f730:	f8d30014 	swi	r6, r19, 20
2000f734:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000f738:	e8730010 	lwi	r3, r19, 16
2000f73c:	e8630010 	lwi	r3, r3, 16
2000f740:	e8830000 	lwi	r4, r3, 0
2000f744:	e8730010 	lwi	r3, r19, 16
2000f748:	e8a3000c 	lwi	r5, r3, 12
2000f74c:	e8730014 	lwi	r3, r19, 20
2000f750:	64630402 	bslli	r3, r3, 2
2000f754:	10651800 	addk	r3, r5, r3
2000f758:	e8630000 	lwi	r3, r3, 0
2000f75c:	14a32000 	rsubk	r5, r3, r4
2000f760:	30600001 	addik	r3, r0, 1
2000f764:	e8930018 	lwi	r4, r19, 24
2000f768:	16442803 	cmpu	r18, r4, r5
2000f76c:	bcb20008 	bgei	r18, 8		// 2000f774
2000f770:	10600000 	addk	r3, r0, r0
2000f774:	a46300ff 	andi	r3, r3, 255
}
2000f778:	10330000 	addk	r1, r19, r0
2000f77c:	ea610004 	lwi	r19, r1, 4
2000f780:	ea810008 	lwi	r20, r1, 8
2000f784:	3021000c 	addik	r1, r1, 12
2000f788:	b60f0008 	rtsd	r15, 8
2000f78c:	80000000 	or	r0, r0, r0

2000f790 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000f790:	3021fff4 	addik	r1, r1, -12
2000f794:	fa610004 	swi	r19, r1, 4
2000f798:	fa810008 	swi	r20, r1, 8
2000f79c:	12610000 	addk	r19, r1, r0
2000f7a0:	96808000 	mfs	r20, rpc
2000f7a4:	b000dfff 	imm	-8193
2000f7a8:	329421bc 	addik	r20, r20, 8636
2000f7ac:	f8b30010 	swi	r5, r19, 16
2000f7b0:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000f7b4:	e8730010 	lwi	r3, r19, 16
2000f7b8:	e8630010 	lwi	r3, r3, 16
2000f7bc:	e8830000 	lwi	r4, r3, 0
2000f7c0:	e8730010 	lwi	r3, r19, 16
2000f7c4:	e8a3000c 	lwi	r5, r3, 12
2000f7c8:	e8730014 	lwi	r3, r19, 20
2000f7cc:	64630402 	bslli	r3, r3, 2
2000f7d0:	10651800 	addk	r3, r5, r3
2000f7d4:	e8630000 	lwi	r3, r3, 0
2000f7d8:	14632000 	rsubk	r3, r3, r4
}
2000f7dc:	10330000 	addk	r1, r19, r0
2000f7e0:	ea610004 	lwi	r19, r1, 4
2000f7e4:	ea810008 	lwi	r20, r1, 8
2000f7e8:	3021000c 	addik	r1, r1, 12
2000f7ec:	b60f0008 	rtsd	r15, 8
2000f7f0:	80000000 	or	r0, r0, r0

2000f7f4 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000f7f4:	3021fff0 	addik	r1, r1, -16
2000f7f8:	fa610008 	swi	r19, r1, 8
2000f7fc:	fa81000c 	swi	r20, r1, 12
2000f800:	12610000 	addk	r19, r1, r0
2000f804:	96808000 	mfs	r20, rpc
2000f808:	b000dfff 	imm	-8193
2000f80c:	32942158 	addik	r20, r20, 8536
2000f810:	f8b30014 	swi	r5, r19, 20
2000f814:	f8d30018 	swi	r6, r19, 24
2000f818:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000f81c:	f8130004 	swi	r0, r19, 4
2000f820:	b800005c 	bri	92		// 2000f87c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000f824:	e8730014 	lwi	r3, r19, 20
2000f828:	e8830000 	lwi	r4, r3, 0
2000f82c:	e8730014 	lwi	r3, r19, 20
2000f830:	e8a3000c 	lwi	r5, r3, 12
2000f834:	e8730004 	lwi	r3, r19, 4
2000f838:	64630402 	bslli	r3, r3, 2
2000f83c:	10651800 	addk	r3, r5, r3
2000f840:	e8a30000 	lwi	r5, r3, 0
2000f844:	e8730014 	lwi	r3, r19, 20
2000f848:	e8630010 	lwi	r3, r3, 16
2000f84c:	e8630000 	lwi	r3, r3, 0
2000f850:	14632800 	rsubk	r3, r3, r5
2000f854:	10641800 	addk	r3, r4, r3
2000f858:	30830001 	addik	r4, r3, 1
2000f85c:	e873001c 	lwi	r3, r19, 28
2000f860:	16441803 	cmpu	r18, r4, r3
2000f864:	bc52000c 	blti	r18, 12		// 2000f870
            return 0;
2000f868:	10600000 	addk	r3, r0, r0
2000f86c:	b8000024 	bri	36		// 2000f890
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000f870:	e8730004 	lwi	r3, r19, 4
2000f874:	30630001 	addik	r3, r3, 1
2000f878:	f8730004 	swi	r3, r19, 4
2000f87c:	e8930004 	lwi	r4, r19, 4
2000f880:	e8730018 	lwi	r3, r19, 24
2000f884:	16432003 	cmpu	r18, r3, r4
2000f888:	bc52ff9c 	blti	r18, -100		// 2000f824
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000f88c:	30600001 	addik	r3, r0, 1
}
2000f890:	10330000 	addk	r1, r19, r0
2000f894:	ea610008 	lwi	r19, r1, 8
2000f898:	ea81000c 	lwi	r20, r1, 12
2000f89c:	30210010 	addik	r1, r1, 16
2000f8a0:	b60f0008 	rtsd	r15, 8
2000f8a4:	80000000 	or	r0, r0, r0

2000f8a8 <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000f8a8:	3021ffe8 	addik	r1, r1, -24
2000f8ac:	fa610010 	swi	r19, r1, 16
2000f8b0:	fa810014 	swi	r20, r1, 20
2000f8b4:	12610000 	addk	r19, r1, r0
2000f8b8:	96808000 	mfs	r20, rpc
2000f8bc:	b000dfff 	imm	-8193
2000f8c0:	329420a4 	addik	r20, r20, 8356
2000f8c4:	f8b3001c 	swi	r5, r19, 28
2000f8c8:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000f8cc:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000f8d0:	f8130004 	swi	r0, r19, 4
2000f8d4:	b8000054 	bri	84		// 2000f928
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000f8d8:	e873001c 	lwi	r3, r19, 28
2000f8dc:	e8630010 	lwi	r3, r3, 16
2000f8e0:	e8830000 	lwi	r4, r3, 0
2000f8e4:	e873001c 	lwi	r3, r19, 28
2000f8e8:	e8a3000c 	lwi	r5, r3, 12
2000f8ec:	e8730004 	lwi	r3, r19, 4
2000f8f0:	64630402 	bslli	r3, r3, 2
2000f8f4:	10651800 	addk	r3, r5, r3
2000f8f8:	e8630000 	lwi	r3, r3, 0
2000f8fc:	14632000 	rsubk	r3, r3, r4
2000f900:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000f904:	e8930008 	lwi	r4, r19, 8
2000f908:	e873000c 	lwi	r3, r19, 12
2000f90c:	16441803 	cmpu	r18, r4, r3
2000f910:	bcb20008 	bgei	r18, 8		// 2000f918
2000f914:	10640000 	addk	r3, r4, r0
2000f918:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000f91c:	e8730004 	lwi	r3, r19, 4
2000f920:	30630001 	addik	r3, r3, 1
2000f924:	f8730004 	swi	r3, r19, 4
2000f928:	e8930004 	lwi	r4, r19, 4
2000f92c:	e8730020 	lwi	r3, r19, 32
2000f930:	16432003 	cmpu	r18, r3, r4
2000f934:	bc52ffa4 	blti	r18, -92		// 2000f8d8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000f938:	e873001c 	lwi	r3, r19, 28
2000f93c:	e8830000 	lwi	r4, r3, 0
2000f940:	e8730008 	lwi	r3, r19, 8
2000f944:	14632000 	rsubk	r3, r3, r4
}
2000f948:	10330000 	addk	r1, r19, r0
2000f94c:	ea610010 	lwi	r19, r1, 16
2000f950:	ea810014 	lwi	r20, r1, 20
2000f954:	30210018 	addik	r1, r1, 24
2000f958:	b60f0008 	rtsd	r15, 8
2000f95c:	80000000 	or	r0, r0, r0

2000f960 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000f960:	3021fff0 	addik	r1, r1, -16
2000f964:	fa610008 	swi	r19, r1, 8
2000f968:	fa81000c 	swi	r20, r1, 12
2000f96c:	12610000 	addk	r19, r1, r0
2000f970:	96808000 	mfs	r20, rpc
2000f974:	b000dfff 	imm	-8193
2000f978:	32941fec 	addik	r20, r20, 8172
2000f97c:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2000f980:	e8730014 	lwi	r3, r19, 20
2000f984:	e8630010 	lwi	r3, r3, 16
2000f988:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000f98c:	f8130004 	swi	r0, r19, 4
2000f990:	b8000028 	bri	40		// 2000f9b8
        fifo->read_inds[i] = 0;
2000f994:	e8730014 	lwi	r3, r19, 20
2000f998:	e883000c 	lwi	r4, r3, 12
2000f99c:	e8730004 	lwi	r3, r19, 4
2000f9a0:	64630402 	bslli	r3, r3, 2
2000f9a4:	10641800 	addk	r3, r4, r3
2000f9a8:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000f9ac:	e8730004 	lwi	r3, r19, 4
2000f9b0:	30630001 	addik	r3, r3, 1
2000f9b4:	f8730004 	swi	r3, r19, 4
2000f9b8:	e8730014 	lwi	r3, r19, 20
2000f9bc:	e8830008 	lwi	r4, r3, 8
2000f9c0:	e8730004 	lwi	r3, r19, 4
2000f9c4:	16441803 	cmpu	r18, r4, r3
2000f9c8:	bc52ffcc 	blti	r18, -52		// 2000f994
        fifo->read_inds[i] = 0;
    }
}
2000f9cc:	10330000 	addk	r1, r19, r0
2000f9d0:	ea610008 	lwi	r19, r1, 8
2000f9d4:	ea81000c 	lwi	r20, r1, 12
2000f9d8:	30210010 	addik	r1, r1, 16
2000f9dc:	b60f0008 	rtsd	r15, 8
2000f9e0:	80000000 	or	r0, r0, r0

2000f9e4 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000f9e4:	3021ffec 	addik	r1, r1, -20
2000f9e8:	fa61000c 	swi	r19, r1, 12
2000f9ec:	fa810010 	swi	r20, r1, 16
2000f9f0:	12610000 	addk	r19, r1, r0
2000f9f4:	96808000 	mfs	r20, rpc
2000f9f8:	b000dfff 	imm	-8193
2000f9fc:	32941f68 	addik	r20, r20, 8040
2000fa00:	f8b30018 	swi	r5, r19, 24
2000fa04:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000fa08:	e8730018 	lwi	r3, r19, 24
2000fa0c:	e8830004 	lwi	r4, r3, 4
2000fa10:	e8730018 	lwi	r3, r19, 24
2000fa14:	e8a3000c 	lwi	r5, r3, 12
2000fa18:	e873001c 	lwi	r3, r19, 28
2000fa1c:	64630402 	bslli	r3, r3, 2
2000fa20:	10651800 	addk	r3, r5, r3
2000fa24:	e8a30000 	lwi	r5, r3, 0
2000fa28:	e8730018 	lwi	r3, r19, 24
2000fa2c:	e8630000 	lwi	r3, r3, 0
2000fa30:	3063ffff 	addik	r3, r3, -1
2000fa34:	84651800 	and	r3, r5, r3
2000fa38:	64630403 	bslli	r3, r3, 3
2000fa3c:	10641800 	addk	r3, r4, r3
2000fa40:	e8830000 	lwi	r4, r3, 0
2000fa44:	e8a30004 	lwi	r5, r3, 4
2000fa48:	f8930004 	swi	r4, r19, 4
2000fa4c:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2000fa50:	e8730018 	lwi	r3, r19, 24
2000fa54:	e883000c 	lwi	r4, r3, 12
2000fa58:	e873001c 	lwi	r3, r19, 28
2000fa5c:	64630402 	bslli	r3, r3, 2
2000fa60:	10641800 	addk	r3, r4, r3
2000fa64:	e8830000 	lwi	r4, r3, 0
2000fa68:	30840001 	addik	r4, r4, 1
2000fa6c:	f8830000 	swi	r4, r3, 0
    return value;
2000fa70:	e8930004 	lwi	r4, r19, 4
2000fa74:	e8b30008 	lwi	r5, r19, 8
}
2000fa78:	10640000 	addk	r3, r4, r0
2000fa7c:	10850000 	addk	r4, r5, r0
2000fa80:	10330000 	addk	r1, r19, r0
2000fa84:	ea61000c 	lwi	r19, r1, 12
2000fa88:	ea810010 	lwi	r20, r1, 16
2000fa8c:	30210014 	addik	r1, r1, 20
2000fa90:	b60f0008 	rtsd	r15, 8
2000fa94:	80000000 	or	r0, r0, r0

2000fa98 <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000fa98:	3021fff4 	addik	r1, r1, -12
2000fa9c:	fa610004 	swi	r19, r1, 4
2000faa0:	fa810008 	swi	r20, r1, 8
2000faa4:	12610000 	addk	r19, r1, r0
2000faa8:	96808000 	mfs	r20, rpc
2000faac:	b000dfff 	imm	-8193
2000fab0:	32941eb4 	addik	r20, r20, 7860
2000fab4:	f8b30010 	swi	r5, r19, 16
2000fab8:	f8d30014 	swi	r6, r19, 20
2000fabc:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000fac0:	e8730010 	lwi	r3, r19, 16
2000fac4:	e8830004 	lwi	r4, r3, 4
2000fac8:	e8730010 	lwi	r3, r19, 16
2000facc:	e8630010 	lwi	r3, r3, 16
2000fad0:	e8a30000 	lwi	r5, r3, 0
2000fad4:	e8730010 	lwi	r3, r19, 16
2000fad8:	e8630000 	lwi	r3, r3, 0
2000fadc:	3063ffff 	addik	r3, r3, -1
2000fae0:	84651800 	and	r3, r5, r3
2000fae4:	64630403 	bslli	r3, r3, 3
2000fae8:	10641800 	addk	r3, r4, r3
2000faec:	e8930014 	lwi	r4, r19, 20
2000faf0:	e8b30018 	lwi	r5, r19, 24
2000faf4:	f8830000 	swi	r4, r3, 0
2000faf8:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2000fafc:	e8730010 	lwi	r3, r19, 16
2000fb00:	e8630010 	lwi	r3, r3, 16
2000fb04:	e8830000 	lwi	r4, r3, 0
2000fb08:	30840001 	addik	r4, r4, 1
2000fb0c:	f8830000 	swi	r4, r3, 0
}
2000fb10:	10330000 	addk	r1, r19, r0
2000fb14:	ea610004 	lwi	r19, r1, 4
2000fb18:	ea810008 	lwi	r20, r1, 8
2000fb1c:	3021000c 	addik	r1, r1, 12
2000fb20:	b60f0008 	rtsd	r15, 8
2000fb24:	80000000 	or	r0, r0, r0

2000fb28 <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000fb28:	3021fff4 	addik	r1, r1, -12
2000fb2c:	fa610004 	swi	r19, r1, 4
2000fb30:	fa810008 	swi	r20, r1, 8
2000fb34:	12610000 	addk	r19, r1, r0
2000fb38:	96808000 	mfs	r20, rpc
2000fb3c:	b000dfff 	imm	-8193
2000fb40:	32941e24 	addik	r20, r20, 7716
2000fb44:	f8b30010 	swi	r5, r19, 16
2000fb48:	f8d30014 	swi	r6, r19, 20
2000fb4c:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000fb50:	e8730010 	lwi	r3, r19, 16
2000fb54:	e8630010 	lwi	r3, r3, 16
2000fb58:	e8830000 	lwi	r4, r3, 0
2000fb5c:	e8730010 	lwi	r3, r19, 16
2000fb60:	e8a3000c 	lwi	r5, r3, 12
2000fb64:	e8730014 	lwi	r3, r19, 20
2000fb68:	64630402 	bslli	r3, r3, 2
2000fb6c:	10651800 	addk	r3, r5, r3
2000fb70:	e8630000 	lwi	r3, r3, 0
2000fb74:	14a32000 	rsubk	r5, r3, r4
2000fb78:	30600001 	addik	r3, r0, 1
2000fb7c:	e8930018 	lwi	r4, r19, 24
2000fb80:	16442803 	cmpu	r18, r4, r5
2000fb84:	bcb20008 	bgei	r18, 8		// 2000fb8c
2000fb88:	10600000 	addk	r3, r0, r0
2000fb8c:	a46300ff 	andi	r3, r3, 255
}
2000fb90:	10330000 	addk	r1, r19, r0
2000fb94:	ea610004 	lwi	r19, r1, 4
2000fb98:	ea810008 	lwi	r20, r1, 8
2000fb9c:	3021000c 	addik	r1, r1, 12
2000fba0:	b60f0008 	rtsd	r15, 8
2000fba4:	80000000 	or	r0, r0, r0

2000fba8 <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000fba8:	3021fff4 	addik	r1, r1, -12
2000fbac:	fa610004 	swi	r19, r1, 4
2000fbb0:	fa810008 	swi	r20, r1, 8
2000fbb4:	12610000 	addk	r19, r1, r0
2000fbb8:	96808000 	mfs	r20, rpc
2000fbbc:	b000dfff 	imm	-8193
2000fbc0:	32941da4 	addik	r20, r20, 7588
2000fbc4:	f8b30010 	swi	r5, r19, 16
2000fbc8:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000fbcc:	e8730010 	lwi	r3, r19, 16
2000fbd0:	e8630010 	lwi	r3, r3, 16
2000fbd4:	e8830000 	lwi	r4, r3, 0
2000fbd8:	e8730010 	lwi	r3, r19, 16
2000fbdc:	e8a3000c 	lwi	r5, r3, 12
2000fbe0:	e8730014 	lwi	r3, r19, 20
2000fbe4:	64630402 	bslli	r3, r3, 2
2000fbe8:	10651800 	addk	r3, r5, r3
2000fbec:	e8630000 	lwi	r3, r3, 0
2000fbf0:	14632000 	rsubk	r3, r3, r4
}
2000fbf4:	10330000 	addk	r1, r19, r0
2000fbf8:	ea610004 	lwi	r19, r1, 4
2000fbfc:	ea810008 	lwi	r20, r1, 8
2000fc00:	3021000c 	addik	r1, r1, 12
2000fc04:	b60f0008 	rtsd	r15, 8
2000fc08:	80000000 	or	r0, r0, r0

2000fc0c <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2000fc0c:	3021fff0 	addik	r1, r1, -16
2000fc10:	fa610008 	swi	r19, r1, 8
2000fc14:	fa81000c 	swi	r20, r1, 12
2000fc18:	12610000 	addk	r19, r1, r0
2000fc1c:	96808000 	mfs	r20, rpc
2000fc20:	b000dfff 	imm	-8193
2000fc24:	32941d40 	addik	r20, r20, 7488
2000fc28:	f8b30014 	swi	r5, r19, 20
2000fc2c:	f8d30018 	swi	r6, r19, 24
2000fc30:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000fc34:	f8130004 	swi	r0, r19, 4
2000fc38:	b800005c 	bri	92		// 2000fc94
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2000fc3c:	e8730014 	lwi	r3, r19, 20
2000fc40:	e8830000 	lwi	r4, r3, 0
2000fc44:	e8730014 	lwi	r3, r19, 20
2000fc48:	e8a3000c 	lwi	r5, r3, 12
2000fc4c:	e8730004 	lwi	r3, r19, 4
2000fc50:	64630402 	bslli	r3, r3, 2
2000fc54:	10651800 	addk	r3, r5, r3
2000fc58:	e8a30000 	lwi	r5, r3, 0
2000fc5c:	e8730014 	lwi	r3, r19, 20
2000fc60:	e8630010 	lwi	r3, r3, 16
2000fc64:	e8630000 	lwi	r3, r3, 0
2000fc68:	14632800 	rsubk	r3, r3, r5
2000fc6c:	10641800 	addk	r3, r4, r3
2000fc70:	30830001 	addik	r4, r3, 1
2000fc74:	e873001c 	lwi	r3, r19, 28
2000fc78:	16441803 	cmpu	r18, r4, r3
2000fc7c:	bc52000c 	blti	r18, 12		// 2000fc88
            return 0;
2000fc80:	10600000 	addk	r3, r0, r0
2000fc84:	b8000024 	bri	36		// 2000fca8
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2000fc88:	e8730004 	lwi	r3, r19, 4
2000fc8c:	30630001 	addik	r3, r3, 1
2000fc90:	f8730004 	swi	r3, r19, 4
2000fc94:	e8930004 	lwi	r4, r19, 4
2000fc98:	e8730018 	lwi	r3, r19, 24
2000fc9c:	16432003 	cmpu	r18, r3, r4
2000fca0:	bc52ff9c 	blti	r18, -100		// 2000fc3c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2000fca4:	30600001 	addik	r3, r0, 1
}
2000fca8:	10330000 	addk	r1, r19, r0
2000fcac:	ea610008 	lwi	r19, r1, 8
2000fcb0:	ea81000c 	lwi	r20, r1, 12
2000fcb4:	30210010 	addik	r1, r1, 16
2000fcb8:	b60f0008 	rtsd	r15, 8
2000fcbc:	80000000 	or	r0, r0, r0

2000fcc0 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2000fcc0:	3021ffe8 	addik	r1, r1, -24
2000fcc4:	fa610010 	swi	r19, r1, 16
2000fcc8:	fa810014 	swi	r20, r1, 20
2000fccc:	12610000 	addk	r19, r1, r0
2000fcd0:	96808000 	mfs	r20, rpc
2000fcd4:	b000dfff 	imm	-8193
2000fcd8:	32941c8c 	addik	r20, r20, 7308
2000fcdc:	f8b3001c 	swi	r5, r19, 28
2000fce0:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2000fce4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2000fce8:	f8130004 	swi	r0, r19, 4
2000fcec:	b8000054 	bri	84		// 2000fd40
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2000fcf0:	e873001c 	lwi	r3, r19, 28
2000fcf4:	e8630010 	lwi	r3, r3, 16
2000fcf8:	e8830000 	lwi	r4, r3, 0
2000fcfc:	e873001c 	lwi	r3, r19, 28
2000fd00:	e8a3000c 	lwi	r5, r3, 12
2000fd04:	e8730004 	lwi	r3, r19, 4
2000fd08:	64630402 	bslli	r3, r3, 2
2000fd0c:	10651800 	addk	r3, r5, r3
2000fd10:	e8630000 	lwi	r3, r3, 0
2000fd14:	14632000 	rsubk	r3, r3, r4
2000fd18:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2000fd1c:	e8930008 	lwi	r4, r19, 8
2000fd20:	e873000c 	lwi	r3, r19, 12
2000fd24:	16441803 	cmpu	r18, r4, r3
2000fd28:	bcb20008 	bgei	r18, 8		// 2000fd30
2000fd2c:	10640000 	addk	r3, r4, r0
2000fd30:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2000fd34:	e8730004 	lwi	r3, r19, 4
2000fd38:	30630001 	addik	r3, r3, 1
2000fd3c:	f8730004 	swi	r3, r19, 4
2000fd40:	e8930004 	lwi	r4, r19, 4
2000fd44:	e8730020 	lwi	r3, r19, 32
2000fd48:	16432003 	cmpu	r18, r3, r4
2000fd4c:	bc52ffa4 	blti	r18, -92		// 2000fcf0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2000fd50:	e873001c 	lwi	r3, r19, 28
2000fd54:	e8830000 	lwi	r4, r3, 0
2000fd58:	e8730008 	lwi	r3, r19, 8
2000fd5c:	14632000 	rsubk	r3, r3, r4
}
2000fd60:	10330000 	addk	r1, r19, r0
2000fd64:	ea610010 	lwi	r19, r1, 16
2000fd68:	ea810014 	lwi	r20, r1, 20
2000fd6c:	30210018 	addik	r1, r1, 24
2000fd70:	b60f0008 	rtsd	r15, 8
2000fd74:	80000000 	or	r0, r0, r0

2000fd78 <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2000fd78:	3021fff0 	addik	r1, r1, -16
2000fd7c:	fa610008 	swi	r19, r1, 8
2000fd80:	fa81000c 	swi	r20, r1, 12
2000fd84:	12610000 	addk	r19, r1, r0
2000fd88:	96808000 	mfs	r20, rpc
2000fd8c:	b000dfff 	imm	-8193
2000fd90:	32941bd4 	addik	r20, r20, 7124
2000fd94:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2000fd98:	e8730014 	lwi	r3, r19, 20
2000fd9c:	e8630010 	lwi	r3, r3, 16
2000fda0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2000fda4:	f8130004 	swi	r0, r19, 4
2000fda8:	b8000028 	bri	40		// 2000fdd0
        fifo->read_inds[i] = 0;
2000fdac:	e8730014 	lwi	r3, r19, 20
2000fdb0:	e883000c 	lwi	r4, r3, 12
2000fdb4:	e8730004 	lwi	r3, r19, 4
2000fdb8:	64630402 	bslli	r3, r3, 2
2000fdbc:	10641800 	addk	r3, r4, r3
2000fdc0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2000fdc4:	e8730004 	lwi	r3, r19, 4
2000fdc8:	30630001 	addik	r3, r3, 1
2000fdcc:	f8730004 	swi	r3, r19, 4
2000fdd0:	e8730014 	lwi	r3, r19, 20
2000fdd4:	e8830008 	lwi	r4, r3, 8
2000fdd8:	e8730004 	lwi	r3, r19, 4
2000fddc:	16441803 	cmpu	r18, r4, r3
2000fde0:	bc52ffcc 	blti	r18, -52		// 2000fdac
        fifo->read_inds[i] = 0;
    }
}
2000fde4:	10330000 	addk	r1, r19, r0
2000fde8:	ea610008 	lwi	r19, r1, 8
2000fdec:	ea81000c 	lwi	r20, r1, 12
2000fdf0:	30210010 	addik	r1, r1, 16
2000fdf4:	b60f0008 	rtsd	r15, 8
2000fdf8:	80000000 	or	r0, r0, r0

2000fdfc <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000fdfc:	3021fff0 	addik	r1, r1, -16
2000fe00:	fa610008 	swi	r19, r1, 8
2000fe04:	fa81000c 	swi	r20, r1, 12
2000fe08:	12610000 	addk	r19, r1, r0
2000fe0c:	96808000 	mfs	r20, rpc
2000fe10:	b000dfff 	imm	-8193
2000fe14:	32941b50 	addik	r20, r20, 6992
2000fe18:	f8b30014 	swi	r5, r19, 20
2000fe1c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2000fe20:	e8730014 	lwi	r3, r19, 20
2000fe24:	e8830004 	lwi	r4, r3, 4
2000fe28:	e8730014 	lwi	r3, r19, 20
2000fe2c:	e8a3000c 	lwi	r5, r3, 12
2000fe30:	e8730018 	lwi	r3, r19, 24
2000fe34:	64630402 	bslli	r3, r3, 2
2000fe38:	10651800 	addk	r3, r5, r3
2000fe3c:	e8a30000 	lwi	r5, r3, 0
2000fe40:	e8730014 	lwi	r3, r19, 20
2000fe44:	e8630000 	lwi	r3, r3, 0
2000fe48:	3063ffff 	addik	r3, r3, -1
2000fe4c:	84651800 	and	r3, r5, r3
2000fe50:	10641800 	addk	r3, r4, r3
2000fe54:	e0630000 	lbui	r3, r3, 0
2000fe58:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2000fe5c:	e8730014 	lwi	r3, r19, 20
2000fe60:	e883000c 	lwi	r4, r3, 12
2000fe64:	e8730018 	lwi	r3, r19, 24
2000fe68:	64630402 	bslli	r3, r3, 2
2000fe6c:	10641800 	addk	r3, r4, r3
2000fe70:	e8830000 	lwi	r4, r3, 0
2000fe74:	30840001 	addik	r4, r4, 1
2000fe78:	f8830000 	swi	r4, r3, 0
    return value;
2000fe7c:	e0730004 	lbui	r3, r19, 4
}
2000fe80:	10330000 	addk	r1, r19, r0
2000fe84:	ea610008 	lwi	r19, r1, 8
2000fe88:	ea81000c 	lwi	r20, r1, 12
2000fe8c:	30210010 	addik	r1, r1, 16
2000fe90:	b60f0008 	rtsd	r15, 8
2000fe94:	80000000 	or	r0, r0, r0

2000fe98 <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2000fe98:	3021fff4 	addik	r1, r1, -12
2000fe9c:	fa610004 	swi	r19, r1, 4
2000fea0:	fa810008 	swi	r20, r1, 8
2000fea4:	12610000 	addk	r19, r1, r0
2000fea8:	96808000 	mfs	r20, rpc
2000feac:	b000dfff 	imm	-8193
2000feb0:	32941ab4 	addik	r20, r20, 6836
2000feb4:	f8b30010 	swi	r5, r19, 16
2000feb8:	10660000 	addk	r3, r6, r0
2000febc:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2000fec0:	e8730010 	lwi	r3, r19, 16
2000fec4:	e8830004 	lwi	r4, r3, 4
2000fec8:	e8730010 	lwi	r3, r19, 16
2000fecc:	e8630010 	lwi	r3, r3, 16
2000fed0:	e8a30000 	lwi	r5, r3, 0
2000fed4:	e8730010 	lwi	r3, r19, 16
2000fed8:	e8630000 	lwi	r3, r3, 0
2000fedc:	3063ffff 	addik	r3, r3, -1
2000fee0:	84651800 	and	r3, r5, r3
2000fee4:	10641800 	addk	r3, r4, r3
2000fee8:	e0930014 	lbui	r4, r19, 20
2000feec:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2000fef0:	e8730010 	lwi	r3, r19, 16
2000fef4:	e8630010 	lwi	r3, r3, 16
2000fef8:	e8830000 	lwi	r4, r3, 0
2000fefc:	30840001 	addik	r4, r4, 1
2000ff00:	f8830000 	swi	r4, r3, 0
}
2000ff04:	10330000 	addk	r1, r19, r0
2000ff08:	ea610004 	lwi	r19, r1, 4
2000ff0c:	ea810008 	lwi	r20, r1, 8
2000ff10:	3021000c 	addik	r1, r1, 12
2000ff14:	b60f0008 	rtsd	r15, 8
2000ff18:	80000000 	or	r0, r0, r0

2000ff1c <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2000ff1c:	3021fff4 	addik	r1, r1, -12
2000ff20:	fa610004 	swi	r19, r1, 4
2000ff24:	fa810008 	swi	r20, r1, 8
2000ff28:	12610000 	addk	r19, r1, r0
2000ff2c:	96808000 	mfs	r20, rpc
2000ff30:	b000dfff 	imm	-8193
2000ff34:	32941a30 	addik	r20, r20, 6704
2000ff38:	f8b30010 	swi	r5, r19, 16
2000ff3c:	f8d30014 	swi	r6, r19, 20
2000ff40:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2000ff44:	e8730010 	lwi	r3, r19, 16
2000ff48:	e8630010 	lwi	r3, r3, 16
2000ff4c:	e8830000 	lwi	r4, r3, 0
2000ff50:	e8730010 	lwi	r3, r19, 16
2000ff54:	e8a3000c 	lwi	r5, r3, 12
2000ff58:	e8730014 	lwi	r3, r19, 20
2000ff5c:	64630402 	bslli	r3, r3, 2
2000ff60:	10651800 	addk	r3, r5, r3
2000ff64:	e8630000 	lwi	r3, r3, 0
2000ff68:	14a32000 	rsubk	r5, r3, r4
2000ff6c:	30600001 	addik	r3, r0, 1
2000ff70:	e8930018 	lwi	r4, r19, 24
2000ff74:	16442803 	cmpu	r18, r4, r5
2000ff78:	bcb20008 	bgei	r18, 8		// 2000ff80
2000ff7c:	10600000 	addk	r3, r0, r0
2000ff80:	a46300ff 	andi	r3, r3, 255
}
2000ff84:	10330000 	addk	r1, r19, r0
2000ff88:	ea610004 	lwi	r19, r1, 4
2000ff8c:	ea810008 	lwi	r20, r1, 8
2000ff90:	3021000c 	addik	r1, r1, 12
2000ff94:	b60f0008 	rtsd	r15, 8
2000ff98:	80000000 	or	r0, r0, r0

2000ff9c <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2000ff9c:	3021fff4 	addik	r1, r1, -12
2000ffa0:	fa610004 	swi	r19, r1, 4
2000ffa4:	fa810008 	swi	r20, r1, 8
2000ffa8:	12610000 	addk	r19, r1, r0
2000ffac:	96808000 	mfs	r20, rpc
2000ffb0:	b000dfff 	imm	-8193
2000ffb4:	329419b0 	addik	r20, r20, 6576
2000ffb8:	f8b30010 	swi	r5, r19, 16
2000ffbc:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2000ffc0:	e8730010 	lwi	r3, r19, 16
2000ffc4:	e8630010 	lwi	r3, r3, 16
2000ffc8:	e8830000 	lwi	r4, r3, 0
2000ffcc:	e8730010 	lwi	r3, r19, 16
2000ffd0:	e8a3000c 	lwi	r5, r3, 12
2000ffd4:	e8730014 	lwi	r3, r19, 20
2000ffd8:	64630402 	bslli	r3, r3, 2
2000ffdc:	10651800 	addk	r3, r5, r3
2000ffe0:	e8630000 	lwi	r3, r3, 0
2000ffe4:	14632000 	rsubk	r3, r3, r4
}
2000ffe8:	10330000 	addk	r1, r19, r0
2000ffec:	ea610004 	lwi	r19, r1, 4
2000fff0:	ea810008 	lwi	r20, r1, 8
2000fff4:	3021000c 	addik	r1, r1, 12
2000fff8:	b60f0008 	rtsd	r15, 8
2000fffc:	80000000 	or	r0, r0, r0

20010000 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20010000:	3021fff0 	addik	r1, r1, -16
20010004:	fa610008 	swi	r19, r1, 8
20010008:	fa81000c 	swi	r20, r1, 12
2001000c:	12610000 	addk	r19, r1, r0
20010010:	96808000 	mfs	r20, rpc
20010014:	b000dfff 	imm	-8193
20010018:	3294194c 	addik	r20, r20, 6476
2001001c:	f8b30014 	swi	r5, r19, 20
20010020:	f8d30018 	swi	r6, r19, 24
20010024:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20010028:	f8130004 	swi	r0, r19, 4
2001002c:	b800005c 	bri	92		// 20010088
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20010030:	e8730014 	lwi	r3, r19, 20
20010034:	e8830000 	lwi	r4, r3, 0
20010038:	e8730014 	lwi	r3, r19, 20
2001003c:	e8a3000c 	lwi	r5, r3, 12
20010040:	e8730004 	lwi	r3, r19, 4
20010044:	64630402 	bslli	r3, r3, 2
20010048:	10651800 	addk	r3, r5, r3
2001004c:	e8a30000 	lwi	r5, r3, 0
20010050:	e8730014 	lwi	r3, r19, 20
20010054:	e8630010 	lwi	r3, r3, 16
20010058:	e8630000 	lwi	r3, r3, 0
2001005c:	14632800 	rsubk	r3, r3, r5
20010060:	10641800 	addk	r3, r4, r3
20010064:	30830001 	addik	r4, r3, 1
20010068:	e873001c 	lwi	r3, r19, 28
2001006c:	16441803 	cmpu	r18, r4, r3
20010070:	bc52000c 	blti	r18, 12		// 2001007c
            return 0;
20010074:	10600000 	addk	r3, r0, r0
20010078:	b8000024 	bri	36		// 2001009c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001007c:	e8730004 	lwi	r3, r19, 4
20010080:	30630001 	addik	r3, r3, 1
20010084:	f8730004 	swi	r3, r19, 4
20010088:	e8930004 	lwi	r4, r19, 4
2001008c:	e8730018 	lwi	r3, r19, 24
20010090:	16432003 	cmpu	r18, r3, r4
20010094:	bc52ff9c 	blti	r18, -100		// 20010030
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20010098:	30600001 	addik	r3, r0, 1
}
2001009c:	10330000 	addk	r1, r19, r0
200100a0:	ea610008 	lwi	r19, r1, 8
200100a4:	ea81000c 	lwi	r20, r1, 12
200100a8:	30210010 	addik	r1, r1, 16
200100ac:	b60f0008 	rtsd	r15, 8
200100b0:	80000000 	or	r0, r0, r0

200100b4 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200100b4:	3021ffe8 	addik	r1, r1, -24
200100b8:	fa610010 	swi	r19, r1, 16
200100bc:	fa810014 	swi	r20, r1, 20
200100c0:	12610000 	addk	r19, r1, r0
200100c4:	96808000 	mfs	r20, rpc
200100c8:	b000dfff 	imm	-8193
200100cc:	32941898 	addik	r20, r20, 6296
200100d0:	f8b3001c 	swi	r5, r19, 28
200100d4:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
200100d8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200100dc:	f8130004 	swi	r0, r19, 4
200100e0:	b8000054 	bri	84		// 20010134
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200100e4:	e873001c 	lwi	r3, r19, 28
200100e8:	e8630010 	lwi	r3, r3, 16
200100ec:	e8830000 	lwi	r4, r3, 0
200100f0:	e873001c 	lwi	r3, r19, 28
200100f4:	e8a3000c 	lwi	r5, r3, 12
200100f8:	e8730004 	lwi	r3, r19, 4
200100fc:	64630402 	bslli	r3, r3, 2
20010100:	10651800 	addk	r3, r5, r3
20010104:	e8630000 	lwi	r3, r3, 0
20010108:	14632000 	rsubk	r3, r3, r4
2001010c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20010110:	e8930008 	lwi	r4, r19, 8
20010114:	e873000c 	lwi	r3, r19, 12
20010118:	16441803 	cmpu	r18, r4, r3
2001011c:	bcb20008 	bgei	r18, 8		// 20010124
20010120:	10640000 	addk	r3, r4, r0
20010124:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20010128:	e8730004 	lwi	r3, r19, 4
2001012c:	30630001 	addik	r3, r3, 1
20010130:	f8730004 	swi	r3, r19, 4
20010134:	e8930004 	lwi	r4, r19, 4
20010138:	e8730020 	lwi	r3, r19, 32
2001013c:	16432003 	cmpu	r18, r3, r4
20010140:	bc52ffa4 	blti	r18, -92		// 200100e4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20010144:	e873001c 	lwi	r3, r19, 28
20010148:	e8830000 	lwi	r4, r3, 0
2001014c:	e8730008 	lwi	r3, r19, 8
20010150:	14632000 	rsubk	r3, r3, r4
}
20010154:	10330000 	addk	r1, r19, r0
20010158:	ea610010 	lwi	r19, r1, 16
2001015c:	ea810014 	lwi	r20, r1, 20
20010160:	30210018 	addik	r1, r1, 24
20010164:	b60f0008 	rtsd	r15, 8
20010168:	80000000 	or	r0, r0, r0

2001016c <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001016c:	3021fff0 	addik	r1, r1, -16
20010170:	fa610008 	swi	r19, r1, 8
20010174:	fa81000c 	swi	r20, r1, 12
20010178:	12610000 	addk	r19, r1, r0
2001017c:	96808000 	mfs	r20, rpc
20010180:	b000dfff 	imm	-8193
20010184:	329417e0 	addik	r20, r20, 6112
20010188:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2001018c:	e8730014 	lwi	r3, r19, 20
20010190:	e8630010 	lwi	r3, r3, 16
20010194:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20010198:	f8130004 	swi	r0, r19, 4
2001019c:	b8000028 	bri	40		// 200101c4
        fifo->read_inds[i] = 0;
200101a0:	e8730014 	lwi	r3, r19, 20
200101a4:	e883000c 	lwi	r4, r3, 12
200101a8:	e8730004 	lwi	r3, r19, 4
200101ac:	64630402 	bslli	r3, r3, 2
200101b0:	10641800 	addk	r3, r4, r3
200101b4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200101b8:	e8730004 	lwi	r3, r19, 4
200101bc:	30630001 	addik	r3, r3, 1
200101c0:	f8730004 	swi	r3, r19, 4
200101c4:	e8730014 	lwi	r3, r19, 20
200101c8:	e8830008 	lwi	r4, r3, 8
200101cc:	e8730004 	lwi	r3, r19, 4
200101d0:	16441803 	cmpu	r18, r4, r3
200101d4:	bc52ffcc 	blti	r18, -52		// 200101a0
        fifo->read_inds[i] = 0;
    }
}
200101d8:	10330000 	addk	r1, r19, r0
200101dc:	ea610008 	lwi	r19, r1, 8
200101e0:	ea81000c 	lwi	r20, r1, 12
200101e4:	30210010 	addik	r1, r1, 16
200101e8:	b60f0008 	rtsd	r15, 8
200101ec:	80000000 	or	r0, r0, r0

200101f0 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200101f0:	3021fff0 	addik	r1, r1, -16
200101f4:	fa610008 	swi	r19, r1, 8
200101f8:	fa81000c 	swi	r20, r1, 12
200101fc:	12610000 	addk	r19, r1, r0
20010200:	96808000 	mfs	r20, rpc
20010204:	b000dfff 	imm	-8193
20010208:	3294175c 	addik	r20, r20, 5980
2001020c:	f8b30014 	swi	r5, r19, 20
20010210:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20010214:	e8730014 	lwi	r3, r19, 20
20010218:	e8830004 	lwi	r4, r3, 4
2001021c:	e8730014 	lwi	r3, r19, 20
20010220:	e8a3000c 	lwi	r5, r3, 12
20010224:	e8730018 	lwi	r3, r19, 24
20010228:	64630402 	bslli	r3, r3, 2
2001022c:	10651800 	addk	r3, r5, r3
20010230:	e8a30000 	lwi	r5, r3, 0
20010234:	e8730014 	lwi	r3, r19, 20
20010238:	e8630000 	lwi	r3, r3, 0
2001023c:	3063ffff 	addik	r3, r3, -1
20010240:	84651800 	and	r3, r5, r3
20010244:	10631800 	addk	r3, r3, r3
20010248:	10641800 	addk	r3, r4, r3
2001024c:	e4630000 	lhui	r3, r3, 0
20010250:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20010254:	e8730014 	lwi	r3, r19, 20
20010258:	e883000c 	lwi	r4, r3, 12
2001025c:	e8730018 	lwi	r3, r19, 24
20010260:	64630402 	bslli	r3, r3, 2
20010264:	10641800 	addk	r3, r4, r3
20010268:	e8830000 	lwi	r4, r3, 0
2001026c:	30840001 	addik	r4, r4, 1
20010270:	f8830000 	swi	r4, r3, 0
    return value;
20010274:	e4730004 	lhui	r3, r19, 4
}
20010278:	10330000 	addk	r1, r19, r0
2001027c:	ea610008 	lwi	r19, r1, 8
20010280:	ea81000c 	lwi	r20, r1, 12
20010284:	30210010 	addik	r1, r1, 16
20010288:	b60f0008 	rtsd	r15, 8
2001028c:	80000000 	or	r0, r0, r0

20010290 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20010290:	3021fff4 	addik	r1, r1, -12
20010294:	fa610004 	swi	r19, r1, 4
20010298:	fa810008 	swi	r20, r1, 8
2001029c:	12610000 	addk	r19, r1, r0
200102a0:	96808000 	mfs	r20, rpc
200102a4:	b000dfff 	imm	-8193
200102a8:	329416bc 	addik	r20, r20, 5820
200102ac:	f8b30010 	swi	r5, r19, 16
200102b0:	10660000 	addk	r3, r6, r0
200102b4:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200102b8:	e8730010 	lwi	r3, r19, 16
200102bc:	e8830004 	lwi	r4, r3, 4
200102c0:	e8730010 	lwi	r3, r19, 16
200102c4:	e8630010 	lwi	r3, r3, 16
200102c8:	e8a30000 	lwi	r5, r3, 0
200102cc:	e8730010 	lwi	r3, r19, 16
200102d0:	e8630000 	lwi	r3, r3, 0
200102d4:	3063ffff 	addik	r3, r3, -1
200102d8:	84651800 	and	r3, r5, r3
200102dc:	10631800 	addk	r3, r3, r3
200102e0:	10641800 	addk	r3, r4, r3
200102e4:	e4930014 	lhui	r4, r19, 20
200102e8:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
200102ec:	e8730010 	lwi	r3, r19, 16
200102f0:	e8630010 	lwi	r3, r3, 16
200102f4:	e8830000 	lwi	r4, r3, 0
200102f8:	30840001 	addik	r4, r4, 1
200102fc:	f8830000 	swi	r4, r3, 0
}
20010300:	10330000 	addk	r1, r19, r0
20010304:	ea610004 	lwi	r19, r1, 4
20010308:	ea810008 	lwi	r20, r1, 8
2001030c:	3021000c 	addik	r1, r1, 12
20010310:	b60f0008 	rtsd	r15, 8
20010314:	80000000 	or	r0, r0, r0

20010318 <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20010318:	3021fff4 	addik	r1, r1, -12
2001031c:	fa610004 	swi	r19, r1, 4
20010320:	fa810008 	swi	r20, r1, 8
20010324:	12610000 	addk	r19, r1, r0
20010328:	96808000 	mfs	r20, rpc
2001032c:	b000dfff 	imm	-8193
20010330:	32941634 	addik	r20, r20, 5684
20010334:	f8b30010 	swi	r5, r19, 16
20010338:	f8d30014 	swi	r6, r19, 20
2001033c:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20010340:	e8730010 	lwi	r3, r19, 16
20010344:	e8630010 	lwi	r3, r3, 16
20010348:	e8830000 	lwi	r4, r3, 0
2001034c:	e8730010 	lwi	r3, r19, 16
20010350:	e8a3000c 	lwi	r5, r3, 12
20010354:	e8730014 	lwi	r3, r19, 20
20010358:	64630402 	bslli	r3, r3, 2
2001035c:	10651800 	addk	r3, r5, r3
20010360:	e8630000 	lwi	r3, r3, 0
20010364:	14a32000 	rsubk	r5, r3, r4
20010368:	30600001 	addik	r3, r0, 1
2001036c:	e8930018 	lwi	r4, r19, 24
20010370:	16442803 	cmpu	r18, r4, r5
20010374:	bcb20008 	bgei	r18, 8		// 2001037c
20010378:	10600000 	addk	r3, r0, r0
2001037c:	a46300ff 	andi	r3, r3, 255
}
20010380:	10330000 	addk	r1, r19, r0
20010384:	ea610004 	lwi	r19, r1, 4
20010388:	ea810008 	lwi	r20, r1, 8
2001038c:	3021000c 	addik	r1, r1, 12
20010390:	b60f0008 	rtsd	r15, 8
20010394:	80000000 	or	r0, r0, r0

20010398 <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20010398:	3021fff4 	addik	r1, r1, -12
2001039c:	fa610004 	swi	r19, r1, 4
200103a0:	fa810008 	swi	r20, r1, 8
200103a4:	12610000 	addk	r19, r1, r0
200103a8:	96808000 	mfs	r20, rpc
200103ac:	b000dfff 	imm	-8193
200103b0:	329415b4 	addik	r20, r20, 5556
200103b4:	f8b30010 	swi	r5, r19, 16
200103b8:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200103bc:	e8730010 	lwi	r3, r19, 16
200103c0:	e8630010 	lwi	r3, r3, 16
200103c4:	e8830000 	lwi	r4, r3, 0
200103c8:	e8730010 	lwi	r3, r19, 16
200103cc:	e8a3000c 	lwi	r5, r3, 12
200103d0:	e8730014 	lwi	r3, r19, 20
200103d4:	64630402 	bslli	r3, r3, 2
200103d8:	10651800 	addk	r3, r5, r3
200103dc:	e8630000 	lwi	r3, r3, 0
200103e0:	14632000 	rsubk	r3, r3, r4
}
200103e4:	10330000 	addk	r1, r19, r0
200103e8:	ea610004 	lwi	r19, r1, 4
200103ec:	ea810008 	lwi	r20, r1, 8
200103f0:	3021000c 	addik	r1, r1, 12
200103f4:	b60f0008 	rtsd	r15, 8
200103f8:	80000000 	or	r0, r0, r0

200103fc <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200103fc:	3021fff0 	addik	r1, r1, -16
20010400:	fa610008 	swi	r19, r1, 8
20010404:	fa81000c 	swi	r20, r1, 12
20010408:	12610000 	addk	r19, r1, r0
2001040c:	96808000 	mfs	r20, rpc
20010410:	b000dfff 	imm	-8193
20010414:	32941550 	addik	r20, r20, 5456
20010418:	f8b30014 	swi	r5, r19, 20
2001041c:	f8d30018 	swi	r6, r19, 24
20010420:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20010424:	f8130004 	swi	r0, r19, 4
20010428:	b800005c 	bri	92		// 20010484
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001042c:	e8730014 	lwi	r3, r19, 20
20010430:	e8830000 	lwi	r4, r3, 0
20010434:	e8730014 	lwi	r3, r19, 20
20010438:	e8a3000c 	lwi	r5, r3, 12
2001043c:	e8730004 	lwi	r3, r19, 4
20010440:	64630402 	bslli	r3, r3, 2
20010444:	10651800 	addk	r3, r5, r3
20010448:	e8a30000 	lwi	r5, r3, 0
2001044c:	e8730014 	lwi	r3, r19, 20
20010450:	e8630010 	lwi	r3, r3, 16
20010454:	e8630000 	lwi	r3, r3, 0
20010458:	14632800 	rsubk	r3, r3, r5
2001045c:	10641800 	addk	r3, r4, r3
20010460:	30830001 	addik	r4, r3, 1
20010464:	e873001c 	lwi	r3, r19, 28
20010468:	16441803 	cmpu	r18, r4, r3
2001046c:	bc52000c 	blti	r18, 12		// 20010478
            return 0;
20010470:	10600000 	addk	r3, r0, r0
20010474:	b8000024 	bri	36		// 20010498
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20010478:	e8730004 	lwi	r3, r19, 4
2001047c:	30630001 	addik	r3, r3, 1
20010480:	f8730004 	swi	r3, r19, 4
20010484:	e8930004 	lwi	r4, r19, 4
20010488:	e8730018 	lwi	r3, r19, 24
2001048c:	16432003 	cmpu	r18, r3, r4
20010490:	bc52ff9c 	blti	r18, -100		// 2001042c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20010494:	30600001 	addik	r3, r0, 1
}
20010498:	10330000 	addk	r1, r19, r0
2001049c:	ea610008 	lwi	r19, r1, 8
200104a0:	ea81000c 	lwi	r20, r1, 12
200104a4:	30210010 	addik	r1, r1, 16
200104a8:	b60f0008 	rtsd	r15, 8
200104ac:	80000000 	or	r0, r0, r0

200104b0 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200104b0:	3021ffe8 	addik	r1, r1, -24
200104b4:	fa610010 	swi	r19, r1, 16
200104b8:	fa810014 	swi	r20, r1, 20
200104bc:	12610000 	addk	r19, r1, r0
200104c0:	96808000 	mfs	r20, rpc
200104c4:	b000dfff 	imm	-8193
200104c8:	3294149c 	addik	r20, r20, 5276
200104cc:	f8b3001c 	swi	r5, r19, 28
200104d0:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
200104d4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200104d8:	f8130004 	swi	r0, r19, 4
200104dc:	b8000054 	bri	84		// 20010530
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200104e0:	e873001c 	lwi	r3, r19, 28
200104e4:	e8630010 	lwi	r3, r3, 16
200104e8:	e8830000 	lwi	r4, r3, 0
200104ec:	e873001c 	lwi	r3, r19, 28
200104f0:	e8a3000c 	lwi	r5, r3, 12
200104f4:	e8730004 	lwi	r3, r19, 4
200104f8:	64630402 	bslli	r3, r3, 2
200104fc:	10651800 	addk	r3, r5, r3
20010500:	e8630000 	lwi	r3, r3, 0
20010504:	14632000 	rsubk	r3, r3, r4
20010508:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001050c:	e8930008 	lwi	r4, r19, 8
20010510:	e873000c 	lwi	r3, r19, 12
20010514:	16441803 	cmpu	r18, r4, r3
20010518:	bcb20008 	bgei	r18, 8		// 20010520
2001051c:	10640000 	addk	r3, r4, r0
20010520:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20010524:	e8730004 	lwi	r3, r19, 4
20010528:	30630001 	addik	r3, r3, 1
2001052c:	f8730004 	swi	r3, r19, 4
20010530:	e8930004 	lwi	r4, r19, 4
20010534:	e8730020 	lwi	r3, r19, 32
20010538:	16432003 	cmpu	r18, r3, r4
2001053c:	bc52ffa4 	blti	r18, -92		// 200104e0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20010540:	e873001c 	lwi	r3, r19, 28
20010544:	e8830000 	lwi	r4, r3, 0
20010548:	e8730008 	lwi	r3, r19, 8
2001054c:	14632000 	rsubk	r3, r3, r4
}
20010550:	10330000 	addk	r1, r19, r0
20010554:	ea610010 	lwi	r19, r1, 16
20010558:	ea810014 	lwi	r20, r1, 20
2001055c:	30210018 	addik	r1, r1, 24
20010560:	b60f0008 	rtsd	r15, 8
20010564:	80000000 	or	r0, r0, r0

20010568 <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20010568:	3021fff0 	addik	r1, r1, -16
2001056c:	fa610008 	swi	r19, r1, 8
20010570:	fa81000c 	swi	r20, r1, 12
20010574:	12610000 	addk	r19, r1, r0
20010578:	96808000 	mfs	r20, rpc
2001057c:	b000dfff 	imm	-8193
20010580:	329413e4 	addik	r20, r20, 5092
20010584:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20010588:	e8730014 	lwi	r3, r19, 20
2001058c:	e8630010 	lwi	r3, r3, 16
20010590:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20010594:	f8130004 	swi	r0, r19, 4
20010598:	b8000028 	bri	40		// 200105c0
        fifo->read_inds[i] = 0;
2001059c:	e8730014 	lwi	r3, r19, 20
200105a0:	e883000c 	lwi	r4, r3, 12
200105a4:	e8730004 	lwi	r3, r19, 4
200105a8:	64630402 	bslli	r3, r3, 2
200105ac:	10641800 	addk	r3, r4, r3
200105b0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200105b4:	e8730004 	lwi	r3, r19, 4
200105b8:	30630001 	addik	r3, r3, 1
200105bc:	f8730004 	swi	r3, r19, 4
200105c0:	e8730014 	lwi	r3, r19, 20
200105c4:	e8830008 	lwi	r4, r3, 8
200105c8:	e8730004 	lwi	r3, r19, 4
200105cc:	16441803 	cmpu	r18, r4, r3
200105d0:	bc52ffcc 	blti	r18, -52		// 2001059c
        fifo->read_inds[i] = 0;
    }
}
200105d4:	10330000 	addk	r1, r19, r0
200105d8:	ea610008 	lwi	r19, r1, 8
200105dc:	ea81000c 	lwi	r20, r1, 12
200105e0:	30210010 	addik	r1, r1, 16
200105e4:	b60f0008 	rtsd	r15, 8
200105e8:	80000000 	or	r0, r0, r0

200105ec <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200105ec:	3021fff0 	addik	r1, r1, -16
200105f0:	fa610008 	swi	r19, r1, 8
200105f4:	fa81000c 	swi	r20, r1, 12
200105f8:	12610000 	addk	r19, r1, r0
200105fc:	96808000 	mfs	r20, rpc
20010600:	b000dfff 	imm	-8193
20010604:	32941360 	addik	r20, r20, 4960
20010608:	f8b30014 	swi	r5, r19, 20
2001060c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20010610:	e8730014 	lwi	r3, r19, 20
20010614:	e8830004 	lwi	r4, r3, 4
20010618:	e8730014 	lwi	r3, r19, 20
2001061c:	e8a3000c 	lwi	r5, r3, 12
20010620:	e8730018 	lwi	r3, r19, 24
20010624:	64630402 	bslli	r3, r3, 2
20010628:	10651800 	addk	r3, r5, r3
2001062c:	e8a30000 	lwi	r5, r3, 0
20010630:	e8730014 	lwi	r3, r19, 20
20010634:	e8630000 	lwi	r3, r3, 0
20010638:	3063ffff 	addik	r3, r3, -1
2001063c:	84651800 	and	r3, r5, r3
20010640:	64630402 	bslli	r3, r3, 2
20010644:	10641800 	addk	r3, r4, r3
20010648:	e8630000 	lwi	r3, r3, 0
2001064c:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20010650:	e8730014 	lwi	r3, r19, 20
20010654:	e883000c 	lwi	r4, r3, 12
20010658:	e8730018 	lwi	r3, r19, 24
2001065c:	64630402 	bslli	r3, r3, 2
20010660:	10641800 	addk	r3, r4, r3
20010664:	e8830000 	lwi	r4, r3, 0
20010668:	30840001 	addik	r4, r4, 1
2001066c:	f8830000 	swi	r4, r3, 0
    return value;
20010670:	e8730004 	lwi	r3, r19, 4
}
20010674:	10330000 	addk	r1, r19, r0
20010678:	ea610008 	lwi	r19, r1, 8
2001067c:	ea81000c 	lwi	r20, r1, 12
20010680:	30210010 	addik	r1, r1, 16
20010684:	b60f0008 	rtsd	r15, 8
20010688:	80000000 	or	r0, r0, r0

2001068c <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001068c:	3021fff4 	addik	r1, r1, -12
20010690:	fa610004 	swi	r19, r1, 4
20010694:	fa810008 	swi	r20, r1, 8
20010698:	12610000 	addk	r19, r1, r0
2001069c:	96808000 	mfs	r20, rpc
200106a0:	b000dfff 	imm	-8193
200106a4:	329412c0 	addik	r20, r20, 4800
200106a8:	f8b30010 	swi	r5, r19, 16
200106ac:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200106b0:	e8730010 	lwi	r3, r19, 16
200106b4:	e8830004 	lwi	r4, r3, 4
200106b8:	e8730010 	lwi	r3, r19, 16
200106bc:	e8630010 	lwi	r3, r3, 16
200106c0:	e8a30000 	lwi	r5, r3, 0
200106c4:	e8730010 	lwi	r3, r19, 16
200106c8:	e8630000 	lwi	r3, r3, 0
200106cc:	3063ffff 	addik	r3, r3, -1
200106d0:	84651800 	and	r3, r5, r3
200106d4:	64630402 	bslli	r3, r3, 2
200106d8:	10641800 	addk	r3, r4, r3
200106dc:	e8930014 	lwi	r4, r19, 20
200106e0:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
200106e4:	e8730010 	lwi	r3, r19, 16
200106e8:	e8630010 	lwi	r3, r3, 16
200106ec:	e8830000 	lwi	r4, r3, 0
200106f0:	30840001 	addik	r4, r4, 1
200106f4:	f8830000 	swi	r4, r3, 0
}
200106f8:	10330000 	addk	r1, r19, r0
200106fc:	ea610004 	lwi	r19, r1, 4
20010700:	ea810008 	lwi	r20, r1, 8
20010704:	3021000c 	addik	r1, r1, 12
20010708:	b60f0008 	rtsd	r15, 8
2001070c:	80000000 	or	r0, r0, r0

20010710 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20010710:	3021fff4 	addik	r1, r1, -12
20010714:	fa610004 	swi	r19, r1, 4
20010718:	fa810008 	swi	r20, r1, 8
2001071c:	12610000 	addk	r19, r1, r0
20010720:	96808000 	mfs	r20, rpc
20010724:	b000dfff 	imm	-8193
20010728:	3294123c 	addik	r20, r20, 4668
2001072c:	f8b30010 	swi	r5, r19, 16
20010730:	f8d30014 	swi	r6, r19, 20
20010734:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20010738:	e8730010 	lwi	r3, r19, 16
2001073c:	e8630010 	lwi	r3, r3, 16
20010740:	e8830000 	lwi	r4, r3, 0
20010744:	e8730010 	lwi	r3, r19, 16
20010748:	e8a3000c 	lwi	r5, r3, 12
2001074c:	e8730014 	lwi	r3, r19, 20
20010750:	64630402 	bslli	r3, r3, 2
20010754:	10651800 	addk	r3, r5, r3
20010758:	e8630000 	lwi	r3, r3, 0
2001075c:	14a32000 	rsubk	r5, r3, r4
20010760:	30600001 	addik	r3, r0, 1
20010764:	e8930018 	lwi	r4, r19, 24
20010768:	16442803 	cmpu	r18, r4, r5
2001076c:	bcb20008 	bgei	r18, 8		// 20010774
20010770:	10600000 	addk	r3, r0, r0
20010774:	a46300ff 	andi	r3, r3, 255
}
20010778:	10330000 	addk	r1, r19, r0
2001077c:	ea610004 	lwi	r19, r1, 4
20010780:	ea810008 	lwi	r20, r1, 8
20010784:	3021000c 	addik	r1, r1, 12
20010788:	b60f0008 	rtsd	r15, 8
2001078c:	80000000 	or	r0, r0, r0

20010790 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20010790:	3021fff4 	addik	r1, r1, -12
20010794:	fa610004 	swi	r19, r1, 4
20010798:	fa810008 	swi	r20, r1, 8
2001079c:	12610000 	addk	r19, r1, r0
200107a0:	96808000 	mfs	r20, rpc
200107a4:	b000dfff 	imm	-8193
200107a8:	329411bc 	addik	r20, r20, 4540
200107ac:	f8b30010 	swi	r5, r19, 16
200107b0:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200107b4:	e8730010 	lwi	r3, r19, 16
200107b8:	e8630010 	lwi	r3, r3, 16
200107bc:	e8830000 	lwi	r4, r3, 0
200107c0:	e8730010 	lwi	r3, r19, 16
200107c4:	e8a3000c 	lwi	r5, r3, 12
200107c8:	e8730014 	lwi	r3, r19, 20
200107cc:	64630402 	bslli	r3, r3, 2
200107d0:	10651800 	addk	r3, r5, r3
200107d4:	e8630000 	lwi	r3, r3, 0
200107d8:	14632000 	rsubk	r3, r3, r4
}
200107dc:	10330000 	addk	r1, r19, r0
200107e0:	ea610004 	lwi	r19, r1, 4
200107e4:	ea810008 	lwi	r20, r1, 8
200107e8:	3021000c 	addik	r1, r1, 12
200107ec:	b60f0008 	rtsd	r15, 8
200107f0:	80000000 	or	r0, r0, r0

200107f4 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200107f4:	3021fff0 	addik	r1, r1, -16
200107f8:	fa610008 	swi	r19, r1, 8
200107fc:	fa81000c 	swi	r20, r1, 12
20010800:	12610000 	addk	r19, r1, r0
20010804:	96808000 	mfs	r20, rpc
20010808:	b000dfff 	imm	-8193
2001080c:	32941158 	addik	r20, r20, 4440
20010810:	f8b30014 	swi	r5, r19, 20
20010814:	f8d30018 	swi	r6, r19, 24
20010818:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001081c:	f8130004 	swi	r0, r19, 4
20010820:	b800005c 	bri	92		// 2001087c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20010824:	e8730014 	lwi	r3, r19, 20
20010828:	e8830000 	lwi	r4, r3, 0
2001082c:	e8730014 	lwi	r3, r19, 20
20010830:	e8a3000c 	lwi	r5, r3, 12
20010834:	e8730004 	lwi	r3, r19, 4
20010838:	64630402 	bslli	r3, r3, 2
2001083c:	10651800 	addk	r3, r5, r3
20010840:	e8a30000 	lwi	r5, r3, 0
20010844:	e8730014 	lwi	r3, r19, 20
20010848:	e8630010 	lwi	r3, r3, 16
2001084c:	e8630000 	lwi	r3, r3, 0
20010850:	14632800 	rsubk	r3, r3, r5
20010854:	10641800 	addk	r3, r4, r3
20010858:	30830001 	addik	r4, r3, 1
2001085c:	e873001c 	lwi	r3, r19, 28
20010860:	16441803 	cmpu	r18, r4, r3
20010864:	bc52000c 	blti	r18, 12		// 20010870
            return 0;
20010868:	10600000 	addk	r3, r0, r0
2001086c:	b8000024 	bri	36		// 20010890
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20010870:	e8730004 	lwi	r3, r19, 4
20010874:	30630001 	addik	r3, r3, 1
20010878:	f8730004 	swi	r3, r19, 4
2001087c:	e8930004 	lwi	r4, r19, 4
20010880:	e8730018 	lwi	r3, r19, 24
20010884:	16432003 	cmpu	r18, r3, r4
20010888:	bc52ff9c 	blti	r18, -100		// 20010824
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001088c:	30600001 	addik	r3, r0, 1
}
20010890:	10330000 	addk	r1, r19, r0
20010894:	ea610008 	lwi	r19, r1, 8
20010898:	ea81000c 	lwi	r20, r1, 12
2001089c:	30210010 	addik	r1, r1, 16
200108a0:	b60f0008 	rtsd	r15, 8
200108a4:	80000000 	or	r0, r0, r0

200108a8 <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200108a8:	3021ffe8 	addik	r1, r1, -24
200108ac:	fa610010 	swi	r19, r1, 16
200108b0:	fa810014 	swi	r20, r1, 20
200108b4:	12610000 	addk	r19, r1, r0
200108b8:	96808000 	mfs	r20, rpc
200108bc:	b000dfff 	imm	-8193
200108c0:	329410a4 	addik	r20, r20, 4260
200108c4:	f8b3001c 	swi	r5, r19, 28
200108c8:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
200108cc:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200108d0:	f8130004 	swi	r0, r19, 4
200108d4:	b8000054 	bri	84		// 20010928
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200108d8:	e873001c 	lwi	r3, r19, 28
200108dc:	e8630010 	lwi	r3, r3, 16
200108e0:	e8830000 	lwi	r4, r3, 0
200108e4:	e873001c 	lwi	r3, r19, 28
200108e8:	e8a3000c 	lwi	r5, r3, 12
200108ec:	e8730004 	lwi	r3, r19, 4
200108f0:	64630402 	bslli	r3, r3, 2
200108f4:	10651800 	addk	r3, r5, r3
200108f8:	e8630000 	lwi	r3, r3, 0
200108fc:	14632000 	rsubk	r3, r3, r4
20010900:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20010904:	e8930008 	lwi	r4, r19, 8
20010908:	e873000c 	lwi	r3, r19, 12
2001090c:	16441803 	cmpu	r18, r4, r3
20010910:	bcb20008 	bgei	r18, 8		// 20010918
20010914:	10640000 	addk	r3, r4, r0
20010918:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001091c:	e8730004 	lwi	r3, r19, 4
20010920:	30630001 	addik	r3, r3, 1
20010924:	f8730004 	swi	r3, r19, 4
20010928:	e8930004 	lwi	r4, r19, 4
2001092c:	e8730020 	lwi	r3, r19, 32
20010930:	16432003 	cmpu	r18, r3, r4
20010934:	bc52ffa4 	blti	r18, -92		// 200108d8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20010938:	e873001c 	lwi	r3, r19, 28
2001093c:	e8830000 	lwi	r4, r3, 0
20010940:	e8730008 	lwi	r3, r19, 8
20010944:	14632000 	rsubk	r3, r3, r4
}
20010948:	10330000 	addk	r1, r19, r0
2001094c:	ea610010 	lwi	r19, r1, 16
20010950:	ea810014 	lwi	r20, r1, 20
20010954:	30210018 	addik	r1, r1, 24
20010958:	b60f0008 	rtsd	r15, 8
2001095c:	80000000 	or	r0, r0, r0

20010960 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20010960:	3021fff0 	addik	r1, r1, -16
20010964:	fa610008 	swi	r19, r1, 8
20010968:	fa81000c 	swi	r20, r1, 12
2001096c:	12610000 	addk	r19, r1, r0
20010970:	96808000 	mfs	r20, rpc
20010974:	b000dfff 	imm	-8193
20010978:	32940fec 	addik	r20, r20, 4076
2001097c:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20010980:	e8730014 	lwi	r3, r19, 20
20010984:	e8630010 	lwi	r3, r3, 16
20010988:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001098c:	f8130004 	swi	r0, r19, 4
20010990:	b8000028 	bri	40		// 200109b8
        fifo->read_inds[i] = 0;
20010994:	e8730014 	lwi	r3, r19, 20
20010998:	e883000c 	lwi	r4, r3, 12
2001099c:	e8730004 	lwi	r3, r19, 4
200109a0:	64630402 	bslli	r3, r3, 2
200109a4:	10641800 	addk	r3, r4, r3
200109a8:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200109ac:	e8730004 	lwi	r3, r19, 4
200109b0:	30630001 	addik	r3, r3, 1
200109b4:	f8730004 	swi	r3, r19, 4
200109b8:	e8730014 	lwi	r3, r19, 20
200109bc:	e8830008 	lwi	r4, r3, 8
200109c0:	e8730004 	lwi	r3, r19, 4
200109c4:	16441803 	cmpu	r18, r4, r3
200109c8:	bc52ffcc 	blti	r18, -52		// 20010994
        fifo->read_inds[i] = 0;
    }
}
200109cc:	10330000 	addk	r1, r19, r0
200109d0:	ea610008 	lwi	r19, r1, 8
200109d4:	ea81000c 	lwi	r20, r1, 12
200109d8:	30210010 	addik	r1, r1, 16
200109dc:	b60f0008 	rtsd	r15, 8
200109e0:	80000000 	or	r0, r0, r0

200109e4 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200109e4:	3021ffec 	addik	r1, r1, -20
200109e8:	fa61000c 	swi	r19, r1, 12
200109ec:	fa810010 	swi	r20, r1, 16
200109f0:	12610000 	addk	r19, r1, r0
200109f4:	96808000 	mfs	r20, rpc
200109f8:	b000dfff 	imm	-8193
200109fc:	32940f68 	addik	r20, r20, 3944
20010a00:	f8b30018 	swi	r5, r19, 24
20010a04:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20010a08:	e8730018 	lwi	r3, r19, 24
20010a0c:	e8830004 	lwi	r4, r3, 4
20010a10:	e8730018 	lwi	r3, r19, 24
20010a14:	e8a3000c 	lwi	r5, r3, 12
20010a18:	e873001c 	lwi	r3, r19, 28
20010a1c:	64630402 	bslli	r3, r3, 2
20010a20:	10651800 	addk	r3, r5, r3
20010a24:	e8a30000 	lwi	r5, r3, 0
20010a28:	e8730018 	lwi	r3, r19, 24
20010a2c:	e8630000 	lwi	r3, r3, 0
20010a30:	3063ffff 	addik	r3, r3, -1
20010a34:	84651800 	and	r3, r5, r3
20010a38:	64630403 	bslli	r3, r3, 3
20010a3c:	10641800 	addk	r3, r4, r3
20010a40:	e8830000 	lwi	r4, r3, 0
20010a44:	e8a30004 	lwi	r5, r3, 4
20010a48:	f8930004 	swi	r4, r19, 4
20010a4c:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20010a50:	e8730018 	lwi	r3, r19, 24
20010a54:	e883000c 	lwi	r4, r3, 12
20010a58:	e873001c 	lwi	r3, r19, 28
20010a5c:	64630402 	bslli	r3, r3, 2
20010a60:	10641800 	addk	r3, r4, r3
20010a64:	e8830000 	lwi	r4, r3, 0
20010a68:	30840001 	addik	r4, r4, 1
20010a6c:	f8830000 	swi	r4, r3, 0
    return value;
20010a70:	e8930004 	lwi	r4, r19, 4
20010a74:	e8b30008 	lwi	r5, r19, 8
}
20010a78:	10640000 	addk	r3, r4, r0
20010a7c:	10850000 	addk	r4, r5, r0
20010a80:	10330000 	addk	r1, r19, r0
20010a84:	ea61000c 	lwi	r19, r1, 12
20010a88:	ea810010 	lwi	r20, r1, 16
20010a8c:	30210014 	addik	r1, r1, 20
20010a90:	b60f0008 	rtsd	r15, 8
20010a94:	80000000 	or	r0, r0, r0

20010a98 <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20010a98:	3021fff4 	addik	r1, r1, -12
20010a9c:	fa610004 	swi	r19, r1, 4
20010aa0:	fa810008 	swi	r20, r1, 8
20010aa4:	12610000 	addk	r19, r1, r0
20010aa8:	96808000 	mfs	r20, rpc
20010aac:	b000dfff 	imm	-8193
20010ab0:	32940eb4 	addik	r20, r20, 3764
20010ab4:	f8b30010 	swi	r5, r19, 16
20010ab8:	f8d30014 	swi	r6, r19, 20
20010abc:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20010ac0:	e8730010 	lwi	r3, r19, 16
20010ac4:	e8830004 	lwi	r4, r3, 4
20010ac8:	e8730010 	lwi	r3, r19, 16
20010acc:	e8630010 	lwi	r3, r3, 16
20010ad0:	e8a30000 	lwi	r5, r3, 0
20010ad4:	e8730010 	lwi	r3, r19, 16
20010ad8:	e8630000 	lwi	r3, r3, 0
20010adc:	3063ffff 	addik	r3, r3, -1
20010ae0:	84651800 	and	r3, r5, r3
20010ae4:	64630403 	bslli	r3, r3, 3
20010ae8:	10641800 	addk	r3, r4, r3
20010aec:	e8930014 	lwi	r4, r19, 20
20010af0:	e8b30018 	lwi	r5, r19, 24
20010af4:	f8830000 	swi	r4, r3, 0
20010af8:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20010afc:	e8730010 	lwi	r3, r19, 16
20010b00:	e8630010 	lwi	r3, r3, 16
20010b04:	e8830000 	lwi	r4, r3, 0
20010b08:	30840001 	addik	r4, r4, 1
20010b0c:	f8830000 	swi	r4, r3, 0
}
20010b10:	10330000 	addk	r1, r19, r0
20010b14:	ea610004 	lwi	r19, r1, 4
20010b18:	ea810008 	lwi	r20, r1, 8
20010b1c:	3021000c 	addik	r1, r1, 12
20010b20:	b60f0008 	rtsd	r15, 8
20010b24:	80000000 	or	r0, r0, r0

20010b28 <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20010b28:	3021fff4 	addik	r1, r1, -12
20010b2c:	fa610004 	swi	r19, r1, 4
20010b30:	fa810008 	swi	r20, r1, 8
20010b34:	12610000 	addk	r19, r1, r0
20010b38:	96808000 	mfs	r20, rpc
20010b3c:	b000dfff 	imm	-8193
20010b40:	32940e24 	addik	r20, r20, 3620
20010b44:	f8b30010 	swi	r5, r19, 16
20010b48:	f8d30014 	swi	r6, r19, 20
20010b4c:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20010b50:	e8730010 	lwi	r3, r19, 16
20010b54:	e8630010 	lwi	r3, r3, 16
20010b58:	e8830000 	lwi	r4, r3, 0
20010b5c:	e8730010 	lwi	r3, r19, 16
20010b60:	e8a3000c 	lwi	r5, r3, 12
20010b64:	e8730014 	lwi	r3, r19, 20
20010b68:	64630402 	bslli	r3, r3, 2
20010b6c:	10651800 	addk	r3, r5, r3
20010b70:	e8630000 	lwi	r3, r3, 0
20010b74:	14a32000 	rsubk	r5, r3, r4
20010b78:	30600001 	addik	r3, r0, 1
20010b7c:	e8930018 	lwi	r4, r19, 24
20010b80:	16442803 	cmpu	r18, r4, r5
20010b84:	bcb20008 	bgei	r18, 8		// 20010b8c
20010b88:	10600000 	addk	r3, r0, r0
20010b8c:	a46300ff 	andi	r3, r3, 255
}
20010b90:	10330000 	addk	r1, r19, r0
20010b94:	ea610004 	lwi	r19, r1, 4
20010b98:	ea810008 	lwi	r20, r1, 8
20010b9c:	3021000c 	addik	r1, r1, 12
20010ba0:	b60f0008 	rtsd	r15, 8
20010ba4:	80000000 	or	r0, r0, r0

20010ba8 <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20010ba8:	3021fff4 	addik	r1, r1, -12
20010bac:	fa610004 	swi	r19, r1, 4
20010bb0:	fa810008 	swi	r20, r1, 8
20010bb4:	12610000 	addk	r19, r1, r0
20010bb8:	96808000 	mfs	r20, rpc
20010bbc:	b000dfff 	imm	-8193
20010bc0:	32940da4 	addik	r20, r20, 3492
20010bc4:	f8b30010 	swi	r5, r19, 16
20010bc8:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20010bcc:	e8730010 	lwi	r3, r19, 16
20010bd0:	e8630010 	lwi	r3, r3, 16
20010bd4:	e8830000 	lwi	r4, r3, 0
20010bd8:	e8730010 	lwi	r3, r19, 16
20010bdc:	e8a3000c 	lwi	r5, r3, 12
20010be0:	e8730014 	lwi	r3, r19, 20
20010be4:	64630402 	bslli	r3, r3, 2
20010be8:	10651800 	addk	r3, r5, r3
20010bec:	e8630000 	lwi	r3, r3, 0
20010bf0:	14632000 	rsubk	r3, r3, r4
}
20010bf4:	10330000 	addk	r1, r19, r0
20010bf8:	ea610004 	lwi	r19, r1, 4
20010bfc:	ea810008 	lwi	r20, r1, 8
20010c00:	3021000c 	addik	r1, r1, 12
20010c04:	b60f0008 	rtsd	r15, 8
20010c08:	80000000 	or	r0, r0, r0

20010c0c <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20010c0c:	3021fff0 	addik	r1, r1, -16
20010c10:	fa610008 	swi	r19, r1, 8
20010c14:	fa81000c 	swi	r20, r1, 12
20010c18:	12610000 	addk	r19, r1, r0
20010c1c:	96808000 	mfs	r20, rpc
20010c20:	b000dfff 	imm	-8193
20010c24:	32940d40 	addik	r20, r20, 3392
20010c28:	f8b30014 	swi	r5, r19, 20
20010c2c:	f8d30018 	swi	r6, r19, 24
20010c30:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20010c34:	f8130004 	swi	r0, r19, 4
20010c38:	b800005c 	bri	92		// 20010c94
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20010c3c:	e8730014 	lwi	r3, r19, 20
20010c40:	e8830000 	lwi	r4, r3, 0
20010c44:	e8730014 	lwi	r3, r19, 20
20010c48:	e8a3000c 	lwi	r5, r3, 12
20010c4c:	e8730004 	lwi	r3, r19, 4
20010c50:	64630402 	bslli	r3, r3, 2
20010c54:	10651800 	addk	r3, r5, r3
20010c58:	e8a30000 	lwi	r5, r3, 0
20010c5c:	e8730014 	lwi	r3, r19, 20
20010c60:	e8630010 	lwi	r3, r3, 16
20010c64:	e8630000 	lwi	r3, r3, 0
20010c68:	14632800 	rsubk	r3, r3, r5
20010c6c:	10641800 	addk	r3, r4, r3
20010c70:	30830001 	addik	r4, r3, 1
20010c74:	e873001c 	lwi	r3, r19, 28
20010c78:	16441803 	cmpu	r18, r4, r3
20010c7c:	bc52000c 	blti	r18, 12		// 20010c88
            return 0;
20010c80:	10600000 	addk	r3, r0, r0
20010c84:	b8000024 	bri	36		// 20010ca8
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20010c88:	e8730004 	lwi	r3, r19, 4
20010c8c:	30630001 	addik	r3, r3, 1
20010c90:	f8730004 	swi	r3, r19, 4
20010c94:	e8930004 	lwi	r4, r19, 4
20010c98:	e8730018 	lwi	r3, r19, 24
20010c9c:	16432003 	cmpu	r18, r3, r4
20010ca0:	bc52ff9c 	blti	r18, -100		// 20010c3c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20010ca4:	30600001 	addik	r3, r0, 1
}
20010ca8:	10330000 	addk	r1, r19, r0
20010cac:	ea610008 	lwi	r19, r1, 8
20010cb0:	ea81000c 	lwi	r20, r1, 12
20010cb4:	30210010 	addik	r1, r1, 16
20010cb8:	b60f0008 	rtsd	r15, 8
20010cbc:	80000000 	or	r0, r0, r0

20010cc0 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20010cc0:	3021ffe8 	addik	r1, r1, -24
20010cc4:	fa610010 	swi	r19, r1, 16
20010cc8:	fa810014 	swi	r20, r1, 20
20010ccc:	12610000 	addk	r19, r1, r0
20010cd0:	96808000 	mfs	r20, rpc
20010cd4:	b000dfff 	imm	-8193
20010cd8:	32940c8c 	addik	r20, r20, 3212
20010cdc:	f8b3001c 	swi	r5, r19, 28
20010ce0:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20010ce4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20010ce8:	f8130004 	swi	r0, r19, 4
20010cec:	b8000054 	bri	84		// 20010d40
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20010cf0:	e873001c 	lwi	r3, r19, 28
20010cf4:	e8630010 	lwi	r3, r3, 16
20010cf8:	e8830000 	lwi	r4, r3, 0
20010cfc:	e873001c 	lwi	r3, r19, 28
20010d00:	e8a3000c 	lwi	r5, r3, 12
20010d04:	e8730004 	lwi	r3, r19, 4
20010d08:	64630402 	bslli	r3, r3, 2
20010d0c:	10651800 	addk	r3, r5, r3
20010d10:	e8630000 	lwi	r3, r3, 0
20010d14:	14632000 	rsubk	r3, r3, r4
20010d18:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20010d1c:	e8930008 	lwi	r4, r19, 8
20010d20:	e873000c 	lwi	r3, r19, 12
20010d24:	16441803 	cmpu	r18, r4, r3
20010d28:	bcb20008 	bgei	r18, 8		// 20010d30
20010d2c:	10640000 	addk	r3, r4, r0
20010d30:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20010d34:	e8730004 	lwi	r3, r19, 4
20010d38:	30630001 	addik	r3, r3, 1
20010d3c:	f8730004 	swi	r3, r19, 4
20010d40:	e8930004 	lwi	r4, r19, 4
20010d44:	e8730020 	lwi	r3, r19, 32
20010d48:	16432003 	cmpu	r18, r3, r4
20010d4c:	bc52ffa4 	blti	r18, -92		// 20010cf0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20010d50:	e873001c 	lwi	r3, r19, 28
20010d54:	e8830000 	lwi	r4, r3, 0
20010d58:	e8730008 	lwi	r3, r19, 8
20010d5c:	14632000 	rsubk	r3, r3, r4
}
20010d60:	10330000 	addk	r1, r19, r0
20010d64:	ea610010 	lwi	r19, r1, 16
20010d68:	ea810014 	lwi	r20, r1, 20
20010d6c:	30210018 	addik	r1, r1, 24
20010d70:	b60f0008 	rtsd	r15, 8
20010d74:	80000000 	or	r0, r0, r0

20010d78 <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20010d78:	3021fff0 	addik	r1, r1, -16
20010d7c:	fa610008 	swi	r19, r1, 8
20010d80:	fa81000c 	swi	r20, r1, 12
20010d84:	12610000 	addk	r19, r1, r0
20010d88:	96808000 	mfs	r20, rpc
20010d8c:	b000dfff 	imm	-8193
20010d90:	32940bd4 	addik	r20, r20, 3028
20010d94:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20010d98:	e8730014 	lwi	r3, r19, 20
20010d9c:	e8630010 	lwi	r3, r3, 16
20010da0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20010da4:	f8130004 	swi	r0, r19, 4
20010da8:	b8000028 	bri	40		// 20010dd0
        fifo->read_inds[i] = 0;
20010dac:	e8730014 	lwi	r3, r19, 20
20010db0:	e883000c 	lwi	r4, r3, 12
20010db4:	e8730004 	lwi	r3, r19, 4
20010db8:	64630402 	bslli	r3, r3, 2
20010dbc:	10641800 	addk	r3, r4, r3
20010dc0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20010dc4:	e8730004 	lwi	r3, r19, 4
20010dc8:	30630001 	addik	r3, r3, 1
20010dcc:	f8730004 	swi	r3, r19, 4
20010dd0:	e8730014 	lwi	r3, r19, 20
20010dd4:	e8830008 	lwi	r4, r3, 8
20010dd8:	e8730004 	lwi	r3, r19, 4
20010ddc:	16441803 	cmpu	r18, r4, r3
20010de0:	bc52ffcc 	blti	r18, -52		// 20010dac
        fifo->read_inds[i] = 0;
    }
}
20010de4:	10330000 	addk	r1, r19, r0
20010de8:	ea610008 	lwi	r19, r1, 8
20010dec:	ea81000c 	lwi	r20, r1, 12
20010df0:	30210010 	addik	r1, r1, 16
20010df4:	b60f0008 	rtsd	r15, 8
20010df8:	80000000 	or	r0, r0, r0

20010dfc <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20010dfc:	3021fff0 	addik	r1, r1, -16
20010e00:	fa610008 	swi	r19, r1, 8
20010e04:	fa81000c 	swi	r20, r1, 12
20010e08:	12610000 	addk	r19, r1, r0
20010e0c:	96808000 	mfs	r20, rpc
20010e10:	b000dfff 	imm	-8193
20010e14:	32940b50 	addik	r20, r20, 2896
20010e18:	f8b30014 	swi	r5, r19, 20
20010e1c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20010e20:	e8730014 	lwi	r3, r19, 20
20010e24:	e8830004 	lwi	r4, r3, 4
20010e28:	e8730014 	lwi	r3, r19, 20
20010e2c:	e8a3000c 	lwi	r5, r3, 12
20010e30:	e8730018 	lwi	r3, r19, 24
20010e34:	64630402 	bslli	r3, r3, 2
20010e38:	10651800 	addk	r3, r5, r3
20010e3c:	e8a30000 	lwi	r5, r3, 0
20010e40:	e8730014 	lwi	r3, r19, 20
20010e44:	e8630000 	lwi	r3, r3, 0
20010e48:	3063ffff 	addik	r3, r3, -1
20010e4c:	84651800 	and	r3, r5, r3
20010e50:	64630402 	bslli	r3, r3, 2
20010e54:	10641800 	addk	r3, r4, r3
20010e58:	e8630000 	lwi	r3, r3, 0
20010e5c:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20010e60:	e8730014 	lwi	r3, r19, 20
20010e64:	e883000c 	lwi	r4, r3, 12
20010e68:	e8730018 	lwi	r3, r19, 24
20010e6c:	64630402 	bslli	r3, r3, 2
20010e70:	10641800 	addk	r3, r4, r3
20010e74:	e8830000 	lwi	r4, r3, 0
20010e78:	30840001 	addik	r4, r4, 1
20010e7c:	f8830000 	swi	r4, r3, 0
    return value;
20010e80:	e8730004 	lwi	r3, r19, 4
}
20010e84:	10330000 	addk	r1, r19, r0
20010e88:	ea610008 	lwi	r19, r1, 8
20010e8c:	ea81000c 	lwi	r20, r1, 12
20010e90:	30210010 	addik	r1, r1, 16
20010e94:	b60f0008 	rtsd	r15, 8
20010e98:	80000000 	or	r0, r0, r0

20010e9c <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20010e9c:	3021fff4 	addik	r1, r1, -12
20010ea0:	fa610004 	swi	r19, r1, 4
20010ea4:	fa810008 	swi	r20, r1, 8
20010ea8:	12610000 	addk	r19, r1, r0
20010eac:	96808000 	mfs	r20, rpc
20010eb0:	b000dfff 	imm	-8193
20010eb4:	32940ab0 	addik	r20, r20, 2736
20010eb8:	f8b30010 	swi	r5, r19, 16
20010ebc:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20010ec0:	e8730010 	lwi	r3, r19, 16
20010ec4:	e8830004 	lwi	r4, r3, 4
20010ec8:	e8730010 	lwi	r3, r19, 16
20010ecc:	e8630010 	lwi	r3, r3, 16
20010ed0:	e8a30000 	lwi	r5, r3, 0
20010ed4:	e8730010 	lwi	r3, r19, 16
20010ed8:	e8630000 	lwi	r3, r3, 0
20010edc:	3063ffff 	addik	r3, r3, -1
20010ee0:	84651800 	and	r3, r5, r3
20010ee4:	64630402 	bslli	r3, r3, 2
20010ee8:	10641800 	addk	r3, r4, r3
20010eec:	e8930014 	lwi	r4, r19, 20
20010ef0:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20010ef4:	e8730010 	lwi	r3, r19, 16
20010ef8:	e8630010 	lwi	r3, r3, 16
20010efc:	e8830000 	lwi	r4, r3, 0
20010f00:	30840001 	addik	r4, r4, 1
20010f04:	f8830000 	swi	r4, r3, 0
}
20010f08:	10330000 	addk	r1, r19, r0
20010f0c:	ea610004 	lwi	r19, r1, 4
20010f10:	ea810008 	lwi	r20, r1, 8
20010f14:	3021000c 	addik	r1, r1, 12
20010f18:	b60f0008 	rtsd	r15, 8
20010f1c:	80000000 	or	r0, r0, r0

20010f20 <read_MV>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_MV() {
20010f20:	3021ffdc 	addik	r1, r1, -36
20010f24:	f9e10000 	swi	r15, r1, 0
20010f28:	fa61001c 	swi	r19, r1, 28
20010f2c:	fa810020 	swi	r20, r1, 32
20010f30:	12610000 	addk	r19, r1, r0
20010f34:	96808000 	mfs	r20, rpc
20010f38:	b000dfff 	imm	-8193
20010f3c:	32940a28 	addik	r20, r20, 2600
		index_MV = decoder_motion_framebuf_MV->read_inds[0];
20010f40:	b0000000 	imm	0
20010f44:	e8740108 	lwi	r3, r20, 264
20010f48:	e8630000 	lwi	r3, r3, 0
20010f4c:	e863000c 	lwi	r3, r3, 12
20010f50:	e8830000 	lwi	r4, r3, 0
20010f54:	b0000000 	imm	0
20010f58:	e8740118 	lwi	r3, r20, 280
20010f5c:	f8830000 	swi	r4, r3, 0
		numTokens_MV = index_MV + fifo_i16_get_num_tokens(decoder_motion_framebuf_MV, 0);
20010f60:	b0000000 	imm	0
20010f64:	e8740108 	lwi	r3, r20, 264
20010f68:	e8630000 	lwi	r3, r3, 0
20010f6c:	10a30000 	addk	r5, r3, r0
20010f70:	10c00000 	addk	r6, r0, r0
20010f74:	b0000000 	imm	0
20010f78:	e89400fc 	lwi	r4, r20, 252
20010f7c:	99fc2000 	brald	r15, r4
20010f80:	80000000 	or	r0, r0, r0
20010f84:	10830000 	addk	r4, r3, r0
20010f88:	b0000000 	imm	0
20010f8c:	e8740118 	lwi	r3, r20, 280
20010f90:	e8630000 	lwi	r3, r3, 0
20010f94:	10841800 	addk	r4, r4, r3
20010f98:	b0000000 	imm	0
20010f9c:	e874011c 	lwi	r3, r20, 284
20010fa0:	f8830000 	swi	r4, r3, 0
	}
20010fa4:	e9e10000 	lwi	r15, r1, 0
20010fa8:	10330000 	addk	r1, r19, r0
20010fac:	ea61001c 	lwi	r19, r1, 28
20010fb0:	ea810020 	lwi	r20, r1, 32
20010fb4:	30210024 	addik	r1, r1, 36
20010fb8:	b60f0008 	rtsd	r15, 8
20010fbc:	80000000 	or	r0, r0, r0

20010fc0 <read_end_MV>:
	
	static void read_end_MV() {
20010fc0:	3021fff4 	addik	r1, r1, -12
20010fc4:	fa610004 	swi	r19, r1, 4
20010fc8:	fa810008 	swi	r20, r1, 8
20010fcc:	12610000 	addk	r19, r1, r0
20010fd0:	96808000 	mfs	r20, rpc
20010fd4:	b000dfff 	imm	-8193
20010fd8:	3294098c 	addik	r20, r20, 2444
		decoder_motion_framebuf_MV->read_inds[0] = index_MV;
20010fdc:	b0000000 	imm	0
20010fe0:	e8740108 	lwi	r3, r20, 264
20010fe4:	e8630000 	lwi	r3, r3, 0
20010fe8:	e863000c 	lwi	r3, r3, 12
20010fec:	b0000000 	imm	0
20010ff0:	e8940118 	lwi	r4, r20, 280
20010ff4:	e8840000 	lwi	r4, r4, 0
20010ff8:	f8830000 	swi	r4, r3, 0
	}
20010ffc:	10330000 	addk	r1, r19, r0
20011000:	ea610004 	lwi	r19, r1, 4
20011004:	ea810008 	lwi	r20, r1, 8
20011008:	3021000c 	addik	r1, r1, 12
2001100c:	b60f0008 	rtsd	r15, 8
20011010:	80000000 	or	r0, r0, r0

20011014 <read_BTYPE>:
	static void read_BTYPE() {
20011014:	3021ffdc 	addik	r1, r1, -36
20011018:	f9e10000 	swi	r15, r1, 0
2001101c:	fa61001c 	swi	r19, r1, 28
20011020:	fa810020 	swi	r20, r1, 32
20011024:	12610000 	addk	r19, r1, r0
20011028:	96808000 	mfs	r20, rpc
2001102c:	b000dfff 	imm	-8193
20011030:	32940934 	addik	r20, r20, 2356
		index_BTYPE = decoder_motion_framebuf_BTYPE->read_inds[5];
20011034:	b0000000 	imm	0
20011038:	e8740104 	lwi	r3, r20, 260
2001103c:	e8630000 	lwi	r3, r3, 0
20011040:	e863000c 	lwi	r3, r3, 12
20011044:	e8830014 	lwi	r4, r3, 20
20011048:	b0000000 	imm	0
2001104c:	e8740120 	lwi	r3, r20, 288
20011050:	f8830000 	swi	r4, r3, 0
		numTokens_BTYPE = index_BTYPE + fifo_i16_get_num_tokens(decoder_motion_framebuf_BTYPE, 5);
20011054:	b0000000 	imm	0
20011058:	e8740104 	lwi	r3, r20, 260
2001105c:	e8630000 	lwi	r3, r3, 0
20011060:	10a30000 	addk	r5, r3, r0
20011064:	30c00005 	addik	r6, r0, 5
20011068:	b0000000 	imm	0
2001106c:	e89400fc 	lwi	r4, r20, 252
20011070:	99fc2000 	brald	r15, r4
20011074:	80000000 	or	r0, r0, r0
20011078:	10830000 	addk	r4, r3, r0
2001107c:	b0000000 	imm	0
20011080:	e8740120 	lwi	r3, r20, 288
20011084:	e8630000 	lwi	r3, r3, 0
20011088:	10841800 	addk	r4, r4, r3
2001108c:	b0000000 	imm	0
20011090:	e8740124 	lwi	r3, r20, 292
20011094:	f8830000 	swi	r4, r3, 0
	}
20011098:	e9e10000 	lwi	r15, r1, 0
2001109c:	10330000 	addk	r1, r19, r0
200110a0:	ea61001c 	lwi	r19, r1, 28
200110a4:	ea810020 	lwi	r20, r1, 32
200110a8:	30210024 	addik	r1, r1, 36
200110ac:	b60f0008 	rtsd	r15, 8
200110b0:	80000000 	or	r0, r0, r0

200110b4 <read_end_BTYPE>:
	
	static void read_end_BTYPE() {
200110b4:	3021fff4 	addik	r1, r1, -12
200110b8:	fa610004 	swi	r19, r1, 4
200110bc:	fa810008 	swi	r20, r1, 8
200110c0:	12610000 	addk	r19, r1, r0
200110c4:	96808000 	mfs	r20, rpc
200110c8:	b000dfff 	imm	-8193
200110cc:	32940898 	addik	r20, r20, 2200
		decoder_motion_framebuf_BTYPE->read_inds[5] = index_BTYPE;
200110d0:	b0000000 	imm	0
200110d4:	e8740104 	lwi	r3, r20, 260
200110d8:	e8630000 	lwi	r3, r3, 0
200110dc:	e863000c 	lwi	r3, r3, 12
200110e0:	30630014 	addik	r3, r3, 20
200110e4:	b0000000 	imm	0
200110e8:	e8940120 	lwi	r4, r20, 288
200110ec:	e8840000 	lwi	r4, r4, 0
200110f0:	f8830000 	swi	r4, r3, 0
	}
200110f4:	10330000 	addk	r1, r19, r0
200110f8:	ea610004 	lwi	r19, r1, 4
200110fc:	ea810008 	lwi	r20, r1, 8
20011100:	3021000c 	addik	r1, r1, 12
20011104:	b60f0008 	rtsd	r15, 8
20011108:	80000000 	or	r0, r0, r0

2001110c <read_WD>:
	static void read_WD() {
2001110c:	3021ffdc 	addik	r1, r1, -36
20011110:	f9e10000 	swi	r15, r1, 0
20011114:	fa61001c 	swi	r19, r1, 28
20011118:	fa810020 	swi	r20, r1, 32
2001111c:	12610000 	addk	r19, r1, r0
20011120:	96808000 	mfs	r20, rpc
20011124:	b000dfff 	imm	-8193
20011128:	3294083c 	addik	r20, r20, 2108
		index_WD = decoder_motion_framebuf_WD->read_inds[0];
2001112c:	b0000000 	imm	0
20011130:	e874010c 	lwi	r3, r20, 268
20011134:	e8630000 	lwi	r3, r3, 0
20011138:	e863000c 	lwi	r3, r3, 12
2001113c:	e8830000 	lwi	r4, r3, 0
20011140:	b0000000 	imm	0
20011144:	e8740128 	lwi	r3, r20, 296
20011148:	f8830000 	swi	r4, r3, 0
		numTokens_WD = index_WD + fifo_i16_get_num_tokens(decoder_motion_framebuf_WD, 0);
2001114c:	b0000000 	imm	0
20011150:	e874010c 	lwi	r3, r20, 268
20011154:	e8630000 	lwi	r3, r3, 0
20011158:	10a30000 	addk	r5, r3, r0
2001115c:	10c00000 	addk	r6, r0, r0
20011160:	b0000000 	imm	0
20011164:	e89400fc 	lwi	r4, r20, 252
20011168:	99fc2000 	brald	r15, r4
2001116c:	80000000 	or	r0, r0, r0
20011170:	10830000 	addk	r4, r3, r0
20011174:	b0000000 	imm	0
20011178:	e8740128 	lwi	r3, r20, 296
2001117c:	e8630000 	lwi	r3, r3, 0
20011180:	10841800 	addk	r4, r4, r3
20011184:	b0000000 	imm	0
20011188:	e874012c 	lwi	r3, r20, 300
2001118c:	f8830000 	swi	r4, r3, 0
	}
20011190:	e9e10000 	lwi	r15, r1, 0
20011194:	10330000 	addk	r1, r19, r0
20011198:	ea61001c 	lwi	r19, r1, 28
2001119c:	ea810020 	lwi	r20, r1, 32
200111a0:	30210024 	addik	r1, r1, 36
200111a4:	b60f0008 	rtsd	r15, 8
200111a8:	80000000 	or	r0, r0, r0

200111ac <read_end_WD>:
	
	static void read_end_WD() {
200111ac:	3021fff4 	addik	r1, r1, -12
200111b0:	fa610004 	swi	r19, r1, 4
200111b4:	fa810008 	swi	r20, r1, 8
200111b8:	12610000 	addk	r19, r1, r0
200111bc:	96808000 	mfs	r20, rpc
200111c0:	b000dfff 	imm	-8193
200111c4:	329407a0 	addik	r20, r20, 1952
		decoder_motion_framebuf_WD->read_inds[0] = index_WD;
200111c8:	b0000000 	imm	0
200111cc:	e874010c 	lwi	r3, r20, 268
200111d0:	e8630000 	lwi	r3, r3, 0
200111d4:	e863000c 	lwi	r3, r3, 12
200111d8:	b0000000 	imm	0
200111dc:	e8940128 	lwi	r4, r20, 296
200111e0:	e8840000 	lwi	r4, r4, 0
200111e4:	f8830000 	swi	r4, r3, 0
	}
200111e8:	10330000 	addk	r1, r19, r0
200111ec:	ea610004 	lwi	r19, r1, 4
200111f0:	ea810008 	lwi	r20, r1, 8
200111f4:	3021000c 	addik	r1, r1, 12
200111f8:	b60f0008 	rtsd	r15, 8
200111fc:	80000000 	or	r0, r0, r0

20011200 <write_halfpel>:

	static void write_halfpel() {
20011200:	3021ffdc 	addik	r1, r1, -36
20011204:	f9e10000 	swi	r15, r1, 0
20011208:	fa61001c 	swi	r19, r1, 28
2001120c:	fa810020 	swi	r20, r1, 32
20011210:	12610000 	addk	r19, r1, r0
20011214:	96808000 	mfs	r20, rpc
20011218:	b000dfff 	imm	-8193
2001121c:	32940748 	addik	r20, r20, 1864
		index_halfpel = (*decoder_motion_framebuf_halfpel->write_ind);
20011220:	b0000000 	imm	0
20011224:	e8740114 	lwi	r3, r20, 276
20011228:	e8630000 	lwi	r3, r3, 0
2001122c:	e8630010 	lwi	r3, r3, 16
20011230:	e8830000 	lwi	r4, r3, 0
20011234:	b0000000 	imm	0
20011238:	e8740130 	lwi	r3, r20, 304
2001123c:	f8830000 	swi	r4, r3, 0
		numFree_halfpel = index_halfpel + fifo_i8_get_room(decoder_motion_framebuf_halfpel, NUM_READERS_halfpel);
20011240:	b0000000 	imm	0
20011244:	e8740114 	lwi	r3, r20, 276
20011248:	e8630000 	lwi	r3, r3, 0
2001124c:	10a30000 	addk	r5, r3, r0
20011250:	30c00001 	addik	r6, r0, 1
20011254:	b0000000 	imm	0
20011258:	e89400f8 	lwi	r4, r20, 248
2001125c:	99fc2000 	brald	r15, r4
20011260:	80000000 	or	r0, r0, r0
20011264:	10830000 	addk	r4, r3, r0
20011268:	b0000000 	imm	0
2001126c:	e8740130 	lwi	r3, r20, 304
20011270:	e8630000 	lwi	r3, r3, 0
20011274:	10841800 	addk	r4, r4, r3
20011278:	b0000000 	imm	0
2001127c:	e8740134 	lwi	r3, r20, 308
20011280:	f8830000 	swi	r4, r3, 0
	}
20011284:	e9e10000 	lwi	r15, r1, 0
20011288:	10330000 	addk	r1, r19, r0
2001128c:	ea61001c 	lwi	r19, r1, 28
20011290:	ea810020 	lwi	r20, r1, 32
20011294:	30210024 	addik	r1, r1, 36
20011298:	b60f0008 	rtsd	r15, 8
2001129c:	80000000 	or	r0, r0, r0

200112a0 <write_end_halfpel>:
	
	static void write_end_halfpel() {
200112a0:	3021fff4 	addik	r1, r1, -12
200112a4:	fa610004 	swi	r19, r1, 4
200112a8:	fa810008 	swi	r20, r1, 8
200112ac:	12610000 	addk	r19, r1, r0
200112b0:	96808000 	mfs	r20, rpc
200112b4:	b000dfff 	imm	-8193
200112b8:	329406ac 	addik	r20, r20, 1708
		(*decoder_motion_framebuf_halfpel->write_ind) = index_halfpel;
200112bc:	b0000000 	imm	0
200112c0:	e8740114 	lwi	r3, r20, 276
200112c4:	e8630000 	lwi	r3, r3, 0
200112c8:	e8630010 	lwi	r3, r3, 16
200112cc:	b0000000 	imm	0
200112d0:	e8940130 	lwi	r4, r20, 304
200112d4:	e8840000 	lwi	r4, r4, 0
200112d8:	f8830000 	swi	r4, r3, 0
	}
200112dc:	10330000 	addk	r1, r19, r0
200112e0:	ea610004 	lwi	r19, r1, 4
200112e4:	ea810008 	lwi	r20, r1, 8
200112e8:	3021000c 	addik	r1, r1, 12
200112ec:	b60f0008 	rtsd	r15, 8
200112f0:	80000000 	or	r0, r0, r0

200112f4 <write_RD>:
	static void write_RD() {
200112f4:	3021ffdc 	addik	r1, r1, -36
200112f8:	f9e10000 	swi	r15, r1, 0
200112fc:	fa61001c 	swi	r19, r1, 28
20011300:	fa810020 	swi	r20, r1, 32
20011304:	12610000 	addk	r19, r1, r0
20011308:	96808000 	mfs	r20, rpc
2001130c:	b000dfff 	imm	-8193
20011310:	32940654 	addik	r20, r20, 1620
		index_RD = (*decoder_motion_framebuf_RD->write_ind);
20011314:	b0000000 	imm	0
20011318:	e8740110 	lwi	r3, r20, 272
2001131c:	e8630000 	lwi	r3, r3, 0
20011320:	e8630010 	lwi	r3, r3, 16
20011324:	e8830000 	lwi	r4, r3, 0
20011328:	b0000000 	imm	0
2001132c:	e8740138 	lwi	r3, r20, 312
20011330:	f8830000 	swi	r4, r3, 0
		numFree_RD = index_RD + fifo_i16_get_room(decoder_motion_framebuf_RD, NUM_READERS_RD);
20011334:	b0000000 	imm	0
20011338:	e8740110 	lwi	r3, r20, 272
2001133c:	e8630000 	lwi	r3, r3, 0
20011340:	10a30000 	addk	r5, r3, r0
20011344:	30c00001 	addik	r6, r0, 1
20011348:	b0000000 	imm	0
2001134c:	e8940100 	lwi	r4, r20, 256
20011350:	99fc2000 	brald	r15, r4
20011354:	80000000 	or	r0, r0, r0
20011358:	10830000 	addk	r4, r3, r0
2001135c:	b0000000 	imm	0
20011360:	e8740138 	lwi	r3, r20, 312
20011364:	e8630000 	lwi	r3, r3, 0
20011368:	10841800 	addk	r4, r4, r3
2001136c:	b0000000 	imm	0
20011370:	e874013c 	lwi	r3, r20, 316
20011374:	f8830000 	swi	r4, r3, 0
	}
20011378:	e9e10000 	lwi	r15, r1, 0
2001137c:	10330000 	addk	r1, r19, r0
20011380:	ea61001c 	lwi	r19, r1, 28
20011384:	ea810020 	lwi	r20, r1, 32
20011388:	30210024 	addik	r1, r1, 36
2001138c:	b60f0008 	rtsd	r15, 8
20011390:	80000000 	or	r0, r0, r0

20011394 <write_end_RD>:
	
	static void write_end_RD() {
20011394:	3021fff4 	addik	r1, r1, -12
20011398:	fa610004 	swi	r19, r1, 4
2001139c:	fa810008 	swi	r20, r1, 8
200113a0:	12610000 	addk	r19, r1, r0
200113a4:	96808000 	mfs	r20, rpc
200113a8:	b000dfff 	imm	-8193
200113ac:	329405b8 	addik	r20, r20, 1464
		(*decoder_motion_framebuf_RD->write_ind) = index_RD;
200113b0:	b0000000 	imm	0
200113b4:	e8740110 	lwi	r3, r20, 272
200113b8:	e8630000 	lwi	r3, r3, 0
200113bc:	e8630010 	lwi	r3, r3, 16
200113c0:	b0000000 	imm	0
200113c4:	e8940138 	lwi	r4, r20, 312
200113c8:	e8840000 	lwi	r4, r4, 0
200113cc:	f8830000 	swi	r4, r3, 0
	}
200113d0:	10330000 	addk	r1, r19, r0
200113d4:	ea610004 	lwi	r19, r1, 4
200113d8:	ea810008 	lwi	r20, r1, 8
200113dc:	3021000c 	addik	r1, r1, 12
200113e0:	b60f0008 	rtsd	r15, 8
200113e4:	80000000 	or	r0, r0, r0

200113e8 <advance_block>:

	////////////////////////////////////////////////////////////////////////////////
	// Functions/procedures
	static void advance_block();

	static void advance_block() {
200113e8:	3021ffdc 	addik	r1, r1, -36
200113ec:	fa61001c 	swi	r19, r1, 28
200113f0:	fa810020 	swi	r20, r1, 32
200113f4:	12610000 	addk	r19, r1, r0
200113f8:	96808000 	mfs	r20, rpc
200113fc:	b000dfff 	imm	-8193
20011400:	32940564 	addik	r20, r20, 1380
		i32 local_COMP_PER_MB;
		i32 local_mbx_read;
		i32 local_vop_width;
		i32 local_mby_read;
	
		local_outstanding_writes = outstanding_writes;
20011404:	b0000000 	imm	0
20011408:	e8740184 	lwi	r3, r20, 388
2001140c:	e8630000 	lwi	r3, r3, 0
20011410:	f8730004 	swi	r3, r19, 4
		outstanding_writes = local_outstanding_writes + 1;
20011414:	e8730004 	lwi	r3, r19, 4
20011418:	30830001 	addik	r4, r3, 1
2001141c:	b0000000 	imm	0
20011420:	e8740184 	lwi	r3, r20, 388
20011424:	f8830000 	swi	r4, r3, 0
		local_comp_so_far = comp_so_far;
20011428:	b0000000 	imm	0
2001142c:	e8740194 	lwi	r3, r20, 404
20011430:	e8630000 	lwi	r3, r3, 0
20011434:	f8730008 	swi	r3, r19, 8
		comp_so_far = local_comp_so_far + 1;
20011438:	e8730008 	lwi	r3, r19, 8
2001143c:	30830001 	addik	r4, r3, 1
20011440:	b0000000 	imm	0
20011444:	e8740194 	lwi	r3, r20, 404
20011448:	f8830000 	swi	r4, r3, 0
		local_comp_so_far = comp_so_far;
2001144c:	b0000000 	imm	0
20011450:	e8740194 	lwi	r3, r20, 404
20011454:	e8630000 	lwi	r3, r3, 0
20011458:	f8730008 	swi	r3, r19, 8
		local_COMP_PER_MB = COMP_PER_MB;
2001145c:	30600006 	addik	r3, r0, 6
20011460:	f873000c 	swi	r3, r19, 12
		if (local_comp_so_far == local_COMP_PER_MB) {
20011464:	e8930008 	lwi	r4, r19, 8
20011468:	e873000c 	lwi	r3, r19, 12
2001146c:	88641800 	xor	r3, r4, r3
20011470:	bc230094 	bnei	r3, 148		// 20011504
			local_mbx_read = mbx_read;
20011474:	b0000000 	imm	0
20011478:	e874017c 	lwi	r3, r20, 380
2001147c:	e8630000 	lwi	r3, r3, 0
20011480:	f8730010 	swi	r3, r19, 16
			mbx_read = local_mbx_read + 1;
20011484:	e8730010 	lwi	r3, r19, 16
20011488:	30830001 	addik	r4, r3, 1
2001148c:	b0000000 	imm	0
20011490:	e874017c 	lwi	r3, r20, 380
20011494:	f8830000 	swi	r4, r3, 0
			comp_so_far = 0;
20011498:	b0000000 	imm	0
2001149c:	e8740194 	lwi	r3, r20, 404
200114a0:	f8030000 	swi	r0, r3, 0
			local_mbx_read = mbx_read;
200114a4:	b0000000 	imm	0
200114a8:	e874017c 	lwi	r3, r20, 380
200114ac:	e8630000 	lwi	r3, r3, 0
200114b0:	f8730010 	swi	r3, r19, 16
			local_vop_width = vop_width;
200114b4:	b0000000 	imm	0
200114b8:	e874014c 	lwi	r3, r20, 332
200114bc:	e8630000 	lwi	r3, r3, 0
200114c0:	f8730014 	swi	r3, r19, 20
			if (local_mbx_read == local_vop_width) {
200114c4:	e8930010 	lwi	r4, r19, 16
200114c8:	e8730014 	lwi	r3, r19, 20
200114cc:	88641800 	xor	r3, r4, r3
200114d0:	bc230034 	bnei	r3, 52		// 20011504
				mbx_read = 0;
200114d4:	b0000000 	imm	0
200114d8:	e874017c 	lwi	r3, r20, 380
200114dc:	f8030000 	swi	r0, r3, 0
				local_mby_read = mby_read;
200114e0:	b0000000 	imm	0
200114e4:	e8740180 	lwi	r3, r20, 384
200114e8:	e8630000 	lwi	r3, r3, 0
200114ec:	f8730018 	swi	r3, r19, 24
				mby_read = local_mby_read + 1;
200114f0:	e8730018 	lwi	r3, r19, 24
200114f4:	30830001 	addik	r4, r3, 1
200114f8:	b0000000 	imm	0
200114fc:	e8740180 	lwi	r3, r20, 384
20011500:	f8830000 	swi	r4, r3, 0
			}
		}
	}
20011504:	10330000 	addk	r1, r19, r0
20011508:	ea61001c 	lwi	r19, r1, 28
2001150c:	ea810020 	lwi	r20, r1, 32
20011510:	30210024 	addik	r1, r1, 36
20011514:	b60f0008 	rtsd	r15, 8
20011518:	80000000 	or	r0, r0, r0

2001151c <isSchedulable_cmd_newVop>:

	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_cmd_newVop() {
2001151c:	3021ffe8 	addik	r1, r1, -24
20011520:	fa610010 	swi	r19, r1, 16
20011524:	fa810014 	swi	r20, r1, 20
20011528:	12610000 	addk	r19, r1, r0
2001152c:	96808000 	mfs	r20, rpc
20011530:	b000dfff 	imm	-8193
20011534:	32940430 	addik	r20, r20, 1072
		i32 result;
		i16 cmd;
		i32 local_NEWVOP;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20011538:	b0000000 	imm	0
2001153c:	e8740104 	lwi	r3, r20, 260
20011540:	e8630000 	lwi	r3, r3, 0
20011544:	e8830004 	lwi	r4, r3, 4
20011548:	b0000000 	imm	0
2001154c:	e8740120 	lwi	r3, r20, 288
20011550:	e8630000 	lwi	r3, r3, 0
20011554:	a46301ff 	andi	r3, r3, 511
20011558:	10631800 	addk	r3, r3, r3
2001155c:	10641800 	addk	r3, r4, r3
20011560:	e4630000 	lhui	r3, r3, 0
20011564:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
20011568:	30600800 	addik	r3, r0, 2048	// 800 <decoder_parser_mvrecon_A>
2001156c:	f8730008 	swi	r3, r19, 8
		result = (cmd & local_NEWVOP) != 0;
20011570:	e4730004 	lhui	r3, r19, 4
20011574:	90830061 	sext16	r4, r3
20011578:	e8730008 	lwi	r3, r19, 8
2001157c:	84841800 	and	r4, r4, r3
20011580:	10600000 	addk	r3, r0, r0
20011584:	8c641c00 	pcmpne	r3, r4, r3
20011588:	a46300ff 	andi	r3, r3, 255
2001158c:	f873000c 	swi	r3, r19, 12
		return result;
20011590:	e873000c 	lwi	r3, r19, 12
	}
20011594:	10330000 	addk	r1, r19, r0
20011598:	ea610010 	lwi	r19, r1, 16
2001159c:	ea810014 	lwi	r20, r1, 20
200115a0:	30210018 	addik	r1, r1, 24
200115a4:	b60f0008 	rtsd	r15, 8
200115a8:	80000000 	or	r0, r0, r0

200115ac <cmd_newVop>:
	
	static void cmd_newVop() {
200115ac:	3021ffd0 	addik	r1, r1, -48
200115b0:	f9e10000 	swi	r15, r1, 0
200115b4:	fa610028 	swi	r19, r1, 40
200115b8:	fa81002c 	swi	r20, r1, 44
200115bc:	12610000 	addk	r19, r1, r0
200115c0:	96808000 	mfs	r20, rpc
200115c4:	b000dfff 	imm	-8193
200115c8:	3294039c 	addik	r20, r20, 924
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
200115cc:	b0000000 	imm	0
200115d0:	e8740120 	lwi	r3, r20, 288
200115d4:	e8630000 	lwi	r3, r3, 0
200115d8:	a46301ff 	andi	r3, r3, 511
200115dc:	f873001c 	swi	r3, r19, 28
	
		i16 cmd;
		i32 local_ROUND_TYPE;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
200115e0:	b0000000 	imm	0
200115e4:	e8740104 	lwi	r3, r20, 260
200115e8:	e8630000 	lwi	r3, r3, 0
200115ec:	e8830004 	lwi	r4, r3, 4
200115f0:	b0000000 	imm	0
200115f4:	e8740120 	lwi	r3, r20, 288
200115f8:	e8630000 	lwi	r3, r3, 0
200115fc:	a46301ff 	andi	r3, r3, 511
20011600:	10631800 	addk	r3, r3, r3
20011604:	10641800 	addk	r3, r4, r3
20011608:	e4630000 	lhui	r3, r3, 0
2001160c:	f4730020 	shi	r3, r19, 32
		local_ROUND_TYPE = Constants_ROUND_TYPE;
20011610:	30600020 	addik	r3, r0, 32	// 20 <_vector_hw_exception>
20011614:	f8730024 	swi	r3, r19, 36
		if ((cmd & local_ROUND_TYPE) != 0) {
20011618:	e4730020 	lhui	r3, r19, 32
2001161c:	90830061 	sext16	r4, r3
20011620:	e8730024 	lwi	r3, r19, 36
20011624:	84641800 	and	r3, r4, r3
20011628:	bc030018 	beqi	r3, 24		// 20011640
			vop_rounding_mode = 1;
2001162c:	b0000000 	imm	0
20011630:	e874015c 	lwi	r3, r20, 348
20011634:	30800001 	addik	r4, r0, 1
20011638:	f8830000 	swi	r4, r3, 0
2001163c:	b8000010 	bri	16		// 2001164c
		} else {
			vop_rounding_mode = 0;
20011640:	b0000000 	imm	0
20011644:	e874015c 	lwi	r3, r20, 348
20011648:	f8030000 	swi	r0, r3, 0
		}
		comp_so_far = 0;
2001164c:	b0000000 	imm	0
20011650:	e8740194 	lwi	r3, r20, 404
20011654:	f8030000 	swi	r0, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
20011658:	b0000000 	imm	0
2001165c:	e8740120 	lwi	r3, r20, 288
20011660:	e8630000 	lwi	r3, r3, 0
20011664:	30830001 	addik	r4, r3, 1
20011668:	b0000000 	imm	0
2001166c:	e8740120 	lwi	r3, r20, 288
20011670:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
20011674:	b0000000 	imm	0
20011678:	e87401ac 	lwi	r3, r20, 428
2001167c:	99fc1800 	brald	r15, r3
20011680:	80000000 	or	r0, r0, r0
	}
20011684:	e9e10000 	lwi	r15, r1, 0
20011688:	10330000 	addk	r1, r19, r0
2001168c:	ea610028 	lwi	r19, r1, 40
20011690:	ea81002c 	lwi	r20, r1, 44
20011694:	30210030 	addik	r1, r1, 48
20011698:	b60f0008 	rtsd	r15, 8
2001169c:	80000000 	or	r0, r0, r0

200116a0 <isSchedulable_get_w_h>:
	static i32 isSchedulable_get_w_h() {
200116a0:	3021fff0 	addik	r1, r1, -16
200116a4:	fa610008 	swi	r19, r1, 8
200116a8:	fa81000c 	swi	r20, r1, 12
200116ac:	12610000 	addk	r19, r1, r0
200116b0:	96808000 	mfs	r20, rpc
200116b4:	b000dfff 	imm	-8193
200116b8:	329402ac 	addik	r20, r20, 684
		i32 result;
	
		result = 1;
200116bc:	30600001 	addik	r3, r0, 1
200116c0:	f8730004 	swi	r3, r19, 4
		return result;
200116c4:	e8730004 	lwi	r3, r19, 4
	}
200116c8:	10330000 	addk	r1, r19, r0
200116cc:	ea610008 	lwi	r19, r1, 8
200116d0:	ea81000c 	lwi	r20, r1, 12
200116d4:	30210010 	addik	r1, r1, 16
200116d8:	b60f0008 	rtsd	r15, 8
200116dc:	80000000 	or	r0, r0, r0

200116e0 <get_w_h>:
	
	static void get_w_h() {
200116e0:	3021ff9c 	addik	r1, r1, -100
200116e4:	f9e10000 	swi	r15, r1, 0
200116e8:	fa61005c 	swi	r19, r1, 92
200116ec:	fa810060 	swi	r20, r1, 96
200116f0:	12610000 	addk	r19, r1, r0
200116f4:	96808000 	mfs	r20, rpc
200116f8:	b000dfff 	imm	-8193
200116fc:	32940268 	addik	r20, r20, 616
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20011700:	b0000000 	imm	0
20011704:	e8740120 	lwi	r3, r20, 288
20011708:	e8630000 	lwi	r3, r3, 0
2001170c:	a46301ff 	andi	r3, r3, 511
20011710:	f873001c 	swi	r3, r19, 28
		i32 local_start_of_frame;
		i32 local_BUFFER_SIZE;
		i32 local_start_of_frame_U;
		i32 local_BUFFER_SIZE_UV;
	
		w = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20011714:	b0000000 	imm	0
20011718:	e8740104 	lwi	r3, r20, 260
2001171c:	e8630000 	lwi	r3, r3, 0
20011720:	e8830004 	lwi	r4, r3, 4
20011724:	b0000000 	imm	0
20011728:	e8740120 	lwi	r3, r20, 288
2001172c:	e8630000 	lwi	r3, r3, 0
20011730:	a46301ff 	andi	r3, r3, 511
20011734:	10631800 	addk	r3, r3, r3
20011738:	10641800 	addk	r3, r4, r3
2001173c:	e4630000 	lhui	r3, r3, 0
20011740:	f4730020 	shi	r3, r19, 32
		h = tokens_BTYPE[(index_BTYPE + (1)) % SIZE_BTYPE];
20011744:	b0000000 	imm	0
20011748:	e8740104 	lwi	r3, r20, 260
2001174c:	e8630000 	lwi	r3, r3, 0
20011750:	e8830004 	lwi	r4, r3, 4
20011754:	b0000000 	imm	0
20011758:	e8740120 	lwi	r3, r20, 288
2001175c:	e8630000 	lwi	r3, r3, 0
20011760:	30630001 	addik	r3, r3, 1
20011764:	a46301ff 	andi	r3, r3, 511
20011768:	10631800 	addk	r3, r3, r3
2001176c:	10641800 	addk	r3, r4, r3
20011770:	e4630000 	lhui	r3, r3, 0
20011774:	f4730022 	shi	r3, r19, 34
		local_vop_height = vop_height;
20011778:	b0000000 	imm	0
2001177c:	e8740150 	lwi	r3, r20, 336
20011780:	e8630000 	lwi	r3, r3, 0
20011784:	f8730024 	swi	r3, r19, 36
		local_SAMPLES_PER_MB = SAMPLES_PER_MB;
20011788:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
2001178c:	f8730028 	swi	r3, r19, 40
		local_MAXW_IN_SAMPLES = MAXW_IN_SAMPLES;
20011790:	306000c0 	addik	r3, r0, 192
20011794:	f873002c 	swi	r3, r19, 44
		last_frame_size = local_vop_height * local_SAMPLES_PER_MB * local_MAXW_IN_SAMPLES;
20011798:	e8930024 	lwi	r4, r19, 36
2001179c:	e8730028 	lwi	r3, r19, 40
200117a0:	40841800 	mul	r4, r4, r3
200117a4:	e873002c 	lwi	r3, r19, 44
200117a8:	40641800 	mul	r3, r4, r3
200117ac:	f8730030 	swi	r3, r19, 48
		local_vop_height = vop_height;
200117b0:	b0000000 	imm	0
200117b4:	e8740150 	lwi	r3, r20, 336
200117b8:	e8630000 	lwi	r3, r3, 0
200117bc:	f8730024 	swi	r3, r19, 36
		local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
200117c0:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200117c4:	f8730034 	swi	r3, r19, 52
		local_MAXW_IN_SAMPLES_UV = MAXW_IN_SAMPLES_UV;
200117c8:	30600060 	addik	r3, r0, 96
200117cc:	f8730038 	swi	r3, r19, 56
		last_frame_size_UV = local_vop_height * local_SAMPLES_PER_MB_UV * local_MAXW_IN_SAMPLES_UV;
200117d0:	e8930024 	lwi	r4, r19, 36
200117d4:	e8730034 	lwi	r3, r19, 52
200117d8:	40841800 	mul	r4, r4, r3
200117dc:	e8730038 	lwi	r3, r19, 56
200117e0:	40641800 	mul	r3, r4, r3
200117e4:	f873003c 	swi	r3, r19, 60
		vop_width = w;
200117e8:	e4730020 	lhui	r3, r19, 32
200117ec:	90830061 	sext16	r4, r3
200117f0:	b0000000 	imm	0
200117f4:	e874014c 	lwi	r3, r20, 332
200117f8:	f8830000 	swi	r4, r3, 0
		vop_height = h;
200117fc:	e4730022 	lhui	r3, r19, 34
20011800:	90830061 	sext16	r4, r3
20011804:	b0000000 	imm	0
20011808:	e8740150 	lwi	r3, r20, 336
2001180c:	f8830000 	swi	r4, r3, 0
		local_SAMPLES_PER_MB = SAMPLES_PER_MB;
20011810:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
20011814:	f8730028 	swi	r3, r19, 40
		vop_width_in_samples = w * local_SAMPLES_PER_MB;
20011818:	e4730020 	lhui	r3, r19, 32
2001181c:	90830061 	sext16	r4, r3
20011820:	e8730028 	lwi	r3, r19, 40
20011824:	40841800 	mul	r4, r4, r3
20011828:	b0000000 	imm	0
2001182c:	e8740154 	lwi	r3, r20, 340
20011830:	f8830000 	swi	r4, r3, 0
		local_SAMPLES_PER_MB = SAMPLES_PER_MB;
20011834:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
20011838:	f8730028 	swi	r3, r19, 40
		vop_height_in_samples = h * local_SAMPLES_PER_MB;
2001183c:	e4730022 	lhui	r3, r19, 34
20011840:	90830061 	sext16	r4, r3
20011844:	e8730028 	lwi	r3, r19, 40
20011848:	40841800 	mul	r4, r4, r3
2001184c:	b0000000 	imm	0
20011850:	e8740158 	lwi	r3, r20, 344
20011854:	f8830000 	swi	r4, r3, 0
		local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
20011858:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2001185c:	f8730034 	swi	r3, r19, 52
		vop_width_in_samples_U = w * local_SAMPLES_PER_MB_UV;
20011860:	e4730020 	lhui	r3, r19, 32
20011864:	90830061 	sext16	r4, r3
20011868:	e8730034 	lwi	r3, r19, 52
2001186c:	40841800 	mul	r4, r4, r3
20011870:	b0000000 	imm	0
20011874:	e8740168 	lwi	r3, r20, 360
20011878:	f8830000 	swi	r4, r3, 0
		local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
2001187c:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20011880:	f8730034 	swi	r3, r19, 52
		vop_height_in_samples_U = h * local_SAMPLES_PER_MB_UV;
20011884:	e4730022 	lhui	r3, r19, 34
20011888:	90830061 	sext16	r4, r3
2001188c:	e8730034 	lwi	r3, r19, 52
20011890:	40841800 	mul	r4, r4, r3
20011894:	b0000000 	imm	0
20011898:	e874016c 	lwi	r3, r20, 364
2001189c:	f8830000 	swi	r4, r3, 0
		local_vop_height = vop_height;
200118a0:	b0000000 	imm	0
200118a4:	e8740150 	lwi	r3, r20, 336
200118a8:	e8630000 	lwi	r3, r3, 0
200118ac:	f8730024 	swi	r3, r19, 36
		local_HALF_SEARCH = HALF_SEARCH;
200118b0:	30600001 	addik	r3, r0, 1
200118b4:	f8730040 	swi	r3, r19, 64
		local_vop_width = vop_width;
200118b8:	b0000000 	imm	0
200118bc:	e874014c 	lwi	r3, r20, 332
200118c0:	e8630000 	lwi	r3, r3, 0
200118c4:	f8730044 	swi	r3, r19, 68
		local_COMP_PER_MB = COMP_PER_MB;
200118c8:	30600006 	addik	r3, r0, 6
200118cc:	f8730048 	swi	r3, r19, 72
		max_outstanding_writes = (local_vop_height - local_HALF_SEARCH) * local_vop_width * local_COMP_PER_MB;
200118d0:	e8930024 	lwi	r4, r19, 36
200118d4:	e8730040 	lwi	r3, r19, 64
200118d8:	14832000 	rsubk	r4, r3, r4
200118dc:	e8730044 	lwi	r3, r19, 68
200118e0:	40841800 	mul	r4, r4, r3
200118e4:	e8730048 	lwi	r3, r19, 72
200118e8:	40841800 	mul	r4, r4, r3
200118ec:	b0000000 	imm	0
200118f0:	e8740160 	lwi	r3, r20, 352
200118f4:	f8830000 	swi	r4, r3, 0
		mbx_read = 0;
200118f8:	b0000000 	imm	0
200118fc:	e874017c 	lwi	r3, r20, 380
20011900:	f8030000 	swi	r0, r3, 0
		mby_read = 0;
20011904:	b0000000 	imm	0
20011908:	e8740180 	lwi	r3, r20, 384
2001190c:	f8030000 	swi	r0, r3, 0
		if (last_frame_size != 0) {
20011910:	e8730030 	lwi	r3, r19, 48
20011914:	bc030030 	beqi	r3, 48		// 20011944
			local_start_of_frame = start_of_frame;
20011918:	b0000000 	imm	0
2001191c:	e8740164 	lwi	r3, r20, 356
20011920:	e8630000 	lwi	r3, r3, 0
20011924:	f873004c 	swi	r3, r19, 76
			start_of_frame = local_start_of_frame + last_frame_size;
20011928:	e893004c 	lwi	r4, r19, 76
2001192c:	e8730030 	lwi	r3, r19, 48
20011930:	10841800 	addk	r4, r4, r3
20011934:	b0000000 	imm	0
20011938:	e8740164 	lwi	r3, r20, 356
2001193c:	f8830000 	swi	r4, r3, 0
20011940:	b8000058 	bri	88		// 20011998
		} else {
			local_BUFFER_SIZE = BUFFER_SIZE;
20011944:	b0000000 	imm	0
20011948:	30608400 	addik	r3, r0, -31744
2001194c:	f8730050 	swi	r3, r19, 80
			local_vop_height = vop_height;
20011950:	b0000000 	imm	0
20011954:	e8740150 	lwi	r3, r20, 336
20011958:	e8630000 	lwi	r3, r3, 0
2001195c:	f8730024 	swi	r3, r19, 36
			local_SAMPLES_PER_MB = SAMPLES_PER_MB;
20011960:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
20011964:	f8730028 	swi	r3, r19, 40
			local_MAXW_IN_SAMPLES = MAXW_IN_SAMPLES;
20011968:	306000c0 	addik	r3, r0, 192
2001196c:	f873002c 	swi	r3, r19, 44
			start_of_frame = local_BUFFER_SIZE - local_vop_height * local_SAMPLES_PER_MB * local_MAXW_IN_SAMPLES;
20011970:	e8930024 	lwi	r4, r19, 36
20011974:	e8730028 	lwi	r3, r19, 40
20011978:	40841800 	mul	r4, r4, r3
2001197c:	e873002c 	lwi	r3, r19, 44
20011980:	40641800 	mul	r3, r4, r3
20011984:	e8930050 	lwi	r4, r19, 80
20011988:	14832000 	rsubk	r4, r3, r4
2001198c:	b0000000 	imm	0
20011990:	e8740164 	lwi	r3, r20, 356
20011994:	f8830000 	swi	r4, r3, 0
		}
		if (last_frame_size_UV != 0) {
20011998:	e873003c 	lwi	r3, r19, 60
2001199c:	bc030030 	beqi	r3, 48		// 200119cc
			local_start_of_frame_U = start_of_frame_U;
200119a0:	b0000000 	imm	0
200119a4:	e8740170 	lwi	r3, r20, 368
200119a8:	e8630000 	lwi	r3, r3, 0
200119ac:	f8730054 	swi	r3, r19, 84
			start_of_frame_U = local_start_of_frame_U + last_frame_size_UV;
200119b0:	e8930054 	lwi	r4, r19, 84
200119b4:	e873003c 	lwi	r3, r19, 60
200119b8:	10841800 	addk	r4, r4, r3
200119bc:	b0000000 	imm	0
200119c0:	e8740170 	lwi	r3, r20, 368
200119c4:	f8830000 	swi	r4, r3, 0
200119c8:	b8000054 	bri	84		// 20011a1c
		} else {
			local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
200119cc:	30602100 	addik	r3, r0, 8448
200119d0:	f8730058 	swi	r3, r19, 88
			local_vop_height = vop_height;
200119d4:	b0000000 	imm	0
200119d8:	e8740150 	lwi	r3, r20, 336
200119dc:	e8630000 	lwi	r3, r3, 0
200119e0:	f8730024 	swi	r3, r19, 36
			local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
200119e4:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200119e8:	f8730034 	swi	r3, r19, 52
			local_MAXW_IN_SAMPLES_UV = MAXW_IN_SAMPLES_UV;
200119ec:	30600060 	addik	r3, r0, 96
200119f0:	f8730038 	swi	r3, r19, 56
			start_of_frame_U = local_BUFFER_SIZE_UV - local_vop_height * local_SAMPLES_PER_MB_UV * local_MAXW_IN_SAMPLES_UV;
200119f4:	e8930024 	lwi	r4, r19, 36
200119f8:	e8730034 	lwi	r3, r19, 52
200119fc:	40841800 	mul	r4, r4, r3
20011a00:	e8730038 	lwi	r3, r19, 56
20011a04:	40641800 	mul	r3, r4, r3
20011a08:	e8930058 	lwi	r4, r19, 88
20011a0c:	14832000 	rsubk	r4, r3, r4
20011a10:	b0000000 	imm	0
20011a14:	e8740170 	lwi	r3, r20, 368
20011a18:	f8830000 	swi	r4, r3, 0
		}
		local_start_of_frame = start_of_frame;
20011a1c:	b0000000 	imm	0
20011a20:	e8740164 	lwi	r3, r20, 356
20011a24:	e8630000 	lwi	r3, r3, 0
20011a28:	f873004c 	swi	r3, r19, 76
		local_BUFFER_SIZE = BUFFER_SIZE;
20011a2c:	b0000000 	imm	0
20011a30:	30608400 	addik	r3, r0, -31744
20011a34:	f8730050 	swi	r3, r19, 80
		if (local_start_of_frame >= local_BUFFER_SIZE) {
20011a38:	e893004c 	lwi	r4, r19, 76
20011a3c:	e8730050 	lwi	r3, r19, 80
20011a40:	16432001 	cmp	r18, r3, r4
20011a44:	bc520038 	blti	r18, 56		// 20011a7c
			local_start_of_frame = start_of_frame;
20011a48:	b0000000 	imm	0
20011a4c:	e8740164 	lwi	r3, r20, 356
20011a50:	e8630000 	lwi	r3, r3, 0
20011a54:	f873004c 	swi	r3, r19, 76
			local_BUFFER_SIZE = BUFFER_SIZE;
20011a58:	b0000000 	imm	0
20011a5c:	30608400 	addik	r3, r0, -31744
20011a60:	f8730050 	swi	r3, r19, 80
			start_of_frame = local_start_of_frame - local_BUFFER_SIZE;
20011a64:	e893004c 	lwi	r4, r19, 76
20011a68:	e8730050 	lwi	r3, r19, 80
20011a6c:	14832000 	rsubk	r4, r3, r4
20011a70:	b0000000 	imm	0
20011a74:	e8740164 	lwi	r3, r20, 356
20011a78:	f8830000 	swi	r4, r3, 0
		}
		local_start_of_frame_U = start_of_frame_U;
20011a7c:	b0000000 	imm	0
20011a80:	e8740170 	lwi	r3, r20, 368
20011a84:	e8630000 	lwi	r3, r3, 0
20011a88:	f8730054 	swi	r3, r19, 84
		local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
20011a8c:	30602100 	addik	r3, r0, 8448
20011a90:	f8730058 	swi	r3, r19, 88
		if (local_start_of_frame_U >= local_BUFFER_SIZE_UV) {
20011a94:	e8930054 	lwi	r4, r19, 84
20011a98:	e8730058 	lwi	r3, r19, 88
20011a9c:	16432001 	cmp	r18, r3, r4
20011aa0:	bc520034 	blti	r18, 52		// 20011ad4
			local_start_of_frame_U = start_of_frame_U;
20011aa4:	b0000000 	imm	0
20011aa8:	e8740170 	lwi	r3, r20, 368
20011aac:	e8630000 	lwi	r3, r3, 0
20011ab0:	f8730054 	swi	r3, r19, 84
			local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
20011ab4:	30602100 	addik	r3, r0, 8448
20011ab8:	f8730058 	swi	r3, r19, 88
			start_of_frame_U = local_start_of_frame_U - local_BUFFER_SIZE_UV;
20011abc:	e8930054 	lwi	r4, r19, 84
20011ac0:	e8730058 	lwi	r3, r19, 88
20011ac4:	14832000 	rsubk	r4, r3, r4
20011ac8:	b0000000 	imm	0
20011acc:	e8740170 	lwi	r3, r20, 368
20011ad0:	f8830000 	swi	r4, r3, 0
		}
	
		// Update ports indexes
		index_BTYPE += 2;
20011ad4:	b0000000 	imm	0
20011ad8:	e8740120 	lwi	r3, r20, 288
20011adc:	e8630000 	lwi	r3, r3, 0
20011ae0:	30830002 	addik	r4, r3, 2
20011ae4:	b0000000 	imm	0
20011ae8:	e8740120 	lwi	r3, r20, 288
20011aec:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
20011af0:	b0000000 	imm	0
20011af4:	e87401ac 	lwi	r3, r20, 428
20011af8:	99fc1800 	brald	r15, r3
20011afc:	80000000 	or	r0, r0, r0
	}
20011b00:	e9e10000 	lwi	r15, r1, 0
20011b04:	10330000 	addk	r1, r19, r0
20011b08:	ea61005c 	lwi	r19, r1, 92
20011b0c:	ea810060 	lwi	r20, r1, 96
20011b10:	30210064 	addik	r1, r1, 100
20011b14:	b60f0008 	rtsd	r15, 8
20011b18:	80000000 	or	r0, r0, r0

20011b1c <isSchedulable_cmd_noMotion>:
	static i32 isSchedulable_cmd_noMotion() {
20011b1c:	3021ffe8 	addik	r1, r1, -24
20011b20:	fa610010 	swi	r19, r1, 16
20011b24:	fa810014 	swi	r20, r1, 20
20011b28:	12610000 	addk	r19, r1, r0
20011b2c:	96808000 	mfs	r20, rpc
20011b30:	b000dffe 	imm	-8194
20011b34:	3294fe30 	addik	r20, r20, -464
		i32 result;
		i16 cmd;
		i32 local_INTRA;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20011b38:	b0000000 	imm	0
20011b3c:	e8740104 	lwi	r3, r20, 260
20011b40:	e8630000 	lwi	r3, r3, 0
20011b44:	e8830004 	lwi	r4, r3, 4
20011b48:	b0000000 	imm	0
20011b4c:	e8740120 	lwi	r3, r20, 288
20011b50:	e8630000 	lwi	r3, r3, 0
20011b54:	a46301ff 	andi	r3, r3, 511
20011b58:	10631800 	addk	r3, r3, r3
20011b5c:	10641800 	addk	r3, r4, r3
20011b60:	e4630000 	lhui	r3, r3, 0
20011b64:	f4730004 	shi	r3, r19, 4
		local_INTRA = ConstantsBtype_INTRA;
20011b68:	30600400 	addik	r3, r0, 1024	// 400 <_HEAP_SIZE>
20011b6c:	f8730008 	swi	r3, r19, 8
		result = (cmd & local_INTRA) != 0;
20011b70:	e4730004 	lhui	r3, r19, 4
20011b74:	90830061 	sext16	r4, r3
20011b78:	e8730008 	lwi	r3, r19, 8
20011b7c:	84841800 	and	r4, r4, r3
20011b80:	10600000 	addk	r3, r0, r0
20011b84:	8c641c00 	pcmpne	r3, r4, r3
20011b88:	a46300ff 	andi	r3, r3, 255
20011b8c:	f873000c 	swi	r3, r19, 12
		return result;
20011b90:	e873000c 	lwi	r3, r19, 12
	}
20011b94:	10330000 	addk	r1, r19, r0
20011b98:	ea610010 	lwi	r19, r1, 16
20011b9c:	ea810014 	lwi	r20, r1, 20
20011ba0:	30210018 	addik	r1, r1, 24
20011ba4:	b60f0008 	rtsd	r15, 8
20011ba8:	80000000 	or	r0, r0, r0

20011bac <cmd_noMotion>:
	
	static void cmd_noMotion() {
20011bac:	3021ffd4 	addik	r1, r1, -44
20011bb0:	f9e10000 	swi	r15, r1, 0
20011bb4:	fa610024 	swi	r19, r1, 36
20011bb8:	fa810028 	swi	r20, r1, 40
20011bbc:	12610000 	addk	r19, r1, r0
20011bc0:	96808000 	mfs	r20, rpc
20011bc4:	b000dffe 	imm	-8194
20011bc8:	3294fd9c 	addik	r20, r20, -612
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20011bcc:	b0000000 	imm	0
20011bd0:	e8740120 	lwi	r3, r20, 288
20011bd4:	e8630000 	lwi	r3, r3, 0
20011bd8:	a46301ff 	andi	r3, r3, 511
20011bdc:	f873001c 	swi	r3, r19, 28
	
		i16 cmd;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20011be0:	b0000000 	imm	0
20011be4:	e8740104 	lwi	r3, r20, 260
20011be8:	e8630000 	lwi	r3, r3, 0
20011bec:	e8830004 	lwi	r4, r3, 4
20011bf0:	b0000000 	imm	0
20011bf4:	e8740120 	lwi	r3, r20, 288
20011bf8:	e8630000 	lwi	r3, r3, 0
20011bfc:	a46301ff 	andi	r3, r3, 511
20011c00:	10631800 	addk	r3, r3, r3
20011c04:	10641800 	addk	r3, r4, r3
20011c08:	e4630000 	lhui	r3, r3, 0
20011c0c:	f4730020 	shi	r3, r19, 32
		advance_block();
20011c10:	b0000000 	imm	0
20011c14:	e87401c8 	lwi	r3, r20, 456
20011c18:	99fc1800 	brald	r15, r3
20011c1c:	80000000 	or	r0, r0, r0
	
		// Update ports indexes
		index_BTYPE += 1;
20011c20:	b0000000 	imm	0
20011c24:	e8740120 	lwi	r3, r20, 288
20011c28:	e8630000 	lwi	r3, r3, 0
20011c2c:	30830001 	addik	r4, r3, 1
20011c30:	b0000000 	imm	0
20011c34:	e8740120 	lwi	r3, r20, 288
20011c38:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
20011c3c:	b0000000 	imm	0
20011c40:	e87401ac 	lwi	r3, r20, 428
20011c44:	99fc1800 	brald	r15, r3
20011c48:	80000000 	or	r0, r0, r0
	}
20011c4c:	e9e10000 	lwi	r15, r1, 0
20011c50:	10330000 	addk	r1, r19, r0
20011c54:	ea610024 	lwi	r19, r1, 36
20011c58:	ea810028 	lwi	r20, r1, 40
20011c5c:	3021002c 	addik	r1, r1, 44
20011c60:	b60f0008 	rtsd	r15, 8
20011c64:	80000000 	or	r0, r0, r0

20011c68 <isSchedulable_cmd_motion>:
	static i32 isSchedulable_cmd_motion() {
20011c68:	3021ffe8 	addik	r1, r1, -24
20011c6c:	fa610010 	swi	r19, r1, 16
20011c70:	fa810014 	swi	r20, r1, 20
20011c74:	12610000 	addk	r19, r1, r0
20011c78:	96808000 	mfs	r20, rpc
20011c7c:	b000dffe 	imm	-8194
20011c80:	3294fce4 	addik	r20, r20, -796
		i32 result;
		i16 cmd;
		i32 local_MOTION;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20011c84:	b0000000 	imm	0
20011c88:	e8740104 	lwi	r3, r20, 260
20011c8c:	e8630000 	lwi	r3, r3, 0
20011c90:	e8830004 	lwi	r4, r3, 4
20011c94:	b0000000 	imm	0
20011c98:	e8740120 	lwi	r3, r20, 288
20011c9c:	e8630000 	lwi	r3, r3, 0
20011ca0:	a46301ff 	andi	r3, r3, 511
20011ca4:	10631800 	addk	r3, r3, r3
20011ca8:	10641800 	addk	r3, r4, r3
20011cac:	e4630000 	lhui	r3, r3, 0
20011cb0:	f4730004 	shi	r3, r19, 4
		local_MOTION = ConstantsBtype_MOTION;
20011cb4:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20011cb8:	f8730008 	swi	r3, r19, 8
		result = (cmd & local_MOTION) != 0;
20011cbc:	e4730004 	lhui	r3, r19, 4
20011cc0:	90830061 	sext16	r4, r3
20011cc4:	e8730008 	lwi	r3, r19, 8
20011cc8:	84841800 	and	r4, r4, r3
20011ccc:	10600000 	addk	r3, r0, r0
20011cd0:	8c641c00 	pcmpne	r3, r4, r3
20011cd4:	a46300ff 	andi	r3, r3, 255
20011cd8:	f873000c 	swi	r3, r19, 12
		return result;
20011cdc:	e873000c 	lwi	r3, r19, 12
	}
20011ce0:	10330000 	addk	r1, r19, r0
20011ce4:	ea610010 	lwi	r19, r1, 16
20011ce8:	ea810014 	lwi	r20, r1, 20
20011cec:	30210018 	addik	r1, r1, 24
20011cf0:	b60f0008 	rtsd	r15, 8
20011cf4:	80000000 	or	r0, r0, r0

20011cf8 <cmd_motion>:
	
	static void cmd_motion() {
20011cf8:	3021ffd4 	addik	r1, r1, -44
20011cfc:	f9e10000 	swi	r15, r1, 0
20011d00:	fa610024 	swi	r19, r1, 36
20011d04:	fa810028 	swi	r20, r1, 40
20011d08:	12610000 	addk	r19, r1, r0
20011d0c:	96808000 	mfs	r20, rpc
20011d10:	b000dffe 	imm	-8194
20011d14:	3294fc50 	addik	r20, r20, -944
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20011d18:	b0000000 	imm	0
20011d1c:	e8740120 	lwi	r3, r20, 288
20011d20:	e8630000 	lwi	r3, r3, 0
20011d24:	a46301ff 	andi	r3, r3, 511
20011d28:	f873001c 	swi	r3, r19, 28
	
		i16 cmd;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20011d2c:	b0000000 	imm	0
20011d30:	e8740104 	lwi	r3, r20, 260
20011d34:	e8630000 	lwi	r3, r3, 0
20011d38:	e8830004 	lwi	r4, r3, 4
20011d3c:	b0000000 	imm	0
20011d40:	e8740120 	lwi	r3, r20, 288
20011d44:	e8630000 	lwi	r3, r3, 0
20011d48:	a46301ff 	andi	r3, r3, 511
20011d4c:	10631800 	addk	r3, r3, r3
20011d50:	10641800 	addk	r3, r4, r3
20011d54:	e4630000 	lhui	r3, r3, 0
20011d58:	f4730020 	shi	r3, r19, 32
	
		// Update ports indexes
		index_BTYPE += 1;
20011d5c:	b0000000 	imm	0
20011d60:	e8740120 	lwi	r3, r20, 288
20011d64:	e8630000 	lwi	r3, r3, 0
20011d68:	30830001 	addik	r4, r3, 1
20011d6c:	b0000000 	imm	0
20011d70:	e8740120 	lwi	r3, r20, 288
20011d74:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
20011d78:	b0000000 	imm	0
20011d7c:	e87401ac 	lwi	r3, r20, 428
20011d80:	99fc1800 	brald	r15, r3
20011d84:	80000000 	or	r0, r0, r0
	}
20011d88:	e9e10000 	lwi	r15, r1, 0
20011d8c:	10330000 	addk	r1, r19, r0
20011d90:	ea610024 	lwi	r19, r1, 36
20011d94:	ea810028 	lwi	r20, r1, 40
20011d98:	3021002c 	addik	r1, r1, 44
20011d9c:	b60f0008 	rtsd	r15, 8
20011da0:	80000000 	or	r0, r0, r0

20011da4 <isSchedulable_read_mv>:
	static i32 isSchedulable_read_mv() {
20011da4:	3021fff0 	addik	r1, r1, -16
20011da8:	fa610008 	swi	r19, r1, 8
20011dac:	fa81000c 	swi	r20, r1, 12
20011db0:	12610000 	addk	r19, r1, r0
20011db4:	96808000 	mfs	r20, rpc
20011db8:	b000dffe 	imm	-8194
20011dbc:	3294fba8 	addik	r20, r20, -1112
		i32 result;
	
		result = 1;
20011dc0:	30600001 	addik	r3, r0, 1
20011dc4:	f8730004 	swi	r3, r19, 4
		return result;
20011dc8:	e8730004 	lwi	r3, r19, 4
	}
20011dcc:	10330000 	addk	r1, r19, r0
20011dd0:	ea610008 	lwi	r19, r1, 8
20011dd4:	ea81000c 	lwi	r20, r1, 12
20011dd8:	30210010 	addik	r1, r1, 16
20011ddc:	b60f0008 	rtsd	r15, 8
20011de0:	80000000 	or	r0, r0, r0

20011de4 <read_mv>:
	
	static void read_mv() {
20011de4:	3021ffc8 	addik	r1, r1, -56
20011de8:	f9e10000 	swi	r15, r1, 0
20011dec:	fa610030 	swi	r19, r1, 48
20011df0:	fa810034 	swi	r20, r1, 52
20011df4:	12610000 	addk	r19, r1, r0
20011df8:	96808000 	mfs	r20, rpc
20011dfc:	b000dffe 	imm	-8194
20011e00:	3294fb64 	addik	r20, r20, -1180
	
		// Compute aligned port indexes
		i32 index_aligned_MV = index_MV % SIZE_MV;
20011e04:	b0000000 	imm	0
20011e08:	e8740118 	lwi	r3, r20, 280
20011e0c:	e8630000 	lwi	r3, r3, 0
20011e10:	a46301ff 	andi	r3, r3, 511
20011e14:	f873001c 	swi	r3, r19, 28
		i32 index_aligned_halfpel = index_halfpel % SIZE_halfpel;
20011e18:	b0000000 	imm	0
20011e1c:	e8740130 	lwi	r3, r20, 304
20011e20:	e8630000 	lwi	r3, r3, 0
20011e24:	a46301ff 	andi	r3, r3, 511
20011e28:	f8730020 	swi	r3, r19, 32
		i16 x;
		i16 y;
		i32 local_vop_rounding_mode;
		i8 flags;
	
		x = tokens_MV[(index_MV + (0)) % SIZE_MV];
20011e2c:	b0000000 	imm	0
20011e30:	e8740108 	lwi	r3, r20, 264
20011e34:	e8630000 	lwi	r3, r3, 0
20011e38:	e8830004 	lwi	r4, r3, 4
20011e3c:	b0000000 	imm	0
20011e40:	e8740118 	lwi	r3, r20, 280
20011e44:	e8630000 	lwi	r3, r3, 0
20011e48:	a46301ff 	andi	r3, r3, 511
20011e4c:	10631800 	addk	r3, r3, r3
20011e50:	10641800 	addk	r3, r4, r3
20011e54:	e4630000 	lhui	r3, r3, 0
20011e58:	f4730024 	shi	r3, r19, 36
		y = tokens_MV[(index_MV + (1)) % SIZE_MV];
20011e5c:	b0000000 	imm	0
20011e60:	e8740108 	lwi	r3, r20, 264
20011e64:	e8630000 	lwi	r3, r3, 0
20011e68:	e8830004 	lwi	r4, r3, 4
20011e6c:	b0000000 	imm	0
20011e70:	e8740118 	lwi	r3, r20, 280
20011e74:	e8630000 	lwi	r3, r3, 0
20011e78:	30630001 	addik	r3, r3, 1
20011e7c:	a46301ff 	andi	r3, r3, 511
20011e80:	10631800 	addk	r3, r3, r3
20011e84:	10641800 	addk	r3, r4, r3
20011e88:	e4630000 	lhui	r3, r3, 0
20011e8c:	f4730026 	shi	r3, r19, 38
		local_vop_rounding_mode = vop_rounding_mode;
20011e90:	b0000000 	imm	0
20011e94:	e874015c 	lwi	r3, r20, 348
20011e98:	e8630000 	lwi	r3, r3, 0
20011e9c:	f8730028 	swi	r3, r19, 40
		flags = ((x & 1) << 2) + ((y & 1) << 1) + local_vop_rounding_mode;
20011ea0:	e4730024 	lhui	r3, r19, 36
20011ea4:	a46300ff 	andi	r3, r3, 255
20011ea8:	a4630001 	andi	r3, r3, 1
20011eac:	a46300ff 	andi	r3, r3, 255
20011eb0:	64630402 	bslli	r3, r3, 2
20011eb4:	a48300ff 	andi	r4, r3, 255
20011eb8:	e4730026 	lhui	r3, r19, 38
20011ebc:	a46300ff 	andi	r3, r3, 255
20011ec0:	a4630001 	andi	r3, r3, 1
20011ec4:	a46300ff 	andi	r3, r3, 255
20011ec8:	10631800 	addk	r3, r3, r3
20011ecc:	a46300ff 	andi	r3, r3, 255
20011ed0:	10641800 	addk	r3, r4, r3
20011ed4:	a48300ff 	andi	r4, r3, 255
20011ed8:	e8730028 	lwi	r3, r19, 40
20011edc:	a46300ff 	andi	r3, r3, 255
20011ee0:	10641800 	addk	r3, r4, r3
20011ee4:	a46300ff 	andi	r3, r3, 255
20011ee8:	f073002c 	sbi	r3, r19, 44
		mvx = x >> 1;
20011eec:	e4730024 	lhui	r3, r19, 36
20011ef0:	90630061 	sext16	r3, r3
20011ef4:	90630001 	sra	r3, r3
20011ef8:	90830061 	sext16	r4, r3
20011efc:	b0000000 	imm	0
20011f00:	e8740174 	lwi	r3, r20, 372
20011f04:	f4830000 	shi	r4, r3, 0
		mvy = y >> 1;
20011f08:	e4730026 	lhui	r3, r19, 38
20011f0c:	90630061 	sext16	r3, r3
20011f10:	90630001 	sra	r3, r3
20011f14:	90830061 	sext16	r4, r3
20011f18:	b0000000 	imm	0
20011f1c:	e8740178 	lwi	r3, r20, 376
20011f20:	f4830000 	shi	r4, r3, 0
		tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel] = flags;
20011f24:	b0000000 	imm	0
20011f28:	e8740114 	lwi	r3, r20, 276
20011f2c:	e8630000 	lwi	r3, r3, 0
20011f30:	e8830004 	lwi	r4, r3, 4
20011f34:	b0000000 	imm	0
20011f38:	e8740130 	lwi	r3, r20, 304
20011f3c:	e8630000 	lwi	r3, r3, 0
20011f40:	a46301ff 	andi	r3, r3, 511
20011f44:	10641800 	addk	r3, r4, r3
20011f48:	e093002c 	lbui	r4, r19, 44
20011f4c:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		index_MV += 2;
20011f50:	b0000000 	imm	0
20011f54:	e8740118 	lwi	r3, r20, 280
20011f58:	e8630000 	lwi	r3, r3, 0
20011f5c:	30830002 	addik	r4, r3, 2
20011f60:	b0000000 	imm	0
20011f64:	e8740118 	lwi	r3, r20, 280
20011f68:	f8830000 	swi	r4, r3, 0
		index_halfpel += 1;
20011f6c:	b0000000 	imm	0
20011f70:	e8740130 	lwi	r3, r20, 304
20011f74:	e8630000 	lwi	r3, r3, 0
20011f78:	30830001 	addik	r4, r3, 1
20011f7c:	b0000000 	imm	0
20011f80:	e8740130 	lwi	r3, r20, 304
20011f84:	f8830000 	swi	r4, r3, 0
		
		read_end_MV();
20011f88:	b0000000 	imm	0
20011f8c:	e87401a4 	lwi	r3, r20, 420
20011f90:	99fc1800 	brald	r15, r3
20011f94:	80000000 	or	r0, r0, r0
		write_end_halfpel();
20011f98:	b0000000 	imm	0
20011f9c:	e87401bc 	lwi	r3, r20, 444
20011fa0:	99fc1800 	brald	r15, r3
20011fa4:	80000000 	or	r0, r0, r0
	}
20011fa8:	e9e10000 	lwi	r15, r1, 0
20011fac:	10330000 	addk	r1, r19, r0
20011fb0:	ea610030 	lwi	r19, r1, 48
20011fb4:	ea810034 	lwi	r20, r1, 52
20011fb8:	30210038 	addik	r1, r1, 56
20011fbc:	b60f0008 	rtsd	r15, 8
20011fc0:	80000000 	or	r0, r0, r0

20011fc4 <isSchedulable_cmd_neither>:
	static i32 isSchedulable_cmd_neither() {
20011fc4:	3021fff0 	addik	r1, r1, -16
20011fc8:	fa610008 	swi	r19, r1, 8
20011fcc:	fa81000c 	swi	r20, r1, 12
20011fd0:	12610000 	addk	r19, r1, r0
20011fd4:	96808000 	mfs	r20, rpc
20011fd8:	b000dffe 	imm	-8194
20011fdc:	3294f988 	addik	r20, r20, -1656
		i32 result;
	
		result = 1;
20011fe0:	30600001 	addik	r3, r0, 1
20011fe4:	f8730004 	swi	r3, r19, 4
		return result;
20011fe8:	e8730004 	lwi	r3, r19, 4
	}
20011fec:	10330000 	addk	r1, r19, r0
20011ff0:	ea610008 	lwi	r19, r1, 8
20011ff4:	ea81000c 	lwi	r20, r1, 12
20011ff8:	30210010 	addik	r1, r1, 16
20011ffc:	b60f0008 	rtsd	r15, 8
20012000:	80000000 	or	r0, r0, r0

20012004 <cmd_neither>:
	
	static void cmd_neither() {
20012004:	3021ffd0 	addik	r1, r1, -48
20012008:	f9e10000 	swi	r15, r1, 0
2001200c:	fa610028 	swi	r19, r1, 40
20012010:	fa81002c 	swi	r20, r1, 44
20012014:	12610000 	addk	r19, r1, r0
20012018:	96808000 	mfs	r20, rpc
2001201c:	b000dffe 	imm	-8194
20012020:	3294f944 	addik	r20, r20, -1724
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20012024:	b0000000 	imm	0
20012028:	e8740120 	lwi	r3, r20, 288
2001202c:	e8630000 	lwi	r3, r3, 0
20012030:	a46301ff 	andi	r3, r3, 511
20012034:	f873001c 	swi	r3, r19, 28
		i32 index_aligned_halfpel = index_halfpel % SIZE_halfpel;
20012038:	b0000000 	imm	0
2001203c:	e8740130 	lwi	r3, r20, 304
20012040:	e8630000 	lwi	r3, r3, 0
20012044:	a46301ff 	andi	r3, r3, 511
20012048:	f8730020 	swi	r3, r19, 32
	
		i16 cmd;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001204c:	b0000000 	imm	0
20012050:	e8740104 	lwi	r3, r20, 260
20012054:	e8630000 	lwi	r3, r3, 0
20012058:	e8830004 	lwi	r4, r3, 4
2001205c:	b0000000 	imm	0
20012060:	e8740120 	lwi	r3, r20, 288
20012064:	e8630000 	lwi	r3, r3, 0
20012068:	a46301ff 	andi	r3, r3, 511
2001206c:	10631800 	addk	r3, r3, r3
20012070:	10641800 	addk	r3, r4, r3
20012074:	e4630000 	lhui	r3, r3, 0
20012078:	f4730024 	shi	r3, r19, 36
		mvx = 0;
2001207c:	b0000000 	imm	0
20012080:	e8740174 	lwi	r3, r20, 372
20012084:	f4030000 	shi	r0, r3, 0
		mvy = 0;
20012088:	b0000000 	imm	0
2001208c:	e8740178 	lwi	r3, r20, 376
20012090:	f4030000 	shi	r0, r3, 0
		tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel] = 0;
20012094:	b0000000 	imm	0
20012098:	e8740114 	lwi	r3, r20, 276
2001209c:	e8630000 	lwi	r3, r3, 0
200120a0:	e8830004 	lwi	r4, r3, 4
200120a4:	b0000000 	imm	0
200120a8:	e8740130 	lwi	r3, r20, 304
200120ac:	e8630000 	lwi	r3, r3, 0
200120b0:	a46301ff 	andi	r3, r3, 511
200120b4:	10641800 	addk	r3, r4, r3
200120b8:	f0030000 	sbi	r0, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
200120bc:	b0000000 	imm	0
200120c0:	e8740120 	lwi	r3, r20, 288
200120c4:	e8630000 	lwi	r3, r3, 0
200120c8:	30830001 	addik	r4, r3, 1
200120cc:	b0000000 	imm	0
200120d0:	e8740120 	lwi	r3, r20, 288
200120d4:	f8830000 	swi	r4, r3, 0
		index_halfpel += 1;
200120d8:	b0000000 	imm	0
200120dc:	e8740130 	lwi	r3, r20, 304
200120e0:	e8630000 	lwi	r3, r3, 0
200120e4:	30830001 	addik	r4, r3, 1
200120e8:	b0000000 	imm	0
200120ec:	e8740130 	lwi	r3, r20, 304
200120f0:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
200120f4:	b0000000 	imm	0
200120f8:	e87401ac 	lwi	r3, r20, 428
200120fc:	99fc1800 	brald	r15, r3
20012100:	80000000 	or	r0, r0, r0
		write_end_halfpel();
20012104:	b0000000 	imm	0
20012108:	e87401bc 	lwi	r3, r20, 444
2001210c:	99fc1800 	brald	r15, r3
20012110:	80000000 	or	r0, r0, r0
	}
20012114:	e9e10000 	lwi	r15, r1, 0
20012118:	10330000 	addk	r1, r19, r0
2001211c:	ea610028 	lwi	r19, r1, 40
20012120:	ea81002c 	lwi	r20, r1, 44
20012124:	30210030 	addik	r1, r1, 48
20012128:	b60f0008 	rtsd	r15, 8
2001212c:	80000000 	or	r0, r0, r0

20012130 <isSchedulable_read_fb_Y>:
	static i32 isSchedulable_read_fb_Y() {
20012130:	3021ffe4 	addik	r1, r1, -28
20012134:	fa610014 	swi	r19, r1, 20
20012138:	fa810018 	swi	r20, r1, 24
2001213c:	12610000 	addk	r19, r1, r0
20012140:	96808000 	mfs	r20, rpc
20012144:	b000dffe 	imm	-8194
20012148:	3294f81c 	addik	r20, r20, -2020
		i32 result;
		i32 local_outstanding_writes;
		i32 local_max_outstanding_writes;
		i32 local_comp_so_far;
	
		local_outstanding_writes = outstanding_writes;
2001214c:	b0000000 	imm	0
20012150:	e8740184 	lwi	r3, r20, 388
20012154:	e8630000 	lwi	r3, r3, 0
20012158:	f8730004 	swi	r3, r19, 4
		local_max_outstanding_writes = max_outstanding_writes;
2001215c:	b0000000 	imm	0
20012160:	e8740160 	lwi	r3, r20, 352
20012164:	e8630000 	lwi	r3, r3, 0
20012168:	f8730008 	swi	r3, r19, 8
		local_comp_so_far = comp_so_far;
2001216c:	b0000000 	imm	0
20012170:	e8740194 	lwi	r3, r20, 404
20012174:	e8630000 	lwi	r3, r3, 0
20012178:	f873000c 	swi	r3, r19, 12
		result = local_outstanding_writes < local_max_outstanding_writes && local_comp_so_far < 4;
2001217c:	e8930004 	lwi	r4, r19, 4
20012180:	e8730008 	lwi	r3, r19, 8
20012184:	16432001 	cmp	r18, r3, r4
20012188:	bcb2001c 	bgei	r18, 28		// 200121a4
2001218c:	e893000c 	lwi	r4, r19, 12
20012190:	30600003 	addik	r3, r0, 3
20012194:	16441801 	cmp	r18, r4, r3
20012198:	bc52000c 	blti	r18, 12		// 200121a4
2001219c:	30600001 	addik	r3, r0, 1
200121a0:	b8000008 	bri	8		// 200121a8
200121a4:	10600000 	addk	r3, r0, r0
200121a8:	f8730010 	swi	r3, r19, 16
		return result;
200121ac:	e8730010 	lwi	r3, r19, 16
	}
200121b0:	10330000 	addk	r1, r19, r0
200121b4:	ea610014 	lwi	r19, r1, 20
200121b8:	ea810018 	lwi	r20, r1, 24
200121bc:	3021001c 	addik	r1, r1, 28
200121c0:	b60f0008 	rtsd	r15, 8
200121c4:	80000000 	or	r0, r0, r0

200121c8 <read_fb_Y>:
	
	static void read_fb_Y() {
200121c8:	3021ff7c 	addik	r1, r1, -132
200121cc:	f9e10000 	swi	r15, r1, 0
200121d0:	fa61007c 	swi	r19, r1, 124
200121d4:	fa810080 	swi	r20, r1, 128
200121d8:	12610000 	addk	r19, r1, r0
200121dc:	96808000 	mfs	r20, rpc
200121e0:	b000dffe 	imm	-8194
200121e4:	3294f780 	addik	r20, r20, -2176
	
		// Compute aligned port indexes
		i32 index_aligned_RD = index_RD % SIZE_RD;
200121e8:	b0000000 	imm	0
200121ec:	e8740138 	lwi	r3, r20, 312
200121f0:	e8630000 	lwi	r3, r3, 0
200121f4:	a46301ff 	andi	r3, r3, 511
200121f8:	f873003c 	swi	r3, r19, 60
		i32 local_start_of_frame;
		i32 local_MAXW_IN_SAMPLES;
		i32 local_BUFFER_SIZE;
		i16 tmp_frameBuffer;
	
		local_mbx_read = mbx_read;
200121fc:	b0000000 	imm	0
20012200:	e874017c 	lwi	r3, r20, 380
20012204:	e8630000 	lwi	r3, r3, 0
20012208:	f8730040 	swi	r3, r19, 64
		local_SAMPLES_PER_MB = SAMPLES_PER_MB;
2001220c:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
20012210:	f8730044 	swi	r3, r19, 68
		local_comp_so_far = comp_so_far;
20012214:	b0000000 	imm	0
20012218:	e8740194 	lwi	r3, r20, 404
2001221c:	e8630000 	lwi	r3, r3, 0
20012220:	f8730048 	swi	r3, r19, 72
		local_mvx = mvx;
20012224:	b0000000 	imm	0
20012228:	e8740174 	lwi	r3, r20, 372
2001222c:	e4630000 	lhui	r3, r3, 0
20012230:	f473004c 	shi	r3, r19, 76
		x = local_mbx_read * local_SAMPLES_PER_MB + 8 * (local_comp_so_far & 1) + local_mvx;
20012234:	e8930040 	lwi	r4, r19, 64
20012238:	e8730044 	lwi	r3, r19, 68
2001223c:	40841800 	mul	r4, r4, r3
20012240:	e8730048 	lwi	r3, r19, 72
20012244:	a4630001 	andi	r3, r3, 1
20012248:	64630403 	bslli	r3, r3, 3
2001224c:	10841800 	addk	r4, r4, r3
20012250:	e473004c 	lhui	r3, r19, 76
20012254:	90630061 	sext16	r3, r3
20012258:	10641800 	addk	r3, r4, r3
2001225c:	f8730050 	swi	r3, r19, 80
		local_mby_read = mby_read;
20012260:	b0000000 	imm	0
20012264:	e8740180 	lwi	r3, r20, 384
20012268:	e8630000 	lwi	r3, r3, 0
2001226c:	f8730054 	swi	r3, r19, 84
		local_SAMPLES_PER_MB = SAMPLES_PER_MB;
20012270:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
20012274:	f8730044 	swi	r3, r19, 68
		local_comp_so_far = comp_so_far;
20012278:	b0000000 	imm	0
2001227c:	e8740194 	lwi	r3, r20, 404
20012280:	e8630000 	lwi	r3, r3, 0
20012284:	f8730048 	swi	r3, r19, 72
		local_mvy = mvy;
20012288:	b0000000 	imm	0
2001228c:	e8740178 	lwi	r3, r20, 376
20012290:	e4630000 	lhui	r3, r3, 0
20012294:	f4730058 	shi	r3, r19, 88
		y = local_mby_read * local_SAMPLES_PER_MB + 8 * (local_comp_so_far >> 1) + local_mvy;
20012298:	e8930054 	lwi	r4, r19, 84
2001229c:	e8730044 	lwi	r3, r19, 68
200122a0:	40841800 	mul	r4, r4, r3
200122a4:	e8730048 	lwi	r3, r19, 72
200122a8:	90630001 	sra	r3, r3
200122ac:	64630403 	bslli	r3, r3, 3
200122b0:	10841800 	addk	r4, r4, r3
200122b4:	e4730058 	lhui	r3, r19, 88
200122b8:	90630061 	sext16	r3, r3
200122bc:	10641800 	addk	r3, r4, r3
200122c0:	f873001c 	swi	r3, r19, 28
		clip_left = 0;
200122c4:	f8130020 	swi	r0, r19, 32
		clip_right = 0;
200122c8:	f8130024 	swi	r0, r19, 36
		clip_x = x;
200122cc:	e8730050 	lwi	r3, r19, 80
200122d0:	f8730028 	swi	r3, r19, 40
		if (y < 0) {
200122d4:	e873001c 	lwi	r3, r19, 28
200122d8:	bca3000c 	bgei	r3, 12		// 200122e4
			clip_y = 0;
200122dc:	f813002c 	swi	r0, r19, 44
200122e0:	b800004c 	bri	76		// 2001232c
		} else {
			local_vop_height_in_samples = vop_height_in_samples;
200122e4:	b0000000 	imm	0
200122e8:	e8740158 	lwi	r3, r20, 344
200122ec:	e8630000 	lwi	r3, r3, 0
200122f0:	f873005c 	swi	r3, r19, 92
			if (y < local_vop_height_in_samples) {
200122f4:	e893001c 	lwi	r4, r19, 28
200122f8:	e873005c 	lwi	r3, r19, 92
200122fc:	16432001 	cmp	r18, r3, r4
20012300:	bcb20010 	bgei	r18, 16		// 20012310
				clip_y = y;
20012304:	e873001c 	lwi	r3, r19, 28
20012308:	f873002c 	swi	r3, r19, 44
2001230c:	b8000020 	bri	32		// 2001232c
			} else {
				local_vop_height_in_samples = vop_height_in_samples;
20012310:	b0000000 	imm	0
20012314:	e8740158 	lwi	r3, r20, 344
20012318:	e8630000 	lwi	r3, r3, 0
2001231c:	f873005c 	swi	r3, r19, 92
				clip_y = local_vop_height_in_samples - 1;
20012320:	e873005c 	lwi	r3, r19, 92
20012324:	3063ffff 	addik	r3, r3, -1
20012328:	f873002c 	swi	r3, r19, 44
			}
		}
		if (x < 0) {
2001232c:	e8730050 	lwi	r3, r19, 80
20012330:	bca30034 	bgei	r3, 52		// 20012364
			clip_x = 0;
20012334:	f8130028 	swi	r0, r19, 40
			if (x < -9) {
20012338:	e8930050 	lwi	r4, r19, 80
2001233c:	3060fff7 	addik	r3, r0, -9
20012340:	16432001 	cmp	r18, r3, r4
20012344:	bcb20010 	bgei	r18, 16		// 20012354
				clip_left = 9;
20012348:	30600009 	addik	r3, r0, 9
2001234c:	f8730020 	swi	r3, r19, 32
20012350:	b80000a4 	bri	164		// 200123f4
			} else {
				clip_left = -x;
20012354:	e8730050 	lwi	r3, r19, 80
20012358:	14630000 	rsubk	r3, r3, r0
2001235c:	f8730020 	swi	r3, r19, 32
20012360:	b8000094 	bri	148		// 200123f4
			}
		} else {
			local_vop_width_in_samples = vop_width_in_samples;
20012364:	b0000000 	imm	0
20012368:	e8740154 	lwi	r3, r20, 340
2001236c:	e8630000 	lwi	r3, r3, 0
20012370:	f8730060 	swi	r3, r19, 96
			if (x + 9 > local_vop_width_in_samples) {
20012374:	e8730050 	lwi	r3, r19, 80
20012378:	30830009 	addik	r4, r3, 9
2001237c:	e8730060 	lwi	r3, r19, 96
20012380:	16441801 	cmp	r18, r4, r3
20012384:	bcb20070 	bgei	r18, 112		// 200123f4
				local_vop_width_in_samples = vop_width_in_samples;
20012388:	b0000000 	imm	0
2001238c:	e8740154 	lwi	r3, r20, 340
20012390:	e8630000 	lwi	r3, r3, 0
20012394:	f8730060 	swi	r3, r19, 96
				if (x >= local_vop_width_in_samples) {
20012398:	e8930050 	lwi	r4, r19, 80
2001239c:	e8730060 	lwi	r3, r19, 96
200123a0:	16432001 	cmp	r18, r3, r4
200123a4:	bc52002c 	blti	r18, 44		// 200123d0
					local_vop_width_in_samples = vop_width_in_samples;
200123a8:	b0000000 	imm	0
200123ac:	e8740154 	lwi	r3, r20, 340
200123b0:	e8630000 	lwi	r3, r3, 0
200123b4:	f8730060 	swi	r3, r19, 96
					clip_x = local_vop_width_in_samples - 1;
200123b8:	e8730060 	lwi	r3, r19, 96
200123bc:	3063ffff 	addik	r3, r3, -1
200123c0:	f8730028 	swi	r3, r19, 40
					clip_right = 8;
200123c4:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200123c8:	f8730024 	swi	r3, r19, 36
200123cc:	b8000028 	bri	40		// 200123f4
				} else {
					local_vop_width_in_samples = vop_width_in_samples;
200123d0:	b0000000 	imm	0
200123d4:	e8740154 	lwi	r3, r20, 340
200123d8:	e8630000 	lwi	r3, r3, 0
200123dc:	f8730060 	swi	r3, r19, 96
					clip_right = x + 9 - local_vop_width_in_samples;
200123e0:	e8730050 	lwi	r3, r19, 80
200123e4:	30830009 	addik	r4, r3, 9
200123e8:	e8730060 	lwi	r3, r19, 96
200123ec:	14632000 	rsubk	r3, r3, r4
200123f0:	f8730024 	swi	r3, r19, 36
				}
			}
		}
		local_start_of_frame = start_of_frame;
200123f4:	b0000000 	imm	0
200123f8:	e8740164 	lwi	r3, r20, 356
200123fc:	e8630000 	lwi	r3, r3, 0
20012400:	f8730064 	swi	r3, r19, 100
		local_MAXW_IN_SAMPLES = MAXW_IN_SAMPLES;
20012404:	306000c0 	addik	r3, r0, 192
20012408:	f8730068 	swi	r3, r19, 104
		start_of_row = local_start_of_frame + clip_y * local_MAXW_IN_SAMPLES + clip_x;
2001240c:	e893002c 	lwi	r4, r19, 44
20012410:	e8730068 	lwi	r3, r19, 104
20012414:	40841800 	mul	r4, r4, r3
20012418:	e8730064 	lwi	r3, r19, 100
2001241c:	10841800 	addk	r4, r4, r3
20012420:	e8730028 	lwi	r3, r19, 40
20012424:	10641800 	addk	r3, r4, r3
20012428:	f8730030 	swi	r3, r19, 48
		local_BUFFER_SIZE = BUFFER_SIZE;
2001242c:	b0000000 	imm	0
20012430:	30608400 	addik	r3, r0, -31744
20012434:	f873006c 	swi	r3, r19, 108
		if (start_of_row >= local_BUFFER_SIZE) {
20012438:	e8930030 	lwi	r4, r19, 48
2001243c:	e873006c 	lwi	r3, r19, 108
20012440:	16432001 	cmp	r18, r3, r4
20012444:	bc520020 	blti	r18, 32		// 20012464
			local_BUFFER_SIZE = BUFFER_SIZE;
20012448:	b0000000 	imm	0
2001244c:	30608400 	addik	r3, r0, -31744
20012450:	f873006c 	swi	r3, r19, 108
			start_of_row = start_of_row - local_BUFFER_SIZE;
20012454:	e8930030 	lwi	r4, r19, 48
20012458:	e873006c 	lwi	r3, r19, 108
2001245c:	14632000 	rsubk	r3, r3, r4
20012460:	f8730030 	swi	r3, r19, 48
		}
		i = 0;
20012464:	f8130038 	swi	r0, r19, 56
		while (i < 81) {
20012468:	b8000258 	bri	600		// 200126c0
			if (clip_left != 0) {
2001246c:	e8730020 	lwi	r3, r19, 32
20012470:	bc030090 	beqi	r3, 144		// 20012500
				end_i = i + clip_left;
20012474:	e8930038 	lwi	r4, r19, 56
20012478:	e8730020 	lwi	r3, r19, 32
2001247c:	10641800 	addk	r3, r4, r3
20012480:	f8730070 	swi	r3, r19, 112
				temp = frameBuffer[start_of_row];
20012484:	b0000000 	imm	0
20012488:	e8940140 	lwi	r4, r20, 320
2001248c:	e8730030 	lwi	r3, r19, 48
20012490:	10631800 	addk	r3, r3, r3
20012494:	10641800 	addk	r3, r4, r3
20012498:	e4630000 	lhui	r3, r3, 0
2001249c:	90630061 	sext16	r3, r3
200124a0:	f8730074 	swi	r3, r19, 116
				while (i < end_i) {
200124a4:	b800004c 	bri	76		// 200124f0
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
200124a8:	b0000000 	imm	0
200124ac:	e8740110 	lwi	r3, r20, 272
200124b0:	e8630000 	lwi	r3, r3, 0
200124b4:	e8830004 	lwi	r4, r3, 4
200124b8:	b0000000 	imm	0
200124bc:	e8740138 	lwi	r3, r20, 312
200124c0:	e8a30000 	lwi	r5, r3, 0
200124c4:	e8730038 	lwi	r3, r19, 56
200124c8:	10651800 	addk	r3, r5, r3
200124cc:	a46301ff 	andi	r3, r3, 511
200124d0:	10631800 	addk	r3, r3, r3
200124d4:	10641800 	addk	r3, r4, r3
200124d8:	e8930074 	lwi	r4, r19, 116
200124dc:	90840061 	sext16	r4, r4
200124e0:	f4830000 	shi	r4, r3, 0
					i = i + 1;
200124e4:	e8730038 	lwi	r3, r19, 56
200124e8:	30630001 	addik	r3, r3, 1
200124ec:	f8730038 	swi	r3, r19, 56
		i = 0;
		while (i < 81) {
			if (clip_left != 0) {
				end_i = i + clip_left;
				temp = frameBuffer[start_of_row];
				while (i < end_i) {
200124f0:	e8930038 	lwi	r4, r19, 56
200124f4:	e8730070 	lwi	r3, r19, 112
200124f8:	16432001 	cmp	r18, r3, r4
200124fc:	bc52ffac 	blti	r18, -84		// 200124a8
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
					i = i + 1;
				}
			}
			addr = start_of_row;
20012500:	e8730030 	lwi	r3, r19, 48
20012504:	f8730034 	swi	r3, r19, 52
			end_i = i + 9 - clip_left - clip_right;
20012508:	e8730038 	lwi	r3, r19, 56
2001250c:	30830009 	addik	r4, r3, 9
20012510:	e8730020 	lwi	r3, r19, 32
20012514:	14832000 	rsubk	r4, r3, r4
20012518:	e8730024 	lwi	r3, r19, 36
2001251c:	14632000 	rsubk	r3, r3, r4
20012520:	f8730070 	swi	r3, r19, 112
			while (i < end_i) {
20012524:	b8000070 	bri	112		// 20012594
				tmp_frameBuffer = frameBuffer[addr];
20012528:	b0000000 	imm	0
2001252c:	e8940140 	lwi	r4, r20, 320
20012530:	e8730034 	lwi	r3, r19, 52
20012534:	10631800 	addk	r3, r3, r3
20012538:	10641800 	addk	r3, r4, r3
2001253c:	e4630000 	lhui	r3, r3, 0
20012540:	f4730078 	shi	r3, r19, 120
				tokens_RD[(index_RD + (i)) % SIZE_RD] = tmp_frameBuffer;
20012544:	b0000000 	imm	0
20012548:	e8740110 	lwi	r3, r20, 272
2001254c:	e8630000 	lwi	r3, r3, 0
20012550:	e8830004 	lwi	r4, r3, 4
20012554:	b0000000 	imm	0
20012558:	e8740138 	lwi	r3, r20, 312
2001255c:	e8a30000 	lwi	r5, r3, 0
20012560:	e8730038 	lwi	r3, r19, 56
20012564:	10651800 	addk	r3, r5, r3
20012568:	a46301ff 	andi	r3, r3, 511
2001256c:	10631800 	addk	r3, r3, r3
20012570:	10641800 	addk	r3, r4, r3
20012574:	e4930078 	lhui	r4, r19, 120
20012578:	f4830000 	shi	r4, r3, 0
				i = i + 1;
2001257c:	e8730038 	lwi	r3, r19, 56
20012580:	30630001 	addik	r3, r3, 1
20012584:	f8730038 	swi	r3, r19, 56
				addr = addr + 1;
20012588:	e8730034 	lwi	r3, r19, 52
2001258c:	30630001 	addik	r3, r3, 1
20012590:	f8730034 	swi	r3, r19, 52
					i = i + 1;
				}
			}
			addr = start_of_row;
			end_i = i + 9 - clip_left - clip_right;
			while (i < end_i) {
20012594:	e8930038 	lwi	r4, r19, 56
20012598:	e8730070 	lwi	r3, r19, 112
2001259c:	16432001 	cmp	r18, r3, r4
200125a0:	bc52ff88 	blti	r18, -120		// 20012528
				tmp_frameBuffer = frameBuffer[addr];
				tokens_RD[(index_RD + (i)) % SIZE_RD] = tmp_frameBuffer;
				i = i + 1;
				addr = addr + 1;
			}
			if (clip_right != 0) {
200125a4:	e8730024 	lwi	r3, r19, 36
200125a8:	bc030094 	beqi	r3, 148		// 2001263c
				end_i = i + clip_right;
200125ac:	e8930038 	lwi	r4, r19, 56
200125b0:	e8730024 	lwi	r3, r19, 36
200125b4:	10641800 	addk	r3, r4, r3
200125b8:	f8730070 	swi	r3, r19, 112
				temp = frameBuffer[addr - 1];
200125bc:	e8730034 	lwi	r3, r19, 52
200125c0:	3063ffff 	addik	r3, r3, -1
200125c4:	b0000000 	imm	0
200125c8:	e8940140 	lwi	r4, r20, 320
200125cc:	10631800 	addk	r3, r3, r3
200125d0:	10641800 	addk	r3, r4, r3
200125d4:	e4630000 	lhui	r3, r3, 0
200125d8:	90630061 	sext16	r3, r3
200125dc:	f8730074 	swi	r3, r19, 116
				while (i < end_i) {
200125e0:	b800004c 	bri	76		// 2001262c
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
200125e4:	b0000000 	imm	0
200125e8:	e8740110 	lwi	r3, r20, 272
200125ec:	e8630000 	lwi	r3, r3, 0
200125f0:	e8830004 	lwi	r4, r3, 4
200125f4:	b0000000 	imm	0
200125f8:	e8740138 	lwi	r3, r20, 312
200125fc:	e8a30000 	lwi	r5, r3, 0
20012600:	e8730038 	lwi	r3, r19, 56
20012604:	10651800 	addk	r3, r5, r3
20012608:	a46301ff 	andi	r3, r3, 511
2001260c:	10631800 	addk	r3, r3, r3
20012610:	10641800 	addk	r3, r4, r3
20012614:	e8930074 	lwi	r4, r19, 116
20012618:	90840061 	sext16	r4, r4
2001261c:	f4830000 	shi	r4, r3, 0
					i = i + 1;
20012620:	e8730038 	lwi	r3, r19, 56
20012624:	30630001 	addik	r3, r3, 1
20012628:	f8730038 	swi	r3, r19, 56
				addr = addr + 1;
			}
			if (clip_right != 0) {
				end_i = i + clip_right;
				temp = frameBuffer[addr - 1];
				while (i < end_i) {
2001262c:	e8930038 	lwi	r4, r19, 56
20012630:	e8730070 	lwi	r3, r19, 112
20012634:	16432001 	cmp	r18, r3, r4
20012638:	bc52ffac 	blti	r18, -84		// 200125e4
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
					i = i + 1;
				}
			}
			y = y + 1;
2001263c:	e873001c 	lwi	r3, r19, 28
20012640:	30630001 	addik	r3, r3, 1
20012644:	f873001c 	swi	r3, r19, 28
			local_vop_height_in_samples = vop_height_in_samples;
20012648:	b0000000 	imm	0
2001264c:	e8740158 	lwi	r3, r20, 344
20012650:	e8630000 	lwi	r3, r3, 0
20012654:	f873005c 	swi	r3, r19, 92
			if (y > 0 && y < local_vop_height_in_samples) {
20012658:	e873001c 	lwi	r3, r19, 28
2001265c:	bc630064 	blei	r3, 100		// 200126c0
20012660:	e893001c 	lwi	r4, r19, 28
20012664:	e873005c 	lwi	r3, r19, 92
20012668:	16432001 	cmp	r18, r3, r4
2001266c:	bcb20054 	bgei	r18, 84		// 200126c0
				local_MAXW_IN_SAMPLES = MAXW_IN_SAMPLES;
20012670:	306000c0 	addik	r3, r0, 192
20012674:	f8730068 	swi	r3, r19, 104
				start_of_row = start_of_row + local_MAXW_IN_SAMPLES;
20012678:	e8930030 	lwi	r4, r19, 48
2001267c:	e8730068 	lwi	r3, r19, 104
20012680:	10641800 	addk	r3, r4, r3
20012684:	f8730030 	swi	r3, r19, 48
				local_BUFFER_SIZE = BUFFER_SIZE;
20012688:	b0000000 	imm	0
2001268c:	30608400 	addik	r3, r0, -31744
20012690:	f873006c 	swi	r3, r19, 108
				if (start_of_row >= local_BUFFER_SIZE) {
20012694:	e8930030 	lwi	r4, r19, 48
20012698:	e873006c 	lwi	r3, r19, 108
2001269c:	16432001 	cmp	r18, r3, r4
200126a0:	bc520020 	blti	r18, 32		// 200126c0
					local_BUFFER_SIZE = BUFFER_SIZE;
200126a4:	b0000000 	imm	0
200126a8:	30608400 	addik	r3, r0, -31744
200126ac:	f873006c 	swi	r3, r19, 108
					start_of_row = start_of_row - local_BUFFER_SIZE;
200126b0:	e8930030 	lwi	r4, r19, 48
200126b4:	e873006c 	lwi	r3, r19, 108
200126b8:	14632000 	rsubk	r3, r3, r4
200126bc:	f8730030 	swi	r3, r19, 48
		if (start_of_row >= local_BUFFER_SIZE) {
			local_BUFFER_SIZE = BUFFER_SIZE;
			start_of_row = start_of_row - local_BUFFER_SIZE;
		}
		i = 0;
		while (i < 81) {
200126c0:	e8930038 	lwi	r4, r19, 56
200126c4:	30600050 	addik	r3, r0, 80	// 50 <_start1>
200126c8:	16441801 	cmp	r18, r4, r3
200126cc:	bcb2fda0 	bgei	r18, -608		// 2001246c
					local_BUFFER_SIZE = BUFFER_SIZE;
					start_of_row = start_of_row - local_BUFFER_SIZE;
				}
			}
		}
		advance_block();
200126d0:	b0000000 	imm	0
200126d4:	e87401c8 	lwi	r3, r20, 456
200126d8:	99fc1800 	brald	r15, r3
200126dc:	80000000 	or	r0, r0, r0
	
		// Update ports indexes
		index_RD += 81;
200126e0:	b0000000 	imm	0
200126e4:	e8740138 	lwi	r3, r20, 312
200126e8:	e8630000 	lwi	r3, r3, 0
200126ec:	30830051 	addik	r4, r3, 81
200126f0:	b0000000 	imm	0
200126f4:	e8740138 	lwi	r3, r20, 312
200126f8:	f8830000 	swi	r4, r3, 0
		
		write_end_RD();
200126fc:	b0000000 	imm	0
20012700:	e87401c4 	lwi	r3, r20, 452
20012704:	99fc1800 	brald	r15, r3
20012708:	80000000 	or	r0, r0, r0
	}
2001270c:	e9e10000 	lwi	r15, r1, 0
20012710:	10330000 	addk	r1, r19, r0
20012714:	ea61007c 	lwi	r19, r1, 124
20012718:	ea810080 	lwi	r20, r1, 128
2001271c:	30210084 	addik	r1, r1, 132
20012720:	b60f0008 	rtsd	r15, 8
20012724:	80000000 	or	r0, r0, r0

20012728 <isSchedulable_read_fb_U>:
	static i32 isSchedulable_read_fb_U() {
20012728:	3021ffe4 	addik	r1, r1, -28
2001272c:	fa610014 	swi	r19, r1, 20
20012730:	fa810018 	swi	r20, r1, 24
20012734:	12610000 	addk	r19, r1, r0
20012738:	96808000 	mfs	r20, rpc
2001273c:	b000dffe 	imm	-8194
20012740:	3294f224 	addik	r20, r20, -3548
		i32 result;
		i32 local_outstanding_writes;
		i32 local_max_outstanding_writes;
		i32 local_comp_so_far;
	
		local_outstanding_writes = outstanding_writes;
20012744:	b0000000 	imm	0
20012748:	e8740184 	lwi	r3, r20, 388
2001274c:	e8630000 	lwi	r3, r3, 0
20012750:	f8730004 	swi	r3, r19, 4
		local_max_outstanding_writes = max_outstanding_writes;
20012754:	b0000000 	imm	0
20012758:	e8740160 	lwi	r3, r20, 352
2001275c:	e8630000 	lwi	r3, r3, 0
20012760:	f8730008 	swi	r3, r19, 8
		local_comp_so_far = comp_so_far;
20012764:	b0000000 	imm	0
20012768:	e8740194 	lwi	r3, r20, 404
2001276c:	e8630000 	lwi	r3, r3, 0
20012770:	f873000c 	swi	r3, r19, 12
		result = local_outstanding_writes < local_max_outstanding_writes && local_comp_so_far == 4;
20012774:	e8930004 	lwi	r4, r19, 4
20012778:	e8730008 	lwi	r3, r19, 8
2001277c:	16432001 	cmp	r18, r3, r4
20012780:	bcb20018 	bgei	r18, 24		// 20012798
20012784:	e873000c 	lwi	r3, r19, 12
20012788:	a8630004 	xori	r3, r3, 4
2001278c:	bc23000c 	bnei	r3, 12		// 20012798
20012790:	30600001 	addik	r3, r0, 1
20012794:	b8000008 	bri	8		// 2001279c
20012798:	10600000 	addk	r3, r0, r0
2001279c:	f8730010 	swi	r3, r19, 16
		return result;
200127a0:	e8730010 	lwi	r3, r19, 16
	}
200127a4:	10330000 	addk	r1, r19, r0
200127a8:	ea610014 	lwi	r19, r1, 20
200127ac:	ea810018 	lwi	r20, r1, 24
200127b0:	3021001c 	addik	r1, r1, 28
200127b4:	b60f0008 	rtsd	r15, 8
200127b8:	80000000 	or	r0, r0, r0

200127bc <read_fb_U>:
	
	static void read_fb_U() {
200127bc:	3021ff80 	addik	r1, r1, -128
200127c0:	f9e10000 	swi	r15, r1, 0
200127c4:	fa610078 	swi	r19, r1, 120
200127c8:	fa81007c 	swi	r20, r1, 124
200127cc:	12610000 	addk	r19, r1, r0
200127d0:	96808000 	mfs	r20, rpc
200127d4:	b000dffe 	imm	-8194
200127d8:	3294f18c 	addik	r20, r20, -3700
	
		// Compute aligned port indexes
		i32 index_aligned_RD = index_RD % SIZE_RD;
200127dc:	b0000000 	imm	0
200127e0:	e8740138 	lwi	r3, r20, 312
200127e4:	e8630000 	lwi	r3, r3, 0
200127e8:	a46301ff 	andi	r3, r3, 511
200127ec:	f873003c 	swi	r3, r19, 60
		i32 local_start_of_frame_U;
		i32 local_MAXW_IN_SAMPLES_UV;
		i32 local_BUFFER_SIZE_UV;
		i16 tmp_frameBuffer_U;
	
		local_mbx_read = mbx_read;
200127f0:	b0000000 	imm	0
200127f4:	e874017c 	lwi	r3, r20, 380
200127f8:	e8630000 	lwi	r3, r3, 0
200127fc:	f8730040 	swi	r3, r19, 64
		local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
20012800:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20012804:	f8730044 	swi	r3, r19, 68
		local_mvx = mvx;
20012808:	b0000000 	imm	0
2001280c:	e8740174 	lwi	r3, r20, 372
20012810:	e4630000 	lhui	r3, r3, 0
20012814:	f4730048 	shi	r3, r19, 72
		x = local_mbx_read * local_SAMPLES_PER_MB_UV + local_mvx;
20012818:	e8930040 	lwi	r4, r19, 64
2001281c:	e8730044 	lwi	r3, r19, 68
20012820:	40841800 	mul	r4, r4, r3
20012824:	e4730048 	lhui	r3, r19, 72
20012828:	90630061 	sext16	r3, r3
2001282c:	10641800 	addk	r3, r4, r3
20012830:	f873004c 	swi	r3, r19, 76
		local_mby_read = mby_read;
20012834:	b0000000 	imm	0
20012838:	e8740180 	lwi	r3, r20, 384
2001283c:	e8630000 	lwi	r3, r3, 0
20012840:	f8730050 	swi	r3, r19, 80
		local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
20012844:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20012848:	f8730044 	swi	r3, r19, 68
		local_mvy = mvy;
2001284c:	b0000000 	imm	0
20012850:	e8740178 	lwi	r3, r20, 376
20012854:	e4630000 	lhui	r3, r3, 0
20012858:	f4730054 	shi	r3, r19, 84
		y = local_mby_read * local_SAMPLES_PER_MB_UV + local_mvy;
2001285c:	e8930050 	lwi	r4, r19, 80
20012860:	e8730044 	lwi	r3, r19, 68
20012864:	40841800 	mul	r4, r4, r3
20012868:	e4730054 	lhui	r3, r19, 84
2001286c:	90630061 	sext16	r3, r3
20012870:	10641800 	addk	r3, r4, r3
20012874:	f873001c 	swi	r3, r19, 28
		clip_left = 0;
20012878:	f8130020 	swi	r0, r19, 32
		clip_right = 0;
2001287c:	f8130024 	swi	r0, r19, 36
		clip_x = x;
20012880:	e873004c 	lwi	r3, r19, 76
20012884:	f8730028 	swi	r3, r19, 40
		if (y < 0) {
20012888:	e873001c 	lwi	r3, r19, 28
2001288c:	bca3000c 	bgei	r3, 12		// 20012898
			clip_y = 0;
20012890:	f813002c 	swi	r0, r19, 44
20012894:	b800004c 	bri	76		// 200128e0
		} else {
			local_vop_height_in_samples_U = vop_height_in_samples_U;
20012898:	b0000000 	imm	0
2001289c:	e874016c 	lwi	r3, r20, 364
200128a0:	e8630000 	lwi	r3, r3, 0
200128a4:	f8730058 	swi	r3, r19, 88
			if (y < local_vop_height_in_samples_U) {
200128a8:	e893001c 	lwi	r4, r19, 28
200128ac:	e8730058 	lwi	r3, r19, 88
200128b0:	16432001 	cmp	r18, r3, r4
200128b4:	bcb20010 	bgei	r18, 16		// 200128c4
				clip_y = y;
200128b8:	e873001c 	lwi	r3, r19, 28
200128bc:	f873002c 	swi	r3, r19, 44
200128c0:	b8000020 	bri	32		// 200128e0
			} else {
				local_vop_height_in_samples_U = vop_height_in_samples_U;
200128c4:	b0000000 	imm	0
200128c8:	e874016c 	lwi	r3, r20, 364
200128cc:	e8630000 	lwi	r3, r3, 0
200128d0:	f8730058 	swi	r3, r19, 88
				clip_y = local_vop_height_in_samples_U - 1;
200128d4:	e8730058 	lwi	r3, r19, 88
200128d8:	3063ffff 	addik	r3, r3, -1
200128dc:	f873002c 	swi	r3, r19, 44
			}
		}
		if (x < 0) {
200128e0:	e873004c 	lwi	r3, r19, 76
200128e4:	bca30034 	bgei	r3, 52		// 20012918
			clip_x = 0;
200128e8:	f8130028 	swi	r0, r19, 40
			if (x < -9) {
200128ec:	e893004c 	lwi	r4, r19, 76
200128f0:	3060fff7 	addik	r3, r0, -9
200128f4:	16432001 	cmp	r18, r3, r4
200128f8:	bcb20010 	bgei	r18, 16		// 20012908
				clip_left = 9;
200128fc:	30600009 	addik	r3, r0, 9
20012900:	f8730020 	swi	r3, r19, 32
20012904:	b80000a4 	bri	164		// 200129a8
			} else {
				clip_left = -x;
20012908:	e873004c 	lwi	r3, r19, 76
2001290c:	14630000 	rsubk	r3, r3, r0
20012910:	f8730020 	swi	r3, r19, 32
20012914:	b8000094 	bri	148		// 200129a8
			}
		} else {
			local_vop_width_in_samples_U = vop_width_in_samples_U;
20012918:	b0000000 	imm	0
2001291c:	e8740168 	lwi	r3, r20, 360
20012920:	e8630000 	lwi	r3, r3, 0
20012924:	f873005c 	swi	r3, r19, 92
			if (x + 9 > local_vop_width_in_samples_U) {
20012928:	e873004c 	lwi	r3, r19, 76
2001292c:	30830009 	addik	r4, r3, 9
20012930:	e873005c 	lwi	r3, r19, 92
20012934:	16441801 	cmp	r18, r4, r3
20012938:	bcb20070 	bgei	r18, 112		// 200129a8
				local_vop_width_in_samples_U = vop_width_in_samples_U;
2001293c:	b0000000 	imm	0
20012940:	e8740168 	lwi	r3, r20, 360
20012944:	e8630000 	lwi	r3, r3, 0
20012948:	f873005c 	swi	r3, r19, 92
				if (x >= local_vop_width_in_samples_U) {
2001294c:	e893004c 	lwi	r4, r19, 76
20012950:	e873005c 	lwi	r3, r19, 92
20012954:	16432001 	cmp	r18, r3, r4
20012958:	bc52002c 	blti	r18, 44		// 20012984
					local_vop_width_in_samples_U = vop_width_in_samples_U;
2001295c:	b0000000 	imm	0
20012960:	e8740168 	lwi	r3, r20, 360
20012964:	e8630000 	lwi	r3, r3, 0
20012968:	f873005c 	swi	r3, r19, 92
					clip_x = local_vop_width_in_samples_U - 1;
2001296c:	e873005c 	lwi	r3, r19, 92
20012970:	3063ffff 	addik	r3, r3, -1
20012974:	f8730028 	swi	r3, r19, 40
					clip_right = 8;
20012978:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2001297c:	f8730024 	swi	r3, r19, 36
20012980:	b8000028 	bri	40		// 200129a8
				} else {
					local_vop_width_in_samples_U = vop_width_in_samples_U;
20012984:	b0000000 	imm	0
20012988:	e8740168 	lwi	r3, r20, 360
2001298c:	e8630000 	lwi	r3, r3, 0
20012990:	f873005c 	swi	r3, r19, 92
					clip_right = x + 9 - local_vop_width_in_samples_U;
20012994:	e873004c 	lwi	r3, r19, 76
20012998:	30830009 	addik	r4, r3, 9
2001299c:	e873005c 	lwi	r3, r19, 92
200129a0:	14632000 	rsubk	r3, r3, r4
200129a4:	f8730024 	swi	r3, r19, 36
				}
			}
		}
		local_start_of_frame_U = start_of_frame_U;
200129a8:	b0000000 	imm	0
200129ac:	e8740170 	lwi	r3, r20, 368
200129b0:	e8630000 	lwi	r3, r3, 0
200129b4:	f8730060 	swi	r3, r19, 96
		local_MAXW_IN_SAMPLES_UV = MAXW_IN_SAMPLES_UV;
200129b8:	30600060 	addik	r3, r0, 96
200129bc:	f8730064 	swi	r3, r19, 100
		start_of_row = local_start_of_frame_U + clip_y * local_MAXW_IN_SAMPLES_UV + clip_x;
200129c0:	e893002c 	lwi	r4, r19, 44
200129c4:	e8730064 	lwi	r3, r19, 100
200129c8:	40841800 	mul	r4, r4, r3
200129cc:	e8730060 	lwi	r3, r19, 96
200129d0:	10841800 	addk	r4, r4, r3
200129d4:	e8730028 	lwi	r3, r19, 40
200129d8:	10641800 	addk	r3, r4, r3
200129dc:	f8730030 	swi	r3, r19, 48
		local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
200129e0:	30602100 	addik	r3, r0, 8448
200129e4:	f8730068 	swi	r3, r19, 104
		if (start_of_row >= local_BUFFER_SIZE_UV) {
200129e8:	e8930030 	lwi	r4, r19, 48
200129ec:	e8730068 	lwi	r3, r19, 104
200129f0:	16432001 	cmp	r18, r3, r4
200129f4:	bc52001c 	blti	r18, 28		// 20012a10
			local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
200129f8:	30602100 	addik	r3, r0, 8448
200129fc:	f8730068 	swi	r3, r19, 104
			start_of_row = start_of_row - local_BUFFER_SIZE_UV;
20012a00:	e8930030 	lwi	r4, r19, 48
20012a04:	e8730068 	lwi	r3, r19, 104
20012a08:	14632000 	rsubk	r3, r3, r4
20012a0c:	f8730030 	swi	r3, r19, 48
		}
		i = 0;
20012a10:	f8130038 	swi	r0, r19, 56
		while (i < 81) {
20012a14:	b8000250 	bri	592		// 20012c64
			if (clip_left != 0) {
20012a18:	e8730020 	lwi	r3, r19, 32
20012a1c:	bc030090 	beqi	r3, 144		// 20012aac
				end_i = i + clip_left;
20012a20:	e8930038 	lwi	r4, r19, 56
20012a24:	e8730020 	lwi	r3, r19, 32
20012a28:	10641800 	addk	r3, r4, r3
20012a2c:	f873006c 	swi	r3, r19, 108
				temp = frameBuffer_U[start_of_row];
20012a30:	b0000000 	imm	0
20012a34:	e8940144 	lwi	r4, r20, 324
20012a38:	e8730030 	lwi	r3, r19, 48
20012a3c:	10631800 	addk	r3, r3, r3
20012a40:	10641800 	addk	r3, r4, r3
20012a44:	e4630000 	lhui	r3, r3, 0
20012a48:	90630061 	sext16	r3, r3
20012a4c:	f8730070 	swi	r3, r19, 112
				while (i < end_i) {
20012a50:	b800004c 	bri	76		// 20012a9c
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
20012a54:	b0000000 	imm	0
20012a58:	e8740110 	lwi	r3, r20, 272
20012a5c:	e8630000 	lwi	r3, r3, 0
20012a60:	e8830004 	lwi	r4, r3, 4
20012a64:	b0000000 	imm	0
20012a68:	e8740138 	lwi	r3, r20, 312
20012a6c:	e8a30000 	lwi	r5, r3, 0
20012a70:	e8730038 	lwi	r3, r19, 56
20012a74:	10651800 	addk	r3, r5, r3
20012a78:	a46301ff 	andi	r3, r3, 511
20012a7c:	10631800 	addk	r3, r3, r3
20012a80:	10641800 	addk	r3, r4, r3
20012a84:	e8930070 	lwi	r4, r19, 112
20012a88:	90840061 	sext16	r4, r4
20012a8c:	f4830000 	shi	r4, r3, 0
					i = i + 1;
20012a90:	e8730038 	lwi	r3, r19, 56
20012a94:	30630001 	addik	r3, r3, 1
20012a98:	f8730038 	swi	r3, r19, 56
		i = 0;
		while (i < 81) {
			if (clip_left != 0) {
				end_i = i + clip_left;
				temp = frameBuffer_U[start_of_row];
				while (i < end_i) {
20012a9c:	e8930038 	lwi	r4, r19, 56
20012aa0:	e873006c 	lwi	r3, r19, 108
20012aa4:	16432001 	cmp	r18, r3, r4
20012aa8:	bc52ffac 	blti	r18, -84		// 20012a54
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
					i = i + 1;
				}
			}
			addr = start_of_row;
20012aac:	e8730030 	lwi	r3, r19, 48
20012ab0:	f8730034 	swi	r3, r19, 52
			end_i = i + 9 - clip_left - clip_right;
20012ab4:	e8730038 	lwi	r3, r19, 56
20012ab8:	30830009 	addik	r4, r3, 9
20012abc:	e8730020 	lwi	r3, r19, 32
20012ac0:	14832000 	rsubk	r4, r3, r4
20012ac4:	e8730024 	lwi	r3, r19, 36
20012ac8:	14632000 	rsubk	r3, r3, r4
20012acc:	f873006c 	swi	r3, r19, 108
			while (i < end_i) {
20012ad0:	b8000070 	bri	112		// 20012b40
				tmp_frameBuffer_U = frameBuffer_U[addr];
20012ad4:	b0000000 	imm	0
20012ad8:	e8940144 	lwi	r4, r20, 324
20012adc:	e8730034 	lwi	r3, r19, 52
20012ae0:	10631800 	addk	r3, r3, r3
20012ae4:	10641800 	addk	r3, r4, r3
20012ae8:	e4630000 	lhui	r3, r3, 0
20012aec:	f4730074 	shi	r3, r19, 116
				tokens_RD[(index_RD + (i)) % SIZE_RD] = tmp_frameBuffer_U;
20012af0:	b0000000 	imm	0
20012af4:	e8740110 	lwi	r3, r20, 272
20012af8:	e8630000 	lwi	r3, r3, 0
20012afc:	e8830004 	lwi	r4, r3, 4
20012b00:	b0000000 	imm	0
20012b04:	e8740138 	lwi	r3, r20, 312
20012b08:	e8a30000 	lwi	r5, r3, 0
20012b0c:	e8730038 	lwi	r3, r19, 56
20012b10:	10651800 	addk	r3, r5, r3
20012b14:	a46301ff 	andi	r3, r3, 511
20012b18:	10631800 	addk	r3, r3, r3
20012b1c:	10641800 	addk	r3, r4, r3
20012b20:	e4930074 	lhui	r4, r19, 116
20012b24:	f4830000 	shi	r4, r3, 0
				i = i + 1;
20012b28:	e8730038 	lwi	r3, r19, 56
20012b2c:	30630001 	addik	r3, r3, 1
20012b30:	f8730038 	swi	r3, r19, 56
				addr = addr + 1;
20012b34:	e8730034 	lwi	r3, r19, 52
20012b38:	30630001 	addik	r3, r3, 1
20012b3c:	f8730034 	swi	r3, r19, 52
					i = i + 1;
				}
			}
			addr = start_of_row;
			end_i = i + 9 - clip_left - clip_right;
			while (i < end_i) {
20012b40:	e8930038 	lwi	r4, r19, 56
20012b44:	e873006c 	lwi	r3, r19, 108
20012b48:	16432001 	cmp	r18, r3, r4
20012b4c:	bc52ff88 	blti	r18, -120		// 20012ad4
				tmp_frameBuffer_U = frameBuffer_U[addr];
				tokens_RD[(index_RD + (i)) % SIZE_RD] = tmp_frameBuffer_U;
				i = i + 1;
				addr = addr + 1;
			}
			if (clip_right != 0) {
20012b50:	e8730024 	lwi	r3, r19, 36
20012b54:	bc030094 	beqi	r3, 148		// 20012be8
				end_i = i + clip_right;
20012b58:	e8930038 	lwi	r4, r19, 56
20012b5c:	e8730024 	lwi	r3, r19, 36
20012b60:	10641800 	addk	r3, r4, r3
20012b64:	f873006c 	swi	r3, r19, 108
				temp = frameBuffer_U[addr - 1];
20012b68:	e8730034 	lwi	r3, r19, 52
20012b6c:	3063ffff 	addik	r3, r3, -1
20012b70:	b0000000 	imm	0
20012b74:	e8940144 	lwi	r4, r20, 324
20012b78:	10631800 	addk	r3, r3, r3
20012b7c:	10641800 	addk	r3, r4, r3
20012b80:	e4630000 	lhui	r3, r3, 0
20012b84:	90630061 	sext16	r3, r3
20012b88:	f8730070 	swi	r3, r19, 112
				while (i < end_i) {
20012b8c:	b800004c 	bri	76		// 20012bd8
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
20012b90:	b0000000 	imm	0
20012b94:	e8740110 	lwi	r3, r20, 272
20012b98:	e8630000 	lwi	r3, r3, 0
20012b9c:	e8830004 	lwi	r4, r3, 4
20012ba0:	b0000000 	imm	0
20012ba4:	e8740138 	lwi	r3, r20, 312
20012ba8:	e8a30000 	lwi	r5, r3, 0
20012bac:	e8730038 	lwi	r3, r19, 56
20012bb0:	10651800 	addk	r3, r5, r3
20012bb4:	a46301ff 	andi	r3, r3, 511
20012bb8:	10631800 	addk	r3, r3, r3
20012bbc:	10641800 	addk	r3, r4, r3
20012bc0:	e8930070 	lwi	r4, r19, 112
20012bc4:	90840061 	sext16	r4, r4
20012bc8:	f4830000 	shi	r4, r3, 0
					i = i + 1;
20012bcc:	e8730038 	lwi	r3, r19, 56
20012bd0:	30630001 	addik	r3, r3, 1
20012bd4:	f8730038 	swi	r3, r19, 56
				addr = addr + 1;
			}
			if (clip_right != 0) {
				end_i = i + clip_right;
				temp = frameBuffer_U[addr - 1];
				while (i < end_i) {
20012bd8:	e8930038 	lwi	r4, r19, 56
20012bdc:	e873006c 	lwi	r3, r19, 108
20012be0:	16432001 	cmp	r18, r3, r4
20012be4:	bc52ffac 	blti	r18, -84		// 20012b90
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
					i = i + 1;
				}
			}
			y = y + 1;
20012be8:	e873001c 	lwi	r3, r19, 28
20012bec:	30630001 	addik	r3, r3, 1
20012bf0:	f873001c 	swi	r3, r19, 28
			local_vop_height_in_samples_U = vop_height_in_samples_U;
20012bf4:	b0000000 	imm	0
20012bf8:	e874016c 	lwi	r3, r20, 364
20012bfc:	e8630000 	lwi	r3, r3, 0
20012c00:	f8730058 	swi	r3, r19, 88
			if (y > 0 && y < local_vop_height_in_samples_U) {
20012c04:	e873001c 	lwi	r3, r19, 28
20012c08:	bc63005c 	blei	r3, 92		// 20012c64
20012c0c:	e893001c 	lwi	r4, r19, 28
20012c10:	e8730058 	lwi	r3, r19, 88
20012c14:	16432001 	cmp	r18, r3, r4
20012c18:	bcb2004c 	bgei	r18, 76		// 20012c64
				local_MAXW_IN_SAMPLES_UV = MAXW_IN_SAMPLES_UV;
20012c1c:	30600060 	addik	r3, r0, 96
20012c20:	f8730064 	swi	r3, r19, 100
				start_of_row = start_of_row + local_MAXW_IN_SAMPLES_UV;
20012c24:	e8930030 	lwi	r4, r19, 48
20012c28:	e8730064 	lwi	r3, r19, 100
20012c2c:	10641800 	addk	r3, r4, r3
20012c30:	f8730030 	swi	r3, r19, 48
				local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
20012c34:	30602100 	addik	r3, r0, 8448
20012c38:	f8730068 	swi	r3, r19, 104
				if (start_of_row >= local_BUFFER_SIZE_UV) {
20012c3c:	e8930030 	lwi	r4, r19, 48
20012c40:	e8730068 	lwi	r3, r19, 104
20012c44:	16432001 	cmp	r18, r3, r4
20012c48:	bc52001c 	blti	r18, 28		// 20012c64
					local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
20012c4c:	30602100 	addik	r3, r0, 8448
20012c50:	f8730068 	swi	r3, r19, 104
					start_of_row = start_of_row - local_BUFFER_SIZE_UV;
20012c54:	e8930030 	lwi	r4, r19, 48
20012c58:	e8730068 	lwi	r3, r19, 104
20012c5c:	14632000 	rsubk	r3, r3, r4
20012c60:	f8730030 	swi	r3, r19, 48
		if (start_of_row >= local_BUFFER_SIZE_UV) {
			local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
			start_of_row = start_of_row - local_BUFFER_SIZE_UV;
		}
		i = 0;
		while (i < 81) {
20012c64:	e8930038 	lwi	r4, r19, 56
20012c68:	30600050 	addik	r3, r0, 80	// 50 <_start1>
20012c6c:	16441801 	cmp	r18, r4, r3
20012c70:	bcb2fda8 	bgei	r18, -600		// 20012a18
					local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
					start_of_row = start_of_row - local_BUFFER_SIZE_UV;
				}
			}
		}
		advance_block();
20012c74:	b0000000 	imm	0
20012c78:	e87401c8 	lwi	r3, r20, 456
20012c7c:	99fc1800 	brald	r15, r3
20012c80:	80000000 	or	r0, r0, r0
	
		// Update ports indexes
		index_RD += 81;
20012c84:	b0000000 	imm	0
20012c88:	e8740138 	lwi	r3, r20, 312
20012c8c:	e8630000 	lwi	r3, r3, 0
20012c90:	30830051 	addik	r4, r3, 81
20012c94:	b0000000 	imm	0
20012c98:	e8740138 	lwi	r3, r20, 312
20012c9c:	f8830000 	swi	r4, r3, 0
		
		write_end_RD();
20012ca0:	b0000000 	imm	0
20012ca4:	e87401c4 	lwi	r3, r20, 452
20012ca8:	99fc1800 	brald	r15, r3
20012cac:	80000000 	or	r0, r0, r0
	}
20012cb0:	e9e10000 	lwi	r15, r1, 0
20012cb4:	10330000 	addk	r1, r19, r0
20012cb8:	ea610078 	lwi	r19, r1, 120
20012cbc:	ea81007c 	lwi	r20, r1, 124
20012cc0:	30210080 	addik	r1, r1, 128
20012cc4:	b60f0008 	rtsd	r15, 8
20012cc8:	80000000 	or	r0, r0, r0

20012ccc <isSchedulable_read_fb_V>:
	static i32 isSchedulable_read_fb_V() {
20012ccc:	3021ffe8 	addik	r1, r1, -24
20012cd0:	fa610010 	swi	r19, r1, 16
20012cd4:	fa810014 	swi	r20, r1, 20
20012cd8:	12610000 	addk	r19, r1, r0
20012cdc:	96808000 	mfs	r20, rpc
20012ce0:	b000dffe 	imm	-8194
20012ce4:	3294ec80 	addik	r20, r20, -4992
		i32 result;
		i32 local_outstanding_writes;
		i32 local_max_outstanding_writes;
	
		local_outstanding_writes = outstanding_writes;
20012ce8:	b0000000 	imm	0
20012cec:	e8740184 	lwi	r3, r20, 388
20012cf0:	e8630000 	lwi	r3, r3, 0
20012cf4:	f8730004 	swi	r3, r19, 4
		local_max_outstanding_writes = max_outstanding_writes;
20012cf8:	b0000000 	imm	0
20012cfc:	e8740160 	lwi	r3, r20, 352
20012d00:	e8630000 	lwi	r3, r3, 0
20012d04:	f8730008 	swi	r3, r19, 8
		result = local_outstanding_writes < local_max_outstanding_writes;
20012d08:	30600001 	addik	r3, r0, 1
20012d0c:	e8b30004 	lwi	r5, r19, 4
20012d10:	e8930008 	lwi	r4, r19, 8
20012d14:	16442801 	cmp	r18, r4, r5
20012d18:	bc520008 	blti	r18, 8		// 20012d20
20012d1c:	10600000 	addk	r3, r0, r0
20012d20:	a46300ff 	andi	r3, r3, 255
20012d24:	f873000c 	swi	r3, r19, 12
		return result;
20012d28:	e873000c 	lwi	r3, r19, 12
	}
20012d2c:	10330000 	addk	r1, r19, r0
20012d30:	ea610010 	lwi	r19, r1, 16
20012d34:	ea810014 	lwi	r20, r1, 20
20012d38:	30210018 	addik	r1, r1, 24
20012d3c:	b60f0008 	rtsd	r15, 8
20012d40:	80000000 	or	r0, r0, r0

20012d44 <read_fb_V>:
	
	static void read_fb_V() {
20012d44:	3021ff80 	addik	r1, r1, -128
20012d48:	f9e10000 	swi	r15, r1, 0
20012d4c:	fa610078 	swi	r19, r1, 120
20012d50:	fa81007c 	swi	r20, r1, 124
20012d54:	12610000 	addk	r19, r1, r0
20012d58:	96808000 	mfs	r20, rpc
20012d5c:	b000dffe 	imm	-8194
20012d60:	3294ec04 	addik	r20, r20, -5116
	
		// Compute aligned port indexes
		i32 index_aligned_RD = index_RD % SIZE_RD;
20012d64:	b0000000 	imm	0
20012d68:	e8740138 	lwi	r3, r20, 312
20012d6c:	e8630000 	lwi	r3, r3, 0
20012d70:	a46301ff 	andi	r3, r3, 511
20012d74:	f873003c 	swi	r3, r19, 60
		i32 local_start_of_frame_U;
		i32 local_MAXW_IN_SAMPLES_UV;
		i32 local_BUFFER_SIZE_UV;
		i16 tmp_frameBuffer_V;
	
		local_mbx_read = mbx_read;
20012d78:	b0000000 	imm	0
20012d7c:	e874017c 	lwi	r3, r20, 380
20012d80:	e8630000 	lwi	r3, r3, 0
20012d84:	f8730040 	swi	r3, r19, 64
		local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
20012d88:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20012d8c:	f8730044 	swi	r3, r19, 68
		local_mvx = mvx;
20012d90:	b0000000 	imm	0
20012d94:	e8740174 	lwi	r3, r20, 372
20012d98:	e4630000 	lhui	r3, r3, 0
20012d9c:	f4730048 	shi	r3, r19, 72
		x = local_mbx_read * local_SAMPLES_PER_MB_UV + local_mvx;
20012da0:	e8930040 	lwi	r4, r19, 64
20012da4:	e8730044 	lwi	r3, r19, 68
20012da8:	40841800 	mul	r4, r4, r3
20012dac:	e4730048 	lhui	r3, r19, 72
20012db0:	90630061 	sext16	r3, r3
20012db4:	10641800 	addk	r3, r4, r3
20012db8:	f873004c 	swi	r3, r19, 76
		local_mby_read = mby_read;
20012dbc:	b0000000 	imm	0
20012dc0:	e8740180 	lwi	r3, r20, 384
20012dc4:	e8630000 	lwi	r3, r3, 0
20012dc8:	f8730050 	swi	r3, r19, 80
		local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
20012dcc:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20012dd0:	f8730044 	swi	r3, r19, 68
		local_mvy = mvy;
20012dd4:	b0000000 	imm	0
20012dd8:	e8740178 	lwi	r3, r20, 376
20012ddc:	e4630000 	lhui	r3, r3, 0
20012de0:	f4730054 	shi	r3, r19, 84
		y = local_mby_read * local_SAMPLES_PER_MB_UV + local_mvy;
20012de4:	e8930050 	lwi	r4, r19, 80
20012de8:	e8730044 	lwi	r3, r19, 68
20012dec:	40841800 	mul	r4, r4, r3
20012df0:	e4730054 	lhui	r3, r19, 84
20012df4:	90630061 	sext16	r3, r3
20012df8:	10641800 	addk	r3, r4, r3
20012dfc:	f873001c 	swi	r3, r19, 28
		clip_left = 0;
20012e00:	f8130020 	swi	r0, r19, 32
		clip_right = 0;
20012e04:	f8130024 	swi	r0, r19, 36
		clip_x = x;
20012e08:	e873004c 	lwi	r3, r19, 76
20012e0c:	f8730028 	swi	r3, r19, 40
		if (y < 0) {
20012e10:	e873001c 	lwi	r3, r19, 28
20012e14:	bca3000c 	bgei	r3, 12		// 20012e20
			clip_y = 0;
20012e18:	f813002c 	swi	r0, r19, 44
20012e1c:	b800004c 	bri	76		// 20012e68
		} else {
			local_vop_height_in_samples_U = vop_height_in_samples_U;
20012e20:	b0000000 	imm	0
20012e24:	e874016c 	lwi	r3, r20, 364
20012e28:	e8630000 	lwi	r3, r3, 0
20012e2c:	f8730058 	swi	r3, r19, 88
			if (y < local_vop_height_in_samples_U) {
20012e30:	e893001c 	lwi	r4, r19, 28
20012e34:	e8730058 	lwi	r3, r19, 88
20012e38:	16432001 	cmp	r18, r3, r4
20012e3c:	bcb20010 	bgei	r18, 16		// 20012e4c
				clip_y = y;
20012e40:	e873001c 	lwi	r3, r19, 28
20012e44:	f873002c 	swi	r3, r19, 44
20012e48:	b8000020 	bri	32		// 20012e68
			} else {
				local_vop_height_in_samples_U = vop_height_in_samples_U;
20012e4c:	b0000000 	imm	0
20012e50:	e874016c 	lwi	r3, r20, 364
20012e54:	e8630000 	lwi	r3, r3, 0
20012e58:	f8730058 	swi	r3, r19, 88
				clip_y = local_vop_height_in_samples_U - 1;
20012e5c:	e8730058 	lwi	r3, r19, 88
20012e60:	3063ffff 	addik	r3, r3, -1
20012e64:	f873002c 	swi	r3, r19, 44
			}
		}
		if (x < 0) {
20012e68:	e873004c 	lwi	r3, r19, 76
20012e6c:	bca30034 	bgei	r3, 52		// 20012ea0
			clip_x = 0;
20012e70:	f8130028 	swi	r0, r19, 40
			if (x < -9) {
20012e74:	e893004c 	lwi	r4, r19, 76
20012e78:	3060fff7 	addik	r3, r0, -9
20012e7c:	16432001 	cmp	r18, r3, r4
20012e80:	bcb20010 	bgei	r18, 16		// 20012e90
				clip_left = 9;
20012e84:	30600009 	addik	r3, r0, 9
20012e88:	f8730020 	swi	r3, r19, 32
20012e8c:	b80000a4 	bri	164		// 20012f30
			} else {
				clip_left = -x;
20012e90:	e873004c 	lwi	r3, r19, 76
20012e94:	14630000 	rsubk	r3, r3, r0
20012e98:	f8730020 	swi	r3, r19, 32
20012e9c:	b8000094 	bri	148		// 20012f30
			}
		} else {
			local_vop_width_in_samples_U = vop_width_in_samples_U;
20012ea0:	b0000000 	imm	0
20012ea4:	e8740168 	lwi	r3, r20, 360
20012ea8:	e8630000 	lwi	r3, r3, 0
20012eac:	f873005c 	swi	r3, r19, 92
			if (x + 9 > local_vop_width_in_samples_U) {
20012eb0:	e873004c 	lwi	r3, r19, 76
20012eb4:	30830009 	addik	r4, r3, 9
20012eb8:	e873005c 	lwi	r3, r19, 92
20012ebc:	16441801 	cmp	r18, r4, r3
20012ec0:	bcb20070 	bgei	r18, 112		// 20012f30
				local_vop_width_in_samples_U = vop_width_in_samples_U;
20012ec4:	b0000000 	imm	0
20012ec8:	e8740168 	lwi	r3, r20, 360
20012ecc:	e8630000 	lwi	r3, r3, 0
20012ed0:	f873005c 	swi	r3, r19, 92
				if (x >= local_vop_width_in_samples_U) {
20012ed4:	e893004c 	lwi	r4, r19, 76
20012ed8:	e873005c 	lwi	r3, r19, 92
20012edc:	16432001 	cmp	r18, r3, r4
20012ee0:	bc52002c 	blti	r18, 44		// 20012f0c
					local_vop_width_in_samples_U = vop_width_in_samples_U;
20012ee4:	b0000000 	imm	0
20012ee8:	e8740168 	lwi	r3, r20, 360
20012eec:	e8630000 	lwi	r3, r3, 0
20012ef0:	f873005c 	swi	r3, r19, 92
					clip_x = local_vop_width_in_samples_U - 1;
20012ef4:	e873005c 	lwi	r3, r19, 92
20012ef8:	3063ffff 	addik	r3, r3, -1
20012efc:	f8730028 	swi	r3, r19, 40
					clip_right = 8;
20012f00:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20012f04:	f8730024 	swi	r3, r19, 36
20012f08:	b8000028 	bri	40		// 20012f30
				} else {
					local_vop_width_in_samples_U = vop_width_in_samples_U;
20012f0c:	b0000000 	imm	0
20012f10:	e8740168 	lwi	r3, r20, 360
20012f14:	e8630000 	lwi	r3, r3, 0
20012f18:	f873005c 	swi	r3, r19, 92
					clip_right = x + 9 - local_vop_width_in_samples_U;
20012f1c:	e873004c 	lwi	r3, r19, 76
20012f20:	30830009 	addik	r4, r3, 9
20012f24:	e873005c 	lwi	r3, r19, 92
20012f28:	14632000 	rsubk	r3, r3, r4
20012f2c:	f8730024 	swi	r3, r19, 36
				}
			}
		}
		local_start_of_frame_U = start_of_frame_U;
20012f30:	b0000000 	imm	0
20012f34:	e8740170 	lwi	r3, r20, 368
20012f38:	e8630000 	lwi	r3, r3, 0
20012f3c:	f8730060 	swi	r3, r19, 96
		local_MAXW_IN_SAMPLES_UV = MAXW_IN_SAMPLES_UV;
20012f40:	30600060 	addik	r3, r0, 96
20012f44:	f8730064 	swi	r3, r19, 100
		start_of_row = local_start_of_frame_U + clip_y * local_MAXW_IN_SAMPLES_UV + clip_x;
20012f48:	e893002c 	lwi	r4, r19, 44
20012f4c:	e8730064 	lwi	r3, r19, 100
20012f50:	40841800 	mul	r4, r4, r3
20012f54:	e8730060 	lwi	r3, r19, 96
20012f58:	10841800 	addk	r4, r4, r3
20012f5c:	e8730028 	lwi	r3, r19, 40
20012f60:	10641800 	addk	r3, r4, r3
20012f64:	f8730030 	swi	r3, r19, 48
		local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
20012f68:	30602100 	addik	r3, r0, 8448
20012f6c:	f8730068 	swi	r3, r19, 104
		if (start_of_row >= local_BUFFER_SIZE_UV) {
20012f70:	e8930030 	lwi	r4, r19, 48
20012f74:	e8730068 	lwi	r3, r19, 104
20012f78:	16432001 	cmp	r18, r3, r4
20012f7c:	bc52001c 	blti	r18, 28		// 20012f98
			local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
20012f80:	30602100 	addik	r3, r0, 8448
20012f84:	f8730068 	swi	r3, r19, 104
			start_of_row = start_of_row - local_BUFFER_SIZE_UV;
20012f88:	e8930030 	lwi	r4, r19, 48
20012f8c:	e8730068 	lwi	r3, r19, 104
20012f90:	14632000 	rsubk	r3, r3, r4
20012f94:	f8730030 	swi	r3, r19, 48
		}
		i = 0;
20012f98:	f8130038 	swi	r0, r19, 56
		while (i < 81) {
20012f9c:	b8000250 	bri	592		// 200131ec
			if (clip_left != 0) {
20012fa0:	e8730020 	lwi	r3, r19, 32
20012fa4:	bc030090 	beqi	r3, 144		// 20013034
				end_i = i + clip_left;
20012fa8:	e8930038 	lwi	r4, r19, 56
20012fac:	e8730020 	lwi	r3, r19, 32
20012fb0:	10641800 	addk	r3, r4, r3
20012fb4:	f873006c 	swi	r3, r19, 108
				temp = frameBuffer_V[start_of_row];
20012fb8:	b0000000 	imm	0
20012fbc:	e8940148 	lwi	r4, r20, 328
20012fc0:	e8730030 	lwi	r3, r19, 48
20012fc4:	10631800 	addk	r3, r3, r3
20012fc8:	10641800 	addk	r3, r4, r3
20012fcc:	e4630000 	lhui	r3, r3, 0
20012fd0:	90630061 	sext16	r3, r3
20012fd4:	f8730070 	swi	r3, r19, 112
				while (i < end_i) {
20012fd8:	b800004c 	bri	76		// 20013024
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
20012fdc:	b0000000 	imm	0
20012fe0:	e8740110 	lwi	r3, r20, 272
20012fe4:	e8630000 	lwi	r3, r3, 0
20012fe8:	e8830004 	lwi	r4, r3, 4
20012fec:	b0000000 	imm	0
20012ff0:	e8740138 	lwi	r3, r20, 312
20012ff4:	e8a30000 	lwi	r5, r3, 0
20012ff8:	e8730038 	lwi	r3, r19, 56
20012ffc:	10651800 	addk	r3, r5, r3
20013000:	a46301ff 	andi	r3, r3, 511
20013004:	10631800 	addk	r3, r3, r3
20013008:	10641800 	addk	r3, r4, r3
2001300c:	e8930070 	lwi	r4, r19, 112
20013010:	90840061 	sext16	r4, r4
20013014:	f4830000 	shi	r4, r3, 0
					i = i + 1;
20013018:	e8730038 	lwi	r3, r19, 56
2001301c:	30630001 	addik	r3, r3, 1
20013020:	f8730038 	swi	r3, r19, 56
		i = 0;
		while (i < 81) {
			if (clip_left != 0) {
				end_i = i + clip_left;
				temp = frameBuffer_V[start_of_row];
				while (i < end_i) {
20013024:	e8930038 	lwi	r4, r19, 56
20013028:	e873006c 	lwi	r3, r19, 108
2001302c:	16432001 	cmp	r18, r3, r4
20013030:	bc52ffac 	blti	r18, -84		// 20012fdc
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
					i = i + 1;
				}
			}
			addr = start_of_row;
20013034:	e8730030 	lwi	r3, r19, 48
20013038:	f8730034 	swi	r3, r19, 52
			end_i = i + 9 - clip_left - clip_right;
2001303c:	e8730038 	lwi	r3, r19, 56
20013040:	30830009 	addik	r4, r3, 9
20013044:	e8730020 	lwi	r3, r19, 32
20013048:	14832000 	rsubk	r4, r3, r4
2001304c:	e8730024 	lwi	r3, r19, 36
20013050:	14632000 	rsubk	r3, r3, r4
20013054:	f873006c 	swi	r3, r19, 108
			while (i < end_i) {
20013058:	b8000070 	bri	112		// 200130c8
				tmp_frameBuffer_V = frameBuffer_V[addr];
2001305c:	b0000000 	imm	0
20013060:	e8940148 	lwi	r4, r20, 328
20013064:	e8730034 	lwi	r3, r19, 52
20013068:	10631800 	addk	r3, r3, r3
2001306c:	10641800 	addk	r3, r4, r3
20013070:	e4630000 	lhui	r3, r3, 0
20013074:	f4730074 	shi	r3, r19, 116
				tokens_RD[(index_RD + (i)) % SIZE_RD] = tmp_frameBuffer_V;
20013078:	b0000000 	imm	0
2001307c:	e8740110 	lwi	r3, r20, 272
20013080:	e8630000 	lwi	r3, r3, 0
20013084:	e8830004 	lwi	r4, r3, 4
20013088:	b0000000 	imm	0
2001308c:	e8740138 	lwi	r3, r20, 312
20013090:	e8a30000 	lwi	r5, r3, 0
20013094:	e8730038 	lwi	r3, r19, 56
20013098:	10651800 	addk	r3, r5, r3
2001309c:	a46301ff 	andi	r3, r3, 511
200130a0:	10631800 	addk	r3, r3, r3
200130a4:	10641800 	addk	r3, r4, r3
200130a8:	e4930074 	lhui	r4, r19, 116
200130ac:	f4830000 	shi	r4, r3, 0
				i = i + 1;
200130b0:	e8730038 	lwi	r3, r19, 56
200130b4:	30630001 	addik	r3, r3, 1
200130b8:	f8730038 	swi	r3, r19, 56
				addr = addr + 1;
200130bc:	e8730034 	lwi	r3, r19, 52
200130c0:	30630001 	addik	r3, r3, 1
200130c4:	f8730034 	swi	r3, r19, 52
					i = i + 1;
				}
			}
			addr = start_of_row;
			end_i = i + 9 - clip_left - clip_right;
			while (i < end_i) {
200130c8:	e8930038 	lwi	r4, r19, 56
200130cc:	e873006c 	lwi	r3, r19, 108
200130d0:	16432001 	cmp	r18, r3, r4
200130d4:	bc52ff88 	blti	r18, -120		// 2001305c
				tmp_frameBuffer_V = frameBuffer_V[addr];
				tokens_RD[(index_RD + (i)) % SIZE_RD] = tmp_frameBuffer_V;
				i = i + 1;
				addr = addr + 1;
			}
			if (clip_right != 0) {
200130d8:	e8730024 	lwi	r3, r19, 36
200130dc:	bc030094 	beqi	r3, 148		// 20013170
				end_i = i + clip_right;
200130e0:	e8930038 	lwi	r4, r19, 56
200130e4:	e8730024 	lwi	r3, r19, 36
200130e8:	10641800 	addk	r3, r4, r3
200130ec:	f873006c 	swi	r3, r19, 108
				temp = frameBuffer_V[addr - 1];
200130f0:	e8730034 	lwi	r3, r19, 52
200130f4:	3063ffff 	addik	r3, r3, -1
200130f8:	b0000000 	imm	0
200130fc:	e8940148 	lwi	r4, r20, 328
20013100:	10631800 	addk	r3, r3, r3
20013104:	10641800 	addk	r3, r4, r3
20013108:	e4630000 	lhui	r3, r3, 0
2001310c:	90630061 	sext16	r3, r3
20013110:	f8730070 	swi	r3, r19, 112
				while (i < end_i) {
20013114:	b800004c 	bri	76		// 20013160
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
20013118:	b0000000 	imm	0
2001311c:	e8740110 	lwi	r3, r20, 272
20013120:	e8630000 	lwi	r3, r3, 0
20013124:	e8830004 	lwi	r4, r3, 4
20013128:	b0000000 	imm	0
2001312c:	e8740138 	lwi	r3, r20, 312
20013130:	e8a30000 	lwi	r5, r3, 0
20013134:	e8730038 	lwi	r3, r19, 56
20013138:	10651800 	addk	r3, r5, r3
2001313c:	a46301ff 	andi	r3, r3, 511
20013140:	10631800 	addk	r3, r3, r3
20013144:	10641800 	addk	r3, r4, r3
20013148:	e8930070 	lwi	r4, r19, 112
2001314c:	90840061 	sext16	r4, r4
20013150:	f4830000 	shi	r4, r3, 0
					i = i + 1;
20013154:	e8730038 	lwi	r3, r19, 56
20013158:	30630001 	addik	r3, r3, 1
2001315c:	f8730038 	swi	r3, r19, 56
				addr = addr + 1;
			}
			if (clip_right != 0) {
				end_i = i + clip_right;
				temp = frameBuffer_V[addr - 1];
				while (i < end_i) {
20013160:	e8930038 	lwi	r4, r19, 56
20013164:	e873006c 	lwi	r3, r19, 108
20013168:	16432001 	cmp	r18, r3, r4
2001316c:	bc52ffac 	blti	r18, -84		// 20013118
					tokens_RD[(index_RD + (i)) % SIZE_RD] = temp;
					i = i + 1;
				}
			}
			y = y + 1;
20013170:	e873001c 	lwi	r3, r19, 28
20013174:	30630001 	addik	r3, r3, 1
20013178:	f873001c 	swi	r3, r19, 28
			local_vop_height_in_samples_U = vop_height_in_samples_U;
2001317c:	b0000000 	imm	0
20013180:	e874016c 	lwi	r3, r20, 364
20013184:	e8630000 	lwi	r3, r3, 0
20013188:	f8730058 	swi	r3, r19, 88
			if (y > 0 && y < local_vop_height_in_samples_U) {
2001318c:	e873001c 	lwi	r3, r19, 28
20013190:	bc63005c 	blei	r3, 92		// 200131ec
20013194:	e893001c 	lwi	r4, r19, 28
20013198:	e8730058 	lwi	r3, r19, 88
2001319c:	16432001 	cmp	r18, r3, r4
200131a0:	bcb2004c 	bgei	r18, 76		// 200131ec
				local_MAXW_IN_SAMPLES_UV = MAXW_IN_SAMPLES_UV;
200131a4:	30600060 	addik	r3, r0, 96
200131a8:	f8730064 	swi	r3, r19, 100
				start_of_row = start_of_row + local_MAXW_IN_SAMPLES_UV;
200131ac:	e8930030 	lwi	r4, r19, 48
200131b0:	e8730064 	lwi	r3, r19, 100
200131b4:	10641800 	addk	r3, r4, r3
200131b8:	f8730030 	swi	r3, r19, 48
				local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
200131bc:	30602100 	addik	r3, r0, 8448
200131c0:	f8730068 	swi	r3, r19, 104
				if (start_of_row >= local_BUFFER_SIZE_UV) {
200131c4:	e8930030 	lwi	r4, r19, 48
200131c8:	e8730068 	lwi	r3, r19, 104
200131cc:	16432001 	cmp	r18, r3, r4
200131d0:	bc52001c 	blti	r18, 28		// 200131ec
					local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
200131d4:	30602100 	addik	r3, r0, 8448
200131d8:	f8730068 	swi	r3, r19, 104
					start_of_row = start_of_row - local_BUFFER_SIZE_UV;
200131dc:	e8930030 	lwi	r4, r19, 48
200131e0:	e8730068 	lwi	r3, r19, 104
200131e4:	14632000 	rsubk	r3, r3, r4
200131e8:	f8730030 	swi	r3, r19, 48
		if (start_of_row >= local_BUFFER_SIZE_UV) {
			local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
			start_of_row = start_of_row - local_BUFFER_SIZE_UV;
		}
		i = 0;
		while (i < 81) {
200131ec:	e8930038 	lwi	r4, r19, 56
200131f0:	30600050 	addik	r3, r0, 80	// 50 <_start1>
200131f4:	16441801 	cmp	r18, r4, r3
200131f8:	bcb2fda8 	bgei	r18, -600		// 20012fa0
					local_BUFFER_SIZE_UV = BUFFER_SIZE_UV;
					start_of_row = start_of_row - local_BUFFER_SIZE_UV;
				}
			}
		}
		advance_block();
200131fc:	b0000000 	imm	0
20013200:	e87401c8 	lwi	r3, r20, 456
20013204:	99fc1800 	brald	r15, r3
20013208:	80000000 	or	r0, r0, r0
	
		// Update ports indexes
		index_RD += 81;
2001320c:	b0000000 	imm	0
20013210:	e8740138 	lwi	r3, r20, 312
20013214:	e8630000 	lwi	r3, r3, 0
20013218:	30830051 	addik	r4, r3, 81
2001321c:	b0000000 	imm	0
20013220:	e8740138 	lwi	r3, r20, 312
20013224:	f8830000 	swi	r4, r3, 0
		
		write_end_RD();
20013228:	b0000000 	imm	0
2001322c:	e87401c4 	lwi	r3, r20, 452
20013230:	99fc1800 	brald	r15, r3
20013234:	80000000 	or	r0, r0, r0
	}
20013238:	e9e10000 	lwi	r15, r1, 0
2001323c:	10330000 	addk	r1, r19, r0
20013240:	ea610078 	lwi	r19, r1, 120
20013244:	ea81007c 	lwi	r20, r1, 124
20013248:	30210080 	addik	r1, r1, 128
2001324c:	b60f0008 	rtsd	r15, 8
20013250:	80000000 	or	r0, r0, r0

20013254 <isSchedulable_untagged_0>:
	static i32 isSchedulable_untagged_0() {
20013254:	3021ffec 	addik	r1, r1, -20
20013258:	fa61000c 	swi	r19, r1, 12
2001325c:	fa810010 	swi	r20, r1, 16
20013260:	12610000 	addk	r19, r1, r0
20013264:	96808000 	mfs	r20, rpc
20013268:	b000dffe 	imm	-8194
2001326c:	3294e6f8 	addik	r20, r20, -6408
		i32 result;
		i32 local_outstanding_writes;
	
		local_outstanding_writes = outstanding_writes;
20013270:	b0000000 	imm	0
20013274:	e8740184 	lwi	r3, r20, 388
20013278:	e8630000 	lwi	r3, r3, 0
2001327c:	f8730004 	swi	r3, r19, 4
		result = local_outstanding_writes >= 6;
20013280:	30600001 	addik	r3, r0, 1
20013284:	e8b30004 	lwi	r5, r19, 4
20013288:	30800005 	addik	r4, r0, 5
2001328c:	16452001 	cmp	r18, r5, r4
20013290:	bc520008 	blti	r18, 8		// 20013298
20013294:	10600000 	addk	r3, r0, r0
20013298:	a46300ff 	andi	r3, r3, 255
2001329c:	f8730008 	swi	r3, r19, 8
		return result;
200132a0:	e8730008 	lwi	r3, r19, 8
	}
200132a4:	10330000 	addk	r1, r19, r0
200132a8:	ea61000c 	lwi	r19, r1, 12
200132ac:	ea810010 	lwi	r20, r1, 16
200132b0:	30210014 	addik	r1, r1, 20
200132b4:	b60f0008 	rtsd	r15, 8
200132b8:	80000000 	or	r0, r0, r0

200132bc <untagged_0>:
	
	static void untagged_0() {
200132bc:	3021ff94 	addik	r1, r1, -108
200132c0:	f9e10000 	swi	r15, r1, 0
200132c4:	fa610064 	swi	r19, r1, 100
200132c8:	fa810068 	swi	r20, r1, 104
200132cc:	12610000 	addk	r19, r1, r0
200132d0:	96808000 	mfs	r20, rpc
200132d4:	b000dffe 	imm	-8194
200132d8:	3294e68c 	addik	r20, r20, -6516
	
		// Compute aligned port indexes
		i32 index_aligned_WD = index_WD % SIZE_WD;
200132dc:	b0000000 	imm	0
200132e0:	e8740128 	lwi	r3, r20, 296
200132e4:	e8630000 	lwi	r3, r3, 0
200132e8:	a46301ff 	andi	r3, r3, 511
200132ec:	f873002c 	swi	r3, r19, 44
		i32 local_SAMPLES_PER_MB;
		i32 local_SAMPLES_PER_MB_UV;
		i32 local_vop_width;
		i32 local_BUFFER_SIZE;
	
		local_mb_write_ptr = mb_write_ptr;
200132f0:	b0000000 	imm	0
200132f4:	e8740188 	lwi	r3, r20, 392
200132f8:	e8630000 	lwi	r3, r3, 0
200132fc:	f8730030 	swi	r3, r19, 48
		addr = local_mb_write_ptr;
20013300:	e8730030 	lwi	r3, r19, 48
20013304:	f873001c 	swi	r3, r19, 28
		local_mb_write_ptr_chroma = mb_write_ptr_chroma;
20013308:	b0000000 	imm	0
2001330c:	e8740190 	lwi	r3, r20, 400
20013310:	e8630000 	lwi	r3, r3, 0
20013314:	f8730034 	swi	r3, r19, 52
		addr_chroma = local_mb_write_ptr_chroma;
20013318:	e8730034 	lwi	r3, r19, 52
2001331c:	f8730020 	swi	r3, r19, 32
		y = 0;
20013320:	f8130024 	swi	r0, r19, 36
		while (y <= 7) {
20013324:	b8000330 	bri	816		// 20013654
			x = 0;
20013328:	f8130028 	swi	r0, r19, 40
			while (x <= 7) {
2001332c:	b80002dc 	bri	732		// 20013608
				tmp_WD = tokens_WD[(index_WD + (8 * y + x)) % SIZE_WD];
20013330:	b0000000 	imm	0
20013334:	e874010c 	lwi	r3, r20, 268
20013338:	e8630000 	lwi	r3, r3, 0
2001333c:	e8830004 	lwi	r4, r3, 4
20013340:	e8730024 	lwi	r3, r19, 36
20013344:	64a30403 	bslli	r5, r3, 3
20013348:	e8730028 	lwi	r3, r19, 40
2001334c:	10651800 	addk	r3, r5, r3
20013350:	10a30000 	addk	r5, r3, r0
20013354:	b0000000 	imm	0
20013358:	e8740128 	lwi	r3, r20, 296
2001335c:	e8630000 	lwi	r3, r3, 0
20013360:	10651800 	addk	r3, r5, r3
20013364:	a46301ff 	andi	r3, r3, 511
20013368:	10631800 	addk	r3, r3, r3
2001336c:	10641800 	addk	r3, r4, r3
20013370:	e4630000 	lhui	r3, r3, 0
20013374:	f4730038 	shi	r3, r19, 56
				frameBuffer[addr + x] = tmp_WD;
20013378:	e893001c 	lwi	r4, r19, 28
2001337c:	e8730028 	lwi	r3, r19, 40
20013380:	10641800 	addk	r3, r4, r3
20013384:	b0000000 	imm	0
20013388:	e8940140 	lwi	r4, r20, 320
2001338c:	10631800 	addk	r3, r3, r3
20013390:	10641800 	addk	r3, r4, r3
20013394:	e4930038 	lhui	r4, r19, 56
20013398:	f4830000 	shi	r4, r3, 0
				tmp_WD0 = tokens_WD[(index_WD + (8 * y + x + 64)) % SIZE_WD];
2001339c:	b0000000 	imm	0
200133a0:	e874010c 	lwi	r3, r20, 268
200133a4:	e8630000 	lwi	r3, r3, 0
200133a8:	e8830004 	lwi	r4, r3, 4
200133ac:	e8730024 	lwi	r3, r19, 36
200133b0:	64a30403 	bslli	r5, r3, 3
200133b4:	e8730028 	lwi	r3, r19, 40
200133b8:	10651800 	addk	r3, r5, r3
200133bc:	10a30000 	addk	r5, r3, r0
200133c0:	b0000000 	imm	0
200133c4:	e8740128 	lwi	r3, r20, 296
200133c8:	e8630000 	lwi	r3, r3, 0
200133cc:	10651800 	addk	r3, r5, r3
200133d0:	30630040 	addik	r3, r3, 64
200133d4:	a46301ff 	andi	r3, r3, 511
200133d8:	10631800 	addk	r3, r3, r3
200133dc:	10641800 	addk	r3, r4, r3
200133e0:	e4630000 	lhui	r3, r3, 0
200133e4:	f473003a 	shi	r3, r19, 58
				frameBuffer[addr + x + 8] = tmp_WD0;
200133e8:	e893001c 	lwi	r4, r19, 28
200133ec:	e8730028 	lwi	r3, r19, 40
200133f0:	10641800 	addk	r3, r4, r3
200133f4:	30630008 	addik	r3, r3, 8
200133f8:	b0000000 	imm	0
200133fc:	e8940140 	lwi	r4, r20, 320
20013400:	10631800 	addk	r3, r3, r3
20013404:	10641800 	addk	r3, r4, r3
20013408:	e493003a 	lhui	r4, r19, 58
2001340c:	f4830000 	shi	r4, r3, 0
				local_MAXW_IN_SAMPLES = MAXW_IN_SAMPLES;
20013410:	306000c0 	addik	r3, r0, 192
20013414:	f873003c 	swi	r3, r19, 60
				tmp_WD1 = tokens_WD[(index_WD + (8 * y + x + 128)) % SIZE_WD];
20013418:	b0000000 	imm	0
2001341c:	e874010c 	lwi	r3, r20, 268
20013420:	e8630000 	lwi	r3, r3, 0
20013424:	e8830004 	lwi	r4, r3, 4
20013428:	e8730024 	lwi	r3, r19, 36
2001342c:	64a30403 	bslli	r5, r3, 3
20013430:	e8730028 	lwi	r3, r19, 40
20013434:	10651800 	addk	r3, r5, r3
20013438:	10a30000 	addk	r5, r3, r0
2001343c:	b0000000 	imm	0
20013440:	e8740128 	lwi	r3, r20, 296
20013444:	e8630000 	lwi	r3, r3, 0
20013448:	10651800 	addk	r3, r5, r3
2001344c:	30630080 	addik	r3, r3, 128
20013450:	a46301ff 	andi	r3, r3, 511
20013454:	10631800 	addk	r3, r3, r3
20013458:	10641800 	addk	r3, r4, r3
2001345c:	e4630000 	lhui	r3, r3, 0
20013460:	f4730040 	shi	r3, r19, 64
				frameBuffer[addr + x + 8 * local_MAXW_IN_SAMPLES] = tmp_WD1;
20013464:	e893001c 	lwi	r4, r19, 28
20013468:	e8730028 	lwi	r3, r19, 40
2001346c:	10841800 	addk	r4, r4, r3
20013470:	e873003c 	lwi	r3, r19, 60
20013474:	64630403 	bslli	r3, r3, 3
20013478:	10641800 	addk	r3, r4, r3
2001347c:	b0000000 	imm	0
20013480:	e8940140 	lwi	r4, r20, 320
20013484:	10631800 	addk	r3, r3, r3
20013488:	10641800 	addk	r3, r4, r3
2001348c:	e4930040 	lhui	r4, r19, 64
20013490:	f4830000 	shi	r4, r3, 0
				local_MAXW_IN_SAMPLES = MAXW_IN_SAMPLES;
20013494:	306000c0 	addik	r3, r0, 192
20013498:	f873003c 	swi	r3, r19, 60
				tmp_WD2 = tokens_WD[(index_WD + (8 * y + x + 192)) % SIZE_WD];
2001349c:	b0000000 	imm	0
200134a0:	e874010c 	lwi	r3, r20, 268
200134a4:	e8630000 	lwi	r3, r3, 0
200134a8:	e8830004 	lwi	r4, r3, 4
200134ac:	e8730024 	lwi	r3, r19, 36
200134b0:	64a30403 	bslli	r5, r3, 3
200134b4:	e8730028 	lwi	r3, r19, 40
200134b8:	10651800 	addk	r3, r5, r3
200134bc:	10a30000 	addk	r5, r3, r0
200134c0:	b0000000 	imm	0
200134c4:	e8740128 	lwi	r3, r20, 296
200134c8:	e8630000 	lwi	r3, r3, 0
200134cc:	10651800 	addk	r3, r5, r3
200134d0:	306300c0 	addik	r3, r3, 192
200134d4:	a46301ff 	andi	r3, r3, 511
200134d8:	10631800 	addk	r3, r3, r3
200134dc:	10641800 	addk	r3, r4, r3
200134e0:	e4630000 	lhui	r3, r3, 0
200134e4:	f4730042 	shi	r3, r19, 66
				frameBuffer[addr + x + 8 + 8 * local_MAXW_IN_SAMPLES] = tmp_WD2;
200134e8:	e893001c 	lwi	r4, r19, 28
200134ec:	e8730028 	lwi	r3, r19, 40
200134f0:	10641800 	addk	r3, r4, r3
200134f4:	30830008 	addik	r4, r3, 8
200134f8:	e873003c 	lwi	r3, r19, 60
200134fc:	64630403 	bslli	r3, r3, 3
20013500:	10641800 	addk	r3, r4, r3
20013504:	b0000000 	imm	0
20013508:	e8940140 	lwi	r4, r20, 320
2001350c:	10631800 	addk	r3, r3, r3
20013510:	10641800 	addk	r3, r4, r3
20013514:	e4930042 	lhui	r4, r19, 66
20013518:	f4830000 	shi	r4, r3, 0
				tmp_WD3 = tokens_WD[(index_WD + (8 * y + x + 256)) % SIZE_WD];
2001351c:	b0000000 	imm	0
20013520:	e874010c 	lwi	r3, r20, 268
20013524:	e8630000 	lwi	r3, r3, 0
20013528:	e8830004 	lwi	r4, r3, 4
2001352c:	e8730024 	lwi	r3, r19, 36
20013530:	64a30403 	bslli	r5, r3, 3
20013534:	e8730028 	lwi	r3, r19, 40
20013538:	10651800 	addk	r3, r5, r3
2001353c:	10a30000 	addk	r5, r3, r0
20013540:	b0000000 	imm	0
20013544:	e8740128 	lwi	r3, r20, 296
20013548:	e8630000 	lwi	r3, r3, 0
2001354c:	10651800 	addk	r3, r5, r3
20013550:	30630100 	addik	r3, r3, 256
20013554:	a46301ff 	andi	r3, r3, 511
20013558:	10631800 	addk	r3, r3, r3
2001355c:	10641800 	addk	r3, r4, r3
20013560:	e4630000 	lhui	r3, r3, 0
20013564:	f4730044 	shi	r3, r19, 68
				frameBuffer_U[addr_chroma + x] = tmp_WD3;
20013568:	e8930020 	lwi	r4, r19, 32
2001356c:	e8730028 	lwi	r3, r19, 40
20013570:	10641800 	addk	r3, r4, r3
20013574:	b0000000 	imm	0
20013578:	e8940144 	lwi	r4, r20, 324
2001357c:	10631800 	addk	r3, r3, r3
20013580:	10641800 	addk	r3, r4, r3
20013584:	e4930044 	lhui	r4, r19, 68
20013588:	f4830000 	shi	r4, r3, 0
				tmp_WD4 = tokens_WD[(index_WD + (8 * y + x + 320)) % SIZE_WD];
2001358c:	b0000000 	imm	0
20013590:	e874010c 	lwi	r3, r20, 268
20013594:	e8630000 	lwi	r3, r3, 0
20013598:	e8830004 	lwi	r4, r3, 4
2001359c:	e8730024 	lwi	r3, r19, 36
200135a0:	64a30403 	bslli	r5, r3, 3
200135a4:	e8730028 	lwi	r3, r19, 40
200135a8:	10651800 	addk	r3, r5, r3
200135ac:	10a30000 	addk	r5, r3, r0
200135b0:	b0000000 	imm	0
200135b4:	e8740128 	lwi	r3, r20, 296
200135b8:	e8630000 	lwi	r3, r3, 0
200135bc:	10651800 	addk	r3, r5, r3
200135c0:	30630140 	addik	r3, r3, 320
200135c4:	a46301ff 	andi	r3, r3, 511
200135c8:	10631800 	addk	r3, r3, r3
200135cc:	10641800 	addk	r3, r4, r3
200135d0:	e4630000 	lhui	r3, r3, 0
200135d4:	f4730046 	shi	r3, r19, 70
				frameBuffer_V[addr_chroma + x] = tmp_WD4;
200135d8:	e8930020 	lwi	r4, r19, 32
200135dc:	e8730028 	lwi	r3, r19, 40
200135e0:	10641800 	addk	r3, r4, r3
200135e4:	b0000000 	imm	0
200135e8:	e8940148 	lwi	r4, r20, 328
200135ec:	10631800 	addk	r3, r3, r3
200135f0:	10641800 	addk	r3, r4, r3
200135f4:	e4930046 	lhui	r4, r19, 70
200135f8:	f4830000 	shi	r4, r3, 0
				x = x + 1;
200135fc:	e8730028 	lwi	r3, r19, 40
20013600:	30630001 	addik	r3, r3, 1
20013604:	f8730028 	swi	r3, r19, 40
		local_mb_write_ptr_chroma = mb_write_ptr_chroma;
		addr_chroma = local_mb_write_ptr_chroma;
		y = 0;
		while (y <= 7) {
			x = 0;
			while (x <= 7) {
20013608:	e8930028 	lwi	r4, r19, 40
2001360c:	30600007 	addik	r3, r0, 7
20013610:	16441801 	cmp	r18, r4, r3
20013614:	bcb2fd1c 	bgei	r18, -740		// 20013330
				frameBuffer_U[addr_chroma + x] = tmp_WD3;
				tmp_WD4 = tokens_WD[(index_WD + (8 * y + x + 320)) % SIZE_WD];
				frameBuffer_V[addr_chroma + x] = tmp_WD4;
				x = x + 1;
			}
			local_MAXW_IN_SAMPLES = MAXW_IN_SAMPLES;
20013618:	306000c0 	addik	r3, r0, 192
2001361c:	f873003c 	swi	r3, r19, 60
			addr = addr + local_MAXW_IN_SAMPLES;
20013620:	e893001c 	lwi	r4, r19, 28
20013624:	e873003c 	lwi	r3, r19, 60
20013628:	10641800 	addk	r3, r4, r3
2001362c:	f873001c 	swi	r3, r19, 28
			local_MAXW_IN_SAMPLES_UV = MAXW_IN_SAMPLES_UV;
20013630:	30600060 	addik	r3, r0, 96
20013634:	f8730048 	swi	r3, r19, 72
			addr_chroma = addr_chroma + local_MAXW_IN_SAMPLES_UV;
20013638:	e8930020 	lwi	r4, r19, 32
2001363c:	e8730048 	lwi	r3, r19, 72
20013640:	10641800 	addk	r3, r4, r3
20013644:	f8730020 	swi	r3, r19, 32
			y = y + 1;
20013648:	e8730024 	lwi	r3, r19, 36
2001364c:	30630001 	addik	r3, r3, 1
20013650:	f8730024 	swi	r3, r19, 36
		local_mb_write_ptr = mb_write_ptr;
		addr = local_mb_write_ptr;
		local_mb_write_ptr_chroma = mb_write_ptr_chroma;
		addr_chroma = local_mb_write_ptr_chroma;
		y = 0;
		while (y <= 7) {
20013654:	e8930024 	lwi	r4, r19, 36
20013658:	30600007 	addik	r3, r0, 7
2001365c:	16441801 	cmp	r18, r4, r3
20013660:	bcb2fcc8 	bgei	r18, -824		// 20013328
			addr = addr + local_MAXW_IN_SAMPLES;
			local_MAXW_IN_SAMPLES_UV = MAXW_IN_SAMPLES_UV;
			addr_chroma = addr_chroma + local_MAXW_IN_SAMPLES_UV;
			y = y + 1;
		}
		local_outstanding_writes = outstanding_writes;
20013664:	b0000000 	imm	0
20013668:	e8740184 	lwi	r3, r20, 388
2001366c:	e8630000 	lwi	r3, r3, 0
20013670:	f873004c 	swi	r3, r19, 76
		outstanding_writes = local_outstanding_writes - 6;
20013674:	e873004c 	lwi	r3, r19, 76
20013678:	3083fffa 	addik	r4, r3, -6
2001367c:	b0000000 	imm	0
20013680:	e8740184 	lwi	r3, r20, 388
20013684:	f8830000 	swi	r4, r3, 0
		local_mbx_write = mbx_write;
20013688:	b0000000 	imm	0
2001368c:	e874018c 	lwi	r3, r20, 396
20013690:	e8630000 	lwi	r3, r3, 0
20013694:	f8730050 	swi	r3, r19, 80
		mbx_write = local_mbx_write + 1;
20013698:	e8730050 	lwi	r3, r19, 80
2001369c:	30830001 	addik	r4, r3, 1
200136a0:	b0000000 	imm	0
200136a4:	e874018c 	lwi	r3, r20, 396
200136a8:	f8830000 	swi	r4, r3, 0
		local_mb_write_ptr = mb_write_ptr;
200136ac:	b0000000 	imm	0
200136b0:	e8740188 	lwi	r3, r20, 392
200136b4:	e8630000 	lwi	r3, r3, 0
200136b8:	f8730030 	swi	r3, r19, 48
		local_SAMPLES_PER_MB = SAMPLES_PER_MB;
200136bc:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
200136c0:	f8730054 	swi	r3, r19, 84
		mb_write_ptr = local_mb_write_ptr + local_SAMPLES_PER_MB;
200136c4:	e8930030 	lwi	r4, r19, 48
200136c8:	e8730054 	lwi	r3, r19, 84
200136cc:	10841800 	addk	r4, r4, r3
200136d0:	b0000000 	imm	0
200136d4:	e8740188 	lwi	r3, r20, 392
200136d8:	f8830000 	swi	r4, r3, 0
		local_mb_write_ptr_chroma = mb_write_ptr_chroma;
200136dc:	b0000000 	imm	0
200136e0:	e8740190 	lwi	r3, r20, 400
200136e4:	e8630000 	lwi	r3, r3, 0
200136e8:	f8730034 	swi	r3, r19, 52
		local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
200136ec:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200136f0:	f8730058 	swi	r3, r19, 88
		mb_write_ptr_chroma = local_mb_write_ptr_chroma + local_SAMPLES_PER_MB_UV;
200136f4:	e8930034 	lwi	r4, r19, 52
200136f8:	e8730058 	lwi	r3, r19, 88
200136fc:	10841800 	addk	r4, r4, r3
20013700:	b0000000 	imm	0
20013704:	e8740190 	lwi	r3, r20, 400
20013708:	f8830000 	swi	r4, r3, 0
		local_mbx_write = mbx_write;
2001370c:	b0000000 	imm	0
20013710:	e874018c 	lwi	r3, r20, 396
20013714:	e8630000 	lwi	r3, r3, 0
20013718:	f8730050 	swi	r3, r19, 80
		local_vop_width = vop_width;
2001371c:	b0000000 	imm	0
20013720:	e874014c 	lwi	r3, r20, 332
20013724:	e8630000 	lwi	r3, r3, 0
20013728:	f873005c 	swi	r3, r19, 92
		if (local_mbx_write == local_vop_width) {
2001372c:	e8930050 	lwi	r4, r19, 80
20013730:	e873005c 	lwi	r3, r19, 92
20013734:	88641800 	xor	r3, r4, r3
20013738:	bc230124 	bnei	r3, 292		// 2001385c
			mbx_write = 0;
2001373c:	b0000000 	imm	0
20013740:	e874018c 	lwi	r3, r20, 396
20013744:	f8030000 	swi	r0, r3, 0
			local_mb_write_ptr = mb_write_ptr;
20013748:	b0000000 	imm	0
2001374c:	e8740188 	lwi	r3, r20, 392
20013750:	e8630000 	lwi	r3, r3, 0
20013754:	f8730030 	swi	r3, r19, 48
			local_SAMPLES_PER_MB = SAMPLES_PER_MB;
20013758:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
2001375c:	f8730054 	swi	r3, r19, 84
			local_vop_width = vop_width;
20013760:	b0000000 	imm	0
20013764:	e874014c 	lwi	r3, r20, 332
20013768:	e8630000 	lwi	r3, r3, 0
2001376c:	f873005c 	swi	r3, r19, 92
			local_SAMPLES_PER_MB = SAMPLES_PER_MB;
20013770:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
20013774:	f8730054 	swi	r3, r19, 84
			local_MAXW_IN_SAMPLES = MAXW_IN_SAMPLES;
20013778:	306000c0 	addik	r3, r0, 192
2001377c:	f873003c 	swi	r3, r19, 60
			mb_write_ptr = local_mb_write_ptr - local_SAMPLES_PER_MB * local_vop_width + local_SAMPLES_PER_MB * local_MAXW_IN_SAMPLES;
20013780:	e8930054 	lwi	r4, r19, 84
20013784:	e873005c 	lwi	r3, r19, 92
20013788:	40641800 	mul	r3, r4, r3
2001378c:	e8930030 	lwi	r4, r19, 48
20013790:	14832000 	rsubk	r4, r3, r4
20013794:	e8b30054 	lwi	r5, r19, 84
20013798:	e873003c 	lwi	r3, r19, 60
2001379c:	40651800 	mul	r3, r5, r3
200137a0:	10841800 	addk	r4, r4, r3
200137a4:	b0000000 	imm	0
200137a8:	e8740188 	lwi	r3, r20, 392
200137ac:	f8830000 	swi	r4, r3, 0
			local_mb_write_ptr_chroma = mb_write_ptr_chroma;
200137b0:	b0000000 	imm	0
200137b4:	e8740190 	lwi	r3, r20, 400
200137b8:	e8630000 	lwi	r3, r3, 0
200137bc:	f8730034 	swi	r3, r19, 52
			local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
200137c0:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200137c4:	f8730058 	swi	r3, r19, 88
			local_vop_width = vop_width;
200137c8:	b0000000 	imm	0
200137cc:	e874014c 	lwi	r3, r20, 332
200137d0:	e8630000 	lwi	r3, r3, 0
200137d4:	f873005c 	swi	r3, r19, 92
			local_SAMPLES_PER_MB_UV = SAMPLES_PER_MB_UV;
200137d8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200137dc:	f8730058 	swi	r3, r19, 88
			local_MAXW_IN_SAMPLES_UV = MAXW_IN_SAMPLES_UV;
200137e0:	30600060 	addik	r3, r0, 96
200137e4:	f8730048 	swi	r3, r19, 72
			mb_write_ptr_chroma = local_mb_write_ptr_chroma - local_SAMPLES_PER_MB_UV * local_vop_width + local_SAMPLES_PER_MB_UV * local_MAXW_IN_SAMPLES_UV;
200137e8:	e8930058 	lwi	r4, r19, 88
200137ec:	e873005c 	lwi	r3, r19, 92
200137f0:	40641800 	mul	r3, r4, r3
200137f4:	e8930034 	lwi	r4, r19, 52
200137f8:	14832000 	rsubk	r4, r3, r4
200137fc:	e8b30058 	lwi	r5, r19, 88
20013800:	e8730048 	lwi	r3, r19, 72
20013804:	40651800 	mul	r3, r5, r3
20013808:	10841800 	addk	r4, r4, r3
2001380c:	b0000000 	imm	0
20013810:	e8740190 	lwi	r3, r20, 400
20013814:	f8830000 	swi	r4, r3, 0
			local_mb_write_ptr = mb_write_ptr;
20013818:	b0000000 	imm	0
2001381c:	e8740188 	lwi	r3, r20, 392
20013820:	e8630000 	lwi	r3, r3, 0
20013824:	f8730030 	swi	r3, r19, 48
			local_BUFFER_SIZE = BUFFER_SIZE;
20013828:	b0000000 	imm	0
2001382c:	30608400 	addik	r3, r0, -31744
20013830:	f8730060 	swi	r3, r19, 96
			if (local_mb_write_ptr == local_BUFFER_SIZE) {
20013834:	e8930030 	lwi	r4, r19, 48
20013838:	e8730060 	lwi	r3, r19, 96
2001383c:	88641800 	xor	r3, r4, r3
20013840:	bc23001c 	bnei	r3, 28		// 2001385c
				mb_write_ptr = 0;
20013844:	b0000000 	imm	0
20013848:	e8740188 	lwi	r3, r20, 392
2001384c:	f8030000 	swi	r0, r3, 0
				mb_write_ptr_chroma = 0;
20013850:	b0000000 	imm	0
20013854:	e8740190 	lwi	r3, r20, 400
20013858:	f8030000 	swi	r0, r3, 0
			}
		}
	
		// Update ports indexes
		index_WD += 384;
2001385c:	b0000000 	imm	0
20013860:	e8740128 	lwi	r3, r20, 296
20013864:	e8630000 	lwi	r3, r3, 0
20013868:	30830180 	addik	r4, r3, 384
2001386c:	b0000000 	imm	0
20013870:	e8740128 	lwi	r3, r20, 296
20013874:	f8830000 	swi	r4, r3, 0
		
		read_end_WD();
20013878:	b0000000 	imm	0
2001387c:	e87401b4 	lwi	r3, r20, 436
20013880:	99fc1800 	brald	r15, r3
20013884:	80000000 	or	r0, r0, r0
	}
20013888:	e9e10000 	lwi	r15, r1, 0
2001388c:	10330000 	addk	r1, r19, r0
20013890:	ea610064 	lwi	r19, r1, 100
20013894:	ea810068 	lwi	r20, r1, 104
20013898:	3021006c 	addik	r1, r1, 108
2001389c:	b60f0008 	rtsd	r15, 8
200138a0:	80000000 	or	r0, r0, r0

200138a4 <decoder_motion_framebuf_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_motion_framebuf_initialize() {
200138a4:	3021fff0 	addik	r1, r1, -16
200138a8:	fa610008 	swi	r19, r1, 8
200138ac:	fa81000c 	swi	r20, r1, 12
200138b0:	12610000 	addk	r19, r1, r0
200138b4:	96808000 	mfs	r20, rpc
200138b8:	b000dffe 	imm	-8194
200138bc:	3294e0a8 	addik	r20, r20, -8024
		int i = 0;
200138c0:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_cmd;
200138c4:	b0000000 	imm	0
200138c8:	e874019c 	lwi	r3, r20, 412
200138cc:	f8030000 	swi	r0, r3, 0
		
	finished:
		// no read_end/write_end here!
		return;
200138d0:	80000000 	or	r0, r0, r0
	}
200138d4:	10330000 	addk	r1, r19, r0
200138d8:	ea610008 	lwi	r19, r1, 8
200138dc:	ea81000c 	lwi	r20, r1, 12
200138e0:	30210010 	addik	r1, r1, 16
200138e4:	b60f0008 	rtsd	r15, 8
200138e8:	80000000 	or	r0, r0, r0

200138ec <decoder_motion_framebuf_outside_FSM_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	int decoder_motion_framebuf_outside_FSM_scheduler() {
200138ec:	3021ffd4 	addik	r1, r1, -44
200138f0:	f9e10000 	swi	r15, r1, 0
200138f4:	fa610024 	swi	r19, r1, 36
200138f8:	fa810028 	swi	r20, r1, 40
200138fc:	12610000 	addk	r19, r1, r0
20013900:	96808000 	mfs	r20, rpc
20013904:	b000dffe 	imm	-8194
20013908:	3294e05c 	addik	r20, r20, -8100
		int i = 0;
2001390c:	f813001c 	swi	r0, r19, 28
		while (1) {
			// Action loop
			if (numTokens_WD - index_WD >= 384 && isSchedulable_untagged_0()) {
20013910:	b0000000 	imm	0
20013914:	e874012c 	lwi	r3, r20, 300
20013918:	e8830000 	lwi	r4, r3, 0
2001391c:	b0000000 	imm	0
20013920:	e8740128 	lwi	r3, r20, 296
20013924:	e8630000 	lwi	r3, r3, 0
20013928:	14832000 	rsubk	r4, r3, r4
2001392c:	3060017f 	addik	r3, r0, 383
20013930:	16441803 	cmpu	r18, r4, r3
20013934:	bcb20048 	bgei	r18, 72		// 2001397c
20013938:	b0000000 	imm	0
2001393c:	e8940214 	lwi	r4, r20, 532
20013940:	99fc2000 	brald	r15, r4
20013944:	80000000 	or	r0, r0, r0
20013948:	bc030034 	beqi	r3, 52		// 2001397c
				int stop = 0;
2001394c:	f8130020 	swi	r0, r19, 32
				if (stop != 0) {
20013950:	e8730020 	lwi	r3, r19, 32
20013954:	bc030008 	beqi	r3, 8		// 2001395c
					goto finished;
20013958:	b8000024 	bri	36		// 2001397c
				}
				untagged_0();
2001395c:	b0000000 	imm	0
20013960:	e8740218 	lwi	r3, r20, 536
20013964:	99fc1800 	brald	r15, r3
20013968:	80000000 	or	r0, r0, r0
				i++;
2001396c:	e873001c 	lwi	r3, r19, 28
20013970:	30630001 	addik	r3, r3, 1
20013974:	f873001c 	swi	r3, r19, 28
			} else {
				goto finished;
			}
		}
20013978:	b800ff98 	bri	-104		// 20013910
	finished:
		// no read_end/write_end here!
		return i;
2001397c:	e873001c 	lwi	r3, r19, 28
	}
20013980:	e9e10000 	lwi	r15, r1, 0
20013984:	10330000 	addk	r1, r19, r0
20013988:	ea610024 	lwi	r19, r1, 36
2001398c:	ea810028 	lwi	r20, r1, 40
20013990:	3021002c 	addik	r1, r1, 44
20013994:	b60f0008 	rtsd	r15, 8
20013998:	80000000 	or	r0, r0, r0

2001399c <decoder_motion_framebuf_scheduler>:
	
	int decoder_motion_framebuf_scheduler() {
2001399c:	3021ffb4 	addik	r1, r1, -76
200139a0:	f9e10000 	swi	r15, r1, 0
200139a4:	fa610044 	swi	r19, r1, 68
200139a8:	fa810048 	swi	r20, r1, 72
200139ac:	12610000 	addk	r19, r1, r0
200139b0:	96808000 	mfs	r20, rpc
200139b4:	b000dffe 	imm	-8194
200139b8:	3294dfac 	addik	r20, r20, -8276
		int i = 0;
200139bc:	f813001c 	swi	r0, r19, 28
		if(needInit){
200139c0:	b0000000 	imm	0
200139c4:	e8740198 	lwi	r3, r20, 408
200139c8:	e0630000 	lbui	r3, r3, 0
200139cc:	bc03001c 	beqi	r3, 28		// 200139e8
			decoder_motion_framebuf_initialize();
200139d0:	b000ffff 	imm	-1
200139d4:	b9f4fed0 	brlid	r15, -304	// 200138a4 <decoder_motion_framebuf_initialize>
200139d8:	80000000 	or	r0, r0, r0
			needInit = 0;
200139dc:	b0000000 	imm	0
200139e0:	e8740198 	lwi	r3, r20, 408
200139e4:	f0030000 	sbi	r0, r3, 0
		}
	
		read_MV();
200139e8:	b0000000 	imm	0
200139ec:	e87401a0 	lwi	r3, r20, 416
200139f0:	99fc1800 	brald	r15, r3
200139f4:	80000000 	or	r0, r0, r0
		read_BTYPE();
200139f8:	b0000000 	imm	0
200139fc:	e89401a8 	lwi	r4, r20, 424
20013a00:	99fc2000 	brald	r15, r4
20013a04:	80000000 	or	r0, r0, r0
		read_WD();
20013a08:	b0000000 	imm	0
20013a0c:	e87401b0 	lwi	r3, r20, 432
20013a10:	99fc1800 	brald	r15, r3
20013a14:	80000000 	or	r0, r0, r0
		write_halfpel();
20013a18:	b0000000 	imm	0
20013a1c:	e89401b8 	lwi	r4, r20, 440
20013a20:	99fc2000 	brald	r15, r4
20013a24:	80000000 	or	r0, r0, r0
		write_RD();
20013a28:	b0000000 	imm	0
20013a2c:	e87401c0 	lwi	r3, r20, 448
20013a30:	99fc1800 	brald	r15, r3
20013a34:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
20013a38:	b0000000 	imm	0
20013a3c:	e874019c 	lwi	r3, r20, 412
20013a40:	e8630000 	lwi	r3, r3, 0
20013a44:	a8830001 	xori	r4, r3, 1
20013a48:	bc040250 	beqi	r4, 592		// 20013c98
20013a4c:	30800001 	addik	r4, r0, 1
20013a50:	16441803 	cmpu	r18, r4, r3
20013a54:	bc520024 	blti	r18, 36		// 20013a78
20013a58:	a8830002 	xori	r4, r3, 2
20013a5c:	bc0402e8 	beqi	r4, 744		// 20013d44
20013a60:	a8630003 	xori	r3, r3, 3
20013a64:	bc0304c0 	beqi	r3, 1216		// 20013f24
		case my_state_read_fb:
			goto l_read_fb;
		case my_state_read_mv:
			goto l_read_mv;
		default:
			exit(1);
20013a68:	30a00001 	addik	r5, r0, 1
20013a6c:	b000dffe 	imm	-8194
20013a70:	b9f4c928 	brlid	r15, -14040	// 398 <exit>
20013a74:	80000000 	or	r0, r0, r0
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_cmd:
			goto l_cmd;
20013a78:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_cmd:
			i += decoder_motion_framebuf_outside_FSM_scheduler();
20013a7c:	b000ffff 	imm	-1
20013a80:	b9f4fe6c 	brlid	r15, -404	// 200138ec <decoder_motion_framebuf_outside_FSM_scheduler>
20013a84:	80000000 	or	r0, r0, r0
20013a88:	e893001c 	lwi	r4, r19, 28
20013a8c:	10641800 	addk	r3, r4, r3
20013a90:	f873001c 	swi	r3, r19, 28
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_cmd_newVop()) {
20013a94:	b0000000 	imm	0
20013a98:	e8740124 	lwi	r3, r20, 292
20013a9c:	e8830000 	lwi	r4, r3, 0
20013aa0:	b0000000 	imm	0
20013aa4:	e8740120 	lwi	r3, r20, 288
20013aa8:	e8630000 	lwi	r3, r3, 0
20013aac:	88641800 	xor	r3, r4, r3
20013ab0:	bc030054 	beqi	r3, 84		// 20013b04
20013ab4:	b0000000 	imm	0
20013ab8:	e89401cc 	lwi	r4, r20, 460
20013abc:	99fc2000 	brald	r15, r4
20013ac0:	80000000 	or	r0, r0, r0
20013ac4:	bc030040 	beqi	r3, 64		// 20013b04
				int stop = 0;
20013ac8:	f8130034 	swi	r0, r19, 52
				if (stop != 0) {
20013acc:	e8730034 	lwi	r3, r19, 52
20013ad0:	bc030014 	beqi	r3, 20		// 20013ae4
					_FSM_state = my_state_cmd;
20013ad4:	b0000000 	imm	0
20013ad8:	e874019c 	lwi	r3, r20, 412
20013adc:	f8030000 	swi	r0, r3, 0
					goto finished;
20013ae0:	b8000524 	bri	1316		// 20014004
				}
				cmd_newVop();
20013ae4:	b0000000 	imm	0
20013ae8:	e87401d0 	lwi	r3, r20, 464
20013aec:	99fc1800 	brald	r15, r3
20013af0:	80000000 	or	r0, r0, r0
				i++;
20013af4:	e873001c 	lwi	r3, r19, 28
20013af8:	30630001 	addik	r3, r3, 1
20013afc:	f873001c 	swi	r3, r19, 28
				goto l_get_w_h;
20013b00:	b800019c 	bri	412		// 20013c9c
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_cmd_noMotion()) {
20013b04:	b0000000 	imm	0
20013b08:	e8740124 	lwi	r3, r20, 292
20013b0c:	e8830000 	lwi	r4, r3, 0
20013b10:	b0000000 	imm	0
20013b14:	e8740120 	lwi	r3, r20, 288
20013b18:	e8630000 	lwi	r3, r3, 0
20013b1c:	88641800 	xor	r3, r4, r3
20013b20:	bc030054 	beqi	r3, 84		// 20013b74
20013b24:	b0000000 	imm	0
20013b28:	e89401dc 	lwi	r4, r20, 476
20013b2c:	99fc2000 	brald	r15, r4
20013b30:	80000000 	or	r0, r0, r0
20013b34:	bc030040 	beqi	r3, 64		// 20013b74
				int stop = 0;
20013b38:	f8130038 	swi	r0, r19, 56
				if (stop != 0) {
20013b3c:	e8730038 	lwi	r3, r19, 56
20013b40:	bc030014 	beqi	r3, 20		// 20013b54
					_FSM_state = my_state_cmd;
20013b44:	b0000000 	imm	0
20013b48:	e874019c 	lwi	r3, r20, 412
20013b4c:	f8030000 	swi	r0, r3, 0
					goto finished;
20013b50:	b80004b4 	bri	1204		// 20014004
				}
				cmd_noMotion();
20013b54:	b0000000 	imm	0
20013b58:	e87401e0 	lwi	r3, r20, 480
20013b5c:	99fc1800 	brald	r15, r3
20013b60:	80000000 	or	r0, r0, r0
				i++;
20013b64:	e873001c 	lwi	r3, r19, 28
20013b68:	30630001 	addik	r3, r3, 1
20013b6c:	f873001c 	swi	r3, r19, 28
				goto l_cmd;
20013b70:	b800ff0c 	bri	-244		// 20013a7c
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_cmd_motion()) {
20013b74:	b0000000 	imm	0
20013b78:	e8740124 	lwi	r3, r20, 292
20013b7c:	e8830000 	lwi	r4, r3, 0
20013b80:	b0000000 	imm	0
20013b84:	e8740120 	lwi	r3, r20, 288
20013b88:	e8630000 	lwi	r3, r3, 0
20013b8c:	88641800 	xor	r3, r4, r3
20013b90:	bc030054 	beqi	r3, 84		// 20013be4
20013b94:	b0000000 	imm	0
20013b98:	e89401e4 	lwi	r4, r20, 484
20013b9c:	99fc2000 	brald	r15, r4
20013ba0:	80000000 	or	r0, r0, r0
20013ba4:	bc030040 	beqi	r3, 64		// 20013be4
				int stop = 0;
20013ba8:	f813003c 	swi	r0, r19, 60
				if (stop != 0) {
20013bac:	e873003c 	lwi	r3, r19, 60
20013bb0:	bc030014 	beqi	r3, 20		// 20013bc4
					_FSM_state = my_state_cmd;
20013bb4:	b0000000 	imm	0
20013bb8:	e874019c 	lwi	r3, r20, 412
20013bbc:	f8030000 	swi	r0, r3, 0
					goto finished;
20013bc0:	b8000444 	bri	1092		// 20014004
				}
				cmd_motion();
20013bc4:	b0000000 	imm	0
20013bc8:	e87401e8 	lwi	r3, r20, 488
20013bcc:	99fc1800 	brald	r15, r3
20013bd0:	80000000 	or	r0, r0, r0
				i++;
20013bd4:	e873001c 	lwi	r3, r19, 28
20013bd8:	30630001 	addik	r3, r3, 1
20013bdc:	f873001c 	swi	r3, r19, 28
				goto l_read_mv;
20013be0:	b8000348 	bri	840		// 20013f28
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_cmd_neither()) {
20013be4:	b0000000 	imm	0
20013be8:	e8740124 	lwi	r3, r20, 292
20013bec:	e8830000 	lwi	r4, r3, 0
20013bf0:	b0000000 	imm	0
20013bf4:	e8740120 	lwi	r3, r20, 288
20013bf8:	e8630000 	lwi	r3, r3, 0
20013bfc:	88641800 	xor	r3, r4, r3
20013c00:	bc030088 	beqi	r3, 136		// 20013c88
20013c04:	b0000000 	imm	0
20013c08:	e89401f4 	lwi	r4, r20, 500
20013c0c:	99fc2000 	brald	r15, r4
20013c10:	80000000 	or	r0, r0, r0
20013c14:	bc030074 	beqi	r3, 116		// 20013c88
				int stop = 0;
20013c18:	f8130020 	swi	r0, r19, 32
				if (1 > SIZE_halfpel - index_halfpel + decoder_motion_framebuf_halfpel->read_inds[0]) {
20013c1c:	b0000000 	imm	0
20013c20:	e8740114 	lwi	r3, r20, 276
20013c24:	e8630000 	lwi	r3, r3, 0
20013c28:	e863000c 	lwi	r3, r3, 12
20013c2c:	e8830000 	lwi	r4, r3, 0
20013c30:	b0000000 	imm	0
20013c34:	e8740130 	lwi	r3, r20, 304
20013c38:	e8630000 	lwi	r3, r3, 0
20013c3c:	14632000 	rsubk	r3, r3, r4
20013c40:	a863fe00 	xori	r3, r3, -512
20013c44:	bc23000c 	bnei	r3, 12		// 20013c50
					stop = 1;
20013c48:	30600001 	addik	r3, r0, 1
20013c4c:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
20013c50:	e8730020 	lwi	r3, r19, 32
20013c54:	bc030014 	beqi	r3, 20		// 20013c68
					_FSM_state = my_state_cmd;
20013c58:	b0000000 	imm	0
20013c5c:	e874019c 	lwi	r3, r20, 412
20013c60:	f8030000 	swi	r0, r3, 0
					goto finished;
20013c64:	b80003a0 	bri	928		// 20014004
				}
				cmd_neither();
20013c68:	b0000000 	imm	0
20013c6c:	e87401f8 	lwi	r3, r20, 504
20013c70:	99fc1800 	brald	r15, r3
20013c74:	80000000 	or	r0, r0, r0
				i++;
20013c78:	e873001c 	lwi	r3, r19, 28
20013c7c:	30630001 	addik	r3, r3, 1
20013c80:	f873001c 	swi	r3, r19, 28
				goto l_read_fb;
20013c84:	b80000c4 	bri	196		// 20013d48
			} else {
				_FSM_state = my_state_cmd;
20013c88:	b0000000 	imm	0
20013c8c:	e874019c 	lwi	r3, r20, 412
20013c90:	f8030000 	swi	r0, r3, 0
				goto finished;
20013c94:	b8000370 	bri	880		// 20014004
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_cmd:
			goto l_cmd;
		case my_state_get_w_h:
			goto l_get_w_h;
20013c98:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_cmd;
				goto finished;
			}
		l_get_w_h:
			i += decoder_motion_framebuf_outside_FSM_scheduler();
20013c9c:	b000ffff 	imm	-1
20013ca0:	b9f4fc4c 	brlid	r15, -948	// 200138ec <decoder_motion_framebuf_outside_FSM_scheduler>
20013ca4:	80000000 	or	r0, r0, r0
20013ca8:	e893001c 	lwi	r4, r19, 28
20013cac:	10641800 	addk	r3, r4, r3
20013cb0:	f873001c 	swi	r3, r19, 28
			if (numTokens_BTYPE - index_BTYPE >= 2 && isSchedulable_get_w_h()) {
20013cb4:	b0000000 	imm	0
20013cb8:	e8740124 	lwi	r3, r20, 292
20013cbc:	e8830000 	lwi	r4, r3, 0
20013cc0:	b0000000 	imm	0
20013cc4:	e8740120 	lwi	r3, r20, 288
20013cc8:	e8630000 	lwi	r3, r3, 0
20013ccc:	14832000 	rsubk	r4, r3, r4
20013cd0:	30600001 	addik	r3, r0, 1
20013cd4:	16441803 	cmpu	r18, r4, r3
20013cd8:	bcb20058 	bgei	r18, 88		// 20013d30
20013cdc:	b0000000 	imm	0
20013ce0:	e89401d4 	lwi	r4, r20, 468
20013ce4:	99fc2000 	brald	r15, r4
20013ce8:	80000000 	or	r0, r0, r0
20013cec:	bc030044 	beqi	r3, 68		// 20013d30
				int stop = 0;
20013cf0:	f8130040 	swi	r0, r19, 64
				if (stop != 0) {
20013cf4:	e8730040 	lwi	r3, r19, 64
20013cf8:	bc030018 	beqi	r3, 24		// 20013d10
					_FSM_state = my_state_get_w_h;
20013cfc:	b0000000 	imm	0
20013d00:	e874019c 	lwi	r3, r20, 412
20013d04:	30800001 	addik	r4, r0, 1
20013d08:	f8830000 	swi	r4, r3, 0
					goto finished;
20013d0c:	b80002f8 	bri	760		// 20014004
				}
				get_w_h();
20013d10:	b0000000 	imm	0
20013d14:	e87401d8 	lwi	r3, r20, 472
20013d18:	99fc1800 	brald	r15, r3
20013d1c:	80000000 	or	r0, r0, r0
				i++;
20013d20:	e873001c 	lwi	r3, r19, 28
20013d24:	30630001 	addik	r3, r3, 1
20013d28:	f873001c 	swi	r3, r19, 28
				goto l_cmd;
20013d2c:	b800fd50 	bri	-688		// 20013a7c
			} else {
				_FSM_state = my_state_get_w_h;
20013d30:	b0000000 	imm	0
20013d34:	e874019c 	lwi	r3, r20, 412
20013d38:	30800001 	addik	r4, r0, 1
20013d3c:	f8830000 	swi	r4, r3, 0
				goto finished;
20013d40:	b80002c4 	bri	708		// 20014004
		case my_state_cmd:
			goto l_cmd;
		case my_state_get_w_h:
			goto l_get_w_h;
		case my_state_read_fb:
			goto l_read_fb;
20013d44:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_w_h;
				goto finished;
			}
		l_read_fb:
			i += decoder_motion_framebuf_outside_FSM_scheduler();
20013d48:	b000ffff 	imm	-1
20013d4c:	b9f4fba0 	brlid	r15, -1120	// 200138ec <decoder_motion_framebuf_outside_FSM_scheduler>
20013d50:	80000000 	or	r0, r0, r0
20013d54:	e893001c 	lwi	r4, r19, 28
20013d58:	10641800 	addk	r3, r4, r3
20013d5c:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_fb_Y()) {
20013d60:	b0000000 	imm	0
20013d64:	e89401fc 	lwi	r4, r20, 508
20013d68:	99fc2000 	brald	r15, r4
20013d6c:	80000000 	or	r0, r0, r0
20013d70:	bc030080 	beqi	r3, 128		// 20013df0
				int stop = 0;
20013d74:	f8130024 	swi	r0, r19, 36
				if (81 > SIZE_RD - index_RD + decoder_motion_framebuf_RD->read_inds[0]) {
20013d78:	b0000000 	imm	0
20013d7c:	e8740110 	lwi	r3, r20, 272
20013d80:	e8630000 	lwi	r3, r3, 0
20013d84:	e863000c 	lwi	r3, r3, 12
20013d88:	e8830000 	lwi	r4, r3, 0
20013d8c:	b0000000 	imm	0
20013d90:	e8740138 	lwi	r3, r20, 312
20013d94:	e8630000 	lwi	r3, r3, 0
20013d98:	14632000 	rsubk	r3, r3, r4
20013d9c:	30830200 	addik	r4, r3, 512
20013da0:	30600050 	addik	r3, r0, 80	// 50 <_start1>
20013da4:	16441803 	cmpu	r18, r4, r3
20013da8:	bc52000c 	blti	r18, 12		// 20013db4
					stop = 1;
20013dac:	30600001 	addik	r3, r0, 1
20013db0:	f8730024 	swi	r3, r19, 36
				}
				if (stop != 0) {
20013db4:	e8730024 	lwi	r3, r19, 36
20013db8:	bc030018 	beqi	r3, 24		// 20013dd0
					_FSM_state = my_state_read_fb;
20013dbc:	b0000000 	imm	0
20013dc0:	e874019c 	lwi	r3, r20, 412
20013dc4:	30800002 	addik	r4, r0, 2
20013dc8:	f8830000 	swi	r4, r3, 0
					goto finished;
20013dcc:	b8000238 	bri	568		// 20014004
				}
				read_fb_Y();
20013dd0:	b0000000 	imm	0
20013dd4:	e8740200 	lwi	r3, r20, 512
20013dd8:	99fc1800 	brald	r15, r3
20013ddc:	80000000 	or	r0, r0, r0
				i++;
20013de0:	e873001c 	lwi	r3, r19, 28
20013de4:	30630001 	addik	r3, r3, 1
20013de8:	f873001c 	swi	r3, r19, 28
				goto l_cmd;
20013dec:	b800fc90 	bri	-880		// 20013a7c
			} else if (isSchedulable_read_fb_U()) {
20013df0:	b0000000 	imm	0
20013df4:	e8940204 	lwi	r4, r20, 516
20013df8:	99fc2000 	brald	r15, r4
20013dfc:	80000000 	or	r0, r0, r0
20013e00:	bc030080 	beqi	r3, 128		// 20013e80
				int stop = 0;
20013e04:	f8130028 	swi	r0, r19, 40
				if (81 > SIZE_RD - index_RD + decoder_motion_framebuf_RD->read_inds[0]) {
20013e08:	b0000000 	imm	0
20013e0c:	e8740110 	lwi	r3, r20, 272
20013e10:	e8630000 	lwi	r3, r3, 0
20013e14:	e863000c 	lwi	r3, r3, 12
20013e18:	e8830000 	lwi	r4, r3, 0
20013e1c:	b0000000 	imm	0
20013e20:	e8740138 	lwi	r3, r20, 312
20013e24:	e8630000 	lwi	r3, r3, 0
20013e28:	14632000 	rsubk	r3, r3, r4
20013e2c:	30830200 	addik	r4, r3, 512
20013e30:	30600050 	addik	r3, r0, 80	// 50 <_start1>
20013e34:	16441803 	cmpu	r18, r4, r3
20013e38:	bc52000c 	blti	r18, 12		// 20013e44
					stop = 1;
20013e3c:	30600001 	addik	r3, r0, 1
20013e40:	f8730028 	swi	r3, r19, 40
				}
				if (stop != 0) {
20013e44:	e8730028 	lwi	r3, r19, 40
20013e48:	bc030018 	beqi	r3, 24		// 20013e60
					_FSM_state = my_state_read_fb;
20013e4c:	b0000000 	imm	0
20013e50:	e874019c 	lwi	r3, r20, 412
20013e54:	30800002 	addik	r4, r0, 2
20013e58:	f8830000 	swi	r4, r3, 0
					goto finished;
20013e5c:	b80001a8 	bri	424		// 20014004
				}
				read_fb_U();
20013e60:	b0000000 	imm	0
20013e64:	e8740208 	lwi	r3, r20, 520
20013e68:	99fc1800 	brald	r15, r3
20013e6c:	80000000 	or	r0, r0, r0
				i++;
20013e70:	e873001c 	lwi	r3, r19, 28
20013e74:	30630001 	addik	r3, r3, 1
20013e78:	f873001c 	swi	r3, r19, 28
				goto l_cmd;
20013e7c:	b800fc00 	bri	-1024		// 20013a7c
			} else if (isSchedulable_read_fb_V()) {
20013e80:	b0000000 	imm	0
20013e84:	e894020c 	lwi	r4, r20, 524
20013e88:	99fc2000 	brald	r15, r4
20013e8c:	80000000 	or	r0, r0, r0
20013e90:	bc030080 	beqi	r3, 128		// 20013f10
				int stop = 0;
20013e94:	f813002c 	swi	r0, r19, 44
				if (81 > SIZE_RD - index_RD + decoder_motion_framebuf_RD->read_inds[0]) {
20013e98:	b0000000 	imm	0
20013e9c:	e8740110 	lwi	r3, r20, 272
20013ea0:	e8630000 	lwi	r3, r3, 0
20013ea4:	e863000c 	lwi	r3, r3, 12
20013ea8:	e8830000 	lwi	r4, r3, 0
20013eac:	b0000000 	imm	0
20013eb0:	e8740138 	lwi	r3, r20, 312
20013eb4:	e8630000 	lwi	r3, r3, 0
20013eb8:	14632000 	rsubk	r3, r3, r4
20013ebc:	30830200 	addik	r4, r3, 512
20013ec0:	30600050 	addik	r3, r0, 80	// 50 <_start1>
20013ec4:	16441803 	cmpu	r18, r4, r3
20013ec8:	bc52000c 	blti	r18, 12		// 20013ed4
					stop = 1;
20013ecc:	30600001 	addik	r3, r0, 1
20013ed0:	f873002c 	swi	r3, r19, 44
				}
				if (stop != 0) {
20013ed4:	e873002c 	lwi	r3, r19, 44
20013ed8:	bc030018 	beqi	r3, 24		// 20013ef0
					_FSM_state = my_state_read_fb;
20013edc:	b0000000 	imm	0
20013ee0:	e874019c 	lwi	r3, r20, 412
20013ee4:	30800002 	addik	r4, r0, 2
20013ee8:	f8830000 	swi	r4, r3, 0
					goto finished;
20013eec:	b8000118 	bri	280		// 20014004
				}
				read_fb_V();
20013ef0:	b0000000 	imm	0
20013ef4:	e8740210 	lwi	r3, r20, 528
20013ef8:	99fc1800 	brald	r15, r3
20013efc:	80000000 	or	r0, r0, r0
				i++;
20013f00:	e873001c 	lwi	r3, r19, 28
20013f04:	30630001 	addik	r3, r3, 1
20013f08:	f873001c 	swi	r3, r19, 28
				goto l_cmd;
20013f0c:	b800fb70 	bri	-1168		// 20013a7c
			} else {
				_FSM_state = my_state_read_fb;
20013f10:	b0000000 	imm	0
20013f14:	e874019c 	lwi	r3, r20, 412
20013f18:	30800002 	addik	r4, r0, 2
20013f1c:	f8830000 	swi	r4, r3, 0
				goto finished;
20013f20:	b80000e4 	bri	228		// 20014004
		case my_state_get_w_h:
			goto l_get_w_h;
		case my_state_read_fb:
			goto l_read_fb;
		case my_state_read_mv:
			goto l_read_mv;
20013f24:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_fb;
				goto finished;
			}
		l_read_mv:
			i += decoder_motion_framebuf_outside_FSM_scheduler();
20013f28:	b000ffff 	imm	-1
20013f2c:	b9f4f9c0 	brlid	r15, -1600	// 200138ec <decoder_motion_framebuf_outside_FSM_scheduler>
20013f30:	80000000 	or	r0, r0, r0
20013f34:	e893001c 	lwi	r4, r19, 28
20013f38:	10641800 	addk	r3, r4, r3
20013f3c:	f873001c 	swi	r3, r19, 28
			if (numTokens_MV - index_MV >= 2 && isSchedulable_read_mv()) {
20013f40:	b0000000 	imm	0
20013f44:	e874011c 	lwi	r3, r20, 284
20013f48:	e8830000 	lwi	r4, r3, 0
20013f4c:	b0000000 	imm	0
20013f50:	e8740118 	lwi	r3, r20, 280
20013f54:	e8630000 	lwi	r3, r3, 0
20013f58:	14832000 	rsubk	r4, r3, r4
20013f5c:	30600001 	addik	r3, r0, 1
20013f60:	16441803 	cmpu	r18, r4, r3
20013f64:	bcb2008c 	bgei	r18, 140		// 20013ff0
20013f68:	b0000000 	imm	0
20013f6c:	e89401ec 	lwi	r4, r20, 492
20013f70:	99fc2000 	brald	r15, r4
20013f74:	80000000 	or	r0, r0, r0
20013f78:	bc030078 	beqi	r3, 120		// 20013ff0
				int stop = 0;
20013f7c:	f8130030 	swi	r0, r19, 48
				if (1 > SIZE_halfpel - index_halfpel + decoder_motion_framebuf_halfpel->read_inds[0]) {
20013f80:	b0000000 	imm	0
20013f84:	e8740114 	lwi	r3, r20, 276
20013f88:	e8630000 	lwi	r3, r3, 0
20013f8c:	e863000c 	lwi	r3, r3, 12
20013f90:	e8830000 	lwi	r4, r3, 0
20013f94:	b0000000 	imm	0
20013f98:	e8740130 	lwi	r3, r20, 304
20013f9c:	e8630000 	lwi	r3, r3, 0
20013fa0:	14632000 	rsubk	r3, r3, r4
20013fa4:	a863fe00 	xori	r3, r3, -512
20013fa8:	bc23000c 	bnei	r3, 12		// 20013fb4
					stop = 1;
20013fac:	30600001 	addik	r3, r0, 1
20013fb0:	f8730030 	swi	r3, r19, 48
				}
				if (stop != 0) {
20013fb4:	e8730030 	lwi	r3, r19, 48
20013fb8:	bc030018 	beqi	r3, 24		// 20013fd0
					_FSM_state = my_state_read_mv;
20013fbc:	b0000000 	imm	0
20013fc0:	e874019c 	lwi	r3, r20, 412
20013fc4:	30800003 	addik	r4, r0, 3
20013fc8:	f8830000 	swi	r4, r3, 0
					goto finished;
20013fcc:	b8000038 	bri	56		// 20014004
				}
				read_mv();
20013fd0:	b0000000 	imm	0
20013fd4:	e87401f0 	lwi	r3, r20, 496
20013fd8:	99fc1800 	brald	r15, r3
20013fdc:	80000000 	or	r0, r0, r0
				i++;
20013fe0:	e873001c 	lwi	r3, r19, 28
20013fe4:	30630001 	addik	r3, r3, 1
20013fe8:	f873001c 	swi	r3, r19, 28
				goto l_read_fb;
20013fec:	b800fd5c 	bri	-676		// 20013d48
			} else {
				_FSM_state = my_state_read_mv;
20013ff0:	b0000000 	imm	0
20013ff4:	e874019c 	lwi	r3, r20, 412
20013ff8:	30800003 	addik	r4, r0, 3
20013ffc:	f8830000 	swi	r4, r3, 0
				goto finished;
20014000:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_MV();
20014004:	b0000000 	imm	0
20014008:	e89401a4 	lwi	r4, r20, 420
2001400c:	99fc2000 	brald	r15, r4
20014010:	80000000 	or	r0, r0, r0
		read_end_BTYPE();
20014014:	b0000000 	imm	0
20014018:	e87401ac 	lwi	r3, r20, 428
2001401c:	99fc1800 	brald	r15, r3
20014020:	80000000 	or	r0, r0, r0
		read_end_WD();
20014024:	b0000000 	imm	0
20014028:	e89401b4 	lwi	r4, r20, 436
2001402c:	99fc2000 	brald	r15, r4
20014030:	80000000 	or	r0, r0, r0
		
		write_end_halfpel();
20014034:	b0000000 	imm	0
20014038:	e87401bc 	lwi	r3, r20, 444
2001403c:	99fc1800 	brald	r15, r3
20014040:	80000000 	or	r0, r0, r0
		write_end_RD();
20014044:	b0000000 	imm	0
20014048:	e89401c4 	lwi	r4, r20, 452
2001404c:	99fc2000 	brald	r15, r4
20014050:	80000000 	or	r0, r0, r0
		
		
		return i;
20014054:	e873001c 	lwi	r3, r19, 28
	}
20014058:	e9e10000 	lwi	r15, r1, 0
2001405c:	10330000 	addk	r1, r19, r0
20014060:	ea610044 	lwi	r19, r1, 68
20014064:	ea810048 	lwi	r20, r1, 72
20014068:	3021004c 	addik	r1, r1, 76
2001406c:	b60f0008 	rtsd	r15, 8
20014070:	80000000 	or	r0, r0, r0

20014074 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20014074:	3021fff4 	addik	r1, r1, -12
20014078:	fa610004 	swi	r19, r1, 4
2001407c:	fa810008 	swi	r20, r1, 8
20014080:	12610000 	addk	r19, r1, r0
20014084:	96808000 	mfs	r20, rpc
20014088:	b000dffe 	imm	-8194
2001408c:	3294d8d8 	addik	r20, r20, -10024
20014090:	f8b30010 	swi	r5, r19, 16
20014094:	f8d30014 	swi	r6, r19, 20
20014098:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001409c:	e8730010 	lwi	r3, r19, 16
200140a0:	e8630010 	lwi	r3, r3, 16
200140a4:	e8830000 	lwi	r4, r3, 0
200140a8:	e8730010 	lwi	r3, r19, 16
200140ac:	e8a3000c 	lwi	r5, r3, 12
200140b0:	e8730014 	lwi	r3, r19, 20
200140b4:	64630402 	bslli	r3, r3, 2
200140b8:	10651800 	addk	r3, r5, r3
200140bc:	e8630000 	lwi	r3, r3, 0
200140c0:	14a32000 	rsubk	r5, r3, r4
200140c4:	30600001 	addik	r3, r0, 1
200140c8:	e8930018 	lwi	r4, r19, 24
200140cc:	16442803 	cmpu	r18, r4, r5
200140d0:	bcb20008 	bgei	r18, 8		// 200140d8
200140d4:	10600000 	addk	r3, r0, r0
200140d8:	a46300ff 	andi	r3, r3, 255
}
200140dc:	10330000 	addk	r1, r19, r0
200140e0:	ea610004 	lwi	r19, r1, 4
200140e4:	ea810008 	lwi	r20, r1, 8
200140e8:	3021000c 	addik	r1, r1, 12
200140ec:	b60f0008 	rtsd	r15, 8
200140f0:	80000000 	or	r0, r0, r0

200140f4 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200140f4:	3021fff4 	addik	r1, r1, -12
200140f8:	fa610004 	swi	r19, r1, 4
200140fc:	fa810008 	swi	r20, r1, 8
20014100:	12610000 	addk	r19, r1, r0
20014104:	96808000 	mfs	r20, rpc
20014108:	b000dffe 	imm	-8194
2001410c:	3294d858 	addik	r20, r20, -10152
20014110:	f8b30010 	swi	r5, r19, 16
20014114:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20014118:	e8730010 	lwi	r3, r19, 16
2001411c:	e8630010 	lwi	r3, r3, 16
20014120:	e8830000 	lwi	r4, r3, 0
20014124:	e8730010 	lwi	r3, r19, 16
20014128:	e8a3000c 	lwi	r5, r3, 12
2001412c:	e8730014 	lwi	r3, r19, 20
20014130:	64630402 	bslli	r3, r3, 2
20014134:	10651800 	addk	r3, r5, r3
20014138:	e8630000 	lwi	r3, r3, 0
2001413c:	14632000 	rsubk	r3, r3, r4
}
20014140:	10330000 	addk	r1, r19, r0
20014144:	ea610004 	lwi	r19, r1, 4
20014148:	ea810008 	lwi	r20, r1, 8
2001414c:	3021000c 	addik	r1, r1, 12
20014150:	b60f0008 	rtsd	r15, 8
20014154:	80000000 	or	r0, r0, r0

20014158 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20014158:	3021fff0 	addik	r1, r1, -16
2001415c:	fa610008 	swi	r19, r1, 8
20014160:	fa81000c 	swi	r20, r1, 12
20014164:	12610000 	addk	r19, r1, r0
20014168:	96808000 	mfs	r20, rpc
2001416c:	b000dffe 	imm	-8194
20014170:	3294d7f4 	addik	r20, r20, -10252
20014174:	f8b30014 	swi	r5, r19, 20
20014178:	f8d30018 	swi	r6, r19, 24
2001417c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20014180:	f8130004 	swi	r0, r19, 4
20014184:	b800005c 	bri	92		// 200141e0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20014188:	e8730014 	lwi	r3, r19, 20
2001418c:	e8830000 	lwi	r4, r3, 0
20014190:	e8730014 	lwi	r3, r19, 20
20014194:	e8a3000c 	lwi	r5, r3, 12
20014198:	e8730004 	lwi	r3, r19, 4
2001419c:	64630402 	bslli	r3, r3, 2
200141a0:	10651800 	addk	r3, r5, r3
200141a4:	e8a30000 	lwi	r5, r3, 0
200141a8:	e8730014 	lwi	r3, r19, 20
200141ac:	e8630010 	lwi	r3, r3, 16
200141b0:	e8630000 	lwi	r3, r3, 0
200141b4:	14632800 	rsubk	r3, r3, r5
200141b8:	10641800 	addk	r3, r4, r3
200141bc:	30830001 	addik	r4, r3, 1
200141c0:	e873001c 	lwi	r3, r19, 28
200141c4:	16441803 	cmpu	r18, r4, r3
200141c8:	bc52000c 	blti	r18, 12		// 200141d4
            return 0;
200141cc:	10600000 	addk	r3, r0, r0
200141d0:	b8000024 	bri	36		// 200141f4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200141d4:	e8730004 	lwi	r3, r19, 4
200141d8:	30630001 	addik	r3, r3, 1
200141dc:	f8730004 	swi	r3, r19, 4
200141e0:	e8930004 	lwi	r4, r19, 4
200141e4:	e8730018 	lwi	r3, r19, 24
200141e8:	16432003 	cmpu	r18, r3, r4
200141ec:	bc52ff9c 	blti	r18, -100		// 20014188
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200141f0:	30600001 	addik	r3, r0, 1
}
200141f4:	10330000 	addk	r1, r19, r0
200141f8:	ea610008 	lwi	r19, r1, 8
200141fc:	ea81000c 	lwi	r20, r1, 12
20014200:	30210010 	addik	r1, r1, 16
20014204:	b60f0008 	rtsd	r15, 8
20014208:	80000000 	or	r0, r0, r0

2001420c <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001420c:	3021ffe8 	addik	r1, r1, -24
20014210:	fa610010 	swi	r19, r1, 16
20014214:	fa810014 	swi	r20, r1, 20
20014218:	12610000 	addk	r19, r1, r0
2001421c:	96808000 	mfs	r20, rpc
20014220:	b000dffe 	imm	-8194
20014224:	3294d740 	addik	r20, r20, -10432
20014228:	f8b3001c 	swi	r5, r19, 28
2001422c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20014230:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20014234:	f8130004 	swi	r0, r19, 4
20014238:	b8000054 	bri	84		// 2001428c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001423c:	e873001c 	lwi	r3, r19, 28
20014240:	e8630010 	lwi	r3, r3, 16
20014244:	e8830000 	lwi	r4, r3, 0
20014248:	e873001c 	lwi	r3, r19, 28
2001424c:	e8a3000c 	lwi	r5, r3, 12
20014250:	e8730004 	lwi	r3, r19, 4
20014254:	64630402 	bslli	r3, r3, 2
20014258:	10651800 	addk	r3, r5, r3
2001425c:	e8630000 	lwi	r3, r3, 0
20014260:	14632000 	rsubk	r3, r3, r4
20014264:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20014268:	e8930008 	lwi	r4, r19, 8
2001426c:	e873000c 	lwi	r3, r19, 12
20014270:	16441803 	cmpu	r18, r4, r3
20014274:	bcb20008 	bgei	r18, 8		// 2001427c
20014278:	10640000 	addk	r3, r4, r0
2001427c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20014280:	e8730004 	lwi	r3, r19, 4
20014284:	30630001 	addik	r3, r3, 1
20014288:	f8730004 	swi	r3, r19, 4
2001428c:	e8930004 	lwi	r4, r19, 4
20014290:	e8730020 	lwi	r3, r19, 32
20014294:	16432003 	cmpu	r18, r3, r4
20014298:	bc52ffa4 	blti	r18, -92		// 2001423c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001429c:	e873001c 	lwi	r3, r19, 28
200142a0:	e8830000 	lwi	r4, r3, 0
200142a4:	e8730008 	lwi	r3, r19, 8
200142a8:	14632000 	rsubk	r3, r3, r4
}
200142ac:	10330000 	addk	r1, r19, r0
200142b0:	ea610010 	lwi	r19, r1, 16
200142b4:	ea810014 	lwi	r20, r1, 20
200142b8:	30210018 	addik	r1, r1, 24
200142bc:	b60f0008 	rtsd	r15, 8
200142c0:	80000000 	or	r0, r0, r0

200142c4 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200142c4:	3021fff0 	addik	r1, r1, -16
200142c8:	fa610008 	swi	r19, r1, 8
200142cc:	fa81000c 	swi	r20, r1, 12
200142d0:	12610000 	addk	r19, r1, r0
200142d4:	96808000 	mfs	r20, rpc
200142d8:	b000dffe 	imm	-8194
200142dc:	3294d688 	addik	r20, r20, -10616
200142e0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200142e4:	e8730014 	lwi	r3, r19, 20
200142e8:	e8630010 	lwi	r3, r3, 16
200142ec:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200142f0:	f8130004 	swi	r0, r19, 4
200142f4:	b8000028 	bri	40		// 2001431c
        fifo->read_inds[i] = 0;
200142f8:	e8730014 	lwi	r3, r19, 20
200142fc:	e883000c 	lwi	r4, r3, 12
20014300:	e8730004 	lwi	r3, r19, 4
20014304:	64630402 	bslli	r3, r3, 2
20014308:	10641800 	addk	r3, r4, r3
2001430c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20014310:	e8730004 	lwi	r3, r19, 4
20014314:	30630001 	addik	r3, r3, 1
20014318:	f8730004 	swi	r3, r19, 4
2001431c:	e8730014 	lwi	r3, r19, 20
20014320:	e8830008 	lwi	r4, r3, 8
20014324:	e8730004 	lwi	r3, r19, 4
20014328:	16441803 	cmpu	r18, r4, r3
2001432c:	bc52ffcc 	blti	r18, -52		// 200142f8
        fifo->read_inds[i] = 0;
    }
}
20014330:	10330000 	addk	r1, r19, r0
20014334:	ea610008 	lwi	r19, r1, 8
20014338:	ea81000c 	lwi	r20, r1, 12
2001433c:	30210010 	addik	r1, r1, 16
20014340:	b60f0008 	rtsd	r15, 8
20014344:	80000000 	or	r0, r0, r0

20014348 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20014348:	3021fff0 	addik	r1, r1, -16
2001434c:	fa610008 	swi	r19, r1, 8
20014350:	fa81000c 	swi	r20, r1, 12
20014354:	12610000 	addk	r19, r1, r0
20014358:	96808000 	mfs	r20, rpc
2001435c:	b000dffe 	imm	-8194
20014360:	3294d604 	addik	r20, r20, -10748
20014364:	f8b30014 	swi	r5, r19, 20
20014368:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001436c:	e8730014 	lwi	r3, r19, 20
20014370:	e8830004 	lwi	r4, r3, 4
20014374:	e8730014 	lwi	r3, r19, 20
20014378:	e8a3000c 	lwi	r5, r3, 12
2001437c:	e8730018 	lwi	r3, r19, 24
20014380:	64630402 	bslli	r3, r3, 2
20014384:	10651800 	addk	r3, r5, r3
20014388:	e8a30000 	lwi	r5, r3, 0
2001438c:	e8730014 	lwi	r3, r19, 20
20014390:	e8630000 	lwi	r3, r3, 0
20014394:	3063ffff 	addik	r3, r3, -1
20014398:	84651800 	and	r3, r5, r3
2001439c:	10641800 	addk	r3, r4, r3
200143a0:	e0630000 	lbui	r3, r3, 0
200143a4:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200143a8:	e8730014 	lwi	r3, r19, 20
200143ac:	e883000c 	lwi	r4, r3, 12
200143b0:	e8730018 	lwi	r3, r19, 24
200143b4:	64630402 	bslli	r3, r3, 2
200143b8:	10641800 	addk	r3, r4, r3
200143bc:	e8830000 	lwi	r4, r3, 0
200143c0:	30840001 	addik	r4, r4, 1
200143c4:	f8830000 	swi	r4, r3, 0
    return value;
200143c8:	e0730004 	lbui	r3, r19, 4
200143cc:	90630060 	sext8	r3, r3
}
200143d0:	10330000 	addk	r1, r19, r0
200143d4:	ea610008 	lwi	r19, r1, 8
200143d8:	ea81000c 	lwi	r20, r1, 12
200143dc:	30210010 	addik	r1, r1, 16
200143e0:	b60f0008 	rtsd	r15, 8
200143e4:	80000000 	or	r0, r0, r0

200143e8 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200143e8:	3021fff4 	addik	r1, r1, -12
200143ec:	fa610004 	swi	r19, r1, 4
200143f0:	fa810008 	swi	r20, r1, 8
200143f4:	12610000 	addk	r19, r1, r0
200143f8:	96808000 	mfs	r20, rpc
200143fc:	b000dffe 	imm	-8194
20014400:	3294d564 	addik	r20, r20, -10908
20014404:	f8b30010 	swi	r5, r19, 16
20014408:	10660000 	addk	r3, r6, r0
2001440c:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20014410:	e8730010 	lwi	r3, r19, 16
20014414:	e8830004 	lwi	r4, r3, 4
20014418:	e8730010 	lwi	r3, r19, 16
2001441c:	e8630010 	lwi	r3, r3, 16
20014420:	e8a30000 	lwi	r5, r3, 0
20014424:	e8730010 	lwi	r3, r19, 16
20014428:	e8630000 	lwi	r3, r3, 0
2001442c:	3063ffff 	addik	r3, r3, -1
20014430:	84651800 	and	r3, r5, r3
20014434:	10641800 	addk	r3, r4, r3
20014438:	e0930014 	lbui	r4, r19, 20
2001443c:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20014440:	e8730010 	lwi	r3, r19, 16
20014444:	e8630010 	lwi	r3, r3, 16
20014448:	e8830000 	lwi	r4, r3, 0
2001444c:	30840001 	addik	r4, r4, 1
20014450:	f8830000 	swi	r4, r3, 0
}
20014454:	10330000 	addk	r1, r19, r0
20014458:	ea610004 	lwi	r19, r1, 4
2001445c:	ea810008 	lwi	r20, r1, 8
20014460:	3021000c 	addik	r1, r1, 12
20014464:	b60f0008 	rtsd	r15, 8
20014468:	80000000 	or	r0, r0, r0

2001446c <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001446c:	3021fff4 	addik	r1, r1, -12
20014470:	fa610004 	swi	r19, r1, 4
20014474:	fa810008 	swi	r20, r1, 8
20014478:	12610000 	addk	r19, r1, r0
2001447c:	96808000 	mfs	r20, rpc
20014480:	b000dffe 	imm	-8194
20014484:	3294d4e0 	addik	r20, r20, -11040
20014488:	f8b30010 	swi	r5, r19, 16
2001448c:	f8d30014 	swi	r6, r19, 20
20014490:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20014494:	e8730010 	lwi	r3, r19, 16
20014498:	e8630010 	lwi	r3, r3, 16
2001449c:	e8830000 	lwi	r4, r3, 0
200144a0:	e8730010 	lwi	r3, r19, 16
200144a4:	e8a3000c 	lwi	r5, r3, 12
200144a8:	e8730014 	lwi	r3, r19, 20
200144ac:	64630402 	bslli	r3, r3, 2
200144b0:	10651800 	addk	r3, r5, r3
200144b4:	e8630000 	lwi	r3, r3, 0
200144b8:	14a32000 	rsubk	r5, r3, r4
200144bc:	30600001 	addik	r3, r0, 1
200144c0:	e8930018 	lwi	r4, r19, 24
200144c4:	16442803 	cmpu	r18, r4, r5
200144c8:	bcb20008 	bgei	r18, 8		// 200144d0
200144cc:	10600000 	addk	r3, r0, r0
200144d0:	a46300ff 	andi	r3, r3, 255
}
200144d4:	10330000 	addk	r1, r19, r0
200144d8:	ea610004 	lwi	r19, r1, 4
200144dc:	ea810008 	lwi	r20, r1, 8
200144e0:	3021000c 	addik	r1, r1, 12
200144e4:	b60f0008 	rtsd	r15, 8
200144e8:	80000000 	or	r0, r0, r0

200144ec <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200144ec:	3021fff4 	addik	r1, r1, -12
200144f0:	fa610004 	swi	r19, r1, 4
200144f4:	fa810008 	swi	r20, r1, 8
200144f8:	12610000 	addk	r19, r1, r0
200144fc:	96808000 	mfs	r20, rpc
20014500:	b000dffe 	imm	-8194
20014504:	3294d460 	addik	r20, r20, -11168
20014508:	f8b30010 	swi	r5, r19, 16
2001450c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20014510:	e8730010 	lwi	r3, r19, 16
20014514:	e8630010 	lwi	r3, r3, 16
20014518:	e8830000 	lwi	r4, r3, 0
2001451c:	e8730010 	lwi	r3, r19, 16
20014520:	e8a3000c 	lwi	r5, r3, 12
20014524:	e8730014 	lwi	r3, r19, 20
20014528:	64630402 	bslli	r3, r3, 2
2001452c:	10651800 	addk	r3, r5, r3
20014530:	e8630000 	lwi	r3, r3, 0
20014534:	14632000 	rsubk	r3, r3, r4
}
20014538:	10330000 	addk	r1, r19, r0
2001453c:	ea610004 	lwi	r19, r1, 4
20014540:	ea810008 	lwi	r20, r1, 8
20014544:	3021000c 	addik	r1, r1, 12
20014548:	b60f0008 	rtsd	r15, 8
2001454c:	80000000 	or	r0, r0, r0

20014550 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20014550:	3021fff0 	addik	r1, r1, -16
20014554:	fa610008 	swi	r19, r1, 8
20014558:	fa81000c 	swi	r20, r1, 12
2001455c:	12610000 	addk	r19, r1, r0
20014560:	96808000 	mfs	r20, rpc
20014564:	b000dffe 	imm	-8194
20014568:	3294d3fc 	addik	r20, r20, -11268
2001456c:	f8b30014 	swi	r5, r19, 20
20014570:	f8d30018 	swi	r6, r19, 24
20014574:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20014578:	f8130004 	swi	r0, r19, 4
2001457c:	b800005c 	bri	92		// 200145d8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20014580:	e8730014 	lwi	r3, r19, 20
20014584:	e8830000 	lwi	r4, r3, 0
20014588:	e8730014 	lwi	r3, r19, 20
2001458c:	e8a3000c 	lwi	r5, r3, 12
20014590:	e8730004 	lwi	r3, r19, 4
20014594:	64630402 	bslli	r3, r3, 2
20014598:	10651800 	addk	r3, r5, r3
2001459c:	e8a30000 	lwi	r5, r3, 0
200145a0:	e8730014 	lwi	r3, r19, 20
200145a4:	e8630010 	lwi	r3, r3, 16
200145a8:	e8630000 	lwi	r3, r3, 0
200145ac:	14632800 	rsubk	r3, r3, r5
200145b0:	10641800 	addk	r3, r4, r3
200145b4:	30830001 	addik	r4, r3, 1
200145b8:	e873001c 	lwi	r3, r19, 28
200145bc:	16441803 	cmpu	r18, r4, r3
200145c0:	bc52000c 	blti	r18, 12		// 200145cc
            return 0;
200145c4:	10600000 	addk	r3, r0, r0
200145c8:	b8000024 	bri	36		// 200145ec
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200145cc:	e8730004 	lwi	r3, r19, 4
200145d0:	30630001 	addik	r3, r3, 1
200145d4:	f8730004 	swi	r3, r19, 4
200145d8:	e8930004 	lwi	r4, r19, 4
200145dc:	e8730018 	lwi	r3, r19, 24
200145e0:	16432003 	cmpu	r18, r3, r4
200145e4:	bc52ff9c 	blti	r18, -100		// 20014580
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200145e8:	30600001 	addik	r3, r0, 1
}
200145ec:	10330000 	addk	r1, r19, r0
200145f0:	ea610008 	lwi	r19, r1, 8
200145f4:	ea81000c 	lwi	r20, r1, 12
200145f8:	30210010 	addik	r1, r1, 16
200145fc:	b60f0008 	rtsd	r15, 8
20014600:	80000000 	or	r0, r0, r0

20014604 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20014604:	3021ffe8 	addik	r1, r1, -24
20014608:	fa610010 	swi	r19, r1, 16
2001460c:	fa810014 	swi	r20, r1, 20
20014610:	12610000 	addk	r19, r1, r0
20014614:	96808000 	mfs	r20, rpc
20014618:	b000dffe 	imm	-8194
2001461c:	3294d348 	addik	r20, r20, -11448
20014620:	f8b3001c 	swi	r5, r19, 28
20014624:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20014628:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001462c:	f8130004 	swi	r0, r19, 4
20014630:	b8000054 	bri	84		// 20014684
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20014634:	e873001c 	lwi	r3, r19, 28
20014638:	e8630010 	lwi	r3, r3, 16
2001463c:	e8830000 	lwi	r4, r3, 0
20014640:	e873001c 	lwi	r3, r19, 28
20014644:	e8a3000c 	lwi	r5, r3, 12
20014648:	e8730004 	lwi	r3, r19, 4
2001464c:	64630402 	bslli	r3, r3, 2
20014650:	10651800 	addk	r3, r5, r3
20014654:	e8630000 	lwi	r3, r3, 0
20014658:	14632000 	rsubk	r3, r3, r4
2001465c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20014660:	e8930008 	lwi	r4, r19, 8
20014664:	e873000c 	lwi	r3, r19, 12
20014668:	16441803 	cmpu	r18, r4, r3
2001466c:	bcb20008 	bgei	r18, 8		// 20014674
20014670:	10640000 	addk	r3, r4, r0
20014674:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20014678:	e8730004 	lwi	r3, r19, 4
2001467c:	30630001 	addik	r3, r3, 1
20014680:	f8730004 	swi	r3, r19, 4
20014684:	e8930004 	lwi	r4, r19, 4
20014688:	e8730020 	lwi	r3, r19, 32
2001468c:	16432003 	cmpu	r18, r3, r4
20014690:	bc52ffa4 	blti	r18, -92		// 20014634
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20014694:	e873001c 	lwi	r3, r19, 28
20014698:	e8830000 	lwi	r4, r3, 0
2001469c:	e8730008 	lwi	r3, r19, 8
200146a0:	14632000 	rsubk	r3, r3, r4
}
200146a4:	10330000 	addk	r1, r19, r0
200146a8:	ea610010 	lwi	r19, r1, 16
200146ac:	ea810014 	lwi	r20, r1, 20
200146b0:	30210018 	addik	r1, r1, 24
200146b4:	b60f0008 	rtsd	r15, 8
200146b8:	80000000 	or	r0, r0, r0

200146bc <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200146bc:	3021fff0 	addik	r1, r1, -16
200146c0:	fa610008 	swi	r19, r1, 8
200146c4:	fa81000c 	swi	r20, r1, 12
200146c8:	12610000 	addk	r19, r1, r0
200146cc:	96808000 	mfs	r20, rpc
200146d0:	b000dffe 	imm	-8194
200146d4:	3294d290 	addik	r20, r20, -11632
200146d8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200146dc:	e8730014 	lwi	r3, r19, 20
200146e0:	e8630010 	lwi	r3, r3, 16
200146e4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200146e8:	f8130004 	swi	r0, r19, 4
200146ec:	b8000028 	bri	40		// 20014714
        fifo->read_inds[i] = 0;
200146f0:	e8730014 	lwi	r3, r19, 20
200146f4:	e883000c 	lwi	r4, r3, 12
200146f8:	e8730004 	lwi	r3, r19, 4
200146fc:	64630402 	bslli	r3, r3, 2
20014700:	10641800 	addk	r3, r4, r3
20014704:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20014708:	e8730004 	lwi	r3, r19, 4
2001470c:	30630001 	addik	r3, r3, 1
20014710:	f8730004 	swi	r3, r19, 4
20014714:	e8730014 	lwi	r3, r19, 20
20014718:	e8830008 	lwi	r4, r3, 8
2001471c:	e8730004 	lwi	r3, r19, 4
20014720:	16441803 	cmpu	r18, r4, r3
20014724:	bc52ffcc 	blti	r18, -52		// 200146f0
        fifo->read_inds[i] = 0;
    }
}
20014728:	10330000 	addk	r1, r19, r0
2001472c:	ea610008 	lwi	r19, r1, 8
20014730:	ea81000c 	lwi	r20, r1, 12
20014734:	30210010 	addik	r1, r1, 16
20014738:	b60f0008 	rtsd	r15, 8
2001473c:	80000000 	or	r0, r0, r0

20014740 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20014740:	3021fff0 	addik	r1, r1, -16
20014744:	fa610008 	swi	r19, r1, 8
20014748:	fa81000c 	swi	r20, r1, 12
2001474c:	12610000 	addk	r19, r1, r0
20014750:	96808000 	mfs	r20, rpc
20014754:	b000dffe 	imm	-8194
20014758:	3294d20c 	addik	r20, r20, -11764
2001475c:	f8b30014 	swi	r5, r19, 20
20014760:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20014764:	e8730014 	lwi	r3, r19, 20
20014768:	e8830004 	lwi	r4, r3, 4
2001476c:	e8730014 	lwi	r3, r19, 20
20014770:	e8a3000c 	lwi	r5, r3, 12
20014774:	e8730018 	lwi	r3, r19, 24
20014778:	64630402 	bslli	r3, r3, 2
2001477c:	10651800 	addk	r3, r5, r3
20014780:	e8a30000 	lwi	r5, r3, 0
20014784:	e8730014 	lwi	r3, r19, 20
20014788:	e8630000 	lwi	r3, r3, 0
2001478c:	3063ffff 	addik	r3, r3, -1
20014790:	84651800 	and	r3, r5, r3
20014794:	10631800 	addk	r3, r3, r3
20014798:	10641800 	addk	r3, r4, r3
2001479c:	e4630000 	lhui	r3, r3, 0
200147a0:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200147a4:	e8730014 	lwi	r3, r19, 20
200147a8:	e883000c 	lwi	r4, r3, 12
200147ac:	e8730018 	lwi	r3, r19, 24
200147b0:	64630402 	bslli	r3, r3, 2
200147b4:	10641800 	addk	r3, r4, r3
200147b8:	e8830000 	lwi	r4, r3, 0
200147bc:	30840001 	addik	r4, r4, 1
200147c0:	f8830000 	swi	r4, r3, 0
    return value;
200147c4:	e4730004 	lhui	r3, r19, 4
200147c8:	90630061 	sext16	r3, r3
}
200147cc:	10330000 	addk	r1, r19, r0
200147d0:	ea610008 	lwi	r19, r1, 8
200147d4:	ea81000c 	lwi	r20, r1, 12
200147d8:	30210010 	addik	r1, r1, 16
200147dc:	b60f0008 	rtsd	r15, 8
200147e0:	80000000 	or	r0, r0, r0

200147e4 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200147e4:	3021fff4 	addik	r1, r1, -12
200147e8:	fa610004 	swi	r19, r1, 4
200147ec:	fa810008 	swi	r20, r1, 8
200147f0:	12610000 	addk	r19, r1, r0
200147f4:	96808000 	mfs	r20, rpc
200147f8:	b000dffe 	imm	-8194
200147fc:	3294d168 	addik	r20, r20, -11928
20014800:	f8b30010 	swi	r5, r19, 16
20014804:	10660000 	addk	r3, r6, r0
20014808:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001480c:	e8730010 	lwi	r3, r19, 16
20014810:	e8830004 	lwi	r4, r3, 4
20014814:	e8730010 	lwi	r3, r19, 16
20014818:	e8630010 	lwi	r3, r3, 16
2001481c:	e8a30000 	lwi	r5, r3, 0
20014820:	e8730010 	lwi	r3, r19, 16
20014824:	e8630000 	lwi	r3, r3, 0
20014828:	3063ffff 	addik	r3, r3, -1
2001482c:	84651800 	and	r3, r5, r3
20014830:	10631800 	addk	r3, r3, r3
20014834:	10641800 	addk	r3, r4, r3
20014838:	e4930014 	lhui	r4, r19, 20
2001483c:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20014840:	e8730010 	lwi	r3, r19, 16
20014844:	e8630010 	lwi	r3, r3, 16
20014848:	e8830000 	lwi	r4, r3, 0
2001484c:	30840001 	addik	r4, r4, 1
20014850:	f8830000 	swi	r4, r3, 0
}
20014854:	10330000 	addk	r1, r19, r0
20014858:	ea610004 	lwi	r19, r1, 4
2001485c:	ea810008 	lwi	r20, r1, 8
20014860:	3021000c 	addik	r1, r1, 12
20014864:	b60f0008 	rtsd	r15, 8
20014868:	80000000 	or	r0, r0, r0

2001486c <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001486c:	3021fff4 	addik	r1, r1, -12
20014870:	fa610004 	swi	r19, r1, 4
20014874:	fa810008 	swi	r20, r1, 8
20014878:	12610000 	addk	r19, r1, r0
2001487c:	96808000 	mfs	r20, rpc
20014880:	b000dffe 	imm	-8194
20014884:	3294d0e0 	addik	r20, r20, -12064
20014888:	f8b30010 	swi	r5, r19, 16
2001488c:	f8d30014 	swi	r6, r19, 20
20014890:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20014894:	e8730010 	lwi	r3, r19, 16
20014898:	e8630010 	lwi	r3, r3, 16
2001489c:	e8830000 	lwi	r4, r3, 0
200148a0:	e8730010 	lwi	r3, r19, 16
200148a4:	e8a3000c 	lwi	r5, r3, 12
200148a8:	e8730014 	lwi	r3, r19, 20
200148ac:	64630402 	bslli	r3, r3, 2
200148b0:	10651800 	addk	r3, r5, r3
200148b4:	e8630000 	lwi	r3, r3, 0
200148b8:	14a32000 	rsubk	r5, r3, r4
200148bc:	30600001 	addik	r3, r0, 1
200148c0:	e8930018 	lwi	r4, r19, 24
200148c4:	16442803 	cmpu	r18, r4, r5
200148c8:	bcb20008 	bgei	r18, 8		// 200148d0
200148cc:	10600000 	addk	r3, r0, r0
200148d0:	a46300ff 	andi	r3, r3, 255
}
200148d4:	10330000 	addk	r1, r19, r0
200148d8:	ea610004 	lwi	r19, r1, 4
200148dc:	ea810008 	lwi	r20, r1, 8
200148e0:	3021000c 	addik	r1, r1, 12
200148e4:	b60f0008 	rtsd	r15, 8
200148e8:	80000000 	or	r0, r0, r0

200148ec <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200148ec:	3021fff4 	addik	r1, r1, -12
200148f0:	fa610004 	swi	r19, r1, 4
200148f4:	fa810008 	swi	r20, r1, 8
200148f8:	12610000 	addk	r19, r1, r0
200148fc:	96808000 	mfs	r20, rpc
20014900:	b000dffe 	imm	-8194
20014904:	3294d060 	addik	r20, r20, -12192
20014908:	f8b30010 	swi	r5, r19, 16
2001490c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20014910:	e8730010 	lwi	r3, r19, 16
20014914:	e8630010 	lwi	r3, r3, 16
20014918:	e8830000 	lwi	r4, r3, 0
2001491c:	e8730010 	lwi	r3, r19, 16
20014920:	e8a3000c 	lwi	r5, r3, 12
20014924:	e8730014 	lwi	r3, r19, 20
20014928:	64630402 	bslli	r3, r3, 2
2001492c:	10651800 	addk	r3, r5, r3
20014930:	e8630000 	lwi	r3, r3, 0
20014934:	14632000 	rsubk	r3, r3, r4
}
20014938:	10330000 	addk	r1, r19, r0
2001493c:	ea610004 	lwi	r19, r1, 4
20014940:	ea810008 	lwi	r20, r1, 8
20014944:	3021000c 	addik	r1, r1, 12
20014948:	b60f0008 	rtsd	r15, 8
2001494c:	80000000 	or	r0, r0, r0

20014950 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20014950:	3021fff0 	addik	r1, r1, -16
20014954:	fa610008 	swi	r19, r1, 8
20014958:	fa81000c 	swi	r20, r1, 12
2001495c:	12610000 	addk	r19, r1, r0
20014960:	96808000 	mfs	r20, rpc
20014964:	b000dffe 	imm	-8194
20014968:	3294cffc 	addik	r20, r20, -12292
2001496c:	f8b30014 	swi	r5, r19, 20
20014970:	f8d30018 	swi	r6, r19, 24
20014974:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20014978:	f8130004 	swi	r0, r19, 4
2001497c:	b800005c 	bri	92		// 200149d8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20014980:	e8730014 	lwi	r3, r19, 20
20014984:	e8830000 	lwi	r4, r3, 0
20014988:	e8730014 	lwi	r3, r19, 20
2001498c:	e8a3000c 	lwi	r5, r3, 12
20014990:	e8730004 	lwi	r3, r19, 4
20014994:	64630402 	bslli	r3, r3, 2
20014998:	10651800 	addk	r3, r5, r3
2001499c:	e8a30000 	lwi	r5, r3, 0
200149a0:	e8730014 	lwi	r3, r19, 20
200149a4:	e8630010 	lwi	r3, r3, 16
200149a8:	e8630000 	lwi	r3, r3, 0
200149ac:	14632800 	rsubk	r3, r3, r5
200149b0:	10641800 	addk	r3, r4, r3
200149b4:	30830001 	addik	r4, r3, 1
200149b8:	e873001c 	lwi	r3, r19, 28
200149bc:	16441803 	cmpu	r18, r4, r3
200149c0:	bc52000c 	blti	r18, 12		// 200149cc
            return 0;
200149c4:	10600000 	addk	r3, r0, r0
200149c8:	b8000024 	bri	36		// 200149ec
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200149cc:	e8730004 	lwi	r3, r19, 4
200149d0:	30630001 	addik	r3, r3, 1
200149d4:	f8730004 	swi	r3, r19, 4
200149d8:	e8930004 	lwi	r4, r19, 4
200149dc:	e8730018 	lwi	r3, r19, 24
200149e0:	16432003 	cmpu	r18, r3, r4
200149e4:	bc52ff9c 	blti	r18, -100		// 20014980
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200149e8:	30600001 	addik	r3, r0, 1
}
200149ec:	10330000 	addk	r1, r19, r0
200149f0:	ea610008 	lwi	r19, r1, 8
200149f4:	ea81000c 	lwi	r20, r1, 12
200149f8:	30210010 	addik	r1, r1, 16
200149fc:	b60f0008 	rtsd	r15, 8
20014a00:	80000000 	or	r0, r0, r0

20014a04 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20014a04:	3021ffe8 	addik	r1, r1, -24
20014a08:	fa610010 	swi	r19, r1, 16
20014a0c:	fa810014 	swi	r20, r1, 20
20014a10:	12610000 	addk	r19, r1, r0
20014a14:	96808000 	mfs	r20, rpc
20014a18:	b000dffe 	imm	-8194
20014a1c:	3294cf48 	addik	r20, r20, -12472
20014a20:	f8b3001c 	swi	r5, r19, 28
20014a24:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20014a28:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20014a2c:	f8130004 	swi	r0, r19, 4
20014a30:	b8000054 	bri	84		// 20014a84
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20014a34:	e873001c 	lwi	r3, r19, 28
20014a38:	e8630010 	lwi	r3, r3, 16
20014a3c:	e8830000 	lwi	r4, r3, 0
20014a40:	e873001c 	lwi	r3, r19, 28
20014a44:	e8a3000c 	lwi	r5, r3, 12
20014a48:	e8730004 	lwi	r3, r19, 4
20014a4c:	64630402 	bslli	r3, r3, 2
20014a50:	10651800 	addk	r3, r5, r3
20014a54:	e8630000 	lwi	r3, r3, 0
20014a58:	14632000 	rsubk	r3, r3, r4
20014a5c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20014a60:	e8930008 	lwi	r4, r19, 8
20014a64:	e873000c 	lwi	r3, r19, 12
20014a68:	16441803 	cmpu	r18, r4, r3
20014a6c:	bcb20008 	bgei	r18, 8		// 20014a74
20014a70:	10640000 	addk	r3, r4, r0
20014a74:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20014a78:	e8730004 	lwi	r3, r19, 4
20014a7c:	30630001 	addik	r3, r3, 1
20014a80:	f8730004 	swi	r3, r19, 4
20014a84:	e8930004 	lwi	r4, r19, 4
20014a88:	e8730020 	lwi	r3, r19, 32
20014a8c:	16432003 	cmpu	r18, r3, r4
20014a90:	bc52ffa4 	blti	r18, -92		// 20014a34
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20014a94:	e873001c 	lwi	r3, r19, 28
20014a98:	e8830000 	lwi	r4, r3, 0
20014a9c:	e8730008 	lwi	r3, r19, 8
20014aa0:	14632000 	rsubk	r3, r3, r4
}
20014aa4:	10330000 	addk	r1, r19, r0
20014aa8:	ea610010 	lwi	r19, r1, 16
20014aac:	ea810014 	lwi	r20, r1, 20
20014ab0:	30210018 	addik	r1, r1, 24
20014ab4:	b60f0008 	rtsd	r15, 8
20014ab8:	80000000 	or	r0, r0, r0

20014abc <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20014abc:	3021fff0 	addik	r1, r1, -16
20014ac0:	fa610008 	swi	r19, r1, 8
20014ac4:	fa81000c 	swi	r20, r1, 12
20014ac8:	12610000 	addk	r19, r1, r0
20014acc:	96808000 	mfs	r20, rpc
20014ad0:	b000dffe 	imm	-8194
20014ad4:	3294ce90 	addik	r20, r20, -12656
20014ad8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20014adc:	e8730014 	lwi	r3, r19, 20
20014ae0:	e8630010 	lwi	r3, r3, 16
20014ae4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20014ae8:	f8130004 	swi	r0, r19, 4
20014aec:	b8000028 	bri	40		// 20014b14
        fifo->read_inds[i] = 0;
20014af0:	e8730014 	lwi	r3, r19, 20
20014af4:	e883000c 	lwi	r4, r3, 12
20014af8:	e8730004 	lwi	r3, r19, 4
20014afc:	64630402 	bslli	r3, r3, 2
20014b00:	10641800 	addk	r3, r4, r3
20014b04:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20014b08:	e8730004 	lwi	r3, r19, 4
20014b0c:	30630001 	addik	r3, r3, 1
20014b10:	f8730004 	swi	r3, r19, 4
20014b14:	e8730014 	lwi	r3, r19, 20
20014b18:	e8830008 	lwi	r4, r3, 8
20014b1c:	e8730004 	lwi	r3, r19, 4
20014b20:	16441803 	cmpu	r18, r4, r3
20014b24:	bc52ffcc 	blti	r18, -52		// 20014af0
        fifo->read_inds[i] = 0;
    }
}
20014b28:	10330000 	addk	r1, r19, r0
20014b2c:	ea610008 	lwi	r19, r1, 8
20014b30:	ea81000c 	lwi	r20, r1, 12
20014b34:	30210010 	addik	r1, r1, 16
20014b38:	b60f0008 	rtsd	r15, 8
20014b3c:	80000000 	or	r0, r0, r0

20014b40 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20014b40:	3021fff0 	addik	r1, r1, -16
20014b44:	fa610008 	swi	r19, r1, 8
20014b48:	fa81000c 	swi	r20, r1, 12
20014b4c:	12610000 	addk	r19, r1, r0
20014b50:	96808000 	mfs	r20, rpc
20014b54:	b000dffe 	imm	-8194
20014b58:	3294ce0c 	addik	r20, r20, -12788
20014b5c:	f8b30014 	swi	r5, r19, 20
20014b60:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20014b64:	e8730014 	lwi	r3, r19, 20
20014b68:	e8830004 	lwi	r4, r3, 4
20014b6c:	e8730014 	lwi	r3, r19, 20
20014b70:	e8a3000c 	lwi	r5, r3, 12
20014b74:	e8730018 	lwi	r3, r19, 24
20014b78:	64630402 	bslli	r3, r3, 2
20014b7c:	10651800 	addk	r3, r5, r3
20014b80:	e8a30000 	lwi	r5, r3, 0
20014b84:	e8730014 	lwi	r3, r19, 20
20014b88:	e8630000 	lwi	r3, r3, 0
20014b8c:	3063ffff 	addik	r3, r3, -1
20014b90:	84651800 	and	r3, r5, r3
20014b94:	64630402 	bslli	r3, r3, 2
20014b98:	10641800 	addk	r3, r4, r3
20014b9c:	e8630000 	lwi	r3, r3, 0
20014ba0:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20014ba4:	e8730014 	lwi	r3, r19, 20
20014ba8:	e883000c 	lwi	r4, r3, 12
20014bac:	e8730018 	lwi	r3, r19, 24
20014bb0:	64630402 	bslli	r3, r3, 2
20014bb4:	10641800 	addk	r3, r4, r3
20014bb8:	e8830000 	lwi	r4, r3, 0
20014bbc:	30840001 	addik	r4, r4, 1
20014bc0:	f8830000 	swi	r4, r3, 0
    return value;
20014bc4:	e8730004 	lwi	r3, r19, 4
}
20014bc8:	10330000 	addk	r1, r19, r0
20014bcc:	ea610008 	lwi	r19, r1, 8
20014bd0:	ea81000c 	lwi	r20, r1, 12
20014bd4:	30210010 	addik	r1, r1, 16
20014bd8:	b60f0008 	rtsd	r15, 8
20014bdc:	80000000 	or	r0, r0, r0

20014be0 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20014be0:	3021fff4 	addik	r1, r1, -12
20014be4:	fa610004 	swi	r19, r1, 4
20014be8:	fa810008 	swi	r20, r1, 8
20014bec:	12610000 	addk	r19, r1, r0
20014bf0:	96808000 	mfs	r20, rpc
20014bf4:	b000dffe 	imm	-8194
20014bf8:	3294cd6c 	addik	r20, r20, -12948
20014bfc:	f8b30010 	swi	r5, r19, 16
20014c00:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20014c04:	e8730010 	lwi	r3, r19, 16
20014c08:	e8830004 	lwi	r4, r3, 4
20014c0c:	e8730010 	lwi	r3, r19, 16
20014c10:	e8630010 	lwi	r3, r3, 16
20014c14:	e8a30000 	lwi	r5, r3, 0
20014c18:	e8730010 	lwi	r3, r19, 16
20014c1c:	e8630000 	lwi	r3, r3, 0
20014c20:	3063ffff 	addik	r3, r3, -1
20014c24:	84651800 	and	r3, r5, r3
20014c28:	64630402 	bslli	r3, r3, 2
20014c2c:	10641800 	addk	r3, r4, r3
20014c30:	e8930014 	lwi	r4, r19, 20
20014c34:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20014c38:	e8730010 	lwi	r3, r19, 16
20014c3c:	e8630010 	lwi	r3, r3, 16
20014c40:	e8830000 	lwi	r4, r3, 0
20014c44:	30840001 	addik	r4, r4, 1
20014c48:	f8830000 	swi	r4, r3, 0
}
20014c4c:	10330000 	addk	r1, r19, r0
20014c50:	ea610004 	lwi	r19, r1, 4
20014c54:	ea810008 	lwi	r20, r1, 8
20014c58:	3021000c 	addik	r1, r1, 12
20014c5c:	b60f0008 	rtsd	r15, 8
20014c60:	80000000 	or	r0, r0, r0

20014c64 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20014c64:	3021fff4 	addik	r1, r1, -12
20014c68:	fa610004 	swi	r19, r1, 4
20014c6c:	fa810008 	swi	r20, r1, 8
20014c70:	12610000 	addk	r19, r1, r0
20014c74:	96808000 	mfs	r20, rpc
20014c78:	b000dffe 	imm	-8194
20014c7c:	3294cce8 	addik	r20, r20, -13080
20014c80:	f8b30010 	swi	r5, r19, 16
20014c84:	f8d30014 	swi	r6, r19, 20
20014c88:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20014c8c:	e8730010 	lwi	r3, r19, 16
20014c90:	e8630010 	lwi	r3, r3, 16
20014c94:	e8830000 	lwi	r4, r3, 0
20014c98:	e8730010 	lwi	r3, r19, 16
20014c9c:	e8a3000c 	lwi	r5, r3, 12
20014ca0:	e8730014 	lwi	r3, r19, 20
20014ca4:	64630402 	bslli	r3, r3, 2
20014ca8:	10651800 	addk	r3, r5, r3
20014cac:	e8630000 	lwi	r3, r3, 0
20014cb0:	14a32000 	rsubk	r5, r3, r4
20014cb4:	30600001 	addik	r3, r0, 1
20014cb8:	e8930018 	lwi	r4, r19, 24
20014cbc:	16442803 	cmpu	r18, r4, r5
20014cc0:	bcb20008 	bgei	r18, 8		// 20014cc8
20014cc4:	10600000 	addk	r3, r0, r0
20014cc8:	a46300ff 	andi	r3, r3, 255
}
20014ccc:	10330000 	addk	r1, r19, r0
20014cd0:	ea610004 	lwi	r19, r1, 4
20014cd4:	ea810008 	lwi	r20, r1, 8
20014cd8:	3021000c 	addik	r1, r1, 12
20014cdc:	b60f0008 	rtsd	r15, 8
20014ce0:	80000000 	or	r0, r0, r0

20014ce4 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20014ce4:	3021fff4 	addik	r1, r1, -12
20014ce8:	fa610004 	swi	r19, r1, 4
20014cec:	fa810008 	swi	r20, r1, 8
20014cf0:	12610000 	addk	r19, r1, r0
20014cf4:	96808000 	mfs	r20, rpc
20014cf8:	b000dffe 	imm	-8194
20014cfc:	3294cc68 	addik	r20, r20, -13208
20014d00:	f8b30010 	swi	r5, r19, 16
20014d04:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20014d08:	e8730010 	lwi	r3, r19, 16
20014d0c:	e8630010 	lwi	r3, r3, 16
20014d10:	e8830000 	lwi	r4, r3, 0
20014d14:	e8730010 	lwi	r3, r19, 16
20014d18:	e8a3000c 	lwi	r5, r3, 12
20014d1c:	e8730014 	lwi	r3, r19, 20
20014d20:	64630402 	bslli	r3, r3, 2
20014d24:	10651800 	addk	r3, r5, r3
20014d28:	e8630000 	lwi	r3, r3, 0
20014d2c:	14632000 	rsubk	r3, r3, r4
}
20014d30:	10330000 	addk	r1, r19, r0
20014d34:	ea610004 	lwi	r19, r1, 4
20014d38:	ea810008 	lwi	r20, r1, 8
20014d3c:	3021000c 	addik	r1, r1, 12
20014d40:	b60f0008 	rtsd	r15, 8
20014d44:	80000000 	or	r0, r0, r0

20014d48 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20014d48:	3021fff0 	addik	r1, r1, -16
20014d4c:	fa610008 	swi	r19, r1, 8
20014d50:	fa81000c 	swi	r20, r1, 12
20014d54:	12610000 	addk	r19, r1, r0
20014d58:	96808000 	mfs	r20, rpc
20014d5c:	b000dffe 	imm	-8194
20014d60:	3294cc04 	addik	r20, r20, -13308
20014d64:	f8b30014 	swi	r5, r19, 20
20014d68:	f8d30018 	swi	r6, r19, 24
20014d6c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20014d70:	f8130004 	swi	r0, r19, 4
20014d74:	b800005c 	bri	92		// 20014dd0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20014d78:	e8730014 	lwi	r3, r19, 20
20014d7c:	e8830000 	lwi	r4, r3, 0
20014d80:	e8730014 	lwi	r3, r19, 20
20014d84:	e8a3000c 	lwi	r5, r3, 12
20014d88:	e8730004 	lwi	r3, r19, 4
20014d8c:	64630402 	bslli	r3, r3, 2
20014d90:	10651800 	addk	r3, r5, r3
20014d94:	e8a30000 	lwi	r5, r3, 0
20014d98:	e8730014 	lwi	r3, r19, 20
20014d9c:	e8630010 	lwi	r3, r3, 16
20014da0:	e8630000 	lwi	r3, r3, 0
20014da4:	14632800 	rsubk	r3, r3, r5
20014da8:	10641800 	addk	r3, r4, r3
20014dac:	30830001 	addik	r4, r3, 1
20014db0:	e873001c 	lwi	r3, r19, 28
20014db4:	16441803 	cmpu	r18, r4, r3
20014db8:	bc52000c 	blti	r18, 12		// 20014dc4
            return 0;
20014dbc:	10600000 	addk	r3, r0, r0
20014dc0:	b8000024 	bri	36		// 20014de4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20014dc4:	e8730004 	lwi	r3, r19, 4
20014dc8:	30630001 	addik	r3, r3, 1
20014dcc:	f8730004 	swi	r3, r19, 4
20014dd0:	e8930004 	lwi	r4, r19, 4
20014dd4:	e8730018 	lwi	r3, r19, 24
20014dd8:	16432003 	cmpu	r18, r3, r4
20014ddc:	bc52ff9c 	blti	r18, -100		// 20014d78
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20014de0:	30600001 	addik	r3, r0, 1
}
20014de4:	10330000 	addk	r1, r19, r0
20014de8:	ea610008 	lwi	r19, r1, 8
20014dec:	ea81000c 	lwi	r20, r1, 12
20014df0:	30210010 	addik	r1, r1, 16
20014df4:	b60f0008 	rtsd	r15, 8
20014df8:	80000000 	or	r0, r0, r0

20014dfc <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20014dfc:	3021ffe8 	addik	r1, r1, -24
20014e00:	fa610010 	swi	r19, r1, 16
20014e04:	fa810014 	swi	r20, r1, 20
20014e08:	12610000 	addk	r19, r1, r0
20014e0c:	96808000 	mfs	r20, rpc
20014e10:	b000dffe 	imm	-8194
20014e14:	3294cb50 	addik	r20, r20, -13488
20014e18:	f8b3001c 	swi	r5, r19, 28
20014e1c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20014e20:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20014e24:	f8130004 	swi	r0, r19, 4
20014e28:	b8000054 	bri	84		// 20014e7c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20014e2c:	e873001c 	lwi	r3, r19, 28
20014e30:	e8630010 	lwi	r3, r3, 16
20014e34:	e8830000 	lwi	r4, r3, 0
20014e38:	e873001c 	lwi	r3, r19, 28
20014e3c:	e8a3000c 	lwi	r5, r3, 12
20014e40:	e8730004 	lwi	r3, r19, 4
20014e44:	64630402 	bslli	r3, r3, 2
20014e48:	10651800 	addk	r3, r5, r3
20014e4c:	e8630000 	lwi	r3, r3, 0
20014e50:	14632000 	rsubk	r3, r3, r4
20014e54:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20014e58:	e8930008 	lwi	r4, r19, 8
20014e5c:	e873000c 	lwi	r3, r19, 12
20014e60:	16441803 	cmpu	r18, r4, r3
20014e64:	bcb20008 	bgei	r18, 8		// 20014e6c
20014e68:	10640000 	addk	r3, r4, r0
20014e6c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20014e70:	e8730004 	lwi	r3, r19, 4
20014e74:	30630001 	addik	r3, r3, 1
20014e78:	f8730004 	swi	r3, r19, 4
20014e7c:	e8930004 	lwi	r4, r19, 4
20014e80:	e8730020 	lwi	r3, r19, 32
20014e84:	16432003 	cmpu	r18, r3, r4
20014e88:	bc52ffa4 	blti	r18, -92		// 20014e2c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20014e8c:	e873001c 	lwi	r3, r19, 28
20014e90:	e8830000 	lwi	r4, r3, 0
20014e94:	e8730008 	lwi	r3, r19, 8
20014e98:	14632000 	rsubk	r3, r3, r4
}
20014e9c:	10330000 	addk	r1, r19, r0
20014ea0:	ea610010 	lwi	r19, r1, 16
20014ea4:	ea810014 	lwi	r20, r1, 20
20014ea8:	30210018 	addik	r1, r1, 24
20014eac:	b60f0008 	rtsd	r15, 8
20014eb0:	80000000 	or	r0, r0, r0

20014eb4 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20014eb4:	3021fff0 	addik	r1, r1, -16
20014eb8:	fa610008 	swi	r19, r1, 8
20014ebc:	fa81000c 	swi	r20, r1, 12
20014ec0:	12610000 	addk	r19, r1, r0
20014ec4:	96808000 	mfs	r20, rpc
20014ec8:	b000dffe 	imm	-8194
20014ecc:	3294ca98 	addik	r20, r20, -13672
20014ed0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20014ed4:	e8730014 	lwi	r3, r19, 20
20014ed8:	e8630010 	lwi	r3, r3, 16
20014edc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20014ee0:	f8130004 	swi	r0, r19, 4
20014ee4:	b8000028 	bri	40		// 20014f0c
        fifo->read_inds[i] = 0;
20014ee8:	e8730014 	lwi	r3, r19, 20
20014eec:	e883000c 	lwi	r4, r3, 12
20014ef0:	e8730004 	lwi	r3, r19, 4
20014ef4:	64630402 	bslli	r3, r3, 2
20014ef8:	10641800 	addk	r3, r4, r3
20014efc:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20014f00:	e8730004 	lwi	r3, r19, 4
20014f04:	30630001 	addik	r3, r3, 1
20014f08:	f8730004 	swi	r3, r19, 4
20014f0c:	e8730014 	lwi	r3, r19, 20
20014f10:	e8830008 	lwi	r4, r3, 8
20014f14:	e8730004 	lwi	r3, r19, 4
20014f18:	16441803 	cmpu	r18, r4, r3
20014f1c:	bc52ffcc 	blti	r18, -52		// 20014ee8
        fifo->read_inds[i] = 0;
    }
}
20014f20:	10330000 	addk	r1, r19, r0
20014f24:	ea610008 	lwi	r19, r1, 8
20014f28:	ea81000c 	lwi	r20, r1, 12
20014f2c:	30210010 	addik	r1, r1, 16
20014f30:	b60f0008 	rtsd	r15, 8
20014f34:	80000000 	or	r0, r0, r0

20014f38 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20014f38:	3021ffec 	addik	r1, r1, -20
20014f3c:	fa61000c 	swi	r19, r1, 12
20014f40:	fa810010 	swi	r20, r1, 16
20014f44:	12610000 	addk	r19, r1, r0
20014f48:	96808000 	mfs	r20, rpc
20014f4c:	b000dffe 	imm	-8194
20014f50:	3294ca14 	addik	r20, r20, -13804
20014f54:	f8b30018 	swi	r5, r19, 24
20014f58:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20014f5c:	e8730018 	lwi	r3, r19, 24
20014f60:	e8830004 	lwi	r4, r3, 4
20014f64:	e8730018 	lwi	r3, r19, 24
20014f68:	e8a3000c 	lwi	r5, r3, 12
20014f6c:	e873001c 	lwi	r3, r19, 28
20014f70:	64630402 	bslli	r3, r3, 2
20014f74:	10651800 	addk	r3, r5, r3
20014f78:	e8a30000 	lwi	r5, r3, 0
20014f7c:	e8730018 	lwi	r3, r19, 24
20014f80:	e8630000 	lwi	r3, r3, 0
20014f84:	3063ffff 	addik	r3, r3, -1
20014f88:	84651800 	and	r3, r5, r3
20014f8c:	64630403 	bslli	r3, r3, 3
20014f90:	10641800 	addk	r3, r4, r3
20014f94:	e8830000 	lwi	r4, r3, 0
20014f98:	e8a30004 	lwi	r5, r3, 4
20014f9c:	f8930004 	swi	r4, r19, 4
20014fa0:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20014fa4:	e8730018 	lwi	r3, r19, 24
20014fa8:	e883000c 	lwi	r4, r3, 12
20014fac:	e873001c 	lwi	r3, r19, 28
20014fb0:	64630402 	bslli	r3, r3, 2
20014fb4:	10641800 	addk	r3, r4, r3
20014fb8:	e8830000 	lwi	r4, r3, 0
20014fbc:	30840001 	addik	r4, r4, 1
20014fc0:	f8830000 	swi	r4, r3, 0
    return value;
20014fc4:	e8930004 	lwi	r4, r19, 4
20014fc8:	e8b30008 	lwi	r5, r19, 8
}
20014fcc:	10640000 	addk	r3, r4, r0
20014fd0:	10850000 	addk	r4, r5, r0
20014fd4:	10330000 	addk	r1, r19, r0
20014fd8:	ea61000c 	lwi	r19, r1, 12
20014fdc:	ea810010 	lwi	r20, r1, 16
20014fe0:	30210014 	addik	r1, r1, 20
20014fe4:	b60f0008 	rtsd	r15, 8
20014fe8:	80000000 	or	r0, r0, r0

20014fec <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20014fec:	3021fff4 	addik	r1, r1, -12
20014ff0:	fa610004 	swi	r19, r1, 4
20014ff4:	fa810008 	swi	r20, r1, 8
20014ff8:	12610000 	addk	r19, r1, r0
20014ffc:	96808000 	mfs	r20, rpc
20015000:	b000dffe 	imm	-8194
20015004:	3294c960 	addik	r20, r20, -13984
20015008:	f8b30010 	swi	r5, r19, 16
2001500c:	f8d30014 	swi	r6, r19, 20
20015010:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20015014:	e8730010 	lwi	r3, r19, 16
20015018:	e8830004 	lwi	r4, r3, 4
2001501c:	e8730010 	lwi	r3, r19, 16
20015020:	e8630010 	lwi	r3, r3, 16
20015024:	e8a30000 	lwi	r5, r3, 0
20015028:	e8730010 	lwi	r3, r19, 16
2001502c:	e8630000 	lwi	r3, r3, 0
20015030:	3063ffff 	addik	r3, r3, -1
20015034:	84651800 	and	r3, r5, r3
20015038:	64630403 	bslli	r3, r3, 3
2001503c:	10641800 	addk	r3, r4, r3
20015040:	e8930014 	lwi	r4, r19, 20
20015044:	e8b30018 	lwi	r5, r19, 24
20015048:	f8830000 	swi	r4, r3, 0
2001504c:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20015050:	e8730010 	lwi	r3, r19, 16
20015054:	e8630010 	lwi	r3, r3, 16
20015058:	e8830000 	lwi	r4, r3, 0
2001505c:	30840001 	addik	r4, r4, 1
20015060:	f8830000 	swi	r4, r3, 0
}
20015064:	10330000 	addk	r1, r19, r0
20015068:	ea610004 	lwi	r19, r1, 4
2001506c:	ea810008 	lwi	r20, r1, 8
20015070:	3021000c 	addik	r1, r1, 12
20015074:	b60f0008 	rtsd	r15, 8
20015078:	80000000 	or	r0, r0, r0

2001507c <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001507c:	3021fff4 	addik	r1, r1, -12
20015080:	fa610004 	swi	r19, r1, 4
20015084:	fa810008 	swi	r20, r1, 8
20015088:	12610000 	addk	r19, r1, r0
2001508c:	96808000 	mfs	r20, rpc
20015090:	b000dffe 	imm	-8194
20015094:	3294c8d0 	addik	r20, r20, -14128
20015098:	f8b30010 	swi	r5, r19, 16
2001509c:	f8d30014 	swi	r6, r19, 20
200150a0:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200150a4:	e8730010 	lwi	r3, r19, 16
200150a8:	e8630010 	lwi	r3, r3, 16
200150ac:	e8830000 	lwi	r4, r3, 0
200150b0:	e8730010 	lwi	r3, r19, 16
200150b4:	e8a3000c 	lwi	r5, r3, 12
200150b8:	e8730014 	lwi	r3, r19, 20
200150bc:	64630402 	bslli	r3, r3, 2
200150c0:	10651800 	addk	r3, r5, r3
200150c4:	e8630000 	lwi	r3, r3, 0
200150c8:	14a32000 	rsubk	r5, r3, r4
200150cc:	30600001 	addik	r3, r0, 1
200150d0:	e8930018 	lwi	r4, r19, 24
200150d4:	16442803 	cmpu	r18, r4, r5
200150d8:	bcb20008 	bgei	r18, 8		// 200150e0
200150dc:	10600000 	addk	r3, r0, r0
200150e0:	a46300ff 	andi	r3, r3, 255
}
200150e4:	10330000 	addk	r1, r19, r0
200150e8:	ea610004 	lwi	r19, r1, 4
200150ec:	ea810008 	lwi	r20, r1, 8
200150f0:	3021000c 	addik	r1, r1, 12
200150f4:	b60f0008 	rtsd	r15, 8
200150f8:	80000000 	or	r0, r0, r0

200150fc <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200150fc:	3021fff4 	addik	r1, r1, -12
20015100:	fa610004 	swi	r19, r1, 4
20015104:	fa810008 	swi	r20, r1, 8
20015108:	12610000 	addk	r19, r1, r0
2001510c:	96808000 	mfs	r20, rpc
20015110:	b000dffe 	imm	-8194
20015114:	3294c850 	addik	r20, r20, -14256
20015118:	f8b30010 	swi	r5, r19, 16
2001511c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20015120:	e8730010 	lwi	r3, r19, 16
20015124:	e8630010 	lwi	r3, r3, 16
20015128:	e8830000 	lwi	r4, r3, 0
2001512c:	e8730010 	lwi	r3, r19, 16
20015130:	e8a3000c 	lwi	r5, r3, 12
20015134:	e8730014 	lwi	r3, r19, 20
20015138:	64630402 	bslli	r3, r3, 2
2001513c:	10651800 	addk	r3, r5, r3
20015140:	e8630000 	lwi	r3, r3, 0
20015144:	14632000 	rsubk	r3, r3, r4
}
20015148:	10330000 	addk	r1, r19, r0
2001514c:	ea610004 	lwi	r19, r1, 4
20015150:	ea810008 	lwi	r20, r1, 8
20015154:	3021000c 	addik	r1, r1, 12
20015158:	b60f0008 	rtsd	r15, 8
2001515c:	80000000 	or	r0, r0, r0

20015160 <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20015160:	3021fff0 	addik	r1, r1, -16
20015164:	fa610008 	swi	r19, r1, 8
20015168:	fa81000c 	swi	r20, r1, 12
2001516c:	12610000 	addk	r19, r1, r0
20015170:	96808000 	mfs	r20, rpc
20015174:	b000dffe 	imm	-8194
20015178:	3294c7ec 	addik	r20, r20, -14356
2001517c:	f8b30014 	swi	r5, r19, 20
20015180:	f8d30018 	swi	r6, r19, 24
20015184:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20015188:	f8130004 	swi	r0, r19, 4
2001518c:	b800005c 	bri	92		// 200151e8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20015190:	e8730014 	lwi	r3, r19, 20
20015194:	e8830000 	lwi	r4, r3, 0
20015198:	e8730014 	lwi	r3, r19, 20
2001519c:	e8a3000c 	lwi	r5, r3, 12
200151a0:	e8730004 	lwi	r3, r19, 4
200151a4:	64630402 	bslli	r3, r3, 2
200151a8:	10651800 	addk	r3, r5, r3
200151ac:	e8a30000 	lwi	r5, r3, 0
200151b0:	e8730014 	lwi	r3, r19, 20
200151b4:	e8630010 	lwi	r3, r3, 16
200151b8:	e8630000 	lwi	r3, r3, 0
200151bc:	14632800 	rsubk	r3, r3, r5
200151c0:	10641800 	addk	r3, r4, r3
200151c4:	30830001 	addik	r4, r3, 1
200151c8:	e873001c 	lwi	r3, r19, 28
200151cc:	16441803 	cmpu	r18, r4, r3
200151d0:	bc52000c 	blti	r18, 12		// 200151dc
            return 0;
200151d4:	10600000 	addk	r3, r0, r0
200151d8:	b8000024 	bri	36		// 200151fc
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200151dc:	e8730004 	lwi	r3, r19, 4
200151e0:	30630001 	addik	r3, r3, 1
200151e4:	f8730004 	swi	r3, r19, 4
200151e8:	e8930004 	lwi	r4, r19, 4
200151ec:	e8730018 	lwi	r3, r19, 24
200151f0:	16432003 	cmpu	r18, r3, r4
200151f4:	bc52ff9c 	blti	r18, -100		// 20015190
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200151f8:	30600001 	addik	r3, r0, 1
}
200151fc:	10330000 	addk	r1, r19, r0
20015200:	ea610008 	lwi	r19, r1, 8
20015204:	ea81000c 	lwi	r20, r1, 12
20015208:	30210010 	addik	r1, r1, 16
2001520c:	b60f0008 	rtsd	r15, 8
20015210:	80000000 	or	r0, r0, r0

20015214 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20015214:	3021ffe8 	addik	r1, r1, -24
20015218:	fa610010 	swi	r19, r1, 16
2001521c:	fa810014 	swi	r20, r1, 20
20015220:	12610000 	addk	r19, r1, r0
20015224:	96808000 	mfs	r20, rpc
20015228:	b000dffe 	imm	-8194
2001522c:	3294c738 	addik	r20, r20, -14536
20015230:	f8b3001c 	swi	r5, r19, 28
20015234:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20015238:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001523c:	f8130004 	swi	r0, r19, 4
20015240:	b8000054 	bri	84		// 20015294
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20015244:	e873001c 	lwi	r3, r19, 28
20015248:	e8630010 	lwi	r3, r3, 16
2001524c:	e8830000 	lwi	r4, r3, 0
20015250:	e873001c 	lwi	r3, r19, 28
20015254:	e8a3000c 	lwi	r5, r3, 12
20015258:	e8730004 	lwi	r3, r19, 4
2001525c:	64630402 	bslli	r3, r3, 2
20015260:	10651800 	addk	r3, r5, r3
20015264:	e8630000 	lwi	r3, r3, 0
20015268:	14632000 	rsubk	r3, r3, r4
2001526c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20015270:	e8930008 	lwi	r4, r19, 8
20015274:	e873000c 	lwi	r3, r19, 12
20015278:	16441803 	cmpu	r18, r4, r3
2001527c:	bcb20008 	bgei	r18, 8		// 20015284
20015280:	10640000 	addk	r3, r4, r0
20015284:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20015288:	e8730004 	lwi	r3, r19, 4
2001528c:	30630001 	addik	r3, r3, 1
20015290:	f8730004 	swi	r3, r19, 4
20015294:	e8930004 	lwi	r4, r19, 4
20015298:	e8730020 	lwi	r3, r19, 32
2001529c:	16432003 	cmpu	r18, r3, r4
200152a0:	bc52ffa4 	blti	r18, -92		// 20015244
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200152a4:	e873001c 	lwi	r3, r19, 28
200152a8:	e8830000 	lwi	r4, r3, 0
200152ac:	e8730008 	lwi	r3, r19, 8
200152b0:	14632000 	rsubk	r3, r3, r4
}
200152b4:	10330000 	addk	r1, r19, r0
200152b8:	ea610010 	lwi	r19, r1, 16
200152bc:	ea810014 	lwi	r20, r1, 20
200152c0:	30210018 	addik	r1, r1, 24
200152c4:	b60f0008 	rtsd	r15, 8
200152c8:	80000000 	or	r0, r0, r0

200152cc <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200152cc:	3021fff0 	addik	r1, r1, -16
200152d0:	fa610008 	swi	r19, r1, 8
200152d4:	fa81000c 	swi	r20, r1, 12
200152d8:	12610000 	addk	r19, r1, r0
200152dc:	96808000 	mfs	r20, rpc
200152e0:	b000dffe 	imm	-8194
200152e4:	3294c680 	addik	r20, r20, -14720
200152e8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200152ec:	e8730014 	lwi	r3, r19, 20
200152f0:	e8630010 	lwi	r3, r3, 16
200152f4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200152f8:	f8130004 	swi	r0, r19, 4
200152fc:	b8000028 	bri	40		// 20015324
        fifo->read_inds[i] = 0;
20015300:	e8730014 	lwi	r3, r19, 20
20015304:	e883000c 	lwi	r4, r3, 12
20015308:	e8730004 	lwi	r3, r19, 4
2001530c:	64630402 	bslli	r3, r3, 2
20015310:	10641800 	addk	r3, r4, r3
20015314:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20015318:	e8730004 	lwi	r3, r19, 4
2001531c:	30630001 	addik	r3, r3, 1
20015320:	f8730004 	swi	r3, r19, 4
20015324:	e8730014 	lwi	r3, r19, 20
20015328:	e8830008 	lwi	r4, r3, 8
2001532c:	e8730004 	lwi	r3, r19, 4
20015330:	16441803 	cmpu	r18, r4, r3
20015334:	bc52ffcc 	blti	r18, -52		// 20015300
        fifo->read_inds[i] = 0;
    }
}
20015338:	10330000 	addk	r1, r19, r0
2001533c:	ea610008 	lwi	r19, r1, 8
20015340:	ea81000c 	lwi	r20, r1, 12
20015344:	30210010 	addik	r1, r1, 16
20015348:	b60f0008 	rtsd	r15, 8
2001534c:	80000000 	or	r0, r0, r0

20015350 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20015350:	3021fff0 	addik	r1, r1, -16
20015354:	fa610008 	swi	r19, r1, 8
20015358:	fa81000c 	swi	r20, r1, 12
2001535c:	12610000 	addk	r19, r1, r0
20015360:	96808000 	mfs	r20, rpc
20015364:	b000dffe 	imm	-8194
20015368:	3294c5fc 	addik	r20, r20, -14852
2001536c:	f8b30014 	swi	r5, r19, 20
20015370:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20015374:	e8730014 	lwi	r3, r19, 20
20015378:	e8830004 	lwi	r4, r3, 4
2001537c:	e8730014 	lwi	r3, r19, 20
20015380:	e8a3000c 	lwi	r5, r3, 12
20015384:	e8730018 	lwi	r3, r19, 24
20015388:	64630402 	bslli	r3, r3, 2
2001538c:	10651800 	addk	r3, r5, r3
20015390:	e8a30000 	lwi	r5, r3, 0
20015394:	e8730014 	lwi	r3, r19, 20
20015398:	e8630000 	lwi	r3, r3, 0
2001539c:	3063ffff 	addik	r3, r3, -1
200153a0:	84651800 	and	r3, r5, r3
200153a4:	10641800 	addk	r3, r4, r3
200153a8:	e0630000 	lbui	r3, r3, 0
200153ac:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200153b0:	e8730014 	lwi	r3, r19, 20
200153b4:	e883000c 	lwi	r4, r3, 12
200153b8:	e8730018 	lwi	r3, r19, 24
200153bc:	64630402 	bslli	r3, r3, 2
200153c0:	10641800 	addk	r3, r4, r3
200153c4:	e8830000 	lwi	r4, r3, 0
200153c8:	30840001 	addik	r4, r4, 1
200153cc:	f8830000 	swi	r4, r3, 0
    return value;
200153d0:	e0730004 	lbui	r3, r19, 4
}
200153d4:	10330000 	addk	r1, r19, r0
200153d8:	ea610008 	lwi	r19, r1, 8
200153dc:	ea81000c 	lwi	r20, r1, 12
200153e0:	30210010 	addik	r1, r1, 16
200153e4:	b60f0008 	rtsd	r15, 8
200153e8:	80000000 	or	r0, r0, r0

200153ec <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200153ec:	3021fff4 	addik	r1, r1, -12
200153f0:	fa610004 	swi	r19, r1, 4
200153f4:	fa810008 	swi	r20, r1, 8
200153f8:	12610000 	addk	r19, r1, r0
200153fc:	96808000 	mfs	r20, rpc
20015400:	b000dffe 	imm	-8194
20015404:	3294c560 	addik	r20, r20, -15008
20015408:	f8b30010 	swi	r5, r19, 16
2001540c:	10660000 	addk	r3, r6, r0
20015410:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20015414:	e8730010 	lwi	r3, r19, 16
20015418:	e8830004 	lwi	r4, r3, 4
2001541c:	e8730010 	lwi	r3, r19, 16
20015420:	e8630010 	lwi	r3, r3, 16
20015424:	e8a30000 	lwi	r5, r3, 0
20015428:	e8730010 	lwi	r3, r19, 16
2001542c:	e8630000 	lwi	r3, r3, 0
20015430:	3063ffff 	addik	r3, r3, -1
20015434:	84651800 	and	r3, r5, r3
20015438:	10641800 	addk	r3, r4, r3
2001543c:	e0930014 	lbui	r4, r19, 20
20015440:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20015444:	e8730010 	lwi	r3, r19, 16
20015448:	e8630010 	lwi	r3, r3, 16
2001544c:	e8830000 	lwi	r4, r3, 0
20015450:	30840001 	addik	r4, r4, 1
20015454:	f8830000 	swi	r4, r3, 0
}
20015458:	10330000 	addk	r1, r19, r0
2001545c:	ea610004 	lwi	r19, r1, 4
20015460:	ea810008 	lwi	r20, r1, 8
20015464:	3021000c 	addik	r1, r1, 12
20015468:	b60f0008 	rtsd	r15, 8
2001546c:	80000000 	or	r0, r0, r0

20015470 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20015470:	3021fff4 	addik	r1, r1, -12
20015474:	fa610004 	swi	r19, r1, 4
20015478:	fa810008 	swi	r20, r1, 8
2001547c:	12610000 	addk	r19, r1, r0
20015480:	96808000 	mfs	r20, rpc
20015484:	b000dffe 	imm	-8194
20015488:	3294c4dc 	addik	r20, r20, -15140
2001548c:	f8b30010 	swi	r5, r19, 16
20015490:	f8d30014 	swi	r6, r19, 20
20015494:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20015498:	e8730010 	lwi	r3, r19, 16
2001549c:	e8630010 	lwi	r3, r3, 16
200154a0:	e8830000 	lwi	r4, r3, 0
200154a4:	e8730010 	lwi	r3, r19, 16
200154a8:	e8a3000c 	lwi	r5, r3, 12
200154ac:	e8730014 	lwi	r3, r19, 20
200154b0:	64630402 	bslli	r3, r3, 2
200154b4:	10651800 	addk	r3, r5, r3
200154b8:	e8630000 	lwi	r3, r3, 0
200154bc:	14a32000 	rsubk	r5, r3, r4
200154c0:	30600001 	addik	r3, r0, 1
200154c4:	e8930018 	lwi	r4, r19, 24
200154c8:	16442803 	cmpu	r18, r4, r5
200154cc:	bcb20008 	bgei	r18, 8		// 200154d4
200154d0:	10600000 	addk	r3, r0, r0
200154d4:	a46300ff 	andi	r3, r3, 255
}
200154d8:	10330000 	addk	r1, r19, r0
200154dc:	ea610004 	lwi	r19, r1, 4
200154e0:	ea810008 	lwi	r20, r1, 8
200154e4:	3021000c 	addik	r1, r1, 12
200154e8:	b60f0008 	rtsd	r15, 8
200154ec:	80000000 	or	r0, r0, r0

200154f0 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200154f0:	3021fff4 	addik	r1, r1, -12
200154f4:	fa610004 	swi	r19, r1, 4
200154f8:	fa810008 	swi	r20, r1, 8
200154fc:	12610000 	addk	r19, r1, r0
20015500:	96808000 	mfs	r20, rpc
20015504:	b000dffe 	imm	-8194
20015508:	3294c45c 	addik	r20, r20, -15268
2001550c:	f8b30010 	swi	r5, r19, 16
20015510:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20015514:	e8730010 	lwi	r3, r19, 16
20015518:	e8630010 	lwi	r3, r3, 16
2001551c:	e8830000 	lwi	r4, r3, 0
20015520:	e8730010 	lwi	r3, r19, 16
20015524:	e8a3000c 	lwi	r5, r3, 12
20015528:	e8730014 	lwi	r3, r19, 20
2001552c:	64630402 	bslli	r3, r3, 2
20015530:	10651800 	addk	r3, r5, r3
20015534:	e8630000 	lwi	r3, r3, 0
20015538:	14632000 	rsubk	r3, r3, r4
}
2001553c:	10330000 	addk	r1, r19, r0
20015540:	ea610004 	lwi	r19, r1, 4
20015544:	ea810008 	lwi	r20, r1, 8
20015548:	3021000c 	addik	r1, r1, 12
2001554c:	b60f0008 	rtsd	r15, 8
20015550:	80000000 	or	r0, r0, r0

20015554 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20015554:	3021fff0 	addik	r1, r1, -16
20015558:	fa610008 	swi	r19, r1, 8
2001555c:	fa81000c 	swi	r20, r1, 12
20015560:	12610000 	addk	r19, r1, r0
20015564:	96808000 	mfs	r20, rpc
20015568:	b000dffe 	imm	-8194
2001556c:	3294c3f8 	addik	r20, r20, -15368
20015570:	f8b30014 	swi	r5, r19, 20
20015574:	f8d30018 	swi	r6, r19, 24
20015578:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001557c:	f8130004 	swi	r0, r19, 4
20015580:	b800005c 	bri	92		// 200155dc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20015584:	e8730014 	lwi	r3, r19, 20
20015588:	e8830000 	lwi	r4, r3, 0
2001558c:	e8730014 	lwi	r3, r19, 20
20015590:	e8a3000c 	lwi	r5, r3, 12
20015594:	e8730004 	lwi	r3, r19, 4
20015598:	64630402 	bslli	r3, r3, 2
2001559c:	10651800 	addk	r3, r5, r3
200155a0:	e8a30000 	lwi	r5, r3, 0
200155a4:	e8730014 	lwi	r3, r19, 20
200155a8:	e8630010 	lwi	r3, r3, 16
200155ac:	e8630000 	lwi	r3, r3, 0
200155b0:	14632800 	rsubk	r3, r3, r5
200155b4:	10641800 	addk	r3, r4, r3
200155b8:	30830001 	addik	r4, r3, 1
200155bc:	e873001c 	lwi	r3, r19, 28
200155c0:	16441803 	cmpu	r18, r4, r3
200155c4:	bc52000c 	blti	r18, 12		// 200155d0
            return 0;
200155c8:	10600000 	addk	r3, r0, r0
200155cc:	b8000024 	bri	36		// 200155f0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200155d0:	e8730004 	lwi	r3, r19, 4
200155d4:	30630001 	addik	r3, r3, 1
200155d8:	f8730004 	swi	r3, r19, 4
200155dc:	e8930004 	lwi	r4, r19, 4
200155e0:	e8730018 	lwi	r3, r19, 24
200155e4:	16432003 	cmpu	r18, r3, r4
200155e8:	bc52ff9c 	blti	r18, -100		// 20015584
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200155ec:	30600001 	addik	r3, r0, 1
}
200155f0:	10330000 	addk	r1, r19, r0
200155f4:	ea610008 	lwi	r19, r1, 8
200155f8:	ea81000c 	lwi	r20, r1, 12
200155fc:	30210010 	addik	r1, r1, 16
20015600:	b60f0008 	rtsd	r15, 8
20015604:	80000000 	or	r0, r0, r0

20015608 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20015608:	3021ffe8 	addik	r1, r1, -24
2001560c:	fa610010 	swi	r19, r1, 16
20015610:	fa810014 	swi	r20, r1, 20
20015614:	12610000 	addk	r19, r1, r0
20015618:	96808000 	mfs	r20, rpc
2001561c:	b000dffe 	imm	-8194
20015620:	3294c344 	addik	r20, r20, -15548
20015624:	f8b3001c 	swi	r5, r19, 28
20015628:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001562c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20015630:	f8130004 	swi	r0, r19, 4
20015634:	b8000054 	bri	84		// 20015688
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20015638:	e873001c 	lwi	r3, r19, 28
2001563c:	e8630010 	lwi	r3, r3, 16
20015640:	e8830000 	lwi	r4, r3, 0
20015644:	e873001c 	lwi	r3, r19, 28
20015648:	e8a3000c 	lwi	r5, r3, 12
2001564c:	e8730004 	lwi	r3, r19, 4
20015650:	64630402 	bslli	r3, r3, 2
20015654:	10651800 	addk	r3, r5, r3
20015658:	e8630000 	lwi	r3, r3, 0
2001565c:	14632000 	rsubk	r3, r3, r4
20015660:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20015664:	e8930008 	lwi	r4, r19, 8
20015668:	e873000c 	lwi	r3, r19, 12
2001566c:	16441803 	cmpu	r18, r4, r3
20015670:	bcb20008 	bgei	r18, 8		// 20015678
20015674:	10640000 	addk	r3, r4, r0
20015678:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001567c:	e8730004 	lwi	r3, r19, 4
20015680:	30630001 	addik	r3, r3, 1
20015684:	f8730004 	swi	r3, r19, 4
20015688:	e8930004 	lwi	r4, r19, 4
2001568c:	e8730020 	lwi	r3, r19, 32
20015690:	16432003 	cmpu	r18, r3, r4
20015694:	bc52ffa4 	blti	r18, -92		// 20015638
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20015698:	e873001c 	lwi	r3, r19, 28
2001569c:	e8830000 	lwi	r4, r3, 0
200156a0:	e8730008 	lwi	r3, r19, 8
200156a4:	14632000 	rsubk	r3, r3, r4
}
200156a8:	10330000 	addk	r1, r19, r0
200156ac:	ea610010 	lwi	r19, r1, 16
200156b0:	ea810014 	lwi	r20, r1, 20
200156b4:	30210018 	addik	r1, r1, 24
200156b8:	b60f0008 	rtsd	r15, 8
200156bc:	80000000 	or	r0, r0, r0

200156c0 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200156c0:	3021fff0 	addik	r1, r1, -16
200156c4:	fa610008 	swi	r19, r1, 8
200156c8:	fa81000c 	swi	r20, r1, 12
200156cc:	12610000 	addk	r19, r1, r0
200156d0:	96808000 	mfs	r20, rpc
200156d4:	b000dffe 	imm	-8194
200156d8:	3294c28c 	addik	r20, r20, -15732
200156dc:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200156e0:	e8730014 	lwi	r3, r19, 20
200156e4:	e8630010 	lwi	r3, r3, 16
200156e8:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200156ec:	f8130004 	swi	r0, r19, 4
200156f0:	b8000028 	bri	40		// 20015718
        fifo->read_inds[i] = 0;
200156f4:	e8730014 	lwi	r3, r19, 20
200156f8:	e883000c 	lwi	r4, r3, 12
200156fc:	e8730004 	lwi	r3, r19, 4
20015700:	64630402 	bslli	r3, r3, 2
20015704:	10641800 	addk	r3, r4, r3
20015708:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001570c:	e8730004 	lwi	r3, r19, 4
20015710:	30630001 	addik	r3, r3, 1
20015714:	f8730004 	swi	r3, r19, 4
20015718:	e8730014 	lwi	r3, r19, 20
2001571c:	e8830008 	lwi	r4, r3, 8
20015720:	e8730004 	lwi	r3, r19, 4
20015724:	16441803 	cmpu	r18, r4, r3
20015728:	bc52ffcc 	blti	r18, -52		// 200156f4
        fifo->read_inds[i] = 0;
    }
}
2001572c:	10330000 	addk	r1, r19, r0
20015730:	ea610008 	lwi	r19, r1, 8
20015734:	ea81000c 	lwi	r20, r1, 12
20015738:	30210010 	addik	r1, r1, 16
2001573c:	b60f0008 	rtsd	r15, 8
20015740:	80000000 	or	r0, r0, r0

20015744 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20015744:	3021fff0 	addik	r1, r1, -16
20015748:	fa610008 	swi	r19, r1, 8
2001574c:	fa81000c 	swi	r20, r1, 12
20015750:	12610000 	addk	r19, r1, r0
20015754:	96808000 	mfs	r20, rpc
20015758:	b000dffe 	imm	-8194
2001575c:	3294c208 	addik	r20, r20, -15864
20015760:	f8b30014 	swi	r5, r19, 20
20015764:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20015768:	e8730014 	lwi	r3, r19, 20
2001576c:	e8830004 	lwi	r4, r3, 4
20015770:	e8730014 	lwi	r3, r19, 20
20015774:	e8a3000c 	lwi	r5, r3, 12
20015778:	e8730018 	lwi	r3, r19, 24
2001577c:	64630402 	bslli	r3, r3, 2
20015780:	10651800 	addk	r3, r5, r3
20015784:	e8a30000 	lwi	r5, r3, 0
20015788:	e8730014 	lwi	r3, r19, 20
2001578c:	e8630000 	lwi	r3, r3, 0
20015790:	3063ffff 	addik	r3, r3, -1
20015794:	84651800 	and	r3, r5, r3
20015798:	10631800 	addk	r3, r3, r3
2001579c:	10641800 	addk	r3, r4, r3
200157a0:	e4630000 	lhui	r3, r3, 0
200157a4:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200157a8:	e8730014 	lwi	r3, r19, 20
200157ac:	e883000c 	lwi	r4, r3, 12
200157b0:	e8730018 	lwi	r3, r19, 24
200157b4:	64630402 	bslli	r3, r3, 2
200157b8:	10641800 	addk	r3, r4, r3
200157bc:	e8830000 	lwi	r4, r3, 0
200157c0:	30840001 	addik	r4, r4, 1
200157c4:	f8830000 	swi	r4, r3, 0
    return value;
200157c8:	e4730004 	lhui	r3, r19, 4
}
200157cc:	10330000 	addk	r1, r19, r0
200157d0:	ea610008 	lwi	r19, r1, 8
200157d4:	ea81000c 	lwi	r20, r1, 12
200157d8:	30210010 	addik	r1, r1, 16
200157dc:	b60f0008 	rtsd	r15, 8
200157e0:	80000000 	or	r0, r0, r0

200157e4 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200157e4:	3021fff4 	addik	r1, r1, -12
200157e8:	fa610004 	swi	r19, r1, 4
200157ec:	fa810008 	swi	r20, r1, 8
200157f0:	12610000 	addk	r19, r1, r0
200157f4:	96808000 	mfs	r20, rpc
200157f8:	b000dffe 	imm	-8194
200157fc:	3294c168 	addik	r20, r20, -16024
20015800:	f8b30010 	swi	r5, r19, 16
20015804:	10660000 	addk	r3, r6, r0
20015808:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001580c:	e8730010 	lwi	r3, r19, 16
20015810:	e8830004 	lwi	r4, r3, 4
20015814:	e8730010 	lwi	r3, r19, 16
20015818:	e8630010 	lwi	r3, r3, 16
2001581c:	e8a30000 	lwi	r5, r3, 0
20015820:	e8730010 	lwi	r3, r19, 16
20015824:	e8630000 	lwi	r3, r3, 0
20015828:	3063ffff 	addik	r3, r3, -1
2001582c:	84651800 	and	r3, r5, r3
20015830:	10631800 	addk	r3, r3, r3
20015834:	10641800 	addk	r3, r4, r3
20015838:	e4930014 	lhui	r4, r19, 20
2001583c:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20015840:	e8730010 	lwi	r3, r19, 16
20015844:	e8630010 	lwi	r3, r3, 16
20015848:	e8830000 	lwi	r4, r3, 0
2001584c:	30840001 	addik	r4, r4, 1
20015850:	f8830000 	swi	r4, r3, 0
}
20015854:	10330000 	addk	r1, r19, r0
20015858:	ea610004 	lwi	r19, r1, 4
2001585c:	ea810008 	lwi	r20, r1, 8
20015860:	3021000c 	addik	r1, r1, 12
20015864:	b60f0008 	rtsd	r15, 8
20015868:	80000000 	or	r0, r0, r0

2001586c <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001586c:	3021fff4 	addik	r1, r1, -12
20015870:	fa610004 	swi	r19, r1, 4
20015874:	fa810008 	swi	r20, r1, 8
20015878:	12610000 	addk	r19, r1, r0
2001587c:	96808000 	mfs	r20, rpc
20015880:	b000dffe 	imm	-8194
20015884:	3294c0e0 	addik	r20, r20, -16160
20015888:	f8b30010 	swi	r5, r19, 16
2001588c:	f8d30014 	swi	r6, r19, 20
20015890:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20015894:	e8730010 	lwi	r3, r19, 16
20015898:	e8630010 	lwi	r3, r3, 16
2001589c:	e8830000 	lwi	r4, r3, 0
200158a0:	e8730010 	lwi	r3, r19, 16
200158a4:	e8a3000c 	lwi	r5, r3, 12
200158a8:	e8730014 	lwi	r3, r19, 20
200158ac:	64630402 	bslli	r3, r3, 2
200158b0:	10651800 	addk	r3, r5, r3
200158b4:	e8630000 	lwi	r3, r3, 0
200158b8:	14a32000 	rsubk	r5, r3, r4
200158bc:	30600001 	addik	r3, r0, 1
200158c0:	e8930018 	lwi	r4, r19, 24
200158c4:	16442803 	cmpu	r18, r4, r5
200158c8:	bcb20008 	bgei	r18, 8		// 200158d0
200158cc:	10600000 	addk	r3, r0, r0
200158d0:	a46300ff 	andi	r3, r3, 255
}
200158d4:	10330000 	addk	r1, r19, r0
200158d8:	ea610004 	lwi	r19, r1, 4
200158dc:	ea810008 	lwi	r20, r1, 8
200158e0:	3021000c 	addik	r1, r1, 12
200158e4:	b60f0008 	rtsd	r15, 8
200158e8:	80000000 	or	r0, r0, r0

200158ec <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200158ec:	3021fff4 	addik	r1, r1, -12
200158f0:	fa610004 	swi	r19, r1, 4
200158f4:	fa810008 	swi	r20, r1, 8
200158f8:	12610000 	addk	r19, r1, r0
200158fc:	96808000 	mfs	r20, rpc
20015900:	b000dffe 	imm	-8194
20015904:	3294c060 	addik	r20, r20, -16288
20015908:	f8b30010 	swi	r5, r19, 16
2001590c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20015910:	e8730010 	lwi	r3, r19, 16
20015914:	e8630010 	lwi	r3, r3, 16
20015918:	e8830000 	lwi	r4, r3, 0
2001591c:	e8730010 	lwi	r3, r19, 16
20015920:	e8a3000c 	lwi	r5, r3, 12
20015924:	e8730014 	lwi	r3, r19, 20
20015928:	64630402 	bslli	r3, r3, 2
2001592c:	10651800 	addk	r3, r5, r3
20015930:	e8630000 	lwi	r3, r3, 0
20015934:	14632000 	rsubk	r3, r3, r4
}
20015938:	10330000 	addk	r1, r19, r0
2001593c:	ea610004 	lwi	r19, r1, 4
20015940:	ea810008 	lwi	r20, r1, 8
20015944:	3021000c 	addik	r1, r1, 12
20015948:	b60f0008 	rtsd	r15, 8
2001594c:	80000000 	or	r0, r0, r0

20015950 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20015950:	3021fff0 	addik	r1, r1, -16
20015954:	fa610008 	swi	r19, r1, 8
20015958:	fa81000c 	swi	r20, r1, 12
2001595c:	12610000 	addk	r19, r1, r0
20015960:	96808000 	mfs	r20, rpc
20015964:	b000dffe 	imm	-8194
20015968:	3294bffc 	addik	r20, r20, -16388
2001596c:	f8b30014 	swi	r5, r19, 20
20015970:	f8d30018 	swi	r6, r19, 24
20015974:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20015978:	f8130004 	swi	r0, r19, 4
2001597c:	b800005c 	bri	92		// 200159d8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20015980:	e8730014 	lwi	r3, r19, 20
20015984:	e8830000 	lwi	r4, r3, 0
20015988:	e8730014 	lwi	r3, r19, 20
2001598c:	e8a3000c 	lwi	r5, r3, 12
20015990:	e8730004 	lwi	r3, r19, 4
20015994:	64630402 	bslli	r3, r3, 2
20015998:	10651800 	addk	r3, r5, r3
2001599c:	e8a30000 	lwi	r5, r3, 0
200159a0:	e8730014 	lwi	r3, r19, 20
200159a4:	e8630010 	lwi	r3, r3, 16
200159a8:	e8630000 	lwi	r3, r3, 0
200159ac:	14632800 	rsubk	r3, r3, r5
200159b0:	10641800 	addk	r3, r4, r3
200159b4:	30830001 	addik	r4, r3, 1
200159b8:	e873001c 	lwi	r3, r19, 28
200159bc:	16441803 	cmpu	r18, r4, r3
200159c0:	bc52000c 	blti	r18, 12		// 200159cc
            return 0;
200159c4:	10600000 	addk	r3, r0, r0
200159c8:	b8000024 	bri	36		// 200159ec
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200159cc:	e8730004 	lwi	r3, r19, 4
200159d0:	30630001 	addik	r3, r3, 1
200159d4:	f8730004 	swi	r3, r19, 4
200159d8:	e8930004 	lwi	r4, r19, 4
200159dc:	e8730018 	lwi	r3, r19, 24
200159e0:	16432003 	cmpu	r18, r3, r4
200159e4:	bc52ff9c 	blti	r18, -100		// 20015980
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200159e8:	30600001 	addik	r3, r0, 1
}
200159ec:	10330000 	addk	r1, r19, r0
200159f0:	ea610008 	lwi	r19, r1, 8
200159f4:	ea81000c 	lwi	r20, r1, 12
200159f8:	30210010 	addik	r1, r1, 16
200159fc:	b60f0008 	rtsd	r15, 8
20015a00:	80000000 	or	r0, r0, r0

20015a04 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20015a04:	3021ffe8 	addik	r1, r1, -24
20015a08:	fa610010 	swi	r19, r1, 16
20015a0c:	fa810014 	swi	r20, r1, 20
20015a10:	12610000 	addk	r19, r1, r0
20015a14:	96808000 	mfs	r20, rpc
20015a18:	b000dffe 	imm	-8194
20015a1c:	3294bf48 	addik	r20, r20, -16568
20015a20:	f8b3001c 	swi	r5, r19, 28
20015a24:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20015a28:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20015a2c:	f8130004 	swi	r0, r19, 4
20015a30:	b8000054 	bri	84		// 20015a84
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20015a34:	e873001c 	lwi	r3, r19, 28
20015a38:	e8630010 	lwi	r3, r3, 16
20015a3c:	e8830000 	lwi	r4, r3, 0
20015a40:	e873001c 	lwi	r3, r19, 28
20015a44:	e8a3000c 	lwi	r5, r3, 12
20015a48:	e8730004 	lwi	r3, r19, 4
20015a4c:	64630402 	bslli	r3, r3, 2
20015a50:	10651800 	addk	r3, r5, r3
20015a54:	e8630000 	lwi	r3, r3, 0
20015a58:	14632000 	rsubk	r3, r3, r4
20015a5c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20015a60:	e8930008 	lwi	r4, r19, 8
20015a64:	e873000c 	lwi	r3, r19, 12
20015a68:	16441803 	cmpu	r18, r4, r3
20015a6c:	bcb20008 	bgei	r18, 8		// 20015a74
20015a70:	10640000 	addk	r3, r4, r0
20015a74:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20015a78:	e8730004 	lwi	r3, r19, 4
20015a7c:	30630001 	addik	r3, r3, 1
20015a80:	f8730004 	swi	r3, r19, 4
20015a84:	e8930004 	lwi	r4, r19, 4
20015a88:	e8730020 	lwi	r3, r19, 32
20015a8c:	16432003 	cmpu	r18, r3, r4
20015a90:	bc52ffa4 	blti	r18, -92		// 20015a34
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20015a94:	e873001c 	lwi	r3, r19, 28
20015a98:	e8830000 	lwi	r4, r3, 0
20015a9c:	e8730008 	lwi	r3, r19, 8
20015aa0:	14632000 	rsubk	r3, r3, r4
}
20015aa4:	10330000 	addk	r1, r19, r0
20015aa8:	ea610010 	lwi	r19, r1, 16
20015aac:	ea810014 	lwi	r20, r1, 20
20015ab0:	30210018 	addik	r1, r1, 24
20015ab4:	b60f0008 	rtsd	r15, 8
20015ab8:	80000000 	or	r0, r0, r0

20015abc <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20015abc:	3021fff0 	addik	r1, r1, -16
20015ac0:	fa610008 	swi	r19, r1, 8
20015ac4:	fa81000c 	swi	r20, r1, 12
20015ac8:	12610000 	addk	r19, r1, r0
20015acc:	96808000 	mfs	r20, rpc
20015ad0:	b000dffe 	imm	-8194
20015ad4:	3294be90 	addik	r20, r20, -16752
20015ad8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20015adc:	e8730014 	lwi	r3, r19, 20
20015ae0:	e8630010 	lwi	r3, r3, 16
20015ae4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20015ae8:	f8130004 	swi	r0, r19, 4
20015aec:	b8000028 	bri	40		// 20015b14
        fifo->read_inds[i] = 0;
20015af0:	e8730014 	lwi	r3, r19, 20
20015af4:	e883000c 	lwi	r4, r3, 12
20015af8:	e8730004 	lwi	r3, r19, 4
20015afc:	64630402 	bslli	r3, r3, 2
20015b00:	10641800 	addk	r3, r4, r3
20015b04:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20015b08:	e8730004 	lwi	r3, r19, 4
20015b0c:	30630001 	addik	r3, r3, 1
20015b10:	f8730004 	swi	r3, r19, 4
20015b14:	e8730014 	lwi	r3, r19, 20
20015b18:	e8830008 	lwi	r4, r3, 8
20015b1c:	e8730004 	lwi	r3, r19, 4
20015b20:	16441803 	cmpu	r18, r4, r3
20015b24:	bc52ffcc 	blti	r18, -52		// 20015af0
        fifo->read_inds[i] = 0;
    }
}
20015b28:	10330000 	addk	r1, r19, r0
20015b2c:	ea610008 	lwi	r19, r1, 8
20015b30:	ea81000c 	lwi	r20, r1, 12
20015b34:	30210010 	addik	r1, r1, 16
20015b38:	b60f0008 	rtsd	r15, 8
20015b3c:	80000000 	or	r0, r0, r0

20015b40 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20015b40:	3021fff0 	addik	r1, r1, -16
20015b44:	fa610008 	swi	r19, r1, 8
20015b48:	fa81000c 	swi	r20, r1, 12
20015b4c:	12610000 	addk	r19, r1, r0
20015b50:	96808000 	mfs	r20, rpc
20015b54:	b000dffe 	imm	-8194
20015b58:	3294be0c 	addik	r20, r20, -16884
20015b5c:	f8b30014 	swi	r5, r19, 20
20015b60:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20015b64:	e8730014 	lwi	r3, r19, 20
20015b68:	e8830004 	lwi	r4, r3, 4
20015b6c:	e8730014 	lwi	r3, r19, 20
20015b70:	e8a3000c 	lwi	r5, r3, 12
20015b74:	e8730018 	lwi	r3, r19, 24
20015b78:	64630402 	bslli	r3, r3, 2
20015b7c:	10651800 	addk	r3, r5, r3
20015b80:	e8a30000 	lwi	r5, r3, 0
20015b84:	e8730014 	lwi	r3, r19, 20
20015b88:	e8630000 	lwi	r3, r3, 0
20015b8c:	3063ffff 	addik	r3, r3, -1
20015b90:	84651800 	and	r3, r5, r3
20015b94:	64630402 	bslli	r3, r3, 2
20015b98:	10641800 	addk	r3, r4, r3
20015b9c:	e8630000 	lwi	r3, r3, 0
20015ba0:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20015ba4:	e8730014 	lwi	r3, r19, 20
20015ba8:	e883000c 	lwi	r4, r3, 12
20015bac:	e8730018 	lwi	r3, r19, 24
20015bb0:	64630402 	bslli	r3, r3, 2
20015bb4:	10641800 	addk	r3, r4, r3
20015bb8:	e8830000 	lwi	r4, r3, 0
20015bbc:	30840001 	addik	r4, r4, 1
20015bc0:	f8830000 	swi	r4, r3, 0
    return value;
20015bc4:	e8730004 	lwi	r3, r19, 4
}
20015bc8:	10330000 	addk	r1, r19, r0
20015bcc:	ea610008 	lwi	r19, r1, 8
20015bd0:	ea81000c 	lwi	r20, r1, 12
20015bd4:	30210010 	addik	r1, r1, 16
20015bd8:	b60f0008 	rtsd	r15, 8
20015bdc:	80000000 	or	r0, r0, r0

20015be0 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20015be0:	3021fff4 	addik	r1, r1, -12
20015be4:	fa610004 	swi	r19, r1, 4
20015be8:	fa810008 	swi	r20, r1, 8
20015bec:	12610000 	addk	r19, r1, r0
20015bf0:	96808000 	mfs	r20, rpc
20015bf4:	b000dffe 	imm	-8194
20015bf8:	3294bd6c 	addik	r20, r20, -17044
20015bfc:	f8b30010 	swi	r5, r19, 16
20015c00:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20015c04:	e8730010 	lwi	r3, r19, 16
20015c08:	e8830004 	lwi	r4, r3, 4
20015c0c:	e8730010 	lwi	r3, r19, 16
20015c10:	e8630010 	lwi	r3, r3, 16
20015c14:	e8a30000 	lwi	r5, r3, 0
20015c18:	e8730010 	lwi	r3, r19, 16
20015c1c:	e8630000 	lwi	r3, r3, 0
20015c20:	3063ffff 	addik	r3, r3, -1
20015c24:	84651800 	and	r3, r5, r3
20015c28:	64630402 	bslli	r3, r3, 2
20015c2c:	10641800 	addk	r3, r4, r3
20015c30:	e8930014 	lwi	r4, r19, 20
20015c34:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20015c38:	e8730010 	lwi	r3, r19, 16
20015c3c:	e8630010 	lwi	r3, r3, 16
20015c40:	e8830000 	lwi	r4, r3, 0
20015c44:	30840001 	addik	r4, r4, 1
20015c48:	f8830000 	swi	r4, r3, 0
}
20015c4c:	10330000 	addk	r1, r19, r0
20015c50:	ea610004 	lwi	r19, r1, 4
20015c54:	ea810008 	lwi	r20, r1, 8
20015c58:	3021000c 	addik	r1, r1, 12
20015c5c:	b60f0008 	rtsd	r15, 8
20015c60:	80000000 	or	r0, r0, r0

20015c64 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20015c64:	3021fff4 	addik	r1, r1, -12
20015c68:	fa610004 	swi	r19, r1, 4
20015c6c:	fa810008 	swi	r20, r1, 8
20015c70:	12610000 	addk	r19, r1, r0
20015c74:	96808000 	mfs	r20, rpc
20015c78:	b000dffe 	imm	-8194
20015c7c:	3294bce8 	addik	r20, r20, -17176
20015c80:	f8b30010 	swi	r5, r19, 16
20015c84:	f8d30014 	swi	r6, r19, 20
20015c88:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20015c8c:	e8730010 	lwi	r3, r19, 16
20015c90:	e8630010 	lwi	r3, r3, 16
20015c94:	e8830000 	lwi	r4, r3, 0
20015c98:	e8730010 	lwi	r3, r19, 16
20015c9c:	e8a3000c 	lwi	r5, r3, 12
20015ca0:	e8730014 	lwi	r3, r19, 20
20015ca4:	64630402 	bslli	r3, r3, 2
20015ca8:	10651800 	addk	r3, r5, r3
20015cac:	e8630000 	lwi	r3, r3, 0
20015cb0:	14a32000 	rsubk	r5, r3, r4
20015cb4:	30600001 	addik	r3, r0, 1
20015cb8:	e8930018 	lwi	r4, r19, 24
20015cbc:	16442803 	cmpu	r18, r4, r5
20015cc0:	bcb20008 	bgei	r18, 8		// 20015cc8
20015cc4:	10600000 	addk	r3, r0, r0
20015cc8:	a46300ff 	andi	r3, r3, 255
}
20015ccc:	10330000 	addk	r1, r19, r0
20015cd0:	ea610004 	lwi	r19, r1, 4
20015cd4:	ea810008 	lwi	r20, r1, 8
20015cd8:	3021000c 	addik	r1, r1, 12
20015cdc:	b60f0008 	rtsd	r15, 8
20015ce0:	80000000 	or	r0, r0, r0

20015ce4 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20015ce4:	3021fff4 	addik	r1, r1, -12
20015ce8:	fa610004 	swi	r19, r1, 4
20015cec:	fa810008 	swi	r20, r1, 8
20015cf0:	12610000 	addk	r19, r1, r0
20015cf4:	96808000 	mfs	r20, rpc
20015cf8:	b000dffe 	imm	-8194
20015cfc:	3294bc68 	addik	r20, r20, -17304
20015d00:	f8b30010 	swi	r5, r19, 16
20015d04:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20015d08:	e8730010 	lwi	r3, r19, 16
20015d0c:	e8630010 	lwi	r3, r3, 16
20015d10:	e8830000 	lwi	r4, r3, 0
20015d14:	e8730010 	lwi	r3, r19, 16
20015d18:	e8a3000c 	lwi	r5, r3, 12
20015d1c:	e8730014 	lwi	r3, r19, 20
20015d20:	64630402 	bslli	r3, r3, 2
20015d24:	10651800 	addk	r3, r5, r3
20015d28:	e8630000 	lwi	r3, r3, 0
20015d2c:	14632000 	rsubk	r3, r3, r4
}
20015d30:	10330000 	addk	r1, r19, r0
20015d34:	ea610004 	lwi	r19, r1, 4
20015d38:	ea810008 	lwi	r20, r1, 8
20015d3c:	3021000c 	addik	r1, r1, 12
20015d40:	b60f0008 	rtsd	r15, 8
20015d44:	80000000 	or	r0, r0, r0

20015d48 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20015d48:	3021fff0 	addik	r1, r1, -16
20015d4c:	fa610008 	swi	r19, r1, 8
20015d50:	fa81000c 	swi	r20, r1, 12
20015d54:	12610000 	addk	r19, r1, r0
20015d58:	96808000 	mfs	r20, rpc
20015d5c:	b000dffe 	imm	-8194
20015d60:	3294bc04 	addik	r20, r20, -17404
20015d64:	f8b30014 	swi	r5, r19, 20
20015d68:	f8d30018 	swi	r6, r19, 24
20015d6c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20015d70:	f8130004 	swi	r0, r19, 4
20015d74:	b800005c 	bri	92		// 20015dd0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20015d78:	e8730014 	lwi	r3, r19, 20
20015d7c:	e8830000 	lwi	r4, r3, 0
20015d80:	e8730014 	lwi	r3, r19, 20
20015d84:	e8a3000c 	lwi	r5, r3, 12
20015d88:	e8730004 	lwi	r3, r19, 4
20015d8c:	64630402 	bslli	r3, r3, 2
20015d90:	10651800 	addk	r3, r5, r3
20015d94:	e8a30000 	lwi	r5, r3, 0
20015d98:	e8730014 	lwi	r3, r19, 20
20015d9c:	e8630010 	lwi	r3, r3, 16
20015da0:	e8630000 	lwi	r3, r3, 0
20015da4:	14632800 	rsubk	r3, r3, r5
20015da8:	10641800 	addk	r3, r4, r3
20015dac:	30830001 	addik	r4, r3, 1
20015db0:	e873001c 	lwi	r3, r19, 28
20015db4:	16441803 	cmpu	r18, r4, r3
20015db8:	bc52000c 	blti	r18, 12		// 20015dc4
            return 0;
20015dbc:	10600000 	addk	r3, r0, r0
20015dc0:	b8000024 	bri	36		// 20015de4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20015dc4:	e8730004 	lwi	r3, r19, 4
20015dc8:	30630001 	addik	r3, r3, 1
20015dcc:	f8730004 	swi	r3, r19, 4
20015dd0:	e8930004 	lwi	r4, r19, 4
20015dd4:	e8730018 	lwi	r3, r19, 24
20015dd8:	16432003 	cmpu	r18, r3, r4
20015ddc:	bc52ff9c 	blti	r18, -100		// 20015d78
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20015de0:	30600001 	addik	r3, r0, 1
}
20015de4:	10330000 	addk	r1, r19, r0
20015de8:	ea610008 	lwi	r19, r1, 8
20015dec:	ea81000c 	lwi	r20, r1, 12
20015df0:	30210010 	addik	r1, r1, 16
20015df4:	b60f0008 	rtsd	r15, 8
20015df8:	80000000 	or	r0, r0, r0

20015dfc <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20015dfc:	3021ffe8 	addik	r1, r1, -24
20015e00:	fa610010 	swi	r19, r1, 16
20015e04:	fa810014 	swi	r20, r1, 20
20015e08:	12610000 	addk	r19, r1, r0
20015e0c:	96808000 	mfs	r20, rpc
20015e10:	b000dffe 	imm	-8194
20015e14:	3294bb50 	addik	r20, r20, -17584
20015e18:	f8b3001c 	swi	r5, r19, 28
20015e1c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20015e20:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20015e24:	f8130004 	swi	r0, r19, 4
20015e28:	b8000054 	bri	84		// 20015e7c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20015e2c:	e873001c 	lwi	r3, r19, 28
20015e30:	e8630010 	lwi	r3, r3, 16
20015e34:	e8830000 	lwi	r4, r3, 0
20015e38:	e873001c 	lwi	r3, r19, 28
20015e3c:	e8a3000c 	lwi	r5, r3, 12
20015e40:	e8730004 	lwi	r3, r19, 4
20015e44:	64630402 	bslli	r3, r3, 2
20015e48:	10651800 	addk	r3, r5, r3
20015e4c:	e8630000 	lwi	r3, r3, 0
20015e50:	14632000 	rsubk	r3, r3, r4
20015e54:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20015e58:	e8930008 	lwi	r4, r19, 8
20015e5c:	e873000c 	lwi	r3, r19, 12
20015e60:	16441803 	cmpu	r18, r4, r3
20015e64:	bcb20008 	bgei	r18, 8		// 20015e6c
20015e68:	10640000 	addk	r3, r4, r0
20015e6c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20015e70:	e8730004 	lwi	r3, r19, 4
20015e74:	30630001 	addik	r3, r3, 1
20015e78:	f8730004 	swi	r3, r19, 4
20015e7c:	e8930004 	lwi	r4, r19, 4
20015e80:	e8730020 	lwi	r3, r19, 32
20015e84:	16432003 	cmpu	r18, r3, r4
20015e88:	bc52ffa4 	blti	r18, -92		// 20015e2c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20015e8c:	e873001c 	lwi	r3, r19, 28
20015e90:	e8830000 	lwi	r4, r3, 0
20015e94:	e8730008 	lwi	r3, r19, 8
20015e98:	14632000 	rsubk	r3, r3, r4
}
20015e9c:	10330000 	addk	r1, r19, r0
20015ea0:	ea610010 	lwi	r19, r1, 16
20015ea4:	ea810014 	lwi	r20, r1, 20
20015ea8:	30210018 	addik	r1, r1, 24
20015eac:	b60f0008 	rtsd	r15, 8
20015eb0:	80000000 	or	r0, r0, r0

20015eb4 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20015eb4:	3021fff0 	addik	r1, r1, -16
20015eb8:	fa610008 	swi	r19, r1, 8
20015ebc:	fa81000c 	swi	r20, r1, 12
20015ec0:	12610000 	addk	r19, r1, r0
20015ec4:	96808000 	mfs	r20, rpc
20015ec8:	b000dffe 	imm	-8194
20015ecc:	3294ba98 	addik	r20, r20, -17768
20015ed0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20015ed4:	e8730014 	lwi	r3, r19, 20
20015ed8:	e8630010 	lwi	r3, r3, 16
20015edc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20015ee0:	f8130004 	swi	r0, r19, 4
20015ee4:	b8000028 	bri	40		// 20015f0c
        fifo->read_inds[i] = 0;
20015ee8:	e8730014 	lwi	r3, r19, 20
20015eec:	e883000c 	lwi	r4, r3, 12
20015ef0:	e8730004 	lwi	r3, r19, 4
20015ef4:	64630402 	bslli	r3, r3, 2
20015ef8:	10641800 	addk	r3, r4, r3
20015efc:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20015f00:	e8730004 	lwi	r3, r19, 4
20015f04:	30630001 	addik	r3, r3, 1
20015f08:	f8730004 	swi	r3, r19, 4
20015f0c:	e8730014 	lwi	r3, r19, 20
20015f10:	e8830008 	lwi	r4, r3, 8
20015f14:	e8730004 	lwi	r3, r19, 4
20015f18:	16441803 	cmpu	r18, r4, r3
20015f1c:	bc52ffcc 	blti	r18, -52		// 20015ee8
        fifo->read_inds[i] = 0;
    }
}
20015f20:	10330000 	addk	r1, r19, r0
20015f24:	ea610008 	lwi	r19, r1, 8
20015f28:	ea81000c 	lwi	r20, r1, 12
20015f2c:	30210010 	addik	r1, r1, 16
20015f30:	b60f0008 	rtsd	r15, 8
20015f34:	80000000 	or	r0, r0, r0

20015f38 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20015f38:	3021ffec 	addik	r1, r1, -20
20015f3c:	fa61000c 	swi	r19, r1, 12
20015f40:	fa810010 	swi	r20, r1, 16
20015f44:	12610000 	addk	r19, r1, r0
20015f48:	96808000 	mfs	r20, rpc
20015f4c:	b000dffe 	imm	-8194
20015f50:	3294ba14 	addik	r20, r20, -17900
20015f54:	f8b30018 	swi	r5, r19, 24
20015f58:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20015f5c:	e8730018 	lwi	r3, r19, 24
20015f60:	e8830004 	lwi	r4, r3, 4
20015f64:	e8730018 	lwi	r3, r19, 24
20015f68:	e8a3000c 	lwi	r5, r3, 12
20015f6c:	e873001c 	lwi	r3, r19, 28
20015f70:	64630402 	bslli	r3, r3, 2
20015f74:	10651800 	addk	r3, r5, r3
20015f78:	e8a30000 	lwi	r5, r3, 0
20015f7c:	e8730018 	lwi	r3, r19, 24
20015f80:	e8630000 	lwi	r3, r3, 0
20015f84:	3063ffff 	addik	r3, r3, -1
20015f88:	84651800 	and	r3, r5, r3
20015f8c:	64630403 	bslli	r3, r3, 3
20015f90:	10641800 	addk	r3, r4, r3
20015f94:	e8830000 	lwi	r4, r3, 0
20015f98:	e8a30004 	lwi	r5, r3, 4
20015f9c:	f8930004 	swi	r4, r19, 4
20015fa0:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20015fa4:	e8730018 	lwi	r3, r19, 24
20015fa8:	e883000c 	lwi	r4, r3, 12
20015fac:	e873001c 	lwi	r3, r19, 28
20015fb0:	64630402 	bslli	r3, r3, 2
20015fb4:	10641800 	addk	r3, r4, r3
20015fb8:	e8830000 	lwi	r4, r3, 0
20015fbc:	30840001 	addik	r4, r4, 1
20015fc0:	f8830000 	swi	r4, r3, 0
    return value;
20015fc4:	e8930004 	lwi	r4, r19, 4
20015fc8:	e8b30008 	lwi	r5, r19, 8
}
20015fcc:	10640000 	addk	r3, r4, r0
20015fd0:	10850000 	addk	r4, r5, r0
20015fd4:	10330000 	addk	r1, r19, r0
20015fd8:	ea61000c 	lwi	r19, r1, 12
20015fdc:	ea810010 	lwi	r20, r1, 16
20015fe0:	30210014 	addik	r1, r1, 20
20015fe4:	b60f0008 	rtsd	r15, 8
20015fe8:	80000000 	or	r0, r0, r0

20015fec <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20015fec:	3021fff4 	addik	r1, r1, -12
20015ff0:	fa610004 	swi	r19, r1, 4
20015ff4:	fa810008 	swi	r20, r1, 8
20015ff8:	12610000 	addk	r19, r1, r0
20015ffc:	96808000 	mfs	r20, rpc
20016000:	b000dffe 	imm	-8194
20016004:	3294b960 	addik	r20, r20, -18080
20016008:	f8b30010 	swi	r5, r19, 16
2001600c:	f8d30014 	swi	r6, r19, 20
20016010:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20016014:	e8730010 	lwi	r3, r19, 16
20016018:	e8830004 	lwi	r4, r3, 4
2001601c:	e8730010 	lwi	r3, r19, 16
20016020:	e8630010 	lwi	r3, r3, 16
20016024:	e8a30000 	lwi	r5, r3, 0
20016028:	e8730010 	lwi	r3, r19, 16
2001602c:	e8630000 	lwi	r3, r3, 0
20016030:	3063ffff 	addik	r3, r3, -1
20016034:	84651800 	and	r3, r5, r3
20016038:	64630403 	bslli	r3, r3, 3
2001603c:	10641800 	addk	r3, r4, r3
20016040:	e8930014 	lwi	r4, r19, 20
20016044:	e8b30018 	lwi	r5, r19, 24
20016048:	f8830000 	swi	r4, r3, 0
2001604c:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20016050:	e8730010 	lwi	r3, r19, 16
20016054:	e8630010 	lwi	r3, r3, 16
20016058:	e8830000 	lwi	r4, r3, 0
2001605c:	30840001 	addik	r4, r4, 1
20016060:	f8830000 	swi	r4, r3, 0
}
20016064:	10330000 	addk	r1, r19, r0
20016068:	ea610004 	lwi	r19, r1, 4
2001606c:	ea810008 	lwi	r20, r1, 8
20016070:	3021000c 	addik	r1, r1, 12
20016074:	b60f0008 	rtsd	r15, 8
20016078:	80000000 	or	r0, r0, r0

2001607c <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001607c:	3021fff4 	addik	r1, r1, -12
20016080:	fa610004 	swi	r19, r1, 4
20016084:	fa810008 	swi	r20, r1, 8
20016088:	12610000 	addk	r19, r1, r0
2001608c:	96808000 	mfs	r20, rpc
20016090:	b000dffe 	imm	-8194
20016094:	3294b8d0 	addik	r20, r20, -18224
20016098:	f8b30010 	swi	r5, r19, 16
2001609c:	f8d30014 	swi	r6, r19, 20
200160a0:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200160a4:	e8730010 	lwi	r3, r19, 16
200160a8:	e8630010 	lwi	r3, r3, 16
200160ac:	e8830000 	lwi	r4, r3, 0
200160b0:	e8730010 	lwi	r3, r19, 16
200160b4:	e8a3000c 	lwi	r5, r3, 12
200160b8:	e8730014 	lwi	r3, r19, 20
200160bc:	64630402 	bslli	r3, r3, 2
200160c0:	10651800 	addk	r3, r5, r3
200160c4:	e8630000 	lwi	r3, r3, 0
200160c8:	14a32000 	rsubk	r5, r3, r4
200160cc:	30600001 	addik	r3, r0, 1
200160d0:	e8930018 	lwi	r4, r19, 24
200160d4:	16442803 	cmpu	r18, r4, r5
200160d8:	bcb20008 	bgei	r18, 8		// 200160e0
200160dc:	10600000 	addk	r3, r0, r0
200160e0:	a46300ff 	andi	r3, r3, 255
}
200160e4:	10330000 	addk	r1, r19, r0
200160e8:	ea610004 	lwi	r19, r1, 4
200160ec:	ea810008 	lwi	r20, r1, 8
200160f0:	3021000c 	addik	r1, r1, 12
200160f4:	b60f0008 	rtsd	r15, 8
200160f8:	80000000 	or	r0, r0, r0

200160fc <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200160fc:	3021fff4 	addik	r1, r1, -12
20016100:	fa610004 	swi	r19, r1, 4
20016104:	fa810008 	swi	r20, r1, 8
20016108:	12610000 	addk	r19, r1, r0
2001610c:	96808000 	mfs	r20, rpc
20016110:	b000dffe 	imm	-8194
20016114:	3294b850 	addik	r20, r20, -18352
20016118:	f8b30010 	swi	r5, r19, 16
2001611c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20016120:	e8730010 	lwi	r3, r19, 16
20016124:	e8630010 	lwi	r3, r3, 16
20016128:	e8830000 	lwi	r4, r3, 0
2001612c:	e8730010 	lwi	r3, r19, 16
20016130:	e8a3000c 	lwi	r5, r3, 12
20016134:	e8730014 	lwi	r3, r19, 20
20016138:	64630402 	bslli	r3, r3, 2
2001613c:	10651800 	addk	r3, r5, r3
20016140:	e8630000 	lwi	r3, r3, 0
20016144:	14632000 	rsubk	r3, r3, r4
}
20016148:	10330000 	addk	r1, r19, r0
2001614c:	ea610004 	lwi	r19, r1, 4
20016150:	ea810008 	lwi	r20, r1, 8
20016154:	3021000c 	addik	r1, r1, 12
20016158:	b60f0008 	rtsd	r15, 8
2001615c:	80000000 	or	r0, r0, r0

20016160 <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20016160:	3021fff0 	addik	r1, r1, -16
20016164:	fa610008 	swi	r19, r1, 8
20016168:	fa81000c 	swi	r20, r1, 12
2001616c:	12610000 	addk	r19, r1, r0
20016170:	96808000 	mfs	r20, rpc
20016174:	b000dffe 	imm	-8194
20016178:	3294b7ec 	addik	r20, r20, -18452
2001617c:	f8b30014 	swi	r5, r19, 20
20016180:	f8d30018 	swi	r6, r19, 24
20016184:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20016188:	f8130004 	swi	r0, r19, 4
2001618c:	b800005c 	bri	92		// 200161e8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20016190:	e8730014 	lwi	r3, r19, 20
20016194:	e8830000 	lwi	r4, r3, 0
20016198:	e8730014 	lwi	r3, r19, 20
2001619c:	e8a3000c 	lwi	r5, r3, 12
200161a0:	e8730004 	lwi	r3, r19, 4
200161a4:	64630402 	bslli	r3, r3, 2
200161a8:	10651800 	addk	r3, r5, r3
200161ac:	e8a30000 	lwi	r5, r3, 0
200161b0:	e8730014 	lwi	r3, r19, 20
200161b4:	e8630010 	lwi	r3, r3, 16
200161b8:	e8630000 	lwi	r3, r3, 0
200161bc:	14632800 	rsubk	r3, r3, r5
200161c0:	10641800 	addk	r3, r4, r3
200161c4:	30830001 	addik	r4, r3, 1
200161c8:	e873001c 	lwi	r3, r19, 28
200161cc:	16441803 	cmpu	r18, r4, r3
200161d0:	bc52000c 	blti	r18, 12		// 200161dc
            return 0;
200161d4:	10600000 	addk	r3, r0, r0
200161d8:	b8000024 	bri	36		// 200161fc
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200161dc:	e8730004 	lwi	r3, r19, 4
200161e0:	30630001 	addik	r3, r3, 1
200161e4:	f8730004 	swi	r3, r19, 4
200161e8:	e8930004 	lwi	r4, r19, 4
200161ec:	e8730018 	lwi	r3, r19, 24
200161f0:	16432003 	cmpu	r18, r3, r4
200161f4:	bc52ff9c 	blti	r18, -100		// 20016190
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200161f8:	30600001 	addik	r3, r0, 1
}
200161fc:	10330000 	addk	r1, r19, r0
20016200:	ea610008 	lwi	r19, r1, 8
20016204:	ea81000c 	lwi	r20, r1, 12
20016208:	30210010 	addik	r1, r1, 16
2001620c:	b60f0008 	rtsd	r15, 8
20016210:	80000000 	or	r0, r0, r0

20016214 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20016214:	3021ffe8 	addik	r1, r1, -24
20016218:	fa610010 	swi	r19, r1, 16
2001621c:	fa810014 	swi	r20, r1, 20
20016220:	12610000 	addk	r19, r1, r0
20016224:	96808000 	mfs	r20, rpc
20016228:	b000dffe 	imm	-8194
2001622c:	3294b738 	addik	r20, r20, -18632
20016230:	f8b3001c 	swi	r5, r19, 28
20016234:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20016238:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001623c:	f8130004 	swi	r0, r19, 4
20016240:	b8000054 	bri	84		// 20016294
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20016244:	e873001c 	lwi	r3, r19, 28
20016248:	e8630010 	lwi	r3, r3, 16
2001624c:	e8830000 	lwi	r4, r3, 0
20016250:	e873001c 	lwi	r3, r19, 28
20016254:	e8a3000c 	lwi	r5, r3, 12
20016258:	e8730004 	lwi	r3, r19, 4
2001625c:	64630402 	bslli	r3, r3, 2
20016260:	10651800 	addk	r3, r5, r3
20016264:	e8630000 	lwi	r3, r3, 0
20016268:	14632000 	rsubk	r3, r3, r4
2001626c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20016270:	e8930008 	lwi	r4, r19, 8
20016274:	e873000c 	lwi	r3, r19, 12
20016278:	16441803 	cmpu	r18, r4, r3
2001627c:	bcb20008 	bgei	r18, 8		// 20016284
20016280:	10640000 	addk	r3, r4, r0
20016284:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20016288:	e8730004 	lwi	r3, r19, 4
2001628c:	30630001 	addik	r3, r3, 1
20016290:	f8730004 	swi	r3, r19, 4
20016294:	e8930004 	lwi	r4, r19, 4
20016298:	e8730020 	lwi	r3, r19, 32
2001629c:	16432003 	cmpu	r18, r3, r4
200162a0:	bc52ffa4 	blti	r18, -92		// 20016244
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200162a4:	e873001c 	lwi	r3, r19, 28
200162a8:	e8830000 	lwi	r4, r3, 0
200162ac:	e8730008 	lwi	r3, r19, 8
200162b0:	14632000 	rsubk	r3, r3, r4
}
200162b4:	10330000 	addk	r1, r19, r0
200162b8:	ea610010 	lwi	r19, r1, 16
200162bc:	ea810014 	lwi	r20, r1, 20
200162c0:	30210018 	addik	r1, r1, 24
200162c4:	b60f0008 	rtsd	r15, 8
200162c8:	80000000 	or	r0, r0, r0

200162cc <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200162cc:	3021fff0 	addik	r1, r1, -16
200162d0:	fa610008 	swi	r19, r1, 8
200162d4:	fa81000c 	swi	r20, r1, 12
200162d8:	12610000 	addk	r19, r1, r0
200162dc:	96808000 	mfs	r20, rpc
200162e0:	b000dffe 	imm	-8194
200162e4:	3294b680 	addik	r20, r20, -18816
200162e8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200162ec:	e8730014 	lwi	r3, r19, 20
200162f0:	e8630010 	lwi	r3, r3, 16
200162f4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200162f8:	f8130004 	swi	r0, r19, 4
200162fc:	b8000028 	bri	40		// 20016324
        fifo->read_inds[i] = 0;
20016300:	e8730014 	lwi	r3, r19, 20
20016304:	e883000c 	lwi	r4, r3, 12
20016308:	e8730004 	lwi	r3, r19, 4
2001630c:	64630402 	bslli	r3, r3, 2
20016310:	10641800 	addk	r3, r4, r3
20016314:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20016318:	e8730004 	lwi	r3, r19, 4
2001631c:	30630001 	addik	r3, r3, 1
20016320:	f8730004 	swi	r3, r19, 4
20016324:	e8730014 	lwi	r3, r19, 20
20016328:	e8830008 	lwi	r4, r3, 8
2001632c:	e8730004 	lwi	r3, r19, 4
20016330:	16441803 	cmpu	r18, r4, r3
20016334:	bc52ffcc 	blti	r18, -52		// 20016300
        fifo->read_inds[i] = 0;
    }
}
20016338:	10330000 	addk	r1, r19, r0
2001633c:	ea610008 	lwi	r19, r1, 8
20016340:	ea81000c 	lwi	r20, r1, 12
20016344:	30210010 	addik	r1, r1, 16
20016348:	b60f0008 	rtsd	r15, 8
2001634c:	80000000 	or	r0, r0, r0

20016350 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20016350:	3021fff0 	addik	r1, r1, -16
20016354:	fa610008 	swi	r19, r1, 8
20016358:	fa81000c 	swi	r20, r1, 12
2001635c:	12610000 	addk	r19, r1, r0
20016360:	96808000 	mfs	r20, rpc
20016364:	b000dffe 	imm	-8194
20016368:	3294b5fc 	addik	r20, r20, -18948
2001636c:	f8b30014 	swi	r5, r19, 20
20016370:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20016374:	e8730014 	lwi	r3, r19, 20
20016378:	e8830004 	lwi	r4, r3, 4
2001637c:	e8730014 	lwi	r3, r19, 20
20016380:	e8a3000c 	lwi	r5, r3, 12
20016384:	e8730018 	lwi	r3, r19, 24
20016388:	64630402 	bslli	r3, r3, 2
2001638c:	10651800 	addk	r3, r5, r3
20016390:	e8a30000 	lwi	r5, r3, 0
20016394:	e8730014 	lwi	r3, r19, 20
20016398:	e8630000 	lwi	r3, r3, 0
2001639c:	3063ffff 	addik	r3, r3, -1
200163a0:	84651800 	and	r3, r5, r3
200163a4:	64630402 	bslli	r3, r3, 2
200163a8:	10641800 	addk	r3, r4, r3
200163ac:	e8630000 	lwi	r3, r3, 0
200163b0:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200163b4:	e8730014 	lwi	r3, r19, 20
200163b8:	e883000c 	lwi	r4, r3, 12
200163bc:	e8730018 	lwi	r3, r19, 24
200163c0:	64630402 	bslli	r3, r3, 2
200163c4:	10641800 	addk	r3, r4, r3
200163c8:	e8830000 	lwi	r4, r3, 0
200163cc:	30840001 	addik	r4, r4, 1
200163d0:	f8830000 	swi	r4, r3, 0
    return value;
200163d4:	e8730004 	lwi	r3, r19, 4
}
200163d8:	10330000 	addk	r1, r19, r0
200163dc:	ea610008 	lwi	r19, r1, 8
200163e0:	ea81000c 	lwi	r20, r1, 12
200163e4:	30210010 	addik	r1, r1, 16
200163e8:	b60f0008 	rtsd	r15, 8
200163ec:	80000000 	or	r0, r0, r0

200163f0 <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200163f0:	3021fff4 	addik	r1, r1, -12
200163f4:	fa610004 	swi	r19, r1, 4
200163f8:	fa810008 	swi	r20, r1, 8
200163fc:	12610000 	addk	r19, r1, r0
20016400:	96808000 	mfs	r20, rpc
20016404:	b000dffe 	imm	-8194
20016408:	3294b55c 	addik	r20, r20, -19108
2001640c:	f8b30010 	swi	r5, r19, 16
20016410:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20016414:	e8730010 	lwi	r3, r19, 16
20016418:	e8830004 	lwi	r4, r3, 4
2001641c:	e8730010 	lwi	r3, r19, 16
20016420:	e8630010 	lwi	r3, r3, 16
20016424:	e8a30000 	lwi	r5, r3, 0
20016428:	e8730010 	lwi	r3, r19, 16
2001642c:	e8630000 	lwi	r3, r3, 0
20016430:	3063ffff 	addik	r3, r3, -1
20016434:	84651800 	and	r3, r5, r3
20016438:	64630402 	bslli	r3, r3, 2
2001643c:	10641800 	addk	r3, r4, r3
20016440:	e8930014 	lwi	r4, r19, 20
20016444:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20016448:	e8730010 	lwi	r3, r19, 16
2001644c:	e8630010 	lwi	r3, r3, 16
20016450:	e8830000 	lwi	r4, r3, 0
20016454:	30840001 	addik	r4, r4, 1
20016458:	f8830000 	swi	r4, r3, 0
}
2001645c:	10330000 	addk	r1, r19, r0
20016460:	ea610004 	lwi	r19, r1, 4
20016464:	ea810008 	lwi	r20, r1, 8
20016468:	3021000c 	addik	r1, r1, 12
2001646c:	b60f0008 	rtsd	r15, 8
20016470:	80000000 	or	r0, r0, r0

20016474 <read_RD>:
	
	static u8 needInit = 1;
	
	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_RD() {
20016474:	3021ffdc 	addik	r1, r1, -36
20016478:	f9e10000 	swi	r15, r1, 0
2001647c:	fa61001c 	swi	r19, r1, 28
20016480:	fa810020 	swi	r20, r1, 32
20016484:	12610000 	addk	r19, r1, r0
20016488:	96808000 	mfs	r20, rpc
2001648c:	b000dffe 	imm	-8194
20016490:	3294b4d4 	addik	r20, r20, -19244
		index_RD = decoder_motion_interpolation_RD->read_inds[0];
20016494:	b0000000 	imm	0
20016498:	e874022c 	lwi	r3, r20, 556
2001649c:	e8630000 	lwi	r3, r3, 0
200164a0:	e863000c 	lwi	r3, r3, 12
200164a4:	e8830000 	lwi	r4, r3, 0
200164a8:	b0000000 	imm	0
200164ac:	e8740234 	lwi	r3, r20, 564
200164b0:	f8830000 	swi	r4, r3, 0
		numTokens_RD = index_RD + fifo_i16_get_num_tokens(decoder_motion_interpolation_RD, 0);
200164b4:	b0000000 	imm	0
200164b8:	e874022c 	lwi	r3, r20, 556
200164bc:	e8630000 	lwi	r3, r3, 0
200164c0:	10a30000 	addk	r5, r3, r0
200164c4:	10c00000 	addk	r6, r0, r0
200164c8:	b0000000 	imm	0
200164cc:	e8940220 	lwi	r4, r20, 544
200164d0:	99fc2000 	brald	r15, r4
200164d4:	80000000 	or	r0, r0, r0
200164d8:	10830000 	addk	r4, r3, r0
200164dc:	b0000000 	imm	0
200164e0:	e8740234 	lwi	r3, r20, 564
200164e4:	e8630000 	lwi	r3, r3, 0
200164e8:	10841800 	addk	r4, r4, r3
200164ec:	b0000000 	imm	0
200164f0:	e8740238 	lwi	r3, r20, 568
200164f4:	f8830000 	swi	r4, r3, 0
	}
200164f8:	e9e10000 	lwi	r15, r1, 0
200164fc:	10330000 	addk	r1, r19, r0
20016500:	ea61001c 	lwi	r19, r1, 28
20016504:	ea810020 	lwi	r20, r1, 32
20016508:	30210024 	addik	r1, r1, 36
2001650c:	b60f0008 	rtsd	r15, 8
20016510:	80000000 	or	r0, r0, r0

20016514 <read_end_RD>:
	
	static void read_end_RD() {
20016514:	3021fff4 	addik	r1, r1, -12
20016518:	fa610004 	swi	r19, r1, 4
2001651c:	fa810008 	swi	r20, r1, 8
20016520:	12610000 	addk	r19, r1, r0
20016524:	96808000 	mfs	r20, rpc
20016528:	b000dffe 	imm	-8194
2001652c:	3294b438 	addik	r20, r20, -19400
		decoder_motion_interpolation_RD->read_inds[0] = index_RD;
20016530:	b0000000 	imm	0
20016534:	e874022c 	lwi	r3, r20, 556
20016538:	e8630000 	lwi	r3, r3, 0
2001653c:	e863000c 	lwi	r3, r3, 12
20016540:	b0000000 	imm	0
20016544:	e8940234 	lwi	r4, r20, 564
20016548:	e8840000 	lwi	r4, r4, 0
2001654c:	f8830000 	swi	r4, r3, 0
	}
20016550:	10330000 	addk	r1, r19, r0
20016554:	ea610004 	lwi	r19, r1, 4
20016558:	ea810008 	lwi	r20, r1, 8
2001655c:	3021000c 	addik	r1, r1, 12
20016560:	b60f0008 	rtsd	r15, 8
20016564:	80000000 	or	r0, r0, r0

20016568 <read_halfpel>:
	static void read_halfpel() {
20016568:	3021ffdc 	addik	r1, r1, -36
2001656c:	f9e10000 	swi	r15, r1, 0
20016570:	fa61001c 	swi	r19, r1, 28
20016574:	fa810020 	swi	r20, r1, 32
20016578:	12610000 	addk	r19, r1, r0
2001657c:	96808000 	mfs	r20, rpc
20016580:	b000dffe 	imm	-8194
20016584:	3294b3e0 	addik	r20, r20, -19488
		index_halfpel = decoder_motion_interpolation_halfpel->read_inds[0];
20016588:	b0000000 	imm	0
2001658c:	e8740230 	lwi	r3, r20, 560
20016590:	e8630000 	lwi	r3, r3, 0
20016594:	e863000c 	lwi	r3, r3, 12
20016598:	e8830000 	lwi	r4, r3, 0
2001659c:	b0000000 	imm	0
200165a0:	e874023c 	lwi	r3, r20, 572
200165a4:	f8830000 	swi	r4, r3, 0
		numTokens_halfpel = index_halfpel + fifo_i8_get_num_tokens(decoder_motion_interpolation_halfpel, 0);
200165a8:	b0000000 	imm	0
200165ac:	e8740230 	lwi	r3, r20, 560
200165b0:	e8630000 	lwi	r3, r3, 0
200165b4:	10a30000 	addk	r5, r3, r0
200165b8:	10c00000 	addk	r6, r0, r0
200165bc:	b0000000 	imm	0
200165c0:	e894021c 	lwi	r4, r20, 540
200165c4:	99fc2000 	brald	r15, r4
200165c8:	80000000 	or	r0, r0, r0
200165cc:	10830000 	addk	r4, r3, r0
200165d0:	b0000000 	imm	0
200165d4:	e874023c 	lwi	r3, r20, 572
200165d8:	e8630000 	lwi	r3, r3, 0
200165dc:	10841800 	addk	r4, r4, r3
200165e0:	b0000000 	imm	0
200165e4:	e8740240 	lwi	r3, r20, 576
200165e8:	f8830000 	swi	r4, r3, 0
	}
200165ec:	e9e10000 	lwi	r15, r1, 0
200165f0:	10330000 	addk	r1, r19, r0
200165f4:	ea61001c 	lwi	r19, r1, 28
200165f8:	ea810020 	lwi	r20, r1, 32
200165fc:	30210024 	addik	r1, r1, 36
20016600:	b60f0008 	rtsd	r15, 8
20016604:	80000000 	or	r0, r0, r0

20016608 <read_end_halfpel>:
	
	static void read_end_halfpel() {
20016608:	3021fff4 	addik	r1, r1, -12
2001660c:	fa610004 	swi	r19, r1, 4
20016610:	fa810008 	swi	r20, r1, 8
20016614:	12610000 	addk	r19, r1, r0
20016618:	96808000 	mfs	r20, rpc
2001661c:	b000dffe 	imm	-8194
20016620:	3294b344 	addik	r20, r20, -19644
		decoder_motion_interpolation_halfpel->read_inds[0] = index_halfpel;
20016624:	b0000000 	imm	0
20016628:	e8740230 	lwi	r3, r20, 560
2001662c:	e8630000 	lwi	r3, r3, 0
20016630:	e863000c 	lwi	r3, r3, 12
20016634:	b0000000 	imm	0
20016638:	e894023c 	lwi	r4, r20, 572
2001663c:	e8840000 	lwi	r4, r4, 0
20016640:	f8830000 	swi	r4, r3, 0
	}
20016644:	10330000 	addk	r1, r19, r0
20016648:	ea610004 	lwi	r19, r1, 4
2001664c:	ea810008 	lwi	r20, r1, 8
20016650:	3021000c 	addik	r1, r1, 12
20016654:	b60f0008 	rtsd	r15, 8
20016658:	80000000 	or	r0, r0, r0

2001665c <write_MOT>:

	static void write_MOT() {
2001665c:	3021ffdc 	addik	r1, r1, -36
20016660:	f9e10000 	swi	r15, r1, 0
20016664:	fa61001c 	swi	r19, r1, 28
20016668:	fa810020 	swi	r20, r1, 32
2001666c:	12610000 	addk	r19, r1, r0
20016670:	96808000 	mfs	r20, rpc
20016674:	b000dffe 	imm	-8194
20016678:	3294b2ec 	addik	r20, r20, -19732
		index_MOT = (*decoder_motion_interpolation_MOT->write_ind);
2001667c:	b0000000 	imm	0
20016680:	e8740228 	lwi	r3, r20, 552
20016684:	e8630000 	lwi	r3, r3, 0
20016688:	e8630010 	lwi	r3, r3, 16
2001668c:	e8830000 	lwi	r4, r3, 0
20016690:	b0000000 	imm	0
20016694:	e8740244 	lwi	r3, r20, 580
20016698:	f8830000 	swi	r4, r3, 0
		numFree_MOT = index_MOT + fifo_i16_get_room(decoder_motion_interpolation_MOT, NUM_READERS_MOT);
2001669c:	b0000000 	imm	0
200166a0:	e8740228 	lwi	r3, r20, 552
200166a4:	e8630000 	lwi	r3, r3, 0
200166a8:	10a30000 	addk	r5, r3, r0
200166ac:	30c00001 	addik	r6, r0, 1
200166b0:	b0000000 	imm	0
200166b4:	e8940224 	lwi	r4, r20, 548
200166b8:	99fc2000 	brald	r15, r4
200166bc:	80000000 	or	r0, r0, r0
200166c0:	10830000 	addk	r4, r3, r0
200166c4:	b0000000 	imm	0
200166c8:	e8740244 	lwi	r3, r20, 580
200166cc:	e8630000 	lwi	r3, r3, 0
200166d0:	10841800 	addk	r4, r4, r3
200166d4:	b0000000 	imm	0
200166d8:	e8740248 	lwi	r3, r20, 584
200166dc:	f8830000 	swi	r4, r3, 0
	}
200166e0:	e9e10000 	lwi	r15, r1, 0
200166e4:	10330000 	addk	r1, r19, r0
200166e8:	ea61001c 	lwi	r19, r1, 28
200166ec:	ea810020 	lwi	r20, r1, 32
200166f0:	30210024 	addik	r1, r1, 36
200166f4:	b60f0008 	rtsd	r15, 8
200166f8:	80000000 	or	r0, r0, r0

200166fc <write_end_MOT>:
	
	static void write_end_MOT() {
200166fc:	3021fff4 	addik	r1, r1, -12
20016700:	fa610004 	swi	r19, r1, 4
20016704:	fa810008 	swi	r20, r1, 8
20016708:	12610000 	addk	r19, r1, r0
2001670c:	96808000 	mfs	r20, rpc
20016710:	b000dffe 	imm	-8194
20016714:	3294b250 	addik	r20, r20, -19888
		(*decoder_motion_interpolation_MOT->write_ind) = index_MOT;
20016718:	b0000000 	imm	0
2001671c:	e8740228 	lwi	r3, r20, 552
20016720:	e8630000 	lwi	r3, r3, 0
20016724:	e8630010 	lwi	r3, r3, 16
20016728:	b0000000 	imm	0
2001672c:	e8940244 	lwi	r4, r20, 580
20016730:	e8840000 	lwi	r4, r4, 0
20016734:	f8830000 	swi	r4, r3, 0
	}
20016738:	10330000 	addk	r1, r19, r0
2001673c:	ea610004 	lwi	r19, r1, 4
20016740:	ea810008 	lwi	r20, r1, 8
20016744:	3021000c 	addik	r1, r1, 12
20016748:	b60f0008 	rtsd	r15, 8
2001674c:	80000000 	or	r0, r0, r0

20016750 <isSchedulable_none>:
	// Functions/procedures


	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_none() {
20016750:	3021ffec 	addik	r1, r1, -20
20016754:	fa61000c 	swi	r19, r1, 12
20016758:	fa810010 	swi	r20, r1, 16
2001675c:	12610000 	addk	r19, r1, r0
20016760:	96808000 	mfs	r20, rpc
20016764:	b000dffe 	imm	-8194
20016768:	3294b1fc 	addik	r20, r20, -19972
		i32 result;
		i8 flags;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
2001676c:	b0000000 	imm	0
20016770:	e8740230 	lwi	r3, r20, 560
20016774:	e8630000 	lwi	r3, r3, 0
20016778:	e8830004 	lwi	r4, r3, 4
2001677c:	b0000000 	imm	0
20016780:	e874023c 	lwi	r3, r20, 572
20016784:	e8630000 	lwi	r3, r3, 0
20016788:	a46301ff 	andi	r3, r3, 511
2001678c:	10641800 	addk	r3, r4, r3
20016790:	e0630000 	lbui	r3, r3, 0
20016794:	f0730004 	sbi	r3, r19, 4
		result = flags >> 1 == 0;
20016798:	e0730004 	lbui	r3, r19, 4
2001679c:	90630060 	sext8	r3, r3
200167a0:	90630001 	sra	r3, r3
200167a4:	90830060 	sext8	r4, r3
200167a8:	10600000 	addk	r3, r0, r0
200167ac:	88641c00 	pcmpeq	r3, r4, r3
200167b0:	a46300ff 	andi	r3, r3, 255
200167b4:	f8730008 	swi	r3, r19, 8
		return result;
200167b8:	e8730008 	lwi	r3, r19, 8
	}
200167bc:	10330000 	addk	r1, r19, r0
200167c0:	ea61000c 	lwi	r19, r1, 12
200167c4:	ea810010 	lwi	r20, r1, 16
200167c8:	30210014 	addik	r1, r1, 20
200167cc:	b60f0008 	rtsd	r15, 8
200167d0:	80000000 	or	r0, r0, r0

200167d4 <none>:
	
	static void none() {
200167d4:	3021ffc4 	addik	r1, r1, -60
200167d8:	f9e10000 	swi	r15, r1, 0
200167dc:	fa610034 	swi	r19, r1, 52
200167e0:	fa810038 	swi	r20, r1, 56
200167e4:	12610000 	addk	r19, r1, r0
200167e8:	96808000 	mfs	r20, rpc
200167ec:	b000dffe 	imm	-8194
200167f0:	3294b174 	addik	r20, r20, -20108
	
		// Compute aligned port indexes
		i32 index_aligned_halfpel = index_halfpel % SIZE_halfpel;
200167f4:	b0000000 	imm	0
200167f8:	e874023c 	lwi	r3, r20, 572
200167fc:	e8630000 	lwi	r3, r3, 0
20016800:	a46301ff 	andi	r3, r3, 511
20016804:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_RD = index_RD % SIZE_RD;
20016808:	b0000000 	imm	0
2001680c:	e8740234 	lwi	r3, r20, 564
20016810:	e8630000 	lwi	r3, r3, 0
20016814:	a46301ff 	andi	r3, r3, 511
20016818:	f8730028 	swi	r3, r19, 40
		i32 index_aligned_MOT = index_MOT % SIZE_MOT;
2001681c:	b0000000 	imm	0
20016820:	e8740244 	lwi	r3, r20, 580
20016824:	e8630000 	lwi	r3, r3, 0
20016828:	a46301ff 	andi	r3, r3, 511
2001682c:	f873002c 	swi	r3, r19, 44
		i8 flags;
		i32 j;
		i32 k;
		i16 tmp_RD;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
20016830:	b0000000 	imm	0
20016834:	e8740230 	lwi	r3, r20, 560
20016838:	e8630000 	lwi	r3, r3, 0
2001683c:	e8830004 	lwi	r4, r3, 4
20016840:	b0000000 	imm	0
20016844:	e874023c 	lwi	r3, r20, 572
20016848:	e8630000 	lwi	r3, r3, 0
2001684c:	a46301ff 	andi	r3, r3, 511
20016850:	10641800 	addk	r3, r4, r3
20016854:	e0630000 	lbui	r3, r3, 0
20016858:	f0730030 	sbi	r3, r19, 48
		j = 0;
2001685c:	f813001c 	swi	r0, r19, 28
		while (j <= 7) {
20016860:	b80000c4 	bri	196		// 20016924
			k = 0;
20016864:	f8130020 	swi	r0, r19, 32
			while (k <= 7) {
20016868:	b80000a0 	bri	160		// 20016908
				tmp_RD = tokens_RD[(index_RD + (9 * j + k)) % SIZE_RD];
2001686c:	b0000000 	imm	0
20016870:	e874022c 	lwi	r3, r20, 556
20016874:	e8630000 	lwi	r3, r3, 0
20016878:	e8830004 	lwi	r4, r3, 4
2001687c:	e873001c 	lwi	r3, r19, 28
20016880:	60a30009 	muli	r5, r3, 9
20016884:	e8730020 	lwi	r3, r19, 32
20016888:	10651800 	addk	r3, r5, r3
2001688c:	10a30000 	addk	r5, r3, r0
20016890:	b0000000 	imm	0
20016894:	e8740234 	lwi	r3, r20, 564
20016898:	e8630000 	lwi	r3, r3, 0
2001689c:	10651800 	addk	r3, r5, r3
200168a0:	a46301ff 	andi	r3, r3, 511
200168a4:	10631800 	addk	r3, r3, r3
200168a8:	10641800 	addk	r3, r4, r3
200168ac:	e4630000 	lhui	r3, r3, 0
200168b0:	f4730032 	shi	r3, r19, 50
				tokens_MOT[(index_MOT + (j * 8 + k)) % SIZE_MOT] = tmp_RD;
200168b4:	b0000000 	imm	0
200168b8:	e8740228 	lwi	r3, r20, 552
200168bc:	e8630000 	lwi	r3, r3, 0
200168c0:	e8830004 	lwi	r4, r3, 4
200168c4:	e873001c 	lwi	r3, r19, 28
200168c8:	64a30403 	bslli	r5, r3, 3
200168cc:	e8730020 	lwi	r3, r19, 32
200168d0:	10651800 	addk	r3, r5, r3
200168d4:	10a30000 	addk	r5, r3, r0
200168d8:	b0000000 	imm	0
200168dc:	e8740244 	lwi	r3, r20, 580
200168e0:	e8630000 	lwi	r3, r3, 0
200168e4:	10651800 	addk	r3, r5, r3
200168e8:	a46301ff 	andi	r3, r3, 511
200168ec:	10631800 	addk	r3, r3, r3
200168f0:	10641800 	addk	r3, r4, r3
200168f4:	e4930032 	lhui	r4, r19, 50
200168f8:	f4830000 	shi	r4, r3, 0
				k = k + 1;
200168fc:	e8730020 	lwi	r3, r19, 32
20016900:	30630001 	addik	r3, r3, 1
20016904:	f8730020 	swi	r3, r19, 32
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
		j = 0;
		while (j <= 7) {
			k = 0;
			while (k <= 7) {
20016908:	e8930020 	lwi	r4, r19, 32
2001690c:	30600007 	addik	r3, r0, 7
20016910:	16441801 	cmp	r18, r4, r3
20016914:	bcb2ff58 	bgei	r18, -168		// 2001686c
				tmp_RD = tokens_RD[(index_RD + (9 * j + k)) % SIZE_RD];
				tokens_MOT[(index_MOT + (j * 8 + k)) % SIZE_MOT] = tmp_RD;
				k = k + 1;
			}
			j = j + 1;
20016918:	e873001c 	lwi	r3, r19, 28
2001691c:	30630001 	addik	r3, r3, 1
20016920:	f873001c 	swi	r3, r19, 28
		i32 k;
		i16 tmp_RD;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
		j = 0;
		while (j <= 7) {
20016924:	e893001c 	lwi	r4, r19, 28
20016928:	30600007 	addik	r3, r0, 7
2001692c:	16441801 	cmp	r18, r4, r3
20016930:	bcb2ff34 	bgei	r18, -204		// 20016864
			}
			j = j + 1;
		}
	
		// Update ports indexes
		index_halfpel += 1;
20016934:	b0000000 	imm	0
20016938:	e874023c 	lwi	r3, r20, 572
2001693c:	e8630000 	lwi	r3, r3, 0
20016940:	30830001 	addik	r4, r3, 1
20016944:	b0000000 	imm	0
20016948:	e874023c 	lwi	r3, r20, 572
2001694c:	f8830000 	swi	r4, r3, 0
		index_RD += 81;
20016950:	b0000000 	imm	0
20016954:	e8740234 	lwi	r3, r20, 564
20016958:	e8630000 	lwi	r3, r3, 0
2001695c:	30830051 	addik	r4, r3, 81
20016960:	b0000000 	imm	0
20016964:	e8740234 	lwi	r3, r20, 564
20016968:	f8830000 	swi	r4, r3, 0
		index_MOT += 64;
2001696c:	b0000000 	imm	0
20016970:	e8740244 	lwi	r3, r20, 580
20016974:	e8630000 	lwi	r3, r3, 0
20016978:	30830040 	addik	r4, r3, 64
2001697c:	b0000000 	imm	0
20016980:	e8740244 	lwi	r3, r20, 580
20016984:	f8830000 	swi	r4, r3, 0
		
		read_end_halfpel();
20016988:	b0000000 	imm	0
2001698c:	e874025c 	lwi	r3, r20, 604
20016990:	99fc1800 	brald	r15, r3
20016994:	80000000 	or	r0, r0, r0
		read_end_RD();
20016998:	b0000000 	imm	0
2001699c:	e8740254 	lwi	r3, r20, 596
200169a0:	99fc1800 	brald	r15, r3
200169a4:	80000000 	or	r0, r0, r0
		write_end_MOT();
200169a8:	b0000000 	imm	0
200169ac:	e8740264 	lwi	r3, r20, 612
200169b0:	99fc1800 	brald	r15, r3
200169b4:	80000000 	or	r0, r0, r0
	}
200169b8:	e9e10000 	lwi	r15, r1, 0
200169bc:	10330000 	addk	r1, r19, r0
200169c0:	ea610034 	lwi	r19, r1, 52
200169c4:	ea810038 	lwi	r20, r1, 56
200169c8:	3021003c 	addik	r1, r1, 60
200169cc:	b60f0008 	rtsd	r15, 8
200169d0:	80000000 	or	r0, r0, r0

200169d4 <isSchedulable_row>:
	static i32 isSchedulable_row() {
200169d4:	3021ffec 	addik	r1, r1, -20
200169d8:	fa61000c 	swi	r19, r1, 12
200169dc:	fa810010 	swi	r20, r1, 16
200169e0:	12610000 	addk	r19, r1, r0
200169e4:	96808000 	mfs	r20, rpc
200169e8:	b000dffe 	imm	-8194
200169ec:	3294af78 	addik	r20, r20, -20616
		i32 result;
		i8 flags;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
200169f0:	b0000000 	imm	0
200169f4:	e8740230 	lwi	r3, r20, 560
200169f8:	e8630000 	lwi	r3, r3, 0
200169fc:	e8830004 	lwi	r4, r3, 4
20016a00:	b0000000 	imm	0
20016a04:	e874023c 	lwi	r3, r20, 572
20016a08:	e8630000 	lwi	r3, r3, 0
20016a0c:	a46301ff 	andi	r3, r3, 511
20016a10:	10641800 	addk	r3, r4, r3
20016a14:	e0630000 	lbui	r3, r3, 0
20016a18:	f0730004 	sbi	r3, r19, 4
		result = flags >> 1 == 1;
20016a1c:	e0730004 	lbui	r3, r19, 4
20016a20:	90630060 	sext8	r3, r3
20016a24:	90630001 	sra	r3, r3
20016a28:	90830060 	sext8	r4, r3
20016a2c:	30600001 	addik	r3, r0, 1
20016a30:	88641c00 	pcmpeq	r3, r4, r3
20016a34:	a46300ff 	andi	r3, r3, 255
20016a38:	f8730008 	swi	r3, r19, 8
		return result;
20016a3c:	e8730008 	lwi	r3, r19, 8
	}
20016a40:	10330000 	addk	r1, r19, r0
20016a44:	ea61000c 	lwi	r19, r1, 12
20016a48:	ea810010 	lwi	r20, r1, 16
20016a4c:	30210014 	addik	r1, r1, 20
20016a50:	b60f0008 	rtsd	r15, 8
20016a54:	80000000 	or	r0, r0, r0

20016a58 <row>:
	
	static void row() {
20016a58:	3021ffbc 	addik	r1, r1, -68
20016a5c:	f9e10000 	swi	r15, r1, 0
20016a60:	fa61003c 	swi	r19, r1, 60
20016a64:	fa810040 	swi	r20, r1, 64
20016a68:	12610000 	addk	r19, r1, r0
20016a6c:	96808000 	mfs	r20, rpc
20016a70:	b000dffe 	imm	-8194
20016a74:	3294aef0 	addik	r20, r20, -20752
	
		// Compute aligned port indexes
		i32 index_aligned_halfpel = index_halfpel % SIZE_halfpel;
20016a78:	b0000000 	imm	0
20016a7c:	e874023c 	lwi	r3, r20, 572
20016a80:	e8630000 	lwi	r3, r3, 0
20016a84:	a46301ff 	andi	r3, r3, 511
20016a88:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_RD = index_RD % SIZE_RD;
20016a8c:	b0000000 	imm	0
20016a90:	e8740234 	lwi	r3, r20, 564
20016a94:	e8630000 	lwi	r3, r3, 0
20016a98:	a46301ff 	andi	r3, r3, 511
20016a9c:	f8730028 	swi	r3, r19, 40
		i32 index_aligned_MOT = index_MOT % SIZE_MOT;
20016aa0:	b0000000 	imm	0
20016aa4:	e8740244 	lwi	r3, r20, 580
20016aa8:	e8630000 	lwi	r3, r3, 0
20016aac:	a46301ff 	andi	r3, r3, 511
20016ab0:	f873002c 	swi	r3, r19, 44
		i32 j;
		i32 k;
		i16 tmp_RD;
		i16 tmp_RD0;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
20016ab4:	b0000000 	imm	0
20016ab8:	e8740230 	lwi	r3, r20, 560
20016abc:	e8630000 	lwi	r3, r3, 0
20016ac0:	e8830004 	lwi	r4, r3, 4
20016ac4:	b0000000 	imm	0
20016ac8:	e874023c 	lwi	r3, r20, 572
20016acc:	e8630000 	lwi	r3, r3, 0
20016ad0:	a46301ff 	andi	r3, r3, 511
20016ad4:	10641800 	addk	r3, r4, r3
20016ad8:	e0630000 	lbui	r3, r3, 0
20016adc:	f0730030 	sbi	r3, r19, 48
		round = 1 - (flags & 1);
20016ae0:	e0730030 	lbui	r3, r19, 48
20016ae4:	a4830001 	andi	r4, r3, 1
20016ae8:	10600000 	addk	r3, r0, r0
20016aec:	88641c00 	pcmpeq	r3, r4, r3
20016af0:	a46300ff 	andi	r3, r3, 255
20016af4:	f8730034 	swi	r3, r19, 52
		j = 0;
20016af8:	f813001c 	swi	r0, r19, 28
		while (j <= 7) {
20016afc:	b8000130 	bri	304		// 20016c2c
			k = 0;
20016b00:	f8130020 	swi	r0, r19, 32
			while (k <= 7) {
20016b04:	b800010c 	bri	268		// 20016c10
				tmp_RD = tokens_RD[(index_RD + (9 * j + k)) % SIZE_RD];
20016b08:	b0000000 	imm	0
20016b0c:	e874022c 	lwi	r3, r20, 556
20016b10:	e8630000 	lwi	r3, r3, 0
20016b14:	e8830004 	lwi	r4, r3, 4
20016b18:	e873001c 	lwi	r3, r19, 28
20016b1c:	60a30009 	muli	r5, r3, 9
20016b20:	e8730020 	lwi	r3, r19, 32
20016b24:	10651800 	addk	r3, r5, r3
20016b28:	10a30000 	addk	r5, r3, r0
20016b2c:	b0000000 	imm	0
20016b30:	e8740234 	lwi	r3, r20, 564
20016b34:	e8630000 	lwi	r3, r3, 0
20016b38:	10651800 	addk	r3, r5, r3
20016b3c:	a46301ff 	andi	r3, r3, 511
20016b40:	10631800 	addk	r3, r3, r3
20016b44:	10641800 	addk	r3, r4, r3
20016b48:	e4630000 	lhui	r3, r3, 0
20016b4c:	f4730038 	shi	r3, r19, 56
				tmp_RD0 = tokens_RD[(index_RD + (9 * (j + 1) + k)) % SIZE_RD];
20016b50:	b0000000 	imm	0
20016b54:	e874022c 	lwi	r3, r20, 556
20016b58:	e8630000 	lwi	r3, r3, 0
20016b5c:	e8830004 	lwi	r4, r3, 4
20016b60:	e873001c 	lwi	r3, r19, 28
20016b64:	30630001 	addik	r3, r3, 1
20016b68:	60a30009 	muli	r5, r3, 9
20016b6c:	e8730020 	lwi	r3, r19, 32
20016b70:	10651800 	addk	r3, r5, r3
20016b74:	10a30000 	addk	r5, r3, r0
20016b78:	b0000000 	imm	0
20016b7c:	e8740234 	lwi	r3, r20, 564
20016b80:	e8630000 	lwi	r3, r3, 0
20016b84:	10651800 	addk	r3, r5, r3
20016b88:	a46301ff 	andi	r3, r3, 511
20016b8c:	10631800 	addk	r3, r3, r3
20016b90:	10641800 	addk	r3, r4, r3
20016b94:	e4630000 	lhui	r3, r3, 0
20016b98:	f473003a 	shi	r3, r19, 58
				tokens_MOT[(index_MOT + (j * 8 + k)) % SIZE_MOT] = (tmp_RD + tmp_RD0 + round) >> 1;
20016b9c:	b0000000 	imm	0
20016ba0:	e8740228 	lwi	r3, r20, 552
20016ba4:	e8630000 	lwi	r3, r3, 0
20016ba8:	e8830004 	lwi	r4, r3, 4
20016bac:	e873001c 	lwi	r3, r19, 28
20016bb0:	64a30403 	bslli	r5, r3, 3
20016bb4:	e8730020 	lwi	r3, r19, 32
20016bb8:	10651800 	addk	r3, r5, r3
20016bbc:	10a30000 	addk	r5, r3, r0
20016bc0:	b0000000 	imm	0
20016bc4:	e8740244 	lwi	r3, r20, 580
20016bc8:	e8630000 	lwi	r3, r3, 0
20016bcc:	10651800 	addk	r3, r5, r3
20016bd0:	a46301ff 	andi	r3, r3, 511
20016bd4:	10631800 	addk	r3, r3, r3
20016bd8:	10641800 	addk	r3, r4, r3
20016bdc:	e4930038 	lhui	r4, r19, 56
20016be0:	90a40061 	sext16	r5, r4
20016be4:	e493003a 	lhui	r4, r19, 58
20016be8:	90840061 	sext16	r4, r4
20016bec:	10a52000 	addk	r5, r5, r4
20016bf0:	e8930034 	lwi	r4, r19, 52
20016bf4:	10852000 	addk	r4, r5, r4
20016bf8:	90840001 	sra	r4, r4
20016bfc:	90840061 	sext16	r4, r4
20016c00:	f4830000 	shi	r4, r3, 0
				k = k + 1;
20016c04:	e8730020 	lwi	r3, r19, 32
20016c08:	30630001 	addik	r3, r3, 1
20016c0c:	f8730020 	swi	r3, r19, 32
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
		round = 1 - (flags & 1);
		j = 0;
		while (j <= 7) {
			k = 0;
			while (k <= 7) {
20016c10:	e8930020 	lwi	r4, r19, 32
20016c14:	30600007 	addik	r3, r0, 7
20016c18:	16441801 	cmp	r18, r4, r3
20016c1c:	bcb2feec 	bgei	r18, -276		// 20016b08
				tmp_RD = tokens_RD[(index_RD + (9 * j + k)) % SIZE_RD];
				tmp_RD0 = tokens_RD[(index_RD + (9 * (j + 1) + k)) % SIZE_RD];
				tokens_MOT[(index_MOT + (j * 8 + k)) % SIZE_MOT] = (tmp_RD + tmp_RD0 + round) >> 1;
				k = k + 1;
			}
			j = j + 1;
20016c20:	e873001c 	lwi	r3, r19, 28
20016c24:	30630001 	addik	r3, r3, 1
20016c28:	f873001c 	swi	r3, r19, 28
		i16 tmp_RD0;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
		round = 1 - (flags & 1);
		j = 0;
		while (j <= 7) {
20016c2c:	e893001c 	lwi	r4, r19, 28
20016c30:	30600007 	addik	r3, r0, 7
20016c34:	16441801 	cmp	r18, r4, r3
20016c38:	bcb2fec8 	bgei	r18, -312		// 20016b00
			}
			j = j + 1;
		}
	
		// Update ports indexes
		index_halfpel += 1;
20016c3c:	b0000000 	imm	0
20016c40:	e874023c 	lwi	r3, r20, 572
20016c44:	e8630000 	lwi	r3, r3, 0
20016c48:	30830001 	addik	r4, r3, 1
20016c4c:	b0000000 	imm	0
20016c50:	e874023c 	lwi	r3, r20, 572
20016c54:	f8830000 	swi	r4, r3, 0
		index_RD += 81;
20016c58:	b0000000 	imm	0
20016c5c:	e8740234 	lwi	r3, r20, 564
20016c60:	e8630000 	lwi	r3, r3, 0
20016c64:	30830051 	addik	r4, r3, 81
20016c68:	b0000000 	imm	0
20016c6c:	e8740234 	lwi	r3, r20, 564
20016c70:	f8830000 	swi	r4, r3, 0
		index_MOT += 64;
20016c74:	b0000000 	imm	0
20016c78:	e8740244 	lwi	r3, r20, 580
20016c7c:	e8630000 	lwi	r3, r3, 0
20016c80:	30830040 	addik	r4, r3, 64
20016c84:	b0000000 	imm	0
20016c88:	e8740244 	lwi	r3, r20, 580
20016c8c:	f8830000 	swi	r4, r3, 0
		
		read_end_halfpel();
20016c90:	b0000000 	imm	0
20016c94:	e874025c 	lwi	r3, r20, 604
20016c98:	99fc1800 	brald	r15, r3
20016c9c:	80000000 	or	r0, r0, r0
		read_end_RD();
20016ca0:	b0000000 	imm	0
20016ca4:	e8740254 	lwi	r3, r20, 596
20016ca8:	99fc1800 	brald	r15, r3
20016cac:	80000000 	or	r0, r0, r0
		write_end_MOT();
20016cb0:	b0000000 	imm	0
20016cb4:	e8740264 	lwi	r3, r20, 612
20016cb8:	99fc1800 	brald	r15, r3
20016cbc:	80000000 	or	r0, r0, r0
	}
20016cc0:	e9e10000 	lwi	r15, r1, 0
20016cc4:	10330000 	addk	r1, r19, r0
20016cc8:	ea61003c 	lwi	r19, r1, 60
20016ccc:	ea810040 	lwi	r20, r1, 64
20016cd0:	30210044 	addik	r1, r1, 68
20016cd4:	b60f0008 	rtsd	r15, 8
20016cd8:	80000000 	or	r0, r0, r0

20016cdc <isSchedulable_col>:
	static i32 isSchedulable_col() {
20016cdc:	3021ffec 	addik	r1, r1, -20
20016ce0:	fa61000c 	swi	r19, r1, 12
20016ce4:	fa810010 	swi	r20, r1, 16
20016ce8:	12610000 	addk	r19, r1, r0
20016cec:	96808000 	mfs	r20, rpc
20016cf0:	b000dffe 	imm	-8194
20016cf4:	3294ac70 	addik	r20, r20, -21392
		i32 result;
		i8 flags;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
20016cf8:	b0000000 	imm	0
20016cfc:	e8740230 	lwi	r3, r20, 560
20016d00:	e8630000 	lwi	r3, r3, 0
20016d04:	e8830004 	lwi	r4, r3, 4
20016d08:	b0000000 	imm	0
20016d0c:	e874023c 	lwi	r3, r20, 572
20016d10:	e8630000 	lwi	r3, r3, 0
20016d14:	a46301ff 	andi	r3, r3, 511
20016d18:	10641800 	addk	r3, r4, r3
20016d1c:	e0630000 	lbui	r3, r3, 0
20016d20:	f0730004 	sbi	r3, r19, 4
		result = flags >> 1 == 2;
20016d24:	e0730004 	lbui	r3, r19, 4
20016d28:	90630060 	sext8	r3, r3
20016d2c:	90630001 	sra	r3, r3
20016d30:	90830060 	sext8	r4, r3
20016d34:	30600002 	addik	r3, r0, 2
20016d38:	88641c00 	pcmpeq	r3, r4, r3
20016d3c:	a46300ff 	andi	r3, r3, 255
20016d40:	f8730008 	swi	r3, r19, 8
		return result;
20016d44:	e8730008 	lwi	r3, r19, 8
	}
20016d48:	10330000 	addk	r1, r19, r0
20016d4c:	ea61000c 	lwi	r19, r1, 12
20016d50:	ea810010 	lwi	r20, r1, 16
20016d54:	30210014 	addik	r1, r1, 20
20016d58:	b60f0008 	rtsd	r15, 8
20016d5c:	80000000 	or	r0, r0, r0

20016d60 <col>:
	
	static void col() {
20016d60:	3021ffbc 	addik	r1, r1, -68
20016d64:	f9e10000 	swi	r15, r1, 0
20016d68:	fa61003c 	swi	r19, r1, 60
20016d6c:	fa810040 	swi	r20, r1, 64
20016d70:	12610000 	addk	r19, r1, r0
20016d74:	96808000 	mfs	r20, rpc
20016d78:	b000dffe 	imm	-8194
20016d7c:	3294abe8 	addik	r20, r20, -21528
	
		// Compute aligned port indexes
		i32 index_aligned_halfpel = index_halfpel % SIZE_halfpel;
20016d80:	b0000000 	imm	0
20016d84:	e874023c 	lwi	r3, r20, 572
20016d88:	e8630000 	lwi	r3, r3, 0
20016d8c:	a46301ff 	andi	r3, r3, 511
20016d90:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_RD = index_RD % SIZE_RD;
20016d94:	b0000000 	imm	0
20016d98:	e8740234 	lwi	r3, r20, 564
20016d9c:	e8630000 	lwi	r3, r3, 0
20016da0:	a46301ff 	andi	r3, r3, 511
20016da4:	f8730028 	swi	r3, r19, 40
		i32 index_aligned_MOT = index_MOT % SIZE_MOT;
20016da8:	b0000000 	imm	0
20016dac:	e8740244 	lwi	r3, r20, 580
20016db0:	e8630000 	lwi	r3, r3, 0
20016db4:	a46301ff 	andi	r3, r3, 511
20016db8:	f873002c 	swi	r3, r19, 44
		i32 j;
		i32 k;
		i16 tmp_RD;
		i16 tmp_RD0;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
20016dbc:	b0000000 	imm	0
20016dc0:	e8740230 	lwi	r3, r20, 560
20016dc4:	e8630000 	lwi	r3, r3, 0
20016dc8:	e8830004 	lwi	r4, r3, 4
20016dcc:	b0000000 	imm	0
20016dd0:	e874023c 	lwi	r3, r20, 572
20016dd4:	e8630000 	lwi	r3, r3, 0
20016dd8:	a46301ff 	andi	r3, r3, 511
20016ddc:	10641800 	addk	r3, r4, r3
20016de0:	e0630000 	lbui	r3, r3, 0
20016de4:	f0730030 	sbi	r3, r19, 48
		round = 1 - (flags & 1);
20016de8:	e0730030 	lbui	r3, r19, 48
20016dec:	a4830001 	andi	r4, r3, 1
20016df0:	10600000 	addk	r3, r0, r0
20016df4:	88641c00 	pcmpeq	r3, r4, r3
20016df8:	a46300ff 	andi	r3, r3, 255
20016dfc:	f8730034 	swi	r3, r19, 52
		j = 0;
20016e00:	f813001c 	swi	r0, r19, 28
		while (j <= 7) {
20016e04:	b8000130 	bri	304		// 20016f34
			k = 0;
20016e08:	f8130020 	swi	r0, r19, 32
			while (k <= 7) {
20016e0c:	b800010c 	bri	268		// 20016f18
				tmp_RD = tokens_RD[(index_RD + (9 * j + k)) % SIZE_RD];
20016e10:	b0000000 	imm	0
20016e14:	e874022c 	lwi	r3, r20, 556
20016e18:	e8630000 	lwi	r3, r3, 0
20016e1c:	e8830004 	lwi	r4, r3, 4
20016e20:	e873001c 	lwi	r3, r19, 28
20016e24:	60a30009 	muli	r5, r3, 9
20016e28:	e8730020 	lwi	r3, r19, 32
20016e2c:	10651800 	addk	r3, r5, r3
20016e30:	10a30000 	addk	r5, r3, r0
20016e34:	b0000000 	imm	0
20016e38:	e8740234 	lwi	r3, r20, 564
20016e3c:	e8630000 	lwi	r3, r3, 0
20016e40:	10651800 	addk	r3, r5, r3
20016e44:	a46301ff 	andi	r3, r3, 511
20016e48:	10631800 	addk	r3, r3, r3
20016e4c:	10641800 	addk	r3, r4, r3
20016e50:	e4630000 	lhui	r3, r3, 0
20016e54:	f4730038 	shi	r3, r19, 56
				tmp_RD0 = tokens_RD[(index_RD + (9 * j + k + 1)) % SIZE_RD];
20016e58:	b0000000 	imm	0
20016e5c:	e874022c 	lwi	r3, r20, 556
20016e60:	e8630000 	lwi	r3, r3, 0
20016e64:	e8830004 	lwi	r4, r3, 4
20016e68:	e873001c 	lwi	r3, r19, 28
20016e6c:	60a30009 	muli	r5, r3, 9
20016e70:	e8730020 	lwi	r3, r19, 32
20016e74:	10651800 	addk	r3, r5, r3
20016e78:	10a30000 	addk	r5, r3, r0
20016e7c:	b0000000 	imm	0
20016e80:	e8740234 	lwi	r3, r20, 564
20016e84:	e8630000 	lwi	r3, r3, 0
20016e88:	10651800 	addk	r3, r5, r3
20016e8c:	30630001 	addik	r3, r3, 1
20016e90:	a46301ff 	andi	r3, r3, 511
20016e94:	10631800 	addk	r3, r3, r3
20016e98:	10641800 	addk	r3, r4, r3
20016e9c:	e4630000 	lhui	r3, r3, 0
20016ea0:	f473003a 	shi	r3, r19, 58
				tokens_MOT[(index_MOT + (j * 8 + k)) % SIZE_MOT] = (tmp_RD + tmp_RD0 + round) >> 1;
20016ea4:	b0000000 	imm	0
20016ea8:	e8740228 	lwi	r3, r20, 552
20016eac:	e8630000 	lwi	r3, r3, 0
20016eb0:	e8830004 	lwi	r4, r3, 4
20016eb4:	e873001c 	lwi	r3, r19, 28
20016eb8:	64a30403 	bslli	r5, r3, 3
20016ebc:	e8730020 	lwi	r3, r19, 32
20016ec0:	10651800 	addk	r3, r5, r3
20016ec4:	10a30000 	addk	r5, r3, r0
20016ec8:	b0000000 	imm	0
20016ecc:	e8740244 	lwi	r3, r20, 580
20016ed0:	e8630000 	lwi	r3, r3, 0
20016ed4:	10651800 	addk	r3, r5, r3
20016ed8:	a46301ff 	andi	r3, r3, 511
20016edc:	10631800 	addk	r3, r3, r3
20016ee0:	10641800 	addk	r3, r4, r3
20016ee4:	e4930038 	lhui	r4, r19, 56
20016ee8:	90a40061 	sext16	r5, r4
20016eec:	e493003a 	lhui	r4, r19, 58
20016ef0:	90840061 	sext16	r4, r4
20016ef4:	10a52000 	addk	r5, r5, r4
20016ef8:	e8930034 	lwi	r4, r19, 52
20016efc:	10852000 	addk	r4, r5, r4
20016f00:	90840001 	sra	r4, r4
20016f04:	90840061 	sext16	r4, r4
20016f08:	f4830000 	shi	r4, r3, 0
				k = k + 1;
20016f0c:	e8730020 	lwi	r3, r19, 32
20016f10:	30630001 	addik	r3, r3, 1
20016f14:	f8730020 	swi	r3, r19, 32
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
		round = 1 - (flags & 1);
		j = 0;
		while (j <= 7) {
			k = 0;
			while (k <= 7) {
20016f18:	e8930020 	lwi	r4, r19, 32
20016f1c:	30600007 	addik	r3, r0, 7
20016f20:	16441801 	cmp	r18, r4, r3
20016f24:	bcb2feec 	bgei	r18, -276		// 20016e10
				tmp_RD = tokens_RD[(index_RD + (9 * j + k)) % SIZE_RD];
				tmp_RD0 = tokens_RD[(index_RD + (9 * j + k + 1)) % SIZE_RD];
				tokens_MOT[(index_MOT + (j * 8 + k)) % SIZE_MOT] = (tmp_RD + tmp_RD0 + round) >> 1;
				k = k + 1;
			}
			j = j + 1;
20016f28:	e873001c 	lwi	r3, r19, 28
20016f2c:	30630001 	addik	r3, r3, 1
20016f30:	f873001c 	swi	r3, r19, 28
		i16 tmp_RD0;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
		round = 1 - (flags & 1);
		j = 0;
		while (j <= 7) {
20016f34:	e893001c 	lwi	r4, r19, 28
20016f38:	30600007 	addik	r3, r0, 7
20016f3c:	16441801 	cmp	r18, r4, r3
20016f40:	bcb2fec8 	bgei	r18, -312		// 20016e08
			}
			j = j + 1;
		}
	
		// Update ports indexes
		index_halfpel += 1;
20016f44:	b0000000 	imm	0
20016f48:	e874023c 	lwi	r3, r20, 572
20016f4c:	e8630000 	lwi	r3, r3, 0
20016f50:	30830001 	addik	r4, r3, 1
20016f54:	b0000000 	imm	0
20016f58:	e874023c 	lwi	r3, r20, 572
20016f5c:	f8830000 	swi	r4, r3, 0
		index_RD += 81;
20016f60:	b0000000 	imm	0
20016f64:	e8740234 	lwi	r3, r20, 564
20016f68:	e8630000 	lwi	r3, r3, 0
20016f6c:	30830051 	addik	r4, r3, 81
20016f70:	b0000000 	imm	0
20016f74:	e8740234 	lwi	r3, r20, 564
20016f78:	f8830000 	swi	r4, r3, 0
		index_MOT += 64;
20016f7c:	b0000000 	imm	0
20016f80:	e8740244 	lwi	r3, r20, 580
20016f84:	e8630000 	lwi	r3, r3, 0
20016f88:	30830040 	addik	r4, r3, 64
20016f8c:	b0000000 	imm	0
20016f90:	e8740244 	lwi	r3, r20, 580
20016f94:	f8830000 	swi	r4, r3, 0
		
		read_end_halfpel();
20016f98:	b0000000 	imm	0
20016f9c:	e874025c 	lwi	r3, r20, 604
20016fa0:	99fc1800 	brald	r15, r3
20016fa4:	80000000 	or	r0, r0, r0
		read_end_RD();
20016fa8:	b0000000 	imm	0
20016fac:	e8740254 	lwi	r3, r20, 596
20016fb0:	99fc1800 	brald	r15, r3
20016fb4:	80000000 	or	r0, r0, r0
		write_end_MOT();
20016fb8:	b0000000 	imm	0
20016fbc:	e8740264 	lwi	r3, r20, 612
20016fc0:	99fc1800 	brald	r15, r3
20016fc4:	80000000 	or	r0, r0, r0
	}
20016fc8:	e9e10000 	lwi	r15, r1, 0
20016fcc:	10330000 	addk	r1, r19, r0
20016fd0:	ea61003c 	lwi	r19, r1, 60
20016fd4:	ea810040 	lwi	r20, r1, 64
20016fd8:	30210044 	addik	r1, r1, 68
20016fdc:	b60f0008 	rtsd	r15, 8
20016fe0:	80000000 	or	r0, r0, r0

20016fe4 <isSchedulable_both>:
	static i32 isSchedulable_both() {
20016fe4:	3021fff0 	addik	r1, r1, -16
20016fe8:	fa610008 	swi	r19, r1, 8
20016fec:	fa81000c 	swi	r20, r1, 12
20016ff0:	12610000 	addk	r19, r1, r0
20016ff4:	96808000 	mfs	r20, rpc
20016ff8:	b000dffe 	imm	-8194
20016ffc:	3294a968 	addik	r20, r20, -22168
		i32 result;
	
		result = 1;
20017000:	30600001 	addik	r3, r0, 1
20017004:	f8730004 	swi	r3, r19, 4
		return result;
20017008:	e8730004 	lwi	r3, r19, 4
	}
2001700c:	10330000 	addk	r1, r19, r0
20017010:	ea610008 	lwi	r19, r1, 8
20017014:	ea81000c 	lwi	r20, r1, 12
20017018:	30210010 	addik	r1, r1, 16
2001701c:	b60f0008 	rtsd	r15, 8
20017020:	80000000 	or	r0, r0, r0

20017024 <both>:
	
	static void both() {
20017024:	3021ffb8 	addik	r1, r1, -72
20017028:	f9e10000 	swi	r15, r1, 0
2001702c:	fa610040 	swi	r19, r1, 64
20017030:	fa810044 	swi	r20, r1, 68
20017034:	12610000 	addk	r19, r1, r0
20017038:	96808000 	mfs	r20, rpc
2001703c:	b000dffe 	imm	-8194
20017040:	3294a924 	addik	r20, r20, -22236
	
		// Compute aligned port indexes
		i32 index_aligned_halfpel = index_halfpel % SIZE_halfpel;
20017044:	b0000000 	imm	0
20017048:	e874023c 	lwi	r3, r20, 572
2001704c:	e8630000 	lwi	r3, r3, 0
20017050:	a46301ff 	andi	r3, r3, 511
20017054:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_RD = index_RD % SIZE_RD;
20017058:	b0000000 	imm	0
2001705c:	e8740234 	lwi	r3, r20, 564
20017060:	e8630000 	lwi	r3, r3, 0
20017064:	a46301ff 	andi	r3, r3, 511
20017068:	f8730028 	swi	r3, r19, 40
		i32 index_aligned_MOT = index_MOT % SIZE_MOT;
2001706c:	b0000000 	imm	0
20017070:	e8740244 	lwi	r3, r20, 580
20017074:	e8630000 	lwi	r3, r3, 0
20017078:	a46301ff 	andi	r3, r3, 511
2001707c:	f873002c 	swi	r3, r19, 44
		i16 tmp_RD;
		i16 tmp_RD0;
		i16 tmp_RD1;
		i16 tmp_RD2;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
20017080:	b0000000 	imm	0
20017084:	e8740230 	lwi	r3, r20, 560
20017088:	e8630000 	lwi	r3, r3, 0
2001708c:	e8830004 	lwi	r4, r3, 4
20017090:	b0000000 	imm	0
20017094:	e874023c 	lwi	r3, r20, 572
20017098:	e8630000 	lwi	r3, r3, 0
2001709c:	a46301ff 	andi	r3, r3, 511
200170a0:	10641800 	addk	r3, r4, r3
200170a4:	e0630000 	lbui	r3, r3, 0
200170a8:	f0730030 	sbi	r3, r19, 48
		round = 2 - (flags & 1);
200170ac:	e0730030 	lbui	r3, r19, 48
200170b0:	a4630001 	andi	r3, r3, 1
200170b4:	30800002 	addik	r4, r0, 2
200170b8:	14632000 	rsubk	r3, r3, r4
200170bc:	f8730034 	swi	r3, r19, 52
		j = 0;
200170c0:	f813001c 	swi	r0, r19, 28
		while (j <= 7) {
200170c4:	b80001e4 	bri	484		// 200172a8
			k = 0;
200170c8:	f8130020 	swi	r0, r19, 32
			while (k <= 7) {
200170cc:	b80001c0 	bri	448		// 2001728c
				tmp_RD = tokens_RD[(index_RD + (9 * j + k)) % SIZE_RD];
200170d0:	b0000000 	imm	0
200170d4:	e874022c 	lwi	r3, r20, 556
200170d8:	e8630000 	lwi	r3, r3, 0
200170dc:	e8830004 	lwi	r4, r3, 4
200170e0:	e873001c 	lwi	r3, r19, 28
200170e4:	60a30009 	muli	r5, r3, 9
200170e8:	e8730020 	lwi	r3, r19, 32
200170ec:	10651800 	addk	r3, r5, r3
200170f0:	10a30000 	addk	r5, r3, r0
200170f4:	b0000000 	imm	0
200170f8:	e8740234 	lwi	r3, r20, 564
200170fc:	e8630000 	lwi	r3, r3, 0
20017100:	10651800 	addk	r3, r5, r3
20017104:	a46301ff 	andi	r3, r3, 511
20017108:	10631800 	addk	r3, r3, r3
2001710c:	10641800 	addk	r3, r4, r3
20017110:	e4630000 	lhui	r3, r3, 0
20017114:	f4730038 	shi	r3, r19, 56
				tmp_RD0 = tokens_RD[(index_RD + (9 * j + k + 1)) % SIZE_RD];
20017118:	b0000000 	imm	0
2001711c:	e874022c 	lwi	r3, r20, 556
20017120:	e8630000 	lwi	r3, r3, 0
20017124:	e8830004 	lwi	r4, r3, 4
20017128:	e873001c 	lwi	r3, r19, 28
2001712c:	60a30009 	muli	r5, r3, 9
20017130:	e8730020 	lwi	r3, r19, 32
20017134:	10651800 	addk	r3, r5, r3
20017138:	10a30000 	addk	r5, r3, r0
2001713c:	b0000000 	imm	0
20017140:	e8740234 	lwi	r3, r20, 564
20017144:	e8630000 	lwi	r3, r3, 0
20017148:	10651800 	addk	r3, r5, r3
2001714c:	30630001 	addik	r3, r3, 1
20017150:	a46301ff 	andi	r3, r3, 511
20017154:	10631800 	addk	r3, r3, r3
20017158:	10641800 	addk	r3, r4, r3
2001715c:	e4630000 	lhui	r3, r3, 0
20017160:	f473003a 	shi	r3, r19, 58
				tmp_RD1 = tokens_RD[(index_RD + (9 * (j + 1) + k)) % SIZE_RD];
20017164:	b0000000 	imm	0
20017168:	e874022c 	lwi	r3, r20, 556
2001716c:	e8630000 	lwi	r3, r3, 0
20017170:	e8830004 	lwi	r4, r3, 4
20017174:	e873001c 	lwi	r3, r19, 28
20017178:	30630001 	addik	r3, r3, 1
2001717c:	60a30009 	muli	r5, r3, 9
20017180:	e8730020 	lwi	r3, r19, 32
20017184:	10651800 	addk	r3, r5, r3
20017188:	10a30000 	addk	r5, r3, r0
2001718c:	b0000000 	imm	0
20017190:	e8740234 	lwi	r3, r20, 564
20017194:	e8630000 	lwi	r3, r3, 0
20017198:	10651800 	addk	r3, r5, r3
2001719c:	a46301ff 	andi	r3, r3, 511
200171a0:	10631800 	addk	r3, r3, r3
200171a4:	10641800 	addk	r3, r4, r3
200171a8:	e4630000 	lhui	r3, r3, 0
200171ac:	f473003c 	shi	r3, r19, 60
				tmp_RD2 = tokens_RD[(index_RD + (9 * (j + 1) + k + 1)) % SIZE_RD];
200171b0:	b0000000 	imm	0
200171b4:	e874022c 	lwi	r3, r20, 556
200171b8:	e8630000 	lwi	r3, r3, 0
200171bc:	e8830004 	lwi	r4, r3, 4
200171c0:	e873001c 	lwi	r3, r19, 28
200171c4:	30630001 	addik	r3, r3, 1
200171c8:	60a30009 	muli	r5, r3, 9
200171cc:	e8730020 	lwi	r3, r19, 32
200171d0:	10651800 	addk	r3, r5, r3
200171d4:	10a30000 	addk	r5, r3, r0
200171d8:	b0000000 	imm	0
200171dc:	e8740234 	lwi	r3, r20, 564
200171e0:	e8630000 	lwi	r3, r3, 0
200171e4:	10651800 	addk	r3, r5, r3
200171e8:	30630001 	addik	r3, r3, 1
200171ec:	a46301ff 	andi	r3, r3, 511
200171f0:	10631800 	addk	r3, r3, r3
200171f4:	10641800 	addk	r3, r4, r3
200171f8:	e4630000 	lhui	r3, r3, 0
200171fc:	f473003e 	shi	r3, r19, 62
				tokens_MOT[(index_MOT + (j * 8 + k)) % SIZE_MOT] = (tmp_RD + tmp_RD0 + tmp_RD1 + tmp_RD2 + round) >> 2;
20017200:	b0000000 	imm	0
20017204:	e8740228 	lwi	r3, r20, 552
20017208:	e8630000 	lwi	r3, r3, 0
2001720c:	e8830004 	lwi	r4, r3, 4
20017210:	e873001c 	lwi	r3, r19, 28
20017214:	64a30403 	bslli	r5, r3, 3
20017218:	e8730020 	lwi	r3, r19, 32
2001721c:	10651800 	addk	r3, r5, r3
20017220:	10a30000 	addk	r5, r3, r0
20017224:	b0000000 	imm	0
20017228:	e8740244 	lwi	r3, r20, 580
2001722c:	e8630000 	lwi	r3, r3, 0
20017230:	10651800 	addk	r3, r5, r3
20017234:	a46301ff 	andi	r3, r3, 511
20017238:	10631800 	addk	r3, r3, r3
2001723c:	10641800 	addk	r3, r4, r3
20017240:	e4930038 	lhui	r4, r19, 56
20017244:	90a40061 	sext16	r5, r4
20017248:	e493003a 	lhui	r4, r19, 58
2001724c:	90840061 	sext16	r4, r4
20017250:	10a52000 	addk	r5, r5, r4
20017254:	e493003c 	lhui	r4, r19, 60
20017258:	90840061 	sext16	r4, r4
2001725c:	10a52000 	addk	r5, r5, r4
20017260:	e493003e 	lhui	r4, r19, 62
20017264:	90840061 	sext16	r4, r4
20017268:	10a52000 	addk	r5, r5, r4
2001726c:	e8930034 	lwi	r4, r19, 52
20017270:	10852000 	addk	r4, r5, r4
20017274:	64840202 	bsrai	r4, r4, 2
20017278:	90840061 	sext16	r4, r4
2001727c:	f4830000 	shi	r4, r3, 0
				k = k + 1;
20017280:	e8730020 	lwi	r3, r19, 32
20017284:	30630001 	addik	r3, r3, 1
20017288:	f8730020 	swi	r3, r19, 32
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
		round = 2 - (flags & 1);
		j = 0;
		while (j <= 7) {
			k = 0;
			while (k <= 7) {
2001728c:	e8930020 	lwi	r4, r19, 32
20017290:	30600007 	addik	r3, r0, 7
20017294:	16441801 	cmp	r18, r4, r3
20017298:	bcb2fe38 	bgei	r18, -456		// 200170d0
				tmp_RD1 = tokens_RD[(index_RD + (9 * (j + 1) + k)) % SIZE_RD];
				tmp_RD2 = tokens_RD[(index_RD + (9 * (j + 1) + k + 1)) % SIZE_RD];
				tokens_MOT[(index_MOT + (j * 8 + k)) % SIZE_MOT] = (tmp_RD + tmp_RD0 + tmp_RD1 + tmp_RD2 + round) >> 2;
				k = k + 1;
			}
			j = j + 1;
2001729c:	e873001c 	lwi	r3, r19, 28
200172a0:	30630001 	addik	r3, r3, 1
200172a4:	f873001c 	swi	r3, r19, 28
		i16 tmp_RD2;
	
		flags = tokens_halfpel[(index_halfpel + (0)) % SIZE_halfpel];
		round = 2 - (flags & 1);
		j = 0;
		while (j <= 7) {
200172a8:	e893001c 	lwi	r4, r19, 28
200172ac:	30600007 	addik	r3, r0, 7
200172b0:	16441801 	cmp	r18, r4, r3
200172b4:	bcb2fe14 	bgei	r18, -492		// 200170c8
			}
			j = j + 1;
		}
	
		// Update ports indexes
		index_halfpel += 1;
200172b8:	b0000000 	imm	0
200172bc:	e874023c 	lwi	r3, r20, 572
200172c0:	e8630000 	lwi	r3, r3, 0
200172c4:	30830001 	addik	r4, r3, 1
200172c8:	b0000000 	imm	0
200172cc:	e874023c 	lwi	r3, r20, 572
200172d0:	f8830000 	swi	r4, r3, 0
		index_RD += 81;
200172d4:	b0000000 	imm	0
200172d8:	e8740234 	lwi	r3, r20, 564
200172dc:	e8630000 	lwi	r3, r3, 0
200172e0:	30830051 	addik	r4, r3, 81
200172e4:	b0000000 	imm	0
200172e8:	e8740234 	lwi	r3, r20, 564
200172ec:	f8830000 	swi	r4, r3, 0
		index_MOT += 64;
200172f0:	b0000000 	imm	0
200172f4:	e8740244 	lwi	r3, r20, 580
200172f8:	e8630000 	lwi	r3, r3, 0
200172fc:	30830040 	addik	r4, r3, 64
20017300:	b0000000 	imm	0
20017304:	e8740244 	lwi	r3, r20, 580
20017308:	f8830000 	swi	r4, r3, 0
		
		read_end_halfpel();
2001730c:	b0000000 	imm	0
20017310:	e874025c 	lwi	r3, r20, 604
20017314:	99fc1800 	brald	r15, r3
20017318:	80000000 	or	r0, r0, r0
		read_end_RD();
2001731c:	b0000000 	imm	0
20017320:	e8940254 	lwi	r4, r20, 596
20017324:	99fc2000 	brald	r15, r4
20017328:	80000000 	or	r0, r0, r0
		write_end_MOT();
2001732c:	b0000000 	imm	0
20017330:	e8740264 	lwi	r3, r20, 612
20017334:	99fc1800 	brald	r15, r3
20017338:	80000000 	or	r0, r0, r0
	}
2001733c:	e9e10000 	lwi	r15, r1, 0
20017340:	10330000 	addk	r1, r19, r0
20017344:	ea610040 	lwi	r19, r1, 64
20017348:	ea810044 	lwi	r20, r1, 68
2001734c:	30210048 	addik	r1, r1, 72
20017350:	b60f0008 	rtsd	r15, 8
20017354:	80000000 	or	r0, r0, r0

20017358 <decoder_motion_interpolation_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_motion_interpolation_initialize() {
20017358:	3021fff0 	addik	r1, r1, -16
2001735c:	fa610008 	swi	r19, r1, 8
20017360:	fa81000c 	swi	r20, r1, 12
20017364:	12610000 	addk	r19, r1, r0
20017368:	96808000 	mfs	r20, rpc
2001736c:	b000dffe 	imm	-8194
20017370:	3294a5f4 	addik	r20, r20, -23052
		int i = 0;
20017374:	f8130004 	swi	r0, r19, 4
		
	finished:
		// no read_end/write_end here!
		return;
20017378:	80000000 	or	r0, r0, r0
	}
2001737c:	10330000 	addk	r1, r19, r0
20017380:	ea610008 	lwi	r19, r1, 8
20017384:	ea81000c 	lwi	r20, r1, 12
20017388:	30210010 	addik	r1, r1, 16
2001738c:	b60f0008 	rtsd	r15, 8
20017390:	80000000 	or	r0, r0, r0

20017394 <decoder_motion_interpolation_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	int decoder_motion_interpolation_scheduler() {
20017394:	3021ffc8 	addik	r1, r1, -56
20017398:	f9e10000 	swi	r15, r1, 0
2001739c:	fa610030 	swi	r19, r1, 48
200173a0:	fa810034 	swi	r20, r1, 52
200173a4:	12610000 	addk	r19, r1, r0
200173a8:	96808000 	mfs	r20, rpc
200173ac:	b000dffe 	imm	-8194
200173b0:	3294a5b4 	addik	r20, r20, -23116
		int i = 0;
200173b4:	f813001c 	swi	r0, r19, 28
		if(needInit){
200173b8:	b0000000 	imm	0
200173bc:	e874024c 	lwi	r3, r20, 588
200173c0:	e0630000 	lbui	r3, r3, 0
200173c4:	bc03001c 	beqi	r3, 28		// 200173e0
			decoder_motion_interpolation_initialize();
200173c8:	b000ffff 	imm	-1
200173cc:	b9f4ff8c 	brlid	r15, -116	// 20017358 <decoder_motion_interpolation_initialize>
200173d0:	80000000 	or	r0, r0, r0
			needInit = 0;
200173d4:	b0000000 	imm	0
200173d8:	e874024c 	lwi	r3, r20, 588
200173dc:	f0030000 	sbi	r0, r3, 0
		}
		read_RD();
200173e0:	b0000000 	imm	0
200173e4:	e8740250 	lwi	r3, r20, 592
200173e8:	99fc1800 	brald	r15, r3
200173ec:	80000000 	or	r0, r0, r0
		read_halfpel();
200173f0:	b0000000 	imm	0
200173f4:	e8940258 	lwi	r4, r20, 600
200173f8:	99fc2000 	brald	r15, r4
200173fc:	80000000 	or	r0, r0, r0
		write_MOT();
20017400:	b0000000 	imm	0
20017404:	e8740260 	lwi	r3, r20, 608
20017408:	99fc1800 	brald	r15, r3
2001740c:	80000000 	or	r0, r0, r0
		
	
	
		while (1) {
			// Action loop
			if (numTokens_halfpel - index_halfpel >= 1 && numTokens_RD - index_RD >= 81 && isSchedulable_none()) {
20017410:	b0000000 	imm	0
20017414:	e8740240 	lwi	r3, r20, 576
20017418:	e8830000 	lwi	r4, r3, 0
2001741c:	b0000000 	imm	0
20017420:	e874023c 	lwi	r3, r20, 572
20017424:	e8630000 	lwi	r3, r3, 0
20017428:	88641800 	xor	r3, r4, r3
2001742c:	bc0300ac 	beqi	r3, 172		// 200174d8
20017430:	b0000000 	imm	0
20017434:	e8740238 	lwi	r3, r20, 568
20017438:	e8830000 	lwi	r4, r3, 0
2001743c:	b0000000 	imm	0
20017440:	e8740234 	lwi	r3, r20, 564
20017444:	e8630000 	lwi	r3, r3, 0
20017448:	14832000 	rsubk	r4, r3, r4
2001744c:	30600050 	addik	r3, r0, 80	// 50 <_start1>
20017450:	16441803 	cmpu	r18, r4, r3
20017454:	bcb20084 	bgei	r18, 132		// 200174d8
20017458:	b0000000 	imm	0
2001745c:	e8940268 	lwi	r4, r20, 616
20017460:	99fc2000 	brald	r15, r4
20017464:	80000000 	or	r0, r0, r0
20017468:	bc030070 	beqi	r3, 112		// 200174d8
				int stop = 0;
2001746c:	f8130020 	swi	r0, r19, 32
				if (64 > SIZE_MOT - index_MOT + decoder_motion_interpolation_MOT->read_inds[0]) {
20017470:	b0000000 	imm	0
20017474:	e8740228 	lwi	r3, r20, 552
20017478:	e8630000 	lwi	r3, r3, 0
2001747c:	e863000c 	lwi	r3, r3, 12
20017480:	e8830000 	lwi	r4, r3, 0
20017484:	b0000000 	imm	0
20017488:	e8740244 	lwi	r3, r20, 580
2001748c:	e8630000 	lwi	r3, r3, 0
20017490:	14632000 	rsubk	r3, r3, r4
20017494:	30830200 	addik	r4, r3, 512
20017498:	3060003f 	addik	r3, r0, 63
2001749c:	16441803 	cmpu	r18, r4, r3
200174a0:	bc52000c 	blti	r18, 12		// 200174ac
					stop = 1;
200174a4:	30600001 	addik	r3, r0, 1
200174a8:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
200174ac:	e8730020 	lwi	r3, r19, 32
200174b0:	bc030008 	beqi	r3, 8		// 200174b8
					goto finished;
200174b4:	b8000280 	bri	640		// 20017734
				}
				none();
200174b8:	b0000000 	imm	0
200174bc:	e874026c 	lwi	r3, r20, 620
200174c0:	99fc1800 	brald	r15, r3
200174c4:	80000000 	or	r0, r0, r0
				i++;
200174c8:	e873001c 	lwi	r3, r19, 28
200174cc:	30630001 	addik	r3, r3, 1
200174d0:	f873001c 	swi	r3, r19, 28
		
	
	
		while (1) {
			// Action loop
			if (numTokens_halfpel - index_halfpel >= 1 && numTokens_RD - index_RD >= 81 && isSchedulable_none()) {
200174d4:	b800025c 	bri	604		// 20017730
				if (stop != 0) {
					goto finished;
				}
				none();
				i++;
			} else if (numTokens_halfpel - index_halfpel >= 1 && numTokens_RD - index_RD >= 81 && isSchedulable_col()) {
200174d8:	b0000000 	imm	0
200174dc:	e8740240 	lwi	r3, r20, 576
200174e0:	e8830000 	lwi	r4, r3, 0
200174e4:	b0000000 	imm	0
200174e8:	e874023c 	lwi	r3, r20, 572
200174ec:	e8630000 	lwi	r3, r3, 0
200174f0:	88641800 	xor	r3, r4, r3
200174f4:	bc0300ac 	beqi	r3, 172		// 200175a0
200174f8:	b0000000 	imm	0
200174fc:	e8740238 	lwi	r3, r20, 568
20017500:	e8830000 	lwi	r4, r3, 0
20017504:	b0000000 	imm	0
20017508:	e8740234 	lwi	r3, r20, 564
2001750c:	e8630000 	lwi	r3, r3, 0
20017510:	14832000 	rsubk	r4, r3, r4
20017514:	30600050 	addik	r3, r0, 80	// 50 <_start1>
20017518:	16441803 	cmpu	r18, r4, r3
2001751c:	bcb20084 	bgei	r18, 132		// 200175a0
20017520:	b0000000 	imm	0
20017524:	e8940278 	lwi	r4, r20, 632
20017528:	99fc2000 	brald	r15, r4
2001752c:	80000000 	or	r0, r0, r0
20017530:	bc030070 	beqi	r3, 112		// 200175a0
				int stop = 0;
20017534:	f8130024 	swi	r0, r19, 36
				if (64 > SIZE_MOT - index_MOT + decoder_motion_interpolation_MOT->read_inds[0]) {
20017538:	b0000000 	imm	0
2001753c:	e8740228 	lwi	r3, r20, 552
20017540:	e8630000 	lwi	r3, r3, 0
20017544:	e863000c 	lwi	r3, r3, 12
20017548:	e8830000 	lwi	r4, r3, 0
2001754c:	b0000000 	imm	0
20017550:	e8740244 	lwi	r3, r20, 580
20017554:	e8630000 	lwi	r3, r3, 0
20017558:	14632000 	rsubk	r3, r3, r4
2001755c:	30830200 	addik	r4, r3, 512
20017560:	3060003f 	addik	r3, r0, 63
20017564:	16441803 	cmpu	r18, r4, r3
20017568:	bc52000c 	blti	r18, 12		// 20017574
					stop = 1;
2001756c:	30600001 	addik	r3, r0, 1
20017570:	f8730024 	swi	r3, r19, 36
				}
				if (stop != 0) {
20017574:	e8730024 	lwi	r3, r19, 36
20017578:	bc030008 	beqi	r3, 8		// 20017580
					goto finished;
2001757c:	b80001b8 	bri	440		// 20017734
				}
				col();
20017580:	b0000000 	imm	0
20017584:	e874027c 	lwi	r3, r20, 636
20017588:	99fc1800 	brald	r15, r3
2001758c:	80000000 	or	r0, r0, r0
				i++;
20017590:	e873001c 	lwi	r3, r19, 28
20017594:	30630001 	addik	r3, r3, 1
20017598:	f873001c 	swi	r3, r19, 28
				if (stop != 0) {
					goto finished;
				}
				none();
				i++;
			} else if (numTokens_halfpel - index_halfpel >= 1 && numTokens_RD - index_RD >= 81 && isSchedulable_col()) {
2001759c:	b8000194 	bri	404		// 20017730
				if (stop != 0) {
					goto finished;
				}
				col();
				i++;
			} else if (numTokens_halfpel - index_halfpel >= 1 && numTokens_RD - index_RD >= 81 && isSchedulable_row()) {
200175a0:	b0000000 	imm	0
200175a4:	e8740240 	lwi	r3, r20, 576
200175a8:	e8830000 	lwi	r4, r3, 0
200175ac:	b0000000 	imm	0
200175b0:	e874023c 	lwi	r3, r20, 572
200175b4:	e8630000 	lwi	r3, r3, 0
200175b8:	88641800 	xor	r3, r4, r3
200175bc:	bc0300ac 	beqi	r3, 172		// 20017668
200175c0:	b0000000 	imm	0
200175c4:	e8740238 	lwi	r3, r20, 568
200175c8:	e8830000 	lwi	r4, r3, 0
200175cc:	b0000000 	imm	0
200175d0:	e8740234 	lwi	r3, r20, 564
200175d4:	e8630000 	lwi	r3, r3, 0
200175d8:	14832000 	rsubk	r4, r3, r4
200175dc:	30600050 	addik	r3, r0, 80	// 50 <_start1>
200175e0:	16441803 	cmpu	r18, r4, r3
200175e4:	bcb20084 	bgei	r18, 132		// 20017668
200175e8:	b0000000 	imm	0
200175ec:	e8940270 	lwi	r4, r20, 624
200175f0:	99fc2000 	brald	r15, r4
200175f4:	80000000 	or	r0, r0, r0
200175f8:	bc030070 	beqi	r3, 112		// 20017668
				int stop = 0;
200175fc:	f8130028 	swi	r0, r19, 40
				if (64 > SIZE_MOT - index_MOT + decoder_motion_interpolation_MOT->read_inds[0]) {
20017600:	b0000000 	imm	0
20017604:	e8740228 	lwi	r3, r20, 552
20017608:	e8630000 	lwi	r3, r3, 0
2001760c:	e863000c 	lwi	r3, r3, 12
20017610:	e8830000 	lwi	r4, r3, 0
20017614:	b0000000 	imm	0
20017618:	e8740244 	lwi	r3, r20, 580
2001761c:	e8630000 	lwi	r3, r3, 0
20017620:	14632000 	rsubk	r3, r3, r4
20017624:	30830200 	addik	r4, r3, 512
20017628:	3060003f 	addik	r3, r0, 63
2001762c:	16441803 	cmpu	r18, r4, r3
20017630:	bc52000c 	blti	r18, 12		// 2001763c
					stop = 1;
20017634:	30600001 	addik	r3, r0, 1
20017638:	f8730028 	swi	r3, r19, 40
				}
				if (stop != 0) {
2001763c:	e8730028 	lwi	r3, r19, 40
20017640:	bc030008 	beqi	r3, 8		// 20017648
					goto finished;
20017644:	b80000f0 	bri	240		// 20017734
				}
				row();
20017648:	b0000000 	imm	0
2001764c:	e8740274 	lwi	r3, r20, 628
20017650:	99fc1800 	brald	r15, r3
20017654:	80000000 	or	r0, r0, r0
				i++;
20017658:	e873001c 	lwi	r3, r19, 28
2001765c:	30630001 	addik	r3, r3, 1
20017660:	f873001c 	swi	r3, r19, 28
				if (stop != 0) {
					goto finished;
				}
				col();
				i++;
			} else if (numTokens_halfpel - index_halfpel >= 1 && numTokens_RD - index_RD >= 81 && isSchedulable_row()) {
20017664:	b80000cc 	bri	204		// 20017730
				if (stop != 0) {
					goto finished;
				}
				row();
				i++;
			} else if (numTokens_halfpel - index_halfpel >= 1 && numTokens_RD - index_RD >= 81 && isSchedulable_both()) {
20017668:	b0000000 	imm	0
2001766c:	e8740240 	lwi	r3, r20, 576
20017670:	e8830000 	lwi	r4, r3, 0
20017674:	b0000000 	imm	0
20017678:	e874023c 	lwi	r3, r20, 572
2001767c:	e8630000 	lwi	r3, r3, 0
20017680:	88641800 	xor	r3, r4, r3
20017684:	bc0300b0 	beqi	r3, 176		// 20017734
20017688:	b0000000 	imm	0
2001768c:	e8740238 	lwi	r3, r20, 568
20017690:	e8830000 	lwi	r4, r3, 0
20017694:	b0000000 	imm	0
20017698:	e8740234 	lwi	r3, r20, 564
2001769c:	e8630000 	lwi	r3, r3, 0
200176a0:	14832000 	rsubk	r4, r3, r4
200176a4:	30600050 	addik	r3, r0, 80	// 50 <_start1>
200176a8:	16441803 	cmpu	r18, r4, r3
200176ac:	bcb20088 	bgei	r18, 136		// 20017734
200176b0:	b0000000 	imm	0
200176b4:	e8940280 	lwi	r4, r20, 640
200176b8:	99fc2000 	brald	r15, r4
200176bc:	80000000 	or	r0, r0, r0
200176c0:	bc030074 	beqi	r3, 116		// 20017734
				int stop = 0;
200176c4:	f813002c 	swi	r0, r19, 44
				if (64 > SIZE_MOT - index_MOT + decoder_motion_interpolation_MOT->read_inds[0]) {
200176c8:	b0000000 	imm	0
200176cc:	e8740228 	lwi	r3, r20, 552
200176d0:	e8630000 	lwi	r3, r3, 0
200176d4:	e863000c 	lwi	r3, r3, 12
200176d8:	e8830000 	lwi	r4, r3, 0
200176dc:	b0000000 	imm	0
200176e0:	e8740244 	lwi	r3, r20, 580
200176e4:	e8630000 	lwi	r3, r3, 0
200176e8:	14632000 	rsubk	r3, r3, r4
200176ec:	30830200 	addik	r4, r3, 512
200176f0:	3060003f 	addik	r3, r0, 63
200176f4:	16441803 	cmpu	r18, r4, r3
200176f8:	bc52000c 	blti	r18, 12		// 20017704
					stop = 1;
200176fc:	30600001 	addik	r3, r0, 1
20017700:	f873002c 	swi	r3, r19, 44
				}
				if (stop != 0) {
20017704:	e873002c 	lwi	r3, r19, 44
20017708:	bc030008 	beqi	r3, 8		// 20017710
					goto finished;
2001770c:	b8000028 	bri	40		// 20017734
				}
				both();
20017710:	b0000000 	imm	0
20017714:	e8740284 	lwi	r3, r20, 644
20017718:	99fc1800 	brald	r15, r3
2001771c:	80000000 	or	r0, r0, r0
				i++;
20017720:	e873001c 	lwi	r3, r19, 28
20017724:	30630001 	addik	r3, r3, 1
20017728:	f873001c 	swi	r3, r19, 28
			} else {
				goto finished;
			}
		}
2001772c:	b800fce4 	bri	-796		// 20017410
20017730:	b800fce0 	bri	-800		// 20017410
		
	finished:
	
		read_end_RD();
20017734:	b0000000 	imm	0
20017738:	e8940254 	lwi	r4, r20, 596
2001773c:	99fc2000 	brald	r15, r4
20017740:	80000000 	or	r0, r0, r0
		read_end_halfpel();
20017744:	b0000000 	imm	0
20017748:	e874025c 	lwi	r3, r20, 604
2001774c:	99fc1800 	brald	r15, r3
20017750:	80000000 	or	r0, r0, r0
		write_end_MOT();
20017754:	b0000000 	imm	0
20017758:	e8940264 	lwi	r4, r20, 612
2001775c:	99fc2000 	brald	r15, r4
20017760:	80000000 	or	r0, r0, r0
		
		
		return i;
20017764:	e873001c 	lwi	r3, r19, 28
	}
20017768:	e9e10000 	lwi	r15, r1, 0
2001776c:	10330000 	addk	r1, r19, r0
20017770:	ea610030 	lwi	r19, r1, 48
20017774:	ea810034 	lwi	r20, r1, 52
20017778:	30210038 	addik	r1, r1, 56
2001777c:	b60f0008 	rtsd	r15, 8
20017780:	80000000 	or	r0, r0, r0

20017784 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20017784:	3021fff4 	addik	r1, r1, -12
20017788:	fa610004 	swi	r19, r1, 4
2001778c:	fa810008 	swi	r20, r1, 8
20017790:	12610000 	addk	r19, r1, r0
20017794:	96808000 	mfs	r20, rpc
20017798:	b000dffe 	imm	-8194
2001779c:	3294a1c8 	addik	r20, r20, -24120
200177a0:	f8b30010 	swi	r5, r19, 16
200177a4:	f8d30014 	swi	r6, r19, 20
200177a8:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200177ac:	e8730010 	lwi	r3, r19, 16
200177b0:	e8630010 	lwi	r3, r3, 16
200177b4:	e8830000 	lwi	r4, r3, 0
200177b8:	e8730010 	lwi	r3, r19, 16
200177bc:	e8a3000c 	lwi	r5, r3, 12
200177c0:	e8730014 	lwi	r3, r19, 20
200177c4:	64630402 	bslli	r3, r3, 2
200177c8:	10651800 	addk	r3, r5, r3
200177cc:	e8630000 	lwi	r3, r3, 0
200177d0:	14a32000 	rsubk	r5, r3, r4
200177d4:	30600001 	addik	r3, r0, 1
200177d8:	e8930018 	lwi	r4, r19, 24
200177dc:	16442803 	cmpu	r18, r4, r5
200177e0:	bcb20008 	bgei	r18, 8		// 200177e8
200177e4:	10600000 	addk	r3, r0, r0
200177e8:	a46300ff 	andi	r3, r3, 255
}
200177ec:	10330000 	addk	r1, r19, r0
200177f0:	ea610004 	lwi	r19, r1, 4
200177f4:	ea810008 	lwi	r20, r1, 8
200177f8:	3021000c 	addik	r1, r1, 12
200177fc:	b60f0008 	rtsd	r15, 8
20017800:	80000000 	or	r0, r0, r0

20017804 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20017804:	3021fff4 	addik	r1, r1, -12
20017808:	fa610004 	swi	r19, r1, 4
2001780c:	fa810008 	swi	r20, r1, 8
20017810:	12610000 	addk	r19, r1, r0
20017814:	96808000 	mfs	r20, rpc
20017818:	b000dffe 	imm	-8194
2001781c:	3294a148 	addik	r20, r20, -24248
20017820:	f8b30010 	swi	r5, r19, 16
20017824:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20017828:	e8730010 	lwi	r3, r19, 16
2001782c:	e8630010 	lwi	r3, r3, 16
20017830:	e8830000 	lwi	r4, r3, 0
20017834:	e8730010 	lwi	r3, r19, 16
20017838:	e8a3000c 	lwi	r5, r3, 12
2001783c:	e8730014 	lwi	r3, r19, 20
20017840:	64630402 	bslli	r3, r3, 2
20017844:	10651800 	addk	r3, r5, r3
20017848:	e8630000 	lwi	r3, r3, 0
2001784c:	14632000 	rsubk	r3, r3, r4
}
20017850:	10330000 	addk	r1, r19, r0
20017854:	ea610004 	lwi	r19, r1, 4
20017858:	ea810008 	lwi	r20, r1, 8
2001785c:	3021000c 	addik	r1, r1, 12
20017860:	b60f0008 	rtsd	r15, 8
20017864:	80000000 	or	r0, r0, r0

20017868 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20017868:	3021fff0 	addik	r1, r1, -16
2001786c:	fa610008 	swi	r19, r1, 8
20017870:	fa81000c 	swi	r20, r1, 12
20017874:	12610000 	addk	r19, r1, r0
20017878:	96808000 	mfs	r20, rpc
2001787c:	b000dffe 	imm	-8194
20017880:	3294a0e4 	addik	r20, r20, -24348
20017884:	f8b30014 	swi	r5, r19, 20
20017888:	f8d30018 	swi	r6, r19, 24
2001788c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20017890:	f8130004 	swi	r0, r19, 4
20017894:	b800005c 	bri	92		// 200178f0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20017898:	e8730014 	lwi	r3, r19, 20
2001789c:	e8830000 	lwi	r4, r3, 0
200178a0:	e8730014 	lwi	r3, r19, 20
200178a4:	e8a3000c 	lwi	r5, r3, 12
200178a8:	e8730004 	lwi	r3, r19, 4
200178ac:	64630402 	bslli	r3, r3, 2
200178b0:	10651800 	addk	r3, r5, r3
200178b4:	e8a30000 	lwi	r5, r3, 0
200178b8:	e8730014 	lwi	r3, r19, 20
200178bc:	e8630010 	lwi	r3, r3, 16
200178c0:	e8630000 	lwi	r3, r3, 0
200178c4:	14632800 	rsubk	r3, r3, r5
200178c8:	10641800 	addk	r3, r4, r3
200178cc:	30830001 	addik	r4, r3, 1
200178d0:	e873001c 	lwi	r3, r19, 28
200178d4:	16441803 	cmpu	r18, r4, r3
200178d8:	bc52000c 	blti	r18, 12		// 200178e4
            return 0;
200178dc:	10600000 	addk	r3, r0, r0
200178e0:	b8000024 	bri	36		// 20017904
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200178e4:	e8730004 	lwi	r3, r19, 4
200178e8:	30630001 	addik	r3, r3, 1
200178ec:	f8730004 	swi	r3, r19, 4
200178f0:	e8930004 	lwi	r4, r19, 4
200178f4:	e8730018 	lwi	r3, r19, 24
200178f8:	16432003 	cmpu	r18, r3, r4
200178fc:	bc52ff9c 	blti	r18, -100		// 20017898
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20017900:	30600001 	addik	r3, r0, 1
}
20017904:	10330000 	addk	r1, r19, r0
20017908:	ea610008 	lwi	r19, r1, 8
2001790c:	ea81000c 	lwi	r20, r1, 12
20017910:	30210010 	addik	r1, r1, 16
20017914:	b60f0008 	rtsd	r15, 8
20017918:	80000000 	or	r0, r0, r0

2001791c <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001791c:	3021ffe8 	addik	r1, r1, -24
20017920:	fa610010 	swi	r19, r1, 16
20017924:	fa810014 	swi	r20, r1, 20
20017928:	12610000 	addk	r19, r1, r0
2001792c:	96808000 	mfs	r20, rpc
20017930:	b000dffe 	imm	-8194
20017934:	3294a030 	addik	r20, r20, -24528
20017938:	f8b3001c 	swi	r5, r19, 28
2001793c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20017940:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20017944:	f8130004 	swi	r0, r19, 4
20017948:	b8000054 	bri	84		// 2001799c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001794c:	e873001c 	lwi	r3, r19, 28
20017950:	e8630010 	lwi	r3, r3, 16
20017954:	e8830000 	lwi	r4, r3, 0
20017958:	e873001c 	lwi	r3, r19, 28
2001795c:	e8a3000c 	lwi	r5, r3, 12
20017960:	e8730004 	lwi	r3, r19, 4
20017964:	64630402 	bslli	r3, r3, 2
20017968:	10651800 	addk	r3, r5, r3
2001796c:	e8630000 	lwi	r3, r3, 0
20017970:	14632000 	rsubk	r3, r3, r4
20017974:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20017978:	e8930008 	lwi	r4, r19, 8
2001797c:	e873000c 	lwi	r3, r19, 12
20017980:	16441803 	cmpu	r18, r4, r3
20017984:	bcb20008 	bgei	r18, 8		// 2001798c
20017988:	10640000 	addk	r3, r4, r0
2001798c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20017990:	e8730004 	lwi	r3, r19, 4
20017994:	30630001 	addik	r3, r3, 1
20017998:	f8730004 	swi	r3, r19, 4
2001799c:	e8930004 	lwi	r4, r19, 4
200179a0:	e8730020 	lwi	r3, r19, 32
200179a4:	16432003 	cmpu	r18, r3, r4
200179a8:	bc52ffa4 	blti	r18, -92		// 2001794c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200179ac:	e873001c 	lwi	r3, r19, 28
200179b0:	e8830000 	lwi	r4, r3, 0
200179b4:	e8730008 	lwi	r3, r19, 8
200179b8:	14632000 	rsubk	r3, r3, r4
}
200179bc:	10330000 	addk	r1, r19, r0
200179c0:	ea610010 	lwi	r19, r1, 16
200179c4:	ea810014 	lwi	r20, r1, 20
200179c8:	30210018 	addik	r1, r1, 24
200179cc:	b60f0008 	rtsd	r15, 8
200179d0:	80000000 	or	r0, r0, r0

200179d4 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200179d4:	3021fff0 	addik	r1, r1, -16
200179d8:	fa610008 	swi	r19, r1, 8
200179dc:	fa81000c 	swi	r20, r1, 12
200179e0:	12610000 	addk	r19, r1, r0
200179e4:	96808000 	mfs	r20, rpc
200179e8:	b000dffe 	imm	-8194
200179ec:	32949f78 	addik	r20, r20, -24712
200179f0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200179f4:	e8730014 	lwi	r3, r19, 20
200179f8:	e8630010 	lwi	r3, r3, 16
200179fc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20017a00:	f8130004 	swi	r0, r19, 4
20017a04:	b8000028 	bri	40		// 20017a2c
        fifo->read_inds[i] = 0;
20017a08:	e8730014 	lwi	r3, r19, 20
20017a0c:	e883000c 	lwi	r4, r3, 12
20017a10:	e8730004 	lwi	r3, r19, 4
20017a14:	64630402 	bslli	r3, r3, 2
20017a18:	10641800 	addk	r3, r4, r3
20017a1c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20017a20:	e8730004 	lwi	r3, r19, 4
20017a24:	30630001 	addik	r3, r3, 1
20017a28:	f8730004 	swi	r3, r19, 4
20017a2c:	e8730014 	lwi	r3, r19, 20
20017a30:	e8830008 	lwi	r4, r3, 8
20017a34:	e8730004 	lwi	r3, r19, 4
20017a38:	16441803 	cmpu	r18, r4, r3
20017a3c:	bc52ffcc 	blti	r18, -52		// 20017a08
        fifo->read_inds[i] = 0;
    }
}
20017a40:	10330000 	addk	r1, r19, r0
20017a44:	ea610008 	lwi	r19, r1, 8
20017a48:	ea81000c 	lwi	r20, r1, 12
20017a4c:	30210010 	addik	r1, r1, 16
20017a50:	b60f0008 	rtsd	r15, 8
20017a54:	80000000 	or	r0, r0, r0

20017a58 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20017a58:	3021fff0 	addik	r1, r1, -16
20017a5c:	fa610008 	swi	r19, r1, 8
20017a60:	fa81000c 	swi	r20, r1, 12
20017a64:	12610000 	addk	r19, r1, r0
20017a68:	96808000 	mfs	r20, rpc
20017a6c:	b000dffe 	imm	-8194
20017a70:	32949ef4 	addik	r20, r20, -24844
20017a74:	f8b30014 	swi	r5, r19, 20
20017a78:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20017a7c:	e8730014 	lwi	r3, r19, 20
20017a80:	e8830004 	lwi	r4, r3, 4
20017a84:	e8730014 	lwi	r3, r19, 20
20017a88:	e8a3000c 	lwi	r5, r3, 12
20017a8c:	e8730018 	lwi	r3, r19, 24
20017a90:	64630402 	bslli	r3, r3, 2
20017a94:	10651800 	addk	r3, r5, r3
20017a98:	e8a30000 	lwi	r5, r3, 0
20017a9c:	e8730014 	lwi	r3, r19, 20
20017aa0:	e8630000 	lwi	r3, r3, 0
20017aa4:	3063ffff 	addik	r3, r3, -1
20017aa8:	84651800 	and	r3, r5, r3
20017aac:	10641800 	addk	r3, r4, r3
20017ab0:	e0630000 	lbui	r3, r3, 0
20017ab4:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20017ab8:	e8730014 	lwi	r3, r19, 20
20017abc:	e883000c 	lwi	r4, r3, 12
20017ac0:	e8730018 	lwi	r3, r19, 24
20017ac4:	64630402 	bslli	r3, r3, 2
20017ac8:	10641800 	addk	r3, r4, r3
20017acc:	e8830000 	lwi	r4, r3, 0
20017ad0:	30840001 	addik	r4, r4, 1
20017ad4:	f8830000 	swi	r4, r3, 0
    return value;
20017ad8:	e0730004 	lbui	r3, r19, 4
20017adc:	90630060 	sext8	r3, r3
}
20017ae0:	10330000 	addk	r1, r19, r0
20017ae4:	ea610008 	lwi	r19, r1, 8
20017ae8:	ea81000c 	lwi	r20, r1, 12
20017aec:	30210010 	addik	r1, r1, 16
20017af0:	b60f0008 	rtsd	r15, 8
20017af4:	80000000 	or	r0, r0, r0

20017af8 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20017af8:	3021fff4 	addik	r1, r1, -12
20017afc:	fa610004 	swi	r19, r1, 4
20017b00:	fa810008 	swi	r20, r1, 8
20017b04:	12610000 	addk	r19, r1, r0
20017b08:	96808000 	mfs	r20, rpc
20017b0c:	b000dffe 	imm	-8194
20017b10:	32949e54 	addik	r20, r20, -25004
20017b14:	f8b30010 	swi	r5, r19, 16
20017b18:	10660000 	addk	r3, r6, r0
20017b1c:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20017b20:	e8730010 	lwi	r3, r19, 16
20017b24:	e8830004 	lwi	r4, r3, 4
20017b28:	e8730010 	lwi	r3, r19, 16
20017b2c:	e8630010 	lwi	r3, r3, 16
20017b30:	e8a30000 	lwi	r5, r3, 0
20017b34:	e8730010 	lwi	r3, r19, 16
20017b38:	e8630000 	lwi	r3, r3, 0
20017b3c:	3063ffff 	addik	r3, r3, -1
20017b40:	84651800 	and	r3, r5, r3
20017b44:	10641800 	addk	r3, r4, r3
20017b48:	e0930014 	lbui	r4, r19, 20
20017b4c:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20017b50:	e8730010 	lwi	r3, r19, 16
20017b54:	e8630010 	lwi	r3, r3, 16
20017b58:	e8830000 	lwi	r4, r3, 0
20017b5c:	30840001 	addik	r4, r4, 1
20017b60:	f8830000 	swi	r4, r3, 0
}
20017b64:	10330000 	addk	r1, r19, r0
20017b68:	ea610004 	lwi	r19, r1, 4
20017b6c:	ea810008 	lwi	r20, r1, 8
20017b70:	3021000c 	addik	r1, r1, 12
20017b74:	b60f0008 	rtsd	r15, 8
20017b78:	80000000 	or	r0, r0, r0

20017b7c <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20017b7c:	3021fff4 	addik	r1, r1, -12
20017b80:	fa610004 	swi	r19, r1, 4
20017b84:	fa810008 	swi	r20, r1, 8
20017b88:	12610000 	addk	r19, r1, r0
20017b8c:	96808000 	mfs	r20, rpc
20017b90:	b000dffe 	imm	-8194
20017b94:	32949dd0 	addik	r20, r20, -25136
20017b98:	f8b30010 	swi	r5, r19, 16
20017b9c:	f8d30014 	swi	r6, r19, 20
20017ba0:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20017ba4:	e8730010 	lwi	r3, r19, 16
20017ba8:	e8630010 	lwi	r3, r3, 16
20017bac:	e8830000 	lwi	r4, r3, 0
20017bb0:	e8730010 	lwi	r3, r19, 16
20017bb4:	e8a3000c 	lwi	r5, r3, 12
20017bb8:	e8730014 	lwi	r3, r19, 20
20017bbc:	64630402 	bslli	r3, r3, 2
20017bc0:	10651800 	addk	r3, r5, r3
20017bc4:	e8630000 	lwi	r3, r3, 0
20017bc8:	14a32000 	rsubk	r5, r3, r4
20017bcc:	30600001 	addik	r3, r0, 1
20017bd0:	e8930018 	lwi	r4, r19, 24
20017bd4:	16442803 	cmpu	r18, r4, r5
20017bd8:	bcb20008 	bgei	r18, 8		// 20017be0
20017bdc:	10600000 	addk	r3, r0, r0
20017be0:	a46300ff 	andi	r3, r3, 255
}
20017be4:	10330000 	addk	r1, r19, r0
20017be8:	ea610004 	lwi	r19, r1, 4
20017bec:	ea810008 	lwi	r20, r1, 8
20017bf0:	3021000c 	addik	r1, r1, 12
20017bf4:	b60f0008 	rtsd	r15, 8
20017bf8:	80000000 	or	r0, r0, r0

20017bfc <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20017bfc:	3021fff4 	addik	r1, r1, -12
20017c00:	fa610004 	swi	r19, r1, 4
20017c04:	fa810008 	swi	r20, r1, 8
20017c08:	12610000 	addk	r19, r1, r0
20017c0c:	96808000 	mfs	r20, rpc
20017c10:	b000dffe 	imm	-8194
20017c14:	32949d50 	addik	r20, r20, -25264
20017c18:	f8b30010 	swi	r5, r19, 16
20017c1c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20017c20:	e8730010 	lwi	r3, r19, 16
20017c24:	e8630010 	lwi	r3, r3, 16
20017c28:	e8830000 	lwi	r4, r3, 0
20017c2c:	e8730010 	lwi	r3, r19, 16
20017c30:	e8a3000c 	lwi	r5, r3, 12
20017c34:	e8730014 	lwi	r3, r19, 20
20017c38:	64630402 	bslli	r3, r3, 2
20017c3c:	10651800 	addk	r3, r5, r3
20017c40:	e8630000 	lwi	r3, r3, 0
20017c44:	14632000 	rsubk	r3, r3, r4
}
20017c48:	10330000 	addk	r1, r19, r0
20017c4c:	ea610004 	lwi	r19, r1, 4
20017c50:	ea810008 	lwi	r20, r1, 8
20017c54:	3021000c 	addik	r1, r1, 12
20017c58:	b60f0008 	rtsd	r15, 8
20017c5c:	80000000 	or	r0, r0, r0

20017c60 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20017c60:	3021fff0 	addik	r1, r1, -16
20017c64:	fa610008 	swi	r19, r1, 8
20017c68:	fa81000c 	swi	r20, r1, 12
20017c6c:	12610000 	addk	r19, r1, r0
20017c70:	96808000 	mfs	r20, rpc
20017c74:	b000dffe 	imm	-8194
20017c78:	32949cec 	addik	r20, r20, -25364
20017c7c:	f8b30014 	swi	r5, r19, 20
20017c80:	f8d30018 	swi	r6, r19, 24
20017c84:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20017c88:	f8130004 	swi	r0, r19, 4
20017c8c:	b800005c 	bri	92		// 20017ce8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20017c90:	e8730014 	lwi	r3, r19, 20
20017c94:	e8830000 	lwi	r4, r3, 0
20017c98:	e8730014 	lwi	r3, r19, 20
20017c9c:	e8a3000c 	lwi	r5, r3, 12
20017ca0:	e8730004 	lwi	r3, r19, 4
20017ca4:	64630402 	bslli	r3, r3, 2
20017ca8:	10651800 	addk	r3, r5, r3
20017cac:	e8a30000 	lwi	r5, r3, 0
20017cb0:	e8730014 	lwi	r3, r19, 20
20017cb4:	e8630010 	lwi	r3, r3, 16
20017cb8:	e8630000 	lwi	r3, r3, 0
20017cbc:	14632800 	rsubk	r3, r3, r5
20017cc0:	10641800 	addk	r3, r4, r3
20017cc4:	30830001 	addik	r4, r3, 1
20017cc8:	e873001c 	lwi	r3, r19, 28
20017ccc:	16441803 	cmpu	r18, r4, r3
20017cd0:	bc52000c 	blti	r18, 12		// 20017cdc
            return 0;
20017cd4:	10600000 	addk	r3, r0, r0
20017cd8:	b8000024 	bri	36		// 20017cfc
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20017cdc:	e8730004 	lwi	r3, r19, 4
20017ce0:	30630001 	addik	r3, r3, 1
20017ce4:	f8730004 	swi	r3, r19, 4
20017ce8:	e8930004 	lwi	r4, r19, 4
20017cec:	e8730018 	lwi	r3, r19, 24
20017cf0:	16432003 	cmpu	r18, r3, r4
20017cf4:	bc52ff9c 	blti	r18, -100		// 20017c90
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20017cf8:	30600001 	addik	r3, r0, 1
}
20017cfc:	10330000 	addk	r1, r19, r0
20017d00:	ea610008 	lwi	r19, r1, 8
20017d04:	ea81000c 	lwi	r20, r1, 12
20017d08:	30210010 	addik	r1, r1, 16
20017d0c:	b60f0008 	rtsd	r15, 8
20017d10:	80000000 	or	r0, r0, r0

20017d14 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20017d14:	3021ffe8 	addik	r1, r1, -24
20017d18:	fa610010 	swi	r19, r1, 16
20017d1c:	fa810014 	swi	r20, r1, 20
20017d20:	12610000 	addk	r19, r1, r0
20017d24:	96808000 	mfs	r20, rpc
20017d28:	b000dffe 	imm	-8194
20017d2c:	32949c38 	addik	r20, r20, -25544
20017d30:	f8b3001c 	swi	r5, r19, 28
20017d34:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20017d38:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20017d3c:	f8130004 	swi	r0, r19, 4
20017d40:	b8000054 	bri	84		// 20017d94
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20017d44:	e873001c 	lwi	r3, r19, 28
20017d48:	e8630010 	lwi	r3, r3, 16
20017d4c:	e8830000 	lwi	r4, r3, 0
20017d50:	e873001c 	lwi	r3, r19, 28
20017d54:	e8a3000c 	lwi	r5, r3, 12
20017d58:	e8730004 	lwi	r3, r19, 4
20017d5c:	64630402 	bslli	r3, r3, 2
20017d60:	10651800 	addk	r3, r5, r3
20017d64:	e8630000 	lwi	r3, r3, 0
20017d68:	14632000 	rsubk	r3, r3, r4
20017d6c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20017d70:	e8930008 	lwi	r4, r19, 8
20017d74:	e873000c 	lwi	r3, r19, 12
20017d78:	16441803 	cmpu	r18, r4, r3
20017d7c:	bcb20008 	bgei	r18, 8		// 20017d84
20017d80:	10640000 	addk	r3, r4, r0
20017d84:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20017d88:	e8730004 	lwi	r3, r19, 4
20017d8c:	30630001 	addik	r3, r3, 1
20017d90:	f8730004 	swi	r3, r19, 4
20017d94:	e8930004 	lwi	r4, r19, 4
20017d98:	e8730020 	lwi	r3, r19, 32
20017d9c:	16432003 	cmpu	r18, r3, r4
20017da0:	bc52ffa4 	blti	r18, -92		// 20017d44
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20017da4:	e873001c 	lwi	r3, r19, 28
20017da8:	e8830000 	lwi	r4, r3, 0
20017dac:	e8730008 	lwi	r3, r19, 8
20017db0:	14632000 	rsubk	r3, r3, r4
}
20017db4:	10330000 	addk	r1, r19, r0
20017db8:	ea610010 	lwi	r19, r1, 16
20017dbc:	ea810014 	lwi	r20, r1, 20
20017dc0:	30210018 	addik	r1, r1, 24
20017dc4:	b60f0008 	rtsd	r15, 8
20017dc8:	80000000 	or	r0, r0, r0

20017dcc <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20017dcc:	3021fff0 	addik	r1, r1, -16
20017dd0:	fa610008 	swi	r19, r1, 8
20017dd4:	fa81000c 	swi	r20, r1, 12
20017dd8:	12610000 	addk	r19, r1, r0
20017ddc:	96808000 	mfs	r20, rpc
20017de0:	b000dffe 	imm	-8194
20017de4:	32949b80 	addik	r20, r20, -25728
20017de8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20017dec:	e8730014 	lwi	r3, r19, 20
20017df0:	e8630010 	lwi	r3, r3, 16
20017df4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20017df8:	f8130004 	swi	r0, r19, 4
20017dfc:	b8000028 	bri	40		// 20017e24
        fifo->read_inds[i] = 0;
20017e00:	e8730014 	lwi	r3, r19, 20
20017e04:	e883000c 	lwi	r4, r3, 12
20017e08:	e8730004 	lwi	r3, r19, 4
20017e0c:	64630402 	bslli	r3, r3, 2
20017e10:	10641800 	addk	r3, r4, r3
20017e14:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20017e18:	e8730004 	lwi	r3, r19, 4
20017e1c:	30630001 	addik	r3, r3, 1
20017e20:	f8730004 	swi	r3, r19, 4
20017e24:	e8730014 	lwi	r3, r19, 20
20017e28:	e8830008 	lwi	r4, r3, 8
20017e2c:	e8730004 	lwi	r3, r19, 4
20017e30:	16441803 	cmpu	r18, r4, r3
20017e34:	bc52ffcc 	blti	r18, -52		// 20017e00
        fifo->read_inds[i] = 0;
    }
}
20017e38:	10330000 	addk	r1, r19, r0
20017e3c:	ea610008 	lwi	r19, r1, 8
20017e40:	ea81000c 	lwi	r20, r1, 12
20017e44:	30210010 	addik	r1, r1, 16
20017e48:	b60f0008 	rtsd	r15, 8
20017e4c:	80000000 	or	r0, r0, r0

20017e50 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20017e50:	3021fff0 	addik	r1, r1, -16
20017e54:	fa610008 	swi	r19, r1, 8
20017e58:	fa81000c 	swi	r20, r1, 12
20017e5c:	12610000 	addk	r19, r1, r0
20017e60:	96808000 	mfs	r20, rpc
20017e64:	b000dffe 	imm	-8194
20017e68:	32949afc 	addik	r20, r20, -25860
20017e6c:	f8b30014 	swi	r5, r19, 20
20017e70:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20017e74:	e8730014 	lwi	r3, r19, 20
20017e78:	e8830004 	lwi	r4, r3, 4
20017e7c:	e8730014 	lwi	r3, r19, 20
20017e80:	e8a3000c 	lwi	r5, r3, 12
20017e84:	e8730018 	lwi	r3, r19, 24
20017e88:	64630402 	bslli	r3, r3, 2
20017e8c:	10651800 	addk	r3, r5, r3
20017e90:	e8a30000 	lwi	r5, r3, 0
20017e94:	e8730014 	lwi	r3, r19, 20
20017e98:	e8630000 	lwi	r3, r3, 0
20017e9c:	3063ffff 	addik	r3, r3, -1
20017ea0:	84651800 	and	r3, r5, r3
20017ea4:	10631800 	addk	r3, r3, r3
20017ea8:	10641800 	addk	r3, r4, r3
20017eac:	e4630000 	lhui	r3, r3, 0
20017eb0:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20017eb4:	e8730014 	lwi	r3, r19, 20
20017eb8:	e883000c 	lwi	r4, r3, 12
20017ebc:	e8730018 	lwi	r3, r19, 24
20017ec0:	64630402 	bslli	r3, r3, 2
20017ec4:	10641800 	addk	r3, r4, r3
20017ec8:	e8830000 	lwi	r4, r3, 0
20017ecc:	30840001 	addik	r4, r4, 1
20017ed0:	f8830000 	swi	r4, r3, 0
    return value;
20017ed4:	e4730004 	lhui	r3, r19, 4
20017ed8:	90630061 	sext16	r3, r3
}
20017edc:	10330000 	addk	r1, r19, r0
20017ee0:	ea610008 	lwi	r19, r1, 8
20017ee4:	ea81000c 	lwi	r20, r1, 12
20017ee8:	30210010 	addik	r1, r1, 16
20017eec:	b60f0008 	rtsd	r15, 8
20017ef0:	80000000 	or	r0, r0, r0

20017ef4 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20017ef4:	3021fff4 	addik	r1, r1, -12
20017ef8:	fa610004 	swi	r19, r1, 4
20017efc:	fa810008 	swi	r20, r1, 8
20017f00:	12610000 	addk	r19, r1, r0
20017f04:	96808000 	mfs	r20, rpc
20017f08:	b000dffe 	imm	-8194
20017f0c:	32949a58 	addik	r20, r20, -26024
20017f10:	f8b30010 	swi	r5, r19, 16
20017f14:	10660000 	addk	r3, r6, r0
20017f18:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20017f1c:	e8730010 	lwi	r3, r19, 16
20017f20:	e8830004 	lwi	r4, r3, 4
20017f24:	e8730010 	lwi	r3, r19, 16
20017f28:	e8630010 	lwi	r3, r3, 16
20017f2c:	e8a30000 	lwi	r5, r3, 0
20017f30:	e8730010 	lwi	r3, r19, 16
20017f34:	e8630000 	lwi	r3, r3, 0
20017f38:	3063ffff 	addik	r3, r3, -1
20017f3c:	84651800 	and	r3, r5, r3
20017f40:	10631800 	addk	r3, r3, r3
20017f44:	10641800 	addk	r3, r4, r3
20017f48:	e4930014 	lhui	r4, r19, 20
20017f4c:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20017f50:	e8730010 	lwi	r3, r19, 16
20017f54:	e8630010 	lwi	r3, r3, 16
20017f58:	e8830000 	lwi	r4, r3, 0
20017f5c:	30840001 	addik	r4, r4, 1
20017f60:	f8830000 	swi	r4, r3, 0
}
20017f64:	10330000 	addk	r1, r19, r0
20017f68:	ea610004 	lwi	r19, r1, 4
20017f6c:	ea810008 	lwi	r20, r1, 8
20017f70:	3021000c 	addik	r1, r1, 12
20017f74:	b60f0008 	rtsd	r15, 8
20017f78:	80000000 	or	r0, r0, r0

20017f7c <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20017f7c:	3021fff4 	addik	r1, r1, -12
20017f80:	fa610004 	swi	r19, r1, 4
20017f84:	fa810008 	swi	r20, r1, 8
20017f88:	12610000 	addk	r19, r1, r0
20017f8c:	96808000 	mfs	r20, rpc
20017f90:	b000dffe 	imm	-8194
20017f94:	329499d0 	addik	r20, r20, -26160
20017f98:	f8b30010 	swi	r5, r19, 16
20017f9c:	f8d30014 	swi	r6, r19, 20
20017fa0:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20017fa4:	e8730010 	lwi	r3, r19, 16
20017fa8:	e8630010 	lwi	r3, r3, 16
20017fac:	e8830000 	lwi	r4, r3, 0
20017fb0:	e8730010 	lwi	r3, r19, 16
20017fb4:	e8a3000c 	lwi	r5, r3, 12
20017fb8:	e8730014 	lwi	r3, r19, 20
20017fbc:	64630402 	bslli	r3, r3, 2
20017fc0:	10651800 	addk	r3, r5, r3
20017fc4:	e8630000 	lwi	r3, r3, 0
20017fc8:	14a32000 	rsubk	r5, r3, r4
20017fcc:	30600001 	addik	r3, r0, 1
20017fd0:	e8930018 	lwi	r4, r19, 24
20017fd4:	16442803 	cmpu	r18, r4, r5
20017fd8:	bcb20008 	bgei	r18, 8		// 20017fe0
20017fdc:	10600000 	addk	r3, r0, r0
20017fe0:	a46300ff 	andi	r3, r3, 255
}
20017fe4:	10330000 	addk	r1, r19, r0
20017fe8:	ea610004 	lwi	r19, r1, 4
20017fec:	ea810008 	lwi	r20, r1, 8
20017ff0:	3021000c 	addik	r1, r1, 12
20017ff4:	b60f0008 	rtsd	r15, 8
20017ff8:	80000000 	or	r0, r0, r0

20017ffc <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20017ffc:	3021fff4 	addik	r1, r1, -12
20018000:	fa610004 	swi	r19, r1, 4
20018004:	fa810008 	swi	r20, r1, 8
20018008:	12610000 	addk	r19, r1, r0
2001800c:	96808000 	mfs	r20, rpc
20018010:	b000dffe 	imm	-8194
20018014:	32949950 	addik	r20, r20, -26288
20018018:	f8b30010 	swi	r5, r19, 16
2001801c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20018020:	e8730010 	lwi	r3, r19, 16
20018024:	e8630010 	lwi	r3, r3, 16
20018028:	e8830000 	lwi	r4, r3, 0
2001802c:	e8730010 	lwi	r3, r19, 16
20018030:	e8a3000c 	lwi	r5, r3, 12
20018034:	e8730014 	lwi	r3, r19, 20
20018038:	64630402 	bslli	r3, r3, 2
2001803c:	10651800 	addk	r3, r5, r3
20018040:	e8630000 	lwi	r3, r3, 0
20018044:	14632000 	rsubk	r3, r3, r4
}
20018048:	10330000 	addk	r1, r19, r0
2001804c:	ea610004 	lwi	r19, r1, 4
20018050:	ea810008 	lwi	r20, r1, 8
20018054:	3021000c 	addik	r1, r1, 12
20018058:	b60f0008 	rtsd	r15, 8
2001805c:	80000000 	or	r0, r0, r0

20018060 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20018060:	3021fff0 	addik	r1, r1, -16
20018064:	fa610008 	swi	r19, r1, 8
20018068:	fa81000c 	swi	r20, r1, 12
2001806c:	12610000 	addk	r19, r1, r0
20018070:	96808000 	mfs	r20, rpc
20018074:	b000dffe 	imm	-8194
20018078:	329498ec 	addik	r20, r20, -26388
2001807c:	f8b30014 	swi	r5, r19, 20
20018080:	f8d30018 	swi	r6, r19, 24
20018084:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20018088:	f8130004 	swi	r0, r19, 4
2001808c:	b800005c 	bri	92		// 200180e8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20018090:	e8730014 	lwi	r3, r19, 20
20018094:	e8830000 	lwi	r4, r3, 0
20018098:	e8730014 	lwi	r3, r19, 20
2001809c:	e8a3000c 	lwi	r5, r3, 12
200180a0:	e8730004 	lwi	r3, r19, 4
200180a4:	64630402 	bslli	r3, r3, 2
200180a8:	10651800 	addk	r3, r5, r3
200180ac:	e8a30000 	lwi	r5, r3, 0
200180b0:	e8730014 	lwi	r3, r19, 20
200180b4:	e8630010 	lwi	r3, r3, 16
200180b8:	e8630000 	lwi	r3, r3, 0
200180bc:	14632800 	rsubk	r3, r3, r5
200180c0:	10641800 	addk	r3, r4, r3
200180c4:	30830001 	addik	r4, r3, 1
200180c8:	e873001c 	lwi	r3, r19, 28
200180cc:	16441803 	cmpu	r18, r4, r3
200180d0:	bc52000c 	blti	r18, 12		// 200180dc
            return 0;
200180d4:	10600000 	addk	r3, r0, r0
200180d8:	b8000024 	bri	36		// 200180fc
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200180dc:	e8730004 	lwi	r3, r19, 4
200180e0:	30630001 	addik	r3, r3, 1
200180e4:	f8730004 	swi	r3, r19, 4
200180e8:	e8930004 	lwi	r4, r19, 4
200180ec:	e8730018 	lwi	r3, r19, 24
200180f0:	16432003 	cmpu	r18, r3, r4
200180f4:	bc52ff9c 	blti	r18, -100		// 20018090
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200180f8:	30600001 	addik	r3, r0, 1
}
200180fc:	10330000 	addk	r1, r19, r0
20018100:	ea610008 	lwi	r19, r1, 8
20018104:	ea81000c 	lwi	r20, r1, 12
20018108:	30210010 	addik	r1, r1, 16
2001810c:	b60f0008 	rtsd	r15, 8
20018110:	80000000 	or	r0, r0, r0

20018114 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20018114:	3021ffe8 	addik	r1, r1, -24
20018118:	fa610010 	swi	r19, r1, 16
2001811c:	fa810014 	swi	r20, r1, 20
20018120:	12610000 	addk	r19, r1, r0
20018124:	96808000 	mfs	r20, rpc
20018128:	b000dffe 	imm	-8194
2001812c:	32949838 	addik	r20, r20, -26568
20018130:	f8b3001c 	swi	r5, r19, 28
20018134:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20018138:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001813c:	f8130004 	swi	r0, r19, 4
20018140:	b8000054 	bri	84		// 20018194
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20018144:	e873001c 	lwi	r3, r19, 28
20018148:	e8630010 	lwi	r3, r3, 16
2001814c:	e8830000 	lwi	r4, r3, 0
20018150:	e873001c 	lwi	r3, r19, 28
20018154:	e8a3000c 	lwi	r5, r3, 12
20018158:	e8730004 	lwi	r3, r19, 4
2001815c:	64630402 	bslli	r3, r3, 2
20018160:	10651800 	addk	r3, r5, r3
20018164:	e8630000 	lwi	r3, r3, 0
20018168:	14632000 	rsubk	r3, r3, r4
2001816c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20018170:	e8930008 	lwi	r4, r19, 8
20018174:	e873000c 	lwi	r3, r19, 12
20018178:	16441803 	cmpu	r18, r4, r3
2001817c:	bcb20008 	bgei	r18, 8		// 20018184
20018180:	10640000 	addk	r3, r4, r0
20018184:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20018188:	e8730004 	lwi	r3, r19, 4
2001818c:	30630001 	addik	r3, r3, 1
20018190:	f8730004 	swi	r3, r19, 4
20018194:	e8930004 	lwi	r4, r19, 4
20018198:	e8730020 	lwi	r3, r19, 32
2001819c:	16432003 	cmpu	r18, r3, r4
200181a0:	bc52ffa4 	blti	r18, -92		// 20018144
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200181a4:	e873001c 	lwi	r3, r19, 28
200181a8:	e8830000 	lwi	r4, r3, 0
200181ac:	e8730008 	lwi	r3, r19, 8
200181b0:	14632000 	rsubk	r3, r3, r4
}
200181b4:	10330000 	addk	r1, r19, r0
200181b8:	ea610010 	lwi	r19, r1, 16
200181bc:	ea810014 	lwi	r20, r1, 20
200181c0:	30210018 	addik	r1, r1, 24
200181c4:	b60f0008 	rtsd	r15, 8
200181c8:	80000000 	or	r0, r0, r0

200181cc <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200181cc:	3021fff0 	addik	r1, r1, -16
200181d0:	fa610008 	swi	r19, r1, 8
200181d4:	fa81000c 	swi	r20, r1, 12
200181d8:	12610000 	addk	r19, r1, r0
200181dc:	96808000 	mfs	r20, rpc
200181e0:	b000dffe 	imm	-8194
200181e4:	32949780 	addik	r20, r20, -26752
200181e8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200181ec:	e8730014 	lwi	r3, r19, 20
200181f0:	e8630010 	lwi	r3, r3, 16
200181f4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200181f8:	f8130004 	swi	r0, r19, 4
200181fc:	b8000028 	bri	40		// 20018224
        fifo->read_inds[i] = 0;
20018200:	e8730014 	lwi	r3, r19, 20
20018204:	e883000c 	lwi	r4, r3, 12
20018208:	e8730004 	lwi	r3, r19, 4
2001820c:	64630402 	bslli	r3, r3, 2
20018210:	10641800 	addk	r3, r4, r3
20018214:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20018218:	e8730004 	lwi	r3, r19, 4
2001821c:	30630001 	addik	r3, r3, 1
20018220:	f8730004 	swi	r3, r19, 4
20018224:	e8730014 	lwi	r3, r19, 20
20018228:	e8830008 	lwi	r4, r3, 8
2001822c:	e8730004 	lwi	r3, r19, 4
20018230:	16441803 	cmpu	r18, r4, r3
20018234:	bc52ffcc 	blti	r18, -52		// 20018200
        fifo->read_inds[i] = 0;
    }
}
20018238:	10330000 	addk	r1, r19, r0
2001823c:	ea610008 	lwi	r19, r1, 8
20018240:	ea81000c 	lwi	r20, r1, 12
20018244:	30210010 	addik	r1, r1, 16
20018248:	b60f0008 	rtsd	r15, 8
2001824c:	80000000 	or	r0, r0, r0

20018250 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20018250:	3021fff0 	addik	r1, r1, -16
20018254:	fa610008 	swi	r19, r1, 8
20018258:	fa81000c 	swi	r20, r1, 12
2001825c:	12610000 	addk	r19, r1, r0
20018260:	96808000 	mfs	r20, rpc
20018264:	b000dffe 	imm	-8194
20018268:	329496fc 	addik	r20, r20, -26884
2001826c:	f8b30014 	swi	r5, r19, 20
20018270:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20018274:	e8730014 	lwi	r3, r19, 20
20018278:	e8830004 	lwi	r4, r3, 4
2001827c:	e8730014 	lwi	r3, r19, 20
20018280:	e8a3000c 	lwi	r5, r3, 12
20018284:	e8730018 	lwi	r3, r19, 24
20018288:	64630402 	bslli	r3, r3, 2
2001828c:	10651800 	addk	r3, r5, r3
20018290:	e8a30000 	lwi	r5, r3, 0
20018294:	e8730014 	lwi	r3, r19, 20
20018298:	e8630000 	lwi	r3, r3, 0
2001829c:	3063ffff 	addik	r3, r3, -1
200182a0:	84651800 	and	r3, r5, r3
200182a4:	64630402 	bslli	r3, r3, 2
200182a8:	10641800 	addk	r3, r4, r3
200182ac:	e8630000 	lwi	r3, r3, 0
200182b0:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200182b4:	e8730014 	lwi	r3, r19, 20
200182b8:	e883000c 	lwi	r4, r3, 12
200182bc:	e8730018 	lwi	r3, r19, 24
200182c0:	64630402 	bslli	r3, r3, 2
200182c4:	10641800 	addk	r3, r4, r3
200182c8:	e8830000 	lwi	r4, r3, 0
200182cc:	30840001 	addik	r4, r4, 1
200182d0:	f8830000 	swi	r4, r3, 0
    return value;
200182d4:	e8730004 	lwi	r3, r19, 4
}
200182d8:	10330000 	addk	r1, r19, r0
200182dc:	ea610008 	lwi	r19, r1, 8
200182e0:	ea81000c 	lwi	r20, r1, 12
200182e4:	30210010 	addik	r1, r1, 16
200182e8:	b60f0008 	rtsd	r15, 8
200182ec:	80000000 	or	r0, r0, r0

200182f0 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200182f0:	3021fff4 	addik	r1, r1, -12
200182f4:	fa610004 	swi	r19, r1, 4
200182f8:	fa810008 	swi	r20, r1, 8
200182fc:	12610000 	addk	r19, r1, r0
20018300:	96808000 	mfs	r20, rpc
20018304:	b000dffe 	imm	-8194
20018308:	3294965c 	addik	r20, r20, -27044
2001830c:	f8b30010 	swi	r5, r19, 16
20018310:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20018314:	e8730010 	lwi	r3, r19, 16
20018318:	e8830004 	lwi	r4, r3, 4
2001831c:	e8730010 	lwi	r3, r19, 16
20018320:	e8630010 	lwi	r3, r3, 16
20018324:	e8a30000 	lwi	r5, r3, 0
20018328:	e8730010 	lwi	r3, r19, 16
2001832c:	e8630000 	lwi	r3, r3, 0
20018330:	3063ffff 	addik	r3, r3, -1
20018334:	84651800 	and	r3, r5, r3
20018338:	64630402 	bslli	r3, r3, 2
2001833c:	10641800 	addk	r3, r4, r3
20018340:	e8930014 	lwi	r4, r19, 20
20018344:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20018348:	e8730010 	lwi	r3, r19, 16
2001834c:	e8630010 	lwi	r3, r3, 16
20018350:	e8830000 	lwi	r4, r3, 0
20018354:	30840001 	addik	r4, r4, 1
20018358:	f8830000 	swi	r4, r3, 0
}
2001835c:	10330000 	addk	r1, r19, r0
20018360:	ea610004 	lwi	r19, r1, 4
20018364:	ea810008 	lwi	r20, r1, 8
20018368:	3021000c 	addik	r1, r1, 12
2001836c:	b60f0008 	rtsd	r15, 8
20018370:	80000000 	or	r0, r0, r0

20018374 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20018374:	3021fff4 	addik	r1, r1, -12
20018378:	fa610004 	swi	r19, r1, 4
2001837c:	fa810008 	swi	r20, r1, 8
20018380:	12610000 	addk	r19, r1, r0
20018384:	96808000 	mfs	r20, rpc
20018388:	b000dffe 	imm	-8194
2001838c:	329495d8 	addik	r20, r20, -27176
20018390:	f8b30010 	swi	r5, r19, 16
20018394:	f8d30014 	swi	r6, r19, 20
20018398:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001839c:	e8730010 	lwi	r3, r19, 16
200183a0:	e8630010 	lwi	r3, r3, 16
200183a4:	e8830000 	lwi	r4, r3, 0
200183a8:	e8730010 	lwi	r3, r19, 16
200183ac:	e8a3000c 	lwi	r5, r3, 12
200183b0:	e8730014 	lwi	r3, r19, 20
200183b4:	64630402 	bslli	r3, r3, 2
200183b8:	10651800 	addk	r3, r5, r3
200183bc:	e8630000 	lwi	r3, r3, 0
200183c0:	14a32000 	rsubk	r5, r3, r4
200183c4:	30600001 	addik	r3, r0, 1
200183c8:	e8930018 	lwi	r4, r19, 24
200183cc:	16442803 	cmpu	r18, r4, r5
200183d0:	bcb20008 	bgei	r18, 8		// 200183d8
200183d4:	10600000 	addk	r3, r0, r0
200183d8:	a46300ff 	andi	r3, r3, 255
}
200183dc:	10330000 	addk	r1, r19, r0
200183e0:	ea610004 	lwi	r19, r1, 4
200183e4:	ea810008 	lwi	r20, r1, 8
200183e8:	3021000c 	addik	r1, r1, 12
200183ec:	b60f0008 	rtsd	r15, 8
200183f0:	80000000 	or	r0, r0, r0

200183f4 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200183f4:	3021fff4 	addik	r1, r1, -12
200183f8:	fa610004 	swi	r19, r1, 4
200183fc:	fa810008 	swi	r20, r1, 8
20018400:	12610000 	addk	r19, r1, r0
20018404:	96808000 	mfs	r20, rpc
20018408:	b000dffe 	imm	-8194
2001840c:	32949558 	addik	r20, r20, -27304
20018410:	f8b30010 	swi	r5, r19, 16
20018414:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20018418:	e8730010 	lwi	r3, r19, 16
2001841c:	e8630010 	lwi	r3, r3, 16
20018420:	e8830000 	lwi	r4, r3, 0
20018424:	e8730010 	lwi	r3, r19, 16
20018428:	e8a3000c 	lwi	r5, r3, 12
2001842c:	e8730014 	lwi	r3, r19, 20
20018430:	64630402 	bslli	r3, r3, 2
20018434:	10651800 	addk	r3, r5, r3
20018438:	e8630000 	lwi	r3, r3, 0
2001843c:	14632000 	rsubk	r3, r3, r4
}
20018440:	10330000 	addk	r1, r19, r0
20018444:	ea610004 	lwi	r19, r1, 4
20018448:	ea810008 	lwi	r20, r1, 8
2001844c:	3021000c 	addik	r1, r1, 12
20018450:	b60f0008 	rtsd	r15, 8
20018454:	80000000 	or	r0, r0, r0

20018458 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20018458:	3021fff0 	addik	r1, r1, -16
2001845c:	fa610008 	swi	r19, r1, 8
20018460:	fa81000c 	swi	r20, r1, 12
20018464:	12610000 	addk	r19, r1, r0
20018468:	96808000 	mfs	r20, rpc
2001846c:	b000dffe 	imm	-8194
20018470:	329494f4 	addik	r20, r20, -27404
20018474:	f8b30014 	swi	r5, r19, 20
20018478:	f8d30018 	swi	r6, r19, 24
2001847c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20018480:	f8130004 	swi	r0, r19, 4
20018484:	b800005c 	bri	92		// 200184e0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20018488:	e8730014 	lwi	r3, r19, 20
2001848c:	e8830000 	lwi	r4, r3, 0
20018490:	e8730014 	lwi	r3, r19, 20
20018494:	e8a3000c 	lwi	r5, r3, 12
20018498:	e8730004 	lwi	r3, r19, 4
2001849c:	64630402 	bslli	r3, r3, 2
200184a0:	10651800 	addk	r3, r5, r3
200184a4:	e8a30000 	lwi	r5, r3, 0
200184a8:	e8730014 	lwi	r3, r19, 20
200184ac:	e8630010 	lwi	r3, r3, 16
200184b0:	e8630000 	lwi	r3, r3, 0
200184b4:	14632800 	rsubk	r3, r3, r5
200184b8:	10641800 	addk	r3, r4, r3
200184bc:	30830001 	addik	r4, r3, 1
200184c0:	e873001c 	lwi	r3, r19, 28
200184c4:	16441803 	cmpu	r18, r4, r3
200184c8:	bc52000c 	blti	r18, 12		// 200184d4
            return 0;
200184cc:	10600000 	addk	r3, r0, r0
200184d0:	b8000024 	bri	36		// 200184f4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200184d4:	e8730004 	lwi	r3, r19, 4
200184d8:	30630001 	addik	r3, r3, 1
200184dc:	f8730004 	swi	r3, r19, 4
200184e0:	e8930004 	lwi	r4, r19, 4
200184e4:	e8730018 	lwi	r3, r19, 24
200184e8:	16432003 	cmpu	r18, r3, r4
200184ec:	bc52ff9c 	blti	r18, -100		// 20018488
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200184f0:	30600001 	addik	r3, r0, 1
}
200184f4:	10330000 	addk	r1, r19, r0
200184f8:	ea610008 	lwi	r19, r1, 8
200184fc:	ea81000c 	lwi	r20, r1, 12
20018500:	30210010 	addik	r1, r1, 16
20018504:	b60f0008 	rtsd	r15, 8
20018508:	80000000 	or	r0, r0, r0

2001850c <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001850c:	3021ffe8 	addik	r1, r1, -24
20018510:	fa610010 	swi	r19, r1, 16
20018514:	fa810014 	swi	r20, r1, 20
20018518:	12610000 	addk	r19, r1, r0
2001851c:	96808000 	mfs	r20, rpc
20018520:	b000dffe 	imm	-8194
20018524:	32949440 	addik	r20, r20, -27584
20018528:	f8b3001c 	swi	r5, r19, 28
2001852c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20018530:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20018534:	f8130004 	swi	r0, r19, 4
20018538:	b8000054 	bri	84		// 2001858c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001853c:	e873001c 	lwi	r3, r19, 28
20018540:	e8630010 	lwi	r3, r3, 16
20018544:	e8830000 	lwi	r4, r3, 0
20018548:	e873001c 	lwi	r3, r19, 28
2001854c:	e8a3000c 	lwi	r5, r3, 12
20018550:	e8730004 	lwi	r3, r19, 4
20018554:	64630402 	bslli	r3, r3, 2
20018558:	10651800 	addk	r3, r5, r3
2001855c:	e8630000 	lwi	r3, r3, 0
20018560:	14632000 	rsubk	r3, r3, r4
20018564:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20018568:	e8930008 	lwi	r4, r19, 8
2001856c:	e873000c 	lwi	r3, r19, 12
20018570:	16441803 	cmpu	r18, r4, r3
20018574:	bcb20008 	bgei	r18, 8		// 2001857c
20018578:	10640000 	addk	r3, r4, r0
2001857c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20018580:	e8730004 	lwi	r3, r19, 4
20018584:	30630001 	addik	r3, r3, 1
20018588:	f8730004 	swi	r3, r19, 4
2001858c:	e8930004 	lwi	r4, r19, 4
20018590:	e8730020 	lwi	r3, r19, 32
20018594:	16432003 	cmpu	r18, r3, r4
20018598:	bc52ffa4 	blti	r18, -92		// 2001853c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001859c:	e873001c 	lwi	r3, r19, 28
200185a0:	e8830000 	lwi	r4, r3, 0
200185a4:	e8730008 	lwi	r3, r19, 8
200185a8:	14632000 	rsubk	r3, r3, r4
}
200185ac:	10330000 	addk	r1, r19, r0
200185b0:	ea610010 	lwi	r19, r1, 16
200185b4:	ea810014 	lwi	r20, r1, 20
200185b8:	30210018 	addik	r1, r1, 24
200185bc:	b60f0008 	rtsd	r15, 8
200185c0:	80000000 	or	r0, r0, r0

200185c4 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200185c4:	3021fff0 	addik	r1, r1, -16
200185c8:	fa610008 	swi	r19, r1, 8
200185cc:	fa81000c 	swi	r20, r1, 12
200185d0:	12610000 	addk	r19, r1, r0
200185d4:	96808000 	mfs	r20, rpc
200185d8:	b000dffe 	imm	-8194
200185dc:	32949388 	addik	r20, r20, -27768
200185e0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200185e4:	e8730014 	lwi	r3, r19, 20
200185e8:	e8630010 	lwi	r3, r3, 16
200185ec:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200185f0:	f8130004 	swi	r0, r19, 4
200185f4:	b8000028 	bri	40		// 2001861c
        fifo->read_inds[i] = 0;
200185f8:	e8730014 	lwi	r3, r19, 20
200185fc:	e883000c 	lwi	r4, r3, 12
20018600:	e8730004 	lwi	r3, r19, 4
20018604:	64630402 	bslli	r3, r3, 2
20018608:	10641800 	addk	r3, r4, r3
2001860c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20018610:	e8730004 	lwi	r3, r19, 4
20018614:	30630001 	addik	r3, r3, 1
20018618:	f8730004 	swi	r3, r19, 4
2001861c:	e8730014 	lwi	r3, r19, 20
20018620:	e8830008 	lwi	r4, r3, 8
20018624:	e8730004 	lwi	r3, r19, 4
20018628:	16441803 	cmpu	r18, r4, r3
2001862c:	bc52ffcc 	blti	r18, -52		// 200185f8
        fifo->read_inds[i] = 0;
    }
}
20018630:	10330000 	addk	r1, r19, r0
20018634:	ea610008 	lwi	r19, r1, 8
20018638:	ea81000c 	lwi	r20, r1, 12
2001863c:	30210010 	addik	r1, r1, 16
20018640:	b60f0008 	rtsd	r15, 8
20018644:	80000000 	or	r0, r0, r0

20018648 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20018648:	3021ffec 	addik	r1, r1, -20
2001864c:	fa61000c 	swi	r19, r1, 12
20018650:	fa810010 	swi	r20, r1, 16
20018654:	12610000 	addk	r19, r1, r0
20018658:	96808000 	mfs	r20, rpc
2001865c:	b000dffe 	imm	-8194
20018660:	32949304 	addik	r20, r20, -27900
20018664:	f8b30018 	swi	r5, r19, 24
20018668:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001866c:	e8730018 	lwi	r3, r19, 24
20018670:	e8830004 	lwi	r4, r3, 4
20018674:	e8730018 	lwi	r3, r19, 24
20018678:	e8a3000c 	lwi	r5, r3, 12
2001867c:	e873001c 	lwi	r3, r19, 28
20018680:	64630402 	bslli	r3, r3, 2
20018684:	10651800 	addk	r3, r5, r3
20018688:	e8a30000 	lwi	r5, r3, 0
2001868c:	e8730018 	lwi	r3, r19, 24
20018690:	e8630000 	lwi	r3, r3, 0
20018694:	3063ffff 	addik	r3, r3, -1
20018698:	84651800 	and	r3, r5, r3
2001869c:	64630403 	bslli	r3, r3, 3
200186a0:	10641800 	addk	r3, r4, r3
200186a4:	e8830000 	lwi	r4, r3, 0
200186a8:	e8a30004 	lwi	r5, r3, 4
200186ac:	f8930004 	swi	r4, r19, 4
200186b0:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
200186b4:	e8730018 	lwi	r3, r19, 24
200186b8:	e883000c 	lwi	r4, r3, 12
200186bc:	e873001c 	lwi	r3, r19, 28
200186c0:	64630402 	bslli	r3, r3, 2
200186c4:	10641800 	addk	r3, r4, r3
200186c8:	e8830000 	lwi	r4, r3, 0
200186cc:	30840001 	addik	r4, r4, 1
200186d0:	f8830000 	swi	r4, r3, 0
    return value;
200186d4:	e8930004 	lwi	r4, r19, 4
200186d8:	e8b30008 	lwi	r5, r19, 8
}
200186dc:	10640000 	addk	r3, r4, r0
200186e0:	10850000 	addk	r4, r5, r0
200186e4:	10330000 	addk	r1, r19, r0
200186e8:	ea61000c 	lwi	r19, r1, 12
200186ec:	ea810010 	lwi	r20, r1, 16
200186f0:	30210014 	addik	r1, r1, 20
200186f4:	b60f0008 	rtsd	r15, 8
200186f8:	80000000 	or	r0, r0, r0

200186fc <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200186fc:	3021fff4 	addik	r1, r1, -12
20018700:	fa610004 	swi	r19, r1, 4
20018704:	fa810008 	swi	r20, r1, 8
20018708:	12610000 	addk	r19, r1, r0
2001870c:	96808000 	mfs	r20, rpc
20018710:	b000dffe 	imm	-8194
20018714:	32949250 	addik	r20, r20, -28080
20018718:	f8b30010 	swi	r5, r19, 16
2001871c:	f8d30014 	swi	r6, r19, 20
20018720:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20018724:	e8730010 	lwi	r3, r19, 16
20018728:	e8830004 	lwi	r4, r3, 4
2001872c:	e8730010 	lwi	r3, r19, 16
20018730:	e8630010 	lwi	r3, r3, 16
20018734:	e8a30000 	lwi	r5, r3, 0
20018738:	e8730010 	lwi	r3, r19, 16
2001873c:	e8630000 	lwi	r3, r3, 0
20018740:	3063ffff 	addik	r3, r3, -1
20018744:	84651800 	and	r3, r5, r3
20018748:	64630403 	bslli	r3, r3, 3
2001874c:	10641800 	addk	r3, r4, r3
20018750:	e8930014 	lwi	r4, r19, 20
20018754:	e8b30018 	lwi	r5, r19, 24
20018758:	f8830000 	swi	r4, r3, 0
2001875c:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20018760:	e8730010 	lwi	r3, r19, 16
20018764:	e8630010 	lwi	r3, r3, 16
20018768:	e8830000 	lwi	r4, r3, 0
2001876c:	30840001 	addik	r4, r4, 1
20018770:	f8830000 	swi	r4, r3, 0
}
20018774:	10330000 	addk	r1, r19, r0
20018778:	ea610004 	lwi	r19, r1, 4
2001877c:	ea810008 	lwi	r20, r1, 8
20018780:	3021000c 	addik	r1, r1, 12
20018784:	b60f0008 	rtsd	r15, 8
20018788:	80000000 	or	r0, r0, r0

2001878c <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001878c:	3021fff4 	addik	r1, r1, -12
20018790:	fa610004 	swi	r19, r1, 4
20018794:	fa810008 	swi	r20, r1, 8
20018798:	12610000 	addk	r19, r1, r0
2001879c:	96808000 	mfs	r20, rpc
200187a0:	b000dffe 	imm	-8194
200187a4:	329491c0 	addik	r20, r20, -28224
200187a8:	f8b30010 	swi	r5, r19, 16
200187ac:	f8d30014 	swi	r6, r19, 20
200187b0:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200187b4:	e8730010 	lwi	r3, r19, 16
200187b8:	e8630010 	lwi	r3, r3, 16
200187bc:	e8830000 	lwi	r4, r3, 0
200187c0:	e8730010 	lwi	r3, r19, 16
200187c4:	e8a3000c 	lwi	r5, r3, 12
200187c8:	e8730014 	lwi	r3, r19, 20
200187cc:	64630402 	bslli	r3, r3, 2
200187d0:	10651800 	addk	r3, r5, r3
200187d4:	e8630000 	lwi	r3, r3, 0
200187d8:	14a32000 	rsubk	r5, r3, r4
200187dc:	30600001 	addik	r3, r0, 1
200187e0:	e8930018 	lwi	r4, r19, 24
200187e4:	16442803 	cmpu	r18, r4, r5
200187e8:	bcb20008 	bgei	r18, 8		// 200187f0
200187ec:	10600000 	addk	r3, r0, r0
200187f0:	a46300ff 	andi	r3, r3, 255
}
200187f4:	10330000 	addk	r1, r19, r0
200187f8:	ea610004 	lwi	r19, r1, 4
200187fc:	ea810008 	lwi	r20, r1, 8
20018800:	3021000c 	addik	r1, r1, 12
20018804:	b60f0008 	rtsd	r15, 8
20018808:	80000000 	or	r0, r0, r0

2001880c <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001880c:	3021fff4 	addik	r1, r1, -12
20018810:	fa610004 	swi	r19, r1, 4
20018814:	fa810008 	swi	r20, r1, 8
20018818:	12610000 	addk	r19, r1, r0
2001881c:	96808000 	mfs	r20, rpc
20018820:	b000dffe 	imm	-8194
20018824:	32949140 	addik	r20, r20, -28352
20018828:	f8b30010 	swi	r5, r19, 16
2001882c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20018830:	e8730010 	lwi	r3, r19, 16
20018834:	e8630010 	lwi	r3, r3, 16
20018838:	e8830000 	lwi	r4, r3, 0
2001883c:	e8730010 	lwi	r3, r19, 16
20018840:	e8a3000c 	lwi	r5, r3, 12
20018844:	e8730014 	lwi	r3, r19, 20
20018848:	64630402 	bslli	r3, r3, 2
2001884c:	10651800 	addk	r3, r5, r3
20018850:	e8630000 	lwi	r3, r3, 0
20018854:	14632000 	rsubk	r3, r3, r4
}
20018858:	10330000 	addk	r1, r19, r0
2001885c:	ea610004 	lwi	r19, r1, 4
20018860:	ea810008 	lwi	r20, r1, 8
20018864:	3021000c 	addik	r1, r1, 12
20018868:	b60f0008 	rtsd	r15, 8
2001886c:	80000000 	or	r0, r0, r0

20018870 <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20018870:	3021fff0 	addik	r1, r1, -16
20018874:	fa610008 	swi	r19, r1, 8
20018878:	fa81000c 	swi	r20, r1, 12
2001887c:	12610000 	addk	r19, r1, r0
20018880:	96808000 	mfs	r20, rpc
20018884:	b000dffe 	imm	-8194
20018888:	329490dc 	addik	r20, r20, -28452
2001888c:	f8b30014 	swi	r5, r19, 20
20018890:	f8d30018 	swi	r6, r19, 24
20018894:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20018898:	f8130004 	swi	r0, r19, 4
2001889c:	b800005c 	bri	92		// 200188f8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200188a0:	e8730014 	lwi	r3, r19, 20
200188a4:	e8830000 	lwi	r4, r3, 0
200188a8:	e8730014 	lwi	r3, r19, 20
200188ac:	e8a3000c 	lwi	r5, r3, 12
200188b0:	e8730004 	lwi	r3, r19, 4
200188b4:	64630402 	bslli	r3, r3, 2
200188b8:	10651800 	addk	r3, r5, r3
200188bc:	e8a30000 	lwi	r5, r3, 0
200188c0:	e8730014 	lwi	r3, r19, 20
200188c4:	e8630010 	lwi	r3, r3, 16
200188c8:	e8630000 	lwi	r3, r3, 0
200188cc:	14632800 	rsubk	r3, r3, r5
200188d0:	10641800 	addk	r3, r4, r3
200188d4:	30830001 	addik	r4, r3, 1
200188d8:	e873001c 	lwi	r3, r19, 28
200188dc:	16441803 	cmpu	r18, r4, r3
200188e0:	bc52000c 	blti	r18, 12		// 200188ec
            return 0;
200188e4:	10600000 	addk	r3, r0, r0
200188e8:	b8000024 	bri	36		// 2001890c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200188ec:	e8730004 	lwi	r3, r19, 4
200188f0:	30630001 	addik	r3, r3, 1
200188f4:	f8730004 	swi	r3, r19, 4
200188f8:	e8930004 	lwi	r4, r19, 4
200188fc:	e8730018 	lwi	r3, r19, 24
20018900:	16432003 	cmpu	r18, r3, r4
20018904:	bc52ff9c 	blti	r18, -100		// 200188a0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20018908:	30600001 	addik	r3, r0, 1
}
2001890c:	10330000 	addk	r1, r19, r0
20018910:	ea610008 	lwi	r19, r1, 8
20018914:	ea81000c 	lwi	r20, r1, 12
20018918:	30210010 	addik	r1, r1, 16
2001891c:	b60f0008 	rtsd	r15, 8
20018920:	80000000 	or	r0, r0, r0

20018924 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20018924:	3021ffe8 	addik	r1, r1, -24
20018928:	fa610010 	swi	r19, r1, 16
2001892c:	fa810014 	swi	r20, r1, 20
20018930:	12610000 	addk	r19, r1, r0
20018934:	96808000 	mfs	r20, rpc
20018938:	b000dffe 	imm	-8194
2001893c:	32949028 	addik	r20, r20, -28632
20018940:	f8b3001c 	swi	r5, r19, 28
20018944:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20018948:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001894c:	f8130004 	swi	r0, r19, 4
20018950:	b8000054 	bri	84		// 200189a4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20018954:	e873001c 	lwi	r3, r19, 28
20018958:	e8630010 	lwi	r3, r3, 16
2001895c:	e8830000 	lwi	r4, r3, 0
20018960:	e873001c 	lwi	r3, r19, 28
20018964:	e8a3000c 	lwi	r5, r3, 12
20018968:	e8730004 	lwi	r3, r19, 4
2001896c:	64630402 	bslli	r3, r3, 2
20018970:	10651800 	addk	r3, r5, r3
20018974:	e8630000 	lwi	r3, r3, 0
20018978:	14632000 	rsubk	r3, r3, r4
2001897c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20018980:	e8930008 	lwi	r4, r19, 8
20018984:	e873000c 	lwi	r3, r19, 12
20018988:	16441803 	cmpu	r18, r4, r3
2001898c:	bcb20008 	bgei	r18, 8		// 20018994
20018990:	10640000 	addk	r3, r4, r0
20018994:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20018998:	e8730004 	lwi	r3, r19, 4
2001899c:	30630001 	addik	r3, r3, 1
200189a0:	f8730004 	swi	r3, r19, 4
200189a4:	e8930004 	lwi	r4, r19, 4
200189a8:	e8730020 	lwi	r3, r19, 32
200189ac:	16432003 	cmpu	r18, r3, r4
200189b0:	bc52ffa4 	blti	r18, -92		// 20018954
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200189b4:	e873001c 	lwi	r3, r19, 28
200189b8:	e8830000 	lwi	r4, r3, 0
200189bc:	e8730008 	lwi	r3, r19, 8
200189c0:	14632000 	rsubk	r3, r3, r4
}
200189c4:	10330000 	addk	r1, r19, r0
200189c8:	ea610010 	lwi	r19, r1, 16
200189cc:	ea810014 	lwi	r20, r1, 20
200189d0:	30210018 	addik	r1, r1, 24
200189d4:	b60f0008 	rtsd	r15, 8
200189d8:	80000000 	or	r0, r0, r0

200189dc <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200189dc:	3021fff0 	addik	r1, r1, -16
200189e0:	fa610008 	swi	r19, r1, 8
200189e4:	fa81000c 	swi	r20, r1, 12
200189e8:	12610000 	addk	r19, r1, r0
200189ec:	96808000 	mfs	r20, rpc
200189f0:	b000dffe 	imm	-8194
200189f4:	32948f70 	addik	r20, r20, -28816
200189f8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200189fc:	e8730014 	lwi	r3, r19, 20
20018a00:	e8630010 	lwi	r3, r3, 16
20018a04:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20018a08:	f8130004 	swi	r0, r19, 4
20018a0c:	b8000028 	bri	40		// 20018a34
        fifo->read_inds[i] = 0;
20018a10:	e8730014 	lwi	r3, r19, 20
20018a14:	e883000c 	lwi	r4, r3, 12
20018a18:	e8730004 	lwi	r3, r19, 4
20018a1c:	64630402 	bslli	r3, r3, 2
20018a20:	10641800 	addk	r3, r4, r3
20018a24:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20018a28:	e8730004 	lwi	r3, r19, 4
20018a2c:	30630001 	addik	r3, r3, 1
20018a30:	f8730004 	swi	r3, r19, 4
20018a34:	e8730014 	lwi	r3, r19, 20
20018a38:	e8830008 	lwi	r4, r3, 8
20018a3c:	e8730004 	lwi	r3, r19, 4
20018a40:	16441803 	cmpu	r18, r4, r3
20018a44:	bc52ffcc 	blti	r18, -52		// 20018a10
        fifo->read_inds[i] = 0;
    }
}
20018a48:	10330000 	addk	r1, r19, r0
20018a4c:	ea610008 	lwi	r19, r1, 8
20018a50:	ea81000c 	lwi	r20, r1, 12
20018a54:	30210010 	addik	r1, r1, 16
20018a58:	b60f0008 	rtsd	r15, 8
20018a5c:	80000000 	or	r0, r0, r0

20018a60 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20018a60:	3021fff0 	addik	r1, r1, -16
20018a64:	fa610008 	swi	r19, r1, 8
20018a68:	fa81000c 	swi	r20, r1, 12
20018a6c:	12610000 	addk	r19, r1, r0
20018a70:	96808000 	mfs	r20, rpc
20018a74:	b000dffe 	imm	-8194
20018a78:	32948eec 	addik	r20, r20, -28948
20018a7c:	f8b30014 	swi	r5, r19, 20
20018a80:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20018a84:	e8730014 	lwi	r3, r19, 20
20018a88:	e8830004 	lwi	r4, r3, 4
20018a8c:	e8730014 	lwi	r3, r19, 20
20018a90:	e8a3000c 	lwi	r5, r3, 12
20018a94:	e8730018 	lwi	r3, r19, 24
20018a98:	64630402 	bslli	r3, r3, 2
20018a9c:	10651800 	addk	r3, r5, r3
20018aa0:	e8a30000 	lwi	r5, r3, 0
20018aa4:	e8730014 	lwi	r3, r19, 20
20018aa8:	e8630000 	lwi	r3, r3, 0
20018aac:	3063ffff 	addik	r3, r3, -1
20018ab0:	84651800 	and	r3, r5, r3
20018ab4:	10641800 	addk	r3, r4, r3
20018ab8:	e0630000 	lbui	r3, r3, 0
20018abc:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20018ac0:	e8730014 	lwi	r3, r19, 20
20018ac4:	e883000c 	lwi	r4, r3, 12
20018ac8:	e8730018 	lwi	r3, r19, 24
20018acc:	64630402 	bslli	r3, r3, 2
20018ad0:	10641800 	addk	r3, r4, r3
20018ad4:	e8830000 	lwi	r4, r3, 0
20018ad8:	30840001 	addik	r4, r4, 1
20018adc:	f8830000 	swi	r4, r3, 0
    return value;
20018ae0:	e0730004 	lbui	r3, r19, 4
}
20018ae4:	10330000 	addk	r1, r19, r0
20018ae8:	ea610008 	lwi	r19, r1, 8
20018aec:	ea81000c 	lwi	r20, r1, 12
20018af0:	30210010 	addik	r1, r1, 16
20018af4:	b60f0008 	rtsd	r15, 8
20018af8:	80000000 	or	r0, r0, r0

20018afc <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20018afc:	3021fff4 	addik	r1, r1, -12
20018b00:	fa610004 	swi	r19, r1, 4
20018b04:	fa810008 	swi	r20, r1, 8
20018b08:	12610000 	addk	r19, r1, r0
20018b0c:	96808000 	mfs	r20, rpc
20018b10:	b000dffe 	imm	-8194
20018b14:	32948e50 	addik	r20, r20, -29104
20018b18:	f8b30010 	swi	r5, r19, 16
20018b1c:	10660000 	addk	r3, r6, r0
20018b20:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20018b24:	e8730010 	lwi	r3, r19, 16
20018b28:	e8830004 	lwi	r4, r3, 4
20018b2c:	e8730010 	lwi	r3, r19, 16
20018b30:	e8630010 	lwi	r3, r3, 16
20018b34:	e8a30000 	lwi	r5, r3, 0
20018b38:	e8730010 	lwi	r3, r19, 16
20018b3c:	e8630000 	lwi	r3, r3, 0
20018b40:	3063ffff 	addik	r3, r3, -1
20018b44:	84651800 	and	r3, r5, r3
20018b48:	10641800 	addk	r3, r4, r3
20018b4c:	e0930014 	lbui	r4, r19, 20
20018b50:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20018b54:	e8730010 	lwi	r3, r19, 16
20018b58:	e8630010 	lwi	r3, r3, 16
20018b5c:	e8830000 	lwi	r4, r3, 0
20018b60:	30840001 	addik	r4, r4, 1
20018b64:	f8830000 	swi	r4, r3, 0
}
20018b68:	10330000 	addk	r1, r19, r0
20018b6c:	ea610004 	lwi	r19, r1, 4
20018b70:	ea810008 	lwi	r20, r1, 8
20018b74:	3021000c 	addik	r1, r1, 12
20018b78:	b60f0008 	rtsd	r15, 8
20018b7c:	80000000 	or	r0, r0, r0

20018b80 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20018b80:	3021fff4 	addik	r1, r1, -12
20018b84:	fa610004 	swi	r19, r1, 4
20018b88:	fa810008 	swi	r20, r1, 8
20018b8c:	12610000 	addk	r19, r1, r0
20018b90:	96808000 	mfs	r20, rpc
20018b94:	b000dffe 	imm	-8194
20018b98:	32948dcc 	addik	r20, r20, -29236
20018b9c:	f8b30010 	swi	r5, r19, 16
20018ba0:	f8d30014 	swi	r6, r19, 20
20018ba4:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20018ba8:	e8730010 	lwi	r3, r19, 16
20018bac:	e8630010 	lwi	r3, r3, 16
20018bb0:	e8830000 	lwi	r4, r3, 0
20018bb4:	e8730010 	lwi	r3, r19, 16
20018bb8:	e8a3000c 	lwi	r5, r3, 12
20018bbc:	e8730014 	lwi	r3, r19, 20
20018bc0:	64630402 	bslli	r3, r3, 2
20018bc4:	10651800 	addk	r3, r5, r3
20018bc8:	e8630000 	lwi	r3, r3, 0
20018bcc:	14a32000 	rsubk	r5, r3, r4
20018bd0:	30600001 	addik	r3, r0, 1
20018bd4:	e8930018 	lwi	r4, r19, 24
20018bd8:	16442803 	cmpu	r18, r4, r5
20018bdc:	bcb20008 	bgei	r18, 8		// 20018be4
20018be0:	10600000 	addk	r3, r0, r0
20018be4:	a46300ff 	andi	r3, r3, 255
}
20018be8:	10330000 	addk	r1, r19, r0
20018bec:	ea610004 	lwi	r19, r1, 4
20018bf0:	ea810008 	lwi	r20, r1, 8
20018bf4:	3021000c 	addik	r1, r1, 12
20018bf8:	b60f0008 	rtsd	r15, 8
20018bfc:	80000000 	or	r0, r0, r0

20018c00 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20018c00:	3021fff4 	addik	r1, r1, -12
20018c04:	fa610004 	swi	r19, r1, 4
20018c08:	fa810008 	swi	r20, r1, 8
20018c0c:	12610000 	addk	r19, r1, r0
20018c10:	96808000 	mfs	r20, rpc
20018c14:	b000dffe 	imm	-8194
20018c18:	32948d4c 	addik	r20, r20, -29364
20018c1c:	f8b30010 	swi	r5, r19, 16
20018c20:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20018c24:	e8730010 	lwi	r3, r19, 16
20018c28:	e8630010 	lwi	r3, r3, 16
20018c2c:	e8830000 	lwi	r4, r3, 0
20018c30:	e8730010 	lwi	r3, r19, 16
20018c34:	e8a3000c 	lwi	r5, r3, 12
20018c38:	e8730014 	lwi	r3, r19, 20
20018c3c:	64630402 	bslli	r3, r3, 2
20018c40:	10651800 	addk	r3, r5, r3
20018c44:	e8630000 	lwi	r3, r3, 0
20018c48:	14632000 	rsubk	r3, r3, r4
}
20018c4c:	10330000 	addk	r1, r19, r0
20018c50:	ea610004 	lwi	r19, r1, 4
20018c54:	ea810008 	lwi	r20, r1, 8
20018c58:	3021000c 	addik	r1, r1, 12
20018c5c:	b60f0008 	rtsd	r15, 8
20018c60:	80000000 	or	r0, r0, r0

20018c64 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20018c64:	3021fff0 	addik	r1, r1, -16
20018c68:	fa610008 	swi	r19, r1, 8
20018c6c:	fa81000c 	swi	r20, r1, 12
20018c70:	12610000 	addk	r19, r1, r0
20018c74:	96808000 	mfs	r20, rpc
20018c78:	b000dffe 	imm	-8194
20018c7c:	32948ce8 	addik	r20, r20, -29464
20018c80:	f8b30014 	swi	r5, r19, 20
20018c84:	f8d30018 	swi	r6, r19, 24
20018c88:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20018c8c:	f8130004 	swi	r0, r19, 4
20018c90:	b800005c 	bri	92		// 20018cec
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20018c94:	e8730014 	lwi	r3, r19, 20
20018c98:	e8830000 	lwi	r4, r3, 0
20018c9c:	e8730014 	lwi	r3, r19, 20
20018ca0:	e8a3000c 	lwi	r5, r3, 12
20018ca4:	e8730004 	lwi	r3, r19, 4
20018ca8:	64630402 	bslli	r3, r3, 2
20018cac:	10651800 	addk	r3, r5, r3
20018cb0:	e8a30000 	lwi	r5, r3, 0
20018cb4:	e8730014 	lwi	r3, r19, 20
20018cb8:	e8630010 	lwi	r3, r3, 16
20018cbc:	e8630000 	lwi	r3, r3, 0
20018cc0:	14632800 	rsubk	r3, r3, r5
20018cc4:	10641800 	addk	r3, r4, r3
20018cc8:	30830001 	addik	r4, r3, 1
20018ccc:	e873001c 	lwi	r3, r19, 28
20018cd0:	16441803 	cmpu	r18, r4, r3
20018cd4:	bc52000c 	blti	r18, 12		// 20018ce0
            return 0;
20018cd8:	10600000 	addk	r3, r0, r0
20018cdc:	b8000024 	bri	36		// 20018d00
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20018ce0:	e8730004 	lwi	r3, r19, 4
20018ce4:	30630001 	addik	r3, r3, 1
20018ce8:	f8730004 	swi	r3, r19, 4
20018cec:	e8930004 	lwi	r4, r19, 4
20018cf0:	e8730018 	lwi	r3, r19, 24
20018cf4:	16432003 	cmpu	r18, r3, r4
20018cf8:	bc52ff9c 	blti	r18, -100		// 20018c94
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20018cfc:	30600001 	addik	r3, r0, 1
}
20018d00:	10330000 	addk	r1, r19, r0
20018d04:	ea610008 	lwi	r19, r1, 8
20018d08:	ea81000c 	lwi	r20, r1, 12
20018d0c:	30210010 	addik	r1, r1, 16
20018d10:	b60f0008 	rtsd	r15, 8
20018d14:	80000000 	or	r0, r0, r0

20018d18 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20018d18:	3021ffe8 	addik	r1, r1, -24
20018d1c:	fa610010 	swi	r19, r1, 16
20018d20:	fa810014 	swi	r20, r1, 20
20018d24:	12610000 	addk	r19, r1, r0
20018d28:	96808000 	mfs	r20, rpc
20018d2c:	b000dffe 	imm	-8194
20018d30:	32948c34 	addik	r20, r20, -29644
20018d34:	f8b3001c 	swi	r5, r19, 28
20018d38:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20018d3c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20018d40:	f8130004 	swi	r0, r19, 4
20018d44:	b8000054 	bri	84		// 20018d98
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20018d48:	e873001c 	lwi	r3, r19, 28
20018d4c:	e8630010 	lwi	r3, r3, 16
20018d50:	e8830000 	lwi	r4, r3, 0
20018d54:	e873001c 	lwi	r3, r19, 28
20018d58:	e8a3000c 	lwi	r5, r3, 12
20018d5c:	e8730004 	lwi	r3, r19, 4
20018d60:	64630402 	bslli	r3, r3, 2
20018d64:	10651800 	addk	r3, r5, r3
20018d68:	e8630000 	lwi	r3, r3, 0
20018d6c:	14632000 	rsubk	r3, r3, r4
20018d70:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20018d74:	e8930008 	lwi	r4, r19, 8
20018d78:	e873000c 	lwi	r3, r19, 12
20018d7c:	16441803 	cmpu	r18, r4, r3
20018d80:	bcb20008 	bgei	r18, 8		// 20018d88
20018d84:	10640000 	addk	r3, r4, r0
20018d88:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20018d8c:	e8730004 	lwi	r3, r19, 4
20018d90:	30630001 	addik	r3, r3, 1
20018d94:	f8730004 	swi	r3, r19, 4
20018d98:	e8930004 	lwi	r4, r19, 4
20018d9c:	e8730020 	lwi	r3, r19, 32
20018da0:	16432003 	cmpu	r18, r3, r4
20018da4:	bc52ffa4 	blti	r18, -92		// 20018d48
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20018da8:	e873001c 	lwi	r3, r19, 28
20018dac:	e8830000 	lwi	r4, r3, 0
20018db0:	e8730008 	lwi	r3, r19, 8
20018db4:	14632000 	rsubk	r3, r3, r4
}
20018db8:	10330000 	addk	r1, r19, r0
20018dbc:	ea610010 	lwi	r19, r1, 16
20018dc0:	ea810014 	lwi	r20, r1, 20
20018dc4:	30210018 	addik	r1, r1, 24
20018dc8:	b60f0008 	rtsd	r15, 8
20018dcc:	80000000 	or	r0, r0, r0

20018dd0 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20018dd0:	3021fff0 	addik	r1, r1, -16
20018dd4:	fa610008 	swi	r19, r1, 8
20018dd8:	fa81000c 	swi	r20, r1, 12
20018ddc:	12610000 	addk	r19, r1, r0
20018de0:	96808000 	mfs	r20, rpc
20018de4:	b000dffe 	imm	-8194
20018de8:	32948b7c 	addik	r20, r20, -29828
20018dec:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20018df0:	e8730014 	lwi	r3, r19, 20
20018df4:	e8630010 	lwi	r3, r3, 16
20018df8:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20018dfc:	f8130004 	swi	r0, r19, 4
20018e00:	b8000028 	bri	40		// 20018e28
        fifo->read_inds[i] = 0;
20018e04:	e8730014 	lwi	r3, r19, 20
20018e08:	e883000c 	lwi	r4, r3, 12
20018e0c:	e8730004 	lwi	r3, r19, 4
20018e10:	64630402 	bslli	r3, r3, 2
20018e14:	10641800 	addk	r3, r4, r3
20018e18:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20018e1c:	e8730004 	lwi	r3, r19, 4
20018e20:	30630001 	addik	r3, r3, 1
20018e24:	f8730004 	swi	r3, r19, 4
20018e28:	e8730014 	lwi	r3, r19, 20
20018e2c:	e8830008 	lwi	r4, r3, 8
20018e30:	e8730004 	lwi	r3, r19, 4
20018e34:	16441803 	cmpu	r18, r4, r3
20018e38:	bc52ffcc 	blti	r18, -52		// 20018e04
        fifo->read_inds[i] = 0;
    }
}
20018e3c:	10330000 	addk	r1, r19, r0
20018e40:	ea610008 	lwi	r19, r1, 8
20018e44:	ea81000c 	lwi	r20, r1, 12
20018e48:	30210010 	addik	r1, r1, 16
20018e4c:	b60f0008 	rtsd	r15, 8
20018e50:	80000000 	or	r0, r0, r0

20018e54 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20018e54:	3021fff0 	addik	r1, r1, -16
20018e58:	fa610008 	swi	r19, r1, 8
20018e5c:	fa81000c 	swi	r20, r1, 12
20018e60:	12610000 	addk	r19, r1, r0
20018e64:	96808000 	mfs	r20, rpc
20018e68:	b000dffe 	imm	-8194
20018e6c:	32948af8 	addik	r20, r20, -29960
20018e70:	f8b30014 	swi	r5, r19, 20
20018e74:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20018e78:	e8730014 	lwi	r3, r19, 20
20018e7c:	e8830004 	lwi	r4, r3, 4
20018e80:	e8730014 	lwi	r3, r19, 20
20018e84:	e8a3000c 	lwi	r5, r3, 12
20018e88:	e8730018 	lwi	r3, r19, 24
20018e8c:	64630402 	bslli	r3, r3, 2
20018e90:	10651800 	addk	r3, r5, r3
20018e94:	e8a30000 	lwi	r5, r3, 0
20018e98:	e8730014 	lwi	r3, r19, 20
20018e9c:	e8630000 	lwi	r3, r3, 0
20018ea0:	3063ffff 	addik	r3, r3, -1
20018ea4:	84651800 	and	r3, r5, r3
20018ea8:	10631800 	addk	r3, r3, r3
20018eac:	10641800 	addk	r3, r4, r3
20018eb0:	e4630000 	lhui	r3, r3, 0
20018eb4:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20018eb8:	e8730014 	lwi	r3, r19, 20
20018ebc:	e883000c 	lwi	r4, r3, 12
20018ec0:	e8730018 	lwi	r3, r19, 24
20018ec4:	64630402 	bslli	r3, r3, 2
20018ec8:	10641800 	addk	r3, r4, r3
20018ecc:	e8830000 	lwi	r4, r3, 0
20018ed0:	30840001 	addik	r4, r4, 1
20018ed4:	f8830000 	swi	r4, r3, 0
    return value;
20018ed8:	e4730004 	lhui	r3, r19, 4
}
20018edc:	10330000 	addk	r1, r19, r0
20018ee0:	ea610008 	lwi	r19, r1, 8
20018ee4:	ea81000c 	lwi	r20, r1, 12
20018ee8:	30210010 	addik	r1, r1, 16
20018eec:	b60f0008 	rtsd	r15, 8
20018ef0:	80000000 	or	r0, r0, r0

20018ef4 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20018ef4:	3021fff4 	addik	r1, r1, -12
20018ef8:	fa610004 	swi	r19, r1, 4
20018efc:	fa810008 	swi	r20, r1, 8
20018f00:	12610000 	addk	r19, r1, r0
20018f04:	96808000 	mfs	r20, rpc
20018f08:	b000dffe 	imm	-8194
20018f0c:	32948a58 	addik	r20, r20, -30120
20018f10:	f8b30010 	swi	r5, r19, 16
20018f14:	10660000 	addk	r3, r6, r0
20018f18:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20018f1c:	e8730010 	lwi	r3, r19, 16
20018f20:	e8830004 	lwi	r4, r3, 4
20018f24:	e8730010 	lwi	r3, r19, 16
20018f28:	e8630010 	lwi	r3, r3, 16
20018f2c:	e8a30000 	lwi	r5, r3, 0
20018f30:	e8730010 	lwi	r3, r19, 16
20018f34:	e8630000 	lwi	r3, r3, 0
20018f38:	3063ffff 	addik	r3, r3, -1
20018f3c:	84651800 	and	r3, r5, r3
20018f40:	10631800 	addk	r3, r3, r3
20018f44:	10641800 	addk	r3, r4, r3
20018f48:	e4930014 	lhui	r4, r19, 20
20018f4c:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20018f50:	e8730010 	lwi	r3, r19, 16
20018f54:	e8630010 	lwi	r3, r3, 16
20018f58:	e8830000 	lwi	r4, r3, 0
20018f5c:	30840001 	addik	r4, r4, 1
20018f60:	f8830000 	swi	r4, r3, 0
}
20018f64:	10330000 	addk	r1, r19, r0
20018f68:	ea610004 	lwi	r19, r1, 4
20018f6c:	ea810008 	lwi	r20, r1, 8
20018f70:	3021000c 	addik	r1, r1, 12
20018f74:	b60f0008 	rtsd	r15, 8
20018f78:	80000000 	or	r0, r0, r0

20018f7c <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20018f7c:	3021fff4 	addik	r1, r1, -12
20018f80:	fa610004 	swi	r19, r1, 4
20018f84:	fa810008 	swi	r20, r1, 8
20018f88:	12610000 	addk	r19, r1, r0
20018f8c:	96808000 	mfs	r20, rpc
20018f90:	b000dffe 	imm	-8194
20018f94:	329489d0 	addik	r20, r20, -30256
20018f98:	f8b30010 	swi	r5, r19, 16
20018f9c:	f8d30014 	swi	r6, r19, 20
20018fa0:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20018fa4:	e8730010 	lwi	r3, r19, 16
20018fa8:	e8630010 	lwi	r3, r3, 16
20018fac:	e8830000 	lwi	r4, r3, 0
20018fb0:	e8730010 	lwi	r3, r19, 16
20018fb4:	e8a3000c 	lwi	r5, r3, 12
20018fb8:	e8730014 	lwi	r3, r19, 20
20018fbc:	64630402 	bslli	r3, r3, 2
20018fc0:	10651800 	addk	r3, r5, r3
20018fc4:	e8630000 	lwi	r3, r3, 0
20018fc8:	14a32000 	rsubk	r5, r3, r4
20018fcc:	30600001 	addik	r3, r0, 1
20018fd0:	e8930018 	lwi	r4, r19, 24
20018fd4:	16442803 	cmpu	r18, r4, r5
20018fd8:	bcb20008 	bgei	r18, 8		// 20018fe0
20018fdc:	10600000 	addk	r3, r0, r0
20018fe0:	a46300ff 	andi	r3, r3, 255
}
20018fe4:	10330000 	addk	r1, r19, r0
20018fe8:	ea610004 	lwi	r19, r1, 4
20018fec:	ea810008 	lwi	r20, r1, 8
20018ff0:	3021000c 	addik	r1, r1, 12
20018ff4:	b60f0008 	rtsd	r15, 8
20018ff8:	80000000 	or	r0, r0, r0

20018ffc <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20018ffc:	3021fff4 	addik	r1, r1, -12
20019000:	fa610004 	swi	r19, r1, 4
20019004:	fa810008 	swi	r20, r1, 8
20019008:	12610000 	addk	r19, r1, r0
2001900c:	96808000 	mfs	r20, rpc
20019010:	b000dffe 	imm	-8194
20019014:	32948950 	addik	r20, r20, -30384
20019018:	f8b30010 	swi	r5, r19, 16
2001901c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20019020:	e8730010 	lwi	r3, r19, 16
20019024:	e8630010 	lwi	r3, r3, 16
20019028:	e8830000 	lwi	r4, r3, 0
2001902c:	e8730010 	lwi	r3, r19, 16
20019030:	e8a3000c 	lwi	r5, r3, 12
20019034:	e8730014 	lwi	r3, r19, 20
20019038:	64630402 	bslli	r3, r3, 2
2001903c:	10651800 	addk	r3, r5, r3
20019040:	e8630000 	lwi	r3, r3, 0
20019044:	14632000 	rsubk	r3, r3, r4
}
20019048:	10330000 	addk	r1, r19, r0
2001904c:	ea610004 	lwi	r19, r1, 4
20019050:	ea810008 	lwi	r20, r1, 8
20019054:	3021000c 	addik	r1, r1, 12
20019058:	b60f0008 	rtsd	r15, 8
2001905c:	80000000 	or	r0, r0, r0

20019060 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20019060:	3021fff0 	addik	r1, r1, -16
20019064:	fa610008 	swi	r19, r1, 8
20019068:	fa81000c 	swi	r20, r1, 12
2001906c:	12610000 	addk	r19, r1, r0
20019070:	96808000 	mfs	r20, rpc
20019074:	b000dffe 	imm	-8194
20019078:	329488ec 	addik	r20, r20, -30484
2001907c:	f8b30014 	swi	r5, r19, 20
20019080:	f8d30018 	swi	r6, r19, 24
20019084:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20019088:	f8130004 	swi	r0, r19, 4
2001908c:	b800005c 	bri	92		// 200190e8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20019090:	e8730014 	lwi	r3, r19, 20
20019094:	e8830000 	lwi	r4, r3, 0
20019098:	e8730014 	lwi	r3, r19, 20
2001909c:	e8a3000c 	lwi	r5, r3, 12
200190a0:	e8730004 	lwi	r3, r19, 4
200190a4:	64630402 	bslli	r3, r3, 2
200190a8:	10651800 	addk	r3, r5, r3
200190ac:	e8a30000 	lwi	r5, r3, 0
200190b0:	e8730014 	lwi	r3, r19, 20
200190b4:	e8630010 	lwi	r3, r3, 16
200190b8:	e8630000 	lwi	r3, r3, 0
200190bc:	14632800 	rsubk	r3, r3, r5
200190c0:	10641800 	addk	r3, r4, r3
200190c4:	30830001 	addik	r4, r3, 1
200190c8:	e873001c 	lwi	r3, r19, 28
200190cc:	16441803 	cmpu	r18, r4, r3
200190d0:	bc52000c 	blti	r18, 12		// 200190dc
            return 0;
200190d4:	10600000 	addk	r3, r0, r0
200190d8:	b8000024 	bri	36		// 200190fc
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200190dc:	e8730004 	lwi	r3, r19, 4
200190e0:	30630001 	addik	r3, r3, 1
200190e4:	f8730004 	swi	r3, r19, 4
200190e8:	e8930004 	lwi	r4, r19, 4
200190ec:	e8730018 	lwi	r3, r19, 24
200190f0:	16432003 	cmpu	r18, r3, r4
200190f4:	bc52ff9c 	blti	r18, -100		// 20019090
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200190f8:	30600001 	addik	r3, r0, 1
}
200190fc:	10330000 	addk	r1, r19, r0
20019100:	ea610008 	lwi	r19, r1, 8
20019104:	ea81000c 	lwi	r20, r1, 12
20019108:	30210010 	addik	r1, r1, 16
2001910c:	b60f0008 	rtsd	r15, 8
20019110:	80000000 	or	r0, r0, r0

20019114 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20019114:	3021ffe8 	addik	r1, r1, -24
20019118:	fa610010 	swi	r19, r1, 16
2001911c:	fa810014 	swi	r20, r1, 20
20019120:	12610000 	addk	r19, r1, r0
20019124:	96808000 	mfs	r20, rpc
20019128:	b000dffe 	imm	-8194
2001912c:	32948838 	addik	r20, r20, -30664
20019130:	f8b3001c 	swi	r5, r19, 28
20019134:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20019138:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001913c:	f8130004 	swi	r0, r19, 4
20019140:	b8000054 	bri	84		// 20019194
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20019144:	e873001c 	lwi	r3, r19, 28
20019148:	e8630010 	lwi	r3, r3, 16
2001914c:	e8830000 	lwi	r4, r3, 0
20019150:	e873001c 	lwi	r3, r19, 28
20019154:	e8a3000c 	lwi	r5, r3, 12
20019158:	e8730004 	lwi	r3, r19, 4
2001915c:	64630402 	bslli	r3, r3, 2
20019160:	10651800 	addk	r3, r5, r3
20019164:	e8630000 	lwi	r3, r3, 0
20019168:	14632000 	rsubk	r3, r3, r4
2001916c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20019170:	e8930008 	lwi	r4, r19, 8
20019174:	e873000c 	lwi	r3, r19, 12
20019178:	16441803 	cmpu	r18, r4, r3
2001917c:	bcb20008 	bgei	r18, 8		// 20019184
20019180:	10640000 	addk	r3, r4, r0
20019184:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20019188:	e8730004 	lwi	r3, r19, 4
2001918c:	30630001 	addik	r3, r3, 1
20019190:	f8730004 	swi	r3, r19, 4
20019194:	e8930004 	lwi	r4, r19, 4
20019198:	e8730020 	lwi	r3, r19, 32
2001919c:	16432003 	cmpu	r18, r3, r4
200191a0:	bc52ffa4 	blti	r18, -92		// 20019144
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200191a4:	e873001c 	lwi	r3, r19, 28
200191a8:	e8830000 	lwi	r4, r3, 0
200191ac:	e8730008 	lwi	r3, r19, 8
200191b0:	14632000 	rsubk	r3, r3, r4
}
200191b4:	10330000 	addk	r1, r19, r0
200191b8:	ea610010 	lwi	r19, r1, 16
200191bc:	ea810014 	lwi	r20, r1, 20
200191c0:	30210018 	addik	r1, r1, 24
200191c4:	b60f0008 	rtsd	r15, 8
200191c8:	80000000 	or	r0, r0, r0

200191cc <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200191cc:	3021fff0 	addik	r1, r1, -16
200191d0:	fa610008 	swi	r19, r1, 8
200191d4:	fa81000c 	swi	r20, r1, 12
200191d8:	12610000 	addk	r19, r1, r0
200191dc:	96808000 	mfs	r20, rpc
200191e0:	b000dffe 	imm	-8194
200191e4:	32948780 	addik	r20, r20, -30848
200191e8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200191ec:	e8730014 	lwi	r3, r19, 20
200191f0:	e8630010 	lwi	r3, r3, 16
200191f4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200191f8:	f8130004 	swi	r0, r19, 4
200191fc:	b8000028 	bri	40		// 20019224
        fifo->read_inds[i] = 0;
20019200:	e8730014 	lwi	r3, r19, 20
20019204:	e883000c 	lwi	r4, r3, 12
20019208:	e8730004 	lwi	r3, r19, 4
2001920c:	64630402 	bslli	r3, r3, 2
20019210:	10641800 	addk	r3, r4, r3
20019214:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20019218:	e8730004 	lwi	r3, r19, 4
2001921c:	30630001 	addik	r3, r3, 1
20019220:	f8730004 	swi	r3, r19, 4
20019224:	e8730014 	lwi	r3, r19, 20
20019228:	e8830008 	lwi	r4, r3, 8
2001922c:	e8730004 	lwi	r3, r19, 4
20019230:	16441803 	cmpu	r18, r4, r3
20019234:	bc52ffcc 	blti	r18, -52		// 20019200
        fifo->read_inds[i] = 0;
    }
}
20019238:	10330000 	addk	r1, r19, r0
2001923c:	ea610008 	lwi	r19, r1, 8
20019240:	ea81000c 	lwi	r20, r1, 12
20019244:	30210010 	addik	r1, r1, 16
20019248:	b60f0008 	rtsd	r15, 8
2001924c:	80000000 	or	r0, r0, r0

20019250 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20019250:	3021fff0 	addik	r1, r1, -16
20019254:	fa610008 	swi	r19, r1, 8
20019258:	fa81000c 	swi	r20, r1, 12
2001925c:	12610000 	addk	r19, r1, r0
20019260:	96808000 	mfs	r20, rpc
20019264:	b000dffe 	imm	-8194
20019268:	329486fc 	addik	r20, r20, -30980
2001926c:	f8b30014 	swi	r5, r19, 20
20019270:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20019274:	e8730014 	lwi	r3, r19, 20
20019278:	e8830004 	lwi	r4, r3, 4
2001927c:	e8730014 	lwi	r3, r19, 20
20019280:	e8a3000c 	lwi	r5, r3, 12
20019284:	e8730018 	lwi	r3, r19, 24
20019288:	64630402 	bslli	r3, r3, 2
2001928c:	10651800 	addk	r3, r5, r3
20019290:	e8a30000 	lwi	r5, r3, 0
20019294:	e8730014 	lwi	r3, r19, 20
20019298:	e8630000 	lwi	r3, r3, 0
2001929c:	3063ffff 	addik	r3, r3, -1
200192a0:	84651800 	and	r3, r5, r3
200192a4:	64630402 	bslli	r3, r3, 2
200192a8:	10641800 	addk	r3, r4, r3
200192ac:	e8630000 	lwi	r3, r3, 0
200192b0:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200192b4:	e8730014 	lwi	r3, r19, 20
200192b8:	e883000c 	lwi	r4, r3, 12
200192bc:	e8730018 	lwi	r3, r19, 24
200192c0:	64630402 	bslli	r3, r3, 2
200192c4:	10641800 	addk	r3, r4, r3
200192c8:	e8830000 	lwi	r4, r3, 0
200192cc:	30840001 	addik	r4, r4, 1
200192d0:	f8830000 	swi	r4, r3, 0
    return value;
200192d4:	e8730004 	lwi	r3, r19, 4
}
200192d8:	10330000 	addk	r1, r19, r0
200192dc:	ea610008 	lwi	r19, r1, 8
200192e0:	ea81000c 	lwi	r20, r1, 12
200192e4:	30210010 	addik	r1, r1, 16
200192e8:	b60f0008 	rtsd	r15, 8
200192ec:	80000000 	or	r0, r0, r0

200192f0 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200192f0:	3021fff4 	addik	r1, r1, -12
200192f4:	fa610004 	swi	r19, r1, 4
200192f8:	fa810008 	swi	r20, r1, 8
200192fc:	12610000 	addk	r19, r1, r0
20019300:	96808000 	mfs	r20, rpc
20019304:	b000dffe 	imm	-8194
20019308:	3294865c 	addik	r20, r20, -31140
2001930c:	f8b30010 	swi	r5, r19, 16
20019310:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20019314:	e8730010 	lwi	r3, r19, 16
20019318:	e8830004 	lwi	r4, r3, 4
2001931c:	e8730010 	lwi	r3, r19, 16
20019320:	e8630010 	lwi	r3, r3, 16
20019324:	e8a30000 	lwi	r5, r3, 0
20019328:	e8730010 	lwi	r3, r19, 16
2001932c:	e8630000 	lwi	r3, r3, 0
20019330:	3063ffff 	addik	r3, r3, -1
20019334:	84651800 	and	r3, r5, r3
20019338:	64630402 	bslli	r3, r3, 2
2001933c:	10641800 	addk	r3, r4, r3
20019340:	e8930014 	lwi	r4, r19, 20
20019344:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20019348:	e8730010 	lwi	r3, r19, 16
2001934c:	e8630010 	lwi	r3, r3, 16
20019350:	e8830000 	lwi	r4, r3, 0
20019354:	30840001 	addik	r4, r4, 1
20019358:	f8830000 	swi	r4, r3, 0
}
2001935c:	10330000 	addk	r1, r19, r0
20019360:	ea610004 	lwi	r19, r1, 4
20019364:	ea810008 	lwi	r20, r1, 8
20019368:	3021000c 	addik	r1, r1, 12
2001936c:	b60f0008 	rtsd	r15, 8
20019370:	80000000 	or	r0, r0, r0

20019374 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20019374:	3021fff4 	addik	r1, r1, -12
20019378:	fa610004 	swi	r19, r1, 4
2001937c:	fa810008 	swi	r20, r1, 8
20019380:	12610000 	addk	r19, r1, r0
20019384:	96808000 	mfs	r20, rpc
20019388:	b000dffe 	imm	-8194
2001938c:	329485d8 	addik	r20, r20, -31272
20019390:	f8b30010 	swi	r5, r19, 16
20019394:	f8d30014 	swi	r6, r19, 20
20019398:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001939c:	e8730010 	lwi	r3, r19, 16
200193a0:	e8630010 	lwi	r3, r3, 16
200193a4:	e8830000 	lwi	r4, r3, 0
200193a8:	e8730010 	lwi	r3, r19, 16
200193ac:	e8a3000c 	lwi	r5, r3, 12
200193b0:	e8730014 	lwi	r3, r19, 20
200193b4:	64630402 	bslli	r3, r3, 2
200193b8:	10651800 	addk	r3, r5, r3
200193bc:	e8630000 	lwi	r3, r3, 0
200193c0:	14a32000 	rsubk	r5, r3, r4
200193c4:	30600001 	addik	r3, r0, 1
200193c8:	e8930018 	lwi	r4, r19, 24
200193cc:	16442803 	cmpu	r18, r4, r5
200193d0:	bcb20008 	bgei	r18, 8		// 200193d8
200193d4:	10600000 	addk	r3, r0, r0
200193d8:	a46300ff 	andi	r3, r3, 255
}
200193dc:	10330000 	addk	r1, r19, r0
200193e0:	ea610004 	lwi	r19, r1, 4
200193e4:	ea810008 	lwi	r20, r1, 8
200193e8:	3021000c 	addik	r1, r1, 12
200193ec:	b60f0008 	rtsd	r15, 8
200193f0:	80000000 	or	r0, r0, r0

200193f4 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200193f4:	3021fff4 	addik	r1, r1, -12
200193f8:	fa610004 	swi	r19, r1, 4
200193fc:	fa810008 	swi	r20, r1, 8
20019400:	12610000 	addk	r19, r1, r0
20019404:	96808000 	mfs	r20, rpc
20019408:	b000dffe 	imm	-8194
2001940c:	32948558 	addik	r20, r20, -31400
20019410:	f8b30010 	swi	r5, r19, 16
20019414:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20019418:	e8730010 	lwi	r3, r19, 16
2001941c:	e8630010 	lwi	r3, r3, 16
20019420:	e8830000 	lwi	r4, r3, 0
20019424:	e8730010 	lwi	r3, r19, 16
20019428:	e8a3000c 	lwi	r5, r3, 12
2001942c:	e8730014 	lwi	r3, r19, 20
20019430:	64630402 	bslli	r3, r3, 2
20019434:	10651800 	addk	r3, r5, r3
20019438:	e8630000 	lwi	r3, r3, 0
2001943c:	14632000 	rsubk	r3, r3, r4
}
20019440:	10330000 	addk	r1, r19, r0
20019444:	ea610004 	lwi	r19, r1, 4
20019448:	ea810008 	lwi	r20, r1, 8
2001944c:	3021000c 	addik	r1, r1, 12
20019450:	b60f0008 	rtsd	r15, 8
20019454:	80000000 	or	r0, r0, r0

20019458 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20019458:	3021fff0 	addik	r1, r1, -16
2001945c:	fa610008 	swi	r19, r1, 8
20019460:	fa81000c 	swi	r20, r1, 12
20019464:	12610000 	addk	r19, r1, r0
20019468:	96808000 	mfs	r20, rpc
2001946c:	b000dffe 	imm	-8194
20019470:	329484f4 	addik	r20, r20, -31500
20019474:	f8b30014 	swi	r5, r19, 20
20019478:	f8d30018 	swi	r6, r19, 24
2001947c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20019480:	f8130004 	swi	r0, r19, 4
20019484:	b800005c 	bri	92		// 200194e0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20019488:	e8730014 	lwi	r3, r19, 20
2001948c:	e8830000 	lwi	r4, r3, 0
20019490:	e8730014 	lwi	r3, r19, 20
20019494:	e8a3000c 	lwi	r5, r3, 12
20019498:	e8730004 	lwi	r3, r19, 4
2001949c:	64630402 	bslli	r3, r3, 2
200194a0:	10651800 	addk	r3, r5, r3
200194a4:	e8a30000 	lwi	r5, r3, 0
200194a8:	e8730014 	lwi	r3, r19, 20
200194ac:	e8630010 	lwi	r3, r3, 16
200194b0:	e8630000 	lwi	r3, r3, 0
200194b4:	14632800 	rsubk	r3, r3, r5
200194b8:	10641800 	addk	r3, r4, r3
200194bc:	30830001 	addik	r4, r3, 1
200194c0:	e873001c 	lwi	r3, r19, 28
200194c4:	16441803 	cmpu	r18, r4, r3
200194c8:	bc52000c 	blti	r18, 12		// 200194d4
            return 0;
200194cc:	10600000 	addk	r3, r0, r0
200194d0:	b8000024 	bri	36		// 200194f4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200194d4:	e8730004 	lwi	r3, r19, 4
200194d8:	30630001 	addik	r3, r3, 1
200194dc:	f8730004 	swi	r3, r19, 4
200194e0:	e8930004 	lwi	r4, r19, 4
200194e4:	e8730018 	lwi	r3, r19, 24
200194e8:	16432003 	cmpu	r18, r3, r4
200194ec:	bc52ff9c 	blti	r18, -100		// 20019488
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200194f0:	30600001 	addik	r3, r0, 1
}
200194f4:	10330000 	addk	r1, r19, r0
200194f8:	ea610008 	lwi	r19, r1, 8
200194fc:	ea81000c 	lwi	r20, r1, 12
20019500:	30210010 	addik	r1, r1, 16
20019504:	b60f0008 	rtsd	r15, 8
20019508:	80000000 	or	r0, r0, r0

2001950c <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001950c:	3021ffe8 	addik	r1, r1, -24
20019510:	fa610010 	swi	r19, r1, 16
20019514:	fa810014 	swi	r20, r1, 20
20019518:	12610000 	addk	r19, r1, r0
2001951c:	96808000 	mfs	r20, rpc
20019520:	b000dffe 	imm	-8194
20019524:	32948440 	addik	r20, r20, -31680
20019528:	f8b3001c 	swi	r5, r19, 28
2001952c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20019530:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20019534:	f8130004 	swi	r0, r19, 4
20019538:	b8000054 	bri	84		// 2001958c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001953c:	e873001c 	lwi	r3, r19, 28
20019540:	e8630010 	lwi	r3, r3, 16
20019544:	e8830000 	lwi	r4, r3, 0
20019548:	e873001c 	lwi	r3, r19, 28
2001954c:	e8a3000c 	lwi	r5, r3, 12
20019550:	e8730004 	lwi	r3, r19, 4
20019554:	64630402 	bslli	r3, r3, 2
20019558:	10651800 	addk	r3, r5, r3
2001955c:	e8630000 	lwi	r3, r3, 0
20019560:	14632000 	rsubk	r3, r3, r4
20019564:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20019568:	e8930008 	lwi	r4, r19, 8
2001956c:	e873000c 	lwi	r3, r19, 12
20019570:	16441803 	cmpu	r18, r4, r3
20019574:	bcb20008 	bgei	r18, 8		// 2001957c
20019578:	10640000 	addk	r3, r4, r0
2001957c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20019580:	e8730004 	lwi	r3, r19, 4
20019584:	30630001 	addik	r3, r3, 1
20019588:	f8730004 	swi	r3, r19, 4
2001958c:	e8930004 	lwi	r4, r19, 4
20019590:	e8730020 	lwi	r3, r19, 32
20019594:	16432003 	cmpu	r18, r3, r4
20019598:	bc52ffa4 	blti	r18, -92		// 2001953c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001959c:	e873001c 	lwi	r3, r19, 28
200195a0:	e8830000 	lwi	r4, r3, 0
200195a4:	e8730008 	lwi	r3, r19, 8
200195a8:	14632000 	rsubk	r3, r3, r4
}
200195ac:	10330000 	addk	r1, r19, r0
200195b0:	ea610010 	lwi	r19, r1, 16
200195b4:	ea810014 	lwi	r20, r1, 20
200195b8:	30210018 	addik	r1, r1, 24
200195bc:	b60f0008 	rtsd	r15, 8
200195c0:	80000000 	or	r0, r0, r0

200195c4 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200195c4:	3021fff0 	addik	r1, r1, -16
200195c8:	fa610008 	swi	r19, r1, 8
200195cc:	fa81000c 	swi	r20, r1, 12
200195d0:	12610000 	addk	r19, r1, r0
200195d4:	96808000 	mfs	r20, rpc
200195d8:	b000dffe 	imm	-8194
200195dc:	32948388 	addik	r20, r20, -31864
200195e0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200195e4:	e8730014 	lwi	r3, r19, 20
200195e8:	e8630010 	lwi	r3, r3, 16
200195ec:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200195f0:	f8130004 	swi	r0, r19, 4
200195f4:	b8000028 	bri	40		// 2001961c
        fifo->read_inds[i] = 0;
200195f8:	e8730014 	lwi	r3, r19, 20
200195fc:	e883000c 	lwi	r4, r3, 12
20019600:	e8730004 	lwi	r3, r19, 4
20019604:	64630402 	bslli	r3, r3, 2
20019608:	10641800 	addk	r3, r4, r3
2001960c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20019610:	e8730004 	lwi	r3, r19, 4
20019614:	30630001 	addik	r3, r3, 1
20019618:	f8730004 	swi	r3, r19, 4
2001961c:	e8730014 	lwi	r3, r19, 20
20019620:	e8830008 	lwi	r4, r3, 8
20019624:	e8730004 	lwi	r3, r19, 4
20019628:	16441803 	cmpu	r18, r4, r3
2001962c:	bc52ffcc 	blti	r18, -52		// 200195f8
        fifo->read_inds[i] = 0;
    }
}
20019630:	10330000 	addk	r1, r19, r0
20019634:	ea610008 	lwi	r19, r1, 8
20019638:	ea81000c 	lwi	r20, r1, 12
2001963c:	30210010 	addik	r1, r1, 16
20019640:	b60f0008 	rtsd	r15, 8
20019644:	80000000 	or	r0, r0, r0

20019648 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20019648:	3021ffec 	addik	r1, r1, -20
2001964c:	fa61000c 	swi	r19, r1, 12
20019650:	fa810010 	swi	r20, r1, 16
20019654:	12610000 	addk	r19, r1, r0
20019658:	96808000 	mfs	r20, rpc
2001965c:	b000dffe 	imm	-8194
20019660:	32948304 	addik	r20, r20, -31996
20019664:	f8b30018 	swi	r5, r19, 24
20019668:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001966c:	e8730018 	lwi	r3, r19, 24
20019670:	e8830004 	lwi	r4, r3, 4
20019674:	e8730018 	lwi	r3, r19, 24
20019678:	e8a3000c 	lwi	r5, r3, 12
2001967c:	e873001c 	lwi	r3, r19, 28
20019680:	64630402 	bslli	r3, r3, 2
20019684:	10651800 	addk	r3, r5, r3
20019688:	e8a30000 	lwi	r5, r3, 0
2001968c:	e8730018 	lwi	r3, r19, 24
20019690:	e8630000 	lwi	r3, r3, 0
20019694:	3063ffff 	addik	r3, r3, -1
20019698:	84651800 	and	r3, r5, r3
2001969c:	64630403 	bslli	r3, r3, 3
200196a0:	10641800 	addk	r3, r4, r3
200196a4:	e8830000 	lwi	r4, r3, 0
200196a8:	e8a30004 	lwi	r5, r3, 4
200196ac:	f8930004 	swi	r4, r19, 4
200196b0:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
200196b4:	e8730018 	lwi	r3, r19, 24
200196b8:	e883000c 	lwi	r4, r3, 12
200196bc:	e873001c 	lwi	r3, r19, 28
200196c0:	64630402 	bslli	r3, r3, 2
200196c4:	10641800 	addk	r3, r4, r3
200196c8:	e8830000 	lwi	r4, r3, 0
200196cc:	30840001 	addik	r4, r4, 1
200196d0:	f8830000 	swi	r4, r3, 0
    return value;
200196d4:	e8930004 	lwi	r4, r19, 4
200196d8:	e8b30008 	lwi	r5, r19, 8
}
200196dc:	10640000 	addk	r3, r4, r0
200196e0:	10850000 	addk	r4, r5, r0
200196e4:	10330000 	addk	r1, r19, r0
200196e8:	ea61000c 	lwi	r19, r1, 12
200196ec:	ea810010 	lwi	r20, r1, 16
200196f0:	30210014 	addik	r1, r1, 20
200196f4:	b60f0008 	rtsd	r15, 8
200196f8:	80000000 	or	r0, r0, r0

200196fc <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200196fc:	3021fff4 	addik	r1, r1, -12
20019700:	fa610004 	swi	r19, r1, 4
20019704:	fa810008 	swi	r20, r1, 8
20019708:	12610000 	addk	r19, r1, r0
2001970c:	96808000 	mfs	r20, rpc
20019710:	b000dffe 	imm	-8194
20019714:	32948250 	addik	r20, r20, -32176
20019718:	f8b30010 	swi	r5, r19, 16
2001971c:	f8d30014 	swi	r6, r19, 20
20019720:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20019724:	e8730010 	lwi	r3, r19, 16
20019728:	e8830004 	lwi	r4, r3, 4
2001972c:	e8730010 	lwi	r3, r19, 16
20019730:	e8630010 	lwi	r3, r3, 16
20019734:	e8a30000 	lwi	r5, r3, 0
20019738:	e8730010 	lwi	r3, r19, 16
2001973c:	e8630000 	lwi	r3, r3, 0
20019740:	3063ffff 	addik	r3, r3, -1
20019744:	84651800 	and	r3, r5, r3
20019748:	64630403 	bslli	r3, r3, 3
2001974c:	10641800 	addk	r3, r4, r3
20019750:	e8930014 	lwi	r4, r19, 20
20019754:	e8b30018 	lwi	r5, r19, 24
20019758:	f8830000 	swi	r4, r3, 0
2001975c:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20019760:	e8730010 	lwi	r3, r19, 16
20019764:	e8630010 	lwi	r3, r3, 16
20019768:	e8830000 	lwi	r4, r3, 0
2001976c:	30840001 	addik	r4, r4, 1
20019770:	f8830000 	swi	r4, r3, 0
}
20019774:	10330000 	addk	r1, r19, r0
20019778:	ea610004 	lwi	r19, r1, 4
2001977c:	ea810008 	lwi	r20, r1, 8
20019780:	3021000c 	addik	r1, r1, 12
20019784:	b60f0008 	rtsd	r15, 8
20019788:	80000000 	or	r0, r0, r0

2001978c <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001978c:	3021fff4 	addik	r1, r1, -12
20019790:	fa610004 	swi	r19, r1, 4
20019794:	fa810008 	swi	r20, r1, 8
20019798:	12610000 	addk	r19, r1, r0
2001979c:	96808000 	mfs	r20, rpc
200197a0:	b000dffe 	imm	-8194
200197a4:	329481c0 	addik	r20, r20, -32320
200197a8:	f8b30010 	swi	r5, r19, 16
200197ac:	f8d30014 	swi	r6, r19, 20
200197b0:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200197b4:	e8730010 	lwi	r3, r19, 16
200197b8:	e8630010 	lwi	r3, r3, 16
200197bc:	e8830000 	lwi	r4, r3, 0
200197c0:	e8730010 	lwi	r3, r19, 16
200197c4:	e8a3000c 	lwi	r5, r3, 12
200197c8:	e8730014 	lwi	r3, r19, 20
200197cc:	64630402 	bslli	r3, r3, 2
200197d0:	10651800 	addk	r3, r5, r3
200197d4:	e8630000 	lwi	r3, r3, 0
200197d8:	14a32000 	rsubk	r5, r3, r4
200197dc:	30600001 	addik	r3, r0, 1
200197e0:	e8930018 	lwi	r4, r19, 24
200197e4:	16442803 	cmpu	r18, r4, r5
200197e8:	bcb20008 	bgei	r18, 8		// 200197f0
200197ec:	10600000 	addk	r3, r0, r0
200197f0:	a46300ff 	andi	r3, r3, 255
}
200197f4:	10330000 	addk	r1, r19, r0
200197f8:	ea610004 	lwi	r19, r1, 4
200197fc:	ea810008 	lwi	r20, r1, 8
20019800:	3021000c 	addik	r1, r1, 12
20019804:	b60f0008 	rtsd	r15, 8
20019808:	80000000 	or	r0, r0, r0

2001980c <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001980c:	3021fff4 	addik	r1, r1, -12
20019810:	fa610004 	swi	r19, r1, 4
20019814:	fa810008 	swi	r20, r1, 8
20019818:	12610000 	addk	r19, r1, r0
2001981c:	96808000 	mfs	r20, rpc
20019820:	b000dffe 	imm	-8194
20019824:	32948140 	addik	r20, r20, -32448
20019828:	f8b30010 	swi	r5, r19, 16
2001982c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20019830:	e8730010 	lwi	r3, r19, 16
20019834:	e8630010 	lwi	r3, r3, 16
20019838:	e8830000 	lwi	r4, r3, 0
2001983c:	e8730010 	lwi	r3, r19, 16
20019840:	e8a3000c 	lwi	r5, r3, 12
20019844:	e8730014 	lwi	r3, r19, 20
20019848:	64630402 	bslli	r3, r3, 2
2001984c:	10651800 	addk	r3, r5, r3
20019850:	e8630000 	lwi	r3, r3, 0
20019854:	14632000 	rsubk	r3, r3, r4
}
20019858:	10330000 	addk	r1, r19, r0
2001985c:	ea610004 	lwi	r19, r1, 4
20019860:	ea810008 	lwi	r20, r1, 8
20019864:	3021000c 	addik	r1, r1, 12
20019868:	b60f0008 	rtsd	r15, 8
2001986c:	80000000 	or	r0, r0, r0

20019870 <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20019870:	3021fff0 	addik	r1, r1, -16
20019874:	fa610008 	swi	r19, r1, 8
20019878:	fa81000c 	swi	r20, r1, 12
2001987c:	12610000 	addk	r19, r1, r0
20019880:	96808000 	mfs	r20, rpc
20019884:	b000dffe 	imm	-8194
20019888:	329480dc 	addik	r20, r20, -32548
2001988c:	f8b30014 	swi	r5, r19, 20
20019890:	f8d30018 	swi	r6, r19, 24
20019894:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20019898:	f8130004 	swi	r0, r19, 4
2001989c:	b800005c 	bri	92		// 200198f8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200198a0:	e8730014 	lwi	r3, r19, 20
200198a4:	e8830000 	lwi	r4, r3, 0
200198a8:	e8730014 	lwi	r3, r19, 20
200198ac:	e8a3000c 	lwi	r5, r3, 12
200198b0:	e8730004 	lwi	r3, r19, 4
200198b4:	64630402 	bslli	r3, r3, 2
200198b8:	10651800 	addk	r3, r5, r3
200198bc:	e8a30000 	lwi	r5, r3, 0
200198c0:	e8730014 	lwi	r3, r19, 20
200198c4:	e8630010 	lwi	r3, r3, 16
200198c8:	e8630000 	lwi	r3, r3, 0
200198cc:	14632800 	rsubk	r3, r3, r5
200198d0:	10641800 	addk	r3, r4, r3
200198d4:	30830001 	addik	r4, r3, 1
200198d8:	e873001c 	lwi	r3, r19, 28
200198dc:	16441803 	cmpu	r18, r4, r3
200198e0:	bc52000c 	blti	r18, 12		// 200198ec
            return 0;
200198e4:	10600000 	addk	r3, r0, r0
200198e8:	b8000024 	bri	36		// 2001990c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200198ec:	e8730004 	lwi	r3, r19, 4
200198f0:	30630001 	addik	r3, r3, 1
200198f4:	f8730004 	swi	r3, r19, 4
200198f8:	e8930004 	lwi	r4, r19, 4
200198fc:	e8730018 	lwi	r3, r19, 24
20019900:	16432003 	cmpu	r18, r3, r4
20019904:	bc52ff9c 	blti	r18, -100		// 200198a0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20019908:	30600001 	addik	r3, r0, 1
}
2001990c:	10330000 	addk	r1, r19, r0
20019910:	ea610008 	lwi	r19, r1, 8
20019914:	ea81000c 	lwi	r20, r1, 12
20019918:	30210010 	addik	r1, r1, 16
2001991c:	b60f0008 	rtsd	r15, 8
20019920:	80000000 	or	r0, r0, r0

20019924 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20019924:	3021ffe8 	addik	r1, r1, -24
20019928:	fa610010 	swi	r19, r1, 16
2001992c:	fa810014 	swi	r20, r1, 20
20019930:	12610000 	addk	r19, r1, r0
20019934:	96808000 	mfs	r20, rpc
20019938:	b000dffe 	imm	-8194
2001993c:	32948028 	addik	r20, r20, -32728
20019940:	f8b3001c 	swi	r5, r19, 28
20019944:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20019948:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001994c:	f8130004 	swi	r0, r19, 4
20019950:	b8000054 	bri	84		// 200199a4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20019954:	e873001c 	lwi	r3, r19, 28
20019958:	e8630010 	lwi	r3, r3, 16
2001995c:	e8830000 	lwi	r4, r3, 0
20019960:	e873001c 	lwi	r3, r19, 28
20019964:	e8a3000c 	lwi	r5, r3, 12
20019968:	e8730004 	lwi	r3, r19, 4
2001996c:	64630402 	bslli	r3, r3, 2
20019970:	10651800 	addk	r3, r5, r3
20019974:	e8630000 	lwi	r3, r3, 0
20019978:	14632000 	rsubk	r3, r3, r4
2001997c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20019980:	e8930008 	lwi	r4, r19, 8
20019984:	e873000c 	lwi	r3, r19, 12
20019988:	16441803 	cmpu	r18, r4, r3
2001998c:	bcb20008 	bgei	r18, 8		// 20019994
20019990:	10640000 	addk	r3, r4, r0
20019994:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20019998:	e8730004 	lwi	r3, r19, 4
2001999c:	30630001 	addik	r3, r3, 1
200199a0:	f8730004 	swi	r3, r19, 4
200199a4:	e8930004 	lwi	r4, r19, 4
200199a8:	e8730020 	lwi	r3, r19, 32
200199ac:	16432003 	cmpu	r18, r3, r4
200199b0:	bc52ffa4 	blti	r18, -92		// 20019954
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200199b4:	e873001c 	lwi	r3, r19, 28
200199b8:	e8830000 	lwi	r4, r3, 0
200199bc:	e8730008 	lwi	r3, r19, 8
200199c0:	14632000 	rsubk	r3, r3, r4
}
200199c4:	10330000 	addk	r1, r19, r0
200199c8:	ea610010 	lwi	r19, r1, 16
200199cc:	ea810014 	lwi	r20, r1, 20
200199d0:	30210018 	addik	r1, r1, 24
200199d4:	b60f0008 	rtsd	r15, 8
200199d8:	80000000 	or	r0, r0, r0

200199dc <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200199dc:	3021fff0 	addik	r1, r1, -16
200199e0:	fa610008 	swi	r19, r1, 8
200199e4:	fa81000c 	swi	r20, r1, 12
200199e8:	12610000 	addk	r19, r1, r0
200199ec:	96808000 	mfs	r20, rpc
200199f0:	b000dffe 	imm	-8194
200199f4:	32947f70 	addik	r20, r20, 32624
200199f8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200199fc:	e8730014 	lwi	r3, r19, 20
20019a00:	e8630010 	lwi	r3, r3, 16
20019a04:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20019a08:	f8130004 	swi	r0, r19, 4
20019a0c:	b8000028 	bri	40		// 20019a34
        fifo->read_inds[i] = 0;
20019a10:	e8730014 	lwi	r3, r19, 20
20019a14:	e883000c 	lwi	r4, r3, 12
20019a18:	e8730004 	lwi	r3, r19, 4
20019a1c:	64630402 	bslli	r3, r3, 2
20019a20:	10641800 	addk	r3, r4, r3
20019a24:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20019a28:	e8730004 	lwi	r3, r19, 4
20019a2c:	30630001 	addik	r3, r3, 1
20019a30:	f8730004 	swi	r3, r19, 4
20019a34:	e8730014 	lwi	r3, r19, 20
20019a38:	e8830008 	lwi	r4, r3, 8
20019a3c:	e8730004 	lwi	r3, r19, 4
20019a40:	16441803 	cmpu	r18, r4, r3
20019a44:	bc52ffcc 	blti	r18, -52		// 20019a10
        fifo->read_inds[i] = 0;
    }
}
20019a48:	10330000 	addk	r1, r19, r0
20019a4c:	ea610008 	lwi	r19, r1, 8
20019a50:	ea81000c 	lwi	r20, r1, 12
20019a54:	30210010 	addik	r1, r1, 16
20019a58:	b60f0008 	rtsd	r15, 8
20019a5c:	80000000 	or	r0, r0, r0

20019a60 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20019a60:	3021fff0 	addik	r1, r1, -16
20019a64:	fa610008 	swi	r19, r1, 8
20019a68:	fa81000c 	swi	r20, r1, 12
20019a6c:	12610000 	addk	r19, r1, r0
20019a70:	96808000 	mfs	r20, rpc
20019a74:	b000dffe 	imm	-8194
20019a78:	32947eec 	addik	r20, r20, 32492
20019a7c:	f8b30014 	swi	r5, r19, 20
20019a80:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20019a84:	e8730014 	lwi	r3, r19, 20
20019a88:	e8830004 	lwi	r4, r3, 4
20019a8c:	e8730014 	lwi	r3, r19, 20
20019a90:	e8a3000c 	lwi	r5, r3, 12
20019a94:	e8730018 	lwi	r3, r19, 24
20019a98:	64630402 	bslli	r3, r3, 2
20019a9c:	10651800 	addk	r3, r5, r3
20019aa0:	e8a30000 	lwi	r5, r3, 0
20019aa4:	e8730014 	lwi	r3, r19, 20
20019aa8:	e8630000 	lwi	r3, r3, 0
20019aac:	3063ffff 	addik	r3, r3, -1
20019ab0:	84651800 	and	r3, r5, r3
20019ab4:	64630402 	bslli	r3, r3, 2
20019ab8:	10641800 	addk	r3, r4, r3
20019abc:	e8630000 	lwi	r3, r3, 0
20019ac0:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20019ac4:	e8730014 	lwi	r3, r19, 20
20019ac8:	e883000c 	lwi	r4, r3, 12
20019acc:	e8730018 	lwi	r3, r19, 24
20019ad0:	64630402 	bslli	r3, r3, 2
20019ad4:	10641800 	addk	r3, r4, r3
20019ad8:	e8830000 	lwi	r4, r3, 0
20019adc:	30840001 	addik	r4, r4, 1
20019ae0:	f8830000 	swi	r4, r3, 0
    return value;
20019ae4:	e8730004 	lwi	r3, r19, 4
}
20019ae8:	10330000 	addk	r1, r19, r0
20019aec:	ea610008 	lwi	r19, r1, 8
20019af0:	ea81000c 	lwi	r20, r1, 12
20019af4:	30210010 	addik	r1, r1, 16
20019af8:	b60f0008 	rtsd	r15, 8
20019afc:	80000000 	or	r0, r0, r0

20019b00 <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20019b00:	3021fff4 	addik	r1, r1, -12
20019b04:	fa610004 	swi	r19, r1, 4
20019b08:	fa810008 	swi	r20, r1, 8
20019b0c:	12610000 	addk	r19, r1, r0
20019b10:	96808000 	mfs	r20, rpc
20019b14:	b000dffe 	imm	-8194
20019b18:	32947e4c 	addik	r20, r20, 32332
20019b1c:	f8b30010 	swi	r5, r19, 16
20019b20:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20019b24:	e8730010 	lwi	r3, r19, 16
20019b28:	e8830004 	lwi	r4, r3, 4
20019b2c:	e8730010 	lwi	r3, r19, 16
20019b30:	e8630010 	lwi	r3, r3, 16
20019b34:	e8a30000 	lwi	r5, r3, 0
20019b38:	e8730010 	lwi	r3, r19, 16
20019b3c:	e8630000 	lwi	r3, r3, 0
20019b40:	3063ffff 	addik	r3, r3, -1
20019b44:	84651800 	and	r3, r5, r3
20019b48:	64630402 	bslli	r3, r3, 2
20019b4c:	10641800 	addk	r3, r4, r3
20019b50:	e8930014 	lwi	r4, r19, 20
20019b54:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20019b58:	e8730010 	lwi	r3, r19, 16
20019b5c:	e8630010 	lwi	r3, r3, 16
20019b60:	e8830000 	lwi	r4, r3, 0
20019b64:	30840001 	addik	r4, r4, 1
20019b68:	f8830000 	swi	r4, r3, 0
}
20019b6c:	10330000 	addk	r1, r19, r0
20019b70:	ea610004 	lwi	r19, r1, 4
20019b74:	ea810008 	lwi	r20, r1, 8
20019b78:	3021000c 	addik	r1, r1, 12
20019b7c:	b60f0008 	rtsd	r15, 8
20019b80:	80000000 	or	r0, r0, r0

20019b84 <read_RUN>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_RUN() {
20019b84:	3021ffdc 	addik	r1, r1, -36
20019b88:	f9e10000 	swi	r15, r1, 0
20019b8c:	fa61001c 	swi	r19, r1, 28
20019b90:	fa810020 	swi	r20, r1, 32
20019b94:	12610000 	addk	r19, r1, r0
20019b98:	96808000 	mfs	r20, rpc
20019b9c:	b000dffe 	imm	-8194
20019ba0:	32947dc4 	addik	r20, r20, 32196
		index_RUN = decoder_parser_blkexp_RUN->read_inds[0];
20019ba4:	b0000000 	imm	0
20019ba8:	e8740298 	lwi	r3, r20, 664
20019bac:	e8630000 	lwi	r3, r3, 0
20019bb0:	e863000c 	lwi	r3, r3, 12
20019bb4:	e8830000 	lwi	r4, r3, 0
20019bb8:	b0000000 	imm	0
20019bbc:	e87402a8 	lwi	r3, r20, 680
20019bc0:	f8830000 	swi	r4, r3, 0
		numTokens_RUN = index_RUN + fifo_i8_get_num_tokens(decoder_parser_blkexp_RUN, 0);
20019bc4:	b0000000 	imm	0
20019bc8:	e8740298 	lwi	r3, r20, 664
20019bcc:	e8630000 	lwi	r3, r3, 0
20019bd0:	10a30000 	addk	r5, r3, r0
20019bd4:	10c00000 	addk	r6, r0, r0
20019bd8:	b0000000 	imm	0
20019bdc:	e8940288 	lwi	r4, r20, 648
20019be0:	99fc2000 	brald	r15, r4
20019be4:	80000000 	or	r0, r0, r0
20019be8:	10830000 	addk	r4, r3, r0
20019bec:	b0000000 	imm	0
20019bf0:	e87402a8 	lwi	r3, r20, 680
20019bf4:	e8630000 	lwi	r3, r3, 0
20019bf8:	10841800 	addk	r4, r4, r3
20019bfc:	b0000000 	imm	0
20019c00:	e87402ac 	lwi	r3, r20, 684
20019c04:	f8830000 	swi	r4, r3, 0
	}
20019c08:	e9e10000 	lwi	r15, r1, 0
20019c0c:	10330000 	addk	r1, r19, r0
20019c10:	ea61001c 	lwi	r19, r1, 28
20019c14:	ea810020 	lwi	r20, r1, 32
20019c18:	30210024 	addik	r1, r1, 36
20019c1c:	b60f0008 	rtsd	r15, 8
20019c20:	80000000 	or	r0, r0, r0

20019c24 <read_end_RUN>:
	
	static void read_end_RUN() {
20019c24:	3021fff4 	addik	r1, r1, -12
20019c28:	fa610004 	swi	r19, r1, 4
20019c2c:	fa810008 	swi	r20, r1, 8
20019c30:	12610000 	addk	r19, r1, r0
20019c34:	96808000 	mfs	r20, rpc
20019c38:	b000dffe 	imm	-8194
20019c3c:	32947d28 	addik	r20, r20, 32040
		decoder_parser_blkexp_RUN->read_inds[0] = index_RUN;
20019c40:	b0000000 	imm	0
20019c44:	e8740298 	lwi	r3, r20, 664
20019c48:	e8630000 	lwi	r3, r3, 0
20019c4c:	e863000c 	lwi	r3, r3, 12
20019c50:	b0000000 	imm	0
20019c54:	e89402a8 	lwi	r4, r20, 680
20019c58:	e8840000 	lwi	r4, r4, 0
20019c5c:	f8830000 	swi	r4, r3, 0
	}
20019c60:	10330000 	addk	r1, r19, r0
20019c64:	ea610004 	lwi	r19, r1, 4
20019c68:	ea810008 	lwi	r20, r1, 8
20019c6c:	3021000c 	addik	r1, r1, 12
20019c70:	b60f0008 	rtsd	r15, 8
20019c74:	80000000 	or	r0, r0, r0

20019c78 <read_VALUE>:
	static void read_VALUE() {
20019c78:	3021ffdc 	addik	r1, r1, -36
20019c7c:	f9e10000 	swi	r15, r1, 0
20019c80:	fa61001c 	swi	r19, r1, 28
20019c84:	fa810020 	swi	r20, r1, 32
20019c88:	12610000 	addk	r19, r1, r0
20019c8c:	96808000 	mfs	r20, rpc
20019c90:	b000dffe 	imm	-8194
20019c94:	32947cd0 	addik	r20, r20, 31952
		index_VALUE = decoder_parser_blkexp_VALUE->read_inds[0];
20019c98:	b0000000 	imm	0
20019c9c:	e87402a0 	lwi	r3, r20, 672
20019ca0:	e8630000 	lwi	r3, r3, 0
20019ca4:	e863000c 	lwi	r3, r3, 12
20019ca8:	e8830000 	lwi	r4, r3, 0
20019cac:	b0000000 	imm	0
20019cb0:	e87402b0 	lwi	r3, r20, 688
20019cb4:	f8830000 	swi	r4, r3, 0
		numTokens_VALUE = index_VALUE + fifo_i16_get_num_tokens(decoder_parser_blkexp_VALUE, 0);
20019cb8:	b0000000 	imm	0
20019cbc:	e87402a0 	lwi	r3, r20, 672
20019cc0:	e8630000 	lwi	r3, r3, 0
20019cc4:	10a30000 	addk	r5, r3, r0
20019cc8:	10c00000 	addk	r6, r0, r0
20019ccc:	b0000000 	imm	0
20019cd0:	e894028c 	lwi	r4, r20, 652
20019cd4:	99fc2000 	brald	r15, r4
20019cd8:	80000000 	or	r0, r0, r0
20019cdc:	10830000 	addk	r4, r3, r0
20019ce0:	b0000000 	imm	0
20019ce4:	e87402b0 	lwi	r3, r20, 688
20019ce8:	e8630000 	lwi	r3, r3, 0
20019cec:	10841800 	addk	r4, r4, r3
20019cf0:	b0000000 	imm	0
20019cf4:	e87402b4 	lwi	r3, r20, 692
20019cf8:	f8830000 	swi	r4, r3, 0
	}
20019cfc:	e9e10000 	lwi	r15, r1, 0
20019d00:	10330000 	addk	r1, r19, r0
20019d04:	ea61001c 	lwi	r19, r1, 28
20019d08:	ea810020 	lwi	r20, r1, 32
20019d0c:	30210024 	addik	r1, r1, 36
20019d10:	b60f0008 	rtsd	r15, 8
20019d14:	80000000 	or	r0, r0, r0

20019d18 <read_end_VALUE>:
	
	static void read_end_VALUE() {
20019d18:	3021fff4 	addik	r1, r1, -12
20019d1c:	fa610004 	swi	r19, r1, 4
20019d20:	fa810008 	swi	r20, r1, 8
20019d24:	12610000 	addk	r19, r1, r0
20019d28:	96808000 	mfs	r20, rpc
20019d2c:	b000dffe 	imm	-8194
20019d30:	32947c34 	addik	r20, r20, 31796
		decoder_parser_blkexp_VALUE->read_inds[0] = index_VALUE;
20019d34:	b0000000 	imm	0
20019d38:	e87402a0 	lwi	r3, r20, 672
20019d3c:	e8630000 	lwi	r3, r3, 0
20019d40:	e863000c 	lwi	r3, r3, 12
20019d44:	b0000000 	imm	0
20019d48:	e89402b0 	lwi	r4, r20, 688
20019d4c:	e8840000 	lwi	r4, r4, 0
20019d50:	f8830000 	swi	r4, r3, 0
	}
20019d54:	10330000 	addk	r1, r19, r0
20019d58:	ea610004 	lwi	r19, r1, 4
20019d5c:	ea810008 	lwi	r20, r1, 8
20019d60:	3021000c 	addik	r1, r1, 12
20019d64:	b60f0008 	rtsd	r15, 8
20019d68:	80000000 	or	r0, r0, r0

20019d6c <read_LAST>:
	static void read_LAST() {
20019d6c:	3021ffdc 	addik	r1, r1, -36
20019d70:	f9e10000 	swi	r15, r1, 0
20019d74:	fa61001c 	swi	r19, r1, 28
20019d78:	fa810020 	swi	r20, r1, 32
20019d7c:	12610000 	addk	r19, r1, r0
20019d80:	96808000 	mfs	r20, rpc
20019d84:	b000dffe 	imm	-8194
20019d88:	32947bdc 	addik	r20, r20, 31708
		index_LAST = decoder_parser_blkexp_LAST->read_inds[0];
20019d8c:	b0000000 	imm	0
20019d90:	e874029c 	lwi	r3, r20, 668
20019d94:	e8630000 	lwi	r3, r3, 0
20019d98:	e863000c 	lwi	r3, r3, 12
20019d9c:	e8830000 	lwi	r4, r3, 0
20019da0:	b0000000 	imm	0
20019da4:	e87402b8 	lwi	r3, r20, 696
20019da8:	f8830000 	swi	r4, r3, 0
		numTokens_LAST = index_LAST + fifo_i32_get_num_tokens(decoder_parser_blkexp_LAST, 0);
20019dac:	b0000000 	imm	0
20019db0:	e874029c 	lwi	r3, r20, 668
20019db4:	e8630000 	lwi	r3, r3, 0
20019db8:	10a30000 	addk	r5, r3, r0
20019dbc:	10c00000 	addk	r6, r0, r0
20019dc0:	b0000000 	imm	0
20019dc4:	e8940294 	lwi	r4, r20, 660
20019dc8:	99fc2000 	brald	r15, r4
20019dcc:	80000000 	or	r0, r0, r0
20019dd0:	10830000 	addk	r4, r3, r0
20019dd4:	b0000000 	imm	0
20019dd8:	e87402b8 	lwi	r3, r20, 696
20019ddc:	e8630000 	lwi	r3, r3, 0
20019de0:	10841800 	addk	r4, r4, r3
20019de4:	b0000000 	imm	0
20019de8:	e87402bc 	lwi	r3, r20, 700
20019dec:	f8830000 	swi	r4, r3, 0
	}
20019df0:	e9e10000 	lwi	r15, r1, 0
20019df4:	10330000 	addk	r1, r19, r0
20019df8:	ea61001c 	lwi	r19, r1, 28
20019dfc:	ea810020 	lwi	r20, r1, 32
20019e00:	30210024 	addik	r1, r1, 36
20019e04:	b60f0008 	rtsd	r15, 8
20019e08:	80000000 	or	r0, r0, r0

20019e0c <read_end_LAST>:
	
	static void read_end_LAST() {
20019e0c:	3021fff4 	addik	r1, r1, -12
20019e10:	fa610004 	swi	r19, r1, 4
20019e14:	fa810008 	swi	r20, r1, 8
20019e18:	12610000 	addk	r19, r1, r0
20019e1c:	96808000 	mfs	r20, rpc
20019e20:	b000dffe 	imm	-8194
20019e24:	32947b40 	addik	r20, r20, 31552
		decoder_parser_blkexp_LAST->read_inds[0] = index_LAST;
20019e28:	b0000000 	imm	0
20019e2c:	e874029c 	lwi	r3, r20, 668
20019e30:	e8630000 	lwi	r3, r3, 0
20019e34:	e863000c 	lwi	r3, r3, 12
20019e38:	b0000000 	imm	0
20019e3c:	e89402b8 	lwi	r4, r20, 696
20019e40:	e8840000 	lwi	r4, r4, 0
20019e44:	f8830000 	swi	r4, r3, 0
	}
20019e48:	10330000 	addk	r1, r19, r0
20019e4c:	ea610004 	lwi	r19, r1, 4
20019e50:	ea810008 	lwi	r20, r1, 8
20019e54:	3021000c 	addik	r1, r1, 12
20019e58:	b60f0008 	rtsd	r15, 8
20019e5c:	80000000 	or	r0, r0, r0

20019e60 <write_QFS>:

	static void write_QFS() {
20019e60:	3021ffdc 	addik	r1, r1, -36
20019e64:	f9e10000 	swi	r15, r1, 0
20019e68:	fa61001c 	swi	r19, r1, 28
20019e6c:	fa810020 	swi	r20, r1, 32
20019e70:	12610000 	addk	r19, r1, r0
20019e74:	96808000 	mfs	r20, rpc
20019e78:	b000dffe 	imm	-8194
20019e7c:	32947ae8 	addik	r20, r20, 31464
		index_QFS = (*decoder_parser_blkexp_QFS->write_ind);
20019e80:	b0000000 	imm	0
20019e84:	e87402a4 	lwi	r3, r20, 676
20019e88:	e8630000 	lwi	r3, r3, 0
20019e8c:	e8630010 	lwi	r3, r3, 16
20019e90:	e8830000 	lwi	r4, r3, 0
20019e94:	b0000000 	imm	0
20019e98:	e87402c0 	lwi	r3, r20, 704
20019e9c:	f8830000 	swi	r4, r3, 0
		numFree_QFS = index_QFS + fifo_i16_get_room(decoder_parser_blkexp_QFS, NUM_READERS_QFS);
20019ea0:	b0000000 	imm	0
20019ea4:	e87402a4 	lwi	r3, r20, 676
20019ea8:	e8630000 	lwi	r3, r3, 0
20019eac:	10a30000 	addk	r5, r3, r0
20019eb0:	30c00001 	addik	r6, r0, 1
20019eb4:	b0000000 	imm	0
20019eb8:	e8940290 	lwi	r4, r20, 656
20019ebc:	99fc2000 	brald	r15, r4
20019ec0:	80000000 	or	r0, r0, r0
20019ec4:	10830000 	addk	r4, r3, r0
20019ec8:	b0000000 	imm	0
20019ecc:	e87402c0 	lwi	r3, r20, 704
20019ed0:	e8630000 	lwi	r3, r3, 0
20019ed4:	10841800 	addk	r4, r4, r3
20019ed8:	b0000000 	imm	0
20019edc:	e87402c4 	lwi	r3, r20, 708
20019ee0:	f8830000 	swi	r4, r3, 0
	}
20019ee4:	e9e10000 	lwi	r15, r1, 0
20019ee8:	10330000 	addk	r1, r19, r0
20019eec:	ea61001c 	lwi	r19, r1, 28
20019ef0:	ea810020 	lwi	r20, r1, 32
20019ef4:	30210024 	addik	r1, r1, 36
20019ef8:	b60f0008 	rtsd	r15, 8
20019efc:	80000000 	or	r0, r0, r0

20019f00 <write_end_QFS>:
	
	static void write_end_QFS() {
20019f00:	3021fff4 	addik	r1, r1, -12
20019f04:	fa610004 	swi	r19, r1, 4
20019f08:	fa810008 	swi	r20, r1, 8
20019f0c:	12610000 	addk	r19, r1, r0
20019f10:	96808000 	mfs	r20, rpc
20019f14:	b000dffe 	imm	-8194
20019f18:	32947a4c 	addik	r20, r20, 31308
		(*decoder_parser_blkexp_QFS->write_ind) = index_QFS;
20019f1c:	b0000000 	imm	0
20019f20:	e87402a4 	lwi	r3, r20, 676
20019f24:	e8630000 	lwi	r3, r3, 0
20019f28:	e8630010 	lwi	r3, r3, 16
20019f2c:	b0000000 	imm	0
20019f30:	e89402c0 	lwi	r4, r20, 704
20019f34:	e8840000 	lwi	r4, r4, 0
20019f38:	f8830000 	swi	r4, r3, 0
	}
20019f3c:	10330000 	addk	r1, r19, r0
20019f40:	ea610004 	lwi	r19, r1, 4
20019f44:	ea810008 	lwi	r20, r1, 8
20019f48:	3021000c 	addik	r1, r1, 12
20019f4c:	b60f0008 	rtsd	r15, 8
20019f50:	80000000 	or	r0, r0, r0

20019f54 <isSchedulable_start>:
	// Functions/procedures


	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_start() {
20019f54:	3021fff0 	addik	r1, r1, -16
20019f58:	fa610008 	swi	r19, r1, 8
20019f5c:	fa81000c 	swi	r20, r1, 12
20019f60:	12610000 	addk	r19, r1, r0
20019f64:	96808000 	mfs	r20, rpc
20019f68:	b000dffe 	imm	-8194
20019f6c:	329479f8 	addik	r20, r20, 31224
		i32 result;
	
		result = 1;
20019f70:	30600001 	addik	r3, r0, 1
20019f74:	f8730004 	swi	r3, r19, 4
		return result;
20019f78:	e8730004 	lwi	r3, r19, 4
	}
20019f7c:	10330000 	addk	r1, r19, r0
20019f80:	ea610008 	lwi	r19, r1, 8
20019f84:	ea81000c 	lwi	r20, r1, 12
20019f88:	30210010 	addik	r1, r1, 16
20019f8c:	b60f0008 	rtsd	r15, 8
20019f90:	80000000 	or	r0, r0, r0

20019f94 <start>:
	
	static void start() {
20019f94:	3021fff0 	addik	r1, r1, -16
20019f98:	fa610008 	swi	r19, r1, 8
20019f9c:	fa81000c 	swi	r20, r1, 12
20019fa0:	12610000 	addk	r19, r1, r0
20019fa4:	96808000 	mfs	r20, rpc
20019fa8:	b000dffe 	imm	-8194
20019fac:	329479b8 	addik	r20, r20, 31160
	
		// Compute aligned port indexes
	
		i32 i;
	
		i = 0;
20019fb0:	f8130004 	swi	r0, r19, 4
		while (i <= 63) {
20019fb4:	b8000028 	bri	40		// 20019fdc
			qfs[i] = 0;
20019fb8:	b0000000 	imm	0
20019fbc:	e89402cc 	lwi	r4, r20, 716
20019fc0:	e8730004 	lwi	r3, r19, 4
20019fc4:	10631800 	addk	r3, r3, r3
20019fc8:	10641800 	addk	r3, r4, r3
20019fcc:	f4030000 	shi	r0, r3, 0
			i = i + 1;
20019fd0:	e8730004 	lwi	r3, r19, 4
20019fd4:	30630001 	addik	r3, r3, 1
20019fd8:	f8730004 	swi	r3, r19, 4
		// Compute aligned port indexes
	
		i32 i;
	
		i = 0;
		while (i <= 63) {
20019fdc:	e8930004 	lwi	r4, r19, 4
20019fe0:	3060003f 	addik	r3, r0, 63
20019fe4:	16441801 	cmp	r18, r4, r3
20019fe8:	bcb2ffd0 	bgei	r18, -48		// 20019fb8
			qfs[i] = 0;
			i = i + 1;
		}
		count = 0;
20019fec:	b0000000 	imm	0
20019ff0:	e87402c8 	lwi	r3, r20, 712
20019ff4:	f0030000 	sbi	r0, r3, 0
	
		// Update ports indexes
		
	}
20019ff8:	10330000 	addk	r1, r19, r0
20019ffc:	ea610008 	lwi	r19, r1, 8
2001a000:	ea81000c 	lwi	r20, r1, 12
2001a004:	30210010 	addik	r1, r1, 16
2001a008:	b60f0008 	rtsd	r15, 8
2001a00c:	80000000 	or	r0, r0, r0

2001a010 <isSchedulable_last>:
	static i32 isSchedulable_last() {
2001a010:	3021ffec 	addik	r1, r1, -20
2001a014:	fa61000c 	swi	r19, r1, 12
2001a018:	fa810010 	swi	r20, r1, 16
2001a01c:	12610000 	addk	r19, r1, r0
2001a020:	96808000 	mfs	r20, rpc
2001a024:	b000dffe 	imm	-8194
2001a028:	3294793c 	addik	r20, r20, 31036
		i32 result;
		i32 last;
	
		last = tokens_LAST[(index_LAST + (0)) % SIZE_LAST];
2001a02c:	b0000000 	imm	0
2001a030:	e874029c 	lwi	r3, r20, 668
2001a034:	e8630000 	lwi	r3, r3, 0
2001a038:	e8830004 	lwi	r4, r3, 4
2001a03c:	b0000000 	imm	0
2001a040:	e87402b8 	lwi	r3, r20, 696
2001a044:	e8630000 	lwi	r3, r3, 0
2001a048:	a46301ff 	andi	r3, r3, 511
2001a04c:	64630402 	bslli	r3, r3, 2
2001a050:	10641800 	addk	r3, r4, r3
2001a054:	e8630000 	lwi	r3, r3, 0
2001a058:	f8730004 	swi	r3, r19, 4
		result = last;
2001a05c:	e8730004 	lwi	r3, r19, 4
2001a060:	f8730008 	swi	r3, r19, 8
		return result;
2001a064:	e8730008 	lwi	r3, r19, 8
	}
2001a068:	10330000 	addk	r1, r19, r0
2001a06c:	ea61000c 	lwi	r19, r1, 12
2001a070:	ea810010 	lwi	r20, r1, 16
2001a074:	30210014 	addik	r1, r1, 20
2001a078:	b60f0008 	rtsd	r15, 8
2001a07c:	80000000 	or	r0, r0, r0

2001a080 <last>:
	
	static void last() {
2001a080:	3021ffbc 	addik	r1, r1, -68
2001a084:	f9e10000 	swi	r15, r1, 0
2001a088:	fa61003c 	swi	r19, r1, 60
2001a08c:	fa810040 	swi	r20, r1, 64
2001a090:	12610000 	addk	r19, r1, r0
2001a094:	96808000 	mfs	r20, rpc
2001a098:	b000dffe 	imm	-8194
2001a09c:	329478c8 	addik	r20, r20, 30920
	
		// Compute aligned port indexes
		i32 index_aligned_RUN = index_RUN % SIZE_RUN;
2001a0a0:	b0000000 	imm	0
2001a0a4:	e87402a8 	lwi	r3, r20, 680
2001a0a8:	e8630000 	lwi	r3, r3, 0
2001a0ac:	a46301ff 	andi	r3, r3, 511
2001a0b0:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_VALUE = index_VALUE % SIZE_VALUE;
2001a0b4:	b0000000 	imm	0
2001a0b8:	e87402b0 	lwi	r3, r20, 688
2001a0bc:	e8630000 	lwi	r3, r3, 0
2001a0c0:	a46301ff 	andi	r3, r3, 511
2001a0c4:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_LAST = index_LAST % SIZE_LAST;
2001a0c8:	b0000000 	imm	0
2001a0cc:	e87402b8 	lwi	r3, r20, 696
2001a0d0:	e8630000 	lwi	r3, r3, 0
2001a0d4:	a46301ff 	andi	r3, r3, 511
2001a0d8:	f8730028 	swi	r3, r19, 40
		i32 index_aligned_QFS = index_QFS % SIZE_QFS;
2001a0dc:	b0000000 	imm	0
2001a0e0:	e87402c0 	lwi	r3, r20, 704
2001a0e4:	e8630000 	lwi	r3, r3, 0
2001a0e8:	a46301ff 	andi	r3, r3, 511
2001a0ec:	f873002c 	swi	r3, r19, 44
		i32 last;
		i8 local_count;
		i32 idx_qfs;
		i16 local_qfs;
	
		run = tokens_RUN[(index_RUN + (0)) % SIZE_RUN];
2001a0f0:	b0000000 	imm	0
2001a0f4:	e8740298 	lwi	r3, r20, 664
2001a0f8:	e8630000 	lwi	r3, r3, 0
2001a0fc:	e8830004 	lwi	r4, r3, 4
2001a100:	b0000000 	imm	0
2001a104:	e87402a8 	lwi	r3, r20, 680
2001a108:	e8630000 	lwi	r3, r3, 0
2001a10c:	a46301ff 	andi	r3, r3, 511
2001a110:	10641800 	addk	r3, r4, r3
2001a114:	e0630000 	lbui	r3, r3, 0
2001a118:	f0730030 	sbi	r3, r19, 48
		value = tokens_VALUE[(index_VALUE + (0)) % SIZE_VALUE];
2001a11c:	b0000000 	imm	0
2001a120:	e87402a0 	lwi	r3, r20, 672
2001a124:	e8630000 	lwi	r3, r3, 0
2001a128:	e8830004 	lwi	r4, r3, 4
2001a12c:	b0000000 	imm	0
2001a130:	e87402b0 	lwi	r3, r20, 688
2001a134:	e8630000 	lwi	r3, r3, 0
2001a138:	a46301ff 	andi	r3, r3, 511
2001a13c:	10631800 	addk	r3, r3, r3
2001a140:	10641800 	addk	r3, r4, r3
2001a144:	e4630000 	lhui	r3, r3, 0
2001a148:	f4730032 	shi	r3, r19, 50
		last = tokens_LAST[(index_LAST + (0)) % SIZE_LAST];
2001a14c:	b0000000 	imm	0
2001a150:	e874029c 	lwi	r3, r20, 668
2001a154:	e8630000 	lwi	r3, r3, 0
2001a158:	e8830004 	lwi	r4, r3, 4
2001a15c:	b0000000 	imm	0
2001a160:	e87402b8 	lwi	r3, r20, 696
2001a164:	e8630000 	lwi	r3, r3, 0
2001a168:	a46301ff 	andi	r3, r3, 511
2001a16c:	64630402 	bslli	r3, r3, 2
2001a170:	10641800 	addk	r3, r4, r3
2001a174:	e8630000 	lwi	r3, r3, 0
2001a178:	f8730034 	swi	r3, r19, 52
		local_count = count;
2001a17c:	b0000000 	imm	0
2001a180:	e87402c8 	lwi	r3, r20, 712
2001a184:	e0630000 	lbui	r3, r3, 0
2001a188:	f0730038 	sbi	r3, r19, 56
		qfs[local_count + run] = value;
2001a18c:	e0730038 	lbui	r3, r19, 56
2001a190:	90830060 	sext8	r4, r3
2001a194:	e0730030 	lbui	r3, r19, 48
2001a198:	90630060 	sext8	r3, r3
2001a19c:	10641800 	addk	r3, r4, r3
2001a1a0:	b0000000 	imm	0
2001a1a4:	e89402cc 	lwi	r4, r20, 716
2001a1a8:	10631800 	addk	r3, r3, r3
2001a1ac:	10641800 	addk	r3, r4, r3
2001a1b0:	e4930032 	lhui	r4, r19, 50
2001a1b4:	f4830000 	shi	r4, r3, 0
		idx_qfs = 0;
2001a1b8:	f813001c 	swi	r0, r19, 28
		while (idx_qfs < 64) {
2001a1bc:	b8000064 	bri	100		// 2001a220
			local_qfs = qfs[idx_qfs];
2001a1c0:	b0000000 	imm	0
2001a1c4:	e89402cc 	lwi	r4, r20, 716
2001a1c8:	e873001c 	lwi	r3, r19, 28
2001a1cc:	10631800 	addk	r3, r3, r3
2001a1d0:	10641800 	addk	r3, r4, r3
2001a1d4:	e4630000 	lhui	r3, r3, 0
2001a1d8:	f473003a 	shi	r3, r19, 58
			tokens_QFS[(index_QFS + (idx_qfs)) % SIZE_QFS] = local_qfs;
2001a1dc:	b0000000 	imm	0
2001a1e0:	e87402a4 	lwi	r3, r20, 676
2001a1e4:	e8630000 	lwi	r3, r3, 0
2001a1e8:	e8830004 	lwi	r4, r3, 4
2001a1ec:	b0000000 	imm	0
2001a1f0:	e87402c0 	lwi	r3, r20, 704
2001a1f4:	e8a30000 	lwi	r5, r3, 0
2001a1f8:	e873001c 	lwi	r3, r19, 28
2001a1fc:	10651800 	addk	r3, r5, r3
2001a200:	a46301ff 	andi	r3, r3, 511
2001a204:	10631800 	addk	r3, r3, r3
2001a208:	10641800 	addk	r3, r4, r3
2001a20c:	e493003a 	lhui	r4, r19, 58
2001a210:	f4830000 	shi	r4, r3, 0
			idx_qfs = idx_qfs + 1;
2001a214:	e873001c 	lwi	r3, r19, 28
2001a218:	30630001 	addik	r3, r3, 1
2001a21c:	f873001c 	swi	r3, r19, 28
		value = tokens_VALUE[(index_VALUE + (0)) % SIZE_VALUE];
		last = tokens_LAST[(index_LAST + (0)) % SIZE_LAST];
		local_count = count;
		qfs[local_count + run] = value;
		idx_qfs = 0;
		while (idx_qfs < 64) {
2001a220:	e893001c 	lwi	r4, r19, 28
2001a224:	3060003f 	addik	r3, r0, 63
2001a228:	16441801 	cmp	r18, r4, r3
2001a22c:	bcb2ff94 	bgei	r18, -108		// 2001a1c0
			tokens_QFS[(index_QFS + (idx_qfs)) % SIZE_QFS] = local_qfs;
			idx_qfs = idx_qfs + 1;
		}
	
		// Update ports indexes
		index_RUN += 1;
2001a230:	b0000000 	imm	0
2001a234:	e87402a8 	lwi	r3, r20, 680
2001a238:	e8630000 	lwi	r3, r3, 0
2001a23c:	30830001 	addik	r4, r3, 1
2001a240:	b0000000 	imm	0
2001a244:	e87402a8 	lwi	r3, r20, 680
2001a248:	f8830000 	swi	r4, r3, 0
		index_VALUE += 1;
2001a24c:	b0000000 	imm	0
2001a250:	e87402b0 	lwi	r3, r20, 688
2001a254:	e8630000 	lwi	r3, r3, 0
2001a258:	30830001 	addik	r4, r3, 1
2001a25c:	b0000000 	imm	0
2001a260:	e87402b0 	lwi	r3, r20, 688
2001a264:	f8830000 	swi	r4, r3, 0
		index_LAST += 1;
2001a268:	b0000000 	imm	0
2001a26c:	e87402b8 	lwi	r3, r20, 696
2001a270:	e8630000 	lwi	r3, r3, 0
2001a274:	30830001 	addik	r4, r3, 1
2001a278:	b0000000 	imm	0
2001a27c:	e87402b8 	lwi	r3, r20, 696
2001a280:	f8830000 	swi	r4, r3, 0
		index_QFS += 64;
2001a284:	b0000000 	imm	0
2001a288:	e87402c0 	lwi	r3, r20, 704
2001a28c:	e8630000 	lwi	r3, r3, 0
2001a290:	30830040 	addik	r4, r3, 64
2001a294:	b0000000 	imm	0
2001a298:	e87402c0 	lwi	r3, r20, 704
2001a29c:	f8830000 	swi	r4, r3, 0
		
		read_end_RUN();
2001a2a0:	b0000000 	imm	0
2001a2a4:	e87402dc 	lwi	r3, r20, 732
2001a2a8:	99fc1800 	brald	r15, r3
2001a2ac:	80000000 	or	r0, r0, r0
		read_end_VALUE();
2001a2b0:	b0000000 	imm	0
2001a2b4:	e87402e4 	lwi	r3, r20, 740
2001a2b8:	99fc1800 	brald	r15, r3
2001a2bc:	80000000 	or	r0, r0, r0
		read_end_LAST();
2001a2c0:	b0000000 	imm	0
2001a2c4:	e87402ec 	lwi	r3, r20, 748
2001a2c8:	99fc1800 	brald	r15, r3
2001a2cc:	80000000 	or	r0, r0, r0
		write_end_QFS();
2001a2d0:	b0000000 	imm	0
2001a2d4:	e87402f4 	lwi	r3, r20, 756
2001a2d8:	99fc1800 	brald	r15, r3
2001a2dc:	80000000 	or	r0, r0, r0
	}
2001a2e0:	e9e10000 	lwi	r15, r1, 0
2001a2e4:	10330000 	addk	r1, r19, r0
2001a2e8:	ea61003c 	lwi	r19, r1, 60
2001a2ec:	ea810040 	lwi	r20, r1, 64
2001a2f0:	30210044 	addik	r1, r1, 68
2001a2f4:	b60f0008 	rtsd	r15, 8
2001a2f8:	80000000 	or	r0, r0, r0

2001a2fc <isSchedulable_run>:
	static i32 isSchedulable_run() {
2001a2fc:	3021fff0 	addik	r1, r1, -16
2001a300:	fa610008 	swi	r19, r1, 8
2001a304:	fa81000c 	swi	r20, r1, 12
2001a308:	12610000 	addk	r19, r1, r0
2001a30c:	96808000 	mfs	r20, rpc
2001a310:	b000dffe 	imm	-8194
2001a314:	32947650 	addik	r20, r20, 30288
		i32 result;
	
		result = 1;
2001a318:	30600001 	addik	r3, r0, 1
2001a31c:	f8730004 	swi	r3, r19, 4
		return result;
2001a320:	e8730004 	lwi	r3, r19, 4
	}
2001a324:	10330000 	addk	r1, r19, r0
2001a328:	ea610008 	lwi	r19, r1, 8
2001a32c:	ea81000c 	lwi	r20, r1, 12
2001a330:	30210010 	addik	r1, r1, 16
2001a334:	b60f0008 	rtsd	r15, 8
2001a338:	80000000 	or	r0, r0, r0

2001a33c <run>:
	
	static void run() {
2001a33c:	3021ffc4 	addik	r1, r1, -60
2001a340:	f9e10000 	swi	r15, r1, 0
2001a344:	fa610034 	swi	r19, r1, 52
2001a348:	fa810038 	swi	r20, r1, 56
2001a34c:	12610000 	addk	r19, r1, r0
2001a350:	96808000 	mfs	r20, rpc
2001a354:	b000dffe 	imm	-8194
2001a358:	3294760c 	addik	r20, r20, 30220
	
		// Compute aligned port indexes
		i32 index_aligned_RUN = index_RUN % SIZE_RUN;
2001a35c:	b0000000 	imm	0
2001a360:	e87402a8 	lwi	r3, r20, 680
2001a364:	e8630000 	lwi	r3, r3, 0
2001a368:	a46301ff 	andi	r3, r3, 511
2001a36c:	f873001c 	swi	r3, r19, 28
		i32 index_aligned_VALUE = index_VALUE % SIZE_VALUE;
2001a370:	b0000000 	imm	0
2001a374:	e87402b0 	lwi	r3, r20, 688
2001a378:	e8630000 	lwi	r3, r3, 0
2001a37c:	a46301ff 	andi	r3, r3, 511
2001a380:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_LAST = index_LAST % SIZE_LAST;
2001a384:	b0000000 	imm	0
2001a388:	e87402b8 	lwi	r3, r20, 696
2001a38c:	e8630000 	lwi	r3, r3, 0
2001a390:	a46301ff 	andi	r3, r3, 511
2001a394:	f8730024 	swi	r3, r19, 36
		i8 run;
		i16 value;
		i32 last;
		i8 local_count;
	
		run = tokens_RUN[(index_RUN + (0)) % SIZE_RUN];
2001a398:	b0000000 	imm	0
2001a39c:	e8740298 	lwi	r3, r20, 664
2001a3a0:	e8630000 	lwi	r3, r3, 0
2001a3a4:	e8830004 	lwi	r4, r3, 4
2001a3a8:	b0000000 	imm	0
2001a3ac:	e87402a8 	lwi	r3, r20, 680
2001a3b0:	e8630000 	lwi	r3, r3, 0
2001a3b4:	a46301ff 	andi	r3, r3, 511
2001a3b8:	10641800 	addk	r3, r4, r3
2001a3bc:	e0630000 	lbui	r3, r3, 0
2001a3c0:	f0730028 	sbi	r3, r19, 40
		value = tokens_VALUE[(index_VALUE + (0)) % SIZE_VALUE];
2001a3c4:	b0000000 	imm	0
2001a3c8:	e87402a0 	lwi	r3, r20, 672
2001a3cc:	e8630000 	lwi	r3, r3, 0
2001a3d0:	e8830004 	lwi	r4, r3, 4
2001a3d4:	b0000000 	imm	0
2001a3d8:	e87402b0 	lwi	r3, r20, 688
2001a3dc:	e8630000 	lwi	r3, r3, 0
2001a3e0:	a46301ff 	andi	r3, r3, 511
2001a3e4:	10631800 	addk	r3, r3, r3
2001a3e8:	10641800 	addk	r3, r4, r3
2001a3ec:	e4630000 	lhui	r3, r3, 0
2001a3f0:	f473002a 	shi	r3, r19, 42
		last = tokens_LAST[(index_LAST + (0)) % SIZE_LAST];
2001a3f4:	b0000000 	imm	0
2001a3f8:	e874029c 	lwi	r3, r20, 668
2001a3fc:	e8630000 	lwi	r3, r3, 0
2001a400:	e8830004 	lwi	r4, r3, 4
2001a404:	b0000000 	imm	0
2001a408:	e87402b8 	lwi	r3, r20, 696
2001a40c:	e8630000 	lwi	r3, r3, 0
2001a410:	a46301ff 	andi	r3, r3, 511
2001a414:	64630402 	bslli	r3, r3, 2
2001a418:	10641800 	addk	r3, r4, r3
2001a41c:	e8630000 	lwi	r3, r3, 0
2001a420:	f873002c 	swi	r3, r19, 44
		local_count = count;
2001a424:	b0000000 	imm	0
2001a428:	e87402c8 	lwi	r3, r20, 712
2001a42c:	e0630000 	lbui	r3, r3, 0
2001a430:	f0730030 	sbi	r3, r19, 48
		qfs[local_count + run] = value;
2001a434:	e0730030 	lbui	r3, r19, 48
2001a438:	90830060 	sext8	r4, r3
2001a43c:	e0730028 	lbui	r3, r19, 40
2001a440:	90630060 	sext8	r3, r3
2001a444:	10641800 	addk	r3, r4, r3
2001a448:	b0000000 	imm	0
2001a44c:	e89402cc 	lwi	r4, r20, 716
2001a450:	10631800 	addk	r3, r3, r3
2001a454:	10641800 	addk	r3, r4, r3
2001a458:	e493002a 	lhui	r4, r19, 42
2001a45c:	f4830000 	shi	r4, r3, 0
		local_count = count;
2001a460:	b0000000 	imm	0
2001a464:	e87402c8 	lwi	r3, r20, 712
2001a468:	e0630000 	lbui	r3, r3, 0
2001a46c:	f0730030 	sbi	r3, r19, 48
		count = local_count + run + 1;
2001a470:	e0930030 	lbui	r4, r19, 48
2001a474:	e0730028 	lbui	r3, r19, 40
2001a478:	10641800 	addk	r3, r4, r3
2001a47c:	a46300ff 	andi	r3, r3, 255
2001a480:	30630001 	addik	r3, r3, 1
2001a484:	a46300ff 	andi	r3, r3, 255
2001a488:	90830060 	sext8	r4, r3
2001a48c:	b0000000 	imm	0
2001a490:	e87402c8 	lwi	r3, r20, 712
2001a494:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		index_RUN += 1;
2001a498:	b0000000 	imm	0
2001a49c:	e87402a8 	lwi	r3, r20, 680
2001a4a0:	e8630000 	lwi	r3, r3, 0
2001a4a4:	30830001 	addik	r4, r3, 1
2001a4a8:	b0000000 	imm	0
2001a4ac:	e87402a8 	lwi	r3, r20, 680
2001a4b0:	f8830000 	swi	r4, r3, 0
		index_VALUE += 1;
2001a4b4:	b0000000 	imm	0
2001a4b8:	e87402b0 	lwi	r3, r20, 688
2001a4bc:	e8630000 	lwi	r3, r3, 0
2001a4c0:	30830001 	addik	r4, r3, 1
2001a4c4:	b0000000 	imm	0
2001a4c8:	e87402b0 	lwi	r3, r20, 688
2001a4cc:	f8830000 	swi	r4, r3, 0
		index_LAST += 1;
2001a4d0:	b0000000 	imm	0
2001a4d4:	e87402b8 	lwi	r3, r20, 696
2001a4d8:	e8630000 	lwi	r3, r3, 0
2001a4dc:	30830001 	addik	r4, r3, 1
2001a4e0:	b0000000 	imm	0
2001a4e4:	e87402b8 	lwi	r3, r20, 696
2001a4e8:	f8830000 	swi	r4, r3, 0
		
		read_end_RUN();
2001a4ec:	b0000000 	imm	0
2001a4f0:	e87402dc 	lwi	r3, r20, 732
2001a4f4:	99fc1800 	brald	r15, r3
2001a4f8:	80000000 	or	r0, r0, r0
		read_end_VALUE();
2001a4fc:	b0000000 	imm	0
2001a500:	e87402e4 	lwi	r3, r20, 740
2001a504:	99fc1800 	brald	r15, r3
2001a508:	80000000 	or	r0, r0, r0
		read_end_LAST();
2001a50c:	b0000000 	imm	0
2001a510:	e87402ec 	lwi	r3, r20, 748
2001a514:	99fc1800 	brald	r15, r3
2001a518:	80000000 	or	r0, r0, r0
	}
2001a51c:	e9e10000 	lwi	r15, r1, 0
2001a520:	10330000 	addk	r1, r19, r0
2001a524:	ea610034 	lwi	r19, r1, 52
2001a528:	ea810038 	lwi	r20, r1, 56
2001a52c:	3021003c 	addik	r1, r1, 60
2001a530:	b60f0008 	rtsd	r15, 8
2001a534:	80000000 	or	r0, r0, r0

2001a538 <decoder_parser_blkexp_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_parser_blkexp_initialize() {
2001a538:	3021fff0 	addik	r1, r1, -16
2001a53c:	fa610008 	swi	r19, r1, 8
2001a540:	fa81000c 	swi	r20, r1, 12
2001a544:	12610000 	addk	r19, r1, r0
2001a548:	96808000 	mfs	r20, rpc
2001a54c:	b000dffe 	imm	-8194
2001a550:	32947414 	addik	r20, r20, 29716
		int i = 0;
2001a554:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_start;
2001a558:	b0000000 	imm	0
2001a55c:	e87402d4 	lwi	r3, r20, 724
2001a560:	30800001 	addik	r4, r0, 1
2001a564:	f8830000 	swi	r4, r3, 0
		
	finished:
		// no read_end/write_end here!
		return;
2001a568:	80000000 	or	r0, r0, r0
	}
2001a56c:	10330000 	addk	r1, r19, r0
2001a570:	ea610008 	lwi	r19, r1, 8
2001a574:	ea81000c 	lwi	r20, r1, 12
2001a578:	30210010 	addik	r1, r1, 16
2001a57c:	b60f0008 	rtsd	r15, 8
2001a580:	80000000 	or	r0, r0, r0

2001a584 <decoder_parser_blkexp_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	
	int decoder_parser_blkexp_scheduler() {
2001a584:	3021ffcc 	addik	r1, r1, -52
2001a588:	f9e10000 	swi	r15, r1, 0
2001a58c:	fa61002c 	swi	r19, r1, 44
2001a590:	fa810030 	swi	r20, r1, 48
2001a594:	12610000 	addk	r19, r1, r0
2001a598:	96808000 	mfs	r20, rpc
2001a59c:	b000dffe 	imm	-8194
2001a5a0:	329473c4 	addik	r20, r20, 29636
		int i = 0;
2001a5a4:	f813001c 	swi	r0, r19, 28
		if(needInit){
2001a5a8:	b0000000 	imm	0
2001a5ac:	e87402d0 	lwi	r3, r20, 720
2001a5b0:	e0630000 	lbui	r3, r3, 0
2001a5b4:	bc03001c 	beqi	r3, 28		// 2001a5d0
			decoder_parser_blkexp_initialize();
2001a5b8:	b000ffff 	imm	-1
2001a5bc:	b9f4ff7c 	brlid	r15, -132	// 2001a538 <decoder_parser_blkexp_initialize>
2001a5c0:	80000000 	or	r0, r0, r0
			needInit = 0;
2001a5c4:	b0000000 	imm	0
2001a5c8:	e87402d0 	lwi	r3, r20, 720
2001a5cc:	f0030000 	sbi	r0, r3, 0
		}
	
		read_RUN();
2001a5d0:	b0000000 	imm	0
2001a5d4:	e87402d8 	lwi	r3, r20, 728
2001a5d8:	99fc1800 	brald	r15, r3
2001a5dc:	80000000 	or	r0, r0, r0
		read_VALUE();
2001a5e0:	b0000000 	imm	0
2001a5e4:	e89402e0 	lwi	r4, r20, 736
2001a5e8:	99fc2000 	brald	r15, r4
2001a5ec:	80000000 	or	r0, r0, r0
		read_LAST();
2001a5f0:	b0000000 	imm	0
2001a5f4:	e87402e8 	lwi	r3, r20, 744
2001a5f8:	99fc1800 	brald	r15, r3
2001a5fc:	80000000 	or	r0, r0, r0
		write_QFS();
2001a600:	b0000000 	imm	0
2001a604:	e89402f0 	lwi	r4, r20, 752
2001a608:	99fc2000 	brald	r15, r4
2001a60c:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
2001a610:	b0000000 	imm	0
2001a614:	e87402d4 	lwi	r3, r20, 724
2001a618:	e8630000 	lwi	r3, r3, 0
2001a61c:	bc03001c 	beqi	r3, 28		// 2001a638
2001a620:	a8630001 	xori	r3, r3, 1
2001a624:	bc0301c4 	beqi	r3, 452		// 2001a7e8
		case my_state_run:
			goto l_run;
		case my_state_start:
			goto l_start;
		default:
			exit(1);
2001a628:	30a00001 	addik	r5, r0, 1
2001a62c:	b000dffe 	imm	-8194
2001a630:	b9f45d68 	brlid	r15, 23912	// 398 <exit>
2001a634:	80000000 	or	r0, r0, r0
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_run:
			goto l_run;
2001a638:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_run:
			if (numTokens_RUN - index_RUN >= 1 && numTokens_VALUE - index_VALUE >= 1 && numTokens_LAST - index_LAST >= 1 && isSchedulable_last()) {
2001a63c:	b0000000 	imm	0
2001a640:	e87402ac 	lwi	r3, r20, 684
2001a644:	e8830000 	lwi	r4, r3, 0
2001a648:	b0000000 	imm	0
2001a64c:	e87402a8 	lwi	r3, r20, 680
2001a650:	e8630000 	lwi	r3, r3, 0
2001a654:	88641800 	xor	r3, r4, r3
2001a658:	bc0300d0 	beqi	r3, 208		// 2001a728
2001a65c:	b0000000 	imm	0
2001a660:	e87402b4 	lwi	r3, r20, 692
2001a664:	e8830000 	lwi	r4, r3, 0
2001a668:	b0000000 	imm	0
2001a66c:	e87402b0 	lwi	r3, r20, 688
2001a670:	e8630000 	lwi	r3, r3, 0
2001a674:	88641800 	xor	r3, r4, r3
2001a678:	bc0300b0 	beqi	r3, 176		// 2001a728
2001a67c:	b0000000 	imm	0
2001a680:	e87402bc 	lwi	r3, r20, 700
2001a684:	e8830000 	lwi	r4, r3, 0
2001a688:	b0000000 	imm	0
2001a68c:	e87402b8 	lwi	r3, r20, 696
2001a690:	e8630000 	lwi	r3, r3, 0
2001a694:	88641800 	xor	r3, r4, r3
2001a698:	bc030090 	beqi	r3, 144		// 2001a728
2001a69c:	b0000000 	imm	0
2001a6a0:	e8940300 	lwi	r4, r20, 768
2001a6a4:	99fc2000 	brald	r15, r4
2001a6a8:	80000000 	or	r0, r0, r0
2001a6ac:	bc03007c 	beqi	r3, 124		// 2001a728
				int stop = 0;
2001a6b0:	f8130020 	swi	r0, r19, 32
				if (64 > SIZE_QFS - index_QFS + decoder_parser_blkexp_QFS->read_inds[0]) {
2001a6b4:	b0000000 	imm	0
2001a6b8:	e87402a4 	lwi	r3, r20, 676
2001a6bc:	e8630000 	lwi	r3, r3, 0
2001a6c0:	e863000c 	lwi	r3, r3, 12
2001a6c4:	e8830000 	lwi	r4, r3, 0
2001a6c8:	b0000000 	imm	0
2001a6cc:	e87402c0 	lwi	r3, r20, 704
2001a6d0:	e8630000 	lwi	r3, r3, 0
2001a6d4:	14632000 	rsubk	r3, r3, r4
2001a6d8:	30830200 	addik	r4, r3, 512
2001a6dc:	3060003f 	addik	r3, r0, 63
2001a6e0:	16441803 	cmpu	r18, r4, r3
2001a6e4:	bc52000c 	blti	r18, 12		// 2001a6f0
					stop = 1;
2001a6e8:	30600001 	addik	r3, r0, 1
2001a6ec:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
2001a6f0:	e8730020 	lwi	r3, r19, 32
2001a6f4:	bc030014 	beqi	r3, 20		// 2001a708
					_FSM_state = my_state_run;
2001a6f8:	b0000000 	imm	0
2001a6fc:	e87402d4 	lwi	r3, r20, 724
2001a700:	f8030000 	swi	r0, r3, 0
					goto finished;
2001a704:	b8000150 	bri	336		// 2001a854
				}
				last();
2001a708:	b0000000 	imm	0
2001a70c:	e8740304 	lwi	r3, r20, 772
2001a710:	99fc1800 	brald	r15, r3
2001a714:	80000000 	or	r0, r0, r0
				i++;
2001a718:	e873001c 	lwi	r3, r19, 28
2001a71c:	30630001 	addik	r3, r3, 1
2001a720:	f873001c 	swi	r3, r19, 28
				goto l_start;
2001a724:	b80000c8 	bri	200		// 2001a7ec
			} else if (numTokens_RUN - index_RUN >= 1 && numTokens_VALUE - index_VALUE >= 1 && numTokens_LAST - index_LAST >= 1 && isSchedulable_run()) {
2001a728:	b0000000 	imm	0
2001a72c:	e87402ac 	lwi	r3, r20, 684
2001a730:	e8830000 	lwi	r4, r3, 0
2001a734:	b0000000 	imm	0
2001a738:	e87402a8 	lwi	r3, r20, 680
2001a73c:	e8630000 	lwi	r3, r3, 0
2001a740:	88641800 	xor	r3, r4, r3
2001a744:	bc030094 	beqi	r3, 148		// 2001a7d8
2001a748:	b0000000 	imm	0
2001a74c:	e87402b4 	lwi	r3, r20, 692
2001a750:	e8830000 	lwi	r4, r3, 0
2001a754:	b0000000 	imm	0
2001a758:	e87402b0 	lwi	r3, r20, 688
2001a75c:	e8630000 	lwi	r3, r3, 0
2001a760:	88641800 	xor	r3, r4, r3
2001a764:	bc030074 	beqi	r3, 116		// 2001a7d8
2001a768:	b0000000 	imm	0
2001a76c:	e87402bc 	lwi	r3, r20, 700
2001a770:	e8830000 	lwi	r4, r3, 0
2001a774:	b0000000 	imm	0
2001a778:	e87402b8 	lwi	r3, r20, 696
2001a77c:	e8630000 	lwi	r3, r3, 0
2001a780:	88641800 	xor	r3, r4, r3
2001a784:	bc030054 	beqi	r3, 84		// 2001a7d8
2001a788:	b0000000 	imm	0
2001a78c:	e8940308 	lwi	r4, r20, 776
2001a790:	99fc2000 	brald	r15, r4
2001a794:	80000000 	or	r0, r0, r0
2001a798:	bc030040 	beqi	r3, 64		// 2001a7d8
				int stop = 0;
2001a79c:	f8130024 	swi	r0, r19, 36
				if (stop != 0) {
2001a7a0:	e8730024 	lwi	r3, r19, 36
2001a7a4:	bc030014 	beqi	r3, 20		// 2001a7b8
					_FSM_state = my_state_run;
2001a7a8:	b0000000 	imm	0
2001a7ac:	e87402d4 	lwi	r3, r20, 724
2001a7b0:	f8030000 	swi	r0, r3, 0
					goto finished;
2001a7b4:	b80000a0 	bri	160		// 2001a854
				}
				run();
2001a7b8:	b0000000 	imm	0
2001a7bc:	e874030c 	lwi	r3, r20, 780
2001a7c0:	99fc1800 	brald	r15, r3
2001a7c4:	80000000 	or	r0, r0, r0
				i++;
2001a7c8:	e873001c 	lwi	r3, r19, 28
2001a7cc:	30630001 	addik	r3, r3, 1
2001a7d0:	f873001c 	swi	r3, r19, 28
				goto l_run;
2001a7d4:	b800fe68 	bri	-408		// 2001a63c
			} else {
				_FSM_state = my_state_run;
2001a7d8:	b0000000 	imm	0
2001a7dc:	e87402d4 	lwi	r3, r20, 724
2001a7e0:	f8030000 	swi	r0, r3, 0
				goto finished;
2001a7e4:	b8000070 	bri	112		// 2001a854
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_run:
			goto l_run;
		case my_state_start:
			goto l_start;
2001a7e8:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_run;
				goto finished;
			}
		l_start:
			if (isSchedulable_start()) {
2001a7ec:	b0000000 	imm	0
2001a7f0:	e89402f8 	lwi	r4, r20, 760
2001a7f4:	99fc2000 	brald	r15, r4
2001a7f8:	80000000 	or	r0, r0, r0
2001a7fc:	bc030044 	beqi	r3, 68		// 2001a840
				int stop = 0;
2001a800:	f8130028 	swi	r0, r19, 40
				if (stop != 0) {
2001a804:	e8730028 	lwi	r3, r19, 40
2001a808:	bc030018 	beqi	r3, 24		// 2001a820
					_FSM_state = my_state_start;
2001a80c:	b0000000 	imm	0
2001a810:	e87402d4 	lwi	r3, r20, 724
2001a814:	30800001 	addik	r4, r0, 1
2001a818:	f8830000 	swi	r4, r3, 0
					goto finished;
2001a81c:	b8000038 	bri	56		// 2001a854
				}
				start();
2001a820:	b0000000 	imm	0
2001a824:	e87402fc 	lwi	r3, r20, 764
2001a828:	99fc1800 	brald	r15, r3
2001a82c:	80000000 	or	r0, r0, r0
				i++;
2001a830:	e873001c 	lwi	r3, r19, 28
2001a834:	30630001 	addik	r3, r3, 1
2001a838:	f873001c 	swi	r3, r19, 28
				goto l_run;
2001a83c:	b800fe00 	bri	-512		// 2001a63c
			} else {
				_FSM_state = my_state_start;
2001a840:	b0000000 	imm	0
2001a844:	e87402d4 	lwi	r3, r20, 724
2001a848:	30800001 	addik	r4, r0, 1
2001a84c:	f8830000 	swi	r4, r3, 0
				goto finished;
2001a850:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_RUN();
2001a854:	b0000000 	imm	0
2001a858:	e89402dc 	lwi	r4, r20, 732
2001a85c:	99fc2000 	brald	r15, r4
2001a860:	80000000 	or	r0, r0, r0
		read_end_VALUE();
2001a864:	b0000000 	imm	0
2001a868:	e87402e4 	lwi	r3, r20, 740
2001a86c:	99fc1800 	brald	r15, r3
2001a870:	80000000 	or	r0, r0, r0
		read_end_LAST();
2001a874:	b0000000 	imm	0
2001a878:	e89402ec 	lwi	r4, r20, 748
2001a87c:	99fc2000 	brald	r15, r4
2001a880:	80000000 	or	r0, r0, r0
		
		write_end_QFS();
2001a884:	b0000000 	imm	0
2001a888:	e87402f4 	lwi	r3, r20, 756
2001a88c:	99fc1800 	brald	r15, r3
2001a890:	80000000 	or	r0, r0, r0
		
		
		return i;
2001a894:	e873001c 	lwi	r3, r19, 28
	}
2001a898:	e9e10000 	lwi	r15, r1, 0
2001a89c:	10330000 	addk	r1, r19, r0
2001a8a0:	ea61002c 	lwi	r19, r1, 44
2001a8a4:	ea810030 	lwi	r20, r1, 48
2001a8a8:	30210034 	addik	r1, r1, 52
2001a8ac:	b60f0008 	rtsd	r15, 8
2001a8b0:	80000000 	or	r0, r0, r0

2001a8b4 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001a8b4:	3021fff4 	addik	r1, r1, -12
2001a8b8:	fa610004 	swi	r19, r1, 4
2001a8bc:	fa810008 	swi	r20, r1, 8
2001a8c0:	12610000 	addk	r19, r1, r0
2001a8c4:	96808000 	mfs	r20, rpc
2001a8c8:	b000dffe 	imm	-8194
2001a8cc:	32947098 	addik	r20, r20, 28824
2001a8d0:	f8b30010 	swi	r5, r19, 16
2001a8d4:	f8d30014 	swi	r6, r19, 20
2001a8d8:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001a8dc:	e8730010 	lwi	r3, r19, 16
2001a8e0:	e8630010 	lwi	r3, r3, 16
2001a8e4:	e8830000 	lwi	r4, r3, 0
2001a8e8:	e8730010 	lwi	r3, r19, 16
2001a8ec:	e8a3000c 	lwi	r5, r3, 12
2001a8f0:	e8730014 	lwi	r3, r19, 20
2001a8f4:	64630402 	bslli	r3, r3, 2
2001a8f8:	10651800 	addk	r3, r5, r3
2001a8fc:	e8630000 	lwi	r3, r3, 0
2001a900:	14a32000 	rsubk	r5, r3, r4
2001a904:	30600001 	addik	r3, r0, 1
2001a908:	e8930018 	lwi	r4, r19, 24
2001a90c:	16442803 	cmpu	r18, r4, r5
2001a910:	bcb20008 	bgei	r18, 8		// 2001a918
2001a914:	10600000 	addk	r3, r0, r0
2001a918:	a46300ff 	andi	r3, r3, 255
}
2001a91c:	10330000 	addk	r1, r19, r0
2001a920:	ea610004 	lwi	r19, r1, 4
2001a924:	ea810008 	lwi	r20, r1, 8
2001a928:	3021000c 	addik	r1, r1, 12
2001a92c:	b60f0008 	rtsd	r15, 8
2001a930:	80000000 	or	r0, r0, r0

2001a934 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001a934:	3021fff4 	addik	r1, r1, -12
2001a938:	fa610004 	swi	r19, r1, 4
2001a93c:	fa810008 	swi	r20, r1, 8
2001a940:	12610000 	addk	r19, r1, r0
2001a944:	96808000 	mfs	r20, rpc
2001a948:	b000dffe 	imm	-8194
2001a94c:	32947018 	addik	r20, r20, 28696
2001a950:	f8b30010 	swi	r5, r19, 16
2001a954:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001a958:	e8730010 	lwi	r3, r19, 16
2001a95c:	e8630010 	lwi	r3, r3, 16
2001a960:	e8830000 	lwi	r4, r3, 0
2001a964:	e8730010 	lwi	r3, r19, 16
2001a968:	e8a3000c 	lwi	r5, r3, 12
2001a96c:	e8730014 	lwi	r3, r19, 20
2001a970:	64630402 	bslli	r3, r3, 2
2001a974:	10651800 	addk	r3, r5, r3
2001a978:	e8630000 	lwi	r3, r3, 0
2001a97c:	14632000 	rsubk	r3, r3, r4
}
2001a980:	10330000 	addk	r1, r19, r0
2001a984:	ea610004 	lwi	r19, r1, 4
2001a988:	ea810008 	lwi	r20, r1, 8
2001a98c:	3021000c 	addik	r1, r1, 12
2001a990:	b60f0008 	rtsd	r15, 8
2001a994:	80000000 	or	r0, r0, r0

2001a998 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2001a998:	3021fff0 	addik	r1, r1, -16
2001a99c:	fa610008 	swi	r19, r1, 8
2001a9a0:	fa81000c 	swi	r20, r1, 12
2001a9a4:	12610000 	addk	r19, r1, r0
2001a9a8:	96808000 	mfs	r20, rpc
2001a9ac:	b000dffe 	imm	-8194
2001a9b0:	32946fb4 	addik	r20, r20, 28596
2001a9b4:	f8b30014 	swi	r5, r19, 20
2001a9b8:	f8d30018 	swi	r6, r19, 24
2001a9bc:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001a9c0:	f8130004 	swi	r0, r19, 4
2001a9c4:	b800005c 	bri	92		// 2001aa20
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001a9c8:	e8730014 	lwi	r3, r19, 20
2001a9cc:	e8830000 	lwi	r4, r3, 0
2001a9d0:	e8730014 	lwi	r3, r19, 20
2001a9d4:	e8a3000c 	lwi	r5, r3, 12
2001a9d8:	e8730004 	lwi	r3, r19, 4
2001a9dc:	64630402 	bslli	r3, r3, 2
2001a9e0:	10651800 	addk	r3, r5, r3
2001a9e4:	e8a30000 	lwi	r5, r3, 0
2001a9e8:	e8730014 	lwi	r3, r19, 20
2001a9ec:	e8630010 	lwi	r3, r3, 16
2001a9f0:	e8630000 	lwi	r3, r3, 0
2001a9f4:	14632800 	rsubk	r3, r3, r5
2001a9f8:	10641800 	addk	r3, r4, r3
2001a9fc:	30830001 	addik	r4, r3, 1
2001aa00:	e873001c 	lwi	r3, r19, 28
2001aa04:	16441803 	cmpu	r18, r4, r3
2001aa08:	bc52000c 	blti	r18, 12		// 2001aa14
            return 0;
2001aa0c:	10600000 	addk	r3, r0, r0
2001aa10:	b8000024 	bri	36		// 2001aa34
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001aa14:	e8730004 	lwi	r3, r19, 4
2001aa18:	30630001 	addik	r3, r3, 1
2001aa1c:	f8730004 	swi	r3, r19, 4
2001aa20:	e8930004 	lwi	r4, r19, 4
2001aa24:	e8730018 	lwi	r3, r19, 24
2001aa28:	16432003 	cmpu	r18, r3, r4
2001aa2c:	bc52ff9c 	blti	r18, -100		// 2001a9c8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001aa30:	30600001 	addik	r3, r0, 1
}
2001aa34:	10330000 	addk	r1, r19, r0
2001aa38:	ea610008 	lwi	r19, r1, 8
2001aa3c:	ea81000c 	lwi	r20, r1, 12
2001aa40:	30210010 	addik	r1, r1, 16
2001aa44:	b60f0008 	rtsd	r15, 8
2001aa48:	80000000 	or	r0, r0, r0

2001aa4c <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001aa4c:	3021ffe8 	addik	r1, r1, -24
2001aa50:	fa610010 	swi	r19, r1, 16
2001aa54:	fa810014 	swi	r20, r1, 20
2001aa58:	12610000 	addk	r19, r1, r0
2001aa5c:	96808000 	mfs	r20, rpc
2001aa60:	b000dffe 	imm	-8194
2001aa64:	32946f00 	addik	r20, r20, 28416
2001aa68:	f8b3001c 	swi	r5, r19, 28
2001aa6c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001aa70:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001aa74:	f8130004 	swi	r0, r19, 4
2001aa78:	b8000054 	bri	84		// 2001aacc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001aa7c:	e873001c 	lwi	r3, r19, 28
2001aa80:	e8630010 	lwi	r3, r3, 16
2001aa84:	e8830000 	lwi	r4, r3, 0
2001aa88:	e873001c 	lwi	r3, r19, 28
2001aa8c:	e8a3000c 	lwi	r5, r3, 12
2001aa90:	e8730004 	lwi	r3, r19, 4
2001aa94:	64630402 	bslli	r3, r3, 2
2001aa98:	10651800 	addk	r3, r5, r3
2001aa9c:	e8630000 	lwi	r3, r3, 0
2001aaa0:	14632000 	rsubk	r3, r3, r4
2001aaa4:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001aaa8:	e8930008 	lwi	r4, r19, 8
2001aaac:	e873000c 	lwi	r3, r19, 12
2001aab0:	16441803 	cmpu	r18, r4, r3
2001aab4:	bcb20008 	bgei	r18, 8		// 2001aabc
2001aab8:	10640000 	addk	r3, r4, r0
2001aabc:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001aac0:	e8730004 	lwi	r3, r19, 4
2001aac4:	30630001 	addik	r3, r3, 1
2001aac8:	f8730004 	swi	r3, r19, 4
2001aacc:	e8930004 	lwi	r4, r19, 4
2001aad0:	e8730020 	lwi	r3, r19, 32
2001aad4:	16432003 	cmpu	r18, r3, r4
2001aad8:	bc52ffa4 	blti	r18, -92		// 2001aa7c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001aadc:	e873001c 	lwi	r3, r19, 28
2001aae0:	e8830000 	lwi	r4, r3, 0
2001aae4:	e8730008 	lwi	r3, r19, 8
2001aae8:	14632000 	rsubk	r3, r3, r4
}
2001aaec:	10330000 	addk	r1, r19, r0
2001aaf0:	ea610010 	lwi	r19, r1, 16
2001aaf4:	ea810014 	lwi	r20, r1, 20
2001aaf8:	30210018 	addik	r1, r1, 24
2001aafc:	b60f0008 	rtsd	r15, 8
2001ab00:	80000000 	or	r0, r0, r0

2001ab04 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001ab04:	3021fff0 	addik	r1, r1, -16
2001ab08:	fa610008 	swi	r19, r1, 8
2001ab0c:	fa81000c 	swi	r20, r1, 12
2001ab10:	12610000 	addk	r19, r1, r0
2001ab14:	96808000 	mfs	r20, rpc
2001ab18:	b000dffe 	imm	-8194
2001ab1c:	32946e48 	addik	r20, r20, 28232
2001ab20:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2001ab24:	e8730014 	lwi	r3, r19, 20
2001ab28:	e8630010 	lwi	r3, r3, 16
2001ab2c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001ab30:	f8130004 	swi	r0, r19, 4
2001ab34:	b8000028 	bri	40		// 2001ab5c
        fifo->read_inds[i] = 0;
2001ab38:	e8730014 	lwi	r3, r19, 20
2001ab3c:	e883000c 	lwi	r4, r3, 12
2001ab40:	e8730004 	lwi	r3, r19, 4
2001ab44:	64630402 	bslli	r3, r3, 2
2001ab48:	10641800 	addk	r3, r4, r3
2001ab4c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001ab50:	e8730004 	lwi	r3, r19, 4
2001ab54:	30630001 	addik	r3, r3, 1
2001ab58:	f8730004 	swi	r3, r19, 4
2001ab5c:	e8730014 	lwi	r3, r19, 20
2001ab60:	e8830008 	lwi	r4, r3, 8
2001ab64:	e8730004 	lwi	r3, r19, 4
2001ab68:	16441803 	cmpu	r18, r4, r3
2001ab6c:	bc52ffcc 	blti	r18, -52		// 2001ab38
        fifo->read_inds[i] = 0;
    }
}
2001ab70:	10330000 	addk	r1, r19, r0
2001ab74:	ea610008 	lwi	r19, r1, 8
2001ab78:	ea81000c 	lwi	r20, r1, 12
2001ab7c:	30210010 	addik	r1, r1, 16
2001ab80:	b60f0008 	rtsd	r15, 8
2001ab84:	80000000 	or	r0, r0, r0

2001ab88 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001ab88:	3021fff0 	addik	r1, r1, -16
2001ab8c:	fa610008 	swi	r19, r1, 8
2001ab90:	fa81000c 	swi	r20, r1, 12
2001ab94:	12610000 	addk	r19, r1, r0
2001ab98:	96808000 	mfs	r20, rpc
2001ab9c:	b000dffe 	imm	-8194
2001aba0:	32946dc4 	addik	r20, r20, 28100
2001aba4:	f8b30014 	swi	r5, r19, 20
2001aba8:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001abac:	e8730014 	lwi	r3, r19, 20
2001abb0:	e8830004 	lwi	r4, r3, 4
2001abb4:	e8730014 	lwi	r3, r19, 20
2001abb8:	e8a3000c 	lwi	r5, r3, 12
2001abbc:	e8730018 	lwi	r3, r19, 24
2001abc0:	64630402 	bslli	r3, r3, 2
2001abc4:	10651800 	addk	r3, r5, r3
2001abc8:	e8a30000 	lwi	r5, r3, 0
2001abcc:	e8730014 	lwi	r3, r19, 20
2001abd0:	e8630000 	lwi	r3, r3, 0
2001abd4:	3063ffff 	addik	r3, r3, -1
2001abd8:	84651800 	and	r3, r5, r3
2001abdc:	10641800 	addk	r3, r4, r3
2001abe0:	e0630000 	lbui	r3, r3, 0
2001abe4:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2001abe8:	e8730014 	lwi	r3, r19, 20
2001abec:	e883000c 	lwi	r4, r3, 12
2001abf0:	e8730018 	lwi	r3, r19, 24
2001abf4:	64630402 	bslli	r3, r3, 2
2001abf8:	10641800 	addk	r3, r4, r3
2001abfc:	e8830000 	lwi	r4, r3, 0
2001ac00:	30840001 	addik	r4, r4, 1
2001ac04:	f8830000 	swi	r4, r3, 0
    return value;
2001ac08:	e0730004 	lbui	r3, r19, 4
2001ac0c:	90630060 	sext8	r3, r3
}
2001ac10:	10330000 	addk	r1, r19, r0
2001ac14:	ea610008 	lwi	r19, r1, 8
2001ac18:	ea81000c 	lwi	r20, r1, 12
2001ac1c:	30210010 	addik	r1, r1, 16
2001ac20:	b60f0008 	rtsd	r15, 8
2001ac24:	80000000 	or	r0, r0, r0

2001ac28 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001ac28:	3021fff4 	addik	r1, r1, -12
2001ac2c:	fa610004 	swi	r19, r1, 4
2001ac30:	fa810008 	swi	r20, r1, 8
2001ac34:	12610000 	addk	r19, r1, r0
2001ac38:	96808000 	mfs	r20, rpc
2001ac3c:	b000dffe 	imm	-8194
2001ac40:	32946d24 	addik	r20, r20, 27940
2001ac44:	f8b30010 	swi	r5, r19, 16
2001ac48:	10660000 	addk	r3, r6, r0
2001ac4c:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001ac50:	e8730010 	lwi	r3, r19, 16
2001ac54:	e8830004 	lwi	r4, r3, 4
2001ac58:	e8730010 	lwi	r3, r19, 16
2001ac5c:	e8630010 	lwi	r3, r3, 16
2001ac60:	e8a30000 	lwi	r5, r3, 0
2001ac64:	e8730010 	lwi	r3, r19, 16
2001ac68:	e8630000 	lwi	r3, r3, 0
2001ac6c:	3063ffff 	addik	r3, r3, -1
2001ac70:	84651800 	and	r3, r5, r3
2001ac74:	10641800 	addk	r3, r4, r3
2001ac78:	e0930014 	lbui	r4, r19, 20
2001ac7c:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2001ac80:	e8730010 	lwi	r3, r19, 16
2001ac84:	e8630010 	lwi	r3, r3, 16
2001ac88:	e8830000 	lwi	r4, r3, 0
2001ac8c:	30840001 	addik	r4, r4, 1
2001ac90:	f8830000 	swi	r4, r3, 0
}
2001ac94:	10330000 	addk	r1, r19, r0
2001ac98:	ea610004 	lwi	r19, r1, 4
2001ac9c:	ea810008 	lwi	r20, r1, 8
2001aca0:	3021000c 	addik	r1, r1, 12
2001aca4:	b60f0008 	rtsd	r15, 8
2001aca8:	80000000 	or	r0, r0, r0

2001acac <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001acac:	3021fff4 	addik	r1, r1, -12
2001acb0:	fa610004 	swi	r19, r1, 4
2001acb4:	fa810008 	swi	r20, r1, 8
2001acb8:	12610000 	addk	r19, r1, r0
2001acbc:	96808000 	mfs	r20, rpc
2001acc0:	b000dffe 	imm	-8194
2001acc4:	32946ca0 	addik	r20, r20, 27808
2001acc8:	f8b30010 	swi	r5, r19, 16
2001accc:	f8d30014 	swi	r6, r19, 20
2001acd0:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001acd4:	e8730010 	lwi	r3, r19, 16
2001acd8:	e8630010 	lwi	r3, r3, 16
2001acdc:	e8830000 	lwi	r4, r3, 0
2001ace0:	e8730010 	lwi	r3, r19, 16
2001ace4:	e8a3000c 	lwi	r5, r3, 12
2001ace8:	e8730014 	lwi	r3, r19, 20
2001acec:	64630402 	bslli	r3, r3, 2
2001acf0:	10651800 	addk	r3, r5, r3
2001acf4:	e8630000 	lwi	r3, r3, 0
2001acf8:	14a32000 	rsubk	r5, r3, r4
2001acfc:	30600001 	addik	r3, r0, 1
2001ad00:	e8930018 	lwi	r4, r19, 24
2001ad04:	16442803 	cmpu	r18, r4, r5
2001ad08:	bcb20008 	bgei	r18, 8		// 2001ad10
2001ad0c:	10600000 	addk	r3, r0, r0
2001ad10:	a46300ff 	andi	r3, r3, 255
}
2001ad14:	10330000 	addk	r1, r19, r0
2001ad18:	ea610004 	lwi	r19, r1, 4
2001ad1c:	ea810008 	lwi	r20, r1, 8
2001ad20:	3021000c 	addik	r1, r1, 12
2001ad24:	b60f0008 	rtsd	r15, 8
2001ad28:	80000000 	or	r0, r0, r0

2001ad2c <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001ad2c:	3021fff4 	addik	r1, r1, -12
2001ad30:	fa610004 	swi	r19, r1, 4
2001ad34:	fa810008 	swi	r20, r1, 8
2001ad38:	12610000 	addk	r19, r1, r0
2001ad3c:	96808000 	mfs	r20, rpc
2001ad40:	b000dffe 	imm	-8194
2001ad44:	32946c20 	addik	r20, r20, 27680
2001ad48:	f8b30010 	swi	r5, r19, 16
2001ad4c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001ad50:	e8730010 	lwi	r3, r19, 16
2001ad54:	e8630010 	lwi	r3, r3, 16
2001ad58:	e8830000 	lwi	r4, r3, 0
2001ad5c:	e8730010 	lwi	r3, r19, 16
2001ad60:	e8a3000c 	lwi	r5, r3, 12
2001ad64:	e8730014 	lwi	r3, r19, 20
2001ad68:	64630402 	bslli	r3, r3, 2
2001ad6c:	10651800 	addk	r3, r5, r3
2001ad70:	e8630000 	lwi	r3, r3, 0
2001ad74:	14632000 	rsubk	r3, r3, r4
}
2001ad78:	10330000 	addk	r1, r19, r0
2001ad7c:	ea610004 	lwi	r19, r1, 4
2001ad80:	ea810008 	lwi	r20, r1, 8
2001ad84:	3021000c 	addik	r1, r1, 12
2001ad88:	b60f0008 	rtsd	r15, 8
2001ad8c:	80000000 	or	r0, r0, r0

2001ad90 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2001ad90:	3021fff0 	addik	r1, r1, -16
2001ad94:	fa610008 	swi	r19, r1, 8
2001ad98:	fa81000c 	swi	r20, r1, 12
2001ad9c:	12610000 	addk	r19, r1, r0
2001ada0:	96808000 	mfs	r20, rpc
2001ada4:	b000dffe 	imm	-8194
2001ada8:	32946bbc 	addik	r20, r20, 27580
2001adac:	f8b30014 	swi	r5, r19, 20
2001adb0:	f8d30018 	swi	r6, r19, 24
2001adb4:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001adb8:	f8130004 	swi	r0, r19, 4
2001adbc:	b800005c 	bri	92		// 2001ae18
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001adc0:	e8730014 	lwi	r3, r19, 20
2001adc4:	e8830000 	lwi	r4, r3, 0
2001adc8:	e8730014 	lwi	r3, r19, 20
2001adcc:	e8a3000c 	lwi	r5, r3, 12
2001add0:	e8730004 	lwi	r3, r19, 4
2001add4:	64630402 	bslli	r3, r3, 2
2001add8:	10651800 	addk	r3, r5, r3
2001addc:	e8a30000 	lwi	r5, r3, 0
2001ade0:	e8730014 	lwi	r3, r19, 20
2001ade4:	e8630010 	lwi	r3, r3, 16
2001ade8:	e8630000 	lwi	r3, r3, 0
2001adec:	14632800 	rsubk	r3, r3, r5
2001adf0:	10641800 	addk	r3, r4, r3
2001adf4:	30830001 	addik	r4, r3, 1
2001adf8:	e873001c 	lwi	r3, r19, 28
2001adfc:	16441803 	cmpu	r18, r4, r3
2001ae00:	bc52000c 	blti	r18, 12		// 2001ae0c
            return 0;
2001ae04:	10600000 	addk	r3, r0, r0
2001ae08:	b8000024 	bri	36		// 2001ae2c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001ae0c:	e8730004 	lwi	r3, r19, 4
2001ae10:	30630001 	addik	r3, r3, 1
2001ae14:	f8730004 	swi	r3, r19, 4
2001ae18:	e8930004 	lwi	r4, r19, 4
2001ae1c:	e8730018 	lwi	r3, r19, 24
2001ae20:	16432003 	cmpu	r18, r3, r4
2001ae24:	bc52ff9c 	blti	r18, -100		// 2001adc0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001ae28:	30600001 	addik	r3, r0, 1
}
2001ae2c:	10330000 	addk	r1, r19, r0
2001ae30:	ea610008 	lwi	r19, r1, 8
2001ae34:	ea81000c 	lwi	r20, r1, 12
2001ae38:	30210010 	addik	r1, r1, 16
2001ae3c:	b60f0008 	rtsd	r15, 8
2001ae40:	80000000 	or	r0, r0, r0

2001ae44 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001ae44:	3021ffe8 	addik	r1, r1, -24
2001ae48:	fa610010 	swi	r19, r1, 16
2001ae4c:	fa810014 	swi	r20, r1, 20
2001ae50:	12610000 	addk	r19, r1, r0
2001ae54:	96808000 	mfs	r20, rpc
2001ae58:	b000dffe 	imm	-8194
2001ae5c:	32946b08 	addik	r20, r20, 27400
2001ae60:	f8b3001c 	swi	r5, r19, 28
2001ae64:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001ae68:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001ae6c:	f8130004 	swi	r0, r19, 4
2001ae70:	b8000054 	bri	84		// 2001aec4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001ae74:	e873001c 	lwi	r3, r19, 28
2001ae78:	e8630010 	lwi	r3, r3, 16
2001ae7c:	e8830000 	lwi	r4, r3, 0
2001ae80:	e873001c 	lwi	r3, r19, 28
2001ae84:	e8a3000c 	lwi	r5, r3, 12
2001ae88:	e8730004 	lwi	r3, r19, 4
2001ae8c:	64630402 	bslli	r3, r3, 2
2001ae90:	10651800 	addk	r3, r5, r3
2001ae94:	e8630000 	lwi	r3, r3, 0
2001ae98:	14632000 	rsubk	r3, r3, r4
2001ae9c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001aea0:	e8930008 	lwi	r4, r19, 8
2001aea4:	e873000c 	lwi	r3, r19, 12
2001aea8:	16441803 	cmpu	r18, r4, r3
2001aeac:	bcb20008 	bgei	r18, 8		// 2001aeb4
2001aeb0:	10640000 	addk	r3, r4, r0
2001aeb4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001aeb8:	e8730004 	lwi	r3, r19, 4
2001aebc:	30630001 	addik	r3, r3, 1
2001aec0:	f8730004 	swi	r3, r19, 4
2001aec4:	e8930004 	lwi	r4, r19, 4
2001aec8:	e8730020 	lwi	r3, r19, 32
2001aecc:	16432003 	cmpu	r18, r3, r4
2001aed0:	bc52ffa4 	blti	r18, -92		// 2001ae74
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001aed4:	e873001c 	lwi	r3, r19, 28
2001aed8:	e8830000 	lwi	r4, r3, 0
2001aedc:	e8730008 	lwi	r3, r19, 8
2001aee0:	14632000 	rsubk	r3, r3, r4
}
2001aee4:	10330000 	addk	r1, r19, r0
2001aee8:	ea610010 	lwi	r19, r1, 16
2001aeec:	ea810014 	lwi	r20, r1, 20
2001aef0:	30210018 	addik	r1, r1, 24
2001aef4:	b60f0008 	rtsd	r15, 8
2001aef8:	80000000 	or	r0, r0, r0

2001aefc <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001aefc:	3021fff0 	addik	r1, r1, -16
2001af00:	fa610008 	swi	r19, r1, 8
2001af04:	fa81000c 	swi	r20, r1, 12
2001af08:	12610000 	addk	r19, r1, r0
2001af0c:	96808000 	mfs	r20, rpc
2001af10:	b000dffe 	imm	-8194
2001af14:	32946a50 	addik	r20, r20, 27216
2001af18:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2001af1c:	e8730014 	lwi	r3, r19, 20
2001af20:	e8630010 	lwi	r3, r3, 16
2001af24:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001af28:	f8130004 	swi	r0, r19, 4
2001af2c:	b8000028 	bri	40		// 2001af54
        fifo->read_inds[i] = 0;
2001af30:	e8730014 	lwi	r3, r19, 20
2001af34:	e883000c 	lwi	r4, r3, 12
2001af38:	e8730004 	lwi	r3, r19, 4
2001af3c:	64630402 	bslli	r3, r3, 2
2001af40:	10641800 	addk	r3, r4, r3
2001af44:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001af48:	e8730004 	lwi	r3, r19, 4
2001af4c:	30630001 	addik	r3, r3, 1
2001af50:	f8730004 	swi	r3, r19, 4
2001af54:	e8730014 	lwi	r3, r19, 20
2001af58:	e8830008 	lwi	r4, r3, 8
2001af5c:	e8730004 	lwi	r3, r19, 4
2001af60:	16441803 	cmpu	r18, r4, r3
2001af64:	bc52ffcc 	blti	r18, -52		// 2001af30
        fifo->read_inds[i] = 0;
    }
}
2001af68:	10330000 	addk	r1, r19, r0
2001af6c:	ea610008 	lwi	r19, r1, 8
2001af70:	ea81000c 	lwi	r20, r1, 12
2001af74:	30210010 	addik	r1, r1, 16
2001af78:	b60f0008 	rtsd	r15, 8
2001af7c:	80000000 	or	r0, r0, r0

2001af80 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001af80:	3021fff0 	addik	r1, r1, -16
2001af84:	fa610008 	swi	r19, r1, 8
2001af88:	fa81000c 	swi	r20, r1, 12
2001af8c:	12610000 	addk	r19, r1, r0
2001af90:	96808000 	mfs	r20, rpc
2001af94:	b000dffe 	imm	-8194
2001af98:	329469cc 	addik	r20, r20, 27084
2001af9c:	f8b30014 	swi	r5, r19, 20
2001afa0:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001afa4:	e8730014 	lwi	r3, r19, 20
2001afa8:	e8830004 	lwi	r4, r3, 4
2001afac:	e8730014 	lwi	r3, r19, 20
2001afb0:	e8a3000c 	lwi	r5, r3, 12
2001afb4:	e8730018 	lwi	r3, r19, 24
2001afb8:	64630402 	bslli	r3, r3, 2
2001afbc:	10651800 	addk	r3, r5, r3
2001afc0:	e8a30000 	lwi	r5, r3, 0
2001afc4:	e8730014 	lwi	r3, r19, 20
2001afc8:	e8630000 	lwi	r3, r3, 0
2001afcc:	3063ffff 	addik	r3, r3, -1
2001afd0:	84651800 	and	r3, r5, r3
2001afd4:	10631800 	addk	r3, r3, r3
2001afd8:	10641800 	addk	r3, r4, r3
2001afdc:	e4630000 	lhui	r3, r3, 0
2001afe0:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2001afe4:	e8730014 	lwi	r3, r19, 20
2001afe8:	e883000c 	lwi	r4, r3, 12
2001afec:	e8730018 	lwi	r3, r19, 24
2001aff0:	64630402 	bslli	r3, r3, 2
2001aff4:	10641800 	addk	r3, r4, r3
2001aff8:	e8830000 	lwi	r4, r3, 0
2001affc:	30840001 	addik	r4, r4, 1
2001b000:	f8830000 	swi	r4, r3, 0
    return value;
2001b004:	e4730004 	lhui	r3, r19, 4
2001b008:	90630061 	sext16	r3, r3
}
2001b00c:	10330000 	addk	r1, r19, r0
2001b010:	ea610008 	lwi	r19, r1, 8
2001b014:	ea81000c 	lwi	r20, r1, 12
2001b018:	30210010 	addik	r1, r1, 16
2001b01c:	b60f0008 	rtsd	r15, 8
2001b020:	80000000 	or	r0, r0, r0

2001b024 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001b024:	3021fff4 	addik	r1, r1, -12
2001b028:	fa610004 	swi	r19, r1, 4
2001b02c:	fa810008 	swi	r20, r1, 8
2001b030:	12610000 	addk	r19, r1, r0
2001b034:	96808000 	mfs	r20, rpc
2001b038:	b000dffe 	imm	-8194
2001b03c:	32946928 	addik	r20, r20, 26920
2001b040:	f8b30010 	swi	r5, r19, 16
2001b044:	10660000 	addk	r3, r6, r0
2001b048:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001b04c:	e8730010 	lwi	r3, r19, 16
2001b050:	e8830004 	lwi	r4, r3, 4
2001b054:	e8730010 	lwi	r3, r19, 16
2001b058:	e8630010 	lwi	r3, r3, 16
2001b05c:	e8a30000 	lwi	r5, r3, 0
2001b060:	e8730010 	lwi	r3, r19, 16
2001b064:	e8630000 	lwi	r3, r3, 0
2001b068:	3063ffff 	addik	r3, r3, -1
2001b06c:	84651800 	and	r3, r5, r3
2001b070:	10631800 	addk	r3, r3, r3
2001b074:	10641800 	addk	r3, r4, r3
2001b078:	e4930014 	lhui	r4, r19, 20
2001b07c:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2001b080:	e8730010 	lwi	r3, r19, 16
2001b084:	e8630010 	lwi	r3, r3, 16
2001b088:	e8830000 	lwi	r4, r3, 0
2001b08c:	30840001 	addik	r4, r4, 1
2001b090:	f8830000 	swi	r4, r3, 0
}
2001b094:	10330000 	addk	r1, r19, r0
2001b098:	ea610004 	lwi	r19, r1, 4
2001b09c:	ea810008 	lwi	r20, r1, 8
2001b0a0:	3021000c 	addik	r1, r1, 12
2001b0a4:	b60f0008 	rtsd	r15, 8
2001b0a8:	80000000 	or	r0, r0, r0

2001b0ac <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001b0ac:	3021fff4 	addik	r1, r1, -12
2001b0b0:	fa610004 	swi	r19, r1, 4
2001b0b4:	fa810008 	swi	r20, r1, 8
2001b0b8:	12610000 	addk	r19, r1, r0
2001b0bc:	96808000 	mfs	r20, rpc
2001b0c0:	b000dffe 	imm	-8194
2001b0c4:	329468a0 	addik	r20, r20, 26784
2001b0c8:	f8b30010 	swi	r5, r19, 16
2001b0cc:	f8d30014 	swi	r6, r19, 20
2001b0d0:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001b0d4:	e8730010 	lwi	r3, r19, 16
2001b0d8:	e8630010 	lwi	r3, r3, 16
2001b0dc:	e8830000 	lwi	r4, r3, 0
2001b0e0:	e8730010 	lwi	r3, r19, 16
2001b0e4:	e8a3000c 	lwi	r5, r3, 12
2001b0e8:	e8730014 	lwi	r3, r19, 20
2001b0ec:	64630402 	bslli	r3, r3, 2
2001b0f0:	10651800 	addk	r3, r5, r3
2001b0f4:	e8630000 	lwi	r3, r3, 0
2001b0f8:	14a32000 	rsubk	r5, r3, r4
2001b0fc:	30600001 	addik	r3, r0, 1
2001b100:	e8930018 	lwi	r4, r19, 24
2001b104:	16442803 	cmpu	r18, r4, r5
2001b108:	bcb20008 	bgei	r18, 8		// 2001b110
2001b10c:	10600000 	addk	r3, r0, r0
2001b110:	a46300ff 	andi	r3, r3, 255
}
2001b114:	10330000 	addk	r1, r19, r0
2001b118:	ea610004 	lwi	r19, r1, 4
2001b11c:	ea810008 	lwi	r20, r1, 8
2001b120:	3021000c 	addik	r1, r1, 12
2001b124:	b60f0008 	rtsd	r15, 8
2001b128:	80000000 	or	r0, r0, r0

2001b12c <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001b12c:	3021fff4 	addik	r1, r1, -12
2001b130:	fa610004 	swi	r19, r1, 4
2001b134:	fa810008 	swi	r20, r1, 8
2001b138:	12610000 	addk	r19, r1, r0
2001b13c:	96808000 	mfs	r20, rpc
2001b140:	b000dffe 	imm	-8194
2001b144:	32946820 	addik	r20, r20, 26656
2001b148:	f8b30010 	swi	r5, r19, 16
2001b14c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001b150:	e8730010 	lwi	r3, r19, 16
2001b154:	e8630010 	lwi	r3, r3, 16
2001b158:	e8830000 	lwi	r4, r3, 0
2001b15c:	e8730010 	lwi	r3, r19, 16
2001b160:	e8a3000c 	lwi	r5, r3, 12
2001b164:	e8730014 	lwi	r3, r19, 20
2001b168:	64630402 	bslli	r3, r3, 2
2001b16c:	10651800 	addk	r3, r5, r3
2001b170:	e8630000 	lwi	r3, r3, 0
2001b174:	14632000 	rsubk	r3, r3, r4
}
2001b178:	10330000 	addk	r1, r19, r0
2001b17c:	ea610004 	lwi	r19, r1, 4
2001b180:	ea810008 	lwi	r20, r1, 8
2001b184:	3021000c 	addik	r1, r1, 12
2001b188:	b60f0008 	rtsd	r15, 8
2001b18c:	80000000 	or	r0, r0, r0

2001b190 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2001b190:	3021fff0 	addik	r1, r1, -16
2001b194:	fa610008 	swi	r19, r1, 8
2001b198:	fa81000c 	swi	r20, r1, 12
2001b19c:	12610000 	addk	r19, r1, r0
2001b1a0:	96808000 	mfs	r20, rpc
2001b1a4:	b000dffe 	imm	-8194
2001b1a8:	329467bc 	addik	r20, r20, 26556
2001b1ac:	f8b30014 	swi	r5, r19, 20
2001b1b0:	f8d30018 	swi	r6, r19, 24
2001b1b4:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001b1b8:	f8130004 	swi	r0, r19, 4
2001b1bc:	b800005c 	bri	92		// 2001b218
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001b1c0:	e8730014 	lwi	r3, r19, 20
2001b1c4:	e8830000 	lwi	r4, r3, 0
2001b1c8:	e8730014 	lwi	r3, r19, 20
2001b1cc:	e8a3000c 	lwi	r5, r3, 12
2001b1d0:	e8730004 	lwi	r3, r19, 4
2001b1d4:	64630402 	bslli	r3, r3, 2
2001b1d8:	10651800 	addk	r3, r5, r3
2001b1dc:	e8a30000 	lwi	r5, r3, 0
2001b1e0:	e8730014 	lwi	r3, r19, 20
2001b1e4:	e8630010 	lwi	r3, r3, 16
2001b1e8:	e8630000 	lwi	r3, r3, 0
2001b1ec:	14632800 	rsubk	r3, r3, r5
2001b1f0:	10641800 	addk	r3, r4, r3
2001b1f4:	30830001 	addik	r4, r3, 1
2001b1f8:	e873001c 	lwi	r3, r19, 28
2001b1fc:	16441803 	cmpu	r18, r4, r3
2001b200:	bc52000c 	blti	r18, 12		// 2001b20c
            return 0;
2001b204:	10600000 	addk	r3, r0, r0
2001b208:	b8000024 	bri	36		// 2001b22c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001b20c:	e8730004 	lwi	r3, r19, 4
2001b210:	30630001 	addik	r3, r3, 1
2001b214:	f8730004 	swi	r3, r19, 4
2001b218:	e8930004 	lwi	r4, r19, 4
2001b21c:	e8730018 	lwi	r3, r19, 24
2001b220:	16432003 	cmpu	r18, r3, r4
2001b224:	bc52ff9c 	blti	r18, -100		// 2001b1c0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001b228:	30600001 	addik	r3, r0, 1
}
2001b22c:	10330000 	addk	r1, r19, r0
2001b230:	ea610008 	lwi	r19, r1, 8
2001b234:	ea81000c 	lwi	r20, r1, 12
2001b238:	30210010 	addik	r1, r1, 16
2001b23c:	b60f0008 	rtsd	r15, 8
2001b240:	80000000 	or	r0, r0, r0

2001b244 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001b244:	3021ffe8 	addik	r1, r1, -24
2001b248:	fa610010 	swi	r19, r1, 16
2001b24c:	fa810014 	swi	r20, r1, 20
2001b250:	12610000 	addk	r19, r1, r0
2001b254:	96808000 	mfs	r20, rpc
2001b258:	b000dffe 	imm	-8194
2001b25c:	32946708 	addik	r20, r20, 26376
2001b260:	f8b3001c 	swi	r5, r19, 28
2001b264:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001b268:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001b26c:	f8130004 	swi	r0, r19, 4
2001b270:	b8000054 	bri	84		// 2001b2c4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001b274:	e873001c 	lwi	r3, r19, 28
2001b278:	e8630010 	lwi	r3, r3, 16
2001b27c:	e8830000 	lwi	r4, r3, 0
2001b280:	e873001c 	lwi	r3, r19, 28
2001b284:	e8a3000c 	lwi	r5, r3, 12
2001b288:	e8730004 	lwi	r3, r19, 4
2001b28c:	64630402 	bslli	r3, r3, 2
2001b290:	10651800 	addk	r3, r5, r3
2001b294:	e8630000 	lwi	r3, r3, 0
2001b298:	14632000 	rsubk	r3, r3, r4
2001b29c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001b2a0:	e8930008 	lwi	r4, r19, 8
2001b2a4:	e873000c 	lwi	r3, r19, 12
2001b2a8:	16441803 	cmpu	r18, r4, r3
2001b2ac:	bcb20008 	bgei	r18, 8		// 2001b2b4
2001b2b0:	10640000 	addk	r3, r4, r0
2001b2b4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001b2b8:	e8730004 	lwi	r3, r19, 4
2001b2bc:	30630001 	addik	r3, r3, 1
2001b2c0:	f8730004 	swi	r3, r19, 4
2001b2c4:	e8930004 	lwi	r4, r19, 4
2001b2c8:	e8730020 	lwi	r3, r19, 32
2001b2cc:	16432003 	cmpu	r18, r3, r4
2001b2d0:	bc52ffa4 	blti	r18, -92		// 2001b274
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001b2d4:	e873001c 	lwi	r3, r19, 28
2001b2d8:	e8830000 	lwi	r4, r3, 0
2001b2dc:	e8730008 	lwi	r3, r19, 8
2001b2e0:	14632000 	rsubk	r3, r3, r4
}
2001b2e4:	10330000 	addk	r1, r19, r0
2001b2e8:	ea610010 	lwi	r19, r1, 16
2001b2ec:	ea810014 	lwi	r20, r1, 20
2001b2f0:	30210018 	addik	r1, r1, 24
2001b2f4:	b60f0008 	rtsd	r15, 8
2001b2f8:	80000000 	or	r0, r0, r0

2001b2fc <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001b2fc:	3021fff0 	addik	r1, r1, -16
2001b300:	fa610008 	swi	r19, r1, 8
2001b304:	fa81000c 	swi	r20, r1, 12
2001b308:	12610000 	addk	r19, r1, r0
2001b30c:	96808000 	mfs	r20, rpc
2001b310:	b000dffe 	imm	-8194
2001b314:	32946650 	addik	r20, r20, 26192
2001b318:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2001b31c:	e8730014 	lwi	r3, r19, 20
2001b320:	e8630010 	lwi	r3, r3, 16
2001b324:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001b328:	f8130004 	swi	r0, r19, 4
2001b32c:	b8000028 	bri	40		// 2001b354
        fifo->read_inds[i] = 0;
2001b330:	e8730014 	lwi	r3, r19, 20
2001b334:	e883000c 	lwi	r4, r3, 12
2001b338:	e8730004 	lwi	r3, r19, 4
2001b33c:	64630402 	bslli	r3, r3, 2
2001b340:	10641800 	addk	r3, r4, r3
2001b344:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001b348:	e8730004 	lwi	r3, r19, 4
2001b34c:	30630001 	addik	r3, r3, 1
2001b350:	f8730004 	swi	r3, r19, 4
2001b354:	e8730014 	lwi	r3, r19, 20
2001b358:	e8830008 	lwi	r4, r3, 8
2001b35c:	e8730004 	lwi	r3, r19, 4
2001b360:	16441803 	cmpu	r18, r4, r3
2001b364:	bc52ffcc 	blti	r18, -52		// 2001b330
        fifo->read_inds[i] = 0;
    }
}
2001b368:	10330000 	addk	r1, r19, r0
2001b36c:	ea610008 	lwi	r19, r1, 8
2001b370:	ea81000c 	lwi	r20, r1, 12
2001b374:	30210010 	addik	r1, r1, 16
2001b378:	b60f0008 	rtsd	r15, 8
2001b37c:	80000000 	or	r0, r0, r0

2001b380 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001b380:	3021fff0 	addik	r1, r1, -16
2001b384:	fa610008 	swi	r19, r1, 8
2001b388:	fa81000c 	swi	r20, r1, 12
2001b38c:	12610000 	addk	r19, r1, r0
2001b390:	96808000 	mfs	r20, rpc
2001b394:	b000dffe 	imm	-8194
2001b398:	329465cc 	addik	r20, r20, 26060
2001b39c:	f8b30014 	swi	r5, r19, 20
2001b3a0:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001b3a4:	e8730014 	lwi	r3, r19, 20
2001b3a8:	e8830004 	lwi	r4, r3, 4
2001b3ac:	e8730014 	lwi	r3, r19, 20
2001b3b0:	e8a3000c 	lwi	r5, r3, 12
2001b3b4:	e8730018 	lwi	r3, r19, 24
2001b3b8:	64630402 	bslli	r3, r3, 2
2001b3bc:	10651800 	addk	r3, r5, r3
2001b3c0:	e8a30000 	lwi	r5, r3, 0
2001b3c4:	e8730014 	lwi	r3, r19, 20
2001b3c8:	e8630000 	lwi	r3, r3, 0
2001b3cc:	3063ffff 	addik	r3, r3, -1
2001b3d0:	84651800 	and	r3, r5, r3
2001b3d4:	64630402 	bslli	r3, r3, 2
2001b3d8:	10641800 	addk	r3, r4, r3
2001b3dc:	e8630000 	lwi	r3, r3, 0
2001b3e0:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2001b3e4:	e8730014 	lwi	r3, r19, 20
2001b3e8:	e883000c 	lwi	r4, r3, 12
2001b3ec:	e8730018 	lwi	r3, r19, 24
2001b3f0:	64630402 	bslli	r3, r3, 2
2001b3f4:	10641800 	addk	r3, r4, r3
2001b3f8:	e8830000 	lwi	r4, r3, 0
2001b3fc:	30840001 	addik	r4, r4, 1
2001b400:	f8830000 	swi	r4, r3, 0
    return value;
2001b404:	e8730004 	lwi	r3, r19, 4
}
2001b408:	10330000 	addk	r1, r19, r0
2001b40c:	ea610008 	lwi	r19, r1, 8
2001b410:	ea81000c 	lwi	r20, r1, 12
2001b414:	30210010 	addik	r1, r1, 16
2001b418:	b60f0008 	rtsd	r15, 8
2001b41c:	80000000 	or	r0, r0, r0

2001b420 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001b420:	3021fff4 	addik	r1, r1, -12
2001b424:	fa610004 	swi	r19, r1, 4
2001b428:	fa810008 	swi	r20, r1, 8
2001b42c:	12610000 	addk	r19, r1, r0
2001b430:	96808000 	mfs	r20, rpc
2001b434:	b000dffe 	imm	-8194
2001b438:	3294652c 	addik	r20, r20, 25900
2001b43c:	f8b30010 	swi	r5, r19, 16
2001b440:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001b444:	e8730010 	lwi	r3, r19, 16
2001b448:	e8830004 	lwi	r4, r3, 4
2001b44c:	e8730010 	lwi	r3, r19, 16
2001b450:	e8630010 	lwi	r3, r3, 16
2001b454:	e8a30000 	lwi	r5, r3, 0
2001b458:	e8730010 	lwi	r3, r19, 16
2001b45c:	e8630000 	lwi	r3, r3, 0
2001b460:	3063ffff 	addik	r3, r3, -1
2001b464:	84651800 	and	r3, r5, r3
2001b468:	64630402 	bslli	r3, r3, 2
2001b46c:	10641800 	addk	r3, r4, r3
2001b470:	e8930014 	lwi	r4, r19, 20
2001b474:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2001b478:	e8730010 	lwi	r3, r19, 16
2001b47c:	e8630010 	lwi	r3, r3, 16
2001b480:	e8830000 	lwi	r4, r3, 0
2001b484:	30840001 	addik	r4, r4, 1
2001b488:	f8830000 	swi	r4, r3, 0
}
2001b48c:	10330000 	addk	r1, r19, r0
2001b490:	ea610004 	lwi	r19, r1, 4
2001b494:	ea810008 	lwi	r20, r1, 8
2001b498:	3021000c 	addik	r1, r1, 12
2001b49c:	b60f0008 	rtsd	r15, 8
2001b4a0:	80000000 	or	r0, r0, r0

2001b4a4 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001b4a4:	3021fff4 	addik	r1, r1, -12
2001b4a8:	fa610004 	swi	r19, r1, 4
2001b4ac:	fa810008 	swi	r20, r1, 8
2001b4b0:	12610000 	addk	r19, r1, r0
2001b4b4:	96808000 	mfs	r20, rpc
2001b4b8:	b000dffe 	imm	-8194
2001b4bc:	329464a8 	addik	r20, r20, 25768
2001b4c0:	f8b30010 	swi	r5, r19, 16
2001b4c4:	f8d30014 	swi	r6, r19, 20
2001b4c8:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001b4cc:	e8730010 	lwi	r3, r19, 16
2001b4d0:	e8630010 	lwi	r3, r3, 16
2001b4d4:	e8830000 	lwi	r4, r3, 0
2001b4d8:	e8730010 	lwi	r3, r19, 16
2001b4dc:	e8a3000c 	lwi	r5, r3, 12
2001b4e0:	e8730014 	lwi	r3, r19, 20
2001b4e4:	64630402 	bslli	r3, r3, 2
2001b4e8:	10651800 	addk	r3, r5, r3
2001b4ec:	e8630000 	lwi	r3, r3, 0
2001b4f0:	14a32000 	rsubk	r5, r3, r4
2001b4f4:	30600001 	addik	r3, r0, 1
2001b4f8:	e8930018 	lwi	r4, r19, 24
2001b4fc:	16442803 	cmpu	r18, r4, r5
2001b500:	bcb20008 	bgei	r18, 8		// 2001b508
2001b504:	10600000 	addk	r3, r0, r0
2001b508:	a46300ff 	andi	r3, r3, 255
}
2001b50c:	10330000 	addk	r1, r19, r0
2001b510:	ea610004 	lwi	r19, r1, 4
2001b514:	ea810008 	lwi	r20, r1, 8
2001b518:	3021000c 	addik	r1, r1, 12
2001b51c:	b60f0008 	rtsd	r15, 8
2001b520:	80000000 	or	r0, r0, r0

2001b524 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001b524:	3021fff4 	addik	r1, r1, -12
2001b528:	fa610004 	swi	r19, r1, 4
2001b52c:	fa810008 	swi	r20, r1, 8
2001b530:	12610000 	addk	r19, r1, r0
2001b534:	96808000 	mfs	r20, rpc
2001b538:	b000dffe 	imm	-8194
2001b53c:	32946428 	addik	r20, r20, 25640
2001b540:	f8b30010 	swi	r5, r19, 16
2001b544:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001b548:	e8730010 	lwi	r3, r19, 16
2001b54c:	e8630010 	lwi	r3, r3, 16
2001b550:	e8830000 	lwi	r4, r3, 0
2001b554:	e8730010 	lwi	r3, r19, 16
2001b558:	e8a3000c 	lwi	r5, r3, 12
2001b55c:	e8730014 	lwi	r3, r19, 20
2001b560:	64630402 	bslli	r3, r3, 2
2001b564:	10651800 	addk	r3, r5, r3
2001b568:	e8630000 	lwi	r3, r3, 0
2001b56c:	14632000 	rsubk	r3, r3, r4
}
2001b570:	10330000 	addk	r1, r19, r0
2001b574:	ea610004 	lwi	r19, r1, 4
2001b578:	ea810008 	lwi	r20, r1, 8
2001b57c:	3021000c 	addik	r1, r1, 12
2001b580:	b60f0008 	rtsd	r15, 8
2001b584:	80000000 	or	r0, r0, r0

2001b588 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2001b588:	3021fff0 	addik	r1, r1, -16
2001b58c:	fa610008 	swi	r19, r1, 8
2001b590:	fa81000c 	swi	r20, r1, 12
2001b594:	12610000 	addk	r19, r1, r0
2001b598:	96808000 	mfs	r20, rpc
2001b59c:	b000dffe 	imm	-8194
2001b5a0:	329463c4 	addik	r20, r20, 25540
2001b5a4:	f8b30014 	swi	r5, r19, 20
2001b5a8:	f8d30018 	swi	r6, r19, 24
2001b5ac:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001b5b0:	f8130004 	swi	r0, r19, 4
2001b5b4:	b800005c 	bri	92		// 2001b610
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001b5b8:	e8730014 	lwi	r3, r19, 20
2001b5bc:	e8830000 	lwi	r4, r3, 0
2001b5c0:	e8730014 	lwi	r3, r19, 20
2001b5c4:	e8a3000c 	lwi	r5, r3, 12
2001b5c8:	e8730004 	lwi	r3, r19, 4
2001b5cc:	64630402 	bslli	r3, r3, 2
2001b5d0:	10651800 	addk	r3, r5, r3
2001b5d4:	e8a30000 	lwi	r5, r3, 0
2001b5d8:	e8730014 	lwi	r3, r19, 20
2001b5dc:	e8630010 	lwi	r3, r3, 16
2001b5e0:	e8630000 	lwi	r3, r3, 0
2001b5e4:	14632800 	rsubk	r3, r3, r5
2001b5e8:	10641800 	addk	r3, r4, r3
2001b5ec:	30830001 	addik	r4, r3, 1
2001b5f0:	e873001c 	lwi	r3, r19, 28
2001b5f4:	16441803 	cmpu	r18, r4, r3
2001b5f8:	bc52000c 	blti	r18, 12		// 2001b604
            return 0;
2001b5fc:	10600000 	addk	r3, r0, r0
2001b600:	b8000024 	bri	36		// 2001b624
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001b604:	e8730004 	lwi	r3, r19, 4
2001b608:	30630001 	addik	r3, r3, 1
2001b60c:	f8730004 	swi	r3, r19, 4
2001b610:	e8930004 	lwi	r4, r19, 4
2001b614:	e8730018 	lwi	r3, r19, 24
2001b618:	16432003 	cmpu	r18, r3, r4
2001b61c:	bc52ff9c 	blti	r18, -100		// 2001b5b8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001b620:	30600001 	addik	r3, r0, 1
}
2001b624:	10330000 	addk	r1, r19, r0
2001b628:	ea610008 	lwi	r19, r1, 8
2001b62c:	ea81000c 	lwi	r20, r1, 12
2001b630:	30210010 	addik	r1, r1, 16
2001b634:	b60f0008 	rtsd	r15, 8
2001b638:	80000000 	or	r0, r0, r0

2001b63c <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001b63c:	3021ffe8 	addik	r1, r1, -24
2001b640:	fa610010 	swi	r19, r1, 16
2001b644:	fa810014 	swi	r20, r1, 20
2001b648:	12610000 	addk	r19, r1, r0
2001b64c:	96808000 	mfs	r20, rpc
2001b650:	b000dffe 	imm	-8194
2001b654:	32946310 	addik	r20, r20, 25360
2001b658:	f8b3001c 	swi	r5, r19, 28
2001b65c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001b660:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001b664:	f8130004 	swi	r0, r19, 4
2001b668:	b8000054 	bri	84		// 2001b6bc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001b66c:	e873001c 	lwi	r3, r19, 28
2001b670:	e8630010 	lwi	r3, r3, 16
2001b674:	e8830000 	lwi	r4, r3, 0
2001b678:	e873001c 	lwi	r3, r19, 28
2001b67c:	e8a3000c 	lwi	r5, r3, 12
2001b680:	e8730004 	lwi	r3, r19, 4
2001b684:	64630402 	bslli	r3, r3, 2
2001b688:	10651800 	addk	r3, r5, r3
2001b68c:	e8630000 	lwi	r3, r3, 0
2001b690:	14632000 	rsubk	r3, r3, r4
2001b694:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001b698:	e8930008 	lwi	r4, r19, 8
2001b69c:	e873000c 	lwi	r3, r19, 12
2001b6a0:	16441803 	cmpu	r18, r4, r3
2001b6a4:	bcb20008 	bgei	r18, 8		// 2001b6ac
2001b6a8:	10640000 	addk	r3, r4, r0
2001b6ac:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001b6b0:	e8730004 	lwi	r3, r19, 4
2001b6b4:	30630001 	addik	r3, r3, 1
2001b6b8:	f8730004 	swi	r3, r19, 4
2001b6bc:	e8930004 	lwi	r4, r19, 4
2001b6c0:	e8730020 	lwi	r3, r19, 32
2001b6c4:	16432003 	cmpu	r18, r3, r4
2001b6c8:	bc52ffa4 	blti	r18, -92		// 2001b66c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001b6cc:	e873001c 	lwi	r3, r19, 28
2001b6d0:	e8830000 	lwi	r4, r3, 0
2001b6d4:	e8730008 	lwi	r3, r19, 8
2001b6d8:	14632000 	rsubk	r3, r3, r4
}
2001b6dc:	10330000 	addk	r1, r19, r0
2001b6e0:	ea610010 	lwi	r19, r1, 16
2001b6e4:	ea810014 	lwi	r20, r1, 20
2001b6e8:	30210018 	addik	r1, r1, 24
2001b6ec:	b60f0008 	rtsd	r15, 8
2001b6f0:	80000000 	or	r0, r0, r0

2001b6f4 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001b6f4:	3021fff0 	addik	r1, r1, -16
2001b6f8:	fa610008 	swi	r19, r1, 8
2001b6fc:	fa81000c 	swi	r20, r1, 12
2001b700:	12610000 	addk	r19, r1, r0
2001b704:	96808000 	mfs	r20, rpc
2001b708:	b000dffe 	imm	-8194
2001b70c:	32946258 	addik	r20, r20, 25176
2001b710:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2001b714:	e8730014 	lwi	r3, r19, 20
2001b718:	e8630010 	lwi	r3, r3, 16
2001b71c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001b720:	f8130004 	swi	r0, r19, 4
2001b724:	b8000028 	bri	40		// 2001b74c
        fifo->read_inds[i] = 0;
2001b728:	e8730014 	lwi	r3, r19, 20
2001b72c:	e883000c 	lwi	r4, r3, 12
2001b730:	e8730004 	lwi	r3, r19, 4
2001b734:	64630402 	bslli	r3, r3, 2
2001b738:	10641800 	addk	r3, r4, r3
2001b73c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001b740:	e8730004 	lwi	r3, r19, 4
2001b744:	30630001 	addik	r3, r3, 1
2001b748:	f8730004 	swi	r3, r19, 4
2001b74c:	e8730014 	lwi	r3, r19, 20
2001b750:	e8830008 	lwi	r4, r3, 8
2001b754:	e8730004 	lwi	r3, r19, 4
2001b758:	16441803 	cmpu	r18, r4, r3
2001b75c:	bc52ffcc 	blti	r18, -52		// 2001b728
        fifo->read_inds[i] = 0;
    }
}
2001b760:	10330000 	addk	r1, r19, r0
2001b764:	ea610008 	lwi	r19, r1, 8
2001b768:	ea81000c 	lwi	r20, r1, 12
2001b76c:	30210010 	addik	r1, r1, 16
2001b770:	b60f0008 	rtsd	r15, 8
2001b774:	80000000 	or	r0, r0, r0

2001b778 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001b778:	3021ffec 	addik	r1, r1, -20
2001b77c:	fa61000c 	swi	r19, r1, 12
2001b780:	fa810010 	swi	r20, r1, 16
2001b784:	12610000 	addk	r19, r1, r0
2001b788:	96808000 	mfs	r20, rpc
2001b78c:	b000dffe 	imm	-8194
2001b790:	329461d4 	addik	r20, r20, 25044
2001b794:	f8b30018 	swi	r5, r19, 24
2001b798:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001b79c:	e8730018 	lwi	r3, r19, 24
2001b7a0:	e8830004 	lwi	r4, r3, 4
2001b7a4:	e8730018 	lwi	r3, r19, 24
2001b7a8:	e8a3000c 	lwi	r5, r3, 12
2001b7ac:	e873001c 	lwi	r3, r19, 28
2001b7b0:	64630402 	bslli	r3, r3, 2
2001b7b4:	10651800 	addk	r3, r5, r3
2001b7b8:	e8a30000 	lwi	r5, r3, 0
2001b7bc:	e8730018 	lwi	r3, r19, 24
2001b7c0:	e8630000 	lwi	r3, r3, 0
2001b7c4:	3063ffff 	addik	r3, r3, -1
2001b7c8:	84651800 	and	r3, r5, r3
2001b7cc:	64630403 	bslli	r3, r3, 3
2001b7d0:	10641800 	addk	r3, r4, r3
2001b7d4:	e8830000 	lwi	r4, r3, 0
2001b7d8:	e8a30004 	lwi	r5, r3, 4
2001b7dc:	f8930004 	swi	r4, r19, 4
2001b7e0:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2001b7e4:	e8730018 	lwi	r3, r19, 24
2001b7e8:	e883000c 	lwi	r4, r3, 12
2001b7ec:	e873001c 	lwi	r3, r19, 28
2001b7f0:	64630402 	bslli	r3, r3, 2
2001b7f4:	10641800 	addk	r3, r4, r3
2001b7f8:	e8830000 	lwi	r4, r3, 0
2001b7fc:	30840001 	addik	r4, r4, 1
2001b800:	f8830000 	swi	r4, r3, 0
    return value;
2001b804:	e8930004 	lwi	r4, r19, 4
2001b808:	e8b30008 	lwi	r5, r19, 8
}
2001b80c:	10640000 	addk	r3, r4, r0
2001b810:	10850000 	addk	r4, r5, r0
2001b814:	10330000 	addk	r1, r19, r0
2001b818:	ea61000c 	lwi	r19, r1, 12
2001b81c:	ea810010 	lwi	r20, r1, 16
2001b820:	30210014 	addik	r1, r1, 20
2001b824:	b60f0008 	rtsd	r15, 8
2001b828:	80000000 	or	r0, r0, r0

2001b82c <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001b82c:	3021fff4 	addik	r1, r1, -12
2001b830:	fa610004 	swi	r19, r1, 4
2001b834:	fa810008 	swi	r20, r1, 8
2001b838:	12610000 	addk	r19, r1, r0
2001b83c:	96808000 	mfs	r20, rpc
2001b840:	b000dffe 	imm	-8194
2001b844:	32946120 	addik	r20, r20, 24864
2001b848:	f8b30010 	swi	r5, r19, 16
2001b84c:	f8d30014 	swi	r6, r19, 20
2001b850:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001b854:	e8730010 	lwi	r3, r19, 16
2001b858:	e8830004 	lwi	r4, r3, 4
2001b85c:	e8730010 	lwi	r3, r19, 16
2001b860:	e8630010 	lwi	r3, r3, 16
2001b864:	e8a30000 	lwi	r5, r3, 0
2001b868:	e8730010 	lwi	r3, r19, 16
2001b86c:	e8630000 	lwi	r3, r3, 0
2001b870:	3063ffff 	addik	r3, r3, -1
2001b874:	84651800 	and	r3, r5, r3
2001b878:	64630403 	bslli	r3, r3, 3
2001b87c:	10641800 	addk	r3, r4, r3
2001b880:	e8930014 	lwi	r4, r19, 20
2001b884:	e8b30018 	lwi	r5, r19, 24
2001b888:	f8830000 	swi	r4, r3, 0
2001b88c:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2001b890:	e8730010 	lwi	r3, r19, 16
2001b894:	e8630010 	lwi	r3, r3, 16
2001b898:	e8830000 	lwi	r4, r3, 0
2001b89c:	30840001 	addik	r4, r4, 1
2001b8a0:	f8830000 	swi	r4, r3, 0
}
2001b8a4:	10330000 	addk	r1, r19, r0
2001b8a8:	ea610004 	lwi	r19, r1, 4
2001b8ac:	ea810008 	lwi	r20, r1, 8
2001b8b0:	3021000c 	addik	r1, r1, 12
2001b8b4:	b60f0008 	rtsd	r15, 8
2001b8b8:	80000000 	or	r0, r0, r0

2001b8bc <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001b8bc:	3021fff4 	addik	r1, r1, -12
2001b8c0:	fa610004 	swi	r19, r1, 4
2001b8c4:	fa810008 	swi	r20, r1, 8
2001b8c8:	12610000 	addk	r19, r1, r0
2001b8cc:	96808000 	mfs	r20, rpc
2001b8d0:	b000dffe 	imm	-8194
2001b8d4:	32946090 	addik	r20, r20, 24720
2001b8d8:	f8b30010 	swi	r5, r19, 16
2001b8dc:	f8d30014 	swi	r6, r19, 20
2001b8e0:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001b8e4:	e8730010 	lwi	r3, r19, 16
2001b8e8:	e8630010 	lwi	r3, r3, 16
2001b8ec:	e8830000 	lwi	r4, r3, 0
2001b8f0:	e8730010 	lwi	r3, r19, 16
2001b8f4:	e8a3000c 	lwi	r5, r3, 12
2001b8f8:	e8730014 	lwi	r3, r19, 20
2001b8fc:	64630402 	bslli	r3, r3, 2
2001b900:	10651800 	addk	r3, r5, r3
2001b904:	e8630000 	lwi	r3, r3, 0
2001b908:	14a32000 	rsubk	r5, r3, r4
2001b90c:	30600001 	addik	r3, r0, 1
2001b910:	e8930018 	lwi	r4, r19, 24
2001b914:	16442803 	cmpu	r18, r4, r5
2001b918:	bcb20008 	bgei	r18, 8		// 2001b920
2001b91c:	10600000 	addk	r3, r0, r0
2001b920:	a46300ff 	andi	r3, r3, 255
}
2001b924:	10330000 	addk	r1, r19, r0
2001b928:	ea610004 	lwi	r19, r1, 4
2001b92c:	ea810008 	lwi	r20, r1, 8
2001b930:	3021000c 	addik	r1, r1, 12
2001b934:	b60f0008 	rtsd	r15, 8
2001b938:	80000000 	or	r0, r0, r0

2001b93c <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001b93c:	3021fff4 	addik	r1, r1, -12
2001b940:	fa610004 	swi	r19, r1, 4
2001b944:	fa810008 	swi	r20, r1, 8
2001b948:	12610000 	addk	r19, r1, r0
2001b94c:	96808000 	mfs	r20, rpc
2001b950:	b000dffe 	imm	-8194
2001b954:	32946010 	addik	r20, r20, 24592
2001b958:	f8b30010 	swi	r5, r19, 16
2001b95c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001b960:	e8730010 	lwi	r3, r19, 16
2001b964:	e8630010 	lwi	r3, r3, 16
2001b968:	e8830000 	lwi	r4, r3, 0
2001b96c:	e8730010 	lwi	r3, r19, 16
2001b970:	e8a3000c 	lwi	r5, r3, 12
2001b974:	e8730014 	lwi	r3, r19, 20
2001b978:	64630402 	bslli	r3, r3, 2
2001b97c:	10651800 	addk	r3, r5, r3
2001b980:	e8630000 	lwi	r3, r3, 0
2001b984:	14632000 	rsubk	r3, r3, r4
}
2001b988:	10330000 	addk	r1, r19, r0
2001b98c:	ea610004 	lwi	r19, r1, 4
2001b990:	ea810008 	lwi	r20, r1, 8
2001b994:	3021000c 	addik	r1, r1, 12
2001b998:	b60f0008 	rtsd	r15, 8
2001b99c:	80000000 	or	r0, r0, r0

2001b9a0 <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2001b9a0:	3021fff0 	addik	r1, r1, -16
2001b9a4:	fa610008 	swi	r19, r1, 8
2001b9a8:	fa81000c 	swi	r20, r1, 12
2001b9ac:	12610000 	addk	r19, r1, r0
2001b9b0:	96808000 	mfs	r20, rpc
2001b9b4:	b000dffe 	imm	-8194
2001b9b8:	32945fac 	addik	r20, r20, 24492
2001b9bc:	f8b30014 	swi	r5, r19, 20
2001b9c0:	f8d30018 	swi	r6, r19, 24
2001b9c4:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001b9c8:	f8130004 	swi	r0, r19, 4
2001b9cc:	b800005c 	bri	92		// 2001ba28
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001b9d0:	e8730014 	lwi	r3, r19, 20
2001b9d4:	e8830000 	lwi	r4, r3, 0
2001b9d8:	e8730014 	lwi	r3, r19, 20
2001b9dc:	e8a3000c 	lwi	r5, r3, 12
2001b9e0:	e8730004 	lwi	r3, r19, 4
2001b9e4:	64630402 	bslli	r3, r3, 2
2001b9e8:	10651800 	addk	r3, r5, r3
2001b9ec:	e8a30000 	lwi	r5, r3, 0
2001b9f0:	e8730014 	lwi	r3, r19, 20
2001b9f4:	e8630010 	lwi	r3, r3, 16
2001b9f8:	e8630000 	lwi	r3, r3, 0
2001b9fc:	14632800 	rsubk	r3, r3, r5
2001ba00:	10641800 	addk	r3, r4, r3
2001ba04:	30830001 	addik	r4, r3, 1
2001ba08:	e873001c 	lwi	r3, r19, 28
2001ba0c:	16441803 	cmpu	r18, r4, r3
2001ba10:	bc52000c 	blti	r18, 12		// 2001ba1c
            return 0;
2001ba14:	10600000 	addk	r3, r0, r0
2001ba18:	b8000024 	bri	36		// 2001ba3c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001ba1c:	e8730004 	lwi	r3, r19, 4
2001ba20:	30630001 	addik	r3, r3, 1
2001ba24:	f8730004 	swi	r3, r19, 4
2001ba28:	e8930004 	lwi	r4, r19, 4
2001ba2c:	e8730018 	lwi	r3, r19, 24
2001ba30:	16432003 	cmpu	r18, r3, r4
2001ba34:	bc52ff9c 	blti	r18, -100		// 2001b9d0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001ba38:	30600001 	addik	r3, r0, 1
}
2001ba3c:	10330000 	addk	r1, r19, r0
2001ba40:	ea610008 	lwi	r19, r1, 8
2001ba44:	ea81000c 	lwi	r20, r1, 12
2001ba48:	30210010 	addik	r1, r1, 16
2001ba4c:	b60f0008 	rtsd	r15, 8
2001ba50:	80000000 	or	r0, r0, r0

2001ba54 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001ba54:	3021ffe8 	addik	r1, r1, -24
2001ba58:	fa610010 	swi	r19, r1, 16
2001ba5c:	fa810014 	swi	r20, r1, 20
2001ba60:	12610000 	addk	r19, r1, r0
2001ba64:	96808000 	mfs	r20, rpc
2001ba68:	b000dffe 	imm	-8194
2001ba6c:	32945ef8 	addik	r20, r20, 24312
2001ba70:	f8b3001c 	swi	r5, r19, 28
2001ba74:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001ba78:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001ba7c:	f8130004 	swi	r0, r19, 4
2001ba80:	b8000054 	bri	84		// 2001bad4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001ba84:	e873001c 	lwi	r3, r19, 28
2001ba88:	e8630010 	lwi	r3, r3, 16
2001ba8c:	e8830000 	lwi	r4, r3, 0
2001ba90:	e873001c 	lwi	r3, r19, 28
2001ba94:	e8a3000c 	lwi	r5, r3, 12
2001ba98:	e8730004 	lwi	r3, r19, 4
2001ba9c:	64630402 	bslli	r3, r3, 2
2001baa0:	10651800 	addk	r3, r5, r3
2001baa4:	e8630000 	lwi	r3, r3, 0
2001baa8:	14632000 	rsubk	r3, r3, r4
2001baac:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001bab0:	e8930008 	lwi	r4, r19, 8
2001bab4:	e873000c 	lwi	r3, r19, 12
2001bab8:	16441803 	cmpu	r18, r4, r3
2001babc:	bcb20008 	bgei	r18, 8		// 2001bac4
2001bac0:	10640000 	addk	r3, r4, r0
2001bac4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001bac8:	e8730004 	lwi	r3, r19, 4
2001bacc:	30630001 	addik	r3, r3, 1
2001bad0:	f8730004 	swi	r3, r19, 4
2001bad4:	e8930004 	lwi	r4, r19, 4
2001bad8:	e8730020 	lwi	r3, r19, 32
2001badc:	16432003 	cmpu	r18, r3, r4
2001bae0:	bc52ffa4 	blti	r18, -92		// 2001ba84
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001bae4:	e873001c 	lwi	r3, r19, 28
2001bae8:	e8830000 	lwi	r4, r3, 0
2001baec:	e8730008 	lwi	r3, r19, 8
2001baf0:	14632000 	rsubk	r3, r3, r4
}
2001baf4:	10330000 	addk	r1, r19, r0
2001baf8:	ea610010 	lwi	r19, r1, 16
2001bafc:	ea810014 	lwi	r20, r1, 20
2001bb00:	30210018 	addik	r1, r1, 24
2001bb04:	b60f0008 	rtsd	r15, 8
2001bb08:	80000000 	or	r0, r0, r0

2001bb0c <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001bb0c:	3021fff0 	addik	r1, r1, -16
2001bb10:	fa610008 	swi	r19, r1, 8
2001bb14:	fa81000c 	swi	r20, r1, 12
2001bb18:	12610000 	addk	r19, r1, r0
2001bb1c:	96808000 	mfs	r20, rpc
2001bb20:	b000dffe 	imm	-8194
2001bb24:	32945e40 	addik	r20, r20, 24128
2001bb28:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2001bb2c:	e8730014 	lwi	r3, r19, 20
2001bb30:	e8630010 	lwi	r3, r3, 16
2001bb34:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001bb38:	f8130004 	swi	r0, r19, 4
2001bb3c:	b8000028 	bri	40		// 2001bb64
        fifo->read_inds[i] = 0;
2001bb40:	e8730014 	lwi	r3, r19, 20
2001bb44:	e883000c 	lwi	r4, r3, 12
2001bb48:	e8730004 	lwi	r3, r19, 4
2001bb4c:	64630402 	bslli	r3, r3, 2
2001bb50:	10641800 	addk	r3, r4, r3
2001bb54:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001bb58:	e8730004 	lwi	r3, r19, 4
2001bb5c:	30630001 	addik	r3, r3, 1
2001bb60:	f8730004 	swi	r3, r19, 4
2001bb64:	e8730014 	lwi	r3, r19, 20
2001bb68:	e8830008 	lwi	r4, r3, 8
2001bb6c:	e8730004 	lwi	r3, r19, 4
2001bb70:	16441803 	cmpu	r18, r4, r3
2001bb74:	bc52ffcc 	blti	r18, -52		// 2001bb40
        fifo->read_inds[i] = 0;
    }
}
2001bb78:	10330000 	addk	r1, r19, r0
2001bb7c:	ea610008 	lwi	r19, r1, 8
2001bb80:	ea81000c 	lwi	r20, r1, 12
2001bb84:	30210010 	addik	r1, r1, 16
2001bb88:	b60f0008 	rtsd	r15, 8
2001bb8c:	80000000 	or	r0, r0, r0

2001bb90 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001bb90:	3021fff0 	addik	r1, r1, -16
2001bb94:	fa610008 	swi	r19, r1, 8
2001bb98:	fa81000c 	swi	r20, r1, 12
2001bb9c:	12610000 	addk	r19, r1, r0
2001bba0:	96808000 	mfs	r20, rpc
2001bba4:	b000dffe 	imm	-8194
2001bba8:	32945dbc 	addik	r20, r20, 23996
2001bbac:	f8b30014 	swi	r5, r19, 20
2001bbb0:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001bbb4:	e8730014 	lwi	r3, r19, 20
2001bbb8:	e8830004 	lwi	r4, r3, 4
2001bbbc:	e8730014 	lwi	r3, r19, 20
2001bbc0:	e8a3000c 	lwi	r5, r3, 12
2001bbc4:	e8730018 	lwi	r3, r19, 24
2001bbc8:	64630402 	bslli	r3, r3, 2
2001bbcc:	10651800 	addk	r3, r5, r3
2001bbd0:	e8a30000 	lwi	r5, r3, 0
2001bbd4:	e8730014 	lwi	r3, r19, 20
2001bbd8:	e8630000 	lwi	r3, r3, 0
2001bbdc:	3063ffff 	addik	r3, r3, -1
2001bbe0:	84651800 	and	r3, r5, r3
2001bbe4:	10641800 	addk	r3, r4, r3
2001bbe8:	e0630000 	lbui	r3, r3, 0
2001bbec:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2001bbf0:	e8730014 	lwi	r3, r19, 20
2001bbf4:	e883000c 	lwi	r4, r3, 12
2001bbf8:	e8730018 	lwi	r3, r19, 24
2001bbfc:	64630402 	bslli	r3, r3, 2
2001bc00:	10641800 	addk	r3, r4, r3
2001bc04:	e8830000 	lwi	r4, r3, 0
2001bc08:	30840001 	addik	r4, r4, 1
2001bc0c:	f8830000 	swi	r4, r3, 0
    return value;
2001bc10:	e0730004 	lbui	r3, r19, 4
}
2001bc14:	10330000 	addk	r1, r19, r0
2001bc18:	ea610008 	lwi	r19, r1, 8
2001bc1c:	ea81000c 	lwi	r20, r1, 12
2001bc20:	30210010 	addik	r1, r1, 16
2001bc24:	b60f0008 	rtsd	r15, 8
2001bc28:	80000000 	or	r0, r0, r0

2001bc2c <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001bc2c:	3021fff4 	addik	r1, r1, -12
2001bc30:	fa610004 	swi	r19, r1, 4
2001bc34:	fa810008 	swi	r20, r1, 8
2001bc38:	12610000 	addk	r19, r1, r0
2001bc3c:	96808000 	mfs	r20, rpc
2001bc40:	b000dffe 	imm	-8194
2001bc44:	32945d20 	addik	r20, r20, 23840
2001bc48:	f8b30010 	swi	r5, r19, 16
2001bc4c:	10660000 	addk	r3, r6, r0
2001bc50:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001bc54:	e8730010 	lwi	r3, r19, 16
2001bc58:	e8830004 	lwi	r4, r3, 4
2001bc5c:	e8730010 	lwi	r3, r19, 16
2001bc60:	e8630010 	lwi	r3, r3, 16
2001bc64:	e8a30000 	lwi	r5, r3, 0
2001bc68:	e8730010 	lwi	r3, r19, 16
2001bc6c:	e8630000 	lwi	r3, r3, 0
2001bc70:	3063ffff 	addik	r3, r3, -1
2001bc74:	84651800 	and	r3, r5, r3
2001bc78:	10641800 	addk	r3, r4, r3
2001bc7c:	e0930014 	lbui	r4, r19, 20
2001bc80:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2001bc84:	e8730010 	lwi	r3, r19, 16
2001bc88:	e8630010 	lwi	r3, r3, 16
2001bc8c:	e8830000 	lwi	r4, r3, 0
2001bc90:	30840001 	addik	r4, r4, 1
2001bc94:	f8830000 	swi	r4, r3, 0
}
2001bc98:	10330000 	addk	r1, r19, r0
2001bc9c:	ea610004 	lwi	r19, r1, 4
2001bca0:	ea810008 	lwi	r20, r1, 8
2001bca4:	3021000c 	addik	r1, r1, 12
2001bca8:	b60f0008 	rtsd	r15, 8
2001bcac:	80000000 	or	r0, r0, r0

2001bcb0 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001bcb0:	3021fff4 	addik	r1, r1, -12
2001bcb4:	fa610004 	swi	r19, r1, 4
2001bcb8:	fa810008 	swi	r20, r1, 8
2001bcbc:	12610000 	addk	r19, r1, r0
2001bcc0:	96808000 	mfs	r20, rpc
2001bcc4:	b000dffe 	imm	-8194
2001bcc8:	32945c9c 	addik	r20, r20, 23708
2001bccc:	f8b30010 	swi	r5, r19, 16
2001bcd0:	f8d30014 	swi	r6, r19, 20
2001bcd4:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001bcd8:	e8730010 	lwi	r3, r19, 16
2001bcdc:	e8630010 	lwi	r3, r3, 16
2001bce0:	e8830000 	lwi	r4, r3, 0
2001bce4:	e8730010 	lwi	r3, r19, 16
2001bce8:	e8a3000c 	lwi	r5, r3, 12
2001bcec:	e8730014 	lwi	r3, r19, 20
2001bcf0:	64630402 	bslli	r3, r3, 2
2001bcf4:	10651800 	addk	r3, r5, r3
2001bcf8:	e8630000 	lwi	r3, r3, 0
2001bcfc:	14a32000 	rsubk	r5, r3, r4
2001bd00:	30600001 	addik	r3, r0, 1
2001bd04:	e8930018 	lwi	r4, r19, 24
2001bd08:	16442803 	cmpu	r18, r4, r5
2001bd0c:	bcb20008 	bgei	r18, 8		// 2001bd14
2001bd10:	10600000 	addk	r3, r0, r0
2001bd14:	a46300ff 	andi	r3, r3, 255
}
2001bd18:	10330000 	addk	r1, r19, r0
2001bd1c:	ea610004 	lwi	r19, r1, 4
2001bd20:	ea810008 	lwi	r20, r1, 8
2001bd24:	3021000c 	addik	r1, r1, 12
2001bd28:	b60f0008 	rtsd	r15, 8
2001bd2c:	80000000 	or	r0, r0, r0

2001bd30 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001bd30:	3021fff4 	addik	r1, r1, -12
2001bd34:	fa610004 	swi	r19, r1, 4
2001bd38:	fa810008 	swi	r20, r1, 8
2001bd3c:	12610000 	addk	r19, r1, r0
2001bd40:	96808000 	mfs	r20, rpc
2001bd44:	b000dffe 	imm	-8194
2001bd48:	32945c1c 	addik	r20, r20, 23580
2001bd4c:	f8b30010 	swi	r5, r19, 16
2001bd50:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001bd54:	e8730010 	lwi	r3, r19, 16
2001bd58:	e8630010 	lwi	r3, r3, 16
2001bd5c:	e8830000 	lwi	r4, r3, 0
2001bd60:	e8730010 	lwi	r3, r19, 16
2001bd64:	e8a3000c 	lwi	r5, r3, 12
2001bd68:	e8730014 	lwi	r3, r19, 20
2001bd6c:	64630402 	bslli	r3, r3, 2
2001bd70:	10651800 	addk	r3, r5, r3
2001bd74:	e8630000 	lwi	r3, r3, 0
2001bd78:	14632000 	rsubk	r3, r3, r4
}
2001bd7c:	10330000 	addk	r1, r19, r0
2001bd80:	ea610004 	lwi	r19, r1, 4
2001bd84:	ea810008 	lwi	r20, r1, 8
2001bd88:	3021000c 	addik	r1, r1, 12
2001bd8c:	b60f0008 	rtsd	r15, 8
2001bd90:	80000000 	or	r0, r0, r0

2001bd94 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2001bd94:	3021fff0 	addik	r1, r1, -16
2001bd98:	fa610008 	swi	r19, r1, 8
2001bd9c:	fa81000c 	swi	r20, r1, 12
2001bda0:	12610000 	addk	r19, r1, r0
2001bda4:	96808000 	mfs	r20, rpc
2001bda8:	b000dffe 	imm	-8194
2001bdac:	32945bb8 	addik	r20, r20, 23480
2001bdb0:	f8b30014 	swi	r5, r19, 20
2001bdb4:	f8d30018 	swi	r6, r19, 24
2001bdb8:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001bdbc:	f8130004 	swi	r0, r19, 4
2001bdc0:	b800005c 	bri	92		// 2001be1c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001bdc4:	e8730014 	lwi	r3, r19, 20
2001bdc8:	e8830000 	lwi	r4, r3, 0
2001bdcc:	e8730014 	lwi	r3, r19, 20
2001bdd0:	e8a3000c 	lwi	r5, r3, 12
2001bdd4:	e8730004 	lwi	r3, r19, 4
2001bdd8:	64630402 	bslli	r3, r3, 2
2001bddc:	10651800 	addk	r3, r5, r3
2001bde0:	e8a30000 	lwi	r5, r3, 0
2001bde4:	e8730014 	lwi	r3, r19, 20
2001bde8:	e8630010 	lwi	r3, r3, 16
2001bdec:	e8630000 	lwi	r3, r3, 0
2001bdf0:	14632800 	rsubk	r3, r3, r5
2001bdf4:	10641800 	addk	r3, r4, r3
2001bdf8:	30830001 	addik	r4, r3, 1
2001bdfc:	e873001c 	lwi	r3, r19, 28
2001be00:	16441803 	cmpu	r18, r4, r3
2001be04:	bc52000c 	blti	r18, 12		// 2001be10
            return 0;
2001be08:	10600000 	addk	r3, r0, r0
2001be0c:	b8000024 	bri	36		// 2001be30
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001be10:	e8730004 	lwi	r3, r19, 4
2001be14:	30630001 	addik	r3, r3, 1
2001be18:	f8730004 	swi	r3, r19, 4
2001be1c:	e8930004 	lwi	r4, r19, 4
2001be20:	e8730018 	lwi	r3, r19, 24
2001be24:	16432003 	cmpu	r18, r3, r4
2001be28:	bc52ff9c 	blti	r18, -100		// 2001bdc4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001be2c:	30600001 	addik	r3, r0, 1
}
2001be30:	10330000 	addk	r1, r19, r0
2001be34:	ea610008 	lwi	r19, r1, 8
2001be38:	ea81000c 	lwi	r20, r1, 12
2001be3c:	30210010 	addik	r1, r1, 16
2001be40:	b60f0008 	rtsd	r15, 8
2001be44:	80000000 	or	r0, r0, r0

2001be48 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001be48:	3021ffe8 	addik	r1, r1, -24
2001be4c:	fa610010 	swi	r19, r1, 16
2001be50:	fa810014 	swi	r20, r1, 20
2001be54:	12610000 	addk	r19, r1, r0
2001be58:	96808000 	mfs	r20, rpc
2001be5c:	b000dffe 	imm	-8194
2001be60:	32945b04 	addik	r20, r20, 23300
2001be64:	f8b3001c 	swi	r5, r19, 28
2001be68:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001be6c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001be70:	f8130004 	swi	r0, r19, 4
2001be74:	b8000054 	bri	84		// 2001bec8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001be78:	e873001c 	lwi	r3, r19, 28
2001be7c:	e8630010 	lwi	r3, r3, 16
2001be80:	e8830000 	lwi	r4, r3, 0
2001be84:	e873001c 	lwi	r3, r19, 28
2001be88:	e8a3000c 	lwi	r5, r3, 12
2001be8c:	e8730004 	lwi	r3, r19, 4
2001be90:	64630402 	bslli	r3, r3, 2
2001be94:	10651800 	addk	r3, r5, r3
2001be98:	e8630000 	lwi	r3, r3, 0
2001be9c:	14632000 	rsubk	r3, r3, r4
2001bea0:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001bea4:	e8930008 	lwi	r4, r19, 8
2001bea8:	e873000c 	lwi	r3, r19, 12
2001beac:	16441803 	cmpu	r18, r4, r3
2001beb0:	bcb20008 	bgei	r18, 8		// 2001beb8
2001beb4:	10640000 	addk	r3, r4, r0
2001beb8:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001bebc:	e8730004 	lwi	r3, r19, 4
2001bec0:	30630001 	addik	r3, r3, 1
2001bec4:	f8730004 	swi	r3, r19, 4
2001bec8:	e8930004 	lwi	r4, r19, 4
2001becc:	e8730020 	lwi	r3, r19, 32
2001bed0:	16432003 	cmpu	r18, r3, r4
2001bed4:	bc52ffa4 	blti	r18, -92		// 2001be78
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001bed8:	e873001c 	lwi	r3, r19, 28
2001bedc:	e8830000 	lwi	r4, r3, 0
2001bee0:	e8730008 	lwi	r3, r19, 8
2001bee4:	14632000 	rsubk	r3, r3, r4
}
2001bee8:	10330000 	addk	r1, r19, r0
2001beec:	ea610010 	lwi	r19, r1, 16
2001bef0:	ea810014 	lwi	r20, r1, 20
2001bef4:	30210018 	addik	r1, r1, 24
2001bef8:	b60f0008 	rtsd	r15, 8
2001befc:	80000000 	or	r0, r0, r0

2001bf00 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001bf00:	3021fff0 	addik	r1, r1, -16
2001bf04:	fa610008 	swi	r19, r1, 8
2001bf08:	fa81000c 	swi	r20, r1, 12
2001bf0c:	12610000 	addk	r19, r1, r0
2001bf10:	96808000 	mfs	r20, rpc
2001bf14:	b000dffe 	imm	-8194
2001bf18:	32945a4c 	addik	r20, r20, 23116
2001bf1c:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2001bf20:	e8730014 	lwi	r3, r19, 20
2001bf24:	e8630010 	lwi	r3, r3, 16
2001bf28:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001bf2c:	f8130004 	swi	r0, r19, 4
2001bf30:	b8000028 	bri	40		// 2001bf58
        fifo->read_inds[i] = 0;
2001bf34:	e8730014 	lwi	r3, r19, 20
2001bf38:	e883000c 	lwi	r4, r3, 12
2001bf3c:	e8730004 	lwi	r3, r19, 4
2001bf40:	64630402 	bslli	r3, r3, 2
2001bf44:	10641800 	addk	r3, r4, r3
2001bf48:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001bf4c:	e8730004 	lwi	r3, r19, 4
2001bf50:	30630001 	addik	r3, r3, 1
2001bf54:	f8730004 	swi	r3, r19, 4
2001bf58:	e8730014 	lwi	r3, r19, 20
2001bf5c:	e8830008 	lwi	r4, r3, 8
2001bf60:	e8730004 	lwi	r3, r19, 4
2001bf64:	16441803 	cmpu	r18, r4, r3
2001bf68:	bc52ffcc 	blti	r18, -52		// 2001bf34
        fifo->read_inds[i] = 0;
    }
}
2001bf6c:	10330000 	addk	r1, r19, r0
2001bf70:	ea610008 	lwi	r19, r1, 8
2001bf74:	ea81000c 	lwi	r20, r1, 12
2001bf78:	30210010 	addik	r1, r1, 16
2001bf7c:	b60f0008 	rtsd	r15, 8
2001bf80:	80000000 	or	r0, r0, r0

2001bf84 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001bf84:	3021fff0 	addik	r1, r1, -16
2001bf88:	fa610008 	swi	r19, r1, 8
2001bf8c:	fa81000c 	swi	r20, r1, 12
2001bf90:	12610000 	addk	r19, r1, r0
2001bf94:	96808000 	mfs	r20, rpc
2001bf98:	b000dffe 	imm	-8194
2001bf9c:	329459c8 	addik	r20, r20, 22984
2001bfa0:	f8b30014 	swi	r5, r19, 20
2001bfa4:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001bfa8:	e8730014 	lwi	r3, r19, 20
2001bfac:	e8830004 	lwi	r4, r3, 4
2001bfb0:	e8730014 	lwi	r3, r19, 20
2001bfb4:	e8a3000c 	lwi	r5, r3, 12
2001bfb8:	e8730018 	lwi	r3, r19, 24
2001bfbc:	64630402 	bslli	r3, r3, 2
2001bfc0:	10651800 	addk	r3, r5, r3
2001bfc4:	e8a30000 	lwi	r5, r3, 0
2001bfc8:	e8730014 	lwi	r3, r19, 20
2001bfcc:	e8630000 	lwi	r3, r3, 0
2001bfd0:	3063ffff 	addik	r3, r3, -1
2001bfd4:	84651800 	and	r3, r5, r3
2001bfd8:	10631800 	addk	r3, r3, r3
2001bfdc:	10641800 	addk	r3, r4, r3
2001bfe0:	e4630000 	lhui	r3, r3, 0
2001bfe4:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2001bfe8:	e8730014 	lwi	r3, r19, 20
2001bfec:	e883000c 	lwi	r4, r3, 12
2001bff0:	e8730018 	lwi	r3, r19, 24
2001bff4:	64630402 	bslli	r3, r3, 2
2001bff8:	10641800 	addk	r3, r4, r3
2001bffc:	e8830000 	lwi	r4, r3, 0
2001c000:	30840001 	addik	r4, r4, 1
2001c004:	f8830000 	swi	r4, r3, 0
    return value;
2001c008:	e4730004 	lhui	r3, r19, 4
}
2001c00c:	10330000 	addk	r1, r19, r0
2001c010:	ea610008 	lwi	r19, r1, 8
2001c014:	ea81000c 	lwi	r20, r1, 12
2001c018:	30210010 	addik	r1, r1, 16
2001c01c:	b60f0008 	rtsd	r15, 8
2001c020:	80000000 	or	r0, r0, r0

2001c024 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001c024:	3021fff4 	addik	r1, r1, -12
2001c028:	fa610004 	swi	r19, r1, 4
2001c02c:	fa810008 	swi	r20, r1, 8
2001c030:	12610000 	addk	r19, r1, r0
2001c034:	96808000 	mfs	r20, rpc
2001c038:	b000dffe 	imm	-8194
2001c03c:	32945928 	addik	r20, r20, 22824
2001c040:	f8b30010 	swi	r5, r19, 16
2001c044:	10660000 	addk	r3, r6, r0
2001c048:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001c04c:	e8730010 	lwi	r3, r19, 16
2001c050:	e8830004 	lwi	r4, r3, 4
2001c054:	e8730010 	lwi	r3, r19, 16
2001c058:	e8630010 	lwi	r3, r3, 16
2001c05c:	e8a30000 	lwi	r5, r3, 0
2001c060:	e8730010 	lwi	r3, r19, 16
2001c064:	e8630000 	lwi	r3, r3, 0
2001c068:	3063ffff 	addik	r3, r3, -1
2001c06c:	84651800 	and	r3, r5, r3
2001c070:	10631800 	addk	r3, r3, r3
2001c074:	10641800 	addk	r3, r4, r3
2001c078:	e4930014 	lhui	r4, r19, 20
2001c07c:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2001c080:	e8730010 	lwi	r3, r19, 16
2001c084:	e8630010 	lwi	r3, r3, 16
2001c088:	e8830000 	lwi	r4, r3, 0
2001c08c:	30840001 	addik	r4, r4, 1
2001c090:	f8830000 	swi	r4, r3, 0
}
2001c094:	10330000 	addk	r1, r19, r0
2001c098:	ea610004 	lwi	r19, r1, 4
2001c09c:	ea810008 	lwi	r20, r1, 8
2001c0a0:	3021000c 	addik	r1, r1, 12
2001c0a4:	b60f0008 	rtsd	r15, 8
2001c0a8:	80000000 	or	r0, r0, r0

2001c0ac <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001c0ac:	3021fff4 	addik	r1, r1, -12
2001c0b0:	fa610004 	swi	r19, r1, 4
2001c0b4:	fa810008 	swi	r20, r1, 8
2001c0b8:	12610000 	addk	r19, r1, r0
2001c0bc:	96808000 	mfs	r20, rpc
2001c0c0:	b000dffe 	imm	-8194
2001c0c4:	329458a0 	addik	r20, r20, 22688
2001c0c8:	f8b30010 	swi	r5, r19, 16
2001c0cc:	f8d30014 	swi	r6, r19, 20
2001c0d0:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001c0d4:	e8730010 	lwi	r3, r19, 16
2001c0d8:	e8630010 	lwi	r3, r3, 16
2001c0dc:	e8830000 	lwi	r4, r3, 0
2001c0e0:	e8730010 	lwi	r3, r19, 16
2001c0e4:	e8a3000c 	lwi	r5, r3, 12
2001c0e8:	e8730014 	lwi	r3, r19, 20
2001c0ec:	64630402 	bslli	r3, r3, 2
2001c0f0:	10651800 	addk	r3, r5, r3
2001c0f4:	e8630000 	lwi	r3, r3, 0
2001c0f8:	14a32000 	rsubk	r5, r3, r4
2001c0fc:	30600001 	addik	r3, r0, 1
2001c100:	e8930018 	lwi	r4, r19, 24
2001c104:	16442803 	cmpu	r18, r4, r5
2001c108:	bcb20008 	bgei	r18, 8		// 2001c110
2001c10c:	10600000 	addk	r3, r0, r0
2001c110:	a46300ff 	andi	r3, r3, 255
}
2001c114:	10330000 	addk	r1, r19, r0
2001c118:	ea610004 	lwi	r19, r1, 4
2001c11c:	ea810008 	lwi	r20, r1, 8
2001c120:	3021000c 	addik	r1, r1, 12
2001c124:	b60f0008 	rtsd	r15, 8
2001c128:	80000000 	or	r0, r0, r0

2001c12c <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001c12c:	3021fff4 	addik	r1, r1, -12
2001c130:	fa610004 	swi	r19, r1, 4
2001c134:	fa810008 	swi	r20, r1, 8
2001c138:	12610000 	addk	r19, r1, r0
2001c13c:	96808000 	mfs	r20, rpc
2001c140:	b000dffe 	imm	-8194
2001c144:	32945820 	addik	r20, r20, 22560
2001c148:	f8b30010 	swi	r5, r19, 16
2001c14c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001c150:	e8730010 	lwi	r3, r19, 16
2001c154:	e8630010 	lwi	r3, r3, 16
2001c158:	e8830000 	lwi	r4, r3, 0
2001c15c:	e8730010 	lwi	r3, r19, 16
2001c160:	e8a3000c 	lwi	r5, r3, 12
2001c164:	e8730014 	lwi	r3, r19, 20
2001c168:	64630402 	bslli	r3, r3, 2
2001c16c:	10651800 	addk	r3, r5, r3
2001c170:	e8630000 	lwi	r3, r3, 0
2001c174:	14632000 	rsubk	r3, r3, r4
}
2001c178:	10330000 	addk	r1, r19, r0
2001c17c:	ea610004 	lwi	r19, r1, 4
2001c180:	ea810008 	lwi	r20, r1, 8
2001c184:	3021000c 	addik	r1, r1, 12
2001c188:	b60f0008 	rtsd	r15, 8
2001c18c:	80000000 	or	r0, r0, r0

2001c190 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2001c190:	3021fff0 	addik	r1, r1, -16
2001c194:	fa610008 	swi	r19, r1, 8
2001c198:	fa81000c 	swi	r20, r1, 12
2001c19c:	12610000 	addk	r19, r1, r0
2001c1a0:	96808000 	mfs	r20, rpc
2001c1a4:	b000dffe 	imm	-8194
2001c1a8:	329457bc 	addik	r20, r20, 22460
2001c1ac:	f8b30014 	swi	r5, r19, 20
2001c1b0:	f8d30018 	swi	r6, r19, 24
2001c1b4:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001c1b8:	f8130004 	swi	r0, r19, 4
2001c1bc:	b800005c 	bri	92		// 2001c218
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001c1c0:	e8730014 	lwi	r3, r19, 20
2001c1c4:	e8830000 	lwi	r4, r3, 0
2001c1c8:	e8730014 	lwi	r3, r19, 20
2001c1cc:	e8a3000c 	lwi	r5, r3, 12
2001c1d0:	e8730004 	lwi	r3, r19, 4
2001c1d4:	64630402 	bslli	r3, r3, 2
2001c1d8:	10651800 	addk	r3, r5, r3
2001c1dc:	e8a30000 	lwi	r5, r3, 0
2001c1e0:	e8730014 	lwi	r3, r19, 20
2001c1e4:	e8630010 	lwi	r3, r3, 16
2001c1e8:	e8630000 	lwi	r3, r3, 0
2001c1ec:	14632800 	rsubk	r3, r3, r5
2001c1f0:	10641800 	addk	r3, r4, r3
2001c1f4:	30830001 	addik	r4, r3, 1
2001c1f8:	e873001c 	lwi	r3, r19, 28
2001c1fc:	16441803 	cmpu	r18, r4, r3
2001c200:	bc52000c 	blti	r18, 12		// 2001c20c
            return 0;
2001c204:	10600000 	addk	r3, r0, r0
2001c208:	b8000024 	bri	36		// 2001c22c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001c20c:	e8730004 	lwi	r3, r19, 4
2001c210:	30630001 	addik	r3, r3, 1
2001c214:	f8730004 	swi	r3, r19, 4
2001c218:	e8930004 	lwi	r4, r19, 4
2001c21c:	e8730018 	lwi	r3, r19, 24
2001c220:	16432003 	cmpu	r18, r3, r4
2001c224:	bc52ff9c 	blti	r18, -100		// 2001c1c0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001c228:	30600001 	addik	r3, r0, 1
}
2001c22c:	10330000 	addk	r1, r19, r0
2001c230:	ea610008 	lwi	r19, r1, 8
2001c234:	ea81000c 	lwi	r20, r1, 12
2001c238:	30210010 	addik	r1, r1, 16
2001c23c:	b60f0008 	rtsd	r15, 8
2001c240:	80000000 	or	r0, r0, r0

2001c244 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001c244:	3021ffe8 	addik	r1, r1, -24
2001c248:	fa610010 	swi	r19, r1, 16
2001c24c:	fa810014 	swi	r20, r1, 20
2001c250:	12610000 	addk	r19, r1, r0
2001c254:	96808000 	mfs	r20, rpc
2001c258:	b000dffe 	imm	-8194
2001c25c:	32945708 	addik	r20, r20, 22280
2001c260:	f8b3001c 	swi	r5, r19, 28
2001c264:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001c268:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001c26c:	f8130004 	swi	r0, r19, 4
2001c270:	b8000054 	bri	84		// 2001c2c4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001c274:	e873001c 	lwi	r3, r19, 28
2001c278:	e8630010 	lwi	r3, r3, 16
2001c27c:	e8830000 	lwi	r4, r3, 0
2001c280:	e873001c 	lwi	r3, r19, 28
2001c284:	e8a3000c 	lwi	r5, r3, 12
2001c288:	e8730004 	lwi	r3, r19, 4
2001c28c:	64630402 	bslli	r3, r3, 2
2001c290:	10651800 	addk	r3, r5, r3
2001c294:	e8630000 	lwi	r3, r3, 0
2001c298:	14632000 	rsubk	r3, r3, r4
2001c29c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001c2a0:	e8930008 	lwi	r4, r19, 8
2001c2a4:	e873000c 	lwi	r3, r19, 12
2001c2a8:	16441803 	cmpu	r18, r4, r3
2001c2ac:	bcb20008 	bgei	r18, 8		// 2001c2b4
2001c2b0:	10640000 	addk	r3, r4, r0
2001c2b4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001c2b8:	e8730004 	lwi	r3, r19, 4
2001c2bc:	30630001 	addik	r3, r3, 1
2001c2c0:	f8730004 	swi	r3, r19, 4
2001c2c4:	e8930004 	lwi	r4, r19, 4
2001c2c8:	e8730020 	lwi	r3, r19, 32
2001c2cc:	16432003 	cmpu	r18, r3, r4
2001c2d0:	bc52ffa4 	blti	r18, -92		// 2001c274
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001c2d4:	e873001c 	lwi	r3, r19, 28
2001c2d8:	e8830000 	lwi	r4, r3, 0
2001c2dc:	e8730008 	lwi	r3, r19, 8
2001c2e0:	14632000 	rsubk	r3, r3, r4
}
2001c2e4:	10330000 	addk	r1, r19, r0
2001c2e8:	ea610010 	lwi	r19, r1, 16
2001c2ec:	ea810014 	lwi	r20, r1, 20
2001c2f0:	30210018 	addik	r1, r1, 24
2001c2f4:	b60f0008 	rtsd	r15, 8
2001c2f8:	80000000 	or	r0, r0, r0

2001c2fc <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001c2fc:	3021fff0 	addik	r1, r1, -16
2001c300:	fa610008 	swi	r19, r1, 8
2001c304:	fa81000c 	swi	r20, r1, 12
2001c308:	12610000 	addk	r19, r1, r0
2001c30c:	96808000 	mfs	r20, rpc
2001c310:	b000dffe 	imm	-8194
2001c314:	32945650 	addik	r20, r20, 22096
2001c318:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2001c31c:	e8730014 	lwi	r3, r19, 20
2001c320:	e8630010 	lwi	r3, r3, 16
2001c324:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001c328:	f8130004 	swi	r0, r19, 4
2001c32c:	b8000028 	bri	40		// 2001c354
        fifo->read_inds[i] = 0;
2001c330:	e8730014 	lwi	r3, r19, 20
2001c334:	e883000c 	lwi	r4, r3, 12
2001c338:	e8730004 	lwi	r3, r19, 4
2001c33c:	64630402 	bslli	r3, r3, 2
2001c340:	10641800 	addk	r3, r4, r3
2001c344:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001c348:	e8730004 	lwi	r3, r19, 4
2001c34c:	30630001 	addik	r3, r3, 1
2001c350:	f8730004 	swi	r3, r19, 4
2001c354:	e8730014 	lwi	r3, r19, 20
2001c358:	e8830008 	lwi	r4, r3, 8
2001c35c:	e8730004 	lwi	r3, r19, 4
2001c360:	16441803 	cmpu	r18, r4, r3
2001c364:	bc52ffcc 	blti	r18, -52		// 2001c330
        fifo->read_inds[i] = 0;
    }
}
2001c368:	10330000 	addk	r1, r19, r0
2001c36c:	ea610008 	lwi	r19, r1, 8
2001c370:	ea81000c 	lwi	r20, r1, 12
2001c374:	30210010 	addik	r1, r1, 16
2001c378:	b60f0008 	rtsd	r15, 8
2001c37c:	80000000 	or	r0, r0, r0

2001c380 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001c380:	3021fff0 	addik	r1, r1, -16
2001c384:	fa610008 	swi	r19, r1, 8
2001c388:	fa81000c 	swi	r20, r1, 12
2001c38c:	12610000 	addk	r19, r1, r0
2001c390:	96808000 	mfs	r20, rpc
2001c394:	b000dffe 	imm	-8194
2001c398:	329455cc 	addik	r20, r20, 21964
2001c39c:	f8b30014 	swi	r5, r19, 20
2001c3a0:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001c3a4:	e8730014 	lwi	r3, r19, 20
2001c3a8:	e8830004 	lwi	r4, r3, 4
2001c3ac:	e8730014 	lwi	r3, r19, 20
2001c3b0:	e8a3000c 	lwi	r5, r3, 12
2001c3b4:	e8730018 	lwi	r3, r19, 24
2001c3b8:	64630402 	bslli	r3, r3, 2
2001c3bc:	10651800 	addk	r3, r5, r3
2001c3c0:	e8a30000 	lwi	r5, r3, 0
2001c3c4:	e8730014 	lwi	r3, r19, 20
2001c3c8:	e8630000 	lwi	r3, r3, 0
2001c3cc:	3063ffff 	addik	r3, r3, -1
2001c3d0:	84651800 	and	r3, r5, r3
2001c3d4:	64630402 	bslli	r3, r3, 2
2001c3d8:	10641800 	addk	r3, r4, r3
2001c3dc:	e8630000 	lwi	r3, r3, 0
2001c3e0:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2001c3e4:	e8730014 	lwi	r3, r19, 20
2001c3e8:	e883000c 	lwi	r4, r3, 12
2001c3ec:	e8730018 	lwi	r3, r19, 24
2001c3f0:	64630402 	bslli	r3, r3, 2
2001c3f4:	10641800 	addk	r3, r4, r3
2001c3f8:	e8830000 	lwi	r4, r3, 0
2001c3fc:	30840001 	addik	r4, r4, 1
2001c400:	f8830000 	swi	r4, r3, 0
    return value;
2001c404:	e8730004 	lwi	r3, r19, 4
}
2001c408:	10330000 	addk	r1, r19, r0
2001c40c:	ea610008 	lwi	r19, r1, 8
2001c410:	ea81000c 	lwi	r20, r1, 12
2001c414:	30210010 	addik	r1, r1, 16
2001c418:	b60f0008 	rtsd	r15, 8
2001c41c:	80000000 	or	r0, r0, r0

2001c420 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001c420:	3021fff4 	addik	r1, r1, -12
2001c424:	fa610004 	swi	r19, r1, 4
2001c428:	fa810008 	swi	r20, r1, 8
2001c42c:	12610000 	addk	r19, r1, r0
2001c430:	96808000 	mfs	r20, rpc
2001c434:	b000dffe 	imm	-8194
2001c438:	3294552c 	addik	r20, r20, 21804
2001c43c:	f8b30010 	swi	r5, r19, 16
2001c440:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001c444:	e8730010 	lwi	r3, r19, 16
2001c448:	e8830004 	lwi	r4, r3, 4
2001c44c:	e8730010 	lwi	r3, r19, 16
2001c450:	e8630010 	lwi	r3, r3, 16
2001c454:	e8a30000 	lwi	r5, r3, 0
2001c458:	e8730010 	lwi	r3, r19, 16
2001c45c:	e8630000 	lwi	r3, r3, 0
2001c460:	3063ffff 	addik	r3, r3, -1
2001c464:	84651800 	and	r3, r5, r3
2001c468:	64630402 	bslli	r3, r3, 2
2001c46c:	10641800 	addk	r3, r4, r3
2001c470:	e8930014 	lwi	r4, r19, 20
2001c474:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2001c478:	e8730010 	lwi	r3, r19, 16
2001c47c:	e8630010 	lwi	r3, r3, 16
2001c480:	e8830000 	lwi	r4, r3, 0
2001c484:	30840001 	addik	r4, r4, 1
2001c488:	f8830000 	swi	r4, r3, 0
}
2001c48c:	10330000 	addk	r1, r19, r0
2001c490:	ea610004 	lwi	r19, r1, 4
2001c494:	ea810008 	lwi	r20, r1, 8
2001c498:	3021000c 	addik	r1, r1, 12
2001c49c:	b60f0008 	rtsd	r15, 8
2001c4a0:	80000000 	or	r0, r0, r0

2001c4a4 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001c4a4:	3021fff4 	addik	r1, r1, -12
2001c4a8:	fa610004 	swi	r19, r1, 4
2001c4ac:	fa810008 	swi	r20, r1, 8
2001c4b0:	12610000 	addk	r19, r1, r0
2001c4b4:	96808000 	mfs	r20, rpc
2001c4b8:	b000dffe 	imm	-8194
2001c4bc:	329454a8 	addik	r20, r20, 21672
2001c4c0:	f8b30010 	swi	r5, r19, 16
2001c4c4:	f8d30014 	swi	r6, r19, 20
2001c4c8:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001c4cc:	e8730010 	lwi	r3, r19, 16
2001c4d0:	e8630010 	lwi	r3, r3, 16
2001c4d4:	e8830000 	lwi	r4, r3, 0
2001c4d8:	e8730010 	lwi	r3, r19, 16
2001c4dc:	e8a3000c 	lwi	r5, r3, 12
2001c4e0:	e8730014 	lwi	r3, r19, 20
2001c4e4:	64630402 	bslli	r3, r3, 2
2001c4e8:	10651800 	addk	r3, r5, r3
2001c4ec:	e8630000 	lwi	r3, r3, 0
2001c4f0:	14a32000 	rsubk	r5, r3, r4
2001c4f4:	30600001 	addik	r3, r0, 1
2001c4f8:	e8930018 	lwi	r4, r19, 24
2001c4fc:	16442803 	cmpu	r18, r4, r5
2001c500:	bcb20008 	bgei	r18, 8		// 2001c508
2001c504:	10600000 	addk	r3, r0, r0
2001c508:	a46300ff 	andi	r3, r3, 255
}
2001c50c:	10330000 	addk	r1, r19, r0
2001c510:	ea610004 	lwi	r19, r1, 4
2001c514:	ea810008 	lwi	r20, r1, 8
2001c518:	3021000c 	addik	r1, r1, 12
2001c51c:	b60f0008 	rtsd	r15, 8
2001c520:	80000000 	or	r0, r0, r0

2001c524 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001c524:	3021fff4 	addik	r1, r1, -12
2001c528:	fa610004 	swi	r19, r1, 4
2001c52c:	fa810008 	swi	r20, r1, 8
2001c530:	12610000 	addk	r19, r1, r0
2001c534:	96808000 	mfs	r20, rpc
2001c538:	b000dffe 	imm	-8194
2001c53c:	32945428 	addik	r20, r20, 21544
2001c540:	f8b30010 	swi	r5, r19, 16
2001c544:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001c548:	e8730010 	lwi	r3, r19, 16
2001c54c:	e8630010 	lwi	r3, r3, 16
2001c550:	e8830000 	lwi	r4, r3, 0
2001c554:	e8730010 	lwi	r3, r19, 16
2001c558:	e8a3000c 	lwi	r5, r3, 12
2001c55c:	e8730014 	lwi	r3, r19, 20
2001c560:	64630402 	bslli	r3, r3, 2
2001c564:	10651800 	addk	r3, r5, r3
2001c568:	e8630000 	lwi	r3, r3, 0
2001c56c:	14632000 	rsubk	r3, r3, r4
}
2001c570:	10330000 	addk	r1, r19, r0
2001c574:	ea610004 	lwi	r19, r1, 4
2001c578:	ea810008 	lwi	r20, r1, 8
2001c57c:	3021000c 	addik	r1, r1, 12
2001c580:	b60f0008 	rtsd	r15, 8
2001c584:	80000000 	or	r0, r0, r0

2001c588 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2001c588:	3021fff0 	addik	r1, r1, -16
2001c58c:	fa610008 	swi	r19, r1, 8
2001c590:	fa81000c 	swi	r20, r1, 12
2001c594:	12610000 	addk	r19, r1, r0
2001c598:	96808000 	mfs	r20, rpc
2001c59c:	b000dffe 	imm	-8194
2001c5a0:	329453c4 	addik	r20, r20, 21444
2001c5a4:	f8b30014 	swi	r5, r19, 20
2001c5a8:	f8d30018 	swi	r6, r19, 24
2001c5ac:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001c5b0:	f8130004 	swi	r0, r19, 4
2001c5b4:	b800005c 	bri	92		// 2001c610
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001c5b8:	e8730014 	lwi	r3, r19, 20
2001c5bc:	e8830000 	lwi	r4, r3, 0
2001c5c0:	e8730014 	lwi	r3, r19, 20
2001c5c4:	e8a3000c 	lwi	r5, r3, 12
2001c5c8:	e8730004 	lwi	r3, r19, 4
2001c5cc:	64630402 	bslli	r3, r3, 2
2001c5d0:	10651800 	addk	r3, r5, r3
2001c5d4:	e8a30000 	lwi	r5, r3, 0
2001c5d8:	e8730014 	lwi	r3, r19, 20
2001c5dc:	e8630010 	lwi	r3, r3, 16
2001c5e0:	e8630000 	lwi	r3, r3, 0
2001c5e4:	14632800 	rsubk	r3, r3, r5
2001c5e8:	10641800 	addk	r3, r4, r3
2001c5ec:	30830001 	addik	r4, r3, 1
2001c5f0:	e873001c 	lwi	r3, r19, 28
2001c5f4:	16441803 	cmpu	r18, r4, r3
2001c5f8:	bc52000c 	blti	r18, 12		// 2001c604
            return 0;
2001c5fc:	10600000 	addk	r3, r0, r0
2001c600:	b8000024 	bri	36		// 2001c624
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001c604:	e8730004 	lwi	r3, r19, 4
2001c608:	30630001 	addik	r3, r3, 1
2001c60c:	f8730004 	swi	r3, r19, 4
2001c610:	e8930004 	lwi	r4, r19, 4
2001c614:	e8730018 	lwi	r3, r19, 24
2001c618:	16432003 	cmpu	r18, r3, r4
2001c61c:	bc52ff9c 	blti	r18, -100		// 2001c5b8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001c620:	30600001 	addik	r3, r0, 1
}
2001c624:	10330000 	addk	r1, r19, r0
2001c628:	ea610008 	lwi	r19, r1, 8
2001c62c:	ea81000c 	lwi	r20, r1, 12
2001c630:	30210010 	addik	r1, r1, 16
2001c634:	b60f0008 	rtsd	r15, 8
2001c638:	80000000 	or	r0, r0, r0

2001c63c <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001c63c:	3021ffe8 	addik	r1, r1, -24
2001c640:	fa610010 	swi	r19, r1, 16
2001c644:	fa810014 	swi	r20, r1, 20
2001c648:	12610000 	addk	r19, r1, r0
2001c64c:	96808000 	mfs	r20, rpc
2001c650:	b000dffe 	imm	-8194
2001c654:	32945310 	addik	r20, r20, 21264
2001c658:	f8b3001c 	swi	r5, r19, 28
2001c65c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001c660:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001c664:	f8130004 	swi	r0, r19, 4
2001c668:	b8000054 	bri	84		// 2001c6bc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001c66c:	e873001c 	lwi	r3, r19, 28
2001c670:	e8630010 	lwi	r3, r3, 16
2001c674:	e8830000 	lwi	r4, r3, 0
2001c678:	e873001c 	lwi	r3, r19, 28
2001c67c:	e8a3000c 	lwi	r5, r3, 12
2001c680:	e8730004 	lwi	r3, r19, 4
2001c684:	64630402 	bslli	r3, r3, 2
2001c688:	10651800 	addk	r3, r5, r3
2001c68c:	e8630000 	lwi	r3, r3, 0
2001c690:	14632000 	rsubk	r3, r3, r4
2001c694:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001c698:	e8930008 	lwi	r4, r19, 8
2001c69c:	e873000c 	lwi	r3, r19, 12
2001c6a0:	16441803 	cmpu	r18, r4, r3
2001c6a4:	bcb20008 	bgei	r18, 8		// 2001c6ac
2001c6a8:	10640000 	addk	r3, r4, r0
2001c6ac:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001c6b0:	e8730004 	lwi	r3, r19, 4
2001c6b4:	30630001 	addik	r3, r3, 1
2001c6b8:	f8730004 	swi	r3, r19, 4
2001c6bc:	e8930004 	lwi	r4, r19, 4
2001c6c0:	e8730020 	lwi	r3, r19, 32
2001c6c4:	16432003 	cmpu	r18, r3, r4
2001c6c8:	bc52ffa4 	blti	r18, -92		// 2001c66c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001c6cc:	e873001c 	lwi	r3, r19, 28
2001c6d0:	e8830000 	lwi	r4, r3, 0
2001c6d4:	e8730008 	lwi	r3, r19, 8
2001c6d8:	14632000 	rsubk	r3, r3, r4
}
2001c6dc:	10330000 	addk	r1, r19, r0
2001c6e0:	ea610010 	lwi	r19, r1, 16
2001c6e4:	ea810014 	lwi	r20, r1, 20
2001c6e8:	30210018 	addik	r1, r1, 24
2001c6ec:	b60f0008 	rtsd	r15, 8
2001c6f0:	80000000 	or	r0, r0, r0

2001c6f4 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001c6f4:	3021fff0 	addik	r1, r1, -16
2001c6f8:	fa610008 	swi	r19, r1, 8
2001c6fc:	fa81000c 	swi	r20, r1, 12
2001c700:	12610000 	addk	r19, r1, r0
2001c704:	96808000 	mfs	r20, rpc
2001c708:	b000dffe 	imm	-8194
2001c70c:	32945258 	addik	r20, r20, 21080
2001c710:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2001c714:	e8730014 	lwi	r3, r19, 20
2001c718:	e8630010 	lwi	r3, r3, 16
2001c71c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001c720:	f8130004 	swi	r0, r19, 4
2001c724:	b8000028 	bri	40		// 2001c74c
        fifo->read_inds[i] = 0;
2001c728:	e8730014 	lwi	r3, r19, 20
2001c72c:	e883000c 	lwi	r4, r3, 12
2001c730:	e8730004 	lwi	r3, r19, 4
2001c734:	64630402 	bslli	r3, r3, 2
2001c738:	10641800 	addk	r3, r4, r3
2001c73c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001c740:	e8730004 	lwi	r3, r19, 4
2001c744:	30630001 	addik	r3, r3, 1
2001c748:	f8730004 	swi	r3, r19, 4
2001c74c:	e8730014 	lwi	r3, r19, 20
2001c750:	e8830008 	lwi	r4, r3, 8
2001c754:	e8730004 	lwi	r3, r19, 4
2001c758:	16441803 	cmpu	r18, r4, r3
2001c75c:	bc52ffcc 	blti	r18, -52		// 2001c728
        fifo->read_inds[i] = 0;
    }
}
2001c760:	10330000 	addk	r1, r19, r0
2001c764:	ea610008 	lwi	r19, r1, 8
2001c768:	ea81000c 	lwi	r20, r1, 12
2001c76c:	30210010 	addik	r1, r1, 16
2001c770:	b60f0008 	rtsd	r15, 8
2001c774:	80000000 	or	r0, r0, r0

2001c778 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001c778:	3021ffec 	addik	r1, r1, -20
2001c77c:	fa61000c 	swi	r19, r1, 12
2001c780:	fa810010 	swi	r20, r1, 16
2001c784:	12610000 	addk	r19, r1, r0
2001c788:	96808000 	mfs	r20, rpc
2001c78c:	b000dffe 	imm	-8194
2001c790:	329451d4 	addik	r20, r20, 20948
2001c794:	f8b30018 	swi	r5, r19, 24
2001c798:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001c79c:	e8730018 	lwi	r3, r19, 24
2001c7a0:	e8830004 	lwi	r4, r3, 4
2001c7a4:	e8730018 	lwi	r3, r19, 24
2001c7a8:	e8a3000c 	lwi	r5, r3, 12
2001c7ac:	e873001c 	lwi	r3, r19, 28
2001c7b0:	64630402 	bslli	r3, r3, 2
2001c7b4:	10651800 	addk	r3, r5, r3
2001c7b8:	e8a30000 	lwi	r5, r3, 0
2001c7bc:	e8730018 	lwi	r3, r19, 24
2001c7c0:	e8630000 	lwi	r3, r3, 0
2001c7c4:	3063ffff 	addik	r3, r3, -1
2001c7c8:	84651800 	and	r3, r5, r3
2001c7cc:	64630403 	bslli	r3, r3, 3
2001c7d0:	10641800 	addk	r3, r4, r3
2001c7d4:	e8830000 	lwi	r4, r3, 0
2001c7d8:	e8a30004 	lwi	r5, r3, 4
2001c7dc:	f8930004 	swi	r4, r19, 4
2001c7e0:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2001c7e4:	e8730018 	lwi	r3, r19, 24
2001c7e8:	e883000c 	lwi	r4, r3, 12
2001c7ec:	e873001c 	lwi	r3, r19, 28
2001c7f0:	64630402 	bslli	r3, r3, 2
2001c7f4:	10641800 	addk	r3, r4, r3
2001c7f8:	e8830000 	lwi	r4, r3, 0
2001c7fc:	30840001 	addik	r4, r4, 1
2001c800:	f8830000 	swi	r4, r3, 0
    return value;
2001c804:	e8930004 	lwi	r4, r19, 4
2001c808:	e8b30008 	lwi	r5, r19, 8
}
2001c80c:	10640000 	addk	r3, r4, r0
2001c810:	10850000 	addk	r4, r5, r0
2001c814:	10330000 	addk	r1, r19, r0
2001c818:	ea61000c 	lwi	r19, r1, 12
2001c81c:	ea810010 	lwi	r20, r1, 16
2001c820:	30210014 	addik	r1, r1, 20
2001c824:	b60f0008 	rtsd	r15, 8
2001c828:	80000000 	or	r0, r0, r0

2001c82c <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001c82c:	3021fff4 	addik	r1, r1, -12
2001c830:	fa610004 	swi	r19, r1, 4
2001c834:	fa810008 	swi	r20, r1, 8
2001c838:	12610000 	addk	r19, r1, r0
2001c83c:	96808000 	mfs	r20, rpc
2001c840:	b000dffe 	imm	-8194
2001c844:	32945120 	addik	r20, r20, 20768
2001c848:	f8b30010 	swi	r5, r19, 16
2001c84c:	f8d30014 	swi	r6, r19, 20
2001c850:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001c854:	e8730010 	lwi	r3, r19, 16
2001c858:	e8830004 	lwi	r4, r3, 4
2001c85c:	e8730010 	lwi	r3, r19, 16
2001c860:	e8630010 	lwi	r3, r3, 16
2001c864:	e8a30000 	lwi	r5, r3, 0
2001c868:	e8730010 	lwi	r3, r19, 16
2001c86c:	e8630000 	lwi	r3, r3, 0
2001c870:	3063ffff 	addik	r3, r3, -1
2001c874:	84651800 	and	r3, r5, r3
2001c878:	64630403 	bslli	r3, r3, 3
2001c87c:	10641800 	addk	r3, r4, r3
2001c880:	e8930014 	lwi	r4, r19, 20
2001c884:	e8b30018 	lwi	r5, r19, 24
2001c888:	f8830000 	swi	r4, r3, 0
2001c88c:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2001c890:	e8730010 	lwi	r3, r19, 16
2001c894:	e8630010 	lwi	r3, r3, 16
2001c898:	e8830000 	lwi	r4, r3, 0
2001c89c:	30840001 	addik	r4, r4, 1
2001c8a0:	f8830000 	swi	r4, r3, 0
}
2001c8a4:	10330000 	addk	r1, r19, r0
2001c8a8:	ea610004 	lwi	r19, r1, 4
2001c8ac:	ea810008 	lwi	r20, r1, 8
2001c8b0:	3021000c 	addik	r1, r1, 12
2001c8b4:	b60f0008 	rtsd	r15, 8
2001c8b8:	80000000 	or	r0, r0, r0

2001c8bc <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2001c8bc:	3021fff4 	addik	r1, r1, -12
2001c8c0:	fa610004 	swi	r19, r1, 4
2001c8c4:	fa810008 	swi	r20, r1, 8
2001c8c8:	12610000 	addk	r19, r1, r0
2001c8cc:	96808000 	mfs	r20, rpc
2001c8d0:	b000dffe 	imm	-8194
2001c8d4:	32945090 	addik	r20, r20, 20624
2001c8d8:	f8b30010 	swi	r5, r19, 16
2001c8dc:	f8d30014 	swi	r6, r19, 20
2001c8e0:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2001c8e4:	e8730010 	lwi	r3, r19, 16
2001c8e8:	e8630010 	lwi	r3, r3, 16
2001c8ec:	e8830000 	lwi	r4, r3, 0
2001c8f0:	e8730010 	lwi	r3, r19, 16
2001c8f4:	e8a3000c 	lwi	r5, r3, 12
2001c8f8:	e8730014 	lwi	r3, r19, 20
2001c8fc:	64630402 	bslli	r3, r3, 2
2001c900:	10651800 	addk	r3, r5, r3
2001c904:	e8630000 	lwi	r3, r3, 0
2001c908:	14a32000 	rsubk	r5, r3, r4
2001c90c:	30600001 	addik	r3, r0, 1
2001c910:	e8930018 	lwi	r4, r19, 24
2001c914:	16442803 	cmpu	r18, r4, r5
2001c918:	bcb20008 	bgei	r18, 8		// 2001c920
2001c91c:	10600000 	addk	r3, r0, r0
2001c920:	a46300ff 	andi	r3, r3, 255
}
2001c924:	10330000 	addk	r1, r19, r0
2001c928:	ea610004 	lwi	r19, r1, 4
2001c92c:	ea810008 	lwi	r20, r1, 8
2001c930:	3021000c 	addik	r1, r1, 12
2001c934:	b60f0008 	rtsd	r15, 8
2001c938:	80000000 	or	r0, r0, r0

2001c93c <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001c93c:	3021fff4 	addik	r1, r1, -12
2001c940:	fa610004 	swi	r19, r1, 4
2001c944:	fa810008 	swi	r20, r1, 8
2001c948:	12610000 	addk	r19, r1, r0
2001c94c:	96808000 	mfs	r20, rpc
2001c950:	b000dffe 	imm	-8194
2001c954:	32945010 	addik	r20, r20, 20496
2001c958:	f8b30010 	swi	r5, r19, 16
2001c95c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2001c960:	e8730010 	lwi	r3, r19, 16
2001c964:	e8630010 	lwi	r3, r3, 16
2001c968:	e8830000 	lwi	r4, r3, 0
2001c96c:	e8730010 	lwi	r3, r19, 16
2001c970:	e8a3000c 	lwi	r5, r3, 12
2001c974:	e8730014 	lwi	r3, r19, 20
2001c978:	64630402 	bslli	r3, r3, 2
2001c97c:	10651800 	addk	r3, r5, r3
2001c980:	e8630000 	lwi	r3, r3, 0
2001c984:	14632000 	rsubk	r3, r3, r4
}
2001c988:	10330000 	addk	r1, r19, r0
2001c98c:	ea610004 	lwi	r19, r1, 4
2001c990:	ea810008 	lwi	r20, r1, 8
2001c994:	3021000c 	addik	r1, r1, 12
2001c998:	b60f0008 	rtsd	r15, 8
2001c99c:	80000000 	or	r0, r0, r0

2001c9a0 <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2001c9a0:	3021fff0 	addik	r1, r1, -16
2001c9a4:	fa610008 	swi	r19, r1, 8
2001c9a8:	fa81000c 	swi	r20, r1, 12
2001c9ac:	12610000 	addk	r19, r1, r0
2001c9b0:	96808000 	mfs	r20, rpc
2001c9b4:	b000dffe 	imm	-8194
2001c9b8:	32944fac 	addik	r20, r20, 20396
2001c9bc:	f8b30014 	swi	r5, r19, 20
2001c9c0:	f8d30018 	swi	r6, r19, 24
2001c9c4:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001c9c8:	f8130004 	swi	r0, r19, 4
2001c9cc:	b800005c 	bri	92		// 2001ca28
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2001c9d0:	e8730014 	lwi	r3, r19, 20
2001c9d4:	e8830000 	lwi	r4, r3, 0
2001c9d8:	e8730014 	lwi	r3, r19, 20
2001c9dc:	e8a3000c 	lwi	r5, r3, 12
2001c9e0:	e8730004 	lwi	r3, r19, 4
2001c9e4:	64630402 	bslli	r3, r3, 2
2001c9e8:	10651800 	addk	r3, r5, r3
2001c9ec:	e8a30000 	lwi	r5, r3, 0
2001c9f0:	e8730014 	lwi	r3, r19, 20
2001c9f4:	e8630010 	lwi	r3, r3, 16
2001c9f8:	e8630000 	lwi	r3, r3, 0
2001c9fc:	14632800 	rsubk	r3, r3, r5
2001ca00:	10641800 	addk	r3, r4, r3
2001ca04:	30830001 	addik	r4, r3, 1
2001ca08:	e873001c 	lwi	r3, r19, 28
2001ca0c:	16441803 	cmpu	r18, r4, r3
2001ca10:	bc52000c 	blti	r18, 12		// 2001ca1c
            return 0;
2001ca14:	10600000 	addk	r3, r0, r0
2001ca18:	b8000024 	bri	36		// 2001ca3c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2001ca1c:	e8730004 	lwi	r3, r19, 4
2001ca20:	30630001 	addik	r3, r3, 1
2001ca24:	f8730004 	swi	r3, r19, 4
2001ca28:	e8930004 	lwi	r4, r19, 4
2001ca2c:	e8730018 	lwi	r3, r19, 24
2001ca30:	16432003 	cmpu	r18, r3, r4
2001ca34:	bc52ff9c 	blti	r18, -100		// 2001c9d0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2001ca38:	30600001 	addik	r3, r0, 1
}
2001ca3c:	10330000 	addk	r1, r19, r0
2001ca40:	ea610008 	lwi	r19, r1, 8
2001ca44:	ea81000c 	lwi	r20, r1, 12
2001ca48:	30210010 	addik	r1, r1, 16
2001ca4c:	b60f0008 	rtsd	r15, 8
2001ca50:	80000000 	or	r0, r0, r0

2001ca54 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2001ca54:	3021ffe8 	addik	r1, r1, -24
2001ca58:	fa610010 	swi	r19, r1, 16
2001ca5c:	fa810014 	swi	r20, r1, 20
2001ca60:	12610000 	addk	r19, r1, r0
2001ca64:	96808000 	mfs	r20, rpc
2001ca68:	b000dffe 	imm	-8194
2001ca6c:	32944ef8 	addik	r20, r20, 20216
2001ca70:	f8b3001c 	swi	r5, r19, 28
2001ca74:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2001ca78:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2001ca7c:	f8130004 	swi	r0, r19, 4
2001ca80:	b8000054 	bri	84		// 2001cad4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2001ca84:	e873001c 	lwi	r3, r19, 28
2001ca88:	e8630010 	lwi	r3, r3, 16
2001ca8c:	e8830000 	lwi	r4, r3, 0
2001ca90:	e873001c 	lwi	r3, r19, 28
2001ca94:	e8a3000c 	lwi	r5, r3, 12
2001ca98:	e8730004 	lwi	r3, r19, 4
2001ca9c:	64630402 	bslli	r3, r3, 2
2001caa0:	10651800 	addk	r3, r5, r3
2001caa4:	e8630000 	lwi	r3, r3, 0
2001caa8:	14632000 	rsubk	r3, r3, r4
2001caac:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2001cab0:	e8930008 	lwi	r4, r19, 8
2001cab4:	e873000c 	lwi	r3, r19, 12
2001cab8:	16441803 	cmpu	r18, r4, r3
2001cabc:	bcb20008 	bgei	r18, 8		// 2001cac4
2001cac0:	10640000 	addk	r3, r4, r0
2001cac4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2001cac8:	e8730004 	lwi	r3, r19, 4
2001cacc:	30630001 	addik	r3, r3, 1
2001cad0:	f8730004 	swi	r3, r19, 4
2001cad4:	e8930004 	lwi	r4, r19, 4
2001cad8:	e8730020 	lwi	r3, r19, 32
2001cadc:	16432003 	cmpu	r18, r3, r4
2001cae0:	bc52ffa4 	blti	r18, -92		// 2001ca84
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2001cae4:	e873001c 	lwi	r3, r19, 28
2001cae8:	e8830000 	lwi	r4, r3, 0
2001caec:	e8730008 	lwi	r3, r19, 8
2001caf0:	14632000 	rsubk	r3, r3, r4
}
2001caf4:	10330000 	addk	r1, r19, r0
2001caf8:	ea610010 	lwi	r19, r1, 16
2001cafc:	ea810014 	lwi	r20, r1, 20
2001cb00:	30210018 	addik	r1, r1, 24
2001cb04:	b60f0008 	rtsd	r15, 8
2001cb08:	80000000 	or	r0, r0, r0

2001cb0c <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2001cb0c:	3021fff0 	addik	r1, r1, -16
2001cb10:	fa610008 	swi	r19, r1, 8
2001cb14:	fa81000c 	swi	r20, r1, 12
2001cb18:	12610000 	addk	r19, r1, r0
2001cb1c:	96808000 	mfs	r20, rpc
2001cb20:	b000dffe 	imm	-8194
2001cb24:	32944e40 	addik	r20, r20, 20032
2001cb28:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2001cb2c:	e8730014 	lwi	r3, r19, 20
2001cb30:	e8630010 	lwi	r3, r3, 16
2001cb34:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2001cb38:	f8130004 	swi	r0, r19, 4
2001cb3c:	b8000028 	bri	40		// 2001cb64
        fifo->read_inds[i] = 0;
2001cb40:	e8730014 	lwi	r3, r19, 20
2001cb44:	e883000c 	lwi	r4, r3, 12
2001cb48:	e8730004 	lwi	r3, r19, 4
2001cb4c:	64630402 	bslli	r3, r3, 2
2001cb50:	10641800 	addk	r3, r4, r3
2001cb54:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2001cb58:	e8730004 	lwi	r3, r19, 4
2001cb5c:	30630001 	addik	r3, r3, 1
2001cb60:	f8730004 	swi	r3, r19, 4
2001cb64:	e8730014 	lwi	r3, r19, 20
2001cb68:	e8830008 	lwi	r4, r3, 8
2001cb6c:	e8730004 	lwi	r3, r19, 4
2001cb70:	16441803 	cmpu	r18, r4, r3
2001cb74:	bc52ffcc 	blti	r18, -52		// 2001cb40
        fifo->read_inds[i] = 0;
    }
}
2001cb78:	10330000 	addk	r1, r19, r0
2001cb7c:	ea610008 	lwi	r19, r1, 8
2001cb80:	ea81000c 	lwi	r20, r1, 12
2001cb84:	30210010 	addik	r1, r1, 16
2001cb88:	b60f0008 	rtsd	r15, 8
2001cb8c:	80000000 	or	r0, r0, r0

2001cb90 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2001cb90:	3021fff0 	addik	r1, r1, -16
2001cb94:	fa610008 	swi	r19, r1, 8
2001cb98:	fa81000c 	swi	r20, r1, 12
2001cb9c:	12610000 	addk	r19, r1, r0
2001cba0:	96808000 	mfs	r20, rpc
2001cba4:	b000dffe 	imm	-8194
2001cba8:	32944dbc 	addik	r20, r20, 19900
2001cbac:	f8b30014 	swi	r5, r19, 20
2001cbb0:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2001cbb4:	e8730014 	lwi	r3, r19, 20
2001cbb8:	e8830004 	lwi	r4, r3, 4
2001cbbc:	e8730014 	lwi	r3, r19, 20
2001cbc0:	e8a3000c 	lwi	r5, r3, 12
2001cbc4:	e8730018 	lwi	r3, r19, 24
2001cbc8:	64630402 	bslli	r3, r3, 2
2001cbcc:	10651800 	addk	r3, r5, r3
2001cbd0:	e8a30000 	lwi	r5, r3, 0
2001cbd4:	e8730014 	lwi	r3, r19, 20
2001cbd8:	e8630000 	lwi	r3, r3, 0
2001cbdc:	3063ffff 	addik	r3, r3, -1
2001cbe0:	84651800 	and	r3, r5, r3
2001cbe4:	64630402 	bslli	r3, r3, 2
2001cbe8:	10641800 	addk	r3, r4, r3
2001cbec:	e8630000 	lwi	r3, r3, 0
2001cbf0:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2001cbf4:	e8730014 	lwi	r3, r19, 20
2001cbf8:	e883000c 	lwi	r4, r3, 12
2001cbfc:	e8730018 	lwi	r3, r19, 24
2001cc00:	64630402 	bslli	r3, r3, 2
2001cc04:	10641800 	addk	r3, r4, r3
2001cc08:	e8830000 	lwi	r4, r3, 0
2001cc0c:	30840001 	addik	r4, r4, 1
2001cc10:	f8830000 	swi	r4, r3, 0
    return value;
2001cc14:	e8730004 	lwi	r3, r19, 4
}
2001cc18:	10330000 	addk	r1, r19, r0
2001cc1c:	ea610008 	lwi	r19, r1, 8
2001cc20:	ea81000c 	lwi	r20, r1, 12
2001cc24:	30210010 	addik	r1, r1, 16
2001cc28:	b60f0008 	rtsd	r15, 8
2001cc2c:	80000000 	or	r0, r0, r0

2001cc30 <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2001cc30:	3021fff4 	addik	r1, r1, -12
2001cc34:	fa610004 	swi	r19, r1, 4
2001cc38:	fa810008 	swi	r20, r1, 8
2001cc3c:	12610000 	addk	r19, r1, r0
2001cc40:	96808000 	mfs	r20, rpc
2001cc44:	b000dffe 	imm	-8194
2001cc48:	32944d1c 	addik	r20, r20, 19740
2001cc4c:	f8b30010 	swi	r5, r19, 16
2001cc50:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2001cc54:	e8730010 	lwi	r3, r19, 16
2001cc58:	e8830004 	lwi	r4, r3, 4
2001cc5c:	e8730010 	lwi	r3, r19, 16
2001cc60:	e8630010 	lwi	r3, r3, 16
2001cc64:	e8a30000 	lwi	r5, r3, 0
2001cc68:	e8730010 	lwi	r3, r19, 16
2001cc6c:	e8630000 	lwi	r3, r3, 0
2001cc70:	3063ffff 	addik	r3, r3, -1
2001cc74:	84651800 	and	r3, r5, r3
2001cc78:	64630402 	bslli	r3, r3, 2
2001cc7c:	10641800 	addk	r3, r4, r3
2001cc80:	e8930014 	lwi	r4, r19, 20
2001cc84:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2001cc88:	e8730010 	lwi	r3, r19, 16
2001cc8c:	e8630010 	lwi	r3, r3, 16
2001cc90:	e8830000 	lwi	r4, r3, 0
2001cc94:	30840001 	addik	r4, r4, 1
2001cc98:	f8830000 	swi	r4, r3, 0
}
2001cc9c:	10330000 	addk	r1, r19, r0
2001cca0:	ea610004 	lwi	r19, r1, 4
2001cca4:	ea810008 	lwi	r20, r1, 8
2001cca8:	3021000c 	addik	r1, r1, 12
2001ccac:	b60f0008 	rtsd	r15, 8
2001ccb0:	80000000 	or	r0, r0, r0

2001ccb4 <read_BTYPE>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_BTYPE() {
2001ccb4:	3021ffdc 	addik	r1, r1, -36
2001ccb8:	f9e10000 	swi	r15, r1, 0
2001ccbc:	fa61001c 	swi	r19, r1, 28
2001ccc0:	fa810020 	swi	r20, r1, 32
2001ccc4:	12610000 	addk	r19, r1, r0
2001ccc8:	96808000 	mfs	r20, rpc
2001cccc:	b000dffe 	imm	-8194
2001ccd0:	32944c94 	addik	r20, r20, 19604
		index_BTYPE = decoder_parser_mvrecon_BTYPE->read_inds[1];
2001ccd4:	b0000000 	imm	0
2001ccd8:	e874031c 	lwi	r3, r20, 796
2001ccdc:	e8630000 	lwi	r3, r3, 0
2001cce0:	e863000c 	lwi	r3, r3, 12
2001cce4:	e8830004 	lwi	r4, r3, 4
2001cce8:	b0000000 	imm	0
2001ccec:	e8740328 	lwi	r3, r20, 808
2001ccf0:	f8830000 	swi	r4, r3, 0
		numTokens_BTYPE = index_BTYPE + fifo_i16_get_num_tokens(decoder_parser_mvrecon_BTYPE, 1);
2001ccf4:	b0000000 	imm	0
2001ccf8:	e874031c 	lwi	r3, r20, 796
2001ccfc:	e8630000 	lwi	r3, r3, 0
2001cd00:	10a30000 	addk	r5, r3, r0
2001cd04:	30c00001 	addik	r6, r0, 1
2001cd08:	b0000000 	imm	0
2001cd0c:	e8940310 	lwi	r4, r20, 784
2001cd10:	99fc2000 	brald	r15, r4
2001cd14:	80000000 	or	r0, r0, r0
2001cd18:	10830000 	addk	r4, r3, r0
2001cd1c:	b0000000 	imm	0
2001cd20:	e8740328 	lwi	r3, r20, 808
2001cd24:	e8630000 	lwi	r3, r3, 0
2001cd28:	10841800 	addk	r4, r4, r3
2001cd2c:	b0000000 	imm	0
2001cd30:	e874032c 	lwi	r3, r20, 812
2001cd34:	f8830000 	swi	r4, r3, 0
	}
2001cd38:	e9e10000 	lwi	r15, r1, 0
2001cd3c:	10330000 	addk	r1, r19, r0
2001cd40:	ea61001c 	lwi	r19, r1, 28
2001cd44:	ea810020 	lwi	r20, r1, 32
2001cd48:	30210024 	addik	r1, r1, 36
2001cd4c:	b60f0008 	rtsd	r15, 8
2001cd50:	80000000 	or	r0, r0, r0

2001cd54 <read_end_BTYPE>:
	
	static void read_end_BTYPE() {
2001cd54:	3021fff4 	addik	r1, r1, -12
2001cd58:	fa610004 	swi	r19, r1, 4
2001cd5c:	fa810008 	swi	r20, r1, 8
2001cd60:	12610000 	addk	r19, r1, r0
2001cd64:	96808000 	mfs	r20, rpc
2001cd68:	b000dffe 	imm	-8194
2001cd6c:	32944bf8 	addik	r20, r20, 19448
		decoder_parser_mvrecon_BTYPE->read_inds[1] = index_BTYPE;
2001cd70:	b0000000 	imm	0
2001cd74:	e874031c 	lwi	r3, r20, 796
2001cd78:	e8630000 	lwi	r3, r3, 0
2001cd7c:	e863000c 	lwi	r3, r3, 12
2001cd80:	30630004 	addik	r3, r3, 4
2001cd84:	b0000000 	imm	0
2001cd88:	e8940328 	lwi	r4, r20, 808
2001cd8c:	e8840000 	lwi	r4, r4, 0
2001cd90:	f8830000 	swi	r4, r3, 0
	}
2001cd94:	10330000 	addk	r1, r19, r0
2001cd98:	ea610004 	lwi	r19, r1, 4
2001cd9c:	ea810008 	lwi	r20, r1, 8
2001cda0:	3021000c 	addik	r1, r1, 12
2001cda4:	b60f0008 	rtsd	r15, 8
2001cda8:	80000000 	or	r0, r0, r0

2001cdac <read_MVIN>:
	static void read_MVIN() {
2001cdac:	3021ffdc 	addik	r1, r1, -36
2001cdb0:	f9e10000 	swi	r15, r1, 0
2001cdb4:	fa61001c 	swi	r19, r1, 28
2001cdb8:	fa810020 	swi	r20, r1, 32
2001cdbc:	12610000 	addk	r19, r1, r0
2001cdc0:	96808000 	mfs	r20, rpc
2001cdc4:	b000dffe 	imm	-8194
2001cdc8:	32944b9c 	addik	r20, r20, 19356
		index_MVIN = decoder_parser_mvrecon_MVIN->read_inds[0];
2001cdcc:	b0000000 	imm	0
2001cdd0:	e8740318 	lwi	r3, r20, 792
2001cdd4:	e8630000 	lwi	r3, r3, 0
2001cdd8:	e863000c 	lwi	r3, r3, 12
2001cddc:	e8830000 	lwi	r4, r3, 0
2001cde0:	b0000000 	imm	0
2001cde4:	e8740330 	lwi	r3, r20, 816
2001cde8:	f8830000 	swi	r4, r3, 0
		numTokens_MVIN = index_MVIN + fifo_i16_get_num_tokens(decoder_parser_mvrecon_MVIN, 0);
2001cdec:	b0000000 	imm	0
2001cdf0:	e8740318 	lwi	r3, r20, 792
2001cdf4:	e8630000 	lwi	r3, r3, 0
2001cdf8:	10a30000 	addk	r5, r3, r0
2001cdfc:	10c00000 	addk	r6, r0, r0
2001ce00:	b0000000 	imm	0
2001ce04:	e8940310 	lwi	r4, r20, 784
2001ce08:	99fc2000 	brald	r15, r4
2001ce0c:	80000000 	or	r0, r0, r0
2001ce10:	10830000 	addk	r4, r3, r0
2001ce14:	b0000000 	imm	0
2001ce18:	e8740330 	lwi	r3, r20, 816
2001ce1c:	e8630000 	lwi	r3, r3, 0
2001ce20:	10841800 	addk	r4, r4, r3
2001ce24:	b0000000 	imm	0
2001ce28:	e8740334 	lwi	r3, r20, 820
2001ce2c:	f8830000 	swi	r4, r3, 0
	}
2001ce30:	e9e10000 	lwi	r15, r1, 0
2001ce34:	10330000 	addk	r1, r19, r0
2001ce38:	ea61001c 	lwi	r19, r1, 28
2001ce3c:	ea810020 	lwi	r20, r1, 32
2001ce40:	30210024 	addik	r1, r1, 36
2001ce44:	b60f0008 	rtsd	r15, 8
2001ce48:	80000000 	or	r0, r0, r0

2001ce4c <read_end_MVIN>:
	
	static void read_end_MVIN() {
2001ce4c:	3021fff4 	addik	r1, r1, -12
2001ce50:	fa610004 	swi	r19, r1, 4
2001ce54:	fa810008 	swi	r20, r1, 8
2001ce58:	12610000 	addk	r19, r1, r0
2001ce5c:	96808000 	mfs	r20, rpc
2001ce60:	b000dffe 	imm	-8194
2001ce64:	32944b00 	addik	r20, r20, 19200
		decoder_parser_mvrecon_MVIN->read_inds[0] = index_MVIN;
2001ce68:	b0000000 	imm	0
2001ce6c:	e8740318 	lwi	r3, r20, 792
2001ce70:	e8630000 	lwi	r3, r3, 0
2001ce74:	e863000c 	lwi	r3, r3, 12
2001ce78:	b0000000 	imm	0
2001ce7c:	e8940330 	lwi	r4, r20, 816
2001ce80:	e8840000 	lwi	r4, r4, 0
2001ce84:	f8830000 	swi	r4, r3, 0
	}
2001ce88:	10330000 	addk	r1, r19, r0
2001ce8c:	ea610004 	lwi	r19, r1, 4
2001ce90:	ea810008 	lwi	r20, r1, 8
2001ce94:	3021000c 	addik	r1, r1, 12
2001ce98:	b60f0008 	rtsd	r15, 8
2001ce9c:	80000000 	or	r0, r0, r0

2001cea0 <read_A>:
	static void read_A() {
2001cea0:	3021ffdc 	addik	r1, r1, -36
2001cea4:	f9e10000 	swi	r15, r1, 0
2001cea8:	fa61001c 	swi	r19, r1, 28
2001ceac:	fa810020 	swi	r20, r1, 32
2001ceb0:	12610000 	addk	r19, r1, r0
2001ceb4:	96808000 	mfs	r20, rpc
2001ceb8:	b000dffe 	imm	-8194
2001cebc:	32944aa8 	addik	r20, r20, 19112
		index_A = decoder_parser_mvrecon_A->read_inds[0];
2001cec0:	b0000000 	imm	0
2001cec4:	e8740320 	lwi	r3, r20, 800
2001cec8:	e8630000 	lwi	r3, r3, 0
2001cecc:	e863000c 	lwi	r3, r3, 12
2001ced0:	e8830000 	lwi	r4, r3, 0
2001ced4:	b0000000 	imm	0
2001ced8:	e8740338 	lwi	r3, r20, 824
2001cedc:	f8830000 	swi	r4, r3, 0
		numTokens_A = index_A + fifo_i16_get_num_tokens(decoder_parser_mvrecon_A, 0);
2001cee0:	b0000000 	imm	0
2001cee4:	e8740320 	lwi	r3, r20, 800
2001cee8:	e8630000 	lwi	r3, r3, 0
2001ceec:	10a30000 	addk	r5, r3, r0
2001cef0:	10c00000 	addk	r6, r0, r0
2001cef4:	b0000000 	imm	0
2001cef8:	e8940310 	lwi	r4, r20, 784
2001cefc:	99fc2000 	brald	r15, r4
2001cf00:	80000000 	or	r0, r0, r0
2001cf04:	10830000 	addk	r4, r3, r0
2001cf08:	b0000000 	imm	0
2001cf0c:	e8740338 	lwi	r3, r20, 824
2001cf10:	e8630000 	lwi	r3, r3, 0
2001cf14:	10841800 	addk	r4, r4, r3
2001cf18:	b0000000 	imm	0
2001cf1c:	e874033c 	lwi	r3, r20, 828
2001cf20:	f8830000 	swi	r4, r3, 0
	}
2001cf24:	e9e10000 	lwi	r15, r1, 0
2001cf28:	10330000 	addk	r1, r19, r0
2001cf2c:	ea61001c 	lwi	r19, r1, 28
2001cf30:	ea810020 	lwi	r20, r1, 32
2001cf34:	30210024 	addik	r1, r1, 36
2001cf38:	b60f0008 	rtsd	r15, 8
2001cf3c:	80000000 	or	r0, r0, r0

2001cf40 <read_end_A>:
	
	static void read_end_A() {
2001cf40:	3021fff4 	addik	r1, r1, -12
2001cf44:	fa610004 	swi	r19, r1, 4
2001cf48:	fa810008 	swi	r20, r1, 8
2001cf4c:	12610000 	addk	r19, r1, r0
2001cf50:	96808000 	mfs	r20, rpc
2001cf54:	b000dffe 	imm	-8194
2001cf58:	32944a0c 	addik	r20, r20, 18956
		decoder_parser_mvrecon_A->read_inds[0] = index_A;
2001cf5c:	b0000000 	imm	0
2001cf60:	e8740320 	lwi	r3, r20, 800
2001cf64:	e8630000 	lwi	r3, r3, 0
2001cf68:	e863000c 	lwi	r3, r3, 12
2001cf6c:	b0000000 	imm	0
2001cf70:	e8940338 	lwi	r4, r20, 824
2001cf74:	e8840000 	lwi	r4, r4, 0
2001cf78:	f8830000 	swi	r4, r3, 0
	}
2001cf7c:	10330000 	addk	r1, r19, r0
2001cf80:	ea610004 	lwi	r19, r1, 4
2001cf84:	ea810008 	lwi	r20, r1, 8
2001cf88:	3021000c 	addik	r1, r1, 12
2001cf8c:	b60f0008 	rtsd	r15, 8
2001cf90:	80000000 	or	r0, r0, r0

2001cf94 <write_MV>:

	static void write_MV() {
2001cf94:	3021ffdc 	addik	r1, r1, -36
2001cf98:	f9e10000 	swi	r15, r1, 0
2001cf9c:	fa61001c 	swi	r19, r1, 28
2001cfa0:	fa810020 	swi	r20, r1, 32
2001cfa4:	12610000 	addk	r19, r1, r0
2001cfa8:	96808000 	mfs	r20, rpc
2001cfac:	b000dffe 	imm	-8194
2001cfb0:	329449b4 	addik	r20, r20, 18868
		index_MV = (*decoder_parser_mvrecon_MV->write_ind);
2001cfb4:	b0000000 	imm	0
2001cfb8:	e8740324 	lwi	r3, r20, 804
2001cfbc:	e8630000 	lwi	r3, r3, 0
2001cfc0:	e8630010 	lwi	r3, r3, 16
2001cfc4:	e8830000 	lwi	r4, r3, 0
2001cfc8:	b0000000 	imm	0
2001cfcc:	e8740340 	lwi	r3, r20, 832
2001cfd0:	f8830000 	swi	r4, r3, 0
		numFree_MV = index_MV + fifo_i16_get_room(decoder_parser_mvrecon_MV, NUM_READERS_MV);
2001cfd4:	b0000000 	imm	0
2001cfd8:	e8740324 	lwi	r3, r20, 804
2001cfdc:	e8630000 	lwi	r3, r3, 0
2001cfe0:	10a30000 	addk	r5, r3, r0
2001cfe4:	30c00001 	addik	r6, r0, 1
2001cfe8:	b0000000 	imm	0
2001cfec:	e8940314 	lwi	r4, r20, 788
2001cff0:	99fc2000 	brald	r15, r4
2001cff4:	80000000 	or	r0, r0, r0
2001cff8:	10830000 	addk	r4, r3, r0
2001cffc:	b0000000 	imm	0
2001d000:	e8740340 	lwi	r3, r20, 832
2001d004:	e8630000 	lwi	r3, r3, 0
2001d008:	10841800 	addk	r4, r4, r3
2001d00c:	b0000000 	imm	0
2001d010:	e8740344 	lwi	r3, r20, 836
2001d014:	f8830000 	swi	r4, r3, 0
	}
2001d018:	e9e10000 	lwi	r15, r1, 0
2001d01c:	10330000 	addk	r1, r19, r0
2001d020:	ea61001c 	lwi	r19, r1, 28
2001d024:	ea810020 	lwi	r20, r1, 32
2001d028:	30210024 	addik	r1, r1, 36
2001d02c:	b60f0008 	rtsd	r15, 8
2001d030:	80000000 	or	r0, r0, r0

2001d034 <write_end_MV>:
	
	static void write_end_MV() {
2001d034:	3021fff4 	addik	r1, r1, -12
2001d038:	fa610004 	swi	r19, r1, 4
2001d03c:	fa810008 	swi	r20, r1, 8
2001d040:	12610000 	addk	r19, r1, r0
2001d044:	96808000 	mfs	r20, rpc
2001d048:	b000dffe 	imm	-8194
2001d04c:	32944918 	addik	r20, r20, 18712
		(*decoder_parser_mvrecon_MV->write_ind) = index_MV;
2001d050:	b0000000 	imm	0
2001d054:	e8740324 	lwi	r3, r20, 804
2001d058:	e8630000 	lwi	r3, r3, 0
2001d05c:	e8630010 	lwi	r3, r3, 16
2001d060:	b0000000 	imm	0
2001d064:	e8940340 	lwi	r4, r20, 832
2001d068:	e8840000 	lwi	r4, r4, 0
2001d06c:	f8830000 	swi	r4, r3, 0
	}
2001d070:	10330000 	addk	r1, r19, r0
2001d074:	ea610004 	lwi	r19, r1, 4
2001d078:	ea810008 	lwi	r20, r1, 8
2001d07c:	3021000c 	addik	r1, r1, 12
2001d080:	b60f0008 	rtsd	r15, 8
2001d084:	80000000 	or	r0, r0, r0

2001d088 <middle>:
	static i32 mvcalc(i32 pred, i32 mv_mag, i32 mag_shift);
	static i32 mvclip(i32 v);
	static i32 uvclip_1(i32 v);
	static i32 uvclip_4(i32 v);

	static i32 middle(i32 a, i32 b, i32 c) {
2001d088:	3021fff0 	addik	r1, r1, -16
2001d08c:	fa610008 	swi	r19, r1, 8
2001d090:	fa81000c 	swi	r20, r1, 12
2001d094:	12610000 	addk	r19, r1, r0
2001d098:	96808000 	mfs	r20, rpc
2001d09c:	b000dffe 	imm	-8194
2001d0a0:	329448c4 	addik	r20, r20, 18628
2001d0a4:	f8b30014 	swi	r5, r19, 20
2001d0a8:	f8d30018 	swi	r6, r19, 24
2001d0ac:	f8f3001c 	swi	r7, r19, 28
		i32 tmp_if;
	
		if (a < b) {
2001d0b0:	e8930014 	lwi	r4, r19, 20
2001d0b4:	e8730018 	lwi	r3, r19, 24
2001d0b8:	16432001 	cmp	r18, r3, r4
2001d0bc:	bcb20048 	bgei	r18, 72		// 2001d104
			if (a > c) {
2001d0c0:	e8930014 	lwi	r4, r19, 20
2001d0c4:	e873001c 	lwi	r3, r19, 28
2001d0c8:	16441801 	cmp	r18, r4, r3
2001d0cc:	bcb20010 	bgei	r18, 16		// 2001d0dc
				tmp_if = a;
2001d0d0:	e8730014 	lwi	r3, r19, 20
2001d0d4:	f8730004 	swi	r3, r19, 4
2001d0d8:	b800006c 	bri	108		// 2001d144
			} else {
				if (b < c) {
2001d0dc:	e8930018 	lwi	r4, r19, 24
2001d0e0:	e873001c 	lwi	r3, r19, 28
2001d0e4:	16432001 	cmp	r18, r3, r4
2001d0e8:	bcb20010 	bgei	r18, 16		// 2001d0f8
					tmp_if = b;
2001d0ec:	e8730018 	lwi	r3, r19, 24
2001d0f0:	f8730004 	swi	r3, r19, 4
2001d0f4:	b8000050 	bri	80		// 2001d144
				} else {
					tmp_if = c;
2001d0f8:	e873001c 	lwi	r3, r19, 28
2001d0fc:	f8730004 	swi	r3, r19, 4
2001d100:	b8000044 	bri	68		// 2001d144
				}
			}
		} else {
			if (b > c) {
2001d104:	e8930018 	lwi	r4, r19, 24
2001d108:	e873001c 	lwi	r3, r19, 28
2001d10c:	16441801 	cmp	r18, r4, r3
2001d110:	bcb20010 	bgei	r18, 16		// 2001d120
				tmp_if = b;
2001d114:	e8730018 	lwi	r3, r19, 24
2001d118:	f8730004 	swi	r3, r19, 4
2001d11c:	b8000028 	bri	40		// 2001d144
			} else {
				if (a < c) {
2001d120:	e8930014 	lwi	r4, r19, 20
2001d124:	e873001c 	lwi	r3, r19, 28
2001d128:	16432001 	cmp	r18, r3, r4
2001d12c:	bcb20010 	bgei	r18, 16		// 2001d13c
					tmp_if = a;
2001d130:	e8730014 	lwi	r3, r19, 20
2001d134:	f8730004 	swi	r3, r19, 4
2001d138:	b800000c 	bri	12		// 2001d144
				} else {
					tmp_if = c;
2001d13c:	e873001c 	lwi	r3, r19, 28
2001d140:	f8730004 	swi	r3, r19, 4
				}
			}
		}
		return tmp_if;
2001d144:	e8730004 	lwi	r3, r19, 4
	}
2001d148:	10330000 	addk	r1, r19, r0
2001d14c:	ea610008 	lwi	r19, r1, 8
2001d150:	ea81000c 	lwi	r20, r1, 12
2001d154:	30210010 	addik	r1, r1, 16
2001d158:	b60f0008 	rtsd	r15, 8
2001d15c:	80000000 	or	r0, r0, r0

2001d160 <mvcalc>:
	static i32 mvcalc(i32 pred, i32 mv_mag, i32 mag_shift) {
2001d160:	3021ffe8 	addik	r1, r1, -24
2001d164:	fa610010 	swi	r19, r1, 16
2001d168:	fa810014 	swi	r20, r1, 20
2001d16c:	12610000 	addk	r19, r1, r0
2001d170:	96808000 	mfs	r20, rpc
2001d174:	b000dffe 	imm	-8194
2001d178:	329447ec 	addik	r20, r20, 18412
2001d17c:	f8b3001c 	swi	r5, r19, 28
2001d180:	f8d30020 	swi	r6, r19, 32
2001d184:	f8f30024 	swi	r7, r19, 36
		i16 local_mv_rsize;
		i64 tmp_if;
	
		local_mv_rsize = mv_rsize;
2001d188:	b0000000 	imm	0
2001d18c:	e8740360 	lwi	r3, r20, 864
2001d190:	e4630000 	lhui	r3, r3, 0
2001d194:	f473000c 	shi	r3, r19, 12
		if (local_mv_rsize == 0 || mv_mag == 0) {
2001d198:	e473000c 	lhui	r3, r19, 12
2001d19c:	90630061 	sext16	r3, r3
2001d1a0:	bc03000c 	beqi	r3, 12		// 2001d1ac
2001d1a4:	e8730020 	lwi	r3, r19, 32
2001d1a8:	bc230030 	bnei	r3, 48		// 2001d1d8
			tmp_if = pred + mv_mag;
2001d1ac:	e893001c 	lwi	r4, r19, 28
2001d1b0:	e8730020 	lwi	r3, r19, 32
2001d1b4:	10641800 	addk	r3, r4, r3
2001d1b8:	10801800 	addk	r4, r0, r3
2001d1bc:	00a42000 	add	r5, r4, r4
2001d1c0:	08a00000 	addc	r5, r0, r0
2001d1c4:	bc050008 	beqi	r5, 8		// 2001d1cc
2001d1c8:	20a0ffff 	addi	r5, r0, -1
2001d1cc:	f8930004 	swi	r4, r19, 4
2001d1d0:	f8b30008 	swi	r5, r19, 8
2001d1d4:	b8000060 	bri	96		// 2001d234
		} else {
			if (mv_mag < 0) {
2001d1d8:	e8730020 	lwi	r3, r19, 32
2001d1dc:	bca30030 	bgei	r3, 48		// 2001d20c
				tmp_if = pred - mag_shift;
2001d1e0:	e893001c 	lwi	r4, r19, 28
2001d1e4:	e8730024 	lwi	r3, r19, 36
2001d1e8:	14632000 	rsubk	r3, r3, r4
2001d1ec:	10801800 	addk	r4, r0, r3
2001d1f0:	00a42000 	add	r5, r4, r4
2001d1f4:	08a00000 	addc	r5, r0, r0
2001d1f8:	bc050008 	beqi	r5, 8		// 2001d200
2001d1fc:	20a0ffff 	addi	r5, r0, -1
2001d200:	f8930004 	swi	r4, r19, 4
2001d204:	f8b30008 	swi	r5, r19, 8
2001d208:	b800002c 	bri	44		// 2001d234
			} else {
				tmp_if = pred + mag_shift;
2001d20c:	e893001c 	lwi	r4, r19, 28
2001d210:	e8730024 	lwi	r3, r19, 36
2001d214:	10641800 	addk	r3, r4, r3
2001d218:	10801800 	addk	r4, r0, r3
2001d21c:	00a42000 	add	r5, r4, r4
2001d220:	08a00000 	addc	r5, r0, r0
2001d224:	bc050008 	beqi	r5, 8		// 2001d22c
2001d228:	20a0ffff 	addi	r5, r0, -1
2001d22c:	f8930004 	swi	r4, r19, 4
2001d230:	f8b30008 	swi	r5, r19, 8
			}
		}
		return tmp_if;
2001d234:	e8730004 	lwi	r3, r19, 4
	}
2001d238:	10330000 	addk	r1, r19, r0
2001d23c:	ea610010 	lwi	r19, r1, 16
2001d240:	ea810014 	lwi	r20, r1, 20
2001d244:	30210018 	addik	r1, r1, 24
2001d248:	b60f0008 	rtsd	r15, 8
2001d24c:	80000000 	or	r0, r0, r0

2001d250 <mvclip>:
	static i32 mvclip(i32 v) {
2001d250:	3021ffe4 	addik	r1, r1, -28
2001d254:	fa610014 	swi	r19, r1, 20
2001d258:	fa810018 	swi	r20, r1, 24
2001d25c:	12610000 	addk	r19, r1, r0
2001d260:	96808000 	mfs	r20, rpc
2001d264:	b000dffe 	imm	-8194
2001d268:	329446fc 	addik	r20, r20, 18172
2001d26c:	f8b30020 	swi	r5, r19, 32
		i16 local_mv_low;
		i64 tmp_if;
		i16 local_mv_range;
		i16 local_mv_high;
	
		local_mv_low = mv_low;
2001d270:	b0000000 	imm	0
2001d274:	e8740368 	lwi	r3, r20, 872
2001d278:	e4630000 	lhui	r3, r3, 0
2001d27c:	f473000c 	shi	r3, r19, 12
		if (v < local_mv_low) {
2001d280:	e473000c 	lhui	r3, r19, 12
2001d284:	90830061 	sext16	r4, r3
2001d288:	e8730020 	lwi	r3, r19, 32
2001d28c:	16441801 	cmp	r18, r4, r3
2001d290:	bcb20044 	bgei	r18, 68		// 2001d2d4
			local_mv_range = mv_range;
2001d294:	b0000000 	imm	0
2001d298:	e8740364 	lwi	r3, r20, 868
2001d29c:	e4630000 	lhui	r3, r3, 0
2001d2a0:	f473000e 	shi	r3, r19, 14
			tmp_if = v + local_mv_range;
2001d2a4:	e473000e 	lhui	r3, r19, 14
2001d2a8:	90830061 	sext16	r4, r3
2001d2ac:	e8730020 	lwi	r3, r19, 32
2001d2b0:	10641800 	addk	r3, r4, r3
2001d2b4:	10801800 	addk	r4, r0, r3
2001d2b8:	00a42000 	add	r5, r4, r4
2001d2bc:	08a00000 	addc	r5, r0, r0
2001d2c0:	bc050008 	beqi	r5, 8		// 2001d2c8
2001d2c4:	20a0ffff 	addi	r5, r0, -1
2001d2c8:	f8930004 	swi	r4, r19, 4
2001d2cc:	f8b30008 	swi	r5, r19, 8
2001d2d0:	b8000084 	bri	132		// 2001d354
		} else {
			local_mv_high = mv_high;
2001d2d4:	b0000000 	imm	0
2001d2d8:	e874036c 	lwi	r3, r20, 876
2001d2dc:	e4630000 	lhui	r3, r3, 0
2001d2e0:	f4730010 	shi	r3, r19, 16
			if (v > local_mv_high) {
2001d2e4:	e4730010 	lhui	r3, r19, 16
2001d2e8:	90830061 	sext16	r4, r3
2001d2ec:	e8730020 	lwi	r3, r19, 32
2001d2f0:	16432001 	cmp	r18, r3, r4
2001d2f4:	bcb20044 	bgei	r18, 68		// 2001d338
				local_mv_range = mv_range;
2001d2f8:	b0000000 	imm	0
2001d2fc:	e8740364 	lwi	r3, r20, 868
2001d300:	e4630000 	lhui	r3, r3, 0
2001d304:	f473000e 	shi	r3, r19, 14
				tmp_if = v - local_mv_range;
2001d308:	e473000e 	lhui	r3, r19, 14
2001d30c:	90630061 	sext16	r3, r3
2001d310:	e8930020 	lwi	r4, r19, 32
2001d314:	14632000 	rsubk	r3, r3, r4
2001d318:	10801800 	addk	r4, r0, r3
2001d31c:	00a42000 	add	r5, r4, r4
2001d320:	08a00000 	addc	r5, r0, r0
2001d324:	bc050008 	beqi	r5, 8		// 2001d32c
2001d328:	20a0ffff 	addi	r5, r0, -1
2001d32c:	f8930004 	swi	r4, r19, 4
2001d330:	f8b30008 	swi	r5, r19, 8
2001d334:	b8000020 	bri	32		// 2001d354
			} else {
				tmp_if = v;
2001d338:	e8930020 	lwi	r4, r19, 32
2001d33c:	00a42000 	add	r5, r4, r4
2001d340:	08a00000 	addc	r5, r0, r0
2001d344:	bc050008 	beqi	r5, 8		// 2001d34c
2001d348:	20a0ffff 	addi	r5, r0, -1
2001d34c:	f8930004 	swi	r4, r19, 4
2001d350:	f8b30008 	swi	r5, r19, 8
			}
		}
		return tmp_if;
2001d354:	e8730004 	lwi	r3, r19, 4
	}
2001d358:	10330000 	addk	r1, r19, r0
2001d35c:	ea610014 	lwi	r19, r1, 20
2001d360:	ea810018 	lwi	r20, r1, 24
2001d364:	3021001c 	addik	r1, r1, 28
2001d368:	b60f0008 	rtsd	r15, 8
2001d36c:	80000000 	or	r0, r0, r0

2001d370 <uvclip_1>:
	static i32 uvclip_1(i32 v) {
2001d370:	3021ffec 	addik	r1, r1, -20
2001d374:	fa61000c 	swi	r19, r1, 12
2001d378:	fa810010 	swi	r20, r1, 16
2001d37c:	12610000 	addk	r19, r1, r0
2001d380:	96808000 	mfs	r20, rpc
2001d384:	b000dffe 	imm	-8194
2001d388:	329445dc 	addik	r20, r20, 17884
2001d38c:	f8b30018 	swi	r5, r19, 24
		i32 vv;
		u8 tmp_if;
	
		vv = v >> 1;
2001d390:	e8730018 	lwi	r3, r19, 24
2001d394:	90630001 	sra	r3, r3
2001d398:	f8730008 	swi	r3, r19, 8
		if ((v & 3) == 0) {
2001d39c:	e8730018 	lwi	r3, r19, 24
2001d3a0:	a4630003 	andi	r3, r3, 3
2001d3a4:	bc23000c 	bnei	r3, 12		// 2001d3b0
			tmp_if = 0;
2001d3a8:	f0130004 	sbi	r0, r19, 4
2001d3ac:	b800000c 	bri	12		// 2001d3b8
		} else {
			tmp_if = 1;
2001d3b0:	30600001 	addik	r3, r0, 1
2001d3b4:	f0730004 	sbi	r3, r19, 4
		}
		return vv | tmp_if;
2001d3b8:	e0930004 	lbui	r4, r19, 4
2001d3bc:	e8730008 	lwi	r3, r19, 8
2001d3c0:	80641800 	or	r3, r4, r3
	}
2001d3c4:	10330000 	addk	r1, r19, r0
2001d3c8:	ea61000c 	lwi	r19, r1, 12
2001d3cc:	ea810010 	lwi	r20, r1, 16
2001d3d0:	30210014 	addik	r1, r1, 20
2001d3d4:	b60f0008 	rtsd	r15, 8
2001d3d8:	80000000 	or	r0, r0, r0

2001d3dc <uvclip_4>:
	static i32 uvclip_4(i32 v) {
2001d3dc:	3021ffdc 	addik	r1, r1, -36
2001d3e0:	fa61001c 	swi	r19, r1, 28
2001d3e4:	fa810020 	swi	r20, r1, 32
2001d3e8:	12610000 	addk	r19, r1, r0
2001d3ec:	96808000 	mfs	r20, rpc
2001d3f0:	b000dffe 	imm	-8194
2001d3f4:	32944570 	addik	r20, r20, 17776
2001d3f8:	f8b30028 	swi	r5, r19, 40
		i32 resv;
		i32 delta;
		i32 vv;
		i32 tmp_if;
	
		sign = v < 0;
2001d3fc:	e8730028 	lwi	r3, r19, 40
2001d400:	6463001f 	bsrli	r3, r3, 31
2001d404:	a46300ff 	andi	r3, r3, 255
2001d408:	f8730010 	swi	r3, r19, 16
		if (sign) {
2001d40c:	e8730010 	lwi	r3, r19, 16
2001d410:	bc030014 	beqi	r3, 20		// 2001d424
			absv = -v;
2001d414:	e8730028 	lwi	r3, r19, 40
2001d418:	14630000 	rsubk	r3, r3, r0
2001d41c:	f8730004 	swi	r3, r19, 4
2001d420:	b800000c 	bri	12		// 2001d42c
		} else {
			absv = v;
2001d424:	e8730028 	lwi	r3, r19, 40
2001d428:	f8730004 	swi	r3, r19, 4
		}
		resv = absv - ((absv >> 4) << 4);
2001d42c:	e8730004 	lwi	r3, r19, 4
2001d430:	a463000f 	andi	r3, r3, 15
2001d434:	f8730014 	swi	r3, r19, 20
		if (resv < 3) {
2001d438:	e8930014 	lwi	r4, r19, 20
2001d43c:	30600002 	addik	r3, r0, 2
2001d440:	16441801 	cmp	r18, r4, r3
2001d444:	bc52000c 	blti	r18, 12		// 2001d450
			delta = 0;
2001d448:	f8130008 	swi	r0, r19, 8
2001d44c:	b8000028 	bri	40		// 2001d474
		} else {
			if (resv > 13) {
2001d450:	e8930014 	lwi	r4, r19, 20
2001d454:	3060000d 	addik	r3, r0, 13
2001d458:	16441801 	cmp	r18, r4, r3
2001d45c:	bcb20010 	bgei	r18, 16		// 2001d46c
				delta = 2;
2001d460:	30600002 	addik	r3, r0, 2
2001d464:	f8730008 	swi	r3, r19, 8
2001d468:	b800000c 	bri	12		// 2001d474
			} else {
				delta = 1;
2001d46c:	30600001 	addik	r3, r0, 1
2001d470:	f8730008 	swi	r3, r19, 8
			}
		}
		vv = ((absv >> 4) << 1) + delta;
2001d474:	e8730004 	lwi	r3, r19, 4
2001d478:	64630204 	bsrai	r3, r3, 4
2001d47c:	10831800 	addk	r4, r3, r3
2001d480:	e8730008 	lwi	r3, r19, 8
2001d484:	10641800 	addk	r3, r4, r3
2001d488:	f8730018 	swi	r3, r19, 24
		if (sign) {
2001d48c:	e8730010 	lwi	r3, r19, 16
2001d490:	bc030014 	beqi	r3, 20		// 2001d4a4
			tmp_if = -vv;
2001d494:	e8730018 	lwi	r3, r19, 24
2001d498:	14630000 	rsubk	r3, r3, r0
2001d49c:	f873000c 	swi	r3, r19, 12
2001d4a0:	b800000c 	bri	12		// 2001d4ac
		} else {
			tmp_if = vv;
2001d4a4:	e8730018 	lwi	r3, r19, 24
2001d4a8:	f873000c 	swi	r3, r19, 12
		}
		return tmp_if;
2001d4ac:	e873000c 	lwi	r3, r19, 12
	}
2001d4b0:	10330000 	addk	r1, r19, r0
2001d4b4:	ea61001c 	lwi	r19, r1, 28
2001d4b8:	ea810020 	lwi	r20, r1, 32
2001d4bc:	30210024 	addik	r1, r1, 36
2001d4c0:	b60f0008 	rtsd	r15, 8
2001d4c4:	80000000 	or	r0, r0, r0

2001d4c8 <isSchedulable_start>:

	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_start() {
2001d4c8:	3021ffe8 	addik	r1, r1, -24
2001d4cc:	fa610010 	swi	r19, r1, 16
2001d4d0:	fa810014 	swi	r20, r1, 20
2001d4d4:	12610000 	addk	r19, r1, r0
2001d4d8:	96808000 	mfs	r20, rpc
2001d4dc:	b000dffe 	imm	-8194
2001d4e0:	32944484 	addik	r20, r20, 17540
		i32 result;
		i16 cmd;
		i32 local_NEWVOP;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001d4e4:	b0000000 	imm	0
2001d4e8:	e874031c 	lwi	r3, r20, 796
2001d4ec:	e8630000 	lwi	r3, r3, 0
2001d4f0:	e8830004 	lwi	r4, r3, 4
2001d4f4:	b0000000 	imm	0
2001d4f8:	e8740328 	lwi	r3, r20, 808
2001d4fc:	e8630000 	lwi	r3, r3, 0
2001d500:	a46301ff 	andi	r3, r3, 511
2001d504:	10631800 	addk	r3, r3, r3
2001d508:	10641800 	addk	r3, r4, r3
2001d50c:	e4630000 	lhui	r3, r3, 0
2001d510:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
2001d514:	30600800 	addik	r3, r0, 2048	// 800 <decoder_parser_mvrecon_A>
2001d518:	f8730008 	swi	r3, r19, 8
		result = (cmd & local_NEWVOP) != 0;
2001d51c:	e4730004 	lhui	r3, r19, 4
2001d520:	90830061 	sext16	r4, r3
2001d524:	e8730008 	lwi	r3, r19, 8
2001d528:	84841800 	and	r4, r4, r3
2001d52c:	10600000 	addk	r3, r0, r0
2001d530:	8c641c00 	pcmpne	r3, r4, r3
2001d534:	a46300ff 	andi	r3, r3, 255
2001d538:	f873000c 	swi	r3, r19, 12
		return result;
2001d53c:	e873000c 	lwi	r3, r19, 12
	}
2001d540:	10330000 	addk	r1, r19, r0
2001d544:	ea610010 	lwi	r19, r1, 16
2001d548:	ea810014 	lwi	r20, r1, 20
2001d54c:	30210018 	addik	r1, r1, 24
2001d550:	b60f0008 	rtsd	r15, 8
2001d554:	80000000 	or	r0, r0, r0

2001d558 <start>:
	
	static void start() {
2001d558:	3021ffc4 	addik	r1, r1, -60
2001d55c:	f9e10000 	swi	r15, r1, 0
2001d560:	fa610034 	swi	r19, r1, 52
2001d564:	fa810038 	swi	r20, r1, 56
2001d568:	12610000 	addk	r19, r1, r0
2001d56c:	96808000 	mfs	r20, rpc
2001d570:	b000dffe 	imm	-8194
2001d574:	329443f0 	addik	r20, r20, 17392
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2001d578:	b0000000 	imm	0
2001d57c:	e8740328 	lwi	r3, r20, 808
2001d580:	e8630000 	lwi	r3, r3, 0
2001d584:	a46301ff 	andi	r3, r3, 511
2001d588:	f873001c 	swi	r3, r19, 28
		i32 local_FCODE_SHIFT;
		i8 fcode;
		i16 local_mv_rsize;
		i16 local_mv_range;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001d58c:	b0000000 	imm	0
2001d590:	e874031c 	lwi	r3, r20, 796
2001d594:	e8630000 	lwi	r3, r3, 0
2001d598:	e8830004 	lwi	r4, r3, 4
2001d59c:	b0000000 	imm	0
2001d5a0:	e8740328 	lwi	r3, r20, 808
2001d5a4:	e8630000 	lwi	r3, r3, 0
2001d5a8:	a46301ff 	andi	r3, r3, 511
2001d5ac:	10631800 	addk	r3, r3, r3
2001d5b0:	10641800 	addk	r3, r4, r3
2001d5b4:	e4630000 	lhui	r3, r3, 0
2001d5b8:	f4730020 	shi	r3, r19, 32
		local_FCODE_MASK = ConstantsBtype_FCODE_MASK;
2001d5bc:	306001c0 	addik	r3, r0, 448
2001d5c0:	f8730024 	swi	r3, r19, 36
		local_FCODE_SHIFT = Constants_FCODE_SHIFT;
2001d5c4:	30600006 	addik	r3, r0, 6
2001d5c8:	f8730028 	swi	r3, r19, 40
		fcode = (cmd & local_FCODE_MASK) >> local_FCODE_SHIFT;
2001d5cc:	e4730020 	lhui	r3, r19, 32
2001d5d0:	90830061 	sext16	r4, r3
2001d5d4:	e8730024 	lwi	r3, r19, 36
2001d5d8:	84841800 	and	r4, r4, r3
2001d5dc:	e8730028 	lwi	r3, r19, 40
2001d5e0:	44641a00 	bsra	r3, r4, r3
2001d5e4:	f073002c 	sbi	r3, r19, 44
		mbx = 0;
2001d5e8:	b0000000 	imm	0
2001d5ec:	e8740348 	lwi	r3, r20, 840
2001d5f0:	f0030000 	sbi	r0, r3, 0
		top_edge = 1;
2001d5f4:	b0000000 	imm	0
2001d5f8:	e874034c 	lwi	r3, r20, 844
2001d5fc:	30800001 	addik	r4, r0, 1
2001d600:	f8830000 	swi	r4, r3, 0
		comp = 0;
2001d604:	b0000000 	imm	0
2001d608:	e8740350 	lwi	r3, r20, 848
2001d60c:	f0030000 	sbi	r0, r3, 0
		if (fcode > 0) {
2001d610:	e073002c 	lbui	r3, r19, 44
2001d614:	90630060 	sext8	r3, r3
2001d618:	bc6300f0 	blei	r3, 240		// 2001d708
			mv_rsize = fcode - 1;
2001d61c:	e073002c 	lbui	r3, r19, 44
2001d620:	90630060 	sext8	r3, r3
2001d624:	b0000000 	imm	0
2001d628:	a463ffff 	andi	r3, r3, -1
2001d62c:	3063ffff 	addik	r3, r3, -1
2001d630:	b0000000 	imm	0
2001d634:	a463ffff 	andi	r3, r3, -1
2001d638:	90830061 	sext16	r4, r3
2001d63c:	b0000000 	imm	0
2001d640:	e8740360 	lwi	r3, r20, 864
2001d644:	f4830000 	shi	r4, r3, 0
			local_mv_rsize = mv_rsize;
2001d648:	b0000000 	imm	0
2001d64c:	e8740360 	lwi	r3, r20, 864
2001d650:	e4630000 	lhui	r3, r3, 0
2001d654:	f473002e 	shi	r3, r19, 46
			mv_range = 1 << (local_mv_rsize + 5);
2001d658:	e473002e 	lhui	r3, r19, 46
2001d65c:	90630061 	sext16	r3, r3
2001d660:	30630005 	addik	r3, r3, 5
2001d664:	30800001 	addik	r4, r0, 1
2001d668:	44641c00 	bsll	r3, r4, r3
2001d66c:	90830061 	sext16	r4, r3
2001d670:	b0000000 	imm	0
2001d674:	e8740364 	lwi	r3, r20, 868
2001d678:	f4830000 	shi	r4, r3, 0
			local_mv_range = mv_range;
2001d67c:	b0000000 	imm	0
2001d680:	e8740364 	lwi	r3, r20, 868
2001d684:	e4630000 	lhui	r3, r3, 0
2001d688:	f4730030 	shi	r3, r19, 48
			mv_low = -local_mv_range;
2001d68c:	e4730030 	lhui	r3, r19, 48
2001d690:	14630000 	rsubk	r3, r3, r0
2001d694:	b0000000 	imm	0
2001d698:	a463ffff 	andi	r3, r3, -1
2001d69c:	90830061 	sext16	r4, r3
2001d6a0:	b0000000 	imm	0
2001d6a4:	e8740368 	lwi	r3, r20, 872
2001d6a8:	f4830000 	shi	r4, r3, 0
			local_mv_range = mv_range;
2001d6ac:	b0000000 	imm	0
2001d6b0:	e8740364 	lwi	r3, r20, 868
2001d6b4:	e4630000 	lhui	r3, r3, 0
2001d6b8:	f4730030 	shi	r3, r19, 48
			mv_high = local_mv_range - 1;
2001d6bc:	e4730030 	lhui	r3, r19, 48
2001d6c0:	3063ffff 	addik	r3, r3, -1
2001d6c4:	b0000000 	imm	0
2001d6c8:	a463ffff 	andi	r3, r3, -1
2001d6cc:	90830061 	sext16	r4, r3
2001d6d0:	b0000000 	imm	0
2001d6d4:	e874036c 	lwi	r3, r20, 876
2001d6d8:	f4830000 	shi	r4, r3, 0
			local_mv_range = mv_range;
2001d6dc:	b0000000 	imm	0
2001d6e0:	e8740364 	lwi	r3, r20, 868
2001d6e4:	e4630000 	lhui	r3, r3, 0
2001d6e8:	f4730030 	shi	r3, r19, 48
			mv_range = local_mv_range << 1;
2001d6ec:	e4730030 	lhui	r3, r19, 48
2001d6f0:	90630061 	sext16	r3, r3
2001d6f4:	10631800 	addk	r3, r3, r3
2001d6f8:	90830061 	sext16	r4, r3
2001d6fc:	b0000000 	imm	0
2001d700:	e8740364 	lwi	r3, r20, 868
2001d704:	f4830000 	shi	r4, r3, 0
		}
	
		// Update ports indexes
		index_BTYPE += 1;
2001d708:	b0000000 	imm	0
2001d70c:	e8740328 	lwi	r3, r20, 808
2001d710:	e8630000 	lwi	r3, r3, 0
2001d714:	30830001 	addik	r4, r3, 1
2001d718:	b0000000 	imm	0
2001d71c:	e8740328 	lwi	r3, r20, 808
2001d720:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
2001d724:	b0000000 	imm	0
2001d728:	e87403b4 	lwi	r3, r20, 948
2001d72c:	99fc1800 	brald	r15, r3
2001d730:	80000000 	or	r0, r0, r0
	}
2001d734:	e9e10000 	lwi	r15, r1, 0
2001d738:	10330000 	addk	r1, r19, r0
2001d73c:	ea610034 	lwi	r19, r1, 52
2001d740:	ea810038 	lwi	r20, r1, 56
2001d744:	3021003c 	addik	r1, r1, 60
2001d748:	b60f0008 	rtsd	r15, 8
2001d74c:	80000000 	or	r0, r0, r0

2001d750 <isSchedulable_getw>:
	static i32 isSchedulable_getw() {
2001d750:	3021fff0 	addik	r1, r1, -16
2001d754:	fa610008 	swi	r19, r1, 8
2001d758:	fa81000c 	swi	r20, r1, 12
2001d75c:	12610000 	addk	r19, r1, r0
2001d760:	96808000 	mfs	r20, rpc
2001d764:	b000dffe 	imm	-8194
2001d768:	329441fc 	addik	r20, r20, 16892
		i32 result;
	
		result = 1;
2001d76c:	30600001 	addik	r3, r0, 1
2001d770:	f8730004 	swi	r3, r19, 4
		return result;
2001d774:	e8730004 	lwi	r3, r19, 4
	}
2001d778:	10330000 	addk	r1, r19, r0
2001d77c:	ea610008 	lwi	r19, r1, 8
2001d780:	ea81000c 	lwi	r20, r1, 12
2001d784:	30210010 	addik	r1, r1, 16
2001d788:	b60f0008 	rtsd	r15, 8
2001d78c:	80000000 	or	r0, r0, r0

2001d790 <getw_replaced>:
	
	static void getw_replaced() {
2001d790:	3021ffd4 	addik	r1, r1, -44
2001d794:	f9e10000 	swi	r15, r1, 0
2001d798:	fa610024 	swi	r19, r1, 36
2001d79c:	fa810028 	swi	r20, r1, 40
2001d7a0:	12610000 	addk	r19, r1, r0
2001d7a4:	96808000 	mfs	r20, rpc
2001d7a8:	b000dffe 	imm	-8194
2001d7ac:	329441b8 	addik	r20, r20, 16824
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2001d7b0:	b0000000 	imm	0
2001d7b4:	e8740328 	lwi	r3, r20, 808
2001d7b8:	e8630000 	lwi	r3, r3, 0
2001d7bc:	a46301ff 	andi	r3, r3, 511
2001d7c0:	f873001c 	swi	r3, r19, 28
	
		i16 w;
	
		w = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001d7c4:	b0000000 	imm	0
2001d7c8:	e874031c 	lwi	r3, r20, 796
2001d7cc:	e8630000 	lwi	r3, r3, 0
2001d7d0:	e8830004 	lwi	r4, r3, 4
2001d7d4:	b0000000 	imm	0
2001d7d8:	e8740328 	lwi	r3, r20, 808
2001d7dc:	e8630000 	lwi	r3, r3, 0
2001d7e0:	a46301ff 	andi	r3, r3, 511
2001d7e4:	10631800 	addk	r3, r3, r3
2001d7e8:	10641800 	addk	r3, r4, r3
2001d7ec:	e4630000 	lhui	r3, r3, 0
2001d7f0:	f4730020 	shi	r3, r19, 32
		mbwidth = w;
2001d7f4:	e4730020 	lhui	r3, r19, 32
2001d7f8:	90830060 	sext8	r4, r3
2001d7fc:	b0000000 	imm	0
2001d800:	e8740354 	lwi	r3, r20, 852
2001d804:	f0830000 	sbi	r4, r3, 0
		ptr = 8;
2001d808:	b0000000 	imm	0
2001d80c:	e8740358 	lwi	r3, r20, 856
2001d810:	30800008 	addik	r4, r0, 8	// 8 <_vector_sw_exception>
2001d814:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
2001d818:	b0000000 	imm	0
2001d81c:	e8740328 	lwi	r3, r20, 808
2001d820:	e8630000 	lwi	r3, r3, 0
2001d824:	30830001 	addik	r4, r3, 1
2001d828:	b0000000 	imm	0
2001d82c:	e8740328 	lwi	r3, r20, 808
2001d830:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
2001d834:	b0000000 	imm	0
2001d838:	e87403b4 	lwi	r3, r20, 948
2001d83c:	99fc1800 	brald	r15, r3
2001d840:	80000000 	or	r0, r0, r0
	}
2001d844:	e9e10000 	lwi	r15, r1, 0
2001d848:	10330000 	addk	r1, r19, r0
2001d84c:	ea610024 	lwi	r19, r1, 36
2001d850:	ea810028 	lwi	r20, r1, 40
2001d854:	3021002c 	addik	r1, r1, 44
2001d858:	b60f0008 	rtsd	r15, 8
2001d85c:	80000000 	or	r0, r0, r0

2001d860 <isSchedulable_geth>:
	static i32 isSchedulable_geth() {
2001d860:	3021fff0 	addik	r1, r1, -16
2001d864:	fa610008 	swi	r19, r1, 8
2001d868:	fa81000c 	swi	r20, r1, 12
2001d86c:	12610000 	addk	r19, r1, r0
2001d870:	96808000 	mfs	r20, rpc
2001d874:	b000dffe 	imm	-8194
2001d878:	329440ec 	addik	r20, r20, 16620
		i32 result;
	
		result = 1;
2001d87c:	30600001 	addik	r3, r0, 1
2001d880:	f8730004 	swi	r3, r19, 4
		return result;
2001d884:	e8730004 	lwi	r3, r19, 4
	}
2001d888:	10330000 	addk	r1, r19, r0
2001d88c:	ea610008 	lwi	r19, r1, 8
2001d890:	ea81000c 	lwi	r20, r1, 12
2001d894:	30210010 	addik	r1, r1, 16
2001d898:	b60f0008 	rtsd	r15, 8
2001d89c:	80000000 	or	r0, r0, r0

2001d8a0 <geth>:
	
	static void geth() {
2001d8a0:	3021ffd4 	addik	r1, r1, -44
2001d8a4:	f9e10000 	swi	r15, r1, 0
2001d8a8:	fa610024 	swi	r19, r1, 36
2001d8ac:	fa810028 	swi	r20, r1, 40
2001d8b0:	12610000 	addk	r19, r1, r0
2001d8b4:	96808000 	mfs	r20, rpc
2001d8b8:	b000dffe 	imm	-8194
2001d8bc:	329440a8 	addik	r20, r20, 16552
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2001d8c0:	b0000000 	imm	0
2001d8c4:	e8740328 	lwi	r3, r20, 808
2001d8c8:	e8630000 	lwi	r3, r3, 0
2001d8cc:	a46301ff 	andi	r3, r3, 511
2001d8d0:	f873001c 	swi	r3, r19, 28
	
		i16 h;
	
		h = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001d8d4:	b0000000 	imm	0
2001d8d8:	e874031c 	lwi	r3, r20, 796
2001d8dc:	e8630000 	lwi	r3, r3, 0
2001d8e0:	e8830004 	lwi	r4, r3, 4
2001d8e4:	b0000000 	imm	0
2001d8e8:	e8740328 	lwi	r3, r20, 808
2001d8ec:	e8630000 	lwi	r3, r3, 0
2001d8f0:	a46301ff 	andi	r3, r3, 511
2001d8f4:	10631800 	addk	r3, r3, r3
2001d8f8:	10641800 	addk	r3, r4, r3
2001d8fc:	e4630000 	lhui	r3, r3, 0
2001d900:	f4730020 	shi	r3, r19, 32
	
		// Update ports indexes
		index_BTYPE += 1;
2001d904:	b0000000 	imm	0
2001d908:	e8740328 	lwi	r3, r20, 808
2001d90c:	e8630000 	lwi	r3, r3, 0
2001d910:	30830001 	addik	r4, r3, 1
2001d914:	b0000000 	imm	0
2001d918:	e8740328 	lwi	r3, r20, 808
2001d91c:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
2001d920:	b0000000 	imm	0
2001d924:	e87403b4 	lwi	r3, r20, 948
2001d928:	99fc1800 	brald	r15, r3
2001d92c:	80000000 	or	r0, r0, r0
	}
2001d930:	e9e10000 	lwi	r15, r1, 0
2001d934:	10330000 	addk	r1, r19, r0
2001d938:	ea610024 	lwi	r19, r1, 36
2001d93c:	ea810028 	lwi	r20, r1, 40
2001d940:	3021002c 	addik	r1, r1, 44
2001d944:	b60f0008 	rtsd	r15, 8
2001d948:	80000000 	or	r0, r0, r0

2001d94c <isSchedulable_read_noMotion>:
	static i32 isSchedulable_read_noMotion() {
2001d94c:	3021ffe0 	addik	r1, r1, -32
2001d950:	fa610018 	swi	r19, r1, 24
2001d954:	fa81001c 	swi	r20, r1, 28
2001d958:	12610000 	addk	r19, r1, r0
2001d95c:	96808000 	mfs	r20, rpc
2001d960:	b000dffe 	imm	-8194
2001d964:	32944000 	addik	r20, r20, 16384
		i16 cmd;
		i32 local_INTER;
		i32 local_MOTION;
		i32 local_NEWVOP;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001d968:	b0000000 	imm	0
2001d96c:	e874031c 	lwi	r3, r20, 796
2001d970:	e8630000 	lwi	r3, r3, 0
2001d974:	e8830004 	lwi	r4, r3, 4
2001d978:	b0000000 	imm	0
2001d97c:	e8740328 	lwi	r3, r20, 808
2001d980:	e8630000 	lwi	r3, r3, 0
2001d984:	a46301ff 	andi	r3, r3, 511
2001d988:	10631800 	addk	r3, r3, r3
2001d98c:	10641800 	addk	r3, r4, r3
2001d990:	e4630000 	lhui	r3, r3, 0
2001d994:	f4730004 	shi	r3, r19, 4
		local_INTER = ConstantsBtype_INTER;
2001d998:	30600200 	addik	r3, r0, 512
2001d99c:	f8730008 	swi	r3, r19, 8
		local_MOTION = ConstantsBtype_MOTION;
2001d9a0:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2001d9a4:	f873000c 	swi	r3, r19, 12
		local_NEWVOP = ConstantsBtype_NEWVOP;
2001d9a8:	30600800 	addik	r3, r0, 2048	// 800 <decoder_parser_mvrecon_A>
2001d9ac:	f8730010 	swi	r3, r19, 16
		result = ((cmd & local_INTER) == 0 || (cmd & local_MOTION) == 0) && (cmd & local_NEWVOP) == 0;
2001d9b0:	e4730004 	lhui	r3, r19, 4
2001d9b4:	90830061 	sext16	r4, r3
2001d9b8:	e8730008 	lwi	r3, r19, 8
2001d9bc:	84641800 	and	r3, r4, r3
2001d9c0:	bc030018 	beqi	r3, 24		// 2001d9d8
2001d9c4:	e4730004 	lhui	r3, r19, 4
2001d9c8:	90830061 	sext16	r4, r3
2001d9cc:	e873000c 	lwi	r3, r19, 12
2001d9d0:	84641800 	and	r3, r4, r3
2001d9d4:	bc230020 	bnei	r3, 32		// 2001d9f4
2001d9d8:	e4730004 	lhui	r3, r19, 4
2001d9dc:	90830061 	sext16	r4, r3
2001d9e0:	e8730010 	lwi	r3, r19, 16
2001d9e4:	84641800 	and	r3, r4, r3
2001d9e8:	bc23000c 	bnei	r3, 12		// 2001d9f4
2001d9ec:	30600001 	addik	r3, r0, 1
2001d9f0:	b8000008 	bri	8		// 2001d9f8
2001d9f4:	10600000 	addk	r3, r0, r0
2001d9f8:	f8730014 	swi	r3, r19, 20
		return result;
2001d9fc:	e8730014 	lwi	r3, r19, 20
	}
2001da00:	10330000 	addk	r1, r19, r0
2001da04:	ea610018 	lwi	r19, r1, 24
2001da08:	ea81001c 	lwi	r20, r1, 28
2001da0c:	30210020 	addik	r1, r1, 32
2001da10:	b60f0008 	rtsd	r15, 8
2001da14:	80000000 	or	r0, r0, r0

2001da18 <read_noMotion>:
	
	static void read_noMotion() {
2001da18:	3021ffcc 	addik	r1, r1, -52
2001da1c:	f9e10000 	swi	r15, r1, 0
2001da20:	fa61002c 	swi	r19, r1, 44
2001da24:	fa810030 	swi	r20, r1, 48
2001da28:	12610000 	addk	r19, r1, r0
2001da2c:	96808000 	mfs	r20, rpc
2001da30:	b000dffe 	imm	-8194
2001da34:	32943f30 	addik	r20, r20, 16176
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2001da38:	b0000000 	imm	0
2001da3c:	e8740328 	lwi	r3, r20, 808
2001da40:	e8630000 	lwi	r3, r3, 0
2001da44:	a46301ff 	andi	r3, r3, 511
2001da48:	f873001c 	swi	r3, r19, 28
		i16 local_ptr;
		i8 local_comp;
		i16 p;
		i8 local_Y_SELECT;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001da4c:	b0000000 	imm	0
2001da50:	e874031c 	lwi	r3, r20, 796
2001da54:	e8630000 	lwi	r3, r3, 0
2001da58:	e8830004 	lwi	r4, r3, 4
2001da5c:	b0000000 	imm	0
2001da60:	e8740328 	lwi	r3, r20, 808
2001da64:	e8630000 	lwi	r3, r3, 0
2001da68:	a46301ff 	andi	r3, r3, 511
2001da6c:	10631800 	addk	r3, r3, r3
2001da70:	10641800 	addk	r3, r4, r3
2001da74:	e4630000 	lhui	r3, r3, 0
2001da78:	f4730020 	shi	r3, r19, 32
		local_ptr = ptr;
2001da7c:	b0000000 	imm	0
2001da80:	e8740358 	lwi	r3, r20, 856
2001da84:	e4630000 	lhui	r3, r3, 0
2001da88:	f4730022 	shi	r3, r19, 34
		local_comp = comp;
2001da8c:	b0000000 	imm	0
2001da90:	e8740350 	lwi	r3, r20, 848
2001da94:	e0630000 	lbui	r3, r3, 0
2001da98:	f0730024 	sbi	r3, r19, 36
		p = local_ptr | local_comp;
2001da9c:	e0730024 	lbui	r3, r19, 36
2001daa0:	90630060 	sext8	r3, r3
2001daa4:	90830061 	sext16	r4, r3
2001daa8:	e4730022 	lhui	r3, r19, 34
2001daac:	80641800 	or	r3, r4, r3
2001dab0:	f4730026 	shi	r3, r19, 38
		local_comp = comp;
2001dab4:	b0000000 	imm	0
2001dab8:	e8740350 	lwi	r3, r20, 848
2001dabc:	e0630000 	lbui	r3, r3, 0
2001dac0:	f0730024 	sbi	r3, r19, 36
		if (local_comp < 4) {
2001dac4:	e0730024 	lbui	r3, r19, 36
2001dac8:	90830060 	sext8	r4, r3
2001dacc:	30600003 	addik	r3, r0, 3
2001dad0:	16441801 	cmp	r18, r4, r3
2001dad4:	bc520050 	blti	r18, 80		// 2001db24
			buf[p] = 0;
2001dad8:	e4730026 	lhui	r3, r19, 38
2001dadc:	90630061 	sext16	r3, r3
2001dae0:	b0000000 	imm	0
2001dae4:	e894035c 	lwi	r4, r20, 860
2001dae8:	10631800 	addk	r3, r3, r3
2001daec:	10641800 	addk	r3, r4, r3
2001daf0:	f4030000 	shi	r0, r3, 0
			local_Y_SELECT = Y_SELECT;
2001daf4:	30600004 	addik	r3, r0, 4
2001daf8:	f0730028 	sbi	r3, r19, 40
			buf[p | local_Y_SELECT] = 0;
2001dafc:	e4730026 	lhui	r3, r19, 38
2001db00:	90830061 	sext16	r4, r3
2001db04:	e0730028 	lbui	r3, r19, 40
2001db08:	90630060 	sext8	r3, r3
2001db0c:	80641800 	or	r3, r4, r3
2001db10:	b0000000 	imm	0
2001db14:	e894035c 	lwi	r4, r20, 860
2001db18:	10631800 	addk	r3, r3, r3
2001db1c:	10641800 	addk	r3, r4, r3
2001db20:	f4030000 	shi	r0, r3, 0
		}
	
		// Update ports indexes
		index_BTYPE += 1;
2001db24:	b0000000 	imm	0
2001db28:	e8740328 	lwi	r3, r20, 808
2001db2c:	e8630000 	lwi	r3, r3, 0
2001db30:	30830001 	addik	r4, r3, 1
2001db34:	b0000000 	imm	0
2001db38:	e8740328 	lwi	r3, r20, 808
2001db3c:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
2001db40:	b0000000 	imm	0
2001db44:	e87403b4 	lwi	r3, r20, 948
2001db48:	99fc1800 	brald	r15, r3
2001db4c:	80000000 	or	r0, r0, r0
	}
2001db50:	e9e10000 	lwi	r15, r1, 0
2001db54:	10330000 	addk	r1, r19, r0
2001db58:	ea61002c 	lwi	r19, r1, 44
2001db5c:	ea810030 	lwi	r20, r1, 48
2001db60:	30210034 	addik	r1, r1, 52
2001db64:	b60f0008 	rtsd	r15, 8
2001db68:	80000000 	or	r0, r0, r0

2001db6c <isSchedulable_read_motion>:
	static i32 isSchedulable_read_motion() {
2001db6c:	3021ffe0 	addik	r1, r1, -32
2001db70:	fa610018 	swi	r19, r1, 24
2001db74:	fa81001c 	swi	r20, r1, 28
2001db78:	12610000 	addk	r19, r1, r0
2001db7c:	96808000 	mfs	r20, rpc
2001db80:	b000dffe 	imm	-8194
2001db84:	32943de0 	addik	r20, r20, 15840
		i16 cmd;
		i32 local_INTER;
		i32 local_MOTION;
		i32 local_NEWVOP;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001db88:	b0000000 	imm	0
2001db8c:	e874031c 	lwi	r3, r20, 796
2001db90:	e8630000 	lwi	r3, r3, 0
2001db94:	e8830004 	lwi	r4, r3, 4
2001db98:	b0000000 	imm	0
2001db9c:	e8740328 	lwi	r3, r20, 808
2001dba0:	e8630000 	lwi	r3, r3, 0
2001dba4:	a46301ff 	andi	r3, r3, 511
2001dba8:	10631800 	addk	r3, r3, r3
2001dbac:	10641800 	addk	r3, r4, r3
2001dbb0:	e4630000 	lhui	r3, r3, 0
2001dbb4:	f4730004 	shi	r3, r19, 4
		local_INTER = ConstantsBtype_INTER;
2001dbb8:	30600200 	addik	r3, r0, 512
2001dbbc:	f8730008 	swi	r3, r19, 8
		local_MOTION = ConstantsBtype_MOTION;
2001dbc0:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2001dbc4:	f873000c 	swi	r3, r19, 12
		local_NEWVOP = ConstantsBtype_NEWVOP;
2001dbc8:	30600800 	addik	r3, r0, 2048	// 800 <decoder_parser_mvrecon_A>
2001dbcc:	f8730010 	swi	r3, r19, 16
		result = (cmd & local_INTER) != 0 && (cmd & local_MOTION) != 0 && (cmd & local_NEWVOP) == 0;
2001dbd0:	e4730004 	lhui	r3, r19, 4
2001dbd4:	90830061 	sext16	r4, r3
2001dbd8:	e8730008 	lwi	r3, r19, 8
2001dbdc:	84641800 	and	r3, r4, r3
2001dbe0:	bc030034 	beqi	r3, 52		// 2001dc14
2001dbe4:	e4730004 	lhui	r3, r19, 4
2001dbe8:	90830061 	sext16	r4, r3
2001dbec:	e873000c 	lwi	r3, r19, 12
2001dbf0:	84641800 	and	r3, r4, r3
2001dbf4:	bc030020 	beqi	r3, 32		// 2001dc14
2001dbf8:	e4730004 	lhui	r3, r19, 4
2001dbfc:	90830061 	sext16	r4, r3
2001dc00:	e8730010 	lwi	r3, r19, 16
2001dc04:	84641800 	and	r3, r4, r3
2001dc08:	bc23000c 	bnei	r3, 12		// 2001dc14
2001dc0c:	30600001 	addik	r3, r0, 1
2001dc10:	b8000008 	bri	8		// 2001dc18
2001dc14:	10600000 	addk	r3, r0, r0
2001dc18:	f8730014 	swi	r3, r19, 20
		return result;
2001dc1c:	e8730014 	lwi	r3, r19, 20
	}
2001dc20:	10330000 	addk	r1, r19, r0
2001dc24:	ea610018 	lwi	r19, r1, 24
2001dc28:	ea81001c 	lwi	r20, r1, 28
2001dc2c:	30210020 	addik	r1, r1, 32
2001dc30:	b60f0008 	rtsd	r15, 8
2001dc34:	80000000 	or	r0, r0, r0

2001dc38 <read_motion>:
	
	static void read_motion() {
2001dc38:	3021ffd0 	addik	r1, r1, -48
2001dc3c:	f9e10000 	swi	r15, r1, 0
2001dc40:	fa610028 	swi	r19, r1, 40
2001dc44:	fa81002c 	swi	r20, r1, 44
2001dc48:	12610000 	addk	r19, r1, r0
2001dc4c:	96808000 	mfs	r20, rpc
2001dc50:	b000dffe 	imm	-8194
2001dc54:	32943d10 	addik	r20, r20, 15632
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2001dc58:	b0000000 	imm	0
2001dc5c:	e8740328 	lwi	r3, r20, 808
2001dc60:	e8630000 	lwi	r3, r3, 0
2001dc64:	a46301ff 	andi	r3, r3, 511
2001dc68:	f873001c 	swi	r3, r19, 28
	
		i16 cmd;
		i8 local_comp;
		i32 local_FOURMV;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2001dc6c:	b0000000 	imm	0
2001dc70:	e874031c 	lwi	r3, r20, 796
2001dc74:	e8630000 	lwi	r3, r3, 0
2001dc78:	e8830004 	lwi	r4, r3, 4
2001dc7c:	b0000000 	imm	0
2001dc80:	e8740328 	lwi	r3, r20, 808
2001dc84:	e8630000 	lwi	r3, r3, 0
2001dc88:	a46301ff 	andi	r3, r3, 511
2001dc8c:	10631800 	addk	r3, r3, r3
2001dc90:	10641800 	addk	r3, r4, r3
2001dc94:	e4630000 	lhui	r3, r3, 0
2001dc98:	f4730020 	shi	r3, r19, 32
		local_comp = comp;
2001dc9c:	b0000000 	imm	0
2001dca0:	e8740350 	lwi	r3, r20, 848
2001dca4:	e0630000 	lbui	r3, r3, 0
2001dca8:	f0730022 	sbi	r3, r19, 34
		if (local_comp == 0) {
2001dcac:	e0730022 	lbui	r3, r19, 34
2001dcb0:	90630060 	sext8	r3, r3
2001dcb4:	bc230050 	bnei	r3, 80		// 2001dd04
			local_FOURMV = Constants_FOURMV;
2001dcb8:	30600004 	addik	r3, r0, 4
2001dcbc:	f8730024 	swi	r3, r19, 36
			fourmv = (cmd & local_FOURMV) != 0;
2001dcc0:	e4730020 	lhui	r3, r19, 32
2001dcc4:	90830061 	sext16	r4, r3
2001dcc8:	e8730024 	lwi	r3, r19, 36
2001dccc:	84841800 	and	r4, r4, r3
2001dcd0:	10600000 	addk	r3, r0, r0
2001dcd4:	8c641c00 	pcmpne	r3, r4, r3
2001dcd8:	a46300ff 	andi	r3, r3, 255
2001dcdc:	10830000 	addk	r4, r3, r0
2001dce0:	b0000000 	imm	0
2001dce4:	e8740370 	lwi	r3, r20, 880
2001dce8:	f8830000 	swi	r4, r3, 0
			sum_x = 0;
2001dcec:	b0000000 	imm	0
2001dcf0:	e8740398 	lwi	r3, r20, 920
2001dcf4:	f4030000 	shi	r0, r3, 0
			sum_y = 0;
2001dcf8:	b0000000 	imm	0
2001dcfc:	e874039c 	lwi	r3, r20, 924
2001dd00:	f4030000 	shi	r0, r3, 0
		}
	
		// Update ports indexes
		index_BTYPE += 1;
2001dd04:	b0000000 	imm	0
2001dd08:	e8740328 	lwi	r3, r20, 808
2001dd0c:	e8630000 	lwi	r3, r3, 0
2001dd10:	30830001 	addik	r4, r3, 1
2001dd14:	b0000000 	imm	0
2001dd18:	e8740328 	lwi	r3, r20, 808
2001dd1c:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
2001dd20:	b0000000 	imm	0
2001dd24:	e87403b4 	lwi	r3, r20, 948
2001dd28:	99fc1800 	brald	r15, r3
2001dd2c:	80000000 	or	r0, r0, r0
	}
2001dd30:	e9e10000 	lwi	r15, r1, 0
2001dd34:	10330000 	addk	r1, r19, r0
2001dd38:	ea610028 	lwi	r19, r1, 40
2001dd3c:	ea81002c 	lwi	r20, r1, 44
2001dd40:	30210030 	addik	r1, r1, 48
2001dd44:	b60f0008 	rtsd	r15, 8
2001dd48:	80000000 	or	r0, r0, r0

2001dd4c <isSchedulable_compute_done>:
	static i32 isSchedulable_compute_done() {
2001dd4c:	3021ffe8 	addik	r1, r1, -24
2001dd50:	fa610010 	swi	r19, r1, 16
2001dd54:	fa810014 	swi	r20, r1, 20
2001dd58:	12610000 	addk	r19, r1, r0
2001dd5c:	96808000 	mfs	r20, rpc
2001dd60:	b000dffe 	imm	-8194
2001dd64:	32943c00 	addik	r20, r20, 15360
		i32 result;
		i8 local_comp;
		i32 local_fourmv;
	
		local_comp = comp;
2001dd68:	b0000000 	imm	0
2001dd6c:	e8740350 	lwi	r3, r20, 848
2001dd70:	e0630000 	lbui	r3, r3, 0
2001dd74:	f0730004 	sbi	r3, r19, 4
		local_comp = comp;
2001dd78:	b0000000 	imm	0
2001dd7c:	e8740350 	lwi	r3, r20, 848
2001dd80:	e0630000 	lbui	r3, r3, 0
2001dd84:	f0730004 	sbi	r3, r19, 4
		local_fourmv = fourmv;
2001dd88:	b0000000 	imm	0
2001dd8c:	e8740370 	lwi	r3, r20, 880
2001dd90:	e8630000 	lwi	r3, r3, 0
2001dd94:	f8730008 	swi	r3, r19, 8
		result = local_comp > 3 || local_comp != 0 && !local_fourmv;
2001dd98:	e0730004 	lbui	r3, r19, 4
2001dd9c:	90830060 	sext8	r4, r3
2001dda0:	30600003 	addik	r3, r0, 3
2001dda4:	16441801 	cmp	r18, r4, r3
2001dda8:	bc520018 	blti	r18, 24		// 2001ddc0
2001ddac:	e0730004 	lbui	r3, r19, 4
2001ddb0:	90630060 	sext8	r3, r3
2001ddb4:	bc030014 	beqi	r3, 20		// 2001ddc8
2001ddb8:	e8730008 	lwi	r3, r19, 8
2001ddbc:	bc23000c 	bnei	r3, 12		// 2001ddc8
2001ddc0:	30600001 	addik	r3, r0, 1
2001ddc4:	b8000008 	bri	8		// 2001ddcc
2001ddc8:	10600000 	addk	r3, r0, r0
2001ddcc:	f873000c 	swi	r3, r19, 12
		return result;
2001ddd0:	e873000c 	lwi	r3, r19, 12
	}
2001ddd4:	10330000 	addk	r1, r19, r0
2001ddd8:	ea610010 	lwi	r19, r1, 16
2001dddc:	ea810014 	lwi	r20, r1, 20
2001dde0:	30210018 	addik	r1, r1, 24
2001dde4:	b60f0008 	rtsd	r15, 8
2001dde8:	80000000 	or	r0, r0, r0

2001ddec <compute_done>:
	
	static void compute_done() {
2001ddec:	3021fff4 	addik	r1, r1, -12
2001ddf0:	fa610004 	swi	r19, r1, 4
2001ddf4:	fa810008 	swi	r20, r1, 8
2001ddf8:	12610000 	addk	r19, r1, r0
2001ddfc:	96808000 	mfs	r20, rpc
2001de00:	b000dffe 	imm	-8194
2001de04:	32943b60 	addik	r20, r20, 15200
	
	
	
		// Update ports indexes
		
	}
2001de08:	10330000 	addk	r1, r19, r0
2001de0c:	ea610004 	lwi	r19, r1, 4
2001de10:	ea810008 	lwi	r20, r1, 8
2001de14:	3021000c 	addik	r1, r1, 12
2001de18:	b60f0008 	rtsd	r15, 8
2001de1c:	80000000 	or	r0, r0, r0

2001de20 <isSchedulable_compute_start>:
	static i32 isSchedulable_compute_start() {
2001de20:	3021fff0 	addik	r1, r1, -16
2001de24:	fa610008 	swi	r19, r1, 8
2001de28:	fa81000c 	swi	r20, r1, 12
2001de2c:	12610000 	addk	r19, r1, r0
2001de30:	96808000 	mfs	r20, rpc
2001de34:	b000dffe 	imm	-8194
2001de38:	32943b2c 	addik	r20, r20, 15148
		i32 result;
	
		result = 1;
2001de3c:	30600001 	addik	r3, r0, 1
2001de40:	f8730004 	swi	r3, r19, 4
		return result;
2001de44:	e8730004 	lwi	r3, r19, 4
	}
2001de48:	10330000 	addk	r1, r19, r0
2001de4c:	ea610008 	lwi	r19, r1, 8
2001de50:	ea81000c 	lwi	r20, r1, 12
2001de54:	30210010 	addik	r1, r1, 16
2001de58:	b60f0008 	rtsd	r15, 8
2001de5c:	80000000 	or	r0, r0, r0

2001de60 <compute_start>:
	
	static void compute_start() {
2001de60:	3021ffd0 	addik	r1, r1, -48
2001de64:	f9e10000 	swi	r15, r1, 0
2001de68:	fa610028 	swi	r19, r1, 40
2001de6c:	fa81002c 	swi	r20, r1, 44
2001de70:	12610000 	addk	r19, r1, r0
2001de74:	96808000 	mfs	r20, rpc
2001de78:	b000dffe 	imm	-8194
2001de7c:	32943ae8 	addik	r20, r20, 15080
	
		// Compute aligned port indexes
		i32 index_aligned_A = index_A % SIZE_A;
2001de80:	b0000000 	imm	0
2001de84:	e8740338 	lwi	r3, r20, 824
2001de88:	e8630000 	lwi	r3, r3, 0
2001de8c:	a46301ff 	andi	r3, r3, 511
2001de90:	f873001c 	swi	r3, r19, 28
	
		i16 a;
		i16 local_bptr;
		i16 local_cptr;
	
		a = tokens_A[(index_A + (0)) % SIZE_A];
2001de94:	b0000000 	imm	0
2001de98:	e8740320 	lwi	r3, r20, 800
2001de9c:	e8630000 	lwi	r3, r3, 0
2001dea0:	e8830004 	lwi	r4, r3, 4
2001dea4:	b0000000 	imm	0
2001dea8:	e8740338 	lwi	r3, r20, 824
2001deac:	e8630000 	lwi	r3, r3, 0
2001deb0:	a46301ff 	andi	r3, r3, 511
2001deb4:	10631800 	addk	r3, r3, r3
2001deb8:	10641800 	addk	r3, r4, r3
2001debc:	e4630000 	lhui	r3, r3, 0
2001dec0:	f4730020 	shi	r3, r19, 32
		local_bptr = bptr;
2001dec4:	b0000000 	imm	0
2001dec8:	e8740378 	lwi	r3, r20, 888
2001decc:	e4630000 	lhui	r3, r3, 0
2001ded0:	f4730022 	shi	r3, r19, 34
		aptr = local_bptr;
2001ded4:	b0000000 	imm	0
2001ded8:	e8740374 	lwi	r3, r20, 884
2001dedc:	e4930022 	lhui	r4, r19, 34
2001dee0:	f4830000 	shi	r4, r3, 0
		local_cptr = cptr;
2001dee4:	b0000000 	imm	0
2001dee8:	e874037c 	lwi	r3, r20, 892
2001deec:	e4630000 	lhui	r3, r3, 0
2001def0:	f4730024 	shi	r3, r19, 36
		bptr = local_cptr;
2001def4:	b0000000 	imm	0
2001def8:	e8740378 	lwi	r3, r20, 888
2001defc:	e4930024 	lhui	r4, r19, 36
2001df00:	f4830000 	shi	r4, r3, 0
		cptr = a;
2001df04:	b0000000 	imm	0
2001df08:	e874037c 	lwi	r3, r20, 892
2001df0c:	e4930020 	lhui	r4, r19, 32
2001df10:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_A += 1;
2001df14:	b0000000 	imm	0
2001df18:	e8740338 	lwi	r3, r20, 824
2001df1c:	e8630000 	lwi	r3, r3, 0
2001df20:	30830001 	addik	r4, r3, 1
2001df24:	b0000000 	imm	0
2001df28:	e8740338 	lwi	r3, r20, 824
2001df2c:	f8830000 	swi	r4, r3, 0
		
		read_end_A();
2001df30:	b0000000 	imm	0
2001df34:	e87403c4 	lwi	r3, r20, 964
2001df38:	99fc1800 	brald	r15, r3
2001df3c:	80000000 	or	r0, r0, r0
	}
2001df40:	e9e10000 	lwi	r15, r1, 0
2001df44:	10330000 	addk	r1, r19, r0
2001df48:	ea610028 	lwi	r19, r1, 40
2001df4c:	ea81002c 	lwi	r20, r1, 44
2001df50:	30210030 	addik	r1, r1, 48
2001df54:	b60f0008 	rtsd	r15, 8
2001df58:	80000000 	or	r0, r0, r0

2001df5c <isSchedulable_get_pred>:
	static i32 isSchedulable_get_pred() {
2001df5c:	3021fff0 	addik	r1, r1, -16
2001df60:	fa610008 	swi	r19, r1, 8
2001df64:	fa81000c 	swi	r20, r1, 12
2001df68:	12610000 	addk	r19, r1, r0
2001df6c:	96808000 	mfs	r20, rpc
2001df70:	b000dffe 	imm	-8194
2001df74:	329439f0 	addik	r20, r20, 14832
		i32 result;
	
		result = 1;
2001df78:	30600001 	addik	r3, r0, 1
2001df7c:	f8730004 	swi	r3, r19, 4
		return result;
2001df80:	e8730004 	lwi	r3, r19, 4
	}
2001df84:	10330000 	addk	r1, r19, r0
2001df88:	ea610008 	lwi	r19, r1, 8
2001df8c:	ea81000c 	lwi	r20, r1, 12
2001df90:	30210010 	addik	r1, r1, 16
2001df94:	b60f0008 	rtsd	r15, 8
2001df98:	80000000 	or	r0, r0, r0

2001df9c <get_pred>:
	
	static void get_pred() {
2001df9c:	3021ffe4 	addik	r1, r1, -28
2001dfa0:	fa610014 	swi	r19, r1, 20
2001dfa4:	fa810018 	swi	r20, r1, 24
2001dfa8:	12610000 	addk	r19, r1, r0
2001dfac:	96808000 	mfs	r20, rpc
2001dfb0:	b000dffe 	imm	-8194
2001dfb4:	329439b0 	addik	r20, r20, 14768
		i16 tmp_buf;
		i16 local_bptr;
		i16 local_cptr;
		i8 local_Y_SELECT;
	
		local_aptr = aptr;
2001dfb8:	b0000000 	imm	0
2001dfbc:	e8740374 	lwi	r3, r20, 884
2001dfc0:	e4630000 	lhui	r3, r3, 0
2001dfc4:	f4730004 	shi	r3, r19, 4
		t = local_aptr;
2001dfc8:	e4730004 	lhui	r3, r19, 4
2001dfcc:	f4730006 	shi	r3, r19, 6
		local_bpred = bpred;
2001dfd0:	b0000000 	imm	0
2001dfd4:	e8740384 	lwi	r3, r20, 900
2001dfd8:	e4630000 	lhui	r3, r3, 0
2001dfdc:	f4730008 	shi	r3, r19, 8
		apred = local_bpred;
2001dfe0:	b0000000 	imm	0
2001dfe4:	e8740380 	lwi	r3, r20, 896
2001dfe8:	e4930008 	lhui	r4, r19, 8
2001dfec:	f4830000 	shi	r4, r3, 0
		local_cpred = cpred;
2001dff0:	b0000000 	imm	0
2001dff4:	e8740388 	lwi	r3, r20, 904
2001dff8:	e4630000 	lhui	r3, r3, 0
2001dffc:	f473000a 	shi	r3, r19, 10
		bpred = local_cpred;
2001e000:	b0000000 	imm	0
2001e004:	e8740384 	lwi	r3, r20, 900
2001e008:	e493000a 	lhui	r4, r19, 10
2001e00c:	f4830000 	shi	r4, r3, 0
		tmp_buf = buf[t];
2001e010:	e4730006 	lhui	r3, r19, 6
2001e014:	90630061 	sext16	r3, r3
2001e018:	b0000000 	imm	0
2001e01c:	e894035c 	lwi	r4, r20, 860
2001e020:	10631800 	addk	r3, r3, r3
2001e024:	10641800 	addk	r3, r4, r3
2001e028:	e4630000 	lhui	r3, r3, 0
2001e02c:	f473000c 	shi	r3, r19, 12
		cpred = tmp_buf;
2001e030:	b0000000 	imm	0
2001e034:	e8740388 	lwi	r3, r20, 904
2001e038:	e493000c 	lhui	r4, r19, 12
2001e03c:	f4830000 	shi	r4, r3, 0
		local_bptr = bptr;
2001e040:	b0000000 	imm	0
2001e044:	e8740378 	lwi	r3, r20, 888
2001e048:	e4630000 	lhui	r3, r3, 0
2001e04c:	f473000e 	shi	r3, r19, 14
		aptr = local_bptr;
2001e050:	b0000000 	imm	0
2001e054:	e8740374 	lwi	r3, r20, 884
2001e058:	e493000e 	lhui	r4, r19, 14
2001e05c:	f4830000 	shi	r4, r3, 0
		local_cptr = cptr;
2001e060:	b0000000 	imm	0
2001e064:	e874037c 	lwi	r3, r20, 892
2001e068:	e4630000 	lhui	r3, r3, 0
2001e06c:	f4730010 	shi	r3, r19, 16
		bptr = local_cptr;
2001e070:	b0000000 	imm	0
2001e074:	e8740378 	lwi	r3, r20, 888
2001e078:	e4930010 	lhui	r4, r19, 16
2001e07c:	f4830000 	shi	r4, r3, 0
		local_Y_SELECT = Y_SELECT;
2001e080:	30600004 	addik	r3, r0, 4
2001e084:	f0730012 	sbi	r3, r19, 18
		cptr = t | local_Y_SELECT;
2001e088:	e0730012 	lbui	r3, r19, 18
2001e08c:	90630060 	sext8	r3, r3
2001e090:	90830061 	sext16	r4, r3
2001e094:	e4730006 	lhui	r3, r19, 6
2001e098:	80641800 	or	r3, r4, r3
2001e09c:	90830061 	sext16	r4, r3
2001e0a0:	b0000000 	imm	0
2001e0a4:	e874037c 	lwi	r3, r20, 892
2001e0a8:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		
	}
2001e0ac:	10330000 	addk	r1, r19, r0
2001e0b0:	ea610014 	lwi	r19, r1, 20
2001e0b4:	ea810018 	lwi	r20, r1, 24
2001e0b8:	3021001c 	addik	r1, r1, 28
2001e0bc:	b60f0008 	rtsd	r15, 8
2001e0c0:	80000000 	or	r0, r0, r0

2001e0c4 <isSchedulable_do_pred>:
	static i32 isSchedulable_do_pred() {
2001e0c4:	3021fff0 	addik	r1, r1, -16
2001e0c8:	fa610008 	swi	r19, r1, 8
2001e0cc:	fa81000c 	swi	r20, r1, 12
2001e0d0:	12610000 	addk	r19, r1, r0
2001e0d4:	96808000 	mfs	r20, rpc
2001e0d8:	b000dffe 	imm	-8194
2001e0dc:	32943888 	addik	r20, r20, 14472
		i32 result;
	
		result = 1;
2001e0e0:	30600001 	addik	r3, r0, 1
2001e0e4:	f8730004 	swi	r3, r19, 4
		return result;
2001e0e8:	e8730004 	lwi	r3, r19, 4
	}
2001e0ec:	10330000 	addk	r1, r19, r0
2001e0f0:	ea610008 	lwi	r19, r1, 8
2001e0f4:	ea81000c 	lwi	r20, r1, 12
2001e0f8:	30210010 	addik	r1, r1, 16
2001e0fc:	b60f0008 	rtsd	r15, 8
2001e100:	80000000 	or	r0, r0, r0

2001e104 <do_pred>:
	
	static void do_pred() {
2001e104:	3021ffc8 	addik	r1, r1, -56
2001e108:	f9e10000 	swi	r15, r1, 0
2001e10c:	fa610030 	swi	r19, r1, 48
2001e110:	fa810034 	swi	r20, r1, 52
2001e114:	12610000 	addk	r19, r1, r0
2001e118:	96808000 	mfs	r20, rpc
2001e11c:	b000dffe 	imm	-8194
2001e120:	32943844 	addik	r20, r20, 14404
		i16 local_apred;
		i16 local_bpred;
		i16 local_cpred;
		i32 tmp_middle;
	
		local_comp = comp;
2001e124:	b0000000 	imm	0
2001e128:	e8740350 	lwi	r3, r20, 848
2001e12c:	e0630000 	lbui	r3, r3, 0
2001e130:	f073001c 	sbi	r3, r19, 28
		local_top_edge = top_edge;
2001e134:	b0000000 	imm	0
2001e138:	e874034c 	lwi	r3, r20, 844
2001e13c:	e8630000 	lwi	r3, r3, 0
2001e140:	f8730020 	swi	r3, r19, 32
		if (local_comp >= 2 || !local_top_edge) {
2001e144:	e073001c 	lbui	r3, r19, 28
2001e148:	90830060 	sext8	r4, r3
2001e14c:	30600001 	addik	r3, r0, 1
2001e150:	16441801 	cmp	r18, r4, r3
2001e154:	bc52000c 	blti	r18, 12		// 2001e160
2001e158:	e8730020 	lwi	r3, r19, 32
2001e15c:	bc23007c 	bnei	r3, 124		// 2001e1d8
			local_apred = apred;
2001e160:	b0000000 	imm	0
2001e164:	e8740380 	lwi	r3, r20, 896
2001e168:	e4630000 	lhui	r3, r3, 0
2001e16c:	f4730024 	shi	r3, r19, 36
			local_bpred = bpred;
2001e170:	b0000000 	imm	0
2001e174:	e8740384 	lwi	r3, r20, 900
2001e178:	e4630000 	lhui	r3, r3, 0
2001e17c:	f4730026 	shi	r3, r19, 38
			local_cpred = cpred;
2001e180:	b0000000 	imm	0
2001e184:	e8740388 	lwi	r3, r20, 904
2001e188:	e4630000 	lhui	r3, r3, 0
2001e18c:	f4730028 	shi	r3, r19, 40
			tmp_middle = middle(local_apred, local_bpred, local_cpred);
2001e190:	e4730024 	lhui	r3, r19, 36
2001e194:	90a30061 	sext16	r5, r3
2001e198:	e4730026 	lhui	r3, r19, 38
2001e19c:	90830061 	sext16	r4, r3
2001e1a0:	e4730028 	lhui	r3, r19, 40
2001e1a4:	90630061 	sext16	r3, r3
2001e1a8:	10c40000 	addk	r6, r4, r0
2001e1ac:	10e30000 	addk	r7, r3, r0
2001e1b0:	b0000000 	imm	0
2001e1b4:	e89403d0 	lwi	r4, r20, 976
2001e1b8:	99fc2000 	brald	r15, r4
2001e1bc:	80000000 	or	r0, r0, r0
2001e1c0:	f873002c 	swi	r3, r19, 44
			apred = tmp_middle;
2001e1c4:	e873002c 	lwi	r3, r19, 44
2001e1c8:	90830061 	sext16	r4, r3
2001e1cc:	b0000000 	imm	0
2001e1d0:	e8740380 	lwi	r3, r20, 896
2001e1d4:	f4830000 	shi	r4, r3, 0
		}
	
		// Update ports indexes
		
	}
2001e1d8:	e9e10000 	lwi	r15, r1, 0
2001e1dc:	10330000 	addk	r1, r19, r0
2001e1e0:	ea610030 	lwi	r19, r1, 48
2001e1e4:	ea810034 	lwi	r20, r1, 52
2001e1e8:	30210038 	addik	r1, r1, 56
2001e1ec:	b60f0008 	rtsd	r15, 8
2001e1f0:	80000000 	or	r0, r0, r0

2001e1f4 <isSchedulable_get_mag>:
	static i32 isSchedulable_get_mag() {
2001e1f4:	3021fff0 	addik	r1, r1, -16
2001e1f8:	fa610008 	swi	r19, r1, 8
2001e1fc:	fa81000c 	swi	r20, r1, 12
2001e200:	12610000 	addk	r19, r1, r0
2001e204:	96808000 	mfs	r20, rpc
2001e208:	b000dffe 	imm	-8194
2001e20c:	32943758 	addik	r20, r20, 14168
		i32 result;
	
		result = 1;
2001e210:	30600001 	addik	r3, r0, 1
2001e214:	f8730004 	swi	r3, r19, 4
		return result;
2001e218:	e8730004 	lwi	r3, r19, 4
	}
2001e21c:	10330000 	addk	r1, r19, r0
2001e220:	ea610008 	lwi	r19, r1, 8
2001e224:	ea81000c 	lwi	r20, r1, 12
2001e228:	30210010 	addik	r1, r1, 16
2001e22c:	b60f0008 	rtsd	r15, 8
2001e230:	80000000 	or	r0, r0, r0

2001e234 <get_mag>:
	
	static void get_mag() {
2001e234:	3021ffd4 	addik	r1, r1, -44
2001e238:	f9e10000 	swi	r15, r1, 0
2001e23c:	fa610024 	swi	r19, r1, 36
2001e240:	fa810028 	swi	r20, r1, 40
2001e244:	12610000 	addk	r19, r1, r0
2001e248:	96808000 	mfs	r20, rpc
2001e24c:	b000dffe 	imm	-8194
2001e250:	32943714 	addik	r20, r20, 14100
	
		// Compute aligned port indexes
		i32 index_aligned_MVIN = index_MVIN % SIZE_MVIN;
2001e254:	b0000000 	imm	0
2001e258:	e8740330 	lwi	r3, r20, 816
2001e25c:	e8630000 	lwi	r3, r3, 0
2001e260:	a46301ff 	andi	r3, r3, 511
2001e264:	f873001c 	swi	r3, r19, 28
	
		i16 m;
	
		m = tokens_MVIN[(index_MVIN + (0)) % SIZE_MVIN];
2001e268:	b0000000 	imm	0
2001e26c:	e8740318 	lwi	r3, r20, 792
2001e270:	e8630000 	lwi	r3, r3, 0
2001e274:	e8830004 	lwi	r4, r3, 4
2001e278:	b0000000 	imm	0
2001e27c:	e8740330 	lwi	r3, r20, 816
2001e280:	e8630000 	lwi	r3, r3, 0
2001e284:	a46301ff 	andi	r3, r3, 511
2001e288:	10631800 	addk	r3, r3, r3
2001e28c:	10641800 	addk	r3, r4, r3
2001e290:	e4630000 	lhui	r3, r3, 0
2001e294:	f4730020 	shi	r3, r19, 32
		mag = m;
2001e298:	b0000000 	imm	0
2001e29c:	e874038c 	lwi	r3, r20, 908
2001e2a0:	e4930020 	lhui	r4, r19, 32
2001e2a4:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_MVIN += 1;
2001e2a8:	b0000000 	imm	0
2001e2ac:	e8740330 	lwi	r3, r20, 816
2001e2b0:	e8630000 	lwi	r3, r3, 0
2001e2b4:	30830001 	addik	r4, r3, 1
2001e2b8:	b0000000 	imm	0
2001e2bc:	e8740330 	lwi	r3, r20, 816
2001e2c0:	f8830000 	swi	r4, r3, 0
		
		read_end_MVIN();
2001e2c4:	b0000000 	imm	0
2001e2c8:	e87403bc 	lwi	r3, r20, 956
2001e2cc:	99fc1800 	brald	r15, r3
2001e2d0:	80000000 	or	r0, r0, r0
	}
2001e2d4:	e9e10000 	lwi	r15, r1, 0
2001e2d8:	10330000 	addk	r1, r19, r0
2001e2dc:	ea610024 	lwi	r19, r1, 36
2001e2e0:	ea810028 	lwi	r20, r1, 40
2001e2e4:	3021002c 	addik	r1, r1, 44
2001e2e8:	b60f0008 	rtsd	r15, 8
2001e2ec:	80000000 	or	r0, r0, r0

2001e2f0 <isSchedulable_get_residual_init>:
	static i32 isSchedulable_get_residual_init() {
2001e2f0:	3021fff0 	addik	r1, r1, -16
2001e2f4:	fa610008 	swi	r19, r1, 8
2001e2f8:	fa81000c 	swi	r20, r1, 12
2001e2fc:	12610000 	addk	r19, r1, r0
2001e300:	96808000 	mfs	r20, rpc
2001e304:	b000dffe 	imm	-8194
2001e308:	3294365c 	addik	r20, r20, 13916
		i32 result;
	
		result = 1;
2001e30c:	30600001 	addik	r3, r0, 1
2001e310:	f8730004 	swi	r3, r19, 4
		return result;
2001e314:	e8730004 	lwi	r3, r19, 4
	}
2001e318:	10330000 	addk	r1, r19, r0
2001e31c:	ea610008 	lwi	r19, r1, 8
2001e320:	ea81000c 	lwi	r20, r1, 12
2001e324:	30210010 	addik	r1, r1, 16
2001e328:	b60f0008 	rtsd	r15, 8
2001e32c:	80000000 	or	r0, r0, r0

2001e330 <get_residual_init>:
	
	static void get_residual_init() {
2001e330:	3021fff0 	addik	r1, r1, -16
2001e334:	fa610008 	swi	r19, r1, 8
2001e338:	fa81000c 	swi	r20, r1, 12
2001e33c:	12610000 	addk	r19, r1, r0
2001e340:	96808000 	mfs	r20, rpc
2001e344:	b000dffe 	imm	-8194
2001e348:	3294361c 	addik	r20, r20, 13852
	
		// Compute aligned port indexes
	
		i16 local_mag;
	
		local_mag = mag;
2001e34c:	b0000000 	imm	0
2001e350:	e874038c 	lwi	r3, r20, 908
2001e354:	e4630000 	lhui	r3, r3, 0
2001e358:	f4730004 	shi	r3, r19, 4
		if (local_mag < 0) {
2001e35c:	e4730004 	lhui	r3, r19, 4
2001e360:	90630061 	sext16	r3, r3
2001e364:	bca30030 	bgei	r3, 48		// 2001e394
			local_mag = mag;
2001e368:	b0000000 	imm	0
2001e36c:	e874038c 	lwi	r3, r20, 908
2001e370:	e4630000 	lhui	r3, r3, 0
2001e374:	f4730004 	shi	r3, r19, 4
			res_shift = ~local_mag;
2001e378:	e4730004 	lhui	r3, r19, 4
2001e37c:	a863ffff 	xori	r3, r3, -1
2001e380:	90830061 	sext16	r4, r3
2001e384:	b0000000 	imm	0
2001e388:	e87403a4 	lwi	r3, r20, 932
2001e38c:	f4830000 	shi	r4, r3, 0
2001e390:	b8000034 	bri	52		// 2001e3c4
		} else {
			local_mag = mag;
2001e394:	b0000000 	imm	0
2001e398:	e874038c 	lwi	r3, r20, 908
2001e39c:	e4630000 	lhui	r3, r3, 0
2001e3a0:	f4730004 	shi	r3, r19, 4
			res_shift = local_mag - 1;
2001e3a4:	e4730004 	lhui	r3, r19, 4
2001e3a8:	3063ffff 	addik	r3, r3, -1
2001e3ac:	b0000000 	imm	0
2001e3b0:	a463ffff 	andi	r3, r3, -1
2001e3b4:	90830061 	sext16	r4, r3
2001e3b8:	b0000000 	imm	0
2001e3bc:	e87403a4 	lwi	r3, r20, 932
2001e3c0:	f4830000 	shi	r4, r3, 0
		}
	
		// Update ports indexes
		
	}
2001e3c4:	10330000 	addk	r1, r19, r0
2001e3c8:	ea610008 	lwi	r19, r1, 8
2001e3cc:	ea81000c 	lwi	r20, r1, 12
2001e3d0:	30210010 	addik	r1, r1, 16
2001e3d4:	b60f0008 	rtsd	r15, 8
2001e3d8:	80000000 	or	r0, r0, r0

2001e3dc <isSchedulable_get_residual_shift>:
	static i32 isSchedulable_get_residual_shift() {
2001e3dc:	3021fff0 	addik	r1, r1, -16
2001e3e0:	fa610008 	swi	r19, r1, 8
2001e3e4:	fa81000c 	swi	r20, r1, 12
2001e3e8:	12610000 	addk	r19, r1, r0
2001e3ec:	96808000 	mfs	r20, rpc
2001e3f0:	b000dffe 	imm	-8194
2001e3f4:	32943570 	addik	r20, r20, 13680
		i32 result;
	
		result = 1;
2001e3f8:	30600001 	addik	r3, r0, 1
2001e3fc:	f8730004 	swi	r3, r19, 4
		return result;
2001e400:	e8730004 	lwi	r3, r19, 4
	}
2001e404:	10330000 	addk	r1, r19, r0
2001e408:	ea610008 	lwi	r19, r1, 8
2001e40c:	ea81000c 	lwi	r20, r1, 12
2001e410:	30210010 	addik	r1, r1, 16
2001e414:	b60f0008 	rtsd	r15, 8
2001e418:	80000000 	or	r0, r0, r0

2001e41c <get_residual_shift>:
	
	static void get_residual_shift() {
2001e41c:	3021ffec 	addik	r1, r1, -20
2001e420:	fa61000c 	swi	r19, r1, 12
2001e424:	fa810010 	swi	r20, r1, 16
2001e428:	12610000 	addk	r19, r1, r0
2001e42c:	96808000 	mfs	r20, rpc
2001e430:	b000dffe 	imm	-8194
2001e434:	32943530 	addik	r20, r20, 13616
	
		i16 local_mv_rsize;
		i16 count;
		i16 local_res_shift;
	
		local_mv_rsize = mv_rsize;
2001e438:	b0000000 	imm	0
2001e43c:	e8740360 	lwi	r3, r20, 864
2001e440:	e4630000 	lhui	r3, r3, 0
2001e444:	f4730006 	shi	r3, r19, 6
		count = local_mv_rsize;
2001e448:	e4730006 	lhui	r3, r19, 6
2001e44c:	f4730004 	shi	r3, r19, 4
		while (count > 0) {
2001e450:	b8000044 	bri	68		// 2001e494
			local_res_shift = res_shift;
2001e454:	b0000000 	imm	0
2001e458:	e87403a4 	lwi	r3, r20, 932
2001e45c:	e4630000 	lhui	r3, r3, 0
2001e460:	f4730008 	shi	r3, r19, 8
			res_shift = local_res_shift << 1;
2001e464:	e4730008 	lhui	r3, r19, 8
2001e468:	90630061 	sext16	r3, r3
2001e46c:	10631800 	addk	r3, r3, r3
2001e470:	90830061 	sext16	r4, r3
2001e474:	b0000000 	imm	0
2001e478:	e87403a4 	lwi	r3, r20, 932
2001e47c:	f4830000 	shi	r4, r3, 0
			count = count - 1;
2001e480:	e4730004 	lhui	r3, r19, 4
2001e484:	3063ffff 	addik	r3, r3, -1
2001e488:	b0000000 	imm	0
2001e48c:	a463ffff 	andi	r3, r3, -1
2001e490:	f4730004 	shi	r3, r19, 4
		i16 count;
		i16 local_res_shift;
	
		local_mv_rsize = mv_rsize;
		count = local_mv_rsize;
		while (count > 0) {
2001e494:	e4730004 	lhui	r3, r19, 4
2001e498:	90630061 	sext16	r3, r3
2001e49c:	bc83ffb8 	bgti	r3, -72		// 2001e454
			count = count - 1;
		}
	
		// Update ports indexes
		
	}
2001e4a0:	10330000 	addk	r1, r19, r0
2001e4a4:	ea61000c 	lwi	r19, r1, 12
2001e4a8:	ea810010 	lwi	r20, r1, 16
2001e4ac:	30210014 	addik	r1, r1, 20
2001e4b0:	b60f0008 	rtsd	r15, 8
2001e4b4:	80000000 	or	r0, r0, r0

2001e4b8 <isSchedulable_get_residual_adjust>:
	static i32 isSchedulable_get_residual_adjust() {
2001e4b8:	3021fff0 	addik	r1, r1, -16
2001e4bc:	fa610008 	swi	r19, r1, 8
2001e4c0:	fa81000c 	swi	r20, r1, 12
2001e4c4:	12610000 	addk	r19, r1, r0
2001e4c8:	96808000 	mfs	r20, rpc
2001e4cc:	b000dffe 	imm	-8194
2001e4d0:	32943494 	addik	r20, r20, 13460
		i32 result;
	
		result = 1;
2001e4d4:	30600001 	addik	r3, r0, 1
2001e4d8:	f8730004 	swi	r3, r19, 4
		return result;
2001e4dc:	e8730004 	lwi	r3, r19, 4
	}
2001e4e0:	10330000 	addk	r1, r19, r0
2001e4e4:	ea610008 	lwi	r19, r1, 8
2001e4e8:	ea81000c 	lwi	r20, r1, 12
2001e4ec:	30210010 	addik	r1, r1, 16
2001e4f0:	b60f0008 	rtsd	r15, 8
2001e4f4:	80000000 	or	r0, r0, r0

2001e4f8 <get_residual_adjust>:
	
	static void get_residual_adjust() {
2001e4f8:	3021ffd4 	addik	r1, r1, -44
2001e4fc:	f9e10000 	swi	r15, r1, 0
2001e500:	fa610024 	swi	r19, r1, 36
2001e504:	fa810028 	swi	r20, r1, 40
2001e508:	12610000 	addk	r19, r1, r0
2001e50c:	96808000 	mfs	r20, rpc
2001e510:	b000dffe 	imm	-8194
2001e514:	32943450 	addik	r20, r20, 13392
	
		// Compute aligned port indexes
		i32 index_aligned_MVIN = index_MVIN % SIZE_MVIN;
2001e518:	b0000000 	imm	0
2001e51c:	e8740330 	lwi	r3, r20, 816
2001e520:	e8630000 	lwi	r3, r3, 0
2001e524:	a46301ff 	andi	r3, r3, 511
2001e528:	f873001c 	swi	r3, r19, 28
	
		i16 s;
		i16 local_res_shift;
	
		s = tokens_MVIN[(index_MVIN + (0)) % SIZE_MVIN];
2001e52c:	b0000000 	imm	0
2001e530:	e8740318 	lwi	r3, r20, 792
2001e534:	e8630000 	lwi	r3, r3, 0
2001e538:	e8830004 	lwi	r4, r3, 4
2001e53c:	b0000000 	imm	0
2001e540:	e8740330 	lwi	r3, r20, 816
2001e544:	e8630000 	lwi	r3, r3, 0
2001e548:	a46301ff 	andi	r3, r3, 511
2001e54c:	10631800 	addk	r3, r3, r3
2001e550:	10641800 	addk	r3, r4, r3
2001e554:	e4630000 	lhui	r3, r3, 0
2001e558:	f4730020 	shi	r3, r19, 32
		local_res_shift = res_shift;
2001e55c:	b0000000 	imm	0
2001e560:	e87403a4 	lwi	r3, r20, 932
2001e564:	e4630000 	lhui	r3, r3, 0
2001e568:	f4730022 	shi	r3, r19, 34
		res_shift = local_res_shift + s + 1;
2001e56c:	e4930022 	lhui	r4, r19, 34
2001e570:	e4730020 	lhui	r3, r19, 32
2001e574:	10641800 	addk	r3, r4, r3
2001e578:	b0000000 	imm	0
2001e57c:	a463ffff 	andi	r3, r3, -1
2001e580:	30630001 	addik	r3, r3, 1
2001e584:	b0000000 	imm	0
2001e588:	a463ffff 	andi	r3, r3, -1
2001e58c:	90830061 	sext16	r4, r3
2001e590:	b0000000 	imm	0
2001e594:	e87403a4 	lwi	r3, r20, 932
2001e598:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_MVIN += 1;
2001e59c:	b0000000 	imm	0
2001e5a0:	e8740330 	lwi	r3, r20, 816
2001e5a4:	e8630000 	lwi	r3, r3, 0
2001e5a8:	30830001 	addik	r4, r3, 1
2001e5ac:	b0000000 	imm	0
2001e5b0:	e8740330 	lwi	r3, r20, 816
2001e5b4:	f8830000 	swi	r4, r3, 0
		
		read_end_MVIN();
2001e5b8:	b0000000 	imm	0
2001e5bc:	e87403bc 	lwi	r3, r20, 956
2001e5c0:	99fc1800 	brald	r15, r3
2001e5c4:	80000000 	or	r0, r0, r0
	}
2001e5c8:	e9e10000 	lwi	r15, r1, 0
2001e5cc:	10330000 	addk	r1, r19, r0
2001e5d0:	ea610024 	lwi	r19, r1, 36
2001e5d4:	ea810028 	lwi	r20, r1, 40
2001e5d8:	3021002c 	addik	r1, r1, 44
2001e5dc:	b60f0008 	rtsd	r15, 8
2001e5e0:	80000000 	or	r0, r0, r0

2001e5e4 <isSchedulable_get_residual_calc>:
	static i32 isSchedulable_get_residual_calc() {
2001e5e4:	3021fff0 	addik	r1, r1, -16
2001e5e8:	fa610008 	swi	r19, r1, 8
2001e5ec:	fa81000c 	swi	r20, r1, 12
2001e5f0:	12610000 	addk	r19, r1, r0
2001e5f4:	96808000 	mfs	r20, rpc
2001e5f8:	b000dffe 	imm	-8194
2001e5fc:	32943368 	addik	r20, r20, 13160
		i32 result;
	
		result = 1;
2001e600:	30600001 	addik	r3, r0, 1
2001e604:	f8730004 	swi	r3, r19, 4
		return result;
2001e608:	e8730004 	lwi	r3, r19, 4
	}
2001e60c:	10330000 	addk	r1, r19, r0
2001e610:	ea610008 	lwi	r19, r1, 8
2001e614:	ea81000c 	lwi	r20, r1, 12
2001e618:	30210010 	addik	r1, r1, 16
2001e61c:	b60f0008 	rtsd	r15, 8
2001e620:	80000000 	or	r0, r0, r0

2001e624 <get_residual_calc>:
	
	static void get_residual_calc() {
2001e624:	3021ffd0 	addik	r1, r1, -48
2001e628:	f9e10000 	swi	r15, r1, 0
2001e62c:	fa610028 	swi	r19, r1, 40
2001e630:	fa81002c 	swi	r20, r1, 44
2001e634:	12610000 	addk	r19, r1, r0
2001e638:	96808000 	mfs	r20, rpc
2001e63c:	b000dffe 	imm	-8194
2001e640:	32943324 	addik	r20, r20, 13092
		i16 local_apred;
		i16 local_mag;
		i16 local_res_shift;
		i32 tmp_mvcalc;
	
		local_apred = apred;
2001e644:	b0000000 	imm	0
2001e648:	e8740380 	lwi	r3, r20, 896
2001e64c:	e4630000 	lhui	r3, r3, 0
2001e650:	f473001c 	shi	r3, r19, 28
		local_mag = mag;
2001e654:	b0000000 	imm	0
2001e658:	e874038c 	lwi	r3, r20, 908
2001e65c:	e4630000 	lhui	r3, r3, 0
2001e660:	f473001e 	shi	r3, r19, 30
		local_res_shift = res_shift;
2001e664:	b0000000 	imm	0
2001e668:	e87403a4 	lwi	r3, r20, 932
2001e66c:	e4630000 	lhui	r3, r3, 0
2001e670:	f4730020 	shi	r3, r19, 32
		tmp_mvcalc = mvcalc(local_apred, local_mag, local_res_shift);
2001e674:	e473001c 	lhui	r3, r19, 28
2001e678:	90a30061 	sext16	r5, r3
2001e67c:	e473001e 	lhui	r3, r19, 30
2001e680:	90830061 	sext16	r4, r3
2001e684:	e4730020 	lhui	r3, r19, 32
2001e688:	90630061 	sext16	r3, r3
2001e68c:	10c40000 	addk	r6, r4, r0
2001e690:	10e30000 	addk	r7, r3, r0
2001e694:	b0000000 	imm	0
2001e698:	e89403d4 	lwi	r4, r20, 980
2001e69c:	99fc2000 	brald	r15, r4
2001e6a0:	80000000 	or	r0, r0, r0
2001e6a4:	f8730024 	swi	r3, r19, 36
		res_shift = tmp_mvcalc;
2001e6a8:	e8730024 	lwi	r3, r19, 36
2001e6ac:	90830061 	sext16	r4, r3
2001e6b0:	b0000000 	imm	0
2001e6b4:	e87403a4 	lwi	r3, r20, 932
2001e6b8:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		
	}
2001e6bc:	e9e10000 	lwi	r15, r1, 0
2001e6c0:	10330000 	addk	r1, r19, r0
2001e6c4:	ea610028 	lwi	r19, r1, 40
2001e6c8:	ea81002c 	lwi	r20, r1, 44
2001e6cc:	30210030 	addik	r1, r1, 48
2001e6d0:	b60f0008 	rtsd	r15, 8
2001e6d4:	80000000 	or	r0, r0, r0

2001e6d8 <isSchedulable_get_residual_clip>:
	static i32 isSchedulable_get_residual_clip() {
2001e6d8:	3021fff0 	addik	r1, r1, -16
2001e6dc:	fa610008 	swi	r19, r1, 8
2001e6e0:	fa81000c 	swi	r20, r1, 12
2001e6e4:	12610000 	addk	r19, r1, r0
2001e6e8:	96808000 	mfs	r20, rpc
2001e6ec:	b000dffe 	imm	-8194
2001e6f0:	32943274 	addik	r20, r20, 12916
		i32 result;
	
		result = 1;
2001e6f4:	30600001 	addik	r3, r0, 1
2001e6f8:	f8730004 	swi	r3, r19, 4
		return result;
2001e6fc:	e8730004 	lwi	r3, r19, 4
	}
2001e700:	10330000 	addk	r1, r19, r0
2001e704:	ea610008 	lwi	r19, r1, 8
2001e708:	ea81000c 	lwi	r20, r1, 12
2001e70c:	30210010 	addik	r1, r1, 16
2001e710:	b60f0008 	rtsd	r15, 8
2001e714:	80000000 	or	r0, r0, r0

2001e718 <get_residual_clip>:
	
	static void get_residual_clip() {
2001e718:	3021ffd4 	addik	r1, r1, -44
2001e71c:	f9e10000 	swi	r15, r1, 0
2001e720:	fa610024 	swi	r19, r1, 36
2001e724:	fa810028 	swi	r20, r1, 40
2001e728:	12610000 	addk	r19, r1, r0
2001e72c:	96808000 	mfs	r20, rpc
2001e730:	b000dffe 	imm	-8194
2001e734:	32943230 	addik	r20, r20, 12848
		// Compute aligned port indexes
	
		i16 local_res_shift;
		i32 tmp_mvclip;
	
		local_res_shift = res_shift;
2001e738:	b0000000 	imm	0
2001e73c:	e87403a4 	lwi	r3, r20, 932
2001e740:	e4630000 	lhui	r3, r3, 0
2001e744:	f473001c 	shi	r3, r19, 28
		tmp_mvclip = mvclip(local_res_shift);
2001e748:	e473001c 	lhui	r3, r19, 28
2001e74c:	90630061 	sext16	r3, r3
2001e750:	10a30000 	addk	r5, r3, r0
2001e754:	b0000000 	imm	0
2001e758:	e89403d8 	lwi	r4, r20, 984
2001e75c:	99fc2000 	brald	r15, r4
2001e760:	80000000 	or	r0, r0, r0
2001e764:	f8730020 	swi	r3, r19, 32
		res_shift = tmp_mvclip;
2001e768:	e8730020 	lwi	r3, r19, 32
2001e76c:	90830061 	sext16	r4, r3
2001e770:	b0000000 	imm	0
2001e774:	e87403a4 	lwi	r3, r20, 932
2001e778:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		
	}
2001e77c:	e9e10000 	lwi	r15, r1, 0
2001e780:	10330000 	addk	r1, r19, r0
2001e784:	ea610024 	lwi	r19, r1, 36
2001e788:	ea810028 	lwi	r20, r1, 40
2001e78c:	3021002c 	addik	r1, r1, 44
2001e790:	b60f0008 	rtsd	r15, 8
2001e794:	80000000 	or	r0, r0, r0

2001e798 <isSchedulable_get_residual_final>:
	static i32 isSchedulable_get_residual_final() {
2001e798:	3021fff0 	addik	r1, r1, -16
2001e79c:	fa610008 	swi	r19, r1, 8
2001e7a0:	fa81000c 	swi	r20, r1, 12
2001e7a4:	12610000 	addk	r19, r1, r0
2001e7a8:	96808000 	mfs	r20, rpc
2001e7ac:	b000dffe 	imm	-8194
2001e7b0:	329431b4 	addik	r20, r20, 12724
		i32 result;
	
		result = 1;
2001e7b4:	30600001 	addik	r3, r0, 1
2001e7b8:	f8730004 	swi	r3, r19, 4
		return result;
2001e7bc:	e8730004 	lwi	r3, r19, 4
	}
2001e7c0:	10330000 	addk	r1, r19, r0
2001e7c4:	ea610008 	lwi	r19, r1, 8
2001e7c8:	ea81000c 	lwi	r20, r1, 12
2001e7cc:	30210010 	addik	r1, r1, 16
2001e7d0:	b60f0008 	rtsd	r15, 8
2001e7d4:	80000000 	or	r0, r0, r0

2001e7d8 <get_residual_final>:
	
	static void get_residual_final() {
2001e7d8:	3021ffe8 	addik	r1, r1, -24
2001e7dc:	fa610010 	swi	r19, r1, 16
2001e7e0:	fa810014 	swi	r20, r1, 20
2001e7e4:	12610000 	addk	r19, r1, r0
2001e7e8:	96808000 	mfs	r20, rpc
2001e7ec:	b000dffe 	imm	-8194
2001e7f0:	32943174 	addik	r20, r20, 12660
		i16 local_res_shift;
		i16 sum;
		i16 local_mv_y;
		i16 local_sum_y;
	
		local_sum_x = sum_x;
2001e7f4:	b0000000 	imm	0
2001e7f8:	e8740398 	lwi	r3, r20, 920
2001e7fc:	e4630000 	lhui	r3, r3, 0
2001e800:	f4730004 	shi	r3, r19, 4
		local_res_shift = res_shift;
2001e804:	b0000000 	imm	0
2001e808:	e87403a4 	lwi	r3, r20, 932
2001e80c:	e4630000 	lhui	r3, r3, 0
2001e810:	f4730006 	shi	r3, r19, 6
		sum = local_sum_x + local_res_shift;
2001e814:	e4930004 	lhui	r4, r19, 4
2001e818:	e4730006 	lhui	r3, r19, 6
2001e81c:	10641800 	addk	r3, r4, r3
2001e820:	b0000000 	imm	0
2001e824:	a463ffff 	andi	r3, r3, -1
2001e828:	f4730008 	shi	r3, r19, 8
		local_mv_y = mv_y;
2001e82c:	b0000000 	imm	0
2001e830:	e8740394 	lwi	r3, r20, 916
2001e834:	e4630000 	lhui	r3, r3, 0
2001e838:	f473000a 	shi	r3, r19, 10
		mv_x = local_mv_y;
2001e83c:	b0000000 	imm	0
2001e840:	e8740390 	lwi	r3, r20, 912
2001e844:	e493000a 	lhui	r4, r19, 10
2001e848:	f4830000 	shi	r4, r3, 0
		local_res_shift = res_shift;
2001e84c:	b0000000 	imm	0
2001e850:	e87403a4 	lwi	r3, r20, 932
2001e854:	e4630000 	lhui	r3, r3, 0
2001e858:	f4730006 	shi	r3, r19, 6
		mv_y = local_res_shift;
2001e85c:	b0000000 	imm	0
2001e860:	e8740394 	lwi	r3, r20, 916
2001e864:	e4930006 	lhui	r4, r19, 6
2001e868:	f4830000 	shi	r4, r3, 0
		local_sum_y = sum_y;
2001e86c:	b0000000 	imm	0
2001e870:	e874039c 	lwi	r3, r20, 924
2001e874:	e4630000 	lhui	r3, r3, 0
2001e878:	f473000c 	shi	r3, r19, 12
		sum_x = local_sum_y;
2001e87c:	b0000000 	imm	0
2001e880:	e8740398 	lwi	r3, r20, 920
2001e884:	e493000c 	lhui	r4, r19, 12
2001e888:	f4830000 	shi	r4, r3, 0
		sum_y = sum;
2001e88c:	b0000000 	imm	0
2001e890:	e874039c 	lwi	r3, r20, 924
2001e894:	e4930008 	lhui	r4, r19, 8
2001e898:	f4830000 	shi	r4, r3, 0
		x_flag = 1;
2001e89c:	b0000000 	imm	0
2001e8a0:	e87403a0 	lwi	r3, r20, 928
2001e8a4:	30800001 	addik	r4, r0, 1
2001e8a8:	f8830000 	swi	r4, r3, 0
	
		// Update ports indexes
		
	}
2001e8ac:	10330000 	addk	r1, r19, r0
2001e8b0:	ea610010 	lwi	r19, r1, 16
2001e8b4:	ea810014 	lwi	r20, r1, 20
2001e8b8:	30210018 	addik	r1, r1, 24
2001e8bc:	b60f0008 	rtsd	r15, 8
2001e8c0:	80000000 	or	r0, r0, r0

2001e8c4 <isSchedulable_write_luma>:
	static i32 isSchedulable_write_luma() {
2001e8c4:	3021ffec 	addik	r1, r1, -20
2001e8c8:	fa61000c 	swi	r19, r1, 12
2001e8cc:	fa810010 	swi	r20, r1, 16
2001e8d0:	12610000 	addk	r19, r1, r0
2001e8d4:	96808000 	mfs	r20, rpc
2001e8d8:	b000dffe 	imm	-8194
2001e8dc:	32943088 	addik	r20, r20, 12424
		i32 result;
		i8 local_comp;
	
		local_comp = comp;
2001e8e0:	b0000000 	imm	0
2001e8e4:	e8740350 	lwi	r3, r20, 848
2001e8e8:	e0630000 	lbui	r3, r3, 0
2001e8ec:	f0730004 	sbi	r3, r19, 4
		result = local_comp < 4;
2001e8f0:	30600001 	addik	r3, r0, 1
2001e8f4:	e0930004 	lbui	r4, r19, 4
2001e8f8:	90a40060 	sext8	r5, r4
2001e8fc:	30800003 	addik	r4, r0, 3
2001e900:	16452001 	cmp	r18, r5, r4
2001e904:	bcb20008 	bgei	r18, 8		// 2001e90c
2001e908:	10600000 	addk	r3, r0, r0
2001e90c:	a46300ff 	andi	r3, r3, 255
2001e910:	f8730008 	swi	r3, r19, 8
		return result;
2001e914:	e8730008 	lwi	r3, r19, 8
	}
2001e918:	10330000 	addk	r1, r19, r0
2001e91c:	ea61000c 	lwi	r19, r1, 12
2001e920:	ea810010 	lwi	r20, r1, 16
2001e924:	30210014 	addik	r1, r1, 20
2001e928:	b60f0008 	rtsd	r15, 8
2001e92c:	80000000 	or	r0, r0, r0

2001e930 <write_luma>:
	
	static void write_luma() {
2001e930:	3021ffc0 	addik	r1, r1, -64
2001e934:	f9e10000 	swi	r15, r1, 0
2001e938:	fa610038 	swi	r19, r1, 56
2001e93c:	fa81003c 	swi	r20, r1, 60
2001e940:	12610000 	addk	r19, r1, r0
2001e944:	96808000 	mfs	r20, rpc
2001e948:	b000dffe 	imm	-8194
2001e94c:	32943018 	addik	r20, r20, 12312
	
		// Compute aligned port indexes
		i32 index_aligned_MV = index_MV % SIZE_MV;
2001e950:	b0000000 	imm	0
2001e954:	e8740340 	lwi	r3, r20, 832
2001e958:	e8630000 	lwi	r3, r3, 0
2001e95c:	a46301ff 	andi	r3, r3, 511
2001e960:	f8730020 	swi	r3, r19, 32
		i32 local_x_flag;
		i8 tmp_if;
		i8 local_Y_SELECT;
		i16 local_mv_y;
	
		local_ptr = ptr;
2001e964:	b0000000 	imm	0
2001e968:	e8740358 	lwi	r3, r20, 856
2001e96c:	e4630000 	lhui	r3, r3, 0
2001e970:	f4730024 	shi	r3, r19, 36
		local_comp = comp;
2001e974:	b0000000 	imm	0
2001e978:	e8740350 	lwi	r3, r20, 848
2001e97c:	e0630000 	lbui	r3, r3, 0
2001e980:	f0730026 	sbi	r3, r19, 38
		p = local_ptr | local_comp;
2001e984:	e0730026 	lbui	r3, r19, 38
2001e988:	90630060 	sext8	r3, r3
2001e98c:	90830061 	sext16	r4, r3
2001e990:	e4730024 	lhui	r3, r19, 36
2001e994:	80641800 	or	r3, r4, r3
2001e998:	f4730028 	shi	r3, r19, 40
		local_mv_x = mv_x;
2001e99c:	b0000000 	imm	0
2001e9a0:	e8740390 	lwi	r3, r20, 912
2001e9a4:	e4630000 	lhui	r3, r3, 0
2001e9a8:	f473002a 	shi	r3, r19, 42
		t = local_mv_x;
2001e9ac:	e473002a 	lhui	r3, r19, 42
2001e9b0:	f473002c 	shi	r3, r19, 44
		local_x_flag = x_flag;
2001e9b4:	b0000000 	imm	0
2001e9b8:	e87403a0 	lwi	r3, r20, 928
2001e9bc:	e8630000 	lwi	r3, r3, 0
2001e9c0:	f8730030 	swi	r3, r19, 48
		if (local_x_flag) {
2001e9c4:	e8730030 	lwi	r3, r19, 48
2001e9c8:	bc03000c 	beqi	r3, 12		// 2001e9d4
			tmp_if = 0;
2001e9cc:	f013001c 	sbi	r0, r19, 28
2001e9d0:	b8000014 	bri	20		// 2001e9e4
		} else {
			local_Y_SELECT = Y_SELECT;
2001e9d4:	30600004 	addik	r3, r0, 4
2001e9d8:	f0730034 	sbi	r3, r19, 52
			tmp_if = local_Y_SELECT;
2001e9dc:	e0730034 	lbui	r3, r19, 52
2001e9e0:	f073001c 	sbi	r3, r19, 28
		}
		local_mv_x = mv_x;
2001e9e4:	b0000000 	imm	0
2001e9e8:	e8740390 	lwi	r3, r20, 912
2001e9ec:	e4630000 	lhui	r3, r3, 0
2001e9f0:	f473002a 	shi	r3, r19, 42
		buf[p | tmp_if] = local_mv_x;
2001e9f4:	e4730028 	lhui	r3, r19, 40
2001e9f8:	90830061 	sext16	r4, r3
2001e9fc:	e073001c 	lbui	r3, r19, 28
2001ea00:	90630060 	sext8	r3, r3
2001ea04:	80641800 	or	r3, r4, r3
2001ea08:	b0000000 	imm	0
2001ea0c:	e894035c 	lwi	r4, r20, 860
2001ea10:	10631800 	addk	r3, r3, r3
2001ea14:	10641800 	addk	r3, r4, r3
2001ea18:	e493002a 	lhui	r4, r19, 42
2001ea1c:	f4830000 	shi	r4, r3, 0
		local_mv_y = mv_y;
2001ea20:	b0000000 	imm	0
2001ea24:	e8740394 	lwi	r3, r20, 916
2001ea28:	e4630000 	lhui	r3, r3, 0
2001ea2c:	f4730036 	shi	r3, r19, 54
		mv_x = local_mv_y;
2001ea30:	b0000000 	imm	0
2001ea34:	e8740390 	lwi	r3, r20, 912
2001ea38:	e4930036 	lhui	r4, r19, 54
2001ea3c:	f4830000 	shi	r4, r3, 0
		mv_y = t;
2001ea40:	b0000000 	imm	0
2001ea44:	e8740394 	lwi	r3, r20, 916
2001ea48:	e493002c 	lhui	r4, r19, 44
2001ea4c:	f4830000 	shi	r4, r3, 0
		local_x_flag = x_flag;
2001ea50:	b0000000 	imm	0
2001ea54:	e87403a0 	lwi	r3, r20, 928
2001ea58:	e8630000 	lwi	r3, r3, 0
2001ea5c:	f8730030 	swi	r3, r19, 48
		x_flag = !local_x_flag;
2001ea60:	e8930030 	lwi	r4, r19, 48
2001ea64:	10600000 	addk	r3, r0, r0
2001ea68:	88641c00 	pcmpeq	r3, r4, r3
2001ea6c:	a46300ff 	andi	r3, r3, 255
2001ea70:	10830000 	addk	r4, r3, r0
2001ea74:	b0000000 	imm	0
2001ea78:	e87403a0 	lwi	r3, r20, 928
2001ea7c:	f8830000 	swi	r4, r3, 0
		tokens_MV[(index_MV + (0)) % SIZE_MV] = t;
2001ea80:	b0000000 	imm	0
2001ea84:	e8740324 	lwi	r3, r20, 804
2001ea88:	e8630000 	lwi	r3, r3, 0
2001ea8c:	e8830004 	lwi	r4, r3, 4
2001ea90:	b0000000 	imm	0
2001ea94:	e8740340 	lwi	r3, r20, 832
2001ea98:	e8630000 	lwi	r3, r3, 0
2001ea9c:	a46301ff 	andi	r3, r3, 511
2001eaa0:	10631800 	addk	r3, r3, r3
2001eaa4:	10641800 	addk	r3, r4, r3
2001eaa8:	e493002c 	lhui	r4, r19, 44
2001eaac:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_MV += 1;
2001eab0:	b0000000 	imm	0
2001eab4:	e8740340 	lwi	r3, r20, 832
2001eab8:	e8630000 	lwi	r3, r3, 0
2001eabc:	30830001 	addik	r4, r3, 1
2001eac0:	b0000000 	imm	0
2001eac4:	e8740340 	lwi	r3, r20, 832
2001eac8:	f8830000 	swi	r4, r3, 0
		
		write_end_MV();
2001eacc:	b0000000 	imm	0
2001ead0:	e87403cc 	lwi	r3, r20, 972
2001ead4:	99fc1800 	brald	r15, r3
2001ead8:	80000000 	or	r0, r0, r0
	}
2001eadc:	e9e10000 	lwi	r15, r1, 0
2001eae0:	10330000 	addk	r1, r19, r0
2001eae4:	ea610038 	lwi	r19, r1, 56
2001eae8:	ea81003c 	lwi	r20, r1, 60
2001eaec:	30210040 	addik	r1, r1, 64
2001eaf0:	b60f0008 	rtsd	r15, 8
2001eaf4:	80000000 	or	r0, r0, r0

2001eaf8 <isSchedulable_write_chroma>:
	static i32 isSchedulable_write_chroma() {
2001eaf8:	3021fff0 	addik	r1, r1, -16
2001eafc:	fa610008 	swi	r19, r1, 8
2001eb00:	fa81000c 	swi	r20, r1, 12
2001eb04:	12610000 	addk	r19, r1, r0
2001eb08:	96808000 	mfs	r20, rpc
2001eb0c:	b000dffe 	imm	-8194
2001eb10:	32942e54 	addik	r20, r20, 11860
		i32 result;
	
		result = 1;
2001eb14:	30600001 	addik	r3, r0, 1
2001eb18:	f8730004 	swi	r3, r19, 4
		return result;
2001eb1c:	e8730004 	lwi	r3, r19, 4
	}
2001eb20:	10330000 	addk	r1, r19, r0
2001eb24:	ea610008 	lwi	r19, r1, 8
2001eb28:	ea81000c 	lwi	r20, r1, 12
2001eb2c:	30210010 	addik	r1, r1, 16
2001eb30:	b60f0008 	rtsd	r15, 8
2001eb34:	80000000 	or	r0, r0, r0

2001eb38 <write_chroma>:
	
	static void write_chroma() {
2001eb38:	3021ffc8 	addik	r1, r1, -56
2001eb3c:	f9e10000 	swi	r15, r1, 0
2001eb40:	fa610030 	swi	r19, r1, 48
2001eb44:	fa810034 	swi	r20, r1, 52
2001eb48:	12610000 	addk	r19, r1, r0
2001eb4c:	96808000 	mfs	r20, rpc
2001eb50:	b000dffe 	imm	-8194
2001eb54:	32942e10 	addik	r20, r20, 11792
	
		// Compute aligned port indexes
		i32 index_aligned_MV = index_MV % SIZE_MV;
2001eb58:	b0000000 	imm	0
2001eb5c:	e8740340 	lwi	r3, r20, 832
2001eb60:	e8630000 	lwi	r3, r3, 0
2001eb64:	a46301ff 	andi	r3, r3, 511
2001eb68:	f8730020 	swi	r3, r19, 32
		i16 local_sum_x;
		i16 mv;
		i16 t;
		i16 local_sum_y;
	
		local_fourmv = fourmv;
2001eb6c:	b0000000 	imm	0
2001eb70:	e8740370 	lwi	r3, r20, 880
2001eb74:	e8630000 	lwi	r3, r3, 0
2001eb78:	f8730024 	swi	r3, r19, 36
		if (local_fourmv) {
2001eb7c:	e8730024 	lwi	r3, r19, 36
2001eb80:	bc030038 	beqi	r3, 56		// 2001ebb8
			local_sum_x = sum_x;
2001eb84:	b0000000 	imm	0
2001eb88:	e8740398 	lwi	r3, r20, 920
2001eb8c:	e4630000 	lhui	r3, r3, 0
2001eb90:	f4730028 	shi	r3, r19, 40
			mv = uvclip_4(local_sum_x);
2001eb94:	e4730028 	lhui	r3, r19, 40
2001eb98:	90630061 	sext16	r3, r3
2001eb9c:	10a30000 	addk	r5, r3, r0
2001eba0:	b0000000 	imm	0
2001eba4:	e89403e0 	lwi	r4, r20, 992
2001eba8:	99fc2000 	brald	r15, r4
2001ebac:	80000000 	or	r0, r0, r0
2001ebb0:	f473001c 	shi	r3, r19, 28
2001ebb4:	b8000034 	bri	52		// 2001ebe8
		} else {
			local_sum_x = sum_x;
2001ebb8:	b0000000 	imm	0
2001ebbc:	e8740398 	lwi	r3, r20, 920
2001ebc0:	e4630000 	lhui	r3, r3, 0
2001ebc4:	f4730028 	shi	r3, r19, 40
			mv = uvclip_1(local_sum_x);
2001ebc8:	e4730028 	lhui	r3, r19, 40
2001ebcc:	90630061 	sext16	r3, r3
2001ebd0:	10a30000 	addk	r5, r3, r0
2001ebd4:	b0000000 	imm	0
2001ebd8:	e89403dc 	lwi	r4, r20, 988
2001ebdc:	99fc2000 	brald	r15, r4
2001ebe0:	80000000 	or	r0, r0, r0
2001ebe4:	f473001c 	shi	r3, r19, 28
		}
		local_sum_x = sum_x;
2001ebe8:	b0000000 	imm	0
2001ebec:	e8740398 	lwi	r3, r20, 920
2001ebf0:	e4630000 	lhui	r3, r3, 0
2001ebf4:	f4730028 	shi	r3, r19, 40
		t = local_sum_x;
2001ebf8:	e4730028 	lhui	r3, r19, 40
2001ebfc:	f473002a 	shi	r3, r19, 42
		local_sum_y = sum_y;
2001ec00:	b0000000 	imm	0
2001ec04:	e874039c 	lwi	r3, r20, 924
2001ec08:	e4630000 	lhui	r3, r3, 0
2001ec0c:	f473002c 	shi	r3, r19, 44
		sum_x = local_sum_y;
2001ec10:	b0000000 	imm	0
2001ec14:	e8740398 	lwi	r3, r20, 920
2001ec18:	e493002c 	lhui	r4, r19, 44
2001ec1c:	f4830000 	shi	r4, r3, 0
		sum_y = t;
2001ec20:	b0000000 	imm	0
2001ec24:	e874039c 	lwi	r3, r20, 924
2001ec28:	e493002a 	lhui	r4, r19, 42
2001ec2c:	f4830000 	shi	r4, r3, 0
		tokens_MV[(index_MV + (0)) % SIZE_MV] = mv;
2001ec30:	b0000000 	imm	0
2001ec34:	e8740324 	lwi	r3, r20, 804
2001ec38:	e8630000 	lwi	r3, r3, 0
2001ec3c:	e8830004 	lwi	r4, r3, 4
2001ec40:	b0000000 	imm	0
2001ec44:	e8740340 	lwi	r3, r20, 832
2001ec48:	e8630000 	lwi	r3, r3, 0
2001ec4c:	a46301ff 	andi	r3, r3, 511
2001ec50:	10631800 	addk	r3, r3, r3
2001ec54:	10641800 	addk	r3, r4, r3
2001ec58:	e493001c 	lhui	r4, r19, 28
2001ec5c:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_MV += 1;
2001ec60:	b0000000 	imm	0
2001ec64:	e8740340 	lwi	r3, r20, 832
2001ec68:	e8630000 	lwi	r3, r3, 0
2001ec6c:	30830001 	addik	r4, r3, 1
2001ec70:	b0000000 	imm	0
2001ec74:	e8740340 	lwi	r3, r20, 832
2001ec78:	f8830000 	swi	r4, r3, 0
		
		write_end_MV();
2001ec7c:	b0000000 	imm	0
2001ec80:	e87403cc 	lwi	r3, r20, 972
2001ec84:	99fc1800 	brald	r15, r3
2001ec88:	80000000 	or	r0, r0, r0
	}
2001ec8c:	e9e10000 	lwi	r15, r1, 0
2001ec90:	10330000 	addk	r1, r19, r0
2001ec94:	ea610030 	lwi	r19, r1, 48
2001ec98:	ea810034 	lwi	r20, r1, 52
2001ec9c:	30210038 	addik	r1, r1, 56
2001eca0:	b60f0008 	rtsd	r15, 8
2001eca4:	80000000 	or	r0, r0, r0

2001eca8 <isSchedulable_advance>:
	static i32 isSchedulable_advance() {
2001eca8:	3021fff0 	addik	r1, r1, -16
2001ecac:	fa610008 	swi	r19, r1, 8
2001ecb0:	fa81000c 	swi	r20, r1, 12
2001ecb4:	12610000 	addk	r19, r1, r0
2001ecb8:	96808000 	mfs	r20, rpc
2001ecbc:	b000dffe 	imm	-8194
2001ecc0:	32942ca4 	addik	r20, r20, 11428
		i32 result;
	
		result = 1;
2001ecc4:	30600001 	addik	r3, r0, 1
2001ecc8:	f8730004 	swi	r3, r19, 4
		return result;
2001eccc:	e8730004 	lwi	r3, r19, 4
	}
2001ecd0:	10330000 	addk	r1, r19, r0
2001ecd4:	ea610008 	lwi	r19, r1, 8
2001ecd8:	ea81000c 	lwi	r20, r1, 12
2001ecdc:	30210010 	addik	r1, r1, 16
2001ece0:	b60f0008 	rtsd	r15, 8
2001ece4:	80000000 	or	r0, r0, r0

2001ece8 <advance>:
	
	static void advance() {
2001ece8:	3021ffe8 	addik	r1, r1, -24
2001ecec:	fa610010 	swi	r19, r1, 16
2001ecf0:	fa810014 	swi	r20, r1, 20
2001ecf4:	12610000 	addk	r19, r1, r0
2001ecf8:	96808000 	mfs	r20, rpc
2001ecfc:	b000dffe 	imm	-8194
2001ed00:	32942c64 	addik	r20, r20, 11364
		i8 local_mbx;
		i8 local_mbwidth;
		i16 local_ptr;
		i32 local_BUF_SIZE;
	
		local_comp = comp;
2001ed04:	b0000000 	imm	0
2001ed08:	e8740350 	lwi	r3, r20, 848
2001ed0c:	e0630000 	lbui	r3, r3, 0
2001ed10:	f0730004 	sbi	r3, r19, 4
		comp = local_comp + 1;
2001ed14:	e0730004 	lbui	r3, r19, 4
2001ed18:	30630001 	addik	r3, r3, 1
2001ed1c:	a46300ff 	andi	r3, r3, 255
2001ed20:	90830060 	sext8	r4, r3
2001ed24:	b0000000 	imm	0
2001ed28:	e8740350 	lwi	r3, r20, 848
2001ed2c:	f0830000 	sbi	r4, r3, 0
		local_comp = comp;
2001ed30:	b0000000 	imm	0
2001ed34:	e8740350 	lwi	r3, r20, 848
2001ed38:	e0630000 	lbui	r3, r3, 0
2001ed3c:	f0730004 	sbi	r3, r19, 4
		if (local_comp == 6) {
2001ed40:	e0730004 	lbui	r3, r19, 4
2001ed44:	90630060 	sext8	r3, r3
2001ed48:	a8630006 	xori	r3, r3, 6
2001ed4c:	bc230104 	bnei	r3, 260		// 2001ee50
			comp = 0;
2001ed50:	b0000000 	imm	0
2001ed54:	e8740350 	lwi	r3, r20, 848
2001ed58:	f0030000 	sbi	r0, r3, 0
			local_mbx = mbx;
2001ed5c:	b0000000 	imm	0
2001ed60:	e8740348 	lwi	r3, r20, 840
2001ed64:	e0630000 	lbui	r3, r3, 0
2001ed68:	f0730005 	sbi	r3, r19, 5
			mbx = local_mbx + 1;
2001ed6c:	e0730005 	lbui	r3, r19, 5
2001ed70:	30630001 	addik	r3, r3, 1
2001ed74:	a46300ff 	andi	r3, r3, 255
2001ed78:	90830060 	sext8	r4, r3
2001ed7c:	b0000000 	imm	0
2001ed80:	e8740348 	lwi	r3, r20, 840
2001ed84:	f0830000 	sbi	r4, r3, 0
			local_mbx = mbx;
2001ed88:	b0000000 	imm	0
2001ed8c:	e8740348 	lwi	r3, r20, 840
2001ed90:	e0630000 	lbui	r3, r3, 0
2001ed94:	f0730005 	sbi	r3, r19, 5
			local_mbwidth = mbwidth;
2001ed98:	b0000000 	imm	0
2001ed9c:	e8740354 	lwi	r3, r20, 852
2001eda0:	e0630000 	lbui	r3, r3, 0
2001eda4:	f0730006 	sbi	r3, r19, 6
			if (local_mbx == local_mbwidth) {
2001eda8:	e0730005 	lbui	r3, r19, 5
2001edac:	90830060 	sext8	r4, r3
2001edb0:	e0730006 	lbui	r3, r19, 6
2001edb4:	90630060 	sext8	r3, r3
2001edb8:	88641800 	xor	r3, r4, r3
2001edbc:	bc230010 	bnei	r3, 16		// 2001edcc
				top_edge = 0;
2001edc0:	b0000000 	imm	0
2001edc4:	e874034c 	lwi	r3, r20, 844
2001edc8:	f8030000 	swi	r0, r3, 0
			}
			local_ptr = ptr;
2001edcc:	b0000000 	imm	0
2001edd0:	e8740358 	lwi	r3, r20, 856
2001edd4:	e4630000 	lhui	r3, r3, 0
2001edd8:	f4730008 	shi	r3, r19, 8
			if (local_ptr == 8) {
2001eddc:	e4730008 	lhui	r3, r19, 8
2001ede0:	90630061 	sext16	r3, r3
2001ede4:	a8630008 	xori	r3, r3, 8
2001ede8:	bc230038 	bnei	r3, 56		// 2001ee20
				local_BUF_SIZE = BUF_SIZE;
2001edec:	30600080 	addik	r3, r0, 128
2001edf0:	f873000c 	swi	r3, r19, 12
				ptr = local_BUF_SIZE - 8;
2001edf4:	e873000c 	lwi	r3, r19, 12
2001edf8:	b0000000 	imm	0
2001edfc:	a463ffff 	andi	r3, r3, -1
2001ee00:	3063fff8 	addik	r3, r3, -8
2001ee04:	b0000000 	imm	0
2001ee08:	a463ffff 	andi	r3, r3, -1
2001ee0c:	90830061 	sext16	r4, r3
2001ee10:	b0000000 	imm	0
2001ee14:	e8740358 	lwi	r3, r20, 856
2001ee18:	f4830000 	shi	r4, r3, 0
2001ee1c:	b8000034 	bri	52		// 2001ee50
			} else {
				local_ptr = ptr;
2001ee20:	b0000000 	imm	0
2001ee24:	e8740358 	lwi	r3, r20, 856
2001ee28:	e4630000 	lhui	r3, r3, 0
2001ee2c:	f4730008 	shi	r3, r19, 8
				ptr = local_ptr - 8;
2001ee30:	e4730008 	lhui	r3, r19, 8
2001ee34:	3063fff8 	addik	r3, r3, -8
2001ee38:	b0000000 	imm	0
2001ee3c:	a463ffff 	andi	r3, r3, -1
2001ee40:	90830061 	sext16	r4, r3
2001ee44:	b0000000 	imm	0
2001ee48:	e8740358 	lwi	r3, r20, 856
2001ee4c:	f4830000 	shi	r4, r3, 0
			}
		}
	
		// Update ports indexes
		
	}
2001ee50:	10330000 	addk	r1, r19, r0
2001ee54:	ea610010 	lwi	r19, r1, 16
2001ee58:	ea810014 	lwi	r20, r1, 20
2001ee5c:	30210018 	addik	r1, r1, 24
2001ee60:	b60f0008 	rtsd	r15, 8
2001ee64:	80000000 	or	r0, r0, r0

2001ee68 <decoder_parser_mvrecon_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_parser_mvrecon_initialize() {
2001ee68:	3021fff0 	addik	r1, r1, -16
2001ee6c:	fa610008 	swi	r19, r1, 8
2001ee70:	fa81000c 	swi	r20, r1, 12
2001ee74:	12610000 	addk	r19, r1, r0
2001ee78:	96808000 	mfs	r20, rpc
2001ee7c:	b000dffe 	imm	-8194
2001ee80:	32942ae4 	addik	r20, r20, 10980
		int i = 0;
2001ee84:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_read;
2001ee88:	b0000000 	imm	0
2001ee8c:	e87403ac 	lwi	r3, r20, 940
2001ee90:	3080001c 	addik	r4, r0, 28
2001ee94:	f8830000 	swi	r4, r3, 0
		
	finished:
		// no read_end/write_end here!
		return;
2001ee98:	80000000 	or	r0, r0, r0
	}
2001ee9c:	10330000 	addk	r1, r19, r0
2001eea0:	ea610008 	lwi	r19, r1, 8
2001eea4:	ea81000c 	lwi	r20, r1, 12
2001eea8:	30210010 	addik	r1, r1, 16
2001eeac:	b60f0008 	rtsd	r15, 8
2001eeb0:	80000000 	or	r0, r0, r0

2001eeb4 <decoder_parser_mvrecon_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	
	int decoder_parser_mvrecon_scheduler() {
2001eeb4:	3021ff48 	addik	r1, r1, -184
2001eeb8:	f9e10000 	swi	r15, r1, 0
2001eebc:	fa6100b0 	swi	r19, r1, 176
2001eec0:	fa8100b4 	swi	r20, r1, 180
2001eec4:	12610000 	addk	r19, r1, r0
2001eec8:	96808000 	mfs	r20, rpc
2001eecc:	b000dffe 	imm	-8194
2001eed0:	32942a94 	addik	r20, r20, 10900
		int i = 0;
2001eed4:	f813001c 	swi	r0, r19, 28
		if(needInit){
2001eed8:	b0000000 	imm	0
2001eedc:	e87403a8 	lwi	r3, r20, 936
2001eee0:	e0630000 	lbui	r3, r3, 0
2001eee4:	bc03001c 	beqi	r3, 28		// 2001ef00
			decoder_parser_mvrecon_initialize();
2001eee8:	b000ffff 	imm	-1
2001eeec:	b9f4ff7c 	brlid	r15, -132	// 2001ee68 <decoder_parser_mvrecon_initialize>
2001eef0:	80000000 	or	r0, r0, r0
			needInit = 0;
2001eef4:	b0000000 	imm	0
2001eef8:	e87403a8 	lwi	r3, r20, 936
2001eefc:	f0030000 	sbi	r0, r3, 0
		}
	
		read_BTYPE();
2001ef00:	b0000000 	imm	0
2001ef04:	e87403b0 	lwi	r3, r20, 944
2001ef08:	99fc1800 	brald	r15, r3
2001ef0c:	80000000 	or	r0, r0, r0
		read_MVIN();
2001ef10:	b0000000 	imm	0
2001ef14:	e89403b8 	lwi	r4, r20, 952
2001ef18:	99fc2000 	brald	r15, r4
2001ef1c:	80000000 	or	r0, r0, r0
		read_A();
2001ef20:	b0000000 	imm	0
2001ef24:	e87403c0 	lwi	r3, r20, 960
2001ef28:	99fc1800 	brald	r15, r3
2001ef2c:	80000000 	or	r0, r0, r0
		write_MV();
2001ef30:	b0000000 	imm	0
2001ef34:	e89403c8 	lwi	r4, r20, 968
2001ef38:	99fc2000 	brald	r15, r4
2001ef3c:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
2001ef40:	b0000000 	imm	0
2001ef44:	e87403ac 	lwi	r3, r20, 940
2001ef48:	e8630000 	lwi	r3, r3, 0
2001ef4c:	3080001e 	addik	r4, r0, 30
2001ef50:	16432003 	cmpu	r18, r3, r4
2001ef54:	bc520020 	blti	r18, 32		// 2001ef74
2001ef58:	64830402 	bslli	r4, r3, 2
2001ef5c:	b0000000 	imm	0
2001ef60:	e874047c 	lwi	r3, r20, 1148
2001ef64:	10641800 	addk	r3, r4, r3
2001ef68:	e8630000 	lwi	r3, r3, 0
2001ef6c:	1063a000 	addk	r3, r3, r20
2001ef70:	98081800 	bra	r3
		case my_state_write:
			goto l_write;
		case my_state_write_y:
			goto l_write_y;
		default:
			exit(1);
2001ef74:	30a00001 	addik	r5, r0, 1
2001ef78:	b000dffe 	imm	-8194
2001ef7c:	b9f4141c 	brlid	r15, 5148	// 398 <exit>
2001ef80:	80000000 	or	r0, r0, r0

2001ef84 <$L461>:
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_advance:
			goto l_advance;
2001ef84:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_advance:
			if (isSchedulable_advance()) {
2001ef88:	b0000000 	imm	0
2001ef8c:	e8940474 	lwi	r4, r20, 1140
2001ef90:	99fc2000 	brald	r15, r4
2001ef94:	80000000 	or	r0, r0, r0
2001ef98:	bc030040 	beqi	r3, 64		// 2001efd8
				int stop = 0;
2001ef9c:	f8130030 	swi	r0, r19, 48
				if (stop != 0) {
2001efa0:	e8730030 	lwi	r3, r19, 48
2001efa4:	bc030014 	beqi	r3, 20		// 2001efb8
					_FSM_state = my_state_advance;
2001efa8:	b0000000 	imm	0
2001efac:	e87403ac 	lwi	r3, r20, 940
2001efb0:	f8030000 	swi	r0, r3, 0
					goto finished;
2001efb4:	b80010d0 	bri	4304		// 20020084
				}
				advance();
2001efb8:	b0000000 	imm	0
2001efbc:	e8740478 	lwi	r3, r20, 1144
2001efc0:	99fc1800 	brald	r15, r3
2001efc4:	80000000 	or	r0, r0, r0
				i++;
2001efc8:	e873001c 	lwi	r3, r19, 28
2001efcc:	30630001 	addik	r3, r3, 1
2001efd0:	f873001c 	swi	r3, r19, 28
				goto l_read;
2001efd4:	b8000cf0 	bri	3312		// 2001fcc4
			} else {
				_FSM_state = my_state_advance;
2001efd8:	b0000000 	imm	0
2001efdc:	e87403ac 	lwi	r3, r20, 940
2001efe0:	f8030000 	swi	r0, r3, 0
				goto finished;
2001efe4:	b80010a0 	bri	4256		// 20020084

2001efe8 <$L462>:
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_advance:
			goto l_advance;
		case my_state_compute:
			goto l_compute;
2001efe8:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_advance;
				goto finished;
			}
		l_compute:
			if (isSchedulable_compute_done()) {
2001efec:	b0000000 	imm	0
2001eff0:	e894040c 	lwi	r4, r20, 1036
2001eff4:	99fc2000 	brald	r15, r4
2001eff8:	80000000 	or	r0, r0, r0
2001effc:	bc030044 	beqi	r3, 68		// 2001f040
				int stop = 0;
2001f000:	f8130034 	swi	r0, r19, 52
				if (stop != 0) {
2001f004:	e8730034 	lwi	r3, r19, 52
2001f008:	bc030018 	beqi	r3, 24		// 2001f020
					_FSM_state = my_state_compute;
2001f00c:	b0000000 	imm	0
2001f010:	e87403ac 	lwi	r3, r20, 940
2001f014:	30800001 	addik	r4, r0, 1
2001f018:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f01c:	b8001068 	bri	4200		// 20020084
				}
				compute_done();
2001f020:	b0000000 	imm	0
2001f024:	e8740410 	lwi	r3, r20, 1040
2001f028:	99fc1800 	brald	r15, r3
2001f02c:	80000000 	or	r0, r0, r0
				i++;
2001f030:	e873001c 	lwi	r3, r19, 28
2001f034:	30630001 	addik	r3, r3, 1
2001f038:	f873001c 	swi	r3, r19, 28
				goto l_write;
2001f03c:	b8000dfc 	bri	3580		// 2001fe38
			} else if (numTokens_A - index_A >= 1 && isSchedulable_compute_start()) {
2001f040:	b0000000 	imm	0
2001f044:	e874033c 	lwi	r3, r20, 828
2001f048:	e8830000 	lwi	r4, r3, 0
2001f04c:	b0000000 	imm	0
2001f050:	e8740338 	lwi	r3, r20, 824
2001f054:	e8630000 	lwi	r3, r3, 0
2001f058:	88641800 	xor	r3, r4, r3
2001f05c:	bc030058 	beqi	r3, 88		// 2001f0b4
2001f060:	b0000000 	imm	0
2001f064:	e8940414 	lwi	r4, r20, 1044
2001f068:	99fc2000 	brald	r15, r4
2001f06c:	80000000 	or	r0, r0, r0
2001f070:	bc030044 	beqi	r3, 68		// 2001f0b4
				int stop = 0;
2001f074:	f8130038 	swi	r0, r19, 56
				if (stop != 0) {
2001f078:	e8730038 	lwi	r3, r19, 56
2001f07c:	bc030018 	beqi	r3, 24		// 2001f094
					_FSM_state = my_state_compute;
2001f080:	b0000000 	imm	0
2001f084:	e87403ac 	lwi	r3, r20, 940
2001f088:	30800001 	addik	r4, r0, 1
2001f08c:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f090:	b8000ff4 	bri	4084		// 20020084
				}
				compute_start();
2001f094:	b0000000 	imm	0
2001f098:	e8740418 	lwi	r3, r20, 1048
2001f09c:	99fc1800 	brald	r15, r3
2001f0a0:	80000000 	or	r0, r0, r0
				i++;
2001f0a4:	e873001c 	lwi	r3, r19, 28
2001f0a8:	30630001 	addik	r3, r3, 1
2001f0ac:	f873001c 	swi	r3, r19, 28
				goto l_get_pred_p;
2001f0b0:	b800020c 	bri	524		// 2001f2bc
			} else {
				_FSM_state = my_state_compute;
2001f0b4:	b0000000 	imm	0
2001f0b8:	e87403ac 	lwi	r3, r20, 940
2001f0bc:	30800001 	addik	r4, r0, 1
2001f0c0:	f8830000 	swi	r4, r3, 0
				goto finished;
2001f0c4:	b8000fc0 	bri	4032		// 20020084

2001f0c8 <$L463>:
		case my_state_advance:
			goto l_advance;
		case my_state_compute:
			goto l_compute;
		case my_state_do_pred_x:
			goto l_do_pred_x;
2001f0c8:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_compute;
				goto finished;
			}
		l_do_pred_x:
			if (isSchedulable_do_pred()) {
2001f0cc:	b0000000 	imm	0
2001f0d0:	e8940424 	lwi	r4, r20, 1060
2001f0d4:	99fc2000 	brald	r15, r4
2001f0d8:	80000000 	or	r0, r0, r0
2001f0dc:	bc030044 	beqi	r3, 68		// 2001f120
				int stop = 0;
2001f0e0:	f8130050 	swi	r0, r19, 80
				if (stop != 0) {
2001f0e4:	e8730050 	lwi	r3, r19, 80
2001f0e8:	bc030018 	beqi	r3, 24		// 2001f100
					_FSM_state = my_state_do_pred_x;
2001f0ec:	b0000000 	imm	0
2001f0f0:	e87403ac 	lwi	r3, r20, 940
2001f0f4:	30800002 	addik	r4, r0, 2
2001f0f8:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f0fc:	b8000f88 	bri	3976		// 20020084
				}
				do_pred();
2001f100:	b0000000 	imm	0
2001f104:	e8740428 	lwi	r3, r20, 1064
2001f108:	99fc1800 	brald	r15, r3
2001f10c:	80000000 	or	r0, r0, r0
				i++;
2001f110:	e873001c 	lwi	r3, r19, 28
2001f114:	30630001 	addik	r3, r3, 1
2001f118:	f873001c 	swi	r3, r19, 28
				goto l_get_mag_x;
2001f11c:	b8000088 	bri	136		// 2001f1a4
			} else {
				_FSM_state = my_state_do_pred_x;
2001f120:	b0000000 	imm	0
2001f124:	e87403ac 	lwi	r3, r20, 940
2001f128:	30800002 	addik	r4, r0, 2
2001f12c:	f8830000 	swi	r4, r3, 0
				goto finished;
2001f130:	b8000f54 	bri	3924		// 20020084

2001f134 <$L464>:
		case my_state_compute:
			goto l_compute;
		case my_state_do_pred_x:
			goto l_do_pred_x;
		case my_state_do_pred_y:
			goto l_do_pred_y;
2001f134:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_do_pred_x;
				goto finished;
			}
		l_do_pred_y:
			if (isSchedulable_do_pred()) {
2001f138:	b0000000 	imm	0
2001f13c:	e8940424 	lwi	r4, r20, 1060
2001f140:	99fc2000 	brald	r15, r4
2001f144:	80000000 	or	r0, r0, r0
2001f148:	bc030044 	beqi	r3, 68		// 2001f18c
				int stop = 0;
2001f14c:	f813007c 	swi	r0, r19, 124
				if (stop != 0) {
2001f150:	e873007c 	lwi	r3, r19, 124
2001f154:	bc030018 	beqi	r3, 24		// 2001f16c
					_FSM_state = my_state_do_pred_y;
2001f158:	b0000000 	imm	0
2001f15c:	e87403ac 	lwi	r3, r20, 940
2001f160:	30800003 	addik	r4, r0, 3
2001f164:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f168:	b8000f1c 	bri	3868		// 20020084
				}
				do_pred();
2001f16c:	b0000000 	imm	0
2001f170:	e8740428 	lwi	r3, r20, 1064
2001f174:	99fc1800 	brald	r15, r3
2001f178:	80000000 	or	r0, r0, r0
				i++;
2001f17c:	e873001c 	lwi	r3, r19, 28
2001f180:	30630001 	addik	r3, r3, 1
2001f184:	f873001c 	swi	r3, r19, 28
				goto l_get_mag_y;
2001f188:	b80000a8 	bri	168		// 2001f230
			} else {
				_FSM_state = my_state_do_pred_y;
2001f18c:	b0000000 	imm	0
2001f190:	e87403ac 	lwi	r3, r20, 940
2001f194:	30800003 	addik	r4, r0, 3
2001f198:	f8830000 	swi	r4, r3, 0
				goto finished;
2001f19c:	b8000ee8 	bri	3816		// 20020084

2001f1a0 <$L465>:
		case my_state_do_pred_x:
			goto l_do_pred_x;
		case my_state_do_pred_y:
			goto l_do_pred_y;
		case my_state_get_mag_x:
			goto l_get_mag_x;
2001f1a0:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_do_pred_y;
				goto finished;
			}
		l_get_mag_x:
			if (numTokens_MVIN - index_MVIN >= 1 && isSchedulable_get_mag()) {
2001f1a4:	b0000000 	imm	0
2001f1a8:	e8740334 	lwi	r3, r20, 820
2001f1ac:	e8830000 	lwi	r4, r3, 0
2001f1b0:	b0000000 	imm	0
2001f1b4:	e8740330 	lwi	r3, r20, 816
2001f1b8:	e8630000 	lwi	r3, r3, 0
2001f1bc:	88641800 	xor	r3, r4, r3
2001f1c0:	bc030058 	beqi	r3, 88		// 2001f218
2001f1c4:	b0000000 	imm	0
2001f1c8:	e894042c 	lwi	r4, r20, 1068
2001f1cc:	99fc2000 	brald	r15, r4
2001f1d0:	80000000 	or	r0, r0, r0
2001f1d4:	bc030044 	beqi	r3, 68		// 2001f218
				int stop = 0;
2001f1d8:	f8130054 	swi	r0, r19, 84
				if (stop != 0) {
2001f1dc:	e8730054 	lwi	r3, r19, 84
2001f1e0:	bc030018 	beqi	r3, 24		// 2001f1f8
					_FSM_state = my_state_get_mag_x;
2001f1e4:	b0000000 	imm	0
2001f1e8:	e87403ac 	lwi	r3, r20, 940
2001f1ec:	30800004 	addik	r4, r0, 4
2001f1f0:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f1f4:	b8000e90 	bri	3728		// 20020084
				}
				get_mag();
2001f1f8:	b0000000 	imm	0
2001f1fc:	e8740430 	lwi	r3, r20, 1072
2001f200:	99fc1800 	brald	r15, r3
2001f204:	80000000 	or	r0, r0, r0
				i++;
2001f208:	e873001c 	lwi	r3, r19, 28
2001f20c:	30630001 	addik	r3, r3, 1
2001f210:	f873001c 	swi	r3, r19, 28
				goto l_get_res_x;
2001f214:	b8000448 	bri	1096		// 2001f65c
			} else {
				_FSM_state = my_state_get_mag_x;
2001f218:	b0000000 	imm	0
2001f21c:	e87403ac 	lwi	r3, r20, 940
2001f220:	30800004 	addik	r4, r0, 4
2001f224:	f8830000 	swi	r4, r3, 0
				goto finished;
2001f228:	b8000e5c 	bri	3676		// 20020084

2001f22c <$L466>:
		case my_state_do_pred_y:
			goto l_do_pred_y;
		case my_state_get_mag_x:
			goto l_get_mag_x;
		case my_state_get_mag_y:
			goto l_get_mag_y;
2001f22c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_mag_x;
				goto finished;
			}
		l_get_mag_y:
			if (numTokens_MVIN - index_MVIN >= 1 && isSchedulable_get_mag()) {
2001f230:	b0000000 	imm	0
2001f234:	e8740334 	lwi	r3, r20, 820
2001f238:	e8830000 	lwi	r4, r3, 0
2001f23c:	b0000000 	imm	0
2001f240:	e8740330 	lwi	r3, r20, 816
2001f244:	e8630000 	lwi	r3, r3, 0
2001f248:	88641800 	xor	r3, r4, r3
2001f24c:	bc030058 	beqi	r3, 88		// 2001f2a4
2001f250:	b0000000 	imm	0
2001f254:	e894042c 	lwi	r4, r20, 1068
2001f258:	99fc2000 	brald	r15, r4
2001f25c:	80000000 	or	r0, r0, r0
2001f260:	bc030044 	beqi	r3, 68		// 2001f2a4
				int stop = 0;
2001f264:	f8130080 	swi	r0, r19, 128
				if (stop != 0) {
2001f268:	e8730080 	lwi	r3, r19, 128
2001f26c:	bc030018 	beqi	r3, 24		// 2001f284
					_FSM_state = my_state_get_mag_y;
2001f270:	b0000000 	imm	0
2001f274:	e87403ac 	lwi	r3, r20, 940
2001f278:	30800005 	addik	r4, r0, 5
2001f27c:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f280:	b8000e04 	bri	3588		// 20020084
				}
				get_mag();
2001f284:	b0000000 	imm	0
2001f288:	e8740430 	lwi	r3, r20, 1072
2001f28c:	99fc1800 	brald	r15, r3
2001f290:	80000000 	or	r0, r0, r0
				i++;
2001f294:	e873001c 	lwi	r3, r19, 28
2001f298:	30630001 	addik	r3, r3, 1
2001f29c:	f873001c 	swi	r3, r19, 28
				goto l_get_res_y;
2001f2a0:	b8000664 	bri	1636		// 2001f904
			} else {
				_FSM_state = my_state_get_mag_y;
2001f2a4:	b0000000 	imm	0
2001f2a8:	e87403ac 	lwi	r3, r20, 940
2001f2ac:	30800005 	addik	r4, r0, 5
2001f2b0:	f8830000 	swi	r4, r3, 0
				goto finished;
2001f2b4:	b8000dd0 	bri	3536		// 20020084

2001f2b8 <$L467>:
		case my_state_get_mag_x:
			goto l_get_mag_x;
		case my_state_get_mag_y:
			goto l_get_mag_y;
		case my_state_get_pred_p:
			goto l_get_pred_p;
2001f2b8:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_mag_y;
				goto finished;
			}
		l_get_pred_p:
			if (numTokens_A - index_A >= 1 && isSchedulable_compute_start()) {
2001f2bc:	b0000000 	imm	0
2001f2c0:	e874033c 	lwi	r3, r20, 828
2001f2c4:	e8830000 	lwi	r4, r3, 0
2001f2c8:	b0000000 	imm	0
2001f2cc:	e8740338 	lwi	r3, r20, 824
2001f2d0:	e8630000 	lwi	r3, r3, 0
2001f2d4:	88641800 	xor	r3, r4, r3
2001f2d8:	bc030058 	beqi	r3, 88		// 2001f330
2001f2dc:	b0000000 	imm	0
2001f2e0:	e8940414 	lwi	r4, r20, 1044
2001f2e4:	99fc2000 	brald	r15, r4
2001f2e8:	80000000 	or	r0, r0, r0
2001f2ec:	bc030044 	beqi	r3, 68		// 2001f330
				int stop = 0;
2001f2f0:	f813003c 	swi	r0, r19, 60
				if (stop != 0) {
2001f2f4:	e873003c 	lwi	r3, r19, 60
2001f2f8:	bc030018 	beqi	r3, 24		// 2001f310
					_FSM_state = my_state_get_pred_p;
2001f2fc:	b0000000 	imm	0
2001f300:	e87403ac 	lwi	r3, r20, 940
2001f304:	30800006 	addik	r4, r0, 6
2001f308:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f30c:	b8000d78 	bri	3448		// 20020084
				}
				compute_start();
2001f310:	b0000000 	imm	0
2001f314:	e8740418 	lwi	r3, r20, 1048
2001f318:	99fc1800 	brald	r15, r3
2001f31c:	80000000 	or	r0, r0, r0
				i++;
2001f320:	e873001c 	lwi	r3, r19, 28
2001f324:	30630001 	addik	r3, r3, 1
2001f328:	f873001c 	swi	r3, r19, 28
				goto l_get_pred_p1;
2001f32c:	b800001c 	bri	28		// 2001f348
			} else {
				_FSM_state = my_state_get_pred_p;
2001f330:	b0000000 	imm	0
2001f334:	e87403ac 	lwi	r3, r20, 940
2001f338:	30800006 	addik	r4, r0, 6
2001f33c:	f8830000 	swi	r4, r3, 0
				goto finished;
2001f340:	b8000d44 	bri	3396		// 20020084

2001f344 <$L468>:
		case my_state_get_mag_y:
			goto l_get_mag_y;
		case my_state_get_pred_p:
			goto l_get_pred_p;
		case my_state_get_pred_p1:
			goto l_get_pred_p1;
2001f344:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_pred_p;
				goto finished;
			}
		l_get_pred_p1:
			if (numTokens_A - index_A >= 1 && isSchedulable_compute_start()) {
2001f348:	b0000000 	imm	0
2001f34c:	e874033c 	lwi	r3, r20, 828
2001f350:	e8830000 	lwi	r4, r3, 0
2001f354:	b0000000 	imm	0
2001f358:	e8740338 	lwi	r3, r20, 824
2001f35c:	e8630000 	lwi	r3, r3, 0
2001f360:	88641800 	xor	r3, r4, r3
2001f364:	bc030058 	beqi	r3, 88		// 2001f3bc
2001f368:	b0000000 	imm	0
2001f36c:	e8940414 	lwi	r4, r20, 1044
2001f370:	99fc2000 	brald	r15, r4
2001f374:	80000000 	or	r0, r0, r0
2001f378:	bc030044 	beqi	r3, 68		// 2001f3bc
				int stop = 0;
2001f37c:	f8130040 	swi	r0, r19, 64
				if (stop != 0) {
2001f380:	e8730040 	lwi	r3, r19, 64
2001f384:	bc030018 	beqi	r3, 24		// 2001f39c
					_FSM_state = my_state_get_pred_p1;
2001f388:	b0000000 	imm	0
2001f38c:	e87403ac 	lwi	r3, r20, 940
2001f390:	30800007 	addik	r4, r0, 7
2001f394:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f398:	b8000cec 	bri	3308		// 20020084
				}
				compute_start();
2001f39c:	b0000000 	imm	0
2001f3a0:	e8740418 	lwi	r3, r20, 1048
2001f3a4:	99fc1800 	brald	r15, r3
2001f3a8:	80000000 	or	r0, r0, r0
				i++;
2001f3ac:	e873001c 	lwi	r3, r19, 28
2001f3b0:	30630001 	addik	r3, r3, 1
2001f3b4:	f873001c 	swi	r3, r19, 28
				goto l_get_pred_x;
2001f3b8:	b800001c 	bri	28		// 2001f3d4
			} else {
				_FSM_state = my_state_get_pred_p1;
2001f3bc:	b0000000 	imm	0
2001f3c0:	e87403ac 	lwi	r3, r20, 940
2001f3c4:	30800007 	addik	r4, r0, 7
2001f3c8:	f8830000 	swi	r4, r3, 0
				goto finished;
2001f3cc:	b8000cb8 	bri	3256		// 20020084

2001f3d0 <$L469>:
		case my_state_get_pred_p:
			goto l_get_pred_p;
		case my_state_get_pred_p1:
			goto l_get_pred_p1;
		case my_state_get_pred_x:
			goto l_get_pred_x;
2001f3d0:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_pred_p1;
				goto finished;
			}
		l_get_pred_x:
			if (isSchedulable_get_pred()) {
2001f3d4:	b0000000 	imm	0
2001f3d8:	e894041c 	lwi	r4, r20, 1052
2001f3dc:	99fc2000 	brald	r15, r4
2001f3e0:	80000000 	or	r0, r0, r0
2001f3e4:	bc030044 	beqi	r3, 68		// 2001f428
				int stop = 0;
2001f3e8:	f8130044 	swi	r0, r19, 68
				if (stop != 0) {
2001f3ec:	e8730044 	lwi	r3, r19, 68
2001f3f0:	bc030018 	beqi	r3, 24		// 2001f408
					_FSM_state = my_state_get_pred_x;
2001f3f4:	b0000000 	imm	0
2001f3f8:	e87403ac 	lwi	r3, r20, 940
2001f3fc:	30800008 	addik	r4, r0, 8	// 8 <_vector_sw_exception>
2001f400:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f404:	b8000c80 	bri	3200		// 20020084
				}
				get_pred();
2001f408:	b0000000 	imm	0
2001f40c:	e8740420 	lwi	r3, r20, 1056
2001f410:	99fc1800 	brald	r15, r3
2001f414:	80000000 	or	r0, r0, r0
				i++;
2001f418:	e873001c 	lwi	r3, r19, 28
2001f41c:	30630001 	addik	r3, r3, 1
2001f420:	f873001c 	swi	r3, r19, 28
				goto l_get_pred_x1;
2001f424:	b800001c 	bri	28		// 2001f440
			} else {
				_FSM_state = my_state_get_pred_x;
2001f428:	b0000000 	imm	0
2001f42c:	e87403ac 	lwi	r3, r20, 940
2001f430:	30800008 	addik	r4, r0, 8	// 8 <_vector_sw_exception>
2001f434:	f8830000 	swi	r4, r3, 0
				goto finished;
2001f438:	b8000c4c 	bri	3148		// 20020084

2001f43c <$L470>:
		case my_state_get_pred_p1:
			goto l_get_pred_p1;
		case my_state_get_pred_x:
			goto l_get_pred_x;
		case my_state_get_pred_x1:
			goto l_get_pred_x1;
2001f43c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_pred_x;
				goto finished;
			}
		l_get_pred_x1:
			if (isSchedulable_get_pred()) {
2001f440:	b0000000 	imm	0
2001f444:	e894041c 	lwi	r4, r20, 1052
2001f448:	99fc2000 	brald	r15, r4
2001f44c:	80000000 	or	r0, r0, r0
2001f450:	bc030044 	beqi	r3, 68		// 2001f494
				int stop = 0;
2001f454:	f8130048 	swi	r0, r19, 72
				if (stop != 0) {
2001f458:	e8730048 	lwi	r3, r19, 72
2001f45c:	bc030018 	beqi	r3, 24		// 2001f474
					_FSM_state = my_state_get_pred_x1;
2001f460:	b0000000 	imm	0
2001f464:	e87403ac 	lwi	r3, r20, 940
2001f468:	30800009 	addik	r4, r0, 9
2001f46c:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f470:	b8000c14 	bri	3092		// 20020084
				}
				get_pred();
2001f474:	b0000000 	imm	0
2001f478:	e8740420 	lwi	r3, r20, 1056
2001f47c:	99fc1800 	brald	r15, r3
2001f480:	80000000 	or	r0, r0, r0
				i++;
2001f484:	e873001c 	lwi	r3, r19, 28
2001f488:	30630001 	addik	r3, r3, 1
2001f48c:	f873001c 	swi	r3, r19, 28
				goto l_get_pred_x2;
2001f490:	b800001c 	bri	28		// 2001f4ac
			} else {
				_FSM_state = my_state_get_pred_x1;
2001f494:	b0000000 	imm	0
2001f498:	e87403ac 	lwi	r3, r20, 940
2001f49c:	30800009 	addik	r4, r0, 9
2001f4a0:	f8830000 	swi	r4, r3, 0
				goto finished;
2001f4a4:	b8000be0 	bri	3040		// 20020084

2001f4a8 <$L471>:
		case my_state_get_pred_x:
			goto l_get_pred_x;
		case my_state_get_pred_x1:
			goto l_get_pred_x1;
		case my_state_get_pred_x2:
			goto l_get_pred_x2;
2001f4a8:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_pred_x1;
				goto finished;
			}
		l_get_pred_x2:
			if (isSchedulable_get_pred()) {
2001f4ac:	b0000000 	imm	0
2001f4b0:	e894041c 	lwi	r4, r20, 1052
2001f4b4:	99fc2000 	brald	r15, r4
2001f4b8:	80000000 	or	r0, r0, r0
2001f4bc:	bc030044 	beqi	r3, 68		// 2001f500
				int stop = 0;
2001f4c0:	f813004c 	swi	r0, r19, 76
				if (stop != 0) {
2001f4c4:	e873004c 	lwi	r3, r19, 76
2001f4c8:	bc030018 	beqi	r3, 24		// 2001f4e0
					_FSM_state = my_state_get_pred_x2;
2001f4cc:	b0000000 	imm	0
2001f4d0:	e87403ac 	lwi	r3, r20, 940
2001f4d4:	3080000a 	addik	r4, r0, 10
2001f4d8:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f4dc:	b8000ba8 	bri	2984		// 20020084
				}
				get_pred();
2001f4e0:	b0000000 	imm	0
2001f4e4:	e8740420 	lwi	r3, r20, 1056
2001f4e8:	99fc1800 	brald	r15, r3
2001f4ec:	80000000 	or	r0, r0, r0
				i++;
2001f4f0:	e873001c 	lwi	r3, r19, 28
2001f4f4:	30630001 	addik	r3, r3, 1
2001f4f8:	f873001c 	swi	r3, r19, 28
				goto l_do_pred_x;
2001f4fc:	b800fbd0 	bri	-1072		// 2001f0cc
			} else {
				_FSM_state = my_state_get_pred_x2;
2001f500:	b0000000 	imm	0
2001f504:	e87403ac 	lwi	r3, r20, 940
2001f508:	3080000a 	addik	r4, r0, 10
2001f50c:	f8830000 	swi	r4, r3, 0
				goto finished;
2001f510:	b8000b74 	bri	2932		// 20020084

2001f514 <$L472>:
		case my_state_get_pred_x1:
			goto l_get_pred_x1;
		case my_state_get_pred_x2:
			goto l_get_pred_x2;
		case my_state_get_pred_y:
			goto l_get_pred_y;
2001f514:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_pred_x2;
				goto finished;
			}
		l_get_pred_y:
			if (isSchedulable_get_pred()) {
2001f518:	b0000000 	imm	0
2001f51c:	e894041c 	lwi	r4, r20, 1052
2001f520:	99fc2000 	brald	r15, r4
2001f524:	80000000 	or	r0, r0, r0
2001f528:	bc030044 	beqi	r3, 68		// 2001f56c
				int stop = 0;
2001f52c:	f8130070 	swi	r0, r19, 112
				if (stop != 0) {
2001f530:	e8730070 	lwi	r3, r19, 112
2001f534:	bc030018 	beqi	r3, 24		// 2001f54c
					_FSM_state = my_state_get_pred_y;
2001f538:	b0000000 	imm	0
2001f53c:	e87403ac 	lwi	r3, r20, 940
2001f540:	3080000b 	addik	r4, r0, 11
2001f544:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f548:	b8000b3c 	bri	2876		// 20020084
				}
				get_pred();
2001f54c:	b0000000 	imm	0
2001f550:	e8740420 	lwi	r3, r20, 1056
2001f554:	99fc1800 	brald	r15, r3
2001f558:	80000000 	or	r0, r0, r0
				i++;
2001f55c:	e873001c 	lwi	r3, r19, 28
2001f560:	30630001 	addik	r3, r3, 1
2001f564:	f873001c 	swi	r3, r19, 28
				goto l_get_pred_y1;
2001f568:	b800001c 	bri	28		// 2001f584
			} else {
				_FSM_state = my_state_get_pred_y;
2001f56c:	b0000000 	imm	0
2001f570:	e87403ac 	lwi	r3, r20, 940
2001f574:	3080000b 	addik	r4, r0, 11
2001f578:	f8830000 	swi	r4, r3, 0
				goto finished;
2001f57c:	b8000b08 	bri	2824		// 20020084

2001f580 <$L473>:
		case my_state_get_pred_x2:
			goto l_get_pred_x2;
		case my_state_get_pred_y:
			goto l_get_pred_y;
		case my_state_get_pred_y1:
			goto l_get_pred_y1;
2001f580:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_pred_y;
				goto finished;
			}
		l_get_pred_y1:
			if (isSchedulable_get_pred()) {
2001f584:	b0000000 	imm	0
2001f588:	e894041c 	lwi	r4, r20, 1052
2001f58c:	99fc2000 	brald	r15, r4
2001f590:	80000000 	or	r0, r0, r0
2001f594:	bc030044 	beqi	r3, 68		// 2001f5d8
				int stop = 0;
2001f598:	f8130074 	swi	r0, r19, 116
				if (stop != 0) {
2001f59c:	e8730074 	lwi	r3, r19, 116
2001f5a0:	bc030018 	beqi	r3, 24		// 2001f5b8
					_FSM_state = my_state_get_pred_y1;
2001f5a4:	b0000000 	imm	0
2001f5a8:	e87403ac 	lwi	r3, r20, 940
2001f5ac:	3080000c 	addik	r4, r0, 12
2001f5b0:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f5b4:	b8000ad0 	bri	2768		// 20020084
				}
				get_pred();
2001f5b8:	b0000000 	imm	0
2001f5bc:	e8740420 	lwi	r3, r20, 1056
2001f5c0:	99fc1800 	brald	r15, r3
2001f5c4:	80000000 	or	r0, r0, r0
				i++;
2001f5c8:	e873001c 	lwi	r3, r19, 28
2001f5cc:	30630001 	addik	r3, r3, 1
2001f5d0:	f873001c 	swi	r3, r19, 28
				goto l_get_pred_y2;
2001f5d4:	b800001c 	bri	28		// 2001f5f0
			} else {
				_FSM_state = my_state_get_pred_y1;
2001f5d8:	b0000000 	imm	0
2001f5dc:	e87403ac 	lwi	r3, r20, 940
2001f5e0:	3080000c 	addik	r4, r0, 12
2001f5e4:	f8830000 	swi	r4, r3, 0
				goto finished;
2001f5e8:	b8000a9c 	bri	2716		// 20020084

2001f5ec <$L474>:
		case my_state_get_pred_y:
			goto l_get_pred_y;
		case my_state_get_pred_y1:
			goto l_get_pred_y1;
		case my_state_get_pred_y2:
			goto l_get_pred_y2;
2001f5ec:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_pred_y1;
				goto finished;
			}
		l_get_pred_y2:
			if (isSchedulable_get_pred()) {
2001f5f0:	b0000000 	imm	0
2001f5f4:	e894041c 	lwi	r4, r20, 1052
2001f5f8:	99fc2000 	brald	r15, r4
2001f5fc:	80000000 	or	r0, r0, r0
2001f600:	bc030044 	beqi	r3, 68		// 2001f644
				int stop = 0;
2001f604:	f8130078 	swi	r0, r19, 120
				if (stop != 0) {
2001f608:	e8730078 	lwi	r3, r19, 120
2001f60c:	bc030018 	beqi	r3, 24		// 2001f624
					_FSM_state = my_state_get_pred_y2;
2001f610:	b0000000 	imm	0
2001f614:	e87403ac 	lwi	r3, r20, 940
2001f618:	3080000d 	addik	r4, r0, 13
2001f61c:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f620:	b8000a64 	bri	2660		// 20020084
				}
				get_pred();
2001f624:	b0000000 	imm	0
2001f628:	e8740420 	lwi	r3, r20, 1056
2001f62c:	99fc1800 	brald	r15, r3
2001f630:	80000000 	or	r0, r0, r0
				i++;
2001f634:	e873001c 	lwi	r3, r19, 28
2001f638:	30630001 	addik	r3, r3, 1
2001f63c:	f873001c 	swi	r3, r19, 28
				goto l_do_pred_y;
2001f640:	b800faf8 	bri	-1288		// 2001f138
			} else {
				_FSM_state = my_state_get_pred_y2;
2001f644:	b0000000 	imm	0
2001f648:	e87403ac 	lwi	r3, r20, 940
2001f64c:	3080000d 	addik	r4, r0, 13
2001f650:	f8830000 	swi	r4, r3, 0
				goto finished;
2001f654:	b8000a30 	bri	2608		// 20020084

2001f658 <$L475>:
		case my_state_get_pred_y1:
			goto l_get_pred_y1;
		case my_state_get_pred_y2:
			goto l_get_pred_y2;
		case my_state_get_res_x:
			goto l_get_res_x;
2001f658:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_pred_y2;
				goto finished;
			}
		l_get_res_x:
			if (isSchedulable_get_residual_init()) {
2001f65c:	b0000000 	imm	0
2001f660:	e8940434 	lwi	r4, r20, 1076
2001f664:	99fc2000 	brald	r15, r4
2001f668:	80000000 	or	r0, r0, r0
2001f66c:	bc030044 	beqi	r3, 68		// 2001f6b0
				int stop = 0;
2001f670:	f8130058 	swi	r0, r19, 88
				if (stop != 0) {
2001f674:	e8730058 	lwi	r3, r19, 88
2001f678:	bc030018 	beqi	r3, 24		// 2001f690
					_FSM_state = my_state_get_res_x;
2001f67c:	b0000000 	imm	0
2001f680:	e87403ac 	lwi	r3, r20, 940
2001f684:	3080000e 	addik	r4, r0, 14
2001f688:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f68c:	b80009f8 	bri	2552		// 20020084
				}
				get_residual_init();
2001f690:	b0000000 	imm	0
2001f694:	e8740438 	lwi	r3, r20, 1080
2001f698:	99fc1800 	brald	r15, r3
2001f69c:	80000000 	or	r0, r0, r0
				i++;
2001f6a0:	e873001c 	lwi	r3, r19, 28
2001f6a4:	30630001 	addik	r3, r3, 1
2001f6a8:	f873001c 	swi	r3, r19, 28
				goto l_get_res_x_a;
2001f6ac:	b800001c 	bri	28		// 2001f6c8
			} else {
				_FSM_state = my_state_get_res_x;
2001f6b0:	b0000000 	imm	0
2001f6b4:	e87403ac 	lwi	r3, r20, 940
2001f6b8:	3080000e 	addik	r4, r0, 14
2001f6bc:	f8830000 	swi	r4, r3, 0
				goto finished;
2001f6c0:	b80009c4 	bri	2500		// 20020084

2001f6c4 <$L476>:
		case my_state_get_pred_y2:
			goto l_get_pred_y2;
		case my_state_get_res_x:
			goto l_get_res_x;
		case my_state_get_res_x_a:
			goto l_get_res_x_a;
2001f6c4:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_x;
				goto finished;
			}
		l_get_res_x_a:
			if (isSchedulable_get_residual_shift()) {
2001f6c8:	b0000000 	imm	0
2001f6cc:	e894043c 	lwi	r4, r20, 1084
2001f6d0:	99fc2000 	brald	r15, r4
2001f6d4:	80000000 	or	r0, r0, r0
2001f6d8:	bc030044 	beqi	r3, 68		// 2001f71c
				int stop = 0;
2001f6dc:	f813005c 	swi	r0, r19, 92
				if (stop != 0) {
2001f6e0:	e873005c 	lwi	r3, r19, 92
2001f6e4:	bc030018 	beqi	r3, 24		// 2001f6fc
					_FSM_state = my_state_get_res_x_a;
2001f6e8:	b0000000 	imm	0
2001f6ec:	e87403ac 	lwi	r3, r20, 940
2001f6f0:	3080000f 	addik	r4, r0, 15
2001f6f4:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f6f8:	b800098c 	bri	2444		// 20020084
				}
				get_residual_shift();
2001f6fc:	b0000000 	imm	0
2001f700:	e8740440 	lwi	r3, r20, 1088
2001f704:	99fc1800 	brald	r15, r3
2001f708:	80000000 	or	r0, r0, r0
				i++;
2001f70c:	e873001c 	lwi	r3, r19, 28
2001f710:	30630001 	addik	r3, r3, 1
2001f714:	f873001c 	swi	r3, r19, 28
				goto l_get_res_x_b;
2001f718:	b800001c 	bri	28		// 2001f734
			} else {
				_FSM_state = my_state_get_res_x_a;
2001f71c:	b0000000 	imm	0
2001f720:	e87403ac 	lwi	r3, r20, 940
2001f724:	3080000f 	addik	r4, r0, 15
2001f728:	f8830000 	swi	r4, r3, 0
				goto finished;
2001f72c:	b8000958 	bri	2392		// 20020084

2001f730 <$L477>:
		case my_state_get_res_x:
			goto l_get_res_x;
		case my_state_get_res_x_a:
			goto l_get_res_x_a;
		case my_state_get_res_x_b:
			goto l_get_res_x_b;
2001f730:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_x_a;
				goto finished;
			}
		l_get_res_x_b:
			if (numTokens_MVIN - index_MVIN >= 1 && isSchedulable_get_residual_adjust()) {
2001f734:	b0000000 	imm	0
2001f738:	e8740334 	lwi	r3, r20, 820
2001f73c:	e8830000 	lwi	r4, r3, 0
2001f740:	b0000000 	imm	0
2001f744:	e8740330 	lwi	r3, r20, 816
2001f748:	e8630000 	lwi	r3, r3, 0
2001f74c:	88641800 	xor	r3, r4, r3
2001f750:	bc030058 	beqi	r3, 88		// 2001f7a8
2001f754:	b0000000 	imm	0
2001f758:	e8940444 	lwi	r4, r20, 1092
2001f75c:	99fc2000 	brald	r15, r4
2001f760:	80000000 	or	r0, r0, r0
2001f764:	bc030044 	beqi	r3, 68		// 2001f7a8
				int stop = 0;
2001f768:	f8130060 	swi	r0, r19, 96
				if (stop != 0) {
2001f76c:	e8730060 	lwi	r3, r19, 96
2001f770:	bc030018 	beqi	r3, 24		// 2001f788
					_FSM_state = my_state_get_res_x_b;
2001f774:	b0000000 	imm	0
2001f778:	e87403ac 	lwi	r3, r20, 940
2001f77c:	30800010 	addik	r4, r0, 16	// 10 <_vector_interrupt>
2001f780:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f784:	b8000900 	bri	2304		// 20020084
				}
				get_residual_adjust();
2001f788:	b0000000 	imm	0
2001f78c:	e8740448 	lwi	r3, r20, 1096
2001f790:	99fc1800 	brald	r15, r3
2001f794:	80000000 	or	r0, r0, r0
				i++;
2001f798:	e873001c 	lwi	r3, r19, 28
2001f79c:	30630001 	addik	r3, r3, 1
2001f7a0:	f873001c 	swi	r3, r19, 28
				goto l_get_res_x_c;
2001f7a4:	b800001c 	bri	28		// 2001f7c0
			} else {
				_FSM_state = my_state_get_res_x_b;
2001f7a8:	b0000000 	imm	0
2001f7ac:	e87403ac 	lwi	r3, r20, 940
2001f7b0:	30800010 	addik	r4, r0, 16	// 10 <_vector_interrupt>
2001f7b4:	f8830000 	swi	r4, r3, 0
				goto finished;
2001f7b8:	b80008cc 	bri	2252		// 20020084

2001f7bc <$L478>:
		case my_state_get_res_x_a:
			goto l_get_res_x_a;
		case my_state_get_res_x_b:
			goto l_get_res_x_b;
		case my_state_get_res_x_c:
			goto l_get_res_x_c;
2001f7bc:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_x_b;
				goto finished;
			}
		l_get_res_x_c:
			if (isSchedulable_get_residual_calc()) {
2001f7c0:	b0000000 	imm	0
2001f7c4:	e894044c 	lwi	r4, r20, 1100
2001f7c8:	99fc2000 	brald	r15, r4
2001f7cc:	80000000 	or	r0, r0, r0
2001f7d0:	bc030044 	beqi	r3, 68		// 2001f814
				int stop = 0;
2001f7d4:	f8130064 	swi	r0, r19, 100
				if (stop != 0) {
2001f7d8:	e8730064 	lwi	r3, r19, 100
2001f7dc:	bc030018 	beqi	r3, 24		// 2001f7f4
					_FSM_state = my_state_get_res_x_c;
2001f7e0:	b0000000 	imm	0
2001f7e4:	e87403ac 	lwi	r3, r20, 940
2001f7e8:	30800011 	addik	r4, r0, 17
2001f7ec:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f7f0:	b8000894 	bri	2196		// 20020084
				}
				get_residual_calc();
2001f7f4:	b0000000 	imm	0
2001f7f8:	e8740450 	lwi	r3, r20, 1104
2001f7fc:	99fc1800 	brald	r15, r3
2001f800:	80000000 	or	r0, r0, r0
				i++;
2001f804:	e873001c 	lwi	r3, r19, 28
2001f808:	30630001 	addik	r3, r3, 1
2001f80c:	f873001c 	swi	r3, r19, 28
				goto l_get_res_x_d;
2001f810:	b800001c 	bri	28		// 2001f82c
			} else {
				_FSM_state = my_state_get_res_x_c;
2001f814:	b0000000 	imm	0
2001f818:	e87403ac 	lwi	r3, r20, 940
2001f81c:	30800011 	addik	r4, r0, 17
2001f820:	f8830000 	swi	r4, r3, 0
				goto finished;
2001f824:	b8000860 	bri	2144		// 20020084

2001f828 <$L479>:
		case my_state_get_res_x_b:
			goto l_get_res_x_b;
		case my_state_get_res_x_c:
			goto l_get_res_x_c;
		case my_state_get_res_x_d:
			goto l_get_res_x_d;
2001f828:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_x_c;
				goto finished;
			}
		l_get_res_x_d:
			if (isSchedulable_get_residual_clip()) {
2001f82c:	b0000000 	imm	0
2001f830:	e8940454 	lwi	r4, r20, 1108
2001f834:	99fc2000 	brald	r15, r4
2001f838:	80000000 	or	r0, r0, r0
2001f83c:	bc030044 	beqi	r3, 68		// 2001f880
				int stop = 0;
2001f840:	f8130068 	swi	r0, r19, 104
				if (stop != 0) {
2001f844:	e8730068 	lwi	r3, r19, 104
2001f848:	bc030018 	beqi	r3, 24		// 2001f860
					_FSM_state = my_state_get_res_x_d;
2001f84c:	b0000000 	imm	0
2001f850:	e87403ac 	lwi	r3, r20, 940
2001f854:	30800012 	addik	r4, r0, 18
2001f858:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f85c:	b8000828 	bri	2088		// 20020084
				}
				get_residual_clip();
2001f860:	b0000000 	imm	0
2001f864:	e8740458 	lwi	r3, r20, 1112
2001f868:	99fc1800 	brald	r15, r3
2001f86c:	80000000 	or	r0, r0, r0
				i++;
2001f870:	e873001c 	lwi	r3, r19, 28
2001f874:	30630001 	addik	r3, r3, 1
2001f878:	f873001c 	swi	r3, r19, 28
				goto l_get_res_x_e;
2001f87c:	b800001c 	bri	28		// 2001f898
			} else {
				_FSM_state = my_state_get_res_x_d;
2001f880:	b0000000 	imm	0
2001f884:	e87403ac 	lwi	r3, r20, 940
2001f888:	30800012 	addik	r4, r0, 18
2001f88c:	f8830000 	swi	r4, r3, 0
				goto finished;
2001f890:	b80007f4 	bri	2036		// 20020084

2001f894 <$L480>:
		case my_state_get_res_x_c:
			goto l_get_res_x_c;
		case my_state_get_res_x_d:
			goto l_get_res_x_d;
		case my_state_get_res_x_e:
			goto l_get_res_x_e;
2001f894:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_x_d;
				goto finished;
			}
		l_get_res_x_e:
			if (isSchedulable_get_residual_final()) {
2001f898:	b0000000 	imm	0
2001f89c:	e894045c 	lwi	r4, r20, 1116
2001f8a0:	99fc2000 	brald	r15, r4
2001f8a4:	80000000 	or	r0, r0, r0
2001f8a8:	bc030044 	beqi	r3, 68		// 2001f8ec
				int stop = 0;
2001f8ac:	f813006c 	swi	r0, r19, 108
				if (stop != 0) {
2001f8b0:	e873006c 	lwi	r3, r19, 108
2001f8b4:	bc030018 	beqi	r3, 24		// 2001f8cc
					_FSM_state = my_state_get_res_x_e;
2001f8b8:	b0000000 	imm	0
2001f8bc:	e87403ac 	lwi	r3, r20, 940
2001f8c0:	30800013 	addik	r4, r0, 19
2001f8c4:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f8c8:	b80007bc 	bri	1980		// 20020084
				}
				get_residual_final();
2001f8cc:	b0000000 	imm	0
2001f8d0:	e8740460 	lwi	r3, r20, 1120
2001f8d4:	99fc1800 	brald	r15, r3
2001f8d8:	80000000 	or	r0, r0, r0
				i++;
2001f8dc:	e873001c 	lwi	r3, r19, 28
2001f8e0:	30630001 	addik	r3, r3, 1
2001f8e4:	f873001c 	swi	r3, r19, 28
				goto l_get_pred_y;
2001f8e8:	b800fc30 	bri	-976		// 2001f518
			} else {
				_FSM_state = my_state_get_res_x_e;
2001f8ec:	b0000000 	imm	0
2001f8f0:	e87403ac 	lwi	r3, r20, 940
2001f8f4:	30800013 	addik	r4, r0, 19
2001f8f8:	f8830000 	swi	r4, r3, 0
				goto finished;
2001f8fc:	b8000788 	bri	1928		// 20020084

2001f900 <$L481>:
		case my_state_get_res_x_d:
			goto l_get_res_x_d;
		case my_state_get_res_x_e:
			goto l_get_res_x_e;
		case my_state_get_res_y:
			goto l_get_res_y;
2001f900:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_x_e;
				goto finished;
			}
		l_get_res_y:
			if (isSchedulable_get_residual_init()) {
2001f904:	b0000000 	imm	0
2001f908:	e8940434 	lwi	r4, r20, 1076
2001f90c:	99fc2000 	brald	r15, r4
2001f910:	80000000 	or	r0, r0, r0
2001f914:	bc030044 	beqi	r3, 68		// 2001f958
				int stop = 0;
2001f918:	f8130084 	swi	r0, r19, 132
				if (stop != 0) {
2001f91c:	e8730084 	lwi	r3, r19, 132
2001f920:	bc030018 	beqi	r3, 24		// 2001f938
					_FSM_state = my_state_get_res_y;
2001f924:	b0000000 	imm	0
2001f928:	e87403ac 	lwi	r3, r20, 940
2001f92c:	30800014 	addik	r4, r0, 20
2001f930:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f934:	b8000750 	bri	1872		// 20020084
				}
				get_residual_init();
2001f938:	b0000000 	imm	0
2001f93c:	e8740438 	lwi	r3, r20, 1080
2001f940:	99fc1800 	brald	r15, r3
2001f944:	80000000 	or	r0, r0, r0
				i++;
2001f948:	e873001c 	lwi	r3, r19, 28
2001f94c:	30630001 	addik	r3, r3, 1
2001f950:	f873001c 	swi	r3, r19, 28
				goto l_get_res_y_a;
2001f954:	b800001c 	bri	28		// 2001f970
			} else {
				_FSM_state = my_state_get_res_y;
2001f958:	b0000000 	imm	0
2001f95c:	e87403ac 	lwi	r3, r20, 940
2001f960:	30800014 	addik	r4, r0, 20
2001f964:	f8830000 	swi	r4, r3, 0
				goto finished;
2001f968:	b800071c 	bri	1820		// 20020084

2001f96c <$L482>:
		case my_state_get_res_x_e:
			goto l_get_res_x_e;
		case my_state_get_res_y:
			goto l_get_res_y;
		case my_state_get_res_y_a:
			goto l_get_res_y_a;
2001f96c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_y;
				goto finished;
			}
		l_get_res_y_a:
			if (isSchedulable_get_residual_shift()) {
2001f970:	b0000000 	imm	0
2001f974:	e894043c 	lwi	r4, r20, 1084
2001f978:	99fc2000 	brald	r15, r4
2001f97c:	80000000 	or	r0, r0, r0
2001f980:	bc030044 	beqi	r3, 68		// 2001f9c4
				int stop = 0;
2001f984:	f8130088 	swi	r0, r19, 136
				if (stop != 0) {
2001f988:	e8730088 	lwi	r3, r19, 136
2001f98c:	bc030018 	beqi	r3, 24		// 2001f9a4
					_FSM_state = my_state_get_res_y_a;
2001f990:	b0000000 	imm	0
2001f994:	e87403ac 	lwi	r3, r20, 940
2001f998:	30800015 	addik	r4, r0, 21
2001f99c:	f8830000 	swi	r4, r3, 0
					goto finished;
2001f9a0:	b80006e4 	bri	1764		// 20020084
				}
				get_residual_shift();
2001f9a4:	b0000000 	imm	0
2001f9a8:	e8740440 	lwi	r3, r20, 1088
2001f9ac:	99fc1800 	brald	r15, r3
2001f9b0:	80000000 	or	r0, r0, r0
				i++;
2001f9b4:	e873001c 	lwi	r3, r19, 28
2001f9b8:	30630001 	addik	r3, r3, 1
2001f9bc:	f873001c 	swi	r3, r19, 28
				goto l_get_res_y_b;
2001f9c0:	b800001c 	bri	28		// 2001f9dc
			} else {
				_FSM_state = my_state_get_res_y_a;
2001f9c4:	b0000000 	imm	0
2001f9c8:	e87403ac 	lwi	r3, r20, 940
2001f9cc:	30800015 	addik	r4, r0, 21
2001f9d0:	f8830000 	swi	r4, r3, 0
				goto finished;
2001f9d4:	b80006b0 	bri	1712		// 20020084

2001f9d8 <$L483>:
		case my_state_get_res_y:
			goto l_get_res_y;
		case my_state_get_res_y_a:
			goto l_get_res_y_a;
		case my_state_get_res_y_b:
			goto l_get_res_y_b;
2001f9d8:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_y_a;
				goto finished;
			}
		l_get_res_y_b:
			if (numTokens_MVIN - index_MVIN >= 1 && isSchedulable_get_residual_adjust()) {
2001f9dc:	b0000000 	imm	0
2001f9e0:	e8740334 	lwi	r3, r20, 820
2001f9e4:	e8830000 	lwi	r4, r3, 0
2001f9e8:	b0000000 	imm	0
2001f9ec:	e8740330 	lwi	r3, r20, 816
2001f9f0:	e8630000 	lwi	r3, r3, 0
2001f9f4:	88641800 	xor	r3, r4, r3
2001f9f8:	bc030058 	beqi	r3, 88		// 2001fa50
2001f9fc:	b0000000 	imm	0
2001fa00:	e8940444 	lwi	r4, r20, 1092
2001fa04:	99fc2000 	brald	r15, r4
2001fa08:	80000000 	or	r0, r0, r0
2001fa0c:	bc030044 	beqi	r3, 68		// 2001fa50
				int stop = 0;
2001fa10:	f813008c 	swi	r0, r19, 140
				if (stop != 0) {
2001fa14:	e873008c 	lwi	r3, r19, 140
2001fa18:	bc030018 	beqi	r3, 24		// 2001fa30
					_FSM_state = my_state_get_res_y_b;
2001fa1c:	b0000000 	imm	0
2001fa20:	e87403ac 	lwi	r3, r20, 940
2001fa24:	30800016 	addik	r4, r0, 22
2001fa28:	f8830000 	swi	r4, r3, 0
					goto finished;
2001fa2c:	b8000658 	bri	1624		// 20020084
				}
				get_residual_adjust();
2001fa30:	b0000000 	imm	0
2001fa34:	e8740448 	lwi	r3, r20, 1096
2001fa38:	99fc1800 	brald	r15, r3
2001fa3c:	80000000 	or	r0, r0, r0
				i++;
2001fa40:	e873001c 	lwi	r3, r19, 28
2001fa44:	30630001 	addik	r3, r3, 1
2001fa48:	f873001c 	swi	r3, r19, 28
				goto l_get_res_y_c;
2001fa4c:	b800001c 	bri	28		// 2001fa68
			} else {
				_FSM_state = my_state_get_res_y_b;
2001fa50:	b0000000 	imm	0
2001fa54:	e87403ac 	lwi	r3, r20, 940
2001fa58:	30800016 	addik	r4, r0, 22
2001fa5c:	f8830000 	swi	r4, r3, 0
				goto finished;
2001fa60:	b8000624 	bri	1572		// 20020084

2001fa64 <$L484>:
		case my_state_get_res_y_a:
			goto l_get_res_y_a;
		case my_state_get_res_y_b:
			goto l_get_res_y_b;
		case my_state_get_res_y_c:
			goto l_get_res_y_c;
2001fa64:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_y_b;
				goto finished;
			}
		l_get_res_y_c:
			if (isSchedulable_get_residual_calc()) {
2001fa68:	b0000000 	imm	0
2001fa6c:	e894044c 	lwi	r4, r20, 1100
2001fa70:	99fc2000 	brald	r15, r4
2001fa74:	80000000 	or	r0, r0, r0
2001fa78:	bc030044 	beqi	r3, 68		// 2001fabc
				int stop = 0;
2001fa7c:	f8130090 	swi	r0, r19, 144
				if (stop != 0) {
2001fa80:	e8730090 	lwi	r3, r19, 144
2001fa84:	bc030018 	beqi	r3, 24		// 2001fa9c
					_FSM_state = my_state_get_res_y_c;
2001fa88:	b0000000 	imm	0
2001fa8c:	e87403ac 	lwi	r3, r20, 940
2001fa90:	30800017 	addik	r4, r0, 23
2001fa94:	f8830000 	swi	r4, r3, 0
					goto finished;
2001fa98:	b80005ec 	bri	1516		// 20020084
				}
				get_residual_calc();
2001fa9c:	b0000000 	imm	0
2001faa0:	e8740450 	lwi	r3, r20, 1104
2001faa4:	99fc1800 	brald	r15, r3
2001faa8:	80000000 	or	r0, r0, r0
				i++;
2001faac:	e873001c 	lwi	r3, r19, 28
2001fab0:	30630001 	addik	r3, r3, 1
2001fab4:	f873001c 	swi	r3, r19, 28
				goto l_get_res_y_d;
2001fab8:	b800001c 	bri	28		// 2001fad4
			} else {
				_FSM_state = my_state_get_res_y_c;
2001fabc:	b0000000 	imm	0
2001fac0:	e87403ac 	lwi	r3, r20, 940
2001fac4:	30800017 	addik	r4, r0, 23
2001fac8:	f8830000 	swi	r4, r3, 0
				goto finished;
2001facc:	b80005b8 	bri	1464		// 20020084

2001fad0 <$L485>:
		case my_state_get_res_y_b:
			goto l_get_res_y_b;
		case my_state_get_res_y_c:
			goto l_get_res_y_c;
		case my_state_get_res_y_d:
			goto l_get_res_y_d;
2001fad0:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_y_c;
				goto finished;
			}
		l_get_res_y_d:
			if (isSchedulable_get_residual_clip()) {
2001fad4:	b0000000 	imm	0
2001fad8:	e8940454 	lwi	r4, r20, 1108
2001fadc:	99fc2000 	brald	r15, r4
2001fae0:	80000000 	or	r0, r0, r0
2001fae4:	bc030044 	beqi	r3, 68		// 2001fb28
				int stop = 0;
2001fae8:	f8130094 	swi	r0, r19, 148
				if (stop != 0) {
2001faec:	e8730094 	lwi	r3, r19, 148
2001faf0:	bc030018 	beqi	r3, 24		// 2001fb08
					_FSM_state = my_state_get_res_y_d;
2001faf4:	b0000000 	imm	0
2001faf8:	e87403ac 	lwi	r3, r20, 940
2001fafc:	30800018 	addik	r4, r0, 24
2001fb00:	f8830000 	swi	r4, r3, 0
					goto finished;
2001fb04:	b8000580 	bri	1408		// 20020084
				}
				get_residual_clip();
2001fb08:	b0000000 	imm	0
2001fb0c:	e8740458 	lwi	r3, r20, 1112
2001fb10:	99fc1800 	brald	r15, r3
2001fb14:	80000000 	or	r0, r0, r0
				i++;
2001fb18:	e873001c 	lwi	r3, r19, 28
2001fb1c:	30630001 	addik	r3, r3, 1
2001fb20:	f873001c 	swi	r3, r19, 28
				goto l_get_res_y_e;
2001fb24:	b800001c 	bri	28		// 2001fb40
			} else {
				_FSM_state = my_state_get_res_y_d;
2001fb28:	b0000000 	imm	0
2001fb2c:	e87403ac 	lwi	r3, r20, 940
2001fb30:	30800018 	addik	r4, r0, 24
2001fb34:	f8830000 	swi	r4, r3, 0
				goto finished;
2001fb38:	b800054c 	bri	1356		// 20020084

2001fb3c <$L486>:
		case my_state_get_res_y_c:
			goto l_get_res_y_c;
		case my_state_get_res_y_d:
			goto l_get_res_y_d;
		case my_state_get_res_y_e:
			goto l_get_res_y_e;
2001fb3c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_y_d;
				goto finished;
			}
		l_get_res_y_e:
			if (isSchedulable_get_residual_final()) {
2001fb40:	b0000000 	imm	0
2001fb44:	e894045c 	lwi	r4, r20, 1116
2001fb48:	99fc2000 	brald	r15, r4
2001fb4c:	80000000 	or	r0, r0, r0
2001fb50:	bc030044 	beqi	r3, 68		// 2001fb94
				int stop = 0;
2001fb54:	f8130098 	swi	r0, r19, 152
				if (stop != 0) {
2001fb58:	e8730098 	lwi	r3, r19, 152
2001fb5c:	bc030018 	beqi	r3, 24		// 2001fb74
					_FSM_state = my_state_get_res_y_e;
2001fb60:	b0000000 	imm	0
2001fb64:	e87403ac 	lwi	r3, r20, 940
2001fb68:	30800019 	addik	r4, r0, 25
2001fb6c:	f8830000 	swi	r4, r3, 0
					goto finished;
2001fb70:	b8000514 	bri	1300		// 20020084
				}
				get_residual_final();
2001fb74:	b0000000 	imm	0
2001fb78:	e8740460 	lwi	r3, r20, 1120
2001fb7c:	99fc1800 	brald	r15, r3
2001fb80:	80000000 	or	r0, r0, r0
				i++;
2001fb84:	e873001c 	lwi	r3, r19, 28
2001fb88:	30630001 	addik	r3, r3, 1
2001fb8c:	f873001c 	swi	r3, r19, 28
				goto l_write;
2001fb90:	b80002a8 	bri	680		// 2001fe38
			} else {
				_FSM_state = my_state_get_res_y_e;
2001fb94:	b0000000 	imm	0
2001fb98:	e87403ac 	lwi	r3, r20, 940
2001fb9c:	30800019 	addik	r4, r0, 25
2001fba0:	f8830000 	swi	r4, r3, 0
				goto finished;
2001fba4:	b80004e0 	bri	1248		// 20020084

2001fba8 <$L487>:
		case my_state_get_res_y_d:
			goto l_get_res_y_d;
		case my_state_get_res_y_e:
			goto l_get_res_y_e;
		case my_state_geth:
			goto l_geth;
2001fba8:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_get_res_y_e;
				goto finished;
			}
		l_geth:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_geth()) {
2001fbac:	b0000000 	imm	0
2001fbb0:	e874032c 	lwi	r3, r20, 812
2001fbb4:	e8830000 	lwi	r4, r3, 0
2001fbb8:	b0000000 	imm	0
2001fbbc:	e8740328 	lwi	r3, r20, 808
2001fbc0:	e8630000 	lwi	r3, r3, 0
2001fbc4:	88641800 	xor	r3, r4, r3
2001fbc8:	bc030058 	beqi	r3, 88		// 2001fc20
2001fbcc:	b0000000 	imm	0
2001fbd0:	e89403f4 	lwi	r4, r20, 1012
2001fbd4:	99fc2000 	brald	r15, r4
2001fbd8:	80000000 	or	r0, r0, r0
2001fbdc:	bc030044 	beqi	r3, 68		// 2001fc20
				int stop = 0;
2001fbe0:	f813009c 	swi	r0, r19, 156
				if (stop != 0) {
2001fbe4:	e873009c 	lwi	r3, r19, 156
2001fbe8:	bc030018 	beqi	r3, 24		// 2001fc00
					_FSM_state = my_state_geth;
2001fbec:	b0000000 	imm	0
2001fbf0:	e87403ac 	lwi	r3, r20, 940
2001fbf4:	3080001a 	addik	r4, r0, 26
2001fbf8:	f8830000 	swi	r4, r3, 0
					goto finished;
2001fbfc:	b8000488 	bri	1160		// 20020084
				}
				geth();
2001fc00:	b0000000 	imm	0
2001fc04:	e87403f8 	lwi	r3, r20, 1016
2001fc08:	99fc1800 	brald	r15, r3
2001fc0c:	80000000 	or	r0, r0, r0
				i++;
2001fc10:	e873001c 	lwi	r3, r19, 28
2001fc14:	30630001 	addik	r3, r3, 1
2001fc18:	f873001c 	swi	r3, r19, 28
				goto l_read;
2001fc1c:	b80000a8 	bri	168		// 2001fcc4
			} else {
				_FSM_state = my_state_geth;
2001fc20:	b0000000 	imm	0
2001fc24:	e87403ac 	lwi	r3, r20, 940
2001fc28:	3080001a 	addik	r4, r0, 26
2001fc2c:	f8830000 	swi	r4, r3, 0
				goto finished;
2001fc30:	b8000454 	bri	1108		// 20020084

2001fc34 <$L488>:
		case my_state_get_res_y_e:
			goto l_get_res_y_e;
		case my_state_geth:
			goto l_geth;
		case my_state_getw:
			goto l_getw;
2001fc34:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_geth;
				goto finished;
			}
		l_getw:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_getw()) {
2001fc38:	b0000000 	imm	0
2001fc3c:	e874032c 	lwi	r3, r20, 812
2001fc40:	e8830000 	lwi	r4, r3, 0
2001fc44:	b0000000 	imm	0
2001fc48:	e8740328 	lwi	r3, r20, 808
2001fc4c:	e8630000 	lwi	r3, r3, 0
2001fc50:	88641800 	xor	r3, r4, r3
2001fc54:	bc030058 	beqi	r3, 88		// 2001fcac
2001fc58:	b0000000 	imm	0
2001fc5c:	e89403ec 	lwi	r4, r20, 1004
2001fc60:	99fc2000 	brald	r15, r4
2001fc64:	80000000 	or	r0, r0, r0
2001fc68:	bc030044 	beqi	r3, 68		// 2001fcac
				int stop = 0;
2001fc6c:	f81300ac 	swi	r0, r19, 172
				if (stop != 0) {
2001fc70:	e87300ac 	lwi	r3, r19, 172
2001fc74:	bc030018 	beqi	r3, 24		// 2001fc8c
					_FSM_state = my_state_getw;
2001fc78:	b0000000 	imm	0
2001fc7c:	e87403ac 	lwi	r3, r20, 940
2001fc80:	3080001b 	addik	r4, r0, 27
2001fc84:	f8830000 	swi	r4, r3, 0
					goto finished;
2001fc88:	b80003fc 	bri	1020		// 20020084
				}
				getw_replaced();
2001fc8c:	b0000000 	imm	0
2001fc90:	e87403f0 	lwi	r3, r20, 1008
2001fc94:	99fc1800 	brald	r15, r3
2001fc98:	80000000 	or	r0, r0, r0
				i++;
2001fc9c:	e873001c 	lwi	r3, r19, 28
2001fca0:	30630001 	addik	r3, r3, 1
2001fca4:	f873001c 	swi	r3, r19, 28
				goto l_geth;
2001fca8:	b800ff04 	bri	-252		// 2001fbac
			} else {
				_FSM_state = my_state_getw;
2001fcac:	b0000000 	imm	0
2001fcb0:	e87403ac 	lwi	r3, r20, 940
2001fcb4:	3080001b 	addik	r4, r0, 27
2001fcb8:	f8830000 	swi	r4, r3, 0
				goto finished;
2001fcbc:	b80003c8 	bri	968		// 20020084

2001fcc0 <$L489>:
		case my_state_geth:
			goto l_geth;
		case my_state_getw:
			goto l_getw;
		case my_state_read:
			goto l_read;
2001fcc0:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_getw;
				goto finished;
			}
		l_read:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_start()) {
2001fcc4:	b0000000 	imm	0
2001fcc8:	e874032c 	lwi	r3, r20, 812
2001fccc:	e8830000 	lwi	r4, r3, 0
2001fcd0:	b0000000 	imm	0
2001fcd4:	e8740328 	lwi	r3, r20, 808
2001fcd8:	e8630000 	lwi	r3, r3, 0
2001fcdc:	88641800 	xor	r3, r4, r3
2001fce0:	bc030058 	beqi	r3, 88		// 2001fd38
2001fce4:	b0000000 	imm	0
2001fce8:	e89403e4 	lwi	r4, r20, 996
2001fcec:	99fc2000 	brald	r15, r4
2001fcf0:	80000000 	or	r0, r0, r0
2001fcf4:	bc030044 	beqi	r3, 68		// 2001fd38
				int stop = 0;
2001fcf8:	f81300a0 	swi	r0, r19, 160
				if (stop != 0) {
2001fcfc:	e87300a0 	lwi	r3, r19, 160
2001fd00:	bc030018 	beqi	r3, 24		// 2001fd18
					_FSM_state = my_state_read;
2001fd04:	b0000000 	imm	0
2001fd08:	e87403ac 	lwi	r3, r20, 940
2001fd0c:	3080001c 	addik	r4, r0, 28
2001fd10:	f8830000 	swi	r4, r3, 0
					goto finished;
2001fd14:	b8000370 	bri	880		// 20020084
				}
				start();
2001fd18:	b0000000 	imm	0
2001fd1c:	e87403e8 	lwi	r3, r20, 1000
2001fd20:	99fc1800 	brald	r15, r3
2001fd24:	80000000 	or	r0, r0, r0
				i++;
2001fd28:	e873001c 	lwi	r3, r19, 28
2001fd2c:	30630001 	addik	r3, r3, 1
2001fd30:	f873001c 	swi	r3, r19, 28
				goto l_getw;
2001fd34:	b800ff04 	bri	-252		// 2001fc38
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_read_noMotion()) {
2001fd38:	b0000000 	imm	0
2001fd3c:	e874032c 	lwi	r3, r20, 812
2001fd40:	e8830000 	lwi	r4, r3, 0
2001fd44:	b0000000 	imm	0
2001fd48:	e8740328 	lwi	r3, r20, 808
2001fd4c:	e8630000 	lwi	r3, r3, 0
2001fd50:	88641800 	xor	r3, r4, r3
2001fd54:	bc030058 	beqi	r3, 88		// 2001fdac
2001fd58:	b0000000 	imm	0
2001fd5c:	e89403fc 	lwi	r4, r20, 1020
2001fd60:	99fc2000 	brald	r15, r4
2001fd64:	80000000 	or	r0, r0, r0
2001fd68:	bc030044 	beqi	r3, 68		// 2001fdac
				int stop = 0;
2001fd6c:	f81300a4 	swi	r0, r19, 164
				if (stop != 0) {
2001fd70:	e87300a4 	lwi	r3, r19, 164
2001fd74:	bc030018 	beqi	r3, 24		// 2001fd8c
					_FSM_state = my_state_read;
2001fd78:	b0000000 	imm	0
2001fd7c:	e87403ac 	lwi	r3, r20, 940
2001fd80:	3080001c 	addik	r4, r0, 28
2001fd84:	f8830000 	swi	r4, r3, 0
					goto finished;
2001fd88:	b80002fc 	bri	764		// 20020084
				}
				read_noMotion();
2001fd8c:	b0000000 	imm	0
2001fd90:	e8740400 	lwi	r3, r20, 1024
2001fd94:	99fc1800 	brald	r15, r3
2001fd98:	80000000 	or	r0, r0, r0
				i++;
2001fd9c:	e873001c 	lwi	r3, r19, 28
2001fda0:	30630001 	addik	r3, r3, 1
2001fda4:	f873001c 	swi	r3, r19, 28
				goto l_advance;
2001fda8:	b800f1e0 	bri	-3616		// 2001ef88
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_read_motion()) {
2001fdac:	b0000000 	imm	0
2001fdb0:	e874032c 	lwi	r3, r20, 812
2001fdb4:	e8830000 	lwi	r4, r3, 0
2001fdb8:	b0000000 	imm	0
2001fdbc:	e8740328 	lwi	r3, r20, 808
2001fdc0:	e8630000 	lwi	r3, r3, 0
2001fdc4:	88641800 	xor	r3, r4, r3
2001fdc8:	bc030058 	beqi	r3, 88		// 2001fe20
2001fdcc:	b0000000 	imm	0
2001fdd0:	e8940404 	lwi	r4, r20, 1028
2001fdd4:	99fc2000 	brald	r15, r4
2001fdd8:	80000000 	or	r0, r0, r0
2001fddc:	bc030044 	beqi	r3, 68		// 2001fe20
				int stop = 0;
2001fde0:	f81300a8 	swi	r0, r19, 168
				if (stop != 0) {
2001fde4:	e87300a8 	lwi	r3, r19, 168
2001fde8:	bc030018 	beqi	r3, 24		// 2001fe00
					_FSM_state = my_state_read;
2001fdec:	b0000000 	imm	0
2001fdf0:	e87403ac 	lwi	r3, r20, 940
2001fdf4:	3080001c 	addik	r4, r0, 28
2001fdf8:	f8830000 	swi	r4, r3, 0
					goto finished;
2001fdfc:	b8000288 	bri	648		// 20020084
				}
				read_motion();
2001fe00:	b0000000 	imm	0
2001fe04:	e8740408 	lwi	r3, r20, 1032
2001fe08:	99fc1800 	brald	r15, r3
2001fe0c:	80000000 	or	r0, r0, r0
				i++;
2001fe10:	e873001c 	lwi	r3, r19, 28
2001fe14:	30630001 	addik	r3, r3, 1
2001fe18:	f873001c 	swi	r3, r19, 28
				goto l_compute;
2001fe1c:	b800f1d0 	bri	-3632		// 2001efec
			} else {
				_FSM_state = my_state_read;
2001fe20:	b0000000 	imm	0
2001fe24:	e87403ac 	lwi	r3, r20, 940
2001fe28:	3080001c 	addik	r4, r0, 28
2001fe2c:	f8830000 	swi	r4, r3, 0
				goto finished;
2001fe30:	b8000254 	bri	596		// 20020084

2001fe34 <$L490>:
		case my_state_getw:
			goto l_getw;
		case my_state_read:
			goto l_read;
		case my_state_write:
			goto l_write;
2001fe34:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read;
				goto finished;
			}
		l_write:
			if (isSchedulable_write_luma()) {
2001fe38:	b0000000 	imm	0
2001fe3c:	e8940464 	lwi	r4, r20, 1124
2001fe40:	99fc2000 	brald	r15, r4
2001fe44:	80000000 	or	r0, r0, r0
2001fe48:	bc030078 	beqi	r3, 120		// 2001fec0
				int stop = 0;
2001fe4c:	f8130020 	swi	r0, r19, 32
				if (1 > SIZE_MV - index_MV + decoder_parser_mvrecon_MV->read_inds[0]) {
2001fe50:	b0000000 	imm	0
2001fe54:	e8740324 	lwi	r3, r20, 804
2001fe58:	e8630000 	lwi	r3, r3, 0
2001fe5c:	e863000c 	lwi	r3, r3, 12
2001fe60:	e8830000 	lwi	r4, r3, 0
2001fe64:	b0000000 	imm	0
2001fe68:	e8740340 	lwi	r3, r20, 832
2001fe6c:	e8630000 	lwi	r3, r3, 0
2001fe70:	14632000 	rsubk	r3, r3, r4
2001fe74:	a863fe00 	xori	r3, r3, -512
2001fe78:	bc23000c 	bnei	r3, 12		// 2001fe84
					stop = 1;
2001fe7c:	30600001 	addik	r3, r0, 1
2001fe80:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
2001fe84:	e8730020 	lwi	r3, r19, 32
2001fe88:	bc030018 	beqi	r3, 24		// 2001fea0
					_FSM_state = my_state_write;
2001fe8c:	b0000000 	imm	0
2001fe90:	e87403ac 	lwi	r3, r20, 940
2001fe94:	3080001d 	addik	r4, r0, 29
2001fe98:	f8830000 	swi	r4, r3, 0
					goto finished;
2001fe9c:	b80001e8 	bri	488		// 20020084
				}
				write_luma();
2001fea0:	b0000000 	imm	0
2001fea4:	e8740468 	lwi	r3, r20, 1128
2001fea8:	99fc1800 	brald	r15, r3
2001feac:	80000000 	or	r0, r0, r0
				i++;
2001feb0:	e873001c 	lwi	r3, r19, 28
2001feb4:	30630001 	addik	r3, r3, 1
2001feb8:	f873001c 	swi	r3, r19, 28
				goto l_write_y;
2001febc:	b80000a4 	bri	164		// 2001ff60
			} else if (isSchedulable_write_chroma()) {
2001fec0:	b0000000 	imm	0
2001fec4:	e894046c 	lwi	r4, r20, 1132
2001fec8:	99fc2000 	brald	r15, r4
2001fecc:	80000000 	or	r0, r0, r0
2001fed0:	bc030078 	beqi	r3, 120		// 2001ff48
				int stop = 0;
2001fed4:	f8130024 	swi	r0, r19, 36
				if (1 > SIZE_MV - index_MV + decoder_parser_mvrecon_MV->read_inds[0]) {
2001fed8:	b0000000 	imm	0
2001fedc:	e8740324 	lwi	r3, r20, 804
2001fee0:	e8630000 	lwi	r3, r3, 0
2001fee4:	e863000c 	lwi	r3, r3, 12
2001fee8:	e8830000 	lwi	r4, r3, 0
2001feec:	b0000000 	imm	0
2001fef0:	e8740340 	lwi	r3, r20, 832
2001fef4:	e8630000 	lwi	r3, r3, 0
2001fef8:	14632000 	rsubk	r3, r3, r4
2001fefc:	a863fe00 	xori	r3, r3, -512
2001ff00:	bc23000c 	bnei	r3, 12		// 2001ff0c
					stop = 1;
2001ff04:	30600001 	addik	r3, r0, 1
2001ff08:	f8730024 	swi	r3, r19, 36
				}
				if (stop != 0) {
2001ff0c:	e8730024 	lwi	r3, r19, 36
2001ff10:	bc030018 	beqi	r3, 24		// 2001ff28
					_FSM_state = my_state_write;
2001ff14:	b0000000 	imm	0
2001ff18:	e87403ac 	lwi	r3, r20, 940
2001ff1c:	3080001d 	addik	r4, r0, 29
2001ff20:	f8830000 	swi	r4, r3, 0
					goto finished;
2001ff24:	b8000160 	bri	352		// 20020084
				}
				write_chroma();
2001ff28:	b0000000 	imm	0
2001ff2c:	e8740470 	lwi	r3, r20, 1136
2001ff30:	99fc1800 	brald	r15, r3
2001ff34:	80000000 	or	r0, r0, r0
				i++;
2001ff38:	e873001c 	lwi	r3, r19, 28
2001ff3c:	30630001 	addik	r3, r3, 1
2001ff40:	f873001c 	swi	r3, r19, 28
				goto l_write_y;
2001ff44:	b800001c 	bri	28		// 2001ff60
			} else {
				_FSM_state = my_state_write;
2001ff48:	b0000000 	imm	0
2001ff4c:	e87403ac 	lwi	r3, r20, 940
2001ff50:	3080001d 	addik	r4, r0, 29
2001ff54:	f8830000 	swi	r4, r3, 0
				goto finished;
2001ff58:	b800012c 	bri	300		// 20020084

2001ff5c <$L460>:
		case my_state_read:
			goto l_read;
		case my_state_write:
			goto l_write;
		case my_state_write_y:
			goto l_write_y;
2001ff5c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_write;
				goto finished;
			}
		l_write_y:
			if (isSchedulable_write_luma()) {
2001ff60:	b0000000 	imm	0
2001ff64:	e8940464 	lwi	r4, r20, 1124
2001ff68:	99fc2000 	brald	r15, r4
2001ff6c:	80000000 	or	r0, r0, r0
2001ff70:	bc030078 	beqi	r3, 120		// 2001ffe8
				int stop = 0;
2001ff74:	f8130028 	swi	r0, r19, 40
				if (1 > SIZE_MV - index_MV + decoder_parser_mvrecon_MV->read_inds[0]) {
2001ff78:	b0000000 	imm	0
2001ff7c:	e8740324 	lwi	r3, r20, 804
2001ff80:	e8630000 	lwi	r3, r3, 0
2001ff84:	e863000c 	lwi	r3, r3, 12
2001ff88:	e8830000 	lwi	r4, r3, 0
2001ff8c:	b0000000 	imm	0
2001ff90:	e8740340 	lwi	r3, r20, 832
2001ff94:	e8630000 	lwi	r3, r3, 0
2001ff98:	14632000 	rsubk	r3, r3, r4
2001ff9c:	a863fe00 	xori	r3, r3, -512
2001ffa0:	bc23000c 	bnei	r3, 12		// 2001ffac
					stop = 1;
2001ffa4:	30600001 	addik	r3, r0, 1
2001ffa8:	f8730028 	swi	r3, r19, 40
				}
				if (stop != 0) {
2001ffac:	e8730028 	lwi	r3, r19, 40
2001ffb0:	bc030018 	beqi	r3, 24		// 2001ffc8
					_FSM_state = my_state_write_y;
2001ffb4:	b0000000 	imm	0
2001ffb8:	e87403ac 	lwi	r3, r20, 940
2001ffbc:	3080001e 	addik	r4, r0, 30
2001ffc0:	f8830000 	swi	r4, r3, 0
					goto finished;
2001ffc4:	b80000c0 	bri	192		// 20020084
				}
				write_luma();
2001ffc8:	b0000000 	imm	0
2001ffcc:	e8740468 	lwi	r3, r20, 1128
2001ffd0:	99fc1800 	brald	r15, r3
2001ffd4:	80000000 	or	r0, r0, r0
				i++;
2001ffd8:	e873001c 	lwi	r3, r19, 28
2001ffdc:	30630001 	addik	r3, r3, 1
2001ffe0:	f873001c 	swi	r3, r19, 28
				goto l_advance;
2001ffe4:	b800efa4 	bri	-4188		// 2001ef88
			} else if (isSchedulable_write_chroma()) {
2001ffe8:	b0000000 	imm	0
2001ffec:	e894046c 	lwi	r4, r20, 1132
2001fff0:	99fc2000 	brald	r15, r4
2001fff4:	80000000 	or	r0, r0, r0
2001fff8:	bc030078 	beqi	r3, 120		// 20020070
				int stop = 0;
2001fffc:	f813002c 	swi	r0, r19, 44
				if (1 > SIZE_MV - index_MV + decoder_parser_mvrecon_MV->read_inds[0]) {
20020000:	b0000000 	imm	0
20020004:	e8740324 	lwi	r3, r20, 804
20020008:	e8630000 	lwi	r3, r3, 0
2002000c:	e863000c 	lwi	r3, r3, 12
20020010:	e8830000 	lwi	r4, r3, 0
20020014:	b0000000 	imm	0
20020018:	e8740340 	lwi	r3, r20, 832
2002001c:	e8630000 	lwi	r3, r3, 0
20020020:	14632000 	rsubk	r3, r3, r4
20020024:	a863fe00 	xori	r3, r3, -512
20020028:	bc23000c 	bnei	r3, 12		// 20020034
					stop = 1;
2002002c:	30600001 	addik	r3, r0, 1
20020030:	f873002c 	swi	r3, r19, 44
				}
				if (stop != 0) {
20020034:	e873002c 	lwi	r3, r19, 44
20020038:	bc030018 	beqi	r3, 24		// 20020050
					_FSM_state = my_state_write_y;
2002003c:	b0000000 	imm	0
20020040:	e87403ac 	lwi	r3, r20, 940
20020044:	3080001e 	addik	r4, r0, 30
20020048:	f8830000 	swi	r4, r3, 0
					goto finished;
2002004c:	b8000038 	bri	56		// 20020084
				}
				write_chroma();
20020050:	b0000000 	imm	0
20020054:	e8740470 	lwi	r3, r20, 1136
20020058:	99fc1800 	brald	r15, r3
2002005c:	80000000 	or	r0, r0, r0
				i++;
20020060:	e873001c 	lwi	r3, r19, 28
20020064:	30630001 	addik	r3, r3, 1
20020068:	f873001c 	swi	r3, r19, 28
				goto l_advance;
2002006c:	b800ef1c 	bri	-4324		// 2001ef88
			} else {
				_FSM_state = my_state_write_y;
20020070:	b0000000 	imm	0
20020074:	e87403ac 	lwi	r3, r20, 940
20020078:	3080001e 	addik	r4, r0, 30
2002007c:	f8830000 	swi	r4, r3, 0
				goto finished;
20020080:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_BTYPE();
20020084:	b0000000 	imm	0
20020088:	e89403b4 	lwi	r4, r20, 948
2002008c:	99fc2000 	brald	r15, r4
20020090:	80000000 	or	r0, r0, r0
		read_end_MVIN();
20020094:	b0000000 	imm	0
20020098:	e87403bc 	lwi	r3, r20, 956
2002009c:	99fc1800 	brald	r15, r3
200200a0:	80000000 	or	r0, r0, r0
		read_end_A();
200200a4:	b0000000 	imm	0
200200a8:	e89403c4 	lwi	r4, r20, 964
200200ac:	99fc2000 	brald	r15, r4
200200b0:	80000000 	or	r0, r0, r0
		
		write_end_MV();
200200b4:	b0000000 	imm	0
200200b8:	e87403cc 	lwi	r3, r20, 972
200200bc:	99fc1800 	brald	r15, r3
200200c0:	80000000 	or	r0, r0, r0
		
		
		return i;
200200c4:	e873001c 	lwi	r3, r19, 28
	}
200200c8:	e9e10000 	lwi	r15, r1, 0
200200cc:	10330000 	addk	r1, r19, r0
200200d0:	ea6100b0 	lwi	r19, r1, 176
200200d4:	ea8100b4 	lwi	r20, r1, 180
200200d8:	302100b8 	addik	r1, r1, 184
200200dc:	b60f0008 	rtsd	r15, 8
200200e0:	80000000 	or	r0, r0, r0

200200e4 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200200e4:	3021fff4 	addik	r1, r1, -12
200200e8:	fa610004 	swi	r19, r1, 4
200200ec:	fa810008 	swi	r20, r1, 8
200200f0:	12610000 	addk	r19, r1, r0
200200f4:	96808000 	mfs	r20, rpc
200200f8:	b000dffe 	imm	-8194
200200fc:	32941868 	addik	r20, r20, 6248
20020100:	f8b30010 	swi	r5, r19, 16
20020104:	f8d30014 	swi	r6, r19, 20
20020108:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002010c:	e8730010 	lwi	r3, r19, 16
20020110:	e8630010 	lwi	r3, r3, 16
20020114:	e8830000 	lwi	r4, r3, 0
20020118:	e8730010 	lwi	r3, r19, 16
2002011c:	e8a3000c 	lwi	r5, r3, 12
20020120:	e8730014 	lwi	r3, r19, 20
20020124:	64630402 	bslli	r3, r3, 2
20020128:	10651800 	addk	r3, r5, r3
2002012c:	e8630000 	lwi	r3, r3, 0
20020130:	14a32000 	rsubk	r5, r3, r4
20020134:	30600001 	addik	r3, r0, 1
20020138:	e8930018 	lwi	r4, r19, 24
2002013c:	16442803 	cmpu	r18, r4, r5
20020140:	bcb20008 	bgei	r18, 8		// 20020148
20020144:	10600000 	addk	r3, r0, r0
20020148:	a46300ff 	andi	r3, r3, 255
}
2002014c:	10330000 	addk	r1, r19, r0
20020150:	ea610004 	lwi	r19, r1, 4
20020154:	ea810008 	lwi	r20, r1, 8
20020158:	3021000c 	addik	r1, r1, 12
2002015c:	b60f0008 	rtsd	r15, 8
20020160:	80000000 	or	r0, r0, r0

20020164 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20020164:	3021fff4 	addik	r1, r1, -12
20020168:	fa610004 	swi	r19, r1, 4
2002016c:	fa810008 	swi	r20, r1, 8
20020170:	12610000 	addk	r19, r1, r0
20020174:	96808000 	mfs	r20, rpc
20020178:	b000dffe 	imm	-8194
2002017c:	329417e8 	addik	r20, r20, 6120
20020180:	f8b30010 	swi	r5, r19, 16
20020184:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20020188:	e8730010 	lwi	r3, r19, 16
2002018c:	e8630010 	lwi	r3, r3, 16
20020190:	e8830000 	lwi	r4, r3, 0
20020194:	e8730010 	lwi	r3, r19, 16
20020198:	e8a3000c 	lwi	r5, r3, 12
2002019c:	e8730014 	lwi	r3, r19, 20
200201a0:	64630402 	bslli	r3, r3, 2
200201a4:	10651800 	addk	r3, r5, r3
200201a8:	e8630000 	lwi	r3, r3, 0
200201ac:	14632000 	rsubk	r3, r3, r4
}
200201b0:	10330000 	addk	r1, r19, r0
200201b4:	ea610004 	lwi	r19, r1, 4
200201b8:	ea810008 	lwi	r20, r1, 8
200201bc:	3021000c 	addik	r1, r1, 12
200201c0:	b60f0008 	rtsd	r15, 8
200201c4:	80000000 	or	r0, r0, r0

200201c8 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200201c8:	3021fff0 	addik	r1, r1, -16
200201cc:	fa610008 	swi	r19, r1, 8
200201d0:	fa81000c 	swi	r20, r1, 12
200201d4:	12610000 	addk	r19, r1, r0
200201d8:	96808000 	mfs	r20, rpc
200201dc:	b000dffe 	imm	-8194
200201e0:	32941784 	addik	r20, r20, 6020
200201e4:	f8b30014 	swi	r5, r19, 20
200201e8:	f8d30018 	swi	r6, r19, 24
200201ec:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200201f0:	f8130004 	swi	r0, r19, 4
200201f4:	b800005c 	bri	92		// 20020250
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200201f8:	e8730014 	lwi	r3, r19, 20
200201fc:	e8830000 	lwi	r4, r3, 0
20020200:	e8730014 	lwi	r3, r19, 20
20020204:	e8a3000c 	lwi	r5, r3, 12
20020208:	e8730004 	lwi	r3, r19, 4
2002020c:	64630402 	bslli	r3, r3, 2
20020210:	10651800 	addk	r3, r5, r3
20020214:	e8a30000 	lwi	r5, r3, 0
20020218:	e8730014 	lwi	r3, r19, 20
2002021c:	e8630010 	lwi	r3, r3, 16
20020220:	e8630000 	lwi	r3, r3, 0
20020224:	14632800 	rsubk	r3, r3, r5
20020228:	10641800 	addk	r3, r4, r3
2002022c:	30830001 	addik	r4, r3, 1
20020230:	e873001c 	lwi	r3, r19, 28
20020234:	16441803 	cmpu	r18, r4, r3
20020238:	bc52000c 	blti	r18, 12		// 20020244
            return 0;
2002023c:	10600000 	addk	r3, r0, r0
20020240:	b8000024 	bri	36		// 20020264
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20020244:	e8730004 	lwi	r3, r19, 4
20020248:	30630001 	addik	r3, r3, 1
2002024c:	f8730004 	swi	r3, r19, 4
20020250:	e8930004 	lwi	r4, r19, 4
20020254:	e8730018 	lwi	r3, r19, 24
20020258:	16432003 	cmpu	r18, r3, r4
2002025c:	bc52ff9c 	blti	r18, -100		// 200201f8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20020260:	30600001 	addik	r3, r0, 1
}
20020264:	10330000 	addk	r1, r19, r0
20020268:	ea610008 	lwi	r19, r1, 8
2002026c:	ea81000c 	lwi	r20, r1, 12
20020270:	30210010 	addik	r1, r1, 16
20020274:	b60f0008 	rtsd	r15, 8
20020278:	80000000 	or	r0, r0, r0

2002027c <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002027c:	3021ffe8 	addik	r1, r1, -24
20020280:	fa610010 	swi	r19, r1, 16
20020284:	fa810014 	swi	r20, r1, 20
20020288:	12610000 	addk	r19, r1, r0
2002028c:	96808000 	mfs	r20, rpc
20020290:	b000dffe 	imm	-8194
20020294:	329416d0 	addik	r20, r20, 5840
20020298:	f8b3001c 	swi	r5, r19, 28
2002029c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
200202a0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200202a4:	f8130004 	swi	r0, r19, 4
200202a8:	b8000054 	bri	84		// 200202fc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200202ac:	e873001c 	lwi	r3, r19, 28
200202b0:	e8630010 	lwi	r3, r3, 16
200202b4:	e8830000 	lwi	r4, r3, 0
200202b8:	e873001c 	lwi	r3, r19, 28
200202bc:	e8a3000c 	lwi	r5, r3, 12
200202c0:	e8730004 	lwi	r3, r19, 4
200202c4:	64630402 	bslli	r3, r3, 2
200202c8:	10651800 	addk	r3, r5, r3
200202cc:	e8630000 	lwi	r3, r3, 0
200202d0:	14632000 	rsubk	r3, r3, r4
200202d4:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200202d8:	e8930008 	lwi	r4, r19, 8
200202dc:	e873000c 	lwi	r3, r19, 12
200202e0:	16441803 	cmpu	r18, r4, r3
200202e4:	bcb20008 	bgei	r18, 8		// 200202ec
200202e8:	10640000 	addk	r3, r4, r0
200202ec:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200202f0:	e8730004 	lwi	r3, r19, 4
200202f4:	30630001 	addik	r3, r3, 1
200202f8:	f8730004 	swi	r3, r19, 4
200202fc:	e8930004 	lwi	r4, r19, 4
20020300:	e8730020 	lwi	r3, r19, 32
20020304:	16432003 	cmpu	r18, r3, r4
20020308:	bc52ffa4 	blti	r18, -92		// 200202ac
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002030c:	e873001c 	lwi	r3, r19, 28
20020310:	e8830000 	lwi	r4, r3, 0
20020314:	e8730008 	lwi	r3, r19, 8
20020318:	14632000 	rsubk	r3, r3, r4
}
2002031c:	10330000 	addk	r1, r19, r0
20020320:	ea610010 	lwi	r19, r1, 16
20020324:	ea810014 	lwi	r20, r1, 20
20020328:	30210018 	addik	r1, r1, 24
2002032c:	b60f0008 	rtsd	r15, 8
20020330:	80000000 	or	r0, r0, r0

20020334 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20020334:	3021fff0 	addik	r1, r1, -16
20020338:	fa610008 	swi	r19, r1, 8
2002033c:	fa81000c 	swi	r20, r1, 12
20020340:	12610000 	addk	r19, r1, r0
20020344:	96808000 	mfs	r20, rpc
20020348:	b000dffe 	imm	-8194
2002034c:	32941618 	addik	r20, r20, 5656
20020350:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20020354:	e8730014 	lwi	r3, r19, 20
20020358:	e8630010 	lwi	r3, r3, 16
2002035c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20020360:	f8130004 	swi	r0, r19, 4
20020364:	b8000028 	bri	40		// 2002038c
        fifo->read_inds[i] = 0;
20020368:	e8730014 	lwi	r3, r19, 20
2002036c:	e883000c 	lwi	r4, r3, 12
20020370:	e8730004 	lwi	r3, r19, 4
20020374:	64630402 	bslli	r3, r3, 2
20020378:	10641800 	addk	r3, r4, r3
2002037c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20020380:	e8730004 	lwi	r3, r19, 4
20020384:	30630001 	addik	r3, r3, 1
20020388:	f8730004 	swi	r3, r19, 4
2002038c:	e8730014 	lwi	r3, r19, 20
20020390:	e8830008 	lwi	r4, r3, 8
20020394:	e8730004 	lwi	r3, r19, 4
20020398:	16441803 	cmpu	r18, r4, r3
2002039c:	bc52ffcc 	blti	r18, -52		// 20020368
        fifo->read_inds[i] = 0;
    }
}
200203a0:	10330000 	addk	r1, r19, r0
200203a4:	ea610008 	lwi	r19, r1, 8
200203a8:	ea81000c 	lwi	r20, r1, 12
200203ac:	30210010 	addik	r1, r1, 16
200203b0:	b60f0008 	rtsd	r15, 8
200203b4:	80000000 	or	r0, r0, r0

200203b8 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200203b8:	3021fff0 	addik	r1, r1, -16
200203bc:	fa610008 	swi	r19, r1, 8
200203c0:	fa81000c 	swi	r20, r1, 12
200203c4:	12610000 	addk	r19, r1, r0
200203c8:	96808000 	mfs	r20, rpc
200203cc:	b000dffe 	imm	-8194
200203d0:	32941594 	addik	r20, r20, 5524
200203d4:	f8b30014 	swi	r5, r19, 20
200203d8:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200203dc:	e8730014 	lwi	r3, r19, 20
200203e0:	e8830004 	lwi	r4, r3, 4
200203e4:	e8730014 	lwi	r3, r19, 20
200203e8:	e8a3000c 	lwi	r5, r3, 12
200203ec:	e8730018 	lwi	r3, r19, 24
200203f0:	64630402 	bslli	r3, r3, 2
200203f4:	10651800 	addk	r3, r5, r3
200203f8:	e8a30000 	lwi	r5, r3, 0
200203fc:	e8730014 	lwi	r3, r19, 20
20020400:	e8630000 	lwi	r3, r3, 0
20020404:	3063ffff 	addik	r3, r3, -1
20020408:	84651800 	and	r3, r5, r3
2002040c:	10641800 	addk	r3, r4, r3
20020410:	e0630000 	lbui	r3, r3, 0
20020414:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20020418:	e8730014 	lwi	r3, r19, 20
2002041c:	e883000c 	lwi	r4, r3, 12
20020420:	e8730018 	lwi	r3, r19, 24
20020424:	64630402 	bslli	r3, r3, 2
20020428:	10641800 	addk	r3, r4, r3
2002042c:	e8830000 	lwi	r4, r3, 0
20020430:	30840001 	addik	r4, r4, 1
20020434:	f8830000 	swi	r4, r3, 0
    return value;
20020438:	e0730004 	lbui	r3, r19, 4
2002043c:	90630060 	sext8	r3, r3
}
20020440:	10330000 	addk	r1, r19, r0
20020444:	ea610008 	lwi	r19, r1, 8
20020448:	ea81000c 	lwi	r20, r1, 12
2002044c:	30210010 	addik	r1, r1, 16
20020450:	b60f0008 	rtsd	r15, 8
20020454:	80000000 	or	r0, r0, r0

20020458 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20020458:	3021fff4 	addik	r1, r1, -12
2002045c:	fa610004 	swi	r19, r1, 4
20020460:	fa810008 	swi	r20, r1, 8
20020464:	12610000 	addk	r19, r1, r0
20020468:	96808000 	mfs	r20, rpc
2002046c:	b000dffe 	imm	-8194
20020470:	329414f4 	addik	r20, r20, 5364
20020474:	f8b30010 	swi	r5, r19, 16
20020478:	10660000 	addk	r3, r6, r0
2002047c:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20020480:	e8730010 	lwi	r3, r19, 16
20020484:	e8830004 	lwi	r4, r3, 4
20020488:	e8730010 	lwi	r3, r19, 16
2002048c:	e8630010 	lwi	r3, r3, 16
20020490:	e8a30000 	lwi	r5, r3, 0
20020494:	e8730010 	lwi	r3, r19, 16
20020498:	e8630000 	lwi	r3, r3, 0
2002049c:	3063ffff 	addik	r3, r3, -1
200204a0:	84651800 	and	r3, r5, r3
200204a4:	10641800 	addk	r3, r4, r3
200204a8:	e0930014 	lbui	r4, r19, 20
200204ac:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
200204b0:	e8730010 	lwi	r3, r19, 16
200204b4:	e8630010 	lwi	r3, r3, 16
200204b8:	e8830000 	lwi	r4, r3, 0
200204bc:	30840001 	addik	r4, r4, 1
200204c0:	f8830000 	swi	r4, r3, 0
}
200204c4:	10330000 	addk	r1, r19, r0
200204c8:	ea610004 	lwi	r19, r1, 4
200204cc:	ea810008 	lwi	r20, r1, 8
200204d0:	3021000c 	addik	r1, r1, 12
200204d4:	b60f0008 	rtsd	r15, 8
200204d8:	80000000 	or	r0, r0, r0

200204dc <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200204dc:	3021fff4 	addik	r1, r1, -12
200204e0:	fa610004 	swi	r19, r1, 4
200204e4:	fa810008 	swi	r20, r1, 8
200204e8:	12610000 	addk	r19, r1, r0
200204ec:	96808000 	mfs	r20, rpc
200204f0:	b000dffe 	imm	-8194
200204f4:	32941470 	addik	r20, r20, 5232
200204f8:	f8b30010 	swi	r5, r19, 16
200204fc:	f8d30014 	swi	r6, r19, 20
20020500:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20020504:	e8730010 	lwi	r3, r19, 16
20020508:	e8630010 	lwi	r3, r3, 16
2002050c:	e8830000 	lwi	r4, r3, 0
20020510:	e8730010 	lwi	r3, r19, 16
20020514:	e8a3000c 	lwi	r5, r3, 12
20020518:	e8730014 	lwi	r3, r19, 20
2002051c:	64630402 	bslli	r3, r3, 2
20020520:	10651800 	addk	r3, r5, r3
20020524:	e8630000 	lwi	r3, r3, 0
20020528:	14a32000 	rsubk	r5, r3, r4
2002052c:	30600001 	addik	r3, r0, 1
20020530:	e8930018 	lwi	r4, r19, 24
20020534:	16442803 	cmpu	r18, r4, r5
20020538:	bcb20008 	bgei	r18, 8		// 20020540
2002053c:	10600000 	addk	r3, r0, r0
20020540:	a46300ff 	andi	r3, r3, 255
}
20020544:	10330000 	addk	r1, r19, r0
20020548:	ea610004 	lwi	r19, r1, 4
2002054c:	ea810008 	lwi	r20, r1, 8
20020550:	3021000c 	addik	r1, r1, 12
20020554:	b60f0008 	rtsd	r15, 8
20020558:	80000000 	or	r0, r0, r0

2002055c <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002055c:	3021fff4 	addik	r1, r1, -12
20020560:	fa610004 	swi	r19, r1, 4
20020564:	fa810008 	swi	r20, r1, 8
20020568:	12610000 	addk	r19, r1, r0
2002056c:	96808000 	mfs	r20, rpc
20020570:	b000dffe 	imm	-8194
20020574:	329413f0 	addik	r20, r20, 5104
20020578:	f8b30010 	swi	r5, r19, 16
2002057c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20020580:	e8730010 	lwi	r3, r19, 16
20020584:	e8630010 	lwi	r3, r3, 16
20020588:	e8830000 	lwi	r4, r3, 0
2002058c:	e8730010 	lwi	r3, r19, 16
20020590:	e8a3000c 	lwi	r5, r3, 12
20020594:	e8730014 	lwi	r3, r19, 20
20020598:	64630402 	bslli	r3, r3, 2
2002059c:	10651800 	addk	r3, r5, r3
200205a0:	e8630000 	lwi	r3, r3, 0
200205a4:	14632000 	rsubk	r3, r3, r4
}
200205a8:	10330000 	addk	r1, r19, r0
200205ac:	ea610004 	lwi	r19, r1, 4
200205b0:	ea810008 	lwi	r20, r1, 8
200205b4:	3021000c 	addik	r1, r1, 12
200205b8:	b60f0008 	rtsd	r15, 8
200205bc:	80000000 	or	r0, r0, r0

200205c0 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200205c0:	3021fff0 	addik	r1, r1, -16
200205c4:	fa610008 	swi	r19, r1, 8
200205c8:	fa81000c 	swi	r20, r1, 12
200205cc:	12610000 	addk	r19, r1, r0
200205d0:	96808000 	mfs	r20, rpc
200205d4:	b000dffe 	imm	-8194
200205d8:	3294138c 	addik	r20, r20, 5004
200205dc:	f8b30014 	swi	r5, r19, 20
200205e0:	f8d30018 	swi	r6, r19, 24
200205e4:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200205e8:	f8130004 	swi	r0, r19, 4
200205ec:	b800005c 	bri	92		// 20020648
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200205f0:	e8730014 	lwi	r3, r19, 20
200205f4:	e8830000 	lwi	r4, r3, 0
200205f8:	e8730014 	lwi	r3, r19, 20
200205fc:	e8a3000c 	lwi	r5, r3, 12
20020600:	e8730004 	lwi	r3, r19, 4
20020604:	64630402 	bslli	r3, r3, 2
20020608:	10651800 	addk	r3, r5, r3
2002060c:	e8a30000 	lwi	r5, r3, 0
20020610:	e8730014 	lwi	r3, r19, 20
20020614:	e8630010 	lwi	r3, r3, 16
20020618:	e8630000 	lwi	r3, r3, 0
2002061c:	14632800 	rsubk	r3, r3, r5
20020620:	10641800 	addk	r3, r4, r3
20020624:	30830001 	addik	r4, r3, 1
20020628:	e873001c 	lwi	r3, r19, 28
2002062c:	16441803 	cmpu	r18, r4, r3
20020630:	bc52000c 	blti	r18, 12		// 2002063c
            return 0;
20020634:	10600000 	addk	r3, r0, r0
20020638:	b8000024 	bri	36		// 2002065c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002063c:	e8730004 	lwi	r3, r19, 4
20020640:	30630001 	addik	r3, r3, 1
20020644:	f8730004 	swi	r3, r19, 4
20020648:	e8930004 	lwi	r4, r19, 4
2002064c:	e8730018 	lwi	r3, r19, 24
20020650:	16432003 	cmpu	r18, r3, r4
20020654:	bc52ff9c 	blti	r18, -100		// 200205f0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20020658:	30600001 	addik	r3, r0, 1
}
2002065c:	10330000 	addk	r1, r19, r0
20020660:	ea610008 	lwi	r19, r1, 8
20020664:	ea81000c 	lwi	r20, r1, 12
20020668:	30210010 	addik	r1, r1, 16
2002066c:	b60f0008 	rtsd	r15, 8
20020670:	80000000 	or	r0, r0, r0

20020674 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20020674:	3021ffe8 	addik	r1, r1, -24
20020678:	fa610010 	swi	r19, r1, 16
2002067c:	fa810014 	swi	r20, r1, 20
20020680:	12610000 	addk	r19, r1, r0
20020684:	96808000 	mfs	r20, rpc
20020688:	b000dffe 	imm	-8194
2002068c:	329412d8 	addik	r20, r20, 4824
20020690:	f8b3001c 	swi	r5, r19, 28
20020694:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20020698:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002069c:	f8130004 	swi	r0, r19, 4
200206a0:	b8000054 	bri	84		// 200206f4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200206a4:	e873001c 	lwi	r3, r19, 28
200206a8:	e8630010 	lwi	r3, r3, 16
200206ac:	e8830000 	lwi	r4, r3, 0
200206b0:	e873001c 	lwi	r3, r19, 28
200206b4:	e8a3000c 	lwi	r5, r3, 12
200206b8:	e8730004 	lwi	r3, r19, 4
200206bc:	64630402 	bslli	r3, r3, 2
200206c0:	10651800 	addk	r3, r5, r3
200206c4:	e8630000 	lwi	r3, r3, 0
200206c8:	14632000 	rsubk	r3, r3, r4
200206cc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200206d0:	e8930008 	lwi	r4, r19, 8
200206d4:	e873000c 	lwi	r3, r19, 12
200206d8:	16441803 	cmpu	r18, r4, r3
200206dc:	bcb20008 	bgei	r18, 8		// 200206e4
200206e0:	10640000 	addk	r3, r4, r0
200206e4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200206e8:	e8730004 	lwi	r3, r19, 4
200206ec:	30630001 	addik	r3, r3, 1
200206f0:	f8730004 	swi	r3, r19, 4
200206f4:	e8930004 	lwi	r4, r19, 4
200206f8:	e8730020 	lwi	r3, r19, 32
200206fc:	16432003 	cmpu	r18, r3, r4
20020700:	bc52ffa4 	blti	r18, -92		// 200206a4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20020704:	e873001c 	lwi	r3, r19, 28
20020708:	e8830000 	lwi	r4, r3, 0
2002070c:	e8730008 	lwi	r3, r19, 8
20020710:	14632000 	rsubk	r3, r3, r4
}
20020714:	10330000 	addk	r1, r19, r0
20020718:	ea610010 	lwi	r19, r1, 16
2002071c:	ea810014 	lwi	r20, r1, 20
20020720:	30210018 	addik	r1, r1, 24
20020724:	b60f0008 	rtsd	r15, 8
20020728:	80000000 	or	r0, r0, r0

2002072c <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002072c:	3021fff0 	addik	r1, r1, -16
20020730:	fa610008 	swi	r19, r1, 8
20020734:	fa81000c 	swi	r20, r1, 12
20020738:	12610000 	addk	r19, r1, r0
2002073c:	96808000 	mfs	r20, rpc
20020740:	b000dffe 	imm	-8194
20020744:	32941220 	addik	r20, r20, 4640
20020748:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2002074c:	e8730014 	lwi	r3, r19, 20
20020750:	e8630010 	lwi	r3, r3, 16
20020754:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20020758:	f8130004 	swi	r0, r19, 4
2002075c:	b8000028 	bri	40		// 20020784
        fifo->read_inds[i] = 0;
20020760:	e8730014 	lwi	r3, r19, 20
20020764:	e883000c 	lwi	r4, r3, 12
20020768:	e8730004 	lwi	r3, r19, 4
2002076c:	64630402 	bslli	r3, r3, 2
20020770:	10641800 	addk	r3, r4, r3
20020774:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20020778:	e8730004 	lwi	r3, r19, 4
2002077c:	30630001 	addik	r3, r3, 1
20020780:	f8730004 	swi	r3, r19, 4
20020784:	e8730014 	lwi	r3, r19, 20
20020788:	e8830008 	lwi	r4, r3, 8
2002078c:	e8730004 	lwi	r3, r19, 4
20020790:	16441803 	cmpu	r18, r4, r3
20020794:	bc52ffcc 	blti	r18, -52		// 20020760
        fifo->read_inds[i] = 0;
    }
}
20020798:	10330000 	addk	r1, r19, r0
2002079c:	ea610008 	lwi	r19, r1, 8
200207a0:	ea81000c 	lwi	r20, r1, 12
200207a4:	30210010 	addik	r1, r1, 16
200207a8:	b60f0008 	rtsd	r15, 8
200207ac:	80000000 	or	r0, r0, r0

200207b0 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200207b0:	3021fff0 	addik	r1, r1, -16
200207b4:	fa610008 	swi	r19, r1, 8
200207b8:	fa81000c 	swi	r20, r1, 12
200207bc:	12610000 	addk	r19, r1, r0
200207c0:	96808000 	mfs	r20, rpc
200207c4:	b000dffe 	imm	-8194
200207c8:	3294119c 	addik	r20, r20, 4508
200207cc:	f8b30014 	swi	r5, r19, 20
200207d0:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200207d4:	e8730014 	lwi	r3, r19, 20
200207d8:	e8830004 	lwi	r4, r3, 4
200207dc:	e8730014 	lwi	r3, r19, 20
200207e0:	e8a3000c 	lwi	r5, r3, 12
200207e4:	e8730018 	lwi	r3, r19, 24
200207e8:	64630402 	bslli	r3, r3, 2
200207ec:	10651800 	addk	r3, r5, r3
200207f0:	e8a30000 	lwi	r5, r3, 0
200207f4:	e8730014 	lwi	r3, r19, 20
200207f8:	e8630000 	lwi	r3, r3, 0
200207fc:	3063ffff 	addik	r3, r3, -1
20020800:	84651800 	and	r3, r5, r3
20020804:	10631800 	addk	r3, r3, r3
20020808:	10641800 	addk	r3, r4, r3
2002080c:	e4630000 	lhui	r3, r3, 0
20020810:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20020814:	e8730014 	lwi	r3, r19, 20
20020818:	e883000c 	lwi	r4, r3, 12
2002081c:	e8730018 	lwi	r3, r19, 24
20020820:	64630402 	bslli	r3, r3, 2
20020824:	10641800 	addk	r3, r4, r3
20020828:	e8830000 	lwi	r4, r3, 0
2002082c:	30840001 	addik	r4, r4, 1
20020830:	f8830000 	swi	r4, r3, 0
    return value;
20020834:	e4730004 	lhui	r3, r19, 4
20020838:	90630061 	sext16	r3, r3
}
2002083c:	10330000 	addk	r1, r19, r0
20020840:	ea610008 	lwi	r19, r1, 8
20020844:	ea81000c 	lwi	r20, r1, 12
20020848:	30210010 	addik	r1, r1, 16
2002084c:	b60f0008 	rtsd	r15, 8
20020850:	80000000 	or	r0, r0, r0

20020854 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20020854:	3021fff4 	addik	r1, r1, -12
20020858:	fa610004 	swi	r19, r1, 4
2002085c:	fa810008 	swi	r20, r1, 8
20020860:	12610000 	addk	r19, r1, r0
20020864:	96808000 	mfs	r20, rpc
20020868:	b000dffe 	imm	-8194
2002086c:	329410f8 	addik	r20, r20, 4344
20020870:	f8b30010 	swi	r5, r19, 16
20020874:	10660000 	addk	r3, r6, r0
20020878:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002087c:	e8730010 	lwi	r3, r19, 16
20020880:	e8830004 	lwi	r4, r3, 4
20020884:	e8730010 	lwi	r3, r19, 16
20020888:	e8630010 	lwi	r3, r3, 16
2002088c:	e8a30000 	lwi	r5, r3, 0
20020890:	e8730010 	lwi	r3, r19, 16
20020894:	e8630000 	lwi	r3, r3, 0
20020898:	3063ffff 	addik	r3, r3, -1
2002089c:	84651800 	and	r3, r5, r3
200208a0:	10631800 	addk	r3, r3, r3
200208a4:	10641800 	addk	r3, r4, r3
200208a8:	e4930014 	lhui	r4, r19, 20
200208ac:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
200208b0:	e8730010 	lwi	r3, r19, 16
200208b4:	e8630010 	lwi	r3, r3, 16
200208b8:	e8830000 	lwi	r4, r3, 0
200208bc:	30840001 	addik	r4, r4, 1
200208c0:	f8830000 	swi	r4, r3, 0
}
200208c4:	10330000 	addk	r1, r19, r0
200208c8:	ea610004 	lwi	r19, r1, 4
200208cc:	ea810008 	lwi	r20, r1, 8
200208d0:	3021000c 	addik	r1, r1, 12
200208d4:	b60f0008 	rtsd	r15, 8
200208d8:	80000000 	or	r0, r0, r0

200208dc <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200208dc:	3021fff4 	addik	r1, r1, -12
200208e0:	fa610004 	swi	r19, r1, 4
200208e4:	fa810008 	swi	r20, r1, 8
200208e8:	12610000 	addk	r19, r1, r0
200208ec:	96808000 	mfs	r20, rpc
200208f0:	b000dffe 	imm	-8194
200208f4:	32941070 	addik	r20, r20, 4208
200208f8:	f8b30010 	swi	r5, r19, 16
200208fc:	f8d30014 	swi	r6, r19, 20
20020900:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20020904:	e8730010 	lwi	r3, r19, 16
20020908:	e8630010 	lwi	r3, r3, 16
2002090c:	e8830000 	lwi	r4, r3, 0
20020910:	e8730010 	lwi	r3, r19, 16
20020914:	e8a3000c 	lwi	r5, r3, 12
20020918:	e8730014 	lwi	r3, r19, 20
2002091c:	64630402 	bslli	r3, r3, 2
20020920:	10651800 	addk	r3, r5, r3
20020924:	e8630000 	lwi	r3, r3, 0
20020928:	14a32000 	rsubk	r5, r3, r4
2002092c:	30600001 	addik	r3, r0, 1
20020930:	e8930018 	lwi	r4, r19, 24
20020934:	16442803 	cmpu	r18, r4, r5
20020938:	bcb20008 	bgei	r18, 8		// 20020940
2002093c:	10600000 	addk	r3, r0, r0
20020940:	a46300ff 	andi	r3, r3, 255
}
20020944:	10330000 	addk	r1, r19, r0
20020948:	ea610004 	lwi	r19, r1, 4
2002094c:	ea810008 	lwi	r20, r1, 8
20020950:	3021000c 	addik	r1, r1, 12
20020954:	b60f0008 	rtsd	r15, 8
20020958:	80000000 	or	r0, r0, r0

2002095c <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002095c:	3021fff4 	addik	r1, r1, -12
20020960:	fa610004 	swi	r19, r1, 4
20020964:	fa810008 	swi	r20, r1, 8
20020968:	12610000 	addk	r19, r1, r0
2002096c:	96808000 	mfs	r20, rpc
20020970:	b000dffe 	imm	-8194
20020974:	32940ff0 	addik	r20, r20, 4080
20020978:	f8b30010 	swi	r5, r19, 16
2002097c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20020980:	e8730010 	lwi	r3, r19, 16
20020984:	e8630010 	lwi	r3, r3, 16
20020988:	e8830000 	lwi	r4, r3, 0
2002098c:	e8730010 	lwi	r3, r19, 16
20020990:	e8a3000c 	lwi	r5, r3, 12
20020994:	e8730014 	lwi	r3, r19, 20
20020998:	64630402 	bslli	r3, r3, 2
2002099c:	10651800 	addk	r3, r5, r3
200209a0:	e8630000 	lwi	r3, r3, 0
200209a4:	14632000 	rsubk	r3, r3, r4
}
200209a8:	10330000 	addk	r1, r19, r0
200209ac:	ea610004 	lwi	r19, r1, 4
200209b0:	ea810008 	lwi	r20, r1, 8
200209b4:	3021000c 	addik	r1, r1, 12
200209b8:	b60f0008 	rtsd	r15, 8
200209bc:	80000000 	or	r0, r0, r0

200209c0 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200209c0:	3021fff0 	addik	r1, r1, -16
200209c4:	fa610008 	swi	r19, r1, 8
200209c8:	fa81000c 	swi	r20, r1, 12
200209cc:	12610000 	addk	r19, r1, r0
200209d0:	96808000 	mfs	r20, rpc
200209d4:	b000dffe 	imm	-8194
200209d8:	32940f8c 	addik	r20, r20, 3980
200209dc:	f8b30014 	swi	r5, r19, 20
200209e0:	f8d30018 	swi	r6, r19, 24
200209e4:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200209e8:	f8130004 	swi	r0, r19, 4
200209ec:	b800005c 	bri	92		// 20020a48
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200209f0:	e8730014 	lwi	r3, r19, 20
200209f4:	e8830000 	lwi	r4, r3, 0
200209f8:	e8730014 	lwi	r3, r19, 20
200209fc:	e8a3000c 	lwi	r5, r3, 12
20020a00:	e8730004 	lwi	r3, r19, 4
20020a04:	64630402 	bslli	r3, r3, 2
20020a08:	10651800 	addk	r3, r5, r3
20020a0c:	e8a30000 	lwi	r5, r3, 0
20020a10:	e8730014 	lwi	r3, r19, 20
20020a14:	e8630010 	lwi	r3, r3, 16
20020a18:	e8630000 	lwi	r3, r3, 0
20020a1c:	14632800 	rsubk	r3, r3, r5
20020a20:	10641800 	addk	r3, r4, r3
20020a24:	30830001 	addik	r4, r3, 1
20020a28:	e873001c 	lwi	r3, r19, 28
20020a2c:	16441803 	cmpu	r18, r4, r3
20020a30:	bc52000c 	blti	r18, 12		// 20020a3c
            return 0;
20020a34:	10600000 	addk	r3, r0, r0
20020a38:	b8000024 	bri	36		// 20020a5c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20020a3c:	e8730004 	lwi	r3, r19, 4
20020a40:	30630001 	addik	r3, r3, 1
20020a44:	f8730004 	swi	r3, r19, 4
20020a48:	e8930004 	lwi	r4, r19, 4
20020a4c:	e8730018 	lwi	r3, r19, 24
20020a50:	16432003 	cmpu	r18, r3, r4
20020a54:	bc52ff9c 	blti	r18, -100		// 200209f0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20020a58:	30600001 	addik	r3, r0, 1
}
20020a5c:	10330000 	addk	r1, r19, r0
20020a60:	ea610008 	lwi	r19, r1, 8
20020a64:	ea81000c 	lwi	r20, r1, 12
20020a68:	30210010 	addik	r1, r1, 16
20020a6c:	b60f0008 	rtsd	r15, 8
20020a70:	80000000 	or	r0, r0, r0

20020a74 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20020a74:	3021ffe8 	addik	r1, r1, -24
20020a78:	fa610010 	swi	r19, r1, 16
20020a7c:	fa810014 	swi	r20, r1, 20
20020a80:	12610000 	addk	r19, r1, r0
20020a84:	96808000 	mfs	r20, rpc
20020a88:	b000dffe 	imm	-8194
20020a8c:	32940ed8 	addik	r20, r20, 3800
20020a90:	f8b3001c 	swi	r5, r19, 28
20020a94:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20020a98:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20020a9c:	f8130004 	swi	r0, r19, 4
20020aa0:	b8000054 	bri	84		// 20020af4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20020aa4:	e873001c 	lwi	r3, r19, 28
20020aa8:	e8630010 	lwi	r3, r3, 16
20020aac:	e8830000 	lwi	r4, r3, 0
20020ab0:	e873001c 	lwi	r3, r19, 28
20020ab4:	e8a3000c 	lwi	r5, r3, 12
20020ab8:	e8730004 	lwi	r3, r19, 4
20020abc:	64630402 	bslli	r3, r3, 2
20020ac0:	10651800 	addk	r3, r5, r3
20020ac4:	e8630000 	lwi	r3, r3, 0
20020ac8:	14632000 	rsubk	r3, r3, r4
20020acc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20020ad0:	e8930008 	lwi	r4, r19, 8
20020ad4:	e873000c 	lwi	r3, r19, 12
20020ad8:	16441803 	cmpu	r18, r4, r3
20020adc:	bcb20008 	bgei	r18, 8		// 20020ae4
20020ae0:	10640000 	addk	r3, r4, r0
20020ae4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20020ae8:	e8730004 	lwi	r3, r19, 4
20020aec:	30630001 	addik	r3, r3, 1
20020af0:	f8730004 	swi	r3, r19, 4
20020af4:	e8930004 	lwi	r4, r19, 4
20020af8:	e8730020 	lwi	r3, r19, 32
20020afc:	16432003 	cmpu	r18, r3, r4
20020b00:	bc52ffa4 	blti	r18, -92		// 20020aa4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20020b04:	e873001c 	lwi	r3, r19, 28
20020b08:	e8830000 	lwi	r4, r3, 0
20020b0c:	e8730008 	lwi	r3, r19, 8
20020b10:	14632000 	rsubk	r3, r3, r4
}
20020b14:	10330000 	addk	r1, r19, r0
20020b18:	ea610010 	lwi	r19, r1, 16
20020b1c:	ea810014 	lwi	r20, r1, 20
20020b20:	30210018 	addik	r1, r1, 24
20020b24:	b60f0008 	rtsd	r15, 8
20020b28:	80000000 	or	r0, r0, r0

20020b2c <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20020b2c:	3021fff0 	addik	r1, r1, -16
20020b30:	fa610008 	swi	r19, r1, 8
20020b34:	fa81000c 	swi	r20, r1, 12
20020b38:	12610000 	addk	r19, r1, r0
20020b3c:	96808000 	mfs	r20, rpc
20020b40:	b000dffe 	imm	-8194
20020b44:	32940e20 	addik	r20, r20, 3616
20020b48:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20020b4c:	e8730014 	lwi	r3, r19, 20
20020b50:	e8630010 	lwi	r3, r3, 16
20020b54:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20020b58:	f8130004 	swi	r0, r19, 4
20020b5c:	b8000028 	bri	40		// 20020b84
        fifo->read_inds[i] = 0;
20020b60:	e8730014 	lwi	r3, r19, 20
20020b64:	e883000c 	lwi	r4, r3, 12
20020b68:	e8730004 	lwi	r3, r19, 4
20020b6c:	64630402 	bslli	r3, r3, 2
20020b70:	10641800 	addk	r3, r4, r3
20020b74:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20020b78:	e8730004 	lwi	r3, r19, 4
20020b7c:	30630001 	addik	r3, r3, 1
20020b80:	f8730004 	swi	r3, r19, 4
20020b84:	e8730014 	lwi	r3, r19, 20
20020b88:	e8830008 	lwi	r4, r3, 8
20020b8c:	e8730004 	lwi	r3, r19, 4
20020b90:	16441803 	cmpu	r18, r4, r3
20020b94:	bc52ffcc 	blti	r18, -52		// 20020b60
        fifo->read_inds[i] = 0;
    }
}
20020b98:	10330000 	addk	r1, r19, r0
20020b9c:	ea610008 	lwi	r19, r1, 8
20020ba0:	ea81000c 	lwi	r20, r1, 12
20020ba4:	30210010 	addik	r1, r1, 16
20020ba8:	b60f0008 	rtsd	r15, 8
20020bac:	80000000 	or	r0, r0, r0

20020bb0 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20020bb0:	3021fff0 	addik	r1, r1, -16
20020bb4:	fa610008 	swi	r19, r1, 8
20020bb8:	fa81000c 	swi	r20, r1, 12
20020bbc:	12610000 	addk	r19, r1, r0
20020bc0:	96808000 	mfs	r20, rpc
20020bc4:	b000dffe 	imm	-8194
20020bc8:	32940d9c 	addik	r20, r20, 3484
20020bcc:	f8b30014 	swi	r5, r19, 20
20020bd0:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20020bd4:	e8730014 	lwi	r3, r19, 20
20020bd8:	e8830004 	lwi	r4, r3, 4
20020bdc:	e8730014 	lwi	r3, r19, 20
20020be0:	e8a3000c 	lwi	r5, r3, 12
20020be4:	e8730018 	lwi	r3, r19, 24
20020be8:	64630402 	bslli	r3, r3, 2
20020bec:	10651800 	addk	r3, r5, r3
20020bf0:	e8a30000 	lwi	r5, r3, 0
20020bf4:	e8730014 	lwi	r3, r19, 20
20020bf8:	e8630000 	lwi	r3, r3, 0
20020bfc:	3063ffff 	addik	r3, r3, -1
20020c00:	84651800 	and	r3, r5, r3
20020c04:	64630402 	bslli	r3, r3, 2
20020c08:	10641800 	addk	r3, r4, r3
20020c0c:	e8630000 	lwi	r3, r3, 0
20020c10:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20020c14:	e8730014 	lwi	r3, r19, 20
20020c18:	e883000c 	lwi	r4, r3, 12
20020c1c:	e8730018 	lwi	r3, r19, 24
20020c20:	64630402 	bslli	r3, r3, 2
20020c24:	10641800 	addk	r3, r4, r3
20020c28:	e8830000 	lwi	r4, r3, 0
20020c2c:	30840001 	addik	r4, r4, 1
20020c30:	f8830000 	swi	r4, r3, 0
    return value;
20020c34:	e8730004 	lwi	r3, r19, 4
}
20020c38:	10330000 	addk	r1, r19, r0
20020c3c:	ea610008 	lwi	r19, r1, 8
20020c40:	ea81000c 	lwi	r20, r1, 12
20020c44:	30210010 	addik	r1, r1, 16
20020c48:	b60f0008 	rtsd	r15, 8
20020c4c:	80000000 	or	r0, r0, r0

20020c50 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20020c50:	3021fff4 	addik	r1, r1, -12
20020c54:	fa610004 	swi	r19, r1, 4
20020c58:	fa810008 	swi	r20, r1, 8
20020c5c:	12610000 	addk	r19, r1, r0
20020c60:	96808000 	mfs	r20, rpc
20020c64:	b000dffe 	imm	-8194
20020c68:	32940cfc 	addik	r20, r20, 3324
20020c6c:	f8b30010 	swi	r5, r19, 16
20020c70:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20020c74:	e8730010 	lwi	r3, r19, 16
20020c78:	e8830004 	lwi	r4, r3, 4
20020c7c:	e8730010 	lwi	r3, r19, 16
20020c80:	e8630010 	lwi	r3, r3, 16
20020c84:	e8a30000 	lwi	r5, r3, 0
20020c88:	e8730010 	lwi	r3, r19, 16
20020c8c:	e8630000 	lwi	r3, r3, 0
20020c90:	3063ffff 	addik	r3, r3, -1
20020c94:	84651800 	and	r3, r5, r3
20020c98:	64630402 	bslli	r3, r3, 2
20020c9c:	10641800 	addk	r3, r4, r3
20020ca0:	e8930014 	lwi	r4, r19, 20
20020ca4:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20020ca8:	e8730010 	lwi	r3, r19, 16
20020cac:	e8630010 	lwi	r3, r3, 16
20020cb0:	e8830000 	lwi	r4, r3, 0
20020cb4:	30840001 	addik	r4, r4, 1
20020cb8:	f8830000 	swi	r4, r3, 0
}
20020cbc:	10330000 	addk	r1, r19, r0
20020cc0:	ea610004 	lwi	r19, r1, 4
20020cc4:	ea810008 	lwi	r20, r1, 8
20020cc8:	3021000c 	addik	r1, r1, 12
20020ccc:	b60f0008 	rtsd	r15, 8
20020cd0:	80000000 	or	r0, r0, r0

20020cd4 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20020cd4:	3021fff4 	addik	r1, r1, -12
20020cd8:	fa610004 	swi	r19, r1, 4
20020cdc:	fa810008 	swi	r20, r1, 8
20020ce0:	12610000 	addk	r19, r1, r0
20020ce4:	96808000 	mfs	r20, rpc
20020ce8:	b000dffe 	imm	-8194
20020cec:	32940c78 	addik	r20, r20, 3192
20020cf0:	f8b30010 	swi	r5, r19, 16
20020cf4:	f8d30014 	swi	r6, r19, 20
20020cf8:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20020cfc:	e8730010 	lwi	r3, r19, 16
20020d00:	e8630010 	lwi	r3, r3, 16
20020d04:	e8830000 	lwi	r4, r3, 0
20020d08:	e8730010 	lwi	r3, r19, 16
20020d0c:	e8a3000c 	lwi	r5, r3, 12
20020d10:	e8730014 	lwi	r3, r19, 20
20020d14:	64630402 	bslli	r3, r3, 2
20020d18:	10651800 	addk	r3, r5, r3
20020d1c:	e8630000 	lwi	r3, r3, 0
20020d20:	14a32000 	rsubk	r5, r3, r4
20020d24:	30600001 	addik	r3, r0, 1
20020d28:	e8930018 	lwi	r4, r19, 24
20020d2c:	16442803 	cmpu	r18, r4, r5
20020d30:	bcb20008 	bgei	r18, 8		// 20020d38
20020d34:	10600000 	addk	r3, r0, r0
20020d38:	a46300ff 	andi	r3, r3, 255
}
20020d3c:	10330000 	addk	r1, r19, r0
20020d40:	ea610004 	lwi	r19, r1, 4
20020d44:	ea810008 	lwi	r20, r1, 8
20020d48:	3021000c 	addik	r1, r1, 12
20020d4c:	b60f0008 	rtsd	r15, 8
20020d50:	80000000 	or	r0, r0, r0

20020d54 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20020d54:	3021fff4 	addik	r1, r1, -12
20020d58:	fa610004 	swi	r19, r1, 4
20020d5c:	fa810008 	swi	r20, r1, 8
20020d60:	12610000 	addk	r19, r1, r0
20020d64:	96808000 	mfs	r20, rpc
20020d68:	b000dffe 	imm	-8194
20020d6c:	32940bf8 	addik	r20, r20, 3064
20020d70:	f8b30010 	swi	r5, r19, 16
20020d74:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20020d78:	e8730010 	lwi	r3, r19, 16
20020d7c:	e8630010 	lwi	r3, r3, 16
20020d80:	e8830000 	lwi	r4, r3, 0
20020d84:	e8730010 	lwi	r3, r19, 16
20020d88:	e8a3000c 	lwi	r5, r3, 12
20020d8c:	e8730014 	lwi	r3, r19, 20
20020d90:	64630402 	bslli	r3, r3, 2
20020d94:	10651800 	addk	r3, r5, r3
20020d98:	e8630000 	lwi	r3, r3, 0
20020d9c:	14632000 	rsubk	r3, r3, r4
}
20020da0:	10330000 	addk	r1, r19, r0
20020da4:	ea610004 	lwi	r19, r1, 4
20020da8:	ea810008 	lwi	r20, r1, 8
20020dac:	3021000c 	addik	r1, r1, 12
20020db0:	b60f0008 	rtsd	r15, 8
20020db4:	80000000 	or	r0, r0, r0

20020db8 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20020db8:	3021fff0 	addik	r1, r1, -16
20020dbc:	fa610008 	swi	r19, r1, 8
20020dc0:	fa81000c 	swi	r20, r1, 12
20020dc4:	12610000 	addk	r19, r1, r0
20020dc8:	96808000 	mfs	r20, rpc
20020dcc:	b000dffe 	imm	-8194
20020dd0:	32940b94 	addik	r20, r20, 2964
20020dd4:	f8b30014 	swi	r5, r19, 20
20020dd8:	f8d30018 	swi	r6, r19, 24
20020ddc:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20020de0:	f8130004 	swi	r0, r19, 4
20020de4:	b800005c 	bri	92		// 20020e40
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20020de8:	e8730014 	lwi	r3, r19, 20
20020dec:	e8830000 	lwi	r4, r3, 0
20020df0:	e8730014 	lwi	r3, r19, 20
20020df4:	e8a3000c 	lwi	r5, r3, 12
20020df8:	e8730004 	lwi	r3, r19, 4
20020dfc:	64630402 	bslli	r3, r3, 2
20020e00:	10651800 	addk	r3, r5, r3
20020e04:	e8a30000 	lwi	r5, r3, 0
20020e08:	e8730014 	lwi	r3, r19, 20
20020e0c:	e8630010 	lwi	r3, r3, 16
20020e10:	e8630000 	lwi	r3, r3, 0
20020e14:	14632800 	rsubk	r3, r3, r5
20020e18:	10641800 	addk	r3, r4, r3
20020e1c:	30830001 	addik	r4, r3, 1
20020e20:	e873001c 	lwi	r3, r19, 28
20020e24:	16441803 	cmpu	r18, r4, r3
20020e28:	bc52000c 	blti	r18, 12		// 20020e34
            return 0;
20020e2c:	10600000 	addk	r3, r0, r0
20020e30:	b8000024 	bri	36		// 20020e54
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20020e34:	e8730004 	lwi	r3, r19, 4
20020e38:	30630001 	addik	r3, r3, 1
20020e3c:	f8730004 	swi	r3, r19, 4
20020e40:	e8930004 	lwi	r4, r19, 4
20020e44:	e8730018 	lwi	r3, r19, 24
20020e48:	16432003 	cmpu	r18, r3, r4
20020e4c:	bc52ff9c 	blti	r18, -100		// 20020de8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20020e50:	30600001 	addik	r3, r0, 1
}
20020e54:	10330000 	addk	r1, r19, r0
20020e58:	ea610008 	lwi	r19, r1, 8
20020e5c:	ea81000c 	lwi	r20, r1, 12
20020e60:	30210010 	addik	r1, r1, 16
20020e64:	b60f0008 	rtsd	r15, 8
20020e68:	80000000 	or	r0, r0, r0

20020e6c <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20020e6c:	3021ffe8 	addik	r1, r1, -24
20020e70:	fa610010 	swi	r19, r1, 16
20020e74:	fa810014 	swi	r20, r1, 20
20020e78:	12610000 	addk	r19, r1, r0
20020e7c:	96808000 	mfs	r20, rpc
20020e80:	b000dffe 	imm	-8194
20020e84:	32940ae0 	addik	r20, r20, 2784
20020e88:	f8b3001c 	swi	r5, r19, 28
20020e8c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20020e90:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20020e94:	f8130004 	swi	r0, r19, 4
20020e98:	b8000054 	bri	84		// 20020eec
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20020e9c:	e873001c 	lwi	r3, r19, 28
20020ea0:	e8630010 	lwi	r3, r3, 16
20020ea4:	e8830000 	lwi	r4, r3, 0
20020ea8:	e873001c 	lwi	r3, r19, 28
20020eac:	e8a3000c 	lwi	r5, r3, 12
20020eb0:	e8730004 	lwi	r3, r19, 4
20020eb4:	64630402 	bslli	r3, r3, 2
20020eb8:	10651800 	addk	r3, r5, r3
20020ebc:	e8630000 	lwi	r3, r3, 0
20020ec0:	14632000 	rsubk	r3, r3, r4
20020ec4:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20020ec8:	e8930008 	lwi	r4, r19, 8
20020ecc:	e873000c 	lwi	r3, r19, 12
20020ed0:	16441803 	cmpu	r18, r4, r3
20020ed4:	bcb20008 	bgei	r18, 8		// 20020edc
20020ed8:	10640000 	addk	r3, r4, r0
20020edc:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20020ee0:	e8730004 	lwi	r3, r19, 4
20020ee4:	30630001 	addik	r3, r3, 1
20020ee8:	f8730004 	swi	r3, r19, 4
20020eec:	e8930004 	lwi	r4, r19, 4
20020ef0:	e8730020 	lwi	r3, r19, 32
20020ef4:	16432003 	cmpu	r18, r3, r4
20020ef8:	bc52ffa4 	blti	r18, -92		// 20020e9c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20020efc:	e873001c 	lwi	r3, r19, 28
20020f00:	e8830000 	lwi	r4, r3, 0
20020f04:	e8730008 	lwi	r3, r19, 8
20020f08:	14632000 	rsubk	r3, r3, r4
}
20020f0c:	10330000 	addk	r1, r19, r0
20020f10:	ea610010 	lwi	r19, r1, 16
20020f14:	ea810014 	lwi	r20, r1, 20
20020f18:	30210018 	addik	r1, r1, 24
20020f1c:	b60f0008 	rtsd	r15, 8
20020f20:	80000000 	or	r0, r0, r0

20020f24 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20020f24:	3021fff0 	addik	r1, r1, -16
20020f28:	fa610008 	swi	r19, r1, 8
20020f2c:	fa81000c 	swi	r20, r1, 12
20020f30:	12610000 	addk	r19, r1, r0
20020f34:	96808000 	mfs	r20, rpc
20020f38:	b000dffe 	imm	-8194
20020f3c:	32940a28 	addik	r20, r20, 2600
20020f40:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20020f44:	e8730014 	lwi	r3, r19, 20
20020f48:	e8630010 	lwi	r3, r3, 16
20020f4c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20020f50:	f8130004 	swi	r0, r19, 4
20020f54:	b8000028 	bri	40		// 20020f7c
        fifo->read_inds[i] = 0;
20020f58:	e8730014 	lwi	r3, r19, 20
20020f5c:	e883000c 	lwi	r4, r3, 12
20020f60:	e8730004 	lwi	r3, r19, 4
20020f64:	64630402 	bslli	r3, r3, 2
20020f68:	10641800 	addk	r3, r4, r3
20020f6c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20020f70:	e8730004 	lwi	r3, r19, 4
20020f74:	30630001 	addik	r3, r3, 1
20020f78:	f8730004 	swi	r3, r19, 4
20020f7c:	e8730014 	lwi	r3, r19, 20
20020f80:	e8830008 	lwi	r4, r3, 8
20020f84:	e8730004 	lwi	r3, r19, 4
20020f88:	16441803 	cmpu	r18, r4, r3
20020f8c:	bc52ffcc 	blti	r18, -52		// 20020f58
        fifo->read_inds[i] = 0;
    }
}
20020f90:	10330000 	addk	r1, r19, r0
20020f94:	ea610008 	lwi	r19, r1, 8
20020f98:	ea81000c 	lwi	r20, r1, 12
20020f9c:	30210010 	addik	r1, r1, 16
20020fa0:	b60f0008 	rtsd	r15, 8
20020fa4:	80000000 	or	r0, r0, r0

20020fa8 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20020fa8:	3021ffec 	addik	r1, r1, -20
20020fac:	fa61000c 	swi	r19, r1, 12
20020fb0:	fa810010 	swi	r20, r1, 16
20020fb4:	12610000 	addk	r19, r1, r0
20020fb8:	96808000 	mfs	r20, rpc
20020fbc:	b000dffe 	imm	-8194
20020fc0:	329409a4 	addik	r20, r20, 2468
20020fc4:	f8b30018 	swi	r5, r19, 24
20020fc8:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20020fcc:	e8730018 	lwi	r3, r19, 24
20020fd0:	e8830004 	lwi	r4, r3, 4
20020fd4:	e8730018 	lwi	r3, r19, 24
20020fd8:	e8a3000c 	lwi	r5, r3, 12
20020fdc:	e873001c 	lwi	r3, r19, 28
20020fe0:	64630402 	bslli	r3, r3, 2
20020fe4:	10651800 	addk	r3, r5, r3
20020fe8:	e8a30000 	lwi	r5, r3, 0
20020fec:	e8730018 	lwi	r3, r19, 24
20020ff0:	e8630000 	lwi	r3, r3, 0
20020ff4:	3063ffff 	addik	r3, r3, -1
20020ff8:	84651800 	and	r3, r5, r3
20020ffc:	64630403 	bslli	r3, r3, 3
20021000:	10641800 	addk	r3, r4, r3
20021004:	e8830000 	lwi	r4, r3, 0
20021008:	e8a30004 	lwi	r5, r3, 4
2002100c:	f8930004 	swi	r4, r19, 4
20021010:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20021014:	e8730018 	lwi	r3, r19, 24
20021018:	e883000c 	lwi	r4, r3, 12
2002101c:	e873001c 	lwi	r3, r19, 28
20021020:	64630402 	bslli	r3, r3, 2
20021024:	10641800 	addk	r3, r4, r3
20021028:	e8830000 	lwi	r4, r3, 0
2002102c:	30840001 	addik	r4, r4, 1
20021030:	f8830000 	swi	r4, r3, 0
    return value;
20021034:	e8930004 	lwi	r4, r19, 4
20021038:	e8b30008 	lwi	r5, r19, 8
}
2002103c:	10640000 	addk	r3, r4, r0
20021040:	10850000 	addk	r4, r5, r0
20021044:	10330000 	addk	r1, r19, r0
20021048:	ea61000c 	lwi	r19, r1, 12
2002104c:	ea810010 	lwi	r20, r1, 16
20021050:	30210014 	addik	r1, r1, 20
20021054:	b60f0008 	rtsd	r15, 8
20021058:	80000000 	or	r0, r0, r0

2002105c <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002105c:	3021fff4 	addik	r1, r1, -12
20021060:	fa610004 	swi	r19, r1, 4
20021064:	fa810008 	swi	r20, r1, 8
20021068:	12610000 	addk	r19, r1, r0
2002106c:	96808000 	mfs	r20, rpc
20021070:	b000dffe 	imm	-8194
20021074:	329408f0 	addik	r20, r20, 2288
20021078:	f8b30010 	swi	r5, r19, 16
2002107c:	f8d30014 	swi	r6, r19, 20
20021080:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20021084:	e8730010 	lwi	r3, r19, 16
20021088:	e8830004 	lwi	r4, r3, 4
2002108c:	e8730010 	lwi	r3, r19, 16
20021090:	e8630010 	lwi	r3, r3, 16
20021094:	e8a30000 	lwi	r5, r3, 0
20021098:	e8730010 	lwi	r3, r19, 16
2002109c:	e8630000 	lwi	r3, r3, 0
200210a0:	3063ffff 	addik	r3, r3, -1
200210a4:	84651800 	and	r3, r5, r3
200210a8:	64630403 	bslli	r3, r3, 3
200210ac:	10641800 	addk	r3, r4, r3
200210b0:	e8930014 	lwi	r4, r19, 20
200210b4:	e8b30018 	lwi	r5, r19, 24
200210b8:	f8830000 	swi	r4, r3, 0
200210bc:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
200210c0:	e8730010 	lwi	r3, r19, 16
200210c4:	e8630010 	lwi	r3, r3, 16
200210c8:	e8830000 	lwi	r4, r3, 0
200210cc:	30840001 	addik	r4, r4, 1
200210d0:	f8830000 	swi	r4, r3, 0
}
200210d4:	10330000 	addk	r1, r19, r0
200210d8:	ea610004 	lwi	r19, r1, 4
200210dc:	ea810008 	lwi	r20, r1, 8
200210e0:	3021000c 	addik	r1, r1, 12
200210e4:	b60f0008 	rtsd	r15, 8
200210e8:	80000000 	or	r0, r0, r0

200210ec <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200210ec:	3021fff4 	addik	r1, r1, -12
200210f0:	fa610004 	swi	r19, r1, 4
200210f4:	fa810008 	swi	r20, r1, 8
200210f8:	12610000 	addk	r19, r1, r0
200210fc:	96808000 	mfs	r20, rpc
20021100:	b000dffe 	imm	-8194
20021104:	32940860 	addik	r20, r20, 2144
20021108:	f8b30010 	swi	r5, r19, 16
2002110c:	f8d30014 	swi	r6, r19, 20
20021110:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20021114:	e8730010 	lwi	r3, r19, 16
20021118:	e8630010 	lwi	r3, r3, 16
2002111c:	e8830000 	lwi	r4, r3, 0
20021120:	e8730010 	lwi	r3, r19, 16
20021124:	e8a3000c 	lwi	r5, r3, 12
20021128:	e8730014 	lwi	r3, r19, 20
2002112c:	64630402 	bslli	r3, r3, 2
20021130:	10651800 	addk	r3, r5, r3
20021134:	e8630000 	lwi	r3, r3, 0
20021138:	14a32000 	rsubk	r5, r3, r4
2002113c:	30600001 	addik	r3, r0, 1
20021140:	e8930018 	lwi	r4, r19, 24
20021144:	16442803 	cmpu	r18, r4, r5
20021148:	bcb20008 	bgei	r18, 8		// 20021150
2002114c:	10600000 	addk	r3, r0, r0
20021150:	a46300ff 	andi	r3, r3, 255
}
20021154:	10330000 	addk	r1, r19, r0
20021158:	ea610004 	lwi	r19, r1, 4
2002115c:	ea810008 	lwi	r20, r1, 8
20021160:	3021000c 	addik	r1, r1, 12
20021164:	b60f0008 	rtsd	r15, 8
20021168:	80000000 	or	r0, r0, r0

2002116c <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002116c:	3021fff4 	addik	r1, r1, -12
20021170:	fa610004 	swi	r19, r1, 4
20021174:	fa810008 	swi	r20, r1, 8
20021178:	12610000 	addk	r19, r1, r0
2002117c:	96808000 	mfs	r20, rpc
20021180:	b000dffe 	imm	-8194
20021184:	329407e0 	addik	r20, r20, 2016
20021188:	f8b30010 	swi	r5, r19, 16
2002118c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20021190:	e8730010 	lwi	r3, r19, 16
20021194:	e8630010 	lwi	r3, r3, 16
20021198:	e8830000 	lwi	r4, r3, 0
2002119c:	e8730010 	lwi	r3, r19, 16
200211a0:	e8a3000c 	lwi	r5, r3, 12
200211a4:	e8730014 	lwi	r3, r19, 20
200211a8:	64630402 	bslli	r3, r3, 2
200211ac:	10651800 	addk	r3, r5, r3
200211b0:	e8630000 	lwi	r3, r3, 0
200211b4:	14632000 	rsubk	r3, r3, r4
}
200211b8:	10330000 	addk	r1, r19, r0
200211bc:	ea610004 	lwi	r19, r1, 4
200211c0:	ea810008 	lwi	r20, r1, 8
200211c4:	3021000c 	addik	r1, r1, 12
200211c8:	b60f0008 	rtsd	r15, 8
200211cc:	80000000 	or	r0, r0, r0

200211d0 <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200211d0:	3021fff0 	addik	r1, r1, -16
200211d4:	fa610008 	swi	r19, r1, 8
200211d8:	fa81000c 	swi	r20, r1, 12
200211dc:	12610000 	addk	r19, r1, r0
200211e0:	96808000 	mfs	r20, rpc
200211e4:	b000dffe 	imm	-8194
200211e8:	3294077c 	addik	r20, r20, 1916
200211ec:	f8b30014 	swi	r5, r19, 20
200211f0:	f8d30018 	swi	r6, r19, 24
200211f4:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200211f8:	f8130004 	swi	r0, r19, 4
200211fc:	b800005c 	bri	92		// 20021258
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20021200:	e8730014 	lwi	r3, r19, 20
20021204:	e8830000 	lwi	r4, r3, 0
20021208:	e8730014 	lwi	r3, r19, 20
2002120c:	e8a3000c 	lwi	r5, r3, 12
20021210:	e8730004 	lwi	r3, r19, 4
20021214:	64630402 	bslli	r3, r3, 2
20021218:	10651800 	addk	r3, r5, r3
2002121c:	e8a30000 	lwi	r5, r3, 0
20021220:	e8730014 	lwi	r3, r19, 20
20021224:	e8630010 	lwi	r3, r3, 16
20021228:	e8630000 	lwi	r3, r3, 0
2002122c:	14632800 	rsubk	r3, r3, r5
20021230:	10641800 	addk	r3, r4, r3
20021234:	30830001 	addik	r4, r3, 1
20021238:	e873001c 	lwi	r3, r19, 28
2002123c:	16441803 	cmpu	r18, r4, r3
20021240:	bc52000c 	blti	r18, 12		// 2002124c
            return 0;
20021244:	10600000 	addk	r3, r0, r0
20021248:	b8000024 	bri	36		// 2002126c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002124c:	e8730004 	lwi	r3, r19, 4
20021250:	30630001 	addik	r3, r3, 1
20021254:	f8730004 	swi	r3, r19, 4
20021258:	e8930004 	lwi	r4, r19, 4
2002125c:	e8730018 	lwi	r3, r19, 24
20021260:	16432003 	cmpu	r18, r3, r4
20021264:	bc52ff9c 	blti	r18, -100		// 20021200
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20021268:	30600001 	addik	r3, r0, 1
}
2002126c:	10330000 	addk	r1, r19, r0
20021270:	ea610008 	lwi	r19, r1, 8
20021274:	ea81000c 	lwi	r20, r1, 12
20021278:	30210010 	addik	r1, r1, 16
2002127c:	b60f0008 	rtsd	r15, 8
20021280:	80000000 	or	r0, r0, r0

20021284 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20021284:	3021ffe8 	addik	r1, r1, -24
20021288:	fa610010 	swi	r19, r1, 16
2002128c:	fa810014 	swi	r20, r1, 20
20021290:	12610000 	addk	r19, r1, r0
20021294:	96808000 	mfs	r20, rpc
20021298:	b000dffe 	imm	-8194
2002129c:	329406c8 	addik	r20, r20, 1736
200212a0:	f8b3001c 	swi	r5, r19, 28
200212a4:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
200212a8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200212ac:	f8130004 	swi	r0, r19, 4
200212b0:	b8000054 	bri	84		// 20021304
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200212b4:	e873001c 	lwi	r3, r19, 28
200212b8:	e8630010 	lwi	r3, r3, 16
200212bc:	e8830000 	lwi	r4, r3, 0
200212c0:	e873001c 	lwi	r3, r19, 28
200212c4:	e8a3000c 	lwi	r5, r3, 12
200212c8:	e8730004 	lwi	r3, r19, 4
200212cc:	64630402 	bslli	r3, r3, 2
200212d0:	10651800 	addk	r3, r5, r3
200212d4:	e8630000 	lwi	r3, r3, 0
200212d8:	14632000 	rsubk	r3, r3, r4
200212dc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200212e0:	e8930008 	lwi	r4, r19, 8
200212e4:	e873000c 	lwi	r3, r19, 12
200212e8:	16441803 	cmpu	r18, r4, r3
200212ec:	bcb20008 	bgei	r18, 8		// 200212f4
200212f0:	10640000 	addk	r3, r4, r0
200212f4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200212f8:	e8730004 	lwi	r3, r19, 4
200212fc:	30630001 	addik	r3, r3, 1
20021300:	f8730004 	swi	r3, r19, 4
20021304:	e8930004 	lwi	r4, r19, 4
20021308:	e8730020 	lwi	r3, r19, 32
2002130c:	16432003 	cmpu	r18, r3, r4
20021310:	bc52ffa4 	blti	r18, -92		// 200212b4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20021314:	e873001c 	lwi	r3, r19, 28
20021318:	e8830000 	lwi	r4, r3, 0
2002131c:	e8730008 	lwi	r3, r19, 8
20021320:	14632000 	rsubk	r3, r3, r4
}
20021324:	10330000 	addk	r1, r19, r0
20021328:	ea610010 	lwi	r19, r1, 16
2002132c:	ea810014 	lwi	r20, r1, 20
20021330:	30210018 	addik	r1, r1, 24
20021334:	b60f0008 	rtsd	r15, 8
20021338:	80000000 	or	r0, r0, r0

2002133c <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002133c:	3021fff0 	addik	r1, r1, -16
20021340:	fa610008 	swi	r19, r1, 8
20021344:	fa81000c 	swi	r20, r1, 12
20021348:	12610000 	addk	r19, r1, r0
2002134c:	96808000 	mfs	r20, rpc
20021350:	b000dffe 	imm	-8194
20021354:	32940610 	addik	r20, r20, 1552
20021358:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2002135c:	e8730014 	lwi	r3, r19, 20
20021360:	e8630010 	lwi	r3, r3, 16
20021364:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20021368:	f8130004 	swi	r0, r19, 4
2002136c:	b8000028 	bri	40		// 20021394
        fifo->read_inds[i] = 0;
20021370:	e8730014 	lwi	r3, r19, 20
20021374:	e883000c 	lwi	r4, r3, 12
20021378:	e8730004 	lwi	r3, r19, 4
2002137c:	64630402 	bslli	r3, r3, 2
20021380:	10641800 	addk	r3, r4, r3
20021384:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20021388:	e8730004 	lwi	r3, r19, 4
2002138c:	30630001 	addik	r3, r3, 1
20021390:	f8730004 	swi	r3, r19, 4
20021394:	e8730014 	lwi	r3, r19, 20
20021398:	e8830008 	lwi	r4, r3, 8
2002139c:	e8730004 	lwi	r3, r19, 4
200213a0:	16441803 	cmpu	r18, r4, r3
200213a4:	bc52ffcc 	blti	r18, -52		// 20021370
        fifo->read_inds[i] = 0;
    }
}
200213a8:	10330000 	addk	r1, r19, r0
200213ac:	ea610008 	lwi	r19, r1, 8
200213b0:	ea81000c 	lwi	r20, r1, 12
200213b4:	30210010 	addik	r1, r1, 16
200213b8:	b60f0008 	rtsd	r15, 8
200213bc:	80000000 	or	r0, r0, r0

200213c0 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200213c0:	3021fff0 	addik	r1, r1, -16
200213c4:	fa610008 	swi	r19, r1, 8
200213c8:	fa81000c 	swi	r20, r1, 12
200213cc:	12610000 	addk	r19, r1, r0
200213d0:	96808000 	mfs	r20, rpc
200213d4:	b000dffe 	imm	-8194
200213d8:	3294058c 	addik	r20, r20, 1420
200213dc:	f8b30014 	swi	r5, r19, 20
200213e0:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200213e4:	e8730014 	lwi	r3, r19, 20
200213e8:	e8830004 	lwi	r4, r3, 4
200213ec:	e8730014 	lwi	r3, r19, 20
200213f0:	e8a3000c 	lwi	r5, r3, 12
200213f4:	e8730018 	lwi	r3, r19, 24
200213f8:	64630402 	bslli	r3, r3, 2
200213fc:	10651800 	addk	r3, r5, r3
20021400:	e8a30000 	lwi	r5, r3, 0
20021404:	e8730014 	lwi	r3, r19, 20
20021408:	e8630000 	lwi	r3, r3, 0
2002140c:	3063ffff 	addik	r3, r3, -1
20021410:	84651800 	and	r3, r5, r3
20021414:	10641800 	addk	r3, r4, r3
20021418:	e0630000 	lbui	r3, r3, 0
2002141c:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20021420:	e8730014 	lwi	r3, r19, 20
20021424:	e883000c 	lwi	r4, r3, 12
20021428:	e8730018 	lwi	r3, r19, 24
2002142c:	64630402 	bslli	r3, r3, 2
20021430:	10641800 	addk	r3, r4, r3
20021434:	e8830000 	lwi	r4, r3, 0
20021438:	30840001 	addik	r4, r4, 1
2002143c:	f8830000 	swi	r4, r3, 0
    return value;
20021440:	e0730004 	lbui	r3, r19, 4
}
20021444:	10330000 	addk	r1, r19, r0
20021448:	ea610008 	lwi	r19, r1, 8
2002144c:	ea81000c 	lwi	r20, r1, 12
20021450:	30210010 	addik	r1, r1, 16
20021454:	b60f0008 	rtsd	r15, 8
20021458:	80000000 	or	r0, r0, r0

2002145c <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002145c:	3021fff4 	addik	r1, r1, -12
20021460:	fa610004 	swi	r19, r1, 4
20021464:	fa810008 	swi	r20, r1, 8
20021468:	12610000 	addk	r19, r1, r0
2002146c:	96808000 	mfs	r20, rpc
20021470:	b000dffe 	imm	-8194
20021474:	329404f0 	addik	r20, r20, 1264
20021478:	f8b30010 	swi	r5, r19, 16
2002147c:	10660000 	addk	r3, r6, r0
20021480:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20021484:	e8730010 	lwi	r3, r19, 16
20021488:	e8830004 	lwi	r4, r3, 4
2002148c:	e8730010 	lwi	r3, r19, 16
20021490:	e8630010 	lwi	r3, r3, 16
20021494:	e8a30000 	lwi	r5, r3, 0
20021498:	e8730010 	lwi	r3, r19, 16
2002149c:	e8630000 	lwi	r3, r3, 0
200214a0:	3063ffff 	addik	r3, r3, -1
200214a4:	84651800 	and	r3, r5, r3
200214a8:	10641800 	addk	r3, r4, r3
200214ac:	e0930014 	lbui	r4, r19, 20
200214b0:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
200214b4:	e8730010 	lwi	r3, r19, 16
200214b8:	e8630010 	lwi	r3, r3, 16
200214bc:	e8830000 	lwi	r4, r3, 0
200214c0:	30840001 	addik	r4, r4, 1
200214c4:	f8830000 	swi	r4, r3, 0
}
200214c8:	10330000 	addk	r1, r19, r0
200214cc:	ea610004 	lwi	r19, r1, 4
200214d0:	ea810008 	lwi	r20, r1, 8
200214d4:	3021000c 	addik	r1, r1, 12
200214d8:	b60f0008 	rtsd	r15, 8
200214dc:	80000000 	or	r0, r0, r0

200214e0 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200214e0:	3021fff4 	addik	r1, r1, -12
200214e4:	fa610004 	swi	r19, r1, 4
200214e8:	fa810008 	swi	r20, r1, 8
200214ec:	12610000 	addk	r19, r1, r0
200214f0:	96808000 	mfs	r20, rpc
200214f4:	b000dffe 	imm	-8194
200214f8:	3294046c 	addik	r20, r20, 1132
200214fc:	f8b30010 	swi	r5, r19, 16
20021500:	f8d30014 	swi	r6, r19, 20
20021504:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20021508:	e8730010 	lwi	r3, r19, 16
2002150c:	e8630010 	lwi	r3, r3, 16
20021510:	e8830000 	lwi	r4, r3, 0
20021514:	e8730010 	lwi	r3, r19, 16
20021518:	e8a3000c 	lwi	r5, r3, 12
2002151c:	e8730014 	lwi	r3, r19, 20
20021520:	64630402 	bslli	r3, r3, 2
20021524:	10651800 	addk	r3, r5, r3
20021528:	e8630000 	lwi	r3, r3, 0
2002152c:	14a32000 	rsubk	r5, r3, r4
20021530:	30600001 	addik	r3, r0, 1
20021534:	e8930018 	lwi	r4, r19, 24
20021538:	16442803 	cmpu	r18, r4, r5
2002153c:	bcb20008 	bgei	r18, 8		// 20021544
20021540:	10600000 	addk	r3, r0, r0
20021544:	a46300ff 	andi	r3, r3, 255
}
20021548:	10330000 	addk	r1, r19, r0
2002154c:	ea610004 	lwi	r19, r1, 4
20021550:	ea810008 	lwi	r20, r1, 8
20021554:	3021000c 	addik	r1, r1, 12
20021558:	b60f0008 	rtsd	r15, 8
2002155c:	80000000 	or	r0, r0, r0

20021560 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20021560:	3021fff4 	addik	r1, r1, -12
20021564:	fa610004 	swi	r19, r1, 4
20021568:	fa810008 	swi	r20, r1, 8
2002156c:	12610000 	addk	r19, r1, r0
20021570:	96808000 	mfs	r20, rpc
20021574:	b000dffe 	imm	-8194
20021578:	329403ec 	addik	r20, r20, 1004
2002157c:	f8b30010 	swi	r5, r19, 16
20021580:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20021584:	e8730010 	lwi	r3, r19, 16
20021588:	e8630010 	lwi	r3, r3, 16
2002158c:	e8830000 	lwi	r4, r3, 0
20021590:	e8730010 	lwi	r3, r19, 16
20021594:	e8a3000c 	lwi	r5, r3, 12
20021598:	e8730014 	lwi	r3, r19, 20
2002159c:	64630402 	bslli	r3, r3, 2
200215a0:	10651800 	addk	r3, r5, r3
200215a4:	e8630000 	lwi	r3, r3, 0
200215a8:	14632000 	rsubk	r3, r3, r4
}
200215ac:	10330000 	addk	r1, r19, r0
200215b0:	ea610004 	lwi	r19, r1, 4
200215b4:	ea810008 	lwi	r20, r1, 8
200215b8:	3021000c 	addik	r1, r1, 12
200215bc:	b60f0008 	rtsd	r15, 8
200215c0:	80000000 	or	r0, r0, r0

200215c4 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200215c4:	3021fff0 	addik	r1, r1, -16
200215c8:	fa610008 	swi	r19, r1, 8
200215cc:	fa81000c 	swi	r20, r1, 12
200215d0:	12610000 	addk	r19, r1, r0
200215d4:	96808000 	mfs	r20, rpc
200215d8:	b000dffe 	imm	-8194
200215dc:	32940388 	addik	r20, r20, 904
200215e0:	f8b30014 	swi	r5, r19, 20
200215e4:	f8d30018 	swi	r6, r19, 24
200215e8:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200215ec:	f8130004 	swi	r0, r19, 4
200215f0:	b800005c 	bri	92		// 2002164c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200215f4:	e8730014 	lwi	r3, r19, 20
200215f8:	e8830000 	lwi	r4, r3, 0
200215fc:	e8730014 	lwi	r3, r19, 20
20021600:	e8a3000c 	lwi	r5, r3, 12
20021604:	e8730004 	lwi	r3, r19, 4
20021608:	64630402 	bslli	r3, r3, 2
2002160c:	10651800 	addk	r3, r5, r3
20021610:	e8a30000 	lwi	r5, r3, 0
20021614:	e8730014 	lwi	r3, r19, 20
20021618:	e8630010 	lwi	r3, r3, 16
2002161c:	e8630000 	lwi	r3, r3, 0
20021620:	14632800 	rsubk	r3, r3, r5
20021624:	10641800 	addk	r3, r4, r3
20021628:	30830001 	addik	r4, r3, 1
2002162c:	e873001c 	lwi	r3, r19, 28
20021630:	16441803 	cmpu	r18, r4, r3
20021634:	bc52000c 	blti	r18, 12		// 20021640
            return 0;
20021638:	10600000 	addk	r3, r0, r0
2002163c:	b8000024 	bri	36		// 20021660
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20021640:	e8730004 	lwi	r3, r19, 4
20021644:	30630001 	addik	r3, r3, 1
20021648:	f8730004 	swi	r3, r19, 4
2002164c:	e8930004 	lwi	r4, r19, 4
20021650:	e8730018 	lwi	r3, r19, 24
20021654:	16432003 	cmpu	r18, r3, r4
20021658:	bc52ff9c 	blti	r18, -100		// 200215f4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002165c:	30600001 	addik	r3, r0, 1
}
20021660:	10330000 	addk	r1, r19, r0
20021664:	ea610008 	lwi	r19, r1, 8
20021668:	ea81000c 	lwi	r20, r1, 12
2002166c:	30210010 	addik	r1, r1, 16
20021670:	b60f0008 	rtsd	r15, 8
20021674:	80000000 	or	r0, r0, r0

20021678 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20021678:	3021ffe8 	addik	r1, r1, -24
2002167c:	fa610010 	swi	r19, r1, 16
20021680:	fa810014 	swi	r20, r1, 20
20021684:	12610000 	addk	r19, r1, r0
20021688:	96808000 	mfs	r20, rpc
2002168c:	b000dffe 	imm	-8194
20021690:	329402d4 	addik	r20, r20, 724
20021694:	f8b3001c 	swi	r5, r19, 28
20021698:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002169c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200216a0:	f8130004 	swi	r0, r19, 4
200216a4:	b8000054 	bri	84		// 200216f8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200216a8:	e873001c 	lwi	r3, r19, 28
200216ac:	e8630010 	lwi	r3, r3, 16
200216b0:	e8830000 	lwi	r4, r3, 0
200216b4:	e873001c 	lwi	r3, r19, 28
200216b8:	e8a3000c 	lwi	r5, r3, 12
200216bc:	e8730004 	lwi	r3, r19, 4
200216c0:	64630402 	bslli	r3, r3, 2
200216c4:	10651800 	addk	r3, r5, r3
200216c8:	e8630000 	lwi	r3, r3, 0
200216cc:	14632000 	rsubk	r3, r3, r4
200216d0:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200216d4:	e8930008 	lwi	r4, r19, 8
200216d8:	e873000c 	lwi	r3, r19, 12
200216dc:	16441803 	cmpu	r18, r4, r3
200216e0:	bcb20008 	bgei	r18, 8		// 200216e8
200216e4:	10640000 	addk	r3, r4, r0
200216e8:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200216ec:	e8730004 	lwi	r3, r19, 4
200216f0:	30630001 	addik	r3, r3, 1
200216f4:	f8730004 	swi	r3, r19, 4
200216f8:	e8930004 	lwi	r4, r19, 4
200216fc:	e8730020 	lwi	r3, r19, 32
20021700:	16432003 	cmpu	r18, r3, r4
20021704:	bc52ffa4 	blti	r18, -92		// 200216a8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20021708:	e873001c 	lwi	r3, r19, 28
2002170c:	e8830000 	lwi	r4, r3, 0
20021710:	e8730008 	lwi	r3, r19, 8
20021714:	14632000 	rsubk	r3, r3, r4
}
20021718:	10330000 	addk	r1, r19, r0
2002171c:	ea610010 	lwi	r19, r1, 16
20021720:	ea810014 	lwi	r20, r1, 20
20021724:	30210018 	addik	r1, r1, 24
20021728:	b60f0008 	rtsd	r15, 8
2002172c:	80000000 	or	r0, r0, r0

20021730 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20021730:	3021fff0 	addik	r1, r1, -16
20021734:	fa610008 	swi	r19, r1, 8
20021738:	fa81000c 	swi	r20, r1, 12
2002173c:	12610000 	addk	r19, r1, r0
20021740:	96808000 	mfs	r20, rpc
20021744:	b000dffe 	imm	-8194
20021748:	3294021c 	addik	r20, r20, 540
2002174c:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20021750:	e8730014 	lwi	r3, r19, 20
20021754:	e8630010 	lwi	r3, r3, 16
20021758:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002175c:	f8130004 	swi	r0, r19, 4
20021760:	b8000028 	bri	40		// 20021788
        fifo->read_inds[i] = 0;
20021764:	e8730014 	lwi	r3, r19, 20
20021768:	e883000c 	lwi	r4, r3, 12
2002176c:	e8730004 	lwi	r3, r19, 4
20021770:	64630402 	bslli	r3, r3, 2
20021774:	10641800 	addk	r3, r4, r3
20021778:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002177c:	e8730004 	lwi	r3, r19, 4
20021780:	30630001 	addik	r3, r3, 1
20021784:	f8730004 	swi	r3, r19, 4
20021788:	e8730014 	lwi	r3, r19, 20
2002178c:	e8830008 	lwi	r4, r3, 8
20021790:	e8730004 	lwi	r3, r19, 4
20021794:	16441803 	cmpu	r18, r4, r3
20021798:	bc52ffcc 	blti	r18, -52		// 20021764
        fifo->read_inds[i] = 0;
    }
}
2002179c:	10330000 	addk	r1, r19, r0
200217a0:	ea610008 	lwi	r19, r1, 8
200217a4:	ea81000c 	lwi	r20, r1, 12
200217a8:	30210010 	addik	r1, r1, 16
200217ac:	b60f0008 	rtsd	r15, 8
200217b0:	80000000 	or	r0, r0, r0

200217b4 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200217b4:	3021fff0 	addik	r1, r1, -16
200217b8:	fa610008 	swi	r19, r1, 8
200217bc:	fa81000c 	swi	r20, r1, 12
200217c0:	12610000 	addk	r19, r1, r0
200217c4:	96808000 	mfs	r20, rpc
200217c8:	b000dffe 	imm	-8194
200217cc:	32940198 	addik	r20, r20, 408
200217d0:	f8b30014 	swi	r5, r19, 20
200217d4:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200217d8:	e8730014 	lwi	r3, r19, 20
200217dc:	e8830004 	lwi	r4, r3, 4
200217e0:	e8730014 	lwi	r3, r19, 20
200217e4:	e8a3000c 	lwi	r5, r3, 12
200217e8:	e8730018 	lwi	r3, r19, 24
200217ec:	64630402 	bslli	r3, r3, 2
200217f0:	10651800 	addk	r3, r5, r3
200217f4:	e8a30000 	lwi	r5, r3, 0
200217f8:	e8730014 	lwi	r3, r19, 20
200217fc:	e8630000 	lwi	r3, r3, 0
20021800:	3063ffff 	addik	r3, r3, -1
20021804:	84651800 	and	r3, r5, r3
20021808:	10631800 	addk	r3, r3, r3
2002180c:	10641800 	addk	r3, r4, r3
20021810:	e4630000 	lhui	r3, r3, 0
20021814:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20021818:	e8730014 	lwi	r3, r19, 20
2002181c:	e883000c 	lwi	r4, r3, 12
20021820:	e8730018 	lwi	r3, r19, 24
20021824:	64630402 	bslli	r3, r3, 2
20021828:	10641800 	addk	r3, r4, r3
2002182c:	e8830000 	lwi	r4, r3, 0
20021830:	30840001 	addik	r4, r4, 1
20021834:	f8830000 	swi	r4, r3, 0
    return value;
20021838:	e4730004 	lhui	r3, r19, 4
}
2002183c:	10330000 	addk	r1, r19, r0
20021840:	ea610008 	lwi	r19, r1, 8
20021844:	ea81000c 	lwi	r20, r1, 12
20021848:	30210010 	addik	r1, r1, 16
2002184c:	b60f0008 	rtsd	r15, 8
20021850:	80000000 	or	r0, r0, r0

20021854 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20021854:	3021fff4 	addik	r1, r1, -12
20021858:	fa610004 	swi	r19, r1, 4
2002185c:	fa810008 	swi	r20, r1, 8
20021860:	12610000 	addk	r19, r1, r0
20021864:	96808000 	mfs	r20, rpc
20021868:	b000dffe 	imm	-8194
2002186c:	329400f8 	addik	r20, r20, 248
20021870:	f8b30010 	swi	r5, r19, 16
20021874:	10660000 	addk	r3, r6, r0
20021878:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002187c:	e8730010 	lwi	r3, r19, 16
20021880:	e8830004 	lwi	r4, r3, 4
20021884:	e8730010 	lwi	r3, r19, 16
20021888:	e8630010 	lwi	r3, r3, 16
2002188c:	e8a30000 	lwi	r5, r3, 0
20021890:	e8730010 	lwi	r3, r19, 16
20021894:	e8630000 	lwi	r3, r3, 0
20021898:	3063ffff 	addik	r3, r3, -1
2002189c:	84651800 	and	r3, r5, r3
200218a0:	10631800 	addk	r3, r3, r3
200218a4:	10641800 	addk	r3, r4, r3
200218a8:	e4930014 	lhui	r4, r19, 20
200218ac:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
200218b0:	e8730010 	lwi	r3, r19, 16
200218b4:	e8630010 	lwi	r3, r3, 16
200218b8:	e8830000 	lwi	r4, r3, 0
200218bc:	30840001 	addik	r4, r4, 1
200218c0:	f8830000 	swi	r4, r3, 0
}
200218c4:	10330000 	addk	r1, r19, r0
200218c8:	ea610004 	lwi	r19, r1, 4
200218cc:	ea810008 	lwi	r20, r1, 8
200218d0:	3021000c 	addik	r1, r1, 12
200218d4:	b60f0008 	rtsd	r15, 8
200218d8:	80000000 	or	r0, r0, r0

200218dc <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200218dc:	3021fff4 	addik	r1, r1, -12
200218e0:	fa610004 	swi	r19, r1, 4
200218e4:	fa810008 	swi	r20, r1, 8
200218e8:	12610000 	addk	r19, r1, r0
200218ec:	96808000 	mfs	r20, rpc
200218f0:	b000dffe 	imm	-8194
200218f4:	32940070 	addik	r20, r20, 112
200218f8:	f8b30010 	swi	r5, r19, 16
200218fc:	f8d30014 	swi	r6, r19, 20
20021900:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20021904:	e8730010 	lwi	r3, r19, 16
20021908:	e8630010 	lwi	r3, r3, 16
2002190c:	e8830000 	lwi	r4, r3, 0
20021910:	e8730010 	lwi	r3, r19, 16
20021914:	e8a3000c 	lwi	r5, r3, 12
20021918:	e8730014 	lwi	r3, r19, 20
2002191c:	64630402 	bslli	r3, r3, 2
20021920:	10651800 	addk	r3, r5, r3
20021924:	e8630000 	lwi	r3, r3, 0
20021928:	14a32000 	rsubk	r5, r3, r4
2002192c:	30600001 	addik	r3, r0, 1
20021930:	e8930018 	lwi	r4, r19, 24
20021934:	16442803 	cmpu	r18, r4, r5
20021938:	bcb20008 	bgei	r18, 8		// 20021940
2002193c:	10600000 	addk	r3, r0, r0
20021940:	a46300ff 	andi	r3, r3, 255
}
20021944:	10330000 	addk	r1, r19, r0
20021948:	ea610004 	lwi	r19, r1, 4
2002194c:	ea810008 	lwi	r20, r1, 8
20021950:	3021000c 	addik	r1, r1, 12
20021954:	b60f0008 	rtsd	r15, 8
20021958:	80000000 	or	r0, r0, r0

2002195c <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002195c:	3021fff4 	addik	r1, r1, -12
20021960:	fa610004 	swi	r19, r1, 4
20021964:	fa810008 	swi	r20, r1, 8
20021968:	12610000 	addk	r19, r1, r0
2002196c:	96808000 	mfs	r20, rpc
20021970:	b000dffd 	imm	-8195
20021974:	3294fff0 	addik	r20, r20, -16
20021978:	f8b30010 	swi	r5, r19, 16
2002197c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20021980:	e8730010 	lwi	r3, r19, 16
20021984:	e8630010 	lwi	r3, r3, 16
20021988:	e8830000 	lwi	r4, r3, 0
2002198c:	e8730010 	lwi	r3, r19, 16
20021990:	e8a3000c 	lwi	r5, r3, 12
20021994:	e8730014 	lwi	r3, r19, 20
20021998:	64630402 	bslli	r3, r3, 2
2002199c:	10651800 	addk	r3, r5, r3
200219a0:	e8630000 	lwi	r3, r3, 0
200219a4:	14632000 	rsubk	r3, r3, r4
}
200219a8:	10330000 	addk	r1, r19, r0
200219ac:	ea610004 	lwi	r19, r1, 4
200219b0:	ea810008 	lwi	r20, r1, 8
200219b4:	3021000c 	addik	r1, r1, 12
200219b8:	b60f0008 	rtsd	r15, 8
200219bc:	80000000 	or	r0, r0, r0

200219c0 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200219c0:	3021fff0 	addik	r1, r1, -16
200219c4:	fa610008 	swi	r19, r1, 8
200219c8:	fa81000c 	swi	r20, r1, 12
200219cc:	12610000 	addk	r19, r1, r0
200219d0:	96808000 	mfs	r20, rpc
200219d4:	b000dffd 	imm	-8195
200219d8:	3294ff8c 	addik	r20, r20, -116
200219dc:	f8b30014 	swi	r5, r19, 20
200219e0:	f8d30018 	swi	r6, r19, 24
200219e4:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200219e8:	f8130004 	swi	r0, r19, 4
200219ec:	b800005c 	bri	92		// 20021a48
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200219f0:	e8730014 	lwi	r3, r19, 20
200219f4:	e8830000 	lwi	r4, r3, 0
200219f8:	e8730014 	lwi	r3, r19, 20
200219fc:	e8a3000c 	lwi	r5, r3, 12
20021a00:	e8730004 	lwi	r3, r19, 4
20021a04:	64630402 	bslli	r3, r3, 2
20021a08:	10651800 	addk	r3, r5, r3
20021a0c:	e8a30000 	lwi	r5, r3, 0
20021a10:	e8730014 	lwi	r3, r19, 20
20021a14:	e8630010 	lwi	r3, r3, 16
20021a18:	e8630000 	lwi	r3, r3, 0
20021a1c:	14632800 	rsubk	r3, r3, r5
20021a20:	10641800 	addk	r3, r4, r3
20021a24:	30830001 	addik	r4, r3, 1
20021a28:	e873001c 	lwi	r3, r19, 28
20021a2c:	16441803 	cmpu	r18, r4, r3
20021a30:	bc52000c 	blti	r18, 12		// 20021a3c
            return 0;
20021a34:	10600000 	addk	r3, r0, r0
20021a38:	b8000024 	bri	36		// 20021a5c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20021a3c:	e8730004 	lwi	r3, r19, 4
20021a40:	30630001 	addik	r3, r3, 1
20021a44:	f8730004 	swi	r3, r19, 4
20021a48:	e8930004 	lwi	r4, r19, 4
20021a4c:	e8730018 	lwi	r3, r19, 24
20021a50:	16432003 	cmpu	r18, r3, r4
20021a54:	bc52ff9c 	blti	r18, -100		// 200219f0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20021a58:	30600001 	addik	r3, r0, 1
}
20021a5c:	10330000 	addk	r1, r19, r0
20021a60:	ea610008 	lwi	r19, r1, 8
20021a64:	ea81000c 	lwi	r20, r1, 12
20021a68:	30210010 	addik	r1, r1, 16
20021a6c:	b60f0008 	rtsd	r15, 8
20021a70:	80000000 	or	r0, r0, r0

20021a74 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20021a74:	3021ffe8 	addik	r1, r1, -24
20021a78:	fa610010 	swi	r19, r1, 16
20021a7c:	fa810014 	swi	r20, r1, 20
20021a80:	12610000 	addk	r19, r1, r0
20021a84:	96808000 	mfs	r20, rpc
20021a88:	b000dffd 	imm	-8195
20021a8c:	3294fed8 	addik	r20, r20, -296
20021a90:	f8b3001c 	swi	r5, r19, 28
20021a94:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20021a98:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20021a9c:	f8130004 	swi	r0, r19, 4
20021aa0:	b8000054 	bri	84		// 20021af4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20021aa4:	e873001c 	lwi	r3, r19, 28
20021aa8:	e8630010 	lwi	r3, r3, 16
20021aac:	e8830000 	lwi	r4, r3, 0
20021ab0:	e873001c 	lwi	r3, r19, 28
20021ab4:	e8a3000c 	lwi	r5, r3, 12
20021ab8:	e8730004 	lwi	r3, r19, 4
20021abc:	64630402 	bslli	r3, r3, 2
20021ac0:	10651800 	addk	r3, r5, r3
20021ac4:	e8630000 	lwi	r3, r3, 0
20021ac8:	14632000 	rsubk	r3, r3, r4
20021acc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20021ad0:	e8930008 	lwi	r4, r19, 8
20021ad4:	e873000c 	lwi	r3, r19, 12
20021ad8:	16441803 	cmpu	r18, r4, r3
20021adc:	bcb20008 	bgei	r18, 8		// 20021ae4
20021ae0:	10640000 	addk	r3, r4, r0
20021ae4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20021ae8:	e8730004 	lwi	r3, r19, 4
20021aec:	30630001 	addik	r3, r3, 1
20021af0:	f8730004 	swi	r3, r19, 4
20021af4:	e8930004 	lwi	r4, r19, 4
20021af8:	e8730020 	lwi	r3, r19, 32
20021afc:	16432003 	cmpu	r18, r3, r4
20021b00:	bc52ffa4 	blti	r18, -92		// 20021aa4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20021b04:	e873001c 	lwi	r3, r19, 28
20021b08:	e8830000 	lwi	r4, r3, 0
20021b0c:	e8730008 	lwi	r3, r19, 8
20021b10:	14632000 	rsubk	r3, r3, r4
}
20021b14:	10330000 	addk	r1, r19, r0
20021b18:	ea610010 	lwi	r19, r1, 16
20021b1c:	ea810014 	lwi	r20, r1, 20
20021b20:	30210018 	addik	r1, r1, 24
20021b24:	b60f0008 	rtsd	r15, 8
20021b28:	80000000 	or	r0, r0, r0

20021b2c <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20021b2c:	3021fff0 	addik	r1, r1, -16
20021b30:	fa610008 	swi	r19, r1, 8
20021b34:	fa81000c 	swi	r20, r1, 12
20021b38:	12610000 	addk	r19, r1, r0
20021b3c:	96808000 	mfs	r20, rpc
20021b40:	b000dffd 	imm	-8195
20021b44:	3294fe20 	addik	r20, r20, -480
20021b48:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20021b4c:	e8730014 	lwi	r3, r19, 20
20021b50:	e8630010 	lwi	r3, r3, 16
20021b54:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20021b58:	f8130004 	swi	r0, r19, 4
20021b5c:	b8000028 	bri	40		// 20021b84
        fifo->read_inds[i] = 0;
20021b60:	e8730014 	lwi	r3, r19, 20
20021b64:	e883000c 	lwi	r4, r3, 12
20021b68:	e8730004 	lwi	r3, r19, 4
20021b6c:	64630402 	bslli	r3, r3, 2
20021b70:	10641800 	addk	r3, r4, r3
20021b74:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20021b78:	e8730004 	lwi	r3, r19, 4
20021b7c:	30630001 	addik	r3, r3, 1
20021b80:	f8730004 	swi	r3, r19, 4
20021b84:	e8730014 	lwi	r3, r19, 20
20021b88:	e8830008 	lwi	r4, r3, 8
20021b8c:	e8730004 	lwi	r3, r19, 4
20021b90:	16441803 	cmpu	r18, r4, r3
20021b94:	bc52ffcc 	blti	r18, -52		// 20021b60
        fifo->read_inds[i] = 0;
    }
}
20021b98:	10330000 	addk	r1, r19, r0
20021b9c:	ea610008 	lwi	r19, r1, 8
20021ba0:	ea81000c 	lwi	r20, r1, 12
20021ba4:	30210010 	addik	r1, r1, 16
20021ba8:	b60f0008 	rtsd	r15, 8
20021bac:	80000000 	or	r0, r0, r0

20021bb0 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20021bb0:	3021fff0 	addik	r1, r1, -16
20021bb4:	fa610008 	swi	r19, r1, 8
20021bb8:	fa81000c 	swi	r20, r1, 12
20021bbc:	12610000 	addk	r19, r1, r0
20021bc0:	96808000 	mfs	r20, rpc
20021bc4:	b000dffd 	imm	-8195
20021bc8:	3294fd9c 	addik	r20, r20, -612
20021bcc:	f8b30014 	swi	r5, r19, 20
20021bd0:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20021bd4:	e8730014 	lwi	r3, r19, 20
20021bd8:	e8830004 	lwi	r4, r3, 4
20021bdc:	e8730014 	lwi	r3, r19, 20
20021be0:	e8a3000c 	lwi	r5, r3, 12
20021be4:	e8730018 	lwi	r3, r19, 24
20021be8:	64630402 	bslli	r3, r3, 2
20021bec:	10651800 	addk	r3, r5, r3
20021bf0:	e8a30000 	lwi	r5, r3, 0
20021bf4:	e8730014 	lwi	r3, r19, 20
20021bf8:	e8630000 	lwi	r3, r3, 0
20021bfc:	3063ffff 	addik	r3, r3, -1
20021c00:	84651800 	and	r3, r5, r3
20021c04:	64630402 	bslli	r3, r3, 2
20021c08:	10641800 	addk	r3, r4, r3
20021c0c:	e8630000 	lwi	r3, r3, 0
20021c10:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20021c14:	e8730014 	lwi	r3, r19, 20
20021c18:	e883000c 	lwi	r4, r3, 12
20021c1c:	e8730018 	lwi	r3, r19, 24
20021c20:	64630402 	bslli	r3, r3, 2
20021c24:	10641800 	addk	r3, r4, r3
20021c28:	e8830000 	lwi	r4, r3, 0
20021c2c:	30840001 	addik	r4, r4, 1
20021c30:	f8830000 	swi	r4, r3, 0
    return value;
20021c34:	e8730004 	lwi	r3, r19, 4
}
20021c38:	10330000 	addk	r1, r19, r0
20021c3c:	ea610008 	lwi	r19, r1, 8
20021c40:	ea81000c 	lwi	r20, r1, 12
20021c44:	30210010 	addik	r1, r1, 16
20021c48:	b60f0008 	rtsd	r15, 8
20021c4c:	80000000 	or	r0, r0, r0

20021c50 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20021c50:	3021fff4 	addik	r1, r1, -12
20021c54:	fa610004 	swi	r19, r1, 4
20021c58:	fa810008 	swi	r20, r1, 8
20021c5c:	12610000 	addk	r19, r1, r0
20021c60:	96808000 	mfs	r20, rpc
20021c64:	b000dffd 	imm	-8195
20021c68:	3294fcfc 	addik	r20, r20, -772
20021c6c:	f8b30010 	swi	r5, r19, 16
20021c70:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20021c74:	e8730010 	lwi	r3, r19, 16
20021c78:	e8830004 	lwi	r4, r3, 4
20021c7c:	e8730010 	lwi	r3, r19, 16
20021c80:	e8630010 	lwi	r3, r3, 16
20021c84:	e8a30000 	lwi	r5, r3, 0
20021c88:	e8730010 	lwi	r3, r19, 16
20021c8c:	e8630000 	lwi	r3, r3, 0
20021c90:	3063ffff 	addik	r3, r3, -1
20021c94:	84651800 	and	r3, r5, r3
20021c98:	64630402 	bslli	r3, r3, 2
20021c9c:	10641800 	addk	r3, r4, r3
20021ca0:	e8930014 	lwi	r4, r19, 20
20021ca4:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20021ca8:	e8730010 	lwi	r3, r19, 16
20021cac:	e8630010 	lwi	r3, r3, 16
20021cb0:	e8830000 	lwi	r4, r3, 0
20021cb4:	30840001 	addik	r4, r4, 1
20021cb8:	f8830000 	swi	r4, r3, 0
}
20021cbc:	10330000 	addk	r1, r19, r0
20021cc0:	ea610004 	lwi	r19, r1, 4
20021cc4:	ea810008 	lwi	r20, r1, 8
20021cc8:	3021000c 	addik	r1, r1, 12
20021ccc:	b60f0008 	rtsd	r15, 8
20021cd0:	80000000 	or	r0, r0, r0

20021cd4 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20021cd4:	3021fff4 	addik	r1, r1, -12
20021cd8:	fa610004 	swi	r19, r1, 4
20021cdc:	fa810008 	swi	r20, r1, 8
20021ce0:	12610000 	addk	r19, r1, r0
20021ce4:	96808000 	mfs	r20, rpc
20021ce8:	b000dffd 	imm	-8195
20021cec:	3294fc78 	addik	r20, r20, -904
20021cf0:	f8b30010 	swi	r5, r19, 16
20021cf4:	f8d30014 	swi	r6, r19, 20
20021cf8:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20021cfc:	e8730010 	lwi	r3, r19, 16
20021d00:	e8630010 	lwi	r3, r3, 16
20021d04:	e8830000 	lwi	r4, r3, 0
20021d08:	e8730010 	lwi	r3, r19, 16
20021d0c:	e8a3000c 	lwi	r5, r3, 12
20021d10:	e8730014 	lwi	r3, r19, 20
20021d14:	64630402 	bslli	r3, r3, 2
20021d18:	10651800 	addk	r3, r5, r3
20021d1c:	e8630000 	lwi	r3, r3, 0
20021d20:	14a32000 	rsubk	r5, r3, r4
20021d24:	30600001 	addik	r3, r0, 1
20021d28:	e8930018 	lwi	r4, r19, 24
20021d2c:	16442803 	cmpu	r18, r4, r5
20021d30:	bcb20008 	bgei	r18, 8		// 20021d38
20021d34:	10600000 	addk	r3, r0, r0
20021d38:	a46300ff 	andi	r3, r3, 255
}
20021d3c:	10330000 	addk	r1, r19, r0
20021d40:	ea610004 	lwi	r19, r1, 4
20021d44:	ea810008 	lwi	r20, r1, 8
20021d48:	3021000c 	addik	r1, r1, 12
20021d4c:	b60f0008 	rtsd	r15, 8
20021d50:	80000000 	or	r0, r0, r0

20021d54 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20021d54:	3021fff4 	addik	r1, r1, -12
20021d58:	fa610004 	swi	r19, r1, 4
20021d5c:	fa810008 	swi	r20, r1, 8
20021d60:	12610000 	addk	r19, r1, r0
20021d64:	96808000 	mfs	r20, rpc
20021d68:	b000dffd 	imm	-8195
20021d6c:	3294fbf8 	addik	r20, r20, -1032
20021d70:	f8b30010 	swi	r5, r19, 16
20021d74:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20021d78:	e8730010 	lwi	r3, r19, 16
20021d7c:	e8630010 	lwi	r3, r3, 16
20021d80:	e8830000 	lwi	r4, r3, 0
20021d84:	e8730010 	lwi	r3, r19, 16
20021d88:	e8a3000c 	lwi	r5, r3, 12
20021d8c:	e8730014 	lwi	r3, r19, 20
20021d90:	64630402 	bslli	r3, r3, 2
20021d94:	10651800 	addk	r3, r5, r3
20021d98:	e8630000 	lwi	r3, r3, 0
20021d9c:	14632000 	rsubk	r3, r3, r4
}
20021da0:	10330000 	addk	r1, r19, r0
20021da4:	ea610004 	lwi	r19, r1, 4
20021da8:	ea810008 	lwi	r20, r1, 8
20021dac:	3021000c 	addik	r1, r1, 12
20021db0:	b60f0008 	rtsd	r15, 8
20021db4:	80000000 	or	r0, r0, r0

20021db8 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20021db8:	3021fff0 	addik	r1, r1, -16
20021dbc:	fa610008 	swi	r19, r1, 8
20021dc0:	fa81000c 	swi	r20, r1, 12
20021dc4:	12610000 	addk	r19, r1, r0
20021dc8:	96808000 	mfs	r20, rpc
20021dcc:	b000dffd 	imm	-8195
20021dd0:	3294fb94 	addik	r20, r20, -1132
20021dd4:	f8b30014 	swi	r5, r19, 20
20021dd8:	f8d30018 	swi	r6, r19, 24
20021ddc:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20021de0:	f8130004 	swi	r0, r19, 4
20021de4:	b800005c 	bri	92		// 20021e40
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20021de8:	e8730014 	lwi	r3, r19, 20
20021dec:	e8830000 	lwi	r4, r3, 0
20021df0:	e8730014 	lwi	r3, r19, 20
20021df4:	e8a3000c 	lwi	r5, r3, 12
20021df8:	e8730004 	lwi	r3, r19, 4
20021dfc:	64630402 	bslli	r3, r3, 2
20021e00:	10651800 	addk	r3, r5, r3
20021e04:	e8a30000 	lwi	r5, r3, 0
20021e08:	e8730014 	lwi	r3, r19, 20
20021e0c:	e8630010 	lwi	r3, r3, 16
20021e10:	e8630000 	lwi	r3, r3, 0
20021e14:	14632800 	rsubk	r3, r3, r5
20021e18:	10641800 	addk	r3, r4, r3
20021e1c:	30830001 	addik	r4, r3, 1
20021e20:	e873001c 	lwi	r3, r19, 28
20021e24:	16441803 	cmpu	r18, r4, r3
20021e28:	bc52000c 	blti	r18, 12		// 20021e34
            return 0;
20021e2c:	10600000 	addk	r3, r0, r0
20021e30:	b8000024 	bri	36		// 20021e54
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20021e34:	e8730004 	lwi	r3, r19, 4
20021e38:	30630001 	addik	r3, r3, 1
20021e3c:	f8730004 	swi	r3, r19, 4
20021e40:	e8930004 	lwi	r4, r19, 4
20021e44:	e8730018 	lwi	r3, r19, 24
20021e48:	16432003 	cmpu	r18, r3, r4
20021e4c:	bc52ff9c 	blti	r18, -100		// 20021de8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20021e50:	30600001 	addik	r3, r0, 1
}
20021e54:	10330000 	addk	r1, r19, r0
20021e58:	ea610008 	lwi	r19, r1, 8
20021e5c:	ea81000c 	lwi	r20, r1, 12
20021e60:	30210010 	addik	r1, r1, 16
20021e64:	b60f0008 	rtsd	r15, 8
20021e68:	80000000 	or	r0, r0, r0

20021e6c <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20021e6c:	3021ffe8 	addik	r1, r1, -24
20021e70:	fa610010 	swi	r19, r1, 16
20021e74:	fa810014 	swi	r20, r1, 20
20021e78:	12610000 	addk	r19, r1, r0
20021e7c:	96808000 	mfs	r20, rpc
20021e80:	b000dffd 	imm	-8195
20021e84:	3294fae0 	addik	r20, r20, -1312
20021e88:	f8b3001c 	swi	r5, r19, 28
20021e8c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20021e90:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20021e94:	f8130004 	swi	r0, r19, 4
20021e98:	b8000054 	bri	84		// 20021eec
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20021e9c:	e873001c 	lwi	r3, r19, 28
20021ea0:	e8630010 	lwi	r3, r3, 16
20021ea4:	e8830000 	lwi	r4, r3, 0
20021ea8:	e873001c 	lwi	r3, r19, 28
20021eac:	e8a3000c 	lwi	r5, r3, 12
20021eb0:	e8730004 	lwi	r3, r19, 4
20021eb4:	64630402 	bslli	r3, r3, 2
20021eb8:	10651800 	addk	r3, r5, r3
20021ebc:	e8630000 	lwi	r3, r3, 0
20021ec0:	14632000 	rsubk	r3, r3, r4
20021ec4:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20021ec8:	e8930008 	lwi	r4, r19, 8
20021ecc:	e873000c 	lwi	r3, r19, 12
20021ed0:	16441803 	cmpu	r18, r4, r3
20021ed4:	bcb20008 	bgei	r18, 8		// 20021edc
20021ed8:	10640000 	addk	r3, r4, r0
20021edc:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20021ee0:	e8730004 	lwi	r3, r19, 4
20021ee4:	30630001 	addik	r3, r3, 1
20021ee8:	f8730004 	swi	r3, r19, 4
20021eec:	e8930004 	lwi	r4, r19, 4
20021ef0:	e8730020 	lwi	r3, r19, 32
20021ef4:	16432003 	cmpu	r18, r3, r4
20021ef8:	bc52ffa4 	blti	r18, -92		// 20021e9c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20021efc:	e873001c 	lwi	r3, r19, 28
20021f00:	e8830000 	lwi	r4, r3, 0
20021f04:	e8730008 	lwi	r3, r19, 8
20021f08:	14632000 	rsubk	r3, r3, r4
}
20021f0c:	10330000 	addk	r1, r19, r0
20021f10:	ea610010 	lwi	r19, r1, 16
20021f14:	ea810014 	lwi	r20, r1, 20
20021f18:	30210018 	addik	r1, r1, 24
20021f1c:	b60f0008 	rtsd	r15, 8
20021f20:	80000000 	or	r0, r0, r0

20021f24 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20021f24:	3021fff0 	addik	r1, r1, -16
20021f28:	fa610008 	swi	r19, r1, 8
20021f2c:	fa81000c 	swi	r20, r1, 12
20021f30:	12610000 	addk	r19, r1, r0
20021f34:	96808000 	mfs	r20, rpc
20021f38:	b000dffd 	imm	-8195
20021f3c:	3294fa28 	addik	r20, r20, -1496
20021f40:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20021f44:	e8730014 	lwi	r3, r19, 20
20021f48:	e8630010 	lwi	r3, r3, 16
20021f4c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20021f50:	f8130004 	swi	r0, r19, 4
20021f54:	b8000028 	bri	40		// 20021f7c
        fifo->read_inds[i] = 0;
20021f58:	e8730014 	lwi	r3, r19, 20
20021f5c:	e883000c 	lwi	r4, r3, 12
20021f60:	e8730004 	lwi	r3, r19, 4
20021f64:	64630402 	bslli	r3, r3, 2
20021f68:	10641800 	addk	r3, r4, r3
20021f6c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20021f70:	e8730004 	lwi	r3, r19, 4
20021f74:	30630001 	addik	r3, r3, 1
20021f78:	f8730004 	swi	r3, r19, 4
20021f7c:	e8730014 	lwi	r3, r19, 20
20021f80:	e8830008 	lwi	r4, r3, 8
20021f84:	e8730004 	lwi	r3, r19, 4
20021f88:	16441803 	cmpu	r18, r4, r3
20021f8c:	bc52ffcc 	blti	r18, -52		// 20021f58
        fifo->read_inds[i] = 0;
    }
}
20021f90:	10330000 	addk	r1, r19, r0
20021f94:	ea610008 	lwi	r19, r1, 8
20021f98:	ea81000c 	lwi	r20, r1, 12
20021f9c:	30210010 	addik	r1, r1, 16
20021fa0:	b60f0008 	rtsd	r15, 8
20021fa4:	80000000 	or	r0, r0, r0

20021fa8 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20021fa8:	3021ffec 	addik	r1, r1, -20
20021fac:	fa61000c 	swi	r19, r1, 12
20021fb0:	fa810010 	swi	r20, r1, 16
20021fb4:	12610000 	addk	r19, r1, r0
20021fb8:	96808000 	mfs	r20, rpc
20021fbc:	b000dffd 	imm	-8195
20021fc0:	3294f9a4 	addik	r20, r20, -1628
20021fc4:	f8b30018 	swi	r5, r19, 24
20021fc8:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20021fcc:	e8730018 	lwi	r3, r19, 24
20021fd0:	e8830004 	lwi	r4, r3, 4
20021fd4:	e8730018 	lwi	r3, r19, 24
20021fd8:	e8a3000c 	lwi	r5, r3, 12
20021fdc:	e873001c 	lwi	r3, r19, 28
20021fe0:	64630402 	bslli	r3, r3, 2
20021fe4:	10651800 	addk	r3, r5, r3
20021fe8:	e8a30000 	lwi	r5, r3, 0
20021fec:	e8730018 	lwi	r3, r19, 24
20021ff0:	e8630000 	lwi	r3, r3, 0
20021ff4:	3063ffff 	addik	r3, r3, -1
20021ff8:	84651800 	and	r3, r5, r3
20021ffc:	64630403 	bslli	r3, r3, 3
20022000:	10641800 	addk	r3, r4, r3
20022004:	e8830000 	lwi	r4, r3, 0
20022008:	e8a30004 	lwi	r5, r3, 4
2002200c:	f8930004 	swi	r4, r19, 4
20022010:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20022014:	e8730018 	lwi	r3, r19, 24
20022018:	e883000c 	lwi	r4, r3, 12
2002201c:	e873001c 	lwi	r3, r19, 28
20022020:	64630402 	bslli	r3, r3, 2
20022024:	10641800 	addk	r3, r4, r3
20022028:	e8830000 	lwi	r4, r3, 0
2002202c:	30840001 	addik	r4, r4, 1
20022030:	f8830000 	swi	r4, r3, 0
    return value;
20022034:	e8930004 	lwi	r4, r19, 4
20022038:	e8b30008 	lwi	r5, r19, 8
}
2002203c:	10640000 	addk	r3, r4, r0
20022040:	10850000 	addk	r4, r5, r0
20022044:	10330000 	addk	r1, r19, r0
20022048:	ea61000c 	lwi	r19, r1, 12
2002204c:	ea810010 	lwi	r20, r1, 16
20022050:	30210014 	addik	r1, r1, 20
20022054:	b60f0008 	rtsd	r15, 8
20022058:	80000000 	or	r0, r0, r0

2002205c <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002205c:	3021fff4 	addik	r1, r1, -12
20022060:	fa610004 	swi	r19, r1, 4
20022064:	fa810008 	swi	r20, r1, 8
20022068:	12610000 	addk	r19, r1, r0
2002206c:	96808000 	mfs	r20, rpc
20022070:	b000dffd 	imm	-8195
20022074:	3294f8f0 	addik	r20, r20, -1808
20022078:	f8b30010 	swi	r5, r19, 16
2002207c:	f8d30014 	swi	r6, r19, 20
20022080:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20022084:	e8730010 	lwi	r3, r19, 16
20022088:	e8830004 	lwi	r4, r3, 4
2002208c:	e8730010 	lwi	r3, r19, 16
20022090:	e8630010 	lwi	r3, r3, 16
20022094:	e8a30000 	lwi	r5, r3, 0
20022098:	e8730010 	lwi	r3, r19, 16
2002209c:	e8630000 	lwi	r3, r3, 0
200220a0:	3063ffff 	addik	r3, r3, -1
200220a4:	84651800 	and	r3, r5, r3
200220a8:	64630403 	bslli	r3, r3, 3
200220ac:	10641800 	addk	r3, r4, r3
200220b0:	e8930014 	lwi	r4, r19, 20
200220b4:	e8b30018 	lwi	r5, r19, 24
200220b8:	f8830000 	swi	r4, r3, 0
200220bc:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
200220c0:	e8730010 	lwi	r3, r19, 16
200220c4:	e8630010 	lwi	r3, r3, 16
200220c8:	e8830000 	lwi	r4, r3, 0
200220cc:	30840001 	addik	r4, r4, 1
200220d0:	f8830000 	swi	r4, r3, 0
}
200220d4:	10330000 	addk	r1, r19, r0
200220d8:	ea610004 	lwi	r19, r1, 4
200220dc:	ea810008 	lwi	r20, r1, 8
200220e0:	3021000c 	addik	r1, r1, 12
200220e4:	b60f0008 	rtsd	r15, 8
200220e8:	80000000 	or	r0, r0, r0

200220ec <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200220ec:	3021fff4 	addik	r1, r1, -12
200220f0:	fa610004 	swi	r19, r1, 4
200220f4:	fa810008 	swi	r20, r1, 8
200220f8:	12610000 	addk	r19, r1, r0
200220fc:	96808000 	mfs	r20, rpc
20022100:	b000dffd 	imm	-8195
20022104:	3294f860 	addik	r20, r20, -1952
20022108:	f8b30010 	swi	r5, r19, 16
2002210c:	f8d30014 	swi	r6, r19, 20
20022110:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20022114:	e8730010 	lwi	r3, r19, 16
20022118:	e8630010 	lwi	r3, r3, 16
2002211c:	e8830000 	lwi	r4, r3, 0
20022120:	e8730010 	lwi	r3, r19, 16
20022124:	e8a3000c 	lwi	r5, r3, 12
20022128:	e8730014 	lwi	r3, r19, 20
2002212c:	64630402 	bslli	r3, r3, 2
20022130:	10651800 	addk	r3, r5, r3
20022134:	e8630000 	lwi	r3, r3, 0
20022138:	14a32000 	rsubk	r5, r3, r4
2002213c:	30600001 	addik	r3, r0, 1
20022140:	e8930018 	lwi	r4, r19, 24
20022144:	16442803 	cmpu	r18, r4, r5
20022148:	bcb20008 	bgei	r18, 8		// 20022150
2002214c:	10600000 	addk	r3, r0, r0
20022150:	a46300ff 	andi	r3, r3, 255
}
20022154:	10330000 	addk	r1, r19, r0
20022158:	ea610004 	lwi	r19, r1, 4
2002215c:	ea810008 	lwi	r20, r1, 8
20022160:	3021000c 	addik	r1, r1, 12
20022164:	b60f0008 	rtsd	r15, 8
20022168:	80000000 	or	r0, r0, r0

2002216c <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002216c:	3021fff4 	addik	r1, r1, -12
20022170:	fa610004 	swi	r19, r1, 4
20022174:	fa810008 	swi	r20, r1, 8
20022178:	12610000 	addk	r19, r1, r0
2002217c:	96808000 	mfs	r20, rpc
20022180:	b000dffd 	imm	-8195
20022184:	3294f7e0 	addik	r20, r20, -2080
20022188:	f8b30010 	swi	r5, r19, 16
2002218c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20022190:	e8730010 	lwi	r3, r19, 16
20022194:	e8630010 	lwi	r3, r3, 16
20022198:	e8830000 	lwi	r4, r3, 0
2002219c:	e8730010 	lwi	r3, r19, 16
200221a0:	e8a3000c 	lwi	r5, r3, 12
200221a4:	e8730014 	lwi	r3, r19, 20
200221a8:	64630402 	bslli	r3, r3, 2
200221ac:	10651800 	addk	r3, r5, r3
200221b0:	e8630000 	lwi	r3, r3, 0
200221b4:	14632000 	rsubk	r3, r3, r4
}
200221b8:	10330000 	addk	r1, r19, r0
200221bc:	ea610004 	lwi	r19, r1, 4
200221c0:	ea810008 	lwi	r20, r1, 8
200221c4:	3021000c 	addik	r1, r1, 12
200221c8:	b60f0008 	rtsd	r15, 8
200221cc:	80000000 	or	r0, r0, r0

200221d0 <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200221d0:	3021fff0 	addik	r1, r1, -16
200221d4:	fa610008 	swi	r19, r1, 8
200221d8:	fa81000c 	swi	r20, r1, 12
200221dc:	12610000 	addk	r19, r1, r0
200221e0:	96808000 	mfs	r20, rpc
200221e4:	b000dffd 	imm	-8195
200221e8:	3294f77c 	addik	r20, r20, -2180
200221ec:	f8b30014 	swi	r5, r19, 20
200221f0:	f8d30018 	swi	r6, r19, 24
200221f4:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200221f8:	f8130004 	swi	r0, r19, 4
200221fc:	b800005c 	bri	92		// 20022258
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20022200:	e8730014 	lwi	r3, r19, 20
20022204:	e8830000 	lwi	r4, r3, 0
20022208:	e8730014 	lwi	r3, r19, 20
2002220c:	e8a3000c 	lwi	r5, r3, 12
20022210:	e8730004 	lwi	r3, r19, 4
20022214:	64630402 	bslli	r3, r3, 2
20022218:	10651800 	addk	r3, r5, r3
2002221c:	e8a30000 	lwi	r5, r3, 0
20022220:	e8730014 	lwi	r3, r19, 20
20022224:	e8630010 	lwi	r3, r3, 16
20022228:	e8630000 	lwi	r3, r3, 0
2002222c:	14632800 	rsubk	r3, r3, r5
20022230:	10641800 	addk	r3, r4, r3
20022234:	30830001 	addik	r4, r3, 1
20022238:	e873001c 	lwi	r3, r19, 28
2002223c:	16441803 	cmpu	r18, r4, r3
20022240:	bc52000c 	blti	r18, 12		// 2002224c
            return 0;
20022244:	10600000 	addk	r3, r0, r0
20022248:	b8000024 	bri	36		// 2002226c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002224c:	e8730004 	lwi	r3, r19, 4
20022250:	30630001 	addik	r3, r3, 1
20022254:	f8730004 	swi	r3, r19, 4
20022258:	e8930004 	lwi	r4, r19, 4
2002225c:	e8730018 	lwi	r3, r19, 24
20022260:	16432003 	cmpu	r18, r3, r4
20022264:	bc52ff9c 	blti	r18, -100		// 20022200
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20022268:	30600001 	addik	r3, r0, 1
}
2002226c:	10330000 	addk	r1, r19, r0
20022270:	ea610008 	lwi	r19, r1, 8
20022274:	ea81000c 	lwi	r20, r1, 12
20022278:	30210010 	addik	r1, r1, 16
2002227c:	b60f0008 	rtsd	r15, 8
20022280:	80000000 	or	r0, r0, r0

20022284 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20022284:	3021ffe8 	addik	r1, r1, -24
20022288:	fa610010 	swi	r19, r1, 16
2002228c:	fa810014 	swi	r20, r1, 20
20022290:	12610000 	addk	r19, r1, r0
20022294:	96808000 	mfs	r20, rpc
20022298:	b000dffd 	imm	-8195
2002229c:	3294f6c8 	addik	r20, r20, -2360
200222a0:	f8b3001c 	swi	r5, r19, 28
200222a4:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
200222a8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200222ac:	f8130004 	swi	r0, r19, 4
200222b0:	b8000054 	bri	84		// 20022304
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200222b4:	e873001c 	lwi	r3, r19, 28
200222b8:	e8630010 	lwi	r3, r3, 16
200222bc:	e8830000 	lwi	r4, r3, 0
200222c0:	e873001c 	lwi	r3, r19, 28
200222c4:	e8a3000c 	lwi	r5, r3, 12
200222c8:	e8730004 	lwi	r3, r19, 4
200222cc:	64630402 	bslli	r3, r3, 2
200222d0:	10651800 	addk	r3, r5, r3
200222d4:	e8630000 	lwi	r3, r3, 0
200222d8:	14632000 	rsubk	r3, r3, r4
200222dc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200222e0:	e8930008 	lwi	r4, r19, 8
200222e4:	e873000c 	lwi	r3, r19, 12
200222e8:	16441803 	cmpu	r18, r4, r3
200222ec:	bcb20008 	bgei	r18, 8		// 200222f4
200222f0:	10640000 	addk	r3, r4, r0
200222f4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200222f8:	e8730004 	lwi	r3, r19, 4
200222fc:	30630001 	addik	r3, r3, 1
20022300:	f8730004 	swi	r3, r19, 4
20022304:	e8930004 	lwi	r4, r19, 4
20022308:	e8730020 	lwi	r3, r19, 32
2002230c:	16432003 	cmpu	r18, r3, r4
20022310:	bc52ffa4 	blti	r18, -92		// 200222b4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20022314:	e873001c 	lwi	r3, r19, 28
20022318:	e8830000 	lwi	r4, r3, 0
2002231c:	e8730008 	lwi	r3, r19, 8
20022320:	14632000 	rsubk	r3, r3, r4
}
20022324:	10330000 	addk	r1, r19, r0
20022328:	ea610010 	lwi	r19, r1, 16
2002232c:	ea810014 	lwi	r20, r1, 20
20022330:	30210018 	addik	r1, r1, 24
20022334:	b60f0008 	rtsd	r15, 8
20022338:	80000000 	or	r0, r0, r0

2002233c <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002233c:	3021fff0 	addik	r1, r1, -16
20022340:	fa610008 	swi	r19, r1, 8
20022344:	fa81000c 	swi	r20, r1, 12
20022348:	12610000 	addk	r19, r1, r0
2002234c:	96808000 	mfs	r20, rpc
20022350:	b000dffd 	imm	-8195
20022354:	3294f610 	addik	r20, r20, -2544
20022358:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2002235c:	e8730014 	lwi	r3, r19, 20
20022360:	e8630010 	lwi	r3, r3, 16
20022364:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20022368:	f8130004 	swi	r0, r19, 4
2002236c:	b8000028 	bri	40		// 20022394
        fifo->read_inds[i] = 0;
20022370:	e8730014 	lwi	r3, r19, 20
20022374:	e883000c 	lwi	r4, r3, 12
20022378:	e8730004 	lwi	r3, r19, 4
2002237c:	64630402 	bslli	r3, r3, 2
20022380:	10641800 	addk	r3, r4, r3
20022384:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20022388:	e8730004 	lwi	r3, r19, 4
2002238c:	30630001 	addik	r3, r3, 1
20022390:	f8730004 	swi	r3, r19, 4
20022394:	e8730014 	lwi	r3, r19, 20
20022398:	e8830008 	lwi	r4, r3, 8
2002239c:	e8730004 	lwi	r3, r19, 4
200223a0:	16441803 	cmpu	r18, r4, r3
200223a4:	bc52ffcc 	blti	r18, -52		// 20022370
        fifo->read_inds[i] = 0;
    }
}
200223a8:	10330000 	addk	r1, r19, r0
200223ac:	ea610008 	lwi	r19, r1, 8
200223b0:	ea81000c 	lwi	r20, r1, 12
200223b4:	30210010 	addik	r1, r1, 16
200223b8:	b60f0008 	rtsd	r15, 8
200223bc:	80000000 	or	r0, r0, r0

200223c0 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200223c0:	3021fff0 	addik	r1, r1, -16
200223c4:	fa610008 	swi	r19, r1, 8
200223c8:	fa81000c 	swi	r20, r1, 12
200223cc:	12610000 	addk	r19, r1, r0
200223d0:	96808000 	mfs	r20, rpc
200223d4:	b000dffd 	imm	-8195
200223d8:	3294f58c 	addik	r20, r20, -2676
200223dc:	f8b30014 	swi	r5, r19, 20
200223e0:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200223e4:	e8730014 	lwi	r3, r19, 20
200223e8:	e8830004 	lwi	r4, r3, 4
200223ec:	e8730014 	lwi	r3, r19, 20
200223f0:	e8a3000c 	lwi	r5, r3, 12
200223f4:	e8730018 	lwi	r3, r19, 24
200223f8:	64630402 	bslli	r3, r3, 2
200223fc:	10651800 	addk	r3, r5, r3
20022400:	e8a30000 	lwi	r5, r3, 0
20022404:	e8730014 	lwi	r3, r19, 20
20022408:	e8630000 	lwi	r3, r3, 0
2002240c:	3063ffff 	addik	r3, r3, -1
20022410:	84651800 	and	r3, r5, r3
20022414:	64630402 	bslli	r3, r3, 2
20022418:	10641800 	addk	r3, r4, r3
2002241c:	e8630000 	lwi	r3, r3, 0
20022420:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20022424:	e8730014 	lwi	r3, r19, 20
20022428:	e883000c 	lwi	r4, r3, 12
2002242c:	e8730018 	lwi	r3, r19, 24
20022430:	64630402 	bslli	r3, r3, 2
20022434:	10641800 	addk	r3, r4, r3
20022438:	e8830000 	lwi	r4, r3, 0
2002243c:	30840001 	addik	r4, r4, 1
20022440:	f8830000 	swi	r4, r3, 0
    return value;
20022444:	e8730004 	lwi	r3, r19, 4
}
20022448:	10330000 	addk	r1, r19, r0
2002244c:	ea610008 	lwi	r19, r1, 8
20022450:	ea81000c 	lwi	r20, r1, 12
20022454:	30210010 	addik	r1, r1, 16
20022458:	b60f0008 	rtsd	r15, 8
2002245c:	80000000 	or	r0, r0, r0

20022460 <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20022460:	3021fff4 	addik	r1, r1, -12
20022464:	fa610004 	swi	r19, r1, 4
20022468:	fa810008 	swi	r20, r1, 8
2002246c:	12610000 	addk	r19, r1, r0
20022470:	96808000 	mfs	r20, rpc
20022474:	b000dffd 	imm	-8195
20022478:	3294f4ec 	addik	r20, r20, -2836
2002247c:	f8b30010 	swi	r5, r19, 16
20022480:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20022484:	e8730010 	lwi	r3, r19, 16
20022488:	e8830004 	lwi	r4, r3, 4
2002248c:	e8730010 	lwi	r3, r19, 16
20022490:	e8630010 	lwi	r3, r3, 16
20022494:	e8a30000 	lwi	r5, r3, 0
20022498:	e8730010 	lwi	r3, r19, 16
2002249c:	e8630000 	lwi	r3, r3, 0
200224a0:	3063ffff 	addik	r3, r3, -1
200224a4:	84651800 	and	r3, r5, r3
200224a8:	64630402 	bslli	r3, r3, 2
200224ac:	10641800 	addk	r3, r4, r3
200224b0:	e8930014 	lwi	r4, r19, 20
200224b4:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
200224b8:	e8730010 	lwi	r3, r19, 16
200224bc:	e8630010 	lwi	r3, r3, 16
200224c0:	e8830000 	lwi	r4, r3, 0
200224c4:	30840001 	addik	r4, r4, 1
200224c8:	f8830000 	swi	r4, r3, 0
}
200224cc:	10330000 	addk	r1, r19, r0
200224d0:	ea610004 	lwi	r19, r1, 4
200224d4:	ea810008 	lwi	r20, r1, 8
200224d8:	3021000c 	addik	r1, r1, 12
200224dc:	b60f0008 	rtsd	r15, 8
200224e0:	80000000 	or	r0, r0, r0

200224e4 <read_BTYPE>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_BTYPE() {
200224e4:	3021ffdc 	addik	r1, r1, -36
200224e8:	f9e10000 	swi	r15, r1, 0
200224ec:	fa61001c 	swi	r19, r1, 28
200224f0:	fa810020 	swi	r20, r1, 32
200224f4:	12610000 	addk	r19, r1, r0
200224f8:	96808000 	mfs	r20, rpc
200224fc:	b000dffd 	imm	-8195
20022500:	3294f464 	addik	r20, r20, -2972
		index_BTYPE = decoder_parser_mvseq_BTYPE->read_inds[0];
20022504:	b0000000 	imm	0
20022508:	e8740488 	lwi	r3, r20, 1160
2002250c:	e8630000 	lwi	r3, r3, 0
20022510:	e863000c 	lwi	r3, r3, 12
20022514:	e8830000 	lwi	r4, r3, 0
20022518:	b0000000 	imm	0
2002251c:	e8740490 	lwi	r3, r20, 1168
20022520:	f8830000 	swi	r4, r3, 0
		numTokens_BTYPE = index_BTYPE + fifo_i16_get_num_tokens(decoder_parser_mvseq_BTYPE, 0);
20022524:	b0000000 	imm	0
20022528:	e8740488 	lwi	r3, r20, 1160
2002252c:	e8630000 	lwi	r3, r3, 0
20022530:	10a30000 	addk	r5, r3, r0
20022534:	10c00000 	addk	r6, r0, r0
20022538:	b0000000 	imm	0
2002253c:	e8940480 	lwi	r4, r20, 1152
20022540:	99fc2000 	brald	r15, r4
20022544:	80000000 	or	r0, r0, r0
20022548:	10830000 	addk	r4, r3, r0
2002254c:	b0000000 	imm	0
20022550:	e8740490 	lwi	r3, r20, 1168
20022554:	e8630000 	lwi	r3, r3, 0
20022558:	10841800 	addk	r4, r4, r3
2002255c:	b0000000 	imm	0
20022560:	e8740494 	lwi	r3, r20, 1172
20022564:	f8830000 	swi	r4, r3, 0
	}
20022568:	e9e10000 	lwi	r15, r1, 0
2002256c:	10330000 	addk	r1, r19, r0
20022570:	ea61001c 	lwi	r19, r1, 28
20022574:	ea810020 	lwi	r20, r1, 32
20022578:	30210024 	addik	r1, r1, 36
2002257c:	b60f0008 	rtsd	r15, 8
20022580:	80000000 	or	r0, r0, r0

20022584 <read_end_BTYPE>:
	
	static void read_end_BTYPE() {
20022584:	3021fff4 	addik	r1, r1, -12
20022588:	fa610004 	swi	r19, r1, 4
2002258c:	fa810008 	swi	r20, r1, 8
20022590:	12610000 	addk	r19, r1, r0
20022594:	96808000 	mfs	r20, rpc
20022598:	b000dffd 	imm	-8195
2002259c:	3294f3c8 	addik	r20, r20, -3128
		decoder_parser_mvseq_BTYPE->read_inds[0] = index_BTYPE;
200225a0:	b0000000 	imm	0
200225a4:	e8740488 	lwi	r3, r20, 1160
200225a8:	e8630000 	lwi	r3, r3, 0
200225ac:	e863000c 	lwi	r3, r3, 12
200225b0:	b0000000 	imm	0
200225b4:	e8940490 	lwi	r4, r20, 1168
200225b8:	e8840000 	lwi	r4, r4, 0
200225bc:	f8830000 	swi	r4, r3, 0
	}
200225c0:	10330000 	addk	r1, r19, r0
200225c4:	ea610004 	lwi	r19, r1, 4
200225c8:	ea810008 	lwi	r20, r1, 8
200225cc:	3021000c 	addik	r1, r1, 12
200225d0:	b60f0008 	rtsd	r15, 8
200225d4:	80000000 	or	r0, r0, r0

200225d8 <write_A>:

	static void write_A() {
200225d8:	3021ffdc 	addik	r1, r1, -36
200225dc:	f9e10000 	swi	r15, r1, 0
200225e0:	fa61001c 	swi	r19, r1, 28
200225e4:	fa810020 	swi	r20, r1, 32
200225e8:	12610000 	addk	r19, r1, r0
200225ec:	96808000 	mfs	r20, rpc
200225f0:	b000dffd 	imm	-8195
200225f4:	3294f370 	addik	r20, r20, -3216
		index_A = (*decoder_parser_mvseq_A->write_ind);
200225f8:	b0000000 	imm	0
200225fc:	e874048c 	lwi	r3, r20, 1164
20022600:	e8630000 	lwi	r3, r3, 0
20022604:	e8630010 	lwi	r3, r3, 16
20022608:	e8830000 	lwi	r4, r3, 0
2002260c:	b0000000 	imm	0
20022610:	e8740498 	lwi	r3, r20, 1176
20022614:	f8830000 	swi	r4, r3, 0
		numFree_A = index_A + fifo_i16_get_room(decoder_parser_mvseq_A, NUM_READERS_A);
20022618:	b0000000 	imm	0
2002261c:	e874048c 	lwi	r3, r20, 1164
20022620:	e8630000 	lwi	r3, r3, 0
20022624:	10a30000 	addk	r5, r3, r0
20022628:	30c00001 	addik	r6, r0, 1
2002262c:	b0000000 	imm	0
20022630:	e8940484 	lwi	r4, r20, 1156
20022634:	99fc2000 	brald	r15, r4
20022638:	80000000 	or	r0, r0, r0
2002263c:	10830000 	addk	r4, r3, r0
20022640:	b0000000 	imm	0
20022644:	e8740498 	lwi	r3, r20, 1176
20022648:	e8630000 	lwi	r3, r3, 0
2002264c:	10841800 	addk	r4, r4, r3
20022650:	b0000000 	imm	0
20022654:	e874049c 	lwi	r3, r20, 1180
20022658:	f8830000 	swi	r4, r3, 0
	}
2002265c:	e9e10000 	lwi	r15, r1, 0
20022660:	10330000 	addk	r1, r19, r0
20022664:	ea61001c 	lwi	r19, r1, 28
20022668:	ea810020 	lwi	r20, r1, 32
2002266c:	30210024 	addik	r1, r1, 36
20022670:	b60f0008 	rtsd	r15, 8
20022674:	80000000 	or	r0, r0, r0

20022678 <write_end_A>:
	
	static void write_end_A() {
20022678:	3021fff4 	addik	r1, r1, -12
2002267c:	fa610004 	swi	r19, r1, 4
20022680:	fa810008 	swi	r20, r1, 8
20022684:	12610000 	addk	r19, r1, r0
20022688:	96808000 	mfs	r20, rpc
2002268c:	b000dffd 	imm	-8195
20022690:	3294f2d4 	addik	r20, r20, -3372
		(*decoder_parser_mvseq_A->write_ind) = index_A;
20022694:	b0000000 	imm	0
20022698:	e874048c 	lwi	r3, r20, 1164
2002269c:	e8630000 	lwi	r3, r3, 0
200226a0:	e8630010 	lwi	r3, r3, 16
200226a4:	b0000000 	imm	0
200226a8:	e8940498 	lwi	r4, r20, 1176
200226ac:	e8840000 	lwi	r4, r4, 0
200226b0:	f8830000 	swi	r4, r3, 0
	}
200226b4:	10330000 	addk	r1, r19, r0
200226b8:	ea610004 	lwi	r19, r1, 4
200226bc:	ea810008 	lwi	r20, r1, 8
200226c0:	3021000c 	addik	r1, r1, 12
200226c4:	b60f0008 	rtsd	r15, 8
200226c8:	80000000 	or	r0, r0, r0

200226cc <decrement>:
	////////////////////////////////////////////////////////////////////////////////
	// Functions/procedures
	static i8 decrement(i8 p);
	static i16 access(i8 mbptr, i8 c);

	static i8 decrement(i8 p) {
200226cc:	3021ffec 	addik	r1, r1, -20
200226d0:	fa61000c 	swi	r19, r1, 12
200226d4:	fa810010 	swi	r20, r1, 16
200226d8:	12610000 	addk	r19, r1, r0
200226dc:	96808000 	mfs	r20, rpc
200226e0:	b000dffd 	imm	-8195
200226e4:	3294f280 	addik	r20, r20, -3456
200226e8:	10650000 	addk	r3, r5, r0
200226ec:	f0730018 	sbi	r3, r19, 24
		i32 tmp_if;
		i32 local_BUF_SIZE;
	
		if (p == 1) {
200226f0:	e0730018 	lbui	r3, r19, 24
200226f4:	90630060 	sext8	r3, r3
200226f8:	a8630001 	xori	r3, r3, 1
200226fc:	bc23001c 	bnei	r3, 28		// 20022718
			local_BUF_SIZE = BUF_SIZE;
20022700:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
20022704:	f8730008 	swi	r3, r19, 8
			tmp_if = local_BUF_SIZE - 1;
20022708:	e8730008 	lwi	r3, r19, 8
2002270c:	3063ffff 	addik	r3, r3, -1
20022710:	f8730004 	swi	r3, r19, 4
20022714:	b8000014 	bri	20		// 20022728
		} else {
			tmp_if = p - 1;
20022718:	e0730018 	lbui	r3, r19, 24
2002271c:	90630060 	sext8	r3, r3
20022720:	3063ffff 	addik	r3, r3, -1
20022724:	f8730004 	swi	r3, r19, 4
		}
		return tmp_if;
20022728:	e8730004 	lwi	r3, r19, 4
2002272c:	90630060 	sext8	r3, r3
	}
20022730:	10330000 	addk	r1, r19, r0
20022734:	ea61000c 	lwi	r19, r1, 12
20022738:	ea810010 	lwi	r20, r1, 16
2002273c:	30210014 	addik	r1, r1, 20
20022740:	b60f0008 	rtsd	r15, 8
20022744:	80000000 	or	r0, r0, r0

20022748 <access>:
	static i16 access(i8 mbptr, i8 c) {
20022748:	3021fff4 	addik	r1, r1, -12
2002274c:	fa610004 	swi	r19, r1, 4
20022750:	fa810008 	swi	r20, r1, 8
20022754:	12610000 	addk	r19, r1, r0
20022758:	96808000 	mfs	r20, rpc
2002275c:	b000dffd 	imm	-8195
20022760:	3294f204 	addik	r20, r20, -3580
20022764:	10850000 	addk	r4, r5, r0
20022768:	10660000 	addk	r3, r6, r0
2002276c:	f0930010 	sbi	r4, r19, 16
20022770:	f0730014 	sbi	r3, r19, 20
	
		return mbptr << 3 | c & 3;
20022774:	e0730010 	lbui	r3, r19, 16
20022778:	90630060 	sext8	r3, r3
2002277c:	64630403 	bslli	r3, r3, 3
20022780:	90830061 	sext16	r4, r3
20022784:	e0730014 	lbui	r3, r19, 20
20022788:	90630061 	sext16	r3, r3
2002278c:	a4630003 	andi	r3, r3, 3
20022790:	90630061 	sext16	r3, r3
20022794:	80641800 	or	r3, r4, r3
20022798:	90630061 	sext16	r3, r3
	}
2002279c:	10330000 	addk	r1, r19, r0
200227a0:	ea610004 	lwi	r19, r1, 4
200227a4:	ea810008 	lwi	r20, r1, 8
200227a8:	3021000c 	addik	r1, r1, 12
200227ac:	b60f0008 	rtsd	r15, 8
200227b0:	80000000 	or	r0, r0, r0

200227b4 <isSchedulable_start>:

	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_start() {
200227b4:	3021ffe8 	addik	r1, r1, -24
200227b8:	fa610010 	swi	r19, r1, 16
200227bc:	fa810014 	swi	r20, r1, 20
200227c0:	12610000 	addk	r19, r1, r0
200227c4:	96808000 	mfs	r20, rpc
200227c8:	b000dffd 	imm	-8195
200227cc:	3294f198 	addik	r20, r20, -3688
		i32 result;
		i16 cmd;
		i32 local_NEWVOP;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
200227d0:	b0000000 	imm	0
200227d4:	e8740488 	lwi	r3, r20, 1160
200227d8:	e8630000 	lwi	r3, r3, 0
200227dc:	e8830004 	lwi	r4, r3, 4
200227e0:	b0000000 	imm	0
200227e4:	e8740490 	lwi	r3, r20, 1168
200227e8:	e8630000 	lwi	r3, r3, 0
200227ec:	a46301ff 	andi	r3, r3, 511
200227f0:	10631800 	addk	r3, r3, r3
200227f4:	10641800 	addk	r3, r4, r3
200227f8:	e4630000 	lhui	r3, r3, 0
200227fc:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
20022800:	30600800 	addik	r3, r0, 2048	// 800 <decoder_parser_mvrecon_A>
20022804:	f8730008 	swi	r3, r19, 8
		result = (cmd & local_NEWVOP) != 0;
20022808:	e4730004 	lhui	r3, r19, 4
2002280c:	90830061 	sext16	r4, r3
20022810:	e8730008 	lwi	r3, r19, 8
20022814:	84841800 	and	r4, r4, r3
20022818:	10600000 	addk	r3, r0, r0
2002281c:	8c641c00 	pcmpne	r3, r4, r3
20022820:	a46300ff 	andi	r3, r3, 255
20022824:	f873000c 	swi	r3, r19, 12
		return result;
20022828:	e873000c 	lwi	r3, r19, 12
	}
2002282c:	10330000 	addk	r1, r19, r0
20022830:	ea610010 	lwi	r19, r1, 16
20022834:	ea810014 	lwi	r20, r1, 20
20022838:	30210018 	addik	r1, r1, 24
2002283c:	b60f0008 	rtsd	r15, 8
20022840:	80000000 	or	r0, r0, r0

20022844 <start>:
	
	static void start() {
20022844:	3021ffd4 	addik	r1, r1, -44
20022848:	f9e10000 	swi	r15, r1, 0
2002284c:	fa610024 	swi	r19, r1, 36
20022850:	fa810028 	swi	r20, r1, 40
20022854:	12610000 	addk	r19, r1, r0
20022858:	96808000 	mfs	r20, rpc
2002285c:	b000dffd 	imm	-8195
20022860:	3294f104 	addik	r20, r20, -3836
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20022864:	b0000000 	imm	0
20022868:	e8740490 	lwi	r3, r20, 1168
2002286c:	e8630000 	lwi	r3, r3, 0
20022870:	a46301ff 	andi	r3, r3, 511
20022874:	f873001c 	swi	r3, r19, 28
	
		i16 cmd;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20022878:	b0000000 	imm	0
2002287c:	e8740488 	lwi	r3, r20, 1160
20022880:	e8630000 	lwi	r3, r3, 0
20022884:	e8830004 	lwi	r4, r3, 4
20022888:	b0000000 	imm	0
2002288c:	e8740490 	lwi	r3, r20, 1168
20022890:	e8630000 	lwi	r3, r3, 0
20022894:	a46301ff 	andi	r3, r3, 511
20022898:	10631800 	addk	r3, r3, r3
2002289c:	10641800 	addk	r3, r4, r3
200228a0:	e4630000 	lhui	r3, r3, 0
200228a4:	f4730020 	shi	r3, r19, 32
		mbx = 0;
200228a8:	b0000000 	imm	0
200228ac:	e87404a0 	lwi	r3, r20, 1184
200228b0:	f0030000 	sbi	r0, r3, 0
		top_edge = 1;
200228b4:	b0000000 	imm	0
200228b8:	e87404a4 	lwi	r3, r20, 1188
200228bc:	30800001 	addik	r4, r0, 1
200228c0:	f8830000 	swi	r4, r3, 0
		right_edge = 0;
200228c4:	b0000000 	imm	0
200228c8:	e87404a8 	lwi	r3, r20, 1192
200228cc:	f8030000 	swi	r0, r3, 0
		comp = 0;
200228d0:	b0000000 	imm	0
200228d4:	e87404ac 	lwi	r3, r20, 1196
200228d8:	f0030000 	sbi	r0, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
200228dc:	b0000000 	imm	0
200228e0:	e8740490 	lwi	r3, r20, 1168
200228e4:	e8630000 	lwi	r3, r3, 0
200228e8:	30830001 	addik	r4, r3, 1
200228ec:	b0000000 	imm	0
200228f0:	e8740490 	lwi	r3, r20, 1168
200228f4:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
200228f8:	b0000000 	imm	0
200228fc:	e87404d0 	lwi	r3, r20, 1232
20022900:	99fc1800 	brald	r15, r3
20022904:	80000000 	or	r0, r0, r0
	}
20022908:	e9e10000 	lwi	r15, r1, 0
2002290c:	10330000 	addk	r1, r19, r0
20022910:	ea610024 	lwi	r19, r1, 36
20022914:	ea810028 	lwi	r20, r1, 40
20022918:	3021002c 	addik	r1, r1, 44
2002291c:	b60f0008 	rtsd	r15, 8
20022920:	80000000 	or	r0, r0, r0

20022924 <isSchedulable_getw>:
	static i32 isSchedulable_getw() {
20022924:	3021fff0 	addik	r1, r1, -16
20022928:	fa610008 	swi	r19, r1, 8
2002292c:	fa81000c 	swi	r20, r1, 12
20022930:	12610000 	addk	r19, r1, r0
20022934:	96808000 	mfs	r20, rpc
20022938:	b000dffd 	imm	-8195
2002293c:	3294f028 	addik	r20, r20, -4056
		i32 result;
	
		result = 1;
20022940:	30600001 	addik	r3, r0, 1
20022944:	f8730004 	swi	r3, r19, 4
		return result;
20022948:	e8730004 	lwi	r3, r19, 4
	}
2002294c:	10330000 	addk	r1, r19, r0
20022950:	ea610008 	lwi	r19, r1, 8
20022954:	ea81000c 	lwi	r20, r1, 12
20022958:	30210010 	addik	r1, r1, 16
2002295c:	b60f0008 	rtsd	r15, 8
20022960:	80000000 	or	r0, r0, r0

20022964 <getw_replaced>:
	
	static void getw_replaced() {
20022964:	3021ffd4 	addik	r1, r1, -44
20022968:	f9e10000 	swi	r15, r1, 0
2002296c:	fa610024 	swi	r19, r1, 36
20022970:	fa810028 	swi	r20, r1, 40
20022974:	12610000 	addk	r19, r1, r0
20022978:	96808000 	mfs	r20, rpc
2002297c:	b000dffd 	imm	-8195
20022980:	3294efe4 	addik	r20, r20, -4124
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20022984:	b0000000 	imm	0
20022988:	e8740490 	lwi	r3, r20, 1168
2002298c:	e8630000 	lwi	r3, r3, 0
20022990:	a46301ff 	andi	r3, r3, 511
20022994:	f873001c 	swi	r3, r19, 28
	
		i16 w;
	
		w = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20022998:	b0000000 	imm	0
2002299c:	e8740488 	lwi	r3, r20, 1160
200229a0:	e8630000 	lwi	r3, r3, 0
200229a4:	e8830004 	lwi	r4, r3, 4
200229a8:	b0000000 	imm	0
200229ac:	e8740490 	lwi	r3, r20, 1168
200229b0:	e8630000 	lwi	r3, r3, 0
200229b4:	a46301ff 	andi	r3, r3, 511
200229b8:	10631800 	addk	r3, r3, r3
200229bc:	10641800 	addk	r3, r4, r3
200229c0:	e4630000 	lhui	r3, r3, 0
200229c4:	f4730020 	shi	r3, r19, 32
		mbwidth = w;
200229c8:	e4730020 	lhui	r3, r19, 32
200229cc:	90830060 	sext8	r4, r3
200229d0:	b0000000 	imm	0
200229d4:	e87404b0 	lwi	r3, r20, 1200
200229d8:	f0830000 	sbi	r4, r3, 0
		ptr = 1;
200229dc:	b0000000 	imm	0
200229e0:	e87404b4 	lwi	r3, r20, 1204
200229e4:	30800001 	addik	r4, r0, 1
200229e8:	f0830000 	sbi	r4, r3, 0
		ptr_left = 2;
200229ec:	b0000000 	imm	0
200229f0:	e87404b8 	lwi	r3, r20, 1208
200229f4:	30800002 	addik	r4, r0, 2
200229f8:	f0830000 	sbi	r4, r3, 0
		ptr_above = w + 1;
200229fc:	e4730020 	lhui	r3, r19, 32
20022a00:	a46300ff 	andi	r3, r3, 255
20022a04:	30630001 	addik	r3, r3, 1
20022a08:	a46300ff 	andi	r3, r3, 255
20022a0c:	90830060 	sext8	r4, r3
20022a10:	b0000000 	imm	0
20022a14:	e87404bc 	lwi	r3, r20, 1212
20022a18:	f0830000 	sbi	r4, r3, 0
		ptr_above_right = w;
20022a1c:	e4730020 	lhui	r3, r19, 32
20022a20:	90830060 	sext8	r4, r3
20022a24:	b0000000 	imm	0
20022a28:	e87404c0 	lwi	r3, r20, 1216
20022a2c:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
20022a30:	b0000000 	imm	0
20022a34:	e8740490 	lwi	r3, r20, 1168
20022a38:	e8630000 	lwi	r3, r3, 0
20022a3c:	30830001 	addik	r4, r3, 1
20022a40:	b0000000 	imm	0
20022a44:	e8740490 	lwi	r3, r20, 1168
20022a48:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
20022a4c:	b0000000 	imm	0
20022a50:	e87404d0 	lwi	r3, r20, 1232
20022a54:	99fc1800 	brald	r15, r3
20022a58:	80000000 	or	r0, r0, r0
	}
20022a5c:	e9e10000 	lwi	r15, r1, 0
20022a60:	10330000 	addk	r1, r19, r0
20022a64:	ea610024 	lwi	r19, r1, 36
20022a68:	ea810028 	lwi	r20, r1, 40
20022a6c:	3021002c 	addik	r1, r1, 44
20022a70:	b60f0008 	rtsd	r15, 8
20022a74:	80000000 	or	r0, r0, r0

20022a78 <isSchedulable_geth>:
	static i32 isSchedulable_geth() {
20022a78:	3021fff0 	addik	r1, r1, -16
20022a7c:	fa610008 	swi	r19, r1, 8
20022a80:	fa81000c 	swi	r20, r1, 12
20022a84:	12610000 	addk	r19, r1, r0
20022a88:	96808000 	mfs	r20, rpc
20022a8c:	b000dffd 	imm	-8195
20022a90:	3294eed4 	addik	r20, r20, -4396
		i32 result;
	
		result = 1;
20022a94:	30600001 	addik	r3, r0, 1
20022a98:	f8730004 	swi	r3, r19, 4
		return result;
20022a9c:	e8730004 	lwi	r3, r19, 4
	}
20022aa0:	10330000 	addk	r1, r19, r0
20022aa4:	ea610008 	lwi	r19, r1, 8
20022aa8:	ea81000c 	lwi	r20, r1, 12
20022aac:	30210010 	addik	r1, r1, 16
20022ab0:	b60f0008 	rtsd	r15, 8
20022ab4:	80000000 	or	r0, r0, r0

20022ab8 <geth>:
	
	static void geth() {
20022ab8:	3021ffd4 	addik	r1, r1, -44
20022abc:	f9e10000 	swi	r15, r1, 0
20022ac0:	fa610024 	swi	r19, r1, 36
20022ac4:	fa810028 	swi	r20, r1, 40
20022ac8:	12610000 	addk	r19, r1, r0
20022acc:	96808000 	mfs	r20, rpc
20022ad0:	b000dffd 	imm	-8195
20022ad4:	3294ee90 	addik	r20, r20, -4464
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20022ad8:	b0000000 	imm	0
20022adc:	e8740490 	lwi	r3, r20, 1168
20022ae0:	e8630000 	lwi	r3, r3, 0
20022ae4:	a46301ff 	andi	r3, r3, 511
20022ae8:	f873001c 	swi	r3, r19, 28
	
		i16 h;
	
		h = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20022aec:	b0000000 	imm	0
20022af0:	e8740488 	lwi	r3, r20, 1160
20022af4:	e8630000 	lwi	r3, r3, 0
20022af8:	e8830004 	lwi	r4, r3, 4
20022afc:	b0000000 	imm	0
20022b00:	e8740490 	lwi	r3, r20, 1168
20022b04:	e8630000 	lwi	r3, r3, 0
20022b08:	a46301ff 	andi	r3, r3, 511
20022b0c:	10631800 	addk	r3, r3, r3
20022b10:	10641800 	addk	r3, r4, r3
20022b14:	e4630000 	lhui	r3, r3, 0
20022b18:	f4730020 	shi	r3, r19, 32
	
		// Update ports indexes
		index_BTYPE += 1;
20022b1c:	b0000000 	imm	0
20022b20:	e8740490 	lwi	r3, r20, 1168
20022b24:	e8630000 	lwi	r3, r3, 0
20022b28:	30830001 	addik	r4, r3, 1
20022b2c:	b0000000 	imm	0
20022b30:	e8740490 	lwi	r3, r20, 1168
20022b34:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
20022b38:	b0000000 	imm	0
20022b3c:	e87404d0 	lwi	r3, r20, 1232
20022b40:	99fc1800 	brald	r15, r3
20022b44:	80000000 	or	r0, r0, r0
	}
20022b48:	e9e10000 	lwi	r15, r1, 0
20022b4c:	10330000 	addk	r1, r19, r0
20022b50:	ea610024 	lwi	r19, r1, 36
20022b54:	ea810028 	lwi	r20, r1, 40
20022b58:	3021002c 	addik	r1, r1, 44
20022b5c:	b60f0008 	rtsd	r15, 8
20022b60:	80000000 	or	r0, r0, r0

20022b64 <isSchedulable_read_noPredict>:
	static i32 isSchedulable_read_noPredict() {
20022b64:	3021ffd8 	addik	r1, r1, -40
20022b68:	fa610020 	swi	r19, r1, 32
20022b6c:	fa810024 	swi	r20, r1, 36
20022b70:	12610000 	addk	r19, r1, r0
20022b74:	96808000 	mfs	r20, rpc
20022b78:	b000dffd 	imm	-8195
20022b7c:	3294ede8 	addik	r20, r20, -4632
		i8 local_comp;
		i32 local_INTER;
		i32 local_MOTION;
		i32 local_FOURMV;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20022b80:	b0000000 	imm	0
20022b84:	e8740488 	lwi	r3, r20, 1160
20022b88:	e8630000 	lwi	r3, r3, 0
20022b8c:	e8830004 	lwi	r4, r3, 4
20022b90:	b0000000 	imm	0
20022b94:	e8740490 	lwi	r3, r20, 1168
20022b98:	e8630000 	lwi	r3, r3, 0
20022b9c:	a46301ff 	andi	r3, r3, 511
20022ba0:	10631800 	addk	r3, r3, r3
20022ba4:	10641800 	addk	r3, r4, r3
20022ba8:	e4630000 	lhui	r3, r3, 0
20022bac:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
20022bb0:	30600800 	addik	r3, r0, 2048	// 800 <decoder_parser_mvrecon_A>
20022bb4:	f8730008 	swi	r3, r19, 8
		local_comp = comp;
20022bb8:	b0000000 	imm	0
20022bbc:	e87404ac 	lwi	r3, r20, 1196
20022bc0:	e0630000 	lbui	r3, r3, 0
20022bc4:	f073000c 	sbi	r3, r19, 12
		local_INTER = ConstantsBtype_INTER;
20022bc8:	30600200 	addik	r3, r0, 512
20022bcc:	f8730010 	swi	r3, r19, 16
		local_MOTION = ConstantsBtype_MOTION;
20022bd0:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20022bd4:	f8730014 	swi	r3, r19, 20
		local_comp = comp;
20022bd8:	b0000000 	imm	0
20022bdc:	e87404ac 	lwi	r3, r20, 1196
20022be0:	e0630000 	lbui	r3, r3, 0
20022be4:	f073000c 	sbi	r3, r19, 12
		local_FOURMV = Constants_FOURMV;
20022be8:	30600004 	addik	r3, r0, 4
20022bec:	f8730018 	swi	r3, r19, 24
		result = (cmd & local_NEWVOP) == 0 && (local_comp > 3 || (cmd & local_INTER) == 0 || (cmd & local_MOTION) == 0 || local_comp != 0 && (cmd & local_FOURMV) == 0);
20022bf0:	e4730004 	lhui	r3, r19, 4
20022bf4:	90830061 	sext16	r4, r3
20022bf8:	e8730008 	lwi	r3, r19, 8
20022bfc:	84641800 	and	r3, r4, r3
20022c00:	bc230068 	bnei	r3, 104		// 20022c68
20022c04:	e073000c 	lbui	r3, r19, 12
20022c08:	90830060 	sext8	r4, r3
20022c0c:	30600003 	addik	r3, r0, 3
20022c10:	16441801 	cmp	r18, r4, r3
20022c14:	bc52004c 	blti	r18, 76		// 20022c60
20022c18:	e4730004 	lhui	r3, r19, 4
20022c1c:	90830061 	sext16	r4, r3
20022c20:	e8730010 	lwi	r3, r19, 16
20022c24:	84641800 	and	r3, r4, r3
20022c28:	bc030038 	beqi	r3, 56		// 20022c60
20022c2c:	e4730004 	lhui	r3, r19, 4
20022c30:	90830061 	sext16	r4, r3
20022c34:	e8730014 	lwi	r3, r19, 20
20022c38:	84641800 	and	r3, r4, r3
20022c3c:	bc030024 	beqi	r3, 36		// 20022c60
20022c40:	e073000c 	lbui	r3, r19, 12
20022c44:	90630060 	sext8	r3, r3
20022c48:	bc030020 	beqi	r3, 32		// 20022c68
20022c4c:	e4730004 	lhui	r3, r19, 4
20022c50:	90830061 	sext16	r4, r3
20022c54:	e8730018 	lwi	r3, r19, 24
20022c58:	84641800 	and	r3, r4, r3
20022c5c:	bc23000c 	bnei	r3, 12		// 20022c68
20022c60:	30600001 	addik	r3, r0, 1
20022c64:	b8000008 	bri	8		// 20022c6c
20022c68:	10600000 	addk	r3, r0, r0
20022c6c:	f873001c 	swi	r3, r19, 28
		return result;
20022c70:	e873001c 	lwi	r3, r19, 28
	}
20022c74:	10330000 	addk	r1, r19, r0
20022c78:	ea610020 	lwi	r19, r1, 32
20022c7c:	ea810024 	lwi	r20, r1, 36
20022c80:	30210028 	addik	r1, r1, 40
20022c84:	b60f0008 	rtsd	r15, 8
20022c88:	80000000 	or	r0, r0, r0

20022c8c <read_noPredict>:
	
	static void read_noPredict() {
20022c8c:	3021ffc4 	addik	r1, r1, -60
20022c90:	f9e10000 	swi	r15, r1, 0
20022c94:	fa610034 	swi	r19, r1, 52
20022c98:	fa810038 	swi	r20, r1, 56
20022c9c:	12610000 	addk	r19, r1, r0
20022ca0:	96808000 	mfs	r20, rpc
20022ca4:	b000dffd 	imm	-8195
20022ca8:	3294ecbc 	addik	r20, r20, -4932
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20022cac:	b0000000 	imm	0
20022cb0:	e8740490 	lwi	r3, r20, 1168
20022cb4:	e8630000 	lwi	r3, r3, 0
20022cb8:	a46301ff 	andi	r3, r3, 511
20022cbc:	f873001c 	swi	r3, r19, 28
		i8 local_ptr_above_right;
		i8 tmp_decrement2;
		i32 local_right_edge;
		i8 local_mbwidth;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20022cc0:	b0000000 	imm	0
20022cc4:	e8740488 	lwi	r3, r20, 1160
20022cc8:	e8630000 	lwi	r3, r3, 0
20022ccc:	e8830004 	lwi	r4, r3, 4
20022cd0:	b0000000 	imm	0
20022cd4:	e8740490 	lwi	r3, r20, 1168
20022cd8:	e8630000 	lwi	r3, r3, 0
20022cdc:	a46301ff 	andi	r3, r3, 511
20022ce0:	10631800 	addk	r3, r3, r3
20022ce4:	10641800 	addk	r3, r4, r3
20022ce8:	e4630000 	lhui	r3, r3, 0
20022cec:	f4730020 	shi	r3, r19, 32
		local_comp = comp;
20022cf0:	b0000000 	imm	0
20022cf4:	e87404ac 	lwi	r3, r20, 1196
20022cf8:	e0630000 	lbui	r3, r3, 0
20022cfc:	f0730022 	sbi	r3, r19, 34
		comp = local_comp + 1;
20022d00:	e0730022 	lbui	r3, r19, 34
20022d04:	30630001 	addik	r3, r3, 1
20022d08:	a46300ff 	andi	r3, r3, 255
20022d0c:	90830060 	sext8	r4, r3
20022d10:	b0000000 	imm	0
20022d14:	e87404ac 	lwi	r3, r20, 1196
20022d18:	f0830000 	sbi	r4, r3, 0
		local_comp = comp;
20022d1c:	b0000000 	imm	0
20022d20:	e87404ac 	lwi	r3, r20, 1196
20022d24:	e0630000 	lbui	r3, r3, 0
20022d28:	f0730022 	sbi	r3, r19, 34
		if (local_comp == 6) {
20022d2c:	e0730022 	lbui	r3, r19, 34
20022d30:	90630060 	sext8	r3, r3
20022d34:	a8630006 	xori	r3, r3, 6
20022d38:	bc2301c8 	bnei	r3, 456		// 20022f00
			comp = 0;
20022d3c:	b0000000 	imm	0
20022d40:	e87404ac 	lwi	r3, r20, 1196
20022d44:	f0030000 	sbi	r0, r3, 0
			local_mbx = mbx;
20022d48:	b0000000 	imm	0
20022d4c:	e87404a0 	lwi	r3, r20, 1184
20022d50:	e0630000 	lbui	r3, r3, 0
20022d54:	f0730023 	sbi	r3, r19, 35
			mbx = local_mbx + 1;
20022d58:	e0730023 	lbui	r3, r19, 35
20022d5c:	30630001 	addik	r3, r3, 1
20022d60:	a46300ff 	andi	r3, r3, 255
20022d64:	90830060 	sext8	r4, r3
20022d68:	b0000000 	imm	0
20022d6c:	e87404a0 	lwi	r3, r20, 1184
20022d70:	f0830000 	sbi	r4, r3, 0
			local_ptr = ptr;
20022d74:	b0000000 	imm	0
20022d78:	e87404b4 	lwi	r3, r20, 1204
20022d7c:	e0630000 	lbui	r3, r3, 0
20022d80:	f0730024 	sbi	r3, r19, 36
			tmp_decrement = decrement(local_ptr);
20022d84:	e0730024 	lbui	r3, r19, 36
20022d88:	90630060 	sext8	r3, r3
20022d8c:	10a30000 	addk	r5, r3, r0
20022d90:	b0000000 	imm	0
20022d94:	e89404dc 	lwi	r4, r20, 1244
20022d98:	99fc2000 	brald	r15, r4
20022d9c:	80000000 	or	r0, r0, r0
20022da0:	f0730025 	sbi	r3, r19, 37
			ptr = tmp_decrement;
20022da4:	b0000000 	imm	0
20022da8:	e87404b4 	lwi	r3, r20, 1204
20022dac:	e0930025 	lbui	r4, r19, 37
20022db0:	f0830000 	sbi	r4, r3, 0
			local_ptr_left = ptr_left;
20022db4:	b0000000 	imm	0
20022db8:	e87404b8 	lwi	r3, r20, 1208
20022dbc:	e0630000 	lbui	r3, r3, 0
20022dc0:	f0730026 	sbi	r3, r19, 38
			tmp_decrement0 = decrement(local_ptr_left);
20022dc4:	e0730026 	lbui	r3, r19, 38
20022dc8:	90630060 	sext8	r3, r3
20022dcc:	10a30000 	addk	r5, r3, r0
20022dd0:	b0000000 	imm	0
20022dd4:	e89404dc 	lwi	r4, r20, 1244
20022dd8:	99fc2000 	brald	r15, r4
20022ddc:	80000000 	or	r0, r0, r0
20022de0:	f0730027 	sbi	r3, r19, 39
			ptr_left = tmp_decrement0;
20022de4:	b0000000 	imm	0
20022de8:	e87404b8 	lwi	r3, r20, 1208
20022dec:	e0930027 	lbui	r4, r19, 39
20022df0:	f0830000 	sbi	r4, r3, 0
			local_ptr_above = ptr_above;
20022df4:	b0000000 	imm	0
20022df8:	e87404bc 	lwi	r3, r20, 1212
20022dfc:	e0630000 	lbui	r3, r3, 0
20022e00:	f0730028 	sbi	r3, r19, 40
			tmp_decrement1 = decrement(local_ptr_above);
20022e04:	e0730028 	lbui	r3, r19, 40
20022e08:	90630060 	sext8	r3, r3
20022e0c:	10a30000 	addk	r5, r3, r0
20022e10:	b0000000 	imm	0
20022e14:	e89404dc 	lwi	r4, r20, 1244
20022e18:	99fc2000 	brald	r15, r4
20022e1c:	80000000 	or	r0, r0, r0
20022e20:	f0730029 	sbi	r3, r19, 41
			ptr_above = tmp_decrement1;
20022e24:	b0000000 	imm	0
20022e28:	e87404bc 	lwi	r3, r20, 1212
20022e2c:	e0930029 	lbui	r4, r19, 41
20022e30:	f0830000 	sbi	r4, r3, 0
			local_ptr_above_right = ptr_above_right;
20022e34:	b0000000 	imm	0
20022e38:	e87404c0 	lwi	r3, r20, 1216
20022e3c:	e0630000 	lbui	r3, r3, 0
20022e40:	f073002a 	sbi	r3, r19, 42
			tmp_decrement2 = decrement(local_ptr_above_right);
20022e44:	e073002a 	lbui	r3, r19, 42
20022e48:	90630060 	sext8	r3, r3
20022e4c:	10a30000 	addk	r5, r3, r0
20022e50:	b0000000 	imm	0
20022e54:	e89404dc 	lwi	r4, r20, 1244
20022e58:	99fc2000 	brald	r15, r4
20022e5c:	80000000 	or	r0, r0, r0
20022e60:	f073002b 	sbi	r3, r19, 43
			ptr_above_right = tmp_decrement2;
20022e64:	b0000000 	imm	0
20022e68:	e87404c0 	lwi	r3, r20, 1216
20022e6c:	e093002b 	lbui	r4, r19, 43
20022e70:	f0830000 	sbi	r4, r3, 0
			local_right_edge = right_edge;
20022e74:	b0000000 	imm	0
20022e78:	e87404a8 	lwi	r3, r20, 1192
20022e7c:	e8630000 	lwi	r3, r3, 0
20022e80:	f873002c 	swi	r3, r19, 44
			if (local_right_edge) {
20022e84:	e873002c 	lwi	r3, r19, 44
20022e88:	bc03002c 	beqi	r3, 44		// 20022eb4
				mbx = 0;
20022e8c:	b0000000 	imm	0
20022e90:	e87404a0 	lwi	r3, r20, 1184
20022e94:	f0030000 	sbi	r0, r3, 0
				right_edge = 0;
20022e98:	b0000000 	imm	0
20022e9c:	e87404a8 	lwi	r3, r20, 1192
20022ea0:	f8030000 	swi	r0, r3, 0
				top_edge = 0;
20022ea4:	b0000000 	imm	0
20022ea8:	e87404a4 	lwi	r3, r20, 1188
20022eac:	f8030000 	swi	r0, r3, 0
20022eb0:	b8000050 	bri	80		// 20022f00
			} else {
				local_mbx = mbx;
20022eb4:	b0000000 	imm	0
20022eb8:	e87404a0 	lwi	r3, r20, 1184
20022ebc:	e0630000 	lbui	r3, r3, 0
20022ec0:	f0730023 	sbi	r3, r19, 35
				local_mbwidth = mbwidth;
20022ec4:	b0000000 	imm	0
20022ec8:	e87404b0 	lwi	r3, r20, 1200
20022ecc:	e0630000 	lbui	r3, r3, 0
20022ed0:	f0730030 	sbi	r3, r19, 48
				if (local_mbx == local_mbwidth - 1) {
20022ed4:	e0730023 	lbui	r3, r19, 35
20022ed8:	90830060 	sext8	r4, r3
20022edc:	e0730030 	lbui	r3, r19, 48
20022ee0:	90630060 	sext8	r3, r3
20022ee4:	3063ffff 	addik	r3, r3, -1
20022ee8:	88641800 	xor	r3, r4, r3
20022eec:	bc230014 	bnei	r3, 20		// 20022f00
					right_edge = 1;
20022ef0:	b0000000 	imm	0
20022ef4:	e87404a8 	lwi	r3, r20, 1192
20022ef8:	30800001 	addik	r4, r0, 1
20022efc:	f8830000 	swi	r4, r3, 0
				}
			}
		}
	
		// Update ports indexes
		index_BTYPE += 1;
20022f00:	b0000000 	imm	0
20022f04:	e8740490 	lwi	r3, r20, 1168
20022f08:	e8630000 	lwi	r3, r3, 0
20022f0c:	30830001 	addik	r4, r3, 1
20022f10:	b0000000 	imm	0
20022f14:	e8740490 	lwi	r3, r20, 1168
20022f18:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
20022f1c:	b0000000 	imm	0
20022f20:	e87404d0 	lwi	r3, r20, 1232
20022f24:	99fc1800 	brald	r15, r3
20022f28:	80000000 	or	r0, r0, r0
	}
20022f2c:	e9e10000 	lwi	r15, r1, 0
20022f30:	10330000 	addk	r1, r19, r0
20022f34:	ea610034 	lwi	r19, r1, 52
20022f38:	ea810038 	lwi	r20, r1, 56
20022f3c:	3021003c 	addik	r1, r1, 60
20022f40:	b60f0008 	rtsd	r15, 8
20022f44:	80000000 	or	r0, r0, r0

20022f48 <isSchedulable_read_predict_y0>:
	static i32 isSchedulable_read_predict_y0() {
20022f48:	3021ffdc 	addik	r1, r1, -36
20022f4c:	fa61001c 	swi	r19, r1, 28
20022f50:	fa810020 	swi	r20, r1, 32
20022f54:	12610000 	addk	r19, r1, r0
20022f58:	96808000 	mfs	r20, rpc
20022f5c:	b000dffd 	imm	-8195
20022f60:	3294ea04 	addik	r20, r20, -5628
		i32 local_NEWVOP;
		i32 local_INTER;
		i32 local_MOTION;
		i8 local_comp;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20022f64:	b0000000 	imm	0
20022f68:	e8740488 	lwi	r3, r20, 1160
20022f6c:	e8630000 	lwi	r3, r3, 0
20022f70:	e8830004 	lwi	r4, r3, 4
20022f74:	b0000000 	imm	0
20022f78:	e8740490 	lwi	r3, r20, 1168
20022f7c:	e8630000 	lwi	r3, r3, 0
20022f80:	a46301ff 	andi	r3, r3, 511
20022f84:	10631800 	addk	r3, r3, r3
20022f88:	10641800 	addk	r3, r4, r3
20022f8c:	e4630000 	lhui	r3, r3, 0
20022f90:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
20022f94:	30600800 	addik	r3, r0, 2048	// 800 <decoder_parser_mvrecon_A>
20022f98:	f8730008 	swi	r3, r19, 8
		local_INTER = ConstantsBtype_INTER;
20022f9c:	30600200 	addik	r3, r0, 512
20022fa0:	f873000c 	swi	r3, r19, 12
		local_MOTION = ConstantsBtype_MOTION;
20022fa4:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20022fa8:	f8730010 	swi	r3, r19, 16
		local_comp = comp;
20022fac:	b0000000 	imm	0
20022fb0:	e87404ac 	lwi	r3, r20, 1196
20022fb4:	e0630000 	lbui	r3, r3, 0
20022fb8:	f0730014 	sbi	r3, r19, 20
		result = (cmd & local_NEWVOP) == 0 && (cmd & local_INTER) != 0 && (cmd & local_MOTION) != 0 && local_comp == 0;
20022fbc:	e4730004 	lhui	r3, r19, 4
20022fc0:	90830061 	sext16	r4, r3
20022fc4:	e8730008 	lwi	r3, r19, 8
20022fc8:	84641800 	and	r3, r4, r3
20022fcc:	bc230040 	bnei	r3, 64		// 2002300c
20022fd0:	e4730004 	lhui	r3, r19, 4
20022fd4:	90830061 	sext16	r4, r3
20022fd8:	e873000c 	lwi	r3, r19, 12
20022fdc:	84641800 	and	r3, r4, r3
20022fe0:	bc03002c 	beqi	r3, 44		// 2002300c
20022fe4:	e4730004 	lhui	r3, r19, 4
20022fe8:	90830061 	sext16	r4, r3
20022fec:	e8730010 	lwi	r3, r19, 16
20022ff0:	84641800 	and	r3, r4, r3
20022ff4:	bc030018 	beqi	r3, 24		// 2002300c
20022ff8:	e0730014 	lbui	r3, r19, 20
20022ffc:	90630060 	sext8	r3, r3
20023000:	bc23000c 	bnei	r3, 12		// 2002300c
20023004:	30600001 	addik	r3, r0, 1
20023008:	b8000008 	bri	8		// 20023010
2002300c:	10600000 	addk	r3, r0, r0
20023010:	f8730018 	swi	r3, r19, 24
		return result;
20023014:	e8730018 	lwi	r3, r19, 24
	}
20023018:	10330000 	addk	r1, r19, r0
2002301c:	ea61001c 	lwi	r19, r1, 28
20023020:	ea810020 	lwi	r20, r1, 32
20023024:	30210024 	addik	r1, r1, 36
20023028:	b60f0008 	rtsd	r15, 8
2002302c:	80000000 	or	r0, r0, r0

20023030 <read_predict_y0>:
	
	static void read_predict_y0() {
20023030:	3021ffb8 	addik	r1, r1, -72
20023034:	f9e10000 	swi	r15, r1, 0
20023038:	fa610040 	swi	r19, r1, 64
2002303c:	fa810044 	swi	r20, r1, 68
20023040:	12610000 	addk	r19, r1, r0
20023044:	96808000 	mfs	r20, rpc
20023048:	b000dffd 	imm	-8195
2002304c:	3294e918 	addik	r20, r20, -5864
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20023050:	b0000000 	imm	0
20023054:	e8740490 	lwi	r3, r20, 1168
20023058:	e8630000 	lwi	r3, r3, 0
2002305c:	a46301ff 	andi	r3, r3, 511
20023060:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_A = index_A % SIZE_A;
20023064:	b0000000 	imm	0
20023068:	e8740498 	lwi	r3, r20, 1176
2002306c:	e8630000 	lwi	r3, r3, 0
20023070:	a46301ff 	andi	r3, r3, 511
20023074:	f8730024 	swi	r3, r19, 36
		i8 local_comp;
		i16 tmp_access;
		i16 tmp_access0;
		i16 tmp_access1;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20023078:	b0000000 	imm	0
2002307c:	e8740488 	lwi	r3, r20, 1160
20023080:	e8630000 	lwi	r3, r3, 0
20023084:	e8830004 	lwi	r4, r3, 4
20023088:	b0000000 	imm	0
2002308c:	e8740490 	lwi	r3, r20, 1168
20023090:	e8630000 	lwi	r3, r3, 0
20023094:	a46301ff 	andi	r3, r3, 511
20023098:	10631800 	addk	r3, r3, r3
2002309c:	10641800 	addk	r3, r4, r3
200230a0:	e4630000 	lhui	r3, r3, 0
200230a4:	f4730028 	shi	r3, r19, 40
		local_mbx = mbx;
200230a8:	b0000000 	imm	0
200230ac:	e87404a0 	lwi	r3, r20, 1184
200230b0:	e0630000 	lbui	r3, r3, 0
200230b4:	f073002a 	sbi	r3, r19, 42
		if (local_mbx == 0) {
200230b8:	e073002a 	lbui	r3, r19, 42
200230bc:	90630060 	sext8	r3, r3
200230c0:	bc23000c 	bnei	r3, 12		// 200230cc
			pl = 0;
200230c4:	f013001c 	sbi	r0, r19, 28
200230c8:	b800001c 	bri	28		// 200230e4
		} else {
			local_ptr_left = ptr_left;
200230cc:	b0000000 	imm	0
200230d0:	e87404b8 	lwi	r3, r20, 1208
200230d4:	e0630000 	lbui	r3, r3, 0
200230d8:	f073002b 	sbi	r3, r19, 43
			pl = local_ptr_left;
200230dc:	e073002b 	lbui	r3, r19, 43
200230e0:	f073001c 	sbi	r3, r19, 28
		}
		local_top_edge = top_edge;
200230e4:	b0000000 	imm	0
200230e8:	e87404a4 	lwi	r3, r20, 1188
200230ec:	e8630000 	lwi	r3, r3, 0
200230f0:	f873002c 	swi	r3, r19, 44
		if (local_top_edge) {
200230f4:	e873002c 	lwi	r3, r19, 44
200230f8:	bc03000c 	beqi	r3, 12		// 20023104
			pa = 0;
200230fc:	f013001d 	sbi	r0, r19, 29
20023100:	b800001c 	bri	28		// 2002311c
		} else {
			local_ptr_above = ptr_above;
20023104:	b0000000 	imm	0
20023108:	e87404bc 	lwi	r3, r20, 1212
2002310c:	e0630000 	lbui	r3, r3, 0
20023110:	f0730030 	sbi	r3, r19, 48
			pa = local_ptr_above;
20023114:	e0730030 	lbui	r3, r19, 48
20023118:	f073001d 	sbi	r3, r19, 29
		}
		local_top_edge = top_edge;
2002311c:	b0000000 	imm	0
20023120:	e87404a4 	lwi	r3, r20, 1188
20023124:	e8630000 	lwi	r3, r3, 0
20023128:	f873002c 	swi	r3, r19, 44
		local_right_edge = right_edge;
2002312c:	b0000000 	imm	0
20023130:	e87404a8 	lwi	r3, r20, 1192
20023134:	e8630000 	lwi	r3, r3, 0
20023138:	f8730034 	swi	r3, r19, 52
		if (local_top_edge || local_right_edge) {
2002313c:	e873002c 	lwi	r3, r19, 44
20023140:	bc23000c 	bnei	r3, 12		// 2002314c
20023144:	e8730034 	lwi	r3, r19, 52
20023148:	bc03000c 	beqi	r3, 12		// 20023154
			par = 0;
2002314c:	f013001e 	sbi	r0, r19, 30
20023150:	b800001c 	bri	28		// 2002316c
		} else {
			local_ptr_above_right = ptr_above_right;
20023154:	b0000000 	imm	0
20023158:	e87404c0 	lwi	r3, r20, 1216
2002315c:	e0630000 	lbui	r3, r3, 0
20023160:	f0730038 	sbi	r3, r19, 56
			par = local_ptr_above_right;
20023164:	e0730038 	lbui	r3, r19, 56
20023168:	f073001e 	sbi	r3, r19, 30
		}
		local_comp = comp;
2002316c:	b0000000 	imm	0
20023170:	e87404ac 	lwi	r3, r20, 1196
20023174:	e0630000 	lbui	r3, r3, 0
20023178:	f0730039 	sbi	r3, r19, 57
		comp = local_comp + 1;
2002317c:	e0730039 	lbui	r3, r19, 57
20023180:	30630001 	addik	r3, r3, 1
20023184:	a46300ff 	andi	r3, r3, 255
20023188:	90830060 	sext8	r4, r3
2002318c:	b0000000 	imm	0
20023190:	e87404ac 	lwi	r3, r20, 1196
20023194:	f0830000 	sbi	r4, r3, 0
		tmp_access = access(pl, 1);
20023198:	e073001c 	lbui	r3, r19, 28
2002319c:	90630060 	sext8	r3, r3
200231a0:	10a30000 	addk	r5, r3, r0
200231a4:	30c00001 	addik	r6, r0, 1
200231a8:	b0000000 	imm	0
200231ac:	e89404e0 	lwi	r4, r20, 1248
200231b0:	99fc2000 	brald	r15, r4
200231b4:	80000000 	or	r0, r0, r0
200231b8:	f473003a 	shi	r3, r19, 58
		tokens_A[(index_A + (0)) % SIZE_A] = tmp_access;
200231bc:	b0000000 	imm	0
200231c0:	e874048c 	lwi	r3, r20, 1164
200231c4:	e8630000 	lwi	r3, r3, 0
200231c8:	e8830004 	lwi	r4, r3, 4
200231cc:	b0000000 	imm	0
200231d0:	e8740498 	lwi	r3, r20, 1176
200231d4:	e8630000 	lwi	r3, r3, 0
200231d8:	a46301ff 	andi	r3, r3, 511
200231dc:	10631800 	addk	r3, r3, r3
200231e0:	10641800 	addk	r3, r4, r3
200231e4:	e493003a 	lhui	r4, r19, 58
200231e8:	f4830000 	shi	r4, r3, 0
		tmp_access0 = access(pa, 2);
200231ec:	e073001d 	lbui	r3, r19, 29
200231f0:	90630060 	sext8	r3, r3
200231f4:	10a30000 	addk	r5, r3, r0
200231f8:	30c00002 	addik	r6, r0, 2
200231fc:	b0000000 	imm	0
20023200:	e89404e0 	lwi	r4, r20, 1248
20023204:	99fc2000 	brald	r15, r4
20023208:	80000000 	or	r0, r0, r0
2002320c:	f473003c 	shi	r3, r19, 60
		tokens_A[(index_A + (1)) % SIZE_A] = tmp_access0;
20023210:	b0000000 	imm	0
20023214:	e874048c 	lwi	r3, r20, 1164
20023218:	e8630000 	lwi	r3, r3, 0
2002321c:	e8830004 	lwi	r4, r3, 4
20023220:	b0000000 	imm	0
20023224:	e8740498 	lwi	r3, r20, 1176
20023228:	e8630000 	lwi	r3, r3, 0
2002322c:	30630001 	addik	r3, r3, 1
20023230:	a46301ff 	andi	r3, r3, 511
20023234:	10631800 	addk	r3, r3, r3
20023238:	10641800 	addk	r3, r4, r3
2002323c:	e493003c 	lhui	r4, r19, 60
20023240:	f4830000 	shi	r4, r3, 0
		tmp_access1 = access(par, 2);
20023244:	e073001e 	lbui	r3, r19, 30
20023248:	90630060 	sext8	r3, r3
2002324c:	10a30000 	addk	r5, r3, r0
20023250:	30c00002 	addik	r6, r0, 2
20023254:	b0000000 	imm	0
20023258:	e89404e0 	lwi	r4, r20, 1248
2002325c:	99fc2000 	brald	r15, r4
20023260:	80000000 	or	r0, r0, r0
20023264:	f473003e 	shi	r3, r19, 62
		tokens_A[(index_A + (2)) % SIZE_A] = tmp_access1;
20023268:	b0000000 	imm	0
2002326c:	e874048c 	lwi	r3, r20, 1164
20023270:	e8630000 	lwi	r3, r3, 0
20023274:	e8830004 	lwi	r4, r3, 4
20023278:	b0000000 	imm	0
2002327c:	e8740498 	lwi	r3, r20, 1176
20023280:	e8630000 	lwi	r3, r3, 0
20023284:	30630002 	addik	r3, r3, 2
20023288:	a46301ff 	andi	r3, r3, 511
2002328c:	10631800 	addk	r3, r3, r3
20023290:	10641800 	addk	r3, r4, r3
20023294:	e493003e 	lhui	r4, r19, 62
20023298:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
2002329c:	b0000000 	imm	0
200232a0:	e8740490 	lwi	r3, r20, 1168
200232a4:	e8630000 	lwi	r3, r3, 0
200232a8:	30830001 	addik	r4, r3, 1
200232ac:	b0000000 	imm	0
200232b0:	e8740490 	lwi	r3, r20, 1168
200232b4:	f8830000 	swi	r4, r3, 0
		index_A += 3;
200232b8:	b0000000 	imm	0
200232bc:	e8740498 	lwi	r3, r20, 1176
200232c0:	e8630000 	lwi	r3, r3, 0
200232c4:	30830003 	addik	r4, r3, 3
200232c8:	b0000000 	imm	0
200232cc:	e8740498 	lwi	r3, r20, 1176
200232d0:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
200232d4:	b0000000 	imm	0
200232d8:	e87404d0 	lwi	r3, r20, 1232
200232dc:	99fc1800 	brald	r15, r3
200232e0:	80000000 	or	r0, r0, r0
		write_end_A();
200232e4:	b0000000 	imm	0
200232e8:	e89404d8 	lwi	r4, r20, 1240
200232ec:	99fc2000 	brald	r15, r4
200232f0:	80000000 	or	r0, r0, r0
	}
200232f4:	e9e10000 	lwi	r15, r1, 0
200232f8:	10330000 	addk	r1, r19, r0
200232fc:	ea610040 	lwi	r19, r1, 64
20023300:	ea810044 	lwi	r20, r1, 68
20023304:	30210048 	addik	r1, r1, 72
20023308:	b60f0008 	rtsd	r15, 8
2002330c:	80000000 	or	r0, r0, r0

20023310 <isSchedulable_read_predict_y1>:
	static i32 isSchedulable_read_predict_y1() {
20023310:	3021ffd8 	addik	r1, r1, -40
20023314:	fa610020 	swi	r19, r1, 32
20023318:	fa810024 	swi	r20, r1, 36
2002331c:	12610000 	addk	r19, r1, r0
20023320:	96808000 	mfs	r20, rpc
20023324:	b000dffd 	imm	-8195
20023328:	3294e63c 	addik	r20, r20, -6596
		i32 local_INTER;
		i32 local_MOTION;
		i32 local_FOURMV;
		i8 local_comp;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2002332c:	b0000000 	imm	0
20023330:	e8740488 	lwi	r3, r20, 1160
20023334:	e8630000 	lwi	r3, r3, 0
20023338:	e8830004 	lwi	r4, r3, 4
2002333c:	b0000000 	imm	0
20023340:	e8740490 	lwi	r3, r20, 1168
20023344:	e8630000 	lwi	r3, r3, 0
20023348:	a46301ff 	andi	r3, r3, 511
2002334c:	10631800 	addk	r3, r3, r3
20023350:	10641800 	addk	r3, r4, r3
20023354:	e4630000 	lhui	r3, r3, 0
20023358:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
2002335c:	30600800 	addik	r3, r0, 2048	// 800 <decoder_parser_mvrecon_A>
20023360:	f8730008 	swi	r3, r19, 8
		local_INTER = ConstantsBtype_INTER;
20023364:	30600200 	addik	r3, r0, 512
20023368:	f873000c 	swi	r3, r19, 12
		local_MOTION = ConstantsBtype_MOTION;
2002336c:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20023370:	f8730010 	swi	r3, r19, 16
		local_FOURMV = Constants_FOURMV;
20023374:	30600004 	addik	r3, r0, 4
20023378:	f8730014 	swi	r3, r19, 20
		local_comp = comp;
2002337c:	b0000000 	imm	0
20023380:	e87404ac 	lwi	r3, r20, 1196
20023384:	e0630000 	lbui	r3, r3, 0
20023388:	f0730018 	sbi	r3, r19, 24
		result = (cmd & local_NEWVOP) == 0 && (cmd & local_INTER) != 0 && (cmd & local_MOTION) != 0 && (cmd & local_FOURMV) != 0 && local_comp == 1;
2002338c:	e4730004 	lhui	r3, r19, 4
20023390:	90830061 	sext16	r4, r3
20023394:	e8730008 	lwi	r3, r19, 8
20023398:	84641800 	and	r3, r4, r3
2002339c:	bc230058 	bnei	r3, 88		// 200233f4
200233a0:	e4730004 	lhui	r3, r19, 4
200233a4:	90830061 	sext16	r4, r3
200233a8:	e873000c 	lwi	r3, r19, 12
200233ac:	84641800 	and	r3, r4, r3
200233b0:	bc030044 	beqi	r3, 68		// 200233f4
200233b4:	e4730004 	lhui	r3, r19, 4
200233b8:	90830061 	sext16	r4, r3
200233bc:	e8730010 	lwi	r3, r19, 16
200233c0:	84641800 	and	r3, r4, r3
200233c4:	bc030030 	beqi	r3, 48		// 200233f4
200233c8:	e4730004 	lhui	r3, r19, 4
200233cc:	90830061 	sext16	r4, r3
200233d0:	e8730014 	lwi	r3, r19, 20
200233d4:	84641800 	and	r3, r4, r3
200233d8:	bc03001c 	beqi	r3, 28		// 200233f4
200233dc:	e0730018 	lbui	r3, r19, 24
200233e0:	90630060 	sext8	r3, r3
200233e4:	a8630001 	xori	r3, r3, 1
200233e8:	bc23000c 	bnei	r3, 12		// 200233f4
200233ec:	30600001 	addik	r3, r0, 1
200233f0:	b8000008 	bri	8		// 200233f8
200233f4:	10600000 	addk	r3, r0, r0
200233f8:	f873001c 	swi	r3, r19, 28
		return result;
200233fc:	e873001c 	lwi	r3, r19, 28
	}
20023400:	10330000 	addk	r1, r19, r0
20023404:	ea610020 	lwi	r19, r1, 32
20023408:	ea810024 	lwi	r20, r1, 36
2002340c:	30210028 	addik	r1, r1, 40
20023410:	b60f0008 	rtsd	r15, 8
20023414:	80000000 	or	r0, r0, r0

20023418 <read_predict_y1>:
	
	static void read_predict_y1() {
20023418:	3021ffb4 	addik	r1, r1, -76
2002341c:	f9e10000 	swi	r15, r1, 0
20023420:	fa610044 	swi	r19, r1, 68
20023424:	fa810048 	swi	r20, r1, 72
20023428:	12610000 	addk	r19, r1, r0
2002342c:	96808000 	mfs	r20, rpc
20023430:	b000dffd 	imm	-8195
20023434:	3294e530 	addik	r20, r20, -6864
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20023438:	b0000000 	imm	0
2002343c:	e8740490 	lwi	r3, r20, 1168
20023440:	e8630000 	lwi	r3, r3, 0
20023444:	a46301ff 	andi	r3, r3, 511
20023448:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_A = index_A % SIZE_A;
2002344c:	b0000000 	imm	0
20023450:	e8740498 	lwi	r3, r20, 1176
20023454:	e8630000 	lwi	r3, r3, 0
20023458:	a46301ff 	andi	r3, r3, 511
2002345c:	f8730024 	swi	r3, r19, 36
		i8 local_ptr;
		i16 tmp_access;
		i16 tmp_access0;
		i16 tmp_access1;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20023460:	b0000000 	imm	0
20023464:	e8740488 	lwi	r3, r20, 1160
20023468:	e8630000 	lwi	r3, r3, 0
2002346c:	e8830004 	lwi	r4, r3, 4
20023470:	b0000000 	imm	0
20023474:	e8740490 	lwi	r3, r20, 1168
20023478:	e8630000 	lwi	r3, r3, 0
2002347c:	a46301ff 	andi	r3, r3, 511
20023480:	10631800 	addk	r3, r3, r3
20023484:	10641800 	addk	r3, r4, r3
20023488:	e4630000 	lhui	r3, r3, 0
2002348c:	f4730028 	shi	r3, r19, 40
		local_top_edge = top_edge;
20023490:	b0000000 	imm	0
20023494:	e87404a4 	lwi	r3, r20, 1188
20023498:	e8630000 	lwi	r3, r3, 0
2002349c:	f873002c 	swi	r3, r19, 44
		if (local_top_edge) {
200234a0:	e873002c 	lwi	r3, r19, 44
200234a4:	bc03000c 	beqi	r3, 12		// 200234b0
			pa = 0;
200234a8:	f013001c 	sbi	r0, r19, 28
200234ac:	b800001c 	bri	28		// 200234c8
		} else {
			local_ptr_above = ptr_above;
200234b0:	b0000000 	imm	0
200234b4:	e87404bc 	lwi	r3, r20, 1212
200234b8:	e0630000 	lbui	r3, r3, 0
200234bc:	f0730030 	sbi	r3, r19, 48
			pa = local_ptr_above;
200234c0:	e0730030 	lbui	r3, r19, 48
200234c4:	f073001c 	sbi	r3, r19, 28
		}
		local_top_edge = top_edge;
200234c8:	b0000000 	imm	0
200234cc:	e87404a4 	lwi	r3, r20, 1188
200234d0:	e8630000 	lwi	r3, r3, 0
200234d4:	f873002c 	swi	r3, r19, 44
		local_right_edge = right_edge;
200234d8:	b0000000 	imm	0
200234dc:	e87404a8 	lwi	r3, r20, 1192
200234e0:	e8630000 	lwi	r3, r3, 0
200234e4:	f8730034 	swi	r3, r19, 52
		if (local_top_edge || local_right_edge) {
200234e8:	e873002c 	lwi	r3, r19, 44
200234ec:	bc23000c 	bnei	r3, 12		// 200234f8
200234f0:	e8730034 	lwi	r3, r19, 52
200234f4:	bc03000c 	beqi	r3, 12		// 20023500
			par = 0;
200234f8:	f013001d 	sbi	r0, r19, 29
200234fc:	b800001c 	bri	28		// 20023518
		} else {
			local_ptr_above_right = ptr_above_right;
20023500:	b0000000 	imm	0
20023504:	e87404c0 	lwi	r3, r20, 1216
20023508:	e0630000 	lbui	r3, r3, 0
2002350c:	f0730038 	sbi	r3, r19, 56
			par = local_ptr_above_right;
20023510:	e0730038 	lbui	r3, r19, 56
20023514:	f073001d 	sbi	r3, r19, 29
		}
		local_comp = comp;
20023518:	b0000000 	imm	0
2002351c:	e87404ac 	lwi	r3, r20, 1196
20023520:	e0630000 	lbui	r3, r3, 0
20023524:	f0730039 	sbi	r3, r19, 57
		comp = local_comp + 1;
20023528:	e0730039 	lbui	r3, r19, 57
2002352c:	30630001 	addik	r3, r3, 1
20023530:	a46300ff 	andi	r3, r3, 255
20023534:	90830060 	sext8	r4, r3
20023538:	b0000000 	imm	0
2002353c:	e87404ac 	lwi	r3, r20, 1196
20023540:	f0830000 	sbi	r4, r3, 0
		local_ptr = ptr;
20023544:	b0000000 	imm	0
20023548:	e87404b4 	lwi	r3, r20, 1204
2002354c:	e0630000 	lbui	r3, r3, 0
20023550:	f073003a 	sbi	r3, r19, 58
		tmp_access = access(local_ptr, 0);
20023554:	e073003a 	lbui	r3, r19, 58
20023558:	90630060 	sext8	r3, r3
2002355c:	10a30000 	addk	r5, r3, r0
20023560:	10c00000 	addk	r6, r0, r0
20023564:	b0000000 	imm	0
20023568:	e89404e0 	lwi	r4, r20, 1248
2002356c:	99fc2000 	brald	r15, r4
20023570:	80000000 	or	r0, r0, r0
20023574:	f473003c 	shi	r3, r19, 60
		tokens_A[(index_A + (0)) % SIZE_A] = tmp_access;
20023578:	b0000000 	imm	0
2002357c:	e874048c 	lwi	r3, r20, 1164
20023580:	e8630000 	lwi	r3, r3, 0
20023584:	e8830004 	lwi	r4, r3, 4
20023588:	b0000000 	imm	0
2002358c:	e8740498 	lwi	r3, r20, 1176
20023590:	e8630000 	lwi	r3, r3, 0
20023594:	a46301ff 	andi	r3, r3, 511
20023598:	10631800 	addk	r3, r3, r3
2002359c:	10641800 	addk	r3, r4, r3
200235a0:	e493003c 	lhui	r4, r19, 60
200235a4:	f4830000 	shi	r4, r3, 0
		tmp_access0 = access(pa, 3);
200235a8:	e073001c 	lbui	r3, r19, 28
200235ac:	90630060 	sext8	r3, r3
200235b0:	10a30000 	addk	r5, r3, r0
200235b4:	30c00003 	addik	r6, r0, 3
200235b8:	b0000000 	imm	0
200235bc:	e89404e0 	lwi	r4, r20, 1248
200235c0:	99fc2000 	brald	r15, r4
200235c4:	80000000 	or	r0, r0, r0
200235c8:	f473003e 	shi	r3, r19, 62
		tokens_A[(index_A + (1)) % SIZE_A] = tmp_access0;
200235cc:	b0000000 	imm	0
200235d0:	e874048c 	lwi	r3, r20, 1164
200235d4:	e8630000 	lwi	r3, r3, 0
200235d8:	e8830004 	lwi	r4, r3, 4
200235dc:	b0000000 	imm	0
200235e0:	e8740498 	lwi	r3, r20, 1176
200235e4:	e8630000 	lwi	r3, r3, 0
200235e8:	30630001 	addik	r3, r3, 1
200235ec:	a46301ff 	andi	r3, r3, 511
200235f0:	10631800 	addk	r3, r3, r3
200235f4:	10641800 	addk	r3, r4, r3
200235f8:	e493003e 	lhui	r4, r19, 62
200235fc:	f4830000 	shi	r4, r3, 0
		tmp_access1 = access(par, 2);
20023600:	e073001d 	lbui	r3, r19, 29
20023604:	90630060 	sext8	r3, r3
20023608:	10a30000 	addk	r5, r3, r0
2002360c:	30c00002 	addik	r6, r0, 2
20023610:	b0000000 	imm	0
20023614:	e89404e0 	lwi	r4, r20, 1248
20023618:	99fc2000 	brald	r15, r4
2002361c:	80000000 	or	r0, r0, r0
20023620:	f4730040 	shi	r3, r19, 64
		tokens_A[(index_A + (2)) % SIZE_A] = tmp_access1;
20023624:	b0000000 	imm	0
20023628:	e874048c 	lwi	r3, r20, 1164
2002362c:	e8630000 	lwi	r3, r3, 0
20023630:	e8830004 	lwi	r4, r3, 4
20023634:	b0000000 	imm	0
20023638:	e8740498 	lwi	r3, r20, 1176
2002363c:	e8630000 	lwi	r3, r3, 0
20023640:	30630002 	addik	r3, r3, 2
20023644:	a46301ff 	andi	r3, r3, 511
20023648:	10631800 	addk	r3, r3, r3
2002364c:	10641800 	addk	r3, r4, r3
20023650:	e4930040 	lhui	r4, r19, 64
20023654:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
20023658:	b0000000 	imm	0
2002365c:	e8740490 	lwi	r3, r20, 1168
20023660:	e8630000 	lwi	r3, r3, 0
20023664:	30830001 	addik	r4, r3, 1
20023668:	b0000000 	imm	0
2002366c:	e8740490 	lwi	r3, r20, 1168
20023670:	f8830000 	swi	r4, r3, 0
		index_A += 3;
20023674:	b0000000 	imm	0
20023678:	e8740498 	lwi	r3, r20, 1176
2002367c:	e8630000 	lwi	r3, r3, 0
20023680:	30830003 	addik	r4, r3, 3
20023684:	b0000000 	imm	0
20023688:	e8740498 	lwi	r3, r20, 1176
2002368c:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
20023690:	b0000000 	imm	0
20023694:	e87404d0 	lwi	r3, r20, 1232
20023698:	99fc1800 	brald	r15, r3
2002369c:	80000000 	or	r0, r0, r0
		write_end_A();
200236a0:	b0000000 	imm	0
200236a4:	e89404d8 	lwi	r4, r20, 1240
200236a8:	99fc2000 	brald	r15, r4
200236ac:	80000000 	or	r0, r0, r0
	}
200236b0:	e9e10000 	lwi	r15, r1, 0
200236b4:	10330000 	addk	r1, r19, r0
200236b8:	ea610044 	lwi	r19, r1, 68
200236bc:	ea810048 	lwi	r20, r1, 72
200236c0:	3021004c 	addik	r1, r1, 76
200236c4:	b60f0008 	rtsd	r15, 8
200236c8:	80000000 	or	r0, r0, r0

200236cc <isSchedulable_read_predict_y2>:
	static i32 isSchedulable_read_predict_y2() {
200236cc:	3021ffd8 	addik	r1, r1, -40
200236d0:	fa610020 	swi	r19, r1, 32
200236d4:	fa810024 	swi	r20, r1, 36
200236d8:	12610000 	addk	r19, r1, r0
200236dc:	96808000 	mfs	r20, rpc
200236e0:	b000dffd 	imm	-8195
200236e4:	3294e280 	addik	r20, r20, -7552
		i32 local_INTER;
		i32 local_MOTION;
		i32 local_FOURMV;
		i8 local_comp;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
200236e8:	b0000000 	imm	0
200236ec:	e8740488 	lwi	r3, r20, 1160
200236f0:	e8630000 	lwi	r3, r3, 0
200236f4:	e8830004 	lwi	r4, r3, 4
200236f8:	b0000000 	imm	0
200236fc:	e8740490 	lwi	r3, r20, 1168
20023700:	e8630000 	lwi	r3, r3, 0
20023704:	a46301ff 	andi	r3, r3, 511
20023708:	10631800 	addk	r3, r3, r3
2002370c:	10641800 	addk	r3, r4, r3
20023710:	e4630000 	lhui	r3, r3, 0
20023714:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
20023718:	30600800 	addik	r3, r0, 2048	// 800 <decoder_parser_mvrecon_A>
2002371c:	f8730008 	swi	r3, r19, 8
		local_INTER = ConstantsBtype_INTER;
20023720:	30600200 	addik	r3, r0, 512
20023724:	f873000c 	swi	r3, r19, 12
		local_MOTION = ConstantsBtype_MOTION;
20023728:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002372c:	f8730010 	swi	r3, r19, 16
		local_FOURMV = Constants_FOURMV;
20023730:	30600004 	addik	r3, r0, 4
20023734:	f8730014 	swi	r3, r19, 20
		local_comp = comp;
20023738:	b0000000 	imm	0
2002373c:	e87404ac 	lwi	r3, r20, 1196
20023740:	e0630000 	lbui	r3, r3, 0
20023744:	f0730018 	sbi	r3, r19, 24
		result = (cmd & local_NEWVOP) == 0 && (cmd & local_INTER) != 0 && (cmd & local_MOTION) != 0 && (cmd & local_FOURMV) != 0 && local_comp == 2;
20023748:	e4730004 	lhui	r3, r19, 4
2002374c:	90830061 	sext16	r4, r3
20023750:	e8730008 	lwi	r3, r19, 8
20023754:	84641800 	and	r3, r4, r3
20023758:	bc230058 	bnei	r3, 88		// 200237b0
2002375c:	e4730004 	lhui	r3, r19, 4
20023760:	90830061 	sext16	r4, r3
20023764:	e873000c 	lwi	r3, r19, 12
20023768:	84641800 	and	r3, r4, r3
2002376c:	bc030044 	beqi	r3, 68		// 200237b0
20023770:	e4730004 	lhui	r3, r19, 4
20023774:	90830061 	sext16	r4, r3
20023778:	e8730010 	lwi	r3, r19, 16
2002377c:	84641800 	and	r3, r4, r3
20023780:	bc030030 	beqi	r3, 48		// 200237b0
20023784:	e4730004 	lhui	r3, r19, 4
20023788:	90830061 	sext16	r4, r3
2002378c:	e8730014 	lwi	r3, r19, 20
20023790:	84641800 	and	r3, r4, r3
20023794:	bc03001c 	beqi	r3, 28		// 200237b0
20023798:	e0730018 	lbui	r3, r19, 24
2002379c:	90630060 	sext8	r3, r3
200237a0:	a8630002 	xori	r3, r3, 2
200237a4:	bc23000c 	bnei	r3, 12		// 200237b0
200237a8:	30600001 	addik	r3, r0, 1
200237ac:	b8000008 	bri	8		// 200237b4
200237b0:	10600000 	addk	r3, r0, r0
200237b4:	f873001c 	swi	r3, r19, 28
		return result;
200237b8:	e873001c 	lwi	r3, r19, 28
	}
200237bc:	10330000 	addk	r1, r19, r0
200237c0:	ea610020 	lwi	r19, r1, 32
200237c4:	ea810024 	lwi	r20, r1, 36
200237c8:	30210028 	addik	r1, r1, 40
200237cc:	b60f0008 	rtsd	r15, 8
200237d0:	80000000 	or	r0, r0, r0

200237d4 <read_predict_y2>:
	
	static void read_predict_y2() {
200237d4:	3021ffc0 	addik	r1, r1, -64
200237d8:	f9e10000 	swi	r15, r1, 0
200237dc:	fa610038 	swi	r19, r1, 56
200237e0:	fa81003c 	swi	r20, r1, 60
200237e4:	12610000 	addk	r19, r1, r0
200237e8:	96808000 	mfs	r20, rpc
200237ec:	b000dffd 	imm	-8195
200237f0:	3294e174 	addik	r20, r20, -7820
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
200237f4:	b0000000 	imm	0
200237f8:	e8740490 	lwi	r3, r20, 1168
200237fc:	e8630000 	lwi	r3, r3, 0
20023800:	a46301ff 	andi	r3, r3, 511
20023804:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_A = index_A % SIZE_A;
20023808:	b0000000 	imm	0
2002380c:	e8740498 	lwi	r3, r20, 1176
20023810:	e8630000 	lwi	r3, r3, 0
20023814:	a46301ff 	andi	r3, r3, 511
20023818:	f8730024 	swi	r3, r19, 36
		i16 tmp_access;
		i8 local_ptr;
		i16 tmp_access0;
		i16 tmp_access1;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2002381c:	b0000000 	imm	0
20023820:	e8740488 	lwi	r3, r20, 1160
20023824:	e8630000 	lwi	r3, r3, 0
20023828:	e8830004 	lwi	r4, r3, 4
2002382c:	b0000000 	imm	0
20023830:	e8740490 	lwi	r3, r20, 1168
20023834:	e8630000 	lwi	r3, r3, 0
20023838:	a46301ff 	andi	r3, r3, 511
2002383c:	10631800 	addk	r3, r3, r3
20023840:	10641800 	addk	r3, r4, r3
20023844:	e4630000 	lhui	r3, r3, 0
20023848:	f4730028 	shi	r3, r19, 40
		local_mbx = mbx;
2002384c:	b0000000 	imm	0
20023850:	e87404a0 	lwi	r3, r20, 1184
20023854:	e0630000 	lbui	r3, r3, 0
20023858:	f073002a 	sbi	r3, r19, 42
		if (local_mbx == 0) {
2002385c:	e073002a 	lbui	r3, r19, 42
20023860:	90630060 	sext8	r3, r3
20023864:	bc23000c 	bnei	r3, 12		// 20023870
			pl = 0;
20023868:	f013001c 	sbi	r0, r19, 28
2002386c:	b800001c 	bri	28		// 20023888
		} else {
			local_ptr_left = ptr_left;
20023870:	b0000000 	imm	0
20023874:	e87404b8 	lwi	r3, r20, 1208
20023878:	e0630000 	lbui	r3, r3, 0
2002387c:	f073002b 	sbi	r3, r19, 43
			pl = local_ptr_left;
20023880:	e073002b 	lbui	r3, r19, 43
20023884:	f073001c 	sbi	r3, r19, 28
		}
		local_comp = comp;
20023888:	b0000000 	imm	0
2002388c:	e87404ac 	lwi	r3, r20, 1196
20023890:	e0630000 	lbui	r3, r3, 0
20023894:	f073002c 	sbi	r3, r19, 44
		comp = local_comp + 1;
20023898:	e073002c 	lbui	r3, r19, 44
2002389c:	30630001 	addik	r3, r3, 1
200238a0:	a46300ff 	andi	r3, r3, 255
200238a4:	90830060 	sext8	r4, r3
200238a8:	b0000000 	imm	0
200238ac:	e87404ac 	lwi	r3, r20, 1196
200238b0:	f0830000 	sbi	r4, r3, 0
		tmp_access = access(pl, 3);
200238b4:	e073001c 	lbui	r3, r19, 28
200238b8:	90630060 	sext8	r3, r3
200238bc:	10a30000 	addk	r5, r3, r0
200238c0:	30c00003 	addik	r6, r0, 3
200238c4:	b0000000 	imm	0
200238c8:	e89404e0 	lwi	r4, r20, 1248
200238cc:	99fc2000 	brald	r15, r4
200238d0:	80000000 	or	r0, r0, r0
200238d4:	f473002e 	shi	r3, r19, 46
		tokens_A[(index_A + (0)) % SIZE_A] = tmp_access;
200238d8:	b0000000 	imm	0
200238dc:	e874048c 	lwi	r3, r20, 1164
200238e0:	e8630000 	lwi	r3, r3, 0
200238e4:	e8830004 	lwi	r4, r3, 4
200238e8:	b0000000 	imm	0
200238ec:	e8740498 	lwi	r3, r20, 1176
200238f0:	e8630000 	lwi	r3, r3, 0
200238f4:	a46301ff 	andi	r3, r3, 511
200238f8:	10631800 	addk	r3, r3, r3
200238fc:	10641800 	addk	r3, r4, r3
20023900:	e493002e 	lhui	r4, r19, 46
20023904:	f4830000 	shi	r4, r3, 0
		local_ptr = ptr;
20023908:	b0000000 	imm	0
2002390c:	e87404b4 	lwi	r3, r20, 1204
20023910:	e0630000 	lbui	r3, r3, 0
20023914:	f0730030 	sbi	r3, r19, 48
		tmp_access0 = access(local_ptr, 0);
20023918:	e0730030 	lbui	r3, r19, 48
2002391c:	90630060 	sext8	r3, r3
20023920:	10a30000 	addk	r5, r3, r0
20023924:	10c00000 	addk	r6, r0, r0
20023928:	b0000000 	imm	0
2002392c:	e89404e0 	lwi	r4, r20, 1248
20023930:	99fc2000 	brald	r15, r4
20023934:	80000000 	or	r0, r0, r0
20023938:	f4730032 	shi	r3, r19, 50
		tokens_A[(index_A + (1)) % SIZE_A] = tmp_access0;
2002393c:	b0000000 	imm	0
20023940:	e874048c 	lwi	r3, r20, 1164
20023944:	e8630000 	lwi	r3, r3, 0
20023948:	e8830004 	lwi	r4, r3, 4
2002394c:	b0000000 	imm	0
20023950:	e8740498 	lwi	r3, r20, 1176
20023954:	e8630000 	lwi	r3, r3, 0
20023958:	30630001 	addik	r3, r3, 1
2002395c:	a46301ff 	andi	r3, r3, 511
20023960:	10631800 	addk	r3, r3, r3
20023964:	10641800 	addk	r3, r4, r3
20023968:	e4930032 	lhui	r4, r19, 50
2002396c:	f4830000 	shi	r4, r3, 0
		local_ptr = ptr;
20023970:	b0000000 	imm	0
20023974:	e87404b4 	lwi	r3, r20, 1204
20023978:	e0630000 	lbui	r3, r3, 0
2002397c:	f0730030 	sbi	r3, r19, 48
		tmp_access1 = access(local_ptr, 1);
20023980:	e0730030 	lbui	r3, r19, 48
20023984:	90630060 	sext8	r3, r3
20023988:	10a30000 	addk	r5, r3, r0
2002398c:	30c00001 	addik	r6, r0, 1
20023990:	b0000000 	imm	0
20023994:	e89404e0 	lwi	r4, r20, 1248
20023998:	99fc2000 	brald	r15, r4
2002399c:	80000000 	or	r0, r0, r0
200239a0:	f4730034 	shi	r3, r19, 52
		tokens_A[(index_A + (2)) % SIZE_A] = tmp_access1;
200239a4:	b0000000 	imm	0
200239a8:	e874048c 	lwi	r3, r20, 1164
200239ac:	e8630000 	lwi	r3, r3, 0
200239b0:	e8830004 	lwi	r4, r3, 4
200239b4:	b0000000 	imm	0
200239b8:	e8740498 	lwi	r3, r20, 1176
200239bc:	e8630000 	lwi	r3, r3, 0
200239c0:	30630002 	addik	r3, r3, 2
200239c4:	a46301ff 	andi	r3, r3, 511
200239c8:	10631800 	addk	r3, r3, r3
200239cc:	10641800 	addk	r3, r4, r3
200239d0:	e4930034 	lhui	r4, r19, 52
200239d4:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
200239d8:	b0000000 	imm	0
200239dc:	e8740490 	lwi	r3, r20, 1168
200239e0:	e8630000 	lwi	r3, r3, 0
200239e4:	30830001 	addik	r4, r3, 1
200239e8:	b0000000 	imm	0
200239ec:	e8740490 	lwi	r3, r20, 1168
200239f0:	f8830000 	swi	r4, r3, 0
		index_A += 3;
200239f4:	b0000000 	imm	0
200239f8:	e8740498 	lwi	r3, r20, 1176
200239fc:	e8630000 	lwi	r3, r3, 0
20023a00:	30830003 	addik	r4, r3, 3
20023a04:	b0000000 	imm	0
20023a08:	e8740498 	lwi	r3, r20, 1176
20023a0c:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
20023a10:	b0000000 	imm	0
20023a14:	e87404d0 	lwi	r3, r20, 1232
20023a18:	99fc1800 	brald	r15, r3
20023a1c:	80000000 	or	r0, r0, r0
		write_end_A();
20023a20:	b0000000 	imm	0
20023a24:	e89404d8 	lwi	r4, r20, 1240
20023a28:	99fc2000 	brald	r15, r4
20023a2c:	80000000 	or	r0, r0, r0
	}
20023a30:	e9e10000 	lwi	r15, r1, 0
20023a34:	10330000 	addk	r1, r19, r0
20023a38:	ea610038 	lwi	r19, r1, 56
20023a3c:	ea81003c 	lwi	r20, r1, 60
20023a40:	30210040 	addik	r1, r1, 64
20023a44:	b60f0008 	rtsd	r15, 8
20023a48:	80000000 	or	r0, r0, r0

20023a4c <isSchedulable_read_predict_y3>:
	static i32 isSchedulable_read_predict_y3() {
20023a4c:	3021ffd8 	addik	r1, r1, -40
20023a50:	fa610020 	swi	r19, r1, 32
20023a54:	fa810024 	swi	r20, r1, 36
20023a58:	12610000 	addk	r19, r1, r0
20023a5c:	96808000 	mfs	r20, rpc
20023a60:	b000dffd 	imm	-8195
20023a64:	3294df00 	addik	r20, r20, -8448
		i32 local_INTER;
		i32 local_MOTION;
		i32 local_FOURMV;
		i8 local_comp;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20023a68:	b0000000 	imm	0
20023a6c:	e8740488 	lwi	r3, r20, 1160
20023a70:	e8630000 	lwi	r3, r3, 0
20023a74:	e8830004 	lwi	r4, r3, 4
20023a78:	b0000000 	imm	0
20023a7c:	e8740490 	lwi	r3, r20, 1168
20023a80:	e8630000 	lwi	r3, r3, 0
20023a84:	a46301ff 	andi	r3, r3, 511
20023a88:	10631800 	addk	r3, r3, r3
20023a8c:	10641800 	addk	r3, r4, r3
20023a90:	e4630000 	lhui	r3, r3, 0
20023a94:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
20023a98:	30600800 	addik	r3, r0, 2048	// 800 <decoder_parser_mvrecon_A>
20023a9c:	f8730008 	swi	r3, r19, 8
		local_INTER = ConstantsBtype_INTER;
20023aa0:	30600200 	addik	r3, r0, 512
20023aa4:	f873000c 	swi	r3, r19, 12
		local_MOTION = ConstantsBtype_MOTION;
20023aa8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20023aac:	f8730010 	swi	r3, r19, 16
		local_FOURMV = Constants_FOURMV;
20023ab0:	30600004 	addik	r3, r0, 4
20023ab4:	f8730014 	swi	r3, r19, 20
		local_comp = comp;
20023ab8:	b0000000 	imm	0
20023abc:	e87404ac 	lwi	r3, r20, 1196
20023ac0:	e0630000 	lbui	r3, r3, 0
20023ac4:	f0730018 	sbi	r3, r19, 24
		result = (cmd & local_NEWVOP) == 0 && (cmd & local_INTER) != 0 && (cmd & local_MOTION) != 0 && (cmd & local_FOURMV) != 0 && local_comp == 3;
20023ac8:	e4730004 	lhui	r3, r19, 4
20023acc:	90830061 	sext16	r4, r3
20023ad0:	e8730008 	lwi	r3, r19, 8
20023ad4:	84641800 	and	r3, r4, r3
20023ad8:	bc230058 	bnei	r3, 88		// 20023b30
20023adc:	e4730004 	lhui	r3, r19, 4
20023ae0:	90830061 	sext16	r4, r3
20023ae4:	e873000c 	lwi	r3, r19, 12
20023ae8:	84641800 	and	r3, r4, r3
20023aec:	bc030044 	beqi	r3, 68		// 20023b30
20023af0:	e4730004 	lhui	r3, r19, 4
20023af4:	90830061 	sext16	r4, r3
20023af8:	e8730010 	lwi	r3, r19, 16
20023afc:	84641800 	and	r3, r4, r3
20023b00:	bc030030 	beqi	r3, 48		// 20023b30
20023b04:	e4730004 	lhui	r3, r19, 4
20023b08:	90830061 	sext16	r4, r3
20023b0c:	e8730014 	lwi	r3, r19, 20
20023b10:	84641800 	and	r3, r4, r3
20023b14:	bc03001c 	beqi	r3, 28		// 20023b30
20023b18:	e0730018 	lbui	r3, r19, 24
20023b1c:	90630060 	sext8	r3, r3
20023b20:	a8630003 	xori	r3, r3, 3
20023b24:	bc23000c 	bnei	r3, 12		// 20023b30
20023b28:	30600001 	addik	r3, r0, 1
20023b2c:	b8000008 	bri	8		// 20023b34
20023b30:	10600000 	addk	r3, r0, r0
20023b34:	f873001c 	swi	r3, r19, 28
		return result;
20023b38:	e873001c 	lwi	r3, r19, 28
	}
20023b3c:	10330000 	addk	r1, r19, r0
20023b40:	ea610020 	lwi	r19, r1, 32
20023b44:	ea810024 	lwi	r20, r1, 36
20023b48:	30210028 	addik	r1, r1, 40
20023b4c:	b60f0008 	rtsd	r15, 8
20023b50:	80000000 	or	r0, r0, r0

20023b54 <read_predict_y3>:
	
	static void read_predict_y3() {
20023b54:	3021ffc8 	addik	r1, r1, -56
20023b58:	f9e10000 	swi	r15, r1, 0
20023b5c:	fa610030 	swi	r19, r1, 48
20023b60:	fa810034 	swi	r20, r1, 52
20023b64:	12610000 	addk	r19, r1, r0
20023b68:	96808000 	mfs	r20, rpc
20023b6c:	b000dffd 	imm	-8195
20023b70:	3294ddf4 	addik	r20, r20, -8716
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20023b74:	b0000000 	imm	0
20023b78:	e8740490 	lwi	r3, r20, 1168
20023b7c:	e8630000 	lwi	r3, r3, 0
20023b80:	a46301ff 	andi	r3, r3, 511
20023b84:	f873001c 	swi	r3, r19, 28
		i32 index_aligned_A = index_A % SIZE_A;
20023b88:	b0000000 	imm	0
20023b8c:	e8740498 	lwi	r3, r20, 1176
20023b90:	e8630000 	lwi	r3, r3, 0
20023b94:	a46301ff 	andi	r3, r3, 511
20023b98:	f8730020 	swi	r3, r19, 32
		i8 local_ptr;
		i16 tmp_access;
		i16 tmp_access0;
		i16 tmp_access1;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20023b9c:	b0000000 	imm	0
20023ba0:	e8740488 	lwi	r3, r20, 1160
20023ba4:	e8630000 	lwi	r3, r3, 0
20023ba8:	e8830004 	lwi	r4, r3, 4
20023bac:	b0000000 	imm	0
20023bb0:	e8740490 	lwi	r3, r20, 1168
20023bb4:	e8630000 	lwi	r3, r3, 0
20023bb8:	a46301ff 	andi	r3, r3, 511
20023bbc:	10631800 	addk	r3, r3, r3
20023bc0:	10641800 	addk	r3, r4, r3
20023bc4:	e4630000 	lhui	r3, r3, 0
20023bc8:	f4730024 	shi	r3, r19, 36
		local_comp = comp;
20023bcc:	b0000000 	imm	0
20023bd0:	e87404ac 	lwi	r3, r20, 1196
20023bd4:	e0630000 	lbui	r3, r3, 0
20023bd8:	f0730026 	sbi	r3, r19, 38
		comp = local_comp + 1;
20023bdc:	e0730026 	lbui	r3, r19, 38
20023be0:	30630001 	addik	r3, r3, 1
20023be4:	a46300ff 	andi	r3, r3, 255
20023be8:	90830060 	sext8	r4, r3
20023bec:	b0000000 	imm	0
20023bf0:	e87404ac 	lwi	r3, r20, 1196
20023bf4:	f0830000 	sbi	r4, r3, 0
		local_ptr = ptr;
20023bf8:	b0000000 	imm	0
20023bfc:	e87404b4 	lwi	r3, r20, 1204
20023c00:	e0630000 	lbui	r3, r3, 0
20023c04:	f0730027 	sbi	r3, r19, 39
		tmp_access = access(local_ptr, 2);
20023c08:	e0730027 	lbui	r3, r19, 39
20023c0c:	90630060 	sext8	r3, r3
20023c10:	10a30000 	addk	r5, r3, r0
20023c14:	30c00002 	addik	r6, r0, 2
20023c18:	b0000000 	imm	0
20023c1c:	e89404e0 	lwi	r4, r20, 1248
20023c20:	99fc2000 	brald	r15, r4
20023c24:	80000000 	or	r0, r0, r0
20023c28:	f4730028 	shi	r3, r19, 40
		tokens_A[(index_A + (0)) % SIZE_A] = tmp_access;
20023c2c:	b0000000 	imm	0
20023c30:	e874048c 	lwi	r3, r20, 1164
20023c34:	e8630000 	lwi	r3, r3, 0
20023c38:	e8830004 	lwi	r4, r3, 4
20023c3c:	b0000000 	imm	0
20023c40:	e8740498 	lwi	r3, r20, 1176
20023c44:	e8630000 	lwi	r3, r3, 0
20023c48:	a46301ff 	andi	r3, r3, 511
20023c4c:	10631800 	addk	r3, r3, r3
20023c50:	10641800 	addk	r3, r4, r3
20023c54:	e4930028 	lhui	r4, r19, 40
20023c58:	f4830000 	shi	r4, r3, 0
		local_ptr = ptr;
20023c5c:	b0000000 	imm	0
20023c60:	e87404b4 	lwi	r3, r20, 1204
20023c64:	e0630000 	lbui	r3, r3, 0
20023c68:	f0730027 	sbi	r3, r19, 39
		tmp_access0 = access(local_ptr, 0);
20023c6c:	e0730027 	lbui	r3, r19, 39
20023c70:	90630060 	sext8	r3, r3
20023c74:	10a30000 	addk	r5, r3, r0
20023c78:	10c00000 	addk	r6, r0, r0
20023c7c:	b0000000 	imm	0
20023c80:	e89404e0 	lwi	r4, r20, 1248
20023c84:	99fc2000 	brald	r15, r4
20023c88:	80000000 	or	r0, r0, r0
20023c8c:	f473002a 	shi	r3, r19, 42
		tokens_A[(index_A + (1)) % SIZE_A] = tmp_access0;
20023c90:	b0000000 	imm	0
20023c94:	e874048c 	lwi	r3, r20, 1164
20023c98:	e8630000 	lwi	r3, r3, 0
20023c9c:	e8830004 	lwi	r4, r3, 4
20023ca0:	b0000000 	imm	0
20023ca4:	e8740498 	lwi	r3, r20, 1176
20023ca8:	e8630000 	lwi	r3, r3, 0
20023cac:	30630001 	addik	r3, r3, 1
20023cb0:	a46301ff 	andi	r3, r3, 511
20023cb4:	10631800 	addk	r3, r3, r3
20023cb8:	10641800 	addk	r3, r4, r3
20023cbc:	e493002a 	lhui	r4, r19, 42
20023cc0:	f4830000 	shi	r4, r3, 0
		local_ptr = ptr;
20023cc4:	b0000000 	imm	0
20023cc8:	e87404b4 	lwi	r3, r20, 1204
20023ccc:	e0630000 	lbui	r3, r3, 0
20023cd0:	f0730027 	sbi	r3, r19, 39
		tmp_access1 = access(local_ptr, 1);
20023cd4:	e0730027 	lbui	r3, r19, 39
20023cd8:	90630060 	sext8	r3, r3
20023cdc:	10a30000 	addk	r5, r3, r0
20023ce0:	30c00001 	addik	r6, r0, 1
20023ce4:	b0000000 	imm	0
20023ce8:	e89404e0 	lwi	r4, r20, 1248
20023cec:	99fc2000 	brald	r15, r4
20023cf0:	80000000 	or	r0, r0, r0
20023cf4:	f473002c 	shi	r3, r19, 44
		tokens_A[(index_A + (2)) % SIZE_A] = tmp_access1;
20023cf8:	b0000000 	imm	0
20023cfc:	e874048c 	lwi	r3, r20, 1164
20023d00:	e8630000 	lwi	r3, r3, 0
20023d04:	e8830004 	lwi	r4, r3, 4
20023d08:	b0000000 	imm	0
20023d0c:	e8740498 	lwi	r3, r20, 1176
20023d10:	e8630000 	lwi	r3, r3, 0
20023d14:	30630002 	addik	r3, r3, 2
20023d18:	a46301ff 	andi	r3, r3, 511
20023d1c:	10631800 	addk	r3, r3, r3
20023d20:	10641800 	addk	r3, r4, r3
20023d24:	e493002c 	lhui	r4, r19, 44
20023d28:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
20023d2c:	b0000000 	imm	0
20023d30:	e8740490 	lwi	r3, r20, 1168
20023d34:	e8630000 	lwi	r3, r3, 0
20023d38:	30830001 	addik	r4, r3, 1
20023d3c:	b0000000 	imm	0
20023d40:	e8740490 	lwi	r3, r20, 1168
20023d44:	f8830000 	swi	r4, r3, 0
		index_A += 3;
20023d48:	b0000000 	imm	0
20023d4c:	e8740498 	lwi	r3, r20, 1176
20023d50:	e8630000 	lwi	r3, r3, 0
20023d54:	30830003 	addik	r4, r3, 3
20023d58:	b0000000 	imm	0
20023d5c:	e8740498 	lwi	r3, r20, 1176
20023d60:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
20023d64:	b0000000 	imm	0
20023d68:	e87404d0 	lwi	r3, r20, 1232
20023d6c:	99fc1800 	brald	r15, r3
20023d70:	80000000 	or	r0, r0, r0
		write_end_A();
20023d74:	b0000000 	imm	0
20023d78:	e89404d8 	lwi	r4, r20, 1240
20023d7c:	99fc2000 	brald	r15, r4
20023d80:	80000000 	or	r0, r0, r0
	}
20023d84:	e9e10000 	lwi	r15, r1, 0
20023d88:	10330000 	addk	r1, r19, r0
20023d8c:	ea610030 	lwi	r19, r1, 48
20023d90:	ea810034 	lwi	r20, r1, 52
20023d94:	30210038 	addik	r1, r1, 56
20023d98:	b60f0008 	rtsd	r15, 8
20023d9c:	80000000 	or	r0, r0, r0

20023da0 <decoder_parser_mvseq_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_parser_mvseq_initialize() {
20023da0:	3021fff0 	addik	r1, r1, -16
20023da4:	fa610008 	swi	r19, r1, 8
20023da8:	fa81000c 	swi	r20, r1, 12
20023dac:	12610000 	addk	r19, r1, r0
20023db0:	96808000 	mfs	r20, rpc
20023db4:	b000dffd 	imm	-8195
20023db8:	3294dbac 	addik	r20, r20, -9300
		int i = 0;
20023dbc:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_read;
20023dc0:	b0000000 	imm	0
20023dc4:	e87404c8 	lwi	r3, r20, 1224
20023dc8:	30800002 	addik	r4, r0, 2
20023dcc:	f8830000 	swi	r4, r3, 0
		
	finished:
		// no read_end/write_end here!
		return;
20023dd0:	80000000 	or	r0, r0, r0
	}
20023dd4:	10330000 	addk	r1, r19, r0
20023dd8:	ea610008 	lwi	r19, r1, 8
20023ddc:	ea81000c 	lwi	r20, r1, 12
20023de0:	30210010 	addik	r1, r1, 16
20023de4:	b60f0008 	rtsd	r15, 8
20023de8:	80000000 	or	r0, r0, r0

20023dec <decoder_parser_mvseq_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	
	int decoder_parser_mvseq_scheduler() {
20023dec:	3021ffb8 	addik	r1, r1, -72
20023df0:	f9e10000 	swi	r15, r1, 0
20023df4:	fa610040 	swi	r19, r1, 64
20023df8:	fa810044 	swi	r20, r1, 68
20023dfc:	12610000 	addk	r19, r1, r0
20023e00:	96808000 	mfs	r20, rpc
20023e04:	b000dffd 	imm	-8195
20023e08:	3294db5c 	addik	r20, r20, -9380
		int i = 0;
20023e0c:	f813001c 	swi	r0, r19, 28
		if(needInit){
20023e10:	b0000000 	imm	0
20023e14:	e87404c4 	lwi	r3, r20, 1220
20023e18:	e0630000 	lbui	r3, r3, 0
20023e1c:	bc03001c 	beqi	r3, 28		// 20023e38
			decoder_parser_mvseq_initialize();
20023e20:	b000ffff 	imm	-1
20023e24:	b9f4ff7c 	brlid	r15, -132	// 20023da0 <decoder_parser_mvseq_initialize>
20023e28:	80000000 	or	r0, r0, r0
			needInit = 0;
20023e2c:	b0000000 	imm	0
20023e30:	e87404c4 	lwi	r3, r20, 1220
20023e34:	f0030000 	sbi	r0, r3, 0
		}
	
		read_BTYPE();
20023e38:	b0000000 	imm	0
20023e3c:	e87404cc 	lwi	r3, r20, 1228
20023e40:	99fc1800 	brald	r15, r3
20023e44:	80000000 	or	r0, r0, r0
		write_A();
20023e48:	b0000000 	imm	0
20023e4c:	e89404d4 	lwi	r4, r20, 1236
20023e50:	99fc2000 	brald	r15, r4
20023e54:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
20023e58:	b0000000 	imm	0
20023e5c:	e87404c8 	lwi	r3, r20, 1224
20023e60:	e8630000 	lwi	r3, r3, 0
20023e64:	a8830001 	xori	r4, r3, 1
20023e68:	bc0400ac 	beqi	r4, 172		// 20023f14
20023e6c:	30800001 	addik	r4, r0, 1
20023e70:	16441803 	cmpu	r18, r4, r3
20023e74:	bc52001c 	blti	r18, 28		// 20023e90
20023e78:	a8630002 	xori	r3, r3, 2
20023e7c:	bc030124 	beqi	r3, 292		// 20023fa0
		case my_state_getw:
			goto l_getw;
		case my_state_read:
			goto l_read;
		default:
			exit(1);
20023e80:	30a00001 	addik	r5, r0, 1
20023e84:	b000dffd 	imm	-8195
20023e88:	b9f4c510 	brlid	r15, -15088	// 398 <exit>
20023e8c:	80000000 	or	r0, r0, r0
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_geth:
			goto l_geth;
20023e90:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_geth:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_geth()) {
20023e94:	b0000000 	imm	0
20023e98:	e8740494 	lwi	r3, r20, 1172
20023e9c:	e8830000 	lwi	r4, r3, 0
20023ea0:	b0000000 	imm	0
20023ea4:	e8740490 	lwi	r3, r20, 1168
20023ea8:	e8630000 	lwi	r3, r3, 0
20023eac:	88641800 	xor	r3, r4, r3
20023eb0:	bc030054 	beqi	r3, 84		// 20023f04
20023eb4:	b0000000 	imm	0
20023eb8:	e89404f4 	lwi	r4, r20, 1268
20023ebc:	99fc2000 	brald	r15, r4
20023ec0:	80000000 	or	r0, r0, r0
20023ec4:	bc030040 	beqi	r3, 64		// 20023f04
				int stop = 0;
20023ec8:	f8130030 	swi	r0, r19, 48
				if (stop != 0) {
20023ecc:	e8730030 	lwi	r3, r19, 48
20023ed0:	bc030014 	beqi	r3, 20		// 20023ee4
					_FSM_state = my_state_geth;
20023ed4:	b0000000 	imm	0
20023ed8:	e87404c8 	lwi	r3, r20, 1224
20023edc:	f8030000 	swi	r0, r3, 0
					goto finished;
20023ee0:	b8000480 	bri	1152		// 20024360
				}
				geth();
20023ee4:	b0000000 	imm	0
20023ee8:	e87404f8 	lwi	r3, r20, 1272
20023eec:	99fc1800 	brald	r15, r3
20023ef0:	80000000 	or	r0, r0, r0
				i++;
20023ef4:	e873001c 	lwi	r3, r19, 28
20023ef8:	30630001 	addik	r3, r3, 1
20023efc:	f873001c 	swi	r3, r19, 28
				goto l_read;
20023f00:	b80000a4 	bri	164		// 20023fa4
			} else {
				_FSM_state = my_state_geth;
20023f04:	b0000000 	imm	0
20023f08:	e87404c8 	lwi	r3, r20, 1224
20023f0c:	f8030000 	swi	r0, r3, 0
				goto finished;
20023f10:	b8000450 	bri	1104		// 20024360
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_geth:
			goto l_geth;
		case my_state_getw:
			goto l_getw;
20023f14:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_geth;
				goto finished;
			}
		l_getw:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_getw()) {
20023f18:	b0000000 	imm	0
20023f1c:	e8740494 	lwi	r3, r20, 1172
20023f20:	e8830000 	lwi	r4, r3, 0
20023f24:	b0000000 	imm	0
20023f28:	e8740490 	lwi	r3, r20, 1168
20023f2c:	e8630000 	lwi	r3, r3, 0
20023f30:	88641800 	xor	r3, r4, r3
20023f34:	bc030058 	beqi	r3, 88		// 20023f8c
20023f38:	b0000000 	imm	0
20023f3c:	e89404ec 	lwi	r4, r20, 1260
20023f40:	99fc2000 	brald	r15, r4
20023f44:	80000000 	or	r0, r0, r0
20023f48:	bc030044 	beqi	r3, 68		// 20023f8c
				int stop = 0;
20023f4c:	f813003c 	swi	r0, r19, 60
				if (stop != 0) {
20023f50:	e873003c 	lwi	r3, r19, 60
20023f54:	bc030018 	beqi	r3, 24		// 20023f6c
					_FSM_state = my_state_getw;
20023f58:	b0000000 	imm	0
20023f5c:	e87404c8 	lwi	r3, r20, 1224
20023f60:	30800001 	addik	r4, r0, 1
20023f64:	f8830000 	swi	r4, r3, 0
					goto finished;
20023f68:	b80003f8 	bri	1016		// 20024360
				}
				getw_replaced();
20023f6c:	b0000000 	imm	0
20023f70:	e87404f0 	lwi	r3, r20, 1264
20023f74:	99fc1800 	brald	r15, r3
20023f78:	80000000 	or	r0, r0, r0
				i++;
20023f7c:	e873001c 	lwi	r3, r19, 28
20023f80:	30630001 	addik	r3, r3, 1
20023f84:	f873001c 	swi	r3, r19, 28
				goto l_geth;
20023f88:	b800ff0c 	bri	-244		// 20023e94
			} else {
				_FSM_state = my_state_getw;
20023f8c:	b0000000 	imm	0
20023f90:	e87404c8 	lwi	r3, r20, 1224
20023f94:	30800001 	addik	r4, r0, 1
20023f98:	f8830000 	swi	r4, r3, 0
				goto finished;
20023f9c:	b80003c4 	bri	964		// 20024360
		case my_state_geth:
			goto l_geth;
		case my_state_getw:
			goto l_getw;
		case my_state_read:
			goto l_read;
20023fa0:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_getw;
				goto finished;
			}
		l_read:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_start()) {
20023fa4:	b0000000 	imm	0
20023fa8:	e8740494 	lwi	r3, r20, 1172
20023fac:	e8830000 	lwi	r4, r3, 0
20023fb0:	b0000000 	imm	0
20023fb4:	e8740490 	lwi	r3, r20, 1168
20023fb8:	e8630000 	lwi	r3, r3, 0
20023fbc:	88641800 	xor	r3, r4, r3
20023fc0:	bc030058 	beqi	r3, 88		// 20024018
20023fc4:	b0000000 	imm	0
20023fc8:	e89404e4 	lwi	r4, r20, 1252
20023fcc:	99fc2000 	brald	r15, r4
20023fd0:	80000000 	or	r0, r0, r0
20023fd4:	bc030044 	beqi	r3, 68		// 20024018
				int stop = 0;
20023fd8:	f8130034 	swi	r0, r19, 52
				if (stop != 0) {
20023fdc:	e8730034 	lwi	r3, r19, 52
20023fe0:	bc030018 	beqi	r3, 24		// 20023ff8
					_FSM_state = my_state_read;
20023fe4:	b0000000 	imm	0
20023fe8:	e87404c8 	lwi	r3, r20, 1224
20023fec:	30800002 	addik	r4, r0, 2
20023ff0:	f8830000 	swi	r4, r3, 0
					goto finished;
20023ff4:	b800036c 	bri	876		// 20024360
				}
				start();
20023ff8:	b0000000 	imm	0
20023ffc:	e87404e8 	lwi	r3, r20, 1256
20024000:	99fc1800 	brald	r15, r3
20024004:	80000000 	or	r0, r0, r0
				i++;
20024008:	e873001c 	lwi	r3, r19, 28
2002400c:	30630001 	addik	r3, r3, 1
20024010:	f873001c 	swi	r3, r19, 28
				goto l_getw;
20024014:	b800ff04 	bri	-252		// 20023f18
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_read_noPredict()) {
20024018:	b0000000 	imm	0
2002401c:	e8740494 	lwi	r3, r20, 1172
20024020:	e8830000 	lwi	r4, r3, 0
20024024:	b0000000 	imm	0
20024028:	e8740490 	lwi	r3, r20, 1168
2002402c:	e8630000 	lwi	r3, r3, 0
20024030:	88641800 	xor	r3, r4, r3
20024034:	bc030058 	beqi	r3, 88		// 2002408c
20024038:	b0000000 	imm	0
2002403c:	e89404fc 	lwi	r4, r20, 1276
20024040:	99fc2000 	brald	r15, r4
20024044:	80000000 	or	r0, r0, r0
20024048:	bc030044 	beqi	r3, 68		// 2002408c
				int stop = 0;
2002404c:	f8130038 	swi	r0, r19, 56
				if (stop != 0) {
20024050:	e8730038 	lwi	r3, r19, 56
20024054:	bc030018 	beqi	r3, 24		// 2002406c
					_FSM_state = my_state_read;
20024058:	b0000000 	imm	0
2002405c:	e87404c8 	lwi	r3, r20, 1224
20024060:	30800002 	addik	r4, r0, 2
20024064:	f8830000 	swi	r4, r3, 0
					goto finished;
20024068:	b80002f8 	bri	760		// 20024360
				}
				read_noPredict();
2002406c:	b0000000 	imm	0
20024070:	e8740500 	lwi	r3, r20, 1280
20024074:	99fc1800 	brald	r15, r3
20024078:	80000000 	or	r0, r0, r0
				i++;
2002407c:	e873001c 	lwi	r3, r19, 28
20024080:	30630001 	addik	r3, r3, 1
20024084:	f873001c 	swi	r3, r19, 28
				goto l_read;
20024088:	b800ff1c 	bri	-228		// 20023fa4
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_read_predict_y0()) {
2002408c:	b0000000 	imm	0
20024090:	e8740494 	lwi	r3, r20, 1172
20024094:	e8830000 	lwi	r4, r3, 0
20024098:	b0000000 	imm	0
2002409c:	e8740490 	lwi	r3, r20, 1168
200240a0:	e8630000 	lwi	r3, r3, 0
200240a4:	88641800 	xor	r3, r4, r3
200240a8:	bc030094 	beqi	r3, 148		// 2002413c
200240ac:	b0000000 	imm	0
200240b0:	e8940504 	lwi	r4, r20, 1284
200240b4:	99fc2000 	brald	r15, r4
200240b8:	80000000 	or	r0, r0, r0
200240bc:	bc030080 	beqi	r3, 128		// 2002413c
				int stop = 0;
200240c0:	f8130020 	swi	r0, r19, 32
				if (3 > SIZE_A - index_A + decoder_parser_mvseq_A->read_inds[0]) {
200240c4:	b0000000 	imm	0
200240c8:	e874048c 	lwi	r3, r20, 1164
200240cc:	e8630000 	lwi	r3, r3, 0
200240d0:	e863000c 	lwi	r3, r3, 12
200240d4:	e8830000 	lwi	r4, r3, 0
200240d8:	b0000000 	imm	0
200240dc:	e8740498 	lwi	r3, r20, 1176
200240e0:	e8630000 	lwi	r3, r3, 0
200240e4:	14632000 	rsubk	r3, r3, r4
200240e8:	30830200 	addik	r4, r3, 512
200240ec:	30600002 	addik	r3, r0, 2
200240f0:	16441803 	cmpu	r18, r4, r3
200240f4:	bc52000c 	blti	r18, 12		// 20024100
					stop = 1;
200240f8:	30600001 	addik	r3, r0, 1
200240fc:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
20024100:	e8730020 	lwi	r3, r19, 32
20024104:	bc030018 	beqi	r3, 24		// 2002411c
					_FSM_state = my_state_read;
20024108:	b0000000 	imm	0
2002410c:	e87404c8 	lwi	r3, r20, 1224
20024110:	30800002 	addik	r4, r0, 2
20024114:	f8830000 	swi	r4, r3, 0
					goto finished;
20024118:	b8000248 	bri	584		// 20024360
				}
				read_predict_y0();
2002411c:	b0000000 	imm	0
20024120:	e8740508 	lwi	r3, r20, 1288
20024124:	99fc1800 	brald	r15, r3
20024128:	80000000 	or	r0, r0, r0
				i++;
2002412c:	e873001c 	lwi	r3, r19, 28
20024130:	30630001 	addik	r3, r3, 1
20024134:	f873001c 	swi	r3, r19, 28
				goto l_read;
20024138:	b800fe6c 	bri	-404		// 20023fa4
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_read_predict_y1()) {
2002413c:	b0000000 	imm	0
20024140:	e8740494 	lwi	r3, r20, 1172
20024144:	e8830000 	lwi	r4, r3, 0
20024148:	b0000000 	imm	0
2002414c:	e8740490 	lwi	r3, r20, 1168
20024150:	e8630000 	lwi	r3, r3, 0
20024154:	88641800 	xor	r3, r4, r3
20024158:	bc030094 	beqi	r3, 148		// 200241ec
2002415c:	b0000000 	imm	0
20024160:	e894050c 	lwi	r4, r20, 1292
20024164:	99fc2000 	brald	r15, r4
20024168:	80000000 	or	r0, r0, r0
2002416c:	bc030080 	beqi	r3, 128		// 200241ec
				int stop = 0;
20024170:	f8130024 	swi	r0, r19, 36
				if (3 > SIZE_A - index_A + decoder_parser_mvseq_A->read_inds[0]) {
20024174:	b0000000 	imm	0
20024178:	e874048c 	lwi	r3, r20, 1164
2002417c:	e8630000 	lwi	r3, r3, 0
20024180:	e863000c 	lwi	r3, r3, 12
20024184:	e8830000 	lwi	r4, r3, 0
20024188:	b0000000 	imm	0
2002418c:	e8740498 	lwi	r3, r20, 1176
20024190:	e8630000 	lwi	r3, r3, 0
20024194:	14632000 	rsubk	r3, r3, r4
20024198:	30830200 	addik	r4, r3, 512
2002419c:	30600002 	addik	r3, r0, 2
200241a0:	16441803 	cmpu	r18, r4, r3
200241a4:	bc52000c 	blti	r18, 12		// 200241b0
					stop = 1;
200241a8:	30600001 	addik	r3, r0, 1
200241ac:	f8730024 	swi	r3, r19, 36
				}
				if (stop != 0) {
200241b0:	e8730024 	lwi	r3, r19, 36
200241b4:	bc030018 	beqi	r3, 24		// 200241cc
					_FSM_state = my_state_read;
200241b8:	b0000000 	imm	0
200241bc:	e87404c8 	lwi	r3, r20, 1224
200241c0:	30800002 	addik	r4, r0, 2
200241c4:	f8830000 	swi	r4, r3, 0
					goto finished;
200241c8:	b8000198 	bri	408		// 20024360
				}
				read_predict_y1();
200241cc:	b0000000 	imm	0
200241d0:	e8740510 	lwi	r3, r20, 1296
200241d4:	99fc1800 	brald	r15, r3
200241d8:	80000000 	or	r0, r0, r0
				i++;
200241dc:	e873001c 	lwi	r3, r19, 28
200241e0:	30630001 	addik	r3, r3, 1
200241e4:	f873001c 	swi	r3, r19, 28
				goto l_read;
200241e8:	b800fdbc 	bri	-580		// 20023fa4
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_read_predict_y2()) {
200241ec:	b0000000 	imm	0
200241f0:	e8740494 	lwi	r3, r20, 1172
200241f4:	e8830000 	lwi	r4, r3, 0
200241f8:	b0000000 	imm	0
200241fc:	e8740490 	lwi	r3, r20, 1168
20024200:	e8630000 	lwi	r3, r3, 0
20024204:	88641800 	xor	r3, r4, r3
20024208:	bc030094 	beqi	r3, 148		// 2002429c
2002420c:	b0000000 	imm	0
20024210:	e8940514 	lwi	r4, r20, 1300
20024214:	99fc2000 	brald	r15, r4
20024218:	80000000 	or	r0, r0, r0
2002421c:	bc030080 	beqi	r3, 128		// 2002429c
				int stop = 0;
20024220:	f8130028 	swi	r0, r19, 40
				if (3 > SIZE_A - index_A + decoder_parser_mvseq_A->read_inds[0]) {
20024224:	b0000000 	imm	0
20024228:	e874048c 	lwi	r3, r20, 1164
2002422c:	e8630000 	lwi	r3, r3, 0
20024230:	e863000c 	lwi	r3, r3, 12
20024234:	e8830000 	lwi	r4, r3, 0
20024238:	b0000000 	imm	0
2002423c:	e8740498 	lwi	r3, r20, 1176
20024240:	e8630000 	lwi	r3, r3, 0
20024244:	14632000 	rsubk	r3, r3, r4
20024248:	30830200 	addik	r4, r3, 512
2002424c:	30600002 	addik	r3, r0, 2
20024250:	16441803 	cmpu	r18, r4, r3
20024254:	bc52000c 	blti	r18, 12		// 20024260
					stop = 1;
20024258:	30600001 	addik	r3, r0, 1
2002425c:	f8730028 	swi	r3, r19, 40
				}
				if (stop != 0) {
20024260:	e8730028 	lwi	r3, r19, 40
20024264:	bc030018 	beqi	r3, 24		// 2002427c
					_FSM_state = my_state_read;
20024268:	b0000000 	imm	0
2002426c:	e87404c8 	lwi	r3, r20, 1224
20024270:	30800002 	addik	r4, r0, 2
20024274:	f8830000 	swi	r4, r3, 0
					goto finished;
20024278:	b80000e8 	bri	232		// 20024360
				}
				read_predict_y2();
2002427c:	b0000000 	imm	0
20024280:	e8740518 	lwi	r3, r20, 1304
20024284:	99fc1800 	brald	r15, r3
20024288:	80000000 	or	r0, r0, r0
				i++;
2002428c:	e873001c 	lwi	r3, r19, 28
20024290:	30630001 	addik	r3, r3, 1
20024294:	f873001c 	swi	r3, r19, 28
				goto l_read;
20024298:	b800fd0c 	bri	-756		// 20023fa4
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_read_predict_y3()) {
2002429c:	b0000000 	imm	0
200242a0:	e8740494 	lwi	r3, r20, 1172
200242a4:	e8830000 	lwi	r4, r3, 0
200242a8:	b0000000 	imm	0
200242ac:	e8740490 	lwi	r3, r20, 1168
200242b0:	e8630000 	lwi	r3, r3, 0
200242b4:	88641800 	xor	r3, r4, r3
200242b8:	bc030094 	beqi	r3, 148		// 2002434c
200242bc:	b0000000 	imm	0
200242c0:	e894051c 	lwi	r4, r20, 1308
200242c4:	99fc2000 	brald	r15, r4
200242c8:	80000000 	or	r0, r0, r0
200242cc:	bc030080 	beqi	r3, 128		// 2002434c
				int stop = 0;
200242d0:	f813002c 	swi	r0, r19, 44
				if (3 > SIZE_A - index_A + decoder_parser_mvseq_A->read_inds[0]) {
200242d4:	b0000000 	imm	0
200242d8:	e874048c 	lwi	r3, r20, 1164
200242dc:	e8630000 	lwi	r3, r3, 0
200242e0:	e863000c 	lwi	r3, r3, 12
200242e4:	e8830000 	lwi	r4, r3, 0
200242e8:	b0000000 	imm	0
200242ec:	e8740498 	lwi	r3, r20, 1176
200242f0:	e8630000 	lwi	r3, r3, 0
200242f4:	14632000 	rsubk	r3, r3, r4
200242f8:	30830200 	addik	r4, r3, 512
200242fc:	30600002 	addik	r3, r0, 2
20024300:	16441803 	cmpu	r18, r4, r3
20024304:	bc52000c 	blti	r18, 12		// 20024310
					stop = 1;
20024308:	30600001 	addik	r3, r0, 1
2002430c:	f873002c 	swi	r3, r19, 44
				}
				if (stop != 0) {
20024310:	e873002c 	lwi	r3, r19, 44
20024314:	bc030018 	beqi	r3, 24		// 2002432c
					_FSM_state = my_state_read;
20024318:	b0000000 	imm	0
2002431c:	e87404c8 	lwi	r3, r20, 1224
20024320:	30800002 	addik	r4, r0, 2
20024324:	f8830000 	swi	r4, r3, 0
					goto finished;
20024328:	b8000038 	bri	56		// 20024360
				}
				read_predict_y3();
2002432c:	b0000000 	imm	0
20024330:	e8740520 	lwi	r3, r20, 1312
20024334:	99fc1800 	brald	r15, r3
20024338:	80000000 	or	r0, r0, r0
				i++;
2002433c:	e873001c 	lwi	r3, r19, 28
20024340:	30630001 	addik	r3, r3, 1
20024344:	f873001c 	swi	r3, r19, 28
				goto l_read;
20024348:	b800fc5c 	bri	-932		// 20023fa4
			} else {
				_FSM_state = my_state_read;
2002434c:	b0000000 	imm	0
20024350:	e87404c8 	lwi	r3, r20, 1224
20024354:	30800002 	addik	r4, r0, 2
20024358:	f8830000 	swi	r4, r3, 0
				goto finished;
2002435c:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_BTYPE();
20024360:	b0000000 	imm	0
20024364:	e89404d0 	lwi	r4, r20, 1232
20024368:	99fc2000 	brald	r15, r4
2002436c:	80000000 	or	r0, r0, r0
		
		write_end_A();
20024370:	b0000000 	imm	0
20024374:	e87404d8 	lwi	r3, r20, 1240
20024378:	99fc1800 	brald	r15, r3
2002437c:	80000000 	or	r0, r0, r0
		
		
		return i;
20024380:	e873001c 	lwi	r3, r19, 28
	}
20024384:	e9e10000 	lwi	r15, r1, 0
20024388:	10330000 	addk	r1, r19, r0
2002438c:	ea610040 	lwi	r19, r1, 64
20024390:	ea810044 	lwi	r20, r1, 68
20024394:	30210048 	addik	r1, r1, 72
20024398:	b60f0008 	rtsd	r15, 8
2002439c:	80000000 	or	r0, r0, r0

200243a0 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200243a0:	3021fff4 	addik	r1, r1, -12
200243a4:	fa610004 	swi	r19, r1, 4
200243a8:	fa810008 	swi	r20, r1, 8
200243ac:	12610000 	addk	r19, r1, r0
200243b0:	96808000 	mfs	r20, rpc
200243b4:	b000dffd 	imm	-8195
200243b8:	3294d5ac 	addik	r20, r20, -10836
200243bc:	f8b30010 	swi	r5, r19, 16
200243c0:	f8d30014 	swi	r6, r19, 20
200243c4:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200243c8:	e8730010 	lwi	r3, r19, 16
200243cc:	e8630010 	lwi	r3, r3, 16
200243d0:	e8830000 	lwi	r4, r3, 0
200243d4:	e8730010 	lwi	r3, r19, 16
200243d8:	e8a3000c 	lwi	r5, r3, 12
200243dc:	e8730014 	lwi	r3, r19, 20
200243e0:	64630402 	bslli	r3, r3, 2
200243e4:	10651800 	addk	r3, r5, r3
200243e8:	e8630000 	lwi	r3, r3, 0
200243ec:	14a32000 	rsubk	r5, r3, r4
200243f0:	30600001 	addik	r3, r0, 1
200243f4:	e8930018 	lwi	r4, r19, 24
200243f8:	16442803 	cmpu	r18, r4, r5
200243fc:	bcb20008 	bgei	r18, 8		// 20024404
20024400:	10600000 	addk	r3, r0, r0
20024404:	a46300ff 	andi	r3, r3, 255
}
20024408:	10330000 	addk	r1, r19, r0
2002440c:	ea610004 	lwi	r19, r1, 4
20024410:	ea810008 	lwi	r20, r1, 8
20024414:	3021000c 	addik	r1, r1, 12
20024418:	b60f0008 	rtsd	r15, 8
2002441c:	80000000 	or	r0, r0, r0

20024420 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20024420:	3021fff4 	addik	r1, r1, -12
20024424:	fa610004 	swi	r19, r1, 4
20024428:	fa810008 	swi	r20, r1, 8
2002442c:	12610000 	addk	r19, r1, r0
20024430:	96808000 	mfs	r20, rpc
20024434:	b000dffd 	imm	-8195
20024438:	3294d52c 	addik	r20, r20, -10964
2002443c:	f8b30010 	swi	r5, r19, 16
20024440:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20024444:	e8730010 	lwi	r3, r19, 16
20024448:	e8630010 	lwi	r3, r3, 16
2002444c:	e8830000 	lwi	r4, r3, 0
20024450:	e8730010 	lwi	r3, r19, 16
20024454:	e8a3000c 	lwi	r5, r3, 12
20024458:	e8730014 	lwi	r3, r19, 20
2002445c:	64630402 	bslli	r3, r3, 2
20024460:	10651800 	addk	r3, r5, r3
20024464:	e8630000 	lwi	r3, r3, 0
20024468:	14632000 	rsubk	r3, r3, r4
}
2002446c:	10330000 	addk	r1, r19, r0
20024470:	ea610004 	lwi	r19, r1, 4
20024474:	ea810008 	lwi	r20, r1, 8
20024478:	3021000c 	addik	r1, r1, 12
2002447c:	b60f0008 	rtsd	r15, 8
20024480:	80000000 	or	r0, r0, r0

20024484 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20024484:	3021fff0 	addik	r1, r1, -16
20024488:	fa610008 	swi	r19, r1, 8
2002448c:	fa81000c 	swi	r20, r1, 12
20024490:	12610000 	addk	r19, r1, r0
20024494:	96808000 	mfs	r20, rpc
20024498:	b000dffd 	imm	-8195
2002449c:	3294d4c8 	addik	r20, r20, -11064
200244a0:	f8b30014 	swi	r5, r19, 20
200244a4:	f8d30018 	swi	r6, r19, 24
200244a8:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200244ac:	f8130004 	swi	r0, r19, 4
200244b0:	b800005c 	bri	92		// 2002450c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200244b4:	e8730014 	lwi	r3, r19, 20
200244b8:	e8830000 	lwi	r4, r3, 0
200244bc:	e8730014 	lwi	r3, r19, 20
200244c0:	e8a3000c 	lwi	r5, r3, 12
200244c4:	e8730004 	lwi	r3, r19, 4
200244c8:	64630402 	bslli	r3, r3, 2
200244cc:	10651800 	addk	r3, r5, r3
200244d0:	e8a30000 	lwi	r5, r3, 0
200244d4:	e8730014 	lwi	r3, r19, 20
200244d8:	e8630010 	lwi	r3, r3, 16
200244dc:	e8630000 	lwi	r3, r3, 0
200244e0:	14632800 	rsubk	r3, r3, r5
200244e4:	10641800 	addk	r3, r4, r3
200244e8:	30830001 	addik	r4, r3, 1
200244ec:	e873001c 	lwi	r3, r19, 28
200244f0:	16441803 	cmpu	r18, r4, r3
200244f4:	bc52000c 	blti	r18, 12		// 20024500
            return 0;
200244f8:	10600000 	addk	r3, r0, r0
200244fc:	b8000024 	bri	36		// 20024520
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20024500:	e8730004 	lwi	r3, r19, 4
20024504:	30630001 	addik	r3, r3, 1
20024508:	f8730004 	swi	r3, r19, 4
2002450c:	e8930004 	lwi	r4, r19, 4
20024510:	e8730018 	lwi	r3, r19, 24
20024514:	16432003 	cmpu	r18, r3, r4
20024518:	bc52ff9c 	blti	r18, -100		// 200244b4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002451c:	30600001 	addik	r3, r0, 1
}
20024520:	10330000 	addk	r1, r19, r0
20024524:	ea610008 	lwi	r19, r1, 8
20024528:	ea81000c 	lwi	r20, r1, 12
2002452c:	30210010 	addik	r1, r1, 16
20024530:	b60f0008 	rtsd	r15, 8
20024534:	80000000 	or	r0, r0, r0

20024538 <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20024538:	3021ffe8 	addik	r1, r1, -24
2002453c:	fa610010 	swi	r19, r1, 16
20024540:	fa810014 	swi	r20, r1, 20
20024544:	12610000 	addk	r19, r1, r0
20024548:	96808000 	mfs	r20, rpc
2002454c:	b000dffd 	imm	-8195
20024550:	3294d414 	addik	r20, r20, -11244
20024554:	f8b3001c 	swi	r5, r19, 28
20024558:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002455c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20024560:	f8130004 	swi	r0, r19, 4
20024564:	b8000054 	bri	84		// 200245b8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20024568:	e873001c 	lwi	r3, r19, 28
2002456c:	e8630010 	lwi	r3, r3, 16
20024570:	e8830000 	lwi	r4, r3, 0
20024574:	e873001c 	lwi	r3, r19, 28
20024578:	e8a3000c 	lwi	r5, r3, 12
2002457c:	e8730004 	lwi	r3, r19, 4
20024580:	64630402 	bslli	r3, r3, 2
20024584:	10651800 	addk	r3, r5, r3
20024588:	e8630000 	lwi	r3, r3, 0
2002458c:	14632000 	rsubk	r3, r3, r4
20024590:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20024594:	e8930008 	lwi	r4, r19, 8
20024598:	e873000c 	lwi	r3, r19, 12
2002459c:	16441803 	cmpu	r18, r4, r3
200245a0:	bcb20008 	bgei	r18, 8		// 200245a8
200245a4:	10640000 	addk	r3, r4, r0
200245a8:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200245ac:	e8730004 	lwi	r3, r19, 4
200245b0:	30630001 	addik	r3, r3, 1
200245b4:	f8730004 	swi	r3, r19, 4
200245b8:	e8930004 	lwi	r4, r19, 4
200245bc:	e8730020 	lwi	r3, r19, 32
200245c0:	16432003 	cmpu	r18, r3, r4
200245c4:	bc52ffa4 	blti	r18, -92		// 20024568
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200245c8:	e873001c 	lwi	r3, r19, 28
200245cc:	e8830000 	lwi	r4, r3, 0
200245d0:	e8730008 	lwi	r3, r19, 8
200245d4:	14632000 	rsubk	r3, r3, r4
}
200245d8:	10330000 	addk	r1, r19, r0
200245dc:	ea610010 	lwi	r19, r1, 16
200245e0:	ea810014 	lwi	r20, r1, 20
200245e4:	30210018 	addik	r1, r1, 24
200245e8:	b60f0008 	rtsd	r15, 8
200245ec:	80000000 	or	r0, r0, r0

200245f0 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200245f0:	3021fff0 	addik	r1, r1, -16
200245f4:	fa610008 	swi	r19, r1, 8
200245f8:	fa81000c 	swi	r20, r1, 12
200245fc:	12610000 	addk	r19, r1, r0
20024600:	96808000 	mfs	r20, rpc
20024604:	b000dffd 	imm	-8195
20024608:	3294d35c 	addik	r20, r20, -11428
2002460c:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20024610:	e8730014 	lwi	r3, r19, 20
20024614:	e8630010 	lwi	r3, r3, 16
20024618:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002461c:	f8130004 	swi	r0, r19, 4
20024620:	b8000028 	bri	40		// 20024648
        fifo->read_inds[i] = 0;
20024624:	e8730014 	lwi	r3, r19, 20
20024628:	e883000c 	lwi	r4, r3, 12
2002462c:	e8730004 	lwi	r3, r19, 4
20024630:	64630402 	bslli	r3, r3, 2
20024634:	10641800 	addk	r3, r4, r3
20024638:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002463c:	e8730004 	lwi	r3, r19, 4
20024640:	30630001 	addik	r3, r3, 1
20024644:	f8730004 	swi	r3, r19, 4
20024648:	e8730014 	lwi	r3, r19, 20
2002464c:	e8830008 	lwi	r4, r3, 8
20024650:	e8730004 	lwi	r3, r19, 4
20024654:	16441803 	cmpu	r18, r4, r3
20024658:	bc52ffcc 	blti	r18, -52		// 20024624
        fifo->read_inds[i] = 0;
    }
}
2002465c:	10330000 	addk	r1, r19, r0
20024660:	ea610008 	lwi	r19, r1, 8
20024664:	ea81000c 	lwi	r20, r1, 12
20024668:	30210010 	addik	r1, r1, 16
2002466c:	b60f0008 	rtsd	r15, 8
20024670:	80000000 	or	r0, r0, r0

20024674 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20024674:	3021fff0 	addik	r1, r1, -16
20024678:	fa610008 	swi	r19, r1, 8
2002467c:	fa81000c 	swi	r20, r1, 12
20024680:	12610000 	addk	r19, r1, r0
20024684:	96808000 	mfs	r20, rpc
20024688:	b000dffd 	imm	-8195
2002468c:	3294d2d8 	addik	r20, r20, -11560
20024690:	f8b30014 	swi	r5, r19, 20
20024694:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20024698:	e8730014 	lwi	r3, r19, 20
2002469c:	e8830004 	lwi	r4, r3, 4
200246a0:	e8730014 	lwi	r3, r19, 20
200246a4:	e8a3000c 	lwi	r5, r3, 12
200246a8:	e8730018 	lwi	r3, r19, 24
200246ac:	64630402 	bslli	r3, r3, 2
200246b0:	10651800 	addk	r3, r5, r3
200246b4:	e8a30000 	lwi	r5, r3, 0
200246b8:	e8730014 	lwi	r3, r19, 20
200246bc:	e8630000 	lwi	r3, r3, 0
200246c0:	3063ffff 	addik	r3, r3, -1
200246c4:	84651800 	and	r3, r5, r3
200246c8:	10641800 	addk	r3, r4, r3
200246cc:	e0630000 	lbui	r3, r3, 0
200246d0:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200246d4:	e8730014 	lwi	r3, r19, 20
200246d8:	e883000c 	lwi	r4, r3, 12
200246dc:	e8730018 	lwi	r3, r19, 24
200246e0:	64630402 	bslli	r3, r3, 2
200246e4:	10641800 	addk	r3, r4, r3
200246e8:	e8830000 	lwi	r4, r3, 0
200246ec:	30840001 	addik	r4, r4, 1
200246f0:	f8830000 	swi	r4, r3, 0
    return value;
200246f4:	e0730004 	lbui	r3, r19, 4
200246f8:	90630060 	sext8	r3, r3
}
200246fc:	10330000 	addk	r1, r19, r0
20024700:	ea610008 	lwi	r19, r1, 8
20024704:	ea81000c 	lwi	r20, r1, 12
20024708:	30210010 	addik	r1, r1, 16
2002470c:	b60f0008 	rtsd	r15, 8
20024710:	80000000 	or	r0, r0, r0

20024714 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20024714:	3021fff4 	addik	r1, r1, -12
20024718:	fa610004 	swi	r19, r1, 4
2002471c:	fa810008 	swi	r20, r1, 8
20024720:	12610000 	addk	r19, r1, r0
20024724:	96808000 	mfs	r20, rpc
20024728:	b000dffd 	imm	-8195
2002472c:	3294d238 	addik	r20, r20, -11720
20024730:	f8b30010 	swi	r5, r19, 16
20024734:	10660000 	addk	r3, r6, r0
20024738:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002473c:	e8730010 	lwi	r3, r19, 16
20024740:	e8830004 	lwi	r4, r3, 4
20024744:	e8730010 	lwi	r3, r19, 16
20024748:	e8630010 	lwi	r3, r3, 16
2002474c:	e8a30000 	lwi	r5, r3, 0
20024750:	e8730010 	lwi	r3, r19, 16
20024754:	e8630000 	lwi	r3, r3, 0
20024758:	3063ffff 	addik	r3, r3, -1
2002475c:	84651800 	and	r3, r5, r3
20024760:	10641800 	addk	r3, r4, r3
20024764:	e0930014 	lbui	r4, r19, 20
20024768:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2002476c:	e8730010 	lwi	r3, r19, 16
20024770:	e8630010 	lwi	r3, r3, 16
20024774:	e8830000 	lwi	r4, r3, 0
20024778:	30840001 	addik	r4, r4, 1
2002477c:	f8830000 	swi	r4, r3, 0
}
20024780:	10330000 	addk	r1, r19, r0
20024784:	ea610004 	lwi	r19, r1, 4
20024788:	ea810008 	lwi	r20, r1, 8
2002478c:	3021000c 	addik	r1, r1, 12
20024790:	b60f0008 	rtsd	r15, 8
20024794:	80000000 	or	r0, r0, r0

20024798 <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20024798:	3021fff4 	addik	r1, r1, -12
2002479c:	fa610004 	swi	r19, r1, 4
200247a0:	fa810008 	swi	r20, r1, 8
200247a4:	12610000 	addk	r19, r1, r0
200247a8:	96808000 	mfs	r20, rpc
200247ac:	b000dffd 	imm	-8195
200247b0:	3294d1b4 	addik	r20, r20, -11852
200247b4:	f8b30010 	swi	r5, r19, 16
200247b8:	f8d30014 	swi	r6, r19, 20
200247bc:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200247c0:	e8730010 	lwi	r3, r19, 16
200247c4:	e8630010 	lwi	r3, r3, 16
200247c8:	e8830000 	lwi	r4, r3, 0
200247cc:	e8730010 	lwi	r3, r19, 16
200247d0:	e8a3000c 	lwi	r5, r3, 12
200247d4:	e8730014 	lwi	r3, r19, 20
200247d8:	64630402 	bslli	r3, r3, 2
200247dc:	10651800 	addk	r3, r5, r3
200247e0:	e8630000 	lwi	r3, r3, 0
200247e4:	14a32000 	rsubk	r5, r3, r4
200247e8:	30600001 	addik	r3, r0, 1
200247ec:	e8930018 	lwi	r4, r19, 24
200247f0:	16442803 	cmpu	r18, r4, r5
200247f4:	bcb20008 	bgei	r18, 8		// 200247fc
200247f8:	10600000 	addk	r3, r0, r0
200247fc:	a46300ff 	andi	r3, r3, 255
}
20024800:	10330000 	addk	r1, r19, r0
20024804:	ea610004 	lwi	r19, r1, 4
20024808:	ea810008 	lwi	r20, r1, 8
2002480c:	3021000c 	addik	r1, r1, 12
20024810:	b60f0008 	rtsd	r15, 8
20024814:	80000000 	or	r0, r0, r0

20024818 <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20024818:	3021fff4 	addik	r1, r1, -12
2002481c:	fa610004 	swi	r19, r1, 4
20024820:	fa810008 	swi	r20, r1, 8
20024824:	12610000 	addk	r19, r1, r0
20024828:	96808000 	mfs	r20, rpc
2002482c:	b000dffd 	imm	-8195
20024830:	3294d134 	addik	r20, r20, -11980
20024834:	f8b30010 	swi	r5, r19, 16
20024838:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002483c:	e8730010 	lwi	r3, r19, 16
20024840:	e8630010 	lwi	r3, r3, 16
20024844:	e8830000 	lwi	r4, r3, 0
20024848:	e8730010 	lwi	r3, r19, 16
2002484c:	e8a3000c 	lwi	r5, r3, 12
20024850:	e8730014 	lwi	r3, r19, 20
20024854:	64630402 	bslli	r3, r3, 2
20024858:	10651800 	addk	r3, r5, r3
2002485c:	e8630000 	lwi	r3, r3, 0
20024860:	14632000 	rsubk	r3, r3, r4
}
20024864:	10330000 	addk	r1, r19, r0
20024868:	ea610004 	lwi	r19, r1, 4
2002486c:	ea810008 	lwi	r20, r1, 8
20024870:	3021000c 	addik	r1, r1, 12
20024874:	b60f0008 	rtsd	r15, 8
20024878:	80000000 	or	r0, r0, r0

2002487c <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002487c:	3021fff0 	addik	r1, r1, -16
20024880:	fa610008 	swi	r19, r1, 8
20024884:	fa81000c 	swi	r20, r1, 12
20024888:	12610000 	addk	r19, r1, r0
2002488c:	96808000 	mfs	r20, rpc
20024890:	b000dffd 	imm	-8195
20024894:	3294d0d0 	addik	r20, r20, -12080
20024898:	f8b30014 	swi	r5, r19, 20
2002489c:	f8d30018 	swi	r6, r19, 24
200248a0:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200248a4:	f8130004 	swi	r0, r19, 4
200248a8:	b800005c 	bri	92		// 20024904
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200248ac:	e8730014 	lwi	r3, r19, 20
200248b0:	e8830000 	lwi	r4, r3, 0
200248b4:	e8730014 	lwi	r3, r19, 20
200248b8:	e8a3000c 	lwi	r5, r3, 12
200248bc:	e8730004 	lwi	r3, r19, 4
200248c0:	64630402 	bslli	r3, r3, 2
200248c4:	10651800 	addk	r3, r5, r3
200248c8:	e8a30000 	lwi	r5, r3, 0
200248cc:	e8730014 	lwi	r3, r19, 20
200248d0:	e8630010 	lwi	r3, r3, 16
200248d4:	e8630000 	lwi	r3, r3, 0
200248d8:	14632800 	rsubk	r3, r3, r5
200248dc:	10641800 	addk	r3, r4, r3
200248e0:	30830001 	addik	r4, r3, 1
200248e4:	e873001c 	lwi	r3, r19, 28
200248e8:	16441803 	cmpu	r18, r4, r3
200248ec:	bc52000c 	blti	r18, 12		// 200248f8
            return 0;
200248f0:	10600000 	addk	r3, r0, r0
200248f4:	b8000024 	bri	36		// 20024918
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200248f8:	e8730004 	lwi	r3, r19, 4
200248fc:	30630001 	addik	r3, r3, 1
20024900:	f8730004 	swi	r3, r19, 4
20024904:	e8930004 	lwi	r4, r19, 4
20024908:	e8730018 	lwi	r3, r19, 24
2002490c:	16432003 	cmpu	r18, r3, r4
20024910:	bc52ff9c 	blti	r18, -100		// 200248ac
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20024914:	30600001 	addik	r3, r0, 1
}
20024918:	10330000 	addk	r1, r19, r0
2002491c:	ea610008 	lwi	r19, r1, 8
20024920:	ea81000c 	lwi	r20, r1, 12
20024924:	30210010 	addik	r1, r1, 16
20024928:	b60f0008 	rtsd	r15, 8
2002492c:	80000000 	or	r0, r0, r0

20024930 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20024930:	3021ffe8 	addik	r1, r1, -24
20024934:	fa610010 	swi	r19, r1, 16
20024938:	fa810014 	swi	r20, r1, 20
2002493c:	12610000 	addk	r19, r1, r0
20024940:	96808000 	mfs	r20, rpc
20024944:	b000dffd 	imm	-8195
20024948:	3294d01c 	addik	r20, r20, -12260
2002494c:	f8b3001c 	swi	r5, r19, 28
20024950:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20024954:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20024958:	f8130004 	swi	r0, r19, 4
2002495c:	b8000054 	bri	84		// 200249b0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20024960:	e873001c 	lwi	r3, r19, 28
20024964:	e8630010 	lwi	r3, r3, 16
20024968:	e8830000 	lwi	r4, r3, 0
2002496c:	e873001c 	lwi	r3, r19, 28
20024970:	e8a3000c 	lwi	r5, r3, 12
20024974:	e8730004 	lwi	r3, r19, 4
20024978:	64630402 	bslli	r3, r3, 2
2002497c:	10651800 	addk	r3, r5, r3
20024980:	e8630000 	lwi	r3, r3, 0
20024984:	14632000 	rsubk	r3, r3, r4
20024988:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002498c:	e8930008 	lwi	r4, r19, 8
20024990:	e873000c 	lwi	r3, r19, 12
20024994:	16441803 	cmpu	r18, r4, r3
20024998:	bcb20008 	bgei	r18, 8		// 200249a0
2002499c:	10640000 	addk	r3, r4, r0
200249a0:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200249a4:	e8730004 	lwi	r3, r19, 4
200249a8:	30630001 	addik	r3, r3, 1
200249ac:	f8730004 	swi	r3, r19, 4
200249b0:	e8930004 	lwi	r4, r19, 4
200249b4:	e8730020 	lwi	r3, r19, 32
200249b8:	16432003 	cmpu	r18, r3, r4
200249bc:	bc52ffa4 	blti	r18, -92		// 20024960
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200249c0:	e873001c 	lwi	r3, r19, 28
200249c4:	e8830000 	lwi	r4, r3, 0
200249c8:	e8730008 	lwi	r3, r19, 8
200249cc:	14632000 	rsubk	r3, r3, r4
}
200249d0:	10330000 	addk	r1, r19, r0
200249d4:	ea610010 	lwi	r19, r1, 16
200249d8:	ea810014 	lwi	r20, r1, 20
200249dc:	30210018 	addik	r1, r1, 24
200249e0:	b60f0008 	rtsd	r15, 8
200249e4:	80000000 	or	r0, r0, r0

200249e8 <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200249e8:	3021fff0 	addik	r1, r1, -16
200249ec:	fa610008 	swi	r19, r1, 8
200249f0:	fa81000c 	swi	r20, r1, 12
200249f4:	12610000 	addk	r19, r1, r0
200249f8:	96808000 	mfs	r20, rpc
200249fc:	b000dffd 	imm	-8195
20024a00:	3294cf64 	addik	r20, r20, -12444
20024a04:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20024a08:	e8730014 	lwi	r3, r19, 20
20024a0c:	e8630010 	lwi	r3, r3, 16
20024a10:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20024a14:	f8130004 	swi	r0, r19, 4
20024a18:	b8000028 	bri	40		// 20024a40
        fifo->read_inds[i] = 0;
20024a1c:	e8730014 	lwi	r3, r19, 20
20024a20:	e883000c 	lwi	r4, r3, 12
20024a24:	e8730004 	lwi	r3, r19, 4
20024a28:	64630402 	bslli	r3, r3, 2
20024a2c:	10641800 	addk	r3, r4, r3
20024a30:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20024a34:	e8730004 	lwi	r3, r19, 4
20024a38:	30630001 	addik	r3, r3, 1
20024a3c:	f8730004 	swi	r3, r19, 4
20024a40:	e8730014 	lwi	r3, r19, 20
20024a44:	e8830008 	lwi	r4, r3, 8
20024a48:	e8730004 	lwi	r3, r19, 4
20024a4c:	16441803 	cmpu	r18, r4, r3
20024a50:	bc52ffcc 	blti	r18, -52		// 20024a1c
        fifo->read_inds[i] = 0;
    }
}
20024a54:	10330000 	addk	r1, r19, r0
20024a58:	ea610008 	lwi	r19, r1, 8
20024a5c:	ea81000c 	lwi	r20, r1, 12
20024a60:	30210010 	addik	r1, r1, 16
20024a64:	b60f0008 	rtsd	r15, 8
20024a68:	80000000 	or	r0, r0, r0

20024a6c <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20024a6c:	3021fff0 	addik	r1, r1, -16
20024a70:	fa610008 	swi	r19, r1, 8
20024a74:	fa81000c 	swi	r20, r1, 12
20024a78:	12610000 	addk	r19, r1, r0
20024a7c:	96808000 	mfs	r20, rpc
20024a80:	b000dffd 	imm	-8195
20024a84:	3294cee0 	addik	r20, r20, -12576
20024a88:	f8b30014 	swi	r5, r19, 20
20024a8c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20024a90:	e8730014 	lwi	r3, r19, 20
20024a94:	e8830004 	lwi	r4, r3, 4
20024a98:	e8730014 	lwi	r3, r19, 20
20024a9c:	e8a3000c 	lwi	r5, r3, 12
20024aa0:	e8730018 	lwi	r3, r19, 24
20024aa4:	64630402 	bslli	r3, r3, 2
20024aa8:	10651800 	addk	r3, r5, r3
20024aac:	e8a30000 	lwi	r5, r3, 0
20024ab0:	e8730014 	lwi	r3, r19, 20
20024ab4:	e8630000 	lwi	r3, r3, 0
20024ab8:	3063ffff 	addik	r3, r3, -1
20024abc:	84651800 	and	r3, r5, r3
20024ac0:	10631800 	addk	r3, r3, r3
20024ac4:	10641800 	addk	r3, r4, r3
20024ac8:	e4630000 	lhui	r3, r3, 0
20024acc:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20024ad0:	e8730014 	lwi	r3, r19, 20
20024ad4:	e883000c 	lwi	r4, r3, 12
20024ad8:	e8730018 	lwi	r3, r19, 24
20024adc:	64630402 	bslli	r3, r3, 2
20024ae0:	10641800 	addk	r3, r4, r3
20024ae4:	e8830000 	lwi	r4, r3, 0
20024ae8:	30840001 	addik	r4, r4, 1
20024aec:	f8830000 	swi	r4, r3, 0
    return value;
20024af0:	e4730004 	lhui	r3, r19, 4
20024af4:	90630061 	sext16	r3, r3
}
20024af8:	10330000 	addk	r1, r19, r0
20024afc:	ea610008 	lwi	r19, r1, 8
20024b00:	ea81000c 	lwi	r20, r1, 12
20024b04:	30210010 	addik	r1, r1, 16
20024b08:	b60f0008 	rtsd	r15, 8
20024b0c:	80000000 	or	r0, r0, r0

20024b10 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20024b10:	3021fff4 	addik	r1, r1, -12
20024b14:	fa610004 	swi	r19, r1, 4
20024b18:	fa810008 	swi	r20, r1, 8
20024b1c:	12610000 	addk	r19, r1, r0
20024b20:	96808000 	mfs	r20, rpc
20024b24:	b000dffd 	imm	-8195
20024b28:	3294ce3c 	addik	r20, r20, -12740
20024b2c:	f8b30010 	swi	r5, r19, 16
20024b30:	10660000 	addk	r3, r6, r0
20024b34:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20024b38:	e8730010 	lwi	r3, r19, 16
20024b3c:	e8830004 	lwi	r4, r3, 4
20024b40:	e8730010 	lwi	r3, r19, 16
20024b44:	e8630010 	lwi	r3, r3, 16
20024b48:	e8a30000 	lwi	r5, r3, 0
20024b4c:	e8730010 	lwi	r3, r19, 16
20024b50:	e8630000 	lwi	r3, r3, 0
20024b54:	3063ffff 	addik	r3, r3, -1
20024b58:	84651800 	and	r3, r5, r3
20024b5c:	10631800 	addk	r3, r3, r3
20024b60:	10641800 	addk	r3, r4, r3
20024b64:	e4930014 	lhui	r4, r19, 20
20024b68:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20024b6c:	e8730010 	lwi	r3, r19, 16
20024b70:	e8630010 	lwi	r3, r3, 16
20024b74:	e8830000 	lwi	r4, r3, 0
20024b78:	30840001 	addik	r4, r4, 1
20024b7c:	f8830000 	swi	r4, r3, 0
}
20024b80:	10330000 	addk	r1, r19, r0
20024b84:	ea610004 	lwi	r19, r1, 4
20024b88:	ea810008 	lwi	r20, r1, 8
20024b8c:	3021000c 	addik	r1, r1, 12
20024b90:	b60f0008 	rtsd	r15, 8
20024b94:	80000000 	or	r0, r0, r0

20024b98 <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20024b98:	3021fff4 	addik	r1, r1, -12
20024b9c:	fa610004 	swi	r19, r1, 4
20024ba0:	fa810008 	swi	r20, r1, 8
20024ba4:	12610000 	addk	r19, r1, r0
20024ba8:	96808000 	mfs	r20, rpc
20024bac:	b000dffd 	imm	-8195
20024bb0:	3294cdb4 	addik	r20, r20, -12876
20024bb4:	f8b30010 	swi	r5, r19, 16
20024bb8:	f8d30014 	swi	r6, r19, 20
20024bbc:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20024bc0:	e8730010 	lwi	r3, r19, 16
20024bc4:	e8630010 	lwi	r3, r3, 16
20024bc8:	e8830000 	lwi	r4, r3, 0
20024bcc:	e8730010 	lwi	r3, r19, 16
20024bd0:	e8a3000c 	lwi	r5, r3, 12
20024bd4:	e8730014 	lwi	r3, r19, 20
20024bd8:	64630402 	bslli	r3, r3, 2
20024bdc:	10651800 	addk	r3, r5, r3
20024be0:	e8630000 	lwi	r3, r3, 0
20024be4:	14a32000 	rsubk	r5, r3, r4
20024be8:	30600001 	addik	r3, r0, 1
20024bec:	e8930018 	lwi	r4, r19, 24
20024bf0:	16442803 	cmpu	r18, r4, r5
20024bf4:	bcb20008 	bgei	r18, 8		// 20024bfc
20024bf8:	10600000 	addk	r3, r0, r0
20024bfc:	a46300ff 	andi	r3, r3, 255
}
20024c00:	10330000 	addk	r1, r19, r0
20024c04:	ea610004 	lwi	r19, r1, 4
20024c08:	ea810008 	lwi	r20, r1, 8
20024c0c:	3021000c 	addik	r1, r1, 12
20024c10:	b60f0008 	rtsd	r15, 8
20024c14:	80000000 	or	r0, r0, r0

20024c18 <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20024c18:	3021fff4 	addik	r1, r1, -12
20024c1c:	fa610004 	swi	r19, r1, 4
20024c20:	fa810008 	swi	r20, r1, 8
20024c24:	12610000 	addk	r19, r1, r0
20024c28:	96808000 	mfs	r20, rpc
20024c2c:	b000dffd 	imm	-8195
20024c30:	3294cd34 	addik	r20, r20, -13004
20024c34:	f8b30010 	swi	r5, r19, 16
20024c38:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20024c3c:	e8730010 	lwi	r3, r19, 16
20024c40:	e8630010 	lwi	r3, r3, 16
20024c44:	e8830000 	lwi	r4, r3, 0
20024c48:	e8730010 	lwi	r3, r19, 16
20024c4c:	e8a3000c 	lwi	r5, r3, 12
20024c50:	e8730014 	lwi	r3, r19, 20
20024c54:	64630402 	bslli	r3, r3, 2
20024c58:	10651800 	addk	r3, r5, r3
20024c5c:	e8630000 	lwi	r3, r3, 0
20024c60:	14632000 	rsubk	r3, r3, r4
}
20024c64:	10330000 	addk	r1, r19, r0
20024c68:	ea610004 	lwi	r19, r1, 4
20024c6c:	ea810008 	lwi	r20, r1, 8
20024c70:	3021000c 	addik	r1, r1, 12
20024c74:	b60f0008 	rtsd	r15, 8
20024c78:	80000000 	or	r0, r0, r0

20024c7c <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20024c7c:	3021fff0 	addik	r1, r1, -16
20024c80:	fa610008 	swi	r19, r1, 8
20024c84:	fa81000c 	swi	r20, r1, 12
20024c88:	12610000 	addk	r19, r1, r0
20024c8c:	96808000 	mfs	r20, rpc
20024c90:	b000dffd 	imm	-8195
20024c94:	3294ccd0 	addik	r20, r20, -13104
20024c98:	f8b30014 	swi	r5, r19, 20
20024c9c:	f8d30018 	swi	r6, r19, 24
20024ca0:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20024ca4:	f8130004 	swi	r0, r19, 4
20024ca8:	b800005c 	bri	92		// 20024d04
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20024cac:	e8730014 	lwi	r3, r19, 20
20024cb0:	e8830000 	lwi	r4, r3, 0
20024cb4:	e8730014 	lwi	r3, r19, 20
20024cb8:	e8a3000c 	lwi	r5, r3, 12
20024cbc:	e8730004 	lwi	r3, r19, 4
20024cc0:	64630402 	bslli	r3, r3, 2
20024cc4:	10651800 	addk	r3, r5, r3
20024cc8:	e8a30000 	lwi	r5, r3, 0
20024ccc:	e8730014 	lwi	r3, r19, 20
20024cd0:	e8630010 	lwi	r3, r3, 16
20024cd4:	e8630000 	lwi	r3, r3, 0
20024cd8:	14632800 	rsubk	r3, r3, r5
20024cdc:	10641800 	addk	r3, r4, r3
20024ce0:	30830001 	addik	r4, r3, 1
20024ce4:	e873001c 	lwi	r3, r19, 28
20024ce8:	16441803 	cmpu	r18, r4, r3
20024cec:	bc52000c 	blti	r18, 12		// 20024cf8
            return 0;
20024cf0:	10600000 	addk	r3, r0, r0
20024cf4:	b8000024 	bri	36		// 20024d18
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20024cf8:	e8730004 	lwi	r3, r19, 4
20024cfc:	30630001 	addik	r3, r3, 1
20024d00:	f8730004 	swi	r3, r19, 4
20024d04:	e8930004 	lwi	r4, r19, 4
20024d08:	e8730018 	lwi	r3, r19, 24
20024d0c:	16432003 	cmpu	r18, r3, r4
20024d10:	bc52ff9c 	blti	r18, -100		// 20024cac
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20024d14:	30600001 	addik	r3, r0, 1
}
20024d18:	10330000 	addk	r1, r19, r0
20024d1c:	ea610008 	lwi	r19, r1, 8
20024d20:	ea81000c 	lwi	r20, r1, 12
20024d24:	30210010 	addik	r1, r1, 16
20024d28:	b60f0008 	rtsd	r15, 8
20024d2c:	80000000 	or	r0, r0, r0

20024d30 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20024d30:	3021ffe8 	addik	r1, r1, -24
20024d34:	fa610010 	swi	r19, r1, 16
20024d38:	fa810014 	swi	r20, r1, 20
20024d3c:	12610000 	addk	r19, r1, r0
20024d40:	96808000 	mfs	r20, rpc
20024d44:	b000dffd 	imm	-8195
20024d48:	3294cc1c 	addik	r20, r20, -13284
20024d4c:	f8b3001c 	swi	r5, r19, 28
20024d50:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20024d54:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20024d58:	f8130004 	swi	r0, r19, 4
20024d5c:	b8000054 	bri	84		// 20024db0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20024d60:	e873001c 	lwi	r3, r19, 28
20024d64:	e8630010 	lwi	r3, r3, 16
20024d68:	e8830000 	lwi	r4, r3, 0
20024d6c:	e873001c 	lwi	r3, r19, 28
20024d70:	e8a3000c 	lwi	r5, r3, 12
20024d74:	e8730004 	lwi	r3, r19, 4
20024d78:	64630402 	bslli	r3, r3, 2
20024d7c:	10651800 	addk	r3, r5, r3
20024d80:	e8630000 	lwi	r3, r3, 0
20024d84:	14632000 	rsubk	r3, r3, r4
20024d88:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20024d8c:	e8930008 	lwi	r4, r19, 8
20024d90:	e873000c 	lwi	r3, r19, 12
20024d94:	16441803 	cmpu	r18, r4, r3
20024d98:	bcb20008 	bgei	r18, 8		// 20024da0
20024d9c:	10640000 	addk	r3, r4, r0
20024da0:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20024da4:	e8730004 	lwi	r3, r19, 4
20024da8:	30630001 	addik	r3, r3, 1
20024dac:	f8730004 	swi	r3, r19, 4
20024db0:	e8930004 	lwi	r4, r19, 4
20024db4:	e8730020 	lwi	r3, r19, 32
20024db8:	16432003 	cmpu	r18, r3, r4
20024dbc:	bc52ffa4 	blti	r18, -92		// 20024d60
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20024dc0:	e873001c 	lwi	r3, r19, 28
20024dc4:	e8830000 	lwi	r4, r3, 0
20024dc8:	e8730008 	lwi	r3, r19, 8
20024dcc:	14632000 	rsubk	r3, r3, r4
}
20024dd0:	10330000 	addk	r1, r19, r0
20024dd4:	ea610010 	lwi	r19, r1, 16
20024dd8:	ea810014 	lwi	r20, r1, 20
20024ddc:	30210018 	addik	r1, r1, 24
20024de0:	b60f0008 	rtsd	r15, 8
20024de4:	80000000 	or	r0, r0, r0

20024de8 <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20024de8:	3021fff0 	addik	r1, r1, -16
20024dec:	fa610008 	swi	r19, r1, 8
20024df0:	fa81000c 	swi	r20, r1, 12
20024df4:	12610000 	addk	r19, r1, r0
20024df8:	96808000 	mfs	r20, rpc
20024dfc:	b000dffd 	imm	-8195
20024e00:	3294cb64 	addik	r20, r20, -13468
20024e04:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20024e08:	e8730014 	lwi	r3, r19, 20
20024e0c:	e8630010 	lwi	r3, r3, 16
20024e10:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20024e14:	f8130004 	swi	r0, r19, 4
20024e18:	b8000028 	bri	40		// 20024e40
        fifo->read_inds[i] = 0;
20024e1c:	e8730014 	lwi	r3, r19, 20
20024e20:	e883000c 	lwi	r4, r3, 12
20024e24:	e8730004 	lwi	r3, r19, 4
20024e28:	64630402 	bslli	r3, r3, 2
20024e2c:	10641800 	addk	r3, r4, r3
20024e30:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20024e34:	e8730004 	lwi	r3, r19, 4
20024e38:	30630001 	addik	r3, r3, 1
20024e3c:	f8730004 	swi	r3, r19, 4
20024e40:	e8730014 	lwi	r3, r19, 20
20024e44:	e8830008 	lwi	r4, r3, 8
20024e48:	e8730004 	lwi	r3, r19, 4
20024e4c:	16441803 	cmpu	r18, r4, r3
20024e50:	bc52ffcc 	blti	r18, -52		// 20024e1c
        fifo->read_inds[i] = 0;
    }
}
20024e54:	10330000 	addk	r1, r19, r0
20024e58:	ea610008 	lwi	r19, r1, 8
20024e5c:	ea81000c 	lwi	r20, r1, 12
20024e60:	30210010 	addik	r1, r1, 16
20024e64:	b60f0008 	rtsd	r15, 8
20024e68:	80000000 	or	r0, r0, r0

20024e6c <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20024e6c:	3021fff0 	addik	r1, r1, -16
20024e70:	fa610008 	swi	r19, r1, 8
20024e74:	fa81000c 	swi	r20, r1, 12
20024e78:	12610000 	addk	r19, r1, r0
20024e7c:	96808000 	mfs	r20, rpc
20024e80:	b000dffd 	imm	-8195
20024e84:	3294cae0 	addik	r20, r20, -13600
20024e88:	f8b30014 	swi	r5, r19, 20
20024e8c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20024e90:	e8730014 	lwi	r3, r19, 20
20024e94:	e8830004 	lwi	r4, r3, 4
20024e98:	e8730014 	lwi	r3, r19, 20
20024e9c:	e8a3000c 	lwi	r5, r3, 12
20024ea0:	e8730018 	lwi	r3, r19, 24
20024ea4:	64630402 	bslli	r3, r3, 2
20024ea8:	10651800 	addk	r3, r5, r3
20024eac:	e8a30000 	lwi	r5, r3, 0
20024eb0:	e8730014 	lwi	r3, r19, 20
20024eb4:	e8630000 	lwi	r3, r3, 0
20024eb8:	3063ffff 	addik	r3, r3, -1
20024ebc:	84651800 	and	r3, r5, r3
20024ec0:	64630402 	bslli	r3, r3, 2
20024ec4:	10641800 	addk	r3, r4, r3
20024ec8:	e8630000 	lwi	r3, r3, 0
20024ecc:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20024ed0:	e8730014 	lwi	r3, r19, 20
20024ed4:	e883000c 	lwi	r4, r3, 12
20024ed8:	e8730018 	lwi	r3, r19, 24
20024edc:	64630402 	bslli	r3, r3, 2
20024ee0:	10641800 	addk	r3, r4, r3
20024ee4:	e8830000 	lwi	r4, r3, 0
20024ee8:	30840001 	addik	r4, r4, 1
20024eec:	f8830000 	swi	r4, r3, 0
    return value;
20024ef0:	e8730004 	lwi	r3, r19, 4
}
20024ef4:	10330000 	addk	r1, r19, r0
20024ef8:	ea610008 	lwi	r19, r1, 8
20024efc:	ea81000c 	lwi	r20, r1, 12
20024f00:	30210010 	addik	r1, r1, 16
20024f04:	b60f0008 	rtsd	r15, 8
20024f08:	80000000 	or	r0, r0, r0

20024f0c <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20024f0c:	3021fff4 	addik	r1, r1, -12
20024f10:	fa610004 	swi	r19, r1, 4
20024f14:	fa810008 	swi	r20, r1, 8
20024f18:	12610000 	addk	r19, r1, r0
20024f1c:	96808000 	mfs	r20, rpc
20024f20:	b000dffd 	imm	-8195
20024f24:	3294ca40 	addik	r20, r20, -13760
20024f28:	f8b30010 	swi	r5, r19, 16
20024f2c:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20024f30:	e8730010 	lwi	r3, r19, 16
20024f34:	e8830004 	lwi	r4, r3, 4
20024f38:	e8730010 	lwi	r3, r19, 16
20024f3c:	e8630010 	lwi	r3, r3, 16
20024f40:	e8a30000 	lwi	r5, r3, 0
20024f44:	e8730010 	lwi	r3, r19, 16
20024f48:	e8630000 	lwi	r3, r3, 0
20024f4c:	3063ffff 	addik	r3, r3, -1
20024f50:	84651800 	and	r3, r5, r3
20024f54:	64630402 	bslli	r3, r3, 2
20024f58:	10641800 	addk	r3, r4, r3
20024f5c:	e8930014 	lwi	r4, r19, 20
20024f60:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20024f64:	e8730010 	lwi	r3, r19, 16
20024f68:	e8630010 	lwi	r3, r3, 16
20024f6c:	e8830000 	lwi	r4, r3, 0
20024f70:	30840001 	addik	r4, r4, 1
20024f74:	f8830000 	swi	r4, r3, 0
}
20024f78:	10330000 	addk	r1, r19, r0
20024f7c:	ea610004 	lwi	r19, r1, 4
20024f80:	ea810008 	lwi	r20, r1, 8
20024f84:	3021000c 	addik	r1, r1, 12
20024f88:	b60f0008 	rtsd	r15, 8
20024f8c:	80000000 	or	r0, r0, r0

20024f90 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20024f90:	3021fff4 	addik	r1, r1, -12
20024f94:	fa610004 	swi	r19, r1, 4
20024f98:	fa810008 	swi	r20, r1, 8
20024f9c:	12610000 	addk	r19, r1, r0
20024fa0:	96808000 	mfs	r20, rpc
20024fa4:	b000dffd 	imm	-8195
20024fa8:	3294c9bc 	addik	r20, r20, -13892
20024fac:	f8b30010 	swi	r5, r19, 16
20024fb0:	f8d30014 	swi	r6, r19, 20
20024fb4:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20024fb8:	e8730010 	lwi	r3, r19, 16
20024fbc:	e8630010 	lwi	r3, r3, 16
20024fc0:	e8830000 	lwi	r4, r3, 0
20024fc4:	e8730010 	lwi	r3, r19, 16
20024fc8:	e8a3000c 	lwi	r5, r3, 12
20024fcc:	e8730014 	lwi	r3, r19, 20
20024fd0:	64630402 	bslli	r3, r3, 2
20024fd4:	10651800 	addk	r3, r5, r3
20024fd8:	e8630000 	lwi	r3, r3, 0
20024fdc:	14a32000 	rsubk	r5, r3, r4
20024fe0:	30600001 	addik	r3, r0, 1
20024fe4:	e8930018 	lwi	r4, r19, 24
20024fe8:	16442803 	cmpu	r18, r4, r5
20024fec:	bcb20008 	bgei	r18, 8		// 20024ff4
20024ff0:	10600000 	addk	r3, r0, r0
20024ff4:	a46300ff 	andi	r3, r3, 255
}
20024ff8:	10330000 	addk	r1, r19, r0
20024ffc:	ea610004 	lwi	r19, r1, 4
20025000:	ea810008 	lwi	r20, r1, 8
20025004:	3021000c 	addik	r1, r1, 12
20025008:	b60f0008 	rtsd	r15, 8
2002500c:	80000000 	or	r0, r0, r0

20025010 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20025010:	3021fff4 	addik	r1, r1, -12
20025014:	fa610004 	swi	r19, r1, 4
20025018:	fa810008 	swi	r20, r1, 8
2002501c:	12610000 	addk	r19, r1, r0
20025020:	96808000 	mfs	r20, rpc
20025024:	b000dffd 	imm	-8195
20025028:	3294c93c 	addik	r20, r20, -14020
2002502c:	f8b30010 	swi	r5, r19, 16
20025030:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20025034:	e8730010 	lwi	r3, r19, 16
20025038:	e8630010 	lwi	r3, r3, 16
2002503c:	e8830000 	lwi	r4, r3, 0
20025040:	e8730010 	lwi	r3, r19, 16
20025044:	e8a3000c 	lwi	r5, r3, 12
20025048:	e8730014 	lwi	r3, r19, 20
2002504c:	64630402 	bslli	r3, r3, 2
20025050:	10651800 	addk	r3, r5, r3
20025054:	e8630000 	lwi	r3, r3, 0
20025058:	14632000 	rsubk	r3, r3, r4
}
2002505c:	10330000 	addk	r1, r19, r0
20025060:	ea610004 	lwi	r19, r1, 4
20025064:	ea810008 	lwi	r20, r1, 8
20025068:	3021000c 	addik	r1, r1, 12
2002506c:	b60f0008 	rtsd	r15, 8
20025070:	80000000 	or	r0, r0, r0

20025074 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20025074:	3021fff0 	addik	r1, r1, -16
20025078:	fa610008 	swi	r19, r1, 8
2002507c:	fa81000c 	swi	r20, r1, 12
20025080:	12610000 	addk	r19, r1, r0
20025084:	96808000 	mfs	r20, rpc
20025088:	b000dffd 	imm	-8195
2002508c:	3294c8d8 	addik	r20, r20, -14120
20025090:	f8b30014 	swi	r5, r19, 20
20025094:	f8d30018 	swi	r6, r19, 24
20025098:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002509c:	f8130004 	swi	r0, r19, 4
200250a0:	b800005c 	bri	92		// 200250fc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200250a4:	e8730014 	lwi	r3, r19, 20
200250a8:	e8830000 	lwi	r4, r3, 0
200250ac:	e8730014 	lwi	r3, r19, 20
200250b0:	e8a3000c 	lwi	r5, r3, 12
200250b4:	e8730004 	lwi	r3, r19, 4
200250b8:	64630402 	bslli	r3, r3, 2
200250bc:	10651800 	addk	r3, r5, r3
200250c0:	e8a30000 	lwi	r5, r3, 0
200250c4:	e8730014 	lwi	r3, r19, 20
200250c8:	e8630010 	lwi	r3, r3, 16
200250cc:	e8630000 	lwi	r3, r3, 0
200250d0:	14632800 	rsubk	r3, r3, r5
200250d4:	10641800 	addk	r3, r4, r3
200250d8:	30830001 	addik	r4, r3, 1
200250dc:	e873001c 	lwi	r3, r19, 28
200250e0:	16441803 	cmpu	r18, r4, r3
200250e4:	bc52000c 	blti	r18, 12		// 200250f0
            return 0;
200250e8:	10600000 	addk	r3, r0, r0
200250ec:	b8000024 	bri	36		// 20025110
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200250f0:	e8730004 	lwi	r3, r19, 4
200250f4:	30630001 	addik	r3, r3, 1
200250f8:	f8730004 	swi	r3, r19, 4
200250fc:	e8930004 	lwi	r4, r19, 4
20025100:	e8730018 	lwi	r3, r19, 24
20025104:	16432003 	cmpu	r18, r3, r4
20025108:	bc52ff9c 	blti	r18, -100		// 200250a4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002510c:	30600001 	addik	r3, r0, 1
}
20025110:	10330000 	addk	r1, r19, r0
20025114:	ea610008 	lwi	r19, r1, 8
20025118:	ea81000c 	lwi	r20, r1, 12
2002511c:	30210010 	addik	r1, r1, 16
20025120:	b60f0008 	rtsd	r15, 8
20025124:	80000000 	or	r0, r0, r0

20025128 <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20025128:	3021ffe8 	addik	r1, r1, -24
2002512c:	fa610010 	swi	r19, r1, 16
20025130:	fa810014 	swi	r20, r1, 20
20025134:	12610000 	addk	r19, r1, r0
20025138:	96808000 	mfs	r20, rpc
2002513c:	b000dffd 	imm	-8195
20025140:	3294c824 	addik	r20, r20, -14300
20025144:	f8b3001c 	swi	r5, r19, 28
20025148:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002514c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20025150:	f8130004 	swi	r0, r19, 4
20025154:	b8000054 	bri	84		// 200251a8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20025158:	e873001c 	lwi	r3, r19, 28
2002515c:	e8630010 	lwi	r3, r3, 16
20025160:	e8830000 	lwi	r4, r3, 0
20025164:	e873001c 	lwi	r3, r19, 28
20025168:	e8a3000c 	lwi	r5, r3, 12
2002516c:	e8730004 	lwi	r3, r19, 4
20025170:	64630402 	bslli	r3, r3, 2
20025174:	10651800 	addk	r3, r5, r3
20025178:	e8630000 	lwi	r3, r3, 0
2002517c:	14632000 	rsubk	r3, r3, r4
20025180:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20025184:	e8930008 	lwi	r4, r19, 8
20025188:	e873000c 	lwi	r3, r19, 12
2002518c:	16441803 	cmpu	r18, r4, r3
20025190:	bcb20008 	bgei	r18, 8		// 20025198
20025194:	10640000 	addk	r3, r4, r0
20025198:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002519c:	e8730004 	lwi	r3, r19, 4
200251a0:	30630001 	addik	r3, r3, 1
200251a4:	f8730004 	swi	r3, r19, 4
200251a8:	e8930004 	lwi	r4, r19, 4
200251ac:	e8730020 	lwi	r3, r19, 32
200251b0:	16432003 	cmpu	r18, r3, r4
200251b4:	bc52ffa4 	blti	r18, -92		// 20025158
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200251b8:	e873001c 	lwi	r3, r19, 28
200251bc:	e8830000 	lwi	r4, r3, 0
200251c0:	e8730008 	lwi	r3, r19, 8
200251c4:	14632000 	rsubk	r3, r3, r4
}
200251c8:	10330000 	addk	r1, r19, r0
200251cc:	ea610010 	lwi	r19, r1, 16
200251d0:	ea810014 	lwi	r20, r1, 20
200251d4:	30210018 	addik	r1, r1, 24
200251d8:	b60f0008 	rtsd	r15, 8
200251dc:	80000000 	or	r0, r0, r0

200251e0 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200251e0:	3021fff0 	addik	r1, r1, -16
200251e4:	fa610008 	swi	r19, r1, 8
200251e8:	fa81000c 	swi	r20, r1, 12
200251ec:	12610000 	addk	r19, r1, r0
200251f0:	96808000 	mfs	r20, rpc
200251f4:	b000dffd 	imm	-8195
200251f8:	3294c76c 	addik	r20, r20, -14484
200251fc:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20025200:	e8730014 	lwi	r3, r19, 20
20025204:	e8630010 	lwi	r3, r3, 16
20025208:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002520c:	f8130004 	swi	r0, r19, 4
20025210:	b8000028 	bri	40		// 20025238
        fifo->read_inds[i] = 0;
20025214:	e8730014 	lwi	r3, r19, 20
20025218:	e883000c 	lwi	r4, r3, 12
2002521c:	e8730004 	lwi	r3, r19, 4
20025220:	64630402 	bslli	r3, r3, 2
20025224:	10641800 	addk	r3, r4, r3
20025228:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002522c:	e8730004 	lwi	r3, r19, 4
20025230:	30630001 	addik	r3, r3, 1
20025234:	f8730004 	swi	r3, r19, 4
20025238:	e8730014 	lwi	r3, r19, 20
2002523c:	e8830008 	lwi	r4, r3, 8
20025240:	e8730004 	lwi	r3, r19, 4
20025244:	16441803 	cmpu	r18, r4, r3
20025248:	bc52ffcc 	blti	r18, -52		// 20025214
        fifo->read_inds[i] = 0;
    }
}
2002524c:	10330000 	addk	r1, r19, r0
20025250:	ea610008 	lwi	r19, r1, 8
20025254:	ea81000c 	lwi	r20, r1, 12
20025258:	30210010 	addik	r1, r1, 16
2002525c:	b60f0008 	rtsd	r15, 8
20025260:	80000000 	or	r0, r0, r0

20025264 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20025264:	3021ffec 	addik	r1, r1, -20
20025268:	fa61000c 	swi	r19, r1, 12
2002526c:	fa810010 	swi	r20, r1, 16
20025270:	12610000 	addk	r19, r1, r0
20025274:	96808000 	mfs	r20, rpc
20025278:	b000dffd 	imm	-8195
2002527c:	3294c6e8 	addik	r20, r20, -14616
20025280:	f8b30018 	swi	r5, r19, 24
20025284:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20025288:	e8730018 	lwi	r3, r19, 24
2002528c:	e8830004 	lwi	r4, r3, 4
20025290:	e8730018 	lwi	r3, r19, 24
20025294:	e8a3000c 	lwi	r5, r3, 12
20025298:	e873001c 	lwi	r3, r19, 28
2002529c:	64630402 	bslli	r3, r3, 2
200252a0:	10651800 	addk	r3, r5, r3
200252a4:	e8a30000 	lwi	r5, r3, 0
200252a8:	e8730018 	lwi	r3, r19, 24
200252ac:	e8630000 	lwi	r3, r3, 0
200252b0:	3063ffff 	addik	r3, r3, -1
200252b4:	84651800 	and	r3, r5, r3
200252b8:	64630403 	bslli	r3, r3, 3
200252bc:	10641800 	addk	r3, r4, r3
200252c0:	e8830000 	lwi	r4, r3, 0
200252c4:	e8a30004 	lwi	r5, r3, 4
200252c8:	f8930004 	swi	r4, r19, 4
200252cc:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
200252d0:	e8730018 	lwi	r3, r19, 24
200252d4:	e883000c 	lwi	r4, r3, 12
200252d8:	e873001c 	lwi	r3, r19, 28
200252dc:	64630402 	bslli	r3, r3, 2
200252e0:	10641800 	addk	r3, r4, r3
200252e4:	e8830000 	lwi	r4, r3, 0
200252e8:	30840001 	addik	r4, r4, 1
200252ec:	f8830000 	swi	r4, r3, 0
    return value;
200252f0:	e8930004 	lwi	r4, r19, 4
200252f4:	e8b30008 	lwi	r5, r19, 8
}
200252f8:	10640000 	addk	r3, r4, r0
200252fc:	10850000 	addk	r4, r5, r0
20025300:	10330000 	addk	r1, r19, r0
20025304:	ea61000c 	lwi	r19, r1, 12
20025308:	ea810010 	lwi	r20, r1, 16
2002530c:	30210014 	addik	r1, r1, 20
20025310:	b60f0008 	rtsd	r15, 8
20025314:	80000000 	or	r0, r0, r0

20025318 <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20025318:	3021fff4 	addik	r1, r1, -12
2002531c:	fa610004 	swi	r19, r1, 4
20025320:	fa810008 	swi	r20, r1, 8
20025324:	12610000 	addk	r19, r1, r0
20025328:	96808000 	mfs	r20, rpc
2002532c:	b000dffd 	imm	-8195
20025330:	3294c634 	addik	r20, r20, -14796
20025334:	f8b30010 	swi	r5, r19, 16
20025338:	f8d30014 	swi	r6, r19, 20
2002533c:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20025340:	e8730010 	lwi	r3, r19, 16
20025344:	e8830004 	lwi	r4, r3, 4
20025348:	e8730010 	lwi	r3, r19, 16
2002534c:	e8630010 	lwi	r3, r3, 16
20025350:	e8a30000 	lwi	r5, r3, 0
20025354:	e8730010 	lwi	r3, r19, 16
20025358:	e8630000 	lwi	r3, r3, 0
2002535c:	3063ffff 	addik	r3, r3, -1
20025360:	84651800 	and	r3, r5, r3
20025364:	64630403 	bslli	r3, r3, 3
20025368:	10641800 	addk	r3, r4, r3
2002536c:	e8930014 	lwi	r4, r19, 20
20025370:	e8b30018 	lwi	r5, r19, 24
20025374:	f8830000 	swi	r4, r3, 0
20025378:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2002537c:	e8730010 	lwi	r3, r19, 16
20025380:	e8630010 	lwi	r3, r3, 16
20025384:	e8830000 	lwi	r4, r3, 0
20025388:	30840001 	addik	r4, r4, 1
2002538c:	f8830000 	swi	r4, r3, 0
}
20025390:	10330000 	addk	r1, r19, r0
20025394:	ea610004 	lwi	r19, r1, 4
20025398:	ea810008 	lwi	r20, r1, 8
2002539c:	3021000c 	addik	r1, r1, 12
200253a0:	b60f0008 	rtsd	r15, 8
200253a4:	80000000 	or	r0, r0, r0

200253a8 <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200253a8:	3021fff4 	addik	r1, r1, -12
200253ac:	fa610004 	swi	r19, r1, 4
200253b0:	fa810008 	swi	r20, r1, 8
200253b4:	12610000 	addk	r19, r1, r0
200253b8:	96808000 	mfs	r20, rpc
200253bc:	b000dffd 	imm	-8195
200253c0:	3294c5a4 	addik	r20, r20, -14940
200253c4:	f8b30010 	swi	r5, r19, 16
200253c8:	f8d30014 	swi	r6, r19, 20
200253cc:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200253d0:	e8730010 	lwi	r3, r19, 16
200253d4:	e8630010 	lwi	r3, r3, 16
200253d8:	e8830000 	lwi	r4, r3, 0
200253dc:	e8730010 	lwi	r3, r19, 16
200253e0:	e8a3000c 	lwi	r5, r3, 12
200253e4:	e8730014 	lwi	r3, r19, 20
200253e8:	64630402 	bslli	r3, r3, 2
200253ec:	10651800 	addk	r3, r5, r3
200253f0:	e8630000 	lwi	r3, r3, 0
200253f4:	14a32000 	rsubk	r5, r3, r4
200253f8:	30600001 	addik	r3, r0, 1
200253fc:	e8930018 	lwi	r4, r19, 24
20025400:	16442803 	cmpu	r18, r4, r5
20025404:	bcb20008 	bgei	r18, 8		// 2002540c
20025408:	10600000 	addk	r3, r0, r0
2002540c:	a46300ff 	andi	r3, r3, 255
}
20025410:	10330000 	addk	r1, r19, r0
20025414:	ea610004 	lwi	r19, r1, 4
20025418:	ea810008 	lwi	r20, r1, 8
2002541c:	3021000c 	addik	r1, r1, 12
20025420:	b60f0008 	rtsd	r15, 8
20025424:	80000000 	or	r0, r0, r0

20025428 <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20025428:	3021fff4 	addik	r1, r1, -12
2002542c:	fa610004 	swi	r19, r1, 4
20025430:	fa810008 	swi	r20, r1, 8
20025434:	12610000 	addk	r19, r1, r0
20025438:	96808000 	mfs	r20, rpc
2002543c:	b000dffd 	imm	-8195
20025440:	3294c524 	addik	r20, r20, -15068
20025444:	f8b30010 	swi	r5, r19, 16
20025448:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002544c:	e8730010 	lwi	r3, r19, 16
20025450:	e8630010 	lwi	r3, r3, 16
20025454:	e8830000 	lwi	r4, r3, 0
20025458:	e8730010 	lwi	r3, r19, 16
2002545c:	e8a3000c 	lwi	r5, r3, 12
20025460:	e8730014 	lwi	r3, r19, 20
20025464:	64630402 	bslli	r3, r3, 2
20025468:	10651800 	addk	r3, r5, r3
2002546c:	e8630000 	lwi	r3, r3, 0
20025470:	14632000 	rsubk	r3, r3, r4
}
20025474:	10330000 	addk	r1, r19, r0
20025478:	ea610004 	lwi	r19, r1, 4
2002547c:	ea810008 	lwi	r20, r1, 8
20025480:	3021000c 	addik	r1, r1, 12
20025484:	b60f0008 	rtsd	r15, 8
20025488:	80000000 	or	r0, r0, r0

2002548c <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002548c:	3021fff0 	addik	r1, r1, -16
20025490:	fa610008 	swi	r19, r1, 8
20025494:	fa81000c 	swi	r20, r1, 12
20025498:	12610000 	addk	r19, r1, r0
2002549c:	96808000 	mfs	r20, rpc
200254a0:	b000dffd 	imm	-8195
200254a4:	3294c4c0 	addik	r20, r20, -15168
200254a8:	f8b30014 	swi	r5, r19, 20
200254ac:	f8d30018 	swi	r6, r19, 24
200254b0:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200254b4:	f8130004 	swi	r0, r19, 4
200254b8:	b800005c 	bri	92		// 20025514
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200254bc:	e8730014 	lwi	r3, r19, 20
200254c0:	e8830000 	lwi	r4, r3, 0
200254c4:	e8730014 	lwi	r3, r19, 20
200254c8:	e8a3000c 	lwi	r5, r3, 12
200254cc:	e8730004 	lwi	r3, r19, 4
200254d0:	64630402 	bslli	r3, r3, 2
200254d4:	10651800 	addk	r3, r5, r3
200254d8:	e8a30000 	lwi	r5, r3, 0
200254dc:	e8730014 	lwi	r3, r19, 20
200254e0:	e8630010 	lwi	r3, r3, 16
200254e4:	e8630000 	lwi	r3, r3, 0
200254e8:	14632800 	rsubk	r3, r3, r5
200254ec:	10641800 	addk	r3, r4, r3
200254f0:	30830001 	addik	r4, r3, 1
200254f4:	e873001c 	lwi	r3, r19, 28
200254f8:	16441803 	cmpu	r18, r4, r3
200254fc:	bc52000c 	blti	r18, 12		// 20025508
            return 0;
20025500:	10600000 	addk	r3, r0, r0
20025504:	b8000024 	bri	36		// 20025528
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20025508:	e8730004 	lwi	r3, r19, 4
2002550c:	30630001 	addik	r3, r3, 1
20025510:	f8730004 	swi	r3, r19, 4
20025514:	e8930004 	lwi	r4, r19, 4
20025518:	e8730018 	lwi	r3, r19, 24
2002551c:	16432003 	cmpu	r18, r3, r4
20025520:	bc52ff9c 	blti	r18, -100		// 200254bc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20025524:	30600001 	addik	r3, r0, 1
}
20025528:	10330000 	addk	r1, r19, r0
2002552c:	ea610008 	lwi	r19, r1, 8
20025530:	ea81000c 	lwi	r20, r1, 12
20025534:	30210010 	addik	r1, r1, 16
20025538:	b60f0008 	rtsd	r15, 8
2002553c:	80000000 	or	r0, r0, r0

20025540 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20025540:	3021ffe8 	addik	r1, r1, -24
20025544:	fa610010 	swi	r19, r1, 16
20025548:	fa810014 	swi	r20, r1, 20
2002554c:	12610000 	addk	r19, r1, r0
20025550:	96808000 	mfs	r20, rpc
20025554:	b000dffd 	imm	-8195
20025558:	3294c40c 	addik	r20, r20, -15348
2002555c:	f8b3001c 	swi	r5, r19, 28
20025560:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20025564:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20025568:	f8130004 	swi	r0, r19, 4
2002556c:	b8000054 	bri	84		// 200255c0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20025570:	e873001c 	lwi	r3, r19, 28
20025574:	e8630010 	lwi	r3, r3, 16
20025578:	e8830000 	lwi	r4, r3, 0
2002557c:	e873001c 	lwi	r3, r19, 28
20025580:	e8a3000c 	lwi	r5, r3, 12
20025584:	e8730004 	lwi	r3, r19, 4
20025588:	64630402 	bslli	r3, r3, 2
2002558c:	10651800 	addk	r3, r5, r3
20025590:	e8630000 	lwi	r3, r3, 0
20025594:	14632000 	rsubk	r3, r3, r4
20025598:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002559c:	e8930008 	lwi	r4, r19, 8
200255a0:	e873000c 	lwi	r3, r19, 12
200255a4:	16441803 	cmpu	r18, r4, r3
200255a8:	bcb20008 	bgei	r18, 8		// 200255b0
200255ac:	10640000 	addk	r3, r4, r0
200255b0:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200255b4:	e8730004 	lwi	r3, r19, 4
200255b8:	30630001 	addik	r3, r3, 1
200255bc:	f8730004 	swi	r3, r19, 4
200255c0:	e8930004 	lwi	r4, r19, 4
200255c4:	e8730020 	lwi	r3, r19, 32
200255c8:	16432003 	cmpu	r18, r3, r4
200255cc:	bc52ffa4 	blti	r18, -92		// 20025570
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200255d0:	e873001c 	lwi	r3, r19, 28
200255d4:	e8830000 	lwi	r4, r3, 0
200255d8:	e8730008 	lwi	r3, r19, 8
200255dc:	14632000 	rsubk	r3, r3, r4
}
200255e0:	10330000 	addk	r1, r19, r0
200255e4:	ea610010 	lwi	r19, r1, 16
200255e8:	ea810014 	lwi	r20, r1, 20
200255ec:	30210018 	addik	r1, r1, 24
200255f0:	b60f0008 	rtsd	r15, 8
200255f4:	80000000 	or	r0, r0, r0

200255f8 <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200255f8:	3021fff0 	addik	r1, r1, -16
200255fc:	fa610008 	swi	r19, r1, 8
20025600:	fa81000c 	swi	r20, r1, 12
20025604:	12610000 	addk	r19, r1, r0
20025608:	96808000 	mfs	r20, rpc
2002560c:	b000dffd 	imm	-8195
20025610:	3294c354 	addik	r20, r20, -15532
20025614:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20025618:	e8730014 	lwi	r3, r19, 20
2002561c:	e8630010 	lwi	r3, r3, 16
20025620:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20025624:	f8130004 	swi	r0, r19, 4
20025628:	b8000028 	bri	40		// 20025650
        fifo->read_inds[i] = 0;
2002562c:	e8730014 	lwi	r3, r19, 20
20025630:	e883000c 	lwi	r4, r3, 12
20025634:	e8730004 	lwi	r3, r19, 4
20025638:	64630402 	bslli	r3, r3, 2
2002563c:	10641800 	addk	r3, r4, r3
20025640:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20025644:	e8730004 	lwi	r3, r19, 4
20025648:	30630001 	addik	r3, r3, 1
2002564c:	f8730004 	swi	r3, r19, 4
20025650:	e8730014 	lwi	r3, r19, 20
20025654:	e8830008 	lwi	r4, r3, 8
20025658:	e8730004 	lwi	r3, r19, 4
2002565c:	16441803 	cmpu	r18, r4, r3
20025660:	bc52ffcc 	blti	r18, -52		// 2002562c
        fifo->read_inds[i] = 0;
    }
}
20025664:	10330000 	addk	r1, r19, r0
20025668:	ea610008 	lwi	r19, r1, 8
2002566c:	ea81000c 	lwi	r20, r1, 12
20025670:	30210010 	addik	r1, r1, 16
20025674:	b60f0008 	rtsd	r15, 8
20025678:	80000000 	or	r0, r0, r0

2002567c <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002567c:	3021fff0 	addik	r1, r1, -16
20025680:	fa610008 	swi	r19, r1, 8
20025684:	fa81000c 	swi	r20, r1, 12
20025688:	12610000 	addk	r19, r1, r0
2002568c:	96808000 	mfs	r20, rpc
20025690:	b000dffd 	imm	-8195
20025694:	3294c2d0 	addik	r20, r20, -15664
20025698:	f8b30014 	swi	r5, r19, 20
2002569c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200256a0:	e8730014 	lwi	r3, r19, 20
200256a4:	e8830004 	lwi	r4, r3, 4
200256a8:	e8730014 	lwi	r3, r19, 20
200256ac:	e8a3000c 	lwi	r5, r3, 12
200256b0:	e8730018 	lwi	r3, r19, 24
200256b4:	64630402 	bslli	r3, r3, 2
200256b8:	10651800 	addk	r3, r5, r3
200256bc:	e8a30000 	lwi	r5, r3, 0
200256c0:	e8730014 	lwi	r3, r19, 20
200256c4:	e8630000 	lwi	r3, r3, 0
200256c8:	3063ffff 	addik	r3, r3, -1
200256cc:	84651800 	and	r3, r5, r3
200256d0:	10641800 	addk	r3, r4, r3
200256d4:	e0630000 	lbui	r3, r3, 0
200256d8:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200256dc:	e8730014 	lwi	r3, r19, 20
200256e0:	e883000c 	lwi	r4, r3, 12
200256e4:	e8730018 	lwi	r3, r19, 24
200256e8:	64630402 	bslli	r3, r3, 2
200256ec:	10641800 	addk	r3, r4, r3
200256f0:	e8830000 	lwi	r4, r3, 0
200256f4:	30840001 	addik	r4, r4, 1
200256f8:	f8830000 	swi	r4, r3, 0
    return value;
200256fc:	e0730004 	lbui	r3, r19, 4
}
20025700:	10330000 	addk	r1, r19, r0
20025704:	ea610008 	lwi	r19, r1, 8
20025708:	ea81000c 	lwi	r20, r1, 12
2002570c:	30210010 	addik	r1, r1, 16
20025710:	b60f0008 	rtsd	r15, 8
20025714:	80000000 	or	r0, r0, r0

20025718 <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20025718:	3021fff4 	addik	r1, r1, -12
2002571c:	fa610004 	swi	r19, r1, 4
20025720:	fa810008 	swi	r20, r1, 8
20025724:	12610000 	addk	r19, r1, r0
20025728:	96808000 	mfs	r20, rpc
2002572c:	b000dffd 	imm	-8195
20025730:	3294c234 	addik	r20, r20, -15820
20025734:	f8b30010 	swi	r5, r19, 16
20025738:	10660000 	addk	r3, r6, r0
2002573c:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20025740:	e8730010 	lwi	r3, r19, 16
20025744:	e8830004 	lwi	r4, r3, 4
20025748:	e8730010 	lwi	r3, r19, 16
2002574c:	e8630010 	lwi	r3, r3, 16
20025750:	e8a30000 	lwi	r5, r3, 0
20025754:	e8730010 	lwi	r3, r19, 16
20025758:	e8630000 	lwi	r3, r3, 0
2002575c:	3063ffff 	addik	r3, r3, -1
20025760:	84651800 	and	r3, r5, r3
20025764:	10641800 	addk	r3, r4, r3
20025768:	e0930014 	lbui	r4, r19, 20
2002576c:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20025770:	e8730010 	lwi	r3, r19, 16
20025774:	e8630010 	lwi	r3, r3, 16
20025778:	e8830000 	lwi	r4, r3, 0
2002577c:	30840001 	addik	r4, r4, 1
20025780:	f8830000 	swi	r4, r3, 0
}
20025784:	10330000 	addk	r1, r19, r0
20025788:	ea610004 	lwi	r19, r1, 4
2002578c:	ea810008 	lwi	r20, r1, 8
20025790:	3021000c 	addik	r1, r1, 12
20025794:	b60f0008 	rtsd	r15, 8
20025798:	80000000 	or	r0, r0, r0

2002579c <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002579c:	3021fff4 	addik	r1, r1, -12
200257a0:	fa610004 	swi	r19, r1, 4
200257a4:	fa810008 	swi	r20, r1, 8
200257a8:	12610000 	addk	r19, r1, r0
200257ac:	96808000 	mfs	r20, rpc
200257b0:	b000dffd 	imm	-8195
200257b4:	3294c1b0 	addik	r20, r20, -15952
200257b8:	f8b30010 	swi	r5, r19, 16
200257bc:	f8d30014 	swi	r6, r19, 20
200257c0:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200257c4:	e8730010 	lwi	r3, r19, 16
200257c8:	e8630010 	lwi	r3, r3, 16
200257cc:	e8830000 	lwi	r4, r3, 0
200257d0:	e8730010 	lwi	r3, r19, 16
200257d4:	e8a3000c 	lwi	r5, r3, 12
200257d8:	e8730014 	lwi	r3, r19, 20
200257dc:	64630402 	bslli	r3, r3, 2
200257e0:	10651800 	addk	r3, r5, r3
200257e4:	e8630000 	lwi	r3, r3, 0
200257e8:	14a32000 	rsubk	r5, r3, r4
200257ec:	30600001 	addik	r3, r0, 1
200257f0:	e8930018 	lwi	r4, r19, 24
200257f4:	16442803 	cmpu	r18, r4, r5
200257f8:	bcb20008 	bgei	r18, 8		// 20025800
200257fc:	10600000 	addk	r3, r0, r0
20025800:	a46300ff 	andi	r3, r3, 255
}
20025804:	10330000 	addk	r1, r19, r0
20025808:	ea610004 	lwi	r19, r1, 4
2002580c:	ea810008 	lwi	r20, r1, 8
20025810:	3021000c 	addik	r1, r1, 12
20025814:	b60f0008 	rtsd	r15, 8
20025818:	80000000 	or	r0, r0, r0

2002581c <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002581c:	3021fff4 	addik	r1, r1, -12
20025820:	fa610004 	swi	r19, r1, 4
20025824:	fa810008 	swi	r20, r1, 8
20025828:	12610000 	addk	r19, r1, r0
2002582c:	96808000 	mfs	r20, rpc
20025830:	b000dffd 	imm	-8195
20025834:	3294c130 	addik	r20, r20, -16080
20025838:	f8b30010 	swi	r5, r19, 16
2002583c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20025840:	e8730010 	lwi	r3, r19, 16
20025844:	e8630010 	lwi	r3, r3, 16
20025848:	e8830000 	lwi	r4, r3, 0
2002584c:	e8730010 	lwi	r3, r19, 16
20025850:	e8a3000c 	lwi	r5, r3, 12
20025854:	e8730014 	lwi	r3, r19, 20
20025858:	64630402 	bslli	r3, r3, 2
2002585c:	10651800 	addk	r3, r5, r3
20025860:	e8630000 	lwi	r3, r3, 0
20025864:	14632000 	rsubk	r3, r3, r4
}
20025868:	10330000 	addk	r1, r19, r0
2002586c:	ea610004 	lwi	r19, r1, 4
20025870:	ea810008 	lwi	r20, r1, 8
20025874:	3021000c 	addik	r1, r1, 12
20025878:	b60f0008 	rtsd	r15, 8
2002587c:	80000000 	or	r0, r0, r0

20025880 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20025880:	3021fff0 	addik	r1, r1, -16
20025884:	fa610008 	swi	r19, r1, 8
20025888:	fa81000c 	swi	r20, r1, 12
2002588c:	12610000 	addk	r19, r1, r0
20025890:	96808000 	mfs	r20, rpc
20025894:	b000dffd 	imm	-8195
20025898:	3294c0cc 	addik	r20, r20, -16180
2002589c:	f8b30014 	swi	r5, r19, 20
200258a0:	f8d30018 	swi	r6, r19, 24
200258a4:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200258a8:	f8130004 	swi	r0, r19, 4
200258ac:	b800005c 	bri	92		// 20025908
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200258b0:	e8730014 	lwi	r3, r19, 20
200258b4:	e8830000 	lwi	r4, r3, 0
200258b8:	e8730014 	lwi	r3, r19, 20
200258bc:	e8a3000c 	lwi	r5, r3, 12
200258c0:	e8730004 	lwi	r3, r19, 4
200258c4:	64630402 	bslli	r3, r3, 2
200258c8:	10651800 	addk	r3, r5, r3
200258cc:	e8a30000 	lwi	r5, r3, 0
200258d0:	e8730014 	lwi	r3, r19, 20
200258d4:	e8630010 	lwi	r3, r3, 16
200258d8:	e8630000 	lwi	r3, r3, 0
200258dc:	14632800 	rsubk	r3, r3, r5
200258e0:	10641800 	addk	r3, r4, r3
200258e4:	30830001 	addik	r4, r3, 1
200258e8:	e873001c 	lwi	r3, r19, 28
200258ec:	16441803 	cmpu	r18, r4, r3
200258f0:	bc52000c 	blti	r18, 12		// 200258fc
            return 0;
200258f4:	10600000 	addk	r3, r0, r0
200258f8:	b8000024 	bri	36		// 2002591c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200258fc:	e8730004 	lwi	r3, r19, 4
20025900:	30630001 	addik	r3, r3, 1
20025904:	f8730004 	swi	r3, r19, 4
20025908:	e8930004 	lwi	r4, r19, 4
2002590c:	e8730018 	lwi	r3, r19, 24
20025910:	16432003 	cmpu	r18, r3, r4
20025914:	bc52ff9c 	blti	r18, -100		// 200258b0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20025918:	30600001 	addik	r3, r0, 1
}
2002591c:	10330000 	addk	r1, r19, r0
20025920:	ea610008 	lwi	r19, r1, 8
20025924:	ea81000c 	lwi	r20, r1, 12
20025928:	30210010 	addik	r1, r1, 16
2002592c:	b60f0008 	rtsd	r15, 8
20025930:	80000000 	or	r0, r0, r0

20025934 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20025934:	3021ffe8 	addik	r1, r1, -24
20025938:	fa610010 	swi	r19, r1, 16
2002593c:	fa810014 	swi	r20, r1, 20
20025940:	12610000 	addk	r19, r1, r0
20025944:	96808000 	mfs	r20, rpc
20025948:	b000dffd 	imm	-8195
2002594c:	3294c018 	addik	r20, r20, -16360
20025950:	f8b3001c 	swi	r5, r19, 28
20025954:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20025958:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002595c:	f8130004 	swi	r0, r19, 4
20025960:	b8000054 	bri	84		// 200259b4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20025964:	e873001c 	lwi	r3, r19, 28
20025968:	e8630010 	lwi	r3, r3, 16
2002596c:	e8830000 	lwi	r4, r3, 0
20025970:	e873001c 	lwi	r3, r19, 28
20025974:	e8a3000c 	lwi	r5, r3, 12
20025978:	e8730004 	lwi	r3, r19, 4
2002597c:	64630402 	bslli	r3, r3, 2
20025980:	10651800 	addk	r3, r5, r3
20025984:	e8630000 	lwi	r3, r3, 0
20025988:	14632000 	rsubk	r3, r3, r4
2002598c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20025990:	e8930008 	lwi	r4, r19, 8
20025994:	e873000c 	lwi	r3, r19, 12
20025998:	16441803 	cmpu	r18, r4, r3
2002599c:	bcb20008 	bgei	r18, 8		// 200259a4
200259a0:	10640000 	addk	r3, r4, r0
200259a4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200259a8:	e8730004 	lwi	r3, r19, 4
200259ac:	30630001 	addik	r3, r3, 1
200259b0:	f8730004 	swi	r3, r19, 4
200259b4:	e8930004 	lwi	r4, r19, 4
200259b8:	e8730020 	lwi	r3, r19, 32
200259bc:	16432003 	cmpu	r18, r3, r4
200259c0:	bc52ffa4 	blti	r18, -92		// 20025964
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200259c4:	e873001c 	lwi	r3, r19, 28
200259c8:	e8830000 	lwi	r4, r3, 0
200259cc:	e8730008 	lwi	r3, r19, 8
200259d0:	14632000 	rsubk	r3, r3, r4
}
200259d4:	10330000 	addk	r1, r19, r0
200259d8:	ea610010 	lwi	r19, r1, 16
200259dc:	ea810014 	lwi	r20, r1, 20
200259e0:	30210018 	addik	r1, r1, 24
200259e4:	b60f0008 	rtsd	r15, 8
200259e8:	80000000 	or	r0, r0, r0

200259ec <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200259ec:	3021fff0 	addik	r1, r1, -16
200259f0:	fa610008 	swi	r19, r1, 8
200259f4:	fa81000c 	swi	r20, r1, 12
200259f8:	12610000 	addk	r19, r1, r0
200259fc:	96808000 	mfs	r20, rpc
20025a00:	b000dffd 	imm	-8195
20025a04:	3294bf60 	addik	r20, r20, -16544
20025a08:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20025a0c:	e8730014 	lwi	r3, r19, 20
20025a10:	e8630010 	lwi	r3, r3, 16
20025a14:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20025a18:	f8130004 	swi	r0, r19, 4
20025a1c:	b8000028 	bri	40		// 20025a44
        fifo->read_inds[i] = 0;
20025a20:	e8730014 	lwi	r3, r19, 20
20025a24:	e883000c 	lwi	r4, r3, 12
20025a28:	e8730004 	lwi	r3, r19, 4
20025a2c:	64630402 	bslli	r3, r3, 2
20025a30:	10641800 	addk	r3, r4, r3
20025a34:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20025a38:	e8730004 	lwi	r3, r19, 4
20025a3c:	30630001 	addik	r3, r3, 1
20025a40:	f8730004 	swi	r3, r19, 4
20025a44:	e8730014 	lwi	r3, r19, 20
20025a48:	e8830008 	lwi	r4, r3, 8
20025a4c:	e8730004 	lwi	r3, r19, 4
20025a50:	16441803 	cmpu	r18, r4, r3
20025a54:	bc52ffcc 	blti	r18, -52		// 20025a20
        fifo->read_inds[i] = 0;
    }
}
20025a58:	10330000 	addk	r1, r19, r0
20025a5c:	ea610008 	lwi	r19, r1, 8
20025a60:	ea81000c 	lwi	r20, r1, 12
20025a64:	30210010 	addik	r1, r1, 16
20025a68:	b60f0008 	rtsd	r15, 8
20025a6c:	80000000 	or	r0, r0, r0

20025a70 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20025a70:	3021fff0 	addik	r1, r1, -16
20025a74:	fa610008 	swi	r19, r1, 8
20025a78:	fa81000c 	swi	r20, r1, 12
20025a7c:	12610000 	addk	r19, r1, r0
20025a80:	96808000 	mfs	r20, rpc
20025a84:	b000dffd 	imm	-8195
20025a88:	3294bedc 	addik	r20, r20, -16676
20025a8c:	f8b30014 	swi	r5, r19, 20
20025a90:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20025a94:	e8730014 	lwi	r3, r19, 20
20025a98:	e8830004 	lwi	r4, r3, 4
20025a9c:	e8730014 	lwi	r3, r19, 20
20025aa0:	e8a3000c 	lwi	r5, r3, 12
20025aa4:	e8730018 	lwi	r3, r19, 24
20025aa8:	64630402 	bslli	r3, r3, 2
20025aac:	10651800 	addk	r3, r5, r3
20025ab0:	e8a30000 	lwi	r5, r3, 0
20025ab4:	e8730014 	lwi	r3, r19, 20
20025ab8:	e8630000 	lwi	r3, r3, 0
20025abc:	3063ffff 	addik	r3, r3, -1
20025ac0:	84651800 	and	r3, r5, r3
20025ac4:	10631800 	addk	r3, r3, r3
20025ac8:	10641800 	addk	r3, r4, r3
20025acc:	e4630000 	lhui	r3, r3, 0
20025ad0:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20025ad4:	e8730014 	lwi	r3, r19, 20
20025ad8:	e883000c 	lwi	r4, r3, 12
20025adc:	e8730018 	lwi	r3, r19, 24
20025ae0:	64630402 	bslli	r3, r3, 2
20025ae4:	10641800 	addk	r3, r4, r3
20025ae8:	e8830000 	lwi	r4, r3, 0
20025aec:	30840001 	addik	r4, r4, 1
20025af0:	f8830000 	swi	r4, r3, 0
    return value;
20025af4:	e4730004 	lhui	r3, r19, 4
}
20025af8:	10330000 	addk	r1, r19, r0
20025afc:	ea610008 	lwi	r19, r1, 8
20025b00:	ea81000c 	lwi	r20, r1, 12
20025b04:	30210010 	addik	r1, r1, 16
20025b08:	b60f0008 	rtsd	r15, 8
20025b0c:	80000000 	or	r0, r0, r0

20025b10 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20025b10:	3021fff4 	addik	r1, r1, -12
20025b14:	fa610004 	swi	r19, r1, 4
20025b18:	fa810008 	swi	r20, r1, 8
20025b1c:	12610000 	addk	r19, r1, r0
20025b20:	96808000 	mfs	r20, rpc
20025b24:	b000dffd 	imm	-8195
20025b28:	3294be3c 	addik	r20, r20, -16836
20025b2c:	f8b30010 	swi	r5, r19, 16
20025b30:	10660000 	addk	r3, r6, r0
20025b34:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20025b38:	e8730010 	lwi	r3, r19, 16
20025b3c:	e8830004 	lwi	r4, r3, 4
20025b40:	e8730010 	lwi	r3, r19, 16
20025b44:	e8630010 	lwi	r3, r3, 16
20025b48:	e8a30000 	lwi	r5, r3, 0
20025b4c:	e8730010 	lwi	r3, r19, 16
20025b50:	e8630000 	lwi	r3, r3, 0
20025b54:	3063ffff 	addik	r3, r3, -1
20025b58:	84651800 	and	r3, r5, r3
20025b5c:	10631800 	addk	r3, r3, r3
20025b60:	10641800 	addk	r3, r4, r3
20025b64:	e4930014 	lhui	r4, r19, 20
20025b68:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20025b6c:	e8730010 	lwi	r3, r19, 16
20025b70:	e8630010 	lwi	r3, r3, 16
20025b74:	e8830000 	lwi	r4, r3, 0
20025b78:	30840001 	addik	r4, r4, 1
20025b7c:	f8830000 	swi	r4, r3, 0
}
20025b80:	10330000 	addk	r1, r19, r0
20025b84:	ea610004 	lwi	r19, r1, 4
20025b88:	ea810008 	lwi	r20, r1, 8
20025b8c:	3021000c 	addik	r1, r1, 12
20025b90:	b60f0008 	rtsd	r15, 8
20025b94:	80000000 	or	r0, r0, r0

20025b98 <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20025b98:	3021fff4 	addik	r1, r1, -12
20025b9c:	fa610004 	swi	r19, r1, 4
20025ba0:	fa810008 	swi	r20, r1, 8
20025ba4:	12610000 	addk	r19, r1, r0
20025ba8:	96808000 	mfs	r20, rpc
20025bac:	b000dffd 	imm	-8195
20025bb0:	3294bdb4 	addik	r20, r20, -16972
20025bb4:	f8b30010 	swi	r5, r19, 16
20025bb8:	f8d30014 	swi	r6, r19, 20
20025bbc:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20025bc0:	e8730010 	lwi	r3, r19, 16
20025bc4:	e8630010 	lwi	r3, r3, 16
20025bc8:	e8830000 	lwi	r4, r3, 0
20025bcc:	e8730010 	lwi	r3, r19, 16
20025bd0:	e8a3000c 	lwi	r5, r3, 12
20025bd4:	e8730014 	lwi	r3, r19, 20
20025bd8:	64630402 	bslli	r3, r3, 2
20025bdc:	10651800 	addk	r3, r5, r3
20025be0:	e8630000 	lwi	r3, r3, 0
20025be4:	14a32000 	rsubk	r5, r3, r4
20025be8:	30600001 	addik	r3, r0, 1
20025bec:	e8930018 	lwi	r4, r19, 24
20025bf0:	16442803 	cmpu	r18, r4, r5
20025bf4:	bcb20008 	bgei	r18, 8		// 20025bfc
20025bf8:	10600000 	addk	r3, r0, r0
20025bfc:	a46300ff 	andi	r3, r3, 255
}
20025c00:	10330000 	addk	r1, r19, r0
20025c04:	ea610004 	lwi	r19, r1, 4
20025c08:	ea810008 	lwi	r20, r1, 8
20025c0c:	3021000c 	addik	r1, r1, 12
20025c10:	b60f0008 	rtsd	r15, 8
20025c14:	80000000 	or	r0, r0, r0

20025c18 <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20025c18:	3021fff4 	addik	r1, r1, -12
20025c1c:	fa610004 	swi	r19, r1, 4
20025c20:	fa810008 	swi	r20, r1, 8
20025c24:	12610000 	addk	r19, r1, r0
20025c28:	96808000 	mfs	r20, rpc
20025c2c:	b000dffd 	imm	-8195
20025c30:	3294bd34 	addik	r20, r20, -17100
20025c34:	f8b30010 	swi	r5, r19, 16
20025c38:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20025c3c:	e8730010 	lwi	r3, r19, 16
20025c40:	e8630010 	lwi	r3, r3, 16
20025c44:	e8830000 	lwi	r4, r3, 0
20025c48:	e8730010 	lwi	r3, r19, 16
20025c4c:	e8a3000c 	lwi	r5, r3, 12
20025c50:	e8730014 	lwi	r3, r19, 20
20025c54:	64630402 	bslli	r3, r3, 2
20025c58:	10651800 	addk	r3, r5, r3
20025c5c:	e8630000 	lwi	r3, r3, 0
20025c60:	14632000 	rsubk	r3, r3, r4
}
20025c64:	10330000 	addk	r1, r19, r0
20025c68:	ea610004 	lwi	r19, r1, 4
20025c6c:	ea810008 	lwi	r20, r1, 8
20025c70:	3021000c 	addik	r1, r1, 12
20025c74:	b60f0008 	rtsd	r15, 8
20025c78:	80000000 	or	r0, r0, r0

20025c7c <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20025c7c:	3021fff0 	addik	r1, r1, -16
20025c80:	fa610008 	swi	r19, r1, 8
20025c84:	fa81000c 	swi	r20, r1, 12
20025c88:	12610000 	addk	r19, r1, r0
20025c8c:	96808000 	mfs	r20, rpc
20025c90:	b000dffd 	imm	-8195
20025c94:	3294bcd0 	addik	r20, r20, -17200
20025c98:	f8b30014 	swi	r5, r19, 20
20025c9c:	f8d30018 	swi	r6, r19, 24
20025ca0:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20025ca4:	f8130004 	swi	r0, r19, 4
20025ca8:	b800005c 	bri	92		// 20025d04
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20025cac:	e8730014 	lwi	r3, r19, 20
20025cb0:	e8830000 	lwi	r4, r3, 0
20025cb4:	e8730014 	lwi	r3, r19, 20
20025cb8:	e8a3000c 	lwi	r5, r3, 12
20025cbc:	e8730004 	lwi	r3, r19, 4
20025cc0:	64630402 	bslli	r3, r3, 2
20025cc4:	10651800 	addk	r3, r5, r3
20025cc8:	e8a30000 	lwi	r5, r3, 0
20025ccc:	e8730014 	lwi	r3, r19, 20
20025cd0:	e8630010 	lwi	r3, r3, 16
20025cd4:	e8630000 	lwi	r3, r3, 0
20025cd8:	14632800 	rsubk	r3, r3, r5
20025cdc:	10641800 	addk	r3, r4, r3
20025ce0:	30830001 	addik	r4, r3, 1
20025ce4:	e873001c 	lwi	r3, r19, 28
20025ce8:	16441803 	cmpu	r18, r4, r3
20025cec:	bc52000c 	blti	r18, 12		// 20025cf8
            return 0;
20025cf0:	10600000 	addk	r3, r0, r0
20025cf4:	b8000024 	bri	36		// 20025d18
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20025cf8:	e8730004 	lwi	r3, r19, 4
20025cfc:	30630001 	addik	r3, r3, 1
20025d00:	f8730004 	swi	r3, r19, 4
20025d04:	e8930004 	lwi	r4, r19, 4
20025d08:	e8730018 	lwi	r3, r19, 24
20025d0c:	16432003 	cmpu	r18, r3, r4
20025d10:	bc52ff9c 	blti	r18, -100		// 20025cac
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20025d14:	30600001 	addik	r3, r0, 1
}
20025d18:	10330000 	addk	r1, r19, r0
20025d1c:	ea610008 	lwi	r19, r1, 8
20025d20:	ea81000c 	lwi	r20, r1, 12
20025d24:	30210010 	addik	r1, r1, 16
20025d28:	b60f0008 	rtsd	r15, 8
20025d2c:	80000000 	or	r0, r0, r0

20025d30 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20025d30:	3021ffe8 	addik	r1, r1, -24
20025d34:	fa610010 	swi	r19, r1, 16
20025d38:	fa810014 	swi	r20, r1, 20
20025d3c:	12610000 	addk	r19, r1, r0
20025d40:	96808000 	mfs	r20, rpc
20025d44:	b000dffd 	imm	-8195
20025d48:	3294bc1c 	addik	r20, r20, -17380
20025d4c:	f8b3001c 	swi	r5, r19, 28
20025d50:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20025d54:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20025d58:	f8130004 	swi	r0, r19, 4
20025d5c:	b8000054 	bri	84		// 20025db0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20025d60:	e873001c 	lwi	r3, r19, 28
20025d64:	e8630010 	lwi	r3, r3, 16
20025d68:	e8830000 	lwi	r4, r3, 0
20025d6c:	e873001c 	lwi	r3, r19, 28
20025d70:	e8a3000c 	lwi	r5, r3, 12
20025d74:	e8730004 	lwi	r3, r19, 4
20025d78:	64630402 	bslli	r3, r3, 2
20025d7c:	10651800 	addk	r3, r5, r3
20025d80:	e8630000 	lwi	r3, r3, 0
20025d84:	14632000 	rsubk	r3, r3, r4
20025d88:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20025d8c:	e8930008 	lwi	r4, r19, 8
20025d90:	e873000c 	lwi	r3, r19, 12
20025d94:	16441803 	cmpu	r18, r4, r3
20025d98:	bcb20008 	bgei	r18, 8		// 20025da0
20025d9c:	10640000 	addk	r3, r4, r0
20025da0:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20025da4:	e8730004 	lwi	r3, r19, 4
20025da8:	30630001 	addik	r3, r3, 1
20025dac:	f8730004 	swi	r3, r19, 4
20025db0:	e8930004 	lwi	r4, r19, 4
20025db4:	e8730020 	lwi	r3, r19, 32
20025db8:	16432003 	cmpu	r18, r3, r4
20025dbc:	bc52ffa4 	blti	r18, -92		// 20025d60
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20025dc0:	e873001c 	lwi	r3, r19, 28
20025dc4:	e8830000 	lwi	r4, r3, 0
20025dc8:	e8730008 	lwi	r3, r19, 8
20025dcc:	14632000 	rsubk	r3, r3, r4
}
20025dd0:	10330000 	addk	r1, r19, r0
20025dd4:	ea610010 	lwi	r19, r1, 16
20025dd8:	ea810014 	lwi	r20, r1, 20
20025ddc:	30210018 	addik	r1, r1, 24
20025de0:	b60f0008 	rtsd	r15, 8
20025de4:	80000000 	or	r0, r0, r0

20025de8 <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20025de8:	3021fff0 	addik	r1, r1, -16
20025dec:	fa610008 	swi	r19, r1, 8
20025df0:	fa81000c 	swi	r20, r1, 12
20025df4:	12610000 	addk	r19, r1, r0
20025df8:	96808000 	mfs	r20, rpc
20025dfc:	b000dffd 	imm	-8195
20025e00:	3294bb64 	addik	r20, r20, -17564
20025e04:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20025e08:	e8730014 	lwi	r3, r19, 20
20025e0c:	e8630010 	lwi	r3, r3, 16
20025e10:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20025e14:	f8130004 	swi	r0, r19, 4
20025e18:	b8000028 	bri	40		// 20025e40
        fifo->read_inds[i] = 0;
20025e1c:	e8730014 	lwi	r3, r19, 20
20025e20:	e883000c 	lwi	r4, r3, 12
20025e24:	e8730004 	lwi	r3, r19, 4
20025e28:	64630402 	bslli	r3, r3, 2
20025e2c:	10641800 	addk	r3, r4, r3
20025e30:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20025e34:	e8730004 	lwi	r3, r19, 4
20025e38:	30630001 	addik	r3, r3, 1
20025e3c:	f8730004 	swi	r3, r19, 4
20025e40:	e8730014 	lwi	r3, r19, 20
20025e44:	e8830008 	lwi	r4, r3, 8
20025e48:	e8730004 	lwi	r3, r19, 4
20025e4c:	16441803 	cmpu	r18, r4, r3
20025e50:	bc52ffcc 	blti	r18, -52		// 20025e1c
        fifo->read_inds[i] = 0;
    }
}
20025e54:	10330000 	addk	r1, r19, r0
20025e58:	ea610008 	lwi	r19, r1, 8
20025e5c:	ea81000c 	lwi	r20, r1, 12
20025e60:	30210010 	addik	r1, r1, 16
20025e64:	b60f0008 	rtsd	r15, 8
20025e68:	80000000 	or	r0, r0, r0

20025e6c <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20025e6c:	3021fff0 	addik	r1, r1, -16
20025e70:	fa610008 	swi	r19, r1, 8
20025e74:	fa81000c 	swi	r20, r1, 12
20025e78:	12610000 	addk	r19, r1, r0
20025e7c:	96808000 	mfs	r20, rpc
20025e80:	b000dffd 	imm	-8195
20025e84:	3294bae0 	addik	r20, r20, -17696
20025e88:	f8b30014 	swi	r5, r19, 20
20025e8c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20025e90:	e8730014 	lwi	r3, r19, 20
20025e94:	e8830004 	lwi	r4, r3, 4
20025e98:	e8730014 	lwi	r3, r19, 20
20025e9c:	e8a3000c 	lwi	r5, r3, 12
20025ea0:	e8730018 	lwi	r3, r19, 24
20025ea4:	64630402 	bslli	r3, r3, 2
20025ea8:	10651800 	addk	r3, r5, r3
20025eac:	e8a30000 	lwi	r5, r3, 0
20025eb0:	e8730014 	lwi	r3, r19, 20
20025eb4:	e8630000 	lwi	r3, r3, 0
20025eb8:	3063ffff 	addik	r3, r3, -1
20025ebc:	84651800 	and	r3, r5, r3
20025ec0:	64630402 	bslli	r3, r3, 2
20025ec4:	10641800 	addk	r3, r4, r3
20025ec8:	e8630000 	lwi	r3, r3, 0
20025ecc:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20025ed0:	e8730014 	lwi	r3, r19, 20
20025ed4:	e883000c 	lwi	r4, r3, 12
20025ed8:	e8730018 	lwi	r3, r19, 24
20025edc:	64630402 	bslli	r3, r3, 2
20025ee0:	10641800 	addk	r3, r4, r3
20025ee4:	e8830000 	lwi	r4, r3, 0
20025ee8:	30840001 	addik	r4, r4, 1
20025eec:	f8830000 	swi	r4, r3, 0
    return value;
20025ef0:	e8730004 	lwi	r3, r19, 4
}
20025ef4:	10330000 	addk	r1, r19, r0
20025ef8:	ea610008 	lwi	r19, r1, 8
20025efc:	ea81000c 	lwi	r20, r1, 12
20025f00:	30210010 	addik	r1, r1, 16
20025f04:	b60f0008 	rtsd	r15, 8
20025f08:	80000000 	or	r0, r0, r0

20025f0c <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20025f0c:	3021fff4 	addik	r1, r1, -12
20025f10:	fa610004 	swi	r19, r1, 4
20025f14:	fa810008 	swi	r20, r1, 8
20025f18:	12610000 	addk	r19, r1, r0
20025f1c:	96808000 	mfs	r20, rpc
20025f20:	b000dffd 	imm	-8195
20025f24:	3294ba40 	addik	r20, r20, -17856
20025f28:	f8b30010 	swi	r5, r19, 16
20025f2c:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20025f30:	e8730010 	lwi	r3, r19, 16
20025f34:	e8830004 	lwi	r4, r3, 4
20025f38:	e8730010 	lwi	r3, r19, 16
20025f3c:	e8630010 	lwi	r3, r3, 16
20025f40:	e8a30000 	lwi	r5, r3, 0
20025f44:	e8730010 	lwi	r3, r19, 16
20025f48:	e8630000 	lwi	r3, r3, 0
20025f4c:	3063ffff 	addik	r3, r3, -1
20025f50:	84651800 	and	r3, r5, r3
20025f54:	64630402 	bslli	r3, r3, 2
20025f58:	10641800 	addk	r3, r4, r3
20025f5c:	e8930014 	lwi	r4, r19, 20
20025f60:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20025f64:	e8730010 	lwi	r3, r19, 16
20025f68:	e8630010 	lwi	r3, r3, 16
20025f6c:	e8830000 	lwi	r4, r3, 0
20025f70:	30840001 	addik	r4, r4, 1
20025f74:	f8830000 	swi	r4, r3, 0
}
20025f78:	10330000 	addk	r1, r19, r0
20025f7c:	ea610004 	lwi	r19, r1, 4
20025f80:	ea810008 	lwi	r20, r1, 8
20025f84:	3021000c 	addik	r1, r1, 12
20025f88:	b60f0008 	rtsd	r15, 8
20025f8c:	80000000 	or	r0, r0, r0

20025f90 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20025f90:	3021fff4 	addik	r1, r1, -12
20025f94:	fa610004 	swi	r19, r1, 4
20025f98:	fa810008 	swi	r20, r1, 8
20025f9c:	12610000 	addk	r19, r1, r0
20025fa0:	96808000 	mfs	r20, rpc
20025fa4:	b000dffd 	imm	-8195
20025fa8:	3294b9bc 	addik	r20, r20, -17988
20025fac:	f8b30010 	swi	r5, r19, 16
20025fb0:	f8d30014 	swi	r6, r19, 20
20025fb4:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20025fb8:	e8730010 	lwi	r3, r19, 16
20025fbc:	e8630010 	lwi	r3, r3, 16
20025fc0:	e8830000 	lwi	r4, r3, 0
20025fc4:	e8730010 	lwi	r3, r19, 16
20025fc8:	e8a3000c 	lwi	r5, r3, 12
20025fcc:	e8730014 	lwi	r3, r19, 20
20025fd0:	64630402 	bslli	r3, r3, 2
20025fd4:	10651800 	addk	r3, r5, r3
20025fd8:	e8630000 	lwi	r3, r3, 0
20025fdc:	14a32000 	rsubk	r5, r3, r4
20025fe0:	30600001 	addik	r3, r0, 1
20025fe4:	e8930018 	lwi	r4, r19, 24
20025fe8:	16442803 	cmpu	r18, r4, r5
20025fec:	bcb20008 	bgei	r18, 8		// 20025ff4
20025ff0:	10600000 	addk	r3, r0, r0
20025ff4:	a46300ff 	andi	r3, r3, 255
}
20025ff8:	10330000 	addk	r1, r19, r0
20025ffc:	ea610004 	lwi	r19, r1, 4
20026000:	ea810008 	lwi	r20, r1, 8
20026004:	3021000c 	addik	r1, r1, 12
20026008:	b60f0008 	rtsd	r15, 8
2002600c:	80000000 	or	r0, r0, r0

20026010 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20026010:	3021fff4 	addik	r1, r1, -12
20026014:	fa610004 	swi	r19, r1, 4
20026018:	fa810008 	swi	r20, r1, 8
2002601c:	12610000 	addk	r19, r1, r0
20026020:	96808000 	mfs	r20, rpc
20026024:	b000dffd 	imm	-8195
20026028:	3294b93c 	addik	r20, r20, -18116
2002602c:	f8b30010 	swi	r5, r19, 16
20026030:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20026034:	e8730010 	lwi	r3, r19, 16
20026038:	e8630010 	lwi	r3, r3, 16
2002603c:	e8830000 	lwi	r4, r3, 0
20026040:	e8730010 	lwi	r3, r19, 16
20026044:	e8a3000c 	lwi	r5, r3, 12
20026048:	e8730014 	lwi	r3, r19, 20
2002604c:	64630402 	bslli	r3, r3, 2
20026050:	10651800 	addk	r3, r5, r3
20026054:	e8630000 	lwi	r3, r3, 0
20026058:	14632000 	rsubk	r3, r3, r4
}
2002605c:	10330000 	addk	r1, r19, r0
20026060:	ea610004 	lwi	r19, r1, 4
20026064:	ea810008 	lwi	r20, r1, 8
20026068:	3021000c 	addik	r1, r1, 12
2002606c:	b60f0008 	rtsd	r15, 8
20026070:	80000000 	or	r0, r0, r0

20026074 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20026074:	3021fff0 	addik	r1, r1, -16
20026078:	fa610008 	swi	r19, r1, 8
2002607c:	fa81000c 	swi	r20, r1, 12
20026080:	12610000 	addk	r19, r1, r0
20026084:	96808000 	mfs	r20, rpc
20026088:	b000dffd 	imm	-8195
2002608c:	3294b8d8 	addik	r20, r20, -18216
20026090:	f8b30014 	swi	r5, r19, 20
20026094:	f8d30018 	swi	r6, r19, 24
20026098:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002609c:	f8130004 	swi	r0, r19, 4
200260a0:	b800005c 	bri	92		// 200260fc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200260a4:	e8730014 	lwi	r3, r19, 20
200260a8:	e8830000 	lwi	r4, r3, 0
200260ac:	e8730014 	lwi	r3, r19, 20
200260b0:	e8a3000c 	lwi	r5, r3, 12
200260b4:	e8730004 	lwi	r3, r19, 4
200260b8:	64630402 	bslli	r3, r3, 2
200260bc:	10651800 	addk	r3, r5, r3
200260c0:	e8a30000 	lwi	r5, r3, 0
200260c4:	e8730014 	lwi	r3, r19, 20
200260c8:	e8630010 	lwi	r3, r3, 16
200260cc:	e8630000 	lwi	r3, r3, 0
200260d0:	14632800 	rsubk	r3, r3, r5
200260d4:	10641800 	addk	r3, r4, r3
200260d8:	30830001 	addik	r4, r3, 1
200260dc:	e873001c 	lwi	r3, r19, 28
200260e0:	16441803 	cmpu	r18, r4, r3
200260e4:	bc52000c 	blti	r18, 12		// 200260f0
            return 0;
200260e8:	10600000 	addk	r3, r0, r0
200260ec:	b8000024 	bri	36		// 20026110
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200260f0:	e8730004 	lwi	r3, r19, 4
200260f4:	30630001 	addik	r3, r3, 1
200260f8:	f8730004 	swi	r3, r19, 4
200260fc:	e8930004 	lwi	r4, r19, 4
20026100:	e8730018 	lwi	r3, r19, 24
20026104:	16432003 	cmpu	r18, r3, r4
20026108:	bc52ff9c 	blti	r18, -100		// 200260a4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002610c:	30600001 	addik	r3, r0, 1
}
20026110:	10330000 	addk	r1, r19, r0
20026114:	ea610008 	lwi	r19, r1, 8
20026118:	ea81000c 	lwi	r20, r1, 12
2002611c:	30210010 	addik	r1, r1, 16
20026120:	b60f0008 	rtsd	r15, 8
20026124:	80000000 	or	r0, r0, r0

20026128 <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20026128:	3021ffe8 	addik	r1, r1, -24
2002612c:	fa610010 	swi	r19, r1, 16
20026130:	fa810014 	swi	r20, r1, 20
20026134:	12610000 	addk	r19, r1, r0
20026138:	96808000 	mfs	r20, rpc
2002613c:	b000dffd 	imm	-8195
20026140:	3294b824 	addik	r20, r20, -18396
20026144:	f8b3001c 	swi	r5, r19, 28
20026148:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002614c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20026150:	f8130004 	swi	r0, r19, 4
20026154:	b8000054 	bri	84		// 200261a8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20026158:	e873001c 	lwi	r3, r19, 28
2002615c:	e8630010 	lwi	r3, r3, 16
20026160:	e8830000 	lwi	r4, r3, 0
20026164:	e873001c 	lwi	r3, r19, 28
20026168:	e8a3000c 	lwi	r5, r3, 12
2002616c:	e8730004 	lwi	r3, r19, 4
20026170:	64630402 	bslli	r3, r3, 2
20026174:	10651800 	addk	r3, r5, r3
20026178:	e8630000 	lwi	r3, r3, 0
2002617c:	14632000 	rsubk	r3, r3, r4
20026180:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20026184:	e8930008 	lwi	r4, r19, 8
20026188:	e873000c 	lwi	r3, r19, 12
2002618c:	16441803 	cmpu	r18, r4, r3
20026190:	bcb20008 	bgei	r18, 8		// 20026198
20026194:	10640000 	addk	r3, r4, r0
20026198:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002619c:	e8730004 	lwi	r3, r19, 4
200261a0:	30630001 	addik	r3, r3, 1
200261a4:	f8730004 	swi	r3, r19, 4
200261a8:	e8930004 	lwi	r4, r19, 4
200261ac:	e8730020 	lwi	r3, r19, 32
200261b0:	16432003 	cmpu	r18, r3, r4
200261b4:	bc52ffa4 	blti	r18, -92		// 20026158
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200261b8:	e873001c 	lwi	r3, r19, 28
200261bc:	e8830000 	lwi	r4, r3, 0
200261c0:	e8730008 	lwi	r3, r19, 8
200261c4:	14632000 	rsubk	r3, r3, r4
}
200261c8:	10330000 	addk	r1, r19, r0
200261cc:	ea610010 	lwi	r19, r1, 16
200261d0:	ea810014 	lwi	r20, r1, 20
200261d4:	30210018 	addik	r1, r1, 24
200261d8:	b60f0008 	rtsd	r15, 8
200261dc:	80000000 	or	r0, r0, r0

200261e0 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200261e0:	3021fff0 	addik	r1, r1, -16
200261e4:	fa610008 	swi	r19, r1, 8
200261e8:	fa81000c 	swi	r20, r1, 12
200261ec:	12610000 	addk	r19, r1, r0
200261f0:	96808000 	mfs	r20, rpc
200261f4:	b000dffd 	imm	-8195
200261f8:	3294b76c 	addik	r20, r20, -18580
200261fc:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20026200:	e8730014 	lwi	r3, r19, 20
20026204:	e8630010 	lwi	r3, r3, 16
20026208:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002620c:	f8130004 	swi	r0, r19, 4
20026210:	b8000028 	bri	40		// 20026238
        fifo->read_inds[i] = 0;
20026214:	e8730014 	lwi	r3, r19, 20
20026218:	e883000c 	lwi	r4, r3, 12
2002621c:	e8730004 	lwi	r3, r19, 4
20026220:	64630402 	bslli	r3, r3, 2
20026224:	10641800 	addk	r3, r4, r3
20026228:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002622c:	e8730004 	lwi	r3, r19, 4
20026230:	30630001 	addik	r3, r3, 1
20026234:	f8730004 	swi	r3, r19, 4
20026238:	e8730014 	lwi	r3, r19, 20
2002623c:	e8830008 	lwi	r4, r3, 8
20026240:	e8730004 	lwi	r3, r19, 4
20026244:	16441803 	cmpu	r18, r4, r3
20026248:	bc52ffcc 	blti	r18, -52		// 20026214
        fifo->read_inds[i] = 0;
    }
}
2002624c:	10330000 	addk	r1, r19, r0
20026250:	ea610008 	lwi	r19, r1, 8
20026254:	ea81000c 	lwi	r20, r1, 12
20026258:	30210010 	addik	r1, r1, 16
2002625c:	b60f0008 	rtsd	r15, 8
20026260:	80000000 	or	r0, r0, r0

20026264 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20026264:	3021ffec 	addik	r1, r1, -20
20026268:	fa61000c 	swi	r19, r1, 12
2002626c:	fa810010 	swi	r20, r1, 16
20026270:	12610000 	addk	r19, r1, r0
20026274:	96808000 	mfs	r20, rpc
20026278:	b000dffd 	imm	-8195
2002627c:	3294b6e8 	addik	r20, r20, -18712
20026280:	f8b30018 	swi	r5, r19, 24
20026284:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20026288:	e8730018 	lwi	r3, r19, 24
2002628c:	e8830004 	lwi	r4, r3, 4
20026290:	e8730018 	lwi	r3, r19, 24
20026294:	e8a3000c 	lwi	r5, r3, 12
20026298:	e873001c 	lwi	r3, r19, 28
2002629c:	64630402 	bslli	r3, r3, 2
200262a0:	10651800 	addk	r3, r5, r3
200262a4:	e8a30000 	lwi	r5, r3, 0
200262a8:	e8730018 	lwi	r3, r19, 24
200262ac:	e8630000 	lwi	r3, r3, 0
200262b0:	3063ffff 	addik	r3, r3, -1
200262b4:	84651800 	and	r3, r5, r3
200262b8:	64630403 	bslli	r3, r3, 3
200262bc:	10641800 	addk	r3, r4, r3
200262c0:	e8830000 	lwi	r4, r3, 0
200262c4:	e8a30004 	lwi	r5, r3, 4
200262c8:	f8930004 	swi	r4, r19, 4
200262cc:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
200262d0:	e8730018 	lwi	r3, r19, 24
200262d4:	e883000c 	lwi	r4, r3, 12
200262d8:	e873001c 	lwi	r3, r19, 28
200262dc:	64630402 	bslli	r3, r3, 2
200262e0:	10641800 	addk	r3, r4, r3
200262e4:	e8830000 	lwi	r4, r3, 0
200262e8:	30840001 	addik	r4, r4, 1
200262ec:	f8830000 	swi	r4, r3, 0
    return value;
200262f0:	e8930004 	lwi	r4, r19, 4
200262f4:	e8b30008 	lwi	r5, r19, 8
}
200262f8:	10640000 	addk	r3, r4, r0
200262fc:	10850000 	addk	r4, r5, r0
20026300:	10330000 	addk	r1, r19, r0
20026304:	ea61000c 	lwi	r19, r1, 12
20026308:	ea810010 	lwi	r20, r1, 16
2002630c:	30210014 	addik	r1, r1, 20
20026310:	b60f0008 	rtsd	r15, 8
20026314:	80000000 	or	r0, r0, r0

20026318 <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20026318:	3021fff4 	addik	r1, r1, -12
2002631c:	fa610004 	swi	r19, r1, 4
20026320:	fa810008 	swi	r20, r1, 8
20026324:	12610000 	addk	r19, r1, r0
20026328:	96808000 	mfs	r20, rpc
2002632c:	b000dffd 	imm	-8195
20026330:	3294b634 	addik	r20, r20, -18892
20026334:	f8b30010 	swi	r5, r19, 16
20026338:	f8d30014 	swi	r6, r19, 20
2002633c:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20026340:	e8730010 	lwi	r3, r19, 16
20026344:	e8830004 	lwi	r4, r3, 4
20026348:	e8730010 	lwi	r3, r19, 16
2002634c:	e8630010 	lwi	r3, r3, 16
20026350:	e8a30000 	lwi	r5, r3, 0
20026354:	e8730010 	lwi	r3, r19, 16
20026358:	e8630000 	lwi	r3, r3, 0
2002635c:	3063ffff 	addik	r3, r3, -1
20026360:	84651800 	and	r3, r5, r3
20026364:	64630403 	bslli	r3, r3, 3
20026368:	10641800 	addk	r3, r4, r3
2002636c:	e8930014 	lwi	r4, r19, 20
20026370:	e8b30018 	lwi	r5, r19, 24
20026374:	f8830000 	swi	r4, r3, 0
20026378:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2002637c:	e8730010 	lwi	r3, r19, 16
20026380:	e8630010 	lwi	r3, r3, 16
20026384:	e8830000 	lwi	r4, r3, 0
20026388:	30840001 	addik	r4, r4, 1
2002638c:	f8830000 	swi	r4, r3, 0
}
20026390:	10330000 	addk	r1, r19, r0
20026394:	ea610004 	lwi	r19, r1, 4
20026398:	ea810008 	lwi	r20, r1, 8
2002639c:	3021000c 	addik	r1, r1, 12
200263a0:	b60f0008 	rtsd	r15, 8
200263a4:	80000000 	or	r0, r0, r0

200263a8 <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200263a8:	3021fff4 	addik	r1, r1, -12
200263ac:	fa610004 	swi	r19, r1, 4
200263b0:	fa810008 	swi	r20, r1, 8
200263b4:	12610000 	addk	r19, r1, r0
200263b8:	96808000 	mfs	r20, rpc
200263bc:	b000dffd 	imm	-8195
200263c0:	3294b5a4 	addik	r20, r20, -19036
200263c4:	f8b30010 	swi	r5, r19, 16
200263c8:	f8d30014 	swi	r6, r19, 20
200263cc:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200263d0:	e8730010 	lwi	r3, r19, 16
200263d4:	e8630010 	lwi	r3, r3, 16
200263d8:	e8830000 	lwi	r4, r3, 0
200263dc:	e8730010 	lwi	r3, r19, 16
200263e0:	e8a3000c 	lwi	r5, r3, 12
200263e4:	e8730014 	lwi	r3, r19, 20
200263e8:	64630402 	bslli	r3, r3, 2
200263ec:	10651800 	addk	r3, r5, r3
200263f0:	e8630000 	lwi	r3, r3, 0
200263f4:	14a32000 	rsubk	r5, r3, r4
200263f8:	30600001 	addik	r3, r0, 1
200263fc:	e8930018 	lwi	r4, r19, 24
20026400:	16442803 	cmpu	r18, r4, r5
20026404:	bcb20008 	bgei	r18, 8		// 2002640c
20026408:	10600000 	addk	r3, r0, r0
2002640c:	a46300ff 	andi	r3, r3, 255
}
20026410:	10330000 	addk	r1, r19, r0
20026414:	ea610004 	lwi	r19, r1, 4
20026418:	ea810008 	lwi	r20, r1, 8
2002641c:	3021000c 	addik	r1, r1, 12
20026420:	b60f0008 	rtsd	r15, 8
20026424:	80000000 	or	r0, r0, r0

20026428 <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20026428:	3021fff4 	addik	r1, r1, -12
2002642c:	fa610004 	swi	r19, r1, 4
20026430:	fa810008 	swi	r20, r1, 8
20026434:	12610000 	addk	r19, r1, r0
20026438:	96808000 	mfs	r20, rpc
2002643c:	b000dffd 	imm	-8195
20026440:	3294b524 	addik	r20, r20, -19164
20026444:	f8b30010 	swi	r5, r19, 16
20026448:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002644c:	e8730010 	lwi	r3, r19, 16
20026450:	e8630010 	lwi	r3, r3, 16
20026454:	e8830000 	lwi	r4, r3, 0
20026458:	e8730010 	lwi	r3, r19, 16
2002645c:	e8a3000c 	lwi	r5, r3, 12
20026460:	e8730014 	lwi	r3, r19, 20
20026464:	64630402 	bslli	r3, r3, 2
20026468:	10651800 	addk	r3, r5, r3
2002646c:	e8630000 	lwi	r3, r3, 0
20026470:	14632000 	rsubk	r3, r3, r4
}
20026474:	10330000 	addk	r1, r19, r0
20026478:	ea610004 	lwi	r19, r1, 4
2002647c:	ea810008 	lwi	r20, r1, 8
20026480:	3021000c 	addik	r1, r1, 12
20026484:	b60f0008 	rtsd	r15, 8
20026488:	80000000 	or	r0, r0, r0

2002648c <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002648c:	3021fff0 	addik	r1, r1, -16
20026490:	fa610008 	swi	r19, r1, 8
20026494:	fa81000c 	swi	r20, r1, 12
20026498:	12610000 	addk	r19, r1, r0
2002649c:	96808000 	mfs	r20, rpc
200264a0:	b000dffd 	imm	-8195
200264a4:	3294b4c0 	addik	r20, r20, -19264
200264a8:	f8b30014 	swi	r5, r19, 20
200264ac:	f8d30018 	swi	r6, r19, 24
200264b0:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200264b4:	f8130004 	swi	r0, r19, 4
200264b8:	b800005c 	bri	92		// 20026514
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200264bc:	e8730014 	lwi	r3, r19, 20
200264c0:	e8830000 	lwi	r4, r3, 0
200264c4:	e8730014 	lwi	r3, r19, 20
200264c8:	e8a3000c 	lwi	r5, r3, 12
200264cc:	e8730004 	lwi	r3, r19, 4
200264d0:	64630402 	bslli	r3, r3, 2
200264d4:	10651800 	addk	r3, r5, r3
200264d8:	e8a30000 	lwi	r5, r3, 0
200264dc:	e8730014 	lwi	r3, r19, 20
200264e0:	e8630010 	lwi	r3, r3, 16
200264e4:	e8630000 	lwi	r3, r3, 0
200264e8:	14632800 	rsubk	r3, r3, r5
200264ec:	10641800 	addk	r3, r4, r3
200264f0:	30830001 	addik	r4, r3, 1
200264f4:	e873001c 	lwi	r3, r19, 28
200264f8:	16441803 	cmpu	r18, r4, r3
200264fc:	bc52000c 	blti	r18, 12		// 20026508
            return 0;
20026500:	10600000 	addk	r3, r0, r0
20026504:	b8000024 	bri	36		// 20026528
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20026508:	e8730004 	lwi	r3, r19, 4
2002650c:	30630001 	addik	r3, r3, 1
20026510:	f8730004 	swi	r3, r19, 4
20026514:	e8930004 	lwi	r4, r19, 4
20026518:	e8730018 	lwi	r3, r19, 24
2002651c:	16432003 	cmpu	r18, r3, r4
20026520:	bc52ff9c 	blti	r18, -100		// 200264bc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20026524:	30600001 	addik	r3, r0, 1
}
20026528:	10330000 	addk	r1, r19, r0
2002652c:	ea610008 	lwi	r19, r1, 8
20026530:	ea81000c 	lwi	r20, r1, 12
20026534:	30210010 	addik	r1, r1, 16
20026538:	b60f0008 	rtsd	r15, 8
2002653c:	80000000 	or	r0, r0, r0

20026540 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20026540:	3021ffe8 	addik	r1, r1, -24
20026544:	fa610010 	swi	r19, r1, 16
20026548:	fa810014 	swi	r20, r1, 20
2002654c:	12610000 	addk	r19, r1, r0
20026550:	96808000 	mfs	r20, rpc
20026554:	b000dffd 	imm	-8195
20026558:	3294b40c 	addik	r20, r20, -19444
2002655c:	f8b3001c 	swi	r5, r19, 28
20026560:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20026564:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20026568:	f8130004 	swi	r0, r19, 4
2002656c:	b8000054 	bri	84		// 200265c0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20026570:	e873001c 	lwi	r3, r19, 28
20026574:	e8630010 	lwi	r3, r3, 16
20026578:	e8830000 	lwi	r4, r3, 0
2002657c:	e873001c 	lwi	r3, r19, 28
20026580:	e8a3000c 	lwi	r5, r3, 12
20026584:	e8730004 	lwi	r3, r19, 4
20026588:	64630402 	bslli	r3, r3, 2
2002658c:	10651800 	addk	r3, r5, r3
20026590:	e8630000 	lwi	r3, r3, 0
20026594:	14632000 	rsubk	r3, r3, r4
20026598:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002659c:	e8930008 	lwi	r4, r19, 8
200265a0:	e873000c 	lwi	r3, r19, 12
200265a4:	16441803 	cmpu	r18, r4, r3
200265a8:	bcb20008 	bgei	r18, 8		// 200265b0
200265ac:	10640000 	addk	r3, r4, r0
200265b0:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200265b4:	e8730004 	lwi	r3, r19, 4
200265b8:	30630001 	addik	r3, r3, 1
200265bc:	f8730004 	swi	r3, r19, 4
200265c0:	e8930004 	lwi	r4, r19, 4
200265c4:	e8730020 	lwi	r3, r19, 32
200265c8:	16432003 	cmpu	r18, r3, r4
200265cc:	bc52ffa4 	blti	r18, -92		// 20026570
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200265d0:	e873001c 	lwi	r3, r19, 28
200265d4:	e8830000 	lwi	r4, r3, 0
200265d8:	e8730008 	lwi	r3, r19, 8
200265dc:	14632000 	rsubk	r3, r3, r4
}
200265e0:	10330000 	addk	r1, r19, r0
200265e4:	ea610010 	lwi	r19, r1, 16
200265e8:	ea810014 	lwi	r20, r1, 20
200265ec:	30210018 	addik	r1, r1, 24
200265f0:	b60f0008 	rtsd	r15, 8
200265f4:	80000000 	or	r0, r0, r0

200265f8 <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200265f8:	3021fff0 	addik	r1, r1, -16
200265fc:	fa610008 	swi	r19, r1, 8
20026600:	fa81000c 	swi	r20, r1, 12
20026604:	12610000 	addk	r19, r1, r0
20026608:	96808000 	mfs	r20, rpc
2002660c:	b000dffd 	imm	-8195
20026610:	3294b354 	addik	r20, r20, -19628
20026614:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20026618:	e8730014 	lwi	r3, r19, 20
2002661c:	e8630010 	lwi	r3, r3, 16
20026620:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20026624:	f8130004 	swi	r0, r19, 4
20026628:	b8000028 	bri	40		// 20026650
        fifo->read_inds[i] = 0;
2002662c:	e8730014 	lwi	r3, r19, 20
20026630:	e883000c 	lwi	r4, r3, 12
20026634:	e8730004 	lwi	r3, r19, 4
20026638:	64630402 	bslli	r3, r3, 2
2002663c:	10641800 	addk	r3, r4, r3
20026640:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20026644:	e8730004 	lwi	r3, r19, 4
20026648:	30630001 	addik	r3, r3, 1
2002664c:	f8730004 	swi	r3, r19, 4
20026650:	e8730014 	lwi	r3, r19, 20
20026654:	e8830008 	lwi	r4, r3, 8
20026658:	e8730004 	lwi	r3, r19, 4
2002665c:	16441803 	cmpu	r18, r4, r3
20026660:	bc52ffcc 	blti	r18, -52		// 2002662c
        fifo->read_inds[i] = 0;
    }
}
20026664:	10330000 	addk	r1, r19, r0
20026668:	ea610008 	lwi	r19, r1, 8
2002666c:	ea81000c 	lwi	r20, r1, 12
20026670:	30210010 	addik	r1, r1, 16
20026674:	b60f0008 	rtsd	r15, 8
20026678:	80000000 	or	r0, r0, r0

2002667c <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002667c:	3021fff0 	addik	r1, r1, -16
20026680:	fa610008 	swi	r19, r1, 8
20026684:	fa81000c 	swi	r20, r1, 12
20026688:	12610000 	addk	r19, r1, r0
2002668c:	96808000 	mfs	r20, rpc
20026690:	b000dffd 	imm	-8195
20026694:	3294b2d0 	addik	r20, r20, -19760
20026698:	f8b30014 	swi	r5, r19, 20
2002669c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200266a0:	e8730014 	lwi	r3, r19, 20
200266a4:	e8830004 	lwi	r4, r3, 4
200266a8:	e8730014 	lwi	r3, r19, 20
200266ac:	e8a3000c 	lwi	r5, r3, 12
200266b0:	e8730018 	lwi	r3, r19, 24
200266b4:	64630402 	bslli	r3, r3, 2
200266b8:	10651800 	addk	r3, r5, r3
200266bc:	e8a30000 	lwi	r5, r3, 0
200266c0:	e8730014 	lwi	r3, r19, 20
200266c4:	e8630000 	lwi	r3, r3, 0
200266c8:	3063ffff 	addik	r3, r3, -1
200266cc:	84651800 	and	r3, r5, r3
200266d0:	64630402 	bslli	r3, r3, 2
200266d4:	10641800 	addk	r3, r4, r3
200266d8:	e8630000 	lwi	r3, r3, 0
200266dc:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200266e0:	e8730014 	lwi	r3, r19, 20
200266e4:	e883000c 	lwi	r4, r3, 12
200266e8:	e8730018 	lwi	r3, r19, 24
200266ec:	64630402 	bslli	r3, r3, 2
200266f0:	10641800 	addk	r3, r4, r3
200266f4:	e8830000 	lwi	r4, r3, 0
200266f8:	30840001 	addik	r4, r4, 1
200266fc:	f8830000 	swi	r4, r3, 0
    return value;
20026700:	e8730004 	lwi	r3, r19, 4
}
20026704:	10330000 	addk	r1, r19, r0
20026708:	ea610008 	lwi	r19, r1, 8
2002670c:	ea81000c 	lwi	r20, r1, 12
20026710:	30210010 	addik	r1, r1, 16
20026714:	b60f0008 	rtsd	r15, 8
20026718:	80000000 	or	r0, r0, r0

2002671c <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002671c:	3021fff4 	addik	r1, r1, -12
20026720:	fa610004 	swi	r19, r1, 4
20026724:	fa810008 	swi	r20, r1, 8
20026728:	12610000 	addk	r19, r1, r0
2002672c:	96808000 	mfs	r20, rpc
20026730:	b000dffd 	imm	-8195
20026734:	3294b230 	addik	r20, r20, -19920
20026738:	f8b30010 	swi	r5, r19, 16
2002673c:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20026740:	e8730010 	lwi	r3, r19, 16
20026744:	e8830004 	lwi	r4, r3, 4
20026748:	e8730010 	lwi	r3, r19, 16
2002674c:	e8630010 	lwi	r3, r3, 16
20026750:	e8a30000 	lwi	r5, r3, 0
20026754:	e8730010 	lwi	r3, r19, 16
20026758:	e8630000 	lwi	r3, r3, 0
2002675c:	3063ffff 	addik	r3, r3, -1
20026760:	84651800 	and	r3, r5, r3
20026764:	64630402 	bslli	r3, r3, 2
20026768:	10641800 	addk	r3, r4, r3
2002676c:	e8930014 	lwi	r4, r19, 20
20026770:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20026774:	e8730010 	lwi	r3, r19, 16
20026778:	e8630010 	lwi	r3, r3, 16
2002677c:	e8830000 	lwi	r4, r3, 0
20026780:	30840001 	addik	r4, r4, 1
20026784:	f8830000 	swi	r4, r3, 0
}
20026788:	10330000 	addk	r1, r19, r0
2002678c:	ea610004 	lwi	r19, r1, 4
20026790:	ea810008 	lwi	r20, r1, 8
20026794:	3021000c 	addik	r1, r1, 12
20026798:	b60f0008 	rtsd	r15, 8
2002679c:	80000000 	or	r0, r0, r0

200267a0 <read_BYTE>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_BYTE() {
200267a0:	3021ffdc 	addik	r1, r1, -36
200267a4:	f9e10000 	swi	r15, r1, 0
200267a8:	fa61001c 	swi	r19, r1, 28
200267ac:	fa810020 	swi	r20, r1, 32
200267b0:	12610000 	addk	r19, r1, r0
200267b4:	96808000 	mfs	r20, rpc
200267b8:	b000dffd 	imm	-8195
200267bc:	3294b1a8 	addik	r20, r20, -20056
		index_BYTE = decoder_parser_parseheaders_BYTE->read_inds[0];
200267c0:	b0000000 	imm	0
200267c4:	e8740534 	lwi	r3, r20, 1332
200267c8:	e8630000 	lwi	r3, r3, 0
200267cc:	e863000c 	lwi	r3, r3, 12
200267d0:	e8830000 	lwi	r4, r3, 0
200267d4:	b0000000 	imm	0
200267d8:	e8740558 	lwi	r3, r20, 1368
200267dc:	f8830000 	swi	r4, r3, 0
		numTokens_BYTE = index_BYTE + fifo_u8_get_num_tokens(decoder_parser_parseheaders_BYTE, 0);
200267e0:	b0000000 	imm	0
200267e4:	e8740534 	lwi	r3, r20, 1332
200267e8:	e8630000 	lwi	r3, r3, 0
200267ec:	10a30000 	addk	r5, r3, r0
200267f0:	10c00000 	addk	r6, r0, r0
200267f4:	b0000000 	imm	0
200267f8:	e8940530 	lwi	r4, r20, 1328
200267fc:	99fc2000 	brald	r15, r4
20026800:	80000000 	or	r0, r0, r0
20026804:	10830000 	addk	r4, r3, r0
20026808:	b0000000 	imm	0
2002680c:	e8740558 	lwi	r3, r20, 1368
20026810:	e8630000 	lwi	r3, r3, 0
20026814:	10841800 	addk	r4, r4, r3
20026818:	b0000000 	imm	0
2002681c:	e874055c 	lwi	r3, r20, 1372
20026820:	f8830000 	swi	r4, r3, 0
	}
20026824:	e9e10000 	lwi	r15, r1, 0
20026828:	10330000 	addk	r1, r19, r0
2002682c:	ea61001c 	lwi	r19, r1, 28
20026830:	ea810020 	lwi	r20, r1, 32
20026834:	30210024 	addik	r1, r1, 36
20026838:	b60f0008 	rtsd	r15, 8
2002683c:	80000000 	or	r0, r0, r0

20026840 <read_end_BYTE>:
	
	static void read_end_BYTE() {
20026840:	3021fff4 	addik	r1, r1, -12
20026844:	fa610004 	swi	r19, r1, 4
20026848:	fa810008 	swi	r20, r1, 8
2002684c:	12610000 	addk	r19, r1, r0
20026850:	96808000 	mfs	r20, rpc
20026854:	b000dffd 	imm	-8195
20026858:	3294b10c 	addik	r20, r20, -20212
		decoder_parser_parseheaders_BYTE->read_inds[0] = index_BYTE;
2002685c:	b0000000 	imm	0
20026860:	e8740534 	lwi	r3, r20, 1332
20026864:	e8630000 	lwi	r3, r3, 0
20026868:	e863000c 	lwi	r3, r3, 12
2002686c:	b0000000 	imm	0
20026870:	e8940558 	lwi	r4, r20, 1368
20026874:	e8840000 	lwi	r4, r4, 0
20026878:	f8830000 	swi	r4, r3, 0
	}
2002687c:	10330000 	addk	r1, r19, r0
20026880:	ea610004 	lwi	r19, r1, 4
20026884:	ea810008 	lwi	r20, r1, 8
20026888:	3021000c 	addik	r1, r1, 12
2002688c:	b60f0008 	rtsd	r15, 8
20026890:	80000000 	or	r0, r0, r0

20026894 <write_BTYPE>:

	static void write_BTYPE() {
20026894:	3021ffdc 	addik	r1, r1, -36
20026898:	f9e10000 	swi	r15, r1, 0
2002689c:	fa61001c 	swi	r19, r1, 28
200268a0:	fa810020 	swi	r20, r1, 32
200268a4:	12610000 	addk	r19, r1, r0
200268a8:	96808000 	mfs	r20, rpc
200268ac:	b000dffd 	imm	-8195
200268b0:	3294b0b4 	addik	r20, r20, -20300
		index_BTYPE = (*decoder_parser_parseheaders_BTYPE->write_ind);
200268b4:	b0000000 	imm	0
200268b8:	e8740550 	lwi	r3, r20, 1360
200268bc:	e8630000 	lwi	r3, r3, 0
200268c0:	e8630010 	lwi	r3, r3, 16
200268c4:	e8830000 	lwi	r4, r3, 0
200268c8:	b0000000 	imm	0
200268cc:	e8740560 	lwi	r3, r20, 1376
200268d0:	f8830000 	swi	r4, r3, 0
		numFree_BTYPE = index_BTYPE + fifo_i16_get_room(decoder_parser_parseheaders_BTYPE, NUM_READERS_BTYPE);
200268d4:	b0000000 	imm	0
200268d8:	e8740550 	lwi	r3, r20, 1360
200268dc:	e8630000 	lwi	r3, r3, 0
200268e0:	10a30000 	addk	r5, r3, r0
200268e4:	30c00006 	addik	r6, r0, 6
200268e8:	b0000000 	imm	0
200268ec:	e8940528 	lwi	r4, r20, 1320
200268f0:	99fc2000 	brald	r15, r4
200268f4:	80000000 	or	r0, r0, r0
200268f8:	10830000 	addk	r4, r3, r0
200268fc:	b0000000 	imm	0
20026900:	e8740560 	lwi	r3, r20, 1376
20026904:	e8630000 	lwi	r3, r3, 0
20026908:	10841800 	addk	r4, r4, r3
2002690c:	b0000000 	imm	0
20026910:	e8740564 	lwi	r3, r20, 1380
20026914:	f8830000 	swi	r4, r3, 0
	}
20026918:	e9e10000 	lwi	r15, r1, 0
2002691c:	10330000 	addk	r1, r19, r0
20026920:	ea61001c 	lwi	r19, r1, 28
20026924:	ea810020 	lwi	r20, r1, 32
20026928:	30210024 	addik	r1, r1, 36
2002692c:	b60f0008 	rtsd	r15, 8
20026930:	80000000 	or	r0, r0, r0

20026934 <write_end_BTYPE>:
	
	static void write_end_BTYPE() {
20026934:	3021fff4 	addik	r1, r1, -12
20026938:	fa610004 	swi	r19, r1, 4
2002693c:	fa810008 	swi	r20, r1, 8
20026940:	12610000 	addk	r19, r1, r0
20026944:	96808000 	mfs	r20, rpc
20026948:	b000dffd 	imm	-8195
2002694c:	3294b018 	addik	r20, r20, -20456
		(*decoder_parser_parseheaders_BTYPE->write_ind) = index_BTYPE;
20026950:	b0000000 	imm	0
20026954:	e8740550 	lwi	r3, r20, 1360
20026958:	e8630000 	lwi	r3, r3, 0
2002695c:	e8630010 	lwi	r3, r3, 16
20026960:	b0000000 	imm	0
20026964:	e8940560 	lwi	r4, r20, 1376
20026968:	e8840000 	lwi	r4, r4, 0
2002696c:	f8830000 	swi	r4, r3, 0
	}
20026970:	10330000 	addk	r1, r19, r0
20026974:	ea610004 	lwi	r19, r1, 4
20026978:	ea810008 	lwi	r20, r1, 8
2002697c:	3021000c 	addik	r1, r1, 12
20026980:	b60f0008 	rtsd	r15, 8
20026984:	80000000 	or	r0, r0, r0

20026988 <write_MV>:
	static void write_MV() {
20026988:	3021ffdc 	addik	r1, r1, -36
2002698c:	f9e10000 	swi	r15, r1, 0
20026990:	fa61001c 	swi	r19, r1, 28
20026994:	fa810020 	swi	r20, r1, 32
20026998:	12610000 	addk	r19, r1, r0
2002699c:	96808000 	mfs	r20, rpc
200269a0:	b000dffd 	imm	-8195
200269a4:	3294afc0 	addik	r20, r20, -20544
		index_MV = (*decoder_parser_parseheaders_MV->write_ind);
200269a8:	b0000000 	imm	0
200269ac:	e8740544 	lwi	r3, r20, 1348
200269b0:	e8630000 	lwi	r3, r3, 0
200269b4:	e8630010 	lwi	r3, r3, 16
200269b8:	e8830000 	lwi	r4, r3, 0
200269bc:	b0000000 	imm	0
200269c0:	e8740568 	lwi	r3, r20, 1384
200269c4:	f8830000 	swi	r4, r3, 0
		numFree_MV = index_MV + fifo_i16_get_room(decoder_parser_parseheaders_MV, NUM_READERS_MV);
200269c8:	b0000000 	imm	0
200269cc:	e8740544 	lwi	r3, r20, 1348
200269d0:	e8630000 	lwi	r3, r3, 0
200269d4:	10a30000 	addk	r5, r3, r0
200269d8:	30c00001 	addik	r6, r0, 1
200269dc:	b0000000 	imm	0
200269e0:	e8940528 	lwi	r4, r20, 1320
200269e4:	99fc2000 	brald	r15, r4
200269e8:	80000000 	or	r0, r0, r0
200269ec:	10830000 	addk	r4, r3, r0
200269f0:	b0000000 	imm	0
200269f4:	e8740568 	lwi	r3, r20, 1384
200269f8:	e8630000 	lwi	r3, r3, 0
200269fc:	10841800 	addk	r4, r4, r3
20026a00:	b0000000 	imm	0
20026a04:	e874056c 	lwi	r3, r20, 1388
20026a08:	f8830000 	swi	r4, r3, 0
	}
20026a0c:	e9e10000 	lwi	r15, r1, 0
20026a10:	10330000 	addk	r1, r19, r0
20026a14:	ea61001c 	lwi	r19, r1, 28
20026a18:	ea810020 	lwi	r20, r1, 32
20026a1c:	30210024 	addik	r1, r1, 36
20026a20:	b60f0008 	rtsd	r15, 8
20026a24:	80000000 	or	r0, r0, r0

20026a28 <write_end_MV>:
	
	static void write_end_MV() {
20026a28:	3021fff4 	addik	r1, r1, -12
20026a2c:	fa610004 	swi	r19, r1, 4
20026a30:	fa810008 	swi	r20, r1, 8
20026a34:	12610000 	addk	r19, r1, r0
20026a38:	96808000 	mfs	r20, rpc
20026a3c:	b000dffd 	imm	-8195
20026a40:	3294af24 	addik	r20, r20, -20700
		(*decoder_parser_parseheaders_MV->write_ind) = index_MV;
20026a44:	b0000000 	imm	0
20026a48:	e8740544 	lwi	r3, r20, 1348
20026a4c:	e8630000 	lwi	r3, r3, 0
20026a50:	e8630010 	lwi	r3, r3, 16
20026a54:	b0000000 	imm	0
20026a58:	e8940568 	lwi	r4, r20, 1384
20026a5c:	e8840000 	lwi	r4, r4, 0
20026a60:	f8830000 	swi	r4, r3, 0
	}
20026a64:	10330000 	addk	r1, r19, r0
20026a68:	ea610004 	lwi	r19, r1, 4
20026a6c:	ea810008 	lwi	r20, r1, 8
20026a70:	3021000c 	addik	r1, r1, 12
20026a74:	b60f0008 	rtsd	r15, 8
20026a78:	80000000 	or	r0, r0, r0

20026a7c <write_RUN>:
	static void write_RUN() {
20026a7c:	3021ffdc 	addik	r1, r1, -36
20026a80:	f9e10000 	swi	r15, r1, 0
20026a84:	fa61001c 	swi	r19, r1, 28
20026a88:	fa810020 	swi	r20, r1, 32
20026a8c:	12610000 	addk	r19, r1, r0
20026a90:	96808000 	mfs	r20, rpc
20026a94:	b000dffd 	imm	-8195
20026a98:	3294aecc 	addik	r20, r20, -20788
		index_RUN = (*decoder_parser_parseheaders_RUN->write_ind);
20026a9c:	b0000000 	imm	0
20026aa0:	e8740540 	lwi	r3, r20, 1344
20026aa4:	e8630000 	lwi	r3, r3, 0
20026aa8:	e8630010 	lwi	r3, r3, 16
20026aac:	e8830000 	lwi	r4, r3, 0
20026ab0:	b0000000 	imm	0
20026ab4:	e8740570 	lwi	r3, r20, 1392
20026ab8:	f8830000 	swi	r4, r3, 0
		numFree_RUN = index_RUN + fifo_i8_get_room(decoder_parser_parseheaders_RUN, NUM_READERS_RUN);
20026abc:	b0000000 	imm	0
20026ac0:	e8740540 	lwi	r3, r20, 1344
20026ac4:	e8630000 	lwi	r3, r3, 0
20026ac8:	10a30000 	addk	r5, r3, r0
20026acc:	30c00001 	addik	r6, r0, 1
20026ad0:	b0000000 	imm	0
20026ad4:	e8940524 	lwi	r4, r20, 1316
20026ad8:	99fc2000 	brald	r15, r4
20026adc:	80000000 	or	r0, r0, r0
20026ae0:	10830000 	addk	r4, r3, r0
20026ae4:	b0000000 	imm	0
20026ae8:	e8740570 	lwi	r3, r20, 1392
20026aec:	e8630000 	lwi	r3, r3, 0
20026af0:	10841800 	addk	r4, r4, r3
20026af4:	b0000000 	imm	0
20026af8:	e8740574 	lwi	r3, r20, 1396
20026afc:	f8830000 	swi	r4, r3, 0
	}
20026b00:	e9e10000 	lwi	r15, r1, 0
20026b04:	10330000 	addk	r1, r19, r0
20026b08:	ea61001c 	lwi	r19, r1, 28
20026b0c:	ea810020 	lwi	r20, r1, 32
20026b10:	30210024 	addik	r1, r1, 36
20026b14:	b60f0008 	rtsd	r15, 8
20026b18:	80000000 	or	r0, r0, r0

20026b1c <write_end_RUN>:
	
	static void write_end_RUN() {
20026b1c:	3021fff4 	addik	r1, r1, -12
20026b20:	fa610004 	swi	r19, r1, 4
20026b24:	fa810008 	swi	r20, r1, 8
20026b28:	12610000 	addk	r19, r1, r0
20026b2c:	96808000 	mfs	r20, rpc
20026b30:	b000dffd 	imm	-8195
20026b34:	3294ae30 	addik	r20, r20, -20944
		(*decoder_parser_parseheaders_RUN->write_ind) = index_RUN;
20026b38:	b0000000 	imm	0
20026b3c:	e8740540 	lwi	r3, r20, 1344
20026b40:	e8630000 	lwi	r3, r3, 0
20026b44:	e8630010 	lwi	r3, r3, 16
20026b48:	b0000000 	imm	0
20026b4c:	e8940570 	lwi	r4, r20, 1392
20026b50:	e8840000 	lwi	r4, r4, 0
20026b54:	f8830000 	swi	r4, r3, 0
	}
20026b58:	10330000 	addk	r1, r19, r0
20026b5c:	ea610004 	lwi	r19, r1, 4
20026b60:	ea810008 	lwi	r20, r1, 8
20026b64:	3021000c 	addik	r1, r1, 12
20026b68:	b60f0008 	rtsd	r15, 8
20026b6c:	80000000 	or	r0, r0, r0

20026b70 <write_VALUE>:
	static void write_VALUE() {
20026b70:	3021ffdc 	addik	r1, r1, -36
20026b74:	f9e10000 	swi	r15, r1, 0
20026b78:	fa61001c 	swi	r19, r1, 28
20026b7c:	fa810020 	swi	r20, r1, 32
20026b80:	12610000 	addk	r19, r1, r0
20026b84:	96808000 	mfs	r20, rpc
20026b88:	b000dffd 	imm	-8195
20026b8c:	3294add8 	addik	r20, r20, -21032
		index_VALUE = (*decoder_parser_parseheaders_VALUE->write_ind);
20026b90:	b0000000 	imm	0
20026b94:	e8740554 	lwi	r3, r20, 1364
20026b98:	e8630000 	lwi	r3, r3, 0
20026b9c:	e8630010 	lwi	r3, r3, 16
20026ba0:	e8830000 	lwi	r4, r3, 0
20026ba4:	b0000000 	imm	0
20026ba8:	e8740578 	lwi	r3, r20, 1400
20026bac:	f8830000 	swi	r4, r3, 0
		numFree_VALUE = index_VALUE + fifo_i16_get_room(decoder_parser_parseheaders_VALUE, NUM_READERS_VALUE);
20026bb0:	b0000000 	imm	0
20026bb4:	e8740554 	lwi	r3, r20, 1364
20026bb8:	e8630000 	lwi	r3, r3, 0
20026bbc:	10a30000 	addk	r5, r3, r0
20026bc0:	30c00001 	addik	r6, r0, 1
20026bc4:	b0000000 	imm	0
20026bc8:	e8940528 	lwi	r4, r20, 1320
20026bcc:	99fc2000 	brald	r15, r4
20026bd0:	80000000 	or	r0, r0, r0
20026bd4:	10830000 	addk	r4, r3, r0
20026bd8:	b0000000 	imm	0
20026bdc:	e8740578 	lwi	r3, r20, 1400
20026be0:	e8630000 	lwi	r3, r3, 0
20026be4:	10841800 	addk	r4, r4, r3
20026be8:	b0000000 	imm	0
20026bec:	e874057c 	lwi	r3, r20, 1404
20026bf0:	f8830000 	swi	r4, r3, 0
	}
20026bf4:	e9e10000 	lwi	r15, r1, 0
20026bf8:	10330000 	addk	r1, r19, r0
20026bfc:	ea61001c 	lwi	r19, r1, 28
20026c00:	ea810020 	lwi	r20, r1, 32
20026c04:	30210024 	addik	r1, r1, 36
20026c08:	b60f0008 	rtsd	r15, 8
20026c0c:	80000000 	or	r0, r0, r0

20026c10 <write_end_VALUE>:
	
	static void write_end_VALUE() {
20026c10:	3021fff4 	addik	r1, r1, -12
20026c14:	fa610004 	swi	r19, r1, 4
20026c18:	fa810008 	swi	r20, r1, 8
20026c1c:	12610000 	addk	r19, r1, r0
20026c20:	96808000 	mfs	r20, rpc
20026c24:	b000dffd 	imm	-8195
20026c28:	3294ad3c 	addik	r20, r20, -21188
		(*decoder_parser_parseheaders_VALUE->write_ind) = index_VALUE;
20026c2c:	b0000000 	imm	0
20026c30:	e8740554 	lwi	r3, r20, 1364
20026c34:	e8630000 	lwi	r3, r3, 0
20026c38:	e8630010 	lwi	r3, r3, 16
20026c3c:	b0000000 	imm	0
20026c40:	e8940578 	lwi	r4, r20, 1400
20026c44:	e8840000 	lwi	r4, r4, 0
20026c48:	f8830000 	swi	r4, r3, 0
	}
20026c4c:	10330000 	addk	r1, r19, r0
20026c50:	ea610004 	lwi	r19, r1, 4
20026c54:	ea810008 	lwi	r20, r1, 8
20026c58:	3021000c 	addik	r1, r1, 12
20026c5c:	b60f0008 	rtsd	r15, 8
20026c60:	80000000 	or	r0, r0, r0

20026c64 <write_LAST>:
	static void write_LAST() {
20026c64:	3021ffdc 	addik	r1, r1, -36
20026c68:	f9e10000 	swi	r15, r1, 0
20026c6c:	fa61001c 	swi	r19, r1, 28
20026c70:	fa810020 	swi	r20, r1, 32
20026c74:	12610000 	addk	r19, r1, r0
20026c78:	96808000 	mfs	r20, rpc
20026c7c:	b000dffd 	imm	-8195
20026c80:	3294ace4 	addik	r20, r20, -21276
		index_LAST = (*decoder_parser_parseheaders_LAST->write_ind);
20026c84:	b0000000 	imm	0
20026c88:	e874054c 	lwi	r3, r20, 1356
20026c8c:	e8630000 	lwi	r3, r3, 0
20026c90:	e8630010 	lwi	r3, r3, 16
20026c94:	e8830000 	lwi	r4, r3, 0
20026c98:	b0000000 	imm	0
20026c9c:	e8740580 	lwi	r3, r20, 1408
20026ca0:	f8830000 	swi	r4, r3, 0
		numFree_LAST = index_LAST + fifo_i32_get_room(decoder_parser_parseheaders_LAST, NUM_READERS_LAST);
20026ca4:	b0000000 	imm	0
20026ca8:	e874054c 	lwi	r3, r20, 1356
20026cac:	e8630000 	lwi	r3, r3, 0
20026cb0:	10a30000 	addk	r5, r3, r0
20026cb4:	30c00001 	addik	r6, r0, 1
20026cb8:	b0000000 	imm	0
20026cbc:	e894052c 	lwi	r4, r20, 1324
20026cc0:	99fc2000 	brald	r15, r4
20026cc4:	80000000 	or	r0, r0, r0
20026cc8:	10830000 	addk	r4, r3, r0
20026ccc:	b0000000 	imm	0
20026cd0:	e8740580 	lwi	r3, r20, 1408
20026cd4:	e8630000 	lwi	r3, r3, 0
20026cd8:	10841800 	addk	r4, r4, r3
20026cdc:	b0000000 	imm	0
20026ce0:	e8740584 	lwi	r3, r20, 1412
20026ce4:	f8830000 	swi	r4, r3, 0
	}
20026ce8:	e9e10000 	lwi	r15, r1, 0
20026cec:	10330000 	addk	r1, r19, r0
20026cf0:	ea61001c 	lwi	r19, r1, 28
20026cf4:	ea810020 	lwi	r20, r1, 32
20026cf8:	30210024 	addik	r1, r1, 36
20026cfc:	b60f0008 	rtsd	r15, 8
20026d00:	80000000 	or	r0, r0, r0

20026d04 <write_end_LAST>:
	
	static void write_end_LAST() {
20026d04:	3021fff4 	addik	r1, r1, -12
20026d08:	fa610004 	swi	r19, r1, 4
20026d0c:	fa810008 	swi	r20, r1, 8
20026d10:	12610000 	addk	r19, r1, r0
20026d14:	96808000 	mfs	r20, rpc
20026d18:	b000dffd 	imm	-8195
20026d1c:	3294ac48 	addik	r20, r20, -21432
		(*decoder_parser_parseheaders_LAST->write_ind) = index_LAST;
20026d20:	b0000000 	imm	0
20026d24:	e874054c 	lwi	r3, r20, 1356
20026d28:	e8630000 	lwi	r3, r3, 0
20026d2c:	e8630010 	lwi	r3, r3, 16
20026d30:	b0000000 	imm	0
20026d34:	e8940580 	lwi	r4, r20, 1408
20026d38:	e8840000 	lwi	r4, r4, 0
20026d3c:	f8830000 	swi	r4, r3, 0
	}
20026d40:	10330000 	addk	r1, r19, r0
20026d44:	ea610004 	lwi	r19, r1, 4
20026d48:	ea810008 	lwi	r20, r1, 8
20026d4c:	3021000c 	addik	r1, r1, 12
20026d50:	b60f0008 	rtsd	r15, 8
20026d54:	80000000 	or	r0, r0, r0

20026d58 <write_WIDTH>:
	static void write_WIDTH() {
20026d58:	3021ffdc 	addik	r1, r1, -36
20026d5c:	f9e10000 	swi	r15, r1, 0
20026d60:	fa61001c 	swi	r19, r1, 28
20026d64:	fa810020 	swi	r20, r1, 32
20026d68:	12610000 	addk	r19, r1, r0
20026d6c:	96808000 	mfs	r20, rpc
20026d70:	b000dffd 	imm	-8195
20026d74:	3294abf0 	addik	r20, r20, -21520
		index_WIDTH = (*decoder_parser_parseheaders_WIDTH->write_ind);
20026d78:	b0000000 	imm	0
20026d7c:	e8740548 	lwi	r3, r20, 1352
20026d80:	e8630000 	lwi	r3, r3, 0
20026d84:	e8630010 	lwi	r3, r3, 16
20026d88:	e8830000 	lwi	r4, r3, 0
20026d8c:	b0000000 	imm	0
20026d90:	e8740588 	lwi	r3, r20, 1416
20026d94:	f8830000 	swi	r4, r3, 0
		numFree_WIDTH = index_WIDTH + fifo_i16_get_room(decoder_parser_parseheaders_WIDTH, NUM_READERS_WIDTH);
20026d98:	b0000000 	imm	0
20026d9c:	e8740548 	lwi	r3, r20, 1352
20026da0:	e8630000 	lwi	r3, r3, 0
20026da4:	10a30000 	addk	r5, r3, r0
20026da8:	30c00001 	addik	r6, r0, 1
20026dac:	b0000000 	imm	0
20026db0:	e8940528 	lwi	r4, r20, 1320
20026db4:	99fc2000 	brald	r15, r4
20026db8:	80000000 	or	r0, r0, r0
20026dbc:	10830000 	addk	r4, r3, r0
20026dc0:	b0000000 	imm	0
20026dc4:	e8740588 	lwi	r3, r20, 1416
20026dc8:	e8630000 	lwi	r3, r3, 0
20026dcc:	10841800 	addk	r4, r4, r3
20026dd0:	b0000000 	imm	0
20026dd4:	e874058c 	lwi	r3, r20, 1420
20026dd8:	f8830000 	swi	r4, r3, 0
	}
20026ddc:	e9e10000 	lwi	r15, r1, 0
20026de0:	10330000 	addk	r1, r19, r0
20026de4:	ea61001c 	lwi	r19, r1, 28
20026de8:	ea810020 	lwi	r20, r1, 32
20026dec:	30210024 	addik	r1, r1, 36
20026df0:	b60f0008 	rtsd	r15, 8
20026df4:	80000000 	or	r0, r0, r0

20026df8 <write_end_WIDTH>:
	
	static void write_end_WIDTH() {
20026df8:	3021fff4 	addik	r1, r1, -12
20026dfc:	fa610004 	swi	r19, r1, 4
20026e00:	fa810008 	swi	r20, r1, 8
20026e04:	12610000 	addk	r19, r1, r0
20026e08:	96808000 	mfs	r20, rpc
20026e0c:	b000dffd 	imm	-8195
20026e10:	3294ab54 	addik	r20, r20, -21676
		(*decoder_parser_parseheaders_WIDTH->write_ind) = index_WIDTH;
20026e14:	b0000000 	imm	0
20026e18:	e8740548 	lwi	r3, r20, 1352
20026e1c:	e8630000 	lwi	r3, r3, 0
20026e20:	e8630010 	lwi	r3, r3, 16
20026e24:	b0000000 	imm	0
20026e28:	e8940588 	lwi	r4, r20, 1416
20026e2c:	e8840000 	lwi	r4, r4, 0
20026e30:	f8830000 	swi	r4, r3, 0
	}
20026e34:	10330000 	addk	r1, r19, r0
20026e38:	ea610004 	lwi	r19, r1, 4
20026e3c:	ea810008 	lwi	r20, r1, 8
20026e40:	3021000c 	addik	r1, r1, 12
20026e44:	b60f0008 	rtsd	r15, 8
20026e48:	80000000 	or	r0, r0, r0

20026e4c <write_HEIGHT>:
	static void write_HEIGHT() {
20026e4c:	3021ffdc 	addik	r1, r1, -36
20026e50:	f9e10000 	swi	r15, r1, 0
20026e54:	fa61001c 	swi	r19, r1, 28
20026e58:	fa810020 	swi	r20, r1, 32
20026e5c:	12610000 	addk	r19, r1, r0
20026e60:	96808000 	mfs	r20, rpc
20026e64:	b000dffd 	imm	-8195
20026e68:	3294aafc 	addik	r20, r20, -21764
		index_HEIGHT = (*decoder_parser_parseheaders_HEIGHT->write_ind);
20026e6c:	b0000000 	imm	0
20026e70:	e874053c 	lwi	r3, r20, 1340
20026e74:	e8630000 	lwi	r3, r3, 0
20026e78:	e8630010 	lwi	r3, r3, 16
20026e7c:	e8830000 	lwi	r4, r3, 0
20026e80:	b0000000 	imm	0
20026e84:	e8740590 	lwi	r3, r20, 1424
20026e88:	f8830000 	swi	r4, r3, 0
		numFree_HEIGHT = index_HEIGHT + fifo_i16_get_room(decoder_parser_parseheaders_HEIGHT, NUM_READERS_HEIGHT);
20026e8c:	b0000000 	imm	0
20026e90:	e874053c 	lwi	r3, r20, 1340
20026e94:	e8630000 	lwi	r3, r3, 0
20026e98:	10a30000 	addk	r5, r3, r0
20026e9c:	30c00001 	addik	r6, r0, 1
20026ea0:	b0000000 	imm	0
20026ea4:	e8940528 	lwi	r4, r20, 1320
20026ea8:	99fc2000 	brald	r15, r4
20026eac:	80000000 	or	r0, r0, r0
20026eb0:	10830000 	addk	r4, r3, r0
20026eb4:	b0000000 	imm	0
20026eb8:	e8740590 	lwi	r3, r20, 1424
20026ebc:	e8630000 	lwi	r3, r3, 0
20026ec0:	10841800 	addk	r4, r4, r3
20026ec4:	b0000000 	imm	0
20026ec8:	e8740594 	lwi	r3, r20, 1428
20026ecc:	f8830000 	swi	r4, r3, 0
	}
20026ed0:	e9e10000 	lwi	r15, r1, 0
20026ed4:	10330000 	addk	r1, r19, r0
20026ed8:	ea61001c 	lwi	r19, r1, 28
20026edc:	ea810020 	lwi	r20, r1, 32
20026ee0:	30210024 	addik	r1, r1, 36
20026ee4:	b60f0008 	rtsd	r15, 8
20026ee8:	80000000 	or	r0, r0, r0

20026eec <write_end_HEIGHT>:
	
	static void write_end_HEIGHT() {
20026eec:	3021fff4 	addik	r1, r1, -12
20026ef0:	fa610004 	swi	r19, r1, 4
20026ef4:	fa810008 	swi	r20, r1, 8
20026ef8:	12610000 	addk	r19, r1, r0
20026efc:	96808000 	mfs	r20, rpc
20026f00:	b000dffd 	imm	-8195
20026f04:	3294aa60 	addik	r20, r20, -21920
		(*decoder_parser_parseheaders_HEIGHT->write_ind) = index_HEIGHT;
20026f08:	b0000000 	imm	0
20026f0c:	e874053c 	lwi	r3, r20, 1340
20026f10:	e8630000 	lwi	r3, r3, 0
20026f14:	e8630010 	lwi	r3, r3, 16
20026f18:	b0000000 	imm	0
20026f1c:	e8940590 	lwi	r4, r20, 1424
20026f20:	e8840000 	lwi	r4, r4, 0
20026f24:	f8830000 	swi	r4, r3, 0
	}
20026f28:	10330000 	addk	r1, r19, r0
20026f2c:	ea610004 	lwi	r19, r1, 4
20026f30:	ea810008 	lwi	r20, r1, 8
20026f34:	3021000c 	addik	r1, r1, 12
20026f38:	b60f0008 	rtsd	r15, 8
20026f3c:	80000000 	or	r0, r0, r0

20026f40 <write_QP>:
	static void write_QP() {
20026f40:	3021ffdc 	addik	r1, r1, -36
20026f44:	f9e10000 	swi	r15, r1, 0
20026f48:	fa61001c 	swi	r19, r1, 28
20026f4c:	fa810020 	swi	r20, r1, 32
20026f50:	12610000 	addk	r19, r1, r0
20026f54:	96808000 	mfs	r20, rpc
20026f58:	b000dffd 	imm	-8195
20026f5c:	3294aa08 	addik	r20, r20, -22008
		index_QP = (*decoder_parser_parseheaders_QP->write_ind);
20026f60:	b0000000 	imm	0
20026f64:	e8740538 	lwi	r3, r20, 1336
20026f68:	e8630000 	lwi	r3, r3, 0
20026f6c:	e8630010 	lwi	r3, r3, 16
20026f70:	e8830000 	lwi	r4, r3, 0
20026f74:	b0000000 	imm	0
20026f78:	e8740598 	lwi	r3, r20, 1432
20026f7c:	f8830000 	swi	r4, r3, 0
		numFree_QP = index_QP + fifo_i8_get_room(decoder_parser_parseheaders_QP, NUM_READERS_QP);
20026f80:	b0000000 	imm	0
20026f84:	e8740538 	lwi	r3, r20, 1336
20026f88:	e8630000 	lwi	r3, r3, 0
20026f8c:	10a30000 	addk	r5, r3, r0
20026f90:	30c00001 	addik	r6, r0, 1
20026f94:	b0000000 	imm	0
20026f98:	e8940524 	lwi	r4, r20, 1316
20026f9c:	99fc2000 	brald	r15, r4
20026fa0:	80000000 	or	r0, r0, r0
20026fa4:	10830000 	addk	r4, r3, r0
20026fa8:	b0000000 	imm	0
20026fac:	e8740598 	lwi	r3, r20, 1432
20026fb0:	e8630000 	lwi	r3, r3, 0
20026fb4:	10841800 	addk	r4, r4, r3
20026fb8:	b0000000 	imm	0
20026fbc:	e874059c 	lwi	r3, r20, 1436
20026fc0:	f8830000 	swi	r4, r3, 0
	}
20026fc4:	e9e10000 	lwi	r15, r1, 0
20026fc8:	10330000 	addk	r1, r19, r0
20026fcc:	ea61001c 	lwi	r19, r1, 28
20026fd0:	ea810020 	lwi	r20, r1, 32
20026fd4:	30210024 	addik	r1, r1, 36
20026fd8:	b60f0008 	rtsd	r15, 8
20026fdc:	80000000 	or	r0, r0, r0

20026fe0 <write_end_QP>:
	
	static void write_end_QP() {
20026fe0:	3021fff4 	addik	r1, r1, -12
20026fe4:	fa610004 	swi	r19, r1, 4
20026fe8:	fa810008 	swi	r20, r1, 8
20026fec:	12610000 	addk	r19, r1, r0
20026ff0:	96808000 	mfs	r20, rpc
20026ff4:	b000dffd 	imm	-8195
20026ff8:	3294a96c 	addik	r20, r20, -22164
		(*decoder_parser_parseheaders_QP->write_ind) = index_QP;
20026ffc:	b0000000 	imm	0
20027000:	e8740538 	lwi	r3, r20, 1336
20027004:	e8630000 	lwi	r3, r3, 0
20027008:	e8630010 	lwi	r3, r3, 16
2002700c:	b0000000 	imm	0
20027010:	e8940598 	lwi	r4, r20, 1432
20027014:	e8840000 	lwi	r4, r4, 0
20027018:	f8830000 	swi	r4, r3, 0
	}
2002701c:	10330000 	addk	r1, r19, r0
20027020:	ea610004 	lwi	r19, r1, 4
20027024:	ea810008 	lwi	r20, r1, 8
20027028:	3021000c 	addik	r1, r1, 12
2002702c:	b60f0008 	rtsd	r15, 8
20027030:	80000000 	or	r0, r0, r0

20027034 <BitstreamReadUtils_getFifoIdx>:
	static void vldFunctions_get_mv(i16 fifo[10], i32 res[1], char * name);
	static i32 BitstreamReadUtils_IsStartCode(u16 fifo[10]);
	static void BitstreamReadUtils_byte_align(u16 fifo[10]);
	static void log2bin(u32 value, u32 res[1]);

	static u16 BitstreamReadUtils_getFifoIdx(u16 cptBits, u16 fifo[10]) {
20027034:	3021ffec 	addik	r1, r1, -20
20027038:	fa61000c 	swi	r19, r1, 12
2002703c:	fa810010 	swi	r20, r1, 16
20027040:	12610000 	addk	r19, r1, r0
20027044:	96808000 	mfs	r20, rpc
20027048:	b000dffd 	imm	-8195
2002704c:	3294a918 	addik	r20, r20, -22248
20027050:	10650000 	addk	r3, r5, r0
20027054:	f8d3001c 	swi	r6, r19, 28
20027058:	f4730018 	shi	r3, r19, 24
		u8 local_FIFO_IDX;
		u16 fifo_idx;
		u8 local_FIFO_SIZE;
		i16 tmp_if;
	
		local_FIFO_IDX = BitstreamReadUtils_FIFO_IDX;
2002705c:	30600009 	addik	r3, r0, 9
20027060:	f0730006 	sbi	r3, r19, 6
		fifo_idx = fifo[local_FIFO_IDX];
20027064:	e0730006 	lbui	r3, r19, 6
20027068:	10631800 	addk	r3, r3, r3
2002706c:	e893001c 	lwi	r4, r19, 28
20027070:	10641800 	addk	r3, r4, r3
20027074:	e4630000 	lhui	r3, r3, 0
20027078:	f4730008 	shi	r3, r19, 8
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
2002707c:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20027080:	f073000a 	sbi	r3, r19, 10
		if ((cptBits & local_FIFO_SIZE - 1) != 0) {
20027084:	e4930018 	lhui	r4, r19, 24
20027088:	e073000a 	lbui	r3, r19, 10
2002708c:	3063ffff 	addik	r3, r3, -1
20027090:	84641800 	and	r3, r4, r3
20027094:	bc030064 	beqi	r3, 100		// 200270f8
			local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20027098:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002709c:	f073000a 	sbi	r3, r19, 10
			tmp_if = fifo_idx - 1 - (cptBits >> 3) & local_FIFO_SIZE - 1;
200270a0:	e4730018 	lhui	r3, r19, 24
200270a4:	64630003 	bsrli	r3, r3, 3
200270a8:	b0000000 	imm	0
200270ac:	a463ffff 	andi	r3, r3, -1
200270b0:	e4930008 	lhui	r4, r19, 8
200270b4:	14632000 	rsubk	r3, r3, r4
200270b8:	b0000000 	imm	0
200270bc:	a463ffff 	andi	r3, r3, -1
200270c0:	3063ffff 	addik	r3, r3, -1
200270c4:	b0000000 	imm	0
200270c8:	a463ffff 	andi	r3, r3, -1
200270cc:	90830061 	sext16	r4, r3
200270d0:	e073000a 	lbui	r3, r19, 10
200270d4:	b0000000 	imm	0
200270d8:	a463ffff 	andi	r3, r3, -1
200270dc:	3063ffff 	addik	r3, r3, -1
200270e0:	b0000000 	imm	0
200270e4:	a463ffff 	andi	r3, r3, -1
200270e8:	90630061 	sext16	r3, r3
200270ec:	84641800 	and	r3, r4, r3
200270f0:	f4730004 	shi	r3, r19, 4
200270f4:	b8000054 	bri	84		// 20027148
		} else {
			local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
200270f8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200270fc:	f073000a 	sbi	r3, r19, 10
			tmp_if = fifo_idx - (cptBits >> 3) & local_FIFO_SIZE - 1;
20027100:	e4730018 	lhui	r3, r19, 24
20027104:	64630003 	bsrli	r3, r3, 3
20027108:	b0000000 	imm	0
2002710c:	a463ffff 	andi	r3, r3, -1
20027110:	e4930008 	lhui	r4, r19, 8
20027114:	14632000 	rsubk	r3, r3, r4
20027118:	b0000000 	imm	0
2002711c:	a463ffff 	andi	r3, r3, -1
20027120:	90830061 	sext16	r4, r3
20027124:	e073000a 	lbui	r3, r19, 10
20027128:	b0000000 	imm	0
2002712c:	a463ffff 	andi	r3, r3, -1
20027130:	3063ffff 	addik	r3, r3, -1
20027134:	b0000000 	imm	0
20027138:	a463ffff 	andi	r3, r3, -1
2002713c:	90630061 	sext16	r3, r3
20027140:	84641800 	and	r3, r4, r3
20027144:	f4730004 	shi	r3, r19, 4
		}
		return tmp_if;
20027148:	e4730004 	lhui	r3, r19, 4
	}
2002714c:	10330000 	addk	r1, r19, r0
20027150:	ea61000c 	lwi	r19, r1, 12
20027154:	ea810010 	lwi	r20, r1, 16
20027158:	30210014 	addik	r1, r1, 20
2002715c:	b60f0008 	rtsd	r15, 8
20027160:	80000000 	or	r0, r0, r0

20027164 <BitstreamReadUtils_showXBits>:
	static void BitstreamReadUtils_showXBits(u8 nb, u16 fifo[10], u32 res[1]) {
20027164:	3021ffc0 	addik	r1, r1, -64
20027168:	f9e10000 	swi	r15, r1, 0
2002716c:	fa610038 	swi	r19, r1, 56
20027170:	fa81003c 	swi	r20, r1, 60
20027174:	12610000 	addk	r19, r1, r0
20027178:	96808000 	mfs	r20, rpc
2002717c:	b000dffd 	imm	-8195
20027180:	3294a7e4 	addik	r20, r20, -22556
20027184:	10650000 	addk	r3, r5, r0
20027188:	f8d30048 	swi	r6, r19, 72
2002718c:	f8f3004c 	swi	r7, r19, 76
20027190:	f0730044 	sbi	r3, r19, 68
		u16 tmp_fifo0;
		u16 tmp_fifo1;
		u16 tmp_fifo2;
		u32 tmp_res;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20027194:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20027198:	f073001c 	sbi	r3, r19, 28
		cptBits = fifo[local_FIFO_CPT_BITS];
2002719c:	e073001c 	lbui	r3, r19, 28
200271a0:	10631800 	addk	r3, r3, r3
200271a4:	e8930048 	lwi	r4, r19, 72
200271a8:	10641800 	addk	r3, r4, r3
200271ac:	e4630000 	lhui	r3, r3, 0
200271b0:	f473001e 	shi	r3, r19, 30
		idx = BitstreamReadUtils_getFifoIdx(cptBits, fifo);
200271b4:	e473001e 	lhui	r3, r19, 30
200271b8:	10a30000 	addk	r5, r3, r0
200271bc:	e8d30048 	lwi	r6, r19, 72
200271c0:	b0000000 	imm	0
200271c4:	e89406a0 	lwi	r4, r20, 1696
200271c8:	99fc2000 	brald	r15, r4
200271cc:	80000000 	or	r0, r0, r0
200271d0:	f4730020 	shi	r3, r19, 32
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
200271d4:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200271d8:	f0730022 	sbi	r3, r19, 34
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
200271dc:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200271e0:	f0730022 	sbi	r3, r19, 34
		cpt = 8 - (cptBits & local_FIFO_SIZE - 1) & local_FIFO_SIZE - 1;
200271e4:	e473001e 	lhui	r3, r19, 30
200271e8:	90830060 	sext8	r4, r3
200271ec:	e0730022 	lbui	r3, r19, 34
200271f0:	3063ffff 	addik	r3, r3, -1
200271f4:	a46300ff 	andi	r3, r3, 255
200271f8:	90630060 	sext8	r3, r3
200271fc:	84641800 	and	r3, r4, r3
20027200:	90630060 	sext8	r3, r3
20027204:	a46300ff 	andi	r3, r3, 255
20027208:	30a00008 	addik	r5, r0, 8	// 8 <_vector_sw_exception>
2002720c:	14632800 	rsubk	r3, r3, r5
20027210:	a46300ff 	andi	r3, r3, 255
20027214:	90830060 	sext8	r4, r3
20027218:	e0730022 	lbui	r3, r19, 34
2002721c:	3063ffff 	addik	r3, r3, -1
20027220:	a46300ff 	andi	r3, r3, 255
20027224:	90630060 	sext8	r3, r3
20027228:	84641800 	and	r3, r4, r3
2002722c:	90630060 	sext8	r3, r3
20027230:	f0730023 	sbi	r3, r19, 35
		local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
20027234:	f8130024 	swi	r0, r19, 36
		if (local_DEBUG_PARSER) {
			if (nb > cptBits) {
			}
		}
		tmp_fifo = fifo[idx];
20027238:	e4730020 	lhui	r3, r19, 32
2002723c:	10631800 	addk	r3, r3, r3
20027240:	e8930048 	lwi	r4, r19, 72
20027244:	10641800 	addk	r3, r4, r3
20027248:	e4630000 	lhui	r3, r3, 0
2002724c:	f4730028 	shi	r3, r19, 40
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20027250:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20027254:	f0730022 	sbi	r3, r19, 34
		tmp_fifo0 = fifo[idx + 1 & local_FIFO_SIZE - 1];
20027258:	e4730020 	lhui	r3, r19, 32
2002725c:	30830001 	addik	r4, r3, 1
20027260:	e0730022 	lbui	r3, r19, 34
20027264:	3063ffff 	addik	r3, r3, -1
20027268:	84641800 	and	r3, r4, r3
2002726c:	10631800 	addk	r3, r3, r3
20027270:	e8930048 	lwi	r4, r19, 72
20027274:	10641800 	addk	r3, r4, r3
20027278:	e4630000 	lhui	r3, r3, 0
2002727c:	f473002a 	shi	r3, r19, 42
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20027280:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20027284:	f0730022 	sbi	r3, r19, 34
		tmp_fifo1 = fifo[idx + 2 & local_FIFO_SIZE - 1];
20027288:	e4730020 	lhui	r3, r19, 32
2002728c:	30830002 	addik	r4, r3, 2
20027290:	e0730022 	lbui	r3, r19, 34
20027294:	3063ffff 	addik	r3, r3, -1
20027298:	84641800 	and	r3, r4, r3
2002729c:	10631800 	addk	r3, r3, r3
200272a0:	e8930048 	lwi	r4, r19, 72
200272a4:	10641800 	addk	r3, r4, r3
200272a8:	e4630000 	lhui	r3, r3, 0
200272ac:	f473002c 	shi	r3, r19, 44
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
200272b0:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200272b4:	f0730022 	sbi	r3, r19, 34
		tmp_fifo2 = fifo[idx + 3 & local_FIFO_SIZE - 1];
200272b8:	e4730020 	lhui	r3, r19, 32
200272bc:	30830003 	addik	r4, r3, 3
200272c0:	e0730022 	lbui	r3, r19, 34
200272c4:	3063ffff 	addik	r3, r3, -1
200272c8:	84641800 	and	r3, r4, r3
200272cc:	10631800 	addk	r3, r3, r3
200272d0:	e8930048 	lwi	r4, r19, 72
200272d4:	10641800 	addk	r3, r4, r3
200272d8:	e4630000 	lhui	r3, r3, 0
200272dc:	f473002e 	shi	r3, r19, 46
		res[0] = tmp_fifo << 24 | tmp_fifo0 << 16 | tmp_fifo1 << 8 | tmp_fifo2;
200272e0:	e4730028 	lhui	r3, r19, 40
200272e4:	64830418 	bslli	r4, r3, 24
200272e8:	e473002a 	lhui	r3, r19, 42
200272ec:	64630410 	bslli	r3, r3, 16
200272f0:	80841800 	or	r4, r4, r3
200272f4:	e473002c 	lhui	r3, r19, 44
200272f8:	64630408 	bslli	r3, r3, 8
200272fc:	80841800 	or	r4, r4, r3
20027300:	e473002e 	lhui	r3, r19, 46
20027304:	80641800 	or	r3, r4, r3
20027308:	10830000 	addk	r4, r3, r0
2002730c:	e873004c 	lwi	r3, r19, 76
20027310:	f8830000 	swi	r4, r3, 0
		tmp_res = res[0];
20027314:	e873004c 	lwi	r3, r19, 76
20027318:	e8630000 	lwi	r3, r3, 0
2002731c:	f8730030 	swi	r3, r19, 48
		res[0] = (tmp_res << cpt) >> (32 - nb) & (1 << nb) - 1;
20027320:	e0730023 	lbui	r3, r19, 35
20027324:	e8930030 	lwi	r4, r19, 48
20027328:	44841c00 	bsll	r4, r4, r3
2002732c:	e0730044 	lbui	r3, r19, 68
20027330:	30a00020 	addik	r5, r0, 32	// 20 <_vector_hw_exception>
20027334:	14632800 	rsubk	r3, r3, r5
20027338:	44841800 	bsrl	r4, r4, r3
2002733c:	e0730044 	lbui	r3, r19, 68
20027340:	30a00001 	addik	r5, r0, 1
20027344:	44651c00 	bsll	r3, r5, r3
20027348:	3063ffff 	addik	r3, r3, -1
2002734c:	84841800 	and	r4, r4, r3
20027350:	e873004c 	lwi	r3, r19, 76
20027354:	f8830000 	swi	r4, r3, 0
	}
20027358:	e9e10000 	lwi	r15, r1, 0
2002735c:	10330000 	addk	r1, r19, r0
20027360:	ea610038 	lwi	r19, r1, 56
20027364:	ea81003c 	lwi	r20, r1, 60
20027368:	30210040 	addik	r1, r1, 64
2002736c:	b60f0008 	rtsd	r15, 8
20027370:	80000000 	or	r0, r0, r0

20027374 <BitstreamReadUtils_flushBits>:
	static void BitstreamReadUtils_flushBits(u8 nb, u16 fifo[10]) {
20027374:	3021fff0 	addik	r1, r1, -16
20027378:	fa610008 	swi	r19, r1, 8
2002737c:	fa81000c 	swi	r20, r1, 12
20027380:	12610000 	addk	r19, r1, r0
20027384:	96808000 	mfs	r20, rpc
20027388:	b000dffd 	imm	-8195
2002738c:	3294a5d8 	addik	r20, r20, -23080
20027390:	10650000 	addk	r3, r5, r0
20027394:	f8d30018 	swi	r6, r19, 24
20027398:	f0730014 	sbi	r3, r19, 20
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
2002739c:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200273a0:	f0730004 	sbi	r3, r19, 4
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
200273a4:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200273a8:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
200273ac:	e0730004 	lbui	r3, r19, 4
200273b0:	10631800 	addk	r3, r3, r3
200273b4:	e8930018 	lwi	r4, r19, 24
200273b8:	10641800 	addk	r3, r4, r3
200273bc:	e4630000 	lhui	r3, r3, 0
200273c0:	f4730006 	shi	r3, r19, 6
		fifo[local_FIFO_CPT_BITS] = tmp_fifo - nb;
200273c4:	e0730004 	lbui	r3, r19, 4
200273c8:	10631800 	addk	r3, r3, r3
200273cc:	e8930018 	lwi	r4, r19, 24
200273d0:	10641800 	addk	r3, r4, r3
200273d4:	e0930014 	lbui	r4, r19, 20
200273d8:	b0000000 	imm	0
200273dc:	a484ffff 	andi	r4, r4, -1
200273e0:	e4b30006 	lhui	r5, r19, 6
200273e4:	14842800 	rsubk	r4, r4, r5
200273e8:	b0000000 	imm	0
200273ec:	a484ffff 	andi	r4, r4, -1
200273f0:	f4830000 	shi	r4, r3, 0
	}
200273f4:	10330000 	addk	r1, r19, r0
200273f8:	ea610008 	lwi	r19, r1, 8
200273fc:	ea81000c 	lwi	r20, r1, 12
20027400:	30210010 	addik	r1, r1, 16
20027404:	b60f0008 	rtsd	r15, 8
20027408:	80000000 	or	r0, r0, r0

2002740c <BitstreamReadUtils_getBits>:
	static void BitstreamReadUtils_getBits(u8 nb, u16 fifo[10], i32 res[1]) {
2002740c:	3021ffdc 	addik	r1, r1, -36
20027410:	f9e10000 	swi	r15, r1, 0
20027414:	fa61001c 	swi	r19, r1, 28
20027418:	fa810020 	swi	r20, r1, 32
2002741c:	12610000 	addk	r19, r1, r0
20027420:	96808000 	mfs	r20, rpc
20027424:	b000dffd 	imm	-8195
20027428:	3294a53c 	addik	r20, r20, -23236
2002742c:	10650000 	addk	r3, r5, r0
20027430:	f8d3002c 	swi	r6, r19, 44
20027434:	f8f30030 	swi	r7, r19, 48
20027438:	f0730028 	sbi	r3, r19, 40
	
		if (nb == 0) {
2002743c:	e0730028 	lbui	r3, r19, 40
20027440:	bc230010 	bnei	r3, 16		// 20027450
			res[0] = 0;
20027444:	e8730030 	lwi	r3, r19, 48
20027448:	f8030000 	swi	r0, r3, 0
2002744c:	b8000040 	bri	64		// 2002748c
		} else {
			BitstreamReadUtils_showXBits(nb, fifo, res);
20027450:	e0730028 	lbui	r3, r19, 40
20027454:	10a30000 	addk	r5, r3, r0
20027458:	e8d3002c 	lwi	r6, r19, 44
2002745c:	e8f30030 	lwi	r7, r19, 48
20027460:	b0000000 	imm	0
20027464:	e87406a4 	lwi	r3, r20, 1700
20027468:	99fc1800 	brald	r15, r3
2002746c:	80000000 	or	r0, r0, r0
			BitstreamReadUtils_flushBits(nb, fifo);
20027470:	e0730028 	lbui	r3, r19, 40
20027474:	10a30000 	addk	r5, r3, r0
20027478:	e8d3002c 	lwi	r6, r19, 44
2002747c:	b0000000 	imm	0
20027480:	e87406a8 	lwi	r3, r20, 1704
20027484:	99fc1800 	brald	r15, r3
20027488:	80000000 	or	r0, r0, r0
		}
	}
2002748c:	e9e10000 	lwi	r15, r1, 0
20027490:	10330000 	addk	r1, r19, r0
20027494:	ea61001c 	lwi	r19, r1, 28
20027498:	ea810020 	lwi	r20, r1, 32
2002749c:	30210024 	addik	r1, r1, 36
200274a0:	b60f0008 	rtsd	r15, 8
200274a4:	80000000 	or	r0, r0, r0

200274a8 <BitstreamReadUtils_vld_u>:
	static void BitstreamReadUtils_vld_u(u8 nb, u16 fifo[10], i32 res[1]) {
200274a8:	3021ffdc 	addik	r1, r1, -36
200274ac:	f9e10000 	swi	r15, r1, 0
200274b0:	fa61001c 	swi	r19, r1, 28
200274b4:	fa810020 	swi	r20, r1, 32
200274b8:	12610000 	addk	r19, r1, r0
200274bc:	96808000 	mfs	r20, rpc
200274c0:	b000dffd 	imm	-8195
200274c4:	3294a4a0 	addik	r20, r20, -23392
200274c8:	10650000 	addk	r3, r5, r0
200274cc:	f8d3002c 	swi	r6, r19, 44
200274d0:	f8f30030 	swi	r7, r19, 48
200274d4:	f0730028 	sbi	r3, r19, 40
	
		BitstreamReadUtils_getBits(nb, fifo, res);
200274d8:	e0730028 	lbui	r3, r19, 40
200274dc:	10a30000 	addk	r5, r3, r0
200274e0:	e8d3002c 	lwi	r6, r19, 44
200274e4:	e8f30030 	lwi	r7, r19, 48
200274e8:	b0000000 	imm	0
200274ec:	e87406ac 	lwi	r3, r20, 1708
200274f0:	99fc1800 	brald	r15, r3
200274f4:	80000000 	or	r0, r0, r0
	}
200274f8:	e9e10000 	lwi	r15, r1, 0
200274fc:	10330000 	addk	r1, r19, r0
20027500:	ea61001c 	lwi	r19, r1, 28
20027504:	ea810020 	lwi	r20, r1, 32
20027508:	30210024 	addik	r1, r1, 36
2002750c:	b60f0008 	rtsd	r15, 8
20027510:	80000000 	or	r0, r0, r0

20027514 <BitstreamReadUtils_vld_u_name>:
	static void BitstreamReadUtils_vld_u_name(u8 nb, u16 fifo[10], i32 res[1], char * name) {
20027514:	3021ffd4 	addik	r1, r1, -44
20027518:	f9e10000 	swi	r15, r1, 0
2002751c:	fa610024 	swi	r19, r1, 36
20027520:	fa810028 	swi	r20, r1, 40
20027524:	12610000 	addk	r19, r1, r0
20027528:	96808000 	mfs	r20, rpc
2002752c:	b000dffd 	imm	-8195
20027530:	3294a434 	addik	r20, r20, -23500
20027534:	10650000 	addk	r3, r5, r0
20027538:	f8d30034 	swi	r6, r19, 52
2002753c:	f8f30038 	swi	r7, r19, 56
20027540:	f913003c 	swi	r8, r19, 60
20027544:	f0730030 	sbi	r3, r19, 48
		i32 local_DEBUG_PARSER;
		i32 tmp_res;
	
		BitstreamReadUtils_vld_u(nb, fifo, res);
20027548:	e0730030 	lbui	r3, r19, 48
2002754c:	10a30000 	addk	r5, r3, r0
20027550:	e8d30034 	lwi	r6, r19, 52
20027554:	e8f30038 	lwi	r7, r19, 56
20027558:	b0000000 	imm	0
2002755c:	e87406b0 	lwi	r3, r20, 1712
20027560:	99fc1800 	brald	r15, r3
20027564:	80000000 	or	r0, r0, r0
		local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
20027568:	f813001c 	swi	r0, r19, 28
		if (local_DEBUG_PARSER) {
2002756c:	e873001c 	lwi	r3, r19, 28
20027570:	bc030010 	beqi	r3, 16		// 20027580
			tmp_res = res[0];
20027574:	e8730038 	lwi	r3, r19, 56
20027578:	e8630000 	lwi	r3, r3, 0
2002757c:	f8730020 	swi	r3, r19, 32
		}
	}
20027580:	e9e10000 	lwi	r15, r1, 0
20027584:	10330000 	addk	r1, r19, r0
20027588:	ea610024 	lwi	r19, r1, 36
2002758c:	ea810028 	lwi	r20, r1, 40
20027590:	3021002c 	addik	r1, r1, 44
20027594:	b60f0008 	rtsd	r15, 8
20027598:	80000000 	or	r0, r0, r0

2002759c <BitstreamReadUtils_showBits>:
	static void BitstreamReadUtils_showBits(u8 nb, u16 fifo[10], i32 res[1]) {
2002759c:	3021ffb8 	addik	r1, r1, -72
200275a0:	f9e10000 	swi	r15, r1, 0
200275a4:	fa610040 	swi	r19, r1, 64
200275a8:	fa810044 	swi	r20, r1, 68
200275ac:	12610000 	addk	r19, r1, r0
200275b0:	96808000 	mfs	r20, rpc
200275b4:	b000dffd 	imm	-8195
200275b8:	3294a3ac 	addik	r20, r20, -23636
200275bc:	10650000 	addk	r3, r5, r0
200275c0:	f8d30050 	swi	r6, r19, 80
200275c4:	f8f30054 	swi	r7, r19, 84
200275c8:	f073004c 	sbi	r3, r19, 76
		i32 tmp_res;
		u16 tmp_fifo;
		i32 tmp_res0;
		u16 tmp_fifo0;
	
		nb_v = nb;
200275cc:	e073004c 	lbui	r3, r19, 76
200275d0:	f073001c 	sbi	r3, r19, 28
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
200275d4:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200275d8:	f0730023 	sbi	r3, r19, 35
		cptBits = fifo[local_FIFO_CPT_BITS];
200275dc:	e0730023 	lbui	r3, r19, 35
200275e0:	10631800 	addk	r3, r3, r3
200275e4:	e8930050 	lwi	r4, r19, 80
200275e8:	10641800 	addk	r3, r4, r3
200275ec:	e4630000 	lhui	r3, r3, 0
200275f0:	f473001e 	shi	r3, r19, 30
		idx = BitstreamReadUtils_getFifoIdx(cptBits, fifo);
200275f4:	e473001e 	lhui	r3, r19, 30
200275f8:	10a30000 	addk	r5, r3, r0
200275fc:	e8d30050 	lwi	r6, r19, 80
20027600:	b0000000 	imm	0
20027604:	e89406a0 	lwi	r4, r20, 1696
20027608:	99fc2000 	brald	r15, r4
2002760c:	80000000 	or	r0, r0, r0
20027610:	f4730020 	shi	r3, r19, 32
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20027614:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20027618:	f0730024 	sbi	r3, r19, 36
		cpt = cptBits & local_FIFO_SIZE - 1;
2002761c:	e473001e 	lhui	r3, r19, 30
20027620:	90830060 	sext8	r4, r3
20027624:	e0730024 	lbui	r3, r19, 36
20027628:	3063ffff 	addik	r3, r3, -1
2002762c:	a46300ff 	andi	r3, r3, 255
20027630:	90630060 	sext8	r3, r3
20027634:	84641800 	and	r3, r4, r3
20027638:	90630060 	sext8	r3, r3
2002763c:	f0730022 	sbi	r3, r19, 34
		local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
20027640:	f8130028 	swi	r0, r19, 40
		if (local_DEBUG_PARSER) {
			if (nb > cptBits) {
			}
		}
		res[0] = 0;
20027644:	e8730054 	lwi	r3, r19, 84
20027648:	f8030000 	swi	r0, r3, 0
		if (cpt == 0) {
2002764c:	e0730022 	lbui	r3, r19, 34
20027650:	bc230018 	bnei	r3, 24		// 20027668
			local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20027654:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20027658:	f0730024 	sbi	r3, r19, 36
			cpt = local_FIFO_SIZE;
2002765c:	e0730024 	lbui	r3, r19, 36
20027660:	f0730022 	sbi	r3, r19, 34
		}
		while (nb_v > cpt) {
20027664:	b800010c 	bri	268		// 20027770
20027668:	b8000108 	bri	264		// 20027770
			tmp_res = res[0];
2002766c:	e8730054 	lwi	r3, r19, 84
20027670:	e8630000 	lwi	r3, r3, 0
20027674:	f873002c 	swi	r3, r19, 44
			tmp_fifo = fifo[idx];
20027678:	e4730020 	lhui	r3, r19, 32
2002767c:	10631800 	addk	r3, r3, r3
20027680:	e8930050 	lwi	r4, r19, 80
20027684:	10641800 	addk	r3, r4, r3
20027688:	e4630000 	lhui	r3, r3, 0
2002768c:	f4730030 	shi	r3, r19, 48
			res[0] = (tmp_res << cpt) + (tmp_fifo & (1 << cpt) - 1);
20027690:	e0730022 	lbui	r3, r19, 34
20027694:	e893002c 	lwi	r4, r19, 44
20027698:	44841c00 	bsll	r4, r4, r3
2002769c:	e4b30030 	lhui	r5, r19, 48
200276a0:	e0730022 	lbui	r3, r19, 34
200276a4:	30c00001 	addik	r6, r0, 1
200276a8:	44661c00 	bsll	r3, r6, r3
200276ac:	3063ffff 	addik	r3, r3, -1
200276b0:	84651800 	and	r3, r5, r3
200276b4:	10841800 	addk	r4, r4, r3
200276b8:	e8730054 	lwi	r3, r19, 84
200276bc:	f8830000 	swi	r4, r3, 0
			cptBits = cptBits - cpt;
200276c0:	e0730022 	lbui	r3, r19, 34
200276c4:	b0000000 	imm	0
200276c8:	a463ffff 	andi	r3, r3, -1
200276cc:	e493001e 	lhui	r4, r19, 30
200276d0:	14632000 	rsubk	r3, r3, r4
200276d4:	f473001e 	shi	r3, r19, 30
			nb_v = nb_v - cpt;
200276d8:	e093001c 	lbui	r4, r19, 28
200276dc:	e0730022 	lbui	r3, r19, 34
200276e0:	14632000 	rsubk	r3, r3, r4
200276e4:	f073001c 	sbi	r3, r19, 28
			local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
200276e8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200276ec:	f0730024 	sbi	r3, r19, 36
			idx = idx + 1 & local_FIFO_SIZE - 1;
200276f0:	e4730020 	lhui	r3, r19, 32
200276f4:	30630001 	addik	r3, r3, 1
200276f8:	b0000000 	imm	0
200276fc:	a463ffff 	andi	r3, r3, -1
20027700:	90830061 	sext16	r4, r3
20027704:	e0730024 	lbui	r3, r19, 36
20027708:	b0000000 	imm	0
2002770c:	a463ffff 	andi	r3, r3, -1
20027710:	3063ffff 	addik	r3, r3, -1
20027714:	b0000000 	imm	0
20027718:	a463ffff 	andi	r3, r3, -1
2002771c:	90630061 	sext16	r3, r3
20027720:	84641800 	and	r3, r4, r3
20027724:	90630061 	sext16	r3, r3
20027728:	f4730020 	shi	r3, r19, 32
			local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
2002772c:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20027730:	f0730024 	sbi	r3, r19, 36
			cpt = cptBits & local_FIFO_SIZE - 1;
20027734:	e473001e 	lhui	r3, r19, 30
20027738:	90830060 	sext8	r4, r3
2002773c:	e0730024 	lbui	r3, r19, 36
20027740:	3063ffff 	addik	r3, r3, -1
20027744:	a46300ff 	andi	r3, r3, 255
20027748:	90630060 	sext8	r3, r3
2002774c:	84641800 	and	r3, r4, r3
20027750:	90630060 	sext8	r3, r3
20027754:	f0730022 	sbi	r3, r19, 34
			if (cpt == 0) {
20027758:	e0730022 	lbui	r3, r19, 34
2002775c:	bc230014 	bnei	r3, 20		// 20027770
				local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20027760:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20027764:	f0730024 	sbi	r3, r19, 36
				cpt = local_FIFO_SIZE;
20027768:	e0730024 	lbui	r3, r19, 36
2002776c:	f0730022 	sbi	r3, r19, 34
		res[0] = 0;
		if (cpt == 0) {
			local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
			cpt = local_FIFO_SIZE;
		}
		while (nb_v > cpt) {
20027770:	e093001c 	lbui	r4, r19, 28
20027774:	e0730022 	lbui	r3, r19, 34
20027778:	16441803 	cmpu	r18, r4, r3
2002777c:	bc52fef0 	blti	r18, -272		// 2002766c
			if (cpt == 0) {
				local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
				cpt = local_FIFO_SIZE;
			}
		}
		cpt = cpt - nb_v;
20027780:	e0930022 	lbui	r4, r19, 34
20027784:	e073001c 	lbui	r3, r19, 28
20027788:	14632000 	rsubk	r3, r3, r4
2002778c:	f0730022 	sbi	r3, r19, 34
		tmp_res0 = res[0];
20027790:	e8730054 	lwi	r3, r19, 84
20027794:	e8630000 	lwi	r3, r3, 0
20027798:	f8730034 	swi	r3, r19, 52
		tmp_fifo0 = fifo[idx];
2002779c:	e4730020 	lhui	r3, r19, 32
200277a0:	10631800 	addk	r3, r3, r3
200277a4:	e8930050 	lwi	r4, r19, 80
200277a8:	10641800 	addk	r3, r4, r3
200277ac:	e4630000 	lhui	r3, r3, 0
200277b0:	f4730038 	shi	r3, r19, 56
		res[0] = (tmp_res0 << nb_v) + (tmp_fifo0 >> cpt & (1 << nb_v) - 1);
200277b4:	e073001c 	lbui	r3, r19, 28
200277b8:	e8930034 	lwi	r4, r19, 52
200277bc:	44841c00 	bsll	r4, r4, r3
200277c0:	e4b30038 	lhui	r5, r19, 56
200277c4:	e0730022 	lbui	r3, r19, 34
200277c8:	44a51a00 	bsra	r5, r5, r3
200277cc:	e073001c 	lbui	r3, r19, 28
200277d0:	30c00001 	addik	r6, r0, 1
200277d4:	44661c00 	bsll	r3, r6, r3
200277d8:	3063ffff 	addik	r3, r3, -1
200277dc:	84651800 	and	r3, r5, r3
200277e0:	10841800 	addk	r4, r4, r3
200277e4:	e8730054 	lwi	r3, r19, 84
200277e8:	f8830000 	swi	r4, r3, 0
		cptBits = cptBits - nb_v;
200277ec:	e073001c 	lbui	r3, r19, 28
200277f0:	b0000000 	imm	0
200277f4:	a463ffff 	andi	r3, r3, -1
200277f8:	e493001e 	lhui	r4, r19, 30
200277fc:	14632000 	rsubk	r3, r3, r4
20027800:	f473001e 	shi	r3, r19, 30
		nb_v = 0;
20027804:	f013001c 	sbi	r0, r19, 28
	}
20027808:	e9e10000 	lwi	r15, r1, 0
2002780c:	10330000 	addk	r1, r19, r0
20027810:	ea610040 	lwi	r19, r1, 64
20027814:	ea810044 	lwi	r20, r1, 68
20027818:	30210048 	addik	r1, r1, 72
2002781c:	b60f0008 	rtsd	r15, 8
20027820:	80000000 	or	r0, r0, r0

20027824 <vldFunctions_get_mcbpc>:
	static void vldFunctions_get_mcbpc(i16 fifo[10], i32 res[1], char * name, u8 vop_coding_type) {
20027824:	3021ffbc 	addik	r1, r1, -68
20027828:	f9e10000 	swi	r15, r1, 0
2002782c:	fa61003c 	swi	r19, r1, 60
20027830:	fa810040 	swi	r20, r1, 64
20027834:	12610000 	addk	r19, r1, r0
20027838:	96808000 	mfs	r20, rpc
2002783c:	b000dffd 	imm	-8195
20027840:	3294a124 	addik	r20, r20, -24284
20027844:	f8b30048 	swi	r5, r19, 72
20027848:	f8d3004c 	swi	r6, r19, 76
2002784c:	f8f30050 	swi	r7, r19, 80
20027850:	10680000 	addk	r3, r8, r0
20027854:	f0730054 	sbi	r3, r19, 84
		i32 tmp_res0;
		i16 tmp_mcbpc_inter_table;
		i16 tmp_mcbpc_inter_table0;
		i32 tmp_res1;
	
		local_I_VOP = vldFunctions_I_VOP;
20027858:	f8130020 	swi	r0, r19, 32
		if (vop_coding_type == local_I_VOP) {
2002785c:	e0930054 	lbui	r4, r19, 84
20027860:	e8730020 	lwi	r3, r19, 32
20027864:	88641800 	xor	r3, r4, r3
20027868:	bc2300bc 	bnei	r3, 188		// 20027924
			BitstreamReadUtils_showBits(9, fifo, res);
2002786c:	30a00009 	addik	r5, r0, 9
20027870:	e8d30048 	lwi	r6, r19, 72
20027874:	e8f3004c 	lwi	r7, r19, 76
20027878:	b0000000 	imm	0
2002787c:	e87406b8 	lwi	r3, r20, 1720
20027880:	99fc1800 	brald	r15, r3
20027884:	80000000 	or	r0, r0, r0
			index_replaced = res[0];
20027888:	e873004c 	lwi	r3, r19, 76
2002788c:	e8630000 	lwi	r3, r3, 0
20027890:	f873001c 	swi	r3, r19, 28
			index_replaced = index_replaced >> 3;
20027894:	e873001c 	lwi	r3, r19, 28
20027898:	64630203 	bsrai	r3, r3, 3
2002789c:	f873001c 	swi	r3, r19, 28
			tmp_mcbpc_intra_table = vldTables_mcbpc_intra_table[index_replaced][1];
200278a0:	b0000000 	imm	0
200278a4:	e89405a0 	lwi	r4, r20, 1440
200278a8:	e873001c 	lwi	r3, r19, 28
200278ac:	10631800 	addk	r3, r3, r3
200278b0:	10641800 	addk	r3, r4, r3
200278b4:	30630001 	addik	r3, r3, 1
200278b8:	e0630000 	lbui	r3, r3, 0
200278bc:	f0730024 	sbi	r3, r19, 36
			BitstreamReadUtils_flushBits(tmp_mcbpc_intra_table, fifo);
200278c0:	e0730024 	lbui	r3, r19, 36
200278c4:	10a30000 	addk	r5, r3, r0
200278c8:	e8d30048 	lwi	r6, r19, 72
200278cc:	b0000000 	imm	0
200278d0:	e87406a8 	lwi	r3, r20, 1704
200278d4:	99fc1800 	brald	r15, r3
200278d8:	80000000 	or	r0, r0, r0
			tmp_mcbpc_intra_table0 = vldTables_mcbpc_intra_table[index_replaced][0];
200278dc:	b0000000 	imm	0
200278e0:	e89405a0 	lwi	r4, r20, 1440
200278e4:	e873001c 	lwi	r3, r19, 28
200278e8:	10631800 	addk	r3, r3, r3
200278ec:	10641800 	addk	r3, r4, r3
200278f0:	e0630000 	lbui	r3, r3, 0
200278f4:	f0730025 	sbi	r3, r19, 37
			res[0] = tmp_mcbpc_intra_table0;
200278f8:	e0730025 	lbui	r3, r19, 37
200278fc:	90830060 	sext8	r4, r3
20027900:	e873004c 	lwi	r3, r19, 76
20027904:	f8830000 	swi	r4, r3, 0
			local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
20027908:	f8130028 	swi	r0, r19, 40
			if (local_DEBUG_PARSER) {
2002790c:	e8730028 	lwi	r3, r19, 40
20027910:	bc0300e8 	beqi	r3, 232		// 200279f8
				tmp_res = res[0];
20027914:	e873004c 	lwi	r3, r19, 76
20027918:	e8630000 	lwi	r3, r3, 0
2002791c:	f873002c 	swi	r3, r19, 44
20027920:	b80000d8 	bri	216		// 200279f8
			}
		} else {
			BitstreamReadUtils_showBits(9, fifo, res);
20027924:	30a00009 	addik	r5, r0, 9
20027928:	e8d30048 	lwi	r6, r19, 72
2002792c:	e8f3004c 	lwi	r7, r19, 76
20027930:	b0000000 	imm	0
20027934:	e87406b8 	lwi	r3, r20, 1720
20027938:	99fc1800 	brald	r15, r3
2002793c:	80000000 	or	r0, r0, r0
			tmp_res0 = res[0];
20027940:	e873004c 	lwi	r3, r19, 76
20027944:	e8630000 	lwi	r3, r3, 0
20027948:	f8730030 	swi	r3, r19, 48
			if (tmp_res0 < 256) {
2002794c:	e8930030 	lwi	r4, r19, 48
20027950:	306000ff 	addik	r3, r0, 255
20027954:	16441801 	cmp	r18, r4, r3
20027958:	bc520014 	blti	r18, 20		// 2002796c
				index_replaced = res[0];
2002795c:	e873004c 	lwi	r3, r19, 76
20027960:	e8630000 	lwi	r3, r3, 0
20027964:	f873001c 	swi	r3, r19, 28
20027968:	b800000c 	bri	12		// 20027974
			} else {
				index_replaced = 256;
2002796c:	30600100 	addik	r3, r0, 256
20027970:	f873001c 	swi	r3, r19, 28
			}
			tmp_mcbpc_inter_table = vldTables_mcbpc_inter_table[index_replaced][1];
20027974:	b0000000 	imm	0
20027978:	e89405a4 	lwi	r4, r20, 1444
2002797c:	e873001c 	lwi	r3, r19, 28
20027980:	64630402 	bslli	r3, r3, 2
20027984:	10641800 	addk	r3, r4, r3
20027988:	30630002 	addik	r3, r3, 2
2002798c:	e4630000 	lhui	r3, r3, 0
20027990:	f4730034 	shi	r3, r19, 52
			BitstreamReadUtils_flushBits(tmp_mcbpc_inter_table, fifo);
20027994:	e4730034 	lhui	r3, r19, 52
20027998:	a46300ff 	andi	r3, r3, 255
2002799c:	10a30000 	addk	r5, r3, r0
200279a0:	e8d30048 	lwi	r6, r19, 72
200279a4:	b0000000 	imm	0
200279a8:	e87406a8 	lwi	r3, r20, 1704
200279ac:	99fc1800 	brald	r15, r3
200279b0:	80000000 	or	r0, r0, r0
			tmp_mcbpc_inter_table0 = vldTables_mcbpc_inter_table[index_replaced][0];
200279b4:	b0000000 	imm	0
200279b8:	e89405a4 	lwi	r4, r20, 1444
200279bc:	e873001c 	lwi	r3, r19, 28
200279c0:	64630402 	bslli	r3, r3, 2
200279c4:	10641800 	addk	r3, r4, r3
200279c8:	e4630000 	lhui	r3, r3, 0
200279cc:	f4730036 	shi	r3, r19, 54
			res[0] = tmp_mcbpc_inter_table0;
200279d0:	e4730036 	lhui	r3, r19, 54
200279d4:	90830061 	sext16	r4, r3
200279d8:	e873004c 	lwi	r3, r19, 76
200279dc:	f8830000 	swi	r4, r3, 0
			local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
200279e0:	f8130028 	swi	r0, r19, 40
			if (local_DEBUG_PARSER) {
200279e4:	e8730028 	lwi	r3, r19, 40
200279e8:	bc030010 	beqi	r3, 16		// 200279f8
				tmp_res1 = res[0];
200279ec:	e873004c 	lwi	r3, r19, 76
200279f0:	e8630000 	lwi	r3, r3, 0
200279f4:	f8730038 	swi	r3, r19, 56
			}
		}
	}
200279f8:	e9e10000 	lwi	r15, r1, 0
200279fc:	10330000 	addk	r1, r19, r0
20027a00:	ea61003c 	lwi	r19, r1, 60
20027a04:	ea810040 	lwi	r20, r1, 64
20027a08:	30210044 	addik	r1, r1, 68
20027a0c:	b60f0008 	rtsd	r15, 8
20027a10:	80000000 	or	r0, r0, r0

20027a14 <vldFunctions_get_cbpy>:
	static void vldFunctions_get_cbpy(i16 fifo[10], i32 res[1], char * name, i32 intra) {
20027a14:	3021ffc8 	addik	r1, r1, -56
20027a18:	f9e10000 	swi	r15, r1, 0
20027a1c:	fa610030 	swi	r19, r1, 48
20027a20:	fa810034 	swi	r20, r1, 52
20027a24:	12610000 	addk	r19, r1, r0
20027a28:	96808000 	mfs	r20, rpc
20027a2c:	b000dffd 	imm	-8195
20027a30:	32949f34 	addik	r20, r20, -24780
20027a34:	f8b3003c 	swi	r5, r19, 60
20027a38:	f8d30040 	swi	r6, r19, 64
20027a3c:	f8f30044 	swi	r7, r19, 68
20027a40:	f9130048 	swi	r8, r19, 72
		i8 tmp_cbpy_table0;
		i32 tmp_res;
		i32 local_DEBUG_PARSER;
		i32 tmp_res0;
	
		BitstreamReadUtils_showBits(6, fifo, res);
20027a44:	30a00006 	addik	r5, r0, 6
20027a48:	e8d3003c 	lwi	r6, r19, 60
20027a4c:	e8f30040 	lwi	r7, r19, 64
20027a50:	b0000000 	imm	0
20027a54:	e87406b8 	lwi	r3, r20, 1720
20027a58:	99fc1800 	brald	r15, r3
20027a5c:	80000000 	or	r0, r0, r0
		index_replaced = res[0];
20027a60:	e8730040 	lwi	r3, r19, 64
20027a64:	e8630000 	lwi	r3, r3, 0
20027a68:	f873001c 	swi	r3, r19, 28
		tmp_cbpy_table = vldTables_cbpy_table[index_replaced][1];
20027a6c:	b0000000 	imm	0
20027a70:	e89405a8 	lwi	r4, r20, 1448
20027a74:	e873001c 	lwi	r3, r19, 28
20027a78:	10631800 	addk	r3, r3, r3
20027a7c:	10641800 	addk	r3, r4, r3
20027a80:	30630001 	addik	r3, r3, 1
20027a84:	e0630000 	lbui	r3, r3, 0
20027a88:	f0730020 	sbi	r3, r19, 32
		BitstreamReadUtils_flushBits(tmp_cbpy_table, fifo);
20027a8c:	e0730020 	lbui	r3, r19, 32
20027a90:	10a30000 	addk	r5, r3, r0
20027a94:	e8d3003c 	lwi	r6, r19, 60
20027a98:	b0000000 	imm	0
20027a9c:	e87406a8 	lwi	r3, r20, 1704
20027aa0:	99fc1800 	brald	r15, r3
20027aa4:	80000000 	or	r0, r0, r0
		tmp_cbpy_table0 = vldTables_cbpy_table[index_replaced][0];
20027aa8:	b0000000 	imm	0
20027aac:	e89405a8 	lwi	r4, r20, 1448
20027ab0:	e873001c 	lwi	r3, r19, 28
20027ab4:	10631800 	addk	r3, r3, r3
20027ab8:	10641800 	addk	r3, r4, r3
20027abc:	e0630000 	lbui	r3, r3, 0
20027ac0:	f0730021 	sbi	r3, r19, 33
		res[0] = tmp_cbpy_table0;
20027ac4:	e0730021 	lbui	r3, r19, 33
20027ac8:	90830060 	sext8	r4, r3
20027acc:	e8730040 	lwi	r3, r19, 64
20027ad0:	f8830000 	swi	r4, r3, 0
		if (!intra) {
20027ad4:	e8730048 	lwi	r3, r19, 72
20027ad8:	bc230024 	bnei	r3, 36		// 20027afc
			tmp_res = res[0];
20027adc:	e8730040 	lwi	r3, r19, 64
20027ae0:	e8630000 	lwi	r3, r3, 0
20027ae4:	f8730024 	swi	r3, r19, 36
			res[0] = 15 - tmp_res;
20027ae8:	e8730024 	lwi	r3, r19, 36
20027aec:	30a0000f 	addik	r5, r0, 15
20027af0:	14832800 	rsubk	r4, r3, r5
20027af4:	e8730040 	lwi	r3, r19, 64
20027af8:	f8830000 	swi	r4, r3, 0
		}
		local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
20027afc:	f8130028 	swi	r0, r19, 40
		if (local_DEBUG_PARSER) {
20027b00:	e8730028 	lwi	r3, r19, 40
20027b04:	bc030010 	beqi	r3, 16		// 20027b14
			tmp_res0 = res[0];
20027b08:	e8730040 	lwi	r3, r19, 64
20027b0c:	e8630000 	lwi	r3, r3, 0
20027b10:	f873002c 	swi	r3, r19, 44
		}
	}
20027b14:	e9e10000 	lwi	r15, r1, 0
20027b18:	10330000 	addk	r1, r19, r0
20027b1c:	ea610030 	lwi	r19, r1, 48
20027b20:	ea810034 	lwi	r20, r1, 52
20027b24:	30210038 	addik	r1, r1, 56
20027b28:	b60f0008 	rtsd	r15, 8
20027b2c:	80000000 	or	r0, r0, r0

20027b30 <vldFunctions_get_dc_size_lum>:
	static void vldFunctions_get_dc_size_lum(i16 fifo[10], i32 res[1], char * name) {
20027b30:	3021ffc4 	addik	r1, r1, -60
20027b34:	f9e10000 	swi	r15, r1, 0
20027b38:	fa610034 	swi	r19, r1, 52
20027b3c:	fa810038 	swi	r20, r1, 56
20027b40:	12610000 	addk	r19, r1, r0
20027b44:	96808000 	mfs	r20, rpc
20027b48:	b000dffd 	imm	-8195
20027b4c:	32949e18 	addik	r20, r20, -25064
20027b50:	f8b30040 	swi	r5, r19, 64
20027b54:	f8d30044 	swi	r6, r19, 68
20027b58:	f8f30048 	swi	r7, r19, 72
		i8 tmp_dc_lum_tab;
		i8 tmp_dc_lum_tab0;
		i32 local_DEBUG_PARSER;
		i32 tmp_res;
	
		valEnd = 0;
20027b5c:	f8130024 	swi	r0, r19, 36
		BitstreamReadUtils_showBits(11, fifo, res);
20027b60:	30a0000b 	addik	r5, r0, 11
20027b64:	e8d30040 	lwi	r6, r19, 64
20027b68:	e8f30044 	lwi	r7, r19, 68
20027b6c:	b0000000 	imm	0
20027b70:	e87406b8 	lwi	r3, r20, 1720
20027b74:	99fc1800 	brald	r15, r3
20027b78:	80000000 	or	r0, r0, r0
		code = res[0];
20027b7c:	e8730044 	lwi	r3, r19, 68
20027b80:	e8630000 	lwi	r3, r3, 0
20027b84:	f873001c 	swi	r3, r19, 28
		val = 11;
20027b88:	3060000b 	addik	r3, r0, 11
20027b8c:	f8730020 	swi	r3, r19, 32
		while (val > 3 && !valEnd) {
20027b90:	b8000054 	bri	84		// 20027be4
			if (code == 1) {
20027b94:	e873001c 	lwi	r3, r19, 28
20027b98:	a8630001 	xori	r3, r3, 1
20027b9c:	bc230030 	bnei	r3, 48		// 20027bcc
				BitstreamReadUtils_flushBits(val, fifo);
20027ba0:	e8730020 	lwi	r3, r19, 32
20027ba4:	a46300ff 	andi	r3, r3, 255
20027ba8:	10a30000 	addk	r5, r3, r0
20027bac:	e8d30040 	lwi	r6, r19, 64
20027bb0:	b0000000 	imm	0
20027bb4:	e87406a8 	lwi	r3, r20, 1704
20027bb8:	99fc1800 	brald	r15, r3
20027bbc:	80000000 	or	r0, r0, r0
				valEnd = 1;
20027bc0:	30600001 	addik	r3, r0, 1
20027bc4:	f8730024 	swi	r3, r19, 36
20027bc8:	b800001c 	bri	28		// 20027be4
			} else {
				code = code >> 1;
20027bcc:	e873001c 	lwi	r3, r19, 28
20027bd0:	90630001 	sra	r3, r3
20027bd4:	f873001c 	swi	r3, r19, 28
				val = val - 1;
20027bd8:	e8730020 	lwi	r3, r19, 32
20027bdc:	3063ffff 	addik	r3, r3, -1
20027be0:	f8730020 	swi	r3, r19, 32
	
		valEnd = 0;
		BitstreamReadUtils_showBits(11, fifo, res);
		code = res[0];
		val = 11;
		while (val > 3 && !valEnd) {
20027be4:	e8930020 	lwi	r4, r19, 32
20027be8:	30600003 	addik	r3, r0, 3
20027bec:	16441801 	cmp	r18, r4, r3
20027bf0:	bcb2000c 	bgei	r18, 12		// 20027bfc
20027bf4:	e8730024 	lwi	r3, r19, 36
20027bf8:	bc03ff9c 	beqi	r3, -100		// 20027b94
			} else {
				code = code >> 1;
				val = val - 1;
			}
		}
		if (valEnd) {
20027bfc:	e8730024 	lwi	r3, r19, 36
20027c00:	bc030018 	beqi	r3, 24		// 20027c18
			res[0] = val + 1;
20027c04:	e8730020 	lwi	r3, r19, 32
20027c08:	30830001 	addik	r4, r3, 1
20027c0c:	e8730044 	lwi	r3, r19, 68
20027c10:	f8830000 	swi	r4, r3, 0
20027c14:	b800006c 	bri	108		// 20027c80
		} else {
			tmp_dc_lum_tab = vldTables_dc_lum_tab[code][1];
20027c18:	b0000000 	imm	0
20027c1c:	e89405ac 	lwi	r4, r20, 1452
20027c20:	e873001c 	lwi	r3, r19, 28
20027c24:	10631800 	addk	r3, r3, r3
20027c28:	10641800 	addk	r3, r4, r3
20027c2c:	30630001 	addik	r3, r3, 1
20027c30:	e0630000 	lbui	r3, r3, 0
20027c34:	f0730028 	sbi	r3, r19, 40
			BitstreamReadUtils_flushBits(tmp_dc_lum_tab, fifo);
20027c38:	e0730028 	lbui	r3, r19, 40
20027c3c:	10a30000 	addk	r5, r3, r0
20027c40:	e8d30040 	lwi	r6, r19, 64
20027c44:	b0000000 	imm	0
20027c48:	e87406a8 	lwi	r3, r20, 1704
20027c4c:	99fc1800 	brald	r15, r3
20027c50:	80000000 	or	r0, r0, r0
			tmp_dc_lum_tab0 = vldTables_dc_lum_tab[code][0];
20027c54:	b0000000 	imm	0
20027c58:	e89405ac 	lwi	r4, r20, 1452
20027c5c:	e873001c 	lwi	r3, r19, 28
20027c60:	10631800 	addk	r3, r3, r3
20027c64:	10641800 	addk	r3, r4, r3
20027c68:	e0630000 	lbui	r3, r3, 0
20027c6c:	f0730029 	sbi	r3, r19, 41
			res[0] = tmp_dc_lum_tab0;
20027c70:	e0730029 	lbui	r3, r19, 41
20027c74:	90830060 	sext8	r4, r3
20027c78:	e8730044 	lwi	r3, r19, 68
20027c7c:	f8830000 	swi	r4, r3, 0
		}
		local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
20027c80:	f813002c 	swi	r0, r19, 44
		if (local_DEBUG_PARSER) {
20027c84:	e873002c 	lwi	r3, r19, 44
20027c88:	bc030010 	beqi	r3, 16		// 20027c98
			tmp_res = res[0];
20027c8c:	e8730044 	lwi	r3, r19, 68
20027c90:	e8630000 	lwi	r3, r3, 0
20027c94:	f8730030 	swi	r3, r19, 48
		}
	}
20027c98:	e9e10000 	lwi	r15, r1, 0
20027c9c:	10330000 	addk	r1, r19, r0
20027ca0:	ea610034 	lwi	r19, r1, 52
20027ca4:	ea810038 	lwi	r20, r1, 56
20027ca8:	3021003c 	addik	r1, r1, 60
20027cac:	b60f0008 	rtsd	r15, 8
20027cb0:	80000000 	or	r0, r0, r0

20027cb4 <vldFunctions_get_dc_size_chrom>:
	static void vldFunctions_get_dc_size_chrom(i16 fifo[10], i32 res[1], char * name) {
20027cb4:	3021ffc4 	addik	r1, r1, -60
20027cb8:	f9e10000 	swi	r15, r1, 0
20027cbc:	fa610034 	swi	r19, r1, 52
20027cc0:	fa810038 	swi	r20, r1, 56
20027cc4:	12610000 	addk	r19, r1, r0
20027cc8:	96808000 	mfs	r20, rpc
20027ccc:	b000dffd 	imm	-8195
20027cd0:	32949c94 	addik	r20, r20, -25452
20027cd4:	f8b30040 	swi	r5, r19, 64
20027cd8:	f8d30044 	swi	r6, r19, 68
20027cdc:	f8f30048 	swi	r7, r19, 72
		i32 valEnd;
		i32 tmp_res;
		i32 local_DEBUG_PARSER;
		i32 tmp_res0;
	
		valEnd = 0;
20027ce0:	f8130024 	swi	r0, r19, 36
		BitstreamReadUtils_showBits(12, fifo, res);
20027ce4:	30a0000c 	addik	r5, r0, 12
20027ce8:	e8d30040 	lwi	r6, r19, 64
20027cec:	e8f30044 	lwi	r7, r19, 68
20027cf0:	b0000000 	imm	0
20027cf4:	e87406b8 	lwi	r3, r20, 1720
20027cf8:	99fc1800 	brald	r15, r3
20027cfc:	80000000 	or	r0, r0, r0
		code = res[0];
20027d00:	e8730044 	lwi	r3, r19, 68
20027d04:	e8630000 	lwi	r3, r3, 0
20027d08:	f873001c 	swi	r3, r19, 28
		val = 12;
20027d0c:	3060000c 	addik	r3, r0, 12
20027d10:	f8730020 	swi	r3, r19, 32
		while (val > 2 && !valEnd) {
20027d14:	b8000054 	bri	84		// 20027d68
			if (code == 1) {
20027d18:	e873001c 	lwi	r3, r19, 28
20027d1c:	a8630001 	xori	r3, r3, 1
20027d20:	bc230030 	bnei	r3, 48		// 20027d50
				BitstreamReadUtils_flushBits(val, fifo);
20027d24:	e8730020 	lwi	r3, r19, 32
20027d28:	a46300ff 	andi	r3, r3, 255
20027d2c:	10a30000 	addk	r5, r3, r0
20027d30:	e8d30040 	lwi	r6, r19, 64
20027d34:	b0000000 	imm	0
20027d38:	e87406a8 	lwi	r3, r20, 1704
20027d3c:	99fc1800 	brald	r15, r3
20027d40:	80000000 	or	r0, r0, r0
				valEnd = 1;
20027d44:	30600001 	addik	r3, r0, 1
20027d48:	f8730024 	swi	r3, r19, 36
20027d4c:	b800001c 	bri	28		// 20027d68
			} else {
				code = code >> 1;
20027d50:	e873001c 	lwi	r3, r19, 28
20027d54:	90630001 	sra	r3, r3
20027d58:	f873001c 	swi	r3, r19, 28
				val = val - 1;
20027d5c:	e8730020 	lwi	r3, r19, 32
20027d60:	3063ffff 	addik	r3, r3, -1
20027d64:	f8730020 	swi	r3, r19, 32
	
		valEnd = 0;
		BitstreamReadUtils_showBits(12, fifo, res);
		code = res[0];
		val = 12;
		while (val > 2 && !valEnd) {
20027d68:	e8930020 	lwi	r4, r19, 32
20027d6c:	30600002 	addik	r3, r0, 2
20027d70:	16441801 	cmp	r18, r4, r3
20027d74:	bcb2000c 	bgei	r18, 12		// 20027d80
20027d78:	e8730024 	lwi	r3, r19, 36
20027d7c:	bc03ff9c 	beqi	r3, -100		// 20027d18
			} else {
				code = code >> 1;
				val = val - 1;
			}
		}
		if (valEnd) {
20027d80:	e8730024 	lwi	r3, r19, 36
20027d84:	bc030014 	beqi	r3, 20		// 20027d98
			res[0] = val;
20027d88:	e8730044 	lwi	r3, r19, 68
20027d8c:	e8930020 	lwi	r4, r19, 32
20027d90:	f8830000 	swi	r4, r3, 0
20027d94:	b8000040 	bri	64		// 20027dd4
		} else {
			BitstreamReadUtils_getBits(2, fifo, res);
20027d98:	30a00002 	addik	r5, r0, 2
20027d9c:	e8d30040 	lwi	r6, r19, 64
20027da0:	e8f30044 	lwi	r7, r19, 68
20027da4:	b0000000 	imm	0
20027da8:	e87406ac 	lwi	r3, r20, 1708
20027dac:	99fc1800 	brald	r15, r3
20027db0:	80000000 	or	r0, r0, r0
			tmp_res = res[0];
20027db4:	e8730044 	lwi	r3, r19, 68
20027db8:	e8630000 	lwi	r3, r3, 0
20027dbc:	f8730028 	swi	r3, r19, 40
			res[0] = 3 - tmp_res;
20027dc0:	e8730028 	lwi	r3, r19, 40
20027dc4:	30a00003 	addik	r5, r0, 3
20027dc8:	14832800 	rsubk	r4, r3, r5
20027dcc:	e8730044 	lwi	r3, r19, 68
20027dd0:	f8830000 	swi	r4, r3, 0
		}
		local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
20027dd4:	f813002c 	swi	r0, r19, 44
		if (local_DEBUG_PARSER) {
20027dd8:	e873002c 	lwi	r3, r19, 44
20027ddc:	bc030010 	beqi	r3, 16		// 20027dec
			tmp_res0 = res[0];
20027de0:	e8730044 	lwi	r3, r19, 68
20027de4:	e8630000 	lwi	r3, r3, 0
20027de8:	f8730030 	swi	r3, r19, 48
		}
	}
20027dec:	e9e10000 	lwi	r15, r1, 0
20027df0:	10330000 	addk	r1, r19, r0
20027df4:	ea610034 	lwi	r19, r1, 52
20027df8:	ea810038 	lwi	r20, r1, 56
20027dfc:	3021003c 	addik	r1, r1, 60
20027e00:	b60f0008 	rtsd	r15, 8
20027e04:	80000000 	or	r0, r0, r0

20027e08 <vldFunctions_get_dc_dif>:
	static void vldFunctions_get_dc_dif(i16 fifo[10], i32 res[1], char * name, i16 dc_size) {
20027e08:	3021ffc8 	addik	r1, r1, -56
20027e0c:	f9e10000 	swi	r15, r1, 0
20027e10:	fa610030 	swi	r19, r1, 48
20027e14:	fa810034 	swi	r20, r1, 52
20027e18:	12610000 	addk	r19, r1, r0
20027e1c:	96808000 	mfs	r20, rpc
20027e20:	b000dffd 	imm	-8195
20027e24:	32949b40 	addik	r20, r20, -25792
20027e28:	f8b3003c 	swi	r5, r19, 60
20027e2c:	f8d30040 	swi	r6, r19, 64
20027e30:	f8f30044 	swi	r7, r19, 68
20027e34:	10680000 	addk	r3, r8, r0
20027e38:	f4730048 	shi	r3, r19, 72
		i32 tmp_res;
		i32 tmp_res0;
		i32 local_DEBUG_PARSER;
		i32 tmp_res1;
	
		BitstreamReadUtils_vld_u(dc_size, fifo, res);
20027e3c:	e4730048 	lhui	r3, r19, 72
20027e40:	a46300ff 	andi	r3, r3, 255
20027e44:	10a30000 	addk	r5, r3, r0
20027e48:	e8d3003c 	lwi	r6, r19, 60
20027e4c:	e8f30040 	lwi	r7, r19, 64
20027e50:	b0000000 	imm	0
20027e54:	e87406b0 	lwi	r3, r20, 1712
20027e58:	99fc1800 	brald	r15, r3
20027e5c:	80000000 	or	r0, r0, r0
		tmp_res = res[0];
20027e60:	e8730040 	lwi	r3, r19, 64
20027e64:	e8630000 	lwi	r3, r3, 0
20027e68:	f873001c 	swi	r3, r19, 28
		msb = tmp_res >> (dc_size - 1);
20027e6c:	e4730048 	lhui	r3, r19, 72
20027e70:	90630061 	sext16	r3, r3
20027e74:	3063ffff 	addik	r3, r3, -1
20027e78:	e893001c 	lwi	r4, r19, 28
20027e7c:	44641a00 	bsra	r3, r4, r3
20027e80:	f8730020 	swi	r3, r19, 32
		if (msb == 0) {
20027e84:	e8730020 	lwi	r3, r19, 32
20027e88:	bc230038 	bnei	r3, 56		// 20027ec0
			tmp_res0 = res[0];
20027e8c:	e8730040 	lwi	r3, r19, 64
20027e90:	e8630000 	lwi	r3, r3, 0
20027e94:	f8730024 	swi	r3, r19, 36
			res[0] = -1 * (tmp_res0 ^ (1 << dc_size) - 1);
20027e98:	e4730048 	lhui	r3, r19, 72
20027e9c:	90630061 	sext16	r3, r3
20027ea0:	30800001 	addik	r4, r0, 1
20027ea4:	44641c00 	bsll	r3, r4, r3
20027ea8:	3083ffff 	addik	r4, r3, -1
20027eac:	e8730024 	lwi	r3, r19, 36
20027eb0:	88641800 	xor	r3, r4, r3
20027eb4:	14830000 	rsubk	r4, r3, r0
20027eb8:	e8730040 	lwi	r3, r19, 64
20027ebc:	f8830000 	swi	r4, r3, 0
		}
		local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
20027ec0:	f8130028 	swi	r0, r19, 40
		if (local_DEBUG_PARSER) {
20027ec4:	e8730028 	lwi	r3, r19, 40
20027ec8:	bc030010 	beqi	r3, 16		// 20027ed8
			tmp_res1 = res[0];
20027ecc:	e8730040 	lwi	r3, r19, 64
20027ed0:	e8630000 	lwi	r3, r3, 0
20027ed4:	f873002c 	swi	r3, r19, 44
		}
	}
20027ed8:	e9e10000 	lwi	r15, r1, 0
20027edc:	10330000 	addk	r1, r19, r0
20027ee0:	ea610030 	lwi	r19, r1, 48
20027ee4:	ea810034 	lwi	r20, r1, 52
20027ee8:	30210038 	addik	r1, r1, 56
20027eec:	b60f0008 	rtsd	r15, 8
20027ef0:	80000000 	or	r0, r0, r0

20027ef4 <vldFunctions_GET_BITS>:
	static u32 vldFunctions_GET_BITS(u32 cache, i32 n) {
20027ef4:	3021fff4 	addik	r1, r1, -12
20027ef8:	fa610004 	swi	r19, r1, 4
20027efc:	fa810008 	swi	r20, r1, 8
20027f00:	12610000 	addk	r19, r1, r0
20027f04:	96808000 	mfs	r20, rpc
20027f08:	b000dffd 	imm	-8195
20027f0c:	32949a58 	addik	r20, r20, -26024
20027f10:	f8b30010 	swi	r5, r19, 16
20027f14:	f8d30014 	swi	r6, r19, 20
	
		return cache >> (32 - n);
20027f18:	e8730014 	lwi	r3, r19, 20
20027f1c:	30800020 	addik	r4, r0, 32	// 20 <_vector_hw_exception>
20027f20:	14632000 	rsubk	r3, r3, r4
20027f24:	e8930010 	lwi	r4, r19, 16
20027f28:	44641800 	bsrl	r3, r4, r3
	}
20027f2c:	10330000 	addk	r1, r19, r0
20027f30:	ea610004 	lwi	r19, r1, 4
20027f34:	ea810008 	lwi	r20, r1, 8
20027f38:	3021000c 	addik	r1, r1, 12
20027f3c:	b60f0008 	rtsd	r15, 8
20027f40:	80000000 	or	r0, r0, r0

20027f44 <vldFunctions_get_coeff>:
	static void vldFunctions_get_coeff(i16 fifo[10], u32 res[1], char * name, i32 is_intra, i32 last[1], i8 run[1], i8 level[1]) {
20027f44:	3021ff2c 	addik	r1, r1, -212
20027f48:	f9e10000 	swi	r15, r1, 0
20027f4c:	fa6100cc 	swi	r19, r1, 204
20027f50:	fa8100d0 	swi	r20, r1, 208
20027f54:	12610000 	addk	r19, r1, r0
20027f58:	96808000 	mfs	r20, rpc
20027f5c:	b000dffd 	imm	-8195
20027f60:	32949a04 	addik	r20, r20, -26108
20027f64:	f8b300d8 	swi	r5, r19, 216
20027f68:	f8d300dc 	swi	r6, r19, 220
20027f6c:	f8f300e0 	swi	r7, r19, 224
20027f70:	f91300e4 	swi	r8, r19, 228
20027f74:	f93300e8 	swi	r9, r19, 232
20027f78:	f95300ec 	swi	r10, r19, 236
		i8 tmp_run1;
		i8 tmp_level6;
		i32 tmp_last1;
		u8 tmp_if1;
	
		if (is_intra) {
20027f7c:	e87300e4 	lwi	r3, r19, 228
20027f80:	bc030010 	beqi	r3, 16		// 20027f90
			intra = 1;
20027f84:	30600001 	addik	r3, r0, 1
20027f88:	f073001c 	sbi	r3, r19, 28
20027f8c:	b8000008 	bri	8		// 20027f94
		} else {
			intra = 0;
20027f90:	f013001c 	sbi	r0, r19, 28
		}
		skip[0] = 1;
20027f94:	30600001 	addik	r3, r0, 1
20027f98:	f87300c0 	swi	r3, r19, 192
		skip[1] = 1;
20027f9c:	30600001 	addik	r3, r0, 1
20027fa0:	f87300c4 	swi	r3, r19, 196
		skip[2] = 2;
20027fa4:	30600002 	addik	r3, r0, 2
20027fa8:	f87300c8 	swi	r3, r19, 200
		BitstreamReadUtils_showBits(32, fifo, res);
20027fac:	30a00020 	addik	r5, r0, 32	// 20 <_vector_hw_exception>
20027fb0:	e8d300d8 	lwi	r6, r19, 216
20027fb4:	e8f300dc 	lwi	r7, r19, 220
20027fb8:	b0000000 	imm	0
20027fbc:	e87406b8 	lwi	r3, r20, 1720
20027fc0:	99fc1800 	brald	r15, r3
20027fc4:	80000000 	or	r0, r0, r0
		cache = res[0];
20027fc8:	e87300dc 	lwi	r3, r19, 220
20027fcc:	e8630000 	lwi	r3, r3, 0
20027fd0:	f8730020 	swi	r3, r19, 32
		tmp_GET_BITS = vldFunctions_GET_BITS(cache, 7);
20027fd4:	e8b30020 	lwi	r5, r19, 32
20027fd8:	30c00007 	addik	r6, r0, 7
20027fdc:	b0000000 	imm	0
20027fe0:	e89406d0 	lwi	r4, r20, 1744
20027fe4:	99fc2000 	brald	r15, r4
20027fe8:	80000000 	or	r0, r0, r0
20027fec:	f8730024 	swi	r3, r19, 36
		local_ESCAPE = vldTables_ESCAPE;
20027ff0:	30600003 	addik	r3, r0, 3
20027ff4:	f8730028 	swi	r3, r19, 40
		if (tmp_GET_BITS != local_ESCAPE) {
20027ff8:	e8930028 	lwi	r4, r19, 40
20027ffc:	e8730024 	lwi	r3, r19, 36
20028000:	88641800 	xor	r3, r4, r3
20028004:	bc030238 	beqi	r3, 568		// 2002823c
			tmp_GET_BITS0 = vldFunctions_GET_BITS(cache, 12);
20028008:	e8b30020 	lwi	r5, r19, 32
2002800c:	30c0000c 	addik	r6, r0, 12
20028010:	b0000000 	imm	0
20028014:	e89406d0 	lwi	r4, r20, 1744
20028018:	99fc2000 	brald	r15, r4
2002801c:	80000000 	or	r0, r0, r0
20028020:	f873002c 	swi	r3, r19, 44
			tmp_DCT3D = vldTables_DCT3D[intra][tmp_GET_BITS0][1];
20028024:	e073001c 	lbui	r3, r19, 28
20028028:	b0000000 	imm	0
2002802c:	e89405b0 	lwi	r4, r20, 1456
20028030:	64a3040c 	bslli	r5, r3, 12
20028034:	e873002c 	lwi	r3, r19, 44
20028038:	10651800 	addk	r3, r5, r3
2002803c:	64630402 	bslli	r3, r3, 2
20028040:	10641800 	addk	r3, r4, r3
20028044:	30630001 	addik	r3, r3, 1
20028048:	e0630000 	lbui	r3, r3, 0
2002804c:	f0730030 	sbi	r3, r19, 48
			last[0] = tmp_DCT3D == 1;
20028050:	e0930030 	lbui	r4, r19, 48
20028054:	30600001 	addik	r3, r0, 1
20028058:	88641c00 	pcmpeq	r3, r4, r3
2002805c:	a46300ff 	andi	r3, r3, 255
20028060:	10830000 	addk	r4, r3, r0
20028064:	e87300e8 	lwi	r3, r19, 232
20028068:	f8830000 	swi	r4, r3, 0
			tmp_GET_BITS1 = vldFunctions_GET_BITS(cache, 12);
2002806c:	e8b30020 	lwi	r5, r19, 32
20028070:	30c0000c 	addik	r6, r0, 12
20028074:	b0000000 	imm	0
20028078:	e89406d0 	lwi	r4, r20, 1744
2002807c:	99fc2000 	brald	r15, r4
20028080:	80000000 	or	r0, r0, r0
20028084:	f8730034 	swi	r3, r19, 52
			tmp_DCT3D0 = vldTables_DCT3D[intra][tmp_GET_BITS1][2];
20028088:	e073001c 	lbui	r3, r19, 28
2002808c:	b0000000 	imm	0
20028090:	e89405b0 	lwi	r4, r20, 1456
20028094:	64a3040c 	bslli	r5, r3, 12
20028098:	e8730034 	lwi	r3, r19, 52
2002809c:	10651800 	addk	r3, r5, r3
200280a0:	64630402 	bslli	r3, r3, 2
200280a4:	10641800 	addk	r3, r4, r3
200280a8:	30630002 	addik	r3, r3, 2
200280ac:	e0630000 	lbui	r3, r3, 0
200280b0:	f0730038 	sbi	r3, r19, 56
			run[0] = tmp_DCT3D0;
200280b4:	e0730038 	lbui	r3, r19, 56
200280b8:	90830060 	sext8	r4, r3
200280bc:	e87300ec 	lwi	r3, r19, 236
200280c0:	f0830000 	sbi	r4, r3, 0
			tmp_GET_BITS2 = vldFunctions_GET_BITS(cache, 12);
200280c4:	e8b30020 	lwi	r5, r19, 32
200280c8:	30c0000c 	addik	r6, r0, 12
200280cc:	b0000000 	imm	0
200280d0:	e89406d0 	lwi	r4, r20, 1744
200280d4:	99fc2000 	brald	r15, r4
200280d8:	80000000 	or	r0, r0, r0
200280dc:	f873003c 	swi	r3, r19, 60
			tmp_DCT3D1 = vldTables_DCT3D[intra][tmp_GET_BITS2][3];
200280e0:	e073001c 	lbui	r3, r19, 28
200280e4:	b0000000 	imm	0
200280e8:	e89405b0 	lwi	r4, r20, 1456
200280ec:	64a3040c 	bslli	r5, r3, 12
200280f0:	e873003c 	lwi	r3, r19, 60
200280f4:	10651800 	addk	r3, r5, r3
200280f8:	64630402 	bslli	r3, r3, 2
200280fc:	10641800 	addk	r3, r4, r3
20028100:	30630003 	addik	r3, r3, 3
20028104:	e0630000 	lbui	r3, r3, 0
20028108:	f0730040 	sbi	r3, r19, 64
			level[0] = tmp_DCT3D1;
2002810c:	e0730040 	lbui	r3, r19, 64
20028110:	90830060 	sext8	r4, r3
20028114:	e87300f0 	lwi	r3, r19, 240
20028118:	f0830000 	sbi	r4, r3, 0
			tmp_GET_BITS3 = vldFunctions_GET_BITS(cache, 12);
2002811c:	e8b30020 	lwi	r5, r19, 32
20028120:	30c0000c 	addik	r6, r0, 12
20028124:	b0000000 	imm	0
20028128:	e89406d0 	lwi	r4, r20, 1744
2002812c:	99fc2000 	brald	r15, r4
20028130:	80000000 	or	r0, r0, r0
20028134:	f8730044 	swi	r3, r19, 68
			tmp_DCT3D2 = vldTables_DCT3D[intra][tmp_GET_BITS3][0];
20028138:	e073001c 	lbui	r3, r19, 28
2002813c:	b0000000 	imm	0
20028140:	e89405b0 	lwi	r4, r20, 1456
20028144:	64a3040c 	bslli	r5, r3, 12
20028148:	e8730044 	lwi	r3, r19, 68
2002814c:	10651800 	addk	r3, r5, r3
20028150:	64630402 	bslli	r3, r3, 2
20028154:	10641800 	addk	r3, r4, r3
20028158:	e0630000 	lbui	r3, r3, 0
2002815c:	f0730048 	sbi	r3, r19, 72
			BitstreamReadUtils_flushBits(tmp_DCT3D2 + 1, fifo);
20028160:	e0730048 	lbui	r3, r19, 72
20028164:	30630001 	addik	r3, r3, 1
20028168:	a46300ff 	andi	r3, r3, 255
2002816c:	10a30000 	addk	r5, r3, r0
20028170:	e8d300d8 	lwi	r6, r19, 216
20028174:	b0000000 	imm	0
20028178:	e87406a8 	lwi	r3, r20, 1704
2002817c:	99fc1800 	brald	r15, r3
20028180:	80000000 	or	r0, r0, r0
			tmp_GET_BITS4 = vldFunctions_GET_BITS(cache, 12);
20028184:	e8b30020 	lwi	r5, r19, 32
20028188:	30c0000c 	addik	r6, r0, 12
2002818c:	b0000000 	imm	0
20028190:	e89406d0 	lwi	r4, r20, 1744
20028194:	99fc2000 	brald	r15, r4
20028198:	80000000 	or	r0, r0, r0
2002819c:	f873004c 	swi	r3, r19, 76
			tmp_DCT3D3 = vldTables_DCT3D[intra][tmp_GET_BITS4][0];
200281a0:	e073001c 	lbui	r3, r19, 28
200281a4:	b0000000 	imm	0
200281a8:	e89405b0 	lwi	r4, r20, 1456
200281ac:	64a3040c 	bslli	r5, r3, 12
200281b0:	e873004c 	lwi	r3, r19, 76
200281b4:	10651800 	addk	r3, r5, r3
200281b8:	64630402 	bslli	r3, r3, 2
200281bc:	10641800 	addk	r3, r4, r3
200281c0:	e0630000 	lbui	r3, r3, 0
200281c4:	f0730050 	sbi	r3, r19, 80
			tmp_GET_BITS5 = vldFunctions_GET_BITS(cache, tmp_DCT3D3 + 1);
200281c8:	e0730050 	lbui	r3, r19, 80
200281cc:	30630001 	addik	r3, r3, 1
200281d0:	e8b30020 	lwi	r5, r19, 32
200281d4:	10c30000 	addk	r6, r3, r0
200281d8:	b0000000 	imm	0
200281dc:	e89406d0 	lwi	r4, r20, 1744
200281e0:	99fc2000 	brald	r15, r4
200281e4:	80000000 	or	r0, r0, r0
200281e8:	f8730054 	swi	r3, r19, 84
			if ((tmp_GET_BITS5 & 1) == 1) {
200281ec:	e8730054 	lwi	r3, r19, 84
200281f0:	a4630001 	andi	r3, r3, 1
200281f4:	bc03002c 	beqi	r3, 44		// 20028220
				tmp_level = level[0];
200281f8:	e87300f0 	lwi	r3, r19, 240
200281fc:	e0630000 	lbui	r3, r3, 0
20028200:	f0730058 	sbi	r3, r19, 88
				level[0] = -tmp_level;
20028204:	e0730058 	lbui	r3, r19, 88
20028208:	14630000 	rsubk	r3, r3, r0
2002820c:	a46300ff 	andi	r3, r3, 255
20028210:	90830060 	sext8	r4, r3
20028214:	e87300f0 	lwi	r3, r19, 240
20028218:	f0830000 	sbi	r4, r3, 0
2002821c:	b80004bc 	bri	1212		// 200286d8
			} else {
				tmp_level0 = level[0];
20028220:	e87300f0 	lwi	r3, r19, 240
20028224:	e0630000 	lbui	r3, r3, 0
20028228:	f0730059 	sbi	r3, r19, 89
				level[0] = tmp_level0;
2002822c:	e87300f0 	lwi	r3, r19, 240
20028230:	e0930059 	lbui	r4, r19, 89
20028234:	f0830000 	sbi	r4, r3, 0
20028238:	b80004a0 	bri	1184		// 200286d8
			}
		} else {
			cache = cache << 7;
2002823c:	e8730020 	lwi	r3, r19, 32
20028240:	64630407 	bslli	r3, r3, 7
20028244:	f8730020 	swi	r3, r19, 32
			mode = vldFunctions_GET_BITS(cache, 2);
20028248:	e8b30020 	lwi	r5, r19, 32
2002824c:	30c00002 	addik	r6, r0, 2
20028250:	b0000000 	imm	0
20028254:	e89406d0 	lwi	r4, r20, 1744
20028258:	99fc2000 	brald	r15, r4
2002825c:	80000000 	or	r0, r0, r0
20028260:	f873005c 	swi	r3, r19, 92
			if (mode < 3) {
20028264:	e893005c 	lwi	r4, r19, 92
20028268:	30600002 	addik	r3, r0, 2
2002826c:	16441801 	cmp	r18, r4, r3
20028270:	bc520384 	blti	r18, 900		// 200285f4
				tmp_skip = skip[mode];
20028274:	e873005c 	lwi	r3, r19, 92
20028278:	64630402 	bslli	r3, r3, 2
2002827c:	3093001c 	addik	r4, r19, 28
20028280:	10641800 	addk	r3, r4, r3
20028284:	306300a4 	addik	r3, r3, 164
20028288:	e8630000 	lwi	r3, r3, 0
2002828c:	f8730060 	swi	r3, r19, 96
				cache = cache << tmp_skip;
20028290:	e8930020 	lwi	r4, r19, 32
20028294:	e8730060 	lwi	r3, r19, 96
20028298:	44641c00 	bsll	r3, r4, r3
2002829c:	f8730020 	swi	r3, r19, 32
				tmp_GET_BITS6 = vldFunctions_GET_BITS(cache, 12);
200282a0:	e8b30020 	lwi	r5, r19, 32
200282a4:	30c0000c 	addik	r6, r0, 12
200282a8:	b0000000 	imm	0
200282ac:	e89406d0 	lwi	r4, r20, 1744
200282b0:	99fc2000 	brald	r15, r4
200282b4:	80000000 	or	r0, r0, r0
200282b8:	f8730064 	swi	r3, r19, 100
				tmp_DCT3D4 = vldTables_DCT3D[intra][tmp_GET_BITS6][1];
200282bc:	e073001c 	lbui	r3, r19, 28
200282c0:	b0000000 	imm	0
200282c4:	e89405b0 	lwi	r4, r20, 1456
200282c8:	64a3040c 	bslli	r5, r3, 12
200282cc:	e8730064 	lwi	r3, r19, 100
200282d0:	10651800 	addk	r3, r5, r3
200282d4:	64630402 	bslli	r3, r3, 2
200282d8:	10641800 	addk	r3, r4, r3
200282dc:	30630001 	addik	r3, r3, 1
200282e0:	e0630000 	lbui	r3, r3, 0
200282e4:	f0730068 	sbi	r3, r19, 104
				last[0] = tmp_DCT3D4 == 1;
200282e8:	e0930068 	lbui	r4, r19, 104
200282ec:	30600001 	addik	r3, r0, 1
200282f0:	88641c00 	pcmpeq	r3, r4, r3
200282f4:	a46300ff 	andi	r3, r3, 255
200282f8:	10830000 	addk	r4, r3, r0
200282fc:	e87300e8 	lwi	r3, r19, 232
20028300:	f8830000 	swi	r4, r3, 0
				tmp_GET_BITS7 = vldFunctions_GET_BITS(cache, 12);
20028304:	e8b30020 	lwi	r5, r19, 32
20028308:	30c0000c 	addik	r6, r0, 12
2002830c:	b0000000 	imm	0
20028310:	e89406d0 	lwi	r4, r20, 1744
20028314:	99fc2000 	brald	r15, r4
20028318:	80000000 	or	r0, r0, r0
2002831c:	f873006c 	swi	r3, r19, 108
				tmp_DCT3D5 = vldTables_DCT3D[intra][tmp_GET_BITS7][2];
20028320:	e073001c 	lbui	r3, r19, 28
20028324:	b0000000 	imm	0
20028328:	e89405b0 	lwi	r4, r20, 1456
2002832c:	64a3040c 	bslli	r5, r3, 12
20028330:	e873006c 	lwi	r3, r19, 108
20028334:	10651800 	addk	r3, r5, r3
20028338:	64630402 	bslli	r3, r3, 2
2002833c:	10641800 	addk	r3, r4, r3
20028340:	30630002 	addik	r3, r3, 2
20028344:	e0630000 	lbui	r3, r3, 0
20028348:	f0730070 	sbi	r3, r19, 112
				run[0] = tmp_DCT3D5;
2002834c:	e0730070 	lbui	r3, r19, 112
20028350:	90830060 	sext8	r4, r3
20028354:	e87300ec 	lwi	r3, r19, 236
20028358:	f0830000 	sbi	r4, r3, 0
				tmp_GET_BITS8 = vldFunctions_GET_BITS(cache, 12);
2002835c:	e8b30020 	lwi	r5, r19, 32
20028360:	30c0000c 	addik	r6, r0, 12
20028364:	b0000000 	imm	0
20028368:	e89406d0 	lwi	r4, r20, 1744
2002836c:	99fc2000 	brald	r15, r4
20028370:	80000000 	or	r0, r0, r0
20028374:	f8730074 	swi	r3, r19, 116
				tmp_DCT3D6 = vldTables_DCT3D[intra][tmp_GET_BITS8][3];
20028378:	e073001c 	lbui	r3, r19, 28
2002837c:	b0000000 	imm	0
20028380:	e89405b0 	lwi	r4, r20, 1456
20028384:	64a3040c 	bslli	r5, r3, 12
20028388:	e8730074 	lwi	r3, r19, 116
2002838c:	10651800 	addk	r3, r5, r3
20028390:	64630402 	bslli	r3, r3, 2
20028394:	10641800 	addk	r3, r4, r3
20028398:	30630003 	addik	r3, r3, 3
2002839c:	e0630000 	lbui	r3, r3, 0
200283a0:	f0730078 	sbi	r3, r19, 120
				level[0] = tmp_DCT3D6;
200283a4:	e0730078 	lbui	r3, r19, 120
200283a8:	90830060 	sext8	r4, r3
200283ac:	e87300f0 	lwi	r3, r19, 240
200283b0:	f0830000 	sbi	r4, r3, 0
				if (mode < 2) {
200283b4:	e893005c 	lwi	r4, r19, 92
200283b8:	30600001 	addik	r3, r0, 1
200283bc:	16441801 	cmp	r18, r4, r3
200283c0:	bc520094 	blti	r18, 148		// 20028454
					tmp_level1 = level[0];
200283c4:	e87300f0 	lwi	r3, r19, 240
200283c8:	e0630000 	lbui	r3, r3, 0
200283cc:	f0730079 	sbi	r3, r19, 121
					tmp_last = last[0];
200283d0:	e87300e8 	lwi	r3, r19, 232
200283d4:	e8630000 	lwi	r3, r3, 0
200283d8:	f873007c 	swi	r3, r19, 124
					if (tmp_last) {
200283dc:	e873007c 	lwi	r3, r19, 124
200283e0:	bc030010 	beqi	r3, 16		// 200283f0
						tmp_if = 1;
200283e4:	30600001 	addik	r3, r0, 1
200283e8:	f073001d 	sbi	r3, r19, 29
200283ec:	b8000008 	bri	8		// 200283f4
					} else {
						tmp_if = 0;
200283f0:	f013001d 	sbi	r0, r19, 29
					}
					tmp_run = run[0];
200283f4:	e87300ec 	lwi	r3, r19, 236
200283f8:	e0630000 	lbui	r3, r3, 0
200283fc:	f0730080 	sbi	r3, r19, 128
					tmp_max_level = vldTables_max_level[intra][tmp_if][tmp_run];
20028400:	e0d3001c 	lbui	r6, r19, 28
20028404:	e0b3001d 	lbui	r5, r19, 29
20028408:	e0730080 	lbui	r3, r19, 128
2002840c:	90630060 	sext8	r3, r3
20028410:	b0000000 	imm	0
20028414:	e89405b4 	lwi	r4, r20, 1460
20028418:	10c63000 	addk	r6, r6, r6
2002841c:	10a62800 	addk	r5, r6, r5
20028420:	64a50406 	bslli	r5, r5, 6
20028424:	10651800 	addk	r3, r5, r3
20028428:	10641800 	addk	r3, r4, r3
2002842c:	e0630000 	lbui	r3, r3, 0
20028430:	f0730081 	sbi	r3, r19, 129
					level[0] = tmp_level1 + tmp_max_level;
20028434:	e0930079 	lbui	r4, r19, 121
20028438:	e0730081 	lbui	r3, r19, 129
2002843c:	10641800 	addk	r3, r4, r3
20028440:	a46300ff 	andi	r3, r3, 255
20028444:	90830060 	sext8	r4, r3
20028448:	e87300f0 	lwi	r3, r19, 240
2002844c:	f0830000 	sbi	r4, r3, 0
20028450:	b8000098 	bri	152		// 200284e8
				} else {
					tmp_run0 = run[0];
20028454:	e87300ec 	lwi	r3, r19, 236
20028458:	e0630000 	lbui	r3, r3, 0
2002845c:	f0730082 	sbi	r3, r19, 130
					tmp_last0 = last[0];
20028460:	e87300e8 	lwi	r3, r19, 232
20028464:	e8630000 	lwi	r3, r3, 0
20028468:	f8730084 	swi	r3, r19, 132
					if (tmp_last0) {
2002846c:	e8730084 	lwi	r3, r19, 132
20028470:	bc030010 	beqi	r3, 16		// 20028480
						tmp_if0 = 1;
20028474:	30600001 	addik	r3, r0, 1
20028478:	f073001e 	sbi	r3, r19, 30
2002847c:	b8000008 	bri	8		// 20028484
					} else {
						tmp_if0 = 0;
20028480:	f013001e 	sbi	r0, r19, 30
					}
					tmp_level2 = level[0];
20028484:	e87300f0 	lwi	r3, r19, 240
20028488:	e0630000 	lbui	r3, r3, 0
2002848c:	f0730088 	sbi	r3, r19, 136
					tmp_max_run = vldTables_max_run[intra][tmp_if0][tmp_level2];
20028490:	e0d3001c 	lbui	r6, r19, 28
20028494:	e0b3001e 	lbui	r5, r19, 30
20028498:	e0730088 	lbui	r3, r19, 136
2002849c:	90630060 	sext8	r3, r3
200284a0:	b0000000 	imm	0
200284a4:	e89405b8 	lwi	r4, r20, 1464
200284a8:	10c63000 	addk	r6, r6, r6
200284ac:	10a62800 	addk	r5, r6, r5
200284b0:	64a50406 	bslli	r5, r5, 6
200284b4:	10651800 	addk	r3, r5, r3
200284b8:	10641800 	addk	r3, r4, r3
200284bc:	e0630000 	lbui	r3, r3, 0
200284c0:	f0730089 	sbi	r3, r19, 137
					run[0] = tmp_run0 + tmp_max_run + 1;
200284c4:	e0930082 	lbui	r4, r19, 130
200284c8:	e0730089 	lbui	r3, r19, 137
200284cc:	10641800 	addk	r3, r4, r3
200284d0:	a46300ff 	andi	r3, r3, 255
200284d4:	30630001 	addik	r3, r3, 1
200284d8:	a46300ff 	andi	r3, r3, 255
200284dc:	90830060 	sext8	r4, r3
200284e0:	e87300ec 	lwi	r3, r19, 236
200284e4:	f0830000 	sbi	r4, r3, 0
				}
				tmp_GET_BITS9 = vldFunctions_GET_BITS(cache, 12);
200284e8:	e8b30020 	lwi	r5, r19, 32
200284ec:	30c0000c 	addik	r6, r0, 12
200284f0:	b0000000 	imm	0
200284f4:	e89406d0 	lwi	r4, r20, 1744
200284f8:	99fc2000 	brald	r15, r4
200284fc:	80000000 	or	r0, r0, r0
20028500:	f873008c 	swi	r3, r19, 140
				len = vldTables_DCT3D[intra][tmp_GET_BITS9][0];
20028504:	e073001c 	lbui	r3, r19, 28
20028508:	b0000000 	imm	0
2002850c:	e89405b0 	lwi	r4, r20, 1456
20028510:	64a3040c 	bslli	r5, r3, 12
20028514:	e873008c 	lwi	r3, r19, 140
20028518:	10651800 	addk	r3, r5, r3
2002851c:	64630402 	bslli	r3, r3, 2
20028520:	10641800 	addk	r3, r4, r3
20028524:	e0630000 	lbui	r3, r3, 0
20028528:	f8730090 	swi	r3, r19, 144
				tmp_skip0 = skip[mode];
2002852c:	e873005c 	lwi	r3, r19, 92
20028530:	64630402 	bslli	r3, r3, 2
20028534:	3093001c 	addik	r4, r19, 28
20028538:	10641800 	addk	r3, r4, r3
2002853c:	306300a4 	addik	r3, r3, 164
20028540:	e8630000 	lwi	r3, r3, 0
20028544:	f8730094 	swi	r3, r19, 148
				BitstreamReadUtils_flushBits(7 + tmp_skip0 + len + 1, fifo);
20028548:	e8730094 	lwi	r3, r19, 148
2002854c:	a48300ff 	andi	r4, r3, 255
20028550:	e8730090 	lwi	r3, r19, 144
20028554:	a46300ff 	andi	r3, r3, 255
20028558:	10641800 	addk	r3, r4, r3
2002855c:	a46300ff 	andi	r3, r3, 255
20028560:	30630008 	addik	r3, r3, 8
20028564:	a46300ff 	andi	r3, r3, 255
20028568:	10a30000 	addk	r5, r3, r0
2002856c:	e8d300d8 	lwi	r6, r19, 216
20028570:	b0000000 	imm	0
20028574:	e87406a8 	lwi	r3, r20, 1704
20028578:	99fc1800 	brald	r15, r3
2002857c:	80000000 	or	r0, r0, r0
				tmp_GET_BITS10 = vldFunctions_GET_BITS(cache, len + 1);
20028580:	e8730090 	lwi	r3, r19, 144
20028584:	30630001 	addik	r3, r3, 1
20028588:	e8b30020 	lwi	r5, r19, 32
2002858c:	10c30000 	addk	r6, r3, r0
20028590:	b0000000 	imm	0
20028594:	e89406d0 	lwi	r4, r20, 1744
20028598:	99fc2000 	brald	r15, r4
2002859c:	80000000 	or	r0, r0, r0
200285a0:	f8730098 	swi	r3, r19, 152
				if ((tmp_GET_BITS10 & 1) == 1) {
200285a4:	e8730098 	lwi	r3, r19, 152
200285a8:	a4630001 	andi	r3, r3, 1
200285ac:	bc03002c 	beqi	r3, 44		// 200285d8
					tmp_level3 = level[0];
200285b0:	e87300f0 	lwi	r3, r19, 240
200285b4:	e0630000 	lbui	r3, r3, 0
200285b8:	f073009c 	sbi	r3, r19, 156
					level[0] = -tmp_level3;
200285bc:	e073009c 	lbui	r3, r19, 156
200285c0:	14630000 	rsubk	r3, r3, r0
200285c4:	a46300ff 	andi	r3, r3, 255
200285c8:	90830060 	sext8	r4, r3
200285cc:	e87300f0 	lwi	r3, r19, 240
200285d0:	f0830000 	sbi	r4, r3, 0
200285d4:	b8000104 	bri	260		// 200286d8
				} else {
					tmp_level4 = level[0];
200285d8:	e87300f0 	lwi	r3, r19, 240
200285dc:	e0630000 	lbui	r3, r3, 0
200285e0:	f073009d 	sbi	r3, r19, 157
					level[0] = tmp_level4;
200285e4:	e87300f0 	lwi	r3, r19, 240
200285e8:	e093009d 	lbui	r4, r19, 157
200285ec:	f0830000 	sbi	r4, r3, 0
200285f0:	b80000e8 	bri	232		// 200286d8
				}
			} else {
				cache = cache << 2;
200285f4:	e8730020 	lwi	r3, r19, 32
200285f8:	64630402 	bslli	r3, r3, 2
200285fc:	f8730020 	swi	r3, r19, 32
				tmp_GET_BITS11 = vldFunctions_GET_BITS(cache, 1);
20028600:	e8b30020 	lwi	r5, r19, 32
20028604:	30c00001 	addik	r6, r0, 1
20028608:	b0000000 	imm	0
2002860c:	e89406d0 	lwi	r4, r20, 1744
20028610:	99fc2000 	brald	r15, r4
20028614:	80000000 	or	r0, r0, r0
20028618:	f87300a0 	swi	r3, r19, 160
				last[0] = tmp_GET_BITS11 == 1;
2002861c:	e89300a0 	lwi	r4, r19, 160
20028620:	30600001 	addik	r3, r0, 1
20028624:	88641c00 	pcmpeq	r3, r4, r3
20028628:	a46300ff 	andi	r3, r3, 255
2002862c:	10830000 	addk	r4, r3, r0
20028630:	e87300e8 	lwi	r3, r19, 232
20028634:	f8830000 	swi	r4, r3, 0
				tmp_GET_BITS12 = vldFunctions_GET_BITS(cache, 7);
20028638:	e8b30020 	lwi	r5, r19, 32
2002863c:	30c00007 	addik	r6, r0, 7
20028640:	b0000000 	imm	0
20028644:	e89406d0 	lwi	r4, r20, 1744
20028648:	99fc2000 	brald	r15, r4
2002864c:	80000000 	or	r0, r0, r0
20028650:	f87300a4 	swi	r3, r19, 164
				run[0] = tmp_GET_BITS12 & 63;
20028654:	e87300a4 	lwi	r3, r19, 164
20028658:	90630060 	sext8	r3, r3
2002865c:	a463003f 	andi	r3, r3, 63
20028660:	90830060 	sext8	r4, r3
20028664:	e87300ec 	lwi	r3, r19, 236
20028668:	f0830000 	sbi	r4, r3, 0
				tmp_GET_BITS13 = vldFunctions_GET_BITS(cache, 20);
2002866c:	e8b30020 	lwi	r5, r19, 32
20028670:	30c00014 	addik	r6, r0, 20
20028674:	b0000000 	imm	0
20028678:	e89406d0 	lwi	r4, r20, 1744
2002867c:	99fc2000 	brald	r15, r4
20028680:	80000000 	or	r0, r0, r0
20028684:	f87300a8 	swi	r3, r19, 168
				level[0] = tmp_GET_BITS13 & 4095;
20028688:	e87300a8 	lwi	r3, r19, 168
2002868c:	90830060 	sext8	r4, r3
20028690:	e87300f0 	lwi	r3, r19, 240
20028694:	f0830000 	sbi	r4, r3, 0
				BitstreamReadUtils_flushBits(30, fifo);
20028698:	30a0001e 	addik	r5, r0, 30
2002869c:	e8d300d8 	lwi	r6, r19, 216
200286a0:	b0000000 	imm	0
200286a4:	e87406a8 	lwi	r3, r20, 1704
200286a8:	99fc1800 	brald	r15, r3
200286ac:	80000000 	or	r0, r0, r0
				tmp_level5 = level[0];
200286b0:	e87300f0 	lwi	r3, r19, 240
200286b4:	e0630000 	lbui	r3, r3, 0
200286b8:	f07300ac 	sbi	r3, r19, 172
				level[0] = (tmp_level5 << 20) >> 20;
200286bc:	e07300ac 	lbui	r3, r19, 172
200286c0:	90630060 	sext8	r3, r3
200286c4:	64630414 	bslli	r3, r3, 20
200286c8:	64630214 	bsrai	r3, r3, 20
200286cc:	90830060 	sext8	r4, r3
200286d0:	e87300f0 	lwi	r3, r19, 240
200286d4:	f0830000 	sbi	r4, r3, 0
			}
		}
		local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
200286d8:	f81300b0 	swi	r0, r19, 176
		if (local_DEBUG_PARSER) {
200286dc:	e87300b0 	lwi	r3, r19, 176
200286e0:	bc030040 	beqi	r3, 64		// 20028720
			tmp_run1 = run[0];
200286e4:	e87300ec 	lwi	r3, r19, 236
200286e8:	e0630000 	lbui	r3, r3, 0
200286ec:	f07300b4 	sbi	r3, r19, 180
			tmp_level6 = level[0];
200286f0:	e87300f0 	lwi	r3, r19, 240
200286f4:	e0630000 	lbui	r3, r3, 0
200286f8:	f07300b5 	sbi	r3, r19, 181
			tmp_last1 = last[0];
200286fc:	e87300e8 	lwi	r3, r19, 232
20028700:	e8630000 	lwi	r3, r3, 0
20028704:	f87300b8 	swi	r3, r19, 184
			if (tmp_last1) {
20028708:	e87300b8 	lwi	r3, r19, 184
2002870c:	bc030010 	beqi	r3, 16		// 2002871c
				tmp_if1 = 1;
20028710:	30600001 	addik	r3, r0, 1
20028714:	f07300bc 	sbi	r3, r19, 188
20028718:	b8000008 	bri	8		// 20028720
			} else {
				tmp_if1 = 0;
2002871c:	f01300bc 	sbi	r0, r19, 188
			}
		}
	}
20028720:	e9e10000 	lwi	r15, r1, 0
20028724:	10330000 	addk	r1, r19, r0
20028728:	ea6100cc 	lwi	r19, r1, 204
2002872c:	ea8100d0 	lwi	r20, r1, 208
20028730:	302100d4 	addik	r1, r1, 212
20028734:	b60f0008 	rtsd	r15, 8
20028738:	80000000 	or	r0, r0, r0

2002873c <vldFunctions_get_mv>:
	static void vldFunctions_get_mv(i16 fifo[10], i32 res[1], char * name) {
2002873c:	3021ffc4 	addik	r1, r1, -60
20028740:	f9e10000 	swi	r15, r1, 0
20028744:	fa610034 	swi	r19, r1, 52
20028748:	fa810038 	swi	r20, r1, 56
2002874c:	12610000 	addk	r19, r1, r0
20028750:	96808000 	mfs	r20, rpc
20028754:	b000dffd 	imm	-8195
20028758:	3294920c 	addik	r20, r20, -28148
2002875c:	f8b30040 	swi	r5, r19, 64
20028760:	f8d30044 	swi	r6, r19, 68
20028764:	f8f30048 	swi	r7, r19, 72
		i8 tmp_TMNMVtab2;
		i8 tmp_TMNMVtab20;
		i32 local_DEBUG_PARSER;
		i32 tmp_res0;
	
		BitstreamReadUtils_vld_u(1, fifo, res);
20028768:	30a00001 	addik	r5, r0, 1
2002876c:	e8d30040 	lwi	r6, r19, 64
20028770:	e8f30044 	lwi	r7, r19, 68
20028774:	b0000000 	imm	0
20028778:	e87406b0 	lwi	r3, r20, 1712
2002877c:	99fc1800 	brald	r15, r3
20028780:	80000000 	or	r0, r0, r0
		tmp_res = res[0];
20028784:	e8730044 	lwi	r3, r19, 68
20028788:	e8630000 	lwi	r3, r3, 0
2002878c:	f873001c 	swi	r3, r19, 28
		if (tmp_res == 0) {
20028790:	e873001c 	lwi	r3, r19, 28
20028794:	bc2301bc 	bnei	r3, 444		// 20028950
			BitstreamReadUtils_showBits(12, fifo, res);
20028798:	30a0000c 	addik	r5, r0, 12
2002879c:	e8d30040 	lwi	r6, r19, 64
200287a0:	e8f30044 	lwi	r7, r19, 68
200287a4:	b0000000 	imm	0
200287a8:	e87406b8 	lwi	r3, r20, 1720
200287ac:	99fc1800 	brald	r15, r3
200287b0:	80000000 	or	r0, r0, r0
			index_replaced = res[0];
200287b4:	e8730044 	lwi	r3, r19, 68
200287b8:	e8630000 	lwi	r3, r3, 0
200287bc:	f8730020 	swi	r3, r19, 32
			if (index_replaced >= 512) {
200287c0:	e8930020 	lwi	r4, r19, 32
200287c4:	306001ff 	addik	r3, r0, 511
200287c8:	16441801 	cmp	r18, r4, r3
200287cc:	bcb20080 	bgei	r18, 128		// 2002884c
				index_replaced = (index_replaced >> 8) - 2;
200287d0:	e8730020 	lwi	r3, r19, 32
200287d4:	64630208 	bsrai	r3, r3, 8
200287d8:	3063fffe 	addik	r3, r3, -2
200287dc:	f8730020 	swi	r3, r19, 32
				tmp_TMNMVtab0 = vldTables_TMNMVtab0[index_replaced][1];
200287e0:	b0000000 	imm	0
200287e4:	e89405bc 	lwi	r4, r20, 1468
200287e8:	e8730020 	lwi	r3, r19, 32
200287ec:	10631800 	addk	r3, r3, r3
200287f0:	10641800 	addk	r3, r4, r3
200287f4:	30630001 	addik	r3, r3, 1
200287f8:	e0630000 	lbui	r3, r3, 0
200287fc:	f0730024 	sbi	r3, r19, 36
				BitstreamReadUtils_flushBits(tmp_TMNMVtab0, fifo);
20028800:	e0730024 	lbui	r3, r19, 36
20028804:	10a30000 	addk	r5, r3, r0
20028808:	e8d30040 	lwi	r6, r19, 64
2002880c:	b0000000 	imm	0
20028810:	e87406a8 	lwi	r3, r20, 1704
20028814:	99fc1800 	brald	r15, r3
20028818:	80000000 	or	r0, r0, r0
				tmp_TMNMVtab00 = vldTables_TMNMVtab0[index_replaced][0];
2002881c:	b0000000 	imm	0
20028820:	e89405bc 	lwi	r4, r20, 1468
20028824:	e8730020 	lwi	r3, r19, 32
20028828:	10631800 	addk	r3, r3, r3
2002882c:	10641800 	addk	r3, r4, r3
20028830:	e0630000 	lbui	r3, r3, 0
20028834:	f0730025 	sbi	r3, r19, 37
				res[0] = tmp_TMNMVtab00;
20028838:	e0730025 	lbui	r3, r19, 37
2002883c:	90830060 	sext8	r4, r3
20028840:	e8730044 	lwi	r3, r19, 68
20028844:	f8830000 	swi	r4, r3, 0
20028848:	b8000110 	bri	272		// 20028958
			} else {
				if (index_replaced >= 128) {
2002884c:	e8930020 	lwi	r4, r19, 32
20028850:	3060007f 	addik	r3, r0, 127
20028854:	16441801 	cmp	r18, r4, r3
20028858:	bcb20080 	bgei	r18, 128		// 200288d8
					index_replaced = (index_replaced >> 2) - 32;
2002885c:	e8730020 	lwi	r3, r19, 32
20028860:	64630202 	bsrai	r3, r3, 2
20028864:	3063ffe0 	addik	r3, r3, -32
20028868:	f8730020 	swi	r3, r19, 32
					tmp_TMNMVtab1 = vldTables_TMNMVtab1[index_replaced][1];
2002886c:	b0000000 	imm	0
20028870:	e89405c0 	lwi	r4, r20, 1472
20028874:	e8730020 	lwi	r3, r19, 32
20028878:	10631800 	addk	r3, r3, r3
2002887c:	10641800 	addk	r3, r4, r3
20028880:	30630001 	addik	r3, r3, 1
20028884:	e0630000 	lbui	r3, r3, 0
20028888:	f0730026 	sbi	r3, r19, 38
					BitstreamReadUtils_flushBits(tmp_TMNMVtab1, fifo);
2002888c:	e0730026 	lbui	r3, r19, 38
20028890:	10a30000 	addk	r5, r3, r0
20028894:	e8d30040 	lwi	r6, r19, 64
20028898:	b0000000 	imm	0
2002889c:	e87406a8 	lwi	r3, r20, 1704
200288a0:	99fc1800 	brald	r15, r3
200288a4:	80000000 	or	r0, r0, r0
					tmp_TMNMVtab10 = vldTables_TMNMVtab1[index_replaced][0];
200288a8:	b0000000 	imm	0
200288ac:	e89405c0 	lwi	r4, r20, 1472
200288b0:	e8730020 	lwi	r3, r19, 32
200288b4:	10631800 	addk	r3, r3, r3
200288b8:	10641800 	addk	r3, r4, r3
200288bc:	e0630000 	lbui	r3, r3, 0
200288c0:	f0730027 	sbi	r3, r19, 39
					res[0] = tmp_TMNMVtab10;
200288c4:	e0730027 	lbui	r3, r19, 39
200288c8:	90830060 	sext8	r4, r3
200288cc:	e8730044 	lwi	r3, r19, 68
200288d0:	f8830000 	swi	r4, r3, 0
200288d4:	b8000084 	bri	132		// 20028958
				} else {
					index_replaced = index_replaced - 4;
200288d8:	e8730020 	lwi	r3, r19, 32
200288dc:	3063fffc 	addik	r3, r3, -4
200288e0:	f8730020 	swi	r3, r19, 32
					tmp_TMNMVtab2 = vldTables_TMNMVtab2[index_replaced][1];
200288e4:	b0000000 	imm	0
200288e8:	e89405c4 	lwi	r4, r20, 1476
200288ec:	e8730020 	lwi	r3, r19, 32
200288f0:	10631800 	addk	r3, r3, r3
200288f4:	10641800 	addk	r3, r4, r3
200288f8:	30630001 	addik	r3, r3, 1
200288fc:	e0630000 	lbui	r3, r3, 0
20028900:	f0730028 	sbi	r3, r19, 40
					BitstreamReadUtils_flushBits(tmp_TMNMVtab2, fifo);
20028904:	e0730028 	lbui	r3, r19, 40
20028908:	10a30000 	addk	r5, r3, r0
2002890c:	e8d30040 	lwi	r6, r19, 64
20028910:	b0000000 	imm	0
20028914:	e87406a8 	lwi	r3, r20, 1704
20028918:	99fc1800 	brald	r15, r3
2002891c:	80000000 	or	r0, r0, r0
					tmp_TMNMVtab20 = vldTables_TMNMVtab2[index_replaced][0];
20028920:	b0000000 	imm	0
20028924:	e89405c4 	lwi	r4, r20, 1476
20028928:	e8730020 	lwi	r3, r19, 32
2002892c:	10631800 	addk	r3, r3, r3
20028930:	10641800 	addk	r3, r4, r3
20028934:	e0630000 	lbui	r3, r3, 0
20028938:	f0730029 	sbi	r3, r19, 41
					res[0] = tmp_TMNMVtab20;
2002893c:	e0730029 	lbui	r3, r19, 41
20028940:	90830060 	sext8	r4, r3
20028944:	e8730044 	lwi	r3, r19, 68
20028948:	f8830000 	swi	r4, r3, 0
2002894c:	b800000c 	bri	12		// 20028958
				}
			}
		} else {
			res[0] = 0;
20028950:	e8730044 	lwi	r3, r19, 68
20028954:	f8030000 	swi	r0, r3, 0
		}
		local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
20028958:	f813002c 	swi	r0, r19, 44
		if (local_DEBUG_PARSER) {
2002895c:	e873002c 	lwi	r3, r19, 44
20028960:	bc030010 	beqi	r3, 16		// 20028970
			tmp_res0 = res[0];
20028964:	e8730044 	lwi	r3, r19, 68
20028968:	e8630000 	lwi	r3, r3, 0
2002896c:	f8730030 	swi	r3, r19, 48
		}
	}
20028970:	e9e10000 	lwi	r15, r1, 0
20028974:	10330000 	addk	r1, r19, r0
20028978:	ea610034 	lwi	r19, r1, 52
2002897c:	ea810038 	lwi	r20, r1, 56
20028980:	3021003c 	addik	r1, r1, 60
20028984:	b60f0008 	rtsd	r15, 8
20028988:	80000000 	or	r0, r0, r0

2002898c <BitstreamReadUtils_IsStartCode>:
	static i32 BitstreamReadUtils_IsStartCode(u16 fifo[10]) {
2002898c:	3021ffcc 	addik	r1, r1, -52
20028990:	f9e10000 	swi	r15, r1, 0
20028994:	fa61002c 	swi	r19, r1, 44
20028998:	fa810030 	swi	r20, r1, 48
2002899c:	12610000 	addk	r19, r1, r0
200289a0:	96808000 	mfs	r20, rpc
200289a4:	b000dffd 	imm	-8195
200289a8:	32948fbc 	addik	r20, r20, -28740
200289ac:	f8b30038 	swi	r5, r19, 56
		u16 idx;
		u16 tmp_fifo;
		u8 local_FIFO_DEPTH;
		i32 tmp_if;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
200289b0:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200289b4:	f0730020 	sbi	r3, r19, 32
		cptBits = fifo[local_FIFO_CPT_BITS];
200289b8:	e0730020 	lbui	r3, r19, 32
200289bc:	10631800 	addk	r3, r3, r3
200289c0:	e8930038 	lwi	r4, r19, 56
200289c4:	10641800 	addk	r3, r4, r3
200289c8:	e4630000 	lhui	r3, r3, 0
200289cc:	f4730022 	shi	r3, r19, 34
		idx = BitstreamReadUtils_getFifoIdx(cptBits, fifo);
200289d0:	e4730022 	lhui	r3, r19, 34
200289d4:	10a30000 	addk	r5, r3, r0
200289d8:	e8d30038 	lwi	r6, r19, 56
200289dc:	b0000000 	imm	0
200289e0:	e89406a0 	lwi	r4, r20, 1696
200289e4:	99fc2000 	brald	r15, r4
200289e8:	80000000 	or	r0, r0, r0
200289ec:	f4730024 	shi	r3, r19, 36
		tmp_fifo = fifo[idx];
200289f0:	e4730024 	lhui	r3, r19, 36
200289f4:	10631800 	addk	r3, r3, r3
200289f8:	e8930038 	lwi	r4, r19, 56
200289fc:	10641800 	addk	r3, r4, r3
20028a00:	e4630000 	lhui	r3, r3, 0
20028a04:	f4730026 	shi	r3, r19, 38
		local_FIFO_DEPTH = BitstreamReadUtils_FIFO_DEPTH;
20028a08:	30600009 	addik	r3, r0, 9
20028a0c:	f0730028 	sbi	r3, r19, 40
		if ((tmp_fifo & 1 << (local_FIFO_DEPTH - 1)) != 0) {
20028a10:	e4930026 	lhui	r4, r19, 38
20028a14:	e0730028 	lbui	r3, r19, 40
20028a18:	3063ffff 	addik	r3, r3, -1
20028a1c:	44641a00 	bsra	r3, r4, r3
20028a20:	a4630001 	andi	r3, r3, 1
20028a24:	bc030010 	beqi	r3, 16		// 20028a34
			tmp_if = 1;
20028a28:	30600001 	addik	r3, r0, 1
20028a2c:	f873001c 	swi	r3, r19, 28
20028a30:	b8000008 	bri	8		// 20028a38
		} else {
			tmp_if = 0;
20028a34:	f813001c 	swi	r0, r19, 28
		}
		return tmp_if;
20028a38:	e873001c 	lwi	r3, r19, 28
	}
20028a3c:	e9e10000 	lwi	r15, r1, 0
20028a40:	10330000 	addk	r1, r19, r0
20028a44:	ea61002c 	lwi	r19, r1, 44
20028a48:	ea810030 	lwi	r20, r1, 48
20028a4c:	30210034 	addik	r1, r1, 52
20028a50:	b60f0008 	rtsd	r15, 8
20028a54:	80000000 	or	r0, r0, r0

20028a58 <BitstreamReadUtils_byte_align>:
	static void BitstreamReadUtils_byte_align(u16 fifo[10]) {
20028a58:	3021fff0 	addik	r1, r1, -16
20028a5c:	fa610008 	swi	r19, r1, 8
20028a60:	fa81000c 	swi	r20, r1, 12
20028a64:	12610000 	addk	r19, r1, r0
20028a68:	96808000 	mfs	r20, rpc
20028a6c:	b000dffd 	imm	-8195
20028a70:	32948ef4 	addik	r20, r20, -28940
20028a74:	f8b30014 	swi	r5, r19, 20
		u8 local_FIFO_CPT_BITS;
		u16 cptBits;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20028a78:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20028a7c:	f0730004 	sbi	r3, r19, 4
		cptBits = fifo[local_FIFO_CPT_BITS];
20028a80:	e0730004 	lbui	r3, r19, 4
20028a84:	10631800 	addk	r3, r3, r3
20028a88:	e8930014 	lwi	r4, r19, 20
20028a8c:	10641800 	addk	r3, r4, r3
20028a90:	e4630000 	lhui	r3, r3, 0
20028a94:	f4730006 	shi	r3, r19, 6
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20028a98:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20028a9c:	f0730004 	sbi	r3, r19, 4
		fifo[local_FIFO_CPT_BITS] = cptBits - (cptBits & 7);
20028aa0:	e0730004 	lbui	r3, r19, 4
20028aa4:	10631800 	addk	r3, r3, r3
20028aa8:	e8930014 	lwi	r4, r19, 20
20028aac:	10641800 	addk	r3, r4, r3
20028ab0:	e4930006 	lhui	r4, r19, 6
20028ab4:	a484fff8 	andi	r4, r4, -8
20028ab8:	b0000000 	imm	0
20028abc:	a484ffff 	andi	r4, r4, -1
20028ac0:	f4830000 	shi	r4, r3, 0
	}
20028ac4:	10330000 	addk	r1, r19, r0
20028ac8:	ea610008 	lwi	r19, r1, 8
20028acc:	ea81000c 	lwi	r20, r1, 12
20028ad0:	30210010 	addik	r1, r1, 16
20028ad4:	b60f0008 	rtsd	r15, 8
20028ad8:	80000000 	or	r0, r0, r0

20028adc <log2bin>:
	static void log2bin(u32 value, u32 res[1]) {
20028adc:	3021ffec 	addik	r1, r1, -20
20028ae0:	fa61000c 	swi	r19, r1, 12
20028ae4:	fa810010 	swi	r20, r1, 16
20028ae8:	12610000 	addk	r19, r1, r0
20028aec:	96808000 	mfs	r20, rpc
20028af0:	b000dffd 	imm	-8195
20028af4:	32948e70 	addik	r20, r20, -29072
20028af8:	f8b30018 	swi	r5, r19, 24
20028afc:	f8d3001c 	swi	r6, r19, 28
		i32 invalue;
		u32 tmp_res;
	
		invalue = value;
20028b00:	e8730018 	lwi	r3, r19, 24
20028b04:	f8730004 	swi	r3, r19, 4
		res[0] = 0;
20028b08:	e873001c 	lwi	r3, r19, 28
20028b0c:	f8030000 	swi	r0, r3, 0
		while (invalue != 0) {
20028b10:	b800002c 	bri	44		// 20028b3c
			invalue = invalue >> 1;
20028b14:	e8730004 	lwi	r3, r19, 4
20028b18:	90630001 	sra	r3, r3
20028b1c:	f8730004 	swi	r3, r19, 4
			tmp_res = res[0];
20028b20:	e873001c 	lwi	r3, r19, 28
20028b24:	e8630000 	lwi	r3, r3, 0
20028b28:	f8730008 	swi	r3, r19, 8
			res[0] = tmp_res + 1;
20028b2c:	e8730008 	lwi	r3, r19, 8
20028b30:	30830001 	addik	r4, r3, 1
20028b34:	e873001c 	lwi	r3, r19, 28
20028b38:	f8830000 	swi	r4, r3, 0
		i32 invalue;
		u32 tmp_res;
	
		invalue = value;
		res[0] = 0;
		while (invalue != 0) {
20028b3c:	e8730004 	lwi	r3, r19, 4
20028b40:	bc23ffd4 	bnei	r3, -44		// 20028b14
			invalue = invalue >> 1;
			tmp_res = res[0];
			res[0] = tmp_res + 1;
		}
	}
20028b44:	10330000 	addk	r1, r19, r0
20028b48:	ea61000c 	lwi	r19, r1, 12
20028b4c:	ea810010 	lwi	r20, r1, 16
20028b50:	30210014 	addik	r1, r1, 20
20028b54:	b60f0008 	rtsd	r15, 8
20028b58:	80000000 	or	r0, r0, r0

20028b5c <isSchedulable_untagged_0>:

	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_untagged_0() {
20028b5c:	3021ffe8 	addik	r1, r1, -24
20028b60:	fa610010 	swi	r19, r1, 16
20028b64:	fa810014 	swi	r20, r1, 20
20028b68:	12610000 	addk	r19, r1, r0
20028b6c:	96808000 	mfs	r20, rpc
20028b70:	b000dffd 	imm	-8195
20028b74:	32948df0 	addik	r20, r20, -29200
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20028b78:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20028b7c:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
20028b80:	e0730004 	lbui	r3, r19, 4
20028b84:	b0000000 	imm	0
20028b88:	e89405c8 	lwi	r4, r20, 1480
20028b8c:	10631800 	addk	r3, r3, r3
20028b90:	10641800 	addk	r3, r4, r3
20028b94:	e4630000 	lhui	r3, r3, 0
20028b98:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20028b9c:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20028ba0:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo <= (local_FIFO_SIZE - 1) << 3;
20028ba4:	e4b30006 	lhui	r5, r19, 6
20028ba8:	e0730008 	lbui	r3, r19, 8
20028bac:	3063ffff 	addik	r3, r3, -1
20028bb0:	64830403 	bslli	r4, r3, 3
20028bb4:	30600001 	addik	r3, r0, 1
20028bb8:	16452001 	cmp	r18, r5, r4
20028bbc:	bcb20008 	bgei	r18, 8		// 20028bc4
20028bc0:	10600000 	addk	r3, r0, r0
20028bc4:	a46300ff 	andi	r3, r3, 255
20028bc8:	f873000c 	swi	r3, r19, 12
		return result;
20028bcc:	e873000c 	lwi	r3, r19, 12
	}
20028bd0:	10330000 	addk	r1, r19, r0
20028bd4:	ea610010 	lwi	r19, r1, 16
20028bd8:	ea810014 	lwi	r20, r1, 20
20028bdc:	30210018 	addik	r1, r1, 24
20028be0:	b60f0008 	rtsd	r15, 8
20028be4:	80000000 	or	r0, r0, r0

20028be8 <untagged_0>:
	
	static void untagged_0() {
20028be8:	3021ffc4 	addik	r1, r1, -60
20028bec:	f9e10000 	swi	r15, r1, 0
20028bf0:	fa610034 	swi	r19, r1, 52
20028bf4:	fa810038 	swi	r20, r1, 56
20028bf8:	12610000 	addk	r19, r1, r0
20028bfc:	96808000 	mfs	r20, rpc
20028c00:	b000dffd 	imm	-8195
20028c04:	32948d60 	addik	r20, r20, -29344
	
		// Compute aligned port indexes
		i32 index_aligned_BYTE = index_BYTE % SIZE_BYTE;
20028c08:	b0000000 	imm	0
20028c0c:	e8740558 	lwi	r3, r20, 1368
20028c10:	e8630000 	lwi	r3, r3, 0
20028c14:	a46301ff 	andi	r3, r3, 511
20028c18:	f873001c 	swi	r3, r19, 28
		u16 tmp_fifo;
		i32 local_DEBUG_BITSTREAM;
		u16 tmp_fifo0;
		u8 local_FIFO_SIZE;
	
		b = tokens_BYTE[(index_BYTE + (0)) % SIZE_BYTE];
20028c1c:	b0000000 	imm	0
20028c20:	e8740534 	lwi	r3, r20, 1332
20028c24:	e8630000 	lwi	r3, r3, 0
20028c28:	e8830004 	lwi	r4, r3, 4
20028c2c:	b0000000 	imm	0
20028c30:	e8740558 	lwi	r3, r20, 1368
20028c34:	e8630000 	lwi	r3, r3, 0
20028c38:	a46301ff 	andi	r3, r3, 511
20028c3c:	10641800 	addk	r3, r4, r3
20028c40:	e0630000 	lbui	r3, r3, 0
20028c44:	f0730020 	sbi	r3, r19, 32
		local_FIFO_IDX = BitstreamReadUtils_FIFO_IDX;
20028c48:	30600009 	addik	r3, r0, 9
20028c4c:	f0730021 	sbi	r3, r19, 33
		fifo_idx = fifo[local_FIFO_IDX];
20028c50:	e0730021 	lbui	r3, r19, 33
20028c54:	b0000000 	imm	0
20028c58:	e89405c8 	lwi	r4, r20, 1480
20028c5c:	10631800 	addk	r3, r3, r3
20028c60:	10641800 	addk	r3, r4, r3
20028c64:	e4630000 	lhui	r3, r3, 0
20028c68:	f0730022 	sbi	r3, r19, 34
		local_START_CODE_VALUE = ParserUtils_START_CODE_VALUE;
20028c6c:	30600001 	addik	r3, r0, 1
20028c70:	f0730023 	sbi	r3, r19, 35
		local_zeroByte = zeroByte;
20028c74:	b0000000 	imm	0
20028c78:	e87405cc 	lwi	r3, r20, 1484
20028c7c:	e0630000 	lbui	r3, r3, 0
20028c80:	f0730024 	sbi	r3, r19, 36
		if (b == local_START_CODE_VALUE && local_zeroByte == 3) {
20028c84:	e0930020 	lbui	r4, r19, 32
20028c88:	e0730023 	lbui	r3, r19, 35
20028c8c:	88641800 	xor	r3, r4, r3
20028c90:	bc230050 	bnei	r3, 80		// 20028ce0
20028c94:	e0730024 	lbui	r3, r19, 36
20028c98:	a8630003 	xori	r3, r3, 3
20028c9c:	bc230044 	bnei	r3, 68		// 20028ce0
			local_START_CODE_FLAG = ParserUtils_START_CODE_FLAG;
20028ca0:	30600100 	addik	r3, r0, 256
20028ca4:	f4730026 	shi	r3, r19, 38
			fifo[fifo_idx] = b + local_START_CODE_FLAG;
20028ca8:	e0730022 	lbui	r3, r19, 34
20028cac:	e0930020 	lbui	r4, r19, 32
20028cb0:	b0000000 	imm	0
20028cb4:	a4a4ffff 	andi	r5, r4, -1
20028cb8:	e4930026 	lhui	r4, r19, 38
20028cbc:	10852000 	addk	r4, r5, r4
20028cc0:	b0000000 	imm	0
20028cc4:	a484ffff 	andi	r4, r4, -1
20028cc8:	b0000000 	imm	0
20028ccc:	e8b405c8 	lwi	r5, r20, 1480
20028cd0:	10631800 	addk	r3, r3, r3
20028cd4:	10651800 	addk	r3, r5, r3
20028cd8:	f4830000 	shi	r4, r3, 0
20028cdc:	b8000028 	bri	40		// 20028d04
		} else {
			fifo[fifo_idx] = b;
20028ce0:	e0730022 	lbui	r3, r19, 34
20028ce4:	e0930020 	lbui	r4, r19, 32
20028ce8:	b0000000 	imm	0
20028cec:	a484ffff 	andi	r4, r4, -1
20028cf0:	b0000000 	imm	0
20028cf4:	e8b405c8 	lwi	r5, r20, 1480
20028cf8:	10631800 	addk	r3, r3, r3
20028cfc:	10651800 	addk	r3, r5, r3
20028d00:	f4830000 	shi	r4, r3, 0
		}
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20028d04:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20028d08:	f0730028 	sbi	r3, r19, 40
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20028d0c:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20028d10:	f0730028 	sbi	r3, r19, 40
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
20028d14:	e0730028 	lbui	r3, r19, 40
20028d18:	b0000000 	imm	0
20028d1c:	e89405c8 	lwi	r4, r20, 1480
20028d20:	10631800 	addk	r3, r3, r3
20028d24:	10641800 	addk	r3, r4, r3
20028d28:	e4630000 	lhui	r3, r3, 0
20028d2c:	f473002a 	shi	r3, r19, 42
		fifo[local_FIFO_CPT_BITS] = tmp_fifo + 8;
20028d30:	e0730028 	lbui	r3, r19, 40
20028d34:	e493002a 	lhui	r4, r19, 42
20028d38:	30840008 	addik	r4, r4, 8
20028d3c:	b0000000 	imm	0
20028d40:	a484ffff 	andi	r4, r4, -1
20028d44:	b0000000 	imm	0
20028d48:	e8b405c8 	lwi	r5, r20, 1480
20028d4c:	10631800 	addk	r3, r3, r3
20028d50:	10651800 	addk	r3, r5, r3
20028d54:	f4830000 	shi	r4, r3, 0
		local_DEBUG_BITSTREAM = DEBUG_BITSTREAM;
20028d58:	f813002c 	swi	r0, r19, 44
		if (local_DEBUG_BITSTREAM) {
20028d5c:	e873002c 	lwi	r3, r19, 44
20028d60:	bc030028 	beqi	r3, 40		// 20028d88
			local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20028d64:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20028d68:	f0730028 	sbi	r3, r19, 40
			tmp_fifo0 = fifo[local_FIFO_CPT_BITS];
20028d6c:	e0730028 	lbui	r3, r19, 40
20028d70:	b0000000 	imm	0
20028d74:	e89405c8 	lwi	r4, r20, 1480
20028d78:	10631800 	addk	r3, r3, r3
20028d7c:	10641800 	addk	r3, r4, r3
20028d80:	e4630000 	lhui	r3, r3, 0
20028d84:	f4730030 	shi	r3, r19, 48
		}
		local_FIFO_IDX = BitstreamReadUtils_FIFO_IDX;
20028d88:	30600009 	addik	r3, r0, 9
20028d8c:	f0730021 	sbi	r3, r19, 33
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20028d90:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20028d94:	f0730032 	sbi	r3, r19, 50
		fifo[local_FIFO_IDX] = fifo_idx + 1 & local_FIFO_SIZE - 1;
20028d98:	e0730021 	lbui	r3, r19, 33
20028d9c:	e0930022 	lbui	r4, r19, 34
20028da0:	b0000000 	imm	0
20028da4:	a484ffff 	andi	r4, r4, -1
20028da8:	30840001 	addik	r4, r4, 1
20028dac:	b0000000 	imm	0
20028db0:	a484ffff 	andi	r4, r4, -1
20028db4:	90a40061 	sext16	r5, r4
20028db8:	e0930032 	lbui	r4, r19, 50
20028dbc:	b0000000 	imm	0
20028dc0:	a484ffff 	andi	r4, r4, -1
20028dc4:	3084ffff 	addik	r4, r4, -1
20028dc8:	b0000000 	imm	0
20028dcc:	a484ffff 	andi	r4, r4, -1
20028dd0:	90840061 	sext16	r4, r4
20028dd4:	84852000 	and	r4, r5, r4
20028dd8:	90840061 	sext16	r4, r4
20028ddc:	b0000000 	imm	0
20028de0:	a484ffff 	andi	r4, r4, -1
20028de4:	b0000000 	imm	0
20028de8:	e8b405c8 	lwi	r5, r20, 1480
20028dec:	10631800 	addk	r3, r3, r3
20028df0:	10651800 	addk	r3, r5, r3
20028df4:	f4830000 	shi	r4, r3, 0
		if (b == 0) {
20028df8:	e0730020 	lbui	r3, r19, 32
20028dfc:	bc230040 	bnei	r3, 64		// 20028e3c
			local_zeroByte = zeroByte;
20028e00:	b0000000 	imm	0
20028e04:	e87405cc 	lwi	r3, r20, 1484
20028e08:	e0630000 	lbui	r3, r3, 0
20028e0c:	f0730024 	sbi	r3, r19, 36
			zeroByte = (local_zeroByte << 1) + 1 & 3;
20028e10:	e0730024 	lbui	r3, r19, 36
20028e14:	10631800 	addk	r3, r3, r3
20028e18:	a46300ff 	andi	r3, r3, 255
20028e1c:	30630001 	addik	r3, r3, 1
20028e20:	a46300ff 	andi	r3, r3, 255
20028e24:	a4630003 	andi	r3, r3, 3
20028e28:	a48300ff 	andi	r4, r3, 255
20028e2c:	b0000000 	imm	0
20028e30:	e87405cc 	lwi	r3, r20, 1484
20028e34:	f0830000 	sbi	r4, r3, 0
20028e38:	b8000010 	bri	16		// 20028e48
		} else {
			zeroByte = 0;
20028e3c:	b0000000 	imm	0
20028e40:	e87405cc 	lwi	r3, r20, 1484
20028e44:	f0030000 	sbi	r0, r3, 0
		}
	
		// Update ports indexes
		index_BYTE += 1;
20028e48:	b0000000 	imm	0
20028e4c:	e8740558 	lwi	r3, r20, 1368
20028e50:	e8630000 	lwi	r3, r3, 0
20028e54:	30830001 	addik	r4, r3, 1
20028e58:	b0000000 	imm	0
20028e5c:	e8740558 	lwi	r3, r20, 1368
20028e60:	f8830000 	swi	r4, r3, 0
		
		read_end_BYTE();
20028e64:	b0000000 	imm	0
20028e68:	e874065c 	lwi	r3, r20, 1628
20028e6c:	99fc1800 	brald	r15, r3
20028e70:	80000000 	or	r0, r0, r0
	}
20028e74:	e9e10000 	lwi	r15, r1, 0
20028e78:	10330000 	addk	r1, r19, r0
20028e7c:	ea610034 	lwi	r19, r1, 52
20028e80:	ea810038 	lwi	r20, r1, 56
20028e84:	3021003c 	addik	r1, r1, 60
20028e88:	b60f0008 	rtsd	r15, 8
20028e8c:	80000000 	or	r0, r0, r0

20028e90 <isSchedulable_look_for_Sequence_Header>:
	static i32 isSchedulable_look_for_Sequence_Header() {
20028e90:	3021fff0 	addik	r1, r1, -16
20028e94:	fa610008 	swi	r19, r1, 8
20028e98:	fa81000c 	swi	r20, r1, 12
20028e9c:	12610000 	addk	r19, r1, r0
20028ea0:	96808000 	mfs	r20, rpc
20028ea4:	b000dffd 	imm	-8195
20028ea8:	32948abc 	addik	r20, r20, -30020
		i32 result;
	
		result = 1;
20028eac:	30600001 	addik	r3, r0, 1
20028eb0:	f8730004 	swi	r3, r19, 4
		return result;
20028eb4:	e8730004 	lwi	r3, r19, 4
	}
20028eb8:	10330000 	addk	r1, r19, r0
20028ebc:	ea610008 	lwi	r19, r1, 8
20028ec0:	ea81000c 	lwi	r20, r1, 12
20028ec4:	30210010 	addik	r1, r1, 16
20028ec8:	b60f0008 	rtsd	r15, 8
20028ecc:	80000000 	or	r0, r0, r0

20028ed0 <look_for_Sequence_Header>:
	
	static void look_for_Sequence_Header() {
20028ed0:	3021fff4 	addik	r1, r1, -12
20028ed4:	fa610004 	swi	r19, r1, 4
20028ed8:	fa810008 	swi	r20, r1, 8
20028edc:	12610000 	addk	r19, r1, r0
20028ee0:	96808000 	mfs	r20, rpc
20028ee4:	b000dffd 	imm	-8195
20028ee8:	32948a7c 	addik	r20, r20, -30084
	
	
	
		// Update ports indexes
		
	}
20028eec:	10330000 	addk	r1, r19, r0
20028ef0:	ea610004 	lwi	r19, r1, 4
20028ef4:	ea810008 	lwi	r20, r1, 8
20028ef8:	3021000c 	addik	r1, r1, 12
20028efc:	b60f0008 	rtsd	r15, 8
20028f00:	80000000 	or	r0, r0, r0

20028f04 <isSchedulable_read_start_code>:
	static i32 isSchedulable_read_start_code() {
20028f04:	3021ffe8 	addik	r1, r1, -24
20028f08:	fa610010 	swi	r19, r1, 16
20028f0c:	fa810014 	swi	r20, r1, 20
20028f10:	12610000 	addk	r19, r1, r0
20028f14:	96808000 	mfs	r20, rpc
20028f18:	b000dffd 	imm	-8195
20028f1c:	32948a48 	addik	r20, r20, -30136
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20028f20:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20028f24:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
20028f28:	e0730004 	lbui	r3, r19, 4
20028f2c:	b0000000 	imm	0
20028f30:	e89405c8 	lwi	r4, r20, 1480
20028f34:	10631800 	addk	r3, r3, r3
20028f38:	10641800 	addk	r3, r4, r3
20028f3c:	e4630000 	lhui	r3, r3, 0
20028f40:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20028f44:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20028f48:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
20028f4c:	e4b30006 	lhui	r5, r19, 6
20028f50:	e0730008 	lbui	r3, r19, 8
20028f54:	3063ffff 	addik	r3, r3, -1
20028f58:	64830403 	bslli	r4, r3, 3
20028f5c:	30600001 	addik	r3, r0, 1
20028f60:	16442801 	cmp	r18, r4, r5
20028f64:	bcb20008 	bgei	r18, 8		// 20028f6c
20028f68:	10600000 	addk	r3, r0, r0
20028f6c:	a46300ff 	andi	r3, r3, 255
20028f70:	f873000c 	swi	r3, r19, 12
		return result;
20028f74:	e873000c 	lwi	r3, r19, 12
	}
20028f78:	10330000 	addk	r1, r19, r0
20028f7c:	ea610010 	lwi	r19, r1, 16
20028f80:	ea810014 	lwi	r20, r1, 20
20028f84:	30210018 	addik	r1, r1, 24
20028f88:	b60f0008 	rtsd	r15, 8
20028f8c:	80000000 	or	r0, r0, r0

20028f90 <read_start_code>:
	
	static void read_start_code() {
20028f90:	3021ffd4 	addik	r1, r1, -44
20028f94:	f9e10000 	swi	r15, r1, 0
20028f98:	fa610024 	swi	r19, r1, 36
20028f9c:	fa810028 	swi	r20, r1, 40
20028fa0:	12610000 	addk	r19, r1, r0
20028fa4:	96808000 	mfs	r20, rpc
20028fa8:	b000dffd 	imm	-8195
20028fac:	329489b8 	addik	r20, r20, -30280
		// Compute aligned port indexes
	
		i32 res[1];
		i32 tmp_res;
	
		BitstreamReadUtils_vld_u_name(8, fifo, res, "start_code                           ");
20028fb0:	30730020 	addik	r3, r19, 32
20028fb4:	30a00008 	addik	r5, r0, 8	// 8 <_vector_sw_exception>
20028fb8:	b0000000 	imm	0
20028fbc:	e8d405c8 	lwi	r6, r20, 1480
20028fc0:	10e30000 	addk	r7, r3, r0
20028fc4:	b0000000 	imm	0
20028fc8:	e9140800 	lwi	r8, r20, 2048
20028fcc:	b0000000 	imm	0
20028fd0:	e87406b4 	lwi	r3, r20, 1716
20028fd4:	99fc1800 	brald	r15, r3
20028fd8:	80000000 	or	r0, r0, r0
		tmp_res = res[0];
20028fdc:	e8730020 	lwi	r3, r19, 32
20028fe0:	f873001c 	swi	r3, r19, 28
		start_code = tmp_res;
20028fe4:	e873001c 	lwi	r3, r19, 28
20028fe8:	a48300ff 	andi	r4, r3, 255
20028fec:	b0000000 	imm	0
20028ff0:	e87405d0 	lwi	r3, r20, 1488
20028ff4:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		
	}
20028ff8:	e9e10000 	lwi	r15, r1, 0
20028ffc:	10330000 	addk	r1, r19, r0
20029000:	ea610024 	lwi	r19, r1, 36
20029004:	ea810028 	lwi	r20, r1, 40
20029008:	3021002c 	addik	r1, r1, 44
2002900c:	b60f0008 	rtsd	r15, 8
20029010:	80000000 	or	r0, r0, r0

20029014 <isSchedulable_look_for_other_header>:
	static i32 isSchedulable_look_for_other_header() {
20029014:	3021fff0 	addik	r1, r1, -16
20029018:	fa610008 	swi	r19, r1, 8
2002901c:	fa81000c 	swi	r20, r1, 12
20029020:	12610000 	addk	r19, r1, r0
20029024:	96808000 	mfs	r20, rpc
20029028:	b000dffd 	imm	-8195
2002902c:	32948938 	addik	r20, r20, -30408
		i32 result;
	
		result = 1;
20029030:	30600001 	addik	r3, r0, 1
20029034:	f8730004 	swi	r3, r19, 4
		return result;
20029038:	e8730004 	lwi	r3, r19, 4
	}
2002903c:	10330000 	addk	r1, r19, r0
20029040:	ea610008 	lwi	r19, r1, 8
20029044:	ea81000c 	lwi	r20, r1, 12
20029048:	30210010 	addik	r1, r1, 16
2002904c:	b60f0008 	rtsd	r15, 8
20029050:	80000000 	or	r0, r0, r0

20029054 <look_for_other_header>:
	
	static void look_for_other_header() {
20029054:	3021fff4 	addik	r1, r1, -12
20029058:	fa610004 	swi	r19, r1, 4
2002905c:	fa810008 	swi	r20, r1, 8
20029060:	12610000 	addk	r19, r1, r0
20029064:	96808000 	mfs	r20, rpc
20029068:	b000dffd 	imm	-8195
2002906c:	329488f8 	addik	r20, r20, -30472
	
	
	
		// Update ports indexes
		
	}
20029070:	10330000 	addk	r1, r19, r0
20029074:	ea610004 	lwi	r19, r1, 4
20029078:	ea810008 	lwi	r20, r1, 8
2002907c:	3021000c 	addik	r1, r1, 12
20029080:	b60f0008 	rtsd	r15, 8
20029084:	80000000 	or	r0, r0, r0

20029088 <isSchedulable_look_for_vol>:
	static i32 isSchedulable_look_for_vol() {
20029088:	3021ffe8 	addik	r1, r1, -24
2002908c:	fa610010 	swi	r19, r1, 16
20029090:	fa810014 	swi	r20, r1, 20
20029094:	12610000 	addk	r19, r1, r0
20029098:	96808000 	mfs	r20, rpc
2002909c:	b000dffd 	imm	-8195
200290a0:	329488c4 	addik	r20, r20, -30524
		i32 result;
		u8 local_start_code;
		i32 local_VOL_START_CODE;
	
		local_start_code = start_code;
200290a4:	b0000000 	imm	0
200290a8:	e87405d0 	lwi	r3, r20, 1488
200290ac:	e0630000 	lbui	r3, r3, 0
200290b0:	f0730004 	sbi	r3, r19, 4
		local_VOL_START_CODE = VOL_START_CODE;
200290b4:	30600020 	addik	r3, r0, 32	// 20 <_vector_hw_exception>
200290b8:	f8730008 	swi	r3, r19, 8
		result = local_start_code == local_VOL_START_CODE;
200290bc:	e0930004 	lbui	r4, r19, 4
200290c0:	e8730008 	lwi	r3, r19, 8
200290c4:	88641c00 	pcmpeq	r3, r4, r3
200290c8:	a46300ff 	andi	r3, r3, 255
200290cc:	f873000c 	swi	r3, r19, 12
		return result;
200290d0:	e873000c 	lwi	r3, r19, 12
	}
200290d4:	10330000 	addk	r1, r19, r0
200290d8:	ea610010 	lwi	r19, r1, 16
200290dc:	ea810014 	lwi	r20, r1, 20
200290e0:	30210018 	addik	r1, r1, 24
200290e4:	b60f0008 	rtsd	r15, 8
200290e8:	80000000 	or	r0, r0, r0

200290ec <look_for_vol>:
	
	static void look_for_vol() {
200290ec:	3021fff4 	addik	r1, r1, -12
200290f0:	fa610004 	swi	r19, r1, 4
200290f4:	fa810008 	swi	r20, r1, 8
200290f8:	12610000 	addk	r19, r1, r0
200290fc:	96808000 	mfs	r20, rpc
20029100:	b000dffd 	imm	-8195
20029104:	32948860 	addik	r20, r20, -30624
	
	
	
		// Update ports indexes
		
	}
20029108:	10330000 	addk	r1, r19, r0
2002910c:	ea610004 	lwi	r19, r1, 4
20029110:	ea810008 	lwi	r20, r1, 8
20029114:	3021000c 	addik	r1, r1, 12
20029118:	b60f0008 	rtsd	r15, 8
2002911c:	80000000 	or	r0, r0, r0

20029120 <isSchedulable_look_for_vop>:
	static i32 isSchedulable_look_for_vop() {
20029120:	3021ffe8 	addik	r1, r1, -24
20029124:	fa610010 	swi	r19, r1, 16
20029128:	fa810014 	swi	r20, r1, 20
2002912c:	12610000 	addk	r19, r1, r0
20029130:	96808000 	mfs	r20, rpc
20029134:	b000dffd 	imm	-8195
20029138:	3294882c 	addik	r20, r20, -30676
		i32 result;
		u8 local_start_code;
		i32 local_VOP_START_CODE;
	
		local_start_code = start_code;
2002913c:	b0000000 	imm	0
20029140:	e87405d0 	lwi	r3, r20, 1488
20029144:	e0630000 	lbui	r3, r3, 0
20029148:	f0730004 	sbi	r3, r19, 4
		local_VOP_START_CODE = VOP_START_CODE;
2002914c:	306000b6 	addik	r3, r0, 182
20029150:	f8730008 	swi	r3, r19, 8
		result = local_start_code == local_VOP_START_CODE;
20029154:	e0930004 	lbui	r4, r19, 4
20029158:	e8730008 	lwi	r3, r19, 8
2002915c:	88641c00 	pcmpeq	r3, r4, r3
20029160:	a46300ff 	andi	r3, r3, 255
20029164:	f873000c 	swi	r3, r19, 12
		return result;
20029168:	e873000c 	lwi	r3, r19, 12
	}
2002916c:	10330000 	addk	r1, r19, r0
20029170:	ea610010 	lwi	r19, r1, 16
20029174:	ea810014 	lwi	r20, r1, 20
20029178:	30210018 	addik	r1, r1, 24
2002917c:	b60f0008 	rtsd	r15, 8
20029180:	80000000 	or	r0, r0, r0

20029184 <look_for_vop>:
	
	static void look_for_vop() {
20029184:	3021fff4 	addik	r1, r1, -12
20029188:	fa610004 	swi	r19, r1, 4
2002918c:	fa810008 	swi	r20, r1, 8
20029190:	12610000 	addk	r19, r1, r0
20029194:	96808000 	mfs	r20, rpc
20029198:	b000dffd 	imm	-8195
2002919c:	329487c8 	addik	r20, r20, -30776
	
	
	
		// Update ports indexes
		
	}
200291a0:	10330000 	addk	r1, r19, r0
200291a4:	ea610004 	lwi	r19, r1, 4
200291a8:	ea810008 	lwi	r20, r1, 8
200291ac:	3021000c 	addik	r1, r1, 12
200291b0:	b60f0008 	rtsd	r15, 8
200291b4:	80000000 	or	r0, r0, r0

200291b8 <isSchedulable_read_vol_start>:
	static i32 isSchedulable_read_vol_start() {
200291b8:	3021ffe8 	addik	r1, r1, -24
200291bc:	fa610010 	swi	r19, r1, 16
200291c0:	fa810014 	swi	r20, r1, 20
200291c4:	12610000 	addk	r19, r1, r0
200291c8:	96808000 	mfs	r20, rpc
200291cc:	b000dffd 	imm	-8195
200291d0:	32948794 	addik	r20, r20, -30828
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
200291d4:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200291d8:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
200291dc:	e0730004 	lbui	r3, r19, 4
200291e0:	b0000000 	imm	0
200291e4:	e89405c8 	lwi	r4, r20, 1480
200291e8:	10631800 	addk	r3, r3, r3
200291ec:	10641800 	addk	r3, r4, r3
200291f0:	e4630000 	lhui	r3, r3, 0
200291f4:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
200291f8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200291fc:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
20029200:	e4b30006 	lhui	r5, r19, 6
20029204:	e0730008 	lbui	r3, r19, 8
20029208:	3063ffff 	addik	r3, r3, -1
2002920c:	64830403 	bslli	r4, r3, 3
20029210:	30600001 	addik	r3, r0, 1
20029214:	16442801 	cmp	r18, r4, r5
20029218:	bcb20008 	bgei	r18, 8		// 20029220
2002921c:	10600000 	addk	r3, r0, r0
20029220:	a46300ff 	andi	r3, r3, 255
20029224:	f873000c 	swi	r3, r19, 12
		return result;
20029228:	e873000c 	lwi	r3, r19, 12
	}
2002922c:	10330000 	addk	r1, r19, r0
20029230:	ea610010 	lwi	r19, r1, 16
20029234:	ea810014 	lwi	r20, r1, 20
20029238:	30210018 	addik	r1, r1, 24
2002923c:	b60f0008 	rtsd	r15, 8
20029240:	80000000 	or	r0, r0, r0

20029244 <read_vol_start>:
	
	static void read_vol_start() {
20029244:	3021ffb8 	addik	r1, r1, -72
20029248:	f9e10000 	swi	r15, r1, 0
2002924c:	fa610040 	swi	r19, r1, 64
20029250:	fa810044 	swi	r20, r1, 68
20029254:	12610000 	addk	r19, r1, r0
20029258:	96808000 	mfs	r20, rpc
2002925c:	b000dffd 	imm	-8195
20029260:	32948704 	addik	r20, r20, -30972
		i32 tmp_res0;
		i32 local_vol_control_parameters;
		i32 tmp_res1;
		i32 local_vbv_parameters;
	
		BitstreamReadUtils_vld_u_name(1, fifo, res, "random_accessible_vol                           ");
20029264:	3073003c 	addik	r3, r19, 60
20029268:	30a00001 	addik	r5, r0, 1
2002926c:	b0000000 	imm	0
20029270:	e8d405c8 	lwi	r6, r20, 1480
20029274:	10e30000 	addk	r7, r3, r0
20029278:	b0000000 	imm	0
2002927c:	e9140804 	lwi	r8, r20, 2052
20029280:	b0000000 	imm	0
20029284:	e87406b4 	lwi	r3, r20, 1716
20029288:	99fc1800 	brald	r15, r3
2002928c:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(8, fifo, res, "video_object_type_indication                           ");
20029290:	3073003c 	addik	r3, r19, 60
20029294:	30a00008 	addik	r5, r0, 8	// 8 <_vector_sw_exception>
20029298:	b0000000 	imm	0
2002929c:	e8d405c8 	lwi	r6, r20, 1480
200292a0:	10e30000 	addk	r7, r3, r0
200292a4:	b0000000 	imm	0
200292a8:	e9140808 	lwi	r8, r20, 2056
200292ac:	b0000000 	imm	0
200292b0:	e87406b4 	lwi	r3, r20, 1716
200292b4:	99fc1800 	brald	r15, r3
200292b8:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "is_object_layer_identifier                           ");
200292bc:	3073003c 	addik	r3, r19, 60
200292c0:	30a00001 	addik	r5, r0, 1
200292c4:	b0000000 	imm	0
200292c8:	e8d405c8 	lwi	r6, r20, 1480
200292cc:	10e30000 	addk	r7, r3, r0
200292d0:	b0000000 	imm	0
200292d4:	e914080c 	lwi	r8, r20, 2060
200292d8:	b0000000 	imm	0
200292dc:	e87406b4 	lwi	r3, r20, 1716
200292e0:	99fc1800 	brald	r15, r3
200292e4:	80000000 	or	r0, r0, r0
		tmp_res = res[0];
200292e8:	e873003c 	lwi	r3, r19, 60
200292ec:	f873001c 	swi	r3, r19, 28
		is_object_layer_identifier = tmp_res == 1;
200292f0:	e893001c 	lwi	r4, r19, 28
200292f4:	30600001 	addik	r3, r0, 1
200292f8:	88641c00 	pcmpeq	r3, r4, r3
200292fc:	a46300ff 	andi	r3, r3, 255
20029300:	f8730020 	swi	r3, r19, 32
		if (is_object_layer_identifier) {
20029304:	e8730020 	lwi	r3, r19, 32
20029308:	bc03005c 	beqi	r3, 92		// 20029364
			BitstreamReadUtils_vld_u_name(4, fifo, res, "video_object_layer_verid                           ");
2002930c:	3073003c 	addik	r3, r19, 60
20029310:	30a00004 	addik	r5, r0, 4
20029314:	b0000000 	imm	0
20029318:	e8d405c8 	lwi	r6, r20, 1480
2002931c:	10e30000 	addk	r7, r3, r0
20029320:	b0000000 	imm	0
20029324:	e9140810 	lwi	r8, r20, 2064
20029328:	b0000000 	imm	0
2002932c:	e87406b4 	lwi	r3, r20, 1716
20029330:	99fc1800 	brald	r15, r3
20029334:	80000000 	or	r0, r0, r0
			BitstreamReadUtils_vld_u_name(3, fifo, res, "video_object_layer_priority                           ");
20029338:	3073003c 	addik	r3, r19, 60
2002933c:	30a00003 	addik	r5, r0, 3
20029340:	b0000000 	imm	0
20029344:	e8d405c8 	lwi	r6, r20, 1480
20029348:	10e30000 	addk	r7, r3, r0
2002934c:	b0000000 	imm	0
20029350:	e9140814 	lwi	r8, r20, 2068
20029354:	b0000000 	imm	0
20029358:	e87406b4 	lwi	r3, r20, 1716
2002935c:	99fc1800 	brald	r15, r3
20029360:	80000000 	or	r0, r0, r0
		}
		BitstreamReadUtils_vld_u_name(4, fifo, res, "aspect_ratio_info                           ");
20029364:	3073003c 	addik	r3, r19, 60
20029368:	30a00004 	addik	r5, r0, 4
2002936c:	b0000000 	imm	0
20029370:	e8d405c8 	lwi	r6, r20, 1480
20029374:	10e30000 	addk	r7, r3, r0
20029378:	b0000000 	imm	0
2002937c:	e9140818 	lwi	r8, r20, 2072
20029380:	b0000000 	imm	0
20029384:	e87406b4 	lwi	r3, r20, 1716
20029388:	99fc1800 	brald	r15, r3
2002938c:	80000000 	or	r0, r0, r0
		aspect_ratio_info = res[0];
20029390:	e873003c 	lwi	r3, r19, 60
20029394:	f0730024 	sbi	r3, r19, 36
		local_EXTENDED_PAR = EXTENDED_PAR;
20029398:	3060000f 	addik	r3, r0, 15
2002939c:	f8730028 	swi	r3, r19, 40
		if (aspect_ratio_info == local_EXTENDED_PAR) {
200293a0:	e0930024 	lbui	r4, r19, 36
200293a4:	e8730028 	lwi	r3, r19, 40
200293a8:	88641800 	xor	r3, r4, r3
200293ac:	bc23005c 	bnei	r3, 92		// 20029408
			BitstreamReadUtils_vld_u_name(8, fifo, res, "par_width                           ");
200293b0:	3073003c 	addik	r3, r19, 60
200293b4:	30a00008 	addik	r5, r0, 8	// 8 <_vector_sw_exception>
200293b8:	b0000000 	imm	0
200293bc:	e8d405c8 	lwi	r6, r20, 1480
200293c0:	10e30000 	addk	r7, r3, r0
200293c4:	b0000000 	imm	0
200293c8:	e914081c 	lwi	r8, r20, 2076
200293cc:	b0000000 	imm	0
200293d0:	e87406b4 	lwi	r3, r20, 1716
200293d4:	99fc1800 	brald	r15, r3
200293d8:	80000000 	or	r0, r0, r0
			BitstreamReadUtils_vld_u_name(8, fifo, res, "par_height                          ");
200293dc:	3073003c 	addik	r3, r19, 60
200293e0:	30a00008 	addik	r5, r0, 8	// 8 <_vector_sw_exception>
200293e4:	b0000000 	imm	0
200293e8:	e8d405c8 	lwi	r6, r20, 1480
200293ec:	10e30000 	addk	r7, r3, r0
200293f0:	b0000000 	imm	0
200293f4:	e9140820 	lwi	r8, r20, 2080
200293f8:	b0000000 	imm	0
200293fc:	e87406b4 	lwi	r3, r20, 1716
20029400:	99fc1800 	brald	r15, r3
20029404:	80000000 	or	r0, r0, r0
		}
		BitstreamReadUtils_vld_u_name(1, fifo, res, "vol_control_parameters                           ");
20029408:	3073003c 	addik	r3, r19, 60
2002940c:	30a00001 	addik	r5, r0, 1
20029410:	b0000000 	imm	0
20029414:	e8d405c8 	lwi	r6, r20, 1480
20029418:	10e30000 	addk	r7, r3, r0
2002941c:	b0000000 	imm	0
20029420:	e9140824 	lwi	r8, r20, 2084
20029424:	b0000000 	imm	0
20029428:	e87406b4 	lwi	r3, r20, 1716
2002942c:	99fc1800 	brald	r15, r3
20029430:	80000000 	or	r0, r0, r0
		tmp_res0 = res[0];
20029434:	e873003c 	lwi	r3, r19, 60
20029438:	f873002c 	swi	r3, r19, 44
		vol_control_parameters = tmp_res0 == 1;
2002943c:	e893002c 	lwi	r4, r19, 44
20029440:	30600001 	addik	r3, r0, 1
20029444:	88641c00 	pcmpeq	r3, r4, r3
20029448:	a46300ff 	andi	r3, r3, 255
2002944c:	10830000 	addk	r4, r3, r0
20029450:	b0000000 	imm	0
20029454:	e87405d4 	lwi	r3, r20, 1492
20029458:	f8830000 	swi	r4, r3, 0
		local_vol_control_parameters = vol_control_parameters;
2002945c:	b0000000 	imm	0
20029460:	e87405d4 	lwi	r3, r20, 1492
20029464:	e8630000 	lwi	r3, r3, 0
20029468:	f8730030 	swi	r3, r19, 48
		if (local_vol_control_parameters) {
2002946c:	e8730030 	lwi	r3, r19, 48
20029470:	bc030120 	beqi	r3, 288		// 20029590
			BitstreamReadUtils_vld_u_name(2, fifo, res, "chroma_format                           ");
20029474:	3073003c 	addik	r3, r19, 60
20029478:	30a00002 	addik	r5, r0, 2
2002947c:	b0000000 	imm	0
20029480:	e8d405c8 	lwi	r6, r20, 1480
20029484:	10e30000 	addk	r7, r3, r0
20029488:	b0000000 	imm	0
2002948c:	e9140828 	lwi	r8, r20, 2088
20029490:	b0000000 	imm	0
20029494:	e87406b4 	lwi	r3, r20, 1716
20029498:	99fc1800 	brald	r15, r3
2002949c:	80000000 	or	r0, r0, r0
			BitstreamReadUtils_vld_u_name(1, fifo, res, "low_delay                           ");
200294a0:	3073003c 	addik	r3, r19, 60
200294a4:	30a00001 	addik	r5, r0, 1
200294a8:	b0000000 	imm	0
200294ac:	e8d405c8 	lwi	r6, r20, 1480
200294b0:	10e30000 	addk	r7, r3, r0
200294b4:	b0000000 	imm	0
200294b8:	e914082c 	lwi	r8, r20, 2092
200294bc:	b0000000 	imm	0
200294c0:	e87406b4 	lwi	r3, r20, 1716
200294c4:	99fc1800 	brald	r15, r3
200294c8:	80000000 	or	r0, r0, r0
			BitstreamReadUtils_vld_u_name(1, fifo, res, "vbv_parameters                           ");
200294cc:	3073003c 	addik	r3, r19, 60
200294d0:	30a00001 	addik	r5, r0, 1
200294d4:	b0000000 	imm	0
200294d8:	e8d405c8 	lwi	r6, r20, 1480
200294dc:	10e30000 	addk	r7, r3, r0
200294e0:	b0000000 	imm	0
200294e4:	e9140830 	lwi	r8, r20, 2096
200294e8:	b0000000 	imm	0
200294ec:	e87406b4 	lwi	r3, r20, 1716
200294f0:	99fc1800 	brald	r15, r3
200294f4:	80000000 	or	r0, r0, r0
			tmp_res1 = res[0];
200294f8:	e873003c 	lwi	r3, r19, 60
200294fc:	f8730034 	swi	r3, r19, 52
			vbv_parameters = tmp_res1 == 1;
20029500:	e8930034 	lwi	r4, r19, 52
20029504:	30600001 	addik	r3, r0, 1
20029508:	88641c00 	pcmpeq	r3, r4, r3
2002950c:	a46300ff 	andi	r3, r3, 255
20029510:	10830000 	addk	r4, r3, r0
20029514:	b0000000 	imm	0
20029518:	e87405d8 	lwi	r3, r20, 1496
2002951c:	f8830000 	swi	r4, r3, 0
			local_vbv_parameters = vbv_parameters;
20029520:	b0000000 	imm	0
20029524:	e87405d8 	lwi	r3, r20, 1496
20029528:	e8630000 	lwi	r3, r3, 0
2002952c:	f8730038 	swi	r3, r19, 56
			if (local_vbv_parameters) {
20029530:	e8730038 	lwi	r3, r19, 56
20029534:	bc03005c 	beqi	r3, 92		// 20029590
				BitstreamReadUtils_vld_u_name(15, fifo, res, "first_half_bit_rate                           ");
20029538:	3073003c 	addik	r3, r19, 60
2002953c:	30a0000f 	addik	r5, r0, 15
20029540:	b0000000 	imm	0
20029544:	e8d405c8 	lwi	r6, r20, 1480
20029548:	10e30000 	addk	r7, r3, r0
2002954c:	b0000000 	imm	0
20029550:	e9140834 	lwi	r8, r20, 2100
20029554:	b0000000 	imm	0
20029558:	e87406b4 	lwi	r3, r20, 1716
2002955c:	99fc1800 	brald	r15, r3
20029560:	80000000 	or	r0, r0, r0
				BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
20029564:	3073003c 	addik	r3, r19, 60
20029568:	30a00001 	addik	r5, r0, 1
2002956c:	b0000000 	imm	0
20029570:	e8d405c8 	lwi	r6, r20, 1480
20029574:	10e30000 	addk	r7, r3, r0
20029578:	b0000000 	imm	0
2002957c:	e9140838 	lwi	r8, r20, 2104
20029580:	b0000000 	imm	0
20029584:	e87406b4 	lwi	r3, r20, 1716
20029588:	99fc1800 	brald	r15, r3
2002958c:	80000000 	or	r0, r0, r0
			}
		}
	
		// Update ports indexes
		
	}
20029590:	e9e10000 	lwi	r15, r1, 0
20029594:	10330000 	addk	r1, r19, r0
20029598:	ea610040 	lwi	r19, r1, 64
2002959c:	ea810044 	lwi	r20, r1, 68
200295a0:	30210048 	addik	r1, r1, 72
200295a4:	b60f0008 	rtsd	r15, 8
200295a8:	80000000 	or	r0, r0, r0

200295ac <isSchedulable_read_vol_vbv_parameters1>:
	static i32 isSchedulable_read_vol_vbv_parameters1() {
200295ac:	3021ffe8 	addik	r1, r1, -24
200295b0:	fa610010 	swi	r19, r1, 16
200295b4:	fa810014 	swi	r20, r1, 20
200295b8:	12610000 	addk	r19, r1, r0
200295bc:	96808000 	mfs	r20, rpc
200295c0:	b000dffd 	imm	-8195
200295c4:	329483a0 	addik	r20, r20, -31840
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
200295c8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200295cc:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
200295d0:	e0730004 	lbui	r3, r19, 4
200295d4:	b0000000 	imm	0
200295d8:	e89405c8 	lwi	r4, r20, 1480
200295dc:	10631800 	addk	r3, r3, r3
200295e0:	10641800 	addk	r3, r4, r3
200295e4:	e4630000 	lhui	r3, r3, 0
200295e8:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
200295ec:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200295f0:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
200295f4:	e4b30006 	lhui	r5, r19, 6
200295f8:	e0730008 	lbui	r3, r19, 8
200295fc:	3063ffff 	addik	r3, r3, -1
20029600:	64830403 	bslli	r4, r3, 3
20029604:	30600001 	addik	r3, r0, 1
20029608:	16442801 	cmp	r18, r4, r5
2002960c:	bcb20008 	bgei	r18, 8		// 20029614
20029610:	10600000 	addk	r3, r0, r0
20029614:	a46300ff 	andi	r3, r3, 255
20029618:	f873000c 	swi	r3, r19, 12
		return result;
2002961c:	e873000c 	lwi	r3, r19, 12
	}
20029620:	10330000 	addk	r1, r19, r0
20029624:	ea610010 	lwi	r19, r1, 16
20029628:	ea810014 	lwi	r20, r1, 20
2002962c:	30210018 	addik	r1, r1, 24
20029630:	b60f0008 	rtsd	r15, 8
20029634:	80000000 	or	r0, r0, r0

20029638 <read_vol_vbv_parameters1>:
	
	static void read_vol_vbv_parameters1() {
20029638:	3021ffd0 	addik	r1, r1, -48
2002963c:	f9e10000 	swi	r15, r1, 0
20029640:	fa610028 	swi	r19, r1, 40
20029644:	fa81002c 	swi	r20, r1, 44
20029648:	12610000 	addk	r19, r1, r0
2002964c:	96808000 	mfs	r20, rpc
20029650:	b000dffd 	imm	-8195
20029654:	32948310 	addik	r20, r20, -31984
	
		i32 res[1];
		i32 local_vol_control_parameters;
		i32 local_vbv_parameters;
	
		local_vol_control_parameters = vol_control_parameters;
20029658:	b0000000 	imm	0
2002965c:	e87405d4 	lwi	r3, r20, 1492
20029660:	e8630000 	lwi	r3, r3, 0
20029664:	f873001c 	swi	r3, r19, 28
		if (local_vol_control_parameters) {
20029668:	e873001c 	lwi	r3, r19, 28
2002966c:	bc030150 	beqi	r3, 336		// 200297bc
			local_vbv_parameters = vbv_parameters;
20029670:	b0000000 	imm	0
20029674:	e87405d8 	lwi	r3, r20, 1496
20029678:	e8630000 	lwi	r3, r3, 0
2002967c:	f8730020 	swi	r3, r19, 32
			if (local_vbv_parameters) {
20029680:	e8730020 	lwi	r3, r19, 32
20029684:	bc030138 	beqi	r3, 312		// 200297bc
				BitstreamReadUtils_vld_u_name(15, fifo, res, "latter_half_bit_rate                           ");
20029688:	30730024 	addik	r3, r19, 36
2002968c:	30a0000f 	addik	r5, r0, 15
20029690:	b0000000 	imm	0
20029694:	e8d405c8 	lwi	r6, r20, 1480
20029698:	10e30000 	addk	r7, r3, r0
2002969c:	b0000000 	imm	0
200296a0:	e914083c 	lwi	r8, r20, 2108
200296a4:	b0000000 	imm	0
200296a8:	e87406b4 	lwi	r3, r20, 1716
200296ac:	99fc1800 	brald	r15, r3
200296b0:	80000000 	or	r0, r0, r0
				BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
200296b4:	30730024 	addik	r3, r19, 36
200296b8:	30a00001 	addik	r5, r0, 1
200296bc:	b0000000 	imm	0
200296c0:	e8d405c8 	lwi	r6, r20, 1480
200296c4:	10e30000 	addk	r7, r3, r0
200296c8:	b0000000 	imm	0
200296cc:	e9140838 	lwi	r8, r20, 2104
200296d0:	b0000000 	imm	0
200296d4:	e87406b4 	lwi	r3, r20, 1716
200296d8:	99fc1800 	brald	r15, r3
200296dc:	80000000 	or	r0, r0, r0
				BitstreamReadUtils_vld_u_name(15, fifo, res, "first_half_vbv_buffer_size                           ");
200296e0:	30730024 	addik	r3, r19, 36
200296e4:	30a0000f 	addik	r5, r0, 15
200296e8:	b0000000 	imm	0
200296ec:	e8d405c8 	lwi	r6, r20, 1480
200296f0:	10e30000 	addk	r7, r3, r0
200296f4:	b0000000 	imm	0
200296f8:	e9140840 	lwi	r8, r20, 2112
200296fc:	b0000000 	imm	0
20029700:	e87406b4 	lwi	r3, r20, 1716
20029704:	99fc1800 	brald	r15, r3
20029708:	80000000 	or	r0, r0, r0
				BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
2002970c:	30730024 	addik	r3, r19, 36
20029710:	30a00001 	addik	r5, r0, 1
20029714:	b0000000 	imm	0
20029718:	e8d405c8 	lwi	r6, r20, 1480
2002971c:	10e30000 	addk	r7, r3, r0
20029720:	b0000000 	imm	0
20029724:	e9140838 	lwi	r8, r20, 2104
20029728:	b0000000 	imm	0
2002972c:	e87406b4 	lwi	r3, r20, 1716
20029730:	99fc1800 	brald	r15, r3
20029734:	80000000 	or	r0, r0, r0
				BitstreamReadUtils_vld_u_name(3, fifo, res, "latter_half_vbv_buffer_size                           ");
20029738:	30730024 	addik	r3, r19, 36
2002973c:	30a00003 	addik	r5, r0, 3
20029740:	b0000000 	imm	0
20029744:	e8d405c8 	lwi	r6, r20, 1480
20029748:	10e30000 	addk	r7, r3, r0
2002974c:	b0000000 	imm	0
20029750:	e9140844 	lwi	r8, r20, 2116
20029754:	b0000000 	imm	0
20029758:	e87406b4 	lwi	r3, r20, 1716
2002975c:	99fc1800 	brald	r15, r3
20029760:	80000000 	or	r0, r0, r0
				BitstreamReadUtils_vld_u_name(11, fifo, res, "first_half_vbv_occupancy                           ");
20029764:	30730024 	addik	r3, r19, 36
20029768:	30a0000b 	addik	r5, r0, 11
2002976c:	b0000000 	imm	0
20029770:	e8d405c8 	lwi	r6, r20, 1480
20029774:	10e30000 	addk	r7, r3, r0
20029778:	b0000000 	imm	0
2002977c:	e9140848 	lwi	r8, r20, 2120
20029780:	b0000000 	imm	0
20029784:	e87406b4 	lwi	r3, r20, 1716
20029788:	99fc1800 	brald	r15, r3
2002978c:	80000000 	or	r0, r0, r0
				BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
20029790:	30730024 	addik	r3, r19, 36
20029794:	30a00001 	addik	r5, r0, 1
20029798:	b0000000 	imm	0
2002979c:	e8d405c8 	lwi	r6, r20, 1480
200297a0:	10e30000 	addk	r7, r3, r0
200297a4:	b0000000 	imm	0
200297a8:	e9140838 	lwi	r8, r20, 2104
200297ac:	b0000000 	imm	0
200297b0:	e87406b4 	lwi	r3, r20, 1716
200297b4:	99fc1800 	brald	r15, r3
200297b8:	80000000 	or	r0, r0, r0
			}
		}
	
		// Update ports indexes
		
	}
200297bc:	e9e10000 	lwi	r15, r1, 0
200297c0:	10330000 	addk	r1, r19, r0
200297c4:	ea610028 	lwi	r19, r1, 40
200297c8:	ea81002c 	lwi	r20, r1, 44
200297cc:	30210030 	addik	r1, r1, 48
200297d0:	b60f0008 	rtsd	r15, 8
200297d4:	80000000 	or	r0, r0, r0

200297d8 <isSchedulable_read_vol_vbv_parameters2>:
	static i32 isSchedulable_read_vol_vbv_parameters2() {
200297d8:	3021ffe8 	addik	r1, r1, -24
200297dc:	fa610010 	swi	r19, r1, 16
200297e0:	fa810014 	swi	r20, r1, 20
200297e4:	12610000 	addk	r19, r1, r0
200297e8:	96808000 	mfs	r20, rpc
200297ec:	b000dffd 	imm	-8195
200297f0:	32948174 	addik	r20, r20, -32396
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
200297f4:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200297f8:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
200297fc:	e0730004 	lbui	r3, r19, 4
20029800:	b0000000 	imm	0
20029804:	e89405c8 	lwi	r4, r20, 1480
20029808:	10631800 	addk	r3, r3, r3
2002980c:	10641800 	addk	r3, r4, r3
20029810:	e4630000 	lhui	r3, r3, 0
20029814:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20029818:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002981c:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
20029820:	e4b30006 	lhui	r5, r19, 6
20029824:	e0730008 	lbui	r3, r19, 8
20029828:	3063ffff 	addik	r3, r3, -1
2002982c:	64830403 	bslli	r4, r3, 3
20029830:	30600001 	addik	r3, r0, 1
20029834:	16442801 	cmp	r18, r4, r5
20029838:	bcb20008 	bgei	r18, 8		// 20029840
2002983c:	10600000 	addk	r3, r0, r0
20029840:	a46300ff 	andi	r3, r3, 255
20029844:	f873000c 	swi	r3, r19, 12
		return result;
20029848:	e873000c 	lwi	r3, r19, 12
	}
2002984c:	10330000 	addk	r1, r19, r0
20029850:	ea610010 	lwi	r19, r1, 16
20029854:	ea810014 	lwi	r20, r1, 20
20029858:	30210018 	addik	r1, r1, 24
2002985c:	b60f0008 	rtsd	r15, 8
20029860:	80000000 	or	r0, r0, r0

20029864 <read_vol_vbv_parameters2>:
	
	static void read_vol_vbv_parameters2() {
20029864:	3021ffd0 	addik	r1, r1, -48
20029868:	f9e10000 	swi	r15, r1, 0
2002986c:	fa610028 	swi	r19, r1, 40
20029870:	fa81002c 	swi	r20, r1, 44
20029874:	12610000 	addk	r19, r1, r0
20029878:	96808000 	mfs	r20, rpc
2002987c:	b000dffd 	imm	-8195
20029880:	329480e4 	addik	r20, r20, -32540
	
		i32 res[1];
		i32 local_vol_control_parameters;
		i32 local_vbv_parameters;
	
		local_vol_control_parameters = vol_control_parameters;
20029884:	b0000000 	imm	0
20029888:	e87405d4 	lwi	r3, r20, 1492
2002988c:	e8630000 	lwi	r3, r3, 0
20029890:	f873001c 	swi	r3, r19, 28
		if (local_vol_control_parameters) {
20029894:	e873001c 	lwi	r3, r19, 28
20029898:	bc030074 	beqi	r3, 116		// 2002990c
			local_vbv_parameters = vbv_parameters;
2002989c:	b0000000 	imm	0
200298a0:	e87405d8 	lwi	r3, r20, 1496
200298a4:	e8630000 	lwi	r3, r3, 0
200298a8:	f8730020 	swi	r3, r19, 32
			if (local_vbv_parameters) {
200298ac:	e8730020 	lwi	r3, r19, 32
200298b0:	bc03005c 	beqi	r3, 92		// 2002990c
				BitstreamReadUtils_vld_u_name(15, fifo, res, "latter_half_vbv_occupancy                           ");
200298b4:	30730024 	addik	r3, r19, 36
200298b8:	30a0000f 	addik	r5, r0, 15
200298bc:	b0000000 	imm	0
200298c0:	e8d405c8 	lwi	r6, r20, 1480
200298c4:	10e30000 	addk	r7, r3, r0
200298c8:	b0000000 	imm	0
200298cc:	e914084c 	lwi	r8, r20, 2124
200298d0:	b0000000 	imm	0
200298d4:	e87406b4 	lwi	r3, r20, 1716
200298d8:	99fc1800 	brald	r15, r3
200298dc:	80000000 	or	r0, r0, r0
				BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
200298e0:	30730024 	addik	r3, r19, 36
200298e4:	30a00001 	addik	r5, r0, 1
200298e8:	b0000000 	imm	0
200298ec:	e8d405c8 	lwi	r6, r20, 1480
200298f0:	10e30000 	addk	r7, r3, r0
200298f4:	b0000000 	imm	0
200298f8:	e9140838 	lwi	r8, r20, 2104
200298fc:	b0000000 	imm	0
20029900:	e87406b4 	lwi	r3, r20, 1716
20029904:	99fc1800 	brald	r15, r3
20029908:	80000000 	or	r0, r0, r0
			}
		}
	
		// Update ports indexes
		
	}
2002990c:	e9e10000 	lwi	r15, r1, 0
20029910:	10330000 	addk	r1, r19, r0
20029914:	ea610028 	lwi	r19, r1, 40
20029918:	ea81002c 	lwi	r20, r1, 44
2002991c:	30210030 	addik	r1, r1, 48
20029920:	b60f0008 	rtsd	r15, 8
20029924:	80000000 	or	r0, r0, r0

20029928 <isSchedulable_read_vol_video_object_layer_shape>:
	static i32 isSchedulable_read_vol_video_object_layer_shape() {
20029928:	3021ffe8 	addik	r1, r1, -24
2002992c:	fa610010 	swi	r19, r1, 16
20029930:	fa810014 	swi	r20, r1, 20
20029934:	12610000 	addk	r19, r1, r0
20029938:	96808000 	mfs	r20, rpc
2002993c:	b000dffd 	imm	-8195
20029940:	32948024 	addik	r20, r20, -32732
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20029944:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20029948:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
2002994c:	e0730004 	lbui	r3, r19, 4
20029950:	b0000000 	imm	0
20029954:	e89405c8 	lwi	r4, r20, 1480
20029958:	10631800 	addk	r3, r3, r3
2002995c:	10641800 	addk	r3, r4, r3
20029960:	e4630000 	lhui	r3, r3, 0
20029964:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20029968:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002996c:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
20029970:	e4b30006 	lhui	r5, r19, 6
20029974:	e0730008 	lbui	r3, r19, 8
20029978:	3063ffff 	addik	r3, r3, -1
2002997c:	64830403 	bslli	r4, r3, 3
20029980:	30600001 	addik	r3, r0, 1
20029984:	16442801 	cmp	r18, r4, r5
20029988:	bcb20008 	bgei	r18, 8		// 20029990
2002998c:	10600000 	addk	r3, r0, r0
20029990:	a46300ff 	andi	r3, r3, 255
20029994:	f873000c 	swi	r3, r19, 12
		return result;
20029998:	e873000c 	lwi	r3, r19, 12
	}
2002999c:	10330000 	addk	r1, r19, r0
200299a0:	ea610010 	lwi	r19, r1, 16
200299a4:	ea810014 	lwi	r20, r1, 20
200299a8:	30210018 	addik	r1, r1, 24
200299ac:	b60f0008 	rtsd	r15, 8
200299b0:	80000000 	or	r0, r0, r0

200299b4 <read_vol_video_object_layer_shape>:
	
	static void read_vol_video_object_layer_shape() {
200299b4:	3021ffc0 	addik	r1, r1, -64
200299b8:	f9e10000 	swi	r15, r1, 0
200299bc:	fa610038 	swi	r19, r1, 56
200299c0:	fa81003c 	swi	r20, r1, 60
200299c4:	12610000 	addk	r19, r1, r0
200299c8:	96808000 	mfs	r20, rpc
200299cc:	b000dffd 	imm	-8195
200299d0:	32947f94 	addik	r20, r20, 32660
		i32 tmp_res;
		i32 tmp_res0;
		i32 tmp_res1;
		u8 local_vop_time_increment_resolution_bits;
	
		BitstreamReadUtils_vld_u_name(2, fifo, res, "video_object_layer_shape                           ");
200299d4:	30730034 	addik	r3, r19, 52
200299d8:	30a00002 	addik	r5, r0, 2
200299dc:	b0000000 	imm	0
200299e0:	e8d405c8 	lwi	r6, r20, 1480
200299e4:	10e30000 	addk	r7, r3, r0
200299e8:	b0000000 	imm	0
200299ec:	e9140850 	lwi	r8, r20, 2128
200299f0:	b0000000 	imm	0
200299f4:	e87406b4 	lwi	r3, r20, 1716
200299f8:	99fc1800 	brald	r15, r3
200299fc:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
20029a00:	30730034 	addik	r3, r19, 52
20029a04:	30a00001 	addik	r5, r0, 1
20029a08:	b0000000 	imm	0
20029a0c:	e8d405c8 	lwi	r6, r20, 1480
20029a10:	10e30000 	addk	r7, r3, r0
20029a14:	b0000000 	imm	0
20029a18:	e9140838 	lwi	r8, r20, 2104
20029a1c:	b0000000 	imm	0
20029a20:	e87406b4 	lwi	r3, r20, 1716
20029a24:	99fc1800 	brald	r15, r3
20029a28:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(16, fifo, res, "vop_time_increment_resolution                           ");
20029a2c:	30730034 	addik	r3, r19, 52
20029a30:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
20029a34:	b0000000 	imm	0
20029a38:	e8d405c8 	lwi	r6, r20, 1480
20029a3c:	10e30000 	addk	r7, r3, r0
20029a40:	b0000000 	imm	0
20029a44:	e9140854 	lwi	r8, r20, 2132
20029a48:	b0000000 	imm	0
20029a4c:	e87406b4 	lwi	r3, r20, 1716
20029a50:	99fc1800 	brald	r15, r3
20029a54:	80000000 	or	r0, r0, r0
		vop_time_increment_resolution = res[0];
20029a58:	e8730034 	lwi	r3, r19, 52
20029a5c:	f473001c 	shi	r3, r19, 28
		log2bin(vop_time_increment_resolution - 1, res);
20029a60:	e473001c 	lhui	r3, r19, 28
20029a64:	3063ffff 	addik	r3, r3, -1
20029a68:	10830000 	addk	r4, r3, r0
20029a6c:	30730034 	addik	r3, r19, 52
20029a70:	10a40000 	addk	r5, r4, r0
20029a74:	10c30000 	addk	r6, r3, r0
20029a78:	b0000000 	imm	0
20029a7c:	e87406e4 	lwi	r3, r20, 1764
20029a80:	99fc1800 	brald	r15, r3
20029a84:	80000000 	or	r0, r0, r0
		tmp_res = res[0];
20029a88:	e8730034 	lwi	r3, r19, 52
20029a8c:	f8730020 	swi	r3, r19, 32
		if (tmp_res > 1) {
20029a90:	e8930020 	lwi	r4, r19, 32
20029a94:	30600001 	addik	r3, r0, 1
20029a98:	16441801 	cmp	r18, r4, r3
20029a9c:	bcb20024 	bgei	r18, 36		// 20029ac0
			tmp_res0 = res[0];
20029aa0:	e8730034 	lwi	r3, r19, 52
20029aa4:	f8730024 	swi	r3, r19, 36
			vop_time_increment_resolution_bits = tmp_res0;
20029aa8:	e8730024 	lwi	r3, r19, 36
20029aac:	a48300ff 	andi	r4, r3, 255
20029ab0:	b0000000 	imm	0
20029ab4:	e87405dc 	lwi	r3, r20, 1500
20029ab8:	f0830000 	sbi	r4, r3, 0
20029abc:	b8000014 	bri	20		// 20029ad0
		} else {
			vop_time_increment_resolution_bits = 1;
20029ac0:	b0000000 	imm	0
20029ac4:	e87405dc 	lwi	r3, r20, 1500
20029ac8:	30800001 	addik	r4, r0, 1
20029acc:	f0830000 	sbi	r4, r3, 0
		}
		BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
20029ad0:	30730034 	addik	r3, r19, 52
20029ad4:	30a00001 	addik	r5, r0, 1
20029ad8:	b0000000 	imm	0
20029adc:	e8d405c8 	lwi	r6, r20, 1480
20029ae0:	10e30000 	addk	r7, r3, r0
20029ae4:	b0000000 	imm	0
20029ae8:	e9140838 	lwi	r8, r20, 2104
20029aec:	b0000000 	imm	0
20029af0:	e87406b4 	lwi	r3, r20, 1716
20029af4:	99fc1800 	brald	r15, r3
20029af8:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "fixed_vop_rate                           ");
20029afc:	30730034 	addik	r3, r19, 52
20029b00:	30a00001 	addik	r5, r0, 1
20029b04:	b0000000 	imm	0
20029b08:	e8d405c8 	lwi	r6, r20, 1480
20029b0c:	10e30000 	addk	r7, r3, r0
20029b10:	b0000000 	imm	0
20029b14:	e9140858 	lwi	r8, r20, 2136
20029b18:	b0000000 	imm	0
20029b1c:	e87406b4 	lwi	r3, r20, 1716
20029b20:	99fc1800 	brald	r15, r3
20029b24:	80000000 	or	r0, r0, r0
		tmp_res1 = res[0];
20029b28:	e8730034 	lwi	r3, r19, 52
20029b2c:	f8730028 	swi	r3, r19, 40
		fixed_vop_rate = tmp_res1 == 1;
20029b30:	e8930028 	lwi	r4, r19, 40
20029b34:	30600001 	addik	r3, r0, 1
20029b38:	88641c00 	pcmpeq	r3, r4, r3
20029b3c:	a46300ff 	andi	r3, r3, 255
20029b40:	f873002c 	swi	r3, r19, 44
		if (fixed_vop_rate) {
20029b44:	e873002c 	lwi	r3, r19, 44
20029b48:	bc030044 	beqi	r3, 68		// 20029b8c
			local_vop_time_increment_resolution_bits = vop_time_increment_resolution_bits;
20029b4c:	b0000000 	imm	0
20029b50:	e87405dc 	lwi	r3, r20, 1500
20029b54:	e0630000 	lbui	r3, r3, 0
20029b58:	f0730030 	sbi	r3, r19, 48
			BitstreamReadUtils_vld_u_name(local_vop_time_increment_resolution_bits, fifo, res, "vop_time_increment_resolution_bits                           ");
20029b5c:	e0930030 	lbui	r4, r19, 48
20029b60:	30730034 	addik	r3, r19, 52
20029b64:	10a40000 	addk	r5, r4, r0
20029b68:	b0000000 	imm	0
20029b6c:	e8d405c8 	lwi	r6, r20, 1480
20029b70:	10e30000 	addk	r7, r3, r0
20029b74:	b0000000 	imm	0
20029b78:	e914085c 	lwi	r8, r20, 2140
20029b7c:	b0000000 	imm	0
20029b80:	e87406b4 	lwi	r3, r20, 1716
20029b84:	99fc1800 	brald	r15, r3
20029b88:	80000000 	or	r0, r0, r0
		}
		BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
20029b8c:	30730034 	addik	r3, r19, 52
20029b90:	30a00001 	addik	r5, r0, 1
20029b94:	b0000000 	imm	0
20029b98:	e8d405c8 	lwi	r6, r20, 1480
20029b9c:	10e30000 	addk	r7, r3, r0
20029ba0:	b0000000 	imm	0
20029ba4:	e9140838 	lwi	r8, r20, 2104
20029ba8:	b0000000 	imm	0
20029bac:	e87406b4 	lwi	r3, r20, 1716
20029bb0:	99fc1800 	brald	r15, r3
20029bb4:	80000000 	or	r0, r0, r0
	
		// Update ports indexes
		
	}
20029bb8:	e9e10000 	lwi	r15, r1, 0
20029bbc:	10330000 	addk	r1, r19, r0
20029bc0:	ea610038 	lwi	r19, r1, 56
20029bc4:	ea81003c 	lwi	r20, r1, 60
20029bc8:	30210040 	addik	r1, r1, 64
20029bcc:	b60f0008 	rtsd	r15, 8
20029bd0:	80000000 	or	r0, r0, r0

20029bd4 <isSchedulable_read_vol_video_object_layer_width>:
	static i32 isSchedulable_read_vol_video_object_layer_width() {
20029bd4:	3021ffe8 	addik	r1, r1, -24
20029bd8:	fa610010 	swi	r19, r1, 16
20029bdc:	fa810014 	swi	r20, r1, 20
20029be0:	12610000 	addk	r19, r1, r0
20029be4:	96808000 	mfs	r20, rpc
20029be8:	b000dffd 	imm	-8195
20029bec:	32947d78 	addik	r20, r20, 32120
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20029bf0:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20029bf4:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
20029bf8:	e0730004 	lbui	r3, r19, 4
20029bfc:	b0000000 	imm	0
20029c00:	e89405c8 	lwi	r4, r20, 1480
20029c04:	10631800 	addk	r3, r3, r3
20029c08:	10641800 	addk	r3, r4, r3
20029c0c:	e4630000 	lhui	r3, r3, 0
20029c10:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20029c14:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20029c18:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
20029c1c:	e4b30006 	lhui	r5, r19, 6
20029c20:	e0730008 	lbui	r3, r19, 8
20029c24:	3063ffff 	addik	r3, r3, -1
20029c28:	64830403 	bslli	r4, r3, 3
20029c2c:	30600001 	addik	r3, r0, 1
20029c30:	16442801 	cmp	r18, r4, r5
20029c34:	bcb20008 	bgei	r18, 8		// 20029c3c
20029c38:	10600000 	addk	r3, r0, r0
20029c3c:	a46300ff 	andi	r3, r3, 255
20029c40:	f873000c 	swi	r3, r19, 12
		return result;
20029c44:	e873000c 	lwi	r3, r19, 12
	}
20029c48:	10330000 	addk	r1, r19, r0
20029c4c:	ea610010 	lwi	r19, r1, 16
20029c50:	ea810014 	lwi	r20, r1, 20
20029c54:	30210018 	addik	r1, r1, 24
20029c58:	b60f0008 	rtsd	r15, 8
20029c5c:	80000000 	or	r0, r0, r0

20029c60 <read_vol_video_object_layer_width>:
	
	static void read_vol_video_object_layer_width() {
20029c60:	3021ffcc 	addik	r1, r1, -52
20029c64:	f9e10000 	swi	r15, r1, 0
20029c68:	fa61002c 	swi	r19, r1, 44
20029c6c:	fa810030 	swi	r20, r1, 48
20029c70:	12610000 	addk	r19, r1, r0
20029c74:	96808000 	mfs	r20, rpc
20029c78:	b000dffd 	imm	-8195
20029c7c:	32947ce8 	addik	r20, r20, 31976
		i32 tmp_res;
		i32 tmp_res0;
		u16 local_video_object_layer_width;
		u16 local_video_object_layer_height;
	
		BitstreamReadUtils_vld_u_name(13, fifo, res, "video_object_layer_width                           ");
20029c80:	30730028 	addik	r3, r19, 40
20029c84:	30a0000d 	addik	r5, r0, 13
20029c88:	b0000000 	imm	0
20029c8c:	e8d405c8 	lwi	r6, r20, 1480
20029c90:	10e30000 	addk	r7, r3, r0
20029c94:	b0000000 	imm	0
20029c98:	e9140860 	lwi	r8, r20, 2144
20029c9c:	b0000000 	imm	0
20029ca0:	e87406b4 	lwi	r3, r20, 1716
20029ca4:	99fc1800 	brald	r15, r3
20029ca8:	80000000 	or	r0, r0, r0
		tmp_res = res[0];
20029cac:	e8730028 	lwi	r3, r19, 40
20029cb0:	f873001c 	swi	r3, r19, 28
		video_object_layer_width = tmp_res;
20029cb4:	e873001c 	lwi	r3, r19, 28
20029cb8:	b0000000 	imm	0
20029cbc:	a483ffff 	andi	r4, r3, -1
20029cc0:	b0000000 	imm	0
20029cc4:	e87405e0 	lwi	r3, r20, 1504
20029cc8:	f4830000 	shi	r4, r3, 0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
20029ccc:	30730028 	addik	r3, r19, 40
20029cd0:	30a00001 	addik	r5, r0, 1
20029cd4:	b0000000 	imm	0
20029cd8:	e8d405c8 	lwi	r6, r20, 1480
20029cdc:	10e30000 	addk	r7, r3, r0
20029ce0:	b0000000 	imm	0
20029ce4:	e9140838 	lwi	r8, r20, 2104
20029ce8:	b0000000 	imm	0
20029cec:	e87406b4 	lwi	r3, r20, 1716
20029cf0:	99fc1800 	brald	r15, r3
20029cf4:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(13, fifo, res, "video_object_layer_height                           ");
20029cf8:	30730028 	addik	r3, r19, 40
20029cfc:	30a0000d 	addik	r5, r0, 13
20029d00:	b0000000 	imm	0
20029d04:	e8d405c8 	lwi	r6, r20, 1480
20029d08:	10e30000 	addk	r7, r3, r0
20029d0c:	b0000000 	imm	0
20029d10:	e9140864 	lwi	r8, r20, 2148
20029d14:	b0000000 	imm	0
20029d18:	e87406b4 	lwi	r3, r20, 1716
20029d1c:	99fc1800 	brald	r15, r3
20029d20:	80000000 	or	r0, r0, r0
		tmp_res0 = res[0];
20029d24:	e8730028 	lwi	r3, r19, 40
20029d28:	f8730020 	swi	r3, r19, 32
		video_object_layer_height = tmp_res0;
20029d2c:	e8730020 	lwi	r3, r19, 32
20029d30:	b0000000 	imm	0
20029d34:	a483ffff 	andi	r4, r3, -1
20029d38:	b0000000 	imm	0
20029d3c:	e87405e4 	lwi	r3, r20, 1508
20029d40:	f4830000 	shi	r4, r3, 0
		local_video_object_layer_width = video_object_layer_width;
20029d44:	b0000000 	imm	0
20029d48:	e87405e0 	lwi	r3, r20, 1504
20029d4c:	e4630000 	lhui	r3, r3, 0
20029d50:	f4730024 	shi	r3, r19, 36
		local_video_object_layer_height = video_object_layer_height;
20029d54:	b0000000 	imm	0
20029d58:	e87405e4 	lwi	r3, r20, 1508
20029d5c:	e4630000 	lhui	r3, r3, 0
20029d60:	f4730026 	shi	r3, r19, 38
		mb_pic = local_video_object_layer_width * local_video_object_layer_height / 256;
20029d64:	e4930024 	lhui	r4, r19, 36
20029d68:	e4730026 	lhui	r3, r19, 38
20029d6c:	40641800 	mul	r3, r4, r3
20029d70:	6483021f 	bsrai	r4, r3, 31
20029d74:	64840018 	bsrli	r4, r4, 24
20029d78:	10641800 	addk	r3, r4, r3
20029d7c:	64630208 	bsrai	r3, r3, 8
20029d80:	b0000000 	imm	0
20029d84:	a483ffff 	andi	r4, r3, -1
20029d88:	b0000000 	imm	0
20029d8c:	e87405e8 	lwi	r3, r20, 1512
20029d90:	f4830000 	shi	r4, r3, 0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "interlaced                           ");
20029d94:	30730028 	addik	r3, r19, 40
20029d98:	30a00001 	addik	r5, r0, 1
20029d9c:	b0000000 	imm	0
20029da0:	e8d405c8 	lwi	r6, r20, 1480
20029da4:	10e30000 	addk	r7, r3, r0
20029da8:	b0000000 	imm	0
20029dac:	e9140868 	lwi	r8, r20, 2152
20029db0:	b0000000 	imm	0
20029db4:	e87406b4 	lwi	r3, r20, 1716
20029db8:	99fc1800 	brald	r15, r3
20029dbc:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "obmc_disable                           ");
20029dc0:	30730028 	addik	r3, r19, 40
20029dc4:	30a00001 	addik	r5, r0, 1
20029dc8:	b0000000 	imm	0
20029dcc:	e8d405c8 	lwi	r6, r20, 1480
20029dd0:	10e30000 	addk	r7, r3, r0
20029dd4:	b0000000 	imm	0
20029dd8:	e914086c 	lwi	r8, r20, 2156
20029ddc:	b0000000 	imm	0
20029de0:	e87406b4 	lwi	r3, r20, 1716
20029de4:	99fc1800 	brald	r15, r3
20029de8:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "sprite_enable                           ");
20029dec:	30730028 	addik	r3, r19, 40
20029df0:	30a00001 	addik	r5, r0, 1
20029df4:	b0000000 	imm	0
20029df8:	e8d405c8 	lwi	r6, r20, 1480
20029dfc:	10e30000 	addk	r7, r3, r0
20029e00:	b0000000 	imm	0
20029e04:	e9140870 	lwi	r8, r20, 2160
20029e08:	b0000000 	imm	0
20029e0c:	e87406b4 	lwi	r3, r20, 1716
20029e10:	99fc1800 	brald	r15, r3
20029e14:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "not_8_bit                           ");
20029e18:	30730028 	addik	r3, r19, 40
20029e1c:	30a00001 	addik	r5, r0, 1
20029e20:	b0000000 	imm	0
20029e24:	e8d405c8 	lwi	r6, r20, 1480
20029e28:	10e30000 	addk	r7, r3, r0
20029e2c:	b0000000 	imm	0
20029e30:	e9140874 	lwi	r8, r20, 2164
20029e34:	b0000000 	imm	0
20029e38:	e87406b4 	lwi	r3, r20, 1716
20029e3c:	99fc1800 	brald	r15, r3
20029e40:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "quant_type                           ");
20029e44:	30730028 	addik	r3, r19, 40
20029e48:	30a00001 	addik	r5, r0, 1
20029e4c:	b0000000 	imm	0
20029e50:	e8d405c8 	lwi	r6, r20, 1480
20029e54:	10e30000 	addk	r7, r3, r0
20029e58:	b0000000 	imm	0
20029e5c:	e9140878 	lwi	r8, r20, 2168
20029e60:	b0000000 	imm	0
20029e64:	e87406b4 	lwi	r3, r20, 1716
20029e68:	99fc1800 	brald	r15, r3
20029e6c:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "complexity_estimation_disable                           ");
20029e70:	30730028 	addik	r3, r19, 40
20029e74:	30a00001 	addik	r5, r0, 1
20029e78:	b0000000 	imm	0
20029e7c:	e8d405c8 	lwi	r6, r20, 1480
20029e80:	10e30000 	addk	r7, r3, r0
20029e84:	b0000000 	imm	0
20029e88:	e914087c 	lwi	r8, r20, 2172
20029e8c:	b0000000 	imm	0
20029e90:	e87406b4 	lwi	r3, r20, 1716
20029e94:	99fc1800 	brald	r15, r3
20029e98:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "resync_marker_disable                           ");
20029e9c:	30730028 	addik	r3, r19, 40
20029ea0:	30a00001 	addik	r5, r0, 1
20029ea4:	b0000000 	imm	0
20029ea8:	e8d405c8 	lwi	r6, r20, 1480
20029eac:	10e30000 	addk	r7, r3, r0
20029eb0:	b0000000 	imm	0
20029eb4:	e9140880 	lwi	r8, r20, 2176
20029eb8:	b0000000 	imm	0
20029ebc:	e87406b4 	lwi	r3, r20, 1716
20029ec0:	99fc1800 	brald	r15, r3
20029ec4:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "data_partitioned                           ");
20029ec8:	30730028 	addik	r3, r19, 40
20029ecc:	30a00001 	addik	r5, r0, 1
20029ed0:	b0000000 	imm	0
20029ed4:	e8d405c8 	lwi	r6, r20, 1480
20029ed8:	10e30000 	addk	r7, r3, r0
20029edc:	b0000000 	imm	0
20029ee0:	e9140884 	lwi	r8, r20, 2180
20029ee4:	b0000000 	imm	0
20029ee8:	e87406b4 	lwi	r3, r20, 1716
20029eec:	99fc1800 	brald	r15, r3
20029ef0:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "scalability                           ");
20029ef4:	30730028 	addik	r3, r19, 40
20029ef8:	30a00001 	addik	r5, r0, 1
20029efc:	b0000000 	imm	0
20029f00:	e8d405c8 	lwi	r6, r20, 1480
20029f04:	10e30000 	addk	r7, r3, r0
20029f08:	b0000000 	imm	0
20029f0c:	e9140888 	lwi	r8, r20, 2184
20029f10:	b0000000 	imm	0
20029f14:	e87406b4 	lwi	r3, r20, 1716
20029f18:	99fc1800 	brald	r15, r3
20029f1c:	80000000 	or	r0, r0, r0
	
		// Update ports indexes
		
	}
20029f20:	e9e10000 	lwi	r15, r1, 0
20029f24:	10330000 	addk	r1, r19, r0
20029f28:	ea61002c 	lwi	r19, r1, 44
20029f2c:	ea810030 	lwi	r20, r1, 48
20029f30:	30210034 	addik	r1, r1, 52
20029f34:	b60f0008 	rtsd	r15, 8
20029f38:	80000000 	or	r0, r0, r0

20029f3c <isSchedulable_read_vop>:
	static i32 isSchedulable_read_vop() {
20029f3c:	3021ffe8 	addik	r1, r1, -24
20029f40:	fa610010 	swi	r19, r1, 16
20029f44:	fa810014 	swi	r20, r1, 20
20029f48:	12610000 	addk	r19, r1, r0
20029f4c:	96808000 	mfs	r20, rpc
20029f50:	b000dffd 	imm	-8195
20029f54:	32947a10 	addik	r20, r20, 31248
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
20029f58:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20029f5c:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
20029f60:	e0730004 	lbui	r3, r19, 4
20029f64:	b0000000 	imm	0
20029f68:	e89405c8 	lwi	r4, r20, 1480
20029f6c:	10631800 	addk	r3, r3, r3
20029f70:	10641800 	addk	r3, r4, r3
20029f74:	e4630000 	lhui	r3, r3, 0
20029f78:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
20029f7c:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20029f80:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
20029f84:	e4b30006 	lhui	r5, r19, 6
20029f88:	e0730008 	lbui	r3, r19, 8
20029f8c:	3063ffff 	addik	r3, r3, -1
20029f90:	64830403 	bslli	r4, r3, 3
20029f94:	30600001 	addik	r3, r0, 1
20029f98:	16442801 	cmp	r18, r4, r5
20029f9c:	bcb20008 	bgei	r18, 8		// 20029fa4
20029fa0:	10600000 	addk	r3, r0, r0
20029fa4:	a46300ff 	andi	r3, r3, 255
20029fa8:	f873000c 	swi	r3, r19, 12
		return result;
20029fac:	e873000c 	lwi	r3, r19, 12
	}
20029fb0:	10330000 	addk	r1, r19, r0
20029fb4:	ea610010 	lwi	r19, r1, 16
20029fb8:	ea810014 	lwi	r20, r1, 20
20029fbc:	30210018 	addik	r1, r1, 24
20029fc0:	b60f0008 	rtsd	r15, 8
20029fc4:	80000000 	or	r0, r0, r0

20029fc8 <read_vop>:
	
	static void read_vop() {
20029fc8:	3021ffd4 	addik	r1, r1, -44
20029fcc:	f9e10000 	swi	r15, r1, 0
20029fd0:	fa610024 	swi	r19, r1, 36
20029fd4:	fa810028 	swi	r20, r1, 40
20029fd8:	12610000 	addk	r19, r1, r0
20029fdc:	96808000 	mfs	r20, rpc
20029fe0:	b000dffd 	imm	-8195
20029fe4:	32947980 	addik	r20, r20, 31104
		// Compute aligned port indexes
	
		i32 res[1];
		i32 tmp_res;
	
		mb_cnt = 0;
20029fe8:	b0000000 	imm	0
20029fec:	e874060c 	lwi	r3, r20, 1548
20029ff0:	f8030000 	swi	r0, r3, 0
		BitstreamReadUtils_vld_u_name(2, fifo, res, "vop_coding_type                           ");
20029ff4:	30730020 	addik	r3, r19, 32
20029ff8:	30a00002 	addik	r5, r0, 2
20029ffc:	b0000000 	imm	0
2002a000:	e8d405c8 	lwi	r6, r20, 1480
2002a004:	10e30000 	addk	r7, r3, r0
2002a008:	b0000000 	imm	0
2002a00c:	e914088c 	lwi	r8, r20, 2188
2002a010:	b0000000 	imm	0
2002a014:	e87406b4 	lwi	r3, r20, 1716
2002a018:	99fc1800 	brald	r15, r3
2002a01c:	80000000 	or	r0, r0, r0
		tmp_res = res[0];
2002a020:	e8730020 	lwi	r3, r19, 32
2002a024:	f873001c 	swi	r3, r19, 28
		vop_coding_type = tmp_res;
2002a028:	e873001c 	lwi	r3, r19, 28
2002a02c:	a48300ff 	andi	r4, r3, 255
2002a030:	b0000000 	imm	0
2002a034:	e87405ec 	lwi	r3, r20, 1516
2002a038:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		
	}
2002a03c:	e9e10000 	lwi	r15, r1, 0
2002a040:	10330000 	addk	r1, r19, r0
2002a044:	ea610024 	lwi	r19, r1, 36
2002a048:	ea810028 	lwi	r20, r1, 40
2002a04c:	3021002c 	addik	r1, r1, 44
2002a050:	b60f0008 	rtsd	r15, 8
2002a054:	80000000 	or	r0, r0, r0

2002a058 <isSchedulable_read_vop_coding_type_supported>:
	static i32 isSchedulable_read_vop_coding_type_supported() {
2002a058:	3021ffe0 	addik	r1, r1, -32
2002a05c:	fa610018 	swi	r19, r1, 24
2002a060:	fa81001c 	swi	r20, r1, 28
2002a064:	12610000 	addk	r19, r1, r0
2002a068:	96808000 	mfs	r20, rpc
2002a06c:	b000dffd 	imm	-8195
2002a070:	329478f4 	addik	r20, r20, 30964
		u8 local_FIFO_SIZE;
		u8 local_vop_coding_type;
		i32 local_I_VOP;
		i32 local_P_VOP;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
2002a074:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002a078:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
2002a07c:	e0730004 	lbui	r3, r19, 4
2002a080:	b0000000 	imm	0
2002a084:	e89405c8 	lwi	r4, r20, 1480
2002a088:	10631800 	addk	r3, r3, r3
2002a08c:	10641800 	addk	r3, r4, r3
2002a090:	e4630000 	lhui	r3, r3, 0
2002a094:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
2002a098:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002a09c:	f0730008 	sbi	r3, r19, 8
		local_vop_coding_type = vop_coding_type;
2002a0a0:	b0000000 	imm	0
2002a0a4:	e87405ec 	lwi	r3, r20, 1516
2002a0a8:	e0630000 	lbui	r3, r3, 0
2002a0ac:	f0730009 	sbi	r3, r19, 9
		local_I_VOP = vldFunctions_I_VOP;
2002a0b0:	f813000c 	swi	r0, r19, 12
		local_vop_coding_type = vop_coding_type;
2002a0b4:	b0000000 	imm	0
2002a0b8:	e87405ec 	lwi	r3, r20, 1516
2002a0bc:	e0630000 	lbui	r3, r3, 0
2002a0c0:	f0730009 	sbi	r3, r19, 9
		local_P_VOP = vldFunctions_P_VOP;
2002a0c4:	30600001 	addik	r3, r0, 1
2002a0c8:	f8730010 	swi	r3, r19, 16
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3 && (local_vop_coding_type == local_I_VOP || local_vop_coding_type == local_P_VOP);
2002a0cc:	e4930006 	lhui	r4, r19, 6
2002a0d0:	e0730008 	lbui	r3, r19, 8
2002a0d4:	3063ffff 	addik	r3, r3, -1
2002a0d8:	64630403 	bslli	r3, r3, 3
2002a0dc:	16432001 	cmp	r18, r3, r4
2002a0e0:	bc52002c 	blti	r18, 44		// 2002a10c
2002a0e4:	e0930009 	lbui	r4, r19, 9
2002a0e8:	e873000c 	lwi	r3, r19, 12
2002a0ec:	88641800 	xor	r3, r4, r3
2002a0f0:	bc030014 	beqi	r3, 20		// 2002a104
2002a0f4:	e0930009 	lbui	r4, r19, 9
2002a0f8:	e8730010 	lwi	r3, r19, 16
2002a0fc:	88641800 	xor	r3, r4, r3
2002a100:	bc23000c 	bnei	r3, 12		// 2002a10c
2002a104:	30600001 	addik	r3, r0, 1
2002a108:	b8000008 	bri	8		// 2002a110
2002a10c:	10600000 	addk	r3, r0, r0
2002a110:	f8730014 	swi	r3, r19, 20
		return result;
2002a114:	e8730014 	lwi	r3, r19, 20
	}
2002a118:	10330000 	addk	r1, r19, r0
2002a11c:	ea610018 	lwi	r19, r1, 24
2002a120:	ea81001c 	lwi	r20, r1, 28
2002a124:	30210020 	addik	r1, r1, 32
2002a128:	b60f0008 	rtsd	r15, 8
2002a12c:	80000000 	or	r0, r0, r0

2002a130 <read_vop_coding_type_supported>:
	
	static void read_vop_coding_type_supported() {
2002a130:	3021ffc4 	addik	r1, r1, -60
2002a134:	f9e10000 	swi	r15, r1, 0
2002a138:	fa610034 	swi	r19, r1, 52
2002a13c:	fa810038 	swi	r20, r1, 56
2002a140:	12610000 	addk	r19, r1, r0
2002a144:	96808000 	mfs	r20, rpc
2002a148:	b000dffd 	imm	-8195
2002a14c:	32947818 	addik	r20, r20, 30744
		i32 time_incr;
		i32 tmp_res;
		u8 local_vop_time_increment_resolution_bits;
		i32 tmp_res0;
	
		modulo_time_base = 1;
2002a150:	30600001 	addik	r3, r0, 1
2002a154:	f873001c 	swi	r3, r19, 28
		time_incr = 0;
2002a158:	f8130020 	swi	r0, r19, 32
		while (modulo_time_base) {
2002a15c:	b8000058 	bri	88		// 2002a1b4
			BitstreamReadUtils_vld_u_name(1, fifo, res, "modulo_time_base                           ");
2002a160:	30730030 	addik	r3, r19, 48
2002a164:	30a00001 	addik	r5, r0, 1
2002a168:	b0000000 	imm	0
2002a16c:	e8d405c8 	lwi	r6, r20, 1480
2002a170:	10e30000 	addk	r7, r3, r0
2002a174:	b0000000 	imm	0
2002a178:	e9140890 	lwi	r8, r20, 2192
2002a17c:	b0000000 	imm	0
2002a180:	e87406b4 	lwi	r3, r20, 1716
2002a184:	99fc1800 	brald	r15, r3
2002a188:	80000000 	or	r0, r0, r0
			tmp_res = res[0];
2002a18c:	e8730030 	lwi	r3, r19, 48
2002a190:	f8730024 	swi	r3, r19, 36
			modulo_time_base = tmp_res == 1;
2002a194:	e8930024 	lwi	r4, r19, 36
2002a198:	30600001 	addik	r3, r0, 1
2002a19c:	88641c00 	pcmpeq	r3, r4, r3
2002a1a0:	a46300ff 	andi	r3, r3, 255
2002a1a4:	f873001c 	swi	r3, r19, 28
			time_incr = time_incr + 1;
2002a1a8:	e8730020 	lwi	r3, r19, 32
2002a1ac:	30630001 	addik	r3, r3, 1
2002a1b0:	f8730020 	swi	r3, r19, 32
		u8 local_vop_time_increment_resolution_bits;
		i32 tmp_res0;
	
		modulo_time_base = 1;
		time_incr = 0;
		while (modulo_time_base) {
2002a1b4:	e873001c 	lwi	r3, r19, 28
2002a1b8:	bc23ffa8 	bnei	r3, -88		// 2002a160
			BitstreamReadUtils_vld_u_name(1, fifo, res, "modulo_time_base                           ");
			tmp_res = res[0];
			modulo_time_base = tmp_res == 1;
			time_incr = time_incr + 1;
		}
		BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
2002a1bc:	30730030 	addik	r3, r19, 48
2002a1c0:	30a00001 	addik	r5, r0, 1
2002a1c4:	b0000000 	imm	0
2002a1c8:	e8d405c8 	lwi	r6, r20, 1480
2002a1cc:	10e30000 	addk	r7, r3, r0
2002a1d0:	b0000000 	imm	0
2002a1d4:	e9140838 	lwi	r8, r20, 2104
2002a1d8:	b0000000 	imm	0
2002a1dc:	e87406b4 	lwi	r3, r20, 1716
2002a1e0:	99fc1800 	brald	r15, r3
2002a1e4:	80000000 	or	r0, r0, r0
		local_vop_time_increment_resolution_bits = vop_time_increment_resolution_bits;
2002a1e8:	b0000000 	imm	0
2002a1ec:	e87405dc 	lwi	r3, r20, 1500
2002a1f0:	e0630000 	lbui	r3, r3, 0
2002a1f4:	f0730028 	sbi	r3, r19, 40
		BitstreamReadUtils_vld_u_name(local_vop_time_increment_resolution_bits, fifo, res, "vop_time_increment                           ");
2002a1f8:	e0930028 	lbui	r4, r19, 40
2002a1fc:	30730030 	addik	r3, r19, 48
2002a200:	10a40000 	addk	r5, r4, r0
2002a204:	b0000000 	imm	0
2002a208:	e8d405c8 	lwi	r6, r20, 1480
2002a20c:	10e30000 	addk	r7, r3, r0
2002a210:	b0000000 	imm	0
2002a214:	e9140894 	lwi	r8, r20, 2196
2002a218:	b0000000 	imm	0
2002a21c:	e87406b4 	lwi	r3, r20, 1716
2002a220:	99fc1800 	brald	r15, r3
2002a224:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
2002a228:	30730030 	addik	r3, r19, 48
2002a22c:	30a00001 	addik	r5, r0, 1
2002a230:	b0000000 	imm	0
2002a234:	e8d405c8 	lwi	r6, r20, 1480
2002a238:	10e30000 	addk	r7, r3, r0
2002a23c:	b0000000 	imm	0
2002a240:	e9140838 	lwi	r8, r20, 2104
2002a244:	b0000000 	imm	0
2002a248:	e87406b4 	lwi	r3, r20, 1716
2002a24c:	99fc1800 	brald	r15, r3
2002a250:	80000000 	or	r0, r0, r0
		BitstreamReadUtils_vld_u_name(1, fifo, res, "vop_coded                           ");
2002a254:	30730030 	addik	r3, r19, 48
2002a258:	30a00001 	addik	r5, r0, 1
2002a25c:	b0000000 	imm	0
2002a260:	e8d405c8 	lwi	r6, r20, 1480
2002a264:	10e30000 	addk	r7, r3, r0
2002a268:	b0000000 	imm	0
2002a26c:	e9140898 	lwi	r8, r20, 2200
2002a270:	b0000000 	imm	0
2002a274:	e87406b4 	lwi	r3, r20, 1716
2002a278:	99fc1800 	brald	r15, r3
2002a27c:	80000000 	or	r0, r0, r0
		tmp_res0 = res[0];
2002a280:	e8730030 	lwi	r3, r19, 48
2002a284:	f873002c 	swi	r3, r19, 44
		vop_coded = tmp_res0 == 1;
2002a288:	e893002c 	lwi	r4, r19, 44
2002a28c:	30600001 	addik	r3, r0, 1
2002a290:	88641c00 	pcmpeq	r3, r4, r3
2002a294:	a46300ff 	andi	r3, r3, 255
2002a298:	10830000 	addk	r4, r3, r0
2002a29c:	b0000000 	imm	0
2002a2a0:	e87405f0 	lwi	r3, r20, 1520
2002a2a4:	f8830000 	swi	r4, r3, 0
	
		// Update ports indexes
		
	}
2002a2a8:	e9e10000 	lwi	r15, r1, 0
2002a2ac:	10330000 	addk	r1, r19, r0
2002a2b0:	ea610034 	lwi	r19, r1, 52
2002a2b4:	ea810038 	lwi	r20, r1, 56
2002a2b8:	3021003c 	addik	r1, r1, 60
2002a2bc:	b60f0008 	rtsd	r15, 8
2002a2c0:	80000000 	or	r0, r0, r0

2002a2c4 <isSchedulable_read_vop_coding_type_unsupported>:
	static i32 isSchedulable_read_vop_coding_type_unsupported() {
2002a2c4:	3021ffe4 	addik	r1, r1, -28
2002a2c8:	fa610014 	swi	r19, r1, 20
2002a2cc:	fa810018 	swi	r20, r1, 24
2002a2d0:	12610000 	addk	r19, r1, r0
2002a2d4:	96808000 	mfs	r20, rpc
2002a2d8:	b000dffd 	imm	-8195
2002a2dc:	32947688 	addik	r20, r20, 30344
		i32 result;
		u8 local_vop_coding_type;
		i32 local_I_VOP;
		i32 local_P_VOP;
	
		local_vop_coding_type = vop_coding_type;
2002a2e0:	b0000000 	imm	0
2002a2e4:	e87405ec 	lwi	r3, r20, 1516
2002a2e8:	e0630000 	lbui	r3, r3, 0
2002a2ec:	f0730004 	sbi	r3, r19, 4
		local_I_VOP = vldFunctions_I_VOP;
2002a2f0:	f8130008 	swi	r0, r19, 8
		local_vop_coding_type = vop_coding_type;
2002a2f4:	b0000000 	imm	0
2002a2f8:	e87405ec 	lwi	r3, r20, 1516
2002a2fc:	e0630000 	lbui	r3, r3, 0
2002a300:	f0730004 	sbi	r3, r19, 4
		local_P_VOP = vldFunctions_P_VOP;
2002a304:	30600001 	addik	r3, r0, 1
2002a308:	f873000c 	swi	r3, r19, 12
		result = local_vop_coding_type != local_I_VOP && local_vop_coding_type != local_P_VOP;
2002a30c:	e0930004 	lbui	r4, r19, 4
2002a310:	e8730008 	lwi	r3, r19, 8
2002a314:	88641800 	xor	r3, r4, r3
2002a318:	bc03001c 	beqi	r3, 28		// 2002a334
2002a31c:	e0930004 	lbui	r4, r19, 4
2002a320:	e873000c 	lwi	r3, r19, 12
2002a324:	88641800 	xor	r3, r4, r3
2002a328:	bc03000c 	beqi	r3, 12		// 2002a334
2002a32c:	30600001 	addik	r3, r0, 1
2002a330:	b8000008 	bri	8		// 2002a338
2002a334:	10600000 	addk	r3, r0, r0
2002a338:	f8730010 	swi	r3, r19, 16
		return result;
2002a33c:	e8730010 	lwi	r3, r19, 16
	}
2002a340:	10330000 	addk	r1, r19, r0
2002a344:	ea610014 	lwi	r19, r1, 20
2002a348:	ea810018 	lwi	r20, r1, 24
2002a34c:	3021001c 	addik	r1, r1, 28
2002a350:	b60f0008 	rtsd	r15, 8
2002a354:	80000000 	or	r0, r0, r0

2002a358 <read_vop_coding_type_unsupported>:
	
	static void read_vop_coding_type_unsupported() {
2002a358:	3021fff4 	addik	r1, r1, -12
2002a35c:	fa610004 	swi	r19, r1, 4
2002a360:	fa810008 	swi	r20, r1, 8
2002a364:	12610000 	addk	r19, r1, r0
2002a368:	96808000 	mfs	r20, rpc
2002a36c:	b000dffd 	imm	-8195
2002a370:	329475f4 	addik	r20, r20, 30196
	
	
	
		// Update ports indexes
		
	}
2002a374:	10330000 	addk	r1, r19, r0
2002a378:	ea610004 	lwi	r19, r1, 4
2002a37c:	ea810008 	lwi	r20, r1, 8
2002a380:	3021000c 	addik	r1, r1, 12
2002a384:	b60f0008 	rtsd	r15, 8
2002a388:	80000000 	or	r0, r0, r0

2002a38c <isSchedulable_read_vop_coded_coded>:
	static i32 isSchedulable_read_vop_coded_coded() {
2002a38c:	3021ffe4 	addik	r1, r1, -28
2002a390:	fa610014 	swi	r19, r1, 20
2002a394:	fa810018 	swi	r20, r1, 24
2002a398:	12610000 	addk	r19, r1, r0
2002a39c:	96808000 	mfs	r20, rpc
2002a3a0:	b000dffd 	imm	-8195
2002a3a4:	329475c0 	addik	r20, r20, 30144
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
		i32 local_vop_coded;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
2002a3a8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002a3ac:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
2002a3b0:	e0730004 	lbui	r3, r19, 4
2002a3b4:	b0000000 	imm	0
2002a3b8:	e89405c8 	lwi	r4, r20, 1480
2002a3bc:	10631800 	addk	r3, r3, r3
2002a3c0:	10641800 	addk	r3, r4, r3
2002a3c4:	e4630000 	lhui	r3, r3, 0
2002a3c8:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
2002a3cc:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002a3d0:	f0730008 	sbi	r3, r19, 8
		local_vop_coded = vop_coded;
2002a3d4:	b0000000 	imm	0
2002a3d8:	e87405f0 	lwi	r3, r20, 1520
2002a3dc:	e8630000 	lwi	r3, r3, 0
2002a3e0:	f873000c 	swi	r3, r19, 12
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3 && local_vop_coded;
2002a3e4:	e4930006 	lhui	r4, r19, 6
2002a3e8:	e0730008 	lbui	r3, r19, 8
2002a3ec:	3063ffff 	addik	r3, r3, -1
2002a3f0:	64630403 	bslli	r3, r3, 3
2002a3f4:	16432001 	cmp	r18, r3, r4
2002a3f8:	bc520014 	blti	r18, 20		// 2002a40c
2002a3fc:	e873000c 	lwi	r3, r19, 12
2002a400:	bc03000c 	beqi	r3, 12		// 2002a40c
2002a404:	30600001 	addik	r3, r0, 1
2002a408:	b8000008 	bri	8		// 2002a410
2002a40c:	10600000 	addk	r3, r0, r0
2002a410:	f8730010 	swi	r3, r19, 16
		return result;
2002a414:	e8730010 	lwi	r3, r19, 16
	}
2002a418:	10330000 	addk	r1, r19, r0
2002a41c:	ea610014 	lwi	r19, r1, 20
2002a420:	ea810018 	lwi	r20, r1, 24
2002a424:	3021001c 	addik	r1, r1, 28
2002a428:	b60f0008 	rtsd	r15, 8
2002a42c:	80000000 	or	r0, r0, r0

2002a430 <read_vop_coded_coded>:
	
	static void read_vop_coded_coded() {
2002a430:	3021ff74 	addik	r1, r1, -140
2002a434:	f9e10000 	swi	r15, r1, 0
2002a438:	fa610084 	swi	r19, r1, 132
2002a43c:	fa810088 	swi	r20, r1, 136
2002a440:	12610000 	addk	r19, r1, r0
2002a444:	96808000 	mfs	r20, rpc
2002a448:	b000dffd 	imm	-8195
2002a44c:	32947518 	addik	r20, r20, 29976
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2002a450:	b0000000 	imm	0
2002a454:	e8740560 	lwi	r3, r20, 1376
2002a458:	e8630000 	lwi	r3, r3, 0
2002a45c:	a46301ff 	andi	r3, r3, 511
2002a460:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_WIDTH = index_WIDTH % SIZE_WIDTH;
2002a464:	b0000000 	imm	0
2002a468:	e8740588 	lwi	r3, r20, 1416
2002a46c:	e8630000 	lwi	r3, r3, 0
2002a470:	a46301ff 	andi	r3, r3, 511
2002a474:	f8730028 	swi	r3, r19, 40
		i32 index_aligned_HEIGHT = index_HEIGHT % SIZE_HEIGHT;
2002a478:	b0000000 	imm	0
2002a47c:	e8740590 	lwi	r3, r20, 1424
2002a480:	e8630000 	lwi	r3, r3, 0
2002a484:	a46301ff 	andi	r3, r3, 511
2002a488:	f873002c 	swi	r3, r19, 44
		i32 local_FCODE_SHIFT;
		i32 local_FCODE_MASK;
		u16 local_video_object_layer_width;
		u16 local_video_object_layer_height;
	
		local_vop_coding_type = vop_coding_type;
2002a48c:	b0000000 	imm	0
2002a490:	e87405ec 	lwi	r3, r20, 1516
2002a494:	e0630000 	lbui	r3, r3, 0
2002a498:	f0730030 	sbi	r3, r19, 48
		local_P_VOP = vldFunctions_P_VOP;
2002a49c:	30600001 	addik	r3, r0, 1
2002a4a0:	f8730034 	swi	r3, r19, 52
		if (local_vop_coding_type == local_P_VOP) {
2002a4a4:	e0930030 	lbui	r4, r19, 48
2002a4a8:	e8730034 	lwi	r3, r19, 52
2002a4ac:	88641800 	xor	r3, r4, r3
2002a4b0:	bc23005c 	bnei	r3, 92		// 2002a50c
			BitstreamReadUtils_vld_u_name(1, fifo, res, "vop_rounding_type                           ");
2002a4b4:	30730080 	addik	r3, r19, 128
2002a4b8:	30a00001 	addik	r5, r0, 1
2002a4bc:	b0000000 	imm	0
2002a4c0:	e8d405c8 	lwi	r6, r20, 1480
2002a4c4:	10e30000 	addk	r7, r3, r0
2002a4c8:	b0000000 	imm	0
2002a4cc:	e914089c 	lwi	r8, r20, 2204
2002a4d0:	b0000000 	imm	0
2002a4d4:	e87406b4 	lwi	r3, r20, 1716
2002a4d8:	99fc1800 	brald	r15, r3
2002a4dc:	80000000 	or	r0, r0, r0
			tmp_res = res[0];
2002a4e0:	e8730080 	lwi	r3, r19, 128
2002a4e4:	f8730038 	swi	r3, r19, 56
			round = tmp_res == 1;
2002a4e8:	e8930038 	lwi	r4, r19, 56
2002a4ec:	30600001 	addik	r3, r0, 1
2002a4f0:	88641c00 	pcmpeq	r3, r4, r3
2002a4f4:	a46300ff 	andi	r3, r3, 255
2002a4f8:	10830000 	addk	r4, r3, r0
2002a4fc:	b0000000 	imm	0
2002a500:	e87405f4 	lwi	r3, r20, 1524
2002a504:	f8830000 	swi	r4, r3, 0
2002a508:	b8000010 	bri	16		// 2002a518
		} else {
			round = 0;
2002a50c:	b0000000 	imm	0
2002a510:	e87405f4 	lwi	r3, r20, 1524
2002a514:	f8030000 	swi	r0, r3, 0
		}
		BitstreamReadUtils_vld_u_name(3, fifo, res, "intra_dc_vlc_thr                           ");
2002a518:	30730080 	addik	r3, r19, 128
2002a51c:	30a00003 	addik	r5, r0, 3
2002a520:	b0000000 	imm	0
2002a524:	e8d405c8 	lwi	r6, r20, 1480
2002a528:	10e30000 	addk	r7, r3, r0
2002a52c:	b0000000 	imm	0
2002a530:	e91408a0 	lwi	r8, r20, 2208
2002a534:	b0000000 	imm	0
2002a538:	e87406b4 	lwi	r3, r20, 1716
2002a53c:	99fc1800 	brald	r15, r3
2002a540:	80000000 	or	r0, r0, r0
		tmp_res0 = res[0];
2002a544:	e8730080 	lwi	r3, r19, 128
2002a548:	f873003c 	swi	r3, r19, 60
		tmp_intra_dc_threshold_table = intra_dc_threshold_table[tmp_res0];
2002a54c:	b0000000 	imm	0
2002a550:	e8940600 	lwi	r4, r20, 1536
2002a554:	e873003c 	lwi	r3, r19, 60
2002a558:	10641800 	addk	r3, r4, r3
2002a55c:	e0630000 	lbui	r3, r3, 0
2002a560:	f0730040 	sbi	r3, r19, 64
		intra_dc_vlc_thr = tmp_intra_dc_threshold_table;
2002a564:	b0000000 	imm	0
2002a568:	e8740604 	lwi	r3, r20, 1540
2002a56c:	e0930040 	lbui	r4, r19, 64
2002a570:	f0830000 	sbi	r4, r3, 0
		BitstreamReadUtils_vld_u_name(5, fifo, res, "vop_quant                           ");
2002a574:	30730080 	addik	r3, r19, 128
2002a578:	30a00005 	addik	r5, r0, 5
2002a57c:	b0000000 	imm	0
2002a580:	e8d405c8 	lwi	r6, r20, 1480
2002a584:	10e30000 	addk	r7, r3, r0
2002a588:	b0000000 	imm	0
2002a58c:	e91408a4 	lwi	r8, r20, 2212
2002a590:	b0000000 	imm	0
2002a594:	e87406b4 	lwi	r3, r20, 1716
2002a598:	99fc1800 	brald	r15, r3
2002a59c:	80000000 	or	r0, r0, r0
		tmp_res1 = res[0];
2002a5a0:	e8730080 	lwi	r3, r19, 128
2002a5a4:	f8730044 	swi	r3, r19, 68
		vop_quant = tmp_res1;
2002a5a8:	e8730044 	lwi	r3, r19, 68
2002a5ac:	90830060 	sext8	r4, r3
2002a5b0:	b0000000 	imm	0
2002a5b4:	e87405f8 	lwi	r3, r20, 1528
2002a5b8:	f0830000 	sbi	r4, r3, 0
		local_vop_quant = vop_quant;
2002a5bc:	b0000000 	imm	0
2002a5c0:	e87405f8 	lwi	r3, r20, 1528
2002a5c4:	e0630000 	lbui	r3, r3, 0
2002a5c8:	f0730048 	sbi	r3, r19, 72
		prev_quant = local_vop_quant;
2002a5cc:	b0000000 	imm	0
2002a5d0:	e87405fc 	lwi	r3, r20, 1532
2002a5d4:	e0930048 	lbui	r4, r19, 72
2002a5d8:	f0830000 	sbi	r4, r3, 0
		local_vop_coding_type = vop_coding_type;
2002a5dc:	b0000000 	imm	0
2002a5e0:	e87405ec 	lwi	r3, r20, 1516
2002a5e4:	e0630000 	lbui	r3, r3, 0
2002a5e8:	f0730030 	sbi	r3, r19, 48
		local_I_VOP = vldFunctions_I_VOP;
2002a5ec:	f813004c 	swi	r0, r19, 76
		if (local_vop_coding_type != local_I_VOP) {
2002a5f0:	e0930030 	lbui	r4, r19, 48
2002a5f4:	e873004c 	lwi	r3, r19, 76
2002a5f8:	88641800 	xor	r3, r4, r3
2002a5fc:	bc030050 	beqi	r3, 80		// 2002a64c
			BitstreamReadUtils_vld_u_name(3, fifo, res, "vop_fcode_forward                           ");
2002a600:	30730080 	addik	r3, r19, 128
2002a604:	30a00003 	addik	r5, r0, 3
2002a608:	b0000000 	imm	0
2002a60c:	e8d405c8 	lwi	r6, r20, 1480
2002a610:	10e30000 	addk	r7, r3, r0
2002a614:	b0000000 	imm	0
2002a618:	e91408a8 	lwi	r8, r20, 2216
2002a61c:	b0000000 	imm	0
2002a620:	e87406b4 	lwi	r3, r20, 1716
2002a624:	99fc1800 	brald	r15, r3
2002a628:	80000000 	or	r0, r0, r0
			tmp_res2 = res[0];
2002a62c:	e8730080 	lwi	r3, r19, 128
2002a630:	f8730050 	swi	r3, r19, 80
			fcode = tmp_res2;
2002a634:	e8730050 	lwi	r3, r19, 80
2002a638:	90830060 	sext8	r4, r3
2002a63c:	b0000000 	imm	0
2002a640:	e8740608 	lwi	r3, r20, 1544
2002a644:	f0830000 	sbi	r4, r3, 0
2002a648:	b8000010 	bri	16		// 2002a658
		} else {
			fcode = 0;
2002a64c:	b0000000 	imm	0
2002a650:	e8740608 	lwi	r3, r20, 1544
2002a654:	f0030000 	sbi	r0, r3, 0
		}
		local_vop_coding_type = vop_coding_type;
2002a658:	b0000000 	imm	0
2002a65c:	e87405ec 	lwi	r3, r20, 1516
2002a660:	e0630000 	lbui	r3, r3, 0
2002a664:	f0730030 	sbi	r3, r19, 48
		local_B_VOP = vldFunctions_B_VOP;
2002a668:	30600002 	addik	r3, r0, 2
2002a66c:	f8730054 	swi	r3, r19, 84
		if (local_vop_coding_type == local_B_VOP) {
2002a670:	e0930030 	lbui	r4, r19, 48
2002a674:	e8730054 	lwi	r3, r19, 84
2002a678:	88641800 	xor	r3, r4, r3
2002a67c:	bc230030 	bnei	r3, 48		// 2002a6ac
			BitstreamReadUtils_vld_u_name(3, fifo, res, "vop_fcode_backward                           ");
2002a680:	30730080 	addik	r3, r19, 128
2002a684:	30a00003 	addik	r5, r0, 3
2002a688:	b0000000 	imm	0
2002a68c:	e8d405c8 	lwi	r6, r20, 1480
2002a690:	10e30000 	addk	r7, r3, r0
2002a694:	b0000000 	imm	0
2002a698:	e91408ac 	lwi	r8, r20, 2220
2002a69c:	b0000000 	imm	0
2002a6a0:	e87406b4 	lwi	r3, r20, 1716
2002a6a4:	99fc1800 	brald	r15, r3
2002a6a8:	80000000 	or	r0, r0, r0
		}
		local_NEWVOP = ConstantsBtype_NEWVOP;
2002a6ac:	30600800 	addik	r3, r0, 2048	// 800 <decoder_parser_mvrecon_A>
2002a6b0:	f8730058 	swi	r3, r19, 88
		local_vop_coding_type = vop_coding_type;
2002a6b4:	b0000000 	imm	0
2002a6b8:	e87405ec 	lwi	r3, r20, 1516
2002a6bc:	e0630000 	lbui	r3, r3, 0
2002a6c0:	f0730030 	sbi	r3, r19, 48
		local_I_VOP = vldFunctions_I_VOP;
2002a6c4:	f813004c 	swi	r0, r19, 76
		if (local_vop_coding_type == local_I_VOP) {
2002a6c8:	e0930030 	lbui	r4, r19, 48
2002a6cc:	e873004c 	lwi	r3, r19, 76
2002a6d0:	88641800 	xor	r3, r4, r3
2002a6d4:	bc230018 	bnei	r3, 24		// 2002a6ec
			local_INTRA = ConstantsBtype_INTRA;
2002a6d8:	30600400 	addik	r3, r0, 1024	// 400 <_HEAP_SIZE>
2002a6dc:	f873005c 	swi	r3, r19, 92
			tmp_if = local_INTRA;
2002a6e0:	e873005c 	lwi	r3, r19, 92
2002a6e4:	f873001c 	swi	r3, r19, 28
2002a6e8:	b8000014 	bri	20		// 2002a6fc
		} else {
			local_INTER = ConstantsBtype_INTER;
2002a6ec:	30600200 	addik	r3, r0, 512
2002a6f0:	f8730060 	swi	r3, r19, 96
			tmp_if = local_INTER;
2002a6f4:	e8730060 	lwi	r3, r19, 96
2002a6f8:	f873001c 	swi	r3, r19, 28
		}
		cmd = local_NEWVOP | tmp_if;
2002a6fc:	e8930058 	lwi	r4, r19, 88
2002a700:	e873001c 	lwi	r3, r19, 28
2002a704:	80641800 	or	r3, r4, r3
2002a708:	f8730064 	swi	r3, r19, 100
		local_round = round;
2002a70c:	b0000000 	imm	0
2002a710:	e87405f4 	lwi	r3, r20, 1524
2002a714:	e8630000 	lwi	r3, r3, 0
2002a718:	f8730068 	swi	r3, r19, 104
		if (local_round) {
2002a71c:	e8730068 	lwi	r3, r19, 104
2002a720:	bc030018 	beqi	r3, 24		// 2002a738
			local_ROUND_TYPE = Constants_ROUND_TYPE;
2002a724:	30600020 	addik	r3, r0, 32	// 20 <_vector_hw_exception>
2002a728:	f873006c 	swi	r3, r19, 108
			tmp_if0 = local_ROUND_TYPE;
2002a72c:	e873006c 	lwi	r3, r19, 108
2002a730:	f8730020 	swi	r3, r19, 32
2002a734:	b8000008 	bri	8		// 2002a73c
		} else {
			tmp_if0 = 0;
2002a738:	f8130020 	swi	r0, r19, 32
		}
		cmd = cmd | tmp_if0;
2002a73c:	e8930064 	lwi	r4, r19, 100
2002a740:	e8730020 	lwi	r3, r19, 32
2002a744:	80641800 	or	r3, r4, r3
2002a748:	f8730064 	swi	r3, r19, 100
		local_fcode = fcode;
2002a74c:	b0000000 	imm	0
2002a750:	e8740608 	lwi	r3, r20, 1544
2002a754:	e0630000 	lbui	r3, r3, 0
2002a758:	f0730070 	sbi	r3, r19, 112
		local_FCODE_SHIFT = Constants_FCODE_SHIFT;
2002a75c:	30600006 	addik	r3, r0, 6
2002a760:	f8730074 	swi	r3, r19, 116
		local_FCODE_MASK = ConstantsBtype_FCODE_MASK;
2002a764:	306001c0 	addik	r3, r0, 448
2002a768:	f8730078 	swi	r3, r19, 120
		cmd = cmd | local_fcode << local_FCODE_SHIFT & local_FCODE_MASK;
2002a76c:	e0730070 	lbui	r3, r19, 112
2002a770:	90830060 	sext8	r4, r3
2002a774:	e8730074 	lwi	r3, r19, 116
2002a778:	44841c00 	bsll	r4, r4, r3
2002a77c:	e8730078 	lwi	r3, r19, 120
2002a780:	84641800 	and	r3, r4, r3
2002a784:	e8930064 	lwi	r4, r19, 100
2002a788:	80641800 	or	r3, r4, r3
2002a78c:	f8730064 	swi	r3, r19, 100
		tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE] = cmd;
2002a790:	b0000000 	imm	0
2002a794:	e8740550 	lwi	r3, r20, 1360
2002a798:	e8630000 	lwi	r3, r3, 0
2002a79c:	e8830004 	lwi	r4, r3, 4
2002a7a0:	b0000000 	imm	0
2002a7a4:	e8740560 	lwi	r3, r20, 1376
2002a7a8:	e8630000 	lwi	r3, r3, 0
2002a7ac:	a46301ff 	andi	r3, r3, 511
2002a7b0:	10631800 	addk	r3, r3, r3
2002a7b4:	10641800 	addk	r3, r4, r3
2002a7b8:	e8930064 	lwi	r4, r19, 100
2002a7bc:	90840061 	sext16	r4, r4
2002a7c0:	f4830000 	shi	r4, r3, 0
		local_video_object_layer_width = video_object_layer_width;
2002a7c4:	b0000000 	imm	0
2002a7c8:	e87405e0 	lwi	r3, r20, 1504
2002a7cc:	e4630000 	lhui	r3, r3, 0
2002a7d0:	f473007c 	shi	r3, r19, 124
		tokens_BTYPE[(index_BTYPE + (1)) % SIZE_BTYPE] = local_video_object_layer_width / 16;
2002a7d4:	b0000000 	imm	0
2002a7d8:	e8740550 	lwi	r3, r20, 1360
2002a7dc:	e8630000 	lwi	r3, r3, 0
2002a7e0:	e8830004 	lwi	r4, r3, 4
2002a7e4:	b0000000 	imm	0
2002a7e8:	e8740560 	lwi	r3, r20, 1376
2002a7ec:	e8630000 	lwi	r3, r3, 0
2002a7f0:	30630001 	addik	r3, r3, 1
2002a7f4:	a46301ff 	andi	r3, r3, 511
2002a7f8:	10631800 	addk	r3, r3, r3
2002a7fc:	10641800 	addk	r3, r4, r3
2002a800:	e493007c 	lhui	r4, r19, 124
2002a804:	64840004 	bsrli	r4, r4, 4
2002a808:	b0000000 	imm	0
2002a80c:	a484ffff 	andi	r4, r4, -1
2002a810:	90840061 	sext16	r4, r4
2002a814:	f4830000 	shi	r4, r3, 0
		local_video_object_layer_height = video_object_layer_height;
2002a818:	b0000000 	imm	0
2002a81c:	e87405e4 	lwi	r3, r20, 1508
2002a820:	e4630000 	lhui	r3, r3, 0
2002a824:	f473007e 	shi	r3, r19, 126
		tokens_BTYPE[(index_BTYPE + (2)) % SIZE_BTYPE] = local_video_object_layer_height / 16;
2002a828:	b0000000 	imm	0
2002a82c:	e8740550 	lwi	r3, r20, 1360
2002a830:	e8630000 	lwi	r3, r3, 0
2002a834:	e8830004 	lwi	r4, r3, 4
2002a838:	b0000000 	imm	0
2002a83c:	e8740560 	lwi	r3, r20, 1376
2002a840:	e8630000 	lwi	r3, r3, 0
2002a844:	30630002 	addik	r3, r3, 2
2002a848:	a46301ff 	andi	r3, r3, 511
2002a84c:	10631800 	addk	r3, r3, r3
2002a850:	10641800 	addk	r3, r4, r3
2002a854:	e493007e 	lhui	r4, r19, 126
2002a858:	64840004 	bsrli	r4, r4, 4
2002a85c:	b0000000 	imm	0
2002a860:	a484ffff 	andi	r4, r4, -1
2002a864:	90840061 	sext16	r4, r4
2002a868:	f4830000 	shi	r4, r3, 0
		local_video_object_layer_width = video_object_layer_width;
2002a86c:	b0000000 	imm	0
2002a870:	e87405e0 	lwi	r3, r20, 1504
2002a874:	e4630000 	lhui	r3, r3, 0
2002a878:	f473007c 	shi	r3, r19, 124
		tokens_WIDTH[(index_WIDTH + (0)) % SIZE_WIDTH] = local_video_object_layer_width / 16;
2002a87c:	b0000000 	imm	0
2002a880:	e8740548 	lwi	r3, r20, 1352
2002a884:	e8630000 	lwi	r3, r3, 0
2002a888:	e8830004 	lwi	r4, r3, 4
2002a88c:	b0000000 	imm	0
2002a890:	e8740588 	lwi	r3, r20, 1416
2002a894:	e8630000 	lwi	r3, r3, 0
2002a898:	a46301ff 	andi	r3, r3, 511
2002a89c:	10631800 	addk	r3, r3, r3
2002a8a0:	10641800 	addk	r3, r4, r3
2002a8a4:	e493007c 	lhui	r4, r19, 124
2002a8a8:	64840004 	bsrli	r4, r4, 4
2002a8ac:	b0000000 	imm	0
2002a8b0:	a484ffff 	andi	r4, r4, -1
2002a8b4:	90840061 	sext16	r4, r4
2002a8b8:	f4830000 	shi	r4, r3, 0
		local_video_object_layer_height = video_object_layer_height;
2002a8bc:	b0000000 	imm	0
2002a8c0:	e87405e4 	lwi	r3, r20, 1508
2002a8c4:	e4630000 	lhui	r3, r3, 0
2002a8c8:	f473007e 	shi	r3, r19, 126
		tokens_HEIGHT[(index_HEIGHT + (0)) % SIZE_HEIGHT] = local_video_object_layer_height / 16;
2002a8cc:	b0000000 	imm	0
2002a8d0:	e874053c 	lwi	r3, r20, 1340
2002a8d4:	e8630000 	lwi	r3, r3, 0
2002a8d8:	e8830004 	lwi	r4, r3, 4
2002a8dc:	b0000000 	imm	0
2002a8e0:	e8740590 	lwi	r3, r20, 1424
2002a8e4:	e8630000 	lwi	r3, r3, 0
2002a8e8:	a46301ff 	andi	r3, r3, 511
2002a8ec:	10631800 	addk	r3, r3, r3
2002a8f0:	10641800 	addk	r3, r4, r3
2002a8f4:	e493007e 	lhui	r4, r19, 126
2002a8f8:	64840004 	bsrli	r4, r4, 4
2002a8fc:	b0000000 	imm	0
2002a900:	a484ffff 	andi	r4, r4, -1
2002a904:	90840061 	sext16	r4, r4
2002a908:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 3;
2002a90c:	b0000000 	imm	0
2002a910:	e8740560 	lwi	r3, r20, 1376
2002a914:	e8630000 	lwi	r3, r3, 0
2002a918:	30830003 	addik	r4, r3, 3
2002a91c:	b0000000 	imm	0
2002a920:	e8740560 	lwi	r3, r20, 1376
2002a924:	f8830000 	swi	r4, r3, 0
		index_WIDTH += 1;
2002a928:	b0000000 	imm	0
2002a92c:	e8740588 	lwi	r3, r20, 1416
2002a930:	e8630000 	lwi	r3, r3, 0
2002a934:	30830001 	addik	r4, r3, 1
2002a938:	b0000000 	imm	0
2002a93c:	e8740588 	lwi	r3, r20, 1416
2002a940:	f8830000 	swi	r4, r3, 0
		index_HEIGHT += 1;
2002a944:	b0000000 	imm	0
2002a948:	e8740590 	lwi	r3, r20, 1424
2002a94c:	e8630000 	lwi	r3, r3, 0
2002a950:	30830001 	addik	r4, r3, 1
2002a954:	b0000000 	imm	0
2002a958:	e8740590 	lwi	r3, r20, 1424
2002a95c:	f8830000 	swi	r4, r3, 0
		
		write_end_BTYPE();
2002a960:	b0000000 	imm	0
2002a964:	e8740664 	lwi	r3, r20, 1636
2002a968:	99fc1800 	brald	r15, r3
2002a96c:	80000000 	or	r0, r0, r0
		write_end_WIDTH();
2002a970:	b0000000 	imm	0
2002a974:	e874068c 	lwi	r3, r20, 1676
2002a978:	99fc1800 	brald	r15, r3
2002a97c:	80000000 	or	r0, r0, r0
		write_end_HEIGHT();
2002a980:	b0000000 	imm	0
2002a984:	e8740694 	lwi	r3, r20, 1684
2002a988:	99fc1800 	brald	r15, r3
2002a98c:	80000000 	or	r0, r0, r0
	}
2002a990:	e9e10000 	lwi	r15, r1, 0
2002a994:	10330000 	addk	r1, r19, r0
2002a998:	ea610084 	lwi	r19, r1, 132
2002a99c:	ea810088 	lwi	r20, r1, 136
2002a9a0:	3021008c 	addik	r1, r1, 140
2002a9a4:	b60f0008 	rtsd	r15, 8
2002a9a8:	80000000 	or	r0, r0, r0

2002a9ac <isSchedulable_read_vop_coded_uncoded>:
	static i32 isSchedulable_read_vop_coded_uncoded() {
2002a9ac:	3021ffec 	addik	r1, r1, -20
2002a9b0:	fa61000c 	swi	r19, r1, 12
2002a9b4:	fa810010 	swi	r20, r1, 16
2002a9b8:	12610000 	addk	r19, r1, r0
2002a9bc:	96808000 	mfs	r20, rpc
2002a9c0:	b000dffd 	imm	-8195
2002a9c4:	32946fa0 	addik	r20, r20, 28576
		i32 result;
		i32 local_vop_coded;
	
		local_vop_coded = vop_coded;
2002a9c8:	b0000000 	imm	0
2002a9cc:	e87405f0 	lwi	r3, r20, 1520
2002a9d0:	e8630000 	lwi	r3, r3, 0
2002a9d4:	f8730004 	swi	r3, r19, 4
		result = !local_vop_coded;
2002a9d8:	e8930004 	lwi	r4, r19, 4
2002a9dc:	10600000 	addk	r3, r0, r0
2002a9e0:	88641c00 	pcmpeq	r3, r4, r3
2002a9e4:	a46300ff 	andi	r3, r3, 255
2002a9e8:	f8730008 	swi	r3, r19, 8
		return result;
2002a9ec:	e8730008 	lwi	r3, r19, 8
	}
2002a9f0:	10330000 	addk	r1, r19, r0
2002a9f4:	ea61000c 	lwi	r19, r1, 12
2002a9f8:	ea810010 	lwi	r20, r1, 16
2002a9fc:	30210014 	addik	r1, r1, 20
2002aa00:	b60f0008 	rtsd	r15, 8
2002aa04:	80000000 	or	r0, r0, r0

2002aa08 <read_vop_coded_uncoded>:
	
	static void read_vop_coded_uncoded() {
2002aa08:	3021fff4 	addik	r1, r1, -12
2002aa0c:	fa610004 	swi	r19, r1, 4
2002aa10:	fa810008 	swi	r20, r1, 8
2002aa14:	12610000 	addk	r19, r1, r0
2002aa18:	96808000 	mfs	r20, rpc
2002aa1c:	b000dffd 	imm	-8195
2002aa20:	32946f44 	addik	r20, r20, 28484
	
	
	
		// Update ports indexes
		
	}
2002aa24:	10330000 	addk	r1, r19, r0
2002aa28:	ea610004 	lwi	r19, r1, 4
2002aa2c:	ea810008 	lwi	r20, r1, 8
2002aa30:	3021000c 	addik	r1, r1, 12
2002aa34:	b60f0008 	rtsd	r15, 8
2002aa38:	80000000 	or	r0, r0, r0

2002aa3c <isSchedulable_read_mb_start>:
	static i32 isSchedulable_read_mb_start() {
2002aa3c:	3021ffe8 	addik	r1, r1, -24
2002aa40:	fa610010 	swi	r19, r1, 16
2002aa44:	fa810014 	swi	r20, r1, 20
2002aa48:	12610000 	addk	r19, r1, r0
2002aa4c:	96808000 	mfs	r20, rpc
2002aa50:	b000dffd 	imm	-8195
2002aa54:	32946f10 	addik	r20, r20, 28432
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
2002aa58:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002aa5c:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
2002aa60:	e0730004 	lbui	r3, r19, 4
2002aa64:	b0000000 	imm	0
2002aa68:	e89405c8 	lwi	r4, r20, 1480
2002aa6c:	10631800 	addk	r3, r3, r3
2002aa70:	10641800 	addk	r3, r4, r3
2002aa74:	e4630000 	lhui	r3, r3, 0
2002aa78:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
2002aa7c:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002aa80:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
2002aa84:	e4b30006 	lhui	r5, r19, 6
2002aa88:	e0730008 	lbui	r3, r19, 8
2002aa8c:	3063ffff 	addik	r3, r3, -1
2002aa90:	64830403 	bslli	r4, r3, 3
2002aa94:	30600001 	addik	r3, r0, 1
2002aa98:	16442801 	cmp	r18, r4, r5
2002aa9c:	bcb20008 	bgei	r18, 8		// 2002aaa4
2002aaa0:	10600000 	addk	r3, r0, r0
2002aaa4:	a46300ff 	andi	r3, r3, 255
2002aaa8:	f873000c 	swi	r3, r19, 12
		return result;
2002aaac:	e873000c 	lwi	r3, r19, 12
	}
2002aab0:	10330000 	addk	r1, r19, r0
2002aab4:	ea610010 	lwi	r19, r1, 16
2002aab8:	ea810014 	lwi	r20, r1, 20
2002aabc:	30210018 	addik	r1, r1, 24
2002aac0:	b60f0008 	rtsd	r15, 8
2002aac4:	80000000 	or	r0, r0, r0

2002aac8 <read_mb_start>:
	
	static void read_mb_start() {
2002aac8:	3021ffa0 	addik	r1, r1, -96
2002aacc:	f9e10000 	swi	r15, r1, 0
2002aad0:	fa610058 	swi	r19, r1, 88
2002aad4:	fa81005c 	swi	r20, r1, 92
2002aad8:	12610000 	addk	r19, r1, r0
2002aadc:	96808000 	mfs	r20, rpc
2002aae0:	b000dffd 	imm	-8195
2002aae4:	32946e80 	addik	r20, r20, 28288
		i8 local_vop_quant;
		i32 local_btype_is_Q;
		i32 tmp_res4;
		i8 tmp_dquant_table;
	
		comp = 0;
2002aae8:	b0000000 	imm	0
2002aaec:	e8740634 	lwi	r3, r20, 1588
2002aaf0:	f0030000 	sbi	r0, r3, 0
		local_vop_coding_type = vop_coding_type;
2002aaf4:	b0000000 	imm	0
2002aaf8:	e87405ec 	lwi	r3, r20, 1516
2002aafc:	e0630000 	lbui	r3, r3, 0
2002ab00:	f073001c 	sbi	r3, r19, 28
		local_I_VOP = vldFunctions_I_VOP;
2002ab04:	f8130020 	swi	r0, r19, 32
		if (local_vop_coding_type != local_I_VOP) {
2002ab08:	e093001c 	lbui	r4, r19, 28
2002ab0c:	e8730020 	lwi	r3, r19, 32
2002ab10:	88641800 	xor	r3, r4, r3
2002ab14:	bc03005c 	beqi	r3, 92		// 2002ab70
			BitstreamReadUtils_vld_u_name(1, fifo, res, "not_coded                           ");
2002ab18:	30730054 	addik	r3, r19, 84
2002ab1c:	30a00001 	addik	r5, r0, 1
2002ab20:	b0000000 	imm	0
2002ab24:	e8d405c8 	lwi	r6, r20, 1480
2002ab28:	10e30000 	addk	r7, r3, r0
2002ab2c:	b0000000 	imm	0
2002ab30:	e91408b0 	lwi	r8, r20, 2224
2002ab34:	b0000000 	imm	0
2002ab38:	e87406b4 	lwi	r3, r20, 1716
2002ab3c:	99fc1800 	brald	r15, r3
2002ab40:	80000000 	or	r0, r0, r0
			tmp_res = res[0];
2002ab44:	e8730054 	lwi	r3, r19, 84
2002ab48:	f8730024 	swi	r3, r19, 36
			not_coded = tmp_res == 1;
2002ab4c:	e8930024 	lwi	r4, r19, 36
2002ab50:	30600001 	addik	r3, r0, 1
2002ab54:	88641c00 	pcmpeq	r3, r4, r3
2002ab58:	a46300ff 	andi	r3, r3, 255
2002ab5c:	10830000 	addk	r4, r3, r0
2002ab60:	b0000000 	imm	0
2002ab64:	e8740624 	lwi	r3, r20, 1572
2002ab68:	f8830000 	swi	r4, r3, 0
2002ab6c:	b8000010 	bri	16		// 2002ab7c
		} else {
			not_coded = 0;
2002ab70:	b0000000 	imm	0
2002ab74:	e8740624 	lwi	r3, r20, 1572
2002ab78:	f8030000 	swi	r0, r3, 0
		}
		local_not_coded = not_coded;
2002ab7c:	b0000000 	imm	0
2002ab80:	e8740624 	lwi	r3, r20, 1572
2002ab84:	e8630000 	lwi	r3, r3, 0
2002ab88:	f8730028 	swi	r3, r19, 40
		local_vop_coding_type = vop_coding_type;
2002ab8c:	b0000000 	imm	0
2002ab90:	e87405ec 	lwi	r3, r20, 1516
2002ab94:	e0630000 	lbui	r3, r3, 0
2002ab98:	f073001c 	sbi	r3, r19, 28
		local_I_VOP = vldFunctions_I_VOP;
2002ab9c:	f8130020 	swi	r0, r19, 32
		if (!local_not_coded || local_vop_coding_type == local_I_VOP) {
2002aba0:	e8730028 	lwi	r3, r19, 40
2002aba4:	bc030014 	beqi	r3, 20		// 2002abb8
2002aba8:	e093001c 	lbui	r4, r19, 28
2002abac:	e8730020 	lwi	r3, r19, 32
2002abb0:	88641800 	xor	r3, r4, r3
2002abb4:	bc230374 	bnei	r3, 884		// 2002af28
			local_vop_coding_type = vop_coding_type;
2002abb8:	b0000000 	imm	0
2002abbc:	e87405ec 	lwi	r3, r20, 1516
2002abc0:	e0630000 	lbui	r3, r3, 0
2002abc4:	f073001c 	sbi	r3, r19, 28
			vldFunctions_get_mcbpc(fifo, res, "mcbpc                           ", local_vop_coding_type);
2002abc8:	30930054 	addik	r4, r19, 84
2002abcc:	e073001c 	lbui	r3, r19, 28
2002abd0:	b0000000 	imm	0
2002abd4:	e8b405c8 	lwi	r5, r20, 1480
2002abd8:	10c40000 	addk	r6, r4, r0
2002abdc:	b0000000 	imm	0
2002abe0:	e8f408b4 	lwi	r7, r20, 2228
2002abe4:	11030000 	addk	r8, r3, r0
2002abe8:	b0000000 	imm	0
2002abec:	e87406bc 	lwi	r3, r20, 1724
2002abf0:	99fc1800 	brald	r15, r3
2002abf4:	80000000 	or	r0, r0, r0
			tmp_res0 = res[0];
2002abf8:	e8730054 	lwi	r3, r19, 84
2002abfc:	f873002c 	swi	r3, r19, 44
			derived_mb_type = tmp_res0 & 7;
2002ac00:	e873002c 	lwi	r3, r19, 44
2002ac04:	90630060 	sext8	r3, r3
2002ac08:	a4630007 	andi	r3, r3, 7
2002ac0c:	90830060 	sext8	r4, r3
2002ac10:	b0000000 	imm	0
2002ac14:	e8740610 	lwi	r3, r20, 1552
2002ac18:	f0830000 	sbi	r4, r3, 0
			tmp_res1 = res[0];
2002ac1c:	e8730054 	lwi	r3, r19, 84
2002ac20:	f8730030 	swi	r3, r19, 48
			cbpc = tmp_res1 >> 4;
2002ac24:	e8730030 	lwi	r3, r19, 48
2002ac28:	64630204 	bsrai	r3, r3, 4
2002ac2c:	90830060 	sext8	r4, r3
2002ac30:	b0000000 	imm	0
2002ac34:	e8740614 	lwi	r3, r20, 1556
2002ac38:	f0830000 	sbi	r4, r3, 0
			local_derived_mb_type = derived_mb_type;
2002ac3c:	b0000000 	imm	0
2002ac40:	e8740610 	lwi	r3, r20, 1552
2002ac44:	e0630000 	lbui	r3, r3, 0
2002ac48:	f0730034 	sbi	r3, r19, 52
			fourmvflag = local_derived_mb_type == 2;
2002ac4c:	e0730034 	lbui	r3, r19, 52
2002ac50:	90830060 	sext8	r4, r3
2002ac54:	30600002 	addik	r3, r0, 2
2002ac58:	88641c00 	pcmpeq	r3, r4, r3
2002ac5c:	a46300ff 	andi	r3, r3, 255
2002ac60:	10830000 	addk	r4, r3, r0
2002ac64:	b0000000 	imm	0
2002ac68:	e8740620 	lwi	r3, r20, 1568
2002ac6c:	f8830000 	swi	r4, r3, 0
			local_derived_mb_type = derived_mb_type;
2002ac70:	b0000000 	imm	0
2002ac74:	e8740610 	lwi	r3, r20, 1552
2002ac78:	e0630000 	lbui	r3, r3, 0
2002ac7c:	f0730034 	sbi	r3, r19, 52
			local_derived_mb_type = derived_mb_type;
2002ac80:	b0000000 	imm	0
2002ac84:	e8740610 	lwi	r3, r20, 1552
2002ac88:	e0630000 	lbui	r3, r3, 0
2002ac8c:	f0730034 	sbi	r3, r19, 52
			is_intra = local_derived_mb_type == 3 || local_derived_mb_type == 4;
2002ac90:	e0730034 	lbui	r3, r19, 52
2002ac94:	90630060 	sext8	r3, r3
2002ac98:	a8630003 	xori	r3, r3, 3
2002ac9c:	bc030014 	beqi	r3, 20		// 2002acb0
2002aca0:	e0730034 	lbui	r3, r19, 52
2002aca4:	90630060 	sext8	r3, r3
2002aca8:	a8630004 	xori	r3, r3, 4
2002acac:	bc23000c 	bnei	r3, 12		// 2002acb8
2002acb0:	30600001 	addik	r3, r0, 1
2002acb4:	b8000008 	bri	8		// 2002acbc
2002acb8:	10600000 	addk	r3, r0, r0
2002acbc:	b0000000 	imm	0
2002acc0:	e8940618 	lwi	r4, r20, 1560
2002acc4:	f8640000 	swi	r3, r4, 0
			local_derived_mb_type = derived_mb_type;
2002acc8:	b0000000 	imm	0
2002accc:	e8740610 	lwi	r3, r20, 1552
2002acd0:	e0630000 	lbui	r3, r3, 0
2002acd4:	f0730034 	sbi	r3, r19, 52
			local_derived_mb_type = derived_mb_type;
2002acd8:	b0000000 	imm	0
2002acdc:	e8740610 	lwi	r3, r20, 1552
2002ace0:	e0630000 	lbui	r3, r3, 0
2002ace4:	f0730034 	sbi	r3, r19, 52
			btype_is_Q = local_derived_mb_type == 1 || local_derived_mb_type == 4;
2002ace8:	e0730034 	lbui	r3, r19, 52
2002acec:	90630060 	sext8	r3, r3
2002acf0:	a8630001 	xori	r3, r3, 1
2002acf4:	bc030014 	beqi	r3, 20		// 2002ad08
2002acf8:	e0730034 	lbui	r3, r19, 52
2002acfc:	90630060 	sext8	r3, r3
2002ad00:	a8630004 	xori	r3, r3, 4
2002ad04:	bc23000c 	bnei	r3, 12		// 2002ad10
2002ad08:	30600001 	addik	r3, r0, 1
2002ad0c:	b8000008 	bri	8		// 2002ad14
2002ad10:	10600000 	addk	r3, r0, r0
2002ad14:	b0000000 	imm	0
2002ad18:	e894061c 	lwi	r4, r20, 1564
2002ad1c:	f8640000 	swi	r3, r4, 0
			local_is_intra = is_intra;
2002ad20:	b0000000 	imm	0
2002ad24:	e8740618 	lwi	r3, r20, 1560
2002ad28:	e8630000 	lwi	r3, r3, 0
2002ad2c:	f8730038 	swi	r3, r19, 56
			if (local_is_intra) {
2002ad30:	e8730038 	lwi	r3, r19, 56
2002ad34:	bc03005c 	beqi	r3, 92		// 2002ad90
				BitstreamReadUtils_vld_u_name(1, fifo, res, "ac_pred_flag                           ");
2002ad38:	30730054 	addik	r3, r19, 84
2002ad3c:	30a00001 	addik	r5, r0, 1
2002ad40:	b0000000 	imm	0
2002ad44:	e8d405c8 	lwi	r6, r20, 1480
2002ad48:	10e30000 	addk	r7, r3, r0
2002ad4c:	b0000000 	imm	0
2002ad50:	e91408b8 	lwi	r8, r20, 2232
2002ad54:	b0000000 	imm	0
2002ad58:	e87406b4 	lwi	r3, r20, 1716
2002ad5c:	99fc1800 	brald	r15, r3
2002ad60:	80000000 	or	r0, r0, r0
				tmp_res2 = res[0];
2002ad64:	e8730054 	lwi	r3, r19, 84
2002ad68:	f873003c 	swi	r3, r19, 60
				ac_pred_flag = tmp_res2 == 1;
2002ad6c:	e893003c 	lwi	r4, r19, 60
2002ad70:	30600001 	addik	r3, r0, 1
2002ad74:	88641c00 	pcmpeq	r3, r4, r3
2002ad78:	a46300ff 	andi	r3, r3, 255
2002ad7c:	10830000 	addk	r4, r3, r0
2002ad80:	b0000000 	imm	0
2002ad84:	e8740630 	lwi	r3, r20, 1584
2002ad88:	f8830000 	swi	r4, r3, 0
2002ad8c:	b8000010 	bri	16		// 2002ad9c
			} else {
				ac_pred_flag = 0;
2002ad90:	b0000000 	imm	0
2002ad94:	e8740630 	lwi	r3, r20, 1584
2002ad98:	f8030000 	swi	r0, r3, 0
			}
			local_is_intra = is_intra;
2002ad9c:	b0000000 	imm	0
2002ada0:	e8740618 	lwi	r3, r20, 1560
2002ada4:	e8630000 	lwi	r3, r3, 0
2002ada8:	f8730038 	swi	r3, r19, 56
			vldFunctions_get_cbpy(fifo, res, "cbpy                           ", local_is_intra);
2002adac:	30730054 	addik	r3, r19, 84
2002adb0:	b0000000 	imm	0
2002adb4:	e8b405c8 	lwi	r5, r20, 1480
2002adb8:	10c30000 	addk	r6, r3, r0
2002adbc:	b0000000 	imm	0
2002adc0:	e8f408bc 	lwi	r7, r20, 2236
2002adc4:	e9130038 	lwi	r8, r19, 56
2002adc8:	b0000000 	imm	0
2002adcc:	e87406c0 	lwi	r3, r20, 1728
2002add0:	99fc1800 	brald	r15, r3
2002add4:	80000000 	or	r0, r0, r0
			tmp_res3 = res[0];
2002add8:	e8730054 	lwi	r3, r19, 84
2002addc:	f8730040 	swi	r3, r19, 64
			local_cbpc = cbpc;
2002ade0:	b0000000 	imm	0
2002ade4:	e8740614 	lwi	r3, r20, 1556
2002ade8:	e0630000 	lbui	r3, r3, 0
2002adec:	f0730044 	sbi	r3, r19, 68
			cbp = tmp_res3 << 2 | local_cbpc;
2002adf0:	e8730040 	lwi	r3, r19, 64
2002adf4:	64630402 	bslli	r3, r3, 2
2002adf8:	90830060 	sext8	r4, r3
2002adfc:	e0730044 	lbui	r3, r19, 68
2002ae00:	80641800 	or	r3, r4, r3
2002ae04:	90830060 	sext8	r4, r3
2002ae08:	b0000000 	imm	0
2002ae0c:	e874062c 	lwi	r3, r20, 1580
2002ae10:	f0830000 	sbi	r4, r3, 0
			local_vop_quant = vop_quant;
2002ae14:	b0000000 	imm	0
2002ae18:	e87405f8 	lwi	r3, r20, 1528
2002ae1c:	e0630000 	lbui	r3, r3, 0
2002ae20:	f0730045 	sbi	r3, r19, 69
			prev_quant = local_vop_quant;
2002ae24:	b0000000 	imm	0
2002ae28:	e87405fc 	lwi	r3, r20, 1532
2002ae2c:	e0930045 	lbui	r4, r19, 69
2002ae30:	f0830000 	sbi	r4, r3, 0
			local_btype_is_Q = btype_is_Q;
2002ae34:	b0000000 	imm	0
2002ae38:	e874061c 	lwi	r3, r20, 1564
2002ae3c:	e8630000 	lwi	r3, r3, 0
2002ae40:	f8730048 	swi	r3, r19, 72
			if (local_btype_is_Q) {
2002ae44:	e8730048 	lwi	r3, r19, 72
2002ae48:	bc0300e0 	beqi	r3, 224		// 2002af28
				BitstreamReadUtils_vld_u_name(2, fifo, res, "dquant                           ");
2002ae4c:	30730054 	addik	r3, r19, 84
2002ae50:	30a00002 	addik	r5, r0, 2
2002ae54:	b0000000 	imm	0
2002ae58:	e8d405c8 	lwi	r6, r20, 1480
2002ae5c:	10e30000 	addk	r7, r3, r0
2002ae60:	b0000000 	imm	0
2002ae64:	e91408c0 	lwi	r8, r20, 2240
2002ae68:	b0000000 	imm	0
2002ae6c:	e87406b4 	lwi	r3, r20, 1716
2002ae70:	99fc1800 	brald	r15, r3
2002ae74:	80000000 	or	r0, r0, r0
				local_vop_quant = vop_quant;
2002ae78:	b0000000 	imm	0
2002ae7c:	e87405f8 	lwi	r3, r20, 1528
2002ae80:	e0630000 	lbui	r3, r3, 0
2002ae84:	f0730045 	sbi	r3, r19, 69
				tmp_res4 = res[0];
2002ae88:	e8730054 	lwi	r3, r19, 84
2002ae8c:	f873004c 	swi	r3, r19, 76
				tmp_dquant_table = dquant_table[tmp_res4];
2002ae90:	b0000000 	imm	0
2002ae94:	e8940628 	lwi	r4, r20, 1576
2002ae98:	e873004c 	lwi	r3, r19, 76
2002ae9c:	10641800 	addk	r3, r4, r3
2002aea0:	e0630000 	lbui	r3, r3, 0
2002aea4:	f0730050 	sbi	r3, r19, 80
				vop_quant = local_vop_quant + tmp_dquant_table;
2002aea8:	e0930045 	lbui	r4, r19, 69
2002aeac:	e0730050 	lbui	r3, r19, 80
2002aeb0:	10641800 	addk	r3, r4, r3
2002aeb4:	a46300ff 	andi	r3, r3, 255
2002aeb8:	90830060 	sext8	r4, r3
2002aebc:	b0000000 	imm	0
2002aec0:	e87405f8 	lwi	r3, r20, 1528
2002aec4:	f0830000 	sbi	r4, r3, 0
				local_vop_quant = vop_quant;
2002aec8:	b0000000 	imm	0
2002aecc:	e87405f8 	lwi	r3, r20, 1528
2002aed0:	e0630000 	lbui	r3, r3, 0
2002aed4:	f0730045 	sbi	r3, r19, 69
				if (local_vop_quant > 31) {
2002aed8:	e0730045 	lbui	r3, r19, 69
2002aedc:	90830060 	sext8	r4, r3
2002aee0:	3060001f 	addik	r3, r0, 31
2002aee4:	16441801 	cmp	r18, r4, r3
2002aee8:	bcb20014 	bgei	r18, 20		// 2002aefc
					vop_quant = 31;
2002aeec:	b0000000 	imm	0
2002aef0:	e87405f8 	lwi	r3, r20, 1528
2002aef4:	3080001f 	addik	r4, r0, 31
2002aef8:	f0830000 	sbi	r4, r3, 0
				}
				local_vop_quant = vop_quant;
2002aefc:	b0000000 	imm	0
2002af00:	e87405f8 	lwi	r3, r20, 1528
2002af04:	e0630000 	lbui	r3, r3, 0
2002af08:	f0730045 	sbi	r3, r19, 69
				if (local_vop_quant < 1) {
2002af0c:	e0730045 	lbui	r3, r19, 69
2002af10:	90630060 	sext8	r3, r3
2002af14:	bc830014 	bgti	r3, 20		// 2002af28
					vop_quant = 1;
2002af18:	b0000000 	imm	0
2002af1c:	e87405f8 	lwi	r3, r20, 1528
2002af20:	30800001 	addik	r4, r0, 1
2002af24:	f0830000 	sbi	r4, r3, 0
			}
		}
	
		// Update ports indexes
		
	}
2002af28:	e9e10000 	lwi	r15, r1, 0
2002af2c:	10330000 	addk	r1, r19, r0
2002af30:	ea610058 	lwi	r19, r1, 88
2002af34:	ea81005c 	lwi	r20, r1, 92
2002af38:	30210060 	addik	r1, r1, 96
2002af3c:	b60f0008 	rtsd	r15, 8
2002af40:	80000000 	or	r0, r0, r0

2002af44 <isSchedulable_read_mb_done>:
	static i32 isSchedulable_read_mb_done() {
2002af44:	3021ffe8 	addik	r1, r1, -24
2002af48:	fa610010 	swi	r19, r1, 16
2002af4c:	fa810014 	swi	r20, r1, 20
2002af50:	12610000 	addk	r19, r1, r0
2002af54:	96808000 	mfs	r20, rpc
2002af58:	b000dffd 	imm	-8195
2002af5c:	32946a08 	addik	r20, r20, 27144
		i32 result;
		i32 local_mb_cnt;
		u16 local_mb_pic;
	
		local_mb_cnt = mb_cnt;
2002af60:	b0000000 	imm	0
2002af64:	e874060c 	lwi	r3, r20, 1548
2002af68:	e8630000 	lwi	r3, r3, 0
2002af6c:	f8730004 	swi	r3, r19, 4
		local_mb_pic = mb_pic;
2002af70:	b0000000 	imm	0
2002af74:	e87405e8 	lwi	r3, r20, 1512
2002af78:	e4630000 	lhui	r3, r3, 0
2002af7c:	f4730008 	shi	r3, r19, 8
		result = local_mb_cnt == local_mb_pic;
2002af80:	e4930008 	lhui	r4, r19, 8
2002af84:	e8730004 	lwi	r3, r19, 4
2002af88:	88641c00 	pcmpeq	r3, r4, r3
2002af8c:	a46300ff 	andi	r3, r3, 255
2002af90:	f873000c 	swi	r3, r19, 12
		return result;
2002af94:	e873000c 	lwi	r3, r19, 12
	}
2002af98:	10330000 	addk	r1, r19, r0
2002af9c:	ea610010 	lwi	r19, r1, 16
2002afa0:	ea810014 	lwi	r20, r1, 20
2002afa4:	30210018 	addik	r1, r1, 24
2002afa8:	b60f0008 	rtsd	r15, 8
2002afac:	80000000 	or	r0, r0, r0

2002afb0 <read_mb_done>:
	
	static void read_mb_done() {
2002afb0:	3021fff4 	addik	r1, r1, -12
2002afb4:	fa610004 	swi	r19, r1, 4
2002afb8:	fa810008 	swi	r20, r1, 8
2002afbc:	12610000 	addk	r19, r1, r0
2002afc0:	96808000 	mfs	r20, rpc
2002afc4:	b000dffd 	imm	-8195
2002afc8:	3294699c 	addik	r20, r20, 27036
	
	
	
		// Update ports indexes
		
	}
2002afcc:	10330000 	addk	r1, r19, r0
2002afd0:	ea610004 	lwi	r19, r1, 4
2002afd4:	ea810008 	lwi	r20, r1, 8
2002afd8:	3021000c 	addik	r1, r1, 12
2002afdc:	b60f0008 	rtsd	r15, 8
2002afe0:	80000000 	or	r0, r0, r0

2002afe4 <isSchedulable_read_block_start>:
	static i32 isSchedulable_read_block_start() {
2002afe4:	3021fff0 	addik	r1, r1, -16
2002afe8:	fa610008 	swi	r19, r1, 8
2002afec:	fa81000c 	swi	r20, r1, 12
2002aff0:	12610000 	addk	r19, r1, r0
2002aff4:	96808000 	mfs	r20, rpc
2002aff8:	b000dffd 	imm	-8195
2002affc:	32946968 	addik	r20, r20, 26984
		i32 result;
	
		result = 1;
2002b000:	30600001 	addik	r3, r0, 1
2002b004:	f8730004 	swi	r3, r19, 4
		return result;
2002b008:	e8730004 	lwi	r3, r19, 4
	}
2002b00c:	10330000 	addk	r1, r19, r0
2002b010:	ea610008 	lwi	r19, r1, 8
2002b014:	ea81000c 	lwi	r20, r1, 12
2002b018:	30210010 	addik	r1, r1, 16
2002b01c:	b60f0008 	rtsd	r15, 8
2002b020:	80000000 	or	r0, r0, r0

2002b024 <read_block_start>:
	
	static void read_block_start() {
2002b024:	3021fff0 	addik	r1, r1, -16
2002b028:	fa610008 	swi	r19, r1, 8
2002b02c:	fa81000c 	swi	r20, r1, 12
2002b030:	12610000 	addk	r19, r1, r0
2002b034:	96808000 	mfs	r20, rpc
2002b038:	b000dffd 	imm	-8195
2002b03c:	32946928 	addik	r20, r20, 26920
		// Compute aligned port indexes
	
		i8 local_cbp;
		i8 local_comp;
	
		last[0] = 0;
2002b040:	b0000000 	imm	0
2002b044:	e8740638 	lwi	r3, r20, 1592
2002b048:	f8030000 	swi	r0, r3, 0
		local_cbp = cbp;
2002b04c:	b0000000 	imm	0
2002b050:	e874062c 	lwi	r3, r20, 1580
2002b054:	e0630000 	lbui	r3, r3, 0
2002b058:	f0730004 	sbi	r3, r19, 4
		local_comp = comp;
2002b05c:	b0000000 	imm	0
2002b060:	e8740634 	lwi	r3, r20, 1588
2002b064:	e0630000 	lbui	r3, r3, 0
2002b068:	f0730005 	sbi	r3, r19, 5
		ac_coded = (local_cbp & 1 << (5 - local_comp)) != 0;
2002b06c:	e0730004 	lbui	r3, r19, 4
2002b070:	90830060 	sext8	r4, r3
2002b074:	e0730005 	lbui	r3, r19, 5
2002b078:	90630060 	sext8	r3, r3
2002b07c:	30a00005 	addik	r5, r0, 5
2002b080:	14632800 	rsubk	r3, r3, r5
2002b084:	44641a00 	bsra	r3, r4, r3
2002b088:	a4830001 	andi	r4, r3, 1
2002b08c:	10600000 	addk	r3, r0, r0
2002b090:	8c641c00 	pcmpne	r3, r4, r3
2002b094:	a46300ff 	andi	r3, r3, 255
2002b098:	10830000 	addk	r4, r3, r0
2002b09c:	b0000000 	imm	0
2002b0a0:	e8740644 	lwi	r3, r20, 1604
2002b0a4:	f8830000 	swi	r4, r3, 0
	
		// Update ports indexes
		
	}
2002b0a8:	10330000 	addk	r1, r19, r0
2002b0ac:	ea610008 	lwi	r19, r1, 8
2002b0b0:	ea81000c 	lwi	r20, r1, 12
2002b0b4:	30210010 	addik	r1, r1, 16
2002b0b8:	b60f0008 	rtsd	r15, 8
2002b0bc:	80000000 	or	r0, r0, r0

2002b0c0 <isSchedulable_read_block_done>:
	static i32 isSchedulable_read_block_done() {
2002b0c0:	3021ffec 	addik	r1, r1, -20
2002b0c4:	fa61000c 	swi	r19, r1, 12
2002b0c8:	fa810010 	swi	r20, r1, 16
2002b0cc:	12610000 	addk	r19, r1, r0
2002b0d0:	96808000 	mfs	r20, rpc
2002b0d4:	b000dffd 	imm	-8195
2002b0d8:	3294688c 	addik	r20, r20, 26764
		i32 result;
		i8 local_comp;
	
		local_comp = comp;
2002b0dc:	b0000000 	imm	0
2002b0e0:	e8740634 	lwi	r3, r20, 1588
2002b0e4:	e0630000 	lbui	r3, r3, 0
2002b0e8:	f0730004 	sbi	r3, r19, 4
		result = local_comp == 6;
2002b0ec:	e0730004 	lbui	r3, r19, 4
2002b0f0:	90830060 	sext8	r4, r3
2002b0f4:	30600006 	addik	r3, r0, 6
2002b0f8:	88641c00 	pcmpeq	r3, r4, r3
2002b0fc:	a46300ff 	andi	r3, r3, 255
2002b100:	f8730008 	swi	r3, r19, 8
		return result;
2002b104:	e8730008 	lwi	r3, r19, 8
	}
2002b108:	10330000 	addk	r1, r19, r0
2002b10c:	ea61000c 	lwi	r19, r1, 12
2002b110:	ea810010 	lwi	r20, r1, 16
2002b114:	30210014 	addik	r1, r1, 20
2002b118:	b60f0008 	rtsd	r15, 8
2002b11c:	80000000 	or	r0, r0, r0

2002b120 <read_block_done>:
	
	static void read_block_done() {
2002b120:	3021fff0 	addik	r1, r1, -16
2002b124:	fa610008 	swi	r19, r1, 8
2002b128:	fa81000c 	swi	r20, r1, 12
2002b12c:	12610000 	addk	r19, r1, r0
2002b130:	96808000 	mfs	r20, rpc
2002b134:	b000dffd 	imm	-8195
2002b138:	3294682c 	addik	r20, r20, 26668
	
		// Compute aligned port indexes
	
		i32 local_mb_cnt;
	
		local_mb_cnt = mb_cnt;
2002b13c:	b0000000 	imm	0
2002b140:	e874060c 	lwi	r3, r20, 1548
2002b144:	e8630000 	lwi	r3, r3, 0
2002b148:	f8730004 	swi	r3, r19, 4
		mb_cnt = local_mb_cnt + 1;
2002b14c:	e8730004 	lwi	r3, r19, 4
2002b150:	30830001 	addik	r4, r3, 1
2002b154:	b0000000 	imm	0
2002b158:	e874060c 	lwi	r3, r20, 1548
2002b15c:	f8830000 	swi	r4, r3, 0
	
		// Update ports indexes
		
	}
2002b160:	10330000 	addk	r1, r19, r0
2002b164:	ea610008 	lwi	r19, r1, 8
2002b168:	ea81000c 	lwi	r20, r1, 12
2002b16c:	30210010 	addik	r1, r1, 16
2002b170:	b60f0008 	rtsd	r15, 8
2002b174:	80000000 	or	r0, r0, r0

2002b178 <isSchedulable_read_block_dc>:
	static i32 isSchedulable_read_block_dc() {
2002b178:	3021ffe8 	addik	r1, r1, -24
2002b17c:	fa610010 	swi	r19, r1, 16
2002b180:	fa810014 	swi	r20, r1, 20
2002b184:	12610000 	addk	r19, r1, r0
2002b188:	96808000 	mfs	r20, rpc
2002b18c:	b000dffd 	imm	-8195
2002b190:	329467d4 	addik	r20, r20, 26580
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
2002b194:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002b198:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
2002b19c:	e0730004 	lbui	r3, r19, 4
2002b1a0:	b0000000 	imm	0
2002b1a4:	e89405c8 	lwi	r4, r20, 1480
2002b1a8:	10631800 	addk	r3, r3, r3
2002b1ac:	10641800 	addk	r3, r4, r3
2002b1b0:	e4630000 	lhui	r3, r3, 0
2002b1b4:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
2002b1b8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002b1bc:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
2002b1c0:	e4b30006 	lhui	r5, r19, 6
2002b1c4:	e0730008 	lbui	r3, r19, 8
2002b1c8:	3063ffff 	addik	r3, r3, -1
2002b1cc:	64830403 	bslli	r4, r3, 3
2002b1d0:	30600001 	addik	r3, r0, 1
2002b1d4:	16442801 	cmp	r18, r4, r5
2002b1d8:	bcb20008 	bgei	r18, 8		// 2002b1e0
2002b1dc:	10600000 	addk	r3, r0, r0
2002b1e0:	a46300ff 	andi	r3, r3, 255
2002b1e4:	f873000c 	swi	r3, r19, 12
		return result;
2002b1e8:	e873000c 	lwi	r3, r19, 12
	}
2002b1ec:	10330000 	addk	r1, r19, r0
2002b1f0:	ea610010 	lwi	r19, r1, 16
2002b1f4:	ea810014 	lwi	r20, r1, 20
2002b1f8:	30210018 	addik	r1, r1, 24
2002b1fc:	b60f0008 	rtsd	r15, 8
2002b200:	80000000 	or	r0, r0, r0

2002b204 <read_block_dc>:
	
	static void read_block_dc() {
2002b204:	3021ff90 	addik	r1, r1, -112
2002b208:	f9e10000 	swi	r15, r1, 0
2002b20c:	fa610068 	swi	r19, r1, 104
2002b210:	fa81006c 	swi	r20, r1, 108
2002b214:	12610000 	addk	r19, r1, r0
2002b218:	96808000 	mfs	r20, rpc
2002b21c:	b000dffd 	imm	-8195
2002b220:	32946744 	addik	r20, r20, 26436
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2002b224:	b0000000 	imm	0
2002b228:	e8740560 	lwi	r3, r20, 1376
2002b22c:	e8630000 	lwi	r3, r3, 0
2002b230:	a46301ff 	andi	r3, r3, 511
2002b234:	f873002c 	swi	r3, r19, 44
		i32 index_aligned_QP = index_QP % SIZE_QP;
2002b238:	b0000000 	imm	0
2002b23c:	e8740598 	lwi	r3, r20, 1432
2002b240:	e8630000 	lwi	r3, r3, 0
2002b244:	a46301ff 	andi	r3, r3, 511
2002b248:	f8730030 	swi	r3, r19, 48
		i32 index_aligned_RUN = index_RUN % SIZE_RUN;
2002b24c:	b0000000 	imm	0
2002b250:	e8740570 	lwi	r3, r20, 1392
2002b254:	e8630000 	lwi	r3, r3, 0
2002b258:	a46301ff 	andi	r3, r3, 511
2002b25c:	f8730034 	swi	r3, r19, 52
		i32 index_aligned_VALUE = index_VALUE % SIZE_VALUE;
2002b260:	b0000000 	imm	0
2002b264:	e8740578 	lwi	r3, r20, 1400
2002b268:	e8630000 	lwi	r3, r3, 0
2002b26c:	a46301ff 	andi	r3, r3, 511
2002b270:	f8730038 	swi	r3, r19, 56
		i32 index_aligned_LAST = index_LAST % SIZE_LAST;
2002b274:	b0000000 	imm	0
2002b278:	e8740580 	lwi	r3, r20, 1408
2002b27c:	e8630000 	lwi	r3, r3, 0
2002b280:	a46301ff 	andi	r3, r3, 511
2002b284:	f873003c 	swi	r3, r19, 60
		i32 local_ACPRED;
		i32 local_DEBUG_PARSER;
		u8 tmp_if1;
		i8 local_vop_quant;
	
		local_prev_quant = prev_quant;
2002b288:	b0000000 	imm	0
2002b28c:	e87405fc 	lwi	r3, r20, 1532
2002b290:	e0630000 	lbui	r3, r3, 0
2002b294:	f0730040 	sbi	r3, r19, 64
		local_intra_dc_vlc_thr = intra_dc_vlc_thr;
2002b298:	b0000000 	imm	0
2002b29c:	e8740604 	lwi	r3, r20, 1540
2002b2a0:	e0630000 	lbui	r3, r3, 0
2002b2a4:	f0730041 	sbi	r3, r19, 65
		if (local_prev_quant < local_intra_dc_vlc_thr) {
2002b2a8:	e0730040 	lbui	r3, r19, 64
2002b2ac:	90830060 	sext8	r4, r3
2002b2b0:	e0730041 	lbui	r3, r19, 65
2002b2b4:	90630060 	sext8	r3, r3
2002b2b8:	16432001 	cmp	r18, r3, r4
2002b2bc:	bcb20118 	bgei	r18, 280		// 2002b3d4
			local_comp = comp;
2002b2c0:	b0000000 	imm	0
2002b2c4:	e8740634 	lwi	r3, r20, 1588
2002b2c8:	e0630000 	lbui	r3, r3, 0
2002b2cc:	f0730042 	sbi	r3, r19, 66
			if (local_comp < 4) {
2002b2d0:	e0730042 	lbui	r3, r19, 66
2002b2d4:	90830060 	sext8	r4, r3
2002b2d8:	30600003 	addik	r3, r0, 3
2002b2dc:	16441801 	cmp	r18, r4, r3
2002b2e0:	bc520038 	blti	r18, 56		// 2002b318
				vldFunctions_get_dc_size_lum(fifo, res, "dc_size                ");
2002b2e4:	30730064 	addik	r3, r19, 100
2002b2e8:	b0000000 	imm	0
2002b2ec:	e8b405c8 	lwi	r5, r20, 1480
2002b2f0:	10c30000 	addk	r6, r3, r0
2002b2f4:	b0000000 	imm	0
2002b2f8:	e8f408c4 	lwi	r7, r20, 2244
2002b2fc:	b0000000 	imm	0
2002b300:	e87406c4 	lwi	r3, r20, 1732
2002b304:	99fc1800 	brald	r15, r3
2002b308:	80000000 	or	r0, r0, r0
				dc_size = res[0];
2002b30c:	e8730064 	lwi	r3, r19, 100
2002b310:	f873001c 	swi	r3, r19, 28
2002b314:	b8000034 	bri	52		// 2002b348
			} else {
				vldFunctions_get_dc_size_chrom(fifo, res, "dc_size                ");
2002b318:	30730064 	addik	r3, r19, 100
2002b31c:	b0000000 	imm	0
2002b320:	e8b405c8 	lwi	r5, r20, 1480
2002b324:	10c30000 	addk	r6, r3, r0
2002b328:	b0000000 	imm	0
2002b32c:	e8f408c4 	lwi	r7, r20, 2244
2002b330:	b0000000 	imm	0
2002b334:	e87406c8 	lwi	r3, r20, 1736
2002b338:	99fc1800 	brald	r15, r3
2002b33c:	80000000 	or	r0, r0, r0
				dc_size = res[0];
2002b340:	e8730064 	lwi	r3, r19, 100
2002b344:	f873001c 	swi	r3, r19, 28
			}
			if (dc_size > 0) {
2002b348:	e873001c 	lwi	r3, r19, 28
2002b34c:	bc630044 	blei	r3, 68		// 2002b390
				vldFunctions_get_dc_dif(fifo, res, "dc_dif                ", dc_size);
2002b350:	e873001c 	lwi	r3, r19, 28
2002b354:	90630061 	sext16	r3, r3
2002b358:	30930064 	addik	r4, r19, 100
2002b35c:	b0000000 	imm	0
2002b360:	e8b405c8 	lwi	r5, r20, 1480
2002b364:	10c40000 	addk	r6, r4, r0
2002b368:	b0000000 	imm	0
2002b36c:	e8f408c8 	lwi	r7, r20, 2248
2002b370:	11030000 	addk	r8, r3, r0
2002b374:	b0000000 	imm	0
2002b378:	e87406cc 	lwi	r3, r20, 1740
2002b37c:	99fc1800 	brald	r15, r3
2002b380:	80000000 	or	r0, r0, r0
				dc_dif = res[0];
2002b384:	e8730064 	lwi	r3, r19, 100
2002b388:	f8730020 	swi	r3, r19, 32
2002b38c:	b8000008 	bri	8		// 2002b394
			} else {
				dc_dif = 0;
2002b390:	f8130020 	swi	r0, r19, 32
			}
			if (dc_size > 8) {
2002b394:	e893001c 	lwi	r4, r19, 28
2002b398:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002b39c:	16441801 	cmp	r18, r4, r3
2002b3a0:	bcb20038 	bgei	r18, 56		// 2002b3d8
				BitstreamReadUtils_vld_u_name(1, fifo, res, "marker_bit                           ");
2002b3a4:	30730064 	addik	r3, r19, 100
2002b3a8:	30a00001 	addik	r5, r0, 1
2002b3ac:	b0000000 	imm	0
2002b3b0:	e8d405c8 	lwi	r6, r20, 1480
2002b3b4:	10e30000 	addk	r7, r3, r0
2002b3b8:	b0000000 	imm	0
2002b3bc:	e9140838 	lwi	r8, r20, 2104
2002b3c0:	b0000000 	imm	0
2002b3c4:	e87406b4 	lwi	r3, r20, 1716
2002b3c8:	99fc1800 	brald	r15, r3
2002b3cc:	80000000 	or	r0, r0, r0
2002b3d0:	b8000008 	bri	8		// 2002b3d8
			}
		} else {
			dc_dif = 0;
2002b3d4:	f8130020 	swi	r0, r19, 32
		}
		local_INTRA = ConstantsBtype_INTRA;
2002b3d8:	30600400 	addik	r3, r0, 1024	// 400 <_HEAP_SIZE>
2002b3dc:	f8730044 	swi	r3, r19, 68
		local_ac_coded = ac_coded;
2002b3e0:	b0000000 	imm	0
2002b3e4:	e8740644 	lwi	r3, r20, 1604
2002b3e8:	e8630000 	lwi	r3, r3, 0
2002b3ec:	f8730048 	swi	r3, r19, 72
		if (local_ac_coded) {
2002b3f0:	e8730048 	lwi	r3, r19, 72
2002b3f4:	bc030018 	beqi	r3, 24		// 2002b40c
			local_ACCODED = Constants_ACCODED;
2002b3f8:	30600002 	addik	r3, r0, 2
2002b3fc:	f873004c 	swi	r3, r19, 76
			tmp_if = local_ACCODED;
2002b400:	e873004c 	lwi	r3, r19, 76
2002b404:	f8730024 	swi	r3, r19, 36
2002b408:	b8000008 	bri	8		// 2002b410
		} else {
			tmp_if = 0;
2002b40c:	f8130024 	swi	r0, r19, 36
		}
		cmd = local_INTRA | tmp_if;
2002b410:	e8730044 	lwi	r3, r19, 68
2002b414:	90830061 	sext16	r4, r3
2002b418:	e8730024 	lwi	r3, r19, 36
2002b41c:	90630061 	sext16	r3, r3
2002b420:	80641800 	or	r3, r4, r3
2002b424:	f4730050 	shi	r3, r19, 80
		local_ac_pred_flag = ac_pred_flag;
2002b428:	b0000000 	imm	0
2002b42c:	e8740630 	lwi	r3, r20, 1584
2002b430:	e8630000 	lwi	r3, r3, 0
2002b434:	f8730054 	swi	r3, r19, 84
		if (local_ac_pred_flag) {
2002b438:	e8730054 	lwi	r3, r19, 84
2002b43c:	bc030018 	beqi	r3, 24		// 2002b454
			local_ACPRED = Constants_ACPRED;
2002b440:	30600001 	addik	r3, r0, 1
2002b444:	f8730058 	swi	r3, r19, 88
			tmp_if0 = local_ACPRED;
2002b448:	e8730058 	lwi	r3, r19, 88
2002b44c:	f8730028 	swi	r3, r19, 40
2002b450:	b8000008 	bri	8		// 2002b458
		} else {
			tmp_if0 = 0;
2002b454:	f8130028 	swi	r0, r19, 40
		}
		cmd = cmd | tmp_if0;
2002b458:	e8730028 	lwi	r3, r19, 40
2002b45c:	90830061 	sext16	r4, r3
2002b460:	e4730050 	lhui	r3, r19, 80
2002b464:	80641800 	or	r3, r4, r3
2002b468:	f4730050 	shi	r3, r19, 80
		local_DEBUG_PARSER = BitstreamReadUtils_DEBUG_PARSER;
2002b46c:	f813005c 	swi	r0, r19, 92
		if (local_DEBUG_PARSER) {
2002b470:	e873005c 	lwi	r3, r19, 92
2002b474:	bc03002c 	beqi	r3, 44		// 2002b4a0
			local_ac_coded = ac_coded;
2002b478:	b0000000 	imm	0
2002b47c:	e8740644 	lwi	r3, r20, 1604
2002b480:	e8630000 	lwi	r3, r3, 0
2002b484:	f8730048 	swi	r3, r19, 72
			if (!local_ac_coded) {
2002b488:	e8730048 	lwi	r3, r19, 72
2002b48c:	bc230010 	bnei	r3, 16		// 2002b49c
				tmp_if1 = 1;
2002b490:	30600001 	addik	r3, r0, 1
2002b494:	f0730060 	sbi	r3, r19, 96
2002b498:	b8000008 	bri	8		// 2002b4a0
			} else {
				tmp_if1 = 0;
2002b49c:	f0130060 	sbi	r0, r19, 96
			}
		}
		tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE] = cmd;
2002b4a0:	b0000000 	imm	0
2002b4a4:	e8740550 	lwi	r3, r20, 1360
2002b4a8:	e8630000 	lwi	r3, r3, 0
2002b4ac:	e8830004 	lwi	r4, r3, 4
2002b4b0:	b0000000 	imm	0
2002b4b4:	e8740560 	lwi	r3, r20, 1376
2002b4b8:	e8630000 	lwi	r3, r3, 0
2002b4bc:	a46301ff 	andi	r3, r3, 511
2002b4c0:	10631800 	addk	r3, r3, r3
2002b4c4:	10641800 	addk	r3, r4, r3
2002b4c8:	e4930050 	lhui	r4, r19, 80
2002b4cc:	f4830000 	shi	r4, r3, 0
		local_vop_quant = vop_quant;
2002b4d0:	b0000000 	imm	0
2002b4d4:	e87405f8 	lwi	r3, r20, 1528
2002b4d8:	e0630000 	lbui	r3, r3, 0
2002b4dc:	f0730061 	sbi	r3, r19, 97
		tokens_QP[(index_QP + (0)) % SIZE_QP] = local_vop_quant;
2002b4e0:	b0000000 	imm	0
2002b4e4:	e8740538 	lwi	r3, r20, 1336
2002b4e8:	e8630000 	lwi	r3, r3, 0
2002b4ec:	e8830004 	lwi	r4, r3, 4
2002b4f0:	b0000000 	imm	0
2002b4f4:	e8740598 	lwi	r3, r20, 1432
2002b4f8:	e8630000 	lwi	r3, r3, 0
2002b4fc:	a46301ff 	andi	r3, r3, 511
2002b500:	10641800 	addk	r3, r4, r3
2002b504:	e0930061 	lbui	r4, r19, 97
2002b508:	f0830000 	sbi	r4, r3, 0
		tokens_RUN[(index_RUN + (0)) % SIZE_RUN] = 0;
2002b50c:	b0000000 	imm	0
2002b510:	e8740540 	lwi	r3, r20, 1344
2002b514:	e8630000 	lwi	r3, r3, 0
2002b518:	e8830004 	lwi	r4, r3, 4
2002b51c:	b0000000 	imm	0
2002b520:	e8740570 	lwi	r3, r20, 1392
2002b524:	e8630000 	lwi	r3, r3, 0
2002b528:	a46301ff 	andi	r3, r3, 511
2002b52c:	10641800 	addk	r3, r4, r3
2002b530:	f0030000 	sbi	r0, r3, 0
		tokens_VALUE[(index_VALUE + (0)) % SIZE_VALUE] = dc_dif;
2002b534:	b0000000 	imm	0
2002b538:	e8740554 	lwi	r3, r20, 1364
2002b53c:	e8630000 	lwi	r3, r3, 0
2002b540:	e8830004 	lwi	r4, r3, 4
2002b544:	b0000000 	imm	0
2002b548:	e8740578 	lwi	r3, r20, 1400
2002b54c:	e8630000 	lwi	r3, r3, 0
2002b550:	a46301ff 	andi	r3, r3, 511
2002b554:	10631800 	addk	r3, r3, r3
2002b558:	10641800 	addk	r3, r4, r3
2002b55c:	e8930020 	lwi	r4, r19, 32
2002b560:	90840061 	sext16	r4, r4
2002b564:	f4830000 	shi	r4, r3, 0
		local_ac_coded = ac_coded;
2002b568:	b0000000 	imm	0
2002b56c:	e8740644 	lwi	r3, r20, 1604
2002b570:	e8630000 	lwi	r3, r3, 0
2002b574:	f8730048 	swi	r3, r19, 72
		tokens_LAST[(index_LAST + (0)) % SIZE_LAST] = !local_ac_coded;
2002b578:	b0000000 	imm	0
2002b57c:	e874054c 	lwi	r3, r20, 1356
2002b580:	e8630000 	lwi	r3, r3, 0
2002b584:	e8830004 	lwi	r4, r3, 4
2002b588:	b0000000 	imm	0
2002b58c:	e8740580 	lwi	r3, r20, 1408
2002b590:	e8630000 	lwi	r3, r3, 0
2002b594:	a46301ff 	andi	r3, r3, 511
2002b598:	64630402 	bslli	r3, r3, 2
2002b59c:	10641800 	addk	r3, r4, r3
2002b5a0:	e8b30048 	lwi	r5, r19, 72
2002b5a4:	10800000 	addk	r4, r0, r0
2002b5a8:	88852400 	pcmpeq	r4, r5, r4
2002b5ac:	a48400ff 	andi	r4, r4, 255
2002b5b0:	f8830000 	swi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
2002b5b4:	b0000000 	imm	0
2002b5b8:	e8740560 	lwi	r3, r20, 1376
2002b5bc:	e8630000 	lwi	r3, r3, 0
2002b5c0:	30830001 	addik	r4, r3, 1
2002b5c4:	b0000000 	imm	0
2002b5c8:	e8740560 	lwi	r3, r20, 1376
2002b5cc:	f8830000 	swi	r4, r3, 0
		index_QP += 1;
2002b5d0:	b0000000 	imm	0
2002b5d4:	e8740598 	lwi	r3, r20, 1432
2002b5d8:	e8630000 	lwi	r3, r3, 0
2002b5dc:	30830001 	addik	r4, r3, 1
2002b5e0:	b0000000 	imm	0
2002b5e4:	e8740598 	lwi	r3, r20, 1432
2002b5e8:	f8830000 	swi	r4, r3, 0
		index_RUN += 1;
2002b5ec:	b0000000 	imm	0
2002b5f0:	e8740570 	lwi	r3, r20, 1392
2002b5f4:	e8630000 	lwi	r3, r3, 0
2002b5f8:	30830001 	addik	r4, r3, 1
2002b5fc:	b0000000 	imm	0
2002b600:	e8740570 	lwi	r3, r20, 1392
2002b604:	f8830000 	swi	r4, r3, 0
		index_VALUE += 1;
2002b608:	b0000000 	imm	0
2002b60c:	e8740578 	lwi	r3, r20, 1400
2002b610:	e8630000 	lwi	r3, r3, 0
2002b614:	30830001 	addik	r4, r3, 1
2002b618:	b0000000 	imm	0
2002b61c:	e8740578 	lwi	r3, r20, 1400
2002b620:	f8830000 	swi	r4, r3, 0
		index_LAST += 1;
2002b624:	b0000000 	imm	0
2002b628:	e8740580 	lwi	r3, r20, 1408
2002b62c:	e8630000 	lwi	r3, r3, 0
2002b630:	30830001 	addik	r4, r3, 1
2002b634:	b0000000 	imm	0
2002b638:	e8740580 	lwi	r3, r20, 1408
2002b63c:	f8830000 	swi	r4, r3, 0
		
		write_end_BTYPE();
2002b640:	b0000000 	imm	0
2002b644:	e8740664 	lwi	r3, r20, 1636
2002b648:	99fc1800 	brald	r15, r3
2002b64c:	80000000 	or	r0, r0, r0
		write_end_QP();
2002b650:	b0000000 	imm	0
2002b654:	e874069c 	lwi	r3, r20, 1692
2002b658:	99fc1800 	brald	r15, r3
2002b65c:	80000000 	or	r0, r0, r0
		write_end_RUN();
2002b660:	b0000000 	imm	0
2002b664:	e8740674 	lwi	r3, r20, 1652
2002b668:	99fc1800 	brald	r15, r3
2002b66c:	80000000 	or	r0, r0, r0
		write_end_VALUE();
2002b670:	b0000000 	imm	0
2002b674:	e874067c 	lwi	r3, r20, 1660
2002b678:	99fc1800 	brald	r15, r3
2002b67c:	80000000 	or	r0, r0, r0
		write_end_LAST();
2002b680:	b0000000 	imm	0
2002b684:	e8740684 	lwi	r3, r20, 1668
2002b688:	99fc1800 	brald	r15, r3
2002b68c:	80000000 	or	r0, r0, r0
	}
2002b690:	e9e10000 	lwi	r15, r1, 0
2002b694:	10330000 	addk	r1, r19, r0
2002b698:	ea610068 	lwi	r19, r1, 104
2002b69c:	ea81006c 	lwi	r20, r1, 108
2002b6a0:	30210070 	addik	r1, r1, 112
2002b6a4:	b60f0008 	rtsd	r15, 8
2002b6a8:	80000000 	or	r0, r0, r0

2002b6ac <isSchedulable_read_block_nodc_inter>:
	static i32 isSchedulable_read_block_nodc_inter() {
2002b6ac:	3021ffec 	addik	r1, r1, -20
2002b6b0:	fa61000c 	swi	r19, r1, 12
2002b6b4:	fa810010 	swi	r20, r1, 16
2002b6b8:	12610000 	addk	r19, r1, r0
2002b6bc:	96808000 	mfs	r20, rpc
2002b6c0:	b000dffd 	imm	-8195
2002b6c4:	329462a0 	addik	r20, r20, 25248
		i32 result;
		i32 local_is_intra;
	
		local_is_intra = is_intra;
2002b6c8:	b0000000 	imm	0
2002b6cc:	e8740618 	lwi	r3, r20, 1560
2002b6d0:	e8630000 	lwi	r3, r3, 0
2002b6d4:	f8730004 	swi	r3, r19, 4
		result = !local_is_intra;
2002b6d8:	e8930004 	lwi	r4, r19, 4
2002b6dc:	10600000 	addk	r3, r0, r0
2002b6e0:	88641c00 	pcmpeq	r3, r4, r3
2002b6e4:	a46300ff 	andi	r3, r3, 255
2002b6e8:	f8730008 	swi	r3, r19, 8
		return result;
2002b6ec:	e8730008 	lwi	r3, r19, 8
	}
2002b6f0:	10330000 	addk	r1, r19, r0
2002b6f4:	ea61000c 	lwi	r19, r1, 12
2002b6f8:	ea810010 	lwi	r20, r1, 16
2002b6fc:	30210014 	addik	r1, r1, 20
2002b700:	b60f0008 	rtsd	r15, 8
2002b704:	80000000 	or	r0, r0, r0

2002b708 <read_block_nodc_inter>:
	
	static void read_block_nodc_inter() {
2002b708:	3021ffac 	addik	r1, r1, -84
2002b70c:	f9e10000 	swi	r15, r1, 0
2002b710:	fa61004c 	swi	r19, r1, 76
2002b714:	fa810050 	swi	r20, r1, 80
2002b718:	12610000 	addk	r19, r1, r0
2002b71c:	96808000 	mfs	r20, rpc
2002b720:	b000dffd 	imm	-8195
2002b724:	32946240 	addik	r20, r20, 25152
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2002b728:	b0000000 	imm	0
2002b72c:	e8740560 	lwi	r3, r20, 1376
2002b730:	e8630000 	lwi	r3, r3, 0
2002b734:	a46301ff 	andi	r3, r3, 511
2002b738:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_QP = index_QP % SIZE_QP;
2002b73c:	b0000000 	imm	0
2002b740:	e8740598 	lwi	r3, r20, 1432
2002b744:	e8630000 	lwi	r3, r3, 0
2002b748:	a46301ff 	andi	r3, r3, 511
2002b74c:	f8730028 	swi	r3, r19, 40
		i32 local_fourmvflag;
		i32 tmp_if0;
		i32 local_FOURMV;
		i8 local_vop_quant;
	
		local_INTER = ConstantsBtype_INTER;
2002b750:	30600200 	addik	r3, r0, 512
2002b754:	f873002c 	swi	r3, r19, 44
		local_ac_coded = ac_coded;
2002b758:	b0000000 	imm	0
2002b75c:	e8740644 	lwi	r3, r20, 1604
2002b760:	e8630000 	lwi	r3, r3, 0
2002b764:	f8730030 	swi	r3, r19, 48
		if (local_ac_coded) {
2002b768:	e8730030 	lwi	r3, r19, 48
2002b76c:	bc030018 	beqi	r3, 24		// 2002b784
			local_ACCODED = Constants_ACCODED;
2002b770:	30600002 	addik	r3, r0, 2
2002b774:	f8730034 	swi	r3, r19, 52
			tmp_if = local_ACCODED;
2002b778:	e8730034 	lwi	r3, r19, 52
2002b77c:	f873001c 	swi	r3, r19, 28
2002b780:	b8000008 	bri	8		// 2002b788
		} else {
			tmp_if = 0;
2002b784:	f813001c 	swi	r0, r19, 28
		}
		cmd = local_INTER | tmp_if;
2002b788:	e873002c 	lwi	r3, r19, 44
2002b78c:	90830061 	sext16	r4, r3
2002b790:	e873001c 	lwi	r3, r19, 28
2002b794:	90630061 	sext16	r3, r3
2002b798:	80641800 	or	r3, r4, r3
2002b79c:	f4730038 	shi	r3, r19, 56
		local_MOTION = ConstantsBtype_MOTION;
2002b7a0:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002b7a4:	f873003c 	swi	r3, r19, 60
		local_fourmvflag = fourmvflag;
2002b7a8:	b0000000 	imm	0
2002b7ac:	e8740620 	lwi	r3, r20, 1568
2002b7b0:	e8630000 	lwi	r3, r3, 0
2002b7b4:	f8730040 	swi	r3, r19, 64
		if (local_fourmvflag) {
2002b7b8:	e8730040 	lwi	r3, r19, 64
2002b7bc:	bc030018 	beqi	r3, 24		// 2002b7d4
			local_FOURMV = Constants_FOURMV;
2002b7c0:	30600004 	addik	r3, r0, 4
2002b7c4:	f8730044 	swi	r3, r19, 68
			tmp_if0 = local_FOURMV;
2002b7c8:	e8730044 	lwi	r3, r19, 68
2002b7cc:	f8730020 	swi	r3, r19, 32
2002b7d0:	b8000008 	bri	8		// 2002b7d8
		} else {
			tmp_if0 = 0;
2002b7d4:	f8130020 	swi	r0, r19, 32
		}
		cmd = cmd | (local_MOTION | tmp_if0);
2002b7d8:	e873003c 	lwi	r3, r19, 60
2002b7dc:	90830061 	sext16	r4, r3
2002b7e0:	e8730020 	lwi	r3, r19, 32
2002b7e4:	90630061 	sext16	r3, r3
2002b7e8:	80641800 	or	r3, r4, r3
2002b7ec:	90830061 	sext16	r4, r3
2002b7f0:	e4730038 	lhui	r3, r19, 56
2002b7f4:	80641800 	or	r3, r4, r3
2002b7f8:	f4730038 	shi	r3, r19, 56
		tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE] = cmd;
2002b7fc:	b0000000 	imm	0
2002b800:	e8740550 	lwi	r3, r20, 1360
2002b804:	e8630000 	lwi	r3, r3, 0
2002b808:	e8830004 	lwi	r4, r3, 4
2002b80c:	b0000000 	imm	0
2002b810:	e8740560 	lwi	r3, r20, 1376
2002b814:	e8630000 	lwi	r3, r3, 0
2002b818:	a46301ff 	andi	r3, r3, 511
2002b81c:	10631800 	addk	r3, r3, r3
2002b820:	10641800 	addk	r3, r4, r3
2002b824:	e4930038 	lhui	r4, r19, 56
2002b828:	f4830000 	shi	r4, r3, 0
		local_vop_quant = vop_quant;
2002b82c:	b0000000 	imm	0
2002b830:	e87405f8 	lwi	r3, r20, 1528
2002b834:	e0630000 	lbui	r3, r3, 0
2002b838:	f0730048 	sbi	r3, r19, 72
		tokens_QP[(index_QP + (0)) % SIZE_QP] = local_vop_quant;
2002b83c:	b0000000 	imm	0
2002b840:	e8740538 	lwi	r3, r20, 1336
2002b844:	e8630000 	lwi	r3, r3, 0
2002b848:	e8830004 	lwi	r4, r3, 4
2002b84c:	b0000000 	imm	0
2002b850:	e8740598 	lwi	r3, r20, 1432
2002b854:	e8630000 	lwi	r3, r3, 0
2002b858:	a46301ff 	andi	r3, r3, 511
2002b85c:	10641800 	addk	r3, r4, r3
2002b860:	e0930048 	lbui	r4, r19, 72
2002b864:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
2002b868:	b0000000 	imm	0
2002b86c:	e8740560 	lwi	r3, r20, 1376
2002b870:	e8630000 	lwi	r3, r3, 0
2002b874:	30830001 	addik	r4, r3, 1
2002b878:	b0000000 	imm	0
2002b87c:	e8740560 	lwi	r3, r20, 1376
2002b880:	f8830000 	swi	r4, r3, 0
		index_QP += 1;
2002b884:	b0000000 	imm	0
2002b888:	e8740598 	lwi	r3, r20, 1432
2002b88c:	e8630000 	lwi	r3, r3, 0
2002b890:	30830001 	addik	r4, r3, 1
2002b894:	b0000000 	imm	0
2002b898:	e8740598 	lwi	r3, r20, 1432
2002b89c:	f8830000 	swi	r4, r3, 0
		
		write_end_BTYPE();
2002b8a0:	b0000000 	imm	0
2002b8a4:	e8740664 	lwi	r3, r20, 1636
2002b8a8:	99fc1800 	brald	r15, r3
2002b8ac:	80000000 	or	r0, r0, r0
		write_end_QP();
2002b8b0:	b0000000 	imm	0
2002b8b4:	e874069c 	lwi	r3, r20, 1692
2002b8b8:	99fc1800 	brald	r15, r3
2002b8bc:	80000000 	or	r0, r0, r0
	}
2002b8c0:	e9e10000 	lwi	r15, r1, 0
2002b8c4:	10330000 	addk	r1, r19, r0
2002b8c8:	ea61004c 	lwi	r19, r1, 76
2002b8cc:	ea810050 	lwi	r20, r1, 80
2002b8d0:	30210054 	addik	r1, r1, 84
2002b8d4:	b60f0008 	rtsd	r15, 8
2002b8d8:	80000000 	or	r0, r0, r0

2002b8dc <isSchedulable_read_block_nodc_intra>:
	static i32 isSchedulable_read_block_nodc_intra() {
2002b8dc:	3021ffe4 	addik	r1, r1, -28
2002b8e0:	fa610014 	swi	r19, r1, 20
2002b8e4:	fa810018 	swi	r20, r1, 24
2002b8e8:	12610000 	addk	r19, r1, r0
2002b8ec:	96808000 	mfs	r20, rpc
2002b8f0:	b000dffd 	imm	-8195
2002b8f4:	32946070 	addik	r20, r20, 24688
		i32 local_is_intra;
		i8 local_prev_quant;
		i8 local_intra_dc_vlc_thr;
		i32 local_ac_coded;
	
		local_is_intra = is_intra;
2002b8f8:	b0000000 	imm	0
2002b8fc:	e8740618 	lwi	r3, r20, 1560
2002b900:	e8630000 	lwi	r3, r3, 0
2002b904:	f8730004 	swi	r3, r19, 4
		local_prev_quant = prev_quant;
2002b908:	b0000000 	imm	0
2002b90c:	e87405fc 	lwi	r3, r20, 1532
2002b910:	e0630000 	lbui	r3, r3, 0
2002b914:	f0730008 	sbi	r3, r19, 8
		local_intra_dc_vlc_thr = intra_dc_vlc_thr;
2002b918:	b0000000 	imm	0
2002b91c:	e8740604 	lwi	r3, r20, 1540
2002b920:	e0630000 	lbui	r3, r3, 0
2002b924:	f0730009 	sbi	r3, r19, 9
		local_ac_coded = ac_coded;
2002b928:	b0000000 	imm	0
2002b92c:	e8740644 	lwi	r3, r20, 1604
2002b930:	e8630000 	lwi	r3, r3, 0
2002b934:	f873000c 	swi	r3, r19, 12
		result = local_is_intra && local_prev_quant >= local_intra_dc_vlc_thr && local_ac_coded;
2002b938:	e8730004 	lwi	r3, r19, 4
2002b93c:	bc03002c 	beqi	r3, 44		// 2002b968
2002b940:	e0730008 	lbui	r3, r19, 8
2002b944:	90830060 	sext8	r4, r3
2002b948:	e0730009 	lbui	r3, r19, 9
2002b94c:	90630060 	sext8	r3, r3
2002b950:	16432001 	cmp	r18, r3, r4
2002b954:	bc520014 	blti	r18, 20		// 2002b968
2002b958:	e873000c 	lwi	r3, r19, 12
2002b95c:	bc03000c 	beqi	r3, 12		// 2002b968
2002b960:	30600001 	addik	r3, r0, 1
2002b964:	b8000008 	bri	8		// 2002b96c
2002b968:	10600000 	addk	r3, r0, r0
2002b96c:	f8730010 	swi	r3, r19, 16
		return result;
2002b970:	e8730010 	lwi	r3, r19, 16
	}
2002b974:	10330000 	addk	r1, r19, r0
2002b978:	ea610014 	lwi	r19, r1, 20
2002b97c:	ea810018 	lwi	r20, r1, 24
2002b980:	3021001c 	addik	r1, r1, 28
2002b984:	b60f0008 	rtsd	r15, 8
2002b988:	80000000 	or	r0, r0, r0

2002b98c <read_block_nodc_intra>:
	
	static void read_block_nodc_intra() {
2002b98c:	3021ffb0 	addik	r1, r1, -80
2002b990:	f9e10000 	swi	r15, r1, 0
2002b994:	fa610048 	swi	r19, r1, 72
2002b998:	fa81004c 	swi	r20, r1, 76
2002b99c:	12610000 	addk	r19, r1, r0
2002b9a0:	96808000 	mfs	r20, rpc
2002b9a4:	b000dffd 	imm	-8195
2002b9a8:	32945fbc 	addik	r20, r20, 24508
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2002b9ac:	b0000000 	imm	0
2002b9b0:	e8740560 	lwi	r3, r20, 1376
2002b9b4:	e8630000 	lwi	r3, r3, 0
2002b9b8:	a46301ff 	andi	r3, r3, 511
2002b9bc:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_QP = index_QP % SIZE_QP;
2002b9c0:	b0000000 	imm	0
2002b9c4:	e8740598 	lwi	r3, r20, 1432
2002b9c8:	e8630000 	lwi	r3, r3, 0
2002b9cc:	a46301ff 	andi	r3, r3, 511
2002b9d0:	f8730028 	swi	r3, r19, 40
		i32 local_ac_pred_flag;
		i32 tmp_if0;
		i32 local_ACPRED;
		i8 local_vop_quant;
	
		local_INTRA = ConstantsBtype_INTRA;
2002b9d4:	30600400 	addik	r3, r0, 1024	// 400 <_HEAP_SIZE>
2002b9d8:	f873002c 	swi	r3, r19, 44
		local_ac_coded = ac_coded;
2002b9dc:	b0000000 	imm	0
2002b9e0:	e8740644 	lwi	r3, r20, 1604
2002b9e4:	e8630000 	lwi	r3, r3, 0
2002b9e8:	f8730030 	swi	r3, r19, 48
		if (local_ac_coded) {
2002b9ec:	e8730030 	lwi	r3, r19, 48
2002b9f0:	bc030018 	beqi	r3, 24		// 2002ba08
			local_ACCODED = Constants_ACCODED;
2002b9f4:	30600002 	addik	r3, r0, 2
2002b9f8:	f8730034 	swi	r3, r19, 52
			tmp_if = local_ACCODED;
2002b9fc:	e8730034 	lwi	r3, r19, 52
2002ba00:	f873001c 	swi	r3, r19, 28
2002ba04:	b8000008 	bri	8		// 2002ba0c
		} else {
			tmp_if = 0;
2002ba08:	f813001c 	swi	r0, r19, 28
		}
		cmd = local_INTRA | tmp_if;
2002ba0c:	e873002c 	lwi	r3, r19, 44
2002ba10:	90830061 	sext16	r4, r3
2002ba14:	e873001c 	lwi	r3, r19, 28
2002ba18:	90630061 	sext16	r3, r3
2002ba1c:	80641800 	or	r3, r4, r3
2002ba20:	f4730038 	shi	r3, r19, 56
		local_ac_pred_flag = ac_pred_flag;
2002ba24:	b0000000 	imm	0
2002ba28:	e8740630 	lwi	r3, r20, 1584
2002ba2c:	e8630000 	lwi	r3, r3, 0
2002ba30:	f873003c 	swi	r3, r19, 60
		if (local_ac_pred_flag) {
2002ba34:	e873003c 	lwi	r3, r19, 60
2002ba38:	bc030018 	beqi	r3, 24		// 2002ba50
			local_ACPRED = Constants_ACPRED;
2002ba3c:	30600001 	addik	r3, r0, 1
2002ba40:	f8730040 	swi	r3, r19, 64
			tmp_if0 = local_ACPRED;
2002ba44:	e8730040 	lwi	r3, r19, 64
2002ba48:	f8730020 	swi	r3, r19, 32
2002ba4c:	b8000008 	bri	8		// 2002ba54
		} else {
			tmp_if0 = 0;
2002ba50:	f8130020 	swi	r0, r19, 32
		}
		cmd = cmd | tmp_if0;
2002ba54:	e8730020 	lwi	r3, r19, 32
2002ba58:	90830061 	sext16	r4, r3
2002ba5c:	e4730038 	lhui	r3, r19, 56
2002ba60:	80641800 	or	r3, r4, r3
2002ba64:	f4730038 	shi	r3, r19, 56
		tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE] = cmd;
2002ba68:	b0000000 	imm	0
2002ba6c:	e8740550 	lwi	r3, r20, 1360
2002ba70:	e8630000 	lwi	r3, r3, 0
2002ba74:	e8830004 	lwi	r4, r3, 4
2002ba78:	b0000000 	imm	0
2002ba7c:	e8740560 	lwi	r3, r20, 1376
2002ba80:	e8630000 	lwi	r3, r3, 0
2002ba84:	a46301ff 	andi	r3, r3, 511
2002ba88:	10631800 	addk	r3, r3, r3
2002ba8c:	10641800 	addk	r3, r4, r3
2002ba90:	e4930038 	lhui	r4, r19, 56
2002ba94:	f4830000 	shi	r4, r3, 0
		local_vop_quant = vop_quant;
2002ba98:	b0000000 	imm	0
2002ba9c:	e87405f8 	lwi	r3, r20, 1528
2002baa0:	e0630000 	lbui	r3, r3, 0
2002baa4:	f0730044 	sbi	r3, r19, 68
		tokens_QP[(index_QP + (0)) % SIZE_QP] = local_vop_quant;
2002baa8:	b0000000 	imm	0
2002baac:	e8740538 	lwi	r3, r20, 1336
2002bab0:	e8630000 	lwi	r3, r3, 0
2002bab4:	e8830004 	lwi	r4, r3, 4
2002bab8:	b0000000 	imm	0
2002babc:	e8740598 	lwi	r3, r20, 1432
2002bac0:	e8630000 	lwi	r3, r3, 0
2002bac4:	a46301ff 	andi	r3, r3, 511
2002bac8:	10641800 	addk	r3, r4, r3
2002bacc:	e0930044 	lbui	r4, r19, 68
2002bad0:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
2002bad4:	b0000000 	imm	0
2002bad8:	e8740560 	lwi	r3, r20, 1376
2002badc:	e8630000 	lwi	r3, r3, 0
2002bae0:	30830001 	addik	r4, r3, 1
2002bae4:	b0000000 	imm	0
2002bae8:	e8740560 	lwi	r3, r20, 1376
2002baec:	f8830000 	swi	r4, r3, 0
		index_QP += 1;
2002baf0:	b0000000 	imm	0
2002baf4:	e8740598 	lwi	r3, r20, 1432
2002baf8:	e8630000 	lwi	r3, r3, 0
2002bafc:	30830001 	addik	r4, r3, 1
2002bb00:	b0000000 	imm	0
2002bb04:	e8740598 	lwi	r3, r20, 1432
2002bb08:	f8830000 	swi	r4, r3, 0
		
		write_end_BTYPE();
2002bb0c:	b0000000 	imm	0
2002bb10:	e8740664 	lwi	r3, r20, 1636
2002bb14:	99fc1800 	brald	r15, r3
2002bb18:	80000000 	or	r0, r0, r0
		write_end_QP();
2002bb1c:	b0000000 	imm	0
2002bb20:	e874069c 	lwi	r3, r20, 1692
2002bb24:	99fc1800 	brald	r15, r3
2002bb28:	80000000 	or	r0, r0, r0
	}
2002bb2c:	e9e10000 	lwi	r15, r1, 0
2002bb30:	10330000 	addk	r1, r19, r0
2002bb34:	ea610048 	lwi	r19, r1, 72
2002bb38:	ea81004c 	lwi	r20, r1, 76
2002bb3c:	30210050 	addik	r1, r1, 80
2002bb40:	b60f0008 	rtsd	r15, 8
2002bb44:	80000000 	or	r0, r0, r0

2002bb48 <isSchedulable_read_block_coeff_ac>:
	static i32 isSchedulable_read_block_coeff_ac() {
2002bb48:	3021ffec 	addik	r1, r1, -20
2002bb4c:	fa61000c 	swi	r19, r1, 12
2002bb50:	fa810010 	swi	r20, r1, 16
2002bb54:	12610000 	addk	r19, r1, r0
2002bb58:	96808000 	mfs	r20, rpc
2002bb5c:	b000dffd 	imm	-8195
2002bb60:	32945e04 	addik	r20, r20, 24068
		i32 result;
		i32 local_ac_coded;
	
		local_ac_coded = ac_coded;
2002bb64:	b0000000 	imm	0
2002bb68:	e8740644 	lwi	r3, r20, 1604
2002bb6c:	e8630000 	lwi	r3, r3, 0
2002bb70:	f8730004 	swi	r3, r19, 4
		result = local_ac_coded;
2002bb74:	e8730004 	lwi	r3, r19, 4
2002bb78:	f8730008 	swi	r3, r19, 8
		return result;
2002bb7c:	e8730008 	lwi	r3, r19, 8
	}
2002bb80:	10330000 	addk	r1, r19, r0
2002bb84:	ea61000c 	lwi	r19, r1, 12
2002bb88:	ea810010 	lwi	r20, r1, 16
2002bb8c:	30210014 	addik	r1, r1, 20
2002bb90:	b60f0008 	rtsd	r15, 8
2002bb94:	80000000 	or	r0, r0, r0

2002bb98 <read_block_coeff_ac>:
	
	static void read_block_coeff_ac() {
2002bb98:	3021fff4 	addik	r1, r1, -12
2002bb9c:	fa610004 	swi	r19, r1, 4
2002bba0:	fa810008 	swi	r20, r1, 8
2002bba4:	12610000 	addk	r19, r1, r0
2002bba8:	96808000 	mfs	r20, rpc
2002bbac:	b000dffd 	imm	-8195
2002bbb0:	32945db4 	addik	r20, r20, 23988
	
	
	
		// Update ports indexes
		
	}
2002bbb4:	10330000 	addk	r1, r19, r0
2002bbb8:	ea610004 	lwi	r19, r1, 4
2002bbbc:	ea810008 	lwi	r20, r1, 8
2002bbc0:	3021000c 	addik	r1, r1, 12
2002bbc4:	b60f0008 	rtsd	r15, 8
2002bbc8:	80000000 	or	r0, r0, r0

2002bbcc <isSchedulable_read_block_coeff_noac>:
	static i32 isSchedulable_read_block_coeff_noac() {
2002bbcc:	3021fff0 	addik	r1, r1, -16
2002bbd0:	fa610008 	swi	r19, r1, 8
2002bbd4:	fa81000c 	swi	r20, r1, 12
2002bbd8:	12610000 	addk	r19, r1, r0
2002bbdc:	96808000 	mfs	r20, rpc
2002bbe0:	b000dffd 	imm	-8195
2002bbe4:	32945d80 	addik	r20, r20, 23936
		i32 result;
	
		result = 1;
2002bbe8:	30600001 	addik	r3, r0, 1
2002bbec:	f8730004 	swi	r3, r19, 4
		return result;
2002bbf0:	e8730004 	lwi	r3, r19, 4
	}
2002bbf4:	10330000 	addk	r1, r19, r0
2002bbf8:	ea610008 	lwi	r19, r1, 8
2002bbfc:	ea81000c 	lwi	r20, r1, 12
2002bc00:	30210010 	addik	r1, r1, 16
2002bc04:	b60f0008 	rtsd	r15, 8
2002bc08:	80000000 	or	r0, r0, r0

2002bc0c <read_block_coeff_noac>:
	
	static void read_block_coeff_noac() {
2002bc0c:	3021fff0 	addik	r1, r1, -16
2002bc10:	fa610008 	swi	r19, r1, 8
2002bc14:	fa81000c 	swi	r20, r1, 12
2002bc18:	12610000 	addk	r19, r1, r0
2002bc1c:	96808000 	mfs	r20, rpc
2002bc20:	b000dffd 	imm	-8195
2002bc24:	32945d40 	addik	r20, r20, 23872
	
		// Compute aligned port indexes
	
		i8 local_comp;
	
		local_comp = comp;
2002bc28:	b0000000 	imm	0
2002bc2c:	e8740634 	lwi	r3, r20, 1588
2002bc30:	e0630000 	lbui	r3, r3, 0
2002bc34:	f0730004 	sbi	r3, r19, 4
		comp = local_comp + 1;
2002bc38:	e0730004 	lbui	r3, r19, 4
2002bc3c:	30630001 	addik	r3, r3, 1
2002bc40:	a46300ff 	andi	r3, r3, 255
2002bc44:	90830060 	sext8	r4, r3
2002bc48:	b0000000 	imm	0
2002bc4c:	e8740634 	lwi	r3, r20, 1588
2002bc50:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		
	}
2002bc54:	10330000 	addk	r1, r19, r0
2002bc58:	ea610008 	lwi	r19, r1, 8
2002bc5c:	ea81000c 	lwi	r20, r1, 12
2002bc60:	30210010 	addik	r1, r1, 16
2002bc64:	b60f0008 	rtsd	r15, 8
2002bc68:	80000000 	or	r0, r0, r0

2002bc6c <isSchedulable_read_block_coeff>:
	static i32 isSchedulable_read_block_coeff() {
2002bc6c:	3021ffe8 	addik	r1, r1, -24
2002bc70:	fa610010 	swi	r19, r1, 16
2002bc74:	fa810014 	swi	r20, r1, 20
2002bc78:	12610000 	addk	r19, r1, r0
2002bc7c:	96808000 	mfs	r20, rpc
2002bc80:	b000dffd 	imm	-8195
2002bc84:	32945ce0 	addik	r20, r20, 23776
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
2002bc88:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002bc8c:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
2002bc90:	e0730004 	lbui	r3, r19, 4
2002bc94:	b0000000 	imm	0
2002bc98:	e89405c8 	lwi	r4, r20, 1480
2002bc9c:	10631800 	addk	r3, r3, r3
2002bca0:	10641800 	addk	r3, r4, r3
2002bca4:	e4630000 	lhui	r3, r3, 0
2002bca8:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
2002bcac:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002bcb0:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
2002bcb4:	e4b30006 	lhui	r5, r19, 6
2002bcb8:	e0730008 	lbui	r3, r19, 8
2002bcbc:	3063ffff 	addik	r3, r3, -1
2002bcc0:	64830403 	bslli	r4, r3, 3
2002bcc4:	30600001 	addik	r3, r0, 1
2002bcc8:	16442801 	cmp	r18, r4, r5
2002bccc:	bcb20008 	bgei	r18, 8		// 2002bcd4
2002bcd0:	10600000 	addk	r3, r0, r0
2002bcd4:	a46300ff 	andi	r3, r3, 255
2002bcd8:	f873000c 	swi	r3, r19, 12
		return result;
2002bcdc:	e873000c 	lwi	r3, r19, 12
	}
2002bce0:	10330000 	addk	r1, r19, r0
2002bce4:	ea610010 	lwi	r19, r1, 16
2002bce8:	ea810014 	lwi	r20, r1, 20
2002bcec:	30210018 	addik	r1, r1, 24
2002bcf0:	b60f0008 	rtsd	r15, 8
2002bcf4:	80000000 	or	r0, r0, r0

2002bcf8 <read_block_coeff>:
	
	static void read_block_coeff() {
2002bcf8:	3021ffbc 	addik	r1, r1, -68
2002bcfc:	f9e10000 	swi	r15, r1, 0
2002bd00:	fa61003c 	swi	r19, r1, 60
2002bd04:	fa810040 	swi	r20, r1, 64
2002bd08:	12610000 	addk	r19, r1, r0
2002bd0c:	96808000 	mfs	r20, rpc
2002bd10:	b000dffd 	imm	-8195
2002bd14:	32945c50 	addik	r20, r20, 23632
	
		// Compute aligned port indexes
		i32 index_aligned_RUN = index_RUN % SIZE_RUN;
2002bd18:	b0000000 	imm	0
2002bd1c:	e8740570 	lwi	r3, r20, 1392
2002bd20:	e8630000 	lwi	r3, r3, 0
2002bd24:	a46301ff 	andi	r3, r3, 511
2002bd28:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_VALUE = index_VALUE % SIZE_VALUE;
2002bd2c:	b0000000 	imm	0
2002bd30:	e8740578 	lwi	r3, r20, 1400
2002bd34:	e8630000 	lwi	r3, r3, 0
2002bd38:	a46301ff 	andi	r3, r3, 511
2002bd3c:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_LAST = index_LAST % SIZE_LAST;
2002bd40:	b0000000 	imm	0
2002bd44:	e8740580 	lwi	r3, r20, 1408
2002bd48:	e8630000 	lwi	r3, r3, 0
2002bd4c:	a46301ff 	andi	r3, r3, 511
2002bd50:	f8730028 	swi	r3, r19, 40
		i32 local_is_intra;
		i8 tmp_run;
		i8 tmp_level;
		i32 tmp_last;
	
		local_is_intra = is_intra;
2002bd54:	b0000000 	imm	0
2002bd58:	e8740618 	lwi	r3, r20, 1560
2002bd5c:	e8630000 	lwi	r3, r3, 0
2002bd60:	f873002c 	swi	r3, r19, 44
		vldFunctions_get_coeff(fifo, res, "get_coeff            ", local_is_intra, last, run, level);
2002bd64:	30730038 	addik	r3, r19, 56
2002bd68:	b0000000 	imm	0
2002bd6c:	e8940640 	lwi	r4, r20, 1600
2002bd70:	f881001c 	swi	r4, r1, 28
2002bd74:	b0000000 	imm	0
2002bd78:	e8b405c8 	lwi	r5, r20, 1480
2002bd7c:	10c30000 	addk	r6, r3, r0
2002bd80:	b0000000 	imm	0
2002bd84:	e8f408cc 	lwi	r7, r20, 2252
2002bd88:	e913002c 	lwi	r8, r19, 44
2002bd8c:	b0000000 	imm	0
2002bd90:	e9340638 	lwi	r9, r20, 1592
2002bd94:	b0000000 	imm	0
2002bd98:	e954063c 	lwi	r10, r20, 1596
2002bd9c:	b0000000 	imm	0
2002bda0:	e87406d4 	lwi	r3, r20, 1748
2002bda4:	99fc1800 	brald	r15, r3
2002bda8:	80000000 	or	r0, r0, r0
		tmp_run = run[0];
2002bdac:	b0000000 	imm	0
2002bdb0:	e874063c 	lwi	r3, r20, 1596
2002bdb4:	e0630000 	lbui	r3, r3, 0
2002bdb8:	f0730030 	sbi	r3, r19, 48
		tokens_RUN[(index_RUN + (0)) % SIZE_RUN] = tmp_run;
2002bdbc:	b0000000 	imm	0
2002bdc0:	e8740540 	lwi	r3, r20, 1344
2002bdc4:	e8630000 	lwi	r3, r3, 0
2002bdc8:	e8830004 	lwi	r4, r3, 4
2002bdcc:	b0000000 	imm	0
2002bdd0:	e8740570 	lwi	r3, r20, 1392
2002bdd4:	e8630000 	lwi	r3, r3, 0
2002bdd8:	a46301ff 	andi	r3, r3, 511
2002bddc:	10641800 	addk	r3, r4, r3
2002bde0:	e0930030 	lbui	r4, r19, 48
2002bde4:	f0830000 	sbi	r4, r3, 0
		tmp_level = level[0];
2002bde8:	b0000000 	imm	0
2002bdec:	e8740640 	lwi	r3, r20, 1600
2002bdf0:	e0630000 	lbui	r3, r3, 0
2002bdf4:	f0730031 	sbi	r3, r19, 49
		tokens_VALUE[(index_VALUE + (0)) % SIZE_VALUE] = tmp_level;
2002bdf8:	b0000000 	imm	0
2002bdfc:	e8740554 	lwi	r3, r20, 1364
2002be00:	e8630000 	lwi	r3, r3, 0
2002be04:	e8830004 	lwi	r4, r3, 4
2002be08:	b0000000 	imm	0
2002be0c:	e8740578 	lwi	r3, r20, 1400
2002be10:	e8630000 	lwi	r3, r3, 0
2002be14:	a46301ff 	andi	r3, r3, 511
2002be18:	10631800 	addk	r3, r3, r3
2002be1c:	10641800 	addk	r3, r4, r3
2002be20:	e0930031 	lbui	r4, r19, 49
2002be24:	90840060 	sext8	r4, r4
2002be28:	90840061 	sext16	r4, r4
2002be2c:	f4830000 	shi	r4, r3, 0
		tmp_last = last[0];
2002be30:	b0000000 	imm	0
2002be34:	e8740638 	lwi	r3, r20, 1592
2002be38:	e8630000 	lwi	r3, r3, 0
2002be3c:	f8730034 	swi	r3, r19, 52
		tokens_LAST[(index_LAST + (0)) % SIZE_LAST] = tmp_last;
2002be40:	b0000000 	imm	0
2002be44:	e874054c 	lwi	r3, r20, 1356
2002be48:	e8630000 	lwi	r3, r3, 0
2002be4c:	e8830004 	lwi	r4, r3, 4
2002be50:	b0000000 	imm	0
2002be54:	e8740580 	lwi	r3, r20, 1408
2002be58:	e8630000 	lwi	r3, r3, 0
2002be5c:	a46301ff 	andi	r3, r3, 511
2002be60:	64630402 	bslli	r3, r3, 2
2002be64:	10641800 	addk	r3, r4, r3
2002be68:	e8930034 	lwi	r4, r19, 52
2002be6c:	f8830000 	swi	r4, r3, 0
	
		// Update ports indexes
		index_RUN += 1;
2002be70:	b0000000 	imm	0
2002be74:	e8740570 	lwi	r3, r20, 1392
2002be78:	e8630000 	lwi	r3, r3, 0
2002be7c:	30830001 	addik	r4, r3, 1
2002be80:	b0000000 	imm	0
2002be84:	e8740570 	lwi	r3, r20, 1392
2002be88:	f8830000 	swi	r4, r3, 0
		index_VALUE += 1;
2002be8c:	b0000000 	imm	0
2002be90:	e8740578 	lwi	r3, r20, 1400
2002be94:	e8630000 	lwi	r3, r3, 0
2002be98:	30830001 	addik	r4, r3, 1
2002be9c:	b0000000 	imm	0
2002bea0:	e8740578 	lwi	r3, r20, 1400
2002bea4:	f8830000 	swi	r4, r3, 0
		index_LAST += 1;
2002bea8:	b0000000 	imm	0
2002beac:	e8740580 	lwi	r3, r20, 1408
2002beb0:	e8630000 	lwi	r3, r3, 0
2002beb4:	30830001 	addik	r4, r3, 1
2002beb8:	b0000000 	imm	0
2002bebc:	e8740580 	lwi	r3, r20, 1408
2002bec0:	f8830000 	swi	r4, r3, 0
		
		write_end_RUN();
2002bec4:	b0000000 	imm	0
2002bec8:	e8740674 	lwi	r3, r20, 1652
2002becc:	99fc1800 	brald	r15, r3
2002bed0:	80000000 	or	r0, r0, r0
		write_end_VALUE();
2002bed4:	b0000000 	imm	0
2002bed8:	e874067c 	lwi	r3, r20, 1660
2002bedc:	99fc1800 	brald	r15, r3
2002bee0:	80000000 	or	r0, r0, r0
		write_end_LAST();
2002bee4:	b0000000 	imm	0
2002bee8:	e8740684 	lwi	r3, r20, 1668
2002beec:	99fc1800 	brald	r15, r3
2002bef0:	80000000 	or	r0, r0, r0
	}
2002bef4:	e9e10000 	lwi	r15, r1, 0
2002bef8:	10330000 	addk	r1, r19, r0
2002befc:	ea61003c 	lwi	r19, r1, 60
2002bf00:	ea810040 	lwi	r20, r1, 64
2002bf04:	30210044 	addik	r1, r1, 68
2002bf08:	b60f0008 	rtsd	r15, 8
2002bf0c:	80000000 	or	r0, r0, r0

2002bf10 <isSchedulable_read_block_coeff_done>:
	static i32 isSchedulable_read_block_coeff_done() {
2002bf10:	3021ffec 	addik	r1, r1, -20
2002bf14:	fa61000c 	swi	r19, r1, 12
2002bf18:	fa810010 	swi	r20, r1, 16
2002bf1c:	12610000 	addk	r19, r1, r0
2002bf20:	96808000 	mfs	r20, rpc
2002bf24:	b000dffd 	imm	-8195
2002bf28:	32945a3c 	addik	r20, r20, 23100
		i32 result;
		i32 tmp_last;
	
		tmp_last = last[0];
2002bf2c:	b0000000 	imm	0
2002bf30:	e8740638 	lwi	r3, r20, 1592
2002bf34:	e8630000 	lwi	r3, r3, 0
2002bf38:	f8730004 	swi	r3, r19, 4
		result = tmp_last;
2002bf3c:	e8730004 	lwi	r3, r19, 4
2002bf40:	f8730008 	swi	r3, r19, 8
		return result;
2002bf44:	e8730008 	lwi	r3, r19, 8
	}
2002bf48:	10330000 	addk	r1, r19, r0
2002bf4c:	ea61000c 	lwi	r19, r1, 12
2002bf50:	ea810010 	lwi	r20, r1, 16
2002bf54:	30210014 	addik	r1, r1, 20
2002bf58:	b60f0008 	rtsd	r15, 8
2002bf5c:	80000000 	or	r0, r0, r0

2002bf60 <read_block_coeff_done>:
	
	static void read_block_coeff_done() {
2002bf60:	3021fff0 	addik	r1, r1, -16
2002bf64:	fa610008 	swi	r19, r1, 8
2002bf68:	fa81000c 	swi	r20, r1, 12
2002bf6c:	12610000 	addk	r19, r1, r0
2002bf70:	96808000 	mfs	r20, rpc
2002bf74:	b000dffd 	imm	-8195
2002bf78:	329459ec 	addik	r20, r20, 23020
	
		// Compute aligned port indexes
	
		i8 local_comp;
	
		local_comp = comp;
2002bf7c:	b0000000 	imm	0
2002bf80:	e8740634 	lwi	r3, r20, 1588
2002bf84:	e0630000 	lbui	r3, r3, 0
2002bf88:	f0730004 	sbi	r3, r19, 4
		comp = local_comp + 1;
2002bf8c:	e0730004 	lbui	r3, r19, 4
2002bf90:	30630001 	addik	r3, r3, 1
2002bf94:	a46300ff 	andi	r3, r3, 255
2002bf98:	90830060 	sext8	r4, r3
2002bf9c:	b0000000 	imm	0
2002bfa0:	e8740634 	lwi	r3, r20, 1588
2002bfa4:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		
	}
2002bfa8:	10330000 	addk	r1, r19, r0
2002bfac:	ea610008 	lwi	r19, r1, 8
2002bfb0:	ea81000c 	lwi	r20, r1, 12
2002bfb4:	30210010 	addik	r1, r1, 16
2002bfb8:	b60f0008 	rtsd	r15, 8
2002bfbc:	80000000 	or	r0, r0, r0

2002bfc0 <isSchedulable_read_uncoded>:
	static i32 isSchedulable_read_uncoded() {
2002bfc0:	3021ffec 	addik	r1, r1, -20
2002bfc4:	fa61000c 	swi	r19, r1, 12
2002bfc8:	fa810010 	swi	r20, r1, 16
2002bfcc:	12610000 	addk	r19, r1, r0
2002bfd0:	96808000 	mfs	r20, rpc
2002bfd4:	b000dffd 	imm	-8195
2002bfd8:	3294598c 	addik	r20, r20, 22924
		i32 result;
		i32 local_not_coded;
	
		local_not_coded = not_coded;
2002bfdc:	b0000000 	imm	0
2002bfe0:	e8740624 	lwi	r3, r20, 1572
2002bfe4:	e8630000 	lwi	r3, r3, 0
2002bfe8:	f8730004 	swi	r3, r19, 4
		result = local_not_coded;
2002bfec:	e8730004 	lwi	r3, r19, 4
2002bff0:	f8730008 	swi	r3, r19, 8
		return result;
2002bff4:	e8730008 	lwi	r3, r19, 8
	}
2002bff8:	10330000 	addk	r1, r19, r0
2002bffc:	ea61000c 	lwi	r19, r1, 12
2002c000:	ea810010 	lwi	r20, r1, 16
2002c004:	30210014 	addik	r1, r1, 20
2002c008:	b60f0008 	rtsd	r15, 8
2002c00c:	80000000 	or	r0, r0, r0

2002c010 <read_uncoded>:
	
	static void read_uncoded() {
2002c010:	3021ffc4 	addik	r1, r1, -60
2002c014:	f9e10000 	swi	r15, r1, 0
2002c018:	fa610034 	swi	r19, r1, 52
2002c01c:	fa810038 	swi	r20, r1, 56
2002c020:	12610000 	addk	r19, r1, r0
2002c024:	96808000 	mfs	r20, rpc
2002c028:	b000dffd 	imm	-8195
2002c02c:	32945938 	addik	r20, r20, 22840
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2002c030:	b0000000 	imm	0
2002c034:	e8740560 	lwi	r3, r20, 1376
2002c038:	e8630000 	lwi	r3, r3, 0
2002c03c:	a46301ff 	andi	r3, r3, 511
2002c040:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_QP = index_QP % SIZE_QP;
2002c044:	b0000000 	imm	0
2002c048:	e8740598 	lwi	r3, r20, 1432
2002c04c:	e8630000 	lwi	r3, r3, 0
2002c050:	a46301ff 	andi	r3, r3, 511
2002c054:	f8730024 	swi	r3, r19, 36
		i32 local_mb_cnt;
		i32 i;
		i32 local_INTER;
		i8 local_vop_quant;
	
		comp = 6;
2002c058:	b0000000 	imm	0
2002c05c:	e8740634 	lwi	r3, r20, 1588
2002c060:	30800006 	addik	r4, r0, 6
2002c064:	f0830000 	sbi	r4, r3, 0
		local_mb_cnt = mb_cnt;
2002c068:	b0000000 	imm	0
2002c06c:	e874060c 	lwi	r3, r20, 1548
2002c070:	e8630000 	lwi	r3, r3, 0
2002c074:	f8730028 	swi	r3, r19, 40
		mb_cnt = local_mb_cnt + 1;
2002c078:	e8730028 	lwi	r3, r19, 40
2002c07c:	30830001 	addik	r4, r3, 1
2002c080:	b0000000 	imm	0
2002c084:	e874060c 	lwi	r3, r20, 1548
2002c088:	f8830000 	swi	r4, r3, 0
		i = 0;
2002c08c:	f813001c 	swi	r0, r19, 28
		while (i <= 5) {
2002c090:	b8000054 	bri	84		// 2002c0e4
			local_INTER = ConstantsBtype_INTER;
2002c094:	30600200 	addik	r3, r0, 512
2002c098:	f873002c 	swi	r3, r19, 44
			tokens_BTYPE[(index_BTYPE + (i)) % SIZE_BTYPE] = local_INTER;
2002c09c:	b0000000 	imm	0
2002c0a0:	e8740550 	lwi	r3, r20, 1360
2002c0a4:	e8630000 	lwi	r3, r3, 0
2002c0a8:	e8830004 	lwi	r4, r3, 4
2002c0ac:	b0000000 	imm	0
2002c0b0:	e8740560 	lwi	r3, r20, 1376
2002c0b4:	e8a30000 	lwi	r5, r3, 0
2002c0b8:	e873001c 	lwi	r3, r19, 28
2002c0bc:	10651800 	addk	r3, r5, r3
2002c0c0:	a46301ff 	andi	r3, r3, 511
2002c0c4:	10631800 	addk	r3, r3, r3
2002c0c8:	10641800 	addk	r3, r4, r3
2002c0cc:	e893002c 	lwi	r4, r19, 44
2002c0d0:	90840061 	sext16	r4, r4
2002c0d4:	f4830000 	shi	r4, r3, 0
			i = i + 1;
2002c0d8:	e873001c 	lwi	r3, r19, 28
2002c0dc:	30630001 	addik	r3, r3, 1
2002c0e0:	f873001c 	swi	r3, r19, 28
	
		comp = 6;
		local_mb_cnt = mb_cnt;
		mb_cnt = local_mb_cnt + 1;
		i = 0;
		while (i <= 5) {
2002c0e4:	e893001c 	lwi	r4, r19, 28
2002c0e8:	30600005 	addik	r3, r0, 5
2002c0ec:	16441801 	cmp	r18, r4, r3
2002c0f0:	bcb2ffa4 	bgei	r18, -92		// 2002c094
			local_INTER = ConstantsBtype_INTER;
			tokens_BTYPE[(index_BTYPE + (i)) % SIZE_BTYPE] = local_INTER;
			i = i + 1;
		}
		i = 0;
2002c0f4:	f813001c 	swi	r0, r19, 28
		while (i <= 5) {
2002c0f8:	b8000054 	bri	84		// 2002c14c
			local_vop_quant = vop_quant;
2002c0fc:	b0000000 	imm	0
2002c100:	e87405f8 	lwi	r3, r20, 1528
2002c104:	e0630000 	lbui	r3, r3, 0
2002c108:	f0730030 	sbi	r3, r19, 48
			tokens_QP[(index_QP + (i)) % SIZE_QP] = local_vop_quant;
2002c10c:	b0000000 	imm	0
2002c110:	e8740538 	lwi	r3, r20, 1336
2002c114:	e8630000 	lwi	r3, r3, 0
2002c118:	e8830004 	lwi	r4, r3, 4
2002c11c:	b0000000 	imm	0
2002c120:	e8740598 	lwi	r3, r20, 1432
2002c124:	e8a30000 	lwi	r5, r3, 0
2002c128:	e873001c 	lwi	r3, r19, 28
2002c12c:	10651800 	addk	r3, r5, r3
2002c130:	a46301ff 	andi	r3, r3, 511
2002c134:	10641800 	addk	r3, r4, r3
2002c138:	e0930030 	lbui	r4, r19, 48
2002c13c:	f0830000 	sbi	r4, r3, 0
			i = i + 1;
2002c140:	e873001c 	lwi	r3, r19, 28
2002c144:	30630001 	addik	r3, r3, 1
2002c148:	f873001c 	swi	r3, r19, 28
			local_INTER = ConstantsBtype_INTER;
			tokens_BTYPE[(index_BTYPE + (i)) % SIZE_BTYPE] = local_INTER;
			i = i + 1;
		}
		i = 0;
		while (i <= 5) {
2002c14c:	e893001c 	lwi	r4, r19, 28
2002c150:	30600005 	addik	r3, r0, 5
2002c154:	16441801 	cmp	r18, r4, r3
2002c158:	bcb2ffa4 	bgei	r18, -92		// 2002c0fc
			tokens_QP[(index_QP + (i)) % SIZE_QP] = local_vop_quant;
			i = i + 1;
		}
	
		// Update ports indexes
		index_BTYPE += 6;
2002c15c:	b0000000 	imm	0
2002c160:	e8740560 	lwi	r3, r20, 1376
2002c164:	e8630000 	lwi	r3, r3, 0
2002c168:	30830006 	addik	r4, r3, 6
2002c16c:	b0000000 	imm	0
2002c170:	e8740560 	lwi	r3, r20, 1376
2002c174:	f8830000 	swi	r4, r3, 0
		index_QP += 6;
2002c178:	b0000000 	imm	0
2002c17c:	e8740598 	lwi	r3, r20, 1432
2002c180:	e8630000 	lwi	r3, r3, 0
2002c184:	30830006 	addik	r4, r3, 6
2002c188:	b0000000 	imm	0
2002c18c:	e8740598 	lwi	r3, r20, 1432
2002c190:	f8830000 	swi	r4, r3, 0
		
		write_end_BTYPE();
2002c194:	b0000000 	imm	0
2002c198:	e8740664 	lwi	r3, r20, 1636
2002c19c:	99fc1800 	brald	r15, r3
2002c1a0:	80000000 	or	r0, r0, r0
		write_end_QP();
2002c1a4:	b0000000 	imm	0
2002c1a8:	e874069c 	lwi	r3, r20, 1692
2002c1ac:	99fc1800 	brald	r15, r3
2002c1b0:	80000000 	or	r0, r0, r0
	}
2002c1b4:	e9e10000 	lwi	r15, r1, 0
2002c1b8:	10330000 	addk	r1, r19, r0
2002c1bc:	ea610034 	lwi	r19, r1, 52
2002c1c0:	ea810038 	lwi	r20, r1, 56
2002c1c4:	3021003c 	addik	r1, r1, 60
2002c1c8:	b60f0008 	rtsd	r15, 8
2002c1cc:	80000000 	or	r0, r0, r0

2002c1d0 <isSchedulable_read_mv_start>:
	static i32 isSchedulable_read_mv_start() {
2002c1d0:	3021ffec 	addik	r1, r1, -20
2002c1d4:	fa61000c 	swi	r19, r1, 12
2002c1d8:	fa810010 	swi	r20, r1, 16
2002c1dc:	12610000 	addk	r19, r1, r0
2002c1e0:	96808000 	mfs	r20, rpc
2002c1e4:	b000dffd 	imm	-8195
2002c1e8:	3294577c 	addik	r20, r20, 22396
		i32 result;
		i8 local_derived_mb_type;
	
		local_derived_mb_type = derived_mb_type;
2002c1ec:	b0000000 	imm	0
2002c1f0:	e8740610 	lwi	r3, r20, 1552
2002c1f4:	e0630000 	lbui	r3, r3, 0
2002c1f8:	f0730004 	sbi	r3, r19, 4
		local_derived_mb_type = derived_mb_type;
2002c1fc:	b0000000 	imm	0
2002c200:	e8740610 	lwi	r3, r20, 1552
2002c204:	e0630000 	lbui	r3, r3, 0
2002c208:	f0730004 	sbi	r3, r19, 4
		result = local_derived_mb_type != 3 && local_derived_mb_type != 4;
2002c20c:	e0730004 	lbui	r3, r19, 4
2002c210:	90630060 	sext8	r3, r3
2002c214:	a8630003 	xori	r3, r3, 3
2002c218:	bc03001c 	beqi	r3, 28		// 2002c234
2002c21c:	e0730004 	lbui	r3, r19, 4
2002c220:	90630060 	sext8	r3, r3
2002c224:	a8630004 	xori	r3, r3, 4
2002c228:	bc03000c 	beqi	r3, 12		// 2002c234
2002c22c:	30600001 	addik	r3, r0, 1
2002c230:	b8000008 	bri	8		// 2002c238
2002c234:	10600000 	addk	r3, r0, r0
2002c238:	f8730008 	swi	r3, r19, 8
		return result;
2002c23c:	e8730008 	lwi	r3, r19, 8
	}
2002c240:	10330000 	addk	r1, r19, r0
2002c244:	ea61000c 	lwi	r19, r1, 12
2002c248:	ea810010 	lwi	r20, r1, 16
2002c24c:	30210014 	addik	r1, r1, 20
2002c250:	b60f0008 	rtsd	r15, 8
2002c254:	80000000 	or	r0, r0, r0

2002c258 <read_mv_start>:
	
	static void read_mv_start() {
2002c258:	3021fff4 	addik	r1, r1, -12
2002c25c:	fa610004 	swi	r19, r1, 4
2002c260:	fa810008 	swi	r20, r1, 8
2002c264:	12610000 	addk	r19, r1, r0
2002c268:	96808000 	mfs	r20, rpc
2002c26c:	b000dffd 	imm	-8195
2002c270:	329456f4 	addik	r20, r20, 22260
	
		// Compute aligned port indexes
	
	
		mvcomp = 0;
2002c274:	b0000000 	imm	0
2002c278:	e8740648 	lwi	r3, r20, 1608
2002c27c:	f0030000 	sbi	r0, r3, 0
	
		// Update ports indexes
		
	}
2002c280:	10330000 	addk	r1, r19, r0
2002c284:	ea610004 	lwi	r19, r1, 4
2002c288:	ea810008 	lwi	r20, r1, 8
2002c28c:	3021000c 	addik	r1, r1, 12
2002c290:	b60f0008 	rtsd	r15, 8
2002c294:	80000000 	or	r0, r0, r0

2002c298 <isSchedulable_read_mv_data>:
	static i32 isSchedulable_read_mv_data() {
2002c298:	3021ffe8 	addik	r1, r1, -24
2002c29c:	fa610010 	swi	r19, r1, 16
2002c2a0:	fa810014 	swi	r20, r1, 20
2002c2a4:	12610000 	addk	r19, r1, r0
2002c2a8:	96808000 	mfs	r20, rpc
2002c2ac:	b000dffd 	imm	-8195
2002c2b0:	329456b4 	addik	r20, r20, 22196
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
2002c2b4:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002c2b8:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
2002c2bc:	e0730004 	lbui	r3, r19, 4
2002c2c0:	b0000000 	imm	0
2002c2c4:	e89405c8 	lwi	r4, r20, 1480
2002c2c8:	10631800 	addk	r3, r3, r3
2002c2cc:	10641800 	addk	r3, r4, r3
2002c2d0:	e4630000 	lhui	r3, r3, 0
2002c2d4:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
2002c2d8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002c2dc:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
2002c2e0:	e4b30006 	lhui	r5, r19, 6
2002c2e4:	e0730008 	lbui	r3, r19, 8
2002c2e8:	3063ffff 	addik	r3, r3, -1
2002c2ec:	64830403 	bslli	r4, r3, 3
2002c2f0:	30600001 	addik	r3, r0, 1
2002c2f4:	16442801 	cmp	r18, r4, r5
2002c2f8:	bcb20008 	bgei	r18, 8		// 2002c300
2002c2fc:	10600000 	addk	r3, r0, r0
2002c300:	a46300ff 	andi	r3, r3, 255
2002c304:	f873000c 	swi	r3, r19, 12
		return result;
2002c308:	e873000c 	lwi	r3, r19, 12
	}
2002c30c:	10330000 	addk	r1, r19, r0
2002c310:	ea610010 	lwi	r19, r1, 16
2002c314:	ea810014 	lwi	r20, r1, 20
2002c318:	30210018 	addik	r1, r1, 24
2002c31c:	b60f0008 	rtsd	r15, 8
2002c320:	80000000 	or	r0, r0, r0

2002c324 <read_mv_data>:
	
	static void read_mv_data() {
2002c324:	3021ffb4 	addik	r1, r1, -76
2002c328:	f9e10000 	swi	r15, r1, 0
2002c32c:	fa610044 	swi	r19, r1, 68
2002c330:	fa810048 	swi	r20, r1, 72
2002c334:	12610000 	addk	r19, r1, r0
2002c338:	96808000 	mfs	r20, rpc
2002c33c:	b000dffd 	imm	-8195
2002c340:	32945624 	addik	r20, r20, 22052
	
		// Compute aligned port indexes
		i32 index_aligned_MV = index_MV % SIZE_MV;
2002c344:	b0000000 	imm	0
2002c348:	e8740568 	lwi	r3, r20, 1384
2002c34c:	e8630000 	lwi	r3, r3, 0
2002c350:	a46301ff 	andi	r3, r3, 511
2002c354:	f873001c 	swi	r3, r19, 28
		i32 tmp_res2;
		i32 tmp_res3;
		i32 tmp_res4;
		u8 local_mvcomp;
	
		vldFunctions_get_mv(fifo, res, "horizontal_mv_data            ");
2002c358:	30730040 	addik	r3, r19, 64
2002c35c:	b0000000 	imm	0
2002c360:	e8b405c8 	lwi	r5, r20, 1480
2002c364:	10c30000 	addk	r6, r3, r0
2002c368:	b0000000 	imm	0
2002c36c:	e8f408d0 	lwi	r7, r20, 2256
2002c370:	b0000000 	imm	0
2002c374:	e87406d8 	lwi	r3, r20, 1752
2002c378:	99fc1800 	brald	r15, r3
2002c37c:	80000000 	or	r0, r0, r0
		tmp_res = res[0];
2002c380:	e8730040 	lwi	r3, r19, 64
2002c384:	f8730020 	swi	r3, r19, 32
		tokens_MV[(index_MV + (0)) % SIZE_MV] = tmp_res;
2002c388:	b0000000 	imm	0
2002c38c:	e8740544 	lwi	r3, r20, 1348
2002c390:	e8630000 	lwi	r3, r3, 0
2002c394:	e8830004 	lwi	r4, r3, 4
2002c398:	b0000000 	imm	0
2002c39c:	e8740568 	lwi	r3, r20, 1384
2002c3a0:	e8630000 	lwi	r3, r3, 0
2002c3a4:	a46301ff 	andi	r3, r3, 511
2002c3a8:	10631800 	addk	r3, r3, r3
2002c3ac:	10641800 	addk	r3, r4, r3
2002c3b0:	e8930020 	lwi	r4, r19, 32
2002c3b4:	90840061 	sext16	r4, r4
2002c3b8:	f4830000 	shi	r4, r3, 0
		local_fcode = fcode;
2002c3bc:	b0000000 	imm	0
2002c3c0:	e8740608 	lwi	r3, r20, 1544
2002c3c4:	e0630000 	lbui	r3, r3, 0
2002c3c8:	f0730024 	sbi	r3, r19, 36
		tmp_res0 = res[0];
2002c3cc:	e8730040 	lwi	r3, r19, 64
2002c3d0:	f8730028 	swi	r3, r19, 40
		if (local_fcode <= 1 || tmp_res0 == 0) {
2002c3d4:	e0730024 	lbui	r3, r19, 36
2002c3d8:	90830060 	sext8	r4, r3
2002c3dc:	30600001 	addik	r3, r0, 1
2002c3e0:	16441801 	cmp	r18, r4, r3
2002c3e4:	bcb2000c 	bgei	r18, 12		// 2002c3f0
2002c3e8:	e8730028 	lwi	r3, r19, 40
2002c3ec:	bc230038 	bnei	r3, 56		// 2002c424
			tokens_MV[(index_MV + (1)) % SIZE_MV] = 0;
2002c3f0:	b0000000 	imm	0
2002c3f4:	e8740544 	lwi	r3, r20, 1348
2002c3f8:	e8630000 	lwi	r3, r3, 0
2002c3fc:	e8830004 	lwi	r4, r3, 4
2002c400:	b0000000 	imm	0
2002c404:	e8740568 	lwi	r3, r20, 1384
2002c408:	e8630000 	lwi	r3, r3, 0
2002c40c:	30630001 	addik	r3, r3, 1
2002c410:	a46301ff 	andi	r3, r3, 511
2002c414:	10631800 	addk	r3, r3, r3
2002c418:	10641800 	addk	r3, r4, r3
2002c41c:	f4030000 	shi	r0, r3, 0
2002c420:	b800008c 	bri	140		// 2002c4ac
		} else {
			local_fcode = fcode;
2002c424:	b0000000 	imm	0
2002c428:	e8740608 	lwi	r3, r20, 1544
2002c42c:	e0630000 	lbui	r3, r3, 0
2002c430:	f0730024 	sbi	r3, r19, 36
			BitstreamReadUtils_vld_u_name(local_fcode - 1, fifo, res, "horizontal_mv_residual            ");
2002c434:	e0730024 	lbui	r3, r19, 36
2002c438:	3063ffff 	addik	r3, r3, -1
2002c43c:	a48300ff 	andi	r4, r3, 255
2002c440:	30730040 	addik	r3, r19, 64
2002c444:	10a40000 	addk	r5, r4, r0
2002c448:	b0000000 	imm	0
2002c44c:	e8d405c8 	lwi	r6, r20, 1480
2002c450:	10e30000 	addk	r7, r3, r0
2002c454:	b0000000 	imm	0
2002c458:	e91408d4 	lwi	r8, r20, 2260
2002c45c:	b0000000 	imm	0
2002c460:	e87406b4 	lwi	r3, r20, 1716
2002c464:	99fc1800 	brald	r15, r3
2002c468:	80000000 	or	r0, r0, r0
			tmp_res1 = res[0];
2002c46c:	e8730040 	lwi	r3, r19, 64
2002c470:	f873002c 	swi	r3, r19, 44
			tokens_MV[(index_MV + (1)) % SIZE_MV] = tmp_res1;
2002c474:	b0000000 	imm	0
2002c478:	e8740544 	lwi	r3, r20, 1348
2002c47c:	e8630000 	lwi	r3, r3, 0
2002c480:	e8830004 	lwi	r4, r3, 4
2002c484:	b0000000 	imm	0
2002c488:	e8740568 	lwi	r3, r20, 1384
2002c48c:	e8630000 	lwi	r3, r3, 0
2002c490:	30630001 	addik	r3, r3, 1
2002c494:	a46301ff 	andi	r3, r3, 511
2002c498:	10631800 	addk	r3, r3, r3
2002c49c:	10641800 	addk	r3, r4, r3
2002c4a0:	e893002c 	lwi	r4, r19, 44
2002c4a4:	90840061 	sext16	r4, r4
2002c4a8:	f4830000 	shi	r4, r3, 0
		}
		vldFunctions_get_mv(fifo, res, "vertical_mv_data            ");
2002c4ac:	30730040 	addik	r3, r19, 64
2002c4b0:	b0000000 	imm	0
2002c4b4:	e8b405c8 	lwi	r5, r20, 1480
2002c4b8:	10c30000 	addk	r6, r3, r0
2002c4bc:	b0000000 	imm	0
2002c4c0:	e8f408d8 	lwi	r7, r20, 2264
2002c4c4:	b0000000 	imm	0
2002c4c8:	e87406d8 	lwi	r3, r20, 1752
2002c4cc:	99fc1800 	brald	r15, r3
2002c4d0:	80000000 	or	r0, r0, r0
		tmp_res2 = res[0];
2002c4d4:	e8730040 	lwi	r3, r19, 64
2002c4d8:	f8730030 	swi	r3, r19, 48
		tokens_MV[(index_MV + (2)) % SIZE_MV] = tmp_res2;
2002c4dc:	b0000000 	imm	0
2002c4e0:	e8740544 	lwi	r3, r20, 1348
2002c4e4:	e8630000 	lwi	r3, r3, 0
2002c4e8:	e8830004 	lwi	r4, r3, 4
2002c4ec:	b0000000 	imm	0
2002c4f0:	e8740568 	lwi	r3, r20, 1384
2002c4f4:	e8630000 	lwi	r3, r3, 0
2002c4f8:	30630002 	addik	r3, r3, 2
2002c4fc:	a46301ff 	andi	r3, r3, 511
2002c500:	10631800 	addk	r3, r3, r3
2002c504:	10641800 	addk	r3, r4, r3
2002c508:	e8930030 	lwi	r4, r19, 48
2002c50c:	90840061 	sext16	r4, r4
2002c510:	f4830000 	shi	r4, r3, 0
		local_fcode = fcode;
2002c514:	b0000000 	imm	0
2002c518:	e8740608 	lwi	r3, r20, 1544
2002c51c:	e0630000 	lbui	r3, r3, 0
2002c520:	f0730024 	sbi	r3, r19, 36
		tmp_res3 = res[0];
2002c524:	e8730040 	lwi	r3, r19, 64
2002c528:	f8730034 	swi	r3, r19, 52
		if (local_fcode <= 1 || tmp_res3 == 0) {
2002c52c:	e0730024 	lbui	r3, r19, 36
2002c530:	90830060 	sext8	r4, r3
2002c534:	30600001 	addik	r3, r0, 1
2002c538:	16441801 	cmp	r18, r4, r3
2002c53c:	bcb2000c 	bgei	r18, 12		// 2002c548
2002c540:	e8730034 	lwi	r3, r19, 52
2002c544:	bc230038 	bnei	r3, 56		// 2002c57c
			tokens_MV[(index_MV + (3)) % SIZE_MV] = 0;
2002c548:	b0000000 	imm	0
2002c54c:	e8740544 	lwi	r3, r20, 1348
2002c550:	e8630000 	lwi	r3, r3, 0
2002c554:	e8830004 	lwi	r4, r3, 4
2002c558:	b0000000 	imm	0
2002c55c:	e8740568 	lwi	r3, r20, 1384
2002c560:	e8630000 	lwi	r3, r3, 0
2002c564:	30630003 	addik	r3, r3, 3
2002c568:	a46301ff 	andi	r3, r3, 511
2002c56c:	10631800 	addk	r3, r3, r3
2002c570:	10641800 	addk	r3, r4, r3
2002c574:	f4030000 	shi	r0, r3, 0
2002c578:	b800008c 	bri	140		// 2002c604
		} else {
			local_fcode = fcode;
2002c57c:	b0000000 	imm	0
2002c580:	e8740608 	lwi	r3, r20, 1544
2002c584:	e0630000 	lbui	r3, r3, 0
2002c588:	f0730024 	sbi	r3, r19, 36
			BitstreamReadUtils_vld_u_name(local_fcode - 1, fifo, res, "vertical_mv_residual            ");
2002c58c:	e0730024 	lbui	r3, r19, 36
2002c590:	3063ffff 	addik	r3, r3, -1
2002c594:	a48300ff 	andi	r4, r3, 255
2002c598:	30730040 	addik	r3, r19, 64
2002c59c:	10a40000 	addk	r5, r4, r0
2002c5a0:	b0000000 	imm	0
2002c5a4:	e8d405c8 	lwi	r6, r20, 1480
2002c5a8:	10e30000 	addk	r7, r3, r0
2002c5ac:	b0000000 	imm	0
2002c5b0:	e91408dc 	lwi	r8, r20, 2268
2002c5b4:	b0000000 	imm	0
2002c5b8:	e87406b4 	lwi	r3, r20, 1716
2002c5bc:	99fc1800 	brald	r15, r3
2002c5c0:	80000000 	or	r0, r0, r0
			tmp_res4 = res[0];
2002c5c4:	e8730040 	lwi	r3, r19, 64
2002c5c8:	f8730038 	swi	r3, r19, 56
			tokens_MV[(index_MV + (3)) % SIZE_MV] = tmp_res4;
2002c5cc:	b0000000 	imm	0
2002c5d0:	e8740544 	lwi	r3, r20, 1348
2002c5d4:	e8630000 	lwi	r3, r3, 0
2002c5d8:	e8830004 	lwi	r4, r3, 4
2002c5dc:	b0000000 	imm	0
2002c5e0:	e8740568 	lwi	r3, r20, 1384
2002c5e4:	e8630000 	lwi	r3, r3, 0
2002c5e8:	30630003 	addik	r3, r3, 3
2002c5ec:	a46301ff 	andi	r3, r3, 511
2002c5f0:	10631800 	addk	r3, r3, r3
2002c5f4:	10641800 	addk	r3, r4, r3
2002c5f8:	e8930038 	lwi	r4, r19, 56
2002c5fc:	90840061 	sext16	r4, r4
2002c600:	f4830000 	shi	r4, r3, 0
		}
		local_mvcomp = mvcomp;
2002c604:	b0000000 	imm	0
2002c608:	e8740648 	lwi	r3, r20, 1608
2002c60c:	e0630000 	lbui	r3, r3, 0
2002c610:	f073003c 	sbi	r3, r19, 60
		mvcomp = local_mvcomp + 1;
2002c614:	e073003c 	lbui	r3, r19, 60
2002c618:	30630001 	addik	r3, r3, 1
2002c61c:	a48300ff 	andi	r4, r3, 255
2002c620:	b0000000 	imm	0
2002c624:	e8740648 	lwi	r3, r20, 1608
2002c628:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		index_MV += 4;
2002c62c:	b0000000 	imm	0
2002c630:	e8740568 	lwi	r3, r20, 1384
2002c634:	e8630000 	lwi	r3, r3, 0
2002c638:	30830004 	addik	r4, r3, 4
2002c63c:	b0000000 	imm	0
2002c640:	e8740568 	lwi	r3, r20, 1384
2002c644:	f8830000 	swi	r4, r3, 0
		
		write_end_MV();
2002c648:	b0000000 	imm	0
2002c64c:	e874066c 	lwi	r3, r20, 1644
2002c650:	99fc1800 	brald	r15, r3
2002c654:	80000000 	or	r0, r0, r0
	}
2002c658:	e9e10000 	lwi	r15, r1, 0
2002c65c:	10330000 	addk	r1, r19, r0
2002c660:	ea610044 	lwi	r19, r1, 68
2002c664:	ea810048 	lwi	r20, r1, 72
2002c668:	3021004c 	addik	r1, r1, 76
2002c66c:	b60f0008 	rtsd	r15, 8
2002c670:	80000000 	or	r0, r0, r0

2002c674 <isSchedulable_read_mv_data_done>:
	static i32 isSchedulable_read_mv_data_done() {
2002c674:	3021ffe8 	addik	r1, r1, -24
2002c678:	fa610010 	swi	r19, r1, 16
2002c67c:	fa810014 	swi	r20, r1, 20
2002c680:	12610000 	addk	r19, r1, r0
2002c684:	96808000 	mfs	r20, rpc
2002c688:	b000dffd 	imm	-8195
2002c68c:	329452d8 	addik	r20, r20, 21208
		i32 result;
		u8 local_mvcomp;
		i32 local_fourmvflag;
	
		local_mvcomp = mvcomp;
2002c690:	b0000000 	imm	0
2002c694:	e8740648 	lwi	r3, r20, 1608
2002c698:	e0630000 	lbui	r3, r3, 0
2002c69c:	f0730004 	sbi	r3, r19, 4
		local_mvcomp = mvcomp;
2002c6a0:	b0000000 	imm	0
2002c6a4:	e8740648 	lwi	r3, r20, 1608
2002c6a8:	e0630000 	lbui	r3, r3, 0
2002c6ac:	f0730004 	sbi	r3, r19, 4
		local_fourmvflag = fourmvflag;
2002c6b0:	b0000000 	imm	0
2002c6b4:	e8740620 	lwi	r3, r20, 1568
2002c6b8:	e8630000 	lwi	r3, r3, 0
2002c6bc:	f8730008 	swi	r3, r19, 8
		result = local_mvcomp == 4 || local_mvcomp == 1 && !local_fourmvflag;
2002c6c0:	e0730004 	lbui	r3, r19, 4
2002c6c4:	a8630004 	xori	r3, r3, 4
2002c6c8:	bc030018 	beqi	r3, 24		// 2002c6e0
2002c6cc:	e0730004 	lbui	r3, r19, 4
2002c6d0:	a8630001 	xori	r3, r3, 1
2002c6d4:	bc230014 	bnei	r3, 20		// 2002c6e8
2002c6d8:	e8730008 	lwi	r3, r19, 8
2002c6dc:	bc23000c 	bnei	r3, 12		// 2002c6e8
2002c6e0:	30600001 	addik	r3, r0, 1
2002c6e4:	b8000008 	bri	8		// 2002c6ec
2002c6e8:	10600000 	addk	r3, r0, r0
2002c6ec:	f873000c 	swi	r3, r19, 12
		return result;
2002c6f0:	e873000c 	lwi	r3, r19, 12
	}
2002c6f4:	10330000 	addk	r1, r19, r0
2002c6f8:	ea610010 	lwi	r19, r1, 16
2002c6fc:	ea810014 	lwi	r20, r1, 20
2002c700:	30210018 	addik	r1, r1, 24
2002c704:	b60f0008 	rtsd	r15, 8
2002c708:	80000000 	or	r0, r0, r0

2002c70c <read_mv_data_done>:
	
	static void read_mv_data_done() {
2002c70c:	3021fff4 	addik	r1, r1, -12
2002c710:	fa610004 	swi	r19, r1, 4
2002c714:	fa810008 	swi	r20, r1, 8
2002c718:	12610000 	addk	r19, r1, r0
2002c71c:	96808000 	mfs	r20, rpc
2002c720:	b000dffd 	imm	-8195
2002c724:	32945240 	addik	r20, r20, 21056
	
	
	
		// Update ports indexes
		
	}
2002c728:	10330000 	addk	r1, r19, r0
2002c72c:	ea610004 	lwi	r19, r1, 4
2002c730:	ea810008 	lwi	r20, r1, 8
2002c734:	3021000c 	addik	r1, r1, 12
2002c738:	b60f0008 	rtsd	r15, 8
2002c73c:	80000000 	or	r0, r0, r0

2002c740 <isSchedulable_start_code_search>:
	static i32 isSchedulable_start_code_search() {
2002c740:	3021ffcc 	addik	r1, r1, -52
2002c744:	f9e10000 	swi	r15, r1, 0
2002c748:	fa61002c 	swi	r19, r1, 44
2002c74c:	fa810030 	swi	r20, r1, 48
2002c750:	12610000 	addk	r19, r1, r0
2002c754:	96808000 	mfs	r20, rpc
2002c758:	b000dffd 	imm	-8195
2002c75c:	32945208 	addik	r20, r20, 21000
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
		i32 tmp_IsStartCode;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
2002c760:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002c764:	f073001c 	sbi	r3, r19, 28
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
2002c768:	e073001c 	lbui	r3, r19, 28
2002c76c:	b0000000 	imm	0
2002c770:	e89405c8 	lwi	r4, r20, 1480
2002c774:	10631800 	addk	r3, r3, r3
2002c778:	10641800 	addk	r3, r4, r3
2002c77c:	e4630000 	lhui	r3, r3, 0
2002c780:	f473001e 	shi	r3, r19, 30
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
2002c784:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002c788:	f0730020 	sbi	r3, r19, 32
		tmp_IsStartCode = BitstreamReadUtils_IsStartCode(fifo);
2002c78c:	b0000000 	imm	0
2002c790:	e8b405c8 	lwi	r5, r20, 1480
2002c794:	b0000000 	imm	0
2002c798:	e89406dc 	lwi	r4, r20, 1756
2002c79c:	99fc2000 	brald	r15, r4
2002c7a0:	80000000 	or	r0, r0, r0
2002c7a4:	f8730024 	swi	r3, r19, 36
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3 && !tmp_IsStartCode;
2002c7a8:	e493001e 	lhui	r4, r19, 30
2002c7ac:	e0730020 	lbui	r3, r19, 32
2002c7b0:	3063ffff 	addik	r3, r3, -1
2002c7b4:	64630403 	bslli	r3, r3, 3
2002c7b8:	16432001 	cmp	r18, r3, r4
2002c7bc:	bc520014 	blti	r18, 20		// 2002c7d0
2002c7c0:	e8730024 	lwi	r3, r19, 36
2002c7c4:	bc23000c 	bnei	r3, 12		// 2002c7d0
2002c7c8:	30600001 	addik	r3, r0, 1
2002c7cc:	b8000008 	bri	8		// 2002c7d4
2002c7d0:	10600000 	addk	r3, r0, r0
2002c7d4:	f8730028 	swi	r3, r19, 40
		return result;
2002c7d8:	e8730028 	lwi	r3, r19, 40
	}
2002c7dc:	e9e10000 	lwi	r15, r1, 0
2002c7e0:	10330000 	addk	r1, r19, r0
2002c7e4:	ea61002c 	lwi	r19, r1, 44
2002c7e8:	ea810030 	lwi	r20, r1, 48
2002c7ec:	30210034 	addik	r1, r1, 52
2002c7f0:	b60f0008 	rtsd	r15, 8
2002c7f4:	80000000 	or	r0, r0, r0

2002c7f8 <start_code_search>:
	
	static void start_code_search() {
2002c7f8:	3021ffd8 	addik	r1, r1, -40
2002c7fc:	f9e10000 	swi	r15, r1, 0
2002c800:	fa610020 	swi	r19, r1, 32
2002c804:	fa810024 	swi	r20, r1, 36
2002c808:	12610000 	addk	r19, r1, r0
2002c80c:	96808000 	mfs	r20, rpc
2002c810:	b000dffd 	imm	-8195
2002c814:	32945150 	addik	r20, r20, 20816
	
		// Compute aligned port indexes
	
		i32 local_DEBUG_BITSTREAM;
	
		BitstreamReadUtils_flushBits(8, fifo);
2002c818:	30a00008 	addik	r5, r0, 8	// 8 <_vector_sw_exception>
2002c81c:	b0000000 	imm	0
2002c820:	e8d405c8 	lwi	r6, r20, 1480
2002c824:	b0000000 	imm	0
2002c828:	e87406a8 	lwi	r3, r20, 1704
2002c82c:	99fc1800 	brald	r15, r3
2002c830:	80000000 	or	r0, r0, r0
		local_DEBUG_BITSTREAM = DEBUG_BITSTREAM;
2002c834:	f813001c 	swi	r0, r19, 28
		if (local_DEBUG_BITSTREAM) {
		}
	
		// Update ports indexes
		
	}
2002c838:	e9e10000 	lwi	r15, r1, 0
2002c83c:	10330000 	addk	r1, r19, r0
2002c840:	ea610020 	lwi	r19, r1, 32
2002c844:	ea810024 	lwi	r20, r1, 36
2002c848:	30210028 	addik	r1, r1, 40
2002c84c:	b60f0008 	rtsd	r15, 8
2002c850:	80000000 	or	r0, r0, r0

2002c854 <isSchedulable_start_code_done>:
	static i32 isSchedulable_start_code_done() {
2002c854:	3021ffcc 	addik	r1, r1, -52
2002c858:	f9e10000 	swi	r15, r1, 0
2002c85c:	fa61002c 	swi	r19, r1, 44
2002c860:	fa810030 	swi	r20, r1, 48
2002c864:	12610000 	addk	r19, r1, r0
2002c868:	96808000 	mfs	r20, rpc
2002c86c:	b000dffd 	imm	-8195
2002c870:	329450f4 	addik	r20, r20, 20724
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
		i32 tmp_IsStartCode;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
2002c874:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002c878:	f073001c 	sbi	r3, r19, 28
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
2002c87c:	e073001c 	lbui	r3, r19, 28
2002c880:	b0000000 	imm	0
2002c884:	e89405c8 	lwi	r4, r20, 1480
2002c888:	10631800 	addk	r3, r3, r3
2002c88c:	10641800 	addk	r3, r4, r3
2002c890:	e4630000 	lhui	r3, r3, 0
2002c894:	f473001e 	shi	r3, r19, 30
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
2002c898:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002c89c:	f0730020 	sbi	r3, r19, 32
		tmp_IsStartCode = BitstreamReadUtils_IsStartCode(fifo);
2002c8a0:	b0000000 	imm	0
2002c8a4:	e8b405c8 	lwi	r5, r20, 1480
2002c8a8:	b0000000 	imm	0
2002c8ac:	e89406dc 	lwi	r4, r20, 1756
2002c8b0:	99fc2000 	brald	r15, r4
2002c8b4:	80000000 	or	r0, r0, r0
2002c8b8:	f8730024 	swi	r3, r19, 36
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3 && tmp_IsStartCode;
2002c8bc:	e493001e 	lhui	r4, r19, 30
2002c8c0:	e0730020 	lbui	r3, r19, 32
2002c8c4:	3063ffff 	addik	r3, r3, -1
2002c8c8:	64630403 	bslli	r3, r3, 3
2002c8cc:	16432001 	cmp	r18, r3, r4
2002c8d0:	bc520014 	blti	r18, 20		// 2002c8e4
2002c8d4:	e8730024 	lwi	r3, r19, 36
2002c8d8:	bc03000c 	beqi	r3, 12		// 2002c8e4
2002c8dc:	30600001 	addik	r3, r0, 1
2002c8e0:	b8000008 	bri	8		// 2002c8e8
2002c8e4:	10600000 	addk	r3, r0, r0
2002c8e8:	f8730028 	swi	r3, r19, 40
		return result;
2002c8ec:	e8730028 	lwi	r3, r19, 40
	}
2002c8f0:	e9e10000 	lwi	r15, r1, 0
2002c8f4:	10330000 	addk	r1, r19, r0
2002c8f8:	ea61002c 	lwi	r19, r1, 44
2002c8fc:	ea810030 	lwi	r20, r1, 48
2002c900:	30210034 	addik	r1, r1, 52
2002c904:	b60f0008 	rtsd	r15, 8
2002c908:	80000000 	or	r0, r0, r0

2002c90c <start_code_done>:
	
	static void start_code_done() {
2002c90c:	3021ffd8 	addik	r1, r1, -40
2002c910:	f9e10000 	swi	r15, r1, 0
2002c914:	fa610020 	swi	r19, r1, 32
2002c918:	fa810024 	swi	r20, r1, 36
2002c91c:	12610000 	addk	r19, r1, r0
2002c920:	96808000 	mfs	r20, rpc
2002c924:	b000dffd 	imm	-8195
2002c928:	3294503c 	addik	r20, r20, 20540
	
		// Compute aligned port indexes
	
		i32 local_DEBUG_BITSTREAM;
	
		BitstreamReadUtils_flushBits(8, fifo);
2002c92c:	30a00008 	addik	r5, r0, 8	// 8 <_vector_sw_exception>
2002c930:	b0000000 	imm	0
2002c934:	e8d405c8 	lwi	r6, r20, 1480
2002c938:	b0000000 	imm	0
2002c93c:	e87406a8 	lwi	r3, r20, 1704
2002c940:	99fc1800 	brald	r15, r3
2002c944:	80000000 	or	r0, r0, r0
		local_DEBUG_BITSTREAM = DEBUG_BITSTREAM;
2002c948:	f813001c 	swi	r0, r19, 28
		if (local_DEBUG_BITSTREAM) {
		}
	
		// Update ports indexes
		
	}
2002c94c:	e9e10000 	lwi	r15, r1, 0
2002c950:	10330000 	addk	r1, r19, r0
2002c954:	ea610020 	lwi	r19, r1, 32
2002c958:	ea810024 	lwi	r20, r1, 36
2002c95c:	30210028 	addik	r1, r1, 40
2002c960:	b60f0008 	rtsd	r15, 8
2002c964:	80000000 	or	r0, r0, r0

2002c968 <isSchedulable_byte_align_a>:
	static i32 isSchedulable_byte_align_a() {
2002c968:	3021ffe8 	addik	r1, r1, -24
2002c96c:	fa610010 	swi	r19, r1, 16
2002c970:	fa810014 	swi	r20, r1, 20
2002c974:	12610000 	addk	r19, r1, r0
2002c978:	96808000 	mfs	r20, rpc
2002c97c:	b000dffd 	imm	-8195
2002c980:	32944fe4 	addik	r20, r20, 20452
		i32 result;
		u8 local_FIFO_CPT_BITS;
		u16 tmp_fifo;
		u8 local_FIFO_SIZE;
	
		local_FIFO_CPT_BITS = BitstreamReadUtils_FIFO_CPT_BITS;
2002c984:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002c988:	f0730004 	sbi	r3, r19, 4
		tmp_fifo = fifo[local_FIFO_CPT_BITS];
2002c98c:	e0730004 	lbui	r3, r19, 4
2002c990:	b0000000 	imm	0
2002c994:	e89405c8 	lwi	r4, r20, 1480
2002c998:	10631800 	addk	r3, r3, r3
2002c99c:	10641800 	addk	r3, r4, r3
2002c9a0:	e4630000 	lhui	r3, r3, 0
2002c9a4:	f4730006 	shi	r3, r19, 6
		local_FIFO_SIZE = BitstreamReadUtils_FIFO_SIZE;
2002c9a8:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2002c9ac:	f0730008 	sbi	r3, r19, 8
		result = tmp_fifo >= (local_FIFO_SIZE - 1) << 3;
2002c9b0:	e4b30006 	lhui	r5, r19, 6
2002c9b4:	e0730008 	lbui	r3, r19, 8
2002c9b8:	3063ffff 	addik	r3, r3, -1
2002c9bc:	64830403 	bslli	r4, r3, 3
2002c9c0:	30600001 	addik	r3, r0, 1
2002c9c4:	16442801 	cmp	r18, r4, r5
2002c9c8:	bcb20008 	bgei	r18, 8		// 2002c9d0
2002c9cc:	10600000 	addk	r3, r0, r0
2002c9d0:	a46300ff 	andi	r3, r3, 255
2002c9d4:	f873000c 	swi	r3, r19, 12
		return result;
2002c9d8:	e873000c 	lwi	r3, r19, 12
	}
2002c9dc:	10330000 	addk	r1, r19, r0
2002c9e0:	ea610010 	lwi	r19, r1, 16
2002c9e4:	ea810014 	lwi	r20, r1, 20
2002c9e8:	30210018 	addik	r1, r1, 24
2002c9ec:	b60f0008 	rtsd	r15, 8
2002c9f0:	80000000 	or	r0, r0, r0

2002c9f4 <byte_align_a>:
	
	static void byte_align_a() {
2002c9f4:	3021ffdc 	addik	r1, r1, -36
2002c9f8:	f9e10000 	swi	r15, r1, 0
2002c9fc:	fa61001c 	swi	r19, r1, 28
2002ca00:	fa810020 	swi	r20, r1, 32
2002ca04:	12610000 	addk	r19, r1, r0
2002ca08:	96808000 	mfs	r20, rpc
2002ca0c:	b000dffd 	imm	-8195
2002ca10:	32944f54 	addik	r20, r20, 20308
	
		// Compute aligned port indexes
	
	
		BitstreamReadUtils_byte_align(fifo);
2002ca14:	b0000000 	imm	0
2002ca18:	e8b405c8 	lwi	r5, r20, 1480
2002ca1c:	b0000000 	imm	0
2002ca20:	e87406e0 	lwi	r3, r20, 1760
2002ca24:	99fc1800 	brald	r15, r3
2002ca28:	80000000 	or	r0, r0, r0
	
		// Update ports indexes
		
	}
2002ca2c:	e9e10000 	lwi	r15, r1, 0
2002ca30:	10330000 	addk	r1, r19, r0
2002ca34:	ea61001c 	lwi	r19, r1, 28
2002ca38:	ea810020 	lwi	r20, r1, 32
2002ca3c:	30210024 	addik	r1, r1, 36
2002ca40:	b60f0008 	rtsd	r15, 8
2002ca44:	80000000 	or	r0, r0, r0

2002ca48 <isSchedulable_undefined>:
	static i32 isSchedulable_undefined() {
2002ca48:	3021ffec 	addik	r1, r1, -20
2002ca4c:	fa61000c 	swi	r19, r1, 12
2002ca50:	fa810010 	swi	r20, r1, 16
2002ca54:	12610000 	addk	r19, r1, r0
2002ca58:	96808000 	mfs	r20, rpc
2002ca5c:	b000dffd 	imm	-8195
2002ca60:	32944f04 	addik	r20, r20, 20228
		i32 result;
		i32 local_actorNotFinished;
	
		local_actorNotFinished = actorNotFinished;
2002ca64:	b0000000 	imm	0
2002ca68:	e874064c 	lwi	r3, r20, 1612
2002ca6c:	e8630000 	lwi	r3, r3, 0
2002ca70:	f8730004 	swi	r3, r19, 4
		result = local_actorNotFinished;
2002ca74:	e8730004 	lwi	r3, r19, 4
2002ca78:	f8730008 	swi	r3, r19, 8
		return result;
2002ca7c:	e8730008 	lwi	r3, r19, 8
	}
2002ca80:	10330000 	addk	r1, r19, r0
2002ca84:	ea61000c 	lwi	r19, r1, 12
2002ca88:	ea810010 	lwi	r20, r1, 16
2002ca8c:	30210014 	addik	r1, r1, 20
2002ca90:	b60f0008 	rtsd	r15, 8
2002ca94:	80000000 	or	r0, r0, r0

2002ca98 <undefined>:
	
	static void undefined() {
2002ca98:	3021fff4 	addik	r1, r1, -12
2002ca9c:	fa610004 	swi	r19, r1, 4
2002caa0:	fa810008 	swi	r20, r1, 8
2002caa4:	12610000 	addk	r19, r1, r0
2002caa8:	96808000 	mfs	r20, rpc
2002caac:	b000dffd 	imm	-8195
2002cab0:	32944eb4 	addik	r20, r20, 20148
	
		// Compute aligned port indexes
	
	
		actorNotFinished = 0;
2002cab4:	b0000000 	imm	0
2002cab8:	e874064c 	lwi	r3, r20, 1612
2002cabc:	f8030000 	swi	r0, r3, 0
	
		// Update ports indexes
		
	}
2002cac0:	10330000 	addk	r1, r19, r0
2002cac4:	ea610004 	lwi	r19, r1, 4
2002cac8:	ea810008 	lwi	r20, r1, 8
2002cacc:	3021000c 	addik	r1, r1, 12
2002cad0:	b60f0008 	rtsd	r15, 8
2002cad4:	80000000 	or	r0, r0, r0

2002cad8 <decoder_parser_parseheaders_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_parser_parseheaders_initialize() {
2002cad8:	3021fff0 	addik	r1, r1, -16
2002cadc:	fa610008 	swi	r19, r1, 8
2002cae0:	fa81000c 	swi	r20, r1, 12
2002cae4:	12610000 	addk	r19, r1, r0
2002cae8:	96808000 	mfs	r20, rpc
2002caec:	b000dffd 	imm	-8195
2002caf0:	32944e74 	addik	r20, r20, 20084
		int i = 0;
2002caf4:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_look_for_Sequence_Header;
2002caf8:	b0000000 	imm	0
2002cafc:	e8740654 	lwi	r3, r20, 1620
2002cb00:	30800002 	addik	r4, r0, 2
2002cb04:	f8830000 	swi	r4, r3, 0
		
	finished:
		// no read_end/write_end here!
		return;
2002cb08:	80000000 	or	r0, r0, r0
	}
2002cb0c:	10330000 	addk	r1, r19, r0
2002cb10:	ea610008 	lwi	r19, r1, 8
2002cb14:	ea81000c 	lwi	r20, r1, 12
2002cb18:	30210010 	addik	r1, r1, 16
2002cb1c:	b60f0008 	rtsd	r15, 8
2002cb20:	80000000 	or	r0, r0, r0

2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	int decoder_parser_parseheaders_outside_FSM_scheduler() {
2002cb24:	3021ffd4 	addik	r1, r1, -44
2002cb28:	f9e10000 	swi	r15, r1, 0
2002cb2c:	fa610024 	swi	r19, r1, 36
2002cb30:	fa810028 	swi	r20, r1, 40
2002cb34:	12610000 	addk	r19, r1, r0
2002cb38:	96808000 	mfs	r20, rpc
2002cb3c:	b000dffd 	imm	-8195
2002cb40:	32944e24 	addik	r20, r20, 20004
		int i = 0;
2002cb44:	f813001c 	swi	r0, r19, 28
		while (1) {
			// Action loop
			if (numTokens_BYTE - index_BYTE >= 1 && isSchedulable_untagged_0()) {
2002cb48:	b0000000 	imm	0
2002cb4c:	e874055c 	lwi	r3, r20, 1372
2002cb50:	e8830000 	lwi	r4, r3, 0
2002cb54:	b0000000 	imm	0
2002cb58:	e8740558 	lwi	r3, r20, 1368
2002cb5c:	e8630000 	lwi	r3, r3, 0
2002cb60:	88641800 	xor	r3, r4, r3
2002cb64:	bc030048 	beqi	r3, 72		// 2002cbac
2002cb68:	b0000000 	imm	0
2002cb6c:	e89406e8 	lwi	r4, r20, 1768
2002cb70:	99fc2000 	brald	r15, r4
2002cb74:	80000000 	or	r0, r0, r0
2002cb78:	bc030034 	beqi	r3, 52		// 2002cbac
				int stop = 0;
2002cb7c:	f8130020 	swi	r0, r19, 32
				if (stop != 0) {
2002cb80:	e8730020 	lwi	r3, r19, 32
2002cb84:	bc030008 	beqi	r3, 8		// 2002cb8c
					goto finished;
2002cb88:	b8000024 	bri	36		// 2002cbac
				}
				untagged_0();
2002cb8c:	b0000000 	imm	0
2002cb90:	e87406ec 	lwi	r3, r20, 1772
2002cb94:	99fc1800 	brald	r15, r3
2002cb98:	80000000 	or	r0, r0, r0
				i++;
2002cb9c:	e873001c 	lwi	r3, r19, 28
2002cba0:	30630001 	addik	r3, r3, 1
2002cba4:	f873001c 	swi	r3, r19, 28
			} else {
				goto finished;
			}
		}
2002cba8:	b800ffa0 	bri	-96		// 2002cb48
	finished:
		// no read_end/write_end here!
		return i;
2002cbac:	e873001c 	lwi	r3, r19, 28
	}
2002cbb0:	e9e10000 	lwi	r15, r1, 0
2002cbb4:	10330000 	addk	r1, r19, r0
2002cbb8:	ea610024 	lwi	r19, r1, 36
2002cbbc:	ea810028 	lwi	r20, r1, 40
2002cbc0:	3021002c 	addik	r1, r1, 44
2002cbc4:	b60f0008 	rtsd	r15, 8
2002cbc8:	80000000 	or	r0, r0, r0

2002cbcc <decoder_parser_parseheaders_scheduler>:
	
	int decoder_parser_parseheaders_scheduler() {
2002cbcc:	3021ff4c 	addik	r1, r1, -180
2002cbd0:	f9e10000 	swi	r15, r1, 0
2002cbd4:	fa6100ac 	swi	r19, r1, 172
2002cbd8:	fa8100b0 	swi	r20, r1, 176
2002cbdc:	12610000 	addk	r19, r1, r0
2002cbe0:	96808000 	mfs	r20, rpc
2002cbe4:	b000dffd 	imm	-8195
2002cbe8:	32944d7c 	addik	r20, r20, 19836
		int i = 0;
2002cbec:	f813001c 	swi	r0, r19, 28
		if(needInit){
2002cbf0:	b0000000 	imm	0
2002cbf4:	e8740650 	lwi	r3, r20, 1616
2002cbf8:	e0630000 	lbui	r3, r3, 0
2002cbfc:	bc03001c 	beqi	r3, 28		// 2002cc18
			decoder_parser_parseheaders_initialize();
2002cc00:	b000ffff 	imm	-1
2002cc04:	b9f4fed4 	brlid	r15, -300	// 2002cad8 <decoder_parser_parseheaders_initialize>
2002cc08:	80000000 	or	r0, r0, r0
			needInit = 0;
2002cc0c:	b0000000 	imm	0
2002cc10:	e8740650 	lwi	r3, r20, 1616
2002cc14:	f0030000 	sbi	r0, r3, 0
		}
	
		read_BYTE();
2002cc18:	b0000000 	imm	0
2002cc1c:	e8740658 	lwi	r3, r20, 1624
2002cc20:	99fc1800 	brald	r15, r3
2002cc24:	80000000 	or	r0, r0, r0
		write_BTYPE();
2002cc28:	b0000000 	imm	0
2002cc2c:	e8940660 	lwi	r4, r20, 1632
2002cc30:	99fc2000 	brald	r15, r4
2002cc34:	80000000 	or	r0, r0, r0
		write_MV();
2002cc38:	b0000000 	imm	0
2002cc3c:	e8740668 	lwi	r3, r20, 1640
2002cc40:	99fc1800 	brald	r15, r3
2002cc44:	80000000 	or	r0, r0, r0
		write_RUN();
2002cc48:	b0000000 	imm	0
2002cc4c:	e8940670 	lwi	r4, r20, 1648
2002cc50:	99fc2000 	brald	r15, r4
2002cc54:	80000000 	or	r0, r0, r0
		write_VALUE();
2002cc58:	b0000000 	imm	0
2002cc5c:	e8740678 	lwi	r3, r20, 1656
2002cc60:	99fc1800 	brald	r15, r3
2002cc64:	80000000 	or	r0, r0, r0
		write_LAST();
2002cc68:	b0000000 	imm	0
2002cc6c:	e8940680 	lwi	r4, r20, 1664
2002cc70:	99fc2000 	brald	r15, r4
2002cc74:	80000000 	or	r0, r0, r0
		write_WIDTH();
2002cc78:	b0000000 	imm	0
2002cc7c:	e8740688 	lwi	r3, r20, 1672
2002cc80:	99fc1800 	brald	r15, r3
2002cc84:	80000000 	or	r0, r0, r0
		write_HEIGHT();
2002cc88:	b0000000 	imm	0
2002cc8c:	e8940690 	lwi	r4, r20, 1680
2002cc90:	99fc2000 	brald	r15, r4
2002cc94:	80000000 	or	r0, r0, r0
		write_QP();
2002cc98:	b0000000 	imm	0
2002cc9c:	e8740698 	lwi	r3, r20, 1688
2002cca0:	99fc1800 	brald	r15, r3
2002cca4:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
2002cca8:	b0000000 	imm	0
2002ccac:	e8740654 	lwi	r3, r20, 1620
2002ccb0:	e8630000 	lwi	r3, r3, 0
2002ccb4:	30800014 	addik	r4, r0, 20
2002ccb8:	16432003 	cmpu	r18, r3, r4
2002ccbc:	bc520020 	blti	r18, 32		// 2002ccdc
2002ccc0:	64830402 	bslli	r4, r3, 2
2002ccc4:	b0000000 	imm	0
2002ccc8:	e87408e0 	lwi	r3, r20, 2272
2002cccc:	10641800 	addk	r3, r4, r3
2002ccd0:	e8630000 	lwi	r3, r3, 0
2002ccd4:	1063a000 	addk	r3, r3, r20
2002ccd8:	98081800 	bra	r3
		case my_state_search_start_code:
			goto l_search_start_code;
		case my_state_undefined:
			goto l_undefined;
		default:
			exit(1);
2002ccdc:	30a00001 	addik	r5, r0, 1
2002cce0:	b000dffd 	imm	-8195
2002cce4:	b9f436b4 	brlid	r15, 14004	// 398 <exit>
2002cce8:	80000000 	or	r0, r0, r0

2002ccec <$L663>:
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_byte_align_a:
			goto l_byte_align_a;
2002ccec:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_byte_align_a:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002ccf0:	b000ffff 	imm	-1
2002ccf4:	b9f4fe30 	brlid	r15, -464	// 2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002ccf8:	80000000 	or	r0, r0, r0
2002ccfc:	e893001c 	lwi	r4, r19, 28
2002cd00:	10641800 	addk	r3, r4, r3
2002cd04:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_byte_align_a()) {
2002cd08:	b0000000 	imm	0
2002cd0c:	e89407f0 	lwi	r4, r20, 2032
2002cd10:	99fc2000 	brald	r15, r4
2002cd14:	80000000 	or	r0, r0, r0
2002cd18:	bc030040 	beqi	r3, 64		// 2002cd58
				int stop = 0;
2002cd1c:	f8130040 	swi	r0, r19, 64
				if (stop != 0) {
2002cd20:	e8730040 	lwi	r3, r19, 64
2002cd24:	bc030014 	beqi	r3, 20		// 2002cd38
					_FSM_state = my_state_byte_align_a;
2002cd28:	b0000000 	imm	0
2002cd2c:	e8740654 	lwi	r3, r20, 1620
2002cd30:	f8030000 	swi	r0, r3, 0
					goto finished;
2002cd34:	b80018ac 	bri	6316		// 2002e5e0
				}
				byte_align_a();
2002cd38:	b0000000 	imm	0
2002cd3c:	e87407f4 	lwi	r3, r20, 2036
2002cd40:	99fc1800 	brald	r15, r3
2002cd44:	80000000 	or	r0, r0, r0
				i++;
2002cd48:	e873001c 	lwi	r3, r19, 28
2002cd4c:	30630001 	addik	r3, r3, 1
2002cd50:	f873001c 	swi	r3, r19, 28
				goto l_search_start_code;
2002cd54:	b8001734 	bri	5940		// 2002e488
			} else {
				_FSM_state = my_state_byte_align_a;
2002cd58:	b0000000 	imm	0
2002cd5c:	e8740654 	lwi	r3, r20, 1620
2002cd60:	f8030000 	swi	r0, r3, 0
				goto finished;
2002cd64:	b800187c 	bri	6268		// 2002e5e0

2002cd68 <$L664>:
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_byte_align_a:
			goto l_byte_align_a;
		case my_state_find_header:
			goto l_find_header;
2002cd68:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_byte_align_a;
				goto finished;
			}
		l_find_header:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002cd6c:	b000ffff 	imm	-1
2002cd70:	b9f4fdb4 	brlid	r15, -588	// 2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002cd74:	80000000 	or	r0, r0, r0
2002cd78:	e893001c 	lwi	r4, r19, 28
2002cd7c:	10641800 	addk	r3, r4, r3
2002cd80:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_look_for_vol()) {
2002cd84:	b0000000 	imm	0
2002cd88:	e8940708 	lwi	r4, r20, 1800
2002cd8c:	99fc2000 	brald	r15, r4
2002cd90:	80000000 	or	r0, r0, r0
2002cd94:	bc030044 	beqi	r3, 68		// 2002cdd8
				int stop = 0;
2002cd98:	f8130050 	swi	r0, r19, 80
				if (stop != 0) {
2002cd9c:	e8730050 	lwi	r3, r19, 80
2002cda0:	bc030018 	beqi	r3, 24		// 2002cdb8
					_FSM_state = my_state_find_header;
2002cda4:	b0000000 	imm	0
2002cda8:	e8740654 	lwi	r3, r20, 1620
2002cdac:	30800001 	addik	r4, r0, 1
2002cdb0:	f8830000 	swi	r4, r3, 0
					goto finished;
2002cdb4:	b800182c 	bri	6188		// 2002e5e0
				}
				look_for_vol();
2002cdb8:	b0000000 	imm	0
2002cdbc:	e874070c 	lwi	r3, r20, 1804
2002cdc0:	99fc1800 	brald	r15, r3
2002cdc4:	80000000 	or	r0, r0, r0
				i++;
2002cdc8:	e873001c 	lwi	r3, r19, 28
2002cdcc:	30630001 	addik	r3, r3, 1
2002cdd0:	f873001c 	swi	r3, r19, 28
				goto l_read_vol;
2002cdd4:	b8001008 	bri	4104		// 2002dddc
			} else if (isSchedulable_look_for_vop()) {
2002cdd8:	b0000000 	imm	0
2002cddc:	e8940710 	lwi	r4, r20, 1808
2002cde0:	99fc2000 	brald	r15, r4
2002cde4:	80000000 	or	r0, r0, r0
2002cde8:	bc030044 	beqi	r3, 68		// 2002ce2c
				int stop = 0;
2002cdec:	f8130054 	swi	r0, r19, 84
				if (stop != 0) {
2002cdf0:	e8730054 	lwi	r3, r19, 84
2002cdf4:	bc030018 	beqi	r3, 24		// 2002ce0c
					_FSM_state = my_state_find_header;
2002cdf8:	b0000000 	imm	0
2002cdfc:	e8740654 	lwi	r3, r20, 1620
2002ce00:	30800001 	addik	r4, r0, 1
2002ce04:	f8830000 	swi	r4, r3, 0
					goto finished;
2002ce08:	b80017d8 	bri	6104		// 2002e5e0
				}
				look_for_vop();
2002ce0c:	b0000000 	imm	0
2002ce10:	e8740714 	lwi	r3, r20, 1812
2002ce14:	99fc1800 	brald	r15, r3
2002ce18:	80000000 	or	r0, r0, r0
				i++;
2002ce1c:	e873001c 	lwi	r3, r19, 28
2002ce20:	30630001 	addik	r3, r3, 1
2002ce24:	f873001c 	swi	r3, r19, 28
				goto l_read_vop;
2002ce28:	b8001248 	bri	4680		// 2002e070
			} else if (isSchedulable_look_for_other_header()) {
2002ce2c:	b0000000 	imm	0
2002ce30:	e8940700 	lwi	r4, r20, 1792
2002ce34:	99fc2000 	brald	r15, r4
2002ce38:	80000000 	or	r0, r0, r0
2002ce3c:	bc030044 	beqi	r3, 68		// 2002ce80
				int stop = 0;
2002ce40:	f8130058 	swi	r0, r19, 88
				if (stop != 0) {
2002ce44:	e8730058 	lwi	r3, r19, 88
2002ce48:	bc030018 	beqi	r3, 24		// 2002ce60
					_FSM_state = my_state_find_header;
2002ce4c:	b0000000 	imm	0
2002ce50:	e8740654 	lwi	r3, r20, 1620
2002ce54:	30800001 	addik	r4, r0, 1
2002ce58:	f8830000 	swi	r4, r3, 0
					goto finished;
2002ce5c:	b8001784 	bri	6020		// 2002e5e0
				}
				look_for_other_header();
2002ce60:	b0000000 	imm	0
2002ce64:	e8740704 	lwi	r3, r20, 1796
2002ce68:	99fc1800 	brald	r15, r3
2002ce6c:	80000000 	or	r0, r0, r0
				i++;
2002ce70:	e873001c 	lwi	r3, r19, 28
2002ce74:	30630001 	addik	r3, r3, 1
2002ce78:	f873001c 	swi	r3, r19, 28
				goto l_look_for_Sequence_Header;
2002ce7c:	b800001c 	bri	28		// 2002ce98
			} else {
				_FSM_state = my_state_find_header;
2002ce80:	b0000000 	imm	0
2002ce84:	e8740654 	lwi	r3, r20, 1620
2002ce88:	30800001 	addik	r4, r0, 1
2002ce8c:	f8830000 	swi	r4, r3, 0
				goto finished;
2002ce90:	b8001750 	bri	5968		// 2002e5e0

2002ce94 <$L665>:
		case my_state_byte_align_a:
			goto l_byte_align_a;
		case my_state_find_header:
			goto l_find_header;
		case my_state_look_for_Sequence_Header:
			goto l_look_for_Sequence_Header;
2002ce94:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_find_header;
				goto finished;
			}
		l_look_for_Sequence_Header:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002ce98:	b000ffff 	imm	-1
2002ce9c:	b9f4fc88 	brlid	r15, -888	// 2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002cea0:	80000000 	or	r0, r0, r0
2002cea4:	e893001c 	lwi	r4, r19, 28
2002cea8:	10641800 	addk	r3, r4, r3
2002ceac:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_look_for_Sequence_Header()) {
2002ceb0:	b0000000 	imm	0
2002ceb4:	e89406f0 	lwi	r4, r20, 1776
2002ceb8:	99fc2000 	brald	r15, r4
2002cebc:	80000000 	or	r0, r0, r0
2002cec0:	bc030044 	beqi	r3, 68		// 2002cf04
				int stop = 0;
2002cec4:	f813008c 	swi	r0, r19, 140
				if (stop != 0) {
2002cec8:	e873008c 	lwi	r3, r19, 140
2002cecc:	bc030018 	beqi	r3, 24		// 2002cee4
					_FSM_state = my_state_look_for_Sequence_Header;
2002ced0:	b0000000 	imm	0
2002ced4:	e8740654 	lwi	r3, r20, 1620
2002ced8:	30800002 	addik	r4, r0, 2
2002cedc:	f8830000 	swi	r4, r3, 0
					goto finished;
2002cee0:	b8001700 	bri	5888		// 2002e5e0
				}
				look_for_Sequence_Header();
2002cee4:	b0000000 	imm	0
2002cee8:	e87406f4 	lwi	r3, r20, 1780
2002ceec:	99fc1800 	brald	r15, r3
2002cef0:	80000000 	or	r0, r0, r0
				i++;
2002cef4:	e873001c 	lwi	r3, r19, 28
2002cef8:	30630001 	addik	r3, r3, 1
2002cefc:	f873001c 	swi	r3, r19, 28
				goto l_byte_align_a;
2002cf00:	b800fdf0 	bri	-528		// 2002ccf0
			} else {
				_FSM_state = my_state_look_for_Sequence_Header;
2002cf04:	b0000000 	imm	0
2002cf08:	e8740654 	lwi	r3, r20, 1620
2002cf0c:	30800002 	addik	r4, r0, 2
2002cf10:	f8830000 	swi	r4, r3, 0
				goto finished;
2002cf14:	b80016cc 	bri	5836		// 2002e5e0

2002cf18 <$L666>:
		case my_state_find_header:
			goto l_find_header;
		case my_state_look_for_Sequence_Header:
			goto l_look_for_Sequence_Header;
		case my_state_read_block:
			goto l_read_block;
2002cf18:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_look_for_Sequence_Header;
				goto finished;
			}
		l_read_block:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002cf1c:	b000ffff 	imm	-1
2002cf20:	b9f4fc04 	brlid	r15, -1020	// 2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002cf24:	80000000 	or	r0, r0, r0
2002cf28:	e893001c 	lwi	r4, r19, 28
2002cf2c:	10641800 	addk	r3, r4, r3
2002cf30:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_block_done()) {
2002cf34:	b0000000 	imm	0
2002cf38:	e8940780 	lwi	r4, r20, 1920
2002cf3c:	99fc2000 	brald	r15, r4
2002cf40:	80000000 	or	r0, r0, r0
2002cf44:	bc030044 	beqi	r3, 68		// 2002cf88
				int stop = 0;
2002cf48:	f813009c 	swi	r0, r19, 156
				if (stop != 0) {
2002cf4c:	e873009c 	lwi	r3, r19, 156
2002cf50:	bc030018 	beqi	r3, 24		// 2002cf68
					_FSM_state = my_state_read_block;
2002cf54:	b0000000 	imm	0
2002cf58:	e8740654 	lwi	r3, r20, 1620
2002cf5c:	30800003 	addik	r4, r0, 3
2002cf60:	f8830000 	swi	r4, r3, 0
					goto finished;
2002cf64:	b800167c 	bri	5756		// 2002e5e0
				}
				read_block_done();
2002cf68:	b0000000 	imm	0
2002cf6c:	e8740784 	lwi	r3, r20, 1924
2002cf70:	99fc1800 	brald	r15, r3
2002cf74:	80000000 	or	r0, r0, r0
				i++;
2002cf78:	e873001c 	lwi	r3, r19, 28
2002cf7c:	30630001 	addik	r3, r3, 1
2002cf80:	f873001c 	swi	r3, r19, 28
				goto l_read_mb;
2002cf84:	b8000904 	bri	2308		// 2002d888
			} else if (isSchedulable_read_block_start()) {
2002cf88:	b0000000 	imm	0
2002cf8c:	e8940778 	lwi	r4, r20, 1912
2002cf90:	99fc2000 	brald	r15, r4
2002cf94:	80000000 	or	r0, r0, r0
2002cf98:	bc030044 	beqi	r3, 68		// 2002cfdc
				int stop = 0;
2002cf9c:	f81300a0 	swi	r0, r19, 160
				if (stop != 0) {
2002cfa0:	e87300a0 	lwi	r3, r19, 160
2002cfa4:	bc030018 	beqi	r3, 24		// 2002cfbc
					_FSM_state = my_state_read_block;
2002cfa8:	b0000000 	imm	0
2002cfac:	e8740654 	lwi	r3, r20, 1620
2002cfb0:	30800003 	addik	r4, r0, 3
2002cfb4:	f8830000 	swi	r4, r3, 0
					goto finished;
2002cfb8:	b8001628 	bri	5672		// 2002e5e0
				}
				read_block_start();
2002cfbc:	b0000000 	imm	0
2002cfc0:	e874077c 	lwi	r3, r20, 1916
2002cfc4:	99fc1800 	brald	r15, r3
2002cfc8:	80000000 	or	r0, r0, r0
				i++;
2002cfcc:	e873001c 	lwi	r3, r19, 28
2002cfd0:	30630001 	addik	r3, r3, 1
2002cfd4:	f873001c 	swi	r3, r19, 28
				goto l_read_block_dc;
2002cfd8:	b8000268 	bri	616		// 2002d240
			} else {
				_FSM_state = my_state_read_block;
2002cfdc:	b0000000 	imm	0
2002cfe0:	e8740654 	lwi	r3, r20, 1620
2002cfe4:	30800003 	addik	r4, r0, 3
2002cfe8:	f8830000 	swi	r4, r3, 0
				goto finished;
2002cfec:	b80015f4 	bri	5620		// 2002e5e0

2002cff0 <$L667>:
		case my_state_look_for_Sequence_Header:
			goto l_look_for_Sequence_Header;
		case my_state_read_block:
			goto l_read_block;
		case my_state_read_block_coeff:
			goto l_read_block_coeff;
2002cff0:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_block;
				goto finished;
			}
		l_read_block_coeff:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002cff4:	b000ffff 	imm	-1
2002cff8:	b9f4fb2c 	brlid	r15, -1236	// 2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002cffc:	80000000 	or	r0, r0, r0
2002d000:	e893001c 	lwi	r4, r19, 28
2002d004:	10641800 	addk	r3, r4, r3
2002d008:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_block_coeff_done()) {
2002d00c:	b0000000 	imm	0
2002d010:	e89407b8 	lwi	r4, r20, 1976
2002d014:	99fc2000 	brald	r15, r4
2002d018:	80000000 	or	r0, r0, r0
2002d01c:	bc030044 	beqi	r3, 68		// 2002d060
				int stop = 0;
2002d020:	f8130080 	swi	r0, r19, 128
				if (stop != 0) {
2002d024:	e8730080 	lwi	r3, r19, 128
2002d028:	bc030018 	beqi	r3, 24		// 2002d040
					_FSM_state = my_state_read_block_coeff;
2002d02c:	b0000000 	imm	0
2002d030:	e8740654 	lwi	r3, r20, 1620
2002d034:	30800004 	addik	r4, r0, 4
2002d038:	f8830000 	swi	r4, r3, 0
					goto finished;
2002d03c:	b80015a4 	bri	5540		// 2002e5e0
				}
				read_block_coeff_done();
2002d040:	b0000000 	imm	0
2002d044:	e87407bc 	lwi	r3, r20, 1980
2002d048:	99fc1800 	brald	r15, r3
2002d04c:	80000000 	or	r0, r0, r0
				i++;
2002d050:	e873001c 	lwi	r3, r19, 28
2002d054:	30630001 	addik	r3, r3, 1
2002d058:	f873001c 	swi	r3, r19, 28
				goto l_read_block;
2002d05c:	b800fec0 	bri	-320		// 2002cf1c
			} else if (isSchedulable_read_block_coeff()) {
2002d060:	b0000000 	imm	0
2002d064:	e89407b0 	lwi	r4, r20, 1968
2002d068:	99fc2000 	brald	r15, r4
2002d06c:	80000000 	or	r0, r0, r0
2002d070:	bc0300e0 	beqi	r3, 224		// 2002d150
				int stop = 0;
2002d074:	f8130020 	swi	r0, r19, 32
				if (1 > SIZE_RUN - index_RUN + decoder_parser_parseheaders_RUN->read_inds[0]) {
2002d078:	b0000000 	imm	0
2002d07c:	e8740540 	lwi	r3, r20, 1344
2002d080:	e8630000 	lwi	r3, r3, 0
2002d084:	e863000c 	lwi	r3, r3, 12
2002d088:	e8830000 	lwi	r4, r3, 0
2002d08c:	b0000000 	imm	0
2002d090:	e8740570 	lwi	r3, r20, 1392
2002d094:	e8630000 	lwi	r3, r3, 0
2002d098:	14632000 	rsubk	r3, r3, r4
2002d09c:	a863fe00 	xori	r3, r3, -512
2002d0a0:	bc23000c 	bnei	r3, 12		// 2002d0ac
					stop = 1;
2002d0a4:	30600001 	addik	r3, r0, 1
2002d0a8:	f8730020 	swi	r3, r19, 32
				}
				if (1 > SIZE_VALUE - index_VALUE + decoder_parser_parseheaders_VALUE->read_inds[0]) {
2002d0ac:	b0000000 	imm	0
2002d0b0:	e8740554 	lwi	r3, r20, 1364
2002d0b4:	e8630000 	lwi	r3, r3, 0
2002d0b8:	e863000c 	lwi	r3, r3, 12
2002d0bc:	e8830000 	lwi	r4, r3, 0
2002d0c0:	b0000000 	imm	0
2002d0c4:	e8740578 	lwi	r3, r20, 1400
2002d0c8:	e8630000 	lwi	r3, r3, 0
2002d0cc:	14632000 	rsubk	r3, r3, r4
2002d0d0:	a863fe00 	xori	r3, r3, -512
2002d0d4:	bc23000c 	bnei	r3, 12		// 2002d0e0
					stop = 1;
2002d0d8:	30600001 	addik	r3, r0, 1
2002d0dc:	f8730020 	swi	r3, r19, 32
				}
				if (1 > SIZE_LAST - index_LAST + decoder_parser_parseheaders_LAST->read_inds[0]) {
2002d0e0:	b0000000 	imm	0
2002d0e4:	e874054c 	lwi	r3, r20, 1356
2002d0e8:	e8630000 	lwi	r3, r3, 0
2002d0ec:	e863000c 	lwi	r3, r3, 12
2002d0f0:	e8830000 	lwi	r4, r3, 0
2002d0f4:	b0000000 	imm	0
2002d0f8:	e8740580 	lwi	r3, r20, 1408
2002d0fc:	e8630000 	lwi	r3, r3, 0
2002d100:	14632000 	rsubk	r3, r3, r4
2002d104:	a863fe00 	xori	r3, r3, -512
2002d108:	bc23000c 	bnei	r3, 12		// 2002d114
					stop = 1;
2002d10c:	30600001 	addik	r3, r0, 1
2002d110:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
2002d114:	e8730020 	lwi	r3, r19, 32
2002d118:	bc030018 	beqi	r3, 24		// 2002d130
					_FSM_state = my_state_read_block_coeff;
2002d11c:	b0000000 	imm	0
2002d120:	e8740654 	lwi	r3, r20, 1620
2002d124:	30800004 	addik	r4, r0, 4
2002d128:	f8830000 	swi	r4, r3, 0
					goto finished;
2002d12c:	b80014b4 	bri	5300		// 2002e5e0
				}
				read_block_coeff();
2002d130:	b0000000 	imm	0
2002d134:	e87407b4 	lwi	r3, r20, 1972
2002d138:	99fc1800 	brald	r15, r3
2002d13c:	80000000 	or	r0, r0, r0
				i++;
2002d140:	e873001c 	lwi	r3, r19, 28
2002d144:	30630001 	addik	r3, r3, 1
2002d148:	f873001c 	swi	r3, r19, 28
				goto l_read_block_coeff;
2002d14c:	b800fea8 	bri	-344		// 2002cff4
			} else {
				_FSM_state = my_state_read_block_coeff;
2002d150:	b0000000 	imm	0
2002d154:	e8740654 	lwi	r3, r20, 1620
2002d158:	30800004 	addik	r4, r0, 4
2002d15c:	f8830000 	swi	r4, r3, 0
				goto finished;
2002d160:	b8001480 	bri	5248		// 2002e5e0

2002d164 <$L668>:
		case my_state_read_block:
			goto l_read_block;
		case my_state_read_block_coeff:
			goto l_read_block_coeff;
		case my_state_read_block_coeff_ac:
			goto l_read_block_coeff_ac;
2002d164:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_block_coeff;
				goto finished;
			}
		l_read_block_coeff_ac:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002d168:	b000ffff 	imm	-1
2002d16c:	b9f4f9b8 	brlid	r15, -1608	// 2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002d170:	80000000 	or	r0, r0, r0
2002d174:	e893001c 	lwi	r4, r19, 28
2002d178:	10641800 	addk	r3, r4, r3
2002d17c:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_block_coeff_ac()) {
2002d180:	b0000000 	imm	0
2002d184:	e89407a0 	lwi	r4, r20, 1952
2002d188:	99fc2000 	brald	r15, r4
2002d18c:	80000000 	or	r0, r0, r0
2002d190:	bc030044 	beqi	r3, 68		// 2002d1d4
				int stop = 0;
2002d194:	f81300a4 	swi	r0, r19, 164
				if (stop != 0) {
2002d198:	e87300a4 	lwi	r3, r19, 164
2002d19c:	bc030018 	beqi	r3, 24		// 2002d1b4
					_FSM_state = my_state_read_block_coeff_ac;
2002d1a0:	b0000000 	imm	0
2002d1a4:	e8740654 	lwi	r3, r20, 1620
2002d1a8:	30800005 	addik	r4, r0, 5
2002d1ac:	f8830000 	swi	r4, r3, 0
					goto finished;
2002d1b0:	b8001430 	bri	5168		// 2002e5e0
				}
				read_block_coeff_ac();
2002d1b4:	b0000000 	imm	0
2002d1b8:	e87407a4 	lwi	r3, r20, 1956
2002d1bc:	99fc1800 	brald	r15, r3
2002d1c0:	80000000 	or	r0, r0, r0
				i++;
2002d1c4:	e873001c 	lwi	r3, r19, 28
2002d1c8:	30630001 	addik	r3, r3, 1
2002d1cc:	f873001c 	swi	r3, r19, 28
				goto l_read_block_coeff;
2002d1d0:	b800fe24 	bri	-476		// 2002cff4
			} else if (isSchedulable_read_block_coeff_noac()) {
2002d1d4:	b0000000 	imm	0
2002d1d8:	e89407a8 	lwi	r4, r20, 1960
2002d1dc:	99fc2000 	brald	r15, r4
2002d1e0:	80000000 	or	r0, r0, r0
2002d1e4:	bc030044 	beqi	r3, 68		// 2002d228
				int stop = 0;
2002d1e8:	f81300a8 	swi	r0, r19, 168
				if (stop != 0) {
2002d1ec:	e87300a8 	lwi	r3, r19, 168
2002d1f0:	bc030018 	beqi	r3, 24		// 2002d208
					_FSM_state = my_state_read_block_coeff_ac;
2002d1f4:	b0000000 	imm	0
2002d1f8:	e8740654 	lwi	r3, r20, 1620
2002d1fc:	30800005 	addik	r4, r0, 5
2002d200:	f8830000 	swi	r4, r3, 0
					goto finished;
2002d204:	b80013dc 	bri	5084		// 2002e5e0
				}
				read_block_coeff_noac();
2002d208:	b0000000 	imm	0
2002d20c:	e87407ac 	lwi	r3, r20, 1964
2002d210:	99fc1800 	brald	r15, r3
2002d214:	80000000 	or	r0, r0, r0
				i++;
2002d218:	e873001c 	lwi	r3, r19, 28
2002d21c:	30630001 	addik	r3, r3, 1
2002d220:	f873001c 	swi	r3, r19, 28
				goto l_read_block;
2002d224:	b800fcf8 	bri	-776		// 2002cf1c
			} else {
				_FSM_state = my_state_read_block_coeff_ac;
2002d228:	b0000000 	imm	0
2002d22c:	e8740654 	lwi	r3, r20, 1620
2002d230:	30800005 	addik	r4, r0, 5
2002d234:	f8830000 	swi	r4, r3, 0
				goto finished;
2002d238:	b80013a8 	bri	5032		// 2002e5e0

2002d23c <$L669>:
		case my_state_read_block_coeff:
			goto l_read_block_coeff;
		case my_state_read_block_coeff_ac:
			goto l_read_block_coeff_ac;
		case my_state_read_block_dc:
			goto l_read_block_dc;
2002d23c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_block_coeff_ac;
				goto finished;
			}
		l_read_block_dc:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002d240:	b000ffff 	imm	-1
2002d244:	b9f4f8e0 	brlid	r15, -1824	// 2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002d248:	80000000 	or	r0, r0, r0
2002d24c:	e893001c 	lwi	r4, r19, 28
2002d250:	10641800 	addk	r3, r4, r3
2002d254:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_block_nodc_inter()) {
2002d258:	b0000000 	imm	0
2002d25c:	e8940790 	lwi	r4, r20, 1936
2002d260:	99fc2000 	brald	r15, r4
2002d264:	80000000 	or	r0, r0, r0
2002d268:	bc0301c4 	beqi	r3, 452		// 2002d42c
				int stop = 0;
2002d26c:	f8130024 	swi	r0, r19, 36
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[0]) {
2002d270:	b0000000 	imm	0
2002d274:	e8740550 	lwi	r3, r20, 1360
2002d278:	e8630000 	lwi	r3, r3, 0
2002d27c:	e863000c 	lwi	r3, r3, 12
2002d280:	e8830000 	lwi	r4, r3, 0
2002d284:	b0000000 	imm	0
2002d288:	e8740560 	lwi	r3, r20, 1376
2002d28c:	e8630000 	lwi	r3, r3, 0
2002d290:	14632000 	rsubk	r3, r3, r4
2002d294:	a863fe00 	xori	r3, r3, -512
2002d298:	bc23000c 	bnei	r3, 12		// 2002d2a4
					stop = 1;
2002d29c:	30600001 	addik	r3, r0, 1
2002d2a0:	f8730024 	swi	r3, r19, 36
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[1]) {
2002d2a4:	b0000000 	imm	0
2002d2a8:	e8740550 	lwi	r3, r20, 1360
2002d2ac:	e8630000 	lwi	r3, r3, 0
2002d2b0:	e863000c 	lwi	r3, r3, 12
2002d2b4:	30630004 	addik	r3, r3, 4
2002d2b8:	e8830000 	lwi	r4, r3, 0
2002d2bc:	b0000000 	imm	0
2002d2c0:	e8740560 	lwi	r3, r20, 1376
2002d2c4:	e8630000 	lwi	r3, r3, 0
2002d2c8:	14632000 	rsubk	r3, r3, r4
2002d2cc:	a863fe00 	xori	r3, r3, -512
2002d2d0:	bc23000c 	bnei	r3, 12		// 2002d2dc
					stop = 1;
2002d2d4:	30600001 	addik	r3, r0, 1
2002d2d8:	f8730024 	swi	r3, r19, 36
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[2]) {
2002d2dc:	b0000000 	imm	0
2002d2e0:	e8740550 	lwi	r3, r20, 1360
2002d2e4:	e8630000 	lwi	r3, r3, 0
2002d2e8:	e863000c 	lwi	r3, r3, 12
2002d2ec:	30630008 	addik	r3, r3, 8
2002d2f0:	e8830000 	lwi	r4, r3, 0
2002d2f4:	b0000000 	imm	0
2002d2f8:	e8740560 	lwi	r3, r20, 1376
2002d2fc:	e8630000 	lwi	r3, r3, 0
2002d300:	14632000 	rsubk	r3, r3, r4
2002d304:	a863fe00 	xori	r3, r3, -512
2002d308:	bc23000c 	bnei	r3, 12		// 2002d314
					stop = 1;
2002d30c:	30600001 	addik	r3, r0, 1
2002d310:	f8730024 	swi	r3, r19, 36
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[3]) {
2002d314:	b0000000 	imm	0
2002d318:	e8740550 	lwi	r3, r20, 1360
2002d31c:	e8630000 	lwi	r3, r3, 0
2002d320:	e863000c 	lwi	r3, r3, 12
2002d324:	3063000c 	addik	r3, r3, 12
2002d328:	e8830000 	lwi	r4, r3, 0
2002d32c:	b0000000 	imm	0
2002d330:	e8740560 	lwi	r3, r20, 1376
2002d334:	e8630000 	lwi	r3, r3, 0
2002d338:	14632000 	rsubk	r3, r3, r4
2002d33c:	a863fe00 	xori	r3, r3, -512
2002d340:	bc23000c 	bnei	r3, 12		// 2002d34c
					stop = 1;
2002d344:	30600001 	addik	r3, r0, 1
2002d348:	f8730024 	swi	r3, r19, 36
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[4]) {
2002d34c:	b0000000 	imm	0
2002d350:	e8740550 	lwi	r3, r20, 1360
2002d354:	e8630000 	lwi	r3, r3, 0
2002d358:	e863000c 	lwi	r3, r3, 12
2002d35c:	30630010 	addik	r3, r3, 16
2002d360:	e8830000 	lwi	r4, r3, 0
2002d364:	b0000000 	imm	0
2002d368:	e8740560 	lwi	r3, r20, 1376
2002d36c:	e8630000 	lwi	r3, r3, 0
2002d370:	14632000 	rsubk	r3, r3, r4
2002d374:	a863fe00 	xori	r3, r3, -512
2002d378:	bc23000c 	bnei	r3, 12		// 2002d384
					stop = 1;
2002d37c:	30600001 	addik	r3, r0, 1
2002d380:	f8730024 	swi	r3, r19, 36
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[5]) {
2002d384:	b0000000 	imm	0
2002d388:	e8740550 	lwi	r3, r20, 1360
2002d38c:	e8630000 	lwi	r3, r3, 0
2002d390:	e863000c 	lwi	r3, r3, 12
2002d394:	30630014 	addik	r3, r3, 20
2002d398:	e8830000 	lwi	r4, r3, 0
2002d39c:	b0000000 	imm	0
2002d3a0:	e8740560 	lwi	r3, r20, 1376
2002d3a4:	e8630000 	lwi	r3, r3, 0
2002d3a8:	14632000 	rsubk	r3, r3, r4
2002d3ac:	a863fe00 	xori	r3, r3, -512
2002d3b0:	bc23000c 	bnei	r3, 12		// 2002d3bc
					stop = 1;
2002d3b4:	30600001 	addik	r3, r0, 1
2002d3b8:	f8730024 	swi	r3, r19, 36
				}
				if (1 > SIZE_QP - index_QP + decoder_parser_parseheaders_QP->read_inds[0]) {
2002d3bc:	b0000000 	imm	0
2002d3c0:	e8740538 	lwi	r3, r20, 1336
2002d3c4:	e8630000 	lwi	r3, r3, 0
2002d3c8:	e863000c 	lwi	r3, r3, 12
2002d3cc:	e8830000 	lwi	r4, r3, 0
2002d3d0:	b0000000 	imm	0
2002d3d4:	e8740598 	lwi	r3, r20, 1432
2002d3d8:	e8630000 	lwi	r3, r3, 0
2002d3dc:	14632000 	rsubk	r3, r3, r4
2002d3e0:	a863fe00 	xori	r3, r3, -512
2002d3e4:	bc23000c 	bnei	r3, 12		// 2002d3f0
					stop = 1;
2002d3e8:	30600001 	addik	r3, r0, 1
2002d3ec:	f8730024 	swi	r3, r19, 36
				}
				if (stop != 0) {
2002d3f0:	e8730024 	lwi	r3, r19, 36
2002d3f4:	bc030018 	beqi	r3, 24		// 2002d40c
					_FSM_state = my_state_read_block_dc;
2002d3f8:	b0000000 	imm	0
2002d3fc:	e8740654 	lwi	r3, r20, 1620
2002d400:	30800006 	addik	r4, r0, 6
2002d404:	f8830000 	swi	r4, r3, 0
					goto finished;
2002d408:	b80011d8 	bri	4568		// 2002e5e0
				}
				read_block_nodc_inter();
2002d40c:	b0000000 	imm	0
2002d410:	e8740794 	lwi	r3, r20, 1940
2002d414:	99fc1800 	brald	r15, r3
2002d418:	80000000 	or	r0, r0, r0
				i++;
2002d41c:	e873001c 	lwi	r3, r19, 28
2002d420:	30630001 	addik	r3, r3, 1
2002d424:	f873001c 	swi	r3, r19, 28
				goto l_read_block_coeff_ac;
2002d428:	b800fd40 	bri	-704		// 2002d168
			} else if (isSchedulable_read_block_nodc_intra()) {
2002d42c:	b0000000 	imm	0
2002d430:	e8940798 	lwi	r4, r20, 1944
2002d434:	99fc2000 	brald	r15, r4
2002d438:	80000000 	or	r0, r0, r0
2002d43c:	bc0301c4 	beqi	r3, 452		// 2002d600
				int stop = 0;
2002d440:	f8130028 	swi	r0, r19, 40
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[0]) {
2002d444:	b0000000 	imm	0
2002d448:	e8740550 	lwi	r3, r20, 1360
2002d44c:	e8630000 	lwi	r3, r3, 0
2002d450:	e863000c 	lwi	r3, r3, 12
2002d454:	e8830000 	lwi	r4, r3, 0
2002d458:	b0000000 	imm	0
2002d45c:	e8740560 	lwi	r3, r20, 1376
2002d460:	e8630000 	lwi	r3, r3, 0
2002d464:	14632000 	rsubk	r3, r3, r4
2002d468:	a863fe00 	xori	r3, r3, -512
2002d46c:	bc23000c 	bnei	r3, 12		// 2002d478
					stop = 1;
2002d470:	30600001 	addik	r3, r0, 1
2002d474:	f8730028 	swi	r3, r19, 40
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[1]) {
2002d478:	b0000000 	imm	0
2002d47c:	e8740550 	lwi	r3, r20, 1360
2002d480:	e8630000 	lwi	r3, r3, 0
2002d484:	e863000c 	lwi	r3, r3, 12
2002d488:	30630004 	addik	r3, r3, 4
2002d48c:	e8830000 	lwi	r4, r3, 0
2002d490:	b0000000 	imm	0
2002d494:	e8740560 	lwi	r3, r20, 1376
2002d498:	e8630000 	lwi	r3, r3, 0
2002d49c:	14632000 	rsubk	r3, r3, r4
2002d4a0:	a863fe00 	xori	r3, r3, -512
2002d4a4:	bc23000c 	bnei	r3, 12		// 2002d4b0
					stop = 1;
2002d4a8:	30600001 	addik	r3, r0, 1
2002d4ac:	f8730028 	swi	r3, r19, 40
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[2]) {
2002d4b0:	b0000000 	imm	0
2002d4b4:	e8740550 	lwi	r3, r20, 1360
2002d4b8:	e8630000 	lwi	r3, r3, 0
2002d4bc:	e863000c 	lwi	r3, r3, 12
2002d4c0:	30630008 	addik	r3, r3, 8
2002d4c4:	e8830000 	lwi	r4, r3, 0
2002d4c8:	b0000000 	imm	0
2002d4cc:	e8740560 	lwi	r3, r20, 1376
2002d4d0:	e8630000 	lwi	r3, r3, 0
2002d4d4:	14632000 	rsubk	r3, r3, r4
2002d4d8:	a863fe00 	xori	r3, r3, -512
2002d4dc:	bc23000c 	bnei	r3, 12		// 2002d4e8
					stop = 1;
2002d4e0:	30600001 	addik	r3, r0, 1
2002d4e4:	f8730028 	swi	r3, r19, 40
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[3]) {
2002d4e8:	b0000000 	imm	0
2002d4ec:	e8740550 	lwi	r3, r20, 1360
2002d4f0:	e8630000 	lwi	r3, r3, 0
2002d4f4:	e863000c 	lwi	r3, r3, 12
2002d4f8:	3063000c 	addik	r3, r3, 12
2002d4fc:	e8830000 	lwi	r4, r3, 0
2002d500:	b0000000 	imm	0
2002d504:	e8740560 	lwi	r3, r20, 1376
2002d508:	e8630000 	lwi	r3, r3, 0
2002d50c:	14632000 	rsubk	r3, r3, r4
2002d510:	a863fe00 	xori	r3, r3, -512
2002d514:	bc23000c 	bnei	r3, 12		// 2002d520
					stop = 1;
2002d518:	30600001 	addik	r3, r0, 1
2002d51c:	f8730028 	swi	r3, r19, 40
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[4]) {
2002d520:	b0000000 	imm	0
2002d524:	e8740550 	lwi	r3, r20, 1360
2002d528:	e8630000 	lwi	r3, r3, 0
2002d52c:	e863000c 	lwi	r3, r3, 12
2002d530:	30630010 	addik	r3, r3, 16
2002d534:	e8830000 	lwi	r4, r3, 0
2002d538:	b0000000 	imm	0
2002d53c:	e8740560 	lwi	r3, r20, 1376
2002d540:	e8630000 	lwi	r3, r3, 0
2002d544:	14632000 	rsubk	r3, r3, r4
2002d548:	a863fe00 	xori	r3, r3, -512
2002d54c:	bc23000c 	bnei	r3, 12		// 2002d558
					stop = 1;
2002d550:	30600001 	addik	r3, r0, 1
2002d554:	f8730028 	swi	r3, r19, 40
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[5]) {
2002d558:	b0000000 	imm	0
2002d55c:	e8740550 	lwi	r3, r20, 1360
2002d560:	e8630000 	lwi	r3, r3, 0
2002d564:	e863000c 	lwi	r3, r3, 12
2002d568:	30630014 	addik	r3, r3, 20
2002d56c:	e8830000 	lwi	r4, r3, 0
2002d570:	b0000000 	imm	0
2002d574:	e8740560 	lwi	r3, r20, 1376
2002d578:	e8630000 	lwi	r3, r3, 0
2002d57c:	14632000 	rsubk	r3, r3, r4
2002d580:	a863fe00 	xori	r3, r3, -512
2002d584:	bc23000c 	bnei	r3, 12		// 2002d590
					stop = 1;
2002d588:	30600001 	addik	r3, r0, 1
2002d58c:	f8730028 	swi	r3, r19, 40
				}
				if (1 > SIZE_QP - index_QP + decoder_parser_parseheaders_QP->read_inds[0]) {
2002d590:	b0000000 	imm	0
2002d594:	e8740538 	lwi	r3, r20, 1336
2002d598:	e8630000 	lwi	r3, r3, 0
2002d59c:	e863000c 	lwi	r3, r3, 12
2002d5a0:	e8830000 	lwi	r4, r3, 0
2002d5a4:	b0000000 	imm	0
2002d5a8:	e8740598 	lwi	r3, r20, 1432
2002d5ac:	e8630000 	lwi	r3, r3, 0
2002d5b0:	14632000 	rsubk	r3, r3, r4
2002d5b4:	a863fe00 	xori	r3, r3, -512
2002d5b8:	bc23000c 	bnei	r3, 12		// 2002d5c4
					stop = 1;
2002d5bc:	30600001 	addik	r3, r0, 1
2002d5c0:	f8730028 	swi	r3, r19, 40
				}
				if (stop != 0) {
2002d5c4:	e8730028 	lwi	r3, r19, 40
2002d5c8:	bc030018 	beqi	r3, 24		// 2002d5e0
					_FSM_state = my_state_read_block_dc;
2002d5cc:	b0000000 	imm	0
2002d5d0:	e8740654 	lwi	r3, r20, 1620
2002d5d4:	30800006 	addik	r4, r0, 6
2002d5d8:	f8830000 	swi	r4, r3, 0
					goto finished;
2002d5dc:	b8001004 	bri	4100		// 2002e5e0
				}
				read_block_nodc_intra();
2002d5e0:	b0000000 	imm	0
2002d5e4:	e874079c 	lwi	r3, r20, 1948
2002d5e8:	99fc1800 	brald	r15, r3
2002d5ec:	80000000 	or	r0, r0, r0
				i++;
2002d5f0:	e873001c 	lwi	r3, r19, 28
2002d5f4:	30630001 	addik	r3, r3, 1
2002d5f8:	f873001c 	swi	r3, r19, 28
				goto l_read_block_coeff_ac;
2002d5fc:	b800fb6c 	bri	-1172		// 2002d168
			} else if (isSchedulable_read_block_dc()) {
2002d600:	b0000000 	imm	0
2002d604:	e8940788 	lwi	r4, r20, 1928
2002d608:	99fc2000 	brald	r15, r4
2002d60c:	80000000 	or	r0, r0, r0
2002d610:	bc030260 	beqi	r3, 608		// 2002d870
				int stop = 0;
2002d614:	f813002c 	swi	r0, r19, 44
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[0]) {
2002d618:	b0000000 	imm	0
2002d61c:	e8740550 	lwi	r3, r20, 1360
2002d620:	e8630000 	lwi	r3, r3, 0
2002d624:	e863000c 	lwi	r3, r3, 12
2002d628:	e8830000 	lwi	r4, r3, 0
2002d62c:	b0000000 	imm	0
2002d630:	e8740560 	lwi	r3, r20, 1376
2002d634:	e8630000 	lwi	r3, r3, 0
2002d638:	14632000 	rsubk	r3, r3, r4
2002d63c:	a863fe00 	xori	r3, r3, -512
2002d640:	bc23000c 	bnei	r3, 12		// 2002d64c
					stop = 1;
2002d644:	30600001 	addik	r3, r0, 1
2002d648:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[1]) {
2002d64c:	b0000000 	imm	0
2002d650:	e8740550 	lwi	r3, r20, 1360
2002d654:	e8630000 	lwi	r3, r3, 0
2002d658:	e863000c 	lwi	r3, r3, 12
2002d65c:	30630004 	addik	r3, r3, 4
2002d660:	e8830000 	lwi	r4, r3, 0
2002d664:	b0000000 	imm	0
2002d668:	e8740560 	lwi	r3, r20, 1376
2002d66c:	e8630000 	lwi	r3, r3, 0
2002d670:	14632000 	rsubk	r3, r3, r4
2002d674:	a863fe00 	xori	r3, r3, -512
2002d678:	bc23000c 	bnei	r3, 12		// 2002d684
					stop = 1;
2002d67c:	30600001 	addik	r3, r0, 1
2002d680:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[2]) {
2002d684:	b0000000 	imm	0
2002d688:	e8740550 	lwi	r3, r20, 1360
2002d68c:	e8630000 	lwi	r3, r3, 0
2002d690:	e863000c 	lwi	r3, r3, 12
2002d694:	30630008 	addik	r3, r3, 8
2002d698:	e8830000 	lwi	r4, r3, 0
2002d69c:	b0000000 	imm	0
2002d6a0:	e8740560 	lwi	r3, r20, 1376
2002d6a4:	e8630000 	lwi	r3, r3, 0
2002d6a8:	14632000 	rsubk	r3, r3, r4
2002d6ac:	a863fe00 	xori	r3, r3, -512
2002d6b0:	bc23000c 	bnei	r3, 12		// 2002d6bc
					stop = 1;
2002d6b4:	30600001 	addik	r3, r0, 1
2002d6b8:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[3]) {
2002d6bc:	b0000000 	imm	0
2002d6c0:	e8740550 	lwi	r3, r20, 1360
2002d6c4:	e8630000 	lwi	r3, r3, 0
2002d6c8:	e863000c 	lwi	r3, r3, 12
2002d6cc:	3063000c 	addik	r3, r3, 12
2002d6d0:	e8830000 	lwi	r4, r3, 0
2002d6d4:	b0000000 	imm	0
2002d6d8:	e8740560 	lwi	r3, r20, 1376
2002d6dc:	e8630000 	lwi	r3, r3, 0
2002d6e0:	14632000 	rsubk	r3, r3, r4
2002d6e4:	a863fe00 	xori	r3, r3, -512
2002d6e8:	bc23000c 	bnei	r3, 12		// 2002d6f4
					stop = 1;
2002d6ec:	30600001 	addik	r3, r0, 1
2002d6f0:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[4]) {
2002d6f4:	b0000000 	imm	0
2002d6f8:	e8740550 	lwi	r3, r20, 1360
2002d6fc:	e8630000 	lwi	r3, r3, 0
2002d700:	e863000c 	lwi	r3, r3, 12
2002d704:	30630010 	addik	r3, r3, 16
2002d708:	e8830000 	lwi	r4, r3, 0
2002d70c:	b0000000 	imm	0
2002d710:	e8740560 	lwi	r3, r20, 1376
2002d714:	e8630000 	lwi	r3, r3, 0
2002d718:	14632000 	rsubk	r3, r3, r4
2002d71c:	a863fe00 	xori	r3, r3, -512
2002d720:	bc23000c 	bnei	r3, 12		// 2002d72c
					stop = 1;
2002d724:	30600001 	addik	r3, r0, 1
2002d728:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[5]) {
2002d72c:	b0000000 	imm	0
2002d730:	e8740550 	lwi	r3, r20, 1360
2002d734:	e8630000 	lwi	r3, r3, 0
2002d738:	e863000c 	lwi	r3, r3, 12
2002d73c:	30630014 	addik	r3, r3, 20
2002d740:	e8830000 	lwi	r4, r3, 0
2002d744:	b0000000 	imm	0
2002d748:	e8740560 	lwi	r3, r20, 1376
2002d74c:	e8630000 	lwi	r3, r3, 0
2002d750:	14632000 	rsubk	r3, r3, r4
2002d754:	a863fe00 	xori	r3, r3, -512
2002d758:	bc23000c 	bnei	r3, 12		// 2002d764
					stop = 1;
2002d75c:	30600001 	addik	r3, r0, 1
2002d760:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_QP - index_QP + decoder_parser_parseheaders_QP->read_inds[0]) {
2002d764:	b0000000 	imm	0
2002d768:	e8740538 	lwi	r3, r20, 1336
2002d76c:	e8630000 	lwi	r3, r3, 0
2002d770:	e863000c 	lwi	r3, r3, 12
2002d774:	e8830000 	lwi	r4, r3, 0
2002d778:	b0000000 	imm	0
2002d77c:	e8740598 	lwi	r3, r20, 1432
2002d780:	e8630000 	lwi	r3, r3, 0
2002d784:	14632000 	rsubk	r3, r3, r4
2002d788:	a863fe00 	xori	r3, r3, -512
2002d78c:	bc23000c 	bnei	r3, 12		// 2002d798
					stop = 1;
2002d790:	30600001 	addik	r3, r0, 1
2002d794:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_RUN - index_RUN + decoder_parser_parseheaders_RUN->read_inds[0]) {
2002d798:	b0000000 	imm	0
2002d79c:	e8740540 	lwi	r3, r20, 1344
2002d7a0:	e8630000 	lwi	r3, r3, 0
2002d7a4:	e863000c 	lwi	r3, r3, 12
2002d7a8:	e8830000 	lwi	r4, r3, 0
2002d7ac:	b0000000 	imm	0
2002d7b0:	e8740570 	lwi	r3, r20, 1392
2002d7b4:	e8630000 	lwi	r3, r3, 0
2002d7b8:	14632000 	rsubk	r3, r3, r4
2002d7bc:	a863fe00 	xori	r3, r3, -512
2002d7c0:	bc23000c 	bnei	r3, 12		// 2002d7cc
					stop = 1;
2002d7c4:	30600001 	addik	r3, r0, 1
2002d7c8:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_VALUE - index_VALUE + decoder_parser_parseheaders_VALUE->read_inds[0]) {
2002d7cc:	b0000000 	imm	0
2002d7d0:	e8740554 	lwi	r3, r20, 1364
2002d7d4:	e8630000 	lwi	r3, r3, 0
2002d7d8:	e863000c 	lwi	r3, r3, 12
2002d7dc:	e8830000 	lwi	r4, r3, 0
2002d7e0:	b0000000 	imm	0
2002d7e4:	e8740578 	lwi	r3, r20, 1400
2002d7e8:	e8630000 	lwi	r3, r3, 0
2002d7ec:	14632000 	rsubk	r3, r3, r4
2002d7f0:	a863fe00 	xori	r3, r3, -512
2002d7f4:	bc23000c 	bnei	r3, 12		// 2002d800
					stop = 1;
2002d7f8:	30600001 	addik	r3, r0, 1
2002d7fc:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_LAST - index_LAST + decoder_parser_parseheaders_LAST->read_inds[0]) {
2002d800:	b0000000 	imm	0
2002d804:	e874054c 	lwi	r3, r20, 1356
2002d808:	e8630000 	lwi	r3, r3, 0
2002d80c:	e863000c 	lwi	r3, r3, 12
2002d810:	e8830000 	lwi	r4, r3, 0
2002d814:	b0000000 	imm	0
2002d818:	e8740580 	lwi	r3, r20, 1408
2002d81c:	e8630000 	lwi	r3, r3, 0
2002d820:	14632000 	rsubk	r3, r3, r4
2002d824:	a863fe00 	xori	r3, r3, -512
2002d828:	bc23000c 	bnei	r3, 12		// 2002d834
					stop = 1;
2002d82c:	30600001 	addik	r3, r0, 1
2002d830:	f873002c 	swi	r3, r19, 44
				}
				if (stop != 0) {
2002d834:	e873002c 	lwi	r3, r19, 44
2002d838:	bc030018 	beqi	r3, 24		// 2002d850
					_FSM_state = my_state_read_block_dc;
2002d83c:	b0000000 	imm	0
2002d840:	e8740654 	lwi	r3, r20, 1620
2002d844:	30800006 	addik	r4, r0, 6
2002d848:	f8830000 	swi	r4, r3, 0
					goto finished;
2002d84c:	b8000d94 	bri	3476		// 2002e5e0
				}
				read_block_dc();
2002d850:	b0000000 	imm	0
2002d854:	e874078c 	lwi	r3, r20, 1932
2002d858:	99fc1800 	brald	r15, r3
2002d85c:	80000000 	or	r0, r0, r0
				i++;
2002d860:	e873001c 	lwi	r3, r19, 28
2002d864:	30630001 	addik	r3, r3, 1
2002d868:	f873001c 	swi	r3, r19, 28
				goto l_read_block_coeff_ac;
2002d86c:	b800f8fc 	bri	-1796		// 2002d168
			} else {
				_FSM_state = my_state_read_block_dc;
2002d870:	b0000000 	imm	0
2002d874:	e8740654 	lwi	r3, r20, 1620
2002d878:	30800006 	addik	r4, r0, 6
2002d87c:	f8830000 	swi	r4, r3, 0
				goto finished;
2002d880:	b8000d60 	bri	3424		// 2002e5e0

2002d884 <$L670>:
		case my_state_read_block_coeff_ac:
			goto l_read_block_coeff_ac;
		case my_state_read_block_dc:
			goto l_read_block_dc;
		case my_state_read_mb:
			goto l_read_mb;
2002d884:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_block_dc;
				goto finished;
			}
		l_read_mb:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002d888:	b000ffff 	imm	-1
2002d88c:	b9f4f298 	brlid	r15, -3432	// 2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002d890:	80000000 	or	r0, r0, r0
2002d894:	e893001c 	lwi	r4, r19, 28
2002d898:	10641800 	addk	r3, r4, r3
2002d89c:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_mb_done()) {
2002d8a0:	b0000000 	imm	0
2002d8a4:	e8940770 	lwi	r4, r20, 1904
2002d8a8:	99fc2000 	brald	r15, r4
2002d8ac:	80000000 	or	r0, r0, r0
2002d8b0:	bc030044 	beqi	r3, 68		// 2002d8f4
				int stop = 0;
2002d8b4:	f8130084 	swi	r0, r19, 132
				if (stop != 0) {
2002d8b8:	e8730084 	lwi	r3, r19, 132
2002d8bc:	bc030018 	beqi	r3, 24		// 2002d8d4
					_FSM_state = my_state_read_mb;
2002d8c0:	b0000000 	imm	0
2002d8c4:	e8740654 	lwi	r3, r20, 1620
2002d8c8:	30800007 	addik	r4, r0, 7
2002d8cc:	f8830000 	swi	r4, r3, 0
					goto finished;
2002d8d0:	b8000d10 	bri	3344		// 2002e5e0
				}
				read_mb_done();
2002d8d4:	b0000000 	imm	0
2002d8d8:	e8740774 	lwi	r3, r20, 1908
2002d8dc:	99fc1800 	brald	r15, r3
2002d8e0:	80000000 	or	r0, r0, r0
				i++;
2002d8e4:	e873001c 	lwi	r3, r19, 28
2002d8e8:	30630001 	addik	r3, r3, 1
2002d8ec:	f873001c 	swi	r3, r19, 28
				goto l_look_for_Sequence_Header;
2002d8f0:	b800f5a8 	bri	-2648		// 2002ce98
			} else if (isSchedulable_read_mb_start()) {
2002d8f4:	b0000000 	imm	0
2002d8f8:	e8940768 	lwi	r4, r20, 1896
2002d8fc:	99fc2000 	brald	r15, r4
2002d900:	80000000 	or	r0, r0, r0
2002d904:	bc030044 	beqi	r3, 68		// 2002d948
				int stop = 0;
2002d908:	f8130088 	swi	r0, r19, 136
				if (stop != 0) {
2002d90c:	e8730088 	lwi	r3, r19, 136
2002d910:	bc030018 	beqi	r3, 24		// 2002d928
					_FSM_state = my_state_read_mb;
2002d914:	b0000000 	imm	0
2002d918:	e8740654 	lwi	r3, r20, 1620
2002d91c:	30800007 	addik	r4, r0, 7
2002d920:	f8830000 	swi	r4, r3, 0
					goto finished;
2002d924:	b8000cbc 	bri	3260		// 2002e5e0
				}
				read_mb_start();
2002d928:	b0000000 	imm	0
2002d92c:	e874076c 	lwi	r3, r20, 1900
2002d930:	99fc1800 	brald	r15, r3
2002d934:	80000000 	or	r0, r0, r0
				i++;
2002d938:	e873001c 	lwi	r3, r19, 28
2002d93c:	30630001 	addik	r3, r3, 1
2002d940:	f873001c 	swi	r3, r19, 28
				goto l_read_mv;
2002d944:	b800001c 	bri	28		// 2002d960
			} else {
				_FSM_state = my_state_read_mb;
2002d948:	b0000000 	imm	0
2002d94c:	e8740654 	lwi	r3, r20, 1620
2002d950:	30800007 	addik	r4, r0, 7
2002d954:	f8830000 	swi	r4, r3, 0
				goto finished;
2002d958:	b8000c88 	bri	3208		// 2002e5e0

2002d95c <$L671>:
		case my_state_read_block_dc:
			goto l_read_block_dc;
		case my_state_read_mb:
			goto l_read_mb;
		case my_state_read_mv:
			goto l_read_mv;
2002d95c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_mb;
				goto finished;
			}
		l_read_mv:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002d960:	b000ffff 	imm	-1
2002d964:	b9f4f1c0 	brlid	r15, -3648	// 2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002d968:	80000000 	or	r0, r0, r0
2002d96c:	e893001c 	lwi	r4, r19, 28
2002d970:	10641800 	addk	r3, r4, r3
2002d974:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_uncoded()) {
2002d978:	b0000000 	imm	0
2002d97c:	e89407c0 	lwi	r4, r20, 1984
2002d980:	99fc2000 	brald	r15, r4
2002d984:	80000000 	or	r0, r0, r0
2002d988:	bc0301fc 	beqi	r3, 508		// 2002db84
				int stop = 0;
2002d98c:	f8130030 	swi	r0, r19, 48
				if (6 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[0]) {
2002d990:	b0000000 	imm	0
2002d994:	e8740550 	lwi	r3, r20, 1360
2002d998:	e8630000 	lwi	r3, r3, 0
2002d99c:	e863000c 	lwi	r3, r3, 12
2002d9a0:	e8830000 	lwi	r4, r3, 0
2002d9a4:	b0000000 	imm	0
2002d9a8:	e8740560 	lwi	r3, r20, 1376
2002d9ac:	e8630000 	lwi	r3, r3, 0
2002d9b0:	14632000 	rsubk	r3, r3, r4
2002d9b4:	30830200 	addik	r4, r3, 512
2002d9b8:	30600005 	addik	r3, r0, 5
2002d9bc:	16441803 	cmpu	r18, r4, r3
2002d9c0:	bc52000c 	blti	r18, 12		// 2002d9cc
					stop = 1;
2002d9c4:	30600001 	addik	r3, r0, 1
2002d9c8:	f8730030 	swi	r3, r19, 48
				}
				if (6 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[1]) {
2002d9cc:	b0000000 	imm	0
2002d9d0:	e8740550 	lwi	r3, r20, 1360
2002d9d4:	e8630000 	lwi	r3, r3, 0
2002d9d8:	e863000c 	lwi	r3, r3, 12
2002d9dc:	30630004 	addik	r3, r3, 4
2002d9e0:	e8830000 	lwi	r4, r3, 0
2002d9e4:	b0000000 	imm	0
2002d9e8:	e8740560 	lwi	r3, r20, 1376
2002d9ec:	e8630000 	lwi	r3, r3, 0
2002d9f0:	14632000 	rsubk	r3, r3, r4
2002d9f4:	30830200 	addik	r4, r3, 512
2002d9f8:	30600005 	addik	r3, r0, 5
2002d9fc:	16441803 	cmpu	r18, r4, r3
2002da00:	bc52000c 	blti	r18, 12		// 2002da0c
					stop = 1;
2002da04:	30600001 	addik	r3, r0, 1
2002da08:	f8730030 	swi	r3, r19, 48
				}
				if (6 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[2]) {
2002da0c:	b0000000 	imm	0
2002da10:	e8740550 	lwi	r3, r20, 1360
2002da14:	e8630000 	lwi	r3, r3, 0
2002da18:	e863000c 	lwi	r3, r3, 12
2002da1c:	30630008 	addik	r3, r3, 8
2002da20:	e8830000 	lwi	r4, r3, 0
2002da24:	b0000000 	imm	0
2002da28:	e8740560 	lwi	r3, r20, 1376
2002da2c:	e8630000 	lwi	r3, r3, 0
2002da30:	14632000 	rsubk	r3, r3, r4
2002da34:	30830200 	addik	r4, r3, 512
2002da38:	30600005 	addik	r3, r0, 5
2002da3c:	16441803 	cmpu	r18, r4, r3
2002da40:	bc52000c 	blti	r18, 12		// 2002da4c
					stop = 1;
2002da44:	30600001 	addik	r3, r0, 1
2002da48:	f8730030 	swi	r3, r19, 48
				}
				if (6 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[3]) {
2002da4c:	b0000000 	imm	0
2002da50:	e8740550 	lwi	r3, r20, 1360
2002da54:	e8630000 	lwi	r3, r3, 0
2002da58:	e863000c 	lwi	r3, r3, 12
2002da5c:	3063000c 	addik	r3, r3, 12
2002da60:	e8830000 	lwi	r4, r3, 0
2002da64:	b0000000 	imm	0
2002da68:	e8740560 	lwi	r3, r20, 1376
2002da6c:	e8630000 	lwi	r3, r3, 0
2002da70:	14632000 	rsubk	r3, r3, r4
2002da74:	30830200 	addik	r4, r3, 512
2002da78:	30600005 	addik	r3, r0, 5
2002da7c:	16441803 	cmpu	r18, r4, r3
2002da80:	bc52000c 	blti	r18, 12		// 2002da8c
					stop = 1;
2002da84:	30600001 	addik	r3, r0, 1
2002da88:	f8730030 	swi	r3, r19, 48
				}
				if (6 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[4]) {
2002da8c:	b0000000 	imm	0
2002da90:	e8740550 	lwi	r3, r20, 1360
2002da94:	e8630000 	lwi	r3, r3, 0
2002da98:	e863000c 	lwi	r3, r3, 12
2002da9c:	30630010 	addik	r3, r3, 16
2002daa0:	e8830000 	lwi	r4, r3, 0
2002daa4:	b0000000 	imm	0
2002daa8:	e8740560 	lwi	r3, r20, 1376
2002daac:	e8630000 	lwi	r3, r3, 0
2002dab0:	14632000 	rsubk	r3, r3, r4
2002dab4:	30830200 	addik	r4, r3, 512
2002dab8:	30600005 	addik	r3, r0, 5
2002dabc:	16441803 	cmpu	r18, r4, r3
2002dac0:	bc52000c 	blti	r18, 12		// 2002dacc
					stop = 1;
2002dac4:	30600001 	addik	r3, r0, 1
2002dac8:	f8730030 	swi	r3, r19, 48
				}
				if (6 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[5]) {
2002dacc:	b0000000 	imm	0
2002dad0:	e8740550 	lwi	r3, r20, 1360
2002dad4:	e8630000 	lwi	r3, r3, 0
2002dad8:	e863000c 	lwi	r3, r3, 12
2002dadc:	30630014 	addik	r3, r3, 20
2002dae0:	e8830000 	lwi	r4, r3, 0
2002dae4:	b0000000 	imm	0
2002dae8:	e8740560 	lwi	r3, r20, 1376
2002daec:	e8630000 	lwi	r3, r3, 0
2002daf0:	14632000 	rsubk	r3, r3, r4
2002daf4:	30830200 	addik	r4, r3, 512
2002daf8:	30600005 	addik	r3, r0, 5
2002dafc:	16441803 	cmpu	r18, r4, r3
2002db00:	bc52000c 	blti	r18, 12		// 2002db0c
					stop = 1;
2002db04:	30600001 	addik	r3, r0, 1
2002db08:	f8730030 	swi	r3, r19, 48
				}
				if (6 > SIZE_QP - index_QP + decoder_parser_parseheaders_QP->read_inds[0]) {
2002db0c:	b0000000 	imm	0
2002db10:	e8740538 	lwi	r3, r20, 1336
2002db14:	e8630000 	lwi	r3, r3, 0
2002db18:	e863000c 	lwi	r3, r3, 12
2002db1c:	e8830000 	lwi	r4, r3, 0
2002db20:	b0000000 	imm	0
2002db24:	e8740598 	lwi	r3, r20, 1432
2002db28:	e8630000 	lwi	r3, r3, 0
2002db2c:	14632000 	rsubk	r3, r3, r4
2002db30:	30830200 	addik	r4, r3, 512
2002db34:	30600005 	addik	r3, r0, 5
2002db38:	16441803 	cmpu	r18, r4, r3
2002db3c:	bc52000c 	blti	r18, 12		// 2002db48
					stop = 1;
2002db40:	30600001 	addik	r3, r0, 1
2002db44:	f8730030 	swi	r3, r19, 48
				}
				if (stop != 0) {
2002db48:	e8730030 	lwi	r3, r19, 48
2002db4c:	bc030018 	beqi	r3, 24		// 2002db64
					_FSM_state = my_state_read_mv;
2002db50:	b0000000 	imm	0
2002db54:	e8740654 	lwi	r3, r20, 1620
2002db58:	30800008 	addik	r4, r0, 8	// 8 <_vector_sw_exception>
2002db5c:	f8830000 	swi	r4, r3, 0
					goto finished;
2002db60:	b8000a80 	bri	2688		// 2002e5e0
				}
				read_uncoded();
2002db64:	b0000000 	imm	0
2002db68:	e87407c4 	lwi	r3, r20, 1988
2002db6c:	99fc1800 	brald	r15, r3
2002db70:	80000000 	or	r0, r0, r0
				i++;
2002db74:	e873001c 	lwi	r3, r19, 28
2002db78:	30630001 	addik	r3, r3, 1
2002db7c:	f873001c 	swi	r3, r19, 28
				goto l_read_mb;
2002db80:	b800fd08 	bri	-760		// 2002d888
			} else if (isSchedulable_read_mv_start()) {
2002db84:	b0000000 	imm	0
2002db88:	e89407c8 	lwi	r4, r20, 1992
2002db8c:	99fc2000 	brald	r15, r4
2002db90:	80000000 	or	r0, r0, r0
2002db94:	bc030044 	beqi	r3, 68		// 2002dbd8
				int stop = 0;
2002db98:	f8130090 	swi	r0, r19, 144
				if (stop != 0) {
2002db9c:	e8730090 	lwi	r3, r19, 144
2002dba0:	bc030018 	beqi	r3, 24		// 2002dbb8
					_FSM_state = my_state_read_mv;
2002dba4:	b0000000 	imm	0
2002dba8:	e8740654 	lwi	r3, r20, 1620
2002dbac:	30800008 	addik	r4, r0, 8	// 8 <_vector_sw_exception>
2002dbb0:	f8830000 	swi	r4, r3, 0
					goto finished;
2002dbb4:	b8000a2c 	bri	2604		// 2002e5e0
				}
				read_mv_start();
2002dbb8:	b0000000 	imm	0
2002dbbc:	e87407cc 	lwi	r3, r20, 1996
2002dbc0:	99fc1800 	brald	r15, r3
2002dbc4:	80000000 	or	r0, r0, r0
				i++;
2002dbc8:	e873001c 	lwi	r3, r19, 28
2002dbcc:	30630001 	addik	r3, r3, 1
2002dbd0:	f873001c 	swi	r3, r19, 28
				goto l_read_mv_data;
2002dbd4:	b8000070 	bri	112		// 2002dc44
			} else if (isSchedulable_read_block_start()) {
2002dbd8:	b0000000 	imm	0
2002dbdc:	e8940778 	lwi	r4, r20, 1912
2002dbe0:	99fc2000 	brald	r15, r4
2002dbe4:	80000000 	or	r0, r0, r0
2002dbe8:	bc030044 	beqi	r3, 68		// 2002dc2c
				int stop = 0;
2002dbec:	f8130094 	swi	r0, r19, 148
				if (stop != 0) {
2002dbf0:	e8730094 	lwi	r3, r19, 148
2002dbf4:	bc030018 	beqi	r3, 24		// 2002dc0c
					_FSM_state = my_state_read_mv;
2002dbf8:	b0000000 	imm	0
2002dbfc:	e8740654 	lwi	r3, r20, 1620
2002dc00:	30800008 	addik	r4, r0, 8	// 8 <_vector_sw_exception>
2002dc04:	f8830000 	swi	r4, r3, 0
					goto finished;
2002dc08:	b80009d8 	bri	2520		// 2002e5e0
				}
				read_block_start();
2002dc0c:	b0000000 	imm	0
2002dc10:	e874077c 	lwi	r3, r20, 1916
2002dc14:	99fc1800 	brald	r15, r3
2002dc18:	80000000 	or	r0, r0, r0
				i++;
2002dc1c:	e873001c 	lwi	r3, r19, 28
2002dc20:	30630001 	addik	r3, r3, 1
2002dc24:	f873001c 	swi	r3, r19, 28
				goto l_read_block_dc;
2002dc28:	b800f618 	bri	-2536		// 2002d240
			} else {
				_FSM_state = my_state_read_mv;
2002dc2c:	b0000000 	imm	0
2002dc30:	e8740654 	lwi	r3, r20, 1620
2002dc34:	30800008 	addik	r4, r0, 8	// 8 <_vector_sw_exception>
2002dc38:	f8830000 	swi	r4, r3, 0
				goto finished;
2002dc3c:	b80009a4 	bri	2468		// 2002e5e0

2002dc40 <$L672>:
		case my_state_read_mb:
			goto l_read_mb;
		case my_state_read_mv:
			goto l_read_mv;
		case my_state_read_mv_data:
			goto l_read_mv_data;
2002dc40:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_mv;
				goto finished;
			}
		l_read_mv_data:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002dc44:	b000ffff 	imm	-1
2002dc48:	b9f4eedc 	brlid	r15, -4388	// 2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002dc4c:	80000000 	or	r0, r0, r0
2002dc50:	e893001c 	lwi	r4, r19, 28
2002dc54:	10641800 	addk	r3, r4, r3
2002dc58:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_mv_data_done()) {
2002dc5c:	b0000000 	imm	0
2002dc60:	e89407d8 	lwi	r4, r20, 2008
2002dc64:	99fc2000 	brald	r15, r4
2002dc68:	80000000 	or	r0, r0, r0
2002dc6c:	bc030044 	beqi	r3, 68		// 2002dcb0
				int stop = 0;
2002dc70:	f8130098 	swi	r0, r19, 152
				if (stop != 0) {
2002dc74:	e8730098 	lwi	r3, r19, 152
2002dc78:	bc030018 	beqi	r3, 24		// 2002dc90
					_FSM_state = my_state_read_mv_data;
2002dc7c:	b0000000 	imm	0
2002dc80:	e8740654 	lwi	r3, r20, 1620
2002dc84:	30800009 	addik	r4, r0, 9
2002dc88:	f8830000 	swi	r4, r3, 0
					goto finished;
2002dc8c:	b8000954 	bri	2388		// 2002e5e0
				}
				read_mv_data_done();
2002dc90:	b0000000 	imm	0
2002dc94:	e87407dc 	lwi	r3, r20, 2012
2002dc98:	99fc1800 	brald	r15, r3
2002dc9c:	80000000 	or	r0, r0, r0
				i++;
2002dca0:	e873001c 	lwi	r3, r19, 28
2002dca4:	30630001 	addik	r3, r3, 1
2002dca8:	f873001c 	swi	r3, r19, 28
				goto l_read_block;
2002dcac:	b800f270 	bri	-3472		// 2002cf1c
			} else if (isSchedulable_read_mv_data()) {
2002dcb0:	b0000000 	imm	0
2002dcb4:	e89407d0 	lwi	r4, r20, 2000
2002dcb8:	99fc2000 	brald	r15, r4
2002dcbc:	80000000 	or	r0, r0, r0
2002dcc0:	bc030080 	beqi	r3, 128		// 2002dd40
				int stop = 0;
2002dcc4:	f8130034 	swi	r0, r19, 52
				if (4 > SIZE_MV - index_MV + decoder_parser_parseheaders_MV->read_inds[0]) {
2002dcc8:	b0000000 	imm	0
2002dccc:	e8740544 	lwi	r3, r20, 1348
2002dcd0:	e8630000 	lwi	r3, r3, 0
2002dcd4:	e863000c 	lwi	r3, r3, 12
2002dcd8:	e8830000 	lwi	r4, r3, 0
2002dcdc:	b0000000 	imm	0
2002dce0:	e8740568 	lwi	r3, r20, 1384
2002dce4:	e8630000 	lwi	r3, r3, 0
2002dce8:	14632000 	rsubk	r3, r3, r4
2002dcec:	30830200 	addik	r4, r3, 512
2002dcf0:	30600003 	addik	r3, r0, 3
2002dcf4:	16441803 	cmpu	r18, r4, r3
2002dcf8:	bc52000c 	blti	r18, 12		// 2002dd04
					stop = 1;
2002dcfc:	30600001 	addik	r3, r0, 1
2002dd00:	f8730034 	swi	r3, r19, 52
				}
				if (stop != 0) {
2002dd04:	e8730034 	lwi	r3, r19, 52
2002dd08:	bc030018 	beqi	r3, 24		// 2002dd20
					_FSM_state = my_state_read_mv_data;
2002dd0c:	b0000000 	imm	0
2002dd10:	e8740654 	lwi	r3, r20, 1620
2002dd14:	30800009 	addik	r4, r0, 9
2002dd18:	f8830000 	swi	r4, r3, 0
					goto finished;
2002dd1c:	b80008c4 	bri	2244		// 2002e5e0
				}
				read_mv_data();
2002dd20:	b0000000 	imm	0
2002dd24:	e87407d4 	lwi	r3, r20, 2004
2002dd28:	99fc1800 	brald	r15, r3
2002dd2c:	80000000 	or	r0, r0, r0
				i++;
2002dd30:	e873001c 	lwi	r3, r19, 28
2002dd34:	30630001 	addik	r3, r3, 1
2002dd38:	f873001c 	swi	r3, r19, 28
				goto l_read_mv_data;
2002dd3c:	b800ff08 	bri	-248		// 2002dc44
			} else {
				_FSM_state = my_state_read_mv_data;
2002dd40:	b0000000 	imm	0
2002dd44:	e8740654 	lwi	r3, r20, 1620
2002dd48:	30800009 	addik	r4, r0, 9
2002dd4c:	f8830000 	swi	r4, r3, 0
				goto finished;
2002dd50:	b8000890 	bri	2192		// 2002e5e0

2002dd54 <$L673>:
		case my_state_read_mv:
			goto l_read_mv;
		case my_state_read_mv_data:
			goto l_read_mv_data;
		case my_state_read_start_code:
			goto l_read_start_code;
2002dd54:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_mv_data;
				goto finished;
			}
		l_read_start_code:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002dd58:	b000ffff 	imm	-1
2002dd5c:	b9f4edc8 	brlid	r15, -4664	// 2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002dd60:	80000000 	or	r0, r0, r0
2002dd64:	e893001c 	lwi	r4, r19, 28
2002dd68:	10641800 	addk	r3, r4, r3
2002dd6c:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_start_code()) {
2002dd70:	b0000000 	imm	0
2002dd74:	e89406f8 	lwi	r4, r20, 1784
2002dd78:	99fc2000 	brald	r15, r4
2002dd7c:	80000000 	or	r0, r0, r0
2002dd80:	bc030044 	beqi	r3, 68		// 2002ddc4
				int stop = 0;
2002dd84:	f813004c 	swi	r0, r19, 76
				if (stop != 0) {
2002dd88:	e873004c 	lwi	r3, r19, 76
2002dd8c:	bc030018 	beqi	r3, 24		// 2002dda4
					_FSM_state = my_state_read_start_code;
2002dd90:	b0000000 	imm	0
2002dd94:	e8740654 	lwi	r3, r20, 1620
2002dd98:	3080000a 	addik	r4, r0, 10
2002dd9c:	f8830000 	swi	r4, r3, 0
					goto finished;
2002dda0:	b8000840 	bri	2112		// 2002e5e0
				}
				read_start_code();
2002dda4:	b0000000 	imm	0
2002dda8:	e87406fc 	lwi	r3, r20, 1788
2002ddac:	99fc1800 	brald	r15, r3
2002ddb0:	80000000 	or	r0, r0, r0
				i++;
2002ddb4:	e873001c 	lwi	r3, r19, 28
2002ddb8:	30630001 	addik	r3, r3, 1
2002ddbc:	f873001c 	swi	r3, r19, 28
				goto l_find_header;
2002ddc0:	b800efac 	bri	-4180		// 2002cd6c
			} else {
				_FSM_state = my_state_read_start_code;
2002ddc4:	b0000000 	imm	0
2002ddc8:	e8740654 	lwi	r3, r20, 1620
2002ddcc:	3080000a 	addik	r4, r0, 10
2002ddd0:	f8830000 	swi	r4, r3, 0
				goto finished;
2002ddd4:	b800080c 	bri	2060		// 2002e5e0

2002ddd8 <$L674>:
		case my_state_read_mv_data:
			goto l_read_mv_data;
		case my_state_read_start_code:
			goto l_read_start_code;
		case my_state_read_vol:
			goto l_read_vol;
2002ddd8:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_start_code;
				goto finished;
			}
		l_read_vol:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002dddc:	b000ffff 	imm	-1
2002dde0:	b9f4ed44 	brlid	r15, -4796	// 2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002dde4:	80000000 	or	r0, r0, r0
2002dde8:	e893001c 	lwi	r4, r19, 28
2002ddec:	10641800 	addk	r3, r4, r3
2002ddf0:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_vol_start()) {
2002ddf4:	b0000000 	imm	0
2002ddf8:	e8940718 	lwi	r4, r20, 1816
2002ddfc:	99fc2000 	brald	r15, r4
2002de00:	80000000 	or	r0, r0, r0
2002de04:	bc030044 	beqi	r3, 68		// 2002de48
				int stop = 0;
2002de08:	f813005c 	swi	r0, r19, 92
				if (stop != 0) {
2002de0c:	e873005c 	lwi	r3, r19, 92
2002de10:	bc030018 	beqi	r3, 24		// 2002de28
					_FSM_state = my_state_read_vol;
2002de14:	b0000000 	imm	0
2002de18:	e8740654 	lwi	r3, r20, 1620
2002de1c:	3080000b 	addik	r4, r0, 11
2002de20:	f8830000 	swi	r4, r3, 0
					goto finished;
2002de24:	b80007bc 	bri	1980		// 2002e5e0
				}
				read_vol_start();
2002de28:	b0000000 	imm	0
2002de2c:	e874071c 	lwi	r3, r20, 1820
2002de30:	99fc1800 	brald	r15, r3
2002de34:	80000000 	or	r0, r0, r0
				i++;
2002de38:	e873001c 	lwi	r3, r19, 28
2002de3c:	30630001 	addik	r3, r3, 1
2002de40:	f873001c 	swi	r3, r19, 28
				goto l_read_vol_vbv_parameters;
2002de44:	b800001c 	bri	28		// 2002de60
			} else {
				_FSM_state = my_state_read_vol;
2002de48:	b0000000 	imm	0
2002de4c:	e8740654 	lwi	r3, r20, 1620
2002de50:	3080000b 	addik	r4, r0, 11
2002de54:	f8830000 	swi	r4, r3, 0
				goto finished;
2002de58:	b8000788 	bri	1928		// 2002e5e0

2002de5c <$L675>:
		case my_state_read_start_code:
			goto l_read_start_code;
		case my_state_read_vol:
			goto l_read_vol;
		case my_state_read_vol_vbv_parameters:
			goto l_read_vol_vbv_parameters;
2002de5c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_vol;
				goto finished;
			}
		l_read_vol_vbv_parameters:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002de60:	b000ffff 	imm	-1
2002de64:	b9f4ecc0 	brlid	r15, -4928	// 2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002de68:	80000000 	or	r0, r0, r0
2002de6c:	e893001c 	lwi	r4, r19, 28
2002de70:	10641800 	addk	r3, r4, r3
2002de74:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_vol_vbv_parameters1()) {
2002de78:	b0000000 	imm	0
2002de7c:	e8940720 	lwi	r4, r20, 1824
2002de80:	99fc2000 	brald	r15, r4
2002de84:	80000000 	or	r0, r0, r0
2002de88:	bc030044 	beqi	r3, 68		// 2002decc
				int stop = 0;
2002de8c:	f8130060 	swi	r0, r19, 96
				if (stop != 0) {
2002de90:	e8730060 	lwi	r3, r19, 96
2002de94:	bc030018 	beqi	r3, 24		// 2002deac
					_FSM_state = my_state_read_vol_vbv_parameters;
2002de98:	b0000000 	imm	0
2002de9c:	e8740654 	lwi	r3, r20, 1620
2002dea0:	3080000c 	addik	r4, r0, 12
2002dea4:	f8830000 	swi	r4, r3, 0
					goto finished;
2002dea8:	b8000738 	bri	1848		// 2002e5e0
				}
				read_vol_vbv_parameters1();
2002deac:	b0000000 	imm	0
2002deb0:	e8740724 	lwi	r3, r20, 1828
2002deb4:	99fc1800 	brald	r15, r3
2002deb8:	80000000 	or	r0, r0, r0
				i++;
2002debc:	e873001c 	lwi	r3, r19, 28
2002dec0:	30630001 	addik	r3, r3, 1
2002dec4:	f873001c 	swi	r3, r19, 28
				goto l_read_vol_vbv_parameters2;
2002dec8:	b800001c 	bri	28		// 2002dee4
			} else {
				_FSM_state = my_state_read_vol_vbv_parameters;
2002decc:	b0000000 	imm	0
2002ded0:	e8740654 	lwi	r3, r20, 1620
2002ded4:	3080000c 	addik	r4, r0, 12
2002ded8:	f8830000 	swi	r4, r3, 0
				goto finished;
2002dedc:	b8000704 	bri	1796		// 2002e5e0

2002dee0 <$L676>:
		case my_state_read_vol:
			goto l_read_vol;
		case my_state_read_vol_vbv_parameters:
			goto l_read_vol_vbv_parameters;
		case my_state_read_vol_vbv_parameters2:
			goto l_read_vol_vbv_parameters2;
2002dee0:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_vol_vbv_parameters;
				goto finished;
			}
		l_read_vol_vbv_parameters2:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002dee4:	b000ffff 	imm	-1
2002dee8:	b9f4ec3c 	brlid	r15, -5060	// 2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002deec:	80000000 	or	r0, r0, r0
2002def0:	e893001c 	lwi	r4, r19, 28
2002def4:	10641800 	addk	r3, r4, r3
2002def8:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_vol_vbv_parameters2()) {
2002defc:	b0000000 	imm	0
2002df00:	e8940728 	lwi	r4, r20, 1832
2002df04:	99fc2000 	brald	r15, r4
2002df08:	80000000 	or	r0, r0, r0
2002df0c:	bc030044 	beqi	r3, 68		// 2002df50
				int stop = 0;
2002df10:	f8130064 	swi	r0, r19, 100
				if (stop != 0) {
2002df14:	e8730064 	lwi	r3, r19, 100
2002df18:	bc030018 	beqi	r3, 24		// 2002df30
					_FSM_state = my_state_read_vol_vbv_parameters2;
2002df1c:	b0000000 	imm	0
2002df20:	e8740654 	lwi	r3, r20, 1620
2002df24:	3080000d 	addik	r4, r0, 13
2002df28:	f8830000 	swi	r4, r3, 0
					goto finished;
2002df2c:	b80006b4 	bri	1716		// 2002e5e0
				}
				read_vol_vbv_parameters2();
2002df30:	b0000000 	imm	0
2002df34:	e874072c 	lwi	r3, r20, 1836
2002df38:	99fc1800 	brald	r15, r3
2002df3c:	80000000 	or	r0, r0, r0
				i++;
2002df40:	e873001c 	lwi	r3, r19, 28
2002df44:	30630001 	addik	r3, r3, 1
2002df48:	f873001c 	swi	r3, r19, 28
				goto l_read_vol_video_object_layer_shape;
2002df4c:	b800001c 	bri	28		// 2002df68
			} else {
				_FSM_state = my_state_read_vol_vbv_parameters2;
2002df50:	b0000000 	imm	0
2002df54:	e8740654 	lwi	r3, r20, 1620
2002df58:	3080000d 	addik	r4, r0, 13
2002df5c:	f8830000 	swi	r4, r3, 0
				goto finished;
2002df60:	b8000680 	bri	1664		// 2002e5e0

2002df64 <$L677>:
		case my_state_read_vol_vbv_parameters:
			goto l_read_vol_vbv_parameters;
		case my_state_read_vol_vbv_parameters2:
			goto l_read_vol_vbv_parameters2;
		case my_state_read_vol_video_object_layer_shape:
			goto l_read_vol_video_object_layer_shape;
2002df64:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_vol_vbv_parameters2;
				goto finished;
			}
		l_read_vol_video_object_layer_shape:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002df68:	b000ffff 	imm	-1
2002df6c:	b9f4ebb8 	brlid	r15, -5192	// 2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002df70:	80000000 	or	r0, r0, r0
2002df74:	e893001c 	lwi	r4, r19, 28
2002df78:	10641800 	addk	r3, r4, r3
2002df7c:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_vol_video_object_layer_shape()) {
2002df80:	b0000000 	imm	0
2002df84:	e8940730 	lwi	r4, r20, 1840
2002df88:	99fc2000 	brald	r15, r4
2002df8c:	80000000 	or	r0, r0, r0
2002df90:	bc030044 	beqi	r3, 68		// 2002dfd4
				int stop = 0;
2002df94:	f8130068 	swi	r0, r19, 104
				if (stop != 0) {
2002df98:	e8730068 	lwi	r3, r19, 104
2002df9c:	bc030018 	beqi	r3, 24		// 2002dfb4
					_FSM_state = my_state_read_vol_video_object_layer_shape;
2002dfa0:	b0000000 	imm	0
2002dfa4:	e8740654 	lwi	r3, r20, 1620
2002dfa8:	3080000e 	addik	r4, r0, 14
2002dfac:	f8830000 	swi	r4, r3, 0
					goto finished;
2002dfb0:	b8000630 	bri	1584		// 2002e5e0
				}
				read_vol_video_object_layer_shape();
2002dfb4:	b0000000 	imm	0
2002dfb8:	e8740734 	lwi	r3, r20, 1844
2002dfbc:	99fc1800 	brald	r15, r3
2002dfc0:	80000000 	or	r0, r0, r0
				i++;
2002dfc4:	e873001c 	lwi	r3, r19, 28
2002dfc8:	30630001 	addik	r3, r3, 1
2002dfcc:	f873001c 	swi	r3, r19, 28
				goto l_read_vol_video_object_layer_width;
2002dfd0:	b800001c 	bri	28		// 2002dfec
			} else {
				_FSM_state = my_state_read_vol_video_object_layer_shape;
2002dfd4:	b0000000 	imm	0
2002dfd8:	e8740654 	lwi	r3, r20, 1620
2002dfdc:	3080000e 	addik	r4, r0, 14
2002dfe0:	f8830000 	swi	r4, r3, 0
				goto finished;
2002dfe4:	b80005fc 	bri	1532		// 2002e5e0

2002dfe8 <$L678>:
		case my_state_read_vol_vbv_parameters2:
			goto l_read_vol_vbv_parameters2;
		case my_state_read_vol_video_object_layer_shape:
			goto l_read_vol_video_object_layer_shape;
		case my_state_read_vol_video_object_layer_width:
			goto l_read_vol_video_object_layer_width;
2002dfe8:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_vol_video_object_layer_shape;
				goto finished;
			}
		l_read_vol_video_object_layer_width:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002dfec:	b000ffff 	imm	-1
2002dff0:	b9f4eb34 	brlid	r15, -5324	// 2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002dff4:	80000000 	or	r0, r0, r0
2002dff8:	e893001c 	lwi	r4, r19, 28
2002dffc:	10641800 	addk	r3, r4, r3
2002e000:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_vol_video_object_layer_width()) {
2002e004:	b0000000 	imm	0
2002e008:	e8940738 	lwi	r4, r20, 1848
2002e00c:	99fc2000 	brald	r15, r4
2002e010:	80000000 	or	r0, r0, r0
2002e014:	bc030044 	beqi	r3, 68		// 2002e058
				int stop = 0;
2002e018:	f813006c 	swi	r0, r19, 108
				if (stop != 0) {
2002e01c:	e873006c 	lwi	r3, r19, 108
2002e020:	bc030018 	beqi	r3, 24		// 2002e038
					_FSM_state = my_state_read_vol_video_object_layer_width;
2002e024:	b0000000 	imm	0
2002e028:	e8740654 	lwi	r3, r20, 1620
2002e02c:	3080000f 	addik	r4, r0, 15
2002e030:	f8830000 	swi	r4, r3, 0
					goto finished;
2002e034:	b80005ac 	bri	1452		// 2002e5e0
				}
				read_vol_video_object_layer_width();
2002e038:	b0000000 	imm	0
2002e03c:	e874073c 	lwi	r3, r20, 1852
2002e040:	99fc1800 	brald	r15, r3
2002e044:	80000000 	or	r0, r0, r0
				i++;
2002e048:	e873001c 	lwi	r3, r19, 28
2002e04c:	30630001 	addik	r3, r3, 1
2002e050:	f873001c 	swi	r3, r19, 28
				goto l_look_for_Sequence_Header;
2002e054:	b800ee44 	bri	-4540		// 2002ce98
			} else {
				_FSM_state = my_state_read_vol_video_object_layer_width;
2002e058:	b0000000 	imm	0
2002e05c:	e8740654 	lwi	r3, r20, 1620
2002e060:	3080000f 	addik	r4, r0, 15
2002e064:	f8830000 	swi	r4, r3, 0
				goto finished;
2002e068:	b8000578 	bri	1400		// 2002e5e0

2002e06c <$L679>:
		case my_state_read_vol_video_object_layer_shape:
			goto l_read_vol_video_object_layer_shape;
		case my_state_read_vol_video_object_layer_width:
			goto l_read_vol_video_object_layer_width;
		case my_state_read_vop:
			goto l_read_vop;
2002e06c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_vol_video_object_layer_width;
				goto finished;
			}
		l_read_vop:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002e070:	b000ffff 	imm	-1
2002e074:	b9f4eab0 	brlid	r15, -5456	// 2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002e078:	80000000 	or	r0, r0, r0
2002e07c:	e893001c 	lwi	r4, r19, 28
2002e080:	10641800 	addk	r3, r4, r3
2002e084:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_vop()) {
2002e088:	b0000000 	imm	0
2002e08c:	e8940740 	lwi	r4, r20, 1856
2002e090:	99fc2000 	brald	r15, r4
2002e094:	80000000 	or	r0, r0, r0
2002e098:	bc030044 	beqi	r3, 68		// 2002e0dc
				int stop = 0;
2002e09c:	f8130070 	swi	r0, r19, 112
				if (stop != 0) {
2002e0a0:	e8730070 	lwi	r3, r19, 112
2002e0a4:	bc030018 	beqi	r3, 24		// 2002e0bc
					_FSM_state = my_state_read_vop;
2002e0a8:	b0000000 	imm	0
2002e0ac:	e8740654 	lwi	r3, r20, 1620
2002e0b0:	30800010 	addik	r4, r0, 16	// 10 <_vector_interrupt>
2002e0b4:	f8830000 	swi	r4, r3, 0
					goto finished;
2002e0b8:	b8000528 	bri	1320		// 2002e5e0
				}
				read_vop();
2002e0bc:	b0000000 	imm	0
2002e0c0:	e8740744 	lwi	r3, r20, 1860
2002e0c4:	99fc1800 	brald	r15, r3
2002e0c8:	80000000 	or	r0, r0, r0
				i++;
2002e0cc:	e873001c 	lwi	r3, r19, 28
2002e0d0:	30630001 	addik	r3, r3, 1
2002e0d4:	f873001c 	swi	r3, r19, 28
				goto l_read_vop_coding_type;
2002e0d8:	b80002d8 	bri	728		// 2002e3b0
			} else {
				_FSM_state = my_state_read_vop;
2002e0dc:	b0000000 	imm	0
2002e0e0:	e8740654 	lwi	r3, r20, 1620
2002e0e4:	30800010 	addik	r4, r0, 16	// 10 <_vector_interrupt>
2002e0e8:	f8830000 	swi	r4, r3, 0
				goto finished;
2002e0ec:	b80004f4 	bri	1268		// 2002e5e0

2002e0f0 <$L680>:
		case my_state_read_vol_video_object_layer_width:
			goto l_read_vol_video_object_layer_width;
		case my_state_read_vop:
			goto l_read_vop;
		case my_state_read_vop_coded:
			goto l_read_vop_coded;
2002e0f0:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_vop;
				goto finished;
			}
		l_read_vop_coded:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002e0f4:	b000ffff 	imm	-1
2002e0f8:	b9f4ea2c 	brlid	r15, -5588	// 2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002e0fc:	80000000 	or	r0, r0, r0
2002e100:	e893001c 	lwi	r4, r19, 28
2002e104:	10641800 	addk	r3, r4, r3
2002e108:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_vop_coded_coded()) {
2002e10c:	b0000000 	imm	0
2002e110:	e8940758 	lwi	r4, r20, 1880
2002e114:	99fc2000 	brald	r15, r4
2002e118:	80000000 	or	r0, r0, r0
2002e11c:	bc030228 	beqi	r3, 552		// 2002e344
				int stop = 0;
2002e120:	f8130038 	swi	r0, r19, 56
				if (3 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[0]) {
2002e124:	b0000000 	imm	0
2002e128:	e8740550 	lwi	r3, r20, 1360
2002e12c:	e8630000 	lwi	r3, r3, 0
2002e130:	e863000c 	lwi	r3, r3, 12
2002e134:	e8830000 	lwi	r4, r3, 0
2002e138:	b0000000 	imm	0
2002e13c:	e8740560 	lwi	r3, r20, 1376
2002e140:	e8630000 	lwi	r3, r3, 0
2002e144:	14632000 	rsubk	r3, r3, r4
2002e148:	30830200 	addik	r4, r3, 512
2002e14c:	30600002 	addik	r3, r0, 2
2002e150:	16441803 	cmpu	r18, r4, r3
2002e154:	bc52000c 	blti	r18, 12		// 2002e160
					stop = 1;
2002e158:	30600001 	addik	r3, r0, 1
2002e15c:	f8730038 	swi	r3, r19, 56
				}
				if (3 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[1]) {
2002e160:	b0000000 	imm	0
2002e164:	e8740550 	lwi	r3, r20, 1360
2002e168:	e8630000 	lwi	r3, r3, 0
2002e16c:	e863000c 	lwi	r3, r3, 12
2002e170:	30630004 	addik	r3, r3, 4
2002e174:	e8830000 	lwi	r4, r3, 0
2002e178:	b0000000 	imm	0
2002e17c:	e8740560 	lwi	r3, r20, 1376
2002e180:	e8630000 	lwi	r3, r3, 0
2002e184:	14632000 	rsubk	r3, r3, r4
2002e188:	30830200 	addik	r4, r3, 512
2002e18c:	30600002 	addik	r3, r0, 2
2002e190:	16441803 	cmpu	r18, r4, r3
2002e194:	bc52000c 	blti	r18, 12		// 2002e1a0
					stop = 1;
2002e198:	30600001 	addik	r3, r0, 1
2002e19c:	f8730038 	swi	r3, r19, 56
				}
				if (3 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[2]) {
2002e1a0:	b0000000 	imm	0
2002e1a4:	e8740550 	lwi	r3, r20, 1360
2002e1a8:	e8630000 	lwi	r3, r3, 0
2002e1ac:	e863000c 	lwi	r3, r3, 12
2002e1b0:	30630008 	addik	r3, r3, 8
2002e1b4:	e8830000 	lwi	r4, r3, 0
2002e1b8:	b0000000 	imm	0
2002e1bc:	e8740560 	lwi	r3, r20, 1376
2002e1c0:	e8630000 	lwi	r3, r3, 0
2002e1c4:	14632000 	rsubk	r3, r3, r4
2002e1c8:	30830200 	addik	r4, r3, 512
2002e1cc:	30600002 	addik	r3, r0, 2
2002e1d0:	16441803 	cmpu	r18, r4, r3
2002e1d4:	bc52000c 	blti	r18, 12		// 2002e1e0
					stop = 1;
2002e1d8:	30600001 	addik	r3, r0, 1
2002e1dc:	f8730038 	swi	r3, r19, 56
				}
				if (3 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[3]) {
2002e1e0:	b0000000 	imm	0
2002e1e4:	e8740550 	lwi	r3, r20, 1360
2002e1e8:	e8630000 	lwi	r3, r3, 0
2002e1ec:	e863000c 	lwi	r3, r3, 12
2002e1f0:	3063000c 	addik	r3, r3, 12
2002e1f4:	e8830000 	lwi	r4, r3, 0
2002e1f8:	b0000000 	imm	0
2002e1fc:	e8740560 	lwi	r3, r20, 1376
2002e200:	e8630000 	lwi	r3, r3, 0
2002e204:	14632000 	rsubk	r3, r3, r4
2002e208:	30830200 	addik	r4, r3, 512
2002e20c:	30600002 	addik	r3, r0, 2
2002e210:	16441803 	cmpu	r18, r4, r3
2002e214:	bc52000c 	blti	r18, 12		// 2002e220
					stop = 1;
2002e218:	30600001 	addik	r3, r0, 1
2002e21c:	f8730038 	swi	r3, r19, 56
				}
				if (3 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[4]) {
2002e220:	b0000000 	imm	0
2002e224:	e8740550 	lwi	r3, r20, 1360
2002e228:	e8630000 	lwi	r3, r3, 0
2002e22c:	e863000c 	lwi	r3, r3, 12
2002e230:	30630010 	addik	r3, r3, 16
2002e234:	e8830000 	lwi	r4, r3, 0
2002e238:	b0000000 	imm	0
2002e23c:	e8740560 	lwi	r3, r20, 1376
2002e240:	e8630000 	lwi	r3, r3, 0
2002e244:	14632000 	rsubk	r3, r3, r4
2002e248:	30830200 	addik	r4, r3, 512
2002e24c:	30600002 	addik	r3, r0, 2
2002e250:	16441803 	cmpu	r18, r4, r3
2002e254:	bc52000c 	blti	r18, 12		// 2002e260
					stop = 1;
2002e258:	30600001 	addik	r3, r0, 1
2002e25c:	f8730038 	swi	r3, r19, 56
				}
				if (3 > SIZE_BTYPE - index_BTYPE + decoder_parser_parseheaders_BTYPE->read_inds[5]) {
2002e260:	b0000000 	imm	0
2002e264:	e8740550 	lwi	r3, r20, 1360
2002e268:	e8630000 	lwi	r3, r3, 0
2002e26c:	e863000c 	lwi	r3, r3, 12
2002e270:	30630014 	addik	r3, r3, 20
2002e274:	e8830000 	lwi	r4, r3, 0
2002e278:	b0000000 	imm	0
2002e27c:	e8740560 	lwi	r3, r20, 1376
2002e280:	e8630000 	lwi	r3, r3, 0
2002e284:	14632000 	rsubk	r3, r3, r4
2002e288:	30830200 	addik	r4, r3, 512
2002e28c:	30600002 	addik	r3, r0, 2
2002e290:	16441803 	cmpu	r18, r4, r3
2002e294:	bc52000c 	blti	r18, 12		// 2002e2a0
					stop = 1;
2002e298:	30600001 	addik	r3, r0, 1
2002e29c:	f8730038 	swi	r3, r19, 56
				}
				if (1 > SIZE_WIDTH - index_WIDTH + decoder_parser_parseheaders_WIDTH->read_inds[0]) {
2002e2a0:	b0000000 	imm	0
2002e2a4:	e8740548 	lwi	r3, r20, 1352
2002e2a8:	e8630000 	lwi	r3, r3, 0
2002e2ac:	e863000c 	lwi	r3, r3, 12
2002e2b0:	e8830000 	lwi	r4, r3, 0
2002e2b4:	b0000000 	imm	0
2002e2b8:	e8740588 	lwi	r3, r20, 1416
2002e2bc:	e8630000 	lwi	r3, r3, 0
2002e2c0:	14632000 	rsubk	r3, r3, r4
2002e2c4:	a863fe00 	xori	r3, r3, -512
2002e2c8:	bc23000c 	bnei	r3, 12		// 2002e2d4
					stop = 1;
2002e2cc:	30600001 	addik	r3, r0, 1
2002e2d0:	f8730038 	swi	r3, r19, 56
				}
				if (1 > SIZE_HEIGHT - index_HEIGHT + decoder_parser_parseheaders_HEIGHT->read_inds[0]) {
2002e2d4:	b0000000 	imm	0
2002e2d8:	e874053c 	lwi	r3, r20, 1340
2002e2dc:	e8630000 	lwi	r3, r3, 0
2002e2e0:	e863000c 	lwi	r3, r3, 12
2002e2e4:	e8830000 	lwi	r4, r3, 0
2002e2e8:	b0000000 	imm	0
2002e2ec:	e8740590 	lwi	r3, r20, 1424
2002e2f0:	e8630000 	lwi	r3, r3, 0
2002e2f4:	14632000 	rsubk	r3, r3, r4
2002e2f8:	a863fe00 	xori	r3, r3, -512
2002e2fc:	bc23000c 	bnei	r3, 12		// 2002e308
					stop = 1;
2002e300:	30600001 	addik	r3, r0, 1
2002e304:	f8730038 	swi	r3, r19, 56
				}
				if (stop != 0) {
2002e308:	e8730038 	lwi	r3, r19, 56
2002e30c:	bc030018 	beqi	r3, 24		// 2002e324
					_FSM_state = my_state_read_vop_coded;
2002e310:	b0000000 	imm	0
2002e314:	e8740654 	lwi	r3, r20, 1620
2002e318:	30800011 	addik	r4, r0, 17
2002e31c:	f8830000 	swi	r4, r3, 0
					goto finished;
2002e320:	b80002c0 	bri	704		// 2002e5e0
				}
				read_vop_coded_coded();
2002e324:	b0000000 	imm	0
2002e328:	e874075c 	lwi	r3, r20, 1884
2002e32c:	99fc1800 	brald	r15, r3
2002e330:	80000000 	or	r0, r0, r0
				i++;
2002e334:	e873001c 	lwi	r3, r19, 28
2002e338:	30630001 	addik	r3, r3, 1
2002e33c:	f873001c 	swi	r3, r19, 28
				goto l_read_mb;
2002e340:	b800f548 	bri	-2744		// 2002d888
			} else if (isSchedulable_read_vop_coded_uncoded()) {
2002e344:	b0000000 	imm	0
2002e348:	e8940760 	lwi	r4, r20, 1888
2002e34c:	99fc2000 	brald	r15, r4
2002e350:	80000000 	or	r0, r0, r0
2002e354:	bc030044 	beqi	r3, 68		// 2002e398
				int stop = 0;
2002e358:	f813007c 	swi	r0, r19, 124
				if (stop != 0) {
2002e35c:	e873007c 	lwi	r3, r19, 124
2002e360:	bc030018 	beqi	r3, 24		// 2002e378
					_FSM_state = my_state_read_vop_coded;
2002e364:	b0000000 	imm	0
2002e368:	e8740654 	lwi	r3, r20, 1620
2002e36c:	30800011 	addik	r4, r0, 17
2002e370:	f8830000 	swi	r4, r3, 0
					goto finished;
2002e374:	b800026c 	bri	620		// 2002e5e0
				}
				read_vop_coded_uncoded();
2002e378:	b0000000 	imm	0
2002e37c:	e8740764 	lwi	r3, r20, 1892
2002e380:	99fc1800 	brald	r15, r3
2002e384:	80000000 	or	r0, r0, r0
				i++;
2002e388:	e873001c 	lwi	r3, r19, 28
2002e38c:	30630001 	addik	r3, r3, 1
2002e390:	f873001c 	swi	r3, r19, 28
				goto l_look_for_Sequence_Header;
2002e394:	b800eb04 	bri	-5372		// 2002ce98
			} else {
				_FSM_state = my_state_read_vop_coded;
2002e398:	b0000000 	imm	0
2002e39c:	e8740654 	lwi	r3, r20, 1620
2002e3a0:	30800011 	addik	r4, r0, 17
2002e3a4:	f8830000 	swi	r4, r3, 0
				goto finished;
2002e3a8:	b8000238 	bri	568		// 2002e5e0

2002e3ac <$L681>:
		case my_state_read_vop:
			goto l_read_vop;
		case my_state_read_vop_coded:
			goto l_read_vop_coded;
		case my_state_read_vop_coding_type:
			goto l_read_vop_coding_type;
2002e3ac:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_vop_coded;
				goto finished;
			}
		l_read_vop_coding_type:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002e3b0:	b000ffff 	imm	-1
2002e3b4:	b9f4e770 	brlid	r15, -6288	// 2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002e3b8:	80000000 	or	r0, r0, r0
2002e3bc:	e893001c 	lwi	r4, r19, 28
2002e3c0:	10641800 	addk	r3, r4, r3
2002e3c4:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_read_vop_coding_type_supported()) {
2002e3c8:	b0000000 	imm	0
2002e3cc:	e8940748 	lwi	r4, r20, 1864
2002e3d0:	99fc2000 	brald	r15, r4
2002e3d4:	80000000 	or	r0, r0, r0
2002e3d8:	bc030044 	beqi	r3, 68		// 2002e41c
				int stop = 0;
2002e3dc:	f8130074 	swi	r0, r19, 116
				if (stop != 0) {
2002e3e0:	e8730074 	lwi	r3, r19, 116
2002e3e4:	bc030018 	beqi	r3, 24		// 2002e3fc
					_FSM_state = my_state_read_vop_coding_type;
2002e3e8:	b0000000 	imm	0
2002e3ec:	e8740654 	lwi	r3, r20, 1620
2002e3f0:	30800012 	addik	r4, r0, 18
2002e3f4:	f8830000 	swi	r4, r3, 0
					goto finished;
2002e3f8:	b80001e8 	bri	488		// 2002e5e0
				}
				read_vop_coding_type_supported();
2002e3fc:	b0000000 	imm	0
2002e400:	e874074c 	lwi	r3, r20, 1868
2002e404:	99fc1800 	brald	r15, r3
2002e408:	80000000 	or	r0, r0, r0
				i++;
2002e40c:	e873001c 	lwi	r3, r19, 28
2002e410:	30630001 	addik	r3, r3, 1
2002e414:	f873001c 	swi	r3, r19, 28
				goto l_read_vop_coded;
2002e418:	b800fcdc 	bri	-804		// 2002e0f4
			} else if (isSchedulable_read_vop_coding_type_unsupported()) {
2002e41c:	b0000000 	imm	0
2002e420:	e8940750 	lwi	r4, r20, 1872
2002e424:	99fc2000 	brald	r15, r4
2002e428:	80000000 	or	r0, r0, r0
2002e42c:	bc030044 	beqi	r3, 68		// 2002e470
				int stop = 0;
2002e430:	f8130078 	swi	r0, r19, 120
				if (stop != 0) {
2002e434:	e8730078 	lwi	r3, r19, 120
2002e438:	bc030018 	beqi	r3, 24		// 2002e450
					_FSM_state = my_state_read_vop_coding_type;
2002e43c:	b0000000 	imm	0
2002e440:	e8740654 	lwi	r3, r20, 1620
2002e444:	30800012 	addik	r4, r0, 18
2002e448:	f8830000 	swi	r4, r3, 0
					goto finished;
2002e44c:	b8000194 	bri	404		// 2002e5e0
				}
				read_vop_coding_type_unsupported();
2002e450:	b0000000 	imm	0
2002e454:	e8740754 	lwi	r3, r20, 1876
2002e458:	99fc1800 	brald	r15, r3
2002e45c:	80000000 	or	r0, r0, r0
				i++;
2002e460:	e873001c 	lwi	r3, r19, 28
2002e464:	30630001 	addik	r3, r3, 1
2002e468:	f873001c 	swi	r3, r19, 28
				goto l_look_for_Sequence_Header;
2002e46c:	b800ea2c 	bri	-5588		// 2002ce98
			} else {
				_FSM_state = my_state_read_vop_coding_type;
2002e470:	b0000000 	imm	0
2002e474:	e8740654 	lwi	r3, r20, 1620
2002e478:	30800012 	addik	r4, r0, 18
2002e47c:	f8830000 	swi	r4, r3, 0
				goto finished;
2002e480:	b8000160 	bri	352		// 2002e5e0

2002e484 <$L682>:
		case my_state_read_vop_coded:
			goto l_read_vop_coded;
		case my_state_read_vop_coding_type:
			goto l_read_vop_coding_type;
		case my_state_search_start_code:
			goto l_search_start_code;
2002e484:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read_vop_coding_type;
				goto finished;
			}
		l_search_start_code:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002e488:	b000ffff 	imm	-1
2002e48c:	b9f4e698 	brlid	r15, -6504	// 2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002e490:	80000000 	or	r0, r0, r0
2002e494:	e893001c 	lwi	r4, r19, 28
2002e498:	10641800 	addk	r3, r4, r3
2002e49c:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_start_code_search()) {
2002e4a0:	b0000000 	imm	0
2002e4a4:	e89407e0 	lwi	r4, r20, 2016
2002e4a8:	99fc2000 	brald	r15, r4
2002e4ac:	80000000 	or	r0, r0, r0
2002e4b0:	bc030044 	beqi	r3, 68		// 2002e4f4
				int stop = 0;
2002e4b4:	f8130044 	swi	r0, r19, 68
				if (stop != 0) {
2002e4b8:	e8730044 	lwi	r3, r19, 68
2002e4bc:	bc030018 	beqi	r3, 24		// 2002e4d4
					_FSM_state = my_state_search_start_code;
2002e4c0:	b0000000 	imm	0
2002e4c4:	e8740654 	lwi	r3, r20, 1620
2002e4c8:	30800013 	addik	r4, r0, 19
2002e4cc:	f8830000 	swi	r4, r3, 0
					goto finished;
2002e4d0:	b8000110 	bri	272		// 2002e5e0
				}
				start_code_search();
2002e4d4:	b0000000 	imm	0
2002e4d8:	e87407e4 	lwi	r3, r20, 2020
2002e4dc:	99fc1800 	brald	r15, r3
2002e4e0:	80000000 	or	r0, r0, r0
				i++;
2002e4e4:	e873001c 	lwi	r3, r19, 28
2002e4e8:	30630001 	addik	r3, r3, 1
2002e4ec:	f873001c 	swi	r3, r19, 28
				goto l_search_start_code;
2002e4f0:	b800ff98 	bri	-104		// 2002e488
			} else if (isSchedulable_start_code_done()) {
2002e4f4:	b0000000 	imm	0
2002e4f8:	e89407e8 	lwi	r4, r20, 2024
2002e4fc:	99fc2000 	brald	r15, r4
2002e500:	80000000 	or	r0, r0, r0
2002e504:	bc030044 	beqi	r3, 68		// 2002e548
				int stop = 0;
2002e508:	f8130048 	swi	r0, r19, 72
				if (stop != 0) {
2002e50c:	e8730048 	lwi	r3, r19, 72
2002e510:	bc030018 	beqi	r3, 24		// 2002e528
					_FSM_state = my_state_search_start_code;
2002e514:	b0000000 	imm	0
2002e518:	e8740654 	lwi	r3, r20, 1620
2002e51c:	30800013 	addik	r4, r0, 19
2002e520:	f8830000 	swi	r4, r3, 0
					goto finished;
2002e524:	b80000bc 	bri	188		// 2002e5e0
				}
				start_code_done();
2002e528:	b0000000 	imm	0
2002e52c:	e87407ec 	lwi	r3, r20, 2028
2002e530:	99fc1800 	brald	r15, r3
2002e534:	80000000 	or	r0, r0, r0
				i++;
2002e538:	e873001c 	lwi	r3, r19, 28
2002e53c:	30630001 	addik	r3, r3, 1
2002e540:	f873001c 	swi	r3, r19, 28
				goto l_read_start_code;
2002e544:	b800f814 	bri	-2028		// 2002dd58
			} else {
				_FSM_state = my_state_search_start_code;
2002e548:	b0000000 	imm	0
2002e54c:	e8740654 	lwi	r3, r20, 1620
2002e550:	30800013 	addik	r4, r0, 19
2002e554:	f8830000 	swi	r4, r3, 0
				goto finished;
2002e558:	b8000088 	bri	136		// 2002e5e0

2002e55c <$L662>:
		case my_state_read_vop_coding_type:
			goto l_read_vop_coding_type;
		case my_state_search_start_code:
			goto l_search_start_code;
		case my_state_undefined:
			goto l_undefined;
2002e55c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_search_start_code;
				goto finished;
			}
		l_undefined:
			i += decoder_parser_parseheaders_outside_FSM_scheduler();
2002e560:	b000ffff 	imm	-1
2002e564:	b9f4e5c0 	brlid	r15, -6720	// 2002cb24 <decoder_parser_parseheaders_outside_FSM_scheduler>
2002e568:	80000000 	or	r0, r0, r0
2002e56c:	e893001c 	lwi	r4, r19, 28
2002e570:	10641800 	addk	r3, r4, r3
2002e574:	f873001c 	swi	r3, r19, 28
			if (isSchedulable_undefined()) {
2002e578:	b0000000 	imm	0
2002e57c:	e89407f8 	lwi	r4, r20, 2040
2002e580:	99fc2000 	brald	r15, r4
2002e584:	80000000 	or	r0, r0, r0
2002e588:	bc030044 	beqi	r3, 68		// 2002e5cc
				int stop = 0;
2002e58c:	f813003c 	swi	r0, r19, 60
				if (stop != 0) {
2002e590:	e873003c 	lwi	r3, r19, 60
2002e594:	bc030018 	beqi	r3, 24		// 2002e5ac
					_FSM_state = my_state_undefined;
2002e598:	b0000000 	imm	0
2002e59c:	e8740654 	lwi	r3, r20, 1620
2002e5a0:	30800014 	addik	r4, r0, 20
2002e5a4:	f8830000 	swi	r4, r3, 0
					goto finished;
2002e5a8:	b8000038 	bri	56		// 2002e5e0
				}
				undefined();
2002e5ac:	b0000000 	imm	0
2002e5b0:	e87407fc 	lwi	r3, r20, 2044
2002e5b4:	99fc1800 	brald	r15, r3
2002e5b8:	80000000 	or	r0, r0, r0
				i++;
2002e5bc:	e873001c 	lwi	r3, r19, 28
2002e5c0:	30630001 	addik	r3, r3, 1
2002e5c4:	f873001c 	swi	r3, r19, 28
				goto l_undefined;
2002e5c8:	b800ff98 	bri	-104		// 2002e560
			} else {
				_FSM_state = my_state_undefined;
2002e5cc:	b0000000 	imm	0
2002e5d0:	e8740654 	lwi	r3, r20, 1620
2002e5d4:	30800014 	addik	r4, r0, 20
2002e5d8:	f8830000 	swi	r4, r3, 0
				goto finished;
2002e5dc:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_BYTE();
2002e5e0:	b0000000 	imm	0
2002e5e4:	e894065c 	lwi	r4, r20, 1628
2002e5e8:	99fc2000 	brald	r15, r4
2002e5ec:	80000000 	or	r0, r0, r0
		
		write_end_BTYPE();
2002e5f0:	b0000000 	imm	0
2002e5f4:	e8740664 	lwi	r3, r20, 1636
2002e5f8:	99fc1800 	brald	r15, r3
2002e5fc:	80000000 	or	r0, r0, r0
		write_end_MV();
2002e600:	b0000000 	imm	0
2002e604:	e894066c 	lwi	r4, r20, 1644
2002e608:	99fc2000 	brald	r15, r4
2002e60c:	80000000 	or	r0, r0, r0
		write_end_RUN();
2002e610:	b0000000 	imm	0
2002e614:	e8740674 	lwi	r3, r20, 1652
2002e618:	99fc1800 	brald	r15, r3
2002e61c:	80000000 	or	r0, r0, r0
		write_end_VALUE();
2002e620:	b0000000 	imm	0
2002e624:	e894067c 	lwi	r4, r20, 1660
2002e628:	99fc2000 	brald	r15, r4
2002e62c:	80000000 	or	r0, r0, r0
		write_end_LAST();
2002e630:	b0000000 	imm	0
2002e634:	e8740684 	lwi	r3, r20, 1668
2002e638:	99fc1800 	brald	r15, r3
2002e63c:	80000000 	or	r0, r0, r0
		write_end_WIDTH();
2002e640:	b0000000 	imm	0
2002e644:	e894068c 	lwi	r4, r20, 1676
2002e648:	99fc2000 	brald	r15, r4
2002e64c:	80000000 	or	r0, r0, r0
		write_end_HEIGHT();
2002e650:	b0000000 	imm	0
2002e654:	e8740694 	lwi	r3, r20, 1684
2002e658:	99fc1800 	brald	r15, r3
2002e65c:	80000000 	or	r0, r0, r0
		write_end_QP();
2002e660:	b0000000 	imm	0
2002e664:	e894069c 	lwi	r4, r20, 1692
2002e668:	99fc2000 	brald	r15, r4
2002e66c:	80000000 	or	r0, r0, r0
		
		
		return i;
2002e670:	e873001c 	lwi	r3, r19, 28
	}
2002e674:	e9e10000 	lwi	r15, r1, 0
2002e678:	10330000 	addk	r1, r19, r0
2002e67c:	ea6100ac 	lwi	r19, r1, 172
2002e680:	ea8100b0 	lwi	r20, r1, 176
2002e684:	302100b4 	addik	r1, r1, 180
2002e688:	b60f0008 	rtsd	r15, 8
2002e68c:	80000000 	or	r0, r0, r0

2002e690 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002e690:	3021fff4 	addik	r1, r1, -12
2002e694:	fa610004 	swi	r19, r1, 4
2002e698:	fa810008 	swi	r20, r1, 8
2002e69c:	12610000 	addk	r19, r1, r0
2002e6a0:	96808000 	mfs	r20, rpc
2002e6a4:	b000dffd 	imm	-8195
2002e6a8:	329432bc 	addik	r20, r20, 12988
2002e6ac:	f8b30010 	swi	r5, r19, 16
2002e6b0:	f8d30014 	swi	r6, r19, 20
2002e6b4:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002e6b8:	e8730010 	lwi	r3, r19, 16
2002e6bc:	e8630010 	lwi	r3, r3, 16
2002e6c0:	e8830000 	lwi	r4, r3, 0
2002e6c4:	e8730010 	lwi	r3, r19, 16
2002e6c8:	e8a3000c 	lwi	r5, r3, 12
2002e6cc:	e8730014 	lwi	r3, r19, 20
2002e6d0:	64630402 	bslli	r3, r3, 2
2002e6d4:	10651800 	addk	r3, r5, r3
2002e6d8:	e8630000 	lwi	r3, r3, 0
2002e6dc:	14a32000 	rsubk	r5, r3, r4
2002e6e0:	30600001 	addik	r3, r0, 1
2002e6e4:	e8930018 	lwi	r4, r19, 24
2002e6e8:	16442803 	cmpu	r18, r4, r5
2002e6ec:	bcb20008 	bgei	r18, 8		// 2002e6f4
2002e6f0:	10600000 	addk	r3, r0, r0
2002e6f4:	a46300ff 	andi	r3, r3, 255
}
2002e6f8:	10330000 	addk	r1, r19, r0
2002e6fc:	ea610004 	lwi	r19, r1, 4
2002e700:	ea810008 	lwi	r20, r1, 8
2002e704:	3021000c 	addik	r1, r1, 12
2002e708:	b60f0008 	rtsd	r15, 8
2002e70c:	80000000 	or	r0, r0, r0

2002e710 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002e710:	3021fff4 	addik	r1, r1, -12
2002e714:	fa610004 	swi	r19, r1, 4
2002e718:	fa810008 	swi	r20, r1, 8
2002e71c:	12610000 	addk	r19, r1, r0
2002e720:	96808000 	mfs	r20, rpc
2002e724:	b000dffd 	imm	-8195
2002e728:	3294323c 	addik	r20, r20, 12860
2002e72c:	f8b30010 	swi	r5, r19, 16
2002e730:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002e734:	e8730010 	lwi	r3, r19, 16
2002e738:	e8630010 	lwi	r3, r3, 16
2002e73c:	e8830000 	lwi	r4, r3, 0
2002e740:	e8730010 	lwi	r3, r19, 16
2002e744:	e8a3000c 	lwi	r5, r3, 12
2002e748:	e8730014 	lwi	r3, r19, 20
2002e74c:	64630402 	bslli	r3, r3, 2
2002e750:	10651800 	addk	r3, r5, r3
2002e754:	e8630000 	lwi	r3, r3, 0
2002e758:	14632000 	rsubk	r3, r3, r4
}
2002e75c:	10330000 	addk	r1, r19, r0
2002e760:	ea610004 	lwi	r19, r1, 4
2002e764:	ea810008 	lwi	r20, r1, 8
2002e768:	3021000c 	addik	r1, r1, 12
2002e76c:	b60f0008 	rtsd	r15, 8
2002e770:	80000000 	or	r0, r0, r0

2002e774 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002e774:	3021fff0 	addik	r1, r1, -16
2002e778:	fa610008 	swi	r19, r1, 8
2002e77c:	fa81000c 	swi	r20, r1, 12
2002e780:	12610000 	addk	r19, r1, r0
2002e784:	96808000 	mfs	r20, rpc
2002e788:	b000dffd 	imm	-8195
2002e78c:	329431d8 	addik	r20, r20, 12760
2002e790:	f8b30014 	swi	r5, r19, 20
2002e794:	f8d30018 	swi	r6, r19, 24
2002e798:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002e79c:	f8130004 	swi	r0, r19, 4
2002e7a0:	b800005c 	bri	92		// 2002e7fc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002e7a4:	e8730014 	lwi	r3, r19, 20
2002e7a8:	e8830000 	lwi	r4, r3, 0
2002e7ac:	e8730014 	lwi	r3, r19, 20
2002e7b0:	e8a3000c 	lwi	r5, r3, 12
2002e7b4:	e8730004 	lwi	r3, r19, 4
2002e7b8:	64630402 	bslli	r3, r3, 2
2002e7bc:	10651800 	addk	r3, r5, r3
2002e7c0:	e8a30000 	lwi	r5, r3, 0
2002e7c4:	e8730014 	lwi	r3, r19, 20
2002e7c8:	e8630010 	lwi	r3, r3, 16
2002e7cc:	e8630000 	lwi	r3, r3, 0
2002e7d0:	14632800 	rsubk	r3, r3, r5
2002e7d4:	10641800 	addk	r3, r4, r3
2002e7d8:	30830001 	addik	r4, r3, 1
2002e7dc:	e873001c 	lwi	r3, r19, 28
2002e7e0:	16441803 	cmpu	r18, r4, r3
2002e7e4:	bc52000c 	blti	r18, 12		// 2002e7f0
            return 0;
2002e7e8:	10600000 	addk	r3, r0, r0
2002e7ec:	b8000024 	bri	36		// 2002e810
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002e7f0:	e8730004 	lwi	r3, r19, 4
2002e7f4:	30630001 	addik	r3, r3, 1
2002e7f8:	f8730004 	swi	r3, r19, 4
2002e7fc:	e8930004 	lwi	r4, r19, 4
2002e800:	e8730018 	lwi	r3, r19, 24
2002e804:	16432003 	cmpu	r18, r3, r4
2002e808:	bc52ff9c 	blti	r18, -100		// 2002e7a4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002e80c:	30600001 	addik	r3, r0, 1
}
2002e810:	10330000 	addk	r1, r19, r0
2002e814:	ea610008 	lwi	r19, r1, 8
2002e818:	ea81000c 	lwi	r20, r1, 12
2002e81c:	30210010 	addik	r1, r1, 16
2002e820:	b60f0008 	rtsd	r15, 8
2002e824:	80000000 	or	r0, r0, r0

2002e828 <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002e828:	3021ffe8 	addik	r1, r1, -24
2002e82c:	fa610010 	swi	r19, r1, 16
2002e830:	fa810014 	swi	r20, r1, 20
2002e834:	12610000 	addk	r19, r1, r0
2002e838:	96808000 	mfs	r20, rpc
2002e83c:	b000dffd 	imm	-8195
2002e840:	32943124 	addik	r20, r20, 12580
2002e844:	f8b3001c 	swi	r5, r19, 28
2002e848:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002e84c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002e850:	f8130004 	swi	r0, r19, 4
2002e854:	b8000054 	bri	84		// 2002e8a8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2002e858:	e873001c 	lwi	r3, r19, 28
2002e85c:	e8630010 	lwi	r3, r3, 16
2002e860:	e8830000 	lwi	r4, r3, 0
2002e864:	e873001c 	lwi	r3, r19, 28
2002e868:	e8a3000c 	lwi	r5, r3, 12
2002e86c:	e8730004 	lwi	r3, r19, 4
2002e870:	64630402 	bslli	r3, r3, 2
2002e874:	10651800 	addk	r3, r5, r3
2002e878:	e8630000 	lwi	r3, r3, 0
2002e87c:	14632000 	rsubk	r3, r3, r4
2002e880:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002e884:	e8930008 	lwi	r4, r19, 8
2002e888:	e873000c 	lwi	r3, r19, 12
2002e88c:	16441803 	cmpu	r18, r4, r3
2002e890:	bcb20008 	bgei	r18, 8		// 2002e898
2002e894:	10640000 	addk	r3, r4, r0
2002e898:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002e89c:	e8730004 	lwi	r3, r19, 4
2002e8a0:	30630001 	addik	r3, r3, 1
2002e8a4:	f8730004 	swi	r3, r19, 4
2002e8a8:	e8930004 	lwi	r4, r19, 4
2002e8ac:	e8730020 	lwi	r3, r19, 32
2002e8b0:	16432003 	cmpu	r18, r3, r4
2002e8b4:	bc52ffa4 	blti	r18, -92		// 2002e858
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002e8b8:	e873001c 	lwi	r3, r19, 28
2002e8bc:	e8830000 	lwi	r4, r3, 0
2002e8c0:	e8730008 	lwi	r3, r19, 8
2002e8c4:	14632000 	rsubk	r3, r3, r4
}
2002e8c8:	10330000 	addk	r1, r19, r0
2002e8cc:	ea610010 	lwi	r19, r1, 16
2002e8d0:	ea810014 	lwi	r20, r1, 20
2002e8d4:	30210018 	addik	r1, r1, 24
2002e8d8:	b60f0008 	rtsd	r15, 8
2002e8dc:	80000000 	or	r0, r0, r0

2002e8e0 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002e8e0:	3021fff0 	addik	r1, r1, -16
2002e8e4:	fa610008 	swi	r19, r1, 8
2002e8e8:	fa81000c 	swi	r20, r1, 12
2002e8ec:	12610000 	addk	r19, r1, r0
2002e8f0:	96808000 	mfs	r20, rpc
2002e8f4:	b000dffd 	imm	-8195
2002e8f8:	3294306c 	addik	r20, r20, 12396
2002e8fc:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2002e900:	e8730014 	lwi	r3, r19, 20
2002e904:	e8630010 	lwi	r3, r3, 16
2002e908:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002e90c:	f8130004 	swi	r0, r19, 4
2002e910:	b8000028 	bri	40		// 2002e938
        fifo->read_inds[i] = 0;
2002e914:	e8730014 	lwi	r3, r19, 20
2002e918:	e883000c 	lwi	r4, r3, 12
2002e91c:	e8730004 	lwi	r3, r19, 4
2002e920:	64630402 	bslli	r3, r3, 2
2002e924:	10641800 	addk	r3, r4, r3
2002e928:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002e92c:	e8730004 	lwi	r3, r19, 4
2002e930:	30630001 	addik	r3, r3, 1
2002e934:	f8730004 	swi	r3, r19, 4
2002e938:	e8730014 	lwi	r3, r19, 20
2002e93c:	e8830008 	lwi	r4, r3, 8
2002e940:	e8730004 	lwi	r3, r19, 4
2002e944:	16441803 	cmpu	r18, r4, r3
2002e948:	bc52ffcc 	blti	r18, -52		// 2002e914
        fifo->read_inds[i] = 0;
    }
}
2002e94c:	10330000 	addk	r1, r19, r0
2002e950:	ea610008 	lwi	r19, r1, 8
2002e954:	ea81000c 	lwi	r20, r1, 12
2002e958:	30210010 	addik	r1, r1, 16
2002e95c:	b60f0008 	rtsd	r15, 8
2002e960:	80000000 	or	r0, r0, r0

2002e964 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002e964:	3021fff0 	addik	r1, r1, -16
2002e968:	fa610008 	swi	r19, r1, 8
2002e96c:	fa81000c 	swi	r20, r1, 12
2002e970:	12610000 	addk	r19, r1, r0
2002e974:	96808000 	mfs	r20, rpc
2002e978:	b000dffd 	imm	-8195
2002e97c:	32942fe8 	addik	r20, r20, 12264
2002e980:	f8b30014 	swi	r5, r19, 20
2002e984:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2002e988:	e8730014 	lwi	r3, r19, 20
2002e98c:	e8830004 	lwi	r4, r3, 4
2002e990:	e8730014 	lwi	r3, r19, 20
2002e994:	e8a3000c 	lwi	r5, r3, 12
2002e998:	e8730018 	lwi	r3, r19, 24
2002e99c:	64630402 	bslli	r3, r3, 2
2002e9a0:	10651800 	addk	r3, r5, r3
2002e9a4:	e8a30000 	lwi	r5, r3, 0
2002e9a8:	e8730014 	lwi	r3, r19, 20
2002e9ac:	e8630000 	lwi	r3, r3, 0
2002e9b0:	3063ffff 	addik	r3, r3, -1
2002e9b4:	84651800 	and	r3, r5, r3
2002e9b8:	10641800 	addk	r3, r4, r3
2002e9bc:	e0630000 	lbui	r3, r3, 0
2002e9c0:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2002e9c4:	e8730014 	lwi	r3, r19, 20
2002e9c8:	e883000c 	lwi	r4, r3, 12
2002e9cc:	e8730018 	lwi	r3, r19, 24
2002e9d0:	64630402 	bslli	r3, r3, 2
2002e9d4:	10641800 	addk	r3, r4, r3
2002e9d8:	e8830000 	lwi	r4, r3, 0
2002e9dc:	30840001 	addik	r4, r4, 1
2002e9e0:	f8830000 	swi	r4, r3, 0
    return value;
2002e9e4:	e0730004 	lbui	r3, r19, 4
2002e9e8:	90630060 	sext8	r3, r3
}
2002e9ec:	10330000 	addk	r1, r19, r0
2002e9f0:	ea610008 	lwi	r19, r1, 8
2002e9f4:	ea81000c 	lwi	r20, r1, 12
2002e9f8:	30210010 	addik	r1, r1, 16
2002e9fc:	b60f0008 	rtsd	r15, 8
2002ea00:	80000000 	or	r0, r0, r0

2002ea04 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002ea04:	3021fff4 	addik	r1, r1, -12
2002ea08:	fa610004 	swi	r19, r1, 4
2002ea0c:	fa810008 	swi	r20, r1, 8
2002ea10:	12610000 	addk	r19, r1, r0
2002ea14:	96808000 	mfs	r20, rpc
2002ea18:	b000dffd 	imm	-8195
2002ea1c:	32942f48 	addik	r20, r20, 12104
2002ea20:	f8b30010 	swi	r5, r19, 16
2002ea24:	10660000 	addk	r3, r6, r0
2002ea28:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002ea2c:	e8730010 	lwi	r3, r19, 16
2002ea30:	e8830004 	lwi	r4, r3, 4
2002ea34:	e8730010 	lwi	r3, r19, 16
2002ea38:	e8630010 	lwi	r3, r3, 16
2002ea3c:	e8a30000 	lwi	r5, r3, 0
2002ea40:	e8730010 	lwi	r3, r19, 16
2002ea44:	e8630000 	lwi	r3, r3, 0
2002ea48:	3063ffff 	addik	r3, r3, -1
2002ea4c:	84651800 	and	r3, r5, r3
2002ea50:	10641800 	addk	r3, r4, r3
2002ea54:	e0930014 	lbui	r4, r19, 20
2002ea58:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2002ea5c:	e8730010 	lwi	r3, r19, 16
2002ea60:	e8630010 	lwi	r3, r3, 16
2002ea64:	e8830000 	lwi	r4, r3, 0
2002ea68:	30840001 	addik	r4, r4, 1
2002ea6c:	f8830000 	swi	r4, r3, 0
}
2002ea70:	10330000 	addk	r1, r19, r0
2002ea74:	ea610004 	lwi	r19, r1, 4
2002ea78:	ea810008 	lwi	r20, r1, 8
2002ea7c:	3021000c 	addik	r1, r1, 12
2002ea80:	b60f0008 	rtsd	r15, 8
2002ea84:	80000000 	or	r0, r0, r0

2002ea88 <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002ea88:	3021fff4 	addik	r1, r1, -12
2002ea8c:	fa610004 	swi	r19, r1, 4
2002ea90:	fa810008 	swi	r20, r1, 8
2002ea94:	12610000 	addk	r19, r1, r0
2002ea98:	96808000 	mfs	r20, rpc
2002ea9c:	b000dffd 	imm	-8195
2002eaa0:	32942ec4 	addik	r20, r20, 11972
2002eaa4:	f8b30010 	swi	r5, r19, 16
2002eaa8:	f8d30014 	swi	r6, r19, 20
2002eaac:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002eab0:	e8730010 	lwi	r3, r19, 16
2002eab4:	e8630010 	lwi	r3, r3, 16
2002eab8:	e8830000 	lwi	r4, r3, 0
2002eabc:	e8730010 	lwi	r3, r19, 16
2002eac0:	e8a3000c 	lwi	r5, r3, 12
2002eac4:	e8730014 	lwi	r3, r19, 20
2002eac8:	64630402 	bslli	r3, r3, 2
2002eacc:	10651800 	addk	r3, r5, r3
2002ead0:	e8630000 	lwi	r3, r3, 0
2002ead4:	14a32000 	rsubk	r5, r3, r4
2002ead8:	30600001 	addik	r3, r0, 1
2002eadc:	e8930018 	lwi	r4, r19, 24
2002eae0:	16442803 	cmpu	r18, r4, r5
2002eae4:	bcb20008 	bgei	r18, 8		// 2002eaec
2002eae8:	10600000 	addk	r3, r0, r0
2002eaec:	a46300ff 	andi	r3, r3, 255
}
2002eaf0:	10330000 	addk	r1, r19, r0
2002eaf4:	ea610004 	lwi	r19, r1, 4
2002eaf8:	ea810008 	lwi	r20, r1, 8
2002eafc:	3021000c 	addik	r1, r1, 12
2002eb00:	b60f0008 	rtsd	r15, 8
2002eb04:	80000000 	or	r0, r0, r0

2002eb08 <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002eb08:	3021fff4 	addik	r1, r1, -12
2002eb0c:	fa610004 	swi	r19, r1, 4
2002eb10:	fa810008 	swi	r20, r1, 8
2002eb14:	12610000 	addk	r19, r1, r0
2002eb18:	96808000 	mfs	r20, rpc
2002eb1c:	b000dffd 	imm	-8195
2002eb20:	32942e44 	addik	r20, r20, 11844
2002eb24:	f8b30010 	swi	r5, r19, 16
2002eb28:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002eb2c:	e8730010 	lwi	r3, r19, 16
2002eb30:	e8630010 	lwi	r3, r3, 16
2002eb34:	e8830000 	lwi	r4, r3, 0
2002eb38:	e8730010 	lwi	r3, r19, 16
2002eb3c:	e8a3000c 	lwi	r5, r3, 12
2002eb40:	e8730014 	lwi	r3, r19, 20
2002eb44:	64630402 	bslli	r3, r3, 2
2002eb48:	10651800 	addk	r3, r5, r3
2002eb4c:	e8630000 	lwi	r3, r3, 0
2002eb50:	14632000 	rsubk	r3, r3, r4
}
2002eb54:	10330000 	addk	r1, r19, r0
2002eb58:	ea610004 	lwi	r19, r1, 4
2002eb5c:	ea810008 	lwi	r20, r1, 8
2002eb60:	3021000c 	addik	r1, r1, 12
2002eb64:	b60f0008 	rtsd	r15, 8
2002eb68:	80000000 	or	r0, r0, r0

2002eb6c <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002eb6c:	3021fff0 	addik	r1, r1, -16
2002eb70:	fa610008 	swi	r19, r1, 8
2002eb74:	fa81000c 	swi	r20, r1, 12
2002eb78:	12610000 	addk	r19, r1, r0
2002eb7c:	96808000 	mfs	r20, rpc
2002eb80:	b000dffd 	imm	-8195
2002eb84:	32942de0 	addik	r20, r20, 11744
2002eb88:	f8b30014 	swi	r5, r19, 20
2002eb8c:	f8d30018 	swi	r6, r19, 24
2002eb90:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002eb94:	f8130004 	swi	r0, r19, 4
2002eb98:	b800005c 	bri	92		// 2002ebf4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002eb9c:	e8730014 	lwi	r3, r19, 20
2002eba0:	e8830000 	lwi	r4, r3, 0
2002eba4:	e8730014 	lwi	r3, r19, 20
2002eba8:	e8a3000c 	lwi	r5, r3, 12
2002ebac:	e8730004 	lwi	r3, r19, 4
2002ebb0:	64630402 	bslli	r3, r3, 2
2002ebb4:	10651800 	addk	r3, r5, r3
2002ebb8:	e8a30000 	lwi	r5, r3, 0
2002ebbc:	e8730014 	lwi	r3, r19, 20
2002ebc0:	e8630010 	lwi	r3, r3, 16
2002ebc4:	e8630000 	lwi	r3, r3, 0
2002ebc8:	14632800 	rsubk	r3, r3, r5
2002ebcc:	10641800 	addk	r3, r4, r3
2002ebd0:	30830001 	addik	r4, r3, 1
2002ebd4:	e873001c 	lwi	r3, r19, 28
2002ebd8:	16441803 	cmpu	r18, r4, r3
2002ebdc:	bc52000c 	blti	r18, 12		// 2002ebe8
            return 0;
2002ebe0:	10600000 	addk	r3, r0, r0
2002ebe4:	b8000024 	bri	36		// 2002ec08
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002ebe8:	e8730004 	lwi	r3, r19, 4
2002ebec:	30630001 	addik	r3, r3, 1
2002ebf0:	f8730004 	swi	r3, r19, 4
2002ebf4:	e8930004 	lwi	r4, r19, 4
2002ebf8:	e8730018 	lwi	r3, r19, 24
2002ebfc:	16432003 	cmpu	r18, r3, r4
2002ec00:	bc52ff9c 	blti	r18, -100		// 2002eb9c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002ec04:	30600001 	addik	r3, r0, 1
}
2002ec08:	10330000 	addk	r1, r19, r0
2002ec0c:	ea610008 	lwi	r19, r1, 8
2002ec10:	ea81000c 	lwi	r20, r1, 12
2002ec14:	30210010 	addik	r1, r1, 16
2002ec18:	b60f0008 	rtsd	r15, 8
2002ec1c:	80000000 	or	r0, r0, r0

2002ec20 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002ec20:	3021ffe8 	addik	r1, r1, -24
2002ec24:	fa610010 	swi	r19, r1, 16
2002ec28:	fa810014 	swi	r20, r1, 20
2002ec2c:	12610000 	addk	r19, r1, r0
2002ec30:	96808000 	mfs	r20, rpc
2002ec34:	b000dffd 	imm	-8195
2002ec38:	32942d2c 	addik	r20, r20, 11564
2002ec3c:	f8b3001c 	swi	r5, r19, 28
2002ec40:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002ec44:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002ec48:	f8130004 	swi	r0, r19, 4
2002ec4c:	b8000054 	bri	84		// 2002eca0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2002ec50:	e873001c 	lwi	r3, r19, 28
2002ec54:	e8630010 	lwi	r3, r3, 16
2002ec58:	e8830000 	lwi	r4, r3, 0
2002ec5c:	e873001c 	lwi	r3, r19, 28
2002ec60:	e8a3000c 	lwi	r5, r3, 12
2002ec64:	e8730004 	lwi	r3, r19, 4
2002ec68:	64630402 	bslli	r3, r3, 2
2002ec6c:	10651800 	addk	r3, r5, r3
2002ec70:	e8630000 	lwi	r3, r3, 0
2002ec74:	14632000 	rsubk	r3, r3, r4
2002ec78:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002ec7c:	e8930008 	lwi	r4, r19, 8
2002ec80:	e873000c 	lwi	r3, r19, 12
2002ec84:	16441803 	cmpu	r18, r4, r3
2002ec88:	bcb20008 	bgei	r18, 8		// 2002ec90
2002ec8c:	10640000 	addk	r3, r4, r0
2002ec90:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002ec94:	e8730004 	lwi	r3, r19, 4
2002ec98:	30630001 	addik	r3, r3, 1
2002ec9c:	f8730004 	swi	r3, r19, 4
2002eca0:	e8930004 	lwi	r4, r19, 4
2002eca4:	e8730020 	lwi	r3, r19, 32
2002eca8:	16432003 	cmpu	r18, r3, r4
2002ecac:	bc52ffa4 	blti	r18, -92		// 2002ec50
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002ecb0:	e873001c 	lwi	r3, r19, 28
2002ecb4:	e8830000 	lwi	r4, r3, 0
2002ecb8:	e8730008 	lwi	r3, r19, 8
2002ecbc:	14632000 	rsubk	r3, r3, r4
}
2002ecc0:	10330000 	addk	r1, r19, r0
2002ecc4:	ea610010 	lwi	r19, r1, 16
2002ecc8:	ea810014 	lwi	r20, r1, 20
2002eccc:	30210018 	addik	r1, r1, 24
2002ecd0:	b60f0008 	rtsd	r15, 8
2002ecd4:	80000000 	or	r0, r0, r0

2002ecd8 <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002ecd8:	3021fff0 	addik	r1, r1, -16
2002ecdc:	fa610008 	swi	r19, r1, 8
2002ece0:	fa81000c 	swi	r20, r1, 12
2002ece4:	12610000 	addk	r19, r1, r0
2002ece8:	96808000 	mfs	r20, rpc
2002ecec:	b000dffd 	imm	-8195
2002ecf0:	32942c74 	addik	r20, r20, 11380
2002ecf4:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2002ecf8:	e8730014 	lwi	r3, r19, 20
2002ecfc:	e8630010 	lwi	r3, r3, 16
2002ed00:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002ed04:	f8130004 	swi	r0, r19, 4
2002ed08:	b8000028 	bri	40		// 2002ed30
        fifo->read_inds[i] = 0;
2002ed0c:	e8730014 	lwi	r3, r19, 20
2002ed10:	e883000c 	lwi	r4, r3, 12
2002ed14:	e8730004 	lwi	r3, r19, 4
2002ed18:	64630402 	bslli	r3, r3, 2
2002ed1c:	10641800 	addk	r3, r4, r3
2002ed20:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002ed24:	e8730004 	lwi	r3, r19, 4
2002ed28:	30630001 	addik	r3, r3, 1
2002ed2c:	f8730004 	swi	r3, r19, 4
2002ed30:	e8730014 	lwi	r3, r19, 20
2002ed34:	e8830008 	lwi	r4, r3, 8
2002ed38:	e8730004 	lwi	r3, r19, 4
2002ed3c:	16441803 	cmpu	r18, r4, r3
2002ed40:	bc52ffcc 	blti	r18, -52		// 2002ed0c
        fifo->read_inds[i] = 0;
    }
}
2002ed44:	10330000 	addk	r1, r19, r0
2002ed48:	ea610008 	lwi	r19, r1, 8
2002ed4c:	ea81000c 	lwi	r20, r1, 12
2002ed50:	30210010 	addik	r1, r1, 16
2002ed54:	b60f0008 	rtsd	r15, 8
2002ed58:	80000000 	or	r0, r0, r0

2002ed5c <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002ed5c:	3021fff0 	addik	r1, r1, -16
2002ed60:	fa610008 	swi	r19, r1, 8
2002ed64:	fa81000c 	swi	r20, r1, 12
2002ed68:	12610000 	addk	r19, r1, r0
2002ed6c:	96808000 	mfs	r20, rpc
2002ed70:	b000dffd 	imm	-8195
2002ed74:	32942bf0 	addik	r20, r20, 11248
2002ed78:	f8b30014 	swi	r5, r19, 20
2002ed7c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2002ed80:	e8730014 	lwi	r3, r19, 20
2002ed84:	e8830004 	lwi	r4, r3, 4
2002ed88:	e8730014 	lwi	r3, r19, 20
2002ed8c:	e8a3000c 	lwi	r5, r3, 12
2002ed90:	e8730018 	lwi	r3, r19, 24
2002ed94:	64630402 	bslli	r3, r3, 2
2002ed98:	10651800 	addk	r3, r5, r3
2002ed9c:	e8a30000 	lwi	r5, r3, 0
2002eda0:	e8730014 	lwi	r3, r19, 20
2002eda4:	e8630000 	lwi	r3, r3, 0
2002eda8:	3063ffff 	addik	r3, r3, -1
2002edac:	84651800 	and	r3, r5, r3
2002edb0:	10631800 	addk	r3, r3, r3
2002edb4:	10641800 	addk	r3, r4, r3
2002edb8:	e4630000 	lhui	r3, r3, 0
2002edbc:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2002edc0:	e8730014 	lwi	r3, r19, 20
2002edc4:	e883000c 	lwi	r4, r3, 12
2002edc8:	e8730018 	lwi	r3, r19, 24
2002edcc:	64630402 	bslli	r3, r3, 2
2002edd0:	10641800 	addk	r3, r4, r3
2002edd4:	e8830000 	lwi	r4, r3, 0
2002edd8:	30840001 	addik	r4, r4, 1
2002eddc:	f8830000 	swi	r4, r3, 0
    return value;
2002ede0:	e4730004 	lhui	r3, r19, 4
2002ede4:	90630061 	sext16	r3, r3
}
2002ede8:	10330000 	addk	r1, r19, r0
2002edec:	ea610008 	lwi	r19, r1, 8
2002edf0:	ea81000c 	lwi	r20, r1, 12
2002edf4:	30210010 	addik	r1, r1, 16
2002edf8:	b60f0008 	rtsd	r15, 8
2002edfc:	80000000 	or	r0, r0, r0

2002ee00 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002ee00:	3021fff4 	addik	r1, r1, -12
2002ee04:	fa610004 	swi	r19, r1, 4
2002ee08:	fa810008 	swi	r20, r1, 8
2002ee0c:	12610000 	addk	r19, r1, r0
2002ee10:	96808000 	mfs	r20, rpc
2002ee14:	b000dffd 	imm	-8195
2002ee18:	32942b4c 	addik	r20, r20, 11084
2002ee1c:	f8b30010 	swi	r5, r19, 16
2002ee20:	10660000 	addk	r3, r6, r0
2002ee24:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002ee28:	e8730010 	lwi	r3, r19, 16
2002ee2c:	e8830004 	lwi	r4, r3, 4
2002ee30:	e8730010 	lwi	r3, r19, 16
2002ee34:	e8630010 	lwi	r3, r3, 16
2002ee38:	e8a30000 	lwi	r5, r3, 0
2002ee3c:	e8730010 	lwi	r3, r19, 16
2002ee40:	e8630000 	lwi	r3, r3, 0
2002ee44:	3063ffff 	addik	r3, r3, -1
2002ee48:	84651800 	and	r3, r5, r3
2002ee4c:	10631800 	addk	r3, r3, r3
2002ee50:	10641800 	addk	r3, r4, r3
2002ee54:	e4930014 	lhui	r4, r19, 20
2002ee58:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2002ee5c:	e8730010 	lwi	r3, r19, 16
2002ee60:	e8630010 	lwi	r3, r3, 16
2002ee64:	e8830000 	lwi	r4, r3, 0
2002ee68:	30840001 	addik	r4, r4, 1
2002ee6c:	f8830000 	swi	r4, r3, 0
}
2002ee70:	10330000 	addk	r1, r19, r0
2002ee74:	ea610004 	lwi	r19, r1, 4
2002ee78:	ea810008 	lwi	r20, r1, 8
2002ee7c:	3021000c 	addik	r1, r1, 12
2002ee80:	b60f0008 	rtsd	r15, 8
2002ee84:	80000000 	or	r0, r0, r0

2002ee88 <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002ee88:	3021fff4 	addik	r1, r1, -12
2002ee8c:	fa610004 	swi	r19, r1, 4
2002ee90:	fa810008 	swi	r20, r1, 8
2002ee94:	12610000 	addk	r19, r1, r0
2002ee98:	96808000 	mfs	r20, rpc
2002ee9c:	b000dffd 	imm	-8195
2002eea0:	32942ac4 	addik	r20, r20, 10948
2002eea4:	f8b30010 	swi	r5, r19, 16
2002eea8:	f8d30014 	swi	r6, r19, 20
2002eeac:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002eeb0:	e8730010 	lwi	r3, r19, 16
2002eeb4:	e8630010 	lwi	r3, r3, 16
2002eeb8:	e8830000 	lwi	r4, r3, 0
2002eebc:	e8730010 	lwi	r3, r19, 16
2002eec0:	e8a3000c 	lwi	r5, r3, 12
2002eec4:	e8730014 	lwi	r3, r19, 20
2002eec8:	64630402 	bslli	r3, r3, 2
2002eecc:	10651800 	addk	r3, r5, r3
2002eed0:	e8630000 	lwi	r3, r3, 0
2002eed4:	14a32000 	rsubk	r5, r3, r4
2002eed8:	30600001 	addik	r3, r0, 1
2002eedc:	e8930018 	lwi	r4, r19, 24
2002eee0:	16442803 	cmpu	r18, r4, r5
2002eee4:	bcb20008 	bgei	r18, 8		// 2002eeec
2002eee8:	10600000 	addk	r3, r0, r0
2002eeec:	a46300ff 	andi	r3, r3, 255
}
2002eef0:	10330000 	addk	r1, r19, r0
2002eef4:	ea610004 	lwi	r19, r1, 4
2002eef8:	ea810008 	lwi	r20, r1, 8
2002eefc:	3021000c 	addik	r1, r1, 12
2002ef00:	b60f0008 	rtsd	r15, 8
2002ef04:	80000000 	or	r0, r0, r0

2002ef08 <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002ef08:	3021fff4 	addik	r1, r1, -12
2002ef0c:	fa610004 	swi	r19, r1, 4
2002ef10:	fa810008 	swi	r20, r1, 8
2002ef14:	12610000 	addk	r19, r1, r0
2002ef18:	96808000 	mfs	r20, rpc
2002ef1c:	b000dffd 	imm	-8195
2002ef20:	32942a44 	addik	r20, r20, 10820
2002ef24:	f8b30010 	swi	r5, r19, 16
2002ef28:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002ef2c:	e8730010 	lwi	r3, r19, 16
2002ef30:	e8630010 	lwi	r3, r3, 16
2002ef34:	e8830000 	lwi	r4, r3, 0
2002ef38:	e8730010 	lwi	r3, r19, 16
2002ef3c:	e8a3000c 	lwi	r5, r3, 12
2002ef40:	e8730014 	lwi	r3, r19, 20
2002ef44:	64630402 	bslli	r3, r3, 2
2002ef48:	10651800 	addk	r3, r5, r3
2002ef4c:	e8630000 	lwi	r3, r3, 0
2002ef50:	14632000 	rsubk	r3, r3, r4
}
2002ef54:	10330000 	addk	r1, r19, r0
2002ef58:	ea610004 	lwi	r19, r1, 4
2002ef5c:	ea810008 	lwi	r20, r1, 8
2002ef60:	3021000c 	addik	r1, r1, 12
2002ef64:	b60f0008 	rtsd	r15, 8
2002ef68:	80000000 	or	r0, r0, r0

2002ef6c <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002ef6c:	3021fff0 	addik	r1, r1, -16
2002ef70:	fa610008 	swi	r19, r1, 8
2002ef74:	fa81000c 	swi	r20, r1, 12
2002ef78:	12610000 	addk	r19, r1, r0
2002ef7c:	96808000 	mfs	r20, rpc
2002ef80:	b000dffd 	imm	-8195
2002ef84:	329429e0 	addik	r20, r20, 10720
2002ef88:	f8b30014 	swi	r5, r19, 20
2002ef8c:	f8d30018 	swi	r6, r19, 24
2002ef90:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002ef94:	f8130004 	swi	r0, r19, 4
2002ef98:	b800005c 	bri	92		// 2002eff4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002ef9c:	e8730014 	lwi	r3, r19, 20
2002efa0:	e8830000 	lwi	r4, r3, 0
2002efa4:	e8730014 	lwi	r3, r19, 20
2002efa8:	e8a3000c 	lwi	r5, r3, 12
2002efac:	e8730004 	lwi	r3, r19, 4
2002efb0:	64630402 	bslli	r3, r3, 2
2002efb4:	10651800 	addk	r3, r5, r3
2002efb8:	e8a30000 	lwi	r5, r3, 0
2002efbc:	e8730014 	lwi	r3, r19, 20
2002efc0:	e8630010 	lwi	r3, r3, 16
2002efc4:	e8630000 	lwi	r3, r3, 0
2002efc8:	14632800 	rsubk	r3, r3, r5
2002efcc:	10641800 	addk	r3, r4, r3
2002efd0:	30830001 	addik	r4, r3, 1
2002efd4:	e873001c 	lwi	r3, r19, 28
2002efd8:	16441803 	cmpu	r18, r4, r3
2002efdc:	bc52000c 	blti	r18, 12		// 2002efe8
            return 0;
2002efe0:	10600000 	addk	r3, r0, r0
2002efe4:	b8000024 	bri	36		// 2002f008
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002efe8:	e8730004 	lwi	r3, r19, 4
2002efec:	30630001 	addik	r3, r3, 1
2002eff0:	f8730004 	swi	r3, r19, 4
2002eff4:	e8930004 	lwi	r4, r19, 4
2002eff8:	e8730018 	lwi	r3, r19, 24
2002effc:	16432003 	cmpu	r18, r3, r4
2002f000:	bc52ff9c 	blti	r18, -100		// 2002ef9c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002f004:	30600001 	addik	r3, r0, 1
}
2002f008:	10330000 	addk	r1, r19, r0
2002f00c:	ea610008 	lwi	r19, r1, 8
2002f010:	ea81000c 	lwi	r20, r1, 12
2002f014:	30210010 	addik	r1, r1, 16
2002f018:	b60f0008 	rtsd	r15, 8
2002f01c:	80000000 	or	r0, r0, r0

2002f020 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002f020:	3021ffe8 	addik	r1, r1, -24
2002f024:	fa610010 	swi	r19, r1, 16
2002f028:	fa810014 	swi	r20, r1, 20
2002f02c:	12610000 	addk	r19, r1, r0
2002f030:	96808000 	mfs	r20, rpc
2002f034:	b000dffd 	imm	-8195
2002f038:	3294292c 	addik	r20, r20, 10540
2002f03c:	f8b3001c 	swi	r5, r19, 28
2002f040:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002f044:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002f048:	f8130004 	swi	r0, r19, 4
2002f04c:	b8000054 	bri	84		// 2002f0a0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2002f050:	e873001c 	lwi	r3, r19, 28
2002f054:	e8630010 	lwi	r3, r3, 16
2002f058:	e8830000 	lwi	r4, r3, 0
2002f05c:	e873001c 	lwi	r3, r19, 28
2002f060:	e8a3000c 	lwi	r5, r3, 12
2002f064:	e8730004 	lwi	r3, r19, 4
2002f068:	64630402 	bslli	r3, r3, 2
2002f06c:	10651800 	addk	r3, r5, r3
2002f070:	e8630000 	lwi	r3, r3, 0
2002f074:	14632000 	rsubk	r3, r3, r4
2002f078:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002f07c:	e8930008 	lwi	r4, r19, 8
2002f080:	e873000c 	lwi	r3, r19, 12
2002f084:	16441803 	cmpu	r18, r4, r3
2002f088:	bcb20008 	bgei	r18, 8		// 2002f090
2002f08c:	10640000 	addk	r3, r4, r0
2002f090:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002f094:	e8730004 	lwi	r3, r19, 4
2002f098:	30630001 	addik	r3, r3, 1
2002f09c:	f8730004 	swi	r3, r19, 4
2002f0a0:	e8930004 	lwi	r4, r19, 4
2002f0a4:	e8730020 	lwi	r3, r19, 32
2002f0a8:	16432003 	cmpu	r18, r3, r4
2002f0ac:	bc52ffa4 	blti	r18, -92		// 2002f050
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002f0b0:	e873001c 	lwi	r3, r19, 28
2002f0b4:	e8830000 	lwi	r4, r3, 0
2002f0b8:	e8730008 	lwi	r3, r19, 8
2002f0bc:	14632000 	rsubk	r3, r3, r4
}
2002f0c0:	10330000 	addk	r1, r19, r0
2002f0c4:	ea610010 	lwi	r19, r1, 16
2002f0c8:	ea810014 	lwi	r20, r1, 20
2002f0cc:	30210018 	addik	r1, r1, 24
2002f0d0:	b60f0008 	rtsd	r15, 8
2002f0d4:	80000000 	or	r0, r0, r0

2002f0d8 <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002f0d8:	3021fff0 	addik	r1, r1, -16
2002f0dc:	fa610008 	swi	r19, r1, 8
2002f0e0:	fa81000c 	swi	r20, r1, 12
2002f0e4:	12610000 	addk	r19, r1, r0
2002f0e8:	96808000 	mfs	r20, rpc
2002f0ec:	b000dffd 	imm	-8195
2002f0f0:	32942874 	addik	r20, r20, 10356
2002f0f4:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2002f0f8:	e8730014 	lwi	r3, r19, 20
2002f0fc:	e8630010 	lwi	r3, r3, 16
2002f100:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002f104:	f8130004 	swi	r0, r19, 4
2002f108:	b8000028 	bri	40		// 2002f130
        fifo->read_inds[i] = 0;
2002f10c:	e8730014 	lwi	r3, r19, 20
2002f110:	e883000c 	lwi	r4, r3, 12
2002f114:	e8730004 	lwi	r3, r19, 4
2002f118:	64630402 	bslli	r3, r3, 2
2002f11c:	10641800 	addk	r3, r4, r3
2002f120:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002f124:	e8730004 	lwi	r3, r19, 4
2002f128:	30630001 	addik	r3, r3, 1
2002f12c:	f8730004 	swi	r3, r19, 4
2002f130:	e8730014 	lwi	r3, r19, 20
2002f134:	e8830008 	lwi	r4, r3, 8
2002f138:	e8730004 	lwi	r3, r19, 4
2002f13c:	16441803 	cmpu	r18, r4, r3
2002f140:	bc52ffcc 	blti	r18, -52		// 2002f10c
        fifo->read_inds[i] = 0;
    }
}
2002f144:	10330000 	addk	r1, r19, r0
2002f148:	ea610008 	lwi	r19, r1, 8
2002f14c:	ea81000c 	lwi	r20, r1, 12
2002f150:	30210010 	addik	r1, r1, 16
2002f154:	b60f0008 	rtsd	r15, 8
2002f158:	80000000 	or	r0, r0, r0

2002f15c <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002f15c:	3021fff0 	addik	r1, r1, -16
2002f160:	fa610008 	swi	r19, r1, 8
2002f164:	fa81000c 	swi	r20, r1, 12
2002f168:	12610000 	addk	r19, r1, r0
2002f16c:	96808000 	mfs	r20, rpc
2002f170:	b000dffd 	imm	-8195
2002f174:	329427f0 	addik	r20, r20, 10224
2002f178:	f8b30014 	swi	r5, r19, 20
2002f17c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2002f180:	e8730014 	lwi	r3, r19, 20
2002f184:	e8830004 	lwi	r4, r3, 4
2002f188:	e8730014 	lwi	r3, r19, 20
2002f18c:	e8a3000c 	lwi	r5, r3, 12
2002f190:	e8730018 	lwi	r3, r19, 24
2002f194:	64630402 	bslli	r3, r3, 2
2002f198:	10651800 	addk	r3, r5, r3
2002f19c:	e8a30000 	lwi	r5, r3, 0
2002f1a0:	e8730014 	lwi	r3, r19, 20
2002f1a4:	e8630000 	lwi	r3, r3, 0
2002f1a8:	3063ffff 	addik	r3, r3, -1
2002f1ac:	84651800 	and	r3, r5, r3
2002f1b0:	64630402 	bslli	r3, r3, 2
2002f1b4:	10641800 	addk	r3, r4, r3
2002f1b8:	e8630000 	lwi	r3, r3, 0
2002f1bc:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2002f1c0:	e8730014 	lwi	r3, r19, 20
2002f1c4:	e883000c 	lwi	r4, r3, 12
2002f1c8:	e8730018 	lwi	r3, r19, 24
2002f1cc:	64630402 	bslli	r3, r3, 2
2002f1d0:	10641800 	addk	r3, r4, r3
2002f1d4:	e8830000 	lwi	r4, r3, 0
2002f1d8:	30840001 	addik	r4, r4, 1
2002f1dc:	f8830000 	swi	r4, r3, 0
    return value;
2002f1e0:	e8730004 	lwi	r3, r19, 4
}
2002f1e4:	10330000 	addk	r1, r19, r0
2002f1e8:	ea610008 	lwi	r19, r1, 8
2002f1ec:	ea81000c 	lwi	r20, r1, 12
2002f1f0:	30210010 	addik	r1, r1, 16
2002f1f4:	b60f0008 	rtsd	r15, 8
2002f1f8:	80000000 	or	r0, r0, r0

2002f1fc <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002f1fc:	3021fff4 	addik	r1, r1, -12
2002f200:	fa610004 	swi	r19, r1, 4
2002f204:	fa810008 	swi	r20, r1, 8
2002f208:	12610000 	addk	r19, r1, r0
2002f20c:	96808000 	mfs	r20, rpc
2002f210:	b000dffd 	imm	-8195
2002f214:	32942750 	addik	r20, r20, 10064
2002f218:	f8b30010 	swi	r5, r19, 16
2002f21c:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002f220:	e8730010 	lwi	r3, r19, 16
2002f224:	e8830004 	lwi	r4, r3, 4
2002f228:	e8730010 	lwi	r3, r19, 16
2002f22c:	e8630010 	lwi	r3, r3, 16
2002f230:	e8a30000 	lwi	r5, r3, 0
2002f234:	e8730010 	lwi	r3, r19, 16
2002f238:	e8630000 	lwi	r3, r3, 0
2002f23c:	3063ffff 	addik	r3, r3, -1
2002f240:	84651800 	and	r3, r5, r3
2002f244:	64630402 	bslli	r3, r3, 2
2002f248:	10641800 	addk	r3, r4, r3
2002f24c:	e8930014 	lwi	r4, r19, 20
2002f250:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2002f254:	e8730010 	lwi	r3, r19, 16
2002f258:	e8630010 	lwi	r3, r3, 16
2002f25c:	e8830000 	lwi	r4, r3, 0
2002f260:	30840001 	addik	r4, r4, 1
2002f264:	f8830000 	swi	r4, r3, 0
}
2002f268:	10330000 	addk	r1, r19, r0
2002f26c:	ea610004 	lwi	r19, r1, 4
2002f270:	ea810008 	lwi	r20, r1, 8
2002f274:	3021000c 	addik	r1, r1, 12
2002f278:	b60f0008 	rtsd	r15, 8
2002f27c:	80000000 	or	r0, r0, r0

2002f280 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002f280:	3021fff4 	addik	r1, r1, -12
2002f284:	fa610004 	swi	r19, r1, 4
2002f288:	fa810008 	swi	r20, r1, 8
2002f28c:	12610000 	addk	r19, r1, r0
2002f290:	96808000 	mfs	r20, rpc
2002f294:	b000dffd 	imm	-8195
2002f298:	329426cc 	addik	r20, r20, 9932
2002f29c:	f8b30010 	swi	r5, r19, 16
2002f2a0:	f8d30014 	swi	r6, r19, 20
2002f2a4:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002f2a8:	e8730010 	lwi	r3, r19, 16
2002f2ac:	e8630010 	lwi	r3, r3, 16
2002f2b0:	e8830000 	lwi	r4, r3, 0
2002f2b4:	e8730010 	lwi	r3, r19, 16
2002f2b8:	e8a3000c 	lwi	r5, r3, 12
2002f2bc:	e8730014 	lwi	r3, r19, 20
2002f2c0:	64630402 	bslli	r3, r3, 2
2002f2c4:	10651800 	addk	r3, r5, r3
2002f2c8:	e8630000 	lwi	r3, r3, 0
2002f2cc:	14a32000 	rsubk	r5, r3, r4
2002f2d0:	30600001 	addik	r3, r0, 1
2002f2d4:	e8930018 	lwi	r4, r19, 24
2002f2d8:	16442803 	cmpu	r18, r4, r5
2002f2dc:	bcb20008 	bgei	r18, 8		// 2002f2e4
2002f2e0:	10600000 	addk	r3, r0, r0
2002f2e4:	a46300ff 	andi	r3, r3, 255
}
2002f2e8:	10330000 	addk	r1, r19, r0
2002f2ec:	ea610004 	lwi	r19, r1, 4
2002f2f0:	ea810008 	lwi	r20, r1, 8
2002f2f4:	3021000c 	addik	r1, r1, 12
2002f2f8:	b60f0008 	rtsd	r15, 8
2002f2fc:	80000000 	or	r0, r0, r0

2002f300 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002f300:	3021fff4 	addik	r1, r1, -12
2002f304:	fa610004 	swi	r19, r1, 4
2002f308:	fa810008 	swi	r20, r1, 8
2002f30c:	12610000 	addk	r19, r1, r0
2002f310:	96808000 	mfs	r20, rpc
2002f314:	b000dffd 	imm	-8195
2002f318:	3294264c 	addik	r20, r20, 9804
2002f31c:	f8b30010 	swi	r5, r19, 16
2002f320:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002f324:	e8730010 	lwi	r3, r19, 16
2002f328:	e8630010 	lwi	r3, r3, 16
2002f32c:	e8830000 	lwi	r4, r3, 0
2002f330:	e8730010 	lwi	r3, r19, 16
2002f334:	e8a3000c 	lwi	r5, r3, 12
2002f338:	e8730014 	lwi	r3, r19, 20
2002f33c:	64630402 	bslli	r3, r3, 2
2002f340:	10651800 	addk	r3, r5, r3
2002f344:	e8630000 	lwi	r3, r3, 0
2002f348:	14632000 	rsubk	r3, r3, r4
}
2002f34c:	10330000 	addk	r1, r19, r0
2002f350:	ea610004 	lwi	r19, r1, 4
2002f354:	ea810008 	lwi	r20, r1, 8
2002f358:	3021000c 	addik	r1, r1, 12
2002f35c:	b60f0008 	rtsd	r15, 8
2002f360:	80000000 	or	r0, r0, r0

2002f364 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002f364:	3021fff0 	addik	r1, r1, -16
2002f368:	fa610008 	swi	r19, r1, 8
2002f36c:	fa81000c 	swi	r20, r1, 12
2002f370:	12610000 	addk	r19, r1, r0
2002f374:	96808000 	mfs	r20, rpc
2002f378:	b000dffd 	imm	-8195
2002f37c:	329425e8 	addik	r20, r20, 9704
2002f380:	f8b30014 	swi	r5, r19, 20
2002f384:	f8d30018 	swi	r6, r19, 24
2002f388:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002f38c:	f8130004 	swi	r0, r19, 4
2002f390:	b800005c 	bri	92		// 2002f3ec
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002f394:	e8730014 	lwi	r3, r19, 20
2002f398:	e8830000 	lwi	r4, r3, 0
2002f39c:	e8730014 	lwi	r3, r19, 20
2002f3a0:	e8a3000c 	lwi	r5, r3, 12
2002f3a4:	e8730004 	lwi	r3, r19, 4
2002f3a8:	64630402 	bslli	r3, r3, 2
2002f3ac:	10651800 	addk	r3, r5, r3
2002f3b0:	e8a30000 	lwi	r5, r3, 0
2002f3b4:	e8730014 	lwi	r3, r19, 20
2002f3b8:	e8630010 	lwi	r3, r3, 16
2002f3bc:	e8630000 	lwi	r3, r3, 0
2002f3c0:	14632800 	rsubk	r3, r3, r5
2002f3c4:	10641800 	addk	r3, r4, r3
2002f3c8:	30830001 	addik	r4, r3, 1
2002f3cc:	e873001c 	lwi	r3, r19, 28
2002f3d0:	16441803 	cmpu	r18, r4, r3
2002f3d4:	bc52000c 	blti	r18, 12		// 2002f3e0
            return 0;
2002f3d8:	10600000 	addk	r3, r0, r0
2002f3dc:	b8000024 	bri	36		// 2002f400
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002f3e0:	e8730004 	lwi	r3, r19, 4
2002f3e4:	30630001 	addik	r3, r3, 1
2002f3e8:	f8730004 	swi	r3, r19, 4
2002f3ec:	e8930004 	lwi	r4, r19, 4
2002f3f0:	e8730018 	lwi	r3, r19, 24
2002f3f4:	16432003 	cmpu	r18, r3, r4
2002f3f8:	bc52ff9c 	blti	r18, -100		// 2002f394
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002f3fc:	30600001 	addik	r3, r0, 1
}
2002f400:	10330000 	addk	r1, r19, r0
2002f404:	ea610008 	lwi	r19, r1, 8
2002f408:	ea81000c 	lwi	r20, r1, 12
2002f40c:	30210010 	addik	r1, r1, 16
2002f410:	b60f0008 	rtsd	r15, 8
2002f414:	80000000 	or	r0, r0, r0

2002f418 <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002f418:	3021ffe8 	addik	r1, r1, -24
2002f41c:	fa610010 	swi	r19, r1, 16
2002f420:	fa810014 	swi	r20, r1, 20
2002f424:	12610000 	addk	r19, r1, r0
2002f428:	96808000 	mfs	r20, rpc
2002f42c:	b000dffd 	imm	-8195
2002f430:	32942534 	addik	r20, r20, 9524
2002f434:	f8b3001c 	swi	r5, r19, 28
2002f438:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002f43c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002f440:	f8130004 	swi	r0, r19, 4
2002f444:	b8000054 	bri	84		// 2002f498
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2002f448:	e873001c 	lwi	r3, r19, 28
2002f44c:	e8630010 	lwi	r3, r3, 16
2002f450:	e8830000 	lwi	r4, r3, 0
2002f454:	e873001c 	lwi	r3, r19, 28
2002f458:	e8a3000c 	lwi	r5, r3, 12
2002f45c:	e8730004 	lwi	r3, r19, 4
2002f460:	64630402 	bslli	r3, r3, 2
2002f464:	10651800 	addk	r3, r5, r3
2002f468:	e8630000 	lwi	r3, r3, 0
2002f46c:	14632000 	rsubk	r3, r3, r4
2002f470:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002f474:	e8930008 	lwi	r4, r19, 8
2002f478:	e873000c 	lwi	r3, r19, 12
2002f47c:	16441803 	cmpu	r18, r4, r3
2002f480:	bcb20008 	bgei	r18, 8		// 2002f488
2002f484:	10640000 	addk	r3, r4, r0
2002f488:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002f48c:	e8730004 	lwi	r3, r19, 4
2002f490:	30630001 	addik	r3, r3, 1
2002f494:	f8730004 	swi	r3, r19, 4
2002f498:	e8930004 	lwi	r4, r19, 4
2002f49c:	e8730020 	lwi	r3, r19, 32
2002f4a0:	16432003 	cmpu	r18, r3, r4
2002f4a4:	bc52ffa4 	blti	r18, -92		// 2002f448
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002f4a8:	e873001c 	lwi	r3, r19, 28
2002f4ac:	e8830000 	lwi	r4, r3, 0
2002f4b0:	e8730008 	lwi	r3, r19, 8
2002f4b4:	14632000 	rsubk	r3, r3, r4
}
2002f4b8:	10330000 	addk	r1, r19, r0
2002f4bc:	ea610010 	lwi	r19, r1, 16
2002f4c0:	ea810014 	lwi	r20, r1, 20
2002f4c4:	30210018 	addik	r1, r1, 24
2002f4c8:	b60f0008 	rtsd	r15, 8
2002f4cc:	80000000 	or	r0, r0, r0

2002f4d0 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002f4d0:	3021fff0 	addik	r1, r1, -16
2002f4d4:	fa610008 	swi	r19, r1, 8
2002f4d8:	fa81000c 	swi	r20, r1, 12
2002f4dc:	12610000 	addk	r19, r1, r0
2002f4e0:	96808000 	mfs	r20, rpc
2002f4e4:	b000dffd 	imm	-8195
2002f4e8:	3294247c 	addik	r20, r20, 9340
2002f4ec:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2002f4f0:	e8730014 	lwi	r3, r19, 20
2002f4f4:	e8630010 	lwi	r3, r3, 16
2002f4f8:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002f4fc:	f8130004 	swi	r0, r19, 4
2002f500:	b8000028 	bri	40		// 2002f528
        fifo->read_inds[i] = 0;
2002f504:	e8730014 	lwi	r3, r19, 20
2002f508:	e883000c 	lwi	r4, r3, 12
2002f50c:	e8730004 	lwi	r3, r19, 4
2002f510:	64630402 	bslli	r3, r3, 2
2002f514:	10641800 	addk	r3, r4, r3
2002f518:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002f51c:	e8730004 	lwi	r3, r19, 4
2002f520:	30630001 	addik	r3, r3, 1
2002f524:	f8730004 	swi	r3, r19, 4
2002f528:	e8730014 	lwi	r3, r19, 20
2002f52c:	e8830008 	lwi	r4, r3, 8
2002f530:	e8730004 	lwi	r3, r19, 4
2002f534:	16441803 	cmpu	r18, r4, r3
2002f538:	bc52ffcc 	blti	r18, -52		// 2002f504
        fifo->read_inds[i] = 0;
    }
}
2002f53c:	10330000 	addk	r1, r19, r0
2002f540:	ea610008 	lwi	r19, r1, 8
2002f544:	ea81000c 	lwi	r20, r1, 12
2002f548:	30210010 	addik	r1, r1, 16
2002f54c:	b60f0008 	rtsd	r15, 8
2002f550:	80000000 	or	r0, r0, r0

2002f554 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002f554:	3021ffec 	addik	r1, r1, -20
2002f558:	fa61000c 	swi	r19, r1, 12
2002f55c:	fa810010 	swi	r20, r1, 16
2002f560:	12610000 	addk	r19, r1, r0
2002f564:	96808000 	mfs	r20, rpc
2002f568:	b000dffd 	imm	-8195
2002f56c:	329423f8 	addik	r20, r20, 9208
2002f570:	f8b30018 	swi	r5, r19, 24
2002f574:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2002f578:	e8730018 	lwi	r3, r19, 24
2002f57c:	e8830004 	lwi	r4, r3, 4
2002f580:	e8730018 	lwi	r3, r19, 24
2002f584:	e8a3000c 	lwi	r5, r3, 12
2002f588:	e873001c 	lwi	r3, r19, 28
2002f58c:	64630402 	bslli	r3, r3, 2
2002f590:	10651800 	addk	r3, r5, r3
2002f594:	e8a30000 	lwi	r5, r3, 0
2002f598:	e8730018 	lwi	r3, r19, 24
2002f59c:	e8630000 	lwi	r3, r3, 0
2002f5a0:	3063ffff 	addik	r3, r3, -1
2002f5a4:	84651800 	and	r3, r5, r3
2002f5a8:	64630403 	bslli	r3, r3, 3
2002f5ac:	10641800 	addk	r3, r4, r3
2002f5b0:	e8830000 	lwi	r4, r3, 0
2002f5b4:	e8a30004 	lwi	r5, r3, 4
2002f5b8:	f8930004 	swi	r4, r19, 4
2002f5bc:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2002f5c0:	e8730018 	lwi	r3, r19, 24
2002f5c4:	e883000c 	lwi	r4, r3, 12
2002f5c8:	e873001c 	lwi	r3, r19, 28
2002f5cc:	64630402 	bslli	r3, r3, 2
2002f5d0:	10641800 	addk	r3, r4, r3
2002f5d4:	e8830000 	lwi	r4, r3, 0
2002f5d8:	30840001 	addik	r4, r4, 1
2002f5dc:	f8830000 	swi	r4, r3, 0
    return value;
2002f5e0:	e8930004 	lwi	r4, r19, 4
2002f5e4:	e8b30008 	lwi	r5, r19, 8
}
2002f5e8:	10640000 	addk	r3, r4, r0
2002f5ec:	10850000 	addk	r4, r5, r0
2002f5f0:	10330000 	addk	r1, r19, r0
2002f5f4:	ea61000c 	lwi	r19, r1, 12
2002f5f8:	ea810010 	lwi	r20, r1, 16
2002f5fc:	30210014 	addik	r1, r1, 20
2002f600:	b60f0008 	rtsd	r15, 8
2002f604:	80000000 	or	r0, r0, r0

2002f608 <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002f608:	3021fff4 	addik	r1, r1, -12
2002f60c:	fa610004 	swi	r19, r1, 4
2002f610:	fa810008 	swi	r20, r1, 8
2002f614:	12610000 	addk	r19, r1, r0
2002f618:	96808000 	mfs	r20, rpc
2002f61c:	b000dffd 	imm	-8195
2002f620:	32942344 	addik	r20, r20, 9028
2002f624:	f8b30010 	swi	r5, r19, 16
2002f628:	f8d30014 	swi	r6, r19, 20
2002f62c:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002f630:	e8730010 	lwi	r3, r19, 16
2002f634:	e8830004 	lwi	r4, r3, 4
2002f638:	e8730010 	lwi	r3, r19, 16
2002f63c:	e8630010 	lwi	r3, r3, 16
2002f640:	e8a30000 	lwi	r5, r3, 0
2002f644:	e8730010 	lwi	r3, r19, 16
2002f648:	e8630000 	lwi	r3, r3, 0
2002f64c:	3063ffff 	addik	r3, r3, -1
2002f650:	84651800 	and	r3, r5, r3
2002f654:	64630403 	bslli	r3, r3, 3
2002f658:	10641800 	addk	r3, r4, r3
2002f65c:	e8930014 	lwi	r4, r19, 20
2002f660:	e8b30018 	lwi	r5, r19, 24
2002f664:	f8830000 	swi	r4, r3, 0
2002f668:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2002f66c:	e8730010 	lwi	r3, r19, 16
2002f670:	e8630010 	lwi	r3, r3, 16
2002f674:	e8830000 	lwi	r4, r3, 0
2002f678:	30840001 	addik	r4, r4, 1
2002f67c:	f8830000 	swi	r4, r3, 0
}
2002f680:	10330000 	addk	r1, r19, r0
2002f684:	ea610004 	lwi	r19, r1, 4
2002f688:	ea810008 	lwi	r20, r1, 8
2002f68c:	3021000c 	addik	r1, r1, 12
2002f690:	b60f0008 	rtsd	r15, 8
2002f694:	80000000 	or	r0, r0, r0

2002f698 <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002f698:	3021fff4 	addik	r1, r1, -12
2002f69c:	fa610004 	swi	r19, r1, 4
2002f6a0:	fa810008 	swi	r20, r1, 8
2002f6a4:	12610000 	addk	r19, r1, r0
2002f6a8:	96808000 	mfs	r20, rpc
2002f6ac:	b000dffd 	imm	-8195
2002f6b0:	329422b4 	addik	r20, r20, 8884
2002f6b4:	f8b30010 	swi	r5, r19, 16
2002f6b8:	f8d30014 	swi	r6, r19, 20
2002f6bc:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002f6c0:	e8730010 	lwi	r3, r19, 16
2002f6c4:	e8630010 	lwi	r3, r3, 16
2002f6c8:	e8830000 	lwi	r4, r3, 0
2002f6cc:	e8730010 	lwi	r3, r19, 16
2002f6d0:	e8a3000c 	lwi	r5, r3, 12
2002f6d4:	e8730014 	lwi	r3, r19, 20
2002f6d8:	64630402 	bslli	r3, r3, 2
2002f6dc:	10651800 	addk	r3, r5, r3
2002f6e0:	e8630000 	lwi	r3, r3, 0
2002f6e4:	14a32000 	rsubk	r5, r3, r4
2002f6e8:	30600001 	addik	r3, r0, 1
2002f6ec:	e8930018 	lwi	r4, r19, 24
2002f6f0:	16442803 	cmpu	r18, r4, r5
2002f6f4:	bcb20008 	bgei	r18, 8		// 2002f6fc
2002f6f8:	10600000 	addk	r3, r0, r0
2002f6fc:	a46300ff 	andi	r3, r3, 255
}
2002f700:	10330000 	addk	r1, r19, r0
2002f704:	ea610004 	lwi	r19, r1, 4
2002f708:	ea810008 	lwi	r20, r1, 8
2002f70c:	3021000c 	addik	r1, r1, 12
2002f710:	b60f0008 	rtsd	r15, 8
2002f714:	80000000 	or	r0, r0, r0

2002f718 <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002f718:	3021fff4 	addik	r1, r1, -12
2002f71c:	fa610004 	swi	r19, r1, 4
2002f720:	fa810008 	swi	r20, r1, 8
2002f724:	12610000 	addk	r19, r1, r0
2002f728:	96808000 	mfs	r20, rpc
2002f72c:	b000dffd 	imm	-8195
2002f730:	32942234 	addik	r20, r20, 8756
2002f734:	f8b30010 	swi	r5, r19, 16
2002f738:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002f73c:	e8730010 	lwi	r3, r19, 16
2002f740:	e8630010 	lwi	r3, r3, 16
2002f744:	e8830000 	lwi	r4, r3, 0
2002f748:	e8730010 	lwi	r3, r19, 16
2002f74c:	e8a3000c 	lwi	r5, r3, 12
2002f750:	e8730014 	lwi	r3, r19, 20
2002f754:	64630402 	bslli	r3, r3, 2
2002f758:	10651800 	addk	r3, r5, r3
2002f75c:	e8630000 	lwi	r3, r3, 0
2002f760:	14632000 	rsubk	r3, r3, r4
}
2002f764:	10330000 	addk	r1, r19, r0
2002f768:	ea610004 	lwi	r19, r1, 4
2002f76c:	ea810008 	lwi	r20, r1, 8
2002f770:	3021000c 	addik	r1, r1, 12
2002f774:	b60f0008 	rtsd	r15, 8
2002f778:	80000000 	or	r0, r0, r0

2002f77c <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002f77c:	3021fff0 	addik	r1, r1, -16
2002f780:	fa610008 	swi	r19, r1, 8
2002f784:	fa81000c 	swi	r20, r1, 12
2002f788:	12610000 	addk	r19, r1, r0
2002f78c:	96808000 	mfs	r20, rpc
2002f790:	b000dffd 	imm	-8195
2002f794:	329421d0 	addik	r20, r20, 8656
2002f798:	f8b30014 	swi	r5, r19, 20
2002f79c:	f8d30018 	swi	r6, r19, 24
2002f7a0:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002f7a4:	f8130004 	swi	r0, r19, 4
2002f7a8:	b800005c 	bri	92		// 2002f804
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002f7ac:	e8730014 	lwi	r3, r19, 20
2002f7b0:	e8830000 	lwi	r4, r3, 0
2002f7b4:	e8730014 	lwi	r3, r19, 20
2002f7b8:	e8a3000c 	lwi	r5, r3, 12
2002f7bc:	e8730004 	lwi	r3, r19, 4
2002f7c0:	64630402 	bslli	r3, r3, 2
2002f7c4:	10651800 	addk	r3, r5, r3
2002f7c8:	e8a30000 	lwi	r5, r3, 0
2002f7cc:	e8730014 	lwi	r3, r19, 20
2002f7d0:	e8630010 	lwi	r3, r3, 16
2002f7d4:	e8630000 	lwi	r3, r3, 0
2002f7d8:	14632800 	rsubk	r3, r3, r5
2002f7dc:	10641800 	addk	r3, r4, r3
2002f7e0:	30830001 	addik	r4, r3, 1
2002f7e4:	e873001c 	lwi	r3, r19, 28
2002f7e8:	16441803 	cmpu	r18, r4, r3
2002f7ec:	bc52000c 	blti	r18, 12		// 2002f7f8
            return 0;
2002f7f0:	10600000 	addk	r3, r0, r0
2002f7f4:	b8000024 	bri	36		// 2002f818
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002f7f8:	e8730004 	lwi	r3, r19, 4
2002f7fc:	30630001 	addik	r3, r3, 1
2002f800:	f8730004 	swi	r3, r19, 4
2002f804:	e8930004 	lwi	r4, r19, 4
2002f808:	e8730018 	lwi	r3, r19, 24
2002f80c:	16432003 	cmpu	r18, r3, r4
2002f810:	bc52ff9c 	blti	r18, -100		// 2002f7ac
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002f814:	30600001 	addik	r3, r0, 1
}
2002f818:	10330000 	addk	r1, r19, r0
2002f81c:	ea610008 	lwi	r19, r1, 8
2002f820:	ea81000c 	lwi	r20, r1, 12
2002f824:	30210010 	addik	r1, r1, 16
2002f828:	b60f0008 	rtsd	r15, 8
2002f82c:	80000000 	or	r0, r0, r0

2002f830 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002f830:	3021ffe8 	addik	r1, r1, -24
2002f834:	fa610010 	swi	r19, r1, 16
2002f838:	fa810014 	swi	r20, r1, 20
2002f83c:	12610000 	addk	r19, r1, r0
2002f840:	96808000 	mfs	r20, rpc
2002f844:	b000dffd 	imm	-8195
2002f848:	3294211c 	addik	r20, r20, 8476
2002f84c:	f8b3001c 	swi	r5, r19, 28
2002f850:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002f854:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002f858:	f8130004 	swi	r0, r19, 4
2002f85c:	b8000054 	bri	84		// 2002f8b0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2002f860:	e873001c 	lwi	r3, r19, 28
2002f864:	e8630010 	lwi	r3, r3, 16
2002f868:	e8830000 	lwi	r4, r3, 0
2002f86c:	e873001c 	lwi	r3, r19, 28
2002f870:	e8a3000c 	lwi	r5, r3, 12
2002f874:	e8730004 	lwi	r3, r19, 4
2002f878:	64630402 	bslli	r3, r3, 2
2002f87c:	10651800 	addk	r3, r5, r3
2002f880:	e8630000 	lwi	r3, r3, 0
2002f884:	14632000 	rsubk	r3, r3, r4
2002f888:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002f88c:	e8930008 	lwi	r4, r19, 8
2002f890:	e873000c 	lwi	r3, r19, 12
2002f894:	16441803 	cmpu	r18, r4, r3
2002f898:	bcb20008 	bgei	r18, 8		// 2002f8a0
2002f89c:	10640000 	addk	r3, r4, r0
2002f8a0:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002f8a4:	e8730004 	lwi	r3, r19, 4
2002f8a8:	30630001 	addik	r3, r3, 1
2002f8ac:	f8730004 	swi	r3, r19, 4
2002f8b0:	e8930004 	lwi	r4, r19, 4
2002f8b4:	e8730020 	lwi	r3, r19, 32
2002f8b8:	16432003 	cmpu	r18, r3, r4
2002f8bc:	bc52ffa4 	blti	r18, -92		// 2002f860
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002f8c0:	e873001c 	lwi	r3, r19, 28
2002f8c4:	e8830000 	lwi	r4, r3, 0
2002f8c8:	e8730008 	lwi	r3, r19, 8
2002f8cc:	14632000 	rsubk	r3, r3, r4
}
2002f8d0:	10330000 	addk	r1, r19, r0
2002f8d4:	ea610010 	lwi	r19, r1, 16
2002f8d8:	ea810014 	lwi	r20, r1, 20
2002f8dc:	30210018 	addik	r1, r1, 24
2002f8e0:	b60f0008 	rtsd	r15, 8
2002f8e4:	80000000 	or	r0, r0, r0

2002f8e8 <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002f8e8:	3021fff0 	addik	r1, r1, -16
2002f8ec:	fa610008 	swi	r19, r1, 8
2002f8f0:	fa81000c 	swi	r20, r1, 12
2002f8f4:	12610000 	addk	r19, r1, r0
2002f8f8:	96808000 	mfs	r20, rpc
2002f8fc:	b000dffd 	imm	-8195
2002f900:	32942064 	addik	r20, r20, 8292
2002f904:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2002f908:	e8730014 	lwi	r3, r19, 20
2002f90c:	e8630010 	lwi	r3, r3, 16
2002f910:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002f914:	f8130004 	swi	r0, r19, 4
2002f918:	b8000028 	bri	40		// 2002f940
        fifo->read_inds[i] = 0;
2002f91c:	e8730014 	lwi	r3, r19, 20
2002f920:	e883000c 	lwi	r4, r3, 12
2002f924:	e8730004 	lwi	r3, r19, 4
2002f928:	64630402 	bslli	r3, r3, 2
2002f92c:	10641800 	addk	r3, r4, r3
2002f930:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002f934:	e8730004 	lwi	r3, r19, 4
2002f938:	30630001 	addik	r3, r3, 1
2002f93c:	f8730004 	swi	r3, r19, 4
2002f940:	e8730014 	lwi	r3, r19, 20
2002f944:	e8830008 	lwi	r4, r3, 8
2002f948:	e8730004 	lwi	r3, r19, 4
2002f94c:	16441803 	cmpu	r18, r4, r3
2002f950:	bc52ffcc 	blti	r18, -52		// 2002f91c
        fifo->read_inds[i] = 0;
    }
}
2002f954:	10330000 	addk	r1, r19, r0
2002f958:	ea610008 	lwi	r19, r1, 8
2002f95c:	ea81000c 	lwi	r20, r1, 12
2002f960:	30210010 	addik	r1, r1, 16
2002f964:	b60f0008 	rtsd	r15, 8
2002f968:	80000000 	or	r0, r0, r0

2002f96c <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002f96c:	3021fff0 	addik	r1, r1, -16
2002f970:	fa610008 	swi	r19, r1, 8
2002f974:	fa81000c 	swi	r20, r1, 12
2002f978:	12610000 	addk	r19, r1, r0
2002f97c:	96808000 	mfs	r20, rpc
2002f980:	b000dffd 	imm	-8195
2002f984:	32941fe0 	addik	r20, r20, 8160
2002f988:	f8b30014 	swi	r5, r19, 20
2002f98c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2002f990:	e8730014 	lwi	r3, r19, 20
2002f994:	e8830004 	lwi	r4, r3, 4
2002f998:	e8730014 	lwi	r3, r19, 20
2002f99c:	e8a3000c 	lwi	r5, r3, 12
2002f9a0:	e8730018 	lwi	r3, r19, 24
2002f9a4:	64630402 	bslli	r3, r3, 2
2002f9a8:	10651800 	addk	r3, r5, r3
2002f9ac:	e8a30000 	lwi	r5, r3, 0
2002f9b0:	e8730014 	lwi	r3, r19, 20
2002f9b4:	e8630000 	lwi	r3, r3, 0
2002f9b8:	3063ffff 	addik	r3, r3, -1
2002f9bc:	84651800 	and	r3, r5, r3
2002f9c0:	10641800 	addk	r3, r4, r3
2002f9c4:	e0630000 	lbui	r3, r3, 0
2002f9c8:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2002f9cc:	e8730014 	lwi	r3, r19, 20
2002f9d0:	e883000c 	lwi	r4, r3, 12
2002f9d4:	e8730018 	lwi	r3, r19, 24
2002f9d8:	64630402 	bslli	r3, r3, 2
2002f9dc:	10641800 	addk	r3, r4, r3
2002f9e0:	e8830000 	lwi	r4, r3, 0
2002f9e4:	30840001 	addik	r4, r4, 1
2002f9e8:	f8830000 	swi	r4, r3, 0
    return value;
2002f9ec:	e0730004 	lbui	r3, r19, 4
}
2002f9f0:	10330000 	addk	r1, r19, r0
2002f9f4:	ea610008 	lwi	r19, r1, 8
2002f9f8:	ea81000c 	lwi	r20, r1, 12
2002f9fc:	30210010 	addik	r1, r1, 16
2002fa00:	b60f0008 	rtsd	r15, 8
2002fa04:	80000000 	or	r0, r0, r0

2002fa08 <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002fa08:	3021fff4 	addik	r1, r1, -12
2002fa0c:	fa610004 	swi	r19, r1, 4
2002fa10:	fa810008 	swi	r20, r1, 8
2002fa14:	12610000 	addk	r19, r1, r0
2002fa18:	96808000 	mfs	r20, rpc
2002fa1c:	b000dffd 	imm	-8195
2002fa20:	32941f44 	addik	r20, r20, 8004
2002fa24:	f8b30010 	swi	r5, r19, 16
2002fa28:	10660000 	addk	r3, r6, r0
2002fa2c:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002fa30:	e8730010 	lwi	r3, r19, 16
2002fa34:	e8830004 	lwi	r4, r3, 4
2002fa38:	e8730010 	lwi	r3, r19, 16
2002fa3c:	e8630010 	lwi	r3, r3, 16
2002fa40:	e8a30000 	lwi	r5, r3, 0
2002fa44:	e8730010 	lwi	r3, r19, 16
2002fa48:	e8630000 	lwi	r3, r3, 0
2002fa4c:	3063ffff 	addik	r3, r3, -1
2002fa50:	84651800 	and	r3, r5, r3
2002fa54:	10641800 	addk	r3, r4, r3
2002fa58:	e0930014 	lbui	r4, r19, 20
2002fa5c:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2002fa60:	e8730010 	lwi	r3, r19, 16
2002fa64:	e8630010 	lwi	r3, r3, 16
2002fa68:	e8830000 	lwi	r4, r3, 0
2002fa6c:	30840001 	addik	r4, r4, 1
2002fa70:	f8830000 	swi	r4, r3, 0
}
2002fa74:	10330000 	addk	r1, r19, r0
2002fa78:	ea610004 	lwi	r19, r1, 4
2002fa7c:	ea810008 	lwi	r20, r1, 8
2002fa80:	3021000c 	addik	r1, r1, 12
2002fa84:	b60f0008 	rtsd	r15, 8
2002fa88:	80000000 	or	r0, r0, r0

2002fa8c <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002fa8c:	3021fff4 	addik	r1, r1, -12
2002fa90:	fa610004 	swi	r19, r1, 4
2002fa94:	fa810008 	swi	r20, r1, 8
2002fa98:	12610000 	addk	r19, r1, r0
2002fa9c:	96808000 	mfs	r20, rpc
2002faa0:	b000dffd 	imm	-8195
2002faa4:	32941ec0 	addik	r20, r20, 7872
2002faa8:	f8b30010 	swi	r5, r19, 16
2002faac:	f8d30014 	swi	r6, r19, 20
2002fab0:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002fab4:	e8730010 	lwi	r3, r19, 16
2002fab8:	e8630010 	lwi	r3, r3, 16
2002fabc:	e8830000 	lwi	r4, r3, 0
2002fac0:	e8730010 	lwi	r3, r19, 16
2002fac4:	e8a3000c 	lwi	r5, r3, 12
2002fac8:	e8730014 	lwi	r3, r19, 20
2002facc:	64630402 	bslli	r3, r3, 2
2002fad0:	10651800 	addk	r3, r5, r3
2002fad4:	e8630000 	lwi	r3, r3, 0
2002fad8:	14a32000 	rsubk	r5, r3, r4
2002fadc:	30600001 	addik	r3, r0, 1
2002fae0:	e8930018 	lwi	r4, r19, 24
2002fae4:	16442803 	cmpu	r18, r4, r5
2002fae8:	bcb20008 	bgei	r18, 8		// 2002faf0
2002faec:	10600000 	addk	r3, r0, r0
2002faf0:	a46300ff 	andi	r3, r3, 255
}
2002faf4:	10330000 	addk	r1, r19, r0
2002faf8:	ea610004 	lwi	r19, r1, 4
2002fafc:	ea810008 	lwi	r20, r1, 8
2002fb00:	3021000c 	addik	r1, r1, 12
2002fb04:	b60f0008 	rtsd	r15, 8
2002fb08:	80000000 	or	r0, r0, r0

2002fb0c <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002fb0c:	3021fff4 	addik	r1, r1, -12
2002fb10:	fa610004 	swi	r19, r1, 4
2002fb14:	fa810008 	swi	r20, r1, 8
2002fb18:	12610000 	addk	r19, r1, r0
2002fb1c:	96808000 	mfs	r20, rpc
2002fb20:	b000dffd 	imm	-8195
2002fb24:	32941e40 	addik	r20, r20, 7744
2002fb28:	f8b30010 	swi	r5, r19, 16
2002fb2c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002fb30:	e8730010 	lwi	r3, r19, 16
2002fb34:	e8630010 	lwi	r3, r3, 16
2002fb38:	e8830000 	lwi	r4, r3, 0
2002fb3c:	e8730010 	lwi	r3, r19, 16
2002fb40:	e8a3000c 	lwi	r5, r3, 12
2002fb44:	e8730014 	lwi	r3, r19, 20
2002fb48:	64630402 	bslli	r3, r3, 2
2002fb4c:	10651800 	addk	r3, r5, r3
2002fb50:	e8630000 	lwi	r3, r3, 0
2002fb54:	14632000 	rsubk	r3, r3, r4
}
2002fb58:	10330000 	addk	r1, r19, r0
2002fb5c:	ea610004 	lwi	r19, r1, 4
2002fb60:	ea810008 	lwi	r20, r1, 8
2002fb64:	3021000c 	addik	r1, r1, 12
2002fb68:	b60f0008 	rtsd	r15, 8
2002fb6c:	80000000 	or	r0, r0, r0

2002fb70 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002fb70:	3021fff0 	addik	r1, r1, -16
2002fb74:	fa610008 	swi	r19, r1, 8
2002fb78:	fa81000c 	swi	r20, r1, 12
2002fb7c:	12610000 	addk	r19, r1, r0
2002fb80:	96808000 	mfs	r20, rpc
2002fb84:	b000dffd 	imm	-8195
2002fb88:	32941ddc 	addik	r20, r20, 7644
2002fb8c:	f8b30014 	swi	r5, r19, 20
2002fb90:	f8d30018 	swi	r6, r19, 24
2002fb94:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002fb98:	f8130004 	swi	r0, r19, 4
2002fb9c:	b800005c 	bri	92		// 2002fbf8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002fba0:	e8730014 	lwi	r3, r19, 20
2002fba4:	e8830000 	lwi	r4, r3, 0
2002fba8:	e8730014 	lwi	r3, r19, 20
2002fbac:	e8a3000c 	lwi	r5, r3, 12
2002fbb0:	e8730004 	lwi	r3, r19, 4
2002fbb4:	64630402 	bslli	r3, r3, 2
2002fbb8:	10651800 	addk	r3, r5, r3
2002fbbc:	e8a30000 	lwi	r5, r3, 0
2002fbc0:	e8730014 	lwi	r3, r19, 20
2002fbc4:	e8630010 	lwi	r3, r3, 16
2002fbc8:	e8630000 	lwi	r3, r3, 0
2002fbcc:	14632800 	rsubk	r3, r3, r5
2002fbd0:	10641800 	addk	r3, r4, r3
2002fbd4:	30830001 	addik	r4, r3, 1
2002fbd8:	e873001c 	lwi	r3, r19, 28
2002fbdc:	16441803 	cmpu	r18, r4, r3
2002fbe0:	bc52000c 	blti	r18, 12		// 2002fbec
            return 0;
2002fbe4:	10600000 	addk	r3, r0, r0
2002fbe8:	b8000024 	bri	36		// 2002fc0c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002fbec:	e8730004 	lwi	r3, r19, 4
2002fbf0:	30630001 	addik	r3, r3, 1
2002fbf4:	f8730004 	swi	r3, r19, 4
2002fbf8:	e8930004 	lwi	r4, r19, 4
2002fbfc:	e8730018 	lwi	r3, r19, 24
2002fc00:	16432003 	cmpu	r18, r3, r4
2002fc04:	bc52ff9c 	blti	r18, -100		// 2002fba0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2002fc08:	30600001 	addik	r3, r0, 1
}
2002fc0c:	10330000 	addk	r1, r19, r0
2002fc10:	ea610008 	lwi	r19, r1, 8
2002fc14:	ea81000c 	lwi	r20, r1, 12
2002fc18:	30210010 	addik	r1, r1, 16
2002fc1c:	b60f0008 	rtsd	r15, 8
2002fc20:	80000000 	or	r0, r0, r0

2002fc24 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2002fc24:	3021ffe8 	addik	r1, r1, -24
2002fc28:	fa610010 	swi	r19, r1, 16
2002fc2c:	fa810014 	swi	r20, r1, 20
2002fc30:	12610000 	addk	r19, r1, r0
2002fc34:	96808000 	mfs	r20, rpc
2002fc38:	b000dffd 	imm	-8195
2002fc3c:	32941d28 	addik	r20, r20, 7464
2002fc40:	f8b3001c 	swi	r5, r19, 28
2002fc44:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2002fc48:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2002fc4c:	f8130004 	swi	r0, r19, 4
2002fc50:	b8000054 	bri	84		// 2002fca4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2002fc54:	e873001c 	lwi	r3, r19, 28
2002fc58:	e8630010 	lwi	r3, r3, 16
2002fc5c:	e8830000 	lwi	r4, r3, 0
2002fc60:	e873001c 	lwi	r3, r19, 28
2002fc64:	e8a3000c 	lwi	r5, r3, 12
2002fc68:	e8730004 	lwi	r3, r19, 4
2002fc6c:	64630402 	bslli	r3, r3, 2
2002fc70:	10651800 	addk	r3, r5, r3
2002fc74:	e8630000 	lwi	r3, r3, 0
2002fc78:	14632000 	rsubk	r3, r3, r4
2002fc7c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2002fc80:	e8930008 	lwi	r4, r19, 8
2002fc84:	e873000c 	lwi	r3, r19, 12
2002fc88:	16441803 	cmpu	r18, r4, r3
2002fc8c:	bcb20008 	bgei	r18, 8		// 2002fc94
2002fc90:	10640000 	addk	r3, r4, r0
2002fc94:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2002fc98:	e8730004 	lwi	r3, r19, 4
2002fc9c:	30630001 	addik	r3, r3, 1
2002fca0:	f8730004 	swi	r3, r19, 4
2002fca4:	e8930004 	lwi	r4, r19, 4
2002fca8:	e8730020 	lwi	r3, r19, 32
2002fcac:	16432003 	cmpu	r18, r3, r4
2002fcb0:	bc52ffa4 	blti	r18, -92		// 2002fc54
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2002fcb4:	e873001c 	lwi	r3, r19, 28
2002fcb8:	e8830000 	lwi	r4, r3, 0
2002fcbc:	e8730008 	lwi	r3, r19, 8
2002fcc0:	14632000 	rsubk	r3, r3, r4
}
2002fcc4:	10330000 	addk	r1, r19, r0
2002fcc8:	ea610010 	lwi	r19, r1, 16
2002fccc:	ea810014 	lwi	r20, r1, 20
2002fcd0:	30210018 	addik	r1, r1, 24
2002fcd4:	b60f0008 	rtsd	r15, 8
2002fcd8:	80000000 	or	r0, r0, r0

2002fcdc <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2002fcdc:	3021fff0 	addik	r1, r1, -16
2002fce0:	fa610008 	swi	r19, r1, 8
2002fce4:	fa81000c 	swi	r20, r1, 12
2002fce8:	12610000 	addk	r19, r1, r0
2002fcec:	96808000 	mfs	r20, rpc
2002fcf0:	b000dffd 	imm	-8195
2002fcf4:	32941c70 	addik	r20, r20, 7280
2002fcf8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2002fcfc:	e8730014 	lwi	r3, r19, 20
2002fd00:	e8630010 	lwi	r3, r3, 16
2002fd04:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2002fd08:	f8130004 	swi	r0, r19, 4
2002fd0c:	b8000028 	bri	40		// 2002fd34
        fifo->read_inds[i] = 0;
2002fd10:	e8730014 	lwi	r3, r19, 20
2002fd14:	e883000c 	lwi	r4, r3, 12
2002fd18:	e8730004 	lwi	r3, r19, 4
2002fd1c:	64630402 	bslli	r3, r3, 2
2002fd20:	10641800 	addk	r3, r4, r3
2002fd24:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2002fd28:	e8730004 	lwi	r3, r19, 4
2002fd2c:	30630001 	addik	r3, r3, 1
2002fd30:	f8730004 	swi	r3, r19, 4
2002fd34:	e8730014 	lwi	r3, r19, 20
2002fd38:	e8830008 	lwi	r4, r3, 8
2002fd3c:	e8730004 	lwi	r3, r19, 4
2002fd40:	16441803 	cmpu	r18, r4, r3
2002fd44:	bc52ffcc 	blti	r18, -52		// 2002fd10
        fifo->read_inds[i] = 0;
    }
}
2002fd48:	10330000 	addk	r1, r19, r0
2002fd4c:	ea610008 	lwi	r19, r1, 8
2002fd50:	ea81000c 	lwi	r20, r1, 12
2002fd54:	30210010 	addik	r1, r1, 16
2002fd58:	b60f0008 	rtsd	r15, 8
2002fd5c:	80000000 	or	r0, r0, r0

2002fd60 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002fd60:	3021fff0 	addik	r1, r1, -16
2002fd64:	fa610008 	swi	r19, r1, 8
2002fd68:	fa81000c 	swi	r20, r1, 12
2002fd6c:	12610000 	addk	r19, r1, r0
2002fd70:	96808000 	mfs	r20, rpc
2002fd74:	b000dffd 	imm	-8195
2002fd78:	32941bec 	addik	r20, r20, 7148
2002fd7c:	f8b30014 	swi	r5, r19, 20
2002fd80:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2002fd84:	e8730014 	lwi	r3, r19, 20
2002fd88:	e8830004 	lwi	r4, r3, 4
2002fd8c:	e8730014 	lwi	r3, r19, 20
2002fd90:	e8a3000c 	lwi	r5, r3, 12
2002fd94:	e8730018 	lwi	r3, r19, 24
2002fd98:	64630402 	bslli	r3, r3, 2
2002fd9c:	10651800 	addk	r3, r5, r3
2002fda0:	e8a30000 	lwi	r5, r3, 0
2002fda4:	e8730014 	lwi	r3, r19, 20
2002fda8:	e8630000 	lwi	r3, r3, 0
2002fdac:	3063ffff 	addik	r3, r3, -1
2002fdb0:	84651800 	and	r3, r5, r3
2002fdb4:	10631800 	addk	r3, r3, r3
2002fdb8:	10641800 	addk	r3, r4, r3
2002fdbc:	e4630000 	lhui	r3, r3, 0
2002fdc0:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2002fdc4:	e8730014 	lwi	r3, r19, 20
2002fdc8:	e883000c 	lwi	r4, r3, 12
2002fdcc:	e8730018 	lwi	r3, r19, 24
2002fdd0:	64630402 	bslli	r3, r3, 2
2002fdd4:	10641800 	addk	r3, r4, r3
2002fdd8:	e8830000 	lwi	r4, r3, 0
2002fddc:	30840001 	addik	r4, r4, 1
2002fde0:	f8830000 	swi	r4, r3, 0
    return value;
2002fde4:	e4730004 	lhui	r3, r19, 4
}
2002fde8:	10330000 	addk	r1, r19, r0
2002fdec:	ea610008 	lwi	r19, r1, 8
2002fdf0:	ea81000c 	lwi	r20, r1, 12
2002fdf4:	30210010 	addik	r1, r1, 16
2002fdf8:	b60f0008 	rtsd	r15, 8
2002fdfc:	80000000 	or	r0, r0, r0

2002fe00 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2002fe00:	3021fff4 	addik	r1, r1, -12
2002fe04:	fa610004 	swi	r19, r1, 4
2002fe08:	fa810008 	swi	r20, r1, 8
2002fe0c:	12610000 	addk	r19, r1, r0
2002fe10:	96808000 	mfs	r20, rpc
2002fe14:	b000dffd 	imm	-8195
2002fe18:	32941b4c 	addik	r20, r20, 6988
2002fe1c:	f8b30010 	swi	r5, r19, 16
2002fe20:	10660000 	addk	r3, r6, r0
2002fe24:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2002fe28:	e8730010 	lwi	r3, r19, 16
2002fe2c:	e8830004 	lwi	r4, r3, 4
2002fe30:	e8730010 	lwi	r3, r19, 16
2002fe34:	e8630010 	lwi	r3, r3, 16
2002fe38:	e8a30000 	lwi	r5, r3, 0
2002fe3c:	e8730010 	lwi	r3, r19, 16
2002fe40:	e8630000 	lwi	r3, r3, 0
2002fe44:	3063ffff 	addik	r3, r3, -1
2002fe48:	84651800 	and	r3, r5, r3
2002fe4c:	10631800 	addk	r3, r3, r3
2002fe50:	10641800 	addk	r3, r4, r3
2002fe54:	e4930014 	lhui	r4, r19, 20
2002fe58:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2002fe5c:	e8730010 	lwi	r3, r19, 16
2002fe60:	e8630010 	lwi	r3, r3, 16
2002fe64:	e8830000 	lwi	r4, r3, 0
2002fe68:	30840001 	addik	r4, r4, 1
2002fe6c:	f8830000 	swi	r4, r3, 0
}
2002fe70:	10330000 	addk	r1, r19, r0
2002fe74:	ea610004 	lwi	r19, r1, 4
2002fe78:	ea810008 	lwi	r20, r1, 8
2002fe7c:	3021000c 	addik	r1, r1, 12
2002fe80:	b60f0008 	rtsd	r15, 8
2002fe84:	80000000 	or	r0, r0, r0

2002fe88 <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2002fe88:	3021fff4 	addik	r1, r1, -12
2002fe8c:	fa610004 	swi	r19, r1, 4
2002fe90:	fa810008 	swi	r20, r1, 8
2002fe94:	12610000 	addk	r19, r1, r0
2002fe98:	96808000 	mfs	r20, rpc
2002fe9c:	b000dffd 	imm	-8195
2002fea0:	32941ac4 	addik	r20, r20, 6852
2002fea4:	f8b30010 	swi	r5, r19, 16
2002fea8:	f8d30014 	swi	r6, r19, 20
2002feac:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2002feb0:	e8730010 	lwi	r3, r19, 16
2002feb4:	e8630010 	lwi	r3, r3, 16
2002feb8:	e8830000 	lwi	r4, r3, 0
2002febc:	e8730010 	lwi	r3, r19, 16
2002fec0:	e8a3000c 	lwi	r5, r3, 12
2002fec4:	e8730014 	lwi	r3, r19, 20
2002fec8:	64630402 	bslli	r3, r3, 2
2002fecc:	10651800 	addk	r3, r5, r3
2002fed0:	e8630000 	lwi	r3, r3, 0
2002fed4:	14a32000 	rsubk	r5, r3, r4
2002fed8:	30600001 	addik	r3, r0, 1
2002fedc:	e8930018 	lwi	r4, r19, 24
2002fee0:	16442803 	cmpu	r18, r4, r5
2002fee4:	bcb20008 	bgei	r18, 8		// 2002feec
2002fee8:	10600000 	addk	r3, r0, r0
2002feec:	a46300ff 	andi	r3, r3, 255
}
2002fef0:	10330000 	addk	r1, r19, r0
2002fef4:	ea610004 	lwi	r19, r1, 4
2002fef8:	ea810008 	lwi	r20, r1, 8
2002fefc:	3021000c 	addik	r1, r1, 12
2002ff00:	b60f0008 	rtsd	r15, 8
2002ff04:	80000000 	or	r0, r0, r0

2002ff08 <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2002ff08:	3021fff4 	addik	r1, r1, -12
2002ff0c:	fa610004 	swi	r19, r1, 4
2002ff10:	fa810008 	swi	r20, r1, 8
2002ff14:	12610000 	addk	r19, r1, r0
2002ff18:	96808000 	mfs	r20, rpc
2002ff1c:	b000dffd 	imm	-8195
2002ff20:	32941a44 	addik	r20, r20, 6724
2002ff24:	f8b30010 	swi	r5, r19, 16
2002ff28:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2002ff2c:	e8730010 	lwi	r3, r19, 16
2002ff30:	e8630010 	lwi	r3, r3, 16
2002ff34:	e8830000 	lwi	r4, r3, 0
2002ff38:	e8730010 	lwi	r3, r19, 16
2002ff3c:	e8a3000c 	lwi	r5, r3, 12
2002ff40:	e8730014 	lwi	r3, r19, 20
2002ff44:	64630402 	bslli	r3, r3, 2
2002ff48:	10651800 	addk	r3, r5, r3
2002ff4c:	e8630000 	lwi	r3, r3, 0
2002ff50:	14632000 	rsubk	r3, r3, r4
}
2002ff54:	10330000 	addk	r1, r19, r0
2002ff58:	ea610004 	lwi	r19, r1, 4
2002ff5c:	ea810008 	lwi	r20, r1, 8
2002ff60:	3021000c 	addik	r1, r1, 12
2002ff64:	b60f0008 	rtsd	r15, 8
2002ff68:	80000000 	or	r0, r0, r0

2002ff6c <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2002ff6c:	3021fff0 	addik	r1, r1, -16
2002ff70:	fa610008 	swi	r19, r1, 8
2002ff74:	fa81000c 	swi	r20, r1, 12
2002ff78:	12610000 	addk	r19, r1, r0
2002ff7c:	96808000 	mfs	r20, rpc
2002ff80:	b000dffd 	imm	-8195
2002ff84:	329419e0 	addik	r20, r20, 6624
2002ff88:	f8b30014 	swi	r5, r19, 20
2002ff8c:	f8d30018 	swi	r6, r19, 24
2002ff90:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002ff94:	f8130004 	swi	r0, r19, 4
2002ff98:	b800005c 	bri	92		// 2002fff4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2002ff9c:	e8730014 	lwi	r3, r19, 20
2002ffa0:	e8830000 	lwi	r4, r3, 0
2002ffa4:	e8730014 	lwi	r3, r19, 20
2002ffa8:	e8a3000c 	lwi	r5, r3, 12
2002ffac:	e8730004 	lwi	r3, r19, 4
2002ffb0:	64630402 	bslli	r3, r3, 2
2002ffb4:	10651800 	addk	r3, r5, r3
2002ffb8:	e8a30000 	lwi	r5, r3, 0
2002ffbc:	e8730014 	lwi	r3, r19, 20
2002ffc0:	e8630010 	lwi	r3, r3, 16
2002ffc4:	e8630000 	lwi	r3, r3, 0
2002ffc8:	14632800 	rsubk	r3, r3, r5
2002ffcc:	10641800 	addk	r3, r4, r3
2002ffd0:	30830001 	addik	r4, r3, 1
2002ffd4:	e873001c 	lwi	r3, r19, 28
2002ffd8:	16441803 	cmpu	r18, r4, r3
2002ffdc:	bc52000c 	blti	r18, 12		// 2002ffe8
            return 0;
2002ffe0:	10600000 	addk	r3, r0, r0
2002ffe4:	b8000024 	bri	36		// 20030008
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2002ffe8:	e8730004 	lwi	r3, r19, 4
2002ffec:	30630001 	addik	r3, r3, 1
2002fff0:	f8730004 	swi	r3, r19, 4
2002fff4:	e8930004 	lwi	r4, r19, 4
2002fff8:	e8730018 	lwi	r3, r19, 24
2002fffc:	16432003 	cmpu	r18, r3, r4
20030000:	bc52ff9c 	blti	r18, -100		// 2002ff9c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20030004:	30600001 	addik	r3, r0, 1
}
20030008:	10330000 	addk	r1, r19, r0
2003000c:	ea610008 	lwi	r19, r1, 8
20030010:	ea81000c 	lwi	r20, r1, 12
20030014:	30210010 	addik	r1, r1, 16
20030018:	b60f0008 	rtsd	r15, 8
2003001c:	80000000 	or	r0, r0, r0

20030020 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20030020:	3021ffe8 	addik	r1, r1, -24
20030024:	fa610010 	swi	r19, r1, 16
20030028:	fa810014 	swi	r20, r1, 20
2003002c:	12610000 	addk	r19, r1, r0
20030030:	96808000 	mfs	r20, rpc
20030034:	b000dffd 	imm	-8195
20030038:	3294192c 	addik	r20, r20, 6444
2003003c:	f8b3001c 	swi	r5, r19, 28
20030040:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20030044:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20030048:	f8130004 	swi	r0, r19, 4
2003004c:	b8000054 	bri	84		// 200300a0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20030050:	e873001c 	lwi	r3, r19, 28
20030054:	e8630010 	lwi	r3, r3, 16
20030058:	e8830000 	lwi	r4, r3, 0
2003005c:	e873001c 	lwi	r3, r19, 28
20030060:	e8a3000c 	lwi	r5, r3, 12
20030064:	e8730004 	lwi	r3, r19, 4
20030068:	64630402 	bslli	r3, r3, 2
2003006c:	10651800 	addk	r3, r5, r3
20030070:	e8630000 	lwi	r3, r3, 0
20030074:	14632000 	rsubk	r3, r3, r4
20030078:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003007c:	e8930008 	lwi	r4, r19, 8
20030080:	e873000c 	lwi	r3, r19, 12
20030084:	16441803 	cmpu	r18, r4, r3
20030088:	bcb20008 	bgei	r18, 8		// 20030090
2003008c:	10640000 	addk	r3, r4, r0
20030090:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20030094:	e8730004 	lwi	r3, r19, 4
20030098:	30630001 	addik	r3, r3, 1
2003009c:	f8730004 	swi	r3, r19, 4
200300a0:	e8930004 	lwi	r4, r19, 4
200300a4:	e8730020 	lwi	r3, r19, 32
200300a8:	16432003 	cmpu	r18, r3, r4
200300ac:	bc52ffa4 	blti	r18, -92		// 20030050
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200300b0:	e873001c 	lwi	r3, r19, 28
200300b4:	e8830000 	lwi	r4, r3, 0
200300b8:	e8730008 	lwi	r3, r19, 8
200300bc:	14632000 	rsubk	r3, r3, r4
}
200300c0:	10330000 	addk	r1, r19, r0
200300c4:	ea610010 	lwi	r19, r1, 16
200300c8:	ea810014 	lwi	r20, r1, 20
200300cc:	30210018 	addik	r1, r1, 24
200300d0:	b60f0008 	rtsd	r15, 8
200300d4:	80000000 	or	r0, r0, r0

200300d8 <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200300d8:	3021fff0 	addik	r1, r1, -16
200300dc:	fa610008 	swi	r19, r1, 8
200300e0:	fa81000c 	swi	r20, r1, 12
200300e4:	12610000 	addk	r19, r1, r0
200300e8:	96808000 	mfs	r20, rpc
200300ec:	b000dffd 	imm	-8195
200300f0:	32941874 	addik	r20, r20, 6260
200300f4:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200300f8:	e8730014 	lwi	r3, r19, 20
200300fc:	e8630010 	lwi	r3, r3, 16
20030100:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20030104:	f8130004 	swi	r0, r19, 4
20030108:	b8000028 	bri	40		// 20030130
        fifo->read_inds[i] = 0;
2003010c:	e8730014 	lwi	r3, r19, 20
20030110:	e883000c 	lwi	r4, r3, 12
20030114:	e8730004 	lwi	r3, r19, 4
20030118:	64630402 	bslli	r3, r3, 2
2003011c:	10641800 	addk	r3, r4, r3
20030120:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20030124:	e8730004 	lwi	r3, r19, 4
20030128:	30630001 	addik	r3, r3, 1
2003012c:	f8730004 	swi	r3, r19, 4
20030130:	e8730014 	lwi	r3, r19, 20
20030134:	e8830008 	lwi	r4, r3, 8
20030138:	e8730004 	lwi	r3, r19, 4
2003013c:	16441803 	cmpu	r18, r4, r3
20030140:	bc52ffcc 	blti	r18, -52		// 2003010c
        fifo->read_inds[i] = 0;
    }
}
20030144:	10330000 	addk	r1, r19, r0
20030148:	ea610008 	lwi	r19, r1, 8
2003014c:	ea81000c 	lwi	r20, r1, 12
20030150:	30210010 	addik	r1, r1, 16
20030154:	b60f0008 	rtsd	r15, 8
20030158:	80000000 	or	r0, r0, r0

2003015c <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003015c:	3021fff0 	addik	r1, r1, -16
20030160:	fa610008 	swi	r19, r1, 8
20030164:	fa81000c 	swi	r20, r1, 12
20030168:	12610000 	addk	r19, r1, r0
2003016c:	96808000 	mfs	r20, rpc
20030170:	b000dffd 	imm	-8195
20030174:	329417f0 	addik	r20, r20, 6128
20030178:	f8b30014 	swi	r5, r19, 20
2003017c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20030180:	e8730014 	lwi	r3, r19, 20
20030184:	e8830004 	lwi	r4, r3, 4
20030188:	e8730014 	lwi	r3, r19, 20
2003018c:	e8a3000c 	lwi	r5, r3, 12
20030190:	e8730018 	lwi	r3, r19, 24
20030194:	64630402 	bslli	r3, r3, 2
20030198:	10651800 	addk	r3, r5, r3
2003019c:	e8a30000 	lwi	r5, r3, 0
200301a0:	e8730014 	lwi	r3, r19, 20
200301a4:	e8630000 	lwi	r3, r3, 0
200301a8:	3063ffff 	addik	r3, r3, -1
200301ac:	84651800 	and	r3, r5, r3
200301b0:	64630402 	bslli	r3, r3, 2
200301b4:	10641800 	addk	r3, r4, r3
200301b8:	e8630000 	lwi	r3, r3, 0
200301bc:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200301c0:	e8730014 	lwi	r3, r19, 20
200301c4:	e883000c 	lwi	r4, r3, 12
200301c8:	e8730018 	lwi	r3, r19, 24
200301cc:	64630402 	bslli	r3, r3, 2
200301d0:	10641800 	addk	r3, r4, r3
200301d4:	e8830000 	lwi	r4, r3, 0
200301d8:	30840001 	addik	r4, r4, 1
200301dc:	f8830000 	swi	r4, r3, 0
    return value;
200301e0:	e8730004 	lwi	r3, r19, 4
}
200301e4:	10330000 	addk	r1, r19, r0
200301e8:	ea610008 	lwi	r19, r1, 8
200301ec:	ea81000c 	lwi	r20, r1, 12
200301f0:	30210010 	addik	r1, r1, 16
200301f4:	b60f0008 	rtsd	r15, 8
200301f8:	80000000 	or	r0, r0, r0

200301fc <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200301fc:	3021fff4 	addik	r1, r1, -12
20030200:	fa610004 	swi	r19, r1, 4
20030204:	fa810008 	swi	r20, r1, 8
20030208:	12610000 	addk	r19, r1, r0
2003020c:	96808000 	mfs	r20, rpc
20030210:	b000dffd 	imm	-8195
20030214:	32941750 	addik	r20, r20, 5968
20030218:	f8b30010 	swi	r5, r19, 16
2003021c:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20030220:	e8730010 	lwi	r3, r19, 16
20030224:	e8830004 	lwi	r4, r3, 4
20030228:	e8730010 	lwi	r3, r19, 16
2003022c:	e8630010 	lwi	r3, r3, 16
20030230:	e8a30000 	lwi	r5, r3, 0
20030234:	e8730010 	lwi	r3, r19, 16
20030238:	e8630000 	lwi	r3, r3, 0
2003023c:	3063ffff 	addik	r3, r3, -1
20030240:	84651800 	and	r3, r5, r3
20030244:	64630402 	bslli	r3, r3, 2
20030248:	10641800 	addk	r3, r4, r3
2003024c:	e8930014 	lwi	r4, r19, 20
20030250:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20030254:	e8730010 	lwi	r3, r19, 16
20030258:	e8630010 	lwi	r3, r3, 16
2003025c:	e8830000 	lwi	r4, r3, 0
20030260:	30840001 	addik	r4, r4, 1
20030264:	f8830000 	swi	r4, r3, 0
}
20030268:	10330000 	addk	r1, r19, r0
2003026c:	ea610004 	lwi	r19, r1, 4
20030270:	ea810008 	lwi	r20, r1, 8
20030274:	3021000c 	addik	r1, r1, 12
20030278:	b60f0008 	rtsd	r15, 8
2003027c:	80000000 	or	r0, r0, r0

20030280 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20030280:	3021fff4 	addik	r1, r1, -12
20030284:	fa610004 	swi	r19, r1, 4
20030288:	fa810008 	swi	r20, r1, 8
2003028c:	12610000 	addk	r19, r1, r0
20030290:	96808000 	mfs	r20, rpc
20030294:	b000dffd 	imm	-8195
20030298:	329416cc 	addik	r20, r20, 5836
2003029c:	f8b30010 	swi	r5, r19, 16
200302a0:	f8d30014 	swi	r6, r19, 20
200302a4:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200302a8:	e8730010 	lwi	r3, r19, 16
200302ac:	e8630010 	lwi	r3, r3, 16
200302b0:	e8830000 	lwi	r4, r3, 0
200302b4:	e8730010 	lwi	r3, r19, 16
200302b8:	e8a3000c 	lwi	r5, r3, 12
200302bc:	e8730014 	lwi	r3, r19, 20
200302c0:	64630402 	bslli	r3, r3, 2
200302c4:	10651800 	addk	r3, r5, r3
200302c8:	e8630000 	lwi	r3, r3, 0
200302cc:	14a32000 	rsubk	r5, r3, r4
200302d0:	30600001 	addik	r3, r0, 1
200302d4:	e8930018 	lwi	r4, r19, 24
200302d8:	16442803 	cmpu	r18, r4, r5
200302dc:	bcb20008 	bgei	r18, 8		// 200302e4
200302e0:	10600000 	addk	r3, r0, r0
200302e4:	a46300ff 	andi	r3, r3, 255
}
200302e8:	10330000 	addk	r1, r19, r0
200302ec:	ea610004 	lwi	r19, r1, 4
200302f0:	ea810008 	lwi	r20, r1, 8
200302f4:	3021000c 	addik	r1, r1, 12
200302f8:	b60f0008 	rtsd	r15, 8
200302fc:	80000000 	or	r0, r0, r0

20030300 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20030300:	3021fff4 	addik	r1, r1, -12
20030304:	fa610004 	swi	r19, r1, 4
20030308:	fa810008 	swi	r20, r1, 8
2003030c:	12610000 	addk	r19, r1, r0
20030310:	96808000 	mfs	r20, rpc
20030314:	b000dffd 	imm	-8195
20030318:	3294164c 	addik	r20, r20, 5708
2003031c:	f8b30010 	swi	r5, r19, 16
20030320:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20030324:	e8730010 	lwi	r3, r19, 16
20030328:	e8630010 	lwi	r3, r3, 16
2003032c:	e8830000 	lwi	r4, r3, 0
20030330:	e8730010 	lwi	r3, r19, 16
20030334:	e8a3000c 	lwi	r5, r3, 12
20030338:	e8730014 	lwi	r3, r19, 20
2003033c:	64630402 	bslli	r3, r3, 2
20030340:	10651800 	addk	r3, r5, r3
20030344:	e8630000 	lwi	r3, r3, 0
20030348:	14632000 	rsubk	r3, r3, r4
}
2003034c:	10330000 	addk	r1, r19, r0
20030350:	ea610004 	lwi	r19, r1, 4
20030354:	ea810008 	lwi	r20, r1, 8
20030358:	3021000c 	addik	r1, r1, 12
2003035c:	b60f0008 	rtsd	r15, 8
20030360:	80000000 	or	r0, r0, r0

20030364 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20030364:	3021fff0 	addik	r1, r1, -16
20030368:	fa610008 	swi	r19, r1, 8
2003036c:	fa81000c 	swi	r20, r1, 12
20030370:	12610000 	addk	r19, r1, r0
20030374:	96808000 	mfs	r20, rpc
20030378:	b000dffd 	imm	-8195
2003037c:	329415e8 	addik	r20, r20, 5608
20030380:	f8b30014 	swi	r5, r19, 20
20030384:	f8d30018 	swi	r6, r19, 24
20030388:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003038c:	f8130004 	swi	r0, r19, 4
20030390:	b800005c 	bri	92		// 200303ec
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20030394:	e8730014 	lwi	r3, r19, 20
20030398:	e8830000 	lwi	r4, r3, 0
2003039c:	e8730014 	lwi	r3, r19, 20
200303a0:	e8a3000c 	lwi	r5, r3, 12
200303a4:	e8730004 	lwi	r3, r19, 4
200303a8:	64630402 	bslli	r3, r3, 2
200303ac:	10651800 	addk	r3, r5, r3
200303b0:	e8a30000 	lwi	r5, r3, 0
200303b4:	e8730014 	lwi	r3, r19, 20
200303b8:	e8630010 	lwi	r3, r3, 16
200303bc:	e8630000 	lwi	r3, r3, 0
200303c0:	14632800 	rsubk	r3, r3, r5
200303c4:	10641800 	addk	r3, r4, r3
200303c8:	30830001 	addik	r4, r3, 1
200303cc:	e873001c 	lwi	r3, r19, 28
200303d0:	16441803 	cmpu	r18, r4, r3
200303d4:	bc52000c 	blti	r18, 12		// 200303e0
            return 0;
200303d8:	10600000 	addk	r3, r0, r0
200303dc:	b8000024 	bri	36		// 20030400
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200303e0:	e8730004 	lwi	r3, r19, 4
200303e4:	30630001 	addik	r3, r3, 1
200303e8:	f8730004 	swi	r3, r19, 4
200303ec:	e8930004 	lwi	r4, r19, 4
200303f0:	e8730018 	lwi	r3, r19, 24
200303f4:	16432003 	cmpu	r18, r3, r4
200303f8:	bc52ff9c 	blti	r18, -100		// 20030394
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200303fc:	30600001 	addik	r3, r0, 1
}
20030400:	10330000 	addk	r1, r19, r0
20030404:	ea610008 	lwi	r19, r1, 8
20030408:	ea81000c 	lwi	r20, r1, 12
2003040c:	30210010 	addik	r1, r1, 16
20030410:	b60f0008 	rtsd	r15, 8
20030414:	80000000 	or	r0, r0, r0

20030418 <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20030418:	3021ffe8 	addik	r1, r1, -24
2003041c:	fa610010 	swi	r19, r1, 16
20030420:	fa810014 	swi	r20, r1, 20
20030424:	12610000 	addk	r19, r1, r0
20030428:	96808000 	mfs	r20, rpc
2003042c:	b000dffd 	imm	-8195
20030430:	32941534 	addik	r20, r20, 5428
20030434:	f8b3001c 	swi	r5, r19, 28
20030438:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003043c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20030440:	f8130004 	swi	r0, r19, 4
20030444:	b8000054 	bri	84		// 20030498
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20030448:	e873001c 	lwi	r3, r19, 28
2003044c:	e8630010 	lwi	r3, r3, 16
20030450:	e8830000 	lwi	r4, r3, 0
20030454:	e873001c 	lwi	r3, r19, 28
20030458:	e8a3000c 	lwi	r5, r3, 12
2003045c:	e8730004 	lwi	r3, r19, 4
20030460:	64630402 	bslli	r3, r3, 2
20030464:	10651800 	addk	r3, r5, r3
20030468:	e8630000 	lwi	r3, r3, 0
2003046c:	14632000 	rsubk	r3, r3, r4
20030470:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20030474:	e8930008 	lwi	r4, r19, 8
20030478:	e873000c 	lwi	r3, r19, 12
2003047c:	16441803 	cmpu	r18, r4, r3
20030480:	bcb20008 	bgei	r18, 8		// 20030488
20030484:	10640000 	addk	r3, r4, r0
20030488:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003048c:	e8730004 	lwi	r3, r19, 4
20030490:	30630001 	addik	r3, r3, 1
20030494:	f8730004 	swi	r3, r19, 4
20030498:	e8930004 	lwi	r4, r19, 4
2003049c:	e8730020 	lwi	r3, r19, 32
200304a0:	16432003 	cmpu	r18, r3, r4
200304a4:	bc52ffa4 	blti	r18, -92		// 20030448
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200304a8:	e873001c 	lwi	r3, r19, 28
200304ac:	e8830000 	lwi	r4, r3, 0
200304b0:	e8730008 	lwi	r3, r19, 8
200304b4:	14632000 	rsubk	r3, r3, r4
}
200304b8:	10330000 	addk	r1, r19, r0
200304bc:	ea610010 	lwi	r19, r1, 16
200304c0:	ea810014 	lwi	r20, r1, 20
200304c4:	30210018 	addik	r1, r1, 24
200304c8:	b60f0008 	rtsd	r15, 8
200304cc:	80000000 	or	r0, r0, r0

200304d0 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200304d0:	3021fff0 	addik	r1, r1, -16
200304d4:	fa610008 	swi	r19, r1, 8
200304d8:	fa81000c 	swi	r20, r1, 12
200304dc:	12610000 	addk	r19, r1, r0
200304e0:	96808000 	mfs	r20, rpc
200304e4:	b000dffd 	imm	-8195
200304e8:	3294147c 	addik	r20, r20, 5244
200304ec:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200304f0:	e8730014 	lwi	r3, r19, 20
200304f4:	e8630010 	lwi	r3, r3, 16
200304f8:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200304fc:	f8130004 	swi	r0, r19, 4
20030500:	b8000028 	bri	40		// 20030528
        fifo->read_inds[i] = 0;
20030504:	e8730014 	lwi	r3, r19, 20
20030508:	e883000c 	lwi	r4, r3, 12
2003050c:	e8730004 	lwi	r3, r19, 4
20030510:	64630402 	bslli	r3, r3, 2
20030514:	10641800 	addk	r3, r4, r3
20030518:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003051c:	e8730004 	lwi	r3, r19, 4
20030520:	30630001 	addik	r3, r3, 1
20030524:	f8730004 	swi	r3, r19, 4
20030528:	e8730014 	lwi	r3, r19, 20
2003052c:	e8830008 	lwi	r4, r3, 8
20030530:	e8730004 	lwi	r3, r19, 4
20030534:	16441803 	cmpu	r18, r4, r3
20030538:	bc52ffcc 	blti	r18, -52		// 20030504
        fifo->read_inds[i] = 0;
    }
}
2003053c:	10330000 	addk	r1, r19, r0
20030540:	ea610008 	lwi	r19, r1, 8
20030544:	ea81000c 	lwi	r20, r1, 12
20030548:	30210010 	addik	r1, r1, 16
2003054c:	b60f0008 	rtsd	r15, 8
20030550:	80000000 	or	r0, r0, r0

20030554 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20030554:	3021ffec 	addik	r1, r1, -20
20030558:	fa61000c 	swi	r19, r1, 12
2003055c:	fa810010 	swi	r20, r1, 16
20030560:	12610000 	addk	r19, r1, r0
20030564:	96808000 	mfs	r20, rpc
20030568:	b000dffd 	imm	-8195
2003056c:	329413f8 	addik	r20, r20, 5112
20030570:	f8b30018 	swi	r5, r19, 24
20030574:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20030578:	e8730018 	lwi	r3, r19, 24
2003057c:	e8830004 	lwi	r4, r3, 4
20030580:	e8730018 	lwi	r3, r19, 24
20030584:	e8a3000c 	lwi	r5, r3, 12
20030588:	e873001c 	lwi	r3, r19, 28
2003058c:	64630402 	bslli	r3, r3, 2
20030590:	10651800 	addk	r3, r5, r3
20030594:	e8a30000 	lwi	r5, r3, 0
20030598:	e8730018 	lwi	r3, r19, 24
2003059c:	e8630000 	lwi	r3, r3, 0
200305a0:	3063ffff 	addik	r3, r3, -1
200305a4:	84651800 	and	r3, r5, r3
200305a8:	64630403 	bslli	r3, r3, 3
200305ac:	10641800 	addk	r3, r4, r3
200305b0:	e8830000 	lwi	r4, r3, 0
200305b4:	e8a30004 	lwi	r5, r3, 4
200305b8:	f8930004 	swi	r4, r19, 4
200305bc:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
200305c0:	e8730018 	lwi	r3, r19, 24
200305c4:	e883000c 	lwi	r4, r3, 12
200305c8:	e873001c 	lwi	r3, r19, 28
200305cc:	64630402 	bslli	r3, r3, 2
200305d0:	10641800 	addk	r3, r4, r3
200305d4:	e8830000 	lwi	r4, r3, 0
200305d8:	30840001 	addik	r4, r4, 1
200305dc:	f8830000 	swi	r4, r3, 0
    return value;
200305e0:	e8930004 	lwi	r4, r19, 4
200305e4:	e8b30008 	lwi	r5, r19, 8
}
200305e8:	10640000 	addk	r3, r4, r0
200305ec:	10850000 	addk	r4, r5, r0
200305f0:	10330000 	addk	r1, r19, r0
200305f4:	ea61000c 	lwi	r19, r1, 12
200305f8:	ea810010 	lwi	r20, r1, 16
200305fc:	30210014 	addik	r1, r1, 20
20030600:	b60f0008 	rtsd	r15, 8
20030604:	80000000 	or	r0, r0, r0

20030608 <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20030608:	3021fff4 	addik	r1, r1, -12
2003060c:	fa610004 	swi	r19, r1, 4
20030610:	fa810008 	swi	r20, r1, 8
20030614:	12610000 	addk	r19, r1, r0
20030618:	96808000 	mfs	r20, rpc
2003061c:	b000dffd 	imm	-8195
20030620:	32941344 	addik	r20, r20, 4932
20030624:	f8b30010 	swi	r5, r19, 16
20030628:	f8d30014 	swi	r6, r19, 20
2003062c:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20030630:	e8730010 	lwi	r3, r19, 16
20030634:	e8830004 	lwi	r4, r3, 4
20030638:	e8730010 	lwi	r3, r19, 16
2003063c:	e8630010 	lwi	r3, r3, 16
20030640:	e8a30000 	lwi	r5, r3, 0
20030644:	e8730010 	lwi	r3, r19, 16
20030648:	e8630000 	lwi	r3, r3, 0
2003064c:	3063ffff 	addik	r3, r3, -1
20030650:	84651800 	and	r3, r5, r3
20030654:	64630403 	bslli	r3, r3, 3
20030658:	10641800 	addk	r3, r4, r3
2003065c:	e8930014 	lwi	r4, r19, 20
20030660:	e8b30018 	lwi	r5, r19, 24
20030664:	f8830000 	swi	r4, r3, 0
20030668:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2003066c:	e8730010 	lwi	r3, r19, 16
20030670:	e8630010 	lwi	r3, r3, 16
20030674:	e8830000 	lwi	r4, r3, 0
20030678:	30840001 	addik	r4, r4, 1
2003067c:	f8830000 	swi	r4, r3, 0
}
20030680:	10330000 	addk	r1, r19, r0
20030684:	ea610004 	lwi	r19, r1, 4
20030688:	ea810008 	lwi	r20, r1, 8
2003068c:	3021000c 	addik	r1, r1, 12
20030690:	b60f0008 	rtsd	r15, 8
20030694:	80000000 	or	r0, r0, r0

20030698 <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20030698:	3021fff4 	addik	r1, r1, -12
2003069c:	fa610004 	swi	r19, r1, 4
200306a0:	fa810008 	swi	r20, r1, 8
200306a4:	12610000 	addk	r19, r1, r0
200306a8:	96808000 	mfs	r20, rpc
200306ac:	b000dffd 	imm	-8195
200306b0:	329412b4 	addik	r20, r20, 4788
200306b4:	f8b30010 	swi	r5, r19, 16
200306b8:	f8d30014 	swi	r6, r19, 20
200306bc:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
200306c0:	e8730010 	lwi	r3, r19, 16
200306c4:	e8630010 	lwi	r3, r3, 16
200306c8:	e8830000 	lwi	r4, r3, 0
200306cc:	e8730010 	lwi	r3, r19, 16
200306d0:	e8a3000c 	lwi	r5, r3, 12
200306d4:	e8730014 	lwi	r3, r19, 20
200306d8:	64630402 	bslli	r3, r3, 2
200306dc:	10651800 	addk	r3, r5, r3
200306e0:	e8630000 	lwi	r3, r3, 0
200306e4:	14a32000 	rsubk	r5, r3, r4
200306e8:	30600001 	addik	r3, r0, 1
200306ec:	e8930018 	lwi	r4, r19, 24
200306f0:	16442803 	cmpu	r18, r4, r5
200306f4:	bcb20008 	bgei	r18, 8		// 200306fc
200306f8:	10600000 	addk	r3, r0, r0
200306fc:	a46300ff 	andi	r3, r3, 255
}
20030700:	10330000 	addk	r1, r19, r0
20030704:	ea610004 	lwi	r19, r1, 4
20030708:	ea810008 	lwi	r20, r1, 8
2003070c:	3021000c 	addik	r1, r1, 12
20030710:	b60f0008 	rtsd	r15, 8
20030714:	80000000 	or	r0, r0, r0

20030718 <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20030718:	3021fff4 	addik	r1, r1, -12
2003071c:	fa610004 	swi	r19, r1, 4
20030720:	fa810008 	swi	r20, r1, 8
20030724:	12610000 	addk	r19, r1, r0
20030728:	96808000 	mfs	r20, rpc
2003072c:	b000dffd 	imm	-8195
20030730:	32941234 	addik	r20, r20, 4660
20030734:	f8b30010 	swi	r5, r19, 16
20030738:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003073c:	e8730010 	lwi	r3, r19, 16
20030740:	e8630010 	lwi	r3, r3, 16
20030744:	e8830000 	lwi	r4, r3, 0
20030748:	e8730010 	lwi	r3, r19, 16
2003074c:	e8a3000c 	lwi	r5, r3, 12
20030750:	e8730014 	lwi	r3, r19, 20
20030754:	64630402 	bslli	r3, r3, 2
20030758:	10651800 	addk	r3, r5, r3
2003075c:	e8630000 	lwi	r3, r3, 0
20030760:	14632000 	rsubk	r3, r3, r4
}
20030764:	10330000 	addk	r1, r19, r0
20030768:	ea610004 	lwi	r19, r1, 4
2003076c:	ea810008 	lwi	r20, r1, 8
20030770:	3021000c 	addik	r1, r1, 12
20030774:	b60f0008 	rtsd	r15, 8
20030778:	80000000 	or	r0, r0, r0

2003077c <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003077c:	3021fff0 	addik	r1, r1, -16
20030780:	fa610008 	swi	r19, r1, 8
20030784:	fa81000c 	swi	r20, r1, 12
20030788:	12610000 	addk	r19, r1, r0
2003078c:	96808000 	mfs	r20, rpc
20030790:	b000dffd 	imm	-8195
20030794:	329411d0 	addik	r20, r20, 4560
20030798:	f8b30014 	swi	r5, r19, 20
2003079c:	f8d30018 	swi	r6, r19, 24
200307a0:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200307a4:	f8130004 	swi	r0, r19, 4
200307a8:	b800005c 	bri	92		// 20030804
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200307ac:	e8730014 	lwi	r3, r19, 20
200307b0:	e8830000 	lwi	r4, r3, 0
200307b4:	e8730014 	lwi	r3, r19, 20
200307b8:	e8a3000c 	lwi	r5, r3, 12
200307bc:	e8730004 	lwi	r3, r19, 4
200307c0:	64630402 	bslli	r3, r3, 2
200307c4:	10651800 	addk	r3, r5, r3
200307c8:	e8a30000 	lwi	r5, r3, 0
200307cc:	e8730014 	lwi	r3, r19, 20
200307d0:	e8630010 	lwi	r3, r3, 16
200307d4:	e8630000 	lwi	r3, r3, 0
200307d8:	14632800 	rsubk	r3, r3, r5
200307dc:	10641800 	addk	r3, r4, r3
200307e0:	30830001 	addik	r4, r3, 1
200307e4:	e873001c 	lwi	r3, r19, 28
200307e8:	16441803 	cmpu	r18, r4, r3
200307ec:	bc52000c 	blti	r18, 12		// 200307f8
            return 0;
200307f0:	10600000 	addk	r3, r0, r0
200307f4:	b8000024 	bri	36		// 20030818
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200307f8:	e8730004 	lwi	r3, r19, 4
200307fc:	30630001 	addik	r3, r3, 1
20030800:	f8730004 	swi	r3, r19, 4
20030804:	e8930004 	lwi	r4, r19, 4
20030808:	e8730018 	lwi	r3, r19, 24
2003080c:	16432003 	cmpu	r18, r3, r4
20030810:	bc52ff9c 	blti	r18, -100		// 200307ac
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20030814:	30600001 	addik	r3, r0, 1
}
20030818:	10330000 	addk	r1, r19, r0
2003081c:	ea610008 	lwi	r19, r1, 8
20030820:	ea81000c 	lwi	r20, r1, 12
20030824:	30210010 	addik	r1, r1, 16
20030828:	b60f0008 	rtsd	r15, 8
2003082c:	80000000 	or	r0, r0, r0

20030830 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20030830:	3021ffe8 	addik	r1, r1, -24
20030834:	fa610010 	swi	r19, r1, 16
20030838:	fa810014 	swi	r20, r1, 20
2003083c:	12610000 	addk	r19, r1, r0
20030840:	96808000 	mfs	r20, rpc
20030844:	b000dffd 	imm	-8195
20030848:	3294111c 	addik	r20, r20, 4380
2003084c:	f8b3001c 	swi	r5, r19, 28
20030850:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20030854:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20030858:	f8130004 	swi	r0, r19, 4
2003085c:	b8000054 	bri	84		// 200308b0
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20030860:	e873001c 	lwi	r3, r19, 28
20030864:	e8630010 	lwi	r3, r3, 16
20030868:	e8830000 	lwi	r4, r3, 0
2003086c:	e873001c 	lwi	r3, r19, 28
20030870:	e8a3000c 	lwi	r5, r3, 12
20030874:	e8730004 	lwi	r3, r19, 4
20030878:	64630402 	bslli	r3, r3, 2
2003087c:	10651800 	addk	r3, r5, r3
20030880:	e8630000 	lwi	r3, r3, 0
20030884:	14632000 	rsubk	r3, r3, r4
20030888:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003088c:	e8930008 	lwi	r4, r19, 8
20030890:	e873000c 	lwi	r3, r19, 12
20030894:	16441803 	cmpu	r18, r4, r3
20030898:	bcb20008 	bgei	r18, 8		// 200308a0
2003089c:	10640000 	addk	r3, r4, r0
200308a0:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200308a4:	e8730004 	lwi	r3, r19, 4
200308a8:	30630001 	addik	r3, r3, 1
200308ac:	f8730004 	swi	r3, r19, 4
200308b0:	e8930004 	lwi	r4, r19, 4
200308b4:	e8730020 	lwi	r3, r19, 32
200308b8:	16432003 	cmpu	r18, r3, r4
200308bc:	bc52ffa4 	blti	r18, -92		// 20030860
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
200308c0:	e873001c 	lwi	r3, r19, 28
200308c4:	e8830000 	lwi	r4, r3, 0
200308c8:	e8730008 	lwi	r3, r19, 8
200308cc:	14632000 	rsubk	r3, r3, r4
}
200308d0:	10330000 	addk	r1, r19, r0
200308d4:	ea610010 	lwi	r19, r1, 16
200308d8:	ea810014 	lwi	r20, r1, 20
200308dc:	30210018 	addik	r1, r1, 24
200308e0:	b60f0008 	rtsd	r15, 8
200308e4:	80000000 	or	r0, r0, r0

200308e8 <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200308e8:	3021fff0 	addik	r1, r1, -16
200308ec:	fa610008 	swi	r19, r1, 8
200308f0:	fa81000c 	swi	r20, r1, 12
200308f4:	12610000 	addk	r19, r1, r0
200308f8:	96808000 	mfs	r20, rpc
200308fc:	b000dffd 	imm	-8195
20030900:	32941064 	addik	r20, r20, 4196
20030904:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20030908:	e8730014 	lwi	r3, r19, 20
2003090c:	e8630010 	lwi	r3, r3, 16
20030910:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20030914:	f8130004 	swi	r0, r19, 4
20030918:	b8000028 	bri	40		// 20030940
        fifo->read_inds[i] = 0;
2003091c:	e8730014 	lwi	r3, r19, 20
20030920:	e883000c 	lwi	r4, r3, 12
20030924:	e8730004 	lwi	r3, r19, 4
20030928:	64630402 	bslli	r3, r3, 2
2003092c:	10641800 	addk	r3, r4, r3
20030930:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20030934:	e8730004 	lwi	r3, r19, 4
20030938:	30630001 	addik	r3, r3, 1
2003093c:	f8730004 	swi	r3, r19, 4
20030940:	e8730014 	lwi	r3, r19, 20
20030944:	e8830008 	lwi	r4, r3, 8
20030948:	e8730004 	lwi	r3, r19, 4
2003094c:	16441803 	cmpu	r18, r4, r3
20030950:	bc52ffcc 	blti	r18, -52		// 2003091c
        fifo->read_inds[i] = 0;
    }
}
20030954:	10330000 	addk	r1, r19, r0
20030958:	ea610008 	lwi	r19, r1, 8
2003095c:	ea81000c 	lwi	r20, r1, 12
20030960:	30210010 	addik	r1, r1, 16
20030964:	b60f0008 	rtsd	r15, 8
20030968:	80000000 	or	r0, r0, r0

2003096c <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003096c:	3021fff0 	addik	r1, r1, -16
20030970:	fa610008 	swi	r19, r1, 8
20030974:	fa81000c 	swi	r20, r1, 12
20030978:	12610000 	addk	r19, r1, r0
2003097c:	96808000 	mfs	r20, rpc
20030980:	b000dffd 	imm	-8195
20030984:	32940fe0 	addik	r20, r20, 4064
20030988:	f8b30014 	swi	r5, r19, 20
2003098c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20030990:	e8730014 	lwi	r3, r19, 20
20030994:	e8830004 	lwi	r4, r3, 4
20030998:	e8730014 	lwi	r3, r19, 20
2003099c:	e8a3000c 	lwi	r5, r3, 12
200309a0:	e8730018 	lwi	r3, r19, 24
200309a4:	64630402 	bslli	r3, r3, 2
200309a8:	10651800 	addk	r3, r5, r3
200309ac:	e8a30000 	lwi	r5, r3, 0
200309b0:	e8730014 	lwi	r3, r19, 20
200309b4:	e8630000 	lwi	r3, r3, 0
200309b8:	3063ffff 	addik	r3, r3, -1
200309bc:	84651800 	and	r3, r5, r3
200309c0:	64630402 	bslli	r3, r3, 2
200309c4:	10641800 	addk	r3, r4, r3
200309c8:	e8630000 	lwi	r3, r3, 0
200309cc:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
200309d0:	e8730014 	lwi	r3, r19, 20
200309d4:	e883000c 	lwi	r4, r3, 12
200309d8:	e8730018 	lwi	r3, r19, 24
200309dc:	64630402 	bslli	r3, r3, 2
200309e0:	10641800 	addk	r3, r4, r3
200309e4:	e8830000 	lwi	r4, r3, 0
200309e8:	30840001 	addik	r4, r4, 1
200309ec:	f8830000 	swi	r4, r3, 0
    return value;
200309f0:	e8730004 	lwi	r3, r19, 4
}
200309f4:	10330000 	addk	r1, r19, r0
200309f8:	ea610008 	lwi	r19, r1, 8
200309fc:	ea81000c 	lwi	r20, r1, 12
20030a00:	30210010 	addik	r1, r1, 16
20030a04:	b60f0008 	rtsd	r15, 8
20030a08:	80000000 	or	r0, r0, r0

20030a0c <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20030a0c:	3021fff4 	addik	r1, r1, -12
20030a10:	fa610004 	swi	r19, r1, 4
20030a14:	fa810008 	swi	r20, r1, 8
20030a18:	12610000 	addk	r19, r1, r0
20030a1c:	96808000 	mfs	r20, rpc
20030a20:	b000dffd 	imm	-8195
20030a24:	32940f40 	addik	r20, r20, 3904
20030a28:	f8b30010 	swi	r5, r19, 16
20030a2c:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20030a30:	e8730010 	lwi	r3, r19, 16
20030a34:	e8830004 	lwi	r4, r3, 4
20030a38:	e8730010 	lwi	r3, r19, 16
20030a3c:	e8630010 	lwi	r3, r3, 16
20030a40:	e8a30000 	lwi	r5, r3, 0
20030a44:	e8730010 	lwi	r3, r19, 16
20030a48:	e8630000 	lwi	r3, r3, 0
20030a4c:	3063ffff 	addik	r3, r3, -1
20030a50:	84651800 	and	r3, r5, r3
20030a54:	64630402 	bslli	r3, r3, 2
20030a58:	10641800 	addk	r3, r4, r3
20030a5c:	e8930014 	lwi	r4, r19, 20
20030a60:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20030a64:	e8730010 	lwi	r3, r19, 16
20030a68:	e8630010 	lwi	r3, r3, 16
20030a6c:	e8830000 	lwi	r4, r3, 0
20030a70:	30840001 	addik	r4, r4, 1
20030a74:	f8830000 	swi	r4, r3, 0
}
20030a78:	10330000 	addk	r1, r19, r0
20030a7c:	ea610004 	lwi	r19, r1, 4
20030a80:	ea810008 	lwi	r20, r1, 8
20030a84:	3021000c 	addik	r1, r1, 12
20030a88:	b60f0008 	rtsd	r15, 8
20030a8c:	80000000 	or	r0, r0, r0

20030a90 <read_BTYPE>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_BTYPE() {
20030a90:	3021ffdc 	addik	r1, r1, -36
20030a94:	f9e10000 	swi	r15, r1, 0
20030a98:	fa61001c 	swi	r19, r1, 28
20030a9c:	fa810020 	swi	r20, r1, 32
20030aa0:	12610000 	addk	r19, r1, r0
20030aa4:	96808000 	mfs	r20, rpc
20030aa8:	b000dffd 	imm	-8195
20030aac:	32940eb8 	addik	r20, r20, 3768
		index_BTYPE = decoder_texture_DCReconstruction_addressing_BTYPE->read_inds[2];
20030ab0:	b0000000 	imm	0
20030ab4:	e87408ec 	lwi	r3, r20, 2284
20030ab8:	e8630000 	lwi	r3, r3, 0
20030abc:	e863000c 	lwi	r3, r3, 12
20030ac0:	e8830008 	lwi	r4, r3, 8
20030ac4:	b0000000 	imm	0
20030ac8:	e87408fc 	lwi	r3, r20, 2300
20030acc:	f8830000 	swi	r4, r3, 0
		numTokens_BTYPE = index_BTYPE + fifo_i16_get_num_tokens(decoder_texture_DCReconstruction_addressing_BTYPE, 2);
20030ad0:	b0000000 	imm	0
20030ad4:	e87408ec 	lwi	r3, r20, 2284
20030ad8:	e8630000 	lwi	r3, r3, 0
20030adc:	10a30000 	addk	r5, r3, r0
20030ae0:	30c00002 	addik	r6, r0, 2
20030ae4:	b0000000 	imm	0
20030ae8:	e89408e4 	lwi	r4, r20, 2276
20030aec:	99fc2000 	brald	r15, r4
20030af0:	80000000 	or	r0, r0, r0
20030af4:	10830000 	addk	r4, r3, r0
20030af8:	b0000000 	imm	0
20030afc:	e87408fc 	lwi	r3, r20, 2300
20030b00:	e8630000 	lwi	r3, r3, 0
20030b04:	10841800 	addk	r4, r4, r3
20030b08:	b0000000 	imm	0
20030b0c:	e8740900 	lwi	r3, r20, 2304
20030b10:	f8830000 	swi	r4, r3, 0
	}
20030b14:	e9e10000 	lwi	r15, r1, 0
20030b18:	10330000 	addk	r1, r19, r0
20030b1c:	ea61001c 	lwi	r19, r1, 28
20030b20:	ea810020 	lwi	r20, r1, 32
20030b24:	30210024 	addik	r1, r1, 36
20030b28:	b60f0008 	rtsd	r15, 8
20030b2c:	80000000 	or	r0, r0, r0

20030b30 <read_end_BTYPE>:
	
	static void read_end_BTYPE() {
20030b30:	3021fff4 	addik	r1, r1, -12
20030b34:	fa610004 	swi	r19, r1, 4
20030b38:	fa810008 	swi	r20, r1, 8
20030b3c:	12610000 	addk	r19, r1, r0
20030b40:	96808000 	mfs	r20, rpc
20030b44:	b000dffd 	imm	-8195
20030b48:	32940e1c 	addik	r20, r20, 3612
		decoder_texture_DCReconstruction_addressing_BTYPE->read_inds[2] = index_BTYPE;
20030b4c:	b0000000 	imm	0
20030b50:	e87408ec 	lwi	r3, r20, 2284
20030b54:	e8630000 	lwi	r3, r3, 0
20030b58:	e863000c 	lwi	r3, r3, 12
20030b5c:	30630008 	addik	r3, r3, 8
20030b60:	b0000000 	imm	0
20030b64:	e89408fc 	lwi	r4, r20, 2300
20030b68:	e8840000 	lwi	r4, r4, 0
20030b6c:	f8830000 	swi	r4, r3, 0
	}
20030b70:	10330000 	addk	r1, r19, r0
20030b74:	ea610004 	lwi	r19, r1, 4
20030b78:	ea810008 	lwi	r20, r1, 8
20030b7c:	3021000c 	addik	r1, r1, 12
20030b80:	b60f0008 	rtsd	r15, 8
20030b84:	80000000 	or	r0, r0, r0

20030b88 <write_A>:

	static void write_A() {
20030b88:	3021ffdc 	addik	r1, r1, -36
20030b8c:	f9e10000 	swi	r15, r1, 0
20030b90:	fa61001c 	swi	r19, r1, 28
20030b94:	fa810020 	swi	r20, r1, 32
20030b98:	12610000 	addk	r19, r1, r0
20030b9c:	96808000 	mfs	r20, rpc
20030ba0:	b000dffd 	imm	-8195
20030ba4:	32940dc0 	addik	r20, r20, 3520
		index_A = (*decoder_texture_DCReconstruction_addressing_A->write_ind);
20030ba8:	b0000000 	imm	0
20030bac:	e87408f4 	lwi	r3, r20, 2292
20030bb0:	e8630000 	lwi	r3, r3, 0
20030bb4:	e8630010 	lwi	r3, r3, 16
20030bb8:	e8830000 	lwi	r4, r3, 0
20030bbc:	b0000000 	imm	0
20030bc0:	e8740904 	lwi	r3, r20, 2308
20030bc4:	f8830000 	swi	r4, r3, 0
		numFree_A = index_A + fifo_i16_get_room(decoder_texture_DCReconstruction_addressing_A, NUM_READERS_A);
20030bc8:	b0000000 	imm	0
20030bcc:	e87408f4 	lwi	r3, r20, 2292
20030bd0:	e8630000 	lwi	r3, r3, 0
20030bd4:	10a30000 	addk	r5, r3, r0
20030bd8:	30c00001 	addik	r6, r0, 1
20030bdc:	b0000000 	imm	0
20030be0:	e89408e8 	lwi	r4, r20, 2280
20030be4:	99fc2000 	brald	r15, r4
20030be8:	80000000 	or	r0, r0, r0
20030bec:	10830000 	addk	r4, r3, r0
20030bf0:	b0000000 	imm	0
20030bf4:	e8740904 	lwi	r3, r20, 2308
20030bf8:	e8630000 	lwi	r3, r3, 0
20030bfc:	10841800 	addk	r4, r4, r3
20030c00:	b0000000 	imm	0
20030c04:	e8740908 	lwi	r3, r20, 2312
20030c08:	f8830000 	swi	r4, r3, 0
	}
20030c0c:	e9e10000 	lwi	r15, r1, 0
20030c10:	10330000 	addk	r1, r19, r0
20030c14:	ea61001c 	lwi	r19, r1, 28
20030c18:	ea810020 	lwi	r20, r1, 32
20030c1c:	30210024 	addik	r1, r1, 36
20030c20:	b60f0008 	rtsd	r15, 8
20030c24:	80000000 	or	r0, r0, r0

20030c28 <write_end_A>:
	
	static void write_end_A() {
20030c28:	3021fff4 	addik	r1, r1, -12
20030c2c:	fa610004 	swi	r19, r1, 4
20030c30:	fa810008 	swi	r20, r1, 8
20030c34:	12610000 	addk	r19, r1, r0
20030c38:	96808000 	mfs	r20, rpc
20030c3c:	b000dffd 	imm	-8195
20030c40:	32940d24 	addik	r20, r20, 3364
		(*decoder_texture_DCReconstruction_addressing_A->write_ind) = index_A;
20030c44:	b0000000 	imm	0
20030c48:	e87408f4 	lwi	r3, r20, 2292
20030c4c:	e8630000 	lwi	r3, r3, 0
20030c50:	e8630010 	lwi	r3, r3, 16
20030c54:	b0000000 	imm	0
20030c58:	e8940904 	lwi	r4, r20, 2308
20030c5c:	e8840000 	lwi	r4, r4, 0
20030c60:	f8830000 	swi	r4, r3, 0
	}
20030c64:	10330000 	addk	r1, r19, r0
20030c68:	ea610004 	lwi	r19, r1, 4
20030c6c:	ea810008 	lwi	r20, r1, 8
20030c70:	3021000c 	addik	r1, r1, 12
20030c74:	b60f0008 	rtsd	r15, 8
20030c78:	80000000 	or	r0, r0, r0

20030c7c <write_B>:
	static void write_B() {
20030c7c:	3021ffdc 	addik	r1, r1, -36
20030c80:	f9e10000 	swi	r15, r1, 0
20030c84:	fa61001c 	swi	r19, r1, 28
20030c88:	fa810020 	swi	r20, r1, 32
20030c8c:	12610000 	addk	r19, r1, r0
20030c90:	96808000 	mfs	r20, rpc
20030c94:	b000dffd 	imm	-8195
20030c98:	32940ccc 	addik	r20, r20, 3276
		index_B = (*decoder_texture_DCReconstruction_addressing_B->write_ind);
20030c9c:	b0000000 	imm	0
20030ca0:	e87408f0 	lwi	r3, r20, 2288
20030ca4:	e8630000 	lwi	r3, r3, 0
20030ca8:	e8630010 	lwi	r3, r3, 16
20030cac:	e8830000 	lwi	r4, r3, 0
20030cb0:	b0000000 	imm	0
20030cb4:	e874090c 	lwi	r3, r20, 2316
20030cb8:	f8830000 	swi	r4, r3, 0
		numFree_B = index_B + fifo_i16_get_room(decoder_texture_DCReconstruction_addressing_B, NUM_READERS_B);
20030cbc:	b0000000 	imm	0
20030cc0:	e87408f0 	lwi	r3, r20, 2288
20030cc4:	e8630000 	lwi	r3, r3, 0
20030cc8:	10a30000 	addk	r5, r3, r0
20030ccc:	30c00001 	addik	r6, r0, 1
20030cd0:	b0000000 	imm	0
20030cd4:	e89408e8 	lwi	r4, r20, 2280
20030cd8:	99fc2000 	brald	r15, r4
20030cdc:	80000000 	or	r0, r0, r0
20030ce0:	10830000 	addk	r4, r3, r0
20030ce4:	b0000000 	imm	0
20030ce8:	e874090c 	lwi	r3, r20, 2316
20030cec:	e8630000 	lwi	r3, r3, 0
20030cf0:	10841800 	addk	r4, r4, r3
20030cf4:	b0000000 	imm	0
20030cf8:	e8740910 	lwi	r3, r20, 2320
20030cfc:	f8830000 	swi	r4, r3, 0
	}
20030d00:	e9e10000 	lwi	r15, r1, 0
20030d04:	10330000 	addk	r1, r19, r0
20030d08:	ea61001c 	lwi	r19, r1, 28
20030d0c:	ea810020 	lwi	r20, r1, 32
20030d10:	30210024 	addik	r1, r1, 36
20030d14:	b60f0008 	rtsd	r15, 8
20030d18:	80000000 	or	r0, r0, r0

20030d1c <write_end_B>:
	
	static void write_end_B() {
20030d1c:	3021fff4 	addik	r1, r1, -12
20030d20:	fa610004 	swi	r19, r1, 4
20030d24:	fa810008 	swi	r20, r1, 8
20030d28:	12610000 	addk	r19, r1, r0
20030d2c:	96808000 	mfs	r20, rpc
20030d30:	b000dffd 	imm	-8195
20030d34:	32940c30 	addik	r20, r20, 3120
		(*decoder_texture_DCReconstruction_addressing_B->write_ind) = index_B;
20030d38:	b0000000 	imm	0
20030d3c:	e87408f0 	lwi	r3, r20, 2288
20030d40:	e8630000 	lwi	r3, r3, 0
20030d44:	e8630010 	lwi	r3, r3, 16
20030d48:	b0000000 	imm	0
20030d4c:	e894090c 	lwi	r4, r20, 2316
20030d50:	e8840000 	lwi	r4, r4, 0
20030d54:	f8830000 	swi	r4, r3, 0
	}
20030d58:	10330000 	addk	r1, r19, r0
20030d5c:	ea610004 	lwi	r19, r1, 4
20030d60:	ea810008 	lwi	r20, r1, 8
20030d64:	3021000c 	addik	r1, r1, 12
20030d68:	b60f0008 	rtsd	r15, 8
20030d6c:	80000000 	or	r0, r0, r0

20030d70 <write_C>:
	static void write_C() {
20030d70:	3021ffdc 	addik	r1, r1, -36
20030d74:	f9e10000 	swi	r15, r1, 0
20030d78:	fa61001c 	swi	r19, r1, 28
20030d7c:	fa810020 	swi	r20, r1, 32
20030d80:	12610000 	addk	r19, r1, r0
20030d84:	96808000 	mfs	r20, rpc
20030d88:	b000dffd 	imm	-8195
20030d8c:	32940bd8 	addik	r20, r20, 3032
		index_C = (*decoder_texture_DCReconstruction_addressing_C->write_ind);
20030d90:	b0000000 	imm	0
20030d94:	e87408f8 	lwi	r3, r20, 2296
20030d98:	e8630000 	lwi	r3, r3, 0
20030d9c:	e8630010 	lwi	r3, r3, 16
20030da0:	e8830000 	lwi	r4, r3, 0
20030da4:	b0000000 	imm	0
20030da8:	e8740914 	lwi	r3, r20, 2324
20030dac:	f8830000 	swi	r4, r3, 0
		numFree_C = index_C + fifo_i16_get_room(decoder_texture_DCReconstruction_addressing_C, NUM_READERS_C);
20030db0:	b0000000 	imm	0
20030db4:	e87408f8 	lwi	r3, r20, 2296
20030db8:	e8630000 	lwi	r3, r3, 0
20030dbc:	10a30000 	addk	r5, r3, r0
20030dc0:	30c00001 	addik	r6, r0, 1
20030dc4:	b0000000 	imm	0
20030dc8:	e89408e8 	lwi	r4, r20, 2280
20030dcc:	99fc2000 	brald	r15, r4
20030dd0:	80000000 	or	r0, r0, r0
20030dd4:	10830000 	addk	r4, r3, r0
20030dd8:	b0000000 	imm	0
20030ddc:	e8740914 	lwi	r3, r20, 2324
20030de0:	e8630000 	lwi	r3, r3, 0
20030de4:	10841800 	addk	r4, r4, r3
20030de8:	b0000000 	imm	0
20030dec:	e8740918 	lwi	r3, r20, 2328
20030df0:	f8830000 	swi	r4, r3, 0
	}
20030df4:	e9e10000 	lwi	r15, r1, 0
20030df8:	10330000 	addk	r1, r19, r0
20030dfc:	ea61001c 	lwi	r19, r1, 28
20030e00:	ea810020 	lwi	r20, r1, 32
20030e04:	30210024 	addik	r1, r1, 36
20030e08:	b60f0008 	rtsd	r15, 8
20030e0c:	80000000 	or	r0, r0, r0

20030e10 <write_end_C>:
	
	static void write_end_C() {
20030e10:	3021fff4 	addik	r1, r1, -12
20030e14:	fa610004 	swi	r19, r1, 4
20030e18:	fa810008 	swi	r20, r1, 8
20030e1c:	12610000 	addk	r19, r1, r0
20030e20:	96808000 	mfs	r20, rpc
20030e24:	b000dffd 	imm	-8195
20030e28:	32940b3c 	addik	r20, r20, 2876
		(*decoder_texture_DCReconstruction_addressing_C->write_ind) = index_C;
20030e2c:	b0000000 	imm	0
20030e30:	e87408f8 	lwi	r3, r20, 2296
20030e34:	e8630000 	lwi	r3, r3, 0
20030e38:	e8630010 	lwi	r3, r3, 16
20030e3c:	b0000000 	imm	0
20030e40:	e8940914 	lwi	r4, r20, 2324
20030e44:	e8840000 	lwi	r4, r4, 0
20030e48:	f8830000 	swi	r4, r3, 0
	}
20030e4c:	10330000 	addk	r1, r19, r0
20030e50:	ea610004 	lwi	r19, r1, 4
20030e54:	ea810008 	lwi	r20, r1, 8
20030e58:	3021000c 	addik	r1, r1, 12
20030e5c:	b60f0008 	rtsd	r15, 8
20030e60:	80000000 	or	r0, r0, r0

20030e64 <decrement>:
	////////////////////////////////////////////////////////////////////////////////
	// Functions/procedures
	static i8 decrement(i8 p);
	static i16 access(i8 p, i8 c);

	static i8 decrement(i8 p) {
20030e64:	3021ffec 	addik	r1, r1, -20
20030e68:	fa61000c 	swi	r19, r1, 12
20030e6c:	fa810010 	swi	r20, r1, 16
20030e70:	12610000 	addk	r19, r1, r0
20030e74:	96808000 	mfs	r20, rpc
20030e78:	b000dffd 	imm	-8195
20030e7c:	32940ae8 	addik	r20, r20, 2792
20030e80:	10650000 	addk	r3, r5, r0
20030e84:	f0730018 	sbi	r3, r19, 24
		i32 tmp_if;
		i32 local_BUF_SIZE;
	
		if (p == 1) {
20030e88:	e0730018 	lbui	r3, r19, 24
20030e8c:	90630060 	sext8	r3, r3
20030e90:	a8630001 	xori	r3, r3, 1
20030e94:	bc23001c 	bnei	r3, 28		// 20030eb0
			local_BUF_SIZE = BUF_SIZE;
20030e98:	3060000e 	addik	r3, r0, 14
20030e9c:	f8730008 	swi	r3, r19, 8
			tmp_if = local_BUF_SIZE - 1;
20030ea0:	e8730008 	lwi	r3, r19, 8
20030ea4:	3063ffff 	addik	r3, r3, -1
20030ea8:	f8730004 	swi	r3, r19, 4
20030eac:	b8000014 	bri	20		// 20030ec0
		} else {
			tmp_if = p - 1;
20030eb0:	e0730018 	lbui	r3, r19, 24
20030eb4:	90630060 	sext8	r3, r3
20030eb8:	3063ffff 	addik	r3, r3, -1
20030ebc:	f8730004 	swi	r3, r19, 4
		}
		return tmp_if;
20030ec0:	e8730004 	lwi	r3, r19, 4
20030ec4:	90630060 	sext8	r3, r3
	}
20030ec8:	10330000 	addk	r1, r19, r0
20030ecc:	ea61000c 	lwi	r19, r1, 12
20030ed0:	ea810010 	lwi	r20, r1, 16
20030ed4:	30210014 	addik	r1, r1, 20
20030ed8:	b60f0008 	rtsd	r15, 8
20030edc:	80000000 	or	r0, r0, r0

20030ee0 <access>:
	static i16 access(i8 p, i8 c) {
20030ee0:	3021fff4 	addik	r1, r1, -12
20030ee4:	fa610004 	swi	r19, r1, 4
20030ee8:	fa810008 	swi	r20, r1, 8
20030eec:	12610000 	addk	r19, r1, r0
20030ef0:	96808000 	mfs	r20, rpc
20030ef4:	b000dffd 	imm	-8195
20030ef8:	32940a6c 	addik	r20, r20, 2668
20030efc:	10850000 	addk	r4, r5, r0
20030f00:	10660000 	addk	r3, r6, r0
20030f04:	f0930010 	sbi	r4, r19, 16
20030f08:	f0730014 	sbi	r3, r19, 20
	
		return p << 3 | c;
20030f0c:	e0730010 	lbui	r3, r19, 16
20030f10:	90630060 	sext8	r3, r3
20030f14:	64630403 	bslli	r3, r3, 3
20030f18:	90830061 	sext16	r4, r3
20030f1c:	e0730014 	lbui	r3, r19, 20
20030f20:	90630060 	sext8	r3, r3
20030f24:	90630061 	sext16	r3, r3
20030f28:	80641800 	or	r3, r4, r3
20030f2c:	90630061 	sext16	r3, r3
	}
20030f30:	10330000 	addk	r1, r19, r0
20030f34:	ea610004 	lwi	r19, r1, 4
20030f38:	ea810008 	lwi	r20, r1, 8
20030f3c:	3021000c 	addik	r1, r1, 12
20030f40:	b60f0008 	rtsd	r15, 8
20030f44:	80000000 	or	r0, r0, r0

20030f48 <isSchedulable_start>:

	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_start() {
20030f48:	3021ffe8 	addik	r1, r1, -24
20030f4c:	fa610010 	swi	r19, r1, 16
20030f50:	fa810014 	swi	r20, r1, 20
20030f54:	12610000 	addk	r19, r1, r0
20030f58:	96808000 	mfs	r20, rpc
20030f5c:	b000dffd 	imm	-8195
20030f60:	32940a04 	addik	r20, r20, 2564
		i32 result;
		i16 cmd;
		i32 local_NEWVOP;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20030f64:	b0000000 	imm	0
20030f68:	e87408ec 	lwi	r3, r20, 2284
20030f6c:	e8630000 	lwi	r3, r3, 0
20030f70:	e8830004 	lwi	r4, r3, 4
20030f74:	b0000000 	imm	0
20030f78:	e87408fc 	lwi	r3, r20, 2300
20030f7c:	e8630000 	lwi	r3, r3, 0
20030f80:	a46301ff 	andi	r3, r3, 511
20030f84:	10631800 	addk	r3, r3, r3
20030f88:	10641800 	addk	r3, r4, r3
20030f8c:	e4630000 	lhui	r3, r3, 0
20030f90:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
20030f94:	30600800 	addik	r3, r0, 2048	// 800 <decoder_parser_mvrecon_A>
20030f98:	f8730008 	swi	r3, r19, 8
		result = (cmd & local_NEWVOP) != 0;
20030f9c:	e4730004 	lhui	r3, r19, 4
20030fa0:	90830061 	sext16	r4, r3
20030fa4:	e8730008 	lwi	r3, r19, 8
20030fa8:	84841800 	and	r4, r4, r3
20030fac:	10600000 	addk	r3, r0, r0
20030fb0:	8c641c00 	pcmpne	r3, r4, r3
20030fb4:	a46300ff 	andi	r3, r3, 255
20030fb8:	f873000c 	swi	r3, r19, 12
		return result;
20030fbc:	e873000c 	lwi	r3, r19, 12
	}
20030fc0:	10330000 	addk	r1, r19, r0
20030fc4:	ea610010 	lwi	r19, r1, 16
20030fc8:	ea810014 	lwi	r20, r1, 20
20030fcc:	30210018 	addik	r1, r1, 24
20030fd0:	b60f0008 	rtsd	r15, 8
20030fd4:	80000000 	or	r0, r0, r0

20030fd8 <start>:
	
	static void start() {
20030fd8:	3021ffd4 	addik	r1, r1, -44
20030fdc:	f9e10000 	swi	r15, r1, 0
20030fe0:	fa610024 	swi	r19, r1, 36
20030fe4:	fa810028 	swi	r20, r1, 40
20030fe8:	12610000 	addk	r19, r1, r0
20030fec:	96808000 	mfs	r20, rpc
20030ff0:	b000dffd 	imm	-8195
20030ff4:	32940970 	addik	r20, r20, 2416
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20030ff8:	b0000000 	imm	0
20030ffc:	e87408fc 	lwi	r3, r20, 2300
20031000:	e8630000 	lwi	r3, r3, 0
20031004:	a46301ff 	andi	r3, r3, 511
20031008:	f873001c 	swi	r3, r19, 28
	
		i16 cmd;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
2003100c:	b0000000 	imm	0
20031010:	e87408ec 	lwi	r3, r20, 2284
20031014:	e8630000 	lwi	r3, r3, 0
20031018:	e8830004 	lwi	r4, r3, 4
2003101c:	b0000000 	imm	0
20031020:	e87408fc 	lwi	r3, r20, 2300
20031024:	e8630000 	lwi	r3, r3, 0
20031028:	a46301ff 	andi	r3, r3, 511
2003102c:	10631800 	addk	r3, r3, r3
20031030:	10641800 	addk	r3, r4, r3
20031034:	e4630000 	lhui	r3, r3, 0
20031038:	f4730020 	shi	r3, r19, 32
		mbx = 0;
2003103c:	b0000000 	imm	0
20031040:	e874091c 	lwi	r3, r20, 2332
20031044:	f0030000 	sbi	r0, r3, 0
		top_edge = 1;
20031048:	b0000000 	imm	0
2003104c:	e8740920 	lwi	r3, r20, 2336
20031050:	30800001 	addik	r4, r0, 1
20031054:	f8830000 	swi	r4, r3, 0
		left_edge = 1;
20031058:	b0000000 	imm	0
2003105c:	e8740924 	lwi	r3, r20, 2340
20031060:	30800001 	addik	r4, r0, 1
20031064:	f8830000 	swi	r4, r3, 0
		comp = 0;
20031068:	b0000000 	imm	0
2003106c:	e8740928 	lwi	r3, r20, 2344
20031070:	f0030000 	sbi	r0, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
20031074:	b0000000 	imm	0
20031078:	e87408fc 	lwi	r3, r20, 2300
2003107c:	e8630000 	lwi	r3, r3, 0
20031080:	30830001 	addik	r4, r3, 1
20031084:	b0000000 	imm	0
20031088:	e87408fc 	lwi	r3, r20, 2300
2003108c:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
20031090:	b0000000 	imm	0
20031094:	e8740950 	lwi	r3, r20, 2384
20031098:	99fc1800 	brald	r15, r3
2003109c:	80000000 	or	r0, r0, r0
	}
200310a0:	e9e10000 	lwi	r15, r1, 0
200310a4:	10330000 	addk	r1, r19, r0
200310a8:	ea610024 	lwi	r19, r1, 36
200310ac:	ea810028 	lwi	r20, r1, 40
200310b0:	3021002c 	addik	r1, r1, 44
200310b4:	b60f0008 	rtsd	r15, 8
200310b8:	80000000 	or	r0, r0, r0

200310bc <isSchedulable_getw>:
	static i32 isSchedulable_getw() {
200310bc:	3021fff0 	addik	r1, r1, -16
200310c0:	fa610008 	swi	r19, r1, 8
200310c4:	fa81000c 	swi	r20, r1, 12
200310c8:	12610000 	addk	r19, r1, r0
200310cc:	96808000 	mfs	r20, rpc
200310d0:	b000dffd 	imm	-8195
200310d4:	32940890 	addik	r20, r20, 2192
		i32 result;
	
		result = 1;
200310d8:	30600001 	addik	r3, r0, 1
200310dc:	f8730004 	swi	r3, r19, 4
		return result;
200310e0:	e8730004 	lwi	r3, r19, 4
	}
200310e4:	10330000 	addk	r1, r19, r0
200310e8:	ea610008 	lwi	r19, r1, 8
200310ec:	ea81000c 	lwi	r20, r1, 12
200310f0:	30210010 	addik	r1, r1, 16
200310f4:	b60f0008 	rtsd	r15, 8
200310f8:	80000000 	or	r0, r0, r0

200310fc <getw_replaced>:
	
	static void getw_replaced() {
200310fc:	3021ffd4 	addik	r1, r1, -44
20031100:	f9e10000 	swi	r15, r1, 0
20031104:	fa610024 	swi	r19, r1, 36
20031108:	fa810028 	swi	r20, r1, 40
2003110c:	12610000 	addk	r19, r1, r0
20031110:	96808000 	mfs	r20, rpc
20031114:	b000dffd 	imm	-8195
20031118:	3294084c 	addik	r20, r20, 2124
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2003111c:	b0000000 	imm	0
20031120:	e87408fc 	lwi	r3, r20, 2300
20031124:	e8630000 	lwi	r3, r3, 0
20031128:	a46301ff 	andi	r3, r3, 511
2003112c:	f873001c 	swi	r3, r19, 28
	
		i16 w;
	
		w = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20031130:	b0000000 	imm	0
20031134:	e87408ec 	lwi	r3, r20, 2284
20031138:	e8630000 	lwi	r3, r3, 0
2003113c:	e8830004 	lwi	r4, r3, 4
20031140:	b0000000 	imm	0
20031144:	e87408fc 	lwi	r3, r20, 2300
20031148:	e8630000 	lwi	r3, r3, 0
2003114c:	a46301ff 	andi	r3, r3, 511
20031150:	10631800 	addk	r3, r3, r3
20031154:	10641800 	addk	r3, r4, r3
20031158:	e4630000 	lhui	r3, r3, 0
2003115c:	f4730020 	shi	r3, r19, 32
		mbwidth = w;
20031160:	e4730020 	lhui	r3, r19, 32
20031164:	90830060 	sext8	r4, r3
20031168:	b0000000 	imm	0
2003116c:	e874092c 	lwi	r3, r20, 2348
20031170:	f0830000 	sbi	r4, r3, 0
		ptr = 1;
20031174:	b0000000 	imm	0
20031178:	e8740934 	lwi	r3, r20, 2356
2003117c:	30800001 	addik	r4, r0, 1
20031180:	f0830000 	sbi	r4, r3, 0
		ptr_left = 2;
20031184:	b0000000 	imm	0
20031188:	e8740938 	lwi	r3, r20, 2360
2003118c:	30800002 	addik	r4, r0, 2
20031190:	f0830000 	sbi	r4, r3, 0
		ptr_above = 1 + w;
20031194:	e4730020 	lhui	r3, r19, 32
20031198:	a46300ff 	andi	r3, r3, 255
2003119c:	30630001 	addik	r3, r3, 1
200311a0:	a46300ff 	andi	r3, r3, 255
200311a4:	90830060 	sext8	r4, r3
200311a8:	b0000000 	imm	0
200311ac:	e874093c 	lwi	r3, r20, 2364
200311b0:	f0830000 	sbi	r4, r3, 0
		ptr_above_left = 2 + w;
200311b4:	e4730020 	lhui	r3, r19, 32
200311b8:	a46300ff 	andi	r3, r3, 255
200311bc:	30630002 	addik	r3, r3, 2
200311c0:	a46300ff 	andi	r3, r3, 255
200311c4:	90830060 	sext8	r4, r3
200311c8:	b0000000 	imm	0
200311cc:	e8740940 	lwi	r3, r20, 2368
200311d0:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
200311d4:	b0000000 	imm	0
200311d8:	e87408fc 	lwi	r3, r20, 2300
200311dc:	e8630000 	lwi	r3, r3, 0
200311e0:	30830001 	addik	r4, r3, 1
200311e4:	b0000000 	imm	0
200311e8:	e87408fc 	lwi	r3, r20, 2300
200311ec:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
200311f0:	b0000000 	imm	0
200311f4:	e8740950 	lwi	r3, r20, 2384
200311f8:	99fc1800 	brald	r15, r3
200311fc:	80000000 	or	r0, r0, r0
	}
20031200:	e9e10000 	lwi	r15, r1, 0
20031204:	10330000 	addk	r1, r19, r0
20031208:	ea610024 	lwi	r19, r1, 36
2003120c:	ea810028 	lwi	r20, r1, 40
20031210:	3021002c 	addik	r1, r1, 44
20031214:	b60f0008 	rtsd	r15, 8
20031218:	80000000 	or	r0, r0, r0

2003121c <isSchedulable_geth>:
	static i32 isSchedulable_geth() {
2003121c:	3021fff0 	addik	r1, r1, -16
20031220:	fa610008 	swi	r19, r1, 8
20031224:	fa81000c 	swi	r20, r1, 12
20031228:	12610000 	addk	r19, r1, r0
2003122c:	96808000 	mfs	r20, rpc
20031230:	b000dffd 	imm	-8195
20031234:	32940730 	addik	r20, r20, 1840
		i32 result;
	
		result = 1;
20031238:	30600001 	addik	r3, r0, 1
2003123c:	f8730004 	swi	r3, r19, 4
		return result;
20031240:	e8730004 	lwi	r3, r19, 4
	}
20031244:	10330000 	addk	r1, r19, r0
20031248:	ea610008 	lwi	r19, r1, 8
2003124c:	ea81000c 	lwi	r20, r1, 12
20031250:	30210010 	addik	r1, r1, 16
20031254:	b60f0008 	rtsd	r15, 8
20031258:	80000000 	or	r0, r0, r0

2003125c <geth>:
	
	static void geth() {
2003125c:	3021ffd4 	addik	r1, r1, -44
20031260:	f9e10000 	swi	r15, r1, 0
20031264:	fa610024 	swi	r19, r1, 36
20031268:	fa810028 	swi	r20, r1, 40
2003126c:	12610000 	addk	r19, r1, r0
20031270:	96808000 	mfs	r20, rpc
20031274:	b000dffd 	imm	-8195
20031278:	329406ec 	addik	r20, r20, 1772
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
2003127c:	b0000000 	imm	0
20031280:	e87408fc 	lwi	r3, r20, 2300
20031284:	e8630000 	lwi	r3, r3, 0
20031288:	a46301ff 	andi	r3, r3, 511
2003128c:	f873001c 	swi	r3, r19, 28
	
		i16 h;
	
		h = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20031290:	b0000000 	imm	0
20031294:	e87408ec 	lwi	r3, r20, 2284
20031298:	e8630000 	lwi	r3, r3, 0
2003129c:	e8830004 	lwi	r4, r3, 4
200312a0:	b0000000 	imm	0
200312a4:	e87408fc 	lwi	r3, r20, 2300
200312a8:	e8630000 	lwi	r3, r3, 0
200312ac:	a46301ff 	andi	r3, r3, 511
200312b0:	10631800 	addk	r3, r3, r3
200312b4:	10641800 	addk	r3, r4, r3
200312b8:	e4630000 	lhui	r3, r3, 0
200312bc:	f4730020 	shi	r3, r19, 32
	
		// Update ports indexes
		index_BTYPE += 1;
200312c0:	b0000000 	imm	0
200312c4:	e87408fc 	lwi	r3, r20, 2300
200312c8:	e8630000 	lwi	r3, r3, 0
200312cc:	30830001 	addik	r4, r3, 1
200312d0:	b0000000 	imm	0
200312d4:	e87408fc 	lwi	r3, r20, 2300
200312d8:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
200312dc:	b0000000 	imm	0
200312e0:	e8740950 	lwi	r3, r20, 2384
200312e4:	99fc1800 	brald	r15, r3
200312e8:	80000000 	or	r0, r0, r0
	}
200312ec:	e9e10000 	lwi	r15, r1, 0
200312f0:	10330000 	addk	r1, r19, r0
200312f4:	ea610024 	lwi	r19, r1, 36
200312f8:	ea810028 	lwi	r20, r1, 40
200312fc:	3021002c 	addik	r1, r1, 44
20031300:	b60f0008 	rtsd	r15, 8
20031304:	80000000 	or	r0, r0, r0

20031308 <isSchedulable_read_intra>:
	static i32 isSchedulable_read_intra() {
20031308:	3021ffe8 	addik	r1, r1, -24
2003130c:	fa610010 	swi	r19, r1, 16
20031310:	fa810014 	swi	r20, r1, 20
20031314:	12610000 	addk	r19, r1, r0
20031318:	96808000 	mfs	r20, rpc
2003131c:	b000dffd 	imm	-8195
20031320:	32940644 	addik	r20, r20, 1604
		i32 result;
		i16 btype;
		i32 local_INTRA;
	
		btype = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20031324:	b0000000 	imm	0
20031328:	e87408ec 	lwi	r3, r20, 2284
2003132c:	e8630000 	lwi	r3, r3, 0
20031330:	e8830004 	lwi	r4, r3, 4
20031334:	b0000000 	imm	0
20031338:	e87408fc 	lwi	r3, r20, 2300
2003133c:	e8630000 	lwi	r3, r3, 0
20031340:	a46301ff 	andi	r3, r3, 511
20031344:	10631800 	addk	r3, r3, r3
20031348:	10641800 	addk	r3, r4, r3
2003134c:	e4630000 	lhui	r3, r3, 0
20031350:	f4730004 	shi	r3, r19, 4
		local_INTRA = ConstantsBtype_INTRA;
20031354:	30600400 	addik	r3, r0, 1024	// 400 <_HEAP_SIZE>
20031358:	f8730008 	swi	r3, r19, 8
		result = (btype & local_INTRA) != 0;
2003135c:	e4730004 	lhui	r3, r19, 4
20031360:	90830061 	sext16	r4, r3
20031364:	e8730008 	lwi	r3, r19, 8
20031368:	84841800 	and	r4, r4, r3
2003136c:	10600000 	addk	r3, r0, r0
20031370:	8c641c00 	pcmpne	r3, r4, r3
20031374:	a46300ff 	andi	r3, r3, 255
20031378:	f873000c 	swi	r3, r19, 12
		return result;
2003137c:	e873000c 	lwi	r3, r19, 12
	}
20031380:	10330000 	addk	r1, r19, r0
20031384:	ea610010 	lwi	r19, r1, 16
20031388:	ea810014 	lwi	r20, r1, 20
2003138c:	30210018 	addik	r1, r1, 24
20031390:	b60f0008 	rtsd	r15, 8
20031394:	80000000 	or	r0, r0, r0

20031398 <read_intra>:
	
	static void read_intra() {
20031398:	3021ffd0 	addik	r1, r1, -48
2003139c:	f9e10000 	swi	r15, r1, 0
200313a0:	fa610028 	swi	r19, r1, 40
200313a4:	fa81002c 	swi	r20, r1, 44
200313a8:	12610000 	addk	r19, r1, r0
200313ac:	96808000 	mfs	r20, rpc
200313b0:	b000dffd 	imm	-8195
200313b4:	329405b0 	addik	r20, r20, 1456
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
200313b8:	b0000000 	imm	0
200313bc:	e87408fc 	lwi	r3, r20, 2300
200313c0:	e8630000 	lwi	r3, r3, 0
200313c4:	a46301ff 	andi	r3, r3, 511
200313c8:	f873001c 	swi	r3, r19, 28
		i16 btype;
		i8 local_ptr;
		i8 local_comp;
		i16 tmp_access;
	
		btype = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
200313cc:	b0000000 	imm	0
200313d0:	e87408ec 	lwi	r3, r20, 2284
200313d4:	e8630000 	lwi	r3, r3, 0
200313d8:	e8830004 	lwi	r4, r3, 4
200313dc:	b0000000 	imm	0
200313e0:	e87408fc 	lwi	r3, r20, 2300
200313e4:	e8630000 	lwi	r3, r3, 0
200313e8:	a46301ff 	andi	r3, r3, 511
200313ec:	10631800 	addk	r3, r3, r3
200313f0:	10641800 	addk	r3, r4, r3
200313f4:	e4630000 	lhui	r3, r3, 0
200313f8:	f4730020 	shi	r3, r19, 32
		local_ptr = ptr;
200313fc:	b0000000 	imm	0
20031400:	e8740934 	lwi	r3, r20, 2356
20031404:	e0630000 	lbui	r3, r3, 0
20031408:	f0730022 	sbi	r3, r19, 34
		local_comp = comp;
2003140c:	b0000000 	imm	0
20031410:	e8740928 	lwi	r3, r20, 2344
20031414:	e0630000 	lbui	r3, r3, 0
20031418:	f0730023 	sbi	r3, r19, 35
		tmp_access = access(local_ptr, local_comp);
2003141c:	e0730022 	lbui	r3, r19, 34
20031420:	90830060 	sext8	r4, r3
20031424:	e0730023 	lbui	r3, r19, 35
20031428:	90630060 	sext8	r3, r3
2003142c:	10a40000 	addk	r5, r4, r0
20031430:	10c30000 	addk	r6, r3, r0
20031434:	b0000000 	imm	0
20031438:	e8940970 	lwi	r4, r20, 2416
2003143c:	99fc2000 	brald	r15, r4
20031440:	80000000 	or	r0, r0, r0
20031444:	f4730024 	shi	r3, r19, 36
		coded[tmp_access] = 1;
20031448:	e4730024 	lhui	r3, r19, 36
2003144c:	90630061 	sext16	r3, r3
20031450:	b0000000 	imm	0
20031454:	e8940930 	lwi	r4, r20, 2352
20031458:	64630402 	bslli	r3, r3, 2
2003145c:	10641800 	addk	r3, r4, r3
20031460:	30800001 	addik	r4, r0, 1
20031464:	f8830000 	swi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
20031468:	b0000000 	imm	0
2003146c:	e87408fc 	lwi	r3, r20, 2300
20031470:	e8630000 	lwi	r3, r3, 0
20031474:	30830001 	addik	r4, r3, 1
20031478:	b0000000 	imm	0
2003147c:	e87408fc 	lwi	r3, r20, 2300
20031480:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
20031484:	b0000000 	imm	0
20031488:	e8740950 	lwi	r3, r20, 2384
2003148c:	99fc1800 	brald	r15, r3
20031490:	80000000 	or	r0, r0, r0
	}
20031494:	e9e10000 	lwi	r15, r1, 0
20031498:	10330000 	addk	r1, r19, r0
2003149c:	ea610028 	lwi	r19, r1, 40
200314a0:	ea81002c 	lwi	r20, r1, 44
200314a4:	30210030 	addik	r1, r1, 48
200314a8:	b60f0008 	rtsd	r15, 8
200314ac:	80000000 	or	r0, r0, r0

200314b0 <isSchedulable_read_other>:
	static i32 isSchedulable_read_other() {
200314b0:	3021fff0 	addik	r1, r1, -16
200314b4:	fa610008 	swi	r19, r1, 8
200314b8:	fa81000c 	swi	r20, r1, 12
200314bc:	12610000 	addk	r19, r1, r0
200314c0:	96808000 	mfs	r20, rpc
200314c4:	b000dffd 	imm	-8195
200314c8:	3294049c 	addik	r20, r20, 1180
		i32 result;
	
		result = 1;
200314cc:	30600001 	addik	r3, r0, 1
200314d0:	f8730004 	swi	r3, r19, 4
		return result;
200314d4:	e8730004 	lwi	r3, r19, 4
	}
200314d8:	10330000 	addk	r1, r19, r0
200314dc:	ea610008 	lwi	r19, r1, 8
200314e0:	ea81000c 	lwi	r20, r1, 12
200314e4:	30210010 	addik	r1, r1, 16
200314e8:	b60f0008 	rtsd	r15, 8
200314ec:	80000000 	or	r0, r0, r0

200314f0 <read_other>:
	
	static void read_other() {
200314f0:	3021ffd0 	addik	r1, r1, -48
200314f4:	f9e10000 	swi	r15, r1, 0
200314f8:	fa610028 	swi	r19, r1, 40
200314fc:	fa81002c 	swi	r20, r1, 44
20031500:	12610000 	addk	r19, r1, r0
20031504:	96808000 	mfs	r20, rpc
20031508:	b000dffd 	imm	-8195
2003150c:	32940458 	addik	r20, r20, 1112
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20031510:	b0000000 	imm	0
20031514:	e87408fc 	lwi	r3, r20, 2300
20031518:	e8630000 	lwi	r3, r3, 0
2003151c:	a46301ff 	andi	r3, r3, 511
20031520:	f873001c 	swi	r3, r19, 28
		i16 btype;
		i8 local_ptr;
		i8 local_comp;
		i16 tmp_access;
	
		btype = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20031524:	b0000000 	imm	0
20031528:	e87408ec 	lwi	r3, r20, 2284
2003152c:	e8630000 	lwi	r3, r3, 0
20031530:	e8830004 	lwi	r4, r3, 4
20031534:	b0000000 	imm	0
20031538:	e87408fc 	lwi	r3, r20, 2300
2003153c:	e8630000 	lwi	r3, r3, 0
20031540:	a46301ff 	andi	r3, r3, 511
20031544:	10631800 	addk	r3, r3, r3
20031548:	10641800 	addk	r3, r4, r3
2003154c:	e4630000 	lhui	r3, r3, 0
20031550:	f4730020 	shi	r3, r19, 32
		local_ptr = ptr;
20031554:	b0000000 	imm	0
20031558:	e8740934 	lwi	r3, r20, 2356
2003155c:	e0630000 	lbui	r3, r3, 0
20031560:	f0730022 	sbi	r3, r19, 34
		local_comp = comp;
20031564:	b0000000 	imm	0
20031568:	e8740928 	lwi	r3, r20, 2344
2003156c:	e0630000 	lbui	r3, r3, 0
20031570:	f0730023 	sbi	r3, r19, 35
		tmp_access = access(local_ptr, local_comp);
20031574:	e0730022 	lbui	r3, r19, 34
20031578:	90830060 	sext8	r4, r3
2003157c:	e0730023 	lbui	r3, r19, 35
20031580:	90630060 	sext8	r3, r3
20031584:	10a40000 	addk	r5, r4, r0
20031588:	10c30000 	addk	r6, r3, r0
2003158c:	b0000000 	imm	0
20031590:	e8940970 	lwi	r4, r20, 2416
20031594:	99fc2000 	brald	r15, r4
20031598:	80000000 	or	r0, r0, r0
2003159c:	f4730024 	shi	r3, r19, 36
		coded[tmp_access] = 0;
200315a0:	e4730024 	lhui	r3, r19, 36
200315a4:	90630061 	sext16	r3, r3
200315a8:	b0000000 	imm	0
200315ac:	e8940930 	lwi	r4, r20, 2352
200315b0:	64630402 	bslli	r3, r3, 2
200315b4:	10641800 	addk	r3, r4, r3
200315b8:	f8030000 	swi	r0, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
200315bc:	b0000000 	imm	0
200315c0:	e87408fc 	lwi	r3, r20, 2300
200315c4:	e8630000 	lwi	r3, r3, 0
200315c8:	30830001 	addik	r4, r3, 1
200315cc:	b0000000 	imm	0
200315d0:	e87408fc 	lwi	r3, r20, 2300
200315d4:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
200315d8:	b0000000 	imm	0
200315dc:	e8740950 	lwi	r3, r20, 2384
200315e0:	99fc1800 	brald	r15, r3
200315e4:	80000000 	or	r0, r0, r0
	}
200315e8:	e9e10000 	lwi	r15, r1, 0
200315ec:	10330000 	addk	r1, r19, r0
200315f0:	ea610028 	lwi	r19, r1, 40
200315f4:	ea81002c 	lwi	r20, r1, 44
200315f8:	30210030 	addik	r1, r1, 48
200315fc:	b60f0008 	rtsd	r15, 8
20031600:	80000000 	or	r0, r0, r0

20031604 <isSchedulable_advance>:
	static i32 isSchedulable_advance() {
20031604:	3021fff0 	addik	r1, r1, -16
20031608:	fa610008 	swi	r19, r1, 8
2003160c:	fa81000c 	swi	r20, r1, 12
20031610:	12610000 	addk	r19, r1, r0
20031614:	96808000 	mfs	r20, rpc
20031618:	b000dffd 	imm	-8195
2003161c:	32940348 	addik	r20, r20, 840
		i32 result;
	
		result = 1;
20031620:	30600001 	addik	r3, r0, 1
20031624:	f8730004 	swi	r3, r19, 4
		return result;
20031628:	e8730004 	lwi	r3, r19, 4
	}
2003162c:	10330000 	addk	r1, r19, r0
20031630:	ea610008 	lwi	r19, r1, 8
20031634:	ea81000c 	lwi	r20, r1, 12
20031638:	30210010 	addik	r1, r1, 16
2003163c:	b60f0008 	rtsd	r15, 8
20031640:	80000000 	or	r0, r0, r0

20031644 <advance>:
	
	static void advance() {
20031644:	3021ffd0 	addik	r1, r1, -48
20031648:	f9e10000 	swi	r15, r1, 0
2003164c:	fa610028 	swi	r19, r1, 40
20031650:	fa81002c 	swi	r20, r1, 44
20031654:	12610000 	addk	r19, r1, r0
20031658:	96808000 	mfs	r20, rpc
2003165c:	b000dffd 	imm	-8195
20031660:	32940304 	addik	r20, r20, 772
		i8 local_ptr_above;
		i8 tmp_decrement1;
		i8 local_ptr_above_left;
		i8 tmp_decrement2;
	
		local_comp = comp;
20031664:	b0000000 	imm	0
20031668:	e8740928 	lwi	r3, r20, 2344
2003166c:	e0630000 	lbui	r3, r3, 0
20031670:	f073001c 	sbi	r3, r19, 28
		comp = local_comp + 1;
20031674:	e073001c 	lbui	r3, r19, 28
20031678:	30630001 	addik	r3, r3, 1
2003167c:	a46300ff 	andi	r3, r3, 255
20031680:	90830060 	sext8	r4, r3
20031684:	b0000000 	imm	0
20031688:	e8740928 	lwi	r3, r20, 2344
2003168c:	f0830000 	sbi	r4, r3, 0
		local_comp = comp;
20031690:	b0000000 	imm	0
20031694:	e8740928 	lwi	r3, r20, 2344
20031698:	e0630000 	lbui	r3, r3, 0
2003169c:	f073001c 	sbi	r3, r19, 28
		if (local_comp == 6) {
200316a0:	e073001c 	lbui	r3, r19, 28
200316a4:	90630060 	sext8	r3, r3
200316a8:	a8630006 	xori	r3, r3, 6
200316ac:	bc2301a8 	bnei	r3, 424		// 20031854
			comp = 0;
200316b0:	b0000000 	imm	0
200316b4:	e8740928 	lwi	r3, r20, 2344
200316b8:	f0030000 	sbi	r0, r3, 0
			local_mbx = mbx;
200316bc:	b0000000 	imm	0
200316c0:	e874091c 	lwi	r3, r20, 2332
200316c4:	e0630000 	lbui	r3, r3, 0
200316c8:	f073001d 	sbi	r3, r19, 29
			mbx = local_mbx + 1;
200316cc:	e073001d 	lbui	r3, r19, 29
200316d0:	30630001 	addik	r3, r3, 1
200316d4:	a46300ff 	andi	r3, r3, 255
200316d8:	90830060 	sext8	r4, r3
200316dc:	b0000000 	imm	0
200316e0:	e874091c 	lwi	r3, r20, 2332
200316e4:	f0830000 	sbi	r4, r3, 0
			left_edge = 0;
200316e8:	b0000000 	imm	0
200316ec:	e8740924 	lwi	r3, r20, 2340
200316f0:	f8030000 	swi	r0, r3, 0
			local_mbx = mbx;
200316f4:	b0000000 	imm	0
200316f8:	e874091c 	lwi	r3, r20, 2332
200316fc:	e0630000 	lbui	r3, r3, 0
20031700:	f073001d 	sbi	r3, r19, 29
			local_mbwidth = mbwidth;
20031704:	b0000000 	imm	0
20031708:	e874092c 	lwi	r3, r20, 2348
2003170c:	e0630000 	lbui	r3, r3, 0
20031710:	f073001e 	sbi	r3, r19, 30
			if (local_mbx == local_mbwidth) {
20031714:	e073001d 	lbui	r3, r19, 29
20031718:	90830060 	sext8	r4, r3
2003171c:	e073001e 	lbui	r3, r19, 30
20031720:	90630060 	sext8	r3, r3
20031724:	88641800 	xor	r3, r4, r3
20031728:	bc23002c 	bnei	r3, 44		// 20031754
				mbx = 0;
2003172c:	b0000000 	imm	0
20031730:	e874091c 	lwi	r3, r20, 2332
20031734:	f0030000 	sbi	r0, r3, 0
				top_edge = 0;
20031738:	b0000000 	imm	0
2003173c:	e8740920 	lwi	r3, r20, 2336
20031740:	f8030000 	swi	r0, r3, 0
				left_edge = 1;
20031744:	b0000000 	imm	0
20031748:	e8740924 	lwi	r3, r20, 2340
2003174c:	30800001 	addik	r4, r0, 1
20031750:	f8830000 	swi	r4, r3, 0
			}
			local_ptr = ptr;
20031754:	b0000000 	imm	0
20031758:	e8740934 	lwi	r3, r20, 2356
2003175c:	e0630000 	lbui	r3, r3, 0
20031760:	f073001f 	sbi	r3, r19, 31
			tmp_decrement = decrement(local_ptr);
20031764:	e073001f 	lbui	r3, r19, 31
20031768:	90630060 	sext8	r3, r3
2003176c:	10a30000 	addk	r5, r3, r0
20031770:	b0000000 	imm	0
20031774:	e894096c 	lwi	r4, r20, 2412
20031778:	99fc2000 	brald	r15, r4
2003177c:	80000000 	or	r0, r0, r0
20031780:	f0730020 	sbi	r3, r19, 32
			ptr = tmp_decrement;
20031784:	b0000000 	imm	0
20031788:	e8740934 	lwi	r3, r20, 2356
2003178c:	e0930020 	lbui	r4, r19, 32
20031790:	f0830000 	sbi	r4, r3, 0
			local_ptr_left = ptr_left;
20031794:	b0000000 	imm	0
20031798:	e8740938 	lwi	r3, r20, 2360
2003179c:	e0630000 	lbui	r3, r3, 0
200317a0:	f0730021 	sbi	r3, r19, 33
			tmp_decrement0 = decrement(local_ptr_left);
200317a4:	e0730021 	lbui	r3, r19, 33
200317a8:	90630060 	sext8	r3, r3
200317ac:	10a30000 	addk	r5, r3, r0
200317b0:	b0000000 	imm	0
200317b4:	e894096c 	lwi	r4, r20, 2412
200317b8:	99fc2000 	brald	r15, r4
200317bc:	80000000 	or	r0, r0, r0
200317c0:	f0730022 	sbi	r3, r19, 34
			ptr_left = tmp_decrement0;
200317c4:	b0000000 	imm	0
200317c8:	e8740938 	lwi	r3, r20, 2360
200317cc:	e0930022 	lbui	r4, r19, 34
200317d0:	f0830000 	sbi	r4, r3, 0
			local_ptr_above = ptr_above;
200317d4:	b0000000 	imm	0
200317d8:	e874093c 	lwi	r3, r20, 2364
200317dc:	e0630000 	lbui	r3, r3, 0
200317e0:	f0730023 	sbi	r3, r19, 35
			tmp_decrement1 = decrement(local_ptr_above);
200317e4:	e0730023 	lbui	r3, r19, 35
200317e8:	90630060 	sext8	r3, r3
200317ec:	10a30000 	addk	r5, r3, r0
200317f0:	b0000000 	imm	0
200317f4:	e894096c 	lwi	r4, r20, 2412
200317f8:	99fc2000 	brald	r15, r4
200317fc:	80000000 	or	r0, r0, r0
20031800:	f0730024 	sbi	r3, r19, 36
			ptr_above = tmp_decrement1;
20031804:	b0000000 	imm	0
20031808:	e874093c 	lwi	r3, r20, 2364
2003180c:	e0930024 	lbui	r4, r19, 36
20031810:	f0830000 	sbi	r4, r3, 0
			local_ptr_above_left = ptr_above_left;
20031814:	b0000000 	imm	0
20031818:	e8740940 	lwi	r3, r20, 2368
2003181c:	e0630000 	lbui	r3, r3, 0
20031820:	f0730025 	sbi	r3, r19, 37
			tmp_decrement2 = decrement(local_ptr_above_left);
20031824:	e0730025 	lbui	r3, r19, 37
20031828:	90630060 	sext8	r3, r3
2003182c:	10a30000 	addk	r5, r3, r0
20031830:	b0000000 	imm	0
20031834:	e894096c 	lwi	r4, r20, 2412
20031838:	99fc2000 	brald	r15, r4
2003183c:	80000000 	or	r0, r0, r0
20031840:	f0730026 	sbi	r3, r19, 38
			ptr_above_left = tmp_decrement2;
20031844:	b0000000 	imm	0
20031848:	e8740940 	lwi	r3, r20, 2368
2003184c:	e0930026 	lbui	r4, r19, 38
20031850:	f0830000 	sbi	r4, r3, 0
		}
	
		// Update ports indexes
		
	}
20031854:	e9e10000 	lwi	r15, r1, 0
20031858:	10330000 	addk	r1, r19, r0
2003185c:	ea610028 	lwi	r19, r1, 40
20031860:	ea81002c 	lwi	r20, r1, 44
20031864:	30210030 	addik	r1, r1, 48
20031868:	b60f0008 	rtsd	r15, 8
2003186c:	80000000 	or	r0, r0, r0

20031870 <isSchedulable_predict>:
	static i32 isSchedulable_predict() {
20031870:	3021fff0 	addik	r1, r1, -16
20031874:	fa610008 	swi	r19, r1, 8
20031878:	fa81000c 	swi	r20, r1, 12
2003187c:	12610000 	addk	r19, r1, r0
20031880:	96808000 	mfs	r20, rpc
20031884:	b000dffd 	imm	-8195
20031888:	329400dc 	addik	r20, r20, 220
		i32 result;
	
		result = 1;
2003188c:	30600001 	addik	r3, r0, 1
20031890:	f8730004 	swi	r3, r19, 4
		return result;
20031894:	e8730004 	lwi	r3, r19, 4
	}
20031898:	10330000 	addk	r1, r19, r0
2003189c:	ea610008 	lwi	r19, r1, 8
200318a0:	ea81000c 	lwi	r20, r1, 12
200318a4:	30210010 	addik	r1, r1, 16
200318a8:	b60f0008 	rtsd	r15, 8
200318ac:	80000000 	or	r0, r0, r0

200318b0 <predict>:
	
	static void predict() {
200318b0:	3021ff70 	addik	r1, r1, -144
200318b4:	f9e10000 	swi	r15, r1, 0
200318b8:	fa610088 	swi	r19, r1, 136
200318bc:	fa81008c 	swi	r20, r1, 140
200318c0:	12610000 	addk	r19, r1, r0
200318c4:	96808000 	mfs	r20, rpc
200318c8:	b000dffd 	imm	-8195
200318cc:	32940098 	addik	r20, r20, 152
	
		// Compute aligned port indexes
		i32 index_aligned_A = index_A % SIZE_A;
200318d0:	b0000000 	imm	0
200318d4:	e8740904 	lwi	r3, r20, 2308
200318d8:	e8630000 	lwi	r3, r3, 0
200318dc:	a46301ff 	andi	r3, r3, 511
200318e0:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_B = index_B % SIZE_B;
200318e4:	b0000000 	imm	0
200318e8:	e874090c 	lwi	r3, r20, 2316
200318ec:	e8630000 	lwi	r3, r3, 0
200318f0:	a46301ff 	andi	r3, r3, 511
200318f4:	f8730028 	swi	r3, r19, 40
		i32 index_aligned_C = index_C % SIZE_C;
200318f8:	b0000000 	imm	0
200318fc:	e8740914 	lwi	r3, r20, 2324
20031900:	e8630000 	lwi	r3, r3, 0
20031904:	a46301ff 	andi	r3, r3, 511
20031908:	f873002c 	swi	r3, r19, 44
		i32 tmp_coded10;
		i32 tmp_coded11;
		i32 tmp_coded12;
		i32 tmp_coded13;
	
		local_comp = comp;
2003190c:	b0000000 	imm	0
20031910:	e8740928 	lwi	r3, r20, 2344
20031914:	e0630000 	lbui	r3, r3, 0
20031918:	f0730030 	sbi	r3, r19, 48
		if (local_comp == 0) {
2003191c:	e0730030 	lbui	r3, r19, 48
20031920:	90630060 	sext8	r3, r3
20031924:	bc230178 	bnei	r3, 376		// 20031a9c
			a = 0;
20031928:	f413001c 	shi	r0, r19, 28
			b = 0;
2003192c:	f413001e 	shi	r0, r19, 30
			c = 0;
20031930:	f4130020 	shi	r0, r19, 32
			local_left_edge = left_edge;
20031934:	b0000000 	imm	0
20031938:	e8740924 	lwi	r3, r20, 2340
2003193c:	e8630000 	lwi	r3, r3, 0
20031940:	f8730034 	swi	r3, r19, 52
			if (!local_left_edge) {
20031944:	e8730034 	lwi	r3, r19, 52
20031948:	bc2300dc 	bnei	r3, 220		// 20031a24
				local_ptr_left = ptr_left;
2003194c:	b0000000 	imm	0
20031950:	e8740938 	lwi	r3, r20, 2360
20031954:	e0630000 	lbui	r3, r3, 0
20031958:	f0730038 	sbi	r3, r19, 56
				a = access(local_ptr_left, 1);
2003195c:	e0730038 	lbui	r3, r19, 56
20031960:	90630060 	sext8	r3, r3
20031964:	10a30000 	addk	r5, r3, r0
20031968:	30c00001 	addik	r6, r0, 1
2003196c:	b0000000 	imm	0
20031970:	e8940970 	lwi	r4, r20, 2416
20031974:	99fc2000 	brald	r15, r4
20031978:	80000000 	or	r0, r0, r0
2003197c:	f473001c 	shi	r3, r19, 28
				tmp_coded = coded[a];
20031980:	e473001c 	lhui	r3, r19, 28
20031984:	90630061 	sext16	r3, r3
20031988:	b0000000 	imm	0
2003198c:	e8940930 	lwi	r4, r20, 2352
20031990:	64630402 	bslli	r3, r3, 2
20031994:	10641800 	addk	r3, r4, r3
20031998:	e8630000 	lwi	r3, r3, 0
2003199c:	f873003c 	swi	r3, r19, 60
				if (!tmp_coded) {
200319a0:	e873003c 	lwi	r3, r19, 60
200319a4:	bc230008 	bnei	r3, 8		// 200319ac
					a = 0;
200319a8:	f413001c 	shi	r0, r19, 28
				}
				local_top_edge = top_edge;
200319ac:	b0000000 	imm	0
200319b0:	e8740920 	lwi	r3, r20, 2336
200319b4:	e8630000 	lwi	r3, r3, 0
200319b8:	f8730040 	swi	r3, r19, 64
				if (!local_top_edge) {
200319bc:	e8730040 	lwi	r3, r19, 64
200319c0:	bc230064 	bnei	r3, 100		// 20031a24
					local_ptr_above_left = ptr_above_left;
200319c4:	b0000000 	imm	0
200319c8:	e8740940 	lwi	r3, r20, 2368
200319cc:	e0630000 	lbui	r3, r3, 0
200319d0:	f0730044 	sbi	r3, r19, 68
					b = access(local_ptr_above_left, 3);
200319d4:	e0730044 	lbui	r3, r19, 68
200319d8:	90630060 	sext8	r3, r3
200319dc:	10a30000 	addk	r5, r3, r0
200319e0:	30c00003 	addik	r6, r0, 3
200319e4:	b0000000 	imm	0
200319e8:	e8940970 	lwi	r4, r20, 2416
200319ec:	99fc2000 	brald	r15, r4
200319f0:	80000000 	or	r0, r0, r0
200319f4:	f473001e 	shi	r3, r19, 30
					tmp_coded0 = coded[b];
200319f8:	e473001e 	lhui	r3, r19, 30
200319fc:	90630061 	sext16	r3, r3
20031a00:	b0000000 	imm	0
20031a04:	e8940930 	lwi	r4, r20, 2352
20031a08:	64630402 	bslli	r3, r3, 2
20031a0c:	10641800 	addk	r3, r4, r3
20031a10:	e8630000 	lwi	r3, r3, 0
20031a14:	f8730048 	swi	r3, r19, 72
					if (!tmp_coded0) {
20031a18:	e8730048 	lwi	r3, r19, 72
20031a1c:	bc230008 	bnei	r3, 8		// 20031a24
						b = 0;
20031a20:	f413001e 	shi	r0, r19, 30
					}
				}
			}
			local_top_edge = top_edge;
20031a24:	b0000000 	imm	0
20031a28:	e8740920 	lwi	r3, r20, 2336
20031a2c:	e8630000 	lwi	r3, r3, 0
20031a30:	f8730040 	swi	r3, r19, 64
			if (!local_top_edge) {
20031a34:	e8730040 	lwi	r3, r19, 64
20031a38:	bc230064 	bnei	r3, 100		// 20031a9c
				local_ptr_above = ptr_above;
20031a3c:	b0000000 	imm	0
20031a40:	e874093c 	lwi	r3, r20, 2364
20031a44:	e0630000 	lbui	r3, r3, 0
20031a48:	f073004c 	sbi	r3, r19, 76
				c = access(local_ptr_above, 2);
20031a4c:	e073004c 	lbui	r3, r19, 76
20031a50:	90630060 	sext8	r3, r3
20031a54:	10a30000 	addk	r5, r3, r0
20031a58:	30c00002 	addik	r6, r0, 2
20031a5c:	b0000000 	imm	0
20031a60:	e8940970 	lwi	r4, r20, 2416
20031a64:	99fc2000 	brald	r15, r4
20031a68:	80000000 	or	r0, r0, r0
20031a6c:	f4730020 	shi	r3, r19, 32
				tmp_coded1 = coded[c];
20031a70:	e4730020 	lhui	r3, r19, 32
20031a74:	90630061 	sext16	r3, r3
20031a78:	b0000000 	imm	0
20031a7c:	e8940930 	lwi	r4, r20, 2352
20031a80:	64630402 	bslli	r3, r3, 2
20031a84:	10641800 	addk	r3, r4, r3
20031a88:	e8630000 	lwi	r3, r3, 0
20031a8c:	f8730050 	swi	r3, r19, 80
				if (!tmp_coded1) {
20031a90:	e8730050 	lwi	r3, r19, 80
20031a94:	bc230008 	bnei	r3, 8		// 20031a9c
					c = 0;
20031a98:	f4130020 	shi	r0, r19, 32
				}
			}
		}
		local_comp = comp;
20031a9c:	b0000000 	imm	0
20031aa0:	e8740928 	lwi	r3, r20, 2344
20031aa4:	e0630000 	lbui	r3, r3, 0
20031aa8:	f0730030 	sbi	r3, r19, 48
		if (local_comp == 1) {
20031aac:	e0730030 	lbui	r3, r19, 48
20031ab0:	90630060 	sext8	r3, r3
20031ab4:	a8630001 	xori	r3, r3, 1
20031ab8:	bc230144 	bnei	r3, 324		// 20031bfc
			local_ptr = ptr;
20031abc:	b0000000 	imm	0
20031ac0:	e8740934 	lwi	r3, r20, 2356
20031ac4:	e0630000 	lbui	r3, r3, 0
20031ac8:	f0730054 	sbi	r3, r19, 84
			a = access(local_ptr, 0);
20031acc:	e0730054 	lbui	r3, r19, 84
20031ad0:	90630060 	sext8	r3, r3
20031ad4:	10a30000 	addk	r5, r3, r0
20031ad8:	10c00000 	addk	r6, r0, r0
20031adc:	b0000000 	imm	0
20031ae0:	e8940970 	lwi	r4, r20, 2416
20031ae4:	99fc2000 	brald	r15, r4
20031ae8:	80000000 	or	r0, r0, r0
20031aec:	f473001c 	shi	r3, r19, 28
			b = 0;
20031af0:	f413001e 	shi	r0, r19, 30
			c = 0;
20031af4:	f4130020 	shi	r0, r19, 32
			tmp_coded2 = coded[a];
20031af8:	e473001c 	lhui	r3, r19, 28
20031afc:	90630061 	sext16	r3, r3
20031b00:	b0000000 	imm	0
20031b04:	e8940930 	lwi	r4, r20, 2352
20031b08:	64630402 	bslli	r3, r3, 2
20031b0c:	10641800 	addk	r3, r4, r3
20031b10:	e8630000 	lwi	r3, r3, 0
20031b14:	f8730058 	swi	r3, r19, 88
			if (!tmp_coded2) {
20031b18:	e8730058 	lwi	r3, r19, 88
20031b1c:	bc230008 	bnei	r3, 8		// 20031b24
				a = 0;
20031b20:	f413001c 	shi	r0, r19, 28
			}
			local_top_edge = top_edge;
20031b24:	b0000000 	imm	0
20031b28:	e8740920 	lwi	r3, r20, 2336
20031b2c:	e8630000 	lwi	r3, r3, 0
20031b30:	f8730040 	swi	r3, r19, 64
			if (!local_top_edge) {
20031b34:	e8730040 	lwi	r3, r19, 64
20031b38:	bc2300c4 	bnei	r3, 196		// 20031bfc
				local_ptr_above = ptr_above;
20031b3c:	b0000000 	imm	0
20031b40:	e874093c 	lwi	r3, r20, 2364
20031b44:	e0630000 	lbui	r3, r3, 0
20031b48:	f073004c 	sbi	r3, r19, 76
				b = access(local_ptr_above, 2);
20031b4c:	e073004c 	lbui	r3, r19, 76
20031b50:	90630060 	sext8	r3, r3
20031b54:	10a30000 	addk	r5, r3, r0
20031b58:	30c00002 	addik	r6, r0, 2
20031b5c:	b0000000 	imm	0
20031b60:	e8940970 	lwi	r4, r20, 2416
20031b64:	99fc2000 	brald	r15, r4
20031b68:	80000000 	or	r0, r0, r0
20031b6c:	f473001e 	shi	r3, r19, 30
				tmp_coded3 = coded[b];
20031b70:	e473001e 	lhui	r3, r19, 30
20031b74:	90630061 	sext16	r3, r3
20031b78:	b0000000 	imm	0
20031b7c:	e8940930 	lwi	r4, r20, 2352
20031b80:	64630402 	bslli	r3, r3, 2
20031b84:	10641800 	addk	r3, r4, r3
20031b88:	e8630000 	lwi	r3, r3, 0
20031b8c:	f873005c 	swi	r3, r19, 92
				if (!tmp_coded3) {
20031b90:	e873005c 	lwi	r3, r19, 92
20031b94:	bc230008 	bnei	r3, 8		// 20031b9c
					b = 0;
20031b98:	f413001e 	shi	r0, r19, 30
				}
				local_ptr_above = ptr_above;
20031b9c:	b0000000 	imm	0
20031ba0:	e874093c 	lwi	r3, r20, 2364
20031ba4:	e0630000 	lbui	r3, r3, 0
20031ba8:	f073004c 	sbi	r3, r19, 76
				c = access(local_ptr_above, 3);
20031bac:	e073004c 	lbui	r3, r19, 76
20031bb0:	90630060 	sext8	r3, r3
20031bb4:	10a30000 	addk	r5, r3, r0
20031bb8:	30c00003 	addik	r6, r0, 3
20031bbc:	b0000000 	imm	0
20031bc0:	e8940970 	lwi	r4, r20, 2416
20031bc4:	99fc2000 	brald	r15, r4
20031bc8:	80000000 	or	r0, r0, r0
20031bcc:	f4730020 	shi	r3, r19, 32
				tmp_coded4 = coded[c];
20031bd0:	e4730020 	lhui	r3, r19, 32
20031bd4:	90630061 	sext16	r3, r3
20031bd8:	b0000000 	imm	0
20031bdc:	e8940930 	lwi	r4, r20, 2352
20031be0:	64630402 	bslli	r3, r3, 2
20031be4:	10641800 	addk	r3, r4, r3
20031be8:	e8630000 	lwi	r3, r3, 0
20031bec:	f8730060 	swi	r3, r19, 96
				if (!tmp_coded4) {
20031bf0:	e8730060 	lwi	r3, r19, 96
20031bf4:	bc230008 	bnei	r3, 8		// 20031bfc
					c = 0;
20031bf8:	f4130020 	shi	r0, r19, 32
				}
			}
		}
		local_comp = comp;
20031bfc:	b0000000 	imm	0
20031c00:	e8740928 	lwi	r3, r20, 2344
20031c04:	e0630000 	lbui	r3, r3, 0
20031c08:	f0730030 	sbi	r3, r19, 48
		if (local_comp == 2) {
20031c0c:	e0730030 	lbui	r3, r19, 48
20031c10:	90630060 	sext8	r3, r3
20031c14:	a8630002 	xori	r3, r3, 2
20031c18:	bc230144 	bnei	r3, 324		// 20031d5c
			a = 0;
20031c1c:	f413001c 	shi	r0, r19, 28
			b = 0;
20031c20:	f413001e 	shi	r0, r19, 30
			local_ptr = ptr;
20031c24:	b0000000 	imm	0
20031c28:	e8740934 	lwi	r3, r20, 2356
20031c2c:	e0630000 	lbui	r3, r3, 0
20031c30:	f0730054 	sbi	r3, r19, 84
			c = access(local_ptr, 0);
20031c34:	e0730054 	lbui	r3, r19, 84
20031c38:	90630060 	sext8	r3, r3
20031c3c:	10a30000 	addk	r5, r3, r0
20031c40:	10c00000 	addk	r6, r0, r0
20031c44:	b0000000 	imm	0
20031c48:	e8940970 	lwi	r4, r20, 2416
20031c4c:	99fc2000 	brald	r15, r4
20031c50:	80000000 	or	r0, r0, r0
20031c54:	f4730020 	shi	r3, r19, 32
			local_left_edge = left_edge;
20031c58:	b0000000 	imm	0
20031c5c:	e8740924 	lwi	r3, r20, 2340
20031c60:	e8630000 	lwi	r3, r3, 0
20031c64:	f8730034 	swi	r3, r19, 52
			if (!local_left_edge) {
20031c68:	e8730034 	lwi	r3, r19, 52
20031c6c:	bc2300c4 	bnei	r3, 196		// 20031d30
				local_ptr_left = ptr_left;
20031c70:	b0000000 	imm	0
20031c74:	e8740938 	lwi	r3, r20, 2360
20031c78:	e0630000 	lbui	r3, r3, 0
20031c7c:	f0730038 	sbi	r3, r19, 56
				a = access(local_ptr_left, 3);
20031c80:	e0730038 	lbui	r3, r19, 56
20031c84:	90630060 	sext8	r3, r3
20031c88:	10a30000 	addk	r5, r3, r0
20031c8c:	30c00003 	addik	r6, r0, 3
20031c90:	b0000000 	imm	0
20031c94:	e8940970 	lwi	r4, r20, 2416
20031c98:	99fc2000 	brald	r15, r4
20031c9c:	80000000 	or	r0, r0, r0
20031ca0:	f473001c 	shi	r3, r19, 28
				tmp_coded5 = coded[a];
20031ca4:	e473001c 	lhui	r3, r19, 28
20031ca8:	90630061 	sext16	r3, r3
20031cac:	b0000000 	imm	0
20031cb0:	e8940930 	lwi	r4, r20, 2352
20031cb4:	64630402 	bslli	r3, r3, 2
20031cb8:	10641800 	addk	r3, r4, r3
20031cbc:	e8630000 	lwi	r3, r3, 0
20031cc0:	f8730064 	swi	r3, r19, 100
				if (!tmp_coded5) {
20031cc4:	e8730064 	lwi	r3, r19, 100
20031cc8:	bc230008 	bnei	r3, 8		// 20031cd0
					a = 0;
20031ccc:	f413001c 	shi	r0, r19, 28
				}
				local_ptr_left = ptr_left;
20031cd0:	b0000000 	imm	0
20031cd4:	e8740938 	lwi	r3, r20, 2360
20031cd8:	e0630000 	lbui	r3, r3, 0
20031cdc:	f0730038 	sbi	r3, r19, 56
				b = access(local_ptr_left, 1);
20031ce0:	e0730038 	lbui	r3, r19, 56
20031ce4:	90630060 	sext8	r3, r3
20031ce8:	10a30000 	addk	r5, r3, r0
20031cec:	30c00001 	addik	r6, r0, 1
20031cf0:	b0000000 	imm	0
20031cf4:	e8940970 	lwi	r4, r20, 2416
20031cf8:	99fc2000 	brald	r15, r4
20031cfc:	80000000 	or	r0, r0, r0
20031d00:	f473001e 	shi	r3, r19, 30
				tmp_coded6 = coded[b];
20031d04:	e473001e 	lhui	r3, r19, 30
20031d08:	90630061 	sext16	r3, r3
20031d0c:	b0000000 	imm	0
20031d10:	e8940930 	lwi	r4, r20, 2352
20031d14:	64630402 	bslli	r3, r3, 2
20031d18:	10641800 	addk	r3, r4, r3
20031d1c:	e8630000 	lwi	r3, r3, 0
20031d20:	f8730068 	swi	r3, r19, 104
				if (!tmp_coded6) {
20031d24:	e8730068 	lwi	r3, r19, 104
20031d28:	bc230008 	bnei	r3, 8		// 20031d30
					b = 0;
20031d2c:	f413001e 	shi	r0, r19, 30
				}
			}
			tmp_coded7 = coded[c];
20031d30:	e4730020 	lhui	r3, r19, 32
20031d34:	90630061 	sext16	r3, r3
20031d38:	b0000000 	imm	0
20031d3c:	e8940930 	lwi	r4, r20, 2352
20031d40:	64630402 	bslli	r3, r3, 2
20031d44:	10641800 	addk	r3, r4, r3
20031d48:	e8630000 	lwi	r3, r3, 0
20031d4c:	f873006c 	swi	r3, r19, 108
			if (!tmp_coded7) {
20031d50:	e873006c 	lwi	r3, r19, 108
20031d54:	bc230008 	bnei	r3, 8		// 20031d5c
				c = 0;
20031d58:	f4130020 	shi	r0, r19, 32
			}
		}
		local_comp = comp;
20031d5c:	b0000000 	imm	0
20031d60:	e8740928 	lwi	r3, r20, 2344
20031d64:	e0630000 	lbui	r3, r3, 0
20031d68:	f0730030 	sbi	r3, r19, 48
		if (local_comp == 3) {
20031d6c:	e0730030 	lbui	r3, r19, 48
20031d70:	90630060 	sext8	r3, r3
20031d74:	a8630003 	xori	r3, r3, 3
20031d78:	bc230124 	bnei	r3, 292		// 20031e9c
			local_ptr = ptr;
20031d7c:	b0000000 	imm	0
20031d80:	e8740934 	lwi	r3, r20, 2356
20031d84:	e0630000 	lbui	r3, r3, 0
20031d88:	f0730054 	sbi	r3, r19, 84
			a = access(local_ptr, 2);
20031d8c:	e0730054 	lbui	r3, r19, 84
20031d90:	90630060 	sext8	r3, r3
20031d94:	10a30000 	addk	r5, r3, r0
20031d98:	30c00002 	addik	r6, r0, 2
20031d9c:	b0000000 	imm	0
20031da0:	e8940970 	lwi	r4, r20, 2416
20031da4:	99fc2000 	brald	r15, r4
20031da8:	80000000 	or	r0, r0, r0
20031dac:	f473001c 	shi	r3, r19, 28
			local_ptr = ptr;
20031db0:	b0000000 	imm	0
20031db4:	e8740934 	lwi	r3, r20, 2356
20031db8:	e0630000 	lbui	r3, r3, 0
20031dbc:	f0730054 	sbi	r3, r19, 84
			b = access(local_ptr, 0);
20031dc0:	e0730054 	lbui	r3, r19, 84
20031dc4:	90630060 	sext8	r3, r3
20031dc8:	10a30000 	addk	r5, r3, r0
20031dcc:	10c00000 	addk	r6, r0, r0
20031dd0:	b0000000 	imm	0
20031dd4:	e8940970 	lwi	r4, r20, 2416
20031dd8:	99fc2000 	brald	r15, r4
20031ddc:	80000000 	or	r0, r0, r0
20031de0:	f473001e 	shi	r3, r19, 30
			local_ptr = ptr;
20031de4:	b0000000 	imm	0
20031de8:	e8740934 	lwi	r3, r20, 2356
20031dec:	e0630000 	lbui	r3, r3, 0
20031df0:	f0730054 	sbi	r3, r19, 84
			c = access(local_ptr, 1);
20031df4:	e0730054 	lbui	r3, r19, 84
20031df8:	90630060 	sext8	r3, r3
20031dfc:	10a30000 	addk	r5, r3, r0
20031e00:	30c00001 	addik	r6, r0, 1
20031e04:	b0000000 	imm	0
20031e08:	e8940970 	lwi	r4, r20, 2416
20031e0c:	99fc2000 	brald	r15, r4
20031e10:	80000000 	or	r0, r0, r0
20031e14:	f4730020 	shi	r3, r19, 32
			tmp_coded8 = coded[a];
20031e18:	e473001c 	lhui	r3, r19, 28
20031e1c:	90630061 	sext16	r3, r3
20031e20:	b0000000 	imm	0
20031e24:	e8940930 	lwi	r4, r20, 2352
20031e28:	64630402 	bslli	r3, r3, 2
20031e2c:	10641800 	addk	r3, r4, r3
20031e30:	e8630000 	lwi	r3, r3, 0
20031e34:	f8730070 	swi	r3, r19, 112
			if (!tmp_coded8) {
20031e38:	e8730070 	lwi	r3, r19, 112
20031e3c:	bc230008 	bnei	r3, 8		// 20031e44
				a = 0;
20031e40:	f413001c 	shi	r0, r19, 28
			}
			tmp_coded9 = coded[b];
20031e44:	e473001e 	lhui	r3, r19, 30
20031e48:	90630061 	sext16	r3, r3
20031e4c:	b0000000 	imm	0
20031e50:	e8940930 	lwi	r4, r20, 2352
20031e54:	64630402 	bslli	r3, r3, 2
20031e58:	10641800 	addk	r3, r4, r3
20031e5c:	e8630000 	lwi	r3, r3, 0
20031e60:	f8730074 	swi	r3, r19, 116
			if (!tmp_coded9) {
20031e64:	e8730074 	lwi	r3, r19, 116
20031e68:	bc230008 	bnei	r3, 8		// 20031e70
				b = 0;
20031e6c:	f413001e 	shi	r0, r19, 30
			}
			tmp_coded10 = coded[c];
20031e70:	e4730020 	lhui	r3, r19, 32
20031e74:	90630061 	sext16	r3, r3
20031e78:	b0000000 	imm	0
20031e7c:	e8940930 	lwi	r4, r20, 2352
20031e80:	64630402 	bslli	r3, r3, 2
20031e84:	10641800 	addk	r3, r4, r3
20031e88:	e8630000 	lwi	r3, r3, 0
20031e8c:	f8730078 	swi	r3, r19, 120
			if (!tmp_coded10) {
20031e90:	e8730078 	lwi	r3, r19, 120
20031e94:	bc230008 	bnei	r3, 8		// 20031e9c
				c = 0;
20031e98:	f4130020 	shi	r0, r19, 32
			}
		}
		local_comp = comp;
20031e9c:	b0000000 	imm	0
20031ea0:	e8740928 	lwi	r3, r20, 2344
20031ea4:	e0630000 	lbui	r3, r3, 0
20031ea8:	f0730030 	sbi	r3, r19, 48
		local_comp = comp;
20031eac:	b0000000 	imm	0
20031eb0:	e8740928 	lwi	r3, r20, 2344
20031eb4:	e0630000 	lbui	r3, r3, 0
20031eb8:	f0730030 	sbi	r3, r19, 48
		if (local_comp == 4 || local_comp == 5) {
20031ebc:	e0730030 	lbui	r3, r19, 48
20031ec0:	90630060 	sext8	r3, r3
20031ec4:	a8630004 	xori	r3, r3, 4
20031ec8:	bc030014 	beqi	r3, 20		// 20031edc
20031ecc:	e0730030 	lbui	r3, r19, 48
20031ed0:	90630060 	sext8	r3, r3
20031ed4:	a8630005 	xori	r3, r3, 5
20031ed8:	bc2301c0 	bnei	r3, 448		// 20032098
			a = 0;
20031edc:	f413001c 	shi	r0, r19, 28
			b = 0;
20031ee0:	f413001e 	shi	r0, r19, 30
			c = 0;
20031ee4:	f4130020 	shi	r0, r19, 32
			local_left_edge = left_edge;
20031ee8:	b0000000 	imm	0
20031eec:	e8740924 	lwi	r3, r20, 2340
20031ef0:	e8630000 	lwi	r3, r3, 0
20031ef4:	f8730034 	swi	r3, r19, 52
			if (!local_left_edge) {
20031ef8:	e8730034 	lwi	r3, r19, 52
20031efc:	bc23010c 	bnei	r3, 268		// 20032008
				local_ptr_left = ptr_left;
20031f00:	b0000000 	imm	0
20031f04:	e8740938 	lwi	r3, r20, 2360
20031f08:	e0630000 	lbui	r3, r3, 0
20031f0c:	f0730038 	sbi	r3, r19, 56
				local_comp = comp;
20031f10:	b0000000 	imm	0
20031f14:	e8740928 	lwi	r3, r20, 2344
20031f18:	e0630000 	lbui	r3, r3, 0
20031f1c:	f0730030 	sbi	r3, r19, 48
				a = access(local_ptr_left, local_comp);
20031f20:	e0730038 	lbui	r3, r19, 56
20031f24:	90830060 	sext8	r4, r3
20031f28:	e0730030 	lbui	r3, r19, 48
20031f2c:	90630060 	sext8	r3, r3
20031f30:	10a40000 	addk	r5, r4, r0
20031f34:	10c30000 	addk	r6, r3, r0
20031f38:	b0000000 	imm	0
20031f3c:	e8940970 	lwi	r4, r20, 2416
20031f40:	99fc2000 	brald	r15, r4
20031f44:	80000000 	or	r0, r0, r0
20031f48:	f473001c 	shi	r3, r19, 28
				tmp_coded11 = coded[a];
20031f4c:	e473001c 	lhui	r3, r19, 28
20031f50:	90630061 	sext16	r3, r3
20031f54:	b0000000 	imm	0
20031f58:	e8940930 	lwi	r4, r20, 2352
20031f5c:	64630402 	bslli	r3, r3, 2
20031f60:	10641800 	addk	r3, r4, r3
20031f64:	e8630000 	lwi	r3, r3, 0
20031f68:	f873007c 	swi	r3, r19, 124
				if (!tmp_coded11) {
20031f6c:	e873007c 	lwi	r3, r19, 124
20031f70:	bc230008 	bnei	r3, 8		// 20031f78
					a = 0;
20031f74:	f413001c 	shi	r0, r19, 28
				}
				local_top_edge = top_edge;
20031f78:	b0000000 	imm	0
20031f7c:	e8740920 	lwi	r3, r20, 2336
20031f80:	e8630000 	lwi	r3, r3, 0
20031f84:	f8730040 	swi	r3, r19, 64
				if (!local_top_edge) {
20031f88:	e8730040 	lwi	r3, r19, 64
20031f8c:	bc23007c 	bnei	r3, 124		// 20032008
					local_ptr_above_left = ptr_above_left;
20031f90:	b0000000 	imm	0
20031f94:	e8740940 	lwi	r3, r20, 2368
20031f98:	e0630000 	lbui	r3, r3, 0
20031f9c:	f0730044 	sbi	r3, r19, 68
					local_comp = comp;
20031fa0:	b0000000 	imm	0
20031fa4:	e8740928 	lwi	r3, r20, 2344
20031fa8:	e0630000 	lbui	r3, r3, 0
20031fac:	f0730030 	sbi	r3, r19, 48
					b = access(local_ptr_above_left, local_comp);
20031fb0:	e0730044 	lbui	r3, r19, 68
20031fb4:	90830060 	sext8	r4, r3
20031fb8:	e0730030 	lbui	r3, r19, 48
20031fbc:	90630060 	sext8	r3, r3
20031fc0:	10a40000 	addk	r5, r4, r0
20031fc4:	10c30000 	addk	r6, r3, r0
20031fc8:	b0000000 	imm	0
20031fcc:	e8940970 	lwi	r4, r20, 2416
20031fd0:	99fc2000 	brald	r15, r4
20031fd4:	80000000 	or	r0, r0, r0
20031fd8:	f473001e 	shi	r3, r19, 30
					tmp_coded12 = coded[b];
20031fdc:	e473001e 	lhui	r3, r19, 30
20031fe0:	90630061 	sext16	r3, r3
20031fe4:	b0000000 	imm	0
20031fe8:	e8940930 	lwi	r4, r20, 2352
20031fec:	64630402 	bslli	r3, r3, 2
20031ff0:	10641800 	addk	r3, r4, r3
20031ff4:	e8630000 	lwi	r3, r3, 0
20031ff8:	f8730080 	swi	r3, r19, 128
					if (!tmp_coded12) {
20031ffc:	e8730080 	lwi	r3, r19, 128
20032000:	bc230008 	bnei	r3, 8		// 20032008
						b = 0;
20032004:	f413001e 	shi	r0, r19, 30
					}
				}
			}
			local_top_edge = top_edge;
20032008:	b0000000 	imm	0
2003200c:	e8740920 	lwi	r3, r20, 2336
20032010:	e8630000 	lwi	r3, r3, 0
20032014:	f8730040 	swi	r3, r19, 64
			if (!local_top_edge) {
20032018:	e8730040 	lwi	r3, r19, 64
2003201c:	bc23007c 	bnei	r3, 124		// 20032098
				local_ptr_above = ptr_above;
20032020:	b0000000 	imm	0
20032024:	e874093c 	lwi	r3, r20, 2364
20032028:	e0630000 	lbui	r3, r3, 0
2003202c:	f073004c 	sbi	r3, r19, 76
				local_comp = comp;
20032030:	b0000000 	imm	0
20032034:	e8740928 	lwi	r3, r20, 2344
20032038:	e0630000 	lbui	r3, r3, 0
2003203c:	f0730030 	sbi	r3, r19, 48
				c = access(local_ptr_above, local_comp);
20032040:	e073004c 	lbui	r3, r19, 76
20032044:	90830060 	sext8	r4, r3
20032048:	e0730030 	lbui	r3, r19, 48
2003204c:	90630060 	sext8	r3, r3
20032050:	10a40000 	addk	r5, r4, r0
20032054:	10c30000 	addk	r6, r3, r0
20032058:	b0000000 	imm	0
2003205c:	e8940970 	lwi	r4, r20, 2416
20032060:	99fc2000 	brald	r15, r4
20032064:	80000000 	or	r0, r0, r0
20032068:	f4730020 	shi	r3, r19, 32
				tmp_coded13 = coded[c];
2003206c:	e4730020 	lhui	r3, r19, 32
20032070:	90630061 	sext16	r3, r3
20032074:	b0000000 	imm	0
20032078:	e8940930 	lwi	r4, r20, 2352
2003207c:	64630402 	bslli	r3, r3, 2
20032080:	10641800 	addk	r3, r4, r3
20032084:	e8630000 	lwi	r3, r3, 0
20032088:	f8730084 	swi	r3, r19, 132
				if (!tmp_coded13) {
2003208c:	e8730084 	lwi	r3, r19, 132
20032090:	bc230008 	bnei	r3, 8		// 20032098
					c = 0;
20032094:	f4130020 	shi	r0, r19, 32
				}
			}
		}
		tokens_A[(index_A + (0)) % SIZE_A] = a;
20032098:	b0000000 	imm	0
2003209c:	e87408f4 	lwi	r3, r20, 2292
200320a0:	e8630000 	lwi	r3, r3, 0
200320a4:	e8830004 	lwi	r4, r3, 4
200320a8:	b0000000 	imm	0
200320ac:	e8740904 	lwi	r3, r20, 2308
200320b0:	e8630000 	lwi	r3, r3, 0
200320b4:	a46301ff 	andi	r3, r3, 511
200320b8:	10631800 	addk	r3, r3, r3
200320bc:	10641800 	addk	r3, r4, r3
200320c0:	e493001c 	lhui	r4, r19, 28
200320c4:	f4830000 	shi	r4, r3, 0
		tokens_B[(index_B + (0)) % SIZE_B] = b;
200320c8:	b0000000 	imm	0
200320cc:	e87408f0 	lwi	r3, r20, 2288
200320d0:	e8630000 	lwi	r3, r3, 0
200320d4:	e8830004 	lwi	r4, r3, 4
200320d8:	b0000000 	imm	0
200320dc:	e874090c 	lwi	r3, r20, 2316
200320e0:	e8630000 	lwi	r3, r3, 0
200320e4:	a46301ff 	andi	r3, r3, 511
200320e8:	10631800 	addk	r3, r3, r3
200320ec:	10641800 	addk	r3, r4, r3
200320f0:	e493001e 	lhui	r4, r19, 30
200320f4:	f4830000 	shi	r4, r3, 0
		tokens_C[(index_C + (0)) % SIZE_C] = c;
200320f8:	b0000000 	imm	0
200320fc:	e87408f8 	lwi	r3, r20, 2296
20032100:	e8630000 	lwi	r3, r3, 0
20032104:	e8830004 	lwi	r4, r3, 4
20032108:	b0000000 	imm	0
2003210c:	e8740914 	lwi	r3, r20, 2324
20032110:	e8630000 	lwi	r3, r3, 0
20032114:	a46301ff 	andi	r3, r3, 511
20032118:	10631800 	addk	r3, r3, r3
2003211c:	10641800 	addk	r3, r4, r3
20032120:	e4930020 	lhui	r4, r19, 32
20032124:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_A += 1;
20032128:	b0000000 	imm	0
2003212c:	e8740904 	lwi	r3, r20, 2308
20032130:	e8630000 	lwi	r3, r3, 0
20032134:	30830001 	addik	r4, r3, 1
20032138:	b0000000 	imm	0
2003213c:	e8740904 	lwi	r3, r20, 2308
20032140:	f8830000 	swi	r4, r3, 0
		index_B += 1;
20032144:	b0000000 	imm	0
20032148:	e874090c 	lwi	r3, r20, 2316
2003214c:	e8630000 	lwi	r3, r3, 0
20032150:	30830001 	addik	r4, r3, 1
20032154:	b0000000 	imm	0
20032158:	e874090c 	lwi	r3, r20, 2316
2003215c:	f8830000 	swi	r4, r3, 0
		index_C += 1;
20032160:	b0000000 	imm	0
20032164:	e8740914 	lwi	r3, r20, 2324
20032168:	e8630000 	lwi	r3, r3, 0
2003216c:	30830001 	addik	r4, r3, 1
20032170:	b0000000 	imm	0
20032174:	e8740914 	lwi	r3, r20, 2324
20032178:	f8830000 	swi	r4, r3, 0
		
		write_end_A();
2003217c:	b0000000 	imm	0
20032180:	e8740958 	lwi	r3, r20, 2392
20032184:	99fc1800 	brald	r15, r3
20032188:	80000000 	or	r0, r0, r0
		write_end_B();
2003218c:	b0000000 	imm	0
20032190:	e8940960 	lwi	r4, r20, 2400
20032194:	99fc2000 	brald	r15, r4
20032198:	80000000 	or	r0, r0, r0
		write_end_C();
2003219c:	b0000000 	imm	0
200321a0:	e8740968 	lwi	r3, r20, 2408
200321a4:	99fc1800 	brald	r15, r3
200321a8:	80000000 	or	r0, r0, r0
	}
200321ac:	e9e10000 	lwi	r15, r1, 0
200321b0:	10330000 	addk	r1, r19, r0
200321b4:	ea610088 	lwi	r19, r1, 136
200321b8:	ea81008c 	lwi	r20, r1, 140
200321bc:	30210090 	addik	r1, r1, 144
200321c0:	b60f0008 	rtsd	r15, 8
200321c4:	80000000 	or	r0, r0, r0

200321c8 <decoder_texture_DCReconstruction_addressing_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_texture_DCReconstruction_addressing_initialize() {
200321c8:	3021fff0 	addik	r1, r1, -16
200321cc:	fa610008 	swi	r19, r1, 8
200321d0:	fa81000c 	swi	r20, r1, 12
200321d4:	12610000 	addk	r19, r1, r0
200321d8:	96808000 	mfs	r20, rpc
200321dc:	b000dffc 	imm	-8196
200321e0:	3294f784 	addik	r20, r20, -2172
		int i = 0;
200321e4:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_read;
200321e8:	b0000000 	imm	0
200321ec:	e8740948 	lwi	r3, r20, 2376
200321f0:	30800004 	addik	r4, r0, 4
200321f4:	f8830000 	swi	r4, r3, 0
		
	finished:
		// no read_end/write_end here!
		return;
200321f8:	80000000 	or	r0, r0, r0
	}
200321fc:	10330000 	addk	r1, r19, r0
20032200:	ea610008 	lwi	r19, r1, 8
20032204:	ea81000c 	lwi	r20, r1, 12
20032208:	30210010 	addik	r1, r1, 16
2003220c:	b60f0008 	rtsd	r15, 8
20032210:	80000000 	or	r0, r0, r0

20032214 <decoder_texture_DCReconstruction_addressing_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	
	int decoder_texture_DCReconstruction_addressing_scheduler() {
20032214:	3021ffbc 	addik	r1, r1, -68
20032218:	f9e10000 	swi	r15, r1, 0
2003221c:	fa61003c 	swi	r19, r1, 60
20032220:	fa810040 	swi	r20, r1, 64
20032224:	12610000 	addk	r19, r1, r0
20032228:	96808000 	mfs	r20, rpc
2003222c:	b000dffc 	imm	-8196
20032230:	3294f734 	addik	r20, r20, -2252
		int i = 0;
20032234:	f813001c 	swi	r0, r19, 28
		if(needInit){
20032238:	b0000000 	imm	0
2003223c:	e8740944 	lwi	r3, r20, 2372
20032240:	e0630000 	lbui	r3, r3, 0
20032244:	bc03001c 	beqi	r3, 28		// 20032260
			decoder_texture_DCReconstruction_addressing_initialize();
20032248:	b000ffff 	imm	-1
2003224c:	b9f4ff7c 	brlid	r15, -132	// 200321c8 <decoder_texture_DCReconstruction_addressing_initialize>
20032250:	80000000 	or	r0, r0, r0
			needInit = 0;
20032254:	b0000000 	imm	0
20032258:	e8740944 	lwi	r3, r20, 2372
2003225c:	f0030000 	sbi	r0, r3, 0
		}
	
		read_BTYPE();
20032260:	b0000000 	imm	0
20032264:	e874094c 	lwi	r3, r20, 2380
20032268:	99fc1800 	brald	r15, r3
2003226c:	80000000 	or	r0, r0, r0
		write_A();
20032270:	b0000000 	imm	0
20032274:	e8940954 	lwi	r4, r20, 2388
20032278:	99fc2000 	brald	r15, r4
2003227c:	80000000 	or	r0, r0, r0
		write_B();
20032280:	b0000000 	imm	0
20032284:	e874095c 	lwi	r3, r20, 2396
20032288:	99fc1800 	brald	r15, r3
2003228c:	80000000 	or	r0, r0, r0
		write_C();
20032290:	b0000000 	imm	0
20032294:	e8940964 	lwi	r4, r20, 2404
20032298:	99fc2000 	brald	r15, r4
2003229c:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
200322a0:	b0000000 	imm	0
200322a4:	e8740948 	lwi	r3, r20, 2376
200322a8:	e8630000 	lwi	r3, r3, 0
200322ac:	30800004 	addik	r4, r0, 4
200322b0:	16432003 	cmpu	r18, r3, r4
200322b4:	bc520020 	blti	r18, 32		// 200322d4
200322b8:	64830402 	bslli	r4, r3, 2
200322bc:	b0000000 	imm	0
200322c0:	e87409ac 	lwi	r3, r20, 2476
200322c4:	10641800 	addk	r3, r4, r3
200322c8:	e8630000 	lwi	r3, r3, 0
200322cc:	1063a000 	addk	r3, r3, r20
200322d0:	98081800 	bra	r3
		case my_state_predict:
			goto l_predict;
		case my_state_read:
			goto l_read;
		default:
			exit(1);
200322d4:	30a00001 	addik	r5, r0, 1
200322d8:	b000dffc 	imm	-8196
200322dc:	b9f4e0bc 	brlid	r15, -8004	// 398 <exit>
200322e0:	80000000 	or	r0, r0, r0

200322e4 <$L280>:
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_advance:
			goto l_advance;
200322e4:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_advance:
			if (isSchedulable_advance()) {
200322e8:	b0000000 	imm	0
200322ec:	e894099c 	lwi	r4, r20, 2460
200322f0:	99fc2000 	brald	r15, r4
200322f4:	80000000 	or	r0, r0, r0
200322f8:	bc030040 	beqi	r3, 64		// 20032338
				int stop = 0;
200322fc:	f8130024 	swi	r0, r19, 36
				if (stop != 0) {
20032300:	e8730024 	lwi	r3, r19, 36
20032304:	bc030014 	beqi	r3, 20		// 20032318
					_FSM_state = my_state_advance;
20032308:	b0000000 	imm	0
2003230c:	e8740948 	lwi	r3, r20, 2376
20032310:	f8030000 	swi	r0, r3, 0
					goto finished;
20032314:	b80003c8 	bri	968		// 200326dc
				}
				advance();
20032318:	b0000000 	imm	0
2003231c:	e87409a0 	lwi	r3, r20, 2464
20032320:	99fc1800 	brald	r15, r3
20032324:	80000000 	or	r0, r0, r0
				i++;
20032328:	e873001c 	lwi	r3, r19, 28
2003232c:	30630001 	addik	r3, r3, 1
20032330:	f873001c 	swi	r3, r19, 28
				goto l_read;
20032334:	b8000238 	bri	568		// 2003256c
			} else {
				_FSM_state = my_state_advance;
20032338:	b0000000 	imm	0
2003233c:	e8740948 	lwi	r3, r20, 2376
20032340:	f8030000 	swi	r0, r3, 0
				goto finished;
20032344:	b8000398 	bri	920		// 200326dc

20032348 <$L281>:
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_advance:
			goto l_advance;
		case my_state_geth:
			goto l_geth;
20032348:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_advance;
				goto finished;
			}
		l_geth:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_geth()) {
2003234c:	b0000000 	imm	0
20032350:	e8740900 	lwi	r3, r20, 2304
20032354:	e8830000 	lwi	r4, r3, 0
20032358:	b0000000 	imm	0
2003235c:	e87408fc 	lwi	r3, r20, 2300
20032360:	e8630000 	lwi	r3, r3, 0
20032364:	88641800 	xor	r3, r4, r3
20032368:	bc030058 	beqi	r3, 88		// 200323c0
2003236c:	b0000000 	imm	0
20032370:	e8940984 	lwi	r4, r20, 2436
20032374:	99fc2000 	brald	r15, r4
20032378:	80000000 	or	r0, r0, r0
2003237c:	bc030044 	beqi	r3, 68		// 200323c0
				int stop = 0;
20032380:	f8130028 	swi	r0, r19, 40
				if (stop != 0) {
20032384:	e8730028 	lwi	r3, r19, 40
20032388:	bc030018 	beqi	r3, 24		// 200323a0
					_FSM_state = my_state_geth;
2003238c:	b0000000 	imm	0
20032390:	e8740948 	lwi	r3, r20, 2376
20032394:	30800001 	addik	r4, r0, 1
20032398:	f8830000 	swi	r4, r3, 0
					goto finished;
2003239c:	b8000340 	bri	832		// 200326dc
				}
				geth();
200323a0:	b0000000 	imm	0
200323a4:	e8740988 	lwi	r3, r20, 2440
200323a8:	99fc1800 	brald	r15, r3
200323ac:	80000000 	or	r0, r0, r0
				i++;
200323b0:	e873001c 	lwi	r3, r19, 28
200323b4:	30630001 	addik	r3, r3, 1
200323b8:	f873001c 	swi	r3, r19, 28
				goto l_read;
200323bc:	b80001b0 	bri	432		// 2003256c
			} else {
				_FSM_state = my_state_geth;
200323c0:	b0000000 	imm	0
200323c4:	e8740948 	lwi	r3, r20, 2376
200323c8:	30800001 	addik	r4, r0, 1
200323cc:	f8830000 	swi	r4, r3, 0
				goto finished;
200323d0:	b800030c 	bri	780		// 200326dc

200323d4 <$L282>:
		case my_state_advance:
			goto l_advance;
		case my_state_geth:
			goto l_geth;
		case my_state_getw:
			goto l_getw;
200323d4:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_geth;
				goto finished;
			}
		l_getw:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_getw()) {
200323d8:	b0000000 	imm	0
200323dc:	e8740900 	lwi	r3, r20, 2304
200323e0:	e8830000 	lwi	r4, r3, 0
200323e4:	b0000000 	imm	0
200323e8:	e87408fc 	lwi	r3, r20, 2300
200323ec:	e8630000 	lwi	r3, r3, 0
200323f0:	88641800 	xor	r3, r4, r3
200323f4:	bc030058 	beqi	r3, 88		// 2003244c
200323f8:	b0000000 	imm	0
200323fc:	e894097c 	lwi	r4, r20, 2428
20032400:	99fc2000 	brald	r15, r4
20032404:	80000000 	or	r0, r0, r0
20032408:	bc030044 	beqi	r3, 68		// 2003244c
				int stop = 0;
2003240c:	f8130038 	swi	r0, r19, 56
				if (stop != 0) {
20032410:	e8730038 	lwi	r3, r19, 56
20032414:	bc030018 	beqi	r3, 24		// 2003242c
					_FSM_state = my_state_getw;
20032418:	b0000000 	imm	0
2003241c:	e8740948 	lwi	r3, r20, 2376
20032420:	30800002 	addik	r4, r0, 2
20032424:	f8830000 	swi	r4, r3, 0
					goto finished;
20032428:	b80002b4 	bri	692		// 200326dc
				}
				getw_replaced();
2003242c:	b0000000 	imm	0
20032430:	e8740980 	lwi	r3, r20, 2432
20032434:	99fc1800 	brald	r15, r3
20032438:	80000000 	or	r0, r0, r0
				i++;
2003243c:	e873001c 	lwi	r3, r19, 28
20032440:	30630001 	addik	r3, r3, 1
20032444:	f873001c 	swi	r3, r19, 28
				goto l_geth;
20032448:	b800ff04 	bri	-252		// 2003234c
			} else {
				_FSM_state = my_state_getw;
2003244c:	b0000000 	imm	0
20032450:	e8740948 	lwi	r3, r20, 2376
20032454:	30800002 	addik	r4, r0, 2
20032458:	f8830000 	swi	r4, r3, 0
				goto finished;
2003245c:	b8000280 	bri	640		// 200326dc

20032460 <$L283>:
		case my_state_geth:
			goto l_geth;
		case my_state_getw:
			goto l_getw;
		case my_state_predict:
			goto l_predict;
20032460:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_getw;
				goto finished;
			}
		l_predict:
			if (isSchedulable_predict()) {
20032464:	b0000000 	imm	0
20032468:	e89409a4 	lwi	r4, r20, 2468
2003246c:	99fc2000 	brald	r15, r4
20032470:	80000000 	or	r0, r0, r0
20032474:	bc0300e0 	beqi	r3, 224		// 20032554
				int stop = 0;
20032478:	f8130020 	swi	r0, r19, 32
				if (1 > SIZE_A - index_A + decoder_texture_DCReconstruction_addressing_A->read_inds[0]) {
2003247c:	b0000000 	imm	0
20032480:	e87408f4 	lwi	r3, r20, 2292
20032484:	e8630000 	lwi	r3, r3, 0
20032488:	e863000c 	lwi	r3, r3, 12
2003248c:	e8830000 	lwi	r4, r3, 0
20032490:	b0000000 	imm	0
20032494:	e8740904 	lwi	r3, r20, 2308
20032498:	e8630000 	lwi	r3, r3, 0
2003249c:	14632000 	rsubk	r3, r3, r4
200324a0:	a863fe00 	xori	r3, r3, -512
200324a4:	bc23000c 	bnei	r3, 12		// 200324b0
					stop = 1;
200324a8:	30600001 	addik	r3, r0, 1
200324ac:	f8730020 	swi	r3, r19, 32
				}
				if (1 > SIZE_B - index_B + decoder_texture_DCReconstruction_addressing_B->read_inds[0]) {
200324b0:	b0000000 	imm	0
200324b4:	e87408f0 	lwi	r3, r20, 2288
200324b8:	e8630000 	lwi	r3, r3, 0
200324bc:	e863000c 	lwi	r3, r3, 12
200324c0:	e8830000 	lwi	r4, r3, 0
200324c4:	b0000000 	imm	0
200324c8:	e874090c 	lwi	r3, r20, 2316
200324cc:	e8630000 	lwi	r3, r3, 0
200324d0:	14632000 	rsubk	r3, r3, r4
200324d4:	a863fe00 	xori	r3, r3, -512
200324d8:	bc23000c 	bnei	r3, 12		// 200324e4
					stop = 1;
200324dc:	30600001 	addik	r3, r0, 1
200324e0:	f8730020 	swi	r3, r19, 32
				}
				if (1 > SIZE_C - index_C + decoder_texture_DCReconstruction_addressing_C->read_inds[0]) {
200324e4:	b0000000 	imm	0
200324e8:	e87408f8 	lwi	r3, r20, 2296
200324ec:	e8630000 	lwi	r3, r3, 0
200324f0:	e863000c 	lwi	r3, r3, 12
200324f4:	e8830000 	lwi	r4, r3, 0
200324f8:	b0000000 	imm	0
200324fc:	e8740914 	lwi	r3, r20, 2324
20032500:	e8630000 	lwi	r3, r3, 0
20032504:	14632000 	rsubk	r3, r3, r4
20032508:	a863fe00 	xori	r3, r3, -512
2003250c:	bc23000c 	bnei	r3, 12		// 20032518
					stop = 1;
20032510:	30600001 	addik	r3, r0, 1
20032514:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
20032518:	e8730020 	lwi	r3, r19, 32
2003251c:	bc030018 	beqi	r3, 24		// 20032534
					_FSM_state = my_state_predict;
20032520:	b0000000 	imm	0
20032524:	e8740948 	lwi	r3, r20, 2376
20032528:	30800003 	addik	r4, r0, 3
2003252c:	f8830000 	swi	r4, r3, 0
					goto finished;
20032530:	b80001ac 	bri	428		// 200326dc
				}
				predict();
20032534:	b0000000 	imm	0
20032538:	e87409a8 	lwi	r3, r20, 2472
2003253c:	99fc1800 	brald	r15, r3
20032540:	80000000 	or	r0, r0, r0
				i++;
20032544:	e873001c 	lwi	r3, r19, 28
20032548:	30630001 	addik	r3, r3, 1
2003254c:	f873001c 	swi	r3, r19, 28
				goto l_advance;
20032550:	b800fd98 	bri	-616		// 200322e8
			} else {
				_FSM_state = my_state_predict;
20032554:	b0000000 	imm	0
20032558:	e8740948 	lwi	r3, r20, 2376
2003255c:	30800003 	addik	r4, r0, 3
20032560:	f8830000 	swi	r4, r3, 0
				goto finished;
20032564:	b8000178 	bri	376		// 200326dc

20032568 <$L279>:
		case my_state_getw:
			goto l_getw;
		case my_state_predict:
			goto l_predict;
		case my_state_read:
			goto l_read;
20032568:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_predict;
				goto finished;
			}
		l_read:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_start()) {
2003256c:	b0000000 	imm	0
20032570:	e8740900 	lwi	r3, r20, 2304
20032574:	e8830000 	lwi	r4, r3, 0
20032578:	b0000000 	imm	0
2003257c:	e87408fc 	lwi	r3, r20, 2300
20032580:	e8630000 	lwi	r3, r3, 0
20032584:	88641800 	xor	r3, r4, r3
20032588:	bc030058 	beqi	r3, 88		// 200325e0
2003258c:	b0000000 	imm	0
20032590:	e8940974 	lwi	r4, r20, 2420
20032594:	99fc2000 	brald	r15, r4
20032598:	80000000 	or	r0, r0, r0
2003259c:	bc030044 	beqi	r3, 68		// 200325e0
				int stop = 0;
200325a0:	f813002c 	swi	r0, r19, 44
				if (stop != 0) {
200325a4:	e873002c 	lwi	r3, r19, 44
200325a8:	bc030018 	beqi	r3, 24		// 200325c0
					_FSM_state = my_state_read;
200325ac:	b0000000 	imm	0
200325b0:	e8740948 	lwi	r3, r20, 2376
200325b4:	30800004 	addik	r4, r0, 4
200325b8:	f8830000 	swi	r4, r3, 0
					goto finished;
200325bc:	b8000120 	bri	288		// 200326dc
				}
				start();
200325c0:	b0000000 	imm	0
200325c4:	e8740978 	lwi	r3, r20, 2424
200325c8:	99fc1800 	brald	r15, r3
200325cc:	80000000 	or	r0, r0, r0
				i++;
200325d0:	e873001c 	lwi	r3, r19, 28
200325d4:	30630001 	addik	r3, r3, 1
200325d8:	f873001c 	swi	r3, r19, 28
				goto l_getw;
200325dc:	b800fdfc 	bri	-516		// 200323d8
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_read_intra()) {
200325e0:	b0000000 	imm	0
200325e4:	e8740900 	lwi	r3, r20, 2304
200325e8:	e8830000 	lwi	r4, r3, 0
200325ec:	b0000000 	imm	0
200325f0:	e87408fc 	lwi	r3, r20, 2300
200325f4:	e8630000 	lwi	r3, r3, 0
200325f8:	88641800 	xor	r3, r4, r3
200325fc:	bc030058 	beqi	r3, 88		// 20032654
20032600:	b0000000 	imm	0
20032604:	e894098c 	lwi	r4, r20, 2444
20032608:	99fc2000 	brald	r15, r4
2003260c:	80000000 	or	r0, r0, r0
20032610:	bc030044 	beqi	r3, 68		// 20032654
				int stop = 0;
20032614:	f8130030 	swi	r0, r19, 48
				if (stop != 0) {
20032618:	e8730030 	lwi	r3, r19, 48
2003261c:	bc030018 	beqi	r3, 24		// 20032634
					_FSM_state = my_state_read;
20032620:	b0000000 	imm	0
20032624:	e8740948 	lwi	r3, r20, 2376
20032628:	30800004 	addik	r4, r0, 4
2003262c:	f8830000 	swi	r4, r3, 0
					goto finished;
20032630:	b80000ac 	bri	172		// 200326dc
				}
				read_intra();
20032634:	b0000000 	imm	0
20032638:	e8740990 	lwi	r3, r20, 2448
2003263c:	99fc1800 	brald	r15, r3
20032640:	80000000 	or	r0, r0, r0
				i++;
20032644:	e873001c 	lwi	r3, r19, 28
20032648:	30630001 	addik	r3, r3, 1
2003264c:	f873001c 	swi	r3, r19, 28
				goto l_predict;
20032650:	b800fe14 	bri	-492		// 20032464
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_read_other()) {
20032654:	b0000000 	imm	0
20032658:	e8740900 	lwi	r3, r20, 2304
2003265c:	e8830000 	lwi	r4, r3, 0
20032660:	b0000000 	imm	0
20032664:	e87408fc 	lwi	r3, r20, 2300
20032668:	e8630000 	lwi	r3, r3, 0
2003266c:	88641800 	xor	r3, r4, r3
20032670:	bc030058 	beqi	r3, 88		// 200326c8
20032674:	b0000000 	imm	0
20032678:	e8940994 	lwi	r4, r20, 2452
2003267c:	99fc2000 	brald	r15, r4
20032680:	80000000 	or	r0, r0, r0
20032684:	bc030044 	beqi	r3, 68		// 200326c8
				int stop = 0;
20032688:	f8130034 	swi	r0, r19, 52
				if (stop != 0) {
2003268c:	e8730034 	lwi	r3, r19, 52
20032690:	bc030018 	beqi	r3, 24		// 200326a8
					_FSM_state = my_state_read;
20032694:	b0000000 	imm	0
20032698:	e8740948 	lwi	r3, r20, 2376
2003269c:	30800004 	addik	r4, r0, 4
200326a0:	f8830000 	swi	r4, r3, 0
					goto finished;
200326a4:	b8000038 	bri	56		// 200326dc
				}
				read_other();
200326a8:	b0000000 	imm	0
200326ac:	e8740998 	lwi	r3, r20, 2456
200326b0:	99fc1800 	brald	r15, r3
200326b4:	80000000 	or	r0, r0, r0
				i++;
200326b8:	e873001c 	lwi	r3, r19, 28
200326bc:	30630001 	addik	r3, r3, 1
200326c0:	f873001c 	swi	r3, r19, 28
				goto l_advance;
200326c4:	b800fc24 	bri	-988		// 200322e8
			} else {
				_FSM_state = my_state_read;
200326c8:	b0000000 	imm	0
200326cc:	e8740948 	lwi	r3, r20, 2376
200326d0:	30800004 	addik	r4, r0, 4
200326d4:	f8830000 	swi	r4, r3, 0
				goto finished;
200326d8:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_BTYPE();
200326dc:	b0000000 	imm	0
200326e0:	e8940950 	lwi	r4, r20, 2384
200326e4:	99fc2000 	brald	r15, r4
200326e8:	80000000 	or	r0, r0, r0
		
		write_end_A();
200326ec:	b0000000 	imm	0
200326f0:	e8740958 	lwi	r3, r20, 2392
200326f4:	99fc1800 	brald	r15, r3
200326f8:	80000000 	or	r0, r0, r0
		write_end_B();
200326fc:	b0000000 	imm	0
20032700:	e8940960 	lwi	r4, r20, 2400
20032704:	99fc2000 	brald	r15, r4
20032708:	80000000 	or	r0, r0, r0
		write_end_C();
2003270c:	b0000000 	imm	0
20032710:	e8740968 	lwi	r3, r20, 2408
20032714:	99fc1800 	brald	r15, r3
20032718:	80000000 	or	r0, r0, r0
		
		
		return i;
2003271c:	e873001c 	lwi	r3, r19, 28
	}
20032720:	e9e10000 	lwi	r15, r1, 0
20032724:	10330000 	addk	r1, r19, r0
20032728:	ea61003c 	lwi	r19, r1, 60
2003272c:	ea810040 	lwi	r20, r1, 64
20032730:	30210044 	addik	r1, r1, 68
20032734:	b60f0008 	rtsd	r15, 8
20032738:	80000000 	or	r0, r0, r0

2003273c <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003273c:	3021fff4 	addik	r1, r1, -12
20032740:	fa610004 	swi	r19, r1, 4
20032744:	fa810008 	swi	r20, r1, 8
20032748:	12610000 	addk	r19, r1, r0
2003274c:	96808000 	mfs	r20, rpc
20032750:	b000dffc 	imm	-8196
20032754:	3294f210 	addik	r20, r20, -3568
20032758:	f8b30010 	swi	r5, r19, 16
2003275c:	f8d30014 	swi	r6, r19, 20
20032760:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20032764:	e8730010 	lwi	r3, r19, 16
20032768:	e8630010 	lwi	r3, r3, 16
2003276c:	e8830000 	lwi	r4, r3, 0
20032770:	e8730010 	lwi	r3, r19, 16
20032774:	e8a3000c 	lwi	r5, r3, 12
20032778:	e8730014 	lwi	r3, r19, 20
2003277c:	64630402 	bslli	r3, r3, 2
20032780:	10651800 	addk	r3, r5, r3
20032784:	e8630000 	lwi	r3, r3, 0
20032788:	14a32000 	rsubk	r5, r3, r4
2003278c:	30600001 	addik	r3, r0, 1
20032790:	e8930018 	lwi	r4, r19, 24
20032794:	16442803 	cmpu	r18, r4, r5
20032798:	bcb20008 	bgei	r18, 8		// 200327a0
2003279c:	10600000 	addk	r3, r0, r0
200327a0:	a46300ff 	andi	r3, r3, 255
}
200327a4:	10330000 	addk	r1, r19, r0
200327a8:	ea610004 	lwi	r19, r1, 4
200327ac:	ea810008 	lwi	r20, r1, 8
200327b0:	3021000c 	addik	r1, r1, 12
200327b4:	b60f0008 	rtsd	r15, 8
200327b8:	80000000 	or	r0, r0, r0

200327bc <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200327bc:	3021fff4 	addik	r1, r1, -12
200327c0:	fa610004 	swi	r19, r1, 4
200327c4:	fa810008 	swi	r20, r1, 8
200327c8:	12610000 	addk	r19, r1, r0
200327cc:	96808000 	mfs	r20, rpc
200327d0:	b000dffc 	imm	-8196
200327d4:	3294f190 	addik	r20, r20, -3696
200327d8:	f8b30010 	swi	r5, r19, 16
200327dc:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200327e0:	e8730010 	lwi	r3, r19, 16
200327e4:	e8630010 	lwi	r3, r3, 16
200327e8:	e8830000 	lwi	r4, r3, 0
200327ec:	e8730010 	lwi	r3, r19, 16
200327f0:	e8a3000c 	lwi	r5, r3, 12
200327f4:	e8730014 	lwi	r3, r19, 20
200327f8:	64630402 	bslli	r3, r3, 2
200327fc:	10651800 	addk	r3, r5, r3
20032800:	e8630000 	lwi	r3, r3, 0
20032804:	14632000 	rsubk	r3, r3, r4
}
20032808:	10330000 	addk	r1, r19, r0
2003280c:	ea610004 	lwi	r19, r1, 4
20032810:	ea810008 	lwi	r20, r1, 8
20032814:	3021000c 	addik	r1, r1, 12
20032818:	b60f0008 	rtsd	r15, 8
2003281c:	80000000 	or	r0, r0, r0

20032820 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20032820:	3021fff0 	addik	r1, r1, -16
20032824:	fa610008 	swi	r19, r1, 8
20032828:	fa81000c 	swi	r20, r1, 12
2003282c:	12610000 	addk	r19, r1, r0
20032830:	96808000 	mfs	r20, rpc
20032834:	b000dffc 	imm	-8196
20032838:	3294f12c 	addik	r20, r20, -3796
2003283c:	f8b30014 	swi	r5, r19, 20
20032840:	f8d30018 	swi	r6, r19, 24
20032844:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20032848:	f8130004 	swi	r0, r19, 4
2003284c:	b800005c 	bri	92		// 200328a8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20032850:	e8730014 	lwi	r3, r19, 20
20032854:	e8830000 	lwi	r4, r3, 0
20032858:	e8730014 	lwi	r3, r19, 20
2003285c:	e8a3000c 	lwi	r5, r3, 12
20032860:	e8730004 	lwi	r3, r19, 4
20032864:	64630402 	bslli	r3, r3, 2
20032868:	10651800 	addk	r3, r5, r3
2003286c:	e8a30000 	lwi	r5, r3, 0
20032870:	e8730014 	lwi	r3, r19, 20
20032874:	e8630010 	lwi	r3, r3, 16
20032878:	e8630000 	lwi	r3, r3, 0
2003287c:	14632800 	rsubk	r3, r3, r5
20032880:	10641800 	addk	r3, r4, r3
20032884:	30830001 	addik	r4, r3, 1
20032888:	e873001c 	lwi	r3, r19, 28
2003288c:	16441803 	cmpu	r18, r4, r3
20032890:	bc52000c 	blti	r18, 12		// 2003289c
            return 0;
20032894:	10600000 	addk	r3, r0, r0
20032898:	b8000024 	bri	36		// 200328bc
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003289c:	e8730004 	lwi	r3, r19, 4
200328a0:	30630001 	addik	r3, r3, 1
200328a4:	f8730004 	swi	r3, r19, 4
200328a8:	e8930004 	lwi	r4, r19, 4
200328ac:	e8730018 	lwi	r3, r19, 24
200328b0:	16432003 	cmpu	r18, r3, r4
200328b4:	bc52ff9c 	blti	r18, -100		// 20032850
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200328b8:	30600001 	addik	r3, r0, 1
}
200328bc:	10330000 	addk	r1, r19, r0
200328c0:	ea610008 	lwi	r19, r1, 8
200328c4:	ea81000c 	lwi	r20, r1, 12
200328c8:	30210010 	addik	r1, r1, 16
200328cc:	b60f0008 	rtsd	r15, 8
200328d0:	80000000 	or	r0, r0, r0

200328d4 <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200328d4:	3021ffe8 	addik	r1, r1, -24
200328d8:	fa610010 	swi	r19, r1, 16
200328dc:	fa810014 	swi	r20, r1, 20
200328e0:	12610000 	addk	r19, r1, r0
200328e4:	96808000 	mfs	r20, rpc
200328e8:	b000dffc 	imm	-8196
200328ec:	3294f078 	addik	r20, r20, -3976
200328f0:	f8b3001c 	swi	r5, r19, 28
200328f4:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
200328f8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200328fc:	f8130004 	swi	r0, r19, 4
20032900:	b8000054 	bri	84		// 20032954
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20032904:	e873001c 	lwi	r3, r19, 28
20032908:	e8630010 	lwi	r3, r3, 16
2003290c:	e8830000 	lwi	r4, r3, 0
20032910:	e873001c 	lwi	r3, r19, 28
20032914:	e8a3000c 	lwi	r5, r3, 12
20032918:	e8730004 	lwi	r3, r19, 4
2003291c:	64630402 	bslli	r3, r3, 2
20032920:	10651800 	addk	r3, r5, r3
20032924:	e8630000 	lwi	r3, r3, 0
20032928:	14632000 	rsubk	r3, r3, r4
2003292c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20032930:	e8930008 	lwi	r4, r19, 8
20032934:	e873000c 	lwi	r3, r19, 12
20032938:	16441803 	cmpu	r18, r4, r3
2003293c:	bcb20008 	bgei	r18, 8		// 20032944
20032940:	10640000 	addk	r3, r4, r0
20032944:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20032948:	e8730004 	lwi	r3, r19, 4
2003294c:	30630001 	addik	r3, r3, 1
20032950:	f8730004 	swi	r3, r19, 4
20032954:	e8930004 	lwi	r4, r19, 4
20032958:	e8730020 	lwi	r3, r19, 32
2003295c:	16432003 	cmpu	r18, r3, r4
20032960:	bc52ffa4 	blti	r18, -92		// 20032904
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20032964:	e873001c 	lwi	r3, r19, 28
20032968:	e8830000 	lwi	r4, r3, 0
2003296c:	e8730008 	lwi	r3, r19, 8
20032970:	14632000 	rsubk	r3, r3, r4
}
20032974:	10330000 	addk	r1, r19, r0
20032978:	ea610010 	lwi	r19, r1, 16
2003297c:	ea810014 	lwi	r20, r1, 20
20032980:	30210018 	addik	r1, r1, 24
20032984:	b60f0008 	rtsd	r15, 8
20032988:	80000000 	or	r0, r0, r0

2003298c <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003298c:	3021fff0 	addik	r1, r1, -16
20032990:	fa610008 	swi	r19, r1, 8
20032994:	fa81000c 	swi	r20, r1, 12
20032998:	12610000 	addk	r19, r1, r0
2003299c:	96808000 	mfs	r20, rpc
200329a0:	b000dffc 	imm	-8196
200329a4:	3294efc0 	addik	r20, r20, -4160
200329a8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200329ac:	e8730014 	lwi	r3, r19, 20
200329b0:	e8630010 	lwi	r3, r3, 16
200329b4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200329b8:	f8130004 	swi	r0, r19, 4
200329bc:	b8000028 	bri	40		// 200329e4
        fifo->read_inds[i] = 0;
200329c0:	e8730014 	lwi	r3, r19, 20
200329c4:	e883000c 	lwi	r4, r3, 12
200329c8:	e8730004 	lwi	r3, r19, 4
200329cc:	64630402 	bslli	r3, r3, 2
200329d0:	10641800 	addk	r3, r4, r3
200329d4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200329d8:	e8730004 	lwi	r3, r19, 4
200329dc:	30630001 	addik	r3, r3, 1
200329e0:	f8730004 	swi	r3, r19, 4
200329e4:	e8730014 	lwi	r3, r19, 20
200329e8:	e8830008 	lwi	r4, r3, 8
200329ec:	e8730004 	lwi	r3, r19, 4
200329f0:	16441803 	cmpu	r18, r4, r3
200329f4:	bc52ffcc 	blti	r18, -52		// 200329c0
        fifo->read_inds[i] = 0;
    }
}
200329f8:	10330000 	addk	r1, r19, r0
200329fc:	ea610008 	lwi	r19, r1, 8
20032a00:	ea81000c 	lwi	r20, r1, 12
20032a04:	30210010 	addik	r1, r1, 16
20032a08:	b60f0008 	rtsd	r15, 8
20032a0c:	80000000 	or	r0, r0, r0

20032a10 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20032a10:	3021fff0 	addik	r1, r1, -16
20032a14:	fa610008 	swi	r19, r1, 8
20032a18:	fa81000c 	swi	r20, r1, 12
20032a1c:	12610000 	addk	r19, r1, r0
20032a20:	96808000 	mfs	r20, rpc
20032a24:	b000dffc 	imm	-8196
20032a28:	3294ef3c 	addik	r20, r20, -4292
20032a2c:	f8b30014 	swi	r5, r19, 20
20032a30:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20032a34:	e8730014 	lwi	r3, r19, 20
20032a38:	e8830004 	lwi	r4, r3, 4
20032a3c:	e8730014 	lwi	r3, r19, 20
20032a40:	e8a3000c 	lwi	r5, r3, 12
20032a44:	e8730018 	lwi	r3, r19, 24
20032a48:	64630402 	bslli	r3, r3, 2
20032a4c:	10651800 	addk	r3, r5, r3
20032a50:	e8a30000 	lwi	r5, r3, 0
20032a54:	e8730014 	lwi	r3, r19, 20
20032a58:	e8630000 	lwi	r3, r3, 0
20032a5c:	3063ffff 	addik	r3, r3, -1
20032a60:	84651800 	and	r3, r5, r3
20032a64:	10641800 	addk	r3, r4, r3
20032a68:	e0630000 	lbui	r3, r3, 0
20032a6c:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20032a70:	e8730014 	lwi	r3, r19, 20
20032a74:	e883000c 	lwi	r4, r3, 12
20032a78:	e8730018 	lwi	r3, r19, 24
20032a7c:	64630402 	bslli	r3, r3, 2
20032a80:	10641800 	addk	r3, r4, r3
20032a84:	e8830000 	lwi	r4, r3, 0
20032a88:	30840001 	addik	r4, r4, 1
20032a8c:	f8830000 	swi	r4, r3, 0
    return value;
20032a90:	e0730004 	lbui	r3, r19, 4
20032a94:	90630060 	sext8	r3, r3
}
20032a98:	10330000 	addk	r1, r19, r0
20032a9c:	ea610008 	lwi	r19, r1, 8
20032aa0:	ea81000c 	lwi	r20, r1, 12
20032aa4:	30210010 	addik	r1, r1, 16
20032aa8:	b60f0008 	rtsd	r15, 8
20032aac:	80000000 	or	r0, r0, r0

20032ab0 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20032ab0:	3021fff4 	addik	r1, r1, -12
20032ab4:	fa610004 	swi	r19, r1, 4
20032ab8:	fa810008 	swi	r20, r1, 8
20032abc:	12610000 	addk	r19, r1, r0
20032ac0:	96808000 	mfs	r20, rpc
20032ac4:	b000dffc 	imm	-8196
20032ac8:	3294ee9c 	addik	r20, r20, -4452
20032acc:	f8b30010 	swi	r5, r19, 16
20032ad0:	10660000 	addk	r3, r6, r0
20032ad4:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20032ad8:	e8730010 	lwi	r3, r19, 16
20032adc:	e8830004 	lwi	r4, r3, 4
20032ae0:	e8730010 	lwi	r3, r19, 16
20032ae4:	e8630010 	lwi	r3, r3, 16
20032ae8:	e8a30000 	lwi	r5, r3, 0
20032aec:	e8730010 	lwi	r3, r19, 16
20032af0:	e8630000 	lwi	r3, r3, 0
20032af4:	3063ffff 	addik	r3, r3, -1
20032af8:	84651800 	and	r3, r5, r3
20032afc:	10641800 	addk	r3, r4, r3
20032b00:	e0930014 	lbui	r4, r19, 20
20032b04:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20032b08:	e8730010 	lwi	r3, r19, 16
20032b0c:	e8630010 	lwi	r3, r3, 16
20032b10:	e8830000 	lwi	r4, r3, 0
20032b14:	30840001 	addik	r4, r4, 1
20032b18:	f8830000 	swi	r4, r3, 0
}
20032b1c:	10330000 	addk	r1, r19, r0
20032b20:	ea610004 	lwi	r19, r1, 4
20032b24:	ea810008 	lwi	r20, r1, 8
20032b28:	3021000c 	addik	r1, r1, 12
20032b2c:	b60f0008 	rtsd	r15, 8
20032b30:	80000000 	or	r0, r0, r0

20032b34 <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20032b34:	3021fff4 	addik	r1, r1, -12
20032b38:	fa610004 	swi	r19, r1, 4
20032b3c:	fa810008 	swi	r20, r1, 8
20032b40:	12610000 	addk	r19, r1, r0
20032b44:	96808000 	mfs	r20, rpc
20032b48:	b000dffc 	imm	-8196
20032b4c:	3294ee18 	addik	r20, r20, -4584
20032b50:	f8b30010 	swi	r5, r19, 16
20032b54:	f8d30014 	swi	r6, r19, 20
20032b58:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20032b5c:	e8730010 	lwi	r3, r19, 16
20032b60:	e8630010 	lwi	r3, r3, 16
20032b64:	e8830000 	lwi	r4, r3, 0
20032b68:	e8730010 	lwi	r3, r19, 16
20032b6c:	e8a3000c 	lwi	r5, r3, 12
20032b70:	e8730014 	lwi	r3, r19, 20
20032b74:	64630402 	bslli	r3, r3, 2
20032b78:	10651800 	addk	r3, r5, r3
20032b7c:	e8630000 	lwi	r3, r3, 0
20032b80:	14a32000 	rsubk	r5, r3, r4
20032b84:	30600001 	addik	r3, r0, 1
20032b88:	e8930018 	lwi	r4, r19, 24
20032b8c:	16442803 	cmpu	r18, r4, r5
20032b90:	bcb20008 	bgei	r18, 8		// 20032b98
20032b94:	10600000 	addk	r3, r0, r0
20032b98:	a46300ff 	andi	r3, r3, 255
}
20032b9c:	10330000 	addk	r1, r19, r0
20032ba0:	ea610004 	lwi	r19, r1, 4
20032ba4:	ea810008 	lwi	r20, r1, 8
20032ba8:	3021000c 	addik	r1, r1, 12
20032bac:	b60f0008 	rtsd	r15, 8
20032bb0:	80000000 	or	r0, r0, r0

20032bb4 <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20032bb4:	3021fff4 	addik	r1, r1, -12
20032bb8:	fa610004 	swi	r19, r1, 4
20032bbc:	fa810008 	swi	r20, r1, 8
20032bc0:	12610000 	addk	r19, r1, r0
20032bc4:	96808000 	mfs	r20, rpc
20032bc8:	b000dffc 	imm	-8196
20032bcc:	3294ed98 	addik	r20, r20, -4712
20032bd0:	f8b30010 	swi	r5, r19, 16
20032bd4:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20032bd8:	e8730010 	lwi	r3, r19, 16
20032bdc:	e8630010 	lwi	r3, r3, 16
20032be0:	e8830000 	lwi	r4, r3, 0
20032be4:	e8730010 	lwi	r3, r19, 16
20032be8:	e8a3000c 	lwi	r5, r3, 12
20032bec:	e8730014 	lwi	r3, r19, 20
20032bf0:	64630402 	bslli	r3, r3, 2
20032bf4:	10651800 	addk	r3, r5, r3
20032bf8:	e8630000 	lwi	r3, r3, 0
20032bfc:	14632000 	rsubk	r3, r3, r4
}
20032c00:	10330000 	addk	r1, r19, r0
20032c04:	ea610004 	lwi	r19, r1, 4
20032c08:	ea810008 	lwi	r20, r1, 8
20032c0c:	3021000c 	addik	r1, r1, 12
20032c10:	b60f0008 	rtsd	r15, 8
20032c14:	80000000 	or	r0, r0, r0

20032c18 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20032c18:	3021fff0 	addik	r1, r1, -16
20032c1c:	fa610008 	swi	r19, r1, 8
20032c20:	fa81000c 	swi	r20, r1, 12
20032c24:	12610000 	addk	r19, r1, r0
20032c28:	96808000 	mfs	r20, rpc
20032c2c:	b000dffc 	imm	-8196
20032c30:	3294ed34 	addik	r20, r20, -4812
20032c34:	f8b30014 	swi	r5, r19, 20
20032c38:	f8d30018 	swi	r6, r19, 24
20032c3c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20032c40:	f8130004 	swi	r0, r19, 4
20032c44:	b800005c 	bri	92		// 20032ca0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20032c48:	e8730014 	lwi	r3, r19, 20
20032c4c:	e8830000 	lwi	r4, r3, 0
20032c50:	e8730014 	lwi	r3, r19, 20
20032c54:	e8a3000c 	lwi	r5, r3, 12
20032c58:	e8730004 	lwi	r3, r19, 4
20032c5c:	64630402 	bslli	r3, r3, 2
20032c60:	10651800 	addk	r3, r5, r3
20032c64:	e8a30000 	lwi	r5, r3, 0
20032c68:	e8730014 	lwi	r3, r19, 20
20032c6c:	e8630010 	lwi	r3, r3, 16
20032c70:	e8630000 	lwi	r3, r3, 0
20032c74:	14632800 	rsubk	r3, r3, r5
20032c78:	10641800 	addk	r3, r4, r3
20032c7c:	30830001 	addik	r4, r3, 1
20032c80:	e873001c 	lwi	r3, r19, 28
20032c84:	16441803 	cmpu	r18, r4, r3
20032c88:	bc52000c 	blti	r18, 12		// 20032c94
            return 0;
20032c8c:	10600000 	addk	r3, r0, r0
20032c90:	b8000024 	bri	36		// 20032cb4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20032c94:	e8730004 	lwi	r3, r19, 4
20032c98:	30630001 	addik	r3, r3, 1
20032c9c:	f8730004 	swi	r3, r19, 4
20032ca0:	e8930004 	lwi	r4, r19, 4
20032ca4:	e8730018 	lwi	r3, r19, 24
20032ca8:	16432003 	cmpu	r18, r3, r4
20032cac:	bc52ff9c 	blti	r18, -100		// 20032c48
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20032cb0:	30600001 	addik	r3, r0, 1
}
20032cb4:	10330000 	addk	r1, r19, r0
20032cb8:	ea610008 	lwi	r19, r1, 8
20032cbc:	ea81000c 	lwi	r20, r1, 12
20032cc0:	30210010 	addik	r1, r1, 16
20032cc4:	b60f0008 	rtsd	r15, 8
20032cc8:	80000000 	or	r0, r0, r0

20032ccc <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20032ccc:	3021ffe8 	addik	r1, r1, -24
20032cd0:	fa610010 	swi	r19, r1, 16
20032cd4:	fa810014 	swi	r20, r1, 20
20032cd8:	12610000 	addk	r19, r1, r0
20032cdc:	96808000 	mfs	r20, rpc
20032ce0:	b000dffc 	imm	-8196
20032ce4:	3294ec80 	addik	r20, r20, -4992
20032ce8:	f8b3001c 	swi	r5, r19, 28
20032cec:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20032cf0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20032cf4:	f8130004 	swi	r0, r19, 4
20032cf8:	b8000054 	bri	84		// 20032d4c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20032cfc:	e873001c 	lwi	r3, r19, 28
20032d00:	e8630010 	lwi	r3, r3, 16
20032d04:	e8830000 	lwi	r4, r3, 0
20032d08:	e873001c 	lwi	r3, r19, 28
20032d0c:	e8a3000c 	lwi	r5, r3, 12
20032d10:	e8730004 	lwi	r3, r19, 4
20032d14:	64630402 	bslli	r3, r3, 2
20032d18:	10651800 	addk	r3, r5, r3
20032d1c:	e8630000 	lwi	r3, r3, 0
20032d20:	14632000 	rsubk	r3, r3, r4
20032d24:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20032d28:	e8930008 	lwi	r4, r19, 8
20032d2c:	e873000c 	lwi	r3, r19, 12
20032d30:	16441803 	cmpu	r18, r4, r3
20032d34:	bcb20008 	bgei	r18, 8		// 20032d3c
20032d38:	10640000 	addk	r3, r4, r0
20032d3c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20032d40:	e8730004 	lwi	r3, r19, 4
20032d44:	30630001 	addik	r3, r3, 1
20032d48:	f8730004 	swi	r3, r19, 4
20032d4c:	e8930004 	lwi	r4, r19, 4
20032d50:	e8730020 	lwi	r3, r19, 32
20032d54:	16432003 	cmpu	r18, r3, r4
20032d58:	bc52ffa4 	blti	r18, -92		// 20032cfc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20032d5c:	e873001c 	lwi	r3, r19, 28
20032d60:	e8830000 	lwi	r4, r3, 0
20032d64:	e8730008 	lwi	r3, r19, 8
20032d68:	14632000 	rsubk	r3, r3, r4
}
20032d6c:	10330000 	addk	r1, r19, r0
20032d70:	ea610010 	lwi	r19, r1, 16
20032d74:	ea810014 	lwi	r20, r1, 20
20032d78:	30210018 	addik	r1, r1, 24
20032d7c:	b60f0008 	rtsd	r15, 8
20032d80:	80000000 	or	r0, r0, r0

20032d84 <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20032d84:	3021fff0 	addik	r1, r1, -16
20032d88:	fa610008 	swi	r19, r1, 8
20032d8c:	fa81000c 	swi	r20, r1, 12
20032d90:	12610000 	addk	r19, r1, r0
20032d94:	96808000 	mfs	r20, rpc
20032d98:	b000dffc 	imm	-8196
20032d9c:	3294ebc8 	addik	r20, r20, -5176
20032da0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20032da4:	e8730014 	lwi	r3, r19, 20
20032da8:	e8630010 	lwi	r3, r3, 16
20032dac:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20032db0:	f8130004 	swi	r0, r19, 4
20032db4:	b8000028 	bri	40		// 20032ddc
        fifo->read_inds[i] = 0;
20032db8:	e8730014 	lwi	r3, r19, 20
20032dbc:	e883000c 	lwi	r4, r3, 12
20032dc0:	e8730004 	lwi	r3, r19, 4
20032dc4:	64630402 	bslli	r3, r3, 2
20032dc8:	10641800 	addk	r3, r4, r3
20032dcc:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20032dd0:	e8730004 	lwi	r3, r19, 4
20032dd4:	30630001 	addik	r3, r3, 1
20032dd8:	f8730004 	swi	r3, r19, 4
20032ddc:	e8730014 	lwi	r3, r19, 20
20032de0:	e8830008 	lwi	r4, r3, 8
20032de4:	e8730004 	lwi	r3, r19, 4
20032de8:	16441803 	cmpu	r18, r4, r3
20032dec:	bc52ffcc 	blti	r18, -52		// 20032db8
        fifo->read_inds[i] = 0;
    }
}
20032df0:	10330000 	addk	r1, r19, r0
20032df4:	ea610008 	lwi	r19, r1, 8
20032df8:	ea81000c 	lwi	r20, r1, 12
20032dfc:	30210010 	addik	r1, r1, 16
20032e00:	b60f0008 	rtsd	r15, 8
20032e04:	80000000 	or	r0, r0, r0

20032e08 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20032e08:	3021fff0 	addik	r1, r1, -16
20032e0c:	fa610008 	swi	r19, r1, 8
20032e10:	fa81000c 	swi	r20, r1, 12
20032e14:	12610000 	addk	r19, r1, r0
20032e18:	96808000 	mfs	r20, rpc
20032e1c:	b000dffc 	imm	-8196
20032e20:	3294eb44 	addik	r20, r20, -5308
20032e24:	f8b30014 	swi	r5, r19, 20
20032e28:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20032e2c:	e8730014 	lwi	r3, r19, 20
20032e30:	e8830004 	lwi	r4, r3, 4
20032e34:	e8730014 	lwi	r3, r19, 20
20032e38:	e8a3000c 	lwi	r5, r3, 12
20032e3c:	e8730018 	lwi	r3, r19, 24
20032e40:	64630402 	bslli	r3, r3, 2
20032e44:	10651800 	addk	r3, r5, r3
20032e48:	e8a30000 	lwi	r5, r3, 0
20032e4c:	e8730014 	lwi	r3, r19, 20
20032e50:	e8630000 	lwi	r3, r3, 0
20032e54:	3063ffff 	addik	r3, r3, -1
20032e58:	84651800 	and	r3, r5, r3
20032e5c:	10631800 	addk	r3, r3, r3
20032e60:	10641800 	addk	r3, r4, r3
20032e64:	e4630000 	lhui	r3, r3, 0
20032e68:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20032e6c:	e8730014 	lwi	r3, r19, 20
20032e70:	e883000c 	lwi	r4, r3, 12
20032e74:	e8730018 	lwi	r3, r19, 24
20032e78:	64630402 	bslli	r3, r3, 2
20032e7c:	10641800 	addk	r3, r4, r3
20032e80:	e8830000 	lwi	r4, r3, 0
20032e84:	30840001 	addik	r4, r4, 1
20032e88:	f8830000 	swi	r4, r3, 0
    return value;
20032e8c:	e4730004 	lhui	r3, r19, 4
20032e90:	90630061 	sext16	r3, r3
}
20032e94:	10330000 	addk	r1, r19, r0
20032e98:	ea610008 	lwi	r19, r1, 8
20032e9c:	ea81000c 	lwi	r20, r1, 12
20032ea0:	30210010 	addik	r1, r1, 16
20032ea4:	b60f0008 	rtsd	r15, 8
20032ea8:	80000000 	or	r0, r0, r0

20032eac <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20032eac:	3021fff4 	addik	r1, r1, -12
20032eb0:	fa610004 	swi	r19, r1, 4
20032eb4:	fa810008 	swi	r20, r1, 8
20032eb8:	12610000 	addk	r19, r1, r0
20032ebc:	96808000 	mfs	r20, rpc
20032ec0:	b000dffc 	imm	-8196
20032ec4:	3294eaa0 	addik	r20, r20, -5472
20032ec8:	f8b30010 	swi	r5, r19, 16
20032ecc:	10660000 	addk	r3, r6, r0
20032ed0:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20032ed4:	e8730010 	lwi	r3, r19, 16
20032ed8:	e8830004 	lwi	r4, r3, 4
20032edc:	e8730010 	lwi	r3, r19, 16
20032ee0:	e8630010 	lwi	r3, r3, 16
20032ee4:	e8a30000 	lwi	r5, r3, 0
20032ee8:	e8730010 	lwi	r3, r19, 16
20032eec:	e8630000 	lwi	r3, r3, 0
20032ef0:	3063ffff 	addik	r3, r3, -1
20032ef4:	84651800 	and	r3, r5, r3
20032ef8:	10631800 	addk	r3, r3, r3
20032efc:	10641800 	addk	r3, r4, r3
20032f00:	e4930014 	lhui	r4, r19, 20
20032f04:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20032f08:	e8730010 	lwi	r3, r19, 16
20032f0c:	e8630010 	lwi	r3, r3, 16
20032f10:	e8830000 	lwi	r4, r3, 0
20032f14:	30840001 	addik	r4, r4, 1
20032f18:	f8830000 	swi	r4, r3, 0
}
20032f1c:	10330000 	addk	r1, r19, r0
20032f20:	ea610004 	lwi	r19, r1, 4
20032f24:	ea810008 	lwi	r20, r1, 8
20032f28:	3021000c 	addik	r1, r1, 12
20032f2c:	b60f0008 	rtsd	r15, 8
20032f30:	80000000 	or	r0, r0, r0

20032f34 <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20032f34:	3021fff4 	addik	r1, r1, -12
20032f38:	fa610004 	swi	r19, r1, 4
20032f3c:	fa810008 	swi	r20, r1, 8
20032f40:	12610000 	addk	r19, r1, r0
20032f44:	96808000 	mfs	r20, rpc
20032f48:	b000dffc 	imm	-8196
20032f4c:	3294ea18 	addik	r20, r20, -5608
20032f50:	f8b30010 	swi	r5, r19, 16
20032f54:	f8d30014 	swi	r6, r19, 20
20032f58:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20032f5c:	e8730010 	lwi	r3, r19, 16
20032f60:	e8630010 	lwi	r3, r3, 16
20032f64:	e8830000 	lwi	r4, r3, 0
20032f68:	e8730010 	lwi	r3, r19, 16
20032f6c:	e8a3000c 	lwi	r5, r3, 12
20032f70:	e8730014 	lwi	r3, r19, 20
20032f74:	64630402 	bslli	r3, r3, 2
20032f78:	10651800 	addk	r3, r5, r3
20032f7c:	e8630000 	lwi	r3, r3, 0
20032f80:	14a32000 	rsubk	r5, r3, r4
20032f84:	30600001 	addik	r3, r0, 1
20032f88:	e8930018 	lwi	r4, r19, 24
20032f8c:	16442803 	cmpu	r18, r4, r5
20032f90:	bcb20008 	bgei	r18, 8		// 20032f98
20032f94:	10600000 	addk	r3, r0, r0
20032f98:	a46300ff 	andi	r3, r3, 255
}
20032f9c:	10330000 	addk	r1, r19, r0
20032fa0:	ea610004 	lwi	r19, r1, 4
20032fa4:	ea810008 	lwi	r20, r1, 8
20032fa8:	3021000c 	addik	r1, r1, 12
20032fac:	b60f0008 	rtsd	r15, 8
20032fb0:	80000000 	or	r0, r0, r0

20032fb4 <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20032fb4:	3021fff4 	addik	r1, r1, -12
20032fb8:	fa610004 	swi	r19, r1, 4
20032fbc:	fa810008 	swi	r20, r1, 8
20032fc0:	12610000 	addk	r19, r1, r0
20032fc4:	96808000 	mfs	r20, rpc
20032fc8:	b000dffc 	imm	-8196
20032fcc:	3294e998 	addik	r20, r20, -5736
20032fd0:	f8b30010 	swi	r5, r19, 16
20032fd4:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20032fd8:	e8730010 	lwi	r3, r19, 16
20032fdc:	e8630010 	lwi	r3, r3, 16
20032fe0:	e8830000 	lwi	r4, r3, 0
20032fe4:	e8730010 	lwi	r3, r19, 16
20032fe8:	e8a3000c 	lwi	r5, r3, 12
20032fec:	e8730014 	lwi	r3, r19, 20
20032ff0:	64630402 	bslli	r3, r3, 2
20032ff4:	10651800 	addk	r3, r5, r3
20032ff8:	e8630000 	lwi	r3, r3, 0
20032ffc:	14632000 	rsubk	r3, r3, r4
}
20033000:	10330000 	addk	r1, r19, r0
20033004:	ea610004 	lwi	r19, r1, 4
20033008:	ea810008 	lwi	r20, r1, 8
2003300c:	3021000c 	addik	r1, r1, 12
20033010:	b60f0008 	rtsd	r15, 8
20033014:	80000000 	or	r0, r0, r0

20033018 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20033018:	3021fff0 	addik	r1, r1, -16
2003301c:	fa610008 	swi	r19, r1, 8
20033020:	fa81000c 	swi	r20, r1, 12
20033024:	12610000 	addk	r19, r1, r0
20033028:	96808000 	mfs	r20, rpc
2003302c:	b000dffc 	imm	-8196
20033030:	3294e934 	addik	r20, r20, -5836
20033034:	f8b30014 	swi	r5, r19, 20
20033038:	f8d30018 	swi	r6, r19, 24
2003303c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20033040:	f8130004 	swi	r0, r19, 4
20033044:	b800005c 	bri	92		// 200330a0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20033048:	e8730014 	lwi	r3, r19, 20
2003304c:	e8830000 	lwi	r4, r3, 0
20033050:	e8730014 	lwi	r3, r19, 20
20033054:	e8a3000c 	lwi	r5, r3, 12
20033058:	e8730004 	lwi	r3, r19, 4
2003305c:	64630402 	bslli	r3, r3, 2
20033060:	10651800 	addk	r3, r5, r3
20033064:	e8a30000 	lwi	r5, r3, 0
20033068:	e8730014 	lwi	r3, r19, 20
2003306c:	e8630010 	lwi	r3, r3, 16
20033070:	e8630000 	lwi	r3, r3, 0
20033074:	14632800 	rsubk	r3, r3, r5
20033078:	10641800 	addk	r3, r4, r3
2003307c:	30830001 	addik	r4, r3, 1
20033080:	e873001c 	lwi	r3, r19, 28
20033084:	16441803 	cmpu	r18, r4, r3
20033088:	bc52000c 	blti	r18, 12		// 20033094
            return 0;
2003308c:	10600000 	addk	r3, r0, r0
20033090:	b8000024 	bri	36		// 200330b4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20033094:	e8730004 	lwi	r3, r19, 4
20033098:	30630001 	addik	r3, r3, 1
2003309c:	f8730004 	swi	r3, r19, 4
200330a0:	e8930004 	lwi	r4, r19, 4
200330a4:	e8730018 	lwi	r3, r19, 24
200330a8:	16432003 	cmpu	r18, r3, r4
200330ac:	bc52ff9c 	blti	r18, -100		// 20033048
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200330b0:	30600001 	addik	r3, r0, 1
}
200330b4:	10330000 	addk	r1, r19, r0
200330b8:	ea610008 	lwi	r19, r1, 8
200330bc:	ea81000c 	lwi	r20, r1, 12
200330c0:	30210010 	addik	r1, r1, 16
200330c4:	b60f0008 	rtsd	r15, 8
200330c8:	80000000 	or	r0, r0, r0

200330cc <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200330cc:	3021ffe8 	addik	r1, r1, -24
200330d0:	fa610010 	swi	r19, r1, 16
200330d4:	fa810014 	swi	r20, r1, 20
200330d8:	12610000 	addk	r19, r1, r0
200330dc:	96808000 	mfs	r20, rpc
200330e0:	b000dffc 	imm	-8196
200330e4:	3294e880 	addik	r20, r20, -6016
200330e8:	f8b3001c 	swi	r5, r19, 28
200330ec:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
200330f0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200330f4:	f8130004 	swi	r0, r19, 4
200330f8:	b8000054 	bri	84		// 2003314c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200330fc:	e873001c 	lwi	r3, r19, 28
20033100:	e8630010 	lwi	r3, r3, 16
20033104:	e8830000 	lwi	r4, r3, 0
20033108:	e873001c 	lwi	r3, r19, 28
2003310c:	e8a3000c 	lwi	r5, r3, 12
20033110:	e8730004 	lwi	r3, r19, 4
20033114:	64630402 	bslli	r3, r3, 2
20033118:	10651800 	addk	r3, r5, r3
2003311c:	e8630000 	lwi	r3, r3, 0
20033120:	14632000 	rsubk	r3, r3, r4
20033124:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20033128:	e8930008 	lwi	r4, r19, 8
2003312c:	e873000c 	lwi	r3, r19, 12
20033130:	16441803 	cmpu	r18, r4, r3
20033134:	bcb20008 	bgei	r18, 8		// 2003313c
20033138:	10640000 	addk	r3, r4, r0
2003313c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20033140:	e8730004 	lwi	r3, r19, 4
20033144:	30630001 	addik	r3, r3, 1
20033148:	f8730004 	swi	r3, r19, 4
2003314c:	e8930004 	lwi	r4, r19, 4
20033150:	e8730020 	lwi	r3, r19, 32
20033154:	16432003 	cmpu	r18, r3, r4
20033158:	bc52ffa4 	blti	r18, -92		// 200330fc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003315c:	e873001c 	lwi	r3, r19, 28
20033160:	e8830000 	lwi	r4, r3, 0
20033164:	e8730008 	lwi	r3, r19, 8
20033168:	14632000 	rsubk	r3, r3, r4
}
2003316c:	10330000 	addk	r1, r19, r0
20033170:	ea610010 	lwi	r19, r1, 16
20033174:	ea810014 	lwi	r20, r1, 20
20033178:	30210018 	addik	r1, r1, 24
2003317c:	b60f0008 	rtsd	r15, 8
20033180:	80000000 	or	r0, r0, r0

20033184 <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20033184:	3021fff0 	addik	r1, r1, -16
20033188:	fa610008 	swi	r19, r1, 8
2003318c:	fa81000c 	swi	r20, r1, 12
20033190:	12610000 	addk	r19, r1, r0
20033194:	96808000 	mfs	r20, rpc
20033198:	b000dffc 	imm	-8196
2003319c:	3294e7c8 	addik	r20, r20, -6200
200331a0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200331a4:	e8730014 	lwi	r3, r19, 20
200331a8:	e8630010 	lwi	r3, r3, 16
200331ac:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200331b0:	f8130004 	swi	r0, r19, 4
200331b4:	b8000028 	bri	40		// 200331dc
        fifo->read_inds[i] = 0;
200331b8:	e8730014 	lwi	r3, r19, 20
200331bc:	e883000c 	lwi	r4, r3, 12
200331c0:	e8730004 	lwi	r3, r19, 4
200331c4:	64630402 	bslli	r3, r3, 2
200331c8:	10641800 	addk	r3, r4, r3
200331cc:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200331d0:	e8730004 	lwi	r3, r19, 4
200331d4:	30630001 	addik	r3, r3, 1
200331d8:	f8730004 	swi	r3, r19, 4
200331dc:	e8730014 	lwi	r3, r19, 20
200331e0:	e8830008 	lwi	r4, r3, 8
200331e4:	e8730004 	lwi	r3, r19, 4
200331e8:	16441803 	cmpu	r18, r4, r3
200331ec:	bc52ffcc 	blti	r18, -52		// 200331b8
        fifo->read_inds[i] = 0;
    }
}
200331f0:	10330000 	addk	r1, r19, r0
200331f4:	ea610008 	lwi	r19, r1, 8
200331f8:	ea81000c 	lwi	r20, r1, 12
200331fc:	30210010 	addik	r1, r1, 16
20033200:	b60f0008 	rtsd	r15, 8
20033204:	80000000 	or	r0, r0, r0

20033208 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20033208:	3021fff0 	addik	r1, r1, -16
2003320c:	fa610008 	swi	r19, r1, 8
20033210:	fa81000c 	swi	r20, r1, 12
20033214:	12610000 	addk	r19, r1, r0
20033218:	96808000 	mfs	r20, rpc
2003321c:	b000dffc 	imm	-8196
20033220:	3294e744 	addik	r20, r20, -6332
20033224:	f8b30014 	swi	r5, r19, 20
20033228:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003322c:	e8730014 	lwi	r3, r19, 20
20033230:	e8830004 	lwi	r4, r3, 4
20033234:	e8730014 	lwi	r3, r19, 20
20033238:	e8a3000c 	lwi	r5, r3, 12
2003323c:	e8730018 	lwi	r3, r19, 24
20033240:	64630402 	bslli	r3, r3, 2
20033244:	10651800 	addk	r3, r5, r3
20033248:	e8a30000 	lwi	r5, r3, 0
2003324c:	e8730014 	lwi	r3, r19, 20
20033250:	e8630000 	lwi	r3, r3, 0
20033254:	3063ffff 	addik	r3, r3, -1
20033258:	84651800 	and	r3, r5, r3
2003325c:	64630402 	bslli	r3, r3, 2
20033260:	10641800 	addk	r3, r4, r3
20033264:	e8630000 	lwi	r3, r3, 0
20033268:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003326c:	e8730014 	lwi	r3, r19, 20
20033270:	e883000c 	lwi	r4, r3, 12
20033274:	e8730018 	lwi	r3, r19, 24
20033278:	64630402 	bslli	r3, r3, 2
2003327c:	10641800 	addk	r3, r4, r3
20033280:	e8830000 	lwi	r4, r3, 0
20033284:	30840001 	addik	r4, r4, 1
20033288:	f8830000 	swi	r4, r3, 0
    return value;
2003328c:	e8730004 	lwi	r3, r19, 4
}
20033290:	10330000 	addk	r1, r19, r0
20033294:	ea610008 	lwi	r19, r1, 8
20033298:	ea81000c 	lwi	r20, r1, 12
2003329c:	30210010 	addik	r1, r1, 16
200332a0:	b60f0008 	rtsd	r15, 8
200332a4:	80000000 	or	r0, r0, r0

200332a8 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200332a8:	3021fff4 	addik	r1, r1, -12
200332ac:	fa610004 	swi	r19, r1, 4
200332b0:	fa810008 	swi	r20, r1, 8
200332b4:	12610000 	addk	r19, r1, r0
200332b8:	96808000 	mfs	r20, rpc
200332bc:	b000dffc 	imm	-8196
200332c0:	3294e6a4 	addik	r20, r20, -6492
200332c4:	f8b30010 	swi	r5, r19, 16
200332c8:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200332cc:	e8730010 	lwi	r3, r19, 16
200332d0:	e8830004 	lwi	r4, r3, 4
200332d4:	e8730010 	lwi	r3, r19, 16
200332d8:	e8630010 	lwi	r3, r3, 16
200332dc:	e8a30000 	lwi	r5, r3, 0
200332e0:	e8730010 	lwi	r3, r19, 16
200332e4:	e8630000 	lwi	r3, r3, 0
200332e8:	3063ffff 	addik	r3, r3, -1
200332ec:	84651800 	and	r3, r5, r3
200332f0:	64630402 	bslli	r3, r3, 2
200332f4:	10641800 	addk	r3, r4, r3
200332f8:	e8930014 	lwi	r4, r19, 20
200332fc:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20033300:	e8730010 	lwi	r3, r19, 16
20033304:	e8630010 	lwi	r3, r3, 16
20033308:	e8830000 	lwi	r4, r3, 0
2003330c:	30840001 	addik	r4, r4, 1
20033310:	f8830000 	swi	r4, r3, 0
}
20033314:	10330000 	addk	r1, r19, r0
20033318:	ea610004 	lwi	r19, r1, 4
2003331c:	ea810008 	lwi	r20, r1, 8
20033320:	3021000c 	addik	r1, r1, 12
20033324:	b60f0008 	rtsd	r15, 8
20033328:	80000000 	or	r0, r0, r0

2003332c <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003332c:	3021fff4 	addik	r1, r1, -12
20033330:	fa610004 	swi	r19, r1, 4
20033334:	fa810008 	swi	r20, r1, 8
20033338:	12610000 	addk	r19, r1, r0
2003333c:	96808000 	mfs	r20, rpc
20033340:	b000dffc 	imm	-8196
20033344:	3294e620 	addik	r20, r20, -6624
20033348:	f8b30010 	swi	r5, r19, 16
2003334c:	f8d30014 	swi	r6, r19, 20
20033350:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20033354:	e8730010 	lwi	r3, r19, 16
20033358:	e8630010 	lwi	r3, r3, 16
2003335c:	e8830000 	lwi	r4, r3, 0
20033360:	e8730010 	lwi	r3, r19, 16
20033364:	e8a3000c 	lwi	r5, r3, 12
20033368:	e8730014 	lwi	r3, r19, 20
2003336c:	64630402 	bslli	r3, r3, 2
20033370:	10651800 	addk	r3, r5, r3
20033374:	e8630000 	lwi	r3, r3, 0
20033378:	14a32000 	rsubk	r5, r3, r4
2003337c:	30600001 	addik	r3, r0, 1
20033380:	e8930018 	lwi	r4, r19, 24
20033384:	16442803 	cmpu	r18, r4, r5
20033388:	bcb20008 	bgei	r18, 8		// 20033390
2003338c:	10600000 	addk	r3, r0, r0
20033390:	a46300ff 	andi	r3, r3, 255
}
20033394:	10330000 	addk	r1, r19, r0
20033398:	ea610004 	lwi	r19, r1, 4
2003339c:	ea810008 	lwi	r20, r1, 8
200333a0:	3021000c 	addik	r1, r1, 12
200333a4:	b60f0008 	rtsd	r15, 8
200333a8:	80000000 	or	r0, r0, r0

200333ac <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200333ac:	3021fff4 	addik	r1, r1, -12
200333b0:	fa610004 	swi	r19, r1, 4
200333b4:	fa810008 	swi	r20, r1, 8
200333b8:	12610000 	addk	r19, r1, r0
200333bc:	96808000 	mfs	r20, rpc
200333c0:	b000dffc 	imm	-8196
200333c4:	3294e5a0 	addik	r20, r20, -6752
200333c8:	f8b30010 	swi	r5, r19, 16
200333cc:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200333d0:	e8730010 	lwi	r3, r19, 16
200333d4:	e8630010 	lwi	r3, r3, 16
200333d8:	e8830000 	lwi	r4, r3, 0
200333dc:	e8730010 	lwi	r3, r19, 16
200333e0:	e8a3000c 	lwi	r5, r3, 12
200333e4:	e8730014 	lwi	r3, r19, 20
200333e8:	64630402 	bslli	r3, r3, 2
200333ec:	10651800 	addk	r3, r5, r3
200333f0:	e8630000 	lwi	r3, r3, 0
200333f4:	14632000 	rsubk	r3, r3, r4
}
200333f8:	10330000 	addk	r1, r19, r0
200333fc:	ea610004 	lwi	r19, r1, 4
20033400:	ea810008 	lwi	r20, r1, 8
20033404:	3021000c 	addik	r1, r1, 12
20033408:	b60f0008 	rtsd	r15, 8
2003340c:	80000000 	or	r0, r0, r0

20033410 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20033410:	3021fff0 	addik	r1, r1, -16
20033414:	fa610008 	swi	r19, r1, 8
20033418:	fa81000c 	swi	r20, r1, 12
2003341c:	12610000 	addk	r19, r1, r0
20033420:	96808000 	mfs	r20, rpc
20033424:	b000dffc 	imm	-8196
20033428:	3294e53c 	addik	r20, r20, -6852
2003342c:	f8b30014 	swi	r5, r19, 20
20033430:	f8d30018 	swi	r6, r19, 24
20033434:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20033438:	f8130004 	swi	r0, r19, 4
2003343c:	b800005c 	bri	92		// 20033498
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20033440:	e8730014 	lwi	r3, r19, 20
20033444:	e8830000 	lwi	r4, r3, 0
20033448:	e8730014 	lwi	r3, r19, 20
2003344c:	e8a3000c 	lwi	r5, r3, 12
20033450:	e8730004 	lwi	r3, r19, 4
20033454:	64630402 	bslli	r3, r3, 2
20033458:	10651800 	addk	r3, r5, r3
2003345c:	e8a30000 	lwi	r5, r3, 0
20033460:	e8730014 	lwi	r3, r19, 20
20033464:	e8630010 	lwi	r3, r3, 16
20033468:	e8630000 	lwi	r3, r3, 0
2003346c:	14632800 	rsubk	r3, r3, r5
20033470:	10641800 	addk	r3, r4, r3
20033474:	30830001 	addik	r4, r3, 1
20033478:	e873001c 	lwi	r3, r19, 28
2003347c:	16441803 	cmpu	r18, r4, r3
20033480:	bc52000c 	blti	r18, 12		// 2003348c
            return 0;
20033484:	10600000 	addk	r3, r0, r0
20033488:	b8000024 	bri	36		// 200334ac
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003348c:	e8730004 	lwi	r3, r19, 4
20033490:	30630001 	addik	r3, r3, 1
20033494:	f8730004 	swi	r3, r19, 4
20033498:	e8930004 	lwi	r4, r19, 4
2003349c:	e8730018 	lwi	r3, r19, 24
200334a0:	16432003 	cmpu	r18, r3, r4
200334a4:	bc52ff9c 	blti	r18, -100		// 20033440
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200334a8:	30600001 	addik	r3, r0, 1
}
200334ac:	10330000 	addk	r1, r19, r0
200334b0:	ea610008 	lwi	r19, r1, 8
200334b4:	ea81000c 	lwi	r20, r1, 12
200334b8:	30210010 	addik	r1, r1, 16
200334bc:	b60f0008 	rtsd	r15, 8
200334c0:	80000000 	or	r0, r0, r0

200334c4 <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200334c4:	3021ffe8 	addik	r1, r1, -24
200334c8:	fa610010 	swi	r19, r1, 16
200334cc:	fa810014 	swi	r20, r1, 20
200334d0:	12610000 	addk	r19, r1, r0
200334d4:	96808000 	mfs	r20, rpc
200334d8:	b000dffc 	imm	-8196
200334dc:	3294e488 	addik	r20, r20, -7032
200334e0:	f8b3001c 	swi	r5, r19, 28
200334e4:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
200334e8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200334ec:	f8130004 	swi	r0, r19, 4
200334f0:	b8000054 	bri	84		// 20033544
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200334f4:	e873001c 	lwi	r3, r19, 28
200334f8:	e8630010 	lwi	r3, r3, 16
200334fc:	e8830000 	lwi	r4, r3, 0
20033500:	e873001c 	lwi	r3, r19, 28
20033504:	e8a3000c 	lwi	r5, r3, 12
20033508:	e8730004 	lwi	r3, r19, 4
2003350c:	64630402 	bslli	r3, r3, 2
20033510:	10651800 	addk	r3, r5, r3
20033514:	e8630000 	lwi	r3, r3, 0
20033518:	14632000 	rsubk	r3, r3, r4
2003351c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20033520:	e8930008 	lwi	r4, r19, 8
20033524:	e873000c 	lwi	r3, r19, 12
20033528:	16441803 	cmpu	r18, r4, r3
2003352c:	bcb20008 	bgei	r18, 8		// 20033534
20033530:	10640000 	addk	r3, r4, r0
20033534:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20033538:	e8730004 	lwi	r3, r19, 4
2003353c:	30630001 	addik	r3, r3, 1
20033540:	f8730004 	swi	r3, r19, 4
20033544:	e8930004 	lwi	r4, r19, 4
20033548:	e8730020 	lwi	r3, r19, 32
2003354c:	16432003 	cmpu	r18, r3, r4
20033550:	bc52ffa4 	blti	r18, -92		// 200334f4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20033554:	e873001c 	lwi	r3, r19, 28
20033558:	e8830000 	lwi	r4, r3, 0
2003355c:	e8730008 	lwi	r3, r19, 8
20033560:	14632000 	rsubk	r3, r3, r4
}
20033564:	10330000 	addk	r1, r19, r0
20033568:	ea610010 	lwi	r19, r1, 16
2003356c:	ea810014 	lwi	r20, r1, 20
20033570:	30210018 	addik	r1, r1, 24
20033574:	b60f0008 	rtsd	r15, 8
20033578:	80000000 	or	r0, r0, r0

2003357c <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003357c:	3021fff0 	addik	r1, r1, -16
20033580:	fa610008 	swi	r19, r1, 8
20033584:	fa81000c 	swi	r20, r1, 12
20033588:	12610000 	addk	r19, r1, r0
2003358c:	96808000 	mfs	r20, rpc
20033590:	b000dffc 	imm	-8196
20033594:	3294e3d0 	addik	r20, r20, -7216
20033598:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2003359c:	e8730014 	lwi	r3, r19, 20
200335a0:	e8630010 	lwi	r3, r3, 16
200335a4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200335a8:	f8130004 	swi	r0, r19, 4
200335ac:	b8000028 	bri	40		// 200335d4
        fifo->read_inds[i] = 0;
200335b0:	e8730014 	lwi	r3, r19, 20
200335b4:	e883000c 	lwi	r4, r3, 12
200335b8:	e8730004 	lwi	r3, r19, 4
200335bc:	64630402 	bslli	r3, r3, 2
200335c0:	10641800 	addk	r3, r4, r3
200335c4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200335c8:	e8730004 	lwi	r3, r19, 4
200335cc:	30630001 	addik	r3, r3, 1
200335d0:	f8730004 	swi	r3, r19, 4
200335d4:	e8730014 	lwi	r3, r19, 20
200335d8:	e8830008 	lwi	r4, r3, 8
200335dc:	e8730004 	lwi	r3, r19, 4
200335e0:	16441803 	cmpu	r18, r4, r3
200335e4:	bc52ffcc 	blti	r18, -52		// 200335b0
        fifo->read_inds[i] = 0;
    }
}
200335e8:	10330000 	addk	r1, r19, r0
200335ec:	ea610008 	lwi	r19, r1, 8
200335f0:	ea81000c 	lwi	r20, r1, 12
200335f4:	30210010 	addik	r1, r1, 16
200335f8:	b60f0008 	rtsd	r15, 8
200335fc:	80000000 	or	r0, r0, r0

20033600 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20033600:	3021ffec 	addik	r1, r1, -20
20033604:	fa61000c 	swi	r19, r1, 12
20033608:	fa810010 	swi	r20, r1, 16
2003360c:	12610000 	addk	r19, r1, r0
20033610:	96808000 	mfs	r20, rpc
20033614:	b000dffc 	imm	-8196
20033618:	3294e34c 	addik	r20, r20, -7348
2003361c:	f8b30018 	swi	r5, r19, 24
20033620:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20033624:	e8730018 	lwi	r3, r19, 24
20033628:	e8830004 	lwi	r4, r3, 4
2003362c:	e8730018 	lwi	r3, r19, 24
20033630:	e8a3000c 	lwi	r5, r3, 12
20033634:	e873001c 	lwi	r3, r19, 28
20033638:	64630402 	bslli	r3, r3, 2
2003363c:	10651800 	addk	r3, r5, r3
20033640:	e8a30000 	lwi	r5, r3, 0
20033644:	e8730018 	lwi	r3, r19, 24
20033648:	e8630000 	lwi	r3, r3, 0
2003364c:	3063ffff 	addik	r3, r3, -1
20033650:	84651800 	and	r3, r5, r3
20033654:	64630403 	bslli	r3, r3, 3
20033658:	10641800 	addk	r3, r4, r3
2003365c:	e8830000 	lwi	r4, r3, 0
20033660:	e8a30004 	lwi	r5, r3, 4
20033664:	f8930004 	swi	r4, r19, 4
20033668:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2003366c:	e8730018 	lwi	r3, r19, 24
20033670:	e883000c 	lwi	r4, r3, 12
20033674:	e873001c 	lwi	r3, r19, 28
20033678:	64630402 	bslli	r3, r3, 2
2003367c:	10641800 	addk	r3, r4, r3
20033680:	e8830000 	lwi	r4, r3, 0
20033684:	30840001 	addik	r4, r4, 1
20033688:	f8830000 	swi	r4, r3, 0
    return value;
2003368c:	e8930004 	lwi	r4, r19, 4
20033690:	e8b30008 	lwi	r5, r19, 8
}
20033694:	10640000 	addk	r3, r4, r0
20033698:	10850000 	addk	r4, r5, r0
2003369c:	10330000 	addk	r1, r19, r0
200336a0:	ea61000c 	lwi	r19, r1, 12
200336a4:	ea810010 	lwi	r20, r1, 16
200336a8:	30210014 	addik	r1, r1, 20
200336ac:	b60f0008 	rtsd	r15, 8
200336b0:	80000000 	or	r0, r0, r0

200336b4 <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200336b4:	3021fff4 	addik	r1, r1, -12
200336b8:	fa610004 	swi	r19, r1, 4
200336bc:	fa810008 	swi	r20, r1, 8
200336c0:	12610000 	addk	r19, r1, r0
200336c4:	96808000 	mfs	r20, rpc
200336c8:	b000dffc 	imm	-8196
200336cc:	3294e298 	addik	r20, r20, -7528
200336d0:	f8b30010 	swi	r5, r19, 16
200336d4:	f8d30014 	swi	r6, r19, 20
200336d8:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200336dc:	e8730010 	lwi	r3, r19, 16
200336e0:	e8830004 	lwi	r4, r3, 4
200336e4:	e8730010 	lwi	r3, r19, 16
200336e8:	e8630010 	lwi	r3, r3, 16
200336ec:	e8a30000 	lwi	r5, r3, 0
200336f0:	e8730010 	lwi	r3, r19, 16
200336f4:	e8630000 	lwi	r3, r3, 0
200336f8:	3063ffff 	addik	r3, r3, -1
200336fc:	84651800 	and	r3, r5, r3
20033700:	64630403 	bslli	r3, r3, 3
20033704:	10641800 	addk	r3, r4, r3
20033708:	e8930014 	lwi	r4, r19, 20
2003370c:	e8b30018 	lwi	r5, r19, 24
20033710:	f8830000 	swi	r4, r3, 0
20033714:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20033718:	e8730010 	lwi	r3, r19, 16
2003371c:	e8630010 	lwi	r3, r3, 16
20033720:	e8830000 	lwi	r4, r3, 0
20033724:	30840001 	addik	r4, r4, 1
20033728:	f8830000 	swi	r4, r3, 0
}
2003372c:	10330000 	addk	r1, r19, r0
20033730:	ea610004 	lwi	r19, r1, 4
20033734:	ea810008 	lwi	r20, r1, 8
20033738:	3021000c 	addik	r1, r1, 12
2003373c:	b60f0008 	rtsd	r15, 8
20033740:	80000000 	or	r0, r0, r0

20033744 <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20033744:	3021fff4 	addik	r1, r1, -12
20033748:	fa610004 	swi	r19, r1, 4
2003374c:	fa810008 	swi	r20, r1, 8
20033750:	12610000 	addk	r19, r1, r0
20033754:	96808000 	mfs	r20, rpc
20033758:	b000dffc 	imm	-8196
2003375c:	3294e208 	addik	r20, r20, -7672
20033760:	f8b30010 	swi	r5, r19, 16
20033764:	f8d30014 	swi	r6, r19, 20
20033768:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003376c:	e8730010 	lwi	r3, r19, 16
20033770:	e8630010 	lwi	r3, r3, 16
20033774:	e8830000 	lwi	r4, r3, 0
20033778:	e8730010 	lwi	r3, r19, 16
2003377c:	e8a3000c 	lwi	r5, r3, 12
20033780:	e8730014 	lwi	r3, r19, 20
20033784:	64630402 	bslli	r3, r3, 2
20033788:	10651800 	addk	r3, r5, r3
2003378c:	e8630000 	lwi	r3, r3, 0
20033790:	14a32000 	rsubk	r5, r3, r4
20033794:	30600001 	addik	r3, r0, 1
20033798:	e8930018 	lwi	r4, r19, 24
2003379c:	16442803 	cmpu	r18, r4, r5
200337a0:	bcb20008 	bgei	r18, 8		// 200337a8
200337a4:	10600000 	addk	r3, r0, r0
200337a8:	a46300ff 	andi	r3, r3, 255
}
200337ac:	10330000 	addk	r1, r19, r0
200337b0:	ea610004 	lwi	r19, r1, 4
200337b4:	ea810008 	lwi	r20, r1, 8
200337b8:	3021000c 	addik	r1, r1, 12
200337bc:	b60f0008 	rtsd	r15, 8
200337c0:	80000000 	or	r0, r0, r0

200337c4 <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200337c4:	3021fff4 	addik	r1, r1, -12
200337c8:	fa610004 	swi	r19, r1, 4
200337cc:	fa810008 	swi	r20, r1, 8
200337d0:	12610000 	addk	r19, r1, r0
200337d4:	96808000 	mfs	r20, rpc
200337d8:	b000dffc 	imm	-8196
200337dc:	3294e188 	addik	r20, r20, -7800
200337e0:	f8b30010 	swi	r5, r19, 16
200337e4:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200337e8:	e8730010 	lwi	r3, r19, 16
200337ec:	e8630010 	lwi	r3, r3, 16
200337f0:	e8830000 	lwi	r4, r3, 0
200337f4:	e8730010 	lwi	r3, r19, 16
200337f8:	e8a3000c 	lwi	r5, r3, 12
200337fc:	e8730014 	lwi	r3, r19, 20
20033800:	64630402 	bslli	r3, r3, 2
20033804:	10651800 	addk	r3, r5, r3
20033808:	e8630000 	lwi	r3, r3, 0
2003380c:	14632000 	rsubk	r3, r3, r4
}
20033810:	10330000 	addk	r1, r19, r0
20033814:	ea610004 	lwi	r19, r1, 4
20033818:	ea810008 	lwi	r20, r1, 8
2003381c:	3021000c 	addik	r1, r1, 12
20033820:	b60f0008 	rtsd	r15, 8
20033824:	80000000 	or	r0, r0, r0

20033828 <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20033828:	3021fff0 	addik	r1, r1, -16
2003382c:	fa610008 	swi	r19, r1, 8
20033830:	fa81000c 	swi	r20, r1, 12
20033834:	12610000 	addk	r19, r1, r0
20033838:	96808000 	mfs	r20, rpc
2003383c:	b000dffc 	imm	-8196
20033840:	3294e124 	addik	r20, r20, -7900
20033844:	f8b30014 	swi	r5, r19, 20
20033848:	f8d30018 	swi	r6, r19, 24
2003384c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20033850:	f8130004 	swi	r0, r19, 4
20033854:	b800005c 	bri	92		// 200338b0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20033858:	e8730014 	lwi	r3, r19, 20
2003385c:	e8830000 	lwi	r4, r3, 0
20033860:	e8730014 	lwi	r3, r19, 20
20033864:	e8a3000c 	lwi	r5, r3, 12
20033868:	e8730004 	lwi	r3, r19, 4
2003386c:	64630402 	bslli	r3, r3, 2
20033870:	10651800 	addk	r3, r5, r3
20033874:	e8a30000 	lwi	r5, r3, 0
20033878:	e8730014 	lwi	r3, r19, 20
2003387c:	e8630010 	lwi	r3, r3, 16
20033880:	e8630000 	lwi	r3, r3, 0
20033884:	14632800 	rsubk	r3, r3, r5
20033888:	10641800 	addk	r3, r4, r3
2003388c:	30830001 	addik	r4, r3, 1
20033890:	e873001c 	lwi	r3, r19, 28
20033894:	16441803 	cmpu	r18, r4, r3
20033898:	bc52000c 	blti	r18, 12		// 200338a4
            return 0;
2003389c:	10600000 	addk	r3, r0, r0
200338a0:	b8000024 	bri	36		// 200338c4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200338a4:	e8730004 	lwi	r3, r19, 4
200338a8:	30630001 	addik	r3, r3, 1
200338ac:	f8730004 	swi	r3, r19, 4
200338b0:	e8930004 	lwi	r4, r19, 4
200338b4:	e8730018 	lwi	r3, r19, 24
200338b8:	16432003 	cmpu	r18, r3, r4
200338bc:	bc52ff9c 	blti	r18, -100		// 20033858
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200338c0:	30600001 	addik	r3, r0, 1
}
200338c4:	10330000 	addk	r1, r19, r0
200338c8:	ea610008 	lwi	r19, r1, 8
200338cc:	ea81000c 	lwi	r20, r1, 12
200338d0:	30210010 	addik	r1, r1, 16
200338d4:	b60f0008 	rtsd	r15, 8
200338d8:	80000000 	or	r0, r0, r0

200338dc <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200338dc:	3021ffe8 	addik	r1, r1, -24
200338e0:	fa610010 	swi	r19, r1, 16
200338e4:	fa810014 	swi	r20, r1, 20
200338e8:	12610000 	addk	r19, r1, r0
200338ec:	96808000 	mfs	r20, rpc
200338f0:	b000dffc 	imm	-8196
200338f4:	3294e070 	addik	r20, r20, -8080
200338f8:	f8b3001c 	swi	r5, r19, 28
200338fc:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20033900:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20033904:	f8130004 	swi	r0, r19, 4
20033908:	b8000054 	bri	84		// 2003395c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003390c:	e873001c 	lwi	r3, r19, 28
20033910:	e8630010 	lwi	r3, r3, 16
20033914:	e8830000 	lwi	r4, r3, 0
20033918:	e873001c 	lwi	r3, r19, 28
2003391c:	e8a3000c 	lwi	r5, r3, 12
20033920:	e8730004 	lwi	r3, r19, 4
20033924:	64630402 	bslli	r3, r3, 2
20033928:	10651800 	addk	r3, r5, r3
2003392c:	e8630000 	lwi	r3, r3, 0
20033930:	14632000 	rsubk	r3, r3, r4
20033934:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20033938:	e8930008 	lwi	r4, r19, 8
2003393c:	e873000c 	lwi	r3, r19, 12
20033940:	16441803 	cmpu	r18, r4, r3
20033944:	bcb20008 	bgei	r18, 8		// 2003394c
20033948:	10640000 	addk	r3, r4, r0
2003394c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20033950:	e8730004 	lwi	r3, r19, 4
20033954:	30630001 	addik	r3, r3, 1
20033958:	f8730004 	swi	r3, r19, 4
2003395c:	e8930004 	lwi	r4, r19, 4
20033960:	e8730020 	lwi	r3, r19, 32
20033964:	16432003 	cmpu	r18, r3, r4
20033968:	bc52ffa4 	blti	r18, -92		// 2003390c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003396c:	e873001c 	lwi	r3, r19, 28
20033970:	e8830000 	lwi	r4, r3, 0
20033974:	e8730008 	lwi	r3, r19, 8
20033978:	14632000 	rsubk	r3, r3, r4
}
2003397c:	10330000 	addk	r1, r19, r0
20033980:	ea610010 	lwi	r19, r1, 16
20033984:	ea810014 	lwi	r20, r1, 20
20033988:	30210018 	addik	r1, r1, 24
2003398c:	b60f0008 	rtsd	r15, 8
20033990:	80000000 	or	r0, r0, r0

20033994 <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20033994:	3021fff0 	addik	r1, r1, -16
20033998:	fa610008 	swi	r19, r1, 8
2003399c:	fa81000c 	swi	r20, r1, 12
200339a0:	12610000 	addk	r19, r1, r0
200339a4:	96808000 	mfs	r20, rpc
200339a8:	b000dffc 	imm	-8196
200339ac:	3294dfb8 	addik	r20, r20, -8264
200339b0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200339b4:	e8730014 	lwi	r3, r19, 20
200339b8:	e8630010 	lwi	r3, r3, 16
200339bc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200339c0:	f8130004 	swi	r0, r19, 4
200339c4:	b8000028 	bri	40		// 200339ec
        fifo->read_inds[i] = 0;
200339c8:	e8730014 	lwi	r3, r19, 20
200339cc:	e883000c 	lwi	r4, r3, 12
200339d0:	e8730004 	lwi	r3, r19, 4
200339d4:	64630402 	bslli	r3, r3, 2
200339d8:	10641800 	addk	r3, r4, r3
200339dc:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200339e0:	e8730004 	lwi	r3, r19, 4
200339e4:	30630001 	addik	r3, r3, 1
200339e8:	f8730004 	swi	r3, r19, 4
200339ec:	e8730014 	lwi	r3, r19, 20
200339f0:	e8830008 	lwi	r4, r3, 8
200339f4:	e8730004 	lwi	r3, r19, 4
200339f8:	16441803 	cmpu	r18, r4, r3
200339fc:	bc52ffcc 	blti	r18, -52		// 200339c8
        fifo->read_inds[i] = 0;
    }
}
20033a00:	10330000 	addk	r1, r19, r0
20033a04:	ea610008 	lwi	r19, r1, 8
20033a08:	ea81000c 	lwi	r20, r1, 12
20033a0c:	30210010 	addik	r1, r1, 16
20033a10:	b60f0008 	rtsd	r15, 8
20033a14:	80000000 	or	r0, r0, r0

20033a18 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20033a18:	3021fff0 	addik	r1, r1, -16
20033a1c:	fa610008 	swi	r19, r1, 8
20033a20:	fa81000c 	swi	r20, r1, 12
20033a24:	12610000 	addk	r19, r1, r0
20033a28:	96808000 	mfs	r20, rpc
20033a2c:	b000dffc 	imm	-8196
20033a30:	3294df34 	addik	r20, r20, -8396
20033a34:	f8b30014 	swi	r5, r19, 20
20033a38:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20033a3c:	e8730014 	lwi	r3, r19, 20
20033a40:	e8830004 	lwi	r4, r3, 4
20033a44:	e8730014 	lwi	r3, r19, 20
20033a48:	e8a3000c 	lwi	r5, r3, 12
20033a4c:	e8730018 	lwi	r3, r19, 24
20033a50:	64630402 	bslli	r3, r3, 2
20033a54:	10651800 	addk	r3, r5, r3
20033a58:	e8a30000 	lwi	r5, r3, 0
20033a5c:	e8730014 	lwi	r3, r19, 20
20033a60:	e8630000 	lwi	r3, r3, 0
20033a64:	3063ffff 	addik	r3, r3, -1
20033a68:	84651800 	and	r3, r5, r3
20033a6c:	10641800 	addk	r3, r4, r3
20033a70:	e0630000 	lbui	r3, r3, 0
20033a74:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20033a78:	e8730014 	lwi	r3, r19, 20
20033a7c:	e883000c 	lwi	r4, r3, 12
20033a80:	e8730018 	lwi	r3, r19, 24
20033a84:	64630402 	bslli	r3, r3, 2
20033a88:	10641800 	addk	r3, r4, r3
20033a8c:	e8830000 	lwi	r4, r3, 0
20033a90:	30840001 	addik	r4, r4, 1
20033a94:	f8830000 	swi	r4, r3, 0
    return value;
20033a98:	e0730004 	lbui	r3, r19, 4
}
20033a9c:	10330000 	addk	r1, r19, r0
20033aa0:	ea610008 	lwi	r19, r1, 8
20033aa4:	ea81000c 	lwi	r20, r1, 12
20033aa8:	30210010 	addik	r1, r1, 16
20033aac:	b60f0008 	rtsd	r15, 8
20033ab0:	80000000 	or	r0, r0, r0

20033ab4 <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20033ab4:	3021fff4 	addik	r1, r1, -12
20033ab8:	fa610004 	swi	r19, r1, 4
20033abc:	fa810008 	swi	r20, r1, 8
20033ac0:	12610000 	addk	r19, r1, r0
20033ac4:	96808000 	mfs	r20, rpc
20033ac8:	b000dffc 	imm	-8196
20033acc:	3294de98 	addik	r20, r20, -8552
20033ad0:	f8b30010 	swi	r5, r19, 16
20033ad4:	10660000 	addk	r3, r6, r0
20033ad8:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20033adc:	e8730010 	lwi	r3, r19, 16
20033ae0:	e8830004 	lwi	r4, r3, 4
20033ae4:	e8730010 	lwi	r3, r19, 16
20033ae8:	e8630010 	lwi	r3, r3, 16
20033aec:	e8a30000 	lwi	r5, r3, 0
20033af0:	e8730010 	lwi	r3, r19, 16
20033af4:	e8630000 	lwi	r3, r3, 0
20033af8:	3063ffff 	addik	r3, r3, -1
20033afc:	84651800 	and	r3, r5, r3
20033b00:	10641800 	addk	r3, r4, r3
20033b04:	e0930014 	lbui	r4, r19, 20
20033b08:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20033b0c:	e8730010 	lwi	r3, r19, 16
20033b10:	e8630010 	lwi	r3, r3, 16
20033b14:	e8830000 	lwi	r4, r3, 0
20033b18:	30840001 	addik	r4, r4, 1
20033b1c:	f8830000 	swi	r4, r3, 0
}
20033b20:	10330000 	addk	r1, r19, r0
20033b24:	ea610004 	lwi	r19, r1, 4
20033b28:	ea810008 	lwi	r20, r1, 8
20033b2c:	3021000c 	addik	r1, r1, 12
20033b30:	b60f0008 	rtsd	r15, 8
20033b34:	80000000 	or	r0, r0, r0

20033b38 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20033b38:	3021fff4 	addik	r1, r1, -12
20033b3c:	fa610004 	swi	r19, r1, 4
20033b40:	fa810008 	swi	r20, r1, 8
20033b44:	12610000 	addk	r19, r1, r0
20033b48:	96808000 	mfs	r20, rpc
20033b4c:	b000dffc 	imm	-8196
20033b50:	3294de14 	addik	r20, r20, -8684
20033b54:	f8b30010 	swi	r5, r19, 16
20033b58:	f8d30014 	swi	r6, r19, 20
20033b5c:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20033b60:	e8730010 	lwi	r3, r19, 16
20033b64:	e8630010 	lwi	r3, r3, 16
20033b68:	e8830000 	lwi	r4, r3, 0
20033b6c:	e8730010 	lwi	r3, r19, 16
20033b70:	e8a3000c 	lwi	r5, r3, 12
20033b74:	e8730014 	lwi	r3, r19, 20
20033b78:	64630402 	bslli	r3, r3, 2
20033b7c:	10651800 	addk	r3, r5, r3
20033b80:	e8630000 	lwi	r3, r3, 0
20033b84:	14a32000 	rsubk	r5, r3, r4
20033b88:	30600001 	addik	r3, r0, 1
20033b8c:	e8930018 	lwi	r4, r19, 24
20033b90:	16442803 	cmpu	r18, r4, r5
20033b94:	bcb20008 	bgei	r18, 8		// 20033b9c
20033b98:	10600000 	addk	r3, r0, r0
20033b9c:	a46300ff 	andi	r3, r3, 255
}
20033ba0:	10330000 	addk	r1, r19, r0
20033ba4:	ea610004 	lwi	r19, r1, 4
20033ba8:	ea810008 	lwi	r20, r1, 8
20033bac:	3021000c 	addik	r1, r1, 12
20033bb0:	b60f0008 	rtsd	r15, 8
20033bb4:	80000000 	or	r0, r0, r0

20033bb8 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20033bb8:	3021fff4 	addik	r1, r1, -12
20033bbc:	fa610004 	swi	r19, r1, 4
20033bc0:	fa810008 	swi	r20, r1, 8
20033bc4:	12610000 	addk	r19, r1, r0
20033bc8:	96808000 	mfs	r20, rpc
20033bcc:	b000dffc 	imm	-8196
20033bd0:	3294dd94 	addik	r20, r20, -8812
20033bd4:	f8b30010 	swi	r5, r19, 16
20033bd8:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20033bdc:	e8730010 	lwi	r3, r19, 16
20033be0:	e8630010 	lwi	r3, r3, 16
20033be4:	e8830000 	lwi	r4, r3, 0
20033be8:	e8730010 	lwi	r3, r19, 16
20033bec:	e8a3000c 	lwi	r5, r3, 12
20033bf0:	e8730014 	lwi	r3, r19, 20
20033bf4:	64630402 	bslli	r3, r3, 2
20033bf8:	10651800 	addk	r3, r5, r3
20033bfc:	e8630000 	lwi	r3, r3, 0
20033c00:	14632000 	rsubk	r3, r3, r4
}
20033c04:	10330000 	addk	r1, r19, r0
20033c08:	ea610004 	lwi	r19, r1, 4
20033c0c:	ea810008 	lwi	r20, r1, 8
20033c10:	3021000c 	addik	r1, r1, 12
20033c14:	b60f0008 	rtsd	r15, 8
20033c18:	80000000 	or	r0, r0, r0

20033c1c <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20033c1c:	3021fff0 	addik	r1, r1, -16
20033c20:	fa610008 	swi	r19, r1, 8
20033c24:	fa81000c 	swi	r20, r1, 12
20033c28:	12610000 	addk	r19, r1, r0
20033c2c:	96808000 	mfs	r20, rpc
20033c30:	b000dffc 	imm	-8196
20033c34:	3294dd30 	addik	r20, r20, -8912
20033c38:	f8b30014 	swi	r5, r19, 20
20033c3c:	f8d30018 	swi	r6, r19, 24
20033c40:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20033c44:	f8130004 	swi	r0, r19, 4
20033c48:	b800005c 	bri	92		// 20033ca4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20033c4c:	e8730014 	lwi	r3, r19, 20
20033c50:	e8830000 	lwi	r4, r3, 0
20033c54:	e8730014 	lwi	r3, r19, 20
20033c58:	e8a3000c 	lwi	r5, r3, 12
20033c5c:	e8730004 	lwi	r3, r19, 4
20033c60:	64630402 	bslli	r3, r3, 2
20033c64:	10651800 	addk	r3, r5, r3
20033c68:	e8a30000 	lwi	r5, r3, 0
20033c6c:	e8730014 	lwi	r3, r19, 20
20033c70:	e8630010 	lwi	r3, r3, 16
20033c74:	e8630000 	lwi	r3, r3, 0
20033c78:	14632800 	rsubk	r3, r3, r5
20033c7c:	10641800 	addk	r3, r4, r3
20033c80:	30830001 	addik	r4, r3, 1
20033c84:	e873001c 	lwi	r3, r19, 28
20033c88:	16441803 	cmpu	r18, r4, r3
20033c8c:	bc52000c 	blti	r18, 12		// 20033c98
            return 0;
20033c90:	10600000 	addk	r3, r0, r0
20033c94:	b8000024 	bri	36		// 20033cb8
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20033c98:	e8730004 	lwi	r3, r19, 4
20033c9c:	30630001 	addik	r3, r3, 1
20033ca0:	f8730004 	swi	r3, r19, 4
20033ca4:	e8930004 	lwi	r4, r19, 4
20033ca8:	e8730018 	lwi	r3, r19, 24
20033cac:	16432003 	cmpu	r18, r3, r4
20033cb0:	bc52ff9c 	blti	r18, -100		// 20033c4c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20033cb4:	30600001 	addik	r3, r0, 1
}
20033cb8:	10330000 	addk	r1, r19, r0
20033cbc:	ea610008 	lwi	r19, r1, 8
20033cc0:	ea81000c 	lwi	r20, r1, 12
20033cc4:	30210010 	addik	r1, r1, 16
20033cc8:	b60f0008 	rtsd	r15, 8
20033ccc:	80000000 	or	r0, r0, r0

20033cd0 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20033cd0:	3021ffe8 	addik	r1, r1, -24
20033cd4:	fa610010 	swi	r19, r1, 16
20033cd8:	fa810014 	swi	r20, r1, 20
20033cdc:	12610000 	addk	r19, r1, r0
20033ce0:	96808000 	mfs	r20, rpc
20033ce4:	b000dffc 	imm	-8196
20033ce8:	3294dc7c 	addik	r20, r20, -9092
20033cec:	f8b3001c 	swi	r5, r19, 28
20033cf0:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20033cf4:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20033cf8:	f8130004 	swi	r0, r19, 4
20033cfc:	b8000054 	bri	84		// 20033d50
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20033d00:	e873001c 	lwi	r3, r19, 28
20033d04:	e8630010 	lwi	r3, r3, 16
20033d08:	e8830000 	lwi	r4, r3, 0
20033d0c:	e873001c 	lwi	r3, r19, 28
20033d10:	e8a3000c 	lwi	r5, r3, 12
20033d14:	e8730004 	lwi	r3, r19, 4
20033d18:	64630402 	bslli	r3, r3, 2
20033d1c:	10651800 	addk	r3, r5, r3
20033d20:	e8630000 	lwi	r3, r3, 0
20033d24:	14632000 	rsubk	r3, r3, r4
20033d28:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20033d2c:	e8930008 	lwi	r4, r19, 8
20033d30:	e873000c 	lwi	r3, r19, 12
20033d34:	16441803 	cmpu	r18, r4, r3
20033d38:	bcb20008 	bgei	r18, 8		// 20033d40
20033d3c:	10640000 	addk	r3, r4, r0
20033d40:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20033d44:	e8730004 	lwi	r3, r19, 4
20033d48:	30630001 	addik	r3, r3, 1
20033d4c:	f8730004 	swi	r3, r19, 4
20033d50:	e8930004 	lwi	r4, r19, 4
20033d54:	e8730020 	lwi	r3, r19, 32
20033d58:	16432003 	cmpu	r18, r3, r4
20033d5c:	bc52ffa4 	blti	r18, -92		// 20033d00
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20033d60:	e873001c 	lwi	r3, r19, 28
20033d64:	e8830000 	lwi	r4, r3, 0
20033d68:	e8730008 	lwi	r3, r19, 8
20033d6c:	14632000 	rsubk	r3, r3, r4
}
20033d70:	10330000 	addk	r1, r19, r0
20033d74:	ea610010 	lwi	r19, r1, 16
20033d78:	ea810014 	lwi	r20, r1, 20
20033d7c:	30210018 	addik	r1, r1, 24
20033d80:	b60f0008 	rtsd	r15, 8
20033d84:	80000000 	or	r0, r0, r0

20033d88 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20033d88:	3021fff0 	addik	r1, r1, -16
20033d8c:	fa610008 	swi	r19, r1, 8
20033d90:	fa81000c 	swi	r20, r1, 12
20033d94:	12610000 	addk	r19, r1, r0
20033d98:	96808000 	mfs	r20, rpc
20033d9c:	b000dffc 	imm	-8196
20033da0:	3294dbc4 	addik	r20, r20, -9276
20033da4:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20033da8:	e8730014 	lwi	r3, r19, 20
20033dac:	e8630010 	lwi	r3, r3, 16
20033db0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20033db4:	f8130004 	swi	r0, r19, 4
20033db8:	b8000028 	bri	40		// 20033de0
        fifo->read_inds[i] = 0;
20033dbc:	e8730014 	lwi	r3, r19, 20
20033dc0:	e883000c 	lwi	r4, r3, 12
20033dc4:	e8730004 	lwi	r3, r19, 4
20033dc8:	64630402 	bslli	r3, r3, 2
20033dcc:	10641800 	addk	r3, r4, r3
20033dd0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20033dd4:	e8730004 	lwi	r3, r19, 4
20033dd8:	30630001 	addik	r3, r3, 1
20033ddc:	f8730004 	swi	r3, r19, 4
20033de0:	e8730014 	lwi	r3, r19, 20
20033de4:	e8830008 	lwi	r4, r3, 8
20033de8:	e8730004 	lwi	r3, r19, 4
20033dec:	16441803 	cmpu	r18, r4, r3
20033df0:	bc52ffcc 	blti	r18, -52		// 20033dbc
        fifo->read_inds[i] = 0;
    }
}
20033df4:	10330000 	addk	r1, r19, r0
20033df8:	ea610008 	lwi	r19, r1, 8
20033dfc:	ea81000c 	lwi	r20, r1, 12
20033e00:	30210010 	addik	r1, r1, 16
20033e04:	b60f0008 	rtsd	r15, 8
20033e08:	80000000 	or	r0, r0, r0

20033e0c <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20033e0c:	3021fff0 	addik	r1, r1, -16
20033e10:	fa610008 	swi	r19, r1, 8
20033e14:	fa81000c 	swi	r20, r1, 12
20033e18:	12610000 	addk	r19, r1, r0
20033e1c:	96808000 	mfs	r20, rpc
20033e20:	b000dffc 	imm	-8196
20033e24:	3294db40 	addik	r20, r20, -9408
20033e28:	f8b30014 	swi	r5, r19, 20
20033e2c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20033e30:	e8730014 	lwi	r3, r19, 20
20033e34:	e8830004 	lwi	r4, r3, 4
20033e38:	e8730014 	lwi	r3, r19, 20
20033e3c:	e8a3000c 	lwi	r5, r3, 12
20033e40:	e8730018 	lwi	r3, r19, 24
20033e44:	64630402 	bslli	r3, r3, 2
20033e48:	10651800 	addk	r3, r5, r3
20033e4c:	e8a30000 	lwi	r5, r3, 0
20033e50:	e8730014 	lwi	r3, r19, 20
20033e54:	e8630000 	lwi	r3, r3, 0
20033e58:	3063ffff 	addik	r3, r3, -1
20033e5c:	84651800 	and	r3, r5, r3
20033e60:	10631800 	addk	r3, r3, r3
20033e64:	10641800 	addk	r3, r4, r3
20033e68:	e4630000 	lhui	r3, r3, 0
20033e6c:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20033e70:	e8730014 	lwi	r3, r19, 20
20033e74:	e883000c 	lwi	r4, r3, 12
20033e78:	e8730018 	lwi	r3, r19, 24
20033e7c:	64630402 	bslli	r3, r3, 2
20033e80:	10641800 	addk	r3, r4, r3
20033e84:	e8830000 	lwi	r4, r3, 0
20033e88:	30840001 	addik	r4, r4, 1
20033e8c:	f8830000 	swi	r4, r3, 0
    return value;
20033e90:	e4730004 	lhui	r3, r19, 4
}
20033e94:	10330000 	addk	r1, r19, r0
20033e98:	ea610008 	lwi	r19, r1, 8
20033e9c:	ea81000c 	lwi	r20, r1, 12
20033ea0:	30210010 	addik	r1, r1, 16
20033ea4:	b60f0008 	rtsd	r15, 8
20033ea8:	80000000 	or	r0, r0, r0

20033eac <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20033eac:	3021fff4 	addik	r1, r1, -12
20033eb0:	fa610004 	swi	r19, r1, 4
20033eb4:	fa810008 	swi	r20, r1, 8
20033eb8:	12610000 	addk	r19, r1, r0
20033ebc:	96808000 	mfs	r20, rpc
20033ec0:	b000dffc 	imm	-8196
20033ec4:	3294daa0 	addik	r20, r20, -9568
20033ec8:	f8b30010 	swi	r5, r19, 16
20033ecc:	10660000 	addk	r3, r6, r0
20033ed0:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20033ed4:	e8730010 	lwi	r3, r19, 16
20033ed8:	e8830004 	lwi	r4, r3, 4
20033edc:	e8730010 	lwi	r3, r19, 16
20033ee0:	e8630010 	lwi	r3, r3, 16
20033ee4:	e8a30000 	lwi	r5, r3, 0
20033ee8:	e8730010 	lwi	r3, r19, 16
20033eec:	e8630000 	lwi	r3, r3, 0
20033ef0:	3063ffff 	addik	r3, r3, -1
20033ef4:	84651800 	and	r3, r5, r3
20033ef8:	10631800 	addk	r3, r3, r3
20033efc:	10641800 	addk	r3, r4, r3
20033f00:	e4930014 	lhui	r4, r19, 20
20033f04:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20033f08:	e8730010 	lwi	r3, r19, 16
20033f0c:	e8630010 	lwi	r3, r3, 16
20033f10:	e8830000 	lwi	r4, r3, 0
20033f14:	30840001 	addik	r4, r4, 1
20033f18:	f8830000 	swi	r4, r3, 0
}
20033f1c:	10330000 	addk	r1, r19, r0
20033f20:	ea610004 	lwi	r19, r1, 4
20033f24:	ea810008 	lwi	r20, r1, 8
20033f28:	3021000c 	addik	r1, r1, 12
20033f2c:	b60f0008 	rtsd	r15, 8
20033f30:	80000000 	or	r0, r0, r0

20033f34 <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20033f34:	3021fff4 	addik	r1, r1, -12
20033f38:	fa610004 	swi	r19, r1, 4
20033f3c:	fa810008 	swi	r20, r1, 8
20033f40:	12610000 	addk	r19, r1, r0
20033f44:	96808000 	mfs	r20, rpc
20033f48:	b000dffc 	imm	-8196
20033f4c:	3294da18 	addik	r20, r20, -9704
20033f50:	f8b30010 	swi	r5, r19, 16
20033f54:	f8d30014 	swi	r6, r19, 20
20033f58:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20033f5c:	e8730010 	lwi	r3, r19, 16
20033f60:	e8630010 	lwi	r3, r3, 16
20033f64:	e8830000 	lwi	r4, r3, 0
20033f68:	e8730010 	lwi	r3, r19, 16
20033f6c:	e8a3000c 	lwi	r5, r3, 12
20033f70:	e8730014 	lwi	r3, r19, 20
20033f74:	64630402 	bslli	r3, r3, 2
20033f78:	10651800 	addk	r3, r5, r3
20033f7c:	e8630000 	lwi	r3, r3, 0
20033f80:	14a32000 	rsubk	r5, r3, r4
20033f84:	30600001 	addik	r3, r0, 1
20033f88:	e8930018 	lwi	r4, r19, 24
20033f8c:	16442803 	cmpu	r18, r4, r5
20033f90:	bcb20008 	bgei	r18, 8		// 20033f98
20033f94:	10600000 	addk	r3, r0, r0
20033f98:	a46300ff 	andi	r3, r3, 255
}
20033f9c:	10330000 	addk	r1, r19, r0
20033fa0:	ea610004 	lwi	r19, r1, 4
20033fa4:	ea810008 	lwi	r20, r1, 8
20033fa8:	3021000c 	addik	r1, r1, 12
20033fac:	b60f0008 	rtsd	r15, 8
20033fb0:	80000000 	or	r0, r0, r0

20033fb4 <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20033fb4:	3021fff4 	addik	r1, r1, -12
20033fb8:	fa610004 	swi	r19, r1, 4
20033fbc:	fa810008 	swi	r20, r1, 8
20033fc0:	12610000 	addk	r19, r1, r0
20033fc4:	96808000 	mfs	r20, rpc
20033fc8:	b000dffc 	imm	-8196
20033fcc:	3294d998 	addik	r20, r20, -9832
20033fd0:	f8b30010 	swi	r5, r19, 16
20033fd4:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20033fd8:	e8730010 	lwi	r3, r19, 16
20033fdc:	e8630010 	lwi	r3, r3, 16
20033fe0:	e8830000 	lwi	r4, r3, 0
20033fe4:	e8730010 	lwi	r3, r19, 16
20033fe8:	e8a3000c 	lwi	r5, r3, 12
20033fec:	e8730014 	lwi	r3, r19, 20
20033ff0:	64630402 	bslli	r3, r3, 2
20033ff4:	10651800 	addk	r3, r5, r3
20033ff8:	e8630000 	lwi	r3, r3, 0
20033ffc:	14632000 	rsubk	r3, r3, r4
}
20034000:	10330000 	addk	r1, r19, r0
20034004:	ea610004 	lwi	r19, r1, 4
20034008:	ea810008 	lwi	r20, r1, 8
2003400c:	3021000c 	addik	r1, r1, 12
20034010:	b60f0008 	rtsd	r15, 8
20034014:	80000000 	or	r0, r0, r0

20034018 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20034018:	3021fff0 	addik	r1, r1, -16
2003401c:	fa610008 	swi	r19, r1, 8
20034020:	fa81000c 	swi	r20, r1, 12
20034024:	12610000 	addk	r19, r1, r0
20034028:	96808000 	mfs	r20, rpc
2003402c:	b000dffc 	imm	-8196
20034030:	3294d934 	addik	r20, r20, -9932
20034034:	f8b30014 	swi	r5, r19, 20
20034038:	f8d30018 	swi	r6, r19, 24
2003403c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20034040:	f8130004 	swi	r0, r19, 4
20034044:	b800005c 	bri	92		// 200340a0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20034048:	e8730014 	lwi	r3, r19, 20
2003404c:	e8830000 	lwi	r4, r3, 0
20034050:	e8730014 	lwi	r3, r19, 20
20034054:	e8a3000c 	lwi	r5, r3, 12
20034058:	e8730004 	lwi	r3, r19, 4
2003405c:	64630402 	bslli	r3, r3, 2
20034060:	10651800 	addk	r3, r5, r3
20034064:	e8a30000 	lwi	r5, r3, 0
20034068:	e8730014 	lwi	r3, r19, 20
2003406c:	e8630010 	lwi	r3, r3, 16
20034070:	e8630000 	lwi	r3, r3, 0
20034074:	14632800 	rsubk	r3, r3, r5
20034078:	10641800 	addk	r3, r4, r3
2003407c:	30830001 	addik	r4, r3, 1
20034080:	e873001c 	lwi	r3, r19, 28
20034084:	16441803 	cmpu	r18, r4, r3
20034088:	bc52000c 	blti	r18, 12		// 20034094
            return 0;
2003408c:	10600000 	addk	r3, r0, r0
20034090:	b8000024 	bri	36		// 200340b4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20034094:	e8730004 	lwi	r3, r19, 4
20034098:	30630001 	addik	r3, r3, 1
2003409c:	f8730004 	swi	r3, r19, 4
200340a0:	e8930004 	lwi	r4, r19, 4
200340a4:	e8730018 	lwi	r3, r19, 24
200340a8:	16432003 	cmpu	r18, r3, r4
200340ac:	bc52ff9c 	blti	r18, -100		// 20034048
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200340b0:	30600001 	addik	r3, r0, 1
}
200340b4:	10330000 	addk	r1, r19, r0
200340b8:	ea610008 	lwi	r19, r1, 8
200340bc:	ea81000c 	lwi	r20, r1, 12
200340c0:	30210010 	addik	r1, r1, 16
200340c4:	b60f0008 	rtsd	r15, 8
200340c8:	80000000 	or	r0, r0, r0

200340cc <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200340cc:	3021ffe8 	addik	r1, r1, -24
200340d0:	fa610010 	swi	r19, r1, 16
200340d4:	fa810014 	swi	r20, r1, 20
200340d8:	12610000 	addk	r19, r1, r0
200340dc:	96808000 	mfs	r20, rpc
200340e0:	b000dffc 	imm	-8196
200340e4:	3294d880 	addik	r20, r20, -10112
200340e8:	f8b3001c 	swi	r5, r19, 28
200340ec:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
200340f0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200340f4:	f8130004 	swi	r0, r19, 4
200340f8:	b8000054 	bri	84		// 2003414c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200340fc:	e873001c 	lwi	r3, r19, 28
20034100:	e8630010 	lwi	r3, r3, 16
20034104:	e8830000 	lwi	r4, r3, 0
20034108:	e873001c 	lwi	r3, r19, 28
2003410c:	e8a3000c 	lwi	r5, r3, 12
20034110:	e8730004 	lwi	r3, r19, 4
20034114:	64630402 	bslli	r3, r3, 2
20034118:	10651800 	addk	r3, r5, r3
2003411c:	e8630000 	lwi	r3, r3, 0
20034120:	14632000 	rsubk	r3, r3, r4
20034124:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20034128:	e8930008 	lwi	r4, r19, 8
2003412c:	e873000c 	lwi	r3, r19, 12
20034130:	16441803 	cmpu	r18, r4, r3
20034134:	bcb20008 	bgei	r18, 8		// 2003413c
20034138:	10640000 	addk	r3, r4, r0
2003413c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20034140:	e8730004 	lwi	r3, r19, 4
20034144:	30630001 	addik	r3, r3, 1
20034148:	f8730004 	swi	r3, r19, 4
2003414c:	e8930004 	lwi	r4, r19, 4
20034150:	e8730020 	lwi	r3, r19, 32
20034154:	16432003 	cmpu	r18, r3, r4
20034158:	bc52ffa4 	blti	r18, -92		// 200340fc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003415c:	e873001c 	lwi	r3, r19, 28
20034160:	e8830000 	lwi	r4, r3, 0
20034164:	e8730008 	lwi	r3, r19, 8
20034168:	14632000 	rsubk	r3, r3, r4
}
2003416c:	10330000 	addk	r1, r19, r0
20034170:	ea610010 	lwi	r19, r1, 16
20034174:	ea810014 	lwi	r20, r1, 20
20034178:	30210018 	addik	r1, r1, 24
2003417c:	b60f0008 	rtsd	r15, 8
20034180:	80000000 	or	r0, r0, r0

20034184 <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20034184:	3021fff0 	addik	r1, r1, -16
20034188:	fa610008 	swi	r19, r1, 8
2003418c:	fa81000c 	swi	r20, r1, 12
20034190:	12610000 	addk	r19, r1, r0
20034194:	96808000 	mfs	r20, rpc
20034198:	b000dffc 	imm	-8196
2003419c:	3294d7c8 	addik	r20, r20, -10296
200341a0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200341a4:	e8730014 	lwi	r3, r19, 20
200341a8:	e8630010 	lwi	r3, r3, 16
200341ac:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200341b0:	f8130004 	swi	r0, r19, 4
200341b4:	b8000028 	bri	40		// 200341dc
        fifo->read_inds[i] = 0;
200341b8:	e8730014 	lwi	r3, r19, 20
200341bc:	e883000c 	lwi	r4, r3, 12
200341c0:	e8730004 	lwi	r3, r19, 4
200341c4:	64630402 	bslli	r3, r3, 2
200341c8:	10641800 	addk	r3, r4, r3
200341cc:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200341d0:	e8730004 	lwi	r3, r19, 4
200341d4:	30630001 	addik	r3, r3, 1
200341d8:	f8730004 	swi	r3, r19, 4
200341dc:	e8730014 	lwi	r3, r19, 20
200341e0:	e8830008 	lwi	r4, r3, 8
200341e4:	e8730004 	lwi	r3, r19, 4
200341e8:	16441803 	cmpu	r18, r4, r3
200341ec:	bc52ffcc 	blti	r18, -52		// 200341b8
        fifo->read_inds[i] = 0;
    }
}
200341f0:	10330000 	addk	r1, r19, r0
200341f4:	ea610008 	lwi	r19, r1, 8
200341f8:	ea81000c 	lwi	r20, r1, 12
200341fc:	30210010 	addik	r1, r1, 16
20034200:	b60f0008 	rtsd	r15, 8
20034204:	80000000 	or	r0, r0, r0

20034208 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20034208:	3021fff0 	addik	r1, r1, -16
2003420c:	fa610008 	swi	r19, r1, 8
20034210:	fa81000c 	swi	r20, r1, 12
20034214:	12610000 	addk	r19, r1, r0
20034218:	96808000 	mfs	r20, rpc
2003421c:	b000dffc 	imm	-8196
20034220:	3294d744 	addik	r20, r20, -10428
20034224:	f8b30014 	swi	r5, r19, 20
20034228:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003422c:	e8730014 	lwi	r3, r19, 20
20034230:	e8830004 	lwi	r4, r3, 4
20034234:	e8730014 	lwi	r3, r19, 20
20034238:	e8a3000c 	lwi	r5, r3, 12
2003423c:	e8730018 	lwi	r3, r19, 24
20034240:	64630402 	bslli	r3, r3, 2
20034244:	10651800 	addk	r3, r5, r3
20034248:	e8a30000 	lwi	r5, r3, 0
2003424c:	e8730014 	lwi	r3, r19, 20
20034250:	e8630000 	lwi	r3, r3, 0
20034254:	3063ffff 	addik	r3, r3, -1
20034258:	84651800 	and	r3, r5, r3
2003425c:	64630402 	bslli	r3, r3, 2
20034260:	10641800 	addk	r3, r4, r3
20034264:	e8630000 	lwi	r3, r3, 0
20034268:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003426c:	e8730014 	lwi	r3, r19, 20
20034270:	e883000c 	lwi	r4, r3, 12
20034274:	e8730018 	lwi	r3, r19, 24
20034278:	64630402 	bslli	r3, r3, 2
2003427c:	10641800 	addk	r3, r4, r3
20034280:	e8830000 	lwi	r4, r3, 0
20034284:	30840001 	addik	r4, r4, 1
20034288:	f8830000 	swi	r4, r3, 0
    return value;
2003428c:	e8730004 	lwi	r3, r19, 4
}
20034290:	10330000 	addk	r1, r19, r0
20034294:	ea610008 	lwi	r19, r1, 8
20034298:	ea81000c 	lwi	r20, r1, 12
2003429c:	30210010 	addik	r1, r1, 16
200342a0:	b60f0008 	rtsd	r15, 8
200342a4:	80000000 	or	r0, r0, r0

200342a8 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200342a8:	3021fff4 	addik	r1, r1, -12
200342ac:	fa610004 	swi	r19, r1, 4
200342b0:	fa810008 	swi	r20, r1, 8
200342b4:	12610000 	addk	r19, r1, r0
200342b8:	96808000 	mfs	r20, rpc
200342bc:	b000dffc 	imm	-8196
200342c0:	3294d6a4 	addik	r20, r20, -10588
200342c4:	f8b30010 	swi	r5, r19, 16
200342c8:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200342cc:	e8730010 	lwi	r3, r19, 16
200342d0:	e8830004 	lwi	r4, r3, 4
200342d4:	e8730010 	lwi	r3, r19, 16
200342d8:	e8630010 	lwi	r3, r3, 16
200342dc:	e8a30000 	lwi	r5, r3, 0
200342e0:	e8730010 	lwi	r3, r19, 16
200342e4:	e8630000 	lwi	r3, r3, 0
200342e8:	3063ffff 	addik	r3, r3, -1
200342ec:	84651800 	and	r3, r5, r3
200342f0:	64630402 	bslli	r3, r3, 2
200342f4:	10641800 	addk	r3, r4, r3
200342f8:	e8930014 	lwi	r4, r19, 20
200342fc:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20034300:	e8730010 	lwi	r3, r19, 16
20034304:	e8630010 	lwi	r3, r3, 16
20034308:	e8830000 	lwi	r4, r3, 0
2003430c:	30840001 	addik	r4, r4, 1
20034310:	f8830000 	swi	r4, r3, 0
}
20034314:	10330000 	addk	r1, r19, r0
20034318:	ea610004 	lwi	r19, r1, 4
2003431c:	ea810008 	lwi	r20, r1, 8
20034320:	3021000c 	addik	r1, r1, 12
20034324:	b60f0008 	rtsd	r15, 8
20034328:	80000000 	or	r0, r0, r0

2003432c <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003432c:	3021fff4 	addik	r1, r1, -12
20034330:	fa610004 	swi	r19, r1, 4
20034334:	fa810008 	swi	r20, r1, 8
20034338:	12610000 	addk	r19, r1, r0
2003433c:	96808000 	mfs	r20, rpc
20034340:	b000dffc 	imm	-8196
20034344:	3294d620 	addik	r20, r20, -10720
20034348:	f8b30010 	swi	r5, r19, 16
2003434c:	f8d30014 	swi	r6, r19, 20
20034350:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20034354:	e8730010 	lwi	r3, r19, 16
20034358:	e8630010 	lwi	r3, r3, 16
2003435c:	e8830000 	lwi	r4, r3, 0
20034360:	e8730010 	lwi	r3, r19, 16
20034364:	e8a3000c 	lwi	r5, r3, 12
20034368:	e8730014 	lwi	r3, r19, 20
2003436c:	64630402 	bslli	r3, r3, 2
20034370:	10651800 	addk	r3, r5, r3
20034374:	e8630000 	lwi	r3, r3, 0
20034378:	14a32000 	rsubk	r5, r3, r4
2003437c:	30600001 	addik	r3, r0, 1
20034380:	e8930018 	lwi	r4, r19, 24
20034384:	16442803 	cmpu	r18, r4, r5
20034388:	bcb20008 	bgei	r18, 8		// 20034390
2003438c:	10600000 	addk	r3, r0, r0
20034390:	a46300ff 	andi	r3, r3, 255
}
20034394:	10330000 	addk	r1, r19, r0
20034398:	ea610004 	lwi	r19, r1, 4
2003439c:	ea810008 	lwi	r20, r1, 8
200343a0:	3021000c 	addik	r1, r1, 12
200343a4:	b60f0008 	rtsd	r15, 8
200343a8:	80000000 	or	r0, r0, r0

200343ac <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200343ac:	3021fff4 	addik	r1, r1, -12
200343b0:	fa610004 	swi	r19, r1, 4
200343b4:	fa810008 	swi	r20, r1, 8
200343b8:	12610000 	addk	r19, r1, r0
200343bc:	96808000 	mfs	r20, rpc
200343c0:	b000dffc 	imm	-8196
200343c4:	3294d5a0 	addik	r20, r20, -10848
200343c8:	f8b30010 	swi	r5, r19, 16
200343cc:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200343d0:	e8730010 	lwi	r3, r19, 16
200343d4:	e8630010 	lwi	r3, r3, 16
200343d8:	e8830000 	lwi	r4, r3, 0
200343dc:	e8730010 	lwi	r3, r19, 16
200343e0:	e8a3000c 	lwi	r5, r3, 12
200343e4:	e8730014 	lwi	r3, r19, 20
200343e8:	64630402 	bslli	r3, r3, 2
200343ec:	10651800 	addk	r3, r5, r3
200343f0:	e8630000 	lwi	r3, r3, 0
200343f4:	14632000 	rsubk	r3, r3, r4
}
200343f8:	10330000 	addk	r1, r19, r0
200343fc:	ea610004 	lwi	r19, r1, 4
20034400:	ea810008 	lwi	r20, r1, 8
20034404:	3021000c 	addik	r1, r1, 12
20034408:	b60f0008 	rtsd	r15, 8
2003440c:	80000000 	or	r0, r0, r0

20034410 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20034410:	3021fff0 	addik	r1, r1, -16
20034414:	fa610008 	swi	r19, r1, 8
20034418:	fa81000c 	swi	r20, r1, 12
2003441c:	12610000 	addk	r19, r1, r0
20034420:	96808000 	mfs	r20, rpc
20034424:	b000dffc 	imm	-8196
20034428:	3294d53c 	addik	r20, r20, -10948
2003442c:	f8b30014 	swi	r5, r19, 20
20034430:	f8d30018 	swi	r6, r19, 24
20034434:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20034438:	f8130004 	swi	r0, r19, 4
2003443c:	b800005c 	bri	92		// 20034498
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20034440:	e8730014 	lwi	r3, r19, 20
20034444:	e8830000 	lwi	r4, r3, 0
20034448:	e8730014 	lwi	r3, r19, 20
2003444c:	e8a3000c 	lwi	r5, r3, 12
20034450:	e8730004 	lwi	r3, r19, 4
20034454:	64630402 	bslli	r3, r3, 2
20034458:	10651800 	addk	r3, r5, r3
2003445c:	e8a30000 	lwi	r5, r3, 0
20034460:	e8730014 	lwi	r3, r19, 20
20034464:	e8630010 	lwi	r3, r3, 16
20034468:	e8630000 	lwi	r3, r3, 0
2003446c:	14632800 	rsubk	r3, r3, r5
20034470:	10641800 	addk	r3, r4, r3
20034474:	30830001 	addik	r4, r3, 1
20034478:	e873001c 	lwi	r3, r19, 28
2003447c:	16441803 	cmpu	r18, r4, r3
20034480:	bc52000c 	blti	r18, 12		// 2003448c
            return 0;
20034484:	10600000 	addk	r3, r0, r0
20034488:	b8000024 	bri	36		// 200344ac
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003448c:	e8730004 	lwi	r3, r19, 4
20034490:	30630001 	addik	r3, r3, 1
20034494:	f8730004 	swi	r3, r19, 4
20034498:	e8930004 	lwi	r4, r19, 4
2003449c:	e8730018 	lwi	r3, r19, 24
200344a0:	16432003 	cmpu	r18, r3, r4
200344a4:	bc52ff9c 	blti	r18, -100		// 20034440
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200344a8:	30600001 	addik	r3, r0, 1
}
200344ac:	10330000 	addk	r1, r19, r0
200344b0:	ea610008 	lwi	r19, r1, 8
200344b4:	ea81000c 	lwi	r20, r1, 12
200344b8:	30210010 	addik	r1, r1, 16
200344bc:	b60f0008 	rtsd	r15, 8
200344c0:	80000000 	or	r0, r0, r0

200344c4 <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200344c4:	3021ffe8 	addik	r1, r1, -24
200344c8:	fa610010 	swi	r19, r1, 16
200344cc:	fa810014 	swi	r20, r1, 20
200344d0:	12610000 	addk	r19, r1, r0
200344d4:	96808000 	mfs	r20, rpc
200344d8:	b000dffc 	imm	-8196
200344dc:	3294d488 	addik	r20, r20, -11128
200344e0:	f8b3001c 	swi	r5, r19, 28
200344e4:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
200344e8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200344ec:	f8130004 	swi	r0, r19, 4
200344f0:	b8000054 	bri	84		// 20034544
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200344f4:	e873001c 	lwi	r3, r19, 28
200344f8:	e8630010 	lwi	r3, r3, 16
200344fc:	e8830000 	lwi	r4, r3, 0
20034500:	e873001c 	lwi	r3, r19, 28
20034504:	e8a3000c 	lwi	r5, r3, 12
20034508:	e8730004 	lwi	r3, r19, 4
2003450c:	64630402 	bslli	r3, r3, 2
20034510:	10651800 	addk	r3, r5, r3
20034514:	e8630000 	lwi	r3, r3, 0
20034518:	14632000 	rsubk	r3, r3, r4
2003451c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20034520:	e8930008 	lwi	r4, r19, 8
20034524:	e873000c 	lwi	r3, r19, 12
20034528:	16441803 	cmpu	r18, r4, r3
2003452c:	bcb20008 	bgei	r18, 8		// 20034534
20034530:	10640000 	addk	r3, r4, r0
20034534:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20034538:	e8730004 	lwi	r3, r19, 4
2003453c:	30630001 	addik	r3, r3, 1
20034540:	f8730004 	swi	r3, r19, 4
20034544:	e8930004 	lwi	r4, r19, 4
20034548:	e8730020 	lwi	r3, r19, 32
2003454c:	16432003 	cmpu	r18, r3, r4
20034550:	bc52ffa4 	blti	r18, -92		// 200344f4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20034554:	e873001c 	lwi	r3, r19, 28
20034558:	e8830000 	lwi	r4, r3, 0
2003455c:	e8730008 	lwi	r3, r19, 8
20034560:	14632000 	rsubk	r3, r3, r4
}
20034564:	10330000 	addk	r1, r19, r0
20034568:	ea610010 	lwi	r19, r1, 16
2003456c:	ea810014 	lwi	r20, r1, 20
20034570:	30210018 	addik	r1, r1, 24
20034574:	b60f0008 	rtsd	r15, 8
20034578:	80000000 	or	r0, r0, r0

2003457c <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003457c:	3021fff0 	addik	r1, r1, -16
20034580:	fa610008 	swi	r19, r1, 8
20034584:	fa81000c 	swi	r20, r1, 12
20034588:	12610000 	addk	r19, r1, r0
2003458c:	96808000 	mfs	r20, rpc
20034590:	b000dffc 	imm	-8196
20034594:	3294d3d0 	addik	r20, r20, -11312
20034598:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2003459c:	e8730014 	lwi	r3, r19, 20
200345a0:	e8630010 	lwi	r3, r3, 16
200345a4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200345a8:	f8130004 	swi	r0, r19, 4
200345ac:	b8000028 	bri	40		// 200345d4
        fifo->read_inds[i] = 0;
200345b0:	e8730014 	lwi	r3, r19, 20
200345b4:	e883000c 	lwi	r4, r3, 12
200345b8:	e8730004 	lwi	r3, r19, 4
200345bc:	64630402 	bslli	r3, r3, 2
200345c0:	10641800 	addk	r3, r4, r3
200345c4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200345c8:	e8730004 	lwi	r3, r19, 4
200345cc:	30630001 	addik	r3, r3, 1
200345d0:	f8730004 	swi	r3, r19, 4
200345d4:	e8730014 	lwi	r3, r19, 20
200345d8:	e8830008 	lwi	r4, r3, 8
200345dc:	e8730004 	lwi	r3, r19, 4
200345e0:	16441803 	cmpu	r18, r4, r3
200345e4:	bc52ffcc 	blti	r18, -52		// 200345b0
        fifo->read_inds[i] = 0;
    }
}
200345e8:	10330000 	addk	r1, r19, r0
200345ec:	ea610008 	lwi	r19, r1, 8
200345f0:	ea81000c 	lwi	r20, r1, 12
200345f4:	30210010 	addik	r1, r1, 16
200345f8:	b60f0008 	rtsd	r15, 8
200345fc:	80000000 	or	r0, r0, r0

20034600 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20034600:	3021ffec 	addik	r1, r1, -20
20034604:	fa61000c 	swi	r19, r1, 12
20034608:	fa810010 	swi	r20, r1, 16
2003460c:	12610000 	addk	r19, r1, r0
20034610:	96808000 	mfs	r20, rpc
20034614:	b000dffc 	imm	-8196
20034618:	3294d34c 	addik	r20, r20, -11444
2003461c:	f8b30018 	swi	r5, r19, 24
20034620:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20034624:	e8730018 	lwi	r3, r19, 24
20034628:	e8830004 	lwi	r4, r3, 4
2003462c:	e8730018 	lwi	r3, r19, 24
20034630:	e8a3000c 	lwi	r5, r3, 12
20034634:	e873001c 	lwi	r3, r19, 28
20034638:	64630402 	bslli	r3, r3, 2
2003463c:	10651800 	addk	r3, r5, r3
20034640:	e8a30000 	lwi	r5, r3, 0
20034644:	e8730018 	lwi	r3, r19, 24
20034648:	e8630000 	lwi	r3, r3, 0
2003464c:	3063ffff 	addik	r3, r3, -1
20034650:	84651800 	and	r3, r5, r3
20034654:	64630403 	bslli	r3, r3, 3
20034658:	10641800 	addk	r3, r4, r3
2003465c:	e8830000 	lwi	r4, r3, 0
20034660:	e8a30004 	lwi	r5, r3, 4
20034664:	f8930004 	swi	r4, r19, 4
20034668:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2003466c:	e8730018 	lwi	r3, r19, 24
20034670:	e883000c 	lwi	r4, r3, 12
20034674:	e873001c 	lwi	r3, r19, 28
20034678:	64630402 	bslli	r3, r3, 2
2003467c:	10641800 	addk	r3, r4, r3
20034680:	e8830000 	lwi	r4, r3, 0
20034684:	30840001 	addik	r4, r4, 1
20034688:	f8830000 	swi	r4, r3, 0
    return value;
2003468c:	e8930004 	lwi	r4, r19, 4
20034690:	e8b30008 	lwi	r5, r19, 8
}
20034694:	10640000 	addk	r3, r4, r0
20034698:	10850000 	addk	r4, r5, r0
2003469c:	10330000 	addk	r1, r19, r0
200346a0:	ea61000c 	lwi	r19, r1, 12
200346a4:	ea810010 	lwi	r20, r1, 16
200346a8:	30210014 	addik	r1, r1, 20
200346ac:	b60f0008 	rtsd	r15, 8
200346b0:	80000000 	or	r0, r0, r0

200346b4 <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200346b4:	3021fff4 	addik	r1, r1, -12
200346b8:	fa610004 	swi	r19, r1, 4
200346bc:	fa810008 	swi	r20, r1, 8
200346c0:	12610000 	addk	r19, r1, r0
200346c4:	96808000 	mfs	r20, rpc
200346c8:	b000dffc 	imm	-8196
200346cc:	3294d298 	addik	r20, r20, -11624
200346d0:	f8b30010 	swi	r5, r19, 16
200346d4:	f8d30014 	swi	r6, r19, 20
200346d8:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200346dc:	e8730010 	lwi	r3, r19, 16
200346e0:	e8830004 	lwi	r4, r3, 4
200346e4:	e8730010 	lwi	r3, r19, 16
200346e8:	e8630010 	lwi	r3, r3, 16
200346ec:	e8a30000 	lwi	r5, r3, 0
200346f0:	e8730010 	lwi	r3, r19, 16
200346f4:	e8630000 	lwi	r3, r3, 0
200346f8:	3063ffff 	addik	r3, r3, -1
200346fc:	84651800 	and	r3, r5, r3
20034700:	64630403 	bslli	r3, r3, 3
20034704:	10641800 	addk	r3, r4, r3
20034708:	e8930014 	lwi	r4, r19, 20
2003470c:	e8b30018 	lwi	r5, r19, 24
20034710:	f8830000 	swi	r4, r3, 0
20034714:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20034718:	e8730010 	lwi	r3, r19, 16
2003471c:	e8630010 	lwi	r3, r3, 16
20034720:	e8830000 	lwi	r4, r3, 0
20034724:	30840001 	addik	r4, r4, 1
20034728:	f8830000 	swi	r4, r3, 0
}
2003472c:	10330000 	addk	r1, r19, r0
20034730:	ea610004 	lwi	r19, r1, 4
20034734:	ea810008 	lwi	r20, r1, 8
20034738:	3021000c 	addik	r1, r1, 12
2003473c:	b60f0008 	rtsd	r15, 8
20034740:	80000000 	or	r0, r0, r0

20034744 <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20034744:	3021fff4 	addik	r1, r1, -12
20034748:	fa610004 	swi	r19, r1, 4
2003474c:	fa810008 	swi	r20, r1, 8
20034750:	12610000 	addk	r19, r1, r0
20034754:	96808000 	mfs	r20, rpc
20034758:	b000dffc 	imm	-8196
2003475c:	3294d208 	addik	r20, r20, -11768
20034760:	f8b30010 	swi	r5, r19, 16
20034764:	f8d30014 	swi	r6, r19, 20
20034768:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003476c:	e8730010 	lwi	r3, r19, 16
20034770:	e8630010 	lwi	r3, r3, 16
20034774:	e8830000 	lwi	r4, r3, 0
20034778:	e8730010 	lwi	r3, r19, 16
2003477c:	e8a3000c 	lwi	r5, r3, 12
20034780:	e8730014 	lwi	r3, r19, 20
20034784:	64630402 	bslli	r3, r3, 2
20034788:	10651800 	addk	r3, r5, r3
2003478c:	e8630000 	lwi	r3, r3, 0
20034790:	14a32000 	rsubk	r5, r3, r4
20034794:	30600001 	addik	r3, r0, 1
20034798:	e8930018 	lwi	r4, r19, 24
2003479c:	16442803 	cmpu	r18, r4, r5
200347a0:	bcb20008 	bgei	r18, 8		// 200347a8
200347a4:	10600000 	addk	r3, r0, r0
200347a8:	a46300ff 	andi	r3, r3, 255
}
200347ac:	10330000 	addk	r1, r19, r0
200347b0:	ea610004 	lwi	r19, r1, 4
200347b4:	ea810008 	lwi	r20, r1, 8
200347b8:	3021000c 	addik	r1, r1, 12
200347bc:	b60f0008 	rtsd	r15, 8
200347c0:	80000000 	or	r0, r0, r0

200347c4 <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200347c4:	3021fff4 	addik	r1, r1, -12
200347c8:	fa610004 	swi	r19, r1, 4
200347cc:	fa810008 	swi	r20, r1, 8
200347d0:	12610000 	addk	r19, r1, r0
200347d4:	96808000 	mfs	r20, rpc
200347d8:	b000dffc 	imm	-8196
200347dc:	3294d188 	addik	r20, r20, -11896
200347e0:	f8b30010 	swi	r5, r19, 16
200347e4:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200347e8:	e8730010 	lwi	r3, r19, 16
200347ec:	e8630010 	lwi	r3, r3, 16
200347f0:	e8830000 	lwi	r4, r3, 0
200347f4:	e8730010 	lwi	r3, r19, 16
200347f8:	e8a3000c 	lwi	r5, r3, 12
200347fc:	e8730014 	lwi	r3, r19, 20
20034800:	64630402 	bslli	r3, r3, 2
20034804:	10651800 	addk	r3, r5, r3
20034808:	e8630000 	lwi	r3, r3, 0
2003480c:	14632000 	rsubk	r3, r3, r4
}
20034810:	10330000 	addk	r1, r19, r0
20034814:	ea610004 	lwi	r19, r1, 4
20034818:	ea810008 	lwi	r20, r1, 8
2003481c:	3021000c 	addik	r1, r1, 12
20034820:	b60f0008 	rtsd	r15, 8
20034824:	80000000 	or	r0, r0, r0

20034828 <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20034828:	3021fff0 	addik	r1, r1, -16
2003482c:	fa610008 	swi	r19, r1, 8
20034830:	fa81000c 	swi	r20, r1, 12
20034834:	12610000 	addk	r19, r1, r0
20034838:	96808000 	mfs	r20, rpc
2003483c:	b000dffc 	imm	-8196
20034840:	3294d124 	addik	r20, r20, -11996
20034844:	f8b30014 	swi	r5, r19, 20
20034848:	f8d30018 	swi	r6, r19, 24
2003484c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20034850:	f8130004 	swi	r0, r19, 4
20034854:	b800005c 	bri	92		// 200348b0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20034858:	e8730014 	lwi	r3, r19, 20
2003485c:	e8830000 	lwi	r4, r3, 0
20034860:	e8730014 	lwi	r3, r19, 20
20034864:	e8a3000c 	lwi	r5, r3, 12
20034868:	e8730004 	lwi	r3, r19, 4
2003486c:	64630402 	bslli	r3, r3, 2
20034870:	10651800 	addk	r3, r5, r3
20034874:	e8a30000 	lwi	r5, r3, 0
20034878:	e8730014 	lwi	r3, r19, 20
2003487c:	e8630010 	lwi	r3, r3, 16
20034880:	e8630000 	lwi	r3, r3, 0
20034884:	14632800 	rsubk	r3, r3, r5
20034888:	10641800 	addk	r3, r4, r3
2003488c:	30830001 	addik	r4, r3, 1
20034890:	e873001c 	lwi	r3, r19, 28
20034894:	16441803 	cmpu	r18, r4, r3
20034898:	bc52000c 	blti	r18, 12		// 200348a4
            return 0;
2003489c:	10600000 	addk	r3, r0, r0
200348a0:	b8000024 	bri	36		// 200348c4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200348a4:	e8730004 	lwi	r3, r19, 4
200348a8:	30630001 	addik	r3, r3, 1
200348ac:	f8730004 	swi	r3, r19, 4
200348b0:	e8930004 	lwi	r4, r19, 4
200348b4:	e8730018 	lwi	r3, r19, 24
200348b8:	16432003 	cmpu	r18, r3, r4
200348bc:	bc52ff9c 	blti	r18, -100		// 20034858
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200348c0:	30600001 	addik	r3, r0, 1
}
200348c4:	10330000 	addk	r1, r19, r0
200348c8:	ea610008 	lwi	r19, r1, 8
200348cc:	ea81000c 	lwi	r20, r1, 12
200348d0:	30210010 	addik	r1, r1, 16
200348d4:	b60f0008 	rtsd	r15, 8
200348d8:	80000000 	or	r0, r0, r0

200348dc <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200348dc:	3021ffe8 	addik	r1, r1, -24
200348e0:	fa610010 	swi	r19, r1, 16
200348e4:	fa810014 	swi	r20, r1, 20
200348e8:	12610000 	addk	r19, r1, r0
200348ec:	96808000 	mfs	r20, rpc
200348f0:	b000dffc 	imm	-8196
200348f4:	3294d070 	addik	r20, r20, -12176
200348f8:	f8b3001c 	swi	r5, r19, 28
200348fc:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20034900:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20034904:	f8130004 	swi	r0, r19, 4
20034908:	b8000054 	bri	84		// 2003495c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003490c:	e873001c 	lwi	r3, r19, 28
20034910:	e8630010 	lwi	r3, r3, 16
20034914:	e8830000 	lwi	r4, r3, 0
20034918:	e873001c 	lwi	r3, r19, 28
2003491c:	e8a3000c 	lwi	r5, r3, 12
20034920:	e8730004 	lwi	r3, r19, 4
20034924:	64630402 	bslli	r3, r3, 2
20034928:	10651800 	addk	r3, r5, r3
2003492c:	e8630000 	lwi	r3, r3, 0
20034930:	14632000 	rsubk	r3, r3, r4
20034934:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20034938:	e8930008 	lwi	r4, r19, 8
2003493c:	e873000c 	lwi	r3, r19, 12
20034940:	16441803 	cmpu	r18, r4, r3
20034944:	bcb20008 	bgei	r18, 8		// 2003494c
20034948:	10640000 	addk	r3, r4, r0
2003494c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20034950:	e8730004 	lwi	r3, r19, 4
20034954:	30630001 	addik	r3, r3, 1
20034958:	f8730004 	swi	r3, r19, 4
2003495c:	e8930004 	lwi	r4, r19, 4
20034960:	e8730020 	lwi	r3, r19, 32
20034964:	16432003 	cmpu	r18, r3, r4
20034968:	bc52ffa4 	blti	r18, -92		// 2003490c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003496c:	e873001c 	lwi	r3, r19, 28
20034970:	e8830000 	lwi	r4, r3, 0
20034974:	e8730008 	lwi	r3, r19, 8
20034978:	14632000 	rsubk	r3, r3, r4
}
2003497c:	10330000 	addk	r1, r19, r0
20034980:	ea610010 	lwi	r19, r1, 16
20034984:	ea810014 	lwi	r20, r1, 20
20034988:	30210018 	addik	r1, r1, 24
2003498c:	b60f0008 	rtsd	r15, 8
20034990:	80000000 	or	r0, r0, r0

20034994 <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20034994:	3021fff0 	addik	r1, r1, -16
20034998:	fa610008 	swi	r19, r1, 8
2003499c:	fa81000c 	swi	r20, r1, 12
200349a0:	12610000 	addk	r19, r1, r0
200349a4:	96808000 	mfs	r20, rpc
200349a8:	b000dffc 	imm	-8196
200349ac:	3294cfb8 	addik	r20, r20, -12360
200349b0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200349b4:	e8730014 	lwi	r3, r19, 20
200349b8:	e8630010 	lwi	r3, r3, 16
200349bc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200349c0:	f8130004 	swi	r0, r19, 4
200349c4:	b8000028 	bri	40		// 200349ec
        fifo->read_inds[i] = 0;
200349c8:	e8730014 	lwi	r3, r19, 20
200349cc:	e883000c 	lwi	r4, r3, 12
200349d0:	e8730004 	lwi	r3, r19, 4
200349d4:	64630402 	bslli	r3, r3, 2
200349d8:	10641800 	addk	r3, r4, r3
200349dc:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200349e0:	e8730004 	lwi	r3, r19, 4
200349e4:	30630001 	addik	r3, r3, 1
200349e8:	f8730004 	swi	r3, r19, 4
200349ec:	e8730014 	lwi	r3, r19, 20
200349f0:	e8830008 	lwi	r4, r3, 8
200349f4:	e8730004 	lwi	r3, r19, 4
200349f8:	16441803 	cmpu	r18, r4, r3
200349fc:	bc52ffcc 	blti	r18, -52		// 200349c8
        fifo->read_inds[i] = 0;
    }
}
20034a00:	10330000 	addk	r1, r19, r0
20034a04:	ea610008 	lwi	r19, r1, 8
20034a08:	ea81000c 	lwi	r20, r1, 12
20034a0c:	30210010 	addik	r1, r1, 16
20034a10:	b60f0008 	rtsd	r15, 8
20034a14:	80000000 	or	r0, r0, r0

20034a18 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20034a18:	3021fff0 	addik	r1, r1, -16
20034a1c:	fa610008 	swi	r19, r1, 8
20034a20:	fa81000c 	swi	r20, r1, 12
20034a24:	12610000 	addk	r19, r1, r0
20034a28:	96808000 	mfs	r20, rpc
20034a2c:	b000dffc 	imm	-8196
20034a30:	3294cf34 	addik	r20, r20, -12492
20034a34:	f8b30014 	swi	r5, r19, 20
20034a38:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20034a3c:	e8730014 	lwi	r3, r19, 20
20034a40:	e8830004 	lwi	r4, r3, 4
20034a44:	e8730014 	lwi	r3, r19, 20
20034a48:	e8a3000c 	lwi	r5, r3, 12
20034a4c:	e8730018 	lwi	r3, r19, 24
20034a50:	64630402 	bslli	r3, r3, 2
20034a54:	10651800 	addk	r3, r5, r3
20034a58:	e8a30000 	lwi	r5, r3, 0
20034a5c:	e8730014 	lwi	r3, r19, 20
20034a60:	e8630000 	lwi	r3, r3, 0
20034a64:	3063ffff 	addik	r3, r3, -1
20034a68:	84651800 	and	r3, r5, r3
20034a6c:	64630402 	bslli	r3, r3, 2
20034a70:	10641800 	addk	r3, r4, r3
20034a74:	e8630000 	lwi	r3, r3, 0
20034a78:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20034a7c:	e8730014 	lwi	r3, r19, 20
20034a80:	e883000c 	lwi	r4, r3, 12
20034a84:	e8730018 	lwi	r3, r19, 24
20034a88:	64630402 	bslli	r3, r3, 2
20034a8c:	10641800 	addk	r3, r4, r3
20034a90:	e8830000 	lwi	r4, r3, 0
20034a94:	30840001 	addik	r4, r4, 1
20034a98:	f8830000 	swi	r4, r3, 0
    return value;
20034a9c:	e8730004 	lwi	r3, r19, 4
}
20034aa0:	10330000 	addk	r1, r19, r0
20034aa4:	ea610008 	lwi	r19, r1, 8
20034aa8:	ea81000c 	lwi	r20, r1, 12
20034aac:	30210010 	addik	r1, r1, 16
20034ab0:	b60f0008 	rtsd	r15, 8
20034ab4:	80000000 	or	r0, r0, r0

20034ab8 <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20034ab8:	3021fff4 	addik	r1, r1, -12
20034abc:	fa610004 	swi	r19, r1, 4
20034ac0:	fa810008 	swi	r20, r1, 8
20034ac4:	12610000 	addk	r19, r1, r0
20034ac8:	96808000 	mfs	r20, rpc
20034acc:	b000dffc 	imm	-8196
20034ad0:	3294ce94 	addik	r20, r20, -12652
20034ad4:	f8b30010 	swi	r5, r19, 16
20034ad8:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20034adc:	e8730010 	lwi	r3, r19, 16
20034ae0:	e8830004 	lwi	r4, r3, 4
20034ae4:	e8730010 	lwi	r3, r19, 16
20034ae8:	e8630010 	lwi	r3, r3, 16
20034aec:	e8a30000 	lwi	r5, r3, 0
20034af0:	e8730010 	lwi	r3, r19, 16
20034af4:	e8630000 	lwi	r3, r3, 0
20034af8:	3063ffff 	addik	r3, r3, -1
20034afc:	84651800 	and	r3, r5, r3
20034b00:	64630402 	bslli	r3, r3, 2
20034b04:	10641800 	addk	r3, r4, r3
20034b08:	e8930014 	lwi	r4, r19, 20
20034b0c:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20034b10:	e8730010 	lwi	r3, r19, 16
20034b14:	e8630010 	lwi	r3, r3, 16
20034b18:	e8830000 	lwi	r4, r3, 0
20034b1c:	30840001 	addik	r4, r4, 1
20034b20:	f8830000 	swi	r4, r3, 0
}
20034b24:	10330000 	addk	r1, r19, r0
20034b28:	ea610004 	lwi	r19, r1, 4
20034b2c:	ea810008 	lwi	r20, r1, 8
20034b30:	3021000c 	addik	r1, r1, 12
20034b34:	b60f0008 	rtsd	r15, 8
20034b38:	80000000 	or	r0, r0, r0

20034b3c <read_BTYPE>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_BTYPE() {
20034b3c:	3021ffdc 	addik	r1, r1, -36
20034b40:	f9e10000 	swi	r15, r1, 0
20034b44:	fa61001c 	swi	r19, r1, 28
20034b48:	fa810020 	swi	r20, r1, 32
20034b4c:	12610000 	addk	r19, r1, r0
20034b50:	96808000 	mfs	r20, rpc
20034b54:	b000dffc 	imm	-8196
20034b58:	3294ce0c 	addik	r20, r20, -12788
		index_BTYPE = decoder_texture_DCReconstruction_invpred_BTYPE->read_inds[3];
20034b5c:	b0000000 	imm	0
20034b60:	e87409c8 	lwi	r3, r20, 2504
20034b64:	e8630000 	lwi	r3, r3, 0
20034b68:	e863000c 	lwi	r3, r3, 12
20034b6c:	e883000c 	lwi	r4, r3, 12
20034b70:	b0000000 	imm	0
20034b74:	e87409f4 	lwi	r3, r20, 2548
20034b78:	f8830000 	swi	r4, r3, 0
		numTokens_BTYPE = index_BTYPE + fifo_i16_get_num_tokens(decoder_texture_DCReconstruction_invpred_BTYPE, 3);
20034b7c:	b0000000 	imm	0
20034b80:	e87409c8 	lwi	r3, r20, 2504
20034b84:	e8630000 	lwi	r3, r3, 0
20034b88:	10a30000 	addk	r5, r3, r0
20034b8c:	30c00003 	addik	r6, r0, 3
20034b90:	b0000000 	imm	0
20034b94:	e89409b8 	lwi	r4, r20, 2488
20034b98:	99fc2000 	brald	r15, r4
20034b9c:	80000000 	or	r0, r0, r0
20034ba0:	10830000 	addk	r4, r3, r0
20034ba4:	b0000000 	imm	0
20034ba8:	e87409f4 	lwi	r3, r20, 2548
20034bac:	e8630000 	lwi	r3, r3, 0
20034bb0:	10841800 	addk	r4, r4, r3
20034bb4:	b0000000 	imm	0
20034bb8:	e87409f8 	lwi	r3, r20, 2552
20034bbc:	f8830000 	swi	r4, r3, 0
	}
20034bc0:	e9e10000 	lwi	r15, r1, 0
20034bc4:	10330000 	addk	r1, r19, r0
20034bc8:	ea61001c 	lwi	r19, r1, 28
20034bcc:	ea810020 	lwi	r20, r1, 32
20034bd0:	30210024 	addik	r1, r1, 36
20034bd4:	b60f0008 	rtsd	r15, 8
20034bd8:	80000000 	or	r0, r0, r0

20034bdc <read_end_BTYPE>:
	
	static void read_end_BTYPE() {
20034bdc:	3021fff4 	addik	r1, r1, -12
20034be0:	fa610004 	swi	r19, r1, 4
20034be4:	fa810008 	swi	r20, r1, 8
20034be8:	12610000 	addk	r19, r1, r0
20034bec:	96808000 	mfs	r20, rpc
20034bf0:	b000dffc 	imm	-8196
20034bf4:	3294cd70 	addik	r20, r20, -12944
		decoder_texture_DCReconstruction_invpred_BTYPE->read_inds[3] = index_BTYPE;
20034bf8:	b0000000 	imm	0
20034bfc:	e87409c8 	lwi	r3, r20, 2504
20034c00:	e8630000 	lwi	r3, r3, 0
20034c04:	e863000c 	lwi	r3, r3, 12
20034c08:	3063000c 	addik	r3, r3, 12
20034c0c:	b0000000 	imm	0
20034c10:	e89409f4 	lwi	r4, r20, 2548
20034c14:	e8840000 	lwi	r4, r4, 0
20034c18:	f8830000 	swi	r4, r3, 0
	}
20034c1c:	10330000 	addk	r1, r19, r0
20034c20:	ea610004 	lwi	r19, r1, 4
20034c24:	ea810008 	lwi	r20, r1, 8
20034c28:	3021000c 	addik	r1, r1, 12
20034c2c:	b60f0008 	rtsd	r15, 8
20034c30:	80000000 	or	r0, r0, r0

20034c34 <read_A>:
	static void read_A() {
20034c34:	3021ffdc 	addik	r1, r1, -36
20034c38:	f9e10000 	swi	r15, r1, 0
20034c3c:	fa61001c 	swi	r19, r1, 28
20034c40:	fa810020 	swi	r20, r1, 32
20034c44:	12610000 	addk	r19, r1, r0
20034c48:	96808000 	mfs	r20, rpc
20034c4c:	b000dffc 	imm	-8196
20034c50:	3294cd14 	addik	r20, r20, -13036
		index_A = decoder_texture_DCReconstruction_invpred_A->read_inds[0];
20034c54:	b0000000 	imm	0
20034c58:	e87409d4 	lwi	r3, r20, 2516
20034c5c:	e8630000 	lwi	r3, r3, 0
20034c60:	e863000c 	lwi	r3, r3, 12
20034c64:	e8830000 	lwi	r4, r3, 0
20034c68:	b0000000 	imm	0
20034c6c:	e87409fc 	lwi	r3, r20, 2556
20034c70:	f8830000 	swi	r4, r3, 0
		numTokens_A = index_A + fifo_i16_get_num_tokens(decoder_texture_DCReconstruction_invpred_A, 0);
20034c74:	b0000000 	imm	0
20034c78:	e87409d4 	lwi	r3, r20, 2516
20034c7c:	e8630000 	lwi	r3, r3, 0
20034c80:	10a30000 	addk	r5, r3, r0
20034c84:	10c00000 	addk	r6, r0, r0
20034c88:	b0000000 	imm	0
20034c8c:	e89409b8 	lwi	r4, r20, 2488
20034c90:	99fc2000 	brald	r15, r4
20034c94:	80000000 	or	r0, r0, r0
20034c98:	10830000 	addk	r4, r3, r0
20034c9c:	b0000000 	imm	0
20034ca0:	e87409fc 	lwi	r3, r20, 2556
20034ca4:	e8630000 	lwi	r3, r3, 0
20034ca8:	10841800 	addk	r4, r4, r3
20034cac:	b0000000 	imm	0
20034cb0:	e8740a00 	lwi	r3, r20, 2560
20034cb4:	f8830000 	swi	r4, r3, 0
	}
20034cb8:	e9e10000 	lwi	r15, r1, 0
20034cbc:	10330000 	addk	r1, r19, r0
20034cc0:	ea61001c 	lwi	r19, r1, 28
20034cc4:	ea810020 	lwi	r20, r1, 32
20034cc8:	30210024 	addik	r1, r1, 36
20034ccc:	b60f0008 	rtsd	r15, 8
20034cd0:	80000000 	or	r0, r0, r0

20034cd4 <read_end_A>:
	
	static void read_end_A() {
20034cd4:	3021fff4 	addik	r1, r1, -12
20034cd8:	fa610004 	swi	r19, r1, 4
20034cdc:	fa810008 	swi	r20, r1, 8
20034ce0:	12610000 	addk	r19, r1, r0
20034ce4:	96808000 	mfs	r20, rpc
20034ce8:	b000dffc 	imm	-8196
20034cec:	3294cc78 	addik	r20, r20, -13192
		decoder_texture_DCReconstruction_invpred_A->read_inds[0] = index_A;
20034cf0:	b0000000 	imm	0
20034cf4:	e87409d4 	lwi	r3, r20, 2516
20034cf8:	e8630000 	lwi	r3, r3, 0
20034cfc:	e863000c 	lwi	r3, r3, 12
20034d00:	b0000000 	imm	0
20034d04:	e89409fc 	lwi	r4, r20, 2556
20034d08:	e8840000 	lwi	r4, r4, 0
20034d0c:	f8830000 	swi	r4, r3, 0
	}
20034d10:	10330000 	addk	r1, r19, r0
20034d14:	ea610004 	lwi	r19, r1, 4
20034d18:	ea810008 	lwi	r20, r1, 8
20034d1c:	3021000c 	addik	r1, r1, 12
20034d20:	b60f0008 	rtsd	r15, 8
20034d24:	80000000 	or	r0, r0, r0

20034d28 <read_B>:
	static void read_B() {
20034d28:	3021ffdc 	addik	r1, r1, -36
20034d2c:	f9e10000 	swi	r15, r1, 0
20034d30:	fa61001c 	swi	r19, r1, 28
20034d34:	fa810020 	swi	r20, r1, 32
20034d38:	12610000 	addk	r19, r1, r0
20034d3c:	96808000 	mfs	r20, rpc
20034d40:	b000dffc 	imm	-8196
20034d44:	3294cc20 	addik	r20, r20, -13280
		index_B = decoder_texture_DCReconstruction_invpred_B->read_inds[0];
20034d48:	b0000000 	imm	0
20034d4c:	e87409d0 	lwi	r3, r20, 2512
20034d50:	e8630000 	lwi	r3, r3, 0
20034d54:	e863000c 	lwi	r3, r3, 12
20034d58:	e8830000 	lwi	r4, r3, 0
20034d5c:	b0000000 	imm	0
20034d60:	e8740a04 	lwi	r3, r20, 2564
20034d64:	f8830000 	swi	r4, r3, 0
		numTokens_B = index_B + fifo_i16_get_num_tokens(decoder_texture_DCReconstruction_invpred_B, 0);
20034d68:	b0000000 	imm	0
20034d6c:	e87409d0 	lwi	r3, r20, 2512
20034d70:	e8630000 	lwi	r3, r3, 0
20034d74:	10a30000 	addk	r5, r3, r0
20034d78:	10c00000 	addk	r6, r0, r0
20034d7c:	b0000000 	imm	0
20034d80:	e89409b8 	lwi	r4, r20, 2488
20034d84:	99fc2000 	brald	r15, r4
20034d88:	80000000 	or	r0, r0, r0
20034d8c:	10830000 	addk	r4, r3, r0
20034d90:	b0000000 	imm	0
20034d94:	e8740a04 	lwi	r3, r20, 2564
20034d98:	e8630000 	lwi	r3, r3, 0
20034d9c:	10841800 	addk	r4, r4, r3
20034da0:	b0000000 	imm	0
20034da4:	e8740a08 	lwi	r3, r20, 2568
20034da8:	f8830000 	swi	r4, r3, 0
	}
20034dac:	e9e10000 	lwi	r15, r1, 0
20034db0:	10330000 	addk	r1, r19, r0
20034db4:	ea61001c 	lwi	r19, r1, 28
20034db8:	ea810020 	lwi	r20, r1, 32
20034dbc:	30210024 	addik	r1, r1, 36
20034dc0:	b60f0008 	rtsd	r15, 8
20034dc4:	80000000 	or	r0, r0, r0

20034dc8 <read_end_B>:
	
	static void read_end_B() {
20034dc8:	3021fff4 	addik	r1, r1, -12
20034dcc:	fa610004 	swi	r19, r1, 4
20034dd0:	fa810008 	swi	r20, r1, 8
20034dd4:	12610000 	addk	r19, r1, r0
20034dd8:	96808000 	mfs	r20, rpc
20034ddc:	b000dffc 	imm	-8196
20034de0:	3294cb84 	addik	r20, r20, -13436
		decoder_texture_DCReconstruction_invpred_B->read_inds[0] = index_B;
20034de4:	b0000000 	imm	0
20034de8:	e87409d0 	lwi	r3, r20, 2512
20034dec:	e8630000 	lwi	r3, r3, 0
20034df0:	e863000c 	lwi	r3, r3, 12
20034df4:	b0000000 	imm	0
20034df8:	e8940a04 	lwi	r4, r20, 2564
20034dfc:	e8840000 	lwi	r4, r4, 0
20034e00:	f8830000 	swi	r4, r3, 0
	}
20034e04:	10330000 	addk	r1, r19, r0
20034e08:	ea610004 	lwi	r19, r1, 4
20034e0c:	ea810008 	lwi	r20, r1, 8
20034e10:	3021000c 	addik	r1, r1, 12
20034e14:	b60f0008 	rtsd	r15, 8
20034e18:	80000000 	or	r0, r0, r0

20034e1c <read_C>:
	static void read_C() {
20034e1c:	3021ffdc 	addik	r1, r1, -36
20034e20:	f9e10000 	swi	r15, r1, 0
20034e24:	fa61001c 	swi	r19, r1, 28
20034e28:	fa810020 	swi	r20, r1, 32
20034e2c:	12610000 	addk	r19, r1, r0
20034e30:	96808000 	mfs	r20, rpc
20034e34:	b000dffc 	imm	-8196
20034e38:	3294cb2c 	addik	r20, r20, -13524
		index_C = decoder_texture_DCReconstruction_invpred_C->read_inds[0];
20034e3c:	b0000000 	imm	0
20034e40:	e87409d8 	lwi	r3, r20, 2520
20034e44:	e8630000 	lwi	r3, r3, 0
20034e48:	e863000c 	lwi	r3, r3, 12
20034e4c:	e8830000 	lwi	r4, r3, 0
20034e50:	b0000000 	imm	0
20034e54:	e8740a0c 	lwi	r3, r20, 2572
20034e58:	f8830000 	swi	r4, r3, 0
		numTokens_C = index_C + fifo_i16_get_num_tokens(decoder_texture_DCReconstruction_invpred_C, 0);
20034e5c:	b0000000 	imm	0
20034e60:	e87409d8 	lwi	r3, r20, 2520
20034e64:	e8630000 	lwi	r3, r3, 0
20034e68:	10a30000 	addk	r5, r3, r0
20034e6c:	10c00000 	addk	r6, r0, r0
20034e70:	b0000000 	imm	0
20034e74:	e89409b8 	lwi	r4, r20, 2488
20034e78:	99fc2000 	brald	r15, r4
20034e7c:	80000000 	or	r0, r0, r0
20034e80:	10830000 	addk	r4, r3, r0
20034e84:	b0000000 	imm	0
20034e88:	e8740a0c 	lwi	r3, r20, 2572
20034e8c:	e8630000 	lwi	r3, r3, 0
20034e90:	10841800 	addk	r4, r4, r3
20034e94:	b0000000 	imm	0
20034e98:	e8740a10 	lwi	r3, r20, 2576
20034e9c:	f8830000 	swi	r4, r3, 0
	}
20034ea0:	e9e10000 	lwi	r15, r1, 0
20034ea4:	10330000 	addk	r1, r19, r0
20034ea8:	ea61001c 	lwi	r19, r1, 28
20034eac:	ea810020 	lwi	r20, r1, 32
20034eb0:	30210024 	addik	r1, r1, 36
20034eb4:	b60f0008 	rtsd	r15, 8
20034eb8:	80000000 	or	r0, r0, r0

20034ebc <read_end_C>:
	
	static void read_end_C() {
20034ebc:	3021fff4 	addik	r1, r1, -12
20034ec0:	fa610004 	swi	r19, r1, 4
20034ec4:	fa810008 	swi	r20, r1, 8
20034ec8:	12610000 	addk	r19, r1, r0
20034ecc:	96808000 	mfs	r20, rpc
20034ed0:	b000dffc 	imm	-8196
20034ed4:	3294ca90 	addik	r20, r20, -13680
		decoder_texture_DCReconstruction_invpred_C->read_inds[0] = index_C;
20034ed8:	b0000000 	imm	0
20034edc:	e87409d8 	lwi	r3, r20, 2520
20034ee0:	e8630000 	lwi	r3, r3, 0
20034ee4:	e863000c 	lwi	r3, r3, 12
20034ee8:	b0000000 	imm	0
20034eec:	e8940a0c 	lwi	r4, r20, 2572
20034ef0:	e8840000 	lwi	r4, r4, 0
20034ef4:	f8830000 	swi	r4, r3, 0
	}
20034ef8:	10330000 	addk	r1, r19, r0
20034efc:	ea610004 	lwi	r19, r1, 4
20034f00:	ea810008 	lwi	r20, r1, 8
20034f04:	3021000c 	addik	r1, r1, 12
20034f08:	b60f0008 	rtsd	r15, 8
20034f0c:	80000000 	or	r0, r0, r0

20034f10 <read_QFS_DC>:
	static void read_QFS_DC() {
20034f10:	3021ffdc 	addik	r1, r1, -36
20034f14:	f9e10000 	swi	r15, r1, 0
20034f18:	fa61001c 	swi	r19, r1, 28
20034f1c:	fa810020 	swi	r20, r1, 32
20034f20:	12610000 	addk	r19, r1, r0
20034f24:	96808000 	mfs	r20, rpc
20034f28:	b000dffc 	imm	-8196
20034f2c:	3294ca38 	addik	r20, r20, -13768
		index_QFS_DC = decoder_texture_DCReconstruction_invpred_QFS_DC->read_inds[0];
20034f30:	b0000000 	imm	0
20034f34:	e87409cc 	lwi	r3, r20, 2508
20034f38:	e8630000 	lwi	r3, r3, 0
20034f3c:	e863000c 	lwi	r3, r3, 12
20034f40:	e8830000 	lwi	r4, r3, 0
20034f44:	b0000000 	imm	0
20034f48:	e8740a14 	lwi	r3, r20, 2580
20034f4c:	f8830000 	swi	r4, r3, 0
		numTokens_QFS_DC = index_QFS_DC + fifo_i16_get_num_tokens(decoder_texture_DCReconstruction_invpred_QFS_DC, 0);
20034f50:	b0000000 	imm	0
20034f54:	e87409cc 	lwi	r3, r20, 2508
20034f58:	e8630000 	lwi	r3, r3, 0
20034f5c:	10a30000 	addk	r5, r3, r0
20034f60:	10c00000 	addk	r6, r0, r0
20034f64:	b0000000 	imm	0
20034f68:	e89409b8 	lwi	r4, r20, 2488
20034f6c:	99fc2000 	brald	r15, r4
20034f70:	80000000 	or	r0, r0, r0
20034f74:	10830000 	addk	r4, r3, r0
20034f78:	b0000000 	imm	0
20034f7c:	e8740a14 	lwi	r3, r20, 2580
20034f80:	e8630000 	lwi	r3, r3, 0
20034f84:	10841800 	addk	r4, r4, r3
20034f88:	b0000000 	imm	0
20034f8c:	e8740a18 	lwi	r3, r20, 2584
20034f90:	f8830000 	swi	r4, r3, 0
	}
20034f94:	e9e10000 	lwi	r15, r1, 0
20034f98:	10330000 	addk	r1, r19, r0
20034f9c:	ea61001c 	lwi	r19, r1, 28
20034fa0:	ea810020 	lwi	r20, r1, 32
20034fa4:	30210024 	addik	r1, r1, 36
20034fa8:	b60f0008 	rtsd	r15, 8
20034fac:	80000000 	or	r0, r0, r0

20034fb0 <read_end_QFS_DC>:
	
	static void read_end_QFS_DC() {
20034fb0:	3021fff4 	addik	r1, r1, -12
20034fb4:	fa610004 	swi	r19, r1, 4
20034fb8:	fa810008 	swi	r20, r1, 8
20034fbc:	12610000 	addk	r19, r1, r0
20034fc0:	96808000 	mfs	r20, rpc
20034fc4:	b000dffc 	imm	-8196
20034fc8:	3294c99c 	addik	r20, r20, -13924
		decoder_texture_DCReconstruction_invpred_QFS_DC->read_inds[0] = index_QFS_DC;
20034fcc:	b0000000 	imm	0
20034fd0:	e87409cc 	lwi	r3, r20, 2508
20034fd4:	e8630000 	lwi	r3, r3, 0
20034fd8:	e863000c 	lwi	r3, r3, 12
20034fdc:	b0000000 	imm	0
20034fe0:	e8940a14 	lwi	r4, r20, 2580
20034fe4:	e8840000 	lwi	r4, r4, 0
20034fe8:	f8830000 	swi	r4, r3, 0
	}
20034fec:	10330000 	addk	r1, r19, r0
20034ff0:	ea610004 	lwi	r19, r1, 4
20034ff4:	ea810008 	lwi	r20, r1, 8
20034ff8:	3021000c 	addik	r1, r1, 12
20034ffc:	b60f0008 	rtsd	r15, 8
20035000:	80000000 	or	r0, r0, r0

20035004 <read_QP>:
	static void read_QP() {
20035004:	3021ffdc 	addik	r1, r1, -36
20035008:	f9e10000 	swi	r15, r1, 0
2003500c:	fa61001c 	swi	r19, r1, 28
20035010:	fa810020 	swi	r20, r1, 32
20035014:	12610000 	addk	r19, r1, r0
20035018:	96808000 	mfs	r20, rpc
2003501c:	b000dffc 	imm	-8196
20035020:	3294c944 	addik	r20, r20, -14012
		index_QP = decoder_texture_DCReconstruction_invpred_QP->read_inds[0];
20035024:	b0000000 	imm	0
20035028:	e87409c4 	lwi	r3, r20, 2500
2003502c:	e8630000 	lwi	r3, r3, 0
20035030:	e863000c 	lwi	r3, r3, 12
20035034:	e8830000 	lwi	r4, r3, 0
20035038:	b0000000 	imm	0
2003503c:	e8740a1c 	lwi	r3, r20, 2588
20035040:	f8830000 	swi	r4, r3, 0
		numTokens_QP = index_QP + fifo_i8_get_num_tokens(decoder_texture_DCReconstruction_invpred_QP, 0);
20035044:	b0000000 	imm	0
20035048:	e87409c4 	lwi	r3, r20, 2500
2003504c:	e8630000 	lwi	r3, r3, 0
20035050:	10a30000 	addk	r5, r3, r0
20035054:	10c00000 	addk	r6, r0, r0
20035058:	b0000000 	imm	0
2003505c:	e89409b0 	lwi	r4, r20, 2480
20035060:	99fc2000 	brald	r15, r4
20035064:	80000000 	or	r0, r0, r0
20035068:	10830000 	addk	r4, r3, r0
2003506c:	b0000000 	imm	0
20035070:	e8740a1c 	lwi	r3, r20, 2588
20035074:	e8630000 	lwi	r3, r3, 0
20035078:	10841800 	addk	r4, r4, r3
2003507c:	b0000000 	imm	0
20035080:	e8740a20 	lwi	r3, r20, 2592
20035084:	f8830000 	swi	r4, r3, 0
	}
20035088:	e9e10000 	lwi	r15, r1, 0
2003508c:	10330000 	addk	r1, r19, r0
20035090:	ea61001c 	lwi	r19, r1, 28
20035094:	ea810020 	lwi	r20, r1, 32
20035098:	30210024 	addik	r1, r1, 36
2003509c:	b60f0008 	rtsd	r15, 8
200350a0:	80000000 	or	r0, r0, r0

200350a4 <read_end_QP>:
	
	static void read_end_QP() {
200350a4:	3021fff4 	addik	r1, r1, -12
200350a8:	fa610004 	swi	r19, r1, 4
200350ac:	fa810008 	swi	r20, r1, 8
200350b0:	12610000 	addk	r19, r1, r0
200350b4:	96808000 	mfs	r20, rpc
200350b8:	b000dffc 	imm	-8196
200350bc:	3294c8a8 	addik	r20, r20, -14168
		decoder_texture_DCReconstruction_invpred_QP->read_inds[0] = index_QP;
200350c0:	b0000000 	imm	0
200350c4:	e87409c4 	lwi	r3, r20, 2500
200350c8:	e8630000 	lwi	r3, r3, 0
200350cc:	e863000c 	lwi	r3, r3, 12
200350d0:	b0000000 	imm	0
200350d4:	e8940a1c 	lwi	r4, r20, 2588
200350d8:	e8840000 	lwi	r4, r4, 0
200350dc:	f8830000 	swi	r4, r3, 0
	}
200350e0:	10330000 	addk	r1, r19, r0
200350e4:	ea610004 	lwi	r19, r1, 4
200350e8:	ea810008 	lwi	r20, r1, 8
200350ec:	3021000c 	addik	r1, r1, 12
200350f0:	b60f0008 	rtsd	r15, 8
200350f4:	80000000 	or	r0, r0, r0

200350f8 <write_QF_DC>:

	static void write_QF_DC() {
200350f8:	3021ffdc 	addik	r1, r1, -36
200350fc:	f9e10000 	swi	r15, r1, 0
20035100:	fa61001c 	swi	r19, r1, 28
20035104:	fa810020 	swi	r20, r1, 32
20035108:	12610000 	addk	r19, r1, r0
2003510c:	96808000 	mfs	r20, rpc
20035110:	b000dffc 	imm	-8196
20035114:	3294c850 	addik	r20, r20, -14256
		index_QF_DC = (*decoder_texture_DCReconstruction_invpred_QF_DC->write_ind);
20035118:	b0000000 	imm	0
2003511c:	e87409e0 	lwi	r3, r20, 2528
20035120:	e8630000 	lwi	r3, r3, 0
20035124:	e8630010 	lwi	r3, r3, 16
20035128:	e8830000 	lwi	r4, r3, 0
2003512c:	b0000000 	imm	0
20035130:	e8740a24 	lwi	r3, r20, 2596
20035134:	f8830000 	swi	r4, r3, 0
		numFree_QF_DC = index_QF_DC + fifo_i16_get_room(decoder_texture_DCReconstruction_invpred_QF_DC, NUM_READERS_QF_DC);
20035138:	b0000000 	imm	0
2003513c:	e87409e0 	lwi	r3, r20, 2528
20035140:	e8630000 	lwi	r3, r3, 0
20035144:	10a30000 	addk	r5, r3, r0
20035148:	30c00001 	addik	r6, r0, 1
2003514c:	b0000000 	imm	0
20035150:	e89409bc 	lwi	r4, r20, 2492
20035154:	99fc2000 	brald	r15, r4
20035158:	80000000 	or	r0, r0, r0
2003515c:	10830000 	addk	r4, r3, r0
20035160:	b0000000 	imm	0
20035164:	e8740a24 	lwi	r3, r20, 2596
20035168:	e8630000 	lwi	r3, r3, 0
2003516c:	10841800 	addk	r4, r4, r3
20035170:	b0000000 	imm	0
20035174:	e8740a28 	lwi	r3, r20, 2600
20035178:	f8830000 	swi	r4, r3, 0
	}
2003517c:	e9e10000 	lwi	r15, r1, 0
20035180:	10330000 	addk	r1, r19, r0
20035184:	ea61001c 	lwi	r19, r1, 28
20035188:	ea810020 	lwi	r20, r1, 32
2003518c:	30210024 	addik	r1, r1, 36
20035190:	b60f0008 	rtsd	r15, 8
20035194:	80000000 	or	r0, r0, r0

20035198 <write_end_QF_DC>:
	
	static void write_end_QF_DC() {
20035198:	3021fff4 	addik	r1, r1, -12
2003519c:	fa610004 	swi	r19, r1, 4
200351a0:	fa810008 	swi	r20, r1, 8
200351a4:	12610000 	addk	r19, r1, r0
200351a8:	96808000 	mfs	r20, rpc
200351ac:	b000dffc 	imm	-8196
200351b0:	3294c7b4 	addik	r20, r20, -14412
		(*decoder_texture_DCReconstruction_invpred_QF_DC->write_ind) = index_QF_DC;
200351b4:	b0000000 	imm	0
200351b8:	e87409e0 	lwi	r3, r20, 2528
200351bc:	e8630000 	lwi	r3, r3, 0
200351c0:	e8630010 	lwi	r3, r3, 16
200351c4:	b0000000 	imm	0
200351c8:	e8940a24 	lwi	r4, r20, 2596
200351cc:	e8840000 	lwi	r4, r4, 0
200351d0:	f8830000 	swi	r4, r3, 0
	}
200351d4:	10330000 	addk	r1, r19, r0
200351d8:	ea610004 	lwi	r19, r1, 4
200351dc:	ea810008 	lwi	r20, r1, 8
200351e0:	3021000c 	addik	r1, r1, 12
200351e4:	b60f0008 	rtsd	r15, 8
200351e8:	80000000 	or	r0, r0, r0

200351ec <write_PTR>:
	static void write_PTR() {
200351ec:	3021ffdc 	addik	r1, r1, -36
200351f0:	f9e10000 	swi	r15, r1, 0
200351f4:	fa61001c 	swi	r19, r1, 28
200351f8:	fa810020 	swi	r20, r1, 32
200351fc:	12610000 	addk	r19, r1, r0
20035200:	96808000 	mfs	r20, rpc
20035204:	b000dffc 	imm	-8196
20035208:	3294c75c 	addik	r20, r20, -14500
		index_PTR = (*decoder_texture_DCReconstruction_invpred_PTR->write_ind);
2003520c:	b0000000 	imm	0
20035210:	e87409dc 	lwi	r3, r20, 2524
20035214:	e8630000 	lwi	r3, r3, 0
20035218:	e8630010 	lwi	r3, r3, 16
2003521c:	e8830000 	lwi	r4, r3, 0
20035220:	b0000000 	imm	0
20035224:	e8740a2c 	lwi	r3, r20, 2604
20035228:	f8830000 	swi	r4, r3, 0
		numFree_PTR = index_PTR + fifo_i16_get_room(decoder_texture_DCReconstruction_invpred_PTR, NUM_READERS_PTR);
2003522c:	b0000000 	imm	0
20035230:	e87409dc 	lwi	r3, r20, 2524
20035234:	e8630000 	lwi	r3, r3, 0
20035238:	10a30000 	addk	r5, r3, r0
2003523c:	30c00001 	addik	r6, r0, 1
20035240:	b0000000 	imm	0
20035244:	e89409bc 	lwi	r4, r20, 2492
20035248:	99fc2000 	brald	r15, r4
2003524c:	80000000 	or	r0, r0, r0
20035250:	10830000 	addk	r4, r3, r0
20035254:	b0000000 	imm	0
20035258:	e8740a2c 	lwi	r3, r20, 2604
2003525c:	e8630000 	lwi	r3, r3, 0
20035260:	10841800 	addk	r4, r4, r3
20035264:	b0000000 	imm	0
20035268:	e8740a30 	lwi	r3, r20, 2608
2003526c:	f8830000 	swi	r4, r3, 0
	}
20035270:	e9e10000 	lwi	r15, r1, 0
20035274:	10330000 	addk	r1, r19, r0
20035278:	ea61001c 	lwi	r19, r1, 28
2003527c:	ea810020 	lwi	r20, r1, 32
20035280:	30210024 	addik	r1, r1, 36
20035284:	b60f0008 	rtsd	r15, 8
20035288:	80000000 	or	r0, r0, r0

2003528c <write_end_PTR>:
	
	static void write_end_PTR() {
2003528c:	3021fff4 	addik	r1, r1, -12
20035290:	fa610004 	swi	r19, r1, 4
20035294:	fa810008 	swi	r20, r1, 8
20035298:	12610000 	addk	r19, r1, r0
2003529c:	96808000 	mfs	r20, rpc
200352a0:	b000dffc 	imm	-8196
200352a4:	3294c6c0 	addik	r20, r20, -14656
		(*decoder_texture_DCReconstruction_invpred_PTR->write_ind) = index_PTR;
200352a8:	b0000000 	imm	0
200352ac:	e87409dc 	lwi	r3, r20, 2524
200352b0:	e8630000 	lwi	r3, r3, 0
200352b4:	e8630010 	lwi	r3, r3, 16
200352b8:	b0000000 	imm	0
200352bc:	e8940a2c 	lwi	r4, r20, 2604
200352c0:	e8840000 	lwi	r4, r4, 0
200352c4:	f8830000 	swi	r4, r3, 0
	}
200352c8:	10330000 	addk	r1, r19, r0
200352cc:	ea610004 	lwi	r19, r1, 4
200352d0:	ea810008 	lwi	r20, r1, 8
200352d4:	3021000c 	addik	r1, r1, 12
200352d8:	b60f0008 	rtsd	r15, 8
200352dc:	80000000 	or	r0, r0, r0

200352e0 <write_AC_PRED_DIR>:
	static void write_AC_PRED_DIR() {
200352e0:	3021ffdc 	addik	r1, r1, -36
200352e4:	f9e10000 	swi	r15, r1, 0
200352e8:	fa61001c 	swi	r19, r1, 28
200352ec:	fa810020 	swi	r20, r1, 32
200352f0:	12610000 	addk	r19, r1, r0
200352f4:	96808000 	mfs	r20, rpc
200352f8:	b000dffc 	imm	-8196
200352fc:	3294c668 	addik	r20, r20, -14744
		index_AC_PRED_DIR = (*decoder_texture_DCReconstruction_invpred_AC_PRED_DIR->write_ind);
20035300:	b0000000 	imm	0
20035304:	e87409ec 	lwi	r3, r20, 2540
20035308:	e8630000 	lwi	r3, r3, 0
2003530c:	e8630010 	lwi	r3, r3, 16
20035310:	e8830000 	lwi	r4, r3, 0
20035314:	b0000000 	imm	0
20035318:	e8740a34 	lwi	r3, r20, 2612
2003531c:	f8830000 	swi	r4, r3, 0
		numFree_AC_PRED_DIR = index_AC_PRED_DIR + fifo_i8_get_room(decoder_texture_DCReconstruction_invpred_AC_PRED_DIR, NUM_READERS_AC_PRED_DIR);
20035320:	b0000000 	imm	0
20035324:	e87409ec 	lwi	r3, r20, 2540
20035328:	e8630000 	lwi	r3, r3, 0
2003532c:	10a30000 	addk	r5, r3, r0
20035330:	30c00001 	addik	r6, r0, 1
20035334:	b0000000 	imm	0
20035338:	e89409b4 	lwi	r4, r20, 2484
2003533c:	99fc2000 	brald	r15, r4
20035340:	80000000 	or	r0, r0, r0
20035344:	10830000 	addk	r4, r3, r0
20035348:	b0000000 	imm	0
2003534c:	e8740a34 	lwi	r3, r20, 2612
20035350:	e8630000 	lwi	r3, r3, 0
20035354:	10841800 	addk	r4, r4, r3
20035358:	b0000000 	imm	0
2003535c:	e8740a38 	lwi	r3, r20, 2616
20035360:	f8830000 	swi	r4, r3, 0
	}
20035364:	e9e10000 	lwi	r15, r1, 0
20035368:	10330000 	addk	r1, r19, r0
2003536c:	ea61001c 	lwi	r19, r1, 28
20035370:	ea810020 	lwi	r20, r1, 32
20035374:	30210024 	addik	r1, r1, 36
20035378:	b60f0008 	rtsd	r15, 8
2003537c:	80000000 	or	r0, r0, r0

20035380 <write_end_AC_PRED_DIR>:
	
	static void write_end_AC_PRED_DIR() {
20035380:	3021fff4 	addik	r1, r1, -12
20035384:	fa610004 	swi	r19, r1, 4
20035388:	fa810008 	swi	r20, r1, 8
2003538c:	12610000 	addk	r19, r1, r0
20035390:	96808000 	mfs	r20, rpc
20035394:	b000dffc 	imm	-8196
20035398:	3294c5cc 	addik	r20, r20, -14900
		(*decoder_texture_DCReconstruction_invpred_AC_PRED_DIR->write_ind) = index_AC_PRED_DIR;
2003539c:	b0000000 	imm	0
200353a0:	e87409ec 	lwi	r3, r20, 2540
200353a4:	e8630000 	lwi	r3, r3, 0
200353a8:	e8630010 	lwi	r3, r3, 16
200353ac:	b0000000 	imm	0
200353b0:	e8940a34 	lwi	r4, r20, 2612
200353b4:	e8840000 	lwi	r4, r4, 0
200353b8:	f8830000 	swi	r4, r3, 0
	}
200353bc:	10330000 	addk	r1, r19, r0
200353c0:	ea610004 	lwi	r19, r1, 4
200353c4:	ea810008 	lwi	r20, r1, 8
200353c8:	3021000c 	addik	r1, r1, 12
200353cc:	b60f0008 	rtsd	r15, 8
200353d0:	80000000 	or	r0, r0, r0

200353d4 <write_MODE>:
	static void write_MODE() {
200353d4:	3021ffdc 	addik	r1, r1, -36
200353d8:	f9e10000 	swi	r15, r1, 0
200353dc:	fa61001c 	swi	r19, r1, 28
200353e0:	fa810020 	swi	r20, r1, 32
200353e4:	12610000 	addk	r19, r1, r0
200353e8:	96808000 	mfs	r20, rpc
200353ec:	b000dffc 	imm	-8196
200353f0:	3294c574 	addik	r20, r20, -14988
		index_MODE = (*decoder_texture_DCReconstruction_invpred_MODE->write_ind);
200353f4:	b0000000 	imm	0
200353f8:	e87409e4 	lwi	r3, r20, 2532
200353fc:	e8630000 	lwi	r3, r3, 0
20035400:	e8630010 	lwi	r3, r3, 16
20035404:	e8830000 	lwi	r4, r3, 0
20035408:	b0000000 	imm	0
2003540c:	e8740a3c 	lwi	r3, r20, 2620
20035410:	f8830000 	swi	r4, r3, 0
		numFree_MODE = index_MODE + fifo_i8_get_room(decoder_texture_DCReconstruction_invpred_MODE, NUM_READERS_MODE);
20035414:	b0000000 	imm	0
20035418:	e87409e4 	lwi	r3, r20, 2532
2003541c:	e8630000 	lwi	r3, r3, 0
20035420:	10a30000 	addk	r5, r3, r0
20035424:	30c00001 	addik	r6, r0, 1
20035428:	b0000000 	imm	0
2003542c:	e89409b4 	lwi	r4, r20, 2484
20035430:	99fc2000 	brald	r15, r4
20035434:	80000000 	or	r0, r0, r0
20035438:	10830000 	addk	r4, r3, r0
2003543c:	b0000000 	imm	0
20035440:	e8740a3c 	lwi	r3, r20, 2620
20035444:	e8630000 	lwi	r3, r3, 0
20035448:	10841800 	addk	r4, r4, r3
2003544c:	b0000000 	imm	0
20035450:	e8740a40 	lwi	r3, r20, 2624
20035454:	f8830000 	swi	r4, r3, 0
	}
20035458:	e9e10000 	lwi	r15, r1, 0
2003545c:	10330000 	addk	r1, r19, r0
20035460:	ea61001c 	lwi	r19, r1, 28
20035464:	ea810020 	lwi	r20, r1, 32
20035468:	30210024 	addik	r1, r1, 36
2003546c:	b60f0008 	rtsd	r15, 8
20035470:	80000000 	or	r0, r0, r0

20035474 <write_end_MODE>:
	
	static void write_end_MODE() {
20035474:	3021fff4 	addik	r1, r1, -12
20035478:	fa610004 	swi	r19, r1, 4
2003547c:	fa810008 	swi	r20, r1, 8
20035480:	12610000 	addk	r19, r1, r0
20035484:	96808000 	mfs	r20, rpc
20035488:	b000dffc 	imm	-8196
2003548c:	3294c4d8 	addik	r20, r20, -15144
		(*decoder_texture_DCReconstruction_invpred_MODE->write_ind) = index_MODE;
20035490:	b0000000 	imm	0
20035494:	e87409e4 	lwi	r3, r20, 2532
20035498:	e8630000 	lwi	r3, r3, 0
2003549c:	e8630010 	lwi	r3, r3, 16
200354a0:	b0000000 	imm	0
200354a4:	e8940a3c 	lwi	r4, r20, 2620
200354a8:	e8840000 	lwi	r4, r4, 0
200354ac:	f8830000 	swi	r4, r3, 0
	}
200354b0:	10330000 	addk	r1, r19, r0
200354b4:	ea610004 	lwi	r19, r1, 4
200354b8:	ea810008 	lwi	r20, r1, 8
200354bc:	3021000c 	addik	r1, r1, 12
200354c0:	b60f0008 	rtsd	r15, 8
200354c4:	80000000 	or	r0, r0, r0

200354c8 <write_SIGNED>:
	static void write_SIGNED() {
200354c8:	3021ffdc 	addik	r1, r1, -36
200354cc:	f9e10000 	swi	r15, r1, 0
200354d0:	fa61001c 	swi	r19, r1, 28
200354d4:	fa810020 	swi	r20, r1, 32
200354d8:	12610000 	addk	r19, r1, r0
200354dc:	96808000 	mfs	r20, rpc
200354e0:	b000dffc 	imm	-8196
200354e4:	3294c480 	addik	r20, r20, -15232
		index_SIGNED = (*decoder_texture_DCReconstruction_invpred_SIGNED->write_ind);
200354e8:	b0000000 	imm	0
200354ec:	e87409e8 	lwi	r3, r20, 2536
200354f0:	e8630000 	lwi	r3, r3, 0
200354f4:	e8630010 	lwi	r3, r3, 16
200354f8:	e8830000 	lwi	r4, r3, 0
200354fc:	b0000000 	imm	0
20035500:	e8740a44 	lwi	r3, r20, 2628
20035504:	f8830000 	swi	r4, r3, 0
		numFree_SIGNED = index_SIGNED + fifo_i32_get_room(decoder_texture_DCReconstruction_invpred_SIGNED, NUM_READERS_SIGNED);
20035508:	b0000000 	imm	0
2003550c:	e87409e8 	lwi	r3, r20, 2536
20035510:	e8630000 	lwi	r3, r3, 0
20035514:	10a30000 	addk	r5, r3, r0
20035518:	30c00001 	addik	r6, r0, 1
2003551c:	b0000000 	imm	0
20035520:	e89409c0 	lwi	r4, r20, 2496
20035524:	99fc2000 	brald	r15, r4
20035528:	80000000 	or	r0, r0, r0
2003552c:	10830000 	addk	r4, r3, r0
20035530:	b0000000 	imm	0
20035534:	e8740a44 	lwi	r3, r20, 2628
20035538:	e8630000 	lwi	r3, r3, 0
2003553c:	10841800 	addk	r4, r4, r3
20035540:	b0000000 	imm	0
20035544:	e8740a48 	lwi	r3, r20, 2632
20035548:	f8830000 	swi	r4, r3, 0
	}
2003554c:	e9e10000 	lwi	r15, r1, 0
20035550:	10330000 	addk	r1, r19, r0
20035554:	ea61001c 	lwi	r19, r1, 28
20035558:	ea810020 	lwi	r20, r1, 32
2003555c:	30210024 	addik	r1, r1, 36
20035560:	b60f0008 	rtsd	r15, 8
20035564:	80000000 	or	r0, r0, r0

20035568 <write_end_SIGNED>:
	
	static void write_end_SIGNED() {
20035568:	3021fff4 	addik	r1, r1, -12
2003556c:	fa610004 	swi	r19, r1, 4
20035570:	fa810008 	swi	r20, r1, 8
20035574:	12610000 	addk	r19, r1, r0
20035578:	96808000 	mfs	r20, rpc
2003557c:	b000dffc 	imm	-8196
20035580:	3294c3e4 	addik	r20, r20, -15388
		(*decoder_texture_DCReconstruction_invpred_SIGNED->write_ind) = index_SIGNED;
20035584:	b0000000 	imm	0
20035588:	e87409e8 	lwi	r3, r20, 2536
2003558c:	e8630000 	lwi	r3, r3, 0
20035590:	e8630010 	lwi	r3, r3, 16
20035594:	b0000000 	imm	0
20035598:	e8940a44 	lwi	r4, r20, 2628
2003559c:	e8840000 	lwi	r4, r4, 0
200355a0:	f8830000 	swi	r4, r3, 0
	}
200355a4:	10330000 	addk	r1, r19, r0
200355a8:	ea610004 	lwi	r19, r1, 4
200355ac:	ea810008 	lwi	r20, r1, 8
200355b0:	3021000c 	addik	r1, r1, 12
200355b4:	b60f0008 	rtsd	r15, 8
200355b8:	80000000 	or	r0, r0, r0

200355bc <write_QUANT>:
	static void write_QUANT() {
200355bc:	3021ffdc 	addik	r1, r1, -36
200355c0:	f9e10000 	swi	r15, r1, 0
200355c4:	fa61001c 	swi	r19, r1, 28
200355c8:	fa810020 	swi	r20, r1, 32
200355cc:	12610000 	addk	r19, r1, r0
200355d0:	96808000 	mfs	r20, rpc
200355d4:	b000dffc 	imm	-8196
200355d8:	3294c38c 	addik	r20, r20, -15476
		index_QUANT = (*decoder_texture_DCReconstruction_invpred_QUANT->write_ind);
200355dc:	b0000000 	imm	0
200355e0:	e87409f0 	lwi	r3, r20, 2544
200355e4:	e8630000 	lwi	r3, r3, 0
200355e8:	e8630010 	lwi	r3, r3, 16
200355ec:	e8830000 	lwi	r4, r3, 0
200355f0:	b0000000 	imm	0
200355f4:	e8740a4c 	lwi	r3, r20, 2636
200355f8:	f8830000 	swi	r4, r3, 0
		numFree_QUANT = index_QUANT + fifo_i8_get_room(decoder_texture_DCReconstruction_invpred_QUANT, NUM_READERS_QUANT);
200355fc:	b0000000 	imm	0
20035600:	e87409f0 	lwi	r3, r20, 2544
20035604:	e8630000 	lwi	r3, r3, 0
20035608:	10a30000 	addk	r5, r3, r0
2003560c:	30c00001 	addik	r6, r0, 1
20035610:	b0000000 	imm	0
20035614:	e89409b4 	lwi	r4, r20, 2484
20035618:	99fc2000 	brald	r15, r4
2003561c:	80000000 	or	r0, r0, r0
20035620:	10830000 	addk	r4, r3, r0
20035624:	b0000000 	imm	0
20035628:	e8740a4c 	lwi	r3, r20, 2636
2003562c:	e8630000 	lwi	r3, r3, 0
20035630:	10841800 	addk	r4, r4, r3
20035634:	b0000000 	imm	0
20035638:	e8740a50 	lwi	r3, r20, 2640
2003563c:	f8830000 	swi	r4, r3, 0
	}
20035640:	e9e10000 	lwi	r15, r1, 0
20035644:	10330000 	addk	r1, r19, r0
20035648:	ea61001c 	lwi	r19, r1, 28
2003564c:	ea810020 	lwi	r20, r1, 32
20035650:	30210024 	addik	r1, r1, 36
20035654:	b60f0008 	rtsd	r15, 8
20035658:	80000000 	or	r0, r0, r0

2003565c <write_end_QUANT>:
	
	static void write_end_QUANT() {
2003565c:	3021fff4 	addik	r1, r1, -12
20035660:	fa610004 	swi	r19, r1, 4
20035664:	fa810008 	swi	r20, r1, 8
20035668:	12610000 	addk	r19, r1, r0
2003566c:	96808000 	mfs	r20, rpc
20035670:	b000dffc 	imm	-8196
20035674:	3294c2f0 	addik	r20, r20, -15632
		(*decoder_texture_DCReconstruction_invpred_QUANT->write_ind) = index_QUANT;
20035678:	b0000000 	imm	0
2003567c:	e87409f0 	lwi	r3, r20, 2544
20035680:	e8630000 	lwi	r3, r3, 0
20035684:	e8630010 	lwi	r3, r3, 16
20035688:	b0000000 	imm	0
2003568c:	e8940a4c 	lwi	r4, r20, 2636
20035690:	e8840000 	lwi	r4, r4, 0
20035694:	f8830000 	swi	r4, r3, 0
	}
20035698:	10330000 	addk	r1, r19, r0
2003569c:	ea610004 	lwi	r19, r1, 4
200356a0:	ea810008 	lwi	r20, r1, 8
200356a4:	3021000c 	addik	r1, r1, 12
200356a8:	b60f0008 	rtsd	r15, 8
200356ac:	80000000 	or	r0, r0, r0

200356b0 <Math_abs>:
	// Functions/procedures
	static i32 Math_abs(i32 x);
	static i32 saturate(i32 x);
	static i8 dc_scaler();

	static i32 Math_abs(i32 x) {
200356b0:	3021fff0 	addik	r1, r1, -16
200356b4:	fa610008 	swi	r19, r1, 8
200356b8:	fa81000c 	swi	r20, r1, 12
200356bc:	12610000 	addk	r19, r1, r0
200356c0:	96808000 	mfs	r20, rpc
200356c4:	b000dffc 	imm	-8196
200356c8:	3294c29c 	addik	r20, r20, -15716
200356cc:	f8b30014 	swi	r5, r19, 20
		i32 tmp_if;
	
		if (x > 0) {
200356d0:	e8730014 	lwi	r3, r19, 20
200356d4:	bc630010 	blei	r3, 16		// 200356e4
			tmp_if = x;
200356d8:	e8730014 	lwi	r3, r19, 20
200356dc:	f8730004 	swi	r3, r19, 4
200356e0:	b8000010 	bri	16		// 200356f0
		} else {
			tmp_if = -x;
200356e4:	e8730014 	lwi	r3, r19, 20
200356e8:	14630000 	rsubk	r3, r3, r0
200356ec:	f8730004 	swi	r3, r19, 4
		}
		return tmp_if;
200356f0:	e8730004 	lwi	r3, r19, 4
	}
200356f4:	10330000 	addk	r1, r19, r0
200356f8:	ea610008 	lwi	r19, r1, 8
200356fc:	ea81000c 	lwi	r20, r1, 12
20035700:	30210010 	addik	r1, r1, 16
20035704:	b60f0008 	rtsd	r15, 8
20035708:	80000000 	or	r0, r0, r0

2003570c <saturate>:
	static i32 saturate(i32 x) {
2003570c:	3021ffe8 	addik	r1, r1, -24
20035710:	fa610010 	swi	r19, r1, 16
20035714:	fa810014 	swi	r20, r1, 20
20035718:	12610000 	addk	r19, r1, r0
2003571c:	96808000 	mfs	r20, rpc
20035720:	b000dffc 	imm	-8196
20035724:	3294c240 	addik	r20, r20, -15808
20035728:	f8b3001c 	swi	r5, r19, 28
		i32 minus;
		i32 plus;
		i32 tmp_if;
	
		minus = x < -2048;
2003572c:	30600001 	addik	r3, r0, 1
20035730:	e8b3001c 	lwi	r5, r19, 28
20035734:	3080f800 	addik	r4, r0, -2048
20035738:	16442801 	cmp	r18, r4, r5
2003573c:	bc520008 	blti	r18, 8		// 20035744
20035740:	10600000 	addk	r3, r0, r0
20035744:	a46300ff 	andi	r3, r3, 255
20035748:	f8730008 	swi	r3, r19, 8
		plus = x > 2047;
2003574c:	30600001 	addik	r3, r0, 1
20035750:	e8b3001c 	lwi	r5, r19, 28
20035754:	308007ff 	addik	r4, r0, 2047
20035758:	16452001 	cmp	r18, r5, r4
2003575c:	bc520008 	blti	r18, 8		// 20035764
20035760:	10600000 	addk	r3, r0, r0
20035764:	a46300ff 	andi	r3, r3, 255
20035768:	f873000c 	swi	r3, r19, 12
		if (minus) {
2003576c:	e8730008 	lwi	r3, r19, 8
20035770:	bc030010 	beqi	r3, 16		// 20035780
			tmp_if = -2048;
20035774:	3060f800 	addik	r3, r0, -2048
20035778:	f8730004 	swi	r3, r19, 4
2003577c:	b8000020 	bri	32		// 2003579c
		} else {
			if (plus) {
20035780:	e873000c 	lwi	r3, r19, 12
20035784:	bc030010 	beqi	r3, 16		// 20035794
				tmp_if = 2047;
20035788:	306007ff 	addik	r3, r0, 2047
2003578c:	f8730004 	swi	r3, r19, 4
20035790:	b800000c 	bri	12		// 2003579c
			} else {
				tmp_if = x;
20035794:	e873001c 	lwi	r3, r19, 28
20035798:	f8730004 	swi	r3, r19, 4
			}
		}
		return tmp_if;
2003579c:	e8730004 	lwi	r3, r19, 4
	}
200357a0:	10330000 	addk	r1, r19, r0
200357a4:	ea610010 	lwi	r19, r1, 16
200357a8:	ea810014 	lwi	r20, r1, 20
200357ac:	30210018 	addik	r1, r1, 24
200357b0:	b60f0008 	rtsd	r15, 8
200357b4:	80000000 	or	r0, r0, r0

200357b8 <dc_scaler>:
	static i8 dc_scaler() {
200357b8:	3021fff0 	addik	r1, r1, -16
200357bc:	fa610008 	swi	r19, r1, 8
200357c0:	fa81000c 	swi	r20, r1, 12
200357c4:	12610000 	addk	r19, r1, r0
200357c8:	96808000 	mfs	r20, rpc
200357cc:	b000dffc 	imm	-8196
200357d0:	3294c194 	addik	r20, r20, -15980
		i8 local_comp;
		i8 tmp_if;
		i8 local_s_QP;
	
		local_comp = comp;
200357d4:	b0000000 	imm	0
200357d8:	e8740a60 	lwi	r3, r20, 2656
200357dc:	e0630000 	lbui	r3, r3, 0
200357e0:	f0730005 	sbi	r3, r19, 5
		if ((local_comp & 4) == 0) {
200357e4:	e0730005 	lbui	r3, r19, 5
200357e8:	a4630004 	andi	r3, r3, 4
200357ec:	bc23015c 	bnei	r3, 348		// 20035948
			local_s_QP = s_QP;
200357f0:	b0000000 	imm	0
200357f4:	e8740a54 	lwi	r3, r20, 2644
200357f8:	e0630000 	lbui	r3, r3, 0
200357fc:	f0730006 	sbi	r3, r19, 6
			local_s_QP = s_QP;
20035800:	b0000000 	imm	0
20035804:	e8740a54 	lwi	r3, r20, 2644
20035808:	e0630000 	lbui	r3, r3, 0
2003580c:	f0730006 	sbi	r3, r19, 6
			if (local_s_QP > 0 && local_s_QP < 5) {
20035810:	e0730006 	lbui	r3, r19, 6
20035814:	90630060 	sext8	r3, r3
20035818:	bc630024 	blei	r3, 36		// 2003583c
2003581c:	e0730006 	lbui	r3, r19, 6
20035820:	90830060 	sext8	r4, r3
20035824:	30600004 	addik	r3, r0, 4
20035828:	16441801 	cmp	r18, r4, r3
2003582c:	bc520010 	blti	r18, 16		// 2003583c
				tmp_if = 8;
20035830:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
20035834:	f0730004 	sbi	r3, r19, 4
20035838:	b800010c 	bri	268		// 20035944
			} else {
				local_s_QP = s_QP;
2003583c:	b0000000 	imm	0
20035840:	e8740a54 	lwi	r3, r20, 2644
20035844:	e0630000 	lbui	r3, r3, 0
20035848:	f0730006 	sbi	r3, r19, 6
				local_s_QP = s_QP;
2003584c:	b0000000 	imm	0
20035850:	e8740a54 	lwi	r3, r20, 2644
20035854:	e0630000 	lbui	r3, r3, 0
20035858:	f0730006 	sbi	r3, r19, 6
				if (local_s_QP > 4 && local_s_QP < 9) {
2003585c:	e0730006 	lbui	r3, r19, 6
20035860:	90830060 	sext8	r4, r3
20035864:	30600004 	addik	r3, r0, 4
20035868:	16441801 	cmp	r18, r4, r3
2003586c:	bcb2003c 	bgei	r18, 60		// 200358a8
20035870:	e0730006 	lbui	r3, r19, 6
20035874:	90830060 	sext8	r4, r3
20035878:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2003587c:	16441801 	cmp	r18, r4, r3
20035880:	bc520028 	blti	r18, 40		// 200358a8
					local_s_QP = s_QP;
20035884:	b0000000 	imm	0
20035888:	e8740a54 	lwi	r3, r20, 2644
2003588c:	e0630000 	lbui	r3, r3, 0
20035890:	f0730006 	sbi	r3, r19, 6
					tmp_if = 2 * local_s_QP;
20035894:	e0730006 	lbui	r3, r19, 6
20035898:	10631800 	addk	r3, r3, r3
2003589c:	a46300ff 	andi	r3, r3, 255
200358a0:	f0730004 	sbi	r3, r19, 4
200358a4:	b80000a0 	bri	160		// 20035944
				} else {
					local_s_QP = s_QP;
200358a8:	b0000000 	imm	0
200358ac:	e8740a54 	lwi	r3, r20, 2644
200358b0:	e0630000 	lbui	r3, r3, 0
200358b4:	f0730006 	sbi	r3, r19, 6
					local_s_QP = s_QP;
200358b8:	b0000000 	imm	0
200358bc:	e8740a54 	lwi	r3, r20, 2644
200358c0:	e0630000 	lbui	r3, r3, 0
200358c4:	f0730006 	sbi	r3, r19, 6
					if (local_s_QP > 8 && local_s_QP < 25) {
200358c8:	e0730006 	lbui	r3, r19, 6
200358cc:	90830060 	sext8	r4, r3
200358d0:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
200358d4:	16441801 	cmp	r18, r4, r3
200358d8:	bcb2003c 	bgei	r18, 60		// 20035914
200358dc:	e0730006 	lbui	r3, r19, 6
200358e0:	90830060 	sext8	r4, r3
200358e4:	30600018 	addik	r3, r0, 24
200358e8:	16441801 	cmp	r18, r4, r3
200358ec:	bc520028 	blti	r18, 40		// 20035914
						local_s_QP = s_QP;
200358f0:	b0000000 	imm	0
200358f4:	e8740a54 	lwi	r3, r20, 2644
200358f8:	e0630000 	lbui	r3, r3, 0
200358fc:	f0730006 	sbi	r3, r19, 6
						tmp_if = local_s_QP + 8;
20035900:	e0730006 	lbui	r3, r19, 6
20035904:	30630008 	addik	r3, r3, 8
20035908:	a46300ff 	andi	r3, r3, 255
2003590c:	f0730004 	sbi	r3, r19, 4
20035910:	b8000034 	bri	52		// 20035944
					} else {
						local_s_QP = s_QP;
20035914:	b0000000 	imm	0
20035918:	e8740a54 	lwi	r3, r20, 2644
2003591c:	e0630000 	lbui	r3, r3, 0
20035920:	f0730006 	sbi	r3, r19, 6
						tmp_if = 2 * local_s_QP - 16;
20035924:	e0730006 	lbui	r3, r19, 6
20035928:	90630060 	sext8	r3, r3
2003592c:	3063fff8 	addik	r3, r3, -8
20035930:	a46300ff 	andi	r3, r3, 255
20035934:	10631800 	addk	r3, r3, r3
20035938:	a46300ff 	andi	r3, r3, 255
2003593c:	f0730004 	sbi	r3, r19, 4
20035940:	b80000e4 	bri	228		// 20035a24
20035944:	b80000e0 	bri	224		// 20035a24
					}
				}
			}
		} else {
			local_s_QP = s_QP;
20035948:	b0000000 	imm	0
2003594c:	e8740a54 	lwi	r3, r20, 2644
20035950:	e0630000 	lbui	r3, r3, 0
20035954:	f0730006 	sbi	r3, r19, 6
			local_s_QP = s_QP;
20035958:	b0000000 	imm	0
2003595c:	e8740a54 	lwi	r3, r20, 2644
20035960:	e0630000 	lbui	r3, r3, 0
20035964:	f0730006 	sbi	r3, r19, 6
			if (local_s_QP > 0 && local_s_QP < 5) {
20035968:	e0730006 	lbui	r3, r19, 6
2003596c:	90630060 	sext8	r3, r3
20035970:	bc630024 	blei	r3, 36		// 20035994
20035974:	e0730006 	lbui	r3, r19, 6
20035978:	90830060 	sext8	r4, r3
2003597c:	30600004 	addik	r3, r0, 4
20035980:	16441801 	cmp	r18, r4, r3
20035984:	bc520010 	blti	r18, 16		// 20035994
				tmp_if = 8;
20035988:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
2003598c:	f0730004 	sbi	r3, r19, 4
20035990:	b8000094 	bri	148		// 20035a24
			} else {
				local_s_QP = s_QP;
20035994:	b0000000 	imm	0
20035998:	e8740a54 	lwi	r3, r20, 2644
2003599c:	e0630000 	lbui	r3, r3, 0
200359a0:	f0730006 	sbi	r3, r19, 6
				local_s_QP = s_QP;
200359a4:	b0000000 	imm	0
200359a8:	e8740a54 	lwi	r3, r20, 2644
200359ac:	e0630000 	lbui	r3, r3, 0
200359b0:	f0730006 	sbi	r3, r19, 6
				if (local_s_QP > 4 && local_s_QP < 25) {
200359b4:	e0730006 	lbui	r3, r19, 6
200359b8:	90830060 	sext8	r4, r3
200359bc:	30600004 	addik	r3, r0, 4
200359c0:	16441801 	cmp	r18, r4, r3
200359c4:	bcb20040 	bgei	r18, 64		// 20035a04
200359c8:	e0730006 	lbui	r3, r19, 6
200359cc:	90830060 	sext8	r4, r3
200359d0:	30600018 	addik	r3, r0, 24
200359d4:	16441801 	cmp	r18, r4, r3
200359d8:	bc52002c 	blti	r18, 44		// 20035a04
					local_s_QP = s_QP;
200359dc:	b0000000 	imm	0
200359e0:	e8740a54 	lwi	r3, r20, 2644
200359e4:	e0630000 	lbui	r3, r3, 0
200359e8:	f0730006 	sbi	r3, r19, 6
					tmp_if = (local_s_QP + 13) >> 1;
200359ec:	e0730006 	lbui	r3, r19, 6
200359f0:	90630060 	sext8	r3, r3
200359f4:	3063000d 	addik	r3, r3, 13
200359f8:	90630001 	sra	r3, r3
200359fc:	f0730004 	sbi	r3, r19, 4
20035a00:	b8000024 	bri	36		// 20035a24
				} else {
					local_s_QP = s_QP;
20035a04:	b0000000 	imm	0
20035a08:	e8740a54 	lwi	r3, r20, 2644
20035a0c:	e0630000 	lbui	r3, r3, 0
20035a10:	f0730006 	sbi	r3, r19, 6
					tmp_if = local_s_QP - 6;
20035a14:	e0730006 	lbui	r3, r19, 6
20035a18:	3063fffa 	addik	r3, r3, -6
20035a1c:	a46300ff 	andi	r3, r3, 255
20035a20:	f0730004 	sbi	r3, r19, 4
				}
			}
		}
		return tmp_if;
20035a24:	e0730004 	lbui	r3, r19, 4
20035a28:	90630060 	sext8	r3, r3
	}
20035a2c:	10330000 	addk	r1, r19, r0
20035a30:	ea610008 	lwi	r19, r1, 8
20035a34:	ea81000c 	lwi	r20, r1, 12
20035a38:	30210010 	addik	r1, r1, 16
20035a3c:	b60f0008 	rtsd	r15, 8
20035a40:	80000000 	or	r0, r0, r0

20035a44 <isSchedulable_start>:

	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_start() {
20035a44:	3021ffe8 	addik	r1, r1, -24
20035a48:	fa610010 	swi	r19, r1, 16
20035a4c:	fa810014 	swi	r20, r1, 20
20035a50:	12610000 	addk	r19, r1, r0
20035a54:	96808000 	mfs	r20, rpc
20035a58:	b000dffc 	imm	-8196
20035a5c:	3294bf08 	addik	r20, r20, -16632
		i32 result;
		i16 cmd;
		i32 local_NEWVOP;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20035a60:	b0000000 	imm	0
20035a64:	e87409c8 	lwi	r3, r20, 2504
20035a68:	e8630000 	lwi	r3, r3, 0
20035a6c:	e8830004 	lwi	r4, r3, 4
20035a70:	b0000000 	imm	0
20035a74:	e87409f4 	lwi	r3, r20, 2548
20035a78:	e8630000 	lwi	r3, r3, 0
20035a7c:	a46301ff 	andi	r3, r3, 511
20035a80:	10631800 	addk	r3, r3, r3
20035a84:	10641800 	addk	r3, r4, r3
20035a88:	e4630000 	lhui	r3, r3, 0
20035a8c:	f4730004 	shi	r3, r19, 4
		local_NEWVOP = ConstantsBtype_NEWVOP;
20035a90:	30600800 	addik	r3, r0, 2048	// 800 <decoder_parser_mvrecon_A>
20035a94:	f8730008 	swi	r3, r19, 8
		result = (cmd & local_NEWVOP) != 0;
20035a98:	e4730004 	lhui	r3, r19, 4
20035a9c:	90830061 	sext16	r4, r3
20035aa0:	e8730008 	lwi	r3, r19, 8
20035aa4:	84841800 	and	r4, r4, r3
20035aa8:	10600000 	addk	r3, r0, r0
20035aac:	8c641c00 	pcmpne	r3, r4, r3
20035ab0:	a46300ff 	andi	r3, r3, 255
20035ab4:	f873000c 	swi	r3, r19, 12
		return result;
20035ab8:	e873000c 	lwi	r3, r19, 12
	}
20035abc:	10330000 	addk	r1, r19, r0
20035ac0:	ea610010 	lwi	r19, r1, 16
20035ac4:	ea810014 	lwi	r20, r1, 20
20035ac8:	30210018 	addik	r1, r1, 24
20035acc:	b60f0008 	rtsd	r15, 8
20035ad0:	80000000 	or	r0, r0, r0

20035ad4 <start>:
	
	static void start() {
20035ad4:	3021ffd0 	addik	r1, r1, -48
20035ad8:	f9e10000 	swi	r15, r1, 0
20035adc:	fa610028 	swi	r19, r1, 40
20035ae0:	fa81002c 	swi	r20, r1, 44
20035ae4:	12610000 	addk	r19, r1, r0
20035ae8:	96808000 	mfs	r20, rpc
20035aec:	b000dffc 	imm	-8196
20035af0:	3294be74 	addik	r20, r20, -16780
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20035af4:	b0000000 	imm	0
20035af8:	e87409f4 	lwi	r3, r20, 2548
20035afc:	e8630000 	lwi	r3, r3, 0
20035b00:	a46301ff 	andi	r3, r3, 511
20035b04:	f873001c 	swi	r3, r19, 28
		i32 index_aligned_AC_PRED_DIR = index_AC_PRED_DIR % SIZE_AC_PRED_DIR;
20035b08:	b0000000 	imm	0
20035b0c:	e8740a34 	lwi	r3, r20, 2612
20035b10:	e8630000 	lwi	r3, r3, 0
20035b14:	a46301ff 	andi	r3, r3, 511
20035b18:	f8730020 	swi	r3, r19, 32
	
		i16 cmd;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20035b1c:	b0000000 	imm	0
20035b20:	e87409c8 	lwi	r3, r20, 2504
20035b24:	e8630000 	lwi	r3, r3, 0
20035b28:	e8830004 	lwi	r4, r3, 4
20035b2c:	b0000000 	imm	0
20035b30:	e87409f4 	lwi	r3, r20, 2548
20035b34:	e8630000 	lwi	r3, r3, 0
20035b38:	a46301ff 	andi	r3, r3, 511
20035b3c:	10631800 	addk	r3, r3, r3
20035b40:	10641800 	addk	r3, r4, r3
20035b44:	e4630000 	lhui	r3, r3, 0
20035b48:	f4730024 	shi	r3, r19, 36
		comp = 0;
20035b4c:	b0000000 	imm	0
20035b50:	e8740a60 	lwi	r3, r20, 2656
20035b54:	f0030000 	sbi	r0, r3, 0
		ptr = 8;
20035b58:	b0000000 	imm	0
20035b5c:	e8740a5c 	lwi	r3, r20, 2652
20035b60:	30800008 	addik	r4, r0, 8	// 8 <_vector_sw_exception>
20035b64:	f8830000 	swi	r4, r3, 0
		tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR] = -2;
20035b68:	b0000000 	imm	0
20035b6c:	e87409ec 	lwi	r3, r20, 2540
20035b70:	e8630000 	lwi	r3, r3, 0
20035b74:	e8830004 	lwi	r4, r3, 4
20035b78:	b0000000 	imm	0
20035b7c:	e8740a34 	lwi	r3, r20, 2612
20035b80:	e8630000 	lwi	r3, r3, 0
20035b84:	a46301ff 	andi	r3, r3, 511
20035b88:	10641800 	addk	r3, r4, r3
20035b8c:	3080fffe 	addik	r4, r0, -2
20035b90:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
20035b94:	b0000000 	imm	0
20035b98:	e87409f4 	lwi	r3, r20, 2548
20035b9c:	e8630000 	lwi	r3, r3, 0
20035ba0:	30830001 	addik	r4, r3, 1
20035ba4:	b0000000 	imm	0
20035ba8:	e87409f4 	lwi	r3, r20, 2548
20035bac:	f8830000 	swi	r4, r3, 0
		index_AC_PRED_DIR += 1;
20035bb0:	b0000000 	imm	0
20035bb4:	e8740a34 	lwi	r3, r20, 2612
20035bb8:	e8630000 	lwi	r3, r3, 0
20035bbc:	30830001 	addik	r4, r3, 1
20035bc0:	b0000000 	imm	0
20035bc4:	e8740a34 	lwi	r3, r20, 2612
20035bc8:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
20035bcc:	b0000000 	imm	0
20035bd0:	e8740a84 	lwi	r3, r20, 2692
20035bd4:	99fc1800 	brald	r15, r3
20035bd8:	80000000 	or	r0, r0, r0
		write_end_AC_PRED_DIR();
20035bdc:	b0000000 	imm	0
20035be0:	e8740ac4 	lwi	r3, r20, 2756
20035be4:	99fc1800 	brald	r15, r3
20035be8:	80000000 	or	r0, r0, r0
	}
20035bec:	e9e10000 	lwi	r15, r1, 0
20035bf0:	10330000 	addk	r1, r19, r0
20035bf4:	ea610028 	lwi	r19, r1, 40
20035bf8:	ea81002c 	lwi	r20, r1, 44
20035bfc:	30210030 	addik	r1, r1, 48
20035c00:	b60f0008 	rtsd	r15, 8
20035c04:	80000000 	or	r0, r0, r0

20035c08 <isSchedulable_skip>:
	static i32 isSchedulable_skip() {
20035c08:	3021fff0 	addik	r1, r1, -16
20035c0c:	fa610008 	swi	r19, r1, 8
20035c10:	fa81000c 	swi	r20, r1, 12
20035c14:	12610000 	addk	r19, r1, r0
20035c18:	96808000 	mfs	r20, rpc
20035c1c:	b000dffc 	imm	-8196
20035c20:	3294bd44 	addik	r20, r20, -17084
		i32 result;
	
		result = 1;
20035c24:	30600001 	addik	r3, r0, 1
20035c28:	f8730004 	swi	r3, r19, 4
		return result;
20035c2c:	e8730004 	lwi	r3, r19, 4
	}
20035c30:	10330000 	addk	r1, r19, r0
20035c34:	ea610008 	lwi	r19, r1, 8
20035c38:	ea81000c 	lwi	r20, r1, 12
20035c3c:	30210010 	addik	r1, r1, 16
20035c40:	b60f0008 	rtsd	r15, 8
20035c44:	80000000 	or	r0, r0, r0

20035c48 <skip>:
	
	static void skip() {
20035c48:	3021ffd4 	addik	r1, r1, -44
20035c4c:	f9e10000 	swi	r15, r1, 0
20035c50:	fa610024 	swi	r19, r1, 36
20035c54:	fa810028 	swi	r20, r1, 40
20035c58:	12610000 	addk	r19, r1, r0
20035c5c:	96808000 	mfs	r20, rpc
20035c60:	b000dffc 	imm	-8196
20035c64:	3294bd00 	addik	r20, r20, -17152
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20035c68:	b0000000 	imm	0
20035c6c:	e87409f4 	lwi	r3, r20, 2548
20035c70:	e8630000 	lwi	r3, r3, 0
20035c74:	a46301ff 	andi	r3, r3, 511
20035c78:	f873001c 	swi	r3, r19, 28
	
		i16 x;
	
		x = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20035c7c:	b0000000 	imm	0
20035c80:	e87409c8 	lwi	r3, r20, 2504
20035c84:	e8630000 	lwi	r3, r3, 0
20035c88:	e8830004 	lwi	r4, r3, 4
20035c8c:	b0000000 	imm	0
20035c90:	e87409f4 	lwi	r3, r20, 2548
20035c94:	e8630000 	lwi	r3, r3, 0
20035c98:	a46301ff 	andi	r3, r3, 511
20035c9c:	10631800 	addk	r3, r3, r3
20035ca0:	10641800 	addk	r3, r4, r3
20035ca4:	e4630000 	lhui	r3, r3, 0
20035ca8:	f4730020 	shi	r3, r19, 32
	
		// Update ports indexes
		index_BTYPE += 1;
20035cac:	b0000000 	imm	0
20035cb0:	e87409f4 	lwi	r3, r20, 2548
20035cb4:	e8630000 	lwi	r3, r3, 0
20035cb8:	30830001 	addik	r4, r3, 1
20035cbc:	b0000000 	imm	0
20035cc0:	e87409f4 	lwi	r3, r20, 2548
20035cc4:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
20035cc8:	b0000000 	imm	0
20035ccc:	e8740a84 	lwi	r3, r20, 2692
20035cd0:	99fc1800 	brald	r15, r3
20035cd4:	80000000 	or	r0, r0, r0
	}
20035cd8:	e9e10000 	lwi	r15, r1, 0
20035cdc:	10330000 	addk	r1, r19, r0
20035ce0:	ea610024 	lwi	r19, r1, 36
20035ce4:	ea810028 	lwi	r20, r1, 40
20035ce8:	3021002c 	addik	r1, r1, 44
20035cec:	b60f0008 	rtsd	r15, 8
20035cf0:	80000000 	or	r0, r0, r0

20035cf4 <isSchedulable_read_inter_ac>:
	static i32 isSchedulable_read_inter_ac() {
20035cf4:	3021ffe4 	addik	r1, r1, -28
20035cf8:	fa610014 	swi	r19, r1, 20
20035cfc:	fa810018 	swi	r20, r1, 24
20035d00:	12610000 	addk	r19, r1, r0
20035d04:	96808000 	mfs	r20, rpc
20035d08:	b000dffc 	imm	-8196
20035d0c:	3294bc58 	addik	r20, r20, -17320
		i32 result;
		i16 cmd;
		i32 local_INTER;
		i32 local_ACCODED;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20035d10:	b0000000 	imm	0
20035d14:	e87409c8 	lwi	r3, r20, 2504
20035d18:	e8630000 	lwi	r3, r3, 0
20035d1c:	e8830004 	lwi	r4, r3, 4
20035d20:	b0000000 	imm	0
20035d24:	e87409f4 	lwi	r3, r20, 2548
20035d28:	e8630000 	lwi	r3, r3, 0
20035d2c:	a46301ff 	andi	r3, r3, 511
20035d30:	10631800 	addk	r3, r3, r3
20035d34:	10641800 	addk	r3, r4, r3
20035d38:	e4630000 	lhui	r3, r3, 0
20035d3c:	f4730004 	shi	r3, r19, 4
		local_INTER = ConstantsBtype_INTER;
20035d40:	30600200 	addik	r3, r0, 512
20035d44:	f8730008 	swi	r3, r19, 8
		local_ACCODED = Constants_ACCODED;
20035d48:	30600002 	addik	r3, r0, 2
20035d4c:	f873000c 	swi	r3, r19, 12
		result = (cmd & local_INTER) != 0 && (cmd & local_ACCODED) != 0;
20035d50:	e4730004 	lhui	r3, r19, 4
20035d54:	90830061 	sext16	r4, r3
20035d58:	e8730008 	lwi	r3, r19, 8
20035d5c:	84641800 	and	r3, r4, r3
20035d60:	bc030020 	beqi	r3, 32		// 20035d80
20035d64:	e4730004 	lhui	r3, r19, 4
20035d68:	90830061 	sext16	r4, r3
20035d6c:	e873000c 	lwi	r3, r19, 12
20035d70:	84641800 	and	r3, r4, r3
20035d74:	bc03000c 	beqi	r3, 12		// 20035d80
20035d78:	30600001 	addik	r3, r0, 1
20035d7c:	b8000008 	bri	8		// 20035d84
20035d80:	10600000 	addk	r3, r0, r0
20035d84:	f8730010 	swi	r3, r19, 16
		return result;
20035d88:	e8730010 	lwi	r3, r19, 16
	}
20035d8c:	10330000 	addk	r1, r19, r0
20035d90:	ea610014 	lwi	r19, r1, 20
20035d94:	ea810018 	lwi	r20, r1, 24
20035d98:	3021001c 	addik	r1, r1, 28
20035d9c:	b60f0008 	rtsd	r15, 8
20035da0:	80000000 	or	r0, r0, r0

20035da4 <read_inter_ac>:
	
	static void read_inter_ac() {
20035da4:	3021ffbc 	addik	r1, r1, -68
20035da8:	f9e10000 	swi	r15, r1, 0
20035dac:	fa61003c 	swi	r19, r1, 60
20035db0:	fa810040 	swi	r20, r1, 64
20035db4:	12610000 	addk	r19, r1, r0
20035db8:	96808000 	mfs	r20, rpc
20035dbc:	b000dffc 	imm	-8196
20035dc0:	3294bba4 	addik	r20, r20, -17500
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20035dc4:	b0000000 	imm	0
20035dc8:	e87409f4 	lwi	r3, r20, 2548
20035dcc:	e8630000 	lwi	r3, r3, 0
20035dd0:	a46301ff 	andi	r3, r3, 511
20035dd4:	f873001c 	swi	r3, r19, 28
		i32 index_aligned_QP = index_QP % SIZE_QP;
20035dd8:	b0000000 	imm	0
20035ddc:	e8740a1c 	lwi	r3, r20, 2588
20035de0:	e8630000 	lwi	r3, r3, 0
20035de4:	a46301ff 	andi	r3, r3, 511
20035de8:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_AC_PRED_DIR = index_AC_PRED_DIR % SIZE_AC_PRED_DIR;
20035dec:	b0000000 	imm	0
20035df0:	e8740a34 	lwi	r3, r20, 2612
20035df4:	e8630000 	lwi	r3, r3, 0
20035df8:	a46301ff 	andi	r3, r3, 511
20035dfc:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_MODE = index_MODE % SIZE_MODE;
20035e00:	b0000000 	imm	0
20035e04:	e8740a3c 	lwi	r3, r20, 2620
20035e08:	e8630000 	lwi	r3, r3, 0
20035e0c:	a46301ff 	andi	r3, r3, 511
20035e10:	f8730028 	swi	r3, r19, 40
		i32 index_aligned_PTR = index_PTR % SIZE_PTR;
20035e14:	b0000000 	imm	0
20035e18:	e8740a2c 	lwi	r3, r20, 2604
20035e1c:	e8630000 	lwi	r3, r3, 0
20035e20:	a46301ff 	andi	r3, r3, 511
20035e24:	f873002c 	swi	r3, r19, 44
		i32 index_aligned_SIGNED = index_SIGNED % SIZE_SIGNED;
20035e28:	b0000000 	imm	0
20035e2c:	e8740a44 	lwi	r3, r20, 2628
20035e30:	e8630000 	lwi	r3, r3, 0
20035e34:	a46301ff 	andi	r3, r3, 511
20035e38:	f8730030 	swi	r3, r19, 48
		i32 index_aligned_QUANT = index_QUANT % SIZE_QUANT;
20035e3c:	b0000000 	imm	0
20035e40:	e8740a4c 	lwi	r3, r20, 2636
20035e44:	e8630000 	lwi	r3, r3, 0
20035e48:	a46301ff 	andi	r3, r3, 511
20035e4c:	f8730034 	swi	r3, r19, 52
	
		i16 cmd;
		i8 qp;
		i8 local_s_QP;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20035e50:	b0000000 	imm	0
20035e54:	e87409c8 	lwi	r3, r20, 2504
20035e58:	e8630000 	lwi	r3, r3, 0
20035e5c:	e8830004 	lwi	r4, r3, 4
20035e60:	b0000000 	imm	0
20035e64:	e87409f4 	lwi	r3, r20, 2548
20035e68:	e8630000 	lwi	r3, r3, 0
20035e6c:	a46301ff 	andi	r3, r3, 511
20035e70:	10631800 	addk	r3, r3, r3
20035e74:	10641800 	addk	r3, r4, r3
20035e78:	e4630000 	lhui	r3, r3, 0
20035e7c:	f4730038 	shi	r3, r19, 56
		qp = tokens_QP[(index_QP + (0)) % SIZE_QP];
20035e80:	b0000000 	imm	0
20035e84:	e87409c4 	lwi	r3, r20, 2500
20035e88:	e8630000 	lwi	r3, r3, 0
20035e8c:	e8830004 	lwi	r4, r3, 4
20035e90:	b0000000 	imm	0
20035e94:	e8740a1c 	lwi	r3, r20, 2588
20035e98:	e8630000 	lwi	r3, r3, 0
20035e9c:	a46301ff 	andi	r3, r3, 511
20035ea0:	10641800 	addk	r3, r4, r3
20035ea4:	e0630000 	lbui	r3, r3, 0
20035ea8:	f073003a 	sbi	r3, r19, 58
		is_signed = 1;
20035eac:	b0000000 	imm	0
20035eb0:	e8740a74 	lwi	r3, r20, 2676
20035eb4:	30800001 	addik	r4, r0, 1
20035eb8:	f8830000 	swi	r4, r3, 0
		s_QP = qp;
20035ebc:	b0000000 	imm	0
20035ec0:	e8740a54 	lwi	r3, r20, 2644
20035ec4:	e093003a 	lbui	r4, r19, 58
20035ec8:	f0830000 	sbi	r4, r3, 0
		local_s_QP = s_QP;
20035ecc:	b0000000 	imm	0
20035ed0:	e8740a54 	lwi	r3, r20, 2644
20035ed4:	e0630000 	lbui	r3, r3, 0
20035ed8:	f073003b 	sbi	r3, r19, 59
		round = local_s_QP & 1 ^ 1;
20035edc:	e073003b 	lbui	r3, r19, 59
20035ee0:	a4830001 	andi	r4, r3, 1
20035ee4:	10600000 	addk	r3, r0, r0
20035ee8:	88641c00 	pcmpeq	r3, r4, r3
20035eec:	a46300ff 	andi	r3, r3, 255
20035ef0:	90830060 	sext8	r4, r3
20035ef4:	b0000000 	imm	0
20035ef8:	e8740a58 	lwi	r3, r20, 2648
20035efc:	f0830000 	sbi	r4, r3, 0
		tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR] = 0;
20035f00:	b0000000 	imm	0
20035f04:	e87409ec 	lwi	r3, r20, 2540
20035f08:	e8630000 	lwi	r3, r3, 0
20035f0c:	e8830004 	lwi	r4, r3, 4
20035f10:	b0000000 	imm	0
20035f14:	e8740a34 	lwi	r3, r20, 2612
20035f18:	e8630000 	lwi	r3, r3, 0
20035f1c:	a46301ff 	andi	r3, r3, 511
20035f20:	10641800 	addk	r3, r4, r3
20035f24:	f0030000 	sbi	r0, r3, 0
		tokens_MODE[(index_MODE + (0)) % SIZE_MODE] = 0;
20035f28:	b0000000 	imm	0
20035f2c:	e87409e4 	lwi	r3, r20, 2532
20035f30:	e8630000 	lwi	r3, r3, 0
20035f34:	e8830004 	lwi	r4, r3, 4
20035f38:	b0000000 	imm	0
20035f3c:	e8740a3c 	lwi	r3, r20, 2620
20035f40:	e8630000 	lwi	r3, r3, 0
20035f44:	a46301ff 	andi	r3, r3, 511
20035f48:	10641800 	addk	r3, r4, r3
20035f4c:	f0030000 	sbi	r0, r3, 0
		tokens_PTR[(index_PTR + (0)) % SIZE_PTR] = 0;
20035f50:	b0000000 	imm	0
20035f54:	e87409dc 	lwi	r3, r20, 2524
20035f58:	e8630000 	lwi	r3, r3, 0
20035f5c:	e8830004 	lwi	r4, r3, 4
20035f60:	b0000000 	imm	0
20035f64:	e8740a2c 	lwi	r3, r20, 2604
20035f68:	e8630000 	lwi	r3, r3, 0
20035f6c:	a46301ff 	andi	r3, r3, 511
20035f70:	10631800 	addk	r3, r3, r3
20035f74:	10641800 	addk	r3, r4, r3
20035f78:	f4030000 	shi	r0, r3, 0
		tokens_SIGNED[(index_SIGNED + (0)) % SIZE_SIGNED] = 1;
20035f7c:	b0000000 	imm	0
20035f80:	e87409e8 	lwi	r3, r20, 2536
20035f84:	e8630000 	lwi	r3, r3, 0
20035f88:	e8830004 	lwi	r4, r3, 4
20035f8c:	b0000000 	imm	0
20035f90:	e8740a44 	lwi	r3, r20, 2628
20035f94:	e8630000 	lwi	r3, r3, 0
20035f98:	a46301ff 	andi	r3, r3, 511
20035f9c:	64630402 	bslli	r3, r3, 2
20035fa0:	10641800 	addk	r3, r4, r3
20035fa4:	30800001 	addik	r4, r0, 1
20035fa8:	f8830000 	swi	r4, r3, 0
		local_s_QP = s_QP;
20035fac:	b0000000 	imm	0
20035fb0:	e8740a54 	lwi	r3, r20, 2644
20035fb4:	e0630000 	lbui	r3, r3, 0
20035fb8:	f073003b 	sbi	r3, r19, 59
		tokens_QUANT[(index_QUANT + (0)) % SIZE_QUANT] = local_s_QP;
20035fbc:	b0000000 	imm	0
20035fc0:	e87409f0 	lwi	r3, r20, 2544
20035fc4:	e8630000 	lwi	r3, r3, 0
20035fc8:	e8830004 	lwi	r4, r3, 4
20035fcc:	b0000000 	imm	0
20035fd0:	e8740a4c 	lwi	r3, r20, 2636
20035fd4:	e8630000 	lwi	r3, r3, 0
20035fd8:	a46301ff 	andi	r3, r3, 511
20035fdc:	10641800 	addk	r3, r4, r3
20035fe0:	e093003b 	lbui	r4, r19, 59
20035fe4:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
20035fe8:	b0000000 	imm	0
20035fec:	e87409f4 	lwi	r3, r20, 2548
20035ff0:	e8630000 	lwi	r3, r3, 0
20035ff4:	30830001 	addik	r4, r3, 1
20035ff8:	b0000000 	imm	0
20035ffc:	e87409f4 	lwi	r3, r20, 2548
20036000:	f8830000 	swi	r4, r3, 0
		index_QP += 1;
20036004:	b0000000 	imm	0
20036008:	e8740a1c 	lwi	r3, r20, 2588
2003600c:	e8630000 	lwi	r3, r3, 0
20036010:	30830001 	addik	r4, r3, 1
20036014:	b0000000 	imm	0
20036018:	e8740a1c 	lwi	r3, r20, 2588
2003601c:	f8830000 	swi	r4, r3, 0
		index_AC_PRED_DIR += 1;
20036020:	b0000000 	imm	0
20036024:	e8740a34 	lwi	r3, r20, 2612
20036028:	e8630000 	lwi	r3, r3, 0
2003602c:	30830001 	addik	r4, r3, 1
20036030:	b0000000 	imm	0
20036034:	e8740a34 	lwi	r3, r20, 2612
20036038:	f8830000 	swi	r4, r3, 0
		index_MODE += 1;
2003603c:	b0000000 	imm	0
20036040:	e8740a3c 	lwi	r3, r20, 2620
20036044:	e8630000 	lwi	r3, r3, 0
20036048:	30830001 	addik	r4, r3, 1
2003604c:	b0000000 	imm	0
20036050:	e8740a3c 	lwi	r3, r20, 2620
20036054:	f8830000 	swi	r4, r3, 0
		index_PTR += 1;
20036058:	b0000000 	imm	0
2003605c:	e8740a2c 	lwi	r3, r20, 2604
20036060:	e8630000 	lwi	r3, r3, 0
20036064:	30830001 	addik	r4, r3, 1
20036068:	b0000000 	imm	0
2003606c:	e8740a2c 	lwi	r3, r20, 2604
20036070:	f8830000 	swi	r4, r3, 0
		index_SIGNED += 1;
20036074:	b0000000 	imm	0
20036078:	e8740a44 	lwi	r3, r20, 2628
2003607c:	e8630000 	lwi	r3, r3, 0
20036080:	30830001 	addik	r4, r3, 1
20036084:	b0000000 	imm	0
20036088:	e8740a44 	lwi	r3, r20, 2628
2003608c:	f8830000 	swi	r4, r3, 0
		index_QUANT += 1;
20036090:	b0000000 	imm	0
20036094:	e8740a4c 	lwi	r3, r20, 2636
20036098:	e8630000 	lwi	r3, r3, 0
2003609c:	30830001 	addik	r4, r3, 1
200360a0:	b0000000 	imm	0
200360a4:	e8740a4c 	lwi	r3, r20, 2636
200360a8:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
200360ac:	b0000000 	imm	0
200360b0:	e8740a84 	lwi	r3, r20, 2692
200360b4:	99fc1800 	brald	r15, r3
200360b8:	80000000 	or	r0, r0, r0
		read_end_QP();
200360bc:	b0000000 	imm	0
200360c0:	e8740aac 	lwi	r3, r20, 2732
200360c4:	99fc1800 	brald	r15, r3
200360c8:	80000000 	or	r0, r0, r0
		write_end_AC_PRED_DIR();
200360cc:	b0000000 	imm	0
200360d0:	e8740ac4 	lwi	r3, r20, 2756
200360d4:	99fc1800 	brald	r15, r3
200360d8:	80000000 	or	r0, r0, r0
		write_end_MODE();
200360dc:	b0000000 	imm	0
200360e0:	e8740acc 	lwi	r3, r20, 2764
200360e4:	99fc1800 	brald	r15, r3
200360e8:	80000000 	or	r0, r0, r0
		write_end_PTR();
200360ec:	b0000000 	imm	0
200360f0:	e8740abc 	lwi	r3, r20, 2748
200360f4:	99fc1800 	brald	r15, r3
200360f8:	80000000 	or	r0, r0, r0
		write_end_SIGNED();
200360fc:	b0000000 	imm	0
20036100:	e8740ad4 	lwi	r3, r20, 2772
20036104:	99fc1800 	brald	r15, r3
20036108:	80000000 	or	r0, r0, r0
		write_end_QUANT();
2003610c:	b0000000 	imm	0
20036110:	e8740adc 	lwi	r3, r20, 2780
20036114:	99fc1800 	brald	r15, r3
20036118:	80000000 	or	r0, r0, r0
	}
2003611c:	e9e10000 	lwi	r15, r1, 0
20036120:	10330000 	addk	r1, r19, r0
20036124:	ea61003c 	lwi	r19, r1, 60
20036128:	ea810040 	lwi	r20, r1, 64
2003612c:	30210044 	addik	r1, r1, 68
20036130:	b60f0008 	rtsd	r15, 8
20036134:	80000000 	or	r0, r0, r0

20036138 <isSchedulable_read_other>:
	static i32 isSchedulable_read_other() {
20036138:	3021ffe4 	addik	r1, r1, -28
2003613c:	fa610014 	swi	r19, r1, 20
20036140:	fa810018 	swi	r20, r1, 24
20036144:	12610000 	addk	r19, r1, r0
20036148:	96808000 	mfs	r20, rpc
2003614c:	b000dffc 	imm	-8196
20036150:	3294b814 	addik	r20, r20, -18412
		i32 result;
		i16 cmd;
		i32 local_INTRA;
		i32 local_ACCODED;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20036154:	b0000000 	imm	0
20036158:	e87409c8 	lwi	r3, r20, 2504
2003615c:	e8630000 	lwi	r3, r3, 0
20036160:	e8830004 	lwi	r4, r3, 4
20036164:	b0000000 	imm	0
20036168:	e87409f4 	lwi	r3, r20, 2548
2003616c:	e8630000 	lwi	r3, r3, 0
20036170:	a46301ff 	andi	r3, r3, 511
20036174:	10631800 	addk	r3, r3, r3
20036178:	10641800 	addk	r3, r4, r3
2003617c:	e4630000 	lhui	r3, r3, 0
20036180:	f4730004 	shi	r3, r19, 4
		local_INTRA = ConstantsBtype_INTRA;
20036184:	30600400 	addik	r3, r0, 1024	// 400 <_HEAP_SIZE>
20036188:	f8730008 	swi	r3, r19, 8
		local_ACCODED = Constants_ACCODED;
2003618c:	30600002 	addik	r3, r0, 2
20036190:	f873000c 	swi	r3, r19, 12
		result = (cmd & local_INTRA) == 0 && (cmd & local_ACCODED) == 0;
20036194:	e4730004 	lhui	r3, r19, 4
20036198:	90830061 	sext16	r4, r3
2003619c:	e8730008 	lwi	r3, r19, 8
200361a0:	84641800 	and	r3, r4, r3
200361a4:	bc230020 	bnei	r3, 32		// 200361c4
200361a8:	e4730004 	lhui	r3, r19, 4
200361ac:	90830061 	sext16	r4, r3
200361b0:	e873000c 	lwi	r3, r19, 12
200361b4:	84641800 	and	r3, r4, r3
200361b8:	bc23000c 	bnei	r3, 12		// 200361c4
200361bc:	30600001 	addik	r3, r0, 1
200361c0:	b8000008 	bri	8		// 200361c8
200361c4:	10600000 	addk	r3, r0, r0
200361c8:	f8730010 	swi	r3, r19, 16
		return result;
200361cc:	e8730010 	lwi	r3, r19, 16
	}
200361d0:	10330000 	addk	r1, r19, r0
200361d4:	ea610014 	lwi	r19, r1, 20
200361d8:	ea810018 	lwi	r20, r1, 24
200361dc:	3021001c 	addik	r1, r1, 28
200361e0:	b60f0008 	rtsd	r15, 8
200361e4:	80000000 	or	r0, r0, r0

200361e8 <read_other>:
	
	static void read_other() {
200361e8:	3021ffcc 	addik	r1, r1, -52
200361ec:	f9e10000 	swi	r15, r1, 0
200361f0:	fa61002c 	swi	r19, r1, 44
200361f4:	fa810030 	swi	r20, r1, 48
200361f8:	12610000 	addk	r19, r1, r0
200361fc:	96808000 	mfs	r20, rpc
20036200:	b000dffc 	imm	-8196
20036204:	3294b760 	addik	r20, r20, -18592
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
20036208:	b0000000 	imm	0
2003620c:	e87409f4 	lwi	r3, r20, 2548
20036210:	e8630000 	lwi	r3, r3, 0
20036214:	a46301ff 	andi	r3, r3, 511
20036218:	f873001c 	swi	r3, r19, 28
		i32 index_aligned_QP = index_QP % SIZE_QP;
2003621c:	b0000000 	imm	0
20036220:	e8740a1c 	lwi	r3, r20, 2588
20036224:	e8630000 	lwi	r3, r3, 0
20036228:	a46301ff 	andi	r3, r3, 511
2003622c:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_AC_PRED_DIR = index_AC_PRED_DIR % SIZE_AC_PRED_DIR;
20036230:	b0000000 	imm	0
20036234:	e8740a34 	lwi	r3, r20, 2612
20036238:	e8630000 	lwi	r3, r3, 0
2003623c:	a46301ff 	andi	r3, r3, 511
20036240:	f8730024 	swi	r3, r19, 36
	
		i16 cmd;
		i8 qp;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
20036244:	b0000000 	imm	0
20036248:	e87409c8 	lwi	r3, r20, 2504
2003624c:	e8630000 	lwi	r3, r3, 0
20036250:	e8830004 	lwi	r4, r3, 4
20036254:	b0000000 	imm	0
20036258:	e87409f4 	lwi	r3, r20, 2548
2003625c:	e8630000 	lwi	r3, r3, 0
20036260:	a46301ff 	andi	r3, r3, 511
20036264:	10631800 	addk	r3, r3, r3
20036268:	10641800 	addk	r3, r4, r3
2003626c:	e4630000 	lhui	r3, r3, 0
20036270:	f4730028 	shi	r3, r19, 40
		qp = tokens_QP[(index_QP + (0)) % SIZE_QP];
20036274:	b0000000 	imm	0
20036278:	e87409c4 	lwi	r3, r20, 2500
2003627c:	e8630000 	lwi	r3, r3, 0
20036280:	e8830004 	lwi	r4, r3, 4
20036284:	b0000000 	imm	0
20036288:	e8740a1c 	lwi	r3, r20, 2588
2003628c:	e8630000 	lwi	r3, r3, 0
20036290:	a46301ff 	andi	r3, r3, 511
20036294:	10641800 	addk	r3, r4, r3
20036298:	e0630000 	lbui	r3, r3, 0
2003629c:	f073002a 	sbi	r3, r19, 42
		s_QP = qp;
200362a0:	b0000000 	imm	0
200362a4:	e8740a54 	lwi	r3, r20, 2644
200362a8:	e093002a 	lbui	r4, r19, 42
200362ac:	f0830000 	sbi	r4, r3, 0
		tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR] = -1;
200362b0:	b0000000 	imm	0
200362b4:	e87409ec 	lwi	r3, r20, 2540
200362b8:	e8630000 	lwi	r3, r3, 0
200362bc:	e8830004 	lwi	r4, r3, 4
200362c0:	b0000000 	imm	0
200362c4:	e8740a34 	lwi	r3, r20, 2612
200362c8:	e8630000 	lwi	r3, r3, 0
200362cc:	a46301ff 	andi	r3, r3, 511
200362d0:	10641800 	addk	r3, r4, r3
200362d4:	3080ffff 	addik	r4, r0, -1
200362d8:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
200362dc:	b0000000 	imm	0
200362e0:	e87409f4 	lwi	r3, r20, 2548
200362e4:	e8630000 	lwi	r3, r3, 0
200362e8:	30830001 	addik	r4, r3, 1
200362ec:	b0000000 	imm	0
200362f0:	e87409f4 	lwi	r3, r20, 2548
200362f4:	f8830000 	swi	r4, r3, 0
		index_QP += 1;
200362f8:	b0000000 	imm	0
200362fc:	e8740a1c 	lwi	r3, r20, 2588
20036300:	e8630000 	lwi	r3, r3, 0
20036304:	30830001 	addik	r4, r3, 1
20036308:	b0000000 	imm	0
2003630c:	e8740a1c 	lwi	r3, r20, 2588
20036310:	f8830000 	swi	r4, r3, 0
		index_AC_PRED_DIR += 1;
20036314:	b0000000 	imm	0
20036318:	e8740a34 	lwi	r3, r20, 2612
2003631c:	e8630000 	lwi	r3, r3, 0
20036320:	30830001 	addik	r4, r3, 1
20036324:	b0000000 	imm	0
20036328:	e8740a34 	lwi	r3, r20, 2612
2003632c:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
20036330:	b0000000 	imm	0
20036334:	e8740a84 	lwi	r3, r20, 2692
20036338:	99fc1800 	brald	r15, r3
2003633c:	80000000 	or	r0, r0, r0
		read_end_QP();
20036340:	b0000000 	imm	0
20036344:	e8740aac 	lwi	r3, r20, 2732
20036348:	99fc1800 	brald	r15, r3
2003634c:	80000000 	or	r0, r0, r0
		write_end_AC_PRED_DIR();
20036350:	b0000000 	imm	0
20036354:	e8740ac4 	lwi	r3, r20, 2756
20036358:	99fc1800 	brald	r15, r3
2003635c:	80000000 	or	r0, r0, r0
	}
20036360:	e9e10000 	lwi	r15, r1, 0
20036364:	10330000 	addk	r1, r19, r0
20036368:	ea61002c 	lwi	r19, r1, 44
2003636c:	ea810030 	lwi	r20, r1, 48
20036370:	30210034 	addik	r1, r1, 52
20036374:	b60f0008 	rtsd	r15, 8
20036378:	80000000 	or	r0, r0, r0

2003637c <isSchedulable_read_intra>:
	static i32 isSchedulable_read_intra() {
2003637c:	3021fff0 	addik	r1, r1, -16
20036380:	fa610008 	swi	r19, r1, 8
20036384:	fa81000c 	swi	r20, r1, 12
20036388:	12610000 	addk	r19, r1, r0
2003638c:	96808000 	mfs	r20, rpc
20036390:	b000dffc 	imm	-8196
20036394:	3294b5d0 	addik	r20, r20, -18992
		i32 result;
	
		result = 1;
20036398:	30600001 	addik	r3, r0, 1
2003639c:	f8730004 	swi	r3, r19, 4
		return result;
200363a0:	e8730004 	lwi	r3, r19, 4
	}
200363a4:	10330000 	addk	r1, r19, r0
200363a8:	ea610008 	lwi	r19, r1, 8
200363ac:	ea81000c 	lwi	r20, r1, 12
200363b0:	30210010 	addik	r1, r1, 16
200363b4:	b60f0008 	rtsd	r15, 8
200363b8:	80000000 	or	r0, r0, r0

200363bc <read_intra>:
	
	static void read_intra() {
200363bc:	3021ff84 	addik	r1, r1, -124
200363c0:	f9e10000 	swi	r15, r1, 0
200363c4:	fa610074 	swi	r19, r1, 116
200363c8:	fa810078 	swi	r20, r1, 120
200363cc:	12610000 	addk	r19, r1, r0
200363d0:	96808000 	mfs	r20, rpc
200363d4:	b000dffc 	imm	-8196
200363d8:	3294b58c 	addik	r20, r20, -19060
	
		// Compute aligned port indexes
		i32 index_aligned_BTYPE = index_BTYPE % SIZE_BTYPE;
200363dc:	b0000000 	imm	0
200363e0:	e87409f4 	lwi	r3, r20, 2548
200363e4:	e8630000 	lwi	r3, r3, 0
200363e8:	a46301ff 	andi	r3, r3, 511
200363ec:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_QP = index_QP % SIZE_QP;
200363f0:	b0000000 	imm	0
200363f4:	e8740a1c 	lwi	r3, r20, 2588
200363f8:	e8630000 	lwi	r3, r3, 0
200363fc:	a46301ff 	andi	r3, r3, 511
20036400:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_A = index_A % SIZE_A;
20036404:	b0000000 	imm	0
20036408:	e87409fc 	lwi	r3, r20, 2556
2003640c:	e8630000 	lwi	r3, r3, 0
20036410:	a46301ff 	andi	r3, r3, 511
20036414:	f8730028 	swi	r3, r19, 40
		i32 index_aligned_B = index_B % SIZE_B;
20036418:	b0000000 	imm	0
2003641c:	e8740a04 	lwi	r3, r20, 2564
20036420:	e8630000 	lwi	r3, r3, 0
20036424:	a46301ff 	andi	r3, r3, 511
20036428:	f873002c 	swi	r3, r19, 44
		i32 index_aligned_C = index_C % SIZE_C;
2003642c:	b0000000 	imm	0
20036430:	e8740a0c 	lwi	r3, r20, 2572
20036434:	e8630000 	lwi	r3, r3, 0
20036438:	a46301ff 	andi	r3, r3, 511
2003643c:	f8730030 	swi	r3, r19, 48
		i32 index_aligned_PTR = index_PTR % SIZE_PTR;
20036440:	b0000000 	imm	0
20036444:	e8740a2c 	lwi	r3, r20, 2604
20036448:	e8630000 	lwi	r3, r3, 0
2003644c:	a46301ff 	andi	r3, r3, 511
20036450:	f8730034 	swi	r3, r19, 52
		i32 index_aligned_AC_PRED_DIR = index_AC_PRED_DIR % SIZE_AC_PRED_DIR;
20036454:	b0000000 	imm	0
20036458:	e8740a34 	lwi	r3, r20, 2612
2003645c:	e8630000 	lwi	r3, r3, 0
20036460:	a46301ff 	andi	r3, r3, 511
20036464:	f8730038 	swi	r3, r19, 56
		i32 index_aligned_MODE = index_MODE % SIZE_MODE;
20036468:	b0000000 	imm	0
2003646c:	e8740a3c 	lwi	r3, r20, 2620
20036470:	e8630000 	lwi	r3, r3, 0
20036474:	a46301ff 	andi	r3, r3, 511
20036478:	f873003c 	swi	r3, r19, 60
		i32 index_aligned_SIGNED = index_SIGNED % SIZE_SIGNED;
2003647c:	b0000000 	imm	0
20036480:	e8740a44 	lwi	r3, r20, 2628
20036484:	e8630000 	lwi	r3, r3, 0
20036488:	a46301ff 	andi	r3, r3, 511
2003648c:	f8730040 	swi	r3, r19, 64
		i32 index_aligned_QUANT = index_QUANT % SIZE_QUANT;
20036490:	b0000000 	imm	0
20036494:	e8740a4c 	lwi	r3, r20, 2636
20036498:	e8630000 	lwi	r3, r3, 0
2003649c:	a46301ff 	andi	r3, r3, 511
200364a0:	f8730044 	swi	r3, r19, 68
		i16 tmp_if;
		i8 local_scaler;
		i32 local_is_signed;
		i8 local_s_QP;
	
		cmd = tokens_BTYPE[(index_BTYPE + (0)) % SIZE_BTYPE];
200364a4:	b0000000 	imm	0
200364a8:	e87409c8 	lwi	r3, r20, 2504
200364ac:	e8630000 	lwi	r3, r3, 0
200364b0:	e8830004 	lwi	r4, r3, 4
200364b4:	b0000000 	imm	0
200364b8:	e87409f4 	lwi	r3, r20, 2548
200364bc:	e8630000 	lwi	r3, r3, 0
200364c0:	a46301ff 	andi	r3, r3, 511
200364c4:	10631800 	addk	r3, r3, r3
200364c8:	10641800 	addk	r3, r4, r3
200364cc:	e4630000 	lhui	r3, r3, 0
200364d0:	f4730048 	shi	r3, r19, 72
		qp = tokens_QP[(index_QP + (0)) % SIZE_QP];
200364d4:	b0000000 	imm	0
200364d8:	e87409c4 	lwi	r3, r20, 2500
200364dc:	e8630000 	lwi	r3, r3, 0
200364e0:	e8830004 	lwi	r4, r3, 4
200364e4:	b0000000 	imm	0
200364e8:	e8740a1c 	lwi	r3, r20, 2588
200364ec:	e8630000 	lwi	r3, r3, 0
200364f0:	a46301ff 	andi	r3, r3, 511
200364f4:	10641800 	addk	r3, r4, r3
200364f8:	e0630000 	lbui	r3, r3, 0
200364fc:	f073004a 	sbi	r3, r19, 74
		a = tokens_A[(index_A + (0)) % SIZE_A];
20036500:	b0000000 	imm	0
20036504:	e87409d4 	lwi	r3, r20, 2516
20036508:	e8630000 	lwi	r3, r3, 0
2003650c:	e8830004 	lwi	r4, r3, 4
20036510:	b0000000 	imm	0
20036514:	e87409fc 	lwi	r3, r20, 2556
20036518:	e8630000 	lwi	r3, r3, 0
2003651c:	a46301ff 	andi	r3, r3, 511
20036520:	10631800 	addk	r3, r3, r3
20036524:	10641800 	addk	r3, r4, r3
20036528:	e4630000 	lhui	r3, r3, 0
2003652c:	f473004c 	shi	r3, r19, 76
		b = tokens_B[(index_B + (0)) % SIZE_B];
20036530:	b0000000 	imm	0
20036534:	e87409d0 	lwi	r3, r20, 2512
20036538:	e8630000 	lwi	r3, r3, 0
2003653c:	e8830004 	lwi	r4, r3, 4
20036540:	b0000000 	imm	0
20036544:	e8740a04 	lwi	r3, r20, 2564
20036548:	e8630000 	lwi	r3, r3, 0
2003654c:	a46301ff 	andi	r3, r3, 511
20036550:	10631800 	addk	r3, r3, r3
20036554:	10641800 	addk	r3, r4, r3
20036558:	e4630000 	lhui	r3, r3, 0
2003655c:	f473004e 	shi	r3, r19, 78
		c = tokens_C[(index_C + (0)) % SIZE_C];
20036560:	b0000000 	imm	0
20036564:	e87409d8 	lwi	r3, r20, 2520
20036568:	e8630000 	lwi	r3, r3, 0
2003656c:	e8830004 	lwi	r4, r3, 4
20036570:	b0000000 	imm	0
20036574:	e8740a0c 	lwi	r3, r20, 2572
20036578:	e8630000 	lwi	r3, r3, 0
2003657c:	a46301ff 	andi	r3, r3, 511
20036580:	10631800 	addk	r3, r3, r3
20036584:	10641800 	addk	r3, r4, r3
20036588:	e4630000 	lhui	r3, r3, 0
2003658c:	f4730050 	shi	r3, r19, 80
		dca = dc_buf[a];
20036590:	e473004c 	lhui	r3, r19, 76
20036594:	90630061 	sext16	r3, r3
20036598:	b0000000 	imm	0
2003659c:	e8940a64 	lwi	r4, r20, 2660
200365a0:	10631800 	addk	r3, r3, r3
200365a4:	10641800 	addk	r3, r4, r3
200365a8:	e4630000 	lhui	r3, r3, 0
200365ac:	f4730052 	shi	r3, r19, 82
		dcb = dc_buf[b];
200365b0:	e473004e 	lhui	r3, r19, 78
200365b4:	90630061 	sext16	r3, r3
200365b8:	b0000000 	imm	0
200365bc:	e8940a64 	lwi	r4, r20, 2660
200365c0:	10631800 	addk	r3, r3, r3
200365c4:	10641800 	addk	r3, r4, r3
200365c8:	e4630000 	lhui	r3, r3, 0
200365cc:	f4730054 	shi	r3, r19, 84
		dcc = dc_buf[c];
200365d0:	e4730050 	lhui	r3, r19, 80
200365d4:	90630061 	sext16	r3, r3
200365d8:	b0000000 	imm	0
200365dc:	e8940a64 	lwi	r4, r20, 2660
200365e0:	10631800 	addk	r3, r3, r3
200365e4:	10641800 	addk	r3, r4, r3
200365e8:	e4630000 	lhui	r3, r3, 0
200365ec:	f4730056 	shi	r3, r19, 86
		horiz = Math_abs(dcb - dcc);
200365f0:	e4730054 	lhui	r3, r19, 84
200365f4:	90830061 	sext16	r4, r3
200365f8:	e4730056 	lhui	r3, r19, 86
200365fc:	90630061 	sext16	r3, r3
20036600:	14632000 	rsubk	r3, r3, r4
20036604:	10a30000 	addk	r5, r3, r0
20036608:	b0000000 	imm	0
2003660c:	e8940ae0 	lwi	r4, r20, 2784
20036610:	99fc2000 	brald	r15, r4
20036614:	80000000 	or	r0, r0, r0
20036618:	f4730058 	shi	r3, r19, 88
		vert = Math_abs(dca - dcb);
2003661c:	e4730052 	lhui	r3, r19, 82
20036620:	90830061 	sext16	r4, r3
20036624:	e4730054 	lhui	r3, r19, 84
20036628:	90630061 	sext16	r3, r3
2003662c:	14632000 	rsubk	r3, r3, r4
20036630:	10a30000 	addk	r5, r3, r0
20036634:	b0000000 	imm	0
20036638:	e8940ae0 	lwi	r4, r20, 2784
2003663c:	99fc2000 	brald	r15, r4
20036640:	80000000 	or	r0, r0, r0
20036644:	f473005a 	shi	r3, r19, 90
		top = vert < horiz;
20036648:	30600001 	addik	r3, r0, 1
2003664c:	e493005a 	lhui	r4, r19, 90
20036650:	90a40061 	sext16	r5, r4
20036654:	e4930058 	lhui	r4, r19, 88
20036658:	90840061 	sext16	r4, r4
2003665c:	16442801 	cmp	r18, r4, r5
20036660:	bc520008 	blti	r18, 8		// 20036668
20036664:	10600000 	addk	r3, r0, r0
20036668:	a46300ff 	andi	r3, r3, 255
2003666c:	f873005c 	swi	r3, r19, 92
		local_ACPRED = Constants_ACPRED;
20036670:	30600001 	addik	r3, r0, 1
20036674:	f8730060 	swi	r3, r19, 96
		ac = (cmd & local_ACPRED) != 0;
20036678:	e4730048 	lhui	r3, r19, 72
2003667c:	90830061 	sext16	r4, r3
20036680:	e8730060 	lwi	r3, r19, 96
20036684:	84841800 	and	r4, r4, r3
20036688:	10600000 	addk	r3, r0, r0
2003668c:	8c641c00 	pcmpne	r3, r4, r3
20036690:	a46300ff 	andi	r3, r3, 255
20036694:	f8730064 	swi	r3, r19, 100
		s_QP = qp;
20036698:	b0000000 	imm	0
2003669c:	e8740a54 	lwi	r3, r20, 2644
200366a0:	e093004a 	lbui	r4, r19, 74
200366a4:	f0830000 	sbi	r4, r3, 0
		tmp_dc_scaler = dc_scaler();
200366a8:	b0000000 	imm	0
200366ac:	e8940ae8 	lwi	r4, r20, 2792
200366b0:	99fc2000 	brald	r15, r4
200366b4:	80000000 	or	r0, r0, r0
200366b8:	f0730068 	sbi	r3, r19, 104
		scaler = tmp_dc_scaler;
200366bc:	b0000000 	imm	0
200366c0:	e8740a6c 	lwi	r3, r20, 2668
200366c4:	e0930068 	lbui	r4, r19, 104
200366c8:	f0830000 	sbi	r4, r3, 0
		if (top) {
200366cc:	e873005c 	lwi	r3, r19, 92
200366d0:	bc030010 	beqi	r3, 16		// 200366e0
			tmp_if = dcc;
200366d4:	e4730056 	lhui	r3, r19, 86
200366d8:	f473001e 	shi	r3, r19, 30
200366dc:	b800000c 	bri	12		// 200366e8
		} else {
			tmp_if = dca;
200366e0:	e4730052 	lhui	r3, r19, 82
200366e4:	f473001e 	shi	r3, r19, 30
		}
		local_scaler = scaler;
200366e8:	b0000000 	imm	0
200366ec:	e8740a6c 	lwi	r3, r20, 2668
200366f0:	e0630000 	lbui	r3, r3, 0
200366f4:	f0730069 	sbi	r3, r19, 105
		local_scaler = scaler;
200366f8:	b0000000 	imm	0
200366fc:	e8740a6c 	lwi	r3, r20, 2668
20036700:	e0630000 	lbui	r3, r3, 0
20036704:	f0730069 	sbi	r3, r19, 105
		dc_pred = (tmp_if + (local_scaler >> 1)) / local_scaler;
20036708:	e473001e 	lhui	r3, r19, 30
2003670c:	90830061 	sext16	r4, r3
20036710:	e0730069 	lbui	r3, r19, 105
20036714:	90630060 	sext8	r3, r3
20036718:	90630001 	sra	r3, r3
2003671c:	90630060 	sext8	r3, r3
20036720:	10841800 	addk	r4, r4, r3
20036724:	e0730069 	lbui	r3, r19, 105
20036728:	90630060 	sext8	r3, r3
2003672c:	48632000 	idiv	r3, r3, r4
20036730:	90830061 	sext16	r4, r3
20036734:	b0000000 	imm	0
20036738:	e8740a68 	lwi	r3, r20, 2664
2003673c:	f4830000 	shi	r4, r3, 0
		if (!ac) {
20036740:	e8730064 	lwi	r3, r19, 100
20036744:	bc23000c 	bnei	r3, 12		// 20036750
			s = 0;
20036748:	f013001c 	sbi	r0, r19, 28
2003674c:	b8000020 	bri	32		// 2003676c
		} else {
			if (top) {
20036750:	e873005c 	lwi	r3, r19, 92
20036754:	bc030010 	beqi	r3, 16		// 20036764
				s = 2;
20036758:	30600002 	addik	r3, r0, 2
2003675c:	f073001c 	sbi	r3, r19, 28
20036760:	b800000c 	bri	12		// 2003676c
			} else {
				s = 1;
20036764:	30600001 	addik	r3, r0, 1
20036768:	f073001c 	sbi	r3, r19, 28
			}
		}
		local_scaler = scaler;
2003676c:	b0000000 	imm	0
20036770:	e8740a6c 	lwi	r3, r20, 2668
20036774:	e0630000 	lbui	r3, r3, 0
20036778:	f0730069 	sbi	r3, r19, 105
		is_signed = local_scaler == 0;
2003677c:	e0730069 	lbui	r3, r19, 105
20036780:	90830060 	sext8	r4, r3
20036784:	10600000 	addk	r3, r0, r0
20036788:	88641c00 	pcmpeq	r3, r4, r3
2003678c:	a46300ff 	andi	r3, r3, 255
20036790:	10830000 	addk	r4, r3, r0
20036794:	b0000000 	imm	0
20036798:	e8740a74 	lwi	r3, r20, 2676
2003679c:	f8830000 	swi	r4, r3, 0
		if (top) {
200367a0:	e873005c 	lwi	r3, r19, 92
200367a4:	bc030038 	beqi	r3, 56		// 200367dc
			tokens_PTR[(index_PTR + (0)) % SIZE_PTR] = c;
200367a8:	b0000000 	imm	0
200367ac:	e87409dc 	lwi	r3, r20, 2524
200367b0:	e8630000 	lwi	r3, r3, 0
200367b4:	e8830004 	lwi	r4, r3, 4
200367b8:	b0000000 	imm	0
200367bc:	e8740a2c 	lwi	r3, r20, 2604
200367c0:	e8630000 	lwi	r3, r3, 0
200367c4:	a46301ff 	andi	r3, r3, 511
200367c8:	10631800 	addk	r3, r3, r3
200367cc:	10641800 	addk	r3, r4, r3
200367d0:	e4930050 	lhui	r4, r19, 80
200367d4:	f4830000 	shi	r4, r3, 0
200367d8:	b8000034 	bri	52		// 2003680c
		} else {
			tokens_PTR[(index_PTR + (0)) % SIZE_PTR] = a;
200367dc:	b0000000 	imm	0
200367e0:	e87409dc 	lwi	r3, r20, 2524
200367e4:	e8630000 	lwi	r3, r3, 0
200367e8:	e8830004 	lwi	r4, r3, 4
200367ec:	b0000000 	imm	0
200367f0:	e8740a2c 	lwi	r3, r20, 2604
200367f4:	e8630000 	lwi	r3, r3, 0
200367f8:	a46301ff 	andi	r3, r3, 511
200367fc:	10631800 	addk	r3, r3, r3
20036800:	10641800 	addk	r3, r4, r3
20036804:	e493004c 	lhui	r4, r19, 76
20036808:	f4830000 	shi	r4, r3, 0
		}
		tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR] = s;
2003680c:	b0000000 	imm	0
20036810:	e87409ec 	lwi	r3, r20, 2540
20036814:	e8630000 	lwi	r3, r3, 0
20036818:	e8830004 	lwi	r4, r3, 4
2003681c:	b0000000 	imm	0
20036820:	e8740a34 	lwi	r3, r20, 2612
20036824:	e8630000 	lwi	r3, r3, 0
20036828:	a46301ff 	andi	r3, r3, 511
2003682c:	10641800 	addk	r3, r4, r3
20036830:	e093001c 	lbui	r4, r19, 28
20036834:	f0830000 	sbi	r4, r3, 0
		tokens_MODE[(index_MODE + (0)) % SIZE_MODE] = s;
20036838:	b0000000 	imm	0
2003683c:	e87409e4 	lwi	r3, r20, 2532
20036840:	e8630000 	lwi	r3, r3, 0
20036844:	e8830004 	lwi	r4, r3, 4
20036848:	b0000000 	imm	0
2003684c:	e8740a3c 	lwi	r3, r20, 2620
20036850:	e8630000 	lwi	r3, r3, 0
20036854:	a46301ff 	andi	r3, r3, 511
20036858:	10641800 	addk	r3, r4, r3
2003685c:	e093001c 	lbui	r4, r19, 28
20036860:	f0830000 	sbi	r4, r3, 0
		local_is_signed = is_signed;
20036864:	b0000000 	imm	0
20036868:	e8740a74 	lwi	r3, r20, 2676
2003686c:	e8630000 	lwi	r3, r3, 0
20036870:	f873006c 	swi	r3, r19, 108
		tokens_SIGNED[(index_SIGNED + (0)) % SIZE_SIGNED] = local_is_signed;
20036874:	b0000000 	imm	0
20036878:	e87409e8 	lwi	r3, r20, 2536
2003687c:	e8630000 	lwi	r3, r3, 0
20036880:	e8830004 	lwi	r4, r3, 4
20036884:	b0000000 	imm	0
20036888:	e8740a44 	lwi	r3, r20, 2628
2003688c:	e8630000 	lwi	r3, r3, 0
20036890:	a46301ff 	andi	r3, r3, 511
20036894:	64630402 	bslli	r3, r3, 2
20036898:	10641800 	addk	r3, r4, r3
2003689c:	e893006c 	lwi	r4, r19, 108
200368a0:	f8830000 	swi	r4, r3, 0
		local_s_QP = s_QP;
200368a4:	b0000000 	imm	0
200368a8:	e8740a54 	lwi	r3, r20, 2644
200368ac:	e0630000 	lbui	r3, r3, 0
200368b0:	f0730070 	sbi	r3, r19, 112
		tokens_QUANT[(index_QUANT + (0)) % SIZE_QUANT] = local_s_QP;
200368b4:	b0000000 	imm	0
200368b8:	e87409f0 	lwi	r3, r20, 2544
200368bc:	e8630000 	lwi	r3, r3, 0
200368c0:	e8830004 	lwi	r4, r3, 4
200368c4:	b0000000 	imm	0
200368c8:	e8740a4c 	lwi	r3, r20, 2636
200368cc:	e8630000 	lwi	r3, r3, 0
200368d0:	a46301ff 	andi	r3, r3, 511
200368d4:	10641800 	addk	r3, r4, r3
200368d8:	e0930070 	lbui	r4, r19, 112
200368dc:	f0830000 	sbi	r4, r3, 0
	
		// Update ports indexes
		index_BTYPE += 1;
200368e0:	b0000000 	imm	0
200368e4:	e87409f4 	lwi	r3, r20, 2548
200368e8:	e8630000 	lwi	r3, r3, 0
200368ec:	30830001 	addik	r4, r3, 1
200368f0:	b0000000 	imm	0
200368f4:	e87409f4 	lwi	r3, r20, 2548
200368f8:	f8830000 	swi	r4, r3, 0
		index_QP += 1;
200368fc:	b0000000 	imm	0
20036900:	e8740a1c 	lwi	r3, r20, 2588
20036904:	e8630000 	lwi	r3, r3, 0
20036908:	30830001 	addik	r4, r3, 1
2003690c:	b0000000 	imm	0
20036910:	e8740a1c 	lwi	r3, r20, 2588
20036914:	f8830000 	swi	r4, r3, 0
		index_A += 1;
20036918:	b0000000 	imm	0
2003691c:	e87409fc 	lwi	r3, r20, 2556
20036920:	e8630000 	lwi	r3, r3, 0
20036924:	30830001 	addik	r4, r3, 1
20036928:	b0000000 	imm	0
2003692c:	e87409fc 	lwi	r3, r20, 2556
20036930:	f8830000 	swi	r4, r3, 0
		index_B += 1;
20036934:	b0000000 	imm	0
20036938:	e8740a04 	lwi	r3, r20, 2564
2003693c:	e8630000 	lwi	r3, r3, 0
20036940:	30830001 	addik	r4, r3, 1
20036944:	b0000000 	imm	0
20036948:	e8740a04 	lwi	r3, r20, 2564
2003694c:	f8830000 	swi	r4, r3, 0
		index_C += 1;
20036950:	b0000000 	imm	0
20036954:	e8740a0c 	lwi	r3, r20, 2572
20036958:	e8630000 	lwi	r3, r3, 0
2003695c:	30830001 	addik	r4, r3, 1
20036960:	b0000000 	imm	0
20036964:	e8740a0c 	lwi	r3, r20, 2572
20036968:	f8830000 	swi	r4, r3, 0
		index_PTR += 1;
2003696c:	b0000000 	imm	0
20036970:	e8740a2c 	lwi	r3, r20, 2604
20036974:	e8630000 	lwi	r3, r3, 0
20036978:	30830001 	addik	r4, r3, 1
2003697c:	b0000000 	imm	0
20036980:	e8740a2c 	lwi	r3, r20, 2604
20036984:	f8830000 	swi	r4, r3, 0
		index_AC_PRED_DIR += 1;
20036988:	b0000000 	imm	0
2003698c:	e8740a34 	lwi	r3, r20, 2612
20036990:	e8630000 	lwi	r3, r3, 0
20036994:	30830001 	addik	r4, r3, 1
20036998:	b0000000 	imm	0
2003699c:	e8740a34 	lwi	r3, r20, 2612
200369a0:	f8830000 	swi	r4, r3, 0
		index_MODE += 1;
200369a4:	b0000000 	imm	0
200369a8:	e8740a3c 	lwi	r3, r20, 2620
200369ac:	e8630000 	lwi	r3, r3, 0
200369b0:	30830001 	addik	r4, r3, 1
200369b4:	b0000000 	imm	0
200369b8:	e8740a3c 	lwi	r3, r20, 2620
200369bc:	f8830000 	swi	r4, r3, 0
		index_SIGNED += 1;
200369c0:	b0000000 	imm	0
200369c4:	e8740a44 	lwi	r3, r20, 2628
200369c8:	e8630000 	lwi	r3, r3, 0
200369cc:	30830001 	addik	r4, r3, 1
200369d0:	b0000000 	imm	0
200369d4:	e8740a44 	lwi	r3, r20, 2628
200369d8:	f8830000 	swi	r4, r3, 0
		index_QUANT += 1;
200369dc:	b0000000 	imm	0
200369e0:	e8740a4c 	lwi	r3, r20, 2636
200369e4:	e8630000 	lwi	r3, r3, 0
200369e8:	30830001 	addik	r4, r3, 1
200369ec:	b0000000 	imm	0
200369f0:	e8740a4c 	lwi	r3, r20, 2636
200369f4:	f8830000 	swi	r4, r3, 0
		
		read_end_BTYPE();
200369f8:	b0000000 	imm	0
200369fc:	e8740a84 	lwi	r3, r20, 2692
20036a00:	99fc1800 	brald	r15, r3
20036a04:	80000000 	or	r0, r0, r0
		read_end_QP();
20036a08:	b0000000 	imm	0
20036a0c:	e8940aac 	lwi	r4, r20, 2732
20036a10:	99fc2000 	brald	r15, r4
20036a14:	80000000 	or	r0, r0, r0
		read_end_A();
20036a18:	b0000000 	imm	0
20036a1c:	e8740a8c 	lwi	r3, r20, 2700
20036a20:	99fc1800 	brald	r15, r3
20036a24:	80000000 	or	r0, r0, r0
		read_end_B();
20036a28:	b0000000 	imm	0
20036a2c:	e8940a94 	lwi	r4, r20, 2708
20036a30:	99fc2000 	brald	r15, r4
20036a34:	80000000 	or	r0, r0, r0
		read_end_C();
20036a38:	b0000000 	imm	0
20036a3c:	e8740a9c 	lwi	r3, r20, 2716
20036a40:	99fc1800 	brald	r15, r3
20036a44:	80000000 	or	r0, r0, r0
		write_end_PTR();
20036a48:	b0000000 	imm	0
20036a4c:	e8940abc 	lwi	r4, r20, 2748
20036a50:	99fc2000 	brald	r15, r4
20036a54:	80000000 	or	r0, r0, r0
		write_end_AC_PRED_DIR();
20036a58:	b0000000 	imm	0
20036a5c:	e8740ac4 	lwi	r3, r20, 2756
20036a60:	99fc1800 	brald	r15, r3
20036a64:	80000000 	or	r0, r0, r0
		write_end_MODE();
20036a68:	b0000000 	imm	0
20036a6c:	e8940acc 	lwi	r4, r20, 2764
20036a70:	99fc2000 	brald	r15, r4
20036a74:	80000000 	or	r0, r0, r0
		write_end_SIGNED();
20036a78:	b0000000 	imm	0
20036a7c:	e8740ad4 	lwi	r3, r20, 2772
20036a80:	99fc1800 	brald	r15, r3
20036a84:	80000000 	or	r0, r0, r0
		write_end_QUANT();
20036a88:	b0000000 	imm	0
20036a8c:	e8940adc 	lwi	r4, r20, 2780
20036a90:	99fc2000 	brald	r15, r4
20036a94:	80000000 	or	r0, r0, r0
	}
20036a98:	e9e10000 	lwi	r15, r1, 0
20036a9c:	10330000 	addk	r1, r19, r0
20036aa0:	ea610074 	lwi	r19, r1, 116
20036aa4:	ea810078 	lwi	r20, r1, 120
20036aa8:	3021007c 	addik	r1, r1, 124
20036aac:	b60f0008 	rtsd	r15, 8
20036ab0:	80000000 	or	r0, r0, r0

20036ab4 <isSchedulable_getdc_inter>:
	static i32 isSchedulable_getdc_inter() {
20036ab4:	3021fff0 	addik	r1, r1, -16
20036ab8:	fa610008 	swi	r19, r1, 8
20036abc:	fa81000c 	swi	r20, r1, 12
20036ac0:	12610000 	addk	r19, r1, r0
20036ac4:	96808000 	mfs	r20, rpc
20036ac8:	b000dffc 	imm	-8196
20036acc:	3294ae98 	addik	r20, r20, -20840
		i32 result;
	
		result = 1;
20036ad0:	30600001 	addik	r3, r0, 1
20036ad4:	f8730004 	swi	r3, r19, 4
		return result;
20036ad8:	e8730004 	lwi	r3, r19, 4
	}
20036adc:	10330000 	addk	r1, r19, r0
20036ae0:	ea610008 	lwi	r19, r1, 8
20036ae4:	ea81000c 	lwi	r20, r1, 12
20036ae8:	30210010 	addik	r1, r1, 16
20036aec:	b60f0008 	rtsd	r15, 8
20036af0:	80000000 	or	r0, r0, r0

20036af4 <getdc_inter>:
	
	static void getdc_inter() {
20036af4:	3021ffc8 	addik	r1, r1, -56
20036af8:	f9e10000 	swi	r15, r1, 0
20036afc:	fa610030 	swi	r19, r1, 48
20036b00:	fa810034 	swi	r20, r1, 52
20036b04:	12610000 	addk	r19, r1, r0
20036b08:	96808000 	mfs	r20, rpc
20036b0c:	b000dffc 	imm	-8196
20036b10:	3294ae54 	addik	r20, r20, -20908
	
		// Compute aligned port indexes
		i32 index_aligned_QFS_DC = index_QFS_DC % SIZE_QFS_DC;
20036b14:	b0000000 	imm	0
20036b18:	e8740a14 	lwi	r3, r20, 2580
20036b1c:	e8630000 	lwi	r3, r3, 0
20036b20:	a46301ff 	andi	r3, r3, 511
20036b24:	f873001c 	swi	r3, r19, 28
		i32 tmp_abs;
		i8 local_round;
		i16 v;
		i32 local_is_signed;
	
		dc = tokens_QFS_DC[(index_QFS_DC + (0)) % SIZE_QFS_DC];
20036b28:	b0000000 	imm	0
20036b2c:	e87409cc 	lwi	r3, r20, 2508
20036b30:	e8630000 	lwi	r3, r3, 0
20036b34:	e8830004 	lwi	r4, r3, 4
20036b38:	b0000000 	imm	0
20036b3c:	e8740a14 	lwi	r3, r20, 2580
20036b40:	e8630000 	lwi	r3, r3, 0
20036b44:	a46301ff 	andi	r3, r3, 511
20036b48:	10631800 	addk	r3, r3, r3
20036b4c:	10641800 	addk	r3, r4, r3
20036b50:	e4630000 	lhui	r3, r3, 0
20036b54:	f4730020 	shi	r3, r19, 32
		local_s_QP = s_QP;
20036b58:	b0000000 	imm	0
20036b5c:	e8740a54 	lwi	r3, r20, 2644
20036b60:	e0630000 	lbui	r3, r3, 0
20036b64:	f0730022 	sbi	r3, r19, 34
		tmp_abs = Math_abs(dc);
20036b68:	e4730020 	lhui	r3, r19, 32
20036b6c:	90630061 	sext16	r3, r3
20036b70:	10a30000 	addk	r5, r3, r0
20036b74:	b0000000 	imm	0
20036b78:	e8940ae0 	lwi	r4, r20, 2784
20036b7c:	99fc2000 	brald	r15, r4
20036b80:	80000000 	or	r0, r0, r0
20036b84:	f8730024 	swi	r3, r19, 36
		local_round = round;
20036b88:	b0000000 	imm	0
20036b8c:	e8740a58 	lwi	r3, r20, 2648
20036b90:	e0630000 	lbui	r3, r3, 0
20036b94:	f0730028 	sbi	r3, r19, 40
		v = local_s_QP * ((tmp_abs << 1) + 1) - local_round;
20036b98:	e0730022 	lbui	r3, r19, 34
20036b9c:	90630060 	sext8	r3, r3
20036ba0:	b0000000 	imm	0
20036ba4:	a483ffff 	andi	r4, r3, -1
20036ba8:	e8730024 	lwi	r3, r19, 36
20036bac:	10631800 	addk	r3, r3, r3
20036bb0:	30630001 	addik	r3, r3, 1
20036bb4:	b0000000 	imm	0
20036bb8:	a463ffff 	andi	r3, r3, -1
20036bbc:	40641800 	mul	r3, r4, r3
20036bc0:	b0000000 	imm	0
20036bc4:	a483ffff 	andi	r4, r3, -1
20036bc8:	e0730028 	lbui	r3, r19, 40
20036bcc:	90630060 	sext8	r3, r3
20036bd0:	b0000000 	imm	0
20036bd4:	a463ffff 	andi	r3, r3, -1
20036bd8:	14632000 	rsubk	r3, r3, r4
20036bdc:	b0000000 	imm	0
20036be0:	a463ffff 	andi	r3, r3, -1
20036be4:	f473002a 	shi	r3, r19, 42
		if (dc == 0) {
20036be8:	e4730020 	lhui	r3, r19, 32
20036bec:	90630061 	sext16	r3, r3
20036bf0:	bc230014 	bnei	r3, 20		// 20036c04
			dc_val = 0;
20036bf4:	b0000000 	imm	0
20036bf8:	e8740a70 	lwi	r3, r20, 2672
20036bfc:	f4030000 	shi	r0, r3, 0
20036c00:	b8000070 	bri	112		// 20036c70
		} else {
			local_is_signed = is_signed;
20036c04:	b0000000 	imm	0
20036c08:	e8740a74 	lwi	r3, r20, 2676
20036c0c:	e8630000 	lwi	r3, r3, 0
20036c10:	f873002c 	swi	r3, r19, 44
			if (!local_is_signed) {
20036c14:	e873002c 	lwi	r3, r19, 44
20036c18:	bc230018 	bnei	r3, 24		// 20036c30
				dc_val = dc;
20036c1c:	b0000000 	imm	0
20036c20:	e8740a70 	lwi	r3, r20, 2672
20036c24:	e4930020 	lhui	r4, r19, 32
20036c28:	f4830000 	shi	r4, r3, 0
20036c2c:	b8000044 	bri	68		// 20036c70
			} else {
				if (dc < 0) {
20036c30:	e4730020 	lhui	r3, r19, 32
20036c34:	90630061 	sext16	r3, r3
20036c38:	bca30028 	bgei	r3, 40		// 20036c60
					dc_val = -v;
20036c3c:	e473002a 	lhui	r3, r19, 42
20036c40:	14630000 	rsubk	r3, r3, r0
20036c44:	b0000000 	imm	0
20036c48:	a463ffff 	andi	r3, r3, -1
20036c4c:	90830061 	sext16	r4, r3
20036c50:	b0000000 	imm	0
20036c54:	e8740a70 	lwi	r3, r20, 2672
20036c58:	f4830000 	shi	r4, r3, 0
20036c5c:	b8000014 	bri	20		// 20036c70
				} else {
					dc_val = v;
20036c60:	b0000000 	imm	0
20036c64:	e8740a70 	lwi	r3, r20, 2672
20036c68:	e493002a 	lhui	r4, r19, 42
20036c6c:	f4830000 	shi	r4, r3, 0
				}
			}
		}
	
		// Update ports indexes
		index_QFS_DC += 1;
20036c70:	b0000000 	imm	0
20036c74:	e8740a14 	lwi	r3, r20, 2580
20036c78:	e8630000 	lwi	r3, r3, 0
20036c7c:	30830001 	addik	r4, r3, 1
20036c80:	b0000000 	imm	0
20036c84:	e8740a14 	lwi	r3, r20, 2580
20036c88:	f8830000 	swi	r4, r3, 0
		
		read_end_QFS_DC();
20036c8c:	b0000000 	imm	0
20036c90:	e8740aa4 	lwi	r3, r20, 2724
20036c94:	99fc1800 	brald	r15, r3
20036c98:	80000000 	or	r0, r0, r0
	}
20036c9c:	e9e10000 	lwi	r15, r1, 0
20036ca0:	10330000 	addk	r1, r19, r0
20036ca4:	ea610030 	lwi	r19, r1, 48
20036ca8:	ea810034 	lwi	r20, r1, 52
20036cac:	30210038 	addik	r1, r1, 56
20036cb0:	b60f0008 	rtsd	r15, 8
20036cb4:	80000000 	or	r0, r0, r0

20036cb8 <isSchedulable_getdc_intra>:
	static i32 isSchedulable_getdc_intra() {
20036cb8:	3021fff0 	addik	r1, r1, -16
20036cbc:	fa610008 	swi	r19, r1, 8
20036cc0:	fa81000c 	swi	r20, r1, 12
20036cc4:	12610000 	addk	r19, r1, r0
20036cc8:	96808000 	mfs	r20, rpc
20036ccc:	b000dffc 	imm	-8196
20036cd0:	3294ac94 	addik	r20, r20, -21356
		i32 result;
	
		result = 1;
20036cd4:	30600001 	addik	r3, r0, 1
20036cd8:	f8730004 	swi	r3, r19, 4
		return result;
20036cdc:	e8730004 	lwi	r3, r19, 4
	}
20036ce0:	10330000 	addk	r1, r19, r0
20036ce4:	ea610008 	lwi	r19, r1, 8
20036ce8:	ea81000c 	lwi	r20, r1, 12
20036cec:	30210010 	addik	r1, r1, 16
20036cf0:	b60f0008 	rtsd	r15, 8
20036cf4:	80000000 	or	r0, r0, r0

20036cf8 <getdc_intra>:
	
	static void getdc_intra() {
20036cf8:	3021ffd0 	addik	r1, r1, -48
20036cfc:	f9e10000 	swi	r15, r1, 0
20036d00:	fa610028 	swi	r19, r1, 40
20036d04:	fa81002c 	swi	r20, r1, 44
20036d08:	12610000 	addk	r19, r1, r0
20036d0c:	96808000 	mfs	r20, rpc
20036d10:	b000dffc 	imm	-8196
20036d14:	3294ac50 	addik	r20, r20, -21424
	
		// Compute aligned port indexes
		i32 index_aligned_QFS_DC = index_QFS_DC % SIZE_QFS_DC;
20036d18:	b0000000 	imm	0
20036d1c:	e8740a14 	lwi	r3, r20, 2580
20036d20:	e8630000 	lwi	r3, r3, 0
20036d24:	a46301ff 	andi	r3, r3, 511
20036d28:	f873001c 	swi	r3, r19, 28
	
		i16 dc;
		i16 local_dc_pred;
		i8 local_scaler;
	
		dc = tokens_QFS_DC[(index_QFS_DC + (0)) % SIZE_QFS_DC];
20036d2c:	b0000000 	imm	0
20036d30:	e87409cc 	lwi	r3, r20, 2508
20036d34:	e8630000 	lwi	r3, r3, 0
20036d38:	e8830004 	lwi	r4, r3, 4
20036d3c:	b0000000 	imm	0
20036d40:	e8740a14 	lwi	r3, r20, 2580
20036d44:	e8630000 	lwi	r3, r3, 0
20036d48:	a46301ff 	andi	r3, r3, 511
20036d4c:	10631800 	addk	r3, r3, r3
20036d50:	10641800 	addk	r3, r4, r3
20036d54:	e4630000 	lhui	r3, r3, 0
20036d58:	f4730020 	shi	r3, r19, 32
		local_dc_pred = dc_pred;
20036d5c:	b0000000 	imm	0
20036d60:	e8740a68 	lwi	r3, r20, 2664
20036d64:	e4630000 	lhui	r3, r3, 0
20036d68:	f4730022 	shi	r3, r19, 34
		local_scaler = scaler;
20036d6c:	b0000000 	imm	0
20036d70:	e8740a6c 	lwi	r3, r20, 2668
20036d74:	e0630000 	lbui	r3, r3, 0
20036d78:	f0730024 	sbi	r3, r19, 36
		dc_val = (dc + local_dc_pred) * local_scaler;
20036d7c:	e4730020 	lhui	r3, r19, 32
20036d80:	90830061 	sext16	r4, r3
20036d84:	e4730022 	lhui	r3, r19, 34
20036d88:	90630061 	sext16	r3, r3
20036d8c:	10641800 	addk	r3, r4, r3
20036d90:	b0000000 	imm	0
20036d94:	a483ffff 	andi	r4, r3, -1
20036d98:	e0730024 	lbui	r3, r19, 36
20036d9c:	90630060 	sext8	r3, r3
20036da0:	b0000000 	imm	0
20036da4:	a463ffff 	andi	r3, r3, -1
20036da8:	40641800 	mul	r3, r4, r3
20036dac:	b0000000 	imm	0
20036db0:	a463ffff 	andi	r3, r3, -1
20036db4:	90830061 	sext16	r4, r3
20036db8:	b0000000 	imm	0
20036dbc:	e8740a70 	lwi	r3, r20, 2672
20036dc0:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_QFS_DC += 1;
20036dc4:	b0000000 	imm	0
20036dc8:	e8740a14 	lwi	r3, r20, 2580
20036dcc:	e8630000 	lwi	r3, r3, 0
20036dd0:	30830001 	addik	r4, r3, 1
20036dd4:	b0000000 	imm	0
20036dd8:	e8740a14 	lwi	r3, r20, 2580
20036ddc:	f8830000 	swi	r4, r3, 0
		
		read_end_QFS_DC();
20036de0:	b0000000 	imm	0
20036de4:	e8740aa4 	lwi	r3, r20, 2724
20036de8:	99fc1800 	brald	r15, r3
20036dec:	80000000 	or	r0, r0, r0
	}
20036df0:	e9e10000 	lwi	r15, r1, 0
20036df4:	10330000 	addk	r1, r19, r0
20036df8:	ea610028 	lwi	r19, r1, 40
20036dfc:	ea81002c 	lwi	r20, r1, 44
20036e00:	30210030 	addik	r1, r1, 48
20036e04:	b60f0008 	rtsd	r15, 8
20036e08:	80000000 	or	r0, r0, r0

20036e0c <isSchedulable_sat>:
	static i32 isSchedulable_sat() {
20036e0c:	3021fff0 	addik	r1, r1, -16
20036e10:	fa610008 	swi	r19, r1, 8
20036e14:	fa81000c 	swi	r20, r1, 12
20036e18:	12610000 	addk	r19, r1, r0
20036e1c:	96808000 	mfs	r20, rpc
20036e20:	b000dffc 	imm	-8196
20036e24:	3294ab40 	addik	r20, r20, -21696
		i32 result;
	
		result = 1;
20036e28:	30600001 	addik	r3, r0, 1
20036e2c:	f8730004 	swi	r3, r19, 4
		return result;
20036e30:	e8730004 	lwi	r3, r19, 4
	}
20036e34:	10330000 	addk	r1, r19, r0
20036e38:	ea610008 	lwi	r19, r1, 8
20036e3c:	ea81000c 	lwi	r20, r1, 12
20036e40:	30210010 	addik	r1, r1, 16
20036e44:	b60f0008 	rtsd	r15, 8
20036e48:	80000000 	or	r0, r0, r0

20036e4c <sat>:
	
	static void sat() {
20036e4c:	3021ffcc 	addik	r1, r1, -52
20036e50:	f9e10000 	swi	r15, r1, 0
20036e54:	fa61002c 	swi	r19, r1, 44
20036e58:	fa810030 	swi	r20, r1, 48
20036e5c:	12610000 	addk	r19, r1, r0
20036e60:	96808000 	mfs	r20, rpc
20036e64:	b000dffc 	imm	-8196
20036e68:	3294aafc 	addik	r20, r20, -21764
	
		// Compute aligned port indexes
		i32 index_aligned_QF_DC = index_QF_DC % SIZE_QF_DC;
20036e6c:	b0000000 	imm	0
20036e70:	e8740a24 	lwi	r3, r20, 2596
20036e74:	e8630000 	lwi	r3, r3, 0
20036e78:	a46301ff 	andi	r3, r3, 511
20036e7c:	f873001c 	swi	r3, r19, 28
		i16 local_dc_val;
		i16 dc;
		i32 local_ptr;
		i8 local_comp;
	
		local_dc_val = dc_val;
20036e80:	b0000000 	imm	0
20036e84:	e8740a70 	lwi	r3, r20, 2672
20036e88:	e4630000 	lhui	r3, r3, 0
20036e8c:	f4730020 	shi	r3, r19, 32
		dc = saturate(local_dc_val);
20036e90:	e4730020 	lhui	r3, r19, 32
20036e94:	90630061 	sext16	r3, r3
20036e98:	10a30000 	addk	r5, r3, r0
20036e9c:	b0000000 	imm	0
20036ea0:	e8940ae4 	lwi	r4, r20, 2788
20036ea4:	99fc2000 	brald	r15, r4
20036ea8:	80000000 	or	r0, r0, r0
20036eac:	f4730022 	shi	r3, r19, 34
		local_ptr = ptr;
20036eb0:	b0000000 	imm	0
20036eb4:	e8740a5c 	lwi	r3, r20, 2652
20036eb8:	e8630000 	lwi	r3, r3, 0
20036ebc:	f8730024 	swi	r3, r19, 36
		local_comp = comp;
20036ec0:	b0000000 	imm	0
20036ec4:	e8740a60 	lwi	r3, r20, 2656
20036ec8:	e0630000 	lbui	r3, r3, 0
20036ecc:	f0730028 	sbi	r3, r19, 40
		dc_buf[local_ptr | local_comp] = dc;
20036ed0:	e0730028 	lbui	r3, r19, 40
20036ed4:	90830060 	sext8	r4, r3
20036ed8:	e8730024 	lwi	r3, r19, 36
20036edc:	80641800 	or	r3, r4, r3
20036ee0:	b0000000 	imm	0
20036ee4:	e8940a64 	lwi	r4, r20, 2660
20036ee8:	10631800 	addk	r3, r3, r3
20036eec:	10641800 	addk	r3, r4, r3
20036ef0:	e4930022 	lhui	r4, r19, 34
20036ef4:	f4830000 	shi	r4, r3, 0
		tokens_QF_DC[(index_QF_DC + (0)) % SIZE_QF_DC] = dc;
20036ef8:	b0000000 	imm	0
20036efc:	e87409e0 	lwi	r3, r20, 2528
20036f00:	e8630000 	lwi	r3, r3, 0
20036f04:	e8830004 	lwi	r4, r3, 4
20036f08:	b0000000 	imm	0
20036f0c:	e8740a24 	lwi	r3, r20, 2596
20036f10:	e8630000 	lwi	r3, r3, 0
20036f14:	a46301ff 	andi	r3, r3, 511
20036f18:	10631800 	addk	r3, r3, r3
20036f1c:	10641800 	addk	r3, r4, r3
20036f20:	e4930022 	lhui	r4, r19, 34
20036f24:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_QF_DC += 1;
20036f28:	b0000000 	imm	0
20036f2c:	e8740a24 	lwi	r3, r20, 2596
20036f30:	e8630000 	lwi	r3, r3, 0
20036f34:	30830001 	addik	r4, r3, 1
20036f38:	b0000000 	imm	0
20036f3c:	e8740a24 	lwi	r3, r20, 2596
20036f40:	f8830000 	swi	r4, r3, 0
		
		write_end_QF_DC();
20036f44:	b0000000 	imm	0
20036f48:	e8740ab4 	lwi	r3, r20, 2740
20036f4c:	99fc1800 	brald	r15, r3
20036f50:	80000000 	or	r0, r0, r0
	}
20036f54:	e9e10000 	lwi	r15, r1, 0
20036f58:	10330000 	addk	r1, r19, r0
20036f5c:	ea61002c 	lwi	r19, r1, 44
20036f60:	ea810030 	lwi	r20, r1, 48
20036f64:	30210034 	addik	r1, r1, 52
20036f68:	b60f0008 	rtsd	r15, 8
20036f6c:	80000000 	or	r0, r0, r0

20036f70 <isSchedulable_advance>:
	static i32 isSchedulable_advance() {
20036f70:	3021fff0 	addik	r1, r1, -16
20036f74:	fa610008 	swi	r19, r1, 8
20036f78:	fa81000c 	swi	r20, r1, 12
20036f7c:	12610000 	addk	r19, r1, r0
20036f80:	96808000 	mfs	r20, rpc
20036f84:	b000dffc 	imm	-8196
20036f88:	3294a9dc 	addik	r20, r20, -22052
		i32 result;
	
		result = 1;
20036f8c:	30600001 	addik	r3, r0, 1
20036f90:	f8730004 	swi	r3, r19, 4
		return result;
20036f94:	e8730004 	lwi	r3, r19, 4
	}
20036f98:	10330000 	addk	r1, r19, r0
20036f9c:	ea610008 	lwi	r19, r1, 8
20036fa0:	ea81000c 	lwi	r20, r1, 12
20036fa4:	30210010 	addik	r1, r1, 16
20036fa8:	b60f0008 	rtsd	r15, 8
20036fac:	80000000 	or	r0, r0, r0

20036fb0 <advance>:
	
	static void advance() {
20036fb0:	3021ffe8 	addik	r1, r1, -24
20036fb4:	fa610010 	swi	r19, r1, 16
20036fb8:	fa810014 	swi	r20, r1, 20
20036fbc:	12610000 	addk	r19, r1, r0
20036fc0:	96808000 	mfs	r20, rpc
20036fc4:	b000dffc 	imm	-8196
20036fc8:	3294a99c 	addik	r20, r20, -22116
	
		i8 local_comp;
		i32 local_ptr;
		i32 local_BUF_SIZE;
	
		local_comp = comp;
20036fcc:	b0000000 	imm	0
20036fd0:	e8740a60 	lwi	r3, r20, 2656
20036fd4:	e0630000 	lbui	r3, r3, 0
20036fd8:	f0730004 	sbi	r3, r19, 4
		comp = local_comp + 1;
20036fdc:	e0730004 	lbui	r3, r19, 4
20036fe0:	30630001 	addik	r3, r3, 1
20036fe4:	a46300ff 	andi	r3, r3, 255
20036fe8:	90830060 	sext8	r4, r3
20036fec:	b0000000 	imm	0
20036ff0:	e8740a60 	lwi	r3, r20, 2656
20036ff4:	f0830000 	sbi	r4, r3, 0
		local_comp = comp;
20036ff8:	b0000000 	imm	0
20036ffc:	e8740a60 	lwi	r3, r20, 2656
20037000:	e0630000 	lbui	r3, r3, 0
20037004:	f0730004 	sbi	r3, r19, 4
		if (local_comp == 6) {
20037008:	e0730004 	lbui	r3, r19, 4
2003700c:	90630060 	sext8	r3, r3
20037010:	a8630006 	xori	r3, r3, 6
20037014:	bc230070 	bnei	r3, 112		// 20037084
			comp = 0;
20037018:	b0000000 	imm	0
2003701c:	e8740a60 	lwi	r3, r20, 2656
20037020:	f0030000 	sbi	r0, r3, 0
			local_ptr = ptr;
20037024:	b0000000 	imm	0
20037028:	e8740a5c 	lwi	r3, r20, 2652
2003702c:	e8630000 	lwi	r3, r3, 0
20037030:	f8730008 	swi	r3, r19, 8
			if (local_ptr == 8) {
20037034:	e8730008 	lwi	r3, r19, 8
20037038:	a8630008 	xori	r3, r3, 8
2003703c:	bc230024 	bnei	r3, 36		// 20037060
				local_BUF_SIZE = BUF_SIZE;
20037040:	30600070 	addik	r3, r0, 112	// 70 <deregister_tm_clones>
20037044:	f873000c 	swi	r3, r19, 12
				ptr = local_BUF_SIZE - 8;
20037048:	e873000c 	lwi	r3, r19, 12
2003704c:	3083fff8 	addik	r4, r3, -8
20037050:	b0000000 	imm	0
20037054:	e8740a5c 	lwi	r3, r20, 2652
20037058:	f8830000 	swi	r4, r3, 0
2003705c:	b8000028 	bri	40		// 20037084
			} else {
				local_ptr = ptr;
20037060:	b0000000 	imm	0
20037064:	e8740a5c 	lwi	r3, r20, 2652
20037068:	e8630000 	lwi	r3, r3, 0
2003706c:	f8730008 	swi	r3, r19, 8
				ptr = local_ptr - 8;
20037070:	e8730008 	lwi	r3, r19, 8
20037074:	3083fff8 	addik	r4, r3, -8
20037078:	b0000000 	imm	0
2003707c:	e8740a5c 	lwi	r3, r20, 2652
20037080:	f8830000 	swi	r4, r3, 0
			}
		}
	
		// Update ports indexes
		
	}
20037084:	10330000 	addk	r1, r19, r0
20037088:	ea610010 	lwi	r19, r1, 16
2003708c:	ea810014 	lwi	r20, r1, 20
20037090:	30210018 	addik	r1, r1, 24
20037094:	b60f0008 	rtsd	r15, 8
20037098:	80000000 	or	r0, r0, r0

2003709c <decoder_texture_DCReconstruction_invpred_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_texture_DCReconstruction_invpred_initialize() {
2003709c:	3021fff0 	addik	r1, r1, -16
200370a0:	fa610008 	swi	r19, r1, 8
200370a4:	fa81000c 	swi	r20, r1, 12
200370a8:	12610000 	addk	r19, r1, r0
200370ac:	96808000 	mfs	r20, rpc
200370b0:	b000dffc 	imm	-8196
200370b4:	3294a8b0 	addik	r20, r20, -22352
		int i = 0;
200370b8:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_read;
200370bc:	b0000000 	imm	0
200370c0:	e8740a7c 	lwi	r3, r20, 2684
200370c4:	30800005 	addik	r4, r0, 5
200370c8:	f8830000 	swi	r4, r3, 0
		
	finished:
		// no read_end/write_end here!
		return;
200370cc:	80000000 	or	r0, r0, r0
	}
200370d0:	10330000 	addk	r1, r19, r0
200370d4:	ea610008 	lwi	r19, r1, 8
200370d8:	ea81000c 	lwi	r20, r1, 12
200370dc:	30210010 	addik	r1, r1, 16
200370e0:	b60f0008 	rtsd	r15, 8
200370e4:	80000000 	or	r0, r0, r0

200370e8 <decoder_texture_DCReconstruction_invpred_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	
	int decoder_texture_DCReconstruction_invpred_scheduler() {
200370e8:	3021ffb0 	addik	r1, r1, -80
200370ec:	f9e10000 	swi	r15, r1, 0
200370f0:	fa610048 	swi	r19, r1, 72
200370f4:	fa81004c 	swi	r20, r1, 76
200370f8:	12610000 	addk	r19, r1, r0
200370fc:	96808000 	mfs	r20, rpc
20037100:	b000dffc 	imm	-8196
20037104:	3294a860 	addik	r20, r20, -22432
		int i = 0;
20037108:	f813001c 	swi	r0, r19, 28
		if(needInit){
2003710c:	b0000000 	imm	0
20037110:	e8740a78 	lwi	r3, r20, 2680
20037114:	e0630000 	lbui	r3, r3, 0
20037118:	bc03001c 	beqi	r3, 28		// 20037134
			decoder_texture_DCReconstruction_invpred_initialize();
2003711c:	b000ffff 	imm	-1
20037120:	b9f4ff7c 	brlid	r15, -132	// 2003709c <decoder_texture_DCReconstruction_invpred_initialize>
20037124:	80000000 	or	r0, r0, r0
			needInit = 0;
20037128:	b0000000 	imm	0
2003712c:	e8740a78 	lwi	r3, r20, 2680
20037130:	f0030000 	sbi	r0, r3, 0
		}
	
		read_BTYPE();
20037134:	b0000000 	imm	0
20037138:	e8740a80 	lwi	r3, r20, 2688
2003713c:	99fc1800 	brald	r15, r3
20037140:	80000000 	or	r0, r0, r0
		read_A();
20037144:	b0000000 	imm	0
20037148:	e8940a88 	lwi	r4, r20, 2696
2003714c:	99fc2000 	brald	r15, r4
20037150:	80000000 	or	r0, r0, r0
		read_B();
20037154:	b0000000 	imm	0
20037158:	e8740a90 	lwi	r3, r20, 2704
2003715c:	99fc1800 	brald	r15, r3
20037160:	80000000 	or	r0, r0, r0
		read_C();
20037164:	b0000000 	imm	0
20037168:	e8940a98 	lwi	r4, r20, 2712
2003716c:	99fc2000 	brald	r15, r4
20037170:	80000000 	or	r0, r0, r0
		read_QFS_DC();
20037174:	b0000000 	imm	0
20037178:	e8740aa0 	lwi	r3, r20, 2720
2003717c:	99fc1800 	brald	r15, r3
20037180:	80000000 	or	r0, r0, r0
		read_QP();
20037184:	b0000000 	imm	0
20037188:	e8940aa8 	lwi	r4, r20, 2728
2003718c:	99fc2000 	brald	r15, r4
20037190:	80000000 	or	r0, r0, r0
		write_QF_DC();
20037194:	b0000000 	imm	0
20037198:	e8740ab0 	lwi	r3, r20, 2736
2003719c:	99fc1800 	brald	r15, r3
200371a0:	80000000 	or	r0, r0, r0
		write_PTR();
200371a4:	b0000000 	imm	0
200371a8:	e8940ab8 	lwi	r4, r20, 2744
200371ac:	99fc2000 	brald	r15, r4
200371b0:	80000000 	or	r0, r0, r0
		write_AC_PRED_DIR();
200371b4:	b0000000 	imm	0
200371b8:	e8740ac0 	lwi	r3, r20, 2752
200371bc:	99fc1800 	brald	r15, r3
200371c0:	80000000 	or	r0, r0, r0
		write_MODE();
200371c4:	b0000000 	imm	0
200371c8:	e8940ac8 	lwi	r4, r20, 2760
200371cc:	99fc2000 	brald	r15, r4
200371d0:	80000000 	or	r0, r0, r0
		write_SIGNED();
200371d4:	b0000000 	imm	0
200371d8:	e8740ad0 	lwi	r3, r20, 2768
200371dc:	99fc1800 	brald	r15, r3
200371e0:	80000000 	or	r0, r0, r0
		write_QUANT();
200371e4:	b0000000 	imm	0
200371e8:	e8940ad8 	lwi	r4, r20, 2776
200371ec:	99fc2000 	brald	r15, r4
200371f0:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
200371f4:	b0000000 	imm	0
200371f8:	e8740a7c 	lwi	r3, r20, 2684
200371fc:	e8630000 	lwi	r3, r3, 0
20037200:	30800006 	addik	r4, r0, 6
20037204:	16432003 	cmpu	r18, r3, r4
20037208:	bc520020 	blti	r18, 32		// 20037228
2003720c:	64830402 	bslli	r4, r3, 2
20037210:	b0000000 	imm	0
20037214:	e8740b34 	lwi	r3, r20, 2868
20037218:	10641800 	addk	r3, r4, r3
2003721c:	e8630000 	lwi	r3, r3, 0
20037220:	1063a000 	addk	r3, r3, r20
20037224:	98081800 	bra	r3
		case my_state_read:
			goto l_read;
		case my_state_sat:
			goto l_sat;
		default:
			exit(1);
20037228:	30a00001 	addik	r5, r0, 1
2003722c:	b000dffc 	imm	-8196
20037230:	b9f49168 	brlid	r15, -28312	// 398 <exit>
20037234:	80000000 	or	r0, r0, r0

20037238 <$L337>:
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_advance:
			goto l_advance;
20037238:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_advance:
			if (isSchedulable_advance()) {
2003723c:	b0000000 	imm	0
20037240:	e8940b2c 	lwi	r4, r20, 2860
20037244:	99fc2000 	brald	r15, r4
20037248:	80000000 	or	r0, r0, r0
2003724c:	bc030040 	beqi	r3, 64		// 2003728c
				int stop = 0;
20037250:	f8130034 	swi	r0, r19, 52
				if (stop != 0) {
20037254:	e8730034 	lwi	r3, r19, 52
20037258:	bc030014 	beqi	r3, 20		// 2003726c
					_FSM_state = my_state_advance;
2003725c:	b0000000 	imm	0
20037260:	e8740a7c 	lwi	r3, r20, 2684
20037264:	f8030000 	swi	r0, r3, 0
					goto finished;
20037268:	b800081c 	bri	2076		// 20037a84
				}
				advance();
2003726c:	b0000000 	imm	0
20037270:	e8740b30 	lwi	r3, r20, 2864
20037274:	99fc1800 	brald	r15, r3
20037278:	80000000 	or	r0, r0, r0
				i++;
2003727c:	e873001c 	lwi	r3, r19, 28
20037280:	30630001 	addik	r3, r3, 1
20037284:	f873001c 	swi	r3, r19, 28
				goto l_read;
20037288:	b8000248 	bri	584		// 200374d0
			} else {
				_FSM_state = my_state_advance;
2003728c:	b0000000 	imm	0
20037290:	e8740a7c 	lwi	r3, r20, 2684
20037294:	f8030000 	swi	r0, r3, 0
				goto finished;
20037298:	b80007ec 	bri	2028		// 20037a84

2003729c <$L338>:
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_advance:
			goto l_advance;
		case my_state_geth:
			goto l_geth;
2003729c:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_advance;
				goto finished;
			}
		l_geth:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_skip()) {
200372a0:	b0000000 	imm	0
200372a4:	e87409f8 	lwi	r3, r20, 2552
200372a8:	e8830000 	lwi	r4, r3, 0
200372ac:	b0000000 	imm	0
200372b0:	e87409f4 	lwi	r3, r20, 2548
200372b4:	e8630000 	lwi	r3, r3, 0
200372b8:	88641800 	xor	r3, r4, r3
200372bc:	bc030058 	beqi	r3, 88		// 20037314
200372c0:	b0000000 	imm	0
200372c4:	e8940af4 	lwi	r4, r20, 2804
200372c8:	99fc2000 	brald	r15, r4
200372cc:	80000000 	or	r0, r0, r0
200372d0:	bc030044 	beqi	r3, 68		// 20037314
				int stop = 0;
200372d4:	f8130038 	swi	r0, r19, 56
				if (stop != 0) {
200372d8:	e8730038 	lwi	r3, r19, 56
200372dc:	bc030018 	beqi	r3, 24		// 200372f4
					_FSM_state = my_state_geth;
200372e0:	b0000000 	imm	0
200372e4:	e8740a7c 	lwi	r3, r20, 2684
200372e8:	30800001 	addik	r4, r0, 1
200372ec:	f8830000 	swi	r4, r3, 0
					goto finished;
200372f0:	b8000794 	bri	1940		// 20037a84
				}
				skip();
200372f4:	b0000000 	imm	0
200372f8:	e8740af8 	lwi	r3, r20, 2808
200372fc:	99fc1800 	brald	r15, r3
20037300:	80000000 	or	r0, r0, r0
				i++;
20037304:	e873001c 	lwi	r3, r19, 28
20037308:	30630001 	addik	r3, r3, 1
2003730c:	f873001c 	swi	r3, r19, 28
				goto l_read;
20037310:	b80001c0 	bri	448		// 200374d0
			} else {
				_FSM_state = my_state_geth;
20037314:	b0000000 	imm	0
20037318:	e8740a7c 	lwi	r3, r20, 2684
2003731c:	30800001 	addik	r4, r0, 1
20037320:	f8830000 	swi	r4, r3, 0
				goto finished;
20037324:	b8000760 	bri	1888		// 20037a84

20037328 <$L339>:
		case my_state_advance:
			goto l_advance;
		case my_state_geth:
			goto l_geth;
		case my_state_getw:
			goto l_getw;
20037328:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_geth;
				goto finished;
			}
		l_getw:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_skip()) {
2003732c:	b0000000 	imm	0
20037330:	e87409f8 	lwi	r3, r20, 2552
20037334:	e8830000 	lwi	r4, r3, 0
20037338:	b0000000 	imm	0
2003733c:	e87409f4 	lwi	r3, r20, 2548
20037340:	e8630000 	lwi	r3, r3, 0
20037344:	88641800 	xor	r3, r4, r3
20037348:	bc030058 	beqi	r3, 88		// 200373a0
2003734c:	b0000000 	imm	0
20037350:	e8940af4 	lwi	r4, r20, 2804
20037354:	99fc2000 	brald	r15, r4
20037358:	80000000 	or	r0, r0, r0
2003735c:	bc030044 	beqi	r3, 68		// 200373a0
				int stop = 0;
20037360:	f8130044 	swi	r0, r19, 68
				if (stop != 0) {
20037364:	e8730044 	lwi	r3, r19, 68
20037368:	bc030018 	beqi	r3, 24		// 20037380
					_FSM_state = my_state_getw;
2003736c:	b0000000 	imm	0
20037370:	e8740a7c 	lwi	r3, r20, 2684
20037374:	30800002 	addik	r4, r0, 2
20037378:	f8830000 	swi	r4, r3, 0
					goto finished;
2003737c:	b8000708 	bri	1800		// 20037a84
				}
				skip();
20037380:	b0000000 	imm	0
20037384:	e8740af8 	lwi	r3, r20, 2808
20037388:	99fc1800 	brald	r15, r3
2003738c:	80000000 	or	r0, r0, r0
				i++;
20037390:	e873001c 	lwi	r3, r19, 28
20037394:	30630001 	addik	r3, r3, 1
20037398:	f873001c 	swi	r3, r19, 28
				goto l_geth;
2003739c:	b800ff04 	bri	-252		// 200372a0
			} else {
				_FSM_state = my_state_getw;
200373a0:	b0000000 	imm	0
200373a4:	e8740a7c 	lwi	r3, r20, 2684
200373a8:	30800002 	addik	r4, r0, 2
200373ac:	f8830000 	swi	r4, r3, 0
				goto finished;
200373b0:	b80006d4 	bri	1748		// 20037a84

200373b4 <$L340>:
		case my_state_geth:
			goto l_geth;
		case my_state_getw:
			goto l_getw;
		case my_state_inter:
			goto l_inter;
200373b4:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_getw;
				goto finished;
			}
		l_inter:
			if (numTokens_QFS_DC - index_QFS_DC >= 1 && isSchedulable_getdc_inter()) {
200373b8:	b0000000 	imm	0
200373bc:	e8740a18 	lwi	r3, r20, 2584
200373c0:	e8830000 	lwi	r4, r3, 0
200373c4:	b0000000 	imm	0
200373c8:	e8740a14 	lwi	r3, r20, 2580
200373cc:	e8630000 	lwi	r3, r3, 0
200373d0:	88641800 	xor	r3, r4, r3
200373d4:	bc030058 	beqi	r3, 88		// 2003742c
200373d8:	b0000000 	imm	0
200373dc:	e8940b14 	lwi	r4, r20, 2836
200373e0:	99fc2000 	brald	r15, r4
200373e4:	80000000 	or	r0, r0, r0
200373e8:	bc030044 	beqi	r3, 68		// 2003742c
				int stop = 0;
200373ec:	f8130040 	swi	r0, r19, 64
				if (stop != 0) {
200373f0:	e8730040 	lwi	r3, r19, 64
200373f4:	bc030018 	beqi	r3, 24		// 2003740c
					_FSM_state = my_state_inter;
200373f8:	b0000000 	imm	0
200373fc:	e8740a7c 	lwi	r3, r20, 2684
20037400:	30800003 	addik	r4, r0, 3
20037404:	f8830000 	swi	r4, r3, 0
					goto finished;
20037408:	b800067c 	bri	1660		// 20037a84
				}
				getdc_inter();
2003740c:	b0000000 	imm	0
20037410:	e8740b18 	lwi	r3, r20, 2840
20037414:	99fc1800 	brald	r15, r3
20037418:	80000000 	or	r0, r0, r0
				i++;
2003741c:	e873001c 	lwi	r3, r19, 28
20037420:	30630001 	addik	r3, r3, 1
20037424:	f873001c 	swi	r3, r19, 28
				goto l_sat;
20037428:	b80005c0 	bri	1472		// 200379e8
			} else {
				_FSM_state = my_state_inter;
2003742c:	b0000000 	imm	0
20037430:	e8740a7c 	lwi	r3, r20, 2684
20037434:	30800003 	addik	r4, r0, 3
20037438:	f8830000 	swi	r4, r3, 0
				goto finished;
2003743c:	b8000648 	bri	1608		// 20037a84

20037440 <$L341>:
		case my_state_getw:
			goto l_getw;
		case my_state_inter:
			goto l_inter;
		case my_state_intra:
			goto l_intra;
20037440:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_inter;
				goto finished;
			}
		l_intra:
			if (numTokens_QFS_DC - index_QFS_DC >= 1 && isSchedulable_getdc_intra()) {
20037444:	b0000000 	imm	0
20037448:	e8740a18 	lwi	r3, r20, 2584
2003744c:	e8830000 	lwi	r4, r3, 0
20037450:	b0000000 	imm	0
20037454:	e8740a14 	lwi	r3, r20, 2580
20037458:	e8630000 	lwi	r3, r3, 0
2003745c:	88641800 	xor	r3, r4, r3
20037460:	bc030058 	beqi	r3, 88		// 200374b8
20037464:	b0000000 	imm	0
20037468:	e8940b1c 	lwi	r4, r20, 2844
2003746c:	99fc2000 	brald	r15, r4
20037470:	80000000 	or	r0, r0, r0
20037474:	bc030044 	beqi	r3, 68		// 200374b8
				int stop = 0;
20037478:	f813003c 	swi	r0, r19, 60
				if (stop != 0) {
2003747c:	e873003c 	lwi	r3, r19, 60
20037480:	bc030018 	beqi	r3, 24		// 20037498
					_FSM_state = my_state_intra;
20037484:	b0000000 	imm	0
20037488:	e8740a7c 	lwi	r3, r20, 2684
2003748c:	30800004 	addik	r4, r0, 4
20037490:	f8830000 	swi	r4, r3, 0
					goto finished;
20037494:	b80005f0 	bri	1520		// 20037a84
				}
				getdc_intra();
20037498:	b0000000 	imm	0
2003749c:	e8740b20 	lwi	r3, r20, 2848
200374a0:	99fc1800 	brald	r15, r3
200374a4:	80000000 	or	r0, r0, r0
				i++;
200374a8:	e873001c 	lwi	r3, r19, 28
200374ac:	30630001 	addik	r3, r3, 1
200374b0:	f873001c 	swi	r3, r19, 28
				goto l_sat;
200374b4:	b8000534 	bri	1332		// 200379e8
			} else {
				_FSM_state = my_state_intra;
200374b8:	b0000000 	imm	0
200374bc:	e8740a7c 	lwi	r3, r20, 2684
200374c0:	30800004 	addik	r4, r0, 4
200374c4:	f8830000 	swi	r4, r3, 0
				goto finished;
200374c8:	b80005bc 	bri	1468		// 20037a84

200374cc <$L342>:
		case my_state_inter:
			goto l_inter;
		case my_state_intra:
			goto l_intra;
		case my_state_read:
			goto l_read;
200374cc:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_intra;
				goto finished;
			}
		l_read:
			if (numTokens_BTYPE - index_BTYPE >= 1 && isSchedulable_start()) {
200374d0:	b0000000 	imm	0
200374d4:	e87409f8 	lwi	r3, r20, 2552
200374d8:	e8830000 	lwi	r4, r3, 0
200374dc:	b0000000 	imm	0
200374e0:	e87409f4 	lwi	r3, r20, 2548
200374e4:	e8630000 	lwi	r3, r3, 0
200374e8:	88641800 	xor	r3, r4, r3
200374ec:	bc03008c 	beqi	r3, 140		// 20037578
200374f0:	b0000000 	imm	0
200374f4:	e8940aec 	lwi	r4, r20, 2796
200374f8:	99fc2000 	brald	r15, r4
200374fc:	80000000 	or	r0, r0, r0
20037500:	bc030078 	beqi	r3, 120		// 20037578
				int stop = 0;
20037504:	f8130020 	swi	r0, r19, 32
				if (1 > SIZE_AC_PRED_DIR - index_AC_PRED_DIR + decoder_texture_DCReconstruction_invpred_AC_PRED_DIR->read_inds[0]) {
20037508:	b0000000 	imm	0
2003750c:	e87409ec 	lwi	r3, r20, 2540
20037510:	e8630000 	lwi	r3, r3, 0
20037514:	e863000c 	lwi	r3, r3, 12
20037518:	e8830000 	lwi	r4, r3, 0
2003751c:	b0000000 	imm	0
20037520:	e8740a34 	lwi	r3, r20, 2612
20037524:	e8630000 	lwi	r3, r3, 0
20037528:	14632000 	rsubk	r3, r3, r4
2003752c:	a863fe00 	xori	r3, r3, -512
20037530:	bc23000c 	bnei	r3, 12		// 2003753c
					stop = 1;
20037534:	30600001 	addik	r3, r0, 1
20037538:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
2003753c:	e8730020 	lwi	r3, r19, 32
20037540:	bc030018 	beqi	r3, 24		// 20037558
					_FSM_state = my_state_read;
20037544:	b0000000 	imm	0
20037548:	e8740a7c 	lwi	r3, r20, 2684
2003754c:	30800005 	addik	r4, r0, 5
20037550:	f8830000 	swi	r4, r3, 0
					goto finished;
20037554:	b8000530 	bri	1328		// 20037a84
				}
				start();
20037558:	b0000000 	imm	0
2003755c:	e8740af0 	lwi	r3, r20, 2800
20037560:	99fc1800 	brald	r15, r3
20037564:	80000000 	or	r0, r0, r0
				i++;
20037568:	e873001c 	lwi	r3, r19, 28
2003756c:	30630001 	addik	r3, r3, 1
20037570:	f873001c 	swi	r3, r19, 28
				goto l_getw;
20037574:	b800fdb8 	bri	-584		// 2003732c
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && numTokens_QP - index_QP >= 1 && isSchedulable_read_inter_ac()) {
20037578:	b0000000 	imm	0
2003757c:	e87409f8 	lwi	r3, r20, 2552
20037580:	e8830000 	lwi	r4, r3, 0
20037584:	b0000000 	imm	0
20037588:	e87409f4 	lwi	r3, r20, 2548
2003758c:	e8630000 	lwi	r3, r3, 0
20037590:	88641800 	xor	r3, r4, r3
20037594:	bc03017c 	beqi	r3, 380		// 20037710
20037598:	b0000000 	imm	0
2003759c:	e8740a20 	lwi	r3, r20, 2592
200375a0:	e8830000 	lwi	r4, r3, 0
200375a4:	b0000000 	imm	0
200375a8:	e8740a1c 	lwi	r3, r20, 2588
200375ac:	e8630000 	lwi	r3, r3, 0
200375b0:	88641800 	xor	r3, r4, r3
200375b4:	bc03015c 	beqi	r3, 348		// 20037710
200375b8:	b0000000 	imm	0
200375bc:	e8940afc 	lwi	r4, r20, 2812
200375c0:	99fc2000 	brald	r15, r4
200375c4:	80000000 	or	r0, r0, r0
200375c8:	bc030148 	beqi	r3, 328		// 20037710
				int stop = 0;
200375cc:	f8130024 	swi	r0, r19, 36
				if (1 > SIZE_AC_PRED_DIR - index_AC_PRED_DIR + decoder_texture_DCReconstruction_invpred_AC_PRED_DIR->read_inds[0]) {
200375d0:	b0000000 	imm	0
200375d4:	e87409ec 	lwi	r3, r20, 2540
200375d8:	e8630000 	lwi	r3, r3, 0
200375dc:	e863000c 	lwi	r3, r3, 12
200375e0:	e8830000 	lwi	r4, r3, 0
200375e4:	b0000000 	imm	0
200375e8:	e8740a34 	lwi	r3, r20, 2612
200375ec:	e8630000 	lwi	r3, r3, 0
200375f0:	14632000 	rsubk	r3, r3, r4
200375f4:	a863fe00 	xori	r3, r3, -512
200375f8:	bc23000c 	bnei	r3, 12		// 20037604
					stop = 1;
200375fc:	30600001 	addik	r3, r0, 1
20037600:	f8730024 	swi	r3, r19, 36
				}
				if (1 > SIZE_MODE - index_MODE + decoder_texture_DCReconstruction_invpred_MODE->read_inds[0]) {
20037604:	b0000000 	imm	0
20037608:	e87409e4 	lwi	r3, r20, 2532
2003760c:	e8630000 	lwi	r3, r3, 0
20037610:	e863000c 	lwi	r3, r3, 12
20037614:	e8830000 	lwi	r4, r3, 0
20037618:	b0000000 	imm	0
2003761c:	e8740a3c 	lwi	r3, r20, 2620
20037620:	e8630000 	lwi	r3, r3, 0
20037624:	14632000 	rsubk	r3, r3, r4
20037628:	a863fe00 	xori	r3, r3, -512
2003762c:	bc23000c 	bnei	r3, 12		// 20037638
					stop = 1;
20037630:	30600001 	addik	r3, r0, 1
20037634:	f8730024 	swi	r3, r19, 36
				}
				if (1 > SIZE_PTR - index_PTR + decoder_texture_DCReconstruction_invpred_PTR->read_inds[0]) {
20037638:	b0000000 	imm	0
2003763c:	e87409dc 	lwi	r3, r20, 2524
20037640:	e8630000 	lwi	r3, r3, 0
20037644:	e863000c 	lwi	r3, r3, 12
20037648:	e8830000 	lwi	r4, r3, 0
2003764c:	b0000000 	imm	0
20037650:	e8740a2c 	lwi	r3, r20, 2604
20037654:	e8630000 	lwi	r3, r3, 0
20037658:	14632000 	rsubk	r3, r3, r4
2003765c:	a863fe00 	xori	r3, r3, -512
20037660:	bc23000c 	bnei	r3, 12		// 2003766c
					stop = 1;
20037664:	30600001 	addik	r3, r0, 1
20037668:	f8730024 	swi	r3, r19, 36
				}
				if (1 > SIZE_SIGNED - index_SIGNED + decoder_texture_DCReconstruction_invpred_SIGNED->read_inds[0]) {
2003766c:	b0000000 	imm	0
20037670:	e87409e8 	lwi	r3, r20, 2536
20037674:	e8630000 	lwi	r3, r3, 0
20037678:	e863000c 	lwi	r3, r3, 12
2003767c:	e8830000 	lwi	r4, r3, 0
20037680:	b0000000 	imm	0
20037684:	e8740a44 	lwi	r3, r20, 2628
20037688:	e8630000 	lwi	r3, r3, 0
2003768c:	14632000 	rsubk	r3, r3, r4
20037690:	a863fe00 	xori	r3, r3, -512
20037694:	bc23000c 	bnei	r3, 12		// 200376a0
					stop = 1;
20037698:	30600001 	addik	r3, r0, 1
2003769c:	f8730024 	swi	r3, r19, 36
				}
				if (1 > SIZE_QUANT - index_QUANT + decoder_texture_DCReconstruction_invpred_QUANT->read_inds[0]) {
200376a0:	b0000000 	imm	0
200376a4:	e87409f0 	lwi	r3, r20, 2544
200376a8:	e8630000 	lwi	r3, r3, 0
200376ac:	e863000c 	lwi	r3, r3, 12
200376b0:	e8830000 	lwi	r4, r3, 0
200376b4:	b0000000 	imm	0
200376b8:	e8740a4c 	lwi	r3, r20, 2636
200376bc:	e8630000 	lwi	r3, r3, 0
200376c0:	14632000 	rsubk	r3, r3, r4
200376c4:	a863fe00 	xori	r3, r3, -512
200376c8:	bc23000c 	bnei	r3, 12		// 200376d4
					stop = 1;
200376cc:	30600001 	addik	r3, r0, 1
200376d0:	f8730024 	swi	r3, r19, 36
				}
				if (stop != 0) {
200376d4:	e8730024 	lwi	r3, r19, 36
200376d8:	bc030018 	beqi	r3, 24		// 200376f0
					_FSM_state = my_state_read;
200376dc:	b0000000 	imm	0
200376e0:	e8740a7c 	lwi	r3, r20, 2684
200376e4:	30800005 	addik	r4, r0, 5
200376e8:	f8830000 	swi	r4, r3, 0
					goto finished;
200376ec:	b8000398 	bri	920		// 20037a84
				}
				read_inter_ac();
200376f0:	b0000000 	imm	0
200376f4:	e8740b00 	lwi	r3, r20, 2816
200376f8:	99fc1800 	brald	r15, r3
200376fc:	80000000 	or	r0, r0, r0
				i++;
20037700:	e873001c 	lwi	r3, r19, 28
20037704:	30630001 	addik	r3, r3, 1
20037708:	f873001c 	swi	r3, r19, 28
				goto l_inter;
2003770c:	b800fcac 	bri	-852		// 200373b8
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && numTokens_QP - index_QP >= 1 && isSchedulable_read_other()) {
20037710:	b0000000 	imm	0
20037714:	e87409f8 	lwi	r3, r20, 2552
20037718:	e8830000 	lwi	r4, r3, 0
2003771c:	b0000000 	imm	0
20037720:	e87409f4 	lwi	r3, r20, 2548
20037724:	e8630000 	lwi	r3, r3, 0
20037728:	88641800 	xor	r3, r4, r3
2003772c:	bc0300ac 	beqi	r3, 172		// 200377d8
20037730:	b0000000 	imm	0
20037734:	e8740a20 	lwi	r3, r20, 2592
20037738:	e8830000 	lwi	r4, r3, 0
2003773c:	b0000000 	imm	0
20037740:	e8740a1c 	lwi	r3, r20, 2588
20037744:	e8630000 	lwi	r3, r3, 0
20037748:	88641800 	xor	r3, r4, r3
2003774c:	bc03008c 	beqi	r3, 140		// 200377d8
20037750:	b0000000 	imm	0
20037754:	e8940b04 	lwi	r4, r20, 2820
20037758:	99fc2000 	brald	r15, r4
2003775c:	80000000 	or	r0, r0, r0
20037760:	bc030078 	beqi	r3, 120		// 200377d8
				int stop = 0;
20037764:	f8130028 	swi	r0, r19, 40
				if (1 > SIZE_AC_PRED_DIR - index_AC_PRED_DIR + decoder_texture_DCReconstruction_invpred_AC_PRED_DIR->read_inds[0]) {
20037768:	b0000000 	imm	0
2003776c:	e87409ec 	lwi	r3, r20, 2540
20037770:	e8630000 	lwi	r3, r3, 0
20037774:	e863000c 	lwi	r3, r3, 12
20037778:	e8830000 	lwi	r4, r3, 0
2003777c:	b0000000 	imm	0
20037780:	e8740a34 	lwi	r3, r20, 2612
20037784:	e8630000 	lwi	r3, r3, 0
20037788:	14632000 	rsubk	r3, r3, r4
2003778c:	a863fe00 	xori	r3, r3, -512
20037790:	bc23000c 	bnei	r3, 12		// 2003779c
					stop = 1;
20037794:	30600001 	addik	r3, r0, 1
20037798:	f8730028 	swi	r3, r19, 40
				}
				if (stop != 0) {
2003779c:	e8730028 	lwi	r3, r19, 40
200377a0:	bc030018 	beqi	r3, 24		// 200377b8
					_FSM_state = my_state_read;
200377a4:	b0000000 	imm	0
200377a8:	e8740a7c 	lwi	r3, r20, 2684
200377ac:	30800005 	addik	r4, r0, 5
200377b0:	f8830000 	swi	r4, r3, 0
					goto finished;
200377b4:	b80002d0 	bri	720		// 20037a84
				}
				read_other();
200377b8:	b0000000 	imm	0
200377bc:	e8740b08 	lwi	r3, r20, 2824
200377c0:	99fc1800 	brald	r15, r3
200377c4:	80000000 	or	r0, r0, r0
				i++;
200377c8:	e873001c 	lwi	r3, r19, 28
200377cc:	30630001 	addik	r3, r3, 1
200377d0:	f873001c 	swi	r3, r19, 28
				goto l_advance;
200377d4:	b800fa68 	bri	-1432		// 2003723c
			} else if (numTokens_BTYPE - index_BTYPE >= 1 && numTokens_QP - index_QP >= 1 && numTokens_A - index_A >= 1 && numTokens_B - index_B >= 1 && numTokens_C - index_C >= 1 && isSchedulable_read_intra()) {
200377d8:	b0000000 	imm	0
200377dc:	e87409f8 	lwi	r3, r20, 2552
200377e0:	e8830000 	lwi	r4, r3, 0
200377e4:	b0000000 	imm	0
200377e8:	e87409f4 	lwi	r3, r20, 2548
200377ec:	e8630000 	lwi	r3, r3, 0
200377f0:	88641800 	xor	r3, r4, r3
200377f4:	bc0301dc 	beqi	r3, 476		// 200379d0
200377f8:	b0000000 	imm	0
200377fc:	e8740a20 	lwi	r3, r20, 2592
20037800:	e8830000 	lwi	r4, r3, 0
20037804:	b0000000 	imm	0
20037808:	e8740a1c 	lwi	r3, r20, 2588
2003780c:	e8630000 	lwi	r3, r3, 0
20037810:	88641800 	xor	r3, r4, r3
20037814:	bc0301bc 	beqi	r3, 444		// 200379d0
20037818:	b0000000 	imm	0
2003781c:	e8740a00 	lwi	r3, r20, 2560
20037820:	e8830000 	lwi	r4, r3, 0
20037824:	b0000000 	imm	0
20037828:	e87409fc 	lwi	r3, r20, 2556
2003782c:	e8630000 	lwi	r3, r3, 0
20037830:	88641800 	xor	r3, r4, r3
20037834:	bc03019c 	beqi	r3, 412		// 200379d0
20037838:	b0000000 	imm	0
2003783c:	e8740a08 	lwi	r3, r20, 2568
20037840:	e8830000 	lwi	r4, r3, 0
20037844:	b0000000 	imm	0
20037848:	e8740a04 	lwi	r3, r20, 2564
2003784c:	e8630000 	lwi	r3, r3, 0
20037850:	88641800 	xor	r3, r4, r3
20037854:	bc03017c 	beqi	r3, 380		// 200379d0
20037858:	b0000000 	imm	0
2003785c:	e8740a10 	lwi	r3, r20, 2576
20037860:	e8830000 	lwi	r4, r3, 0
20037864:	b0000000 	imm	0
20037868:	e8740a0c 	lwi	r3, r20, 2572
2003786c:	e8630000 	lwi	r3, r3, 0
20037870:	88641800 	xor	r3, r4, r3
20037874:	bc03015c 	beqi	r3, 348		// 200379d0
20037878:	b0000000 	imm	0
2003787c:	e8940b0c 	lwi	r4, r20, 2828
20037880:	99fc2000 	brald	r15, r4
20037884:	80000000 	or	r0, r0, r0
20037888:	bc030148 	beqi	r3, 328		// 200379d0
				int stop = 0;
2003788c:	f813002c 	swi	r0, r19, 44
				if (1 > SIZE_PTR - index_PTR + decoder_texture_DCReconstruction_invpred_PTR->read_inds[0]) {
20037890:	b0000000 	imm	0
20037894:	e87409dc 	lwi	r3, r20, 2524
20037898:	e8630000 	lwi	r3, r3, 0
2003789c:	e863000c 	lwi	r3, r3, 12
200378a0:	e8830000 	lwi	r4, r3, 0
200378a4:	b0000000 	imm	0
200378a8:	e8740a2c 	lwi	r3, r20, 2604
200378ac:	e8630000 	lwi	r3, r3, 0
200378b0:	14632000 	rsubk	r3, r3, r4
200378b4:	a863fe00 	xori	r3, r3, -512
200378b8:	bc23000c 	bnei	r3, 12		// 200378c4
					stop = 1;
200378bc:	30600001 	addik	r3, r0, 1
200378c0:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_AC_PRED_DIR - index_AC_PRED_DIR + decoder_texture_DCReconstruction_invpred_AC_PRED_DIR->read_inds[0]) {
200378c4:	b0000000 	imm	0
200378c8:	e87409ec 	lwi	r3, r20, 2540
200378cc:	e8630000 	lwi	r3, r3, 0
200378d0:	e863000c 	lwi	r3, r3, 12
200378d4:	e8830000 	lwi	r4, r3, 0
200378d8:	b0000000 	imm	0
200378dc:	e8740a34 	lwi	r3, r20, 2612
200378e0:	e8630000 	lwi	r3, r3, 0
200378e4:	14632000 	rsubk	r3, r3, r4
200378e8:	a863fe00 	xori	r3, r3, -512
200378ec:	bc23000c 	bnei	r3, 12		// 200378f8
					stop = 1;
200378f0:	30600001 	addik	r3, r0, 1
200378f4:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_MODE - index_MODE + decoder_texture_DCReconstruction_invpred_MODE->read_inds[0]) {
200378f8:	b0000000 	imm	0
200378fc:	e87409e4 	lwi	r3, r20, 2532
20037900:	e8630000 	lwi	r3, r3, 0
20037904:	e863000c 	lwi	r3, r3, 12
20037908:	e8830000 	lwi	r4, r3, 0
2003790c:	b0000000 	imm	0
20037910:	e8740a3c 	lwi	r3, r20, 2620
20037914:	e8630000 	lwi	r3, r3, 0
20037918:	14632000 	rsubk	r3, r3, r4
2003791c:	a863fe00 	xori	r3, r3, -512
20037920:	bc23000c 	bnei	r3, 12		// 2003792c
					stop = 1;
20037924:	30600001 	addik	r3, r0, 1
20037928:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_SIGNED - index_SIGNED + decoder_texture_DCReconstruction_invpred_SIGNED->read_inds[0]) {
2003792c:	b0000000 	imm	0
20037930:	e87409e8 	lwi	r3, r20, 2536
20037934:	e8630000 	lwi	r3, r3, 0
20037938:	e863000c 	lwi	r3, r3, 12
2003793c:	e8830000 	lwi	r4, r3, 0
20037940:	b0000000 	imm	0
20037944:	e8740a44 	lwi	r3, r20, 2628
20037948:	e8630000 	lwi	r3, r3, 0
2003794c:	14632000 	rsubk	r3, r3, r4
20037950:	a863fe00 	xori	r3, r3, -512
20037954:	bc23000c 	bnei	r3, 12		// 20037960
					stop = 1;
20037958:	30600001 	addik	r3, r0, 1
2003795c:	f873002c 	swi	r3, r19, 44
				}
				if (1 > SIZE_QUANT - index_QUANT + decoder_texture_DCReconstruction_invpred_QUANT->read_inds[0]) {
20037960:	b0000000 	imm	0
20037964:	e87409f0 	lwi	r3, r20, 2544
20037968:	e8630000 	lwi	r3, r3, 0
2003796c:	e863000c 	lwi	r3, r3, 12
20037970:	e8830000 	lwi	r4, r3, 0
20037974:	b0000000 	imm	0
20037978:	e8740a4c 	lwi	r3, r20, 2636
2003797c:	e8630000 	lwi	r3, r3, 0
20037980:	14632000 	rsubk	r3, r3, r4
20037984:	a863fe00 	xori	r3, r3, -512
20037988:	bc23000c 	bnei	r3, 12		// 20037994
					stop = 1;
2003798c:	30600001 	addik	r3, r0, 1
20037990:	f873002c 	swi	r3, r19, 44
				}
				if (stop != 0) {
20037994:	e873002c 	lwi	r3, r19, 44
20037998:	bc030018 	beqi	r3, 24		// 200379b0
					_FSM_state = my_state_read;
2003799c:	b0000000 	imm	0
200379a0:	e8740a7c 	lwi	r3, r20, 2684
200379a4:	30800005 	addik	r4, r0, 5
200379a8:	f8830000 	swi	r4, r3, 0
					goto finished;
200379ac:	b80000d8 	bri	216		// 20037a84
				}
				read_intra();
200379b0:	b0000000 	imm	0
200379b4:	e8740b10 	lwi	r3, r20, 2832
200379b8:	99fc1800 	brald	r15, r3
200379bc:	80000000 	or	r0, r0, r0
				i++;
200379c0:	e873001c 	lwi	r3, r19, 28
200379c4:	30630001 	addik	r3, r3, 1
200379c8:	f873001c 	swi	r3, r19, 28
				goto l_intra;
200379cc:	b800fa78 	bri	-1416		// 20037444
			} else {
				_FSM_state = my_state_read;
200379d0:	b0000000 	imm	0
200379d4:	e8740a7c 	lwi	r3, r20, 2684
200379d8:	30800005 	addik	r4, r0, 5
200379dc:	f8830000 	swi	r4, r3, 0
				goto finished;
200379e0:	b80000a4 	bri	164		// 20037a84

200379e4 <$L336>:
		case my_state_intra:
			goto l_intra;
		case my_state_read:
			goto l_read;
		case my_state_sat:
			goto l_sat;
200379e4:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_read;
				goto finished;
			}
		l_sat:
			if (isSchedulable_sat()) {
200379e8:	b0000000 	imm	0
200379ec:	e8940b24 	lwi	r4, r20, 2852
200379f0:	99fc2000 	brald	r15, r4
200379f4:	80000000 	or	r0, r0, r0
200379f8:	bc030078 	beqi	r3, 120		// 20037a70
				int stop = 0;
200379fc:	f8130030 	swi	r0, r19, 48
				if (1 > SIZE_QF_DC - index_QF_DC + decoder_texture_DCReconstruction_invpred_QF_DC->read_inds[0]) {
20037a00:	b0000000 	imm	0
20037a04:	e87409e0 	lwi	r3, r20, 2528
20037a08:	e8630000 	lwi	r3, r3, 0
20037a0c:	e863000c 	lwi	r3, r3, 12
20037a10:	e8830000 	lwi	r4, r3, 0
20037a14:	b0000000 	imm	0
20037a18:	e8740a24 	lwi	r3, r20, 2596
20037a1c:	e8630000 	lwi	r3, r3, 0
20037a20:	14632000 	rsubk	r3, r3, r4
20037a24:	a863fe00 	xori	r3, r3, -512
20037a28:	bc23000c 	bnei	r3, 12		// 20037a34
					stop = 1;
20037a2c:	30600001 	addik	r3, r0, 1
20037a30:	f8730030 	swi	r3, r19, 48
				}
				if (stop != 0) {
20037a34:	e8730030 	lwi	r3, r19, 48
20037a38:	bc030018 	beqi	r3, 24		// 20037a50
					_FSM_state = my_state_sat;
20037a3c:	b0000000 	imm	0
20037a40:	e8740a7c 	lwi	r3, r20, 2684
20037a44:	30800006 	addik	r4, r0, 6
20037a48:	f8830000 	swi	r4, r3, 0
					goto finished;
20037a4c:	b8000038 	bri	56		// 20037a84
				}
				sat();
20037a50:	b0000000 	imm	0
20037a54:	e8740b28 	lwi	r3, r20, 2856
20037a58:	99fc1800 	brald	r15, r3
20037a5c:	80000000 	or	r0, r0, r0
				i++;
20037a60:	e873001c 	lwi	r3, r19, 28
20037a64:	30630001 	addik	r3, r3, 1
20037a68:	f873001c 	swi	r3, r19, 28
				goto l_advance;
20037a6c:	b800f7d0 	bri	-2096		// 2003723c
			} else {
				_FSM_state = my_state_sat;
20037a70:	b0000000 	imm	0
20037a74:	e8740a7c 	lwi	r3, r20, 2684
20037a78:	30800006 	addik	r4, r0, 6
20037a7c:	f8830000 	swi	r4, r3, 0
				goto finished;
20037a80:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_BTYPE();
20037a84:	b0000000 	imm	0
20037a88:	e8940a84 	lwi	r4, r20, 2692
20037a8c:	99fc2000 	brald	r15, r4
20037a90:	80000000 	or	r0, r0, r0
		read_end_A();
20037a94:	b0000000 	imm	0
20037a98:	e8740a8c 	lwi	r3, r20, 2700
20037a9c:	99fc1800 	brald	r15, r3
20037aa0:	80000000 	or	r0, r0, r0
		read_end_B();
20037aa4:	b0000000 	imm	0
20037aa8:	e8940a94 	lwi	r4, r20, 2708
20037aac:	99fc2000 	brald	r15, r4
20037ab0:	80000000 	or	r0, r0, r0
		read_end_C();
20037ab4:	b0000000 	imm	0
20037ab8:	e8740a9c 	lwi	r3, r20, 2716
20037abc:	99fc1800 	brald	r15, r3
20037ac0:	80000000 	or	r0, r0, r0
		read_end_QFS_DC();
20037ac4:	b0000000 	imm	0
20037ac8:	e8940aa4 	lwi	r4, r20, 2724
20037acc:	99fc2000 	brald	r15, r4
20037ad0:	80000000 	or	r0, r0, r0
		read_end_QP();
20037ad4:	b0000000 	imm	0
20037ad8:	e8740aac 	lwi	r3, r20, 2732
20037adc:	99fc1800 	brald	r15, r3
20037ae0:	80000000 	or	r0, r0, r0
		
		write_end_QF_DC();
20037ae4:	b0000000 	imm	0
20037ae8:	e8940ab4 	lwi	r4, r20, 2740
20037aec:	99fc2000 	brald	r15, r4
20037af0:	80000000 	or	r0, r0, r0
		write_end_PTR();
20037af4:	b0000000 	imm	0
20037af8:	e8740abc 	lwi	r3, r20, 2748
20037afc:	99fc1800 	brald	r15, r3
20037b00:	80000000 	or	r0, r0, r0
		write_end_AC_PRED_DIR();
20037b04:	b0000000 	imm	0
20037b08:	e8940ac4 	lwi	r4, r20, 2756
20037b0c:	99fc2000 	brald	r15, r4
20037b10:	80000000 	or	r0, r0, r0
		write_end_MODE();
20037b14:	b0000000 	imm	0
20037b18:	e8740acc 	lwi	r3, r20, 2764
20037b1c:	99fc1800 	brald	r15, r3
20037b20:	80000000 	or	r0, r0, r0
		write_end_SIGNED();
20037b24:	b0000000 	imm	0
20037b28:	e8940ad4 	lwi	r4, r20, 2772
20037b2c:	99fc2000 	brald	r15, r4
20037b30:	80000000 	or	r0, r0, r0
		write_end_QUANT();
20037b34:	b0000000 	imm	0
20037b38:	e8740adc 	lwi	r3, r20, 2780
20037b3c:	99fc1800 	brald	r15, r3
20037b40:	80000000 	or	r0, r0, r0
		
		
		return i;
20037b44:	e873001c 	lwi	r3, r19, 28
	}
20037b48:	e9e10000 	lwi	r15, r1, 0
20037b4c:	10330000 	addk	r1, r19, r0
20037b50:	ea610048 	lwi	r19, r1, 72
20037b54:	ea81004c 	lwi	r20, r1, 76
20037b58:	30210050 	addik	r1, r1, 80
20037b5c:	b60f0008 	rtsd	r15, 8
20037b60:	80000000 	or	r0, r0, r0

20037b64 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20037b64:	3021fff4 	addik	r1, r1, -12
20037b68:	fa610004 	swi	r19, r1, 4
20037b6c:	fa810008 	swi	r20, r1, 8
20037b70:	12610000 	addk	r19, r1, r0
20037b74:	96808000 	mfs	r20, rpc
20037b78:	b000dffc 	imm	-8196
20037b7c:	32949de8 	addik	r20, r20, -25112
20037b80:	f8b30010 	swi	r5, r19, 16
20037b84:	f8d30014 	swi	r6, r19, 20
20037b88:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20037b8c:	e8730010 	lwi	r3, r19, 16
20037b90:	e8630010 	lwi	r3, r3, 16
20037b94:	e8830000 	lwi	r4, r3, 0
20037b98:	e8730010 	lwi	r3, r19, 16
20037b9c:	e8a3000c 	lwi	r5, r3, 12
20037ba0:	e8730014 	lwi	r3, r19, 20
20037ba4:	64630402 	bslli	r3, r3, 2
20037ba8:	10651800 	addk	r3, r5, r3
20037bac:	e8630000 	lwi	r3, r3, 0
20037bb0:	14a32000 	rsubk	r5, r3, r4
20037bb4:	30600001 	addik	r3, r0, 1
20037bb8:	e8930018 	lwi	r4, r19, 24
20037bbc:	16442803 	cmpu	r18, r4, r5
20037bc0:	bcb20008 	bgei	r18, 8		// 20037bc8
20037bc4:	10600000 	addk	r3, r0, r0
20037bc8:	a46300ff 	andi	r3, r3, 255
}
20037bcc:	10330000 	addk	r1, r19, r0
20037bd0:	ea610004 	lwi	r19, r1, 4
20037bd4:	ea810008 	lwi	r20, r1, 8
20037bd8:	3021000c 	addik	r1, r1, 12
20037bdc:	b60f0008 	rtsd	r15, 8
20037be0:	80000000 	or	r0, r0, r0

20037be4 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20037be4:	3021fff4 	addik	r1, r1, -12
20037be8:	fa610004 	swi	r19, r1, 4
20037bec:	fa810008 	swi	r20, r1, 8
20037bf0:	12610000 	addk	r19, r1, r0
20037bf4:	96808000 	mfs	r20, rpc
20037bf8:	b000dffc 	imm	-8196
20037bfc:	32949d68 	addik	r20, r20, -25240
20037c00:	f8b30010 	swi	r5, r19, 16
20037c04:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20037c08:	e8730010 	lwi	r3, r19, 16
20037c0c:	e8630010 	lwi	r3, r3, 16
20037c10:	e8830000 	lwi	r4, r3, 0
20037c14:	e8730010 	lwi	r3, r19, 16
20037c18:	e8a3000c 	lwi	r5, r3, 12
20037c1c:	e8730014 	lwi	r3, r19, 20
20037c20:	64630402 	bslli	r3, r3, 2
20037c24:	10651800 	addk	r3, r5, r3
20037c28:	e8630000 	lwi	r3, r3, 0
20037c2c:	14632000 	rsubk	r3, r3, r4
}
20037c30:	10330000 	addk	r1, r19, r0
20037c34:	ea610004 	lwi	r19, r1, 4
20037c38:	ea810008 	lwi	r20, r1, 8
20037c3c:	3021000c 	addik	r1, r1, 12
20037c40:	b60f0008 	rtsd	r15, 8
20037c44:	80000000 	or	r0, r0, r0

20037c48 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20037c48:	3021fff0 	addik	r1, r1, -16
20037c4c:	fa610008 	swi	r19, r1, 8
20037c50:	fa81000c 	swi	r20, r1, 12
20037c54:	12610000 	addk	r19, r1, r0
20037c58:	96808000 	mfs	r20, rpc
20037c5c:	b000dffc 	imm	-8196
20037c60:	32949d04 	addik	r20, r20, -25340
20037c64:	f8b30014 	swi	r5, r19, 20
20037c68:	f8d30018 	swi	r6, r19, 24
20037c6c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20037c70:	f8130004 	swi	r0, r19, 4
20037c74:	b800005c 	bri	92		// 20037cd0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20037c78:	e8730014 	lwi	r3, r19, 20
20037c7c:	e8830000 	lwi	r4, r3, 0
20037c80:	e8730014 	lwi	r3, r19, 20
20037c84:	e8a3000c 	lwi	r5, r3, 12
20037c88:	e8730004 	lwi	r3, r19, 4
20037c8c:	64630402 	bslli	r3, r3, 2
20037c90:	10651800 	addk	r3, r5, r3
20037c94:	e8a30000 	lwi	r5, r3, 0
20037c98:	e8730014 	lwi	r3, r19, 20
20037c9c:	e8630010 	lwi	r3, r3, 16
20037ca0:	e8630000 	lwi	r3, r3, 0
20037ca4:	14632800 	rsubk	r3, r3, r5
20037ca8:	10641800 	addk	r3, r4, r3
20037cac:	30830001 	addik	r4, r3, 1
20037cb0:	e873001c 	lwi	r3, r19, 28
20037cb4:	16441803 	cmpu	r18, r4, r3
20037cb8:	bc52000c 	blti	r18, 12		// 20037cc4
            return 0;
20037cbc:	10600000 	addk	r3, r0, r0
20037cc0:	b8000024 	bri	36		// 20037ce4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20037cc4:	e8730004 	lwi	r3, r19, 4
20037cc8:	30630001 	addik	r3, r3, 1
20037ccc:	f8730004 	swi	r3, r19, 4
20037cd0:	e8930004 	lwi	r4, r19, 4
20037cd4:	e8730018 	lwi	r3, r19, 24
20037cd8:	16432003 	cmpu	r18, r3, r4
20037cdc:	bc52ff9c 	blti	r18, -100		// 20037c78
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20037ce0:	30600001 	addik	r3, r0, 1
}
20037ce4:	10330000 	addk	r1, r19, r0
20037ce8:	ea610008 	lwi	r19, r1, 8
20037cec:	ea81000c 	lwi	r20, r1, 12
20037cf0:	30210010 	addik	r1, r1, 16
20037cf4:	b60f0008 	rtsd	r15, 8
20037cf8:	80000000 	or	r0, r0, r0

20037cfc <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20037cfc:	3021ffe8 	addik	r1, r1, -24
20037d00:	fa610010 	swi	r19, r1, 16
20037d04:	fa810014 	swi	r20, r1, 20
20037d08:	12610000 	addk	r19, r1, r0
20037d0c:	96808000 	mfs	r20, rpc
20037d10:	b000dffc 	imm	-8196
20037d14:	32949c50 	addik	r20, r20, -25520
20037d18:	f8b3001c 	swi	r5, r19, 28
20037d1c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20037d20:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20037d24:	f8130004 	swi	r0, r19, 4
20037d28:	b8000054 	bri	84		// 20037d7c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20037d2c:	e873001c 	lwi	r3, r19, 28
20037d30:	e8630010 	lwi	r3, r3, 16
20037d34:	e8830000 	lwi	r4, r3, 0
20037d38:	e873001c 	lwi	r3, r19, 28
20037d3c:	e8a3000c 	lwi	r5, r3, 12
20037d40:	e8730004 	lwi	r3, r19, 4
20037d44:	64630402 	bslli	r3, r3, 2
20037d48:	10651800 	addk	r3, r5, r3
20037d4c:	e8630000 	lwi	r3, r3, 0
20037d50:	14632000 	rsubk	r3, r3, r4
20037d54:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20037d58:	e8930008 	lwi	r4, r19, 8
20037d5c:	e873000c 	lwi	r3, r19, 12
20037d60:	16441803 	cmpu	r18, r4, r3
20037d64:	bcb20008 	bgei	r18, 8		// 20037d6c
20037d68:	10640000 	addk	r3, r4, r0
20037d6c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20037d70:	e8730004 	lwi	r3, r19, 4
20037d74:	30630001 	addik	r3, r3, 1
20037d78:	f8730004 	swi	r3, r19, 4
20037d7c:	e8930004 	lwi	r4, r19, 4
20037d80:	e8730020 	lwi	r3, r19, 32
20037d84:	16432003 	cmpu	r18, r3, r4
20037d88:	bc52ffa4 	blti	r18, -92		// 20037d2c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20037d8c:	e873001c 	lwi	r3, r19, 28
20037d90:	e8830000 	lwi	r4, r3, 0
20037d94:	e8730008 	lwi	r3, r19, 8
20037d98:	14632000 	rsubk	r3, r3, r4
}
20037d9c:	10330000 	addk	r1, r19, r0
20037da0:	ea610010 	lwi	r19, r1, 16
20037da4:	ea810014 	lwi	r20, r1, 20
20037da8:	30210018 	addik	r1, r1, 24
20037dac:	b60f0008 	rtsd	r15, 8
20037db0:	80000000 	or	r0, r0, r0

20037db4 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20037db4:	3021fff0 	addik	r1, r1, -16
20037db8:	fa610008 	swi	r19, r1, 8
20037dbc:	fa81000c 	swi	r20, r1, 12
20037dc0:	12610000 	addk	r19, r1, r0
20037dc4:	96808000 	mfs	r20, rpc
20037dc8:	b000dffc 	imm	-8196
20037dcc:	32949b98 	addik	r20, r20, -25704
20037dd0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20037dd4:	e8730014 	lwi	r3, r19, 20
20037dd8:	e8630010 	lwi	r3, r3, 16
20037ddc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20037de0:	f8130004 	swi	r0, r19, 4
20037de4:	b8000028 	bri	40		// 20037e0c
        fifo->read_inds[i] = 0;
20037de8:	e8730014 	lwi	r3, r19, 20
20037dec:	e883000c 	lwi	r4, r3, 12
20037df0:	e8730004 	lwi	r3, r19, 4
20037df4:	64630402 	bslli	r3, r3, 2
20037df8:	10641800 	addk	r3, r4, r3
20037dfc:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20037e00:	e8730004 	lwi	r3, r19, 4
20037e04:	30630001 	addik	r3, r3, 1
20037e08:	f8730004 	swi	r3, r19, 4
20037e0c:	e8730014 	lwi	r3, r19, 20
20037e10:	e8830008 	lwi	r4, r3, 8
20037e14:	e8730004 	lwi	r3, r19, 4
20037e18:	16441803 	cmpu	r18, r4, r3
20037e1c:	bc52ffcc 	blti	r18, -52		// 20037de8
        fifo->read_inds[i] = 0;
    }
}
20037e20:	10330000 	addk	r1, r19, r0
20037e24:	ea610008 	lwi	r19, r1, 8
20037e28:	ea81000c 	lwi	r20, r1, 12
20037e2c:	30210010 	addik	r1, r1, 16
20037e30:	b60f0008 	rtsd	r15, 8
20037e34:	80000000 	or	r0, r0, r0

20037e38 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20037e38:	3021fff0 	addik	r1, r1, -16
20037e3c:	fa610008 	swi	r19, r1, 8
20037e40:	fa81000c 	swi	r20, r1, 12
20037e44:	12610000 	addk	r19, r1, r0
20037e48:	96808000 	mfs	r20, rpc
20037e4c:	b000dffc 	imm	-8196
20037e50:	32949b14 	addik	r20, r20, -25836
20037e54:	f8b30014 	swi	r5, r19, 20
20037e58:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20037e5c:	e8730014 	lwi	r3, r19, 20
20037e60:	e8830004 	lwi	r4, r3, 4
20037e64:	e8730014 	lwi	r3, r19, 20
20037e68:	e8a3000c 	lwi	r5, r3, 12
20037e6c:	e8730018 	lwi	r3, r19, 24
20037e70:	64630402 	bslli	r3, r3, 2
20037e74:	10651800 	addk	r3, r5, r3
20037e78:	e8a30000 	lwi	r5, r3, 0
20037e7c:	e8730014 	lwi	r3, r19, 20
20037e80:	e8630000 	lwi	r3, r3, 0
20037e84:	3063ffff 	addik	r3, r3, -1
20037e88:	84651800 	and	r3, r5, r3
20037e8c:	10641800 	addk	r3, r4, r3
20037e90:	e0630000 	lbui	r3, r3, 0
20037e94:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20037e98:	e8730014 	lwi	r3, r19, 20
20037e9c:	e883000c 	lwi	r4, r3, 12
20037ea0:	e8730018 	lwi	r3, r19, 24
20037ea4:	64630402 	bslli	r3, r3, 2
20037ea8:	10641800 	addk	r3, r4, r3
20037eac:	e8830000 	lwi	r4, r3, 0
20037eb0:	30840001 	addik	r4, r4, 1
20037eb4:	f8830000 	swi	r4, r3, 0
    return value;
20037eb8:	e0730004 	lbui	r3, r19, 4
20037ebc:	90630060 	sext8	r3, r3
}
20037ec0:	10330000 	addk	r1, r19, r0
20037ec4:	ea610008 	lwi	r19, r1, 8
20037ec8:	ea81000c 	lwi	r20, r1, 12
20037ecc:	30210010 	addik	r1, r1, 16
20037ed0:	b60f0008 	rtsd	r15, 8
20037ed4:	80000000 	or	r0, r0, r0

20037ed8 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20037ed8:	3021fff4 	addik	r1, r1, -12
20037edc:	fa610004 	swi	r19, r1, 4
20037ee0:	fa810008 	swi	r20, r1, 8
20037ee4:	12610000 	addk	r19, r1, r0
20037ee8:	96808000 	mfs	r20, rpc
20037eec:	b000dffc 	imm	-8196
20037ef0:	32949a74 	addik	r20, r20, -25996
20037ef4:	f8b30010 	swi	r5, r19, 16
20037ef8:	10660000 	addk	r3, r6, r0
20037efc:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20037f00:	e8730010 	lwi	r3, r19, 16
20037f04:	e8830004 	lwi	r4, r3, 4
20037f08:	e8730010 	lwi	r3, r19, 16
20037f0c:	e8630010 	lwi	r3, r3, 16
20037f10:	e8a30000 	lwi	r5, r3, 0
20037f14:	e8730010 	lwi	r3, r19, 16
20037f18:	e8630000 	lwi	r3, r3, 0
20037f1c:	3063ffff 	addik	r3, r3, -1
20037f20:	84651800 	and	r3, r5, r3
20037f24:	10641800 	addk	r3, r4, r3
20037f28:	e0930014 	lbui	r4, r19, 20
20037f2c:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20037f30:	e8730010 	lwi	r3, r19, 16
20037f34:	e8630010 	lwi	r3, r3, 16
20037f38:	e8830000 	lwi	r4, r3, 0
20037f3c:	30840001 	addik	r4, r4, 1
20037f40:	f8830000 	swi	r4, r3, 0
}
20037f44:	10330000 	addk	r1, r19, r0
20037f48:	ea610004 	lwi	r19, r1, 4
20037f4c:	ea810008 	lwi	r20, r1, 8
20037f50:	3021000c 	addik	r1, r1, 12
20037f54:	b60f0008 	rtsd	r15, 8
20037f58:	80000000 	or	r0, r0, r0

20037f5c <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20037f5c:	3021fff4 	addik	r1, r1, -12
20037f60:	fa610004 	swi	r19, r1, 4
20037f64:	fa810008 	swi	r20, r1, 8
20037f68:	12610000 	addk	r19, r1, r0
20037f6c:	96808000 	mfs	r20, rpc
20037f70:	b000dffc 	imm	-8196
20037f74:	329499f0 	addik	r20, r20, -26128
20037f78:	f8b30010 	swi	r5, r19, 16
20037f7c:	f8d30014 	swi	r6, r19, 20
20037f80:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20037f84:	e8730010 	lwi	r3, r19, 16
20037f88:	e8630010 	lwi	r3, r3, 16
20037f8c:	e8830000 	lwi	r4, r3, 0
20037f90:	e8730010 	lwi	r3, r19, 16
20037f94:	e8a3000c 	lwi	r5, r3, 12
20037f98:	e8730014 	lwi	r3, r19, 20
20037f9c:	64630402 	bslli	r3, r3, 2
20037fa0:	10651800 	addk	r3, r5, r3
20037fa4:	e8630000 	lwi	r3, r3, 0
20037fa8:	14a32000 	rsubk	r5, r3, r4
20037fac:	30600001 	addik	r3, r0, 1
20037fb0:	e8930018 	lwi	r4, r19, 24
20037fb4:	16442803 	cmpu	r18, r4, r5
20037fb8:	bcb20008 	bgei	r18, 8		// 20037fc0
20037fbc:	10600000 	addk	r3, r0, r0
20037fc0:	a46300ff 	andi	r3, r3, 255
}
20037fc4:	10330000 	addk	r1, r19, r0
20037fc8:	ea610004 	lwi	r19, r1, 4
20037fcc:	ea810008 	lwi	r20, r1, 8
20037fd0:	3021000c 	addik	r1, r1, 12
20037fd4:	b60f0008 	rtsd	r15, 8
20037fd8:	80000000 	or	r0, r0, r0

20037fdc <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20037fdc:	3021fff4 	addik	r1, r1, -12
20037fe0:	fa610004 	swi	r19, r1, 4
20037fe4:	fa810008 	swi	r20, r1, 8
20037fe8:	12610000 	addk	r19, r1, r0
20037fec:	96808000 	mfs	r20, rpc
20037ff0:	b000dffc 	imm	-8196
20037ff4:	32949970 	addik	r20, r20, -26256
20037ff8:	f8b30010 	swi	r5, r19, 16
20037ffc:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20038000:	e8730010 	lwi	r3, r19, 16
20038004:	e8630010 	lwi	r3, r3, 16
20038008:	e8830000 	lwi	r4, r3, 0
2003800c:	e8730010 	lwi	r3, r19, 16
20038010:	e8a3000c 	lwi	r5, r3, 12
20038014:	e8730014 	lwi	r3, r19, 20
20038018:	64630402 	bslli	r3, r3, 2
2003801c:	10651800 	addk	r3, r5, r3
20038020:	e8630000 	lwi	r3, r3, 0
20038024:	14632000 	rsubk	r3, r3, r4
}
20038028:	10330000 	addk	r1, r19, r0
2003802c:	ea610004 	lwi	r19, r1, 4
20038030:	ea810008 	lwi	r20, r1, 8
20038034:	3021000c 	addik	r1, r1, 12
20038038:	b60f0008 	rtsd	r15, 8
2003803c:	80000000 	or	r0, r0, r0

20038040 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20038040:	3021fff0 	addik	r1, r1, -16
20038044:	fa610008 	swi	r19, r1, 8
20038048:	fa81000c 	swi	r20, r1, 12
2003804c:	12610000 	addk	r19, r1, r0
20038050:	96808000 	mfs	r20, rpc
20038054:	b000dffc 	imm	-8196
20038058:	3294990c 	addik	r20, r20, -26356
2003805c:	f8b30014 	swi	r5, r19, 20
20038060:	f8d30018 	swi	r6, r19, 24
20038064:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20038068:	f8130004 	swi	r0, r19, 4
2003806c:	b800005c 	bri	92		// 200380c8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20038070:	e8730014 	lwi	r3, r19, 20
20038074:	e8830000 	lwi	r4, r3, 0
20038078:	e8730014 	lwi	r3, r19, 20
2003807c:	e8a3000c 	lwi	r5, r3, 12
20038080:	e8730004 	lwi	r3, r19, 4
20038084:	64630402 	bslli	r3, r3, 2
20038088:	10651800 	addk	r3, r5, r3
2003808c:	e8a30000 	lwi	r5, r3, 0
20038090:	e8730014 	lwi	r3, r19, 20
20038094:	e8630010 	lwi	r3, r3, 16
20038098:	e8630000 	lwi	r3, r3, 0
2003809c:	14632800 	rsubk	r3, r3, r5
200380a0:	10641800 	addk	r3, r4, r3
200380a4:	30830001 	addik	r4, r3, 1
200380a8:	e873001c 	lwi	r3, r19, 28
200380ac:	16441803 	cmpu	r18, r4, r3
200380b0:	bc52000c 	blti	r18, 12		// 200380bc
            return 0;
200380b4:	10600000 	addk	r3, r0, r0
200380b8:	b8000024 	bri	36		// 200380dc
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200380bc:	e8730004 	lwi	r3, r19, 4
200380c0:	30630001 	addik	r3, r3, 1
200380c4:	f8730004 	swi	r3, r19, 4
200380c8:	e8930004 	lwi	r4, r19, 4
200380cc:	e8730018 	lwi	r3, r19, 24
200380d0:	16432003 	cmpu	r18, r3, r4
200380d4:	bc52ff9c 	blti	r18, -100		// 20038070
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200380d8:	30600001 	addik	r3, r0, 1
}
200380dc:	10330000 	addk	r1, r19, r0
200380e0:	ea610008 	lwi	r19, r1, 8
200380e4:	ea81000c 	lwi	r20, r1, 12
200380e8:	30210010 	addik	r1, r1, 16
200380ec:	b60f0008 	rtsd	r15, 8
200380f0:	80000000 	or	r0, r0, r0

200380f4 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200380f4:	3021ffe8 	addik	r1, r1, -24
200380f8:	fa610010 	swi	r19, r1, 16
200380fc:	fa810014 	swi	r20, r1, 20
20038100:	12610000 	addk	r19, r1, r0
20038104:	96808000 	mfs	r20, rpc
20038108:	b000dffc 	imm	-8196
2003810c:	32949858 	addik	r20, r20, -26536
20038110:	f8b3001c 	swi	r5, r19, 28
20038114:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20038118:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003811c:	f8130004 	swi	r0, r19, 4
20038120:	b8000054 	bri	84		// 20038174
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20038124:	e873001c 	lwi	r3, r19, 28
20038128:	e8630010 	lwi	r3, r3, 16
2003812c:	e8830000 	lwi	r4, r3, 0
20038130:	e873001c 	lwi	r3, r19, 28
20038134:	e8a3000c 	lwi	r5, r3, 12
20038138:	e8730004 	lwi	r3, r19, 4
2003813c:	64630402 	bslli	r3, r3, 2
20038140:	10651800 	addk	r3, r5, r3
20038144:	e8630000 	lwi	r3, r3, 0
20038148:	14632000 	rsubk	r3, r3, r4
2003814c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20038150:	e8930008 	lwi	r4, r19, 8
20038154:	e873000c 	lwi	r3, r19, 12
20038158:	16441803 	cmpu	r18, r4, r3
2003815c:	bcb20008 	bgei	r18, 8		// 20038164
20038160:	10640000 	addk	r3, r4, r0
20038164:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20038168:	e8730004 	lwi	r3, r19, 4
2003816c:	30630001 	addik	r3, r3, 1
20038170:	f8730004 	swi	r3, r19, 4
20038174:	e8930004 	lwi	r4, r19, 4
20038178:	e8730020 	lwi	r3, r19, 32
2003817c:	16432003 	cmpu	r18, r3, r4
20038180:	bc52ffa4 	blti	r18, -92		// 20038124
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20038184:	e873001c 	lwi	r3, r19, 28
20038188:	e8830000 	lwi	r4, r3, 0
2003818c:	e8730008 	lwi	r3, r19, 8
20038190:	14632000 	rsubk	r3, r3, r4
}
20038194:	10330000 	addk	r1, r19, r0
20038198:	ea610010 	lwi	r19, r1, 16
2003819c:	ea810014 	lwi	r20, r1, 20
200381a0:	30210018 	addik	r1, r1, 24
200381a4:	b60f0008 	rtsd	r15, 8
200381a8:	80000000 	or	r0, r0, r0

200381ac <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200381ac:	3021fff0 	addik	r1, r1, -16
200381b0:	fa610008 	swi	r19, r1, 8
200381b4:	fa81000c 	swi	r20, r1, 12
200381b8:	12610000 	addk	r19, r1, r0
200381bc:	96808000 	mfs	r20, rpc
200381c0:	b000dffc 	imm	-8196
200381c4:	329497a0 	addik	r20, r20, -26720
200381c8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200381cc:	e8730014 	lwi	r3, r19, 20
200381d0:	e8630010 	lwi	r3, r3, 16
200381d4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200381d8:	f8130004 	swi	r0, r19, 4
200381dc:	b8000028 	bri	40		// 20038204
        fifo->read_inds[i] = 0;
200381e0:	e8730014 	lwi	r3, r19, 20
200381e4:	e883000c 	lwi	r4, r3, 12
200381e8:	e8730004 	lwi	r3, r19, 4
200381ec:	64630402 	bslli	r3, r3, 2
200381f0:	10641800 	addk	r3, r4, r3
200381f4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200381f8:	e8730004 	lwi	r3, r19, 4
200381fc:	30630001 	addik	r3, r3, 1
20038200:	f8730004 	swi	r3, r19, 4
20038204:	e8730014 	lwi	r3, r19, 20
20038208:	e8830008 	lwi	r4, r3, 8
2003820c:	e8730004 	lwi	r3, r19, 4
20038210:	16441803 	cmpu	r18, r4, r3
20038214:	bc52ffcc 	blti	r18, -52		// 200381e0
        fifo->read_inds[i] = 0;
    }
}
20038218:	10330000 	addk	r1, r19, r0
2003821c:	ea610008 	lwi	r19, r1, 8
20038220:	ea81000c 	lwi	r20, r1, 12
20038224:	30210010 	addik	r1, r1, 16
20038228:	b60f0008 	rtsd	r15, 8
2003822c:	80000000 	or	r0, r0, r0

20038230 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20038230:	3021fff0 	addik	r1, r1, -16
20038234:	fa610008 	swi	r19, r1, 8
20038238:	fa81000c 	swi	r20, r1, 12
2003823c:	12610000 	addk	r19, r1, r0
20038240:	96808000 	mfs	r20, rpc
20038244:	b000dffc 	imm	-8196
20038248:	3294971c 	addik	r20, r20, -26852
2003824c:	f8b30014 	swi	r5, r19, 20
20038250:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20038254:	e8730014 	lwi	r3, r19, 20
20038258:	e8830004 	lwi	r4, r3, 4
2003825c:	e8730014 	lwi	r3, r19, 20
20038260:	e8a3000c 	lwi	r5, r3, 12
20038264:	e8730018 	lwi	r3, r19, 24
20038268:	64630402 	bslli	r3, r3, 2
2003826c:	10651800 	addk	r3, r5, r3
20038270:	e8a30000 	lwi	r5, r3, 0
20038274:	e8730014 	lwi	r3, r19, 20
20038278:	e8630000 	lwi	r3, r3, 0
2003827c:	3063ffff 	addik	r3, r3, -1
20038280:	84651800 	and	r3, r5, r3
20038284:	10631800 	addk	r3, r3, r3
20038288:	10641800 	addk	r3, r4, r3
2003828c:	e4630000 	lhui	r3, r3, 0
20038290:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20038294:	e8730014 	lwi	r3, r19, 20
20038298:	e883000c 	lwi	r4, r3, 12
2003829c:	e8730018 	lwi	r3, r19, 24
200382a0:	64630402 	bslli	r3, r3, 2
200382a4:	10641800 	addk	r3, r4, r3
200382a8:	e8830000 	lwi	r4, r3, 0
200382ac:	30840001 	addik	r4, r4, 1
200382b0:	f8830000 	swi	r4, r3, 0
    return value;
200382b4:	e4730004 	lhui	r3, r19, 4
200382b8:	90630061 	sext16	r3, r3
}
200382bc:	10330000 	addk	r1, r19, r0
200382c0:	ea610008 	lwi	r19, r1, 8
200382c4:	ea81000c 	lwi	r20, r1, 12
200382c8:	30210010 	addik	r1, r1, 16
200382cc:	b60f0008 	rtsd	r15, 8
200382d0:	80000000 	or	r0, r0, r0

200382d4 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200382d4:	3021fff4 	addik	r1, r1, -12
200382d8:	fa610004 	swi	r19, r1, 4
200382dc:	fa810008 	swi	r20, r1, 8
200382e0:	12610000 	addk	r19, r1, r0
200382e4:	96808000 	mfs	r20, rpc
200382e8:	b000dffc 	imm	-8196
200382ec:	32949678 	addik	r20, r20, -27016
200382f0:	f8b30010 	swi	r5, r19, 16
200382f4:	10660000 	addk	r3, r6, r0
200382f8:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200382fc:	e8730010 	lwi	r3, r19, 16
20038300:	e8830004 	lwi	r4, r3, 4
20038304:	e8730010 	lwi	r3, r19, 16
20038308:	e8630010 	lwi	r3, r3, 16
2003830c:	e8a30000 	lwi	r5, r3, 0
20038310:	e8730010 	lwi	r3, r19, 16
20038314:	e8630000 	lwi	r3, r3, 0
20038318:	3063ffff 	addik	r3, r3, -1
2003831c:	84651800 	and	r3, r5, r3
20038320:	10631800 	addk	r3, r3, r3
20038324:	10641800 	addk	r3, r4, r3
20038328:	e4930014 	lhui	r4, r19, 20
2003832c:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20038330:	e8730010 	lwi	r3, r19, 16
20038334:	e8630010 	lwi	r3, r3, 16
20038338:	e8830000 	lwi	r4, r3, 0
2003833c:	30840001 	addik	r4, r4, 1
20038340:	f8830000 	swi	r4, r3, 0
}
20038344:	10330000 	addk	r1, r19, r0
20038348:	ea610004 	lwi	r19, r1, 4
2003834c:	ea810008 	lwi	r20, r1, 8
20038350:	3021000c 	addik	r1, r1, 12
20038354:	b60f0008 	rtsd	r15, 8
20038358:	80000000 	or	r0, r0, r0

2003835c <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003835c:	3021fff4 	addik	r1, r1, -12
20038360:	fa610004 	swi	r19, r1, 4
20038364:	fa810008 	swi	r20, r1, 8
20038368:	12610000 	addk	r19, r1, r0
2003836c:	96808000 	mfs	r20, rpc
20038370:	b000dffc 	imm	-8196
20038374:	329495f0 	addik	r20, r20, -27152
20038378:	f8b30010 	swi	r5, r19, 16
2003837c:	f8d30014 	swi	r6, r19, 20
20038380:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20038384:	e8730010 	lwi	r3, r19, 16
20038388:	e8630010 	lwi	r3, r3, 16
2003838c:	e8830000 	lwi	r4, r3, 0
20038390:	e8730010 	lwi	r3, r19, 16
20038394:	e8a3000c 	lwi	r5, r3, 12
20038398:	e8730014 	lwi	r3, r19, 20
2003839c:	64630402 	bslli	r3, r3, 2
200383a0:	10651800 	addk	r3, r5, r3
200383a4:	e8630000 	lwi	r3, r3, 0
200383a8:	14a32000 	rsubk	r5, r3, r4
200383ac:	30600001 	addik	r3, r0, 1
200383b0:	e8930018 	lwi	r4, r19, 24
200383b4:	16442803 	cmpu	r18, r4, r5
200383b8:	bcb20008 	bgei	r18, 8		// 200383c0
200383bc:	10600000 	addk	r3, r0, r0
200383c0:	a46300ff 	andi	r3, r3, 255
}
200383c4:	10330000 	addk	r1, r19, r0
200383c8:	ea610004 	lwi	r19, r1, 4
200383cc:	ea810008 	lwi	r20, r1, 8
200383d0:	3021000c 	addik	r1, r1, 12
200383d4:	b60f0008 	rtsd	r15, 8
200383d8:	80000000 	or	r0, r0, r0

200383dc <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200383dc:	3021fff4 	addik	r1, r1, -12
200383e0:	fa610004 	swi	r19, r1, 4
200383e4:	fa810008 	swi	r20, r1, 8
200383e8:	12610000 	addk	r19, r1, r0
200383ec:	96808000 	mfs	r20, rpc
200383f0:	b000dffc 	imm	-8196
200383f4:	32949570 	addik	r20, r20, -27280
200383f8:	f8b30010 	swi	r5, r19, 16
200383fc:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20038400:	e8730010 	lwi	r3, r19, 16
20038404:	e8630010 	lwi	r3, r3, 16
20038408:	e8830000 	lwi	r4, r3, 0
2003840c:	e8730010 	lwi	r3, r19, 16
20038410:	e8a3000c 	lwi	r5, r3, 12
20038414:	e8730014 	lwi	r3, r19, 20
20038418:	64630402 	bslli	r3, r3, 2
2003841c:	10651800 	addk	r3, r5, r3
20038420:	e8630000 	lwi	r3, r3, 0
20038424:	14632000 	rsubk	r3, r3, r4
}
20038428:	10330000 	addk	r1, r19, r0
2003842c:	ea610004 	lwi	r19, r1, 4
20038430:	ea810008 	lwi	r20, r1, 8
20038434:	3021000c 	addik	r1, r1, 12
20038438:	b60f0008 	rtsd	r15, 8
2003843c:	80000000 	or	r0, r0, r0

20038440 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20038440:	3021fff0 	addik	r1, r1, -16
20038444:	fa610008 	swi	r19, r1, 8
20038448:	fa81000c 	swi	r20, r1, 12
2003844c:	12610000 	addk	r19, r1, r0
20038450:	96808000 	mfs	r20, rpc
20038454:	b000dffc 	imm	-8196
20038458:	3294950c 	addik	r20, r20, -27380
2003845c:	f8b30014 	swi	r5, r19, 20
20038460:	f8d30018 	swi	r6, r19, 24
20038464:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20038468:	f8130004 	swi	r0, r19, 4
2003846c:	b800005c 	bri	92		// 200384c8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20038470:	e8730014 	lwi	r3, r19, 20
20038474:	e8830000 	lwi	r4, r3, 0
20038478:	e8730014 	lwi	r3, r19, 20
2003847c:	e8a3000c 	lwi	r5, r3, 12
20038480:	e8730004 	lwi	r3, r19, 4
20038484:	64630402 	bslli	r3, r3, 2
20038488:	10651800 	addk	r3, r5, r3
2003848c:	e8a30000 	lwi	r5, r3, 0
20038490:	e8730014 	lwi	r3, r19, 20
20038494:	e8630010 	lwi	r3, r3, 16
20038498:	e8630000 	lwi	r3, r3, 0
2003849c:	14632800 	rsubk	r3, r3, r5
200384a0:	10641800 	addk	r3, r4, r3
200384a4:	30830001 	addik	r4, r3, 1
200384a8:	e873001c 	lwi	r3, r19, 28
200384ac:	16441803 	cmpu	r18, r4, r3
200384b0:	bc52000c 	blti	r18, 12		// 200384bc
            return 0;
200384b4:	10600000 	addk	r3, r0, r0
200384b8:	b8000024 	bri	36		// 200384dc
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200384bc:	e8730004 	lwi	r3, r19, 4
200384c0:	30630001 	addik	r3, r3, 1
200384c4:	f8730004 	swi	r3, r19, 4
200384c8:	e8930004 	lwi	r4, r19, 4
200384cc:	e8730018 	lwi	r3, r19, 24
200384d0:	16432003 	cmpu	r18, r3, r4
200384d4:	bc52ff9c 	blti	r18, -100		// 20038470
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200384d8:	30600001 	addik	r3, r0, 1
}
200384dc:	10330000 	addk	r1, r19, r0
200384e0:	ea610008 	lwi	r19, r1, 8
200384e4:	ea81000c 	lwi	r20, r1, 12
200384e8:	30210010 	addik	r1, r1, 16
200384ec:	b60f0008 	rtsd	r15, 8
200384f0:	80000000 	or	r0, r0, r0

200384f4 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200384f4:	3021ffe8 	addik	r1, r1, -24
200384f8:	fa610010 	swi	r19, r1, 16
200384fc:	fa810014 	swi	r20, r1, 20
20038500:	12610000 	addk	r19, r1, r0
20038504:	96808000 	mfs	r20, rpc
20038508:	b000dffc 	imm	-8196
2003850c:	32949458 	addik	r20, r20, -27560
20038510:	f8b3001c 	swi	r5, r19, 28
20038514:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20038518:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003851c:	f8130004 	swi	r0, r19, 4
20038520:	b8000054 	bri	84		// 20038574
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20038524:	e873001c 	lwi	r3, r19, 28
20038528:	e8630010 	lwi	r3, r3, 16
2003852c:	e8830000 	lwi	r4, r3, 0
20038530:	e873001c 	lwi	r3, r19, 28
20038534:	e8a3000c 	lwi	r5, r3, 12
20038538:	e8730004 	lwi	r3, r19, 4
2003853c:	64630402 	bslli	r3, r3, 2
20038540:	10651800 	addk	r3, r5, r3
20038544:	e8630000 	lwi	r3, r3, 0
20038548:	14632000 	rsubk	r3, r3, r4
2003854c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20038550:	e8930008 	lwi	r4, r19, 8
20038554:	e873000c 	lwi	r3, r19, 12
20038558:	16441803 	cmpu	r18, r4, r3
2003855c:	bcb20008 	bgei	r18, 8		// 20038564
20038560:	10640000 	addk	r3, r4, r0
20038564:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20038568:	e8730004 	lwi	r3, r19, 4
2003856c:	30630001 	addik	r3, r3, 1
20038570:	f8730004 	swi	r3, r19, 4
20038574:	e8930004 	lwi	r4, r19, 4
20038578:	e8730020 	lwi	r3, r19, 32
2003857c:	16432003 	cmpu	r18, r3, r4
20038580:	bc52ffa4 	blti	r18, -92		// 20038524
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20038584:	e873001c 	lwi	r3, r19, 28
20038588:	e8830000 	lwi	r4, r3, 0
2003858c:	e8730008 	lwi	r3, r19, 8
20038590:	14632000 	rsubk	r3, r3, r4
}
20038594:	10330000 	addk	r1, r19, r0
20038598:	ea610010 	lwi	r19, r1, 16
2003859c:	ea810014 	lwi	r20, r1, 20
200385a0:	30210018 	addik	r1, r1, 24
200385a4:	b60f0008 	rtsd	r15, 8
200385a8:	80000000 	or	r0, r0, r0

200385ac <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200385ac:	3021fff0 	addik	r1, r1, -16
200385b0:	fa610008 	swi	r19, r1, 8
200385b4:	fa81000c 	swi	r20, r1, 12
200385b8:	12610000 	addk	r19, r1, r0
200385bc:	96808000 	mfs	r20, rpc
200385c0:	b000dffc 	imm	-8196
200385c4:	329493a0 	addik	r20, r20, -27744
200385c8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200385cc:	e8730014 	lwi	r3, r19, 20
200385d0:	e8630010 	lwi	r3, r3, 16
200385d4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200385d8:	f8130004 	swi	r0, r19, 4
200385dc:	b8000028 	bri	40		// 20038604
        fifo->read_inds[i] = 0;
200385e0:	e8730014 	lwi	r3, r19, 20
200385e4:	e883000c 	lwi	r4, r3, 12
200385e8:	e8730004 	lwi	r3, r19, 4
200385ec:	64630402 	bslli	r3, r3, 2
200385f0:	10641800 	addk	r3, r4, r3
200385f4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200385f8:	e8730004 	lwi	r3, r19, 4
200385fc:	30630001 	addik	r3, r3, 1
20038600:	f8730004 	swi	r3, r19, 4
20038604:	e8730014 	lwi	r3, r19, 20
20038608:	e8830008 	lwi	r4, r3, 8
2003860c:	e8730004 	lwi	r3, r19, 4
20038610:	16441803 	cmpu	r18, r4, r3
20038614:	bc52ffcc 	blti	r18, -52		// 200385e0
        fifo->read_inds[i] = 0;
    }
}
20038618:	10330000 	addk	r1, r19, r0
2003861c:	ea610008 	lwi	r19, r1, 8
20038620:	ea81000c 	lwi	r20, r1, 12
20038624:	30210010 	addik	r1, r1, 16
20038628:	b60f0008 	rtsd	r15, 8
2003862c:	80000000 	or	r0, r0, r0

20038630 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20038630:	3021fff0 	addik	r1, r1, -16
20038634:	fa610008 	swi	r19, r1, 8
20038638:	fa81000c 	swi	r20, r1, 12
2003863c:	12610000 	addk	r19, r1, r0
20038640:	96808000 	mfs	r20, rpc
20038644:	b000dffc 	imm	-8196
20038648:	3294931c 	addik	r20, r20, -27876
2003864c:	f8b30014 	swi	r5, r19, 20
20038650:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20038654:	e8730014 	lwi	r3, r19, 20
20038658:	e8830004 	lwi	r4, r3, 4
2003865c:	e8730014 	lwi	r3, r19, 20
20038660:	e8a3000c 	lwi	r5, r3, 12
20038664:	e8730018 	lwi	r3, r19, 24
20038668:	64630402 	bslli	r3, r3, 2
2003866c:	10651800 	addk	r3, r5, r3
20038670:	e8a30000 	lwi	r5, r3, 0
20038674:	e8730014 	lwi	r3, r19, 20
20038678:	e8630000 	lwi	r3, r3, 0
2003867c:	3063ffff 	addik	r3, r3, -1
20038680:	84651800 	and	r3, r5, r3
20038684:	64630402 	bslli	r3, r3, 2
20038688:	10641800 	addk	r3, r4, r3
2003868c:	e8630000 	lwi	r3, r3, 0
20038690:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20038694:	e8730014 	lwi	r3, r19, 20
20038698:	e883000c 	lwi	r4, r3, 12
2003869c:	e8730018 	lwi	r3, r19, 24
200386a0:	64630402 	bslli	r3, r3, 2
200386a4:	10641800 	addk	r3, r4, r3
200386a8:	e8830000 	lwi	r4, r3, 0
200386ac:	30840001 	addik	r4, r4, 1
200386b0:	f8830000 	swi	r4, r3, 0
    return value;
200386b4:	e8730004 	lwi	r3, r19, 4
}
200386b8:	10330000 	addk	r1, r19, r0
200386bc:	ea610008 	lwi	r19, r1, 8
200386c0:	ea81000c 	lwi	r20, r1, 12
200386c4:	30210010 	addik	r1, r1, 16
200386c8:	b60f0008 	rtsd	r15, 8
200386cc:	80000000 	or	r0, r0, r0

200386d0 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200386d0:	3021fff4 	addik	r1, r1, -12
200386d4:	fa610004 	swi	r19, r1, 4
200386d8:	fa810008 	swi	r20, r1, 8
200386dc:	12610000 	addk	r19, r1, r0
200386e0:	96808000 	mfs	r20, rpc
200386e4:	b000dffc 	imm	-8196
200386e8:	3294927c 	addik	r20, r20, -28036
200386ec:	f8b30010 	swi	r5, r19, 16
200386f0:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200386f4:	e8730010 	lwi	r3, r19, 16
200386f8:	e8830004 	lwi	r4, r3, 4
200386fc:	e8730010 	lwi	r3, r19, 16
20038700:	e8630010 	lwi	r3, r3, 16
20038704:	e8a30000 	lwi	r5, r3, 0
20038708:	e8730010 	lwi	r3, r19, 16
2003870c:	e8630000 	lwi	r3, r3, 0
20038710:	3063ffff 	addik	r3, r3, -1
20038714:	84651800 	and	r3, r5, r3
20038718:	64630402 	bslli	r3, r3, 2
2003871c:	10641800 	addk	r3, r4, r3
20038720:	e8930014 	lwi	r4, r19, 20
20038724:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20038728:	e8730010 	lwi	r3, r19, 16
2003872c:	e8630010 	lwi	r3, r3, 16
20038730:	e8830000 	lwi	r4, r3, 0
20038734:	30840001 	addik	r4, r4, 1
20038738:	f8830000 	swi	r4, r3, 0
}
2003873c:	10330000 	addk	r1, r19, r0
20038740:	ea610004 	lwi	r19, r1, 4
20038744:	ea810008 	lwi	r20, r1, 8
20038748:	3021000c 	addik	r1, r1, 12
2003874c:	b60f0008 	rtsd	r15, 8
20038750:	80000000 	or	r0, r0, r0

20038754 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20038754:	3021fff4 	addik	r1, r1, -12
20038758:	fa610004 	swi	r19, r1, 4
2003875c:	fa810008 	swi	r20, r1, 8
20038760:	12610000 	addk	r19, r1, r0
20038764:	96808000 	mfs	r20, rpc
20038768:	b000dffc 	imm	-8196
2003876c:	329491f8 	addik	r20, r20, -28168
20038770:	f8b30010 	swi	r5, r19, 16
20038774:	f8d30014 	swi	r6, r19, 20
20038778:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003877c:	e8730010 	lwi	r3, r19, 16
20038780:	e8630010 	lwi	r3, r3, 16
20038784:	e8830000 	lwi	r4, r3, 0
20038788:	e8730010 	lwi	r3, r19, 16
2003878c:	e8a3000c 	lwi	r5, r3, 12
20038790:	e8730014 	lwi	r3, r19, 20
20038794:	64630402 	bslli	r3, r3, 2
20038798:	10651800 	addk	r3, r5, r3
2003879c:	e8630000 	lwi	r3, r3, 0
200387a0:	14a32000 	rsubk	r5, r3, r4
200387a4:	30600001 	addik	r3, r0, 1
200387a8:	e8930018 	lwi	r4, r19, 24
200387ac:	16442803 	cmpu	r18, r4, r5
200387b0:	bcb20008 	bgei	r18, 8		// 200387b8
200387b4:	10600000 	addk	r3, r0, r0
200387b8:	a46300ff 	andi	r3, r3, 255
}
200387bc:	10330000 	addk	r1, r19, r0
200387c0:	ea610004 	lwi	r19, r1, 4
200387c4:	ea810008 	lwi	r20, r1, 8
200387c8:	3021000c 	addik	r1, r1, 12
200387cc:	b60f0008 	rtsd	r15, 8
200387d0:	80000000 	or	r0, r0, r0

200387d4 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200387d4:	3021fff4 	addik	r1, r1, -12
200387d8:	fa610004 	swi	r19, r1, 4
200387dc:	fa810008 	swi	r20, r1, 8
200387e0:	12610000 	addk	r19, r1, r0
200387e4:	96808000 	mfs	r20, rpc
200387e8:	b000dffc 	imm	-8196
200387ec:	32949178 	addik	r20, r20, -28296
200387f0:	f8b30010 	swi	r5, r19, 16
200387f4:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200387f8:	e8730010 	lwi	r3, r19, 16
200387fc:	e8630010 	lwi	r3, r3, 16
20038800:	e8830000 	lwi	r4, r3, 0
20038804:	e8730010 	lwi	r3, r19, 16
20038808:	e8a3000c 	lwi	r5, r3, 12
2003880c:	e8730014 	lwi	r3, r19, 20
20038810:	64630402 	bslli	r3, r3, 2
20038814:	10651800 	addk	r3, r5, r3
20038818:	e8630000 	lwi	r3, r3, 0
2003881c:	14632000 	rsubk	r3, r3, r4
}
20038820:	10330000 	addk	r1, r19, r0
20038824:	ea610004 	lwi	r19, r1, 4
20038828:	ea810008 	lwi	r20, r1, 8
2003882c:	3021000c 	addik	r1, r1, 12
20038830:	b60f0008 	rtsd	r15, 8
20038834:	80000000 	or	r0, r0, r0

20038838 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20038838:	3021fff0 	addik	r1, r1, -16
2003883c:	fa610008 	swi	r19, r1, 8
20038840:	fa81000c 	swi	r20, r1, 12
20038844:	12610000 	addk	r19, r1, r0
20038848:	96808000 	mfs	r20, rpc
2003884c:	b000dffc 	imm	-8196
20038850:	32949114 	addik	r20, r20, -28396
20038854:	f8b30014 	swi	r5, r19, 20
20038858:	f8d30018 	swi	r6, r19, 24
2003885c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20038860:	f8130004 	swi	r0, r19, 4
20038864:	b800005c 	bri	92		// 200388c0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20038868:	e8730014 	lwi	r3, r19, 20
2003886c:	e8830000 	lwi	r4, r3, 0
20038870:	e8730014 	lwi	r3, r19, 20
20038874:	e8a3000c 	lwi	r5, r3, 12
20038878:	e8730004 	lwi	r3, r19, 4
2003887c:	64630402 	bslli	r3, r3, 2
20038880:	10651800 	addk	r3, r5, r3
20038884:	e8a30000 	lwi	r5, r3, 0
20038888:	e8730014 	lwi	r3, r19, 20
2003888c:	e8630010 	lwi	r3, r3, 16
20038890:	e8630000 	lwi	r3, r3, 0
20038894:	14632800 	rsubk	r3, r3, r5
20038898:	10641800 	addk	r3, r4, r3
2003889c:	30830001 	addik	r4, r3, 1
200388a0:	e873001c 	lwi	r3, r19, 28
200388a4:	16441803 	cmpu	r18, r4, r3
200388a8:	bc52000c 	blti	r18, 12		// 200388b4
            return 0;
200388ac:	10600000 	addk	r3, r0, r0
200388b0:	b8000024 	bri	36		// 200388d4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200388b4:	e8730004 	lwi	r3, r19, 4
200388b8:	30630001 	addik	r3, r3, 1
200388bc:	f8730004 	swi	r3, r19, 4
200388c0:	e8930004 	lwi	r4, r19, 4
200388c4:	e8730018 	lwi	r3, r19, 24
200388c8:	16432003 	cmpu	r18, r3, r4
200388cc:	bc52ff9c 	blti	r18, -100		// 20038868
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200388d0:	30600001 	addik	r3, r0, 1
}
200388d4:	10330000 	addk	r1, r19, r0
200388d8:	ea610008 	lwi	r19, r1, 8
200388dc:	ea81000c 	lwi	r20, r1, 12
200388e0:	30210010 	addik	r1, r1, 16
200388e4:	b60f0008 	rtsd	r15, 8
200388e8:	80000000 	or	r0, r0, r0

200388ec <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200388ec:	3021ffe8 	addik	r1, r1, -24
200388f0:	fa610010 	swi	r19, r1, 16
200388f4:	fa810014 	swi	r20, r1, 20
200388f8:	12610000 	addk	r19, r1, r0
200388fc:	96808000 	mfs	r20, rpc
20038900:	b000dffc 	imm	-8196
20038904:	32949060 	addik	r20, r20, -28576
20038908:	f8b3001c 	swi	r5, r19, 28
2003890c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20038910:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20038914:	f8130004 	swi	r0, r19, 4
20038918:	b8000054 	bri	84		// 2003896c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003891c:	e873001c 	lwi	r3, r19, 28
20038920:	e8630010 	lwi	r3, r3, 16
20038924:	e8830000 	lwi	r4, r3, 0
20038928:	e873001c 	lwi	r3, r19, 28
2003892c:	e8a3000c 	lwi	r5, r3, 12
20038930:	e8730004 	lwi	r3, r19, 4
20038934:	64630402 	bslli	r3, r3, 2
20038938:	10651800 	addk	r3, r5, r3
2003893c:	e8630000 	lwi	r3, r3, 0
20038940:	14632000 	rsubk	r3, r3, r4
20038944:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20038948:	e8930008 	lwi	r4, r19, 8
2003894c:	e873000c 	lwi	r3, r19, 12
20038950:	16441803 	cmpu	r18, r4, r3
20038954:	bcb20008 	bgei	r18, 8		// 2003895c
20038958:	10640000 	addk	r3, r4, r0
2003895c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20038960:	e8730004 	lwi	r3, r19, 4
20038964:	30630001 	addik	r3, r3, 1
20038968:	f8730004 	swi	r3, r19, 4
2003896c:	e8930004 	lwi	r4, r19, 4
20038970:	e8730020 	lwi	r3, r19, 32
20038974:	16432003 	cmpu	r18, r3, r4
20038978:	bc52ffa4 	blti	r18, -92		// 2003891c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003897c:	e873001c 	lwi	r3, r19, 28
20038980:	e8830000 	lwi	r4, r3, 0
20038984:	e8730008 	lwi	r3, r19, 8
20038988:	14632000 	rsubk	r3, r3, r4
}
2003898c:	10330000 	addk	r1, r19, r0
20038990:	ea610010 	lwi	r19, r1, 16
20038994:	ea810014 	lwi	r20, r1, 20
20038998:	30210018 	addik	r1, r1, 24
2003899c:	b60f0008 	rtsd	r15, 8
200389a0:	80000000 	or	r0, r0, r0

200389a4 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200389a4:	3021fff0 	addik	r1, r1, -16
200389a8:	fa610008 	swi	r19, r1, 8
200389ac:	fa81000c 	swi	r20, r1, 12
200389b0:	12610000 	addk	r19, r1, r0
200389b4:	96808000 	mfs	r20, rpc
200389b8:	b000dffc 	imm	-8196
200389bc:	32948fa8 	addik	r20, r20, -28760
200389c0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200389c4:	e8730014 	lwi	r3, r19, 20
200389c8:	e8630010 	lwi	r3, r3, 16
200389cc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200389d0:	f8130004 	swi	r0, r19, 4
200389d4:	b8000028 	bri	40		// 200389fc
        fifo->read_inds[i] = 0;
200389d8:	e8730014 	lwi	r3, r19, 20
200389dc:	e883000c 	lwi	r4, r3, 12
200389e0:	e8730004 	lwi	r3, r19, 4
200389e4:	64630402 	bslli	r3, r3, 2
200389e8:	10641800 	addk	r3, r4, r3
200389ec:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200389f0:	e8730004 	lwi	r3, r19, 4
200389f4:	30630001 	addik	r3, r3, 1
200389f8:	f8730004 	swi	r3, r19, 4
200389fc:	e8730014 	lwi	r3, r19, 20
20038a00:	e8830008 	lwi	r4, r3, 8
20038a04:	e8730004 	lwi	r3, r19, 4
20038a08:	16441803 	cmpu	r18, r4, r3
20038a0c:	bc52ffcc 	blti	r18, -52		// 200389d8
        fifo->read_inds[i] = 0;
    }
}
20038a10:	10330000 	addk	r1, r19, r0
20038a14:	ea610008 	lwi	r19, r1, 8
20038a18:	ea81000c 	lwi	r20, r1, 12
20038a1c:	30210010 	addik	r1, r1, 16
20038a20:	b60f0008 	rtsd	r15, 8
20038a24:	80000000 	or	r0, r0, r0

20038a28 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20038a28:	3021ffec 	addik	r1, r1, -20
20038a2c:	fa61000c 	swi	r19, r1, 12
20038a30:	fa810010 	swi	r20, r1, 16
20038a34:	12610000 	addk	r19, r1, r0
20038a38:	96808000 	mfs	r20, rpc
20038a3c:	b000dffc 	imm	-8196
20038a40:	32948f24 	addik	r20, r20, -28892
20038a44:	f8b30018 	swi	r5, r19, 24
20038a48:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20038a4c:	e8730018 	lwi	r3, r19, 24
20038a50:	e8830004 	lwi	r4, r3, 4
20038a54:	e8730018 	lwi	r3, r19, 24
20038a58:	e8a3000c 	lwi	r5, r3, 12
20038a5c:	e873001c 	lwi	r3, r19, 28
20038a60:	64630402 	bslli	r3, r3, 2
20038a64:	10651800 	addk	r3, r5, r3
20038a68:	e8a30000 	lwi	r5, r3, 0
20038a6c:	e8730018 	lwi	r3, r19, 24
20038a70:	e8630000 	lwi	r3, r3, 0
20038a74:	3063ffff 	addik	r3, r3, -1
20038a78:	84651800 	and	r3, r5, r3
20038a7c:	64630403 	bslli	r3, r3, 3
20038a80:	10641800 	addk	r3, r4, r3
20038a84:	e8830000 	lwi	r4, r3, 0
20038a88:	e8a30004 	lwi	r5, r3, 4
20038a8c:	f8930004 	swi	r4, r19, 4
20038a90:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20038a94:	e8730018 	lwi	r3, r19, 24
20038a98:	e883000c 	lwi	r4, r3, 12
20038a9c:	e873001c 	lwi	r3, r19, 28
20038aa0:	64630402 	bslli	r3, r3, 2
20038aa4:	10641800 	addk	r3, r4, r3
20038aa8:	e8830000 	lwi	r4, r3, 0
20038aac:	30840001 	addik	r4, r4, 1
20038ab0:	f8830000 	swi	r4, r3, 0
    return value;
20038ab4:	e8930004 	lwi	r4, r19, 4
20038ab8:	e8b30008 	lwi	r5, r19, 8
}
20038abc:	10640000 	addk	r3, r4, r0
20038ac0:	10850000 	addk	r4, r5, r0
20038ac4:	10330000 	addk	r1, r19, r0
20038ac8:	ea61000c 	lwi	r19, r1, 12
20038acc:	ea810010 	lwi	r20, r1, 16
20038ad0:	30210014 	addik	r1, r1, 20
20038ad4:	b60f0008 	rtsd	r15, 8
20038ad8:	80000000 	or	r0, r0, r0

20038adc <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20038adc:	3021fff4 	addik	r1, r1, -12
20038ae0:	fa610004 	swi	r19, r1, 4
20038ae4:	fa810008 	swi	r20, r1, 8
20038ae8:	12610000 	addk	r19, r1, r0
20038aec:	96808000 	mfs	r20, rpc
20038af0:	b000dffc 	imm	-8196
20038af4:	32948e70 	addik	r20, r20, -29072
20038af8:	f8b30010 	swi	r5, r19, 16
20038afc:	f8d30014 	swi	r6, r19, 20
20038b00:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20038b04:	e8730010 	lwi	r3, r19, 16
20038b08:	e8830004 	lwi	r4, r3, 4
20038b0c:	e8730010 	lwi	r3, r19, 16
20038b10:	e8630010 	lwi	r3, r3, 16
20038b14:	e8a30000 	lwi	r5, r3, 0
20038b18:	e8730010 	lwi	r3, r19, 16
20038b1c:	e8630000 	lwi	r3, r3, 0
20038b20:	3063ffff 	addik	r3, r3, -1
20038b24:	84651800 	and	r3, r5, r3
20038b28:	64630403 	bslli	r3, r3, 3
20038b2c:	10641800 	addk	r3, r4, r3
20038b30:	e8930014 	lwi	r4, r19, 20
20038b34:	e8b30018 	lwi	r5, r19, 24
20038b38:	f8830000 	swi	r4, r3, 0
20038b3c:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20038b40:	e8730010 	lwi	r3, r19, 16
20038b44:	e8630010 	lwi	r3, r3, 16
20038b48:	e8830000 	lwi	r4, r3, 0
20038b4c:	30840001 	addik	r4, r4, 1
20038b50:	f8830000 	swi	r4, r3, 0
}
20038b54:	10330000 	addk	r1, r19, r0
20038b58:	ea610004 	lwi	r19, r1, 4
20038b5c:	ea810008 	lwi	r20, r1, 8
20038b60:	3021000c 	addik	r1, r1, 12
20038b64:	b60f0008 	rtsd	r15, 8
20038b68:	80000000 	or	r0, r0, r0

20038b6c <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20038b6c:	3021fff4 	addik	r1, r1, -12
20038b70:	fa610004 	swi	r19, r1, 4
20038b74:	fa810008 	swi	r20, r1, 8
20038b78:	12610000 	addk	r19, r1, r0
20038b7c:	96808000 	mfs	r20, rpc
20038b80:	b000dffc 	imm	-8196
20038b84:	32948de0 	addik	r20, r20, -29216
20038b88:	f8b30010 	swi	r5, r19, 16
20038b8c:	f8d30014 	swi	r6, r19, 20
20038b90:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20038b94:	e8730010 	lwi	r3, r19, 16
20038b98:	e8630010 	lwi	r3, r3, 16
20038b9c:	e8830000 	lwi	r4, r3, 0
20038ba0:	e8730010 	lwi	r3, r19, 16
20038ba4:	e8a3000c 	lwi	r5, r3, 12
20038ba8:	e8730014 	lwi	r3, r19, 20
20038bac:	64630402 	bslli	r3, r3, 2
20038bb0:	10651800 	addk	r3, r5, r3
20038bb4:	e8630000 	lwi	r3, r3, 0
20038bb8:	14a32000 	rsubk	r5, r3, r4
20038bbc:	30600001 	addik	r3, r0, 1
20038bc0:	e8930018 	lwi	r4, r19, 24
20038bc4:	16442803 	cmpu	r18, r4, r5
20038bc8:	bcb20008 	bgei	r18, 8		// 20038bd0
20038bcc:	10600000 	addk	r3, r0, r0
20038bd0:	a46300ff 	andi	r3, r3, 255
}
20038bd4:	10330000 	addk	r1, r19, r0
20038bd8:	ea610004 	lwi	r19, r1, 4
20038bdc:	ea810008 	lwi	r20, r1, 8
20038be0:	3021000c 	addik	r1, r1, 12
20038be4:	b60f0008 	rtsd	r15, 8
20038be8:	80000000 	or	r0, r0, r0

20038bec <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20038bec:	3021fff4 	addik	r1, r1, -12
20038bf0:	fa610004 	swi	r19, r1, 4
20038bf4:	fa810008 	swi	r20, r1, 8
20038bf8:	12610000 	addk	r19, r1, r0
20038bfc:	96808000 	mfs	r20, rpc
20038c00:	b000dffc 	imm	-8196
20038c04:	32948d60 	addik	r20, r20, -29344
20038c08:	f8b30010 	swi	r5, r19, 16
20038c0c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20038c10:	e8730010 	lwi	r3, r19, 16
20038c14:	e8630010 	lwi	r3, r3, 16
20038c18:	e8830000 	lwi	r4, r3, 0
20038c1c:	e8730010 	lwi	r3, r19, 16
20038c20:	e8a3000c 	lwi	r5, r3, 12
20038c24:	e8730014 	lwi	r3, r19, 20
20038c28:	64630402 	bslli	r3, r3, 2
20038c2c:	10651800 	addk	r3, r5, r3
20038c30:	e8630000 	lwi	r3, r3, 0
20038c34:	14632000 	rsubk	r3, r3, r4
}
20038c38:	10330000 	addk	r1, r19, r0
20038c3c:	ea610004 	lwi	r19, r1, 4
20038c40:	ea810008 	lwi	r20, r1, 8
20038c44:	3021000c 	addik	r1, r1, 12
20038c48:	b60f0008 	rtsd	r15, 8
20038c4c:	80000000 	or	r0, r0, r0

20038c50 <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20038c50:	3021fff0 	addik	r1, r1, -16
20038c54:	fa610008 	swi	r19, r1, 8
20038c58:	fa81000c 	swi	r20, r1, 12
20038c5c:	12610000 	addk	r19, r1, r0
20038c60:	96808000 	mfs	r20, rpc
20038c64:	b000dffc 	imm	-8196
20038c68:	32948cfc 	addik	r20, r20, -29444
20038c6c:	f8b30014 	swi	r5, r19, 20
20038c70:	f8d30018 	swi	r6, r19, 24
20038c74:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20038c78:	f8130004 	swi	r0, r19, 4
20038c7c:	b800005c 	bri	92		// 20038cd8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20038c80:	e8730014 	lwi	r3, r19, 20
20038c84:	e8830000 	lwi	r4, r3, 0
20038c88:	e8730014 	lwi	r3, r19, 20
20038c8c:	e8a3000c 	lwi	r5, r3, 12
20038c90:	e8730004 	lwi	r3, r19, 4
20038c94:	64630402 	bslli	r3, r3, 2
20038c98:	10651800 	addk	r3, r5, r3
20038c9c:	e8a30000 	lwi	r5, r3, 0
20038ca0:	e8730014 	lwi	r3, r19, 20
20038ca4:	e8630010 	lwi	r3, r3, 16
20038ca8:	e8630000 	lwi	r3, r3, 0
20038cac:	14632800 	rsubk	r3, r3, r5
20038cb0:	10641800 	addk	r3, r4, r3
20038cb4:	30830001 	addik	r4, r3, 1
20038cb8:	e873001c 	lwi	r3, r19, 28
20038cbc:	16441803 	cmpu	r18, r4, r3
20038cc0:	bc52000c 	blti	r18, 12		// 20038ccc
            return 0;
20038cc4:	10600000 	addk	r3, r0, r0
20038cc8:	b8000024 	bri	36		// 20038cec
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20038ccc:	e8730004 	lwi	r3, r19, 4
20038cd0:	30630001 	addik	r3, r3, 1
20038cd4:	f8730004 	swi	r3, r19, 4
20038cd8:	e8930004 	lwi	r4, r19, 4
20038cdc:	e8730018 	lwi	r3, r19, 24
20038ce0:	16432003 	cmpu	r18, r3, r4
20038ce4:	bc52ff9c 	blti	r18, -100		// 20038c80
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20038ce8:	30600001 	addik	r3, r0, 1
}
20038cec:	10330000 	addk	r1, r19, r0
20038cf0:	ea610008 	lwi	r19, r1, 8
20038cf4:	ea81000c 	lwi	r20, r1, 12
20038cf8:	30210010 	addik	r1, r1, 16
20038cfc:	b60f0008 	rtsd	r15, 8
20038d00:	80000000 	or	r0, r0, r0

20038d04 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20038d04:	3021ffe8 	addik	r1, r1, -24
20038d08:	fa610010 	swi	r19, r1, 16
20038d0c:	fa810014 	swi	r20, r1, 20
20038d10:	12610000 	addk	r19, r1, r0
20038d14:	96808000 	mfs	r20, rpc
20038d18:	b000dffc 	imm	-8196
20038d1c:	32948c48 	addik	r20, r20, -29624
20038d20:	f8b3001c 	swi	r5, r19, 28
20038d24:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20038d28:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20038d2c:	f8130004 	swi	r0, r19, 4
20038d30:	b8000054 	bri	84		// 20038d84
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20038d34:	e873001c 	lwi	r3, r19, 28
20038d38:	e8630010 	lwi	r3, r3, 16
20038d3c:	e8830000 	lwi	r4, r3, 0
20038d40:	e873001c 	lwi	r3, r19, 28
20038d44:	e8a3000c 	lwi	r5, r3, 12
20038d48:	e8730004 	lwi	r3, r19, 4
20038d4c:	64630402 	bslli	r3, r3, 2
20038d50:	10651800 	addk	r3, r5, r3
20038d54:	e8630000 	lwi	r3, r3, 0
20038d58:	14632000 	rsubk	r3, r3, r4
20038d5c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20038d60:	e8930008 	lwi	r4, r19, 8
20038d64:	e873000c 	lwi	r3, r19, 12
20038d68:	16441803 	cmpu	r18, r4, r3
20038d6c:	bcb20008 	bgei	r18, 8		// 20038d74
20038d70:	10640000 	addk	r3, r4, r0
20038d74:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20038d78:	e8730004 	lwi	r3, r19, 4
20038d7c:	30630001 	addik	r3, r3, 1
20038d80:	f8730004 	swi	r3, r19, 4
20038d84:	e8930004 	lwi	r4, r19, 4
20038d88:	e8730020 	lwi	r3, r19, 32
20038d8c:	16432003 	cmpu	r18, r3, r4
20038d90:	bc52ffa4 	blti	r18, -92		// 20038d34
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20038d94:	e873001c 	lwi	r3, r19, 28
20038d98:	e8830000 	lwi	r4, r3, 0
20038d9c:	e8730008 	lwi	r3, r19, 8
20038da0:	14632000 	rsubk	r3, r3, r4
}
20038da4:	10330000 	addk	r1, r19, r0
20038da8:	ea610010 	lwi	r19, r1, 16
20038dac:	ea810014 	lwi	r20, r1, 20
20038db0:	30210018 	addik	r1, r1, 24
20038db4:	b60f0008 	rtsd	r15, 8
20038db8:	80000000 	or	r0, r0, r0

20038dbc <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20038dbc:	3021fff0 	addik	r1, r1, -16
20038dc0:	fa610008 	swi	r19, r1, 8
20038dc4:	fa81000c 	swi	r20, r1, 12
20038dc8:	12610000 	addk	r19, r1, r0
20038dcc:	96808000 	mfs	r20, rpc
20038dd0:	b000dffc 	imm	-8196
20038dd4:	32948b90 	addik	r20, r20, -29808
20038dd8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20038ddc:	e8730014 	lwi	r3, r19, 20
20038de0:	e8630010 	lwi	r3, r3, 16
20038de4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20038de8:	f8130004 	swi	r0, r19, 4
20038dec:	b8000028 	bri	40		// 20038e14
        fifo->read_inds[i] = 0;
20038df0:	e8730014 	lwi	r3, r19, 20
20038df4:	e883000c 	lwi	r4, r3, 12
20038df8:	e8730004 	lwi	r3, r19, 4
20038dfc:	64630402 	bslli	r3, r3, 2
20038e00:	10641800 	addk	r3, r4, r3
20038e04:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20038e08:	e8730004 	lwi	r3, r19, 4
20038e0c:	30630001 	addik	r3, r3, 1
20038e10:	f8730004 	swi	r3, r19, 4
20038e14:	e8730014 	lwi	r3, r19, 20
20038e18:	e8830008 	lwi	r4, r3, 8
20038e1c:	e8730004 	lwi	r3, r19, 4
20038e20:	16441803 	cmpu	r18, r4, r3
20038e24:	bc52ffcc 	blti	r18, -52		// 20038df0
        fifo->read_inds[i] = 0;
    }
}
20038e28:	10330000 	addk	r1, r19, r0
20038e2c:	ea610008 	lwi	r19, r1, 8
20038e30:	ea81000c 	lwi	r20, r1, 12
20038e34:	30210010 	addik	r1, r1, 16
20038e38:	b60f0008 	rtsd	r15, 8
20038e3c:	80000000 	or	r0, r0, r0

20038e40 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20038e40:	3021fff0 	addik	r1, r1, -16
20038e44:	fa610008 	swi	r19, r1, 8
20038e48:	fa81000c 	swi	r20, r1, 12
20038e4c:	12610000 	addk	r19, r1, r0
20038e50:	96808000 	mfs	r20, rpc
20038e54:	b000dffc 	imm	-8196
20038e58:	32948b0c 	addik	r20, r20, -29940
20038e5c:	f8b30014 	swi	r5, r19, 20
20038e60:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20038e64:	e8730014 	lwi	r3, r19, 20
20038e68:	e8830004 	lwi	r4, r3, 4
20038e6c:	e8730014 	lwi	r3, r19, 20
20038e70:	e8a3000c 	lwi	r5, r3, 12
20038e74:	e8730018 	lwi	r3, r19, 24
20038e78:	64630402 	bslli	r3, r3, 2
20038e7c:	10651800 	addk	r3, r5, r3
20038e80:	e8a30000 	lwi	r5, r3, 0
20038e84:	e8730014 	lwi	r3, r19, 20
20038e88:	e8630000 	lwi	r3, r3, 0
20038e8c:	3063ffff 	addik	r3, r3, -1
20038e90:	84651800 	and	r3, r5, r3
20038e94:	10641800 	addk	r3, r4, r3
20038e98:	e0630000 	lbui	r3, r3, 0
20038e9c:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20038ea0:	e8730014 	lwi	r3, r19, 20
20038ea4:	e883000c 	lwi	r4, r3, 12
20038ea8:	e8730018 	lwi	r3, r19, 24
20038eac:	64630402 	bslli	r3, r3, 2
20038eb0:	10641800 	addk	r3, r4, r3
20038eb4:	e8830000 	lwi	r4, r3, 0
20038eb8:	30840001 	addik	r4, r4, 1
20038ebc:	f8830000 	swi	r4, r3, 0
    return value;
20038ec0:	e0730004 	lbui	r3, r19, 4
}
20038ec4:	10330000 	addk	r1, r19, r0
20038ec8:	ea610008 	lwi	r19, r1, 8
20038ecc:	ea81000c 	lwi	r20, r1, 12
20038ed0:	30210010 	addik	r1, r1, 16
20038ed4:	b60f0008 	rtsd	r15, 8
20038ed8:	80000000 	or	r0, r0, r0

20038edc <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20038edc:	3021fff4 	addik	r1, r1, -12
20038ee0:	fa610004 	swi	r19, r1, 4
20038ee4:	fa810008 	swi	r20, r1, 8
20038ee8:	12610000 	addk	r19, r1, r0
20038eec:	96808000 	mfs	r20, rpc
20038ef0:	b000dffc 	imm	-8196
20038ef4:	32948a70 	addik	r20, r20, -30096
20038ef8:	f8b30010 	swi	r5, r19, 16
20038efc:	10660000 	addk	r3, r6, r0
20038f00:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20038f04:	e8730010 	lwi	r3, r19, 16
20038f08:	e8830004 	lwi	r4, r3, 4
20038f0c:	e8730010 	lwi	r3, r19, 16
20038f10:	e8630010 	lwi	r3, r3, 16
20038f14:	e8a30000 	lwi	r5, r3, 0
20038f18:	e8730010 	lwi	r3, r19, 16
20038f1c:	e8630000 	lwi	r3, r3, 0
20038f20:	3063ffff 	addik	r3, r3, -1
20038f24:	84651800 	and	r3, r5, r3
20038f28:	10641800 	addk	r3, r4, r3
20038f2c:	e0930014 	lbui	r4, r19, 20
20038f30:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20038f34:	e8730010 	lwi	r3, r19, 16
20038f38:	e8630010 	lwi	r3, r3, 16
20038f3c:	e8830000 	lwi	r4, r3, 0
20038f40:	30840001 	addik	r4, r4, 1
20038f44:	f8830000 	swi	r4, r3, 0
}
20038f48:	10330000 	addk	r1, r19, r0
20038f4c:	ea610004 	lwi	r19, r1, 4
20038f50:	ea810008 	lwi	r20, r1, 8
20038f54:	3021000c 	addik	r1, r1, 12
20038f58:	b60f0008 	rtsd	r15, 8
20038f5c:	80000000 	or	r0, r0, r0

20038f60 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20038f60:	3021fff4 	addik	r1, r1, -12
20038f64:	fa610004 	swi	r19, r1, 4
20038f68:	fa810008 	swi	r20, r1, 8
20038f6c:	12610000 	addk	r19, r1, r0
20038f70:	96808000 	mfs	r20, rpc
20038f74:	b000dffc 	imm	-8196
20038f78:	329489ec 	addik	r20, r20, -30228
20038f7c:	f8b30010 	swi	r5, r19, 16
20038f80:	f8d30014 	swi	r6, r19, 20
20038f84:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20038f88:	e8730010 	lwi	r3, r19, 16
20038f8c:	e8630010 	lwi	r3, r3, 16
20038f90:	e8830000 	lwi	r4, r3, 0
20038f94:	e8730010 	lwi	r3, r19, 16
20038f98:	e8a3000c 	lwi	r5, r3, 12
20038f9c:	e8730014 	lwi	r3, r19, 20
20038fa0:	64630402 	bslli	r3, r3, 2
20038fa4:	10651800 	addk	r3, r5, r3
20038fa8:	e8630000 	lwi	r3, r3, 0
20038fac:	14a32000 	rsubk	r5, r3, r4
20038fb0:	30600001 	addik	r3, r0, 1
20038fb4:	e8930018 	lwi	r4, r19, 24
20038fb8:	16442803 	cmpu	r18, r4, r5
20038fbc:	bcb20008 	bgei	r18, 8		// 20038fc4
20038fc0:	10600000 	addk	r3, r0, r0
20038fc4:	a46300ff 	andi	r3, r3, 255
}
20038fc8:	10330000 	addk	r1, r19, r0
20038fcc:	ea610004 	lwi	r19, r1, 4
20038fd0:	ea810008 	lwi	r20, r1, 8
20038fd4:	3021000c 	addik	r1, r1, 12
20038fd8:	b60f0008 	rtsd	r15, 8
20038fdc:	80000000 	or	r0, r0, r0

20038fe0 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20038fe0:	3021fff4 	addik	r1, r1, -12
20038fe4:	fa610004 	swi	r19, r1, 4
20038fe8:	fa810008 	swi	r20, r1, 8
20038fec:	12610000 	addk	r19, r1, r0
20038ff0:	96808000 	mfs	r20, rpc
20038ff4:	b000dffc 	imm	-8196
20038ff8:	3294896c 	addik	r20, r20, -30356
20038ffc:	f8b30010 	swi	r5, r19, 16
20039000:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20039004:	e8730010 	lwi	r3, r19, 16
20039008:	e8630010 	lwi	r3, r3, 16
2003900c:	e8830000 	lwi	r4, r3, 0
20039010:	e8730010 	lwi	r3, r19, 16
20039014:	e8a3000c 	lwi	r5, r3, 12
20039018:	e8730014 	lwi	r3, r19, 20
2003901c:	64630402 	bslli	r3, r3, 2
20039020:	10651800 	addk	r3, r5, r3
20039024:	e8630000 	lwi	r3, r3, 0
20039028:	14632000 	rsubk	r3, r3, r4
}
2003902c:	10330000 	addk	r1, r19, r0
20039030:	ea610004 	lwi	r19, r1, 4
20039034:	ea810008 	lwi	r20, r1, 8
20039038:	3021000c 	addik	r1, r1, 12
2003903c:	b60f0008 	rtsd	r15, 8
20039040:	80000000 	or	r0, r0, r0

20039044 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20039044:	3021fff0 	addik	r1, r1, -16
20039048:	fa610008 	swi	r19, r1, 8
2003904c:	fa81000c 	swi	r20, r1, 12
20039050:	12610000 	addk	r19, r1, r0
20039054:	96808000 	mfs	r20, rpc
20039058:	b000dffc 	imm	-8196
2003905c:	32948908 	addik	r20, r20, -30456
20039060:	f8b30014 	swi	r5, r19, 20
20039064:	f8d30018 	swi	r6, r19, 24
20039068:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003906c:	f8130004 	swi	r0, r19, 4
20039070:	b800005c 	bri	92		// 200390cc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20039074:	e8730014 	lwi	r3, r19, 20
20039078:	e8830000 	lwi	r4, r3, 0
2003907c:	e8730014 	lwi	r3, r19, 20
20039080:	e8a3000c 	lwi	r5, r3, 12
20039084:	e8730004 	lwi	r3, r19, 4
20039088:	64630402 	bslli	r3, r3, 2
2003908c:	10651800 	addk	r3, r5, r3
20039090:	e8a30000 	lwi	r5, r3, 0
20039094:	e8730014 	lwi	r3, r19, 20
20039098:	e8630010 	lwi	r3, r3, 16
2003909c:	e8630000 	lwi	r3, r3, 0
200390a0:	14632800 	rsubk	r3, r3, r5
200390a4:	10641800 	addk	r3, r4, r3
200390a8:	30830001 	addik	r4, r3, 1
200390ac:	e873001c 	lwi	r3, r19, 28
200390b0:	16441803 	cmpu	r18, r4, r3
200390b4:	bc52000c 	blti	r18, 12		// 200390c0
            return 0;
200390b8:	10600000 	addk	r3, r0, r0
200390bc:	b8000024 	bri	36		// 200390e0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200390c0:	e8730004 	lwi	r3, r19, 4
200390c4:	30630001 	addik	r3, r3, 1
200390c8:	f8730004 	swi	r3, r19, 4
200390cc:	e8930004 	lwi	r4, r19, 4
200390d0:	e8730018 	lwi	r3, r19, 24
200390d4:	16432003 	cmpu	r18, r3, r4
200390d8:	bc52ff9c 	blti	r18, -100		// 20039074
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200390dc:	30600001 	addik	r3, r0, 1
}
200390e0:	10330000 	addk	r1, r19, r0
200390e4:	ea610008 	lwi	r19, r1, 8
200390e8:	ea81000c 	lwi	r20, r1, 12
200390ec:	30210010 	addik	r1, r1, 16
200390f0:	b60f0008 	rtsd	r15, 8
200390f4:	80000000 	or	r0, r0, r0

200390f8 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200390f8:	3021ffe8 	addik	r1, r1, -24
200390fc:	fa610010 	swi	r19, r1, 16
20039100:	fa810014 	swi	r20, r1, 20
20039104:	12610000 	addk	r19, r1, r0
20039108:	96808000 	mfs	r20, rpc
2003910c:	b000dffc 	imm	-8196
20039110:	32948854 	addik	r20, r20, -30636
20039114:	f8b3001c 	swi	r5, r19, 28
20039118:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003911c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20039120:	f8130004 	swi	r0, r19, 4
20039124:	b8000054 	bri	84		// 20039178
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20039128:	e873001c 	lwi	r3, r19, 28
2003912c:	e8630010 	lwi	r3, r3, 16
20039130:	e8830000 	lwi	r4, r3, 0
20039134:	e873001c 	lwi	r3, r19, 28
20039138:	e8a3000c 	lwi	r5, r3, 12
2003913c:	e8730004 	lwi	r3, r19, 4
20039140:	64630402 	bslli	r3, r3, 2
20039144:	10651800 	addk	r3, r5, r3
20039148:	e8630000 	lwi	r3, r3, 0
2003914c:	14632000 	rsubk	r3, r3, r4
20039150:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20039154:	e8930008 	lwi	r4, r19, 8
20039158:	e873000c 	lwi	r3, r19, 12
2003915c:	16441803 	cmpu	r18, r4, r3
20039160:	bcb20008 	bgei	r18, 8		// 20039168
20039164:	10640000 	addk	r3, r4, r0
20039168:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003916c:	e8730004 	lwi	r3, r19, 4
20039170:	30630001 	addik	r3, r3, 1
20039174:	f8730004 	swi	r3, r19, 4
20039178:	e8930004 	lwi	r4, r19, 4
2003917c:	e8730020 	lwi	r3, r19, 32
20039180:	16432003 	cmpu	r18, r3, r4
20039184:	bc52ffa4 	blti	r18, -92		// 20039128
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20039188:	e873001c 	lwi	r3, r19, 28
2003918c:	e8830000 	lwi	r4, r3, 0
20039190:	e8730008 	lwi	r3, r19, 8
20039194:	14632000 	rsubk	r3, r3, r4
}
20039198:	10330000 	addk	r1, r19, r0
2003919c:	ea610010 	lwi	r19, r1, 16
200391a0:	ea810014 	lwi	r20, r1, 20
200391a4:	30210018 	addik	r1, r1, 24
200391a8:	b60f0008 	rtsd	r15, 8
200391ac:	80000000 	or	r0, r0, r0

200391b0 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200391b0:	3021fff0 	addik	r1, r1, -16
200391b4:	fa610008 	swi	r19, r1, 8
200391b8:	fa81000c 	swi	r20, r1, 12
200391bc:	12610000 	addk	r19, r1, r0
200391c0:	96808000 	mfs	r20, rpc
200391c4:	b000dffc 	imm	-8196
200391c8:	3294879c 	addik	r20, r20, -30820
200391cc:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200391d0:	e8730014 	lwi	r3, r19, 20
200391d4:	e8630010 	lwi	r3, r3, 16
200391d8:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200391dc:	f8130004 	swi	r0, r19, 4
200391e0:	b8000028 	bri	40		// 20039208
        fifo->read_inds[i] = 0;
200391e4:	e8730014 	lwi	r3, r19, 20
200391e8:	e883000c 	lwi	r4, r3, 12
200391ec:	e8730004 	lwi	r3, r19, 4
200391f0:	64630402 	bslli	r3, r3, 2
200391f4:	10641800 	addk	r3, r4, r3
200391f8:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200391fc:	e8730004 	lwi	r3, r19, 4
20039200:	30630001 	addik	r3, r3, 1
20039204:	f8730004 	swi	r3, r19, 4
20039208:	e8730014 	lwi	r3, r19, 20
2003920c:	e8830008 	lwi	r4, r3, 8
20039210:	e8730004 	lwi	r3, r19, 4
20039214:	16441803 	cmpu	r18, r4, r3
20039218:	bc52ffcc 	blti	r18, -52		// 200391e4
        fifo->read_inds[i] = 0;
    }
}
2003921c:	10330000 	addk	r1, r19, r0
20039220:	ea610008 	lwi	r19, r1, 8
20039224:	ea81000c 	lwi	r20, r1, 12
20039228:	30210010 	addik	r1, r1, 16
2003922c:	b60f0008 	rtsd	r15, 8
20039230:	80000000 	or	r0, r0, r0

20039234 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20039234:	3021fff0 	addik	r1, r1, -16
20039238:	fa610008 	swi	r19, r1, 8
2003923c:	fa81000c 	swi	r20, r1, 12
20039240:	12610000 	addk	r19, r1, r0
20039244:	96808000 	mfs	r20, rpc
20039248:	b000dffc 	imm	-8196
2003924c:	32948718 	addik	r20, r20, -30952
20039250:	f8b30014 	swi	r5, r19, 20
20039254:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20039258:	e8730014 	lwi	r3, r19, 20
2003925c:	e8830004 	lwi	r4, r3, 4
20039260:	e8730014 	lwi	r3, r19, 20
20039264:	e8a3000c 	lwi	r5, r3, 12
20039268:	e8730018 	lwi	r3, r19, 24
2003926c:	64630402 	bslli	r3, r3, 2
20039270:	10651800 	addk	r3, r5, r3
20039274:	e8a30000 	lwi	r5, r3, 0
20039278:	e8730014 	lwi	r3, r19, 20
2003927c:	e8630000 	lwi	r3, r3, 0
20039280:	3063ffff 	addik	r3, r3, -1
20039284:	84651800 	and	r3, r5, r3
20039288:	10631800 	addk	r3, r3, r3
2003928c:	10641800 	addk	r3, r4, r3
20039290:	e4630000 	lhui	r3, r3, 0
20039294:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20039298:	e8730014 	lwi	r3, r19, 20
2003929c:	e883000c 	lwi	r4, r3, 12
200392a0:	e8730018 	lwi	r3, r19, 24
200392a4:	64630402 	bslli	r3, r3, 2
200392a8:	10641800 	addk	r3, r4, r3
200392ac:	e8830000 	lwi	r4, r3, 0
200392b0:	30840001 	addik	r4, r4, 1
200392b4:	f8830000 	swi	r4, r3, 0
    return value;
200392b8:	e4730004 	lhui	r3, r19, 4
}
200392bc:	10330000 	addk	r1, r19, r0
200392c0:	ea610008 	lwi	r19, r1, 8
200392c4:	ea81000c 	lwi	r20, r1, 12
200392c8:	30210010 	addik	r1, r1, 16
200392cc:	b60f0008 	rtsd	r15, 8
200392d0:	80000000 	or	r0, r0, r0

200392d4 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200392d4:	3021fff4 	addik	r1, r1, -12
200392d8:	fa610004 	swi	r19, r1, 4
200392dc:	fa810008 	swi	r20, r1, 8
200392e0:	12610000 	addk	r19, r1, r0
200392e4:	96808000 	mfs	r20, rpc
200392e8:	b000dffc 	imm	-8196
200392ec:	32948678 	addik	r20, r20, -31112
200392f0:	f8b30010 	swi	r5, r19, 16
200392f4:	10660000 	addk	r3, r6, r0
200392f8:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200392fc:	e8730010 	lwi	r3, r19, 16
20039300:	e8830004 	lwi	r4, r3, 4
20039304:	e8730010 	lwi	r3, r19, 16
20039308:	e8630010 	lwi	r3, r3, 16
2003930c:	e8a30000 	lwi	r5, r3, 0
20039310:	e8730010 	lwi	r3, r19, 16
20039314:	e8630000 	lwi	r3, r3, 0
20039318:	3063ffff 	addik	r3, r3, -1
2003931c:	84651800 	and	r3, r5, r3
20039320:	10631800 	addk	r3, r3, r3
20039324:	10641800 	addk	r3, r4, r3
20039328:	e4930014 	lhui	r4, r19, 20
2003932c:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20039330:	e8730010 	lwi	r3, r19, 16
20039334:	e8630010 	lwi	r3, r3, 16
20039338:	e8830000 	lwi	r4, r3, 0
2003933c:	30840001 	addik	r4, r4, 1
20039340:	f8830000 	swi	r4, r3, 0
}
20039344:	10330000 	addk	r1, r19, r0
20039348:	ea610004 	lwi	r19, r1, 4
2003934c:	ea810008 	lwi	r20, r1, 8
20039350:	3021000c 	addik	r1, r1, 12
20039354:	b60f0008 	rtsd	r15, 8
20039358:	80000000 	or	r0, r0, r0

2003935c <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003935c:	3021fff4 	addik	r1, r1, -12
20039360:	fa610004 	swi	r19, r1, 4
20039364:	fa810008 	swi	r20, r1, 8
20039368:	12610000 	addk	r19, r1, r0
2003936c:	96808000 	mfs	r20, rpc
20039370:	b000dffc 	imm	-8196
20039374:	329485f0 	addik	r20, r20, -31248
20039378:	f8b30010 	swi	r5, r19, 16
2003937c:	f8d30014 	swi	r6, r19, 20
20039380:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20039384:	e8730010 	lwi	r3, r19, 16
20039388:	e8630010 	lwi	r3, r3, 16
2003938c:	e8830000 	lwi	r4, r3, 0
20039390:	e8730010 	lwi	r3, r19, 16
20039394:	e8a3000c 	lwi	r5, r3, 12
20039398:	e8730014 	lwi	r3, r19, 20
2003939c:	64630402 	bslli	r3, r3, 2
200393a0:	10651800 	addk	r3, r5, r3
200393a4:	e8630000 	lwi	r3, r3, 0
200393a8:	14a32000 	rsubk	r5, r3, r4
200393ac:	30600001 	addik	r3, r0, 1
200393b0:	e8930018 	lwi	r4, r19, 24
200393b4:	16442803 	cmpu	r18, r4, r5
200393b8:	bcb20008 	bgei	r18, 8		// 200393c0
200393bc:	10600000 	addk	r3, r0, r0
200393c0:	a46300ff 	andi	r3, r3, 255
}
200393c4:	10330000 	addk	r1, r19, r0
200393c8:	ea610004 	lwi	r19, r1, 4
200393cc:	ea810008 	lwi	r20, r1, 8
200393d0:	3021000c 	addik	r1, r1, 12
200393d4:	b60f0008 	rtsd	r15, 8
200393d8:	80000000 	or	r0, r0, r0

200393dc <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200393dc:	3021fff4 	addik	r1, r1, -12
200393e0:	fa610004 	swi	r19, r1, 4
200393e4:	fa810008 	swi	r20, r1, 8
200393e8:	12610000 	addk	r19, r1, r0
200393ec:	96808000 	mfs	r20, rpc
200393f0:	b000dffc 	imm	-8196
200393f4:	32948570 	addik	r20, r20, -31376
200393f8:	f8b30010 	swi	r5, r19, 16
200393fc:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20039400:	e8730010 	lwi	r3, r19, 16
20039404:	e8630010 	lwi	r3, r3, 16
20039408:	e8830000 	lwi	r4, r3, 0
2003940c:	e8730010 	lwi	r3, r19, 16
20039410:	e8a3000c 	lwi	r5, r3, 12
20039414:	e8730014 	lwi	r3, r19, 20
20039418:	64630402 	bslli	r3, r3, 2
2003941c:	10651800 	addk	r3, r5, r3
20039420:	e8630000 	lwi	r3, r3, 0
20039424:	14632000 	rsubk	r3, r3, r4
}
20039428:	10330000 	addk	r1, r19, r0
2003942c:	ea610004 	lwi	r19, r1, 4
20039430:	ea810008 	lwi	r20, r1, 8
20039434:	3021000c 	addik	r1, r1, 12
20039438:	b60f0008 	rtsd	r15, 8
2003943c:	80000000 	or	r0, r0, r0

20039440 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20039440:	3021fff0 	addik	r1, r1, -16
20039444:	fa610008 	swi	r19, r1, 8
20039448:	fa81000c 	swi	r20, r1, 12
2003944c:	12610000 	addk	r19, r1, r0
20039450:	96808000 	mfs	r20, rpc
20039454:	b000dffc 	imm	-8196
20039458:	3294850c 	addik	r20, r20, -31476
2003945c:	f8b30014 	swi	r5, r19, 20
20039460:	f8d30018 	swi	r6, r19, 24
20039464:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20039468:	f8130004 	swi	r0, r19, 4
2003946c:	b800005c 	bri	92		// 200394c8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20039470:	e8730014 	lwi	r3, r19, 20
20039474:	e8830000 	lwi	r4, r3, 0
20039478:	e8730014 	lwi	r3, r19, 20
2003947c:	e8a3000c 	lwi	r5, r3, 12
20039480:	e8730004 	lwi	r3, r19, 4
20039484:	64630402 	bslli	r3, r3, 2
20039488:	10651800 	addk	r3, r5, r3
2003948c:	e8a30000 	lwi	r5, r3, 0
20039490:	e8730014 	lwi	r3, r19, 20
20039494:	e8630010 	lwi	r3, r3, 16
20039498:	e8630000 	lwi	r3, r3, 0
2003949c:	14632800 	rsubk	r3, r3, r5
200394a0:	10641800 	addk	r3, r4, r3
200394a4:	30830001 	addik	r4, r3, 1
200394a8:	e873001c 	lwi	r3, r19, 28
200394ac:	16441803 	cmpu	r18, r4, r3
200394b0:	bc52000c 	blti	r18, 12		// 200394bc
            return 0;
200394b4:	10600000 	addk	r3, r0, r0
200394b8:	b8000024 	bri	36		// 200394dc
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200394bc:	e8730004 	lwi	r3, r19, 4
200394c0:	30630001 	addik	r3, r3, 1
200394c4:	f8730004 	swi	r3, r19, 4
200394c8:	e8930004 	lwi	r4, r19, 4
200394cc:	e8730018 	lwi	r3, r19, 24
200394d0:	16432003 	cmpu	r18, r3, r4
200394d4:	bc52ff9c 	blti	r18, -100		// 20039470
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200394d8:	30600001 	addik	r3, r0, 1
}
200394dc:	10330000 	addk	r1, r19, r0
200394e0:	ea610008 	lwi	r19, r1, 8
200394e4:	ea81000c 	lwi	r20, r1, 12
200394e8:	30210010 	addik	r1, r1, 16
200394ec:	b60f0008 	rtsd	r15, 8
200394f0:	80000000 	or	r0, r0, r0

200394f4 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200394f4:	3021ffe8 	addik	r1, r1, -24
200394f8:	fa610010 	swi	r19, r1, 16
200394fc:	fa810014 	swi	r20, r1, 20
20039500:	12610000 	addk	r19, r1, r0
20039504:	96808000 	mfs	r20, rpc
20039508:	b000dffc 	imm	-8196
2003950c:	32948458 	addik	r20, r20, -31656
20039510:	f8b3001c 	swi	r5, r19, 28
20039514:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20039518:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003951c:	f8130004 	swi	r0, r19, 4
20039520:	b8000054 	bri	84		// 20039574
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20039524:	e873001c 	lwi	r3, r19, 28
20039528:	e8630010 	lwi	r3, r3, 16
2003952c:	e8830000 	lwi	r4, r3, 0
20039530:	e873001c 	lwi	r3, r19, 28
20039534:	e8a3000c 	lwi	r5, r3, 12
20039538:	e8730004 	lwi	r3, r19, 4
2003953c:	64630402 	bslli	r3, r3, 2
20039540:	10651800 	addk	r3, r5, r3
20039544:	e8630000 	lwi	r3, r3, 0
20039548:	14632000 	rsubk	r3, r3, r4
2003954c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20039550:	e8930008 	lwi	r4, r19, 8
20039554:	e873000c 	lwi	r3, r19, 12
20039558:	16441803 	cmpu	r18, r4, r3
2003955c:	bcb20008 	bgei	r18, 8		// 20039564
20039560:	10640000 	addk	r3, r4, r0
20039564:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20039568:	e8730004 	lwi	r3, r19, 4
2003956c:	30630001 	addik	r3, r3, 1
20039570:	f8730004 	swi	r3, r19, 4
20039574:	e8930004 	lwi	r4, r19, 4
20039578:	e8730020 	lwi	r3, r19, 32
2003957c:	16432003 	cmpu	r18, r3, r4
20039580:	bc52ffa4 	blti	r18, -92		// 20039524
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20039584:	e873001c 	lwi	r3, r19, 28
20039588:	e8830000 	lwi	r4, r3, 0
2003958c:	e8730008 	lwi	r3, r19, 8
20039590:	14632000 	rsubk	r3, r3, r4
}
20039594:	10330000 	addk	r1, r19, r0
20039598:	ea610010 	lwi	r19, r1, 16
2003959c:	ea810014 	lwi	r20, r1, 20
200395a0:	30210018 	addik	r1, r1, 24
200395a4:	b60f0008 	rtsd	r15, 8
200395a8:	80000000 	or	r0, r0, r0

200395ac <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200395ac:	3021fff0 	addik	r1, r1, -16
200395b0:	fa610008 	swi	r19, r1, 8
200395b4:	fa81000c 	swi	r20, r1, 12
200395b8:	12610000 	addk	r19, r1, r0
200395bc:	96808000 	mfs	r20, rpc
200395c0:	b000dffc 	imm	-8196
200395c4:	329483a0 	addik	r20, r20, -31840
200395c8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200395cc:	e8730014 	lwi	r3, r19, 20
200395d0:	e8630010 	lwi	r3, r3, 16
200395d4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200395d8:	f8130004 	swi	r0, r19, 4
200395dc:	b8000028 	bri	40		// 20039604
        fifo->read_inds[i] = 0;
200395e0:	e8730014 	lwi	r3, r19, 20
200395e4:	e883000c 	lwi	r4, r3, 12
200395e8:	e8730004 	lwi	r3, r19, 4
200395ec:	64630402 	bslli	r3, r3, 2
200395f0:	10641800 	addk	r3, r4, r3
200395f4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200395f8:	e8730004 	lwi	r3, r19, 4
200395fc:	30630001 	addik	r3, r3, 1
20039600:	f8730004 	swi	r3, r19, 4
20039604:	e8730014 	lwi	r3, r19, 20
20039608:	e8830008 	lwi	r4, r3, 8
2003960c:	e8730004 	lwi	r3, r19, 4
20039610:	16441803 	cmpu	r18, r4, r3
20039614:	bc52ffcc 	blti	r18, -52		// 200395e0
        fifo->read_inds[i] = 0;
    }
}
20039618:	10330000 	addk	r1, r19, r0
2003961c:	ea610008 	lwi	r19, r1, 8
20039620:	ea81000c 	lwi	r20, r1, 12
20039624:	30210010 	addik	r1, r1, 16
20039628:	b60f0008 	rtsd	r15, 8
2003962c:	80000000 	or	r0, r0, r0

20039630 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20039630:	3021fff0 	addik	r1, r1, -16
20039634:	fa610008 	swi	r19, r1, 8
20039638:	fa81000c 	swi	r20, r1, 12
2003963c:	12610000 	addk	r19, r1, r0
20039640:	96808000 	mfs	r20, rpc
20039644:	b000dffc 	imm	-8196
20039648:	3294831c 	addik	r20, r20, -31972
2003964c:	f8b30014 	swi	r5, r19, 20
20039650:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20039654:	e8730014 	lwi	r3, r19, 20
20039658:	e8830004 	lwi	r4, r3, 4
2003965c:	e8730014 	lwi	r3, r19, 20
20039660:	e8a3000c 	lwi	r5, r3, 12
20039664:	e8730018 	lwi	r3, r19, 24
20039668:	64630402 	bslli	r3, r3, 2
2003966c:	10651800 	addk	r3, r5, r3
20039670:	e8a30000 	lwi	r5, r3, 0
20039674:	e8730014 	lwi	r3, r19, 20
20039678:	e8630000 	lwi	r3, r3, 0
2003967c:	3063ffff 	addik	r3, r3, -1
20039680:	84651800 	and	r3, r5, r3
20039684:	64630402 	bslli	r3, r3, 2
20039688:	10641800 	addk	r3, r4, r3
2003968c:	e8630000 	lwi	r3, r3, 0
20039690:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20039694:	e8730014 	lwi	r3, r19, 20
20039698:	e883000c 	lwi	r4, r3, 12
2003969c:	e8730018 	lwi	r3, r19, 24
200396a0:	64630402 	bslli	r3, r3, 2
200396a4:	10641800 	addk	r3, r4, r3
200396a8:	e8830000 	lwi	r4, r3, 0
200396ac:	30840001 	addik	r4, r4, 1
200396b0:	f8830000 	swi	r4, r3, 0
    return value;
200396b4:	e8730004 	lwi	r3, r19, 4
}
200396b8:	10330000 	addk	r1, r19, r0
200396bc:	ea610008 	lwi	r19, r1, 8
200396c0:	ea81000c 	lwi	r20, r1, 12
200396c4:	30210010 	addik	r1, r1, 16
200396c8:	b60f0008 	rtsd	r15, 8
200396cc:	80000000 	or	r0, r0, r0

200396d0 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200396d0:	3021fff4 	addik	r1, r1, -12
200396d4:	fa610004 	swi	r19, r1, 4
200396d8:	fa810008 	swi	r20, r1, 8
200396dc:	12610000 	addk	r19, r1, r0
200396e0:	96808000 	mfs	r20, rpc
200396e4:	b000dffc 	imm	-8196
200396e8:	3294827c 	addik	r20, r20, -32132
200396ec:	f8b30010 	swi	r5, r19, 16
200396f0:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200396f4:	e8730010 	lwi	r3, r19, 16
200396f8:	e8830004 	lwi	r4, r3, 4
200396fc:	e8730010 	lwi	r3, r19, 16
20039700:	e8630010 	lwi	r3, r3, 16
20039704:	e8a30000 	lwi	r5, r3, 0
20039708:	e8730010 	lwi	r3, r19, 16
2003970c:	e8630000 	lwi	r3, r3, 0
20039710:	3063ffff 	addik	r3, r3, -1
20039714:	84651800 	and	r3, r5, r3
20039718:	64630402 	bslli	r3, r3, 2
2003971c:	10641800 	addk	r3, r4, r3
20039720:	e8930014 	lwi	r4, r19, 20
20039724:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20039728:	e8730010 	lwi	r3, r19, 16
2003972c:	e8630010 	lwi	r3, r3, 16
20039730:	e8830000 	lwi	r4, r3, 0
20039734:	30840001 	addik	r4, r4, 1
20039738:	f8830000 	swi	r4, r3, 0
}
2003973c:	10330000 	addk	r1, r19, r0
20039740:	ea610004 	lwi	r19, r1, 4
20039744:	ea810008 	lwi	r20, r1, 8
20039748:	3021000c 	addik	r1, r1, 12
2003974c:	b60f0008 	rtsd	r15, 8
20039750:	80000000 	or	r0, r0, r0

20039754 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20039754:	3021fff4 	addik	r1, r1, -12
20039758:	fa610004 	swi	r19, r1, 4
2003975c:	fa810008 	swi	r20, r1, 8
20039760:	12610000 	addk	r19, r1, r0
20039764:	96808000 	mfs	r20, rpc
20039768:	b000dffc 	imm	-8196
2003976c:	329481f8 	addik	r20, r20, -32264
20039770:	f8b30010 	swi	r5, r19, 16
20039774:	f8d30014 	swi	r6, r19, 20
20039778:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003977c:	e8730010 	lwi	r3, r19, 16
20039780:	e8630010 	lwi	r3, r3, 16
20039784:	e8830000 	lwi	r4, r3, 0
20039788:	e8730010 	lwi	r3, r19, 16
2003978c:	e8a3000c 	lwi	r5, r3, 12
20039790:	e8730014 	lwi	r3, r19, 20
20039794:	64630402 	bslli	r3, r3, 2
20039798:	10651800 	addk	r3, r5, r3
2003979c:	e8630000 	lwi	r3, r3, 0
200397a0:	14a32000 	rsubk	r5, r3, r4
200397a4:	30600001 	addik	r3, r0, 1
200397a8:	e8930018 	lwi	r4, r19, 24
200397ac:	16442803 	cmpu	r18, r4, r5
200397b0:	bcb20008 	bgei	r18, 8		// 200397b8
200397b4:	10600000 	addk	r3, r0, r0
200397b8:	a46300ff 	andi	r3, r3, 255
}
200397bc:	10330000 	addk	r1, r19, r0
200397c0:	ea610004 	lwi	r19, r1, 4
200397c4:	ea810008 	lwi	r20, r1, 8
200397c8:	3021000c 	addik	r1, r1, 12
200397cc:	b60f0008 	rtsd	r15, 8
200397d0:	80000000 	or	r0, r0, r0

200397d4 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200397d4:	3021fff4 	addik	r1, r1, -12
200397d8:	fa610004 	swi	r19, r1, 4
200397dc:	fa810008 	swi	r20, r1, 8
200397e0:	12610000 	addk	r19, r1, r0
200397e4:	96808000 	mfs	r20, rpc
200397e8:	b000dffc 	imm	-8196
200397ec:	32948178 	addik	r20, r20, -32392
200397f0:	f8b30010 	swi	r5, r19, 16
200397f4:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200397f8:	e8730010 	lwi	r3, r19, 16
200397fc:	e8630010 	lwi	r3, r3, 16
20039800:	e8830000 	lwi	r4, r3, 0
20039804:	e8730010 	lwi	r3, r19, 16
20039808:	e8a3000c 	lwi	r5, r3, 12
2003980c:	e8730014 	lwi	r3, r19, 20
20039810:	64630402 	bslli	r3, r3, 2
20039814:	10651800 	addk	r3, r5, r3
20039818:	e8630000 	lwi	r3, r3, 0
2003981c:	14632000 	rsubk	r3, r3, r4
}
20039820:	10330000 	addk	r1, r19, r0
20039824:	ea610004 	lwi	r19, r1, 4
20039828:	ea810008 	lwi	r20, r1, 8
2003982c:	3021000c 	addik	r1, r1, 12
20039830:	b60f0008 	rtsd	r15, 8
20039834:	80000000 	or	r0, r0, r0

20039838 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20039838:	3021fff0 	addik	r1, r1, -16
2003983c:	fa610008 	swi	r19, r1, 8
20039840:	fa81000c 	swi	r20, r1, 12
20039844:	12610000 	addk	r19, r1, r0
20039848:	96808000 	mfs	r20, rpc
2003984c:	b000dffc 	imm	-8196
20039850:	32948114 	addik	r20, r20, -32492
20039854:	f8b30014 	swi	r5, r19, 20
20039858:	f8d30018 	swi	r6, r19, 24
2003985c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20039860:	f8130004 	swi	r0, r19, 4
20039864:	b800005c 	bri	92		// 200398c0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20039868:	e8730014 	lwi	r3, r19, 20
2003986c:	e8830000 	lwi	r4, r3, 0
20039870:	e8730014 	lwi	r3, r19, 20
20039874:	e8a3000c 	lwi	r5, r3, 12
20039878:	e8730004 	lwi	r3, r19, 4
2003987c:	64630402 	bslli	r3, r3, 2
20039880:	10651800 	addk	r3, r5, r3
20039884:	e8a30000 	lwi	r5, r3, 0
20039888:	e8730014 	lwi	r3, r19, 20
2003988c:	e8630010 	lwi	r3, r3, 16
20039890:	e8630000 	lwi	r3, r3, 0
20039894:	14632800 	rsubk	r3, r3, r5
20039898:	10641800 	addk	r3, r4, r3
2003989c:	30830001 	addik	r4, r3, 1
200398a0:	e873001c 	lwi	r3, r19, 28
200398a4:	16441803 	cmpu	r18, r4, r3
200398a8:	bc52000c 	blti	r18, 12		// 200398b4
            return 0;
200398ac:	10600000 	addk	r3, r0, r0
200398b0:	b8000024 	bri	36		// 200398d4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200398b4:	e8730004 	lwi	r3, r19, 4
200398b8:	30630001 	addik	r3, r3, 1
200398bc:	f8730004 	swi	r3, r19, 4
200398c0:	e8930004 	lwi	r4, r19, 4
200398c4:	e8730018 	lwi	r3, r19, 24
200398c8:	16432003 	cmpu	r18, r3, r4
200398cc:	bc52ff9c 	blti	r18, -100		// 20039868
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200398d0:	30600001 	addik	r3, r0, 1
}
200398d4:	10330000 	addk	r1, r19, r0
200398d8:	ea610008 	lwi	r19, r1, 8
200398dc:	ea81000c 	lwi	r20, r1, 12
200398e0:	30210010 	addik	r1, r1, 16
200398e4:	b60f0008 	rtsd	r15, 8
200398e8:	80000000 	or	r0, r0, r0

200398ec <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200398ec:	3021ffe8 	addik	r1, r1, -24
200398f0:	fa610010 	swi	r19, r1, 16
200398f4:	fa810014 	swi	r20, r1, 20
200398f8:	12610000 	addk	r19, r1, r0
200398fc:	96808000 	mfs	r20, rpc
20039900:	b000dffc 	imm	-8196
20039904:	32948060 	addik	r20, r20, -32672
20039908:	f8b3001c 	swi	r5, r19, 28
2003990c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20039910:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20039914:	f8130004 	swi	r0, r19, 4
20039918:	b8000054 	bri	84		// 2003996c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003991c:	e873001c 	lwi	r3, r19, 28
20039920:	e8630010 	lwi	r3, r3, 16
20039924:	e8830000 	lwi	r4, r3, 0
20039928:	e873001c 	lwi	r3, r19, 28
2003992c:	e8a3000c 	lwi	r5, r3, 12
20039930:	e8730004 	lwi	r3, r19, 4
20039934:	64630402 	bslli	r3, r3, 2
20039938:	10651800 	addk	r3, r5, r3
2003993c:	e8630000 	lwi	r3, r3, 0
20039940:	14632000 	rsubk	r3, r3, r4
20039944:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20039948:	e8930008 	lwi	r4, r19, 8
2003994c:	e873000c 	lwi	r3, r19, 12
20039950:	16441803 	cmpu	r18, r4, r3
20039954:	bcb20008 	bgei	r18, 8		// 2003995c
20039958:	10640000 	addk	r3, r4, r0
2003995c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20039960:	e8730004 	lwi	r3, r19, 4
20039964:	30630001 	addik	r3, r3, 1
20039968:	f8730004 	swi	r3, r19, 4
2003996c:	e8930004 	lwi	r4, r19, 4
20039970:	e8730020 	lwi	r3, r19, 32
20039974:	16432003 	cmpu	r18, r3, r4
20039978:	bc52ffa4 	blti	r18, -92		// 2003991c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003997c:	e873001c 	lwi	r3, r19, 28
20039980:	e8830000 	lwi	r4, r3, 0
20039984:	e8730008 	lwi	r3, r19, 8
20039988:	14632000 	rsubk	r3, r3, r4
}
2003998c:	10330000 	addk	r1, r19, r0
20039990:	ea610010 	lwi	r19, r1, 16
20039994:	ea810014 	lwi	r20, r1, 20
20039998:	30210018 	addik	r1, r1, 24
2003999c:	b60f0008 	rtsd	r15, 8
200399a0:	80000000 	or	r0, r0, r0

200399a4 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200399a4:	3021fff0 	addik	r1, r1, -16
200399a8:	fa610008 	swi	r19, r1, 8
200399ac:	fa81000c 	swi	r20, r1, 12
200399b0:	12610000 	addk	r19, r1, r0
200399b4:	96808000 	mfs	r20, rpc
200399b8:	b000dffc 	imm	-8196
200399bc:	32947fa8 	addik	r20, r20, 32680
200399c0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200399c4:	e8730014 	lwi	r3, r19, 20
200399c8:	e8630010 	lwi	r3, r3, 16
200399cc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200399d0:	f8130004 	swi	r0, r19, 4
200399d4:	b8000028 	bri	40		// 200399fc
        fifo->read_inds[i] = 0;
200399d8:	e8730014 	lwi	r3, r19, 20
200399dc:	e883000c 	lwi	r4, r3, 12
200399e0:	e8730004 	lwi	r3, r19, 4
200399e4:	64630402 	bslli	r3, r3, 2
200399e8:	10641800 	addk	r3, r4, r3
200399ec:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200399f0:	e8730004 	lwi	r3, r19, 4
200399f4:	30630001 	addik	r3, r3, 1
200399f8:	f8730004 	swi	r3, r19, 4
200399fc:	e8730014 	lwi	r3, r19, 20
20039a00:	e8830008 	lwi	r4, r3, 8
20039a04:	e8730004 	lwi	r3, r19, 4
20039a08:	16441803 	cmpu	r18, r4, r3
20039a0c:	bc52ffcc 	blti	r18, -52		// 200399d8
        fifo->read_inds[i] = 0;
    }
}
20039a10:	10330000 	addk	r1, r19, r0
20039a14:	ea610008 	lwi	r19, r1, 8
20039a18:	ea81000c 	lwi	r20, r1, 12
20039a1c:	30210010 	addik	r1, r1, 16
20039a20:	b60f0008 	rtsd	r15, 8
20039a24:	80000000 	or	r0, r0, r0

20039a28 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20039a28:	3021ffec 	addik	r1, r1, -20
20039a2c:	fa61000c 	swi	r19, r1, 12
20039a30:	fa810010 	swi	r20, r1, 16
20039a34:	12610000 	addk	r19, r1, r0
20039a38:	96808000 	mfs	r20, rpc
20039a3c:	b000dffc 	imm	-8196
20039a40:	32947f24 	addik	r20, r20, 32548
20039a44:	f8b30018 	swi	r5, r19, 24
20039a48:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20039a4c:	e8730018 	lwi	r3, r19, 24
20039a50:	e8830004 	lwi	r4, r3, 4
20039a54:	e8730018 	lwi	r3, r19, 24
20039a58:	e8a3000c 	lwi	r5, r3, 12
20039a5c:	e873001c 	lwi	r3, r19, 28
20039a60:	64630402 	bslli	r3, r3, 2
20039a64:	10651800 	addk	r3, r5, r3
20039a68:	e8a30000 	lwi	r5, r3, 0
20039a6c:	e8730018 	lwi	r3, r19, 24
20039a70:	e8630000 	lwi	r3, r3, 0
20039a74:	3063ffff 	addik	r3, r3, -1
20039a78:	84651800 	and	r3, r5, r3
20039a7c:	64630403 	bslli	r3, r3, 3
20039a80:	10641800 	addk	r3, r4, r3
20039a84:	e8830000 	lwi	r4, r3, 0
20039a88:	e8a30004 	lwi	r5, r3, 4
20039a8c:	f8930004 	swi	r4, r19, 4
20039a90:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20039a94:	e8730018 	lwi	r3, r19, 24
20039a98:	e883000c 	lwi	r4, r3, 12
20039a9c:	e873001c 	lwi	r3, r19, 28
20039aa0:	64630402 	bslli	r3, r3, 2
20039aa4:	10641800 	addk	r3, r4, r3
20039aa8:	e8830000 	lwi	r4, r3, 0
20039aac:	30840001 	addik	r4, r4, 1
20039ab0:	f8830000 	swi	r4, r3, 0
    return value;
20039ab4:	e8930004 	lwi	r4, r19, 4
20039ab8:	e8b30008 	lwi	r5, r19, 8
}
20039abc:	10640000 	addk	r3, r4, r0
20039ac0:	10850000 	addk	r4, r5, r0
20039ac4:	10330000 	addk	r1, r19, r0
20039ac8:	ea61000c 	lwi	r19, r1, 12
20039acc:	ea810010 	lwi	r20, r1, 16
20039ad0:	30210014 	addik	r1, r1, 20
20039ad4:	b60f0008 	rtsd	r15, 8
20039ad8:	80000000 	or	r0, r0, r0

20039adc <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20039adc:	3021fff4 	addik	r1, r1, -12
20039ae0:	fa610004 	swi	r19, r1, 4
20039ae4:	fa810008 	swi	r20, r1, 8
20039ae8:	12610000 	addk	r19, r1, r0
20039aec:	96808000 	mfs	r20, rpc
20039af0:	b000dffc 	imm	-8196
20039af4:	32947e70 	addik	r20, r20, 32368
20039af8:	f8b30010 	swi	r5, r19, 16
20039afc:	f8d30014 	swi	r6, r19, 20
20039b00:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20039b04:	e8730010 	lwi	r3, r19, 16
20039b08:	e8830004 	lwi	r4, r3, 4
20039b0c:	e8730010 	lwi	r3, r19, 16
20039b10:	e8630010 	lwi	r3, r3, 16
20039b14:	e8a30000 	lwi	r5, r3, 0
20039b18:	e8730010 	lwi	r3, r19, 16
20039b1c:	e8630000 	lwi	r3, r3, 0
20039b20:	3063ffff 	addik	r3, r3, -1
20039b24:	84651800 	and	r3, r5, r3
20039b28:	64630403 	bslli	r3, r3, 3
20039b2c:	10641800 	addk	r3, r4, r3
20039b30:	e8930014 	lwi	r4, r19, 20
20039b34:	e8b30018 	lwi	r5, r19, 24
20039b38:	f8830000 	swi	r4, r3, 0
20039b3c:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20039b40:	e8730010 	lwi	r3, r19, 16
20039b44:	e8630010 	lwi	r3, r3, 16
20039b48:	e8830000 	lwi	r4, r3, 0
20039b4c:	30840001 	addik	r4, r4, 1
20039b50:	f8830000 	swi	r4, r3, 0
}
20039b54:	10330000 	addk	r1, r19, r0
20039b58:	ea610004 	lwi	r19, r1, 4
20039b5c:	ea810008 	lwi	r20, r1, 8
20039b60:	3021000c 	addik	r1, r1, 12
20039b64:	b60f0008 	rtsd	r15, 8
20039b68:	80000000 	or	r0, r0, r0

20039b6c <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20039b6c:	3021fff4 	addik	r1, r1, -12
20039b70:	fa610004 	swi	r19, r1, 4
20039b74:	fa810008 	swi	r20, r1, 8
20039b78:	12610000 	addk	r19, r1, r0
20039b7c:	96808000 	mfs	r20, rpc
20039b80:	b000dffc 	imm	-8196
20039b84:	32947de0 	addik	r20, r20, 32224
20039b88:	f8b30010 	swi	r5, r19, 16
20039b8c:	f8d30014 	swi	r6, r19, 20
20039b90:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20039b94:	e8730010 	lwi	r3, r19, 16
20039b98:	e8630010 	lwi	r3, r3, 16
20039b9c:	e8830000 	lwi	r4, r3, 0
20039ba0:	e8730010 	lwi	r3, r19, 16
20039ba4:	e8a3000c 	lwi	r5, r3, 12
20039ba8:	e8730014 	lwi	r3, r19, 20
20039bac:	64630402 	bslli	r3, r3, 2
20039bb0:	10651800 	addk	r3, r5, r3
20039bb4:	e8630000 	lwi	r3, r3, 0
20039bb8:	14a32000 	rsubk	r5, r3, r4
20039bbc:	30600001 	addik	r3, r0, 1
20039bc0:	e8930018 	lwi	r4, r19, 24
20039bc4:	16442803 	cmpu	r18, r4, r5
20039bc8:	bcb20008 	bgei	r18, 8		// 20039bd0
20039bcc:	10600000 	addk	r3, r0, r0
20039bd0:	a46300ff 	andi	r3, r3, 255
}
20039bd4:	10330000 	addk	r1, r19, r0
20039bd8:	ea610004 	lwi	r19, r1, 4
20039bdc:	ea810008 	lwi	r20, r1, 8
20039be0:	3021000c 	addik	r1, r1, 12
20039be4:	b60f0008 	rtsd	r15, 8
20039be8:	80000000 	or	r0, r0, r0

20039bec <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20039bec:	3021fff4 	addik	r1, r1, -12
20039bf0:	fa610004 	swi	r19, r1, 4
20039bf4:	fa810008 	swi	r20, r1, 8
20039bf8:	12610000 	addk	r19, r1, r0
20039bfc:	96808000 	mfs	r20, rpc
20039c00:	b000dffc 	imm	-8196
20039c04:	32947d60 	addik	r20, r20, 32096
20039c08:	f8b30010 	swi	r5, r19, 16
20039c0c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20039c10:	e8730010 	lwi	r3, r19, 16
20039c14:	e8630010 	lwi	r3, r3, 16
20039c18:	e8830000 	lwi	r4, r3, 0
20039c1c:	e8730010 	lwi	r3, r19, 16
20039c20:	e8a3000c 	lwi	r5, r3, 12
20039c24:	e8730014 	lwi	r3, r19, 20
20039c28:	64630402 	bslli	r3, r3, 2
20039c2c:	10651800 	addk	r3, r5, r3
20039c30:	e8630000 	lwi	r3, r3, 0
20039c34:	14632000 	rsubk	r3, r3, r4
}
20039c38:	10330000 	addk	r1, r19, r0
20039c3c:	ea610004 	lwi	r19, r1, 4
20039c40:	ea810008 	lwi	r20, r1, 8
20039c44:	3021000c 	addik	r1, r1, 12
20039c48:	b60f0008 	rtsd	r15, 8
20039c4c:	80000000 	or	r0, r0, r0

20039c50 <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20039c50:	3021fff0 	addik	r1, r1, -16
20039c54:	fa610008 	swi	r19, r1, 8
20039c58:	fa81000c 	swi	r20, r1, 12
20039c5c:	12610000 	addk	r19, r1, r0
20039c60:	96808000 	mfs	r20, rpc
20039c64:	b000dffc 	imm	-8196
20039c68:	32947cfc 	addik	r20, r20, 31996
20039c6c:	f8b30014 	swi	r5, r19, 20
20039c70:	f8d30018 	swi	r6, r19, 24
20039c74:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20039c78:	f8130004 	swi	r0, r19, 4
20039c7c:	b800005c 	bri	92		// 20039cd8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20039c80:	e8730014 	lwi	r3, r19, 20
20039c84:	e8830000 	lwi	r4, r3, 0
20039c88:	e8730014 	lwi	r3, r19, 20
20039c8c:	e8a3000c 	lwi	r5, r3, 12
20039c90:	e8730004 	lwi	r3, r19, 4
20039c94:	64630402 	bslli	r3, r3, 2
20039c98:	10651800 	addk	r3, r5, r3
20039c9c:	e8a30000 	lwi	r5, r3, 0
20039ca0:	e8730014 	lwi	r3, r19, 20
20039ca4:	e8630010 	lwi	r3, r3, 16
20039ca8:	e8630000 	lwi	r3, r3, 0
20039cac:	14632800 	rsubk	r3, r3, r5
20039cb0:	10641800 	addk	r3, r4, r3
20039cb4:	30830001 	addik	r4, r3, 1
20039cb8:	e873001c 	lwi	r3, r19, 28
20039cbc:	16441803 	cmpu	r18, r4, r3
20039cc0:	bc52000c 	blti	r18, 12		// 20039ccc
            return 0;
20039cc4:	10600000 	addk	r3, r0, r0
20039cc8:	b8000024 	bri	36		// 20039cec
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20039ccc:	e8730004 	lwi	r3, r19, 4
20039cd0:	30630001 	addik	r3, r3, 1
20039cd4:	f8730004 	swi	r3, r19, 4
20039cd8:	e8930004 	lwi	r4, r19, 4
20039cdc:	e8730018 	lwi	r3, r19, 24
20039ce0:	16432003 	cmpu	r18, r3, r4
20039ce4:	bc52ff9c 	blti	r18, -100		// 20039c80
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20039ce8:	30600001 	addik	r3, r0, 1
}
20039cec:	10330000 	addk	r1, r19, r0
20039cf0:	ea610008 	lwi	r19, r1, 8
20039cf4:	ea81000c 	lwi	r20, r1, 12
20039cf8:	30210010 	addik	r1, r1, 16
20039cfc:	b60f0008 	rtsd	r15, 8
20039d00:	80000000 	or	r0, r0, r0

20039d04 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20039d04:	3021ffe8 	addik	r1, r1, -24
20039d08:	fa610010 	swi	r19, r1, 16
20039d0c:	fa810014 	swi	r20, r1, 20
20039d10:	12610000 	addk	r19, r1, r0
20039d14:	96808000 	mfs	r20, rpc
20039d18:	b000dffc 	imm	-8196
20039d1c:	32947c48 	addik	r20, r20, 31816
20039d20:	f8b3001c 	swi	r5, r19, 28
20039d24:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20039d28:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20039d2c:	f8130004 	swi	r0, r19, 4
20039d30:	b8000054 	bri	84		// 20039d84
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20039d34:	e873001c 	lwi	r3, r19, 28
20039d38:	e8630010 	lwi	r3, r3, 16
20039d3c:	e8830000 	lwi	r4, r3, 0
20039d40:	e873001c 	lwi	r3, r19, 28
20039d44:	e8a3000c 	lwi	r5, r3, 12
20039d48:	e8730004 	lwi	r3, r19, 4
20039d4c:	64630402 	bslli	r3, r3, 2
20039d50:	10651800 	addk	r3, r5, r3
20039d54:	e8630000 	lwi	r3, r3, 0
20039d58:	14632000 	rsubk	r3, r3, r4
20039d5c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20039d60:	e8930008 	lwi	r4, r19, 8
20039d64:	e873000c 	lwi	r3, r19, 12
20039d68:	16441803 	cmpu	r18, r4, r3
20039d6c:	bcb20008 	bgei	r18, 8		// 20039d74
20039d70:	10640000 	addk	r3, r4, r0
20039d74:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20039d78:	e8730004 	lwi	r3, r19, 4
20039d7c:	30630001 	addik	r3, r3, 1
20039d80:	f8730004 	swi	r3, r19, 4
20039d84:	e8930004 	lwi	r4, r19, 4
20039d88:	e8730020 	lwi	r3, r19, 32
20039d8c:	16432003 	cmpu	r18, r3, r4
20039d90:	bc52ffa4 	blti	r18, -92		// 20039d34
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20039d94:	e873001c 	lwi	r3, r19, 28
20039d98:	e8830000 	lwi	r4, r3, 0
20039d9c:	e8730008 	lwi	r3, r19, 8
20039da0:	14632000 	rsubk	r3, r3, r4
}
20039da4:	10330000 	addk	r1, r19, r0
20039da8:	ea610010 	lwi	r19, r1, 16
20039dac:	ea810014 	lwi	r20, r1, 20
20039db0:	30210018 	addik	r1, r1, 24
20039db4:	b60f0008 	rtsd	r15, 8
20039db8:	80000000 	or	r0, r0, r0

20039dbc <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20039dbc:	3021fff0 	addik	r1, r1, -16
20039dc0:	fa610008 	swi	r19, r1, 8
20039dc4:	fa81000c 	swi	r20, r1, 12
20039dc8:	12610000 	addk	r19, r1, r0
20039dcc:	96808000 	mfs	r20, rpc
20039dd0:	b000dffc 	imm	-8196
20039dd4:	32947b90 	addik	r20, r20, 31632
20039dd8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20039ddc:	e8730014 	lwi	r3, r19, 20
20039de0:	e8630010 	lwi	r3, r3, 16
20039de4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20039de8:	f8130004 	swi	r0, r19, 4
20039dec:	b8000028 	bri	40		// 20039e14
        fifo->read_inds[i] = 0;
20039df0:	e8730014 	lwi	r3, r19, 20
20039df4:	e883000c 	lwi	r4, r3, 12
20039df8:	e8730004 	lwi	r3, r19, 4
20039dfc:	64630402 	bslli	r3, r3, 2
20039e00:	10641800 	addk	r3, r4, r3
20039e04:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20039e08:	e8730004 	lwi	r3, r19, 4
20039e0c:	30630001 	addik	r3, r3, 1
20039e10:	f8730004 	swi	r3, r19, 4
20039e14:	e8730014 	lwi	r3, r19, 20
20039e18:	e8830008 	lwi	r4, r3, 8
20039e1c:	e8730004 	lwi	r3, r19, 4
20039e20:	16441803 	cmpu	r18, r4, r3
20039e24:	bc52ffcc 	blti	r18, -52		// 20039df0
        fifo->read_inds[i] = 0;
    }
}
20039e28:	10330000 	addk	r1, r19, r0
20039e2c:	ea610008 	lwi	r19, r1, 8
20039e30:	ea81000c 	lwi	r20, r1, 12
20039e34:	30210010 	addik	r1, r1, 16
20039e38:	b60f0008 	rtsd	r15, 8
20039e3c:	80000000 	or	r0, r0, r0

20039e40 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20039e40:	3021fff0 	addik	r1, r1, -16
20039e44:	fa610008 	swi	r19, r1, 8
20039e48:	fa81000c 	swi	r20, r1, 12
20039e4c:	12610000 	addk	r19, r1, r0
20039e50:	96808000 	mfs	r20, rpc
20039e54:	b000dffc 	imm	-8196
20039e58:	32947b0c 	addik	r20, r20, 31500
20039e5c:	f8b30014 	swi	r5, r19, 20
20039e60:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20039e64:	e8730014 	lwi	r3, r19, 20
20039e68:	e8830004 	lwi	r4, r3, 4
20039e6c:	e8730014 	lwi	r3, r19, 20
20039e70:	e8a3000c 	lwi	r5, r3, 12
20039e74:	e8730018 	lwi	r3, r19, 24
20039e78:	64630402 	bslli	r3, r3, 2
20039e7c:	10651800 	addk	r3, r5, r3
20039e80:	e8a30000 	lwi	r5, r3, 0
20039e84:	e8730014 	lwi	r3, r19, 20
20039e88:	e8630000 	lwi	r3, r3, 0
20039e8c:	3063ffff 	addik	r3, r3, -1
20039e90:	84651800 	and	r3, r5, r3
20039e94:	64630402 	bslli	r3, r3, 2
20039e98:	10641800 	addk	r3, r4, r3
20039e9c:	e8630000 	lwi	r3, r3, 0
20039ea0:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20039ea4:	e8730014 	lwi	r3, r19, 20
20039ea8:	e883000c 	lwi	r4, r3, 12
20039eac:	e8730018 	lwi	r3, r19, 24
20039eb0:	64630402 	bslli	r3, r3, 2
20039eb4:	10641800 	addk	r3, r4, r3
20039eb8:	e8830000 	lwi	r4, r3, 0
20039ebc:	30840001 	addik	r4, r4, 1
20039ec0:	f8830000 	swi	r4, r3, 0
    return value;
20039ec4:	e8730004 	lwi	r3, r19, 4
}
20039ec8:	10330000 	addk	r1, r19, r0
20039ecc:	ea610008 	lwi	r19, r1, 8
20039ed0:	ea81000c 	lwi	r20, r1, 12
20039ed4:	30210010 	addik	r1, r1, 16
20039ed8:	b60f0008 	rtsd	r15, 8
20039edc:	80000000 	or	r0, r0, r0

20039ee0 <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20039ee0:	3021fff4 	addik	r1, r1, -12
20039ee4:	fa610004 	swi	r19, r1, 4
20039ee8:	fa810008 	swi	r20, r1, 8
20039eec:	12610000 	addk	r19, r1, r0
20039ef0:	96808000 	mfs	r20, rpc
20039ef4:	b000dffc 	imm	-8196
20039ef8:	32947a6c 	addik	r20, r20, 31340
20039efc:	f8b30010 	swi	r5, r19, 16
20039f00:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20039f04:	e8730010 	lwi	r3, r19, 16
20039f08:	e8830004 	lwi	r4, r3, 4
20039f0c:	e8730010 	lwi	r3, r19, 16
20039f10:	e8630010 	lwi	r3, r3, 16
20039f14:	e8a30000 	lwi	r5, r3, 0
20039f18:	e8730010 	lwi	r3, r19, 16
20039f1c:	e8630000 	lwi	r3, r3, 0
20039f20:	3063ffff 	addik	r3, r3, -1
20039f24:	84651800 	and	r3, r5, r3
20039f28:	64630402 	bslli	r3, r3, 2
20039f2c:	10641800 	addk	r3, r4, r3
20039f30:	e8930014 	lwi	r4, r19, 20
20039f34:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20039f38:	e8730010 	lwi	r3, r19, 16
20039f3c:	e8630010 	lwi	r3, r3, 16
20039f40:	e8830000 	lwi	r4, r3, 0
20039f44:	30840001 	addik	r4, r4, 1
20039f48:	f8830000 	swi	r4, r3, 0
}
20039f4c:	10330000 	addk	r1, r19, r0
20039f50:	ea610004 	lwi	r19, r1, 4
20039f54:	ea810008 	lwi	r20, r1, 8
20039f58:	3021000c 	addik	r1, r1, 12
20039f5c:	b60f0008 	rtsd	r15, 8
20039f60:	80000000 	or	r0, r0, r0

20039f64 <read_IN>:
	
	static u8 needInit = 1;
	
	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_IN() {
20039f64:	3021ffdc 	addik	r1, r1, -36
20039f68:	f9e10000 	swi	r15, r1, 0
20039f6c:	fa61001c 	swi	r19, r1, 28
20039f70:	fa810020 	swi	r20, r1, 32
20039f74:	12610000 	addk	r19, r1, r0
20039f78:	96808000 	mfs	r20, rpc
20039f7c:	b000dffc 	imm	-8196
20039f80:	329479e4 	addik	r20, r20, 31204
		index_IN = decoder_texture_DCsplit_IN->read_inds[0];
20039f84:	b0000000 	imm	0
20039f88:	e8740b40 	lwi	r3, r20, 2880
20039f8c:	e8630000 	lwi	r3, r3, 0
20039f90:	e863000c 	lwi	r3, r3, 12
20039f94:	e8830000 	lwi	r4, r3, 0
20039f98:	b0000000 	imm	0
20039f9c:	e8740b4c 	lwi	r3, r20, 2892
20039fa0:	f8830000 	swi	r4, r3, 0
		numTokens_IN = index_IN + fifo_i16_get_num_tokens(decoder_texture_DCsplit_IN, 0);
20039fa4:	b0000000 	imm	0
20039fa8:	e8740b40 	lwi	r3, r20, 2880
20039fac:	e8630000 	lwi	r3, r3, 0
20039fb0:	10a30000 	addk	r5, r3, r0
20039fb4:	10c00000 	addk	r6, r0, r0
20039fb8:	b0000000 	imm	0
20039fbc:	e8940b38 	lwi	r4, r20, 2872
20039fc0:	99fc2000 	brald	r15, r4
20039fc4:	80000000 	or	r0, r0, r0
20039fc8:	10830000 	addk	r4, r3, r0
20039fcc:	b0000000 	imm	0
20039fd0:	e8740b4c 	lwi	r3, r20, 2892
20039fd4:	e8630000 	lwi	r3, r3, 0
20039fd8:	10841800 	addk	r4, r4, r3
20039fdc:	b0000000 	imm	0
20039fe0:	e8740b50 	lwi	r3, r20, 2896
20039fe4:	f8830000 	swi	r4, r3, 0
	}
20039fe8:	e9e10000 	lwi	r15, r1, 0
20039fec:	10330000 	addk	r1, r19, r0
20039ff0:	ea61001c 	lwi	r19, r1, 28
20039ff4:	ea810020 	lwi	r20, r1, 32
20039ff8:	30210024 	addik	r1, r1, 36
20039ffc:	b60f0008 	rtsd	r15, 8
2003a000:	80000000 	or	r0, r0, r0

2003a004 <read_end_IN>:
	
	static void read_end_IN() {
2003a004:	3021fff4 	addik	r1, r1, -12
2003a008:	fa610004 	swi	r19, r1, 4
2003a00c:	fa810008 	swi	r20, r1, 8
2003a010:	12610000 	addk	r19, r1, r0
2003a014:	96808000 	mfs	r20, rpc
2003a018:	b000dffc 	imm	-8196
2003a01c:	32947948 	addik	r20, r20, 31048
		decoder_texture_DCsplit_IN->read_inds[0] = index_IN;
2003a020:	b0000000 	imm	0
2003a024:	e8740b40 	lwi	r3, r20, 2880
2003a028:	e8630000 	lwi	r3, r3, 0
2003a02c:	e863000c 	lwi	r3, r3, 12
2003a030:	b0000000 	imm	0
2003a034:	e8940b4c 	lwi	r4, r20, 2892
2003a038:	e8840000 	lwi	r4, r4, 0
2003a03c:	f8830000 	swi	r4, r3, 0
	}
2003a040:	10330000 	addk	r1, r19, r0
2003a044:	ea610004 	lwi	r19, r1, 4
2003a048:	ea810008 	lwi	r20, r1, 8
2003a04c:	3021000c 	addik	r1, r1, 12
2003a050:	b60f0008 	rtsd	r15, 8
2003a054:	80000000 	or	r0, r0, r0

2003a058 <write_DC>:

	static void write_DC() {
2003a058:	3021ffdc 	addik	r1, r1, -36
2003a05c:	f9e10000 	swi	r15, r1, 0
2003a060:	fa61001c 	swi	r19, r1, 28
2003a064:	fa810020 	swi	r20, r1, 32
2003a068:	12610000 	addk	r19, r1, r0
2003a06c:	96808000 	mfs	r20, rpc
2003a070:	b000dffc 	imm	-8196
2003a074:	329478f0 	addik	r20, r20, 30960
		index_DC = (*decoder_texture_DCsplit_DC->write_ind);
2003a078:	b0000000 	imm	0
2003a07c:	e8740b48 	lwi	r3, r20, 2888
2003a080:	e8630000 	lwi	r3, r3, 0
2003a084:	e8630010 	lwi	r3, r3, 16
2003a088:	e8830000 	lwi	r4, r3, 0
2003a08c:	b0000000 	imm	0
2003a090:	e8740b54 	lwi	r3, r20, 2900
2003a094:	f8830000 	swi	r4, r3, 0
		numFree_DC = index_DC + fifo_i16_get_room(decoder_texture_DCsplit_DC, NUM_READERS_DC);
2003a098:	b0000000 	imm	0
2003a09c:	e8740b48 	lwi	r3, r20, 2888
2003a0a0:	e8630000 	lwi	r3, r3, 0
2003a0a4:	10a30000 	addk	r5, r3, r0
2003a0a8:	30c00001 	addik	r6, r0, 1
2003a0ac:	b0000000 	imm	0
2003a0b0:	e8940b3c 	lwi	r4, r20, 2876
2003a0b4:	99fc2000 	brald	r15, r4
2003a0b8:	80000000 	or	r0, r0, r0
2003a0bc:	10830000 	addk	r4, r3, r0
2003a0c0:	b0000000 	imm	0
2003a0c4:	e8740b54 	lwi	r3, r20, 2900
2003a0c8:	e8630000 	lwi	r3, r3, 0
2003a0cc:	10841800 	addk	r4, r4, r3
2003a0d0:	b0000000 	imm	0
2003a0d4:	e8740b58 	lwi	r3, r20, 2904
2003a0d8:	f8830000 	swi	r4, r3, 0
	}
2003a0dc:	e9e10000 	lwi	r15, r1, 0
2003a0e0:	10330000 	addk	r1, r19, r0
2003a0e4:	ea61001c 	lwi	r19, r1, 28
2003a0e8:	ea810020 	lwi	r20, r1, 32
2003a0ec:	30210024 	addik	r1, r1, 36
2003a0f0:	b60f0008 	rtsd	r15, 8
2003a0f4:	80000000 	or	r0, r0, r0

2003a0f8 <write_end_DC>:
	
	static void write_end_DC() {
2003a0f8:	3021fff4 	addik	r1, r1, -12
2003a0fc:	fa610004 	swi	r19, r1, 4
2003a100:	fa810008 	swi	r20, r1, 8
2003a104:	12610000 	addk	r19, r1, r0
2003a108:	96808000 	mfs	r20, rpc
2003a10c:	b000dffc 	imm	-8196
2003a110:	32947854 	addik	r20, r20, 30804
		(*decoder_texture_DCsplit_DC->write_ind) = index_DC;
2003a114:	b0000000 	imm	0
2003a118:	e8740b48 	lwi	r3, r20, 2888
2003a11c:	e8630000 	lwi	r3, r3, 0
2003a120:	e8630010 	lwi	r3, r3, 16
2003a124:	b0000000 	imm	0
2003a128:	e8940b54 	lwi	r4, r20, 2900
2003a12c:	e8840000 	lwi	r4, r4, 0
2003a130:	f8830000 	swi	r4, r3, 0
	}
2003a134:	10330000 	addk	r1, r19, r0
2003a138:	ea610004 	lwi	r19, r1, 4
2003a13c:	ea810008 	lwi	r20, r1, 8
2003a140:	3021000c 	addik	r1, r1, 12
2003a144:	b60f0008 	rtsd	r15, 8
2003a148:	80000000 	or	r0, r0, r0

2003a14c <write_AC>:
	static void write_AC() {
2003a14c:	3021ffdc 	addik	r1, r1, -36
2003a150:	f9e10000 	swi	r15, r1, 0
2003a154:	fa61001c 	swi	r19, r1, 28
2003a158:	fa810020 	swi	r20, r1, 32
2003a15c:	12610000 	addk	r19, r1, r0
2003a160:	96808000 	mfs	r20, rpc
2003a164:	b000dffc 	imm	-8196
2003a168:	329477fc 	addik	r20, r20, 30716
		index_AC = (*decoder_texture_DCsplit_AC->write_ind);
2003a16c:	b0000000 	imm	0
2003a170:	e8740b44 	lwi	r3, r20, 2884
2003a174:	e8630000 	lwi	r3, r3, 0
2003a178:	e8630010 	lwi	r3, r3, 16
2003a17c:	e8830000 	lwi	r4, r3, 0
2003a180:	b0000000 	imm	0
2003a184:	e8740b5c 	lwi	r3, r20, 2908
2003a188:	f8830000 	swi	r4, r3, 0
		numFree_AC = index_AC + fifo_i16_get_room(decoder_texture_DCsplit_AC, NUM_READERS_AC);
2003a18c:	b0000000 	imm	0
2003a190:	e8740b44 	lwi	r3, r20, 2884
2003a194:	e8630000 	lwi	r3, r3, 0
2003a198:	10a30000 	addk	r5, r3, r0
2003a19c:	30c00001 	addik	r6, r0, 1
2003a1a0:	b0000000 	imm	0
2003a1a4:	e8940b3c 	lwi	r4, r20, 2876
2003a1a8:	99fc2000 	brald	r15, r4
2003a1ac:	80000000 	or	r0, r0, r0
2003a1b0:	10830000 	addk	r4, r3, r0
2003a1b4:	b0000000 	imm	0
2003a1b8:	e8740b5c 	lwi	r3, r20, 2908
2003a1bc:	e8630000 	lwi	r3, r3, 0
2003a1c0:	10841800 	addk	r4, r4, r3
2003a1c4:	b0000000 	imm	0
2003a1c8:	e8740b60 	lwi	r3, r20, 2912
2003a1cc:	f8830000 	swi	r4, r3, 0
	}
2003a1d0:	e9e10000 	lwi	r15, r1, 0
2003a1d4:	10330000 	addk	r1, r19, r0
2003a1d8:	ea61001c 	lwi	r19, r1, 28
2003a1dc:	ea810020 	lwi	r20, r1, 32
2003a1e0:	30210024 	addik	r1, r1, 36
2003a1e4:	b60f0008 	rtsd	r15, 8
2003a1e8:	80000000 	or	r0, r0, r0

2003a1ec <write_end_AC>:
	
	static void write_end_AC() {
2003a1ec:	3021fff4 	addik	r1, r1, -12
2003a1f0:	fa610004 	swi	r19, r1, 4
2003a1f4:	fa810008 	swi	r20, r1, 8
2003a1f8:	12610000 	addk	r19, r1, r0
2003a1fc:	96808000 	mfs	r20, rpc
2003a200:	b000dffc 	imm	-8196
2003a204:	32947760 	addik	r20, r20, 30560
		(*decoder_texture_DCsplit_AC->write_ind) = index_AC;
2003a208:	b0000000 	imm	0
2003a20c:	e8740b44 	lwi	r3, r20, 2884
2003a210:	e8630000 	lwi	r3, r3, 0
2003a214:	e8630010 	lwi	r3, r3, 16
2003a218:	b0000000 	imm	0
2003a21c:	e8940b5c 	lwi	r4, r20, 2908
2003a220:	e8840000 	lwi	r4, r4, 0
2003a224:	f8830000 	swi	r4, r3, 0
	}
2003a228:	10330000 	addk	r1, r19, r0
2003a22c:	ea610004 	lwi	r19, r1, 4
2003a230:	ea810008 	lwi	r20, r1, 8
2003a234:	3021000c 	addik	r1, r1, 12
2003a238:	b60f0008 	rtsd	r15, 8
2003a23c:	80000000 	or	r0, r0, r0

2003a240 <isSchedulable_untagged_0>:
	// Functions/procedures


	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_untagged_0() {
2003a240:	3021fff0 	addik	r1, r1, -16
2003a244:	fa610008 	swi	r19, r1, 8
2003a248:	fa81000c 	swi	r20, r1, 12
2003a24c:	12610000 	addk	r19, r1, r0
2003a250:	96808000 	mfs	r20, rpc
2003a254:	b000dffc 	imm	-8196
2003a258:	3294770c 	addik	r20, r20, 30476
		i32 result;
	
		result = 1;
2003a25c:	30600001 	addik	r3, r0, 1
2003a260:	f8730004 	swi	r3, r19, 4
		return result;
2003a264:	e8730004 	lwi	r3, r19, 4
	}
2003a268:	10330000 	addk	r1, r19, r0
2003a26c:	ea610008 	lwi	r19, r1, 8
2003a270:	ea81000c 	lwi	r20, r1, 12
2003a274:	30210010 	addik	r1, r1, 16
2003a278:	b60f0008 	rtsd	r15, 8
2003a27c:	80000000 	or	r0, r0, r0

2003a280 <untagged_0>:
	
	static void untagged_0() {
2003a280:	3021ffc8 	addik	r1, r1, -56
2003a284:	f9e10000 	swi	r15, r1, 0
2003a288:	fa610030 	swi	r19, r1, 48
2003a28c:	fa810034 	swi	r20, r1, 52
2003a290:	12610000 	addk	r19, r1, r0
2003a294:	96808000 	mfs	r20, rpc
2003a298:	b000dffc 	imm	-8196
2003a29c:	329476c8 	addik	r20, r20, 30408
	
		// Compute aligned port indexes
		i32 index_aligned_IN = index_IN % SIZE_IN;
2003a2a0:	b0000000 	imm	0
2003a2a4:	e8740b4c 	lwi	r3, r20, 2892
2003a2a8:	e8630000 	lwi	r3, r3, 0
2003a2ac:	a46301ff 	andi	r3, r3, 511
2003a2b0:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_DC = index_DC % SIZE_DC;
2003a2b4:	b0000000 	imm	0
2003a2b8:	e8740b54 	lwi	r3, r20, 2900
2003a2bc:	e8630000 	lwi	r3, r3, 0
2003a2c0:	a46301ff 	andi	r3, r3, 511
2003a2c4:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_AC = index_AC % SIZE_AC;
2003a2c8:	b0000000 	imm	0
2003a2cc:	e8740b5c 	lwi	r3, r20, 2908
2003a2d0:	e8630000 	lwi	r3, r3, 0
2003a2d4:	a46301ff 	andi	r3, r3, 511
2003a2d8:	f8730028 	swi	r3, r19, 40
	
		i16 tmp_IN;
		i32 i;
		i16 tmp_IN0;
	
		tmp_IN = tokens_IN[(index_IN + (0)) % SIZE_IN];
2003a2dc:	b0000000 	imm	0
2003a2e0:	e8740b40 	lwi	r3, r20, 2880
2003a2e4:	e8630000 	lwi	r3, r3, 0
2003a2e8:	e8830004 	lwi	r4, r3, 4
2003a2ec:	b0000000 	imm	0
2003a2f0:	e8740b4c 	lwi	r3, r20, 2892
2003a2f4:	e8630000 	lwi	r3, r3, 0
2003a2f8:	a46301ff 	andi	r3, r3, 511
2003a2fc:	10631800 	addk	r3, r3, r3
2003a300:	10641800 	addk	r3, r4, r3
2003a304:	e4630000 	lhui	r3, r3, 0
2003a308:	f473002c 	shi	r3, r19, 44
		tokens_DC[(index_DC + (0)) % SIZE_DC] = tmp_IN;
2003a30c:	b0000000 	imm	0
2003a310:	e8740b48 	lwi	r3, r20, 2888
2003a314:	e8630000 	lwi	r3, r3, 0
2003a318:	e8830004 	lwi	r4, r3, 4
2003a31c:	b0000000 	imm	0
2003a320:	e8740b54 	lwi	r3, r20, 2900
2003a324:	e8630000 	lwi	r3, r3, 0
2003a328:	a46301ff 	andi	r3, r3, 511
2003a32c:	10631800 	addk	r3, r3, r3
2003a330:	10641800 	addk	r3, r4, r3
2003a334:	e493002c 	lhui	r4, r19, 44
2003a338:	f4830000 	shi	r4, r3, 0
		i = 1;
2003a33c:	30600001 	addik	r3, r0, 1
2003a340:	f873001c 	swi	r3, r19, 28
		while (i <= 63) {
2003a344:	b8000084 	bri	132		// 2003a3c8
			tmp_IN0 = tokens_IN[(index_IN + (i)) % SIZE_IN];
2003a348:	b0000000 	imm	0
2003a34c:	e8740b40 	lwi	r3, r20, 2880
2003a350:	e8630000 	lwi	r3, r3, 0
2003a354:	e8830004 	lwi	r4, r3, 4
2003a358:	b0000000 	imm	0
2003a35c:	e8740b4c 	lwi	r3, r20, 2892
2003a360:	e8a30000 	lwi	r5, r3, 0
2003a364:	e873001c 	lwi	r3, r19, 28
2003a368:	10651800 	addk	r3, r5, r3
2003a36c:	a46301ff 	andi	r3, r3, 511
2003a370:	10631800 	addk	r3, r3, r3
2003a374:	10641800 	addk	r3, r4, r3
2003a378:	e4630000 	lhui	r3, r3, 0
2003a37c:	f473002e 	shi	r3, r19, 46
			tokens_AC[(index_AC + (i - 1)) % SIZE_AC] = tmp_IN0;
2003a380:	b0000000 	imm	0
2003a384:	e8740b44 	lwi	r3, r20, 2884
2003a388:	e8630000 	lwi	r3, r3, 0
2003a38c:	e8830004 	lwi	r4, r3, 4
2003a390:	e8b3001c 	lwi	r5, r19, 28
2003a394:	b0000000 	imm	0
2003a398:	e8740b5c 	lwi	r3, r20, 2908
2003a39c:	e8630000 	lwi	r3, r3, 0
2003a3a0:	10651800 	addk	r3, r5, r3
2003a3a4:	3063ffff 	addik	r3, r3, -1
2003a3a8:	a46301ff 	andi	r3, r3, 511
2003a3ac:	10631800 	addk	r3, r3, r3
2003a3b0:	10641800 	addk	r3, r4, r3
2003a3b4:	e493002e 	lhui	r4, r19, 46
2003a3b8:	f4830000 	shi	r4, r3, 0
			i = i + 1;
2003a3bc:	e873001c 	lwi	r3, r19, 28
2003a3c0:	30630001 	addik	r3, r3, 1
2003a3c4:	f873001c 	swi	r3, r19, 28
		i16 tmp_IN0;
	
		tmp_IN = tokens_IN[(index_IN + (0)) % SIZE_IN];
		tokens_DC[(index_DC + (0)) % SIZE_DC] = tmp_IN;
		i = 1;
		while (i <= 63) {
2003a3c8:	e893001c 	lwi	r4, r19, 28
2003a3cc:	3060003f 	addik	r3, r0, 63
2003a3d0:	16441801 	cmp	r18, r4, r3
2003a3d4:	bcb2ff74 	bgei	r18, -140		// 2003a348
			tokens_AC[(index_AC + (i - 1)) % SIZE_AC] = tmp_IN0;
			i = i + 1;
		}
	
		// Update ports indexes
		index_IN += 64;
2003a3d8:	b0000000 	imm	0
2003a3dc:	e8740b4c 	lwi	r3, r20, 2892
2003a3e0:	e8630000 	lwi	r3, r3, 0
2003a3e4:	30830040 	addik	r4, r3, 64
2003a3e8:	b0000000 	imm	0
2003a3ec:	e8740b4c 	lwi	r3, r20, 2892
2003a3f0:	f8830000 	swi	r4, r3, 0
		index_DC += 1;
2003a3f4:	b0000000 	imm	0
2003a3f8:	e8740b54 	lwi	r3, r20, 2900
2003a3fc:	e8630000 	lwi	r3, r3, 0
2003a400:	30830001 	addik	r4, r3, 1
2003a404:	b0000000 	imm	0
2003a408:	e8740b54 	lwi	r3, r20, 2900
2003a40c:	f8830000 	swi	r4, r3, 0
		index_AC += 63;
2003a410:	b0000000 	imm	0
2003a414:	e8740b5c 	lwi	r3, r20, 2908
2003a418:	e8630000 	lwi	r3, r3, 0
2003a41c:	3083003f 	addik	r4, r3, 63
2003a420:	b0000000 	imm	0
2003a424:	e8740b5c 	lwi	r3, r20, 2908
2003a428:	f8830000 	swi	r4, r3, 0
		
		read_end_IN();
2003a42c:	b0000000 	imm	0
2003a430:	e8740b6c 	lwi	r3, r20, 2924
2003a434:	99fc1800 	brald	r15, r3
2003a438:	80000000 	or	r0, r0, r0
		write_end_DC();
2003a43c:	b0000000 	imm	0
2003a440:	e8740b74 	lwi	r3, r20, 2932
2003a444:	99fc1800 	brald	r15, r3
2003a448:	80000000 	or	r0, r0, r0
		write_end_AC();
2003a44c:	b0000000 	imm	0
2003a450:	e8740b7c 	lwi	r3, r20, 2940
2003a454:	99fc1800 	brald	r15, r3
2003a458:	80000000 	or	r0, r0, r0
	}
2003a45c:	e9e10000 	lwi	r15, r1, 0
2003a460:	10330000 	addk	r1, r19, r0
2003a464:	ea610030 	lwi	r19, r1, 48
2003a468:	ea810034 	lwi	r20, r1, 52
2003a46c:	30210038 	addik	r1, r1, 56
2003a470:	b60f0008 	rtsd	r15, 8
2003a474:	80000000 	or	r0, r0, r0

2003a478 <decoder_texture_DCsplit_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_texture_DCsplit_initialize() {
2003a478:	3021fff0 	addik	r1, r1, -16
2003a47c:	fa610008 	swi	r19, r1, 8
2003a480:	fa81000c 	swi	r20, r1, 12
2003a484:	12610000 	addk	r19, r1, r0
2003a488:	96808000 	mfs	r20, rpc
2003a48c:	b000dffc 	imm	-8196
2003a490:	329474d4 	addik	r20, r20, 29908
		int i = 0;
2003a494:	f8130004 	swi	r0, r19, 4
		
	finished:
		// no read_end/write_end here!
		return;
2003a498:	80000000 	or	r0, r0, r0
	}
2003a49c:	10330000 	addk	r1, r19, r0
2003a4a0:	ea610008 	lwi	r19, r1, 8
2003a4a4:	ea81000c 	lwi	r20, r1, 12
2003a4a8:	30210010 	addik	r1, r1, 16
2003a4ac:	b60f0008 	rtsd	r15, 8
2003a4b0:	80000000 	or	r0, r0, r0

2003a4b4 <decoder_texture_DCsplit_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	int decoder_texture_DCsplit_scheduler() {
2003a4b4:	3021ffd4 	addik	r1, r1, -44
2003a4b8:	f9e10000 	swi	r15, r1, 0
2003a4bc:	fa610024 	swi	r19, r1, 36
2003a4c0:	fa810028 	swi	r20, r1, 40
2003a4c4:	12610000 	addk	r19, r1, r0
2003a4c8:	96808000 	mfs	r20, rpc
2003a4cc:	b000dffc 	imm	-8196
2003a4d0:	32947494 	addik	r20, r20, 29844
		int i = 0;
2003a4d4:	f813001c 	swi	r0, r19, 28
		if(needInit){
2003a4d8:	b0000000 	imm	0
2003a4dc:	e8740b64 	lwi	r3, r20, 2916
2003a4e0:	e0630000 	lbui	r3, r3, 0
2003a4e4:	bc03001c 	beqi	r3, 28		// 2003a500
			decoder_texture_DCsplit_initialize();
2003a4e8:	b000ffff 	imm	-1
2003a4ec:	b9f4ff8c 	brlid	r15, -116	// 2003a478 <decoder_texture_DCsplit_initialize>
2003a4f0:	80000000 	or	r0, r0, r0
			needInit = 0;
2003a4f4:	b0000000 	imm	0
2003a4f8:	e8740b64 	lwi	r3, r20, 2916
2003a4fc:	f0030000 	sbi	r0, r3, 0
		}
		read_IN();
2003a500:	b0000000 	imm	0
2003a504:	e8740b68 	lwi	r3, r20, 2920
2003a508:	99fc1800 	brald	r15, r3
2003a50c:	80000000 	or	r0, r0, r0
		write_DC();
2003a510:	b0000000 	imm	0
2003a514:	e8940b70 	lwi	r4, r20, 2928
2003a518:	99fc2000 	brald	r15, r4
2003a51c:	80000000 	or	r0, r0, r0
		write_AC();
2003a520:	b0000000 	imm	0
2003a524:	e8740b78 	lwi	r3, r20, 2936
2003a528:	99fc1800 	brald	r15, r3
2003a52c:	80000000 	or	r0, r0, r0
		
	
	
		while (1) {
			// Action loop
			if (numTokens_IN - index_IN >= 64 && isSchedulable_untagged_0()) {
2003a530:	b0000000 	imm	0
2003a534:	e8740b50 	lwi	r3, r20, 2896
2003a538:	e8830000 	lwi	r4, r3, 0
2003a53c:	b0000000 	imm	0
2003a540:	e8740b4c 	lwi	r3, r20, 2892
2003a544:	e8630000 	lwi	r3, r3, 0
2003a548:	14832000 	rsubk	r4, r3, r4
2003a54c:	3060003f 	addik	r3, r0, 63
2003a550:	16441803 	cmpu	r18, r4, r3
2003a554:	bcb200b8 	bgei	r18, 184		// 2003a60c
2003a558:	b0000000 	imm	0
2003a55c:	e8940b80 	lwi	r4, r20, 2944
2003a560:	99fc2000 	brald	r15, r4
2003a564:	80000000 	or	r0, r0, r0
2003a568:	bc0300a4 	beqi	r3, 164		// 2003a60c
				int stop = 0;
2003a56c:	f8130020 	swi	r0, r19, 32
				if (1 > SIZE_DC - index_DC + decoder_texture_DCsplit_DC->read_inds[0]) {
2003a570:	b0000000 	imm	0
2003a574:	e8740b48 	lwi	r3, r20, 2888
2003a578:	e8630000 	lwi	r3, r3, 0
2003a57c:	e863000c 	lwi	r3, r3, 12
2003a580:	e8830000 	lwi	r4, r3, 0
2003a584:	b0000000 	imm	0
2003a588:	e8740b54 	lwi	r3, r20, 2900
2003a58c:	e8630000 	lwi	r3, r3, 0
2003a590:	14632000 	rsubk	r3, r3, r4
2003a594:	a863fe00 	xori	r3, r3, -512
2003a598:	bc23000c 	bnei	r3, 12		// 2003a5a4
					stop = 1;
2003a59c:	30600001 	addik	r3, r0, 1
2003a5a0:	f8730020 	swi	r3, r19, 32
				}
				if (63 > SIZE_AC - index_AC + decoder_texture_DCsplit_AC->read_inds[0]) {
2003a5a4:	b0000000 	imm	0
2003a5a8:	e8740b44 	lwi	r3, r20, 2884
2003a5ac:	e8630000 	lwi	r3, r3, 0
2003a5b0:	e863000c 	lwi	r3, r3, 12
2003a5b4:	e8830000 	lwi	r4, r3, 0
2003a5b8:	b0000000 	imm	0
2003a5bc:	e8740b5c 	lwi	r3, r20, 2908
2003a5c0:	e8630000 	lwi	r3, r3, 0
2003a5c4:	14632000 	rsubk	r3, r3, r4
2003a5c8:	30830200 	addik	r4, r3, 512
2003a5cc:	3060003e 	addik	r3, r0, 62
2003a5d0:	16441803 	cmpu	r18, r4, r3
2003a5d4:	bc52000c 	blti	r18, 12		// 2003a5e0
					stop = 1;
2003a5d8:	30600001 	addik	r3, r0, 1
2003a5dc:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
2003a5e0:	e8730020 	lwi	r3, r19, 32
2003a5e4:	bc030008 	beqi	r3, 8		// 2003a5ec
					goto finished;
2003a5e8:	b8000024 	bri	36		// 2003a60c
				}
				untagged_0();
2003a5ec:	b0000000 	imm	0
2003a5f0:	e8740b84 	lwi	r3, r20, 2948
2003a5f4:	99fc1800 	brald	r15, r3
2003a5f8:	80000000 	or	r0, r0, r0
				i++;
2003a5fc:	e873001c 	lwi	r3, r19, 28
2003a600:	30630001 	addik	r3, r3, 1
2003a604:	f873001c 	swi	r3, r19, 28
			} else {
				goto finished;
			}
		}
2003a608:	b800ff28 	bri	-216		// 2003a530
		
	finished:
	
		read_end_IN();
2003a60c:	b0000000 	imm	0
2003a610:	e8940b6c 	lwi	r4, r20, 2924
2003a614:	99fc2000 	brald	r15, r4
2003a618:	80000000 	or	r0, r0, r0
		write_end_DC();
2003a61c:	b0000000 	imm	0
2003a620:	e8740b74 	lwi	r3, r20, 2932
2003a624:	99fc1800 	brald	r15, r3
2003a628:	80000000 	or	r0, r0, r0
		write_end_AC();
2003a62c:	b0000000 	imm	0
2003a630:	e8940b7c 	lwi	r4, r20, 2940
2003a634:	99fc2000 	brald	r15, r4
2003a638:	80000000 	or	r0, r0, r0
		
		
		return i;
2003a63c:	e873001c 	lwi	r3, r19, 28
	}
2003a640:	e9e10000 	lwi	r15, r1, 0
2003a644:	10330000 	addk	r1, r19, r0
2003a648:	ea610024 	lwi	r19, r1, 36
2003a64c:	ea810028 	lwi	r20, r1, 40
2003a650:	3021002c 	addik	r1, r1, 44
2003a654:	b60f0008 	rtsd	r15, 8
2003a658:	80000000 	or	r0, r0, r0

2003a65c <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003a65c:	3021fff4 	addik	r1, r1, -12
2003a660:	fa610004 	swi	r19, r1, 4
2003a664:	fa810008 	swi	r20, r1, 8
2003a668:	12610000 	addk	r19, r1, r0
2003a66c:	96808000 	mfs	r20, rpc
2003a670:	b000dffc 	imm	-8196
2003a674:	329472f0 	addik	r20, r20, 29424
2003a678:	f8b30010 	swi	r5, r19, 16
2003a67c:	f8d30014 	swi	r6, r19, 20
2003a680:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003a684:	e8730010 	lwi	r3, r19, 16
2003a688:	e8630010 	lwi	r3, r3, 16
2003a68c:	e8830000 	lwi	r4, r3, 0
2003a690:	e8730010 	lwi	r3, r19, 16
2003a694:	e8a3000c 	lwi	r5, r3, 12
2003a698:	e8730014 	lwi	r3, r19, 20
2003a69c:	64630402 	bslli	r3, r3, 2
2003a6a0:	10651800 	addk	r3, r5, r3
2003a6a4:	e8630000 	lwi	r3, r3, 0
2003a6a8:	14a32000 	rsubk	r5, r3, r4
2003a6ac:	30600001 	addik	r3, r0, 1
2003a6b0:	e8930018 	lwi	r4, r19, 24
2003a6b4:	16442803 	cmpu	r18, r4, r5
2003a6b8:	bcb20008 	bgei	r18, 8		// 2003a6c0
2003a6bc:	10600000 	addk	r3, r0, r0
2003a6c0:	a46300ff 	andi	r3, r3, 255
}
2003a6c4:	10330000 	addk	r1, r19, r0
2003a6c8:	ea610004 	lwi	r19, r1, 4
2003a6cc:	ea810008 	lwi	r20, r1, 8
2003a6d0:	3021000c 	addik	r1, r1, 12
2003a6d4:	b60f0008 	rtsd	r15, 8
2003a6d8:	80000000 	or	r0, r0, r0

2003a6dc <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003a6dc:	3021fff4 	addik	r1, r1, -12
2003a6e0:	fa610004 	swi	r19, r1, 4
2003a6e4:	fa810008 	swi	r20, r1, 8
2003a6e8:	12610000 	addk	r19, r1, r0
2003a6ec:	96808000 	mfs	r20, rpc
2003a6f0:	b000dffc 	imm	-8196
2003a6f4:	32947270 	addik	r20, r20, 29296
2003a6f8:	f8b30010 	swi	r5, r19, 16
2003a6fc:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003a700:	e8730010 	lwi	r3, r19, 16
2003a704:	e8630010 	lwi	r3, r3, 16
2003a708:	e8830000 	lwi	r4, r3, 0
2003a70c:	e8730010 	lwi	r3, r19, 16
2003a710:	e8a3000c 	lwi	r5, r3, 12
2003a714:	e8730014 	lwi	r3, r19, 20
2003a718:	64630402 	bslli	r3, r3, 2
2003a71c:	10651800 	addk	r3, r5, r3
2003a720:	e8630000 	lwi	r3, r3, 0
2003a724:	14632000 	rsubk	r3, r3, r4
}
2003a728:	10330000 	addk	r1, r19, r0
2003a72c:	ea610004 	lwi	r19, r1, 4
2003a730:	ea810008 	lwi	r20, r1, 8
2003a734:	3021000c 	addik	r1, r1, 12
2003a738:	b60f0008 	rtsd	r15, 8
2003a73c:	80000000 	or	r0, r0, r0

2003a740 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003a740:	3021fff0 	addik	r1, r1, -16
2003a744:	fa610008 	swi	r19, r1, 8
2003a748:	fa81000c 	swi	r20, r1, 12
2003a74c:	12610000 	addk	r19, r1, r0
2003a750:	96808000 	mfs	r20, rpc
2003a754:	b000dffc 	imm	-8196
2003a758:	3294720c 	addik	r20, r20, 29196
2003a75c:	f8b30014 	swi	r5, r19, 20
2003a760:	f8d30018 	swi	r6, r19, 24
2003a764:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003a768:	f8130004 	swi	r0, r19, 4
2003a76c:	b800005c 	bri	92		// 2003a7c8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003a770:	e8730014 	lwi	r3, r19, 20
2003a774:	e8830000 	lwi	r4, r3, 0
2003a778:	e8730014 	lwi	r3, r19, 20
2003a77c:	e8a3000c 	lwi	r5, r3, 12
2003a780:	e8730004 	lwi	r3, r19, 4
2003a784:	64630402 	bslli	r3, r3, 2
2003a788:	10651800 	addk	r3, r5, r3
2003a78c:	e8a30000 	lwi	r5, r3, 0
2003a790:	e8730014 	lwi	r3, r19, 20
2003a794:	e8630010 	lwi	r3, r3, 16
2003a798:	e8630000 	lwi	r3, r3, 0
2003a79c:	14632800 	rsubk	r3, r3, r5
2003a7a0:	10641800 	addk	r3, r4, r3
2003a7a4:	30830001 	addik	r4, r3, 1
2003a7a8:	e873001c 	lwi	r3, r19, 28
2003a7ac:	16441803 	cmpu	r18, r4, r3
2003a7b0:	bc52000c 	blti	r18, 12		// 2003a7bc
            return 0;
2003a7b4:	10600000 	addk	r3, r0, r0
2003a7b8:	b8000024 	bri	36		// 2003a7dc
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003a7bc:	e8730004 	lwi	r3, r19, 4
2003a7c0:	30630001 	addik	r3, r3, 1
2003a7c4:	f8730004 	swi	r3, r19, 4
2003a7c8:	e8930004 	lwi	r4, r19, 4
2003a7cc:	e8730018 	lwi	r3, r19, 24
2003a7d0:	16432003 	cmpu	r18, r3, r4
2003a7d4:	bc52ff9c 	blti	r18, -100		// 2003a770
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003a7d8:	30600001 	addik	r3, r0, 1
}
2003a7dc:	10330000 	addk	r1, r19, r0
2003a7e0:	ea610008 	lwi	r19, r1, 8
2003a7e4:	ea81000c 	lwi	r20, r1, 12
2003a7e8:	30210010 	addik	r1, r1, 16
2003a7ec:	b60f0008 	rtsd	r15, 8
2003a7f0:	80000000 	or	r0, r0, r0

2003a7f4 <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003a7f4:	3021ffe8 	addik	r1, r1, -24
2003a7f8:	fa610010 	swi	r19, r1, 16
2003a7fc:	fa810014 	swi	r20, r1, 20
2003a800:	12610000 	addk	r19, r1, r0
2003a804:	96808000 	mfs	r20, rpc
2003a808:	b000dffc 	imm	-8196
2003a80c:	32947158 	addik	r20, r20, 29016
2003a810:	f8b3001c 	swi	r5, r19, 28
2003a814:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003a818:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003a81c:	f8130004 	swi	r0, r19, 4
2003a820:	b8000054 	bri	84		// 2003a874
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003a824:	e873001c 	lwi	r3, r19, 28
2003a828:	e8630010 	lwi	r3, r3, 16
2003a82c:	e8830000 	lwi	r4, r3, 0
2003a830:	e873001c 	lwi	r3, r19, 28
2003a834:	e8a3000c 	lwi	r5, r3, 12
2003a838:	e8730004 	lwi	r3, r19, 4
2003a83c:	64630402 	bslli	r3, r3, 2
2003a840:	10651800 	addk	r3, r5, r3
2003a844:	e8630000 	lwi	r3, r3, 0
2003a848:	14632000 	rsubk	r3, r3, r4
2003a84c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003a850:	e8930008 	lwi	r4, r19, 8
2003a854:	e873000c 	lwi	r3, r19, 12
2003a858:	16441803 	cmpu	r18, r4, r3
2003a85c:	bcb20008 	bgei	r18, 8		// 2003a864
2003a860:	10640000 	addk	r3, r4, r0
2003a864:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003a868:	e8730004 	lwi	r3, r19, 4
2003a86c:	30630001 	addik	r3, r3, 1
2003a870:	f8730004 	swi	r3, r19, 4
2003a874:	e8930004 	lwi	r4, r19, 4
2003a878:	e8730020 	lwi	r3, r19, 32
2003a87c:	16432003 	cmpu	r18, r3, r4
2003a880:	bc52ffa4 	blti	r18, -92		// 2003a824
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003a884:	e873001c 	lwi	r3, r19, 28
2003a888:	e8830000 	lwi	r4, r3, 0
2003a88c:	e8730008 	lwi	r3, r19, 8
2003a890:	14632000 	rsubk	r3, r3, r4
}
2003a894:	10330000 	addk	r1, r19, r0
2003a898:	ea610010 	lwi	r19, r1, 16
2003a89c:	ea810014 	lwi	r20, r1, 20
2003a8a0:	30210018 	addik	r1, r1, 24
2003a8a4:	b60f0008 	rtsd	r15, 8
2003a8a8:	80000000 	or	r0, r0, r0

2003a8ac <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003a8ac:	3021fff0 	addik	r1, r1, -16
2003a8b0:	fa610008 	swi	r19, r1, 8
2003a8b4:	fa81000c 	swi	r20, r1, 12
2003a8b8:	12610000 	addk	r19, r1, r0
2003a8bc:	96808000 	mfs	r20, rpc
2003a8c0:	b000dffc 	imm	-8196
2003a8c4:	329470a0 	addik	r20, r20, 28832
2003a8c8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2003a8cc:	e8730014 	lwi	r3, r19, 20
2003a8d0:	e8630010 	lwi	r3, r3, 16
2003a8d4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003a8d8:	f8130004 	swi	r0, r19, 4
2003a8dc:	b8000028 	bri	40		// 2003a904
        fifo->read_inds[i] = 0;
2003a8e0:	e8730014 	lwi	r3, r19, 20
2003a8e4:	e883000c 	lwi	r4, r3, 12
2003a8e8:	e8730004 	lwi	r3, r19, 4
2003a8ec:	64630402 	bslli	r3, r3, 2
2003a8f0:	10641800 	addk	r3, r4, r3
2003a8f4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003a8f8:	e8730004 	lwi	r3, r19, 4
2003a8fc:	30630001 	addik	r3, r3, 1
2003a900:	f8730004 	swi	r3, r19, 4
2003a904:	e8730014 	lwi	r3, r19, 20
2003a908:	e8830008 	lwi	r4, r3, 8
2003a90c:	e8730004 	lwi	r3, r19, 4
2003a910:	16441803 	cmpu	r18, r4, r3
2003a914:	bc52ffcc 	blti	r18, -52		// 2003a8e0
        fifo->read_inds[i] = 0;
    }
}
2003a918:	10330000 	addk	r1, r19, r0
2003a91c:	ea610008 	lwi	r19, r1, 8
2003a920:	ea81000c 	lwi	r20, r1, 12
2003a924:	30210010 	addik	r1, r1, 16
2003a928:	b60f0008 	rtsd	r15, 8
2003a92c:	80000000 	or	r0, r0, r0

2003a930 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003a930:	3021fff0 	addik	r1, r1, -16
2003a934:	fa610008 	swi	r19, r1, 8
2003a938:	fa81000c 	swi	r20, r1, 12
2003a93c:	12610000 	addk	r19, r1, r0
2003a940:	96808000 	mfs	r20, rpc
2003a944:	b000dffc 	imm	-8196
2003a948:	3294701c 	addik	r20, r20, 28700
2003a94c:	f8b30014 	swi	r5, r19, 20
2003a950:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003a954:	e8730014 	lwi	r3, r19, 20
2003a958:	e8830004 	lwi	r4, r3, 4
2003a95c:	e8730014 	lwi	r3, r19, 20
2003a960:	e8a3000c 	lwi	r5, r3, 12
2003a964:	e8730018 	lwi	r3, r19, 24
2003a968:	64630402 	bslli	r3, r3, 2
2003a96c:	10651800 	addk	r3, r5, r3
2003a970:	e8a30000 	lwi	r5, r3, 0
2003a974:	e8730014 	lwi	r3, r19, 20
2003a978:	e8630000 	lwi	r3, r3, 0
2003a97c:	3063ffff 	addik	r3, r3, -1
2003a980:	84651800 	and	r3, r5, r3
2003a984:	10641800 	addk	r3, r4, r3
2003a988:	e0630000 	lbui	r3, r3, 0
2003a98c:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003a990:	e8730014 	lwi	r3, r19, 20
2003a994:	e883000c 	lwi	r4, r3, 12
2003a998:	e8730018 	lwi	r3, r19, 24
2003a99c:	64630402 	bslli	r3, r3, 2
2003a9a0:	10641800 	addk	r3, r4, r3
2003a9a4:	e8830000 	lwi	r4, r3, 0
2003a9a8:	30840001 	addik	r4, r4, 1
2003a9ac:	f8830000 	swi	r4, r3, 0
    return value;
2003a9b0:	e0730004 	lbui	r3, r19, 4
2003a9b4:	90630060 	sext8	r3, r3
}
2003a9b8:	10330000 	addk	r1, r19, r0
2003a9bc:	ea610008 	lwi	r19, r1, 8
2003a9c0:	ea81000c 	lwi	r20, r1, 12
2003a9c4:	30210010 	addik	r1, r1, 16
2003a9c8:	b60f0008 	rtsd	r15, 8
2003a9cc:	80000000 	or	r0, r0, r0

2003a9d0 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003a9d0:	3021fff4 	addik	r1, r1, -12
2003a9d4:	fa610004 	swi	r19, r1, 4
2003a9d8:	fa810008 	swi	r20, r1, 8
2003a9dc:	12610000 	addk	r19, r1, r0
2003a9e0:	96808000 	mfs	r20, rpc
2003a9e4:	b000dffc 	imm	-8196
2003a9e8:	32946f7c 	addik	r20, r20, 28540
2003a9ec:	f8b30010 	swi	r5, r19, 16
2003a9f0:	10660000 	addk	r3, r6, r0
2003a9f4:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003a9f8:	e8730010 	lwi	r3, r19, 16
2003a9fc:	e8830004 	lwi	r4, r3, 4
2003aa00:	e8730010 	lwi	r3, r19, 16
2003aa04:	e8630010 	lwi	r3, r3, 16
2003aa08:	e8a30000 	lwi	r5, r3, 0
2003aa0c:	e8730010 	lwi	r3, r19, 16
2003aa10:	e8630000 	lwi	r3, r3, 0
2003aa14:	3063ffff 	addik	r3, r3, -1
2003aa18:	84651800 	and	r3, r5, r3
2003aa1c:	10641800 	addk	r3, r4, r3
2003aa20:	e0930014 	lbui	r4, r19, 20
2003aa24:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2003aa28:	e8730010 	lwi	r3, r19, 16
2003aa2c:	e8630010 	lwi	r3, r3, 16
2003aa30:	e8830000 	lwi	r4, r3, 0
2003aa34:	30840001 	addik	r4, r4, 1
2003aa38:	f8830000 	swi	r4, r3, 0
}
2003aa3c:	10330000 	addk	r1, r19, r0
2003aa40:	ea610004 	lwi	r19, r1, 4
2003aa44:	ea810008 	lwi	r20, r1, 8
2003aa48:	3021000c 	addik	r1, r1, 12
2003aa4c:	b60f0008 	rtsd	r15, 8
2003aa50:	80000000 	or	r0, r0, r0

2003aa54 <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003aa54:	3021fff4 	addik	r1, r1, -12
2003aa58:	fa610004 	swi	r19, r1, 4
2003aa5c:	fa810008 	swi	r20, r1, 8
2003aa60:	12610000 	addk	r19, r1, r0
2003aa64:	96808000 	mfs	r20, rpc
2003aa68:	b000dffc 	imm	-8196
2003aa6c:	32946ef8 	addik	r20, r20, 28408
2003aa70:	f8b30010 	swi	r5, r19, 16
2003aa74:	f8d30014 	swi	r6, r19, 20
2003aa78:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003aa7c:	e8730010 	lwi	r3, r19, 16
2003aa80:	e8630010 	lwi	r3, r3, 16
2003aa84:	e8830000 	lwi	r4, r3, 0
2003aa88:	e8730010 	lwi	r3, r19, 16
2003aa8c:	e8a3000c 	lwi	r5, r3, 12
2003aa90:	e8730014 	lwi	r3, r19, 20
2003aa94:	64630402 	bslli	r3, r3, 2
2003aa98:	10651800 	addk	r3, r5, r3
2003aa9c:	e8630000 	lwi	r3, r3, 0
2003aaa0:	14a32000 	rsubk	r5, r3, r4
2003aaa4:	30600001 	addik	r3, r0, 1
2003aaa8:	e8930018 	lwi	r4, r19, 24
2003aaac:	16442803 	cmpu	r18, r4, r5
2003aab0:	bcb20008 	bgei	r18, 8		// 2003aab8
2003aab4:	10600000 	addk	r3, r0, r0
2003aab8:	a46300ff 	andi	r3, r3, 255
}
2003aabc:	10330000 	addk	r1, r19, r0
2003aac0:	ea610004 	lwi	r19, r1, 4
2003aac4:	ea810008 	lwi	r20, r1, 8
2003aac8:	3021000c 	addik	r1, r1, 12
2003aacc:	b60f0008 	rtsd	r15, 8
2003aad0:	80000000 	or	r0, r0, r0

2003aad4 <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003aad4:	3021fff4 	addik	r1, r1, -12
2003aad8:	fa610004 	swi	r19, r1, 4
2003aadc:	fa810008 	swi	r20, r1, 8
2003aae0:	12610000 	addk	r19, r1, r0
2003aae4:	96808000 	mfs	r20, rpc
2003aae8:	b000dffc 	imm	-8196
2003aaec:	32946e78 	addik	r20, r20, 28280
2003aaf0:	f8b30010 	swi	r5, r19, 16
2003aaf4:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003aaf8:	e8730010 	lwi	r3, r19, 16
2003aafc:	e8630010 	lwi	r3, r3, 16
2003ab00:	e8830000 	lwi	r4, r3, 0
2003ab04:	e8730010 	lwi	r3, r19, 16
2003ab08:	e8a3000c 	lwi	r5, r3, 12
2003ab0c:	e8730014 	lwi	r3, r19, 20
2003ab10:	64630402 	bslli	r3, r3, 2
2003ab14:	10651800 	addk	r3, r5, r3
2003ab18:	e8630000 	lwi	r3, r3, 0
2003ab1c:	14632000 	rsubk	r3, r3, r4
}
2003ab20:	10330000 	addk	r1, r19, r0
2003ab24:	ea610004 	lwi	r19, r1, 4
2003ab28:	ea810008 	lwi	r20, r1, 8
2003ab2c:	3021000c 	addik	r1, r1, 12
2003ab30:	b60f0008 	rtsd	r15, 8
2003ab34:	80000000 	or	r0, r0, r0

2003ab38 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003ab38:	3021fff0 	addik	r1, r1, -16
2003ab3c:	fa610008 	swi	r19, r1, 8
2003ab40:	fa81000c 	swi	r20, r1, 12
2003ab44:	12610000 	addk	r19, r1, r0
2003ab48:	96808000 	mfs	r20, rpc
2003ab4c:	b000dffc 	imm	-8196
2003ab50:	32946e14 	addik	r20, r20, 28180
2003ab54:	f8b30014 	swi	r5, r19, 20
2003ab58:	f8d30018 	swi	r6, r19, 24
2003ab5c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003ab60:	f8130004 	swi	r0, r19, 4
2003ab64:	b800005c 	bri	92		// 2003abc0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003ab68:	e8730014 	lwi	r3, r19, 20
2003ab6c:	e8830000 	lwi	r4, r3, 0
2003ab70:	e8730014 	lwi	r3, r19, 20
2003ab74:	e8a3000c 	lwi	r5, r3, 12
2003ab78:	e8730004 	lwi	r3, r19, 4
2003ab7c:	64630402 	bslli	r3, r3, 2
2003ab80:	10651800 	addk	r3, r5, r3
2003ab84:	e8a30000 	lwi	r5, r3, 0
2003ab88:	e8730014 	lwi	r3, r19, 20
2003ab8c:	e8630010 	lwi	r3, r3, 16
2003ab90:	e8630000 	lwi	r3, r3, 0
2003ab94:	14632800 	rsubk	r3, r3, r5
2003ab98:	10641800 	addk	r3, r4, r3
2003ab9c:	30830001 	addik	r4, r3, 1
2003aba0:	e873001c 	lwi	r3, r19, 28
2003aba4:	16441803 	cmpu	r18, r4, r3
2003aba8:	bc52000c 	blti	r18, 12		// 2003abb4
            return 0;
2003abac:	10600000 	addk	r3, r0, r0
2003abb0:	b8000024 	bri	36		// 2003abd4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003abb4:	e8730004 	lwi	r3, r19, 4
2003abb8:	30630001 	addik	r3, r3, 1
2003abbc:	f8730004 	swi	r3, r19, 4
2003abc0:	e8930004 	lwi	r4, r19, 4
2003abc4:	e8730018 	lwi	r3, r19, 24
2003abc8:	16432003 	cmpu	r18, r3, r4
2003abcc:	bc52ff9c 	blti	r18, -100		// 2003ab68
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003abd0:	30600001 	addik	r3, r0, 1
}
2003abd4:	10330000 	addk	r1, r19, r0
2003abd8:	ea610008 	lwi	r19, r1, 8
2003abdc:	ea81000c 	lwi	r20, r1, 12
2003abe0:	30210010 	addik	r1, r1, 16
2003abe4:	b60f0008 	rtsd	r15, 8
2003abe8:	80000000 	or	r0, r0, r0

2003abec <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003abec:	3021ffe8 	addik	r1, r1, -24
2003abf0:	fa610010 	swi	r19, r1, 16
2003abf4:	fa810014 	swi	r20, r1, 20
2003abf8:	12610000 	addk	r19, r1, r0
2003abfc:	96808000 	mfs	r20, rpc
2003ac00:	b000dffc 	imm	-8196
2003ac04:	32946d60 	addik	r20, r20, 28000
2003ac08:	f8b3001c 	swi	r5, r19, 28
2003ac0c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003ac10:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003ac14:	f8130004 	swi	r0, r19, 4
2003ac18:	b8000054 	bri	84		// 2003ac6c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003ac1c:	e873001c 	lwi	r3, r19, 28
2003ac20:	e8630010 	lwi	r3, r3, 16
2003ac24:	e8830000 	lwi	r4, r3, 0
2003ac28:	e873001c 	lwi	r3, r19, 28
2003ac2c:	e8a3000c 	lwi	r5, r3, 12
2003ac30:	e8730004 	lwi	r3, r19, 4
2003ac34:	64630402 	bslli	r3, r3, 2
2003ac38:	10651800 	addk	r3, r5, r3
2003ac3c:	e8630000 	lwi	r3, r3, 0
2003ac40:	14632000 	rsubk	r3, r3, r4
2003ac44:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003ac48:	e8930008 	lwi	r4, r19, 8
2003ac4c:	e873000c 	lwi	r3, r19, 12
2003ac50:	16441803 	cmpu	r18, r4, r3
2003ac54:	bcb20008 	bgei	r18, 8		// 2003ac5c
2003ac58:	10640000 	addk	r3, r4, r0
2003ac5c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003ac60:	e8730004 	lwi	r3, r19, 4
2003ac64:	30630001 	addik	r3, r3, 1
2003ac68:	f8730004 	swi	r3, r19, 4
2003ac6c:	e8930004 	lwi	r4, r19, 4
2003ac70:	e8730020 	lwi	r3, r19, 32
2003ac74:	16432003 	cmpu	r18, r3, r4
2003ac78:	bc52ffa4 	blti	r18, -92		// 2003ac1c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003ac7c:	e873001c 	lwi	r3, r19, 28
2003ac80:	e8830000 	lwi	r4, r3, 0
2003ac84:	e8730008 	lwi	r3, r19, 8
2003ac88:	14632000 	rsubk	r3, r3, r4
}
2003ac8c:	10330000 	addk	r1, r19, r0
2003ac90:	ea610010 	lwi	r19, r1, 16
2003ac94:	ea810014 	lwi	r20, r1, 20
2003ac98:	30210018 	addik	r1, r1, 24
2003ac9c:	b60f0008 	rtsd	r15, 8
2003aca0:	80000000 	or	r0, r0, r0

2003aca4 <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003aca4:	3021fff0 	addik	r1, r1, -16
2003aca8:	fa610008 	swi	r19, r1, 8
2003acac:	fa81000c 	swi	r20, r1, 12
2003acb0:	12610000 	addk	r19, r1, r0
2003acb4:	96808000 	mfs	r20, rpc
2003acb8:	b000dffc 	imm	-8196
2003acbc:	32946ca8 	addik	r20, r20, 27816
2003acc0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2003acc4:	e8730014 	lwi	r3, r19, 20
2003acc8:	e8630010 	lwi	r3, r3, 16
2003accc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003acd0:	f8130004 	swi	r0, r19, 4
2003acd4:	b8000028 	bri	40		// 2003acfc
        fifo->read_inds[i] = 0;
2003acd8:	e8730014 	lwi	r3, r19, 20
2003acdc:	e883000c 	lwi	r4, r3, 12
2003ace0:	e8730004 	lwi	r3, r19, 4
2003ace4:	64630402 	bslli	r3, r3, 2
2003ace8:	10641800 	addk	r3, r4, r3
2003acec:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003acf0:	e8730004 	lwi	r3, r19, 4
2003acf4:	30630001 	addik	r3, r3, 1
2003acf8:	f8730004 	swi	r3, r19, 4
2003acfc:	e8730014 	lwi	r3, r19, 20
2003ad00:	e8830008 	lwi	r4, r3, 8
2003ad04:	e8730004 	lwi	r3, r19, 4
2003ad08:	16441803 	cmpu	r18, r4, r3
2003ad0c:	bc52ffcc 	blti	r18, -52		// 2003acd8
        fifo->read_inds[i] = 0;
    }
}
2003ad10:	10330000 	addk	r1, r19, r0
2003ad14:	ea610008 	lwi	r19, r1, 8
2003ad18:	ea81000c 	lwi	r20, r1, 12
2003ad1c:	30210010 	addik	r1, r1, 16
2003ad20:	b60f0008 	rtsd	r15, 8
2003ad24:	80000000 	or	r0, r0, r0

2003ad28 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003ad28:	3021fff0 	addik	r1, r1, -16
2003ad2c:	fa610008 	swi	r19, r1, 8
2003ad30:	fa81000c 	swi	r20, r1, 12
2003ad34:	12610000 	addk	r19, r1, r0
2003ad38:	96808000 	mfs	r20, rpc
2003ad3c:	b000dffc 	imm	-8196
2003ad40:	32946c24 	addik	r20, r20, 27684
2003ad44:	f8b30014 	swi	r5, r19, 20
2003ad48:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003ad4c:	e8730014 	lwi	r3, r19, 20
2003ad50:	e8830004 	lwi	r4, r3, 4
2003ad54:	e8730014 	lwi	r3, r19, 20
2003ad58:	e8a3000c 	lwi	r5, r3, 12
2003ad5c:	e8730018 	lwi	r3, r19, 24
2003ad60:	64630402 	bslli	r3, r3, 2
2003ad64:	10651800 	addk	r3, r5, r3
2003ad68:	e8a30000 	lwi	r5, r3, 0
2003ad6c:	e8730014 	lwi	r3, r19, 20
2003ad70:	e8630000 	lwi	r3, r3, 0
2003ad74:	3063ffff 	addik	r3, r3, -1
2003ad78:	84651800 	and	r3, r5, r3
2003ad7c:	10631800 	addk	r3, r3, r3
2003ad80:	10641800 	addk	r3, r4, r3
2003ad84:	e4630000 	lhui	r3, r3, 0
2003ad88:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003ad8c:	e8730014 	lwi	r3, r19, 20
2003ad90:	e883000c 	lwi	r4, r3, 12
2003ad94:	e8730018 	lwi	r3, r19, 24
2003ad98:	64630402 	bslli	r3, r3, 2
2003ad9c:	10641800 	addk	r3, r4, r3
2003ada0:	e8830000 	lwi	r4, r3, 0
2003ada4:	30840001 	addik	r4, r4, 1
2003ada8:	f8830000 	swi	r4, r3, 0
    return value;
2003adac:	e4730004 	lhui	r3, r19, 4
2003adb0:	90630061 	sext16	r3, r3
}
2003adb4:	10330000 	addk	r1, r19, r0
2003adb8:	ea610008 	lwi	r19, r1, 8
2003adbc:	ea81000c 	lwi	r20, r1, 12
2003adc0:	30210010 	addik	r1, r1, 16
2003adc4:	b60f0008 	rtsd	r15, 8
2003adc8:	80000000 	or	r0, r0, r0

2003adcc <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003adcc:	3021fff4 	addik	r1, r1, -12
2003add0:	fa610004 	swi	r19, r1, 4
2003add4:	fa810008 	swi	r20, r1, 8
2003add8:	12610000 	addk	r19, r1, r0
2003addc:	96808000 	mfs	r20, rpc
2003ade0:	b000dffc 	imm	-8196
2003ade4:	32946b80 	addik	r20, r20, 27520
2003ade8:	f8b30010 	swi	r5, r19, 16
2003adec:	10660000 	addk	r3, r6, r0
2003adf0:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003adf4:	e8730010 	lwi	r3, r19, 16
2003adf8:	e8830004 	lwi	r4, r3, 4
2003adfc:	e8730010 	lwi	r3, r19, 16
2003ae00:	e8630010 	lwi	r3, r3, 16
2003ae04:	e8a30000 	lwi	r5, r3, 0
2003ae08:	e8730010 	lwi	r3, r19, 16
2003ae0c:	e8630000 	lwi	r3, r3, 0
2003ae10:	3063ffff 	addik	r3, r3, -1
2003ae14:	84651800 	and	r3, r5, r3
2003ae18:	10631800 	addk	r3, r3, r3
2003ae1c:	10641800 	addk	r3, r4, r3
2003ae20:	e4930014 	lhui	r4, r19, 20
2003ae24:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2003ae28:	e8730010 	lwi	r3, r19, 16
2003ae2c:	e8630010 	lwi	r3, r3, 16
2003ae30:	e8830000 	lwi	r4, r3, 0
2003ae34:	30840001 	addik	r4, r4, 1
2003ae38:	f8830000 	swi	r4, r3, 0
}
2003ae3c:	10330000 	addk	r1, r19, r0
2003ae40:	ea610004 	lwi	r19, r1, 4
2003ae44:	ea810008 	lwi	r20, r1, 8
2003ae48:	3021000c 	addik	r1, r1, 12
2003ae4c:	b60f0008 	rtsd	r15, 8
2003ae50:	80000000 	or	r0, r0, r0

2003ae54 <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003ae54:	3021fff4 	addik	r1, r1, -12
2003ae58:	fa610004 	swi	r19, r1, 4
2003ae5c:	fa810008 	swi	r20, r1, 8
2003ae60:	12610000 	addk	r19, r1, r0
2003ae64:	96808000 	mfs	r20, rpc
2003ae68:	b000dffc 	imm	-8196
2003ae6c:	32946af8 	addik	r20, r20, 27384
2003ae70:	f8b30010 	swi	r5, r19, 16
2003ae74:	f8d30014 	swi	r6, r19, 20
2003ae78:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003ae7c:	e8730010 	lwi	r3, r19, 16
2003ae80:	e8630010 	lwi	r3, r3, 16
2003ae84:	e8830000 	lwi	r4, r3, 0
2003ae88:	e8730010 	lwi	r3, r19, 16
2003ae8c:	e8a3000c 	lwi	r5, r3, 12
2003ae90:	e8730014 	lwi	r3, r19, 20
2003ae94:	64630402 	bslli	r3, r3, 2
2003ae98:	10651800 	addk	r3, r5, r3
2003ae9c:	e8630000 	lwi	r3, r3, 0
2003aea0:	14a32000 	rsubk	r5, r3, r4
2003aea4:	30600001 	addik	r3, r0, 1
2003aea8:	e8930018 	lwi	r4, r19, 24
2003aeac:	16442803 	cmpu	r18, r4, r5
2003aeb0:	bcb20008 	bgei	r18, 8		// 2003aeb8
2003aeb4:	10600000 	addk	r3, r0, r0
2003aeb8:	a46300ff 	andi	r3, r3, 255
}
2003aebc:	10330000 	addk	r1, r19, r0
2003aec0:	ea610004 	lwi	r19, r1, 4
2003aec4:	ea810008 	lwi	r20, r1, 8
2003aec8:	3021000c 	addik	r1, r1, 12
2003aecc:	b60f0008 	rtsd	r15, 8
2003aed0:	80000000 	or	r0, r0, r0

2003aed4 <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003aed4:	3021fff4 	addik	r1, r1, -12
2003aed8:	fa610004 	swi	r19, r1, 4
2003aedc:	fa810008 	swi	r20, r1, 8
2003aee0:	12610000 	addk	r19, r1, r0
2003aee4:	96808000 	mfs	r20, rpc
2003aee8:	b000dffc 	imm	-8196
2003aeec:	32946a78 	addik	r20, r20, 27256
2003aef0:	f8b30010 	swi	r5, r19, 16
2003aef4:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003aef8:	e8730010 	lwi	r3, r19, 16
2003aefc:	e8630010 	lwi	r3, r3, 16
2003af00:	e8830000 	lwi	r4, r3, 0
2003af04:	e8730010 	lwi	r3, r19, 16
2003af08:	e8a3000c 	lwi	r5, r3, 12
2003af0c:	e8730014 	lwi	r3, r19, 20
2003af10:	64630402 	bslli	r3, r3, 2
2003af14:	10651800 	addk	r3, r5, r3
2003af18:	e8630000 	lwi	r3, r3, 0
2003af1c:	14632000 	rsubk	r3, r3, r4
}
2003af20:	10330000 	addk	r1, r19, r0
2003af24:	ea610004 	lwi	r19, r1, 4
2003af28:	ea810008 	lwi	r20, r1, 8
2003af2c:	3021000c 	addik	r1, r1, 12
2003af30:	b60f0008 	rtsd	r15, 8
2003af34:	80000000 	or	r0, r0, r0

2003af38 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003af38:	3021fff0 	addik	r1, r1, -16
2003af3c:	fa610008 	swi	r19, r1, 8
2003af40:	fa81000c 	swi	r20, r1, 12
2003af44:	12610000 	addk	r19, r1, r0
2003af48:	96808000 	mfs	r20, rpc
2003af4c:	b000dffc 	imm	-8196
2003af50:	32946a14 	addik	r20, r20, 27156
2003af54:	f8b30014 	swi	r5, r19, 20
2003af58:	f8d30018 	swi	r6, r19, 24
2003af5c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003af60:	f8130004 	swi	r0, r19, 4
2003af64:	b800005c 	bri	92		// 2003afc0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003af68:	e8730014 	lwi	r3, r19, 20
2003af6c:	e8830000 	lwi	r4, r3, 0
2003af70:	e8730014 	lwi	r3, r19, 20
2003af74:	e8a3000c 	lwi	r5, r3, 12
2003af78:	e8730004 	lwi	r3, r19, 4
2003af7c:	64630402 	bslli	r3, r3, 2
2003af80:	10651800 	addk	r3, r5, r3
2003af84:	e8a30000 	lwi	r5, r3, 0
2003af88:	e8730014 	lwi	r3, r19, 20
2003af8c:	e8630010 	lwi	r3, r3, 16
2003af90:	e8630000 	lwi	r3, r3, 0
2003af94:	14632800 	rsubk	r3, r3, r5
2003af98:	10641800 	addk	r3, r4, r3
2003af9c:	30830001 	addik	r4, r3, 1
2003afa0:	e873001c 	lwi	r3, r19, 28
2003afa4:	16441803 	cmpu	r18, r4, r3
2003afa8:	bc52000c 	blti	r18, 12		// 2003afb4
            return 0;
2003afac:	10600000 	addk	r3, r0, r0
2003afb0:	b8000024 	bri	36		// 2003afd4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003afb4:	e8730004 	lwi	r3, r19, 4
2003afb8:	30630001 	addik	r3, r3, 1
2003afbc:	f8730004 	swi	r3, r19, 4
2003afc0:	e8930004 	lwi	r4, r19, 4
2003afc4:	e8730018 	lwi	r3, r19, 24
2003afc8:	16432003 	cmpu	r18, r3, r4
2003afcc:	bc52ff9c 	blti	r18, -100		// 2003af68
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003afd0:	30600001 	addik	r3, r0, 1
}
2003afd4:	10330000 	addk	r1, r19, r0
2003afd8:	ea610008 	lwi	r19, r1, 8
2003afdc:	ea81000c 	lwi	r20, r1, 12
2003afe0:	30210010 	addik	r1, r1, 16
2003afe4:	b60f0008 	rtsd	r15, 8
2003afe8:	80000000 	or	r0, r0, r0

2003afec <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003afec:	3021ffe8 	addik	r1, r1, -24
2003aff0:	fa610010 	swi	r19, r1, 16
2003aff4:	fa810014 	swi	r20, r1, 20
2003aff8:	12610000 	addk	r19, r1, r0
2003affc:	96808000 	mfs	r20, rpc
2003b000:	b000dffc 	imm	-8196
2003b004:	32946960 	addik	r20, r20, 26976
2003b008:	f8b3001c 	swi	r5, r19, 28
2003b00c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003b010:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003b014:	f8130004 	swi	r0, r19, 4
2003b018:	b8000054 	bri	84		// 2003b06c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003b01c:	e873001c 	lwi	r3, r19, 28
2003b020:	e8630010 	lwi	r3, r3, 16
2003b024:	e8830000 	lwi	r4, r3, 0
2003b028:	e873001c 	lwi	r3, r19, 28
2003b02c:	e8a3000c 	lwi	r5, r3, 12
2003b030:	e8730004 	lwi	r3, r19, 4
2003b034:	64630402 	bslli	r3, r3, 2
2003b038:	10651800 	addk	r3, r5, r3
2003b03c:	e8630000 	lwi	r3, r3, 0
2003b040:	14632000 	rsubk	r3, r3, r4
2003b044:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003b048:	e8930008 	lwi	r4, r19, 8
2003b04c:	e873000c 	lwi	r3, r19, 12
2003b050:	16441803 	cmpu	r18, r4, r3
2003b054:	bcb20008 	bgei	r18, 8		// 2003b05c
2003b058:	10640000 	addk	r3, r4, r0
2003b05c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003b060:	e8730004 	lwi	r3, r19, 4
2003b064:	30630001 	addik	r3, r3, 1
2003b068:	f8730004 	swi	r3, r19, 4
2003b06c:	e8930004 	lwi	r4, r19, 4
2003b070:	e8730020 	lwi	r3, r19, 32
2003b074:	16432003 	cmpu	r18, r3, r4
2003b078:	bc52ffa4 	blti	r18, -92		// 2003b01c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003b07c:	e873001c 	lwi	r3, r19, 28
2003b080:	e8830000 	lwi	r4, r3, 0
2003b084:	e8730008 	lwi	r3, r19, 8
2003b088:	14632000 	rsubk	r3, r3, r4
}
2003b08c:	10330000 	addk	r1, r19, r0
2003b090:	ea610010 	lwi	r19, r1, 16
2003b094:	ea810014 	lwi	r20, r1, 20
2003b098:	30210018 	addik	r1, r1, 24
2003b09c:	b60f0008 	rtsd	r15, 8
2003b0a0:	80000000 	or	r0, r0, r0

2003b0a4 <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003b0a4:	3021fff0 	addik	r1, r1, -16
2003b0a8:	fa610008 	swi	r19, r1, 8
2003b0ac:	fa81000c 	swi	r20, r1, 12
2003b0b0:	12610000 	addk	r19, r1, r0
2003b0b4:	96808000 	mfs	r20, rpc
2003b0b8:	b000dffc 	imm	-8196
2003b0bc:	329468a8 	addik	r20, r20, 26792
2003b0c0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2003b0c4:	e8730014 	lwi	r3, r19, 20
2003b0c8:	e8630010 	lwi	r3, r3, 16
2003b0cc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003b0d0:	f8130004 	swi	r0, r19, 4
2003b0d4:	b8000028 	bri	40		// 2003b0fc
        fifo->read_inds[i] = 0;
2003b0d8:	e8730014 	lwi	r3, r19, 20
2003b0dc:	e883000c 	lwi	r4, r3, 12
2003b0e0:	e8730004 	lwi	r3, r19, 4
2003b0e4:	64630402 	bslli	r3, r3, 2
2003b0e8:	10641800 	addk	r3, r4, r3
2003b0ec:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003b0f0:	e8730004 	lwi	r3, r19, 4
2003b0f4:	30630001 	addik	r3, r3, 1
2003b0f8:	f8730004 	swi	r3, r19, 4
2003b0fc:	e8730014 	lwi	r3, r19, 20
2003b100:	e8830008 	lwi	r4, r3, 8
2003b104:	e8730004 	lwi	r3, r19, 4
2003b108:	16441803 	cmpu	r18, r4, r3
2003b10c:	bc52ffcc 	blti	r18, -52		// 2003b0d8
        fifo->read_inds[i] = 0;
    }
}
2003b110:	10330000 	addk	r1, r19, r0
2003b114:	ea610008 	lwi	r19, r1, 8
2003b118:	ea81000c 	lwi	r20, r1, 12
2003b11c:	30210010 	addik	r1, r1, 16
2003b120:	b60f0008 	rtsd	r15, 8
2003b124:	80000000 	or	r0, r0, r0

2003b128 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003b128:	3021fff0 	addik	r1, r1, -16
2003b12c:	fa610008 	swi	r19, r1, 8
2003b130:	fa81000c 	swi	r20, r1, 12
2003b134:	12610000 	addk	r19, r1, r0
2003b138:	96808000 	mfs	r20, rpc
2003b13c:	b000dffc 	imm	-8196
2003b140:	32946824 	addik	r20, r20, 26660
2003b144:	f8b30014 	swi	r5, r19, 20
2003b148:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003b14c:	e8730014 	lwi	r3, r19, 20
2003b150:	e8830004 	lwi	r4, r3, 4
2003b154:	e8730014 	lwi	r3, r19, 20
2003b158:	e8a3000c 	lwi	r5, r3, 12
2003b15c:	e8730018 	lwi	r3, r19, 24
2003b160:	64630402 	bslli	r3, r3, 2
2003b164:	10651800 	addk	r3, r5, r3
2003b168:	e8a30000 	lwi	r5, r3, 0
2003b16c:	e8730014 	lwi	r3, r19, 20
2003b170:	e8630000 	lwi	r3, r3, 0
2003b174:	3063ffff 	addik	r3, r3, -1
2003b178:	84651800 	and	r3, r5, r3
2003b17c:	64630402 	bslli	r3, r3, 2
2003b180:	10641800 	addk	r3, r4, r3
2003b184:	e8630000 	lwi	r3, r3, 0
2003b188:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003b18c:	e8730014 	lwi	r3, r19, 20
2003b190:	e883000c 	lwi	r4, r3, 12
2003b194:	e8730018 	lwi	r3, r19, 24
2003b198:	64630402 	bslli	r3, r3, 2
2003b19c:	10641800 	addk	r3, r4, r3
2003b1a0:	e8830000 	lwi	r4, r3, 0
2003b1a4:	30840001 	addik	r4, r4, 1
2003b1a8:	f8830000 	swi	r4, r3, 0
    return value;
2003b1ac:	e8730004 	lwi	r3, r19, 4
}
2003b1b0:	10330000 	addk	r1, r19, r0
2003b1b4:	ea610008 	lwi	r19, r1, 8
2003b1b8:	ea81000c 	lwi	r20, r1, 12
2003b1bc:	30210010 	addik	r1, r1, 16
2003b1c0:	b60f0008 	rtsd	r15, 8
2003b1c4:	80000000 	or	r0, r0, r0

2003b1c8 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003b1c8:	3021fff4 	addik	r1, r1, -12
2003b1cc:	fa610004 	swi	r19, r1, 4
2003b1d0:	fa810008 	swi	r20, r1, 8
2003b1d4:	12610000 	addk	r19, r1, r0
2003b1d8:	96808000 	mfs	r20, rpc
2003b1dc:	b000dffc 	imm	-8196
2003b1e0:	32946784 	addik	r20, r20, 26500
2003b1e4:	f8b30010 	swi	r5, r19, 16
2003b1e8:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003b1ec:	e8730010 	lwi	r3, r19, 16
2003b1f0:	e8830004 	lwi	r4, r3, 4
2003b1f4:	e8730010 	lwi	r3, r19, 16
2003b1f8:	e8630010 	lwi	r3, r3, 16
2003b1fc:	e8a30000 	lwi	r5, r3, 0
2003b200:	e8730010 	lwi	r3, r19, 16
2003b204:	e8630000 	lwi	r3, r3, 0
2003b208:	3063ffff 	addik	r3, r3, -1
2003b20c:	84651800 	and	r3, r5, r3
2003b210:	64630402 	bslli	r3, r3, 2
2003b214:	10641800 	addk	r3, r4, r3
2003b218:	e8930014 	lwi	r4, r19, 20
2003b21c:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2003b220:	e8730010 	lwi	r3, r19, 16
2003b224:	e8630010 	lwi	r3, r3, 16
2003b228:	e8830000 	lwi	r4, r3, 0
2003b22c:	30840001 	addik	r4, r4, 1
2003b230:	f8830000 	swi	r4, r3, 0
}
2003b234:	10330000 	addk	r1, r19, r0
2003b238:	ea610004 	lwi	r19, r1, 4
2003b23c:	ea810008 	lwi	r20, r1, 8
2003b240:	3021000c 	addik	r1, r1, 12
2003b244:	b60f0008 	rtsd	r15, 8
2003b248:	80000000 	or	r0, r0, r0

2003b24c <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003b24c:	3021fff4 	addik	r1, r1, -12
2003b250:	fa610004 	swi	r19, r1, 4
2003b254:	fa810008 	swi	r20, r1, 8
2003b258:	12610000 	addk	r19, r1, r0
2003b25c:	96808000 	mfs	r20, rpc
2003b260:	b000dffc 	imm	-8196
2003b264:	32946700 	addik	r20, r20, 26368
2003b268:	f8b30010 	swi	r5, r19, 16
2003b26c:	f8d30014 	swi	r6, r19, 20
2003b270:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003b274:	e8730010 	lwi	r3, r19, 16
2003b278:	e8630010 	lwi	r3, r3, 16
2003b27c:	e8830000 	lwi	r4, r3, 0
2003b280:	e8730010 	lwi	r3, r19, 16
2003b284:	e8a3000c 	lwi	r5, r3, 12
2003b288:	e8730014 	lwi	r3, r19, 20
2003b28c:	64630402 	bslli	r3, r3, 2
2003b290:	10651800 	addk	r3, r5, r3
2003b294:	e8630000 	lwi	r3, r3, 0
2003b298:	14a32000 	rsubk	r5, r3, r4
2003b29c:	30600001 	addik	r3, r0, 1
2003b2a0:	e8930018 	lwi	r4, r19, 24
2003b2a4:	16442803 	cmpu	r18, r4, r5
2003b2a8:	bcb20008 	bgei	r18, 8		// 2003b2b0
2003b2ac:	10600000 	addk	r3, r0, r0
2003b2b0:	a46300ff 	andi	r3, r3, 255
}
2003b2b4:	10330000 	addk	r1, r19, r0
2003b2b8:	ea610004 	lwi	r19, r1, 4
2003b2bc:	ea810008 	lwi	r20, r1, 8
2003b2c0:	3021000c 	addik	r1, r1, 12
2003b2c4:	b60f0008 	rtsd	r15, 8
2003b2c8:	80000000 	or	r0, r0, r0

2003b2cc <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003b2cc:	3021fff4 	addik	r1, r1, -12
2003b2d0:	fa610004 	swi	r19, r1, 4
2003b2d4:	fa810008 	swi	r20, r1, 8
2003b2d8:	12610000 	addk	r19, r1, r0
2003b2dc:	96808000 	mfs	r20, rpc
2003b2e0:	b000dffc 	imm	-8196
2003b2e4:	32946680 	addik	r20, r20, 26240
2003b2e8:	f8b30010 	swi	r5, r19, 16
2003b2ec:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003b2f0:	e8730010 	lwi	r3, r19, 16
2003b2f4:	e8630010 	lwi	r3, r3, 16
2003b2f8:	e8830000 	lwi	r4, r3, 0
2003b2fc:	e8730010 	lwi	r3, r19, 16
2003b300:	e8a3000c 	lwi	r5, r3, 12
2003b304:	e8730014 	lwi	r3, r19, 20
2003b308:	64630402 	bslli	r3, r3, 2
2003b30c:	10651800 	addk	r3, r5, r3
2003b310:	e8630000 	lwi	r3, r3, 0
2003b314:	14632000 	rsubk	r3, r3, r4
}
2003b318:	10330000 	addk	r1, r19, r0
2003b31c:	ea610004 	lwi	r19, r1, 4
2003b320:	ea810008 	lwi	r20, r1, 8
2003b324:	3021000c 	addik	r1, r1, 12
2003b328:	b60f0008 	rtsd	r15, 8
2003b32c:	80000000 	or	r0, r0, r0

2003b330 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003b330:	3021fff0 	addik	r1, r1, -16
2003b334:	fa610008 	swi	r19, r1, 8
2003b338:	fa81000c 	swi	r20, r1, 12
2003b33c:	12610000 	addk	r19, r1, r0
2003b340:	96808000 	mfs	r20, rpc
2003b344:	b000dffc 	imm	-8196
2003b348:	3294661c 	addik	r20, r20, 26140
2003b34c:	f8b30014 	swi	r5, r19, 20
2003b350:	f8d30018 	swi	r6, r19, 24
2003b354:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003b358:	f8130004 	swi	r0, r19, 4
2003b35c:	b800005c 	bri	92		// 2003b3b8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003b360:	e8730014 	lwi	r3, r19, 20
2003b364:	e8830000 	lwi	r4, r3, 0
2003b368:	e8730014 	lwi	r3, r19, 20
2003b36c:	e8a3000c 	lwi	r5, r3, 12
2003b370:	e8730004 	lwi	r3, r19, 4
2003b374:	64630402 	bslli	r3, r3, 2
2003b378:	10651800 	addk	r3, r5, r3
2003b37c:	e8a30000 	lwi	r5, r3, 0
2003b380:	e8730014 	lwi	r3, r19, 20
2003b384:	e8630010 	lwi	r3, r3, 16
2003b388:	e8630000 	lwi	r3, r3, 0
2003b38c:	14632800 	rsubk	r3, r3, r5
2003b390:	10641800 	addk	r3, r4, r3
2003b394:	30830001 	addik	r4, r3, 1
2003b398:	e873001c 	lwi	r3, r19, 28
2003b39c:	16441803 	cmpu	r18, r4, r3
2003b3a0:	bc52000c 	blti	r18, 12		// 2003b3ac
            return 0;
2003b3a4:	10600000 	addk	r3, r0, r0
2003b3a8:	b8000024 	bri	36		// 2003b3cc
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003b3ac:	e8730004 	lwi	r3, r19, 4
2003b3b0:	30630001 	addik	r3, r3, 1
2003b3b4:	f8730004 	swi	r3, r19, 4
2003b3b8:	e8930004 	lwi	r4, r19, 4
2003b3bc:	e8730018 	lwi	r3, r19, 24
2003b3c0:	16432003 	cmpu	r18, r3, r4
2003b3c4:	bc52ff9c 	blti	r18, -100		// 2003b360
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003b3c8:	30600001 	addik	r3, r0, 1
}
2003b3cc:	10330000 	addk	r1, r19, r0
2003b3d0:	ea610008 	lwi	r19, r1, 8
2003b3d4:	ea81000c 	lwi	r20, r1, 12
2003b3d8:	30210010 	addik	r1, r1, 16
2003b3dc:	b60f0008 	rtsd	r15, 8
2003b3e0:	80000000 	or	r0, r0, r0

2003b3e4 <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003b3e4:	3021ffe8 	addik	r1, r1, -24
2003b3e8:	fa610010 	swi	r19, r1, 16
2003b3ec:	fa810014 	swi	r20, r1, 20
2003b3f0:	12610000 	addk	r19, r1, r0
2003b3f4:	96808000 	mfs	r20, rpc
2003b3f8:	b000dffc 	imm	-8196
2003b3fc:	32946568 	addik	r20, r20, 25960
2003b400:	f8b3001c 	swi	r5, r19, 28
2003b404:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003b408:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003b40c:	f8130004 	swi	r0, r19, 4
2003b410:	b8000054 	bri	84		// 2003b464
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003b414:	e873001c 	lwi	r3, r19, 28
2003b418:	e8630010 	lwi	r3, r3, 16
2003b41c:	e8830000 	lwi	r4, r3, 0
2003b420:	e873001c 	lwi	r3, r19, 28
2003b424:	e8a3000c 	lwi	r5, r3, 12
2003b428:	e8730004 	lwi	r3, r19, 4
2003b42c:	64630402 	bslli	r3, r3, 2
2003b430:	10651800 	addk	r3, r5, r3
2003b434:	e8630000 	lwi	r3, r3, 0
2003b438:	14632000 	rsubk	r3, r3, r4
2003b43c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003b440:	e8930008 	lwi	r4, r19, 8
2003b444:	e873000c 	lwi	r3, r19, 12
2003b448:	16441803 	cmpu	r18, r4, r3
2003b44c:	bcb20008 	bgei	r18, 8		// 2003b454
2003b450:	10640000 	addk	r3, r4, r0
2003b454:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003b458:	e8730004 	lwi	r3, r19, 4
2003b45c:	30630001 	addik	r3, r3, 1
2003b460:	f8730004 	swi	r3, r19, 4
2003b464:	e8930004 	lwi	r4, r19, 4
2003b468:	e8730020 	lwi	r3, r19, 32
2003b46c:	16432003 	cmpu	r18, r3, r4
2003b470:	bc52ffa4 	blti	r18, -92		// 2003b414
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003b474:	e873001c 	lwi	r3, r19, 28
2003b478:	e8830000 	lwi	r4, r3, 0
2003b47c:	e8730008 	lwi	r3, r19, 8
2003b480:	14632000 	rsubk	r3, r3, r4
}
2003b484:	10330000 	addk	r1, r19, r0
2003b488:	ea610010 	lwi	r19, r1, 16
2003b48c:	ea810014 	lwi	r20, r1, 20
2003b490:	30210018 	addik	r1, r1, 24
2003b494:	b60f0008 	rtsd	r15, 8
2003b498:	80000000 	or	r0, r0, r0

2003b49c <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003b49c:	3021fff0 	addik	r1, r1, -16
2003b4a0:	fa610008 	swi	r19, r1, 8
2003b4a4:	fa81000c 	swi	r20, r1, 12
2003b4a8:	12610000 	addk	r19, r1, r0
2003b4ac:	96808000 	mfs	r20, rpc
2003b4b0:	b000dffc 	imm	-8196
2003b4b4:	329464b0 	addik	r20, r20, 25776
2003b4b8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2003b4bc:	e8730014 	lwi	r3, r19, 20
2003b4c0:	e8630010 	lwi	r3, r3, 16
2003b4c4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003b4c8:	f8130004 	swi	r0, r19, 4
2003b4cc:	b8000028 	bri	40		// 2003b4f4
        fifo->read_inds[i] = 0;
2003b4d0:	e8730014 	lwi	r3, r19, 20
2003b4d4:	e883000c 	lwi	r4, r3, 12
2003b4d8:	e8730004 	lwi	r3, r19, 4
2003b4dc:	64630402 	bslli	r3, r3, 2
2003b4e0:	10641800 	addk	r3, r4, r3
2003b4e4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003b4e8:	e8730004 	lwi	r3, r19, 4
2003b4ec:	30630001 	addik	r3, r3, 1
2003b4f0:	f8730004 	swi	r3, r19, 4
2003b4f4:	e8730014 	lwi	r3, r19, 20
2003b4f8:	e8830008 	lwi	r4, r3, 8
2003b4fc:	e8730004 	lwi	r3, r19, 4
2003b500:	16441803 	cmpu	r18, r4, r3
2003b504:	bc52ffcc 	blti	r18, -52		// 2003b4d0
        fifo->read_inds[i] = 0;
    }
}
2003b508:	10330000 	addk	r1, r19, r0
2003b50c:	ea610008 	lwi	r19, r1, 8
2003b510:	ea81000c 	lwi	r20, r1, 12
2003b514:	30210010 	addik	r1, r1, 16
2003b518:	b60f0008 	rtsd	r15, 8
2003b51c:	80000000 	or	r0, r0, r0

2003b520 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003b520:	3021ffec 	addik	r1, r1, -20
2003b524:	fa61000c 	swi	r19, r1, 12
2003b528:	fa810010 	swi	r20, r1, 16
2003b52c:	12610000 	addk	r19, r1, r0
2003b530:	96808000 	mfs	r20, rpc
2003b534:	b000dffc 	imm	-8196
2003b538:	3294642c 	addik	r20, r20, 25644
2003b53c:	f8b30018 	swi	r5, r19, 24
2003b540:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003b544:	e8730018 	lwi	r3, r19, 24
2003b548:	e8830004 	lwi	r4, r3, 4
2003b54c:	e8730018 	lwi	r3, r19, 24
2003b550:	e8a3000c 	lwi	r5, r3, 12
2003b554:	e873001c 	lwi	r3, r19, 28
2003b558:	64630402 	bslli	r3, r3, 2
2003b55c:	10651800 	addk	r3, r5, r3
2003b560:	e8a30000 	lwi	r5, r3, 0
2003b564:	e8730018 	lwi	r3, r19, 24
2003b568:	e8630000 	lwi	r3, r3, 0
2003b56c:	3063ffff 	addik	r3, r3, -1
2003b570:	84651800 	and	r3, r5, r3
2003b574:	64630403 	bslli	r3, r3, 3
2003b578:	10641800 	addk	r3, r4, r3
2003b57c:	e8830000 	lwi	r4, r3, 0
2003b580:	e8a30004 	lwi	r5, r3, 4
2003b584:	f8930004 	swi	r4, r19, 4
2003b588:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2003b58c:	e8730018 	lwi	r3, r19, 24
2003b590:	e883000c 	lwi	r4, r3, 12
2003b594:	e873001c 	lwi	r3, r19, 28
2003b598:	64630402 	bslli	r3, r3, 2
2003b59c:	10641800 	addk	r3, r4, r3
2003b5a0:	e8830000 	lwi	r4, r3, 0
2003b5a4:	30840001 	addik	r4, r4, 1
2003b5a8:	f8830000 	swi	r4, r3, 0
    return value;
2003b5ac:	e8930004 	lwi	r4, r19, 4
2003b5b0:	e8b30008 	lwi	r5, r19, 8
}
2003b5b4:	10640000 	addk	r3, r4, r0
2003b5b8:	10850000 	addk	r4, r5, r0
2003b5bc:	10330000 	addk	r1, r19, r0
2003b5c0:	ea61000c 	lwi	r19, r1, 12
2003b5c4:	ea810010 	lwi	r20, r1, 16
2003b5c8:	30210014 	addik	r1, r1, 20
2003b5cc:	b60f0008 	rtsd	r15, 8
2003b5d0:	80000000 	or	r0, r0, r0

2003b5d4 <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003b5d4:	3021fff4 	addik	r1, r1, -12
2003b5d8:	fa610004 	swi	r19, r1, 4
2003b5dc:	fa810008 	swi	r20, r1, 8
2003b5e0:	12610000 	addk	r19, r1, r0
2003b5e4:	96808000 	mfs	r20, rpc
2003b5e8:	b000dffc 	imm	-8196
2003b5ec:	32946378 	addik	r20, r20, 25464
2003b5f0:	f8b30010 	swi	r5, r19, 16
2003b5f4:	f8d30014 	swi	r6, r19, 20
2003b5f8:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003b5fc:	e8730010 	lwi	r3, r19, 16
2003b600:	e8830004 	lwi	r4, r3, 4
2003b604:	e8730010 	lwi	r3, r19, 16
2003b608:	e8630010 	lwi	r3, r3, 16
2003b60c:	e8a30000 	lwi	r5, r3, 0
2003b610:	e8730010 	lwi	r3, r19, 16
2003b614:	e8630000 	lwi	r3, r3, 0
2003b618:	3063ffff 	addik	r3, r3, -1
2003b61c:	84651800 	and	r3, r5, r3
2003b620:	64630403 	bslli	r3, r3, 3
2003b624:	10641800 	addk	r3, r4, r3
2003b628:	e8930014 	lwi	r4, r19, 20
2003b62c:	e8b30018 	lwi	r5, r19, 24
2003b630:	f8830000 	swi	r4, r3, 0
2003b634:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2003b638:	e8730010 	lwi	r3, r19, 16
2003b63c:	e8630010 	lwi	r3, r3, 16
2003b640:	e8830000 	lwi	r4, r3, 0
2003b644:	30840001 	addik	r4, r4, 1
2003b648:	f8830000 	swi	r4, r3, 0
}
2003b64c:	10330000 	addk	r1, r19, r0
2003b650:	ea610004 	lwi	r19, r1, 4
2003b654:	ea810008 	lwi	r20, r1, 8
2003b658:	3021000c 	addik	r1, r1, 12
2003b65c:	b60f0008 	rtsd	r15, 8
2003b660:	80000000 	or	r0, r0, r0

2003b664 <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003b664:	3021fff4 	addik	r1, r1, -12
2003b668:	fa610004 	swi	r19, r1, 4
2003b66c:	fa810008 	swi	r20, r1, 8
2003b670:	12610000 	addk	r19, r1, r0
2003b674:	96808000 	mfs	r20, rpc
2003b678:	b000dffc 	imm	-8196
2003b67c:	329462e8 	addik	r20, r20, 25320
2003b680:	f8b30010 	swi	r5, r19, 16
2003b684:	f8d30014 	swi	r6, r19, 20
2003b688:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003b68c:	e8730010 	lwi	r3, r19, 16
2003b690:	e8630010 	lwi	r3, r3, 16
2003b694:	e8830000 	lwi	r4, r3, 0
2003b698:	e8730010 	lwi	r3, r19, 16
2003b69c:	e8a3000c 	lwi	r5, r3, 12
2003b6a0:	e8730014 	lwi	r3, r19, 20
2003b6a4:	64630402 	bslli	r3, r3, 2
2003b6a8:	10651800 	addk	r3, r5, r3
2003b6ac:	e8630000 	lwi	r3, r3, 0
2003b6b0:	14a32000 	rsubk	r5, r3, r4
2003b6b4:	30600001 	addik	r3, r0, 1
2003b6b8:	e8930018 	lwi	r4, r19, 24
2003b6bc:	16442803 	cmpu	r18, r4, r5
2003b6c0:	bcb20008 	bgei	r18, 8		// 2003b6c8
2003b6c4:	10600000 	addk	r3, r0, r0
2003b6c8:	a46300ff 	andi	r3, r3, 255
}
2003b6cc:	10330000 	addk	r1, r19, r0
2003b6d0:	ea610004 	lwi	r19, r1, 4
2003b6d4:	ea810008 	lwi	r20, r1, 8
2003b6d8:	3021000c 	addik	r1, r1, 12
2003b6dc:	b60f0008 	rtsd	r15, 8
2003b6e0:	80000000 	or	r0, r0, r0

2003b6e4 <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003b6e4:	3021fff4 	addik	r1, r1, -12
2003b6e8:	fa610004 	swi	r19, r1, 4
2003b6ec:	fa810008 	swi	r20, r1, 8
2003b6f0:	12610000 	addk	r19, r1, r0
2003b6f4:	96808000 	mfs	r20, rpc
2003b6f8:	b000dffc 	imm	-8196
2003b6fc:	32946268 	addik	r20, r20, 25192
2003b700:	f8b30010 	swi	r5, r19, 16
2003b704:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003b708:	e8730010 	lwi	r3, r19, 16
2003b70c:	e8630010 	lwi	r3, r3, 16
2003b710:	e8830000 	lwi	r4, r3, 0
2003b714:	e8730010 	lwi	r3, r19, 16
2003b718:	e8a3000c 	lwi	r5, r3, 12
2003b71c:	e8730014 	lwi	r3, r19, 20
2003b720:	64630402 	bslli	r3, r3, 2
2003b724:	10651800 	addk	r3, r5, r3
2003b728:	e8630000 	lwi	r3, r3, 0
2003b72c:	14632000 	rsubk	r3, r3, r4
}
2003b730:	10330000 	addk	r1, r19, r0
2003b734:	ea610004 	lwi	r19, r1, 4
2003b738:	ea810008 	lwi	r20, r1, 8
2003b73c:	3021000c 	addik	r1, r1, 12
2003b740:	b60f0008 	rtsd	r15, 8
2003b744:	80000000 	or	r0, r0, r0

2003b748 <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003b748:	3021fff0 	addik	r1, r1, -16
2003b74c:	fa610008 	swi	r19, r1, 8
2003b750:	fa81000c 	swi	r20, r1, 12
2003b754:	12610000 	addk	r19, r1, r0
2003b758:	96808000 	mfs	r20, rpc
2003b75c:	b000dffc 	imm	-8196
2003b760:	32946204 	addik	r20, r20, 25092
2003b764:	f8b30014 	swi	r5, r19, 20
2003b768:	f8d30018 	swi	r6, r19, 24
2003b76c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003b770:	f8130004 	swi	r0, r19, 4
2003b774:	b800005c 	bri	92		// 2003b7d0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003b778:	e8730014 	lwi	r3, r19, 20
2003b77c:	e8830000 	lwi	r4, r3, 0
2003b780:	e8730014 	lwi	r3, r19, 20
2003b784:	e8a3000c 	lwi	r5, r3, 12
2003b788:	e8730004 	lwi	r3, r19, 4
2003b78c:	64630402 	bslli	r3, r3, 2
2003b790:	10651800 	addk	r3, r5, r3
2003b794:	e8a30000 	lwi	r5, r3, 0
2003b798:	e8730014 	lwi	r3, r19, 20
2003b79c:	e8630010 	lwi	r3, r3, 16
2003b7a0:	e8630000 	lwi	r3, r3, 0
2003b7a4:	14632800 	rsubk	r3, r3, r5
2003b7a8:	10641800 	addk	r3, r4, r3
2003b7ac:	30830001 	addik	r4, r3, 1
2003b7b0:	e873001c 	lwi	r3, r19, 28
2003b7b4:	16441803 	cmpu	r18, r4, r3
2003b7b8:	bc52000c 	blti	r18, 12		// 2003b7c4
            return 0;
2003b7bc:	10600000 	addk	r3, r0, r0
2003b7c0:	b8000024 	bri	36		// 2003b7e4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003b7c4:	e8730004 	lwi	r3, r19, 4
2003b7c8:	30630001 	addik	r3, r3, 1
2003b7cc:	f8730004 	swi	r3, r19, 4
2003b7d0:	e8930004 	lwi	r4, r19, 4
2003b7d4:	e8730018 	lwi	r3, r19, 24
2003b7d8:	16432003 	cmpu	r18, r3, r4
2003b7dc:	bc52ff9c 	blti	r18, -100		// 2003b778
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003b7e0:	30600001 	addik	r3, r0, 1
}
2003b7e4:	10330000 	addk	r1, r19, r0
2003b7e8:	ea610008 	lwi	r19, r1, 8
2003b7ec:	ea81000c 	lwi	r20, r1, 12
2003b7f0:	30210010 	addik	r1, r1, 16
2003b7f4:	b60f0008 	rtsd	r15, 8
2003b7f8:	80000000 	or	r0, r0, r0

2003b7fc <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003b7fc:	3021ffe8 	addik	r1, r1, -24
2003b800:	fa610010 	swi	r19, r1, 16
2003b804:	fa810014 	swi	r20, r1, 20
2003b808:	12610000 	addk	r19, r1, r0
2003b80c:	96808000 	mfs	r20, rpc
2003b810:	b000dffc 	imm	-8196
2003b814:	32946150 	addik	r20, r20, 24912
2003b818:	f8b3001c 	swi	r5, r19, 28
2003b81c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003b820:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003b824:	f8130004 	swi	r0, r19, 4
2003b828:	b8000054 	bri	84		// 2003b87c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003b82c:	e873001c 	lwi	r3, r19, 28
2003b830:	e8630010 	lwi	r3, r3, 16
2003b834:	e8830000 	lwi	r4, r3, 0
2003b838:	e873001c 	lwi	r3, r19, 28
2003b83c:	e8a3000c 	lwi	r5, r3, 12
2003b840:	e8730004 	lwi	r3, r19, 4
2003b844:	64630402 	bslli	r3, r3, 2
2003b848:	10651800 	addk	r3, r5, r3
2003b84c:	e8630000 	lwi	r3, r3, 0
2003b850:	14632000 	rsubk	r3, r3, r4
2003b854:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003b858:	e8930008 	lwi	r4, r19, 8
2003b85c:	e873000c 	lwi	r3, r19, 12
2003b860:	16441803 	cmpu	r18, r4, r3
2003b864:	bcb20008 	bgei	r18, 8		// 2003b86c
2003b868:	10640000 	addk	r3, r4, r0
2003b86c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003b870:	e8730004 	lwi	r3, r19, 4
2003b874:	30630001 	addik	r3, r3, 1
2003b878:	f8730004 	swi	r3, r19, 4
2003b87c:	e8930004 	lwi	r4, r19, 4
2003b880:	e8730020 	lwi	r3, r19, 32
2003b884:	16432003 	cmpu	r18, r3, r4
2003b888:	bc52ffa4 	blti	r18, -92		// 2003b82c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003b88c:	e873001c 	lwi	r3, r19, 28
2003b890:	e8830000 	lwi	r4, r3, 0
2003b894:	e8730008 	lwi	r3, r19, 8
2003b898:	14632000 	rsubk	r3, r3, r4
}
2003b89c:	10330000 	addk	r1, r19, r0
2003b8a0:	ea610010 	lwi	r19, r1, 16
2003b8a4:	ea810014 	lwi	r20, r1, 20
2003b8a8:	30210018 	addik	r1, r1, 24
2003b8ac:	b60f0008 	rtsd	r15, 8
2003b8b0:	80000000 	or	r0, r0, r0

2003b8b4 <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003b8b4:	3021fff0 	addik	r1, r1, -16
2003b8b8:	fa610008 	swi	r19, r1, 8
2003b8bc:	fa81000c 	swi	r20, r1, 12
2003b8c0:	12610000 	addk	r19, r1, r0
2003b8c4:	96808000 	mfs	r20, rpc
2003b8c8:	b000dffc 	imm	-8196
2003b8cc:	32946098 	addik	r20, r20, 24728
2003b8d0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2003b8d4:	e8730014 	lwi	r3, r19, 20
2003b8d8:	e8630010 	lwi	r3, r3, 16
2003b8dc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003b8e0:	f8130004 	swi	r0, r19, 4
2003b8e4:	b8000028 	bri	40		// 2003b90c
        fifo->read_inds[i] = 0;
2003b8e8:	e8730014 	lwi	r3, r19, 20
2003b8ec:	e883000c 	lwi	r4, r3, 12
2003b8f0:	e8730004 	lwi	r3, r19, 4
2003b8f4:	64630402 	bslli	r3, r3, 2
2003b8f8:	10641800 	addk	r3, r4, r3
2003b8fc:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003b900:	e8730004 	lwi	r3, r19, 4
2003b904:	30630001 	addik	r3, r3, 1
2003b908:	f8730004 	swi	r3, r19, 4
2003b90c:	e8730014 	lwi	r3, r19, 20
2003b910:	e8830008 	lwi	r4, r3, 8
2003b914:	e8730004 	lwi	r3, r19, 4
2003b918:	16441803 	cmpu	r18, r4, r3
2003b91c:	bc52ffcc 	blti	r18, -52		// 2003b8e8
        fifo->read_inds[i] = 0;
    }
}
2003b920:	10330000 	addk	r1, r19, r0
2003b924:	ea610008 	lwi	r19, r1, 8
2003b928:	ea81000c 	lwi	r20, r1, 12
2003b92c:	30210010 	addik	r1, r1, 16
2003b930:	b60f0008 	rtsd	r15, 8
2003b934:	80000000 	or	r0, r0, r0

2003b938 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003b938:	3021fff0 	addik	r1, r1, -16
2003b93c:	fa610008 	swi	r19, r1, 8
2003b940:	fa81000c 	swi	r20, r1, 12
2003b944:	12610000 	addk	r19, r1, r0
2003b948:	96808000 	mfs	r20, rpc
2003b94c:	b000dffc 	imm	-8196
2003b950:	32946014 	addik	r20, r20, 24596
2003b954:	f8b30014 	swi	r5, r19, 20
2003b958:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003b95c:	e8730014 	lwi	r3, r19, 20
2003b960:	e8830004 	lwi	r4, r3, 4
2003b964:	e8730014 	lwi	r3, r19, 20
2003b968:	e8a3000c 	lwi	r5, r3, 12
2003b96c:	e8730018 	lwi	r3, r19, 24
2003b970:	64630402 	bslli	r3, r3, 2
2003b974:	10651800 	addk	r3, r5, r3
2003b978:	e8a30000 	lwi	r5, r3, 0
2003b97c:	e8730014 	lwi	r3, r19, 20
2003b980:	e8630000 	lwi	r3, r3, 0
2003b984:	3063ffff 	addik	r3, r3, -1
2003b988:	84651800 	and	r3, r5, r3
2003b98c:	10641800 	addk	r3, r4, r3
2003b990:	e0630000 	lbui	r3, r3, 0
2003b994:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003b998:	e8730014 	lwi	r3, r19, 20
2003b99c:	e883000c 	lwi	r4, r3, 12
2003b9a0:	e8730018 	lwi	r3, r19, 24
2003b9a4:	64630402 	bslli	r3, r3, 2
2003b9a8:	10641800 	addk	r3, r4, r3
2003b9ac:	e8830000 	lwi	r4, r3, 0
2003b9b0:	30840001 	addik	r4, r4, 1
2003b9b4:	f8830000 	swi	r4, r3, 0
    return value;
2003b9b8:	e0730004 	lbui	r3, r19, 4
}
2003b9bc:	10330000 	addk	r1, r19, r0
2003b9c0:	ea610008 	lwi	r19, r1, 8
2003b9c4:	ea81000c 	lwi	r20, r1, 12
2003b9c8:	30210010 	addik	r1, r1, 16
2003b9cc:	b60f0008 	rtsd	r15, 8
2003b9d0:	80000000 	or	r0, r0, r0

2003b9d4 <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003b9d4:	3021fff4 	addik	r1, r1, -12
2003b9d8:	fa610004 	swi	r19, r1, 4
2003b9dc:	fa810008 	swi	r20, r1, 8
2003b9e0:	12610000 	addk	r19, r1, r0
2003b9e4:	96808000 	mfs	r20, rpc
2003b9e8:	b000dffc 	imm	-8196
2003b9ec:	32945f78 	addik	r20, r20, 24440
2003b9f0:	f8b30010 	swi	r5, r19, 16
2003b9f4:	10660000 	addk	r3, r6, r0
2003b9f8:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003b9fc:	e8730010 	lwi	r3, r19, 16
2003ba00:	e8830004 	lwi	r4, r3, 4
2003ba04:	e8730010 	lwi	r3, r19, 16
2003ba08:	e8630010 	lwi	r3, r3, 16
2003ba0c:	e8a30000 	lwi	r5, r3, 0
2003ba10:	e8730010 	lwi	r3, r19, 16
2003ba14:	e8630000 	lwi	r3, r3, 0
2003ba18:	3063ffff 	addik	r3, r3, -1
2003ba1c:	84651800 	and	r3, r5, r3
2003ba20:	10641800 	addk	r3, r4, r3
2003ba24:	e0930014 	lbui	r4, r19, 20
2003ba28:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2003ba2c:	e8730010 	lwi	r3, r19, 16
2003ba30:	e8630010 	lwi	r3, r3, 16
2003ba34:	e8830000 	lwi	r4, r3, 0
2003ba38:	30840001 	addik	r4, r4, 1
2003ba3c:	f8830000 	swi	r4, r3, 0
}
2003ba40:	10330000 	addk	r1, r19, r0
2003ba44:	ea610004 	lwi	r19, r1, 4
2003ba48:	ea810008 	lwi	r20, r1, 8
2003ba4c:	3021000c 	addik	r1, r1, 12
2003ba50:	b60f0008 	rtsd	r15, 8
2003ba54:	80000000 	or	r0, r0, r0

2003ba58 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003ba58:	3021fff4 	addik	r1, r1, -12
2003ba5c:	fa610004 	swi	r19, r1, 4
2003ba60:	fa810008 	swi	r20, r1, 8
2003ba64:	12610000 	addk	r19, r1, r0
2003ba68:	96808000 	mfs	r20, rpc
2003ba6c:	b000dffc 	imm	-8196
2003ba70:	32945ef4 	addik	r20, r20, 24308
2003ba74:	f8b30010 	swi	r5, r19, 16
2003ba78:	f8d30014 	swi	r6, r19, 20
2003ba7c:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003ba80:	e8730010 	lwi	r3, r19, 16
2003ba84:	e8630010 	lwi	r3, r3, 16
2003ba88:	e8830000 	lwi	r4, r3, 0
2003ba8c:	e8730010 	lwi	r3, r19, 16
2003ba90:	e8a3000c 	lwi	r5, r3, 12
2003ba94:	e8730014 	lwi	r3, r19, 20
2003ba98:	64630402 	bslli	r3, r3, 2
2003ba9c:	10651800 	addk	r3, r5, r3
2003baa0:	e8630000 	lwi	r3, r3, 0
2003baa4:	14a32000 	rsubk	r5, r3, r4
2003baa8:	30600001 	addik	r3, r0, 1
2003baac:	e8930018 	lwi	r4, r19, 24
2003bab0:	16442803 	cmpu	r18, r4, r5
2003bab4:	bcb20008 	bgei	r18, 8		// 2003babc
2003bab8:	10600000 	addk	r3, r0, r0
2003babc:	a46300ff 	andi	r3, r3, 255
}
2003bac0:	10330000 	addk	r1, r19, r0
2003bac4:	ea610004 	lwi	r19, r1, 4
2003bac8:	ea810008 	lwi	r20, r1, 8
2003bacc:	3021000c 	addik	r1, r1, 12
2003bad0:	b60f0008 	rtsd	r15, 8
2003bad4:	80000000 	or	r0, r0, r0

2003bad8 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003bad8:	3021fff4 	addik	r1, r1, -12
2003badc:	fa610004 	swi	r19, r1, 4
2003bae0:	fa810008 	swi	r20, r1, 8
2003bae4:	12610000 	addk	r19, r1, r0
2003bae8:	96808000 	mfs	r20, rpc
2003baec:	b000dffc 	imm	-8196
2003baf0:	32945e74 	addik	r20, r20, 24180
2003baf4:	f8b30010 	swi	r5, r19, 16
2003baf8:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003bafc:	e8730010 	lwi	r3, r19, 16
2003bb00:	e8630010 	lwi	r3, r3, 16
2003bb04:	e8830000 	lwi	r4, r3, 0
2003bb08:	e8730010 	lwi	r3, r19, 16
2003bb0c:	e8a3000c 	lwi	r5, r3, 12
2003bb10:	e8730014 	lwi	r3, r19, 20
2003bb14:	64630402 	bslli	r3, r3, 2
2003bb18:	10651800 	addk	r3, r5, r3
2003bb1c:	e8630000 	lwi	r3, r3, 0
2003bb20:	14632000 	rsubk	r3, r3, r4
}
2003bb24:	10330000 	addk	r1, r19, r0
2003bb28:	ea610004 	lwi	r19, r1, 4
2003bb2c:	ea810008 	lwi	r20, r1, 8
2003bb30:	3021000c 	addik	r1, r1, 12
2003bb34:	b60f0008 	rtsd	r15, 8
2003bb38:	80000000 	or	r0, r0, r0

2003bb3c <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003bb3c:	3021fff0 	addik	r1, r1, -16
2003bb40:	fa610008 	swi	r19, r1, 8
2003bb44:	fa81000c 	swi	r20, r1, 12
2003bb48:	12610000 	addk	r19, r1, r0
2003bb4c:	96808000 	mfs	r20, rpc
2003bb50:	b000dffc 	imm	-8196
2003bb54:	32945e10 	addik	r20, r20, 24080
2003bb58:	f8b30014 	swi	r5, r19, 20
2003bb5c:	f8d30018 	swi	r6, r19, 24
2003bb60:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003bb64:	f8130004 	swi	r0, r19, 4
2003bb68:	b800005c 	bri	92		// 2003bbc4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003bb6c:	e8730014 	lwi	r3, r19, 20
2003bb70:	e8830000 	lwi	r4, r3, 0
2003bb74:	e8730014 	lwi	r3, r19, 20
2003bb78:	e8a3000c 	lwi	r5, r3, 12
2003bb7c:	e8730004 	lwi	r3, r19, 4
2003bb80:	64630402 	bslli	r3, r3, 2
2003bb84:	10651800 	addk	r3, r5, r3
2003bb88:	e8a30000 	lwi	r5, r3, 0
2003bb8c:	e8730014 	lwi	r3, r19, 20
2003bb90:	e8630010 	lwi	r3, r3, 16
2003bb94:	e8630000 	lwi	r3, r3, 0
2003bb98:	14632800 	rsubk	r3, r3, r5
2003bb9c:	10641800 	addk	r3, r4, r3
2003bba0:	30830001 	addik	r4, r3, 1
2003bba4:	e873001c 	lwi	r3, r19, 28
2003bba8:	16441803 	cmpu	r18, r4, r3
2003bbac:	bc52000c 	blti	r18, 12		// 2003bbb8
            return 0;
2003bbb0:	10600000 	addk	r3, r0, r0
2003bbb4:	b8000024 	bri	36		// 2003bbd8
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003bbb8:	e8730004 	lwi	r3, r19, 4
2003bbbc:	30630001 	addik	r3, r3, 1
2003bbc0:	f8730004 	swi	r3, r19, 4
2003bbc4:	e8930004 	lwi	r4, r19, 4
2003bbc8:	e8730018 	lwi	r3, r19, 24
2003bbcc:	16432003 	cmpu	r18, r3, r4
2003bbd0:	bc52ff9c 	blti	r18, -100		// 2003bb6c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003bbd4:	30600001 	addik	r3, r0, 1
}
2003bbd8:	10330000 	addk	r1, r19, r0
2003bbdc:	ea610008 	lwi	r19, r1, 8
2003bbe0:	ea81000c 	lwi	r20, r1, 12
2003bbe4:	30210010 	addik	r1, r1, 16
2003bbe8:	b60f0008 	rtsd	r15, 8
2003bbec:	80000000 	or	r0, r0, r0

2003bbf0 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003bbf0:	3021ffe8 	addik	r1, r1, -24
2003bbf4:	fa610010 	swi	r19, r1, 16
2003bbf8:	fa810014 	swi	r20, r1, 20
2003bbfc:	12610000 	addk	r19, r1, r0
2003bc00:	96808000 	mfs	r20, rpc
2003bc04:	b000dffc 	imm	-8196
2003bc08:	32945d5c 	addik	r20, r20, 23900
2003bc0c:	f8b3001c 	swi	r5, r19, 28
2003bc10:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003bc14:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003bc18:	f8130004 	swi	r0, r19, 4
2003bc1c:	b8000054 	bri	84		// 2003bc70
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003bc20:	e873001c 	lwi	r3, r19, 28
2003bc24:	e8630010 	lwi	r3, r3, 16
2003bc28:	e8830000 	lwi	r4, r3, 0
2003bc2c:	e873001c 	lwi	r3, r19, 28
2003bc30:	e8a3000c 	lwi	r5, r3, 12
2003bc34:	e8730004 	lwi	r3, r19, 4
2003bc38:	64630402 	bslli	r3, r3, 2
2003bc3c:	10651800 	addk	r3, r5, r3
2003bc40:	e8630000 	lwi	r3, r3, 0
2003bc44:	14632000 	rsubk	r3, r3, r4
2003bc48:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003bc4c:	e8930008 	lwi	r4, r19, 8
2003bc50:	e873000c 	lwi	r3, r19, 12
2003bc54:	16441803 	cmpu	r18, r4, r3
2003bc58:	bcb20008 	bgei	r18, 8		// 2003bc60
2003bc5c:	10640000 	addk	r3, r4, r0
2003bc60:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003bc64:	e8730004 	lwi	r3, r19, 4
2003bc68:	30630001 	addik	r3, r3, 1
2003bc6c:	f8730004 	swi	r3, r19, 4
2003bc70:	e8930004 	lwi	r4, r19, 4
2003bc74:	e8730020 	lwi	r3, r19, 32
2003bc78:	16432003 	cmpu	r18, r3, r4
2003bc7c:	bc52ffa4 	blti	r18, -92		// 2003bc20
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003bc80:	e873001c 	lwi	r3, r19, 28
2003bc84:	e8830000 	lwi	r4, r3, 0
2003bc88:	e8730008 	lwi	r3, r19, 8
2003bc8c:	14632000 	rsubk	r3, r3, r4
}
2003bc90:	10330000 	addk	r1, r19, r0
2003bc94:	ea610010 	lwi	r19, r1, 16
2003bc98:	ea810014 	lwi	r20, r1, 20
2003bc9c:	30210018 	addik	r1, r1, 24
2003bca0:	b60f0008 	rtsd	r15, 8
2003bca4:	80000000 	or	r0, r0, r0

2003bca8 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003bca8:	3021fff0 	addik	r1, r1, -16
2003bcac:	fa610008 	swi	r19, r1, 8
2003bcb0:	fa81000c 	swi	r20, r1, 12
2003bcb4:	12610000 	addk	r19, r1, r0
2003bcb8:	96808000 	mfs	r20, rpc
2003bcbc:	b000dffc 	imm	-8196
2003bcc0:	32945ca4 	addik	r20, r20, 23716
2003bcc4:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2003bcc8:	e8730014 	lwi	r3, r19, 20
2003bccc:	e8630010 	lwi	r3, r3, 16
2003bcd0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003bcd4:	f8130004 	swi	r0, r19, 4
2003bcd8:	b8000028 	bri	40		// 2003bd00
        fifo->read_inds[i] = 0;
2003bcdc:	e8730014 	lwi	r3, r19, 20
2003bce0:	e883000c 	lwi	r4, r3, 12
2003bce4:	e8730004 	lwi	r3, r19, 4
2003bce8:	64630402 	bslli	r3, r3, 2
2003bcec:	10641800 	addk	r3, r4, r3
2003bcf0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003bcf4:	e8730004 	lwi	r3, r19, 4
2003bcf8:	30630001 	addik	r3, r3, 1
2003bcfc:	f8730004 	swi	r3, r19, 4
2003bd00:	e8730014 	lwi	r3, r19, 20
2003bd04:	e8830008 	lwi	r4, r3, 8
2003bd08:	e8730004 	lwi	r3, r19, 4
2003bd0c:	16441803 	cmpu	r18, r4, r3
2003bd10:	bc52ffcc 	blti	r18, -52		// 2003bcdc
        fifo->read_inds[i] = 0;
    }
}
2003bd14:	10330000 	addk	r1, r19, r0
2003bd18:	ea610008 	lwi	r19, r1, 8
2003bd1c:	ea81000c 	lwi	r20, r1, 12
2003bd20:	30210010 	addik	r1, r1, 16
2003bd24:	b60f0008 	rtsd	r15, 8
2003bd28:	80000000 	or	r0, r0, r0

2003bd2c <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003bd2c:	3021fff0 	addik	r1, r1, -16
2003bd30:	fa610008 	swi	r19, r1, 8
2003bd34:	fa81000c 	swi	r20, r1, 12
2003bd38:	12610000 	addk	r19, r1, r0
2003bd3c:	96808000 	mfs	r20, rpc
2003bd40:	b000dffc 	imm	-8196
2003bd44:	32945c20 	addik	r20, r20, 23584
2003bd48:	f8b30014 	swi	r5, r19, 20
2003bd4c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003bd50:	e8730014 	lwi	r3, r19, 20
2003bd54:	e8830004 	lwi	r4, r3, 4
2003bd58:	e8730014 	lwi	r3, r19, 20
2003bd5c:	e8a3000c 	lwi	r5, r3, 12
2003bd60:	e8730018 	lwi	r3, r19, 24
2003bd64:	64630402 	bslli	r3, r3, 2
2003bd68:	10651800 	addk	r3, r5, r3
2003bd6c:	e8a30000 	lwi	r5, r3, 0
2003bd70:	e8730014 	lwi	r3, r19, 20
2003bd74:	e8630000 	lwi	r3, r3, 0
2003bd78:	3063ffff 	addik	r3, r3, -1
2003bd7c:	84651800 	and	r3, r5, r3
2003bd80:	10631800 	addk	r3, r3, r3
2003bd84:	10641800 	addk	r3, r4, r3
2003bd88:	e4630000 	lhui	r3, r3, 0
2003bd8c:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003bd90:	e8730014 	lwi	r3, r19, 20
2003bd94:	e883000c 	lwi	r4, r3, 12
2003bd98:	e8730018 	lwi	r3, r19, 24
2003bd9c:	64630402 	bslli	r3, r3, 2
2003bda0:	10641800 	addk	r3, r4, r3
2003bda4:	e8830000 	lwi	r4, r3, 0
2003bda8:	30840001 	addik	r4, r4, 1
2003bdac:	f8830000 	swi	r4, r3, 0
    return value;
2003bdb0:	e4730004 	lhui	r3, r19, 4
}
2003bdb4:	10330000 	addk	r1, r19, r0
2003bdb8:	ea610008 	lwi	r19, r1, 8
2003bdbc:	ea81000c 	lwi	r20, r1, 12
2003bdc0:	30210010 	addik	r1, r1, 16
2003bdc4:	b60f0008 	rtsd	r15, 8
2003bdc8:	80000000 	or	r0, r0, r0

2003bdcc <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003bdcc:	3021fff4 	addik	r1, r1, -12
2003bdd0:	fa610004 	swi	r19, r1, 4
2003bdd4:	fa810008 	swi	r20, r1, 8
2003bdd8:	12610000 	addk	r19, r1, r0
2003bddc:	96808000 	mfs	r20, rpc
2003bde0:	b000dffc 	imm	-8196
2003bde4:	32945b80 	addik	r20, r20, 23424
2003bde8:	f8b30010 	swi	r5, r19, 16
2003bdec:	10660000 	addk	r3, r6, r0
2003bdf0:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003bdf4:	e8730010 	lwi	r3, r19, 16
2003bdf8:	e8830004 	lwi	r4, r3, 4
2003bdfc:	e8730010 	lwi	r3, r19, 16
2003be00:	e8630010 	lwi	r3, r3, 16
2003be04:	e8a30000 	lwi	r5, r3, 0
2003be08:	e8730010 	lwi	r3, r19, 16
2003be0c:	e8630000 	lwi	r3, r3, 0
2003be10:	3063ffff 	addik	r3, r3, -1
2003be14:	84651800 	and	r3, r5, r3
2003be18:	10631800 	addk	r3, r3, r3
2003be1c:	10641800 	addk	r3, r4, r3
2003be20:	e4930014 	lhui	r4, r19, 20
2003be24:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2003be28:	e8730010 	lwi	r3, r19, 16
2003be2c:	e8630010 	lwi	r3, r3, 16
2003be30:	e8830000 	lwi	r4, r3, 0
2003be34:	30840001 	addik	r4, r4, 1
2003be38:	f8830000 	swi	r4, r3, 0
}
2003be3c:	10330000 	addk	r1, r19, r0
2003be40:	ea610004 	lwi	r19, r1, 4
2003be44:	ea810008 	lwi	r20, r1, 8
2003be48:	3021000c 	addik	r1, r1, 12
2003be4c:	b60f0008 	rtsd	r15, 8
2003be50:	80000000 	or	r0, r0, r0

2003be54 <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003be54:	3021fff4 	addik	r1, r1, -12
2003be58:	fa610004 	swi	r19, r1, 4
2003be5c:	fa810008 	swi	r20, r1, 8
2003be60:	12610000 	addk	r19, r1, r0
2003be64:	96808000 	mfs	r20, rpc
2003be68:	b000dffc 	imm	-8196
2003be6c:	32945af8 	addik	r20, r20, 23288
2003be70:	f8b30010 	swi	r5, r19, 16
2003be74:	f8d30014 	swi	r6, r19, 20
2003be78:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003be7c:	e8730010 	lwi	r3, r19, 16
2003be80:	e8630010 	lwi	r3, r3, 16
2003be84:	e8830000 	lwi	r4, r3, 0
2003be88:	e8730010 	lwi	r3, r19, 16
2003be8c:	e8a3000c 	lwi	r5, r3, 12
2003be90:	e8730014 	lwi	r3, r19, 20
2003be94:	64630402 	bslli	r3, r3, 2
2003be98:	10651800 	addk	r3, r5, r3
2003be9c:	e8630000 	lwi	r3, r3, 0
2003bea0:	14a32000 	rsubk	r5, r3, r4
2003bea4:	30600001 	addik	r3, r0, 1
2003bea8:	e8930018 	lwi	r4, r19, 24
2003beac:	16442803 	cmpu	r18, r4, r5
2003beb0:	bcb20008 	bgei	r18, 8		// 2003beb8
2003beb4:	10600000 	addk	r3, r0, r0
2003beb8:	a46300ff 	andi	r3, r3, 255
}
2003bebc:	10330000 	addk	r1, r19, r0
2003bec0:	ea610004 	lwi	r19, r1, 4
2003bec4:	ea810008 	lwi	r20, r1, 8
2003bec8:	3021000c 	addik	r1, r1, 12
2003becc:	b60f0008 	rtsd	r15, 8
2003bed0:	80000000 	or	r0, r0, r0

2003bed4 <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003bed4:	3021fff4 	addik	r1, r1, -12
2003bed8:	fa610004 	swi	r19, r1, 4
2003bedc:	fa810008 	swi	r20, r1, 8
2003bee0:	12610000 	addk	r19, r1, r0
2003bee4:	96808000 	mfs	r20, rpc
2003bee8:	b000dffc 	imm	-8196
2003beec:	32945a78 	addik	r20, r20, 23160
2003bef0:	f8b30010 	swi	r5, r19, 16
2003bef4:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003bef8:	e8730010 	lwi	r3, r19, 16
2003befc:	e8630010 	lwi	r3, r3, 16
2003bf00:	e8830000 	lwi	r4, r3, 0
2003bf04:	e8730010 	lwi	r3, r19, 16
2003bf08:	e8a3000c 	lwi	r5, r3, 12
2003bf0c:	e8730014 	lwi	r3, r19, 20
2003bf10:	64630402 	bslli	r3, r3, 2
2003bf14:	10651800 	addk	r3, r5, r3
2003bf18:	e8630000 	lwi	r3, r3, 0
2003bf1c:	14632000 	rsubk	r3, r3, r4
}
2003bf20:	10330000 	addk	r1, r19, r0
2003bf24:	ea610004 	lwi	r19, r1, 4
2003bf28:	ea810008 	lwi	r20, r1, 8
2003bf2c:	3021000c 	addik	r1, r1, 12
2003bf30:	b60f0008 	rtsd	r15, 8
2003bf34:	80000000 	or	r0, r0, r0

2003bf38 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003bf38:	3021fff0 	addik	r1, r1, -16
2003bf3c:	fa610008 	swi	r19, r1, 8
2003bf40:	fa81000c 	swi	r20, r1, 12
2003bf44:	12610000 	addk	r19, r1, r0
2003bf48:	96808000 	mfs	r20, rpc
2003bf4c:	b000dffc 	imm	-8196
2003bf50:	32945a14 	addik	r20, r20, 23060
2003bf54:	f8b30014 	swi	r5, r19, 20
2003bf58:	f8d30018 	swi	r6, r19, 24
2003bf5c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003bf60:	f8130004 	swi	r0, r19, 4
2003bf64:	b800005c 	bri	92		// 2003bfc0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003bf68:	e8730014 	lwi	r3, r19, 20
2003bf6c:	e8830000 	lwi	r4, r3, 0
2003bf70:	e8730014 	lwi	r3, r19, 20
2003bf74:	e8a3000c 	lwi	r5, r3, 12
2003bf78:	e8730004 	lwi	r3, r19, 4
2003bf7c:	64630402 	bslli	r3, r3, 2
2003bf80:	10651800 	addk	r3, r5, r3
2003bf84:	e8a30000 	lwi	r5, r3, 0
2003bf88:	e8730014 	lwi	r3, r19, 20
2003bf8c:	e8630010 	lwi	r3, r3, 16
2003bf90:	e8630000 	lwi	r3, r3, 0
2003bf94:	14632800 	rsubk	r3, r3, r5
2003bf98:	10641800 	addk	r3, r4, r3
2003bf9c:	30830001 	addik	r4, r3, 1
2003bfa0:	e873001c 	lwi	r3, r19, 28
2003bfa4:	16441803 	cmpu	r18, r4, r3
2003bfa8:	bc52000c 	blti	r18, 12		// 2003bfb4
            return 0;
2003bfac:	10600000 	addk	r3, r0, r0
2003bfb0:	b8000024 	bri	36		// 2003bfd4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003bfb4:	e8730004 	lwi	r3, r19, 4
2003bfb8:	30630001 	addik	r3, r3, 1
2003bfbc:	f8730004 	swi	r3, r19, 4
2003bfc0:	e8930004 	lwi	r4, r19, 4
2003bfc4:	e8730018 	lwi	r3, r19, 24
2003bfc8:	16432003 	cmpu	r18, r3, r4
2003bfcc:	bc52ff9c 	blti	r18, -100		// 2003bf68
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003bfd0:	30600001 	addik	r3, r0, 1
}
2003bfd4:	10330000 	addk	r1, r19, r0
2003bfd8:	ea610008 	lwi	r19, r1, 8
2003bfdc:	ea81000c 	lwi	r20, r1, 12
2003bfe0:	30210010 	addik	r1, r1, 16
2003bfe4:	b60f0008 	rtsd	r15, 8
2003bfe8:	80000000 	or	r0, r0, r0

2003bfec <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003bfec:	3021ffe8 	addik	r1, r1, -24
2003bff0:	fa610010 	swi	r19, r1, 16
2003bff4:	fa810014 	swi	r20, r1, 20
2003bff8:	12610000 	addk	r19, r1, r0
2003bffc:	96808000 	mfs	r20, rpc
2003c000:	b000dffc 	imm	-8196
2003c004:	32945960 	addik	r20, r20, 22880
2003c008:	f8b3001c 	swi	r5, r19, 28
2003c00c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003c010:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003c014:	f8130004 	swi	r0, r19, 4
2003c018:	b8000054 	bri	84		// 2003c06c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003c01c:	e873001c 	lwi	r3, r19, 28
2003c020:	e8630010 	lwi	r3, r3, 16
2003c024:	e8830000 	lwi	r4, r3, 0
2003c028:	e873001c 	lwi	r3, r19, 28
2003c02c:	e8a3000c 	lwi	r5, r3, 12
2003c030:	e8730004 	lwi	r3, r19, 4
2003c034:	64630402 	bslli	r3, r3, 2
2003c038:	10651800 	addk	r3, r5, r3
2003c03c:	e8630000 	lwi	r3, r3, 0
2003c040:	14632000 	rsubk	r3, r3, r4
2003c044:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003c048:	e8930008 	lwi	r4, r19, 8
2003c04c:	e873000c 	lwi	r3, r19, 12
2003c050:	16441803 	cmpu	r18, r4, r3
2003c054:	bcb20008 	bgei	r18, 8		// 2003c05c
2003c058:	10640000 	addk	r3, r4, r0
2003c05c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003c060:	e8730004 	lwi	r3, r19, 4
2003c064:	30630001 	addik	r3, r3, 1
2003c068:	f8730004 	swi	r3, r19, 4
2003c06c:	e8930004 	lwi	r4, r19, 4
2003c070:	e8730020 	lwi	r3, r19, 32
2003c074:	16432003 	cmpu	r18, r3, r4
2003c078:	bc52ffa4 	blti	r18, -92		// 2003c01c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003c07c:	e873001c 	lwi	r3, r19, 28
2003c080:	e8830000 	lwi	r4, r3, 0
2003c084:	e8730008 	lwi	r3, r19, 8
2003c088:	14632000 	rsubk	r3, r3, r4
}
2003c08c:	10330000 	addk	r1, r19, r0
2003c090:	ea610010 	lwi	r19, r1, 16
2003c094:	ea810014 	lwi	r20, r1, 20
2003c098:	30210018 	addik	r1, r1, 24
2003c09c:	b60f0008 	rtsd	r15, 8
2003c0a0:	80000000 	or	r0, r0, r0

2003c0a4 <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003c0a4:	3021fff0 	addik	r1, r1, -16
2003c0a8:	fa610008 	swi	r19, r1, 8
2003c0ac:	fa81000c 	swi	r20, r1, 12
2003c0b0:	12610000 	addk	r19, r1, r0
2003c0b4:	96808000 	mfs	r20, rpc
2003c0b8:	b000dffc 	imm	-8196
2003c0bc:	329458a8 	addik	r20, r20, 22696
2003c0c0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2003c0c4:	e8730014 	lwi	r3, r19, 20
2003c0c8:	e8630010 	lwi	r3, r3, 16
2003c0cc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003c0d0:	f8130004 	swi	r0, r19, 4
2003c0d4:	b8000028 	bri	40		// 2003c0fc
        fifo->read_inds[i] = 0;
2003c0d8:	e8730014 	lwi	r3, r19, 20
2003c0dc:	e883000c 	lwi	r4, r3, 12
2003c0e0:	e8730004 	lwi	r3, r19, 4
2003c0e4:	64630402 	bslli	r3, r3, 2
2003c0e8:	10641800 	addk	r3, r4, r3
2003c0ec:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003c0f0:	e8730004 	lwi	r3, r19, 4
2003c0f4:	30630001 	addik	r3, r3, 1
2003c0f8:	f8730004 	swi	r3, r19, 4
2003c0fc:	e8730014 	lwi	r3, r19, 20
2003c100:	e8830008 	lwi	r4, r3, 8
2003c104:	e8730004 	lwi	r3, r19, 4
2003c108:	16441803 	cmpu	r18, r4, r3
2003c10c:	bc52ffcc 	blti	r18, -52		// 2003c0d8
        fifo->read_inds[i] = 0;
    }
}
2003c110:	10330000 	addk	r1, r19, r0
2003c114:	ea610008 	lwi	r19, r1, 8
2003c118:	ea81000c 	lwi	r20, r1, 12
2003c11c:	30210010 	addik	r1, r1, 16
2003c120:	b60f0008 	rtsd	r15, 8
2003c124:	80000000 	or	r0, r0, r0

2003c128 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003c128:	3021fff0 	addik	r1, r1, -16
2003c12c:	fa610008 	swi	r19, r1, 8
2003c130:	fa81000c 	swi	r20, r1, 12
2003c134:	12610000 	addk	r19, r1, r0
2003c138:	96808000 	mfs	r20, rpc
2003c13c:	b000dffc 	imm	-8196
2003c140:	32945824 	addik	r20, r20, 22564
2003c144:	f8b30014 	swi	r5, r19, 20
2003c148:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003c14c:	e8730014 	lwi	r3, r19, 20
2003c150:	e8830004 	lwi	r4, r3, 4
2003c154:	e8730014 	lwi	r3, r19, 20
2003c158:	e8a3000c 	lwi	r5, r3, 12
2003c15c:	e8730018 	lwi	r3, r19, 24
2003c160:	64630402 	bslli	r3, r3, 2
2003c164:	10651800 	addk	r3, r5, r3
2003c168:	e8a30000 	lwi	r5, r3, 0
2003c16c:	e8730014 	lwi	r3, r19, 20
2003c170:	e8630000 	lwi	r3, r3, 0
2003c174:	3063ffff 	addik	r3, r3, -1
2003c178:	84651800 	and	r3, r5, r3
2003c17c:	64630402 	bslli	r3, r3, 2
2003c180:	10641800 	addk	r3, r4, r3
2003c184:	e8630000 	lwi	r3, r3, 0
2003c188:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003c18c:	e8730014 	lwi	r3, r19, 20
2003c190:	e883000c 	lwi	r4, r3, 12
2003c194:	e8730018 	lwi	r3, r19, 24
2003c198:	64630402 	bslli	r3, r3, 2
2003c19c:	10641800 	addk	r3, r4, r3
2003c1a0:	e8830000 	lwi	r4, r3, 0
2003c1a4:	30840001 	addik	r4, r4, 1
2003c1a8:	f8830000 	swi	r4, r3, 0
    return value;
2003c1ac:	e8730004 	lwi	r3, r19, 4
}
2003c1b0:	10330000 	addk	r1, r19, r0
2003c1b4:	ea610008 	lwi	r19, r1, 8
2003c1b8:	ea81000c 	lwi	r20, r1, 12
2003c1bc:	30210010 	addik	r1, r1, 16
2003c1c0:	b60f0008 	rtsd	r15, 8
2003c1c4:	80000000 	or	r0, r0, r0

2003c1c8 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003c1c8:	3021fff4 	addik	r1, r1, -12
2003c1cc:	fa610004 	swi	r19, r1, 4
2003c1d0:	fa810008 	swi	r20, r1, 8
2003c1d4:	12610000 	addk	r19, r1, r0
2003c1d8:	96808000 	mfs	r20, rpc
2003c1dc:	b000dffc 	imm	-8196
2003c1e0:	32945784 	addik	r20, r20, 22404
2003c1e4:	f8b30010 	swi	r5, r19, 16
2003c1e8:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003c1ec:	e8730010 	lwi	r3, r19, 16
2003c1f0:	e8830004 	lwi	r4, r3, 4
2003c1f4:	e8730010 	lwi	r3, r19, 16
2003c1f8:	e8630010 	lwi	r3, r3, 16
2003c1fc:	e8a30000 	lwi	r5, r3, 0
2003c200:	e8730010 	lwi	r3, r19, 16
2003c204:	e8630000 	lwi	r3, r3, 0
2003c208:	3063ffff 	addik	r3, r3, -1
2003c20c:	84651800 	and	r3, r5, r3
2003c210:	64630402 	bslli	r3, r3, 2
2003c214:	10641800 	addk	r3, r4, r3
2003c218:	e8930014 	lwi	r4, r19, 20
2003c21c:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2003c220:	e8730010 	lwi	r3, r19, 16
2003c224:	e8630010 	lwi	r3, r3, 16
2003c228:	e8830000 	lwi	r4, r3, 0
2003c22c:	30840001 	addik	r4, r4, 1
2003c230:	f8830000 	swi	r4, r3, 0
}
2003c234:	10330000 	addk	r1, r19, r0
2003c238:	ea610004 	lwi	r19, r1, 4
2003c23c:	ea810008 	lwi	r20, r1, 8
2003c240:	3021000c 	addik	r1, r1, 12
2003c244:	b60f0008 	rtsd	r15, 8
2003c248:	80000000 	or	r0, r0, r0

2003c24c <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003c24c:	3021fff4 	addik	r1, r1, -12
2003c250:	fa610004 	swi	r19, r1, 4
2003c254:	fa810008 	swi	r20, r1, 8
2003c258:	12610000 	addk	r19, r1, r0
2003c25c:	96808000 	mfs	r20, rpc
2003c260:	b000dffc 	imm	-8196
2003c264:	32945700 	addik	r20, r20, 22272
2003c268:	f8b30010 	swi	r5, r19, 16
2003c26c:	f8d30014 	swi	r6, r19, 20
2003c270:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003c274:	e8730010 	lwi	r3, r19, 16
2003c278:	e8630010 	lwi	r3, r3, 16
2003c27c:	e8830000 	lwi	r4, r3, 0
2003c280:	e8730010 	lwi	r3, r19, 16
2003c284:	e8a3000c 	lwi	r5, r3, 12
2003c288:	e8730014 	lwi	r3, r19, 20
2003c28c:	64630402 	bslli	r3, r3, 2
2003c290:	10651800 	addk	r3, r5, r3
2003c294:	e8630000 	lwi	r3, r3, 0
2003c298:	14a32000 	rsubk	r5, r3, r4
2003c29c:	30600001 	addik	r3, r0, 1
2003c2a0:	e8930018 	lwi	r4, r19, 24
2003c2a4:	16442803 	cmpu	r18, r4, r5
2003c2a8:	bcb20008 	bgei	r18, 8		// 2003c2b0
2003c2ac:	10600000 	addk	r3, r0, r0
2003c2b0:	a46300ff 	andi	r3, r3, 255
}
2003c2b4:	10330000 	addk	r1, r19, r0
2003c2b8:	ea610004 	lwi	r19, r1, 4
2003c2bc:	ea810008 	lwi	r20, r1, 8
2003c2c0:	3021000c 	addik	r1, r1, 12
2003c2c4:	b60f0008 	rtsd	r15, 8
2003c2c8:	80000000 	or	r0, r0, r0

2003c2cc <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003c2cc:	3021fff4 	addik	r1, r1, -12
2003c2d0:	fa610004 	swi	r19, r1, 4
2003c2d4:	fa810008 	swi	r20, r1, 8
2003c2d8:	12610000 	addk	r19, r1, r0
2003c2dc:	96808000 	mfs	r20, rpc
2003c2e0:	b000dffc 	imm	-8196
2003c2e4:	32945680 	addik	r20, r20, 22144
2003c2e8:	f8b30010 	swi	r5, r19, 16
2003c2ec:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003c2f0:	e8730010 	lwi	r3, r19, 16
2003c2f4:	e8630010 	lwi	r3, r3, 16
2003c2f8:	e8830000 	lwi	r4, r3, 0
2003c2fc:	e8730010 	lwi	r3, r19, 16
2003c300:	e8a3000c 	lwi	r5, r3, 12
2003c304:	e8730014 	lwi	r3, r19, 20
2003c308:	64630402 	bslli	r3, r3, 2
2003c30c:	10651800 	addk	r3, r5, r3
2003c310:	e8630000 	lwi	r3, r3, 0
2003c314:	14632000 	rsubk	r3, r3, r4
}
2003c318:	10330000 	addk	r1, r19, r0
2003c31c:	ea610004 	lwi	r19, r1, 4
2003c320:	ea810008 	lwi	r20, r1, 8
2003c324:	3021000c 	addik	r1, r1, 12
2003c328:	b60f0008 	rtsd	r15, 8
2003c32c:	80000000 	or	r0, r0, r0

2003c330 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003c330:	3021fff0 	addik	r1, r1, -16
2003c334:	fa610008 	swi	r19, r1, 8
2003c338:	fa81000c 	swi	r20, r1, 12
2003c33c:	12610000 	addk	r19, r1, r0
2003c340:	96808000 	mfs	r20, rpc
2003c344:	b000dffc 	imm	-8196
2003c348:	3294561c 	addik	r20, r20, 22044
2003c34c:	f8b30014 	swi	r5, r19, 20
2003c350:	f8d30018 	swi	r6, r19, 24
2003c354:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003c358:	f8130004 	swi	r0, r19, 4
2003c35c:	b800005c 	bri	92		// 2003c3b8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003c360:	e8730014 	lwi	r3, r19, 20
2003c364:	e8830000 	lwi	r4, r3, 0
2003c368:	e8730014 	lwi	r3, r19, 20
2003c36c:	e8a3000c 	lwi	r5, r3, 12
2003c370:	e8730004 	lwi	r3, r19, 4
2003c374:	64630402 	bslli	r3, r3, 2
2003c378:	10651800 	addk	r3, r5, r3
2003c37c:	e8a30000 	lwi	r5, r3, 0
2003c380:	e8730014 	lwi	r3, r19, 20
2003c384:	e8630010 	lwi	r3, r3, 16
2003c388:	e8630000 	lwi	r3, r3, 0
2003c38c:	14632800 	rsubk	r3, r3, r5
2003c390:	10641800 	addk	r3, r4, r3
2003c394:	30830001 	addik	r4, r3, 1
2003c398:	e873001c 	lwi	r3, r19, 28
2003c39c:	16441803 	cmpu	r18, r4, r3
2003c3a0:	bc52000c 	blti	r18, 12		// 2003c3ac
            return 0;
2003c3a4:	10600000 	addk	r3, r0, r0
2003c3a8:	b8000024 	bri	36		// 2003c3cc
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003c3ac:	e8730004 	lwi	r3, r19, 4
2003c3b0:	30630001 	addik	r3, r3, 1
2003c3b4:	f8730004 	swi	r3, r19, 4
2003c3b8:	e8930004 	lwi	r4, r19, 4
2003c3bc:	e8730018 	lwi	r3, r19, 24
2003c3c0:	16432003 	cmpu	r18, r3, r4
2003c3c4:	bc52ff9c 	blti	r18, -100		// 2003c360
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003c3c8:	30600001 	addik	r3, r0, 1
}
2003c3cc:	10330000 	addk	r1, r19, r0
2003c3d0:	ea610008 	lwi	r19, r1, 8
2003c3d4:	ea81000c 	lwi	r20, r1, 12
2003c3d8:	30210010 	addik	r1, r1, 16
2003c3dc:	b60f0008 	rtsd	r15, 8
2003c3e0:	80000000 	or	r0, r0, r0

2003c3e4 <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003c3e4:	3021ffe8 	addik	r1, r1, -24
2003c3e8:	fa610010 	swi	r19, r1, 16
2003c3ec:	fa810014 	swi	r20, r1, 20
2003c3f0:	12610000 	addk	r19, r1, r0
2003c3f4:	96808000 	mfs	r20, rpc
2003c3f8:	b000dffc 	imm	-8196
2003c3fc:	32945568 	addik	r20, r20, 21864
2003c400:	f8b3001c 	swi	r5, r19, 28
2003c404:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003c408:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003c40c:	f8130004 	swi	r0, r19, 4
2003c410:	b8000054 	bri	84		// 2003c464
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003c414:	e873001c 	lwi	r3, r19, 28
2003c418:	e8630010 	lwi	r3, r3, 16
2003c41c:	e8830000 	lwi	r4, r3, 0
2003c420:	e873001c 	lwi	r3, r19, 28
2003c424:	e8a3000c 	lwi	r5, r3, 12
2003c428:	e8730004 	lwi	r3, r19, 4
2003c42c:	64630402 	bslli	r3, r3, 2
2003c430:	10651800 	addk	r3, r5, r3
2003c434:	e8630000 	lwi	r3, r3, 0
2003c438:	14632000 	rsubk	r3, r3, r4
2003c43c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003c440:	e8930008 	lwi	r4, r19, 8
2003c444:	e873000c 	lwi	r3, r19, 12
2003c448:	16441803 	cmpu	r18, r4, r3
2003c44c:	bcb20008 	bgei	r18, 8		// 2003c454
2003c450:	10640000 	addk	r3, r4, r0
2003c454:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003c458:	e8730004 	lwi	r3, r19, 4
2003c45c:	30630001 	addik	r3, r3, 1
2003c460:	f8730004 	swi	r3, r19, 4
2003c464:	e8930004 	lwi	r4, r19, 4
2003c468:	e8730020 	lwi	r3, r19, 32
2003c46c:	16432003 	cmpu	r18, r3, r4
2003c470:	bc52ffa4 	blti	r18, -92		// 2003c414
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003c474:	e873001c 	lwi	r3, r19, 28
2003c478:	e8830000 	lwi	r4, r3, 0
2003c47c:	e8730008 	lwi	r3, r19, 8
2003c480:	14632000 	rsubk	r3, r3, r4
}
2003c484:	10330000 	addk	r1, r19, r0
2003c488:	ea610010 	lwi	r19, r1, 16
2003c48c:	ea810014 	lwi	r20, r1, 20
2003c490:	30210018 	addik	r1, r1, 24
2003c494:	b60f0008 	rtsd	r15, 8
2003c498:	80000000 	or	r0, r0, r0

2003c49c <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003c49c:	3021fff0 	addik	r1, r1, -16
2003c4a0:	fa610008 	swi	r19, r1, 8
2003c4a4:	fa81000c 	swi	r20, r1, 12
2003c4a8:	12610000 	addk	r19, r1, r0
2003c4ac:	96808000 	mfs	r20, rpc
2003c4b0:	b000dffc 	imm	-8196
2003c4b4:	329454b0 	addik	r20, r20, 21680
2003c4b8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2003c4bc:	e8730014 	lwi	r3, r19, 20
2003c4c0:	e8630010 	lwi	r3, r3, 16
2003c4c4:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003c4c8:	f8130004 	swi	r0, r19, 4
2003c4cc:	b8000028 	bri	40		// 2003c4f4
        fifo->read_inds[i] = 0;
2003c4d0:	e8730014 	lwi	r3, r19, 20
2003c4d4:	e883000c 	lwi	r4, r3, 12
2003c4d8:	e8730004 	lwi	r3, r19, 4
2003c4dc:	64630402 	bslli	r3, r3, 2
2003c4e0:	10641800 	addk	r3, r4, r3
2003c4e4:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003c4e8:	e8730004 	lwi	r3, r19, 4
2003c4ec:	30630001 	addik	r3, r3, 1
2003c4f0:	f8730004 	swi	r3, r19, 4
2003c4f4:	e8730014 	lwi	r3, r19, 20
2003c4f8:	e8830008 	lwi	r4, r3, 8
2003c4fc:	e8730004 	lwi	r3, r19, 4
2003c500:	16441803 	cmpu	r18, r4, r3
2003c504:	bc52ffcc 	blti	r18, -52		// 2003c4d0
        fifo->read_inds[i] = 0;
    }
}
2003c508:	10330000 	addk	r1, r19, r0
2003c50c:	ea610008 	lwi	r19, r1, 8
2003c510:	ea81000c 	lwi	r20, r1, 12
2003c514:	30210010 	addik	r1, r1, 16
2003c518:	b60f0008 	rtsd	r15, 8
2003c51c:	80000000 	or	r0, r0, r0

2003c520 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003c520:	3021ffec 	addik	r1, r1, -20
2003c524:	fa61000c 	swi	r19, r1, 12
2003c528:	fa810010 	swi	r20, r1, 16
2003c52c:	12610000 	addk	r19, r1, r0
2003c530:	96808000 	mfs	r20, rpc
2003c534:	b000dffc 	imm	-8196
2003c538:	3294542c 	addik	r20, r20, 21548
2003c53c:	f8b30018 	swi	r5, r19, 24
2003c540:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003c544:	e8730018 	lwi	r3, r19, 24
2003c548:	e8830004 	lwi	r4, r3, 4
2003c54c:	e8730018 	lwi	r3, r19, 24
2003c550:	e8a3000c 	lwi	r5, r3, 12
2003c554:	e873001c 	lwi	r3, r19, 28
2003c558:	64630402 	bslli	r3, r3, 2
2003c55c:	10651800 	addk	r3, r5, r3
2003c560:	e8a30000 	lwi	r5, r3, 0
2003c564:	e8730018 	lwi	r3, r19, 24
2003c568:	e8630000 	lwi	r3, r3, 0
2003c56c:	3063ffff 	addik	r3, r3, -1
2003c570:	84651800 	and	r3, r5, r3
2003c574:	64630403 	bslli	r3, r3, 3
2003c578:	10641800 	addk	r3, r4, r3
2003c57c:	e8830000 	lwi	r4, r3, 0
2003c580:	e8a30004 	lwi	r5, r3, 4
2003c584:	f8930004 	swi	r4, r19, 4
2003c588:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2003c58c:	e8730018 	lwi	r3, r19, 24
2003c590:	e883000c 	lwi	r4, r3, 12
2003c594:	e873001c 	lwi	r3, r19, 28
2003c598:	64630402 	bslli	r3, r3, 2
2003c59c:	10641800 	addk	r3, r4, r3
2003c5a0:	e8830000 	lwi	r4, r3, 0
2003c5a4:	30840001 	addik	r4, r4, 1
2003c5a8:	f8830000 	swi	r4, r3, 0
    return value;
2003c5ac:	e8930004 	lwi	r4, r19, 4
2003c5b0:	e8b30008 	lwi	r5, r19, 8
}
2003c5b4:	10640000 	addk	r3, r4, r0
2003c5b8:	10850000 	addk	r4, r5, r0
2003c5bc:	10330000 	addk	r1, r19, r0
2003c5c0:	ea61000c 	lwi	r19, r1, 12
2003c5c4:	ea810010 	lwi	r20, r1, 16
2003c5c8:	30210014 	addik	r1, r1, 20
2003c5cc:	b60f0008 	rtsd	r15, 8
2003c5d0:	80000000 	or	r0, r0, r0

2003c5d4 <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003c5d4:	3021fff4 	addik	r1, r1, -12
2003c5d8:	fa610004 	swi	r19, r1, 4
2003c5dc:	fa810008 	swi	r20, r1, 8
2003c5e0:	12610000 	addk	r19, r1, r0
2003c5e4:	96808000 	mfs	r20, rpc
2003c5e8:	b000dffc 	imm	-8196
2003c5ec:	32945378 	addik	r20, r20, 21368
2003c5f0:	f8b30010 	swi	r5, r19, 16
2003c5f4:	f8d30014 	swi	r6, r19, 20
2003c5f8:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003c5fc:	e8730010 	lwi	r3, r19, 16
2003c600:	e8830004 	lwi	r4, r3, 4
2003c604:	e8730010 	lwi	r3, r19, 16
2003c608:	e8630010 	lwi	r3, r3, 16
2003c60c:	e8a30000 	lwi	r5, r3, 0
2003c610:	e8730010 	lwi	r3, r19, 16
2003c614:	e8630000 	lwi	r3, r3, 0
2003c618:	3063ffff 	addik	r3, r3, -1
2003c61c:	84651800 	and	r3, r5, r3
2003c620:	64630403 	bslli	r3, r3, 3
2003c624:	10641800 	addk	r3, r4, r3
2003c628:	e8930014 	lwi	r4, r19, 20
2003c62c:	e8b30018 	lwi	r5, r19, 24
2003c630:	f8830000 	swi	r4, r3, 0
2003c634:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2003c638:	e8730010 	lwi	r3, r19, 16
2003c63c:	e8630010 	lwi	r3, r3, 16
2003c640:	e8830000 	lwi	r4, r3, 0
2003c644:	30840001 	addik	r4, r4, 1
2003c648:	f8830000 	swi	r4, r3, 0
}
2003c64c:	10330000 	addk	r1, r19, r0
2003c650:	ea610004 	lwi	r19, r1, 4
2003c654:	ea810008 	lwi	r20, r1, 8
2003c658:	3021000c 	addik	r1, r1, 12
2003c65c:	b60f0008 	rtsd	r15, 8
2003c660:	80000000 	or	r0, r0, r0

2003c664 <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003c664:	3021fff4 	addik	r1, r1, -12
2003c668:	fa610004 	swi	r19, r1, 4
2003c66c:	fa810008 	swi	r20, r1, 8
2003c670:	12610000 	addk	r19, r1, r0
2003c674:	96808000 	mfs	r20, rpc
2003c678:	b000dffc 	imm	-8196
2003c67c:	329452e8 	addik	r20, r20, 21224
2003c680:	f8b30010 	swi	r5, r19, 16
2003c684:	f8d30014 	swi	r6, r19, 20
2003c688:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003c68c:	e8730010 	lwi	r3, r19, 16
2003c690:	e8630010 	lwi	r3, r3, 16
2003c694:	e8830000 	lwi	r4, r3, 0
2003c698:	e8730010 	lwi	r3, r19, 16
2003c69c:	e8a3000c 	lwi	r5, r3, 12
2003c6a0:	e8730014 	lwi	r3, r19, 20
2003c6a4:	64630402 	bslli	r3, r3, 2
2003c6a8:	10651800 	addk	r3, r5, r3
2003c6ac:	e8630000 	lwi	r3, r3, 0
2003c6b0:	14a32000 	rsubk	r5, r3, r4
2003c6b4:	30600001 	addik	r3, r0, 1
2003c6b8:	e8930018 	lwi	r4, r19, 24
2003c6bc:	16442803 	cmpu	r18, r4, r5
2003c6c0:	bcb20008 	bgei	r18, 8		// 2003c6c8
2003c6c4:	10600000 	addk	r3, r0, r0
2003c6c8:	a46300ff 	andi	r3, r3, 255
}
2003c6cc:	10330000 	addk	r1, r19, r0
2003c6d0:	ea610004 	lwi	r19, r1, 4
2003c6d4:	ea810008 	lwi	r20, r1, 8
2003c6d8:	3021000c 	addik	r1, r1, 12
2003c6dc:	b60f0008 	rtsd	r15, 8
2003c6e0:	80000000 	or	r0, r0, r0

2003c6e4 <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003c6e4:	3021fff4 	addik	r1, r1, -12
2003c6e8:	fa610004 	swi	r19, r1, 4
2003c6ec:	fa810008 	swi	r20, r1, 8
2003c6f0:	12610000 	addk	r19, r1, r0
2003c6f4:	96808000 	mfs	r20, rpc
2003c6f8:	b000dffc 	imm	-8196
2003c6fc:	32945268 	addik	r20, r20, 21096
2003c700:	f8b30010 	swi	r5, r19, 16
2003c704:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003c708:	e8730010 	lwi	r3, r19, 16
2003c70c:	e8630010 	lwi	r3, r3, 16
2003c710:	e8830000 	lwi	r4, r3, 0
2003c714:	e8730010 	lwi	r3, r19, 16
2003c718:	e8a3000c 	lwi	r5, r3, 12
2003c71c:	e8730014 	lwi	r3, r19, 20
2003c720:	64630402 	bslli	r3, r3, 2
2003c724:	10651800 	addk	r3, r5, r3
2003c728:	e8630000 	lwi	r3, r3, 0
2003c72c:	14632000 	rsubk	r3, r3, r4
}
2003c730:	10330000 	addk	r1, r19, r0
2003c734:	ea610004 	lwi	r19, r1, 4
2003c738:	ea810008 	lwi	r20, r1, 8
2003c73c:	3021000c 	addik	r1, r1, 12
2003c740:	b60f0008 	rtsd	r15, 8
2003c744:	80000000 	or	r0, r0, r0

2003c748 <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003c748:	3021fff0 	addik	r1, r1, -16
2003c74c:	fa610008 	swi	r19, r1, 8
2003c750:	fa81000c 	swi	r20, r1, 12
2003c754:	12610000 	addk	r19, r1, r0
2003c758:	96808000 	mfs	r20, rpc
2003c75c:	b000dffc 	imm	-8196
2003c760:	32945204 	addik	r20, r20, 20996
2003c764:	f8b30014 	swi	r5, r19, 20
2003c768:	f8d30018 	swi	r6, r19, 24
2003c76c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003c770:	f8130004 	swi	r0, r19, 4
2003c774:	b800005c 	bri	92		// 2003c7d0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003c778:	e8730014 	lwi	r3, r19, 20
2003c77c:	e8830000 	lwi	r4, r3, 0
2003c780:	e8730014 	lwi	r3, r19, 20
2003c784:	e8a3000c 	lwi	r5, r3, 12
2003c788:	e8730004 	lwi	r3, r19, 4
2003c78c:	64630402 	bslli	r3, r3, 2
2003c790:	10651800 	addk	r3, r5, r3
2003c794:	e8a30000 	lwi	r5, r3, 0
2003c798:	e8730014 	lwi	r3, r19, 20
2003c79c:	e8630010 	lwi	r3, r3, 16
2003c7a0:	e8630000 	lwi	r3, r3, 0
2003c7a4:	14632800 	rsubk	r3, r3, r5
2003c7a8:	10641800 	addk	r3, r4, r3
2003c7ac:	30830001 	addik	r4, r3, 1
2003c7b0:	e873001c 	lwi	r3, r19, 28
2003c7b4:	16441803 	cmpu	r18, r4, r3
2003c7b8:	bc52000c 	blti	r18, 12		// 2003c7c4
            return 0;
2003c7bc:	10600000 	addk	r3, r0, r0
2003c7c0:	b8000024 	bri	36		// 2003c7e4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003c7c4:	e8730004 	lwi	r3, r19, 4
2003c7c8:	30630001 	addik	r3, r3, 1
2003c7cc:	f8730004 	swi	r3, r19, 4
2003c7d0:	e8930004 	lwi	r4, r19, 4
2003c7d4:	e8730018 	lwi	r3, r19, 24
2003c7d8:	16432003 	cmpu	r18, r3, r4
2003c7dc:	bc52ff9c 	blti	r18, -100		// 2003c778
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003c7e0:	30600001 	addik	r3, r0, 1
}
2003c7e4:	10330000 	addk	r1, r19, r0
2003c7e8:	ea610008 	lwi	r19, r1, 8
2003c7ec:	ea81000c 	lwi	r20, r1, 12
2003c7f0:	30210010 	addik	r1, r1, 16
2003c7f4:	b60f0008 	rtsd	r15, 8
2003c7f8:	80000000 	or	r0, r0, r0

2003c7fc <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003c7fc:	3021ffe8 	addik	r1, r1, -24
2003c800:	fa610010 	swi	r19, r1, 16
2003c804:	fa810014 	swi	r20, r1, 20
2003c808:	12610000 	addk	r19, r1, r0
2003c80c:	96808000 	mfs	r20, rpc
2003c810:	b000dffc 	imm	-8196
2003c814:	32945150 	addik	r20, r20, 20816
2003c818:	f8b3001c 	swi	r5, r19, 28
2003c81c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003c820:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003c824:	f8130004 	swi	r0, r19, 4
2003c828:	b8000054 	bri	84		// 2003c87c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003c82c:	e873001c 	lwi	r3, r19, 28
2003c830:	e8630010 	lwi	r3, r3, 16
2003c834:	e8830000 	lwi	r4, r3, 0
2003c838:	e873001c 	lwi	r3, r19, 28
2003c83c:	e8a3000c 	lwi	r5, r3, 12
2003c840:	e8730004 	lwi	r3, r19, 4
2003c844:	64630402 	bslli	r3, r3, 2
2003c848:	10651800 	addk	r3, r5, r3
2003c84c:	e8630000 	lwi	r3, r3, 0
2003c850:	14632000 	rsubk	r3, r3, r4
2003c854:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003c858:	e8930008 	lwi	r4, r19, 8
2003c85c:	e873000c 	lwi	r3, r19, 12
2003c860:	16441803 	cmpu	r18, r4, r3
2003c864:	bcb20008 	bgei	r18, 8		// 2003c86c
2003c868:	10640000 	addk	r3, r4, r0
2003c86c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003c870:	e8730004 	lwi	r3, r19, 4
2003c874:	30630001 	addik	r3, r3, 1
2003c878:	f8730004 	swi	r3, r19, 4
2003c87c:	e8930004 	lwi	r4, r19, 4
2003c880:	e8730020 	lwi	r3, r19, 32
2003c884:	16432003 	cmpu	r18, r3, r4
2003c888:	bc52ffa4 	blti	r18, -92		// 2003c82c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003c88c:	e873001c 	lwi	r3, r19, 28
2003c890:	e8830000 	lwi	r4, r3, 0
2003c894:	e8730008 	lwi	r3, r19, 8
2003c898:	14632000 	rsubk	r3, r3, r4
}
2003c89c:	10330000 	addk	r1, r19, r0
2003c8a0:	ea610010 	lwi	r19, r1, 16
2003c8a4:	ea810014 	lwi	r20, r1, 20
2003c8a8:	30210018 	addik	r1, r1, 24
2003c8ac:	b60f0008 	rtsd	r15, 8
2003c8b0:	80000000 	or	r0, r0, r0

2003c8b4 <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003c8b4:	3021fff0 	addik	r1, r1, -16
2003c8b8:	fa610008 	swi	r19, r1, 8
2003c8bc:	fa81000c 	swi	r20, r1, 12
2003c8c0:	12610000 	addk	r19, r1, r0
2003c8c4:	96808000 	mfs	r20, rpc
2003c8c8:	b000dffc 	imm	-8196
2003c8cc:	32945098 	addik	r20, r20, 20632
2003c8d0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2003c8d4:	e8730014 	lwi	r3, r19, 20
2003c8d8:	e8630010 	lwi	r3, r3, 16
2003c8dc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003c8e0:	f8130004 	swi	r0, r19, 4
2003c8e4:	b8000028 	bri	40		// 2003c90c
        fifo->read_inds[i] = 0;
2003c8e8:	e8730014 	lwi	r3, r19, 20
2003c8ec:	e883000c 	lwi	r4, r3, 12
2003c8f0:	e8730004 	lwi	r3, r19, 4
2003c8f4:	64630402 	bslli	r3, r3, 2
2003c8f8:	10641800 	addk	r3, r4, r3
2003c8fc:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003c900:	e8730004 	lwi	r3, r19, 4
2003c904:	30630001 	addik	r3, r3, 1
2003c908:	f8730004 	swi	r3, r19, 4
2003c90c:	e8730014 	lwi	r3, r19, 20
2003c910:	e8830008 	lwi	r4, r3, 8
2003c914:	e8730004 	lwi	r3, r19, 4
2003c918:	16441803 	cmpu	r18, r4, r3
2003c91c:	bc52ffcc 	blti	r18, -52		// 2003c8e8
        fifo->read_inds[i] = 0;
    }
}
2003c920:	10330000 	addk	r1, r19, r0
2003c924:	ea610008 	lwi	r19, r1, 8
2003c928:	ea81000c 	lwi	r20, r1, 12
2003c92c:	30210010 	addik	r1, r1, 16
2003c930:	b60f0008 	rtsd	r15, 8
2003c934:	80000000 	or	r0, r0, r0

2003c938 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003c938:	3021fff0 	addik	r1, r1, -16
2003c93c:	fa610008 	swi	r19, r1, 8
2003c940:	fa81000c 	swi	r20, r1, 12
2003c944:	12610000 	addk	r19, r1, r0
2003c948:	96808000 	mfs	r20, rpc
2003c94c:	b000dffc 	imm	-8196
2003c950:	32945014 	addik	r20, r20, 20500
2003c954:	f8b30014 	swi	r5, r19, 20
2003c958:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003c95c:	e8730014 	lwi	r3, r19, 20
2003c960:	e8830004 	lwi	r4, r3, 4
2003c964:	e8730014 	lwi	r3, r19, 20
2003c968:	e8a3000c 	lwi	r5, r3, 12
2003c96c:	e8730018 	lwi	r3, r19, 24
2003c970:	64630402 	bslli	r3, r3, 2
2003c974:	10651800 	addk	r3, r5, r3
2003c978:	e8a30000 	lwi	r5, r3, 0
2003c97c:	e8730014 	lwi	r3, r19, 20
2003c980:	e8630000 	lwi	r3, r3, 0
2003c984:	3063ffff 	addik	r3, r3, -1
2003c988:	84651800 	and	r3, r5, r3
2003c98c:	64630402 	bslli	r3, r3, 2
2003c990:	10641800 	addk	r3, r4, r3
2003c994:	e8630000 	lwi	r3, r3, 0
2003c998:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003c99c:	e8730014 	lwi	r3, r19, 20
2003c9a0:	e883000c 	lwi	r4, r3, 12
2003c9a4:	e8730018 	lwi	r3, r19, 24
2003c9a8:	64630402 	bslli	r3, r3, 2
2003c9ac:	10641800 	addk	r3, r4, r3
2003c9b0:	e8830000 	lwi	r4, r3, 0
2003c9b4:	30840001 	addik	r4, r4, 1
2003c9b8:	f8830000 	swi	r4, r3, 0
    return value;
2003c9bc:	e8730004 	lwi	r3, r19, 4
}
2003c9c0:	10330000 	addk	r1, r19, r0
2003c9c4:	ea610008 	lwi	r19, r1, 8
2003c9c8:	ea81000c 	lwi	r20, r1, 12
2003c9cc:	30210010 	addik	r1, r1, 16
2003c9d0:	b60f0008 	rtsd	r15, 8
2003c9d4:	80000000 	or	r0, r0, r0

2003c9d8 <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003c9d8:	3021fff4 	addik	r1, r1, -12
2003c9dc:	fa610004 	swi	r19, r1, 4
2003c9e0:	fa810008 	swi	r20, r1, 8
2003c9e4:	12610000 	addk	r19, r1, r0
2003c9e8:	96808000 	mfs	r20, rpc
2003c9ec:	b000dffc 	imm	-8196
2003c9f0:	32944f74 	addik	r20, r20, 20340
2003c9f4:	f8b30010 	swi	r5, r19, 16
2003c9f8:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003c9fc:	e8730010 	lwi	r3, r19, 16
2003ca00:	e8830004 	lwi	r4, r3, 4
2003ca04:	e8730010 	lwi	r3, r19, 16
2003ca08:	e8630010 	lwi	r3, r3, 16
2003ca0c:	e8a30000 	lwi	r5, r3, 0
2003ca10:	e8730010 	lwi	r3, r19, 16
2003ca14:	e8630000 	lwi	r3, r3, 0
2003ca18:	3063ffff 	addik	r3, r3, -1
2003ca1c:	84651800 	and	r3, r5, r3
2003ca20:	64630402 	bslli	r3, r3, 2
2003ca24:	10641800 	addk	r3, r4, r3
2003ca28:	e8930014 	lwi	r4, r19, 20
2003ca2c:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2003ca30:	e8730010 	lwi	r3, r19, 16
2003ca34:	e8630010 	lwi	r3, r3, 16
2003ca38:	e8830000 	lwi	r4, r3, 0
2003ca3c:	30840001 	addik	r4, r4, 1
2003ca40:	f8830000 	swi	r4, r3, 0
}
2003ca44:	10330000 	addk	r1, r19, r0
2003ca48:	ea610004 	lwi	r19, r1, 4
2003ca4c:	ea810008 	lwi	r20, r1, 8
2003ca50:	3021000c 	addik	r1, r1, 12
2003ca54:	b60f0008 	rtsd	r15, 8
2003ca58:	80000000 	or	r0, r0, r0

2003ca5c <read_PQF_AC>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_PQF_AC() {
2003ca5c:	3021ffdc 	addik	r1, r1, -36
2003ca60:	f9e10000 	swi	r15, r1, 0
2003ca64:	fa61001c 	swi	r19, r1, 28
2003ca68:	fa810020 	swi	r20, r1, 32
2003ca6c:	12610000 	addk	r19, r1, r0
2003ca70:	96808000 	mfs	r20, rpc
2003ca74:	b000dffc 	imm	-8196
2003ca78:	32944eec 	addik	r20, r20, 20204
		index_PQF_AC = decoder_texture_IAP_PQF_AC->read_inds[0];
2003ca7c:	b0000000 	imm	0
2003ca80:	e8740b94 	lwi	r3, r20, 2964
2003ca84:	e8630000 	lwi	r3, r3, 0
2003ca88:	e863000c 	lwi	r3, r3, 12
2003ca8c:	e8830000 	lwi	r4, r3, 0
2003ca90:	b0000000 	imm	0
2003ca94:	e8740ba4 	lwi	r3, r20, 2980
2003ca98:	f8830000 	swi	r4, r3, 0
		numTokens_PQF_AC = index_PQF_AC + fifo_i16_get_num_tokens(decoder_texture_IAP_PQF_AC, 0);
2003ca9c:	b0000000 	imm	0
2003caa0:	e8740b94 	lwi	r3, r20, 2964
2003caa4:	e8630000 	lwi	r3, r3, 0
2003caa8:	10a30000 	addk	r5, r3, r0
2003caac:	10c00000 	addk	r6, r0, r0
2003cab0:	b0000000 	imm	0
2003cab4:	e8940b8c 	lwi	r4, r20, 2956
2003cab8:	99fc2000 	brald	r15, r4
2003cabc:	80000000 	or	r0, r0, r0
2003cac0:	10830000 	addk	r4, r3, r0
2003cac4:	b0000000 	imm	0
2003cac8:	e8740ba4 	lwi	r3, r20, 2980
2003cacc:	e8630000 	lwi	r3, r3, 0
2003cad0:	10841800 	addk	r4, r4, r3
2003cad4:	b0000000 	imm	0
2003cad8:	e8740ba8 	lwi	r3, r20, 2984
2003cadc:	f8830000 	swi	r4, r3, 0
	}
2003cae0:	e9e10000 	lwi	r15, r1, 0
2003cae4:	10330000 	addk	r1, r19, r0
2003cae8:	ea61001c 	lwi	r19, r1, 28
2003caec:	ea810020 	lwi	r20, r1, 32
2003caf0:	30210024 	addik	r1, r1, 36
2003caf4:	b60f0008 	rtsd	r15, 8
2003caf8:	80000000 	or	r0, r0, r0

2003cafc <read_end_PQF_AC>:
	
	static void read_end_PQF_AC() {
2003cafc:	3021fff4 	addik	r1, r1, -12
2003cb00:	fa610004 	swi	r19, r1, 4
2003cb04:	fa810008 	swi	r20, r1, 8
2003cb08:	12610000 	addk	r19, r1, r0
2003cb0c:	96808000 	mfs	r20, rpc
2003cb10:	b000dffc 	imm	-8196
2003cb14:	32944e50 	addik	r20, r20, 20048
		decoder_texture_IAP_PQF_AC->read_inds[0] = index_PQF_AC;
2003cb18:	b0000000 	imm	0
2003cb1c:	e8740b94 	lwi	r3, r20, 2964
2003cb20:	e8630000 	lwi	r3, r3, 0
2003cb24:	e863000c 	lwi	r3, r3, 12
2003cb28:	b0000000 	imm	0
2003cb2c:	e8940ba4 	lwi	r4, r20, 2980
2003cb30:	e8840000 	lwi	r4, r4, 0
2003cb34:	f8830000 	swi	r4, r3, 0
	}
2003cb38:	10330000 	addk	r1, r19, r0
2003cb3c:	ea610004 	lwi	r19, r1, 4
2003cb40:	ea810008 	lwi	r20, r1, 8
2003cb44:	3021000c 	addik	r1, r1, 12
2003cb48:	b60f0008 	rtsd	r15, 8
2003cb4c:	80000000 	or	r0, r0, r0

2003cb50 <read_PTR>:
	static void read_PTR() {
2003cb50:	3021ffdc 	addik	r1, r1, -36
2003cb54:	f9e10000 	swi	r15, r1, 0
2003cb58:	fa61001c 	swi	r19, r1, 28
2003cb5c:	fa810020 	swi	r20, r1, 32
2003cb60:	12610000 	addk	r19, r1, r0
2003cb64:	96808000 	mfs	r20, rpc
2003cb68:	b000dffc 	imm	-8196
2003cb6c:	32944df8 	addik	r20, r20, 19960
		index_PTR = decoder_texture_IAP_PTR->read_inds[0];
2003cb70:	b0000000 	imm	0
2003cb74:	e8740b9c 	lwi	r3, r20, 2972
2003cb78:	e8630000 	lwi	r3, r3, 0
2003cb7c:	e863000c 	lwi	r3, r3, 12
2003cb80:	e8830000 	lwi	r4, r3, 0
2003cb84:	b0000000 	imm	0
2003cb88:	e8740bac 	lwi	r3, r20, 2988
2003cb8c:	f8830000 	swi	r4, r3, 0
		numTokens_PTR = index_PTR + fifo_i16_get_num_tokens(decoder_texture_IAP_PTR, 0);
2003cb90:	b0000000 	imm	0
2003cb94:	e8740b9c 	lwi	r3, r20, 2972
2003cb98:	e8630000 	lwi	r3, r3, 0
2003cb9c:	10a30000 	addk	r5, r3, r0
2003cba0:	10c00000 	addk	r6, r0, r0
2003cba4:	b0000000 	imm	0
2003cba8:	e8940b8c 	lwi	r4, r20, 2956
2003cbac:	99fc2000 	brald	r15, r4
2003cbb0:	80000000 	or	r0, r0, r0
2003cbb4:	10830000 	addk	r4, r3, r0
2003cbb8:	b0000000 	imm	0
2003cbbc:	e8740bac 	lwi	r3, r20, 2988
2003cbc0:	e8630000 	lwi	r3, r3, 0
2003cbc4:	10841800 	addk	r4, r4, r3
2003cbc8:	b0000000 	imm	0
2003cbcc:	e8740bb0 	lwi	r3, r20, 2992
2003cbd0:	f8830000 	swi	r4, r3, 0
	}
2003cbd4:	e9e10000 	lwi	r15, r1, 0
2003cbd8:	10330000 	addk	r1, r19, r0
2003cbdc:	ea61001c 	lwi	r19, r1, 28
2003cbe0:	ea810020 	lwi	r20, r1, 32
2003cbe4:	30210024 	addik	r1, r1, 36
2003cbe8:	b60f0008 	rtsd	r15, 8
2003cbec:	80000000 	or	r0, r0, r0

2003cbf0 <read_end_PTR>:
	
	static void read_end_PTR() {
2003cbf0:	3021fff4 	addik	r1, r1, -12
2003cbf4:	fa610004 	swi	r19, r1, 4
2003cbf8:	fa810008 	swi	r20, r1, 8
2003cbfc:	12610000 	addk	r19, r1, r0
2003cc00:	96808000 	mfs	r20, rpc
2003cc04:	b000dffc 	imm	-8196
2003cc08:	32944d5c 	addik	r20, r20, 19804
		decoder_texture_IAP_PTR->read_inds[0] = index_PTR;
2003cc0c:	b0000000 	imm	0
2003cc10:	e8740b9c 	lwi	r3, r20, 2972
2003cc14:	e8630000 	lwi	r3, r3, 0
2003cc18:	e863000c 	lwi	r3, r3, 12
2003cc1c:	b0000000 	imm	0
2003cc20:	e8940bac 	lwi	r4, r20, 2988
2003cc24:	e8840000 	lwi	r4, r4, 0
2003cc28:	f8830000 	swi	r4, r3, 0
	}
2003cc2c:	10330000 	addk	r1, r19, r0
2003cc30:	ea610004 	lwi	r19, r1, 4
2003cc34:	ea810008 	lwi	r20, r1, 8
2003cc38:	3021000c 	addik	r1, r1, 12
2003cc3c:	b60f0008 	rtsd	r15, 8
2003cc40:	80000000 	or	r0, r0, r0

2003cc44 <read_AC_PRED_DIR>:
	static void read_AC_PRED_DIR() {
2003cc44:	3021ffdc 	addik	r1, r1, -36
2003cc48:	f9e10000 	swi	r15, r1, 0
2003cc4c:	fa61001c 	swi	r19, r1, 28
2003cc50:	fa810020 	swi	r20, r1, 32
2003cc54:	12610000 	addk	r19, r1, r0
2003cc58:	96808000 	mfs	r20, rpc
2003cc5c:	b000dffc 	imm	-8196
2003cc60:	32944d04 	addik	r20, r20, 19716
		index_AC_PRED_DIR = decoder_texture_IAP_AC_PRED_DIR->read_inds[0];
2003cc64:	b0000000 	imm	0
2003cc68:	e8740ba0 	lwi	r3, r20, 2976
2003cc6c:	e8630000 	lwi	r3, r3, 0
2003cc70:	e863000c 	lwi	r3, r3, 12
2003cc74:	e8830000 	lwi	r4, r3, 0
2003cc78:	b0000000 	imm	0
2003cc7c:	e8740bb4 	lwi	r3, r20, 2996
2003cc80:	f8830000 	swi	r4, r3, 0
		numTokens_AC_PRED_DIR = index_AC_PRED_DIR + fifo_i8_get_num_tokens(decoder_texture_IAP_AC_PRED_DIR, 0);
2003cc84:	b0000000 	imm	0
2003cc88:	e8740ba0 	lwi	r3, r20, 2976
2003cc8c:	e8630000 	lwi	r3, r3, 0
2003cc90:	10a30000 	addk	r5, r3, r0
2003cc94:	10c00000 	addk	r6, r0, r0
2003cc98:	b0000000 	imm	0
2003cc9c:	e8940b88 	lwi	r4, r20, 2952
2003cca0:	99fc2000 	brald	r15, r4
2003cca4:	80000000 	or	r0, r0, r0
2003cca8:	10830000 	addk	r4, r3, r0
2003ccac:	b0000000 	imm	0
2003ccb0:	e8740bb4 	lwi	r3, r20, 2996
2003ccb4:	e8630000 	lwi	r3, r3, 0
2003ccb8:	10841800 	addk	r4, r4, r3
2003ccbc:	b0000000 	imm	0
2003ccc0:	e8740bb8 	lwi	r3, r20, 3000
2003ccc4:	f8830000 	swi	r4, r3, 0
	}
2003ccc8:	e9e10000 	lwi	r15, r1, 0
2003cccc:	10330000 	addk	r1, r19, r0
2003ccd0:	ea61001c 	lwi	r19, r1, 28
2003ccd4:	ea810020 	lwi	r20, r1, 32
2003ccd8:	30210024 	addik	r1, r1, 36
2003ccdc:	b60f0008 	rtsd	r15, 8
2003cce0:	80000000 	or	r0, r0, r0

2003cce4 <read_end_AC_PRED_DIR>:
	
	static void read_end_AC_PRED_DIR() {
2003cce4:	3021fff4 	addik	r1, r1, -12
2003cce8:	fa610004 	swi	r19, r1, 4
2003ccec:	fa810008 	swi	r20, r1, 8
2003ccf0:	12610000 	addk	r19, r1, r0
2003ccf4:	96808000 	mfs	r20, rpc
2003ccf8:	b000dffc 	imm	-8196
2003ccfc:	32944c68 	addik	r20, r20, 19560
		decoder_texture_IAP_AC_PRED_DIR->read_inds[0] = index_AC_PRED_DIR;
2003cd00:	b0000000 	imm	0
2003cd04:	e8740ba0 	lwi	r3, r20, 2976
2003cd08:	e8630000 	lwi	r3, r3, 0
2003cd0c:	e863000c 	lwi	r3, r3, 12
2003cd10:	b0000000 	imm	0
2003cd14:	e8940bb4 	lwi	r4, r20, 2996
2003cd18:	e8840000 	lwi	r4, r4, 0
2003cd1c:	f8830000 	swi	r4, r3, 0
	}
2003cd20:	10330000 	addk	r1, r19, r0
2003cd24:	ea610004 	lwi	r19, r1, 4
2003cd28:	ea810008 	lwi	r20, r1, 8
2003cd2c:	3021000c 	addik	r1, r1, 12
2003cd30:	b60f0008 	rtsd	r15, 8
2003cd34:	80000000 	or	r0, r0, r0

2003cd38 <write_QF_AC>:

	static void write_QF_AC() {
2003cd38:	3021ffdc 	addik	r1, r1, -36
2003cd3c:	f9e10000 	swi	r15, r1, 0
2003cd40:	fa61001c 	swi	r19, r1, 28
2003cd44:	fa810020 	swi	r20, r1, 32
2003cd48:	12610000 	addk	r19, r1, r0
2003cd4c:	96808000 	mfs	r20, rpc
2003cd50:	b000dffc 	imm	-8196
2003cd54:	32944c10 	addik	r20, r20, 19472
		index_QF_AC = (*decoder_texture_IAP_QF_AC->write_ind);
2003cd58:	b0000000 	imm	0
2003cd5c:	e8740b98 	lwi	r3, r20, 2968
2003cd60:	e8630000 	lwi	r3, r3, 0
2003cd64:	e8630010 	lwi	r3, r3, 16
2003cd68:	e8830000 	lwi	r4, r3, 0
2003cd6c:	b0000000 	imm	0
2003cd70:	e8740bbc 	lwi	r3, r20, 3004
2003cd74:	f8830000 	swi	r4, r3, 0
		numFree_QF_AC = index_QF_AC + fifo_i16_get_room(decoder_texture_IAP_QF_AC, NUM_READERS_QF_AC);
2003cd78:	b0000000 	imm	0
2003cd7c:	e8740b98 	lwi	r3, r20, 2968
2003cd80:	e8630000 	lwi	r3, r3, 0
2003cd84:	10a30000 	addk	r5, r3, r0
2003cd88:	30c00001 	addik	r6, r0, 1
2003cd8c:	b0000000 	imm	0
2003cd90:	e8940b90 	lwi	r4, r20, 2960
2003cd94:	99fc2000 	brald	r15, r4
2003cd98:	80000000 	or	r0, r0, r0
2003cd9c:	10830000 	addk	r4, r3, r0
2003cda0:	b0000000 	imm	0
2003cda4:	e8740bbc 	lwi	r3, r20, 3004
2003cda8:	e8630000 	lwi	r3, r3, 0
2003cdac:	10841800 	addk	r4, r4, r3
2003cdb0:	b0000000 	imm	0
2003cdb4:	e8740bc0 	lwi	r3, r20, 3008
2003cdb8:	f8830000 	swi	r4, r3, 0
	}
2003cdbc:	e9e10000 	lwi	r15, r1, 0
2003cdc0:	10330000 	addk	r1, r19, r0
2003cdc4:	ea61001c 	lwi	r19, r1, 28
2003cdc8:	ea810020 	lwi	r20, r1, 32
2003cdcc:	30210024 	addik	r1, r1, 36
2003cdd0:	b60f0008 	rtsd	r15, 8
2003cdd4:	80000000 	or	r0, r0, r0

2003cdd8 <write_end_QF_AC>:
	
	static void write_end_QF_AC() {
2003cdd8:	3021fff4 	addik	r1, r1, -12
2003cddc:	fa610004 	swi	r19, r1, 4
2003cde0:	fa810008 	swi	r20, r1, 8
2003cde4:	12610000 	addk	r19, r1, r0
2003cde8:	96808000 	mfs	r20, rpc
2003cdec:	b000dffc 	imm	-8196
2003cdf0:	32944b74 	addik	r20, r20, 19316
		(*decoder_texture_IAP_QF_AC->write_ind) = index_QF_AC;
2003cdf4:	b0000000 	imm	0
2003cdf8:	e8740b98 	lwi	r3, r20, 2968
2003cdfc:	e8630000 	lwi	r3, r3, 0
2003ce00:	e8630010 	lwi	r3, r3, 16
2003ce04:	b0000000 	imm	0
2003ce08:	e8940bbc 	lwi	r4, r20, 3004
2003ce0c:	e8840000 	lwi	r4, r4, 0
2003ce10:	f8830000 	swi	r4, r3, 0
	}
2003ce14:	10330000 	addk	r1, r19, r0
2003ce18:	ea610004 	lwi	r19, r1, 4
2003ce1c:	ea810008 	lwi	r20, r1, 8
2003ce20:	3021000c 	addik	r1, r1, 12
2003ce24:	b60f0008 	rtsd	r15, 8
2003ce28:	80000000 	or	r0, r0, r0

2003ce2c <isSchedulable_newvop>:
	// Functions/procedures


	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_newvop() {
2003ce2c:	3021ffec 	addik	r1, r1, -20
2003ce30:	fa61000c 	swi	r19, r1, 12
2003ce34:	fa810010 	swi	r20, r1, 16
2003ce38:	12610000 	addk	r19, r1, r0
2003ce3c:	96808000 	mfs	r20, rpc
2003ce40:	b000dffc 	imm	-8196
2003ce44:	32944b20 	addik	r20, r20, 19232
		i32 result;
		i8 s;
	
		s = tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR];
2003ce48:	b0000000 	imm	0
2003ce4c:	e8740ba0 	lwi	r3, r20, 2976
2003ce50:	e8630000 	lwi	r3, r3, 0
2003ce54:	e8830004 	lwi	r4, r3, 4
2003ce58:	b0000000 	imm	0
2003ce5c:	e8740bb4 	lwi	r3, r20, 2996
2003ce60:	e8630000 	lwi	r3, r3, 0
2003ce64:	a46301ff 	andi	r3, r3, 511
2003ce68:	10641800 	addk	r3, r4, r3
2003ce6c:	e0630000 	lbui	r3, r3, 0
2003ce70:	f0730004 	sbi	r3, r19, 4
		result = s == -2;
2003ce74:	e0730004 	lbui	r3, r19, 4
2003ce78:	90830060 	sext8	r4, r3
2003ce7c:	3060fffe 	addik	r3, r0, -2
2003ce80:	88641c00 	pcmpeq	r3, r4, r3
2003ce84:	a46300ff 	andi	r3, r3, 255
2003ce88:	f8730008 	swi	r3, r19, 8
		return result;
2003ce8c:	e8730008 	lwi	r3, r19, 8
	}
2003ce90:	10330000 	addk	r1, r19, r0
2003ce94:	ea61000c 	lwi	r19, r1, 12
2003ce98:	ea810010 	lwi	r20, r1, 16
2003ce9c:	30210014 	addik	r1, r1, 20
2003cea0:	b60f0008 	rtsd	r15, 8
2003cea4:	80000000 	or	r0, r0, r0

2003cea8 <newvop>:
	
	static void newvop() {
2003cea8:	3021ffd4 	addik	r1, r1, -44
2003ceac:	f9e10000 	swi	r15, r1, 0
2003ceb0:	fa610024 	swi	r19, r1, 36
2003ceb4:	fa810028 	swi	r20, r1, 40
2003ceb8:	12610000 	addk	r19, r1, r0
2003cebc:	96808000 	mfs	r20, rpc
2003cec0:	b000dffc 	imm	-8196
2003cec4:	32944aa0 	addik	r20, r20, 19104
	
		// Compute aligned port indexes
		i32 index_aligned_AC_PRED_DIR = index_AC_PRED_DIR % SIZE_AC_PRED_DIR;
2003cec8:	b0000000 	imm	0
2003cecc:	e8740bb4 	lwi	r3, r20, 2996
2003ced0:	e8630000 	lwi	r3, r3, 0
2003ced4:	a46301ff 	andi	r3, r3, 511
2003ced8:	f873001c 	swi	r3, r19, 28
	
		i8 s;
	
		s = tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR];
2003cedc:	b0000000 	imm	0
2003cee0:	e8740ba0 	lwi	r3, r20, 2976
2003cee4:	e8630000 	lwi	r3, r3, 0
2003cee8:	e8830004 	lwi	r4, r3, 4
2003ceec:	b0000000 	imm	0
2003cef0:	e8740bb4 	lwi	r3, r20, 2996
2003cef4:	e8630000 	lwi	r3, r3, 0
2003cef8:	a46301ff 	andi	r3, r3, 511
2003cefc:	10641800 	addk	r3, r4, r3
2003cf00:	e0630000 	lbui	r3, r3, 0
2003cf04:	f0730020 	sbi	r3, r19, 32
		comp = 0;
2003cf08:	b0000000 	imm	0
2003cf0c:	e8740bd0 	lwi	r3, r20, 3024
2003cf10:	f0030000 	sbi	r0, r3, 0
		ptr = 8;
2003cf14:	b0000000 	imm	0
2003cf18:	e8740bc4 	lwi	r3, r20, 3012
2003cf1c:	30800008 	addik	r4, r0, 8	// 8 <_vector_sw_exception>
2003cf20:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_AC_PRED_DIR += 1;
2003cf24:	b0000000 	imm	0
2003cf28:	e8740bb4 	lwi	r3, r20, 2996
2003cf2c:	e8630000 	lwi	r3, r3, 0
2003cf30:	30830001 	addik	r4, r3, 1
2003cf34:	b0000000 	imm	0
2003cf38:	e8740bb4 	lwi	r3, r20, 2996
2003cf3c:	f8830000 	swi	r4, r3, 0
		
		read_end_AC_PRED_DIR();
2003cf40:	b0000000 	imm	0
2003cf44:	e8740bf8 	lwi	r3, r20, 3064
2003cf48:	99fc1800 	brald	r15, r3
2003cf4c:	80000000 	or	r0, r0, r0
	}
2003cf50:	e9e10000 	lwi	r15, r1, 0
2003cf54:	10330000 	addk	r1, r19, r0
2003cf58:	ea610024 	lwi	r19, r1, 36
2003cf5c:	ea810028 	lwi	r20, r1, 40
2003cf60:	3021002c 	addik	r1, r1, 44
2003cf64:	b60f0008 	rtsd	r15, 8
2003cf68:	80000000 	or	r0, r0, r0

2003cf6c <isSchedulable_skip>:
	static i32 isSchedulable_skip() {
2003cf6c:	3021ffec 	addik	r1, r1, -20
2003cf70:	fa61000c 	swi	r19, r1, 12
2003cf74:	fa810010 	swi	r20, r1, 16
2003cf78:	12610000 	addk	r19, r1, r0
2003cf7c:	96808000 	mfs	r20, rpc
2003cf80:	b000dffc 	imm	-8196
2003cf84:	329449e0 	addik	r20, r20, 18912
		i32 result;
		i8 s;
	
		s = tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR];
2003cf88:	b0000000 	imm	0
2003cf8c:	e8740ba0 	lwi	r3, r20, 2976
2003cf90:	e8630000 	lwi	r3, r3, 0
2003cf94:	e8830004 	lwi	r4, r3, 4
2003cf98:	b0000000 	imm	0
2003cf9c:	e8740bb4 	lwi	r3, r20, 2996
2003cfa0:	e8630000 	lwi	r3, r3, 0
2003cfa4:	a46301ff 	andi	r3, r3, 511
2003cfa8:	10641800 	addk	r3, r4, r3
2003cfac:	e0630000 	lbui	r3, r3, 0
2003cfb0:	f0730004 	sbi	r3, r19, 4
		result = s < 0;
2003cfb4:	e0730004 	lbui	r3, r19, 4
2003cfb8:	64630007 	bsrli	r3, r3, 7
2003cfbc:	a46300ff 	andi	r3, r3, 255
2003cfc0:	f8730008 	swi	r3, r19, 8
		return result;
2003cfc4:	e8730008 	lwi	r3, r19, 8
	}
2003cfc8:	10330000 	addk	r1, r19, r0
2003cfcc:	ea61000c 	lwi	r19, r1, 12
2003cfd0:	ea810010 	lwi	r20, r1, 16
2003cfd4:	30210014 	addik	r1, r1, 20
2003cfd8:	b60f0008 	rtsd	r15, 8
2003cfdc:	80000000 	or	r0, r0, r0

2003cfe0 <skip>:
	
	static void skip() {
2003cfe0:	3021ffd4 	addik	r1, r1, -44
2003cfe4:	f9e10000 	swi	r15, r1, 0
2003cfe8:	fa610024 	swi	r19, r1, 36
2003cfec:	fa810028 	swi	r20, r1, 40
2003cff0:	12610000 	addk	r19, r1, r0
2003cff4:	96808000 	mfs	r20, rpc
2003cff8:	b000dffc 	imm	-8196
2003cffc:	32944968 	addik	r20, r20, 18792
	
		// Compute aligned port indexes
		i32 index_aligned_AC_PRED_DIR = index_AC_PRED_DIR % SIZE_AC_PRED_DIR;
2003d000:	b0000000 	imm	0
2003d004:	e8740bb4 	lwi	r3, r20, 2996
2003d008:	e8630000 	lwi	r3, r3, 0
2003d00c:	a46301ff 	andi	r3, r3, 511
2003d010:	f873001c 	swi	r3, r19, 28
	
		i8 s;
	
		s = tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR];
2003d014:	b0000000 	imm	0
2003d018:	e8740ba0 	lwi	r3, r20, 2976
2003d01c:	e8630000 	lwi	r3, r3, 0
2003d020:	e8830004 	lwi	r4, r3, 4
2003d024:	b0000000 	imm	0
2003d028:	e8740bb4 	lwi	r3, r20, 2996
2003d02c:	e8630000 	lwi	r3, r3, 0
2003d030:	a46301ff 	andi	r3, r3, 511
2003d034:	10641800 	addk	r3, r4, r3
2003d038:	e0630000 	lbui	r3, r3, 0
2003d03c:	f0730020 	sbi	r3, r19, 32
	
		// Update ports indexes
		index_AC_PRED_DIR += 1;
2003d040:	b0000000 	imm	0
2003d044:	e8740bb4 	lwi	r3, r20, 2996
2003d048:	e8630000 	lwi	r3, r3, 0
2003d04c:	30830001 	addik	r4, r3, 1
2003d050:	b0000000 	imm	0
2003d054:	e8740bb4 	lwi	r3, r20, 2996
2003d058:	f8830000 	swi	r4, r3, 0
		
		read_end_AC_PRED_DIR();
2003d05c:	b0000000 	imm	0
2003d060:	e8740bf8 	lwi	r3, r20, 3064
2003d064:	99fc1800 	brald	r15, r3
2003d068:	80000000 	or	r0, r0, r0
	}
2003d06c:	e9e10000 	lwi	r15, r1, 0
2003d070:	10330000 	addk	r1, r19, r0
2003d074:	ea610024 	lwi	r19, r1, 36
2003d078:	ea810028 	lwi	r20, r1, 40
2003d07c:	3021002c 	addik	r1, r1, 44
2003d080:	b60f0008 	rtsd	r15, 8
2003d084:	80000000 	or	r0, r0, r0

2003d088 <isSchedulable_start>:
	static i32 isSchedulable_start() {
2003d088:	3021fff0 	addik	r1, r1, -16
2003d08c:	fa610008 	swi	r19, r1, 8
2003d090:	fa81000c 	swi	r20, r1, 12
2003d094:	12610000 	addk	r19, r1, r0
2003d098:	96808000 	mfs	r20, rpc
2003d09c:	b000dffc 	imm	-8196
2003d0a0:	329448c4 	addik	r20, r20, 18628
		i32 result;
	
		result = 1;
2003d0a4:	30600001 	addik	r3, r0, 1
2003d0a8:	f8730004 	swi	r3, r19, 4
		return result;
2003d0ac:	e8730004 	lwi	r3, r19, 4
	}
2003d0b0:	10330000 	addk	r1, r19, r0
2003d0b4:	ea610008 	lwi	r19, r1, 8
2003d0b8:	ea81000c 	lwi	r20, r1, 12
2003d0bc:	30210010 	addik	r1, r1, 16
2003d0c0:	b60f0008 	rtsd	r15, 8
2003d0c4:	80000000 	or	r0, r0, r0

2003d0c8 <start>:
	
	static void start() {
2003d0c8:	3021ffd0 	addik	r1, r1, -48
2003d0cc:	f9e10000 	swi	r15, r1, 0
2003d0d0:	fa610028 	swi	r19, r1, 40
2003d0d4:	fa81002c 	swi	r20, r1, 44
2003d0d8:	12610000 	addk	r19, r1, r0
2003d0dc:	96808000 	mfs	r20, rpc
2003d0e0:	b000dffc 	imm	-8196
2003d0e4:	32944880 	addik	r20, r20, 18560
	
		// Compute aligned port indexes
		i32 index_aligned_AC_PRED_DIR = index_AC_PRED_DIR % SIZE_AC_PRED_DIR;
2003d0e8:	b0000000 	imm	0
2003d0ec:	e8740bb4 	lwi	r3, r20, 2996
2003d0f0:	e8630000 	lwi	r3, r3, 0
2003d0f4:	a46301ff 	andi	r3, r3, 511
2003d0f8:	f873001c 	swi	r3, r19, 28
		i32 index_aligned_PTR = index_PTR % SIZE_PTR;
2003d0fc:	b0000000 	imm	0
2003d100:	e8740bac 	lwi	r3, r20, 2988
2003d104:	e8630000 	lwi	r3, r3, 0
2003d108:	a46301ff 	andi	r3, r3, 511
2003d10c:	f8730020 	swi	r3, r19, 32
	
		i8 s;
		i16 p;
	
		s = tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR];
2003d110:	b0000000 	imm	0
2003d114:	e8740ba0 	lwi	r3, r20, 2976
2003d118:	e8630000 	lwi	r3, r3, 0
2003d11c:	e8830004 	lwi	r4, r3, 4
2003d120:	b0000000 	imm	0
2003d124:	e8740bb4 	lwi	r3, r20, 2996
2003d128:	e8630000 	lwi	r3, r3, 0
2003d12c:	a46301ff 	andi	r3, r3, 511
2003d130:	10641800 	addk	r3, r4, r3
2003d134:	e0630000 	lbui	r3, r3, 0
2003d138:	f0730024 	sbi	r3, r19, 36
		p = tokens_PTR[(index_PTR + (0)) % SIZE_PTR];
2003d13c:	b0000000 	imm	0
2003d140:	e8740b9c 	lwi	r3, r20, 2972
2003d144:	e8630000 	lwi	r3, r3, 0
2003d148:	e8830004 	lwi	r4, r3, 4
2003d14c:	b0000000 	imm	0
2003d150:	e8740bac 	lwi	r3, r20, 2988
2003d154:	e8630000 	lwi	r3, r3, 0
2003d158:	a46301ff 	andi	r3, r3, 511
2003d15c:	10631800 	addk	r3, r3, r3
2003d160:	10641800 	addk	r3, r4, r3
2003d164:	e4630000 	lhui	r3, r3, 0
2003d168:	f4730026 	shi	r3, r19, 38
		pred_ptr = p;
2003d16c:	b0000000 	imm	0
2003d170:	e8740bc8 	lwi	r3, r20, 3016
2003d174:	e4930026 	lhui	r4, r19, 38
2003d178:	f4830000 	shi	r4, r3, 0
		top = s == 2;
2003d17c:	e0730024 	lbui	r3, r19, 36
2003d180:	90830060 	sext8	r4, r3
2003d184:	30600002 	addik	r3, r0, 2
2003d188:	88641c00 	pcmpeq	r3, r4, r3
2003d18c:	a46300ff 	andi	r3, r3, 255
2003d190:	10830000 	addk	r4, r3, r0
2003d194:	b0000000 	imm	0
2003d198:	e8740bd4 	lwi	r3, r20, 3028
2003d19c:	f8830000 	swi	r4, r3, 0
		acpred_flag = s != 0;
2003d1a0:	e0730024 	lbui	r3, r19, 36
2003d1a4:	90830060 	sext8	r4, r3
2003d1a8:	10600000 	addk	r3, r0, r0
2003d1ac:	8c641c00 	pcmpne	r3, r4, r3
2003d1b0:	a46300ff 	andi	r3, r3, 255
2003d1b4:	10830000 	addk	r4, r3, r0
2003d1b8:	b0000000 	imm	0
2003d1bc:	e8740bd8 	lwi	r3, r20, 3032
2003d1c0:	f8830000 	swi	r4, r3, 0
	
		// Update ports indexes
		index_AC_PRED_DIR += 1;
2003d1c4:	b0000000 	imm	0
2003d1c8:	e8740bb4 	lwi	r3, r20, 2996
2003d1cc:	e8630000 	lwi	r3, r3, 0
2003d1d0:	30830001 	addik	r4, r3, 1
2003d1d4:	b0000000 	imm	0
2003d1d8:	e8740bb4 	lwi	r3, r20, 2996
2003d1dc:	f8830000 	swi	r4, r3, 0
		index_PTR += 1;
2003d1e0:	b0000000 	imm	0
2003d1e4:	e8740bac 	lwi	r3, r20, 2988
2003d1e8:	e8630000 	lwi	r3, r3, 0
2003d1ec:	30830001 	addik	r4, r3, 1
2003d1f0:	b0000000 	imm	0
2003d1f4:	e8740bac 	lwi	r3, r20, 2988
2003d1f8:	f8830000 	swi	r4, r3, 0
		
		read_end_AC_PRED_DIR();
2003d1fc:	b0000000 	imm	0
2003d200:	e8740bf8 	lwi	r3, r20, 3064
2003d204:	99fc1800 	brald	r15, r3
2003d208:	80000000 	or	r0, r0, r0
		read_end_PTR();
2003d20c:	b0000000 	imm	0
2003d210:	e8740bf0 	lwi	r3, r20, 3056
2003d214:	99fc1800 	brald	r15, r3
2003d218:	80000000 	or	r0, r0, r0
	}
2003d21c:	e9e10000 	lwi	r15, r1, 0
2003d220:	10330000 	addk	r1, r19, r0
2003d224:	ea610028 	lwi	r19, r1, 40
2003d228:	ea81002c 	lwi	r20, r1, 44
2003d22c:	30210030 	addik	r1, r1, 48
2003d230:	b60f0008 	rtsd	r15, 8
2003d234:	80000000 	or	r0, r0, r0

2003d238 <isSchedulable_advance>:
	static i32 isSchedulable_advance() {
2003d238:	3021fff0 	addik	r1, r1, -16
2003d23c:	fa610008 	swi	r19, r1, 8
2003d240:	fa81000c 	swi	r20, r1, 12
2003d244:	12610000 	addk	r19, r1, r0
2003d248:	96808000 	mfs	r20, rpc
2003d24c:	b000dffc 	imm	-8196
2003d250:	32944714 	addik	r20, r20, 18196
		i32 result;
	
		result = 1;
2003d254:	30600001 	addik	r3, r0, 1
2003d258:	f8730004 	swi	r3, r19, 4
		return result;
2003d25c:	e8730004 	lwi	r3, r19, 4
	}
2003d260:	10330000 	addk	r1, r19, r0
2003d264:	ea610008 	lwi	r19, r1, 8
2003d268:	ea81000c 	lwi	r20, r1, 12
2003d26c:	30210010 	addik	r1, r1, 16
2003d270:	b60f0008 	rtsd	r15, 8
2003d274:	80000000 	or	r0, r0, r0

2003d278 <advance>:
	
	static void advance() {
2003d278:	3021ffec 	addik	r1, r1, -20
2003d27c:	fa61000c 	swi	r19, r1, 12
2003d280:	fa810010 	swi	r20, r1, 16
2003d284:	12610000 	addk	r19, r1, r0
2003d288:	96808000 	mfs	r20, rpc
2003d28c:	b000dffc 	imm	-8196
2003d290:	329446d4 	addik	r20, r20, 18132
	
		i8 local_comp;
		i16 local_ptr;
		i32 local_BUF_SIZE;
	
		local_comp = comp;
2003d294:	b0000000 	imm	0
2003d298:	e8740bd0 	lwi	r3, r20, 3024
2003d29c:	e0630000 	lbui	r3, r3, 0
2003d2a0:	f0730004 	sbi	r3, r19, 4
		comp = local_comp + 1;
2003d2a4:	e0730004 	lbui	r3, r19, 4
2003d2a8:	30630001 	addik	r3, r3, 1
2003d2ac:	a46300ff 	andi	r3, r3, 255
2003d2b0:	90830060 	sext8	r4, r3
2003d2b4:	b0000000 	imm	0
2003d2b8:	e8740bd0 	lwi	r3, r20, 3024
2003d2bc:	f0830000 	sbi	r4, r3, 0
		local_comp = comp;
2003d2c0:	b0000000 	imm	0
2003d2c4:	e8740bd0 	lwi	r3, r20, 3024
2003d2c8:	e0630000 	lbui	r3, r3, 0
2003d2cc:	f0730004 	sbi	r3, r19, 4
		if (local_comp == 6) {
2003d2d0:	e0730004 	lbui	r3, r19, 4
2003d2d4:	90630060 	sext8	r3, r3
2003d2d8:	a8630006 	xori	r3, r3, 6
2003d2dc:	bc230094 	bnei	r3, 148		// 2003d370
			comp = 0;
2003d2e0:	b0000000 	imm	0
2003d2e4:	e8740bd0 	lwi	r3, r20, 3024
2003d2e8:	f0030000 	sbi	r0, r3, 0
			local_ptr = ptr;
2003d2ec:	b0000000 	imm	0
2003d2f0:	e8740bc4 	lwi	r3, r20, 3012
2003d2f4:	e4630000 	lhui	r3, r3, 0
2003d2f8:	f4730006 	shi	r3, r19, 6
			if (local_ptr == 8) {
2003d2fc:	e4730006 	lhui	r3, r19, 6
2003d300:	90630061 	sext16	r3, r3
2003d304:	a8630008 	xori	r3, r3, 8
2003d308:	bc230038 	bnei	r3, 56		// 2003d340
				local_BUF_SIZE = BUF_SIZE;
2003d30c:	30600070 	addik	r3, r0, 112	// 70 <deregister_tm_clones>
2003d310:	f8730008 	swi	r3, r19, 8
				ptr = local_BUF_SIZE - 8;
2003d314:	e8730008 	lwi	r3, r19, 8
2003d318:	b0000000 	imm	0
2003d31c:	a463ffff 	andi	r3, r3, -1
2003d320:	3063fff8 	addik	r3, r3, -8
2003d324:	b0000000 	imm	0
2003d328:	a463ffff 	andi	r3, r3, -1
2003d32c:	90830061 	sext16	r4, r3
2003d330:	b0000000 	imm	0
2003d334:	e8740bc4 	lwi	r3, r20, 3012
2003d338:	f4830000 	shi	r4, r3, 0
2003d33c:	b8000034 	bri	52		// 2003d370
			} else {
				local_ptr = ptr;
2003d340:	b0000000 	imm	0
2003d344:	e8740bc4 	lwi	r3, r20, 3012
2003d348:	e4630000 	lhui	r3, r3, 0
2003d34c:	f4730006 	shi	r3, r19, 6
				ptr = local_ptr - 8;
2003d350:	e4730006 	lhui	r3, r19, 6
2003d354:	3063fff8 	addik	r3, r3, -8
2003d358:	b0000000 	imm	0
2003d35c:	a463ffff 	andi	r3, r3, -1
2003d360:	90830061 	sext16	r4, r3
2003d364:	b0000000 	imm	0
2003d368:	e8740bc4 	lwi	r3, r20, 3012
2003d36c:	f4830000 	shi	r4, r3, 0
			}
		}
	
		// Update ports indexes
		
	}
2003d370:	10330000 	addk	r1, r19, r0
2003d374:	ea61000c 	lwi	r19, r1, 12
2003d378:	ea810010 	lwi	r20, r1, 16
2003d37c:	30210014 	addik	r1, r1, 20
2003d380:	b60f0008 	rtsd	r15, 8
2003d384:	80000000 	or	r0, r0, r0

2003d388 <isSchedulable_copy>:
	static i32 isSchedulable_copy() {
2003d388:	3021fff0 	addik	r1, r1, -16
2003d38c:	fa610008 	swi	r19, r1, 8
2003d390:	fa81000c 	swi	r20, r1, 12
2003d394:	12610000 	addk	r19, r1, r0
2003d398:	96808000 	mfs	r20, rpc
2003d39c:	b000dffc 	imm	-8196
2003d3a0:	329445c4 	addik	r20, r20, 17860
		i32 result;
	
		result = 1;
2003d3a4:	30600001 	addik	r3, r0, 1
2003d3a8:	f8730004 	swi	r3, r19, 4
		return result;
2003d3ac:	e8730004 	lwi	r3, r19, 4
	}
2003d3b0:	10330000 	addk	r1, r19, r0
2003d3b4:	ea610008 	lwi	r19, r1, 8
2003d3b8:	ea81000c 	lwi	r20, r1, 12
2003d3bc:	30210010 	addik	r1, r1, 16
2003d3c0:	b60f0008 	rtsd	r15, 8
2003d3c4:	80000000 	or	r0, r0, r0

2003d3c8 <copy>:
	
	static void copy() {
2003d3c8:	3021ffa4 	addik	r1, r1, -92
2003d3cc:	f9e10000 	swi	r15, r1, 0
2003d3d0:	fa610054 	swi	r19, r1, 84
2003d3d4:	fa810058 	swi	r20, r1, 88
2003d3d8:	12610000 	addk	r19, r1, r0
2003d3dc:	96808000 	mfs	r20, rpc
2003d3e0:	b000dffc 	imm	-8196
2003d3e4:	32944580 	addik	r20, r20, 17792
	
		// Compute aligned port indexes
		i32 index_aligned_PQF_AC = index_PQF_AC % SIZE_PQF_AC;
2003d3e8:	b0000000 	imm	0
2003d3ec:	e8740ba4 	lwi	r3, r20, 2980
2003d3f0:	e8630000 	lwi	r3, r3, 0
2003d3f4:	a46301ff 	andi	r3, r3, 511
2003d3f8:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_QF_AC = index_QF_AC % SIZE_QF_AC;
2003d3fc:	b0000000 	imm	0
2003d400:	e8740bbc 	lwi	r3, r20, 3004
2003d404:	e8630000 	lwi	r3, r3, 0
2003d408:	a46301ff 	andi	r3, r3, 511
2003d40c:	f8730028 	swi	r3, r19, 40
		i16 tmp_PQF_AC0;
		i16 local_ptr;
		i8 local_comp;
		i16 tmp_pred;
	
		i = 0;
2003d410:	f8130020 	swi	r0, r19, 32
		while (i <= 62) {
2003d414:	b80002c4 	bri	708		// 2003d6d8
			count = i + 1;
2003d418:	e8730020 	lwi	r3, r19, 32
2003d41c:	30630001 	addik	r3, r3, 1
2003d420:	f873002c 	swi	r3, r19, 44
			v = count & 7;
2003d424:	e873002c 	lwi	r3, r19, 44
2003d428:	90630060 	sext8	r3, r3
2003d42c:	a4630007 	andi	r3, r3, 7
2003d430:	f0730030 	sbi	r3, r19, 48
			h = count >> 3 & 7;
2003d434:	e873002c 	lwi	r3, r19, 44
2003d438:	64630203 	bsrai	r3, r3, 3
2003d43c:	90630060 	sext8	r3, r3
2003d440:	a4630007 	andi	r3, r3, 7
2003d444:	f0730031 	sbi	r3, r19, 49
			top_edge = h == 0;
2003d448:	e0730031 	lbui	r3, r19, 49
2003d44c:	90830060 	sext8	r4, r3
2003d450:	10600000 	addk	r3, r0, r0
2003d454:	88641c00 	pcmpeq	r3, r4, r3
2003d458:	a46300ff 	andi	r3, r3, 255
2003d45c:	f8730034 	swi	r3, r19, 52
			left_edge = v == 0;
2003d460:	e0730030 	lbui	r3, r19, 48
2003d464:	90830060 	sext8	r4, r3
2003d468:	10600000 	addk	r3, r0, r0
2003d46c:	88641c00 	pcmpeq	r3, r4, r3
2003d470:	a46300ff 	andi	r3, r3, 255
2003d474:	f8730038 	swi	r3, r19, 56
			if (top_edge) {
2003d478:	e8730034 	lwi	r3, r19, 52
2003d47c:	bc030010 	beqi	r3, 16		// 2003d48c
				index_replaced = v;
2003d480:	e0730030 	lbui	r3, r19, 48
2003d484:	f073001c 	sbi	r3, r19, 28
2003d488:	b8000010 	bri	16		// 2003d498
			} else {
				index_replaced = h | 8;
2003d48c:	e0730031 	lbui	r3, r19, 49
2003d490:	a0630008 	ori	r3, r3, 8
2003d494:	f073001c 	sbi	r3, r19, 28
			}
			local_acpred_flag = acpred_flag;
2003d498:	b0000000 	imm	0
2003d49c:	e8740bd8 	lwi	r3, r20, 3032
2003d4a0:	e8630000 	lwi	r3, r3, 0
2003d4a4:	f873003c 	swi	r3, r19, 60
			local_top = top;
2003d4a8:	b0000000 	imm	0
2003d4ac:	e8740bd4 	lwi	r3, r20, 3028
2003d4b0:	e8630000 	lwi	r3, r3, 0
2003d4b4:	f8730040 	swi	r3, r19, 64
			local_top = top;
2003d4b8:	b0000000 	imm	0
2003d4bc:	e8740bd4 	lwi	r3, r20, 3028
2003d4c0:	e8630000 	lwi	r3, r3, 0
2003d4c4:	f8730040 	swi	r3, r19, 64
			if (local_acpred_flag && (local_top && top_edge || !local_top && left_edge)) {
2003d4c8:	e873003c 	lwi	r3, r19, 60
2003d4cc:	bc0300ec 	beqi	r3, 236		// 2003d5b8
2003d4d0:	e8730040 	lwi	r3, r19, 64
2003d4d4:	bc03000c 	beqi	r3, 12		// 2003d4e0
2003d4d8:	e8730034 	lwi	r3, r19, 52
2003d4dc:	bc230014 	bnei	r3, 20		// 2003d4f0
2003d4e0:	e8730040 	lwi	r3, r19, 64
2003d4e4:	bc2300d4 	bnei	r3, 212		// 2003d5b8
2003d4e8:	e8730038 	lwi	r3, r19, 56
2003d4ec:	bc0300cc 	beqi	r3, 204		// 2003d5b8
				tmp_PQF_AC = tokens_PQF_AC[(index_PQF_AC + (i)) % SIZE_PQF_AC];
2003d4f0:	b0000000 	imm	0
2003d4f4:	e8740b94 	lwi	r3, r20, 2964
2003d4f8:	e8630000 	lwi	r3, r3, 0
2003d4fc:	e8830004 	lwi	r4, r3, 4
2003d500:	b0000000 	imm	0
2003d504:	e8740ba4 	lwi	r3, r20, 2980
2003d508:	e8a30000 	lwi	r5, r3, 0
2003d50c:	e8730020 	lwi	r3, r19, 32
2003d510:	10651800 	addk	r3, r5, r3
2003d514:	a46301ff 	andi	r3, r3, 511
2003d518:	10631800 	addk	r3, r3, r3
2003d51c:	10641800 	addk	r3, r4, r3
2003d520:	e4630000 	lhui	r3, r3, 0
2003d524:	f4730044 	shi	r3, r19, 68
				local_pred_ptr = pred_ptr;
2003d528:	b0000000 	imm	0
2003d52c:	e8740bc8 	lwi	r3, r20, 3016
2003d530:	e4630000 	lhui	r3, r3, 0
2003d534:	f4730046 	shi	r3, r19, 70
				tmp_buf = buf[local_pred_ptr << 4 | index_replaced];
2003d538:	e4730046 	lhui	r3, r19, 70
2003d53c:	90630061 	sext16	r3, r3
2003d540:	64830404 	bslli	r4, r3, 4
2003d544:	e073001c 	lbui	r3, r19, 28
2003d548:	90630060 	sext8	r3, r3
2003d54c:	80641800 	or	r3, r4, r3
2003d550:	b0000000 	imm	0
2003d554:	e8940bcc 	lwi	r4, r20, 3020
2003d558:	10631800 	addk	r3, r3, r3
2003d55c:	10641800 	addk	r3, r4, r3
2003d560:	e4630000 	lhui	r3, r3, 0
2003d564:	f4730048 	shi	r3, r19, 72
				tokens_QF_AC[(index_QF_AC + (i)) % SIZE_QF_AC] = tmp_PQF_AC + tmp_buf;
2003d568:	b0000000 	imm	0
2003d56c:	e8740b98 	lwi	r3, r20, 2968
2003d570:	e8630000 	lwi	r3, r3, 0
2003d574:	e8830004 	lwi	r4, r3, 4
2003d578:	b0000000 	imm	0
2003d57c:	e8740bbc 	lwi	r3, r20, 3004
2003d580:	e8a30000 	lwi	r5, r3, 0
2003d584:	e8730020 	lwi	r3, r19, 32
2003d588:	10651800 	addk	r3, r5, r3
2003d58c:	a46301ff 	andi	r3, r3, 511
2003d590:	10631800 	addk	r3, r3, r3
2003d594:	10641800 	addk	r3, r4, r3
2003d598:	e4b30044 	lhui	r5, r19, 68
2003d59c:	e4930048 	lhui	r4, r19, 72
2003d5a0:	10852000 	addk	r4, r5, r4
2003d5a4:	b0000000 	imm	0
2003d5a8:	a484ffff 	andi	r4, r4, -1
2003d5ac:	90840061 	sext16	r4, r4
2003d5b0:	f4830000 	shi	r4, r3, 0
2003d5b4:	b8000074 	bri	116		// 2003d628
			} else {
				tmp_PQF_AC0 = tokens_PQF_AC[(index_PQF_AC + (i)) % SIZE_PQF_AC];
2003d5b8:	b0000000 	imm	0
2003d5bc:	e8740b94 	lwi	r3, r20, 2964
2003d5c0:	e8630000 	lwi	r3, r3, 0
2003d5c4:	e8830004 	lwi	r4, r3, 4
2003d5c8:	b0000000 	imm	0
2003d5cc:	e8740ba4 	lwi	r3, r20, 2980
2003d5d0:	e8a30000 	lwi	r5, r3, 0
2003d5d4:	e8730020 	lwi	r3, r19, 32
2003d5d8:	10651800 	addk	r3, r5, r3
2003d5dc:	a46301ff 	andi	r3, r3, 511
2003d5e0:	10631800 	addk	r3, r3, r3
2003d5e4:	10641800 	addk	r3, r4, r3
2003d5e8:	e4630000 	lhui	r3, r3, 0
2003d5ec:	f473004a 	shi	r3, r19, 74
				tokens_QF_AC[(index_QF_AC + (i)) % SIZE_QF_AC] = tmp_PQF_AC0;
2003d5f0:	b0000000 	imm	0
2003d5f4:	e8740b98 	lwi	r3, r20, 2968
2003d5f8:	e8630000 	lwi	r3, r3, 0
2003d5fc:	e8830004 	lwi	r4, r3, 4
2003d600:	b0000000 	imm	0
2003d604:	e8740bbc 	lwi	r3, r20, 3004
2003d608:	e8a30000 	lwi	r5, r3, 0
2003d60c:	e8730020 	lwi	r3, r19, 32
2003d610:	10651800 	addk	r3, r5, r3
2003d614:	a46301ff 	andi	r3, r3, 511
2003d618:	10631800 	addk	r3, r3, r3
2003d61c:	10641800 	addk	r3, r4, r3
2003d620:	e493004a 	lhui	r4, r19, 74
2003d624:	f4830000 	shi	r4, r3, 0
			}
			if (left_edge || top_edge) {
2003d628:	e8730038 	lwi	r3, r19, 56
2003d62c:	bc23000c 	bnei	r3, 12		// 2003d638
2003d630:	e8730034 	lwi	r3, r19, 52
2003d634:	bc030098 	beqi	r3, 152		// 2003d6cc
				local_ptr = ptr;
2003d638:	b0000000 	imm	0
2003d63c:	e8740bc4 	lwi	r3, r20, 3012
2003d640:	e4630000 	lhui	r3, r3, 0
2003d644:	f473004c 	shi	r3, r19, 76
				local_comp = comp;
2003d648:	b0000000 	imm	0
2003d64c:	e8740bd0 	lwi	r3, r20, 3024
2003d650:	e0630000 	lbui	r3, r3, 0
2003d654:	f073004e 	sbi	r3, r19, 78
				tmp_pred = tokens_QF_AC[(index_QF_AC + (i)) % SIZE_QF_AC];
2003d658:	b0000000 	imm	0
2003d65c:	e8740b98 	lwi	r3, r20, 2968
2003d660:	e8630000 	lwi	r3, r3, 0
2003d664:	e8830004 	lwi	r4, r3, 4
2003d668:	b0000000 	imm	0
2003d66c:	e8740bbc 	lwi	r3, r20, 3004
2003d670:	e8a30000 	lwi	r5, r3, 0
2003d674:	e8730020 	lwi	r3, r19, 32
2003d678:	10651800 	addk	r3, r5, r3
2003d67c:	a46301ff 	andi	r3, r3, 511
2003d680:	10631800 	addk	r3, r3, r3
2003d684:	10641800 	addk	r3, r4, r3
2003d688:	e4630000 	lhui	r3, r3, 0
2003d68c:	f4730050 	shi	r3, r19, 80
				buf[(local_ptr | local_comp) << 4 | index_replaced] = tmp_pred;
2003d690:	e473004c 	lhui	r3, r19, 76
2003d694:	90830061 	sext16	r4, r3
2003d698:	e073004e 	lbui	r3, r19, 78
2003d69c:	90630060 	sext8	r3, r3
2003d6a0:	80641800 	or	r3, r4, r3
2003d6a4:	64830404 	bslli	r4, r3, 4
2003d6a8:	e073001c 	lbui	r3, r19, 28
2003d6ac:	90630060 	sext8	r3, r3
2003d6b0:	80641800 	or	r3, r4, r3
2003d6b4:	b0000000 	imm	0
2003d6b8:	e8940bcc 	lwi	r4, r20, 3020
2003d6bc:	10631800 	addk	r3, r3, r3
2003d6c0:	10641800 	addk	r3, r4, r3
2003d6c4:	e4930050 	lhui	r4, r19, 80
2003d6c8:	f4830000 	shi	r4, r3, 0
			}
			i = i + 1;
2003d6cc:	e8730020 	lwi	r3, r19, 32
2003d6d0:	30630001 	addik	r3, r3, 1
2003d6d4:	f8730020 	swi	r3, r19, 32
		i16 local_ptr;
		i8 local_comp;
		i16 tmp_pred;
	
		i = 0;
		while (i <= 62) {
2003d6d8:	e8930020 	lwi	r4, r19, 32
2003d6dc:	3060003e 	addik	r3, r0, 62
2003d6e0:	16441801 	cmp	r18, r4, r3
2003d6e4:	bcb2fd34 	bgei	r18, -716		// 2003d418
			}
			i = i + 1;
		}
	
		// Update ports indexes
		index_PQF_AC += 63;
2003d6e8:	b0000000 	imm	0
2003d6ec:	e8740ba4 	lwi	r3, r20, 2980
2003d6f0:	e8630000 	lwi	r3, r3, 0
2003d6f4:	3083003f 	addik	r4, r3, 63
2003d6f8:	b0000000 	imm	0
2003d6fc:	e8740ba4 	lwi	r3, r20, 2980
2003d700:	f8830000 	swi	r4, r3, 0
		index_QF_AC += 63;
2003d704:	b0000000 	imm	0
2003d708:	e8740bbc 	lwi	r3, r20, 3004
2003d70c:	e8630000 	lwi	r3, r3, 0
2003d710:	3083003f 	addik	r4, r3, 63
2003d714:	b0000000 	imm	0
2003d718:	e8740bbc 	lwi	r3, r20, 3004
2003d71c:	f8830000 	swi	r4, r3, 0
		
		read_end_PQF_AC();
2003d720:	b0000000 	imm	0
2003d724:	e8740be8 	lwi	r3, r20, 3048
2003d728:	99fc1800 	brald	r15, r3
2003d72c:	80000000 	or	r0, r0, r0
		write_end_QF_AC();
2003d730:	b0000000 	imm	0
2003d734:	e8740c00 	lwi	r3, r20, 3072
2003d738:	99fc1800 	brald	r15, r3
2003d73c:	80000000 	or	r0, r0, r0
	}
2003d740:	e9e10000 	lwi	r15, r1, 0
2003d744:	10330000 	addk	r1, r19, r0
2003d748:	ea610054 	lwi	r19, r1, 84
2003d74c:	ea810058 	lwi	r20, r1, 88
2003d750:	3021005c 	addik	r1, r1, 92
2003d754:	b60f0008 	rtsd	r15, 8
2003d758:	80000000 	or	r0, r0, r0

2003d75c <decoder_texture_IAP_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_texture_IAP_initialize() {
2003d75c:	3021fff0 	addik	r1, r1, -16
2003d760:	fa610008 	swi	r19, r1, 8
2003d764:	fa81000c 	swi	r20, r1, 12
2003d768:	12610000 	addk	r19, r1, r0
2003d76c:	96808000 	mfs	r20, rpc
2003d770:	b000dffc 	imm	-8196
2003d774:	329441f0 	addik	r20, r20, 16880
		int i = 0;
2003d778:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_start;
2003d77c:	b0000000 	imm	0
2003d780:	e8740be0 	lwi	r3, r20, 3040
2003d784:	30800002 	addik	r4, r0, 2
2003d788:	f8830000 	swi	r4, r3, 0
		
	finished:
		// no read_end/write_end here!
		return;
2003d78c:	80000000 	or	r0, r0, r0
	}
2003d790:	10330000 	addk	r1, r19, r0
2003d794:	ea610008 	lwi	r19, r1, 8
2003d798:	ea81000c 	lwi	r20, r1, 12
2003d79c:	30210010 	addik	r1, r1, 16
2003d7a0:	b60f0008 	rtsd	r15, 8
2003d7a4:	80000000 	or	r0, r0, r0

2003d7a8 <decoder_texture_IAP_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	
	int decoder_texture_IAP_scheduler() {
2003d7a8:	3021ffc4 	addik	r1, r1, -60
2003d7ac:	f9e10000 	swi	r15, r1, 0
2003d7b0:	fa610034 	swi	r19, r1, 52
2003d7b4:	fa810038 	swi	r20, r1, 56
2003d7b8:	12610000 	addk	r19, r1, r0
2003d7bc:	96808000 	mfs	r20, rpc
2003d7c0:	b000dffc 	imm	-8196
2003d7c4:	329441a0 	addik	r20, r20, 16800
		int i = 0;
2003d7c8:	f813001c 	swi	r0, r19, 28
		if(needInit){
2003d7cc:	b0000000 	imm	0
2003d7d0:	e8740bdc 	lwi	r3, r20, 3036
2003d7d4:	e0630000 	lbui	r3, r3, 0
2003d7d8:	bc03001c 	beqi	r3, 28		// 2003d7f4
			decoder_texture_IAP_initialize();
2003d7dc:	b000ffff 	imm	-1
2003d7e0:	b9f4ff7c 	brlid	r15, -132	// 2003d75c <decoder_texture_IAP_initialize>
2003d7e4:	80000000 	or	r0, r0, r0
			needInit = 0;
2003d7e8:	b0000000 	imm	0
2003d7ec:	e8740bdc 	lwi	r3, r20, 3036
2003d7f0:	f0030000 	sbi	r0, r3, 0
		}
	
		read_PQF_AC();
2003d7f4:	b0000000 	imm	0
2003d7f8:	e8740be4 	lwi	r3, r20, 3044
2003d7fc:	99fc1800 	brald	r15, r3
2003d800:	80000000 	or	r0, r0, r0
		read_PTR();
2003d804:	b0000000 	imm	0
2003d808:	e8940bec 	lwi	r4, r20, 3052
2003d80c:	99fc2000 	brald	r15, r4
2003d810:	80000000 	or	r0, r0, r0
		read_AC_PRED_DIR();
2003d814:	b0000000 	imm	0
2003d818:	e8740bf4 	lwi	r3, r20, 3060
2003d81c:	99fc1800 	brald	r15, r3
2003d820:	80000000 	or	r0, r0, r0
		write_QF_AC();
2003d824:	b0000000 	imm	0
2003d828:	e8940bfc 	lwi	r4, r20, 3068
2003d82c:	99fc2000 	brald	r15, r4
2003d830:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
2003d834:	b0000000 	imm	0
2003d838:	e8740be0 	lwi	r3, r20, 3040
2003d83c:	e8630000 	lwi	r3, r3, 0
2003d840:	a8830001 	xori	r4, r3, 1
2003d844:	bc04008c 	beqi	r4, 140		// 2003d8d0
2003d848:	30800001 	addik	r4, r0, 1
2003d84c:	16441803 	cmpu	r18, r4, r3
2003d850:	bc52001c 	blti	r18, 28		// 2003d86c
2003d854:	a8630002 	xori	r3, r3, 2
2003d858:	bc030148 	beqi	r3, 328		// 2003d9a0
		case my_state_pred:
			goto l_pred;
		case my_state_start:
			goto l_start;
		default:
			exit(1);
2003d85c:	30a00001 	addik	r5, r0, 1
2003d860:	b000dffc 	imm	-8196
2003d864:	b9f42b34 	brlid	r15, 11060	// 398 <exit>
2003d868:	80000000 	or	r0, r0, r0
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_advance:
			goto l_advance;
2003d86c:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_advance:
			if (isSchedulable_advance()) {
2003d870:	b0000000 	imm	0
2003d874:	e8940c1c 	lwi	r4, r20, 3100
2003d878:	99fc2000 	brald	r15, r4
2003d87c:	80000000 	or	r0, r0, r0
2003d880:	bc030040 	beqi	r3, 64		// 2003d8c0
				int stop = 0;
2003d884:	f8130024 	swi	r0, r19, 36
				if (stop != 0) {
2003d888:	e8730024 	lwi	r3, r19, 36
2003d88c:	bc030014 	beqi	r3, 20		// 2003d8a0
					_FSM_state = my_state_advance;
2003d890:	b0000000 	imm	0
2003d894:	e8740be0 	lwi	r3, r20, 3040
2003d898:	f8030000 	swi	r0, r3, 0
					goto finished;
2003d89c:	b8000298 	bri	664		// 2003db34
				}
				advance();
2003d8a0:	b0000000 	imm	0
2003d8a4:	e8740c20 	lwi	r3, r20, 3104
2003d8a8:	99fc1800 	brald	r15, r3
2003d8ac:	80000000 	or	r0, r0, r0
				i++;
2003d8b0:	e873001c 	lwi	r3, r19, 28
2003d8b4:	30630001 	addik	r3, r3, 1
2003d8b8:	f873001c 	swi	r3, r19, 28
				goto l_start;
2003d8bc:	b80000e8 	bri	232		// 2003d9a4
			} else {
				_FSM_state = my_state_advance;
2003d8c0:	b0000000 	imm	0
2003d8c4:	e8740be0 	lwi	r3, r20, 3040
2003d8c8:	f8030000 	swi	r0, r3, 0
				goto finished;
2003d8cc:	b8000268 	bri	616		// 2003db34
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_advance:
			goto l_advance;
		case my_state_pred:
			goto l_pred;
2003d8d0:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_advance;
				goto finished;
			}
		l_pred:
			if (numTokens_PQF_AC - index_PQF_AC >= 63 && isSchedulable_copy()) {
2003d8d4:	b0000000 	imm	0
2003d8d8:	e8740ba8 	lwi	r3, r20, 2984
2003d8dc:	e8830000 	lwi	r4, r3, 0
2003d8e0:	b0000000 	imm	0
2003d8e4:	e8740ba4 	lwi	r3, r20, 2980
2003d8e8:	e8630000 	lwi	r3, r3, 0
2003d8ec:	14832000 	rsubk	r4, r3, r4
2003d8f0:	3060003e 	addik	r3, r0, 62
2003d8f4:	16441803 	cmpu	r18, r4, r3
2003d8f8:	bcb20094 	bgei	r18, 148		// 2003d98c
2003d8fc:	b0000000 	imm	0
2003d900:	e8940c24 	lwi	r4, r20, 3108
2003d904:	99fc2000 	brald	r15, r4
2003d908:	80000000 	or	r0, r0, r0
2003d90c:	bc030080 	beqi	r3, 128		// 2003d98c
				int stop = 0;
2003d910:	f8130020 	swi	r0, r19, 32
				if (63 > SIZE_QF_AC - index_QF_AC + decoder_texture_IAP_QF_AC->read_inds[0]) {
2003d914:	b0000000 	imm	0
2003d918:	e8740b98 	lwi	r3, r20, 2968
2003d91c:	e8630000 	lwi	r3, r3, 0
2003d920:	e863000c 	lwi	r3, r3, 12
2003d924:	e8830000 	lwi	r4, r3, 0
2003d928:	b0000000 	imm	0
2003d92c:	e8740bbc 	lwi	r3, r20, 3004
2003d930:	e8630000 	lwi	r3, r3, 0
2003d934:	14632000 	rsubk	r3, r3, r4
2003d938:	30830200 	addik	r4, r3, 512
2003d93c:	3060003e 	addik	r3, r0, 62
2003d940:	16441803 	cmpu	r18, r4, r3
2003d944:	bc52000c 	blti	r18, 12		// 2003d950
					stop = 1;
2003d948:	30600001 	addik	r3, r0, 1
2003d94c:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
2003d950:	e8730020 	lwi	r3, r19, 32
2003d954:	bc030018 	beqi	r3, 24		// 2003d96c
					_FSM_state = my_state_pred;
2003d958:	b0000000 	imm	0
2003d95c:	e8740be0 	lwi	r3, r20, 3040
2003d960:	30800001 	addik	r4, r0, 1
2003d964:	f8830000 	swi	r4, r3, 0
					goto finished;
2003d968:	b80001cc 	bri	460		// 2003db34
				}
				copy();
2003d96c:	b0000000 	imm	0
2003d970:	e8740c28 	lwi	r3, r20, 3112
2003d974:	99fc1800 	brald	r15, r3
2003d978:	80000000 	or	r0, r0, r0
				i++;
2003d97c:	e873001c 	lwi	r3, r19, 28
2003d980:	30630001 	addik	r3, r3, 1
2003d984:	f873001c 	swi	r3, r19, 28
				goto l_advance;
2003d988:	b800fee8 	bri	-280		// 2003d870
			} else {
				_FSM_state = my_state_pred;
2003d98c:	b0000000 	imm	0
2003d990:	e8740be0 	lwi	r3, r20, 3040
2003d994:	30800001 	addik	r4, r0, 1
2003d998:	f8830000 	swi	r4, r3, 0
				goto finished;
2003d99c:	b8000198 	bri	408		// 2003db34
		case my_state_advance:
			goto l_advance;
		case my_state_pred:
			goto l_pred;
		case my_state_start:
			goto l_start;
2003d9a0:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_pred;
				goto finished;
			}
		l_start:
			if (numTokens_AC_PRED_DIR - index_AC_PRED_DIR >= 1 && isSchedulable_newvop()) {
2003d9a4:	b0000000 	imm	0
2003d9a8:	e8740bb8 	lwi	r3, r20, 3000
2003d9ac:	e8830000 	lwi	r4, r3, 0
2003d9b0:	b0000000 	imm	0
2003d9b4:	e8740bb4 	lwi	r3, r20, 2996
2003d9b8:	e8630000 	lwi	r3, r3, 0
2003d9bc:	88641800 	xor	r3, r4, r3
2003d9c0:	bc030058 	beqi	r3, 88		// 2003da18
2003d9c4:	b0000000 	imm	0
2003d9c8:	e8940c04 	lwi	r4, r20, 3076
2003d9cc:	99fc2000 	brald	r15, r4
2003d9d0:	80000000 	or	r0, r0, r0
2003d9d4:	bc030044 	beqi	r3, 68		// 2003da18
				int stop = 0;
2003d9d8:	f8130028 	swi	r0, r19, 40
				if (stop != 0) {
2003d9dc:	e8730028 	lwi	r3, r19, 40
2003d9e0:	bc030018 	beqi	r3, 24		// 2003d9f8
					_FSM_state = my_state_start;
2003d9e4:	b0000000 	imm	0
2003d9e8:	e8740be0 	lwi	r3, r20, 3040
2003d9ec:	30800002 	addik	r4, r0, 2
2003d9f0:	f8830000 	swi	r4, r3, 0
					goto finished;
2003d9f4:	b8000140 	bri	320		// 2003db34
				}
				newvop();
2003d9f8:	b0000000 	imm	0
2003d9fc:	e8740c08 	lwi	r3, r20, 3080
2003da00:	99fc1800 	brald	r15, r3
2003da04:	80000000 	or	r0, r0, r0
				i++;
2003da08:	e873001c 	lwi	r3, r19, 28
2003da0c:	30630001 	addik	r3, r3, 1
2003da10:	f873001c 	swi	r3, r19, 28
				goto l_start;
2003da14:	b800ff90 	bri	-112		// 2003d9a4
			} else if (numTokens_AC_PRED_DIR - index_AC_PRED_DIR >= 1 && isSchedulable_skip()) {
2003da18:	b0000000 	imm	0
2003da1c:	e8740bb8 	lwi	r3, r20, 3000
2003da20:	e8830000 	lwi	r4, r3, 0
2003da24:	b0000000 	imm	0
2003da28:	e8740bb4 	lwi	r3, r20, 2996
2003da2c:	e8630000 	lwi	r3, r3, 0
2003da30:	88641800 	xor	r3, r4, r3
2003da34:	bc030058 	beqi	r3, 88		// 2003da8c
2003da38:	b0000000 	imm	0
2003da3c:	e8940c0c 	lwi	r4, r20, 3084
2003da40:	99fc2000 	brald	r15, r4
2003da44:	80000000 	or	r0, r0, r0
2003da48:	bc030044 	beqi	r3, 68		// 2003da8c
				int stop = 0;
2003da4c:	f813002c 	swi	r0, r19, 44
				if (stop != 0) {
2003da50:	e873002c 	lwi	r3, r19, 44
2003da54:	bc030018 	beqi	r3, 24		// 2003da6c
					_FSM_state = my_state_start;
2003da58:	b0000000 	imm	0
2003da5c:	e8740be0 	lwi	r3, r20, 3040
2003da60:	30800002 	addik	r4, r0, 2
2003da64:	f8830000 	swi	r4, r3, 0
					goto finished;
2003da68:	b80000cc 	bri	204		// 2003db34
				}
				skip();
2003da6c:	b0000000 	imm	0
2003da70:	e8740c10 	lwi	r3, r20, 3088
2003da74:	99fc1800 	brald	r15, r3
2003da78:	80000000 	or	r0, r0, r0
				i++;
2003da7c:	e873001c 	lwi	r3, r19, 28
2003da80:	30630001 	addik	r3, r3, 1
2003da84:	f873001c 	swi	r3, r19, 28
				goto l_advance;
2003da88:	b800fde8 	bri	-536		// 2003d870
			} else if (numTokens_AC_PRED_DIR - index_AC_PRED_DIR >= 1 && numTokens_PTR - index_PTR >= 1 && isSchedulable_start()) {
2003da8c:	b0000000 	imm	0
2003da90:	e8740bb8 	lwi	r3, r20, 3000
2003da94:	e8830000 	lwi	r4, r3, 0
2003da98:	b0000000 	imm	0
2003da9c:	e8740bb4 	lwi	r3, r20, 2996
2003daa0:	e8630000 	lwi	r3, r3, 0
2003daa4:	88641800 	xor	r3, r4, r3
2003daa8:	bc030078 	beqi	r3, 120		// 2003db20
2003daac:	b0000000 	imm	0
2003dab0:	e8740bb0 	lwi	r3, r20, 2992
2003dab4:	e8830000 	lwi	r4, r3, 0
2003dab8:	b0000000 	imm	0
2003dabc:	e8740bac 	lwi	r3, r20, 2988
2003dac0:	e8630000 	lwi	r3, r3, 0
2003dac4:	88641800 	xor	r3, r4, r3
2003dac8:	bc030058 	beqi	r3, 88		// 2003db20
2003dacc:	b0000000 	imm	0
2003dad0:	e8940c14 	lwi	r4, r20, 3092
2003dad4:	99fc2000 	brald	r15, r4
2003dad8:	80000000 	or	r0, r0, r0
2003dadc:	bc030044 	beqi	r3, 68		// 2003db20
				int stop = 0;
2003dae0:	f8130030 	swi	r0, r19, 48
				if (stop != 0) {
2003dae4:	e8730030 	lwi	r3, r19, 48
2003dae8:	bc030018 	beqi	r3, 24		// 2003db00
					_FSM_state = my_state_start;
2003daec:	b0000000 	imm	0
2003daf0:	e8740be0 	lwi	r3, r20, 3040
2003daf4:	30800002 	addik	r4, r0, 2
2003daf8:	f8830000 	swi	r4, r3, 0
					goto finished;
2003dafc:	b8000038 	bri	56		// 2003db34
				}
				start();
2003db00:	b0000000 	imm	0
2003db04:	e8740c18 	lwi	r3, r20, 3096
2003db08:	99fc1800 	brald	r15, r3
2003db0c:	80000000 	or	r0, r0, r0
				i++;
2003db10:	e873001c 	lwi	r3, r19, 28
2003db14:	30630001 	addik	r3, r3, 1
2003db18:	f873001c 	swi	r3, r19, 28
				goto l_pred;
2003db1c:	b800fdb8 	bri	-584		// 2003d8d4
			} else {
				_FSM_state = my_state_start;
2003db20:	b0000000 	imm	0
2003db24:	e8740be0 	lwi	r3, r20, 3040
2003db28:	30800002 	addik	r4, r0, 2
2003db2c:	f8830000 	swi	r4, r3, 0
				goto finished;
2003db30:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_PQF_AC();
2003db34:	b0000000 	imm	0
2003db38:	e8940be8 	lwi	r4, r20, 3048
2003db3c:	99fc2000 	brald	r15, r4
2003db40:	80000000 	or	r0, r0, r0
		read_end_PTR();
2003db44:	b0000000 	imm	0
2003db48:	e8740bf0 	lwi	r3, r20, 3056
2003db4c:	99fc1800 	brald	r15, r3
2003db50:	80000000 	or	r0, r0, r0
		read_end_AC_PRED_DIR();
2003db54:	b0000000 	imm	0
2003db58:	e8940bf8 	lwi	r4, r20, 3064
2003db5c:	99fc2000 	brald	r15, r4
2003db60:	80000000 	or	r0, r0, r0
		
		write_end_QF_AC();
2003db64:	b0000000 	imm	0
2003db68:	e8740c00 	lwi	r3, r20, 3072
2003db6c:	99fc1800 	brald	r15, r3
2003db70:	80000000 	or	r0, r0, r0
		
		
		return i;
2003db74:	e873001c 	lwi	r3, r19, 28
	}
2003db78:	e9e10000 	lwi	r15, r1, 0
2003db7c:	10330000 	addk	r1, r19, r0
2003db80:	ea610034 	lwi	r19, r1, 52
2003db84:	ea810038 	lwi	r20, r1, 56
2003db88:	3021003c 	addik	r1, r1, 60
2003db8c:	b60f0008 	rtsd	r15, 8
2003db90:	80000000 	or	r0, r0, r0

2003db94 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003db94:	3021fff4 	addik	r1, r1, -12
2003db98:	fa610004 	swi	r19, r1, 4
2003db9c:	fa810008 	swi	r20, r1, 8
2003dba0:	12610000 	addk	r19, r1, r0
2003dba4:	96808000 	mfs	r20, rpc
2003dba8:	b000dffc 	imm	-8196
2003dbac:	32943db8 	addik	r20, r20, 15800
2003dbb0:	f8b30010 	swi	r5, r19, 16
2003dbb4:	f8d30014 	swi	r6, r19, 20
2003dbb8:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003dbbc:	e8730010 	lwi	r3, r19, 16
2003dbc0:	e8630010 	lwi	r3, r3, 16
2003dbc4:	e8830000 	lwi	r4, r3, 0
2003dbc8:	e8730010 	lwi	r3, r19, 16
2003dbcc:	e8a3000c 	lwi	r5, r3, 12
2003dbd0:	e8730014 	lwi	r3, r19, 20
2003dbd4:	64630402 	bslli	r3, r3, 2
2003dbd8:	10651800 	addk	r3, r5, r3
2003dbdc:	e8630000 	lwi	r3, r3, 0
2003dbe0:	14a32000 	rsubk	r5, r3, r4
2003dbe4:	30600001 	addik	r3, r0, 1
2003dbe8:	e8930018 	lwi	r4, r19, 24
2003dbec:	16442803 	cmpu	r18, r4, r5
2003dbf0:	bcb20008 	bgei	r18, 8		// 2003dbf8
2003dbf4:	10600000 	addk	r3, r0, r0
2003dbf8:	a46300ff 	andi	r3, r3, 255
}
2003dbfc:	10330000 	addk	r1, r19, r0
2003dc00:	ea610004 	lwi	r19, r1, 4
2003dc04:	ea810008 	lwi	r20, r1, 8
2003dc08:	3021000c 	addik	r1, r1, 12
2003dc0c:	b60f0008 	rtsd	r15, 8
2003dc10:	80000000 	or	r0, r0, r0

2003dc14 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003dc14:	3021fff4 	addik	r1, r1, -12
2003dc18:	fa610004 	swi	r19, r1, 4
2003dc1c:	fa810008 	swi	r20, r1, 8
2003dc20:	12610000 	addk	r19, r1, r0
2003dc24:	96808000 	mfs	r20, rpc
2003dc28:	b000dffc 	imm	-8196
2003dc2c:	32943d38 	addik	r20, r20, 15672
2003dc30:	f8b30010 	swi	r5, r19, 16
2003dc34:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003dc38:	e8730010 	lwi	r3, r19, 16
2003dc3c:	e8630010 	lwi	r3, r3, 16
2003dc40:	e8830000 	lwi	r4, r3, 0
2003dc44:	e8730010 	lwi	r3, r19, 16
2003dc48:	e8a3000c 	lwi	r5, r3, 12
2003dc4c:	e8730014 	lwi	r3, r19, 20
2003dc50:	64630402 	bslli	r3, r3, 2
2003dc54:	10651800 	addk	r3, r5, r3
2003dc58:	e8630000 	lwi	r3, r3, 0
2003dc5c:	14632000 	rsubk	r3, r3, r4
}
2003dc60:	10330000 	addk	r1, r19, r0
2003dc64:	ea610004 	lwi	r19, r1, 4
2003dc68:	ea810008 	lwi	r20, r1, 8
2003dc6c:	3021000c 	addik	r1, r1, 12
2003dc70:	b60f0008 	rtsd	r15, 8
2003dc74:	80000000 	or	r0, r0, r0

2003dc78 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003dc78:	3021fff0 	addik	r1, r1, -16
2003dc7c:	fa610008 	swi	r19, r1, 8
2003dc80:	fa81000c 	swi	r20, r1, 12
2003dc84:	12610000 	addk	r19, r1, r0
2003dc88:	96808000 	mfs	r20, rpc
2003dc8c:	b000dffc 	imm	-8196
2003dc90:	32943cd4 	addik	r20, r20, 15572
2003dc94:	f8b30014 	swi	r5, r19, 20
2003dc98:	f8d30018 	swi	r6, r19, 24
2003dc9c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003dca0:	f8130004 	swi	r0, r19, 4
2003dca4:	b800005c 	bri	92		// 2003dd00
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003dca8:	e8730014 	lwi	r3, r19, 20
2003dcac:	e8830000 	lwi	r4, r3, 0
2003dcb0:	e8730014 	lwi	r3, r19, 20
2003dcb4:	e8a3000c 	lwi	r5, r3, 12
2003dcb8:	e8730004 	lwi	r3, r19, 4
2003dcbc:	64630402 	bslli	r3, r3, 2
2003dcc0:	10651800 	addk	r3, r5, r3
2003dcc4:	e8a30000 	lwi	r5, r3, 0
2003dcc8:	e8730014 	lwi	r3, r19, 20
2003dccc:	e8630010 	lwi	r3, r3, 16
2003dcd0:	e8630000 	lwi	r3, r3, 0
2003dcd4:	14632800 	rsubk	r3, r3, r5
2003dcd8:	10641800 	addk	r3, r4, r3
2003dcdc:	30830001 	addik	r4, r3, 1
2003dce0:	e873001c 	lwi	r3, r19, 28
2003dce4:	16441803 	cmpu	r18, r4, r3
2003dce8:	bc52000c 	blti	r18, 12		// 2003dcf4
            return 0;
2003dcec:	10600000 	addk	r3, r0, r0
2003dcf0:	b8000024 	bri	36		// 2003dd14
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003dcf4:	e8730004 	lwi	r3, r19, 4
2003dcf8:	30630001 	addik	r3, r3, 1
2003dcfc:	f8730004 	swi	r3, r19, 4
2003dd00:	e8930004 	lwi	r4, r19, 4
2003dd04:	e8730018 	lwi	r3, r19, 24
2003dd08:	16432003 	cmpu	r18, r3, r4
2003dd0c:	bc52ff9c 	blti	r18, -100		// 2003dca8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003dd10:	30600001 	addik	r3, r0, 1
}
2003dd14:	10330000 	addk	r1, r19, r0
2003dd18:	ea610008 	lwi	r19, r1, 8
2003dd1c:	ea81000c 	lwi	r20, r1, 12
2003dd20:	30210010 	addik	r1, r1, 16
2003dd24:	b60f0008 	rtsd	r15, 8
2003dd28:	80000000 	or	r0, r0, r0

2003dd2c <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003dd2c:	3021ffe8 	addik	r1, r1, -24
2003dd30:	fa610010 	swi	r19, r1, 16
2003dd34:	fa810014 	swi	r20, r1, 20
2003dd38:	12610000 	addk	r19, r1, r0
2003dd3c:	96808000 	mfs	r20, rpc
2003dd40:	b000dffc 	imm	-8196
2003dd44:	32943c20 	addik	r20, r20, 15392
2003dd48:	f8b3001c 	swi	r5, r19, 28
2003dd4c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003dd50:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003dd54:	f8130004 	swi	r0, r19, 4
2003dd58:	b8000054 	bri	84		// 2003ddac
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003dd5c:	e873001c 	lwi	r3, r19, 28
2003dd60:	e8630010 	lwi	r3, r3, 16
2003dd64:	e8830000 	lwi	r4, r3, 0
2003dd68:	e873001c 	lwi	r3, r19, 28
2003dd6c:	e8a3000c 	lwi	r5, r3, 12
2003dd70:	e8730004 	lwi	r3, r19, 4
2003dd74:	64630402 	bslli	r3, r3, 2
2003dd78:	10651800 	addk	r3, r5, r3
2003dd7c:	e8630000 	lwi	r3, r3, 0
2003dd80:	14632000 	rsubk	r3, r3, r4
2003dd84:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003dd88:	e8930008 	lwi	r4, r19, 8
2003dd8c:	e873000c 	lwi	r3, r19, 12
2003dd90:	16441803 	cmpu	r18, r4, r3
2003dd94:	bcb20008 	bgei	r18, 8		// 2003dd9c
2003dd98:	10640000 	addk	r3, r4, r0
2003dd9c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003dda0:	e8730004 	lwi	r3, r19, 4
2003dda4:	30630001 	addik	r3, r3, 1
2003dda8:	f8730004 	swi	r3, r19, 4
2003ddac:	e8930004 	lwi	r4, r19, 4
2003ddb0:	e8730020 	lwi	r3, r19, 32
2003ddb4:	16432003 	cmpu	r18, r3, r4
2003ddb8:	bc52ffa4 	blti	r18, -92		// 2003dd5c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003ddbc:	e873001c 	lwi	r3, r19, 28
2003ddc0:	e8830000 	lwi	r4, r3, 0
2003ddc4:	e8730008 	lwi	r3, r19, 8
2003ddc8:	14632000 	rsubk	r3, r3, r4
}
2003ddcc:	10330000 	addk	r1, r19, r0
2003ddd0:	ea610010 	lwi	r19, r1, 16
2003ddd4:	ea810014 	lwi	r20, r1, 20
2003ddd8:	30210018 	addik	r1, r1, 24
2003dddc:	b60f0008 	rtsd	r15, 8
2003dde0:	80000000 	or	r0, r0, r0

2003dde4 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003dde4:	3021fff0 	addik	r1, r1, -16
2003dde8:	fa610008 	swi	r19, r1, 8
2003ddec:	fa81000c 	swi	r20, r1, 12
2003ddf0:	12610000 	addk	r19, r1, r0
2003ddf4:	96808000 	mfs	r20, rpc
2003ddf8:	b000dffc 	imm	-8196
2003ddfc:	32943b68 	addik	r20, r20, 15208
2003de00:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2003de04:	e8730014 	lwi	r3, r19, 20
2003de08:	e8630010 	lwi	r3, r3, 16
2003de0c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003de10:	f8130004 	swi	r0, r19, 4
2003de14:	b8000028 	bri	40		// 2003de3c
        fifo->read_inds[i] = 0;
2003de18:	e8730014 	lwi	r3, r19, 20
2003de1c:	e883000c 	lwi	r4, r3, 12
2003de20:	e8730004 	lwi	r3, r19, 4
2003de24:	64630402 	bslli	r3, r3, 2
2003de28:	10641800 	addk	r3, r4, r3
2003de2c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003de30:	e8730004 	lwi	r3, r19, 4
2003de34:	30630001 	addik	r3, r3, 1
2003de38:	f8730004 	swi	r3, r19, 4
2003de3c:	e8730014 	lwi	r3, r19, 20
2003de40:	e8830008 	lwi	r4, r3, 8
2003de44:	e8730004 	lwi	r3, r19, 4
2003de48:	16441803 	cmpu	r18, r4, r3
2003de4c:	bc52ffcc 	blti	r18, -52		// 2003de18
        fifo->read_inds[i] = 0;
    }
}
2003de50:	10330000 	addk	r1, r19, r0
2003de54:	ea610008 	lwi	r19, r1, 8
2003de58:	ea81000c 	lwi	r20, r1, 12
2003de5c:	30210010 	addik	r1, r1, 16
2003de60:	b60f0008 	rtsd	r15, 8
2003de64:	80000000 	or	r0, r0, r0

2003de68 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003de68:	3021fff0 	addik	r1, r1, -16
2003de6c:	fa610008 	swi	r19, r1, 8
2003de70:	fa81000c 	swi	r20, r1, 12
2003de74:	12610000 	addk	r19, r1, r0
2003de78:	96808000 	mfs	r20, rpc
2003de7c:	b000dffc 	imm	-8196
2003de80:	32943ae4 	addik	r20, r20, 15076
2003de84:	f8b30014 	swi	r5, r19, 20
2003de88:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003de8c:	e8730014 	lwi	r3, r19, 20
2003de90:	e8830004 	lwi	r4, r3, 4
2003de94:	e8730014 	lwi	r3, r19, 20
2003de98:	e8a3000c 	lwi	r5, r3, 12
2003de9c:	e8730018 	lwi	r3, r19, 24
2003dea0:	64630402 	bslli	r3, r3, 2
2003dea4:	10651800 	addk	r3, r5, r3
2003dea8:	e8a30000 	lwi	r5, r3, 0
2003deac:	e8730014 	lwi	r3, r19, 20
2003deb0:	e8630000 	lwi	r3, r3, 0
2003deb4:	3063ffff 	addik	r3, r3, -1
2003deb8:	84651800 	and	r3, r5, r3
2003debc:	10641800 	addk	r3, r4, r3
2003dec0:	e0630000 	lbui	r3, r3, 0
2003dec4:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003dec8:	e8730014 	lwi	r3, r19, 20
2003decc:	e883000c 	lwi	r4, r3, 12
2003ded0:	e8730018 	lwi	r3, r19, 24
2003ded4:	64630402 	bslli	r3, r3, 2
2003ded8:	10641800 	addk	r3, r4, r3
2003dedc:	e8830000 	lwi	r4, r3, 0
2003dee0:	30840001 	addik	r4, r4, 1
2003dee4:	f8830000 	swi	r4, r3, 0
    return value;
2003dee8:	e0730004 	lbui	r3, r19, 4
2003deec:	90630060 	sext8	r3, r3
}
2003def0:	10330000 	addk	r1, r19, r0
2003def4:	ea610008 	lwi	r19, r1, 8
2003def8:	ea81000c 	lwi	r20, r1, 12
2003defc:	30210010 	addik	r1, r1, 16
2003df00:	b60f0008 	rtsd	r15, 8
2003df04:	80000000 	or	r0, r0, r0

2003df08 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003df08:	3021fff4 	addik	r1, r1, -12
2003df0c:	fa610004 	swi	r19, r1, 4
2003df10:	fa810008 	swi	r20, r1, 8
2003df14:	12610000 	addk	r19, r1, r0
2003df18:	96808000 	mfs	r20, rpc
2003df1c:	b000dffc 	imm	-8196
2003df20:	32943a44 	addik	r20, r20, 14916
2003df24:	f8b30010 	swi	r5, r19, 16
2003df28:	10660000 	addk	r3, r6, r0
2003df2c:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003df30:	e8730010 	lwi	r3, r19, 16
2003df34:	e8830004 	lwi	r4, r3, 4
2003df38:	e8730010 	lwi	r3, r19, 16
2003df3c:	e8630010 	lwi	r3, r3, 16
2003df40:	e8a30000 	lwi	r5, r3, 0
2003df44:	e8730010 	lwi	r3, r19, 16
2003df48:	e8630000 	lwi	r3, r3, 0
2003df4c:	3063ffff 	addik	r3, r3, -1
2003df50:	84651800 	and	r3, r5, r3
2003df54:	10641800 	addk	r3, r4, r3
2003df58:	e0930014 	lbui	r4, r19, 20
2003df5c:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2003df60:	e8730010 	lwi	r3, r19, 16
2003df64:	e8630010 	lwi	r3, r3, 16
2003df68:	e8830000 	lwi	r4, r3, 0
2003df6c:	30840001 	addik	r4, r4, 1
2003df70:	f8830000 	swi	r4, r3, 0
}
2003df74:	10330000 	addk	r1, r19, r0
2003df78:	ea610004 	lwi	r19, r1, 4
2003df7c:	ea810008 	lwi	r20, r1, 8
2003df80:	3021000c 	addik	r1, r1, 12
2003df84:	b60f0008 	rtsd	r15, 8
2003df88:	80000000 	or	r0, r0, r0

2003df8c <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003df8c:	3021fff4 	addik	r1, r1, -12
2003df90:	fa610004 	swi	r19, r1, 4
2003df94:	fa810008 	swi	r20, r1, 8
2003df98:	12610000 	addk	r19, r1, r0
2003df9c:	96808000 	mfs	r20, rpc
2003dfa0:	b000dffc 	imm	-8196
2003dfa4:	329439c0 	addik	r20, r20, 14784
2003dfa8:	f8b30010 	swi	r5, r19, 16
2003dfac:	f8d30014 	swi	r6, r19, 20
2003dfb0:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003dfb4:	e8730010 	lwi	r3, r19, 16
2003dfb8:	e8630010 	lwi	r3, r3, 16
2003dfbc:	e8830000 	lwi	r4, r3, 0
2003dfc0:	e8730010 	lwi	r3, r19, 16
2003dfc4:	e8a3000c 	lwi	r5, r3, 12
2003dfc8:	e8730014 	lwi	r3, r19, 20
2003dfcc:	64630402 	bslli	r3, r3, 2
2003dfd0:	10651800 	addk	r3, r5, r3
2003dfd4:	e8630000 	lwi	r3, r3, 0
2003dfd8:	14a32000 	rsubk	r5, r3, r4
2003dfdc:	30600001 	addik	r3, r0, 1
2003dfe0:	e8930018 	lwi	r4, r19, 24
2003dfe4:	16442803 	cmpu	r18, r4, r5
2003dfe8:	bcb20008 	bgei	r18, 8		// 2003dff0
2003dfec:	10600000 	addk	r3, r0, r0
2003dff0:	a46300ff 	andi	r3, r3, 255
}
2003dff4:	10330000 	addk	r1, r19, r0
2003dff8:	ea610004 	lwi	r19, r1, 4
2003dffc:	ea810008 	lwi	r20, r1, 8
2003e000:	3021000c 	addik	r1, r1, 12
2003e004:	b60f0008 	rtsd	r15, 8
2003e008:	80000000 	or	r0, r0, r0

2003e00c <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003e00c:	3021fff4 	addik	r1, r1, -12
2003e010:	fa610004 	swi	r19, r1, 4
2003e014:	fa810008 	swi	r20, r1, 8
2003e018:	12610000 	addk	r19, r1, r0
2003e01c:	96808000 	mfs	r20, rpc
2003e020:	b000dffc 	imm	-8196
2003e024:	32943940 	addik	r20, r20, 14656
2003e028:	f8b30010 	swi	r5, r19, 16
2003e02c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003e030:	e8730010 	lwi	r3, r19, 16
2003e034:	e8630010 	lwi	r3, r3, 16
2003e038:	e8830000 	lwi	r4, r3, 0
2003e03c:	e8730010 	lwi	r3, r19, 16
2003e040:	e8a3000c 	lwi	r5, r3, 12
2003e044:	e8730014 	lwi	r3, r19, 20
2003e048:	64630402 	bslli	r3, r3, 2
2003e04c:	10651800 	addk	r3, r5, r3
2003e050:	e8630000 	lwi	r3, r3, 0
2003e054:	14632000 	rsubk	r3, r3, r4
}
2003e058:	10330000 	addk	r1, r19, r0
2003e05c:	ea610004 	lwi	r19, r1, 4
2003e060:	ea810008 	lwi	r20, r1, 8
2003e064:	3021000c 	addik	r1, r1, 12
2003e068:	b60f0008 	rtsd	r15, 8
2003e06c:	80000000 	or	r0, r0, r0

2003e070 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003e070:	3021fff0 	addik	r1, r1, -16
2003e074:	fa610008 	swi	r19, r1, 8
2003e078:	fa81000c 	swi	r20, r1, 12
2003e07c:	12610000 	addk	r19, r1, r0
2003e080:	96808000 	mfs	r20, rpc
2003e084:	b000dffc 	imm	-8196
2003e088:	329438dc 	addik	r20, r20, 14556
2003e08c:	f8b30014 	swi	r5, r19, 20
2003e090:	f8d30018 	swi	r6, r19, 24
2003e094:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003e098:	f8130004 	swi	r0, r19, 4
2003e09c:	b800005c 	bri	92		// 2003e0f8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003e0a0:	e8730014 	lwi	r3, r19, 20
2003e0a4:	e8830000 	lwi	r4, r3, 0
2003e0a8:	e8730014 	lwi	r3, r19, 20
2003e0ac:	e8a3000c 	lwi	r5, r3, 12
2003e0b0:	e8730004 	lwi	r3, r19, 4
2003e0b4:	64630402 	bslli	r3, r3, 2
2003e0b8:	10651800 	addk	r3, r5, r3
2003e0bc:	e8a30000 	lwi	r5, r3, 0
2003e0c0:	e8730014 	lwi	r3, r19, 20
2003e0c4:	e8630010 	lwi	r3, r3, 16
2003e0c8:	e8630000 	lwi	r3, r3, 0
2003e0cc:	14632800 	rsubk	r3, r3, r5
2003e0d0:	10641800 	addk	r3, r4, r3
2003e0d4:	30830001 	addik	r4, r3, 1
2003e0d8:	e873001c 	lwi	r3, r19, 28
2003e0dc:	16441803 	cmpu	r18, r4, r3
2003e0e0:	bc52000c 	blti	r18, 12		// 2003e0ec
            return 0;
2003e0e4:	10600000 	addk	r3, r0, r0
2003e0e8:	b8000024 	bri	36		// 2003e10c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003e0ec:	e8730004 	lwi	r3, r19, 4
2003e0f0:	30630001 	addik	r3, r3, 1
2003e0f4:	f8730004 	swi	r3, r19, 4
2003e0f8:	e8930004 	lwi	r4, r19, 4
2003e0fc:	e8730018 	lwi	r3, r19, 24
2003e100:	16432003 	cmpu	r18, r3, r4
2003e104:	bc52ff9c 	blti	r18, -100		// 2003e0a0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003e108:	30600001 	addik	r3, r0, 1
}
2003e10c:	10330000 	addk	r1, r19, r0
2003e110:	ea610008 	lwi	r19, r1, 8
2003e114:	ea81000c 	lwi	r20, r1, 12
2003e118:	30210010 	addik	r1, r1, 16
2003e11c:	b60f0008 	rtsd	r15, 8
2003e120:	80000000 	or	r0, r0, r0

2003e124 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003e124:	3021ffe8 	addik	r1, r1, -24
2003e128:	fa610010 	swi	r19, r1, 16
2003e12c:	fa810014 	swi	r20, r1, 20
2003e130:	12610000 	addk	r19, r1, r0
2003e134:	96808000 	mfs	r20, rpc
2003e138:	b000dffc 	imm	-8196
2003e13c:	32943828 	addik	r20, r20, 14376
2003e140:	f8b3001c 	swi	r5, r19, 28
2003e144:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003e148:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003e14c:	f8130004 	swi	r0, r19, 4
2003e150:	b8000054 	bri	84		// 2003e1a4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003e154:	e873001c 	lwi	r3, r19, 28
2003e158:	e8630010 	lwi	r3, r3, 16
2003e15c:	e8830000 	lwi	r4, r3, 0
2003e160:	e873001c 	lwi	r3, r19, 28
2003e164:	e8a3000c 	lwi	r5, r3, 12
2003e168:	e8730004 	lwi	r3, r19, 4
2003e16c:	64630402 	bslli	r3, r3, 2
2003e170:	10651800 	addk	r3, r5, r3
2003e174:	e8630000 	lwi	r3, r3, 0
2003e178:	14632000 	rsubk	r3, r3, r4
2003e17c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003e180:	e8930008 	lwi	r4, r19, 8
2003e184:	e873000c 	lwi	r3, r19, 12
2003e188:	16441803 	cmpu	r18, r4, r3
2003e18c:	bcb20008 	bgei	r18, 8		// 2003e194
2003e190:	10640000 	addk	r3, r4, r0
2003e194:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003e198:	e8730004 	lwi	r3, r19, 4
2003e19c:	30630001 	addik	r3, r3, 1
2003e1a0:	f8730004 	swi	r3, r19, 4
2003e1a4:	e8930004 	lwi	r4, r19, 4
2003e1a8:	e8730020 	lwi	r3, r19, 32
2003e1ac:	16432003 	cmpu	r18, r3, r4
2003e1b0:	bc52ffa4 	blti	r18, -92		// 2003e154
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003e1b4:	e873001c 	lwi	r3, r19, 28
2003e1b8:	e8830000 	lwi	r4, r3, 0
2003e1bc:	e8730008 	lwi	r3, r19, 8
2003e1c0:	14632000 	rsubk	r3, r3, r4
}
2003e1c4:	10330000 	addk	r1, r19, r0
2003e1c8:	ea610010 	lwi	r19, r1, 16
2003e1cc:	ea810014 	lwi	r20, r1, 20
2003e1d0:	30210018 	addik	r1, r1, 24
2003e1d4:	b60f0008 	rtsd	r15, 8
2003e1d8:	80000000 	or	r0, r0, r0

2003e1dc <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003e1dc:	3021fff0 	addik	r1, r1, -16
2003e1e0:	fa610008 	swi	r19, r1, 8
2003e1e4:	fa81000c 	swi	r20, r1, 12
2003e1e8:	12610000 	addk	r19, r1, r0
2003e1ec:	96808000 	mfs	r20, rpc
2003e1f0:	b000dffc 	imm	-8196
2003e1f4:	32943770 	addik	r20, r20, 14192
2003e1f8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2003e1fc:	e8730014 	lwi	r3, r19, 20
2003e200:	e8630010 	lwi	r3, r3, 16
2003e204:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003e208:	f8130004 	swi	r0, r19, 4
2003e20c:	b8000028 	bri	40		// 2003e234
        fifo->read_inds[i] = 0;
2003e210:	e8730014 	lwi	r3, r19, 20
2003e214:	e883000c 	lwi	r4, r3, 12
2003e218:	e8730004 	lwi	r3, r19, 4
2003e21c:	64630402 	bslli	r3, r3, 2
2003e220:	10641800 	addk	r3, r4, r3
2003e224:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003e228:	e8730004 	lwi	r3, r19, 4
2003e22c:	30630001 	addik	r3, r3, 1
2003e230:	f8730004 	swi	r3, r19, 4
2003e234:	e8730014 	lwi	r3, r19, 20
2003e238:	e8830008 	lwi	r4, r3, 8
2003e23c:	e8730004 	lwi	r3, r19, 4
2003e240:	16441803 	cmpu	r18, r4, r3
2003e244:	bc52ffcc 	blti	r18, -52		// 2003e210
        fifo->read_inds[i] = 0;
    }
}
2003e248:	10330000 	addk	r1, r19, r0
2003e24c:	ea610008 	lwi	r19, r1, 8
2003e250:	ea81000c 	lwi	r20, r1, 12
2003e254:	30210010 	addik	r1, r1, 16
2003e258:	b60f0008 	rtsd	r15, 8
2003e25c:	80000000 	or	r0, r0, r0

2003e260 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003e260:	3021fff0 	addik	r1, r1, -16
2003e264:	fa610008 	swi	r19, r1, 8
2003e268:	fa81000c 	swi	r20, r1, 12
2003e26c:	12610000 	addk	r19, r1, r0
2003e270:	96808000 	mfs	r20, rpc
2003e274:	b000dffc 	imm	-8196
2003e278:	329436ec 	addik	r20, r20, 14060
2003e27c:	f8b30014 	swi	r5, r19, 20
2003e280:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003e284:	e8730014 	lwi	r3, r19, 20
2003e288:	e8830004 	lwi	r4, r3, 4
2003e28c:	e8730014 	lwi	r3, r19, 20
2003e290:	e8a3000c 	lwi	r5, r3, 12
2003e294:	e8730018 	lwi	r3, r19, 24
2003e298:	64630402 	bslli	r3, r3, 2
2003e29c:	10651800 	addk	r3, r5, r3
2003e2a0:	e8a30000 	lwi	r5, r3, 0
2003e2a4:	e8730014 	lwi	r3, r19, 20
2003e2a8:	e8630000 	lwi	r3, r3, 0
2003e2ac:	3063ffff 	addik	r3, r3, -1
2003e2b0:	84651800 	and	r3, r5, r3
2003e2b4:	10631800 	addk	r3, r3, r3
2003e2b8:	10641800 	addk	r3, r4, r3
2003e2bc:	e4630000 	lhui	r3, r3, 0
2003e2c0:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003e2c4:	e8730014 	lwi	r3, r19, 20
2003e2c8:	e883000c 	lwi	r4, r3, 12
2003e2cc:	e8730018 	lwi	r3, r19, 24
2003e2d0:	64630402 	bslli	r3, r3, 2
2003e2d4:	10641800 	addk	r3, r4, r3
2003e2d8:	e8830000 	lwi	r4, r3, 0
2003e2dc:	30840001 	addik	r4, r4, 1
2003e2e0:	f8830000 	swi	r4, r3, 0
    return value;
2003e2e4:	e4730004 	lhui	r3, r19, 4
2003e2e8:	90630061 	sext16	r3, r3
}
2003e2ec:	10330000 	addk	r1, r19, r0
2003e2f0:	ea610008 	lwi	r19, r1, 8
2003e2f4:	ea81000c 	lwi	r20, r1, 12
2003e2f8:	30210010 	addik	r1, r1, 16
2003e2fc:	b60f0008 	rtsd	r15, 8
2003e300:	80000000 	or	r0, r0, r0

2003e304 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003e304:	3021fff4 	addik	r1, r1, -12
2003e308:	fa610004 	swi	r19, r1, 4
2003e30c:	fa810008 	swi	r20, r1, 8
2003e310:	12610000 	addk	r19, r1, r0
2003e314:	96808000 	mfs	r20, rpc
2003e318:	b000dffc 	imm	-8196
2003e31c:	32943648 	addik	r20, r20, 13896
2003e320:	f8b30010 	swi	r5, r19, 16
2003e324:	10660000 	addk	r3, r6, r0
2003e328:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003e32c:	e8730010 	lwi	r3, r19, 16
2003e330:	e8830004 	lwi	r4, r3, 4
2003e334:	e8730010 	lwi	r3, r19, 16
2003e338:	e8630010 	lwi	r3, r3, 16
2003e33c:	e8a30000 	lwi	r5, r3, 0
2003e340:	e8730010 	lwi	r3, r19, 16
2003e344:	e8630000 	lwi	r3, r3, 0
2003e348:	3063ffff 	addik	r3, r3, -1
2003e34c:	84651800 	and	r3, r5, r3
2003e350:	10631800 	addk	r3, r3, r3
2003e354:	10641800 	addk	r3, r4, r3
2003e358:	e4930014 	lhui	r4, r19, 20
2003e35c:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2003e360:	e8730010 	lwi	r3, r19, 16
2003e364:	e8630010 	lwi	r3, r3, 16
2003e368:	e8830000 	lwi	r4, r3, 0
2003e36c:	30840001 	addik	r4, r4, 1
2003e370:	f8830000 	swi	r4, r3, 0
}
2003e374:	10330000 	addk	r1, r19, r0
2003e378:	ea610004 	lwi	r19, r1, 4
2003e37c:	ea810008 	lwi	r20, r1, 8
2003e380:	3021000c 	addik	r1, r1, 12
2003e384:	b60f0008 	rtsd	r15, 8
2003e388:	80000000 	or	r0, r0, r0

2003e38c <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003e38c:	3021fff4 	addik	r1, r1, -12
2003e390:	fa610004 	swi	r19, r1, 4
2003e394:	fa810008 	swi	r20, r1, 8
2003e398:	12610000 	addk	r19, r1, r0
2003e39c:	96808000 	mfs	r20, rpc
2003e3a0:	b000dffc 	imm	-8196
2003e3a4:	329435c0 	addik	r20, r20, 13760
2003e3a8:	f8b30010 	swi	r5, r19, 16
2003e3ac:	f8d30014 	swi	r6, r19, 20
2003e3b0:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003e3b4:	e8730010 	lwi	r3, r19, 16
2003e3b8:	e8630010 	lwi	r3, r3, 16
2003e3bc:	e8830000 	lwi	r4, r3, 0
2003e3c0:	e8730010 	lwi	r3, r19, 16
2003e3c4:	e8a3000c 	lwi	r5, r3, 12
2003e3c8:	e8730014 	lwi	r3, r19, 20
2003e3cc:	64630402 	bslli	r3, r3, 2
2003e3d0:	10651800 	addk	r3, r5, r3
2003e3d4:	e8630000 	lwi	r3, r3, 0
2003e3d8:	14a32000 	rsubk	r5, r3, r4
2003e3dc:	30600001 	addik	r3, r0, 1
2003e3e0:	e8930018 	lwi	r4, r19, 24
2003e3e4:	16442803 	cmpu	r18, r4, r5
2003e3e8:	bcb20008 	bgei	r18, 8		// 2003e3f0
2003e3ec:	10600000 	addk	r3, r0, r0
2003e3f0:	a46300ff 	andi	r3, r3, 255
}
2003e3f4:	10330000 	addk	r1, r19, r0
2003e3f8:	ea610004 	lwi	r19, r1, 4
2003e3fc:	ea810008 	lwi	r20, r1, 8
2003e400:	3021000c 	addik	r1, r1, 12
2003e404:	b60f0008 	rtsd	r15, 8
2003e408:	80000000 	or	r0, r0, r0

2003e40c <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003e40c:	3021fff4 	addik	r1, r1, -12
2003e410:	fa610004 	swi	r19, r1, 4
2003e414:	fa810008 	swi	r20, r1, 8
2003e418:	12610000 	addk	r19, r1, r0
2003e41c:	96808000 	mfs	r20, rpc
2003e420:	b000dffc 	imm	-8196
2003e424:	32943540 	addik	r20, r20, 13632
2003e428:	f8b30010 	swi	r5, r19, 16
2003e42c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003e430:	e8730010 	lwi	r3, r19, 16
2003e434:	e8630010 	lwi	r3, r3, 16
2003e438:	e8830000 	lwi	r4, r3, 0
2003e43c:	e8730010 	lwi	r3, r19, 16
2003e440:	e8a3000c 	lwi	r5, r3, 12
2003e444:	e8730014 	lwi	r3, r19, 20
2003e448:	64630402 	bslli	r3, r3, 2
2003e44c:	10651800 	addk	r3, r5, r3
2003e450:	e8630000 	lwi	r3, r3, 0
2003e454:	14632000 	rsubk	r3, r3, r4
}
2003e458:	10330000 	addk	r1, r19, r0
2003e45c:	ea610004 	lwi	r19, r1, 4
2003e460:	ea810008 	lwi	r20, r1, 8
2003e464:	3021000c 	addik	r1, r1, 12
2003e468:	b60f0008 	rtsd	r15, 8
2003e46c:	80000000 	or	r0, r0, r0

2003e470 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003e470:	3021fff0 	addik	r1, r1, -16
2003e474:	fa610008 	swi	r19, r1, 8
2003e478:	fa81000c 	swi	r20, r1, 12
2003e47c:	12610000 	addk	r19, r1, r0
2003e480:	96808000 	mfs	r20, rpc
2003e484:	b000dffc 	imm	-8196
2003e488:	329434dc 	addik	r20, r20, 13532
2003e48c:	f8b30014 	swi	r5, r19, 20
2003e490:	f8d30018 	swi	r6, r19, 24
2003e494:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003e498:	f8130004 	swi	r0, r19, 4
2003e49c:	b800005c 	bri	92		// 2003e4f8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003e4a0:	e8730014 	lwi	r3, r19, 20
2003e4a4:	e8830000 	lwi	r4, r3, 0
2003e4a8:	e8730014 	lwi	r3, r19, 20
2003e4ac:	e8a3000c 	lwi	r5, r3, 12
2003e4b0:	e8730004 	lwi	r3, r19, 4
2003e4b4:	64630402 	bslli	r3, r3, 2
2003e4b8:	10651800 	addk	r3, r5, r3
2003e4bc:	e8a30000 	lwi	r5, r3, 0
2003e4c0:	e8730014 	lwi	r3, r19, 20
2003e4c4:	e8630010 	lwi	r3, r3, 16
2003e4c8:	e8630000 	lwi	r3, r3, 0
2003e4cc:	14632800 	rsubk	r3, r3, r5
2003e4d0:	10641800 	addk	r3, r4, r3
2003e4d4:	30830001 	addik	r4, r3, 1
2003e4d8:	e873001c 	lwi	r3, r19, 28
2003e4dc:	16441803 	cmpu	r18, r4, r3
2003e4e0:	bc52000c 	blti	r18, 12		// 2003e4ec
            return 0;
2003e4e4:	10600000 	addk	r3, r0, r0
2003e4e8:	b8000024 	bri	36		// 2003e50c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003e4ec:	e8730004 	lwi	r3, r19, 4
2003e4f0:	30630001 	addik	r3, r3, 1
2003e4f4:	f8730004 	swi	r3, r19, 4
2003e4f8:	e8930004 	lwi	r4, r19, 4
2003e4fc:	e8730018 	lwi	r3, r19, 24
2003e500:	16432003 	cmpu	r18, r3, r4
2003e504:	bc52ff9c 	blti	r18, -100		// 2003e4a0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003e508:	30600001 	addik	r3, r0, 1
}
2003e50c:	10330000 	addk	r1, r19, r0
2003e510:	ea610008 	lwi	r19, r1, 8
2003e514:	ea81000c 	lwi	r20, r1, 12
2003e518:	30210010 	addik	r1, r1, 16
2003e51c:	b60f0008 	rtsd	r15, 8
2003e520:	80000000 	or	r0, r0, r0

2003e524 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003e524:	3021ffe8 	addik	r1, r1, -24
2003e528:	fa610010 	swi	r19, r1, 16
2003e52c:	fa810014 	swi	r20, r1, 20
2003e530:	12610000 	addk	r19, r1, r0
2003e534:	96808000 	mfs	r20, rpc
2003e538:	b000dffc 	imm	-8196
2003e53c:	32943428 	addik	r20, r20, 13352
2003e540:	f8b3001c 	swi	r5, r19, 28
2003e544:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003e548:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003e54c:	f8130004 	swi	r0, r19, 4
2003e550:	b8000054 	bri	84		// 2003e5a4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003e554:	e873001c 	lwi	r3, r19, 28
2003e558:	e8630010 	lwi	r3, r3, 16
2003e55c:	e8830000 	lwi	r4, r3, 0
2003e560:	e873001c 	lwi	r3, r19, 28
2003e564:	e8a3000c 	lwi	r5, r3, 12
2003e568:	e8730004 	lwi	r3, r19, 4
2003e56c:	64630402 	bslli	r3, r3, 2
2003e570:	10651800 	addk	r3, r5, r3
2003e574:	e8630000 	lwi	r3, r3, 0
2003e578:	14632000 	rsubk	r3, r3, r4
2003e57c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003e580:	e8930008 	lwi	r4, r19, 8
2003e584:	e873000c 	lwi	r3, r19, 12
2003e588:	16441803 	cmpu	r18, r4, r3
2003e58c:	bcb20008 	bgei	r18, 8		// 2003e594
2003e590:	10640000 	addk	r3, r4, r0
2003e594:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003e598:	e8730004 	lwi	r3, r19, 4
2003e59c:	30630001 	addik	r3, r3, 1
2003e5a0:	f8730004 	swi	r3, r19, 4
2003e5a4:	e8930004 	lwi	r4, r19, 4
2003e5a8:	e8730020 	lwi	r3, r19, 32
2003e5ac:	16432003 	cmpu	r18, r3, r4
2003e5b0:	bc52ffa4 	blti	r18, -92		// 2003e554
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003e5b4:	e873001c 	lwi	r3, r19, 28
2003e5b8:	e8830000 	lwi	r4, r3, 0
2003e5bc:	e8730008 	lwi	r3, r19, 8
2003e5c0:	14632000 	rsubk	r3, r3, r4
}
2003e5c4:	10330000 	addk	r1, r19, r0
2003e5c8:	ea610010 	lwi	r19, r1, 16
2003e5cc:	ea810014 	lwi	r20, r1, 20
2003e5d0:	30210018 	addik	r1, r1, 24
2003e5d4:	b60f0008 	rtsd	r15, 8
2003e5d8:	80000000 	or	r0, r0, r0

2003e5dc <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003e5dc:	3021fff0 	addik	r1, r1, -16
2003e5e0:	fa610008 	swi	r19, r1, 8
2003e5e4:	fa81000c 	swi	r20, r1, 12
2003e5e8:	12610000 	addk	r19, r1, r0
2003e5ec:	96808000 	mfs	r20, rpc
2003e5f0:	b000dffc 	imm	-8196
2003e5f4:	32943370 	addik	r20, r20, 13168
2003e5f8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2003e5fc:	e8730014 	lwi	r3, r19, 20
2003e600:	e8630010 	lwi	r3, r3, 16
2003e604:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003e608:	f8130004 	swi	r0, r19, 4
2003e60c:	b8000028 	bri	40		// 2003e634
        fifo->read_inds[i] = 0;
2003e610:	e8730014 	lwi	r3, r19, 20
2003e614:	e883000c 	lwi	r4, r3, 12
2003e618:	e8730004 	lwi	r3, r19, 4
2003e61c:	64630402 	bslli	r3, r3, 2
2003e620:	10641800 	addk	r3, r4, r3
2003e624:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003e628:	e8730004 	lwi	r3, r19, 4
2003e62c:	30630001 	addik	r3, r3, 1
2003e630:	f8730004 	swi	r3, r19, 4
2003e634:	e8730014 	lwi	r3, r19, 20
2003e638:	e8830008 	lwi	r4, r3, 8
2003e63c:	e8730004 	lwi	r3, r19, 4
2003e640:	16441803 	cmpu	r18, r4, r3
2003e644:	bc52ffcc 	blti	r18, -52		// 2003e610
        fifo->read_inds[i] = 0;
    }
}
2003e648:	10330000 	addk	r1, r19, r0
2003e64c:	ea610008 	lwi	r19, r1, 8
2003e650:	ea81000c 	lwi	r20, r1, 12
2003e654:	30210010 	addik	r1, r1, 16
2003e658:	b60f0008 	rtsd	r15, 8
2003e65c:	80000000 	or	r0, r0, r0

2003e660 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003e660:	3021fff0 	addik	r1, r1, -16
2003e664:	fa610008 	swi	r19, r1, 8
2003e668:	fa81000c 	swi	r20, r1, 12
2003e66c:	12610000 	addk	r19, r1, r0
2003e670:	96808000 	mfs	r20, rpc
2003e674:	b000dffc 	imm	-8196
2003e678:	329432ec 	addik	r20, r20, 13036
2003e67c:	f8b30014 	swi	r5, r19, 20
2003e680:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003e684:	e8730014 	lwi	r3, r19, 20
2003e688:	e8830004 	lwi	r4, r3, 4
2003e68c:	e8730014 	lwi	r3, r19, 20
2003e690:	e8a3000c 	lwi	r5, r3, 12
2003e694:	e8730018 	lwi	r3, r19, 24
2003e698:	64630402 	bslli	r3, r3, 2
2003e69c:	10651800 	addk	r3, r5, r3
2003e6a0:	e8a30000 	lwi	r5, r3, 0
2003e6a4:	e8730014 	lwi	r3, r19, 20
2003e6a8:	e8630000 	lwi	r3, r3, 0
2003e6ac:	3063ffff 	addik	r3, r3, -1
2003e6b0:	84651800 	and	r3, r5, r3
2003e6b4:	64630402 	bslli	r3, r3, 2
2003e6b8:	10641800 	addk	r3, r4, r3
2003e6bc:	e8630000 	lwi	r3, r3, 0
2003e6c0:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003e6c4:	e8730014 	lwi	r3, r19, 20
2003e6c8:	e883000c 	lwi	r4, r3, 12
2003e6cc:	e8730018 	lwi	r3, r19, 24
2003e6d0:	64630402 	bslli	r3, r3, 2
2003e6d4:	10641800 	addk	r3, r4, r3
2003e6d8:	e8830000 	lwi	r4, r3, 0
2003e6dc:	30840001 	addik	r4, r4, 1
2003e6e0:	f8830000 	swi	r4, r3, 0
    return value;
2003e6e4:	e8730004 	lwi	r3, r19, 4
}
2003e6e8:	10330000 	addk	r1, r19, r0
2003e6ec:	ea610008 	lwi	r19, r1, 8
2003e6f0:	ea81000c 	lwi	r20, r1, 12
2003e6f4:	30210010 	addik	r1, r1, 16
2003e6f8:	b60f0008 	rtsd	r15, 8
2003e6fc:	80000000 	or	r0, r0, r0

2003e700 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003e700:	3021fff4 	addik	r1, r1, -12
2003e704:	fa610004 	swi	r19, r1, 4
2003e708:	fa810008 	swi	r20, r1, 8
2003e70c:	12610000 	addk	r19, r1, r0
2003e710:	96808000 	mfs	r20, rpc
2003e714:	b000dffc 	imm	-8196
2003e718:	3294324c 	addik	r20, r20, 12876
2003e71c:	f8b30010 	swi	r5, r19, 16
2003e720:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003e724:	e8730010 	lwi	r3, r19, 16
2003e728:	e8830004 	lwi	r4, r3, 4
2003e72c:	e8730010 	lwi	r3, r19, 16
2003e730:	e8630010 	lwi	r3, r3, 16
2003e734:	e8a30000 	lwi	r5, r3, 0
2003e738:	e8730010 	lwi	r3, r19, 16
2003e73c:	e8630000 	lwi	r3, r3, 0
2003e740:	3063ffff 	addik	r3, r3, -1
2003e744:	84651800 	and	r3, r5, r3
2003e748:	64630402 	bslli	r3, r3, 2
2003e74c:	10641800 	addk	r3, r4, r3
2003e750:	e8930014 	lwi	r4, r19, 20
2003e754:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2003e758:	e8730010 	lwi	r3, r19, 16
2003e75c:	e8630010 	lwi	r3, r3, 16
2003e760:	e8830000 	lwi	r4, r3, 0
2003e764:	30840001 	addik	r4, r4, 1
2003e768:	f8830000 	swi	r4, r3, 0
}
2003e76c:	10330000 	addk	r1, r19, r0
2003e770:	ea610004 	lwi	r19, r1, 4
2003e774:	ea810008 	lwi	r20, r1, 8
2003e778:	3021000c 	addik	r1, r1, 12
2003e77c:	b60f0008 	rtsd	r15, 8
2003e780:	80000000 	or	r0, r0, r0

2003e784 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003e784:	3021fff4 	addik	r1, r1, -12
2003e788:	fa610004 	swi	r19, r1, 4
2003e78c:	fa810008 	swi	r20, r1, 8
2003e790:	12610000 	addk	r19, r1, r0
2003e794:	96808000 	mfs	r20, rpc
2003e798:	b000dffc 	imm	-8196
2003e79c:	329431c8 	addik	r20, r20, 12744
2003e7a0:	f8b30010 	swi	r5, r19, 16
2003e7a4:	f8d30014 	swi	r6, r19, 20
2003e7a8:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003e7ac:	e8730010 	lwi	r3, r19, 16
2003e7b0:	e8630010 	lwi	r3, r3, 16
2003e7b4:	e8830000 	lwi	r4, r3, 0
2003e7b8:	e8730010 	lwi	r3, r19, 16
2003e7bc:	e8a3000c 	lwi	r5, r3, 12
2003e7c0:	e8730014 	lwi	r3, r19, 20
2003e7c4:	64630402 	bslli	r3, r3, 2
2003e7c8:	10651800 	addk	r3, r5, r3
2003e7cc:	e8630000 	lwi	r3, r3, 0
2003e7d0:	14a32000 	rsubk	r5, r3, r4
2003e7d4:	30600001 	addik	r3, r0, 1
2003e7d8:	e8930018 	lwi	r4, r19, 24
2003e7dc:	16442803 	cmpu	r18, r4, r5
2003e7e0:	bcb20008 	bgei	r18, 8		// 2003e7e8
2003e7e4:	10600000 	addk	r3, r0, r0
2003e7e8:	a46300ff 	andi	r3, r3, 255
}
2003e7ec:	10330000 	addk	r1, r19, r0
2003e7f0:	ea610004 	lwi	r19, r1, 4
2003e7f4:	ea810008 	lwi	r20, r1, 8
2003e7f8:	3021000c 	addik	r1, r1, 12
2003e7fc:	b60f0008 	rtsd	r15, 8
2003e800:	80000000 	or	r0, r0, r0

2003e804 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003e804:	3021fff4 	addik	r1, r1, -12
2003e808:	fa610004 	swi	r19, r1, 4
2003e80c:	fa810008 	swi	r20, r1, 8
2003e810:	12610000 	addk	r19, r1, r0
2003e814:	96808000 	mfs	r20, rpc
2003e818:	b000dffc 	imm	-8196
2003e81c:	32943148 	addik	r20, r20, 12616
2003e820:	f8b30010 	swi	r5, r19, 16
2003e824:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003e828:	e8730010 	lwi	r3, r19, 16
2003e82c:	e8630010 	lwi	r3, r3, 16
2003e830:	e8830000 	lwi	r4, r3, 0
2003e834:	e8730010 	lwi	r3, r19, 16
2003e838:	e8a3000c 	lwi	r5, r3, 12
2003e83c:	e8730014 	lwi	r3, r19, 20
2003e840:	64630402 	bslli	r3, r3, 2
2003e844:	10651800 	addk	r3, r5, r3
2003e848:	e8630000 	lwi	r3, r3, 0
2003e84c:	14632000 	rsubk	r3, r3, r4
}
2003e850:	10330000 	addk	r1, r19, r0
2003e854:	ea610004 	lwi	r19, r1, 4
2003e858:	ea810008 	lwi	r20, r1, 8
2003e85c:	3021000c 	addik	r1, r1, 12
2003e860:	b60f0008 	rtsd	r15, 8
2003e864:	80000000 	or	r0, r0, r0

2003e868 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003e868:	3021fff0 	addik	r1, r1, -16
2003e86c:	fa610008 	swi	r19, r1, 8
2003e870:	fa81000c 	swi	r20, r1, 12
2003e874:	12610000 	addk	r19, r1, r0
2003e878:	96808000 	mfs	r20, rpc
2003e87c:	b000dffc 	imm	-8196
2003e880:	329430e4 	addik	r20, r20, 12516
2003e884:	f8b30014 	swi	r5, r19, 20
2003e888:	f8d30018 	swi	r6, r19, 24
2003e88c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003e890:	f8130004 	swi	r0, r19, 4
2003e894:	b800005c 	bri	92		// 2003e8f0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003e898:	e8730014 	lwi	r3, r19, 20
2003e89c:	e8830000 	lwi	r4, r3, 0
2003e8a0:	e8730014 	lwi	r3, r19, 20
2003e8a4:	e8a3000c 	lwi	r5, r3, 12
2003e8a8:	e8730004 	lwi	r3, r19, 4
2003e8ac:	64630402 	bslli	r3, r3, 2
2003e8b0:	10651800 	addk	r3, r5, r3
2003e8b4:	e8a30000 	lwi	r5, r3, 0
2003e8b8:	e8730014 	lwi	r3, r19, 20
2003e8bc:	e8630010 	lwi	r3, r3, 16
2003e8c0:	e8630000 	lwi	r3, r3, 0
2003e8c4:	14632800 	rsubk	r3, r3, r5
2003e8c8:	10641800 	addk	r3, r4, r3
2003e8cc:	30830001 	addik	r4, r3, 1
2003e8d0:	e873001c 	lwi	r3, r19, 28
2003e8d4:	16441803 	cmpu	r18, r4, r3
2003e8d8:	bc52000c 	blti	r18, 12		// 2003e8e4
            return 0;
2003e8dc:	10600000 	addk	r3, r0, r0
2003e8e0:	b8000024 	bri	36		// 2003e904
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003e8e4:	e8730004 	lwi	r3, r19, 4
2003e8e8:	30630001 	addik	r3, r3, 1
2003e8ec:	f8730004 	swi	r3, r19, 4
2003e8f0:	e8930004 	lwi	r4, r19, 4
2003e8f4:	e8730018 	lwi	r3, r19, 24
2003e8f8:	16432003 	cmpu	r18, r3, r4
2003e8fc:	bc52ff9c 	blti	r18, -100		// 2003e898
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003e900:	30600001 	addik	r3, r0, 1
}
2003e904:	10330000 	addk	r1, r19, r0
2003e908:	ea610008 	lwi	r19, r1, 8
2003e90c:	ea81000c 	lwi	r20, r1, 12
2003e910:	30210010 	addik	r1, r1, 16
2003e914:	b60f0008 	rtsd	r15, 8
2003e918:	80000000 	or	r0, r0, r0

2003e91c <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003e91c:	3021ffe8 	addik	r1, r1, -24
2003e920:	fa610010 	swi	r19, r1, 16
2003e924:	fa810014 	swi	r20, r1, 20
2003e928:	12610000 	addk	r19, r1, r0
2003e92c:	96808000 	mfs	r20, rpc
2003e930:	b000dffc 	imm	-8196
2003e934:	32943030 	addik	r20, r20, 12336
2003e938:	f8b3001c 	swi	r5, r19, 28
2003e93c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003e940:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003e944:	f8130004 	swi	r0, r19, 4
2003e948:	b8000054 	bri	84		// 2003e99c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003e94c:	e873001c 	lwi	r3, r19, 28
2003e950:	e8630010 	lwi	r3, r3, 16
2003e954:	e8830000 	lwi	r4, r3, 0
2003e958:	e873001c 	lwi	r3, r19, 28
2003e95c:	e8a3000c 	lwi	r5, r3, 12
2003e960:	e8730004 	lwi	r3, r19, 4
2003e964:	64630402 	bslli	r3, r3, 2
2003e968:	10651800 	addk	r3, r5, r3
2003e96c:	e8630000 	lwi	r3, r3, 0
2003e970:	14632000 	rsubk	r3, r3, r4
2003e974:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003e978:	e8930008 	lwi	r4, r19, 8
2003e97c:	e873000c 	lwi	r3, r19, 12
2003e980:	16441803 	cmpu	r18, r4, r3
2003e984:	bcb20008 	bgei	r18, 8		// 2003e98c
2003e988:	10640000 	addk	r3, r4, r0
2003e98c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003e990:	e8730004 	lwi	r3, r19, 4
2003e994:	30630001 	addik	r3, r3, 1
2003e998:	f8730004 	swi	r3, r19, 4
2003e99c:	e8930004 	lwi	r4, r19, 4
2003e9a0:	e8730020 	lwi	r3, r19, 32
2003e9a4:	16432003 	cmpu	r18, r3, r4
2003e9a8:	bc52ffa4 	blti	r18, -92		// 2003e94c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003e9ac:	e873001c 	lwi	r3, r19, 28
2003e9b0:	e8830000 	lwi	r4, r3, 0
2003e9b4:	e8730008 	lwi	r3, r19, 8
2003e9b8:	14632000 	rsubk	r3, r3, r4
}
2003e9bc:	10330000 	addk	r1, r19, r0
2003e9c0:	ea610010 	lwi	r19, r1, 16
2003e9c4:	ea810014 	lwi	r20, r1, 20
2003e9c8:	30210018 	addik	r1, r1, 24
2003e9cc:	b60f0008 	rtsd	r15, 8
2003e9d0:	80000000 	or	r0, r0, r0

2003e9d4 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003e9d4:	3021fff0 	addik	r1, r1, -16
2003e9d8:	fa610008 	swi	r19, r1, 8
2003e9dc:	fa81000c 	swi	r20, r1, 12
2003e9e0:	12610000 	addk	r19, r1, r0
2003e9e4:	96808000 	mfs	r20, rpc
2003e9e8:	b000dffc 	imm	-8196
2003e9ec:	32942f78 	addik	r20, r20, 12152
2003e9f0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2003e9f4:	e8730014 	lwi	r3, r19, 20
2003e9f8:	e8630010 	lwi	r3, r3, 16
2003e9fc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003ea00:	f8130004 	swi	r0, r19, 4
2003ea04:	b8000028 	bri	40		// 2003ea2c
        fifo->read_inds[i] = 0;
2003ea08:	e8730014 	lwi	r3, r19, 20
2003ea0c:	e883000c 	lwi	r4, r3, 12
2003ea10:	e8730004 	lwi	r3, r19, 4
2003ea14:	64630402 	bslli	r3, r3, 2
2003ea18:	10641800 	addk	r3, r4, r3
2003ea1c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003ea20:	e8730004 	lwi	r3, r19, 4
2003ea24:	30630001 	addik	r3, r3, 1
2003ea28:	f8730004 	swi	r3, r19, 4
2003ea2c:	e8730014 	lwi	r3, r19, 20
2003ea30:	e8830008 	lwi	r4, r3, 8
2003ea34:	e8730004 	lwi	r3, r19, 4
2003ea38:	16441803 	cmpu	r18, r4, r3
2003ea3c:	bc52ffcc 	blti	r18, -52		// 2003ea08
        fifo->read_inds[i] = 0;
    }
}
2003ea40:	10330000 	addk	r1, r19, r0
2003ea44:	ea610008 	lwi	r19, r1, 8
2003ea48:	ea81000c 	lwi	r20, r1, 12
2003ea4c:	30210010 	addik	r1, r1, 16
2003ea50:	b60f0008 	rtsd	r15, 8
2003ea54:	80000000 	or	r0, r0, r0

2003ea58 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003ea58:	3021ffec 	addik	r1, r1, -20
2003ea5c:	fa61000c 	swi	r19, r1, 12
2003ea60:	fa810010 	swi	r20, r1, 16
2003ea64:	12610000 	addk	r19, r1, r0
2003ea68:	96808000 	mfs	r20, rpc
2003ea6c:	b000dffc 	imm	-8196
2003ea70:	32942ef4 	addik	r20, r20, 12020
2003ea74:	f8b30018 	swi	r5, r19, 24
2003ea78:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003ea7c:	e8730018 	lwi	r3, r19, 24
2003ea80:	e8830004 	lwi	r4, r3, 4
2003ea84:	e8730018 	lwi	r3, r19, 24
2003ea88:	e8a3000c 	lwi	r5, r3, 12
2003ea8c:	e873001c 	lwi	r3, r19, 28
2003ea90:	64630402 	bslli	r3, r3, 2
2003ea94:	10651800 	addk	r3, r5, r3
2003ea98:	e8a30000 	lwi	r5, r3, 0
2003ea9c:	e8730018 	lwi	r3, r19, 24
2003eaa0:	e8630000 	lwi	r3, r3, 0
2003eaa4:	3063ffff 	addik	r3, r3, -1
2003eaa8:	84651800 	and	r3, r5, r3
2003eaac:	64630403 	bslli	r3, r3, 3
2003eab0:	10641800 	addk	r3, r4, r3
2003eab4:	e8830000 	lwi	r4, r3, 0
2003eab8:	e8a30004 	lwi	r5, r3, 4
2003eabc:	f8930004 	swi	r4, r19, 4
2003eac0:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2003eac4:	e8730018 	lwi	r3, r19, 24
2003eac8:	e883000c 	lwi	r4, r3, 12
2003eacc:	e873001c 	lwi	r3, r19, 28
2003ead0:	64630402 	bslli	r3, r3, 2
2003ead4:	10641800 	addk	r3, r4, r3
2003ead8:	e8830000 	lwi	r4, r3, 0
2003eadc:	30840001 	addik	r4, r4, 1
2003eae0:	f8830000 	swi	r4, r3, 0
    return value;
2003eae4:	e8930004 	lwi	r4, r19, 4
2003eae8:	e8b30008 	lwi	r5, r19, 8
}
2003eaec:	10640000 	addk	r3, r4, r0
2003eaf0:	10850000 	addk	r4, r5, r0
2003eaf4:	10330000 	addk	r1, r19, r0
2003eaf8:	ea61000c 	lwi	r19, r1, 12
2003eafc:	ea810010 	lwi	r20, r1, 16
2003eb00:	30210014 	addik	r1, r1, 20
2003eb04:	b60f0008 	rtsd	r15, 8
2003eb08:	80000000 	or	r0, r0, r0

2003eb0c <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003eb0c:	3021fff4 	addik	r1, r1, -12
2003eb10:	fa610004 	swi	r19, r1, 4
2003eb14:	fa810008 	swi	r20, r1, 8
2003eb18:	12610000 	addk	r19, r1, r0
2003eb1c:	96808000 	mfs	r20, rpc
2003eb20:	b000dffc 	imm	-8196
2003eb24:	32942e40 	addik	r20, r20, 11840
2003eb28:	f8b30010 	swi	r5, r19, 16
2003eb2c:	f8d30014 	swi	r6, r19, 20
2003eb30:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003eb34:	e8730010 	lwi	r3, r19, 16
2003eb38:	e8830004 	lwi	r4, r3, 4
2003eb3c:	e8730010 	lwi	r3, r19, 16
2003eb40:	e8630010 	lwi	r3, r3, 16
2003eb44:	e8a30000 	lwi	r5, r3, 0
2003eb48:	e8730010 	lwi	r3, r19, 16
2003eb4c:	e8630000 	lwi	r3, r3, 0
2003eb50:	3063ffff 	addik	r3, r3, -1
2003eb54:	84651800 	and	r3, r5, r3
2003eb58:	64630403 	bslli	r3, r3, 3
2003eb5c:	10641800 	addk	r3, r4, r3
2003eb60:	e8930014 	lwi	r4, r19, 20
2003eb64:	e8b30018 	lwi	r5, r19, 24
2003eb68:	f8830000 	swi	r4, r3, 0
2003eb6c:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2003eb70:	e8730010 	lwi	r3, r19, 16
2003eb74:	e8630010 	lwi	r3, r3, 16
2003eb78:	e8830000 	lwi	r4, r3, 0
2003eb7c:	30840001 	addik	r4, r4, 1
2003eb80:	f8830000 	swi	r4, r3, 0
}
2003eb84:	10330000 	addk	r1, r19, r0
2003eb88:	ea610004 	lwi	r19, r1, 4
2003eb8c:	ea810008 	lwi	r20, r1, 8
2003eb90:	3021000c 	addik	r1, r1, 12
2003eb94:	b60f0008 	rtsd	r15, 8
2003eb98:	80000000 	or	r0, r0, r0

2003eb9c <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003eb9c:	3021fff4 	addik	r1, r1, -12
2003eba0:	fa610004 	swi	r19, r1, 4
2003eba4:	fa810008 	swi	r20, r1, 8
2003eba8:	12610000 	addk	r19, r1, r0
2003ebac:	96808000 	mfs	r20, rpc
2003ebb0:	b000dffc 	imm	-8196
2003ebb4:	32942db0 	addik	r20, r20, 11696
2003ebb8:	f8b30010 	swi	r5, r19, 16
2003ebbc:	f8d30014 	swi	r6, r19, 20
2003ebc0:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003ebc4:	e8730010 	lwi	r3, r19, 16
2003ebc8:	e8630010 	lwi	r3, r3, 16
2003ebcc:	e8830000 	lwi	r4, r3, 0
2003ebd0:	e8730010 	lwi	r3, r19, 16
2003ebd4:	e8a3000c 	lwi	r5, r3, 12
2003ebd8:	e8730014 	lwi	r3, r19, 20
2003ebdc:	64630402 	bslli	r3, r3, 2
2003ebe0:	10651800 	addk	r3, r5, r3
2003ebe4:	e8630000 	lwi	r3, r3, 0
2003ebe8:	14a32000 	rsubk	r5, r3, r4
2003ebec:	30600001 	addik	r3, r0, 1
2003ebf0:	e8930018 	lwi	r4, r19, 24
2003ebf4:	16442803 	cmpu	r18, r4, r5
2003ebf8:	bcb20008 	bgei	r18, 8		// 2003ec00
2003ebfc:	10600000 	addk	r3, r0, r0
2003ec00:	a46300ff 	andi	r3, r3, 255
}
2003ec04:	10330000 	addk	r1, r19, r0
2003ec08:	ea610004 	lwi	r19, r1, 4
2003ec0c:	ea810008 	lwi	r20, r1, 8
2003ec10:	3021000c 	addik	r1, r1, 12
2003ec14:	b60f0008 	rtsd	r15, 8
2003ec18:	80000000 	or	r0, r0, r0

2003ec1c <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003ec1c:	3021fff4 	addik	r1, r1, -12
2003ec20:	fa610004 	swi	r19, r1, 4
2003ec24:	fa810008 	swi	r20, r1, 8
2003ec28:	12610000 	addk	r19, r1, r0
2003ec2c:	96808000 	mfs	r20, rpc
2003ec30:	b000dffc 	imm	-8196
2003ec34:	32942d30 	addik	r20, r20, 11568
2003ec38:	f8b30010 	swi	r5, r19, 16
2003ec3c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003ec40:	e8730010 	lwi	r3, r19, 16
2003ec44:	e8630010 	lwi	r3, r3, 16
2003ec48:	e8830000 	lwi	r4, r3, 0
2003ec4c:	e8730010 	lwi	r3, r19, 16
2003ec50:	e8a3000c 	lwi	r5, r3, 12
2003ec54:	e8730014 	lwi	r3, r19, 20
2003ec58:	64630402 	bslli	r3, r3, 2
2003ec5c:	10651800 	addk	r3, r5, r3
2003ec60:	e8630000 	lwi	r3, r3, 0
2003ec64:	14632000 	rsubk	r3, r3, r4
}
2003ec68:	10330000 	addk	r1, r19, r0
2003ec6c:	ea610004 	lwi	r19, r1, 4
2003ec70:	ea810008 	lwi	r20, r1, 8
2003ec74:	3021000c 	addik	r1, r1, 12
2003ec78:	b60f0008 	rtsd	r15, 8
2003ec7c:	80000000 	or	r0, r0, r0

2003ec80 <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003ec80:	3021fff0 	addik	r1, r1, -16
2003ec84:	fa610008 	swi	r19, r1, 8
2003ec88:	fa81000c 	swi	r20, r1, 12
2003ec8c:	12610000 	addk	r19, r1, r0
2003ec90:	96808000 	mfs	r20, rpc
2003ec94:	b000dffc 	imm	-8196
2003ec98:	32942ccc 	addik	r20, r20, 11468
2003ec9c:	f8b30014 	swi	r5, r19, 20
2003eca0:	f8d30018 	swi	r6, r19, 24
2003eca4:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003eca8:	f8130004 	swi	r0, r19, 4
2003ecac:	b800005c 	bri	92		// 2003ed08
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003ecb0:	e8730014 	lwi	r3, r19, 20
2003ecb4:	e8830000 	lwi	r4, r3, 0
2003ecb8:	e8730014 	lwi	r3, r19, 20
2003ecbc:	e8a3000c 	lwi	r5, r3, 12
2003ecc0:	e8730004 	lwi	r3, r19, 4
2003ecc4:	64630402 	bslli	r3, r3, 2
2003ecc8:	10651800 	addk	r3, r5, r3
2003eccc:	e8a30000 	lwi	r5, r3, 0
2003ecd0:	e8730014 	lwi	r3, r19, 20
2003ecd4:	e8630010 	lwi	r3, r3, 16
2003ecd8:	e8630000 	lwi	r3, r3, 0
2003ecdc:	14632800 	rsubk	r3, r3, r5
2003ece0:	10641800 	addk	r3, r4, r3
2003ece4:	30830001 	addik	r4, r3, 1
2003ece8:	e873001c 	lwi	r3, r19, 28
2003ecec:	16441803 	cmpu	r18, r4, r3
2003ecf0:	bc52000c 	blti	r18, 12		// 2003ecfc
            return 0;
2003ecf4:	10600000 	addk	r3, r0, r0
2003ecf8:	b8000024 	bri	36		// 2003ed1c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003ecfc:	e8730004 	lwi	r3, r19, 4
2003ed00:	30630001 	addik	r3, r3, 1
2003ed04:	f8730004 	swi	r3, r19, 4
2003ed08:	e8930004 	lwi	r4, r19, 4
2003ed0c:	e8730018 	lwi	r3, r19, 24
2003ed10:	16432003 	cmpu	r18, r3, r4
2003ed14:	bc52ff9c 	blti	r18, -100		// 2003ecb0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003ed18:	30600001 	addik	r3, r0, 1
}
2003ed1c:	10330000 	addk	r1, r19, r0
2003ed20:	ea610008 	lwi	r19, r1, 8
2003ed24:	ea81000c 	lwi	r20, r1, 12
2003ed28:	30210010 	addik	r1, r1, 16
2003ed2c:	b60f0008 	rtsd	r15, 8
2003ed30:	80000000 	or	r0, r0, r0

2003ed34 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003ed34:	3021ffe8 	addik	r1, r1, -24
2003ed38:	fa610010 	swi	r19, r1, 16
2003ed3c:	fa810014 	swi	r20, r1, 20
2003ed40:	12610000 	addk	r19, r1, r0
2003ed44:	96808000 	mfs	r20, rpc
2003ed48:	b000dffc 	imm	-8196
2003ed4c:	32942c18 	addik	r20, r20, 11288
2003ed50:	f8b3001c 	swi	r5, r19, 28
2003ed54:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003ed58:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003ed5c:	f8130004 	swi	r0, r19, 4
2003ed60:	b8000054 	bri	84		// 2003edb4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003ed64:	e873001c 	lwi	r3, r19, 28
2003ed68:	e8630010 	lwi	r3, r3, 16
2003ed6c:	e8830000 	lwi	r4, r3, 0
2003ed70:	e873001c 	lwi	r3, r19, 28
2003ed74:	e8a3000c 	lwi	r5, r3, 12
2003ed78:	e8730004 	lwi	r3, r19, 4
2003ed7c:	64630402 	bslli	r3, r3, 2
2003ed80:	10651800 	addk	r3, r5, r3
2003ed84:	e8630000 	lwi	r3, r3, 0
2003ed88:	14632000 	rsubk	r3, r3, r4
2003ed8c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003ed90:	e8930008 	lwi	r4, r19, 8
2003ed94:	e873000c 	lwi	r3, r19, 12
2003ed98:	16441803 	cmpu	r18, r4, r3
2003ed9c:	bcb20008 	bgei	r18, 8		// 2003eda4
2003eda0:	10640000 	addk	r3, r4, r0
2003eda4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003eda8:	e8730004 	lwi	r3, r19, 4
2003edac:	30630001 	addik	r3, r3, 1
2003edb0:	f8730004 	swi	r3, r19, 4
2003edb4:	e8930004 	lwi	r4, r19, 4
2003edb8:	e8730020 	lwi	r3, r19, 32
2003edbc:	16432003 	cmpu	r18, r3, r4
2003edc0:	bc52ffa4 	blti	r18, -92		// 2003ed64
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003edc4:	e873001c 	lwi	r3, r19, 28
2003edc8:	e8830000 	lwi	r4, r3, 0
2003edcc:	e8730008 	lwi	r3, r19, 8
2003edd0:	14632000 	rsubk	r3, r3, r4
}
2003edd4:	10330000 	addk	r1, r19, r0
2003edd8:	ea610010 	lwi	r19, r1, 16
2003eddc:	ea810014 	lwi	r20, r1, 20
2003ede0:	30210018 	addik	r1, r1, 24
2003ede4:	b60f0008 	rtsd	r15, 8
2003ede8:	80000000 	or	r0, r0, r0

2003edec <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003edec:	3021fff0 	addik	r1, r1, -16
2003edf0:	fa610008 	swi	r19, r1, 8
2003edf4:	fa81000c 	swi	r20, r1, 12
2003edf8:	12610000 	addk	r19, r1, r0
2003edfc:	96808000 	mfs	r20, rpc
2003ee00:	b000dffc 	imm	-8196
2003ee04:	32942b60 	addik	r20, r20, 11104
2003ee08:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2003ee0c:	e8730014 	lwi	r3, r19, 20
2003ee10:	e8630010 	lwi	r3, r3, 16
2003ee14:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003ee18:	f8130004 	swi	r0, r19, 4
2003ee1c:	b8000028 	bri	40		// 2003ee44
        fifo->read_inds[i] = 0;
2003ee20:	e8730014 	lwi	r3, r19, 20
2003ee24:	e883000c 	lwi	r4, r3, 12
2003ee28:	e8730004 	lwi	r3, r19, 4
2003ee2c:	64630402 	bslli	r3, r3, 2
2003ee30:	10641800 	addk	r3, r4, r3
2003ee34:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003ee38:	e8730004 	lwi	r3, r19, 4
2003ee3c:	30630001 	addik	r3, r3, 1
2003ee40:	f8730004 	swi	r3, r19, 4
2003ee44:	e8730014 	lwi	r3, r19, 20
2003ee48:	e8830008 	lwi	r4, r3, 8
2003ee4c:	e8730004 	lwi	r3, r19, 4
2003ee50:	16441803 	cmpu	r18, r4, r3
2003ee54:	bc52ffcc 	blti	r18, -52		// 2003ee20
        fifo->read_inds[i] = 0;
    }
}
2003ee58:	10330000 	addk	r1, r19, r0
2003ee5c:	ea610008 	lwi	r19, r1, 8
2003ee60:	ea81000c 	lwi	r20, r1, 12
2003ee64:	30210010 	addik	r1, r1, 16
2003ee68:	b60f0008 	rtsd	r15, 8
2003ee6c:	80000000 	or	r0, r0, r0

2003ee70 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003ee70:	3021fff0 	addik	r1, r1, -16
2003ee74:	fa610008 	swi	r19, r1, 8
2003ee78:	fa81000c 	swi	r20, r1, 12
2003ee7c:	12610000 	addk	r19, r1, r0
2003ee80:	96808000 	mfs	r20, rpc
2003ee84:	b000dffc 	imm	-8196
2003ee88:	32942adc 	addik	r20, r20, 10972
2003ee8c:	f8b30014 	swi	r5, r19, 20
2003ee90:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003ee94:	e8730014 	lwi	r3, r19, 20
2003ee98:	e8830004 	lwi	r4, r3, 4
2003ee9c:	e8730014 	lwi	r3, r19, 20
2003eea0:	e8a3000c 	lwi	r5, r3, 12
2003eea4:	e8730018 	lwi	r3, r19, 24
2003eea8:	64630402 	bslli	r3, r3, 2
2003eeac:	10651800 	addk	r3, r5, r3
2003eeb0:	e8a30000 	lwi	r5, r3, 0
2003eeb4:	e8730014 	lwi	r3, r19, 20
2003eeb8:	e8630000 	lwi	r3, r3, 0
2003eebc:	3063ffff 	addik	r3, r3, -1
2003eec0:	84651800 	and	r3, r5, r3
2003eec4:	10641800 	addk	r3, r4, r3
2003eec8:	e0630000 	lbui	r3, r3, 0
2003eecc:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003eed0:	e8730014 	lwi	r3, r19, 20
2003eed4:	e883000c 	lwi	r4, r3, 12
2003eed8:	e8730018 	lwi	r3, r19, 24
2003eedc:	64630402 	bslli	r3, r3, 2
2003eee0:	10641800 	addk	r3, r4, r3
2003eee4:	e8830000 	lwi	r4, r3, 0
2003eee8:	30840001 	addik	r4, r4, 1
2003eeec:	f8830000 	swi	r4, r3, 0
    return value;
2003eef0:	e0730004 	lbui	r3, r19, 4
}
2003eef4:	10330000 	addk	r1, r19, r0
2003eef8:	ea610008 	lwi	r19, r1, 8
2003eefc:	ea81000c 	lwi	r20, r1, 12
2003ef00:	30210010 	addik	r1, r1, 16
2003ef04:	b60f0008 	rtsd	r15, 8
2003ef08:	80000000 	or	r0, r0, r0

2003ef0c <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003ef0c:	3021fff4 	addik	r1, r1, -12
2003ef10:	fa610004 	swi	r19, r1, 4
2003ef14:	fa810008 	swi	r20, r1, 8
2003ef18:	12610000 	addk	r19, r1, r0
2003ef1c:	96808000 	mfs	r20, rpc
2003ef20:	b000dffc 	imm	-8196
2003ef24:	32942a40 	addik	r20, r20, 10816
2003ef28:	f8b30010 	swi	r5, r19, 16
2003ef2c:	10660000 	addk	r3, r6, r0
2003ef30:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003ef34:	e8730010 	lwi	r3, r19, 16
2003ef38:	e8830004 	lwi	r4, r3, 4
2003ef3c:	e8730010 	lwi	r3, r19, 16
2003ef40:	e8630010 	lwi	r3, r3, 16
2003ef44:	e8a30000 	lwi	r5, r3, 0
2003ef48:	e8730010 	lwi	r3, r19, 16
2003ef4c:	e8630000 	lwi	r3, r3, 0
2003ef50:	3063ffff 	addik	r3, r3, -1
2003ef54:	84651800 	and	r3, r5, r3
2003ef58:	10641800 	addk	r3, r4, r3
2003ef5c:	e0930014 	lbui	r4, r19, 20
2003ef60:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
2003ef64:	e8730010 	lwi	r3, r19, 16
2003ef68:	e8630010 	lwi	r3, r3, 16
2003ef6c:	e8830000 	lwi	r4, r3, 0
2003ef70:	30840001 	addik	r4, r4, 1
2003ef74:	f8830000 	swi	r4, r3, 0
}
2003ef78:	10330000 	addk	r1, r19, r0
2003ef7c:	ea610004 	lwi	r19, r1, 4
2003ef80:	ea810008 	lwi	r20, r1, 8
2003ef84:	3021000c 	addik	r1, r1, 12
2003ef88:	b60f0008 	rtsd	r15, 8
2003ef8c:	80000000 	or	r0, r0, r0

2003ef90 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003ef90:	3021fff4 	addik	r1, r1, -12
2003ef94:	fa610004 	swi	r19, r1, 4
2003ef98:	fa810008 	swi	r20, r1, 8
2003ef9c:	12610000 	addk	r19, r1, r0
2003efa0:	96808000 	mfs	r20, rpc
2003efa4:	b000dffc 	imm	-8196
2003efa8:	329429bc 	addik	r20, r20, 10684
2003efac:	f8b30010 	swi	r5, r19, 16
2003efb0:	f8d30014 	swi	r6, r19, 20
2003efb4:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003efb8:	e8730010 	lwi	r3, r19, 16
2003efbc:	e8630010 	lwi	r3, r3, 16
2003efc0:	e8830000 	lwi	r4, r3, 0
2003efc4:	e8730010 	lwi	r3, r19, 16
2003efc8:	e8a3000c 	lwi	r5, r3, 12
2003efcc:	e8730014 	lwi	r3, r19, 20
2003efd0:	64630402 	bslli	r3, r3, 2
2003efd4:	10651800 	addk	r3, r5, r3
2003efd8:	e8630000 	lwi	r3, r3, 0
2003efdc:	14a32000 	rsubk	r5, r3, r4
2003efe0:	30600001 	addik	r3, r0, 1
2003efe4:	e8930018 	lwi	r4, r19, 24
2003efe8:	16442803 	cmpu	r18, r4, r5
2003efec:	bcb20008 	bgei	r18, 8		// 2003eff4
2003eff0:	10600000 	addk	r3, r0, r0
2003eff4:	a46300ff 	andi	r3, r3, 255
}
2003eff8:	10330000 	addk	r1, r19, r0
2003effc:	ea610004 	lwi	r19, r1, 4
2003f000:	ea810008 	lwi	r20, r1, 8
2003f004:	3021000c 	addik	r1, r1, 12
2003f008:	b60f0008 	rtsd	r15, 8
2003f00c:	80000000 	or	r0, r0, r0

2003f010 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003f010:	3021fff4 	addik	r1, r1, -12
2003f014:	fa610004 	swi	r19, r1, 4
2003f018:	fa810008 	swi	r20, r1, 8
2003f01c:	12610000 	addk	r19, r1, r0
2003f020:	96808000 	mfs	r20, rpc
2003f024:	b000dffc 	imm	-8196
2003f028:	3294293c 	addik	r20, r20, 10556
2003f02c:	f8b30010 	swi	r5, r19, 16
2003f030:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003f034:	e8730010 	lwi	r3, r19, 16
2003f038:	e8630010 	lwi	r3, r3, 16
2003f03c:	e8830000 	lwi	r4, r3, 0
2003f040:	e8730010 	lwi	r3, r19, 16
2003f044:	e8a3000c 	lwi	r5, r3, 12
2003f048:	e8730014 	lwi	r3, r19, 20
2003f04c:	64630402 	bslli	r3, r3, 2
2003f050:	10651800 	addk	r3, r5, r3
2003f054:	e8630000 	lwi	r3, r3, 0
2003f058:	14632000 	rsubk	r3, r3, r4
}
2003f05c:	10330000 	addk	r1, r19, r0
2003f060:	ea610004 	lwi	r19, r1, 4
2003f064:	ea810008 	lwi	r20, r1, 8
2003f068:	3021000c 	addik	r1, r1, 12
2003f06c:	b60f0008 	rtsd	r15, 8
2003f070:	80000000 	or	r0, r0, r0

2003f074 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003f074:	3021fff0 	addik	r1, r1, -16
2003f078:	fa610008 	swi	r19, r1, 8
2003f07c:	fa81000c 	swi	r20, r1, 12
2003f080:	12610000 	addk	r19, r1, r0
2003f084:	96808000 	mfs	r20, rpc
2003f088:	b000dffc 	imm	-8196
2003f08c:	329428d8 	addik	r20, r20, 10456
2003f090:	f8b30014 	swi	r5, r19, 20
2003f094:	f8d30018 	swi	r6, r19, 24
2003f098:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003f09c:	f8130004 	swi	r0, r19, 4
2003f0a0:	b800005c 	bri	92		// 2003f0fc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003f0a4:	e8730014 	lwi	r3, r19, 20
2003f0a8:	e8830000 	lwi	r4, r3, 0
2003f0ac:	e8730014 	lwi	r3, r19, 20
2003f0b0:	e8a3000c 	lwi	r5, r3, 12
2003f0b4:	e8730004 	lwi	r3, r19, 4
2003f0b8:	64630402 	bslli	r3, r3, 2
2003f0bc:	10651800 	addk	r3, r5, r3
2003f0c0:	e8a30000 	lwi	r5, r3, 0
2003f0c4:	e8730014 	lwi	r3, r19, 20
2003f0c8:	e8630010 	lwi	r3, r3, 16
2003f0cc:	e8630000 	lwi	r3, r3, 0
2003f0d0:	14632800 	rsubk	r3, r3, r5
2003f0d4:	10641800 	addk	r3, r4, r3
2003f0d8:	30830001 	addik	r4, r3, 1
2003f0dc:	e873001c 	lwi	r3, r19, 28
2003f0e0:	16441803 	cmpu	r18, r4, r3
2003f0e4:	bc52000c 	blti	r18, 12		// 2003f0f0
            return 0;
2003f0e8:	10600000 	addk	r3, r0, r0
2003f0ec:	b8000024 	bri	36		// 2003f110
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003f0f0:	e8730004 	lwi	r3, r19, 4
2003f0f4:	30630001 	addik	r3, r3, 1
2003f0f8:	f8730004 	swi	r3, r19, 4
2003f0fc:	e8930004 	lwi	r4, r19, 4
2003f100:	e8730018 	lwi	r3, r19, 24
2003f104:	16432003 	cmpu	r18, r3, r4
2003f108:	bc52ff9c 	blti	r18, -100		// 2003f0a4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003f10c:	30600001 	addik	r3, r0, 1
}
2003f110:	10330000 	addk	r1, r19, r0
2003f114:	ea610008 	lwi	r19, r1, 8
2003f118:	ea81000c 	lwi	r20, r1, 12
2003f11c:	30210010 	addik	r1, r1, 16
2003f120:	b60f0008 	rtsd	r15, 8
2003f124:	80000000 	or	r0, r0, r0

2003f128 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003f128:	3021ffe8 	addik	r1, r1, -24
2003f12c:	fa610010 	swi	r19, r1, 16
2003f130:	fa810014 	swi	r20, r1, 20
2003f134:	12610000 	addk	r19, r1, r0
2003f138:	96808000 	mfs	r20, rpc
2003f13c:	b000dffc 	imm	-8196
2003f140:	32942824 	addik	r20, r20, 10276
2003f144:	f8b3001c 	swi	r5, r19, 28
2003f148:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003f14c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003f150:	f8130004 	swi	r0, r19, 4
2003f154:	b8000054 	bri	84		// 2003f1a8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003f158:	e873001c 	lwi	r3, r19, 28
2003f15c:	e8630010 	lwi	r3, r3, 16
2003f160:	e8830000 	lwi	r4, r3, 0
2003f164:	e873001c 	lwi	r3, r19, 28
2003f168:	e8a3000c 	lwi	r5, r3, 12
2003f16c:	e8730004 	lwi	r3, r19, 4
2003f170:	64630402 	bslli	r3, r3, 2
2003f174:	10651800 	addk	r3, r5, r3
2003f178:	e8630000 	lwi	r3, r3, 0
2003f17c:	14632000 	rsubk	r3, r3, r4
2003f180:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003f184:	e8930008 	lwi	r4, r19, 8
2003f188:	e873000c 	lwi	r3, r19, 12
2003f18c:	16441803 	cmpu	r18, r4, r3
2003f190:	bcb20008 	bgei	r18, 8		// 2003f198
2003f194:	10640000 	addk	r3, r4, r0
2003f198:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003f19c:	e8730004 	lwi	r3, r19, 4
2003f1a0:	30630001 	addik	r3, r3, 1
2003f1a4:	f8730004 	swi	r3, r19, 4
2003f1a8:	e8930004 	lwi	r4, r19, 4
2003f1ac:	e8730020 	lwi	r3, r19, 32
2003f1b0:	16432003 	cmpu	r18, r3, r4
2003f1b4:	bc52ffa4 	blti	r18, -92		// 2003f158
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003f1b8:	e873001c 	lwi	r3, r19, 28
2003f1bc:	e8830000 	lwi	r4, r3, 0
2003f1c0:	e8730008 	lwi	r3, r19, 8
2003f1c4:	14632000 	rsubk	r3, r3, r4
}
2003f1c8:	10330000 	addk	r1, r19, r0
2003f1cc:	ea610010 	lwi	r19, r1, 16
2003f1d0:	ea810014 	lwi	r20, r1, 20
2003f1d4:	30210018 	addik	r1, r1, 24
2003f1d8:	b60f0008 	rtsd	r15, 8
2003f1dc:	80000000 	or	r0, r0, r0

2003f1e0 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003f1e0:	3021fff0 	addik	r1, r1, -16
2003f1e4:	fa610008 	swi	r19, r1, 8
2003f1e8:	fa81000c 	swi	r20, r1, 12
2003f1ec:	12610000 	addk	r19, r1, r0
2003f1f0:	96808000 	mfs	r20, rpc
2003f1f4:	b000dffc 	imm	-8196
2003f1f8:	3294276c 	addik	r20, r20, 10092
2003f1fc:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2003f200:	e8730014 	lwi	r3, r19, 20
2003f204:	e8630010 	lwi	r3, r3, 16
2003f208:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003f20c:	f8130004 	swi	r0, r19, 4
2003f210:	b8000028 	bri	40		// 2003f238
        fifo->read_inds[i] = 0;
2003f214:	e8730014 	lwi	r3, r19, 20
2003f218:	e883000c 	lwi	r4, r3, 12
2003f21c:	e8730004 	lwi	r3, r19, 4
2003f220:	64630402 	bslli	r3, r3, 2
2003f224:	10641800 	addk	r3, r4, r3
2003f228:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003f22c:	e8730004 	lwi	r3, r19, 4
2003f230:	30630001 	addik	r3, r3, 1
2003f234:	f8730004 	swi	r3, r19, 4
2003f238:	e8730014 	lwi	r3, r19, 20
2003f23c:	e8830008 	lwi	r4, r3, 8
2003f240:	e8730004 	lwi	r3, r19, 4
2003f244:	16441803 	cmpu	r18, r4, r3
2003f248:	bc52ffcc 	blti	r18, -52		// 2003f214
        fifo->read_inds[i] = 0;
    }
}
2003f24c:	10330000 	addk	r1, r19, r0
2003f250:	ea610008 	lwi	r19, r1, 8
2003f254:	ea81000c 	lwi	r20, r1, 12
2003f258:	30210010 	addik	r1, r1, 16
2003f25c:	b60f0008 	rtsd	r15, 8
2003f260:	80000000 	or	r0, r0, r0

2003f264 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003f264:	3021fff0 	addik	r1, r1, -16
2003f268:	fa610008 	swi	r19, r1, 8
2003f26c:	fa81000c 	swi	r20, r1, 12
2003f270:	12610000 	addk	r19, r1, r0
2003f274:	96808000 	mfs	r20, rpc
2003f278:	b000dffc 	imm	-8196
2003f27c:	329426e8 	addik	r20, r20, 9960
2003f280:	f8b30014 	swi	r5, r19, 20
2003f284:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003f288:	e8730014 	lwi	r3, r19, 20
2003f28c:	e8830004 	lwi	r4, r3, 4
2003f290:	e8730014 	lwi	r3, r19, 20
2003f294:	e8a3000c 	lwi	r5, r3, 12
2003f298:	e8730018 	lwi	r3, r19, 24
2003f29c:	64630402 	bslli	r3, r3, 2
2003f2a0:	10651800 	addk	r3, r5, r3
2003f2a4:	e8a30000 	lwi	r5, r3, 0
2003f2a8:	e8730014 	lwi	r3, r19, 20
2003f2ac:	e8630000 	lwi	r3, r3, 0
2003f2b0:	3063ffff 	addik	r3, r3, -1
2003f2b4:	84651800 	and	r3, r5, r3
2003f2b8:	10631800 	addk	r3, r3, r3
2003f2bc:	10641800 	addk	r3, r4, r3
2003f2c0:	e4630000 	lhui	r3, r3, 0
2003f2c4:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003f2c8:	e8730014 	lwi	r3, r19, 20
2003f2cc:	e883000c 	lwi	r4, r3, 12
2003f2d0:	e8730018 	lwi	r3, r19, 24
2003f2d4:	64630402 	bslli	r3, r3, 2
2003f2d8:	10641800 	addk	r3, r4, r3
2003f2dc:	e8830000 	lwi	r4, r3, 0
2003f2e0:	30840001 	addik	r4, r4, 1
2003f2e4:	f8830000 	swi	r4, r3, 0
    return value;
2003f2e8:	e4730004 	lhui	r3, r19, 4
}
2003f2ec:	10330000 	addk	r1, r19, r0
2003f2f0:	ea610008 	lwi	r19, r1, 8
2003f2f4:	ea81000c 	lwi	r20, r1, 12
2003f2f8:	30210010 	addik	r1, r1, 16
2003f2fc:	b60f0008 	rtsd	r15, 8
2003f300:	80000000 	or	r0, r0, r0

2003f304 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003f304:	3021fff4 	addik	r1, r1, -12
2003f308:	fa610004 	swi	r19, r1, 4
2003f30c:	fa810008 	swi	r20, r1, 8
2003f310:	12610000 	addk	r19, r1, r0
2003f314:	96808000 	mfs	r20, rpc
2003f318:	b000dffc 	imm	-8196
2003f31c:	32942648 	addik	r20, r20, 9800
2003f320:	f8b30010 	swi	r5, r19, 16
2003f324:	10660000 	addk	r3, r6, r0
2003f328:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003f32c:	e8730010 	lwi	r3, r19, 16
2003f330:	e8830004 	lwi	r4, r3, 4
2003f334:	e8730010 	lwi	r3, r19, 16
2003f338:	e8630010 	lwi	r3, r3, 16
2003f33c:	e8a30000 	lwi	r5, r3, 0
2003f340:	e8730010 	lwi	r3, r19, 16
2003f344:	e8630000 	lwi	r3, r3, 0
2003f348:	3063ffff 	addik	r3, r3, -1
2003f34c:	84651800 	and	r3, r5, r3
2003f350:	10631800 	addk	r3, r3, r3
2003f354:	10641800 	addk	r3, r4, r3
2003f358:	e4930014 	lhui	r4, r19, 20
2003f35c:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
2003f360:	e8730010 	lwi	r3, r19, 16
2003f364:	e8630010 	lwi	r3, r3, 16
2003f368:	e8830000 	lwi	r4, r3, 0
2003f36c:	30840001 	addik	r4, r4, 1
2003f370:	f8830000 	swi	r4, r3, 0
}
2003f374:	10330000 	addk	r1, r19, r0
2003f378:	ea610004 	lwi	r19, r1, 4
2003f37c:	ea810008 	lwi	r20, r1, 8
2003f380:	3021000c 	addik	r1, r1, 12
2003f384:	b60f0008 	rtsd	r15, 8
2003f388:	80000000 	or	r0, r0, r0

2003f38c <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003f38c:	3021fff4 	addik	r1, r1, -12
2003f390:	fa610004 	swi	r19, r1, 4
2003f394:	fa810008 	swi	r20, r1, 8
2003f398:	12610000 	addk	r19, r1, r0
2003f39c:	96808000 	mfs	r20, rpc
2003f3a0:	b000dffc 	imm	-8196
2003f3a4:	329425c0 	addik	r20, r20, 9664
2003f3a8:	f8b30010 	swi	r5, r19, 16
2003f3ac:	f8d30014 	swi	r6, r19, 20
2003f3b0:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003f3b4:	e8730010 	lwi	r3, r19, 16
2003f3b8:	e8630010 	lwi	r3, r3, 16
2003f3bc:	e8830000 	lwi	r4, r3, 0
2003f3c0:	e8730010 	lwi	r3, r19, 16
2003f3c4:	e8a3000c 	lwi	r5, r3, 12
2003f3c8:	e8730014 	lwi	r3, r19, 20
2003f3cc:	64630402 	bslli	r3, r3, 2
2003f3d0:	10651800 	addk	r3, r5, r3
2003f3d4:	e8630000 	lwi	r3, r3, 0
2003f3d8:	14a32000 	rsubk	r5, r3, r4
2003f3dc:	30600001 	addik	r3, r0, 1
2003f3e0:	e8930018 	lwi	r4, r19, 24
2003f3e4:	16442803 	cmpu	r18, r4, r5
2003f3e8:	bcb20008 	bgei	r18, 8		// 2003f3f0
2003f3ec:	10600000 	addk	r3, r0, r0
2003f3f0:	a46300ff 	andi	r3, r3, 255
}
2003f3f4:	10330000 	addk	r1, r19, r0
2003f3f8:	ea610004 	lwi	r19, r1, 4
2003f3fc:	ea810008 	lwi	r20, r1, 8
2003f400:	3021000c 	addik	r1, r1, 12
2003f404:	b60f0008 	rtsd	r15, 8
2003f408:	80000000 	or	r0, r0, r0

2003f40c <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003f40c:	3021fff4 	addik	r1, r1, -12
2003f410:	fa610004 	swi	r19, r1, 4
2003f414:	fa810008 	swi	r20, r1, 8
2003f418:	12610000 	addk	r19, r1, r0
2003f41c:	96808000 	mfs	r20, rpc
2003f420:	b000dffc 	imm	-8196
2003f424:	32942540 	addik	r20, r20, 9536
2003f428:	f8b30010 	swi	r5, r19, 16
2003f42c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003f430:	e8730010 	lwi	r3, r19, 16
2003f434:	e8630010 	lwi	r3, r3, 16
2003f438:	e8830000 	lwi	r4, r3, 0
2003f43c:	e8730010 	lwi	r3, r19, 16
2003f440:	e8a3000c 	lwi	r5, r3, 12
2003f444:	e8730014 	lwi	r3, r19, 20
2003f448:	64630402 	bslli	r3, r3, 2
2003f44c:	10651800 	addk	r3, r5, r3
2003f450:	e8630000 	lwi	r3, r3, 0
2003f454:	14632000 	rsubk	r3, r3, r4
}
2003f458:	10330000 	addk	r1, r19, r0
2003f45c:	ea610004 	lwi	r19, r1, 4
2003f460:	ea810008 	lwi	r20, r1, 8
2003f464:	3021000c 	addik	r1, r1, 12
2003f468:	b60f0008 	rtsd	r15, 8
2003f46c:	80000000 	or	r0, r0, r0

2003f470 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003f470:	3021fff0 	addik	r1, r1, -16
2003f474:	fa610008 	swi	r19, r1, 8
2003f478:	fa81000c 	swi	r20, r1, 12
2003f47c:	12610000 	addk	r19, r1, r0
2003f480:	96808000 	mfs	r20, rpc
2003f484:	b000dffc 	imm	-8196
2003f488:	329424dc 	addik	r20, r20, 9436
2003f48c:	f8b30014 	swi	r5, r19, 20
2003f490:	f8d30018 	swi	r6, r19, 24
2003f494:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003f498:	f8130004 	swi	r0, r19, 4
2003f49c:	b800005c 	bri	92		// 2003f4f8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003f4a0:	e8730014 	lwi	r3, r19, 20
2003f4a4:	e8830000 	lwi	r4, r3, 0
2003f4a8:	e8730014 	lwi	r3, r19, 20
2003f4ac:	e8a3000c 	lwi	r5, r3, 12
2003f4b0:	e8730004 	lwi	r3, r19, 4
2003f4b4:	64630402 	bslli	r3, r3, 2
2003f4b8:	10651800 	addk	r3, r5, r3
2003f4bc:	e8a30000 	lwi	r5, r3, 0
2003f4c0:	e8730014 	lwi	r3, r19, 20
2003f4c4:	e8630010 	lwi	r3, r3, 16
2003f4c8:	e8630000 	lwi	r3, r3, 0
2003f4cc:	14632800 	rsubk	r3, r3, r5
2003f4d0:	10641800 	addk	r3, r4, r3
2003f4d4:	30830001 	addik	r4, r3, 1
2003f4d8:	e873001c 	lwi	r3, r19, 28
2003f4dc:	16441803 	cmpu	r18, r4, r3
2003f4e0:	bc52000c 	blti	r18, 12		// 2003f4ec
            return 0;
2003f4e4:	10600000 	addk	r3, r0, r0
2003f4e8:	b8000024 	bri	36		// 2003f50c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003f4ec:	e8730004 	lwi	r3, r19, 4
2003f4f0:	30630001 	addik	r3, r3, 1
2003f4f4:	f8730004 	swi	r3, r19, 4
2003f4f8:	e8930004 	lwi	r4, r19, 4
2003f4fc:	e8730018 	lwi	r3, r19, 24
2003f500:	16432003 	cmpu	r18, r3, r4
2003f504:	bc52ff9c 	blti	r18, -100		// 2003f4a0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003f508:	30600001 	addik	r3, r0, 1
}
2003f50c:	10330000 	addk	r1, r19, r0
2003f510:	ea610008 	lwi	r19, r1, 8
2003f514:	ea81000c 	lwi	r20, r1, 12
2003f518:	30210010 	addik	r1, r1, 16
2003f51c:	b60f0008 	rtsd	r15, 8
2003f520:	80000000 	or	r0, r0, r0

2003f524 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003f524:	3021ffe8 	addik	r1, r1, -24
2003f528:	fa610010 	swi	r19, r1, 16
2003f52c:	fa810014 	swi	r20, r1, 20
2003f530:	12610000 	addk	r19, r1, r0
2003f534:	96808000 	mfs	r20, rpc
2003f538:	b000dffc 	imm	-8196
2003f53c:	32942428 	addik	r20, r20, 9256
2003f540:	f8b3001c 	swi	r5, r19, 28
2003f544:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003f548:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003f54c:	f8130004 	swi	r0, r19, 4
2003f550:	b8000054 	bri	84		// 2003f5a4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003f554:	e873001c 	lwi	r3, r19, 28
2003f558:	e8630010 	lwi	r3, r3, 16
2003f55c:	e8830000 	lwi	r4, r3, 0
2003f560:	e873001c 	lwi	r3, r19, 28
2003f564:	e8a3000c 	lwi	r5, r3, 12
2003f568:	e8730004 	lwi	r3, r19, 4
2003f56c:	64630402 	bslli	r3, r3, 2
2003f570:	10651800 	addk	r3, r5, r3
2003f574:	e8630000 	lwi	r3, r3, 0
2003f578:	14632000 	rsubk	r3, r3, r4
2003f57c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003f580:	e8930008 	lwi	r4, r19, 8
2003f584:	e873000c 	lwi	r3, r19, 12
2003f588:	16441803 	cmpu	r18, r4, r3
2003f58c:	bcb20008 	bgei	r18, 8		// 2003f594
2003f590:	10640000 	addk	r3, r4, r0
2003f594:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003f598:	e8730004 	lwi	r3, r19, 4
2003f59c:	30630001 	addik	r3, r3, 1
2003f5a0:	f8730004 	swi	r3, r19, 4
2003f5a4:	e8930004 	lwi	r4, r19, 4
2003f5a8:	e8730020 	lwi	r3, r19, 32
2003f5ac:	16432003 	cmpu	r18, r3, r4
2003f5b0:	bc52ffa4 	blti	r18, -92		// 2003f554
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003f5b4:	e873001c 	lwi	r3, r19, 28
2003f5b8:	e8830000 	lwi	r4, r3, 0
2003f5bc:	e8730008 	lwi	r3, r19, 8
2003f5c0:	14632000 	rsubk	r3, r3, r4
}
2003f5c4:	10330000 	addk	r1, r19, r0
2003f5c8:	ea610010 	lwi	r19, r1, 16
2003f5cc:	ea810014 	lwi	r20, r1, 20
2003f5d0:	30210018 	addik	r1, r1, 24
2003f5d4:	b60f0008 	rtsd	r15, 8
2003f5d8:	80000000 	or	r0, r0, r0

2003f5dc <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003f5dc:	3021fff0 	addik	r1, r1, -16
2003f5e0:	fa610008 	swi	r19, r1, 8
2003f5e4:	fa81000c 	swi	r20, r1, 12
2003f5e8:	12610000 	addk	r19, r1, r0
2003f5ec:	96808000 	mfs	r20, rpc
2003f5f0:	b000dffc 	imm	-8196
2003f5f4:	32942370 	addik	r20, r20, 9072
2003f5f8:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2003f5fc:	e8730014 	lwi	r3, r19, 20
2003f600:	e8630010 	lwi	r3, r3, 16
2003f604:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003f608:	f8130004 	swi	r0, r19, 4
2003f60c:	b8000028 	bri	40		// 2003f634
        fifo->read_inds[i] = 0;
2003f610:	e8730014 	lwi	r3, r19, 20
2003f614:	e883000c 	lwi	r4, r3, 12
2003f618:	e8730004 	lwi	r3, r19, 4
2003f61c:	64630402 	bslli	r3, r3, 2
2003f620:	10641800 	addk	r3, r4, r3
2003f624:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003f628:	e8730004 	lwi	r3, r19, 4
2003f62c:	30630001 	addik	r3, r3, 1
2003f630:	f8730004 	swi	r3, r19, 4
2003f634:	e8730014 	lwi	r3, r19, 20
2003f638:	e8830008 	lwi	r4, r3, 8
2003f63c:	e8730004 	lwi	r3, r19, 4
2003f640:	16441803 	cmpu	r18, r4, r3
2003f644:	bc52ffcc 	blti	r18, -52		// 2003f610
        fifo->read_inds[i] = 0;
    }
}
2003f648:	10330000 	addk	r1, r19, r0
2003f64c:	ea610008 	lwi	r19, r1, 8
2003f650:	ea81000c 	lwi	r20, r1, 12
2003f654:	30210010 	addik	r1, r1, 16
2003f658:	b60f0008 	rtsd	r15, 8
2003f65c:	80000000 	or	r0, r0, r0

2003f660 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003f660:	3021fff0 	addik	r1, r1, -16
2003f664:	fa610008 	swi	r19, r1, 8
2003f668:	fa81000c 	swi	r20, r1, 12
2003f66c:	12610000 	addk	r19, r1, r0
2003f670:	96808000 	mfs	r20, rpc
2003f674:	b000dffc 	imm	-8196
2003f678:	329422ec 	addik	r20, r20, 8940
2003f67c:	f8b30014 	swi	r5, r19, 20
2003f680:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003f684:	e8730014 	lwi	r3, r19, 20
2003f688:	e8830004 	lwi	r4, r3, 4
2003f68c:	e8730014 	lwi	r3, r19, 20
2003f690:	e8a3000c 	lwi	r5, r3, 12
2003f694:	e8730018 	lwi	r3, r19, 24
2003f698:	64630402 	bslli	r3, r3, 2
2003f69c:	10651800 	addk	r3, r5, r3
2003f6a0:	e8a30000 	lwi	r5, r3, 0
2003f6a4:	e8730014 	lwi	r3, r19, 20
2003f6a8:	e8630000 	lwi	r3, r3, 0
2003f6ac:	3063ffff 	addik	r3, r3, -1
2003f6b0:	84651800 	and	r3, r5, r3
2003f6b4:	64630402 	bslli	r3, r3, 2
2003f6b8:	10641800 	addk	r3, r4, r3
2003f6bc:	e8630000 	lwi	r3, r3, 0
2003f6c0:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003f6c4:	e8730014 	lwi	r3, r19, 20
2003f6c8:	e883000c 	lwi	r4, r3, 12
2003f6cc:	e8730018 	lwi	r3, r19, 24
2003f6d0:	64630402 	bslli	r3, r3, 2
2003f6d4:	10641800 	addk	r3, r4, r3
2003f6d8:	e8830000 	lwi	r4, r3, 0
2003f6dc:	30840001 	addik	r4, r4, 1
2003f6e0:	f8830000 	swi	r4, r3, 0
    return value;
2003f6e4:	e8730004 	lwi	r3, r19, 4
}
2003f6e8:	10330000 	addk	r1, r19, r0
2003f6ec:	ea610008 	lwi	r19, r1, 8
2003f6f0:	ea81000c 	lwi	r20, r1, 12
2003f6f4:	30210010 	addik	r1, r1, 16
2003f6f8:	b60f0008 	rtsd	r15, 8
2003f6fc:	80000000 	or	r0, r0, r0

2003f700 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003f700:	3021fff4 	addik	r1, r1, -12
2003f704:	fa610004 	swi	r19, r1, 4
2003f708:	fa810008 	swi	r20, r1, 8
2003f70c:	12610000 	addk	r19, r1, r0
2003f710:	96808000 	mfs	r20, rpc
2003f714:	b000dffc 	imm	-8196
2003f718:	3294224c 	addik	r20, r20, 8780
2003f71c:	f8b30010 	swi	r5, r19, 16
2003f720:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003f724:	e8730010 	lwi	r3, r19, 16
2003f728:	e8830004 	lwi	r4, r3, 4
2003f72c:	e8730010 	lwi	r3, r19, 16
2003f730:	e8630010 	lwi	r3, r3, 16
2003f734:	e8a30000 	lwi	r5, r3, 0
2003f738:	e8730010 	lwi	r3, r19, 16
2003f73c:	e8630000 	lwi	r3, r3, 0
2003f740:	3063ffff 	addik	r3, r3, -1
2003f744:	84651800 	and	r3, r5, r3
2003f748:	64630402 	bslli	r3, r3, 2
2003f74c:	10641800 	addk	r3, r4, r3
2003f750:	e8930014 	lwi	r4, r19, 20
2003f754:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2003f758:	e8730010 	lwi	r3, r19, 16
2003f75c:	e8630010 	lwi	r3, r3, 16
2003f760:	e8830000 	lwi	r4, r3, 0
2003f764:	30840001 	addik	r4, r4, 1
2003f768:	f8830000 	swi	r4, r3, 0
}
2003f76c:	10330000 	addk	r1, r19, r0
2003f770:	ea610004 	lwi	r19, r1, 4
2003f774:	ea810008 	lwi	r20, r1, 8
2003f778:	3021000c 	addik	r1, r1, 12
2003f77c:	b60f0008 	rtsd	r15, 8
2003f780:	80000000 	or	r0, r0, r0

2003f784 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003f784:	3021fff4 	addik	r1, r1, -12
2003f788:	fa610004 	swi	r19, r1, 4
2003f78c:	fa810008 	swi	r20, r1, 8
2003f790:	12610000 	addk	r19, r1, r0
2003f794:	96808000 	mfs	r20, rpc
2003f798:	b000dffc 	imm	-8196
2003f79c:	329421c8 	addik	r20, r20, 8648
2003f7a0:	f8b30010 	swi	r5, r19, 16
2003f7a4:	f8d30014 	swi	r6, r19, 20
2003f7a8:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003f7ac:	e8730010 	lwi	r3, r19, 16
2003f7b0:	e8630010 	lwi	r3, r3, 16
2003f7b4:	e8830000 	lwi	r4, r3, 0
2003f7b8:	e8730010 	lwi	r3, r19, 16
2003f7bc:	e8a3000c 	lwi	r5, r3, 12
2003f7c0:	e8730014 	lwi	r3, r19, 20
2003f7c4:	64630402 	bslli	r3, r3, 2
2003f7c8:	10651800 	addk	r3, r5, r3
2003f7cc:	e8630000 	lwi	r3, r3, 0
2003f7d0:	14a32000 	rsubk	r5, r3, r4
2003f7d4:	30600001 	addik	r3, r0, 1
2003f7d8:	e8930018 	lwi	r4, r19, 24
2003f7dc:	16442803 	cmpu	r18, r4, r5
2003f7e0:	bcb20008 	bgei	r18, 8		// 2003f7e8
2003f7e4:	10600000 	addk	r3, r0, r0
2003f7e8:	a46300ff 	andi	r3, r3, 255
}
2003f7ec:	10330000 	addk	r1, r19, r0
2003f7f0:	ea610004 	lwi	r19, r1, 4
2003f7f4:	ea810008 	lwi	r20, r1, 8
2003f7f8:	3021000c 	addik	r1, r1, 12
2003f7fc:	b60f0008 	rtsd	r15, 8
2003f800:	80000000 	or	r0, r0, r0

2003f804 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003f804:	3021fff4 	addik	r1, r1, -12
2003f808:	fa610004 	swi	r19, r1, 4
2003f80c:	fa810008 	swi	r20, r1, 8
2003f810:	12610000 	addk	r19, r1, r0
2003f814:	96808000 	mfs	r20, rpc
2003f818:	b000dffc 	imm	-8196
2003f81c:	32942148 	addik	r20, r20, 8520
2003f820:	f8b30010 	swi	r5, r19, 16
2003f824:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003f828:	e8730010 	lwi	r3, r19, 16
2003f82c:	e8630010 	lwi	r3, r3, 16
2003f830:	e8830000 	lwi	r4, r3, 0
2003f834:	e8730010 	lwi	r3, r19, 16
2003f838:	e8a3000c 	lwi	r5, r3, 12
2003f83c:	e8730014 	lwi	r3, r19, 20
2003f840:	64630402 	bslli	r3, r3, 2
2003f844:	10651800 	addk	r3, r5, r3
2003f848:	e8630000 	lwi	r3, r3, 0
2003f84c:	14632000 	rsubk	r3, r3, r4
}
2003f850:	10330000 	addk	r1, r19, r0
2003f854:	ea610004 	lwi	r19, r1, 4
2003f858:	ea810008 	lwi	r20, r1, 8
2003f85c:	3021000c 	addik	r1, r1, 12
2003f860:	b60f0008 	rtsd	r15, 8
2003f864:	80000000 	or	r0, r0, r0

2003f868 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003f868:	3021fff0 	addik	r1, r1, -16
2003f86c:	fa610008 	swi	r19, r1, 8
2003f870:	fa81000c 	swi	r20, r1, 12
2003f874:	12610000 	addk	r19, r1, r0
2003f878:	96808000 	mfs	r20, rpc
2003f87c:	b000dffc 	imm	-8196
2003f880:	329420e4 	addik	r20, r20, 8420
2003f884:	f8b30014 	swi	r5, r19, 20
2003f888:	f8d30018 	swi	r6, r19, 24
2003f88c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003f890:	f8130004 	swi	r0, r19, 4
2003f894:	b800005c 	bri	92		// 2003f8f0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003f898:	e8730014 	lwi	r3, r19, 20
2003f89c:	e8830000 	lwi	r4, r3, 0
2003f8a0:	e8730014 	lwi	r3, r19, 20
2003f8a4:	e8a3000c 	lwi	r5, r3, 12
2003f8a8:	e8730004 	lwi	r3, r19, 4
2003f8ac:	64630402 	bslli	r3, r3, 2
2003f8b0:	10651800 	addk	r3, r5, r3
2003f8b4:	e8a30000 	lwi	r5, r3, 0
2003f8b8:	e8730014 	lwi	r3, r19, 20
2003f8bc:	e8630010 	lwi	r3, r3, 16
2003f8c0:	e8630000 	lwi	r3, r3, 0
2003f8c4:	14632800 	rsubk	r3, r3, r5
2003f8c8:	10641800 	addk	r3, r4, r3
2003f8cc:	30830001 	addik	r4, r3, 1
2003f8d0:	e873001c 	lwi	r3, r19, 28
2003f8d4:	16441803 	cmpu	r18, r4, r3
2003f8d8:	bc52000c 	blti	r18, 12		// 2003f8e4
            return 0;
2003f8dc:	10600000 	addk	r3, r0, r0
2003f8e0:	b8000024 	bri	36		// 2003f904
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003f8e4:	e8730004 	lwi	r3, r19, 4
2003f8e8:	30630001 	addik	r3, r3, 1
2003f8ec:	f8730004 	swi	r3, r19, 4
2003f8f0:	e8930004 	lwi	r4, r19, 4
2003f8f4:	e8730018 	lwi	r3, r19, 24
2003f8f8:	16432003 	cmpu	r18, r3, r4
2003f8fc:	bc52ff9c 	blti	r18, -100		// 2003f898
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003f900:	30600001 	addik	r3, r0, 1
}
2003f904:	10330000 	addk	r1, r19, r0
2003f908:	ea610008 	lwi	r19, r1, 8
2003f90c:	ea81000c 	lwi	r20, r1, 12
2003f910:	30210010 	addik	r1, r1, 16
2003f914:	b60f0008 	rtsd	r15, 8
2003f918:	80000000 	or	r0, r0, r0

2003f91c <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003f91c:	3021ffe8 	addik	r1, r1, -24
2003f920:	fa610010 	swi	r19, r1, 16
2003f924:	fa810014 	swi	r20, r1, 20
2003f928:	12610000 	addk	r19, r1, r0
2003f92c:	96808000 	mfs	r20, rpc
2003f930:	b000dffc 	imm	-8196
2003f934:	32942030 	addik	r20, r20, 8240
2003f938:	f8b3001c 	swi	r5, r19, 28
2003f93c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003f940:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003f944:	f8130004 	swi	r0, r19, 4
2003f948:	b8000054 	bri	84		// 2003f99c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003f94c:	e873001c 	lwi	r3, r19, 28
2003f950:	e8630010 	lwi	r3, r3, 16
2003f954:	e8830000 	lwi	r4, r3, 0
2003f958:	e873001c 	lwi	r3, r19, 28
2003f95c:	e8a3000c 	lwi	r5, r3, 12
2003f960:	e8730004 	lwi	r3, r19, 4
2003f964:	64630402 	bslli	r3, r3, 2
2003f968:	10651800 	addk	r3, r5, r3
2003f96c:	e8630000 	lwi	r3, r3, 0
2003f970:	14632000 	rsubk	r3, r3, r4
2003f974:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003f978:	e8930008 	lwi	r4, r19, 8
2003f97c:	e873000c 	lwi	r3, r19, 12
2003f980:	16441803 	cmpu	r18, r4, r3
2003f984:	bcb20008 	bgei	r18, 8		// 2003f98c
2003f988:	10640000 	addk	r3, r4, r0
2003f98c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003f990:	e8730004 	lwi	r3, r19, 4
2003f994:	30630001 	addik	r3, r3, 1
2003f998:	f8730004 	swi	r3, r19, 4
2003f99c:	e8930004 	lwi	r4, r19, 4
2003f9a0:	e8730020 	lwi	r3, r19, 32
2003f9a4:	16432003 	cmpu	r18, r3, r4
2003f9a8:	bc52ffa4 	blti	r18, -92		// 2003f94c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003f9ac:	e873001c 	lwi	r3, r19, 28
2003f9b0:	e8830000 	lwi	r4, r3, 0
2003f9b4:	e8730008 	lwi	r3, r19, 8
2003f9b8:	14632000 	rsubk	r3, r3, r4
}
2003f9bc:	10330000 	addk	r1, r19, r0
2003f9c0:	ea610010 	lwi	r19, r1, 16
2003f9c4:	ea810014 	lwi	r20, r1, 20
2003f9c8:	30210018 	addik	r1, r1, 24
2003f9cc:	b60f0008 	rtsd	r15, 8
2003f9d0:	80000000 	or	r0, r0, r0

2003f9d4 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003f9d4:	3021fff0 	addik	r1, r1, -16
2003f9d8:	fa610008 	swi	r19, r1, 8
2003f9dc:	fa81000c 	swi	r20, r1, 12
2003f9e0:	12610000 	addk	r19, r1, r0
2003f9e4:	96808000 	mfs	r20, rpc
2003f9e8:	b000dffc 	imm	-8196
2003f9ec:	32941f78 	addik	r20, r20, 8056
2003f9f0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2003f9f4:	e8730014 	lwi	r3, r19, 20
2003f9f8:	e8630010 	lwi	r3, r3, 16
2003f9fc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003fa00:	f8130004 	swi	r0, r19, 4
2003fa04:	b8000028 	bri	40		// 2003fa2c
        fifo->read_inds[i] = 0;
2003fa08:	e8730014 	lwi	r3, r19, 20
2003fa0c:	e883000c 	lwi	r4, r3, 12
2003fa10:	e8730004 	lwi	r3, r19, 4
2003fa14:	64630402 	bslli	r3, r3, 2
2003fa18:	10641800 	addk	r3, r4, r3
2003fa1c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003fa20:	e8730004 	lwi	r3, r19, 4
2003fa24:	30630001 	addik	r3, r3, 1
2003fa28:	f8730004 	swi	r3, r19, 4
2003fa2c:	e8730014 	lwi	r3, r19, 20
2003fa30:	e8830008 	lwi	r4, r3, 8
2003fa34:	e8730004 	lwi	r3, r19, 4
2003fa38:	16441803 	cmpu	r18, r4, r3
2003fa3c:	bc52ffcc 	blti	r18, -52		// 2003fa08
        fifo->read_inds[i] = 0;
    }
}
2003fa40:	10330000 	addk	r1, r19, r0
2003fa44:	ea610008 	lwi	r19, r1, 8
2003fa48:	ea81000c 	lwi	r20, r1, 12
2003fa4c:	30210010 	addik	r1, r1, 16
2003fa50:	b60f0008 	rtsd	r15, 8
2003fa54:	80000000 	or	r0, r0, r0

2003fa58 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003fa58:	3021ffec 	addik	r1, r1, -20
2003fa5c:	fa61000c 	swi	r19, r1, 12
2003fa60:	fa810010 	swi	r20, r1, 16
2003fa64:	12610000 	addk	r19, r1, r0
2003fa68:	96808000 	mfs	r20, rpc
2003fa6c:	b000dffc 	imm	-8196
2003fa70:	32941ef4 	addik	r20, r20, 7924
2003fa74:	f8b30018 	swi	r5, r19, 24
2003fa78:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003fa7c:	e8730018 	lwi	r3, r19, 24
2003fa80:	e8830004 	lwi	r4, r3, 4
2003fa84:	e8730018 	lwi	r3, r19, 24
2003fa88:	e8a3000c 	lwi	r5, r3, 12
2003fa8c:	e873001c 	lwi	r3, r19, 28
2003fa90:	64630402 	bslli	r3, r3, 2
2003fa94:	10651800 	addk	r3, r5, r3
2003fa98:	e8a30000 	lwi	r5, r3, 0
2003fa9c:	e8730018 	lwi	r3, r19, 24
2003faa0:	e8630000 	lwi	r3, r3, 0
2003faa4:	3063ffff 	addik	r3, r3, -1
2003faa8:	84651800 	and	r3, r5, r3
2003faac:	64630403 	bslli	r3, r3, 3
2003fab0:	10641800 	addk	r3, r4, r3
2003fab4:	e8830000 	lwi	r4, r3, 0
2003fab8:	e8a30004 	lwi	r5, r3, 4
2003fabc:	f8930004 	swi	r4, r19, 4
2003fac0:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
2003fac4:	e8730018 	lwi	r3, r19, 24
2003fac8:	e883000c 	lwi	r4, r3, 12
2003facc:	e873001c 	lwi	r3, r19, 28
2003fad0:	64630402 	bslli	r3, r3, 2
2003fad4:	10641800 	addk	r3, r4, r3
2003fad8:	e8830000 	lwi	r4, r3, 0
2003fadc:	30840001 	addik	r4, r4, 1
2003fae0:	f8830000 	swi	r4, r3, 0
    return value;
2003fae4:	e8930004 	lwi	r4, r19, 4
2003fae8:	e8b30008 	lwi	r5, r19, 8
}
2003faec:	10640000 	addk	r3, r4, r0
2003faf0:	10850000 	addk	r4, r5, r0
2003faf4:	10330000 	addk	r1, r19, r0
2003faf8:	ea61000c 	lwi	r19, r1, 12
2003fafc:	ea810010 	lwi	r20, r1, 16
2003fb00:	30210014 	addik	r1, r1, 20
2003fb04:	b60f0008 	rtsd	r15, 8
2003fb08:	80000000 	or	r0, r0, r0

2003fb0c <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003fb0c:	3021fff4 	addik	r1, r1, -12
2003fb10:	fa610004 	swi	r19, r1, 4
2003fb14:	fa810008 	swi	r20, r1, 8
2003fb18:	12610000 	addk	r19, r1, r0
2003fb1c:	96808000 	mfs	r20, rpc
2003fb20:	b000dffc 	imm	-8196
2003fb24:	32941e40 	addik	r20, r20, 7744
2003fb28:	f8b30010 	swi	r5, r19, 16
2003fb2c:	f8d30014 	swi	r6, r19, 20
2003fb30:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003fb34:	e8730010 	lwi	r3, r19, 16
2003fb38:	e8830004 	lwi	r4, r3, 4
2003fb3c:	e8730010 	lwi	r3, r19, 16
2003fb40:	e8630010 	lwi	r3, r3, 16
2003fb44:	e8a30000 	lwi	r5, r3, 0
2003fb48:	e8730010 	lwi	r3, r19, 16
2003fb4c:	e8630000 	lwi	r3, r3, 0
2003fb50:	3063ffff 	addik	r3, r3, -1
2003fb54:	84651800 	and	r3, r5, r3
2003fb58:	64630403 	bslli	r3, r3, 3
2003fb5c:	10641800 	addk	r3, r4, r3
2003fb60:	e8930014 	lwi	r4, r19, 20
2003fb64:	e8b30018 	lwi	r5, r19, 24
2003fb68:	f8830000 	swi	r4, r3, 0
2003fb6c:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
2003fb70:	e8730010 	lwi	r3, r19, 16
2003fb74:	e8630010 	lwi	r3, r3, 16
2003fb78:	e8830000 	lwi	r4, r3, 0
2003fb7c:	30840001 	addik	r4, r4, 1
2003fb80:	f8830000 	swi	r4, r3, 0
}
2003fb84:	10330000 	addk	r1, r19, r0
2003fb88:	ea610004 	lwi	r19, r1, 4
2003fb8c:	ea810008 	lwi	r20, r1, 8
2003fb90:	3021000c 	addik	r1, r1, 12
2003fb94:	b60f0008 	rtsd	r15, 8
2003fb98:	80000000 	or	r0, r0, r0

2003fb9c <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
2003fb9c:	3021fff4 	addik	r1, r1, -12
2003fba0:	fa610004 	swi	r19, r1, 4
2003fba4:	fa810008 	swi	r20, r1, 8
2003fba8:	12610000 	addk	r19, r1, r0
2003fbac:	96808000 	mfs	r20, rpc
2003fbb0:	b000dffc 	imm	-8196
2003fbb4:	32941db0 	addik	r20, r20, 7600
2003fbb8:	f8b30010 	swi	r5, r19, 16
2003fbbc:	f8d30014 	swi	r6, r19, 20
2003fbc0:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2003fbc4:	e8730010 	lwi	r3, r19, 16
2003fbc8:	e8630010 	lwi	r3, r3, 16
2003fbcc:	e8830000 	lwi	r4, r3, 0
2003fbd0:	e8730010 	lwi	r3, r19, 16
2003fbd4:	e8a3000c 	lwi	r5, r3, 12
2003fbd8:	e8730014 	lwi	r3, r19, 20
2003fbdc:	64630402 	bslli	r3, r3, 2
2003fbe0:	10651800 	addk	r3, r5, r3
2003fbe4:	e8630000 	lwi	r3, r3, 0
2003fbe8:	14a32000 	rsubk	r5, r3, r4
2003fbec:	30600001 	addik	r3, r0, 1
2003fbf0:	e8930018 	lwi	r4, r19, 24
2003fbf4:	16442803 	cmpu	r18, r4, r5
2003fbf8:	bcb20008 	bgei	r18, 8		// 2003fc00
2003fbfc:	10600000 	addk	r3, r0, r0
2003fc00:	a46300ff 	andi	r3, r3, 255
}
2003fc04:	10330000 	addk	r1, r19, r0
2003fc08:	ea610004 	lwi	r19, r1, 4
2003fc0c:	ea810008 	lwi	r20, r1, 8
2003fc10:	3021000c 	addik	r1, r1, 12
2003fc14:	b60f0008 	rtsd	r15, 8
2003fc18:	80000000 	or	r0, r0, r0

2003fc1c <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003fc1c:	3021fff4 	addik	r1, r1, -12
2003fc20:	fa610004 	swi	r19, r1, 4
2003fc24:	fa810008 	swi	r20, r1, 8
2003fc28:	12610000 	addk	r19, r1, r0
2003fc2c:	96808000 	mfs	r20, rpc
2003fc30:	b000dffc 	imm	-8196
2003fc34:	32941d30 	addik	r20, r20, 7472
2003fc38:	f8b30010 	swi	r5, r19, 16
2003fc3c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
2003fc40:	e8730010 	lwi	r3, r19, 16
2003fc44:	e8630010 	lwi	r3, r3, 16
2003fc48:	e8830000 	lwi	r4, r3, 0
2003fc4c:	e8730010 	lwi	r3, r19, 16
2003fc50:	e8a3000c 	lwi	r5, r3, 12
2003fc54:	e8730014 	lwi	r3, r19, 20
2003fc58:	64630402 	bslli	r3, r3, 2
2003fc5c:	10651800 	addk	r3, r5, r3
2003fc60:	e8630000 	lwi	r3, r3, 0
2003fc64:	14632000 	rsubk	r3, r3, r4
}
2003fc68:	10330000 	addk	r1, r19, r0
2003fc6c:	ea610004 	lwi	r19, r1, 4
2003fc70:	ea810008 	lwi	r20, r1, 8
2003fc74:	3021000c 	addik	r1, r1, 12
2003fc78:	b60f0008 	rtsd	r15, 8
2003fc7c:	80000000 	or	r0, r0, r0

2003fc80 <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2003fc80:	3021fff0 	addik	r1, r1, -16
2003fc84:	fa610008 	swi	r19, r1, 8
2003fc88:	fa81000c 	swi	r20, r1, 12
2003fc8c:	12610000 	addk	r19, r1, r0
2003fc90:	96808000 	mfs	r20, rpc
2003fc94:	b000dffc 	imm	-8196
2003fc98:	32941ccc 	addik	r20, r20, 7372
2003fc9c:	f8b30014 	swi	r5, r19, 20
2003fca0:	f8d30018 	swi	r6, r19, 24
2003fca4:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003fca8:	f8130004 	swi	r0, r19, 4
2003fcac:	b800005c 	bri	92		// 2003fd08
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2003fcb0:	e8730014 	lwi	r3, r19, 20
2003fcb4:	e8830000 	lwi	r4, r3, 0
2003fcb8:	e8730014 	lwi	r3, r19, 20
2003fcbc:	e8a3000c 	lwi	r5, r3, 12
2003fcc0:	e8730004 	lwi	r3, r19, 4
2003fcc4:	64630402 	bslli	r3, r3, 2
2003fcc8:	10651800 	addk	r3, r5, r3
2003fccc:	e8a30000 	lwi	r5, r3, 0
2003fcd0:	e8730014 	lwi	r3, r19, 20
2003fcd4:	e8630010 	lwi	r3, r3, 16
2003fcd8:	e8630000 	lwi	r3, r3, 0
2003fcdc:	14632800 	rsubk	r3, r3, r5
2003fce0:	10641800 	addk	r3, r4, r3
2003fce4:	30830001 	addik	r4, r3, 1
2003fce8:	e873001c 	lwi	r3, r19, 28
2003fcec:	16441803 	cmpu	r18, r4, r3
2003fcf0:	bc52000c 	blti	r18, 12		// 2003fcfc
            return 0;
2003fcf4:	10600000 	addk	r3, r0, r0
2003fcf8:	b8000024 	bri	36		// 2003fd1c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2003fcfc:	e8730004 	lwi	r3, r19, 4
2003fd00:	30630001 	addik	r3, r3, 1
2003fd04:	f8730004 	swi	r3, r19, 4
2003fd08:	e8930004 	lwi	r4, r19, 4
2003fd0c:	e8730018 	lwi	r3, r19, 24
2003fd10:	16432003 	cmpu	r18, r3, r4
2003fd14:	bc52ff9c 	blti	r18, -100		// 2003fcb0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
2003fd18:	30600001 	addik	r3, r0, 1
}
2003fd1c:	10330000 	addk	r1, r19, r0
2003fd20:	ea610008 	lwi	r19, r1, 8
2003fd24:	ea81000c 	lwi	r20, r1, 12
2003fd28:	30210010 	addik	r1, r1, 16
2003fd2c:	b60f0008 	rtsd	r15, 8
2003fd30:	80000000 	or	r0, r0, r0

2003fd34 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2003fd34:	3021ffe8 	addik	r1, r1, -24
2003fd38:	fa610010 	swi	r19, r1, 16
2003fd3c:	fa810014 	swi	r20, r1, 20
2003fd40:	12610000 	addk	r19, r1, r0
2003fd44:	96808000 	mfs	r20, rpc
2003fd48:	b000dffc 	imm	-8196
2003fd4c:	32941c18 	addik	r20, r20, 7192
2003fd50:	f8b3001c 	swi	r5, r19, 28
2003fd54:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2003fd58:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
2003fd5c:	f8130004 	swi	r0, r19, 4
2003fd60:	b8000054 	bri	84		// 2003fdb4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2003fd64:	e873001c 	lwi	r3, r19, 28
2003fd68:	e8630010 	lwi	r3, r3, 16
2003fd6c:	e8830000 	lwi	r4, r3, 0
2003fd70:	e873001c 	lwi	r3, r19, 28
2003fd74:	e8a3000c 	lwi	r5, r3, 12
2003fd78:	e8730004 	lwi	r3, r19, 4
2003fd7c:	64630402 	bslli	r3, r3, 2
2003fd80:	10651800 	addk	r3, r5, r3
2003fd84:	e8630000 	lwi	r3, r3, 0
2003fd88:	14632000 	rsubk	r3, r3, r4
2003fd8c:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
2003fd90:	e8930008 	lwi	r4, r19, 8
2003fd94:	e873000c 	lwi	r3, r19, 12
2003fd98:	16441803 	cmpu	r18, r4, r3
2003fd9c:	bcb20008 	bgei	r18, 8		// 2003fda4
2003fda0:	10640000 	addk	r3, r4, r0
2003fda4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2003fda8:	e8730004 	lwi	r3, r19, 4
2003fdac:	30630001 	addik	r3, r3, 1
2003fdb0:	f8730004 	swi	r3, r19, 4
2003fdb4:	e8930004 	lwi	r4, r19, 4
2003fdb8:	e8730020 	lwi	r3, r19, 32
2003fdbc:	16432003 	cmpu	r18, r3, r4
2003fdc0:	bc52ffa4 	blti	r18, -92		// 2003fd64
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2003fdc4:	e873001c 	lwi	r3, r19, 28
2003fdc8:	e8830000 	lwi	r4, r3, 0
2003fdcc:	e8730008 	lwi	r3, r19, 8
2003fdd0:	14632000 	rsubk	r3, r3, r4
}
2003fdd4:	10330000 	addk	r1, r19, r0
2003fdd8:	ea610010 	lwi	r19, r1, 16
2003fddc:	ea810014 	lwi	r20, r1, 20
2003fde0:	30210018 	addik	r1, r1, 24
2003fde4:	b60f0008 	rtsd	r15, 8
2003fde8:	80000000 	or	r0, r0, r0

2003fdec <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2003fdec:	3021fff0 	addik	r1, r1, -16
2003fdf0:	fa610008 	swi	r19, r1, 8
2003fdf4:	fa81000c 	swi	r20, r1, 12
2003fdf8:	12610000 	addk	r19, r1, r0
2003fdfc:	96808000 	mfs	r20, rpc
2003fe00:	b000dffc 	imm	-8196
2003fe04:	32941b60 	addik	r20, r20, 7008
2003fe08:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2003fe0c:	e8730014 	lwi	r3, r19, 20
2003fe10:	e8630010 	lwi	r3, r3, 16
2003fe14:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
2003fe18:	f8130004 	swi	r0, r19, 4
2003fe1c:	b8000028 	bri	40		// 2003fe44
        fifo->read_inds[i] = 0;
2003fe20:	e8730014 	lwi	r3, r19, 20
2003fe24:	e883000c 	lwi	r4, r3, 12
2003fe28:	e8730004 	lwi	r3, r19, 4
2003fe2c:	64630402 	bslli	r3, r3, 2
2003fe30:	10641800 	addk	r3, r4, r3
2003fe34:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
2003fe38:	e8730004 	lwi	r3, r19, 4
2003fe3c:	30630001 	addik	r3, r3, 1
2003fe40:	f8730004 	swi	r3, r19, 4
2003fe44:	e8730014 	lwi	r3, r19, 20
2003fe48:	e8830008 	lwi	r4, r3, 8
2003fe4c:	e8730004 	lwi	r3, r19, 4
2003fe50:	16441803 	cmpu	r18, r4, r3
2003fe54:	bc52ffcc 	blti	r18, -52		// 2003fe20
        fifo->read_inds[i] = 0;
    }
}
2003fe58:	10330000 	addk	r1, r19, r0
2003fe5c:	ea610008 	lwi	r19, r1, 8
2003fe60:	ea81000c 	lwi	r20, r1, 12
2003fe64:	30210010 	addik	r1, r1, 16
2003fe68:	b60f0008 	rtsd	r15, 8
2003fe6c:	80000000 	or	r0, r0, r0

2003fe70 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2003fe70:	3021fff0 	addik	r1, r1, -16
2003fe74:	fa610008 	swi	r19, r1, 8
2003fe78:	fa81000c 	swi	r20, r1, 12
2003fe7c:	12610000 	addk	r19, r1, r0
2003fe80:	96808000 	mfs	r20, rpc
2003fe84:	b000dffc 	imm	-8196
2003fe88:	32941adc 	addik	r20, r20, 6876
2003fe8c:	f8b30014 	swi	r5, r19, 20
2003fe90:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2003fe94:	e8730014 	lwi	r3, r19, 20
2003fe98:	e8830004 	lwi	r4, r3, 4
2003fe9c:	e8730014 	lwi	r3, r19, 20
2003fea0:	e8a3000c 	lwi	r5, r3, 12
2003fea4:	e8730018 	lwi	r3, r19, 24
2003fea8:	64630402 	bslli	r3, r3, 2
2003feac:	10651800 	addk	r3, r5, r3
2003feb0:	e8a30000 	lwi	r5, r3, 0
2003feb4:	e8730014 	lwi	r3, r19, 20
2003feb8:	e8630000 	lwi	r3, r3, 0
2003febc:	3063ffff 	addik	r3, r3, -1
2003fec0:	84651800 	and	r3, r5, r3
2003fec4:	64630402 	bslli	r3, r3, 2
2003fec8:	10641800 	addk	r3, r4, r3
2003fecc:	e8630000 	lwi	r3, r3, 0
2003fed0:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2003fed4:	e8730014 	lwi	r3, r19, 20
2003fed8:	e883000c 	lwi	r4, r3, 12
2003fedc:	e8730018 	lwi	r3, r19, 24
2003fee0:	64630402 	bslli	r3, r3, 2
2003fee4:	10641800 	addk	r3, r4, r3
2003fee8:	e8830000 	lwi	r4, r3, 0
2003feec:	30840001 	addik	r4, r4, 1
2003fef0:	f8830000 	swi	r4, r3, 0
    return value;
2003fef4:	e8730004 	lwi	r3, r19, 4
}
2003fef8:	10330000 	addk	r1, r19, r0
2003fefc:	ea610008 	lwi	r19, r1, 8
2003ff00:	ea81000c 	lwi	r20, r1, 12
2003ff04:	30210010 	addik	r1, r1, 16
2003ff08:	b60f0008 	rtsd	r15, 8
2003ff0c:	80000000 	or	r0, r0, r0

2003ff10 <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2003ff10:	3021fff4 	addik	r1, r1, -12
2003ff14:	fa610004 	swi	r19, r1, 4
2003ff18:	fa810008 	swi	r20, r1, 8
2003ff1c:	12610000 	addk	r19, r1, r0
2003ff20:	96808000 	mfs	r20, rpc
2003ff24:	b000dffc 	imm	-8196
2003ff28:	32941a3c 	addik	r20, r20, 6716
2003ff2c:	f8b30010 	swi	r5, r19, 16
2003ff30:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2003ff34:	e8730010 	lwi	r3, r19, 16
2003ff38:	e8830004 	lwi	r4, r3, 4
2003ff3c:	e8730010 	lwi	r3, r19, 16
2003ff40:	e8630010 	lwi	r3, r3, 16
2003ff44:	e8a30000 	lwi	r5, r3, 0
2003ff48:	e8730010 	lwi	r3, r19, 16
2003ff4c:	e8630000 	lwi	r3, r3, 0
2003ff50:	3063ffff 	addik	r3, r3, -1
2003ff54:	84651800 	and	r3, r5, r3
2003ff58:	64630402 	bslli	r3, r3, 2
2003ff5c:	10641800 	addk	r3, r4, r3
2003ff60:	e8930014 	lwi	r4, r19, 20
2003ff64:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2003ff68:	e8730010 	lwi	r3, r19, 16
2003ff6c:	e8630010 	lwi	r3, r3, 16
2003ff70:	e8830000 	lwi	r4, r3, 0
2003ff74:	30840001 	addik	r4, r4, 1
2003ff78:	f8830000 	swi	r4, r3, 0
}
2003ff7c:	10330000 	addk	r1, r19, r0
2003ff80:	ea610004 	lwi	r19, r1, 4
2003ff84:	ea810008 	lwi	r20, r1, 8
2003ff88:	3021000c 	addik	r1, r1, 12
2003ff8c:	b60f0008 	rtsd	r15, 8
2003ff90:	80000000 	or	r0, r0, r0

2003ff94 <read_DC>:

	static enum states _FSM_state;

	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_DC() {
2003ff94:	3021ffdc 	addik	r1, r1, -36
2003ff98:	f9e10000 	swi	r15, r1, 0
2003ff9c:	fa61001c 	swi	r19, r1, 28
2003ffa0:	fa810020 	swi	r20, r1, 32
2003ffa4:	12610000 	addk	r19, r1, r0
2003ffa8:	96808000 	mfs	r20, rpc
2003ffac:	b000dffc 	imm	-8196
2003ffb0:	329419b4 	addik	r20, r20, 6580
		index_DC = decoder_texture_IQ_DC->read_inds[0];
2003ffb4:	b0000000 	imm	0
2003ffb8:	e8740c40 	lwi	r3, r20, 3136
2003ffbc:	e8630000 	lwi	r3, r3, 0
2003ffc0:	e863000c 	lwi	r3, r3, 12
2003ffc4:	e8830000 	lwi	r4, r3, 0
2003ffc8:	b0000000 	imm	0
2003ffcc:	e8740c48 	lwi	r3, r20, 3144
2003ffd0:	f8830000 	swi	r4, r3, 0
		numTokens_DC = index_DC + fifo_i16_get_num_tokens(decoder_texture_IQ_DC, 0);
2003ffd4:	b0000000 	imm	0
2003ffd8:	e8740c40 	lwi	r3, r20, 3136
2003ffdc:	e8630000 	lwi	r3, r3, 0
2003ffe0:	10a30000 	addk	r5, r3, r0
2003ffe4:	10c00000 	addk	r6, r0, r0
2003ffe8:	b0000000 	imm	0
2003ffec:	e8940c30 	lwi	r4, r20, 3120
2003fff0:	99fc2000 	brald	r15, r4
2003fff4:	80000000 	or	r0, r0, r0
2003fff8:	10830000 	addk	r4, r3, r0
2003fffc:	b0000000 	imm	0
20040000:	e8740c48 	lwi	r3, r20, 3144
20040004:	e8630000 	lwi	r3, r3, 0
20040008:	10841800 	addk	r4, r4, r3
2004000c:	b0000000 	imm	0
20040010:	e8740c4c 	lwi	r3, r20, 3148
20040014:	f8830000 	swi	r4, r3, 0
	}
20040018:	e9e10000 	lwi	r15, r1, 0
2004001c:	10330000 	addk	r1, r19, r0
20040020:	ea61001c 	lwi	r19, r1, 28
20040024:	ea810020 	lwi	r20, r1, 32
20040028:	30210024 	addik	r1, r1, 36
2004002c:	b60f0008 	rtsd	r15, 8
20040030:	80000000 	or	r0, r0, r0

20040034 <read_end_DC>:
	
	static void read_end_DC() {
20040034:	3021fff4 	addik	r1, r1, -12
20040038:	fa610004 	swi	r19, r1, 4
2004003c:	fa810008 	swi	r20, r1, 8
20040040:	12610000 	addk	r19, r1, r0
20040044:	96808000 	mfs	r20, rpc
20040048:	b000dffc 	imm	-8196
2004004c:	32941918 	addik	r20, r20, 6424
		decoder_texture_IQ_DC->read_inds[0] = index_DC;
20040050:	b0000000 	imm	0
20040054:	e8740c40 	lwi	r3, r20, 3136
20040058:	e8630000 	lwi	r3, r3, 0
2004005c:	e863000c 	lwi	r3, r3, 12
20040060:	b0000000 	imm	0
20040064:	e8940c48 	lwi	r4, r20, 3144
20040068:	e8840000 	lwi	r4, r4, 0
2004006c:	f8830000 	swi	r4, r3, 0
	}
20040070:	10330000 	addk	r1, r19, r0
20040074:	ea610004 	lwi	r19, r1, 4
20040078:	ea810008 	lwi	r20, r1, 8
2004007c:	3021000c 	addik	r1, r1, 12
20040080:	b60f0008 	rtsd	r15, 8
20040084:	80000000 	or	r0, r0, r0

20040088 <read_AC>:
	static void read_AC() {
20040088:	3021ffdc 	addik	r1, r1, -36
2004008c:	f9e10000 	swi	r15, r1, 0
20040090:	fa61001c 	swi	r19, r1, 28
20040094:	fa810020 	swi	r20, r1, 32
20040098:	12610000 	addk	r19, r1, r0
2004009c:	96808000 	mfs	r20, rpc
200400a0:	b000dffc 	imm	-8196
200400a4:	329418c0 	addik	r20, r20, 6336
		index_AC = decoder_texture_IQ_AC->read_inds[0];
200400a8:	b0000000 	imm	0
200400ac:	e8740c38 	lwi	r3, r20, 3128
200400b0:	e8630000 	lwi	r3, r3, 0
200400b4:	e863000c 	lwi	r3, r3, 12
200400b8:	e8830000 	lwi	r4, r3, 0
200400bc:	b0000000 	imm	0
200400c0:	e8740c50 	lwi	r3, r20, 3152
200400c4:	f8830000 	swi	r4, r3, 0
		numTokens_AC = index_AC + fifo_i16_get_num_tokens(decoder_texture_IQ_AC, 0);
200400c8:	b0000000 	imm	0
200400cc:	e8740c38 	lwi	r3, r20, 3128
200400d0:	e8630000 	lwi	r3, r3, 0
200400d4:	10a30000 	addk	r5, r3, r0
200400d8:	10c00000 	addk	r6, r0, r0
200400dc:	b0000000 	imm	0
200400e0:	e8940c30 	lwi	r4, r20, 3120
200400e4:	99fc2000 	brald	r15, r4
200400e8:	80000000 	or	r0, r0, r0
200400ec:	10830000 	addk	r4, r3, r0
200400f0:	b0000000 	imm	0
200400f4:	e8740c50 	lwi	r3, r20, 3152
200400f8:	e8630000 	lwi	r3, r3, 0
200400fc:	10841800 	addk	r4, r4, r3
20040100:	b0000000 	imm	0
20040104:	e8740c54 	lwi	r3, r20, 3156
20040108:	f8830000 	swi	r4, r3, 0
	}
2004010c:	e9e10000 	lwi	r15, r1, 0
20040110:	10330000 	addk	r1, r19, r0
20040114:	ea61001c 	lwi	r19, r1, 28
20040118:	ea810020 	lwi	r20, r1, 32
2004011c:	30210024 	addik	r1, r1, 36
20040120:	b60f0008 	rtsd	r15, 8
20040124:	80000000 	or	r0, r0, r0

20040128 <read_end_AC>:
	
	static void read_end_AC() {
20040128:	3021fff4 	addik	r1, r1, -12
2004012c:	fa610004 	swi	r19, r1, 4
20040130:	fa810008 	swi	r20, r1, 8
20040134:	12610000 	addk	r19, r1, r0
20040138:	96808000 	mfs	r20, rpc
2004013c:	b000dffc 	imm	-8196
20040140:	32941824 	addik	r20, r20, 6180
		decoder_texture_IQ_AC->read_inds[0] = index_AC;
20040144:	b0000000 	imm	0
20040148:	e8740c38 	lwi	r3, r20, 3128
2004014c:	e8630000 	lwi	r3, r3, 0
20040150:	e863000c 	lwi	r3, r3, 12
20040154:	b0000000 	imm	0
20040158:	e8940c50 	lwi	r4, r20, 3152
2004015c:	e8840000 	lwi	r4, r4, 0
20040160:	f8830000 	swi	r4, r3, 0
	}
20040164:	10330000 	addk	r1, r19, r0
20040168:	ea610004 	lwi	r19, r1, 4
2004016c:	ea810008 	lwi	r20, r1, 8
20040170:	3021000c 	addik	r1, r1, 12
20040174:	b60f0008 	rtsd	r15, 8
20040178:	80000000 	or	r0, r0, r0

2004017c <read_QP>:
	static void read_QP() {
2004017c:	3021ffdc 	addik	r1, r1, -36
20040180:	f9e10000 	swi	r15, r1, 0
20040184:	fa61001c 	swi	r19, r1, 28
20040188:	fa810020 	swi	r20, r1, 32
2004018c:	12610000 	addk	r19, r1, r0
20040190:	96808000 	mfs	r20, rpc
20040194:	b000dffc 	imm	-8196
20040198:	329417cc 	addik	r20, r20, 6092
		index_QP = decoder_texture_IQ_QP->read_inds[0];
2004019c:	b0000000 	imm	0
200401a0:	e8740c44 	lwi	r3, r20, 3140
200401a4:	e8630000 	lwi	r3, r3, 0
200401a8:	e863000c 	lwi	r3, r3, 12
200401ac:	e8830000 	lwi	r4, r3, 0
200401b0:	b0000000 	imm	0
200401b4:	e8740c58 	lwi	r3, r20, 3160
200401b8:	f8830000 	swi	r4, r3, 0
		numTokens_QP = index_QP + fifo_i8_get_num_tokens(decoder_texture_IQ_QP, 0);
200401bc:	b0000000 	imm	0
200401c0:	e8740c44 	lwi	r3, r20, 3140
200401c4:	e8630000 	lwi	r3, r3, 0
200401c8:	10a30000 	addk	r5, r3, r0
200401cc:	10c00000 	addk	r6, r0, r0
200401d0:	b0000000 	imm	0
200401d4:	e8940c2c 	lwi	r4, r20, 3116
200401d8:	99fc2000 	brald	r15, r4
200401dc:	80000000 	or	r0, r0, r0
200401e0:	10830000 	addk	r4, r3, r0
200401e4:	b0000000 	imm	0
200401e8:	e8740c58 	lwi	r3, r20, 3160
200401ec:	e8630000 	lwi	r3, r3, 0
200401f0:	10841800 	addk	r4, r4, r3
200401f4:	b0000000 	imm	0
200401f8:	e8740c5c 	lwi	r3, r20, 3164
200401fc:	f8830000 	swi	r4, r3, 0
	}
20040200:	e9e10000 	lwi	r15, r1, 0
20040204:	10330000 	addk	r1, r19, r0
20040208:	ea61001c 	lwi	r19, r1, 28
2004020c:	ea810020 	lwi	r20, r1, 32
20040210:	30210024 	addik	r1, r1, 36
20040214:	b60f0008 	rtsd	r15, 8
20040218:	80000000 	or	r0, r0, r0

2004021c <read_end_QP>:
	
	static void read_end_QP() {
2004021c:	3021fff4 	addik	r1, r1, -12
20040220:	fa610004 	swi	r19, r1, 4
20040224:	fa810008 	swi	r20, r1, 8
20040228:	12610000 	addk	r19, r1, r0
2004022c:	96808000 	mfs	r20, rpc
20040230:	b000dffc 	imm	-8196
20040234:	32941730 	addik	r20, r20, 5936
		decoder_texture_IQ_QP->read_inds[0] = index_QP;
20040238:	b0000000 	imm	0
2004023c:	e8740c44 	lwi	r3, r20, 3140
20040240:	e8630000 	lwi	r3, r3, 0
20040244:	e863000c 	lwi	r3, r3, 12
20040248:	b0000000 	imm	0
2004024c:	e8940c58 	lwi	r4, r20, 3160
20040250:	e8840000 	lwi	r4, r4, 0
20040254:	f8830000 	swi	r4, r3, 0
	}
20040258:	10330000 	addk	r1, r19, r0
2004025c:	ea610004 	lwi	r19, r1, 4
20040260:	ea810008 	lwi	r20, r1, 8
20040264:	3021000c 	addik	r1, r1, 12
20040268:	b60f0008 	rtsd	r15, 8
2004026c:	80000000 	or	r0, r0, r0

20040270 <write_OUT>:

	static void write_OUT() {
20040270:	3021ffdc 	addik	r1, r1, -36
20040274:	f9e10000 	swi	r15, r1, 0
20040278:	fa61001c 	swi	r19, r1, 28
2004027c:	fa810020 	swi	r20, r1, 32
20040280:	12610000 	addk	r19, r1, r0
20040284:	96808000 	mfs	r20, rpc
20040288:	b000dffc 	imm	-8196
2004028c:	329416d8 	addik	r20, r20, 5848
		index_OUT = (*decoder_texture_IQ_OUT->write_ind);
20040290:	b0000000 	imm	0
20040294:	e8740c3c 	lwi	r3, r20, 3132
20040298:	e8630000 	lwi	r3, r3, 0
2004029c:	e8630010 	lwi	r3, r3, 16
200402a0:	e8830000 	lwi	r4, r3, 0
200402a4:	b0000000 	imm	0
200402a8:	e8740c60 	lwi	r3, r20, 3168
200402ac:	f8830000 	swi	r4, r3, 0
		numFree_OUT = index_OUT + fifo_i16_get_room(decoder_texture_IQ_OUT, NUM_READERS_OUT);
200402b0:	b0000000 	imm	0
200402b4:	e8740c3c 	lwi	r3, r20, 3132
200402b8:	e8630000 	lwi	r3, r3, 0
200402bc:	10a30000 	addk	r5, r3, r0
200402c0:	30c00001 	addik	r6, r0, 1
200402c4:	b0000000 	imm	0
200402c8:	e8940c34 	lwi	r4, r20, 3124
200402cc:	99fc2000 	brald	r15, r4
200402d0:	80000000 	or	r0, r0, r0
200402d4:	10830000 	addk	r4, r3, r0
200402d8:	b0000000 	imm	0
200402dc:	e8740c60 	lwi	r3, r20, 3168
200402e0:	e8630000 	lwi	r3, r3, 0
200402e4:	10841800 	addk	r4, r4, r3
200402e8:	b0000000 	imm	0
200402ec:	e8740c64 	lwi	r3, r20, 3172
200402f0:	f8830000 	swi	r4, r3, 0
	}
200402f4:	e9e10000 	lwi	r15, r1, 0
200402f8:	10330000 	addk	r1, r19, r0
200402fc:	ea61001c 	lwi	r19, r1, 28
20040300:	ea810020 	lwi	r20, r1, 32
20040304:	30210024 	addik	r1, r1, 36
20040308:	b60f0008 	rtsd	r15, 8
2004030c:	80000000 	or	r0, r0, r0

20040310 <write_end_OUT>:
	
	static void write_end_OUT() {
20040310:	3021fff4 	addik	r1, r1, -12
20040314:	fa610004 	swi	r19, r1, 4
20040318:	fa810008 	swi	r20, r1, 8
2004031c:	12610000 	addk	r19, r1, r0
20040320:	96808000 	mfs	r20, rpc
20040324:	b000dffc 	imm	-8196
20040328:	3294163c 	addik	r20, r20, 5692
		(*decoder_texture_IQ_OUT->write_ind) = index_OUT;
2004032c:	b0000000 	imm	0
20040330:	e8740c3c 	lwi	r3, r20, 3132
20040334:	e8630000 	lwi	r3, r3, 0
20040338:	e8630010 	lwi	r3, r3, 16
2004033c:	b0000000 	imm	0
20040340:	e8940c60 	lwi	r4, r20, 3168
20040344:	e8840000 	lwi	r4, r4, 0
20040348:	f8830000 	swi	r4, r3, 0
	}
2004034c:	10330000 	addk	r1, r19, r0
20040350:	ea610004 	lwi	r19, r1, 4
20040354:	ea810008 	lwi	r20, r1, 8
20040358:	3021000c 	addik	r1, r1, 12
2004035c:	b60f0008 	rtsd	r15, 8
20040360:	80000000 	or	r0, r0, r0

20040364 <Math_abs>:
	////////////////////////////////////////////////////////////////////////////////
	// Functions/procedures
	static i32 Math_abs(i32 x);
	static i32 saturate(i32 x);

	static i32 Math_abs(i32 x) {
20040364:	3021fff0 	addik	r1, r1, -16
20040368:	fa610008 	swi	r19, r1, 8
2004036c:	fa81000c 	swi	r20, r1, 12
20040370:	12610000 	addk	r19, r1, r0
20040374:	96808000 	mfs	r20, rpc
20040378:	b000dffc 	imm	-8196
2004037c:	329415e8 	addik	r20, r20, 5608
20040380:	f8b30014 	swi	r5, r19, 20
		i32 tmp_if;
	
		if (x > 0) {
20040384:	e8730014 	lwi	r3, r19, 20
20040388:	bc630010 	blei	r3, 16		// 20040398
			tmp_if = x;
2004038c:	e8730014 	lwi	r3, r19, 20
20040390:	f8730004 	swi	r3, r19, 4
20040394:	b8000010 	bri	16		// 200403a4
		} else {
			tmp_if = -x;
20040398:	e8730014 	lwi	r3, r19, 20
2004039c:	14630000 	rsubk	r3, r3, r0
200403a0:	f8730004 	swi	r3, r19, 4
		}
		return tmp_if;
200403a4:	e8730004 	lwi	r3, r19, 4
	}
200403a8:	10330000 	addk	r1, r19, r0
200403ac:	ea610008 	lwi	r19, r1, 8
200403b0:	ea81000c 	lwi	r20, r1, 12
200403b4:	30210010 	addik	r1, r1, 16
200403b8:	b60f0008 	rtsd	r15, 8
200403bc:	80000000 	or	r0, r0, r0

200403c0 <saturate>:
	static i32 saturate(i32 x) {
200403c0:	3021ffe8 	addik	r1, r1, -24
200403c4:	fa610010 	swi	r19, r1, 16
200403c8:	fa810014 	swi	r20, r1, 20
200403cc:	12610000 	addk	r19, r1, r0
200403d0:	96808000 	mfs	r20, rpc
200403d4:	b000dffc 	imm	-8196
200403d8:	3294158c 	addik	r20, r20, 5516
200403dc:	f8b3001c 	swi	r5, r19, 28
		i32 minus;
		i32 plus;
		i32 tmp_if;
	
		minus = x < -2048;
200403e0:	30600001 	addik	r3, r0, 1
200403e4:	e8b3001c 	lwi	r5, r19, 28
200403e8:	3080f800 	addik	r4, r0, -2048
200403ec:	16442801 	cmp	r18, r4, r5
200403f0:	bc520008 	blti	r18, 8		// 200403f8
200403f4:	10600000 	addk	r3, r0, r0
200403f8:	a46300ff 	andi	r3, r3, 255
200403fc:	f8730008 	swi	r3, r19, 8
		plus = x > 2047;
20040400:	30600001 	addik	r3, r0, 1
20040404:	e8b3001c 	lwi	r5, r19, 28
20040408:	308007ff 	addik	r4, r0, 2047
2004040c:	16452001 	cmp	r18, r5, r4
20040410:	bc520008 	blti	r18, 8		// 20040418
20040414:	10600000 	addk	r3, r0, r0
20040418:	a46300ff 	andi	r3, r3, 255
2004041c:	f873000c 	swi	r3, r19, 12
		if (minus) {
20040420:	e8730008 	lwi	r3, r19, 8
20040424:	bc030010 	beqi	r3, 16		// 20040434
			tmp_if = -2048;
20040428:	3060f800 	addik	r3, r0, -2048
2004042c:	f8730004 	swi	r3, r19, 4
20040430:	b8000020 	bri	32		// 20040450
		} else {
			if (plus) {
20040434:	e873000c 	lwi	r3, r19, 12
20040438:	bc030010 	beqi	r3, 16		// 20040448
				tmp_if = 2047;
2004043c:	306007ff 	addik	r3, r0, 2047
20040440:	f8730004 	swi	r3, r19, 4
20040444:	b800000c 	bri	12		// 20040450
			} else {
				tmp_if = x;
20040448:	e873001c 	lwi	r3, r19, 28
2004044c:	f8730004 	swi	r3, r19, 4
			}
		}
		return tmp_if;
20040450:	e8730004 	lwi	r3, r19, 4
	}
20040454:	10330000 	addk	r1, r19, r0
20040458:	ea610010 	lwi	r19, r1, 16
2004045c:	ea810014 	lwi	r20, r1, 20
20040460:	30210018 	addik	r1, r1, 24
20040464:	b60f0008 	rtsd	r15, 8
20040468:	80000000 	or	r0, r0, r0

2004046c <isSchedulable_get_qp>:

	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_get_qp() {
2004046c:	3021fff0 	addik	r1, r1, -16
20040470:	fa610008 	swi	r19, r1, 8
20040474:	fa81000c 	swi	r20, r1, 12
20040478:	12610000 	addk	r19, r1, r0
2004047c:	96808000 	mfs	r20, rpc
20040480:	b000dffc 	imm	-8196
20040484:	329414e0 	addik	r20, r20, 5344
		i32 result;
	
		result = 1;
20040488:	30600001 	addik	r3, r0, 1
2004048c:	f8730004 	swi	r3, r19, 4
		return result;
20040490:	e8730004 	lwi	r3, r19, 4
	}
20040494:	10330000 	addk	r1, r19, r0
20040498:	ea610008 	lwi	r19, r1, 8
2004049c:	ea81000c 	lwi	r20, r1, 12
200404a0:	30210010 	addik	r1, r1, 16
200404a4:	b60f0008 	rtsd	r15, 8
200404a8:	80000000 	or	r0, r0, r0

200404ac <get_qp>:
	
	static void get_qp() {
200404ac:	3021ffcc 	addik	r1, r1, -52
200404b0:	f9e10000 	swi	r15, r1, 0
200404b4:	fa61002c 	swi	r19, r1, 44
200404b8:	fa810030 	swi	r20, r1, 48
200404bc:	12610000 	addk	r19, r1, r0
200404c0:	96808000 	mfs	r20, rpc
200404c4:	b000dffc 	imm	-8196
200404c8:	3294149c 	addik	r20, r20, 5276
	
		// Compute aligned port indexes
		i32 index_aligned_QP = index_QP % SIZE_QP;
200404cc:	b0000000 	imm	0
200404d0:	e8740c58 	lwi	r3, r20, 3160
200404d4:	e8630000 	lwi	r3, r3, 0
200404d8:	a46301ff 	andi	r3, r3, 511
200404dc:	f873001c 	swi	r3, r19, 28
		i32 index_aligned_DC = index_DC % SIZE_DC;
200404e0:	b0000000 	imm	0
200404e4:	e8740c48 	lwi	r3, r20, 3144
200404e8:	e8630000 	lwi	r3, r3, 0
200404ec:	a46301ff 	andi	r3, r3, 511
200404f0:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_OUT = index_OUT % SIZE_OUT;
200404f4:	b0000000 	imm	0
200404f8:	e8740c60 	lwi	r3, r20, 3168
200404fc:	e8630000 	lwi	r3, r3, 0
20040500:	a46301ff 	andi	r3, r3, 511
20040504:	f8730024 	swi	r3, r19, 36
	
		i8 q;
		i16 i;
	
		q = tokens_QP[(index_QP + (0)) % SIZE_QP];
20040508:	b0000000 	imm	0
2004050c:	e8740c44 	lwi	r3, r20, 3140
20040510:	e8630000 	lwi	r3, r3, 0
20040514:	e8830004 	lwi	r4, r3, 4
20040518:	b0000000 	imm	0
2004051c:	e8740c58 	lwi	r3, r20, 3160
20040520:	e8630000 	lwi	r3, r3, 0
20040524:	a46301ff 	andi	r3, r3, 511
20040528:	10641800 	addk	r3, r4, r3
2004052c:	e0630000 	lbui	r3, r3, 0
20040530:	f0730028 	sbi	r3, r19, 40
		i = tokens_DC[(index_DC + (0)) % SIZE_DC];
20040534:	b0000000 	imm	0
20040538:	e8740c40 	lwi	r3, r20, 3136
2004053c:	e8630000 	lwi	r3, r3, 0
20040540:	e8830004 	lwi	r4, r3, 4
20040544:	b0000000 	imm	0
20040548:	e8740c48 	lwi	r3, r20, 3144
2004054c:	e8630000 	lwi	r3, r3, 0
20040550:	a46301ff 	andi	r3, r3, 511
20040554:	10631800 	addk	r3, r3, r3
20040558:	10641800 	addk	r3, r4, r3
2004055c:	e4630000 	lhui	r3, r3, 0
20040560:	f473002a 	shi	r3, r19, 42
		quant = q;
20040564:	b0000000 	imm	0
20040568:	e8740c68 	lwi	r3, r20, 3176
2004056c:	e0930028 	lbui	r4, r19, 40
20040570:	f0830000 	sbi	r4, r3, 0
		round = q & 1 ^ 1;
20040574:	e0730028 	lbui	r3, r19, 40
20040578:	a4830001 	andi	r4, r3, 1
2004057c:	10600000 	addk	r3, r0, r0
20040580:	88641c00 	pcmpeq	r3, r4, r3
20040584:	a46300ff 	andi	r3, r3, 255
20040588:	90830060 	sext8	r4, r3
2004058c:	b0000000 	imm	0
20040590:	e8740c6c 	lwi	r3, r20, 3180
20040594:	f0830000 	sbi	r4, r3, 0
		tokens_OUT[(index_OUT + (0)) % SIZE_OUT] = i;
20040598:	b0000000 	imm	0
2004059c:	e8740c3c 	lwi	r3, r20, 3132
200405a0:	e8630000 	lwi	r3, r3, 0
200405a4:	e8830004 	lwi	r4, r3, 4
200405a8:	b0000000 	imm	0
200405ac:	e8740c60 	lwi	r3, r20, 3168
200405b0:	e8630000 	lwi	r3, r3, 0
200405b4:	a46301ff 	andi	r3, r3, 511
200405b8:	10631800 	addk	r3, r3, r3
200405bc:	10641800 	addk	r3, r4, r3
200405c0:	e493002a 	lhui	r4, r19, 42
200405c4:	f4830000 	shi	r4, r3, 0
	
		// Update ports indexes
		index_QP += 1;
200405c8:	b0000000 	imm	0
200405cc:	e8740c58 	lwi	r3, r20, 3160
200405d0:	e8630000 	lwi	r3, r3, 0
200405d4:	30830001 	addik	r4, r3, 1
200405d8:	b0000000 	imm	0
200405dc:	e8740c58 	lwi	r3, r20, 3160
200405e0:	f8830000 	swi	r4, r3, 0
		index_DC += 1;
200405e4:	b0000000 	imm	0
200405e8:	e8740c48 	lwi	r3, r20, 3144
200405ec:	e8630000 	lwi	r3, r3, 0
200405f0:	30830001 	addik	r4, r3, 1
200405f4:	b0000000 	imm	0
200405f8:	e8740c48 	lwi	r3, r20, 3144
200405fc:	f8830000 	swi	r4, r3, 0
		index_OUT += 1;
20040600:	b0000000 	imm	0
20040604:	e8740c60 	lwi	r3, r20, 3168
20040608:	e8630000 	lwi	r3, r3, 0
2004060c:	30830001 	addik	r4, r3, 1
20040610:	b0000000 	imm	0
20040614:	e8740c60 	lwi	r3, r20, 3168
20040618:	f8830000 	swi	r4, r3, 0
		
		read_end_QP();
2004061c:	b0000000 	imm	0
20040620:	e8740c8c 	lwi	r3, r20, 3212
20040624:	99fc1800 	brald	r15, r3
20040628:	80000000 	or	r0, r0, r0
		read_end_DC();
2004062c:	b0000000 	imm	0
20040630:	e8740c7c 	lwi	r3, r20, 3196
20040634:	99fc1800 	brald	r15, r3
20040638:	80000000 	or	r0, r0, r0
		write_end_OUT();
2004063c:	b0000000 	imm	0
20040640:	e8740c94 	lwi	r3, r20, 3220
20040644:	99fc1800 	brald	r15, r3
20040648:	80000000 	or	r0, r0, r0
	}
2004064c:	e9e10000 	lwi	r15, r1, 0
20040650:	10330000 	addk	r1, r19, r0
20040654:	ea61002c 	lwi	r19, r1, 44
20040658:	ea810030 	lwi	r20, r1, 48
2004065c:	30210034 	addik	r1, r1, 52
20040660:	b60f0008 	rtsd	r15, 8
20040664:	80000000 	or	r0, r0, r0

20040668 <isSchedulable_ac>:
	static i32 isSchedulable_ac() {
20040668:	3021fff0 	addik	r1, r1, -16
2004066c:	fa610008 	swi	r19, r1, 8
20040670:	fa81000c 	swi	r20, r1, 12
20040674:	12610000 	addk	r19, r1, r0
20040678:	96808000 	mfs	r20, rpc
2004067c:	b000dffc 	imm	-8196
20040680:	329412e4 	addik	r20, r20, 4836
		i32 result;
	
		result = 1;
20040684:	30600001 	addik	r3, r0, 1
20040688:	f8730004 	swi	r3, r19, 4
		return result;
2004068c:	e8730004 	lwi	r3, r19, 4
	}
20040690:	10330000 	addk	r1, r19, r0
20040694:	ea610008 	lwi	r19, r1, 8
20040698:	ea81000c 	lwi	r20, r1, 12
2004069c:	30210010 	addik	r1, r1, 16
200406a0:	b60f0008 	rtsd	r15, 8
200406a4:	80000000 	or	r0, r0, r0

200406a8 <ac>:
	
	static void ac() {
200406a8:	3021ffbc 	addik	r1, r1, -68
200406ac:	f9e10000 	swi	r15, r1, 0
200406b0:	fa61003c 	swi	r19, r1, 60
200406b4:	fa810040 	swi	r20, r1, 64
200406b8:	12610000 	addk	r19, r1, r0
200406bc:	96808000 	mfs	r20, rpc
200406c0:	b000dffc 	imm	-8196
200406c4:	329412a0 	addik	r20, r20, 4768
	
		// Compute aligned port indexes
		i32 index_aligned_AC = index_AC % SIZE_AC;
200406c8:	b0000000 	imm	0
200406cc:	e8740c50 	lwi	r3, r20, 3152
200406d0:	e8630000 	lwi	r3, r3, 0
200406d4:	a46301ff 	andi	r3, r3, 511
200406d8:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_OUT = index_OUT % SIZE_OUT;
200406dc:	b0000000 	imm	0
200406e0:	e8740c60 	lwi	r3, r20, 3168
200406e4:	e8630000 	lwi	r3, r3, 0
200406e8:	a46301ff 	andi	r3, r3, 511
200406ec:	f8730024 	swi	r3, r19, 36
		i32 tmp_abs;
		i8 local_round;
		i32 tmp_saturate;
		i32 tmp_saturate0;
	
		j = 0;
200406f0:	f813001c 	swi	r0, r19, 28
		while (j <= 62) {
200406f4:	b80001e8 	bri	488		// 200408dc
			ac_i = tokens_AC[(index_AC + (j)) % SIZE_AC];
200406f8:	b0000000 	imm	0
200406fc:	e8740c38 	lwi	r3, r20, 3128
20040700:	e8630000 	lwi	r3, r3, 0
20040704:	e8830004 	lwi	r4, r3, 4
20040708:	b0000000 	imm	0
2004070c:	e8740c50 	lwi	r3, r20, 3152
20040710:	e8a30000 	lwi	r5, r3, 0
20040714:	e873001c 	lwi	r3, r19, 28
20040718:	10651800 	addk	r3, r5, r3
2004071c:	a46301ff 	andi	r3, r3, 511
20040720:	10631800 	addk	r3, r3, r3
20040724:	10641800 	addk	r3, r4, r3
20040728:	e4630000 	lhui	r3, r3, 0
2004072c:	f4730028 	shi	r3, r19, 40
			local_quant = quant;
20040730:	b0000000 	imm	0
20040734:	e8740c68 	lwi	r3, r20, 3176
20040738:	e0630000 	lbui	r3, r3, 0
2004073c:	f073002a 	sbi	r3, r19, 42
			tmp_abs = Math_abs(ac_i);
20040740:	e4730028 	lhui	r3, r19, 40
20040744:	90630061 	sext16	r3, r3
20040748:	10a30000 	addk	r5, r3, r0
2004074c:	b0000000 	imm	0
20040750:	e8940c98 	lwi	r4, r20, 3224
20040754:	99fc2000 	brald	r15, r4
20040758:	80000000 	or	r0, r0, r0
2004075c:	f873002c 	swi	r3, r19, 44
			local_round = round;
20040760:	b0000000 	imm	0
20040764:	e8740c6c 	lwi	r3, r20, 3180
20040768:	e0630000 	lbui	r3, r3, 0
2004076c:	f0730030 	sbi	r3, r19, 48
			iq = local_quant * ((tmp_abs << 1) + 1) - local_round;
20040770:	e073002a 	lbui	r3, r19, 42
20040774:	90630060 	sext8	r3, r3
20040778:	b0000000 	imm	0
2004077c:	a483ffff 	andi	r4, r3, -1
20040780:	e873002c 	lwi	r3, r19, 44
20040784:	10631800 	addk	r3, r3, r3
20040788:	30630001 	addik	r3, r3, 1
2004078c:	b0000000 	imm	0
20040790:	a463ffff 	andi	r3, r3, -1
20040794:	40641800 	mul	r3, r4, r3
20040798:	b0000000 	imm	0
2004079c:	a483ffff 	andi	r4, r3, -1
200407a0:	e0730030 	lbui	r3, r19, 48
200407a4:	90630060 	sext8	r3, r3
200407a8:	b0000000 	imm	0
200407ac:	a463ffff 	andi	r3, r3, -1
200407b0:	14632000 	rsubk	r3, r3, r4
200407b4:	b0000000 	imm	0
200407b8:	a463ffff 	andi	r3, r3, -1
200407bc:	f4730032 	shi	r3, r19, 50
			if (ac_i == 0) {
200407c0:	e4730028 	lhui	r3, r19, 40
200407c4:	90630061 	sext16	r3, r3
200407c8:	bc23003c 	bnei	r3, 60		// 20040804
				tokens_OUT[(index_OUT + (j)) % SIZE_OUT] = 0;
200407cc:	b0000000 	imm	0
200407d0:	e8740c3c 	lwi	r3, r20, 3132
200407d4:	e8630000 	lwi	r3, r3, 0
200407d8:	e8830004 	lwi	r4, r3, 4
200407dc:	b0000000 	imm	0
200407e0:	e8740c60 	lwi	r3, r20, 3168
200407e4:	e8a30000 	lwi	r5, r3, 0
200407e8:	e873001c 	lwi	r3, r19, 28
200407ec:	10651800 	addk	r3, r5, r3
200407f0:	a46301ff 	andi	r3, r3, 511
200407f4:	10631800 	addk	r3, r3, r3
200407f8:	10641800 	addk	r3, r4, r3
200407fc:	f4030000 	shi	r0, r3, 0
20040800:	b80000d0 	bri	208		// 200408d0
			} else {
				if (ac_i < 0) {
20040804:	e4730028 	lhui	r3, r19, 40
20040808:	90630061 	sext16	r3, r3
2004080c:	bca30068 	bgei	r3, 104		// 20040874
					tmp_saturate = saturate(-iq);
20040810:	e4730032 	lhui	r3, r19, 50
20040814:	90630061 	sext16	r3, r3
20040818:	14630000 	rsubk	r3, r3, r0
2004081c:	10a30000 	addk	r5, r3, r0
20040820:	b0000000 	imm	0
20040824:	e8940c9c 	lwi	r4, r20, 3228
20040828:	99fc2000 	brald	r15, r4
2004082c:	80000000 	or	r0, r0, r0
20040830:	f8730034 	swi	r3, r19, 52
					tokens_OUT[(index_OUT + (j)) % SIZE_OUT] = tmp_saturate;
20040834:	b0000000 	imm	0
20040838:	e8740c3c 	lwi	r3, r20, 3132
2004083c:	e8630000 	lwi	r3, r3, 0
20040840:	e8830004 	lwi	r4, r3, 4
20040844:	b0000000 	imm	0
20040848:	e8740c60 	lwi	r3, r20, 3168
2004084c:	e8a30000 	lwi	r5, r3, 0
20040850:	e873001c 	lwi	r3, r19, 28
20040854:	10651800 	addk	r3, r5, r3
20040858:	a46301ff 	andi	r3, r3, 511
2004085c:	10631800 	addk	r3, r3, r3
20040860:	10641800 	addk	r3, r4, r3
20040864:	e8930034 	lwi	r4, r19, 52
20040868:	90840061 	sext16	r4, r4
2004086c:	f4830000 	shi	r4, r3, 0
20040870:	b8000060 	bri	96		// 200408d0
				} else {
					tmp_saturate0 = saturate(iq);
20040874:	e4730032 	lhui	r3, r19, 50
20040878:	90630061 	sext16	r3, r3
2004087c:	10a30000 	addk	r5, r3, r0
20040880:	b0000000 	imm	0
20040884:	e8940c9c 	lwi	r4, r20, 3228
20040888:	99fc2000 	brald	r15, r4
2004088c:	80000000 	or	r0, r0, r0
20040890:	f8730038 	swi	r3, r19, 56
					tokens_OUT[(index_OUT + (j)) % SIZE_OUT] = tmp_saturate0;
20040894:	b0000000 	imm	0
20040898:	e8740c3c 	lwi	r3, r20, 3132
2004089c:	e8630000 	lwi	r3, r3, 0
200408a0:	e8830004 	lwi	r4, r3, 4
200408a4:	b0000000 	imm	0
200408a8:	e8740c60 	lwi	r3, r20, 3168
200408ac:	e8a30000 	lwi	r5, r3, 0
200408b0:	e873001c 	lwi	r3, r19, 28
200408b4:	10651800 	addk	r3, r5, r3
200408b8:	a46301ff 	andi	r3, r3, 511
200408bc:	10631800 	addk	r3, r3, r3
200408c0:	10641800 	addk	r3, r4, r3
200408c4:	e8930038 	lwi	r4, r19, 56
200408c8:	90840061 	sext16	r4, r4
200408cc:	f4830000 	shi	r4, r3, 0
				}
			}
			j = j + 1;
200408d0:	e873001c 	lwi	r3, r19, 28
200408d4:	30630001 	addik	r3, r3, 1
200408d8:	f873001c 	swi	r3, r19, 28
		i8 local_round;
		i32 tmp_saturate;
		i32 tmp_saturate0;
	
		j = 0;
		while (j <= 62) {
200408dc:	e893001c 	lwi	r4, r19, 28
200408e0:	3060003e 	addik	r3, r0, 62
200408e4:	16441801 	cmp	r18, r4, r3
200408e8:	bcb2fe10 	bgei	r18, -496		// 200406f8
			}
			j = j + 1;
		}
	
		// Update ports indexes
		index_AC += 63;
200408ec:	b0000000 	imm	0
200408f0:	e8740c50 	lwi	r3, r20, 3152
200408f4:	e8630000 	lwi	r3, r3, 0
200408f8:	3083003f 	addik	r4, r3, 63
200408fc:	b0000000 	imm	0
20040900:	e8740c50 	lwi	r3, r20, 3152
20040904:	f8830000 	swi	r4, r3, 0
		index_OUT += 63;
20040908:	b0000000 	imm	0
2004090c:	e8740c60 	lwi	r3, r20, 3168
20040910:	e8630000 	lwi	r3, r3, 0
20040914:	3083003f 	addik	r4, r3, 63
20040918:	b0000000 	imm	0
2004091c:	e8740c60 	lwi	r3, r20, 3168
20040920:	f8830000 	swi	r4, r3, 0
		
		read_end_AC();
20040924:	b0000000 	imm	0
20040928:	e8740c84 	lwi	r3, r20, 3204
2004092c:	99fc1800 	brald	r15, r3
20040930:	80000000 	or	r0, r0, r0
		write_end_OUT();
20040934:	b0000000 	imm	0
20040938:	e8940c94 	lwi	r4, r20, 3220
2004093c:	99fc2000 	brald	r15, r4
20040940:	80000000 	or	r0, r0, r0
	}
20040944:	e9e10000 	lwi	r15, r1, 0
20040948:	10330000 	addk	r1, r19, r0
2004094c:	ea61003c 	lwi	r19, r1, 60
20040950:	ea810040 	lwi	r20, r1, 64
20040954:	30210044 	addik	r1, r1, 68
20040958:	b60f0008 	rtsd	r15, 8
2004095c:	80000000 	or	r0, r0, r0

20040960 <decoder_texture_IQ_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_texture_IQ_initialize() {
20040960:	3021fff0 	addik	r1, r1, -16
20040964:	fa610008 	swi	r19, r1, 8
20040968:	fa81000c 	swi	r20, r1, 12
2004096c:	12610000 	addk	r19, r1, r0
20040970:	96808000 	mfs	r20, rpc
20040974:	b000dffc 	imm	-8196
20040978:	32940fec 	addik	r20, r20, 4076
		int i = 0;
2004097c:	f8130004 	swi	r0, r19, 4
		/* Set initial state to current FSM state */
		_FSM_state = my_state_start;
20040980:	b0000000 	imm	0
20040984:	e8740c74 	lwi	r3, r20, 3188
20040988:	30800001 	addik	r4, r0, 1
2004098c:	f8830000 	swi	r4, r3, 0
		
	finished:
		// no read_end/write_end here!
		return;
20040990:	80000000 	or	r0, r0, r0
	}
20040994:	10330000 	addk	r1, r19, r0
20040998:	ea610008 	lwi	r19, r1, 8
2004099c:	ea81000c 	lwi	r20, r1, 12
200409a0:	30210010 	addik	r1, r1, 16
200409a4:	b60f0008 	rtsd	r15, 8
200409a8:	80000000 	or	r0, r0, r0

200409ac <decoder_texture_IQ_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	
	int decoder_texture_IQ_scheduler() {
200409ac:	3021ffd0 	addik	r1, r1, -48
200409b0:	f9e10000 	swi	r15, r1, 0
200409b4:	fa610028 	swi	r19, r1, 40
200409b8:	fa81002c 	swi	r20, r1, 44
200409bc:	12610000 	addk	r19, r1, r0
200409c0:	96808000 	mfs	r20, rpc
200409c4:	b000dffc 	imm	-8196
200409c8:	32940f9c 	addik	r20, r20, 3996
		int i = 0;
200409cc:	f813001c 	swi	r0, r19, 28
		if(needInit){
200409d0:	b0000000 	imm	0
200409d4:	e8740c70 	lwi	r3, r20, 3184
200409d8:	e0630000 	lbui	r3, r3, 0
200409dc:	bc03001c 	beqi	r3, 28		// 200409f8
			decoder_texture_IQ_initialize();
200409e0:	b000ffff 	imm	-1
200409e4:	b9f4ff7c 	brlid	r15, -132	// 20040960 <decoder_texture_IQ_initialize>
200409e8:	80000000 	or	r0, r0, r0
			needInit = 0;
200409ec:	b0000000 	imm	0
200409f0:	e8740c70 	lwi	r3, r20, 3184
200409f4:	f0030000 	sbi	r0, r3, 0
		}
	
		read_DC();
200409f8:	b0000000 	imm	0
200409fc:	e8740c78 	lwi	r3, r20, 3192
20040a00:	99fc1800 	brald	r15, r3
20040a04:	80000000 	or	r0, r0, r0
		read_AC();
20040a08:	b0000000 	imm	0
20040a0c:	e8940c80 	lwi	r4, r20, 3200
20040a10:	99fc2000 	brald	r15, r4
20040a14:	80000000 	or	r0, r0, r0
		read_QP();
20040a18:	b0000000 	imm	0
20040a1c:	e8740c88 	lwi	r3, r20, 3208
20040a20:	99fc1800 	brald	r15, r3
20040a24:	80000000 	or	r0, r0, r0
		write_OUT();
20040a28:	b0000000 	imm	0
20040a2c:	e8940c90 	lwi	r4, r20, 3216
20040a30:	99fc2000 	brald	r15, r4
20040a34:	80000000 	or	r0, r0, r0
			
	
		
		// jump to FSM state 
		switch (_FSM_state) {
20040a38:	b0000000 	imm	0
20040a3c:	e8740c74 	lwi	r3, r20, 3188
20040a40:	e8630000 	lwi	r3, r3, 0
20040a44:	bc03001c 	beqi	r3, 28		// 20040a60
20040a48:	a8630001 	xori	r3, r3, 1
20040a4c:	bc0300dc 	beqi	r3, 220		// 20040b28
		case my_state_ac:
			goto l_ac;
		case my_state_start:
			goto l_start;
		default:
			exit(1);
20040a50:	30a00001 	addik	r5, r0, 1
20040a54:	b000dffb 	imm	-8197
20040a58:	b9f4f940 	brlid	r15, -1728	// 398 <exit>
20040a5c:	80000000 	or	r0, r0, r0
	
		
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_ac:
			goto l_ac;
20040a60:	80000000 	or	r0, r0, r0
			exit(1);
		}
	
		// FSM transitions
		l_ac:
			if (numTokens_AC - index_AC >= 63 && isSchedulable_ac()) {
20040a64:	b0000000 	imm	0
20040a68:	e8740c54 	lwi	r3, r20, 3156
20040a6c:	e8830000 	lwi	r4, r3, 0
20040a70:	b0000000 	imm	0
20040a74:	e8740c50 	lwi	r3, r20, 3152
20040a78:	e8630000 	lwi	r3, r3, 0
20040a7c:	14832000 	rsubk	r4, r3, r4
20040a80:	3060003e 	addik	r3, r0, 62
20040a84:	16441803 	cmpu	r18, r4, r3
20040a88:	bcb20090 	bgei	r18, 144		// 20040b18
20040a8c:	b0000000 	imm	0
20040a90:	e8940ca8 	lwi	r4, r20, 3240
20040a94:	99fc2000 	brald	r15, r4
20040a98:	80000000 	or	r0, r0, r0
20040a9c:	bc03007c 	beqi	r3, 124		// 20040b18
				int stop = 0;
20040aa0:	f8130020 	swi	r0, r19, 32
				if (63 > SIZE_OUT - index_OUT + decoder_texture_IQ_OUT->read_inds[0]) {
20040aa4:	b0000000 	imm	0
20040aa8:	e8740c3c 	lwi	r3, r20, 3132
20040aac:	e8630000 	lwi	r3, r3, 0
20040ab0:	e863000c 	lwi	r3, r3, 12
20040ab4:	e8830000 	lwi	r4, r3, 0
20040ab8:	b0000000 	imm	0
20040abc:	e8740c60 	lwi	r3, r20, 3168
20040ac0:	e8630000 	lwi	r3, r3, 0
20040ac4:	14632000 	rsubk	r3, r3, r4
20040ac8:	30830200 	addik	r4, r3, 512
20040acc:	3060003e 	addik	r3, r0, 62
20040ad0:	16441803 	cmpu	r18, r4, r3
20040ad4:	bc52000c 	blti	r18, 12		// 20040ae0
					stop = 1;
20040ad8:	30600001 	addik	r3, r0, 1
20040adc:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
20040ae0:	e8730020 	lwi	r3, r19, 32
20040ae4:	bc030014 	beqi	r3, 20		// 20040af8
					_FSM_state = my_state_ac;
20040ae8:	b0000000 	imm	0
20040aec:	e8740c74 	lwi	r3, r20, 3188
20040af0:	f8030000 	swi	r0, r3, 0
					goto finished;
20040af4:	b8000114 	bri	276		// 20040c08
				}
				ac();
20040af8:	b0000000 	imm	0
20040afc:	e8740cac 	lwi	r3, r20, 3244
20040b00:	99fc1800 	brald	r15, r3
20040b04:	80000000 	or	r0, r0, r0
				i++;
20040b08:	e873001c 	lwi	r3, r19, 28
20040b0c:	30630001 	addik	r3, r3, 1
20040b10:	f873001c 	swi	r3, r19, 28
				goto l_start;
20040b14:	b8000018 	bri	24		// 20040b2c
			} else {
				_FSM_state = my_state_ac;
20040b18:	b0000000 	imm	0
20040b1c:	e8740c74 	lwi	r3, r20, 3188
20040b20:	f8030000 	swi	r0, r3, 0
				goto finished;
20040b24:	b80000e4 	bri	228		// 20040c08
		// jump to FSM state 
		switch (_FSM_state) {
		case my_state_ac:
			goto l_ac;
		case my_state_start:
			goto l_start;
20040b28:	80000000 	or	r0, r0, r0
			} else {
				_FSM_state = my_state_ac;
				goto finished;
			}
		l_start:
			if (numTokens_QP - index_QP >= 1 && numTokens_DC - index_DC >= 1 && isSchedulable_get_qp()) {
20040b2c:	b0000000 	imm	0
20040b30:	e8740c5c 	lwi	r3, r20, 3164
20040b34:	e8830000 	lwi	r4, r3, 0
20040b38:	b0000000 	imm	0
20040b3c:	e8740c58 	lwi	r3, r20, 3160
20040b40:	e8630000 	lwi	r3, r3, 0
20040b44:	88641800 	xor	r3, r4, r3
20040b48:	bc0300ac 	beqi	r3, 172		// 20040bf4
20040b4c:	b0000000 	imm	0
20040b50:	e8740c4c 	lwi	r3, r20, 3148
20040b54:	e8830000 	lwi	r4, r3, 0
20040b58:	b0000000 	imm	0
20040b5c:	e8740c48 	lwi	r3, r20, 3144
20040b60:	e8630000 	lwi	r3, r3, 0
20040b64:	88641800 	xor	r3, r4, r3
20040b68:	bc03008c 	beqi	r3, 140		// 20040bf4
20040b6c:	b0000000 	imm	0
20040b70:	e8940ca0 	lwi	r4, r20, 3232
20040b74:	99fc2000 	brald	r15, r4
20040b78:	80000000 	or	r0, r0, r0
20040b7c:	bc030078 	beqi	r3, 120		// 20040bf4
				int stop = 0;
20040b80:	f8130024 	swi	r0, r19, 36
				if (1 > SIZE_OUT - index_OUT + decoder_texture_IQ_OUT->read_inds[0]) {
20040b84:	b0000000 	imm	0
20040b88:	e8740c3c 	lwi	r3, r20, 3132
20040b8c:	e8630000 	lwi	r3, r3, 0
20040b90:	e863000c 	lwi	r3, r3, 12
20040b94:	e8830000 	lwi	r4, r3, 0
20040b98:	b0000000 	imm	0
20040b9c:	e8740c60 	lwi	r3, r20, 3168
20040ba0:	e8630000 	lwi	r3, r3, 0
20040ba4:	14632000 	rsubk	r3, r3, r4
20040ba8:	a863fe00 	xori	r3, r3, -512
20040bac:	bc23000c 	bnei	r3, 12		// 20040bb8
					stop = 1;
20040bb0:	30600001 	addik	r3, r0, 1
20040bb4:	f8730024 	swi	r3, r19, 36
				}
				if (stop != 0) {
20040bb8:	e8730024 	lwi	r3, r19, 36
20040bbc:	bc030018 	beqi	r3, 24		// 20040bd4
					_FSM_state = my_state_start;
20040bc0:	b0000000 	imm	0
20040bc4:	e8740c74 	lwi	r3, r20, 3188
20040bc8:	30800001 	addik	r4, r0, 1
20040bcc:	f8830000 	swi	r4, r3, 0
					goto finished;
20040bd0:	b8000038 	bri	56		// 20040c08
				}
				get_qp();
20040bd4:	b0000000 	imm	0
20040bd8:	e8740ca4 	lwi	r3, r20, 3236
20040bdc:	99fc1800 	brald	r15, r3
20040be0:	80000000 	or	r0, r0, r0
				i++;
20040be4:	e873001c 	lwi	r3, r19, 28
20040be8:	30630001 	addik	r3, r3, 1
20040bec:	f873001c 	swi	r3, r19, 28
				goto l_ac;
20040bf0:	b800fe74 	bri	-396		// 20040a64
			} else {
				_FSM_state = my_state_start;
20040bf4:	b0000000 	imm	0
20040bf8:	e8740c74 	lwi	r3, r20, 3188
20040bfc:	30800001 	addik	r4, r0, 1
20040c00:	f8830000 	swi	r4, r3, 0
				goto finished;
20040c04:	80000000 	or	r0, r0, r0
			}
	finished:
		
		read_end_DC();
20040c08:	b0000000 	imm	0
20040c0c:	e8940c7c 	lwi	r4, r20, 3196
20040c10:	99fc2000 	brald	r15, r4
20040c14:	80000000 	or	r0, r0, r0
		read_end_AC();
20040c18:	b0000000 	imm	0
20040c1c:	e8740c84 	lwi	r3, r20, 3204
20040c20:	99fc1800 	brald	r15, r3
20040c24:	80000000 	or	r0, r0, r0
		read_end_QP();
20040c28:	b0000000 	imm	0
20040c2c:	e8940c8c 	lwi	r4, r20, 3212
20040c30:	99fc2000 	brald	r15, r4
20040c34:	80000000 	or	r0, r0, r0
		
		write_end_OUT();
20040c38:	b0000000 	imm	0
20040c3c:	e8740c94 	lwi	r3, r20, 3220
20040c40:	99fc1800 	brald	r15, r3
20040c44:	80000000 	or	r0, r0, r0
		
		
		return i;
20040c48:	e873001c 	lwi	r3, r19, 28
	}
20040c4c:	e9e10000 	lwi	r15, r1, 0
20040c50:	10330000 	addk	r1, r19, r0
20040c54:	ea610028 	lwi	r19, r1, 40
20040c58:	ea81002c 	lwi	r20, r1, 44
20040c5c:	30210030 	addik	r1, r1, 48
20040c60:	b60f0008 	rtsd	r15, 8
20040c64:	80000000 	or	r0, r0, r0

20040c68 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20040c68:	3021fff4 	addik	r1, r1, -12
20040c6c:	fa610004 	swi	r19, r1, 4
20040c70:	fa810008 	swi	r20, r1, 8
20040c74:	12610000 	addk	r19, r1, r0
20040c78:	96808000 	mfs	r20, rpc
20040c7c:	b000dffc 	imm	-8196
20040c80:	32940ce4 	addik	r20, r20, 3300
20040c84:	f8b30010 	swi	r5, r19, 16
20040c88:	f8d30014 	swi	r6, r19, 20
20040c8c:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20040c90:	e8730010 	lwi	r3, r19, 16
20040c94:	e8630010 	lwi	r3, r3, 16
20040c98:	e8830000 	lwi	r4, r3, 0
20040c9c:	e8730010 	lwi	r3, r19, 16
20040ca0:	e8a3000c 	lwi	r5, r3, 12
20040ca4:	e8730014 	lwi	r3, r19, 20
20040ca8:	64630402 	bslli	r3, r3, 2
20040cac:	10651800 	addk	r3, r5, r3
20040cb0:	e8630000 	lwi	r3, r3, 0
20040cb4:	14a32000 	rsubk	r5, r3, r4
20040cb8:	30600001 	addik	r3, r0, 1
20040cbc:	e8930018 	lwi	r4, r19, 24
20040cc0:	16442803 	cmpu	r18, r4, r5
20040cc4:	bcb20008 	bgei	r18, 8		// 20040ccc
20040cc8:	10600000 	addk	r3, r0, r0
20040ccc:	a46300ff 	andi	r3, r3, 255
}
20040cd0:	10330000 	addk	r1, r19, r0
20040cd4:	ea610004 	lwi	r19, r1, 4
20040cd8:	ea810008 	lwi	r20, r1, 8
20040cdc:	3021000c 	addik	r1, r1, 12
20040ce0:	b60f0008 	rtsd	r15, 8
20040ce4:	80000000 	or	r0, r0, r0

20040ce8 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20040ce8:	3021fff4 	addik	r1, r1, -12
20040cec:	fa610004 	swi	r19, r1, 4
20040cf0:	fa810008 	swi	r20, r1, 8
20040cf4:	12610000 	addk	r19, r1, r0
20040cf8:	96808000 	mfs	r20, rpc
20040cfc:	b000dffc 	imm	-8196
20040d00:	32940c64 	addik	r20, r20, 3172
20040d04:	f8b30010 	swi	r5, r19, 16
20040d08:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20040d0c:	e8730010 	lwi	r3, r19, 16
20040d10:	e8630010 	lwi	r3, r3, 16
20040d14:	e8830000 	lwi	r4, r3, 0
20040d18:	e8730010 	lwi	r3, r19, 16
20040d1c:	e8a3000c 	lwi	r5, r3, 12
20040d20:	e8730014 	lwi	r3, r19, 20
20040d24:	64630402 	bslli	r3, r3, 2
20040d28:	10651800 	addk	r3, r5, r3
20040d2c:	e8630000 	lwi	r3, r3, 0
20040d30:	14632000 	rsubk	r3, r3, r4
}
20040d34:	10330000 	addk	r1, r19, r0
20040d38:	ea610004 	lwi	r19, r1, 4
20040d3c:	ea810008 	lwi	r20, r1, 8
20040d40:	3021000c 	addik	r1, r1, 12
20040d44:	b60f0008 	rtsd	r15, 8
20040d48:	80000000 	or	r0, r0, r0

20040d4c <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20040d4c:	3021fff0 	addik	r1, r1, -16
20040d50:	fa610008 	swi	r19, r1, 8
20040d54:	fa81000c 	swi	r20, r1, 12
20040d58:	12610000 	addk	r19, r1, r0
20040d5c:	96808000 	mfs	r20, rpc
20040d60:	b000dffc 	imm	-8196
20040d64:	32940c00 	addik	r20, r20, 3072
20040d68:	f8b30014 	swi	r5, r19, 20
20040d6c:	f8d30018 	swi	r6, r19, 24
20040d70:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20040d74:	f8130004 	swi	r0, r19, 4
20040d78:	b800005c 	bri	92		// 20040dd4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20040d7c:	e8730014 	lwi	r3, r19, 20
20040d80:	e8830000 	lwi	r4, r3, 0
20040d84:	e8730014 	lwi	r3, r19, 20
20040d88:	e8a3000c 	lwi	r5, r3, 12
20040d8c:	e8730004 	lwi	r3, r19, 4
20040d90:	64630402 	bslli	r3, r3, 2
20040d94:	10651800 	addk	r3, r5, r3
20040d98:	e8a30000 	lwi	r5, r3, 0
20040d9c:	e8730014 	lwi	r3, r19, 20
20040da0:	e8630010 	lwi	r3, r3, 16
20040da4:	e8630000 	lwi	r3, r3, 0
20040da8:	14632800 	rsubk	r3, r3, r5
20040dac:	10641800 	addk	r3, r4, r3
20040db0:	30830001 	addik	r4, r3, 1
20040db4:	e873001c 	lwi	r3, r19, 28
20040db8:	16441803 	cmpu	r18, r4, r3
20040dbc:	bc52000c 	blti	r18, 12		// 20040dc8
            return 0;
20040dc0:	10600000 	addk	r3, r0, r0
20040dc4:	b8000024 	bri	36		// 20040de8
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20040dc8:	e8730004 	lwi	r3, r19, 4
20040dcc:	30630001 	addik	r3, r3, 1
20040dd0:	f8730004 	swi	r3, r19, 4
20040dd4:	e8930004 	lwi	r4, r19, 4
20040dd8:	e8730018 	lwi	r3, r19, 24
20040ddc:	16432003 	cmpu	r18, r3, r4
20040de0:	bc52ff9c 	blti	r18, -100		// 20040d7c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20040de4:	30600001 	addik	r3, r0, 1
}
20040de8:	10330000 	addk	r1, r19, r0
20040dec:	ea610008 	lwi	r19, r1, 8
20040df0:	ea81000c 	lwi	r20, r1, 12
20040df4:	30210010 	addik	r1, r1, 16
20040df8:	b60f0008 	rtsd	r15, 8
20040dfc:	80000000 	or	r0, r0, r0

20040e00 <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20040e00:	3021ffe8 	addik	r1, r1, -24
20040e04:	fa610010 	swi	r19, r1, 16
20040e08:	fa810014 	swi	r20, r1, 20
20040e0c:	12610000 	addk	r19, r1, r0
20040e10:	96808000 	mfs	r20, rpc
20040e14:	b000dffc 	imm	-8196
20040e18:	32940b4c 	addik	r20, r20, 2892
20040e1c:	f8b3001c 	swi	r5, r19, 28
20040e20:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20040e24:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20040e28:	f8130004 	swi	r0, r19, 4
20040e2c:	b8000054 	bri	84		// 20040e80
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20040e30:	e873001c 	lwi	r3, r19, 28
20040e34:	e8630010 	lwi	r3, r3, 16
20040e38:	e8830000 	lwi	r4, r3, 0
20040e3c:	e873001c 	lwi	r3, r19, 28
20040e40:	e8a3000c 	lwi	r5, r3, 12
20040e44:	e8730004 	lwi	r3, r19, 4
20040e48:	64630402 	bslli	r3, r3, 2
20040e4c:	10651800 	addk	r3, r5, r3
20040e50:	e8630000 	lwi	r3, r3, 0
20040e54:	14632000 	rsubk	r3, r3, r4
20040e58:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20040e5c:	e8930008 	lwi	r4, r19, 8
20040e60:	e873000c 	lwi	r3, r19, 12
20040e64:	16441803 	cmpu	r18, r4, r3
20040e68:	bcb20008 	bgei	r18, 8		// 20040e70
20040e6c:	10640000 	addk	r3, r4, r0
20040e70:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20040e74:	e8730004 	lwi	r3, r19, 4
20040e78:	30630001 	addik	r3, r3, 1
20040e7c:	f8730004 	swi	r3, r19, 4
20040e80:	e8930004 	lwi	r4, r19, 4
20040e84:	e8730020 	lwi	r3, r19, 32
20040e88:	16432003 	cmpu	r18, r3, r4
20040e8c:	bc52ffa4 	blti	r18, -92		// 20040e30
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20040e90:	e873001c 	lwi	r3, r19, 28
20040e94:	e8830000 	lwi	r4, r3, 0
20040e98:	e8730008 	lwi	r3, r19, 8
20040e9c:	14632000 	rsubk	r3, r3, r4
}
20040ea0:	10330000 	addk	r1, r19, r0
20040ea4:	ea610010 	lwi	r19, r1, 16
20040ea8:	ea810014 	lwi	r20, r1, 20
20040eac:	30210018 	addik	r1, r1, 24
20040eb0:	b60f0008 	rtsd	r15, 8
20040eb4:	80000000 	or	r0, r0, r0

20040eb8 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20040eb8:	3021fff0 	addik	r1, r1, -16
20040ebc:	fa610008 	swi	r19, r1, 8
20040ec0:	fa81000c 	swi	r20, r1, 12
20040ec4:	12610000 	addk	r19, r1, r0
20040ec8:	96808000 	mfs	r20, rpc
20040ecc:	b000dffc 	imm	-8196
20040ed0:	32940a94 	addik	r20, r20, 2708
20040ed4:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20040ed8:	e8730014 	lwi	r3, r19, 20
20040edc:	e8630010 	lwi	r3, r3, 16
20040ee0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20040ee4:	f8130004 	swi	r0, r19, 4
20040ee8:	b8000028 	bri	40		// 20040f10
        fifo->read_inds[i] = 0;
20040eec:	e8730014 	lwi	r3, r19, 20
20040ef0:	e883000c 	lwi	r4, r3, 12
20040ef4:	e8730004 	lwi	r3, r19, 4
20040ef8:	64630402 	bslli	r3, r3, 2
20040efc:	10641800 	addk	r3, r4, r3
20040f00:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20040f04:	e8730004 	lwi	r3, r19, 4
20040f08:	30630001 	addik	r3, r3, 1
20040f0c:	f8730004 	swi	r3, r19, 4
20040f10:	e8730014 	lwi	r3, r19, 20
20040f14:	e8830008 	lwi	r4, r3, 8
20040f18:	e8730004 	lwi	r3, r19, 4
20040f1c:	16441803 	cmpu	r18, r4, r3
20040f20:	bc52ffcc 	blti	r18, -52		// 20040eec
        fifo->read_inds[i] = 0;
    }
}
20040f24:	10330000 	addk	r1, r19, r0
20040f28:	ea610008 	lwi	r19, r1, 8
20040f2c:	ea81000c 	lwi	r20, r1, 12
20040f30:	30210010 	addik	r1, r1, 16
20040f34:	b60f0008 	rtsd	r15, 8
20040f38:	80000000 	or	r0, r0, r0

20040f3c <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20040f3c:	3021fff0 	addik	r1, r1, -16
20040f40:	fa610008 	swi	r19, r1, 8
20040f44:	fa81000c 	swi	r20, r1, 12
20040f48:	12610000 	addk	r19, r1, r0
20040f4c:	96808000 	mfs	r20, rpc
20040f50:	b000dffc 	imm	-8196
20040f54:	32940a10 	addik	r20, r20, 2576
20040f58:	f8b30014 	swi	r5, r19, 20
20040f5c:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20040f60:	e8730014 	lwi	r3, r19, 20
20040f64:	e8830004 	lwi	r4, r3, 4
20040f68:	e8730014 	lwi	r3, r19, 20
20040f6c:	e8a3000c 	lwi	r5, r3, 12
20040f70:	e8730018 	lwi	r3, r19, 24
20040f74:	64630402 	bslli	r3, r3, 2
20040f78:	10651800 	addk	r3, r5, r3
20040f7c:	e8a30000 	lwi	r5, r3, 0
20040f80:	e8730014 	lwi	r3, r19, 20
20040f84:	e8630000 	lwi	r3, r3, 0
20040f88:	3063ffff 	addik	r3, r3, -1
20040f8c:	84651800 	and	r3, r5, r3
20040f90:	10641800 	addk	r3, r4, r3
20040f94:	e0630000 	lbui	r3, r3, 0
20040f98:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20040f9c:	e8730014 	lwi	r3, r19, 20
20040fa0:	e883000c 	lwi	r4, r3, 12
20040fa4:	e8730018 	lwi	r3, r19, 24
20040fa8:	64630402 	bslli	r3, r3, 2
20040fac:	10641800 	addk	r3, r4, r3
20040fb0:	e8830000 	lwi	r4, r3, 0
20040fb4:	30840001 	addik	r4, r4, 1
20040fb8:	f8830000 	swi	r4, r3, 0
    return value;
20040fbc:	e0730004 	lbui	r3, r19, 4
20040fc0:	90630060 	sext8	r3, r3
}
20040fc4:	10330000 	addk	r1, r19, r0
20040fc8:	ea610008 	lwi	r19, r1, 8
20040fcc:	ea81000c 	lwi	r20, r1, 12
20040fd0:	30210010 	addik	r1, r1, 16
20040fd4:	b60f0008 	rtsd	r15, 8
20040fd8:	80000000 	or	r0, r0, r0

20040fdc <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20040fdc:	3021fff4 	addik	r1, r1, -12
20040fe0:	fa610004 	swi	r19, r1, 4
20040fe4:	fa810008 	swi	r20, r1, 8
20040fe8:	12610000 	addk	r19, r1, r0
20040fec:	96808000 	mfs	r20, rpc
20040ff0:	b000dffc 	imm	-8196
20040ff4:	32940970 	addik	r20, r20, 2416
20040ff8:	f8b30010 	swi	r5, r19, 16
20040ffc:	10660000 	addk	r3, r6, r0
20041000:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20041004:	e8730010 	lwi	r3, r19, 16
20041008:	e8830004 	lwi	r4, r3, 4
2004100c:	e8730010 	lwi	r3, r19, 16
20041010:	e8630010 	lwi	r3, r3, 16
20041014:	e8a30000 	lwi	r5, r3, 0
20041018:	e8730010 	lwi	r3, r19, 16
2004101c:	e8630000 	lwi	r3, r3, 0
20041020:	3063ffff 	addik	r3, r3, -1
20041024:	84651800 	and	r3, r5, r3
20041028:	10641800 	addk	r3, r4, r3
2004102c:	e0930014 	lbui	r4, r19, 20
20041030:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20041034:	e8730010 	lwi	r3, r19, 16
20041038:	e8630010 	lwi	r3, r3, 16
2004103c:	e8830000 	lwi	r4, r3, 0
20041040:	30840001 	addik	r4, r4, 1
20041044:	f8830000 	swi	r4, r3, 0
}
20041048:	10330000 	addk	r1, r19, r0
2004104c:	ea610004 	lwi	r19, r1, 4
20041050:	ea810008 	lwi	r20, r1, 8
20041054:	3021000c 	addik	r1, r1, 12
20041058:	b60f0008 	rtsd	r15, 8
2004105c:	80000000 	or	r0, r0, r0

20041060 <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20041060:	3021fff4 	addik	r1, r1, -12
20041064:	fa610004 	swi	r19, r1, 4
20041068:	fa810008 	swi	r20, r1, 8
2004106c:	12610000 	addk	r19, r1, r0
20041070:	96808000 	mfs	r20, rpc
20041074:	b000dffc 	imm	-8196
20041078:	329408ec 	addik	r20, r20, 2284
2004107c:	f8b30010 	swi	r5, r19, 16
20041080:	f8d30014 	swi	r6, r19, 20
20041084:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20041088:	e8730010 	lwi	r3, r19, 16
2004108c:	e8630010 	lwi	r3, r3, 16
20041090:	e8830000 	lwi	r4, r3, 0
20041094:	e8730010 	lwi	r3, r19, 16
20041098:	e8a3000c 	lwi	r5, r3, 12
2004109c:	e8730014 	lwi	r3, r19, 20
200410a0:	64630402 	bslli	r3, r3, 2
200410a4:	10651800 	addk	r3, r5, r3
200410a8:	e8630000 	lwi	r3, r3, 0
200410ac:	14a32000 	rsubk	r5, r3, r4
200410b0:	30600001 	addik	r3, r0, 1
200410b4:	e8930018 	lwi	r4, r19, 24
200410b8:	16442803 	cmpu	r18, r4, r5
200410bc:	bcb20008 	bgei	r18, 8		// 200410c4
200410c0:	10600000 	addk	r3, r0, r0
200410c4:	a46300ff 	andi	r3, r3, 255
}
200410c8:	10330000 	addk	r1, r19, r0
200410cc:	ea610004 	lwi	r19, r1, 4
200410d0:	ea810008 	lwi	r20, r1, 8
200410d4:	3021000c 	addik	r1, r1, 12
200410d8:	b60f0008 	rtsd	r15, 8
200410dc:	80000000 	or	r0, r0, r0

200410e0 <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200410e0:	3021fff4 	addik	r1, r1, -12
200410e4:	fa610004 	swi	r19, r1, 4
200410e8:	fa810008 	swi	r20, r1, 8
200410ec:	12610000 	addk	r19, r1, r0
200410f0:	96808000 	mfs	r20, rpc
200410f4:	b000dffc 	imm	-8196
200410f8:	3294086c 	addik	r20, r20, 2156
200410fc:	f8b30010 	swi	r5, r19, 16
20041100:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20041104:	e8730010 	lwi	r3, r19, 16
20041108:	e8630010 	lwi	r3, r3, 16
2004110c:	e8830000 	lwi	r4, r3, 0
20041110:	e8730010 	lwi	r3, r19, 16
20041114:	e8a3000c 	lwi	r5, r3, 12
20041118:	e8730014 	lwi	r3, r19, 20
2004111c:	64630402 	bslli	r3, r3, 2
20041120:	10651800 	addk	r3, r5, r3
20041124:	e8630000 	lwi	r3, r3, 0
20041128:	14632000 	rsubk	r3, r3, r4
}
2004112c:	10330000 	addk	r1, r19, r0
20041130:	ea610004 	lwi	r19, r1, 4
20041134:	ea810008 	lwi	r20, r1, 8
20041138:	3021000c 	addik	r1, r1, 12
2004113c:	b60f0008 	rtsd	r15, 8
20041140:	80000000 	or	r0, r0, r0

20041144 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20041144:	3021fff0 	addik	r1, r1, -16
20041148:	fa610008 	swi	r19, r1, 8
2004114c:	fa81000c 	swi	r20, r1, 12
20041150:	12610000 	addk	r19, r1, r0
20041154:	96808000 	mfs	r20, rpc
20041158:	b000dffc 	imm	-8196
2004115c:	32940808 	addik	r20, r20, 2056
20041160:	f8b30014 	swi	r5, r19, 20
20041164:	f8d30018 	swi	r6, r19, 24
20041168:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2004116c:	f8130004 	swi	r0, r19, 4
20041170:	b800005c 	bri	92		// 200411cc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20041174:	e8730014 	lwi	r3, r19, 20
20041178:	e8830000 	lwi	r4, r3, 0
2004117c:	e8730014 	lwi	r3, r19, 20
20041180:	e8a3000c 	lwi	r5, r3, 12
20041184:	e8730004 	lwi	r3, r19, 4
20041188:	64630402 	bslli	r3, r3, 2
2004118c:	10651800 	addk	r3, r5, r3
20041190:	e8a30000 	lwi	r5, r3, 0
20041194:	e8730014 	lwi	r3, r19, 20
20041198:	e8630010 	lwi	r3, r3, 16
2004119c:	e8630000 	lwi	r3, r3, 0
200411a0:	14632800 	rsubk	r3, r3, r5
200411a4:	10641800 	addk	r3, r4, r3
200411a8:	30830001 	addik	r4, r3, 1
200411ac:	e873001c 	lwi	r3, r19, 28
200411b0:	16441803 	cmpu	r18, r4, r3
200411b4:	bc52000c 	blti	r18, 12		// 200411c0
            return 0;
200411b8:	10600000 	addk	r3, r0, r0
200411bc:	b8000024 	bri	36		// 200411e0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200411c0:	e8730004 	lwi	r3, r19, 4
200411c4:	30630001 	addik	r3, r3, 1
200411c8:	f8730004 	swi	r3, r19, 4
200411cc:	e8930004 	lwi	r4, r19, 4
200411d0:	e8730018 	lwi	r3, r19, 24
200411d4:	16432003 	cmpu	r18, r3, r4
200411d8:	bc52ff9c 	blti	r18, -100		// 20041174
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200411dc:	30600001 	addik	r3, r0, 1
}
200411e0:	10330000 	addk	r1, r19, r0
200411e4:	ea610008 	lwi	r19, r1, 8
200411e8:	ea81000c 	lwi	r20, r1, 12
200411ec:	30210010 	addik	r1, r1, 16
200411f0:	b60f0008 	rtsd	r15, 8
200411f4:	80000000 	or	r0, r0, r0

200411f8 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200411f8:	3021ffe8 	addik	r1, r1, -24
200411fc:	fa610010 	swi	r19, r1, 16
20041200:	fa810014 	swi	r20, r1, 20
20041204:	12610000 	addk	r19, r1, r0
20041208:	96808000 	mfs	r20, rpc
2004120c:	b000dffc 	imm	-8196
20041210:	32940754 	addik	r20, r20, 1876
20041214:	f8b3001c 	swi	r5, r19, 28
20041218:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2004121c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20041220:	f8130004 	swi	r0, r19, 4
20041224:	b8000054 	bri	84		// 20041278
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20041228:	e873001c 	lwi	r3, r19, 28
2004122c:	e8630010 	lwi	r3, r3, 16
20041230:	e8830000 	lwi	r4, r3, 0
20041234:	e873001c 	lwi	r3, r19, 28
20041238:	e8a3000c 	lwi	r5, r3, 12
2004123c:	e8730004 	lwi	r3, r19, 4
20041240:	64630402 	bslli	r3, r3, 2
20041244:	10651800 	addk	r3, r5, r3
20041248:	e8630000 	lwi	r3, r3, 0
2004124c:	14632000 	rsubk	r3, r3, r4
20041250:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20041254:	e8930008 	lwi	r4, r19, 8
20041258:	e873000c 	lwi	r3, r19, 12
2004125c:	16441803 	cmpu	r18, r4, r3
20041260:	bcb20008 	bgei	r18, 8		// 20041268
20041264:	10640000 	addk	r3, r4, r0
20041268:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2004126c:	e8730004 	lwi	r3, r19, 4
20041270:	30630001 	addik	r3, r3, 1
20041274:	f8730004 	swi	r3, r19, 4
20041278:	e8930004 	lwi	r4, r19, 4
2004127c:	e8730020 	lwi	r3, r19, 32
20041280:	16432003 	cmpu	r18, r3, r4
20041284:	bc52ffa4 	blti	r18, -92		// 20041228
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20041288:	e873001c 	lwi	r3, r19, 28
2004128c:	e8830000 	lwi	r4, r3, 0
20041290:	e8730008 	lwi	r3, r19, 8
20041294:	14632000 	rsubk	r3, r3, r4
}
20041298:	10330000 	addk	r1, r19, r0
2004129c:	ea610010 	lwi	r19, r1, 16
200412a0:	ea810014 	lwi	r20, r1, 20
200412a4:	30210018 	addik	r1, r1, 24
200412a8:	b60f0008 	rtsd	r15, 8
200412ac:	80000000 	or	r0, r0, r0

200412b0 <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200412b0:	3021fff0 	addik	r1, r1, -16
200412b4:	fa610008 	swi	r19, r1, 8
200412b8:	fa81000c 	swi	r20, r1, 12
200412bc:	12610000 	addk	r19, r1, r0
200412c0:	96808000 	mfs	r20, rpc
200412c4:	b000dffc 	imm	-8196
200412c8:	3294069c 	addik	r20, r20, 1692
200412cc:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200412d0:	e8730014 	lwi	r3, r19, 20
200412d4:	e8630010 	lwi	r3, r3, 16
200412d8:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200412dc:	f8130004 	swi	r0, r19, 4
200412e0:	b8000028 	bri	40		// 20041308
        fifo->read_inds[i] = 0;
200412e4:	e8730014 	lwi	r3, r19, 20
200412e8:	e883000c 	lwi	r4, r3, 12
200412ec:	e8730004 	lwi	r3, r19, 4
200412f0:	64630402 	bslli	r3, r3, 2
200412f4:	10641800 	addk	r3, r4, r3
200412f8:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200412fc:	e8730004 	lwi	r3, r19, 4
20041300:	30630001 	addik	r3, r3, 1
20041304:	f8730004 	swi	r3, r19, 4
20041308:	e8730014 	lwi	r3, r19, 20
2004130c:	e8830008 	lwi	r4, r3, 8
20041310:	e8730004 	lwi	r3, r19, 4
20041314:	16441803 	cmpu	r18, r4, r3
20041318:	bc52ffcc 	blti	r18, -52		// 200412e4
        fifo->read_inds[i] = 0;
    }
}
2004131c:	10330000 	addk	r1, r19, r0
20041320:	ea610008 	lwi	r19, r1, 8
20041324:	ea81000c 	lwi	r20, r1, 12
20041328:	30210010 	addik	r1, r1, 16
2004132c:	b60f0008 	rtsd	r15, 8
20041330:	80000000 	or	r0, r0, r0

20041334 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20041334:	3021fff0 	addik	r1, r1, -16
20041338:	fa610008 	swi	r19, r1, 8
2004133c:	fa81000c 	swi	r20, r1, 12
20041340:	12610000 	addk	r19, r1, r0
20041344:	96808000 	mfs	r20, rpc
20041348:	b000dffc 	imm	-8196
2004134c:	32940618 	addik	r20, r20, 1560
20041350:	f8b30014 	swi	r5, r19, 20
20041354:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20041358:	e8730014 	lwi	r3, r19, 20
2004135c:	e8830004 	lwi	r4, r3, 4
20041360:	e8730014 	lwi	r3, r19, 20
20041364:	e8a3000c 	lwi	r5, r3, 12
20041368:	e8730018 	lwi	r3, r19, 24
2004136c:	64630402 	bslli	r3, r3, 2
20041370:	10651800 	addk	r3, r5, r3
20041374:	e8a30000 	lwi	r5, r3, 0
20041378:	e8730014 	lwi	r3, r19, 20
2004137c:	e8630000 	lwi	r3, r3, 0
20041380:	3063ffff 	addik	r3, r3, -1
20041384:	84651800 	and	r3, r5, r3
20041388:	10631800 	addk	r3, r3, r3
2004138c:	10641800 	addk	r3, r4, r3
20041390:	e4630000 	lhui	r3, r3, 0
20041394:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20041398:	e8730014 	lwi	r3, r19, 20
2004139c:	e883000c 	lwi	r4, r3, 12
200413a0:	e8730018 	lwi	r3, r19, 24
200413a4:	64630402 	bslli	r3, r3, 2
200413a8:	10641800 	addk	r3, r4, r3
200413ac:	e8830000 	lwi	r4, r3, 0
200413b0:	30840001 	addik	r4, r4, 1
200413b4:	f8830000 	swi	r4, r3, 0
    return value;
200413b8:	e4730004 	lhui	r3, r19, 4
200413bc:	90630061 	sext16	r3, r3
}
200413c0:	10330000 	addk	r1, r19, r0
200413c4:	ea610008 	lwi	r19, r1, 8
200413c8:	ea81000c 	lwi	r20, r1, 12
200413cc:	30210010 	addik	r1, r1, 16
200413d0:	b60f0008 	rtsd	r15, 8
200413d4:	80000000 	or	r0, r0, r0

200413d8 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200413d8:	3021fff4 	addik	r1, r1, -12
200413dc:	fa610004 	swi	r19, r1, 4
200413e0:	fa810008 	swi	r20, r1, 8
200413e4:	12610000 	addk	r19, r1, r0
200413e8:	96808000 	mfs	r20, rpc
200413ec:	b000dffc 	imm	-8196
200413f0:	32940574 	addik	r20, r20, 1396
200413f4:	f8b30010 	swi	r5, r19, 16
200413f8:	10660000 	addk	r3, r6, r0
200413fc:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20041400:	e8730010 	lwi	r3, r19, 16
20041404:	e8830004 	lwi	r4, r3, 4
20041408:	e8730010 	lwi	r3, r19, 16
2004140c:	e8630010 	lwi	r3, r3, 16
20041410:	e8a30000 	lwi	r5, r3, 0
20041414:	e8730010 	lwi	r3, r19, 16
20041418:	e8630000 	lwi	r3, r3, 0
2004141c:	3063ffff 	addik	r3, r3, -1
20041420:	84651800 	and	r3, r5, r3
20041424:	10631800 	addk	r3, r3, r3
20041428:	10641800 	addk	r3, r4, r3
2004142c:	e4930014 	lhui	r4, r19, 20
20041430:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20041434:	e8730010 	lwi	r3, r19, 16
20041438:	e8630010 	lwi	r3, r3, 16
2004143c:	e8830000 	lwi	r4, r3, 0
20041440:	30840001 	addik	r4, r4, 1
20041444:	f8830000 	swi	r4, r3, 0
}
20041448:	10330000 	addk	r1, r19, r0
2004144c:	ea610004 	lwi	r19, r1, 4
20041450:	ea810008 	lwi	r20, r1, 8
20041454:	3021000c 	addik	r1, r1, 12
20041458:	b60f0008 	rtsd	r15, 8
2004145c:	80000000 	or	r0, r0, r0

20041460 <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20041460:	3021fff4 	addik	r1, r1, -12
20041464:	fa610004 	swi	r19, r1, 4
20041468:	fa810008 	swi	r20, r1, 8
2004146c:	12610000 	addk	r19, r1, r0
20041470:	96808000 	mfs	r20, rpc
20041474:	b000dffc 	imm	-8196
20041478:	329404ec 	addik	r20, r20, 1260
2004147c:	f8b30010 	swi	r5, r19, 16
20041480:	f8d30014 	swi	r6, r19, 20
20041484:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20041488:	e8730010 	lwi	r3, r19, 16
2004148c:	e8630010 	lwi	r3, r3, 16
20041490:	e8830000 	lwi	r4, r3, 0
20041494:	e8730010 	lwi	r3, r19, 16
20041498:	e8a3000c 	lwi	r5, r3, 12
2004149c:	e8730014 	lwi	r3, r19, 20
200414a0:	64630402 	bslli	r3, r3, 2
200414a4:	10651800 	addk	r3, r5, r3
200414a8:	e8630000 	lwi	r3, r3, 0
200414ac:	14a32000 	rsubk	r5, r3, r4
200414b0:	30600001 	addik	r3, r0, 1
200414b4:	e8930018 	lwi	r4, r19, 24
200414b8:	16442803 	cmpu	r18, r4, r5
200414bc:	bcb20008 	bgei	r18, 8		// 200414c4
200414c0:	10600000 	addk	r3, r0, r0
200414c4:	a46300ff 	andi	r3, r3, 255
}
200414c8:	10330000 	addk	r1, r19, r0
200414cc:	ea610004 	lwi	r19, r1, 4
200414d0:	ea810008 	lwi	r20, r1, 8
200414d4:	3021000c 	addik	r1, r1, 12
200414d8:	b60f0008 	rtsd	r15, 8
200414dc:	80000000 	or	r0, r0, r0

200414e0 <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200414e0:	3021fff4 	addik	r1, r1, -12
200414e4:	fa610004 	swi	r19, r1, 4
200414e8:	fa810008 	swi	r20, r1, 8
200414ec:	12610000 	addk	r19, r1, r0
200414f0:	96808000 	mfs	r20, rpc
200414f4:	b000dffc 	imm	-8196
200414f8:	3294046c 	addik	r20, r20, 1132
200414fc:	f8b30010 	swi	r5, r19, 16
20041500:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20041504:	e8730010 	lwi	r3, r19, 16
20041508:	e8630010 	lwi	r3, r3, 16
2004150c:	e8830000 	lwi	r4, r3, 0
20041510:	e8730010 	lwi	r3, r19, 16
20041514:	e8a3000c 	lwi	r5, r3, 12
20041518:	e8730014 	lwi	r3, r19, 20
2004151c:	64630402 	bslli	r3, r3, 2
20041520:	10651800 	addk	r3, r5, r3
20041524:	e8630000 	lwi	r3, r3, 0
20041528:	14632000 	rsubk	r3, r3, r4
}
2004152c:	10330000 	addk	r1, r19, r0
20041530:	ea610004 	lwi	r19, r1, 4
20041534:	ea810008 	lwi	r20, r1, 8
20041538:	3021000c 	addik	r1, r1, 12
2004153c:	b60f0008 	rtsd	r15, 8
20041540:	80000000 	or	r0, r0, r0

20041544 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20041544:	3021fff0 	addik	r1, r1, -16
20041548:	fa610008 	swi	r19, r1, 8
2004154c:	fa81000c 	swi	r20, r1, 12
20041550:	12610000 	addk	r19, r1, r0
20041554:	96808000 	mfs	r20, rpc
20041558:	b000dffc 	imm	-8196
2004155c:	32940408 	addik	r20, r20, 1032
20041560:	f8b30014 	swi	r5, r19, 20
20041564:	f8d30018 	swi	r6, r19, 24
20041568:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2004156c:	f8130004 	swi	r0, r19, 4
20041570:	b800005c 	bri	92		// 200415cc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20041574:	e8730014 	lwi	r3, r19, 20
20041578:	e8830000 	lwi	r4, r3, 0
2004157c:	e8730014 	lwi	r3, r19, 20
20041580:	e8a3000c 	lwi	r5, r3, 12
20041584:	e8730004 	lwi	r3, r19, 4
20041588:	64630402 	bslli	r3, r3, 2
2004158c:	10651800 	addk	r3, r5, r3
20041590:	e8a30000 	lwi	r5, r3, 0
20041594:	e8730014 	lwi	r3, r19, 20
20041598:	e8630010 	lwi	r3, r3, 16
2004159c:	e8630000 	lwi	r3, r3, 0
200415a0:	14632800 	rsubk	r3, r3, r5
200415a4:	10641800 	addk	r3, r4, r3
200415a8:	30830001 	addik	r4, r3, 1
200415ac:	e873001c 	lwi	r3, r19, 28
200415b0:	16441803 	cmpu	r18, r4, r3
200415b4:	bc52000c 	blti	r18, 12		// 200415c0
            return 0;
200415b8:	10600000 	addk	r3, r0, r0
200415bc:	b8000024 	bri	36		// 200415e0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200415c0:	e8730004 	lwi	r3, r19, 4
200415c4:	30630001 	addik	r3, r3, 1
200415c8:	f8730004 	swi	r3, r19, 4
200415cc:	e8930004 	lwi	r4, r19, 4
200415d0:	e8730018 	lwi	r3, r19, 24
200415d4:	16432003 	cmpu	r18, r3, r4
200415d8:	bc52ff9c 	blti	r18, -100		// 20041574
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200415dc:	30600001 	addik	r3, r0, 1
}
200415e0:	10330000 	addk	r1, r19, r0
200415e4:	ea610008 	lwi	r19, r1, 8
200415e8:	ea81000c 	lwi	r20, r1, 12
200415ec:	30210010 	addik	r1, r1, 16
200415f0:	b60f0008 	rtsd	r15, 8
200415f4:	80000000 	or	r0, r0, r0

200415f8 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200415f8:	3021ffe8 	addik	r1, r1, -24
200415fc:	fa610010 	swi	r19, r1, 16
20041600:	fa810014 	swi	r20, r1, 20
20041604:	12610000 	addk	r19, r1, r0
20041608:	96808000 	mfs	r20, rpc
2004160c:	b000dffc 	imm	-8196
20041610:	32940354 	addik	r20, r20, 852
20041614:	f8b3001c 	swi	r5, r19, 28
20041618:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2004161c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20041620:	f8130004 	swi	r0, r19, 4
20041624:	b8000054 	bri	84		// 20041678
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20041628:	e873001c 	lwi	r3, r19, 28
2004162c:	e8630010 	lwi	r3, r3, 16
20041630:	e8830000 	lwi	r4, r3, 0
20041634:	e873001c 	lwi	r3, r19, 28
20041638:	e8a3000c 	lwi	r5, r3, 12
2004163c:	e8730004 	lwi	r3, r19, 4
20041640:	64630402 	bslli	r3, r3, 2
20041644:	10651800 	addk	r3, r5, r3
20041648:	e8630000 	lwi	r3, r3, 0
2004164c:	14632000 	rsubk	r3, r3, r4
20041650:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20041654:	e8930008 	lwi	r4, r19, 8
20041658:	e873000c 	lwi	r3, r19, 12
2004165c:	16441803 	cmpu	r18, r4, r3
20041660:	bcb20008 	bgei	r18, 8		// 20041668
20041664:	10640000 	addk	r3, r4, r0
20041668:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2004166c:	e8730004 	lwi	r3, r19, 4
20041670:	30630001 	addik	r3, r3, 1
20041674:	f8730004 	swi	r3, r19, 4
20041678:	e8930004 	lwi	r4, r19, 4
2004167c:	e8730020 	lwi	r3, r19, 32
20041680:	16432003 	cmpu	r18, r3, r4
20041684:	bc52ffa4 	blti	r18, -92		// 20041628
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20041688:	e873001c 	lwi	r3, r19, 28
2004168c:	e8830000 	lwi	r4, r3, 0
20041690:	e8730008 	lwi	r3, r19, 8
20041694:	14632000 	rsubk	r3, r3, r4
}
20041698:	10330000 	addk	r1, r19, r0
2004169c:	ea610010 	lwi	r19, r1, 16
200416a0:	ea810014 	lwi	r20, r1, 20
200416a4:	30210018 	addik	r1, r1, 24
200416a8:	b60f0008 	rtsd	r15, 8
200416ac:	80000000 	or	r0, r0, r0

200416b0 <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200416b0:	3021fff0 	addik	r1, r1, -16
200416b4:	fa610008 	swi	r19, r1, 8
200416b8:	fa81000c 	swi	r20, r1, 12
200416bc:	12610000 	addk	r19, r1, r0
200416c0:	96808000 	mfs	r20, rpc
200416c4:	b000dffc 	imm	-8196
200416c8:	3294029c 	addik	r20, r20, 668
200416cc:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200416d0:	e8730014 	lwi	r3, r19, 20
200416d4:	e8630010 	lwi	r3, r3, 16
200416d8:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200416dc:	f8130004 	swi	r0, r19, 4
200416e0:	b8000028 	bri	40		// 20041708
        fifo->read_inds[i] = 0;
200416e4:	e8730014 	lwi	r3, r19, 20
200416e8:	e883000c 	lwi	r4, r3, 12
200416ec:	e8730004 	lwi	r3, r19, 4
200416f0:	64630402 	bslli	r3, r3, 2
200416f4:	10641800 	addk	r3, r4, r3
200416f8:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200416fc:	e8730004 	lwi	r3, r19, 4
20041700:	30630001 	addik	r3, r3, 1
20041704:	f8730004 	swi	r3, r19, 4
20041708:	e8730014 	lwi	r3, r19, 20
2004170c:	e8830008 	lwi	r4, r3, 8
20041710:	e8730004 	lwi	r3, r19, 4
20041714:	16441803 	cmpu	r18, r4, r3
20041718:	bc52ffcc 	blti	r18, -52		// 200416e4
        fifo->read_inds[i] = 0;
    }
}
2004171c:	10330000 	addk	r1, r19, r0
20041720:	ea610008 	lwi	r19, r1, 8
20041724:	ea81000c 	lwi	r20, r1, 12
20041728:	30210010 	addik	r1, r1, 16
2004172c:	b60f0008 	rtsd	r15, 8
20041730:	80000000 	or	r0, r0, r0

20041734 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20041734:	3021fff0 	addik	r1, r1, -16
20041738:	fa610008 	swi	r19, r1, 8
2004173c:	fa81000c 	swi	r20, r1, 12
20041740:	12610000 	addk	r19, r1, r0
20041744:	96808000 	mfs	r20, rpc
20041748:	b000dffc 	imm	-8196
2004174c:	32940218 	addik	r20, r20, 536
20041750:	f8b30014 	swi	r5, r19, 20
20041754:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20041758:	e8730014 	lwi	r3, r19, 20
2004175c:	e8830004 	lwi	r4, r3, 4
20041760:	e8730014 	lwi	r3, r19, 20
20041764:	e8a3000c 	lwi	r5, r3, 12
20041768:	e8730018 	lwi	r3, r19, 24
2004176c:	64630402 	bslli	r3, r3, 2
20041770:	10651800 	addk	r3, r5, r3
20041774:	e8a30000 	lwi	r5, r3, 0
20041778:	e8730014 	lwi	r3, r19, 20
2004177c:	e8630000 	lwi	r3, r3, 0
20041780:	3063ffff 	addik	r3, r3, -1
20041784:	84651800 	and	r3, r5, r3
20041788:	64630402 	bslli	r3, r3, 2
2004178c:	10641800 	addk	r3, r4, r3
20041790:	e8630000 	lwi	r3, r3, 0
20041794:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20041798:	e8730014 	lwi	r3, r19, 20
2004179c:	e883000c 	lwi	r4, r3, 12
200417a0:	e8730018 	lwi	r3, r19, 24
200417a4:	64630402 	bslli	r3, r3, 2
200417a8:	10641800 	addk	r3, r4, r3
200417ac:	e8830000 	lwi	r4, r3, 0
200417b0:	30840001 	addik	r4, r4, 1
200417b4:	f8830000 	swi	r4, r3, 0
    return value;
200417b8:	e8730004 	lwi	r3, r19, 4
}
200417bc:	10330000 	addk	r1, r19, r0
200417c0:	ea610008 	lwi	r19, r1, 8
200417c4:	ea81000c 	lwi	r20, r1, 12
200417c8:	30210010 	addik	r1, r1, 16
200417cc:	b60f0008 	rtsd	r15, 8
200417d0:	80000000 	or	r0, r0, r0

200417d4 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200417d4:	3021fff4 	addik	r1, r1, -12
200417d8:	fa610004 	swi	r19, r1, 4
200417dc:	fa810008 	swi	r20, r1, 8
200417e0:	12610000 	addk	r19, r1, r0
200417e4:	96808000 	mfs	r20, rpc
200417e8:	b000dffc 	imm	-8196
200417ec:	32940178 	addik	r20, r20, 376
200417f0:	f8b30010 	swi	r5, r19, 16
200417f4:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200417f8:	e8730010 	lwi	r3, r19, 16
200417fc:	e8830004 	lwi	r4, r3, 4
20041800:	e8730010 	lwi	r3, r19, 16
20041804:	e8630010 	lwi	r3, r3, 16
20041808:	e8a30000 	lwi	r5, r3, 0
2004180c:	e8730010 	lwi	r3, r19, 16
20041810:	e8630000 	lwi	r3, r3, 0
20041814:	3063ffff 	addik	r3, r3, -1
20041818:	84651800 	and	r3, r5, r3
2004181c:	64630402 	bslli	r3, r3, 2
20041820:	10641800 	addk	r3, r4, r3
20041824:	e8930014 	lwi	r4, r19, 20
20041828:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2004182c:	e8730010 	lwi	r3, r19, 16
20041830:	e8630010 	lwi	r3, r3, 16
20041834:	e8830000 	lwi	r4, r3, 0
20041838:	30840001 	addik	r4, r4, 1
2004183c:	f8830000 	swi	r4, r3, 0
}
20041840:	10330000 	addk	r1, r19, r0
20041844:	ea610004 	lwi	r19, r1, 4
20041848:	ea810008 	lwi	r20, r1, 8
2004184c:	3021000c 	addik	r1, r1, 12
20041850:	b60f0008 	rtsd	r15, 8
20041854:	80000000 	or	r0, r0, r0

20041858 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20041858:	3021fff4 	addik	r1, r1, -12
2004185c:	fa610004 	swi	r19, r1, 4
20041860:	fa810008 	swi	r20, r1, 8
20041864:	12610000 	addk	r19, r1, r0
20041868:	96808000 	mfs	r20, rpc
2004186c:	b000dffc 	imm	-8196
20041870:	329400f4 	addik	r20, r20, 244
20041874:	f8b30010 	swi	r5, r19, 16
20041878:	f8d30014 	swi	r6, r19, 20
2004187c:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20041880:	e8730010 	lwi	r3, r19, 16
20041884:	e8630010 	lwi	r3, r3, 16
20041888:	e8830000 	lwi	r4, r3, 0
2004188c:	e8730010 	lwi	r3, r19, 16
20041890:	e8a3000c 	lwi	r5, r3, 12
20041894:	e8730014 	lwi	r3, r19, 20
20041898:	64630402 	bslli	r3, r3, 2
2004189c:	10651800 	addk	r3, r5, r3
200418a0:	e8630000 	lwi	r3, r3, 0
200418a4:	14a32000 	rsubk	r5, r3, r4
200418a8:	30600001 	addik	r3, r0, 1
200418ac:	e8930018 	lwi	r4, r19, 24
200418b0:	16442803 	cmpu	r18, r4, r5
200418b4:	bcb20008 	bgei	r18, 8		// 200418bc
200418b8:	10600000 	addk	r3, r0, r0
200418bc:	a46300ff 	andi	r3, r3, 255
}
200418c0:	10330000 	addk	r1, r19, r0
200418c4:	ea610004 	lwi	r19, r1, 4
200418c8:	ea810008 	lwi	r20, r1, 8
200418cc:	3021000c 	addik	r1, r1, 12
200418d0:	b60f0008 	rtsd	r15, 8
200418d4:	80000000 	or	r0, r0, r0

200418d8 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200418d8:	3021fff4 	addik	r1, r1, -12
200418dc:	fa610004 	swi	r19, r1, 4
200418e0:	fa810008 	swi	r20, r1, 8
200418e4:	12610000 	addk	r19, r1, r0
200418e8:	96808000 	mfs	r20, rpc
200418ec:	b000dffc 	imm	-8196
200418f0:	32940074 	addik	r20, r20, 116
200418f4:	f8b30010 	swi	r5, r19, 16
200418f8:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200418fc:	e8730010 	lwi	r3, r19, 16
20041900:	e8630010 	lwi	r3, r3, 16
20041904:	e8830000 	lwi	r4, r3, 0
20041908:	e8730010 	lwi	r3, r19, 16
2004190c:	e8a3000c 	lwi	r5, r3, 12
20041910:	e8730014 	lwi	r3, r19, 20
20041914:	64630402 	bslli	r3, r3, 2
20041918:	10651800 	addk	r3, r5, r3
2004191c:	e8630000 	lwi	r3, r3, 0
20041920:	14632000 	rsubk	r3, r3, r4
}
20041924:	10330000 	addk	r1, r19, r0
20041928:	ea610004 	lwi	r19, r1, 4
2004192c:	ea810008 	lwi	r20, r1, 8
20041930:	3021000c 	addik	r1, r1, 12
20041934:	b60f0008 	rtsd	r15, 8
20041938:	80000000 	or	r0, r0, r0

2004193c <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2004193c:	3021fff0 	addik	r1, r1, -16
20041940:	fa610008 	swi	r19, r1, 8
20041944:	fa81000c 	swi	r20, r1, 12
20041948:	12610000 	addk	r19, r1, r0
2004194c:	96808000 	mfs	r20, rpc
20041950:	b000dffc 	imm	-8196
20041954:	32940010 	addik	r20, r20, 16
20041958:	f8b30014 	swi	r5, r19, 20
2004195c:	f8d30018 	swi	r6, r19, 24
20041960:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20041964:	f8130004 	swi	r0, r19, 4
20041968:	b800005c 	bri	92		// 200419c4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2004196c:	e8730014 	lwi	r3, r19, 20
20041970:	e8830000 	lwi	r4, r3, 0
20041974:	e8730014 	lwi	r3, r19, 20
20041978:	e8a3000c 	lwi	r5, r3, 12
2004197c:	e8730004 	lwi	r3, r19, 4
20041980:	64630402 	bslli	r3, r3, 2
20041984:	10651800 	addk	r3, r5, r3
20041988:	e8a30000 	lwi	r5, r3, 0
2004198c:	e8730014 	lwi	r3, r19, 20
20041990:	e8630010 	lwi	r3, r3, 16
20041994:	e8630000 	lwi	r3, r3, 0
20041998:	14632800 	rsubk	r3, r3, r5
2004199c:	10641800 	addk	r3, r4, r3
200419a0:	30830001 	addik	r4, r3, 1
200419a4:	e873001c 	lwi	r3, r19, 28
200419a8:	16441803 	cmpu	r18, r4, r3
200419ac:	bc52000c 	blti	r18, 12		// 200419b8
            return 0;
200419b0:	10600000 	addk	r3, r0, r0
200419b4:	b8000024 	bri	36		// 200419d8
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200419b8:	e8730004 	lwi	r3, r19, 4
200419bc:	30630001 	addik	r3, r3, 1
200419c0:	f8730004 	swi	r3, r19, 4
200419c4:	e8930004 	lwi	r4, r19, 4
200419c8:	e8730018 	lwi	r3, r19, 24
200419cc:	16432003 	cmpu	r18, r3, r4
200419d0:	bc52ff9c 	blti	r18, -100		// 2004196c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200419d4:	30600001 	addik	r3, r0, 1
}
200419d8:	10330000 	addk	r1, r19, r0
200419dc:	ea610008 	lwi	r19, r1, 8
200419e0:	ea81000c 	lwi	r20, r1, 12
200419e4:	30210010 	addik	r1, r1, 16
200419e8:	b60f0008 	rtsd	r15, 8
200419ec:	80000000 	or	r0, r0, r0

200419f0 <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200419f0:	3021ffe8 	addik	r1, r1, -24
200419f4:	fa610010 	swi	r19, r1, 16
200419f8:	fa810014 	swi	r20, r1, 20
200419fc:	12610000 	addk	r19, r1, r0
20041a00:	96808000 	mfs	r20, rpc
20041a04:	b000dffb 	imm	-8197
20041a08:	3294ff5c 	addik	r20, r20, -164
20041a0c:	f8b3001c 	swi	r5, r19, 28
20041a10:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20041a14:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20041a18:	f8130004 	swi	r0, r19, 4
20041a1c:	b8000054 	bri	84		// 20041a70
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20041a20:	e873001c 	lwi	r3, r19, 28
20041a24:	e8630010 	lwi	r3, r3, 16
20041a28:	e8830000 	lwi	r4, r3, 0
20041a2c:	e873001c 	lwi	r3, r19, 28
20041a30:	e8a3000c 	lwi	r5, r3, 12
20041a34:	e8730004 	lwi	r3, r19, 4
20041a38:	64630402 	bslli	r3, r3, 2
20041a3c:	10651800 	addk	r3, r5, r3
20041a40:	e8630000 	lwi	r3, r3, 0
20041a44:	14632000 	rsubk	r3, r3, r4
20041a48:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20041a4c:	e8930008 	lwi	r4, r19, 8
20041a50:	e873000c 	lwi	r3, r19, 12
20041a54:	16441803 	cmpu	r18, r4, r3
20041a58:	bcb20008 	bgei	r18, 8		// 20041a60
20041a5c:	10640000 	addk	r3, r4, r0
20041a60:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20041a64:	e8730004 	lwi	r3, r19, 4
20041a68:	30630001 	addik	r3, r3, 1
20041a6c:	f8730004 	swi	r3, r19, 4
20041a70:	e8930004 	lwi	r4, r19, 4
20041a74:	e8730020 	lwi	r3, r19, 32
20041a78:	16432003 	cmpu	r18, r3, r4
20041a7c:	bc52ffa4 	blti	r18, -92		// 20041a20
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20041a80:	e873001c 	lwi	r3, r19, 28
20041a84:	e8830000 	lwi	r4, r3, 0
20041a88:	e8730008 	lwi	r3, r19, 8
20041a8c:	14632000 	rsubk	r3, r3, r4
}
20041a90:	10330000 	addk	r1, r19, r0
20041a94:	ea610010 	lwi	r19, r1, 16
20041a98:	ea810014 	lwi	r20, r1, 20
20041a9c:	30210018 	addik	r1, r1, 24
20041aa0:	b60f0008 	rtsd	r15, 8
20041aa4:	80000000 	or	r0, r0, r0

20041aa8 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20041aa8:	3021fff0 	addik	r1, r1, -16
20041aac:	fa610008 	swi	r19, r1, 8
20041ab0:	fa81000c 	swi	r20, r1, 12
20041ab4:	12610000 	addk	r19, r1, r0
20041ab8:	96808000 	mfs	r20, rpc
20041abc:	b000dffb 	imm	-8197
20041ac0:	3294fea4 	addik	r20, r20, -348
20041ac4:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20041ac8:	e8730014 	lwi	r3, r19, 20
20041acc:	e8630010 	lwi	r3, r3, 16
20041ad0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20041ad4:	f8130004 	swi	r0, r19, 4
20041ad8:	b8000028 	bri	40		// 20041b00
        fifo->read_inds[i] = 0;
20041adc:	e8730014 	lwi	r3, r19, 20
20041ae0:	e883000c 	lwi	r4, r3, 12
20041ae4:	e8730004 	lwi	r3, r19, 4
20041ae8:	64630402 	bslli	r3, r3, 2
20041aec:	10641800 	addk	r3, r4, r3
20041af0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20041af4:	e8730004 	lwi	r3, r19, 4
20041af8:	30630001 	addik	r3, r3, 1
20041afc:	f8730004 	swi	r3, r19, 4
20041b00:	e8730014 	lwi	r3, r19, 20
20041b04:	e8830008 	lwi	r4, r3, 8
20041b08:	e8730004 	lwi	r3, r19, 4
20041b0c:	16441803 	cmpu	r18, r4, r3
20041b10:	bc52ffcc 	blti	r18, -52		// 20041adc
        fifo->read_inds[i] = 0;
    }
}
20041b14:	10330000 	addk	r1, r19, r0
20041b18:	ea610008 	lwi	r19, r1, 8
20041b1c:	ea81000c 	lwi	r20, r1, 12
20041b20:	30210010 	addik	r1, r1, 16
20041b24:	b60f0008 	rtsd	r15, 8
20041b28:	80000000 	or	r0, r0, r0

20041b2c <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20041b2c:	3021ffec 	addik	r1, r1, -20
20041b30:	fa61000c 	swi	r19, r1, 12
20041b34:	fa810010 	swi	r20, r1, 16
20041b38:	12610000 	addk	r19, r1, r0
20041b3c:	96808000 	mfs	r20, rpc
20041b40:	b000dffb 	imm	-8197
20041b44:	3294fe20 	addik	r20, r20, -480
20041b48:	f8b30018 	swi	r5, r19, 24
20041b4c:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20041b50:	e8730018 	lwi	r3, r19, 24
20041b54:	e8830004 	lwi	r4, r3, 4
20041b58:	e8730018 	lwi	r3, r19, 24
20041b5c:	e8a3000c 	lwi	r5, r3, 12
20041b60:	e873001c 	lwi	r3, r19, 28
20041b64:	64630402 	bslli	r3, r3, 2
20041b68:	10651800 	addk	r3, r5, r3
20041b6c:	e8a30000 	lwi	r5, r3, 0
20041b70:	e8730018 	lwi	r3, r19, 24
20041b74:	e8630000 	lwi	r3, r3, 0
20041b78:	3063ffff 	addik	r3, r3, -1
20041b7c:	84651800 	and	r3, r5, r3
20041b80:	64630403 	bslli	r3, r3, 3
20041b84:	10641800 	addk	r3, r4, r3
20041b88:	e8830000 	lwi	r4, r3, 0
20041b8c:	e8a30004 	lwi	r5, r3, 4
20041b90:	f8930004 	swi	r4, r19, 4
20041b94:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20041b98:	e8730018 	lwi	r3, r19, 24
20041b9c:	e883000c 	lwi	r4, r3, 12
20041ba0:	e873001c 	lwi	r3, r19, 28
20041ba4:	64630402 	bslli	r3, r3, 2
20041ba8:	10641800 	addk	r3, r4, r3
20041bac:	e8830000 	lwi	r4, r3, 0
20041bb0:	30840001 	addik	r4, r4, 1
20041bb4:	f8830000 	swi	r4, r3, 0
    return value;
20041bb8:	e8930004 	lwi	r4, r19, 4
20041bbc:	e8b30008 	lwi	r5, r19, 8
}
20041bc0:	10640000 	addk	r3, r4, r0
20041bc4:	10850000 	addk	r4, r5, r0
20041bc8:	10330000 	addk	r1, r19, r0
20041bcc:	ea61000c 	lwi	r19, r1, 12
20041bd0:	ea810010 	lwi	r20, r1, 16
20041bd4:	30210014 	addik	r1, r1, 20
20041bd8:	b60f0008 	rtsd	r15, 8
20041bdc:	80000000 	or	r0, r0, r0

20041be0 <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20041be0:	3021fff4 	addik	r1, r1, -12
20041be4:	fa610004 	swi	r19, r1, 4
20041be8:	fa810008 	swi	r20, r1, 8
20041bec:	12610000 	addk	r19, r1, r0
20041bf0:	96808000 	mfs	r20, rpc
20041bf4:	b000dffb 	imm	-8197
20041bf8:	3294fd6c 	addik	r20, r20, -660
20041bfc:	f8b30010 	swi	r5, r19, 16
20041c00:	f8d30014 	swi	r6, r19, 20
20041c04:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20041c08:	e8730010 	lwi	r3, r19, 16
20041c0c:	e8830004 	lwi	r4, r3, 4
20041c10:	e8730010 	lwi	r3, r19, 16
20041c14:	e8630010 	lwi	r3, r3, 16
20041c18:	e8a30000 	lwi	r5, r3, 0
20041c1c:	e8730010 	lwi	r3, r19, 16
20041c20:	e8630000 	lwi	r3, r3, 0
20041c24:	3063ffff 	addik	r3, r3, -1
20041c28:	84651800 	and	r3, r5, r3
20041c2c:	64630403 	bslli	r3, r3, 3
20041c30:	10641800 	addk	r3, r4, r3
20041c34:	e8930014 	lwi	r4, r19, 20
20041c38:	e8b30018 	lwi	r5, r19, 24
20041c3c:	f8830000 	swi	r4, r3, 0
20041c40:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20041c44:	e8730010 	lwi	r3, r19, 16
20041c48:	e8630010 	lwi	r3, r3, 16
20041c4c:	e8830000 	lwi	r4, r3, 0
20041c50:	30840001 	addik	r4, r4, 1
20041c54:	f8830000 	swi	r4, r3, 0
}
20041c58:	10330000 	addk	r1, r19, r0
20041c5c:	ea610004 	lwi	r19, r1, 4
20041c60:	ea810008 	lwi	r20, r1, 8
20041c64:	3021000c 	addik	r1, r1, 12
20041c68:	b60f0008 	rtsd	r15, 8
20041c6c:	80000000 	or	r0, r0, r0

20041c70 <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20041c70:	3021fff4 	addik	r1, r1, -12
20041c74:	fa610004 	swi	r19, r1, 4
20041c78:	fa810008 	swi	r20, r1, 8
20041c7c:	12610000 	addk	r19, r1, r0
20041c80:	96808000 	mfs	r20, rpc
20041c84:	b000dffb 	imm	-8197
20041c88:	3294fcdc 	addik	r20, r20, -804
20041c8c:	f8b30010 	swi	r5, r19, 16
20041c90:	f8d30014 	swi	r6, r19, 20
20041c94:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20041c98:	e8730010 	lwi	r3, r19, 16
20041c9c:	e8630010 	lwi	r3, r3, 16
20041ca0:	e8830000 	lwi	r4, r3, 0
20041ca4:	e8730010 	lwi	r3, r19, 16
20041ca8:	e8a3000c 	lwi	r5, r3, 12
20041cac:	e8730014 	lwi	r3, r19, 20
20041cb0:	64630402 	bslli	r3, r3, 2
20041cb4:	10651800 	addk	r3, r5, r3
20041cb8:	e8630000 	lwi	r3, r3, 0
20041cbc:	14a32000 	rsubk	r5, r3, r4
20041cc0:	30600001 	addik	r3, r0, 1
20041cc4:	e8930018 	lwi	r4, r19, 24
20041cc8:	16442803 	cmpu	r18, r4, r5
20041ccc:	bcb20008 	bgei	r18, 8		// 20041cd4
20041cd0:	10600000 	addk	r3, r0, r0
20041cd4:	a46300ff 	andi	r3, r3, 255
}
20041cd8:	10330000 	addk	r1, r19, r0
20041cdc:	ea610004 	lwi	r19, r1, 4
20041ce0:	ea810008 	lwi	r20, r1, 8
20041ce4:	3021000c 	addik	r1, r1, 12
20041ce8:	b60f0008 	rtsd	r15, 8
20041cec:	80000000 	or	r0, r0, r0

20041cf0 <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20041cf0:	3021fff4 	addik	r1, r1, -12
20041cf4:	fa610004 	swi	r19, r1, 4
20041cf8:	fa810008 	swi	r20, r1, 8
20041cfc:	12610000 	addk	r19, r1, r0
20041d00:	96808000 	mfs	r20, rpc
20041d04:	b000dffb 	imm	-8197
20041d08:	3294fc5c 	addik	r20, r20, -932
20041d0c:	f8b30010 	swi	r5, r19, 16
20041d10:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20041d14:	e8730010 	lwi	r3, r19, 16
20041d18:	e8630010 	lwi	r3, r3, 16
20041d1c:	e8830000 	lwi	r4, r3, 0
20041d20:	e8730010 	lwi	r3, r19, 16
20041d24:	e8a3000c 	lwi	r5, r3, 12
20041d28:	e8730014 	lwi	r3, r19, 20
20041d2c:	64630402 	bslli	r3, r3, 2
20041d30:	10651800 	addk	r3, r5, r3
20041d34:	e8630000 	lwi	r3, r3, 0
20041d38:	14632000 	rsubk	r3, r3, r4
}
20041d3c:	10330000 	addk	r1, r19, r0
20041d40:	ea610004 	lwi	r19, r1, 4
20041d44:	ea810008 	lwi	r20, r1, 8
20041d48:	3021000c 	addik	r1, r1, 12
20041d4c:	b60f0008 	rtsd	r15, 8
20041d50:	80000000 	or	r0, r0, r0

20041d54 <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20041d54:	3021fff0 	addik	r1, r1, -16
20041d58:	fa610008 	swi	r19, r1, 8
20041d5c:	fa81000c 	swi	r20, r1, 12
20041d60:	12610000 	addk	r19, r1, r0
20041d64:	96808000 	mfs	r20, rpc
20041d68:	b000dffb 	imm	-8197
20041d6c:	3294fbf8 	addik	r20, r20, -1032
20041d70:	f8b30014 	swi	r5, r19, 20
20041d74:	f8d30018 	swi	r6, r19, 24
20041d78:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20041d7c:	f8130004 	swi	r0, r19, 4
20041d80:	b800005c 	bri	92		// 20041ddc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20041d84:	e8730014 	lwi	r3, r19, 20
20041d88:	e8830000 	lwi	r4, r3, 0
20041d8c:	e8730014 	lwi	r3, r19, 20
20041d90:	e8a3000c 	lwi	r5, r3, 12
20041d94:	e8730004 	lwi	r3, r19, 4
20041d98:	64630402 	bslli	r3, r3, 2
20041d9c:	10651800 	addk	r3, r5, r3
20041da0:	e8a30000 	lwi	r5, r3, 0
20041da4:	e8730014 	lwi	r3, r19, 20
20041da8:	e8630010 	lwi	r3, r3, 16
20041dac:	e8630000 	lwi	r3, r3, 0
20041db0:	14632800 	rsubk	r3, r3, r5
20041db4:	10641800 	addk	r3, r4, r3
20041db8:	30830001 	addik	r4, r3, 1
20041dbc:	e873001c 	lwi	r3, r19, 28
20041dc0:	16441803 	cmpu	r18, r4, r3
20041dc4:	bc52000c 	blti	r18, 12		// 20041dd0
            return 0;
20041dc8:	10600000 	addk	r3, r0, r0
20041dcc:	b8000024 	bri	36		// 20041df0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20041dd0:	e8730004 	lwi	r3, r19, 4
20041dd4:	30630001 	addik	r3, r3, 1
20041dd8:	f8730004 	swi	r3, r19, 4
20041ddc:	e8930004 	lwi	r4, r19, 4
20041de0:	e8730018 	lwi	r3, r19, 24
20041de4:	16432003 	cmpu	r18, r3, r4
20041de8:	bc52ff9c 	blti	r18, -100		// 20041d84
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20041dec:	30600001 	addik	r3, r0, 1
}
20041df0:	10330000 	addk	r1, r19, r0
20041df4:	ea610008 	lwi	r19, r1, 8
20041df8:	ea81000c 	lwi	r20, r1, 12
20041dfc:	30210010 	addik	r1, r1, 16
20041e00:	b60f0008 	rtsd	r15, 8
20041e04:	80000000 	or	r0, r0, r0

20041e08 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20041e08:	3021ffe8 	addik	r1, r1, -24
20041e0c:	fa610010 	swi	r19, r1, 16
20041e10:	fa810014 	swi	r20, r1, 20
20041e14:	12610000 	addk	r19, r1, r0
20041e18:	96808000 	mfs	r20, rpc
20041e1c:	b000dffb 	imm	-8197
20041e20:	3294fb44 	addik	r20, r20, -1212
20041e24:	f8b3001c 	swi	r5, r19, 28
20041e28:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20041e2c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20041e30:	f8130004 	swi	r0, r19, 4
20041e34:	b8000054 	bri	84		// 20041e88
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20041e38:	e873001c 	lwi	r3, r19, 28
20041e3c:	e8630010 	lwi	r3, r3, 16
20041e40:	e8830000 	lwi	r4, r3, 0
20041e44:	e873001c 	lwi	r3, r19, 28
20041e48:	e8a3000c 	lwi	r5, r3, 12
20041e4c:	e8730004 	lwi	r3, r19, 4
20041e50:	64630402 	bslli	r3, r3, 2
20041e54:	10651800 	addk	r3, r5, r3
20041e58:	e8630000 	lwi	r3, r3, 0
20041e5c:	14632000 	rsubk	r3, r3, r4
20041e60:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20041e64:	e8930008 	lwi	r4, r19, 8
20041e68:	e873000c 	lwi	r3, r19, 12
20041e6c:	16441803 	cmpu	r18, r4, r3
20041e70:	bcb20008 	bgei	r18, 8		// 20041e78
20041e74:	10640000 	addk	r3, r4, r0
20041e78:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20041e7c:	e8730004 	lwi	r3, r19, 4
20041e80:	30630001 	addik	r3, r3, 1
20041e84:	f8730004 	swi	r3, r19, 4
20041e88:	e8930004 	lwi	r4, r19, 4
20041e8c:	e8730020 	lwi	r3, r19, 32
20041e90:	16432003 	cmpu	r18, r3, r4
20041e94:	bc52ffa4 	blti	r18, -92		// 20041e38
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20041e98:	e873001c 	lwi	r3, r19, 28
20041e9c:	e8830000 	lwi	r4, r3, 0
20041ea0:	e8730008 	lwi	r3, r19, 8
20041ea4:	14632000 	rsubk	r3, r3, r4
}
20041ea8:	10330000 	addk	r1, r19, r0
20041eac:	ea610010 	lwi	r19, r1, 16
20041eb0:	ea810014 	lwi	r20, r1, 20
20041eb4:	30210018 	addik	r1, r1, 24
20041eb8:	b60f0008 	rtsd	r15, 8
20041ebc:	80000000 	or	r0, r0, r0

20041ec0 <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20041ec0:	3021fff0 	addik	r1, r1, -16
20041ec4:	fa610008 	swi	r19, r1, 8
20041ec8:	fa81000c 	swi	r20, r1, 12
20041ecc:	12610000 	addk	r19, r1, r0
20041ed0:	96808000 	mfs	r20, rpc
20041ed4:	b000dffb 	imm	-8197
20041ed8:	3294fa8c 	addik	r20, r20, -1396
20041edc:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20041ee0:	e8730014 	lwi	r3, r19, 20
20041ee4:	e8630010 	lwi	r3, r3, 16
20041ee8:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20041eec:	f8130004 	swi	r0, r19, 4
20041ef0:	b8000028 	bri	40		// 20041f18
        fifo->read_inds[i] = 0;
20041ef4:	e8730014 	lwi	r3, r19, 20
20041ef8:	e883000c 	lwi	r4, r3, 12
20041efc:	e8730004 	lwi	r3, r19, 4
20041f00:	64630402 	bslli	r3, r3, 2
20041f04:	10641800 	addk	r3, r4, r3
20041f08:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20041f0c:	e8730004 	lwi	r3, r19, 4
20041f10:	30630001 	addik	r3, r3, 1
20041f14:	f8730004 	swi	r3, r19, 4
20041f18:	e8730014 	lwi	r3, r19, 20
20041f1c:	e8830008 	lwi	r4, r3, 8
20041f20:	e8730004 	lwi	r3, r19, 4
20041f24:	16441803 	cmpu	r18, r4, r3
20041f28:	bc52ffcc 	blti	r18, -52		// 20041ef4
        fifo->read_inds[i] = 0;
    }
}
20041f2c:	10330000 	addk	r1, r19, r0
20041f30:	ea610008 	lwi	r19, r1, 8
20041f34:	ea81000c 	lwi	r20, r1, 12
20041f38:	30210010 	addik	r1, r1, 16
20041f3c:	b60f0008 	rtsd	r15, 8
20041f40:	80000000 	or	r0, r0, r0

20041f44 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20041f44:	3021fff0 	addik	r1, r1, -16
20041f48:	fa610008 	swi	r19, r1, 8
20041f4c:	fa81000c 	swi	r20, r1, 12
20041f50:	12610000 	addk	r19, r1, r0
20041f54:	96808000 	mfs	r20, rpc
20041f58:	b000dffb 	imm	-8197
20041f5c:	3294fa08 	addik	r20, r20, -1528
20041f60:	f8b30014 	swi	r5, r19, 20
20041f64:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20041f68:	e8730014 	lwi	r3, r19, 20
20041f6c:	e8830004 	lwi	r4, r3, 4
20041f70:	e8730014 	lwi	r3, r19, 20
20041f74:	e8a3000c 	lwi	r5, r3, 12
20041f78:	e8730018 	lwi	r3, r19, 24
20041f7c:	64630402 	bslli	r3, r3, 2
20041f80:	10651800 	addk	r3, r5, r3
20041f84:	e8a30000 	lwi	r5, r3, 0
20041f88:	e8730014 	lwi	r3, r19, 20
20041f8c:	e8630000 	lwi	r3, r3, 0
20041f90:	3063ffff 	addik	r3, r3, -1
20041f94:	84651800 	and	r3, r5, r3
20041f98:	10641800 	addk	r3, r4, r3
20041f9c:	e0630000 	lbui	r3, r3, 0
20041fa0:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20041fa4:	e8730014 	lwi	r3, r19, 20
20041fa8:	e883000c 	lwi	r4, r3, 12
20041fac:	e8730018 	lwi	r3, r19, 24
20041fb0:	64630402 	bslli	r3, r3, 2
20041fb4:	10641800 	addk	r3, r4, r3
20041fb8:	e8830000 	lwi	r4, r3, 0
20041fbc:	30840001 	addik	r4, r4, 1
20041fc0:	f8830000 	swi	r4, r3, 0
    return value;
20041fc4:	e0730004 	lbui	r3, r19, 4
}
20041fc8:	10330000 	addk	r1, r19, r0
20041fcc:	ea610008 	lwi	r19, r1, 8
20041fd0:	ea81000c 	lwi	r20, r1, 12
20041fd4:	30210010 	addik	r1, r1, 16
20041fd8:	b60f0008 	rtsd	r15, 8
20041fdc:	80000000 	or	r0, r0, r0

20041fe0 <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20041fe0:	3021fff4 	addik	r1, r1, -12
20041fe4:	fa610004 	swi	r19, r1, 4
20041fe8:	fa810008 	swi	r20, r1, 8
20041fec:	12610000 	addk	r19, r1, r0
20041ff0:	96808000 	mfs	r20, rpc
20041ff4:	b000dffb 	imm	-8197
20041ff8:	3294f96c 	addik	r20, r20, -1684
20041ffc:	f8b30010 	swi	r5, r19, 16
20042000:	10660000 	addk	r3, r6, r0
20042004:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20042008:	e8730010 	lwi	r3, r19, 16
2004200c:	e8830004 	lwi	r4, r3, 4
20042010:	e8730010 	lwi	r3, r19, 16
20042014:	e8630010 	lwi	r3, r3, 16
20042018:	e8a30000 	lwi	r5, r3, 0
2004201c:	e8730010 	lwi	r3, r19, 16
20042020:	e8630000 	lwi	r3, r3, 0
20042024:	3063ffff 	addik	r3, r3, -1
20042028:	84651800 	and	r3, r5, r3
2004202c:	10641800 	addk	r3, r4, r3
20042030:	e0930014 	lbui	r4, r19, 20
20042034:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20042038:	e8730010 	lwi	r3, r19, 16
2004203c:	e8630010 	lwi	r3, r3, 16
20042040:	e8830000 	lwi	r4, r3, 0
20042044:	30840001 	addik	r4, r4, 1
20042048:	f8830000 	swi	r4, r3, 0
}
2004204c:	10330000 	addk	r1, r19, r0
20042050:	ea610004 	lwi	r19, r1, 4
20042054:	ea810008 	lwi	r20, r1, 8
20042058:	3021000c 	addik	r1, r1, 12
2004205c:	b60f0008 	rtsd	r15, 8
20042060:	80000000 	or	r0, r0, r0

20042064 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20042064:	3021fff4 	addik	r1, r1, -12
20042068:	fa610004 	swi	r19, r1, 4
2004206c:	fa810008 	swi	r20, r1, 8
20042070:	12610000 	addk	r19, r1, r0
20042074:	96808000 	mfs	r20, rpc
20042078:	b000dffb 	imm	-8197
2004207c:	3294f8e8 	addik	r20, r20, -1816
20042080:	f8b30010 	swi	r5, r19, 16
20042084:	f8d30014 	swi	r6, r19, 20
20042088:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2004208c:	e8730010 	lwi	r3, r19, 16
20042090:	e8630010 	lwi	r3, r3, 16
20042094:	e8830000 	lwi	r4, r3, 0
20042098:	e8730010 	lwi	r3, r19, 16
2004209c:	e8a3000c 	lwi	r5, r3, 12
200420a0:	e8730014 	lwi	r3, r19, 20
200420a4:	64630402 	bslli	r3, r3, 2
200420a8:	10651800 	addk	r3, r5, r3
200420ac:	e8630000 	lwi	r3, r3, 0
200420b0:	14a32000 	rsubk	r5, r3, r4
200420b4:	30600001 	addik	r3, r0, 1
200420b8:	e8930018 	lwi	r4, r19, 24
200420bc:	16442803 	cmpu	r18, r4, r5
200420c0:	bcb20008 	bgei	r18, 8		// 200420c8
200420c4:	10600000 	addk	r3, r0, r0
200420c8:	a46300ff 	andi	r3, r3, 255
}
200420cc:	10330000 	addk	r1, r19, r0
200420d0:	ea610004 	lwi	r19, r1, 4
200420d4:	ea810008 	lwi	r20, r1, 8
200420d8:	3021000c 	addik	r1, r1, 12
200420dc:	b60f0008 	rtsd	r15, 8
200420e0:	80000000 	or	r0, r0, r0

200420e4 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200420e4:	3021fff4 	addik	r1, r1, -12
200420e8:	fa610004 	swi	r19, r1, 4
200420ec:	fa810008 	swi	r20, r1, 8
200420f0:	12610000 	addk	r19, r1, r0
200420f4:	96808000 	mfs	r20, rpc
200420f8:	b000dffb 	imm	-8197
200420fc:	3294f868 	addik	r20, r20, -1944
20042100:	f8b30010 	swi	r5, r19, 16
20042104:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20042108:	e8730010 	lwi	r3, r19, 16
2004210c:	e8630010 	lwi	r3, r3, 16
20042110:	e8830000 	lwi	r4, r3, 0
20042114:	e8730010 	lwi	r3, r19, 16
20042118:	e8a3000c 	lwi	r5, r3, 12
2004211c:	e8730014 	lwi	r3, r19, 20
20042120:	64630402 	bslli	r3, r3, 2
20042124:	10651800 	addk	r3, r5, r3
20042128:	e8630000 	lwi	r3, r3, 0
2004212c:	14632000 	rsubk	r3, r3, r4
}
20042130:	10330000 	addk	r1, r19, r0
20042134:	ea610004 	lwi	r19, r1, 4
20042138:	ea810008 	lwi	r20, r1, 8
2004213c:	3021000c 	addik	r1, r1, 12
20042140:	b60f0008 	rtsd	r15, 8
20042144:	80000000 	or	r0, r0, r0

20042148 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20042148:	3021fff0 	addik	r1, r1, -16
2004214c:	fa610008 	swi	r19, r1, 8
20042150:	fa81000c 	swi	r20, r1, 12
20042154:	12610000 	addk	r19, r1, r0
20042158:	96808000 	mfs	r20, rpc
2004215c:	b000dffb 	imm	-8197
20042160:	3294f804 	addik	r20, r20, -2044
20042164:	f8b30014 	swi	r5, r19, 20
20042168:	f8d30018 	swi	r6, r19, 24
2004216c:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20042170:	f8130004 	swi	r0, r19, 4
20042174:	b800005c 	bri	92		// 200421d0
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20042178:	e8730014 	lwi	r3, r19, 20
2004217c:	e8830000 	lwi	r4, r3, 0
20042180:	e8730014 	lwi	r3, r19, 20
20042184:	e8a3000c 	lwi	r5, r3, 12
20042188:	e8730004 	lwi	r3, r19, 4
2004218c:	64630402 	bslli	r3, r3, 2
20042190:	10651800 	addk	r3, r5, r3
20042194:	e8a30000 	lwi	r5, r3, 0
20042198:	e8730014 	lwi	r3, r19, 20
2004219c:	e8630010 	lwi	r3, r3, 16
200421a0:	e8630000 	lwi	r3, r3, 0
200421a4:	14632800 	rsubk	r3, r3, r5
200421a8:	10641800 	addk	r3, r4, r3
200421ac:	30830001 	addik	r4, r3, 1
200421b0:	e873001c 	lwi	r3, r19, 28
200421b4:	16441803 	cmpu	r18, r4, r3
200421b8:	bc52000c 	blti	r18, 12		// 200421c4
            return 0;
200421bc:	10600000 	addk	r3, r0, r0
200421c0:	b8000024 	bri	36		// 200421e4
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200421c4:	e8730004 	lwi	r3, r19, 4
200421c8:	30630001 	addik	r3, r3, 1
200421cc:	f8730004 	swi	r3, r19, 4
200421d0:	e8930004 	lwi	r4, r19, 4
200421d4:	e8730018 	lwi	r3, r19, 24
200421d8:	16432003 	cmpu	r18, r3, r4
200421dc:	bc52ff9c 	blti	r18, -100		// 20042178
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200421e0:	30600001 	addik	r3, r0, 1
}
200421e4:	10330000 	addk	r1, r19, r0
200421e8:	ea610008 	lwi	r19, r1, 8
200421ec:	ea81000c 	lwi	r20, r1, 12
200421f0:	30210010 	addik	r1, r1, 16
200421f4:	b60f0008 	rtsd	r15, 8
200421f8:	80000000 	or	r0, r0, r0

200421fc <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200421fc:	3021ffe8 	addik	r1, r1, -24
20042200:	fa610010 	swi	r19, r1, 16
20042204:	fa810014 	swi	r20, r1, 20
20042208:	12610000 	addk	r19, r1, r0
2004220c:	96808000 	mfs	r20, rpc
20042210:	b000dffb 	imm	-8197
20042214:	3294f750 	addik	r20, r20, -2224
20042218:	f8b3001c 	swi	r5, r19, 28
2004221c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20042220:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20042224:	f8130004 	swi	r0, r19, 4
20042228:	b8000054 	bri	84		// 2004227c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
2004222c:	e873001c 	lwi	r3, r19, 28
20042230:	e8630010 	lwi	r3, r3, 16
20042234:	e8830000 	lwi	r4, r3, 0
20042238:	e873001c 	lwi	r3, r19, 28
2004223c:	e8a3000c 	lwi	r5, r3, 12
20042240:	e8730004 	lwi	r3, r19, 4
20042244:	64630402 	bslli	r3, r3, 2
20042248:	10651800 	addk	r3, r5, r3
2004224c:	e8630000 	lwi	r3, r3, 0
20042250:	14632000 	rsubk	r3, r3, r4
20042254:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20042258:	e8930008 	lwi	r4, r19, 8
2004225c:	e873000c 	lwi	r3, r19, 12
20042260:	16441803 	cmpu	r18, r4, r3
20042264:	bcb20008 	bgei	r18, 8		// 2004226c
20042268:	10640000 	addk	r3, r4, r0
2004226c:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20042270:	e8730004 	lwi	r3, r19, 4
20042274:	30630001 	addik	r3, r3, 1
20042278:	f8730004 	swi	r3, r19, 4
2004227c:	e8930004 	lwi	r4, r19, 4
20042280:	e8730020 	lwi	r3, r19, 32
20042284:	16432003 	cmpu	r18, r3, r4
20042288:	bc52ffa4 	blti	r18, -92		// 2004222c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2004228c:	e873001c 	lwi	r3, r19, 28
20042290:	e8830000 	lwi	r4, r3, 0
20042294:	e8730008 	lwi	r3, r19, 8
20042298:	14632000 	rsubk	r3, r3, r4
}
2004229c:	10330000 	addk	r1, r19, r0
200422a0:	ea610010 	lwi	r19, r1, 16
200422a4:	ea810014 	lwi	r20, r1, 20
200422a8:	30210018 	addik	r1, r1, 24
200422ac:	b60f0008 	rtsd	r15, 8
200422b0:	80000000 	or	r0, r0, r0

200422b4 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200422b4:	3021fff0 	addik	r1, r1, -16
200422b8:	fa610008 	swi	r19, r1, 8
200422bc:	fa81000c 	swi	r20, r1, 12
200422c0:	12610000 	addk	r19, r1, r0
200422c4:	96808000 	mfs	r20, rpc
200422c8:	b000dffb 	imm	-8197
200422cc:	3294f698 	addik	r20, r20, -2408
200422d0:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200422d4:	e8730014 	lwi	r3, r19, 20
200422d8:	e8630010 	lwi	r3, r3, 16
200422dc:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200422e0:	f8130004 	swi	r0, r19, 4
200422e4:	b8000028 	bri	40		// 2004230c
        fifo->read_inds[i] = 0;
200422e8:	e8730014 	lwi	r3, r19, 20
200422ec:	e883000c 	lwi	r4, r3, 12
200422f0:	e8730004 	lwi	r3, r19, 4
200422f4:	64630402 	bslli	r3, r3, 2
200422f8:	10641800 	addk	r3, r4, r3
200422fc:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20042300:	e8730004 	lwi	r3, r19, 4
20042304:	30630001 	addik	r3, r3, 1
20042308:	f8730004 	swi	r3, r19, 4
2004230c:	e8730014 	lwi	r3, r19, 20
20042310:	e8830008 	lwi	r4, r3, 8
20042314:	e8730004 	lwi	r3, r19, 4
20042318:	16441803 	cmpu	r18, r4, r3
2004231c:	bc52ffcc 	blti	r18, -52		// 200422e8
        fifo->read_inds[i] = 0;
    }
}
20042320:	10330000 	addk	r1, r19, r0
20042324:	ea610008 	lwi	r19, r1, 8
20042328:	ea81000c 	lwi	r20, r1, 12
2004232c:	30210010 	addik	r1, r1, 16
20042330:	b60f0008 	rtsd	r15, 8
20042334:	80000000 	or	r0, r0, r0

20042338 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20042338:	3021fff0 	addik	r1, r1, -16
2004233c:	fa610008 	swi	r19, r1, 8
20042340:	fa81000c 	swi	r20, r1, 12
20042344:	12610000 	addk	r19, r1, r0
20042348:	96808000 	mfs	r20, rpc
2004234c:	b000dffb 	imm	-8197
20042350:	3294f614 	addik	r20, r20, -2540
20042354:	f8b30014 	swi	r5, r19, 20
20042358:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
2004235c:	e8730014 	lwi	r3, r19, 20
20042360:	e8830004 	lwi	r4, r3, 4
20042364:	e8730014 	lwi	r3, r19, 20
20042368:	e8a3000c 	lwi	r5, r3, 12
2004236c:	e8730018 	lwi	r3, r19, 24
20042370:	64630402 	bslli	r3, r3, 2
20042374:	10651800 	addk	r3, r5, r3
20042378:	e8a30000 	lwi	r5, r3, 0
2004237c:	e8730014 	lwi	r3, r19, 20
20042380:	e8630000 	lwi	r3, r3, 0
20042384:	3063ffff 	addik	r3, r3, -1
20042388:	84651800 	and	r3, r5, r3
2004238c:	10631800 	addk	r3, r3, r3
20042390:	10641800 	addk	r3, r4, r3
20042394:	e4630000 	lhui	r3, r3, 0
20042398:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
2004239c:	e8730014 	lwi	r3, r19, 20
200423a0:	e883000c 	lwi	r4, r3, 12
200423a4:	e8730018 	lwi	r3, r19, 24
200423a8:	64630402 	bslli	r3, r3, 2
200423ac:	10641800 	addk	r3, r4, r3
200423b0:	e8830000 	lwi	r4, r3, 0
200423b4:	30840001 	addik	r4, r4, 1
200423b8:	f8830000 	swi	r4, r3, 0
    return value;
200423bc:	e4730004 	lhui	r3, r19, 4
}
200423c0:	10330000 	addk	r1, r19, r0
200423c4:	ea610008 	lwi	r19, r1, 8
200423c8:	ea81000c 	lwi	r20, r1, 12
200423cc:	30210010 	addik	r1, r1, 16
200423d0:	b60f0008 	rtsd	r15, 8
200423d4:	80000000 	or	r0, r0, r0

200423d8 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200423d8:	3021fff4 	addik	r1, r1, -12
200423dc:	fa610004 	swi	r19, r1, 4
200423e0:	fa810008 	swi	r20, r1, 8
200423e4:	12610000 	addk	r19, r1, r0
200423e8:	96808000 	mfs	r20, rpc
200423ec:	b000dffb 	imm	-8197
200423f0:	3294f574 	addik	r20, r20, -2700
200423f4:	f8b30010 	swi	r5, r19, 16
200423f8:	10660000 	addk	r3, r6, r0
200423fc:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20042400:	e8730010 	lwi	r3, r19, 16
20042404:	e8830004 	lwi	r4, r3, 4
20042408:	e8730010 	lwi	r3, r19, 16
2004240c:	e8630010 	lwi	r3, r3, 16
20042410:	e8a30000 	lwi	r5, r3, 0
20042414:	e8730010 	lwi	r3, r19, 16
20042418:	e8630000 	lwi	r3, r3, 0
2004241c:	3063ffff 	addik	r3, r3, -1
20042420:	84651800 	and	r3, r5, r3
20042424:	10631800 	addk	r3, r3, r3
20042428:	10641800 	addk	r3, r4, r3
2004242c:	e4930014 	lhui	r4, r19, 20
20042430:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
20042434:	e8730010 	lwi	r3, r19, 16
20042438:	e8630010 	lwi	r3, r3, 16
2004243c:	e8830000 	lwi	r4, r3, 0
20042440:	30840001 	addik	r4, r4, 1
20042444:	f8830000 	swi	r4, r3, 0
}
20042448:	10330000 	addk	r1, r19, r0
2004244c:	ea610004 	lwi	r19, r1, 4
20042450:	ea810008 	lwi	r20, r1, 8
20042454:	3021000c 	addik	r1, r1, 12
20042458:	b60f0008 	rtsd	r15, 8
2004245c:	80000000 	or	r0, r0, r0

20042460 <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20042460:	3021fff4 	addik	r1, r1, -12
20042464:	fa610004 	swi	r19, r1, 4
20042468:	fa810008 	swi	r20, r1, 8
2004246c:	12610000 	addk	r19, r1, r0
20042470:	96808000 	mfs	r20, rpc
20042474:	b000dffb 	imm	-8197
20042478:	3294f4ec 	addik	r20, r20, -2836
2004247c:	f8b30010 	swi	r5, r19, 16
20042480:	f8d30014 	swi	r6, r19, 20
20042484:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20042488:	e8730010 	lwi	r3, r19, 16
2004248c:	e8630010 	lwi	r3, r3, 16
20042490:	e8830000 	lwi	r4, r3, 0
20042494:	e8730010 	lwi	r3, r19, 16
20042498:	e8a3000c 	lwi	r5, r3, 12
2004249c:	e8730014 	lwi	r3, r19, 20
200424a0:	64630402 	bslli	r3, r3, 2
200424a4:	10651800 	addk	r3, r5, r3
200424a8:	e8630000 	lwi	r3, r3, 0
200424ac:	14a32000 	rsubk	r5, r3, r4
200424b0:	30600001 	addik	r3, r0, 1
200424b4:	e8930018 	lwi	r4, r19, 24
200424b8:	16442803 	cmpu	r18, r4, r5
200424bc:	bcb20008 	bgei	r18, 8		// 200424c4
200424c0:	10600000 	addk	r3, r0, r0
200424c4:	a46300ff 	andi	r3, r3, 255
}
200424c8:	10330000 	addk	r1, r19, r0
200424cc:	ea610004 	lwi	r19, r1, 4
200424d0:	ea810008 	lwi	r20, r1, 8
200424d4:	3021000c 	addik	r1, r1, 12
200424d8:	b60f0008 	rtsd	r15, 8
200424dc:	80000000 	or	r0, r0, r0

200424e0 <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200424e0:	3021fff4 	addik	r1, r1, -12
200424e4:	fa610004 	swi	r19, r1, 4
200424e8:	fa810008 	swi	r20, r1, 8
200424ec:	12610000 	addk	r19, r1, r0
200424f0:	96808000 	mfs	r20, rpc
200424f4:	b000dffb 	imm	-8197
200424f8:	3294f46c 	addik	r20, r20, -2964
200424fc:	f8b30010 	swi	r5, r19, 16
20042500:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20042504:	e8730010 	lwi	r3, r19, 16
20042508:	e8630010 	lwi	r3, r3, 16
2004250c:	e8830000 	lwi	r4, r3, 0
20042510:	e8730010 	lwi	r3, r19, 16
20042514:	e8a3000c 	lwi	r5, r3, 12
20042518:	e8730014 	lwi	r3, r19, 20
2004251c:	64630402 	bslli	r3, r3, 2
20042520:	10651800 	addk	r3, r5, r3
20042524:	e8630000 	lwi	r3, r3, 0
20042528:	14632000 	rsubk	r3, r3, r4
}
2004252c:	10330000 	addk	r1, r19, r0
20042530:	ea610004 	lwi	r19, r1, 4
20042534:	ea810008 	lwi	r20, r1, 8
20042538:	3021000c 	addik	r1, r1, 12
2004253c:	b60f0008 	rtsd	r15, 8
20042540:	80000000 	or	r0, r0, r0

20042544 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20042544:	3021fff0 	addik	r1, r1, -16
20042548:	fa610008 	swi	r19, r1, 8
2004254c:	fa81000c 	swi	r20, r1, 12
20042550:	12610000 	addk	r19, r1, r0
20042554:	96808000 	mfs	r20, rpc
20042558:	b000dffb 	imm	-8197
2004255c:	3294f408 	addik	r20, r20, -3064
20042560:	f8b30014 	swi	r5, r19, 20
20042564:	f8d30018 	swi	r6, r19, 24
20042568:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2004256c:	f8130004 	swi	r0, r19, 4
20042570:	b800005c 	bri	92		// 200425cc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20042574:	e8730014 	lwi	r3, r19, 20
20042578:	e8830000 	lwi	r4, r3, 0
2004257c:	e8730014 	lwi	r3, r19, 20
20042580:	e8a3000c 	lwi	r5, r3, 12
20042584:	e8730004 	lwi	r3, r19, 4
20042588:	64630402 	bslli	r3, r3, 2
2004258c:	10651800 	addk	r3, r5, r3
20042590:	e8a30000 	lwi	r5, r3, 0
20042594:	e8730014 	lwi	r3, r19, 20
20042598:	e8630010 	lwi	r3, r3, 16
2004259c:	e8630000 	lwi	r3, r3, 0
200425a0:	14632800 	rsubk	r3, r3, r5
200425a4:	10641800 	addk	r3, r4, r3
200425a8:	30830001 	addik	r4, r3, 1
200425ac:	e873001c 	lwi	r3, r19, 28
200425b0:	16441803 	cmpu	r18, r4, r3
200425b4:	bc52000c 	blti	r18, 12		// 200425c0
            return 0;
200425b8:	10600000 	addk	r3, r0, r0
200425bc:	b8000024 	bri	36		// 200425e0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200425c0:	e8730004 	lwi	r3, r19, 4
200425c4:	30630001 	addik	r3, r3, 1
200425c8:	f8730004 	swi	r3, r19, 4
200425cc:	e8930004 	lwi	r4, r19, 4
200425d0:	e8730018 	lwi	r3, r19, 24
200425d4:	16432003 	cmpu	r18, r3, r4
200425d8:	bc52ff9c 	blti	r18, -100		// 20042574
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200425dc:	30600001 	addik	r3, r0, 1
}
200425e0:	10330000 	addk	r1, r19, r0
200425e4:	ea610008 	lwi	r19, r1, 8
200425e8:	ea81000c 	lwi	r20, r1, 12
200425ec:	30210010 	addik	r1, r1, 16
200425f0:	b60f0008 	rtsd	r15, 8
200425f4:	80000000 	or	r0, r0, r0

200425f8 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200425f8:	3021ffe8 	addik	r1, r1, -24
200425fc:	fa610010 	swi	r19, r1, 16
20042600:	fa810014 	swi	r20, r1, 20
20042604:	12610000 	addk	r19, r1, r0
20042608:	96808000 	mfs	r20, rpc
2004260c:	b000dffb 	imm	-8197
20042610:	3294f354 	addik	r20, r20, -3244
20042614:	f8b3001c 	swi	r5, r19, 28
20042618:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
2004261c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20042620:	f8130004 	swi	r0, r19, 4
20042624:	b8000054 	bri	84		// 20042678
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20042628:	e873001c 	lwi	r3, r19, 28
2004262c:	e8630010 	lwi	r3, r3, 16
20042630:	e8830000 	lwi	r4, r3, 0
20042634:	e873001c 	lwi	r3, r19, 28
20042638:	e8a3000c 	lwi	r5, r3, 12
2004263c:	e8730004 	lwi	r3, r19, 4
20042640:	64630402 	bslli	r3, r3, 2
20042644:	10651800 	addk	r3, r5, r3
20042648:	e8630000 	lwi	r3, r3, 0
2004264c:	14632000 	rsubk	r3, r3, r4
20042650:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20042654:	e8930008 	lwi	r4, r19, 8
20042658:	e873000c 	lwi	r3, r19, 12
2004265c:	16441803 	cmpu	r18, r4, r3
20042660:	bcb20008 	bgei	r18, 8		// 20042668
20042664:	10640000 	addk	r3, r4, r0
20042668:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
2004266c:	e8730004 	lwi	r3, r19, 4
20042670:	30630001 	addik	r3, r3, 1
20042674:	f8730004 	swi	r3, r19, 4
20042678:	e8930004 	lwi	r4, r19, 4
2004267c:	e8730020 	lwi	r3, r19, 32
20042680:	16432003 	cmpu	r18, r3, r4
20042684:	bc52ffa4 	blti	r18, -92		// 20042628
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20042688:	e873001c 	lwi	r3, r19, 28
2004268c:	e8830000 	lwi	r4, r3, 0
20042690:	e8730008 	lwi	r3, r19, 8
20042694:	14632000 	rsubk	r3, r3, r4
}
20042698:	10330000 	addk	r1, r19, r0
2004269c:	ea610010 	lwi	r19, r1, 16
200426a0:	ea810014 	lwi	r20, r1, 20
200426a4:	30210018 	addik	r1, r1, 24
200426a8:	b60f0008 	rtsd	r15, 8
200426ac:	80000000 	or	r0, r0, r0

200426b0 <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
200426b0:	3021fff0 	addik	r1, r1, -16
200426b4:	fa610008 	swi	r19, r1, 8
200426b8:	fa81000c 	swi	r20, r1, 12
200426bc:	12610000 	addk	r19, r1, r0
200426c0:	96808000 	mfs	r20, rpc
200426c4:	b000dffb 	imm	-8197
200426c8:	3294f29c 	addik	r20, r20, -3428
200426cc:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
200426d0:	e8730014 	lwi	r3, r19, 20
200426d4:	e8630010 	lwi	r3, r3, 16
200426d8:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
200426dc:	f8130004 	swi	r0, r19, 4
200426e0:	b8000028 	bri	40		// 20042708
        fifo->read_inds[i] = 0;
200426e4:	e8730014 	lwi	r3, r19, 20
200426e8:	e883000c 	lwi	r4, r3, 12
200426ec:	e8730004 	lwi	r3, r19, 4
200426f0:	64630402 	bslli	r3, r3, 2
200426f4:	10641800 	addk	r3, r4, r3
200426f8:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
200426fc:	e8730004 	lwi	r3, r19, 4
20042700:	30630001 	addik	r3, r3, 1
20042704:	f8730004 	swi	r3, r19, 4
20042708:	e8730014 	lwi	r3, r19, 20
2004270c:	e8830008 	lwi	r4, r3, 8
20042710:	e8730004 	lwi	r3, r19, 4
20042714:	16441803 	cmpu	r18, r4, r3
20042718:	bc52ffcc 	blti	r18, -52		// 200426e4
        fifo->read_inds[i] = 0;
    }
}
2004271c:	10330000 	addk	r1, r19, r0
20042720:	ea610008 	lwi	r19, r1, 8
20042724:	ea81000c 	lwi	r20, r1, 12
20042728:	30210010 	addik	r1, r1, 16
2004272c:	b60f0008 	rtsd	r15, 8
20042730:	80000000 	or	r0, r0, r0

20042734 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20042734:	3021fff0 	addik	r1, r1, -16
20042738:	fa610008 	swi	r19, r1, 8
2004273c:	fa81000c 	swi	r20, r1, 12
20042740:	12610000 	addk	r19, r1, r0
20042744:	96808000 	mfs	r20, rpc
20042748:	b000dffb 	imm	-8197
2004274c:	3294f218 	addik	r20, r20, -3560
20042750:	f8b30014 	swi	r5, r19, 20
20042754:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20042758:	e8730014 	lwi	r3, r19, 20
2004275c:	e8830004 	lwi	r4, r3, 4
20042760:	e8730014 	lwi	r3, r19, 20
20042764:	e8a3000c 	lwi	r5, r3, 12
20042768:	e8730018 	lwi	r3, r19, 24
2004276c:	64630402 	bslli	r3, r3, 2
20042770:	10651800 	addk	r3, r5, r3
20042774:	e8a30000 	lwi	r5, r3, 0
20042778:	e8730014 	lwi	r3, r19, 20
2004277c:	e8630000 	lwi	r3, r3, 0
20042780:	3063ffff 	addik	r3, r3, -1
20042784:	84651800 	and	r3, r5, r3
20042788:	64630402 	bslli	r3, r3, 2
2004278c:	10641800 	addk	r3, r4, r3
20042790:	e8630000 	lwi	r3, r3, 0
20042794:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20042798:	e8730014 	lwi	r3, r19, 20
2004279c:	e883000c 	lwi	r4, r3, 12
200427a0:	e8730018 	lwi	r3, r19, 24
200427a4:	64630402 	bslli	r3, r3, 2
200427a8:	10641800 	addk	r3, r4, r3
200427ac:	e8830000 	lwi	r4, r3, 0
200427b0:	30840001 	addik	r4, r4, 1
200427b4:	f8830000 	swi	r4, r3, 0
    return value;
200427b8:	e8730004 	lwi	r3, r19, 4
}
200427bc:	10330000 	addk	r1, r19, r0
200427c0:	ea610008 	lwi	r19, r1, 8
200427c4:	ea81000c 	lwi	r20, r1, 12
200427c8:	30210010 	addik	r1, r1, 16
200427cc:	b60f0008 	rtsd	r15, 8
200427d0:	80000000 	or	r0, r0, r0

200427d4 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
200427d4:	3021fff4 	addik	r1, r1, -12
200427d8:	fa610004 	swi	r19, r1, 4
200427dc:	fa810008 	swi	r20, r1, 8
200427e0:	12610000 	addk	r19, r1, r0
200427e4:	96808000 	mfs	r20, rpc
200427e8:	b000dffb 	imm	-8197
200427ec:	3294f178 	addik	r20, r20, -3720
200427f0:	f8b30010 	swi	r5, r19, 16
200427f4:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
200427f8:	e8730010 	lwi	r3, r19, 16
200427fc:	e8830004 	lwi	r4, r3, 4
20042800:	e8730010 	lwi	r3, r19, 16
20042804:	e8630010 	lwi	r3, r3, 16
20042808:	e8a30000 	lwi	r5, r3, 0
2004280c:	e8730010 	lwi	r3, r19, 16
20042810:	e8630000 	lwi	r3, r3, 0
20042814:	3063ffff 	addik	r3, r3, -1
20042818:	84651800 	and	r3, r5, r3
2004281c:	64630402 	bslli	r3, r3, 2
20042820:	10641800 	addk	r3, r4, r3
20042824:	e8930014 	lwi	r4, r19, 20
20042828:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2004282c:	e8730010 	lwi	r3, r19, 16
20042830:	e8630010 	lwi	r3, r3, 16
20042834:	e8830000 	lwi	r4, r3, 0
20042838:	30840001 	addik	r4, r4, 1
2004283c:	f8830000 	swi	r4, r3, 0
}
20042840:	10330000 	addk	r1, r19, r0
20042844:	ea610004 	lwi	r19, r1, 4
20042848:	ea810008 	lwi	r20, r1, 8
2004284c:	3021000c 	addik	r1, r1, 12
20042850:	b60f0008 	rtsd	r15, 8
20042854:	80000000 	or	r0, r0, r0

20042858 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20042858:	3021fff4 	addik	r1, r1, -12
2004285c:	fa610004 	swi	r19, r1, 4
20042860:	fa810008 	swi	r20, r1, 8
20042864:	12610000 	addk	r19, r1, r0
20042868:	96808000 	mfs	r20, rpc
2004286c:	b000dffb 	imm	-8197
20042870:	3294f0f4 	addik	r20, r20, -3852
20042874:	f8b30010 	swi	r5, r19, 16
20042878:	f8d30014 	swi	r6, r19, 20
2004287c:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20042880:	e8730010 	lwi	r3, r19, 16
20042884:	e8630010 	lwi	r3, r3, 16
20042888:	e8830000 	lwi	r4, r3, 0
2004288c:	e8730010 	lwi	r3, r19, 16
20042890:	e8a3000c 	lwi	r5, r3, 12
20042894:	e8730014 	lwi	r3, r19, 20
20042898:	64630402 	bslli	r3, r3, 2
2004289c:	10651800 	addk	r3, r5, r3
200428a0:	e8630000 	lwi	r3, r3, 0
200428a4:	14a32000 	rsubk	r5, r3, r4
200428a8:	30600001 	addik	r3, r0, 1
200428ac:	e8930018 	lwi	r4, r19, 24
200428b0:	16442803 	cmpu	r18, r4, r5
200428b4:	bcb20008 	bgei	r18, 8		// 200428bc
200428b8:	10600000 	addk	r3, r0, r0
200428bc:	a46300ff 	andi	r3, r3, 255
}
200428c0:	10330000 	addk	r1, r19, r0
200428c4:	ea610004 	lwi	r19, r1, 4
200428c8:	ea810008 	lwi	r20, r1, 8
200428cc:	3021000c 	addik	r1, r1, 12
200428d0:	b60f0008 	rtsd	r15, 8
200428d4:	80000000 	or	r0, r0, r0

200428d8 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200428d8:	3021fff4 	addik	r1, r1, -12
200428dc:	fa610004 	swi	r19, r1, 4
200428e0:	fa810008 	swi	r20, r1, 8
200428e4:	12610000 	addk	r19, r1, r0
200428e8:	96808000 	mfs	r20, rpc
200428ec:	b000dffb 	imm	-8197
200428f0:	3294f074 	addik	r20, r20, -3980
200428f4:	f8b30010 	swi	r5, r19, 16
200428f8:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200428fc:	e8730010 	lwi	r3, r19, 16
20042900:	e8630010 	lwi	r3, r3, 16
20042904:	e8830000 	lwi	r4, r3, 0
20042908:	e8730010 	lwi	r3, r19, 16
2004290c:	e8a3000c 	lwi	r5, r3, 12
20042910:	e8730014 	lwi	r3, r19, 20
20042914:	64630402 	bslli	r3, r3, 2
20042918:	10651800 	addk	r3, r5, r3
2004291c:	e8630000 	lwi	r3, r3, 0
20042920:	14632000 	rsubk	r3, r3, r4
}
20042924:	10330000 	addk	r1, r19, r0
20042928:	ea610004 	lwi	r19, r1, 4
2004292c:	ea810008 	lwi	r20, r1, 8
20042930:	3021000c 	addik	r1, r1, 12
20042934:	b60f0008 	rtsd	r15, 8
20042938:	80000000 	or	r0, r0, r0

2004293c <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
2004293c:	3021fff0 	addik	r1, r1, -16
20042940:	fa610008 	swi	r19, r1, 8
20042944:	fa81000c 	swi	r20, r1, 12
20042948:	12610000 	addk	r19, r1, r0
2004294c:	96808000 	mfs	r20, rpc
20042950:	b000dffb 	imm	-8197
20042954:	3294f010 	addik	r20, r20, -4080
20042958:	f8b30014 	swi	r5, r19, 20
2004295c:	f8d30018 	swi	r6, r19, 24
20042960:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20042964:	f8130004 	swi	r0, r19, 4
20042968:	b800005c 	bri	92		// 200429c4
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
2004296c:	e8730014 	lwi	r3, r19, 20
20042970:	e8830000 	lwi	r4, r3, 0
20042974:	e8730014 	lwi	r3, r19, 20
20042978:	e8a3000c 	lwi	r5, r3, 12
2004297c:	e8730004 	lwi	r3, r19, 4
20042980:	64630402 	bslli	r3, r3, 2
20042984:	10651800 	addk	r3, r5, r3
20042988:	e8a30000 	lwi	r5, r3, 0
2004298c:	e8730014 	lwi	r3, r19, 20
20042990:	e8630010 	lwi	r3, r3, 16
20042994:	e8630000 	lwi	r3, r3, 0
20042998:	14632800 	rsubk	r3, r3, r5
2004299c:	10641800 	addk	r3, r4, r3
200429a0:	30830001 	addik	r4, r3, 1
200429a4:	e873001c 	lwi	r3, r19, 28
200429a8:	16441803 	cmpu	r18, r4, r3
200429ac:	bc52000c 	blti	r18, 12		// 200429b8
            return 0;
200429b0:	10600000 	addk	r3, r0, r0
200429b4:	b8000024 	bri	36		// 200429d8
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200429b8:	e8730004 	lwi	r3, r19, 4
200429bc:	30630001 	addik	r3, r3, 1
200429c0:	f8730004 	swi	r3, r19, 4
200429c4:	e8930004 	lwi	r4, r19, 4
200429c8:	e8730018 	lwi	r3, r19, 24
200429cc:	16432003 	cmpu	r18, r3, r4
200429d0:	bc52ff9c 	blti	r18, -100		// 2004296c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
200429d4:	30600001 	addik	r3, r0, 1
}
200429d8:	10330000 	addk	r1, r19, r0
200429dc:	ea610008 	lwi	r19, r1, 8
200429e0:	ea81000c 	lwi	r20, r1, 12
200429e4:	30210010 	addik	r1, r1, 16
200429e8:	b60f0008 	rtsd	r15, 8
200429ec:	80000000 	or	r0, r0, r0

200429f0 <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
200429f0:	3021ffe8 	addik	r1, r1, -24
200429f4:	fa610010 	swi	r19, r1, 16
200429f8:	fa810014 	swi	r20, r1, 20
200429fc:	12610000 	addk	r19, r1, r0
20042a00:	96808000 	mfs	r20, rpc
20042a04:	b000dffb 	imm	-8197
20042a08:	3294ef5c 	addik	r20, r20, -4260
20042a0c:	f8b3001c 	swi	r5, r19, 28
20042a10:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20042a14:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20042a18:	f8130004 	swi	r0, r19, 4
20042a1c:	b8000054 	bri	84		// 20042a70
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20042a20:	e873001c 	lwi	r3, r19, 28
20042a24:	e8630010 	lwi	r3, r3, 16
20042a28:	e8830000 	lwi	r4, r3, 0
20042a2c:	e873001c 	lwi	r3, r19, 28
20042a30:	e8a3000c 	lwi	r5, r3, 12
20042a34:	e8730004 	lwi	r3, r19, 4
20042a38:	64630402 	bslli	r3, r3, 2
20042a3c:	10651800 	addk	r3, r5, r3
20042a40:	e8630000 	lwi	r3, r3, 0
20042a44:	14632000 	rsubk	r3, r3, r4
20042a48:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20042a4c:	e8930008 	lwi	r4, r19, 8
20042a50:	e873000c 	lwi	r3, r19, 12
20042a54:	16441803 	cmpu	r18, r4, r3
20042a58:	bcb20008 	bgei	r18, 8		// 20042a60
20042a5c:	10640000 	addk	r3, r4, r0
20042a60:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20042a64:	e8730004 	lwi	r3, r19, 4
20042a68:	30630001 	addik	r3, r3, 1
20042a6c:	f8730004 	swi	r3, r19, 4
20042a70:	e8930004 	lwi	r4, r19, 4
20042a74:	e8730020 	lwi	r3, r19, 32
20042a78:	16432003 	cmpu	r18, r3, r4
20042a7c:	bc52ffa4 	blti	r18, -92		// 20042a20
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20042a80:	e873001c 	lwi	r3, r19, 28
20042a84:	e8830000 	lwi	r4, r3, 0
20042a88:	e8730008 	lwi	r3, r19, 8
20042a8c:	14632000 	rsubk	r3, r3, r4
}
20042a90:	10330000 	addk	r1, r19, r0
20042a94:	ea610010 	lwi	r19, r1, 16
20042a98:	ea810014 	lwi	r20, r1, 20
20042a9c:	30210018 	addik	r1, r1, 24
20042aa0:	b60f0008 	rtsd	r15, 8
20042aa4:	80000000 	or	r0, r0, r0

20042aa8 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20042aa8:	3021fff0 	addik	r1, r1, -16
20042aac:	fa610008 	swi	r19, r1, 8
20042ab0:	fa81000c 	swi	r20, r1, 12
20042ab4:	12610000 	addk	r19, r1, r0
20042ab8:	96808000 	mfs	r20, rpc
20042abc:	b000dffb 	imm	-8197
20042ac0:	3294eea4 	addik	r20, r20, -4444
20042ac4:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20042ac8:	e8730014 	lwi	r3, r19, 20
20042acc:	e8630010 	lwi	r3, r3, 16
20042ad0:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20042ad4:	f8130004 	swi	r0, r19, 4
20042ad8:	b8000028 	bri	40		// 20042b00
        fifo->read_inds[i] = 0;
20042adc:	e8730014 	lwi	r3, r19, 20
20042ae0:	e883000c 	lwi	r4, r3, 12
20042ae4:	e8730004 	lwi	r3, r19, 4
20042ae8:	64630402 	bslli	r3, r3, 2
20042aec:	10641800 	addk	r3, r4, r3
20042af0:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20042af4:	e8730004 	lwi	r3, r19, 4
20042af8:	30630001 	addik	r3, r3, 1
20042afc:	f8730004 	swi	r3, r19, 4
20042b00:	e8730014 	lwi	r3, r19, 20
20042b04:	e8830008 	lwi	r4, r3, 8
20042b08:	e8730004 	lwi	r3, r19, 4
20042b0c:	16441803 	cmpu	r18, r4, r3
20042b10:	bc52ffcc 	blti	r18, -52		// 20042adc
        fifo->read_inds[i] = 0;
    }
}
20042b14:	10330000 	addk	r1, r19, r0
20042b18:	ea610008 	lwi	r19, r1, 8
20042b1c:	ea81000c 	lwi	r20, r1, 12
20042b20:	30210010 	addik	r1, r1, 16
20042b24:	b60f0008 	rtsd	r15, 8
20042b28:	80000000 	or	r0, r0, r0

20042b2c <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20042b2c:	3021ffec 	addik	r1, r1, -20
20042b30:	fa61000c 	swi	r19, r1, 12
20042b34:	fa810010 	swi	r20, r1, 16
20042b38:	12610000 	addk	r19, r1, r0
20042b3c:	96808000 	mfs	r20, rpc
20042b40:	b000dffb 	imm	-8197
20042b44:	3294ee20 	addik	r20, r20, -4576
20042b48:	f8b30018 	swi	r5, r19, 24
20042b4c:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20042b50:	e8730018 	lwi	r3, r19, 24
20042b54:	e8830004 	lwi	r4, r3, 4
20042b58:	e8730018 	lwi	r3, r19, 24
20042b5c:	e8a3000c 	lwi	r5, r3, 12
20042b60:	e873001c 	lwi	r3, r19, 28
20042b64:	64630402 	bslli	r3, r3, 2
20042b68:	10651800 	addk	r3, r5, r3
20042b6c:	e8a30000 	lwi	r5, r3, 0
20042b70:	e8730018 	lwi	r3, r19, 24
20042b74:	e8630000 	lwi	r3, r3, 0
20042b78:	3063ffff 	addik	r3, r3, -1
20042b7c:	84651800 	and	r3, r5, r3
20042b80:	64630403 	bslli	r3, r3, 3
20042b84:	10641800 	addk	r3, r4, r3
20042b88:	e8830000 	lwi	r4, r3, 0
20042b8c:	e8a30004 	lwi	r5, r3, 4
20042b90:	f8930004 	swi	r4, r19, 4
20042b94:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20042b98:	e8730018 	lwi	r3, r19, 24
20042b9c:	e883000c 	lwi	r4, r3, 12
20042ba0:	e873001c 	lwi	r3, r19, 28
20042ba4:	64630402 	bslli	r3, r3, 2
20042ba8:	10641800 	addk	r3, r4, r3
20042bac:	e8830000 	lwi	r4, r3, 0
20042bb0:	30840001 	addik	r4, r4, 1
20042bb4:	f8830000 	swi	r4, r3, 0
    return value;
20042bb8:	e8930004 	lwi	r4, r19, 4
20042bbc:	e8b30008 	lwi	r5, r19, 8
}
20042bc0:	10640000 	addk	r3, r4, r0
20042bc4:	10850000 	addk	r4, r5, r0
20042bc8:	10330000 	addk	r1, r19, r0
20042bcc:	ea61000c 	lwi	r19, r1, 12
20042bd0:	ea810010 	lwi	r20, r1, 16
20042bd4:	30210014 	addik	r1, r1, 20
20042bd8:	b60f0008 	rtsd	r15, 8
20042bdc:	80000000 	or	r0, r0, r0

20042be0 <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20042be0:	3021fff4 	addik	r1, r1, -12
20042be4:	fa610004 	swi	r19, r1, 4
20042be8:	fa810008 	swi	r20, r1, 8
20042bec:	12610000 	addk	r19, r1, r0
20042bf0:	96808000 	mfs	r20, rpc
20042bf4:	b000dffb 	imm	-8197
20042bf8:	3294ed6c 	addik	r20, r20, -4756
20042bfc:	f8b30010 	swi	r5, r19, 16
20042c00:	f8d30014 	swi	r6, r19, 20
20042c04:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20042c08:	e8730010 	lwi	r3, r19, 16
20042c0c:	e8830004 	lwi	r4, r3, 4
20042c10:	e8730010 	lwi	r3, r19, 16
20042c14:	e8630010 	lwi	r3, r3, 16
20042c18:	e8a30000 	lwi	r5, r3, 0
20042c1c:	e8730010 	lwi	r3, r19, 16
20042c20:	e8630000 	lwi	r3, r3, 0
20042c24:	3063ffff 	addik	r3, r3, -1
20042c28:	84651800 	and	r3, r5, r3
20042c2c:	64630403 	bslli	r3, r3, 3
20042c30:	10641800 	addk	r3, r4, r3
20042c34:	e8930014 	lwi	r4, r19, 20
20042c38:	e8b30018 	lwi	r5, r19, 24
20042c3c:	f8830000 	swi	r4, r3, 0
20042c40:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
20042c44:	e8730010 	lwi	r3, r19, 16
20042c48:	e8630010 	lwi	r3, r3, 16
20042c4c:	e8830000 	lwi	r4, r3, 0
20042c50:	30840001 	addik	r4, r4, 1
20042c54:	f8830000 	swi	r4, r3, 0
}
20042c58:	10330000 	addk	r1, r19, r0
20042c5c:	ea610004 	lwi	r19, r1, 4
20042c60:	ea810008 	lwi	r20, r1, 8
20042c64:	3021000c 	addik	r1, r1, 12
20042c68:	b60f0008 	rtsd	r15, 8
20042c6c:	80000000 	or	r0, r0, r0

20042c70 <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20042c70:	3021fff4 	addik	r1, r1, -12
20042c74:	fa610004 	swi	r19, r1, 4
20042c78:	fa810008 	swi	r20, r1, 8
20042c7c:	12610000 	addk	r19, r1, r0
20042c80:	96808000 	mfs	r20, rpc
20042c84:	b000dffb 	imm	-8197
20042c88:	3294ecdc 	addik	r20, r20, -4900
20042c8c:	f8b30010 	swi	r5, r19, 16
20042c90:	f8d30014 	swi	r6, r19, 20
20042c94:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20042c98:	e8730010 	lwi	r3, r19, 16
20042c9c:	e8630010 	lwi	r3, r3, 16
20042ca0:	e8830000 	lwi	r4, r3, 0
20042ca4:	e8730010 	lwi	r3, r19, 16
20042ca8:	e8a3000c 	lwi	r5, r3, 12
20042cac:	e8730014 	lwi	r3, r19, 20
20042cb0:	64630402 	bslli	r3, r3, 2
20042cb4:	10651800 	addk	r3, r5, r3
20042cb8:	e8630000 	lwi	r3, r3, 0
20042cbc:	14a32000 	rsubk	r5, r3, r4
20042cc0:	30600001 	addik	r3, r0, 1
20042cc4:	e8930018 	lwi	r4, r19, 24
20042cc8:	16442803 	cmpu	r18, r4, r5
20042ccc:	bcb20008 	bgei	r18, 8		// 20042cd4
20042cd0:	10600000 	addk	r3, r0, r0
20042cd4:	a46300ff 	andi	r3, r3, 255
}
20042cd8:	10330000 	addk	r1, r19, r0
20042cdc:	ea610004 	lwi	r19, r1, 4
20042ce0:	ea810008 	lwi	r20, r1, 8
20042ce4:	3021000c 	addik	r1, r1, 12
20042ce8:	b60f0008 	rtsd	r15, 8
20042cec:	80000000 	or	r0, r0, r0

20042cf0 <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20042cf0:	3021fff4 	addik	r1, r1, -12
20042cf4:	fa610004 	swi	r19, r1, 4
20042cf8:	fa810008 	swi	r20, r1, 8
20042cfc:	12610000 	addk	r19, r1, r0
20042d00:	96808000 	mfs	r20, rpc
20042d04:	b000dffb 	imm	-8197
20042d08:	3294ec5c 	addik	r20, r20, -5028
20042d0c:	f8b30010 	swi	r5, r19, 16
20042d10:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20042d14:	e8730010 	lwi	r3, r19, 16
20042d18:	e8630010 	lwi	r3, r3, 16
20042d1c:	e8830000 	lwi	r4, r3, 0
20042d20:	e8730010 	lwi	r3, r19, 16
20042d24:	e8a3000c 	lwi	r5, r3, 12
20042d28:	e8730014 	lwi	r3, r19, 20
20042d2c:	64630402 	bslli	r3, r3, 2
20042d30:	10651800 	addk	r3, r5, r3
20042d34:	e8630000 	lwi	r3, r3, 0
20042d38:	14632000 	rsubk	r3, r3, r4
}
20042d3c:	10330000 	addk	r1, r19, r0
20042d40:	ea610004 	lwi	r19, r1, 4
20042d44:	ea810008 	lwi	r20, r1, 8
20042d48:	3021000c 	addik	r1, r1, 12
20042d4c:	b60f0008 	rtsd	r15, 8
20042d50:	80000000 	or	r0, r0, r0

20042d54 <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20042d54:	3021fff0 	addik	r1, r1, -16
20042d58:	fa610008 	swi	r19, r1, 8
20042d5c:	fa81000c 	swi	r20, r1, 12
20042d60:	12610000 	addk	r19, r1, r0
20042d64:	96808000 	mfs	r20, rpc
20042d68:	b000dffb 	imm	-8197
20042d6c:	3294ebf8 	addik	r20, r20, -5128
20042d70:	f8b30014 	swi	r5, r19, 20
20042d74:	f8d30018 	swi	r6, r19, 24
20042d78:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20042d7c:	f8130004 	swi	r0, r19, 4
20042d80:	b800005c 	bri	92		// 20042ddc
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20042d84:	e8730014 	lwi	r3, r19, 20
20042d88:	e8830000 	lwi	r4, r3, 0
20042d8c:	e8730014 	lwi	r3, r19, 20
20042d90:	e8a3000c 	lwi	r5, r3, 12
20042d94:	e8730004 	lwi	r3, r19, 4
20042d98:	64630402 	bslli	r3, r3, 2
20042d9c:	10651800 	addk	r3, r5, r3
20042da0:	e8a30000 	lwi	r5, r3, 0
20042da4:	e8730014 	lwi	r3, r19, 20
20042da8:	e8630010 	lwi	r3, r3, 16
20042dac:	e8630000 	lwi	r3, r3, 0
20042db0:	14632800 	rsubk	r3, r3, r5
20042db4:	10641800 	addk	r3, r4, r3
20042db8:	30830001 	addik	r4, r3, 1
20042dbc:	e873001c 	lwi	r3, r19, 28
20042dc0:	16441803 	cmpu	r18, r4, r3
20042dc4:	bc52000c 	blti	r18, 12		// 20042dd0
            return 0;
20042dc8:	10600000 	addk	r3, r0, r0
20042dcc:	b8000024 	bri	36		// 20042df0
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20042dd0:	e8730004 	lwi	r3, r19, 4
20042dd4:	30630001 	addik	r3, r3, 1
20042dd8:	f8730004 	swi	r3, r19, 4
20042ddc:	e8930004 	lwi	r4, r19, 4
20042de0:	e8730018 	lwi	r3, r19, 24
20042de4:	16432003 	cmpu	r18, r3, r4
20042de8:	bc52ff9c 	blti	r18, -100		// 20042d84
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20042dec:	30600001 	addik	r3, r0, 1
}
20042df0:	10330000 	addk	r1, r19, r0
20042df4:	ea610008 	lwi	r19, r1, 8
20042df8:	ea81000c 	lwi	r20, r1, 12
20042dfc:	30210010 	addik	r1, r1, 16
20042e00:	b60f0008 	rtsd	r15, 8
20042e04:	80000000 	or	r0, r0, r0

20042e08 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20042e08:	3021ffe8 	addik	r1, r1, -24
20042e0c:	fa610010 	swi	r19, r1, 16
20042e10:	fa810014 	swi	r20, r1, 20
20042e14:	12610000 	addk	r19, r1, r0
20042e18:	96808000 	mfs	r20, rpc
20042e1c:	b000dffb 	imm	-8197
20042e20:	3294eb44 	addik	r20, r20, -5308
20042e24:	f8b3001c 	swi	r5, r19, 28
20042e28:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20042e2c:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20042e30:	f8130004 	swi	r0, r19, 4
20042e34:	b8000054 	bri	84		// 20042e88
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20042e38:	e873001c 	lwi	r3, r19, 28
20042e3c:	e8630010 	lwi	r3, r3, 16
20042e40:	e8830000 	lwi	r4, r3, 0
20042e44:	e873001c 	lwi	r3, r19, 28
20042e48:	e8a3000c 	lwi	r5, r3, 12
20042e4c:	e8730004 	lwi	r3, r19, 4
20042e50:	64630402 	bslli	r3, r3, 2
20042e54:	10651800 	addk	r3, r5, r3
20042e58:	e8630000 	lwi	r3, r3, 0
20042e5c:	14632000 	rsubk	r3, r3, r4
20042e60:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20042e64:	e8930008 	lwi	r4, r19, 8
20042e68:	e873000c 	lwi	r3, r19, 12
20042e6c:	16441803 	cmpu	r18, r4, r3
20042e70:	bcb20008 	bgei	r18, 8		// 20042e78
20042e74:	10640000 	addk	r3, r4, r0
20042e78:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20042e7c:	e8730004 	lwi	r3, r19, 4
20042e80:	30630001 	addik	r3, r3, 1
20042e84:	f8730004 	swi	r3, r19, 4
20042e88:	e8930004 	lwi	r4, r19, 4
20042e8c:	e8730020 	lwi	r3, r19, 32
20042e90:	16432003 	cmpu	r18, r3, r4
20042e94:	bc52ffa4 	blti	r18, -92		// 20042e38
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20042e98:	e873001c 	lwi	r3, r19, 28
20042e9c:	e8830000 	lwi	r4, r3, 0
20042ea0:	e8730008 	lwi	r3, r19, 8
20042ea4:	14632000 	rsubk	r3, r3, r4
}
20042ea8:	10330000 	addk	r1, r19, r0
20042eac:	ea610010 	lwi	r19, r1, 16
20042eb0:	ea810014 	lwi	r20, r1, 20
20042eb4:	30210018 	addik	r1, r1, 24
20042eb8:	b60f0008 	rtsd	r15, 8
20042ebc:	80000000 	or	r0, r0, r0

20042ec0 <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20042ec0:	3021fff0 	addik	r1, r1, -16
20042ec4:	fa610008 	swi	r19, r1, 8
20042ec8:	fa81000c 	swi	r20, r1, 12
20042ecc:	12610000 	addk	r19, r1, r0
20042ed0:	96808000 	mfs	r20, rpc
20042ed4:	b000dffb 	imm	-8197
20042ed8:	3294ea8c 	addik	r20, r20, -5492
20042edc:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20042ee0:	e8730014 	lwi	r3, r19, 20
20042ee4:	e8630010 	lwi	r3, r3, 16
20042ee8:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20042eec:	f8130004 	swi	r0, r19, 4
20042ef0:	b8000028 	bri	40		// 20042f18
        fifo->read_inds[i] = 0;
20042ef4:	e8730014 	lwi	r3, r19, 20
20042ef8:	e883000c 	lwi	r4, r3, 12
20042efc:	e8730004 	lwi	r3, r19, 4
20042f00:	64630402 	bslli	r3, r3, 2
20042f04:	10641800 	addk	r3, r4, r3
20042f08:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20042f0c:	e8730004 	lwi	r3, r19, 4
20042f10:	30630001 	addik	r3, r3, 1
20042f14:	f8730004 	swi	r3, r19, 4
20042f18:	e8730014 	lwi	r3, r19, 20
20042f1c:	e8830008 	lwi	r4, r3, 8
20042f20:	e8730004 	lwi	r3, r19, 4
20042f24:	16441803 	cmpu	r18, r4, r3
20042f28:	bc52ffcc 	blti	r18, -52		// 20042ef4
        fifo->read_inds[i] = 0;
    }
}
20042f2c:	10330000 	addk	r1, r19, r0
20042f30:	ea610008 	lwi	r19, r1, 8
20042f34:	ea81000c 	lwi	r20, r1, 12
20042f38:	30210010 	addik	r1, r1, 16
20042f3c:	b60f0008 	rtsd	r15, 8
20042f40:	80000000 	or	r0, r0, r0

20042f44 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20042f44:	3021fff0 	addik	r1, r1, -16
20042f48:	fa610008 	swi	r19, r1, 8
20042f4c:	fa81000c 	swi	r20, r1, 12
20042f50:	12610000 	addk	r19, r1, r0
20042f54:	96808000 	mfs	r20, rpc
20042f58:	b000dffb 	imm	-8197
20042f5c:	3294ea08 	addik	r20, r20, -5624
20042f60:	f8b30014 	swi	r5, r19, 20
20042f64:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20042f68:	e8730014 	lwi	r3, r19, 20
20042f6c:	e8830004 	lwi	r4, r3, 4
20042f70:	e8730014 	lwi	r3, r19, 20
20042f74:	e8a3000c 	lwi	r5, r3, 12
20042f78:	e8730018 	lwi	r3, r19, 24
20042f7c:	64630402 	bslli	r3, r3, 2
20042f80:	10651800 	addk	r3, r5, r3
20042f84:	e8a30000 	lwi	r5, r3, 0
20042f88:	e8730014 	lwi	r3, r19, 20
20042f8c:	e8630000 	lwi	r3, r3, 0
20042f90:	3063ffff 	addik	r3, r3, -1
20042f94:	84651800 	and	r3, r5, r3
20042f98:	64630402 	bslli	r3, r3, 2
20042f9c:	10641800 	addk	r3, r4, r3
20042fa0:	e8630000 	lwi	r3, r3, 0
20042fa4:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20042fa8:	e8730014 	lwi	r3, r19, 20
20042fac:	e883000c 	lwi	r4, r3, 12
20042fb0:	e8730018 	lwi	r3, r19, 24
20042fb4:	64630402 	bslli	r3, r3, 2
20042fb8:	10641800 	addk	r3, r4, r3
20042fbc:	e8830000 	lwi	r4, r3, 0
20042fc0:	30840001 	addik	r4, r4, 1
20042fc4:	f8830000 	swi	r4, r3, 0
    return value;
20042fc8:	e8730004 	lwi	r3, r19, 4
}
20042fcc:	10330000 	addk	r1, r19, r0
20042fd0:	ea610008 	lwi	r19, r1, 8
20042fd4:	ea81000c 	lwi	r20, r1, 12
20042fd8:	30210010 	addik	r1, r1, 16
20042fdc:	b60f0008 	rtsd	r15, 8
20042fe0:	80000000 	or	r0, r0, r0

20042fe4 <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20042fe4:	3021fff4 	addik	r1, r1, -12
20042fe8:	fa610004 	swi	r19, r1, 4
20042fec:	fa810008 	swi	r20, r1, 8
20042ff0:	12610000 	addk	r19, r1, r0
20042ff4:	96808000 	mfs	r20, rpc
20042ff8:	b000dffb 	imm	-8197
20042ffc:	3294e968 	addik	r20, r20, -5784
20043000:	f8b30010 	swi	r5, r19, 16
20043004:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20043008:	e8730010 	lwi	r3, r19, 16
2004300c:	e8830004 	lwi	r4, r3, 4
20043010:	e8730010 	lwi	r3, r19, 16
20043014:	e8630010 	lwi	r3, r3, 16
20043018:	e8a30000 	lwi	r5, r3, 0
2004301c:	e8730010 	lwi	r3, r19, 16
20043020:	e8630000 	lwi	r3, r3, 0
20043024:	3063ffff 	addik	r3, r3, -1
20043028:	84651800 	and	r3, r5, r3
2004302c:	64630402 	bslli	r3, r3, 2
20043030:	10641800 	addk	r3, r4, r3
20043034:	e8930014 	lwi	r4, r19, 20
20043038:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
2004303c:	e8730010 	lwi	r3, r19, 16
20043040:	e8630010 	lwi	r3, r3, 16
20043044:	e8830000 	lwi	r4, r3, 0
20043048:	30840001 	addik	r4, r4, 1
2004304c:	f8830000 	swi	r4, r3, 0
}
20043050:	10330000 	addk	r1, r19, r0
20043054:	ea610004 	lwi	r19, r1, 4
20043058:	ea810008 	lwi	r20, r1, 8
2004305c:	3021000c 	addik	r1, r1, 12
20043060:	b60f0008 	rtsd	r15, 8
20043064:	80000000 	or	r0, r0, r0

20043068 <read_AC_PRED_DIR>:
	
	static u8 needInit = 1;
	
	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_AC_PRED_DIR() {
20043068:	3021ffdc 	addik	r1, r1, -36
2004306c:	f9e10000 	swi	r15, r1, 0
20043070:	fa61001c 	swi	r19, r1, 28
20043074:	fa810020 	swi	r20, r1, 32
20043078:	12610000 	addk	r19, r1, r0
2004307c:	96808000 	mfs	r20, rpc
20043080:	b000dffb 	imm	-8197
20043084:	3294e8e0 	addik	r20, r20, -5920
		index_AC_PRED_DIR = decoder_texture_IS_AC_PRED_DIR->read_inds[0];
20043088:	b0000000 	imm	0
2004308c:	e8740cc4 	lwi	r3, r20, 3268
20043090:	e8630000 	lwi	r3, r3, 0
20043094:	e863000c 	lwi	r3, r3, 12
20043098:	e8830000 	lwi	r4, r3, 0
2004309c:	b0000000 	imm	0
200430a0:	e8740cc8 	lwi	r3, r20, 3272
200430a4:	f8830000 	swi	r4, r3, 0
		numTokens_AC_PRED_DIR = index_AC_PRED_DIR + fifo_i8_get_num_tokens(decoder_texture_IS_AC_PRED_DIR, 0);
200430a8:	b0000000 	imm	0
200430ac:	e8740cc4 	lwi	r3, r20, 3268
200430b0:	e8630000 	lwi	r3, r3, 0
200430b4:	10a30000 	addk	r5, r3, r0
200430b8:	10c00000 	addk	r6, r0, r0
200430bc:	b0000000 	imm	0
200430c0:	e8940cb0 	lwi	r4, r20, 3248
200430c4:	99fc2000 	brald	r15, r4
200430c8:	80000000 	or	r0, r0, r0
200430cc:	10830000 	addk	r4, r3, r0
200430d0:	b0000000 	imm	0
200430d4:	e8740cc8 	lwi	r3, r20, 3272
200430d8:	e8630000 	lwi	r3, r3, 0
200430dc:	10841800 	addk	r4, r4, r3
200430e0:	b0000000 	imm	0
200430e4:	e8740ccc 	lwi	r3, r20, 3276
200430e8:	f8830000 	swi	r4, r3, 0
	}
200430ec:	e9e10000 	lwi	r15, r1, 0
200430f0:	10330000 	addk	r1, r19, r0
200430f4:	ea61001c 	lwi	r19, r1, 28
200430f8:	ea810020 	lwi	r20, r1, 32
200430fc:	30210024 	addik	r1, r1, 36
20043100:	b60f0008 	rtsd	r15, 8
20043104:	80000000 	or	r0, r0, r0

20043108 <read_end_AC_PRED_DIR>:
	
	static void read_end_AC_PRED_DIR() {
20043108:	3021fff4 	addik	r1, r1, -12
2004310c:	fa610004 	swi	r19, r1, 4
20043110:	fa810008 	swi	r20, r1, 8
20043114:	12610000 	addk	r19, r1, r0
20043118:	96808000 	mfs	r20, rpc
2004311c:	b000dffb 	imm	-8197
20043120:	3294e844 	addik	r20, r20, -6076
		decoder_texture_IS_AC_PRED_DIR->read_inds[0] = index_AC_PRED_DIR;
20043124:	b0000000 	imm	0
20043128:	e8740cc4 	lwi	r3, r20, 3268
2004312c:	e8630000 	lwi	r3, r3, 0
20043130:	e863000c 	lwi	r3, r3, 12
20043134:	b0000000 	imm	0
20043138:	e8940cc8 	lwi	r4, r20, 3272
2004313c:	e8840000 	lwi	r4, r4, 0
20043140:	f8830000 	swi	r4, r3, 0
	}
20043144:	10330000 	addk	r1, r19, r0
20043148:	ea610004 	lwi	r19, r1, 4
2004314c:	ea810008 	lwi	r20, r1, 8
20043150:	3021000c 	addik	r1, r1, 12
20043154:	b60f0008 	rtsd	r15, 8
20043158:	80000000 	or	r0, r0, r0

2004315c <read_QFS_AC>:
	static void read_QFS_AC() {
2004315c:	3021ffdc 	addik	r1, r1, -36
20043160:	f9e10000 	swi	r15, r1, 0
20043164:	fa61001c 	swi	r19, r1, 28
20043168:	fa810020 	swi	r20, r1, 32
2004316c:	12610000 	addk	r19, r1, r0
20043170:	96808000 	mfs	r20, rpc
20043174:	b000dffb 	imm	-8197
20043178:	3294e7ec 	addik	r20, r20, -6164
		index_QFS_AC = decoder_texture_IS_QFS_AC->read_inds[0];
2004317c:	b0000000 	imm	0
20043180:	e8740cbc 	lwi	r3, r20, 3260
20043184:	e8630000 	lwi	r3, r3, 0
20043188:	e863000c 	lwi	r3, r3, 12
2004318c:	e8830000 	lwi	r4, r3, 0
20043190:	b0000000 	imm	0
20043194:	e8740cd0 	lwi	r3, r20, 3280
20043198:	f8830000 	swi	r4, r3, 0
		numTokens_QFS_AC = index_QFS_AC + fifo_i16_get_num_tokens(decoder_texture_IS_QFS_AC, 0);
2004319c:	b0000000 	imm	0
200431a0:	e8740cbc 	lwi	r3, r20, 3260
200431a4:	e8630000 	lwi	r3, r3, 0
200431a8:	10a30000 	addk	r5, r3, r0
200431ac:	10c00000 	addk	r6, r0, r0
200431b0:	b0000000 	imm	0
200431b4:	e8940cb4 	lwi	r4, r20, 3252
200431b8:	99fc2000 	brald	r15, r4
200431bc:	80000000 	or	r0, r0, r0
200431c0:	10830000 	addk	r4, r3, r0
200431c4:	b0000000 	imm	0
200431c8:	e8740cd0 	lwi	r3, r20, 3280
200431cc:	e8630000 	lwi	r3, r3, 0
200431d0:	10841800 	addk	r4, r4, r3
200431d4:	b0000000 	imm	0
200431d8:	e8740cd4 	lwi	r3, r20, 3284
200431dc:	f8830000 	swi	r4, r3, 0
	}
200431e0:	e9e10000 	lwi	r15, r1, 0
200431e4:	10330000 	addk	r1, r19, r0
200431e8:	ea61001c 	lwi	r19, r1, 28
200431ec:	ea810020 	lwi	r20, r1, 32
200431f0:	30210024 	addik	r1, r1, 36
200431f4:	b60f0008 	rtsd	r15, 8
200431f8:	80000000 	or	r0, r0, r0

200431fc <read_end_QFS_AC>:
	
	static void read_end_QFS_AC() {
200431fc:	3021fff4 	addik	r1, r1, -12
20043200:	fa610004 	swi	r19, r1, 4
20043204:	fa810008 	swi	r20, r1, 8
20043208:	12610000 	addk	r19, r1, r0
2004320c:	96808000 	mfs	r20, rpc
20043210:	b000dffb 	imm	-8197
20043214:	3294e750 	addik	r20, r20, -6320
		decoder_texture_IS_QFS_AC->read_inds[0] = index_QFS_AC;
20043218:	b0000000 	imm	0
2004321c:	e8740cbc 	lwi	r3, r20, 3260
20043220:	e8630000 	lwi	r3, r3, 0
20043224:	e863000c 	lwi	r3, r3, 12
20043228:	b0000000 	imm	0
2004322c:	e8940cd0 	lwi	r4, r20, 3280
20043230:	e8840000 	lwi	r4, r4, 0
20043234:	f8830000 	swi	r4, r3, 0
	}
20043238:	10330000 	addk	r1, r19, r0
2004323c:	ea610004 	lwi	r19, r1, 4
20043240:	ea810008 	lwi	r20, r1, 8
20043244:	3021000c 	addik	r1, r1, 12
20043248:	b60f0008 	rtsd	r15, 8
2004324c:	80000000 	or	r0, r0, r0

20043250 <write_PQF_AC>:

	static void write_PQF_AC() {
20043250:	3021ffdc 	addik	r1, r1, -36
20043254:	f9e10000 	swi	r15, r1, 0
20043258:	fa61001c 	swi	r19, r1, 28
2004325c:	fa810020 	swi	r20, r1, 32
20043260:	12610000 	addk	r19, r1, r0
20043264:	96808000 	mfs	r20, rpc
20043268:	b000dffb 	imm	-8197
2004326c:	3294e6f8 	addik	r20, r20, -6408
		index_PQF_AC = (*decoder_texture_IS_PQF_AC->write_ind);
20043270:	b0000000 	imm	0
20043274:	e8740cc0 	lwi	r3, r20, 3264
20043278:	e8630000 	lwi	r3, r3, 0
2004327c:	e8630010 	lwi	r3, r3, 16
20043280:	e8830000 	lwi	r4, r3, 0
20043284:	b0000000 	imm	0
20043288:	e8740cd8 	lwi	r3, r20, 3288
2004328c:	f8830000 	swi	r4, r3, 0
		numFree_PQF_AC = index_PQF_AC + fifo_i16_get_room(decoder_texture_IS_PQF_AC, NUM_READERS_PQF_AC);
20043290:	b0000000 	imm	0
20043294:	e8740cc0 	lwi	r3, r20, 3264
20043298:	e8630000 	lwi	r3, r3, 0
2004329c:	10a30000 	addk	r5, r3, r0
200432a0:	30c00001 	addik	r6, r0, 1
200432a4:	b0000000 	imm	0
200432a8:	e8940cb8 	lwi	r4, r20, 3256
200432ac:	99fc2000 	brald	r15, r4
200432b0:	80000000 	or	r0, r0, r0
200432b4:	10830000 	addk	r4, r3, r0
200432b8:	b0000000 	imm	0
200432bc:	e8740cd8 	lwi	r3, r20, 3288
200432c0:	e8630000 	lwi	r3, r3, 0
200432c4:	10841800 	addk	r4, r4, r3
200432c8:	b0000000 	imm	0
200432cc:	e8740cdc 	lwi	r3, r20, 3292
200432d0:	f8830000 	swi	r4, r3, 0
	}
200432d4:	e9e10000 	lwi	r15, r1, 0
200432d8:	10330000 	addk	r1, r19, r0
200432dc:	ea61001c 	lwi	r19, r1, 28
200432e0:	ea810020 	lwi	r20, r1, 32
200432e4:	30210024 	addik	r1, r1, 36
200432e8:	b60f0008 	rtsd	r15, 8
200432ec:	80000000 	or	r0, r0, r0

200432f0 <write_end_PQF_AC>:
	
	static void write_end_PQF_AC() {
200432f0:	3021fff4 	addik	r1, r1, -12
200432f4:	fa610004 	swi	r19, r1, 4
200432f8:	fa810008 	swi	r20, r1, 8
200432fc:	12610000 	addk	r19, r1, r0
20043300:	96808000 	mfs	r20, rpc
20043304:	b000dffb 	imm	-8197
20043308:	3294e65c 	addik	r20, r20, -6564
		(*decoder_texture_IS_PQF_AC->write_ind) = index_PQF_AC;
2004330c:	b0000000 	imm	0
20043310:	e8740cc0 	lwi	r3, r20, 3264
20043314:	e8630000 	lwi	r3, r3, 0
20043318:	e8630010 	lwi	r3, r3, 16
2004331c:	b0000000 	imm	0
20043320:	e8940cd8 	lwi	r4, r20, 3288
20043324:	e8840000 	lwi	r4, r4, 0
20043328:	f8830000 	swi	r4, r3, 0
	}
2004332c:	10330000 	addk	r1, r19, r0
20043330:	ea610004 	lwi	r19, r1, 4
20043334:	ea810008 	lwi	r20, r1, 8
20043338:	3021000c 	addik	r1, r1, 12
2004333c:	b60f0008 	rtsd	r15, 8
20043340:	80000000 	or	r0, r0, r0

20043344 <isSchedulable_skip>:
	// Functions/procedures


	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_skip() {
20043344:	3021ffec 	addik	r1, r1, -20
20043348:	fa61000c 	swi	r19, r1, 12
2004334c:	fa810010 	swi	r20, r1, 16
20043350:	12610000 	addk	r19, r1, r0
20043354:	96808000 	mfs	r20, rpc
20043358:	b000dffb 	imm	-8197
2004335c:	3294e608 	addik	r20, r20, -6648
		i32 result;
		i8 i;
	
		i = tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR];
20043360:	b0000000 	imm	0
20043364:	e8740cc4 	lwi	r3, r20, 3268
20043368:	e8630000 	lwi	r3, r3, 0
2004336c:	e8830004 	lwi	r4, r3, 4
20043370:	b0000000 	imm	0
20043374:	e8740cc8 	lwi	r3, r20, 3272
20043378:	e8630000 	lwi	r3, r3, 0
2004337c:	a46301ff 	andi	r3, r3, 511
20043380:	10641800 	addk	r3, r4, r3
20043384:	e0630000 	lbui	r3, r3, 0
20043388:	f0730004 	sbi	r3, r19, 4
		result = i < 0;
2004338c:	e0730004 	lbui	r3, r19, 4
20043390:	64630007 	bsrli	r3, r3, 7
20043394:	a46300ff 	andi	r3, r3, 255
20043398:	f8730008 	swi	r3, r19, 8
		return result;
2004339c:	e8730008 	lwi	r3, r19, 8
	}
200433a0:	10330000 	addk	r1, r19, r0
200433a4:	ea61000c 	lwi	r19, r1, 12
200433a8:	ea810010 	lwi	r20, r1, 16
200433ac:	30210014 	addik	r1, r1, 20
200433b0:	b60f0008 	rtsd	r15, 8
200433b4:	80000000 	or	r0, r0, r0

200433b8 <skip>:
	
	static void skip() {
200433b8:	3021ffd4 	addik	r1, r1, -44
200433bc:	f9e10000 	swi	r15, r1, 0
200433c0:	fa610024 	swi	r19, r1, 36
200433c4:	fa810028 	swi	r20, r1, 40
200433c8:	12610000 	addk	r19, r1, r0
200433cc:	96808000 	mfs	r20, rpc
200433d0:	b000dffb 	imm	-8197
200433d4:	3294e590 	addik	r20, r20, -6768
	
		// Compute aligned port indexes
		i32 index_aligned_AC_PRED_DIR = index_AC_PRED_DIR % SIZE_AC_PRED_DIR;
200433d8:	b0000000 	imm	0
200433dc:	e8740cc8 	lwi	r3, r20, 3272
200433e0:	e8630000 	lwi	r3, r3, 0
200433e4:	a46301ff 	andi	r3, r3, 511
200433e8:	f873001c 	swi	r3, r19, 28
	
		i8 i;
	
		i = tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR];
200433ec:	b0000000 	imm	0
200433f0:	e8740cc4 	lwi	r3, r20, 3268
200433f4:	e8630000 	lwi	r3, r3, 0
200433f8:	e8830004 	lwi	r4, r3, 4
200433fc:	b0000000 	imm	0
20043400:	e8740cc8 	lwi	r3, r20, 3272
20043404:	e8630000 	lwi	r3, r3, 0
20043408:	a46301ff 	andi	r3, r3, 511
2004340c:	10641800 	addk	r3, r4, r3
20043410:	e0630000 	lbui	r3, r3, 0
20043414:	f0730020 	sbi	r3, r19, 32
	
		// Update ports indexes
		index_AC_PRED_DIR += 1;
20043418:	b0000000 	imm	0
2004341c:	e8740cc8 	lwi	r3, r20, 3272
20043420:	e8630000 	lwi	r3, r3, 0
20043424:	30830001 	addik	r4, r3, 1
20043428:	b0000000 	imm	0
2004342c:	e8740cc8 	lwi	r3, r20, 3272
20043430:	f8830000 	swi	r4, r3, 0
		
		read_end_AC_PRED_DIR();
20043434:	b0000000 	imm	0
20043438:	e8740cec 	lwi	r3, r20, 3308
2004343c:	99fc1800 	brald	r15, r3
20043440:	80000000 	or	r0, r0, r0
	}
20043444:	e9e10000 	lwi	r15, r1, 0
20043448:	10330000 	addk	r1, r19, r0
2004344c:	ea610024 	lwi	r19, r1, 36
20043450:	ea810028 	lwi	r20, r1, 40
20043454:	3021002c 	addik	r1, r1, 44
20043458:	b60f0008 	rtsd	r15, 8
2004345c:	80000000 	or	r0, r0, r0

20043460 <isSchedulable_rw>:
	static i32 isSchedulable_rw() {
20043460:	3021fff0 	addik	r1, r1, -16
20043464:	fa610008 	swi	r19, r1, 8
20043468:	fa81000c 	swi	r20, r1, 12
2004346c:	12610000 	addk	r19, r1, r0
20043470:	96808000 	mfs	r20, rpc
20043474:	b000dffb 	imm	-8197
20043478:	3294e4ec 	addik	r20, r20, -6932
		i32 result;
	
		result = 1;
2004347c:	30600001 	addik	r3, r0, 1
20043480:	f8730004 	swi	r3, r19, 4
		return result;
20043484:	e8730004 	lwi	r3, r19, 4
	}
20043488:	10330000 	addk	r1, r19, r0
2004348c:	ea610008 	lwi	r19, r1, 8
20043490:	ea81000c 	lwi	r20, r1, 12
20043494:	30210010 	addik	r1, r1, 16
20043498:	b60f0008 	rtsd	r15, 8
2004349c:	80000000 	or	r0, r0, r0

200434a0 <rw>:
	
	static void rw() {
200434a0:	3021ffc0 	addik	r1, r1, -64
200434a4:	f9e10000 	swi	r15, r1, 0
200434a8:	fa610038 	swi	r19, r1, 56
200434ac:	fa81003c 	swi	r20, r1, 60
200434b0:	12610000 	addk	r19, r1, r0
200434b4:	96808000 	mfs	r20, rpc
200434b8:	b000dffb 	imm	-8197
200434bc:	3294e4a8 	addik	r20, r20, -7000
	
		// Compute aligned port indexes
		i32 index_aligned_AC_PRED_DIR = index_AC_PRED_DIR % SIZE_AC_PRED_DIR;
200434c0:	b0000000 	imm	0
200434c4:	e8740cc8 	lwi	r3, r20, 3272
200434c8:	e8630000 	lwi	r3, r3, 0
200434cc:	a46301ff 	andi	r3, r3, 511
200434d0:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_QFS_AC = index_QFS_AC % SIZE_QFS_AC;
200434d4:	b0000000 	imm	0
200434d8:	e8740cd0 	lwi	r3, r20, 3280
200434dc:	e8630000 	lwi	r3, r3, 0
200434e0:	a46301ff 	andi	r3, r3, 511
200434e4:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_PQF_AC = index_PQF_AC % SIZE_PQF_AC;
200434e8:	b0000000 	imm	0
200434ec:	e8740cd8 	lwi	r3, r20, 3288
200434f0:	e8630000 	lwi	r3, r3, 0
200434f4:	a46301ff 	andi	r3, r3, 511
200434f8:	f8730028 	swi	r3, r19, 40
		i32 offset;
		i32 addr;
		i8 tmp_Scanmode;
		i16 tmp_QFS_AC;
	
		dir = tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR];
200434fc:	b0000000 	imm	0
20043500:	e8740cc4 	lwi	r3, r20, 3268
20043504:	e8630000 	lwi	r3, r3, 0
20043508:	e8830004 	lwi	r4, r3, 4
2004350c:	b0000000 	imm	0
20043510:	e8740cc8 	lwi	r3, r20, 3272
20043514:	e8630000 	lwi	r3, r3, 0
20043518:	a46301ff 	andi	r3, r3, 511
2004351c:	10641800 	addk	r3, r4, r3
20043520:	e0630000 	lbui	r3, r3, 0
20043524:	f073002c 	sbi	r3, r19, 44
		offset = (dir << 6) + 1;
20043528:	e073002c 	lbui	r3, r19, 44
2004352c:	90630060 	sext8	r3, r3
20043530:	64630406 	bslli	r3, r3, 6
20043534:	30630001 	addik	r3, r3, 1
20043538:	f8730030 	swi	r3, r19, 48
		addr = 0;
2004353c:	f813001c 	swi	r0, r19, 28
		while (addr <= 62) {
20043540:	b80000a4 	bri	164		// 200435e4
			tmp_Scanmode = Scanmode[offset + addr];
20043544:	e8930030 	lwi	r4, r19, 48
20043548:	e873001c 	lwi	r3, r19, 28
2004354c:	10641800 	addk	r3, r4, r3
20043550:	b0000000 	imm	0
20043554:	e8940ce0 	lwi	r4, r20, 3296
20043558:	c0632000 	lbu	r3, r3, r4
2004355c:	f0730034 	sbi	r3, r19, 52
			tmp_QFS_AC = tokens_QFS_AC[(index_QFS_AC + (tmp_Scanmode - 1)) % SIZE_QFS_AC];
20043560:	b0000000 	imm	0
20043564:	e8740cbc 	lwi	r3, r20, 3260
20043568:	e8630000 	lwi	r3, r3, 0
2004356c:	e8830004 	lwi	r4, r3, 4
20043570:	e0730034 	lbui	r3, r19, 52
20043574:	90a30060 	sext8	r5, r3
20043578:	b0000000 	imm	0
2004357c:	e8740cd0 	lwi	r3, r20, 3280
20043580:	e8630000 	lwi	r3, r3, 0
20043584:	10651800 	addk	r3, r5, r3
20043588:	3063ffff 	addik	r3, r3, -1
2004358c:	a46301ff 	andi	r3, r3, 511
20043590:	10631800 	addk	r3, r3, r3
20043594:	10641800 	addk	r3, r4, r3
20043598:	e4630000 	lhui	r3, r3, 0
2004359c:	f4730036 	shi	r3, r19, 54
			tokens_PQF_AC[(index_PQF_AC + (addr)) % SIZE_PQF_AC] = tmp_QFS_AC;
200435a0:	b0000000 	imm	0
200435a4:	e8740cc0 	lwi	r3, r20, 3264
200435a8:	e8630000 	lwi	r3, r3, 0
200435ac:	e8830004 	lwi	r4, r3, 4
200435b0:	b0000000 	imm	0
200435b4:	e8740cd8 	lwi	r3, r20, 3288
200435b8:	e8a30000 	lwi	r5, r3, 0
200435bc:	e873001c 	lwi	r3, r19, 28
200435c0:	10651800 	addk	r3, r5, r3
200435c4:	a46301ff 	andi	r3, r3, 511
200435c8:	10631800 	addk	r3, r3, r3
200435cc:	10641800 	addk	r3, r4, r3
200435d0:	e4930036 	lhui	r4, r19, 54
200435d4:	f4830000 	shi	r4, r3, 0
			addr = addr + 1;
200435d8:	e873001c 	lwi	r3, r19, 28
200435dc:	30630001 	addik	r3, r3, 1
200435e0:	f873001c 	swi	r3, r19, 28
		i16 tmp_QFS_AC;
	
		dir = tokens_AC_PRED_DIR[(index_AC_PRED_DIR + (0)) % SIZE_AC_PRED_DIR];
		offset = (dir << 6) + 1;
		addr = 0;
		while (addr <= 62) {
200435e4:	e893001c 	lwi	r4, r19, 28
200435e8:	3060003e 	addik	r3, r0, 62
200435ec:	16441801 	cmp	r18, r4, r3
200435f0:	bcb2ff54 	bgei	r18, -172		// 20043544
			tokens_PQF_AC[(index_PQF_AC + (addr)) % SIZE_PQF_AC] = tmp_QFS_AC;
			addr = addr + 1;
		}
	
		// Update ports indexes
		index_AC_PRED_DIR += 1;
200435f4:	b0000000 	imm	0
200435f8:	e8740cc8 	lwi	r3, r20, 3272
200435fc:	e8630000 	lwi	r3, r3, 0
20043600:	30830001 	addik	r4, r3, 1
20043604:	b0000000 	imm	0
20043608:	e8740cc8 	lwi	r3, r20, 3272
2004360c:	f8830000 	swi	r4, r3, 0
		index_QFS_AC += 63;
20043610:	b0000000 	imm	0
20043614:	e8740cd0 	lwi	r3, r20, 3280
20043618:	e8630000 	lwi	r3, r3, 0
2004361c:	3083003f 	addik	r4, r3, 63
20043620:	b0000000 	imm	0
20043624:	e8740cd0 	lwi	r3, r20, 3280
20043628:	f8830000 	swi	r4, r3, 0
		index_PQF_AC += 63;
2004362c:	b0000000 	imm	0
20043630:	e8740cd8 	lwi	r3, r20, 3288
20043634:	e8630000 	lwi	r3, r3, 0
20043638:	3083003f 	addik	r4, r3, 63
2004363c:	b0000000 	imm	0
20043640:	e8740cd8 	lwi	r3, r20, 3288
20043644:	f8830000 	swi	r4, r3, 0
		
		read_end_AC_PRED_DIR();
20043648:	b0000000 	imm	0
2004364c:	e8740cec 	lwi	r3, r20, 3308
20043650:	99fc1800 	brald	r15, r3
20043654:	80000000 	or	r0, r0, r0
		read_end_QFS_AC();
20043658:	b0000000 	imm	0
2004365c:	e8740cf4 	lwi	r3, r20, 3316
20043660:	99fc1800 	brald	r15, r3
20043664:	80000000 	or	r0, r0, r0
		write_end_PQF_AC();
20043668:	b0000000 	imm	0
2004366c:	e8740cfc 	lwi	r3, r20, 3324
20043670:	99fc1800 	brald	r15, r3
20043674:	80000000 	or	r0, r0, r0
	}
20043678:	e9e10000 	lwi	r15, r1, 0
2004367c:	10330000 	addk	r1, r19, r0
20043680:	ea610038 	lwi	r19, r1, 56
20043684:	ea81003c 	lwi	r20, r1, 60
20043688:	30210040 	addik	r1, r1, 64
2004368c:	b60f0008 	rtsd	r15, 8
20043690:	80000000 	or	r0, r0, r0

20043694 <decoder_texture_IS_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_texture_IS_initialize() {
20043694:	3021fff0 	addik	r1, r1, -16
20043698:	fa610008 	swi	r19, r1, 8
2004369c:	fa81000c 	swi	r20, r1, 12
200436a0:	12610000 	addk	r19, r1, r0
200436a4:	96808000 	mfs	r20, rpc
200436a8:	b000dffb 	imm	-8197
200436ac:	3294e2b8 	addik	r20, r20, -7496
		int i = 0;
200436b0:	f8130004 	swi	r0, r19, 4
		
	finished:
		// no read_end/write_end here!
		return;
200436b4:	80000000 	or	r0, r0, r0
	}
200436b8:	10330000 	addk	r1, r19, r0
200436bc:	ea610008 	lwi	r19, r1, 8
200436c0:	ea81000c 	lwi	r20, r1, 12
200436c4:	30210010 	addik	r1, r1, 16
200436c8:	b60f0008 	rtsd	r15, 8
200436cc:	80000000 	or	r0, r0, r0

200436d0 <decoder_texture_IS_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	int decoder_texture_IS_scheduler() {
200436d0:	3021ffd0 	addik	r1, r1, -48
200436d4:	f9e10000 	swi	r15, r1, 0
200436d8:	fa610028 	swi	r19, r1, 40
200436dc:	fa81002c 	swi	r20, r1, 44
200436e0:	12610000 	addk	r19, r1, r0
200436e4:	96808000 	mfs	r20, rpc
200436e8:	b000dffb 	imm	-8197
200436ec:	3294e278 	addik	r20, r20, -7560
		int i = 0;
200436f0:	f813001c 	swi	r0, r19, 28
		if(needInit){
200436f4:	b0000000 	imm	0
200436f8:	e8740ce4 	lwi	r3, r20, 3300
200436fc:	e0630000 	lbui	r3, r3, 0
20043700:	bc03001c 	beqi	r3, 28		// 2004371c
			decoder_texture_IS_initialize();
20043704:	b000ffff 	imm	-1
20043708:	b9f4ff8c 	brlid	r15, -116	// 20043694 <decoder_texture_IS_initialize>
2004370c:	80000000 	or	r0, r0, r0
			needInit = 0;
20043710:	b0000000 	imm	0
20043714:	e8740ce4 	lwi	r3, r20, 3300
20043718:	f0030000 	sbi	r0, r3, 0
		}
		read_AC_PRED_DIR();
2004371c:	b0000000 	imm	0
20043720:	e8740ce8 	lwi	r3, r20, 3304
20043724:	99fc1800 	brald	r15, r3
20043728:	80000000 	or	r0, r0, r0
		read_QFS_AC();
2004372c:	b0000000 	imm	0
20043730:	e8940cf0 	lwi	r4, r20, 3312
20043734:	99fc2000 	brald	r15, r4
20043738:	80000000 	or	r0, r0, r0
		write_PQF_AC();
2004373c:	b0000000 	imm	0
20043740:	e8740cf8 	lwi	r3, r20, 3320
20043744:	99fc1800 	brald	r15, r3
20043748:	80000000 	or	r0, r0, r0
		
	
	
		while (1) {
			// Action loop
			if (numTokens_AC_PRED_DIR - index_AC_PRED_DIR >= 1 && numTokens_QFS_AC - index_QFS_AC >= 63 && isSchedulable_skip()) {
2004374c:	b0000000 	imm	0
20043750:	e8740ccc 	lwi	r3, r20, 3276
20043754:	e8830000 	lwi	r4, r3, 0
20043758:	b0000000 	imm	0
2004375c:	e8740cc8 	lwi	r3, r20, 3272
20043760:	e8630000 	lwi	r3, r3, 0
20043764:	88641800 	xor	r3, r4, r3
20043768:	bc030074 	beqi	r3, 116		// 200437dc
2004376c:	b0000000 	imm	0
20043770:	e8740cd4 	lwi	r3, r20, 3284
20043774:	e8830000 	lwi	r4, r3, 0
20043778:	b0000000 	imm	0
2004377c:	e8740cd0 	lwi	r3, r20, 3280
20043780:	e8630000 	lwi	r3, r3, 0
20043784:	14832000 	rsubk	r4, r3, r4
20043788:	3060003e 	addik	r3, r0, 62
2004378c:	16441803 	cmpu	r18, r4, r3
20043790:	bcb2004c 	bgei	r18, 76		// 200437dc
20043794:	b0000000 	imm	0
20043798:	e8940d00 	lwi	r4, r20, 3328
2004379c:	99fc2000 	brald	r15, r4
200437a0:	80000000 	or	r0, r0, r0
200437a4:	bc030038 	beqi	r3, 56		// 200437dc
				int stop = 0;
200437a8:	f8130024 	swi	r0, r19, 36
				if (stop != 0) {
200437ac:	e8730024 	lwi	r3, r19, 36
200437b0:	bc030008 	beqi	r3, 8		// 200437b8
					goto finished;
200437b4:	b80000f0 	bri	240		// 200438a4
				}
				skip();
200437b8:	b0000000 	imm	0
200437bc:	e8740d04 	lwi	r3, r20, 3332
200437c0:	99fc1800 	brald	r15, r3
200437c4:	80000000 	or	r0, r0, r0
				i++;
200437c8:	e873001c 	lwi	r3, r19, 28
200437cc:	30630001 	addik	r3, r3, 1
200437d0:	f873001c 	swi	r3, r19, 28
		
	
	
		while (1) {
			// Action loop
			if (numTokens_AC_PRED_DIR - index_AC_PRED_DIR >= 1 && numTokens_QFS_AC - index_QFS_AC >= 63 && isSchedulable_skip()) {
200437d4:	80000000 	or	r0, r0, r0
				rw();
				i++;
			} else {
				goto finished;
			}
		}
200437d8:	b800ff74 	bri	-140		// 2004374c
				if (stop != 0) {
					goto finished;
				}
				skip();
				i++;
			} else if (numTokens_AC_PRED_DIR - index_AC_PRED_DIR >= 1 && numTokens_QFS_AC - index_QFS_AC >= 63 && isSchedulable_rw()) {
200437dc:	b0000000 	imm	0
200437e0:	e8740ccc 	lwi	r3, r20, 3276
200437e4:	e8830000 	lwi	r4, r3, 0
200437e8:	b0000000 	imm	0
200437ec:	e8740cc8 	lwi	r3, r20, 3272
200437f0:	e8630000 	lwi	r3, r3, 0
200437f4:	88641800 	xor	r3, r4, r3
200437f8:	bc0300ac 	beqi	r3, 172		// 200438a4
200437fc:	b0000000 	imm	0
20043800:	e8740cd4 	lwi	r3, r20, 3284
20043804:	e8830000 	lwi	r4, r3, 0
20043808:	b0000000 	imm	0
2004380c:	e8740cd0 	lwi	r3, r20, 3280
20043810:	e8630000 	lwi	r3, r3, 0
20043814:	14832000 	rsubk	r4, r3, r4
20043818:	3060003e 	addik	r3, r0, 62
2004381c:	16441803 	cmpu	r18, r4, r3
20043820:	bcb20084 	bgei	r18, 132		// 200438a4
20043824:	b0000000 	imm	0
20043828:	e8940d08 	lwi	r4, r20, 3336
2004382c:	99fc2000 	brald	r15, r4
20043830:	80000000 	or	r0, r0, r0
20043834:	bc030070 	beqi	r3, 112		// 200438a4
				int stop = 0;
20043838:	f8130020 	swi	r0, r19, 32
				if (63 > SIZE_PQF_AC - index_PQF_AC + decoder_texture_IS_PQF_AC->read_inds[0]) {
2004383c:	b0000000 	imm	0
20043840:	e8740cc0 	lwi	r3, r20, 3264
20043844:	e8630000 	lwi	r3, r3, 0
20043848:	e863000c 	lwi	r3, r3, 12
2004384c:	e8830000 	lwi	r4, r3, 0
20043850:	b0000000 	imm	0
20043854:	e8740cd8 	lwi	r3, r20, 3288
20043858:	e8630000 	lwi	r3, r3, 0
2004385c:	14632000 	rsubk	r3, r3, r4
20043860:	30830200 	addik	r4, r3, 512
20043864:	3060003e 	addik	r3, r0, 62
20043868:	16441803 	cmpu	r18, r4, r3
2004386c:	bc52000c 	blti	r18, 12		// 20043878
					stop = 1;
20043870:	30600001 	addik	r3, r0, 1
20043874:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
20043878:	e8730020 	lwi	r3, r19, 32
2004387c:	bc030008 	beqi	r3, 8		// 20043884
					goto finished;
20043880:	b8000024 	bri	36		// 200438a4
				}
				rw();
20043884:	b0000000 	imm	0
20043888:	e8740d0c 	lwi	r3, r20, 3340
2004388c:	99fc1800 	brald	r15, r3
20043890:	80000000 	or	r0, r0, r0
				i++;
20043894:	e873001c 	lwi	r3, r19, 28
20043898:	30630001 	addik	r3, r3, 1
2004389c:	f873001c 	swi	r3, r19, 28
			} else {
				goto finished;
			}
		}
200438a0:	b800feac 	bri	-340		// 2004374c
		
	finished:
	
		read_end_AC_PRED_DIR();
200438a4:	b0000000 	imm	0
200438a8:	e8940cec 	lwi	r4, r20, 3308
200438ac:	99fc2000 	brald	r15, r4
200438b0:	80000000 	or	r0, r0, r0
		read_end_QFS_AC();
200438b4:	b0000000 	imm	0
200438b8:	e8740cf4 	lwi	r3, r20, 3316
200438bc:	99fc1800 	brald	r15, r3
200438c0:	80000000 	or	r0, r0, r0
		write_end_PQF_AC();
200438c4:	b0000000 	imm	0
200438c8:	e8940cfc 	lwi	r4, r20, 3324
200438cc:	99fc2000 	brald	r15, r4
200438d0:	80000000 	or	r0, r0, r0
		
		
		return i;
200438d4:	e873001c 	lwi	r3, r19, 28
	}
200438d8:	e9e10000 	lwi	r15, r1, 0
200438dc:	10330000 	addk	r1, r19, r0
200438e0:	ea610028 	lwi	r19, r1, 40
200438e4:	ea81002c 	lwi	r20, r1, 44
200438e8:	30210030 	addik	r1, r1, 48
200438ec:	b60f0008 	rtsd	r15, 8
200438f0:	80000000 	or	r0, r0, r0

200438f4 <fifo_i8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200438f4:	3021fff4 	addik	r1, r1, -12
200438f8:	fa610004 	swi	r19, r1, 4
200438fc:	fa810008 	swi	r20, r1, 8
20043900:	12610000 	addk	r19, r1, r0
20043904:	96808000 	mfs	r20, rpc
20043908:	b000dffb 	imm	-8197
2004390c:	3294e058 	addik	r20, r20, -8104
20043910:	f8b30010 	swi	r5, r19, 16
20043914:	f8d30014 	swi	r6, r19, 20
20043918:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2004391c:	e8730010 	lwi	r3, r19, 16
20043920:	e8630010 	lwi	r3, r3, 16
20043924:	e8830000 	lwi	r4, r3, 0
20043928:	e8730010 	lwi	r3, r19, 16
2004392c:	e8a3000c 	lwi	r5, r3, 12
20043930:	e8730014 	lwi	r3, r19, 20
20043934:	64630402 	bslli	r3, r3, 2
20043938:	10651800 	addk	r3, r5, r3
2004393c:	e8630000 	lwi	r3, r3, 0
20043940:	14a32000 	rsubk	r5, r3, r4
20043944:	30600001 	addik	r3, r0, 1
20043948:	e8930018 	lwi	r4, r19, 24
2004394c:	16442803 	cmpu	r18, r4, r5
20043950:	bcb20008 	bgei	r18, 8		// 20043958
20043954:	10600000 	addk	r3, r0, r0
20043958:	a46300ff 	andi	r3, r3, 255
}
2004395c:	10330000 	addk	r1, r19, r0
20043960:	ea610004 	lwi	r19, r1, 4
20043964:	ea810008 	lwi	r20, r1, 8
20043968:	3021000c 	addik	r1, r1, 12
2004396c:	b60f0008 	rtsd	r15, 8
20043970:	80000000 	or	r0, r0, r0

20043974 <fifo_i8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20043974:	3021fff4 	addik	r1, r1, -12
20043978:	fa610004 	swi	r19, r1, 4
2004397c:	fa810008 	swi	r20, r1, 8
20043980:	12610000 	addk	r19, r1, r0
20043984:	96808000 	mfs	r20, rpc
20043988:	b000dffb 	imm	-8197
2004398c:	3294dfd8 	addik	r20, r20, -8232
20043990:	f8b30010 	swi	r5, r19, 16
20043994:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20043998:	e8730010 	lwi	r3, r19, 16
2004399c:	e8630010 	lwi	r3, r3, 16
200439a0:	e8830000 	lwi	r4, r3, 0
200439a4:	e8730010 	lwi	r3, r19, 16
200439a8:	e8a3000c 	lwi	r5, r3, 12
200439ac:	e8730014 	lwi	r3, r19, 20
200439b0:	64630402 	bslli	r3, r3, 2
200439b4:	10651800 	addk	r3, r5, r3
200439b8:	e8630000 	lwi	r3, r3, 0
200439bc:	14632000 	rsubk	r3, r3, r4
}
200439c0:	10330000 	addk	r1, r19, r0
200439c4:	ea610004 	lwi	r19, r1, 4
200439c8:	ea810008 	lwi	r20, r1, 8
200439cc:	3021000c 	addik	r1, r1, 12
200439d0:	b60f0008 	rtsd	r15, 8
200439d4:	80000000 	or	r0, r0, r0

200439d8 <fifo_i8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200439d8:	3021fff0 	addik	r1, r1, -16
200439dc:	fa610008 	swi	r19, r1, 8
200439e0:	fa81000c 	swi	r20, r1, 12
200439e4:	12610000 	addk	r19, r1, r0
200439e8:	96808000 	mfs	r20, rpc
200439ec:	b000dffb 	imm	-8197
200439f0:	3294df74 	addik	r20, r20, -8332
200439f4:	f8b30014 	swi	r5, r19, 20
200439f8:	f8d30018 	swi	r6, r19, 24
200439fc:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20043a00:	f8130004 	swi	r0, r19, 4
20043a04:	b800005c 	bri	92		// 20043a60
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20043a08:	e8730014 	lwi	r3, r19, 20
20043a0c:	e8830000 	lwi	r4, r3, 0
20043a10:	e8730014 	lwi	r3, r19, 20
20043a14:	e8a3000c 	lwi	r5, r3, 12
20043a18:	e8730004 	lwi	r3, r19, 4
20043a1c:	64630402 	bslli	r3, r3, 2
20043a20:	10651800 	addk	r3, r5, r3
20043a24:	e8a30000 	lwi	r5, r3, 0
20043a28:	e8730014 	lwi	r3, r19, 20
20043a2c:	e8630010 	lwi	r3, r3, 16
20043a30:	e8630000 	lwi	r3, r3, 0
20043a34:	14632800 	rsubk	r3, r3, r5
20043a38:	10641800 	addk	r3, r4, r3
20043a3c:	30830001 	addik	r4, r3, 1
20043a40:	e873001c 	lwi	r3, r19, 28
20043a44:	16441803 	cmpu	r18, r4, r3
20043a48:	bc52000c 	blti	r18, 12		// 20043a54
            return 0;
20043a4c:	10600000 	addk	r3, r0, r0
20043a50:	b8000024 	bri	36		// 20043a74
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20043a54:	e8730004 	lwi	r3, r19, 4
20043a58:	30630001 	addik	r3, r3, 1
20043a5c:	f8730004 	swi	r3, r19, 4
20043a60:	e8930004 	lwi	r4, r19, 4
20043a64:	e8730018 	lwi	r3, r19, 24
20043a68:	16432003 	cmpu	r18, r3, r4
20043a6c:	bc52ff9c 	blti	r18, -100		// 20043a08
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20043a70:	30600001 	addik	r3, r0, 1
}
20043a74:	10330000 	addk	r1, r19, r0
20043a78:	ea610008 	lwi	r19, r1, 8
20043a7c:	ea81000c 	lwi	r20, r1, 12
20043a80:	30210010 	addik	r1, r1, 16
20043a84:	b60f0008 	rtsd	r15, 8
20043a88:	80000000 	or	r0, r0, r0

20043a8c <fifo_i8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20043a8c:	3021ffe8 	addik	r1, r1, -24
20043a90:	fa610010 	swi	r19, r1, 16
20043a94:	fa810014 	swi	r20, r1, 20
20043a98:	12610000 	addk	r19, r1, r0
20043a9c:	96808000 	mfs	r20, rpc
20043aa0:	b000dffb 	imm	-8197
20043aa4:	3294dec0 	addik	r20, r20, -8512
20043aa8:	f8b3001c 	swi	r5, r19, 28
20043aac:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20043ab0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20043ab4:	f8130004 	swi	r0, r19, 4
20043ab8:	b8000054 	bri	84		// 20043b0c
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20043abc:	e873001c 	lwi	r3, r19, 28
20043ac0:	e8630010 	lwi	r3, r3, 16
20043ac4:	e8830000 	lwi	r4, r3, 0
20043ac8:	e873001c 	lwi	r3, r19, 28
20043acc:	e8a3000c 	lwi	r5, r3, 12
20043ad0:	e8730004 	lwi	r3, r19, 4
20043ad4:	64630402 	bslli	r3, r3, 2
20043ad8:	10651800 	addk	r3, r5, r3
20043adc:	e8630000 	lwi	r3, r3, 0
20043ae0:	14632000 	rsubk	r3, r3, r4
20043ae4:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20043ae8:	e8930008 	lwi	r4, r19, 8
20043aec:	e873000c 	lwi	r3, r19, 12
20043af0:	16441803 	cmpu	r18, r4, r3
20043af4:	bcb20008 	bgei	r18, 8		// 20043afc
20043af8:	10640000 	addk	r3, r4, r0
20043afc:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20043b00:	e8730004 	lwi	r3, r19, 4
20043b04:	30630001 	addik	r3, r3, 1
20043b08:	f8730004 	swi	r3, r19, 4
20043b0c:	e8930004 	lwi	r4, r19, 4
20043b10:	e8730020 	lwi	r3, r19, 32
20043b14:	16432003 	cmpu	r18, r3, r4
20043b18:	bc52ffa4 	blti	r18, -92		// 20043abc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20043b1c:	e873001c 	lwi	r3, r19, 28
20043b20:	e8830000 	lwi	r4, r3, 0
20043b24:	e8730008 	lwi	r3, r19, 8
20043b28:	14632000 	rsubk	r3, r3, r4
}
20043b2c:	10330000 	addk	r1, r19, r0
20043b30:	ea610010 	lwi	r19, r1, 16
20043b34:	ea810014 	lwi	r20, r1, 20
20043b38:	30210018 	addik	r1, r1, 24
20043b3c:	b60f0008 	rtsd	r15, 8
20043b40:	80000000 	or	r0, r0, r0

20043b44 <fifo_i8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20043b44:	3021fff0 	addik	r1, r1, -16
20043b48:	fa610008 	swi	r19, r1, 8
20043b4c:	fa81000c 	swi	r20, r1, 12
20043b50:	12610000 	addk	r19, r1, r0
20043b54:	96808000 	mfs	r20, rpc
20043b58:	b000dffb 	imm	-8197
20043b5c:	3294de08 	addik	r20, r20, -8696
20043b60:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20043b64:	e8730014 	lwi	r3, r19, 20
20043b68:	e8630010 	lwi	r3, r3, 16
20043b6c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20043b70:	f8130004 	swi	r0, r19, 4
20043b74:	b8000028 	bri	40		// 20043b9c
        fifo->read_inds[i] = 0;
20043b78:	e8730014 	lwi	r3, r19, 20
20043b7c:	e883000c 	lwi	r4, r3, 12
20043b80:	e8730004 	lwi	r3, r19, 4
20043b84:	64630402 	bslli	r3, r3, 2
20043b88:	10641800 	addk	r3, r4, r3
20043b8c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20043b90:	e8730004 	lwi	r3, r19, 4
20043b94:	30630001 	addik	r3, r3, 1
20043b98:	f8730004 	swi	r3, r19, 4
20043b9c:	e8730014 	lwi	r3, r19, 20
20043ba0:	e8830008 	lwi	r4, r3, 8
20043ba4:	e8730004 	lwi	r3, r19, 4
20043ba8:	16441803 	cmpu	r18, r4, r3
20043bac:	bc52ffcc 	blti	r18, -52		// 20043b78
        fifo->read_inds[i] = 0;
    }
}
20043bb0:	10330000 	addk	r1, r19, r0
20043bb4:	ea610008 	lwi	r19, r1, 8
20043bb8:	ea81000c 	lwi	r20, r1, 12
20043bbc:	30210010 	addik	r1, r1, 16
20043bc0:	b60f0008 	rtsd	r15, 8
20043bc4:	80000000 	or	r0, r0, r0

20043bc8 <fifo_i8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20043bc8:	3021fff0 	addik	r1, r1, -16
20043bcc:	fa610008 	swi	r19, r1, 8
20043bd0:	fa81000c 	swi	r20, r1, 12
20043bd4:	12610000 	addk	r19, r1, r0
20043bd8:	96808000 	mfs	r20, rpc
20043bdc:	b000dffb 	imm	-8197
20043be0:	3294dd84 	addik	r20, r20, -8828
20043be4:	f8b30014 	swi	r5, r19, 20
20043be8:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20043bec:	e8730014 	lwi	r3, r19, 20
20043bf0:	e8830004 	lwi	r4, r3, 4
20043bf4:	e8730014 	lwi	r3, r19, 20
20043bf8:	e8a3000c 	lwi	r5, r3, 12
20043bfc:	e8730018 	lwi	r3, r19, 24
20043c00:	64630402 	bslli	r3, r3, 2
20043c04:	10651800 	addk	r3, r5, r3
20043c08:	e8a30000 	lwi	r5, r3, 0
20043c0c:	e8730014 	lwi	r3, r19, 20
20043c10:	e8630000 	lwi	r3, r3, 0
20043c14:	3063ffff 	addik	r3, r3, -1
20043c18:	84651800 	and	r3, r5, r3
20043c1c:	10641800 	addk	r3, r4, r3
20043c20:	e0630000 	lbui	r3, r3, 0
20043c24:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20043c28:	e8730014 	lwi	r3, r19, 20
20043c2c:	e883000c 	lwi	r4, r3, 12
20043c30:	e8730018 	lwi	r3, r19, 24
20043c34:	64630402 	bslli	r3, r3, 2
20043c38:	10641800 	addk	r3, r4, r3
20043c3c:	e8830000 	lwi	r4, r3, 0
20043c40:	30840001 	addik	r4, r4, 1
20043c44:	f8830000 	swi	r4, r3, 0
    return value;
20043c48:	e0730004 	lbui	r3, r19, 4
20043c4c:	90630060 	sext8	r3, r3
}
20043c50:	10330000 	addk	r1, r19, r0
20043c54:	ea610008 	lwi	r19, r1, 8
20043c58:	ea81000c 	lwi	r20, r1, 12
20043c5c:	30210010 	addik	r1, r1, 16
20043c60:	b60f0008 	rtsd	r15, 8
20043c64:	80000000 	or	r0, r0, r0

20043c68 <fifo_i8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20043c68:	3021fff4 	addik	r1, r1, -12
20043c6c:	fa610004 	swi	r19, r1, 4
20043c70:	fa810008 	swi	r20, r1, 8
20043c74:	12610000 	addk	r19, r1, r0
20043c78:	96808000 	mfs	r20, rpc
20043c7c:	b000dffb 	imm	-8197
20043c80:	3294dce4 	addik	r20, r20, -8988
20043c84:	f8b30010 	swi	r5, r19, 16
20043c88:	10660000 	addk	r3, r6, r0
20043c8c:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20043c90:	e8730010 	lwi	r3, r19, 16
20043c94:	e8830004 	lwi	r4, r3, 4
20043c98:	e8730010 	lwi	r3, r19, 16
20043c9c:	e8630010 	lwi	r3, r3, 16
20043ca0:	e8a30000 	lwi	r5, r3, 0
20043ca4:	e8730010 	lwi	r3, r19, 16
20043ca8:	e8630000 	lwi	r3, r3, 0
20043cac:	3063ffff 	addik	r3, r3, -1
20043cb0:	84651800 	and	r3, r5, r3
20043cb4:	10641800 	addk	r3, r4, r3
20043cb8:	e0930014 	lbui	r4, r19, 20
20043cbc:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20043cc0:	e8730010 	lwi	r3, r19, 16
20043cc4:	e8630010 	lwi	r3, r3, 16
20043cc8:	e8830000 	lwi	r4, r3, 0
20043ccc:	30840001 	addik	r4, r4, 1
20043cd0:	f8830000 	swi	r4, r3, 0
}
20043cd4:	10330000 	addk	r1, r19, r0
20043cd8:	ea610004 	lwi	r19, r1, 4
20043cdc:	ea810008 	lwi	r20, r1, 8
20043ce0:	3021000c 	addik	r1, r1, 12
20043ce4:	b60f0008 	rtsd	r15, 8
20043ce8:	80000000 	or	r0, r0, r0

20043cec <fifo_i16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20043cec:	3021fff4 	addik	r1, r1, -12
20043cf0:	fa610004 	swi	r19, r1, 4
20043cf4:	fa810008 	swi	r20, r1, 8
20043cf8:	12610000 	addk	r19, r1, r0
20043cfc:	96808000 	mfs	r20, rpc
20043d00:	b000dffb 	imm	-8197
20043d04:	3294dc60 	addik	r20, r20, -9120
20043d08:	f8b30010 	swi	r5, r19, 16
20043d0c:	f8d30014 	swi	r6, r19, 20
20043d10:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20043d14:	e8730010 	lwi	r3, r19, 16
20043d18:	e8630010 	lwi	r3, r3, 16
20043d1c:	e8830000 	lwi	r4, r3, 0
20043d20:	e8730010 	lwi	r3, r19, 16
20043d24:	e8a3000c 	lwi	r5, r3, 12
20043d28:	e8730014 	lwi	r3, r19, 20
20043d2c:	64630402 	bslli	r3, r3, 2
20043d30:	10651800 	addk	r3, r5, r3
20043d34:	e8630000 	lwi	r3, r3, 0
20043d38:	14a32000 	rsubk	r5, r3, r4
20043d3c:	30600001 	addik	r3, r0, 1
20043d40:	e8930018 	lwi	r4, r19, 24
20043d44:	16442803 	cmpu	r18, r4, r5
20043d48:	bcb20008 	bgei	r18, 8		// 20043d50
20043d4c:	10600000 	addk	r3, r0, r0
20043d50:	a46300ff 	andi	r3, r3, 255
}
20043d54:	10330000 	addk	r1, r19, r0
20043d58:	ea610004 	lwi	r19, r1, 4
20043d5c:	ea810008 	lwi	r20, r1, 8
20043d60:	3021000c 	addik	r1, r1, 12
20043d64:	b60f0008 	rtsd	r15, 8
20043d68:	80000000 	or	r0, r0, r0

20043d6c <fifo_i16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20043d6c:	3021fff4 	addik	r1, r1, -12
20043d70:	fa610004 	swi	r19, r1, 4
20043d74:	fa810008 	swi	r20, r1, 8
20043d78:	12610000 	addk	r19, r1, r0
20043d7c:	96808000 	mfs	r20, rpc
20043d80:	b000dffb 	imm	-8197
20043d84:	3294dbe0 	addik	r20, r20, -9248
20043d88:	f8b30010 	swi	r5, r19, 16
20043d8c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20043d90:	e8730010 	lwi	r3, r19, 16
20043d94:	e8630010 	lwi	r3, r3, 16
20043d98:	e8830000 	lwi	r4, r3, 0
20043d9c:	e8730010 	lwi	r3, r19, 16
20043da0:	e8a3000c 	lwi	r5, r3, 12
20043da4:	e8730014 	lwi	r3, r19, 20
20043da8:	64630402 	bslli	r3, r3, 2
20043dac:	10651800 	addk	r3, r5, r3
20043db0:	e8630000 	lwi	r3, r3, 0
20043db4:	14632000 	rsubk	r3, r3, r4
}
20043db8:	10330000 	addk	r1, r19, r0
20043dbc:	ea610004 	lwi	r19, r1, 4
20043dc0:	ea810008 	lwi	r20, r1, 8
20043dc4:	3021000c 	addik	r1, r1, 12
20043dc8:	b60f0008 	rtsd	r15, 8
20043dcc:	80000000 	or	r0, r0, r0

20043dd0 <fifo_i16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20043dd0:	3021fff0 	addik	r1, r1, -16
20043dd4:	fa610008 	swi	r19, r1, 8
20043dd8:	fa81000c 	swi	r20, r1, 12
20043ddc:	12610000 	addk	r19, r1, r0
20043de0:	96808000 	mfs	r20, rpc
20043de4:	b000dffb 	imm	-8197
20043de8:	3294db7c 	addik	r20, r20, -9348
20043dec:	f8b30014 	swi	r5, r19, 20
20043df0:	f8d30018 	swi	r6, r19, 24
20043df4:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20043df8:	f8130004 	swi	r0, r19, 4
20043dfc:	b800005c 	bri	92		// 20043e58
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20043e00:	e8730014 	lwi	r3, r19, 20
20043e04:	e8830000 	lwi	r4, r3, 0
20043e08:	e8730014 	lwi	r3, r19, 20
20043e0c:	e8a3000c 	lwi	r5, r3, 12
20043e10:	e8730004 	lwi	r3, r19, 4
20043e14:	64630402 	bslli	r3, r3, 2
20043e18:	10651800 	addk	r3, r5, r3
20043e1c:	e8a30000 	lwi	r5, r3, 0
20043e20:	e8730014 	lwi	r3, r19, 20
20043e24:	e8630010 	lwi	r3, r3, 16
20043e28:	e8630000 	lwi	r3, r3, 0
20043e2c:	14632800 	rsubk	r3, r3, r5
20043e30:	10641800 	addk	r3, r4, r3
20043e34:	30830001 	addik	r4, r3, 1
20043e38:	e873001c 	lwi	r3, r19, 28
20043e3c:	16441803 	cmpu	r18, r4, r3
20043e40:	bc52000c 	blti	r18, 12		// 20043e4c
            return 0;
20043e44:	10600000 	addk	r3, r0, r0
20043e48:	b8000024 	bri	36		// 20043e6c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20043e4c:	e8730004 	lwi	r3, r19, 4
20043e50:	30630001 	addik	r3, r3, 1
20043e54:	f8730004 	swi	r3, r19, 4
20043e58:	e8930004 	lwi	r4, r19, 4
20043e5c:	e8730018 	lwi	r3, r19, 24
20043e60:	16432003 	cmpu	r18, r3, r4
20043e64:	bc52ff9c 	blti	r18, -100		// 20043e00
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20043e68:	30600001 	addik	r3, r0, 1
}
20043e6c:	10330000 	addk	r1, r19, r0
20043e70:	ea610008 	lwi	r19, r1, 8
20043e74:	ea81000c 	lwi	r20, r1, 12
20043e78:	30210010 	addik	r1, r1, 16
20043e7c:	b60f0008 	rtsd	r15, 8
20043e80:	80000000 	or	r0, r0, r0

20043e84 <fifo_i16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20043e84:	3021ffe8 	addik	r1, r1, -24
20043e88:	fa610010 	swi	r19, r1, 16
20043e8c:	fa810014 	swi	r20, r1, 20
20043e90:	12610000 	addk	r19, r1, r0
20043e94:	96808000 	mfs	r20, rpc
20043e98:	b000dffb 	imm	-8197
20043e9c:	3294dac8 	addik	r20, r20, -9528
20043ea0:	f8b3001c 	swi	r5, r19, 28
20043ea4:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20043ea8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20043eac:	f8130004 	swi	r0, r19, 4
20043eb0:	b8000054 	bri	84		// 20043f04
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20043eb4:	e873001c 	lwi	r3, r19, 28
20043eb8:	e8630010 	lwi	r3, r3, 16
20043ebc:	e8830000 	lwi	r4, r3, 0
20043ec0:	e873001c 	lwi	r3, r19, 28
20043ec4:	e8a3000c 	lwi	r5, r3, 12
20043ec8:	e8730004 	lwi	r3, r19, 4
20043ecc:	64630402 	bslli	r3, r3, 2
20043ed0:	10651800 	addk	r3, r5, r3
20043ed4:	e8630000 	lwi	r3, r3, 0
20043ed8:	14632000 	rsubk	r3, r3, r4
20043edc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20043ee0:	e8930008 	lwi	r4, r19, 8
20043ee4:	e873000c 	lwi	r3, r19, 12
20043ee8:	16441803 	cmpu	r18, r4, r3
20043eec:	bcb20008 	bgei	r18, 8		// 20043ef4
20043ef0:	10640000 	addk	r3, r4, r0
20043ef4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20043ef8:	e8730004 	lwi	r3, r19, 4
20043efc:	30630001 	addik	r3, r3, 1
20043f00:	f8730004 	swi	r3, r19, 4
20043f04:	e8930004 	lwi	r4, r19, 4
20043f08:	e8730020 	lwi	r3, r19, 32
20043f0c:	16432003 	cmpu	r18, r3, r4
20043f10:	bc52ffa4 	blti	r18, -92		// 20043eb4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20043f14:	e873001c 	lwi	r3, r19, 28
20043f18:	e8830000 	lwi	r4, r3, 0
20043f1c:	e8730008 	lwi	r3, r19, 8
20043f20:	14632000 	rsubk	r3, r3, r4
}
20043f24:	10330000 	addk	r1, r19, r0
20043f28:	ea610010 	lwi	r19, r1, 16
20043f2c:	ea810014 	lwi	r20, r1, 20
20043f30:	30210018 	addik	r1, r1, 24
20043f34:	b60f0008 	rtsd	r15, 8
20043f38:	80000000 	or	r0, r0, r0

20043f3c <fifo_i16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20043f3c:	3021fff0 	addik	r1, r1, -16
20043f40:	fa610008 	swi	r19, r1, 8
20043f44:	fa81000c 	swi	r20, r1, 12
20043f48:	12610000 	addk	r19, r1, r0
20043f4c:	96808000 	mfs	r20, rpc
20043f50:	b000dffb 	imm	-8197
20043f54:	3294da10 	addik	r20, r20, -9712
20043f58:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20043f5c:	e8730014 	lwi	r3, r19, 20
20043f60:	e8630010 	lwi	r3, r3, 16
20043f64:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20043f68:	f8130004 	swi	r0, r19, 4
20043f6c:	b8000028 	bri	40		// 20043f94
        fifo->read_inds[i] = 0;
20043f70:	e8730014 	lwi	r3, r19, 20
20043f74:	e883000c 	lwi	r4, r3, 12
20043f78:	e8730004 	lwi	r3, r19, 4
20043f7c:	64630402 	bslli	r3, r3, 2
20043f80:	10641800 	addk	r3, r4, r3
20043f84:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20043f88:	e8730004 	lwi	r3, r19, 4
20043f8c:	30630001 	addik	r3, r3, 1
20043f90:	f8730004 	swi	r3, r19, 4
20043f94:	e8730014 	lwi	r3, r19, 20
20043f98:	e8830008 	lwi	r4, r3, 8
20043f9c:	e8730004 	lwi	r3, r19, 4
20043fa0:	16441803 	cmpu	r18, r4, r3
20043fa4:	bc52ffcc 	blti	r18, -52		// 20043f70
        fifo->read_inds[i] = 0;
    }
}
20043fa8:	10330000 	addk	r1, r19, r0
20043fac:	ea610008 	lwi	r19, r1, 8
20043fb0:	ea81000c 	lwi	r20, r1, 12
20043fb4:	30210010 	addik	r1, r1, 16
20043fb8:	b60f0008 	rtsd	r15, 8
20043fbc:	80000000 	or	r0, r0, r0

20043fc0 <fifo_i16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20043fc0:	3021fff0 	addik	r1, r1, -16
20043fc4:	fa610008 	swi	r19, r1, 8
20043fc8:	fa81000c 	swi	r20, r1, 12
20043fcc:	12610000 	addk	r19, r1, r0
20043fd0:	96808000 	mfs	r20, rpc
20043fd4:	b000dffb 	imm	-8197
20043fd8:	3294d98c 	addik	r20, r20, -9844
20043fdc:	f8b30014 	swi	r5, r19, 20
20043fe0:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20043fe4:	e8730014 	lwi	r3, r19, 20
20043fe8:	e8830004 	lwi	r4, r3, 4
20043fec:	e8730014 	lwi	r3, r19, 20
20043ff0:	e8a3000c 	lwi	r5, r3, 12
20043ff4:	e8730018 	lwi	r3, r19, 24
20043ff8:	64630402 	bslli	r3, r3, 2
20043ffc:	10651800 	addk	r3, r5, r3
20044000:	e8a30000 	lwi	r5, r3, 0
20044004:	e8730014 	lwi	r3, r19, 20
20044008:	e8630000 	lwi	r3, r3, 0
2004400c:	3063ffff 	addik	r3, r3, -1
20044010:	84651800 	and	r3, r5, r3
20044014:	10631800 	addk	r3, r3, r3
20044018:	10641800 	addk	r3, r4, r3
2004401c:	e4630000 	lhui	r3, r3, 0
20044020:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20044024:	e8730014 	lwi	r3, r19, 20
20044028:	e883000c 	lwi	r4, r3, 12
2004402c:	e8730018 	lwi	r3, r19, 24
20044030:	64630402 	bslli	r3, r3, 2
20044034:	10641800 	addk	r3, r4, r3
20044038:	e8830000 	lwi	r4, r3, 0
2004403c:	30840001 	addik	r4, r4, 1
20044040:	f8830000 	swi	r4, r3, 0
    return value;
20044044:	e4730004 	lhui	r3, r19, 4
20044048:	90630061 	sext16	r3, r3
}
2004404c:	10330000 	addk	r1, r19, r0
20044050:	ea610008 	lwi	r19, r1, 8
20044054:	ea81000c 	lwi	r20, r1, 12
20044058:	30210010 	addik	r1, r1, 16
2004405c:	b60f0008 	rtsd	r15, 8
20044060:	80000000 	or	r0, r0, r0

20044064 <fifo_i16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20044064:	3021fff4 	addik	r1, r1, -12
20044068:	fa610004 	swi	r19, r1, 4
2004406c:	fa810008 	swi	r20, r1, 8
20044070:	12610000 	addk	r19, r1, r0
20044074:	96808000 	mfs	r20, rpc
20044078:	b000dffb 	imm	-8197
2004407c:	3294d8e8 	addik	r20, r20, -10008
20044080:	f8b30010 	swi	r5, r19, 16
20044084:	10660000 	addk	r3, r6, r0
20044088:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2004408c:	e8730010 	lwi	r3, r19, 16
20044090:	e8830004 	lwi	r4, r3, 4
20044094:	e8730010 	lwi	r3, r19, 16
20044098:	e8630010 	lwi	r3, r3, 16
2004409c:	e8a30000 	lwi	r5, r3, 0
200440a0:	e8730010 	lwi	r3, r19, 16
200440a4:	e8630000 	lwi	r3, r3, 0
200440a8:	3063ffff 	addik	r3, r3, -1
200440ac:	84651800 	and	r3, r5, r3
200440b0:	10631800 	addk	r3, r3, r3
200440b4:	10641800 	addk	r3, r4, r3
200440b8:	e4930014 	lhui	r4, r19, 20
200440bc:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
200440c0:	e8730010 	lwi	r3, r19, 16
200440c4:	e8630010 	lwi	r3, r3, 16
200440c8:	e8830000 	lwi	r4, r3, 0
200440cc:	30840001 	addik	r4, r4, 1
200440d0:	f8830000 	swi	r4, r3, 0
}
200440d4:	10330000 	addk	r1, r19, r0
200440d8:	ea610004 	lwi	r19, r1, 4
200440dc:	ea810008 	lwi	r20, r1, 8
200440e0:	3021000c 	addik	r1, r1, 12
200440e4:	b60f0008 	rtsd	r15, 8
200440e8:	80000000 	or	r0, r0, r0

200440ec <fifo_i32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200440ec:	3021fff4 	addik	r1, r1, -12
200440f0:	fa610004 	swi	r19, r1, 4
200440f4:	fa810008 	swi	r20, r1, 8
200440f8:	12610000 	addk	r19, r1, r0
200440fc:	96808000 	mfs	r20, rpc
20044100:	b000dffb 	imm	-8197
20044104:	3294d860 	addik	r20, r20, -10144
20044108:	f8b30010 	swi	r5, r19, 16
2004410c:	f8d30014 	swi	r6, r19, 20
20044110:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20044114:	e8730010 	lwi	r3, r19, 16
20044118:	e8630010 	lwi	r3, r3, 16
2004411c:	e8830000 	lwi	r4, r3, 0
20044120:	e8730010 	lwi	r3, r19, 16
20044124:	e8a3000c 	lwi	r5, r3, 12
20044128:	e8730014 	lwi	r3, r19, 20
2004412c:	64630402 	bslli	r3, r3, 2
20044130:	10651800 	addk	r3, r5, r3
20044134:	e8630000 	lwi	r3, r3, 0
20044138:	14a32000 	rsubk	r5, r3, r4
2004413c:	30600001 	addik	r3, r0, 1
20044140:	e8930018 	lwi	r4, r19, 24
20044144:	16442803 	cmpu	r18, r4, r5
20044148:	bcb20008 	bgei	r18, 8		// 20044150
2004414c:	10600000 	addk	r3, r0, r0
20044150:	a46300ff 	andi	r3, r3, 255
}
20044154:	10330000 	addk	r1, r19, r0
20044158:	ea610004 	lwi	r19, r1, 4
2004415c:	ea810008 	lwi	r20, r1, 8
20044160:	3021000c 	addik	r1, r1, 12
20044164:	b60f0008 	rtsd	r15, 8
20044168:	80000000 	or	r0, r0, r0

2004416c <fifo_i32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2004416c:	3021fff4 	addik	r1, r1, -12
20044170:	fa610004 	swi	r19, r1, 4
20044174:	fa810008 	swi	r20, r1, 8
20044178:	12610000 	addk	r19, r1, r0
2004417c:	96808000 	mfs	r20, rpc
20044180:	b000dffb 	imm	-8197
20044184:	3294d7e0 	addik	r20, r20, -10272
20044188:	f8b30010 	swi	r5, r19, 16
2004418c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20044190:	e8730010 	lwi	r3, r19, 16
20044194:	e8630010 	lwi	r3, r3, 16
20044198:	e8830000 	lwi	r4, r3, 0
2004419c:	e8730010 	lwi	r3, r19, 16
200441a0:	e8a3000c 	lwi	r5, r3, 12
200441a4:	e8730014 	lwi	r3, r19, 20
200441a8:	64630402 	bslli	r3, r3, 2
200441ac:	10651800 	addk	r3, r5, r3
200441b0:	e8630000 	lwi	r3, r3, 0
200441b4:	14632000 	rsubk	r3, r3, r4
}
200441b8:	10330000 	addk	r1, r19, r0
200441bc:	ea610004 	lwi	r19, r1, 4
200441c0:	ea810008 	lwi	r20, r1, 8
200441c4:	3021000c 	addik	r1, r1, 12
200441c8:	b60f0008 	rtsd	r15, 8
200441cc:	80000000 	or	r0, r0, r0

200441d0 <fifo_i32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200441d0:	3021fff0 	addik	r1, r1, -16
200441d4:	fa610008 	swi	r19, r1, 8
200441d8:	fa81000c 	swi	r20, r1, 12
200441dc:	12610000 	addk	r19, r1, r0
200441e0:	96808000 	mfs	r20, rpc
200441e4:	b000dffb 	imm	-8197
200441e8:	3294d77c 	addik	r20, r20, -10372
200441ec:	f8b30014 	swi	r5, r19, 20
200441f0:	f8d30018 	swi	r6, r19, 24
200441f4:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200441f8:	f8130004 	swi	r0, r19, 4
200441fc:	b800005c 	bri	92		// 20044258
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20044200:	e8730014 	lwi	r3, r19, 20
20044204:	e8830000 	lwi	r4, r3, 0
20044208:	e8730014 	lwi	r3, r19, 20
2004420c:	e8a3000c 	lwi	r5, r3, 12
20044210:	e8730004 	lwi	r3, r19, 4
20044214:	64630402 	bslli	r3, r3, 2
20044218:	10651800 	addk	r3, r5, r3
2004421c:	e8a30000 	lwi	r5, r3, 0
20044220:	e8730014 	lwi	r3, r19, 20
20044224:	e8630010 	lwi	r3, r3, 16
20044228:	e8630000 	lwi	r3, r3, 0
2004422c:	14632800 	rsubk	r3, r3, r5
20044230:	10641800 	addk	r3, r4, r3
20044234:	30830001 	addik	r4, r3, 1
20044238:	e873001c 	lwi	r3, r19, 28
2004423c:	16441803 	cmpu	r18, r4, r3
20044240:	bc52000c 	blti	r18, 12		// 2004424c
            return 0;
20044244:	10600000 	addk	r3, r0, r0
20044248:	b8000024 	bri	36		// 2004426c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2004424c:	e8730004 	lwi	r3, r19, 4
20044250:	30630001 	addik	r3, r3, 1
20044254:	f8730004 	swi	r3, r19, 4
20044258:	e8930004 	lwi	r4, r19, 4
2004425c:	e8730018 	lwi	r3, r19, 24
20044260:	16432003 	cmpu	r18, r3, r4
20044264:	bc52ff9c 	blti	r18, -100		// 20044200
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20044268:	30600001 	addik	r3, r0, 1
}
2004426c:	10330000 	addk	r1, r19, r0
20044270:	ea610008 	lwi	r19, r1, 8
20044274:	ea81000c 	lwi	r20, r1, 12
20044278:	30210010 	addik	r1, r1, 16
2004427c:	b60f0008 	rtsd	r15, 8
20044280:	80000000 	or	r0, r0, r0

20044284 <fifo_i32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20044284:	3021ffe8 	addik	r1, r1, -24
20044288:	fa610010 	swi	r19, r1, 16
2004428c:	fa810014 	swi	r20, r1, 20
20044290:	12610000 	addk	r19, r1, r0
20044294:	96808000 	mfs	r20, rpc
20044298:	b000dffb 	imm	-8197
2004429c:	3294d6c8 	addik	r20, r20, -10552
200442a0:	f8b3001c 	swi	r5, r19, 28
200442a4:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
200442a8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200442ac:	f8130004 	swi	r0, r19, 4
200442b0:	b8000054 	bri	84		// 20044304
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200442b4:	e873001c 	lwi	r3, r19, 28
200442b8:	e8630010 	lwi	r3, r3, 16
200442bc:	e8830000 	lwi	r4, r3, 0
200442c0:	e873001c 	lwi	r3, r19, 28
200442c4:	e8a3000c 	lwi	r5, r3, 12
200442c8:	e8730004 	lwi	r3, r19, 4
200442cc:	64630402 	bslli	r3, r3, 2
200442d0:	10651800 	addk	r3, r5, r3
200442d4:	e8630000 	lwi	r3, r3, 0
200442d8:	14632000 	rsubk	r3, r3, r4
200442dc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200442e0:	e8930008 	lwi	r4, r19, 8
200442e4:	e873000c 	lwi	r3, r19, 12
200442e8:	16441803 	cmpu	r18, r4, r3
200442ec:	bcb20008 	bgei	r18, 8		// 200442f4
200442f0:	10640000 	addk	r3, r4, r0
200442f4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200442f8:	e8730004 	lwi	r3, r19, 4
200442fc:	30630001 	addik	r3, r3, 1
20044300:	f8730004 	swi	r3, r19, 4
20044304:	e8930004 	lwi	r4, r19, 4
20044308:	e8730020 	lwi	r3, r19, 32
2004430c:	16432003 	cmpu	r18, r3, r4
20044310:	bc52ffa4 	blti	r18, -92		// 200442b4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20044314:	e873001c 	lwi	r3, r19, 28
20044318:	e8830000 	lwi	r4, r3, 0
2004431c:	e8730008 	lwi	r3, r19, 8
20044320:	14632000 	rsubk	r3, r3, r4
}
20044324:	10330000 	addk	r1, r19, r0
20044328:	ea610010 	lwi	r19, r1, 16
2004432c:	ea810014 	lwi	r20, r1, 20
20044330:	30210018 	addik	r1, r1, 24
20044334:	b60f0008 	rtsd	r15, 8
20044338:	80000000 	or	r0, r0, r0

2004433c <fifo_i32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2004433c:	3021fff0 	addik	r1, r1, -16
20044340:	fa610008 	swi	r19, r1, 8
20044344:	fa81000c 	swi	r20, r1, 12
20044348:	12610000 	addk	r19, r1, r0
2004434c:	96808000 	mfs	r20, rpc
20044350:	b000dffb 	imm	-8197
20044354:	3294d610 	addik	r20, r20, -10736
20044358:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2004435c:	e8730014 	lwi	r3, r19, 20
20044360:	e8630010 	lwi	r3, r3, 16
20044364:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20044368:	f8130004 	swi	r0, r19, 4
2004436c:	b8000028 	bri	40		// 20044394
        fifo->read_inds[i] = 0;
20044370:	e8730014 	lwi	r3, r19, 20
20044374:	e883000c 	lwi	r4, r3, 12
20044378:	e8730004 	lwi	r3, r19, 4
2004437c:	64630402 	bslli	r3, r3, 2
20044380:	10641800 	addk	r3, r4, r3
20044384:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20044388:	e8730004 	lwi	r3, r19, 4
2004438c:	30630001 	addik	r3, r3, 1
20044390:	f8730004 	swi	r3, r19, 4
20044394:	e8730014 	lwi	r3, r19, 20
20044398:	e8830008 	lwi	r4, r3, 8
2004439c:	e8730004 	lwi	r3, r19, 4
200443a0:	16441803 	cmpu	r18, r4, r3
200443a4:	bc52ffcc 	blti	r18, -52		// 20044370
        fifo->read_inds[i] = 0;
    }
}
200443a8:	10330000 	addk	r1, r19, r0
200443ac:	ea610008 	lwi	r19, r1, 8
200443b0:	ea81000c 	lwi	r20, r1, 12
200443b4:	30210010 	addik	r1, r1, 16
200443b8:	b60f0008 	rtsd	r15, 8
200443bc:	80000000 	or	r0, r0, r0

200443c0 <fifo_i32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200443c0:	3021fff0 	addik	r1, r1, -16
200443c4:	fa610008 	swi	r19, r1, 8
200443c8:	fa81000c 	swi	r20, r1, 12
200443cc:	12610000 	addk	r19, r1, r0
200443d0:	96808000 	mfs	r20, rpc
200443d4:	b000dffb 	imm	-8197
200443d8:	3294d58c 	addik	r20, r20, -10868
200443dc:	f8b30014 	swi	r5, r19, 20
200443e0:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200443e4:	e8730014 	lwi	r3, r19, 20
200443e8:	e8830004 	lwi	r4, r3, 4
200443ec:	e8730014 	lwi	r3, r19, 20
200443f0:	e8a3000c 	lwi	r5, r3, 12
200443f4:	e8730018 	lwi	r3, r19, 24
200443f8:	64630402 	bslli	r3, r3, 2
200443fc:	10651800 	addk	r3, r5, r3
20044400:	e8a30000 	lwi	r5, r3, 0
20044404:	e8730014 	lwi	r3, r19, 20
20044408:	e8630000 	lwi	r3, r3, 0
2004440c:	3063ffff 	addik	r3, r3, -1
20044410:	84651800 	and	r3, r5, r3
20044414:	64630402 	bslli	r3, r3, 2
20044418:	10641800 	addk	r3, r4, r3
2004441c:	e8630000 	lwi	r3, r3, 0
20044420:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20044424:	e8730014 	lwi	r3, r19, 20
20044428:	e883000c 	lwi	r4, r3, 12
2004442c:	e8730018 	lwi	r3, r19, 24
20044430:	64630402 	bslli	r3, r3, 2
20044434:	10641800 	addk	r3, r4, r3
20044438:	e8830000 	lwi	r4, r3, 0
2004443c:	30840001 	addik	r4, r4, 1
20044440:	f8830000 	swi	r4, r3, 0
    return value;
20044444:	e8730004 	lwi	r3, r19, 4
}
20044448:	10330000 	addk	r1, r19, r0
2004444c:	ea610008 	lwi	r19, r1, 8
20044450:	ea81000c 	lwi	r20, r1, 12
20044454:	30210010 	addik	r1, r1, 16
20044458:	b60f0008 	rtsd	r15, 8
2004445c:	80000000 	or	r0, r0, r0

20044460 <fifo_i32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20044460:	3021fff4 	addik	r1, r1, -12
20044464:	fa610004 	swi	r19, r1, 4
20044468:	fa810008 	swi	r20, r1, 8
2004446c:	12610000 	addk	r19, r1, r0
20044470:	96808000 	mfs	r20, rpc
20044474:	b000dffb 	imm	-8197
20044478:	3294d4ec 	addik	r20, r20, -11028
2004447c:	f8b30010 	swi	r5, r19, 16
20044480:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20044484:	e8730010 	lwi	r3, r19, 16
20044488:	e8830004 	lwi	r4, r3, 4
2004448c:	e8730010 	lwi	r3, r19, 16
20044490:	e8630010 	lwi	r3, r3, 16
20044494:	e8a30000 	lwi	r5, r3, 0
20044498:	e8730010 	lwi	r3, r19, 16
2004449c:	e8630000 	lwi	r3, r3, 0
200444a0:	3063ffff 	addik	r3, r3, -1
200444a4:	84651800 	and	r3, r5, r3
200444a8:	64630402 	bslli	r3, r3, 2
200444ac:	10641800 	addk	r3, r4, r3
200444b0:	e8930014 	lwi	r4, r19, 20
200444b4:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
200444b8:	e8730010 	lwi	r3, r19, 16
200444bc:	e8630010 	lwi	r3, r3, 16
200444c0:	e8830000 	lwi	r4, r3, 0
200444c4:	30840001 	addik	r4, r4, 1
200444c8:	f8830000 	swi	r4, r3, 0
}
200444cc:	10330000 	addk	r1, r19, r0
200444d0:	ea610004 	lwi	r19, r1, 4
200444d4:	ea810008 	lwi	r20, r1, 8
200444d8:	3021000c 	addik	r1, r1, 12
200444dc:	b60f0008 	rtsd	r15, 8
200444e0:	80000000 	or	r0, r0, r0

200444e4 <fifo_i64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200444e4:	3021fff4 	addik	r1, r1, -12
200444e8:	fa610004 	swi	r19, r1, 4
200444ec:	fa810008 	swi	r20, r1, 8
200444f0:	12610000 	addk	r19, r1, r0
200444f4:	96808000 	mfs	r20, rpc
200444f8:	b000dffb 	imm	-8197
200444fc:	3294d468 	addik	r20, r20, -11160
20044500:	f8b30010 	swi	r5, r19, 16
20044504:	f8d30014 	swi	r6, r19, 20
20044508:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2004450c:	e8730010 	lwi	r3, r19, 16
20044510:	e8630010 	lwi	r3, r3, 16
20044514:	e8830000 	lwi	r4, r3, 0
20044518:	e8730010 	lwi	r3, r19, 16
2004451c:	e8a3000c 	lwi	r5, r3, 12
20044520:	e8730014 	lwi	r3, r19, 20
20044524:	64630402 	bslli	r3, r3, 2
20044528:	10651800 	addk	r3, r5, r3
2004452c:	e8630000 	lwi	r3, r3, 0
20044530:	14a32000 	rsubk	r5, r3, r4
20044534:	30600001 	addik	r3, r0, 1
20044538:	e8930018 	lwi	r4, r19, 24
2004453c:	16442803 	cmpu	r18, r4, r5
20044540:	bcb20008 	bgei	r18, 8		// 20044548
20044544:	10600000 	addk	r3, r0, r0
20044548:	a46300ff 	andi	r3, r3, 255
}
2004454c:	10330000 	addk	r1, r19, r0
20044550:	ea610004 	lwi	r19, r1, 4
20044554:	ea810008 	lwi	r20, r1, 8
20044558:	3021000c 	addik	r1, r1, 12
2004455c:	b60f0008 	rtsd	r15, 8
20044560:	80000000 	or	r0, r0, r0

20044564 <fifo_i64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20044564:	3021fff4 	addik	r1, r1, -12
20044568:	fa610004 	swi	r19, r1, 4
2004456c:	fa810008 	swi	r20, r1, 8
20044570:	12610000 	addk	r19, r1, r0
20044574:	96808000 	mfs	r20, rpc
20044578:	b000dffb 	imm	-8197
2004457c:	3294d3e8 	addik	r20, r20, -11288
20044580:	f8b30010 	swi	r5, r19, 16
20044584:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20044588:	e8730010 	lwi	r3, r19, 16
2004458c:	e8630010 	lwi	r3, r3, 16
20044590:	e8830000 	lwi	r4, r3, 0
20044594:	e8730010 	lwi	r3, r19, 16
20044598:	e8a3000c 	lwi	r5, r3, 12
2004459c:	e8730014 	lwi	r3, r19, 20
200445a0:	64630402 	bslli	r3, r3, 2
200445a4:	10651800 	addk	r3, r5, r3
200445a8:	e8630000 	lwi	r3, r3, 0
200445ac:	14632000 	rsubk	r3, r3, r4
}
200445b0:	10330000 	addk	r1, r19, r0
200445b4:	ea610004 	lwi	r19, r1, 4
200445b8:	ea810008 	lwi	r20, r1, 8
200445bc:	3021000c 	addik	r1, r1, 12
200445c0:	b60f0008 	rtsd	r15, 8
200445c4:	80000000 	or	r0, r0, r0

200445c8 <fifo_i64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200445c8:	3021fff0 	addik	r1, r1, -16
200445cc:	fa610008 	swi	r19, r1, 8
200445d0:	fa81000c 	swi	r20, r1, 12
200445d4:	12610000 	addk	r19, r1, r0
200445d8:	96808000 	mfs	r20, rpc
200445dc:	b000dffb 	imm	-8197
200445e0:	3294d384 	addik	r20, r20, -11388
200445e4:	f8b30014 	swi	r5, r19, 20
200445e8:	f8d30018 	swi	r6, r19, 24
200445ec:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200445f0:	f8130004 	swi	r0, r19, 4
200445f4:	b800005c 	bri	92		// 20044650
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200445f8:	e8730014 	lwi	r3, r19, 20
200445fc:	e8830000 	lwi	r4, r3, 0
20044600:	e8730014 	lwi	r3, r19, 20
20044604:	e8a3000c 	lwi	r5, r3, 12
20044608:	e8730004 	lwi	r3, r19, 4
2004460c:	64630402 	bslli	r3, r3, 2
20044610:	10651800 	addk	r3, r5, r3
20044614:	e8a30000 	lwi	r5, r3, 0
20044618:	e8730014 	lwi	r3, r19, 20
2004461c:	e8630010 	lwi	r3, r3, 16
20044620:	e8630000 	lwi	r3, r3, 0
20044624:	14632800 	rsubk	r3, r3, r5
20044628:	10641800 	addk	r3, r4, r3
2004462c:	30830001 	addik	r4, r3, 1
20044630:	e873001c 	lwi	r3, r19, 28
20044634:	16441803 	cmpu	r18, r4, r3
20044638:	bc52000c 	blti	r18, 12		// 20044644
            return 0;
2004463c:	10600000 	addk	r3, r0, r0
20044640:	b8000024 	bri	36		// 20044664
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20044644:	e8730004 	lwi	r3, r19, 4
20044648:	30630001 	addik	r3, r3, 1
2004464c:	f8730004 	swi	r3, r19, 4
20044650:	e8930004 	lwi	r4, r19, 4
20044654:	e8730018 	lwi	r3, r19, 24
20044658:	16432003 	cmpu	r18, r3, r4
2004465c:	bc52ff9c 	blti	r18, -100		// 200445f8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20044660:	30600001 	addik	r3, r0, 1
}
20044664:	10330000 	addk	r1, r19, r0
20044668:	ea610008 	lwi	r19, r1, 8
2004466c:	ea81000c 	lwi	r20, r1, 12
20044670:	30210010 	addik	r1, r1, 16
20044674:	b60f0008 	rtsd	r15, 8
20044678:	80000000 	or	r0, r0, r0

2004467c <fifo_i64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2004467c:	3021ffe8 	addik	r1, r1, -24
20044680:	fa610010 	swi	r19, r1, 16
20044684:	fa810014 	swi	r20, r1, 20
20044688:	12610000 	addk	r19, r1, r0
2004468c:	96808000 	mfs	r20, rpc
20044690:	b000dffb 	imm	-8197
20044694:	3294d2d0 	addik	r20, r20, -11568
20044698:	f8b3001c 	swi	r5, r19, 28
2004469c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
200446a0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200446a4:	f8130004 	swi	r0, r19, 4
200446a8:	b8000054 	bri	84		// 200446fc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200446ac:	e873001c 	lwi	r3, r19, 28
200446b0:	e8630010 	lwi	r3, r3, 16
200446b4:	e8830000 	lwi	r4, r3, 0
200446b8:	e873001c 	lwi	r3, r19, 28
200446bc:	e8a3000c 	lwi	r5, r3, 12
200446c0:	e8730004 	lwi	r3, r19, 4
200446c4:	64630402 	bslli	r3, r3, 2
200446c8:	10651800 	addk	r3, r5, r3
200446cc:	e8630000 	lwi	r3, r3, 0
200446d0:	14632000 	rsubk	r3, r3, r4
200446d4:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200446d8:	e8930008 	lwi	r4, r19, 8
200446dc:	e873000c 	lwi	r3, r19, 12
200446e0:	16441803 	cmpu	r18, r4, r3
200446e4:	bcb20008 	bgei	r18, 8		// 200446ec
200446e8:	10640000 	addk	r3, r4, r0
200446ec:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200446f0:	e8730004 	lwi	r3, r19, 4
200446f4:	30630001 	addik	r3, r3, 1
200446f8:	f8730004 	swi	r3, r19, 4
200446fc:	e8930004 	lwi	r4, r19, 4
20044700:	e8730020 	lwi	r3, r19, 32
20044704:	16432003 	cmpu	r18, r3, r4
20044708:	bc52ffa4 	blti	r18, -92		// 200446ac
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2004470c:	e873001c 	lwi	r3, r19, 28
20044710:	e8830000 	lwi	r4, r3, 0
20044714:	e8730008 	lwi	r3, r19, 8
20044718:	14632000 	rsubk	r3, r3, r4
}
2004471c:	10330000 	addk	r1, r19, r0
20044720:	ea610010 	lwi	r19, r1, 16
20044724:	ea810014 	lwi	r20, r1, 20
20044728:	30210018 	addik	r1, r1, 24
2004472c:	b60f0008 	rtsd	r15, 8
20044730:	80000000 	or	r0, r0, r0

20044734 <fifo_i64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20044734:	3021fff0 	addik	r1, r1, -16
20044738:	fa610008 	swi	r19, r1, 8
2004473c:	fa81000c 	swi	r20, r1, 12
20044740:	12610000 	addk	r19, r1, r0
20044744:	96808000 	mfs	r20, rpc
20044748:	b000dffb 	imm	-8197
2004474c:	3294d218 	addik	r20, r20, -11752
20044750:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20044754:	e8730014 	lwi	r3, r19, 20
20044758:	e8630010 	lwi	r3, r3, 16
2004475c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20044760:	f8130004 	swi	r0, r19, 4
20044764:	b8000028 	bri	40		// 2004478c
        fifo->read_inds[i] = 0;
20044768:	e8730014 	lwi	r3, r19, 20
2004476c:	e883000c 	lwi	r4, r3, 12
20044770:	e8730004 	lwi	r3, r19, 4
20044774:	64630402 	bslli	r3, r3, 2
20044778:	10641800 	addk	r3, r4, r3
2004477c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20044780:	e8730004 	lwi	r3, r19, 4
20044784:	30630001 	addik	r3, r3, 1
20044788:	f8730004 	swi	r3, r19, 4
2004478c:	e8730014 	lwi	r3, r19, 20
20044790:	e8830008 	lwi	r4, r3, 8
20044794:	e8730004 	lwi	r3, r19, 4
20044798:	16441803 	cmpu	r18, r4, r3
2004479c:	bc52ffcc 	blti	r18, -52		// 20044768
        fifo->read_inds[i] = 0;
    }
}
200447a0:	10330000 	addk	r1, r19, r0
200447a4:	ea610008 	lwi	r19, r1, 8
200447a8:	ea81000c 	lwi	r20, r1, 12
200447ac:	30210010 	addik	r1, r1, 16
200447b0:	b60f0008 	rtsd	r15, 8
200447b4:	80000000 	or	r0, r0, r0

200447b8 <fifo_i64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200447b8:	3021ffec 	addik	r1, r1, -20
200447bc:	fa61000c 	swi	r19, r1, 12
200447c0:	fa810010 	swi	r20, r1, 16
200447c4:	12610000 	addk	r19, r1, r0
200447c8:	96808000 	mfs	r20, rpc
200447cc:	b000dffb 	imm	-8197
200447d0:	3294d194 	addik	r20, r20, -11884
200447d4:	f8b30018 	swi	r5, r19, 24
200447d8:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200447dc:	e8730018 	lwi	r3, r19, 24
200447e0:	e8830004 	lwi	r4, r3, 4
200447e4:	e8730018 	lwi	r3, r19, 24
200447e8:	e8a3000c 	lwi	r5, r3, 12
200447ec:	e873001c 	lwi	r3, r19, 28
200447f0:	64630402 	bslli	r3, r3, 2
200447f4:	10651800 	addk	r3, r5, r3
200447f8:	e8a30000 	lwi	r5, r3, 0
200447fc:	e8730018 	lwi	r3, r19, 24
20044800:	e8630000 	lwi	r3, r3, 0
20044804:	3063ffff 	addik	r3, r3, -1
20044808:	84651800 	and	r3, r5, r3
2004480c:	64630403 	bslli	r3, r3, 3
20044810:	10641800 	addk	r3, r4, r3
20044814:	e8830000 	lwi	r4, r3, 0
20044818:	e8a30004 	lwi	r5, r3, 4
2004481c:	f8930004 	swi	r4, r19, 4
20044820:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20044824:	e8730018 	lwi	r3, r19, 24
20044828:	e883000c 	lwi	r4, r3, 12
2004482c:	e873001c 	lwi	r3, r19, 28
20044830:	64630402 	bslli	r3, r3, 2
20044834:	10641800 	addk	r3, r4, r3
20044838:	e8830000 	lwi	r4, r3, 0
2004483c:	30840001 	addik	r4, r4, 1
20044840:	f8830000 	swi	r4, r3, 0
    return value;
20044844:	e8930004 	lwi	r4, r19, 4
20044848:	e8b30008 	lwi	r5, r19, 8
}
2004484c:	10640000 	addk	r3, r4, r0
20044850:	10850000 	addk	r4, r5, r0
20044854:	10330000 	addk	r1, r19, r0
20044858:	ea61000c 	lwi	r19, r1, 12
2004485c:	ea810010 	lwi	r20, r1, 16
20044860:	30210014 	addik	r1, r1, 20
20044864:	b60f0008 	rtsd	r15, 8
20044868:	80000000 	or	r0, r0, r0

2004486c <fifo_i64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2004486c:	3021fff4 	addik	r1, r1, -12
20044870:	fa610004 	swi	r19, r1, 4
20044874:	fa810008 	swi	r20, r1, 8
20044878:	12610000 	addk	r19, r1, r0
2004487c:	96808000 	mfs	r20, rpc
20044880:	b000dffb 	imm	-8197
20044884:	3294d0e0 	addik	r20, r20, -12064
20044888:	f8b30010 	swi	r5, r19, 16
2004488c:	f8d30014 	swi	r6, r19, 20
20044890:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20044894:	e8730010 	lwi	r3, r19, 16
20044898:	e8830004 	lwi	r4, r3, 4
2004489c:	e8730010 	lwi	r3, r19, 16
200448a0:	e8630010 	lwi	r3, r3, 16
200448a4:	e8a30000 	lwi	r5, r3, 0
200448a8:	e8730010 	lwi	r3, r19, 16
200448ac:	e8630000 	lwi	r3, r3, 0
200448b0:	3063ffff 	addik	r3, r3, -1
200448b4:	84651800 	and	r3, r5, r3
200448b8:	64630403 	bslli	r3, r3, 3
200448bc:	10641800 	addk	r3, r4, r3
200448c0:	e8930014 	lwi	r4, r19, 20
200448c4:	e8b30018 	lwi	r5, r19, 24
200448c8:	f8830000 	swi	r4, r3, 0
200448cc:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
200448d0:	e8730010 	lwi	r3, r19, 16
200448d4:	e8630010 	lwi	r3, r3, 16
200448d8:	e8830000 	lwi	r4, r3, 0
200448dc:	30840001 	addik	r4, r4, 1
200448e0:	f8830000 	swi	r4, r3, 0
}
200448e4:	10330000 	addk	r1, r19, r0
200448e8:	ea610004 	lwi	r19, r1, 4
200448ec:	ea810008 	lwi	r20, r1, 8
200448f0:	3021000c 	addik	r1, r1, 12
200448f4:	b60f0008 	rtsd	r15, 8
200448f8:	80000000 	or	r0, r0, r0

200448fc <fifo_u8_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200448fc:	3021fff4 	addik	r1, r1, -12
20044900:	fa610004 	swi	r19, r1, 4
20044904:	fa810008 	swi	r20, r1, 8
20044908:	12610000 	addk	r19, r1, r0
2004490c:	96808000 	mfs	r20, rpc
20044910:	b000dffb 	imm	-8197
20044914:	3294d050 	addik	r20, r20, -12208
20044918:	f8b30010 	swi	r5, r19, 16
2004491c:	f8d30014 	swi	r6, r19, 20
20044920:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20044924:	e8730010 	lwi	r3, r19, 16
20044928:	e8630010 	lwi	r3, r3, 16
2004492c:	e8830000 	lwi	r4, r3, 0
20044930:	e8730010 	lwi	r3, r19, 16
20044934:	e8a3000c 	lwi	r5, r3, 12
20044938:	e8730014 	lwi	r3, r19, 20
2004493c:	64630402 	bslli	r3, r3, 2
20044940:	10651800 	addk	r3, r5, r3
20044944:	e8630000 	lwi	r3, r3, 0
20044948:	14a32000 	rsubk	r5, r3, r4
2004494c:	30600001 	addik	r3, r0, 1
20044950:	e8930018 	lwi	r4, r19, 24
20044954:	16442803 	cmpu	r18, r4, r5
20044958:	bcb20008 	bgei	r18, 8		// 20044960
2004495c:	10600000 	addk	r3, r0, r0
20044960:	a46300ff 	andi	r3, r3, 255
}
20044964:	10330000 	addk	r1, r19, r0
20044968:	ea610004 	lwi	r19, r1, 4
2004496c:	ea810008 	lwi	r20, r1, 8
20044970:	3021000c 	addik	r1, r1, 12
20044974:	b60f0008 	rtsd	r15, 8
20044978:	80000000 	or	r0, r0, r0

2004497c <fifo_u8_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2004497c:	3021fff4 	addik	r1, r1, -12
20044980:	fa610004 	swi	r19, r1, 4
20044984:	fa810008 	swi	r20, r1, 8
20044988:	12610000 	addk	r19, r1, r0
2004498c:	96808000 	mfs	r20, rpc
20044990:	b000dffb 	imm	-8197
20044994:	3294cfd0 	addik	r20, r20, -12336
20044998:	f8b30010 	swi	r5, r19, 16
2004499c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200449a0:	e8730010 	lwi	r3, r19, 16
200449a4:	e8630010 	lwi	r3, r3, 16
200449a8:	e8830000 	lwi	r4, r3, 0
200449ac:	e8730010 	lwi	r3, r19, 16
200449b0:	e8a3000c 	lwi	r5, r3, 12
200449b4:	e8730014 	lwi	r3, r19, 20
200449b8:	64630402 	bslli	r3, r3, 2
200449bc:	10651800 	addk	r3, r5, r3
200449c0:	e8630000 	lwi	r3, r3, 0
200449c4:	14632000 	rsubk	r3, r3, r4
}
200449c8:	10330000 	addk	r1, r19, r0
200449cc:	ea610004 	lwi	r19, r1, 4
200449d0:	ea810008 	lwi	r20, r1, 8
200449d4:	3021000c 	addik	r1, r1, 12
200449d8:	b60f0008 	rtsd	r15, 8
200449dc:	80000000 	or	r0, r0, r0

200449e0 <fifo_u8_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200449e0:	3021fff0 	addik	r1, r1, -16
200449e4:	fa610008 	swi	r19, r1, 8
200449e8:	fa81000c 	swi	r20, r1, 12
200449ec:	12610000 	addk	r19, r1, r0
200449f0:	96808000 	mfs	r20, rpc
200449f4:	b000dffb 	imm	-8197
200449f8:	3294cf6c 	addik	r20, r20, -12436
200449fc:	f8b30014 	swi	r5, r19, 20
20044a00:	f8d30018 	swi	r6, r19, 24
20044a04:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20044a08:	f8130004 	swi	r0, r19, 4
20044a0c:	b800005c 	bri	92		// 20044a68
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20044a10:	e8730014 	lwi	r3, r19, 20
20044a14:	e8830000 	lwi	r4, r3, 0
20044a18:	e8730014 	lwi	r3, r19, 20
20044a1c:	e8a3000c 	lwi	r5, r3, 12
20044a20:	e8730004 	lwi	r3, r19, 4
20044a24:	64630402 	bslli	r3, r3, 2
20044a28:	10651800 	addk	r3, r5, r3
20044a2c:	e8a30000 	lwi	r5, r3, 0
20044a30:	e8730014 	lwi	r3, r19, 20
20044a34:	e8630010 	lwi	r3, r3, 16
20044a38:	e8630000 	lwi	r3, r3, 0
20044a3c:	14632800 	rsubk	r3, r3, r5
20044a40:	10641800 	addk	r3, r4, r3
20044a44:	30830001 	addik	r4, r3, 1
20044a48:	e873001c 	lwi	r3, r19, 28
20044a4c:	16441803 	cmpu	r18, r4, r3
20044a50:	bc52000c 	blti	r18, 12		// 20044a5c
            return 0;
20044a54:	10600000 	addk	r3, r0, r0
20044a58:	b8000024 	bri	36		// 20044a7c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20044a5c:	e8730004 	lwi	r3, r19, 4
20044a60:	30630001 	addik	r3, r3, 1
20044a64:	f8730004 	swi	r3, r19, 4
20044a68:	e8930004 	lwi	r4, r19, 4
20044a6c:	e8730018 	lwi	r3, r19, 24
20044a70:	16432003 	cmpu	r18, r3, r4
20044a74:	bc52ff9c 	blti	r18, -100		// 20044a10
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20044a78:	30600001 	addik	r3, r0, 1
}
20044a7c:	10330000 	addk	r1, r19, r0
20044a80:	ea610008 	lwi	r19, r1, 8
20044a84:	ea81000c 	lwi	r20, r1, 12
20044a88:	30210010 	addik	r1, r1, 16
20044a8c:	b60f0008 	rtsd	r15, 8
20044a90:	80000000 	or	r0, r0, r0

20044a94 <fifo_u8_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20044a94:	3021ffe8 	addik	r1, r1, -24
20044a98:	fa610010 	swi	r19, r1, 16
20044a9c:	fa810014 	swi	r20, r1, 20
20044aa0:	12610000 	addk	r19, r1, r0
20044aa4:	96808000 	mfs	r20, rpc
20044aa8:	b000dffb 	imm	-8197
20044aac:	3294ceb8 	addik	r20, r20, -12616
20044ab0:	f8b3001c 	swi	r5, r19, 28
20044ab4:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20044ab8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20044abc:	f8130004 	swi	r0, r19, 4
20044ac0:	b8000054 	bri	84		// 20044b14
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20044ac4:	e873001c 	lwi	r3, r19, 28
20044ac8:	e8630010 	lwi	r3, r3, 16
20044acc:	e8830000 	lwi	r4, r3, 0
20044ad0:	e873001c 	lwi	r3, r19, 28
20044ad4:	e8a3000c 	lwi	r5, r3, 12
20044ad8:	e8730004 	lwi	r3, r19, 4
20044adc:	64630402 	bslli	r3, r3, 2
20044ae0:	10651800 	addk	r3, r5, r3
20044ae4:	e8630000 	lwi	r3, r3, 0
20044ae8:	14632000 	rsubk	r3, r3, r4
20044aec:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20044af0:	e8930008 	lwi	r4, r19, 8
20044af4:	e873000c 	lwi	r3, r19, 12
20044af8:	16441803 	cmpu	r18, r4, r3
20044afc:	bcb20008 	bgei	r18, 8		// 20044b04
20044b00:	10640000 	addk	r3, r4, r0
20044b04:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20044b08:	e8730004 	lwi	r3, r19, 4
20044b0c:	30630001 	addik	r3, r3, 1
20044b10:	f8730004 	swi	r3, r19, 4
20044b14:	e8930004 	lwi	r4, r19, 4
20044b18:	e8730020 	lwi	r3, r19, 32
20044b1c:	16432003 	cmpu	r18, r3, r4
20044b20:	bc52ffa4 	blti	r18, -92		// 20044ac4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20044b24:	e873001c 	lwi	r3, r19, 28
20044b28:	e8830000 	lwi	r4, r3, 0
20044b2c:	e8730008 	lwi	r3, r19, 8
20044b30:	14632000 	rsubk	r3, r3, r4
}
20044b34:	10330000 	addk	r1, r19, r0
20044b38:	ea610010 	lwi	r19, r1, 16
20044b3c:	ea810014 	lwi	r20, r1, 20
20044b40:	30210018 	addik	r1, r1, 24
20044b44:	b60f0008 	rtsd	r15, 8
20044b48:	80000000 	or	r0, r0, r0

20044b4c <fifo_u8_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20044b4c:	3021fff0 	addik	r1, r1, -16
20044b50:	fa610008 	swi	r19, r1, 8
20044b54:	fa81000c 	swi	r20, r1, 12
20044b58:	12610000 	addk	r19, r1, r0
20044b5c:	96808000 	mfs	r20, rpc
20044b60:	b000dffb 	imm	-8197
20044b64:	3294ce00 	addik	r20, r20, -12800
20044b68:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20044b6c:	e8730014 	lwi	r3, r19, 20
20044b70:	e8630010 	lwi	r3, r3, 16
20044b74:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20044b78:	f8130004 	swi	r0, r19, 4
20044b7c:	b8000028 	bri	40		// 20044ba4
        fifo->read_inds[i] = 0;
20044b80:	e8730014 	lwi	r3, r19, 20
20044b84:	e883000c 	lwi	r4, r3, 12
20044b88:	e8730004 	lwi	r3, r19, 4
20044b8c:	64630402 	bslli	r3, r3, 2
20044b90:	10641800 	addk	r3, r4, r3
20044b94:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20044b98:	e8730004 	lwi	r3, r19, 4
20044b9c:	30630001 	addik	r3, r3, 1
20044ba0:	f8730004 	swi	r3, r19, 4
20044ba4:	e8730014 	lwi	r3, r19, 20
20044ba8:	e8830008 	lwi	r4, r3, 8
20044bac:	e8730004 	lwi	r3, r19, 4
20044bb0:	16441803 	cmpu	r18, r4, r3
20044bb4:	bc52ffcc 	blti	r18, -52		// 20044b80
        fifo->read_inds[i] = 0;
    }
}
20044bb8:	10330000 	addk	r1, r19, r0
20044bbc:	ea610008 	lwi	r19, r1, 8
20044bc0:	ea81000c 	lwi	r20, r1, 12
20044bc4:	30210010 	addik	r1, r1, 16
20044bc8:	b60f0008 	rtsd	r15, 8
20044bcc:	80000000 	or	r0, r0, r0

20044bd0 <fifo_u8_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20044bd0:	3021fff0 	addik	r1, r1, -16
20044bd4:	fa610008 	swi	r19, r1, 8
20044bd8:	fa81000c 	swi	r20, r1, 12
20044bdc:	12610000 	addk	r19, r1, r0
20044be0:	96808000 	mfs	r20, rpc
20044be4:	b000dffb 	imm	-8197
20044be8:	3294cd7c 	addik	r20, r20, -12932
20044bec:	f8b30014 	swi	r5, r19, 20
20044bf0:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20044bf4:	e8730014 	lwi	r3, r19, 20
20044bf8:	e8830004 	lwi	r4, r3, 4
20044bfc:	e8730014 	lwi	r3, r19, 20
20044c00:	e8a3000c 	lwi	r5, r3, 12
20044c04:	e8730018 	lwi	r3, r19, 24
20044c08:	64630402 	bslli	r3, r3, 2
20044c0c:	10651800 	addk	r3, r5, r3
20044c10:	e8a30000 	lwi	r5, r3, 0
20044c14:	e8730014 	lwi	r3, r19, 20
20044c18:	e8630000 	lwi	r3, r3, 0
20044c1c:	3063ffff 	addik	r3, r3, -1
20044c20:	84651800 	and	r3, r5, r3
20044c24:	10641800 	addk	r3, r4, r3
20044c28:	e0630000 	lbui	r3, r3, 0
20044c2c:	f0730004 	sbi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20044c30:	e8730014 	lwi	r3, r19, 20
20044c34:	e883000c 	lwi	r4, r3, 12
20044c38:	e8730018 	lwi	r3, r19, 24
20044c3c:	64630402 	bslli	r3, r3, 2
20044c40:	10641800 	addk	r3, r4, r3
20044c44:	e8830000 	lwi	r4, r3, 0
20044c48:	30840001 	addik	r4, r4, 1
20044c4c:	f8830000 	swi	r4, r3, 0
    return value;
20044c50:	e0730004 	lbui	r3, r19, 4
}
20044c54:	10330000 	addk	r1, r19, r0
20044c58:	ea610008 	lwi	r19, r1, 8
20044c5c:	ea81000c 	lwi	r20, r1, 12
20044c60:	30210010 	addik	r1, r1, 16
20044c64:	b60f0008 	rtsd	r15, 8
20044c68:	80000000 	or	r0, r0, r0

20044c6c <fifo_u8_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20044c6c:	3021fff4 	addik	r1, r1, -12
20044c70:	fa610004 	swi	r19, r1, 4
20044c74:	fa810008 	swi	r20, r1, 8
20044c78:	12610000 	addk	r19, r1, r0
20044c7c:	96808000 	mfs	r20, rpc
20044c80:	b000dffb 	imm	-8197
20044c84:	3294cce0 	addik	r20, r20, -13088
20044c88:	f8b30010 	swi	r5, r19, 16
20044c8c:	10660000 	addk	r3, r6, r0
20044c90:	f0730014 	sbi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20044c94:	e8730010 	lwi	r3, r19, 16
20044c98:	e8830004 	lwi	r4, r3, 4
20044c9c:	e8730010 	lwi	r3, r19, 16
20044ca0:	e8630010 	lwi	r3, r3, 16
20044ca4:	e8a30000 	lwi	r5, r3, 0
20044ca8:	e8730010 	lwi	r3, r19, 16
20044cac:	e8630000 	lwi	r3, r3, 0
20044cb0:	3063ffff 	addik	r3, r3, -1
20044cb4:	84651800 	and	r3, r5, r3
20044cb8:	10641800 	addk	r3, r4, r3
20044cbc:	e0930014 	lbui	r4, r19, 20
20044cc0:	f0830000 	sbi	r4, r3, 0
    (*fifo->write_ind)++;
20044cc4:	e8730010 	lwi	r3, r19, 16
20044cc8:	e8630010 	lwi	r3, r3, 16
20044ccc:	e8830000 	lwi	r4, r3, 0
20044cd0:	30840001 	addik	r4, r4, 1
20044cd4:	f8830000 	swi	r4, r3, 0
}
20044cd8:	10330000 	addk	r1, r19, r0
20044cdc:	ea610004 	lwi	r19, r1, 4
20044ce0:	ea810008 	lwi	r20, r1, 8
20044ce4:	3021000c 	addik	r1, r1, 12
20044ce8:	b60f0008 	rtsd	r15, 8
20044cec:	80000000 	or	r0, r0, r0

20044cf0 <fifo_u16_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
20044cf0:	3021fff4 	addik	r1, r1, -12
20044cf4:	fa610004 	swi	r19, r1, 4
20044cf8:	fa810008 	swi	r20, r1, 8
20044cfc:	12610000 	addk	r19, r1, r0
20044d00:	96808000 	mfs	r20, rpc
20044d04:	b000dffb 	imm	-8197
20044d08:	3294cc5c 	addik	r20, r20, -13220
20044d0c:	f8b30010 	swi	r5, r19, 16
20044d10:	f8d30014 	swi	r6, r19, 20
20044d14:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20044d18:	e8730010 	lwi	r3, r19, 16
20044d1c:	e8630010 	lwi	r3, r3, 16
20044d20:	e8830000 	lwi	r4, r3, 0
20044d24:	e8730010 	lwi	r3, r19, 16
20044d28:	e8a3000c 	lwi	r5, r3, 12
20044d2c:	e8730014 	lwi	r3, r19, 20
20044d30:	64630402 	bslli	r3, r3, 2
20044d34:	10651800 	addk	r3, r5, r3
20044d38:	e8630000 	lwi	r3, r3, 0
20044d3c:	14a32000 	rsubk	r5, r3, r4
20044d40:	30600001 	addik	r3, r0, 1
20044d44:	e8930018 	lwi	r4, r19, 24
20044d48:	16442803 	cmpu	r18, r4, r5
20044d4c:	bcb20008 	bgei	r18, 8		// 20044d54
20044d50:	10600000 	addk	r3, r0, r0
20044d54:	a46300ff 	andi	r3, r3, 255
}
20044d58:	10330000 	addk	r1, r19, r0
20044d5c:	ea610004 	lwi	r19, r1, 4
20044d60:	ea810008 	lwi	r20, r1, 8
20044d64:	3021000c 	addik	r1, r1, 12
20044d68:	b60f0008 	rtsd	r15, 8
20044d6c:	80000000 	or	r0, r0, r0

20044d70 <fifo_u16_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20044d70:	3021fff4 	addik	r1, r1, -12
20044d74:	fa610004 	swi	r19, r1, 4
20044d78:	fa810008 	swi	r20, r1, 8
20044d7c:	12610000 	addk	r19, r1, r0
20044d80:	96808000 	mfs	r20, rpc
20044d84:	b000dffb 	imm	-8197
20044d88:	3294cbdc 	addik	r20, r20, -13348
20044d8c:	f8b30010 	swi	r5, r19, 16
20044d90:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20044d94:	e8730010 	lwi	r3, r19, 16
20044d98:	e8630010 	lwi	r3, r3, 16
20044d9c:	e8830000 	lwi	r4, r3, 0
20044da0:	e8730010 	lwi	r3, r19, 16
20044da4:	e8a3000c 	lwi	r5, r3, 12
20044da8:	e8730014 	lwi	r3, r19, 20
20044dac:	64630402 	bslli	r3, r3, 2
20044db0:	10651800 	addk	r3, r5, r3
20044db4:	e8630000 	lwi	r3, r3, 0
20044db8:	14632000 	rsubk	r3, r3, r4
}
20044dbc:	10330000 	addk	r1, r19, r0
20044dc0:	ea610004 	lwi	r19, r1, 4
20044dc4:	ea810008 	lwi	r20, r1, 8
20044dc8:	3021000c 	addik	r1, r1, 12
20044dcc:	b60f0008 	rtsd	r15, 8
20044dd0:	80000000 	or	r0, r0, r0

20044dd4 <fifo_u16_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
20044dd4:	3021fff0 	addik	r1, r1, -16
20044dd8:	fa610008 	swi	r19, r1, 8
20044ddc:	fa81000c 	swi	r20, r1, 12
20044de0:	12610000 	addk	r19, r1, r0
20044de4:	96808000 	mfs	r20, rpc
20044de8:	b000dffb 	imm	-8197
20044dec:	3294cb78 	addik	r20, r20, -13448
20044df0:	f8b30014 	swi	r5, r19, 20
20044df4:	f8d30018 	swi	r6, r19, 24
20044df8:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20044dfc:	f8130004 	swi	r0, r19, 4
20044e00:	b800005c 	bri	92		// 20044e5c
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20044e04:	e8730014 	lwi	r3, r19, 20
20044e08:	e8830000 	lwi	r4, r3, 0
20044e0c:	e8730014 	lwi	r3, r19, 20
20044e10:	e8a3000c 	lwi	r5, r3, 12
20044e14:	e8730004 	lwi	r3, r19, 4
20044e18:	64630402 	bslli	r3, r3, 2
20044e1c:	10651800 	addk	r3, r5, r3
20044e20:	e8a30000 	lwi	r5, r3, 0
20044e24:	e8730014 	lwi	r3, r19, 20
20044e28:	e8630010 	lwi	r3, r3, 16
20044e2c:	e8630000 	lwi	r3, r3, 0
20044e30:	14632800 	rsubk	r3, r3, r5
20044e34:	10641800 	addk	r3, r4, r3
20044e38:	30830001 	addik	r4, r3, 1
20044e3c:	e873001c 	lwi	r3, r19, 28
20044e40:	16441803 	cmpu	r18, r4, r3
20044e44:	bc52000c 	blti	r18, 12		// 20044e50
            return 0;
20044e48:	10600000 	addk	r3, r0, r0
20044e4c:	b8000024 	bri	36		// 20044e70
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20044e50:	e8730004 	lwi	r3, r19, 4
20044e54:	30630001 	addik	r3, r3, 1
20044e58:	f8730004 	swi	r3, r19, 4
20044e5c:	e8930004 	lwi	r4, r19, 4
20044e60:	e8730018 	lwi	r3, r19, 24
20044e64:	16432003 	cmpu	r18, r3, r4
20044e68:	bc52ff9c 	blti	r18, -100		// 20044e04
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20044e6c:	30600001 	addik	r3, r0, 1
}
20044e70:	10330000 	addk	r1, r19, r0
20044e74:	ea610008 	lwi	r19, r1, 8
20044e78:	ea81000c 	lwi	r20, r1, 12
20044e7c:	30210010 	addik	r1, r1, 16
20044e80:	b60f0008 	rtsd	r15, 8
20044e84:	80000000 	or	r0, r0, r0

20044e88 <fifo_u16_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20044e88:	3021ffe8 	addik	r1, r1, -24
20044e8c:	fa610010 	swi	r19, r1, 16
20044e90:	fa810014 	swi	r20, r1, 20
20044e94:	12610000 	addk	r19, r1, r0
20044e98:	96808000 	mfs	r20, rpc
20044e9c:	b000dffb 	imm	-8197
20044ea0:	3294cac4 	addik	r20, r20, -13628
20044ea4:	f8b3001c 	swi	r5, r19, 28
20044ea8:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20044eac:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20044eb0:	f8130004 	swi	r0, r19, 4
20044eb4:	b8000054 	bri	84		// 20044f08
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20044eb8:	e873001c 	lwi	r3, r19, 28
20044ebc:	e8630010 	lwi	r3, r3, 16
20044ec0:	e8830000 	lwi	r4, r3, 0
20044ec4:	e873001c 	lwi	r3, r19, 28
20044ec8:	e8a3000c 	lwi	r5, r3, 12
20044ecc:	e8730004 	lwi	r3, r19, 4
20044ed0:	64630402 	bslli	r3, r3, 2
20044ed4:	10651800 	addk	r3, r5, r3
20044ed8:	e8630000 	lwi	r3, r3, 0
20044edc:	14632000 	rsubk	r3, r3, r4
20044ee0:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20044ee4:	e8930008 	lwi	r4, r19, 8
20044ee8:	e873000c 	lwi	r3, r19, 12
20044eec:	16441803 	cmpu	r18, r4, r3
20044ef0:	bcb20008 	bgei	r18, 8		// 20044ef8
20044ef4:	10640000 	addk	r3, r4, r0
20044ef8:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20044efc:	e8730004 	lwi	r3, r19, 4
20044f00:	30630001 	addik	r3, r3, 1
20044f04:	f8730004 	swi	r3, r19, 4
20044f08:	e8930004 	lwi	r4, r19, 4
20044f0c:	e8730020 	lwi	r3, r19, 32
20044f10:	16432003 	cmpu	r18, r3, r4
20044f14:	bc52ffa4 	blti	r18, -92		// 20044eb8
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20044f18:	e873001c 	lwi	r3, r19, 28
20044f1c:	e8830000 	lwi	r4, r3, 0
20044f20:	e8730008 	lwi	r3, r19, 8
20044f24:	14632000 	rsubk	r3, r3, r4
}
20044f28:	10330000 	addk	r1, r19, r0
20044f2c:	ea610010 	lwi	r19, r1, 16
20044f30:	ea810014 	lwi	r20, r1, 20
20044f34:	30210018 	addik	r1, r1, 24
20044f38:	b60f0008 	rtsd	r15, 8
20044f3c:	80000000 	or	r0, r0, r0

20044f40 <fifo_u16_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20044f40:	3021fff0 	addik	r1, r1, -16
20044f44:	fa610008 	swi	r19, r1, 8
20044f48:	fa81000c 	swi	r20, r1, 12
20044f4c:	12610000 	addk	r19, r1, r0
20044f50:	96808000 	mfs	r20, rpc
20044f54:	b000dffb 	imm	-8197
20044f58:	3294ca0c 	addik	r20, r20, -13812
20044f5c:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20044f60:	e8730014 	lwi	r3, r19, 20
20044f64:	e8630010 	lwi	r3, r3, 16
20044f68:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20044f6c:	f8130004 	swi	r0, r19, 4
20044f70:	b8000028 	bri	40		// 20044f98
        fifo->read_inds[i] = 0;
20044f74:	e8730014 	lwi	r3, r19, 20
20044f78:	e883000c 	lwi	r4, r3, 12
20044f7c:	e8730004 	lwi	r3, r19, 4
20044f80:	64630402 	bslli	r3, r3, 2
20044f84:	10641800 	addk	r3, r4, r3
20044f88:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20044f8c:	e8730004 	lwi	r3, r19, 4
20044f90:	30630001 	addik	r3, r3, 1
20044f94:	f8730004 	swi	r3, r19, 4
20044f98:	e8730014 	lwi	r3, r19, 20
20044f9c:	e8830008 	lwi	r4, r3, 8
20044fa0:	e8730004 	lwi	r3, r19, 4
20044fa4:	16441803 	cmpu	r18, r4, r3
20044fa8:	bc52ffcc 	blti	r18, -52		// 20044f74
        fifo->read_inds[i] = 0;
    }
}
20044fac:	10330000 	addk	r1, r19, r0
20044fb0:	ea610008 	lwi	r19, r1, 8
20044fb4:	ea81000c 	lwi	r20, r1, 12
20044fb8:	30210010 	addik	r1, r1, 16
20044fbc:	b60f0008 	rtsd	r15, 8
20044fc0:	80000000 	or	r0, r0, r0

20044fc4 <fifo_u16_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20044fc4:	3021fff0 	addik	r1, r1, -16
20044fc8:	fa610008 	swi	r19, r1, 8
20044fcc:	fa81000c 	swi	r20, r1, 12
20044fd0:	12610000 	addk	r19, r1, r0
20044fd4:	96808000 	mfs	r20, rpc
20044fd8:	b000dffb 	imm	-8197
20044fdc:	3294c988 	addik	r20, r20, -13944
20044fe0:	f8b30014 	swi	r5, r19, 20
20044fe4:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20044fe8:	e8730014 	lwi	r3, r19, 20
20044fec:	e8830004 	lwi	r4, r3, 4
20044ff0:	e8730014 	lwi	r3, r19, 20
20044ff4:	e8a3000c 	lwi	r5, r3, 12
20044ff8:	e8730018 	lwi	r3, r19, 24
20044ffc:	64630402 	bslli	r3, r3, 2
20045000:	10651800 	addk	r3, r5, r3
20045004:	e8a30000 	lwi	r5, r3, 0
20045008:	e8730014 	lwi	r3, r19, 20
2004500c:	e8630000 	lwi	r3, r3, 0
20045010:	3063ffff 	addik	r3, r3, -1
20045014:	84651800 	and	r3, r5, r3
20045018:	10631800 	addk	r3, r3, r3
2004501c:	10641800 	addk	r3, r4, r3
20045020:	e4630000 	lhui	r3, r3, 0
20045024:	f4730004 	shi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20045028:	e8730014 	lwi	r3, r19, 20
2004502c:	e883000c 	lwi	r4, r3, 12
20045030:	e8730018 	lwi	r3, r19, 24
20045034:	64630402 	bslli	r3, r3, 2
20045038:	10641800 	addk	r3, r4, r3
2004503c:	e8830000 	lwi	r4, r3, 0
20045040:	30840001 	addik	r4, r4, 1
20045044:	f8830000 	swi	r4, r3, 0
    return value;
20045048:	e4730004 	lhui	r3, r19, 4
}
2004504c:	10330000 	addk	r1, r19, r0
20045050:	ea610008 	lwi	r19, r1, 8
20045054:	ea81000c 	lwi	r20, r1, 12
20045058:	30210010 	addik	r1, r1, 16
2004505c:	b60f0008 	rtsd	r15, 8
20045060:	80000000 	or	r0, r0, r0

20045064 <fifo_u16_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20045064:	3021fff4 	addik	r1, r1, -12
20045068:	fa610004 	swi	r19, r1, 4
2004506c:	fa810008 	swi	r20, r1, 8
20045070:	12610000 	addk	r19, r1, r0
20045074:	96808000 	mfs	r20, rpc
20045078:	b000dffb 	imm	-8197
2004507c:	3294c8e8 	addik	r20, r20, -14104
20045080:	f8b30010 	swi	r5, r19, 16
20045084:	10660000 	addk	r3, r6, r0
20045088:	f4730014 	shi	r3, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
2004508c:	e8730010 	lwi	r3, r19, 16
20045090:	e8830004 	lwi	r4, r3, 4
20045094:	e8730010 	lwi	r3, r19, 16
20045098:	e8630010 	lwi	r3, r3, 16
2004509c:	e8a30000 	lwi	r5, r3, 0
200450a0:	e8730010 	lwi	r3, r19, 16
200450a4:	e8630000 	lwi	r3, r3, 0
200450a8:	3063ffff 	addik	r3, r3, -1
200450ac:	84651800 	and	r3, r5, r3
200450b0:	10631800 	addk	r3, r3, r3
200450b4:	10641800 	addk	r3, r4, r3
200450b8:	e4930014 	lhui	r4, r19, 20
200450bc:	f4830000 	shi	r4, r3, 0
    (*fifo->write_ind)++;
200450c0:	e8730010 	lwi	r3, r19, 16
200450c4:	e8630010 	lwi	r3, r3, 16
200450c8:	e8830000 	lwi	r4, r3, 0
200450cc:	30840001 	addik	r4, r4, 1
200450d0:	f8830000 	swi	r4, r3, 0
}
200450d4:	10330000 	addk	r1, r19, r0
200450d8:	ea610004 	lwi	r19, r1, 4
200450dc:	ea810008 	lwi	r20, r1, 8
200450e0:	3021000c 	addik	r1, r1, 12
200450e4:	b60f0008 	rtsd	r15, 8
200450e8:	80000000 	or	r0, r0, r0

200450ec <fifo_u32_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200450ec:	3021fff4 	addik	r1, r1, -12
200450f0:	fa610004 	swi	r19, r1, 4
200450f4:	fa810008 	swi	r20, r1, 8
200450f8:	12610000 	addk	r19, r1, r0
200450fc:	96808000 	mfs	r20, rpc
20045100:	b000dffb 	imm	-8197
20045104:	3294c860 	addik	r20, r20, -14240
20045108:	f8b30010 	swi	r5, r19, 16
2004510c:	f8d30014 	swi	r6, r19, 20
20045110:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20045114:	e8730010 	lwi	r3, r19, 16
20045118:	e8630010 	lwi	r3, r3, 16
2004511c:	e8830000 	lwi	r4, r3, 0
20045120:	e8730010 	lwi	r3, r19, 16
20045124:	e8a3000c 	lwi	r5, r3, 12
20045128:	e8730014 	lwi	r3, r19, 20
2004512c:	64630402 	bslli	r3, r3, 2
20045130:	10651800 	addk	r3, r5, r3
20045134:	e8630000 	lwi	r3, r3, 0
20045138:	14a32000 	rsubk	r5, r3, r4
2004513c:	30600001 	addik	r3, r0, 1
20045140:	e8930018 	lwi	r4, r19, 24
20045144:	16442803 	cmpu	r18, r4, r5
20045148:	bcb20008 	bgei	r18, 8		// 20045150
2004514c:	10600000 	addk	r3, r0, r0
20045150:	a46300ff 	andi	r3, r3, 255
}
20045154:	10330000 	addk	r1, r19, r0
20045158:	ea610004 	lwi	r19, r1, 4
2004515c:	ea810008 	lwi	r20, r1, 8
20045160:	3021000c 	addik	r1, r1, 12
20045164:	b60f0008 	rtsd	r15, 8
20045168:	80000000 	or	r0, r0, r0

2004516c <fifo_u32_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2004516c:	3021fff4 	addik	r1, r1, -12
20045170:	fa610004 	swi	r19, r1, 4
20045174:	fa810008 	swi	r20, r1, 8
20045178:	12610000 	addk	r19, r1, r0
2004517c:	96808000 	mfs	r20, rpc
20045180:	b000dffb 	imm	-8197
20045184:	3294c7e0 	addik	r20, r20, -14368
20045188:	f8b30010 	swi	r5, r19, 16
2004518c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20045190:	e8730010 	lwi	r3, r19, 16
20045194:	e8630010 	lwi	r3, r3, 16
20045198:	e8830000 	lwi	r4, r3, 0
2004519c:	e8730010 	lwi	r3, r19, 16
200451a0:	e8a3000c 	lwi	r5, r3, 12
200451a4:	e8730014 	lwi	r3, r19, 20
200451a8:	64630402 	bslli	r3, r3, 2
200451ac:	10651800 	addk	r3, r5, r3
200451b0:	e8630000 	lwi	r3, r3, 0
200451b4:	14632000 	rsubk	r3, r3, r4
}
200451b8:	10330000 	addk	r1, r19, r0
200451bc:	ea610004 	lwi	r19, r1, 4
200451c0:	ea810008 	lwi	r20, r1, 8
200451c4:	3021000c 	addik	r1, r1, 12
200451c8:	b60f0008 	rtsd	r15, 8
200451cc:	80000000 	or	r0, r0, r0

200451d0 <fifo_u32_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200451d0:	3021fff0 	addik	r1, r1, -16
200451d4:	fa610008 	swi	r19, r1, 8
200451d8:	fa81000c 	swi	r20, r1, 12
200451dc:	12610000 	addk	r19, r1, r0
200451e0:	96808000 	mfs	r20, rpc
200451e4:	b000dffb 	imm	-8197
200451e8:	3294c77c 	addik	r20, r20, -14468
200451ec:	f8b30014 	swi	r5, r19, 20
200451f0:	f8d30018 	swi	r6, r19, 24
200451f4:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200451f8:	f8130004 	swi	r0, r19, 4
200451fc:	b800005c 	bri	92		// 20045258
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20045200:	e8730014 	lwi	r3, r19, 20
20045204:	e8830000 	lwi	r4, r3, 0
20045208:	e8730014 	lwi	r3, r19, 20
2004520c:	e8a3000c 	lwi	r5, r3, 12
20045210:	e8730004 	lwi	r3, r19, 4
20045214:	64630402 	bslli	r3, r3, 2
20045218:	10651800 	addk	r3, r5, r3
2004521c:	e8a30000 	lwi	r5, r3, 0
20045220:	e8730014 	lwi	r3, r19, 20
20045224:	e8630010 	lwi	r3, r3, 16
20045228:	e8630000 	lwi	r3, r3, 0
2004522c:	14632800 	rsubk	r3, r3, r5
20045230:	10641800 	addk	r3, r4, r3
20045234:	30830001 	addik	r4, r3, 1
20045238:	e873001c 	lwi	r3, r19, 28
2004523c:	16441803 	cmpu	r18, r4, r3
20045240:	bc52000c 	blti	r18, 12		// 2004524c
            return 0;
20045244:	10600000 	addk	r3, r0, r0
20045248:	b8000024 	bri	36		// 2004526c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
2004524c:	e8730004 	lwi	r3, r19, 4
20045250:	30630001 	addik	r3, r3, 1
20045254:	f8730004 	swi	r3, r19, 4
20045258:	e8930004 	lwi	r4, r19, 4
2004525c:	e8730018 	lwi	r3, r19, 24
20045260:	16432003 	cmpu	r18, r3, r4
20045264:	bc52ff9c 	blti	r18, -100		// 20045200
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20045268:	30600001 	addik	r3, r0, 1
}
2004526c:	10330000 	addk	r1, r19, r0
20045270:	ea610008 	lwi	r19, r1, 8
20045274:	ea81000c 	lwi	r20, r1, 12
20045278:	30210010 	addik	r1, r1, 16
2004527c:	b60f0008 	rtsd	r15, 8
20045280:	80000000 	or	r0, r0, r0

20045284 <fifo_u32_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20045284:	3021ffe8 	addik	r1, r1, -24
20045288:	fa610010 	swi	r19, r1, 16
2004528c:	fa810014 	swi	r20, r1, 20
20045290:	12610000 	addk	r19, r1, r0
20045294:	96808000 	mfs	r20, rpc
20045298:	b000dffb 	imm	-8197
2004529c:	3294c6c8 	addik	r20, r20, -14648
200452a0:	f8b3001c 	swi	r5, r19, 28
200452a4:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
200452a8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200452ac:	f8130004 	swi	r0, r19, 4
200452b0:	b8000054 	bri	84		// 20045304
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200452b4:	e873001c 	lwi	r3, r19, 28
200452b8:	e8630010 	lwi	r3, r3, 16
200452bc:	e8830000 	lwi	r4, r3, 0
200452c0:	e873001c 	lwi	r3, r19, 28
200452c4:	e8a3000c 	lwi	r5, r3, 12
200452c8:	e8730004 	lwi	r3, r19, 4
200452cc:	64630402 	bslli	r3, r3, 2
200452d0:	10651800 	addk	r3, r5, r3
200452d4:	e8630000 	lwi	r3, r3, 0
200452d8:	14632000 	rsubk	r3, r3, r4
200452dc:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200452e0:	e8930008 	lwi	r4, r19, 8
200452e4:	e873000c 	lwi	r3, r19, 12
200452e8:	16441803 	cmpu	r18, r4, r3
200452ec:	bcb20008 	bgei	r18, 8		// 200452f4
200452f0:	10640000 	addk	r3, r4, r0
200452f4:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200452f8:	e8730004 	lwi	r3, r19, 4
200452fc:	30630001 	addik	r3, r3, 1
20045300:	f8730004 	swi	r3, r19, 4
20045304:	e8930004 	lwi	r4, r19, 4
20045308:	e8730020 	lwi	r3, r19, 32
2004530c:	16432003 	cmpu	r18, r3, r4
20045310:	bc52ffa4 	blti	r18, -92		// 200452b4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20045314:	e873001c 	lwi	r3, r19, 28
20045318:	e8830000 	lwi	r4, r3, 0
2004531c:	e8730008 	lwi	r3, r19, 8
20045320:	14632000 	rsubk	r3, r3, r4
}
20045324:	10330000 	addk	r1, r19, r0
20045328:	ea610010 	lwi	r19, r1, 16
2004532c:	ea810014 	lwi	r20, r1, 20
20045330:	30210018 	addik	r1, r1, 24
20045334:	b60f0008 	rtsd	r15, 8
20045338:	80000000 	or	r0, r0, r0

2004533c <fifo_u32_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
2004533c:	3021fff0 	addik	r1, r1, -16
20045340:	fa610008 	swi	r19, r1, 8
20045344:	fa81000c 	swi	r20, r1, 12
20045348:	12610000 	addk	r19, r1, r0
2004534c:	96808000 	mfs	r20, rpc
20045350:	b000dffb 	imm	-8197
20045354:	3294c610 	addik	r20, r20, -14832
20045358:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
2004535c:	e8730014 	lwi	r3, r19, 20
20045360:	e8630010 	lwi	r3, r3, 16
20045364:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20045368:	f8130004 	swi	r0, r19, 4
2004536c:	b8000028 	bri	40		// 20045394
        fifo->read_inds[i] = 0;
20045370:	e8730014 	lwi	r3, r19, 20
20045374:	e883000c 	lwi	r4, r3, 12
20045378:	e8730004 	lwi	r3, r19, 4
2004537c:	64630402 	bslli	r3, r3, 2
20045380:	10641800 	addk	r3, r4, r3
20045384:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20045388:	e8730004 	lwi	r3, r19, 4
2004538c:	30630001 	addik	r3, r3, 1
20045390:	f8730004 	swi	r3, r19, 4
20045394:	e8730014 	lwi	r3, r19, 20
20045398:	e8830008 	lwi	r4, r3, 8
2004539c:	e8730004 	lwi	r3, r19, 4
200453a0:	16441803 	cmpu	r18, r4, r3
200453a4:	bc52ffcc 	blti	r18, -52		// 20045370
        fifo->read_inds[i] = 0;
    }
}
200453a8:	10330000 	addk	r1, r19, r0
200453ac:	ea610008 	lwi	r19, r1, 8
200453b0:	ea81000c 	lwi	r20, r1, 12
200453b4:	30210010 	addik	r1, r1, 16
200453b8:	b60f0008 	rtsd	r15, 8
200453bc:	80000000 	or	r0, r0, r0

200453c0 <fifo_u32_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200453c0:	3021fff0 	addik	r1, r1, -16
200453c4:	fa610008 	swi	r19, r1, 8
200453c8:	fa81000c 	swi	r20, r1, 12
200453cc:	12610000 	addk	r19, r1, r0
200453d0:	96808000 	mfs	r20, rpc
200453d4:	b000dffb 	imm	-8197
200453d8:	3294c58c 	addik	r20, r20, -14964
200453dc:	f8b30014 	swi	r5, r19, 20
200453e0:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200453e4:	e8730014 	lwi	r3, r19, 20
200453e8:	e8830004 	lwi	r4, r3, 4
200453ec:	e8730014 	lwi	r3, r19, 20
200453f0:	e8a3000c 	lwi	r5, r3, 12
200453f4:	e8730018 	lwi	r3, r19, 24
200453f8:	64630402 	bslli	r3, r3, 2
200453fc:	10651800 	addk	r3, r5, r3
20045400:	e8a30000 	lwi	r5, r3, 0
20045404:	e8730014 	lwi	r3, r19, 20
20045408:	e8630000 	lwi	r3, r3, 0
2004540c:	3063ffff 	addik	r3, r3, -1
20045410:	84651800 	and	r3, r5, r3
20045414:	64630402 	bslli	r3, r3, 2
20045418:	10641800 	addk	r3, r4, r3
2004541c:	e8630000 	lwi	r3, r3, 0
20045420:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20045424:	e8730014 	lwi	r3, r19, 20
20045428:	e883000c 	lwi	r4, r3, 12
2004542c:	e8730018 	lwi	r3, r19, 24
20045430:	64630402 	bslli	r3, r3, 2
20045434:	10641800 	addk	r3, r4, r3
20045438:	e8830000 	lwi	r4, r3, 0
2004543c:	30840001 	addik	r4, r4, 1
20045440:	f8830000 	swi	r4, r3, 0
    return value;
20045444:	e8730004 	lwi	r3, r19, 4
}
20045448:	10330000 	addk	r1, r19, r0
2004544c:	ea610008 	lwi	r19, r1, 8
20045450:	ea81000c 	lwi	r20, r1, 12
20045454:	30210010 	addik	r1, r1, 16
20045458:	b60f0008 	rtsd	r15, 8
2004545c:	80000000 	or	r0, r0, r0

20045460 <fifo_u32_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20045460:	3021fff4 	addik	r1, r1, -12
20045464:	fa610004 	swi	r19, r1, 4
20045468:	fa810008 	swi	r20, r1, 8
2004546c:	12610000 	addk	r19, r1, r0
20045470:	96808000 	mfs	r20, rpc
20045474:	b000dffb 	imm	-8197
20045478:	3294c4ec 	addik	r20, r20, -15124
2004547c:	f8b30010 	swi	r5, r19, 16
20045480:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20045484:	e8730010 	lwi	r3, r19, 16
20045488:	e8830004 	lwi	r4, r3, 4
2004548c:	e8730010 	lwi	r3, r19, 16
20045490:	e8630010 	lwi	r3, r3, 16
20045494:	e8a30000 	lwi	r5, r3, 0
20045498:	e8730010 	lwi	r3, r19, 16
2004549c:	e8630000 	lwi	r3, r3, 0
200454a0:	3063ffff 	addik	r3, r3, -1
200454a4:	84651800 	and	r3, r5, r3
200454a8:	64630402 	bslli	r3, r3, 2
200454ac:	10641800 	addk	r3, r4, r3
200454b0:	e8930014 	lwi	r4, r19, 20
200454b4:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
200454b8:	e8730010 	lwi	r3, r19, 16
200454bc:	e8630010 	lwi	r3, r3, 16
200454c0:	e8830000 	lwi	r4, r3, 0
200454c4:	30840001 	addik	r4, r4, 1
200454c8:	f8830000 	swi	r4, r3, 0
}
200454cc:	10330000 	addk	r1, r19, r0
200454d0:	ea610004 	lwi	r19, r1, 4
200454d4:	ea810008 	lwi	r20, r1, 8
200454d8:	3021000c 	addik	r1, r1, 12
200454dc:	b60f0008 	rtsd	r15, 8
200454e0:	80000000 	or	r0, r0, r0

200454e4 <fifo_u64_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200454e4:	3021fff4 	addik	r1, r1, -12
200454e8:	fa610004 	swi	r19, r1, 4
200454ec:	fa810008 	swi	r20, r1, 8
200454f0:	12610000 	addk	r19, r1, r0
200454f4:	96808000 	mfs	r20, rpc
200454f8:	b000dffb 	imm	-8197
200454fc:	3294c468 	addik	r20, r20, -15256
20045500:	f8b30010 	swi	r5, r19, 16
20045504:	f8d30014 	swi	r6, r19, 20
20045508:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
2004550c:	e8730010 	lwi	r3, r19, 16
20045510:	e8630010 	lwi	r3, r3, 16
20045514:	e8830000 	lwi	r4, r3, 0
20045518:	e8730010 	lwi	r3, r19, 16
2004551c:	e8a3000c 	lwi	r5, r3, 12
20045520:	e8730014 	lwi	r3, r19, 20
20045524:	64630402 	bslli	r3, r3, 2
20045528:	10651800 	addk	r3, r5, r3
2004552c:	e8630000 	lwi	r3, r3, 0
20045530:	14a32000 	rsubk	r5, r3, r4
20045534:	30600001 	addik	r3, r0, 1
20045538:	e8930018 	lwi	r4, r19, 24
2004553c:	16442803 	cmpu	r18, r4, r5
20045540:	bcb20008 	bgei	r18, 8		// 20045548
20045544:	10600000 	addk	r3, r0, r0
20045548:	a46300ff 	andi	r3, r3, 255
}
2004554c:	10330000 	addk	r1, r19, r0
20045550:	ea610004 	lwi	r19, r1, 4
20045554:	ea810008 	lwi	r20, r1, 8
20045558:	3021000c 	addik	r1, r1, 12
2004555c:	b60f0008 	rtsd	r15, 8
20045560:	80000000 	or	r0, r0, r0

20045564 <fifo_u64_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20045564:	3021fff4 	addik	r1, r1, -12
20045568:	fa610004 	swi	r19, r1, 4
2004556c:	fa810008 	swi	r20, r1, 8
20045570:	12610000 	addk	r19, r1, r0
20045574:	96808000 	mfs	r20, rpc
20045578:	b000dffb 	imm	-8197
2004557c:	3294c3e8 	addik	r20, r20, -15384
20045580:	f8b30010 	swi	r5, r19, 16
20045584:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
20045588:	e8730010 	lwi	r3, r19, 16
2004558c:	e8630010 	lwi	r3, r3, 16
20045590:	e8830000 	lwi	r4, r3, 0
20045594:	e8730010 	lwi	r3, r19, 16
20045598:	e8a3000c 	lwi	r5, r3, 12
2004559c:	e8730014 	lwi	r3, r19, 20
200455a0:	64630402 	bslli	r3, r3, 2
200455a4:	10651800 	addk	r3, r5, r3
200455a8:	e8630000 	lwi	r3, r3, 0
200455ac:	14632000 	rsubk	r3, r3, r4
}
200455b0:	10330000 	addk	r1, r19, r0
200455b4:	ea610004 	lwi	r19, r1, 4
200455b8:	ea810008 	lwi	r20, r1, 8
200455bc:	3021000c 	addik	r1, r1, 12
200455c0:	b60f0008 	rtsd	r15, 8
200455c4:	80000000 	or	r0, r0, r0

200455c8 <fifo_u64_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200455c8:	3021fff0 	addik	r1, r1, -16
200455cc:	fa610008 	swi	r19, r1, 8
200455d0:	fa81000c 	swi	r20, r1, 12
200455d4:	12610000 	addk	r19, r1, r0
200455d8:	96808000 	mfs	r20, rpc
200455dc:	b000dffb 	imm	-8197
200455e0:	3294c384 	addik	r20, r20, -15484
200455e4:	f8b30014 	swi	r5, r19, 20
200455e8:	f8d30018 	swi	r6, r19, 24
200455ec:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
200455f0:	f8130004 	swi	r0, r19, 4
200455f4:	b800005c 	bri	92		// 20045650
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
200455f8:	e8730014 	lwi	r3, r19, 20
200455fc:	e8830000 	lwi	r4, r3, 0
20045600:	e8730014 	lwi	r3, r19, 20
20045604:	e8a3000c 	lwi	r5, r3, 12
20045608:	e8730004 	lwi	r3, r19, 4
2004560c:	64630402 	bslli	r3, r3, 2
20045610:	10651800 	addk	r3, r5, r3
20045614:	e8a30000 	lwi	r5, r3, 0
20045618:	e8730014 	lwi	r3, r19, 20
2004561c:	e8630010 	lwi	r3, r3, 16
20045620:	e8630000 	lwi	r3, r3, 0
20045624:	14632800 	rsubk	r3, r3, r5
20045628:	10641800 	addk	r3, r4, r3
2004562c:	30830001 	addik	r4, r3, 1
20045630:	e873001c 	lwi	r3, r19, 28
20045634:	16441803 	cmpu	r18, r4, r3
20045638:	bc52000c 	blti	r18, 12		// 20045644
            return 0;
2004563c:	10600000 	addk	r3, r0, r0
20045640:	b8000024 	bri	36		// 20045664
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20045644:	e8730004 	lwi	r3, r19, 4
20045648:	30630001 	addik	r3, r3, 1
2004564c:	f8730004 	swi	r3, r19, 4
20045650:	e8930004 	lwi	r4, r19, 4
20045654:	e8730018 	lwi	r3, r19, 24
20045658:	16432003 	cmpu	r18, r3, r4
2004565c:	bc52ff9c 	blti	r18, -100		// 200455f8
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20045660:	30600001 	addik	r3, r0, 1
}
20045664:	10330000 	addk	r1, r19, r0
20045668:	ea610008 	lwi	r19, r1, 8
2004566c:	ea81000c 	lwi	r20, r1, 12
20045670:	30210010 	addik	r1, r1, 16
20045674:	b60f0008 	rtsd	r15, 8
20045678:	80000000 	or	r0, r0, r0

2004567c <fifo_u64_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
2004567c:	3021ffe8 	addik	r1, r1, -24
20045680:	fa610010 	swi	r19, r1, 16
20045684:	fa810014 	swi	r20, r1, 20
20045688:	12610000 	addk	r19, r1, r0
2004568c:	96808000 	mfs	r20, rpc
20045690:	b000dffb 	imm	-8197
20045694:	3294c2d0 	addik	r20, r20, -15664
20045698:	f8b3001c 	swi	r5, r19, 28
2004569c:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
200456a0:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
200456a4:	f8130004 	swi	r0, r19, 4
200456a8:	b8000054 	bri	84		// 200456fc
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
200456ac:	e873001c 	lwi	r3, r19, 28
200456b0:	e8630010 	lwi	r3, r3, 16
200456b4:	e8830000 	lwi	r4, r3, 0
200456b8:	e873001c 	lwi	r3, r19, 28
200456bc:	e8a3000c 	lwi	r5, r3, 12
200456c0:	e8730004 	lwi	r3, r19, 4
200456c4:	64630402 	bslli	r3, r3, 2
200456c8:	10651800 	addk	r3, r5, r3
200456cc:	e8630000 	lwi	r3, r3, 0
200456d0:	14632000 	rsubk	r3, r3, r4
200456d4:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
200456d8:	e8930008 	lwi	r4, r19, 8
200456dc:	e873000c 	lwi	r3, r19, 12
200456e0:	16441803 	cmpu	r18, r4, r3
200456e4:	bcb20008 	bgei	r18, 8		// 200456ec
200456e8:	10640000 	addk	r3, r4, r0
200456ec:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
200456f0:	e8730004 	lwi	r3, r19, 4
200456f4:	30630001 	addik	r3, r3, 1
200456f8:	f8730004 	swi	r3, r19, 4
200456fc:	e8930004 	lwi	r4, r19, 4
20045700:	e8730020 	lwi	r3, r19, 32
20045704:	16432003 	cmpu	r18, r3, r4
20045708:	bc52ffa4 	blti	r18, -92		// 200456ac
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
2004570c:	e873001c 	lwi	r3, r19, 28
20045710:	e8830000 	lwi	r4, r3, 0
20045714:	e8730008 	lwi	r3, r19, 8
20045718:	14632000 	rsubk	r3, r3, r4
}
2004571c:	10330000 	addk	r1, r19, r0
20045720:	ea610010 	lwi	r19, r1, 16
20045724:	ea810014 	lwi	r20, r1, 20
20045728:	30210018 	addik	r1, r1, 24
2004572c:	b60f0008 	rtsd	r15, 8
20045730:	80000000 	or	r0, r0, r0

20045734 <fifo_u64_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20045734:	3021fff0 	addik	r1, r1, -16
20045738:	fa610008 	swi	r19, r1, 8
2004573c:	fa81000c 	swi	r20, r1, 12
20045740:	12610000 	addk	r19, r1, r0
20045744:	96808000 	mfs	r20, rpc
20045748:	b000dffb 	imm	-8197
2004574c:	3294c218 	addik	r20, r20, -15848
20045750:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20045754:	e8730014 	lwi	r3, r19, 20
20045758:	e8630010 	lwi	r3, r3, 16
2004575c:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20045760:	f8130004 	swi	r0, r19, 4
20045764:	b8000028 	bri	40		// 2004578c
        fifo->read_inds[i] = 0;
20045768:	e8730014 	lwi	r3, r19, 20
2004576c:	e883000c 	lwi	r4, r3, 12
20045770:	e8730004 	lwi	r3, r19, 4
20045774:	64630402 	bslli	r3, r3, 2
20045778:	10641800 	addk	r3, r4, r3
2004577c:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20045780:	e8730004 	lwi	r3, r19, 4
20045784:	30630001 	addik	r3, r3, 1
20045788:	f8730004 	swi	r3, r19, 4
2004578c:	e8730014 	lwi	r3, r19, 20
20045790:	e8830008 	lwi	r4, r3, 8
20045794:	e8730004 	lwi	r3, r19, 4
20045798:	16441803 	cmpu	r18, r4, r3
2004579c:	bc52ffcc 	blti	r18, -52		// 20045768
        fifo->read_inds[i] = 0;
    }
}
200457a0:	10330000 	addk	r1, r19, r0
200457a4:	ea610008 	lwi	r19, r1, 8
200457a8:	ea81000c 	lwi	r20, r1, 12
200457ac:	30210010 	addik	r1, r1, 16
200457b0:	b60f0008 	rtsd	r15, 8
200457b4:	80000000 	or	r0, r0, r0

200457b8 <fifo_u64_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
200457b8:	3021ffec 	addik	r1, r1, -20
200457bc:	fa61000c 	swi	r19, r1, 12
200457c0:	fa810010 	swi	r20, r1, 16
200457c4:	12610000 	addk	r19, r1, r0
200457c8:	96808000 	mfs	r20, rpc
200457cc:	b000dffb 	imm	-8197
200457d0:	3294c194 	addik	r20, r20, -15980
200457d4:	f8b30018 	swi	r5, r19, 24
200457d8:	f8d3001c 	swi	r6, r19, 28
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
200457dc:	e8730018 	lwi	r3, r19, 24
200457e0:	e8830004 	lwi	r4, r3, 4
200457e4:	e8730018 	lwi	r3, r19, 24
200457e8:	e8a3000c 	lwi	r5, r3, 12
200457ec:	e873001c 	lwi	r3, r19, 28
200457f0:	64630402 	bslli	r3, r3, 2
200457f4:	10651800 	addk	r3, r5, r3
200457f8:	e8a30000 	lwi	r5, r3, 0
200457fc:	e8730018 	lwi	r3, r19, 24
20045800:	e8630000 	lwi	r3, r3, 0
20045804:	3063ffff 	addik	r3, r3, -1
20045808:	84651800 	and	r3, r5, r3
2004580c:	64630403 	bslli	r3, r3, 3
20045810:	10641800 	addk	r3, r4, r3
20045814:	e8830000 	lwi	r4, r3, 0
20045818:	e8a30004 	lwi	r5, r3, 4
2004581c:	f8930004 	swi	r4, r19, 4
20045820:	f8b30008 	swi	r5, r19, 8
    fifo->read_inds[reader_id]++;
20045824:	e8730018 	lwi	r3, r19, 24
20045828:	e883000c 	lwi	r4, r3, 12
2004582c:	e873001c 	lwi	r3, r19, 28
20045830:	64630402 	bslli	r3, r3, 2
20045834:	10641800 	addk	r3, r4, r3
20045838:	e8830000 	lwi	r4, r3, 0
2004583c:	30840001 	addik	r4, r4, 1
20045840:	f8830000 	swi	r4, r3, 0
    return value;
20045844:	e8930004 	lwi	r4, r19, 4
20045848:	e8b30008 	lwi	r5, r19, 8
}
2004584c:	10640000 	addk	r3, r4, r0
20045850:	10850000 	addk	r4, r5, r0
20045854:	10330000 	addk	r1, r19, r0
20045858:	ea61000c 	lwi	r19, r1, 12
2004585c:	ea810010 	lwi	r20, r1, 16
20045860:	30210014 	addik	r1, r1, 20
20045864:	b60f0008 	rtsd	r15, 8
20045868:	80000000 	or	r0, r0, r0

2004586c <fifo_u64_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
2004586c:	3021fff4 	addik	r1, r1, -12
20045870:	fa610004 	swi	r19, r1, 4
20045874:	fa810008 	swi	r20, r1, 8
20045878:	12610000 	addk	r19, r1, r0
2004587c:	96808000 	mfs	r20, rpc
20045880:	b000dffb 	imm	-8197
20045884:	3294c0e0 	addik	r20, r20, -16160
20045888:	f8b30010 	swi	r5, r19, 16
2004588c:	f8d30014 	swi	r6, r19, 20
20045890:	f8f30018 	swi	r7, r19, 24
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20045894:	e8730010 	lwi	r3, r19, 16
20045898:	e8830004 	lwi	r4, r3, 4
2004589c:	e8730010 	lwi	r3, r19, 16
200458a0:	e8630010 	lwi	r3, r3, 16
200458a4:	e8a30000 	lwi	r5, r3, 0
200458a8:	e8730010 	lwi	r3, r19, 16
200458ac:	e8630000 	lwi	r3, r3, 0
200458b0:	3063ffff 	addik	r3, r3, -1
200458b4:	84651800 	and	r3, r5, r3
200458b8:	64630403 	bslli	r3, r3, 3
200458bc:	10641800 	addk	r3, r4, r3
200458c0:	e8930014 	lwi	r4, r19, 20
200458c4:	e8b30018 	lwi	r5, r19, 24
200458c8:	f8830000 	swi	r4, r3, 0
200458cc:	f8a30004 	swi	r5, r3, 4
    (*fifo->write_ind)++;
200458d0:	e8730010 	lwi	r3, r19, 16
200458d4:	e8630010 	lwi	r3, r3, 16
200458d8:	e8830000 	lwi	r4, r3, 0
200458dc:	30840001 	addik	r4, r4, 1
200458e0:	f8830000 	swi	r4, r3, 0
}
200458e4:	10330000 	addk	r1, r19, r0
200458e8:	ea610004 	lwi	r19, r1, 4
200458ec:	ea810008 	lwi	r20, r1, 8
200458f0:	3021000c 	addik	r1, r1, 12
200458f4:	b60f0008 	rtsd	r15, 8
200458f8:	80000000 	or	r0, r0, r0

200458fc <fifo_float_has_tokens>:
	unsigned int readers_nb; /** the number of fifo's readers */
	unsigned int* read_inds; /** the current position of the reader */
	unsigned int* write_ind; /** the current position of the writer */
} FIFO_T(T);

static unsigned int FIFO_HAS_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id, unsigned int n) {
200458fc:	3021fff4 	addik	r1, r1, -12
20045900:	fa610004 	swi	r19, r1, 4
20045904:	fa810008 	swi	r20, r1, 8
20045908:	12610000 	addk	r19, r1, r0
2004590c:	96808000 	mfs	r20, rpc
20045910:	b000dffb 	imm	-8197
20045914:	3294c050 	addik	r20, r20, -16304
20045918:	f8b30010 	swi	r5, r19, 16
2004591c:	f8d30014 	swi	r6, r19, 20
20045920:	f8f30018 	swi	r7, r19, 24
    return (*fifo->write_ind) - fifo->read_inds[reader_id] >= n;
20045924:	e8730010 	lwi	r3, r19, 16
20045928:	e8630010 	lwi	r3, r3, 16
2004592c:	e8830000 	lwi	r4, r3, 0
20045930:	e8730010 	lwi	r3, r19, 16
20045934:	e8a3000c 	lwi	r5, r3, 12
20045938:	e8730014 	lwi	r3, r19, 20
2004593c:	64630402 	bslli	r3, r3, 2
20045940:	10651800 	addk	r3, r5, r3
20045944:	e8630000 	lwi	r3, r3, 0
20045948:	14a32000 	rsubk	r5, r3, r4
2004594c:	30600001 	addik	r3, r0, 1
20045950:	e8930018 	lwi	r4, r19, 24
20045954:	16442803 	cmpu	r18, r4, r5
20045958:	bcb20008 	bgei	r18, 8		// 20045960
2004595c:	10600000 	addk	r3, r0, r0
20045960:	a46300ff 	andi	r3, r3, 255
}
20045964:	10330000 	addk	r1, r19, r0
20045968:	ea610004 	lwi	r19, r1, 4
2004596c:	ea810008 	lwi	r20, r1, 8
20045970:	3021000c 	addik	r1, r1, 12
20045974:	b60f0008 	rtsd	r15, 8
20045978:	80000000 	or	r0, r0, r0

2004597c <fifo_float_get_num_tokens>:

static unsigned int FIFO_GET_NUM_TOKENS(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
2004597c:	3021fff4 	addik	r1, r1, -12
20045980:	fa610004 	swi	r19, r1, 4
20045984:	fa810008 	swi	r20, r1, 8
20045988:	12610000 	addk	r19, r1, r0
2004598c:	96808000 	mfs	r20, rpc
20045990:	b000dffb 	imm	-8197
20045994:	3294bfd0 	addik	r20, r20, -16432
20045998:	f8b30010 	swi	r5, r19, 16
2004599c:	f8d30014 	swi	r6, r19, 20
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
200459a0:	e8730010 	lwi	r3, r19, 16
200459a4:	e8630010 	lwi	r3, r3, 16
200459a8:	e8830000 	lwi	r4, r3, 0
200459ac:	e8730010 	lwi	r3, r19, 16
200459b0:	e8a3000c 	lwi	r5, r3, 12
200459b4:	e8730014 	lwi	r3, r19, 20
200459b8:	64630402 	bslli	r3, r3, 2
200459bc:	10651800 	addk	r3, r5, r3
200459c0:	e8630000 	lwi	r3, r3, 0
200459c4:	14632000 	rsubk	r3, r3, r4
}
200459c8:	10330000 	addk	r1, r19, r0
200459cc:	ea610004 	lwi	r19, r1, 4
200459d0:	ea810008 	lwi	r20, r1, 8
200459d4:	3021000c 	addik	r1, r1, 12
200459d8:	b60f0008 	rtsd	r15, 8
200459dc:	80000000 	or	r0, r0, r0

200459e0 <fifo_float_has_room>:

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
200459e0:	3021fff0 	addik	r1, r1, -16
200459e4:	fa610008 	swi	r19, r1, 8
200459e8:	fa81000c 	swi	r20, r1, 12
200459ec:	12610000 	addk	r19, r1, r0
200459f0:	96808000 	mfs	r20, rpc
200459f4:	b000dffb 	imm	-8197
200459f8:	3294bf6c 	addik	r20, r20, -16532
200459fc:	f8b30014 	swi	r5, r19, 20
20045a00:	f8d30018 	swi	r6, r19, 24
20045a04:	f8f3001c 	swi	r7, r19, 28
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20045a08:	f8130004 	swi	r0, r19, 4
20045a0c:	b800005c 	bri	92		// 20045a68
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
20045a10:	e8730014 	lwi	r3, r19, 20
20045a14:	e8830000 	lwi	r4, r3, 0
20045a18:	e8730014 	lwi	r3, r19, 20
20045a1c:	e8a3000c 	lwi	r5, r3, 12
20045a20:	e8730004 	lwi	r3, r19, 4
20045a24:	64630402 	bslli	r3, r3, 2
20045a28:	10651800 	addk	r3, r5, r3
20045a2c:	e8a30000 	lwi	r5, r3, 0
20045a30:	e8730014 	lwi	r3, r19, 20
20045a34:	e8630010 	lwi	r3, r3, 16
20045a38:	e8630000 	lwi	r3, r3, 0
20045a3c:	14632800 	rsubk	r3, r3, r5
20045a40:	10641800 	addk	r3, r4, r3
20045a44:	30830001 	addik	r4, r3, 1
20045a48:	e873001c 	lwi	r3, r19, 28
20045a4c:	16441803 	cmpu	r18, r4, r3
20045a50:	bc52000c 	blti	r18, 12		// 20045a5c
            return 0;
20045a54:	10600000 	addk	r3, r0, r0
20045a58:	b8000024 	bri	36		// 20045a7c
    return (*fifo->write_ind) - fifo->read_inds[reader_id];
}

static unsigned int FIFO_HAS_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers, unsigned int n) {
    unsigned int i;
    for(i = 0; i < num_readers; i++) {
20045a5c:	e8730004 	lwi	r3, r19, 4
20045a60:	30630001 	addik	r3, r3, 1
20045a64:	f8730004 	swi	r3, r19, 4
20045a68:	e8930004 	lwi	r4, r19, 4
20045a6c:	e8730018 	lwi	r3, r19, 24
20045a70:	16432003 	cmpu	r18, r3, r4
20045a74:	bc52ff9c 	blti	r18, -100		// 20045a10
        if (fifo->size + 1 - ((*fifo->write_ind) - fifo->read_inds[i]) <= n) {
            return 0;
        }
    }

    return 1;
20045a78:	30600001 	addik	r3, r0, 1
}
20045a7c:	10330000 	addk	r1, r19, r0
20045a80:	ea610008 	lwi	r19, r1, 8
20045a84:	ea81000c 	lwi	r20, r1, 12
20045a88:	30210010 	addik	r1, r1, 16
20045a8c:	b60f0008 	rtsd	r15, 8
20045a90:	80000000 	or	r0, r0, r0

20045a94 <fifo_float_get_room>:

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
20045a94:	3021ffe8 	addik	r1, r1, -24
20045a98:	fa610010 	swi	r19, r1, 16
20045a9c:	fa810014 	swi	r20, r1, 20
20045aa0:	12610000 	addk	r19, r1, r0
20045aa4:	96808000 	mfs	r20, rpc
20045aa8:	b000dffb 	imm	-8197
20045aac:	3294beb8 	addik	r20, r20, -16712
20045ab0:	f8b3001c 	swi	r5, r19, 28
20045ab4:	f8d30020 	swi	r6, r19, 32
    unsigned int i;
    unsigned int max_num_tokens = 0;
20045ab8:	f8130008 	swi	r0, r19, 8

    for (i = 0; i < num_readers; i++) {
20045abc:	f8130004 	swi	r0, r19, 4
20045ac0:	b8000054 	bri	84		// 20045b14
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
20045ac4:	e873001c 	lwi	r3, r19, 28
20045ac8:	e8630010 	lwi	r3, r3, 16
20045acc:	e8830000 	lwi	r4, r3, 0
20045ad0:	e873001c 	lwi	r3, r19, 28
20045ad4:	e8a3000c 	lwi	r5, r3, 12
20045ad8:	e8730004 	lwi	r3, r19, 4
20045adc:	64630402 	bslli	r3, r3, 2
20045ae0:	10651800 	addk	r3, r5, r3
20045ae4:	e8630000 	lwi	r3, r3, 0
20045ae8:	14632000 	rsubk	r3, r3, r4
20045aec:	f873000c 	swi	r3, r19, 12
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
20045af0:	e8930008 	lwi	r4, r19, 8
20045af4:	e873000c 	lwi	r3, r19, 12
20045af8:	16441803 	cmpu	r18, r4, r3
20045afc:	bcb20008 	bgei	r18, 8		// 20045b04
20045b00:	10640000 	addk	r3, r4, r0
20045b04:	f8730008 	swi	r3, r19, 8

static unsigned int FIFO_GET_ROOM(T)(struct FIFO_S(T) *fifo, unsigned int num_readers) {
    unsigned int i;
    unsigned int max_num_tokens = 0;

    for (i = 0; i < num_readers; i++) {
20045b08:	e8730004 	lwi	r3, r19, 4
20045b0c:	30630001 	addik	r3, r3, 1
20045b10:	f8730004 	swi	r3, r19, 4
20045b14:	e8930004 	lwi	r4, r19, 4
20045b18:	e8730020 	lwi	r3, r19, 32
20045b1c:	16432003 	cmpu	r18, r3, r4
20045b20:	bc52ffa4 	blti	r18, -92		// 20045ac4
        unsigned int num_tokens = (*fifo->write_ind) - fifo->read_inds[i];
        max_num_tokens = max_num_tokens > num_tokens ? max_num_tokens : num_tokens;
    }

    return fifo->size - max_num_tokens;
20045b24:	e873001c 	lwi	r3, r19, 28
20045b28:	e8830000 	lwi	r4, r3, 0
20045b2c:	e8730008 	lwi	r3, r19, 8
20045b30:	14632000 	rsubk	r3, r3, r4
}
20045b34:	10330000 	addk	r1, r19, r0
20045b38:	ea610010 	lwi	r19, r1, 16
20045b3c:	ea810014 	lwi	r20, r1, 20
20045b40:	30210018 	addik	r1, r1, 24
20045b44:	b60f0008 	rtsd	r15, 8
20045b48:	80000000 	or	r0, r0, r0

20045b4c <fifo_float_clear>:

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
20045b4c:	3021fff0 	addik	r1, r1, -16
20045b50:	fa610008 	swi	r19, r1, 8
20045b54:	fa81000c 	swi	r20, r1, 12
20045b58:	12610000 	addk	r19, r1, r0
20045b5c:	96808000 	mfs	r20, rpc
20045b60:	b000dffb 	imm	-8197
20045b64:	3294be00 	addik	r20, r20, -16896
20045b68:	f8b30014 	swi	r5, r19, 20
    unsigned int i;
    (*fifo->write_ind) = 0;
20045b6c:	e8730014 	lwi	r3, r19, 20
20045b70:	e8630010 	lwi	r3, r3, 16
20045b74:	f8030000 	swi	r0, r3, 0
    for (i = 0; i < fifo->readers_nb; i++) {
20045b78:	f8130004 	swi	r0, r19, 4
20045b7c:	b8000028 	bri	40		// 20045ba4
        fifo->read_inds[i] = 0;
20045b80:	e8730014 	lwi	r3, r19, 20
20045b84:	e883000c 	lwi	r4, r3, 12
20045b88:	e8730004 	lwi	r3, r19, 4
20045b8c:	64630402 	bslli	r3, r3, 2
20045b90:	10641800 	addk	r3, r4, r3
20045b94:	f8030000 	swi	r0, r3, 0
}

static void FIFO_CLEAR(T)(struct FIFO_S(T) *fifo) {
    unsigned int i;
    (*fifo->write_ind) = 0;
    for (i = 0; i < fifo->readers_nb; i++) {
20045b98:	e8730004 	lwi	r3, r19, 4
20045b9c:	30630001 	addik	r3, r3, 1
20045ba0:	f8730004 	swi	r3, r19, 4
20045ba4:	e8730014 	lwi	r3, r19, 20
20045ba8:	e8830008 	lwi	r4, r3, 8
20045bac:	e8730004 	lwi	r3, r19, 4
20045bb0:	16441803 	cmpu	r18, r4, r3
20045bb4:	bc52ffcc 	blti	r18, -52		// 20045b80
        fifo->read_inds[i] = 0;
    }
}
20045bb8:	10330000 	addk	r1, r19, r0
20045bbc:	ea610008 	lwi	r19, r1, 8
20045bc0:	ea81000c 	lwi	r20, r1, 12
20045bc4:	30210010 	addik	r1, r1, 16
20045bc8:	b60f0008 	rtsd	r15, 8
20045bcc:	80000000 	or	r0, r0, r0

20045bd0 <fifo_float_read_1>:

static T FIFO_READ(T)(struct FIFO_S(T) *fifo, unsigned int reader_id) {
20045bd0:	3021fff0 	addik	r1, r1, -16
20045bd4:	fa610008 	swi	r19, r1, 8
20045bd8:	fa81000c 	swi	r20, r1, 12
20045bdc:	12610000 	addk	r19, r1, r0
20045be0:	96808000 	mfs	r20, rpc
20045be4:	b000dffb 	imm	-8197
20045be8:	3294bd7c 	addik	r20, r20, -17028
20045bec:	f8b30014 	swi	r5, r19, 20
20045bf0:	f8d30018 	swi	r6, r19, 24
    T value = fifo->contents[fifo->read_inds[reader_id] & (fifo->size - 1)];
20045bf4:	e8730014 	lwi	r3, r19, 20
20045bf8:	e8830004 	lwi	r4, r3, 4
20045bfc:	e8730014 	lwi	r3, r19, 20
20045c00:	e8a3000c 	lwi	r5, r3, 12
20045c04:	e8730018 	lwi	r3, r19, 24
20045c08:	64630402 	bslli	r3, r3, 2
20045c0c:	10651800 	addk	r3, r5, r3
20045c10:	e8a30000 	lwi	r5, r3, 0
20045c14:	e8730014 	lwi	r3, r19, 20
20045c18:	e8630000 	lwi	r3, r3, 0
20045c1c:	3063ffff 	addik	r3, r3, -1
20045c20:	84651800 	and	r3, r5, r3
20045c24:	64630402 	bslli	r3, r3, 2
20045c28:	10641800 	addk	r3, r4, r3
20045c2c:	e8630000 	lwi	r3, r3, 0
20045c30:	f8730004 	swi	r3, r19, 4
    fifo->read_inds[reader_id]++;
20045c34:	e8730014 	lwi	r3, r19, 20
20045c38:	e883000c 	lwi	r4, r3, 12
20045c3c:	e8730018 	lwi	r3, r19, 24
20045c40:	64630402 	bslli	r3, r3, 2
20045c44:	10641800 	addk	r3, r4, r3
20045c48:	e8830000 	lwi	r4, r3, 0
20045c4c:	30840001 	addik	r4, r4, 1
20045c50:	f8830000 	swi	r4, r3, 0
    return value;
20045c54:	e8730004 	lwi	r3, r19, 4
}
20045c58:	10330000 	addk	r1, r19, r0
20045c5c:	ea610008 	lwi	r19, r1, 8
20045c60:	ea81000c 	lwi	r20, r1, 12
20045c64:	30210010 	addik	r1, r1, 16
20045c68:	b60f0008 	rtsd	r15, 8
20045c6c:	80000000 	or	r0, r0, r0

20045c70 <fifo_float_write_1>:

static void FIFO_WRITE(T)(struct FIFO_S(T) *fifo, T value) {
20045c70:	3021fff4 	addik	r1, r1, -12
20045c74:	fa610004 	swi	r19, r1, 4
20045c78:	fa810008 	swi	r20, r1, 8
20045c7c:	12610000 	addk	r19, r1, r0
20045c80:	96808000 	mfs	r20, rpc
20045c84:	b000dffb 	imm	-8197
20045c88:	3294bcdc 	addik	r20, r20, -17188
20045c8c:	f8b30010 	swi	r5, r19, 16
20045c90:	f8d30014 	swi	r6, r19, 20
    fifo->contents[(*fifo->write_ind) & (fifo->size - 1)] = value;
20045c94:	e8730010 	lwi	r3, r19, 16
20045c98:	e8830004 	lwi	r4, r3, 4
20045c9c:	e8730010 	lwi	r3, r19, 16
20045ca0:	e8630010 	lwi	r3, r3, 16
20045ca4:	e8a30000 	lwi	r5, r3, 0
20045ca8:	e8730010 	lwi	r3, r19, 16
20045cac:	e8630000 	lwi	r3, r3, 0
20045cb0:	3063ffff 	addik	r3, r3, -1
20045cb4:	84651800 	and	r3, r5, r3
20045cb8:	64630402 	bslli	r3, r3, 2
20045cbc:	10641800 	addk	r3, r4, r3
20045cc0:	e8930014 	lwi	r4, r19, 20
20045cc4:	f8830000 	swi	r4, r3, 0
    (*fifo->write_ind)++;
20045cc8:	e8730010 	lwi	r3, r19, 16
20045ccc:	e8630010 	lwi	r3, r3, 16
20045cd0:	e8830000 	lwi	r4, r3, 0
20045cd4:	30840001 	addik	r4, r4, 1
20045cd8:	f8830000 	swi	r4, r3, 0
}
20045cdc:	10330000 	addk	r1, r19, r0
20045ce0:	ea610004 	lwi	r19, r1, 4
20045ce4:	ea810008 	lwi	r20, r1, 8
20045ce8:	3021000c 	addik	r1, r1, 12
20045cec:	b60f0008 	rtsd	r15, 8
20045cf0:	80000000 	or	r0, r0, r0

20045cf4 <read_IN>:
	
	static u8 needInit = 1;
	
	////////////////////////////////////////////////////////////////////////////////
	// Token functions
	static void read_IN() {
20045cf4:	3021ffdc 	addik	r1, r1, -36
20045cf8:	f9e10000 	swi	r15, r1, 0
20045cfc:	fa61001c 	swi	r19, r1, 28
20045d00:	fa810020 	swi	r20, r1, 32
20045d04:	12610000 	addk	r19, r1, r0
20045d08:	96808000 	mfs	r20, rpc
20045d0c:	b000dffb 	imm	-8197
20045d10:	3294bc54 	addik	r20, r20, -17324
		index_IN = decoder_texture_idct2d_IN->read_inds[0];
20045d14:	b0000000 	imm	0
20045d18:	e8740d1c 	lwi	r3, r20, 3356
20045d1c:	e8630000 	lwi	r3, r3, 0
20045d20:	e863000c 	lwi	r3, r3, 12
20045d24:	e8830000 	lwi	r4, r3, 0
20045d28:	b0000000 	imm	0
20045d2c:	e8740d28 	lwi	r3, r20, 3368
20045d30:	f8830000 	swi	r4, r3, 0
		numTokens_IN = index_IN + fifo_i16_get_num_tokens(decoder_texture_idct2d_IN, 0);
20045d34:	b0000000 	imm	0
20045d38:	e8740d1c 	lwi	r3, r20, 3356
20045d3c:	e8630000 	lwi	r3, r3, 0
20045d40:	10a30000 	addk	r5, r3, r0
20045d44:	10c00000 	addk	r6, r0, r0
20045d48:	b0000000 	imm	0
20045d4c:	e8940d10 	lwi	r4, r20, 3344
20045d50:	99fc2000 	brald	r15, r4
20045d54:	80000000 	or	r0, r0, r0
20045d58:	10830000 	addk	r4, r3, r0
20045d5c:	b0000000 	imm	0
20045d60:	e8740d28 	lwi	r3, r20, 3368
20045d64:	e8630000 	lwi	r3, r3, 0
20045d68:	10841800 	addk	r4, r4, r3
20045d6c:	b0000000 	imm	0
20045d70:	e8740d2c 	lwi	r3, r20, 3372
20045d74:	f8830000 	swi	r4, r3, 0
	}
20045d78:	e9e10000 	lwi	r15, r1, 0
20045d7c:	10330000 	addk	r1, r19, r0
20045d80:	ea61001c 	lwi	r19, r1, 28
20045d84:	ea810020 	lwi	r20, r1, 32
20045d88:	30210024 	addik	r1, r1, 36
20045d8c:	b60f0008 	rtsd	r15, 8
20045d90:	80000000 	or	r0, r0, r0

20045d94 <read_end_IN>:
	
	static void read_end_IN() {
20045d94:	3021fff4 	addik	r1, r1, -12
20045d98:	fa610004 	swi	r19, r1, 4
20045d9c:	fa810008 	swi	r20, r1, 8
20045da0:	12610000 	addk	r19, r1, r0
20045da4:	96808000 	mfs	r20, rpc
20045da8:	b000dffb 	imm	-8197
20045dac:	3294bbb8 	addik	r20, r20, -17480
		decoder_texture_idct2d_IN->read_inds[0] = index_IN;
20045db0:	b0000000 	imm	0
20045db4:	e8740d1c 	lwi	r3, r20, 3356
20045db8:	e8630000 	lwi	r3, r3, 0
20045dbc:	e863000c 	lwi	r3, r3, 12
20045dc0:	b0000000 	imm	0
20045dc4:	e8940d28 	lwi	r4, r20, 3368
20045dc8:	e8840000 	lwi	r4, r4, 0
20045dcc:	f8830000 	swi	r4, r3, 0
	}
20045dd0:	10330000 	addk	r1, r19, r0
20045dd4:	ea610004 	lwi	r19, r1, 4
20045dd8:	ea810008 	lwi	r20, r1, 8
20045ddc:	3021000c 	addik	r1, r1, 12
20045de0:	b60f0008 	rtsd	r15, 8
20045de4:	80000000 	or	r0, r0, r0

20045de8 <read_SIGNED>:
	static void read_SIGNED() {
20045de8:	3021ffdc 	addik	r1, r1, -36
20045dec:	f9e10000 	swi	r15, r1, 0
20045df0:	fa61001c 	swi	r19, r1, 28
20045df4:	fa810020 	swi	r20, r1, 32
20045df8:	12610000 	addk	r19, r1, r0
20045dfc:	96808000 	mfs	r20, rpc
20045e00:	b000dffb 	imm	-8197
20045e04:	3294bb60 	addik	r20, r20, -17568
		index_SIGNED = decoder_texture_idct2d_SIGNED->read_inds[0];
20045e08:	b0000000 	imm	0
20045e0c:	e8740d24 	lwi	r3, r20, 3364
20045e10:	e8630000 	lwi	r3, r3, 0
20045e14:	e863000c 	lwi	r3, r3, 12
20045e18:	e8830000 	lwi	r4, r3, 0
20045e1c:	b0000000 	imm	0
20045e20:	e8740d30 	lwi	r3, r20, 3376
20045e24:	f8830000 	swi	r4, r3, 0
		numTokens_SIGNED = index_SIGNED + fifo_i32_get_num_tokens(decoder_texture_idct2d_SIGNED, 0);
20045e28:	b0000000 	imm	0
20045e2c:	e8740d24 	lwi	r3, r20, 3364
20045e30:	e8630000 	lwi	r3, r3, 0
20045e34:	10a30000 	addk	r5, r3, r0
20045e38:	10c00000 	addk	r6, r0, r0
20045e3c:	b0000000 	imm	0
20045e40:	e8940d18 	lwi	r4, r20, 3352
20045e44:	99fc2000 	brald	r15, r4
20045e48:	80000000 	or	r0, r0, r0
20045e4c:	10830000 	addk	r4, r3, r0
20045e50:	b0000000 	imm	0
20045e54:	e8740d30 	lwi	r3, r20, 3376
20045e58:	e8630000 	lwi	r3, r3, 0
20045e5c:	10841800 	addk	r4, r4, r3
20045e60:	b0000000 	imm	0
20045e64:	e8740d34 	lwi	r3, r20, 3380
20045e68:	f8830000 	swi	r4, r3, 0
	}
20045e6c:	e9e10000 	lwi	r15, r1, 0
20045e70:	10330000 	addk	r1, r19, r0
20045e74:	ea61001c 	lwi	r19, r1, 28
20045e78:	ea810020 	lwi	r20, r1, 32
20045e7c:	30210024 	addik	r1, r1, 36
20045e80:	b60f0008 	rtsd	r15, 8
20045e84:	80000000 	or	r0, r0, r0

20045e88 <read_end_SIGNED>:
	
	static void read_end_SIGNED() {
20045e88:	3021fff4 	addik	r1, r1, -12
20045e8c:	fa610004 	swi	r19, r1, 4
20045e90:	fa810008 	swi	r20, r1, 8
20045e94:	12610000 	addk	r19, r1, r0
20045e98:	96808000 	mfs	r20, rpc
20045e9c:	b000dffb 	imm	-8197
20045ea0:	3294bac4 	addik	r20, r20, -17724
		decoder_texture_idct2d_SIGNED->read_inds[0] = index_SIGNED;
20045ea4:	b0000000 	imm	0
20045ea8:	e8740d24 	lwi	r3, r20, 3364
20045eac:	e8630000 	lwi	r3, r3, 0
20045eb0:	e863000c 	lwi	r3, r3, 12
20045eb4:	b0000000 	imm	0
20045eb8:	e8940d30 	lwi	r4, r20, 3376
20045ebc:	e8840000 	lwi	r4, r4, 0
20045ec0:	f8830000 	swi	r4, r3, 0
	}
20045ec4:	10330000 	addk	r1, r19, r0
20045ec8:	ea610004 	lwi	r19, r1, 4
20045ecc:	ea810008 	lwi	r20, r1, 8
20045ed0:	3021000c 	addik	r1, r1, 12
20045ed4:	b60f0008 	rtsd	r15, 8
20045ed8:	80000000 	or	r0, r0, r0

20045edc <write_OUT>:

	static void write_OUT() {
20045edc:	3021ffdc 	addik	r1, r1, -36
20045ee0:	f9e10000 	swi	r15, r1, 0
20045ee4:	fa61001c 	swi	r19, r1, 28
20045ee8:	fa810020 	swi	r20, r1, 32
20045eec:	12610000 	addk	r19, r1, r0
20045ef0:	96808000 	mfs	r20, rpc
20045ef4:	b000dffb 	imm	-8197
20045ef8:	3294ba6c 	addik	r20, r20, -17812
		index_OUT = (*decoder_texture_idct2d_OUT->write_ind);
20045efc:	b0000000 	imm	0
20045f00:	e8740d20 	lwi	r3, r20, 3360
20045f04:	e8630000 	lwi	r3, r3, 0
20045f08:	e8630010 	lwi	r3, r3, 16
20045f0c:	e8830000 	lwi	r4, r3, 0
20045f10:	b0000000 	imm	0
20045f14:	e8740d38 	lwi	r3, r20, 3384
20045f18:	f8830000 	swi	r4, r3, 0
		numFree_OUT = index_OUT + fifo_i16_get_room(decoder_texture_idct2d_OUT, NUM_READERS_OUT);
20045f1c:	b0000000 	imm	0
20045f20:	e8740d20 	lwi	r3, r20, 3360
20045f24:	e8630000 	lwi	r3, r3, 0
20045f28:	10a30000 	addk	r5, r3, r0
20045f2c:	30c00001 	addik	r6, r0, 1
20045f30:	b0000000 	imm	0
20045f34:	e8940d14 	lwi	r4, r20, 3348
20045f38:	99fc2000 	brald	r15, r4
20045f3c:	80000000 	or	r0, r0, r0
20045f40:	10830000 	addk	r4, r3, r0
20045f44:	b0000000 	imm	0
20045f48:	e8740d38 	lwi	r3, r20, 3384
20045f4c:	e8630000 	lwi	r3, r3, 0
20045f50:	10841800 	addk	r4, r4, r3
20045f54:	b0000000 	imm	0
20045f58:	e8740d3c 	lwi	r3, r20, 3388
20045f5c:	f8830000 	swi	r4, r3, 0
	}
20045f60:	e9e10000 	lwi	r15, r1, 0
20045f64:	10330000 	addk	r1, r19, r0
20045f68:	ea61001c 	lwi	r19, r1, 28
20045f6c:	ea810020 	lwi	r20, r1, 32
20045f70:	30210024 	addik	r1, r1, 36
20045f74:	b60f0008 	rtsd	r15, 8
20045f78:	80000000 	or	r0, r0, r0

20045f7c <write_end_OUT>:
	
	static void write_end_OUT() {
20045f7c:	3021fff4 	addik	r1, r1, -12
20045f80:	fa610004 	swi	r19, r1, 4
20045f84:	fa810008 	swi	r20, r1, 8
20045f88:	12610000 	addk	r19, r1, r0
20045f8c:	96808000 	mfs	r20, rpc
20045f90:	b000dffb 	imm	-8197
20045f94:	3294b9d0 	addik	r20, r20, -17968
		(*decoder_texture_idct2d_OUT->write_ind) = index_OUT;
20045f98:	b0000000 	imm	0
20045f9c:	e8740d20 	lwi	r3, r20, 3360
20045fa0:	e8630000 	lwi	r3, r3, 0
20045fa4:	e8630010 	lwi	r3, r3, 16
20045fa8:	b0000000 	imm	0
20045fac:	e8940d38 	lwi	r4, r20, 3384
20045fb0:	e8840000 	lwi	r4, r4, 0
20045fb4:	f8830000 	swi	r4, r3, 0
	}
20045fb8:	10330000 	addk	r1, r19, r0
20045fbc:	ea610004 	lwi	r19, r1, 4
20045fc0:	ea810008 	lwi	r20, r1, 8
20045fc4:	3021000c 	addik	r1, r1, 12
20045fc8:	b60f0008 	rtsd	r15, 8
20045fcc:	80000000 	or	r0, r0, r0

20045fd0 <pmul_1_1>:
	static i32 pmul_3_1(i32 X);
	static i32 pmul_3_2(i32 X);
	static i32 clip(i32 x, i32 lim);
	static void idct1d(i32 X[64], i32 Y[64]);

	static i32 pmul_1_1(i32 X) {
20045fd0:	3021fff0 	addik	r1, r1, -16
20045fd4:	fa610008 	swi	r19, r1, 8
20045fd8:	fa81000c 	swi	r20, r1, 12
20045fdc:	12610000 	addk	r19, r1, r0
20045fe0:	96808000 	mfs	r20, rpc
20045fe4:	b000dffb 	imm	-8197
20045fe8:	3294b97c 	addik	r20, r20, -18052
20045fec:	f8b30014 	swi	r5, r19, 20
		i32 Temp1;
	
		Temp1 = (X >> 3) - (X >> 7);
20045ff0:	e8730014 	lwi	r3, r19, 20
20045ff4:	64830203 	bsrai	r4, r3, 3
20045ff8:	e8730014 	lwi	r3, r19, 20
20045ffc:	64630207 	bsrai	r3, r3, 7
20046000:	14632000 	rsubk	r3, r3, r4
20046004:	f8730004 	swi	r3, r19, 4
		return X - Temp1;
20046008:	e8930014 	lwi	r4, r19, 20
2004600c:	e8730004 	lwi	r3, r19, 4
20046010:	14632000 	rsubk	r3, r3, r4
	}
20046014:	10330000 	addk	r1, r19, r0
20046018:	ea610008 	lwi	r19, r1, 8
2004601c:	ea81000c 	lwi	r20, r1, 12
20046020:	30210010 	addik	r1, r1, 16
20046024:	b60f0008 	rtsd	r15, 8
20046028:	80000000 	or	r0, r0, r0

2004602c <pmul_1_2>:
	static i32 pmul_1_2(i32 X) {
2004602c:	3021ffec 	addik	r1, r1, -20
20046030:	fa61000c 	swi	r19, r1, 12
20046034:	fa810010 	swi	r20, r1, 16
20046038:	12610000 	addk	r19, r1, r0
2004603c:	96808000 	mfs	r20, rpc
20046040:	b000dffb 	imm	-8197
20046044:	3294b920 	addik	r20, r20, -18144
20046048:	f8b30018 	swi	r5, r19, 24
		i32 Temp1;
		i32 Temp2;
	
		Temp1 = (X >> 3) - (X >> 7);
2004604c:	e8730018 	lwi	r3, r19, 24
20046050:	64830203 	bsrai	r4, r3, 3
20046054:	e8730018 	lwi	r3, r19, 24
20046058:	64630207 	bsrai	r3, r3, 7
2004605c:	14632000 	rsubk	r3, r3, r4
20046060:	f8730004 	swi	r3, r19, 4
		Temp2 = Temp1 - (X >> 11);
20046064:	e8730018 	lwi	r3, r19, 24
20046068:	6463020b 	bsrai	r3, r3, 11
2004606c:	e8930004 	lwi	r4, r19, 4
20046070:	14632000 	rsubk	r3, r3, r4
20046074:	f8730008 	swi	r3, r19, 8
		return Temp1 + (Temp2 >> 1);
20046078:	e8730008 	lwi	r3, r19, 8
2004607c:	90830001 	sra	r4, r3
20046080:	e8730004 	lwi	r3, r19, 4
20046084:	10641800 	addk	r3, r4, r3
	}
20046088:	10330000 	addk	r1, r19, r0
2004608c:	ea61000c 	lwi	r19, r1, 12
20046090:	ea810010 	lwi	r20, r1, 16
20046094:	30210014 	addik	r1, r1, 20
20046098:	b60f0008 	rtsd	r15, 8
2004609c:	80000000 	or	r0, r0, r0

200460a0 <pmul_2_1>:
	static i32 pmul_2_1(i32 X) {
200460a0:	3021fff0 	addik	r1, r1, -16
200460a4:	fa610008 	swi	r19, r1, 8
200460a8:	fa81000c 	swi	r20, r1, 12
200460ac:	12610000 	addk	r19, r1, r0
200460b0:	96808000 	mfs	r20, rpc
200460b4:	b000dffb 	imm	-8197
200460b8:	3294b8ac 	addik	r20, r20, -18260
200460bc:	f8b30014 	swi	r5, r19, 20
		i32 Temp1;
	
		Temp1 = (X >> 9) - X;
200460c0:	e8730014 	lwi	r3, r19, 20
200460c4:	64830209 	bsrai	r4, r3, 9
200460c8:	e8730014 	lwi	r3, r19, 20
200460cc:	14632000 	rsubk	r3, r3, r4
200460d0:	f8730004 	swi	r3, r19, 4
		return (Temp1 >> 2) - Temp1;
200460d4:	e8730004 	lwi	r3, r19, 4
200460d8:	64830202 	bsrai	r4, r3, 2
200460dc:	e8730004 	lwi	r3, r19, 4
200460e0:	14632000 	rsubk	r3, r3, r4
	}
200460e4:	10330000 	addk	r1, r19, r0
200460e8:	ea610008 	lwi	r19, r1, 8
200460ec:	ea81000c 	lwi	r20, r1, 12
200460f0:	30210010 	addik	r1, r1, 16
200460f4:	b60f0008 	rtsd	r15, 8
200460f8:	80000000 	or	r0, r0, r0

200460fc <pmul_2_2>:
	static i32 pmul_2_2(i32 X) {
200460fc:	3021fff4 	addik	r1, r1, -12
20046100:	fa610004 	swi	r19, r1, 4
20046104:	fa810008 	swi	r20, r1, 8
20046108:	12610000 	addk	r19, r1, r0
2004610c:	96808000 	mfs	r20, rpc
20046110:	b000dffb 	imm	-8197
20046114:	3294b850 	addik	r20, r20, -18352
20046118:	f8b30010 	swi	r5, r19, 16
	
		return X >> 1;
2004611c:	e8730010 	lwi	r3, r19, 16
20046120:	90630001 	sra	r3, r3
	}
20046124:	10330000 	addk	r1, r19, r0
20046128:	ea610004 	lwi	r19, r1, 4
2004612c:	ea810008 	lwi	r20, r1, 8
20046130:	3021000c 	addik	r1, r1, 12
20046134:	b60f0008 	rtsd	r15, 8
20046138:	80000000 	or	r0, r0, r0

2004613c <pmul_3_1>:
	static i32 pmul_3_1(i32 X) {
2004613c:	3021ffec 	addik	r1, r1, -20
20046140:	fa61000c 	swi	r19, r1, 12
20046144:	fa810010 	swi	r20, r1, 16
20046148:	12610000 	addk	r19, r1, r0
2004614c:	96808000 	mfs	r20, rpc
20046150:	b000dffb 	imm	-8197
20046154:	3294b810 	addik	r20, r20, -18416
20046158:	f8b30018 	swi	r5, r19, 24
		i32 Temp1;
		i32 Temp2;
	
		Temp1 = X + (X >> 5);
2004615c:	e8730018 	lwi	r3, r19, 24
20046160:	64830205 	bsrai	r4, r3, 5
20046164:	e8730018 	lwi	r3, r19, 24
20046168:	10641800 	addk	r3, r4, r3
2004616c:	f8730004 	swi	r3, r19, 4
		Temp2 = Temp1 >> 2;
20046170:	e8730004 	lwi	r3, r19, 4
20046174:	64630202 	bsrai	r3, r3, 2
20046178:	f8730008 	swi	r3, r19, 8
		return Temp2 + (X >> 4);
2004617c:	e8730018 	lwi	r3, r19, 24
20046180:	64830204 	bsrai	r4, r3, 4
20046184:	e8730008 	lwi	r3, r19, 8
20046188:	10641800 	addk	r3, r4, r3
	}
2004618c:	10330000 	addk	r1, r19, r0
20046190:	ea61000c 	lwi	r19, r1, 12
20046194:	ea810010 	lwi	r20, r1, 16
20046198:	30210014 	addik	r1, r1, 20
2004619c:	b60f0008 	rtsd	r15, 8
200461a0:	80000000 	or	r0, r0, r0

200461a4 <pmul_3_2>:
	static i32 pmul_3_2(i32 X) {
200461a4:	3021ffec 	addik	r1, r1, -20
200461a8:	fa61000c 	swi	r19, r1, 12
200461ac:	fa810010 	swi	r20, r1, 16
200461b0:	12610000 	addk	r19, r1, r0
200461b4:	96808000 	mfs	r20, rpc
200461b8:	b000dffb 	imm	-8197
200461bc:	3294b7a8 	addik	r20, r20, -18520
200461c0:	f8b30018 	swi	r5, r19, 24
		i32 Temp1;
		i32 Temp2;
	
		Temp1 = X + (X >> 5);
200461c4:	e8730018 	lwi	r3, r19, 24
200461c8:	64830205 	bsrai	r4, r3, 5
200461cc:	e8730018 	lwi	r3, r19, 24
200461d0:	10641800 	addk	r3, r4, r3
200461d4:	f8730004 	swi	r3, r19, 4
		Temp2 = Temp1 >> 2;
200461d8:	e8730004 	lwi	r3, r19, 4
200461dc:	64630202 	bsrai	r3, r3, 2
200461e0:	f8730008 	swi	r3, r19, 8
		return Temp1 - Temp2;
200461e4:	e8930004 	lwi	r4, r19, 4
200461e8:	e8730008 	lwi	r3, r19, 8
200461ec:	14632000 	rsubk	r3, r3, r4
	}
200461f0:	10330000 	addk	r1, r19, r0
200461f4:	ea61000c 	lwi	r19, r1, 12
200461f8:	ea810010 	lwi	r20, r1, 16
200461fc:	30210014 	addik	r1, r1, 20
20046200:	b60f0008 	rtsd	r15, 8
20046204:	80000000 	or	r0, r0, r0

20046208 <clip>:
	static i32 clip(i32 x, i32 lim) {
20046208:	3021fff0 	addik	r1, r1, -16
2004620c:	fa610008 	swi	r19, r1, 8
20046210:	fa81000c 	swi	r20, r1, 12
20046214:	12610000 	addk	r19, r1, r0
20046218:	96808000 	mfs	r20, rpc
2004621c:	b000dffb 	imm	-8197
20046220:	3294b744 	addik	r20, r20, -18620
20046224:	f8b30014 	swi	r5, r19, 20
20046228:	f8d30018 	swi	r6, r19, 24
		i32 tmp_if;
	
		if (x < lim) {
2004622c:	e8930014 	lwi	r4, r19, 20
20046230:	e8730018 	lwi	r3, r19, 24
20046234:	16432001 	cmp	r18, r3, r4
20046238:	bcb20010 	bgei	r18, 16		// 20046248
			tmp_if = lim;
2004623c:	e8730018 	lwi	r3, r19, 24
20046240:	f8730004 	swi	r3, r19, 4
20046244:	b8000028 	bri	40		// 2004626c
		} else {
			if (x > 255) {
20046248:	e8930014 	lwi	r4, r19, 20
2004624c:	306000ff 	addik	r3, r0, 255
20046250:	16441801 	cmp	r18, r4, r3
20046254:	bcb20010 	bgei	r18, 16		// 20046264
				tmp_if = 255;
20046258:	306000ff 	addik	r3, r0, 255
2004625c:	f8730004 	swi	r3, r19, 4
20046260:	b800000c 	bri	12		// 2004626c
			} else {
				tmp_if = x;
20046264:	e8730014 	lwi	r3, r19, 20
20046268:	f8730004 	swi	r3, r19, 4
			}
		}
		return tmp_if;
2004626c:	e8730004 	lwi	r3, r19, 4
	}
20046270:	10330000 	addk	r1, r19, r0
20046274:	ea610008 	lwi	r19, r1, 8
20046278:	ea81000c 	lwi	r20, r1, 12
2004627c:	30210010 	addik	r1, r1, 16
20046280:	b60f0008 	rtsd	r15, 8
20046284:	80000000 	or	r0, r0, r0

20046288 <idct1d>:
	static void idct1d(i32 X[64], i32 Y[64]) {
20046288:	3021ffb0 	addik	r1, r1, -80
2004628c:	f9e10000 	swi	r15, r1, 0
20046290:	fa610048 	swi	r19, r1, 72
20046294:	fa81004c 	swi	r20, r1, 76
20046298:	12610000 	addk	r19, r1, r0
2004629c:	96808000 	mfs	r20, rpc
200462a0:	b000dffb 	imm	-8197
200462a4:	3294b6c0 	addik	r20, r20, -18752
200462a8:	f8b30054 	swi	r5, r19, 84
200462ac:	f8d30058 	swi	r6, r19, 88
		i32 x7;
		i32 xa;
		i32 xb;
		i32 i;
	
		i = 0;
200462b0:	f813001c 	swi	r0, r19, 28
		while (i <= 7) {
200462b4:	b8000448 	bri	1096		// 200466fc
			x1 = X[8 * i + 1];
200462b8:	e873001c 	lwi	r3, r19, 28
200462bc:	64630405 	bslli	r3, r3, 5
200462c0:	30630004 	addik	r3, r3, 4
200462c4:	e8930054 	lwi	r4, r19, 84
200462c8:	10641800 	addk	r3, r4, r3
200462cc:	e8630000 	lwi	r3, r3, 0
200462d0:	f8730020 	swi	r3, r19, 32
			x3 = X[8 * i + 3];
200462d4:	e873001c 	lwi	r3, r19, 28
200462d8:	64630405 	bslli	r3, r3, 5
200462dc:	3063000c 	addik	r3, r3, 12
200462e0:	e8930054 	lwi	r4, r19, 84
200462e4:	10641800 	addk	r3, r4, r3
200462e8:	e8630000 	lwi	r3, r3, 0
200462ec:	f8730024 	swi	r3, r19, 36
			x5 = X[8 * i + 5];
200462f0:	e873001c 	lwi	r3, r19, 28
200462f4:	64630405 	bslli	r3, r3, 5
200462f8:	30630014 	addik	r3, r3, 20
200462fc:	e8930054 	lwi	r4, r19, 84
20046300:	10641800 	addk	r3, r4, r3
20046304:	e8630000 	lwi	r3, r3, 0
20046308:	f8730028 	swi	r3, r19, 40
			x7 = X[8 * i + 7];
2004630c:	e873001c 	lwi	r3, r19, 28
20046310:	64630405 	bslli	r3, r3, 5
20046314:	3063001c 	addik	r3, r3, 28
20046318:	e8930054 	lwi	r4, r19, 84
2004631c:	10641800 	addk	r3, r4, r3
20046320:	e8630000 	lwi	r3, r3, 0
20046324:	f873002c 	swi	r3, r19, 44
			xa = x1 + x7;
20046328:	e8930020 	lwi	r4, r19, 32
2004632c:	e873002c 	lwi	r3, r19, 44
20046330:	10641800 	addk	r3, r4, r3
20046334:	f8730030 	swi	r3, r19, 48
			xb = x1 - x7;
20046338:	e8930020 	lwi	r4, r19, 32
2004633c:	e873002c 	lwi	r3, r19, 44
20046340:	14632000 	rsubk	r3, r3, r4
20046344:	f8730034 	swi	r3, r19, 52
			x1 = xa + x3;
20046348:	e8930030 	lwi	r4, r19, 48
2004634c:	e8730024 	lwi	r3, r19, 36
20046350:	10641800 	addk	r3, r4, r3
20046354:	f8730020 	swi	r3, r19, 32
			x3 = xa - x3;
20046358:	e8930030 	lwi	r4, r19, 48
2004635c:	e8730024 	lwi	r3, r19, 36
20046360:	14632000 	rsubk	r3, r3, r4
20046364:	f8730024 	swi	r3, r19, 36
			x7 = xb + x5;
20046368:	e8930034 	lwi	r4, r19, 52
2004636c:	e8730028 	lwi	r3, r19, 40
20046370:	10641800 	addk	r3, r4, r3
20046374:	f873002c 	swi	r3, r19, 44
			x5 = xb - x5;
20046378:	e8930034 	lwi	r4, r19, 52
2004637c:	e8730028 	lwi	r3, r19, 40
20046380:	14632000 	rsubk	r3, r3, r4
20046384:	f8730028 	swi	r3, r19, 40
			xa = pmul_1_2(x3);
20046388:	e8b30024 	lwi	r5, r19, 36
2004638c:	b0000000 	imm	0
20046390:	e8940d64 	lwi	r4, r20, 3428
20046394:	99fc2000 	brald	r15, r4
20046398:	80000000 	or	r0, r0, r0
2004639c:	f8730030 	swi	r3, r19, 48
			x3 = pmul_1_1(x3);
200463a0:	e8b30024 	lwi	r5, r19, 36
200463a4:	b0000000 	imm	0
200463a8:	e8940d60 	lwi	r4, r20, 3424
200463ac:	99fc2000 	brald	r15, r4
200463b0:	80000000 	or	r0, r0, r0
200463b4:	f8730024 	swi	r3, r19, 36
			xb = pmul_1_2(x5);
200463b8:	e8b30028 	lwi	r5, r19, 40
200463bc:	b0000000 	imm	0
200463c0:	e8940d64 	lwi	r4, r20, 3428
200463c4:	99fc2000 	brald	r15, r4
200463c8:	80000000 	or	r0, r0, r0
200463cc:	f8730034 	swi	r3, r19, 52
			x5 = pmul_1_1(x5);
200463d0:	e8b30028 	lwi	r5, r19, 40
200463d4:	b0000000 	imm	0
200463d8:	e8940d60 	lwi	r4, r20, 3424
200463dc:	99fc2000 	brald	r15, r4
200463e0:	80000000 	or	r0, r0, r0
200463e4:	f8730028 	swi	r3, r19, 40
			x3 = x3 - xb;
200463e8:	e8930024 	lwi	r4, r19, 36
200463ec:	e8730034 	lwi	r3, r19, 52
200463f0:	14632000 	rsubk	r3, r3, r4
200463f4:	f8730024 	swi	r3, r19, 36
			x5 = x5 + xa;
200463f8:	e8930028 	lwi	r4, r19, 40
200463fc:	e8730030 	lwi	r3, r19, 48
20046400:	10641800 	addk	r3, r4, r3
20046404:	f8730028 	swi	r3, r19, 40
			xa = pmul_2_2(x1);
20046408:	e8b30020 	lwi	r5, r19, 32
2004640c:	b0000000 	imm	0
20046410:	e8940d6c 	lwi	r4, r20, 3436
20046414:	99fc2000 	brald	r15, r4
20046418:	80000000 	or	r0, r0, r0
2004641c:	f8730030 	swi	r3, r19, 48
			x1 = pmul_2_1(x1);
20046420:	e8b30020 	lwi	r5, r19, 32
20046424:	b0000000 	imm	0
20046428:	e8940d68 	lwi	r4, r20, 3432
2004642c:	99fc2000 	brald	r15, r4
20046430:	80000000 	or	r0, r0, r0
20046434:	f8730020 	swi	r3, r19, 32
			xb = pmul_2_2(x7);
20046438:	e8b3002c 	lwi	r5, r19, 44
2004643c:	b0000000 	imm	0
20046440:	e8940d6c 	lwi	r4, r20, 3436
20046444:	99fc2000 	brald	r15, r4
20046448:	80000000 	or	r0, r0, r0
2004644c:	f8730034 	swi	r3, r19, 52
			x7 = pmul_2_1(x7);
20046450:	e8b3002c 	lwi	r5, r19, 44
20046454:	b0000000 	imm	0
20046458:	e8940d68 	lwi	r4, r20, 3432
2004645c:	99fc2000 	brald	r15, r4
20046460:	80000000 	or	r0, r0, r0
20046464:	f873002c 	swi	r3, r19, 44
			x1 = x1 + xb;
20046468:	e8930020 	lwi	r4, r19, 32
2004646c:	e8730034 	lwi	r3, r19, 52
20046470:	10641800 	addk	r3, r4, r3
20046474:	f8730020 	swi	r3, r19, 32
			x7 = x7 - xa;
20046478:	e893002c 	lwi	r4, r19, 44
2004647c:	e8730030 	lwi	r3, r19, 48
20046480:	14632000 	rsubk	r3, r3, r4
20046484:	f873002c 	swi	r3, r19, 44
			x0 = X[8 * i + 0];
20046488:	e873001c 	lwi	r3, r19, 28
2004648c:	64630405 	bslli	r3, r3, 5
20046490:	e8930054 	lwi	r4, r19, 84
20046494:	10641800 	addk	r3, r4, r3
20046498:	e8630000 	lwi	r3, r3, 0
2004649c:	f8730038 	swi	r3, r19, 56
			x2 = X[8 * i + 2];
200464a0:	e873001c 	lwi	r3, r19, 28
200464a4:	64630405 	bslli	r3, r3, 5
200464a8:	30630008 	addik	r3, r3, 8
200464ac:	e8930054 	lwi	r4, r19, 84
200464b0:	10641800 	addk	r3, r4, r3
200464b4:	e8630000 	lwi	r3, r3, 0
200464b8:	f873003c 	swi	r3, r19, 60
			x4 = X[8 * i + 4];
200464bc:	e873001c 	lwi	r3, r19, 28
200464c0:	64630405 	bslli	r3, r3, 5
200464c4:	30630010 	addik	r3, r3, 16
200464c8:	e8930054 	lwi	r4, r19, 84
200464cc:	10641800 	addk	r3, r4, r3
200464d0:	e8630000 	lwi	r3, r3, 0
200464d4:	f8730040 	swi	r3, r19, 64
			x6 = X[8 * i + 6];
200464d8:	e873001c 	lwi	r3, r19, 28
200464dc:	64630405 	bslli	r3, r3, 5
200464e0:	30630018 	addik	r3, r3, 24
200464e4:	e8930054 	lwi	r4, r19, 84
200464e8:	10641800 	addk	r3, r4, r3
200464ec:	e8630000 	lwi	r3, r3, 0
200464f0:	f8730044 	swi	r3, r19, 68
			xa = pmul_3_2(x2);
200464f4:	e8b3003c 	lwi	r5, r19, 60
200464f8:	b0000000 	imm	0
200464fc:	e8940d74 	lwi	r4, r20, 3444
20046500:	99fc2000 	brald	r15, r4
20046504:	80000000 	or	r0, r0, r0
20046508:	f8730030 	swi	r3, r19, 48
			x2 = pmul_3_1(x2);
2004650c:	e8b3003c 	lwi	r5, r19, 60
20046510:	b0000000 	imm	0
20046514:	e8940d70 	lwi	r4, r20, 3440
20046518:	99fc2000 	brald	r15, r4
2004651c:	80000000 	or	r0, r0, r0
20046520:	f873003c 	swi	r3, r19, 60
			xb = pmul_3_2(x6);
20046524:	e8b30044 	lwi	r5, r19, 68
20046528:	b0000000 	imm	0
2004652c:	e8940d74 	lwi	r4, r20, 3444
20046530:	99fc2000 	brald	r15, r4
20046534:	80000000 	or	r0, r0, r0
20046538:	f8730034 	swi	r3, r19, 52
			x6 = pmul_3_1(x6);
2004653c:	e8b30044 	lwi	r5, r19, 68
20046540:	b0000000 	imm	0
20046544:	e8940d70 	lwi	r4, r20, 3440
20046548:	99fc2000 	brald	r15, r4
2004654c:	80000000 	or	r0, r0, r0
20046550:	f8730044 	swi	r3, r19, 68
			x2 = x2 - xb;
20046554:	e893003c 	lwi	r4, r19, 60
20046558:	e8730034 	lwi	r3, r19, 52
2004655c:	14632000 	rsubk	r3, r3, r4
20046560:	f873003c 	swi	r3, r19, 60
			x6 = x6 + xa;
20046564:	e8930044 	lwi	r4, r19, 68
20046568:	e8730030 	lwi	r3, r19, 48
2004656c:	10641800 	addk	r3, r4, r3
20046570:	f8730044 	swi	r3, r19, 68
			xa = x0 + x4;
20046574:	e8930038 	lwi	r4, r19, 56
20046578:	e8730040 	lwi	r3, r19, 64
2004657c:	10641800 	addk	r3, r4, r3
20046580:	f8730030 	swi	r3, r19, 48
			xb = x0 - x4;
20046584:	e8930038 	lwi	r4, r19, 56
20046588:	e8730040 	lwi	r3, r19, 64
2004658c:	14632000 	rsubk	r3, r3, r4
20046590:	f8730034 	swi	r3, r19, 52
			x0 = xa + x6;
20046594:	e8930030 	lwi	r4, r19, 48
20046598:	e8730044 	lwi	r3, r19, 68
2004659c:	10641800 	addk	r3, r4, r3
200465a0:	f8730038 	swi	r3, r19, 56
			x6 = xa - x6;
200465a4:	e8930030 	lwi	r4, r19, 48
200465a8:	e8730044 	lwi	r3, r19, 68
200465ac:	14632000 	rsubk	r3, r3, r4
200465b0:	f8730044 	swi	r3, r19, 68
			x4 = xb + x2;
200465b4:	e8930034 	lwi	r4, r19, 52
200465b8:	e873003c 	lwi	r3, r19, 60
200465bc:	10641800 	addk	r3, r4, r3
200465c0:	f8730040 	swi	r3, r19, 64
			x2 = xb - x2;
200465c4:	e8930034 	lwi	r4, r19, 52
200465c8:	e873003c 	lwi	r3, r19, 60
200465cc:	14632000 	rsubk	r3, r3, r4
200465d0:	f873003c 	swi	r3, r19, 60
			Y[i + 8 * 0] = x0 + x1;
200465d4:	e873001c 	lwi	r3, r19, 28
200465d8:	64630402 	bslli	r3, r3, 2
200465dc:	e8930058 	lwi	r4, r19, 88
200465e0:	10641800 	addk	r3, r4, r3
200465e4:	e8b30038 	lwi	r5, r19, 56
200465e8:	e8930020 	lwi	r4, r19, 32
200465ec:	10852000 	addk	r4, r5, r4
200465f0:	f8830000 	swi	r4, r3, 0
			Y[i + 8 * 1] = x4 + x5;
200465f4:	e873001c 	lwi	r3, r19, 28
200465f8:	30630008 	addik	r3, r3, 8
200465fc:	64630402 	bslli	r3, r3, 2
20046600:	e8930058 	lwi	r4, r19, 88
20046604:	10641800 	addk	r3, r4, r3
20046608:	e8b30040 	lwi	r5, r19, 64
2004660c:	e8930028 	lwi	r4, r19, 40
20046610:	10852000 	addk	r4, r5, r4
20046614:	f8830000 	swi	r4, r3, 0
			Y[i + 8 * 2] = x2 + x3;
20046618:	e873001c 	lwi	r3, r19, 28
2004661c:	30630010 	addik	r3, r3, 16
20046620:	64630402 	bslli	r3, r3, 2
20046624:	e8930058 	lwi	r4, r19, 88
20046628:	10641800 	addk	r3, r4, r3
2004662c:	e8b3003c 	lwi	r5, r19, 60
20046630:	e8930024 	lwi	r4, r19, 36
20046634:	10852000 	addk	r4, r5, r4
20046638:	f8830000 	swi	r4, r3, 0
			Y[i + 8 * 3] = x6 + x7;
2004663c:	e873001c 	lwi	r3, r19, 28
20046640:	30630018 	addik	r3, r3, 24
20046644:	64630402 	bslli	r3, r3, 2
20046648:	e8930058 	lwi	r4, r19, 88
2004664c:	10641800 	addk	r3, r4, r3
20046650:	e8b30044 	lwi	r5, r19, 68
20046654:	e893002c 	lwi	r4, r19, 44
20046658:	10852000 	addk	r4, r5, r4
2004665c:	f8830000 	swi	r4, r3, 0
			Y[i + 8 * 4] = x6 - x7;
20046660:	e873001c 	lwi	r3, r19, 28
20046664:	30630020 	addik	r3, r3, 32
20046668:	64630402 	bslli	r3, r3, 2
2004666c:	e8930058 	lwi	r4, r19, 88
20046670:	10641800 	addk	r3, r4, r3
20046674:	e8b30044 	lwi	r5, r19, 68
20046678:	e893002c 	lwi	r4, r19, 44
2004667c:	14842800 	rsubk	r4, r4, r5
20046680:	f8830000 	swi	r4, r3, 0
			Y[i + 8 * 5] = x2 - x3;
20046684:	e873001c 	lwi	r3, r19, 28
20046688:	30630028 	addik	r3, r3, 40
2004668c:	64630402 	bslli	r3, r3, 2
20046690:	e8930058 	lwi	r4, r19, 88
20046694:	10641800 	addk	r3, r4, r3
20046698:	e8b3003c 	lwi	r5, r19, 60
2004669c:	e8930024 	lwi	r4, r19, 36
200466a0:	14842800 	rsubk	r4, r4, r5
200466a4:	f8830000 	swi	r4, r3, 0
			Y[i + 8 * 6] = x4 - x5;
200466a8:	e873001c 	lwi	r3, r19, 28
200466ac:	30630030 	addik	r3, r3, 48
200466b0:	64630402 	bslli	r3, r3, 2
200466b4:	e8930058 	lwi	r4, r19, 88
200466b8:	10641800 	addk	r3, r4, r3
200466bc:	e8b30040 	lwi	r5, r19, 64
200466c0:	e8930028 	lwi	r4, r19, 40
200466c4:	14842800 	rsubk	r4, r4, r5
200466c8:	f8830000 	swi	r4, r3, 0
			Y[i + 8 * 7] = x0 - x1;
200466cc:	e873001c 	lwi	r3, r19, 28
200466d0:	30630038 	addik	r3, r3, 56
200466d4:	64630402 	bslli	r3, r3, 2
200466d8:	e8930058 	lwi	r4, r19, 88
200466dc:	10641800 	addk	r3, r4, r3
200466e0:	e8b30038 	lwi	r5, r19, 56
200466e4:	e8930020 	lwi	r4, r19, 32
200466e8:	14842800 	rsubk	r4, r4, r5
200466ec:	f8830000 	swi	r4, r3, 0
			i = i + 1;
200466f0:	e873001c 	lwi	r3, r19, 28
200466f4:	30630001 	addik	r3, r3, 1
200466f8:	f873001c 	swi	r3, r19, 28
		i32 xa;
		i32 xb;
		i32 i;
	
		i = 0;
		while (i <= 7) {
200466fc:	e893001c 	lwi	r4, r19, 28
20046700:	30600007 	addik	r3, r0, 7
20046704:	16441801 	cmp	r18, r4, r3
20046708:	bcb2fbb0 	bgei	r18, -1104		// 200462b8
			Y[i + 8 * 5] = x2 - x3;
			Y[i + 8 * 6] = x4 - x5;
			Y[i + 8 * 7] = x0 - x1;
			i = i + 1;
		}
	}
2004670c:	e9e10000 	lwi	r15, r1, 0
20046710:	10330000 	addk	r1, r19, r0
20046714:	ea610048 	lwi	r19, r1, 72
20046718:	ea81004c 	lwi	r20, r1, 76
2004671c:	30210050 	addik	r1, r1, 80
20046720:	b60f0008 	rtsd	r15, 8
20046724:	80000000 	or	r0, r0, r0

20046728 <isSchedulable_untagged_0>:

	////////////////////////////////////////////////////////////////////////////////
	// Actions
	static i32 isSchedulable_untagged_0() {
20046728:	3021fff0 	addik	r1, r1, -16
2004672c:	fa610008 	swi	r19, r1, 8
20046730:	fa81000c 	swi	r20, r1, 12
20046734:	12610000 	addk	r19, r1, r0
20046738:	96808000 	mfs	r20, rpc
2004673c:	b000dffb 	imm	-8197
20046740:	3294b224 	addik	r20, r20, -19932
		i32 result;
	
		result = 1;
20046744:	30600001 	addik	r3, r0, 1
20046748:	f8730004 	swi	r3, r19, 4
		return result;
2004674c:	e8730004 	lwi	r3, r19, 4
	}
20046750:	10330000 	addk	r1, r19, r0
20046754:	ea610008 	lwi	r19, r1, 8
20046758:	ea81000c 	lwi	r20, r1, 12
2004675c:	30210010 	addik	r1, r1, 16
20046760:	b60f0008 	rtsd	r15, 8
20046764:	80000000 	or	r0, r0, r0

20046768 <untagged_0>:
	
	static void untagged_0() {
20046768:	3021fdac 	addik	r1, r1, -596
2004676c:	f9e10000 	swi	r15, r1, 0
20046770:	fa61024c 	swi	r19, r1, 588
20046774:	fa810250 	swi	r20, r1, 592
20046778:	12610000 	addk	r19, r1, r0
2004677c:	96808000 	mfs	r20, rpc
20046780:	b000dffb 	imm	-8197
20046784:	3294b1e0 	addik	r20, r20, -20000
	
		// Compute aligned port indexes
		i32 index_aligned_IN = index_IN % SIZE_IN;
20046788:	b0000000 	imm	0
2004678c:	e8740d28 	lwi	r3, r20, 3368
20046790:	e8630000 	lwi	r3, r3, 0
20046794:	a46301ff 	andi	r3, r3, 511
20046798:	f8730020 	swi	r3, r19, 32
		i32 index_aligned_SIGNED = index_SIGNED % SIZE_SIGNED;
2004679c:	b0000000 	imm	0
200467a0:	e8740d30 	lwi	r3, r20, 3376
200467a4:	e8630000 	lwi	r3, r3, 0
200467a8:	a46301ff 	andi	r3, r3, 511
200467ac:	f8730024 	swi	r3, r19, 36
		i32 index_aligned_OUT = index_OUT % SIZE_OUT;
200467b0:	b0000000 	imm	0
200467b4:	e8740d38 	lwi	r3, r20, 3384
200467b8:	e8630000 	lwi	r3, r3, 0
200467bc:	a46301ff 	andi	r3, r3, 511
200467c0:	f8730028 	swi	r3, r19, 40
		i32 tmp_block10;
		i32 tmp_clip;
		i32 tmp_block11;
		i32 tmp_clip0;
	
		s = tokens_SIGNED[(index_SIGNED + (0)) % SIZE_SIGNED];
200467c4:	b0000000 	imm	0
200467c8:	e8740d24 	lwi	r3, r20, 3364
200467cc:	e8630000 	lwi	r3, r3, 0
200467d0:	e8830004 	lwi	r4, r3, 4
200467d4:	b0000000 	imm	0
200467d8:	e8740d30 	lwi	r3, r20, 3376
200467dc:	e8630000 	lwi	r3, r3, 0
200467e0:	a46301ff 	andi	r3, r3, 511
200467e4:	64630402 	bslli	r3, r3, 2
200467e8:	10641800 	addk	r3, r4, r3
200467ec:	e8630000 	lwi	r3, r3, 0
200467f0:	f873002c 	swi	r3, r19, 44
		n = 0;
200467f4:	f813001c 	swi	r0, r19, 28
		while (n <= 63) {
200467f8:	b800008c 	bri	140		// 20046884
			tmp_scale = scale[n];
200467fc:	b0000000 	imm	0
20046800:	e8940d40 	lwi	r4, r20, 3392
20046804:	e873001c 	lwi	r3, r19, 28
20046808:	64630402 	bslli	r3, r3, 2
2004680c:	10641800 	addk	r3, r4, r3
20046810:	e8630000 	lwi	r3, r3, 0
20046814:	f8730030 	swi	r3, r19, 48
			tmp_IN = tokens_IN[(index_IN + (n)) % SIZE_IN];
20046818:	b0000000 	imm	0
2004681c:	e8740d1c 	lwi	r3, r20, 3356
20046820:	e8630000 	lwi	r3, r3, 0
20046824:	e8830004 	lwi	r4, r3, 4
20046828:	b0000000 	imm	0
2004682c:	e8740d28 	lwi	r3, r20, 3368
20046830:	e8a30000 	lwi	r5, r3, 0
20046834:	e873001c 	lwi	r3, r19, 28
20046838:	10651800 	addk	r3, r5, r3
2004683c:	a46301ff 	andi	r3, r3, 511
20046840:	10631800 	addk	r3, r3, r3
20046844:	10641800 	addk	r3, r4, r3
20046848:	e4630000 	lhui	r3, r3, 0
2004684c:	f4730034 	shi	r3, r19, 52
			block1[n] = tmp_scale * tmp_IN;
20046850:	e4730034 	lhui	r3, r19, 52
20046854:	90830061 	sext16	r4, r3
20046858:	e8730030 	lwi	r3, r19, 48
2004685c:	40841800 	mul	r4, r4, r3
20046860:	e873001c 	lwi	r3, r19, 28
20046864:	64630402 	bslli	r3, r3, 2
20046868:	30b3001c 	addik	r5, r19, 28
2004686c:	10651800 	addk	r3, r5, r3
20046870:	30630030 	addik	r3, r3, 48
20046874:	f8830000 	swi	r4, r3, 0
			n = n + 1;
20046878:	e873001c 	lwi	r3, r19, 28
2004687c:	30630001 	addik	r3, r3, 1
20046880:	f873001c 	swi	r3, r19, 28
		i32 tmp_block11;
		i32 tmp_clip0;
	
		s = tokens_SIGNED[(index_SIGNED + (0)) % SIZE_SIGNED];
		n = 0;
		while (n <= 63) {
20046884:	e893001c 	lwi	r4, r19, 28
20046888:	3060003f 	addik	r3, r0, 63
2004688c:	16441801 	cmp	r18, r4, r3
20046890:	bcb2ff6c 	bgei	r18, -148		// 200467fc
			tmp_scale = scale[n];
			tmp_IN = tokens_IN[(index_IN + (n)) % SIZE_IN];
			block1[n] = tmp_scale * tmp_IN;
			n = n + 1;
		}
		tmp_block1 = block1[0];
20046894:	e873004c 	lwi	r3, r19, 76
20046898:	f8730038 	swi	r3, r19, 56
		block1[0] = tmp_block1 + (1 << 12);
2004689c:	e8730038 	lwi	r3, r19, 56
200468a0:	30631000 	addik	r3, r3, 4096
200468a4:	f873004c 	swi	r3, r19, 76
		idct1d(block1, block2);
200468a8:	3093004c 	addik	r4, r19, 76
200468ac:	3073014c 	addik	r3, r19, 332
200468b0:	10a40000 	addk	r5, r4, r0
200468b4:	10c30000 	addk	r6, r3, r0
200468b8:	b0000000 	imm	0
200468bc:	e8740d7c 	lwi	r3, r20, 3452
200468c0:	99fc1800 	brald	r15, r3
200468c4:	80000000 	or	r0, r0, r0
		idct1d(block2, block1);
200468c8:	3093014c 	addik	r4, r19, 332
200468cc:	3073004c 	addik	r3, r19, 76
200468d0:	10a40000 	addk	r5, r4, r0
200468d4:	10c30000 	addk	r6, r3, r0
200468d8:	b0000000 	imm	0
200468dc:	e8940d7c 	lwi	r4, r20, 3452
200468e0:	99fc2000 	brald	r15, r4
200468e4:	80000000 	or	r0, r0, r0
		if (s) {
200468e8:	e873002c 	lwi	r3, r19, 44
200468ec:	bc0300a8 	beqi	r3, 168		// 20046994
			n = 0;
200468f0:	f813001c 	swi	r0, r19, 28
			while (n <= 63) {
200468f4:	b800008c 	bri	140		// 20046980
				tmp_block10 = block1[n];
200468f8:	e873001c 	lwi	r3, r19, 28
200468fc:	64630402 	bslli	r3, r3, 2
20046900:	3093001c 	addik	r4, r19, 28
20046904:	10641800 	addk	r3, r4, r3
20046908:	30630030 	addik	r3, r3, 48
2004690c:	e8630000 	lwi	r3, r3, 0
20046910:	f873003c 	swi	r3, r19, 60
				tmp_clip = clip(tmp_block10 >> 13, -255);
20046914:	e873003c 	lwi	r3, r19, 60
20046918:	6463020d 	bsrai	r3, r3, 13
2004691c:	10a30000 	addk	r5, r3, r0
20046920:	30c0ff01 	addik	r6, r0, -255
20046924:	b0000000 	imm	0
20046928:	e8940d78 	lwi	r4, r20, 3448
2004692c:	99fc2000 	brald	r15, r4
20046930:	80000000 	or	r0, r0, r0
20046934:	f8730040 	swi	r3, r19, 64
				tokens_OUT[(index_OUT + (n)) % SIZE_OUT] = tmp_clip;
20046938:	b0000000 	imm	0
2004693c:	e8740d20 	lwi	r3, r20, 3360
20046940:	e8630000 	lwi	r3, r3, 0
20046944:	e8830004 	lwi	r4, r3, 4
20046948:	b0000000 	imm	0
2004694c:	e8740d38 	lwi	r3, r20, 3384
20046950:	e8a30000 	lwi	r5, r3, 0
20046954:	e873001c 	lwi	r3, r19, 28
20046958:	10651800 	addk	r3, r5, r3
2004695c:	a46301ff 	andi	r3, r3, 511
20046960:	10631800 	addk	r3, r3, r3
20046964:	10641800 	addk	r3, r4, r3
20046968:	e8930040 	lwi	r4, r19, 64
2004696c:	90840061 	sext16	r4, r4
20046970:	f4830000 	shi	r4, r3, 0
				n = n + 1;
20046974:	e873001c 	lwi	r3, r19, 28
20046978:	30630001 	addik	r3, r3, 1
2004697c:	f873001c 	swi	r3, r19, 28
		block1[0] = tmp_block1 + (1 << 12);
		idct1d(block1, block2);
		idct1d(block2, block1);
		if (s) {
			n = 0;
			while (n <= 63) {
20046980:	e893001c 	lwi	r4, r19, 28
20046984:	3060003f 	addik	r3, r0, 63
20046988:	16441801 	cmp	r18, r4, r3
2004698c:	bcb2ff6c 	bgei	r18, -148		// 200468f8
20046990:	b80000a4 	bri	164		// 20046a34
				tmp_clip = clip(tmp_block10 >> 13, -255);
				tokens_OUT[(index_OUT + (n)) % SIZE_OUT] = tmp_clip;
				n = n + 1;
			}
		} else {
			n = 0;
20046994:	f813001c 	swi	r0, r19, 28
			while (n <= 63) {
20046998:	b800008c 	bri	140		// 20046a24
				tmp_block11 = block1[n];
2004699c:	e873001c 	lwi	r3, r19, 28
200469a0:	64630402 	bslli	r3, r3, 2
200469a4:	3093001c 	addik	r4, r19, 28
200469a8:	10641800 	addk	r3, r4, r3
200469ac:	30630030 	addik	r3, r3, 48
200469b0:	e8630000 	lwi	r3, r3, 0
200469b4:	f8730044 	swi	r3, r19, 68
				tmp_clip0 = clip(tmp_block11 >> 13, 0);
200469b8:	e8730044 	lwi	r3, r19, 68
200469bc:	6463020d 	bsrai	r3, r3, 13
200469c0:	10a30000 	addk	r5, r3, r0
200469c4:	10c00000 	addk	r6, r0, r0
200469c8:	b0000000 	imm	0
200469cc:	e8940d78 	lwi	r4, r20, 3448
200469d0:	99fc2000 	brald	r15, r4
200469d4:	80000000 	or	r0, r0, r0
200469d8:	f8730048 	swi	r3, r19, 72
				tokens_OUT[(index_OUT + (n)) % SIZE_OUT] = tmp_clip0;
200469dc:	b0000000 	imm	0
200469e0:	e8740d20 	lwi	r3, r20, 3360
200469e4:	e8630000 	lwi	r3, r3, 0
200469e8:	e8830004 	lwi	r4, r3, 4
200469ec:	b0000000 	imm	0
200469f0:	e8740d38 	lwi	r3, r20, 3384
200469f4:	e8a30000 	lwi	r5, r3, 0
200469f8:	e873001c 	lwi	r3, r19, 28
200469fc:	10651800 	addk	r3, r5, r3
20046a00:	a46301ff 	andi	r3, r3, 511
20046a04:	10631800 	addk	r3, r3, r3
20046a08:	10641800 	addk	r3, r4, r3
20046a0c:	e8930048 	lwi	r4, r19, 72
20046a10:	90840061 	sext16	r4, r4
20046a14:	f4830000 	shi	r4, r3, 0
				n = n + 1;
20046a18:	e873001c 	lwi	r3, r19, 28
20046a1c:	30630001 	addik	r3, r3, 1
20046a20:	f873001c 	swi	r3, r19, 28
				tokens_OUT[(index_OUT + (n)) % SIZE_OUT] = tmp_clip;
				n = n + 1;
			}
		} else {
			n = 0;
			while (n <= 63) {
20046a24:	e893001c 	lwi	r4, r19, 28
20046a28:	3060003f 	addik	r3, r0, 63
20046a2c:	16441801 	cmp	r18, r4, r3
20046a30:	bcb2ff6c 	bgei	r18, -148		// 2004699c
				n = n + 1;
			}
		}
	
		// Update ports indexes
		index_IN += 64;
20046a34:	b0000000 	imm	0
20046a38:	e8740d28 	lwi	r3, r20, 3368
20046a3c:	e8630000 	lwi	r3, r3, 0
20046a40:	30830040 	addik	r4, r3, 64
20046a44:	b0000000 	imm	0
20046a48:	e8740d28 	lwi	r3, r20, 3368
20046a4c:	f8830000 	swi	r4, r3, 0
		index_SIGNED += 1;
20046a50:	b0000000 	imm	0
20046a54:	e8740d30 	lwi	r3, r20, 3376
20046a58:	e8630000 	lwi	r3, r3, 0
20046a5c:	30830001 	addik	r4, r3, 1
20046a60:	b0000000 	imm	0
20046a64:	e8740d30 	lwi	r3, r20, 3376
20046a68:	f8830000 	swi	r4, r3, 0
		index_OUT += 64;
20046a6c:	b0000000 	imm	0
20046a70:	e8740d38 	lwi	r3, r20, 3384
20046a74:	e8630000 	lwi	r3, r3, 0
20046a78:	30830040 	addik	r4, r3, 64
20046a7c:	b0000000 	imm	0
20046a80:	e8740d38 	lwi	r3, r20, 3384
20046a84:	f8830000 	swi	r4, r3, 0
		
		read_end_IN();
20046a88:	b0000000 	imm	0
20046a8c:	e8740d4c 	lwi	r3, r20, 3404
20046a90:	99fc1800 	brald	r15, r3
20046a94:	80000000 	or	r0, r0, r0
		read_end_SIGNED();
20046a98:	b0000000 	imm	0
20046a9c:	e8940d54 	lwi	r4, r20, 3412
20046aa0:	99fc2000 	brald	r15, r4
20046aa4:	80000000 	or	r0, r0, r0
		write_end_OUT();
20046aa8:	b0000000 	imm	0
20046aac:	e8740d5c 	lwi	r3, r20, 3420
20046ab0:	99fc1800 	brald	r15, r3
20046ab4:	80000000 	or	r0, r0, r0
	}
20046ab8:	e9e10000 	lwi	r15, r1, 0
20046abc:	10330000 	addk	r1, r19, r0
20046ac0:	ea61024c 	lwi	r19, r1, 588
20046ac4:	ea810250 	lwi	r20, r1, 592
20046ac8:	30210254 	addik	r1, r1, 596
20046acc:	b60f0008 	rtsd	r15, 8
20046ad0:	80000000 	or	r0, r0, r0

20046ad4 <decoder_texture_idct2d_initialize>:

	
	////////////////////////////////////////////////////////////////////////////////
	// Initializes
	
	void decoder_texture_idct2d_initialize() {
20046ad4:	3021fff0 	addik	r1, r1, -16
20046ad8:	fa610008 	swi	r19, r1, 8
20046adc:	fa81000c 	swi	r20, r1, 12
20046ae0:	12610000 	addk	r19, r1, r0
20046ae4:	96808000 	mfs	r20, rpc
20046ae8:	b000dffb 	imm	-8197
20046aec:	3294ae78 	addik	r20, r20, -20872
		int i = 0;
20046af0:	f8130004 	swi	r0, r19, 4
		
	finished:
		// no read_end/write_end here!
		return;
20046af4:	80000000 	or	r0, r0, r0
	}
20046af8:	10330000 	addk	r1, r19, r0
20046afc:	ea610008 	lwi	r19, r1, 8
20046b00:	ea81000c 	lwi	r20, r1, 12
20046b04:	30210010 	addik	r1, r1, 16
20046b08:	b60f0008 	rtsd	r15, 8
20046b0c:	80000000 	or	r0, r0, r0

20046b10 <decoder_texture_idct2d_scheduler>:

	////////////////////////////////////////////////////////////////////////////////
	// Action scheduler
	int decoder_texture_idct2d_scheduler() {
20046b10:	3021ffd4 	addik	r1, r1, -44
20046b14:	f9e10000 	swi	r15, r1, 0
20046b18:	fa610024 	swi	r19, r1, 36
20046b1c:	fa810028 	swi	r20, r1, 40
20046b20:	12610000 	addk	r19, r1, r0
20046b24:	96808000 	mfs	r20, rpc
20046b28:	b000dffb 	imm	-8197
20046b2c:	3294ae38 	addik	r20, r20, -20936
		int i = 0;
20046b30:	f813001c 	swi	r0, r19, 28
		if(needInit){
20046b34:	b0000000 	imm	0
20046b38:	e8740d44 	lwi	r3, r20, 3396
20046b3c:	e0630000 	lbui	r3, r3, 0
20046b40:	bc03001c 	beqi	r3, 28		// 20046b5c
			decoder_texture_idct2d_initialize();
20046b44:	b000ffff 	imm	-1
20046b48:	b9f4ff8c 	brlid	r15, -116	// 20046ad4 <decoder_texture_idct2d_initialize>
20046b4c:	80000000 	or	r0, r0, r0
			needInit = 0;
20046b50:	b0000000 	imm	0
20046b54:	e8740d44 	lwi	r3, r20, 3396
20046b58:	f0030000 	sbi	r0, r3, 0
		}
		read_IN();
20046b5c:	b0000000 	imm	0
20046b60:	e8740d48 	lwi	r3, r20, 3400
20046b64:	99fc1800 	brald	r15, r3
20046b68:	80000000 	or	r0, r0, r0
		read_SIGNED();
20046b6c:	b0000000 	imm	0
20046b70:	e8940d50 	lwi	r4, r20, 3408
20046b74:	99fc2000 	brald	r15, r4
20046b78:	80000000 	or	r0, r0, r0
		write_OUT();
20046b7c:	b0000000 	imm	0
20046b80:	e8740d58 	lwi	r3, r20, 3416
20046b84:	99fc1800 	brald	r15, r3
20046b88:	80000000 	or	r0, r0, r0
		
	
	
		while (1) {
			// Action loop
			if (numTokens_IN - index_IN >= 64 && numTokens_SIGNED - index_SIGNED >= 1 && isSchedulable_untagged_0()) {
20046b8c:	b0000000 	imm	0
20046b90:	e8740d2c 	lwi	r3, r20, 3372
20046b94:	e8830000 	lwi	r4, r3, 0
20046b98:	b0000000 	imm	0
20046b9c:	e8740d28 	lwi	r3, r20, 3368
20046ba0:	e8630000 	lwi	r3, r3, 0
20046ba4:	14832000 	rsubk	r4, r3, r4
20046ba8:	3060003f 	addik	r3, r0, 63
20046bac:	16441803 	cmpu	r18, r4, r3
20046bb0:	bcb200a4 	bgei	r18, 164		// 20046c54
20046bb4:	b0000000 	imm	0
20046bb8:	e8740d34 	lwi	r3, r20, 3380
20046bbc:	e8830000 	lwi	r4, r3, 0
20046bc0:	b0000000 	imm	0
20046bc4:	e8740d30 	lwi	r3, r20, 3376
20046bc8:	e8630000 	lwi	r3, r3, 0
20046bcc:	88641800 	xor	r3, r4, r3
20046bd0:	bc030084 	beqi	r3, 132		// 20046c54
20046bd4:	b0000000 	imm	0
20046bd8:	e8940d80 	lwi	r4, r20, 3456
20046bdc:	99fc2000 	brald	r15, r4
20046be0:	80000000 	or	r0, r0, r0
20046be4:	bc030070 	beqi	r3, 112		// 20046c54
				int stop = 0;
20046be8:	f8130020 	swi	r0, r19, 32
				if (64 > SIZE_OUT - index_OUT + decoder_texture_idct2d_OUT->read_inds[0]) {
20046bec:	b0000000 	imm	0
20046bf0:	e8740d20 	lwi	r3, r20, 3360
20046bf4:	e8630000 	lwi	r3, r3, 0
20046bf8:	e863000c 	lwi	r3, r3, 12
20046bfc:	e8830000 	lwi	r4, r3, 0
20046c00:	b0000000 	imm	0
20046c04:	e8740d38 	lwi	r3, r20, 3384
20046c08:	e8630000 	lwi	r3, r3, 0
20046c0c:	14632000 	rsubk	r3, r3, r4
20046c10:	30830200 	addik	r4, r3, 512
20046c14:	3060003f 	addik	r3, r0, 63
20046c18:	16441803 	cmpu	r18, r4, r3
20046c1c:	bc52000c 	blti	r18, 12		// 20046c28
					stop = 1;
20046c20:	30600001 	addik	r3, r0, 1
20046c24:	f8730020 	swi	r3, r19, 32
				}
				if (stop != 0) {
20046c28:	e8730020 	lwi	r3, r19, 32
20046c2c:	bc030008 	beqi	r3, 8		// 20046c34
					goto finished;
20046c30:	b8000024 	bri	36		// 20046c54
				}
				untagged_0();
20046c34:	b0000000 	imm	0
20046c38:	e8740d84 	lwi	r3, r20, 3460
20046c3c:	99fc1800 	brald	r15, r3
20046c40:	80000000 	or	r0, r0, r0
				i++;
20046c44:	e873001c 	lwi	r3, r19, 28
20046c48:	30630001 	addik	r3, r3, 1
20046c4c:	f873001c 	swi	r3, r19, 28
			} else {
				goto finished;
			}
		}
20046c50:	b800ff3c 	bri	-196		// 20046b8c
		
	finished:
	
		read_end_IN();
20046c54:	b0000000 	imm	0
20046c58:	e8940d4c 	lwi	r4, r20, 3404
20046c5c:	99fc2000 	brald	r15, r4
20046c60:	80000000 	or	r0, r0, r0
		read_end_SIGNED();
20046c64:	b0000000 	imm	0
20046c68:	e8740d54 	lwi	r3, r20, 3412
20046c6c:	99fc1800 	brald	r15, r3
20046c70:	80000000 	or	r0, r0, r0
		write_end_OUT();
20046c74:	b0000000 	imm	0
20046c78:	e8940d5c 	lwi	r4, r20, 3420
20046c7c:	99fc2000 	brald	r15, r4
20046c80:	80000000 	or	r0, r0, r0
		
		
		return i;
20046c84:	e873001c 	lwi	r3, r19, 28
	}
20046c88:	e9e10000 	lwi	r15, r1, 0
20046c8c:	10330000 	addk	r1, r19, r0
20046c90:	ea610024 	lwi	r19, r1, 36
20046c94:	ea810028 	lwi	r20, r1, 40
20046c98:	3021002c 	addik	r1, r1, 44
20046c9c:	b60f0008 	rtsd	r15, 8
20046ca0:	80000000 	or	r0, r0, r0
20046ca4:	00000055 		r0, r0, r0
20046ca8:	00000056 		r0, r0, r0
20046cac:	00000059 		r0, r0, r0
20046cb0:	00646d63 		r3, r4, r13
20046cb4:	626d6f63 	muli	r19, r13, 28515
20046cb8:	00656e69 		r3, r5, r13
20046cbc:	69746f6d 		r11, r20, r13
20046cc0:	00006e6f 		r0, r0, r13
20046cc4:	70696b73 		r3, r9, r13
20046cc8:	00000068 		r0, r0, r0
20046ccc:	70696b73 		r3, r9, r13
20046cd0:	00000077 		r0, r0, r0
20046cd4:	74786574 		r3, r24, r12
20046cd8:	00657275 		r3, r5, r14

20046cdc <$L235>:
20046cdc:	2000cb20 	addi	r0, r0, -13536
20046ce0:	2000ccf4 	addi	r0, r0, -13068
20046ce4:	2000ce2c 	addi	r0, r0, -12756
20046ce8:	2000cf3c 	addi	r0, r0, -12484
20046cec:	2000cfc8 	addi	r0, r0, -12344
20046cf0:	2000d054 	addi	r0, r0, -12204
20046cf4:	00646d63 		r3, r4, r13
20046cf8:	5f746567 		r27, r20, r12
20046cfc:	00685f77 		r3, r8, r11
20046d00:	64616572 	bslli	r3, r1, 18
20046d04:	0062665f 		r3, r2, r12
20046d08:	64616572 	bslli	r3, r1, 18
20046d0c:	00766d5f 		r3, r22, r13
20046d10:	006e7572 		r3, r14, r14
20046d14:	72617473 		r19, r1, r14
20046d18:	00000074 		r0, r0, r0
20046d1c:	61766461 	muli	r11, r22, 25697
20046d20:	0065636e 		r3, r5, r12
20046d24:	706d6f63 		r3, r13, r13
20046d28:	00657475 		r3, r5, r14
20046d2c:	705f6f64 		r2, r31, r13
20046d30:	5f646572 		r27, r4, r12
20046d34:	00000078 		r0, r0, r0
20046d38:	705f6f64 		r2, r31, r13
20046d3c:	5f646572 		r27, r4, r12
20046d40:	00000079 		r0, r0, r0
20046d44:	5f746567 		r27, r20, r12
20046d48:	5f67616d 		r27, r7, r12
20046d4c:	00000078 		r0, r0, r0
20046d50:	5f746567 		r27, r20, r12
20046d54:	5f67616d 		r27, r7, r12
20046d58:	00000079 		r0, r0, r0
20046d5c:	5f746567 		r27, r20, r12
20046d60:	64657270 	bsrai	r3, r5, 16
20046d64:	0000705f 		r0, r0, r14
20046d68:	5f746567 		r27, r20, r12
20046d6c:	64657270 	bsrai	r3, r5, 16
20046d70:	0031705f 		r1, r17, r14
20046d74:	5f746567 		r27, r20, r12
20046d78:	64657270 	bsrai	r3, r5, 16
20046d7c:	0000785f 		r0, r0, r15
20046d80:	5f746567 		r27, r20, r12
20046d84:	64657270 	bsrai	r3, r5, 16
20046d88:	0031785f 		r1, r17, r15
20046d8c:	5f746567 		r27, r20, r12
20046d90:	64657270 	bsrai	r3, r5, 16
20046d94:	0032785f 		r1, r18, r15
20046d98:	5f746567 		r27, r20, r12
20046d9c:	64657270 	bsrai	r3, r5, 16
20046da0:	0000795f 		r0, r0, r15
20046da4:	5f746567 		r27, r20, r12
20046da8:	64657270 	bsrai	r3, r5, 16
20046dac:	0031795f 		r1, r17, r15
20046db0:	5f746567 		r27, r20, r12
20046db4:	64657270 	bsrai	r3, r5, 16
20046db8:	0032795f 		r1, r18, r15
20046dbc:	5f746567 		r27, r20, r12
20046dc0:	5f736572 		r27, r19, r12
20046dc4:	00000078 		r0, r0, r0
20046dc8:	5f746567 		r27, r20, r12
20046dcc:	5f736572 		r27, r19, r12
20046dd0:	00615f78 		r3, r1, r11
20046dd4:	5f746567 		r27, r20, r12
20046dd8:	5f736572 		r27, r19, r12
20046ddc:	00625f78 		r3, r2, r11
20046de0:	5f746567 		r27, r20, r12
20046de4:	5f736572 		r27, r19, r12
20046de8:	00635f78 		r3, r3, r11
20046dec:	5f746567 		r27, r20, r12
20046df0:	5f736572 		r27, r19, r12
20046df4:	00645f78 		r3, r4, r11
20046df8:	5f746567 		r27, r20, r12
20046dfc:	5f736572 		r27, r19, r12
20046e00:	00655f78 		r3, r5, r11
20046e04:	5f746567 		r27, r20, r12
20046e08:	5f736572 		r27, r19, r12
20046e0c:	00000079 		r0, r0, r0
20046e10:	5f746567 		r27, r20, r12
20046e14:	5f736572 		r27, r19, r12
20046e18:	00615f79 		r3, r1, r11
20046e1c:	5f746567 		r27, r20, r12
20046e20:	5f736572 		r27, r19, r12
20046e24:	00625f79 		r3, r2, r11
20046e28:	5f746567 		r27, r20, r12
20046e2c:	5f736572 		r27, r19, r12
20046e30:	00635f79 		r3, r3, r11
20046e34:	5f746567 		r27, r20, r12
20046e38:	5f736572 		r27, r19, r12
20046e3c:	00645f79 		r3, r4, r11
20046e40:	5f746567 		r27, r20, r12
20046e44:	5f736572 		r27, r19, r12
20046e48:	00655f79 		r3, r5, r11
20046e4c:	68746567 		r3, r20, r12
20046e50:	
20046e74 <$L320>:
20046e74:	2001d628 	addi	r0, r1, -10712
20046e78:	2001d68c 	addi	r0, r1, -10612
20046e7c:	2001d76c 	addi	r0, r1, -10388
20046e80:	2001d7d8 	addi	r0, r1, -10280
20046e84:	2001d844 	addi	r0, r1, -10172
20046e88:	2001d8d0 	addi	r0, r1, -10032
20046e8c:	2001d95c 	addi	r0, r1, -9892
20046e90:	2001d9e8 	addi	r0, r1, -9752
20046e94:	2001da74 	addi	r0, r1, -9612
20046e98:	2001dae0 	addi	r0, r1, -9504
20046e9c:	2001db4c 	addi	r0, r1, -9396
20046ea0:	2001dbb8 	addi	r0, r1, -9288
20046ea4:	2001dc24 	addi	r0, r1, -9180
20046ea8:	2001dc90 	addi	r0, r1, -9072
20046eac:	2001dcfc 	addi	r0, r1, -8964
20046eb0:	2001dd68 	addi	r0, r1, -8856
20046eb4:	2001ddd4 	addi	r0, r1, -8748
20046eb8:	2001de60 	addi	r0, r1, -8608
20046ebc:	2001decc 	addi	r0, r1, -8500
20046ec0:	2001df38 	addi	r0, r1, -8392
20046ec4:	2001dfa4 	addi	r0, r1, -8284
20046ec8:	2001e010 	addi	r0, r1, -8176
20046ecc:	2001e07c 	addi	r0, r1, -8068
20046ed0:	2001e108 	addi	r0, r1, -7928
20046ed4:	2001e174 	addi	r0, r1, -7820
20046ed8:	2001e1e0 	addi	r0, r1, -7712
20046edc:	2001e24c 	addi	r0, r1, -7604
20046ee0:	2001e2d8 	addi	r0, r1, -7464
20046ee4:	2001e364 	addi	r0, r1, -7324
20046ee8:	2001e4d8 	addi	r0, r1, -6952
20046eec:	2001e600 	addi	r0, r1, -6656
20046ef0:	68746567 		r3, r20, r12
20046ef4:	
20046f08 <vldTables_mcbpc_intra_table>:
20046f08:	061400ff 06340624 04040404 04040404     ....$.4.........
20046f18:	03130313 03130313 03130313 03130313     ................
20046f28:	03230323 03230323 03230323 03230323     #.#.#.#.#.#.#.#.
20046f38:	03330333 03330333 03330333 03330333     3.3.3.3.3.3.3.3.
20046f48:	01030103 01030103 01030103 01030103     ................
20046f58:	01030103 01030103 01030103 01030103     ................
20046f68:	01030103 01030103 01030103 01030103     ................
20046f78:	01030103 01030103 01030103 01030103     ................

20046f88 <vldTables_mcbpc_inter_table>:
20046f88:	0000ffff 000900ff 00090034 00090024     ........4...$...
20046f98:	00090014 00090031 00080023 00080023     ....1...#...#...
20046fa8:	00080013 00080013 00080032 00080032     ........2...2...
20046fb8:	00070033 00070033 00070033 00070033     3...3...3...3...
20046fc8:	00070022 00070022 00070022 00070022     "..."..."..."...
20046fd8:	00070012 00070012 00070012 00070012     ................
20046fe8:	00070021 00070021 00070021 00070021     !...!...!...!...
20046ff8:	00070011 00070011 00070011 00070011     ................
20047008:	00060004 00060004 00060004 00060004     ................
20047018:	00060004 00060004 00060004 00060004     ................
20047028:	00060030 00060030 00060030 00060030     0...0...0...0...
20047038:	00060030 00060030 00060030 00060030     0...0...0...0...
20047048:	00050003 00050003 00050003 00050003     ................
20047058:	00050003 00050003 00050003 00050003     ................
20047068:	00050003 00050003 00050003 00050003     ................
20047078:	00050003 00050003 00050003 00050003     ................
20047088:	00040020 00040020 00040020 00040020      ... ... ... ...
20047098:	00040020 00040020 00040020 00040020      ... ... ... ...
200470a8:	00040020 00040020 00040020 00040020      ... ... ... ...
200470b8:	00040020 00040020 00040020 00040020      ... ... ... ...
200470c8:	00040020 00040020 00040020 00040020      ... ... ... ...
200470d8:	00040020 00040020 00040020 00040020      ... ... ... ...
200470e8:	00040020 00040020 00040020 00040020      ... ... ... ...
200470f8:	00040020 00040020 00040020 00040020      ... ... ... ...
20047108:	00040010 00040010 00040010 00040010     ................
20047118:	00040010 00040010 00040010 00040010     ................
20047128:	00040010 00040010 00040010 00040010     ................
20047138:	00040010 00040010 00040010 00040010     ................
20047148:	00040010 00040010 00040010 00040010     ................
20047158:	00040010 00040010 00040010 00040010     ................
20047168:	00040010 00040010 00040010 00040010     ................
20047178:	00040010 00040010 00040010 00040010     ................
20047188:	00030002 00030002 00030002 00030002     ................
20047198:	00030002 00030002 00030002 00030002     ................
200471a8:	00030002 00030002 00030002 00030002     ................
200471b8:	00030002 00030002 00030002 00030002     ................
200471c8:	00030002 00030002 00030002 00030002     ................
200471d8:	00030002 00030002 00030002 00030002     ................
200471e8:	00030002 00030002 00030002 00030002     ................
200471f8:	00030002 00030002 00030002 00030002     ................
20047208:	00030002 00030002 00030002 00030002     ................
20047218:	00030002 00030002 00030002 00030002     ................
20047228:	00030002 00030002 00030002 00030002     ................
20047238:	00030002 00030002 00030002 00030002     ................
20047248:	00030002 00030002 00030002 00030002     ................
20047258:	00030002 00030002 00030002 00030002     ................
20047268:	00030002 00030002 00030002 00030002     ................
20047278:	00030002 00030002 00030002 00030002     ................
20047288:	00030001 00030001 00030001 00030001     ................
20047298:	00030001 00030001 00030001 00030001     ................
200472a8:	00030001 00030001 00030001 00030001     ................
200472b8:	00030001 00030001 00030001 00030001     ................
200472c8:	00030001 00030001 00030001 00030001     ................
200472d8:	00030001 00030001 00030001 00030001     ................
200472e8:	00030001 00030001 00030001 00030001     ................
200472f8:	00030001 00030001 00030001 00030001     ................
20047308:	00030001 00030001 00030001 00030001     ................
20047318:	00030001 00030001 00030001 00030001     ................
20047328:	00030001 00030001 00030001 00030001     ................
20047338:	00030001 00030001 00030001 00030001     ................
20047348:	00030001 00030001 00030001 00030001     ................
20047358:	00030001 00030001 00030001 00030001     ................
20047368:	00030001 00030001 00030001 00030001     ................
20047378:	00030001 00030001 00030001 00030001     ................
20047388:	00010000                                ....

2004738c <vldTables_cbpy_table>:
2004738c:	00ff00ff 06090606 05080508 05040504     ................
2004739c:	05020502 05010501 04000400 04000400     ................
200473ac:	040c040c 040c040c 040a040a 040a040a     ................
200473bc:	040e040e 040e040e 04050405 04050405     ................
200473cc:	040d040d 040d040d 04030403 04030403     ................
200473dc:	040b040b 040b040b 04070407 04070407     ................
200473ec:	020f020f 020f020f 020f020f 020f020f     ................
200473fc:	020f020f 020f020f 020f020f 020f020f     ................

2004740c <vldTables_dc_lum_tab>:
2004740c:	03040000 03000303 02020202 02010201     ................

2004741c <vldTables_DCT3D>:
	...
2004743c:	0201010b 0201010b 0300010b 0300010b     ................
2004744c:	0b00000b 0b00000b 0a00000b 0a00000b     ................
2004745c:	011c010a 011c010a 011c010a 011c010a     ................
2004746c:	011b010a 011b010a 011b010a 011b010a     ................
2004747c:	011a010a 011a010a 011a010a 011a010a     ................
2004748c:	0119010a 0119010a 0119010a 0119010a     ................
2004749c:	0209000a 0209000a 0209000a 0209000a     ................
200474ac:	0208000a 0208000a 0208000a 0208000a     ................
200474bc:	0207000a 0207000a 0207000a 0207000a     ................
200474cc:	0206000a 0206000a 0206000a 0206000a     ................
200474dc:	0205000a 0205000a 0205000a 0205000a     ................
200474ec:	0303000a 0303000a 0303000a 0303000a     ................
200474fc:	0302000a 0302000a 0302000a 0302000a     ................
2004750c:	0401000a 0401000a 0401000a 0401000a     ................
2004751c:	0c00000b 0c00000b 0501000b 0501000b     ................
2004752c:	0117000b 0117000b 0118000b 0118000b     ................
2004753c:	011d010b 011d010b 011e010b 011e010b     ................
2004754c:	011f010b 011f010b 0120010b 0120010b     .......... ... .
2004755c:	0601000c 0402000c 0304000c 0305000c     ................
2004756c:	0306000c 020a000c 0119000c 011a000c     ................
2004757c:	0121010c 0122010c 0123010c 0124010c     ..!..."...#...$.
2004758c:	0125010c 0126010c 0127010c 0128010c     ..%...&...'...(.
	...
2004761c:	0900000a 0900000a 0900000a 0900000a     ................
2004762c:	0800000a 0800000a 0800000a 0800000a     ................
2004763c:	01180109 01180109 01180109 01180109     ................
2004764c:	01180109 01180109 01180109 01180109     ................
2004765c:	01170109 01170109 01170109 01170109     ................
2004766c:	01170109 01170109 01170109 01170109     ................
2004767c:	01160109 01160109 01160109 01160109     ................
2004768c:	01160109 01160109 01160109 01160109     ................
2004769c:	01150109 01150109 01150109 01150109     ................
200476ac:	01150109 01150109 01150109 01150109     ................
200476bc:	01140109 01140109 01140109 01140109     ................
200476cc:	01140109 01140109 01140109 01140109     ................
200476dc:	01130109 01130109 01130109 01130109     ................
200476ec:	01130109 01130109 01130109 01130109     ................
200476fc:	01120109 01120109 01120109 01120109     ................
2004770c:	01120109 01120109 01120109 01120109     ................
2004771c:	01110109 01110109 01110109 01110109     ................
2004772c:	01110109 01110109 01110109 01110109     ................
2004773c:	02000109 02000109 02000109 02000109     ................
2004774c:	02000109 02000109 02000109 02000109     ................
2004775c:	01160009 01160009 01160009 01160009     ................
2004776c:	01160009 01160009 01160009 01160009     ................
2004777c:	01150009 01150009 01150009 01150009     ................
2004778c:	01150009 01150009 01150009 01150009     ................
2004779c:	01140009 01140009 01140009 01140009     ................
200477ac:	01140009 01140009 01140009 01140009     ................
200477bc:	01130009 01130009 01130009 01130009     ................
200477cc:	01130009 01130009 01130009 01130009     ................
200477dc:	01120009 01120009 01120009 01120009     ................
200477ec:	01120009 01120009 01120009 01120009     ................
200477fc:	01110009 01110009 01110009 01110009     ................
2004780c:	01110009 01110009 01110009 01110009     ................
2004781c:	01100009 01100009 01100009 01100009     ................
2004782c:	01100009 01100009 01100009 01100009     ................
2004783c:	010f0009 010f0009 010f0009 010f0009     ................
2004784c:	010f0009 010f0009 010f0009 010f0009     ................
2004785c:	02040009 02040009 02040009 02040009     ................
2004786c:	02040009 02040009 02040009 02040009     ................
2004787c:	02030009 02030009 02030009 02030009     ................
2004788c:	02030009 02030009 02030009 02030009     ................
2004789c:	07000009 07000009 07000009 07000009     ................
200478ac:	07000009 07000009 07000009 07000009     ................
200478bc:	06000009 06000009 06000009 06000009     ................
200478cc:	06000009 06000009 06000009 06000009     ................
200478dc:	01100108 01100108 01100108 01100108     ................
200478ec:	01100108 01100108 01100108 01100108     ................
200478fc:	01100108 01100108 01100108 01100108     ................
2004790c:	01100108 01100108 01100108 01100108     ................
2004791c:	010f0108 010f0108 010f0108 010f0108     ................
2004792c:	010f0108 010f0108 010f0108 010f0108     ................
2004793c:	010f0108 010f0108 010f0108 010f0108     ................
2004794c:	010f0108 010f0108 010f0108 010f0108     ................
2004795c:	010e0108 010e0108 010e0108 010e0108     ................
2004796c:	010e0108 010e0108 010e0108 010e0108     ................
2004797c:	010e0108 010e0108 010e0108 010e0108     ................
2004798c:	010e0108 010e0108 010e0108 010e0108     ................
2004799c:	010d0108 010d0108 010d0108 010d0108     ................
200479ac:	010d0108 010d0108 010d0108 010d0108     ................
200479bc:	010d0108 010d0108 010d0108 010d0108     ................
200479cc:	010d0108 010d0108 010d0108 010d0108     ................
200479dc:	010c0108 010c0108 010c0108 010c0108     ................
200479ec:	010c0108 010c0108 010c0108 010c0108     ................
200479fc:	010c0108 010c0108 010c0108 010c0108     ................
20047a0c:	010c0108 010c0108 010c0108 010c0108     ................
20047a1c:	010b0108 010b0108 010b0108 010b0108     ................
20047a2c:	010b0108 010b0108 010b0108 010b0108     ................
20047a3c:	010b0108 010b0108 010b0108 010b0108     ................
20047a4c:	010b0108 010b0108 010b0108 010b0108     ................
20047a5c:	010a0108 010a0108 010a0108 010a0108     ................
20047a6c:	010a0108 010a0108 010a0108 010a0108     ................
20047a7c:	010a0108 010a0108 010a0108 010a0108     ................
20047a8c:	010a0108 010a0108 010a0108 010a0108     ................
20047a9c:	01090108 01090108 01090108 01090108     ................
20047aac:	01090108 01090108 01090108 01090108     ................
20047abc:	01090108 01090108 01090108 01090108     ................
20047acc:	01090108 01090108 01090108 01090108     ................
20047adc:	010e0008 010e0008 010e0008 010e0008     ................
20047aec:	010e0008 010e0008 010e0008 010e0008     ................
20047afc:	010e0008 010e0008 010e0008 010e0008     ................
20047b0c:	010e0008 010e0008 010e0008 010e0008     ................
20047b1c:	010d0008 010d0008 010d0008 010d0008     ................
20047b2c:	010d0008 010d0008 010d0008 010d0008     ................
20047b3c:	010d0008 010d0008 010d0008 010d0008     ................
20047b4c:	010d0008 010d0008 010d0008 010d0008     ................
20047b5c:	02020008 02020008 02020008 02020008     ................
20047b6c:	02020008 02020008 02020008 02020008     ................
20047b7c:	02020008 02020008 02020008 02020008     ................
20047b8c:	02020008 02020008 02020008 02020008     ................
20047b9c:	03010008 03010008 03010008 03010008     ................
20047bac:	03010008 03010008 03010008 03010008     ................
20047bbc:	03010008 03010008 03010008 03010008     ................
20047bcc:	03010008 03010008 03010008 03010008     ................
20047bdc:	05000008 05000008 05000008 05000008     ................
20047bec:	05000008 05000008 05000008 05000008     ................
20047bfc:	05000008 05000008 05000008 05000008     ................
20047c0c:	05000008 05000008 05000008 05000008     ................
20047c1c:	01080107 01080107 01080107 01080107     ................
20047c2c:	01080107 01080107 01080107 01080107     ................
20047c3c:	01080107 01080107 01080107 01080107     ................
20047c4c:	01080107 01080107 01080107 01080107     ................
20047c5c:	01080107 01080107 01080107 01080107     ................
20047c6c:	01080107 01080107 01080107 01080107     ................
20047c7c:	01080107 01080107 01080107 01080107     ................
20047c8c:	01080107 01080107 01080107 01080107     ................
20047c9c:	01070107 01070107 01070107 01070107     ................
20047cac:	01070107 01070107 01070107 01070107     ................
20047cbc:	01070107 01070107 01070107 01070107     ................
20047ccc:	01070107 01070107 01070107 01070107     ................
20047cdc:	01070107 01070107 01070107 01070107     ................
20047cec:	01070107 01070107 01070107 01070107     ................
20047cfc:	01070107 01070107 01070107 01070107     ................
20047d0c:	01070107 01070107 01070107 01070107     ................
20047d1c:	01060107 01060107 01060107 01060107     ................
20047d2c:	01060107 01060107 01060107 01060107     ................
20047d3c:	01060107 01060107 01060107 01060107     ................
20047d4c:	01060107 01060107 01060107 01060107     ................
20047d5c:	01060107 01060107 01060107 01060107     ................
20047d6c:	01060107 01060107 01060107 01060107     ................
20047d7c:	01060107 01060107 01060107 01060107     ................
20047d8c:	01060107 01060107 01060107 01060107     ................
20047d9c:	01050107 01050107 01050107 01050107     ................
20047dac:	01050107 01050107 01050107 01050107     ................
20047dbc:	01050107 01050107 01050107 01050107     ................
20047dcc:	01050107 01050107 01050107 01050107     ................
20047ddc:	01050107 01050107 01050107 01050107     ................
20047dec:	01050107 01050107 01050107 01050107     ................
20047dfc:	01050107 01050107 01050107 01050107     ................
20047e0c:	01050107 01050107 01050107 01050107     ................
20047e1c:	010c0007 010c0007 010c0007 010c0007     ................
20047e2c:	010c0007 010c0007 010c0007 010c0007     ................
20047e3c:	010c0007 010c0007 010c0007 010c0007     ................
20047e4c:	010c0007 010c0007 010c0007 010c0007     ................
20047e5c:	010c0007 010c0007 010c0007 010c0007     ................
20047e6c:	010c0007 010c0007 010c0007 010c0007     ................
20047e7c:	010c0007 010c0007 010c0007 010c0007     ................
20047e8c:	010c0007 010c0007 010c0007 010c0007     ................
20047e9c:	010b0007 010b0007 010b0007 010b0007     ................
20047eac:	010b0007 010b0007 010b0007 010b0007     ................
20047ebc:	010b0007 010b0007 010b0007 010b0007     ................
20047ecc:	010b0007 010b0007 010b0007 010b0007     ................
20047edc:	010b0007 010b0007 010b0007 010b0007     ................
20047eec:	010b0007 010b0007 010b0007 010b0007     ................
20047efc:	010b0007 010b0007 010b0007 010b0007     ................
20047f0c:	010b0007 010b0007 010b0007 010b0007     ................
20047f1c:	010a0007 010a0007 010a0007 010a0007     ................
20047f2c:	010a0007 010a0007 010a0007 010a0007     ................
20047f3c:	010a0007 010a0007 010a0007 010a0007     ................
20047f4c:	010a0007 010a0007 010a0007 010a0007     ................
20047f5c:	010a0007 010a0007 010a0007 010a0007     ................
20047f6c:	010a0007 010a0007 010a0007 010a0007     ................
20047f7c:	010a0007 010a0007 010a0007 010a0007     ................
20047f8c:	010a0007 010a0007 010a0007 010a0007     ................
20047f9c:	04000007 04000007 04000007 04000007     ................
20047fac:	04000007 04000007 04000007 04000007     ................
20047fbc:	04000007 04000007 04000007 04000007     ................
20047fcc:	04000007 04000007 04000007 04000007     ................
20047fdc:	04000007 04000007 04000007 04000007     ................
20047fec:	04000007 04000007 04000007 04000007     ................
20047ffc:	04000007 04000007 04000007 04000007     ................
2004800c:	04000007 04000007 04000007 04000007     ................
2004801c:	01040106 01040106 01040106 01040106     ................
2004802c:	01040106 01040106 01040106 01040106     ................
2004803c:	01040106 01040106 01040106 01040106     ................
2004804c:	01040106 01040106 01040106 01040106     ................
2004805c:	01040106 01040106 01040106 01040106     ................
2004806c:	01040106 01040106 01040106 01040106     ................
2004807c:	01040106 01040106 01040106 01040106     ................
2004808c:	01040106 01040106 01040106 01040106     ................
2004809c:	01040106 01040106 01040106 01040106     ................
200480ac:	01040106 01040106 01040106 01040106     ................
200480bc:	01040106 01040106 01040106 01040106     ................
200480cc:	01040106 01040106 01040106 01040106     ................
200480dc:	01040106 01040106 01040106 01040106     ................
200480ec:	01040106 01040106 01040106 01040106     ................
200480fc:	01040106 01040106 01040106 01040106     ................
2004810c:	01040106 01040106 01040106 01040106     ................
2004811c:	01030106 01030106 01030106 01030106     ................
2004812c:	01030106 01030106 01030106 01030106     ................
2004813c:	01030106 01030106 01030106 01030106     ................
2004814c:	01030106 01030106 01030106 01030106     ................
2004815c:	01030106 01030106 01030106 01030106     ................
2004816c:	01030106 01030106 01030106 01030106     ................
2004817c:	01030106 01030106 01030106 01030106     ................
2004818c:	01030106 01030106 01030106 01030106     ................
2004819c:	01030106 01030106 01030106 01030106     ................
200481ac:	01030106 01030106 01030106 01030106     ................
200481bc:	01030106 01030106 01030106 01030106     ................
200481cc:	01030106 01030106 01030106 01030106     ................
200481dc:	01030106 01030106 01030106 01030106     ................
200481ec:	01030106 01030106 01030106 01030106     ................
200481fc:	01030106 01030106 01030106 01030106     ................
2004820c:	01030106 01030106 01030106 01030106     ................
2004821c:	01020106 01020106 01020106 01020106     ................
2004822c:	01020106 01020106 01020106 01020106     ................
2004823c:	01020106 01020106 01020106 01020106     ................
2004824c:	01020106 01020106 01020106 01020106     ................
2004825c:	01020106 01020106 01020106 01020106     ................
2004826c:	01020106 01020106 01020106 01020106     ................
2004827c:	01020106 01020106 01020106 01020106     ................
2004828c:	01020106 01020106 01020106 01020106     ................
2004829c:	01020106 01020106 01020106 01020106     ................
200482ac:	01020106 01020106 01020106 01020106     ................
200482bc:	01020106 01020106 01020106 01020106     ................
200482cc:	01020106 01020106 01020106 01020106     ................
200482dc:	01020106 01020106 01020106 01020106     ................
200482ec:	01020106 01020106 01020106 01020106     ................
200482fc:	01020106 01020106 01020106 01020106     ................
2004830c:	01020106 01020106 01020106 01020106     ................
2004831c:	01010106 01010106 01010106 01010106     ................
2004832c:	01010106 01010106 01010106 01010106     ................
2004833c:	01010106 01010106 01010106 01010106     ................
2004834c:	01010106 01010106 01010106 01010106     ................
2004835c:	01010106 01010106 01010106 01010106     ................
2004836c:	01010106 01010106 01010106 01010106     ................
2004837c:	01010106 01010106 01010106 01010106     ................
2004838c:	01010106 01010106 01010106 01010106     ................
2004839c:	01010106 01010106 01010106 01010106     ................
200483ac:	01010106 01010106 01010106 01010106     ................
200483bc:	01010106 01010106 01010106 01010106     ................
200483cc:	01010106 01010106 01010106 01010106     ................
200483dc:	01010106 01010106 01010106 01010106     ................
200483ec:	01010106 01010106 01010106 01010106     ................
200483fc:	01010106 01010106 01010106 01010106     ................
2004840c:	01010106 01010106 01010106 01010106     ................
2004841c:	01090006 01090006 01090006 01090006     ................
2004842c:	01090006 01090006 01090006 01090006     ................
2004843c:	01090006 01090006 01090006 01090006     ................
2004844c:	01090006 01090006 01090006 01090006     ................
2004845c:	01090006 01090006 01090006 01090006     ................
2004846c:	01090006 01090006 01090006 01090006     ................
2004847c:	01090006 01090006 01090006 01090006     ................
2004848c:	01090006 01090006 01090006 01090006     ................
2004849c:	01090006 01090006 01090006 01090006     ................
200484ac:	01090006 01090006 01090006 01090006     ................
200484bc:	01090006 01090006 01090006 01090006     ................
200484cc:	01090006 01090006 01090006 01090006     ................
200484dc:	01090006 01090006 01090006 01090006     ................
200484ec:	01090006 01090006 01090006 01090006     ................
200484fc:	01090006 01090006 01090006 01090006     ................
2004850c:	01090006 01090006 01090006 01090006     ................
2004851c:	01080006 01080006 01080006 01080006     ................
2004852c:	01080006 01080006 01080006 01080006     ................
2004853c:	01080006 01080006 01080006 01080006     ................
2004854c:	01080006 01080006 01080006 01080006     ................
2004855c:	01080006 01080006 01080006 01080006     ................
2004856c:	01080006 01080006 01080006 01080006     ................
2004857c:	01080006 01080006 01080006 01080006     ................
2004858c:	01080006 01080006 01080006 01080006     ................
2004859c:	01080006 01080006 01080006 01080006     ................
200485ac:	01080006 01080006 01080006 01080006     ................
200485bc:	01080006 01080006 01080006 01080006     ................
200485cc:	01080006 01080006 01080006 01080006     ................
200485dc:	01080006 01080006 01080006 01080006     ................
200485ec:	01080006 01080006 01080006 01080006     ................
200485fc:	01080006 01080006 01080006 01080006     ................
2004860c:	01080006 01080006 01080006 01080006     ................
2004861c:	01070006 01070006 01070006 01070006     ................
2004862c:	01070006 01070006 01070006 01070006     ................
2004863c:	01070006 01070006 01070006 01070006     ................
2004864c:	01070006 01070006 01070006 01070006     ................
2004865c:	01070006 01070006 01070006 01070006     ................
2004866c:	01070006 01070006 01070006 01070006     ................
2004867c:	01070006 01070006 01070006 01070006     ................
2004868c:	01070006 01070006 01070006 01070006     ................
2004869c:	01070006 01070006 01070006 01070006     ................
200486ac:	01070006 01070006 01070006 01070006     ................
200486bc:	01070006 01070006 01070006 01070006     ................
200486cc:	01070006 01070006 01070006 01070006     ................
200486dc:	01070006 01070006 01070006 01070006     ................
200486ec:	01070006 01070006 01070006 01070006     ................
200486fc:	01070006 01070006 01070006 01070006     ................
2004870c:	01070006 01070006 01070006 01070006     ................
2004871c:	01060006 01060006 01060006 01060006     ................
2004872c:	01060006 01060006 01060006 01060006     ................
2004873c:	01060006 01060006 01060006 01060006     ................
2004874c:	01060006 01060006 01060006 01060006     ................
2004875c:	01060006 01060006 01060006 01060006     ................
2004876c:	01060006 01060006 01060006 01060006     ................
2004877c:	01060006 01060006 01060006 01060006     ................
2004878c:	01060006 01060006 01060006 01060006     ................
2004879c:	01060006 01060006 01060006 01060006     ................
200487ac:	01060006 01060006 01060006 01060006     ................
200487bc:	01060006 01060006 01060006 01060006     ................
200487cc:	01060006 01060006 01060006 01060006     ................
200487dc:	01060006 01060006 01060006 01060006     ................
200487ec:	01060006 01060006 01060006 01060006     ................
200487fc:	01060006 01060006 01060006 01060006     ................
2004880c:	01060006 01060006 01060006 01060006     ................
2004881c:	02010006 02010006 02010006 02010006     ................
2004882c:	02010006 02010006 02010006 02010006     ................
2004883c:	02010006 02010006 02010006 02010006     ................
2004884c:	02010006 02010006 02010006 02010006     ................
2004885c:	02010006 02010006 02010006 02010006     ................
2004886c:	02010006 02010006 02010006 02010006     ................
2004887c:	02010006 02010006 02010006 02010006     ................
2004888c:	02010006 02010006 02010006 02010006     ................
2004889c:	02010006 02010006 02010006 02010006     ................
200488ac:	02010006 02010006 02010006 02010006     ................
200488bc:	02010006 02010006 02010006 02010006     ................
200488cc:	02010006 02010006 02010006 02010006     ................
200488dc:	02010006 02010006 02010006 02010006     ................
200488ec:	02010006 02010006 02010006 02010006     ................
200488fc:	02010006 02010006 02010006 02010006     ................
2004890c:	02010006 02010006 02010006 02010006     ................
2004891c:	03000006 03000006 03000006 03000006     ................
2004892c:	03000006 03000006 03000006 03000006     ................
2004893c:	03000006 03000006 03000006 03000006     ................
2004894c:	03000006 03000006 03000006 03000006     ................
2004895c:	03000006 03000006 03000006 03000006     ................
2004896c:	03000006 03000006 03000006 03000006     ................
2004897c:	03000006 03000006 03000006 03000006     ................
2004898c:	03000006 03000006 03000006 03000006     ................
2004899c:	03000006 03000006 03000006 03000006     ................
200489ac:	03000006 03000006 03000006 03000006     ................
200489bc:	03000006 03000006 03000006 03000006     ................
200489cc:	03000006 03000006 03000006 03000006     ................
200489dc:	03000006 03000006 03000006 03000006     ................
200489ec:	03000006 03000006 03000006 03000006     ................
200489fc:	03000006 03000006 03000006 03000006     ................
20048a0c:	03000006 03000006 03000006 03000006     ................
20048a1c:	01050005 01050005 01050005 01050005     ................
20048a2c:	01050005 01050005 01050005 01050005     ................
20048a3c:	01050005 01050005 01050005 01050005     ................
20048a4c:	01050005 01050005 01050005 01050005     ................
20048a5c:	01050005 01050005 01050005 01050005     ................
20048a6c:	01050005 01050005 01050005 01050005     ................
20048a7c:	01050005 01050005 01050005 01050005     ................
20048a8c:	01050005 01050005 01050005 01050005     ................
20048a9c:	01050005 01050005 01050005 01050005     ................
20048aac:	01050005 01050005 01050005 01050005     ................
20048abc:	01050005 01050005 01050005 01050005     ................
20048acc:	01050005 01050005 01050005 01050005     ................
20048adc:	01050005 01050005 01050005 01050005     ................
20048aec:	01050005 01050005 01050005 01050005     ................
20048afc:	01050005 01050005 01050005 01050005     ................
20048b0c:	01050005 01050005 01050005 01050005     ................
20048b1c:	01050005 01050005 01050005 01050005     ................
20048b2c:	01050005 01050005 01050005 01050005     ................
20048b3c:	01050005 01050005 01050005 01050005     ................
20048b4c:	01050005 01050005 01050005 01050005     ................
20048b5c:	01050005 01050005 01050005 01050005     ................
20048b6c:	01050005 01050005 01050005 01050005     ................
20048b7c:	01050005 01050005 01050005 01050005     ................
20048b8c:	01050005 01050005 01050005 01050005     ................
20048b9c:	01050005 01050005 01050005 01050005     ................
20048bac:	01050005 01050005 01050005 01050005     ................
20048bbc:	01050005 01050005 01050005 01050005     ................
20048bcc:	01050005 01050005 01050005 01050005     ................
20048bdc:	01050005 01050005 01050005 01050005     ................
20048bec:	01050005 01050005 01050005 01050005     ................
20048bfc:	01050005 01050005 01050005 01050005     ................
20048c0c:	01050005 01050005 01050005 01050005     ................
20048c1c:	01040005 01040005 01040005 01040005     ................
20048c2c:	01040005 01040005 01040005 01040005     ................
20048c3c:	01040005 01040005 01040005 01040005     ................
20048c4c:	01040005 01040005 01040005 01040005     ................
20048c5c:	01040005 01040005 01040005 01040005     ................
20048c6c:	01040005 01040005 01040005 01040005     ................
20048c7c:	01040005 01040005 01040005 01040005     ................
20048c8c:	01040005 01040005 01040005 01040005     ................
20048c9c:	01040005 01040005 01040005 01040005     ................
20048cac:	01040005 01040005 01040005 01040005     ................
20048cbc:	01040005 01040005 01040005 01040005     ................
20048ccc:	01040005 01040005 01040005 01040005     ................
20048cdc:	01040005 01040005 01040005 01040005     ................
20048cec:	01040005 01040005 01040005 01040005     ................
20048cfc:	01040005 01040005 01040005 01040005     ................
20048d0c:	01040005 01040005 01040005 01040005     ................
20048d1c:	01040005 01040005 01040005 01040005     ................
20048d2c:	01040005 01040005 01040005 01040005     ................
20048d3c:	01040005 01040005 01040005 01040005     ................
20048d4c:	01040005 01040005 01040005 01040005     ................
20048d5c:	01040005 01040005 01040005 01040005     ................
20048d6c:	01040005 01040005 01040005 01040005     ................
20048d7c:	01040005 01040005 01040005 01040005     ................
20048d8c:	01040005 01040005 01040005 01040005     ................
20048d9c:	01040005 01040005 01040005 01040005     ................
20048dac:	01040005 01040005 01040005 01040005     ................
20048dbc:	01040005 01040005 01040005 01040005     ................
20048dcc:	01040005 01040005 01040005 01040005     ................
20048ddc:	01040005 01040005 01040005 01040005     ................
20048dec:	01040005 01040005 01040005 01040005     ................
20048dfc:	01040005 01040005 01040005 01040005     ................
20048e0c:	01040005 01040005 01040005 01040005     ................
20048e1c:	01030005 01030005 01030005 01030005     ................
20048e2c:	01030005 01030005 01030005 01030005     ................
20048e3c:	01030005 01030005 01030005 01030005     ................
20048e4c:	01030005 01030005 01030005 01030005     ................
20048e5c:	01030005 01030005 01030005 01030005     ................
20048e6c:	01030005 01030005 01030005 01030005     ................
20048e7c:	01030005 01030005 01030005 01030005     ................
20048e8c:	01030005 01030005 01030005 01030005     ................
20048e9c:	01030005 01030005 01030005 01030005     ................
20048eac:	01030005 01030005 01030005 01030005     ................
20048ebc:	01030005 01030005 01030005 01030005     ................
20048ecc:	01030005 01030005 01030005 01030005     ................
20048edc:	01030005 01030005 01030005 01030005     ................
20048eec:	01030005 01030005 01030005 01030005     ................
20048efc:	01030005 01030005 01030005 01030005     ................
20048f0c:	01030005 01030005 01030005 01030005     ................
20048f1c:	01030005 01030005 01030005 01030005     ................
20048f2c:	01030005 01030005 01030005 01030005     ................
20048f3c:	01030005 01030005 01030005 01030005     ................
20048f4c:	01030005 01030005 01030005 01030005     ................
20048f5c:	01030005 01030005 01030005 01030005     ................
20048f6c:	01030005 01030005 01030005 01030005     ................
20048f7c:	01030005 01030005 01030005 01030005     ................
20048f8c:	01030005 01030005 01030005 01030005     ................
20048f9c:	01030005 01030005 01030005 01030005     ................
20048fac:	01030005 01030005 01030005 01030005     ................
20048fbc:	01030005 01030005 01030005 01030005     ................
20048fcc:	01030005 01030005 01030005 01030005     ................
20048fdc:	01030005 01030005 01030005 01030005     ................
20048fec:	01030005 01030005 01030005 01030005     ................
20048ffc:	01030005 01030005 01030005 01030005     ................
2004900c:	01030005 01030005 01030005 01030005     ................
2004901c:	01000104 01000104 01000104 01000104     ................
2004902c:	01000104 01000104 01000104 01000104     ................
2004903c:	01000104 01000104 01000104 01000104     ................
2004904c:	01000104 01000104 01000104 01000104     ................
2004905c:	01000104 01000104 01000104 01000104     ................
2004906c:	01000104 01000104 01000104 01000104     ................
2004907c:	01000104 01000104 01000104 01000104     ................
2004908c:	01000104 01000104 01000104 01000104     ................
2004909c:	01000104 01000104 01000104 01000104     ................
200490ac:	01000104 01000104 01000104 01000104     ................
200490bc:	01000104 01000104 01000104 01000104     ................
200490cc:	01000104 01000104 01000104 01000104     ................
200490dc:	01000104 01000104 01000104 01000104     ................
200490ec:	01000104 01000104 01000104 01000104     ................
200490fc:	01000104 01000104 01000104 01000104     ................
2004910c:	01000104 01000104 01000104 01000104     ................
2004911c:	01000104 01000104 01000104 01000104     ................
2004912c:	01000104 01000104 01000104 01000104     ................
2004913c:	01000104 01000104 01000104 01000104     ................
2004914c:	01000104 01000104 01000104 01000104     ................
2004915c:	01000104 01000104 01000104 01000104     ................
2004916c:	01000104 01000104 01000104 01000104     ................
2004917c:	01000104 01000104 01000104 01000104     ................
2004918c:	01000104 01000104 01000104 01000104     ................
2004919c:	01000104 01000104 01000104 01000104     ................
200491ac:	01000104 01000104 01000104 01000104     ................
200491bc:	01000104 01000104 01000104 01000104     ................
200491cc:	01000104 01000104 01000104 01000104     ................
200491dc:	01000104 01000104 01000104 01000104     ................
200491ec:	01000104 01000104 01000104 01000104     ................
200491fc:	01000104 01000104 01000104 01000104     ................
2004920c:	01000104 01000104 01000104 01000104     ................
2004921c:	01000104 01000104 01000104 01000104     ................
2004922c:	01000104 01000104 01000104 01000104     ................
2004923c:	01000104 01000104 01000104 01000104     ................
2004924c:	01000104 01000104 01000104 01000104     ................
2004925c:	01000104 01000104 01000104 01000104     ................
2004926c:	01000104 01000104 01000104 01000104     ................
2004927c:	01000104 01000104 01000104 01000104     ................
2004928c:	01000104 01000104 01000104 01000104     ................
2004929c:	01000104 01000104 01000104 01000104     ................
200492ac:	01000104 01000104 01000104 01000104     ................
200492bc:	01000104 01000104 01000104 01000104     ................
200492cc:	01000104 01000104 01000104 01000104     ................
200492dc:	01000104 01000104 01000104 01000104     ................
200492ec:	01000104 01000104 01000104 01000104     ................
200492fc:	01000104 01000104 01000104 01000104     ................
2004930c:	01000104 01000104 01000104 01000104     ................
2004931c:	01000104 01000104 01000104 01000104     ................
2004932c:	01000104 01000104 01000104 01000104     ................
2004933c:	01000104 01000104 01000104 01000104     ................
2004934c:	01000104 01000104 01000104 01000104     ................
2004935c:	01000104 01000104 01000104 01000104     ................
2004936c:	01000104 01000104 01000104 01000104     ................
2004937c:	01000104 01000104 01000104 01000104     ................
2004938c:	01000104 01000104 01000104 01000104     ................
2004939c:	01000104 01000104 01000104 01000104     ................
200493ac:	01000104 01000104 01000104 01000104     ................
200493bc:	01000104 01000104 01000104 01000104     ................
200493cc:	01000104 01000104 01000104 01000104     ................
200493dc:	01000104 01000104 01000104 01000104     ................
200493ec:	01000104 01000104 01000104 01000104     ................
200493fc:	01000104 01000104 01000104 01000104     ................
2004940c:	01000104 01000104 01000104 01000104     ................
2004941c:	01000002 01000002 01000002 01000002     ................
2004942c:	01000002 01000002 01000002 01000002     ................
2004943c:	01000002 01000002 01000002 01000002     ................
2004944c:	01000002 01000002 01000002 01000002     ................
2004945c:	01000002 01000002 01000002 01000002     ................
2004946c:	01000002 01000002 01000002 01000002     ................
2004947c:	01000002 01000002 01000002 01000002     ................
2004948c:	01000002 01000002 01000002 01000002     ................
2004949c:	01000002 01000002 01000002 01000002     ................
200494ac:	01000002 01000002 01000002 01000002     ................
200494bc:	01000002 01000002 01000002 01000002     ................
200494cc:	01000002 01000002 01000002 01000002     ................
200494dc:	01000002 01000002 01000002 01000002     ................
200494ec:	01000002 01000002 01000002 01000002     ................
200494fc:	01000002 01000002 01000002 01000002     ................
2004950c:	01000002 01000002 01000002 01000002     ................
2004951c:	01000002 01000002 01000002 01000002     ................
2004952c:	01000002 01000002 01000002 01000002     ................
2004953c:	01000002 01000002 01000002 01000002     ................
2004954c:	01000002 01000002 01000002 01000002     ................
2004955c:	01000002 01000002 01000002 01000002     ................
2004956c:	01000002 01000002 01000002 01000002     ................
2004957c:	01000002 01000002 01000002 01000002     ................
2004958c:	01000002 01000002 01000002 01000002     ................
2004959c:	01000002 01000002 01000002 01000002     ................
200495ac:	01000002 01000002 01000002 01000002     ................
200495bc:	01000002 01000002 01000002 01000002     ................
200495cc:	01000002 01000002 01000002 01000002     ................
200495dc:	01000002 01000002 01000002 01000002     ................
200495ec:	01000002 01000002 01000002 01000002     ................
200495fc:	01000002 01000002 01000002 01000002     ................
2004960c:	01000002 01000002 01000002 01000002     ................
2004961c:	01000002 01000002 01000002 01000002     ................
2004962c:	01000002 01000002 01000002 01000002     ................
2004963c:	01000002 01000002 01000002 01000002     ................
2004964c:	01000002 01000002 01000002 01000002     ................
2004965c:	01000002 01000002 01000002 01000002     ................
2004966c:	01000002 01000002 01000002 01000002     ................
2004967c:	01000002 01000002 01000002 01000002     ................
2004968c:	01000002 01000002 01000002 01000002     ................
2004969c:	01000002 01000002 01000002 01000002     ................
200496ac:	01000002 01000002 01000002 01000002     ................
200496bc:	01000002 01000002 01000002 01000002     ................
200496cc:	01000002 01000002 01000002 01000002     ................
200496dc:	01000002 01000002 01000002 01000002     ................
200496ec:	01000002 01000002 01000002 01000002     ................
200496fc:	01000002 01000002 01000002 01000002     ................
2004970c:	01000002 01000002 01000002 01000002     ................
2004971c:	01000002 01000002 01000002 01000002     ................
2004972c:	01000002 01000002 01000002 01000002     ................
2004973c:	01000002 01000002 01000002 01000002     ................
2004974c:	01000002 01000002 01000002 01000002     ................
2004975c:	01000002 01000002 01000002 01000002     ................
2004976c:	01000002 01000002 01000002 01000002     ................
2004977c:	01000002 01000002 01000002 01000002     ................
2004978c:	01000002 01000002 01000002 01000002     ................
2004979c:	01000002 01000002 01000002 01000002     ................
200497ac:	01000002 01000002 01000002 01000002     ................
200497bc:	01000002 01000002 01000002 01000002     ................
200497cc:	01000002 01000002 01000002 01000002     ................
200497dc:	01000002 01000002 01000002 01000002     ................
200497ec:	01000002 01000002 01000002 01000002     ................
200497fc:	01000002 01000002 01000002 01000002     ................
2004980c:	01000002 01000002 01000002 01000002     ................
2004981c:	01000002 01000002 01000002 01000002     ................
2004982c:	01000002 01000002 01000002 01000002     ................
2004983c:	01000002 01000002 01000002 01000002     ................
2004984c:	01000002 01000002 01000002 01000002     ................
2004985c:	01000002 01000002 01000002 01000002     ................
2004986c:	01000002 01000002 01000002 01000002     ................
2004987c:	01000002 01000002 01000002 01000002     ................
2004988c:	01000002 01000002 01000002 01000002     ................
2004989c:	01000002 01000002 01000002 01000002     ................
200498ac:	01000002 01000002 01000002 01000002     ................
200498bc:	01000002 01000002 01000002 01000002     ................
200498cc:	01000002 01000002 01000002 01000002     ................
200498dc:	01000002 01000002 01000002 01000002     ................
200498ec:	01000002 01000002 01000002 01000002     ................
200498fc:	01000002 01000002 01000002 01000002     ................
2004990c:	01000002 01000002 01000002 01000002     ................
2004991c:	01000002 01000002 01000002 01000002     ................
2004992c:	01000002 01000002 01000002 01000002     ................
2004993c:	01000002 01000002 01000002 01000002     ................
2004994c:	01000002 01000002 01000002 01000002     ................
2004995c:	01000002 01000002 01000002 01000002     ................
2004996c:	01000002 01000002 01000002 01000002     ................
2004997c:	01000002 01000002 01000002 01000002     ................
2004998c:	01000002 01000002 01000002 01000002     ................
2004999c:	01000002 01000002 01000002 01000002     ................
200499ac:	01000002 01000002 01000002 01000002     ................
200499bc:	01000002 01000002 01000002 01000002     ................
200499cc:	01000002 01000002 01000002 01000002     ................
200499dc:	01000002 01000002 01000002 01000002     ................
200499ec:	01000002 01000002 01000002 01000002     ................
200499fc:	01000002 01000002 01000002 01000002     ................
20049a0c:	01000002 01000002 01000002 01000002     ................
20049a1c:	01000002 01000002 01000002 01000002     ................
20049a2c:	01000002 01000002 01000002 01000002     ................
20049a3c:	01000002 01000002 01000002 01000002     ................
20049a4c:	01000002 01000002 01000002 01000002     ................
20049a5c:	01000002 01000002 01000002 01000002     ................
20049a6c:	01000002 01000002 01000002 01000002     ................
20049a7c:	01000002 01000002 01000002 01000002     ................
20049a8c:	01000002 01000002 01000002 01000002     ................
20049a9c:	01000002 01000002 01000002 01000002     ................
20049aac:	01000002 01000002 01000002 01000002     ................
20049abc:	01000002 01000002 01000002 01000002     ................
20049acc:	01000002 01000002 01000002 01000002     ................
20049adc:	01000002 01000002 01000002 01000002     ................
20049aec:	01000002 01000002 01000002 01000002     ................
20049afc:	01000002 01000002 01000002 01000002     ................
20049b0c:	01000002 01000002 01000002 01000002     ................
20049b1c:	01000002 01000002 01000002 01000002     ................
20049b2c:	01000002 01000002 01000002 01000002     ................
20049b3c:	01000002 01000002 01000002 01000002     ................
20049b4c:	01000002 01000002 01000002 01000002     ................
20049b5c:	01000002 01000002 01000002 01000002     ................
20049b6c:	01000002 01000002 01000002 01000002     ................
20049b7c:	01000002 01000002 01000002 01000002     ................
20049b8c:	01000002 01000002 01000002 01000002     ................
20049b9c:	01000002 01000002 01000002 01000002     ................
20049bac:	01000002 01000002 01000002 01000002     ................
20049bbc:	01000002 01000002 01000002 01000002     ................
20049bcc:	01000002 01000002 01000002 01000002     ................
20049bdc:	01000002 01000002 01000002 01000002     ................
20049bec:	01000002 01000002 01000002 01000002     ................
20049bfc:	01000002 01000002 01000002 01000002     ................
20049c0c:	01000002 01000002 01000002 01000002     ................
20049c1c:	01000002 01000002 01000002 01000002     ................
20049c2c:	01000002 01000002 01000002 01000002     ................
20049c3c:	01000002 01000002 01000002 01000002     ................
20049c4c:	01000002 01000002 01000002 01000002     ................
20049c5c:	01000002 01000002 01000002 01000002     ................
20049c6c:	01000002 01000002 01000002 01000002     ................
20049c7c:	01000002 01000002 01000002 01000002     ................
20049c8c:	01000002 01000002 01000002 01000002     ................
20049c9c:	01000002 01000002 01000002 01000002     ................
20049cac:	01000002 01000002 01000002 01000002     ................
20049cbc:	01000002 01000002 01000002 01000002     ................
20049ccc:	01000002 01000002 01000002 01000002     ................
20049cdc:	01000002 01000002 01000002 01000002     ................
20049cec:	01000002 01000002 01000002 01000002     ................
20049cfc:	01000002 01000002 01000002 01000002     ................
20049d0c:	01000002 01000002 01000002 01000002     ................
20049d1c:	01000002 01000002 01000002 01000002     ................
20049d2c:	01000002 01000002 01000002 01000002     ................
20049d3c:	01000002 01000002 01000002 01000002     ................
20049d4c:	01000002 01000002 01000002 01000002     ................
20049d5c:	01000002 01000002 01000002 01000002     ................
20049d6c:	01000002 01000002 01000002 01000002     ................
20049d7c:	01000002 01000002 01000002 01000002     ................
20049d8c:	01000002 01000002 01000002 01000002     ................
20049d9c:	01000002 01000002 01000002 01000002     ................
20049dac:	01000002 01000002 01000002 01000002     ................
20049dbc:	01000002 01000002 01000002 01000002     ................
20049dcc:	01000002 01000002 01000002 01000002     ................
20049ddc:	01000002 01000002 01000002 01000002     ................
20049dec:	01000002 01000002 01000002 01000002     ................
20049dfc:	01000002 01000002 01000002 01000002     ................
20049e0c:	01000002 01000002 01000002 01000002     ................
20049e1c:	01000002 01000002 01000002 01000002     ................
20049e2c:	01000002 01000002 01000002 01000002     ................
20049e3c:	01000002 01000002 01000002 01000002     ................
20049e4c:	01000002 01000002 01000002 01000002     ................
20049e5c:	01000002 01000002 01000002 01000002     ................
20049e6c:	01000002 01000002 01000002 01000002     ................
20049e7c:	01000002 01000002 01000002 01000002     ................
20049e8c:	01000002 01000002 01000002 01000002     ................
20049e9c:	01000002 01000002 01000002 01000002     ................
20049eac:	01000002 01000002 01000002 01000002     ................
20049ebc:	01000002 01000002 01000002 01000002     ................
20049ecc:	01000002 01000002 01000002 01000002     ................
20049edc:	01000002 01000002 01000002 01000002     ................
20049eec:	01000002 01000002 01000002 01000002     ................
20049efc:	01000002 01000002 01000002 01000002     ................
20049f0c:	01000002 01000002 01000002 01000002     ................
20049f1c:	01000002 01000002 01000002 01000002     ................
20049f2c:	01000002 01000002 01000002 01000002     ................
20049f3c:	01000002 01000002 01000002 01000002     ................
20049f4c:	01000002 01000002 01000002 01000002     ................
20049f5c:	01000002 01000002 01000002 01000002     ................
20049f6c:	01000002 01000002 01000002 01000002     ................
20049f7c:	01000002 01000002 01000002 01000002     ................
20049f8c:	01000002 01000002 01000002 01000002     ................
20049f9c:	01000002 01000002 01000002 01000002     ................
20049fac:	01000002 01000002 01000002 01000002     ................
20049fbc:	01000002 01000002 01000002 01000002     ................
20049fcc:	01000002 01000002 01000002 01000002     ................
20049fdc:	01000002 01000002 01000002 01000002     ................
20049fec:	01000002 01000002 01000002 01000002     ................
20049ffc:	01000002 01000002 01000002 01000002     ................
2004a00c:	01000002 01000002 01000002 01000002     ................
2004a01c:	01000002 01000002 01000002 01000002     ................
2004a02c:	01000002 01000002 01000002 01000002     ................
2004a03c:	01000002 01000002 01000002 01000002     ................
2004a04c:	01000002 01000002 01000002 01000002     ................
2004a05c:	01000002 01000002 01000002 01000002     ................
2004a06c:	01000002 01000002 01000002 01000002     ................
2004a07c:	01000002 01000002 01000002 01000002     ................
2004a08c:	01000002 01000002 01000002 01000002     ................
2004a09c:	01000002 01000002 01000002 01000002     ................
2004a0ac:	01000002 01000002 01000002 01000002     ................
2004a0bc:	01000002 01000002 01000002 01000002     ................
2004a0cc:	01000002 01000002 01000002 01000002     ................
2004a0dc:	01000002 01000002 01000002 01000002     ................
2004a0ec:	01000002 01000002 01000002 01000002     ................
2004a0fc:	01000002 01000002 01000002 01000002     ................
2004a10c:	01000002 01000002 01000002 01000002     ................
2004a11c:	01000002 01000002 01000002 01000002     ................
2004a12c:	01000002 01000002 01000002 01000002     ................
2004a13c:	01000002 01000002 01000002 01000002     ................
2004a14c:	01000002 01000002 01000002 01000002     ................
2004a15c:	01000002 01000002 01000002 01000002     ................
2004a16c:	01000002 01000002 01000002 01000002     ................
2004a17c:	01000002 01000002 01000002 01000002     ................
2004a18c:	01000002 01000002 01000002 01000002     ................
2004a19c:	01000002 01000002 01000002 01000002     ................
2004a1ac:	01000002 01000002 01000002 01000002     ................
2004a1bc:	01000002 01000002 01000002 01000002     ................
2004a1cc:	01000002 01000002 01000002 01000002     ................
2004a1dc:	01000002 01000002 01000002 01000002     ................
2004a1ec:	01000002 01000002 01000002 01000002     ................
2004a1fc:	01000002 01000002 01000002 01000002     ................
2004a20c:	01000002 01000002 01000002 01000002     ................
2004a21c:	01000002 01000002 01000002 01000002     ................
2004a22c:	01000002 01000002 01000002 01000002     ................
2004a23c:	01000002 01000002 01000002 01000002     ................
2004a24c:	01000002 01000002 01000002 01000002     ................
2004a25c:	01000002 01000002 01000002 01000002     ................
2004a26c:	01000002 01000002 01000002 01000002     ................
2004a27c:	01000002 01000002 01000002 01000002     ................
2004a28c:	01000002 01000002 01000002 01000002     ................
2004a29c:	01000002 01000002 01000002 01000002     ................
2004a2ac:	01000002 01000002 01000002 01000002     ................
2004a2bc:	01000002 01000002 01000002 01000002     ................
2004a2cc:	01000002 01000002 01000002 01000002     ................
2004a2dc:	01000002 01000002 01000002 01000002     ................
2004a2ec:	01000002 01000002 01000002 01000002     ................
2004a2fc:	01000002 01000002 01000002 01000002     ................
2004a30c:	01000002 01000002 01000002 01000002     ................
2004a31c:	01000002 01000002 01000002 01000002     ................
2004a32c:	01000002 01000002 01000002 01000002     ................
2004a33c:	01000002 01000002 01000002 01000002     ................
2004a34c:	01000002 01000002 01000002 01000002     ................
2004a35c:	01000002 01000002 01000002 01000002     ................
2004a36c:	01000002 01000002 01000002 01000002     ................
2004a37c:	01000002 01000002 01000002 01000002     ................
2004a38c:	01000002 01000002 01000002 01000002     ................
2004a39c:	01000002 01000002 01000002 01000002     ................
2004a3ac:	01000002 01000002 01000002 01000002     ................
2004a3bc:	01000002 01000002 01000002 01000002     ................
2004a3cc:	01000002 01000002 01000002 01000002     ................
2004a3dc:	01000002 01000002 01000002 01000002     ................
2004a3ec:	01000002 01000002 01000002 01000002     ................
2004a3fc:	01000002 01000002 01000002 01000002     ................
2004a40c:	01000002 01000002 01000002 01000002     ................
2004a41c:	01010003 01010003 01010003 01010003     ................
2004a42c:	01010003 01010003 01010003 01010003     ................
2004a43c:	01010003 01010003 01010003 01010003     ................
2004a44c:	01010003 01010003 01010003 01010003     ................
2004a45c:	01010003 01010003 01010003 01010003     ................
2004a46c:	01010003 01010003 01010003 01010003     ................
2004a47c:	01010003 01010003 01010003 01010003     ................
2004a48c:	01010003 01010003 01010003 01010003     ................
2004a49c:	01010003 01010003 01010003 01010003     ................
2004a4ac:	01010003 01010003 01010003 01010003     ................
2004a4bc:	01010003 01010003 01010003 01010003     ................
2004a4cc:	01010003 01010003 01010003 01010003     ................
2004a4dc:	01010003 01010003 01010003 01010003     ................
2004a4ec:	01010003 01010003 01010003 01010003     ................
2004a4fc:	01010003 01010003 01010003 01010003     ................
2004a50c:	01010003 01010003 01010003 01010003     ................
2004a51c:	01010003 01010003 01010003 01010003     ................
2004a52c:	01010003 01010003 01010003 01010003     ................
2004a53c:	01010003 01010003 01010003 01010003     ................
2004a54c:	01010003 01010003 01010003 01010003     ................
2004a55c:	01010003 01010003 01010003 01010003     ................
2004a56c:	01010003 01010003 01010003 01010003     ................
2004a57c:	01010003 01010003 01010003 01010003     ................
2004a58c:	01010003 01010003 01010003 01010003     ................
2004a59c:	01010003 01010003 01010003 01010003     ................
2004a5ac:	01010003 01010003 01010003 01010003     ................
2004a5bc:	01010003 01010003 01010003 01010003     ................
2004a5cc:	01010003 01010003 01010003 01010003     ................
2004a5dc:	01010003 01010003 01010003 01010003     ................
2004a5ec:	01010003 01010003 01010003 01010003     ................
2004a5fc:	01010003 01010003 01010003 01010003     ................
2004a60c:	01010003 01010003 01010003 01010003     ................
2004a61c:	01010003 01010003 01010003 01010003     ................
2004a62c:	01010003 01010003 01010003 01010003     ................
2004a63c:	01010003 01010003 01010003 01010003     ................
2004a64c:	01010003 01010003 01010003 01010003     ................
2004a65c:	01010003 01010003 01010003 01010003     ................
2004a66c:	01010003 01010003 01010003 01010003     ................
2004a67c:	01010003 01010003 01010003 01010003     ................
2004a68c:	01010003 01010003 01010003 01010003     ................
2004a69c:	01010003 01010003 01010003 01010003     ................
2004a6ac:	01010003 01010003 01010003 01010003     ................
2004a6bc:	01010003 01010003 01010003 01010003     ................
2004a6cc:	01010003 01010003 01010003 01010003     ................
2004a6dc:	01010003 01010003 01010003 01010003     ................
2004a6ec:	01010003 01010003 01010003 01010003     ................
2004a6fc:	01010003 01010003 01010003 01010003     ................
2004a70c:	01010003 01010003 01010003 01010003     ................
2004a71c:	01010003 01010003 01010003 01010003     ................
2004a72c:	01010003 01010003 01010003 01010003     ................
2004a73c:	01010003 01010003 01010003 01010003     ................
2004a74c:	01010003 01010003 01010003 01010003     ................
2004a75c:	01010003 01010003 01010003 01010003     ................
2004a76c:	01010003 01010003 01010003 01010003     ................
2004a77c:	01010003 01010003 01010003 01010003     ................
2004a78c:	01010003 01010003 01010003 01010003     ................
2004a79c:	01010003 01010003 01010003 01010003     ................
2004a7ac:	01010003 01010003 01010003 01010003     ................
2004a7bc:	01010003 01010003 01010003 01010003     ................
2004a7cc:	01010003 01010003 01010003 01010003     ................
2004a7dc:	01010003 01010003 01010003 01010003     ................
2004a7ec:	01010003 01010003 01010003 01010003     ................
2004a7fc:	01010003 01010003 01010003 01010003     ................
2004a80c:	01010003 01010003 01010003 01010003     ................
2004a81c:	01010003 01010003 01010003 01010003     ................
2004a82c:	01010003 01010003 01010003 01010003     ................
2004a83c:	01010003 01010003 01010003 01010003     ................
2004a84c:	01010003 01010003 01010003 01010003     ................
2004a85c:	01010003 01010003 01010003 01010003     ................
2004a86c:	01010003 01010003 01010003 01010003     ................
2004a87c:	01010003 01010003 01010003 01010003     ................
2004a88c:	01010003 01010003 01010003 01010003     ................
2004a89c:	01010003 01010003 01010003 01010003     ................
2004a8ac:	01010003 01010003 01010003 01010003     ................
2004a8bc:	01010003 01010003 01010003 01010003     ................
2004a8cc:	01010003 01010003 01010003 01010003     ................
2004a8dc:	01010003 01010003 01010003 01010003     ................
2004a8ec:	01010003 01010003 01010003 01010003     ................
2004a8fc:	01010003 01010003 01010003 01010003     ................
2004a90c:	01010003 01010003 01010003 01010003     ................
2004a91c:	01010003 01010003 01010003 01010003     ................
2004a92c:	01010003 01010003 01010003 01010003     ................
2004a93c:	01010003 01010003 01010003 01010003     ................
2004a94c:	01010003 01010003 01010003 01010003     ................
2004a95c:	01010003 01010003 01010003 01010003     ................
2004a96c:	01010003 01010003 01010003 01010003     ................
2004a97c:	01010003 01010003 01010003 01010003     ................
2004a98c:	01010003 01010003 01010003 01010003     ................
2004a99c:	01010003 01010003 01010003 01010003     ................
2004a9ac:	01010003 01010003 01010003 01010003     ................
2004a9bc:	01010003 01010003 01010003 01010003     ................
2004a9cc:	01010003 01010003 01010003 01010003     ................
2004a9dc:	01010003 01010003 01010003 01010003     ................
2004a9ec:	01010003 01010003 01010003 01010003     ................
2004a9fc:	01010003 01010003 01010003 01010003     ................
2004aa0c:	01010003 01010003 01010003 01010003     ................
2004aa1c:	01010003 01010003 01010003 01010003     ................
2004aa2c:	01010003 01010003 01010003 01010003     ................
2004aa3c:	01010003 01010003 01010003 01010003     ................
2004aa4c:	01010003 01010003 01010003 01010003     ................
2004aa5c:	01010003 01010003 01010003 01010003     ................
2004aa6c:	01010003 01010003 01010003 01010003     ................
2004aa7c:	01010003 01010003 01010003 01010003     ................
2004aa8c:	01010003 01010003 01010003 01010003     ................
2004aa9c:	01010003 01010003 01010003 01010003     ................
2004aaac:	01010003 01010003 01010003 01010003     ................
2004aabc:	01010003 01010003 01010003 01010003     ................
2004aacc:	01010003 01010003 01010003 01010003     ................
2004aadc:	01010003 01010003 01010003 01010003     ................
2004aaec:	01010003 01010003 01010003 01010003     ................
2004aafc:	01010003 01010003 01010003 01010003     ................
2004ab0c:	01010003 01010003 01010003 01010003     ................
2004ab1c:	01010003 01010003 01010003 01010003     ................
2004ab2c:	01010003 01010003 01010003 01010003     ................
2004ab3c:	01010003 01010003 01010003 01010003     ................
2004ab4c:	01010003 01010003 01010003 01010003     ................
2004ab5c:	01010003 01010003 01010003 01010003     ................
2004ab6c:	01010003 01010003 01010003 01010003     ................
2004ab7c:	01010003 01010003 01010003 01010003     ................
2004ab8c:	01010003 01010003 01010003 01010003     ................
2004ab9c:	01010003 01010003 01010003 01010003     ................
2004abac:	01010003 01010003 01010003 01010003     ................
2004abbc:	01010003 01010003 01010003 01010003     ................
2004abcc:	01010003 01010003 01010003 01010003     ................
2004abdc:	01010003 01010003 01010003 01010003     ................
2004abec:	01010003 01010003 01010003 01010003     ................
2004abfc:	01010003 01010003 01010003 01010003     ................
2004ac0c:	01010003 01010003 01010003 01010003     ................
2004ac1c:	01020004 01020004 01020004 01020004     ................
2004ac2c:	01020004 01020004 01020004 01020004     ................
2004ac3c:	01020004 01020004 01020004 01020004     ................
2004ac4c:	01020004 01020004 01020004 01020004     ................
2004ac5c:	01020004 01020004 01020004 01020004     ................
2004ac6c:	01020004 01020004 01020004 01020004     ................
2004ac7c:	01020004 01020004 01020004 01020004     ................
2004ac8c:	01020004 01020004 01020004 01020004     ................
2004ac9c:	01020004 01020004 01020004 01020004     ................
2004acac:	01020004 01020004 01020004 01020004     ................
2004acbc:	01020004 01020004 01020004 01020004     ................
2004accc:	01020004 01020004 01020004 01020004     ................
2004acdc:	01020004 01020004 01020004 01020004     ................
2004acec:	01020004 01020004 01020004 01020004     ................
2004acfc:	01020004 01020004 01020004 01020004     ................
2004ad0c:	01020004 01020004 01020004 01020004     ................
2004ad1c:	01020004 01020004 01020004 01020004     ................
2004ad2c:	01020004 01020004 01020004 01020004     ................
2004ad3c:	01020004 01020004 01020004 01020004     ................
2004ad4c:	01020004 01020004 01020004 01020004     ................
2004ad5c:	01020004 01020004 01020004 01020004     ................
2004ad6c:	01020004 01020004 01020004 01020004     ................
2004ad7c:	01020004 01020004 01020004 01020004     ................
2004ad8c:	01020004 01020004 01020004 01020004     ................
2004ad9c:	01020004 01020004 01020004 01020004     ................
2004adac:	01020004 01020004 01020004 01020004     ................
2004adbc:	01020004 01020004 01020004 01020004     ................
2004adcc:	01020004 01020004 01020004 01020004     ................
2004addc:	01020004 01020004 01020004 01020004     ................
2004adec:	01020004 01020004 01020004 01020004     ................
2004adfc:	01020004 01020004 01020004 01020004     ................
2004ae0c:	01020004 01020004 01020004 01020004     ................
2004ae1c:	01020004 01020004 01020004 01020004     ................
2004ae2c:	01020004 01020004 01020004 01020004     ................
2004ae3c:	01020004 01020004 01020004 01020004     ................
2004ae4c:	01020004 01020004 01020004 01020004     ................
2004ae5c:	01020004 01020004 01020004 01020004     ................
2004ae6c:	01020004 01020004 01020004 01020004     ................
2004ae7c:	01020004 01020004 01020004 01020004     ................
2004ae8c:	01020004 01020004 01020004 01020004     ................
2004ae9c:	01020004 01020004 01020004 01020004     ................
2004aeac:	01020004 01020004 01020004 01020004     ................
2004aebc:	01020004 01020004 01020004 01020004     ................
2004aecc:	01020004 01020004 01020004 01020004     ................
2004aedc:	01020004 01020004 01020004 01020004     ................
2004aeec:	01020004 01020004 01020004 01020004     ................
2004aefc:	01020004 01020004 01020004 01020004     ................
2004af0c:	01020004 01020004 01020004 01020004     ................
2004af1c:	01020004 01020004 01020004 01020004     ................
2004af2c:	01020004 01020004 01020004 01020004     ................
2004af3c:	01020004 01020004 01020004 01020004     ................
2004af4c:	01020004 01020004 01020004 01020004     ................
2004af5c:	01020004 01020004 01020004 01020004     ................
2004af6c:	01020004 01020004 01020004 01020004     ................
2004af7c:	01020004 01020004 01020004 01020004     ................
2004af8c:	01020004 01020004 01020004 01020004     ................
2004af9c:	01020004 01020004 01020004 01020004     ................
2004afac:	01020004 01020004 01020004 01020004     ................
2004afbc:	01020004 01020004 01020004 01020004     ................
2004afcc:	01020004 01020004 01020004 01020004     ................
2004afdc:	01020004 01020004 01020004 01020004     ................
2004afec:	01020004 01020004 01020004 01020004     ................
2004affc:	01020004 01020004 01020004 01020004     ................
2004b00c:	01020004 01020004 01020004 01020004     ................
2004b01c:	02000004 02000004 02000004 02000004     ................
2004b02c:	02000004 02000004 02000004 02000004     ................
2004b03c:	02000004 02000004 02000004 02000004     ................
2004b04c:	02000004 02000004 02000004 02000004     ................
2004b05c:	02000004 02000004 02000004 02000004     ................
2004b06c:	02000004 02000004 02000004 02000004     ................
2004b07c:	02000004 02000004 02000004 02000004     ................
2004b08c:	02000004 02000004 02000004 02000004     ................
2004b09c:	02000004 02000004 02000004 02000004     ................
2004b0ac:	02000004 02000004 02000004 02000004     ................
2004b0bc:	02000004 02000004 02000004 02000004     ................
2004b0cc:	02000004 02000004 02000004 02000004     ................
2004b0dc:	02000004 02000004 02000004 02000004     ................
2004b0ec:	02000004 02000004 02000004 02000004     ................
2004b0fc:	02000004 02000004 02000004 02000004     ................
2004b10c:	02000004 02000004 02000004 02000004     ................
2004b11c:	02000004 02000004 02000004 02000004     ................
2004b12c:	02000004 02000004 02000004 02000004     ................
2004b13c:	02000004 02000004 02000004 02000004     ................
2004b14c:	02000004 02000004 02000004 02000004     ................
2004b15c:	02000004 02000004 02000004 02000004     ................
2004b16c:	02000004 02000004 02000004 02000004     ................
2004b17c:	02000004 02000004 02000004 02000004     ................
2004b18c:	02000004 02000004 02000004 02000004     ................
2004b19c:	02000004 02000004 02000004 02000004     ................
2004b1ac:	02000004 02000004 02000004 02000004     ................
2004b1bc:	02000004 02000004 02000004 02000004     ................
2004b1cc:	02000004 02000004 02000004 02000004     ................
2004b1dc:	02000004 02000004 02000004 02000004     ................
2004b1ec:	02000004 02000004 02000004 02000004     ................
2004b1fc:	02000004 02000004 02000004 02000004     ................
2004b20c:	02000004 02000004 02000004 02000004     ................
2004b21c:	02000004 02000004 02000004 02000004     ................
2004b22c:	02000004 02000004 02000004 02000004     ................
2004b23c:	02000004 02000004 02000004 02000004     ................
2004b24c:	02000004 02000004 02000004 02000004     ................
2004b25c:	02000004 02000004 02000004 02000004     ................
2004b26c:	02000004 02000004 02000004 02000004     ................
2004b27c:	02000004 02000004 02000004 02000004     ................
2004b28c:	02000004 02000004 02000004 02000004     ................
2004b29c:	02000004 02000004 02000004 02000004     ................
2004b2ac:	02000004 02000004 02000004 02000004     ................
2004b2bc:	02000004 02000004 02000004 02000004     ................
2004b2cc:	02000004 02000004 02000004 02000004     ................
2004b2dc:	02000004 02000004 02000004 02000004     ................
2004b2ec:	02000004 02000004 02000004 02000004     ................
2004b2fc:	02000004 02000004 02000004 02000004     ................
2004b30c:	02000004 02000004 02000004 02000004     ................
2004b31c:	02000004 02000004 02000004 02000004     ................
2004b32c:	02000004 02000004 02000004 02000004     ................
2004b33c:	02000004 02000004 02000004 02000004     ................
2004b34c:	02000004 02000004 02000004 02000004     ................
2004b35c:	02000004 02000004 02000004 02000004     ................
2004b36c:	02000004 02000004 02000004 02000004     ................
2004b37c:	02000004 02000004 02000004 02000004     ................
2004b38c:	02000004 02000004 02000004 02000004     ................
2004b39c:	02000004 02000004 02000004 02000004     ................
2004b3ac:	02000004 02000004 02000004 02000004     ................
2004b3bc:	02000004 02000004 02000004 02000004     ................
2004b3cc:	02000004 02000004 02000004 02000004     ................
2004b3dc:	02000004 02000004 02000004 02000004     ................
2004b3ec:	02000004 02000004 02000004 02000004     ................
2004b3fc:	02000004 02000004 02000004 02000004     ................
2004b40c:	02000004 02000004 02000004 02000004     ................
	...
2004b43c:	0700010b 0700010b 0600010b 0600010b     ................
2004b44c:	1600000b 1600000b 1500000b 1500000b     ................
2004b45c:	0202010a 0202010a 0202010a 0202010a     ................
2004b46c:	0301010a 0301010a 0301010a 0301010a     ................
2004b47c:	0500010a 0500010a 0500010a 0500010a     ................
2004b48c:	010d000a 010d000a 010d000a 010d000a     ................
2004b49c:	0305000a 0305000a 0305000a 0305000a     ................
2004b4ac:	0208000a 0208000a 0208000a 0208000a     ................
2004b4bc:	0304000a 0304000a 0304000a 0304000a     ................
2004b4cc:	0403000a 0403000a 0403000a 0403000a     ................
2004b4dc:	0402000a 0402000a 0402000a 0402000a     ................
2004b4ec:	0701000a 0701000a 0701000a 0701000a     ................
2004b4fc:	1400000a 1400000a 1400000a 1400000a     ................
2004b50c:	1300000a 1300000a 1300000a 1300000a     ................
2004b51c:	1700000b 1700000b 1800000b 1800000b     ................
2004b52c:	0801000b 0801000b 0209000b 0209000b     ................
2004b53c:	0203010b 0203010b 0204010b 0204010b     ................
2004b54c:	010f010b 010f010b 0110010b 0110010b     ................
2004b55c:	1900000c 1a00000c 1b00000c 0901000c     ................
2004b56c:	0306000c 0a01000c 0502000c 0307000c     ................
2004b57c:	010e000c 0800010c 0205010c 0206010c     ................
2004b58c:	0111010c 0112010c 0113010c 0114010c     ................
	...
2004b61c:	1200000a 1200000a 1200000a 1200000a     ................
2004b62c:	1100000a 1100000a 1100000a 1100000a     ................
2004b63c:	010e0109 010e0109 010e0109 010e0109     ................
2004b64c:	010e0109 010e0109 010e0109 010e0109     ................
2004b65c:	010d0109 010d0109 010d0109 010d0109     ................
2004b66c:	010d0109 010d0109 010d0109 010d0109     ................
2004b67c:	010c0109 010c0109 010c0109 010c0109     ................
2004b68c:	010c0109 010c0109 010c0109 010c0109     ................
2004b69c:	010b0109 010b0109 010b0109 010b0109     ................
2004b6ac:	010b0109 010b0109 010b0109 010b0109     ................
2004b6bc:	010a0109 010a0109 010a0109 010a0109     ................
2004b6cc:	010a0109 010a0109 010a0109 010a0109     ................
2004b6dc:	02010109 02010109 02010109 02010109     ................
2004b6ec:	02010109 02010109 02010109 02010109     ................
2004b6fc:	04000109 04000109 04000109 04000109     ................
2004b70c:	04000109 04000109 04000109 04000109     ................
2004b71c:	010c0009 010c0009 010c0009 010c0009     ................
2004b72c:	010c0009 010c0009 010c0009 010c0009     ................
2004b73c:	010b0009 010b0009 010b0009 010b0009     ................
2004b74c:	010b0009 010b0009 010b0009 010b0009     ................
2004b75c:	02070009 02070009 02070009 02070009     ................
2004b76c:	02070009 02070009 02070009 02070009     ................
2004b77c:	02060009 02060009 02060009 02060009     ................
2004b78c:	02060009 02060009 02060009 02060009     ................
2004b79c:	02050009 02050009 02050009 02050009     ................
2004b7ac:	02050009 02050009 02050009 02050009     ................
2004b7bc:	03030009 03030009 03030009 03030009     ................
2004b7cc:	03030009 03030009 03030009 03030009     ................
2004b7dc:	03020009 03020009 03020009 03020009     ................
2004b7ec:	03020009 03020009 03020009 03020009     ................
2004b7fc:	06010009 06010009 06010009 06010009     ................
2004b80c:	06010009 06010009 06010009 06010009     ................
2004b81c:	05010009 05010009 05010009 05010009     ................
2004b82c:	05010009 05010009 05010009 05010009     ................
2004b83c:	10000009 10000009 10000009 10000009     ................
2004b84c:	10000009 10000009 10000009 10000009     ................
2004b85c:	02040009 02040009 02040009 02040009     ................
2004b86c:	02040009 02040009 02040009 02040009     ................
2004b87c:	0f000009 0f000009 0f000009 0f000009     ................
2004b88c:	0f000009 0f000009 0f000009 0f000009     ................
2004b89c:	0e000009 0e000009 0e000009 0e000009     ................
2004b8ac:	0e000009 0e000009 0e000009 0e000009     ................
2004b8bc:	0d000009 0d000009 0d000009 0d000009     ................
2004b8cc:	0d000009 0d000009 0d000009 0d000009     ................
2004b8dc:	01080108 01080108 01080108 01080108     ................
2004b8ec:	01080108 01080108 01080108 01080108     ................
2004b8fc:	01080108 01080108 01080108 01080108     ................
2004b90c:	01080108 01080108 01080108 01080108     ................
2004b91c:	01070108 01070108 01070108 01070108     ................
2004b92c:	01070108 01070108 01070108 01070108     ................
2004b93c:	01070108 01070108 01070108 01070108     ................
2004b94c:	01070108 01070108 01070108 01070108     ................
2004b95c:	01060108 01060108 01060108 01060108     ................
2004b96c:	01060108 01060108 01060108 01060108     ................
2004b97c:	01060108 01060108 01060108 01060108     ................
2004b98c:	01060108 01060108 01060108 01060108     ................
2004b99c:	03000108 03000108 03000108 03000108     ................
2004b9ac:	03000108 03000108 03000108 03000108     ................
2004b9bc:	03000108 03000108 03000108 03000108     ................
2004b9cc:	03000108 03000108 03000108 03000108     ................
2004b9dc:	010a0008 010a0008 010a0008 010a0008     ................
2004b9ec:	010a0008 010a0008 010a0008 010a0008     ................
2004b9fc:	010a0008 010a0008 010a0008 010a0008     ................
2004ba0c:	010a0008 010a0008 010a0008 010a0008     ................
2004ba1c:	01090008 01090008 01090008 01090008     ................
2004ba2c:	01090008 01090008 01090008 01090008     ................
2004ba3c:	01090008 01090008 01090008 01090008     ................
2004ba4c:	01090008 01090008 01090008 01090008     ................
2004ba5c:	01080008 01080008 01080008 01080008     ................
2004ba6c:	01080008 01080008 01080008 01080008     ................
2004ba7c:	01080008 01080008 01080008 01080008     ................
2004ba8c:	01080008 01080008 01080008 01080008     ................
2004ba9c:	01090108 01090108 01090108 01090108     ................
2004baac:	01090108 01090108 01090108 01090108     ................
2004babc:	01090108 01090108 01090108 01090108     ................
2004bacc:	01090108 01090108 01090108 01090108     ................
2004badc:	02030008 02030008 02030008 02030008     ................
2004baec:	02030008 02030008 02030008 02030008     ................
2004bafc:	02030008 02030008 02030008 02030008     ................
2004bb0c:	02030008 02030008 02030008 02030008     ................
2004bb1c:	04010008 04010008 04010008 04010008     ................
2004bb2c:	04010008 04010008 04010008 04010008     ................
2004bb3c:	04010008 04010008 04010008 04010008     ................
2004bb4c:	04010008 04010008 04010008 04010008     ................
2004bb5c:	0c000008 0c000008 0c000008 0c000008     ................
2004bb6c:	0c000008 0c000008 0c000008 0c000008     ................
2004bb7c:	0c000008 0c000008 0c000008 0c000008     ................
2004bb8c:	0c000008 0c000008 0c000008 0c000008     ................
2004bb9c:	0b000008 0b000008 0b000008 0b000008     ................
2004bbac:	0b000008 0b000008 0b000008 0b000008     ................
2004bbbc:	0b000008 0b000008 0b000008 0b000008     ................
2004bbcc:	0b000008 0b000008 0b000008 0b000008     ................
2004bbdc:	0a000008 0a000008 0a000008 0a000008     ................
2004bbec:	0a000008 0a000008 0a000008 0a000008     ................
2004bbfc:	0a000008 0a000008 0a000008 0a000008     ................
2004bc0c:	0a000008 0a000008 0a000008 0a000008     ................
2004bc1c:	01040107 01040107 01040107 01040107     ................
2004bc2c:	01040107 01040107 01040107 01040107     ................
2004bc3c:	01040107 01040107 01040107 01040107     ................
2004bc4c:	01040107 01040107 01040107 01040107     ................
2004bc5c:	01040107 01040107 01040107 01040107     ................
2004bc6c:	01040107 01040107 01040107 01040107     ................
2004bc7c:	01040107 01040107 01040107 01040107     ................
2004bc8c:	01040107 01040107 01040107 01040107     ................
2004bc9c:	01030107 01030107 01030107 01030107     ................
2004bcac:	01030107 01030107 01030107 01030107     ................
2004bcbc:	01030107 01030107 01030107 01030107     ................
2004bccc:	01030107 01030107 01030107 01030107     ................
2004bcdc:	01030107 01030107 01030107 01030107     ................
2004bcec:	01030107 01030107 01030107 01030107     ................
2004bcfc:	01030107 01030107 01030107 01030107     ................
2004bd0c:	01030107 01030107 01030107 01030107     ................
2004bd1c:	01060007 01060007 01060007 01060007     ................
2004bd2c:	01060007 01060007 01060007 01060007     ................
2004bd3c:	01060007 01060007 01060007 01060007     ................
2004bd4c:	01060007 01060007 01060007 01060007     ................
2004bd5c:	01060007 01060007 01060007 01060007     ................
2004bd6c:	01060007 01060007 01060007 01060007     ................
2004bd7c:	01060007 01060007 01060007 01060007     ................
2004bd8c:	01060007 01060007 01060007 01060007     ................
2004bd9c:	01050107 01050107 01050107 01050107     ................
2004bdac:	01050107 01050107 01050107 01050107     ................
2004bdbc:	01050107 01050107 01050107 01050107     ................
2004bdcc:	01050107 01050107 01050107 01050107     ................
2004bddc:	01050107 01050107 01050107 01050107     ................
2004bdec:	01050107 01050107 01050107 01050107     ................
2004bdfc:	01050107 01050107 01050107 01050107     ................
2004be0c:	01050107 01050107 01050107 01050107     ................
2004be1c:	01070007 01070007 01070007 01070007     ................
2004be2c:	01070007 01070007 01070007 01070007     ................
2004be3c:	01070007 01070007 01070007 01070007     ................
2004be4c:	01070007 01070007 01070007 01070007     ................
2004be5c:	01070007 01070007 01070007 01070007     ................
2004be6c:	01070007 01070007 01070007 01070007     ................
2004be7c:	01070007 01070007 01070007 01070007     ................
2004be8c:	01070007 01070007 01070007 01070007     ................
2004be9c:	02020007 02020007 02020007 02020007     ................
2004beac:	02020007 02020007 02020007 02020007     ................
2004bebc:	02020007 02020007 02020007 02020007     ................
2004becc:	02020007 02020007 02020007 02020007     ................
2004bedc:	02020007 02020007 02020007 02020007     ................
2004beec:	02020007 02020007 02020007 02020007     ................
2004befc:	02020007 02020007 02020007 02020007     ................
2004bf0c:	02020007 02020007 02020007 02020007     ................
2004bf1c:	03010007 03010007 03010007 03010007     ................
2004bf2c:	03010007 03010007 03010007 03010007     ................
2004bf3c:	03010007 03010007 03010007 03010007     ................
2004bf4c:	03010007 03010007 03010007 03010007     ................
2004bf5c:	03010007 03010007 03010007 03010007     ................
2004bf6c:	03010007 03010007 03010007 03010007     ................
2004bf7c:	03010007 03010007 03010007 03010007     ................
2004bf8c:	03010007 03010007 03010007 03010007     ................
2004bf9c:	09000007 09000007 09000007 09000007     ................
2004bfac:	09000007 09000007 09000007 09000007     ................
2004bfbc:	09000007 09000007 09000007 09000007     ................
2004bfcc:	09000007 09000007 09000007 09000007     ................
2004bfdc:	09000007 09000007 09000007 09000007     ................
2004bfec:	09000007 09000007 09000007 09000007     ................
2004bffc:	09000007 09000007 09000007 09000007     ................
2004c00c:	09000007 09000007 09000007 09000007     ................
2004c01c:	02000106 02000106 02000106 02000106     ................
2004c02c:	02000106 02000106 02000106 02000106     ................
2004c03c:	02000106 02000106 02000106 02000106     ................
2004c04c:	02000106 02000106 02000106 02000106     ................
2004c05c:	02000106 02000106 02000106 02000106     ................
2004c06c:	02000106 02000106 02000106 02000106     ................
2004c07c:	02000106 02000106 02000106 02000106     ................
2004c08c:	02000106 02000106 02000106 02000106     ................
2004c09c:	02000106 02000106 02000106 02000106     ................
2004c0ac:	02000106 02000106 02000106 02000106     ................
2004c0bc:	02000106 02000106 02000106 02000106     ................
2004c0cc:	02000106 02000106 02000106 02000106     ................
2004c0dc:	02000106 02000106 02000106 02000106     ................
2004c0ec:	02000106 02000106 02000106 02000106     ................
2004c0fc:	02000106 02000106 02000106 02000106     ................
2004c10c:	02000106 02000106 02000106 02000106     ................
2004c11c:	01050006 01050006 01050006 01050006     ................
2004c12c:	01050006 01050006 01050006 01050006     ................
2004c13c:	01050006 01050006 01050006 01050006     ................
2004c14c:	01050006 01050006 01050006 01050006     ................
2004c15c:	01050006 01050006 01050006 01050006     ................
2004c16c:	01050006 01050006 01050006 01050006     ................
2004c17c:	01050006 01050006 01050006 01050006     ................
2004c18c:	01050006 01050006 01050006 01050006     ................
2004c19c:	01050006 01050006 01050006 01050006     ................
2004c1ac:	01050006 01050006 01050006 01050006     ................
2004c1bc:	01050006 01050006 01050006 01050006     ................
2004c1cc:	01050006 01050006 01050006 01050006     ................
2004c1dc:	01050006 01050006 01050006 01050006     ................
2004c1ec:	01050006 01050006 01050006 01050006     ................
2004c1fc:	01050006 01050006 01050006 01050006     ................
2004c20c:	01050006 01050006 01050006 01050006     ................
2004c21c:	01020106 01020106 01020106 01020106     ................
2004c22c:	01020106 01020106 01020106 01020106     ................
2004c23c:	01020106 01020106 01020106 01020106     ................
2004c24c:	01020106 01020106 01020106 01020106     ................
2004c25c:	01020106 01020106 01020106 01020106     ................
2004c26c:	01020106 01020106 01020106 01020106     ................
2004c27c:	01020106 01020106 01020106 01020106     ................
2004c28c:	01020106 01020106 01020106 01020106     ................
2004c29c:	01020106 01020106 01020106 01020106     ................
2004c2ac:	01020106 01020106 01020106 01020106     ................
2004c2bc:	01020106 01020106 01020106 01020106     ................
2004c2cc:	01020106 01020106 01020106 01020106     ................
2004c2dc:	01020106 01020106 01020106 01020106     ................
2004c2ec:	01020106 01020106 01020106 01020106     ................
2004c2fc:	01020106 01020106 01020106 01020106     ................
2004c30c:	01020106 01020106 01020106 01020106     ................
2004c31c:	01010106 01010106 01010106 01010106     ................
2004c32c:	01010106 01010106 01010106 01010106     ................
2004c33c:	01010106 01010106 01010106 01010106     ................
2004c34c:	01010106 01010106 01010106 01010106     ................
2004c35c:	01010106 01010106 01010106 01010106     ................
2004c36c:	01010106 01010106 01010106 01010106     ................
2004c37c:	01010106 01010106 01010106 01010106     ................
2004c38c:	01010106 01010106 01010106 01010106     ................
2004c39c:	01010106 01010106 01010106 01010106     ................
2004c3ac:	01010106 01010106 01010106 01010106     ................
2004c3bc:	01010106 01010106 01010106 01010106     ................
2004c3cc:	01010106 01010106 01010106 01010106     ................
2004c3dc:	01010106 01010106 01010106 01010106     ................
2004c3ec:	01010106 01010106 01010106 01010106     ................
2004c3fc:	01010106 01010106 01010106 01010106     ................
2004c40c:	01010106 01010106 01010106 01010106     ................
2004c41c:	01040006 01040006 01040006 01040006     ................
2004c42c:	01040006 01040006 01040006 01040006     ................
2004c43c:	01040006 01040006 01040006 01040006     ................
2004c44c:	01040006 01040006 01040006 01040006     ................
2004c45c:	01040006 01040006 01040006 01040006     ................
2004c46c:	01040006 01040006 01040006 01040006     ................
2004c47c:	01040006 01040006 01040006 01040006     ................
2004c48c:	01040006 01040006 01040006 01040006     ................
2004c49c:	01040006 01040006 01040006 01040006     ................
2004c4ac:	01040006 01040006 01040006 01040006     ................
2004c4bc:	01040006 01040006 01040006 01040006     ................
2004c4cc:	01040006 01040006 01040006 01040006     ................
2004c4dc:	01040006 01040006 01040006 01040006     ................
2004c4ec:	01040006 01040006 01040006 01040006     ................
2004c4fc:	01040006 01040006 01040006 01040006     ................
2004c50c:	01040006 01040006 01040006 01040006     ................
2004c51c:	01030006 01030006 01030006 01030006     ................
2004c52c:	01030006 01030006 01030006 01030006     ................
2004c53c:	01030006 01030006 01030006 01030006     ................
2004c54c:	01030006 01030006 01030006 01030006     ................
2004c55c:	01030006 01030006 01030006 01030006     ................
2004c56c:	01030006 01030006 01030006 01030006     ................
2004c57c:	01030006 01030006 01030006 01030006     ................
2004c58c:	01030006 01030006 01030006 01030006     ................
2004c59c:	01030006 01030006 01030006 01030006     ................
2004c5ac:	01030006 01030006 01030006 01030006     ................
2004c5bc:	01030006 01030006 01030006 01030006     ................
2004c5cc:	01030006 01030006 01030006 01030006     ................
2004c5dc:	01030006 01030006 01030006 01030006     ................
2004c5ec:	01030006 01030006 01030006 01030006     ................
2004c5fc:	01030006 01030006 01030006 01030006     ................
2004c60c:	01030006 01030006 01030006 01030006     ................
2004c61c:	08000006 08000006 08000006 08000006     ................
2004c62c:	08000006 08000006 08000006 08000006     ................
2004c63c:	08000006 08000006 08000006 08000006     ................
2004c64c:	08000006 08000006 08000006 08000006     ................
2004c65c:	08000006 08000006 08000006 08000006     ................
2004c66c:	08000006 08000006 08000006 08000006     ................
2004c67c:	08000006 08000006 08000006 08000006     ................
2004c68c:	08000006 08000006 08000006 08000006     ................
2004c69c:	08000006 08000006 08000006 08000006     ................
2004c6ac:	08000006 08000006 08000006 08000006     ................
2004c6bc:	08000006 08000006 08000006 08000006     ................
2004c6cc:	08000006 08000006 08000006 08000006     ................
2004c6dc:	08000006 08000006 08000006 08000006     ................
2004c6ec:	08000006 08000006 08000006 08000006     ................
2004c6fc:	08000006 08000006 08000006 08000006     ................
2004c70c:	08000006 08000006 08000006 08000006     ................
2004c71c:	07000006 07000006 07000006 07000006     ................
2004c72c:	07000006 07000006 07000006 07000006     ................
2004c73c:	07000006 07000006 07000006 07000006     ................
2004c74c:	07000006 07000006 07000006 07000006     ................
2004c75c:	07000006 07000006 07000006 07000006     ................
2004c76c:	07000006 07000006 07000006 07000006     ................
2004c77c:	07000006 07000006 07000006 07000006     ................
2004c78c:	07000006 07000006 07000006 07000006     ................
2004c79c:	07000006 07000006 07000006 07000006     ................
2004c7ac:	07000006 07000006 07000006 07000006     ................
2004c7bc:	07000006 07000006 07000006 07000006     ................
2004c7cc:	07000006 07000006 07000006 07000006     ................
2004c7dc:	07000006 07000006 07000006 07000006     ................
2004c7ec:	07000006 07000006 07000006 07000006     ................
2004c7fc:	07000006 07000006 07000006 07000006     ................
2004c80c:	07000006 07000006 07000006 07000006     ................
2004c81c:	02010006 02010006 02010006 02010006     ................
2004c82c:	02010006 02010006 02010006 02010006     ................
2004c83c:	02010006 02010006 02010006 02010006     ................
2004c84c:	02010006 02010006 02010006 02010006     ................
2004c85c:	02010006 02010006 02010006 02010006     ................
2004c86c:	02010006 02010006 02010006 02010006     ................
2004c87c:	02010006 02010006 02010006 02010006     ................
2004c88c:	02010006 02010006 02010006 02010006     ................
2004c89c:	02010006 02010006 02010006 02010006     ................
2004c8ac:	02010006 02010006 02010006 02010006     ................
2004c8bc:	02010006 02010006 02010006 02010006     ................
2004c8cc:	02010006 02010006 02010006 02010006     ................
2004c8dc:	02010006 02010006 02010006 02010006     ................
2004c8ec:	02010006 02010006 02010006 02010006     ................
2004c8fc:	02010006 02010006 02010006 02010006     ................
2004c90c:	02010006 02010006 02010006 02010006     ................
2004c91c:	06000006 06000006 06000006 06000006     ................
2004c92c:	06000006 06000006 06000006 06000006     ................
2004c93c:	06000006 06000006 06000006 06000006     ................
2004c94c:	06000006 06000006 06000006 06000006     ................
2004c95c:	06000006 06000006 06000006 06000006     ................
2004c96c:	06000006 06000006 06000006 06000006     ................
2004c97c:	06000006 06000006 06000006 06000006     ................
2004c98c:	06000006 06000006 06000006 06000006     ................
2004c99c:	06000006 06000006 06000006 06000006     ................
2004c9ac:	06000006 06000006 06000006 06000006     ................
2004c9bc:	06000006 06000006 06000006 06000006     ................
2004c9cc:	06000006 06000006 06000006 06000006     ................
2004c9dc:	06000006 06000006 06000006 06000006     ................
2004c9ec:	06000006 06000006 06000006 06000006     ................
2004c9fc:	06000006 06000006 06000006 06000006     ................
2004ca0c:	06000006 06000006 06000006 06000006     ................
2004ca1c:	01020005 01020005 01020005 01020005     ................
2004ca2c:	01020005 01020005 01020005 01020005     ................
2004ca3c:	01020005 01020005 01020005 01020005     ................
2004ca4c:	01020005 01020005 01020005 01020005     ................
2004ca5c:	01020005 01020005 01020005 01020005     ................
2004ca6c:	01020005 01020005 01020005 01020005     ................
2004ca7c:	01020005 01020005 01020005 01020005     ................
2004ca8c:	01020005 01020005 01020005 01020005     ................
2004ca9c:	01020005 01020005 01020005 01020005     ................
2004caac:	01020005 01020005 01020005 01020005     ................
2004cabc:	01020005 01020005 01020005 01020005     ................
2004cacc:	01020005 01020005 01020005 01020005     ................
2004cadc:	01020005 01020005 01020005 01020005     ................
2004caec:	01020005 01020005 01020005 01020005     ................
2004cafc:	01020005 01020005 01020005 01020005     ................
2004cb0c:	01020005 01020005 01020005 01020005     ................
2004cb1c:	01020005 01020005 01020005 01020005     ................
2004cb2c:	01020005 01020005 01020005 01020005     ................
2004cb3c:	01020005 01020005 01020005 01020005     ................
2004cb4c:	01020005 01020005 01020005 01020005     ................
2004cb5c:	01020005 01020005 01020005 01020005     ................
2004cb6c:	01020005 01020005 01020005 01020005     ................
2004cb7c:	01020005 01020005 01020005 01020005     ................
2004cb8c:	01020005 01020005 01020005 01020005     ................
2004cb9c:	01020005 01020005 01020005 01020005     ................
2004cbac:	01020005 01020005 01020005 01020005     ................
2004cbbc:	01020005 01020005 01020005 01020005     ................
2004cbcc:	01020005 01020005 01020005 01020005     ................
2004cbdc:	01020005 01020005 01020005 01020005     ................
2004cbec:	01020005 01020005 01020005 01020005     ................
2004cbfc:	01020005 01020005 01020005 01020005     ................
2004cc0c:	01020005 01020005 01020005 01020005     ................
2004cc1c:	05000005 05000005 05000005 05000005     ................
2004cc2c:	05000005 05000005 05000005 05000005     ................
2004cc3c:	05000005 05000005 05000005 05000005     ................
2004cc4c:	05000005 05000005 05000005 05000005     ................
2004cc5c:	05000005 05000005 05000005 05000005     ................
2004cc6c:	05000005 05000005 05000005 05000005     ................
2004cc7c:	05000005 05000005 05000005 05000005     ................
2004cc8c:	05000005 05000005 05000005 05000005     ................
2004cc9c:	05000005 05000005 05000005 05000005     ................
2004ccac:	05000005 05000005 05000005 05000005     ................
2004ccbc:	05000005 05000005 05000005 05000005     ................
2004cccc:	05000005 05000005 05000005 05000005     ................
2004ccdc:	05000005 05000005 05000005 05000005     ................
2004ccec:	05000005 05000005 05000005 05000005     ................
2004ccfc:	05000005 05000005 05000005 05000005     ................
2004cd0c:	05000005 05000005 05000005 05000005     ................
2004cd1c:	05000005 05000005 05000005 05000005     ................
2004cd2c:	05000005 05000005 05000005 05000005     ................
2004cd3c:	05000005 05000005 05000005 05000005     ................
2004cd4c:	05000005 05000005 05000005 05000005     ................
2004cd5c:	05000005 05000005 05000005 05000005     ................
2004cd6c:	05000005 05000005 05000005 05000005     ................
2004cd7c:	05000005 05000005 05000005 05000005     ................
2004cd8c:	05000005 05000005 05000005 05000005     ................
2004cd9c:	05000005 05000005 05000005 05000005     ................
2004cdac:	05000005 05000005 05000005 05000005     ................
2004cdbc:	05000005 05000005 05000005 05000005     ................
2004cdcc:	05000005 05000005 05000005 05000005     ................
2004cddc:	05000005 05000005 05000005 05000005     ................
2004cdec:	05000005 05000005 05000005 05000005     ................
2004cdfc:	05000005 05000005 05000005 05000005     ................
2004ce0c:	05000005 05000005 05000005 05000005     ................
2004ce1c:	04000005 04000005 04000005 04000005     ................
2004ce2c:	04000005 04000005 04000005 04000005     ................
2004ce3c:	04000005 04000005 04000005 04000005     ................
2004ce4c:	04000005 04000005 04000005 04000005     ................
2004ce5c:	04000005 04000005 04000005 04000005     ................
2004ce6c:	04000005 04000005 04000005 04000005     ................
2004ce7c:	04000005 04000005 04000005 04000005     ................
2004ce8c:	04000005 04000005 04000005 04000005     ................
2004ce9c:	04000005 04000005 04000005 04000005     ................
2004ceac:	04000005 04000005 04000005 04000005     ................
2004cebc:	04000005 04000005 04000005 04000005     ................
2004cecc:	04000005 04000005 04000005 04000005     ................
2004cedc:	04000005 04000005 04000005 04000005     ................
2004ceec:	04000005 04000005 04000005 04000005     ................
2004cefc:	04000005 04000005 04000005 04000005     ................
2004cf0c:	04000005 04000005 04000005 04000005     ................
2004cf1c:	04000005 04000005 04000005 04000005     ................
2004cf2c:	04000005 04000005 04000005 04000005     ................
2004cf3c:	04000005 04000005 04000005 04000005     ................
2004cf4c:	04000005 04000005 04000005 04000005     ................
2004cf5c:	04000005 04000005 04000005 04000005     ................
2004cf6c:	04000005 04000005 04000005 04000005     ................
2004cf7c:	04000005 04000005 04000005 04000005     ................
2004cf8c:	04000005 04000005 04000005 04000005     ................
2004cf9c:	04000005 04000005 04000005 04000005     ................
2004cfac:	04000005 04000005 04000005 04000005     ................
2004cfbc:	04000005 04000005 04000005 04000005     ................
2004cfcc:	04000005 04000005 04000005 04000005     ................
2004cfdc:	04000005 04000005 04000005 04000005     ................
2004cfec:	04000005 04000005 04000005 04000005     ................
2004cffc:	04000005 04000005 04000005 04000005     ................
2004d00c:	04000005 04000005 04000005 04000005     ................
2004d01c:	01000104 01000104 01000104 01000104     ................
2004d02c:	01000104 01000104 01000104 01000104     ................
2004d03c:	01000104 01000104 01000104 01000104     ................
2004d04c:	01000104 01000104 01000104 01000104     ................
2004d05c:	01000104 01000104 01000104 01000104     ................
2004d06c:	01000104 01000104 01000104 01000104     ................
2004d07c:	01000104 01000104 01000104 01000104     ................
2004d08c:	01000104 01000104 01000104 01000104     ................
2004d09c:	01000104 01000104 01000104 01000104     ................
2004d0ac:	01000104 01000104 01000104 01000104     ................
2004d0bc:	01000104 01000104 01000104 01000104     ................
2004d0cc:	01000104 01000104 01000104 01000104     ................
2004d0dc:	01000104 01000104 01000104 01000104     ................
2004d0ec:	01000104 01000104 01000104 01000104     ................
2004d0fc:	01000104 01000104 01000104 01000104     ................
2004d10c:	01000104 01000104 01000104 01000104     ................
2004d11c:	01000104 01000104 01000104 01000104     ................
2004d12c:	01000104 01000104 01000104 01000104     ................
2004d13c:	01000104 01000104 01000104 01000104     ................
2004d14c:	01000104 01000104 01000104 01000104     ................
2004d15c:	01000104 01000104 01000104 01000104     ................
2004d16c:	01000104 01000104 01000104 01000104     ................
2004d17c:	01000104 01000104 01000104 01000104     ................
2004d18c:	01000104 01000104 01000104 01000104     ................
2004d19c:	01000104 01000104 01000104 01000104     ................
2004d1ac:	01000104 01000104 01000104 01000104     ................
2004d1bc:	01000104 01000104 01000104 01000104     ................
2004d1cc:	01000104 01000104 01000104 01000104     ................
2004d1dc:	01000104 01000104 01000104 01000104     ................
2004d1ec:	01000104 01000104 01000104 01000104     ................
2004d1fc:	01000104 01000104 01000104 01000104     ................
2004d20c:	01000104 01000104 01000104 01000104     ................
2004d21c:	01000104 01000104 01000104 01000104     ................
2004d22c:	01000104 01000104 01000104 01000104     ................
2004d23c:	01000104 01000104 01000104 01000104     ................
2004d24c:	01000104 01000104 01000104 01000104     ................
2004d25c:	01000104 01000104 01000104 01000104     ................
2004d26c:	01000104 01000104 01000104 01000104     ................
2004d27c:	01000104 01000104 01000104 01000104     ................
2004d28c:	01000104 01000104 01000104 01000104     ................
2004d29c:	01000104 01000104 01000104 01000104     ................
2004d2ac:	01000104 01000104 01000104 01000104     ................
2004d2bc:	01000104 01000104 01000104 01000104     ................
2004d2cc:	01000104 01000104 01000104 01000104     ................
2004d2dc:	01000104 01000104 01000104 01000104     ................
2004d2ec:	01000104 01000104 01000104 01000104     ................
2004d2fc:	01000104 01000104 01000104 01000104     ................
2004d30c:	01000104 01000104 01000104 01000104     ................
2004d31c:	01000104 01000104 01000104 01000104     ................
2004d32c:	01000104 01000104 01000104 01000104     ................
2004d33c:	01000104 01000104 01000104 01000104     ................
2004d34c:	01000104 01000104 01000104 01000104     ................
2004d35c:	01000104 01000104 01000104 01000104     ................
2004d36c:	01000104 01000104 01000104 01000104     ................
2004d37c:	01000104 01000104 01000104 01000104     ................
2004d38c:	01000104 01000104 01000104 01000104     ................
2004d39c:	01000104 01000104 01000104 01000104     ................
2004d3ac:	01000104 01000104 01000104 01000104     ................
2004d3bc:	01000104 01000104 01000104 01000104     ................
2004d3cc:	01000104 01000104 01000104 01000104     ................
2004d3dc:	01000104 01000104 01000104 01000104     ................
2004d3ec:	01000104 01000104 01000104 01000104     ................
2004d3fc:	01000104 01000104 01000104 01000104     ................
2004d40c:	01000104 01000104 01000104 01000104     ................
2004d41c:	01000002 01000002 01000002 01000002     ................
2004d42c:	01000002 01000002 01000002 01000002     ................
2004d43c:	01000002 01000002 01000002 01000002     ................
2004d44c:	01000002 01000002 01000002 01000002     ................
2004d45c:	01000002 01000002 01000002 01000002     ................
2004d46c:	01000002 01000002 01000002 01000002     ................
2004d47c:	01000002 01000002 01000002 01000002     ................
2004d48c:	01000002 01000002 01000002 01000002     ................
2004d49c:	01000002 01000002 01000002 01000002     ................
2004d4ac:	01000002 01000002 01000002 01000002     ................
2004d4bc:	01000002 01000002 01000002 01000002     ................
2004d4cc:	01000002 01000002 01000002 01000002     ................
2004d4dc:	01000002 01000002 01000002 01000002     ................
2004d4ec:	01000002 01000002 01000002 01000002     ................
2004d4fc:	01000002 01000002 01000002 01000002     ................
2004d50c:	01000002 01000002 01000002 01000002     ................
2004d51c:	01000002 01000002 01000002 01000002     ................
2004d52c:	01000002 01000002 01000002 01000002     ................
2004d53c:	01000002 01000002 01000002 01000002     ................
2004d54c:	01000002 01000002 01000002 01000002     ................
2004d55c:	01000002 01000002 01000002 01000002     ................
2004d56c:	01000002 01000002 01000002 01000002     ................
2004d57c:	01000002 01000002 01000002 01000002     ................
2004d58c:	01000002 01000002 01000002 01000002     ................
2004d59c:	01000002 01000002 01000002 01000002     ................
2004d5ac:	01000002 01000002 01000002 01000002     ................
2004d5bc:	01000002 01000002 01000002 01000002     ................
2004d5cc:	01000002 01000002 01000002 01000002     ................
2004d5dc:	01000002 01000002 01000002 01000002     ................
2004d5ec:	01000002 01000002 01000002 01000002     ................
2004d5fc:	01000002 01000002 01000002 01000002     ................
2004d60c:	01000002 01000002 01000002 01000002     ................
2004d61c:	01000002 01000002 01000002 01000002     ................
2004d62c:	01000002 01000002 01000002 01000002     ................
2004d63c:	01000002 01000002 01000002 01000002     ................
2004d64c:	01000002 01000002 01000002 01000002     ................
2004d65c:	01000002 01000002 01000002 01000002     ................
2004d66c:	01000002 01000002 01000002 01000002     ................
2004d67c:	01000002 01000002 01000002 01000002     ................
2004d68c:	01000002 01000002 01000002 01000002     ................
2004d69c:	01000002 01000002 01000002 01000002     ................
2004d6ac:	01000002 01000002 01000002 01000002     ................
2004d6bc:	01000002 01000002 01000002 01000002     ................
2004d6cc:	01000002 01000002 01000002 01000002     ................
2004d6dc:	01000002 01000002 01000002 01000002     ................
2004d6ec:	01000002 01000002 01000002 01000002     ................
2004d6fc:	01000002 01000002 01000002 01000002     ................
2004d70c:	01000002 01000002 01000002 01000002     ................
2004d71c:	01000002 01000002 01000002 01000002     ................
2004d72c:	01000002 01000002 01000002 01000002     ................
2004d73c:	01000002 01000002 01000002 01000002     ................
2004d74c:	01000002 01000002 01000002 01000002     ................
2004d75c:	01000002 01000002 01000002 01000002     ................
2004d76c:	01000002 01000002 01000002 01000002     ................
2004d77c:	01000002 01000002 01000002 01000002     ................
2004d78c:	01000002 01000002 01000002 01000002     ................
2004d79c:	01000002 01000002 01000002 01000002     ................
2004d7ac:	01000002 01000002 01000002 01000002     ................
2004d7bc:	01000002 01000002 01000002 01000002     ................
2004d7cc:	01000002 01000002 01000002 01000002     ................
2004d7dc:	01000002 01000002 01000002 01000002     ................
2004d7ec:	01000002 01000002 01000002 01000002     ................
2004d7fc:	01000002 01000002 01000002 01000002     ................
2004d80c:	01000002 01000002 01000002 01000002     ................
2004d81c:	01000002 01000002 01000002 01000002     ................
2004d82c:	01000002 01000002 01000002 01000002     ................
2004d83c:	01000002 01000002 01000002 01000002     ................
2004d84c:	01000002 01000002 01000002 01000002     ................
2004d85c:	01000002 01000002 01000002 01000002     ................
2004d86c:	01000002 01000002 01000002 01000002     ................
2004d87c:	01000002 01000002 01000002 01000002     ................
2004d88c:	01000002 01000002 01000002 01000002     ................
2004d89c:	01000002 01000002 01000002 01000002     ................
2004d8ac:	01000002 01000002 01000002 01000002     ................
2004d8bc:	01000002 01000002 01000002 01000002     ................
2004d8cc:	01000002 01000002 01000002 01000002     ................
2004d8dc:	01000002 01000002 01000002 01000002     ................
2004d8ec:	01000002 01000002 01000002 01000002     ................
2004d8fc:	01000002 01000002 01000002 01000002     ................
2004d90c:	01000002 01000002 01000002 01000002     ................
2004d91c:	01000002 01000002 01000002 01000002     ................
2004d92c:	01000002 01000002 01000002 01000002     ................
2004d93c:	01000002 01000002 01000002 01000002     ................
2004d94c:	01000002 01000002 01000002 01000002     ................
2004d95c:	01000002 01000002 01000002 01000002     ................
2004d96c:	01000002 01000002 01000002 01000002     ................
2004d97c:	01000002 01000002 01000002 01000002     ................
2004d98c:	01000002 01000002 01000002 01000002     ................
2004d99c:	01000002 01000002 01000002 01000002     ................
2004d9ac:	01000002 01000002 01000002 01000002     ................
2004d9bc:	01000002 01000002 01000002 01000002     ................
2004d9cc:	01000002 01000002 01000002 01000002     ................
2004d9dc:	01000002 01000002 01000002 01000002     ................
2004d9ec:	01000002 01000002 01000002 01000002     ................
2004d9fc:	01000002 01000002 01000002 01000002     ................
2004da0c:	01000002 01000002 01000002 01000002     ................
2004da1c:	01000002 01000002 01000002 01000002     ................
2004da2c:	01000002 01000002 01000002 01000002     ................
2004da3c:	01000002 01000002 01000002 01000002     ................
2004da4c:	01000002 01000002 01000002 01000002     ................
2004da5c:	01000002 01000002 01000002 01000002     ................
2004da6c:	01000002 01000002 01000002 01000002     ................
2004da7c:	01000002 01000002 01000002 01000002     ................
2004da8c:	01000002 01000002 01000002 01000002     ................
2004da9c:	01000002 01000002 01000002 01000002     ................
2004daac:	01000002 01000002 01000002 01000002     ................
2004dabc:	01000002 01000002 01000002 01000002     ................
2004dacc:	01000002 01000002 01000002 01000002     ................
2004dadc:	01000002 01000002 01000002 01000002     ................
2004daec:	01000002 01000002 01000002 01000002     ................
2004dafc:	01000002 01000002 01000002 01000002     ................
2004db0c:	01000002 01000002 01000002 01000002     ................
2004db1c:	01000002 01000002 01000002 01000002     ................
2004db2c:	01000002 01000002 01000002 01000002     ................
2004db3c:	01000002 01000002 01000002 01000002     ................
2004db4c:	01000002 01000002 01000002 01000002     ................
2004db5c:	01000002 01000002 01000002 01000002     ................
2004db6c:	01000002 01000002 01000002 01000002     ................
2004db7c:	01000002 01000002 01000002 01000002     ................
2004db8c:	01000002 01000002 01000002 01000002     ................
2004db9c:	01000002 01000002 01000002 01000002     ................
2004dbac:	01000002 01000002 01000002 01000002     ................
2004dbbc:	01000002 01000002 01000002 01000002     ................
2004dbcc:	01000002 01000002 01000002 01000002     ................
2004dbdc:	01000002 01000002 01000002 01000002     ................
2004dbec:	01000002 01000002 01000002 01000002     ................
2004dbfc:	01000002 01000002 01000002 01000002     ................
2004dc0c:	01000002 01000002 01000002 01000002     ................
2004dc1c:	01000002 01000002 01000002 01000002     ................
2004dc2c:	01000002 01000002 01000002 01000002     ................
2004dc3c:	01000002 01000002 01000002 01000002     ................
2004dc4c:	01000002 01000002 01000002 01000002     ................
2004dc5c:	01000002 01000002 01000002 01000002     ................
2004dc6c:	01000002 01000002 01000002 01000002     ................
2004dc7c:	01000002 01000002 01000002 01000002     ................
2004dc8c:	01000002 01000002 01000002 01000002     ................
2004dc9c:	01000002 01000002 01000002 01000002     ................
2004dcac:	01000002 01000002 01000002 01000002     ................
2004dcbc:	01000002 01000002 01000002 01000002     ................
2004dccc:	01000002 01000002 01000002 01000002     ................
2004dcdc:	01000002 01000002 01000002 01000002     ................
2004dcec:	01000002 01000002 01000002 01000002     ................
2004dcfc:	01000002 01000002 01000002 01000002     ................
2004dd0c:	01000002 01000002 01000002 01000002     ................
2004dd1c:	01000002 01000002 01000002 01000002     ................
2004dd2c:	01000002 01000002 01000002 01000002     ................
2004dd3c:	01000002 01000002 01000002 01000002     ................
2004dd4c:	01000002 01000002 01000002 01000002     ................
2004dd5c:	01000002 01000002 01000002 01000002     ................
2004dd6c:	01000002 01000002 01000002 01000002     ................
2004dd7c:	01000002 01000002 01000002 01000002     ................
2004dd8c:	01000002 01000002 01000002 01000002     ................
2004dd9c:	01000002 01000002 01000002 01000002     ................
2004ddac:	01000002 01000002 01000002 01000002     ................
2004ddbc:	01000002 01000002 01000002 01000002     ................
2004ddcc:	01000002 01000002 01000002 01000002     ................
2004dddc:	01000002 01000002 01000002 01000002     ................
2004ddec:	01000002 01000002 01000002 01000002     ................
2004ddfc:	01000002 01000002 01000002 01000002     ................
2004de0c:	01000002 01000002 01000002 01000002     ................
2004de1c:	01000002 01000002 01000002 01000002     ................
2004de2c:	01000002 01000002 01000002 01000002     ................
2004de3c:	01000002 01000002 01000002 01000002     ................
2004de4c:	01000002 01000002 01000002 01000002     ................
2004de5c:	01000002 01000002 01000002 01000002     ................
2004de6c:	01000002 01000002 01000002 01000002     ................
2004de7c:	01000002 01000002 01000002 01000002     ................
2004de8c:	01000002 01000002 01000002 01000002     ................
2004de9c:	01000002 01000002 01000002 01000002     ................
2004deac:	01000002 01000002 01000002 01000002     ................
2004debc:	01000002 01000002 01000002 01000002     ................
2004decc:	01000002 01000002 01000002 01000002     ................
2004dedc:	01000002 01000002 01000002 01000002     ................
2004deec:	01000002 01000002 01000002 01000002     ................
2004defc:	01000002 01000002 01000002 01000002     ................
2004df0c:	01000002 01000002 01000002 01000002     ................
2004df1c:	01000002 01000002 01000002 01000002     ................
2004df2c:	01000002 01000002 01000002 01000002     ................
2004df3c:	01000002 01000002 01000002 01000002     ................
2004df4c:	01000002 01000002 01000002 01000002     ................
2004df5c:	01000002 01000002 01000002 01000002     ................
2004df6c:	01000002 01000002 01000002 01000002     ................
2004df7c:	01000002 01000002 01000002 01000002     ................
2004df8c:	01000002 01000002 01000002 01000002     ................
2004df9c:	01000002 01000002 01000002 01000002     ................
2004dfac:	01000002 01000002 01000002 01000002     ................
2004dfbc:	01000002 01000002 01000002 01000002     ................
2004dfcc:	01000002 01000002 01000002 01000002     ................
2004dfdc:	01000002 01000002 01000002 01000002     ................
2004dfec:	01000002 01000002 01000002 01000002     ................
2004dffc:	01000002 01000002 01000002 01000002     ................
2004e00c:	01000002 01000002 01000002 01000002     ................
2004e01c:	01000002 01000002 01000002 01000002     ................
2004e02c:	01000002 01000002 01000002 01000002     ................
2004e03c:	01000002 01000002 01000002 01000002     ................
2004e04c:	01000002 01000002 01000002 01000002     ................
2004e05c:	01000002 01000002 01000002 01000002     ................
2004e06c:	01000002 01000002 01000002 01000002     ................
2004e07c:	01000002 01000002 01000002 01000002     ................
2004e08c:	01000002 01000002 01000002 01000002     ................
2004e09c:	01000002 01000002 01000002 01000002     ................
2004e0ac:	01000002 01000002 01000002 01000002     ................
2004e0bc:	01000002 01000002 01000002 01000002     ................
2004e0cc:	01000002 01000002 01000002 01000002     ................
2004e0dc:	01000002 01000002 01000002 01000002     ................
2004e0ec:	01000002 01000002 01000002 01000002     ................
2004e0fc:	01000002 01000002 01000002 01000002     ................
2004e10c:	01000002 01000002 01000002 01000002     ................
2004e11c:	01000002 01000002 01000002 01000002     ................
2004e12c:	01000002 01000002 01000002 01000002     ................
2004e13c:	01000002 01000002 01000002 01000002     ................
2004e14c:	01000002 01000002 01000002 01000002     ................
2004e15c:	01000002 01000002 01000002 01000002     ................
2004e16c:	01000002 01000002 01000002 01000002     ................
2004e17c:	01000002 01000002 01000002 01000002     ................
2004e18c:	01000002 01000002 01000002 01000002     ................
2004e19c:	01000002 01000002 01000002 01000002     ................
2004e1ac:	01000002 01000002 01000002 01000002     ................
2004e1bc:	01000002 01000002 01000002 01000002     ................
2004e1cc:	01000002 01000002 01000002 01000002     ................
2004e1dc:	01000002 01000002 01000002 01000002     ................
2004e1ec:	01000002 01000002 01000002 01000002     ................
2004e1fc:	01000002 01000002 01000002 01000002     ................
2004e20c:	01000002 01000002 01000002 01000002     ................
2004e21c:	01000002 01000002 01000002 01000002     ................
2004e22c:	01000002 01000002 01000002 01000002     ................
2004e23c:	01000002 01000002 01000002 01000002     ................
2004e24c:	01000002 01000002 01000002 01000002     ................
2004e25c:	01000002 01000002 01000002 01000002     ................
2004e26c:	01000002 01000002 01000002 01000002     ................
2004e27c:	01000002 01000002 01000002 01000002     ................
2004e28c:	01000002 01000002 01000002 01000002     ................
2004e29c:	01000002 01000002 01000002 01000002     ................
2004e2ac:	01000002 01000002 01000002 01000002     ................
2004e2bc:	01000002 01000002 01000002 01000002     ................
2004e2cc:	01000002 01000002 01000002 01000002     ................
2004e2dc:	01000002 01000002 01000002 01000002     ................
2004e2ec:	01000002 01000002 01000002 01000002     ................
2004e2fc:	01000002 01000002 01000002 01000002     ................
2004e30c:	01000002 01000002 01000002 01000002     ................
2004e31c:	01000002 01000002 01000002 01000002     ................
2004e32c:	01000002 01000002 01000002 01000002     ................
2004e33c:	01000002 01000002 01000002 01000002     ................
2004e34c:	01000002 01000002 01000002 01000002     ................
2004e35c:	01000002 01000002 01000002 01000002     ................
2004e36c:	01000002 01000002 01000002 01000002     ................
2004e37c:	01000002 01000002 01000002 01000002     ................
2004e38c:	01000002 01000002 01000002 01000002     ................
2004e39c:	01000002 01000002 01000002 01000002     ................
2004e3ac:	01000002 01000002 01000002 01000002     ................
2004e3bc:	01000002 01000002 01000002 01000002     ................
2004e3cc:	01000002 01000002 01000002 01000002     ................
2004e3dc:	01000002 01000002 01000002 01000002     ................
2004e3ec:	01000002 01000002 01000002 01000002     ................
2004e3fc:	01000002 01000002 01000002 01000002     ................
2004e40c:	01000002 01000002 01000002 01000002     ................
2004e41c:	02000003 02000003 02000003 02000003     ................
2004e42c:	02000003 02000003 02000003 02000003     ................
2004e43c:	02000003 02000003 02000003 02000003     ................
2004e44c:	02000003 02000003 02000003 02000003     ................
2004e45c:	02000003 02000003 02000003 02000003     ................
2004e46c:	02000003 02000003 02000003 02000003     ................
2004e47c:	02000003 02000003 02000003 02000003     ................
2004e48c:	02000003 02000003 02000003 02000003     ................
2004e49c:	02000003 02000003 02000003 02000003     ................
2004e4ac:	02000003 02000003 02000003 02000003     ................
2004e4bc:	02000003 02000003 02000003 02000003     ................
2004e4cc:	02000003 02000003 02000003 02000003     ................
2004e4dc:	02000003 02000003 02000003 02000003     ................
2004e4ec:	02000003 02000003 02000003 02000003     ................
2004e4fc:	02000003 02000003 02000003 02000003     ................
2004e50c:	02000003 02000003 02000003 02000003     ................
2004e51c:	02000003 02000003 02000003 02000003     ................
2004e52c:	02000003 02000003 02000003 02000003     ................
2004e53c:	02000003 02000003 02000003 02000003     ................
2004e54c:	02000003 02000003 02000003 02000003     ................
2004e55c:	02000003 02000003 02000003 02000003     ................
2004e56c:	02000003 02000003 02000003 02000003     ................
2004e57c:	02000003 02000003 02000003 02000003     ................
2004e58c:	02000003 02000003 02000003 02000003     ................
2004e59c:	02000003 02000003 02000003 02000003     ................
2004e5ac:	02000003 02000003 02000003 02000003     ................
2004e5bc:	02000003 02000003 02000003 02000003     ................
2004e5cc:	02000003 02000003 02000003 02000003     ................
2004e5dc:	02000003 02000003 02000003 02000003     ................
2004e5ec:	02000003 02000003 02000003 02000003     ................
2004e5fc:	02000003 02000003 02000003 02000003     ................
2004e60c:	02000003 02000003 02000003 02000003     ................
2004e61c:	02000003 02000003 02000003 02000003     ................
2004e62c:	02000003 02000003 02000003 02000003     ................
2004e63c:	02000003 02000003 02000003 02000003     ................
2004e64c:	02000003 02000003 02000003 02000003     ................
2004e65c:	02000003 02000003 02000003 02000003     ................
2004e66c:	02000003 02000003 02000003 02000003     ................
2004e67c:	02000003 02000003 02000003 02000003     ................
2004e68c:	02000003 02000003 02000003 02000003     ................
2004e69c:	02000003 02000003 02000003 02000003     ................
2004e6ac:	02000003 02000003 02000003 02000003     ................
2004e6bc:	02000003 02000003 02000003 02000003     ................
2004e6cc:	02000003 02000003 02000003 02000003     ................
2004e6dc:	02000003 02000003 02000003 02000003     ................
2004e6ec:	02000003 02000003 02000003 02000003     ................
2004e6fc:	02000003 02000003 02000003 02000003     ................
2004e70c:	02000003 02000003 02000003 02000003     ................
2004e71c:	02000003 02000003 02000003 02000003     ................
2004e72c:	02000003 02000003 02000003 02000003     ................
2004e73c:	02000003 02000003 02000003 02000003     ................
2004e74c:	02000003 02000003 02000003 02000003     ................
2004e75c:	02000003 02000003 02000003 02000003     ................
2004e76c:	02000003 02000003 02000003 02000003     ................
2004e77c:	02000003 02000003 02000003 02000003     ................
2004e78c:	02000003 02000003 02000003 02000003     ................
2004e79c:	02000003 02000003 02000003 02000003     ................
2004e7ac:	02000003 02000003 02000003 02000003     ................
2004e7bc:	02000003 02000003 02000003 02000003     ................
2004e7cc:	02000003 02000003 02000003 02000003     ................
2004e7dc:	02000003 02000003 02000003 02000003     ................
2004e7ec:	02000003 02000003 02000003 02000003     ................
2004e7fc:	02000003 02000003 02000003 02000003     ................
2004e80c:	02000003 02000003 02000003 02000003     ................
2004e81c:	02000003 02000003 02000003 02000003     ................
2004e82c:	02000003 02000003 02000003 02000003     ................
2004e83c:	02000003 02000003 02000003 02000003     ................
2004e84c:	02000003 02000003 02000003 02000003     ................
2004e85c:	02000003 02000003 02000003 02000003     ................
2004e86c:	02000003 02000003 02000003 02000003     ................
2004e87c:	02000003 02000003 02000003 02000003     ................
2004e88c:	02000003 02000003 02000003 02000003     ................
2004e89c:	02000003 02000003 02000003 02000003     ................
2004e8ac:	02000003 02000003 02000003 02000003     ................
2004e8bc:	02000003 02000003 02000003 02000003     ................
2004e8cc:	02000003 02000003 02000003 02000003     ................
2004e8dc:	02000003 02000003 02000003 02000003     ................
2004e8ec:	02000003 02000003 02000003 02000003     ................
2004e8fc:	02000003 02000003 02000003 02000003     ................
2004e90c:	02000003 02000003 02000003 02000003     ................
2004e91c:	02000003 02000003 02000003 02000003     ................
2004e92c:	02000003 02000003 02000003 02000003     ................
2004e93c:	02000003 02000003 02000003 02000003     ................
2004e94c:	02000003 02000003 02000003 02000003     ................
2004e95c:	02000003 02000003 02000003 02000003     ................
2004e96c:	02000003 02000003 02000003 02000003     ................
2004e97c:	02000003 02000003 02000003 02000003     ................
2004e98c:	02000003 02000003 02000003 02000003     ................
2004e99c:	02000003 02000003 02000003 02000003     ................
2004e9ac:	02000003 02000003 02000003 02000003     ................
2004e9bc:	02000003 02000003 02000003 02000003     ................
2004e9cc:	02000003 02000003 02000003 02000003     ................
2004e9dc:	02000003 02000003 02000003 02000003     ................
2004e9ec:	02000003 02000003 02000003 02000003     ................
2004e9fc:	02000003 02000003 02000003 02000003     ................
2004ea0c:	02000003 02000003 02000003 02000003     ................
2004ea1c:	02000003 02000003 02000003 02000003     ................
2004ea2c:	02000003 02000003 02000003 02000003     ................
2004ea3c:	02000003 02000003 02000003 02000003     ................
2004ea4c:	02000003 02000003 02000003 02000003     ................
2004ea5c:	02000003 02000003 02000003 02000003     ................
2004ea6c:	02000003 02000003 02000003 02000003     ................
2004ea7c:	02000003 02000003 02000003 02000003     ................
2004ea8c:	02000003 02000003 02000003 02000003     ................
2004ea9c:	02000003 02000003 02000003 02000003     ................
2004eaac:	02000003 02000003 02000003 02000003     ................
2004eabc:	02000003 02000003 02000003 02000003     ................
2004eacc:	02000003 02000003 02000003 02000003     ................
2004eadc:	02000003 02000003 02000003 02000003     ................
2004eaec:	02000003 02000003 02000003 02000003     ................
2004eafc:	02000003 02000003 02000003 02000003     ................
2004eb0c:	02000003 02000003 02000003 02000003     ................
2004eb1c:	02000003 02000003 02000003 02000003     ................
2004eb2c:	02000003 02000003 02000003 02000003     ................
2004eb3c:	02000003 02000003 02000003 02000003     ................
2004eb4c:	02000003 02000003 02000003 02000003     ................
2004eb5c:	02000003 02000003 02000003 02000003     ................
2004eb6c:	02000003 02000003 02000003 02000003     ................
2004eb7c:	02000003 02000003 02000003 02000003     ................
2004eb8c:	02000003 02000003 02000003 02000003     ................
2004eb9c:	02000003 02000003 02000003 02000003     ................
2004ebac:	02000003 02000003 02000003 02000003     ................
2004ebbc:	02000003 02000003 02000003 02000003     ................
2004ebcc:	02000003 02000003 02000003 02000003     ................
2004ebdc:	02000003 02000003 02000003 02000003     ................
2004ebec:	02000003 02000003 02000003 02000003     ................
2004ebfc:	02000003 02000003 02000003 02000003     ................
2004ec0c:	02000003 02000003 02000003 02000003     ................
2004ec1c:	01010004 01010004 01010004 01010004     ................
2004ec2c:	01010004 01010004 01010004 01010004     ................
2004ec3c:	01010004 01010004 01010004 01010004     ................
2004ec4c:	01010004 01010004 01010004 01010004     ................
2004ec5c:	01010004 01010004 01010004 01010004     ................
2004ec6c:	01010004 01010004 01010004 01010004     ................
2004ec7c:	01010004 01010004 01010004 01010004     ................
2004ec8c:	01010004 01010004 01010004 01010004     ................
2004ec9c:	01010004 01010004 01010004 01010004     ................
2004ecac:	01010004 01010004 01010004 01010004     ................
2004ecbc:	01010004 01010004 01010004 01010004     ................
2004eccc:	01010004 01010004 01010004 01010004     ................
2004ecdc:	01010004 01010004 01010004 01010004     ................
2004ecec:	01010004 01010004 01010004 01010004     ................
2004ecfc:	01010004 01010004 01010004 01010004     ................
2004ed0c:	01010004 01010004 01010004 01010004     ................
2004ed1c:	01010004 01010004 01010004 01010004     ................
2004ed2c:	01010004 01010004 01010004 01010004     ................
2004ed3c:	01010004 01010004 01010004 01010004     ................
2004ed4c:	01010004 01010004 01010004 01010004     ................
2004ed5c:	01010004 01010004 01010004 01010004     ................
2004ed6c:	01010004 01010004 01010004 01010004     ................
2004ed7c:	01010004 01010004 01010004 01010004     ................
2004ed8c:	01010004 01010004 01010004 01010004     ................
2004ed9c:	01010004 01010004 01010004 01010004     ................
2004edac:	01010004 01010004 01010004 01010004     ................
2004edbc:	01010004 01010004 01010004 01010004     ................
2004edcc:	01010004 01010004 01010004 01010004     ................
2004eddc:	01010004 01010004 01010004 01010004     ................
2004edec:	01010004 01010004 01010004 01010004     ................
2004edfc:	01010004 01010004 01010004 01010004     ................
2004ee0c:	01010004 01010004 01010004 01010004     ................
2004ee1c:	01010004 01010004 01010004 01010004     ................
2004ee2c:	01010004 01010004 01010004 01010004     ................
2004ee3c:	01010004 01010004 01010004 01010004     ................
2004ee4c:	01010004 01010004 01010004 01010004     ................
2004ee5c:	01010004 01010004 01010004 01010004     ................
2004ee6c:	01010004 01010004 01010004 01010004     ................
2004ee7c:	01010004 01010004 01010004 01010004     ................
2004ee8c:	01010004 01010004 01010004 01010004     ................
2004ee9c:	01010004 01010004 01010004 01010004     ................
2004eeac:	01010004 01010004 01010004 01010004     ................
2004eebc:	01010004 01010004 01010004 01010004     ................
2004eecc:	01010004 01010004 01010004 01010004     ................
2004eedc:	01010004 01010004 01010004 01010004     ................
2004eeec:	01010004 01010004 01010004 01010004     ................
2004eefc:	01010004 01010004 01010004 01010004     ................
2004ef0c:	01010004 01010004 01010004 01010004     ................
2004ef1c:	01010004 01010004 01010004 01010004     ................
2004ef2c:	01010004 01010004 01010004 01010004     ................
2004ef3c:	01010004 01010004 01010004 01010004     ................
2004ef4c:	01010004 01010004 01010004 01010004     ................
2004ef5c:	01010004 01010004 01010004 01010004     ................
2004ef6c:	01010004 01010004 01010004 01010004     ................
2004ef7c:	01010004 01010004 01010004 01010004     ................
2004ef8c:	01010004 01010004 01010004 01010004     ................
2004ef9c:	01010004 01010004 01010004 01010004     ................
2004efac:	01010004 01010004 01010004 01010004     ................
2004efbc:	01010004 01010004 01010004 01010004     ................
2004efcc:	01010004 01010004 01010004 01010004     ................
2004efdc:	01010004 01010004 01010004 01010004     ................
2004efec:	01010004 01010004 01010004 01010004     ................
2004effc:	01010004 01010004 01010004 01010004     ................
2004f00c:	01010004 01010004 01010004 01010004     ................
2004f01c:	03000004 03000004 03000004 03000004     ................
2004f02c:	03000004 03000004 03000004 03000004     ................
2004f03c:	03000004 03000004 03000004 03000004     ................
2004f04c:	03000004 03000004 03000004 03000004     ................
2004f05c:	03000004 03000004 03000004 03000004     ................
2004f06c:	03000004 03000004 03000004 03000004     ................
2004f07c:	03000004 03000004 03000004 03000004     ................
2004f08c:	03000004 03000004 03000004 03000004     ................
2004f09c:	03000004 03000004 03000004 03000004     ................
2004f0ac:	03000004 03000004 03000004 03000004     ................
2004f0bc:	03000004 03000004 03000004 03000004     ................
2004f0cc:	03000004 03000004 03000004 03000004     ................
2004f0dc:	03000004 03000004 03000004 03000004     ................
2004f0ec:	03000004 03000004 03000004 03000004     ................
2004f0fc:	03000004 03000004 03000004 03000004     ................
2004f10c:	03000004 03000004 03000004 03000004     ................
2004f11c:	03000004 03000004 03000004 03000004     ................
2004f12c:	03000004 03000004 03000004 03000004     ................
2004f13c:	03000004 03000004 03000004 03000004     ................
2004f14c:	03000004 03000004 03000004 03000004     ................
2004f15c:	03000004 03000004 03000004 03000004     ................
2004f16c:	03000004 03000004 03000004 03000004     ................
2004f17c:	03000004 03000004 03000004 03000004     ................
2004f18c:	03000004 03000004 03000004 03000004     ................
2004f19c:	03000004 03000004 03000004 03000004     ................
2004f1ac:	03000004 03000004 03000004 03000004     ................
2004f1bc:	03000004 03000004 03000004 03000004     ................
2004f1cc:	03000004 03000004 03000004 03000004     ................
2004f1dc:	03000004 03000004 03000004 03000004     ................
2004f1ec:	03000004 03000004 03000004 03000004     ................
2004f1fc:	03000004 03000004 03000004 03000004     ................
2004f20c:	03000004 03000004 03000004 03000004     ................
2004f21c:	03000004 03000004 03000004 03000004     ................
2004f22c:	03000004 03000004 03000004 03000004     ................
2004f23c:	03000004 03000004 03000004 03000004     ................
2004f24c:	03000004 03000004 03000004 03000004     ................
2004f25c:	03000004 03000004 03000004 03000004     ................
2004f26c:	03000004 03000004 03000004 03000004     ................
2004f27c:	03000004 03000004 03000004 03000004     ................
2004f28c:	03000004 03000004 03000004 03000004     ................
2004f29c:	03000004 03000004 03000004 03000004     ................
2004f2ac:	03000004 03000004 03000004 03000004     ................
2004f2bc:	03000004 03000004 03000004 03000004     ................
2004f2cc:	03000004 03000004 03000004 03000004     ................
2004f2dc:	03000004 03000004 03000004 03000004     ................
2004f2ec:	03000004 03000004 03000004 03000004     ................
2004f2fc:	03000004 03000004 03000004 03000004     ................
2004f30c:	03000004 03000004 03000004 03000004     ................
2004f31c:	03000004 03000004 03000004 03000004     ................
2004f32c:	03000004 03000004 03000004 03000004     ................
2004f33c:	03000004 03000004 03000004 03000004     ................
2004f34c:	03000004 03000004 03000004 03000004     ................
2004f35c:	03000004 03000004 03000004 03000004     ................
2004f36c:	03000004 03000004 03000004 03000004     ................
2004f37c:	03000004 03000004 03000004 03000004     ................
2004f38c:	03000004 03000004 03000004 03000004     ................
2004f39c:	03000004 03000004 03000004 03000004     ................
2004f3ac:	03000004 03000004 03000004 03000004     ................
2004f3bc:	03000004 03000004 03000004 03000004     ................
2004f3cc:	03000004 03000004 03000004 03000004     ................
2004f3dc:	03000004 03000004 03000004 03000004     ................
2004f3ec:	03000004 03000004 03000004 03000004     ................
2004f3fc:	03000004 03000004 03000004 03000004     ................
2004f40c:	03000004 03000004 03000004 03000004     ................

2004f41c <vldTables_max_level>:
2004f41c:	0304060c 02030303 01020202 01010101     ................
2004f42c:	01010101 01010101 00010101 00000000     ................
	...
2004f45c:	01010203 01010101 01010101 01010101     ................
2004f46c:	01010101 01010101 01010101 01010101     ................
2004f47c:	01010101 01010101 00000001 00000000     ................
	...
2004f49c:	04050a1b 03030303 01010202 00010101     ................
	...
2004f4dc:	02020308 01020202 01010101 01010101     ................
2004f4ec:	01010101 00000001 00000000 00000000     ................
	...

2004f51c <vldTables_max_run>:
2004f51c:	060a1a00 00010102 00000000 00000000     ................
	...
2004f55c:	00012800 00000000 00000000 00000000     .(..............
	...
2004f59c:	07090e00 01010203 00010101 00000000     ................
	...
2004f5dc:	01061400 00000000 00000000 00000000     ................
	...

2004f61c <vldTables_TMNMVtab0>:
2004f61c:	04fd0403 03020302 03fe03fe 02010201     ................
2004f62c:	02010201 02ff02ff 02ff02ff              ............

2004f638 <vldTables_TMNMVtab1>:
2004f638:	0af40a0c 0af50a0b 090a090a 09f609f6     ................
2004f648:	09090909 09f709f7 09080908 09f809f8     ................
2004f658:	07070707 07070707 07070707 07070707     ................
2004f668:	07f907f9 07f907f9 07f907f9 07f907f9     ................
2004f678:	07060706 07060706 07060706 07060706     ................
2004f688:	07fa07fa 07fa07fa 07fa07fa 07fa07fa     ................
2004f698:	07050705 07050705 07050705 07050705     ................
2004f6a8:	07fb07fb 07fb07fb 07fb07fb 07fb07fb     ................
2004f6b8:	06040604 06040604 06040604 06040604     ................
2004f6c8:	06040604 06040604 06040604 06040604     ................
2004f6d8:	06fc06fc 06fc06fc 06fc06fc 06fc06fc     ................
2004f6e8:	06fc06fc 06fc06fc 06fc06fc 06fc06fc     ................

2004f6f8 <vldTables_TMNMVtab2>:
2004f6f8:	0ce00c20 0ce10c1f 0b1e0b1e 0be20be2      ...............
2004f708:	0b1d0b1d 0be30be3 0b1c0b1c 0be40be4     ................
2004f718:	0b1b0b1b 0be50be5 0b1a0b1a 0be60be6     ................
2004f728:	0b190b19 0be70be7 0a180a18 0a180a18     ................
2004f738:	0ae80ae8 0ae80ae8 0a170a17 0a170a17     ................
2004f748:	0ae90ae9 0ae90ae9 0a160a16 0a160a16     ................
2004f758:	0aea0aea 0aea0aea 0a150a15 0a150a15     ................
2004f768:	0aeb0aeb 0aeb0aeb 0a140a14 0a140a14     ................
2004f778:	0aec0aec 0aec0aec 0a130a13 0a130a13     ................
2004f788:	0aed0aed 0aed0aed 0a120a12 0a120a12     ................
2004f798:	0aee0aee 0aee0aee 0a110a11 0a110a11     ................
2004f7a8:	0aef0aef 0aef0aef 0a100a10 0a100a10     ................
2004f7b8:	0af00af0 0af00af0 0a0f0a0f 0a0f0a0f     ................
2004f7c8:	0af10af1 0af10af1 0a0e0a0e 0a0e0a0e     ................
2004f7d8:	0af20af2 0af20af2 0a0d0a0d 0a0d0a0d     ................
2004f7e8:	0af30af3 0af30af3                       ........

2004f7f0 <intra_dc_threshold_table>:
2004f7f0:	110f0d20 01171513                        .......

2004f7f8 <dquant_table>:
2004f7f8:	0201feff 65747962 696c615f 615f6e67     ....byte_align_a
2004f808:	00000000 646e6966 6165685f 00726564     ....find_header.
2004f818:	6b6f6f6c 726f665f 7165535f 636e6575     look_for_Sequenc
2004f828:	65485f65 72656461 00000000 64616572     e_Header....read
2004f838:	6f6c625f 00006b63 64616572 6f6c625f     _block..read_blo
2004f848:	635f6b63 6666656f 00000000 64616572     ck_coeff....read
2004f858:	6f6c625f 635f6b63 6666656f 0063615f     _block_coeff_ac.
2004f868:	64616572 6f6c625f 645f6b63 00000063     read_block_dc...
2004f878:	64616572 00626d5f 64616572 00766d5f     read_mb.read_mv.
2004f888:	64616572 5f766d5f 61746164 00000000     read_mv_data....
2004f898:	64616572 6174735f 635f7472 0065646f     read_start_code.
2004f8a8:	64616572 6c6f765f 00000000 64616572     read_vol....read
2004f8b8:	6c6f765f 7662765f 7261705f 74656d61     _vol_vbv_paramet
2004f8c8:	00737265 64616572 6c6f765f 7662765f     ers.read_vol_vbv
2004f8d8:	7261705f 74656d61 32737265 00000000     _parameters2....
2004f8e8:	64616572 6c6f765f 6469765f 6f5f6f65     read_vol_video_o
2004f8f8:	63656a62 616c5f74 5f726579 70616873     bject_layer_shap
2004f908:	00000065 64616572 6c6f765f 6469765f     e...read_vol_vid
2004f918:	6f5f6f65 63656a62 616c5f74 5f726579     eo_object_layer_
2004f928:	74646977 00000068 64616572 706f765f     width...read_vop
2004f938:	00000000 64616572 706f765f 646f635f     ....read_vop_cod
2004f948:	00006465 64616572 706f765f 646f635f     ed..read_vop_cod
2004f958:	5f676e69 65707974 00000000 72616573     ing_type....sear
2004f968:	735f6863 74726174 646f635f 00000065     ch_start_code...
2004f978:	65646e75 656e6966 00000064              undefined...

2004f984 <$LC21>:
2004f984:	72617473 		r19, r1, r14
2004f988:	6f635f74 	tneaget	r27, rfsl4
2004f98c:	20206564 	addi	r1, r0, 25956
2004f990:	20202020 	addi	r1, r0, 8224
2004f994:	20202020 	addi	r1, r0, 8224
2004f998:	20202020 	addi	r1, r0, 8224
2004f99c:	20202020 	addi	r1, r0, 8224
2004f9a0:	20202020 	addi	r1, r0, 8224
2004f9a4:	20202020 	addi	r1, r0, 8224
2004f9a8:	00000020 		r0, r0, r0

2004f9ac <$LC22>:
2004f9ac:	646e6172 	bsrli	r3, r14, 18
2004f9b0:	615f6d6f 	muli	r10, r31, 28015
2004f9b4:	73656363 		r27, r5, r12
2004f9b8:	6c626973 	ncaget	r3, rfsl3
2004f9bc:	6f765f65 	tneaget	r27, rfsl5
2004f9c0:	2020206c 	addi	r1, r0, 8300
2004f9c4:	20202020 	addi	r1, r0, 8224
2004f9c8:	20202020 	addi	r1, r0, 8224
2004f9cc:	20202020 	addi	r1, r0, 8224
2004f9d0:	20202020 	addi	r1, r0, 8224
2004f9d4:	20202020 	addi	r1, r0, 8224
2004f9d8:	20202020 	addi	r1, r0, 8224
2004f9dc:	
2004f9e0 <$LC23>:
2004f9e0:	65646976 	bsrli	r11, r4, 22
2004f9e4:	626f5f6f 	muli	r19, r15, 24431
2004f9e8:	7463656a 		r3, r3, r12
2004f9ec:	7079745f 		r3, r25, r14
2004f9f0:	6e695f65 	tneaget	r19, rfsl5
2004f9f4:	61636964 	muli	r11, r3, 26980
2004f9f8:	6e6f6974 	ncaget	r19, rfsl4
2004f9fc:	20202020 	addi	r1, r0, 8224
2004fa00:	20202020 	addi	r1, r0, 8224
2004fa04:	20202020 	addi	r1, r0, 8224
2004fa08:	20202020 	addi	r1, r0, 8224
2004fa0c:	20202020 	addi	r1, r0, 8224
2004fa10:	20202020 	addi	r1, r0, 8224
2004fa14:	00202020 		r1, r0, r4

2004fa18 <$LC24>:
2004fa18:	6f5f7369 	tncget	r26, rfsl9
2004fa1c:	63656a62 	muli	r27, r5, 27234
2004fa20:	616c5f74 	muli	r11, r12, 24436
2004fa24:	5f726579 		r27, r18, r12
2004fa28:	6e656469 	necget	r19, rfsl9
2004fa2c:	69666974 		r11, r6, r13
2004fa30:	20207265 	addi	r1, r0, 29285
2004fa34:	20202020 	addi	r1, r0, 8224
2004fa38:	20202020 	addi	r1, r0, 8224
2004fa3c:	20202020 	addi	r1, r0, 8224
2004fa40:	20202020 	addi	r1, r0, 8224
2004fa44:	20202020 	addi	r1, r0, 8224
2004fa48:	20202020 	addi	r1, r0, 8224
2004fa4c:	00000020 		r0, r0, r0

2004fa50 <$LC25>:
2004fa50:	65646976 	bsrli	r11, r4, 22
2004fa54:	626f5f6f 	muli	r19, r15, 24431
2004fa58:	7463656a 		r3, r3, r12
2004fa5c:	79616c5f 		r11, r1, r13
2004fa60:	765f7265 		r18, r31, r14
2004fa64:	64697265 	bsrai	r3, r9, 5
2004fa68:	20202020 	addi	r1, r0, 8224
2004fa6c:	20202020 	addi	r1, r0, 8224
2004fa70:	20202020 	addi	r1, r0, 8224
2004fa74:	20202020 	addi	r1, r0, 8224
2004fa78:	20202020 	addi	r1, r0, 8224
2004fa7c:	20202020 	addi	r1, r0, 8224
2004fa80:	00202020 		r1, r0, r4

2004fa84 <$LC26>:
2004fa84:	65646976 	bsrli	r11, r4, 22
2004fa88:	626f5f6f 	muli	r19, r15, 24431
2004fa8c:	7463656a 		r3, r3, r12
2004fa90:	79616c5f 		r11, r1, r13
2004fa94:	705f7265 		r2, r31, r14
2004fa98:	726f6972 		r19, r15, r13
2004fa9c:	20797469 	addi	r3, r25, 29801
2004faa0:	20202020 	addi	r1, r0, 8224
2004faa4:	20202020 	addi	r1, r0, 8224
2004faa8:	20202020 	addi	r1, r0, 8224
2004faac:	20202020 	addi	r1, r0, 8224
2004fab0:	20202020 	addi	r1, r0, 8224
2004fab4:	20202020 	addi	r1, r0, 8224
2004fab8:	00002020 		r0, r0, r4

2004fabc <$LC27>:
2004fabc:	65707361 	bsrai	r11, r16, 1
2004fac0:	725f7463 		r18, r31, r14
2004fac4:	6f697461 	tnecget	r27, rfsl1
2004fac8:	666e695f 	bsrli	r19, r14, 31
2004facc:	2020206f 	addi	r1, r0, 8303
2004fad0:	20202020 	addi	r1, r0, 8224
2004fad4:	20202020 	addi	r1, r0, 8224
2004fad8:	20202020 	addi	r1, r0, 8224
2004fadc:	20202020 	addi	r1, r0, 8224
2004fae0:	20202020 	addi	r1, r0, 8224
2004fae4:	20202020 	addi	r1, r0, 8224
2004fae8:	
2004faec <$LC28>:
2004faec:	5f726170 		r27, r18, r12
2004faf0:	74646977 		r3, r4, r13
2004faf4:	20202068 	addi	r1, r0, 8296
2004faf8:	20202020 	addi	r1, r0, 8224
2004fafc:	20202020 	addi	r1, r0, 8224
2004fb00:	20202020 	addi	r1, r0, 8224
2004fb04:	20202020 	addi	r1, r0, 8224
2004fb08:	20202020 	addi	r1, r0, 8224
2004fb0c:	20202020 	addi	r1, r0, 8224
2004fb10:	
2004fb14 <$LC29>:
2004fb14:	5f726170 		r27, r18, r12
2004fb18:	67696568 	bslli	r27, r9, 8
2004fb1c:	20207468 	addi	r1, r0, 29800
2004fb20:	20202020 	addi	r1, r0, 8224
2004fb24:	20202020 	addi	r1, r0, 8224
2004fb28:	20202020 	addi	r1, r0, 8224
2004fb2c:	20202020 	addi	r1, r0, 8224
2004fb30:	20202020 	addi	r1, r0, 8224
2004fb34:	20202020 	addi	r1, r0, 8224
2004fb38:	
2004fb3c <$LC30>:
2004fb3c:	5f6c6f76 		r27, r12, r13
2004fb40:	746e6f63 		r3, r14, r13
2004fb44:	5f6c6f72 		r27, r12, r13
2004fb48:	61726170 	muli	r11, r18, 24944
2004fb4c:	6574656d 	bslli	r11, r20, 13
2004fb50:	20207372 	addi	r1, r0, 29554
2004fb54:	20202020 	addi	r1, r0, 8224
2004fb58:	20202020 	addi	r1, r0, 8224
2004fb5c:	20202020 	addi	r1, r0, 8224
2004fb60:	20202020 	addi	r1, r0, 8224
2004fb64:	20202020 	addi	r1, r0, 8224
2004fb68:	20202020 	addi	r1, r0, 8224
2004fb6c:	00000020 		r0, r0, r0

2004fb70 <$LC31>:
2004fb70:	6f726863 	ncaget	r27, rfsl3
2004fb74:	665f616d 	bsrli	r18, r31, 13
2004fb78:	616d726f 	muli	r11, r13, 29295
2004fb7c:	20202074 	addi	r1, r0, 8308
2004fb80:	20202020 	addi	r1, r0, 8224
2004fb84:	20202020 	addi	r1, r0, 8224
2004fb88:	20202020 	addi	r1, r0, 8224
2004fb8c:	20202020 	addi	r1, r0, 8224
2004fb90:	20202020 	addi	r1, r0, 8224
2004fb94:	20202020 	addi	r1, r0, 8224
2004fb98:	
2004fb9c <$LC32>:
2004fb9c:	5f776f6c 		r27, r23, r13
2004fba0:	616c6564 	muli	r11, r12, 25956
2004fba4:	20202079 	addi	r1, r0, 8313
2004fba8:	20202020 	addi	r1, r0, 8224
2004fbac:	20202020 	addi	r1, r0, 8224
2004fbb0:	20202020 	addi	r1, r0, 8224
2004fbb4:	20202020 	addi	r1, r0, 8224
2004fbb8:	20202020 	addi	r1, r0, 8224
2004fbbc:	20202020 	addi	r1, r0, 8224
2004fbc0:	
2004fbc4 <$LC33>:
2004fbc4:	5f766276 		r27, r22, r12
2004fbc8:	61726170 	muli	r11, r18, 24944
2004fbcc:	6574656d 	bslli	r11, r20, 13
2004fbd0:	20207372 	addi	r1, r0, 29554
2004fbd4:	20202020 	addi	r1, r0, 8224
2004fbd8:	20202020 	addi	r1, r0, 8224
2004fbdc:	20202020 	addi	r1, r0, 8224
2004fbe0:	20202020 	addi	r1, r0, 8224
2004fbe4:	20202020 	addi	r1, r0, 8224
2004fbe8:	20202020 	addi	r1, r0, 8224
2004fbec:	00000020 		r0, r0, r0

2004fbf0 <$LC34>:
2004fbf0:	73726966 		r27, r18, r13
2004fbf4:	61685f74 	muli	r11, r8, 24436
2004fbf8:	625f666c 	muli	r18, r31, 26220
2004fbfc:	725f7469 		r18, r31, r14
2004fc00:	20657461 	addi	r3, r5, 29793
2004fc04:	20202020 	addi	r1, r0, 8224
2004fc08:	20202020 	addi	r1, r0, 8224
2004fc0c:	20202020 	addi	r1, r0, 8224
2004fc10:	20202020 	addi	r1, r0, 8224
2004fc14:	20202020 	addi	r1, r0, 8224
2004fc18:	20202020 	addi	r1, r0, 8224
2004fc1c:	00002020 		r0, r0, r4

2004fc20 <$LC35>:
2004fc20:	6b72616d 		r27, r18, r12
2004fc24:	625f7265 	muli	r18, r31, 29285
2004fc28:	20207469 	addi	r1, r0, 29801
2004fc2c:	20202020 	addi	r1, r0, 8224
2004fc30:	20202020 	addi	r1, r0, 8224
2004fc34:	20202020 	addi	r1, r0, 8224
2004fc38:	20202020 	addi	r1, r0, 8224
2004fc3c:	20202020 	addi	r1, r0, 8224
2004fc40:	20202020 	addi	r1, r0, 8224
2004fc44:	00000020 		r0, r0, r0

2004fc48 <$LC36>:
2004fc48:	7474616c 		r3, r20, r12
2004fc4c:	685f7265 		r2, r31, r14
2004fc50:	5f666c61 		r27, r6, r13
2004fc54:	5f746962 		r27, r20, r13
2004fc58:	65746172 	bsrli	r11, r20, 18
2004fc5c:	20202020 	addi	r1, r0, 8224
2004fc60:	20202020 	addi	r1, r0, 8224
2004fc64:	20202020 	addi	r1, r0, 8224
2004fc68:	20202020 	addi	r1, r0, 8224
2004fc6c:	20202020 	addi	r1, r0, 8224
2004fc70:	20202020 	addi	r1, r0, 8224
2004fc74:	00202020 		r1, r0, r4

2004fc78 <$LC37>:
2004fc78:	73726966 		r27, r18, r13
2004fc7c:	61685f74 	muli	r11, r8, 24436
2004fc80:	765f666c 		r18, r31, r12
2004fc84:	625f7662 	muli	r18, r31, 30306
2004fc88:	65666675 		r11, r6, r12
2004fc8c:	69735f72 		r11, r19, r11
2004fc90:	2020657a 	addi	r1, r0, 25978
2004fc94:	20202020 	addi	r1, r0, 8224
2004fc98:	20202020 	addi	r1, r0, 8224
2004fc9c:	20202020 	addi	r1, r0, 8224
2004fca0:	20202020 	addi	r1, r0, 8224
2004fca4:	20202020 	addi	r1, r0, 8224
2004fca8:	20202020 	addi	r1, r0, 8224
2004fcac:	00000020 		r0, r0, r0

2004fcb0 <$LC38>:
2004fcb0:	7474616c 		r3, r20, r12
2004fcb4:	685f7265 		r2, r31, r14
2004fcb8:	5f666c61 		r27, r6, r13
2004fcbc:	5f766276 		r27, r22, r12
2004fcc0:	66667562 	bslli	r19, r6, 2
2004fcc4:	735f7265 		r26, r31, r14
2004fcc8:	20657a69 	addi	r3, r5, 31337
2004fccc:	20202020 	addi	r1, r0, 8224
2004fcd0:	20202020 	addi	r1, r0, 8224
2004fcd4:	20202020 	addi	r1, r0, 8224
2004fcd8:	20202020 	addi	r1, r0, 8224
2004fcdc:	20202020 	addi	r1, r0, 8224
2004fce0:	20202020 	addi	r1, r0, 8224
2004fce4:	00002020 		r0, r0, r4

2004fce8 <$LC39>:
2004fce8:	73726966 		r27, r18, r13
2004fcec:	61685f74 	muli	r11, r8, 24436
2004fcf0:	765f666c 		r18, r31, r12
2004fcf4:	6f5f7662 	tnecget	r26, rfsl2
2004fcf8:	70756363 		r3, r21, r12
2004fcfc:	79636e61 		r11, r3, r13
2004fd00:	20202020 	addi	r1, r0, 8224
2004fd04:	20202020 	addi	r1, r0, 8224
2004fd08:	20202020 	addi	r1, r0, 8224
2004fd0c:	20202020 	addi	r1, r0, 8224
2004fd10:	20202020 	addi	r1, r0, 8224
2004fd14:	20202020 	addi	r1, r0, 8224
2004fd18:	00202020 		r1, r0, r4

2004fd1c <$LC40>:
2004fd1c:	7474616c 		r3, r20, r12
2004fd20:	685f7265 		r2, r31, r14
2004fd24:	5f666c61 		r27, r6, r13
2004fd28:	5f766276 		r27, r22, r12
2004fd2c:	7563636f 		r11, r3, r12
2004fd30:	636e6170 	muli	r27, r14, 24944
2004fd34:	20202079 	addi	r1, r0, 8313
2004fd38:	20202020 	addi	r1, r0, 8224
2004fd3c:	20202020 	addi	r1, r0, 8224
2004fd40:	20202020 	addi	r1, r0, 8224
2004fd44:	20202020 	addi	r1, r0, 8224
2004fd48:	20202020 	addi	r1, r0, 8224
2004fd4c:	20202020 	addi	r1, r0, 8224
2004fd50:	
2004fd54 <$LC41>:
2004fd54:	65646976 	bsrli	r11, r4, 22
2004fd58:	626f5f6f 	muli	r19, r15, 24431
2004fd5c:	7463656a 		r3, r3, r12
2004fd60:	79616c5f 		r11, r1, r13
2004fd64:	735f7265 		r26, r31, r14
2004fd68:	65706168 	bsrli	r11, r16, 8
2004fd6c:	20202020 	addi	r1, r0, 8224
2004fd70:	20202020 	addi	r1, r0, 8224
2004fd74:	20202020 	addi	r1, r0, 8224
2004fd78:	20202020 	addi	r1, r0, 8224
2004fd7c:	20202020 	addi	r1, r0, 8224
2004fd80:	20202020 	addi	r1, r0, 8224
2004fd84:	00202020 		r1, r0, r4

2004fd88 <$LC42>:
2004fd88:	5f706f76 		r27, r16, r13
2004fd8c:	656d6974 	bsrli	r11, r13, 20
2004fd90:	636e695f 	muli	r27, r14, 26975
2004fd94:	656d6572 	bslli	r11, r13, 18
2004fd98:	725f746e 		r18, r31, r14
2004fd9c:	6c6f7365 	tncget	r3, rfsl5
2004fda0:	6f697475 	tnecget	r27, rfsl5
2004fda4:	2020206e 	addi	r1, r0, 8302
2004fda8:	20202020 	addi	r1, r0, 8224
2004fdac:	20202020 	addi	r1, r0, 8224
2004fdb0:	20202020 	addi	r1, r0, 8224
2004fdb4:	20202020 	addi	r1, r0, 8224
2004fdb8:	20202020 	addi	r1, r0, 8224
2004fdbc:	20202020 	addi	r1, r0, 8224
2004fdc0:	
2004fdc4 <$LC43>:
2004fdc4:	65786966 	bsrli	r11, r24, 6
2004fdc8:	6f765f64 	tneaget	r27, rfsl4
2004fdcc:	61725f70 	muli	r11, r18, 24432
2004fdd0:	20206574 	addi	r1, r0, 25972
2004fdd4:	20202020 	addi	r1, r0, 8224
2004fdd8:	20202020 	addi	r1, r0, 8224
2004fddc:	20202020 	addi	r1, r0, 8224
2004fde0:	20202020 	addi	r1, r0, 8224
2004fde4:	20202020 	addi	r1, r0, 8224
2004fde8:	20202020 	addi	r1, r0, 8224
2004fdec:	00000020 		r0, r0, r0

2004fdf0 <$LC44>:
2004fdf0:	5f706f76 		r27, r16, r13
2004fdf4:	656d6974 	bsrli	r11, r13, 20
2004fdf8:	636e695f 	muli	r27, r14, 26975
2004fdfc:	656d6572 	bslli	r11, r13, 18
2004fe00:	725f746e 		r18, r31, r14
2004fe04:	6c6f7365 	tncget	r3, rfsl5
2004fe08:	6f697475 	tnecget	r27, rfsl5
2004fe0c:	69625f6e 		r11, r2, r11
2004fe10:	20207374 	addi	r1, r0, 29556
2004fe14:	20202020 	addi	r1, r0, 8224
2004fe18:	20202020 	addi	r1, r0, 8224
2004fe1c:	20202020 	addi	r1, r0, 8224
2004fe20:	20202020 	addi	r1, r0, 8224
2004fe24:	20202020 	addi	r1, r0, 8224
2004fe28:	20202020 	addi	r1, r0, 8224
2004fe2c:	00000020 		r0, r0, r0

2004fe30 <$LC45>:
2004fe30:	65646976 	bsrli	r11, r4, 22
2004fe34:	626f5f6f 	muli	r19, r15, 24431
2004fe38:	7463656a 		r3, r3, r12
2004fe3c:	79616c5f 		r11, r1, r13
2004fe40:	775f7265 		r26, r31, r14
2004fe44:	68746469 		r3, r20, r12
2004fe48:	20202020 	addi	r1, r0, 8224
2004fe4c:	20202020 	addi	r1, r0, 8224
2004fe50:	20202020 	addi	r1, r0, 8224
2004fe54:	20202020 	addi	r1, r0, 8224
2004fe58:	20202020 	addi	r1, r0, 8224
2004fe5c:	20202020 	addi	r1, r0, 8224
2004fe60:	00202020 		r1, r0, r4

2004fe64 <$LC46>:
2004fe64:	65646976 	bsrli	r11, r4, 22
2004fe68:	626f5f6f 	muli	r19, r15, 24431
2004fe6c:	7463656a 		r3, r3, r12
2004fe70:	79616c5f 		r11, r1, r13
2004fe74:	685f7265 		r2, r31, r14
2004fe78:	68676965 		r3, r7, r13
2004fe7c:	20202074 	addi	r1, r0, 8308
2004fe80:	20202020 	addi	r1, r0, 8224
2004fe84:	20202020 	addi	r1, r0, 8224
2004fe88:	20202020 	addi	r1, r0, 8224
2004fe8c:	20202020 	addi	r1, r0, 8224
2004fe90:	20202020 	addi	r1, r0, 8224
2004fe94:	20202020 	addi	r1, r0, 8224
2004fe98:	
2004fe9c <$LC47>:
2004fe9c:	65746e69 		r11, r20, r13
2004fea0:	63616c72 	muli	r27, r1, 27762
2004fea4:	20206465 	addi	r1, r0, 25701
2004fea8:	20202020 	addi	r1, r0, 8224
2004feac:	20202020 	addi	r1, r0, 8224
2004feb0:	20202020 	addi	r1, r0, 8224
2004feb4:	20202020 	addi	r1, r0, 8224
2004feb8:	20202020 	addi	r1, r0, 8224
2004febc:	20202020 	addi	r1, r0, 8224
2004fec0:	00000020 		r0, r0, r0

2004fec4 <$LC48>:
2004fec4:	636d626f 	muli	r27, r13, 25199
2004fec8:	7369645f 		r27, r9, r12
2004fecc:	656c6261 	bsrai	r11, r12, 1
2004fed0:	20202020 	addi	r1, r0, 8224
2004fed4:	20202020 	addi	r1, r0, 8224
2004fed8:	20202020 	addi	r1, r0, 8224
2004fedc:	20202020 	addi	r1, r0, 8224
2004fee0:	20202020 	addi	r1, r0, 8224
2004fee4:	20202020 	addi	r1, r0, 8224
2004fee8:	00202020 		r1, r0, r4

2004feec <$LC49>:
2004feec:	69727073 		r11, r18, r14
2004fef0:	655f6574 	bslli	r10, r31, 20
2004fef4:	6c62616e 	ncget	r3, rfsl14
2004fef8:	20202065 	addi	r1, r0, 8293
2004fefc:	20202020 	addi	r1, r0, 8224
2004ff00:	20202020 	addi	r1, r0, 8224
2004ff04:	20202020 	addi	r1, r0, 8224
2004ff08:	20202020 	addi	r1, r0, 8224
2004ff0c:	20202020 	addi	r1, r0, 8224
2004ff10:	20202020 	addi	r1, r0, 8224
2004ff14:	
2004ff18 <$LC50>:
2004ff18:	5f746f6e 		r27, r20, r13
2004ff1c:	69625f38 		r11, r2, r11
2004ff20:	20202074 	addi	r1, r0, 8308
2004ff24:	20202020 	addi	r1, r0, 8224
2004ff28:	20202020 	addi	r1, r0, 8224
2004ff2c:	20202020 	addi	r1, r0, 8224
2004ff30:	20202020 	addi	r1, r0, 8224
2004ff34:	20202020 	addi	r1, r0, 8224
2004ff38:	20202020 	addi	r1, r0, 8224
2004ff3c:	
2004ff40 <$LC51>:
2004ff40:	6e617571 	tnecget	r19, rfsl1
2004ff44:	79745f74 		r11, r20, r11
2004ff48:	20206570 	addi	r1, r0, 25968
2004ff4c:	20202020 	addi	r1, r0, 8224
2004ff50:	20202020 	addi	r1, r0, 8224
2004ff54:	20202020 	addi	r1, r0, 8224
2004ff58:	20202020 	addi	r1, r0, 8224
2004ff5c:	20202020 	addi	r1, r0, 8224
2004ff60:	20202020 	addi	r1, r0, 8224
2004ff64:	00000020 		r0, r0, r0

2004ff68 <$LC52>:
2004ff68:	706d6f63 		r3, r13, r13
2004ff6c:	6978656c 		r11, r24, r12
2004ff70:	655f7974 	bsrli	r10, r31, 20
2004ff74:	6d697473 	tnecget	r11, rfsl3
2004ff78:	6f697461 	tnecget	r27, rfsl1
2004ff7c:	69645f6e 		r11, r4, r11
2004ff80:	6c626173 	ncget	r3, rfsl3
2004ff84:	20202065 	addi	r1, r0, 8293
2004ff88:	20202020 	addi	r1, r0, 8224
2004ff8c:	20202020 	addi	r1, r0, 8224
2004ff90:	20202020 	addi	r1, r0, 8224
2004ff94:	20202020 	addi	r1, r0, 8224
2004ff98:	20202020 	addi	r1, r0, 8224
2004ff9c:	20202020 	addi	r1, r0, 8224
2004ffa0:	
2004ffa4 <$LC53>:
2004ffa4:	79736572 		r11, r19, r12
2004ffa8:	6d5f636e 	ncget	r10, rfsl14
2004ffac:	656b7261 	bsrai	r11, r11, 1
2004ffb0:	69645f72 		r11, r4, r11
2004ffb4:	6c626173 	ncget	r3, rfsl3
2004ffb8:	20202065 	addi	r1, r0, 8293
2004ffbc:	20202020 	addi	r1, r0, 8224
2004ffc0:	20202020 	addi	r1, r0, 8224
2004ffc4:	20202020 	addi	r1, r0, 8224
2004ffc8:	20202020 	addi	r1, r0, 8224
2004ffcc:	20202020 	addi	r1, r0, 8224
2004ffd0:	20202020 	addi	r1, r0, 8224
2004ffd4:	
2004ffd8 <$LC54>:
2004ffd8:	61746164 	muli	r11, r20, 24932
2004ffdc:	7261705f 		r19, r1, r14
2004ffe0:	69746974 		r11, r20, r13
2004ffe4:	64656e6f 		r3, r5, r13
2004ffe8:	20202020 	addi	r1, r0, 8224
2004ffec:	20202020 	addi	r1, r0, 8224
2004fff0:	20202020 	addi	r1, r0, 8224
2004fff4:	20202020 	addi	r1, r0, 8224
2004fff8:	20202020 	addi	r1, r0, 8224
2004fffc:	20202020 	addi	r1, r0, 8224
20050000:	00202020 		r1, r0, r4

20050004 <$LC55>:
20050004:	6c616373 	ncget	r3, rfsl3
20050008:	6c696261 	ncget	r3, rfsl1
2005000c:	20797469 	addi	r3, r25, 29801
20050010:	20202020 	addi	r1, r0, 8224
20050014:	20202020 	addi	r1, r0, 8224
20050018:	20202020 	addi	r1, r0, 8224
2005001c:	20202020 	addi	r1, r0, 8224
20050020:	20202020 	addi	r1, r0, 8224
20050024:	20202020 	addi	r1, r0, 8224
20050028:	00002020 		r0, r0, r4

2005002c <$LC56>:
2005002c:	5f706f76 		r27, r16, r13
20050030:	69646f63 		r11, r4, r13
20050034:	745f676e 		r2, r31, r12
20050038:	20657079 	addi	r3, r5, 28793
2005003c:	20202020 	addi	r1, r0, 8224
20050040:	20202020 	addi	r1, r0, 8224
20050044:	20202020 	addi	r1, r0, 8224
20050048:	20202020 	addi	r1, r0, 8224
2005004c:	20202020 	addi	r1, r0, 8224
20050050:	20202020 	addi	r1, r0, 8224
20050054:	00002020 		r0, r0, r4

20050058 <$LC57>:
20050058:	75646f6d 		r11, r4, r13
2005005c:	745f6f6c 		r2, r31, r13
20050060:	5f656d69 		r27, r5, r13
20050064:	65736162 	bsrli	r11, r19, 2
20050068:	20202020 	addi	r1, r0, 8224
2005006c:	20202020 	addi	r1, r0, 8224
20050070:	20202020 	addi	r1, r0, 8224
20050074:	20202020 	addi	r1, r0, 8224
20050078:	20202020 	addi	r1, r0, 8224
2005007c:	20202020 	addi	r1, r0, 8224
20050080:	00202020 		r1, r0, r4

20050084 <$LC58>:
20050084:	5f706f76 		r27, r16, r13
20050088:	656d6974 	bsrli	r11, r13, 20
2005008c:	636e695f 	muli	r27, r14, 26975
20050090:	656d6572 	bslli	r11, r13, 18
20050094:	2020746e 	addi	r1, r0, 29806
20050098:	20202020 	addi	r1, r0, 8224
2005009c:	20202020 	addi	r1, r0, 8224
200500a0:	20202020 	addi	r1, r0, 8224
200500a4:	20202020 	addi	r1, r0, 8224
200500a8:	20202020 	addi	r1, r0, 8224
200500ac:	20202020 	addi	r1, r0, 8224
200500b0:	00000020 		r0, r0, r0

200500b4 <$LC59>:
200500b4:	5f706f76 		r27, r16, r13
200500b8:	65646f63 		r11, r4, r13
200500bc:	20202064 	addi	r1, r0, 8292
200500c0:	20202020 	addi	r1, r0, 8224
200500c4:	20202020 	addi	r1, r0, 8224
200500c8:	20202020 	addi	r1, r0, 8224
200500cc:	20202020 	addi	r1, r0, 8224
200500d0:	20202020 	addi	r1, r0, 8224
200500d4:	20202020 	addi	r1, r0, 8224
200500d8:	
200500dc <$LC60>:
200500dc:	5f706f76 		r27, r16, r13
200500e0:	6e756f72 	necaget	r19, rfsl2
200500e4:	676e6964 	bsrli	r27, r14, 4
200500e8:	7079745f 		r3, r25, r14
200500ec:	20202065 	addi	r1, r0, 8293
200500f0:	20202020 	addi	r1, r0, 8224
200500f4:	20202020 	addi	r1, r0, 8224
200500f8:	20202020 	addi	r1, r0, 8224
200500fc:	20202020 	addi	r1, r0, 8224
20050100:	20202020 	addi	r1, r0, 8224
20050104:	20202020 	addi	r1, r0, 8224
20050108:	
2005010c <$LC61>:
2005010c:	72746e69 		r19, r20, r13
20050110:	63645f61 	muli	r27, r4, 24417
20050114:	636c765f 	muli	r27, r12, 30303
20050118:	7268745f 		r19, r8, r14
2005011c:	20202020 	addi	r1, r0, 8224
20050120:	20202020 	addi	r1, r0, 8224
20050124:	20202020 	addi	r1, r0, 8224
20050128:	20202020 	addi	r1, r0, 8224
2005012c:	20202020 	addi	r1, r0, 8224
20050130:	20202020 	addi	r1, r0, 8224
20050134:	00202020 		r1, r0, r4

20050138 <$LC62>:
20050138:	5f706f76 		r27, r16, r13
2005013c:	6e617571 	tnecget	r19, rfsl1
20050140:	20202074 	addi	r1, r0, 8308
20050144:	20202020 	addi	r1, r0, 8224
20050148:	20202020 	addi	r1, r0, 8224
2005014c:	20202020 	addi	r1, r0, 8224
20050150:	20202020 	addi	r1, r0, 8224
20050154:	20202020 	addi	r1, r0, 8224
20050158:	20202020 	addi	r1, r0, 8224
2005015c:	
20050160 <$LC63>:
20050160:	5f706f76 		r27, r16, r13
20050164:	646f6366 	bsrai	r3, r15, 6
20050168:	6f665f65 	tneaget	r27, rfsl5
2005016c:	72617772 		r19, r1, r14
20050170:	20202064 	addi	r1, r0, 8292
20050174:	20202020 	addi	r1, r0, 8224
20050178:	20202020 	addi	r1, r0, 8224
2005017c:	20202020 	addi	r1, r0, 8224
20050180:	20202020 	addi	r1, r0, 8224
20050184:	20202020 	addi	r1, r0, 8224
20050188:	20202020 	addi	r1, r0, 8224
2005018c:	
20050190 <$LC64>:
20050190:	5f706f76 		r27, r16, r13
20050194:	646f6366 	bsrai	r3, r15, 6
20050198:	61625f65 	muli	r11, r2, 24421
2005019c:	61776b63 	muli	r11, r23, 27491
200501a0:	20206472 	addi	r1, r0, 25714
200501a4:	20202020 	addi	r1, r0, 8224
200501a8:	20202020 	addi	r1, r0, 8224
200501ac:	20202020 	addi	r1, r0, 8224
200501b0:	20202020 	addi	r1, r0, 8224
200501b4:	20202020 	addi	r1, r0, 8224
200501b8:	20202020 	addi	r1, r0, 8224
200501bc:	00000020 		r0, r0, r0

200501c0 <$LC65>:
200501c0:	5f746f6e 		r27, r20, r13
200501c4:	65646f63 		r11, r4, r13
200501c8:	20202064 	addi	r1, r0, 8292
200501cc:	20202020 	addi	r1, r0, 8224
200501d0:	20202020 	addi	r1, r0, 8224
200501d4:	20202020 	addi	r1, r0, 8224
200501d8:	20202020 	addi	r1, r0, 8224
200501dc:	20202020 	addi	r1, r0, 8224
200501e0:	20202020 	addi	r1, r0, 8224
200501e4:	
200501e8 <$LC66>:
200501e8:	7062636d 		r3, r2, r12
200501ec:	20202063 	addi	r1, r0, 8291
200501f0:	20202020 	addi	r1, r0, 8224
200501f4:	20202020 	addi	r1, r0, 8224
200501f8:	20202020 	addi	r1, r0, 8224
200501fc:	20202020 	addi	r1, r0, 8224
20050200:	20202020 	addi	r1, r0, 8224
20050204:	20202020 	addi	r1, r0, 8224
20050208:	
2005020c <$LC67>:
2005020c:	705f6361 		r2, r31, r12
20050210:	5f646572 		r27, r4, r12
20050214:	67616c66 	bslli	r27, r1, 6
20050218:	20202020 	addi	r1, r0, 8224
2005021c:	20202020 	addi	r1, r0, 8224
20050220:	20202020 	addi	r1, r0, 8224
20050224:	20202020 	addi	r1, r0, 8224
20050228:	20202020 	addi	r1, r0, 8224
2005022c:	20202020 	addi	r1, r0, 8224
20050230:	00202020 		r1, r0, r4

20050234 <$LC68>:
20050234:	79706263 		r11, r16, r12
20050238:	20202020 	addi	r1, r0, 8224
2005023c:	20202020 	addi	r1, r0, 8224
20050240:	20202020 	addi	r1, r0, 8224
20050244:	20202020 	addi	r1, r0, 8224
20050248:	20202020 	addi	r1, r0, 8224
2005024c:	20202020 	addi	r1, r0, 8224
20050250:	00202020 		r1, r0, r4

20050254 <$LC69>:
20050254:	61757164 	muli	r11, r21, 29028
20050258:	2020746e 	addi	r1, r0, 29806
2005025c:	20202020 	addi	r1, r0, 8224
20050260:	20202020 	addi	r1, r0, 8224
20050264:	20202020 	addi	r1, r0, 8224
20050268:	20202020 	addi	r1, r0, 8224
2005026c:	20202020 	addi	r1, r0, 8224
20050270:	20202020 	addi	r1, r0, 8224
20050274:	00000020 		r0, r0, r0

20050278 <$LC70>:
20050278:	735f6364 		r26, r31, r12
2005027c:	20657a69 	addi	r3, r5, 31337
20050280:	20202020 	addi	r1, r0, 8224
20050284:	20202020 	addi	r1, r0, 8224
20050288:	20202020 	addi	r1, r0, 8224
2005028c:	00202020 		r1, r0, r4

20050290 <$LC71>:
20050290:	645f6364 	bsrai	r2, r31, 4
20050294:	20206669 	addi	r1, r0, 26217
20050298:	20202020 	addi	r1, r0, 8224
2005029c:	20202020 	addi	r1, r0, 8224
200502a0:	20202020 	addi	r1, r0, 8224
200502a4:	00002020 		r0, r0, r4

200502a8 <$LC72>:
200502a8:	5f746567 		r27, r20, r12
200502ac:	66656f63 		r19, r5, r13
200502b0:	20202066 	addi	r1, r0, 8294
200502b4:	20202020 	addi	r1, r0, 8224
200502b8:	20202020 	addi	r1, r0, 8224
200502bc:	00000020 		r0, r0, r0

200502c0 <$LC73>:
200502c0:	69726f68 		r11, r18, r13
200502c4:	746e6f7a 		r3, r14, r13
200502c8:	6d5f6c61 	necaget	r10, rfsl1
200502cc:	61645f76 	muli	r11, r4, 24438
200502d0:	20206174 	addi	r1, r0, 24948
200502d4:	20202020 	addi	r1, r0, 8224
200502d8:	20202020 	addi	r1, r0, 8224
200502dc:	00002020 		r0, r0, r4

200502e0 <$LC74>:
200502e0:	69726f68 		r11, r18, r13
200502e4:	746e6f7a 		r3, r14, r13
200502e8:	6d5f6c61 	necaget	r10, rfsl1
200502ec:	65725f76 		r11, r18, r11
200502f0:	75646973 		r11, r4, r13
200502f4:	20206c61 	addi	r1, r0, 27745
200502f8:	20202020 	addi	r1, r0, 8224
200502fc:	20202020 	addi	r1, r0, 8224
20050300:	00002020 		r0, r0, r4

20050304 <$LC75>:
20050304:	74726576 		r3, r18, r12
20050308:	6c616369 	ncget	r3, rfsl9
2005030c:	5f766d5f 		r27, r22, r13
20050310:	61746164 	muli	r11, r20, 24932
20050314:	20202020 	addi	r1, r0, 8224
20050318:	20202020 	addi	r1, r0, 8224
2005031c:	20202020 	addi	r1, r0, 8224
20050320:	
20050324 <$LC76>:
20050324:	74726576 		r3, r18, r12
20050328:	6c616369 	ncget	r3, rfsl9
2005032c:	5f766d5f 		r27, r22, r13
20050330:	69736572 		r11, r19, r12
20050334:	6c617564 	tnecget	r3, rfsl4
20050338:	20202020 	addi	r1, r0, 8224
2005033c:	20202020 	addi	r1, r0, 8224
20050340:	20202020 	addi	r1, r0, 8224
20050344:	
20050348 <$L505>:
20050348:	2002b390 	addi	r0, r2, -19568
2005034c:	2002b40c 	addi	r0, r2, -19444
20050350:	2002b538 	addi	r0, r2, -19144
20050354:	2002b5bc 	addi	r0, r2, -19012
20050358:	2002b694 	addi	r0, r2, -18796
2005035c:	2002b808 	addi	r0, r2, -18424
20050360:	2002b8e0 	addi	r0, r2, -18208
20050364:	2002bf28 	addi	r0, r2, -16600
20050368:	2002c000 	addi	r0, r2, -16384
2005036c:	2002c2e4 	addi	r0, r2, -15644
20050370:	2002c3f8 	addi	r0, r2, -15368
20050374:	2002c47c 	addi	r0, r2, -15236
20050378:	2002c500 	addi	r0, r2, -15104
2005037c:	2002c584 	addi	r0, r2, -14972
20050380:	2002c608 	addi	r0, r2, -14840
20050384:	2002c68c 	addi	r0, r2, -14708
20050388:	2002c710 	addi	r0, r2, -14576
2005038c:	2002c794 	addi	r0, r2, -14444
20050390:	2002ca50 	addi	r0, r2, -13744
20050394:	2002cb28 	addi	r0, r2, -13528
20050398:	2002cc00 	addi	r0, r2, -13312
2005039c:	61766461 	muli	r11, r22, 25697
200503a0:	0065636e 		r3, r5, r12
200503a4:	68746567 		r3, r20, r12
200503a8:	
200503c4 <$L250>:
200503c4:	20030988 	addi	r0, r3, 2440
200503c8:	200309ec 	addi	r0, r3, 2540
200503cc:	20030a78 	addi	r0, r3, 2680
200503d0:	20030b04 	addi	r0, r3, 2820
200503d4:	20030c0c 	addi	r0, r3, 3084
200503d8:	61766461 	muli	r11, r22, 25697
200503dc:	0065636e 		r3, r5, r12
200503e0:	68746567 		r3, r20, r12
200503e4:	
2005040c <$L287>:
2005040c:	200358dc 	addi	r0, r3, 22748
20050410:	20035940 	addi	r0, r3, 22848
20050414:	200359cc 	addi	r0, r3, 22988
20050418:	20035a58 	addi	r0, r3, 23128
2005041c:	20035ae4 	addi	r0, r3, 23268
20050420:	20035b70 	addi	r0, r3, 23408
20050424:	20036088 	addi	r0, r3, 24712
20050428:	61766461 	muli	r11, r22, 25697
2005042c:	0065636e 		r3, r5, r12
20050430:	64657270 	bsrai	r3, r5, 16
20050434:	
2005044c <Scanmode>:
2005044c:	06050100 1c1b0f0e 0d070402 2a1d1a10     ...............*
2005045c:	110c0803 2b291e19 18120b09 352c281f     ......)+.....(,5
2005046c:	2017130a 36342d27 26211614 3c37332e     ... '-46..!&.37<
2005047c:	2f252215 3d3b3832 31302423 3f3e3a39     ."%/28;=#$019:>?
2005048c:	14060400 34262416 15070501 35272517     .....$&4.....%'5
2005049c:	18130802 36322822 19120903 37332923     ...."(26....#)37
200504ac:	1e1a110a 3c382e2a 1f1b100b 3d392f2b     ....*.8<....+/9=
200504bc:	201c0f0c 3e3a302c 211d0e0d 3f3b312d     ... ,0:>...!-1;?
200504cc:	03020100 0d0c0b0a 09080504 0e0f1011     ................
200504dc:	12130706 1d1c1b1a 19181514 21201f1e     .............. !
200504ec:	23221716 2d2c2b2a 29282524 31302f2e     .."#*+,-$%()./01
200504fc:	33322726 3b3a3938 37363534 3f3e3d3c     &'2389:;4567<=>?

2005050c <scale>:
2005050c:	00000400 00000472 000006c2 00000649     ....r.......I...
2005051c:	00000400 00000649 000006c2 00000472     ....I.......r...
2005052c:	00000472 000004f0 00000782 000006fc     r...............
2005053c:	00000472 000006fc 00000782 000004f0     r...............
2005054c:	000006c2 00000782 00000b6b 00000a9e     ........k.......
2005055c:	000006c2 00000a9e 00000b6b 00000782     ........k.......
2005056c:	00000649 000006fc 00000a9e 000009e0     I...............
2005057c:	00000649 000009e0 00000a9e 000006fc     I...............
2005058c:	00000400 00000472 000006c2 00000649     ....r.......I...
2005059c:	00000400 00000649 000006c2 00000472     ....I.......r...
200505ac:	00000649 000006fc 00000a9e 000009e0     I...............
200505bc:	00000649 000009e0 00000a9e 000006fc     I...............
200505cc:	000006c2 00000782 00000b6b 00000a9e     ........k.......
200505dc:	000006c2 00000a9e 00000b6b 00000782     ........k.......
200505ec:	00000472 000004f0 00000782 000006fc     r...............
200505fc:	00000472 000006fc 00000782 000004f0     r...............

2005060c <fifo_0>:
2005060c:	00000200 80000000 00000001 80000200     ................
2005061c:	80000204                                ....

20050620 <fifo_1>:
20050620:	00000200 80000208 00000001 80000408     ................
20050630:	8000040c                                ....

20050634 <fifo_2>:
20050634:	00000200 80000410 00000001 80000610     ................
20050644:	80000614                                ....

20050648 <fifo_3>:
20050648:	00000200 80000618 00000001 80000a18     ................
20050658:	80000a1c                                ....

2005065c <fifo_4>:
2005065c:	00000200 80000a20 00000001 80000c20     .... ....... ...
2005066c:	80000c24                                $...

20050670 <fifo_5>:
20050670:	00000200 80000c28 00000001 80001028     ....(.......(...
20050680:	8000102c                                ,...

20050684 <fifo_6>:
20050684:	00000200 80001030 00000001 80001430     ....0.......0...
20050694:	80001434                                4...

20050698 <fifo_7>:
20050698:	00000200 80001438 00000001 80001c38     ....8.......8...
200506a8:	80001c3c                                <...

200506ac <fifo_8>:
200506ac:	00000200 80001c40 00000006 80002040     ....@.......@ ..
200506bc:	80002058                                X ..

200506c0 <fifo_9>:
200506c0:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
200506d0:	80002460                                `$..

200506d4 <fifo_10>:
200506d4:	00000200 80002464 00000001 80002864     ....d$......d(..
200506e4:	80002868                                h(..

200506e8 <fifo_11>:
200506e8:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
200506f8:	80002c70                                p,..

200506fc <fifo_12>:
200506fc:	00000200 80002c74 00000001 80003074     ....t,......t0..
2005070c:	80003078                                x0..

20050710 <fifo_13>:
20050710:	00000200 8000307c 00000001 8000347c     ....|0......|4..
20050720:	80003480                                .4..

20050724 <fifo_14>:
20050724:	00000200 80003484 00000001 80003884     .....4.......8..
20050734:	80003888                                .8..

20050738 <fifo_15>:
20050738:	00000200 8000388c 00000001 80003c8c     .....8.......<..
20050748:	80003c90                                .<..

2005074c <fifo_16>:
2005074c:	00000200 80003c94 00000001 80004094     .....<.......@..
2005075c:	80004098                                .@..

20050760 <fifo_17>:
20050760:	00000200 8000409c 00000001 8000449c     .....@.......D..
20050770:	800044a0                                .D..

20050774 <fifo_18>:
20050774:	00000200 800044a4 00000001 800048a4     .....D.......H..
20050784:	800048a8                                .H..

20050788 <fifo_19>:
20050788:	00000200 800048ac 00000001 80004cac     .....H.......L..
20050798:	80004cb0                                .L..

2005079c <fifo_20>:
2005079c:	00000200 80004cb4 00000001 800050b4     .....L.......P..
200507ac:	800050b8                                .P..

200507b0 <fifo_21>:
200507b0:	00000200 800050bc 00000001 800054bc     .....P.......T..
200507c0:	800054c0                                .T..

200507c4 <fifo_22>:
200507c4:	00000200 800054c4 00000001 800058c4     .....T.......X..
200507d4:	800058c8                                .X..

200507d8 <fifo_23>:
200507d8:	00000200 800058cc 00000001 80005ccc     .....X.......\..
200507e8:	80005cd0                                .\..

200507ec <fifo_24>:
200507ec:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
200507fc:	80005ed8                                .^..

20050800 <fifo_25>:
20050800:	00000200 80005edc 00000001 800066dc     .....^.......f..
20050810:	800066e0                                .f..

20050814 <fifo_26>:
20050814:	00000200 800066e4 00000001 800068e4     .....f.......h..
20050824:	800068e8                                .h..

20050828 <fifo_27>:
20050828:	00000200 800068ec 00000001 80006aec     .....h.......j..
20050838:	80006af0                                .j..

2005083c <fifo_28>:
2005083c:	00000200 80006af4 00000001 80006ef4     .....j.......n..
2005084c:	80006ef8                                .n..

20050850 <fifo_29>:
20050850:	00000200 80006efc 00000002 800072fc     .....n.......r..
20050860:	80007304                                .s..

20050864 <fifo_30>:
20050864:	00000200 80007308 00000001 80007708     .....s.......w..
20050874:	8000770c                                .w..

20050878 <fifo_31>:
20050878:	00000200 80007710 00000001 80007910     .....w.......y..
20050888:	80007914                                .y..

2005088c <needInit>:
2005088c:	00000001                                ....

20050890 <fifo_0>:
20050890:	00000200 80000000 00000001 80000200     ................
200508a0:	80000204                                ....

200508a4 <fifo_1>:
200508a4:	00000200 80000208 00000001 80000408     ................
200508b4:	8000040c                                ....

200508b8 <fifo_2>:
200508b8:	00000200 80000410 00000001 80000610     ................
200508c8:	80000614                                ....

200508cc <fifo_3>:
200508cc:	00000200 80000618 00000001 80000a18     ................
200508dc:	80000a1c                                ....

200508e0 <fifo_4>:
200508e0:	00000200 80000a20 00000001 80000c20     .... ....... ...
200508f0:	80000c24                                $...

200508f4 <fifo_5>:
200508f4:	00000200 80000c28 00000001 80001028     ....(.......(...
20050904:	8000102c                                ,...

20050908 <fifo_6>:
20050908:	00000200 80001030 00000001 80001430     ....0.......0...
20050918:	80001434                                4...

2005091c <fifo_7>:
2005091c:	00000200 80001438 00000001 80001c38     ....8.......8...
2005092c:	80001c3c                                <...

20050930 <fifo_8>:
20050930:	00000200 80001c40 00000006 80002040     ....@.......@ ..
20050940:	80002058                                X ..

20050944 <fifo_9>:
20050944:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
20050954:	80002460                                `$..

20050958 <fifo_10>:
20050958:	00000200 80002464 00000001 80002864     ....d$......d(..
20050968:	80002868                                h(..

2005096c <fifo_11>:
2005096c:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
2005097c:	80002c70                                p,..

20050980 <fifo_12>:
20050980:	00000200 80002c74 00000001 80003074     ....t,......t0..
20050990:	80003078                                x0..

20050994 <fifo_13>:
20050994:	00000200 8000307c 00000001 8000347c     ....|0......|4..
200509a4:	80003480                                .4..

200509a8 <fifo_14>:
200509a8:	00000200 80003484 00000001 80003884     .....4.......8..
200509b8:	80003888                                .8..

200509bc <fifo_15>:
200509bc:	00000200 8000388c 00000001 80003c8c     .....8.......<..
200509cc:	80003c90                                .<..

200509d0 <fifo_16>:
200509d0:	00000200 80003c94 00000001 80004094     .....<.......@..
200509e0:	80004098                                .@..

200509e4 <fifo_17>:
200509e4:	00000200 8000409c 00000001 8000449c     .....@.......D..
200509f4:	800044a0                                .D..

200509f8 <fifo_18>:
200509f8:	00000200 800044a4 00000001 800048a4     .....D.......H..
20050a08:	800048a8                                .H..

20050a0c <fifo_19>:
20050a0c:	00000200 800048ac 00000001 80004cac     .....H.......L..
20050a1c:	80004cb0                                .L..

20050a20 <fifo_20>:
20050a20:	00000200 80004cb4 00000001 800050b4     .....L.......P..
20050a30:	800050b8                                .P..

20050a34 <fifo_21>:
20050a34:	00000200 800050bc 00000001 800054bc     .....P.......T..
20050a44:	800054c0                                .T..

20050a48 <fifo_22>:
20050a48:	00000200 800054c4 00000001 800058c4     .....T.......X..
20050a58:	800058c8                                .X..

20050a5c <fifo_23>:
20050a5c:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20050a6c:	80005cd0                                .\..

20050a70 <fifo_24>:
20050a70:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20050a80:	80005ed8                                .^..

20050a84 <fifo_25>:
20050a84:	00000200 80005edc 00000001 800066dc     .....^.......f..
20050a94:	800066e0                                .f..

20050a98 <fifo_26>:
20050a98:	00000200 800066e4 00000001 800068e4     .....f.......h..
20050aa8:	800068e8                                .h..

20050aac <fifo_27>:
20050aac:	00000200 800068ec 00000001 80006aec     .....h.......j..
20050abc:	80006af0                                .j..

20050ac0 <fifo_28>:
20050ac0:	00000200 80006af4 00000001 80006ef4     .....j.......n..
20050ad0:	80006ef8                                .n..

20050ad4 <fifo_29>:
20050ad4:	00000200 80006efc 00000002 800072fc     .....n.......r..
20050ae4:	80007304                                .s..

20050ae8 <fifo_30>:
20050ae8:	00000200 80007308 00000001 80007708     .....s.......w..
20050af8:	8000770c                                .w..

20050afc <fifo_31>:
20050afc:	00000200 80007710 00000001 80007910     .....w.......y..
20050b0c:	80007914                                .y..

20050b10 <needInit>:
20050b10:	00000001                                ....

20050b14 <fifo_0>:
20050b14:	00000200 80000000 00000001 80000200     ................
20050b24:	80000204                                ....

20050b28 <fifo_1>:
20050b28:	00000200 80000208 00000001 80000408     ................
20050b38:	8000040c                                ....

20050b3c <fifo_2>:
20050b3c:	00000200 80000410 00000001 80000610     ................
20050b4c:	80000614                                ....

20050b50 <fifo_3>:
20050b50:	00000200 80000618 00000001 80000a18     ................
20050b60:	80000a1c                                ....

20050b64 <fifo_4>:
20050b64:	00000200 80000a20 00000001 80000c20     .... ....... ...
20050b74:	80000c24                                $...

20050b78 <fifo_5>:
20050b78:	00000200 80000c28 00000001 80001028     ....(.......(...
20050b88:	8000102c                                ,...

20050b8c <fifo_6>:
20050b8c:	00000200 80001030 00000001 80001430     ....0.......0...
20050b9c:	80001434                                4...

20050ba0 <fifo_7>:
20050ba0:	00000200 80001438 00000001 80001c38     ....8.......8...
20050bb0:	80001c3c                                <...

20050bb4 <fifo_8>:
20050bb4:	00000200 80001c40 00000006 80002040     ....@.......@ ..
20050bc4:	80002058                                X ..

20050bc8 <fifo_9>:
20050bc8:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
20050bd8:	80002460                                `$..

20050bdc <fifo_10>:
20050bdc:	00000200 80002464 00000001 80002864     ....d$......d(..
20050bec:	80002868                                h(..

20050bf0 <fifo_11>:
20050bf0:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
20050c00:	80002c70                                p,..

20050c04 <fifo_12>:
20050c04:	00000200 80002c74 00000001 80003074     ....t,......t0..
20050c14:	80003078                                x0..

20050c18 <fifo_13>:
20050c18:	00000200 8000307c 00000001 8000347c     ....|0......|4..
20050c28:	80003480                                .4..

20050c2c <fifo_14>:
20050c2c:	00000200 80003484 00000001 80003884     .....4.......8..
20050c3c:	80003888                                .8..

20050c40 <fifo_15>:
20050c40:	00000200 8000388c 00000001 80003c8c     .....8.......<..
20050c50:	80003c90                                .<..

20050c54 <fifo_16>:
20050c54:	00000200 80003c94 00000001 80004094     .....<.......@..
20050c64:	80004098                                .@..

20050c68 <fifo_17>:
20050c68:	00000200 8000409c 00000001 8000449c     .....@.......D..
20050c78:	800044a0                                .D..

20050c7c <fifo_18>:
20050c7c:	00000200 800044a4 00000001 800048a4     .....D.......H..
20050c8c:	800048a8                                .H..

20050c90 <fifo_19>:
20050c90:	00000200 800048ac 00000001 80004cac     .....H.......L..
20050ca0:	80004cb0                                .L..

20050ca4 <fifo_20>:
20050ca4:	00000200 80004cb4 00000001 800050b4     .....L.......P..
20050cb4:	800050b8                                .P..

20050cb8 <fifo_21>:
20050cb8:	00000200 800050bc 00000001 800054bc     .....P.......T..
20050cc8:	800054c0                                .T..

20050ccc <fifo_22>:
20050ccc:	00000200 800054c4 00000001 800058c4     .....T.......X..
20050cdc:	800058c8                                .X..

20050ce0 <fifo_23>:
20050ce0:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20050cf0:	80005cd0                                .\..

20050cf4 <fifo_24>:
20050cf4:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20050d04:	80005ed8                                .^..

20050d08 <fifo_25>:
20050d08:	00000200 80005edc 00000001 800066dc     .....^.......f..
20050d18:	800066e0                                .f..

20050d1c <fifo_26>:
20050d1c:	00000200 800066e4 00000001 800068e4     .....f.......h..
20050d2c:	800068e8                                .h..

20050d30 <fifo_27>:
20050d30:	00000200 800068ec 00000001 80006aec     .....h.......j..
20050d40:	80006af0                                .j..

20050d44 <fifo_28>:
20050d44:	00000200 80006af4 00000001 80006ef4     .....j.......n..
20050d54:	80006ef8                                .n..

20050d58 <fifo_29>:
20050d58:	00000200 80006efc 00000002 800072fc     .....n.......r..
20050d68:	80007304                                .s..

20050d6c <fifo_30>:
20050d6c:	00000200 80007308 00000001 80007708     .....s.......w..
20050d7c:	8000770c                                .w..

20050d80 <fifo_31>:
20050d80:	00000200 80007710 00000001 80007910     .....w.......y..
20050d90:	80007914                                .y..

20050d94 <start_of_frame>:
20050d94:	ffffffff                                ....

20050d98 <start_of_frame_U>:
20050d98:	ffffffff                                ....

20050d9c <needInit>:
20050d9c:	00000001                                ....

20050da0 <fifo_0>:
20050da0:	00000200 80000000 00000001 80000200     ................
20050db0:	80000204                                ....

20050db4 <fifo_1>:
20050db4:	00000200 80000208 00000001 80000408     ................
20050dc4:	8000040c                                ....

20050dc8 <fifo_2>:
20050dc8:	00000200 80000410 00000001 80000610     ................
20050dd8:	80000614                                ....

20050ddc <fifo_3>:
20050ddc:	00000200 80000618 00000001 80000a18     ................
20050dec:	80000a1c                                ....

20050df0 <fifo_4>:
20050df0:	00000200 80000a20 00000001 80000c20     .... ....... ...
20050e00:	80000c24                                $...

20050e04 <fifo_5>:
20050e04:	00000200 80000c28 00000001 80001028     ....(.......(...
20050e14:	8000102c                                ,...

20050e18 <fifo_6>:
20050e18:	00000200 80001030 00000001 80001430     ....0.......0...
20050e28:	80001434                                4...

20050e2c <fifo_7>:
20050e2c:	00000200 80001438 00000001 80001c38     ....8.......8...
20050e3c:	80001c3c                                <...

20050e40 <fifo_8>:
20050e40:	00000200 80001c40 00000006 80002040     ....@.......@ ..
20050e50:	80002058                                X ..

20050e54 <fifo_9>:
20050e54:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
20050e64:	80002460                                `$..

20050e68 <fifo_10>:
20050e68:	00000200 80002464 00000001 80002864     ....d$......d(..
20050e78:	80002868                                h(..

20050e7c <fifo_11>:
20050e7c:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
20050e8c:	80002c70                                p,..

20050e90 <fifo_12>:
20050e90:	00000200 80002c74 00000001 80003074     ....t,......t0..
20050ea0:	80003078                                x0..

20050ea4 <fifo_13>:
20050ea4:	00000200 8000307c 00000001 8000347c     ....|0......|4..
20050eb4:	80003480                                .4..

20050eb8 <fifo_14>:
20050eb8:	00000200 80003484 00000001 80003884     .....4.......8..
20050ec8:	80003888                                .8..

20050ecc <fifo_15>:
20050ecc:	00000200 8000388c 00000001 80003c8c     .....8.......<..
20050edc:	80003c90                                .<..

20050ee0 <fifo_16>:
20050ee0:	00000200 80003c94 00000001 80004094     .....<.......@..
20050ef0:	80004098                                .@..

20050ef4 <fifo_17>:
20050ef4:	00000200 8000409c 00000001 8000449c     .....@.......D..
20050f04:	800044a0                                .D..

20050f08 <fifo_18>:
20050f08:	00000200 800044a4 00000001 800048a4     .....D.......H..
20050f18:	800048a8                                .H..

20050f1c <fifo_19>:
20050f1c:	00000200 800048ac 00000001 80004cac     .....H.......L..
20050f2c:	80004cb0                                .L..

20050f30 <fifo_20>:
20050f30:	00000200 80004cb4 00000001 800050b4     .....L.......P..
20050f40:	800050b8                                .P..

20050f44 <fifo_21>:
20050f44:	00000200 800050bc 00000001 800054bc     .....P.......T..
20050f54:	800054c0                                .T..

20050f58 <fifo_22>:
20050f58:	00000200 800054c4 00000001 800058c4     .....T.......X..
20050f68:	800058c8                                .X..

20050f6c <fifo_23>:
20050f6c:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20050f7c:	80005cd0                                .\..

20050f80 <fifo_24>:
20050f80:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20050f90:	80005ed8                                .^..

20050f94 <fifo_25>:
20050f94:	00000200 80005edc 00000001 800066dc     .....^.......f..
20050fa4:	800066e0                                .f..

20050fa8 <fifo_26>:
20050fa8:	00000200 800066e4 00000001 800068e4     .....f.......h..
20050fb8:	800068e8                                .h..

20050fbc <fifo_27>:
20050fbc:	00000200 800068ec 00000001 80006aec     .....h.......j..
20050fcc:	80006af0                                .j..

20050fd0 <fifo_28>:
20050fd0:	00000200 80006af4 00000001 80006ef4     .....j.......n..
20050fe0:	80006ef8                                .n..

20050fe4 <fifo_29>:
20050fe4:	00000200 80006efc 00000002 800072fc     .....n.......r..
20050ff4:	80007304                                .s..

20050ff8 <fifo_30>:
20050ff8:	00000200 80007308 00000001 80007708     .....s.......w..
20051008:	8000770c                                .w..

2005100c <fifo_31>:
2005100c:	00000200 80007710 00000001 80007910     .....w.......y..
2005101c:	80007914                                .y..

20051020 <needInit>:
20051020:	00000001                                ....

20051024 <fifo_0>:
20051024:	00000200 80000000 00000001 80000200     ................
20051034:	80000204                                ....

20051038 <fifo_1>:
20051038:	00000200 80000208 00000001 80000408     ................
20051048:	8000040c                                ....

2005104c <fifo_2>:
2005104c:	00000200 80000410 00000001 80000610     ................
2005105c:	80000614                                ....

20051060 <fifo_3>:
20051060:	00000200 80000618 00000001 80000a18     ................
20051070:	80000a1c                                ....

20051074 <fifo_4>:
20051074:	00000200 80000a20 00000001 80000c20     .... ....... ...
20051084:	80000c24                                $...

20051088 <fifo_5>:
20051088:	00000200 80000c28 00000001 80001028     ....(.......(...
20051098:	8000102c                                ,...

2005109c <fifo_6>:
2005109c:	00000200 80001030 00000001 80001430     ....0.......0...
200510ac:	80001434                                4...

200510b0 <fifo_7>:
200510b0:	00000200 80001438 00000001 80001c38     ....8.......8...
200510c0:	80001c3c                                <...

200510c4 <fifo_8>:
200510c4:	00000200 80001c40 00000006 80002040     ....@.......@ ..
200510d4:	80002058                                X ..

200510d8 <fifo_9>:
200510d8:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
200510e8:	80002460                                `$..

200510ec <fifo_10>:
200510ec:	00000200 80002464 00000001 80002864     ....d$......d(..
200510fc:	80002868                                h(..

20051100 <fifo_11>:
20051100:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
20051110:	80002c70                                p,..

20051114 <fifo_12>:
20051114:	00000200 80002c74 00000001 80003074     ....t,......t0..
20051124:	80003078                                x0..

20051128 <fifo_13>:
20051128:	00000200 8000307c 00000001 8000347c     ....|0......|4..
20051138:	80003480                                .4..

2005113c <fifo_14>:
2005113c:	00000200 80003484 00000001 80003884     .....4.......8..
2005114c:	80003888                                .8..

20051150 <fifo_15>:
20051150:	00000200 8000388c 00000001 80003c8c     .....8.......<..
20051160:	80003c90                                .<..

20051164 <fifo_16>:
20051164:	00000200 80003c94 00000001 80004094     .....<.......@..
20051174:	80004098                                .@..

20051178 <fifo_17>:
20051178:	00000200 8000409c 00000001 8000449c     .....@.......D..
20051188:	800044a0                                .D..

2005118c <fifo_18>:
2005118c:	00000200 800044a4 00000001 800048a4     .....D.......H..
2005119c:	800048a8                                .H..

200511a0 <fifo_19>:
200511a0:	00000200 800048ac 00000001 80004cac     .....H.......L..
200511b0:	80004cb0                                .L..

200511b4 <fifo_20>:
200511b4:	00000200 80004cb4 00000001 800050b4     .....L.......P..
200511c4:	800050b8                                .P..

200511c8 <fifo_21>:
200511c8:	00000200 800050bc 00000001 800054bc     .....P.......T..
200511d8:	800054c0                                .T..

200511dc <fifo_22>:
200511dc:	00000200 800054c4 00000001 800058c4     .....T.......X..
200511ec:	800058c8                                .X..

200511f0 <fifo_23>:
200511f0:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20051200:	80005cd0                                .\..

20051204 <fifo_24>:
20051204:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20051214:	80005ed8                                .^..

20051218 <fifo_25>:
20051218:	00000200 80005edc 00000001 800066dc     .....^.......f..
20051228:	800066e0                                .f..

2005122c <fifo_26>:
2005122c:	00000200 800066e4 00000001 800068e4     .....f.......h..
2005123c:	800068e8                                .h..

20051240 <fifo_27>:
20051240:	00000200 800068ec 00000001 80006aec     .....h.......j..
20051250:	80006af0                                .j..

20051254 <fifo_28>:
20051254:	00000200 80006af4 00000001 80006ef4     .....j.......n..
20051264:	80006ef8                                .n..

20051268 <fifo_29>:
20051268:	00000200 80006efc 00000002 800072fc     .....n.......r..
20051278:	80007304                                .s..

2005127c <fifo_30>:
2005127c:	00000200 80007308 00000001 80007708     .....s.......w..
2005128c:	8000770c                                .w..

20051290 <fifo_31>:
20051290:	00000200 80007710 00000001 80007910     .....w.......y..
200512a0:	80007914                                .y..

200512a4 <needInit>:
200512a4:	00000001                                ....

200512a8 <fifo_0>:
200512a8:	00000200 80000000 00000001 80000200     ................
200512b8:	80000204                                ....

200512bc <fifo_1>:
200512bc:	00000200 80000208 00000001 80000408     ................
200512cc:	8000040c                                ....

200512d0 <fifo_2>:
200512d0:	00000200 80000410 00000001 80000610     ................
200512e0:	80000614                                ....

200512e4 <fifo_3>:
200512e4:	00000200 80000618 00000001 80000a18     ................
200512f4:	80000a1c                                ....

200512f8 <fifo_4>:
200512f8:	00000200 80000a20 00000001 80000c20     .... ....... ...
20051308:	80000c24                                $...

2005130c <fifo_5>:
2005130c:	00000200 80000c28 00000001 80001028     ....(.......(...
2005131c:	8000102c                                ,...

20051320 <fifo_6>:
20051320:	00000200 80001030 00000001 80001430     ....0.......0...
20051330:	80001434                                4...

20051334 <fifo_7>:
20051334:	00000200 80001438 00000001 80001c38     ....8.......8...
20051344:	80001c3c                                <...

20051348 <fifo_8>:
20051348:	00000200 80001c40 00000006 80002040     ....@.......@ ..
20051358:	80002058                                X ..

2005135c <fifo_9>:
2005135c:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
2005136c:	80002460                                `$..

20051370 <fifo_10>:
20051370:	00000200 80002464 00000001 80002864     ....d$......d(..
20051380:	80002868                                h(..

20051384 <fifo_11>:
20051384:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
20051394:	80002c70                                p,..

20051398 <fifo_12>:
20051398:	00000200 80002c74 00000001 80003074     ....t,......t0..
200513a8:	80003078                                x0..

200513ac <fifo_13>:
200513ac:	00000200 8000307c 00000001 8000347c     ....|0......|4..
200513bc:	80003480                                .4..

200513c0 <fifo_14>:
200513c0:	00000200 80003484 00000001 80003884     .....4.......8..
200513d0:	80003888                                .8..

200513d4 <fifo_15>:
200513d4:	00000200 8000388c 00000001 80003c8c     .....8.......<..
200513e4:	80003c90                                .<..

200513e8 <fifo_16>:
200513e8:	00000200 80003c94 00000001 80004094     .....<.......@..
200513f8:	80004098                                .@..

200513fc <fifo_17>:
200513fc:	00000200 8000409c 00000001 8000449c     .....@.......D..
2005140c:	800044a0                                .D..

20051410 <fifo_18>:
20051410:	00000200 800044a4 00000001 800048a4     .....D.......H..
20051420:	800048a8                                .H..

20051424 <fifo_19>:
20051424:	00000200 800048ac 00000001 80004cac     .....H.......L..
20051434:	80004cb0                                .L..

20051438 <fifo_20>:
20051438:	00000200 80004cb4 00000001 800050b4     .....L.......P..
20051448:	800050b8                                .P..

2005144c <fifo_21>:
2005144c:	00000200 800050bc 00000001 800054bc     .....P.......T..
2005145c:	800054c0                                .T..

20051460 <fifo_22>:
20051460:	00000200 800054c4 00000001 800058c4     .....T.......X..
20051470:	800058c8                                .X..

20051474 <fifo_23>:
20051474:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20051484:	80005cd0                                .\..

20051488 <fifo_24>:
20051488:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20051498:	80005ed8                                .^..

2005149c <fifo_25>:
2005149c:	00000200 80005edc 00000001 800066dc     .....^.......f..
200514ac:	800066e0                                .f..

200514b0 <fifo_26>:
200514b0:	00000200 800066e4 00000001 800068e4     .....f.......h..
200514c0:	800068e8                                .h..

200514c4 <fifo_27>:
200514c4:	00000200 800068ec 00000001 80006aec     .....h.......j..
200514d4:	80006af0                                .j..

200514d8 <fifo_28>:
200514d8:	00000200 80006af4 00000001 80006ef4     .....j.......n..
200514e8:	80006ef8                                .n..

200514ec <fifo_29>:
200514ec:	00000200 80006efc 00000002 800072fc     .....n.......r..
200514fc:	80007304                                .s..

20051500 <fifo_30>:
20051500:	00000200 80007308 00000001 80007708     .....s.......w..
20051510:	8000770c                                .w..

20051514 <fifo_31>:
20051514:	00000200 80007710 00000001 80007910     .....w.......y..
20051524:	80007914                                .y..

20051528 <top_edge>:
20051528:	00000001                                ....

2005152c <needInit>:
2005152c:	00000001                                ....

20051530 <fifo_0>:
20051530:	00000200 80000000 00000001 80000200     ................
20051540:	80000204                                ....

20051544 <fifo_1>:
20051544:	00000200 80000208 00000001 80000408     ................
20051554:	8000040c                                ....

20051558 <fifo_2>:
20051558:	00000200 80000410 00000001 80000610     ................
20051568:	80000614                                ....

2005156c <fifo_3>:
2005156c:	00000200 80000618 00000001 80000a18     ................
2005157c:	80000a1c                                ....

20051580 <fifo_4>:
20051580:	00000200 80000a20 00000001 80000c20     .... ....... ...
20051590:	80000c24                                $...

20051594 <fifo_5>:
20051594:	00000200 80000c28 00000001 80001028     ....(.......(...
200515a4:	8000102c                                ,...

200515a8 <fifo_6>:
200515a8:	00000200 80001030 00000001 80001430     ....0.......0...
200515b8:	80001434                                4...

200515bc <fifo_7>:
200515bc:	00000200 80001438 00000001 80001c38     ....8.......8...
200515cc:	80001c3c                                <...

200515d0 <fifo_8>:
200515d0:	00000200 80001c40 00000006 80002040     ....@.......@ ..
200515e0:	80002058                                X ..

200515e4 <fifo_9>:
200515e4:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
200515f4:	80002460                                `$..

200515f8 <fifo_10>:
200515f8:	00000200 80002464 00000001 80002864     ....d$......d(..
20051608:	80002868                                h(..

2005160c <fifo_11>:
2005160c:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
2005161c:	80002c70                                p,..

20051620 <fifo_12>:
20051620:	00000200 80002c74 00000001 80003074     ....t,......t0..
20051630:	80003078                                x0..

20051634 <fifo_13>:
20051634:	00000200 8000307c 00000001 8000347c     ....|0......|4..
20051644:	80003480                                .4..

20051648 <fifo_14>:
20051648:	00000200 80003484 00000001 80003884     .....4.......8..
20051658:	80003888                                .8..

2005165c <fifo_15>:
2005165c:	00000200 8000388c 00000001 80003c8c     .....8.......<..
2005166c:	80003c90                                .<..

20051670 <fifo_16>:
20051670:	00000200 80003c94 00000001 80004094     .....<.......@..
20051680:	80004098                                .@..

20051684 <fifo_17>:
20051684:	00000200 8000409c 00000001 8000449c     .....@.......D..
20051694:	800044a0                                .D..

20051698 <fifo_18>:
20051698:	00000200 800044a4 00000001 800048a4     .....D.......H..
200516a8:	800048a8                                .H..

200516ac <fifo_19>:
200516ac:	00000200 800048ac 00000001 80004cac     .....H.......L..
200516bc:	80004cb0                                .L..

200516c0 <fifo_20>:
200516c0:	00000200 80004cb4 00000001 800050b4     .....L.......P..
200516d0:	800050b8                                .P..

200516d4 <fifo_21>:
200516d4:	00000200 800050bc 00000001 800054bc     .....P.......T..
200516e4:	800054c0                                .T..

200516e8 <fifo_22>:
200516e8:	00000200 800054c4 00000001 800058c4     .....T.......X..
200516f8:	800058c8                                .X..

200516fc <fifo_23>:
200516fc:	00000200 800058cc 00000001 80005ccc     .....X.......\..
2005170c:	80005cd0                                .\..

20051710 <fifo_24>:
20051710:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20051720:	80005ed8                                .^..

20051724 <fifo_25>:
20051724:	00000200 80005edc 00000001 800066dc     .....^.......f..
20051734:	800066e0                                .f..

20051738 <fifo_26>:
20051738:	00000200 800066e4 00000001 800068e4     .....f.......h..
20051748:	800068e8                                .h..

2005174c <fifo_27>:
2005174c:	00000200 800068ec 00000001 80006aec     .....h.......j..
2005175c:	80006af0                                .j..

20051760 <fifo_28>:
20051760:	00000200 80006af4 00000001 80006ef4     .....j.......n..
20051770:	80006ef8                                .n..

20051774 <fifo_29>:
20051774:	00000200 80006efc 00000002 800072fc     .....n.......r..
20051784:	80007304                                .s..

20051788 <fifo_30>:
20051788:	00000200 80007308 00000001 80007708     .....s.......w..
20051798:	8000770c                                .w..

2005179c <fifo_31>:
2005179c:	00000200 80007710 00000001 80007910     .....w.......y..
200517ac:	80007914                                .y..

200517b0 <top_edge>:
200517b0:	00000001                                ....

200517b4 <needInit>:
200517b4:	00000001                                ....

200517b8 <fifo_0>:
200517b8:	00000200 80000000 00000001 80000200     ................
200517c8:	80000204                                ....

200517cc <fifo_1>:
200517cc:	00000200 80000208 00000001 80000408     ................
200517dc:	8000040c                                ....

200517e0 <fifo_2>:
200517e0:	00000200 80000410 00000001 80000610     ................
200517f0:	80000614                                ....

200517f4 <fifo_3>:
200517f4:	00000200 80000618 00000001 80000a18     ................
20051804:	80000a1c                                ....

20051808 <fifo_4>:
20051808:	00000200 80000a20 00000001 80000c20     .... ....... ...
20051818:	80000c24                                $...

2005181c <fifo_5>:
2005181c:	00000200 80000c28 00000001 80001028     ....(.......(...
2005182c:	8000102c                                ,...

20051830 <fifo_6>:
20051830:	00000200 80001030 00000001 80001430     ....0.......0...
20051840:	80001434                                4...

20051844 <fifo_7>:
20051844:	00000200 80001438 00000001 80001c38     ....8.......8...
20051854:	80001c3c                                <...

20051858 <fifo_8>:
20051858:	00000200 80001c40 00000006 80002040     ....@.......@ ..
20051868:	80002058                                X ..

2005186c <fifo_9>:
2005186c:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
2005187c:	80002460                                `$..

20051880 <fifo_10>:
20051880:	00000200 80002464 00000001 80002864     ....d$......d(..
20051890:	80002868                                h(..

20051894 <fifo_11>:
20051894:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
200518a4:	80002c70                                p,..

200518a8 <fifo_12>:
200518a8:	00000200 80002c74 00000001 80003074     ....t,......t0..
200518b8:	80003078                                x0..

200518bc <fifo_13>:
200518bc:	00000200 8000307c 00000001 8000347c     ....|0......|4..
200518cc:	80003480                                .4..

200518d0 <fifo_14>:
200518d0:	00000200 80003484 00000001 80003884     .....4.......8..
200518e0:	80003888                                .8..

200518e4 <fifo_15>:
200518e4:	00000200 8000388c 00000001 80003c8c     .....8.......<..
200518f4:	80003c90                                .<..

200518f8 <fifo_16>:
200518f8:	00000200 80003c94 00000001 80004094     .....<.......@..
20051908:	80004098                                .@..

2005190c <fifo_17>:
2005190c:	00000200 8000409c 00000001 8000449c     .....@.......D..
2005191c:	800044a0                                .D..

20051920 <fifo_18>:
20051920:	00000200 800044a4 00000001 800048a4     .....D.......H..
20051930:	800048a8                                .H..

20051934 <fifo_19>:
20051934:	00000200 800048ac 00000001 80004cac     .....H.......L..
20051944:	80004cb0                                .L..

20051948 <fifo_20>:
20051948:	00000200 80004cb4 00000001 800050b4     .....L.......P..
20051958:	800050b8                                .P..

2005195c <fifo_21>:
2005195c:	00000200 800050bc 00000001 800054bc     .....P.......T..
2005196c:	800054c0                                .T..

20051970 <fifo_22>:
20051970:	00000200 800054c4 00000001 800058c4     .....T.......X..
20051980:	800058c8                                .X..

20051984 <fifo_23>:
20051984:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20051994:	80005cd0                                .\..

20051998 <fifo_24>:
20051998:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
200519a8:	80005ed8                                .^..

200519ac <fifo_25>:
200519ac:	00000200 80005edc 00000001 800066dc     .....^.......f..
200519bc:	800066e0                                .f..

200519c0 <fifo_26>:
200519c0:	00000200 800066e4 00000001 800068e4     .....f.......h..
200519d0:	800068e8                                .h..

200519d4 <fifo_27>:
200519d4:	00000200 800068ec 00000001 80006aec     .....h.......j..
200519e4:	80006af0                                .j..

200519e8 <fifo_28>:
200519e8:	00000200 80006af4 00000001 80006ef4     .....j.......n..
200519f8:	80006ef8                                .n..

200519fc <fifo_29>:
200519fc:	00000200 80006efc 00000002 800072fc     .....n.......r..
20051a0c:	80007304                                .s..

20051a10 <fifo_30>:
20051a10:	00000200 80007308 00000001 80007708     .....s.......w..
20051a20:	8000770c                                .w..

20051a24 <fifo_31>:
20051a24:	00000200 80007710 00000001 80007910     .....w.......y..
20051a34:	80007914                                .y..

20051a38 <actorNotFinished>:
20051a38:	00000001                                ....

20051a3c <needInit>:
20051a3c:	00000001                                ....

20051a40 <fifo_0>:
20051a40:	00000200 80000000 00000001 80000200     ................
20051a50:	80000204                                ....

20051a54 <fifo_1>:
20051a54:	00000200 80000208 00000001 80000408     ................
20051a64:	8000040c                                ....

20051a68 <fifo_2>:
20051a68:	00000200 80000410 00000001 80000610     ................
20051a78:	80000614                                ....

20051a7c <fifo_3>:
20051a7c:	00000200 80000618 00000001 80000a18     ................
20051a8c:	80000a1c                                ....

20051a90 <fifo_4>:
20051a90:	00000200 80000a20 00000001 80000c20     .... ....... ...
20051aa0:	80000c24                                $...

20051aa4 <fifo_5>:
20051aa4:	00000200 80000c28 00000001 80001028     ....(.......(...
20051ab4:	8000102c                                ,...

20051ab8 <fifo_6>:
20051ab8:	00000200 80001030 00000001 80001430     ....0.......0...
20051ac8:	80001434                                4...

20051acc <fifo_7>:
20051acc:	00000200 80001438 00000001 80001c38     ....8.......8...
20051adc:	80001c3c                                <...

20051ae0 <fifo_8>:
20051ae0:	00000200 80001c40 00000006 80002040     ....@.......@ ..
20051af0:	80002058                                X ..

20051af4 <fifo_9>:
20051af4:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
20051b04:	80002460                                `$..

20051b08 <fifo_10>:
20051b08:	00000200 80002464 00000001 80002864     ....d$......d(..
20051b18:	80002868                                h(..

20051b1c <fifo_11>:
20051b1c:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
20051b2c:	80002c70                                p,..

20051b30 <fifo_12>:
20051b30:	00000200 80002c74 00000001 80003074     ....t,......t0..
20051b40:	80003078                                x0..

20051b44 <fifo_13>:
20051b44:	00000200 8000307c 00000001 8000347c     ....|0......|4..
20051b54:	80003480                                .4..

20051b58 <fifo_14>:
20051b58:	00000200 80003484 00000001 80003884     .....4.......8..
20051b68:	80003888                                .8..

20051b6c <fifo_15>:
20051b6c:	00000200 8000388c 00000001 80003c8c     .....8.......<..
20051b7c:	80003c90                                .<..

20051b80 <fifo_16>:
20051b80:	00000200 80003c94 00000001 80004094     .....<.......@..
20051b90:	80004098                                .@..

20051b94 <fifo_17>:
20051b94:	00000200 8000409c 00000001 8000449c     .....@.......D..
20051ba4:	800044a0                                .D..

20051ba8 <fifo_18>:
20051ba8:	00000200 800044a4 00000001 800048a4     .....D.......H..
20051bb8:	800048a8                                .H..

20051bbc <fifo_19>:
20051bbc:	00000200 800048ac 00000001 80004cac     .....H.......L..
20051bcc:	80004cb0                                .L..

20051bd0 <fifo_20>:
20051bd0:	00000200 80004cb4 00000001 800050b4     .....L.......P..
20051be0:	800050b8                                .P..

20051be4 <fifo_21>:
20051be4:	00000200 800050bc 00000001 800054bc     .....P.......T..
20051bf4:	800054c0                                .T..

20051bf8 <fifo_22>:
20051bf8:	00000200 800054c4 00000001 800058c4     .....T.......X..
20051c08:	800058c8                                .X..

20051c0c <fifo_23>:
20051c0c:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20051c1c:	80005cd0                                .\..

20051c20 <fifo_24>:
20051c20:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20051c30:	80005ed8                                .^..

20051c34 <fifo_25>:
20051c34:	00000200 80005edc 00000001 800066dc     .....^.......f..
20051c44:	800066e0                                .f..

20051c48 <fifo_26>:
20051c48:	00000200 800066e4 00000001 800068e4     .....f.......h..
20051c58:	800068e8                                .h..

20051c5c <fifo_27>:
20051c5c:	00000200 800068ec 00000001 80006aec     .....h.......j..
20051c6c:	80006af0                                .j..

20051c70 <fifo_28>:
20051c70:	00000200 80006af4 00000001 80006ef4     .....j.......n..
20051c80:	80006ef8                                .n..

20051c84 <fifo_29>:
20051c84:	00000200 80006efc 00000002 800072fc     .....n.......r..
20051c94:	80007304                                .s..

20051c98 <fifo_30>:
20051c98:	00000200 80007308 00000001 80007708     .....s.......w..
20051ca8:	8000770c                                .w..

20051cac <fifo_31>:
20051cac:	00000200 80007710 00000001 80007910     .....w.......y..
20051cbc:	80007914                                .y..

20051cc0 <top_edge>:
20051cc0:	00000001                                ....

20051cc4 <needInit>:
20051cc4:	00000001                                ....

20051cc8 <fifo_0>:
20051cc8:	00000200 80000000 00000001 80000200     ................
20051cd8:	80000204                                ....

20051cdc <fifo_1>:
20051cdc:	00000200 80000208 00000001 80000408     ................
20051cec:	8000040c                                ....

20051cf0 <fifo_2>:
20051cf0:	00000200 80000410 00000001 80000610     ................
20051d00:	80000614                                ....

20051d04 <fifo_3>:
20051d04:	00000200 80000618 00000001 80000a18     ................
20051d14:	80000a1c                                ....

20051d18 <fifo_4>:
20051d18:	00000200 80000a20 00000001 80000c20     .... ....... ...
20051d28:	80000c24                                $...

20051d2c <fifo_5>:
20051d2c:	00000200 80000c28 00000001 80001028     ....(.......(...
20051d3c:	8000102c                                ,...

20051d40 <fifo_6>:
20051d40:	00000200 80001030 00000001 80001430     ....0.......0...
20051d50:	80001434                                4...

20051d54 <fifo_7>:
20051d54:	00000200 80001438 00000001 80001c38     ....8.......8...
20051d64:	80001c3c                                <...

20051d68 <fifo_8>:
20051d68:	00000200 80001c40 00000006 80002040     ....@.......@ ..
20051d78:	80002058                                X ..

20051d7c <fifo_9>:
20051d7c:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
20051d8c:	80002460                                `$..

20051d90 <fifo_10>:
20051d90:	00000200 80002464 00000001 80002864     ....d$......d(..
20051da0:	80002868                                h(..

20051da4 <fifo_11>:
20051da4:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
20051db4:	80002c70                                p,..

20051db8 <fifo_12>:
20051db8:	00000200 80002c74 00000001 80003074     ....t,......t0..
20051dc8:	80003078                                x0..

20051dcc <fifo_13>:
20051dcc:	00000200 8000307c 00000001 8000347c     ....|0......|4..
20051ddc:	80003480                                .4..

20051de0 <fifo_14>:
20051de0:	00000200 80003484 00000001 80003884     .....4.......8..
20051df0:	80003888                                .8..

20051df4 <fifo_15>:
20051df4:	00000200 8000388c 00000001 80003c8c     .....8.......<..
20051e04:	80003c90                                .<..

20051e08 <fifo_16>:
20051e08:	00000200 80003c94 00000001 80004094     .....<.......@..
20051e18:	80004098                                .@..

20051e1c <fifo_17>:
20051e1c:	00000200 8000409c 00000001 8000449c     .....@.......D..
20051e2c:	800044a0                                .D..

20051e30 <fifo_18>:
20051e30:	00000200 800044a4 00000001 800048a4     .....D.......H..
20051e40:	800048a8                                .H..

20051e44 <fifo_19>:
20051e44:	00000200 800048ac 00000001 80004cac     .....H.......L..
20051e54:	80004cb0                                .L..

20051e58 <fifo_20>:
20051e58:	00000200 80004cb4 00000001 800050b4     .....L.......P..
20051e68:	800050b8                                .P..

20051e6c <fifo_21>:
20051e6c:	00000200 800050bc 00000001 800054bc     .....P.......T..
20051e7c:	800054c0                                .T..

20051e80 <fifo_22>:
20051e80:	00000200 800054c4 00000001 800058c4     .....T.......X..
20051e90:	800058c8                                .X..

20051e94 <fifo_23>:
20051e94:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20051ea4:	80005cd0                                .\..

20051ea8 <fifo_24>:
20051ea8:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20051eb8:	80005ed8                                .^..

20051ebc <fifo_25>:
20051ebc:	00000200 80005edc 00000001 800066dc     .....^.......f..
20051ecc:	800066e0                                .f..

20051ed0 <fifo_26>:
20051ed0:	00000200 800066e4 00000001 800068e4     .....f.......h..
20051ee0:	800068e8                                .h..

20051ee4 <fifo_27>:
20051ee4:	00000200 800068ec 00000001 80006aec     .....h.......j..
20051ef4:	80006af0                                .j..

20051ef8 <fifo_28>:
20051ef8:	00000200 80006af4 00000001 80006ef4     .....j.......n..
20051f08:	80006ef8                                .n..

20051f0c <fifo_29>:
20051f0c:	00000200 80006efc 00000002 800072fc     .....n.......r..
20051f1c:	80007304                                .s..

20051f20 <fifo_30>:
20051f20:	00000200 80007308 00000001 80007708     .....s.......w..
20051f30:	8000770c                                .w..

20051f34 <fifo_31>:
20051f34:	00000200 80007710 00000001 80007910     .....w.......y..
20051f44:	80007914                                .y..

20051f48 <ptr>:
20051f48:	00000008                                ....

20051f4c <dc_buf>:
20051f4c:	04000400 04000400 04000400 04000400     ................
20051f5c:	04000400 04000400 04000400 04000400     ................
20051f6c:	04000400 04000400 04000400 04000400     ................
20051f7c:	04000400 04000400 04000400 04000400     ................
20051f8c:	04000400 04000400 04000400 04000400     ................
20051f9c:	04000400 04000400 04000400 04000400     ................
20051fac:	04000400 04000400 04000400 04000400     ................
20051fbc:	04000400 04000400 04000400 04000400     ................
20051fcc:	04000400 04000400 04000400 04000400     ................
20051fdc:	04000400 04000400 04000400 04000400     ................
20051fec:	04000400 04000400 04000400 04000400     ................
20051ffc:	04000400 04000400 04000400 04000400     ................
2005200c:	04000400 04000400 04000400 04000400     ................
2005201c:	04000400 04000400 04000400 04000400     ................

2005202c <needInit>:
2005202c:	00000001                                ....

20052030 <fifo_0>:
20052030:	00000200 80000000 00000001 80000200     ................
20052040:	80000204                                ....

20052044 <fifo_1>:
20052044:	00000200 80000208 00000001 80000408     ................
20052054:	8000040c                                ....

20052058 <fifo_2>:
20052058:	00000200 80000410 00000001 80000610     ................
20052068:	80000614                                ....

2005206c <fifo_3>:
2005206c:	00000200 80000618 00000001 80000a18     ................
2005207c:	80000a1c                                ....

20052080 <fifo_4>:
20052080:	00000200 80000a20 00000001 80000c20     .... ....... ...
20052090:	80000c24                                $...

20052094 <fifo_5>:
20052094:	00000200 80000c28 00000001 80001028     ....(.......(...
200520a4:	8000102c                                ,...

200520a8 <fifo_6>:
200520a8:	00000200 80001030 00000001 80001430     ....0.......0...
200520b8:	80001434                                4...

200520bc <fifo_7>:
200520bc:	00000200 80001438 00000001 80001c38     ....8.......8...
200520cc:	80001c3c                                <...

200520d0 <fifo_8>:
200520d0:	00000200 80001c40 00000006 80002040     ....@.......@ ..
200520e0:	80002058                                X ..

200520e4 <fifo_9>:
200520e4:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
200520f4:	80002460                                `$..

200520f8 <fifo_10>:
200520f8:	00000200 80002464 00000001 80002864     ....d$......d(..
20052108:	80002868                                h(..

2005210c <fifo_11>:
2005210c:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
2005211c:	80002c70                                p,..

20052120 <fifo_12>:
20052120:	00000200 80002c74 00000001 80003074     ....t,......t0..
20052130:	80003078                                x0..

20052134 <fifo_13>:
20052134:	00000200 8000307c 00000001 8000347c     ....|0......|4..
20052144:	80003480                                .4..

20052148 <fifo_14>:
20052148:	00000200 80003484 00000001 80003884     .....4.......8..
20052158:	80003888                                .8..

2005215c <fifo_15>:
2005215c:	00000200 8000388c 00000001 80003c8c     .....8.......<..
2005216c:	80003c90                                .<..

20052170 <fifo_16>:
20052170:	00000200 80003c94 00000001 80004094     .....<.......@..
20052180:	80004098                                .@..

20052184 <fifo_17>:
20052184:	00000200 8000409c 00000001 8000449c     .....@.......D..
20052194:	800044a0                                .D..

20052198 <fifo_18>:
20052198:	00000200 800044a4 00000001 800048a4     .....D.......H..
200521a8:	800048a8                                .H..

200521ac <fifo_19>:
200521ac:	00000200 800048ac 00000001 80004cac     .....H.......L..
200521bc:	80004cb0                                .L..

200521c0 <fifo_20>:
200521c0:	00000200 80004cb4 00000001 800050b4     .....L.......P..
200521d0:	800050b8                                .P..

200521d4 <fifo_21>:
200521d4:	00000200 800050bc 00000001 800054bc     .....P.......T..
200521e4:	800054c0                                .T..

200521e8 <fifo_22>:
200521e8:	00000200 800054c4 00000001 800058c4     .....T.......X..
200521f8:	800058c8                                .X..

200521fc <fifo_23>:
200521fc:	00000200 800058cc 00000001 80005ccc     .....X.......\..
2005220c:	80005cd0                                .\..

20052210 <fifo_24>:
20052210:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20052220:	80005ed8                                .^..

20052224 <fifo_25>:
20052224:	00000200 80005edc 00000001 800066dc     .....^.......f..
20052234:	800066e0                                .f..

20052238 <fifo_26>:
20052238:	00000200 800066e4 00000001 800068e4     .....f.......h..
20052248:	800068e8                                .h..

2005224c <fifo_27>:
2005224c:	00000200 800068ec 00000001 80006aec     .....h.......j..
2005225c:	80006af0                                .j..

20052260 <fifo_28>:
20052260:	00000200 80006af4 00000001 80006ef4     .....j.......n..
20052270:	80006ef8                                .n..

20052274 <fifo_29>:
20052274:	00000200 80006efc 00000002 800072fc     .....n.......r..
20052284:	80007304                                .s..

20052288 <fifo_30>:
20052288:	00000200 80007308 00000001 80007708     .....s.......w..
20052298:	8000770c                                .w..

2005229c <fifo_31>:
2005229c:	00000200 80007710 00000001 80007910     .....w.......y..
200522ac:	80007914                                .y..

200522b0 <needInit>:
200522b0:	00000001                                ....

200522b4 <fifo_0>:
200522b4:	00000200 80000000 00000001 80000200     ................
200522c4:	80000204                                ....

200522c8 <fifo_1>:
200522c8:	00000200 80000208 00000001 80000408     ................
200522d8:	8000040c                                ....

200522dc <fifo_2>:
200522dc:	00000200 80000410 00000001 80000610     ................
200522ec:	80000614                                ....

200522f0 <fifo_3>:
200522f0:	00000200 80000618 00000001 80000a18     ................
20052300:	80000a1c                                ....

20052304 <fifo_4>:
20052304:	00000200 80000a20 00000001 80000c20     .... ....... ...
20052314:	80000c24                                $...

20052318 <fifo_5>:
20052318:	00000200 80000c28 00000001 80001028     ....(.......(...
20052328:	8000102c                                ,...

2005232c <fifo_6>:
2005232c:	00000200 80001030 00000001 80001430     ....0.......0...
2005233c:	80001434                                4...

20052340 <fifo_7>:
20052340:	00000200 80001438 00000001 80001c38     ....8.......8...
20052350:	80001c3c                                <...

20052354 <fifo_8>:
20052354:	00000200 80001c40 00000006 80002040     ....@.......@ ..
20052364:	80002058                                X ..

20052368 <fifo_9>:
20052368:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
20052378:	80002460                                `$..

2005237c <fifo_10>:
2005237c:	00000200 80002464 00000001 80002864     ....d$......d(..
2005238c:	80002868                                h(..

20052390 <fifo_11>:
20052390:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
200523a0:	80002c70                                p,..

200523a4 <fifo_12>:
200523a4:	00000200 80002c74 00000001 80003074     ....t,......t0..
200523b4:	80003078                                x0..

200523b8 <fifo_13>:
200523b8:	00000200 8000307c 00000001 8000347c     ....|0......|4..
200523c8:	80003480                                .4..

200523cc <fifo_14>:
200523cc:	00000200 80003484 00000001 80003884     .....4.......8..
200523dc:	80003888                                .8..

200523e0 <fifo_15>:
200523e0:	00000200 8000388c 00000001 80003c8c     .....8.......<..
200523f0:	80003c90                                .<..

200523f4 <fifo_16>:
200523f4:	00000200 80003c94 00000001 80004094     .....<.......@..
20052404:	80004098                                .@..

20052408 <fifo_17>:
20052408:	00000200 8000409c 00000001 8000449c     .....@.......D..
20052418:	800044a0                                .D..

2005241c <fifo_18>:
2005241c:	00000200 800044a4 00000001 800048a4     .....D.......H..
2005242c:	800048a8                                .H..

20052430 <fifo_19>:
20052430:	00000200 800048ac 00000001 80004cac     .....H.......L..
20052440:	80004cb0                                .L..

20052444 <fifo_20>:
20052444:	00000200 80004cb4 00000001 800050b4     .....L.......P..
20052454:	800050b8                                .P..

20052458 <fifo_21>:
20052458:	00000200 800050bc 00000001 800054bc     .....P.......T..
20052468:	800054c0                                .T..

2005246c <fifo_22>:
2005246c:	00000200 800054c4 00000001 800058c4     .....T.......X..
2005247c:	800058c8                                .X..

20052480 <fifo_23>:
20052480:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20052490:	80005cd0                                .\..

20052494 <fifo_24>:
20052494:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
200524a4:	80005ed8                                .^..

200524a8 <fifo_25>:
200524a8:	00000200 80005edc 00000001 800066dc     .....^.......f..
200524b8:	800066e0                                .f..

200524bc <fifo_26>:
200524bc:	00000200 800066e4 00000001 800068e4     .....f.......h..
200524cc:	800068e8                                .h..

200524d0 <fifo_27>:
200524d0:	00000200 800068ec 00000001 80006aec     .....h.......j..
200524e0:	80006af0                                .j..

200524e4 <fifo_28>:
200524e4:	00000200 80006af4 00000001 80006ef4     .....j.......n..
200524f4:	80006ef8                                .n..

200524f8 <fifo_29>:
200524f8:	00000200 80006efc 00000002 800072fc     .....n.......r..
20052508:	80007304                                .s..

2005250c <fifo_30>:
2005250c:	00000200 80007308 00000001 80007708     .....s.......w..
2005251c:	8000770c                                .w..

20052520 <fifo_31>:
20052520:	00000200 80007710 00000001 80007910     .....w.......y..
20052530:	80007914                                .y..

20052534 <needInit>:
20052534:	00000001                                ....

20052538 <fifo_0>:
20052538:	00000200 80000000 00000001 80000200     ................
20052548:	80000204                                ....

2005254c <fifo_1>:
2005254c:	00000200 80000208 00000001 80000408     ................
2005255c:	8000040c                                ....

20052560 <fifo_2>:
20052560:	00000200 80000410 00000001 80000610     ................
20052570:	80000614                                ....

20052574 <fifo_3>:
20052574:	00000200 80000618 00000001 80000a18     ................
20052584:	80000a1c                                ....

20052588 <fifo_4>:
20052588:	00000200 80000a20 00000001 80000c20     .... ....... ...
20052598:	80000c24                                $...

2005259c <fifo_5>:
2005259c:	00000200 80000c28 00000001 80001028     ....(.......(...
200525ac:	8000102c                                ,...

200525b0 <fifo_6>:
200525b0:	00000200 80001030 00000001 80001430     ....0.......0...
200525c0:	80001434                                4...

200525c4 <fifo_7>:
200525c4:	00000200 80001438 00000001 80001c38     ....8.......8...
200525d4:	80001c3c                                <...

200525d8 <fifo_8>:
200525d8:	00000200 80001c40 00000006 80002040     ....@.......@ ..
200525e8:	80002058                                X ..

200525ec <fifo_9>:
200525ec:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
200525fc:	80002460                                `$..

20052600 <fifo_10>:
20052600:	00000200 80002464 00000001 80002864     ....d$......d(..
20052610:	80002868                                h(..

20052614 <fifo_11>:
20052614:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
20052624:	80002c70                                p,..

20052628 <fifo_12>:
20052628:	00000200 80002c74 00000001 80003074     ....t,......t0..
20052638:	80003078                                x0..

2005263c <fifo_13>:
2005263c:	00000200 8000307c 00000001 8000347c     ....|0......|4..
2005264c:	80003480                                .4..

20052650 <fifo_14>:
20052650:	00000200 80003484 00000001 80003884     .....4.......8..
20052660:	80003888                                .8..

20052664 <fifo_15>:
20052664:	00000200 8000388c 00000001 80003c8c     .....8.......<..
20052674:	80003c90                                .<..

20052678 <fifo_16>:
20052678:	00000200 80003c94 00000001 80004094     .....<.......@..
20052688:	80004098                                .@..

2005268c <fifo_17>:
2005268c:	00000200 8000409c 00000001 8000449c     .....@.......D..
2005269c:	800044a0                                .D..

200526a0 <fifo_18>:
200526a0:	00000200 800044a4 00000001 800048a4     .....D.......H..
200526b0:	800048a8                                .H..

200526b4 <fifo_19>:
200526b4:	00000200 800048ac 00000001 80004cac     .....H.......L..
200526c4:	80004cb0                                .L..

200526c8 <fifo_20>:
200526c8:	00000200 80004cb4 00000001 800050b4     .....L.......P..
200526d8:	800050b8                                .P..

200526dc <fifo_21>:
200526dc:	00000200 800050bc 00000001 800054bc     .....P.......T..
200526ec:	800054c0                                .T..

200526f0 <fifo_22>:
200526f0:	00000200 800054c4 00000001 800058c4     .....T.......X..
20052700:	800058c8                                .X..

20052704 <fifo_23>:
20052704:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20052714:	80005cd0                                .\..

20052718 <fifo_24>:
20052718:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20052728:	80005ed8                                .^..

2005272c <fifo_25>:
2005272c:	00000200 80005edc 00000001 800066dc     .....^.......f..
2005273c:	800066e0                                .f..

20052740 <fifo_26>:
20052740:	00000200 800066e4 00000001 800068e4     .....f.......h..
20052750:	800068e8                                .h..

20052754 <fifo_27>:
20052754:	00000200 800068ec 00000001 80006aec     .....h.......j..
20052764:	80006af0                                .j..

20052768 <fifo_28>:
20052768:	00000200 80006af4 00000001 80006ef4     .....j.......n..
20052778:	80006ef8                                .n..

2005277c <fifo_29>:
2005277c:	00000200 80006efc 00000002 800072fc     .....n.......r..
2005278c:	80007304                                .s..

20052790 <fifo_30>:
20052790:	00000200 80007308 00000001 80007708     .....s.......w..
200527a0:	8000770c                                .w..

200527a4 <fifo_31>:
200527a4:	00000200 80007710 00000001 80007910     .....w.......y..
200527b4:	80007914                                .y..

200527b8 <needInit>:
200527b8:	00000001                                ....

200527bc <fifo_0>:
200527bc:	00000200 80000000 00000001 80000200     ................
200527cc:	80000204                                ....

200527d0 <fifo_1>:
200527d0:	00000200 80000208 00000001 80000408     ................
200527e0:	8000040c                                ....

200527e4 <fifo_2>:
200527e4:	00000200 80000410 00000001 80000610     ................
200527f4:	80000614                                ....

200527f8 <fifo_3>:
200527f8:	00000200 80000618 00000001 80000a18     ................
20052808:	80000a1c                                ....

2005280c <fifo_4>:
2005280c:	00000200 80000a20 00000001 80000c20     .... ....... ...
2005281c:	80000c24                                $...

20052820 <fifo_5>:
20052820:	00000200 80000c28 00000001 80001028     ....(.......(...
20052830:	8000102c                                ,...

20052834 <fifo_6>:
20052834:	00000200 80001030 00000001 80001430     ....0.......0...
20052844:	80001434                                4...

20052848 <fifo_7>:
20052848:	00000200 80001438 00000001 80001c38     ....8.......8...
20052858:	80001c3c                                <...

2005285c <fifo_8>:
2005285c:	00000200 80001c40 00000006 80002040     ....@.......@ ..
2005286c:	80002058                                X ..

20052870 <fifo_9>:
20052870:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
20052880:	80002460                                `$..

20052884 <fifo_10>:
20052884:	00000200 80002464 00000001 80002864     ....d$......d(..
20052894:	80002868                                h(..

20052898 <fifo_11>:
20052898:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
200528a8:	80002c70                                p,..

200528ac <fifo_12>:
200528ac:	00000200 80002c74 00000001 80003074     ....t,......t0..
200528bc:	80003078                                x0..

200528c0 <fifo_13>:
200528c0:	00000200 8000307c 00000001 8000347c     ....|0......|4..
200528d0:	80003480                                .4..

200528d4 <fifo_14>:
200528d4:	00000200 80003484 00000001 80003884     .....4.......8..
200528e4:	80003888                                .8..

200528e8 <fifo_15>:
200528e8:	00000200 8000388c 00000001 80003c8c     .....8.......<..
200528f8:	80003c90                                .<..

200528fc <fifo_16>:
200528fc:	00000200 80003c94 00000001 80004094     .....<.......@..
2005290c:	80004098                                .@..

20052910 <fifo_17>:
20052910:	00000200 8000409c 00000001 8000449c     .....@.......D..
20052920:	800044a0                                .D..

20052924 <fifo_18>:
20052924:	00000200 800044a4 00000001 800048a4     .....D.......H..
20052934:	800048a8                                .H..

20052938 <fifo_19>:
20052938:	00000200 800048ac 00000001 80004cac     .....H.......L..
20052948:	80004cb0                                .L..

2005294c <fifo_20>:
2005294c:	00000200 80004cb4 00000001 800050b4     .....L.......P..
2005295c:	800050b8                                .P..

20052960 <fifo_21>:
20052960:	00000200 800050bc 00000001 800054bc     .....P.......T..
20052970:	800054c0                                .T..

20052974 <fifo_22>:
20052974:	00000200 800054c4 00000001 800058c4     .....T.......X..
20052984:	800058c8                                .X..

20052988 <fifo_23>:
20052988:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20052998:	80005cd0                                .\..

2005299c <fifo_24>:
2005299c:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
200529ac:	80005ed8                                .^..

200529b0 <fifo_25>:
200529b0:	00000200 80005edc 00000001 800066dc     .....^.......f..
200529c0:	800066e0                                .f..

200529c4 <fifo_26>:
200529c4:	00000200 800066e4 00000001 800068e4     .....f.......h..
200529d4:	800068e8                                .h..

200529d8 <fifo_27>:
200529d8:	00000200 800068ec 00000001 80006aec     .....h.......j..
200529e8:	80006af0                                .j..

200529ec <fifo_28>:
200529ec:	00000200 80006af4 00000001 80006ef4     .....j.......n..
200529fc:	80006ef8                                .n..

20052a00 <fifo_29>:
20052a00:	00000200 80006efc 00000002 800072fc     .....n.......r..
20052a10:	80007304                                .s..

20052a14 <fifo_30>:
20052a14:	00000200 80007308 00000001 80007708     .....s.......w..
20052a24:	8000770c                                .w..

20052a28 <fifo_31>:
20052a28:	00000200 80007710 00000001 80007910     .....w.......y..
20052a38:	80007914                                .y..

20052a3c <needInit>:
20052a3c:	00000001                                ....

20052a40 <fifo_0>:
20052a40:	00000200 80000000 00000001 80000200     ................
20052a50:	80000204                                ....

20052a54 <fifo_1>:
20052a54:	00000200 80000208 00000001 80000408     ................
20052a64:	8000040c                                ....

20052a68 <fifo_2>:
20052a68:	00000200 80000410 00000001 80000610     ................
20052a78:	80000614                                ....

20052a7c <fifo_3>:
20052a7c:	00000200 80000618 00000001 80000a18     ................
20052a8c:	80000a1c                                ....

20052a90 <fifo_4>:
20052a90:	00000200 80000a20 00000001 80000c20     .... ....... ...
20052aa0:	80000c24                                $...

20052aa4 <fifo_5>:
20052aa4:	00000200 80000c28 00000001 80001028     ....(.......(...
20052ab4:	8000102c                                ,...

20052ab8 <fifo_6>:
20052ab8:	00000200 80001030 00000001 80001430     ....0.......0...
20052ac8:	80001434                                4...

20052acc <fifo_7>:
20052acc:	00000200 80001438 00000001 80001c38     ....8.......8...
20052adc:	80001c3c                                <...

20052ae0 <fifo_8>:
20052ae0:	00000200 80001c40 00000006 80002040     ....@.......@ ..
20052af0:	80002058                                X ..

20052af4 <fifo_9>:
20052af4:	00000200 8000205c 00000001 8000245c     ....\ ......\$..
20052b04:	80002460                                `$..

20052b08 <fifo_10>:
20052b08:	00000200 80002464 00000001 80002864     ....d$......d(..
20052b18:	80002868                                h(..

20052b1c <fifo_11>:
20052b1c:	00000200 8000286c 00000001 80002c6c     ....l(......l,..
20052b2c:	80002c70                                p,..

20052b30 <fifo_12>:
20052b30:	00000200 80002c74 00000001 80003074     ....t,......t0..
20052b40:	80003078                                x0..

20052b44 <fifo_13>:
20052b44:	00000200 8000307c 00000001 8000347c     ....|0......|4..
20052b54:	80003480                                .4..

20052b58 <fifo_14>:
20052b58:	00000200 80003484 00000001 80003884     .....4.......8..
20052b68:	80003888                                .8..

20052b6c <fifo_15>:
20052b6c:	00000200 8000388c 00000001 80003c8c     .....8.......<..
20052b7c:	80003c90                                .<..

20052b80 <fifo_16>:
20052b80:	00000200 80003c94 00000001 80004094     .....<.......@..
20052b90:	80004098                                .@..

20052b94 <fifo_17>:
20052b94:	00000200 8000409c 00000001 8000449c     .....@.......D..
20052ba4:	800044a0                                .D..

20052ba8 <fifo_18>:
20052ba8:	00000200 800044a4 00000001 800048a4     .....D.......H..
20052bb8:	800048a8                                .H..

20052bbc <fifo_19>:
20052bbc:	00000200 800048ac 00000001 80004cac     .....H.......L..
20052bcc:	80004cb0                                .L..

20052bd0 <fifo_20>:
20052bd0:	00000200 80004cb4 00000001 800050b4     .....L.......P..
20052be0:	800050b8                                .P..

20052be4 <fifo_21>:
20052be4:	00000200 800050bc 00000001 800054bc     .....P.......T..
20052bf4:	800054c0                                .T..

20052bf8 <fifo_22>:
20052bf8:	00000200 800054c4 00000001 800058c4     .....T.......X..
20052c08:	800058c8                                .X..

20052c0c <fifo_23>:
20052c0c:	00000200 800058cc 00000001 80005ccc     .....X.......\..
20052c1c:	80005cd0                                .\..

20052c20 <fifo_24>:
20052c20:	00000200 80005cd4 00000001 80005ed4     .....\.......^..
20052c30:	80005ed8                                .^..

20052c34 <fifo_25>:
20052c34:	00000200 80005edc 00000001 800066dc     .....^.......f..
20052c44:	800066e0                                .f..

20052c48 <fifo_26>:
20052c48:	00000200 800066e4 00000001 800068e4     .....f.......h..
20052c58:	800068e8                                .h..

20052c5c <fifo_27>:
20052c5c:	00000200 800068ec 00000001 80006aec     .....h.......j..
20052c6c:	80006af0                                .j..

20052c70 <fifo_28>:
20052c70:	00000200 80006af4 00000001 80006ef4     .....j.......n..
20052c80:	80006ef8                                .n..

20052c84 <fifo_29>:
20052c84:	00000200 80006efc 00000002 800072fc     .....n.......r..
20052c94:	80007304                                .s..

20052c98 <fifo_30>:
20052c98:	00000200 80007308 00000001 80007708     .....s.......w..
20052ca8:	8000770c                                .w..

20052cac <fifo_31>:
20052cac:	00000200 80007710 00000001 80007910     .....w.......y..
20052cbc:	80007914                                .y..

20052cc0 <needInit>:
20052cc0:	00000001                                ....

20052cc4 <index_YUV_i>:
20052cc4:	00000000                                ....

20052cc8 <numTokens_YUV_i>:
20052cc8:	00000000                                ....

20052ccc <index_YUV>:
20052ccc:	00000000                                ....

20052cd0 <numFree_YUV>:
20052cd0:	00000000                                ....

20052cd4 <_FSM_state>:
20052cd4:	00000000                                ....

20052cd8 <index_MOT>:
20052cd8:	00000000                                ....

20052cdc <numTokens_MOT>:
20052cdc:	00000000                                ....

20052ce0 <index_TEX>:
20052ce0:	00000000                                ....

20052ce4 <numTokens_TEX>:
20052ce4:	00000000                                ....

20052ce8 <index_BTYPE>:
20052ce8:	00000000                                ....

20052cec <numTokens_BTYPE>:
20052cec:	00000000                                ....

20052cf0 <index_VID>:
20052cf0:	00000000                                ....

20052cf4 <numFree_VID>:
20052cf4:	00000000                                ....

20052cf8 <_FSM_state>:
20052cf8:	00000000                                ....

20052cfc <index_MV>:
20052cfc:	00000000                                ....

20052d00 <numTokens_MV>:
20052d00:	00000000                                ....

20052d04 <index_BTYPE>:
20052d04:	00000000                                ....

20052d08 <numTokens_BTYPE>:
20052d08:	00000000                                ....

20052d0c <index_WD>:
20052d0c:	00000000                                ....

20052d10 <numTokens_WD>:
20052d10:	00000000                                ....

20052d14 <index_halfpel>:
20052d14:	00000000                                ....

20052d18 <numFree_halfpel>:
20052d18:	00000000                                ....

20052d1c <index_RD>:
20052d1c:	00000000                                ....

20052d20 <numFree_RD>:
20052d20:	00000000                                ....

20052d24 <frameBuffer>:
	...

20063524 <frameBuffer_U>:
	...

20067724 <frameBuffer_V>:
	...

2006b924 <vop_width>:
2006b924:	00000000                                ....

2006b928 <vop_height>:
2006b928:	00000000                                ....

2006b92c <vop_width_in_samples>:
2006b92c:	00000000                                ....

2006b930 <vop_height_in_samples>:
2006b930:	00000000                                ....

2006b934 <vop_rounding_mode>:
2006b934:	00000000                                ....

2006b938 <max_outstanding_writes>:
2006b938:	00000000                                ....

2006b93c <vop_width_in_samples_U>:
2006b93c:	00000000                                ....

2006b940 <vop_height_in_samples_U>:
2006b940:	00000000                                ....

2006b944 <mvx>:
	...

2006b946 <mvy>:
	...

2006b948 <mbx_read>:
2006b948:	00000000                                ....

2006b94c <mby_read>:
2006b94c:	00000000                                ....

2006b950 <outstanding_writes>:
2006b950:	00000000                                ....

2006b954 <mb_write_ptr>:
2006b954:	00000000                                ....

2006b958 <mbx_write>:
2006b958:	00000000                                ....

2006b95c <mb_write_ptr_chroma>:
2006b95c:	00000000                                ....

2006b960 <comp_so_far>:
2006b960:	00000000                                ....

2006b964 <_FSM_state>:
2006b964:	00000000                                ....

2006b968 <index_RD>:
2006b968:	00000000                                ....

2006b96c <numTokens_RD>:
2006b96c:	00000000                                ....

2006b970 <index_halfpel>:
2006b970:	00000000                                ....

2006b974 <numTokens_halfpel>:
2006b974:	00000000                                ....

2006b978 <index_MOT>:
2006b978:	00000000                                ....

2006b97c <numFree_MOT>:
2006b97c:	00000000                                ....

2006b980 <index_RUN>:
2006b980:	00000000                                ....

2006b984 <numTokens_RUN>:
2006b984:	00000000                                ....

2006b988 <index_VALUE>:
2006b988:	00000000                                ....

2006b98c <numTokens_VALUE>:
2006b98c:	00000000                                ....

2006b990 <index_LAST>:
2006b990:	00000000                                ....

2006b994 <numTokens_LAST>:
2006b994:	00000000                                ....

2006b998 <index_QFS>:
2006b998:	00000000                                ....

2006b99c <numFree_QFS>:
2006b99c:	00000000                                ....

2006b9a0 <count>:
2006b9a0:	00000000                                ....

2006b9a4 <qfs>:
	...

2006ba24 <_FSM_state>:
2006ba24:	00000000                                ....

2006ba28 <index_BTYPE>:
2006ba28:	00000000                                ....

2006ba2c <numTokens_BTYPE>:
2006ba2c:	00000000                                ....

2006ba30 <index_MVIN>:
2006ba30:	00000000                                ....

2006ba34 <numTokens_MVIN>:
2006ba34:	00000000                                ....

2006ba38 <index_A>:
2006ba38:	00000000                                ....

2006ba3c <numTokens_A>:
2006ba3c:	00000000                                ....

2006ba40 <index_MV>:
2006ba40:	00000000                                ....

2006ba44 <numFree_MV>:
2006ba44:	00000000                                ....

2006ba48 <mbx>:
	...

2006ba49 <comp>:
	...

2006ba4a <mbwidth>:
	...

2006ba4c <ptr>:
2006ba4c:	00000000                                ....

2006ba50 <buf>:
	...

2006bb50 <mv_rsize>:
	...

2006bb52 <mv_range>:
	...

2006bb54 <mv_low>:
	...

2006bb56 <mv_high>:
	...

2006bb58 <fourmv>:
2006bb58:	00000000                                ....

2006bb5c <aptr>:
	...

2006bb5e <bptr>:
	...

2006bb60 <cptr>:
	...

2006bb62 <apred>:
	...

2006bb64 <bpred>:
	...

2006bb66 <cpred>:
	...

2006bb68 <mag>:
	...

2006bb6a <mv_x>:
	...

2006bb6c <mv_y>:
	...

2006bb6e <sum_x>:
	...

2006bb70 <sum_y>:
2006bb70:	00000000                                ....

2006bb74 <x_flag>:
2006bb74:	00000000                                ....

2006bb78 <res_shift>:
2006bb78:	00000000                                ....

2006bb7c <_FSM_state>:
2006bb7c:	00000000                                ....

2006bb80 <index_BTYPE>:
2006bb80:	00000000                                ....

2006bb84 <numTokens_BTYPE>:
2006bb84:	00000000                                ....

2006bb88 <index_A>:
2006bb88:	00000000                                ....

2006bb8c <numFree_A>:
2006bb8c:	00000000                                ....

2006bb90 <mbx>:
2006bb90:	00000000                                ....

2006bb94 <right_edge>:
2006bb94:	00000000                                ....

2006bb98 <comp>:
	...

2006bb99 <mbwidth>:
	...

2006bb9a <ptr>:
	...

2006bb9b <ptr_left>:
	...

2006bb9c <ptr_above>:
	...

2006bb9d <ptr_above_right>:
2006bb9d:	00000000                                         ...

2006bba0 <_FSM_state>:
2006bba0:	00000000                                ....

2006bba4 <index_BYTE>:
2006bba4:	00000000                                ....

2006bba8 <numTokens_BYTE>:
2006bba8:	00000000                                ....

2006bbac <index_BTYPE>:
2006bbac:	00000000                                ....

2006bbb0 <numFree_BTYPE>:
2006bbb0:	00000000                                ....

2006bbb4 <index_MV>:
2006bbb4:	00000000                                ....

2006bbb8 <numFree_MV>:
2006bbb8:	00000000                                ....

2006bbbc <index_RUN>:
2006bbbc:	00000000                                ....

2006bbc0 <numFree_RUN>:
2006bbc0:	00000000                                ....

2006bbc4 <index_VALUE>:
2006bbc4:	00000000                                ....

2006bbc8 <numFree_VALUE>:
2006bbc8:	00000000                                ....

2006bbcc <index_LAST>:
2006bbcc:	00000000                                ....

2006bbd0 <numFree_LAST>:
2006bbd0:	00000000                                ....

2006bbd4 <index_WIDTH>:
2006bbd4:	00000000                                ....

2006bbd8 <numFree_WIDTH>:
2006bbd8:	00000000                                ....

2006bbdc <index_HEIGHT>:
2006bbdc:	00000000                                ....

2006bbe0 <numFree_HEIGHT>:
2006bbe0:	00000000                                ....

2006bbe4 <index_QP>:
2006bbe4:	00000000                                ....

2006bbe8 <numFree_QP>:
2006bbe8:	00000000                                ....

2006bbec <fifo>:
	...

2006bc00 <zeroByte>:
	...

2006bc01 <start_code>:
2006bc01:	00000000                                         ...

2006bc04 <vol_control_parameters>:
2006bc04:	00000000                                ....

2006bc08 <vbv_parameters>:
2006bc08:	00000000                                ....

2006bc0c <vop_time_increment_resolution_bits>:
	...

2006bc0e <video_object_layer_width>:
	...

2006bc10 <video_object_layer_height>:
	...

2006bc12 <mb_pic>:
	...

2006bc14 <vop_coding_type>:
2006bc14:	00000000                                ....

2006bc18 <vop_coded>:
2006bc18:	00000000                                ....

2006bc1c <round>:
2006bc1c:	00000000                                ....

2006bc20 <vop_quant>:
	...

2006bc21 <prev_quant>:
	...

2006bc22 <intra_dc_vlc_thr>:
	...

2006bc23 <fcode>:
	...

2006bc24 <mb_cnt>:
2006bc24:	00000000                                ....

2006bc28 <derived_mb_type>:
	...

2006bc29 <cbpc>:
2006bc29:	00000000                                         ...

2006bc2c <is_intra>:
2006bc2c:	00000000                                ....

2006bc30 <btype_is_Q>:
2006bc30:	00000000                                ....

2006bc34 <fourmvflag>:
2006bc34:	00000000                                ....

2006bc38 <not_coded>:
2006bc38:	00000000                                ....

2006bc3c <cbp>:
2006bc3c:	00000000                                ....

2006bc40 <ac_pred_flag>:
2006bc40:	00000000                                ....

2006bc44 <comp>:
2006bc44:	00000000                                ....

2006bc48 <last>:
2006bc48:	00000000                                ....

2006bc4c <run>:
2006bc4c:	00000000                                ....

2006bc50 <level>:
2006bc50:	00000000                                ....

2006bc54 <ac_coded>:
2006bc54:	00000000                                ....

2006bc58 <mvcomp>:
2006bc58:	00000000                                ....

2006bc5c <_FSM_state>:
2006bc5c:	00000000                                ....

2006bc60 <index_BTYPE>:
2006bc60:	00000000                                ....

2006bc64 <numTokens_BTYPE>:
2006bc64:	00000000                                ....

2006bc68 <index_A>:
2006bc68:	00000000                                ....

2006bc6c <numFree_A>:
2006bc6c:	00000000                                ....

2006bc70 <index_B>:
2006bc70:	00000000                                ....

2006bc74 <numFree_B>:
2006bc74:	00000000                                ....

2006bc78 <index_C>:
2006bc78:	00000000                                ....

2006bc7c <numFree_C>:
2006bc7c:	00000000                                ....

2006bc80 <mbx>:
2006bc80:	00000000                                ....

2006bc84 <left_edge>:
2006bc84:	00000000                                ....

2006bc88 <comp>:
	...

2006bc89 <mbwidth>:
2006bc89:	00000000                                         ...

2006bc8c <coded>:
	...

2006be4c <ptr>:
	...

2006be4d <ptr_left>:
	...

2006be4e <ptr_above>:
	...

2006be4f <ptr_above_left>:
	...

2006be50 <_FSM_state>:
2006be50:	00000000                                ....

2006be54 <index_BTYPE>:
2006be54:	00000000                                ....

2006be58 <numTokens_BTYPE>:
2006be58:	00000000                                ....

2006be5c <index_A>:
2006be5c:	00000000                                ....

2006be60 <numTokens_A>:
2006be60:	00000000                                ....

2006be64 <index_B>:
2006be64:	00000000                                ....

2006be68 <numTokens_B>:
2006be68:	00000000                                ....

2006be6c <index_C>:
2006be6c:	00000000                                ....

2006be70 <numTokens_C>:
2006be70:	00000000                                ....

2006be74 <index_QFS_DC>:
2006be74:	00000000                                ....

2006be78 <numTokens_QFS_DC>:
2006be78:	00000000                                ....

2006be7c <index_QP>:
2006be7c:	00000000                                ....

2006be80 <numTokens_QP>:
2006be80:	00000000                                ....

2006be84 <index_QF_DC>:
2006be84:	00000000                                ....

2006be88 <numFree_QF_DC>:
2006be88:	00000000                                ....

2006be8c <index_PTR>:
2006be8c:	00000000                                ....

2006be90 <numFree_PTR>:
2006be90:	00000000                                ....

2006be94 <index_AC_PRED_DIR>:
2006be94:	00000000                                ....

2006be98 <numFree_AC_PRED_DIR>:
2006be98:	00000000                                ....

2006be9c <index_MODE>:
2006be9c:	00000000                                ....

2006bea0 <numFree_MODE>:
2006bea0:	00000000                                ....

2006bea4 <index_SIGNED>:
2006bea4:	00000000                                ....

2006bea8 <numFree_SIGNED>:
2006bea8:	00000000                                ....

2006beac <index_QUANT>:
2006beac:	00000000                                ....

2006beb0 <numFree_QUANT>:
2006beb0:	00000000                                ....

2006beb4 <s_QP>:
	...

2006beb5 <round>:
	...

2006beb6 <comp>:
	...

2006beb8 <dc_pred>:
	...

2006beba <scaler>:
	...

2006bebc <dc_val>:
2006bebc:	00000000                                ....

2006bec0 <is_signed>:
2006bec0:	00000000                                ....

2006bec4 <_FSM_state>:
2006bec4:	00000000                                ....

2006bec8 <index_IN>:
2006bec8:	00000000                                ....

2006becc <numTokens_IN>:
2006becc:	00000000                                ....

2006bed0 <index_DC>:
2006bed0:	00000000                                ....

2006bed4 <numFree_DC>:
2006bed4:	00000000                                ....

2006bed8 <index_AC>:
2006bed8:	00000000                                ....

2006bedc <numFree_AC>:
2006bedc:	00000000                                ....

2006bee0 <index_PQF_AC>:
2006bee0:	00000000                                ....

2006bee4 <numTokens_PQF_AC>:
2006bee4:	00000000                                ....

2006bee8 <index_PTR>:
2006bee8:	00000000                                ....

2006beec <numTokens_PTR>:
2006beec:	00000000                                ....

2006bef0 <index_AC_PRED_DIR>:
2006bef0:	00000000                                ....

2006bef4 <numTokens_AC_PRED_DIR>:
2006bef4:	00000000                                ....

2006bef8 <index_QF_AC>:
2006bef8:	00000000                                ....

2006befc <numFree_QF_AC>:
2006befc:	00000000                                ....

2006bf00 <ptr>:
	...

2006bf02 <pred_ptr>:
	...

2006bf04 <buf>:
	...

2006cd04 <comp>:
2006cd04:	00000000                                ....

2006cd08 <top>:
2006cd08:	00000000                                ....

2006cd0c <acpred_flag>:
2006cd0c:	00000000                                ....

2006cd10 <_FSM_state>:
2006cd10:	00000000                                ....

2006cd14 <index_DC>:
2006cd14:	00000000                                ....

2006cd18 <numTokens_DC>:
2006cd18:	00000000                                ....

2006cd1c <index_AC>:
2006cd1c:	00000000                                ....

2006cd20 <numTokens_AC>:
2006cd20:	00000000                                ....

2006cd24 <index_QP>:
2006cd24:	00000000                                ....

2006cd28 <numTokens_QP>:
2006cd28:	00000000                                ....

2006cd2c <index_OUT>:
2006cd2c:	00000000                                ....

2006cd30 <numFree_OUT>:
2006cd30:	00000000                                ....

2006cd34 <quant>:
	...

2006cd35 <round>:
2006cd35:	00000000                                         ...

2006cd38 <_FSM_state>:
2006cd38:	00000000                                ....

2006cd3c <index_AC_PRED_DIR>:
2006cd3c:	00000000                                ....

2006cd40 <numTokens_AC_PRED_DIR>:
2006cd40:	00000000                                ....

2006cd44 <index_QFS_AC>:
2006cd44:	00000000                                ....

2006cd48 <numTokens_QFS_AC>:
2006cd48:	00000000                                ....

2006cd4c <index_PQF_AC>:
2006cd4c:	00000000                                ....

2006cd50 <numFree_PQF_AC>:
2006cd50:	00000000                                ....

2006cd54 <index_IN>:
2006cd54:	00000000                                ....

2006cd58 <numTokens_IN>:
2006cd58:	00000000                                ....

2006cd5c <index_SIGNED>:
2006cd5c:	00000000                                ....

2006cd60 <numTokens_SIGNED>:
2006cd60:	00000000                                ....

2006cd64 <index_OUT>:
2006cd64:	00000000                                ....

2006cd68 <numFree_OUT>:
2006cd68:	00000000                                ....

Disassembly of section .text:

00000050 <_start1>:
  50:	31a026f0 	addik	r13, r0, 9968	// 26f0 <_SDA_BASE_>
  54:	30400698 	addik	r2, r0, 1688	// 698 <_SDA2_BASE_>
  58:	30202f08 	addik	r1, r0, 12040
  5c:	b9f401ac 	brlid	r15, 428	// 208 <_crtinit>
  60:	80000000 	or	r0, r0, r0
  64:	b9f40334 	brlid	r15, 820	// 398 <exit>
  68:	30a30000 	addik	r5, r3, 0

0000006c <_exit>:
  6c:	b8000000 	bri	0	// 6c <_exit>

00000070 <deregister_tm_clones>:
  70:	30a01968 	addik	r5, r0, 6504	// 1968 <__TMC_END__>
  74:	3080196b 	addik	r4, r0, 6507
  78:	30600006 	addik	r3, r0, 6
  7c:	14852000 	rsubk	r4, r5, r4
  80:	16441803 	cmpu	r18, r4, r3
  84:	bc52000c 	blti	r18, 12		// 90
  88:	b60f0008 	rtsd	r15, 8
  8c:	80000000 	or	r0, r0, r0
  90:	b0000000 	imm	0
  94:	30600000 	addik	r3, r0, 0
  98:	bc03fff0 	beqi	r3, -16		// 88
  9c:	3021ffe4 	addik	r1, r1, -28
  a0:	f9e10000 	swi	r15, r1, 0
  a4:	99fc1800 	brald	r15, r3
  a8:	80000000 	or	r0, r0, r0
  ac:	e9e10000 	lwi	r15, r1, 0
  b0:	b60f0008 	rtsd	r15, 8
  b4:	3021001c 	addik	r1, r1, 28

000000b8 <register_tm_clones>:
  b8:	30a01968 	addik	r5, r0, 6504	// 1968 <__TMC_END__>
  bc:	30601968 	addik	r3, r0, 6504	// 1968 <__TMC_END__>
  c0:	14651800 	rsubk	r3, r5, r3
  c4:	64630202 	bsrai	r3, r3, 2
  c8:	6483001f 	bsrli	r4, r3, 31
  cc:	10641800 	addk	r3, r4, r3
  d0:	90c30001 	sra	r6, r3
  d4:	bc26000c 	bnei	r6, 12		// e0
  d8:	b60f0008 	rtsd	r15, 8
  dc:	80000000 	or	r0, r0, r0
  e0:	b0000000 	imm	0
  e4:	30800000 	addik	r4, r0, 0
  e8:	bc04fff0 	beqi	r4, -16		// d8
  ec:	3021ffe4 	addik	r1, r1, -28
  f0:	f9e10000 	swi	r15, r1, 0
  f4:	99fc2000 	brald	r15, r4
  f8:	80000000 	or	r0, r0, r0
  fc:	e9e10000 	lwi	r15, r1, 0
 100:	b60f0008 	rtsd	r15, 8
 104:	3021001c 	addik	r1, r1, 28

00000108 <__do_global_dtors_aux>:
 108:	e06026f0 	lbui	r3, r0, 9968	// 26f0 <_SDA_BASE_>
 10c:	bc23009c 	bnei	r3, 156		// 1a8
 110:	3021ffe0 	addik	r1, r1, -32
 114:	fa61001c 	swi	r19, r1, 28
 118:	30800688 	addik	r4, r0, 1672	// 688 <__CTOR_END__>
 11c:	3260068c 	addik	r19, r0, 1676	// 68c <__DTOR_END__>
 120:	e86026f4 	lwi	r3, r0, 9972	// 26f4 <dtor_idx.2710>
 124:	16649800 	rsubk	r19, r4, r19
 128:	66730202 	bsrai	r19, r19, 2
 12c:	3273ffff 	addik	r19, r19, -1
 130:	16531803 	cmpu	r18, r19, r3
 134:	beb20034 	bgeid	r18, 52		// 168
 138:	f9e10000 	swi	r15, r1, 0
 13c:	30630001 	addik	r3, r3, 1
 140:	64830402 	bslli	r4, r3, 2
 144:	30840688 	addik	r4, r4, 1672
 148:	e8840000 	lwi	r4, r4, 0
 14c:	f86026f4 	swi	r3, r0, 9972	// 26f4 <dtor_idx.2710>
 150:	99fc2000 	brald	r15, r4
 154:	80000000 	or	r0, r0, r0
 158:	e86026f4 	lwi	r3, r0, 9972	// 26f4 <dtor_idx.2710>
 15c:	16531803 	cmpu	r18, r19, r3
 160:	be52ffe0 	bltid	r18, -32		// 140
 164:	30630001 	addik	r3, r3, 1
 168:	b9f4ff08 	brlid	r15, -248	// 70 <deregister_tm_clones>
 16c:	80000000 	or	r0, r0, r0
 170:	b0000000 	imm	0
 174:	30600000 	addik	r3, r0, 0
 178:	be03001c 	beqid	r3, 28		// 194
 17c:	e9e10000 	lwi	r15, r1, 0
 180:	30a026e4 	addik	r5, r0, 9956	// 26e4 <__EH_FRAME_BEGIN__>
 184:	b000ffff 	imm	-1
 188:	b9f4fe78 	brlid	r15, -392	// 0 <_start>
 18c:	80000000 	or	r0, r0, r0
 190:	e9e10000 	lwi	r15, r1, 0
 194:	ea61001c 	lwi	r19, r1, 28
 198:	30600001 	addik	r3, r0, 1
 19c:	f06026f0 	sbi	r3, r0, 9968	// 26f0 <_SDA_BASE_>
 1a0:	b60f0008 	rtsd	r15, 8
 1a4:	30210020 	addik	r1, r1, 32
 1a8:	b60f0008 	rtsd	r15, 8
 1ac:	80000000 	or	r0, r0, r0

000001b0 <frame_dummy>:
 1b0:	b0000000 	imm	0
 1b4:	30600000 	addik	r3, r0, 0
 1b8:	3021ffe4 	addik	r1, r1, -28
 1bc:	be030018 	beqid	r3, 24		// 1d4
 1c0:	f9e10000 	swi	r15, r1, 0
 1c4:	30a026e4 	addik	r5, r0, 9956	// 26e4 <__EH_FRAME_BEGIN__>
 1c8:	30c026f8 	addik	r6, r0, 9976	// 26f8 <object.2720>
 1cc:	99fc1800 	brald	r15, r3
 1d0:	80000000 	or	r0, r0, r0
 1d4:	e86026e8 	lwi	r3, r0, 9960	// 26e8 <__JCR_END__>
 1d8:	bc03001c 	beqi	r3, 28		// 1f4
 1dc:	b0000000 	imm	0
 1e0:	30600000 	addik	r3, r0, 0
 1e4:	bc030010 	beqi	r3, 16		// 1f4
 1e8:	30a026e8 	addik	r5, r0, 9960	// 26e8 <__JCR_END__>
 1ec:	99fc1800 	brald	r15, r3
 1f0:	80000000 	or	r0, r0, r0
 1f4:	b9f4fec4 	brlid	r15, -316	// b8 <register_tm_clones>
 1f8:	80000000 	or	r0, r0, r0
 1fc:	e9e10000 	lwi	r15, r1, 0
 200:	b60f0008 	rtsd	r15, 8
 204:	3021001c 	addik	r1, r1, 28

00000208 <_crtinit>:
 208:	2021ffec 	addi	r1, r1, -20
 20c:	f9e10000 	swi	r15, r1, 0
 210:	20c026f0 	addi	r6, r0, 9968	// 26f0 <_SDA_BASE_>
 214:	20e026f0 	addi	r7, r0, 9968	// 26f0 <_SDA_BASE_>
 218:	06463800 	rsub	r18, r6, r7
 21c:	bc720014 	blei	r18, 20		// 230
 220:	f8060000 	swi	r0, r6, 0
 224:	20c60004 	addi	r6, r6, 4
 228:	06463800 	rsub	r18, r6, r7
 22c:	bc92fff4 	bgti	r18, -12		// 220
 230:	20c026f0 	addi	r6, r0, 9968	// 26f0 <_SDA_BASE_>
 234:	20e02714 	addi	r7, r0, 10004	// 2714 <__bss_end>
 238:	06463800 	rsub	r18, r6, r7
 23c:	bc720014 	blei	r18, 20		// 250
 240:	f8060000 	swi	r0, r6, 0
 244:	20c60004 	addi	r6, r6, 4
 248:	06463800 	rsub	r18, r6, r7
 24c:	bc92fff4 	bgti	r18, -12		// 240
 250:	b9f40140 	brlid	r15, 320	// 390 <_program_init>
 254:	80000000 	or	r0, r0, r0
 258:	b9f403d8 	brlid	r15, 984	// 630 <__init>
 25c:	80000000 	or	r0, r0, r0
 260:	20c00000 	addi	r6, r0, 0
 264:	20e00000 	addi	r7, r0, 0
 268:	b9f4002c 	brlid	r15, 44	// 294 <main>
 26c:	20a00000 	addi	r5, r0, 0
 270:	32630000 	addik	r19, r3, 0
 274:	b9f403f0 	brlid	r15, 1008	// 664 <__fini>
 278:	80000000 	or	r0, r0, r0
 27c:	b9f4010c 	brlid	r15, 268	// 388 <_program_clean>
 280:	80000000 	or	r0, r0, r0
 284:	c9e10000 	lw	r15, r1, r0
 288:	30730000 	addik	r3, r19, 0
 28c:	b60f0008 	rtsd	r15, 8
 290:	20210014 	addi	r1, r1, 20

00000294 <main>:
extern void call_decoder_texture_DCReconstruction_invpred_scheduler();
extern void call_decoder_motion_interpolation_scheduler();
extern void call_decoder_motion_add_scheduler();
extern void call_decoder_motion_framebuf_scheduler();

int main(){
 294:	3021ffe0 	addik	r1, r1, -32
 298:	f9e10000 	swi	r15, r1, 0
 29c:	fa61001c 	swi	r19, r1, 28
 2a0:	12610000 	addk	r19, r1, r0
	 call_decoder_merger_scheduler();
 2a4:	b0001fff 	imm	8191
 2a8:	b9f4fd58 	brlid	r15, -680	// 20000000 <call_decoder_merger_scheduler>
 2ac:	80000000 	or	r0, r0, r0
	 call_decoder_parser_parseheaders_scheduler();
 2b0:	b0001fff 	imm	8191
 2b4:	b9f4fd94 	brlid	r15, -620	// 20000048 <call_decoder_parser_parseheaders_scheduler>
 2b8:	80000000 	or	r0, r0, r0
	 call_decoder_parser_mvseq_scheduler();
 2bc:	b0001fff 	imm	8191
 2c0:	b9f4fdd0 	brlid	r15, -560	// 20000090 <call_decoder_parser_mvseq_scheduler>
 2c4:	80000000 	or	r0, r0, r0
	 call_decoder_parser_blkexp_scheduler();
 2c8:	b0001fff 	imm	8191
 2cc:	b9f4fe0c 	brlid	r15, -500	// 200000d8 <call_decoder_parser_blkexp_scheduler>
 2d0:	80000000 	or	r0, r0, r0
	 call_decoder_parser_mvrecon_scheduler();
 2d4:	b0001fff 	imm	8191
 2d8:	b9f4fe48 	brlid	r15, -440	// 20000120 <call_decoder_parser_mvrecon_scheduler>
 2dc:	80000000 	or	r0, r0, r0
	 call_decoder_texture_DCsplit_scheduler();
 2e0:	b0001fff 	imm	8191
 2e4:	b9f4fe84 	brlid	r15, -380	// 20000168 <call_decoder_texture_DCsplit_scheduler>
 2e8:	80000000 	or	r0, r0, r0
	 call_decoder_texture_IS_scheduler();
 2ec:	b0001fff 	imm	8191
 2f0:	b9f4fec0 	brlid	r15, -320	// 200001b0 <call_decoder_texture_IS_scheduler>
 2f4:	80000000 	or	r0, r0, r0
	 call_decoder_texture_IAP_scheduler();
 2f8:	b0001fff 	imm	8191
 2fc:	b9f4fefc 	brlid	r15, -260	// 200001f8 <call_decoder_texture_IAP_scheduler>
 300:	80000000 	or	r0, r0, r0
	 call_decoder_texture_IQ_scheduler();
 304:	b0001fff 	imm	8191
 308:	b9f4ff38 	brlid	r15, -200	// 20000240 <call_decoder_texture_IQ_scheduler>
 30c:	80000000 	or	r0, r0, r0
	 call_decoder_texture_idct2d_scheduler();
 310:	b0001fff 	imm	8191
 314:	b9f4ff74 	brlid	r15, -140	// 20000288 <call_decoder_texture_idct2d_scheduler>
 318:	80000000 	or	r0, r0, r0
	 call_decoder_texture_DCReconstruction_addressing_scheduler();
 31c:	b0001fff 	imm	8191
 320:	b9f4ffb0 	brlid	r15, -80	// 200002d0 <call_decoder_texture_DCReconstruction_addressing_scheduler>
 324:	80000000 	or	r0, r0, r0
	 call_decoder_texture_DCReconstruction_invpred_scheduler();
 328:	b0001fff 	imm	8191
 32c:	b9f4ffec 	brlid	r15, -20	// 20000318 <call_decoder_texture_DCReconstruction_invpred_scheduler>
 330:	80000000 	or	r0, r0, r0
	 call_decoder_motion_interpolation_scheduler();
 334:	b0002000 	imm	8192
 338:	b9f40028 	brlid	r15, 40	// 20000360 <call_decoder_motion_interpolation_scheduler>
 33c:	80000000 	or	r0, r0, r0
	 call_decoder_motion_add_scheduler();
 340:	b0002000 	imm	8192
 344:	b9f40064 	brlid	r15, 100	// 200003a8 <call_decoder_motion_add_scheduler>
 348:	80000000 	or	r0, r0, r0
	 call_decoder_motion_framebuf_scheduler();
 34c:	b0002000 	imm	8192
 350:	b9f400a0 	brlid	r15, 160	// 200003f0 <call_decoder_motion_framebuf_scheduler>
 354:	80000000 	or	r0, r0, r0

	 return 0;
 358:	10600000 	addk	r3, r0, r0
}
 35c:	e9e10000 	lwi	r15, r1, 0
 360:	10330000 	addk	r1, r19, r0
 364:	ea61001c 	lwi	r19, r1, 28
 368:	30210020 	addik	r1, r1, 32
 36c:	b60f0008 	rtsd	r15, 8
 370:	80000000 	or	r0, r0, r0

00000374 <_exception_handler>:
 374:	98085800 	bra	r11

00000378 <_hw_exception_handler>:
 378:	b6910000 	rted	r17, 0
 37c:	80000000 	or	r0, r0, r0

00000380 <_interrupt_handler>:
 380:	b62e0000 	rtid	r14, 0
 384:	80000000 	or	r0, r0, r0

00000388 <_program_clean>:
 388:	b60f0008 	rtsd	r15, 8
 38c:	80000000 	or	r0, r0, r0

00000390 <_program_init>:
 390:	b60f0008 	rtsd	r15, 8
 394:	80000000 	or	r0, r0, r0

00000398 <exit>:
 398:	3021ffe0 	addik	r1, r1, -32
 39c:	f9e10000 	swi	r15, r1, 0
 3a0:	fa61001c 	swi	r19, r1, 28
 3a4:	12610000 	addk	r19, r1, r0
 3a8:	f8b30024 	swi	r5, r19, 36
 3ac:	e8b30024 	lwi	r5, r19, 36
 3b0:	10c00000 	addk	r6, r0, r0
 3b4:	b9f40038 	brlid	r15, 56	// 3ec <__call_exitprocs>
 3b8:	80000000 	or	r0, r0, r0
 3bc:	e8600694 	lwi	r3, r0, 1684	// 694 <_global_impure_ptr>
 3c0:	e8630028 	lwi	r3, r3, 40
 3c4:	bc03001c 	beqi	r3, 28		// 3e0
 3c8:	e8600694 	lwi	r3, r0, 1684	// 694 <_global_impure_ptr>
 3cc:	e8630028 	lwi	r3, r3, 40
 3d0:	e8800694 	lwi	r4, r0, 1684	// 694 <_global_impure_ptr>
 3d4:	10a40000 	addk	r5, r4, r0
 3d8:	99fc1800 	brald	r15, r3
 3dc:	80000000 	or	r0, r0, r0
 3e0:	e8b30024 	lwi	r5, r19, 36
 3e4:	b9f4fc88 	brlid	r15, -888	// 6c <_exit>
 3e8:	80000000 	or	r0, r0, r0

000003ec <__call_exitprocs>:
 3ec:	3021ffc4 	addik	r1, r1, -60
 3f0:	f9e10000 	swi	r15, r1, 0
 3f4:	fa61002c 	swi	r19, r1, 44
 3f8:	fac10030 	swi	r22, r1, 48
 3fc:	fae10034 	swi	r23, r1, 52
 400:	fb010038 	swi	r24, r1, 56
 404:	12610000 	addk	r19, r1, r0
 408:	f8b30040 	swi	r5, r19, 64
 40c:	f8d30044 	swi	r6, r19, 68
 410:	e8600694 	lwi	r3, r0, 1684	// 694 <_global_impure_ptr>
 414:	eac30048 	lwi	r22, r3, 72
 418:	e8600694 	lwi	r3, r0, 1684	// 694 <_global_impure_ptr>
 41c:	30630048 	addik	r3, r3, 72
 420:	f873001c 	swi	r3, r19, 28
 424:	b80001a4 	bri	420		// 5c8
 428:	eb160088 	lwi	r24, r22, 136
 42c:	e8760004 	lwi	r3, r22, 4
 430:	32e3ffff 	addik	r23, r3, -1
 434:	b800012c 	bri	300		// 560
 438:	30600001 	addik	r3, r0, 1
 43c:	4463bc00 	bsll	r3, r3, r23
 440:	f8730020 	swi	r3, r19, 32
 444:	e8730044 	lwi	r3, r19, 68
 448:	bc030028 	beqi	r3, 40		// 470
 44c:	bc180020 	beqi	r24, 32		// 46c
 450:	30770020 	addik	r3, r23, 32
 454:	64630402 	bslli	r3, r3, 2
 458:	10781800 	addk	r3, r24, r3
 45c:	e8830000 	lwi	r4, r3, 0
 460:	e8730044 	lwi	r3, r19, 68
 464:	88641800 	xor	r3, r4, r3
 468:	bc030008 	beqi	r3, 8		// 470
 46c:	b80000f0 	bri	240		// 55c
 470:	30770002 	addik	r3, r23, 2
 474:	64630402 	bslli	r3, r3, 2
 478:	10761800 	addk	r3, r22, r3
 47c:	e8630000 	lwi	r3, r3, 0
 480:	f8730024 	swi	r3, r19, 36
 484:	e8760004 	lwi	r3, r22, 4
 488:	3063ffff 	addik	r3, r3, -1
 48c:	8863b800 	xor	r3, r3, r23
 490:	bc230014 	bnei	r3, 20		// 4a4
 494:	e8760004 	lwi	r3, r22, 4
 498:	3063ffff 	addik	r3, r3, -1
 49c:	f8760004 	swi	r3, r22, 4
 4a0:	b8000014 	bri	20		// 4b4
 4a4:	30770002 	addik	r3, r23, 2
 4a8:	64630402 	bslli	r3, r3, 2
 4ac:	10761800 	addk	r3, r22, r3
 4b0:	f8030000 	swi	r0, r3, 0
 4b4:	e8730024 	lwi	r3, r19, 36
 4b8:	bc230008 	bnei	r3, 8		// 4c0
 4bc:	b80000a0 	bri	160		// 55c
 4c0:	e8760004 	lwi	r3, r22, 4
 4c4:	f8730028 	swi	r3, r19, 40
 4c8:	bc180014 	beqi	r24, 20		// 4dc
 4cc:	e8980100 	lwi	r4, r24, 256
 4d0:	e8730020 	lwi	r3, r19, 32
 4d4:	84641800 	and	r3, r4, r3
 4d8:	bc230014 	bnei	r3, 20		// 4ec
 4dc:	e8730024 	lwi	r3, r19, 36
 4e0:	99fc1800 	brald	r15, r3
 4e4:	80000000 	or	r0, r0, r0
 4e8:	b8000054 	bri	84		// 53c
 4ec:	e8980104 	lwi	r4, r24, 260
 4f0:	e8730020 	lwi	r3, r19, 32
 4f4:	84641800 	and	r3, r4, r3
 4f8:	bc230028 	bnei	r3, 40		// 520
 4fc:	64770402 	bslli	r3, r23, 2
 500:	10781800 	addk	r3, r24, r3
 504:	e8830000 	lwi	r4, r3, 0
 508:	e8730024 	lwi	r3, r19, 36
 50c:	e8b30040 	lwi	r5, r19, 64
 510:	10c40000 	addk	r6, r4, r0
 514:	99fc1800 	brald	r15, r3
 518:	80000000 	or	r0, r0, r0
 51c:	b8000020 	bri	32		// 53c
 520:	64770402 	bslli	r3, r23, 2
 524:	10781800 	addk	r3, r24, r3
 528:	e8830000 	lwi	r4, r3, 0
 52c:	e8730024 	lwi	r3, r19, 36
 530:	10a40000 	addk	r5, r4, r0
 534:	99fc1800 	brald	r15, r3
 538:	80000000 	or	r0, r0, r0
 53c:	e8960004 	lwi	r4, r22, 4
 540:	e8730028 	lwi	r3, r19, 40
 544:	88641800 	xor	r3, r4, r3
 548:	bc23fec8 	bnei	r3, -312		// 410
 54c:	e873001c 	lwi	r3, r19, 28
 550:	e8630000 	lwi	r3, r3, 0
 554:	8863b000 	xor	r3, r3, r22
 558:	bc23feb8 	bnei	r3, -328		// 410
 55c:	32f7ffff 	addik	r23, r23, -1
 560:	bcb7fed8 	bgei	r23, -296		// 438
 564:	b0000000 	imm	0
 568:	30600000 	addik	r3, r0, 0
 56c:	bc230008 	bnei	r3, 8		// 574
 570:	b800005c 	bri	92		// 5cc
 574:	e8760004 	lwi	r3, r22, 4
 578:	bc230048 	bnei	r3, 72		// 5c0
 57c:	e8760000 	lwi	r3, r22, 0
 580:	bc030040 	beqi	r3, 64		// 5c0
 584:	e8960000 	lwi	r4, r22, 0
 588:	e873001c 	lwi	r3, r19, 28
 58c:	f8830000 	swi	r4, r3, 0
 590:	bc180014 	beqi	r24, 20		// 5a4
 594:	10b80000 	addk	r5, r24, r0
 598:	b000ffff 	imm	-1
 59c:	b9f4fa64 	brlid	r15, -1436	// 0 <_start>
 5a0:	80000000 	or	r0, r0, r0
 5a4:	10b60000 	addk	r5, r22, r0
 5a8:	b000ffff 	imm	-1
 5ac:	b9f4fa54 	brlid	r15, -1452	// 0 <_start>
 5b0:	80000000 	or	r0, r0, r0
 5b4:	e873001c 	lwi	r3, r19, 28
 5b8:	eac30000 	lwi	r22, r3, 0
 5bc:	b800000c 	bri	12		// 5c8
 5c0:	fad3001c 	swi	r22, r19, 28
 5c4:	ead60000 	lwi	r22, r22, 0
 5c8:	bc36fe60 	bnei	r22, -416		// 428
 5cc:	e9e10000 	lwi	r15, r1, 0
 5d0:	10330000 	addk	r1, r19, r0
 5d4:	ea61002c 	lwi	r19, r1, 44
 5d8:	eac10030 	lwi	r22, r1, 48
 5dc:	eae10034 	lwi	r23, r1, 52
 5e0:	eb010038 	lwi	r24, r1, 56
 5e4:	3021003c 	addik	r1, r1, 60
 5e8:	b60f0008 	rtsd	r15, 8
 5ec:	80000000 	or	r0, r0, r0

000005f0 <__do_global_ctors_aux>:
 5f0:	e8600680 	lwi	r3, r0, 1664	// 680 <__CTOR_LIST__>
 5f4:	3021ffe0 	addik	r1, r1, -32
 5f8:	fa61001c 	swi	r19, r1, 28
 5fc:	a883ffff 	xori	r4, r3, -1
 600:	32600680 	addik	r19, r0, 1664	// 680 <__CTOR_LIST__>
 604:	be04001c 	beqid	r4, 28		// 620
 608:	f9e10000 	swi	r15, r1, 0
 60c:	99fc1800 	brald	r15, r3
 610:	3273fffc 	addik	r19, r19, -4
 614:	e8730000 	lwi	r3, r19, 0
 618:	a883ffff 	xori	r4, r3, -1
 61c:	bc24fff0 	bnei	r4, -16		// 60c
 620:	e9e10000 	lwi	r15, r1, 0
 624:	ea61001c 	lwi	r19, r1, 28
 628:	b60f0008 	rtsd	r15, 8
 62c:	30210020 	addik	r1, r1, 32

Disassembly of section .init:

00000630 <__init>:
 630:	3021fff8 	addik	r1, r1, -8
 634:	d9e00800 	sw	r15, r0, r1
 638:	3160ffff 	addik	r11, r0, -1
 63c:	940bc802 	mts	rshr, r11
 640:	31600000 	addik	r11, r0, 0
 644:	940bc800 	mts	rslr, r11
 648:	b9f4fb68 	brlid	r15, -1176	// 1b0 <frame_dummy>
 64c:	80000000 	or	r0, r0, r0
 650:	b9f4ffa0 	brlid	r15, -96	// 5f0 <__do_global_ctors_aux>
 654:	80000000 	or	r0, r0, r0
 658:	c9e00800 	lw	r15, r0, r1
 65c:	b60f0008 	rtsd	r15, 8
 660:	30210008 	addik	r1, r1, 8

Disassembly of section .fini:

00000664 <__fini>:
 664:	3021fff8 	addik	r1, r1, -8
 668:	d9e00800 	sw	r15, r0, r1
 66c:	b9f4fa9c 	brlid	r15, -1380	// 108 <__do_global_dtors_aux>
 670:	80000000 	or	r0, r0, r0
 674:	c9e00800 	lw	r15, r0, r1
 678:	b60f0008 	rtsd	r15, 8
 67c:	30210008 	addik	r1, r1, 8
